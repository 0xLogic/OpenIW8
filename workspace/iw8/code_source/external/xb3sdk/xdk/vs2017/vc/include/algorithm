/*
==============
std::_Make_heap_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>
==============
*/

void __fastcall std::_Make_heap_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, StreamImageLoadingPredicate _Pred)
{
  ??$_Make_heap_unchecked@PEAUStreamSortKeyPacked@@VStreamImageLoadingPredicate@@@std@@YAXPEAUStreamSortKeyPacked@@0VStreamImageLoadingPredicate@@@Z(_First, _Last, _Pred);
}

/*
==============
std::_Pop_heap_hole_by_index<StreamSortKeyPacked *,StreamSortKeyPacked,StreamImageLoadingPredicate>
==============
*/

void __fastcall std::_Pop_heap_hole_by_index<StreamSortKeyPacked *,StreamSortKeyPacked,StreamImageLoadingPredicate>(StreamSortKeyPacked *_First, __int64 _Hole, __int64 _Bottom, StreamSortKeyPacked *_Val, StreamImageLoadingPredicate _Pred)
{
  ??$_Pop_heap_hole_by_index@PEAUStreamSortKeyPacked@@U1@VStreamImageLoadingPredicate@@@std@@YAXPEAUStreamSortKeyPacked@@_J1$$QEAU1@VStreamImageLoadingPredicate@@@Z(_First, _Hole, _Bottom, _Val, _Pred);
}

/*
==============
std::_Make_heap_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>
==============
*/

void __fastcall std::_Make_heap_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, StreamImageLoadingPredicate _Pred)
{
  ??$_Make_heap_unchecked@PEAUStreamSortKeyPacked@@VStreamImageLoadingPredicate@@@std@@YAXPEAUStreamSortKeyPacked@@0VStreamImageLoadingPredicate@@@Z(_First, _Last, _Pred);
}

/*
==============
std::_Pop_heap_hole_by_index<StreamSortKeyPacked *,StreamSortKeyPacked,StreamImageLoadingPredicate>
==============
*/

void __fastcall std::_Pop_heap_hole_by_index<StreamSortKeyPacked *,StreamSortKeyPacked,StreamImageLoadingPredicate>(StreamSortKeyPacked *_First, __int64 _Hole, __int64 _Bottom, StreamSortKeyPacked *_Val, StreamImageLoadingPredicate _Pred)
{
  ??$_Pop_heap_hole_by_index@PEAUStreamSortKeyPacked@@U1@VStreamImageLoadingPredicate@@@std@@YAXPEAUStreamSortKeyPacked@@_J1$$QEAU1@VStreamImageLoadingPredicate@@@Z(_First, _Hole, _Bottom, _Val, _Pred);
}

/*
==============
std::_Insertion_sort_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>
==============
*/

gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *__fastcall std::_Insertion_sort_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *result, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, const gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Last, SortKeyPartialPredicate _Pred)
{
  return ??$_Insertion_sort_unchecked@V?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@USortKeyPartialPredicate@@@std@@YA?AV?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@V123@V123@USortKeyPartialPredicate@@@Z(result, _First, _Last, _Pred);
}

/*
==============
std::_Pop_heap_hole_by_index<StreamSortKeyPacked *,StreamSortKeyPacked,StreamGenericLoadingPredicate>
==============
*/

void __fastcall std::_Pop_heap_hole_by_index<StreamSortKeyPacked *,StreamSortKeyPacked,StreamGenericLoadingPredicate>(StreamSortKeyPacked *_First, __int64 _Hole, __int64 _Bottom, StreamSortKeyPacked *_Val, StreamGenericLoadingPredicate _Pred)
{
  ??$_Pop_heap_hole_by_index@PEAUStreamSortKeyPacked@@U1@VStreamGenericLoadingPredicate@@@std@@YAXPEAUStreamSortKeyPacked@@_J1$$QEAU1@VStreamGenericLoadingPredicate@@@Z(_First, _Hole, _Bottom, _Val, _Pred);
}

/*
==============
std::_Partition_by_median_guess_unchecked<CgVehiclePriorityInfo *,CgVehicleMPSortFunctor>
==============
*/

std::pair<CgVehiclePriorityInfo *,CgVehiclePriorityInfo *> *__fastcall std::_Partition_by_median_guess_unchecked<CgVehiclePriorityInfo *,CgVehicleMPSortFunctor>(std::pair<CgVehiclePriorityInfo *,CgVehiclePriorityInfo *> *result, CgVehiclePriorityInfo *_First, CgVehiclePriorityInfo *_Last, CgVehicleMPSortFunctor _Pred)
{
  return ??$_Partition_by_median_guess_unchecked@PEAUCgVehiclePriorityInfo@@UCgVehicleMPSortFunctor@@@std@@YA?AU?$pair@PEAUCgVehiclePriorityInfo@@PEAU1@@0@PEAUCgVehiclePriorityInfo@@0UCgVehicleMPSortFunctor@@@Z(result, _First, _Last, _Pred);
}

/*
==============
std::_Make_heap_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>
==============
*/

void __fastcall std::_Make_heap_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, StreamGenericLoadingPredicate _Pred)
{
  ??$_Make_heap_unchecked@PEAUStreamSortKeyPacked@@VStreamGenericLoadingPredicate@@@std@@YAXPEAUStreamSortKeyPacked@@0VStreamGenericLoadingPredicate@@@Z(_First, _Last, _Pred);
}

/*
==============
std::_Pop_heap_hole_by_index<score_t *,score_t,CgScoreBoardCompare>
==============
*/

void __fastcall std::_Pop_heap_hole_by_index<score_t *,score_t,CgScoreBoardCompare>(score_t *_First, __int64 _Hole, __int64 _Bottom, score_t *_Val, CgScoreBoardCompare _Pred)
{
  ??$_Pop_heap_hole_by_index@PEAUscore_t@@U1@UCgScoreBoardCompare@@@std@@YAXPEAUscore_t@@_J1$$QEAU1@UCgScoreBoardCompare@@@Z(_First, _Hole, _Bottom, _Val, _Pred);
}

/*
==============
std::_Make_heap_unchecked<PostMatchInfo_t *,LUIScoreCompare>
==============
*/

void __fastcall std::_Make_heap_unchecked<PostMatchInfo_t *,LUIScoreCompare>(PostMatchInfo_t *_First, PostMatchInfo_t *_Last, LUIScoreCompare _Pred)
{
  ??$_Make_heap_unchecked@PEAUPostMatchInfo_t@@ULUIScoreCompare@@@std@@YAXPEAUPostMatchInfo_t@@0ULUIScoreCompare@@@Z(_First, _Last, _Pred);
}

/*
==============
std::_Insertion_sort_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>
==============
*/

StreamSortKeyPacked *__fastcall std::_Insertion_sort_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *const _Last, StreamMeshLoadingPredicate _Pred)
{
  return ??$_Insertion_sort_unchecked@PEAUStreamSortKeyPacked@@VStreamMeshLoadingPredicate@@@std@@YAPEAUStreamSortKeyPacked@@PEAU1@QEAU1@VStreamMeshLoadingPredicate@@@Z(_First, _Last, _Pred);
}

/*
==============
std::_Sort_unchecked<XSurface * *,XSurfaceHashComparer>
==============
*/

void __fastcall std::_Sort_unchecked<XSurface * *,XSurfaceHashComparer>(XSurface **_First, XSurface **_Last, __int64 _Ideal, XSurfaceHashComparer _Pred)
{
  ??$_Sort_unchecked@PEAPEAUXSurface@@UXSurfaceHashComparer@@@std@@YAXPEAPEAUXSurface@@0_JUXSurfaceHashComparer@@@Z(_First, _Last, _Ideal, _Pred);
}

/*
==============
std::_Pop_heap_hole_by_index<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingScriptableLootChestInfo,CgWeaponStreamingMpScriptableLootSortFunctor>
==============
*/

void __fastcall std::_Pop_heap_hole_by_index<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingScriptableLootChestInfo,CgWeaponStreamingMpScriptableLootSortFunctor>(CgWeaponStreamingScriptableLootChestInfo *_First, __int64 _Hole, __int64 _Bottom, CgWeaponStreamingScriptableLootChestInfo *_Val, CgWeaponStreamingMpScriptableLootSortFunctor _Pred)
{
  ??$_Pop_heap_hole_by_index@PEAUCgWeaponStreamingScriptableLootChestInfo@@U1@UCgWeaponStreamingMpScriptableLootSortFunctor@@@std@@YAXPEAUCgWeaponStreamingScriptableLootChestInfo@@_J1$$QEAU1@UCgWeaponStreamingMpScriptableLootSortFunctor@@@Z(_First, _Hole, _Bottom, _Val, _Pred);
}

/*
==============
std::_Push_heap_by_index<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,StreamSortKeyPacked,SortKeyPartialPredicate>
==============
*/

void __fastcall std::_Push_heap_by_index<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,StreamSortKeyPacked,SortKeyPartialPredicate>(gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, __int64 _Hole, __int64 _Top, StreamSortKeyPacked *_Val, SortKeyPartialPredicate _Pred)
{
  ??$_Push_heap_by_index@V?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@UStreamSortKeyPacked@@USortKeyPartialPredicate@@@std@@YAXV?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@_J1$$QEAUStreamSortKeyPacked@@USortKeyPartialPredicate@@@Z(_First, _Hole, _Top, _Val, _Pred);
}

/*
==============
std::_Sort_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>
==============
*/

void __fastcall std::_Sort_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Last, __int64 _Ideal, SortKeyPartialPredicate _Pred)
{
  ??$_Sort_unchecked@V?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@USortKeyPartialPredicate@@@std@@YAXV?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@0_JUSortKeyPartialPredicate@@@Z(_First, _Last, _Ideal, _Pred);
}

/*
==============
std::_Partition_by_median_guess_unchecked<score_t *,CgScoreBoardCompare>
==============
*/

std::pair<score_t *,score_t *> *__fastcall std::_Partition_by_median_guess_unchecked<score_t *,CgScoreBoardCompare>(std::pair<score_t *,score_t *> *result, score_t *_First, score_t *_Last, CgScoreBoardCompare _Pred)
{
  return ??$_Partition_by_median_guess_unchecked@PEAUscore_t@@UCgScoreBoardCompare@@@std@@YA?AU?$pair@PEAUscore_t@@PEAU1@@0@PEAUscore_t@@0UCgScoreBoardCompare@@@Z(result, _First, _Last, _Pred);
}

/*
==============
std::_Insertion_sort_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>
==============
*/

StreamSortKeyPacked *__fastcall std::_Insertion_sort_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *const _Last, StreamGenericLoadingPredicate _Pred)
{
  return ??$_Insertion_sort_unchecked@PEAUStreamSortKeyPacked@@VStreamGenericLoadingPredicate@@@std@@YAPEAUStreamSortKeyPacked@@PEAU1@QEAU1@VStreamGenericLoadingPredicate@@@Z(_First, _Last, _Pred);
}

/*
==============
std::_Pop_heap_hole_by_index<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingClientModelInfo,CgWeaponStreamingMpClientModelSortFunctor>
==============
*/

void __fastcall std::_Pop_heap_hole_by_index<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingClientModelInfo,CgWeaponStreamingMpClientModelSortFunctor>(CgWeaponStreamingClientModelInfo *_First, __int64 _Hole, __int64 _Bottom, CgWeaponStreamingClientModelInfo *_Val, CgWeaponStreamingMpClientModelSortFunctor _Pred)
{
  ??$_Pop_heap_hole_by_index@PEAUCgWeaponStreamingClientModelInfo@@U1@UCgWeaponStreamingMpClientModelSortFunctor@@@std@@YAXPEAUCgWeaponStreamingClientModelInfo@@_J1$$QEAU1@UCgWeaponStreamingMpClientModelSortFunctor@@@Z(_First, _Hole, _Bottom, _Val, _Pred);
}

/*
==============
std::_Partition_by_median_guess_unchecked<PostMatchInfo_t *,LUIScoreCompare>
==============
*/

std::pair<PostMatchInfo_t *,PostMatchInfo_t *> *__fastcall std::_Partition_by_median_guess_unchecked<PostMatchInfo_t *,LUIScoreCompare>(std::pair<PostMatchInfo_t *,PostMatchInfo_t *> *result, PostMatchInfo_t *_First, PostMatchInfo_t *_Last, LUIScoreCompare _Pred)
{
  return ??$_Partition_by_median_guess_unchecked@PEAUPostMatchInfo_t@@ULUIScoreCompare@@@std@@YA?AU?$pair@PEAUPostMatchInfo_t@@PEAU1@@0@PEAUPostMatchInfo_t@@0ULUIScoreCompare@@@Z(result, _First, _Last, _Pred);
}

/*
==============
std::_Partition_by_median_guess_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>
==============
*/

std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> *__fastcall std::_Partition_by_median_guess_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>(std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> *result, StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, StreamImageLoadingPredicate _Pred)
{
  return ??$_Partition_by_median_guess_unchecked@PEAUStreamSortKeyPacked@@VStreamImageLoadingPredicate@@@std@@YA?AU?$pair@PEAUStreamSortKeyPacked@@PEAU1@@0@PEAUStreamSortKeyPacked@@0VStreamImageLoadingPredicate@@@Z(result, _First, _Last, _Pred);
}

/*
==============
std::_Pop_heap_hole_by_index<XSurface * *,XSurface *,XSurfaceHashComparer>
==============
*/

void __fastcall std::_Pop_heap_hole_by_index<XSurface * *,XSurface *,XSurfaceHashComparer>(XSurface **_First, __int64 _Hole, __int64 _Bottom, XSurface **_Val, XSurfaceHashComparer _Pred)
{
  ??$_Pop_heap_hole_by_index@PEAPEAUXSurface@@PEAU1@UXSurfaceHashComparer@@@std@@YAXPEAPEAUXSurface@@_J1$$QEAPEAU1@UXSurfaceHashComparer@@@Z(_First, _Hole, _Bottom, _Val, _Pred);
}

/*
==============
std::_Pop_heap_hole_by_index<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,StreamSortKeyPacked,SortKeyPartialPredicate>
==============
*/

void __fastcall std::_Pop_heap_hole_by_index<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,StreamSortKeyPacked,SortKeyPartialPredicate>(gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, __int64 _Hole, __int64 _Bottom, StreamSortKeyPacked *_Val, SortKeyPartialPredicate _Pred)
{
  ??$_Pop_heap_hole_by_index@V?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@UStreamSortKeyPacked@@USortKeyPartialPredicate@@@std@@YAXV?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@_J1$$QEAUStreamSortKeyPacked@@USortKeyPartialPredicate@@@Z(_First, _Hole, _Bottom, _Val, _Pred);
}

/*
==============
std::_Make_heap_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>
==============
*/

void __fastcall std::_Make_heap_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Last, SortKeyPartialPredicate _Pred)
{
  ??$_Make_heap_unchecked@V?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@USortKeyPartialPredicate@@@std@@YAXV?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@0USortKeyPartialPredicate@@@Z(_First, _Last, _Pred);
}

/*
==============
std::_Guess_median_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>
==============
*/

void __fastcall std::_Guess_median_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Mid, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Last, SortKeyPartialPredicate _Pred)
{
  ??$_Guess_median_unchecked@V?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@USortKeyPartialPredicate@@@std@@YAXV?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@00USortKeyPartialPredicate@@@Z(_First, _Mid, _Last, _Pred);
}

/*
==============
std::_Med3_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>
==============
*/

void __fastcall std::_Med3_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Mid, StreamSortKeyPacked *_Last, StreamImageLoadingPredicate _Pred)
{
  ??$_Med3_unchecked@PEAUStreamSortKeyPacked@@VStreamImageLoadingPredicate@@@std@@YAXPEAUStreamSortKeyPacked@@00VStreamImageLoadingPredicate@@@Z(_First, _Mid, _Last, _Pred);
}

/*
==============
std::_Pop_heap_hole_by_index<StreamSortKeyPacked *,StreamSortKeyPacked,StreamMeshLoadingPredicate>
==============
*/

void __fastcall std::_Pop_heap_hole_by_index<StreamSortKeyPacked *,StreamSortKeyPacked,StreamMeshLoadingPredicate>(StreamSortKeyPacked *_First, __int64 _Hole, __int64 _Bottom, StreamSortKeyPacked *_Val, StreamMeshLoadingPredicate _Pred)
{
  ??$_Pop_heap_hole_by_index@PEAUStreamSortKeyPacked@@U1@VStreamMeshLoadingPredicate@@@std@@YAXPEAUStreamSortKeyPacked@@_J1$$QEAU1@VStreamMeshLoadingPredicate@@@Z(_First, _Hole, _Bottom, _Val, _Pred);
}

/*
==============
std::_Pop_heap_hole_by_index<CgVehiclePriorityInfo *,CgVehiclePriorityInfo,CgVehicleMPSortFunctor>
==============
*/

void __fastcall std::_Pop_heap_hole_by_index<CgVehiclePriorityInfo *,CgVehiclePriorityInfo,CgVehicleMPSortFunctor>(CgVehiclePriorityInfo *_First, __int64 _Hole, __int64 _Bottom, CgVehiclePriorityInfo *_Val, CgVehicleMPSortFunctor _Pred)
{
  ??$_Pop_heap_hole_by_index@PEAUCgVehiclePriorityInfo@@U1@UCgVehicleMPSortFunctor@@@std@@YAXPEAUCgVehiclePriorityInfo@@_J1$$QEAU1@UCgVehicleMPSortFunctor@@@Z(_First, _Hole, _Bottom, _Val, _Pred);
}

/*
==============
std::_Med3_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>
==============
*/

void __fastcall std::_Med3_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>(CG_PlayerCorpseMP_SortableCorpseInfo *_First, CG_PlayerCorpseMP_SortableCorpseInfo *_Mid, CG_PlayerCorpseMP_SortableCorpseInfo *_Last, CG_PlayerCorpseMP_SortableCorpse_LessThanFunc _Pred)
{
  ??$_Med3_unchecked@PEAUCG_PlayerCorpseMP_SortableCorpseInfo@@UCG_PlayerCorpseMP_SortableCorpse_LessThanFunc@@@std@@YAXPEAUCG_PlayerCorpseMP_SortableCorpseInfo@@00UCG_PlayerCorpseMP_SortableCorpse_LessThanFunc@@@Z(_First, _Mid, _Last, _Pred);
}

/*
==============
std::_Partition_by_median_guess_unchecked<XSurface * *,XSurfaceHashComparer>
==============
*/

std::pair<XSurface * *,XSurface * *> *__fastcall std::_Partition_by_median_guess_unchecked<XSurface * *,XSurfaceHashComparer>(std::pair<XSurface * *,XSurface * *> *result, XSurface **_First, XSurface **_Last, XSurfaceHashComparer _Pred)
{
  return ??$_Partition_by_median_guess_unchecked@PEAPEAUXSurface@@UXSurfaceHashComparer@@@std@@YA?AU?$pair@PEAPEAUXSurface@@PEAPEAU1@@0@PEAPEAUXSurface@@0UXSurfaceHashComparer@@@Z(result, _First, _Last, _Pred);
}

/*
==============
std::_Med3_unchecked<XSurface * *,XSurfaceHashComparer>
==============
*/

void __fastcall std::_Med3_unchecked<XSurface * *,XSurfaceHashComparer>(XSurface **_First, XSurface **_Mid, XSurface **_Last, XSurfaceHashComparer _Pred)
{
  ??$_Med3_unchecked@PEAPEAUXSurface@@UXSurfaceHashComparer@@@std@@YAXPEAPEAUXSurface@@00UXSurfaceHashComparer@@@Z(_First, _Mid, _Last, _Pred);
}

/*
==============
std::_Guess_median_unchecked<CgVehiclePriorityInfo *,CgVehicleMPSortFunctor>
==============
*/

void __fastcall std::_Guess_median_unchecked<CgVehiclePriorityInfo *,CgVehicleMPSortFunctor>(CgVehiclePriorityInfo *_First, CgVehiclePriorityInfo *_Mid, CgVehiclePriorityInfo *_Last, CgVehicleMPSortFunctor _Pred)
{
  ??$_Guess_median_unchecked@PEAUCgVehiclePriorityInfo@@UCgVehicleMPSortFunctor@@@std@@YAXPEAUCgVehiclePriorityInfo@@00UCgVehicleMPSortFunctor@@@Z(_First, _Mid, _Last, _Pred);
}

/*
==============
std::_Sort_unchecked<score_t *,CgScoreBoardCompare>
==============
*/

void __fastcall std::_Sort_unchecked<score_t *,CgScoreBoardCompare>(score_t *_First, score_t *_Last, __int64 _Ideal, CgScoreBoardCompare _Pred)
{
  ??$_Sort_unchecked@PEAUscore_t@@UCgScoreBoardCompare@@@std@@YAXPEAUscore_t@@0_JUCgScoreBoardCompare@@@Z(_First, _Last, _Ideal, _Pred);
}

/*
==============
std::_Med3_unchecked<score_t *,CgScoreBoardCompare>
==============
*/

void __fastcall std::_Med3_unchecked<score_t *,CgScoreBoardCompare>(score_t *_First, score_t *_Mid, score_t *_Last, CgScoreBoardCompare _Pred)
{
  ??$_Med3_unchecked@PEAUscore_t@@UCgScoreBoardCompare@@@std@@YAXPEAUscore_t@@00UCgScoreBoardCompare@@@Z(_First, _Mid, _Last, _Pred);
}

/*
==============
std::_Pop_heap_hole_by_index<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpseInfo,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>
==============
*/

void __fastcall std::_Pop_heap_hole_by_index<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpseInfo,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>(CG_PlayerCorpseMP_SortableCorpseInfo *_First, __int64 _Hole, __int64 _Bottom, CG_PlayerCorpseMP_SortableCorpseInfo *_Val, CG_PlayerCorpseMP_SortableCorpse_LessThanFunc _Pred)
{
  ??$_Pop_heap_hole_by_index@PEAUCG_PlayerCorpseMP_SortableCorpseInfo@@U1@UCG_PlayerCorpseMP_SortableCorpse_LessThanFunc@@@std@@YAXPEAUCG_PlayerCorpseMP_SortableCorpseInfo@@_J1$$QEAU1@UCG_PlayerCorpseMP_SortableCorpse_LessThanFunc@@@Z(_First, _Hole, _Bottom, _Val, _Pred);
}

/*
==============
std::_Med3_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>
==============
*/

void __fastcall std::_Med3_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Mid, StreamSortKeyPacked *_Last, StreamMeshLoadingPredicate _Pred)
{
  ??$_Med3_unchecked@PEAUStreamSortKeyPacked@@VStreamMeshLoadingPredicate@@@std@@YAXPEAUStreamSortKeyPacked@@00VStreamMeshLoadingPredicate@@@Z(_First, _Mid, _Last, _Pred);
}

/*
==============
std::_Partition_by_median_guess_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>
==============
*/

std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> *__fastcall std::_Partition_by_median_guess_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>(std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> *result, StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, StreamMeshLoadingPredicate _Pred)
{
  return ??$_Partition_by_median_guess_unchecked@PEAUStreamSortKeyPacked@@VStreamMeshLoadingPredicate@@@std@@YA?AU?$pair@PEAUStreamSortKeyPacked@@PEAU1@@0@PEAUStreamSortKeyPacked@@0VStreamMeshLoadingPredicate@@@Z(result, _First, _Last, _Pred);
}

/*
==============
std::_Make_heap_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>
==============
*/

void __fastcall std::_Make_heap_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>(CG_PlayerCorpseMP_SortableCorpseInfo *_First, CG_PlayerCorpseMP_SortableCorpseInfo *_Last, CG_PlayerCorpseMP_SortableCorpse_LessThanFunc _Pred)
{
  ??$_Make_heap_unchecked@PEAUCG_PlayerCorpseMP_SortableCorpseInfo@@UCG_PlayerCorpseMP_SortableCorpse_LessThanFunc@@@std@@YAXPEAUCG_PlayerCorpseMP_SortableCorpseInfo@@0UCG_PlayerCorpseMP_SortableCorpse_LessThanFunc@@@Z(_First, _Last, _Pred);
}

/*
==============
std::_Pop_heap_hole_by_index<PostMatchInfo_t *,PostMatchInfo_t,LUIScoreCompare>
==============
*/

void __fastcall std::_Pop_heap_hole_by_index<PostMatchInfo_t *,PostMatchInfo_t,LUIScoreCompare>(PostMatchInfo_t *_First, __int64 _Hole, __int64 _Bottom, PostMatchInfo_t *_Val, LUIScoreCompare _Pred)
{
  ??$_Pop_heap_hole_by_index@PEAUPostMatchInfo_t@@U1@ULUIScoreCompare@@@std@@YAXPEAUPostMatchInfo_t@@_J1$$QEAU1@ULUIScoreCompare@@@Z(_First, _Hole, _Bottom, _Val, _Pred);
}

/*
==============
std::_Partition_by_median_guess_unchecked<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingMpScriptableLootSortFunctor>
==============
*/

std::pair<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingScriptableLootChestInfo *> *__fastcall std::_Partition_by_median_guess_unchecked<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingMpScriptableLootSortFunctor>(std::pair<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingScriptableLootChestInfo *> *result, CgWeaponStreamingScriptableLootChestInfo *_First, CgWeaponStreamingScriptableLootChestInfo *_Last, CgWeaponStreamingMpScriptableLootSortFunctor _Pred)
{
  return ??$_Partition_by_median_guess_unchecked@PEAUCgWeaponStreamingScriptableLootChestInfo@@UCgWeaponStreamingMpScriptableLootSortFunctor@@@std@@YA?AU?$pair@PEAUCgWeaponStreamingScriptableLootChestInfo@@PEAU1@@0@PEAUCgWeaponStreamingScriptableLootChestInfo@@0UCgWeaponStreamingMpScriptableLootSortFunctor@@@Z(result, _First, _Last, _Pred);
}

/*
==============
std::_Sort_unchecked<PostMatchInfo_t *,LUIScoreCompare>
==============
*/

void __fastcall std::_Sort_unchecked<PostMatchInfo_t *,LUIScoreCompare>(PostMatchInfo_t *_First, PostMatchInfo_t *_Last, __int64 _Ideal, LUIScoreCompare _Pred)
{
  ??$_Sort_unchecked@PEAUPostMatchInfo_t@@ULUIScoreCompare@@@std@@YAXPEAUPostMatchInfo_t@@0_JULUIScoreCompare@@@Z(_First, _Last, _Ideal, _Pred);
}

/*
==============
std::_Sort_unchecked<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingMpScriptableLootSortFunctor>
==============
*/

void __fastcall std::_Sort_unchecked<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingMpScriptableLootSortFunctor>(CgWeaponStreamingScriptableLootChestInfo *_First, CgWeaponStreamingScriptableLootChestInfo *_Last, __int64 _Ideal, CgWeaponStreamingMpScriptableLootSortFunctor _Pred)
{
  ??$_Sort_unchecked@PEAUCgWeaponStreamingScriptableLootChestInfo@@UCgWeaponStreamingMpScriptableLootSortFunctor@@@std@@YAXPEAUCgWeaponStreamingScriptableLootChestInfo@@0_JUCgWeaponStreamingMpScriptableLootSortFunctor@@@Z(_First, _Last, _Ideal, _Pred);
}

/*
==============
std::_Insertion_sort_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>
==============
*/

StreamSortKeyPacked *__fastcall std::_Insertion_sort_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *const _Last, StreamImageLoadingPredicate _Pred)
{
  return ??$_Insertion_sort_unchecked@PEAUStreamSortKeyPacked@@VStreamImageLoadingPredicate@@@std@@YAPEAUStreamSortKeyPacked@@PEAU1@QEAU1@VStreamImageLoadingPredicate@@@Z(_First, _Last, _Pred);
}

/*
==============
std::_Sort_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>
==============
*/

void __fastcall std::_Sort_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, __int64 _Ideal, StreamMeshLoadingPredicate _Pred)
{
  ??$_Sort_unchecked@PEAUStreamSortKeyPacked@@VStreamMeshLoadingPredicate@@@std@@YAXPEAUStreamSortKeyPacked@@0_JVStreamMeshLoadingPredicate@@@Z(_First, _Last, _Ideal, _Pred);
}

/*
==============
std::_Partition_by_median_guess_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>
==============
*/

std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> *__fastcall std::_Partition_by_median_guess_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>(std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> *result, StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, StreamGenericLoadingPredicate _Pred)
{
  return ??$_Partition_by_median_guess_unchecked@PEAUStreamSortKeyPacked@@VStreamGenericLoadingPredicate@@@std@@YA?AU?$pair@PEAUStreamSortKeyPacked@@PEAU1@@0@PEAUStreamSortKeyPacked@@0VStreamGenericLoadingPredicate@@@Z(result, _First, _Last, _Pred);
}

/*
==============
std::_Med3_unchecked<StreamSortKeyPacked *,SortKeyPartialPredicate>
==============
*/

void __fastcall std::_Med3_unchecked<StreamSortKeyPacked *,SortKeyPartialPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Mid, StreamSortKeyPacked *_Last, SortKeyPartialPredicate _Pred)
{
  ??$_Med3_unchecked@PEAUStreamSortKeyPacked@@USortKeyPartialPredicate@@@std@@YAXPEAUStreamSortKeyPacked@@00USortKeyPartialPredicate@@@Z(_First, _Mid, _Last, _Pred);
}

/*
==============
std::_Sort_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>
==============
*/

void __fastcall std::_Sort_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, __int64 _Ideal, StreamGenericLoadingPredicate _Pred)
{
  ??$_Sort_unchecked@PEAUStreamSortKeyPacked@@VStreamGenericLoadingPredicate@@@std@@YAXPEAUStreamSortKeyPacked@@0_JVStreamGenericLoadingPredicate@@@Z(_First, _Last, _Ideal, _Pred);
}

/*
==============
std::_Sort_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>
==============
*/

void __fastcall std::_Sort_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, __int64 _Ideal, StreamImageLoadingPredicate _Pred)
{
  ??$_Sort_unchecked@PEAUStreamSortKeyPacked@@VStreamImageLoadingPredicate@@@std@@YAXPEAUStreamSortKeyPacked@@0_JVStreamImageLoadingPredicate@@@Z(_First, _Last, _Ideal, _Pred);
}

/*
==============
std::_Guess_median_unchecked<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingMpClientModelSortFunctor>
==============
*/

void __fastcall std::_Guess_median_unchecked<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingMpClientModelSortFunctor>(CgWeaponStreamingClientModelInfo *_First, CgWeaponStreamingClientModelInfo *_Mid, CgWeaponStreamingClientModelInfo *_Last, CgWeaponStreamingMpClientModelSortFunctor _Pred)
{
  ??$_Guess_median_unchecked@PEAUCgWeaponStreamingClientModelInfo@@UCgWeaponStreamingMpClientModelSortFunctor@@@std@@YAXPEAUCgWeaponStreamingClientModelInfo@@00UCgWeaponStreamingMpClientModelSortFunctor@@@Z(_First, _Mid, _Last, _Pred);
}

/*
==============
std::_Partition_by_median_guess_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>
==============
*/

std::pair<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpseInfo *> *__fastcall std::_Partition_by_median_guess_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>(std::pair<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpseInfo *> *result, CG_PlayerCorpseMP_SortableCorpseInfo *_First, CG_PlayerCorpseMP_SortableCorpseInfo *_Last, CG_PlayerCorpseMP_SortableCorpse_LessThanFunc _Pred)
{
  return ??$_Partition_by_median_guess_unchecked@PEAUCG_PlayerCorpseMP_SortableCorpseInfo@@UCG_PlayerCorpseMP_SortableCorpse_LessThanFunc@@@std@@YA?AU?$pair@PEAUCG_PlayerCorpseMP_SortableCorpseInfo@@PEAU1@@0@PEAUCG_PlayerCorpseMP_SortableCorpseInfo@@0UCG_PlayerCorpseMP_SortableCorpse_LessThanFunc@@@Z(result, _First, _Last, _Pred);
}

/*
==============
std::_Pop_heap_hole_by_index<StreamSortKeyPacked *,StreamSortKeyPacked,SortKeyPartialPredicate>
==============
*/

void __fastcall std::_Pop_heap_hole_by_index<StreamSortKeyPacked *,StreamSortKeyPacked,SortKeyPartialPredicate>(StreamSortKeyPacked *_First, __int64 _Hole, __int64 _Bottom, StreamSortKeyPacked *_Val, SortKeyPartialPredicate _Pred)
{
  ??$_Pop_heap_hole_by_index@PEAUStreamSortKeyPacked@@U1@USortKeyPartialPredicate@@@std@@YAXPEAUStreamSortKeyPacked@@_J1$$QEAU1@USortKeyPartialPredicate@@@Z(_First, _Hole, _Bottom, _Val, _Pred);
}

/*
==============
std::_Make_heap_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>
==============
*/

void __fastcall std::_Make_heap_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, StreamMeshLoadingPredicate _Pred)
{
  ??$_Make_heap_unchecked@PEAUStreamSortKeyPacked@@VStreamMeshLoadingPredicate@@@std@@YAXPEAUStreamSortKeyPacked@@0VStreamMeshLoadingPredicate@@@Z(_First, _Last, _Pred);
}

/*
==============
std::is_sorted_until<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>
==============
*/

gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *__fastcall std::is_sorted_until<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *result, const gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Last, SortKeyPartialPredicate _Pred)
{
  return ??$is_sorted_until@V?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@USortKeyPartialPredicate@@@std@@YA?AV?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@V123@V123@USortKeyPartialPredicate@@@Z(result, _First, _Last, _Pred);
}

/*
==============
std::_Med3_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>
==============
*/

void __fastcall std::_Med3_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Mid, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Last, SortKeyPartialPredicate _Pred)
{
  ??$_Med3_unchecked@V?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@USortKeyPartialPredicate@@@std@@YAXV?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@00USortKeyPartialPredicate@@@Z(_First, _Mid, _Last, _Pred);
}

/*
==============
std::_Insertion_sort_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>
==============
*/

CG_PlayerCorpseMP_SortableCorpseInfo *__fastcall std::_Insertion_sort_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>(CG_PlayerCorpseMP_SortableCorpseInfo *_First, CG_PlayerCorpseMP_SortableCorpseInfo *const _Last, CG_PlayerCorpseMP_SortableCorpse_LessThanFunc _Pred)
{
  return ??$_Insertion_sort_unchecked@PEAUCG_PlayerCorpseMP_SortableCorpseInfo@@UCG_PlayerCorpseMP_SortableCorpse_LessThanFunc@@@std@@YAPEAUCG_PlayerCorpseMP_SortableCorpseInfo@@PEAU1@QEAU1@UCG_PlayerCorpseMP_SortableCorpse_LessThanFunc@@@Z(_First, _Last, _Pred);
}

/*
==============
std::_Partition_by_median_guess_unchecked<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingMpClientModelSortFunctor>
==============
*/

std::pair<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingClientModelInfo *> *__fastcall std::_Partition_by_median_guess_unchecked<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingMpClientModelSortFunctor>(std::pair<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingClientModelInfo *> *result, CgWeaponStreamingClientModelInfo *_First, CgWeaponStreamingClientModelInfo *_Last, CgWeaponStreamingMpClientModelSortFunctor _Pred)
{
  return ??$_Partition_by_median_guess_unchecked@PEAUCgWeaponStreamingClientModelInfo@@UCgWeaponStreamingMpClientModelSortFunctor@@@std@@YA?AU?$pair@PEAUCgWeaponStreamingClientModelInfo@@PEAU1@@0@PEAUCgWeaponStreamingClientModelInfo@@0UCgWeaponStreamingMpClientModelSortFunctor@@@Z(result, _First, _Last, _Pred);
}

/*
==============
std::nth_element<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>
==============
*/

void __fastcall std::nth_element<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Nth, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Last, SortKeyPartialPredicate _Pred)
{
  ??$nth_element@V?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@USortKeyPartialPredicate@@@std@@YAXV?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@00USortKeyPartialPredicate@@@Z(_First, _Nth, _Last, _Pred);
}

/*
==============
std::_Sort_unchecked<CgVehiclePriorityInfo *,CgVehicleMPSortFunctor>
==============
*/

void __fastcall std::_Sort_unchecked<CgVehiclePriorityInfo *,CgVehicleMPSortFunctor>(CgVehiclePriorityInfo *_First, CgVehiclePriorityInfo *_Last, __int64 _Ideal, CgVehicleMPSortFunctor _Pred)
{
  ??$_Sort_unchecked@PEAUCgVehiclePriorityInfo@@UCgVehicleMPSortFunctor@@@std@@YAXPEAUCgVehiclePriorityInfo@@0_JUCgVehicleMPSortFunctor@@@Z(_First, _Last, _Ideal, _Pred);
}

/*
==============
std::_Sort_unchecked<StreamSortKeyPacked *,SortKeyPartialPredicate>
==============
*/

void __fastcall std::_Sort_unchecked<StreamSortKeyPacked *,SortKeyPartialPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, __int64 _Ideal, SortKeyPartialPredicate _Pred)
{
  ??$_Sort_unchecked@PEAUStreamSortKeyPacked@@USortKeyPartialPredicate@@@std@@YAXPEAUStreamSortKeyPacked@@0_JUSortKeyPartialPredicate@@@Z(_First, _Last, _Ideal, _Pred);
}

/*
==============
std::_Med3_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>
==============
*/

void __fastcall std::_Med3_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Mid, StreamSortKeyPacked *_Last, StreamGenericLoadingPredicate _Pred)
{
  ??$_Med3_unchecked@PEAUStreamSortKeyPacked@@VStreamGenericLoadingPredicate@@@std@@YAXPEAUStreamSortKeyPacked@@00VStreamGenericLoadingPredicate@@@Z(_First, _Mid, _Last, _Pred);
}

/*
==============
std::_Guess_median_unchecked<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingMpScriptableLootSortFunctor>
==============
*/

void __fastcall std::_Guess_median_unchecked<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingMpScriptableLootSortFunctor>(CgWeaponStreamingScriptableLootChestInfo *_First, CgWeaponStreamingScriptableLootChestInfo *_Mid, CgWeaponStreamingScriptableLootChestInfo *_Last, CgWeaponStreamingMpScriptableLootSortFunctor _Pred)
{
  ??$_Guess_median_unchecked@PEAUCgWeaponStreamingScriptableLootChestInfo@@UCgWeaponStreamingMpScriptableLootSortFunctor@@@std@@YAXPEAUCgWeaponStreamingScriptableLootChestInfo@@00UCgWeaponStreamingMpScriptableLootSortFunctor@@@Z(_First, _Mid, _Last, _Pred);
}

/*
==============
std::_Partition_by_median_guess_unchecked<StreamSortKeyPacked *,SortKeyPartialPredicate>
==============
*/

std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> *__fastcall std::_Partition_by_median_guess_unchecked<StreamSortKeyPacked *,SortKeyPartialPredicate>(std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> *result, StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, SortKeyPartialPredicate _Pred)
{
  return ??$_Partition_by_median_guess_unchecked@PEAUStreamSortKeyPacked@@USortKeyPartialPredicate@@@std@@YA?AU?$pair@PEAUStreamSortKeyPacked@@PEAU1@@0@PEAUStreamSortKeyPacked@@0USortKeyPartialPredicate@@@Z(result, _First, _Last, _Pred);
}

/*
==============
std::_Med3_unchecked<PostMatchInfo_t *,LUIScoreCompare>
==============
*/

void __fastcall std::_Med3_unchecked<PostMatchInfo_t *,LUIScoreCompare>(PostMatchInfo_t *_First, PostMatchInfo_t *_Mid, PostMatchInfo_t *_Last, LUIScoreCompare _Pred)
{
  ??$_Med3_unchecked@PEAUPostMatchInfo_t@@ULUIScoreCompare@@@std@@YAXPEAUPostMatchInfo_t@@00ULUIScoreCompare@@@Z(_First, _Mid, _Last, _Pred);
}

/*
==============
std::_Sort_heap_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>
==============
*/

void __fastcall std::_Sort_heap_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Last, SortKeyPartialPredicate _Pred)
{
  ??$_Sort_heap_unchecked@V?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@USortKeyPartialPredicate@@@std@@YAXV?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@0USortKeyPartialPredicate@@@Z(_First, _Last, _Pred);
}

/*
==============
std::_Sort_unchecked<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingMpClientModelSortFunctor>
==============
*/

void __fastcall std::_Sort_unchecked<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingMpClientModelSortFunctor>(CgWeaponStreamingClientModelInfo *_First, CgWeaponStreamingClientModelInfo *_Last, __int64 _Ideal, CgWeaponStreamingMpClientModelSortFunctor _Pred)
{
  ??$_Sort_unchecked@PEAUCgWeaponStreamingClientModelInfo@@UCgWeaponStreamingMpClientModelSortFunctor@@@std@@YAXPEAUCgWeaponStreamingClientModelInfo@@0_JUCgWeaponStreamingMpClientModelSortFunctor@@@Z(_First, _Last, _Ideal, _Pred);
}

/*
==============
std::_Partition_by_median_guess_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>
==============
*/

std::pair<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> > *__fastcall std::_Partition_by_median_guess_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(std::pair<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> > *result, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Last, SortKeyPartialPredicate _Pred)
{
  return ??$_Partition_by_median_guess_unchecked@V?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@USortKeyPartialPredicate@@@std@@YA?AU?$pair@V?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@V123@@0@V?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@0USortKeyPartialPredicate@@@Z(result, _First, _Last, _Pred);
}

/*
==============
std::_Sort_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>
==============
*/

void __fastcall std::_Sort_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>(CG_PlayerCorpseMP_SortableCorpseInfo *_First, CG_PlayerCorpseMP_SortableCorpseInfo *_Last, __int64 _Ideal, CG_PlayerCorpseMP_SortableCorpse_LessThanFunc _Pred)
{
  ??$_Sort_unchecked@PEAUCG_PlayerCorpseMP_SortableCorpseInfo@@UCG_PlayerCorpseMP_SortableCorpse_LessThanFunc@@@std@@YAXPEAUCG_PlayerCorpseMP_SortableCorpseInfo@@0_JUCG_PlayerCorpseMP_SortableCorpse_LessThanFunc@@@Z(_First, _Last, _Ideal, _Pred);
}

/*
==============
std::sort<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>
==============
*/

void __fastcall std::sort<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(const gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, const gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Last, SortKeyPartialPredicate _Pred)
{
  ??$sort@V?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@USortKeyPartialPredicate@@@std@@YAXV?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@0USortKeyPartialPredicate@@@Z(_First, _Last, _Pred);
}

/*
==============
std::_Insertion_sort_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>
==============
*/
CG_PlayerCorpseMP_SortableCorpseInfo *std::_Insertion_sort_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>(CG_PlayerCorpseMP_SortableCorpseInfo *_First, CG_PlayerCorpseMP_SortableCorpseInfo *const _Last, CG_PlayerCorpseMP_SortableCorpse_LessThanFunc _Pred)
{
  CG_PlayerCorpseMP_SortableCorpseInfo *v5; 
  size_t v7; 
  PlayerCorpseMPViewZone zone; 
  unsigned __int64 v12; 
  unsigned __int64 v14; 
  bool *i; 
  unsigned __int8 v18; 
  char v19; 
  int v20; 
  __int128 v28; 
  __int64 v29; 

  _RDI = _First;
  if ( _First == _Last )
    return _Last;
  v5 = _First + 1;
  _RBP = _First + 1;
  if ( &_First[1] == _Last )
    return _Last;
  v7 = 1i64;
  do
  {
    __asm
    {
      vmovsd  xmm1, qword ptr [rbp+10h]
      vmovups xmm0, xmmword ptr [rbp+0]
    }
    zone = _RDI->zone;
    _RSI = _RBP;
    __asm
    {
      vmovsd  [rsp+78h+var_38], xmm1
      vmovups [rsp+78h+var_48], xmm0
    }
    LOBYTE(v12) = BYTE2(v29) < 5u;
    __asm
    {
      vmovups [rsp+78h+var_58], xmm0
      vmovsd  [rsp+78h+arg_0], xmm1
    }
    if ( BYTE2(v29) < 5u == (unsigned __int8)zone < PLAYER_CORPSE_ZONE_5 )
    {
      if ( (_BYTE)v29 == _RDI->visible )
      {
        __asm { vpextrq rax, xmm0, 1 }
        v12 = _RAX >> 16;
        if ( BYTE2(_RAX) == _RDI->isNewNextSnap )
        {
          if ( BYTE1(v29) == _RDI->fresh )
          {
            if ( BYTE2(v29) == (unsigned __int8)zone )
            {
              LODWORD(v12) = _RDI->time;
              v14 = HIDWORD(_RAX);
              if ( (_DWORD)v14 == (_DWORD)v12 )
                LOBYTE(v12) = SWORD4(v28) < _RDI->index;
              else
                LOBYTE(v12) = (int)v14 > (int)v12;
            }
            else
            {
              LOBYTE(v12) = BYTE2(v29) < (unsigned int)(unsigned __int8)zone;
            }
          }
          else
          {
            LOBYTE(v12) = BYTE1(v29);
          }
        }
      }
      else
      {
        LOBYTE(v12) = v29;
      }
    }
    if ( (_BYTE)v12 )
    {
      memmove_0(v5, _RDI, v7 * 24);
      __asm
      {
        vmovups xmm0, [rsp+78h+var_58]
        vmovups xmmword ptr [rdi], xmm0
        vmovsd  xmm0, [rsp+78h+arg_0]
        vmovsd  qword ptr [rdi+10h], xmm0
      }
    }
    else
    {
      for ( i = &_RDI[v7].visible; ; _RSI = (CG_PlayerCorpseMP_SortableCorpseInfo *)(i - 16) )
      {
        v18 = *(i - 22);
        i -= 24;
        if ( BYTE2(v29) < 5u == v18 < 5u )
        {
          if ( (_BYTE)v29 == *i )
          {
            if ( BYTE10(v28) == *(i - 6) )
            {
              if ( BYTE1(v29) == i[1] )
              {
                if ( BYTE2(v29) == v18 )
                {
                  v20 = *((_DWORD *)i - 1);
                  v19 = HIDWORD(v28) == v20 ? SWORD4(v28) < *((_WORD *)i - 4) : SHIDWORD(v28) > v20;
                }
                else
                {
                  v19 = BYTE2(v29) < (unsigned int)v18;
                }
              }
              else
              {
                v19 = BYTE1(v29);
              }
            }
            else
            {
              v19 = BYTE10(v28);
            }
          }
          else
          {
            v19 = v29;
          }
        }
        else
        {
          v19 = BYTE2(v29) < 5u;
        }
        if ( !v19 )
          break;
        _RAX = i - 16;
        __asm
        {
          vmovups xmm0, xmmword ptr [rax]
          vmovups xmmword ptr [rsi], xmm0
          vmovsd  xmm1, qword ptr [rax+10h]
          vmovsd  qword ptr [rsi+10h], xmm1
        }
      }
      __asm
      {
        vmovups xmm0, [rsp+78h+var_58]
        vmovups xmmword ptr [rsi], xmm0
        vmovsd  xmm0, [rsp+78h+arg_0]
        vmovsd  qword ptr [rsi+10h], xmm0
      }
    }
    ++_RBP;
    v5 = _RDI + 1;
    ++v7;
  }
  while ( _RBP != _Last );
  return _Last;
}

/*
==============
std::_Make_heap_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>
==============
*/
void std::_Make_heap_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>(CG_PlayerCorpseMP_SortableCorpseInfo *_First, CG_PlayerCorpseMP_SortableCorpseInfo *_Last, CG_PlayerCorpseMP_SortableCorpse_LessThanFunc _Pred)
{
  __int64 v4; 
  __int64 v5; 
  __int64 v6; 
  __int64 v7; 
  __int64 v9; 
  __int64 v12; 
  __int64 v13; 
  __int64 v14; 
  __int64 v15; 
  PlayerCorpseMPViewZone zone; 
  PlayerCorpseMPViewZone v17; 
  bool visible; 
  int time; 
  __int64 v28; 
  PlayerCorpseMPViewZone v29; 
  char isNewNextSnap; 
  int v32; 
  __int128 v37; 
  __int64 v38; 
  __int64 v39; 
  __int64 v40; 
  CG_PlayerCorpseMP_SortableCorpseInfo *v41; 

  _RBX = _First;
  v4 = (unsigned __int128)(((char *)_Last - (char *)_First) * (__int128)0x2AAAAAAAAAAAAAABi64) >> 64;
  v5 = ((unsigned __int64)v4 >> 63) + (v4 >> 2);
  v39 = v5;
  v6 = v5 >> 1;
  if ( v5 >> 1 > 0 )
  {
    v7 = v5 - 1;
    _RAX = &_RBX[v6];
    v9 = (v5 - 1) >> 1;
    v40 = v5 - 1;
    do
    {
      __asm
      {
        vmovups xmm2, xmmword ptr [rax-18h]
        vmovsd  xmm3, qword ptr [rax-8]
      }
      --v6;
      v41 = _RAX - 1;
      v12 = v6;
      v13 = v6;
      __asm
      {
        vmovups [rsp+58h+var_58], xmm2
        vmovsd  [rsp+58h+var_48], xmm3
      }
      if ( v6 < v9 )
      {
        do
        {
          v14 = 2 * v13;
          v15 = 2 * v13;
          zone = _RBX[2 * v13 + 2].zone;
          v17 = _RBX[2 * v13 + 1].zone;
          visible = (unsigned __int8)zone < PLAYER_CORPSE_ZONE_5;
          if ( (unsigned __int8)zone < PLAYER_CORPSE_ZONE_5 == (unsigned __int8)v17 < PLAYER_CORPSE_ZONE_5 )
          {
            visible = _RBX[v15 + 2].visible;
            if ( visible == _RBX[v15 + 1].visible )
            {
              visible = _RBX[v15 + 2].isNewNextSnap;
              if ( visible == _RBX[v15 + 1].isNewNextSnap )
              {
                visible = _RBX[v15 + 2].fresh;
                if ( visible == _RBX[v15 + 1].fresh )
                {
                  if ( zone == v17 )
                  {
                    time = _RBX[v15 + 1].time;
                    if ( _RBX[v15 + 2].time == time )
                      visible = _RBX[v15 + 2].index < _RBX[v15 + 1].index;
                    else
                      visible = _RBX[v15 + 2].time > time;
                  }
                  else
                  {
                    visible = (unsigned __int8)zone < (unsigned __int8)v17;
                  }
                }
              }
            }
          }
          _RAX = 3 * v12;
          v13 = v14 + 2i64 - visible;
          v12 = v13;
          _RCX = 3 * v13;
          __asm
          {
            vmovups xmm0, xmmword ptr [rbx+rcx*8]
            vmovups xmmword ptr [rbx+rax*8], xmm0
            vmovsd  xmm1, qword ptr [rbx+rcx*8+10h]
            vmovsd  qword ptr [rbx+rax*8+10h], xmm1
          }
        }
        while ( v13 < v9 );
        v5 = v39;
        v7 = v40;
      }
      if ( v13 == v9 && (v5 & 1) == 0 )
      {
        _RAX = 3 * v12;
        v12 = v7;
        _RCX = 3 * v5;
        __asm
        {
          vmovups xmm0, xmmword ptr [rbx+rcx*8-18h]
          vmovups xmmword ptr [rbx+rax*8], xmm0
          vmovsd  xmm1, qword ptr [rbx+rcx*8-8]
          vmovsd  qword ptr [rbx+rax*8+10h], xmm1
        }
      }
      v28 = (v12 - 1) >> 1;
      while ( v6 < v12 )
      {
        v29 = _RBX[v28].zone;
        _RCX = &_RBX[v28];
        isNewNextSnap = (unsigned __int8)v29 < PLAYER_CORPSE_ZONE_5;
        if ( (unsigned __int8)v29 < PLAYER_CORPSE_ZONE_5 == BYTE2(v38) < 5u )
        {
          isNewNextSnap = _RCX->visible;
          if ( isNewNextSnap == (_BYTE)v38 )
          {
            isNewNextSnap = _RCX->isNewNextSnap;
            if ( isNewNextSnap == BYTE10(v37) )
            {
              isNewNextSnap = _RCX->fresh;
              if ( isNewNextSnap == BYTE1(v38) )
              {
                if ( v29 == BYTE2(v38) )
                {
                  v32 = _RCX->time;
                  if ( v32 == HIDWORD(v37) )
                    isNewNextSnap = _RCX->index < SWORD4(v37);
                  else
                    isNewNextSnap = v32 > SHIDWORD(v37);
                }
                else
                {
                  isNewNextSnap = (unsigned __int8)v29 < BYTE2(v38);
                }
              }
            }
          }
        }
        if ( !isNewNextSnap )
          break;
        __asm { vmovups xmm0, xmmword ptr [rcx] }
        _RAX = 3 * v12;
        v12 = v28;
        __asm
        {
          vmovups xmmword ptr [rbx+rax*8], xmm0
          vmovsd  xmm1, qword ptr [rcx+10h]
        }
        v28 = (v28 - 1) >> 1;
        __asm { vmovsd  qword ptr [rbx+rax*8+10h], xmm1 }
      }
      v5 = v39;
      _RAX = 3 * v12;
      __asm
      {
        vmovups xmmword ptr [rbx+rax*8], xmm2
        vmovsd  qword ptr [rbx+rax*8+10h], xmm3
      }
      _RAX = v41;
      v7 = v39 - 1;
    }
    while ( v6 > 0 );
  }
}

/*
==============
std::_Med3_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>
==============
*/
void std::_Med3_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>(CG_PlayerCorpseMP_SortableCorpseInfo *_First, CG_PlayerCorpseMP_SortableCorpseInfo *_Mid, CG_PlayerCorpseMP_SortableCorpseInfo *_Last, CG_PlayerCorpseMP_SortableCorpse_LessThanFunc _Pred)
{
  PlayerCorpseMPViewZone zone; 
  PlayerCorpseMPViewZone v6; 
  bool visible; 
  int time; 
  PlayerCorpseMPViewZone v13; 
  bool isNewNextSnap; 
  int v15; 
  PlayerCorpseMPViewZone v20; 
  PlayerCorpseMPViewZone v21; 
  bool fresh; 
  int v23; 

  zone = _Mid->zone;
  _R10 = _Last;
  v6 = _First->zone;
  visible = (unsigned __int8)zone < PLAYER_CORPSE_ZONE_5;
  if ( (unsigned __int8)zone < PLAYER_CORPSE_ZONE_5 == (unsigned __int8)v6 < PLAYER_CORPSE_ZONE_5 )
  {
    visible = _Mid->visible;
    if ( visible == _First->visible )
    {
      visible = _Mid->isNewNextSnap;
      if ( visible == _First->isNewNextSnap )
      {
        visible = _Mid->fresh;
        if ( visible == _First->fresh )
        {
          if ( zone == v6 )
          {
            time = _First->time;
            if ( _Mid->time == time )
              visible = _Mid->index < _First->index;
            else
              visible = _Mid->time > time;
          }
          else
          {
            visible = (unsigned __int8)zone < (unsigned __int8)v6;
          }
        }
      }
    }
  }
  if ( visible )
  {
    __asm
    {
      vmovups xmm0, xmmword ptr [rcx]
      vmovups xmm3, xmmword ptr [rdx]
      vmovsd  xmm2, qword ptr [rdx+10h]
      vmovups xmmword ptr [rdx], xmm0
      vmovsd  xmm1, qword ptr [rcx+10h]
      vmovsd  qword ptr [rdx+10h], xmm1
      vmovups xmmword ptr [rcx], xmm3
      vmovsd  qword ptr [rcx+10h], xmm2
    }
    zone = _Mid->zone;
  }
  v13 = _R10->zone;
  isNewNextSnap = (unsigned __int8)v13 < PLAYER_CORPSE_ZONE_5;
  if ( (unsigned __int8)v13 < PLAYER_CORPSE_ZONE_5 == (unsigned __int8)zone < PLAYER_CORPSE_ZONE_5 )
  {
    isNewNextSnap = _R10->visible;
    if ( isNewNextSnap == _Mid->visible )
    {
      isNewNextSnap = _R10->isNewNextSnap;
      if ( isNewNextSnap == _Mid->isNewNextSnap )
      {
        isNewNextSnap = _R10->fresh;
        if ( isNewNextSnap == _Mid->fresh )
        {
          if ( v13 == zone )
          {
            v15 = _Mid->time;
            if ( _R10->time == v15 )
              isNewNextSnap = _R10->index < _Mid->index;
            else
              isNewNextSnap = _R10->time > v15;
          }
          else
          {
            isNewNextSnap = (unsigned __int8)v13 < (unsigned __int8)zone;
          }
        }
      }
    }
  }
  if ( isNewNextSnap )
  {
    __asm
    {
      vmovups xmm2, xmmword ptr [r10]
      vmovsd  xmm3, qword ptr [r10+10h]
      vmovups xmm0, xmmword ptr [rdx]
      vmovups xmmword ptr [r10], xmm0
      vmovsd  xmm1, qword ptr [rdx+10h]
      vmovsd  qword ptr [r10+10h], xmm1
      vmovups xmmword ptr [rdx], xmm2
      vmovsd  qword ptr [rdx+10h], xmm3
    }
    v20 = _Mid->zone;
    v21 = _First->zone;
    fresh = (unsigned __int8)v20 < PLAYER_CORPSE_ZONE_5;
    if ( (unsigned __int8)v20 < PLAYER_CORPSE_ZONE_5 == (unsigned __int8)v21 < PLAYER_CORPSE_ZONE_5 )
    {
      fresh = _Mid->visible;
      if ( fresh == _First->visible )
      {
        fresh = _Mid->isNewNextSnap;
        if ( fresh == _First->isNewNextSnap )
        {
          fresh = _Mid->fresh;
          if ( fresh == _First->fresh )
          {
            if ( v20 == v21 )
            {
              v23 = _First->time;
              if ( _Mid->time == v23 )
                fresh = _Mid->index < _First->index;
              else
                fresh = _Mid->time > v23;
            }
            else
            {
              fresh = (unsigned __int8)v20 < (unsigned __int8)v21;
            }
          }
        }
      }
    }
    if ( fresh )
    {
      __asm
      {
        vmovups xmm0, xmmword ptr [rcx]
        vmovups xmmword ptr [rdx], xmm0
        vmovsd  xmm1, qword ptr [rcx+10h]
        vmovsd  qword ptr [rdx+10h], xmm1
        vmovups xmmword ptr [rcx], xmm2
        vmovsd  qword ptr [rcx+10h], xmm3
      }
    }
  }
}

/*
==============
std::_Partition_by_median_guess_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>
==============
*/
std::pair<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpseInfo *> *std::_Partition_by_median_guess_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>(std::pair<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpseInfo *> *result, CG_PlayerCorpseMP_SortableCorpseInfo *_First, CG_PlayerCorpseMP_SortableCorpseInfo *_Last, CG_PlayerCorpseMP_SortableCorpse_LessThanFunc _Pred)
{
  CG_PlayerCorpseMP_SortableCorpseInfo *v4; 
  std::pair<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpseInfo *> *v6; 
  signed __int64 v9; 
  unsigned __int64 v10; 
  unsigned __int64 v11; 
  CG_PlayerCorpseMP_SortableCorpseInfo *v12; 
  bool *p_visible; 
  unsigned __int8 v15; 
  unsigned __int8 v16; 
  char v17; 
  char v18; 
  int v19; 
  int v20; 
  int v21; 
  int v22; 
  PlayerCorpseMPViewZone zone; 
  bool v24; 
  unsigned __int8 v25; 
  char v26; 
  int v27; 
  int time; 
  char visible; 
  int v30; 
  int v31; 
  PlayerCorpseMPViewZone v34; 
  unsigned __int8 v35; 
  char v36; 
  char isNewNextSnap; 
  int v38; 
  int v39; 
  int v40; 
  bool v45; 
  PlayerCorpseMPViewZone v46; 
  PlayerCorpseMPViewZone v47; 
  bool v48; 
  bool fresh; 
  int v50; 
  int v51; 
  int v52; 
  std::pair<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpseInfo *> *v78; 

  v4 = _First;
  v6 = result;
  _R15 = &_First[(_Last - _First) >> 1];
  v9 = &_Last[-1] - _First;
  if ( v9 <= 40 )
  {
    std::_Med3_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>(v4, _R15, _Last - 1, _Pred);
  }
  else
  {
    v10 = 48 * ((v9 + 1) >> 3);
    v11 = 24 * ((v9 + 1) >> 3);
    v12 = &v4[v11 / 0x18];
    std::_Med3_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>(_First, v12, &_First[v10 / 0x18], _Pred);
    std::_Med3_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>(&_R15[v11 / 0xFFFFFFFFFFFFFFE8ui64], _R15, &_R15[v11 / 0x18], _Pred);
    std::_Med3_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>(&_Last[v10 / 0xFFFFFFFFFFFFFFE8ui64 - 1], &_Last[v11 / 0xFFFFFFFFFFFFFFE8ui64 - 1], _Last - 1, _Pred);
    std::_Med3_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>(v12, _R15, &_Last[v11 / 0xFFFFFFFFFFFFFFE8ui64 - 1], _Pred);
    v4 = _First;
    v6 = result;
  }
  _R9 = (unsigned __int64)&_R15[1];
  if ( v4 < _R15 )
  {
    p_visible = &_R15[-1].visible;
    do
    {
      v15 = p_visible[2];
      v16 = p_visible[26];
      v17 = v16 < 5u;
      if ( v15 < 5u == v16 < 5u )
      {
        v18 = *p_visible;
        if ( *p_visible == p_visible[24] )
        {
          v18 = *(p_visible - 6);
          if ( v18 == p_visible[18] )
          {
            v18 = p_visible[1];
            if ( v18 == p_visible[25] )
            {
              if ( v15 == v16 )
              {
                v19 = *((_DWORD *)p_visible - 1);
                v20 = *((_DWORD *)p_visible + 5);
                if ( v19 == v20 )
                  v18 = *((_WORD *)p_visible - 4) < *((_WORD *)p_visible + 8);
                else
                  v18 = v19 > v20;
              }
              else
              {
                v18 = v15 < v16;
              }
            }
          }
        }
      }
      else
      {
        v18 = v15 < 5u;
      }
      if ( v18 )
        break;
      if ( v17 == v15 < 5u )
      {
        v17 = p_visible[24];
        if ( v17 == *p_visible )
        {
          v17 = p_visible[18];
          if ( v17 == *(p_visible - 6) )
          {
            v17 = p_visible[25];
            if ( v17 == p_visible[1] )
            {
              if ( v16 == v15 )
              {
                v21 = *((_DWORD *)p_visible + 5);
                v22 = *((_DWORD *)p_visible - 1);
                if ( v21 == v22 )
                  v17 = *((_WORD *)p_visible + 8) < *((_WORD *)p_visible - 4);
                else
                  v17 = v21 > v22;
              }
              else
              {
                v17 = v16 < v15;
              }
            }
          }
        }
      }
      if ( v17 )
        break;
      --_R15;
      p_visible -= 24;
    }
    while ( v4 < _R15 );
  }
  if ( _R9 < (unsigned __int64)_Last )
  {
    zone = _R15->zone;
    v24 = (unsigned __int8)zone < PLAYER_CORPSE_ZONE_5;
    do
    {
      v25 = *(_BYTE *)(_R9 + 18);
      if ( v25 < 5u == v24 )
      {
        v26 = *(_BYTE *)(_R9 + 16);
        if ( v26 == _R15->visible )
        {
          v26 = *(_BYTE *)(_R9 + 10);
          if ( v26 == _R15->isNewNextSnap )
          {
            v26 = *(_BYTE *)(_R9 + 17);
            if ( v26 == _R15->fresh )
            {
              if ( v25 == zone )
              {
                v27 = *(_DWORD *)(_R9 + 12);
                time = _R15->time;
                if ( v27 == time )
                  v26 = *(_WORD *)(_R9 + 8) < _R15->index;
                else
                  v26 = v27 > time;
              }
              else
              {
                v26 = v25 < (unsigned __int8)zone;
              }
            }
          }
        }
      }
      else
      {
        v26 = v25 < 5u;
      }
      if ( v26 )
        break;
      if ( v24 == v25 < 5u )
      {
        visible = _R15->visible;
        if ( visible == *(_BYTE *)(_R9 + 16) )
        {
          visible = _R15->isNewNextSnap;
          if ( visible == *(_BYTE *)(_R9 + 10) )
          {
            visible = _R15->fresh;
            if ( visible == *(_BYTE *)(_R9 + 17) )
            {
              if ( zone == v25 )
              {
                v30 = _R15->time;
                v31 = *(_DWORD *)(_R9 + 12);
                if ( v30 == v31 )
                  visible = _R15->index < *(_WORD *)(_R9 + 8);
                else
                  visible = v30 > v31;
              }
              else
              {
                visible = (unsigned __int8)zone < v25;
              }
            }
          }
        }
      }
      else
      {
        visible = (unsigned __int8)zone < PLAYER_CORPSE_ZONE_5;
      }
      if ( visible )
        break;
      _R9 += 24i64;
    }
    while ( _R9 < (unsigned __int64)_Last );
  }
  _RAX = _R9;
  _RDX = _R15;
  while ( 2 )
  {
    while ( 2 )
    {
      while ( _RAX < (unsigned __int64)_Last )
      {
        v34 = _R15->zone;
        v35 = *(_BYTE *)(_RAX + 18);
        v36 = v35 < 5u;
        if ( (unsigned __int8)v34 < PLAYER_CORPSE_ZONE_5 == v35 < 5u )
        {
          isNewNextSnap = _R15->visible;
          if ( isNewNextSnap == *(_BYTE *)(_RAX + 16) )
          {
            isNewNextSnap = _R15->isNewNextSnap;
            if ( isNewNextSnap == *(_BYTE *)(_RAX + 10) )
            {
              isNewNextSnap = _R15->fresh;
              if ( isNewNextSnap == *(_BYTE *)(_RAX + 17) )
              {
                if ( v34 == v35 )
                {
                  v38 = _R15->time;
                  if ( v38 == *(_DWORD *)(_RAX + 12) )
                    isNewNextSnap = _R15->index < *(_WORD *)(_RAX + 8);
                  else
                    isNewNextSnap = v38 > *(_DWORD *)(_RAX + 12);
                }
                else
                {
                  isNewNextSnap = (unsigned __int8)v34 < v35;
                }
              }
            }
          }
        }
        else
        {
          isNewNextSnap = (unsigned __int8)v34 < PLAYER_CORPSE_ZONE_5;
        }
        if ( !isNewNextSnap )
        {
          if ( v36 == (unsigned __int8)v34 < PLAYER_CORPSE_ZONE_5 )
          {
            v36 = *(_BYTE *)(_RAX + 16);
            if ( v36 == _R15->visible )
            {
              v36 = *(_BYTE *)(_RAX + 10);
              if ( v36 == _R15->isNewNextSnap )
              {
                v36 = *(_BYTE *)(_RAX + 17);
                if ( v36 == _R15->fresh )
                {
                  if ( v35 == v34 )
                  {
                    v39 = *(_DWORD *)(_RAX + 12);
                    v40 = _R15->time;
                    if ( v39 == v40 )
                      v36 = *(_WORD *)(_RAX + 8) < _R15->index;
                    else
                      v36 = v39 > v40;
                  }
                  else
                  {
                    v36 = v35 < (unsigned __int8)v34;
                  }
                }
              }
            }
          }
          if ( v36 )
            break;
          if ( _R9 != _RAX )
          {
            __asm
            {
              vmovups xmm0, xmmword ptr [rax]
              vmovups xmm3, xmmword ptr [r9]
              vmovsd  xmm2, qword ptr [r9+10h]
              vmovups xmmword ptr [r9], xmm0
              vmovsd  xmm1, qword ptr [rax+10h]
              vmovsd  qword ptr [r9+10h], xmm1
              vmovups xmmword ptr [rax], xmm3
              vmovsd  qword ptr [rax+10h], xmm2
            }
          }
          _R9 += 24i64;
        }
        _RAX += 24i64;
      }
      v45 = _RDX == v4;
      if ( _RDX <= v4 )
        goto LABEL_106;
      do
      {
        v46 = _RDX[-1].zone;
        v47 = _R15->zone;
        v48 = (unsigned __int8)v47 < PLAYER_CORPSE_ZONE_5;
        if ( (unsigned __int8)v46 < PLAYER_CORPSE_ZONE_5 == (unsigned __int8)v47 < PLAYER_CORPSE_ZONE_5 )
        {
          fresh = _RDX[-1].visible;
          if ( fresh == _R15->visible )
          {
            fresh = _RDX[-1].isNewNextSnap;
            if ( fresh == _R15->isNewNextSnap )
            {
              fresh = _RDX[-1].fresh;
              if ( fresh == _R15->fresh )
              {
                if ( v46 == v47 )
                {
                  v50 = _RDX[-1].time;
                  if ( v50 == _R15->time )
                    fresh = _RDX[-1].index < _R15->index;
                  else
                    fresh = v50 > _R15->time;
                }
                else
                {
                  fresh = (unsigned __int8)v46 < (unsigned __int8)v47;
                }
              }
            }
          }
        }
        else
        {
          fresh = (unsigned __int8)v46 < PLAYER_CORPSE_ZONE_5;
        }
        if ( fresh )
          goto LABEL_104;
        if ( v48 == (unsigned __int8)v46 < PLAYER_CORPSE_ZONE_5 )
        {
          v48 = _R15->visible;
          if ( v48 == _RDX[-1].visible )
          {
            v48 = _R15->isNewNextSnap;
            if ( v48 == _RDX[-1].isNewNextSnap )
            {
              v48 = _R15->fresh;
              if ( v48 == _RDX[-1].fresh )
              {
                if ( v47 == v46 )
                {
                  v51 = _R15->time;
                  v52 = _RDX[-1].time;
                  if ( v51 == v52 )
                    v48 = _R15->index < _RDX[-1].index;
                  else
                    v48 = v51 > v52;
                }
                else
                {
                  v48 = (unsigned __int8)v47 < (unsigned __int8)v46;
                }
              }
            }
          }
        }
        if ( v48 )
          break;
        --_R15;
        _RCX = _RDX - 1;
        if ( _R15 != &_RDX[-1] )
        {
          __asm
          {
            vmovups xmm0, xmmword ptr [rcx]
            vmovups xmm3, xmmword ptr [r15]
            vmovsd  xmm2, qword ptr [r15+10h]
            vmovups xmmword ptr [r15], xmm0
            vmovsd  xmm1, qword ptr [rcx+10h]
            vmovsd  qword ptr [r15+10h], xmm1
            vmovups xmmword ptr [rcx], xmm3
            vmovsd  qword ptr [rcx+10h], xmm2
          }
        }
LABEL_104:
        --_RDX;
      }
      while ( v4 < _RDX );
      v45 = _RDX == v4;
LABEL_106:
      if ( !v45 )
      {
        --_RDX;
        if ( (CG_PlayerCorpseMP_SortableCorpseInfo *)_RAX == _Last )
        {
          if ( _RDX != --_R15 )
          {
            __asm
            {
              vmovups xmm0, xmmword ptr [r15]
              vmovups xmm3, xmmword ptr [rdx]
              vmovsd  xmm2, qword ptr [rdx+10h]
              vmovups xmmword ptr [rdx], xmm0
              vmovsd  xmm1, qword ptr [r15+10h]
              vmovsd  qword ptr [rdx+10h], xmm1
              vmovups xmmword ptr [r15], xmm3
              vmovsd  qword ptr [r15+10h], xmm2
            }
          }
          __asm
          {
            vmovups xmm0, xmmword ptr [r9-18h]
            vmovups xmm3, xmmword ptr [r15]
            vmovsd  xmm2, qword ptr [r15+10h]
          }
          _R9 -= 24i64;
          __asm
          {
            vmovups xmmword ptr [r15], xmm0
            vmovsd  xmm1, qword ptr [r9+10h]
            vmovsd  qword ptr [r15+10h], xmm1
            vmovups xmmword ptr [r9], xmm3
            vmovsd  qword ptr [r9+10h], xmm2
          }
        }
        else
        {
          __asm
          {
            vmovups xmm3, xmmword ptr [rax]
            vmovsd  xmm2, qword ptr [rax+10h]
            vmovups xmm0, xmmword ptr [rdx]
            vmovups xmmword ptr [rax], xmm0
            vmovsd  xmm1, qword ptr [rdx+10h]
            vmovsd  qword ptr [rax+10h], xmm1
            vmovups xmmword ptr [rdx], xmm3
            vmovsd  qword ptr [rdx+10h], xmm2
          }
          _RAX += 24i64;
        }
        continue;
      }
      break;
    }
    if ( (CG_PlayerCorpseMP_SortableCorpseInfo *)_RAX != _Last )
    {
      if ( _R9 != _RAX )
      {
        __asm
        {
          vmovups xmm0, xmmword ptr [r9]
          vmovups xmm3, xmmword ptr [r15]
          vmovsd  xmm2, qword ptr [r15+10h]
          vmovups xmmword ptr [r15], xmm0
          vmovsd  xmm1, qword ptr [r9+10h]
          vmovsd  qword ptr [r15+10h], xmm1
          vmovups xmmword ptr [r9], xmm3
          vmovsd  qword ptr [r9+10h], xmm2
        }
      }
      __asm
      {
        vmovups xmm0, xmmword ptr [rax]
        vmovups xmm3, xmmword ptr [r15]
        vmovsd  xmm2, qword ptr [r15+10h]
        vmovups xmmword ptr [r15], xmm0
        vmovsd  xmm1, qword ptr [rax+10h]
        vmovsd  qword ptr [r15+10h], xmm1
        vmovups xmmword ptr [rax], xmm3
      }
      ++_R15;
      _R9 += 24i64;
      __asm { vmovsd  qword ptr [rax+10h], xmm2 }
      _RAX += 24i64;
      continue;
    }
    break;
  }
  v6->first = _R15;
  v78 = v6;
  v6->second = (CG_PlayerCorpseMP_SortableCorpseInfo *)_R9;
  return v78;
}

/*
==============
std::_Pop_heap_hole_by_index<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpseInfo,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>
==============
*/
void std::_Pop_heap_hole_by_index<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpseInfo,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>(CG_PlayerCorpseMP_SortableCorpseInfo *_First, __int64 _Hole, __int64 _Bottom, CG_PlayerCorpseMP_SortableCorpseInfo *_Val)
{
  __int64 v4; 
  __int64 v6; 
  __int64 v9; 
  __int64 v10; 
  PlayerCorpseMPViewZone zone; 
  CG_PlayerCorpseMP_SortableCorpseInfo *v12; 
  PlayerCorpseMPViewZone v13; 
  bool visible; 
  int time; 
  PlayerCorpseMPViewZone v24; 
  __int64 v25; 
  PlayerCorpseMPViewZone v26; 
  bool isNewNextSnap; 
  int v29; 

  v4 = _Hole;
  _RDI = _First;
  v6 = (_Bottom - 1) >> 1;
  v9 = _Hole;
  while ( v9 < v6 )
  {
    v10 = 2 * v9;
    zone = _RDI[2 * v9 + 2].zone;
    v12 = &_RDI[2 * v9];
    v13 = v12[1].zone;
    visible = (unsigned __int8)zone < PLAYER_CORPSE_ZONE_5;
    if ( (unsigned __int8)zone < PLAYER_CORPSE_ZONE_5 == (unsigned __int8)v13 < PLAYER_CORPSE_ZONE_5 )
    {
      visible = v12[2].visible;
      if ( visible == v12[1].visible )
      {
        visible = v12[2].isNewNextSnap;
        if ( visible == v12[1].isNewNextSnap )
        {
          visible = v12[2].fresh;
          if ( visible == v12[1].fresh )
          {
            if ( zone == v13 )
            {
              time = v12[1].time;
              if ( v12[2].time == time )
                visible = v12[2].index < v12[1].index;
              else
                visible = v12[2].time > time;
            }
            else
            {
              visible = (unsigned __int8)zone < (unsigned __int8)v13;
            }
          }
        }
      }
    }
    _RAX = 3 * v4;
    v9 = v10 + 2i64 - visible;
    v4 = v9;
    _RCX = 3 * v9;
    __asm
    {
      vmovups xmm0, xmmword ptr [rdi+rcx*8]
      vmovups xmmword ptr [rdi+rax*8], xmm0
      vmovsd  xmm1, qword ptr [rdi+rcx*8+10h]
      vmovsd  qword ptr [rdi+rax*8+10h], xmm1
    }
  }
  if ( v9 == v6 && (_Bottom & 1) == 0 )
  {
    _RAX = 3 * v4;
    _RCX = 3 * _Bottom;
    __asm
    {
      vmovups xmm0, xmmword ptr [rdi+rcx*8-18h]
      vmovups xmmword ptr [rdi+rax*8], xmm0
      vmovsd  xmm1, qword ptr [rdi+rcx*8-8]
      vmovsd  qword ptr [rdi+rax*8+10h], xmm1
    }
    v4 = _Bottom - 1;
  }
  if ( _Hole < v4 )
  {
    do
    {
      v24 = _Val->zone;
      v25 = (v4 - 1) >> 1;
      v26 = _RDI[v25].zone;
      _RDX = &_RDI[v25];
      isNewNextSnap = (unsigned __int8)v26 < PLAYER_CORPSE_ZONE_5;
      if ( (unsigned __int8)v26 < PLAYER_CORPSE_ZONE_5 == (unsigned __int8)v24 < PLAYER_CORPSE_ZONE_5 )
      {
        isNewNextSnap = _RDX->visible;
        if ( isNewNextSnap == _Val->visible )
        {
          isNewNextSnap = _RDX->isNewNextSnap;
          if ( isNewNextSnap == _Val->isNewNextSnap )
          {
            isNewNextSnap = _RDX->fresh;
            if ( isNewNextSnap == _Val->fresh )
            {
              if ( v26 == v24 )
              {
                v29 = _RDX->time;
                if ( v29 == _Val->time )
                  isNewNextSnap = _RDX->index < _Val->index;
                else
                  isNewNextSnap = v29 > _Val->time;
              }
              else
              {
                isNewNextSnap = (unsigned __int8)v26 < (unsigned __int8)v24;
              }
            }
          }
        }
      }
      if ( !isNewNextSnap )
        break;
      _RAX = 3 * v4;
      v4 = (v4 - 1) >> 1;
      __asm
      {
        vmovups xmm0, xmmword ptr [rdx]
        vmovups xmmword ptr [rdi+rax*8], xmm0
        vmovsd  xmm1, qword ptr [rdx+10h]
        vmovsd  qword ptr [rdi+rax*8+10h], xmm1
      }
    }
    while ( _Hole < v25 );
  }
  __asm { vmovups xmm0, xmmword ptr [r9] }
  _RAX = 3 * v4;
  __asm
  {
    vmovups xmmword ptr [rdi+rax*8], xmm0
    vmovsd  xmm1, qword ptr [r9+10h]
    vmovsd  qword ptr [rdi+rax*8+10h], xmm1
  }
}

/*
==============
std::_Sort_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>
==============
*/
void std::_Sort_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>(CG_PlayerCorpseMP_SortableCorpseInfo *_First, CG_PlayerCorpseMP_SortableCorpseInfo *_Last, __int64 _Ideal, CG_PlayerCorpseMP_SortableCorpse_LessThanFunc _Pred)
{
  CG_PlayerCorpseMP_SortableCorpseInfo *v4; 
  unsigned __int64 v8; 
  __int64 v9; 
  CG_PlayerCorpseMP_SortableCorpseInfo *v10; 
  const entityState_t *entityState; 
  CG_PlayerCorpseMP_SortableCorpseInfo result; 

  v4 = _Last;
  _RDI = _First;
  v8 = (__int64)((unsigned __int128)(((char *)_Last - (char *)_First) * (__int128)0x2AAAAAAAAAAAAAABi64) >> 64) >> 2;
  v9 = (v8 >> 63) + v8;
  if ( v9 <= 32 )
  {
LABEL_7:
    if ( v9 >= 2 )
      std::_Insertion_sort_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>(_RDI, v4, _Pred);
  }
  else
  {
    while ( _Ideal > 0 )
    {
      std::_Partition_by_median_guess_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>((std::pair<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpseInfo *> *)&result, _RDI, v4, _Pred);
      v10 = *(CG_PlayerCorpseMP_SortableCorpseInfo **)&result.index;
      entityState = result.entityState;
      _Ideal = (_Ideal >> 2) + (_Ideal >> 1);
      if ( ((char *)result.entityState - (char *)_RDI) / 24 >= ((__int64)v4 - *(_QWORD *)&result.index) / 24 )
      {
        std::_Sort_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>(*(CG_PlayerCorpseMP_SortableCorpseInfo **)&result.index, v4, _Ideal, _Pred);
        v4 = (CG_PlayerCorpseMP_SortableCorpseInfo *)entityState;
      }
      else
      {
        std::_Sort_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>(_RDI, (CG_PlayerCorpseMP_SortableCorpseInfo *)result.entityState, _Ideal, _Pred);
        _RDI = v10;
      }
      v9 = v4 - _RDI;
      if ( v9 <= 32 )
        goto LABEL_7;
    }
    std::_Make_heap_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>(_RDI, v4, _Pred);
    if ( v4 - _RDI >= 2 )
    {
      _RSI = v4 - 1;
      do
      {
        __asm
        {
          vmovups xmm0, xmmword ptr [rsi]
          vmovsd  xmm1, qword ptr [rsi+10h]
          vmovups xmmword ptr [rsp+68h+result.first], xmm0
          vmovups xmm0, xmmword ptr [rdi]
          vmovups xmmword ptr [rsi], xmm0
          vmovsd  [rsp+68h+var_28], xmm1
          vmovsd  xmm1, qword ptr [rdi+10h]
          vmovsd  qword ptr [rsi+10h], xmm1
        }
        std::_Pop_heap_hole_by_index<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpseInfo,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>(_RDI, 0i64, _RSI - _RDI, &result, _Pred);
        --_RSI;
      }
      while ( ((char *)_RSI - (char *)_RDI + 24) / 24 >= 2 );
    }
  }
}

/*
==============
std::_Guess_median_unchecked<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingMpClientModelSortFunctor>
==============
*/
void std::_Guess_median_unchecked<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingMpClientModelSortFunctor>(CgWeaponStreamingClientModelInfo *_First, CgWeaponStreamingClientModelInfo *_Mid, CgWeaponStreamingClientModelInfo *_Last, CgWeaponStreamingMpClientModelSortFunctor _Pred)
{
  signed __int64 v6; 
  bool v7; 
  __int64 v8; 
  bool v9; 
  CgWeaponStreamingClientModelInfo v13; 
  CgWeaponStreamingClientModelInfo v14; 
  CgWeaponStreamingClientModelInfo v18; 
  CgWeaponStreamingClientModelInfo v19; 
  CgWeaponStreamingClientModelInfo v24; 
  CgWeaponStreamingClientModelInfo v25; 
  CgWeaponStreamingClientModelInfo v28; 
  CgWeaponStreamingClientModelInfo v29; 
  CgWeaponStreamingClientModelInfo v32; 
  CgWeaponStreamingClientModelInfo v33; 

  _R11 = _Last;
  _R9 = _First;
  v6 = _Last - _First;
  v7 = (unsigned __int64)v6 <= 0x28;
  if ( v6 <= 40 )
  {
    __asm
    {
      vmovss  xmm0, dword ptr [rdx+4]
      vcomiss xmm0, dword ptr [rcx+4]
    }
    if ( (unsigned __int64)v6 < 0x28 )
    {
      v32 = *_Mid;
      *_Mid = *_First;
      *_First = v32;
      __asm { vmovss  xmm0, dword ptr [rdx+4] }
    }
    __asm { vcomiss xmm0, dword ptr [r8+4] }
    if ( !v7 )
    {
      v33 = *_Last;
      *_Last = *_Mid;
      *_Mid = v33;
      __asm
      {
        vmovss  xmm0, dword ptr [r9+4]
        vcomiss xmm0, dword ptr [rdx+4]
      }
      *_Mid = *_First;
      *_First = v33;
    }
  }
  else
  {
    v8 = (v6 + 1) >> 3;
    _RDI = 16 * v8;
    v9 = __CFSHL__(v8, 4) || 16 * v8 == 0;
    _R8 = 8 * v8;
    __asm
    {
      vmovss  xmm0, dword ptr [r8+rcx+4]
      vcomiss xmm0, dword ptr [rcx+4]
    }
    if ( __CFSHL__(v8, 4) )
    {
      v13 = _First[_R8 / 8];
      _First[_R8 / 8] = *_First;
      *_First = v13;
      __asm { vmovss  xmm0, dword ptr [r8+r9+4] }
    }
    __asm { vcomiss xmm0, dword ptr [rdi+r9+4] }
    if ( !v9 )
    {
      v14 = _First[_RDI / 8];
      _First[_RDI / 8] = _First[_R8 / 8];
      _First[_R8 / 8] = v14;
      __asm
      {
        vmovss  xmm0, dword ptr [r9+4]
        vcomiss xmm0, dword ptr [r8+r9+4]
      }
      _First[_R8 / 8] = *_First;
      *_First = v14;
    }
    __asm { vmovss  xmm0, dword ptr [rdx+4] }
    _R10 = &_Mid[_R8 / 0xFFFFFFFFFFFFFFF8ui64];
    __asm { vcomiss xmm0, dword ptr [r10+4] }
    if ( (unsigned __int64)_Mid < _R8 )
    {
      v18 = *_Mid;
      *_Mid = *_R10;
      *_R10 = v18;
      __asm { vmovss  xmm0, dword ptr [rdx+4] }
    }
    __asm { vcomiss xmm0, dword ptr [r8+rdx+4] }
    if ( (unsigned __int64)_Mid > _R8 )
    {
      v19 = _Mid[_R8 / 8];
      _Mid[_R8 / 8] = *_Mid;
      *_Mid = v19;
      __asm
      {
        vmovss  xmm0, dword ptr [r10+4]
        vcomiss xmm0, dword ptr [rdx+4]
      }
      if ( (unsigned __int64)_Mid > _R8 )
      {
        *_Mid = *_R10;
        *_R10 = v19;
      }
    }
    _R10 = &_R11[_R8 / 0xFFFFFFFFFFFFFFF8ui64];
    _RBX = &_R11[_RDI / 0xFFFFFFFFFFFFFFF8ui64];
    __asm
    {
      vmovss  xmm0, dword ptr [r10+4]
      vcomiss xmm0, dword ptr [rbx+4]
    }
    if ( (unsigned __int64)_R11 < _RDI )
    {
      v24 = *_R10;
      *_R10 = *_RBX;
      *_RBX = v24;
      __asm { vmovss  xmm0, dword ptr [r10+4] }
    }
    __asm { vcomiss xmm0, dword ptr [r11+4] }
    if ( (unsigned __int64)_R11 > _RDI )
    {
      v25 = *_R11;
      *_R11 = *_R10;
      *_R10 = v25;
      __asm
      {
        vmovss  xmm0, dword ptr [rbx+4]
        vcomiss xmm0, dword ptr [r10+4]
      }
      if ( (unsigned __int64)_R11 > _RDI )
      {
        *_R10 = *_RBX;
        *_RBX = v25;
      }
    }
    __asm
    {
      vmovss  xmm0, dword ptr [rdx+4]
      vcomiss xmm0, dword ptr [r8+r9+4]
    }
    if ( (unsigned __int64)_R11 < _RDI )
    {
      v28 = *_Mid;
      *_Mid = _First[_R8 / 8];
      _First[_R8 / 8] = v28;
      __asm { vmovss  xmm0, dword ptr [rdx+4] }
    }
    __asm { vcomiss xmm0, dword ptr [r10+4] }
    if ( (unsigned __int64)_R11 > _RDI )
    {
      v29 = *_R10;
      *_R10 = *_Mid;
      *_Mid = v29;
      __asm
      {
        vmovss  xmm0, dword ptr [r8+r9+4]
        vcomiss xmm0, dword ptr [rdx+4]
      }
      if ( (unsigned __int64)_R11 > _RDI )
      {
        *_Mid = _First[_R8 / 8];
        _First[_R8 / 8] = v29;
      }
    }
  }
}

/*
==============
std::_Guess_median_unchecked<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingMpScriptableLootSortFunctor>
==============
*/
void std::_Guess_median_unchecked<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingMpScriptableLootSortFunctor>(CgWeaponStreamingScriptableLootChestInfo *_First, CgWeaponStreamingScriptableLootChestInfo *_Mid, CgWeaponStreamingScriptableLootChestInfo *_Last, CgWeaponStreamingMpScriptableLootSortFunctor _Pred)
{
  signed __int64 v6; 
  bool v7; 
  __int64 v8; 
  bool v9; 
  CgWeaponStreamingScriptableLootChestInfo v13; 
  CgWeaponStreamingScriptableLootChestInfo v14; 
  CgWeaponStreamingScriptableLootChestInfo v18; 
  CgWeaponStreamingScriptableLootChestInfo v19; 
  CgWeaponStreamingScriptableLootChestInfo v24; 
  CgWeaponStreamingScriptableLootChestInfo v25; 
  CgWeaponStreamingScriptableLootChestInfo v28; 
  CgWeaponStreamingScriptableLootChestInfo v29; 
  CgWeaponStreamingScriptableLootChestInfo v32; 
  CgWeaponStreamingScriptableLootChestInfo v33; 

  _R11 = _Last;
  _R9 = _First;
  v6 = _Last - _First;
  v7 = (unsigned __int64)v6 <= 0x28;
  if ( v6 <= 40 )
  {
    __asm
    {
      vmovss  xmm0, dword ptr [rdx+4]
      vcomiss xmm0, dword ptr [rcx+4]
    }
    if ( (unsigned __int64)v6 < 0x28 )
    {
      v32 = *_Mid;
      *_Mid = *_First;
      *_First = v32;
      __asm { vmovss  xmm0, dword ptr [rdx+4] }
    }
    __asm { vcomiss xmm0, dword ptr [r8+4] }
    if ( !v7 )
    {
      v33 = *_Last;
      *_Last = *_Mid;
      *_Mid = v33;
      __asm
      {
        vmovss  xmm0, dword ptr [r9+4]
        vcomiss xmm0, dword ptr [rdx+4]
      }
      *_Mid = *_First;
      *_First = v33;
    }
  }
  else
  {
    v8 = (v6 + 1) >> 3;
    _RDI = 16 * v8;
    v9 = __CFSHL__(v8, 4) || 16 * v8 == 0;
    _R8 = 8 * v8;
    __asm
    {
      vmovss  xmm0, dword ptr [r8+rcx+4]
      vcomiss xmm0, dword ptr [rcx+4]
    }
    if ( __CFSHL__(v8, 4) )
    {
      v13 = _First[_R8 / 8];
      _First[_R8 / 8] = *_First;
      *_First = v13;
      __asm { vmovss  xmm0, dword ptr [r8+r9+4] }
    }
    __asm { vcomiss xmm0, dword ptr [rdi+r9+4] }
    if ( !v9 )
    {
      v14 = _First[_RDI / 8];
      _First[_RDI / 8] = _First[_R8 / 8];
      _First[_R8 / 8] = v14;
      __asm
      {
        vmovss  xmm0, dword ptr [r9+4]
        vcomiss xmm0, dword ptr [r8+r9+4]
      }
      _First[_R8 / 8] = *_First;
      *_First = v14;
    }
    __asm { vmovss  xmm0, dword ptr [rdx+4] }
    _R10 = &_Mid[_R8 / 0xFFFFFFFFFFFFFFF8ui64];
    __asm { vcomiss xmm0, dword ptr [r10+4] }
    if ( (unsigned __int64)_Mid < _R8 )
    {
      v18 = *_Mid;
      *_Mid = *_R10;
      *_R10 = v18;
      __asm { vmovss  xmm0, dword ptr [rdx+4] }
    }
    __asm { vcomiss xmm0, dword ptr [r8+rdx+4] }
    if ( (unsigned __int64)_Mid > _R8 )
    {
      v19 = _Mid[_R8 / 8];
      _Mid[_R8 / 8] = *_Mid;
      *_Mid = v19;
      __asm
      {
        vmovss  xmm0, dword ptr [r10+4]
        vcomiss xmm0, dword ptr [rdx+4]
      }
      if ( (unsigned __int64)_Mid > _R8 )
      {
        *_Mid = *_R10;
        *_R10 = v19;
      }
    }
    _R10 = &_R11[_R8 / 0xFFFFFFFFFFFFFFF8ui64];
    _RBX = &_R11[_RDI / 0xFFFFFFFFFFFFFFF8ui64];
    __asm
    {
      vmovss  xmm0, dword ptr [r10+4]
      vcomiss xmm0, dword ptr [rbx+4]
    }
    if ( (unsigned __int64)_R11 < _RDI )
    {
      v24 = *_R10;
      *_R10 = *_RBX;
      *_RBX = v24;
      __asm { vmovss  xmm0, dword ptr [r10+4] }
    }
    __asm { vcomiss xmm0, dword ptr [r11+4] }
    if ( (unsigned __int64)_R11 > _RDI )
    {
      v25 = *_R11;
      *_R11 = *_R10;
      *_R10 = v25;
      __asm
      {
        vmovss  xmm0, dword ptr [rbx+4]
        vcomiss xmm0, dword ptr [r10+4]
      }
      if ( (unsigned __int64)_R11 > _RDI )
      {
        *_R10 = *_RBX;
        *_RBX = v25;
      }
    }
    __asm
    {
      vmovss  xmm0, dword ptr [rdx+4]
      vcomiss xmm0, dword ptr [r8+r9+4]
    }
    if ( (unsigned __int64)_R11 < _RDI )
    {
      v28 = *_Mid;
      *_Mid = _First[_R8 / 8];
      _First[_R8 / 8] = v28;
      __asm { vmovss  xmm0, dword ptr [rdx+4] }
    }
    __asm { vcomiss xmm0, dword ptr [r10+4] }
    if ( (unsigned __int64)_R11 > _RDI )
    {
      v29 = *_R10;
      *_R10 = *_Mid;
      *_Mid = v29;
      __asm
      {
        vmovss  xmm0, dword ptr [r8+r9+4]
        vcomiss xmm0, dword ptr [rdx+4]
      }
      if ( (unsigned __int64)_R11 > _RDI )
      {
        *_Mid = _First[_R8 / 8];
        _First[_R8 / 8] = v29;
      }
    }
  }
}

/*
==============
std::_Partition_by_median_guess_unchecked<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingMpClientModelSortFunctor>
==============
*/
std::pair<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingClientModelInfo *> *std::_Partition_by_median_guess_unchecked<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingMpClientModelSortFunctor>(std::pair<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingClientModelInfo *> *result, CgWeaponStreamingClientModelInfo *_First, CgWeaponStreamingClientModelInfo *_Last, CgWeaponStreamingMpClientModelSortFunctor _Pred)
{
  bool i; 
  bool v12; 
  CgWeaponStreamingClientModelInfo *v16; 
  unsigned __int64 v17; 
  bool v18; 
  CgWeaponStreamingClientModelInfo v22; 
  CgWeaponStreamingClientModelInfo v24; 
  CgWeaponStreamingClientModelInfo *v26; 
  CgWeaponStreamingClientModelInfo v27; 
  CgWeaponStreamingClientModelInfo *v29; 
  CgWeaponStreamingClientModelInfo v30; 
  bool j; 
  CgWeaponStreamingClientModelInfo v34; 
  bool v35; 
  bool v36; 
  CgWeaponStreamingClientModelInfo v40; 
  CgWeaponStreamingClientModelInfo v41; 
  CgWeaponStreamingClientModelInfo v42; 
  CgWeaponStreamingClientModelInfo v43; 
  CgWeaponStreamingClientModelInfo v44; 
  CgWeaponStreamingClientModelInfo v45; 
  CgWeaponStreamingClientModelInfo v46; 
  std::pair<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingClientModelInfo *> *v47; 

  _RBX = &_First[((char *)_Last - (char *)_First) >> 4];
  std::_Guess_median_unchecked<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingMpClientModelSortFunctor>(_First, _RBX, _Last - 1, _Pred);
  _R8 = _RBX + 1;
  for ( i = _First < _RBX; _First < _RBX; i = _First < _RBX )
  {
    __asm
    {
      vmovss  xmm0, dword ptr [rbx-4]
      vmovss  xmm1, dword ptr [rbx+4]
      vcomiss xmm0, xmm1
    }
    if ( i )
      break;
    __asm { vcomiss xmm1, xmm0 }
    --_RBX;
  }
  v12 = _R8 < _Last;
  if ( _R8 < _Last )
  {
    __asm { vmovss  xmm1, dword ptr [rbx+4] }
    do
    {
      __asm
      {
        vmovss  xmm0, dword ptr [r8+4]
        vcomiss xmm0, xmm1
      }
      if ( v12 )
        break;
      __asm { vcomiss xmm1, xmm0 }
      v12 = ++_R8 < _Last;
    }
    while ( _R8 < _Last );
  }
  _RDX = _R8;
  v16 = _RBX;
  while ( 1 )
  {
    while ( 1 )
    {
      if ( _RDX < _Last )
      {
        v17 = ((char *)_Last - (char *)_RDX + 7) & 0xFFFFFFFFFFFFFFF8ui64;
        v18 = v17 < 0x20;
        if ( v17 >= 0x20 )
        {
          _R9 = _RDX + 1;
          do
          {
            __asm
            {
              vmovss  xmm0, dword ptr [rbx+4]
              vmovss  xmm1, dword ptr [r9-4]
              vcomiss xmm0, xmm1
            }
            if ( !v18 )
            {
              __asm { vcomiss xmm1, xmm0 }
              if ( _R8 != _RDX )
              {
                v22 = *_R8;
                *_R8 = *_RDX;
                *_RDX = v22;
                __asm { vmovss  xmm0, dword ptr [rbx+4] }
              }
              v18 = __CFADD__(_R8++, 8i64);
            }
            __asm
            {
              vmovss  xmm1, dword ptr [r9+4]
              vcomiss xmm0, xmm1
            }
            if ( !v18 )
            {
              __asm { vcomiss xmm1, xmm0 }
              if ( _R8 != _R9 )
              {
                v24 = *_R8;
                *_R8 = *_R9;
                *_R9 = v24;
                __asm { vmovss  xmm0, dword ptr [rbx+4] }
              }
              v18 = __CFADD__(_R8++, 8i64);
            }
            __asm
            {
              vmovss  xmm1, dword ptr [r9+0Ch]
              vcomiss xmm0, xmm1
            }
            if ( !v18 )
            {
              __asm { vcomiss xmm1, xmm0 }
              v26 = _R9 + 1;
              if ( _R8 != &_R9[1] )
              {
                v27 = *_R8;
                *_R8 = *v26;
                *v26 = v27;
                __asm { vmovss  xmm0, dword ptr [rbx+4] }
              }
              v18 = __CFADD__(_R8++, 8i64);
            }
            __asm
            {
              vmovss  xmm1, dword ptr [r9+14h]
              vcomiss xmm0, xmm1
            }
            if ( !v18 )
            {
              __asm { vcomiss xmm1, xmm0 }
              v29 = _R9 + 2;
              if ( _R8 != &_R9[2] )
              {
                v30 = *_R8;
                *_R8 = *v29;
                *v29 = v30;
              }
              ++_R8;
            }
            _RDX += 4;
            _R9 += 4;
            v18 = _RDX < &_Last[-3];
          }
          while ( _RDX < &_Last[-3] );
        }
        for ( j = _RDX < _Last; _RDX < _Last; j = _RDX < _Last )
        {
          __asm
          {
            vmovss  xmm0, dword ptr [rbx+4]
            vmovss  xmm1, dword ptr [rdx+4]
            vcomiss xmm0, xmm1
          }
          if ( !j )
          {
            __asm { vcomiss xmm1, xmm0 }
            if ( _R8 != _RDX )
            {
              v34 = *_R8;
              *_R8 = *_RDX;
              *_RDX = v34;
            }
            ++_R8;
          }
          ++_RDX;
        }
      }
      v35 = v16 < _First;
      v36 = v16 == _First;
      if ( v16 > _First )
      {
        _R9 = v16 - 1;
        do
        {
          __asm
          {
            vmovss  xmm0, dword ptr [r9+4]
            vmovss  xmm1, dword ptr [rbx+4]
            vcomiss xmm0, xmm1
          }
          if ( !v35 )
          {
            __asm { vcomiss xmm1, xmm0 }
            if ( --_RBX != _R9 )
            {
              v40 = *_RBX;
              *_RBX = *_R9;
              *_R9 = v40;
            }
          }
          --v16;
          --_R9;
          v35 = _First < v16;
        }
        while ( _First < v16 );
        v36 = v16 == _First;
      }
      if ( v36 )
        break;
      --v16;
      if ( _RDX == _Last )
      {
        if ( v16 != --_RBX )
        {
          v43 = *v16;
          *v16 = *_RBX;
          *_RBX = v43;
        }
        v44 = _R8[-1];
        --_R8;
        v45 = *_RBX;
        *_RBX = v44;
        *_R8 = v45;
      }
      else
      {
        v46 = *_RDX;
        *_RDX++ = *v16;
        *v16 = v46;
      }
    }
    if ( _RDX == _Last )
      break;
    if ( _R8 != _RDX )
    {
      v41 = *_RBX;
      *_RBX = *_R8;
      *_R8 = v41;
    }
    ++_R8;
    v42 = *_RBX;
    *_RBX++ = *_RDX;
    *_RDX++ = v42;
  }
  v47 = result;
  result->first = _RBX;
  result->second = _R8;
  return v47;
}

/*
==============
std::_Partition_by_median_guess_unchecked<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingMpScriptableLootSortFunctor>
==============
*/
std::pair<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingScriptableLootChestInfo *> *std::_Partition_by_median_guess_unchecked<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingMpScriptableLootSortFunctor>(std::pair<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingScriptableLootChestInfo *> *result, CgWeaponStreamingScriptableLootChestInfo *_First, CgWeaponStreamingScriptableLootChestInfo *_Last, CgWeaponStreamingMpScriptableLootSortFunctor _Pred)
{
  bool i; 
  bool v12; 
  CgWeaponStreamingScriptableLootChestInfo *v16; 
  unsigned __int64 v17; 
  bool v18; 
  CgWeaponStreamingScriptableLootChestInfo v22; 
  CgWeaponStreamingScriptableLootChestInfo v24; 
  CgWeaponStreamingScriptableLootChestInfo *v26; 
  CgWeaponStreamingScriptableLootChestInfo v27; 
  CgWeaponStreamingScriptableLootChestInfo *v29; 
  CgWeaponStreamingScriptableLootChestInfo v30; 
  bool j; 
  CgWeaponStreamingScriptableLootChestInfo v34; 
  bool v35; 
  bool v36; 
  CgWeaponStreamingScriptableLootChestInfo v40; 
  CgWeaponStreamingScriptableLootChestInfo v41; 
  CgWeaponStreamingScriptableLootChestInfo v42; 
  CgWeaponStreamingScriptableLootChestInfo v43; 
  CgWeaponStreamingScriptableLootChestInfo v44; 
  CgWeaponStreamingScriptableLootChestInfo v45; 
  CgWeaponStreamingScriptableLootChestInfo v46; 
  std::pair<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingScriptableLootChestInfo *> *v47; 

  _RBX = &_First[((char *)_Last - (char *)_First) >> 4];
  std::_Guess_median_unchecked<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingMpScriptableLootSortFunctor>(_First, _RBX, _Last - 1, _Pred);
  _R8 = _RBX + 1;
  for ( i = _First < _RBX; _First < _RBX; i = _First < _RBX )
  {
    __asm
    {
      vmovss  xmm0, dword ptr [rbx-4]
      vmovss  xmm1, dword ptr [rbx+4]
      vcomiss xmm0, xmm1
    }
    if ( i )
      break;
    __asm { vcomiss xmm1, xmm0 }
    --_RBX;
  }
  v12 = _R8 < _Last;
  if ( _R8 < _Last )
  {
    __asm { vmovss  xmm1, dword ptr [rbx+4] }
    do
    {
      __asm
      {
        vmovss  xmm0, dword ptr [r8+4]
        vcomiss xmm0, xmm1
      }
      if ( v12 )
        break;
      __asm { vcomiss xmm1, xmm0 }
      v12 = ++_R8 < _Last;
    }
    while ( _R8 < _Last );
  }
  _RDX = _R8;
  v16 = _RBX;
  while ( 1 )
  {
    while ( 1 )
    {
      if ( _RDX < _Last )
      {
        v17 = ((char *)_Last - (char *)_RDX + 7) & 0xFFFFFFFFFFFFFFF8ui64;
        v18 = v17 < 0x20;
        if ( v17 >= 0x20 )
        {
          _R9 = _RDX + 1;
          do
          {
            __asm
            {
              vmovss  xmm0, dword ptr [rbx+4]
              vmovss  xmm1, dword ptr [r9-4]
              vcomiss xmm0, xmm1
            }
            if ( !v18 )
            {
              __asm { vcomiss xmm1, xmm0 }
              if ( _R8 != _RDX )
              {
                v22 = *_R8;
                *_R8 = *_RDX;
                *_RDX = v22;
                __asm { vmovss  xmm0, dword ptr [rbx+4] }
              }
              v18 = __CFADD__(_R8++, 8i64);
            }
            __asm
            {
              vmovss  xmm1, dword ptr [r9+4]
              vcomiss xmm0, xmm1
            }
            if ( !v18 )
            {
              __asm { vcomiss xmm1, xmm0 }
              if ( _R8 != _R9 )
              {
                v24 = *_R8;
                *_R8 = *_R9;
                *_R9 = v24;
                __asm { vmovss  xmm0, dword ptr [rbx+4] }
              }
              v18 = __CFADD__(_R8++, 8i64);
            }
            __asm
            {
              vmovss  xmm1, dword ptr [r9+0Ch]
              vcomiss xmm0, xmm1
            }
            if ( !v18 )
            {
              __asm { vcomiss xmm1, xmm0 }
              v26 = _R9 + 1;
              if ( _R8 != &_R9[1] )
              {
                v27 = *_R8;
                *_R8 = *v26;
                *v26 = v27;
                __asm { vmovss  xmm0, dword ptr [rbx+4] }
              }
              v18 = __CFADD__(_R8++, 8i64);
            }
            __asm
            {
              vmovss  xmm1, dword ptr [r9+14h]
              vcomiss xmm0, xmm1
            }
            if ( !v18 )
            {
              __asm { vcomiss xmm1, xmm0 }
              v29 = _R9 + 2;
              if ( _R8 != &_R9[2] )
              {
                v30 = *_R8;
                *_R8 = *v29;
                *v29 = v30;
              }
              ++_R8;
            }
            _RDX += 4;
            _R9 += 4;
            v18 = _RDX < &_Last[-3];
          }
          while ( _RDX < &_Last[-3] );
        }
        for ( j = _RDX < _Last; _RDX < _Last; j = _RDX < _Last )
        {
          __asm
          {
            vmovss  xmm0, dword ptr [rbx+4]
            vmovss  xmm1, dword ptr [rdx+4]
            vcomiss xmm0, xmm1
          }
          if ( !j )
          {
            __asm { vcomiss xmm1, xmm0 }
            if ( _R8 != _RDX )
            {
              v34 = *_R8;
              *_R8 = *_RDX;
              *_RDX = v34;
            }
            ++_R8;
          }
          ++_RDX;
        }
      }
      v35 = v16 < _First;
      v36 = v16 == _First;
      if ( v16 > _First )
      {
        _R9 = v16 - 1;
        do
        {
          __asm
          {
            vmovss  xmm0, dword ptr [r9+4]
            vmovss  xmm1, dword ptr [rbx+4]
            vcomiss xmm0, xmm1
          }
          if ( !v35 )
          {
            __asm { vcomiss xmm1, xmm0 }
            if ( --_RBX != _R9 )
            {
              v40 = *_RBX;
              *_RBX = *_R9;
              *_R9 = v40;
            }
          }
          --v16;
          --_R9;
          v35 = _First < v16;
        }
        while ( _First < v16 );
        v36 = v16 == _First;
      }
      if ( v36 )
        break;
      --v16;
      if ( _RDX == _Last )
      {
        if ( v16 != --_RBX )
        {
          v43 = *v16;
          *v16 = *_RBX;
          *_RBX = v43;
        }
        v44 = _R8[-1];
        --_R8;
        v45 = *_RBX;
        *_RBX = v44;
        *_R8 = v45;
      }
      else
      {
        v46 = *_RDX;
        *_RDX++ = *v16;
        *v16 = v46;
      }
    }
    if ( _RDX == _Last )
      break;
    if ( _R8 != _RDX )
    {
      v41 = *_RBX;
      *_RBX = *_R8;
      *_R8 = v41;
    }
    ++_R8;
    v42 = *_RBX;
    *_RBX++ = *_RDX;
    *_RDX++ = v42;
  }
  v47 = result;
  result->first = _RBX;
  result->second = _R8;
  return v47;
}

/*
==============
std::_Pop_heap_hole_by_index<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingClientModelInfo,CgWeaponStreamingMpClientModelSortFunctor>
==============
*/
void std::_Pop_heap_hole_by_index<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingClientModelInfo,CgWeaponStreamingMpClientModelSortFunctor>(CgWeaponStreamingClientModelInfo *_First, __int64 _Hole, __int64 _Bottom, CgWeaponStreamingClientModelInfo *_Val)
{
  unsigned __int64 v5; 
  __int64 v7; 
  __int64 v8; 
  bool i; 
  __int64 v12; 

  _R10 = _First;
  v5 = (_Bottom - 1) >> 1;
  v7 = _Hole;
  v8 = _Hole;
  for ( i = _Hole <= v5; v8 < (__int64)v5; i = v8 <= v5 )
  {
    _R8 = 2 * v8;
    __asm
    {
      vmovss  xmm0, dword ptr [r10+r8*8+0Ch]
      vcomiss xmm0, dword ptr [r10+r8*8+14h]
    }
    v12 = 2 * v8 + 2;
    v8 = 2 * v8 + 1;
    if ( i )
      v8 = v12;
    _R10[_Hole] = _R10[v8];
    _Hole = v8;
  }
  if ( v8 == v5 && (_Bottom & 1) == 0 )
  {
    _R10[_Hole] = _R10[_Bottom - 1];
    _Hole = _Bottom - 1;
  }
  if ( v7 < _Hole )
  {
    while ( 1 )
    {
      __asm { vmovss  xmm0, dword ptr [r9+4] }
      _RCX = (_Hole - 1) >> 1;
      __asm { vcomiss xmm0, dword ptr [r10+rcx*8+4] }
      if ( ((_BYTE)_Hole - 1) & 1 | (_RCX == 0) )
        break;
      _R10[_Hole] = _R10[_RCX];
      _Hole = (_Hole - 1) >> 1;
      if ( v7 >= _RCX )
      {
        _R10[_RCX] = *_Val;
        return;
      }
    }
  }
  _R10[_Hole] = *_Val;
}

/*
==============
std::_Pop_heap_hole_by_index<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingScriptableLootChestInfo,CgWeaponStreamingMpScriptableLootSortFunctor>
==============
*/
void std::_Pop_heap_hole_by_index<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingScriptableLootChestInfo,CgWeaponStreamingMpScriptableLootSortFunctor>(CgWeaponStreamingScriptableLootChestInfo *_First, __int64 _Hole, __int64 _Bottom, CgWeaponStreamingScriptableLootChestInfo *_Val)
{
  unsigned __int64 v5; 
  __int64 v7; 
  __int64 v8; 
  bool i; 
  __int64 v12; 

  _R10 = _First;
  v5 = (_Bottom - 1) >> 1;
  v7 = _Hole;
  v8 = _Hole;
  for ( i = _Hole <= v5; v8 < (__int64)v5; i = v8 <= v5 )
  {
    _R8 = 2 * v8;
    __asm
    {
      vmovss  xmm0, dword ptr [r10+r8*8+0Ch]
      vcomiss xmm0, dword ptr [r10+r8*8+14h]
    }
    v12 = 2 * v8 + 2;
    v8 = 2 * v8 + 1;
    if ( i )
      v8 = v12;
    _R10[_Hole] = _R10[v8];
    _Hole = v8;
  }
  if ( v8 == v5 && (_Bottom & 1) == 0 )
  {
    _R10[_Hole] = _R10[_Bottom - 1];
    _Hole = _Bottom - 1;
  }
  if ( v7 < _Hole )
  {
    while ( 1 )
    {
      __asm { vmovss  xmm0, dword ptr [r9+4] }
      _RCX = (_Hole - 1) >> 1;
      __asm { vcomiss xmm0, dword ptr [r10+rcx*8+4] }
      if ( ((_BYTE)_Hole - 1) & 1 | (_RCX == 0) )
        break;
      _R10[_Hole] = _R10[_RCX];
      _Hole = (_Hole - 1) >> 1;
      if ( v7 >= _RCX )
      {
        _R10[_RCX] = *_Val;
        return;
      }
    }
  }
  _R10[_Hole] = *_Val;
}

/*
==============
std::_Sort_unchecked<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingMpClientModelSortFunctor>
==============
*/
void std::_Sort_unchecked<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingMpClientModelSortFunctor>(CgWeaponStreamingClientModelInfo *_First, CgWeaponStreamingClientModelInfo *_Last, __int64 _Ideal, CgWeaponStreamingMpClientModelSortFunctor _Pred)
{
  __int64 v6; 
  CgWeaponStreamingClientModelInfo *v7; 
  CgWeaponStreamingClientModelInfo *first; 
  CgWeaponStreamingClientModelInfo *second; 
  CgWeaponStreamingClientModelInfo *v11; 
  bool v12; 
  CgWeaponStreamingClientModelInfo v14; 
  CgWeaponStreamingClientModelInfo *v15; 
  __int64 v17; 
  __int64 v18; 
  unsigned __int64 v19; 
  CgWeaponStreamingClientModelInfo v20; 
  __int64 v21; 
  __int64 v22; 
  bool i; 
  __int64 v26; 
  bool v28; 
  CgWeaponStreamingClientModelInfo *v30; 
  std::pair<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingClientModelInfo *> result; 
  CgWeaponStreamingClientModelInfo _Val; 

  v6 = _Last - _First;
  v7 = _Last;
  _RDI = _First;
  if ( v6 <= 32 )
  {
LABEL_7:
    if ( v6 >= 2 && _RDI != v7 )
    {
      v11 = _RDI + 1;
      v12 = &_RDI[1] < v7;
      if ( &_RDI[1] != v7 )
      {
        _RSI = 1i64;
        do
        {
          v14 = *v11;
          v15 = v11;
          _Val = *v11;
          __asm
          {
            vmovss  xmm0, [rsp+58h+_Val.distanceSq]
            vcomiss xmm0, dword ptr [rdi+4]
          }
          if ( v12 )
          {
            memmove_0(&_RDI[1], _RDI, _RSI * 8);
            *_RDI = v14;
          }
          else
          {
            __asm { vcomiss xmm0, dword ptr [rdi+rsi-4] }
            _RCX = &_RDI[_RSI - 1];
            while ( v12 )
            {
              *v15 = *_RCX;
              v15 = _RCX;
              v12 = (unsigned __int64)_RCX-- < 8;
              __asm { vcomiss xmm0, dword ptr [rcx+4] }
            }
            *v15 = v14;
          }
          ++v11;
          ++_RSI;
          v12 = v11 < v7;
        }
        while ( v11 != v7 );
      }
    }
  }
  else
  {
    while ( _Ideal > 0 )
    {
      std::_Partition_by_median_guess_unchecked<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingMpClientModelSortFunctor>(&result, _RDI, v7, _Pred);
      first = result.first;
      second = result.second;
      _Ideal = (_Ideal >> 2) + (_Ideal >> 1);
      if ( (__int64)(((char *)result.first - (char *)_RDI) & 0xFFFFFFFFFFFFFFF8ui64) >= (__int64)(((char *)v7 - (char *)result.second) & 0xFFFFFFFFFFFFFFF8ui64) )
      {
        std::_Sort_unchecked<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingMpClientModelSortFunctor>(result.second, v7, _Ideal, _Pred);
        v7 = first;
      }
      else
      {
        std::_Sort_unchecked<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingMpClientModelSortFunctor>(_RDI, result.first, _Ideal, _Pred);
        _RDI = second;
      }
      v6 = v7 - _RDI;
      if ( v6 <= 32 )
        goto LABEL_7;
    }
    v17 = v7 - _RDI;
    v18 = ((char *)v7 - (char *)_RDI) >> 4;
    if ( v18 > 0 )
    {
      v19 = (v17 - 1) >> 1;
      do
      {
        v20 = _RDI[--v18];
        _Val = v20;
        v21 = v18;
        v22 = v18;
        for ( i = v18 <= v19; v22 < (__int64)v19; i = v22 <= v19 )
        {
          _RDX = 2 * v22;
          __asm
          {
            vmovss  xmm0, dword ptr [rdi+rdx*8+0Ch]
            vcomiss xmm0, dword ptr [rdi+rdx*8+14h]
          }
          v26 = 2 * v22 + 2;
          v22 = 2 * v22 + 1;
          if ( i )
            v22 = v26;
          _RDI[v21] = _RDI[v22];
          v21 = v22;
        }
        if ( v22 == v19 && (v17 & 1) == 0 )
        {
          _RDI[v21] = _RDI[v17 - 1];
          v21 = v17 - 1;
        }
        _RDX = (v21 - 1) >> 1;
        v28 = v18 <= (unsigned __int64)v21;
        if ( v18 < v21 )
        {
          __asm { vmovss  xmm0, [rsp+58h+_Val.distanceSq] }
          do
          {
            __asm { vcomiss xmm0, dword ptr [rdi+rdx*8+4] }
            if ( v28 )
              break;
            _RDI[v21] = _RDI[_RDX];
            v21 = _RDX;
            _RDX = (_RDX - 1) >> 1;
            v28 = v18 <= (unsigned __int64)v21;
          }
          while ( v18 < v21 );
        }
        _RDI[v21] = v20;
      }
      while ( v18 > 0 );
    }
    if ( v17 >= 2 )
    {
      v30 = v7 - 1;
      do
      {
        _Val = *v30;
        *v30 = *_RDI;
        std::_Pop_heap_hole_by_index<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingClientModelInfo,CgWeaponStreamingMpClientModelSortFunctor>(_RDI, 0i64, v30 - _RDI, &_Val, _Pred);
        --v30;
      }
      while ( ((__int64)v30 + 8 - (__int64)_RDI) >> 3 >= 2 );
    }
  }
}

/*
==============
std::_Sort_unchecked<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingMpScriptableLootSortFunctor>
==============
*/
void std::_Sort_unchecked<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingMpScriptableLootSortFunctor>(CgWeaponStreamingScriptableLootChestInfo *_First, CgWeaponStreamingScriptableLootChestInfo *_Last, __int64 _Ideal, CgWeaponStreamingMpScriptableLootSortFunctor _Pred)
{
  __int64 v6; 
  CgWeaponStreamingScriptableLootChestInfo *v7; 
  CgWeaponStreamingScriptableLootChestInfo *first; 
  CgWeaponStreamingScriptableLootChestInfo *second; 
  CgWeaponStreamingScriptableLootChestInfo *v11; 
  bool v12; 
  CgWeaponStreamingScriptableLootChestInfo v14; 
  CgWeaponStreamingScriptableLootChestInfo *v15; 
  __int64 v17; 
  __int64 v18; 
  unsigned __int64 v19; 
  CgWeaponStreamingScriptableLootChestInfo v20; 
  __int64 v21; 
  __int64 v22; 
  bool i; 
  __int64 v26; 
  bool v28; 
  CgWeaponStreamingScriptableLootChestInfo *v30; 
  std::pair<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingScriptableLootChestInfo *> result; 
  CgWeaponStreamingScriptableLootChestInfo _Val; 

  v6 = _Last - _First;
  v7 = _Last;
  _RDI = _First;
  if ( v6 <= 32 )
  {
LABEL_7:
    if ( v6 >= 2 && _RDI != v7 )
    {
      v11 = _RDI + 1;
      v12 = &_RDI[1] < v7;
      if ( &_RDI[1] != v7 )
      {
        _RSI = 1i64;
        do
        {
          v14 = *v11;
          v15 = v11;
          _Val = *v11;
          __asm
          {
            vmovss  xmm0, [rsp+58h+_Val.distanceSq]
            vcomiss xmm0, dword ptr [rdi+4]
          }
          if ( v12 )
          {
            memmove_0(&_RDI[1], _RDI, _RSI * 8);
            *_RDI = v14;
          }
          else
          {
            __asm { vcomiss xmm0, dword ptr [rdi+rsi-4] }
            _RCX = &_RDI[_RSI - 1];
            while ( v12 )
            {
              *v15 = *_RCX;
              v15 = _RCX;
              v12 = (unsigned __int64)_RCX-- < 8;
              __asm { vcomiss xmm0, dword ptr [rcx+4] }
            }
            *v15 = v14;
          }
          ++v11;
          ++_RSI;
          v12 = v11 < v7;
        }
        while ( v11 != v7 );
      }
    }
  }
  else
  {
    while ( _Ideal > 0 )
    {
      std::_Partition_by_median_guess_unchecked<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingMpScriptableLootSortFunctor>(&result, _RDI, v7, _Pred);
      first = result.first;
      second = result.second;
      _Ideal = (_Ideal >> 2) + (_Ideal >> 1);
      if ( (__int64)(((char *)result.first - (char *)_RDI) & 0xFFFFFFFFFFFFFFF8ui64) >= (__int64)(((char *)v7 - (char *)result.second) & 0xFFFFFFFFFFFFFFF8ui64) )
      {
        std::_Sort_unchecked<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingMpScriptableLootSortFunctor>(result.second, v7, _Ideal, _Pred);
        v7 = first;
      }
      else
      {
        std::_Sort_unchecked<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingMpScriptableLootSortFunctor>(_RDI, result.first, _Ideal, _Pred);
        _RDI = second;
      }
      v6 = v7 - _RDI;
      if ( v6 <= 32 )
        goto LABEL_7;
    }
    v17 = v7 - _RDI;
    v18 = ((char *)v7 - (char *)_RDI) >> 4;
    if ( v18 > 0 )
    {
      v19 = (v17 - 1) >> 1;
      do
      {
        v20 = _RDI[--v18];
        _Val = v20;
        v21 = v18;
        v22 = v18;
        for ( i = v18 <= v19; v22 < (__int64)v19; i = v22 <= v19 )
        {
          _RDX = 2 * v22;
          __asm
          {
            vmovss  xmm0, dword ptr [rdi+rdx*8+0Ch]
            vcomiss xmm0, dword ptr [rdi+rdx*8+14h]
          }
          v26 = 2 * v22 + 2;
          v22 = 2 * v22 + 1;
          if ( i )
            v22 = v26;
          _RDI[v21] = _RDI[v22];
          v21 = v22;
        }
        if ( v22 == v19 && (v17 & 1) == 0 )
        {
          _RDI[v21] = _RDI[v17 - 1];
          v21 = v17 - 1;
        }
        _RDX = (v21 - 1) >> 1;
        v28 = v18 <= (unsigned __int64)v21;
        if ( v18 < v21 )
        {
          __asm { vmovss  xmm0, [rsp+58h+_Val.distanceSq] }
          do
          {
            __asm { vcomiss xmm0, dword ptr [rdi+rdx*8+4] }
            if ( v28 )
              break;
            _RDI[v21] = _RDI[_RDX];
            v21 = _RDX;
            _RDX = (_RDX - 1) >> 1;
            v28 = v18 <= (unsigned __int64)v21;
          }
          while ( v18 < v21 );
        }
        _RDI[v21] = v20;
      }
      while ( v18 > 0 );
    }
    if ( v17 >= 2 )
    {
      v30 = v7 - 1;
      do
      {
        _Val = *v30;
        *v30 = *_RDI;
        std::_Pop_heap_hole_by_index<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingScriptableLootChestInfo,CgWeaponStreamingMpScriptableLootSortFunctor>(_RDI, 0i64, v30 - _RDI, &_Val, _Pred);
        --v30;
      }
      while ( ((__int64)v30 + 8 - (__int64)_RDI) >> 3 >= 2 );
    }
  }
}

/*
==============
std::_Med3_unchecked<XSurface * *,XSurfaceHashComparer>
==============
*/
void std::_Med3_unchecked<XSurface * *,XSurfaceHashComparer>(XSurface **_First, XSurface **_Mid, XSurface **_Last, XSurfaceHashComparer _Pred)
{
  XSurface *v4; 
  XSurface *v6; 
  XSurface *v7; 
  unsigned __int64 v8; 
  unsigned __int64 v9; 
  unsigned __int64 v10; 
  unsigned __int64 v11; 
  unsigned __int64 v12; 
  unsigned __int64 v13; 

  v4 = *_Mid;
  v6 = *_First;
  LODWORD(v11) = (*_Mid)->hash;
  HIDWORD(v11) = *(_DWORD *)&(*_Mid)->vertCount;
  LODWORD(v8) = v6->hash;
  HIDWORD(v8) = *(_DWORD *)&v6->vertCount;
  if ( v11 < v8 )
  {
    *_Mid = v6;
    *_First = v4;
    v4 = *_Mid;
  }
  v7 = *_Last;
  LODWORD(v12) = (*_Last)->hash;
  HIDWORD(v12) = *(_DWORD *)&(*_Last)->vertCount;
  LODWORD(v9) = v4->hash;
  HIDWORD(v9) = *(_DWORD *)&v4->vertCount;
  if ( v12 < v9 )
  {
    *_Last = v4;
    *_Mid = v7;
    LODWORD(v13) = v7->hash;
    HIDWORD(v13) = *(_DWORD *)&v7->vertCount;
    LODWORD(v10) = (*_First)->hash;
    HIDWORD(v10) = *(_DWORD *)&(*_First)->vertCount;
    if ( v13 < v10 )
    {
      *_Mid = *_First;
      *_First = v7;
    }
  }
}

/*
==============
std::_Partition_by_median_guess_unchecked<XSurface * *,XSurfaceHashComparer>
==============
*/
std::pair<XSurface * *,XSurface * *> *std::_Partition_by_median_guess_unchecked<XSurface * *,XSurfaceHashComparer>(std::pair<XSurface * *,XSurface * *> *result, XSurface **_First, XSurface **_Last, XSurfaceHashComparer _Pred)
{
  XSurface **v4; 
  XSurface **v6; 
  XSurface **v7; 
  XSurface **v8; 
  signed __int64 v9; 
  __int64 v10; 
  __int64 v11; 
  __int64 v12; 
  XSurface **v13; 
  XSurface **v14; 
  XSurface **v15; 
  XSurface **v16; 
  __int64 v17; 
  unsigned __int64 v18; 
  XSurface **v19; 
  XSurface **v20; 
  XSurface *v21; 
  bool v22; 
  XSurface **v23; 
  XSurface *v24; 
  XSurface *v25; 
  XSurface *v26; 
  XSurface *v27; 
  XSurface *v28; 
  XSurface *v29; 
  XSurface *v30; 
  std::pair<XSurface * *,XSurface * *> *v31; 
  unsigned __int64 v32; 
  unsigned __int64 v33; 
  unsigned __int64 v34; 
  unsigned __int64 v35; 
  unsigned __int64 v36; 
  unsigned __int64 v37; 
  unsigned __int64 v38; 
  unsigned __int64 v39; 
  unsigned __int64 v40; 
  unsigned __int64 v41; 
  unsigned __int64 v42; 
  unsigned __int64 v43; 
  unsigned __int64 v44; 
  unsigned __int64 v45; 
  unsigned __int64 v46; 
  unsigned __int64 v47; 

  v4 = _Last - 1;
  v6 = _Last;
  v7 = _First;
  v8 = &_First[((char *)_Last - (char *)_First) >> 4];
  v9 = _Last - 1 - _First;
  if ( v9 <= 40 )
  {
    std::_Med3_unchecked<XSurface * *,XSurfaceHashComparer>(_First, v8, _Last - 1, _Pred);
  }
  else
  {
    v10 = (v9 + 1) >> 3;
    v11 = 16 * v10;
    v12 = 8 * v10;
    v13 = &_First[v10];
    std::_Med3_unchecked<XSurface * *,XSurfaceHashComparer>(_First, v13, &_First[2 * v10], _Pred);
    std::_Med3_unchecked<XSurface * *,XSurfaceHashComparer>(&v8[v12 / 0xFFFFFFFFFFFFFFF8ui64], v8, &v8[(unsigned __int64)v12 / 8], _Pred);
    v14 = &v4[v12 / 0xFFFFFFFFFFFFFFF8ui64];
    std::_Med3_unchecked<XSurface * *,XSurfaceHashComparer>(&v6[v11 / 0xFFFFFFFFFFFFFFF8ui64 - 1], v14, v6 - 1, _Pred);
    std::_Med3_unchecked<XSurface * *,XSurfaceHashComparer>(v13, v8, v14, _Pred);
    v7 = _First;
  }
  v15 = v8 + 1;
  if ( v7 < v8 )
  {
    v16 = v8;
    do
    {
      v17 = (__int64)*(v8 - 1);
      HIWORD(v32) = (*v8)->triCount;
      LODWORD(v32) = (*v8)->hash;
      WORD2(v32) = (*v8)->vertCount;
      LODWORD(v34) = *(_DWORD *)(v17 + 12);
      HIDWORD(v34) = *(_DWORD *)(v17 + 2);
      if ( v34 < v32 )
        break;
      LODWORD(v37) = *(_DWORD *)(v17 + 12);
      HIDWORD(v37) = *(_DWORD *)(v17 + 2);
      LODWORD(v40) = (*v8)->hash;
      HIDWORD(v40) = *(_DWORD *)&(*v8)->vertCount;
      if ( v40 < v37 )
        break;
      v8 = v16 - 1;
      v16 = v8;
    }
    while ( v7 < v8 );
  }
  if ( v15 < v6 )
  {
    HIDWORD(v41) = *(_DWORD *)&(*v8)->vertCount;
    LODWORD(v41) = (*v8)->hash;
    v18 = v41;
    do
    {
      HIDWORD(v42) = *(_DWORD *)&(*v15)->vertCount;
      LODWORD(v42) = (*v15)->hash;
      if ( v42 < v18 )
        break;
      LODWORD(v38) = (*v15)->hash;
      HIDWORD(v38) = *(_DWORD *)&(*v15)->vertCount;
      LODWORD(v35) = (*v8)->hash;
      HIDWORD(v35) = *(_DWORD *)&(*v8)->vertCount;
      if ( v35 < v38 )
        break;
      ++v15;
    }
    while ( v15 < v6 );
  }
  v19 = v15;
  v20 = v8;
  while ( 1 )
  {
    while ( 1 )
    {
      for ( ; v19 < v6; ++v19 )
      {
        HIDWORD(v43) = *(_DWORD *)&(*v19)->vertCount;
        LODWORD(v43) = (*v19)->hash;
        LODWORD(v39) = (*v8)->hash;
        HIDWORD(v39) = *(_DWORD *)&(*v8)->vertCount;
        if ( v39 >= v43 )
        {
          LODWORD(v36) = (*v8)->hash;
          HIDWORD(v36) = *(_DWORD *)&(*v8)->vertCount;
          LODWORD(v33) = (*v19)->hash;
          HIDWORD(v33) = *(_DWORD *)&(*v19)->vertCount;
          if ( v33 < v36 )
            break;
          if ( v15 != v19 )
          {
            v21 = *v15;
            *v15 = *v19;
            *v19 = v21;
          }
          ++v15;
        }
      }
      v22 = v20 == v7;
      if ( v20 > v7 )
      {
        v23 = v20 - 1;
        do
        {
          HIDWORD(v44) = *(_DWORD *)&(*v8)->vertCount;
          LODWORD(v44) = (*v8)->hash;
          LODWORD(v45) = (*v23)->hash;
          HIDWORD(v45) = *(_DWORD *)&(*v23)->vertCount;
          if ( v45 >= v44 )
          {
            LODWORD(v46) = (*v23)->hash;
            HIDWORD(v46) = *(_DWORD *)&(*v23)->vertCount;
            LODWORD(v47) = (*v8)->hash;
            HIDWORD(v47) = *(_DWORD *)&(*v8)->vertCount;
            if ( v47 < v46 )
              break;
            if ( --v8 != v23 )
            {
              v24 = *v8;
              *v8 = *v23;
              *v23 = v24;
            }
          }
          --v20;
          --v23;
        }
        while ( _First < v20 );
        v7 = _First;
        v6 = _Last;
        v22 = v20 == _First;
      }
      if ( v22 )
        break;
      --v20;
      if ( v19 == v6 )
      {
        if ( v20 != --v8 )
        {
          v27 = *v20;
          *v20 = *v8;
          *v8 = v27;
        }
        v28 = *--v15;
        v29 = *v8;
        *v8 = v28;
        *v15 = v29;
      }
      else
      {
        v30 = *v19;
        *v19++ = *v20;
        *v20 = v30;
      }
    }
    if ( v19 == v6 )
      break;
    if ( v15 != v19 )
    {
      v25 = *v8;
      *v8 = *v15;
      *v15 = v25;
    }
    ++v15;
    v26 = *v8;
    *v8++ = *v19;
    *v19++ = v26;
  }
  v31 = result;
  result->first = v8;
  result->second = v15;
  return v31;
}

/*
==============
std::_Pop_heap_hole_by_index<XSurface * *,XSurface *,XSurfaceHashComparer>
==============
*/
void std::_Pop_heap_hole_by_index<XSurface * *,XSurface *,XSurfaceHashComparer>(XSurface **_First, __int64 _Hole, __int64 _Bottom, XSurface **_Val)
{
  __int64 v5; 
  __int64 v8; 
  __int64 i; 
  XSurface *v10; 
  XSurface *v11; 
  __int64 v12; 
  XSurface *v13; 
  unsigned __int64 v14; 
  unsigned __int64 v15; 
  unsigned __int64 v16; 
  unsigned __int64 v17; 

  v5 = (_Bottom - 1) >> 1;
  v8 = _Hole;
  for ( i = _Hole; i < v5; _Hole = i )
  {
    i = 2 * i + 2;
    v10 = _First[i];
    v11 = _First[i - 1];
    LODWORD(v16) = v10->hash;
    HIDWORD(v16) = *(_DWORD *)&v10->vertCount;
    LODWORD(v14) = v11->hash;
    HIDWORD(v14) = *(_DWORD *)&v11->vertCount;
    if ( v16 < v14 )
      --i;
    _First[_Hole] = _First[i];
  }
  if ( i == v5 && (_Bottom & 1) == 0 )
  {
    _First[_Hole] = _First[_Bottom - 1];
    _Hole = _Bottom - 1;
  }
  if ( v8 >= _Hole )
  {
    _First[_Hole] = *_Val;
  }
  else
  {
    while ( 1 )
    {
      v12 = (_Hole - 1) >> 1;
      v13 = _First[v12];
      LODWORD(v17) = v13->hash;
      HIDWORD(v17) = *(_DWORD *)&v13->vertCount;
      LODWORD(v15) = (*_Val)->hash;
      HIDWORD(v15) = *(_DWORD *)&(*_Val)->vertCount;
      if ( v17 >= v15 )
        break;
      _First[_Hole] = v13;
      _Hole = (_Hole - 1) >> 1;
      if ( v8 >= v12 )
      {
        _First[v12] = *_Val;
        return;
      }
    }
    _First[_Hole] = *_Val;
  }
}

/*
==============
std::_Sort_unchecked<XSurface * *,XSurfaceHashComparer>
==============
*/
void std::_Sort_unchecked<XSurface * *,XSurfaceHashComparer>(XSurface **_First, XSurface **_Last, __int64 _Ideal, XSurfaceHashComparer _Pred)
{
  __int64 v6; 
  XSurface **v7; 
  XSurface **v8; 
  XSurface **first; 
  XSurface **second; 
  XSurface **v11; 
  size_t v12; 
  XSurface *v13; 
  XSurface **v14; 
  XSurface *v15; 
  unsigned __int16 vertCount; 
  unsigned __int16 triCount; 
  unsigned int hash; 
  __int64 v19; 
  __int64 v20; 
  __int64 v21; 
  XSurface *v22; 
  __int64 v23; 
  __int64 i; 
  XSurface *v25; 
  XSurface *v26; 
  __int64 j; 
  XSurface *v28; 
  XSurface **v29; 
  XSurface *v30; 
  XSurface **v31; 
  XSurface **v32; 
  XSurface **v33; 
  std::pair<XSurface * *,XSurface * *> result; 
  XSurface *_Val; 
  unsigned __int64 v36; 

  v6 = _Last - _First;
  v7 = _Last;
  v8 = _First;
  if ( v6 <= 32 )
  {
LABEL_7:
    if ( v6 >= 2 && v8 != v7 )
    {
      v11 = v8 + 1;
      if ( v8 + 1 != v7 )
      {
        v12 = 1i64;
        do
        {
          v13 = *v8;
          v14 = v11;
          v15 = *v11;
          vertCount = (*v11)->vertCount;
          triCount = (*v11)->triCount;
          hash = (*v11)->hash;
          LODWORD(result.first) = (*v8)->hash;
          HIDWORD(result.first) = *(_DWORD *)&v13->vertCount;
          LODWORD(v32) = hash;
          WORD2(v32) = vertCount;
          HIWORD(v32) = triCount;
          if ( v32 >= result.first )
          {
            v30 = v8[v12 - 1];
            v31 = &v8[v12 - 1];
            LODWORD(v36) = hash;
            WORD2(v36) = vertCount;
            HIWORD(v36) = triCount;
            LODWORD(_Val) = v30->hash;
            for ( HIDWORD(_Val) = *(_DWORD *)&v30->vertCount; v36 < (unsigned __int64)_Val; HIDWORD(_Val) = *(_DWORD *)&v30->vertCount )
            {
              *v14 = v30;
              v14 = v31--;
              LODWORD(v36) = v15->hash;
              WORD2(v36) = v15->vertCount;
              v30 = *v31;
              HIWORD(v36) = v15->triCount;
              LODWORD(_Val) = v30->hash;
            }
            *v14 = v15;
          }
          else
          {
            memmove_0(v8 + 1, v8, v12 * 8);
            *v8 = v15;
          }
          ++v11;
          ++v12;
        }
        while ( v11 != v7 );
      }
    }
  }
  else
  {
    while ( _Ideal > 0 )
    {
      std::_Partition_by_median_guess_unchecked<XSurface * *,XSurfaceHashComparer>(&result, v8, v7, _Pred);
      first = result.first;
      second = result.second;
      _Ideal = (_Ideal >> 2) + (_Ideal >> 1);
      if ( (__int64)(((char *)result.first - (char *)v8) & 0xFFFFFFFFFFFFFFF8ui64) >= (__int64)(((char *)v7 - (char *)result.second) & 0xFFFFFFFFFFFFFFF8ui64) )
      {
        std::_Sort_unchecked<XSurface * *,XSurfaceHashComparer>(result.second, v7, _Ideal, _Pred);
        v7 = first;
      }
      else
      {
        std::_Sort_unchecked<XSurface * *,XSurfaceHashComparer>(v8, result.first, _Ideal, _Pred);
        v8 = second;
      }
      v6 = v7 - v8;
      if ( v6 <= 32 )
        goto LABEL_7;
    }
    v19 = v7 - v8;
    v20 = ((char *)v7 - (char *)v8) >> 4;
    if ( v20 > 0 )
    {
      v21 = (v19 - 1) >> 1;
      do
      {
        v22 = v8[--v20];
        v23 = v20;
        for ( i = v20; i < v21; v23 = i )
        {
          i = 2 * i + 2;
          v25 = v8[i];
          v26 = v8[i - 1];
          LODWORD(v36) = v25->hash;
          HIDWORD(v36) = *(_DWORD *)&v25->vertCount;
          LODWORD(_Val) = v26->hash;
          HIDWORD(_Val) = *(_DWORD *)&v26->vertCount;
          if ( v36 < (unsigned __int64)_Val )
            --i;
          v8[v23] = v8[i];
        }
        if ( i == v21 && (v19 & 1) == 0 )
        {
          v8[v23] = v8[v19 - 1];
          v23 = v19 - 1;
        }
        for ( j = (v23 - 1) >> 1; v20 < v23; j = (j - 1) >> 1 )
        {
          v28 = v8[j];
          LODWORD(result.first) = v28->hash;
          HIDWORD(result.first) = *(_DWORD *)&v28->vertCount;
          LODWORD(v33) = v22->hash;
          HIDWORD(v33) = *(_DWORD *)&v22->vertCount;
          if ( result.first >= v33 )
            break;
          v8[v23] = v28;
          v23 = j;
        }
        v8[v23] = v22;
      }
      while ( v20 > 0 );
    }
    if ( v19 >= 2 )
    {
      v29 = v7 - 1;
      do
      {
        _Val = *v29;
        *v29 = *v8;
        std::_Pop_heap_hole_by_index<XSurface * *,XSurface *,XSurfaceHashComparer>(v8, 0i64, v29 - v8, &_Val, _Pred);
        --v29;
      }
      while ( ((__int64)v29 + 8 - (__int64)v8) >> 3 >= 2 );
    }
  }
}

/*
==============
std::_Guess_median_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>
==============
*/
void std::_Guess_median_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Mid, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Last, SortKeyPartialPredicate _Pred)
{
  __int64 v8; 
  __int64 v9; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v10; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v11; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v12; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v13; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v14; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v15; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v16; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v17; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v18; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v19; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v20; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v21; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v22; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v23; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v24; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v25; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v26; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> result; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v28; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v29; 

  if ( _Last->span_ != _First->span_ && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 236, ASSERT_TYPE_SANITY, "( span_ == rhs.span_ )", (const char *)&queryFormat, "span_ == rhs.span_") )
    __debugbreak();
  v8 = _Last->index_ - _First->index_;
  if ( v8 <= 40 )
  {
    gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v29, _Last);
    v21 = v25;
    gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v28, _Mid);
    v23 = v26;
    gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&result, _First);
  }
  else
  {
    v9 = (v8 + 1) >> 3;
    v10 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator+(_First, &result, 2 * v9);
    v11 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator+(_First, &v28, v9);
    gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v29, _First);
    std::_Med3_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(v12, v11, v10, _Pred);
    v13 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator+(_Mid, &v29, v9);
    gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v28, _Mid);
    v15 = v14;
    v16 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator-(_Mid, &result, v9);
    std::_Med3_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(v16, v15, v13, _Pred);
    gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v29, _Last);
    v18 = v17;
    v19 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator-(_Last, &v28, v9);
    v20 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator-(_Last, &result, 2 * v9);
    std::_Med3_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(v20, v19, v18, _Pred);
    v21 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator-(_Last, &v29, v9);
    gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v28, _Mid);
    v23 = v22;
    v24 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator+(_First, &result, v9);
  }
  std::_Med3_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(v24, v23, v21, _Pred);
}

/*
==============
std::_Insertion_sort_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>
==============
*/
gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *std::_Insertion_sort_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *result, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, const gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Last, SortKeyPartialPredicate _Pred)
{
  const gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v4; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v5; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v6; 
  const gsl::span<StreamSortKeyPacked,-1> *span; 
  __int64 index; 
  __int64 v9; 
  unsigned __int64 bits; 
  const gsl::span<StreamSortKeyPacked,-1> *v11; 
  __int64 v12; 
  __int64 v13; 
  const gsl::span<StreamSortKeyPacked,-1> *v14; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v15; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v16; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v17; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v18; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v19; 
  const gsl::span<StreamSortKeyPacked,-1> *v20; 
  __int64 v21; 
  __int64 v22; 
  unsigned __int64 v23; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> other; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v26; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v27; 
  __int64 v28; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v29; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v30; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v31; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v32; 

  v28 = -2i64;
  v4 = _Last;
  v5 = _First;
  v6 = result;
  span = _First->span_;
  if ( *(_OWORD *)_First != *(_OWORD *)_Last )
  {
    index = _First->index_;
    if ( span && (index < 0 || index > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
      __debugbreak();
    while ( 1 )
    {
      if ( (!span || index < 0 || index >= span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 187, ASSERT_TYPE_SANITY, "( span_ && index_ >= 0 && index_ < span_->length() )", (const char *)&queryFormat, "span_ && index_ >= 0 && index_ < span_->length()") )
        __debugbreak();
      ++index;
      if ( span == v4->span_ && index == v4->index_ )
        break;
      v9 = index;
      if ( span && (index < 0 || index > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      if ( !span && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
        __debugbreak();
      if ( (index < 0 || index >= span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
        __debugbreak();
      bits = span->storage_.data_[index].bits;
      if ( !v5->span_ && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
        __debugbreak();
      v11 = v5->span_;
      v12 = v5->index_;
      if ( (v12 < 0 || v12 >= v11->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
        __debugbreak();
      if ( (bits & 0xFFFFFFFFFFFi64) <= (v11->storage_.data_[v12].bits & 0xFFFFFFFFFFFi64) )
      {
        v22 = index;
        if ( (index < 0 || index > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
          __debugbreak();
        while ( 1 )
        {
          if ( (v22 <= 0 || v22 > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 201, ASSERT_TYPE_SANITY, "( span_ && index_ > 0 && index_ <= span_->length() )", (const char *)&queryFormat, "span_ && index_ > 0 && index_ <= span_->length()") )
            __debugbreak();
          if ( (--v22 < 0 || v22 >= span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
            __debugbreak();
          if ( (bits & 0xFFFFFFFFFFFi64) <= (span->storage_.data_[v22].bits & 0xFFFFFFFFFFFi64) )
            break;
          if ( (v22 < 0 || v22 >= span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
            __debugbreak();
          v23 = span->storage_.data_[v22].bits;
          if ( (v9 < 0 || v9 >= span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
            __debugbreak();
          span->storage_.data_[v9].bits = v23;
          v9 = v22;
        }
        v5 = _First;
        v4 = _Last;
        if ( (v9 < 0 || v9 >= span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
        {
          __debugbreak();
          span->storage_.data_[v9].bits = bits;
        }
        else
        {
          span->storage_.data_[v9].bits = bits;
        }
      }
      else
      {
        if ( (index < 0 || index >= span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 187, ASSERT_TYPE_SANITY, "( span_ && index_ >= 0 && index_ < span_->length() )", (const char *)&queryFormat, "span_ && index_ >= 0 && index_ < span_->length()") )
          __debugbreak();
        other.span_ = span;
        other.index_ = index + 1;
        if ( (index + 1 < 0 || index + 1 > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
          __debugbreak();
        v26.span_ = span;
        v26.index_ = index;
        if ( (index < 0 || index > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
          __debugbreak();
        v13 = v5->index_;
        v14 = v5->span_;
        v27.span_ = v14;
        v27.index_ = v13;
        if ( v14 && (v13 < 0 || v13 > v14->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
          __debugbreak();
        gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v29, &other);
        v16 = v15;
        gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v30, &v26);
        v18 = v17;
        gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v31, &v27);
        std::_Move_backward_unchecked1<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>>(&v32, v19, v18, v16, 0);
        if ( !v5->span_ && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
          __debugbreak();
        v20 = v5->span_;
        v21 = v5->index_;
        if ( (v21 < 0 || v21 >= v20->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
          __debugbreak();
        v20->storage_.data_[v21].bits = bits;
      }
    }
    v6 = result;
  }
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(v6, v4);
  return v6;
}

/*
==============
std::_Make_heap_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>
==============
*/
void std::_Make_heap_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Last, SortKeyPartialPredicate _Pred)
{
  __int64 v6; 
  __int64 i; 
  __int64 index; 
  const gsl::span<StreamSortKeyPacked,-1> *span; 
  __int64 v10; 
  __int64 v11; 
  const gsl::span<StreamSortKeyPacked,-1> *v12; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v13; 
  StreamSortKeyPacked v14; 

  if ( _Last->span_ != _First->span_ && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 236, ASSERT_TYPE_SANITY, "( span_ == rhs.span_ )", (const char *)&queryFormat, "span_ == rhs.span_", -2i64) )
    __debugbreak();
  v6 = _Last->index_ - _First->index_;
  for ( i = v6 >> 1; i > 0; std::_Pop_heap_hole_by_index<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,StreamSortKeyPacked,SortKeyPartialPredicate>(&v13, i, v6, &v14, _Pred) )
  {
    --i;
    index = _First->index_;
    span = _First->span_;
    if ( _First->span_ && (index < 0 || index > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
      __debugbreak();
    if ( (!span || index + i < 0 || index + i > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 221, ASSERT_TYPE_SANITY, "( span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length() )", (const char *)&queryFormat, "span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length()") )
      __debugbreak();
    v10 = i + index;
    if ( span && (v10 < 0 || v10 > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
      __debugbreak();
    if ( !span && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
      __debugbreak();
    if ( (v10 < 0 || v10 >= span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
      __debugbreak();
    v14.0 = ($FD3C46332B1196AF8F5C8C522E71774D)span->storage_.data_[v10].bits;
    v11 = _First->index_;
    v12 = _First->span_;
    v13.span_ = v12;
    v13.index_ = v11;
    if ( v12 && (v11 < 0 || v11 > v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
      __debugbreak();
  }
}

/*
==============
std::_Med3_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>
==============
*/
void std::_Med3_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Mid, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Last, SortKeyPartialPredicate _Pred)
{
  StreamSortKeyPacked *v7; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v8; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v9; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v10; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v11; 
  StreamSortKeyPacked *v12; 
  StreamSortKeyPacked *v13; 
  unsigned __int64 bits; 
  StreamSortKeyPacked *v15; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v16; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v17; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v18; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v19; 
  StreamSortKeyPacked *v20; 
  StreamSortKeyPacked *v21; 
  unsigned __int64 v22; 
  StreamSortKeyPacked *v23; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v24; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v25; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v26; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v27; 
  StreamSortKeyPacked *v28; 
  StreamSortKeyPacked *v29; 
  unsigned __int64 v30; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v31; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v32; 

  v7 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(_First);
  if ( (gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(_Mid)->bits & 0xFFFFFFFFFFFi64) > (v7->bits & 0xFFFFFFFFFFFi64) )
  {
    gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v31, _First);
    v9 = v8;
    gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v32, _Mid);
    v11 = v10;
    v12 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(v9);
    v13 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(v11);
    bits = v13->bits;
    v13->0 = v12->0;
    v12->bits = bits;
  }
  v15 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(_Mid);
  if ( (gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(_Last)->bits & 0xFFFFFFFFFFFi64) > (v15->bits & 0xFFFFFFFFFFFi64) )
  {
    gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v32, _Mid);
    v17 = v16;
    gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v31, _Last);
    v19 = v18;
    v20 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(v17);
    v21 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(v19);
    v22 = v21->bits;
    v21->0 = v20->0;
    v20->bits = v22;
    v23 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(_First);
    if ( (gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(_Mid)->bits & 0xFFFFFFFFFFFi64) > (v23->bits & 0xFFFFFFFFFFFi64) )
    {
      gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v32, _First);
      v25 = v24;
      gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v31, _Mid);
      v27 = v26;
      v28 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(v25);
      v29 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(v27);
      v30 = v29->bits;
      v29->0 = v28->0;
      v28->bits = v30;
    }
  }
}

/*
==============
std::_Partition_by_median_guess_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>
==============
*/
std::pair<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> > *std::_Partition_by_median_guess_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(std::pair<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> > *result, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Last, SortKeyPartialPredicate _Pred)
{
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v9; 
  __int64 index; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v13; 
  const gsl::span<StreamSortKeyPacked,-1> *span; 
  __int64 i; 
  unsigned __int64 *v16; 
  __int64 v17; 
  __int64 v18; 
  unsigned __int64 *v19; 
  const gsl::span<StreamSortKeyPacked,-1> *v20; 
  __int64 v21; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v22; 
  unsigned __int64 *v23; 
  unsigned __int64 *v24; 
  __int64 v25; 
  unsigned __int64 *v26; 
  unsigned __int64 *v27; 
  StreamSortKeyPacked *v29; 
  StreamSortKeyPacked *v30; 
  unsigned __int64 bits; 
  __int64 v32; 
  __int64 j; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v34; 
  __int64 v35; 
  unsigned __int64 *v36; 
  unsigned __int64 *v37; 
  __int64 v38; 
  StreamSortKeyPacked *v40; 
  StreamSortKeyPacked *v41; 
  unsigned __int64 v42; 
  StreamSortKeyPacked *v45; 
  StreamSortKeyPacked *v46; 
  unsigned __int64 v47; 
  StreamSortKeyPacked *v49; 
  StreamSortKeyPacked *v50; 
  unsigned __int64 v51; 
  __int64 v52; 
  StreamSortKeyPacked *v54; 
  StreamSortKeyPacked *v55; 
  unsigned __int64 v56; 
  StreamSortKeyPacked *v58; 
  StreamSortKeyPacked *v59; 
  unsigned __int64 v60; 
  __int64 v61; 
  StreamSortKeyPacked *v62; 
  StreamSortKeyPacked *v63; 
  unsigned __int64 v64; 
  std::pair<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> > *v65; 
  __int64 v67; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v68; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> result_8; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v70; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v71; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v72; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v73; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> other; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v75; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v76; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v77; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v78; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v79; 
  __int64 v80; 
  void *retaddr; 

  _RAX = &retaddr;
  v80 = -2i64;
  __asm { vmovaps xmmword ptr [rax-48h], xmm6 }
  if ( _Last->span_ != _First->span_ && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 236, ASSERT_TYPE_SANITY, "( span_ == rhs.span_ )", (const char *)&queryFormat, "span_ == rhs.span_") )
    __debugbreak();
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator+(_First, &result_8, (_Last->index_ - _First->index_) >> 1);
  v9 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator-(_Last, &v70, 1i64);
  __asm
  {
    vmovups xmm6, xmmword ptr [rsp+150h+result.index_]
    vmovdqa xmmword ptr [rbp+50h+var_D0.span_], xmm6
  }
  index = result_8.index_;
  __asm { vmovq   rsi, xmm6 }
  if ( _RSI && (result_8.index_ < 0 || result_8.index_ > *_RSI) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
    __debugbreak();
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v79, _First);
  std::_Guess_median_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(v13, &v72, v9, _Pred);
  __asm { vmovdqa xmmword ptr [rsp+150h+var_118.index_], xmm6 }
  if ( _RSI && (index < 0 || index > *_RSI) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
    __debugbreak();
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator+(&v68, &result_8, 1i64);
  span = v68.span_;
  for ( i = v68.index_; ; --i )
  {
    if ( _First->span_ != span && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 256, ASSERT_TYPE_SANITY, "( lhs.span_ == rhs.span_ )", (const char *)&queryFormat, "lhs.span_ == rhs.span_") )
      __debugbreak();
    if ( _First->index_ >= i )
      break;
    if ( !span && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
      __debugbreak();
    if ( (i < 0 || i >= span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
      __debugbreak();
    v16 = (unsigned __int64 *)&span->storage_.data_[i];
    if ( span && (i < 0 || i > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
      __debugbreak();
    if ( (!span || i - 1 < 0 || i - 1 > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 221, ASSERT_TYPE_SANITY, "( span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length() )", (const char *)&queryFormat, "span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length()") )
      __debugbreak();
    v17 = i - 1;
    if ( span && (v17 < 0 || v17 > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
      __debugbreak();
    if ( !span && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
      __debugbreak();
    if ( (v17 < 0 || v17 >= span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
      __debugbreak();
    if ( (span->storage_.data_[v17].bits & 0xFFFFFFFFFFFi64) > (*v16 & 0xFFFFFFFFFFFi64) )
      break;
    if ( span && (i < 0 || i > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
      __debugbreak();
    if ( (!span || i - 1 < 0 || i - 1 > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 221, ASSERT_TYPE_SANITY, "( span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length() )", (const char *)&queryFormat, "span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length()") )
      __debugbreak();
    v18 = i - 1;
    if ( span && (v18 < 0 || v18 > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
      __debugbreak();
    if ( !span && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
      __debugbreak();
    if ( (v18 < 0 || v18 >= span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
      __debugbreak();
    v19 = (unsigned __int64 *)&span->storage_.data_[v18];
    if ( !span && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
      __debugbreak();
    if ( (i < 0 || i >= span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
      __debugbreak();
    if ( (span->storage_.data_[i].bits & 0xFFFFFFFFFFFi64) > (*v19 & 0xFFFFFFFFFFFi64) )
      break;
    if ( (!span || i <= 0 || i > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 201, ASSERT_TYPE_SANITY, "( span_ && index_ > 0 && index_ <= span_->length() )", (const char *)&queryFormat, "span_ && index_ > 0 && index_ <= span_->length()") )
      __debugbreak();
  }
  v68.index_ = i;
  v20 = result_8.span_;
  v21 = result_8.index_;
  v22 = _Last;
  while ( 1 )
  {
    if ( v20 != _Last->span_ && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 256, ASSERT_TYPE_SANITY, "( lhs.span_ == rhs.span_ )", (const char *)&queryFormat, "lhs.span_ == rhs.span_") )
      __debugbreak();
    if ( v21 >= _Last->index_ )
      break;
    if ( !span && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
      __debugbreak();
    if ( (i < 0 || i >= span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
      __debugbreak();
    v23 = (unsigned __int64 *)&span->storage_.data_[i];
    if ( !v20 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
      __debugbreak();
    if ( (v21 < 0 || v21 >= v20->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
      __debugbreak();
    if ( (v20->storage_.data_[v21].bits & 0xFFFFFFFFFFFi64) > (*v23 & 0xFFFFFFFFFFFi64) )
      break;
    if ( !v20 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
      __debugbreak();
    if ( (v21 < 0 || v21 >= v20->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
      __debugbreak();
    v24 = (unsigned __int64 *)&v20->storage_.data_[v21];
    if ( !span && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
      __debugbreak();
    if ( (i < 0 || i >= span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
      __debugbreak();
    if ( (span->storage_.data_[i].bits & 0xFFFFFFFFFFFi64) > (*v24 & 0xFFFFFFFFFFFi64) )
      break;
    if ( (!v20 || v21 < 0 || v21 >= v20->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 187, ASSERT_TYPE_SANITY, "( span_ && index_ >= 0 && index_ < span_->length() )", (const char *)&queryFormat, "span_ && index_ >= 0 && index_ < span_->length()") )
      __debugbreak();
    ++v21;
  }
  result_8.index_ = v21;
  v25 = v21;
  if ( v20 && (v21 < 0 || v21 > v20->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
    __debugbreak();
  v67 = i;
  if ( span && (i < 0 || i > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
    __debugbreak();
  while ( 1 )
  {
LABEL_136:
    if ( v20 != v22->span_ && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 256, ASSERT_TYPE_SANITY, "( lhs.span_ == rhs.span_ )", (const char *)&queryFormat, "lhs.span_ == rhs.span_") )
      __debugbreak();
    if ( v25 >= v22->index_ )
      break;
    if ( !v20 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
      __debugbreak();
    if ( (v25 < 0 || v25 >= v20->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
      __debugbreak();
    v26 = (unsigned __int64 *)&v20->storage_.data_[v25];
    if ( !span && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
      __debugbreak();
    if ( (i < 0 || i >= span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
      __debugbreak();
    if ( (span->storage_.data_[i].bits & 0xFFFFFFFFFFFi64) <= (*v26 & 0xFFFFFFFFFFFi64) )
    {
      if ( !span && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
        __debugbreak();
      if ( (i < 0 || i >= span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
        __debugbreak();
      v27 = (unsigned __int64 *)&span->storage_.data_[i];
      if ( (v25 < 0 || v25 >= v20->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
        __debugbreak();
      if ( (v20->storage_.data_[v25].bits & 0xFFFFFFFFFFFi64) > (*v27 & 0xFFFFFFFFFFFi64) )
        break;
      if ( v21 != v25 )
      {
        v73.span_ = v20;
        v73.index_ = v25;
        if ( (v25 < 0 || v25 > v20->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
          __debugbreak();
        __asm
        {
          vmovups xmm0, xmmword ptr [rsp+150h+result.index_]
          vmovdqa xmmword ptr [rsp+150h+var_E8+8], xmm0
        }
        if ( v20 && (v21 < 0 || v21 > v20->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
          __debugbreak();
        v29 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(&v73);
        v30 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(&v71);
        bits = v30->bits;
        v30->0 = v29->0;
        v29->bits = bits;
      }
      if ( (!v20 || v21 < 0 || v21 >= v20->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 187, ASSERT_TYPE_SANITY, "( span_ && index_ >= 0 && index_ < span_->length() )", (const char *)&queryFormat, "span_ && index_ >= 0 && index_ < span_->length()") )
        __debugbreak();
      result_8.index_ = ++v21;
    }
LABEL_184:
    if ( v25 >= 0 && v25 < v20->storage_.size_ )
    {
LABEL_188:
      ++v25;
    }
    else
    {
LABEL_186:
      if ( !CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 187, ASSERT_TYPE_SANITY, "( span_ && index_ >= 0 && index_ < span_->length() )", (const char *)&queryFormat, "span_ && index_ >= 0 && index_ < span_->length()") )
        goto LABEL_188;
      __debugbreak();
      ++v25;
    }
  }
  v32 = v67;
  for ( j = v67 - 1; ; --j )
  {
    v34 = _First;
    if ( _First->span_ != span )
    {
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 256, ASSERT_TYPE_SANITY, "( lhs.span_ == rhs.span_ )", (const char *)&queryFormat, "lhs.span_ == rhs.span_") )
        __debugbreak();
      v34 = _First;
    }
    v35 = v34->index_;
    if ( v35 >= v32 )
      break;
    if ( !span && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
      __debugbreak();
    if ( (i < 0 || i >= span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
      __debugbreak();
    v36 = (unsigned __int64 *)&span->storage_.data_[i];
    if ( span && (v67 < 0 || v67 > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
      __debugbreak();
    if ( (!span || j < 0 || j > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 221, ASSERT_TYPE_SANITY, "( span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length() )", (const char *)&queryFormat, "span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length()") )
      __debugbreak();
    if ( span && (j < 0 || j > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
      __debugbreak();
    if ( !span && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
      __debugbreak();
    if ( (j < 0 || j >= span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
      __debugbreak();
    if ( (span->storage_.data_[j].bits & 0xFFFFFFFFFFFi64) > (*v36 & 0xFFFFFFFFFFFi64) )
      goto LABEL_282;
    if ( (v67 < 0 || v67 > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
      __debugbreak();
    if ( (j < 0 || j > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 221, ASSERT_TYPE_SANITY, "( span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length() )", (const char *)&queryFormat, "span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length()") )
      __debugbreak();
    if ( (j < 0 || j > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
      __debugbreak();
    if ( (j < 0 || j >= span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
      __debugbreak();
    v37 = (unsigned __int64 *)&span->storage_.data_[j];
    if ( !span && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
      __debugbreak();
    if ( (i < 0 || i >= span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
      __debugbreak();
    if ( (span->storage_.data_[i].bits & 0xFFFFFFFFFFFi64) > (*v37 & 0xFFFFFFFFFFFi64) )
    {
      v35 = _First->index_;
      v32 = v67;
      break;
    }
    v38 = v67;
    if ( (v67 < 0 || v67 > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
      __debugbreak();
    if ( (j < 0 || j > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 221, ASSERT_TYPE_SANITY, "( span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length() )", (const char *)&queryFormat, "span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length()") )
      __debugbreak();
    if ( (j < 0 || j > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
      __debugbreak();
    if ( (!span || i <= 0 || i > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 201, ASSERT_TYPE_SANITY, "( span_ && index_ > 0 && index_ <= span_->length() )", (const char *)&queryFormat, "span_ && index_ > 0 && index_ <= span_->length()") )
      __debugbreak();
    v68.index_ = --i;
    if ( i != j )
    {
      other.span_ = span;
      if ( (v67 < 0 || v67 > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      if ( (!span || v67 - 1 < 0 || v67 - 1 > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 221, ASSERT_TYPE_SANITY, "( span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length() )", (const char *)&queryFormat, "span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length()") )
        __debugbreak();
      other.index_ = v67 - 1;
      gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v79, &other);
      __asm
      {
        vmovups xmm0, xmmword ptr [rsp+150h+var_118.index_]
        vmovdqa xmmword ptr [rsp+150h+var_E8+8], xmm0
      }
      if ( span && (i < 0 || i > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      v40 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(&v79);
      v41 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(&v71);
      v42 = v41->bits;
      v41->0 = v40->0;
      v40->bits = v42;
LABEL_282:
      v38 = v67;
    }
    if ( (v38 <= 0 || v38 > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 201, ASSERT_TYPE_SANITY, "( span_ && index_ > 0 && index_ <= span_->length() )", (const char *)&queryFormat, "span_ && index_ > 0 && index_ <= span_->length()") )
      __debugbreak();
    v32 = v38 - 1;
    v67 = v32;
  }
  v22 = _Last;
  if ( span != _First->span_ || v32 != v35 )
    goto LABEL_332;
  if ( v20 != _Last->span_ || v25 != _Last->index_ )
  {
    if ( v32 == v35 )
    {
      if ( v21 != v25 )
      {
        __asm
        {
          vmovups xmm0, xmmword ptr [rsp+150h+result.index_]
          vmovdqa xmmword ptr [rsp+150h+var_E8+8], xmm0
        }
        if ( v20 && (v21 < 0 || v21 > v20->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
          __debugbreak();
        __asm
        {
          vmovups xmm0, xmmword ptr [rsp+150h+var_118.index_]
          vmovdqa xmmword ptr [rsp+150h+var_F8.index_], xmm0
        }
        if ( span && (i < 0 || i > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
          __debugbreak();
        v45 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(&v71);
        v46 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(&v70);
        v47 = v46->bits;
        v46->0 = v45->0;
        v45->bits = v47;
      }
      if ( (!v20 || v21 < 0 || v21 >= v20->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 187, ASSERT_TYPE_SANITY, "( span_ && index_ >= 0 && index_ < span_->length() )", (const char *)&queryFormat, "span_ && index_ >= 0 && index_ < span_->length()") )
        __debugbreak();
      result_8.index_ = ++v21;
      v75.span_ = v20;
      v75.index_ = v25;
      if ( v20 && (v25 < 0 || v25 > v20->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      __asm
      {
        vmovups xmm0, xmmword ptr [rsp+150h+var_118.index_]
        vmovdqa xmmword ptr [rsp+150h+var_F8.index_], xmm0
      }
      if ( span && (i < 0 || i > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      v49 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(&v75);
      v50 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(&v70);
      v51 = v50->bits;
      v50->0 = v49->0;
      v49->bits = v51;
      if ( (!span || i < 0 || i >= span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 187, ASSERT_TYPE_SANITY, "( span_ && index_ >= 0 && index_ < span_->length() )", (const char *)&queryFormat, "span_ && index_ >= 0 && index_ < span_->length()") )
        __debugbreak();
      v68.index_ = ++i;
      if ( (!v20 || v25 < 0 || v25 >= v20->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 187, ASSERT_TYPE_SANITY, "( span_ && index_ >= 0 && index_ < span_->length() )", (const char *)&queryFormat, "span_ && index_ >= 0 && index_ < span_->length()") )
        __debugbreak();
      ++v25;
      goto LABEL_136;
    }
LABEL_332:
    if ( v20 == _Last->span_ && v25 == _Last->index_ )
    {
      if ( (!span || i <= 0 || i > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 201, ASSERT_TYPE_SANITY, "( span_ && index_ > 0 && index_ <= span_->length() )", (const char *)&queryFormat, "span_ && index_ > 0 && index_ <= span_->length()") )
        __debugbreak();
      v68.index_ = --i;
      if ( (!span || v32 <= 0 || v32 > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 201, ASSERT_TYPE_SANITY, "( span_ && index_ > 0 && index_ <= span_->length() )", (const char *)&queryFormat, "span_ && index_ > 0 && index_ <= span_->length()") )
        __debugbreak();
      v52 = v32 - 1;
      v67 = v52;
      if ( v52 != i )
      {
        __asm
        {
          vmovups xmm0, xmmword ptr [rsp+150h+var_118.index_]
          vmovdqa xmmword ptr [rsp+150h+var_F8.index_], xmm0
        }
        if ( span && (i < 0 || i > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
          __debugbreak();
        v76.span_ = span;
        v76.index_ = v52;
        if ( span && (v52 < 0 || v52 > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
          __debugbreak();
        v54 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(&v70);
        v55 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(&v76);
        v56 = v55->bits;
        v55->0 = v54->0;
        v54->bits = v56;
      }
      if ( (!v20 || v21 <= 0 || v21 > v20->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 201, ASSERT_TYPE_SANITY, "( span_ && index_ > 0 && index_ <= span_->length() )", (const char *)&queryFormat, "span_ && index_ > 0 && index_ <= span_->length()") )
        __debugbreak();
      result_8.index_ = --v21;
      v77.span_ = v20;
      v77.index_ = v21;
      if ( v20 && (v21 < 0 || v21 > v20->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      __asm
      {
        vmovups xmm0, xmmword ptr [rsp+150h+var_118.index_]
        vmovdqa xmmword ptr [rsp+150h+var_F8.index_], xmm0
      }
      if ( span && (i < 0 || i > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      v58 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(&v77);
      v59 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(&v70);
      v60 = v59->bits;
      v59->0 = v58->0;
      v58->bits = v60;
      goto LABEL_136;
    }
    if ( (!span || v32 <= 0 || v32 > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 201, ASSERT_TYPE_SANITY, "( span_ && index_ > 0 && index_ <= span_->length() )", (const char *)&queryFormat, "span_ && index_ > 0 && index_ <= span_->length()") )
      __debugbreak();
    v61 = v32 - 1;
    v67 = v61;
    v78.span_ = span;
    v78.index_ = v61;
    if ( span && (v61 < 0 || v61 > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
      __debugbreak();
    v72.span_ = v20;
    v72.index_ = v25;
    if ( v20 && (v25 < 0 || v25 > v20->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
      __debugbreak();
    v62 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(&v78);
    v63 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(&v72);
    v64 = v63->bits;
    v63->0 = v62->0;
    v62->bits = v64;
    if ( !v20 )
      goto LABEL_186;
    goto LABEL_184;
  }
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&result->first, &v68);
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&result->second, &result_8);
  v65 = result;
  __asm { vmovaps xmm6, xmmword ptr [rsp+150h+var_48+8] }
  return v65;
}

/*
==============
std::_Pop_heap_hole_by_index<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,StreamSortKeyPacked,SortKeyPartialPredicate>
==============
*/
void std::_Pop_heap_hole_by_index<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,StreamSortKeyPacked,SortKeyPartialPredicate>(gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, __int64 _Hole, __int64 _Bottom, StreamSortKeyPacked *_Val, SortKeyPartialPredicate _Pred)
{
  StreamSortKeyPacked *v5; 
  char v6; 
  __int64 v7; 
  __int64 v9; 
  __int64 v10; 
  __int64 v11; 
  __int64 v12; 
  __int64 v13; 
  __int64 index; 
  const gsl::span<StreamSortKeyPacked,-1> *span; 
  __int64 v16; 
  __int64 v17; 
  unsigned __int64 *v18; 
  __int64 v19; 
  const gsl::span<StreamSortKeyPacked,-1> *v20; 
  __int64 v21; 
  __int64 v22; 
  __int64 v23; 
  const gsl::span<StreamSortKeyPacked,-1> *v24; 
  __int64 v25; 
  unsigned __int64 bits; 
  __int64 v27; 
  const gsl::span<StreamSortKeyPacked,-1> *v28; 
  __int64 v29; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v30; 
  unsigned __int64 v31; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v32; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v33; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> result; 
  __int64 v35; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v36; 
  __int64 v37; 
  char v38; 

  v38 = _Bottom;
  v35 = -2i64;
  v5 = _Val;
  v6 = _Bottom;
  v7 = _Hole;
  v9 = _Hole;
  result.span_ = (const gsl::span<StreamSortKeyPacked,-1> *)_Hole;
  v10 = _Hole;
  v11 = _Bottom - 1;
  v37 = _Bottom - 1;
  v12 = (_Bottom - 1) >> 1;
  if ( _Hole < v12 )
  {
    do
    {
      v13 = 2 * v10;
      index = _First->index_;
      span = _First->span_;
      if ( _First->span_ && (index < 0 || index > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      if ( !span || (v16 = index + v13 + 1, v16 < 0) || v16 > span->storage_.size_ )
      {
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 221, ASSERT_TYPE_SANITY, "( span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length() )", (const char *)&queryFormat, "span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length()") )
          __debugbreak();
      }
      v17 = index + v13 + 1;
      if ( span && (v17 < 0 || v17 > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      if ( !span && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
        __debugbreak();
      if ( (v17 < 0 || v17 >= span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
        __debugbreak();
      v18 = (unsigned __int64 *)&span->storage_.data_[v17];
      v19 = _First->index_;
      v20 = _First->span_;
      if ( _First->span_ && (v19 < 0 || v19 > v20->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      if ( !v20 || (v21 = v19 + v13 + 2, v21 < 0) || v21 > v20->storage_.size_ )
      {
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 221, ASSERT_TYPE_SANITY, "( span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length() )", (const char *)&queryFormat, "span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length()") )
          __debugbreak();
      }
      v22 = v19 + v13 + 2;
      if ( v20 && (v22 < 0 || v22 > v20->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      if ( !v20 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
        __debugbreak();
      if ( (v22 < 0 || v22 >= v20->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
        __debugbreak();
      v10 = v13 + 2i64 - ((*v18 & 0xFFFFFFFFFFFi64) < (v20->storage_.data_[v22].bits & 0xFFFFFFFFFFFi64));
      v23 = _First->index_;
      v24 = _First->span_;
      if ( _First->span_ && (v23 < 0 || v23 > v24->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      if ( (!v24 || v10 + v23 < 0 || v10 + v23 > v24->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 221, ASSERT_TYPE_SANITY, "( span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length() )", (const char *)&queryFormat, "span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length()") )
        __debugbreak();
      v25 = v10 + v23;
      if ( v24 && (v25 < 0 || v25 > v24->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      if ( !v24 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
        __debugbreak();
      if ( (v25 < 0 || v25 >= v24->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
        __debugbreak();
      bits = v24->storage_.data_[v25].bits;
      v27 = _First->index_;
      v28 = _First->span_;
      if ( _First->span_ && (v27 < 0 || v27 > v28->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      if ( (!v28 || v27 + v7 < 0 || v27 + v7 > v28->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 221, ASSERT_TYPE_SANITY, "( span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length() )", (const char *)&queryFormat, "span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length()") )
        __debugbreak();
      v29 = v7 + v27;
      if ( v28 && (v29 < 0 || v29 > v28->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      if ( !v28 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
        __debugbreak();
      if ( (v29 < 0 || v29 >= v28->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
        __debugbreak();
      v28->storage_.data_[v29].bits = bits;
      v7 = v10;
    }
    while ( v10 < v12 );
    v11 = v37;
    v6 = v38;
    v5 = _Val;
    v9 = (__int64)result.span_;
  }
  if ( v10 == v12 && (v6 & 1) == 0 )
  {
    v30 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator+(_First, &result, v11);
    v31 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(v30)->bits;
    v32 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator+(_First, &v36, v7);
    gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(v32)->bits = v31;
    v7 = v11;
  }
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v36, _First);
  std::_Push_heap_by_index<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,StreamSortKeyPacked,SortKeyPartialPredicate>(v33, v7, v9, v5, _Pred);
}

/*
==============
std::_Push_heap_by_index<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,StreamSortKeyPacked,SortKeyPartialPredicate>
==============
*/
void std::_Push_heap_by_index<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,StreamSortKeyPacked,SortKeyPartialPredicate>(gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, __int64 _Hole, __int64 _Top, StreamSortKeyPacked *_Val)
{
  __int64 v6; 
  __int64 v8; 
  __int64 index; 
  const gsl::span<StreamSortKeyPacked,-1> *span; 
  __int64 v11; 
  __int64 v12; 
  const gsl::span<StreamSortKeyPacked,-1> *v13; 
  __int64 v14; 
  unsigned __int64 bits; 
  __int64 v16; 
  const gsl::span<StreamSortKeyPacked,-1> *v17; 
  __int64 v18; 
  unsigned __int64 v19; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v20; 
  __int64 v21; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> result; 

  v21 = -2i64;
  v6 = _Hole;
  if ( _Top < _Hole )
  {
    do
    {
      v8 = (v6 - 1) >> 1;
      index = _First->index_;
      span = _First->span_;
      if ( _First->span_ && (index < 0 || index > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())", v21) )
        __debugbreak();
      if ( (!span || index + v8 < 0 || index + v8 > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 221, ASSERT_TYPE_SANITY, "( span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length() )", (const char *)&queryFormat, "span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length()") )
        __debugbreak();
      v11 = v8 + index;
      if ( span && (v11 < 0 || v11 > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      if ( !span && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
        __debugbreak();
      if ( (v11 < 0 || v11 >= span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
        __debugbreak();
      if ( (span->storage_.data_[v11].bits & 0xFFFFFFFFFFFi64) <= (_Val->bits & 0xFFFFFFFFFFFi64) )
        break;
      v12 = _First->index_;
      v13 = _First->span_;
      if ( _First->span_ && (v12 < 0 || v12 > v13->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      if ( (!v13 || v12 + v8 < 0 || v12 + v8 > v13->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 221, ASSERT_TYPE_SANITY, "( span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length() )", (const char *)&queryFormat, "span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length()") )
        __debugbreak();
      v14 = v8 + v12;
      if ( v13 && (v14 < 0 || v14 > v13->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      if ( !v13 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
        __debugbreak();
      if ( (v14 < 0 || v14 >= v13->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
        __debugbreak();
      bits = v13->storage_.data_[v14].bits;
      v16 = _First->index_;
      v17 = _First->span_;
      if ( _First->span_ && (v16 < 0 || v16 > v17->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      if ( (!v17 || v16 + v6 < 0 || v16 + v6 > v17->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 221, ASSERT_TYPE_SANITY, "( span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length() )", (const char *)&queryFormat, "span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length()") )
        __debugbreak();
      v18 = v6 + v16;
      if ( v17 && (v18 < 0 || v18 > v17->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      if ( !v17 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
        __debugbreak();
      if ( (v18 < 0 || v18 >= v17->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
        __debugbreak();
      v17->storage_.data_[v18].bits = bits;
      v6 = (v6 - 1) >> 1;
    }
    while ( _Top < v8 );
  }
  v19 = _Val->bits;
  v20 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator+(_First, &result, v6);
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(v20)->bits = v19;
}

/*
==============
std::_Sort_heap_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>
==============
*/
void std::_Sort_heap_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Last, SortKeyPartialPredicate _Pred)
{
  __int64 index; 
  const gsl::span<StreamSortKeyPacked,-1> *span; 
  __int64 v8; 
  const gsl::span<StreamSortKeyPacked,-1> *v9; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v10; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v11; 
  const gsl::span<StreamSortKeyPacked,-1> **v12; 
  const gsl::span<StreamSortKeyPacked,-1> **v13; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v14; 
  const gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v15; 
  unsigned __int64 bits; 
  __int64 v17; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v18; 
  __int64 v19; 
  __int64 v20; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> other; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v22; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v23; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v24; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v25; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v26; 
  StreamSortKeyPacked v27; 

  v20 = -2i64;
  while ( 1 )
  {
    if ( _Last->span_ != _First->span_ && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 236, ASSERT_TYPE_SANITY, "( span_ == rhs.span_ )", (const char *)&queryFormat, "span_ == rhs.span_", v20) )
      __debugbreak();
    index = _Last->index_;
    if ( index - _First->index_ < 2 )
      break;
    span = _Last->span_;
    other.span_ = span;
    other.index_ = index;
    if ( span && (index < 0 || index > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
      __debugbreak();
    v8 = _First->index_;
    v9 = _First->span_;
    v22.span_ = v9;
    v22.index_ = v8;
    if ( v9 && (v8 < 0 || v8 > v9->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
      __debugbreak();
    if ( span != v9 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 236, ASSERT_TYPE_SANITY, "( span_ == rhs.span_ )", (const char *)&queryFormat, "span_ == rhs.span_") )
      __debugbreak();
    if ( index - v8 >= 2 )
    {
      gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator--(&other);
      v27.0 = ($FD3C46332B1196AF8F5C8C522E71774D)gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(&other)->bits;
      gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v23, &other);
      v11 = v10;
      gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v24, &other);
      v13 = v12;
      gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v25, &v22);
      v15 = v14;
      bits = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(v14)->bits;
      gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(v11)->bits = bits;
      if ( *v13 != v15->span_ && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 236, ASSERT_TYPE_SANITY, "( span_ == rhs.span_ )", (const char *)&queryFormat, "span_ == rhs.span_") )
        __debugbreak();
      v17 = (__int64)v13[1] - v15->index_;
      gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v26, v15);
      std::_Pop_heap_hole_by_index<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,StreamSortKeyPacked,SortKeyPartialPredicate>(v18, 0i64, v17, &v27, _Pred);
    }
    if ( !_Last->span_ || (v19 = _Last->index_, v19 <= 0) || v19 > _Last->span_->storage_.size_ )
    {
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 201, ASSERT_TYPE_SANITY, "( span_ && index_ > 0 && index_ <= span_->length() )", (const char *)&queryFormat, "span_ && index_ > 0 && index_ <= span_->length()") )
        __debugbreak();
    }
    --_Last->index_;
  }
}

/*
==============
std::_Sort_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>
==============
*/
void std::_Sort_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Last, __int64 _Ideal, SortKeyPartialPredicate _Pred)
{
  __int64 index; 
  __int64 v9; 
  const gsl::span<StreamSortKeyPacked,-1> *span; 
  __int64 v11; 
  const gsl::span<StreamSortKeyPacked,-1> *v12; 
  const gsl::span<StreamSortKeyPacked,-1> *v13; 
  __int64 v14; 
  __int64 v15; 
  const gsl::span<StreamSortKeyPacked,-1> *v16; 
  __int64 v17; 
  __int64 v18; 
  __int64 v19; 
  const gsl::span<StreamSortKeyPacked,-1> *v20; 
  const gsl::span<StreamSortKeyPacked,-1> *v22; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v24; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v25; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v26; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v27; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v28; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v29; 
  const gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v30; 
  const gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v31; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v32; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v33; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v34; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v35; 
  std::pair<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> > v36; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v37; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v38; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v39; 
  __int64 v40; 
  __int64 v42; 

  v40 = -2i64;
  _RSI = _Last;
  _R13 = _First;
  while ( 1 )
  {
    if ( _RSI->span_ != _R13->span_ && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 236, ASSERT_TYPE_SANITY, "( span_ == rhs.span_ )", (const char *)&queryFormat, "span_ == rhs.span_") )
      __debugbreak();
    index = _RSI->index_;
    v9 = index - _R13->index_;
    if ( v9 <= 32 )
      break;
    if ( _Ideal <= 0 )
    {
      gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v34, _RSI);
      v25 = v24;
      gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v33, _R13);
      std::_Make_heap_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(v26, v25, _Pred);
      gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v34, _RSI);
      v28 = v27;
      gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v33, _R13);
      std::_Sort_heap_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(v29, v28, _Pred);
      return;
    }
    span = _RSI->span_;
    v37.span_ = span;
    v37.index_ = index;
    if ( span && (index < 0 || index > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())", v33.span_, v33.index_, v34.span_, v34.index_, v35.span_, v35.index_) )
      __debugbreak();
    v11 = _R13->index_;
    v12 = _R13->span_;
    v38.span_ = v12;
    v38.index_ = v11;
    if ( v12 && (v11 < 0 || v11 > v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
      __debugbreak();
    std::_Partition_by_median_guess_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(&v36, &v38, &v37, _Pred);
    v42 = (_Ideal >> 1) + (_Ideal >> 2);
    v13 = v36.first.span_;
    if ( v36.first.span_ != _R13->span_ && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 236, ASSERT_TYPE_SANITY, "( span_ == rhs.span_ )", (const char *)&queryFormat, "span_ == rhs.span_") )
      __debugbreak();
    v14 = v36.first.index_;
    v15 = v36.first.index_ - _R13->index_;
    v16 = v36.second.span_;
    if ( _RSI->span_ != v36.second.span_ && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 236, ASSERT_TYPE_SANITY, "( span_ == rhs.span_ )", (const char *)&queryFormat, "span_ == rhs.span_") )
      __debugbreak();
    v17 = _RSI->index_;
    v18 = v36.second.index_;
    if ( v15 >= v17 - v36.second.index_ )
    {
      v22 = _Last->span_;
      v33.span_ = v22;
      v33.index_ = v17;
      if ( v22 && (v17 < 0 || v17 > v22->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())", v33.span_, v33.index_) )
        __debugbreak();
      v34.span_ = v16;
      v34.index_ = v18;
      if ( v16 && (v18 < 0 || v18 > v16->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      _Ideal = v42;
      std::_Sort_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(&v34, &v33, v42, _Pred);
      __asm { vmovups xmm0, [rbp+57h+var_90] }
      _RSI = _Last;
      __asm { vmovups xmmword ptr [rsi], xmm0 }
    }
    else
    {
      v39.span_ = v13;
      v39.index_ = v14;
      if ( v13 && (v14 < 0 || v14 > v13->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      v19 = _R13->index_;
      v20 = _R13->span_;
      v35.span_ = v20;
      v35.index_ = v19;
      if ( v20 && (v19 < 0 || v19 > v20->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      _Ideal = v42;
      std::_Sort_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(&v35, &v39, v42, _Pred);
      __asm
      {
        vmovups xmm0, [rbp+57h+var_80]
        vmovups xmmword ptr [r13+0], xmm0
      }
      _RSI = _Last;
    }
  }
  if ( v9 >= 2 )
  {
    gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v34, _RSI);
    v31 = v30;
    gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v33, _R13);
    std::_Insertion_sort_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(&v35, v32, v31, _Pred);
  }
}

/*
==============
std::is_sorted_until<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>
==============
*/
gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *std::is_sorted_until<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *result, const gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Last, SortKeyPartialPredicate _Pred)
{
  __int64 index; 
  const gsl::span<StreamSortKeyPacked,-1> *span; 
  __int64 v8; 
  const gsl::span<StreamSortKeyPacked,-1> *v9; 
  __int64 v10; 
  unsigned __int64 *v11; 
  __int128 v14; 
  __int128 v15; 

  _R12 = _Last;
  index = _First->index_;
  span = _First->span_;
  if ( _First->span_ && (index < 0 || index > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())", -2i64) )
    __debugbreak();
  v8 = _R12->index_;
  v9 = _R12->span_;
  *(_QWORD *)&v14 = _R12->span_;
  *((_QWORD *)&v14 + 1) = v8;
  if ( _R12->span_ && (v8 < 0 || v8 > v9->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
    __debugbreak();
  if ( span != v9 || index != v8 )
  {
    *(_QWORD *)&v15 = span;
    v10 = index;
    if ( span && (index < 0 || index > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
      __debugbreak();
    while ( 1 )
    {
      if ( (!span || v10 < 0 || v10 >= span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 187, ASSERT_TYPE_SANITY, "( span_ && index_ >= 0 && index_ < span_->length() )", (const char *)&queryFormat, "span_ && index_ >= 0 && index_ < span_->length()") )
        __debugbreak();
      *((_QWORD *)&v15 + 1) = ++v10;
      if ( span == v9 && v10 == v8 )
        break;
      if ( !span && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
        __debugbreak();
      if ( (index < 0 || index >= span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
        __debugbreak();
      v11 = (unsigned __int64 *)&span->storage_.data_[index];
      if ( !span && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
        __debugbreak();
      if ( (v10 < 0 || v10 >= span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
        __debugbreak();
      if ( (span->storage_.data_[v10].bits & 0xFFFFFFFFFFFi64) > (*v11 & 0xFFFFFFFFFFFi64) )
      {
        __asm { vmovups xmm0, [rsp+88h+var_38] }
        goto LABEL_47;
      }
      if ( (index < 0 || index >= span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 187, ASSERT_TYPE_SANITY, "( span_ && index_ >= 0 && index_ < span_->length() )", (const char *)&queryFormat, "span_ && index_ >= 0 && index_ < span_->length()") )
      {
        __debugbreak();
        ++index;
      }
      else
      {
        ++index;
      }
    }
  }
  __asm { vmovups xmm0, [rsp+88h+var_48] }
LABEL_47:
  __asm { vmovups xmmword ptr [r12], xmm0 }
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(result, _R12);
  return result;
}

/*
==============
std::nth_element<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>
==============
*/
void std::nth_element<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Nth, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Last, SortKeyPartialPredicate _Pred)
{
  __int64 index; 
  const gsl::span<StreamSortKeyPacked,-1> *span; 
  __int64 v12; 
  const gsl::span<StreamSortKeyPacked,-1> *v13; 
  __int64 v14; 
  const gsl::span<StreamSortKeyPacked,-1> *v15; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v21; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v22; 
  std::pair<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> > v23[2]; 
  char v24; 
  void *retaddr; 

  _RAX = &retaddr;
  __asm
  {
    vmovaps xmmword ptr [rax-38h], xmm6
    vmovaps xmmword ptr [rax-48h], xmm7
  }
  index = _First->index_;
  span = _First->span_;
  v21.span_ = span;
  v21.index_ = index;
  if ( span && (index < 0 || index > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())", -2i64) )
    __debugbreak();
  v12 = _Nth->index_;
  v13 = _Nth->span_;
  if ( _Nth->span_ && (v12 < 0 || v12 > v13->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
    __debugbreak();
  v14 = _Last->index_;
  v15 = _Last->span_;
  v22.span_ = v15;
  v22.index_ = v14;
  if ( v15 && (v14 < 0 || v14 > v15->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
    __debugbreak();
  if ( v13 != v15 || v12 != v14 )
  {
    __asm
    {
      vmovups xmm7, [rbp+57h+var_80]
      vmovups xmm6, [rbp+57h+var_70]
    }
    while ( 1 )
    {
      if ( v15 != span && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 236, ASSERT_TYPE_SANITY, "( span_ == rhs.span_ )", (const char *)&queryFormat, "span_ == rhs.span_") )
        __debugbreak();
      if ( v14 - index <= 32 )
        break;
      __asm { vmovdqa [rbp+57h+var_70], xmm6 }
      if ( v15 && (v14 < 0 || v14 > v15->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      __asm { vmovdqa [rbp+57h+var_80], xmm7 }
      if ( span && (index < 0 || index > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      std::_Partition_by_median_guess_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(v23, &v21, &v22, _Pred);
      if ( v13 != v23[0].second.span_ && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 256, ASSERT_TYPE_SANITY, "( lhs.span_ == rhs.span_ )", (const char *)&queryFormat, "lhs.span_ == rhs.span_") )
        __debugbreak();
      if ( v12 < v23[0].second.index_ )
      {
        if ( v13 != v23[0].first.span_ && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 256, ASSERT_TYPE_SANITY, "( lhs.span_ == rhs.span_ )", (const char *)&queryFormat, "lhs.span_ == rhs.span_") )
          __debugbreak();
        if ( v12 >= v23[0].first.index_ )
          goto LABEL_54;
        __asm
        {
          vmovups xmm6, [rbp+57h+var_60]
          vmovups [rbp+57h+var_70], xmm6
        }
        v14 = v22.index_;
        v15 = v22.span_;
      }
      else
      {
        __asm
        {
          vmovups xmm7, [rbp+57h+var_50]
          vmovups [rbp+57h+var_80], xmm7
        }
        index = v21.index_;
        span = v21.span_;
      }
    }
    __asm { vmovdqa [rbp+57h+var_70], xmm6 }
    if ( v15 && (v14 < 0 || v14 > v15->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
      __debugbreak();
    __asm { vmovdqa [rbp+57h+var_80], xmm7 }
    if ( span && (index < 0 || index > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
      __debugbreak();
    std::_Insertion_sort_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(&v23[0].first, &v21, &v22, _Pred);
  }
LABEL_54:
  _R11 = &v24;
  __asm
  {
    vmovaps xmm6, xmmword ptr [r11-10h]
    vmovaps xmm7, xmmword ptr [r11-20h]
  }
}

/*
==============
std::sort<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>
==============
*/
void std::sort<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(const gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, const gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Last, SortKeyPartialPredicate _Pred)
{
  __int64 index; 
  const gsl::span<StreamSortKeyPacked,-1> *span; 
  __int64 v7; 
  const gsl::span<StreamSortKeyPacked,-1> *v8; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v9; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v10; 

  index = _First->index_;
  span = _First->span_;
  if ( _First->span_ && (index < 0 || index > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())", -2i64) )
    __debugbreak();
  v7 = _Last->index_;
  v8 = _Last->span_;
  if ( v8 && (v7 < 0 || v7 > v8->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
    __debugbreak();
  if ( v8 != span && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 236, ASSERT_TYPE_SANITY, "( span_ == rhs.span_ )", (const char *)&queryFormat, "span_ == rhs.span_") )
    __debugbreak();
  v9.span_ = v8;
  v9.index_ = v7;
  if ( v8 && (v7 < 0 || v7 > v8->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
    __debugbreak();
  v10.span_ = span;
  v10.index_ = index;
  if ( span && (index < 0 || index > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
    __debugbreak();
  std::_Sort_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(&v10, &v9, v7 - index, _Pred);
}

/*
==============
std::_Insertion_sort_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>
==============
*/
StreamSortKeyPacked *std::_Insertion_sort_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *const _Last, StreamGenericLoadingPredicate _Pred)
{
  StreamSortKeyPacked *v4; 
  StreamSortKeyPacked *v5; 
  size_t v6; 
  unsigned __int64 bits; 
  unsigned __int64 *v8; 
  __int64 v9; 
  StreamKey *StreamKeyAtIndex; 
  StreamKey *v11; 
  unsigned __int64 v12; 
  unsigned __int64 v13; 
  bool v14; 
  unsigned __int64 *i; 
  unsigned __int64 v16; 
  unsigned __int64 v17; 
  StreamKey *v18; 
  StreamKey *v19; 
  __int64 v20; 
  XPakEntryInfo *p_xpakInfo; 
  unsigned __int64 v22; 
  bool v23; 

  if ( _First == _Last )
    return _Last;
  v4 = _First + 1;
  v5 = _First + 1;
  if ( &_First[1] == _Last )
    return _Last;
  v6 = 8i64;
  do
  {
    bits = v5->bits;
    v8 = (unsigned __int64 *)v5;
    v9 = (v5->bits >> 44) & 1;
    if ( v9 == ((_First->bits & 0x100000000000i64) != 0) )
    {
      StreamKeyAtIndex = DB_GetStreamKeyAtIndex(bits >> 45);
      v11 = DB_GetStreamKeyAtIndex(_First->bits >> 45);
      v4 = _First + 1;
      v12 = (unsigned __int8)*((_QWORD *)&StreamKeyAtIndex->xpakInfo + 3);
      v13 = (unsigned __int8)*((_QWORD *)&v11->xpakInfo + 3);
      if ( v13 == v12 )
        v14 = StreamKeyAtIndex->xpakInfo.offset > v11->xpakInfo.offset;
      else
        v14 = v13 < v12;
    }
    else
    {
      v14 = (_First->bits & 0x100000000000i64) != 0;
    }
    if ( v14 )
    {
      memmove_0(v4, _First, v6);
      _First->bits = bits;
    }
    else
    {
      for ( i = (unsigned __int64 *)v5; ; v8 = i )
      {
        v16 = *--i;
        v17 = v16 >> 44;
        if ( v9 == (v17 & 1) )
        {
          v18 = DB_GetStreamKeyAtIndex(bits >> 45);
          v19 = DB_GetStreamKeyAtIndex(*i >> 45);
          v20 = *((_QWORD *)&v19->xpakInfo + 3);
          p_xpakInfo = &v19->xpakInfo;
          v22 = (unsigned __int8)*((_QWORD *)&v18->xpakInfo + 3);
          v23 = (unsigned __int8)v20 == v22 ? v18->xpakInfo.offset > p_xpakInfo->offset : (unsigned __int8)v20 < v22;
        }
        else
        {
          v23 = v17 & 1;
        }
        if ( !v23 )
          break;
        *v8 = *i;
      }
      *v8 = bits;
    }
    v4 = _First + 1;
    ++v5;
    v6 += 8i64;
  }
  while ( v5 != _Last );
  return _Last;
}

/*
==============
std::_Insertion_sort_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>
==============
*/
StreamSortKeyPacked *std::_Insertion_sort_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *const _Last, StreamImageLoadingPredicate _Pred)
{
  StreamSortKeyPacked *v4; 
  StreamSortKeyPacked *v5; 
  unsigned __int64 bits; 
  unsigned __int64 *v7; 
  unsigned int v8; 
  GfxImage *GfxImageAtIndex; 
  unsigned __int64 v10; 
  unsigned int v11; 
  char *v12; 
  __int64 v13; 
  GfxImage *v14; 
  unsigned __int64 v15; 
  char *v16; 
  unsigned __int64 v17; 
  bool v18; 
  __int64 v19; 
  bool v20; 
  bool v21; 
  bool v22; 
  unsigned __int64 *i; 
  unsigned __int64 v24; 
  unsigned __int64 v25; 
  unsigned int v26; 
  GfxImage *v27; 
  unsigned __int64 v28; 
  unsigned int v29; 
  char *v30; 
  __int64 v31; 
  GfxImage *v32; 
  unsigned __int64 v33; 
  char *v34; 
  unsigned __int64 v35; 
  bool v36; 
  __int64 v38; 
  __int64 v39; 
  StreamSortKeyPacked *__formal; 
  StreamSortKeyPacked *v41; 
  StreamSortKeyPacked *v42; 

  v41 = _Last;
  if ( _First == _Last )
    return _Last;
  v4 = _First + 1;
  if ( &_First[1] == _Last )
    return _Last;
  v5 = _First + 2;
  __formal = _First + 2;
  do
  {
    bits = v4->bits;
    v7 = (unsigned __int64 *)v4;
    if ( (((unsigned __int8)(_First->bits >> 44) ^ (unsigned __int8)(v4->bits >> 44)) & 1) != 0 )
    {
      v18 = (_First->bits & 0x100000000000i64) != 0;
    }
    else
    {
      v8 = (unsigned int)(bits >> 45) >> 2;
      if ( (unsigned int)(bits >> 45) >= 0x50000 )
      {
        LODWORD(v39) = 327680;
        LODWORD(v38) = bits >> 45;
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v38, v39) )
          __debugbreak();
      }
      GfxImageAtIndex = DB_GetGfxImageAtIndex(v8);
      v10 = _First->bits >> 45;
      v11 = (unsigned int)v10 >> 2;
      v12 = (char *)GfxImageAtIndex + 40 * ((bits >> 45) - 4 * v8);
      v13 = (unsigned int)v10 - 4 * ((unsigned int)v10 >> 2);
      if ( (unsigned int)v10 >= 0x50000 )
      {
        LODWORD(v39) = 327680;
        LODWORD(v38) = v10;
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v38, v39) )
          __debugbreak();
      }
      v14 = DB_GetGfxImageAtIndex(v11);
      v15 = (unsigned __int8)*((_QWORD *)v12 + 10);
      v16 = (char *)v14 + 40 * v13;
      v17 = (unsigned __int8)*((_QWORD *)v16 + 10);
      if ( v17 == v15 )
      {
        v19 = *((_QWORD *)v16 + 8);
        v22 = __OFSUB__(*((_QWORD *)v12 + 8), v19);
        v20 = *((_QWORD *)v12 + 8) == v19;
        v21 = *((_QWORD *)v12 + 8) - v19 < 0;
        v5 = __formal;
        v18 = !(v21 ^ v22 | v20);
      }
      else
      {
        v5 = __formal;
        v18 = v17 < v15;
      }
    }
    if ( v18 )
    {
      std::_Ptr_move_cat<StreamSortKeyPacked,StreamSortKeyPacked>(&__formal, &v42);
      memmove_0((char *)v5 - ((char *)v4 - (char *)_First), _First, (char *)v4 - (char *)_First);
      _First->bits = bits;
    }
    else
    {
      for ( i = (unsigned __int64 *)v4; ; v7 = i )
      {
        v24 = *--i;
        v25 = v24 >> 44;
        if ( (((unsigned __int8)v25 ^ (unsigned __int8)(bits >> 44)) & 1) != 0 )
        {
          v36 = v25 & 1;
        }
        else
        {
          v26 = (unsigned int)(bits >> 45) >> 2;
          if ( (unsigned int)(bits >> 45) >= 0x50000 )
          {
            LODWORD(v39) = 327680;
            LODWORD(v38) = bits >> 45;
            if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v38, v39) )
              __debugbreak();
          }
          v27 = DB_GetGfxImageAtIndex(v26);
          v28 = *i >> 45;
          v29 = (unsigned int)v28 >> 2;
          v30 = (char *)v27 + 40 * ((bits >> 45) - 4 * v26);
          v31 = (unsigned int)v28 - 4 * ((unsigned int)v28 >> 2);
          if ( (unsigned int)v28 >= 0x50000 )
          {
            LODWORD(v39) = 327680;
            LODWORD(v38) = v28;
            if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v38, v39) )
              __debugbreak();
          }
          v32 = DB_GetGfxImageAtIndex(v29);
          v33 = (unsigned __int8)*((_QWORD *)v30 + 10);
          v34 = (char *)v32 + 40 * v31;
          v35 = (unsigned __int8)*((_QWORD *)v34 + 10);
          v36 = v35 == v33 ? *((_QWORD *)v30 + 8) > *((_QWORD *)v34 + 8) : v35 < v33;
        }
        if ( !v36 )
          break;
        *v7 = *i;
      }
      v5 = __formal;
      *v7 = bits;
    }
    ++v5;
    ++v4;
    __formal = v5;
  }
  while ( v4 != v41 );
  return v41;
}

/*
==============
std::_Insertion_sort_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>
==============
*/
StreamSortKeyPacked *std::_Insertion_sort_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *const _Last, StreamMeshLoadingPredicate _Pred)
{
  StreamSortKeyPacked *v4; 
  StreamSortKeyPacked *v5; 
  size_t v6; 
  unsigned __int64 bits; 
  unsigned __int64 *v8; 
  __int64 v9; 
  XModelSurfs *XModelSurfsAtIndex; 
  XModelSurfs *v11; 
  unsigned __int64 v12; 
  unsigned __int64 v13; 
  bool v14; 
  unsigned __int64 *i; 
  unsigned __int64 v16; 
  unsigned __int64 v17; 
  XModelSurfs *v18; 
  XModelSurfs *v19; 
  __int64 v20; 
  XPakEntryInfo *p_xpakEntry; 
  unsigned __int64 v22; 
  bool v23; 

  if ( _First == _Last )
    return _Last;
  v4 = _First + 1;
  v5 = _First + 1;
  if ( &_First[1] == _Last )
    return _Last;
  v6 = 8i64;
  do
  {
    bits = v5->bits;
    v8 = (unsigned __int64 *)v5;
    v9 = (v5->bits >> 44) & 1;
    if ( v9 == ((_First->bits & 0x100000000000i64) != 0) )
    {
      XModelSurfsAtIndex = DB_GetXModelSurfsAtIndex(bits >> 45);
      v11 = DB_GetXModelSurfsAtIndex(_First->bits >> 45);
      v4 = _First + 1;
      v12 = (unsigned __int8)*((_QWORD *)&XModelSurfsAtIndex->xpakEntry + 3);
      v13 = (unsigned __int8)*((_QWORD *)&v11->xpakEntry + 3);
      if ( v13 == v12 )
        v14 = XModelSurfsAtIndex->xpakEntry.offset > v11->xpakEntry.offset;
      else
        v14 = v13 < v12;
    }
    else
    {
      v14 = (_First->bits & 0x100000000000i64) != 0;
    }
    if ( v14 )
    {
      memmove_0(v4, _First, v6);
      _First->bits = bits;
    }
    else
    {
      for ( i = (unsigned __int64 *)v5; ; v8 = i )
      {
        v16 = *--i;
        v17 = v16 >> 44;
        if ( v9 == (v17 & 1) )
        {
          v18 = DB_GetXModelSurfsAtIndex(bits >> 45);
          v19 = DB_GetXModelSurfsAtIndex(*i >> 45);
          v20 = *((_QWORD *)&v19->xpakEntry + 3);
          p_xpakEntry = &v19->xpakEntry;
          v22 = (unsigned __int8)*((_QWORD *)&v18->xpakEntry + 3);
          v23 = (unsigned __int8)v20 == v22 ? v18->xpakEntry.offset > p_xpakEntry->offset : (unsigned __int8)v20 < v22;
        }
        else
        {
          v23 = v17 & 1;
        }
        if ( !v23 )
          break;
        *v8 = *i;
      }
      *v8 = bits;
    }
    v4 = _First + 1;
    ++v5;
    v6 += 8i64;
  }
  while ( v5 != _Last );
  return _Last;
}

/*
==============
std::_Make_heap_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>
==============
*/
void std::_Make_heap_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, StreamGenericLoadingPredicate _Pred)
{
  signed __int64 v4; 
  signed __int64 v5; 
  signed __int64 v6; 
  __int64 v7; 
  unsigned __int64 bits; 
  signed __int64 v9; 
  __int64 v10; 
  __int64 v11; 
  unsigned __int64 v12; 
  StreamKey *StreamKeyAtIndex; 
  StreamKey *v14; 
  __int64 v15; 
  XPakEntryInfo *p_xpakInfo; 
  unsigned __int64 v17; 
  bool v18; 
  __int64 v19; 
  StreamKey *v20; 
  StreamKey *v21; 
  __int64 v22; 
  XPakEntryInfo *v23; 
  unsigned __int64 v24; 
  bool v25; 
  signed __int64 v26; 
  signed __int64 v27; 
  __int64 v28; 

  v4 = _Last - _First;
  v27 = v4;
  v5 = ((char *)_Last - (char *)_First) >> 4;
  if ( v5 > 0 )
  {
    v6 = v4 - 1;
    v7 = (v4 - 1) >> 1;
    v28 = v7;
    v26 = v4 - 1;
    do
    {
      bits = _First[--v5].bits;
      v9 = v5;
      v10 = v5;
      if ( v5 < v7 )
      {
        do
        {
          v11 = 2 * v10;
          v12 = _First[2 * v10 + 2].bits;
          if ( (((unsigned __int8)(_First[v11 + 1].bits >> 44) ^ (unsigned __int8)(v12 >> 44)) & 1) != 0 )
          {
            v18 = (_First[v11 + 1].bits & 0x100000000000i64) != 0;
          }
          else
          {
            StreamKeyAtIndex = DB_GetStreamKeyAtIndex(v12 >> 45);
            v14 = DB_GetStreamKeyAtIndex(_First[v11 + 1].bits >> 45);
            v15 = *((_QWORD *)&v14->xpakInfo + 3);
            p_xpakInfo = &v14->xpakInfo;
            v17 = (unsigned __int8)*((_QWORD *)&StreamKeyAtIndex->xpakInfo + 3);
            if ( (unsigned __int8)v15 == v17 )
              v18 = StreamKeyAtIndex->xpakInfo.offset > p_xpakInfo->offset;
            else
              v18 = (unsigned __int8)v15 < v17;
          }
          v10 = !v18 + v11 + 1;
          _First[v9] = _First[v10];
          v9 = v10;
        }
        while ( v10 < v7 );
        v4 = v27;
        v6 = v26;
      }
      if ( v10 == v7 && (v4 & 1) == 0 )
      {
        _First[v9] = _First[v4 - 1];
        v9 = v6;
      }
      v19 = (v9 - 1) >> 1;
      if ( v5 < v9 )
      {
        do
        {
          if ( ((_First[v19].bits >> 44) & 1) == ((bits & 0x100000000000i64) != 0) )
          {
            v20 = DB_GetStreamKeyAtIndex(_First[v19].bits >> 45);
            v21 = DB_GetStreamKeyAtIndex(bits >> 45);
            v22 = *((_QWORD *)&v21->xpakInfo + 3);
            v23 = &v21->xpakInfo;
            v24 = (unsigned __int8)*((_QWORD *)&v20->xpakInfo + 3);
            if ( (unsigned __int8)v22 == v24 )
              v25 = v20->xpakInfo.offset > v23->offset;
            else
              v25 = (unsigned __int8)v22 < v24;
          }
          else
          {
            v25 = (bits & 0x100000000000i64) != 0;
          }
          if ( !v25 )
            break;
          _First[v9] = _First[v19];
          v9 = v19;
          v19 = (v19 - 1) >> 1;
        }
        while ( v5 < v9 );
        v7 = v28;
      }
      v4 = v27;
      _First[v9].bits = bits;
      v6 = v27 - 1;
    }
    while ( v5 > 0 );
  }
}

/*
==============
std::_Make_heap_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>
==============
*/
void std::_Make_heap_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, StreamImageLoadingPredicate _Pred)
{
  signed __int64 v4; 
  __int64 v5; 
  __int64 v6; 
  __int64 v7; 
  unsigned __int64 bits; 
  __int64 v9; 
  __int64 v10; 
  __int64 v11; 
  unsigned __int64 v12; 
  unsigned __int64 v13; 
  unsigned __int64 v14; 
  unsigned int v15; 
  __int64 v16; 
  GfxImage *GfxImageAtIndex; 
  __int64 v18; 
  unsigned __int64 v19; 
  unsigned int v20; 
  const char **v21; 
  __int64 v22; 
  GfxImage *v23; 
  unsigned __int64 v24; 
  char *v25; 
  unsigned __int64 v26; 
  bool v27; 
  __int64 v28; 
  unsigned __int64 v29; 
  unsigned int v30; 
  __int64 v31; 
  GfxImage *v32; 
  __int64 v33; 
  unsigned int v34; 
  const char **v35; 
  GfxImage *v36; 
  unsigned __int64 v37; 
  char *v38; 
  unsigned __int64 v39; 
  bool v40; 
  __int64 v41; 
  __int64 v42; 
  signed __int64 v43; 
  __int64 v44; 
  signed __int64 v45; 

  v4 = _Last - _First;
  v45 = v4;
  v5 = v4 >> 1;
  if ( v4 >> 1 > 0 )
  {
    v6 = v4 - 1;
    v7 = (v4 - 1) >> 1;
    v44 = v7;
    v43 = v4 - 1;
    do
    {
      bits = _First[--v5].bits;
      v9 = v5;
      v10 = v5;
      if ( v5 < v7 )
      {
        do
        {
          v11 = 2 * v10;
          v12 = _First[2 * v10 + 2].bits;
          v13 = _First[2 * v10 + 1].bits >> 44;
          if ( (((unsigned __int8)v13 ^ (unsigned __int8)(v12 >> 44)) & 1) != 0 )
          {
            v27 = v13 & 1;
          }
          else
          {
            v14 = v12 >> 45;
            v15 = (unsigned int)v14 >> 2;
            v16 = (unsigned int)v14 - 4 * ((unsigned int)v14 >> 2);
            if ( (unsigned int)v14 >= 0x50000 )
            {
              LODWORD(v42) = 327680;
              LODWORD(v41) = v14;
              if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v41, v42) )
                __debugbreak();
            }
            GfxImageAtIndex = DB_GetGfxImageAtIndex(v15);
            v18 = 5 * v16;
            v19 = _First[v11 + 1].bits >> 45;
            v20 = (unsigned int)v19 >> 2;
            v21 = &GfxImageAtIndex->name + v18;
            v22 = (unsigned int)v19 - 4 * ((unsigned int)v19 >> 2);
            if ( (unsigned int)v19 >= 0x50000 )
            {
              LODWORD(v42) = 327680;
              LODWORD(v41) = v19;
              if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v41, v42) )
                __debugbreak();
            }
            v23 = DB_GetGfxImageAtIndex(v20);
            v24 = (unsigned __int8)v21[10];
            v25 = (char *)v23 + 40 * v22;
            v26 = (unsigned __int8)*((_QWORD *)v25 + 10);
            if ( v26 == v24 )
              v27 = (__int64)v21[8] > *((_QWORD *)v25 + 8);
            else
              v27 = v26 < v24;
          }
          v10 = !v27 + v11 + 1;
          _First[v9] = _First[v10];
          v9 = v10;
        }
        while ( v10 < v44 );
        v7 = v44;
        v4 = v45;
        v6 = v43;
      }
      if ( v10 == v7 && (v4 & 1) == 0 )
      {
        _First[v9] = _First[v4 - 1];
        v9 = v6;
      }
      if ( v5 < v9 )
      {
        do
        {
          v28 = (v9 - 1) >> 1;
          if ( (((unsigned __int8)(bits >> 44) ^ (unsigned __int8)(_First[v28].bits >> 44)) & 1) != 0 )
          {
            v40 = (bits & 0x100000000000i64) != 0;
          }
          else
          {
            v29 = _First[v28].bits >> 45;
            v30 = (unsigned int)v29 >> 2;
            v31 = (unsigned int)v29 - 4 * ((unsigned int)v29 >> 2);
            if ( (unsigned int)v29 >= 0x50000 )
            {
              LODWORD(v42) = 327680;
              LODWORD(v41) = _First[v28].bits >> 45;
              if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v41, v42) )
                __debugbreak();
            }
            v32 = DB_GetGfxImageAtIndex(v30);
            v33 = 5 * v31;
            v34 = (unsigned int)(bits >> 45) >> 2;
            v35 = &v32->name + v33;
            if ( (unsigned int)(bits >> 45) >= 0x50000 )
            {
              LODWORD(v42) = 327680;
              LODWORD(v41) = bits >> 45;
              if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v41, v42) )
                __debugbreak();
            }
            v36 = DB_GetGfxImageAtIndex(v34);
            v37 = (unsigned __int8)v35[10];
            v38 = (char *)v36 + 40 * ((bits >> 45) - 4 * v34);
            v39 = (unsigned __int8)*((_QWORD *)v38 + 10);
            if ( v39 == v37 )
              v40 = (__int64)v35[8] > *((_QWORD *)v38 + 8);
            else
              v40 = v39 < v37;
          }
          if ( !v40 )
            break;
          _First[v9] = _First[v28];
          v9 = (v9 - 1) >> 1;
        }
        while ( v5 < v28 );
      }
      v4 = v45;
      v7 = v44;
      _First[v9].bits = bits;
      v6 = v45 - 1;
    }
    while ( v5 > 0 );
  }
}

/*
==============
std::_Make_heap_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>
==============
*/
void std::_Make_heap_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, StreamMeshLoadingPredicate _Pred)
{
  signed __int64 v4; 
  signed __int64 v5; 
  signed __int64 v6; 
  __int64 v7; 
  unsigned __int64 bits; 
  signed __int64 v9; 
  __int64 v10; 
  __int64 v11; 
  unsigned __int64 v12; 
  XModelSurfs *XModelSurfsAtIndex; 
  XModelSurfs *v14; 
  __int64 v15; 
  XPakEntryInfo *p_xpakEntry; 
  unsigned __int64 v17; 
  bool v18; 
  __int64 v19; 
  XModelSurfs *v20; 
  XModelSurfs *v21; 
  __int64 v22; 
  XPakEntryInfo *v23; 
  unsigned __int64 v24; 
  bool v25; 
  signed __int64 v26; 
  signed __int64 v27; 
  __int64 v28; 

  v4 = _Last - _First;
  v27 = v4;
  v5 = ((char *)_Last - (char *)_First) >> 4;
  if ( v5 > 0 )
  {
    v6 = v4 - 1;
    v7 = (v4 - 1) >> 1;
    v28 = v7;
    v26 = v4 - 1;
    do
    {
      bits = _First[--v5].bits;
      v9 = v5;
      v10 = v5;
      if ( v5 < v7 )
      {
        do
        {
          v11 = 2 * v10;
          v12 = _First[2 * v10 + 2].bits;
          if ( (((unsigned __int8)(_First[v11 + 1].bits >> 44) ^ (unsigned __int8)(v12 >> 44)) & 1) != 0 )
          {
            v18 = (_First[v11 + 1].bits & 0x100000000000i64) != 0;
          }
          else
          {
            XModelSurfsAtIndex = DB_GetXModelSurfsAtIndex(v12 >> 45);
            v14 = DB_GetXModelSurfsAtIndex(_First[v11 + 1].bits >> 45);
            v15 = *((_QWORD *)&v14->xpakEntry + 3);
            p_xpakEntry = &v14->xpakEntry;
            v17 = (unsigned __int8)*((_QWORD *)&XModelSurfsAtIndex->xpakEntry + 3);
            if ( (unsigned __int8)v15 == v17 )
              v18 = XModelSurfsAtIndex->xpakEntry.offset > p_xpakEntry->offset;
            else
              v18 = (unsigned __int8)v15 < v17;
          }
          v10 = !v18 + v11 + 1;
          _First[v9] = _First[v10];
          v9 = v10;
        }
        while ( v10 < v7 );
        v4 = v27;
        v6 = v26;
      }
      if ( v10 == v7 && (v4 & 1) == 0 )
      {
        _First[v9] = _First[v4 - 1];
        v9 = v6;
      }
      v19 = (v9 - 1) >> 1;
      if ( v5 < v9 )
      {
        do
        {
          if ( ((_First[v19].bits >> 44) & 1) == ((bits & 0x100000000000i64) != 0) )
          {
            v20 = DB_GetXModelSurfsAtIndex(_First[v19].bits >> 45);
            v21 = DB_GetXModelSurfsAtIndex(bits >> 45);
            v22 = *((_QWORD *)&v21->xpakEntry + 3);
            v23 = &v21->xpakEntry;
            v24 = (unsigned __int8)*((_QWORD *)&v20->xpakEntry + 3);
            if ( (unsigned __int8)v22 == v24 )
              v25 = v20->xpakEntry.offset > v23->offset;
            else
              v25 = (unsigned __int8)v22 < v24;
          }
          else
          {
            v25 = (bits & 0x100000000000i64) != 0;
          }
          if ( !v25 )
            break;
          _First[v9] = _First[v19];
          v9 = v19;
          v19 = (v19 - 1) >> 1;
        }
        while ( v5 < v9 );
        v7 = v28;
      }
      v4 = v27;
      _First[v9].bits = bits;
      v6 = v27 - 1;
    }
    while ( v5 > 0 );
  }
}

/*
==============
std::_Med3_unchecked<StreamSortKeyPacked *,SortKeyPartialPredicate>
==============
*/
void std::_Med3_unchecked<StreamSortKeyPacked *,SortKeyPartialPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Mid, StreamSortKeyPacked *_Last, SortKeyPartialPredicate _Pred)
{
  unsigned __int64 bits; 
  unsigned __int64 v6; 
  unsigned __int64 v8; 
  unsigned __int64 v9; 

  bits = _Mid->bits;
  v6 = _First->bits;
  if ( (_Mid->bits & 0xFFFFFFFFFFFi64) > (v6 & 0xFFFFFFFFFFFi64) )
  {
    _Mid->bits = v6;
    _First->bits = bits;
    bits = _Mid->bits;
  }
  v8 = _Last->bits;
  v9 = _Last->bits & 0xFFFFFFFFFFFi64;
  if ( v9 > (bits & 0xFFFFFFFFFFFi64) )
  {
    _Last->bits = bits;
    _Mid->bits = v8;
    if ( v9 > (_First->bits & 0xFFFFFFFFFFFi64) )
    {
      _Mid->0 = _First->0;
      _First->bits = v8;
    }
  }
}

/*
==============
std::_Med3_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>
==============
*/
void std::_Med3_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Mid, StreamSortKeyPacked *_Last, StreamGenericLoadingPredicate _Pred)
{
  StreamKey *StreamKeyAtIndex; 
  StreamKey *v8; 
  unsigned __int64 v9; 
  unsigned __int64 v10; 
  bool v11; 
  unsigned __int64 bits; 
  StreamKey *v13; 
  StreamKey *v14; 
  unsigned __int64 v15; 
  unsigned __int64 v16; 
  bool v17; 
  unsigned __int64 v18; 
  unsigned __int64 v19; 
  StreamGenericLoadingPredicate v20; 

  if ( (((unsigned __int8)(_First->bits >> 44) ^ (unsigned __int8)(_Mid->bits >> 44)) & 1) != 0 )
  {
    v11 = (_First->bits & 0x100000000000i64) != 0;
  }
  else
  {
    StreamKeyAtIndex = DB_GetStreamKeyAtIndex(_Mid->bits >> 45);
    v8 = DB_GetStreamKeyAtIndex(_First->bits >> 45);
    v9 = (unsigned __int8)*((_QWORD *)&StreamKeyAtIndex->xpakInfo + 3);
    v10 = (unsigned __int8)*((_QWORD *)&v8->xpakInfo + 3);
    if ( v10 == v9 )
      v11 = StreamKeyAtIndex->xpakInfo.offset > v8->xpakInfo.offset;
    else
      v11 = v10 < v9;
  }
  if ( v11 )
  {
    bits = _Mid->bits;
    _Mid->0 = _First->0;
    _First->bits = bits;
  }
  if ( (((unsigned __int8)(_Mid->bits >> 44) ^ (unsigned __int8)(_Last->bits >> 44)) & 1) != 0 )
  {
    v17 = (_Mid->bits & 0x100000000000i64) != 0;
  }
  else
  {
    v13 = DB_GetStreamKeyAtIndex(_Last->bits >> 45);
    v14 = DB_GetStreamKeyAtIndex(_Mid->bits >> 45);
    v15 = (unsigned __int8)*((_QWORD *)&v13->xpakInfo + 3);
    v16 = (unsigned __int8)*((_QWORD *)&v14->xpakInfo + 3);
    if ( v16 == v15 )
      v17 = v13->xpakInfo.offset > v14->xpakInfo.offset;
    else
      v17 = v16 < v15;
  }
  if ( v17 )
  {
    v18 = _Last->bits;
    _Last->0 = _Mid->0;
    _Mid->bits = v18;
    if ( StreamGenericLoadingPredicate::operator()(&v20, _Mid, _First) )
    {
      v19 = _Mid->bits;
      _Mid->0 = _First->0;
      _First->bits = v19;
    }
  }
}

/*
==============
std::_Med3_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>
==============
*/
void std::_Med3_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Mid, StreamSortKeyPacked *_Last, StreamImageLoadingPredicate _Pred)
{
  unsigned __int64 bits; 
  unsigned __int64 v8; 
  unsigned __int64 v9; 
  StreamImageLoadingPredicate v10; 

  if ( StreamImageLoadingPredicate::operator()(&v10, _Mid, _First) )
  {
    bits = _Mid->bits;
    _Mid->0 = _First->0;
    _First->bits = bits;
  }
  if ( StreamImageLoadingPredicate::operator()(&v10, _Last, _Mid) )
  {
    v8 = _Last->bits;
    _Last->0 = _Mid->0;
    _Mid->bits = v8;
    if ( StreamImageLoadingPredicate::operator()(&v10, _Mid, _First) )
    {
      v9 = _Mid->bits;
      _Mid->0 = _First->0;
      _First->bits = v9;
    }
  }
}

/*
==============
std::_Med3_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>
==============
*/
void std::_Med3_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Mid, StreamSortKeyPacked *_Last, StreamMeshLoadingPredicate _Pred)
{
  XModelSurfs *XModelSurfsAtIndex; 
  XModelSurfs *v8; 
  unsigned __int64 v9; 
  unsigned __int64 v10; 
  bool v11; 
  unsigned __int64 bits; 
  XModelSurfs *v13; 
  XModelSurfs *v14; 
  unsigned __int64 v15; 
  unsigned __int64 v16; 
  bool v17; 
  unsigned __int64 v18; 
  unsigned __int64 v19; 
  StreamMeshLoadingPredicate v20; 

  if ( (((unsigned __int8)(_First->bits >> 44) ^ (unsigned __int8)(_Mid->bits >> 44)) & 1) != 0 )
  {
    v11 = (_First->bits & 0x100000000000i64) != 0;
  }
  else
  {
    XModelSurfsAtIndex = DB_GetXModelSurfsAtIndex(_Mid->bits >> 45);
    v8 = DB_GetXModelSurfsAtIndex(_First->bits >> 45);
    v9 = (unsigned __int8)*((_QWORD *)&XModelSurfsAtIndex->xpakEntry + 3);
    v10 = (unsigned __int8)*((_QWORD *)&v8->xpakEntry + 3);
    if ( v10 == v9 )
      v11 = XModelSurfsAtIndex->xpakEntry.offset > v8->xpakEntry.offset;
    else
      v11 = v10 < v9;
  }
  if ( v11 )
  {
    bits = _Mid->bits;
    _Mid->0 = _First->0;
    _First->bits = bits;
  }
  if ( (((unsigned __int8)(_Mid->bits >> 44) ^ (unsigned __int8)(_Last->bits >> 44)) & 1) != 0 )
  {
    v17 = (_Mid->bits & 0x100000000000i64) != 0;
  }
  else
  {
    v13 = DB_GetXModelSurfsAtIndex(_Last->bits >> 45);
    v14 = DB_GetXModelSurfsAtIndex(_Mid->bits >> 45);
    v15 = (unsigned __int8)*((_QWORD *)&v13->xpakEntry + 3);
    v16 = (unsigned __int8)*((_QWORD *)&v14->xpakEntry + 3);
    if ( v16 == v15 )
      v17 = v13->xpakEntry.offset > v14->xpakEntry.offset;
    else
      v17 = v16 < v15;
  }
  if ( v17 )
  {
    v18 = _Last->bits;
    _Last->0 = _Mid->0;
    _Mid->bits = v18;
    if ( StreamMeshLoadingPredicate::operator()(&v20, _Mid, _First) )
    {
      v19 = _Mid->bits;
      _Mid->0 = _First->0;
      _First->bits = v19;
    }
  }
}

/*
==============
std::_Partition_by_median_guess_unchecked<StreamSortKeyPacked *,SortKeyPartialPredicate>
==============
*/
std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> *std::_Partition_by_median_guess_unchecked<StreamSortKeyPacked *,SortKeyPartialPredicate>(std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> *result, StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, SortKeyPartialPredicate _Pred)
{
  StreamSortKeyPacked *v4; 
  std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> *v5; 
  StreamSortKeyPacked *v9; 
  signed __int64 v10; 
  __int64 v11; 
  unsigned __int64 v12; 
  __int64 v13; 
  StreamSortKeyPacked *v14; 
  StreamSortKeyPacked *v15; 
  StreamSortKeyPacked *v16; 
  unsigned __int64 *v17; 
  StreamSortKeyPacked *v18; 
  unsigned __int64 v19; 
  unsigned __int64 v20; 
  unsigned __int64 v21; 
  unsigned __int64 v22; 
  StreamSortKeyPacked *v23; 
  StreamSortKeyPacked *v24; 
  unsigned __int64 v25; 
  unsigned __int64 v26; 
  unsigned __int64 bits; 
  bool v28; 
  StreamSortKeyPacked *v29; 
  unsigned __int64 v30; 
  unsigned __int64 v31; 
  StreamSortKeyPacked v32; 
  StreamSortKeyPacked v33; 
  StreamSortKeyPacked v34; 
  unsigned __int64 v35; 
  unsigned __int64 v36; 
  StreamSortKeyPacked v37; 
  unsigned __int64 v38; 
  std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> *v39; 

  v4 = _Last - 1;
  v5 = result;
  v9 = &_First[((char *)_Last - (char *)_First) >> 4];
  v10 = &_Last[-1] - _First;
  if ( v10 <= 40 )
  {
    std::_Med3_unchecked<StreamSortKeyPacked *,SortKeyPartialPredicate>(_First, v9, v4, _Pred);
  }
  else
  {
    v11 = (v10 + 1) >> 3;
    v12 = 16 * v11;
    v13 = 8 * v11;
    v14 = &_First[v11];
    std::_Med3_unchecked<StreamSortKeyPacked *,SortKeyPartialPredicate>(_First, v14, &_First[2 * v11], _Pred);
    std::_Med3_unchecked<StreamSortKeyPacked *,SortKeyPartialPredicate>(&v9[v13 / 0xFFFFFFFFFFFFFFF8ui64], v9, &v9[(unsigned __int64)v13 / 8], _Pred);
    v15 = &v4[v13 / 0xFFFFFFFFFFFFFFF8ui64];
    std::_Med3_unchecked<StreamSortKeyPacked *,SortKeyPartialPredicate>(&_Last[v12 / 0xFFFFFFFFFFFFFFF8ui64 - 1], v15, _Last - 1, _Pred);
    std::_Med3_unchecked<StreamSortKeyPacked *,SortKeyPartialPredicate>(v14, v9, v15, _Pred);
    v5 = result;
  }
  v16 = v9 + 1;
  v17 = (unsigned __int64 *)v9;
  if ( _First < v9 )
  {
    v18 = v9;
    do
    {
      v17 = (unsigned __int64 *)v18;
      v19 = v9[-1].bits & 0xFFFFFFFFFFFi64;
      v20 = v9->bits & 0xFFFFFFFFFFFi64;
      if ( v19 > v20 )
        break;
      if ( v19 < v20 )
        break;
      v9 = v18 - 1;
      v18 = v9;
      v17 = (unsigned __int64 *)v9;
    }
    while ( _First < v9 );
  }
  if ( v16 < _Last )
  {
    v21 = *v17 & 0xFFFFFFFFFFFi64;
    do
    {
      v22 = v16->bits & 0xFFFFFFFFFFFi64;
      if ( v22 > v21 )
        break;
      if ( v22 < v21 )
        break;
      ++v16;
    }
    while ( v16 < _Last );
  }
  v23 = v16;
  v24 = v9;
  while ( 1 )
  {
    while ( 1 )
    {
      for ( ; v23 < _Last; ++v23 )
      {
        v25 = v23->bits & 0xFFFFFFFFFFFi64;
        v26 = v9->bits & 0xFFFFFFFFFFFi64;
        if ( v26 <= v25 )
        {
          if ( v26 < v25 )
            break;
          if ( v16 != v23 )
          {
            bits = v16->bits;
            v16->0 = v23->0;
            v23->bits = bits;
          }
          ++v16;
        }
      }
      v28 = v24 == _First;
      if ( v24 > _First )
      {
        v29 = v24 - 1;
        do
        {
          v30 = v29->bits & 0xFFFFFFFFFFFi64;
          v31 = v9->bits & 0xFFFFFFFFFFFi64;
          if ( v30 <= v31 )
          {
            if ( v30 < v31 )
              break;
            if ( --v9 != v29 )
            {
              v32.0 = ($FD3C46332B1196AF8F5C8C522E71774D)v9->bits;
              v9->0 = v29->0;
              v29->0 = v32.0;
            }
          }
          --v24;
          --v29;
        }
        while ( _First < v24 );
        v28 = v24 == _First;
      }
      if ( v28 )
        break;
      --v24;
      if ( v23 == _Last )
      {
        if ( v24 != --v9 )
        {
          v35 = v24->bits;
          v24->0 = v9->0;
          v9->bits = v35;
        }
        v36 = v16[-1].bits;
        --v16;
        v37.0 = ($FD3C46332B1196AF8F5C8C522E71774D)v9->bits;
        v9->bits = v36;
        v16->0 = v37.0;
      }
      else
      {
        v38 = v23->bits;
        v23->0 = v24->0;
        ++v23;
        v24->bits = v38;
      }
    }
    if ( v23 == _Last )
      break;
    if ( v16 != v23 )
    {
      v33.0 = ($FD3C46332B1196AF8F5C8C522E71774D)v9->bits;
      v9->0 = v16->0;
      v16->0 = v33.0;
    }
    ++v16;
    v34.0 = ($FD3C46332B1196AF8F5C8C522E71774D)v9->bits;
    v9->0 = v23->0;
    ++v9;
    v23->0 = v34.0;
    ++v23;
  }
  v5->first = v9;
  v39 = v5;
  v5->second = v16;
  return v39;
}

/*
==============
std::_Partition_by_median_guess_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>
==============
*/
std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> *std::_Partition_by_median_guess_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>(std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> *result, StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, StreamGenericLoadingPredicate _Pred)
{
  StreamSortKeyPacked *v6; 
  signed __int64 v7; 
  __int64 v8; 
  unsigned __int64 v9; 
  unsigned __int64 v10; 
  StreamSortKeyPacked *v11; 
  StreamSortKeyPacked *v12; 
  StreamSortKeyPacked *v13; 
  StreamSortKeyPacked *v14; 
  unsigned __int64 *v15; 
  StreamKey *StreamKeyAtIndex; 
  StreamKey *v17; 
  unsigned __int64 v18; 
  unsigned __int64 v19; 
  bool v20; 
  StreamKey *v21; 
  StreamKey *v22; 
  unsigned __int64 v23; 
  unsigned __int64 v24; 
  bool v25; 
  StreamKey *v26; 
  StreamKey *v27; 
  unsigned __int64 v28; 
  unsigned __int64 v29; 
  bool v30; 
  StreamKey *v31; 
  StreamKey *v32; 
  unsigned __int64 v33; 
  unsigned __int64 v34; 
  bool v35; 
  StreamSortKeyPacked *i; 
  StreamKey *v37; 
  StreamKey *v38; 
  unsigned __int64 v39; 
  unsigned __int64 v40; 
  bool v41; 
  StreamKey *v42; 
  StreamKey *v43; 
  unsigned __int64 v44; 
  unsigned __int64 v45; 
  bool v46; 
  unsigned __int64 bits; 
  bool v48; 
  StreamSortKeyPacked *v49; 
  StreamKey *v50; 
  StreamKey *v51; 
  unsigned __int64 v52; 
  unsigned __int64 v53; 
  bool v54; 
  StreamKey *v55; 
  StreamKey *v56; 
  unsigned __int64 v57; 
  unsigned __int64 v58; 
  bool v59; 
  StreamSortKeyPacked v60; 
  StreamSortKeyPacked v61; 
  StreamSortKeyPacked v62; 
  unsigned __int64 v63; 
  unsigned __int64 v64; 
  StreamSortKeyPacked v65; 
  unsigned __int64 v66; 
  std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> *v67; 

  v6 = &_First[((char *)_Last - (char *)_First) >> 4];
  v7 = &_Last[-1] - _First;
  if ( v7 <= 40 )
  {
    v12 = _First;
    std::_Med3_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>(_First, v6, _Last - 1, _Pred);
  }
  else
  {
    v8 = (v7 + 1) >> 3;
    v9 = 16 * v8;
    v10 = 8 * v8;
    v11 = &_First[v8];
    std::_Med3_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>(_First, v11, &_First[2 * v8], _Pred);
    std::_Med3_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>(&v6[v10 / 0xFFFFFFFFFFFFFFF8ui64], v6, &v6[v10 / 8], _Pred);
    std::_Med3_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>(&_Last[v9 / 0xFFFFFFFFFFFFFFF8ui64 - 1], &_Last[v10 / 0xFFFFFFFFFFFFFFF8ui64 - 1], _Last - 1, _Pred);
    std::_Med3_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>(v11, v6, &_Last[v10 / 0xFFFFFFFFFFFFFFF8ui64 - 1], _Pred);
    v12 = _First;
  }
  v13 = v6 + 1;
  v14 = v6;
  if ( v12 < v6 )
  {
    v15 = (unsigned __int64 *)v6;
    do
    {
      if ( (((unsigned __int8)(*v15 >> 44) ^ (unsigned __int8)(v6[-1].bits >> 44)) & 1) != 0 )
      {
        v20 = (*v15 & 0x100000000000i64) != 0;
      }
      else
      {
        StreamKeyAtIndex = DB_GetStreamKeyAtIndex(v6[-1].bits >> 45);
        v17 = DB_GetStreamKeyAtIndex(*v15 >> 45);
        v18 = (unsigned __int8)*((_QWORD *)&StreamKeyAtIndex->xpakInfo + 3);
        v19 = (unsigned __int8)*((_QWORD *)&v17->xpakInfo + 3);
        if ( v19 == v18 )
          v20 = StreamKeyAtIndex->xpakInfo.offset > v17->xpakInfo.offset;
        else
          v20 = v19 < v18;
      }
      v14 = (StreamSortKeyPacked *)v15;
      if ( v20 )
        break;
      if ( (((unsigned __int8)(v6[-1].bits >> 44) ^ (unsigned __int8)(*v15 >> 44)) & 1) != 0 )
      {
        v25 = (v6[-1].bits & 0x100000000000i64) != 0;
      }
      else
      {
        v21 = DB_GetStreamKeyAtIndex(*v15 >> 45);
        v22 = DB_GetStreamKeyAtIndex(v6[-1].bits >> 45);
        v23 = (unsigned __int8)*((_QWORD *)&v21->xpakInfo + 3);
        v24 = (unsigned __int8)*((_QWORD *)&v22->xpakInfo + 3);
        v25 = v24 == v23 ? v21->xpakInfo.offset > v22->xpakInfo.offset : v24 < v23;
      }
      if ( v25 )
        break;
      v6 = (StreamSortKeyPacked *)(v15 - 1);
      v15 = (unsigned __int64 *)v6;
      v14 = v6;
    }
    while ( v12 < v6 );
  }
  for ( ; v13 < _Last; ++v13 )
  {
    if ( (((unsigned __int8)(v14->bits >> 44) ^ (unsigned __int8)(v13->bits >> 44)) & 1) != 0 )
    {
      v30 = (v14->bits & 0x100000000000i64) != 0;
    }
    else
    {
      v26 = DB_GetStreamKeyAtIndex(v13->bits >> 45);
      v27 = DB_GetStreamKeyAtIndex(v14->bits >> 45);
      v28 = (unsigned __int8)*((_QWORD *)&v26->xpakInfo + 3);
      v29 = (unsigned __int8)*((_QWORD *)&v27->xpakInfo + 3);
      if ( v29 == v28 )
        v30 = v26->xpakInfo.offset > v27->xpakInfo.offset;
      else
        v30 = v29 < v28;
    }
    if ( v30 )
      break;
    if ( (((unsigned __int8)(v13->bits >> 44) ^ (unsigned __int8)(v14->bits >> 44)) & 1) != 0 )
    {
      v35 = (v13->bits & 0x100000000000i64) != 0;
    }
    else
    {
      v31 = DB_GetStreamKeyAtIndex(v14->bits >> 45);
      v32 = DB_GetStreamKeyAtIndex(v13->bits >> 45);
      v33 = (unsigned __int8)*((_QWORD *)&v31->xpakInfo + 3);
      v34 = (unsigned __int8)*((_QWORD *)&v32->xpakInfo + 3);
      v35 = v34 == v33 ? v31->xpakInfo.offset > v32->xpakInfo.offset : v34 < v33;
    }
    if ( v35 )
      break;
  }
  while ( 2 )
  {
    while ( 2 )
    {
      for ( i = v13; i < _Last; ++i )
      {
        if ( (((unsigned __int8)(i->bits >> 44) ^ (unsigned __int8)(v6->bits >> 44)) & 1) != 0 )
        {
          v41 = (i->bits & 0x100000000000i64) != 0;
        }
        else
        {
          v37 = DB_GetStreamKeyAtIndex(v6->bits >> 45);
          v38 = DB_GetStreamKeyAtIndex(i->bits >> 45);
          v39 = (unsigned __int8)*((_QWORD *)&v37->xpakInfo + 3);
          v40 = (unsigned __int8)*((_QWORD *)&v38->xpakInfo + 3);
          if ( v40 == v39 )
            v41 = v37->xpakInfo.offset > v38->xpakInfo.offset;
          else
            v41 = v40 < v39;
        }
        if ( !v41 )
        {
          if ( (((unsigned __int8)(v6->bits >> 44) ^ (unsigned __int8)(i->bits >> 44)) & 1) != 0 )
          {
            v46 = (v6->bits & 0x100000000000i64) != 0;
          }
          else
          {
            v42 = DB_GetStreamKeyAtIndex(i->bits >> 45);
            v43 = DB_GetStreamKeyAtIndex(v6->bits >> 45);
            v44 = (unsigned __int8)*((_QWORD *)&v42->xpakInfo + 3);
            v45 = (unsigned __int8)*((_QWORD *)&v43->xpakInfo + 3);
            if ( v45 == v44 )
              v46 = v42->xpakInfo.offset > v43->xpakInfo.offset;
            else
              v46 = v45 < v44;
          }
          if ( v46 )
            break;
          if ( v13 != i )
          {
            bits = v13->bits;
            v13->0 = i->0;
            i->bits = bits;
          }
          ++v13;
        }
      }
      v48 = v14 == v12;
      if ( v14 <= v12 )
        goto LABEL_69;
      v49 = v14 - 1;
      while ( 1 )
      {
        if ( (((unsigned __int8)(v6->bits >> 44) ^ (unsigned __int8)(v49->bits >> 44)) & 1) != 0 )
        {
          v54 = (v6->bits & 0x100000000000i64) != 0;
        }
        else
        {
          v50 = DB_GetStreamKeyAtIndex(v49->bits >> 45);
          v51 = DB_GetStreamKeyAtIndex(v6->bits >> 45);
          v52 = (unsigned __int8)*((_QWORD *)&v50->xpakInfo + 3);
          v53 = (unsigned __int8)*((_QWORD *)&v51->xpakInfo + 3);
          v54 = v53 == v52 ? v50->xpakInfo.offset > v51->xpakInfo.offset : v53 < v52;
        }
        if ( !v54 )
          break;
LABEL_67:
        --v14;
        --v49;
        if ( v12 >= v14 )
          goto LABEL_68;
      }
      if ( (((unsigned __int8)(v49->bits >> 44) ^ (unsigned __int8)(v6->bits >> 44)) & 1) != 0 )
      {
        v59 = (v49->bits & 0x100000000000i64) != 0;
      }
      else
      {
        v55 = DB_GetStreamKeyAtIndex(v6->bits >> 45);
        v56 = DB_GetStreamKeyAtIndex(v49->bits >> 45);
        v57 = (unsigned __int8)*((_QWORD *)&v55->xpakInfo + 3);
        v58 = (unsigned __int8)*((_QWORD *)&v56->xpakInfo + 3);
        if ( v58 == v57 )
          v59 = v55->xpakInfo.offset > v56->xpakInfo.offset;
        else
          v59 = v58 < v57;
      }
      if ( !v59 )
      {
        if ( --v6 != v49 )
        {
          v60.0 = ($FD3C46332B1196AF8F5C8C522E71774D)v6->bits;
          v6->0 = v49->0;
          v49->0 = v60.0;
        }
        goto LABEL_67;
      }
LABEL_68:
      v48 = v14 == v12;
LABEL_69:
      if ( !v48 )
      {
        --v14;
        if ( i == _Last )
        {
          if ( v14 != --v6 )
          {
            v63 = v14->bits;
            v14->0 = v6->0;
            v6->bits = v63;
          }
          v64 = v13[-1].bits;
          --v13;
          v65.0 = ($FD3C46332B1196AF8F5C8C522E71774D)v6->bits;
          v6->bits = v64;
          v13->0 = v65.0;
        }
        else
        {
          v66 = i->bits;
          i->0 = v14->0;
          ++i;
          v14->bits = v66;
        }
        continue;
      }
      break;
    }
    if ( i != _Last )
    {
      if ( v13 != i )
      {
        v61.0 = ($FD3C46332B1196AF8F5C8C522E71774D)v6->bits;
        v6->0 = v13->0;
        v13->0 = v61.0;
      }
      ++v13;
      v62.0 = ($FD3C46332B1196AF8F5C8C522E71774D)v6->bits;
      v6->0 = i->0;
      ++v6;
      i->0 = v62.0;
      ++i;
      continue;
    }
    break;
  }
  v67 = result;
  result->first = v6;
  result->second = v13;
  return v67;
}

/*
==============
std::_Partition_by_median_guess_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>
==============
*/
std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> *std::_Partition_by_median_guess_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>(std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> *result, StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, StreamImageLoadingPredicate _Pred)
{
  StreamSortKeyPacked *v4; 
  StreamImageLoadingPredicate v5; 
  StreamSortKeyPacked *v7; 
  StreamSortKeyPacked *v8; 
  signed __int64 v9; 
  __int64 v10; 
  __int64 v11; 
  __int64 v12; 
  StreamSortKeyPacked *v13; 
  StreamSortKeyPacked *v14; 
  StreamSortKeyPacked *v15; 
  unsigned __int64 *v16; 
  unsigned __int64 v17; 
  unsigned int v18; 
  __int64 v19; 
  GfxImage *GfxImageAtIndex; 
  unsigned __int64 v21; 
  unsigned int v22; 
  char *v23; 
  __int64 v24; 
  GfxImage *v25; 
  unsigned __int64 v26; 
  char *v27; 
  unsigned __int64 v28; 
  bool v29; 
  unsigned __int64 v30; 
  unsigned int v31; 
  __int64 v32; 
  GfxImage *v33; 
  unsigned __int64 v34; 
  unsigned int v35; 
  char *v36; 
  __int64 v37; 
  GfxImage *v38; 
  unsigned __int64 v39; 
  char *v40; 
  unsigned __int64 v41; 
  bool v42; 
  StreamSortKeyPacked *v43; 
  unsigned __int64 v44; 
  unsigned int v45; 
  __int64 v46; 
  GfxImage *v47; 
  unsigned __int64 v48; 
  unsigned int v49; 
  char *v50; 
  __int64 v51; 
  GfxImage *v52; 
  unsigned __int64 v53; 
  char *v54; 
  unsigned __int64 v55; 
  bool v56; 
  unsigned __int64 v57; 
  unsigned int v58; 
  __int64 v59; 
  GfxImage *v60; 
  unsigned __int64 v61; 
  unsigned int v62; 
  char *v63; 
  __int64 v64; 
  GfxImage *v65; 
  unsigned __int64 v66; 
  char *v67; 
  unsigned __int64 v68; 
  bool v69; 
  StreamSortKeyPacked *v70; 
  StreamSortKeyPacked *v71; 
  unsigned __int64 v72; 
  unsigned int v73; 
  __int64 v74; 
  GfxImage *v75; 
  unsigned __int64 v76; 
  unsigned int v77; 
  char *v78; 
  __int64 v79; 
  GfxImage *v80; 
  unsigned __int64 v81; 
  char *v82; 
  unsigned __int64 v83; 
  bool v84; 
  unsigned __int64 v85; 
  unsigned int v86; 
  __int64 v87; 
  GfxImage *v88; 
  unsigned __int64 v89; 
  unsigned int v90; 
  char *v91; 
  __int64 v92; 
  GfxImage *v93; 
  unsigned __int64 v94; 
  char *v95; 
  unsigned __int64 v96; 
  bool v97; 
  unsigned __int64 bits; 
  bool v99; 
  StreamSortKeyPacked *v100; 
  unsigned __int64 v101; 
  unsigned int v102; 
  __int64 v103; 
  GfxImage *v104; 
  unsigned __int64 v105; 
  unsigned int v106; 
  char *v107; 
  __int64 v108; 
  GfxImage *v109; 
  unsigned __int64 v110; 
  char *v111; 
  unsigned __int64 v112; 
  bool v113; 
  unsigned __int64 v114; 
  unsigned int v115; 
  __int64 v116; 
  GfxImage *v117; 
  unsigned __int64 v118; 
  unsigned int v119; 
  char *v120; 
  __int64 v121; 
  GfxImage *v122; 
  unsigned __int64 v123; 
  char *v124; 
  unsigned __int64 v125; 
  bool v126; 
  StreamSortKeyPacked v127; 
  StreamSortKeyPacked v128; 
  StreamSortKeyPacked v129; 
  unsigned __int64 v130; 
  unsigned __int64 v131; 
  StreamSortKeyPacked v132; 
  unsigned __int64 v133; 
  std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> *v134; 
  __int64 v135; 
  __int64 v136; 
  StreamSortKeyPacked *v137; 
  StreamSortKeyPacked *v138; 
  StreamSortKeyPacked *v139; 

  v4 = _Last - 1;
  v5 = _Pred;
  v7 = _First;
  v8 = &_First[((char *)_Last - (char *)_First) >> 4];
  v9 = &_Last[-1] - _First;
  if ( v9 <= 40 )
  {
    v14 = _Last - 1;
  }
  else
  {
    v10 = (v9 + 1) >> 3;
    v11 = 16 * v10;
    v12 = 8 * v10;
    v13 = &_First[v10];
    std::_Med3_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>(_First, v13, &_First[2 * v10], _Pred);
    std::_Med3_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>(&v8[v12 / 0xFFFFFFFFFFFFFFF8ui64], v8, &v8[(unsigned __int64)v12 / 8], v5);
    std::_Med3_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>(&v4[v11 / 0xFFFFFFFFFFFFFFF8ui64], &v4[v12 / 0xFFFFFFFFFFFFFFF8ui64], v4, v5);
    _Pred = v5;
    v14 = &v4[v12 / 0xFFFFFFFFFFFFFFF8ui64];
    v7 = v13;
  }
  std::_Med3_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>(v7, v8, v14, _Pred);
  v15 = v8 + 1;
  v137 = v8 + 1;
  if ( _First < v8 )
  {
    v16 = (unsigned __int64 *)v8;
    do
    {
      if ( (((unsigned __int8)(*v16 >> 44) ^ (unsigned __int8)(v8[-1].bits >> 44)) & 1) != 0 )
      {
        v29 = (*v16 & 0x100000000000i64) != 0;
      }
      else
      {
        v17 = v8[-1].bits >> 45;
        v18 = (unsigned int)v17 >> 2;
        v19 = (unsigned int)v17 - 4 * ((unsigned int)v17 >> 2);
        if ( (unsigned int)v17 >= 0x50000 )
        {
          LODWORD(v136) = 327680;
          LODWORD(v135) = v8[-1].bits >> 45;
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v135, v136) )
            __debugbreak();
        }
        GfxImageAtIndex = DB_GetGfxImageAtIndex(v18);
        v21 = *v16 >> 45;
        v22 = (unsigned int)v21 >> 2;
        v23 = (char *)GfxImageAtIndex + 40 * v19;
        v24 = (unsigned int)v21 - 4 * ((unsigned int)v21 >> 2);
        if ( (unsigned int)v21 >= 0x50000 )
        {
          LODWORD(v136) = 327680;
          LODWORD(v135) = v21;
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v135, v136) )
            __debugbreak();
        }
        v25 = DB_GetGfxImageAtIndex(v22);
        v26 = (unsigned __int8)*((_QWORD *)v23 + 10);
        v27 = (char *)v25 + 40 * v24;
        v28 = (unsigned __int8)*((_QWORD *)v27 + 10);
        if ( v28 == v26 )
          v29 = *((_QWORD *)v23 + 8) > *((_QWORD *)v27 + 8);
        else
          v29 = v28 < v26;
      }
      if ( v29 )
        break;
      if ( (((unsigned __int8)(v8[-1].bits >> 44) ^ (unsigned __int8)(v8->bits >> 44)) & 1) != 0 )
      {
        v42 = (v8[-1].bits & 0x100000000000i64) != 0;
      }
      else
      {
        v30 = v8->bits >> 45;
        v31 = (unsigned int)v30 >> 2;
        v32 = (unsigned int)v30 - 4 * ((unsigned int)v30 >> 2);
        if ( (unsigned int)v30 >= 0x50000 )
        {
          LODWORD(v136) = 327680;
          LODWORD(v135) = v8->bits >> 45;
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v135, v136) )
            __debugbreak();
        }
        v33 = DB_GetGfxImageAtIndex(v31);
        v34 = v8[-1].bits >> 45;
        v35 = (unsigned int)v34 >> 2;
        v36 = (char *)v33 + 40 * v32;
        v37 = (unsigned int)v34 - 4 * ((unsigned int)v34 >> 2);
        if ( (unsigned int)v34 >= 0x50000 )
        {
          LODWORD(v136) = 327680;
          LODWORD(v135) = v34;
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v135, v136) )
            __debugbreak();
        }
        v38 = DB_GetGfxImageAtIndex(v35);
        v39 = (unsigned __int8)*((_QWORD *)v36 + 10);
        v40 = (char *)v38 + 40 * v37;
        v41 = (unsigned __int8)*((_QWORD *)v40 + 10);
        v42 = v41 == v39 ? *((_QWORD *)v36 + 8) > *((_QWORD *)v40 + 8) : v41 < v39;
      }
      if ( v42 )
        break;
      v16 = (unsigned __int64 *)--v8;
    }
    while ( _First < v8 );
    v15 = v137;
  }
  v43 = _Last;
  if ( v15 < _Last )
  {
    do
    {
      if ( (((unsigned __int8)(v8->bits >> 44) ^ (unsigned __int8)(v15->bits >> 44)) & 1) != 0 )
      {
        v56 = (v8->bits & 0x100000000000i64) != 0;
      }
      else
      {
        v44 = v15->bits >> 45;
        v45 = (unsigned int)v44 >> 2;
        v46 = (unsigned int)v44 - 4 * ((unsigned int)v44 >> 2);
        if ( (unsigned int)v44 >= 0x50000 )
        {
          LODWORD(v136) = 327680;
          LODWORD(v135) = v15->bits >> 45;
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v135, v136) )
            __debugbreak();
        }
        v47 = DB_GetGfxImageAtIndex(v45);
        v48 = v8->bits >> 45;
        v49 = (unsigned int)v48 >> 2;
        v50 = (char *)v47 + 40 * v46;
        v51 = (unsigned int)v48 - 4 * ((unsigned int)v48 >> 2);
        if ( (unsigned int)v48 >= 0x50000 )
        {
          LODWORD(v136) = 327680;
          LODWORD(v135) = v48;
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v135, v136) )
            __debugbreak();
        }
        v52 = DB_GetGfxImageAtIndex(v49);
        v53 = (unsigned __int8)*((_QWORD *)v50 + 10);
        v54 = (char *)v52 + 40 * v51;
        v55 = (unsigned __int8)*((_QWORD *)v54 + 10);
        if ( v55 == v53 )
          v56 = *((_QWORD *)v50 + 8) > *((_QWORD *)v54 + 8);
        else
          v56 = v55 < v53;
      }
      if ( v56 )
        break;
      if ( (((unsigned __int8)(v15->bits >> 44) ^ (unsigned __int8)(v8->bits >> 44)) & 1) != 0 )
      {
        v69 = (v15->bits & 0x100000000000i64) != 0;
      }
      else
      {
        v57 = v8->bits >> 45;
        v58 = (unsigned int)v57 >> 2;
        v59 = (unsigned int)v57 - 4 * ((unsigned int)v57 >> 2);
        if ( (unsigned int)v57 >= 0x50000 )
        {
          LODWORD(v136) = 327680;
          LODWORD(v135) = v8->bits >> 45;
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v135, v136) )
            __debugbreak();
        }
        v60 = DB_GetGfxImageAtIndex(v58);
        v61 = v15->bits >> 45;
        v62 = (unsigned int)v61 >> 2;
        v63 = (char *)v60 + 40 * v59;
        v64 = (unsigned int)v61 - 4 * ((unsigned int)v61 >> 2);
        if ( (unsigned int)v61 >= 0x50000 )
        {
          LODWORD(v136) = 327680;
          LODWORD(v135) = v61;
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v135, v136) )
            __debugbreak();
        }
        v65 = DB_GetGfxImageAtIndex(v62);
        v66 = (unsigned __int8)*((_QWORD *)v63 + 10);
        v67 = (char *)v65 + 40 * v64;
        v68 = (unsigned __int8)*((_QWORD *)v67 + 10);
        v69 = v68 == v66 ? *((_QWORD *)v63 + 8) > *((_QWORD *)v67 + 8) : v68 < v66;
      }
      if ( v69 )
        break;
      ++v15;
    }
    while ( v15 < _Last );
    v137 = v15;
  }
  v70 = v15;
  v138 = v8;
  v71 = v8;
  while ( 2 )
  {
    while ( 2 )
    {
      v139 = v70;
LABEL_61:
      if ( v70 < v43 )
      {
        while ( 1 )
        {
          if ( (((unsigned __int8)(v70->bits >> 44) ^ (unsigned __int8)(v8->bits >> 44)) & 1) != 0 )
          {
            v84 = (v70->bits & 0x100000000000i64) != 0;
          }
          else
          {
            v72 = v8->bits >> 45;
            v73 = (unsigned int)v72 >> 2;
            v74 = (unsigned int)v72 - 4 * ((unsigned int)v72 >> 2);
            if ( (unsigned int)v72 >= 0x50000 )
            {
              LODWORD(v136) = 327680;
              LODWORD(v135) = v8->bits >> 45;
              if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v135, v136) )
                __debugbreak();
            }
            v75 = DB_GetGfxImageAtIndex(v73);
            v76 = v70->bits >> 45;
            v77 = (unsigned int)v76 >> 2;
            v78 = (char *)v75 + 40 * v74;
            v79 = (unsigned int)v76 - 4 * ((unsigned int)v76 >> 2);
            if ( (unsigned int)v76 >= 0x50000 )
            {
              LODWORD(v136) = 327680;
              LODWORD(v135) = v76;
              if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v135, v136) )
                __debugbreak();
            }
            v80 = DB_GetGfxImageAtIndex(v77);
            v81 = (unsigned __int8)*((_QWORD *)v78 + 10);
            v82 = (char *)v80 + 40 * v79;
            v83 = (unsigned __int8)*((_QWORD *)v82 + 10);
            if ( v83 == v81 )
              v84 = *((_QWORD *)v78 + 8) > *((_QWORD *)v82 + 8);
            else
              v84 = v83 < v81;
          }
          if ( !v84 )
          {
            if ( (((unsigned __int8)(v8->bits >> 44) ^ (unsigned __int8)(v70->bits >> 44)) & 1) != 0 )
            {
              v97 = (v8->bits & 0x100000000000i64) != 0;
            }
            else
            {
              v85 = v70->bits >> 45;
              v86 = (unsigned int)v85 >> 2;
              v87 = (unsigned int)v85 - 4 * ((unsigned int)v85 >> 2);
              if ( (unsigned int)v85 >= 0x50000 )
              {
                LODWORD(v136) = 327680;
                LODWORD(v135) = v70->bits >> 45;
                if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v135, v136) )
                  __debugbreak();
              }
              v88 = DB_GetGfxImageAtIndex(v86);
              v89 = v8->bits >> 45;
              v90 = (unsigned int)v89 >> 2;
              v91 = (char *)v88 + 40 * v87;
              v92 = (unsigned int)v89 - 4 * ((unsigned int)v89 >> 2);
              if ( (unsigned int)v89 >= 0x50000 )
              {
                LODWORD(v136) = 327680;
                LODWORD(v135) = v89;
                if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v135, v136) )
                  __debugbreak();
              }
              v93 = DB_GetGfxImageAtIndex(v90);
              v94 = (unsigned __int8)*((_QWORD *)v91 + 10);
              v95 = (char *)v93 + 40 * v92;
              v96 = (unsigned __int8)*((_QWORD *)v95 + 10);
              if ( v96 == v94 )
                v97 = *((_QWORD *)v91 + 8) > *((_QWORD *)v95 + 8);
              else
                v97 = v96 < v94;
            }
            if ( v97 )
            {
LABEL_90:
              v71 = v138;
              v137 = v15;
              v139 = v70;
              break;
            }
            if ( v15 != v70 )
            {
              bits = v15->bits;
              v15->0 = v70->0;
              v70->bits = bits;
            }
            ++v15;
          }
          if ( ++v70 >= v43 )
            goto LABEL_90;
        }
      }
      v99 = v71 == _First;
      if ( v71 <= _First )
        goto LABEL_121;
      v100 = v71 - 1;
      do
      {
        if ( (((unsigned __int8)(v8->bits >> 44) ^ (unsigned __int8)(v100->bits >> 44)) & 1) != 0 )
        {
          v113 = (v8->bits & 0x100000000000i64) != 0;
        }
        else
        {
          v101 = v100->bits >> 45;
          v102 = (unsigned int)v101 >> 2;
          v103 = (unsigned int)v101 - 4 * ((unsigned int)v101 >> 2);
          if ( (unsigned int)v101 >= 0x50000 )
          {
            LODWORD(v136) = 327680;
            LODWORD(v135) = v100->bits >> 45;
            if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v135, v136) )
              __debugbreak();
          }
          v104 = DB_GetGfxImageAtIndex(v102);
          v105 = v8->bits >> 45;
          v106 = (unsigned int)v105 >> 2;
          v107 = (char *)v104 + 40 * v103;
          v108 = (unsigned int)v105 - 4 * ((unsigned int)v105 >> 2);
          if ( (unsigned int)v105 >= 0x50000 )
          {
            LODWORD(v136) = 327680;
            LODWORD(v135) = v105;
            if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v135, v136) )
              __debugbreak();
          }
          v109 = DB_GetGfxImageAtIndex(v106);
          v110 = (unsigned __int8)*((_QWORD *)v107 + 10);
          v111 = (char *)v109 + 40 * v108;
          v112 = (unsigned __int8)*((_QWORD *)v111 + 10);
          if ( v112 == v110 )
            v113 = *((_QWORD *)v107 + 8) > *((_QWORD *)v111 + 8);
          else
            v113 = v112 < v110;
        }
        if ( v113 )
          goto LABEL_119;
        if ( (((unsigned __int8)(v100->bits >> 44) ^ (unsigned __int8)(v8->bits >> 44)) & 1) != 0 )
        {
          v126 = (v100->bits & 0x100000000000i64) != 0;
        }
        else
        {
          v114 = v8->bits >> 45;
          v115 = (unsigned int)v114 >> 2;
          v116 = (unsigned int)v114 - 4 * ((unsigned int)v114 >> 2);
          if ( (unsigned int)v114 >= 0x50000 )
          {
            LODWORD(v136) = 327680;
            LODWORD(v135) = v8->bits >> 45;
            if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v135, v136) )
              __debugbreak();
          }
          v117 = DB_GetGfxImageAtIndex(v115);
          v118 = v100->bits >> 45;
          v119 = (unsigned int)v118 >> 2;
          v120 = (char *)v117 + 40 * v116;
          v121 = (unsigned int)v118 - 4 * ((unsigned int)v118 >> 2);
          if ( (unsigned int)v118 >= 0x50000 )
          {
            LODWORD(v136) = 327680;
            LODWORD(v135) = v118;
            if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v135, v136) )
              __debugbreak();
          }
          v122 = DB_GetGfxImageAtIndex(v119);
          v123 = (unsigned __int8)*((_QWORD *)v120 + 10);
          v124 = (char *)v122 + 40 * v121;
          v125 = (unsigned __int8)*((_QWORD *)v124 + 10);
          v126 = v125 == v123 ? *((_QWORD *)v120 + 8) > *((_QWORD *)v124 + 8) : v125 < v123;
        }
        if ( v126 )
          break;
        if ( --v8 != v100 )
        {
          v127.0 = ($FD3C46332B1196AF8F5C8C522E71774D)v8->bits;
          v8->0 = v100->0;
          v100->0 = v127.0;
        }
LABEL_119:
        --v71;
        --v100;
      }
      while ( _First < v71 );
      v70 = v139;
      v99 = v71 == _First;
      v15 = v137;
      v43 = _Last;
      v138 = v71;
LABEL_121:
      if ( !v99 )
      {
        v138 = --v71;
        if ( v70 != v43 )
        {
          v133 = v70->bits;
          v70->0 = v71->0;
          ++v70;
          v71->bits = v133;
          v138 = v71;
          continue;
        }
        if ( v71 != --v8 )
        {
          v130 = v71->bits;
          v71->0 = v8->0;
          v8->bits = v130;
        }
        v131 = v15[-1].bits;
        --v15;
        v132.0 = ($FD3C46332B1196AF8F5C8C522E71774D)v8->bits;
        v8->bits = v131;
        v137 = v15;
        v15->0 = v132.0;
        goto LABEL_61;
      }
      break;
    }
    if ( v70 != v43 )
    {
      if ( v15 != v70 )
      {
        v128.0 = ($FD3C46332B1196AF8F5C8C522E71774D)v8->bits;
        v8->0 = v15->0;
        v15->0 = v128.0;
      }
      ++v15;
      v129.0 = ($FD3C46332B1196AF8F5C8C522E71774D)v8->bits;
      v8->0 = v70->0;
      ++v8;
      v70->0 = v129.0;
      ++v70;
      v137 = v15;
      continue;
    }
    break;
  }
  v134 = result;
  result->first = v8;
  result->second = v15;
  return v134;
}

/*
==============
std::_Partition_by_median_guess_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>
==============
*/
std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> *std::_Partition_by_median_guess_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>(std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> *result, StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, StreamMeshLoadingPredicate _Pred)
{
  StreamSortKeyPacked *v6; 
  signed __int64 v7; 
  __int64 v8; 
  unsigned __int64 v9; 
  unsigned __int64 v10; 
  StreamSortKeyPacked *v11; 
  StreamSortKeyPacked *v12; 
  StreamSortKeyPacked *v13; 
  StreamSortKeyPacked *v14; 
  unsigned __int64 *v15; 
  XModelSurfs *XModelSurfsAtIndex; 
  XModelSurfs *v17; 
  unsigned __int64 v18; 
  unsigned __int64 v19; 
  bool v20; 
  XModelSurfs *v21; 
  XModelSurfs *v22; 
  unsigned __int64 v23; 
  unsigned __int64 v24; 
  bool v25; 
  XModelSurfs *v26; 
  XModelSurfs *v27; 
  unsigned __int64 v28; 
  unsigned __int64 v29; 
  bool v30; 
  XModelSurfs *v31; 
  XModelSurfs *v32; 
  unsigned __int64 v33; 
  unsigned __int64 v34; 
  bool v35; 
  StreamSortKeyPacked *i; 
  XModelSurfs *v37; 
  XModelSurfs *v38; 
  unsigned __int64 v39; 
  unsigned __int64 v40; 
  bool v41; 
  XModelSurfs *v42; 
  XModelSurfs *v43; 
  unsigned __int64 v44; 
  unsigned __int64 v45; 
  bool v46; 
  unsigned __int64 bits; 
  bool v48; 
  StreamSortKeyPacked *v49; 
  XModelSurfs *v50; 
  XModelSurfs *v51; 
  unsigned __int64 v52; 
  unsigned __int64 v53; 
  bool v54; 
  XModelSurfs *v55; 
  XModelSurfs *v56; 
  unsigned __int64 v57; 
  unsigned __int64 v58; 
  bool v59; 
  StreamSortKeyPacked v60; 
  StreamSortKeyPacked v61; 
  StreamSortKeyPacked v62; 
  unsigned __int64 v63; 
  unsigned __int64 v64; 
  StreamSortKeyPacked v65; 
  unsigned __int64 v66; 
  std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> *v67; 

  v6 = &_First[((char *)_Last - (char *)_First) >> 4];
  v7 = &_Last[-1] - _First;
  if ( v7 <= 40 )
  {
    v12 = _First;
    std::_Med3_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>(_First, v6, _Last - 1, _Pred);
  }
  else
  {
    v8 = (v7 + 1) >> 3;
    v9 = 16 * v8;
    v10 = 8 * v8;
    v11 = &_First[v8];
    std::_Med3_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>(_First, v11, &_First[2 * v8], _Pred);
    std::_Med3_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>(&v6[v10 / 0xFFFFFFFFFFFFFFF8ui64], v6, &v6[v10 / 8], _Pred);
    std::_Med3_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>(&_Last[v9 / 0xFFFFFFFFFFFFFFF8ui64 - 1], &_Last[v10 / 0xFFFFFFFFFFFFFFF8ui64 - 1], _Last - 1, _Pred);
    std::_Med3_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>(v11, v6, &_Last[v10 / 0xFFFFFFFFFFFFFFF8ui64 - 1], _Pred);
    v12 = _First;
  }
  v13 = v6 + 1;
  v14 = v6;
  if ( v12 < v6 )
  {
    v15 = (unsigned __int64 *)v6;
    do
    {
      if ( (((unsigned __int8)(*v15 >> 44) ^ (unsigned __int8)(v6[-1].bits >> 44)) & 1) != 0 )
      {
        v20 = (*v15 & 0x100000000000i64) != 0;
      }
      else
      {
        XModelSurfsAtIndex = DB_GetXModelSurfsAtIndex(v6[-1].bits >> 45);
        v17 = DB_GetXModelSurfsAtIndex(*v15 >> 45);
        v18 = (unsigned __int8)*((_QWORD *)&XModelSurfsAtIndex->xpakEntry + 3);
        v19 = (unsigned __int8)*((_QWORD *)&v17->xpakEntry + 3);
        if ( v19 == v18 )
          v20 = XModelSurfsAtIndex->xpakEntry.offset > v17->xpakEntry.offset;
        else
          v20 = v19 < v18;
      }
      v14 = (StreamSortKeyPacked *)v15;
      if ( v20 )
        break;
      if ( (((unsigned __int8)(v6[-1].bits >> 44) ^ (unsigned __int8)(*v15 >> 44)) & 1) != 0 )
      {
        v25 = (v6[-1].bits & 0x100000000000i64) != 0;
      }
      else
      {
        v21 = DB_GetXModelSurfsAtIndex(*v15 >> 45);
        v22 = DB_GetXModelSurfsAtIndex(v6[-1].bits >> 45);
        v23 = (unsigned __int8)*((_QWORD *)&v21->xpakEntry + 3);
        v24 = (unsigned __int8)*((_QWORD *)&v22->xpakEntry + 3);
        v25 = v24 == v23 ? v21->xpakEntry.offset > v22->xpakEntry.offset : v24 < v23;
      }
      if ( v25 )
        break;
      v6 = (StreamSortKeyPacked *)(v15 - 1);
      v15 = (unsigned __int64 *)v6;
      v14 = v6;
    }
    while ( v12 < v6 );
  }
  for ( ; v13 < _Last; ++v13 )
  {
    if ( (((unsigned __int8)(v14->bits >> 44) ^ (unsigned __int8)(v13->bits >> 44)) & 1) != 0 )
    {
      v30 = (v14->bits & 0x100000000000i64) != 0;
    }
    else
    {
      v26 = DB_GetXModelSurfsAtIndex(v13->bits >> 45);
      v27 = DB_GetXModelSurfsAtIndex(v14->bits >> 45);
      v28 = (unsigned __int8)*((_QWORD *)&v26->xpakEntry + 3);
      v29 = (unsigned __int8)*((_QWORD *)&v27->xpakEntry + 3);
      if ( v29 == v28 )
        v30 = v26->xpakEntry.offset > v27->xpakEntry.offset;
      else
        v30 = v29 < v28;
    }
    if ( v30 )
      break;
    if ( (((unsigned __int8)(v13->bits >> 44) ^ (unsigned __int8)(v14->bits >> 44)) & 1) != 0 )
    {
      v35 = (v13->bits & 0x100000000000i64) != 0;
    }
    else
    {
      v31 = DB_GetXModelSurfsAtIndex(v14->bits >> 45);
      v32 = DB_GetXModelSurfsAtIndex(v13->bits >> 45);
      v33 = (unsigned __int8)*((_QWORD *)&v31->xpakEntry + 3);
      v34 = (unsigned __int8)*((_QWORD *)&v32->xpakEntry + 3);
      v35 = v34 == v33 ? v31->xpakEntry.offset > v32->xpakEntry.offset : v34 < v33;
    }
    if ( v35 )
      break;
  }
  while ( 2 )
  {
    while ( 2 )
    {
      for ( i = v13; i < _Last; ++i )
      {
        if ( (((unsigned __int8)(i->bits >> 44) ^ (unsigned __int8)(v6->bits >> 44)) & 1) != 0 )
        {
          v41 = (i->bits & 0x100000000000i64) != 0;
        }
        else
        {
          v37 = DB_GetXModelSurfsAtIndex(v6->bits >> 45);
          v38 = DB_GetXModelSurfsAtIndex(i->bits >> 45);
          v39 = (unsigned __int8)*((_QWORD *)&v37->xpakEntry + 3);
          v40 = (unsigned __int8)*((_QWORD *)&v38->xpakEntry + 3);
          if ( v40 == v39 )
            v41 = v37->xpakEntry.offset > v38->xpakEntry.offset;
          else
            v41 = v40 < v39;
        }
        if ( !v41 )
        {
          if ( (((unsigned __int8)(v6->bits >> 44) ^ (unsigned __int8)(i->bits >> 44)) & 1) != 0 )
          {
            v46 = (v6->bits & 0x100000000000i64) != 0;
          }
          else
          {
            v42 = DB_GetXModelSurfsAtIndex(i->bits >> 45);
            v43 = DB_GetXModelSurfsAtIndex(v6->bits >> 45);
            v44 = (unsigned __int8)*((_QWORD *)&v42->xpakEntry + 3);
            v45 = (unsigned __int8)*((_QWORD *)&v43->xpakEntry + 3);
            if ( v45 == v44 )
              v46 = v42->xpakEntry.offset > v43->xpakEntry.offset;
            else
              v46 = v45 < v44;
          }
          if ( v46 )
            break;
          if ( v13 != i )
          {
            bits = v13->bits;
            v13->0 = i->0;
            i->bits = bits;
          }
          ++v13;
        }
      }
      v48 = v14 == v12;
      if ( v14 <= v12 )
        goto LABEL_69;
      v49 = v14 - 1;
      while ( 1 )
      {
        if ( (((unsigned __int8)(v6->bits >> 44) ^ (unsigned __int8)(v49->bits >> 44)) & 1) != 0 )
        {
          v54 = (v6->bits & 0x100000000000i64) != 0;
        }
        else
        {
          v50 = DB_GetXModelSurfsAtIndex(v49->bits >> 45);
          v51 = DB_GetXModelSurfsAtIndex(v6->bits >> 45);
          v52 = (unsigned __int8)*((_QWORD *)&v50->xpakEntry + 3);
          v53 = (unsigned __int8)*((_QWORD *)&v51->xpakEntry + 3);
          v54 = v53 == v52 ? v50->xpakEntry.offset > v51->xpakEntry.offset : v53 < v52;
        }
        if ( !v54 )
          break;
LABEL_67:
        --v14;
        --v49;
        if ( v12 >= v14 )
          goto LABEL_68;
      }
      if ( (((unsigned __int8)(v49->bits >> 44) ^ (unsigned __int8)(v6->bits >> 44)) & 1) != 0 )
      {
        v59 = (v49->bits & 0x100000000000i64) != 0;
      }
      else
      {
        v55 = DB_GetXModelSurfsAtIndex(v6->bits >> 45);
        v56 = DB_GetXModelSurfsAtIndex(v49->bits >> 45);
        v57 = (unsigned __int8)*((_QWORD *)&v55->xpakEntry + 3);
        v58 = (unsigned __int8)*((_QWORD *)&v56->xpakEntry + 3);
        if ( v58 == v57 )
          v59 = v55->xpakEntry.offset > v56->xpakEntry.offset;
        else
          v59 = v58 < v57;
      }
      if ( !v59 )
      {
        if ( --v6 != v49 )
        {
          v60.0 = ($FD3C46332B1196AF8F5C8C522E71774D)v6->bits;
          v6->0 = v49->0;
          v49->0 = v60.0;
        }
        goto LABEL_67;
      }
LABEL_68:
      v48 = v14 == v12;
LABEL_69:
      if ( !v48 )
      {
        --v14;
        if ( i == _Last )
        {
          if ( v14 != --v6 )
          {
            v63 = v14->bits;
            v14->0 = v6->0;
            v6->bits = v63;
          }
          v64 = v13[-1].bits;
          --v13;
          v65.0 = ($FD3C46332B1196AF8F5C8C522E71774D)v6->bits;
          v6->bits = v64;
          v13->0 = v65.0;
        }
        else
        {
          v66 = i->bits;
          i->0 = v14->0;
          ++i;
          v14->bits = v66;
        }
        continue;
      }
      break;
    }
    if ( i != _Last )
    {
      if ( v13 != i )
      {
        v61.0 = ($FD3C46332B1196AF8F5C8C522E71774D)v6->bits;
        v6->0 = v13->0;
        v13->0 = v61.0;
      }
      ++v13;
      v62.0 = ($FD3C46332B1196AF8F5C8C522E71774D)v6->bits;
      v6->0 = i->0;
      ++v6;
      i->0 = v62.0;
      ++i;
      continue;
    }
    break;
  }
  v67 = result;
  result->first = v6;
  result->second = v13;
  return v67;
}

/*
==============
std::_Pop_heap_hole_by_index<StreamSortKeyPacked *,StreamSortKeyPacked,SortKeyPartialPredicate>
==============
*/
void std::_Pop_heap_hole_by_index<StreamSortKeyPacked *,StreamSortKeyPacked,SortKeyPartialPredicate>(StreamSortKeyPacked *_First, __int64 _Hole, __int64 _Bottom, StreamSortKeyPacked *_Val)
{
  __int64 v6; 
  __int64 v7; 
  __int64 i; 
  __int64 v9; 

  v6 = (_Bottom - 1) >> 1;
  v7 = _Hole;
  for ( i = _Hole; i < v6; _Hole = i )
  {
    i = 2 * i + 2i64 - ((_First[2 * i + 1].bits & 0xFFFFFFFFFFFi64) < (_First[2 * i + 2].bits & 0xFFFFFFFFFFFi64));
    _First[_Hole] = _First[i];
  }
  if ( i == v6 && (_Bottom & 1) == 0 )
  {
    _First[_Hole] = _First[_Bottom - 1];
    _Hole = _Bottom - 1;
  }
  if ( v7 < _Hole )
  {
    while ( 1 )
    {
      v9 = (_Hole - 1) >> 1;
      if ( (_First[v9].bits & 0xFFFFFFFFFFFi64) <= (_Val->bits & 0xFFFFFFFFFFFi64) )
        break;
      _First[_Hole] = _First[v9];
      _Hole = (_Hole - 1) >> 1;
      if ( v7 >= v9 )
      {
        _First[v9] = (StreamSortKeyPacked)_Val->0;
        return;
      }
    }
  }
  _First[_Hole] = (StreamSortKeyPacked)_Val->0;
}

/*
==============
std::_Pop_heap_hole_by_index<StreamSortKeyPacked *,StreamSortKeyPacked,StreamGenericLoadingPredicate>
==============
*/
void std::_Pop_heap_hole_by_index<StreamSortKeyPacked *,StreamSortKeyPacked,StreamGenericLoadingPredicate>(StreamSortKeyPacked *_First, __int64 _Hole, __int64 _Bottom, StreamSortKeyPacked *_Val)
{
  __int64 v5; 
  __int64 v6; 
  __int64 v8; 
  __int64 v11; 
  __int64 v12; 
  unsigned __int64 bits; 
  StreamKey *StreamKeyAtIndex; 
  StreamKey *v15; 
  unsigned __int64 v16; 
  unsigned __int64 v17; 
  bool v18; 
  __int64 v19; 
  StreamKey *v20; 
  StreamKey *v21; 
  __int64 v22; 
  XPakEntryInfo *p_xpakInfo; 
  unsigned __int64 v24; 
  bool v25; 

  v5 = _Hole;
  v6 = _Hole;
  v8 = _Bottom - 1;
  v11 = (_Bottom - 1) >> 1;
  if ( v5 < v11 )
  {
    do
    {
      v12 = 2 * v5;
      bits = _First[2 * v5 + 2].bits;
      if ( (((unsigned __int8)(_First[v12 + 1].bits >> 44) ^ (unsigned __int8)(bits >> 44)) & 1) != 0 )
      {
        v18 = (_First[v12 + 1].bits & 0x100000000000i64) != 0;
      }
      else
      {
        StreamKeyAtIndex = DB_GetStreamKeyAtIndex(bits >> 45);
        v15 = DB_GetStreamKeyAtIndex(_First[v12 + 1].bits >> 45);
        v16 = (unsigned __int8)*((_QWORD *)&StreamKeyAtIndex->xpakInfo + 3);
        v17 = (unsigned __int8)*((_QWORD *)&v15->xpakInfo + 3);
        if ( v17 == v16 )
          v18 = StreamKeyAtIndex->xpakInfo.offset > v15->xpakInfo.offset;
        else
          v18 = v17 < v16;
      }
      v5 = !v18 + v12 + 1;
      _First[v6] = _First[v5];
      v6 = v5;
    }
    while ( v5 < v11 );
    v8 = _Bottom - 1;
  }
  if ( v5 == v11 && (_Bottom & 1) == 0 )
  {
    _First[v6] = _First[_Bottom - 1];
    v6 = v8;
  }
  if ( _Hole < v6 )
  {
    while ( 1 )
    {
      v19 = (v6 - 1) >> 1;
      if ( (((unsigned __int8)(_Val->bits >> 44) ^ (unsigned __int8)(_First[v19].bits >> 44)) & 1) != 0 )
      {
        v25 = (_Val->bits & 0x100000000000i64) != 0;
      }
      else
      {
        v20 = DB_GetStreamKeyAtIndex(_First[v19].bits >> 45);
        v21 = DB_GetStreamKeyAtIndex(_Val->bits >> 45);
        v22 = *((_QWORD *)&v21->xpakInfo + 3);
        p_xpakInfo = &v21->xpakInfo;
        v24 = (unsigned __int8)*((_QWORD *)&v20->xpakInfo + 3);
        v25 = (unsigned __int8)v22 == v24 ? v20->xpakInfo.offset > p_xpakInfo->offset : (unsigned __int8)v22 < v24;
      }
      if ( !v25 )
        break;
      _First[v6] = _First[v19];
      v6 = (v6 - 1) >> 1;
      if ( _Hole >= v19 )
      {
        _First[v19] = (StreamSortKeyPacked)_Val->0;
        return;
      }
    }
  }
  _First[v6] = (StreamSortKeyPacked)_Val->0;
}

/*
==============
std::_Pop_heap_hole_by_index<StreamSortKeyPacked *,StreamSortKeyPacked,StreamImageLoadingPredicate>
==============
*/
void std::_Pop_heap_hole_by_index<StreamSortKeyPacked *,StreamSortKeyPacked,StreamImageLoadingPredicate>(StreamSortKeyPacked *_First, __int64 _Hole, __int64 _Bottom, StreamSortKeyPacked *_Val)
{
  __int64 v4; 
  StreamSortKeyPacked *v6; 
  __int64 v7; 
  __int64 v8; 
  __int64 v9; 
  __int64 v10; 
  __int64 v11; 
  __int64 v12; 
  unsigned __int64 v13; 
  unsigned int v14; 
  __int64 v15; 
  GfxImage *GfxImageAtIndex; 
  __int64 v17; 
  unsigned __int64 v18; 
  unsigned int v19; 
  const char **v20; 
  __int64 v21; 
  GfxImage *v22; 
  unsigned __int64 v23; 
  char *v24; 
  unsigned __int64 v25; 
  bool v26; 
  __int64 v27; 
  unsigned __int64 v28; 
  unsigned int v29; 
  __int64 v30; 
  GfxImage *v31; 
  unsigned __int64 v32; 
  unsigned int v33; 
  char *v34; 
  __int64 v35; 
  GfxImage *v36; 
  unsigned __int64 v37; 
  char *v38; 
  unsigned __int64 v39; 
  bool v40; 
  __int64 v41; 
  __int64 v42; 
  __int64 v43; 
  __int64 v45; 

  v4 = _Bottom;
  v6 = _Val;
  v7 = _Hole;
  v8 = _Hole;
  v9 = v4 - 1;
  v10 = _Hole;
  v45 = v4 - 1;
  v11 = (v4 - 1) >> 1;
  if ( _Hole < v11 )
  {
    do
    {
      v12 = 2 * v10;
      if ( (((unsigned __int8)(_First[2 * v10 + 1].bits >> 44) ^ (unsigned __int8)(_First[2 * v10 + 2].bits >> 44)) & 1) != 0 )
      {
        v26 = (_First[2 * v10 + 1].bits & 0x100000000000i64) != 0;
      }
      else
      {
        v13 = _First[2 * v10 + 2].bits >> 45;
        v14 = (unsigned int)v13 >> 2;
        v15 = (unsigned int)v13 - 4 * ((unsigned int)v13 >> 2);
        if ( (unsigned int)v13 >= 0x50000 )
        {
          LODWORD(v43) = 327680;
          LODWORD(v42) = _First[2 * v10 + 2].bits >> 45;
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v42, v43) )
            __debugbreak();
        }
        GfxImageAtIndex = DB_GetGfxImageAtIndex(v14);
        v17 = 5 * v15;
        v18 = _First[v12 + 1].bits >> 45;
        v19 = (unsigned int)v18 >> 2;
        v20 = &GfxImageAtIndex->name + v17;
        v21 = (unsigned int)v18 - 4 * ((unsigned int)v18 >> 2);
        if ( (unsigned int)v18 >= 0x50000 )
        {
          LODWORD(v43) = 327680;
          LODWORD(v42) = v18;
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v42, v43) )
            __debugbreak();
        }
        v22 = DB_GetGfxImageAtIndex(v19);
        v23 = (unsigned __int8)v20[10];
        v24 = (char *)v22 + 40 * v21;
        v25 = (unsigned __int8)*((_QWORD *)v24 + 10);
        if ( v25 == v23 )
          v26 = (__int64)v20[8] > *((_QWORD *)v24 + 8);
        else
          v26 = v25 < v23;
      }
      v10 = !v26 + v12 + 1;
      _First[v7] = _First[v10];
      v7 = v10;
    }
    while ( v10 < v11 );
    v6 = _Val;
    v4 = _Bottom;
    v9 = v45;
    v8 = _Hole;
  }
  if ( v10 == v11 && (v4 & 1) == 0 )
  {
    _First[v7] = _First[v4 - 1];
    v7 = v9;
  }
  if ( v8 < v7 )
  {
    while ( 1 )
    {
      v27 = (v7 - 1) >> 1;
      if ( (((unsigned __int8)(v6->bits >> 44) ^ (unsigned __int8)(_First[v27].bits >> 44)) & 1) != 0 )
      {
        v40 = (v6->bits & 0x100000000000i64) != 0;
      }
      else
      {
        v28 = _First[v27].bits >> 45;
        v29 = (unsigned int)v28 >> 2;
        v30 = (unsigned int)v28 - 4 * ((unsigned int)v28 >> 2);
        if ( (unsigned int)v28 >= 0x50000 )
        {
          LODWORD(v43) = 327680;
          LODWORD(v42) = _First[v27].bits >> 45;
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v42, v43) )
            __debugbreak();
        }
        v31 = DB_GetGfxImageAtIndex(v29);
        v32 = v6->bits >> 45;
        v33 = (unsigned int)v32 >> 2;
        v34 = (char *)v31 + 40 * v30;
        v35 = (unsigned int)v32 - 4 * ((unsigned int)v32 >> 2);
        if ( (unsigned int)v32 >= 0x50000 )
        {
          LODWORD(v43) = 327680;
          LODWORD(v42) = v32;
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v42, v43) )
            __debugbreak();
        }
        v36 = DB_GetGfxImageAtIndex(v33);
        v37 = (unsigned __int8)*((_QWORD *)v34 + 10);
        v38 = (char *)v36 + 40 * v35;
        v39 = (unsigned __int8)*((_QWORD *)v38 + 10);
        if ( v39 == v37 )
        {
          v41 = *((_QWORD *)v38 + 8);
          v8 = _Hole;
          v40 = *((_QWORD *)v34 + 8) > v41;
        }
        else
        {
          v8 = _Hole;
          v40 = v39 < v37;
        }
      }
      if ( !v40 )
        break;
      _First[v7] = _First[v27];
      v7 = (v7 - 1) >> 1;
      if ( v8 >= v27 )
      {
        _First[v27] = (StreamSortKeyPacked)v6->0;
        return;
      }
    }
  }
  _First[v7] = (StreamSortKeyPacked)v6->0;
}

/*
==============
std::_Pop_heap_hole_by_index<StreamSortKeyPacked *,StreamSortKeyPacked,StreamMeshLoadingPredicate>
==============
*/
void std::_Pop_heap_hole_by_index<StreamSortKeyPacked *,StreamSortKeyPacked,StreamMeshLoadingPredicate>(StreamSortKeyPacked *_First, __int64 _Hole, __int64 _Bottom, StreamSortKeyPacked *_Val)
{
  __int64 v5; 
  __int64 v6; 
  __int64 v8; 
  __int64 v11; 
  __int64 v12; 
  unsigned __int64 bits; 
  XModelSurfs *XModelSurfsAtIndex; 
  XModelSurfs *v15; 
  unsigned __int64 v16; 
  unsigned __int64 v17; 
  bool v18; 
  __int64 v19; 
  XModelSurfs *v20; 
  XModelSurfs *v21; 
  __int64 v22; 
  XPakEntryInfo *p_xpakEntry; 
  unsigned __int64 v24; 
  bool v25; 

  v5 = _Hole;
  v6 = _Hole;
  v8 = _Bottom - 1;
  v11 = (_Bottom - 1) >> 1;
  if ( v5 < v11 )
  {
    do
    {
      v12 = 2 * v5;
      bits = _First[2 * v5 + 2].bits;
      if ( (((unsigned __int8)(_First[v12 + 1].bits >> 44) ^ (unsigned __int8)(bits >> 44)) & 1) != 0 )
      {
        v18 = (_First[v12 + 1].bits & 0x100000000000i64) != 0;
      }
      else
      {
        XModelSurfsAtIndex = DB_GetXModelSurfsAtIndex(bits >> 45);
        v15 = DB_GetXModelSurfsAtIndex(_First[v12 + 1].bits >> 45);
        v16 = (unsigned __int8)*((_QWORD *)&XModelSurfsAtIndex->xpakEntry + 3);
        v17 = (unsigned __int8)*((_QWORD *)&v15->xpakEntry + 3);
        if ( v17 == v16 )
          v18 = XModelSurfsAtIndex->xpakEntry.offset > v15->xpakEntry.offset;
        else
          v18 = v17 < v16;
      }
      v5 = !v18 + v12 + 1;
      _First[v6] = _First[v5];
      v6 = v5;
    }
    while ( v5 < v11 );
    v8 = _Bottom - 1;
  }
  if ( v5 == v11 && (_Bottom & 1) == 0 )
  {
    _First[v6] = _First[_Bottom - 1];
    v6 = v8;
  }
  if ( _Hole < v6 )
  {
    while ( 1 )
    {
      v19 = (v6 - 1) >> 1;
      if ( (((unsigned __int8)(_Val->bits >> 44) ^ (unsigned __int8)(_First[v19].bits >> 44)) & 1) != 0 )
      {
        v25 = (_Val->bits & 0x100000000000i64) != 0;
      }
      else
      {
        v20 = DB_GetXModelSurfsAtIndex(_First[v19].bits >> 45);
        v21 = DB_GetXModelSurfsAtIndex(_Val->bits >> 45);
        v22 = *((_QWORD *)&v21->xpakEntry + 3);
        p_xpakEntry = &v21->xpakEntry;
        v24 = (unsigned __int8)*((_QWORD *)&v20->xpakEntry + 3);
        v25 = (unsigned __int8)v22 == v24 ? v20->xpakEntry.offset > p_xpakEntry->offset : (unsigned __int8)v22 < v24;
      }
      if ( !v25 )
        break;
      _First[v6] = _First[v19];
      v6 = (v6 - 1) >> 1;
      if ( _Hole >= v19 )
      {
        _First[v19] = (StreamSortKeyPacked)_Val->0;
        return;
      }
    }
  }
  _First[v6] = (StreamSortKeyPacked)_Val->0;
}

/*
==============
std::_Sort_unchecked<StreamSortKeyPacked *,SortKeyPartialPredicate>
==============
*/
void std::_Sort_unchecked<StreamSortKeyPacked *,SortKeyPartialPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, __int64 _Ideal, SortKeyPartialPredicate _Pred)
{
  __int64 v6; 
  StreamSortKeyPacked *v7; 
  StreamSortKeyPacked *v8; 
  StreamSortKeyPacked *first; 
  StreamSortKeyPacked *second; 
  StreamSortKeyPacked *i; 
  unsigned __int64 bits; 
  unsigned __int64 *v13; 
  unsigned __int64 v14; 
  __int64 v15; 
  __int64 v16; 
  __int64 v17; 
  unsigned __int64 v18; 
  __int64 v19; 
  __int64 k; 
  __int64 m; 
  $FD3C46332B1196AF8F5C8C522E71774D *v22; 
  unsigned __int64 v23; 
  unsigned __int64 *j; 
  std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> result; 
  StreamSortKeyPacked _Val; 

  v6 = _Last - _First;
  v7 = _Last;
  v8 = _First;
  if ( v6 <= 32 )
  {
LABEL_7:
    if ( v6 >= 2 && v8 != v7 )
    {
      for ( i = v8 + 1; i != v7; ++i )
      {
        bits = i->bits;
        v13 = (unsigned __int64 *)i;
        v14 = i->bits & 0xFFFFFFFFFFFi64;
        if ( v14 <= (v8->bits & 0xFFFFFFFFFFFi64) )
        {
          v23 = i[-1].bits;
          for ( j = (unsigned __int64 *)&i[-1]; v14 > (v23 & 0xFFFFFFFFFFFi64); --j )
          {
            *v13 = v23;
            v13 = j;
            v23 = *(j - 1);
          }
          *v13 = bits;
        }
        else
        {
          memmove_0(&v8[1], v8, (char *)i - (char *)v8);
          v8->bits = bits;
        }
      }
    }
  }
  else
  {
    while ( _Ideal > 0 )
    {
      std::_Partition_by_median_guess_unchecked<StreamSortKeyPacked *,SortKeyPartialPredicate>(&result, v8, v7, _Pred);
      first = result.first;
      second = result.second;
      _Ideal = (_Ideal >> 2) + (_Ideal >> 1);
      if ( (__int64)(((char *)result.first - (char *)v8) & 0xFFFFFFFFFFFFFFF8ui64) >= (__int64)(((char *)v7 - (char *)result.second) & 0xFFFFFFFFFFFFFFF8ui64) )
      {
        std::_Sort_unchecked<StreamSortKeyPacked *,SortKeyPartialPredicate>(result.second, v7, _Ideal, _Pred);
        v7 = first;
      }
      else
      {
        std::_Sort_unchecked<StreamSortKeyPacked *,SortKeyPartialPredicate>(v8, result.first, _Ideal, _Pred);
        v8 = second;
      }
      v6 = v7 - v8;
      if ( v6 <= 32 )
        goto LABEL_7;
    }
    v15 = v7 - v8;
    v16 = ((char *)v7 - (char *)v8) >> 4;
    if ( v16 > 0 )
    {
      v17 = (v15 - 1) >> 1;
      do
      {
        v18 = v8[--v16].bits;
        v19 = v16;
        for ( k = v16; k < v17; v19 = k )
        {
          k = 2 * k + 2i64 - ((v8[2 * k + 1].bits & 0xFFFFFFFFFFFi64) < (v8[2 * k + 2].bits & 0xFFFFFFFFFFFi64));
          v8[v19] = v8[k];
        }
        if ( k == v17 && (v15 & 1) == 0 )
        {
          v8[v19] = v8[v15 - 1];
          v19 = v15 - 1;
        }
        for ( m = (v19 - 1) >> 1; v16 < v19; m = (m - 1) >> 1 )
        {
          if ( (v8[m].bits & 0xFFFFFFFFFFFi64) <= (v18 & 0xFFFFFFFFFFFi64) )
            break;
          v8[v19] = v8[m];
          v19 = m;
        }
        v8[v19].bits = v18;
      }
      while ( v16 > 0 );
    }
    if ( v15 >= 2 )
    {
      v22 = &v7[-1].0;
      do
      {
        _Val.0 = *v22;
        *v22 = v8->0;
        std::_Pop_heap_hole_by_index<StreamSortKeyPacked *,StreamSortKeyPacked,SortKeyPartialPredicate>(v8, 0i64, ((char *)v22-- - (char *)v8) >> 3, &_Val, _Pred);
      }
      while ( ((__int64)v22 + 8 - (__int64)v8) >> 3 >= 2 );
    }
  }
}

/*
==============
std::_Sort_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>
==============
*/
void std::_Sort_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, __int64 _Ideal, StreamGenericLoadingPredicate _Pred)
{
  __int64 v6; 
  StreamSortKeyPacked *v7; 
  StreamSortKeyPacked *v8; 
  StreamSortKeyPacked *first; 
  StreamSortKeyPacked *second; 
  $FD3C46332B1196AF8F5C8C522E71774D *v11; 
  std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> result; 
  StreamSortKeyPacked _Val; 

  v6 = _Last - _First;
  v7 = _Last;
  v8 = _First;
  if ( v6 <= 32 )
  {
LABEL_7:
    if ( v6 >= 2 )
      std::_Insertion_sort_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>(v8, v7, _Pred);
  }
  else
  {
    while ( _Ideal > 0 )
    {
      std::_Partition_by_median_guess_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>(&result, v8, v7, _Pred);
      first = result.first;
      second = result.second;
      _Ideal = (_Ideal >> 2) + (_Ideal >> 1);
      if ( (__int64)(((char *)result.first - (char *)v8) & 0xFFFFFFFFFFFFFFF8ui64) >= (__int64)(((char *)v7 - (char *)result.second) & 0xFFFFFFFFFFFFFFF8ui64) )
      {
        std::_Sort_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>(result.second, v7, _Ideal, _Pred);
        v7 = first;
      }
      else
      {
        std::_Sort_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>(v8, result.first, _Ideal, _Pred);
        v8 = second;
      }
      v6 = v7 - v8;
      if ( v6 <= 32 )
        goto LABEL_7;
    }
    std::_Make_heap_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>(v8, v7, _Pred);
    if ( v7 - v8 >= 2 )
    {
      v11 = &v7[-1].0;
      do
      {
        _Val.0 = *v11;
        *v11 = v8->0;
        std::_Pop_heap_hole_by_index<StreamSortKeyPacked *,StreamSortKeyPacked,StreamGenericLoadingPredicate>(v8, 0i64, ((char *)v11-- - (char *)v8) >> 3, &_Val, _Pred);
      }
      while ( ((__int64)v11 + 8 - (__int64)v8) >> 3 >= 2 );
    }
  }
}

/*
==============
std::_Sort_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>
==============
*/
void std::_Sort_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, __int64 _Ideal, StreamImageLoadingPredicate _Pred)
{
  __int64 v6; 
  StreamSortKeyPacked *v7; 
  StreamSortKeyPacked *v8; 
  StreamSortKeyPacked *first; 
  StreamSortKeyPacked *second; 
  $FD3C46332B1196AF8F5C8C522E71774D *v11; 
  std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> result; 
  StreamSortKeyPacked _Val; 

  v6 = _Last - _First;
  v7 = _Last;
  v8 = _First;
  if ( v6 <= 32 )
  {
LABEL_7:
    if ( v6 >= 2 )
      std::_Insertion_sort_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>(v8, v7, _Pred);
  }
  else
  {
    while ( _Ideal > 0 )
    {
      std::_Partition_by_median_guess_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>(&result, v8, v7, _Pred);
      first = result.first;
      second = result.second;
      _Ideal = (_Ideal >> 2) + (_Ideal >> 1);
      if ( (__int64)(((char *)result.first - (char *)v8) & 0xFFFFFFFFFFFFFFF8ui64) >= (__int64)(((char *)v7 - (char *)result.second) & 0xFFFFFFFFFFFFFFF8ui64) )
      {
        std::_Sort_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>(result.second, v7, _Ideal, _Pred);
        v7 = first;
      }
      else
      {
        std::_Sort_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>(v8, result.first, _Ideal, _Pred);
        v8 = second;
      }
      v6 = v7 - v8;
      if ( v6 <= 32 )
        goto LABEL_7;
    }
    std::_Make_heap_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>(v8, v7, _Pred);
    if ( v7 - v8 >= 2 )
    {
      v11 = &v7[-1].0;
      do
      {
        _Val.0 = *v11;
        *v11 = v8->0;
        std::_Pop_heap_hole_by_index<StreamSortKeyPacked *,StreamSortKeyPacked,StreamImageLoadingPredicate>(v8, 0i64, ((char *)v11-- - (char *)v8) >> 3, &_Val, _Pred);
      }
      while ( ((__int64)v11 + 8 - (__int64)v8) >> 3 >= 2 );
    }
  }
}

/*
==============
std::_Sort_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>
==============
*/
void std::_Sort_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, __int64 _Ideal, StreamMeshLoadingPredicate _Pred)
{
  __int64 v6; 
  StreamSortKeyPacked *v7; 
  StreamSortKeyPacked *v8; 
  StreamSortKeyPacked *first; 
  StreamSortKeyPacked *second; 
  $FD3C46332B1196AF8F5C8C522E71774D *v11; 
  std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> result; 
  StreamSortKeyPacked _Val; 

  v6 = _Last - _First;
  v7 = _Last;
  v8 = _First;
  if ( v6 <= 32 )
  {
LABEL_7:
    if ( v6 >= 2 )
      std::_Insertion_sort_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>(v8, v7, _Pred);
  }
  else
  {
    while ( _Ideal > 0 )
    {
      std::_Partition_by_median_guess_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>(&result, v8, v7, _Pred);
      first = result.first;
      second = result.second;
      _Ideal = (_Ideal >> 2) + (_Ideal >> 1);
      if ( (__int64)(((char *)result.first - (char *)v8) & 0xFFFFFFFFFFFFFFF8ui64) >= (__int64)(((char *)v7 - (char *)result.second) & 0xFFFFFFFFFFFFFFF8ui64) )
      {
        std::_Sort_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>(result.second, v7, _Ideal, _Pred);
        v7 = first;
      }
      else
      {
        std::_Sort_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>(v8, result.first, _Ideal, _Pred);
        v8 = second;
      }
      v6 = v7 - v8;
      if ( v6 <= 32 )
        goto LABEL_7;
    }
    std::_Make_heap_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>(v8, v7, _Pred);
    if ( v7 - v8 >= 2 )
    {
      v11 = &v7[-1].0;
      do
      {
        _Val.0 = *v11;
        *v11 = v8->0;
        std::_Pop_heap_hole_by_index<StreamSortKeyPacked *,StreamSortKeyPacked,StreamMeshLoadingPredicate>(v8, 0i64, ((char *)v11-- - (char *)v8) >> 3, &_Val, _Pred);
      }
      while ( ((__int64)v11 + 8 - (__int64)v8) >> 3 >= 2 );
    }
  }
}

/*
==============
std::_Med3_unchecked<score_t *,CgScoreBoardCompare>
==============
*/
void std::_Med3_unchecked<score_t *,CgScoreBoardCompare>(score_t *_First, score_t *_Mid, score_t *_Last, CgScoreBoardCompare _Pred)
{
  _RBX = _Mid;
  _RSI = _Last;
  _RDI = _First;
  if ( CG_ServerCmdMP_CompareScores(_Mid->client, _First->client, _Mid->team, _First->team, _Mid->score, _First->score, _Mid->deaths, _First->deaths) )
  {
    __asm
    {
      vmovups ymm0, ymmword ptr [rdi]
      vmovups ymm2, ymmword ptr [rbx]
      vmovups ymm3, ymmword ptr [rbx+20h]
      vmovups ymm4, ymmword ptr [rbx+40h]
      vmovups xmm5, xmmword ptr [rbx+60h]
      vmovups ymmword ptr [rbx], ymm0
      vmovups ymm1, ymmword ptr [rdi+20h]
      vmovups ymmword ptr [rbx+20h], ymm1
      vmovups ymm0, ymmword ptr [rdi+40h]
      vmovups ymmword ptr [rbx+40h], ymm0
      vmovups xmm1, xmmword ptr [rdi+60h]
      vmovups xmmword ptr [rbx+60h], xmm1
      vmovups ymmword ptr [rdi], ymm2
      vmovups ymmword ptr [rdi+20h], ymm3
      vmovups ymmword ptr [rdi+40h], ymm4
      vmovups xmmword ptr [rdi+60h], xmm5
    }
  }
  if ( CG_ServerCmdMP_CompareScores(_RSI->client, _RBX->client, _RSI->team, _RBX->team, _RSI->score, _RBX->score, _RSI->deaths, _RBX->deaths) )
  {
    __asm
    {
      vmovups ymm0, ymmword ptr [rbx]
      vmovups ymm2, ymmword ptr [rsi]
      vmovups ymm3, ymmword ptr [rsi+20h]
      vmovups ymm4, ymmword ptr [rsi+40h]
      vmovups xmm5, xmmword ptr [rsi+60h]
      vmovups ymmword ptr [rsi], ymm0
      vmovups ymm1, ymmword ptr [rbx+20h]
      vmovups ymmword ptr [rsi+20h], ymm1
      vmovups ymm0, ymmword ptr [rbx+40h]
      vmovups ymmword ptr [rsi+40h], ymm0
      vmovups xmm1, xmmword ptr [rbx+60h]
      vmovups xmmword ptr [rsi+60h], xmm1
      vmovups ymmword ptr [rbx], ymm2
      vmovups ymmword ptr [rbx+20h], ymm3
      vmovups ymmword ptr [rbx+40h], ymm4
      vmovups xmmword ptr [rbx+60h], xmm5
    }
    if ( CG_ServerCmdMP_CompareScores(_RBX->client, _RDI->client, _RBX->team, _RDI->team, _RBX->score, _RDI->score, _RBX->deaths, _RDI->deaths) )
    {
      __asm
      {
        vmovups ymm0, ymmword ptr [rdi]
        vmovups ymm2, ymmword ptr [rbx]
        vmovups ymm3, ymmword ptr [rbx+20h]
        vmovups ymm4, ymmword ptr [rbx+40h]
        vmovups xmm5, xmmword ptr [rbx+60h]
        vmovups ymmword ptr [rbx], ymm0
        vmovups ymm1, ymmword ptr [rdi+20h]
        vmovups ymmword ptr [rbx+20h], ymm1
        vmovups ymm0, ymmword ptr [rdi+40h]
        vmovups ymmword ptr [rbx+40h], ymm0
        vmovups xmm1, xmmword ptr [rdi+60h]
        vmovups xmmword ptr [rbx+60h], xmm1
        vmovups ymmword ptr [rdi], ymm2
        vmovups ymmword ptr [rdi+20h], ymm3
        vmovups ymmword ptr [rdi+40h], ymm4
        vmovups xmmword ptr [rdi+60h], xmm5
      }
    }
  }
}

/*
==============
std::_Partition_by_median_guess_unchecked<score_t *,CgScoreBoardCompare>
==============
*/
std::pair<score_t *,score_t *> *std::_Partition_by_median_guess_unchecked<score_t *,CgScoreBoardCompare>(std::pair<score_t *,score_t *> *result, score_t *_First, score_t *_Last, CgScoreBoardCompare _Pred)
{
  CgScoreBoardCompare v5; 
  score_t *v7; 
  score_t *v9; 
  signed __int64 v10; 
  __int64 v11; 
  __int64 v12; 
  unsigned __int64 v13; 
  score_t *v14; 
  const int *p_client; 
  const int *v17; 
  bool v28; 
  const int *p_score; 
  std::pair<score_t *,score_t *> *v79; 

  v5 = _Pred;
  v7 = _Last - 1;
  _R15 = &_First[(_Last - _First) >> 1];
  v9 = _First;
  v10 = &_Last[-1] - _First;
  if ( v10 > 40 )
  {
    v11 = (v10 + 1) >> 3;
    v12 = 112 * v11;
    v13 = 224 * v11;
    v14 = &_First[v11];
    std::_Med3_unchecked<score_t *,CgScoreBoardCompare>(v9, v14, &_First[2 * v11], _Pred);
    std::_Med3_unchecked<score_t *,CgScoreBoardCompare>(&_R15[v12 / 0xFFFFFFFFFFFFFF90ui64], _R15, &_R15[(unsigned __int64)v12 / 0x70], v5);
    v7 = (score_t *)((char *)v7 - v12);
    std::_Med3_unchecked<score_t *,CgScoreBoardCompare>(&_Last[v13 / 0xFFFFFFFFFFFFFF90ui64 - 1], v7, _Last - 1, v5);
    _Pred = v5;
    v9 = v14;
  }
  std::_Med3_unchecked<score_t *,CgScoreBoardCompare>(v9, _R15, v7, _Pred);
  _RDI = _R15 + 1;
  p_client = &_R15->client;
  if ( _First < _R15 )
  {
    v17 = &_R15->client;
    do
    {
      p_client = v17;
      if ( CG_ServerCmdMP_CompareScores(_R15[-1].client, *v17, _R15[-1].team, v17[5], _R15[-1].score, v17[2], _R15[-1].deaths, v17[4]) )
        break;
      if ( CG_ServerCmdMP_CompareScores(*v17, _R15[-1].client, v17[5], _R15[-1].team, v17[2], _R15[-1].score, v17[4], _R15[-1].deaths) )
        break;
      _R15 = (score_t *)(v17 - 28);
      v17 = &_R15->client;
      p_client = &_R15->client;
    }
    while ( _First < _R15 );
  }
  for ( _RSI = (score_t *)p_client; _RDI < _Last; _RSI = _R15 )
  {
    _RSI = (score_t *)p_client;
    if ( CG_ServerCmdMP_CompareScores(_RDI->client, *p_client, _RDI->team, p_client[5], _RDI->score, p_client[2], _RDI->deaths, p_client[4]) )
      break;
    if ( CG_ServerCmdMP_CompareScores(*p_client, _RDI->client, p_client[5], _RDI->team, p_client[2], _RDI->score, p_client[4], _RDI->deaths) )
      break;
    ++_RDI;
  }
  for ( _RBX = _RDI; ; ++_RBX )
  {
    while ( 1 )
    {
      for ( ; _RBX < _Last; ++_RBX )
      {
        if ( !CG_ServerCmdMP_CompareScores(_R15->client, _RBX->client, _R15->team, _RBX->team, _R15->score, _RBX->score, _R15->deaths, _RBX->deaths) )
        {
          if ( CG_ServerCmdMP_CompareScores(_RBX->client, _R15->client, _RBX->team, _R15->team, _RBX->score, _R15->score, _RBX->deaths, _R15->deaths) )
            break;
          if ( _RDI != _RBX )
          {
            __asm
            {
              vmovups ymm0, ymmword ptr [rbx]
              vmovups ymm2, ymmword ptr [rdi]
              vmovups ymm3, ymmword ptr [rdi+20h]
              vmovups ymm4, ymmword ptr [rdi+40h]
              vmovups xmm5, xmmword ptr [rdi+60h]
              vmovups ymmword ptr [rdi], ymm0
              vmovups ymm1, ymmword ptr [rbx+20h]
              vmovups ymmword ptr [rdi+20h], ymm1
              vmovups ymm0, ymmword ptr [rbx+40h]
              vmovups ymmword ptr [rdi+40h], ymm0
              vmovups xmm1, xmmword ptr [rbx+60h]
              vmovups xmmword ptr [rdi+60h], xmm1
              vmovups ymmword ptr [rbx], ymm2
              vmovups ymmword ptr [rbx+20h], ymm3
              vmovups ymmword ptr [rbx+40h], ymm4
              vmovups xmmword ptr [rbx+60h], xmm5
            }
          }
          ++_RDI;
        }
      }
      v28 = _RSI == _First;
      if ( _RSI > _First )
      {
        p_score = &_RSI[-1].score;
        do
        {
          _RBP = p_score - 2;
          if ( !CG_ServerCmdMP_CompareScores(*(p_score - 2), _R15->client, p_score[3], _R15->team, *p_score, _R15->score, p_score[2], _R15->deaths) )
          {
            if ( CG_ServerCmdMP_CompareScores(_R15->client, *_RBP, _R15->team, p_score[3], _R15->score, *p_score, _R15->deaths, p_score[2]) )
              break;
            if ( --_R15 != (score_t *)_RBP )
            {
              __asm
              {
                vmovups ymm0, ymmword ptr [rbp+0]
                vmovups ymm2, ymmword ptr [r15]
                vmovups ymm3, ymmword ptr [r15+20h]
                vmovups ymm4, ymmword ptr [r15+40h]
                vmovups xmm5, xmmword ptr [r15+60h]
                vmovups ymmword ptr [r15], ymm0
                vmovups ymm1, ymmword ptr [rbp+20h]
                vmovups ymmword ptr [r15+20h], ymm1
                vmovups ymm0, ymmword ptr [rbp+40h]
                vmovups ymmword ptr [r15+40h], ymm0
                vmovups xmm1, xmmword ptr [rbp+60h]
                vmovups xmmword ptr [r15+60h], xmm1
                vmovups ymmword ptr [rbp+0], ymm2
                vmovups ymmword ptr [rbp+20h], ymm3
                vmovups ymmword ptr [rbp+40h], ymm4
                vmovups xmmword ptr [rbp+60h], xmm5
              }
            }
          }
          --_RSI;
          p_score -= 28;
        }
        while ( _First < _RSI );
        v28 = _RSI == _First;
      }
      if ( v28 )
        break;
      --_RSI;
      if ( _RBX == _Last )
      {
        if ( _RSI != --_R15 )
        {
          __asm
          {
            vmovups ymm0, ymmword ptr [r15]
            vmovups ymm2, ymmword ptr [rsi]
            vmovups ymm3, ymmword ptr [rsi+20h]
            vmovups ymm4, ymmword ptr [rsi+40h]
            vmovups xmm5, xmmword ptr [rsi+60h]
            vmovups ymmword ptr [rsi], ymm0
            vmovups ymm1, ymmword ptr [r15+20h]
            vmovups ymmword ptr [rsi+20h], ymm1
            vmovups ymm0, ymmword ptr [r15+40h]
            vmovups ymmword ptr [rsi+40h], ymm0
            vmovups xmm1, xmmword ptr [r15+60h]
            vmovups xmmword ptr [rsi+60h], xmm1
            vmovups ymmword ptr [r15], ymm2
            vmovups ymmword ptr [r15+20h], ymm3
            vmovups ymmword ptr [r15+40h], ymm4
            vmovups xmmword ptr [r15+60h], xmm5
          }
        }
        __asm
        {
          vmovups ymm0, ymmword ptr [rdi-70h]
          vmovups ymm2, ymmword ptr [r15]
          vmovups ymm3, ymmword ptr [r15+20h]
          vmovups ymm4, ymmword ptr [r15+40h]
          vmovups xmm5, xmmword ptr [r15+60h]
          vmovups ymmword ptr [r15], ymm0
          vmovups ymm1, ymmword ptr [rdi-50h]
        }
        --_RDI;
        __asm
        {
          vmovups ymmword ptr [r15+20h], ymm1
          vmovups ymm0, ymmword ptr [rdi+40h]
          vmovups ymmword ptr [r15+40h], ymm0
          vmovups xmm1, xmmword ptr [rdi+60h]
          vmovups xmmword ptr [r15+60h], xmm1
          vmovups ymmword ptr [rdi], ymm2
          vmovups ymmword ptr [rdi+20h], ymm3
          vmovups ymmword ptr [rdi+40h], ymm4
          vmovups xmmword ptr [rdi+60h], xmm5
        }
      }
      else
      {
        __asm
        {
          vmovups ymm0, ymmword ptr [rsi]
          vmovups ymm2, ymmword ptr [rbx]
          vmovups ymm3, ymmword ptr [rbx+20h]
          vmovups ymm4, ymmword ptr [rbx+40h]
          vmovups xmm5, xmmword ptr [rbx+60h]
          vmovups ymmword ptr [rbx], ymm0
          vmovups ymm1, ymmword ptr [rsi+20h]
          vmovups ymmword ptr [rbx+20h], ymm1
          vmovups ymm0, ymmword ptr [rsi+40h]
          vmovups ymmword ptr [rbx+40h], ymm0
          vmovups xmm1, xmmword ptr [rsi+60h]
          vmovups xmmword ptr [rbx+60h], xmm1
          vmovups ymmword ptr [rsi], ymm2
          vmovups ymmword ptr [rsi+20h], ymm3
          vmovups ymmword ptr [rsi+40h], ymm4
          vmovups xmmword ptr [rsi+60h], xmm5
        }
        ++_RBX;
      }
    }
    if ( _RBX == _Last )
      break;
    if ( _RDI != _RBX )
    {
      __asm
      {
        vmovups ymm0, ymmword ptr [rdi]
        vmovups ymm2, ymmword ptr [r15]
        vmovups ymm3, ymmword ptr [r15+20h]
        vmovups ymm4, ymmword ptr [r15+40h]
        vmovups xmm5, xmmword ptr [r15+60h]
        vmovups ymmword ptr [r15], ymm0
        vmovups ymm1, ymmword ptr [rdi+20h]
        vmovups ymmword ptr [r15+20h], ymm1
        vmovups ymm0, ymmword ptr [rdi+40h]
        vmovups ymmword ptr [r15+40h], ymm0
        vmovups xmm1, xmmword ptr [rdi+60h]
        vmovups xmmword ptr [r15+60h], xmm1
        vmovups ymmword ptr [rdi], ymm2
        vmovups ymmword ptr [rdi+20h], ymm3
        vmovups ymmword ptr [rdi+40h], ymm4
        vmovups xmmword ptr [rdi+60h], xmm5
      }
    }
    __asm
    {
      vmovups ymm0, ymmword ptr [rbx]
      vmovups ymm2, ymmword ptr [r15]
      vmovups ymm3, ymmword ptr [r15+20h]
      vmovups ymm4, ymmword ptr [r15+40h]
      vmovups xmm5, xmmword ptr [r15+60h]
      vmovups ymmword ptr [r15], ymm0
      vmovups ymm1, ymmword ptr [rbx+20h]
      vmovups ymmword ptr [r15+20h], ymm1
      vmovups ymm0, ymmword ptr [rbx+40h]
      vmovups ymmword ptr [r15+40h], ymm0
      vmovups xmm1, xmmword ptr [rbx+60h]
      vmovups xmmword ptr [r15+60h], xmm1
      vmovups ymmword ptr [rbx], ymm2
      vmovups ymmword ptr [rbx+20h], ymm3
      vmovups ymmword ptr [rbx+40h], ymm4
    }
    ++_RDI;
    ++_R15;
    __asm { vmovups xmmword ptr [rbx+60h], xmm5 }
  }
  v79 = result;
  result->first = _R15;
  result->second = _RDI;
  return v79;
}

/*
==============
std::_Pop_heap_hole_by_index<score_t *,score_t,CgScoreBoardCompare>
==============
*/
void std::_Pop_heap_hole_by_index<score_t *,score_t,CgScoreBoardCompare>(score_t *_First, __int64 _Hole, __int64 _Bottom, score_t *_Val)
{
  __int64 v5; 
  __int64 v7; 
  __int64 v10; 
  const int *p_client; 
  __int64 v24; 

  _R14 = _Val;
  v5 = (_Bottom - 1) >> 1;
  v7 = _Hole;
  _RSI = _First;
  v10 = _Hole;
  while ( v10 < v5 )
  {
    v10 = 2 * v10 + 2;
    p_client = &_RSI[v10].client;
    if ( CG_ServerCmdMP_CompareScores(*p_client, *(p_client - 28), p_client[5], *(p_client - 23), p_client[2], *(p_client - 26), p_client[4], *(p_client - 24)) )
      --v10;
    _RAX = 112 * v7;
    _RCX = 112 * v10;
    v7 = v10;
    __asm
    {
      vmovups ymm0, ymmword ptr [rcx+rsi]
      vmovups ymmword ptr [rax+rsi], ymm0
      vmovups ymm1, ymmword ptr [rcx+rsi+20h]
      vmovups ymmword ptr [rax+rsi+20h], ymm1
      vmovups ymm0, ymmword ptr [rcx+rsi+40h]
      vmovups ymmword ptr [rax+rsi+40h], ymm0
      vmovups xmm1, xmmword ptr [rcx+rsi+60h]
      vmovups xmmword ptr [rax+rsi+60h], xmm1
    }
  }
  if ( v10 == v5 && (_Bottom & 1) == 0 )
  {
    _RCX = 112 * _Bottom;
    _RAX = 112 * v7;
    __asm { vmovups ymm0, ymmword ptr [rcx+rsi-70h] }
    v7 = _Bottom - 1;
    __asm
    {
      vmovups ymmword ptr [rax+rsi], ymm0
      vmovups ymm1, ymmword ptr [rcx+rsi-50h]
      vmovups ymmword ptr [rax+rsi+20h], ymm1
      vmovups ymm0, ymmword ptr [rcx+rsi-30h]
      vmovups ymmword ptr [rax+rsi+40h], ymm0
      vmovups xmm1, xmmword ptr [rcx+rsi-10h]
      vmovups xmmword ptr [rax+rsi+60h], xmm1
    }
  }
  if ( _Hole < v7 )
  {
    do
    {
      v24 = (v7 - 1) >> 1;
      _RBX = &_RSI[v24].client;
      if ( !CG_ServerCmdMP_CompareScores(*_RBX, _R14->client, _RBX[5], _R14->team, _RBX[2], _R14->score, _RBX[4], _R14->deaths) )
        break;
      __asm { vmovups ymm0, ymmword ptr [rbx] }
      _RAX = 112 * v7;
      v7 = (v7 - 1) >> 1;
      __asm
      {
        vmovups ymmword ptr [rax+rsi], ymm0
        vmovups ymm1, ymmword ptr [rbx+20h]
        vmovups ymmword ptr [rax+rsi+20h], ymm1
        vmovups ymm0, ymmword ptr [rbx+40h]
        vmovups ymmword ptr [rax+rsi+40h], ymm0
        vmovups xmm1, xmmword ptr [rbx+60h]
        vmovups xmmword ptr [rax+rsi+60h], xmm1
      }
    }
    while ( _Hole < v24 );
  }
  __asm { vmovups ymm0, ymmword ptr [r14] }
  _RAX = 112 * v7;
  __asm
  {
    vmovups ymmword ptr [rax+rsi], ymm0
    vmovups ymm1, ymmword ptr [r14+20h]
    vmovups ymmword ptr [rax+rsi+20h], ymm1
    vmovups ymm0, ymmword ptr [r14+40h]
    vmovups ymmword ptr [rax+rsi+40h], ymm0
    vmovups xmm1, xmmword ptr [r14+60h]
    vmovups xmmword ptr [rax+rsi+60h], xmm1
  }
}

/*
==============
std::_Sort_unchecked<score_t *,CgScoreBoardCompare>
==============
*/
void std::_Sort_unchecked<score_t *,CgScoreBoardCompare>(score_t *_First, score_t *_Last, __int64 _Ideal, CgScoreBoardCompare _Pred)
{
  score_t *v5; 
  CgScoreBoardCompare v7; 
  __int64 v9; 
  score_t *second; 
  score_t *v11; 
  const int *p_score; 
  score_t *first; 
  int deaths; 
  int team; 
  int client; 
  int score2; 
  int deaths1; 
  __int64 v33; 
  __int64 v34; 
  __int64 v35; 
  __int64 v36; 
  __int64 v39; 
  __int64 v40; 
  const int *p_client; 
  __int64 v57; 
  int v58; 
  int score; 
  int v88; 
  int v89; 
  int score1; 
  int deaths2; 
  score_t *v95; 
  __int64 v96; 
  int v97; 
  __int64 v98; 
  std::pair<score_t *,score_t *> result; 
  score_t client2; 
  int client1a; 
  score_t *v107; 

  v107 = _Last;
  v5 = _Last;
  _RDI = _First;
  v7 = _Pred;
  v9 = _Last - _First;
  if ( v9 <= 32 )
  {
LABEL_7:
    if ( v9 >= 2 && _RDI != v5 )
    {
      _RBP = _RDI + 1;
      v95 = _RDI + 1;
      if ( &_RDI[1] != v5 )
      {
        p_score = &_RDI->score;
        first = (score_t *)(104i64 - (_QWORD)_RDI);
        result.first = (score_t *)(104i64 - (_QWORD)_RDI);
        do
        {
          __asm
          {
            vmovups ymm1, ymmword ptr [rbp+0]
            vmovups ymm0, ymmword ptr [rbp+20h]
          }
          deaths = _RDI->deaths;
          _RSI = &_RBP->client;
          team = _RDI->team;
          client = _RDI->client;
          __asm
          {
            vmovups [rsp+178h+var_E8], ymm0
            vmovups ymm0, ymmword ptr [rbp+40h]
          }
          deaths2 = deaths;
          score2 = _RDI->score;
          __asm
          {
            vmovups [rsp+178h+var_C8], ymm0
            vmovups xmm0, xmmword ptr [rbp+60h]
            vmovups [rsp+178h+var_118], xmm0
            vextractf128 xmm0, ymm1, 1
            vmovq   r8, xmm0
            vpextrd r15d, xmm1, 2
            vextractf128 xmm0, ymm1, 1
            vmovd   r13d, xmm0
            vmovd   ecx, xmm1; client1
            vmovups [rsp+178h+var_108], ymm1
          }
          v97 = _ER15;
          __asm { vmovd   [rsp+178h+client1], xmm1 }
          if ( CG_ServerCmdMP_CompareScores(_ECX, client, SHIDWORD(_R8), team, _ER15, score2, deaths1, deaths2) )
          {
            memmove_0((void *)(216i64 - (_QWORD)first), _RDI, (size_t)p_score + (_QWORD)first);
            __asm
            {
              vmovups ymm0, [rsp+178h+var_108]
              vmovups ymm1, [rsp+178h+var_E8]
              vmovups ymmword ptr [rdi], ymm0
              vmovups ymm0, [rsp+178h+var_C8]
              vmovups ymmword ptr [rdi+20h], ymm1
              vmovups xmm1, [rsp+178h+var_118]
              vmovups ymmword ptr [rdi+40h], ymm0
              vmovups xmmword ptr [rdi+60h], xmm1
            }
          }
          else
          {
            _RBX = p_score - 2;
            __asm
            {
              vmovups ymm0, [rsp+178h+var_108]
              vextractf128 xmm0, ymm0, 1
            }
            score1 = _ER15;
            __asm { vpextrd r15d, xmm0, 1 }
            if ( CG_ServerCmdMP_CompareScores(client1a, *(p_score - 2), _ER15, p_score[3], score1, *p_score, deaths1, p_score[2]) )
            {
              do
              {
                __asm
                {
                  vmovups ymm0, ymmword ptr [rbx]
                  vmovups ymmword ptr [rsi], ymm0
                  vmovups ymm1, ymmword ptr [rbx+20h]
                  vmovups ymmword ptr [rsi+20h], ymm1
                  vmovups ymm0, ymmword ptr [rbx+40h]
                  vmovups ymmword ptr [rsi+40h], ymm0
                  vmovups xmm1, xmmword ptr [rbx+60h]
                  vmovups xmmword ptr [rsi+60h], xmm1
                }
                v88 = *(_RBX - 24);
                _RSI = _RBX;
                v89 = *(_RBX - 23);
                _RBX -= 28;
              }
              while ( CG_ServerCmdMP_CompareScores(client1a, *_RBX, _ER15, v89, v97, _RBX[2], deaths1, v88) );
              _RBP = v95;
              v5 = v107;
            }
            __asm
            {
              vmovups ymm0, [rsp+178h+var_108]
              vmovups ymm1, [rsp+178h+var_E8]
            }
            first = result.first;
            __asm
            {
              vmovups ymmword ptr [rsi], ymm0
              vmovups ymm0, [rsp+178h+var_C8]
              vmovups ymmword ptr [rsi+20h], ymm1
              vmovups xmm1, [rsp+178h+var_118]
              vmovups ymmword ptr [rsi+40h], ymm0
              vmovups xmmword ptr [rsi+60h], xmm1
            }
          }
          ++_RBP;
          p_score += 28;
          v95 = _RBP;
        }
        while ( _RBP != v5 );
      }
    }
  }
  else
  {
    while ( _Ideal > 0 )
    {
      std::_Partition_by_median_guess_unchecked<score_t *,CgScoreBoardCompare>(&result, _RDI, v5, v7);
      second = result.second;
      v11 = result.first;
      _Ideal = (_Ideal >> 2) + (_Ideal >> 1);
      if ( result.first - _RDI >= v5 - result.second )
      {
        std::_Sort_unchecked<score_t *,CgScoreBoardCompare>(result.second, v5, _Ideal, v7);
        v5 = v11;
        v107 = v11;
      }
      else
      {
        std::_Sort_unchecked<score_t *,CgScoreBoardCompare>(_RDI, result.first, _Ideal, v7);
        _RDI = second;
      }
      v9 = v5 - _RDI;
      if ( v9 <= 32 )
        goto LABEL_7;
    }
    v33 = v5 - _RDI;
    v96 = v33;
    v34 = v33 >> 1;
    if ( v33 >> 1 > 0 )
    {
      v35 = v33 - 1;
      v36 = (v33 - 1) >> 1;
      _RBX = &_RDI[v34];
      v98 = v36;
      do
      {
        __asm { vmovups ymm0, ymmword ptr [rbx-70h] }
        --_RBX;
        v39 = --v34;
        v40 = v34;
        __asm
        {
          vmovups [rsp+178h+var_C8], ymm0
          vmovups ymmword ptr [rsp+178h+client2], ymm0
          vmovups ymm0, ymmword ptr [rbx+20h]
          vmovups [rsp+178h+var_E8], ymm0
          vmovups ymm0, ymmword ptr [rbx+40h]
          vmovups [rsp+178h+var_108], ymm0
          vmovups xmm0, xmmword ptr [rbx+60h]
          vmovups [rsp+178h+var_118], xmm0
        }
        if ( v34 < v36 )
        {
          do
          {
            v40 = 2 * v40 + 2;
            p_client = &_RDI[v40].client;
            if ( CG_ServerCmdMP_CompareScores(*p_client, *(p_client - 28), p_client[5], *(p_client - 23), p_client[2], *(p_client - 26), p_client[4], *(p_client - 24)) )
              --v40;
            _RAX = 112 * v39;
            _RCX = 112 * v40;
            v39 = v40;
            __asm
            {
              vmovups ymm0, ymmword ptr [rcx+rdi]
              vmovups ymmword ptr [rax+rdi], ymm0
              vmovups ymm1, ymmword ptr [rcx+rdi+20h]
              vmovups ymmword ptr [rax+rdi+20h], ymm1
              vmovups ymm0, ymmword ptr [rcx+rdi+40h]
              vmovups ymmword ptr [rax+rdi+40h], ymm0
              vmovups xmm1, xmmword ptr [rcx+rdi+60h]
              vmovups xmmword ptr [rax+rdi+60h], xmm1
            }
          }
          while ( v40 < v36 );
          v35 = v33 - 1;
        }
        if ( v40 == v36 && (v33 & 1) == 0 )
        {
          _RCX = 112 * v33;
          _RAX = 112 * v39;
          __asm { vmovups ymm0, ymmword ptr [rcx+rdi-70h] }
          v39 = v35;
          __asm
          {
            vmovups ymmword ptr [rax+rdi], ymm0
            vmovups ymm1, ymmword ptr [rcx+rdi-50h]
            vmovups ymmword ptr [rax+rdi+20h], ymm1
            vmovups ymm0, ymmword ptr [rcx+rdi-30h]
            vmovups ymmword ptr [rax+rdi+40h], ymm0
            vmovups xmm1, xmmword ptr [rcx+rdi-10h]
            vmovups xmmword ptr [rax+rdi+60h], xmm1
          }
        }
        v57 = (v39 - 1) >> 1;
        if ( v34 < v39 )
        {
          v58 = client2.deaths;
          score = client2.score;
          do
          {
            _RSI = &_RDI[v57].client;
            if ( !CG_ServerCmdMP_CompareScores(*_RSI, client2.client, _RSI[5], client2.team, _RSI[2], score, _RSI[4], v58) )
              break;
            __asm { vmovups ymm0, ymmword ptr [rsi] }
            _RAX = 112 * v39;
            v39 = v57;
            v57 = (v57 - 1) >> 1;
            __asm
            {
              vmovups ymmword ptr [rax+rdi], ymm0
              vmovups ymm1, ymmword ptr [rsi+20h]
              vmovups ymmword ptr [rax+rdi+20h], ymm1
              vmovups ymm0, ymmword ptr [rsi+40h]
              vmovups ymmword ptr [rax+rdi+40h], ymm0
              vmovups xmm1, xmmword ptr [rsi+60h]
              vmovups xmmword ptr [rax+rdi+60h], xmm1
            }
          }
          while ( v34 < v39 );
          v33 = v96;
        }
        __asm
        {
          vmovups ymm0, [rsp+178h+var_C8]
          vmovups ymm1, [rsp+178h+var_E8]
        }
        v36 = v98;
        v35 = v33 - 1;
        _RAX = 112 * v39;
        __asm
        {
          vmovups ymmword ptr [rax+rdi], ymm0
          vmovups ymm0, [rsp+178h+var_108]
          vmovups ymmword ptr [rax+rdi+20h], ymm1
          vmovups xmm1, [rsp+178h+var_118]
          vmovups ymmword ptr [rax+rdi+40h], ymm0
          vmovups xmmword ptr [rax+rdi+60h], xmm1
        }
      }
      while ( v34 > 0 );
      v7 = _Pred;
      v5 = v107;
    }
    if ( v33 >= 2 )
    {
      _RSI = v5 - 1;
      do
      {
        __asm
        {
          vmovups ymm1, ymmword ptr [rsi+20h]
          vmovups ymm0, ymmword ptr [rsi]
          vmovups ymmword ptr [rsp+178h+client2], ymm0
          vmovups ymm0, ymmword ptr [rsi+40h]
          vmovups [rsp+178h+var_88], ymm1
          vmovups xmm1, xmmword ptr [rsi+60h]
          vmovups [rsp+178h+var_68], ymm0
          vmovups ymm0, ymmword ptr [rdi]
          vmovups ymmword ptr [rsi], ymm0
          vmovups [rsp+178h+var_48], xmm1
          vmovups ymm1, ymmword ptr [rdi+20h]
          vmovups ymmword ptr [rsi+20h], ymm1
          vmovups ymm0, ymmword ptr [rdi+40h]
          vmovups ymmword ptr [rsi+40h], ymm0
          vmovups xmm1, xmmword ptr [rdi+60h]
          vmovups xmmword ptr [rsi+60h], xmm1
        }
        std::_Pop_heap_hole_by_index<score_t *,score_t,CgScoreBoardCompare>(_RDI, 0i64, _RSI - _RDI, &client2, v7);
        --_RSI;
      }
      while ( ((char *)_RSI - (char *)_RDI + 112) / 112 >= 2 );
    }
  }
}

/*
==============
std::_Guess_median_unchecked<CgVehiclePriorityInfo *,CgVehicleMPSortFunctor>
==============
*/
void std::_Guess_median_unchecked<CgVehiclePriorityInfo *,CgVehicleMPSortFunctor>(CgVehiclePriorityInfo *_First, CgVehiclePriorityInfo *_Mid, CgVehiclePriorityInfo *_Last, CgVehicleMPSortFunctor _Pred)
{
  signed __int64 v6; 
  bool v7; 
  __int64 v8; 
  bool v9; 
  CgVehiclePriorityInfo v13; 
  CgVehiclePriorityInfo v14; 
  CgVehiclePriorityInfo v18; 
  CgVehiclePriorityInfo v19; 
  CgVehiclePriorityInfo v24; 
  CgVehiclePriorityInfo v25; 
  CgVehiclePriorityInfo v28; 
  CgVehiclePriorityInfo v29; 
  CgVehiclePriorityInfo v32; 
  CgVehiclePriorityInfo v33; 

  _R11 = _Last;
  _R9 = _First;
  v6 = _Last - _First;
  v7 = (unsigned __int64)v6 <= 0x28;
  if ( v6 <= 40 )
  {
    __asm
    {
      vmovss  xmm0, dword ptr [rdx+4]
      vcomiss xmm0, dword ptr [rcx+4]
    }
    if ( (unsigned __int64)v6 < 0x28 )
    {
      v32 = *_Mid;
      *_Mid = *_First;
      *_First = v32;
      __asm { vmovss  xmm0, dword ptr [rdx+4] }
    }
    __asm { vcomiss xmm0, dword ptr [r8+4] }
    if ( !v7 )
    {
      v33 = *_Last;
      *_Last = *_Mid;
      *_Mid = v33;
      __asm
      {
        vmovss  xmm0, dword ptr [r9+4]
        vcomiss xmm0, dword ptr [rdx+4]
      }
      *_Mid = *_First;
      *_First = v33;
    }
  }
  else
  {
    v8 = (v6 + 1) >> 3;
    _RDI = 16 * v8;
    v9 = __CFSHL__(v8, 4) || 16 * v8 == 0;
    _R8 = 8 * v8;
    __asm
    {
      vmovss  xmm0, dword ptr [r8+rcx+4]
      vcomiss xmm0, dword ptr [rcx+4]
    }
    if ( __CFSHL__(v8, 4) )
    {
      v13 = _First[_R8 / 8];
      _First[_R8 / 8] = *_First;
      *_First = v13;
      __asm { vmovss  xmm0, dword ptr [r8+r9+4] }
    }
    __asm { vcomiss xmm0, dword ptr [rdi+r9+4] }
    if ( !v9 )
    {
      v14 = _First[_RDI / 8];
      _First[_RDI / 8] = _First[_R8 / 8];
      _First[_R8 / 8] = v14;
      __asm
      {
        vmovss  xmm0, dword ptr [r9+4]
        vcomiss xmm0, dword ptr [r8+r9+4]
      }
      _First[_R8 / 8] = *_First;
      *_First = v14;
    }
    __asm { vmovss  xmm0, dword ptr [rdx+4] }
    _R10 = &_Mid[_R8 / 0xFFFFFFFFFFFFFFF8ui64];
    __asm { vcomiss xmm0, dword ptr [r10+4] }
    if ( (unsigned __int64)_Mid < _R8 )
    {
      v18 = *_Mid;
      *_Mid = *_R10;
      *_R10 = v18;
      __asm { vmovss  xmm0, dword ptr [rdx+4] }
    }
    __asm { vcomiss xmm0, dword ptr [r8+rdx+4] }
    if ( (unsigned __int64)_Mid > _R8 )
    {
      v19 = _Mid[_R8 / 8];
      _Mid[_R8 / 8] = *_Mid;
      *_Mid = v19;
      __asm
      {
        vmovss  xmm0, dword ptr [r10+4]
        vcomiss xmm0, dword ptr [rdx+4]
      }
      if ( (unsigned __int64)_Mid > _R8 )
      {
        *_Mid = *_R10;
        *_R10 = v19;
      }
    }
    _R10 = &_R11[_R8 / 0xFFFFFFFFFFFFFFF8ui64];
    _RBX = &_R11[_RDI / 0xFFFFFFFFFFFFFFF8ui64];
    __asm
    {
      vmovss  xmm0, dword ptr [r10+4]
      vcomiss xmm0, dword ptr [rbx+4]
    }
    if ( (unsigned __int64)_R11 < _RDI )
    {
      v24 = *_R10;
      *_R10 = *_RBX;
      *_RBX = v24;
      __asm { vmovss  xmm0, dword ptr [r10+4] }
    }
    __asm { vcomiss xmm0, dword ptr [r11+4] }
    if ( (unsigned __int64)_R11 > _RDI )
    {
      v25 = *_R11;
      *_R11 = *_R10;
      *_R10 = v25;
      __asm
      {
        vmovss  xmm0, dword ptr [rbx+4]
        vcomiss xmm0, dword ptr [r10+4]
      }
      if ( (unsigned __int64)_R11 > _RDI )
      {
        *_R10 = *_RBX;
        *_RBX = v25;
      }
    }
    __asm
    {
      vmovss  xmm0, dword ptr [rdx+4]
      vcomiss xmm0, dword ptr [r8+r9+4]
    }
    if ( (unsigned __int64)_R11 < _RDI )
    {
      v28 = *_Mid;
      *_Mid = _First[_R8 / 8];
      _First[_R8 / 8] = v28;
      __asm { vmovss  xmm0, dword ptr [rdx+4] }
    }
    __asm { vcomiss xmm0, dword ptr [r10+4] }
    if ( (unsigned __int64)_R11 > _RDI )
    {
      v29 = *_R10;
      *_R10 = *_Mid;
      *_Mid = v29;
      __asm
      {
        vmovss  xmm0, dword ptr [r8+r9+4]
        vcomiss xmm0, dword ptr [rdx+4]
      }
      if ( (unsigned __int64)_R11 > _RDI )
      {
        *_Mid = _First[_R8 / 8];
        _First[_R8 / 8] = v29;
      }
    }
  }
}

/*
==============
std::_Partition_by_median_guess_unchecked<CgVehiclePriorityInfo *,CgVehicleMPSortFunctor>
==============
*/
std::pair<CgVehiclePriorityInfo *,CgVehiclePriorityInfo *> *std::_Partition_by_median_guess_unchecked<CgVehiclePriorityInfo *,CgVehicleMPSortFunctor>(std::pair<CgVehiclePriorityInfo *,CgVehiclePriorityInfo *> *result, CgVehiclePriorityInfo *_First, CgVehiclePriorityInfo *_Last, CgVehicleMPSortFunctor _Pred)
{
  bool i; 
  bool v12; 
  CgVehiclePriorityInfo *v16; 
  unsigned __int64 v17; 
  bool v18; 
  CgVehiclePriorityInfo v22; 
  CgVehiclePriorityInfo v24; 
  CgVehiclePriorityInfo *v26; 
  CgVehiclePriorityInfo v27; 
  CgVehiclePriorityInfo *v29; 
  CgVehiclePriorityInfo v30; 
  bool j; 
  CgVehiclePriorityInfo v34; 
  bool v35; 
  bool v36; 
  CgVehiclePriorityInfo v40; 
  CgVehiclePriorityInfo v41; 
  CgVehiclePriorityInfo v42; 
  CgVehiclePriorityInfo v43; 
  CgVehiclePriorityInfo v44; 
  CgVehiclePriorityInfo v45; 
  CgVehiclePriorityInfo v46; 
  std::pair<CgVehiclePriorityInfo *,CgVehiclePriorityInfo *> *v47; 

  _RBX = &_First[((char *)_Last - (char *)_First) >> 4];
  std::_Guess_median_unchecked<CgVehiclePriorityInfo *,CgVehicleMPSortFunctor>(_First, _RBX, _Last - 1, _Pred);
  _R8 = _RBX + 1;
  for ( i = _First < _RBX; _First < _RBX; i = _First < _RBX )
  {
    __asm
    {
      vmovss  xmm0, dword ptr [rbx-4]
      vmovss  xmm1, dword ptr [rbx+4]
      vcomiss xmm0, xmm1
    }
    if ( i )
      break;
    __asm { vcomiss xmm1, xmm0 }
    --_RBX;
  }
  v12 = _R8 < _Last;
  if ( _R8 < _Last )
  {
    __asm { vmovss  xmm1, dword ptr [rbx+4] }
    do
    {
      __asm
      {
        vmovss  xmm0, dword ptr [r8+4]
        vcomiss xmm0, xmm1
      }
      if ( v12 )
        break;
      __asm { vcomiss xmm1, xmm0 }
      v12 = ++_R8 < _Last;
    }
    while ( _R8 < _Last );
  }
  _RDX = _R8;
  v16 = _RBX;
  while ( 1 )
  {
    while ( 1 )
    {
      if ( _RDX < _Last )
      {
        v17 = ((char *)_Last - (char *)_RDX + 7) & 0xFFFFFFFFFFFFFFF8ui64;
        v18 = v17 < 0x20;
        if ( v17 >= 0x20 )
        {
          _R9 = _RDX + 1;
          do
          {
            __asm
            {
              vmovss  xmm0, dword ptr [rbx+4]
              vmovss  xmm1, dword ptr [r9-4]
              vcomiss xmm0, xmm1
            }
            if ( !v18 )
            {
              __asm { vcomiss xmm1, xmm0 }
              if ( _R8 != _RDX )
              {
                v22 = *_R8;
                *_R8 = *_RDX;
                *_RDX = v22;
                __asm { vmovss  xmm0, dword ptr [rbx+4] }
              }
              v18 = __CFADD__(_R8++, 8i64);
            }
            __asm
            {
              vmovss  xmm1, dword ptr [r9+4]
              vcomiss xmm0, xmm1
            }
            if ( !v18 )
            {
              __asm { vcomiss xmm1, xmm0 }
              if ( _R8 != _R9 )
              {
                v24 = *_R8;
                *_R8 = *_R9;
                *_R9 = v24;
                __asm { vmovss  xmm0, dword ptr [rbx+4] }
              }
              v18 = __CFADD__(_R8++, 8i64);
            }
            __asm
            {
              vmovss  xmm1, dword ptr [r9+0Ch]
              vcomiss xmm0, xmm1
            }
            if ( !v18 )
            {
              __asm { vcomiss xmm1, xmm0 }
              v26 = _R9 + 1;
              if ( _R8 != &_R9[1] )
              {
                v27 = *_R8;
                *_R8 = *v26;
                *v26 = v27;
                __asm { vmovss  xmm0, dword ptr [rbx+4] }
              }
              v18 = __CFADD__(_R8++, 8i64);
            }
            __asm
            {
              vmovss  xmm1, dword ptr [r9+14h]
              vcomiss xmm0, xmm1
            }
            if ( !v18 )
            {
              __asm { vcomiss xmm1, xmm0 }
              v29 = _R9 + 2;
              if ( _R8 != &_R9[2] )
              {
                v30 = *_R8;
                *_R8 = *v29;
                *v29 = v30;
              }
              ++_R8;
            }
            _RDX += 4;
            _R9 += 4;
            v18 = _RDX < &_Last[-3];
          }
          while ( _RDX < &_Last[-3] );
        }
        for ( j = _RDX < _Last; _RDX < _Last; j = _RDX < _Last )
        {
          __asm
          {
            vmovss  xmm0, dword ptr [rbx+4]
            vmovss  xmm1, dword ptr [rdx+4]
            vcomiss xmm0, xmm1
          }
          if ( !j )
          {
            __asm { vcomiss xmm1, xmm0 }
            if ( _R8 != _RDX )
            {
              v34 = *_R8;
              *_R8 = *_RDX;
              *_RDX = v34;
            }
            ++_R8;
          }
          ++_RDX;
        }
      }
      v35 = v16 < _First;
      v36 = v16 == _First;
      if ( v16 > _First )
      {
        _R9 = v16 - 1;
        do
        {
          __asm
          {
            vmovss  xmm0, dword ptr [r9+4]
            vmovss  xmm1, dword ptr [rbx+4]
            vcomiss xmm0, xmm1
          }
          if ( !v35 )
          {
            __asm { vcomiss xmm1, xmm0 }
            if ( --_RBX != _R9 )
            {
              v40 = *_RBX;
              *_RBX = *_R9;
              *_R9 = v40;
            }
          }
          --v16;
          --_R9;
          v35 = _First < v16;
        }
        while ( _First < v16 );
        v36 = v16 == _First;
      }
      if ( v36 )
        break;
      --v16;
      if ( _RDX == _Last )
      {
        if ( v16 != --_RBX )
        {
          v43 = *v16;
          *v16 = *_RBX;
          *_RBX = v43;
        }
        v44 = _R8[-1];
        --_R8;
        v45 = *_RBX;
        *_RBX = v44;
        *_R8 = v45;
      }
      else
      {
        v46 = *_RDX;
        *_RDX++ = *v16;
        *v16 = v46;
      }
    }
    if ( _RDX == _Last )
      break;
    if ( _R8 != _RDX )
    {
      v41 = *_RBX;
      *_RBX = *_R8;
      *_R8 = v41;
    }
    ++_R8;
    v42 = *_RBX;
    *_RBX++ = *_RDX;
    *_RDX++ = v42;
  }
  v47 = result;
  result->first = _RBX;
  result->second = _R8;
  return v47;
}

/*
==============
std::_Pop_heap_hole_by_index<CgVehiclePriorityInfo *,CgVehiclePriorityInfo,CgVehicleMPSortFunctor>
==============
*/
void std::_Pop_heap_hole_by_index<CgVehiclePriorityInfo *,CgVehiclePriorityInfo,CgVehicleMPSortFunctor>(CgVehiclePriorityInfo *_First, __int64 _Hole, __int64 _Bottom, CgVehiclePriorityInfo *_Val)
{
  unsigned __int64 v5; 
  __int64 v7; 
  __int64 v8; 
  bool i; 
  __int64 v12; 

  _R10 = _First;
  v5 = (_Bottom - 1) >> 1;
  v7 = _Hole;
  v8 = _Hole;
  for ( i = _Hole <= v5; v8 < (__int64)v5; i = v8 <= v5 )
  {
    _R8 = 2 * v8;
    __asm
    {
      vmovss  xmm0, dword ptr [r10+r8*8+0Ch]
      vcomiss xmm0, dword ptr [r10+r8*8+14h]
    }
    v12 = 2 * v8 + 2;
    v8 = 2 * v8 + 1;
    if ( i )
      v8 = v12;
    _R10[_Hole] = _R10[v8];
    _Hole = v8;
  }
  if ( v8 == v5 && (_Bottom & 1) == 0 )
  {
    _R10[_Hole] = _R10[_Bottom - 1];
    _Hole = _Bottom - 1;
  }
  if ( v7 < _Hole )
  {
    while ( 1 )
    {
      __asm { vmovss  xmm0, dword ptr [r9+4] }
      _RCX = (_Hole - 1) >> 1;
      __asm { vcomiss xmm0, dword ptr [r10+rcx*8+4] }
      if ( ((_BYTE)_Hole - 1) & 1 | (_RCX == 0) )
        break;
      _R10[_Hole] = _R10[_RCX];
      _Hole = (_Hole - 1) >> 1;
      if ( v7 >= _RCX )
      {
        _R10[_RCX] = *_Val;
        return;
      }
    }
  }
  _R10[_Hole] = *_Val;
}

/*
==============
std::_Sort_unchecked<CgVehiclePriorityInfo *,CgVehicleMPSortFunctor>
==============
*/
void std::_Sort_unchecked<CgVehiclePriorityInfo *,CgVehicleMPSortFunctor>(CgVehiclePriorityInfo *_First, CgVehiclePriorityInfo *_Last, __int64 _Ideal, CgVehicleMPSortFunctor _Pred)
{
  __int64 v6; 
  CgVehiclePriorityInfo *v7; 
  CgVehiclePriorityInfo *first; 
  CgVehiclePriorityInfo *second; 
  CgVehiclePriorityInfo *v11; 
  bool v12; 
  CgVehiclePriorityInfo v14; 
  CgVehiclePriorityInfo *v15; 
  __int64 v17; 
  __int64 v18; 
  unsigned __int64 v19; 
  CgVehiclePriorityInfo v20; 
  __int64 v21; 
  __int64 v22; 
  bool i; 
  __int64 v26; 
  bool v28; 
  CgVehiclePriorityInfo *v30; 
  std::pair<CgVehiclePriorityInfo *,CgVehiclePriorityInfo *> result; 
  CgVehiclePriorityInfo _Val; 

  v6 = _Last - _First;
  v7 = _Last;
  _RDI = _First;
  if ( v6 <= 32 )
  {
LABEL_7:
    if ( v6 >= 2 && _RDI != v7 )
    {
      v11 = _RDI + 1;
      v12 = &_RDI[1] < v7;
      if ( &_RDI[1] != v7 )
      {
        _RSI = 1i64;
        do
        {
          v14 = *v11;
          v15 = v11;
          _Val = *v11;
          __asm
          {
            vmovss  xmm0, [rsp+58h+_Val.distanceSq]
            vcomiss xmm0, dword ptr [rdi+4]
          }
          if ( v12 )
          {
            memmove_0(&_RDI[1], _RDI, _RSI * 8);
            *_RDI = v14;
          }
          else
          {
            __asm { vcomiss xmm0, dword ptr [rdi+rsi-4] }
            _RCX = &_RDI[_RSI - 1];
            while ( v12 )
            {
              *v15 = *_RCX;
              v15 = _RCX;
              v12 = (unsigned __int64)_RCX-- < 8;
              __asm { vcomiss xmm0, dword ptr [rcx+4] }
            }
            *v15 = v14;
          }
          ++v11;
          ++_RSI;
          v12 = v11 < v7;
        }
        while ( v11 != v7 );
      }
    }
  }
  else
  {
    while ( _Ideal > 0 )
    {
      std::_Partition_by_median_guess_unchecked<CgVehiclePriorityInfo *,CgVehicleMPSortFunctor>(&result, _RDI, v7, _Pred);
      first = result.first;
      second = result.second;
      _Ideal = (_Ideal >> 2) + (_Ideal >> 1);
      if ( (__int64)(((char *)result.first - (char *)_RDI) & 0xFFFFFFFFFFFFFFF8ui64) >= (__int64)(((char *)v7 - (char *)result.second) & 0xFFFFFFFFFFFFFFF8ui64) )
      {
        std::_Sort_unchecked<CgVehiclePriorityInfo *,CgVehicleMPSortFunctor>(result.second, v7, _Ideal, _Pred);
        v7 = first;
      }
      else
      {
        std::_Sort_unchecked<CgVehiclePriorityInfo *,CgVehicleMPSortFunctor>(_RDI, result.first, _Ideal, _Pred);
        _RDI = second;
      }
      v6 = v7 - _RDI;
      if ( v6 <= 32 )
        goto LABEL_7;
    }
    v17 = v7 - _RDI;
    v18 = ((char *)v7 - (char *)_RDI) >> 4;
    if ( v18 > 0 )
    {
      v19 = (v17 - 1) >> 1;
      do
      {
        v20 = _RDI[--v18];
        _Val = v20;
        v21 = v18;
        v22 = v18;
        for ( i = v18 <= v19; v22 < (__int64)v19; i = v22 <= v19 )
        {
          _RDX = 2 * v22;
          __asm
          {
            vmovss  xmm0, dword ptr [rdi+rdx*8+0Ch]
            vcomiss xmm0, dword ptr [rdi+rdx*8+14h]
          }
          v26 = 2 * v22 + 2;
          v22 = 2 * v22 + 1;
          if ( i )
            v22 = v26;
          _RDI[v21] = _RDI[v22];
          v21 = v22;
        }
        if ( v22 == v19 && (v17 & 1) == 0 )
        {
          _RDI[v21] = _RDI[v17 - 1];
          v21 = v17 - 1;
        }
        _RDX = (v21 - 1) >> 1;
        v28 = v18 <= (unsigned __int64)v21;
        if ( v18 < v21 )
        {
          __asm { vmovss  xmm0, [rsp+58h+_Val.distanceSq] }
          do
          {
            __asm { vcomiss xmm0, dword ptr [rdi+rdx*8+4] }
            if ( v28 )
              break;
            _RDI[v21] = _RDI[_RDX];
            v21 = _RDX;
            _RDX = (_RDX - 1) >> 1;
            v28 = v18 <= (unsigned __int64)v21;
          }
          while ( v18 < v21 );
        }
        _RDI[v21] = v20;
      }
      while ( v18 > 0 );
    }
    if ( v17 >= 2 )
    {
      v30 = v7 - 1;
      do
      {
        _Val = *v30;
        *v30 = *_RDI;
        std::_Pop_heap_hole_by_index<CgVehiclePriorityInfo *,CgVehiclePriorityInfo,CgVehicleMPSortFunctor>(_RDI, 0i64, v30 - _RDI, &_Val, _Pred);
        --v30;
      }
      while ( ((__int64)v30 + 8 - (__int64)_RDI) >> 3 >= 2 );
    }
  }
}

/*
==============
std::_Make_heap_unchecked<PostMatchInfo_t *,LUIScoreCompare>
==============
*/
void std::_Make_heap_unchecked<PostMatchInfo_t *,LUIScoreCompare>(PostMatchInfo_t *_First, PostMatchInfo_t *_Last, LUIScoreCompare _Pred)
{
  signed __int64 v4; 
  __int64 v5; 
  __int64 v6; 
  signed __int64 v7; 
  __int64 v8; 
  PostMatchInfo_t *v9; 
  __int64 v11; 
  __int64 v12; 
  PostMatchInfo_t *v19; 
  signed __int64 v33; 
  __int64 v34; 
  __int64 v48; 
  int v49; 
  int deaths2; 
  int score2; 
  __int64 v54; 
  signed __int64 v74; 
  signed __int64 v75; 
  __int64 v76; 
  PostMatchInfo_t *v77; 
  int client2[44]; 

  v5 = (__int64)((unsigned __int128)(((char *)_Last - (char *)_First) * (__int128)0x2E8BA2E8BA2E8BA3i64) >> 64) >> 5;
  v4 = _Last - _First;
  v74 = v4;
  v6 = v5 / 2;
  if ( v5 / 2 > 0 )
  {
    v7 = v4 - 1;
    v8 = (v4 - 1) >> 1;
    v9 = &_First[v6];
    v75 = v4 - 1;
    v76 = v8;
    do
    {
      _RCX = client2;
      --v6;
      v77 = v9 - 1;
      v11 = v6;
      v12 = v6;
      __asm
      {
        vmovups ymm0, ymmword ptr [rax]
        vmovups ymmword ptr [rcx], ymm0
        vmovups ymm0, ymmword ptr [rax+20h]
        vmovups ymmword ptr [rcx+20h], ymm0
        vmovups ymm0, ymmword ptr [rax+40h]
        vmovups ymmword ptr [rcx+40h], ymm0
        vmovups ymm0, ymmword ptr [rax+60h]
        vmovups ymmword ptr [rcx+60h], ymm0
        vmovups ymm0, ymmword ptr [rax+80h]
        vmovups ymmword ptr [rcx+80h], ymm0
        vmovups xmm0, xmmword ptr [rax+0A0h]
        vmovups xmmword ptr [rcx+0A0h], xmm0
      }
      if ( v6 < v8 )
      {
        do
        {
          v12 = 2 * v12 + 2;
          v19 = &_First[v12];
          if ( CG_ServerCmdMP_CompareScores(v19->scoreInfo.client, v19[-1].scoreInfo.client, v19->scoreInfo.team, v19[-1].scoreInfo.team, v19->scoreInfo.score, v19[-1].scoreInfo.score, v19->scoreInfo.deaths, v19[-1].scoreInfo.deaths) )
            --v12;
          _RDX = &_First[v11];
          v11 = v12;
          _RAX = &_First[v12];
          __asm
          {
            vmovups xmm0, xmmword ptr [rax]
            vmovups xmmword ptr [rdx], xmm0
            vmovups xmm1, xmmword ptr [rax+10h]
            vmovups xmmword ptr [rdx+10h], xmm1
            vmovups xmm0, xmmword ptr [rax+20h]
            vmovups xmmword ptr [rdx+20h], xmm0
            vmovups xmm1, xmmword ptr [rax+30h]
            vmovups xmmword ptr [rdx+30h], xmm1
            vmovups xmm0, xmmword ptr [rax+40h]
            vmovups xmmword ptr [rdx+40h], xmm0
            vmovups xmm1, xmmword ptr [rax+50h]
            vmovups xmmword ptr [rdx+50h], xmm1
            vmovups xmm0, xmmword ptr [rax+60h]
            vmovups xmmword ptr [rdx+60h], xmm0
            vmovups xmm1, xmmword ptr [rax+70h]
            vmovups xmmword ptr [rdx+70h], xmm1
            vmovups xmm0, xmmword ptr [rax+80h]
            vmovups xmmword ptr [rdx+80h], xmm0
            vmovups xmm1, xmmword ptr [rax+90h]
            vmovups xmmword ptr [rdx+90h], xmm1
            vmovups xmm0, xmmword ptr [rax+0A0h]
            vmovups xmmword ptr [rdx+0A0h], xmm0
          }
        }
        while ( v12 < v8 );
        v4 = v74;
        v7 = v75;
      }
      if ( v12 == v8 && (v4 & 1) == 0 )
      {
        v33 = v4;
        v34 = v11;
        _RAX = &_First[v33 - 1];
        v11 = v7;
        __asm { vmovups xmm0, xmmword ptr [rax] }
        _RDX = &_First[v34];
        __asm
        {
          vmovups xmmword ptr [rdx], xmm0
          vmovups xmm1, xmmword ptr [rax+10h]
          vmovups xmmword ptr [rdx+10h], xmm1
          vmovups xmm0, xmmword ptr [rax+20h]
          vmovups xmmword ptr [rdx+20h], xmm0
          vmovups xmm1, xmmword ptr [rax+30h]
          vmovups xmmword ptr [rdx+30h], xmm1
          vmovups xmm0, xmmword ptr [rax+40h]
          vmovups xmmword ptr [rdx+40h], xmm0
          vmovups xmm1, xmmword ptr [rax+50h]
          vmovups xmmword ptr [rdx+50h], xmm1
          vmovups xmm0, xmmword ptr [rax+60h]
          vmovups xmmword ptr [rdx+60h], xmm0
          vmovups xmm1, xmmword ptr [rax+70h]
          vmovups xmmword ptr [rdx+70h], xmm1
          vmovups xmm0, xmmword ptr [rax+80h]
          vmovups xmmword ptr [rdx+80h], xmm0
          vmovups xmm1, xmmword ptr [rax+90h]
          vmovups xmmword ptr [rdx+90h], xmm1
          vmovups xmm0, xmmword ptr [rax+0A0h]
          vmovups xmmword ptr [rdx+0A0h], xmm0
        }
      }
      v48 = (v11 - 1) >> 1;
      if ( v6 < v11 )
      {
        v49 = client2[5];
        deaths2 = client2[4];
        score2 = client2[2];
        do
        {
          _RBX = &_First[v48];
          if ( !CG_ServerCmdMP_CompareScores(_RBX->scoreInfo.client, client2[0], _RBX->scoreInfo.team, v49, _RBX->scoreInfo.score, score2, _RBX->scoreInfo.deaths, deaths2) )
            break;
          __asm { vmovups xmm0, xmmword ptr [rbx] }
          v54 = v11;
          v11 = v48;
          _RCX = &_First[v54];
          v48 = (v48 - 1) >> 1;
          __asm
          {
            vmovups xmmword ptr [rcx], xmm0
            vmovups xmm1, xmmword ptr [rbx+10h]
            vmovups xmmword ptr [rcx+10h], xmm1
            vmovups xmm0, xmmword ptr [rbx+20h]
            vmovups xmmword ptr [rcx+20h], xmm0
            vmovups xmm1, xmmword ptr [rbx+30h]
            vmovups xmmword ptr [rcx+30h], xmm1
            vmovups xmm0, xmmword ptr [rbx+40h]
            vmovups xmmword ptr [rcx+40h], xmm0
            vmovups xmm1, xmmword ptr [rbx+50h]
            vmovups xmmword ptr [rcx+50h], xmm1
            vmovups xmm0, xmmword ptr [rbx+60h]
            vmovups xmmword ptr [rcx+60h], xmm0
            vmovups xmm1, xmmword ptr [rbx+70h]
            vmovups xmmword ptr [rcx+70h], xmm1
            vmovups xmm0, xmmword ptr [rbx+80h]
            vmovups xmmword ptr [rcx+80h], xmm0
            vmovups xmm1, xmmword ptr [rbx+90h]
            vmovups xmmword ptr [rcx+90h], xmm1
            vmovups xmm0, xmmword ptr [rbx+0A0h]
            vmovups xmmword ptr [rcx+0A0h], xmm0
          }
        }
        while ( v6 < v11 );
      }
      v4 = v74;
      _RAX = client2;
      __asm { vmovups ymm0, ymmword ptr [rax] }
      v8 = v76;
      v7 = v74 - 1;
      _RCX = &_First[v11];
      __asm
      {
        vmovups ymmword ptr [rcx], ymm0
        vmovups ymm0, ymmword ptr [rax+20h]
        vmovups ymmword ptr [rcx+20h], ymm0
        vmovups ymm0, ymmword ptr [rax+40h]
        vmovups ymmword ptr [rcx+40h], ymm0
        vmovups ymm0, ymmword ptr [rax+60h]
        vmovups ymmword ptr [rcx+60h], ymm0
        vmovups ymm0, ymmword ptr [rax+80h]
        vmovups ymmword ptr [rcx+80h], ymm0
        vmovups xmm0, xmmword ptr [rax+0A0h]
      }
      v9 = v77;
      __asm { vmovups xmmword ptr [rcx+0A0h], xmm0 }
    }
    while ( v6 > 0 );
  }
}

/*
==============
std::_Med3_unchecked<PostMatchInfo_t *,LUIScoreCompare>
==============
*/
void std::_Med3_unchecked<PostMatchInfo_t *,LUIScoreCompare>(PostMatchInfo_t *_First, PostMatchInfo_t *_Mid, PostMatchInfo_t *_Last, LUIScoreCompare _Pred)
{
  char v82[176]; 

  _RBX = _Mid;
  _RSI = _Last;
  _RDI = _First;
  if ( CG_ServerCmdMP_CompareScores(_Mid->scoreInfo.client, _First->scoreInfo.client, _Mid->scoreInfo.team, _First->scoreInfo.team, _Mid->scoreInfo.score, _First->scoreInfo.score, _Mid->scoreInfo.deaths, _First->scoreInfo.deaths) )
  {
    __asm { vmovups ymm0, ymmword ptr [rbx] }
    _RCX = v82;
    __asm
    {
      vmovups ymmword ptr [rcx], ymm0
      vmovups ymm0, ymmword ptr [rbx+20h]
      vmovups ymmword ptr [rcx+20h], ymm0
      vmovups ymm0, ymmword ptr [rbx+40h]
      vmovups ymmword ptr [rcx+40h], ymm0
      vmovups ymm0, ymmword ptr [rbx+60h]
      vmovups ymmword ptr [rcx+60h], ymm0
      vmovups ymm0, ymmword ptr [rbx+80h]
      vmovups ymmword ptr [rcx+80h], ymm0
      vmovups xmm0, xmmword ptr [rbx+0A0h]
      vmovups xmmword ptr [rcx+0A0h], xmm0
      vmovups xmm0, xmmword ptr [rdi]
      vmovups xmmword ptr [rbx], xmm0
      vmovups xmm1, xmmword ptr [rdi+10h]
      vmovups xmmword ptr [rbx+10h], xmm1
      vmovups xmm0, xmmword ptr [rdi+20h]
      vmovups xmmword ptr [rbx+20h], xmm0
      vmovups xmm1, xmmword ptr [rdi+30h]
      vmovups xmmword ptr [rbx+30h], xmm1
      vmovups xmm0, xmmword ptr [rdi+40h]
      vmovups xmmword ptr [rbx+40h], xmm0
      vmovups xmm1, xmmword ptr [rdi+50h]
      vmovups xmmword ptr [rbx+50h], xmm1
      vmovups xmm0, xmmword ptr [rdi+60h]
      vmovups xmmword ptr [rbx+60h], xmm0
      vmovups xmm1, xmmword ptr [rdi+70h]
      vmovups xmmword ptr [rbx+70h], xmm1
      vmovups xmm0, xmmword ptr [rdi+80h]
      vmovups xmmword ptr [rbx+80h], xmm0
      vmovups xmm1, xmmword ptr [rdi+90h]
      vmovups xmmword ptr [rbx+90h], xmm1
      vmovups xmm0, xmmword ptr [rdi+0A0h]
      vmovups xmmword ptr [rbx+0A0h], xmm0
    }
    _RAX = v82;
    __asm
    {
      vmovups ymm0, ymmword ptr [rax]
      vmovups ymmword ptr [rdi], ymm0
      vmovups ymm0, ymmword ptr [rax+20h]
      vmovups ymmword ptr [rdi+20h], ymm0
      vmovups ymm0, ymmword ptr [rax+40h]
      vmovups ymmword ptr [rdi+40h], ymm0
      vmovups ymm0, ymmword ptr [rax+60h]
      vmovups ymmword ptr [rdi+60h], ymm0
      vmovups ymm0, ymmword ptr [rax+80h]
      vmovups ymmword ptr [rdi+80h], ymm0
      vmovups xmm0, xmmword ptr [rax+0A0h]
      vmovups xmmword ptr [rdi+0A0h], xmm0
    }
  }
  if ( CG_ServerCmdMP_CompareScores(_RSI->scoreInfo.client, _RBX->scoreInfo.client, _RSI->scoreInfo.team, _RBX->scoreInfo.team, _RSI->scoreInfo.score, _RBX->scoreInfo.score, _RSI->scoreInfo.deaths, _RBX->scoreInfo.deaths) )
  {
    __asm { vmovups ymm0, ymmword ptr [rsi] }
    _RCX = v82;
    __asm
    {
      vmovups ymmword ptr [rcx], ymm0
      vmovups ymm0, ymmword ptr [rsi+20h]
      vmovups ymmword ptr [rcx+20h], ymm0
      vmovups ymm0, ymmword ptr [rsi+40h]
      vmovups ymmword ptr [rcx+40h], ymm0
      vmovups ymm0, ymmword ptr [rsi+60h]
      vmovups ymmword ptr [rcx+60h], ymm0
      vmovups ymm0, ymmword ptr [rsi+80h]
      vmovups ymmword ptr [rcx+80h], ymm0
      vmovups xmm0, xmmword ptr [rsi+0A0h]
      vmovups xmmword ptr [rcx+0A0h], xmm0
      vmovups xmm0, xmmword ptr [rbx]
      vmovups xmmword ptr [rsi], xmm0
      vmovups xmm1, xmmword ptr [rbx+10h]
      vmovups xmmword ptr [rsi+10h], xmm1
      vmovups xmm0, xmmword ptr [rbx+20h]
      vmovups xmmword ptr [rsi+20h], xmm0
      vmovups xmm1, xmmword ptr [rbx+30h]
      vmovups xmmword ptr [rsi+30h], xmm1
      vmovups xmm0, xmmword ptr [rbx+40h]
      vmovups xmmword ptr [rsi+40h], xmm0
      vmovups xmm1, xmmword ptr [rbx+50h]
      vmovups xmmword ptr [rsi+50h], xmm1
      vmovups xmm0, xmmword ptr [rbx+60h]
      vmovups xmmword ptr [rsi+60h], xmm0
      vmovups xmm1, xmmword ptr [rbx+70h]
      vmovups xmmword ptr [rsi+70h], xmm1
      vmovups xmm0, xmmword ptr [rbx+80h]
      vmovups xmmword ptr [rsi+80h], xmm0
      vmovups xmm1, xmmword ptr [rbx+90h]
      vmovups xmmword ptr [rsi+90h], xmm1
      vmovups xmm0, xmmword ptr [rbx+0A0h]
      vmovups xmmword ptr [rsi+0A0h], xmm0
    }
    _RAX = v82;
    __asm
    {
      vmovups ymm0, ymmword ptr [rax]
      vmovups ymmword ptr [rbx], ymm0
      vmovups ymm0, ymmword ptr [rax+20h]
      vmovups ymmword ptr [rbx+20h], ymm0
      vmovups ymm0, ymmword ptr [rax+40h]
      vmovups ymmword ptr [rbx+40h], ymm0
      vmovups ymm0, ymmword ptr [rax+60h]
      vmovups ymmword ptr [rbx+60h], ymm0
      vmovups ymm0, ymmword ptr [rax+80h]
      vmovups ymmword ptr [rbx+80h], ymm0
      vmovups xmm0, xmmword ptr [rax+0A0h]
      vmovups xmmword ptr [rbx+0A0h], xmm0
    }
    if ( CG_ServerCmdMP_CompareScores(_RBX->scoreInfo.client, _RDI->scoreInfo.client, _RBX->scoreInfo.team, _RDI->scoreInfo.team, _RBX->scoreInfo.score, _RDI->scoreInfo.score, _RBX->scoreInfo.deaths, _RDI->scoreInfo.deaths) )
    {
      __asm { vmovups ymm0, ymmword ptr [rbx] }
      _RCX = v82;
      __asm
      {
        vmovups ymmword ptr [rcx], ymm0
        vmovups ymm0, ymmword ptr [rbx+20h]
        vmovups ymmword ptr [rcx+20h], ymm0
        vmovups ymm0, ymmword ptr [rbx+40h]
        vmovups ymmword ptr [rcx+40h], ymm0
        vmovups ymm0, ymmword ptr [rbx+60h]
        vmovups ymmword ptr [rcx+60h], ymm0
        vmovups ymm0, ymmword ptr [rbx+80h]
        vmovups ymmword ptr [rcx+80h], ymm0
        vmovups xmm0, xmmword ptr [rbx+0A0h]
        vmovups xmmword ptr [rcx+0A0h], xmm0
        vmovups xmm0, xmmword ptr [rdi]
        vmovups xmmword ptr [rbx], xmm0
        vmovups xmm1, xmmword ptr [rdi+10h]
        vmovups xmmword ptr [rbx+10h], xmm1
        vmovups xmm0, xmmword ptr [rdi+20h]
        vmovups xmmword ptr [rbx+20h], xmm0
        vmovups xmm1, xmmword ptr [rdi+30h]
        vmovups xmmword ptr [rbx+30h], xmm1
        vmovups xmm0, xmmword ptr [rdi+40h]
        vmovups xmmword ptr [rbx+40h], xmm0
        vmovups xmm1, xmmword ptr [rdi+50h]
        vmovups xmmword ptr [rbx+50h], xmm1
        vmovups xmm0, xmmword ptr [rdi+60h]
        vmovups xmmword ptr [rbx+60h], xmm0
        vmovups xmm1, xmmword ptr [rdi+70h]
        vmovups xmmword ptr [rbx+70h], xmm1
        vmovups xmm0, xmmword ptr [rdi+80h]
        vmovups xmmword ptr [rbx+80h], xmm0
        vmovups xmm1, xmmword ptr [rdi+90h]
        vmovups xmmword ptr [rbx+90h], xmm1
        vmovups xmm0, xmmword ptr [rdi+0A0h]
        vmovups xmmword ptr [rbx+0A0h], xmm0
      }
      _RAX = v82;
      __asm
      {
        vmovups ymm0, ymmword ptr [rax]
        vmovups ymmword ptr [rdi], ymm0
        vmovups ymm0, ymmword ptr [rax+20h]
        vmovups ymmword ptr [rdi+20h], ymm0
        vmovups ymm0, ymmword ptr [rax+40h]
        vmovups ymmword ptr [rdi+40h], ymm0
        vmovups ymm0, ymmword ptr [rax+60h]
        vmovups ymmword ptr [rdi+60h], ymm0
        vmovups ymm0, ymmword ptr [rax+80h]
        vmovups ymmword ptr [rdi+80h], ymm0
        vmovups xmm0, xmmword ptr [rax+0A0h]
        vmovups xmmword ptr [rdi+0A0h], xmm0
      }
    }
  }
}

/*
==============
std::_Partition_by_median_guess_unchecked<PostMatchInfo_t *,LUIScoreCompare>
==============
*/
std::pair<PostMatchInfo_t *,PostMatchInfo_t *> *std::_Partition_by_median_guess_unchecked<PostMatchInfo_t *,LUIScoreCompare>(std::pair<PostMatchInfo_t *,PostMatchInfo_t *> *result, PostMatchInfo_t *_First, PostMatchInfo_t *_Last, LUIScoreCompare _Pred)
{
  LUIScoreCompare v5; 
  PostMatchInfo_t *v7; 
  PostMatchInfo_t *v9; 
  signed __int64 v10; 
  __int64 v11; 
  __int64 v12; 
  unsigned __int64 v13; 
  PostMatchInfo_t *v14; 
  const int *p_client; 
  const int *v17; 
  bool v45; 
  const int *p_score; 
  std::pair<PostMatchInfo_t *,PostMatchInfo_t *> *v198; 
  char v199[176]; 
  char v200[176]; 
  char v201[176]; 
  char v202[176]; 
  char v203[176]; 
  char v204[176]; 
  char v205[176]; 

  v5 = _Pred;
  v7 = _Last - 1;
  _R15 = &_First[(_Last - _First) >> 1];
  v9 = _First;
  v10 = &_Last[-1] - _First;
  if ( v10 > 40 )
  {
    v11 = (v10 + 1) >> 3;
    v12 = 176 * v11;
    v13 = 352 * v11;
    v14 = &_First[v11];
    std::_Med3_unchecked<PostMatchInfo_t *,LUIScoreCompare>(v9, v14, &_First[2 * v11], _Pred);
    std::_Med3_unchecked<PostMatchInfo_t *,LUIScoreCompare>(&_R15[v12 / 0xFFFFFFFFFFFFFF50ui64], _R15, &_R15[(unsigned __int64)v12 / 0xB0], v5);
    v7 = (PostMatchInfo_t *)((char *)v7 - v12);
    std::_Med3_unchecked<PostMatchInfo_t *,LUIScoreCompare>(&_Last[v13 / 0xFFFFFFFFFFFFFF50ui64 - 1], v7, _Last - 1, v5);
    _Pred = v5;
    v9 = v14;
  }
  std::_Med3_unchecked<PostMatchInfo_t *,LUIScoreCompare>(v9, _R15, v7, _Pred);
  _RSI = _R15 + 1;
  p_client = &_R15->scoreInfo.client;
  if ( _First < _R15 )
  {
    v17 = &_R15->scoreInfo.client;
    do
    {
      p_client = v17;
      if ( CG_ServerCmdMP_CompareScores(_R15[-1].scoreInfo.client, *v17, _R15[-1].scoreInfo.team, v17[5], _R15[-1].scoreInfo.score, v17[2], _R15[-1].scoreInfo.deaths, v17[4]) )
        break;
      if ( CG_ServerCmdMP_CompareScores(*v17, _R15[-1].scoreInfo.client, v17[5], _R15[-1].scoreInfo.team, v17[2], _R15[-1].scoreInfo.score, v17[4], _R15[-1].scoreInfo.deaths) )
        break;
      _R15 = (PostMatchInfo_t *)(v17 - 44);
      v17 = &_R15->scoreInfo.client;
      p_client = &_R15->scoreInfo.client;
    }
    while ( _First < _R15 );
  }
  for ( _RBP = (PostMatchInfo_t *)p_client; _RSI < _Last; _RBP = _R15 )
  {
    _RBP = (PostMatchInfo_t *)p_client;
    if ( CG_ServerCmdMP_CompareScores(_RSI->scoreInfo.client, *p_client, _RSI->scoreInfo.team, p_client[5], _RSI->scoreInfo.score, p_client[2], _RSI->scoreInfo.deaths, p_client[4]) )
      break;
    if ( CG_ServerCmdMP_CompareScores(*p_client, _RSI->scoreInfo.client, p_client[5], _RSI->scoreInfo.team, p_client[2], _RSI->scoreInfo.score, p_client[4], _RSI->scoreInfo.deaths) )
      break;
    ++_RSI;
  }
  for ( _RBX = _RSI; ; ++_RBX )
  {
    while ( 1 )
    {
      for ( ; _RBX < _Last; ++_RBX )
      {
        if ( !CG_ServerCmdMP_CompareScores(_R15->scoreInfo.client, _RBX->scoreInfo.client, _R15->scoreInfo.team, _RBX->scoreInfo.team, _R15->scoreInfo.score, _RBX->scoreInfo.score, _R15->scoreInfo.deaths, _RBX->scoreInfo.deaths) )
        {
          if ( CG_ServerCmdMP_CompareScores(_RBX->scoreInfo.client, _R15->scoreInfo.client, _RBX->scoreInfo.team, _R15->scoreInfo.team, _RBX->scoreInfo.score, _R15->scoreInfo.score, _RBX->scoreInfo.deaths, _R15->scoreInfo.deaths) )
            break;
          if ( _RSI != _RBX )
          {
            __asm { vmovups ymm0, ymmword ptr [rsi] }
            _RCX = v199;
            __asm
            {
              vmovups ymmword ptr [rcx], ymm0
              vmovups ymm0, ymmword ptr [rsi+20h]
              vmovups ymmword ptr [rcx+20h], ymm0
              vmovups ymm0, ymmword ptr [rsi+40h]
              vmovups ymmword ptr [rcx+40h], ymm0
              vmovups ymm0, ymmword ptr [rsi+60h]
              vmovups ymmword ptr [rcx+60h], ymm0
              vmovups ymm0, ymmword ptr [rsi+80h]
              vmovups ymmword ptr [rcx+80h], ymm0
              vmovups xmm0, xmmword ptr [rsi+0A0h]
              vmovups xmmword ptr [rcx+0A0h], xmm0
              vmovups xmm0, xmmword ptr [rbx]
              vmovups xmmword ptr [rsi], xmm0
              vmovups xmm1, xmmword ptr [rbx+10h]
              vmovups xmmword ptr [rsi+10h], xmm1
              vmovups xmm0, xmmword ptr [rbx+20h]
              vmovups xmmword ptr [rsi+20h], xmm0
              vmovups xmm1, xmmword ptr [rbx+30h]
              vmovups xmmword ptr [rsi+30h], xmm1
              vmovups xmm0, xmmword ptr [rbx+40h]
              vmovups xmmword ptr [rsi+40h], xmm0
              vmovups xmm1, xmmword ptr [rbx+50h]
              vmovups xmmword ptr [rsi+50h], xmm1
              vmovups xmm0, xmmword ptr [rbx+60h]
              vmovups xmmword ptr [rsi+60h], xmm0
              vmovups xmm1, xmmword ptr [rbx+70h]
              vmovups xmmword ptr [rsi+70h], xmm1
              vmovups xmm0, xmmword ptr [rbx+80h]
              vmovups xmmword ptr [rsi+80h], xmm0
              vmovups xmm1, xmmword ptr [rbx+90h]
              vmovups xmmword ptr [rsi+90h], xmm1
              vmovups xmm0, xmmword ptr [rbx+0A0h]
              vmovups xmmword ptr [rsi+0A0h], xmm0
            }
            _RAX = v199;
            __asm
            {
              vmovups ymm0, ymmword ptr [rax]
              vmovups ymmword ptr [rbx], ymm0
              vmovups ymm0, ymmword ptr [rax+20h]
              vmovups ymmword ptr [rbx+20h], ymm0
              vmovups ymm0, ymmword ptr [rax+40h]
              vmovups ymmword ptr [rbx+40h], ymm0
              vmovups ymm0, ymmword ptr [rax+60h]
              vmovups ymmword ptr [rbx+60h], ymm0
              vmovups ymm0, ymmword ptr [rax+80h]
              vmovups ymmword ptr [rbx+80h], ymm0
              vmovups xmm0, xmmword ptr [rax+0A0h]
              vmovups xmmword ptr [rbx+0A0h], xmm0
            }
          }
          ++_RSI;
        }
      }
      v45 = _RBP == _First;
      if ( _RBP > _First )
      {
        p_score = &_RBP[-1].scoreInfo.score;
        do
        {
          _R14 = p_score - 2;
          if ( !CG_ServerCmdMP_CompareScores(*(p_score - 2), _R15->scoreInfo.client, p_score[3], _R15->scoreInfo.team, *p_score, _R15->scoreInfo.score, p_score[2], _R15->scoreInfo.deaths) )
          {
            if ( CG_ServerCmdMP_CompareScores(_R15->scoreInfo.client, *_R14, _R15->scoreInfo.team, p_score[3], _R15->scoreInfo.score, *p_score, _R15->scoreInfo.deaths, p_score[2]) )
              break;
            if ( --_R15 != (PostMatchInfo_t *)_R14 )
            {
              __asm { vmovups ymm0, ymmword ptr [r15] }
              _RCX = v200;
              __asm
              {
                vmovups ymmword ptr [rcx], ymm0
                vmovups ymm0, ymmword ptr [r15+20h]
                vmovups ymmword ptr [rcx+20h], ymm0
                vmovups ymm0, ymmword ptr [r15+40h]
                vmovups ymmword ptr [rcx+40h], ymm0
                vmovups ymm0, ymmword ptr [r15+60h]
                vmovups ymmword ptr [rcx+60h], ymm0
                vmovups ymm0, ymmword ptr [r15+80h]
                vmovups ymmword ptr [rcx+80h], ymm0
                vmovups xmm0, xmmword ptr [r15+0A0h]
                vmovups xmmword ptr [rcx+0A0h], xmm0
                vmovups xmm0, xmmword ptr [r14]
                vmovups xmmword ptr [r15], xmm0
                vmovups xmm1, xmmword ptr [r14+10h]
                vmovups xmmword ptr [r15+10h], xmm1
                vmovups xmm0, xmmword ptr [r14+20h]
                vmovups xmmword ptr [r15+20h], xmm0
                vmovups xmm1, xmmword ptr [r14+30h]
                vmovups xmmword ptr [r15+30h], xmm1
                vmovups xmm0, xmmword ptr [r14+40h]
                vmovups xmmword ptr [r15+40h], xmm0
                vmovups xmm1, xmmword ptr [r14+50h]
                vmovups xmmword ptr [r15+50h], xmm1
                vmovups xmm0, xmmword ptr [r14+60h]
                vmovups xmmword ptr [r15+60h], xmm0
                vmovups xmm1, xmmword ptr [r14+70h]
                vmovups xmmword ptr [r15+70h], xmm1
                vmovups xmm0, xmmword ptr [r14+80h]
                vmovups xmmword ptr [r15+80h], xmm0
                vmovups xmm1, xmmword ptr [r14+90h]
                vmovups xmmword ptr [r15+90h], xmm1
                vmovups xmm0, xmmword ptr [r14+0A0h]
                vmovups xmmword ptr [r15+0A0h], xmm0
              }
              _RAX = v200;
              __asm
              {
                vmovups ymm0, ymmword ptr [rax]
                vmovups ymmword ptr [r14], ymm0
                vmovups ymm0, ymmword ptr [rax+20h]
                vmovups ymmword ptr [r14+20h], ymm0
                vmovups ymm0, ymmword ptr [rax+40h]
                vmovups ymmword ptr [r14+40h], ymm0
                vmovups ymm0, ymmword ptr [rax+60h]
                vmovups ymmword ptr [r14+60h], ymm0
                vmovups ymm0, ymmword ptr [rax+80h]
                vmovups ymmword ptr [r14+80h], ymm0
                vmovups xmm0, xmmword ptr [rax+0A0h]
                vmovups xmmword ptr [r14+0A0h], xmm0
              }
            }
          }
          --_RBP;
          p_score -= 44;
        }
        while ( _First < _RBP );
        v45 = _RBP == _First;
      }
      if ( v45 )
        break;
      --_RBP;
      if ( _RBX == _Last )
      {
        if ( _RBP != --_R15 )
        {
          __asm { vmovups ymm0, ymmword ptr [rbp+0] }
          _RCX = v203;
          __asm
          {
            vmovups ymmword ptr [rcx], ymm0
            vmovups ymm0, ymmword ptr [rbp+20h]
            vmovups ymmword ptr [rcx+20h], ymm0
            vmovups ymm0, ymmword ptr [rbp+40h]
            vmovups ymmword ptr [rcx+40h], ymm0
            vmovups ymm0, ymmword ptr [rbp+60h]
            vmovups ymmword ptr [rcx+60h], ymm0
            vmovups ymm0, ymmword ptr [rbp+80h]
            vmovups ymmword ptr [rcx+80h], ymm0
            vmovups xmm0, xmmword ptr [rbp+0A0h]
            vmovups xmmword ptr [rcx+0A0h], xmm0
            vmovups xmm0, xmmword ptr [r15]
            vmovups xmmword ptr [rbp+0], xmm0
            vmovups xmm1, xmmword ptr [r15+10h]
            vmovups xmmword ptr [rbp+10h], xmm1
            vmovups xmm0, xmmword ptr [r15+20h]
            vmovups xmmword ptr [rbp+20h], xmm0
            vmovups xmm1, xmmword ptr [r15+30h]
            vmovups xmmword ptr [rbp+30h], xmm1
            vmovups xmm0, xmmword ptr [r15+40h]
            vmovups xmmword ptr [rbp+40h], xmm0
            vmovups xmm1, xmmword ptr [r15+50h]
            vmovups xmmword ptr [rbp+50h], xmm1
            vmovups xmm0, xmmword ptr [r15+60h]
            vmovups xmmword ptr [rbp+60h], xmm0
            vmovups xmm1, xmmword ptr [r15+70h]
            vmovups xmmword ptr [rbp+70h], xmm1
            vmovups xmm0, xmmword ptr [r15+80h]
            vmovups xmmword ptr [rbp+80h], xmm0
            vmovups xmm1, xmmword ptr [r15+90h]
            vmovups xmmword ptr [rbp+90h], xmm1
            vmovups xmm0, xmmword ptr [r15+0A0h]
            vmovups xmmword ptr [rbp+0A0h], xmm0
          }
          _RAX = v203;
          __asm
          {
            vmovups ymm0, ymmword ptr [rax]
            vmovups ymmword ptr [r15], ymm0
            vmovups ymm0, ymmword ptr [rax+20h]
            vmovups ymmword ptr [r15+20h], ymm0
            vmovups ymm0, ymmword ptr [rax+40h]
            vmovups ymmword ptr [r15+40h], ymm0
            vmovups ymm0, ymmword ptr [rax+60h]
            vmovups ymmword ptr [r15+60h], ymm0
            vmovups ymm0, ymmword ptr [rax+80h]
            vmovups ymmword ptr [r15+80h], ymm0
            vmovups xmm0, xmmword ptr [rax+0A0h]
            vmovups xmmword ptr [r15+0A0h], xmm0
          }
        }
        __asm { vmovups ymm0, ymmword ptr [r15] }
        --_RSI;
        _RCX = v204;
        __asm
        {
          vmovups ymmword ptr [rcx], ymm0
          vmovups ymm0, ymmword ptr [r15+20h]
          vmovups ymmword ptr [rcx+20h], ymm0
          vmovups ymm0, ymmword ptr [r15+40h]
          vmovups ymmword ptr [rcx+40h], ymm0
          vmovups ymm0, ymmword ptr [r15+60h]
          vmovups ymmword ptr [rcx+60h], ymm0
          vmovups ymm0, ymmword ptr [r15+80h]
          vmovups ymmword ptr [rcx+80h], ymm0
          vmovups xmm0, xmmword ptr [r15+0A0h]
          vmovups xmmword ptr [rcx+0A0h], xmm0
          vmovups xmm0, xmmword ptr [rsi]
          vmovups xmmword ptr [r15], xmm0
          vmovups xmm1, xmmword ptr [rsi+10h]
          vmovups xmmword ptr [r15+10h], xmm1
          vmovups xmm0, xmmword ptr [rsi+20h]
          vmovups xmmword ptr [r15+20h], xmm0
          vmovups xmm1, xmmword ptr [rsi+30h]
          vmovups xmmword ptr [r15+30h], xmm1
          vmovups xmm0, xmmword ptr [rsi+40h]
          vmovups xmmword ptr [r15+40h], xmm0
          vmovups xmm1, xmmword ptr [rsi+50h]
          vmovups xmmword ptr [r15+50h], xmm1
          vmovups xmm0, xmmword ptr [rsi+60h]
          vmovups xmmword ptr [r15+60h], xmm0
          vmovups xmm1, xmmword ptr [rsi+70h]
          vmovups xmmword ptr [r15+70h], xmm1
          vmovups xmm0, xmmword ptr [rsi+80h]
          vmovups xmmword ptr [r15+80h], xmm0
          vmovups xmm1, xmmword ptr [rsi+90h]
          vmovups xmmword ptr [r15+90h], xmm1
          vmovups xmm0, xmmword ptr [rsi+0A0h]
          vmovups xmmword ptr [r15+0A0h], xmm0
        }
        _RAX = v204;
        __asm
        {
          vmovups ymm0, ymmword ptr [rax]
          vmovups ymmword ptr [rsi], ymm0
          vmovups ymm0, ymmword ptr [rax+20h]
          vmovups ymmword ptr [rsi+20h], ymm0
          vmovups ymm0, ymmword ptr [rax+40h]
          vmovups ymmword ptr [rsi+40h], ymm0
          vmovups ymm0, ymmword ptr [rax+60h]
          vmovups ymmword ptr [rsi+60h], ymm0
          vmovups ymm0, ymmword ptr [rax+80h]
          vmovups ymmword ptr [rsi+80h], ymm0
          vmovups xmm0, xmmword ptr [rax+0A0h]
          vmovups xmmword ptr [rsi+0A0h], xmm0
        }
      }
      else
      {
        __asm { vmovups ymm0, ymmword ptr [rbx] }
        _RCX = v205;
        __asm
        {
          vmovups ymmword ptr [rcx], ymm0
          vmovups ymm0, ymmword ptr [rbx+20h]
          vmovups ymmword ptr [rcx+20h], ymm0
          vmovups ymm0, ymmword ptr [rbx+40h]
          vmovups ymmword ptr [rcx+40h], ymm0
          vmovups ymm0, ymmword ptr [rbx+60h]
          vmovups ymmword ptr [rcx+60h], ymm0
          vmovups ymm0, ymmword ptr [rbx+80h]
          vmovups ymmword ptr [rcx+80h], ymm0
          vmovups xmm0, xmmword ptr [rbx+0A0h]
          vmovups xmmword ptr [rcx+0A0h], xmm0
          vmovups xmm0, xmmword ptr [rbp+0]
          vmovups xmmword ptr [rbx], xmm0
          vmovups xmm1, xmmword ptr [rbp+10h]
          vmovups xmmword ptr [rbx+10h], xmm1
          vmovups xmm0, xmmword ptr [rbp+20h]
          vmovups xmmword ptr [rbx+20h], xmm0
          vmovups xmm1, xmmword ptr [rbp+30h]
          vmovups xmmword ptr [rbx+30h], xmm1
          vmovups xmm0, xmmword ptr [rbp+40h]
          vmovups xmmword ptr [rbx+40h], xmm0
          vmovups xmm1, xmmword ptr [rbp+50h]
          vmovups xmmword ptr [rbx+50h], xmm1
          vmovups xmm0, xmmword ptr [rbp+60h]
          vmovups xmmword ptr [rbx+60h], xmm0
          vmovups xmm1, xmmword ptr [rbp+70h]
          vmovups xmmword ptr [rbx+70h], xmm1
          vmovups xmm0, xmmword ptr [rbp+80h]
          vmovups xmmword ptr [rbx+80h], xmm0
          vmovups xmm1, xmmword ptr [rbp+90h]
          vmovups xmmword ptr [rbx+90h], xmm1
          vmovups xmm0, xmmword ptr [rbp+0A0h]
          vmovups xmmword ptr [rbx+0A0h], xmm0
        }
        _RAX = v205;
        ++_RBX;
        __asm
        {
          vmovups ymm0, ymmword ptr [rax]
          vmovups ymmword ptr [rbp+0], ymm0
          vmovups ymm0, ymmword ptr [rax+20h]
          vmovups ymmword ptr [rbp+20h], ymm0
          vmovups ymm0, ymmword ptr [rax+40h]
          vmovups ymmword ptr [rbp+40h], ymm0
          vmovups ymm0, ymmword ptr [rax+60h]
          vmovups ymmword ptr [rbp+60h], ymm0
          vmovups ymm0, ymmword ptr [rax+80h]
          vmovups ymmword ptr [rbp+80h], ymm0
          vmovups xmm0, xmmword ptr [rax+0A0h]
          vmovups xmmword ptr [rbp+0A0h], xmm0
        }
      }
    }
    if ( _RBX == _Last )
      break;
    if ( _RSI != _RBX )
    {
      __asm { vmovups ymm0, ymmword ptr [r15] }
      _RCX = v201;
      __asm
      {
        vmovups ymmword ptr [rcx], ymm0
        vmovups ymm0, ymmword ptr [r15+20h]
        vmovups ymmword ptr [rcx+20h], ymm0
        vmovups ymm0, ymmword ptr [r15+40h]
        vmovups ymmword ptr [rcx+40h], ymm0
        vmovups ymm0, ymmword ptr [r15+60h]
        vmovups ymmword ptr [rcx+60h], ymm0
        vmovups ymm0, ymmword ptr [r15+80h]
        vmovups ymmword ptr [rcx+80h], ymm0
        vmovups xmm0, xmmword ptr [r15+0A0h]
        vmovups xmmword ptr [rcx+0A0h], xmm0
        vmovups xmm0, xmmword ptr [rsi]
        vmovups xmmword ptr [r15], xmm0
        vmovups xmm1, xmmword ptr [rsi+10h]
        vmovups xmmword ptr [r15+10h], xmm1
        vmovups xmm0, xmmword ptr [rsi+20h]
        vmovups xmmword ptr [r15+20h], xmm0
        vmovups xmm1, xmmword ptr [rsi+30h]
        vmovups xmmword ptr [r15+30h], xmm1
        vmovups xmm0, xmmword ptr [rsi+40h]
        vmovups xmmword ptr [r15+40h], xmm0
        vmovups xmm1, xmmword ptr [rsi+50h]
        vmovups xmmword ptr [r15+50h], xmm1
        vmovups xmm0, xmmword ptr [rsi+60h]
        vmovups xmmword ptr [r15+60h], xmm0
        vmovups xmm1, xmmword ptr [rsi+70h]
        vmovups xmmword ptr [r15+70h], xmm1
        vmovups xmm0, xmmword ptr [rsi+80h]
        vmovups xmmword ptr [r15+80h], xmm0
        vmovups xmm1, xmmword ptr [rsi+90h]
        vmovups xmmword ptr [r15+90h], xmm1
        vmovups xmm0, xmmword ptr [rsi+0A0h]
        vmovups xmmword ptr [r15+0A0h], xmm0
      }
      _RAX = v201;
      __asm
      {
        vmovups ymm0, ymmword ptr [rax]
        vmovups ymmword ptr [rsi], ymm0
        vmovups ymm0, ymmword ptr [rax+20h]
        vmovups ymmword ptr [rsi+20h], ymm0
        vmovups ymm0, ymmword ptr [rax+40h]
        vmovups ymmword ptr [rsi+40h], ymm0
        vmovups ymm0, ymmword ptr [rax+60h]
        vmovups ymmword ptr [rsi+60h], ymm0
        vmovups ymm0, ymmword ptr [rax+80h]
        vmovups ymmword ptr [rsi+80h], ymm0
        vmovups xmm0, xmmword ptr [rax+0A0h]
        vmovups xmmword ptr [rsi+0A0h], xmm0
      }
    }
    __asm { vmovups ymm0, ymmword ptr [r15] }
    _RCX = v202;
    ++_RSI;
    __asm
    {
      vmovups ymmword ptr [rcx], ymm0
      vmovups ymm0, ymmword ptr [r15+20h]
      vmovups ymmword ptr [rcx+20h], ymm0
      vmovups ymm0, ymmword ptr [r15+40h]
      vmovups ymmword ptr [rcx+40h], ymm0
      vmovups ymm0, ymmword ptr [r15+60h]
      vmovups ymmword ptr [rcx+60h], ymm0
      vmovups ymm0, ymmword ptr [r15+80h]
      vmovups ymmword ptr [rcx+80h], ymm0
      vmovups xmm0, xmmword ptr [r15+0A0h]
      vmovups xmmword ptr [rcx+0A0h], xmm0
      vmovups xmm0, xmmword ptr [rbx]
      vmovups xmmword ptr [r15], xmm0
      vmovups xmm1, xmmword ptr [rbx+10h]
      vmovups xmmword ptr [r15+10h], xmm1
      vmovups xmm0, xmmword ptr [rbx+20h]
      vmovups xmmword ptr [r15+20h], xmm0
      vmovups xmm1, xmmword ptr [rbx+30h]
      vmovups xmmword ptr [r15+30h], xmm1
      vmovups xmm0, xmmword ptr [rbx+40h]
      vmovups xmmword ptr [r15+40h], xmm0
      vmovups xmm1, xmmword ptr [rbx+50h]
      vmovups xmmword ptr [r15+50h], xmm1
      vmovups xmm0, xmmword ptr [rbx+60h]
      vmovups xmmword ptr [r15+60h], xmm0
      vmovups xmm1, xmmword ptr [rbx+70h]
      vmovups xmmword ptr [r15+70h], xmm1
      vmovups xmm0, xmmword ptr [rbx+80h]
      vmovups xmmword ptr [r15+80h], xmm0
      vmovups xmm1, xmmword ptr [rbx+90h]
      vmovups xmmword ptr [r15+90h], xmm1
      vmovups xmm0, xmmword ptr [rbx+0A0h]
      vmovups xmmword ptr [r15+0A0h], xmm0
    }
    _RAX = v202;
    ++_R15;
    __asm
    {
      vmovups ymm0, ymmword ptr [rax]
      vmovups ymmword ptr [rbx], ymm0
      vmovups ymm0, ymmword ptr [rax+20h]
      vmovups ymmword ptr [rbx+20h], ymm0
      vmovups ymm0, ymmword ptr [rax+40h]
      vmovups ymmword ptr [rbx+40h], ymm0
      vmovups ymm0, ymmword ptr [rax+60h]
      vmovups ymmword ptr [rbx+60h], ymm0
      vmovups ymm0, ymmword ptr [rax+80h]
      vmovups ymmword ptr [rbx+80h], ymm0
      vmovups xmm0, xmmword ptr [rax+0A0h]
      vmovups xmmword ptr [rbx+0A0h], xmm0
    }
  }
  v198 = result;
  result->second = _RSI;
  result->first = _R15;
  return v198;
}

/*
==============
std::_Pop_heap_hole_by_index<PostMatchInfo_t *,PostMatchInfo_t,LUIScoreCompare>
==============
*/
void std::_Pop_heap_hole_by_index<PostMatchInfo_t *,PostMatchInfo_t,LUIScoreCompare>(PostMatchInfo_t *_First, __int64 _Hole, __int64 _Bottom, PostMatchInfo_t *_Val)
{
  __int64 v5; 
  __int64 v7; 
  __int64 v10; 
  PostMatchInfo_t *v11; 
  __int64 v25; 
  __int64 v39; 
  __int64 v42; 

  _RDI = _Val;
  v5 = (_Bottom - 1) >> 1;
  v7 = _Hole;
  v10 = _Hole;
  while ( v10 < v5 )
  {
    v10 = 2 * v10 + 2;
    v11 = &_First[v10];
    if ( CG_ServerCmdMP_CompareScores(v11->scoreInfo.client, v11[-1].scoreInfo.client, v11->scoreInfo.team, v11[-1].scoreInfo.team, v11->scoreInfo.score, v11[-1].scoreInfo.score, v11->scoreInfo.deaths, v11[-1].scoreInfo.deaths) )
      --v10;
    _RDX = &_First[v7];
    v7 = v10;
    _RAX = &_First[v10];
    __asm
    {
      vmovups xmm0, xmmword ptr [rax]
      vmovups xmmword ptr [rdx], xmm0
      vmovups xmm1, xmmword ptr [rax+10h]
      vmovups xmmword ptr [rdx+10h], xmm1
      vmovups xmm0, xmmword ptr [rax+20h]
      vmovups xmmword ptr [rdx+20h], xmm0
      vmovups xmm1, xmmword ptr [rax+30h]
      vmovups xmmword ptr [rdx+30h], xmm1
      vmovups xmm0, xmmword ptr [rax+40h]
      vmovups xmmword ptr [rdx+40h], xmm0
      vmovups xmm1, xmmword ptr [rax+50h]
      vmovups xmmword ptr [rdx+50h], xmm1
      vmovups xmm0, xmmword ptr [rax+60h]
      vmovups xmmword ptr [rdx+60h], xmm0
      vmovups xmm1, xmmword ptr [rax+70h]
      vmovups xmmword ptr [rdx+70h], xmm1
      vmovups xmm0, xmmword ptr [rax+80h]
      vmovups xmmword ptr [rdx+80h], xmm0
      vmovups xmm1, xmmword ptr [rax+90h]
      vmovups xmmword ptr [rdx+90h], xmm1
      vmovups xmm0, xmmword ptr [rax+0A0h]
      vmovups xmmword ptr [rdx+0A0h], xmm0
    }
  }
  if ( v10 == v5 && (_Bottom & 1) == 0 )
  {
    v25 = v7;
    _RAX = &_First[_Bottom - 1];
    __asm { vmovups xmm0, xmmword ptr [rax] }
    v7 = _Bottom - 1;
    _RDX = &_First[v25];
    __asm
    {
      vmovups xmmword ptr [rdx], xmm0
      vmovups xmm1, xmmword ptr [rax+10h]
      vmovups xmmword ptr [rdx+10h], xmm1
      vmovups xmm0, xmmword ptr [rax+20h]
      vmovups xmmword ptr [rdx+20h], xmm0
      vmovups xmm1, xmmword ptr [rax+30h]
      vmovups xmmword ptr [rdx+30h], xmm1
      vmovups xmm0, xmmword ptr [rax+40h]
      vmovups xmmword ptr [rdx+40h], xmm0
      vmovups xmm1, xmmword ptr [rax+50h]
      vmovups xmmword ptr [rdx+50h], xmm1
      vmovups xmm0, xmmword ptr [rax+60h]
      vmovups xmmword ptr [rdx+60h], xmm0
      vmovups xmm1, xmmword ptr [rax+70h]
      vmovups xmmword ptr [rdx+70h], xmm1
      vmovups xmm0, xmmword ptr [rax+80h]
      vmovups xmmword ptr [rdx+80h], xmm0
      vmovups xmm1, xmmword ptr [rax+90h]
      vmovups xmmword ptr [rdx+90h], xmm1
      vmovups xmm0, xmmword ptr [rax+0A0h]
      vmovups xmmword ptr [rdx+0A0h], xmm0
    }
  }
  if ( _Hole < v7 )
  {
    do
    {
      v39 = (v7 - 1) >> 1;
      _RBX = &_First[v39];
      if ( !CG_ServerCmdMP_CompareScores(_RBX->scoreInfo.client, _RDI->scoreInfo.client, _RBX->scoreInfo.team, _RDI->scoreInfo.team, _RBX->scoreInfo.score, _RDI->scoreInfo.score, _RBX->scoreInfo.deaths, _RDI->scoreInfo.deaths) )
        break;
      __asm { vmovups xmm0, xmmword ptr [rbx] }
      v42 = v7;
      v7 = (v7 - 1) >> 1;
      _RCX = &_First[v42];
      __asm
      {
        vmovups xmmword ptr [rcx], xmm0
        vmovups xmm1, xmmword ptr [rbx+10h]
        vmovups xmmword ptr [rcx+10h], xmm1
        vmovups xmm0, xmmword ptr [rbx+20h]
        vmovups xmmword ptr [rcx+20h], xmm0
        vmovups xmm1, xmmword ptr [rbx+30h]
        vmovups xmmword ptr [rcx+30h], xmm1
        vmovups xmm0, xmmword ptr [rbx+40h]
        vmovups xmmword ptr [rcx+40h], xmm0
        vmovups xmm1, xmmword ptr [rbx+50h]
        vmovups xmmword ptr [rcx+50h], xmm1
        vmovups xmm0, xmmword ptr [rbx+60h]
        vmovups xmmword ptr [rcx+60h], xmm0
        vmovups xmm1, xmmword ptr [rbx+70h]
        vmovups xmmword ptr [rcx+70h], xmm1
        vmovups xmm0, xmmword ptr [rbx+80h]
        vmovups xmmword ptr [rcx+80h], xmm0
        vmovups xmm1, xmmword ptr [rbx+90h]
        vmovups xmmword ptr [rcx+90h], xmm1
        vmovups xmm0, xmmword ptr [rbx+0A0h]
        vmovups xmmword ptr [rcx+0A0h], xmm0
      }
    }
    while ( _Hole < v39 );
  }
  __asm { vmovups xmm0, xmmword ptr [rdi] }
  _RCX = &_First[v7];
  __asm
  {
    vmovups xmmword ptr [rcx], xmm0
    vmovups xmm1, xmmword ptr [rdi+10h]
    vmovups xmmword ptr [rcx+10h], xmm1
    vmovups xmm0, xmmword ptr [rdi+20h]
    vmovups xmmword ptr [rcx+20h], xmm0
    vmovups xmm1, xmmword ptr [rdi+30h]
    vmovups xmmword ptr [rcx+30h], xmm1
    vmovups xmm0, xmmword ptr [rdi+40h]
    vmovups xmmword ptr [rcx+40h], xmm0
    vmovups xmm1, xmmword ptr [rdi+50h]
    vmovups xmmword ptr [rcx+50h], xmm1
    vmovups xmm0, xmmword ptr [rdi+60h]
    vmovups xmmword ptr [rcx+60h], xmm0
    vmovups xmm1, xmmword ptr [rdi+70h]
    vmovups xmmword ptr [rcx+70h], xmm1
    vmovups xmm0, xmmword ptr [rdi+80h]
    vmovups xmmword ptr [rcx+80h], xmm0
    vmovups xmm1, xmmword ptr [rdi+90h]
    vmovups xmmword ptr [rcx+90h], xmm1
    vmovups xmm0, xmmword ptr [rdi+0A0h]
    vmovups xmmword ptr [rcx+0A0h], xmm0
  }
}

/*
==============
std::_Sort_unchecked<PostMatchInfo_t *,LUIScoreCompare>
==============
*/
void std::_Sort_unchecked<PostMatchInfo_t *,LUIScoreCompare>(PostMatchInfo_t *_First, PostMatchInfo_t *_Last, __int64 _Ideal, LUIScoreCompare _Pred)
{
  PostMatchInfo_t *v4; 
  __int64 v8; 
  PostMatchInfo_t *v9; 
  PostMatchInfo_t *second; 
  PostMatchInfo_t *first; 
  const int *p_score; 
  int deaths; 
  int team; 
  int client; 
  int score2; 
  int deaths1; 
  int score; 
  int v55; 
  int v56; 
  int v58; 
  int score1; 
  int deaths2; 
  PostMatchInfo_t *v78; 
  std::pair<PostMatchInfo_t *,PostMatchInfo_t *> result; 
  PostMatchInfo_t client1; 

  v4 = _Last;
  v78 = _Last;
  _RSI = _First;
  v8 = _Last - _First;
  if ( v8 <= 32 )
  {
LABEL_7:
    if ( v8 >= 2 && _RSI != v4 )
    {
      _R15 = _RSI + 1;
      if ( &_RSI[1] != v4 )
      {
        first = (PostMatchInfo_t *)(168i64 - (_QWORD)_RSI);
        p_score = &_RSI->scoreInfo.score;
        result.first = (PostMatchInfo_t *)(168i64 - (_QWORD)_RSI);
        do
        {
          __asm { vmovups ymm0, ymmword ptr [r15] }
          deaths = _RSI->scoreInfo.deaths;
          _RCX = &client1;
          team = _RSI->scoreInfo.team;
          _RBX = &_R15->scoreInfo.client;
          client = _RSI->scoreInfo.client;
          __asm
          {
            vmovups ymmword ptr [rcx], ymm0
            vmovups ymm0, ymmword ptr [r15+20h]
            vmovups ymmword ptr [rcx+20h], ymm0
            vmovups ymm0, ymmword ptr [r15+40h]
            vmovups ymmword ptr [rcx+40h], ymm0
            vmovups ymm0, ymmword ptr [r15+60h]
            vmovups ymmword ptr [rcx+60h], ymm0
            vmovups ymm0, ymmword ptr [r15+80h]
            vmovups ymmword ptr [rcx+80h], ymm0
            vmovups xmm0, xmmword ptr [r15+0A0h]
          }
          deaths2 = deaths;
          score2 = _RSI->scoreInfo.score;
          __asm { vmovups xmmword ptr [rcx+0A0h], xmm0 }
          deaths1 = client1.scoreInfo.deaths;
          score = client1.scoreInfo.score;
          if ( CG_ServerCmdMP_CompareScores(client1.scoreInfo.client, client, client1.scoreInfo.team, team, client1.scoreInfo.score, score2, client1.scoreInfo.deaths, deaths2) )
          {
            memmove_0((void *)(344i64 - (_QWORD)first), _RSI, (size_t)p_score + (_QWORD)first);
            _RAX = &client1;
            __asm
            {
              vmovups ymm0, ymmword ptr [rax]
              vmovups ymmword ptr [rsi], ymm0
              vmovups ymm0, ymmword ptr [rax+20h]
              vmovups ymmword ptr [rsi+20h], ymm0
              vmovups ymm0, ymmword ptr [rax+40h]
              vmovups ymmword ptr [rsi+40h], ymm0
              vmovups ymm0, ymmword ptr [rax+60h]
              vmovups ymmword ptr [rsi+60h], ymm0
              vmovups ymm0, ymmword ptr [rax+80h]
              vmovups ymmword ptr [rsi+80h], ymm0
              vmovups xmm0, xmmword ptr [rax+0A0h]
              vmovups xmmword ptr [rsi+0A0h], xmm0
            }
          }
          else
          {
            _RDI = p_score - 2;
            score1 = score;
            v55 = client1.scoreInfo.team;
            if ( CG_ServerCmdMP_CompareScores(client1.scoreInfo.client, *(p_score - 2), client1.scoreInfo.team, p_score[3], score1, *p_score, deaths1, p_score[2]) )
            {
              v56 = client1.scoreInfo.score;
              do
              {
                __asm { vmovups xmm0, xmmword ptr [rdi] }
                v58 = client1.scoreInfo.client;
                __asm
                {
                  vmovups xmmword ptr [rbx], xmm0
                  vmovups xmm1, xmmword ptr [rdi+10h]
                  vmovups xmmword ptr [rbx+10h], xmm1
                  vmovups xmm0, xmmword ptr [rdi+20h]
                  vmovups xmmword ptr [rbx+20h], xmm0
                  vmovups xmm1, xmmword ptr [rdi+30h]
                  vmovups xmmword ptr [rbx+30h], xmm1
                  vmovups xmm0, xmmword ptr [rdi+40h]
                  vmovups xmmword ptr [rbx+40h], xmm0
                  vmovups xmm1, xmmword ptr [rdi+50h]
                  vmovups xmmword ptr [rbx+50h], xmm1
                  vmovups xmm0, xmmword ptr [rdi+60h]
                  vmovups xmmword ptr [rbx+60h], xmm0
                  vmovups xmm1, xmmword ptr [rdi+70h]
                  vmovups xmmword ptr [rbx+70h], xmm1
                  vmovups xmm0, xmmword ptr [rdi+80h]
                  vmovups xmmword ptr [rbx+80h], xmm0
                  vmovups xmm1, xmmword ptr [rdi+90h]
                  vmovups xmmword ptr [rbx+90h], xmm1
                  vmovups xmm0, xmmword ptr [rdi+0A0h]
                  vmovups xmmword ptr [rbx+0A0h], xmm0
                }
                _RBX = _RDI;
                _RDI -= 44;
              }
              while ( CG_ServerCmdMP_CompareScores(v58, *_RDI, v55, _RDI[5], v56, _RDI[2], deaths1, _RDI[4]) );
              v4 = v78;
            }
            first = result.first;
            _RAX = &client1;
            __asm
            {
              vmovups ymm0, ymmword ptr [rax]
              vmovups ymmword ptr [rbx], ymm0
              vmovups ymm0, ymmword ptr [rax+20h]
              vmovups ymmword ptr [rbx+20h], ymm0
              vmovups ymm0, ymmword ptr [rax+40h]
              vmovups ymmword ptr [rbx+40h], ymm0
              vmovups ymm0, ymmword ptr [rax+60h]
              vmovups ymmword ptr [rbx+60h], ymm0
              vmovups ymm0, ymmword ptr [rax+80h]
              vmovups ymmword ptr [rbx+80h], ymm0
              vmovups xmm0, xmmword ptr [rax+0A0h]
              vmovups xmmword ptr [rbx+0A0h], xmm0
            }
          }
          ++_R15;
          p_score += 44;
        }
        while ( _R15 != v4 );
      }
    }
  }
  else
  {
    while ( _Ideal > 0 )
    {
      std::_Partition_by_median_guess_unchecked<PostMatchInfo_t *,LUIScoreCompare>(&result, _RSI, v4, _Pred);
      v9 = result.first;
      second = result.second;
      _Ideal = (_Ideal >> 2) + (_Ideal >> 1);
      if ( result.first - _RSI >= v4 - result.second )
      {
        std::_Sort_unchecked<PostMatchInfo_t *,LUIScoreCompare>(result.second, v4, _Ideal, _Pred);
        v4 = v9;
        v78 = v9;
      }
      else
      {
        std::_Sort_unchecked<PostMatchInfo_t *,LUIScoreCompare>(_RSI, result.first, _Ideal, _Pred);
        _RSI = second;
      }
      v8 = v4 - _RSI;
      if ( v8 <= 32 )
        goto LABEL_7;
    }
    std::_Make_heap_unchecked<PostMatchInfo_t *,LUIScoreCompare>(_RSI, v4, _Pred);
    if ( v4 - _RSI >= 2 )
    {
      _RBP = v4 - 1;
      do
      {
        __asm { vmovups ymm0, ymmword ptr [rbp+0] }
        _RCX = &client1;
        __asm
        {
          vmovups ymmword ptr [rcx], ymm0
          vmovups ymm0, ymmword ptr [rbp+20h]
          vmovups ymmword ptr [rcx+20h], ymm0
          vmovups ymm0, ymmword ptr [rbp+40h]
          vmovups ymmword ptr [rcx+40h], ymm0
          vmovups ymm0, ymmword ptr [rbp+60h]
          vmovups ymmword ptr [rcx+60h], ymm0
          vmovups ymm0, ymmword ptr [rbp+80h]
          vmovups ymmword ptr [rcx+80h], ymm0
          vmovups xmm0, xmmword ptr [rbp+0A0h]
          vmovups xmmword ptr [rcx+0A0h], xmm0
          vmovups xmm0, xmmword ptr [rsi]
          vmovups xmmword ptr [rbp+0], xmm0
          vmovups xmm1, xmmword ptr [rsi+10h]
          vmovups xmmword ptr [rbp+10h], xmm1
          vmovups xmm0, xmmword ptr [rsi+20h]
          vmovups xmmword ptr [rbp+20h], xmm0
          vmovups xmm1, xmmword ptr [rsi+30h]
          vmovups xmmword ptr [rbp+30h], xmm1
          vmovups xmm0, xmmword ptr [rsi+40h]
          vmovups xmmword ptr [rbp+40h], xmm0
          vmovups xmm1, xmmword ptr [rsi+50h]
          vmovups xmmword ptr [rbp+50h], xmm1
          vmovups xmm0, xmmword ptr [rsi+60h]
          vmovups xmmword ptr [rbp+60h], xmm0
          vmovups xmm1, xmmword ptr [rsi+70h]
          vmovups xmmword ptr [rbp+70h], xmm1
          vmovups xmm0, xmmword ptr [rsi+80h]
          vmovups xmmword ptr [rbp+80h], xmm0
          vmovups xmm1, xmmword ptr [rsi+90h]
          vmovups xmmword ptr [rbp+90h], xmm1
          vmovups xmm0, xmmword ptr [rsi+0A0h]
          vmovups xmmword ptr [rbp+0A0h], xmm0
        }
        std::_Pop_heap_hole_by_index<PostMatchInfo_t *,PostMatchInfo_t,LUIScoreCompare>(_RSI, 0i64, _RBP - _RSI, &client1, _Pred);
        --_RBP;
      }
      while ( ((char *)_RBP - (char *)_RSI + 176) / 176 >= 2 );
    }
  }
}

