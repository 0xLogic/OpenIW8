/*
==============
std::_Make_heap_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>
==============
*/

void __fastcall std::_Make_heap_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, StreamImageLoadingPredicate _Pred)
{
  ??$_Make_heap_unchecked@PEAUStreamSortKeyPacked@@VStreamImageLoadingPredicate@@@std@@YAXPEAUStreamSortKeyPacked@@0VStreamImageLoadingPredicate@@@Z(_First, _Last, _Pred);
}

/*
==============
std::_Pop_heap_hole_by_index<StreamSortKeyPacked *,StreamSortKeyPacked,StreamImageLoadingPredicate>
==============
*/

void __fastcall std::_Pop_heap_hole_by_index<StreamSortKeyPacked *,StreamSortKeyPacked,StreamImageLoadingPredicate>(StreamSortKeyPacked *_First, __int64 _Hole, __int64 _Bottom, StreamSortKeyPacked *_Val, StreamImageLoadingPredicate _Pred)
{
  ??$_Pop_heap_hole_by_index@PEAUStreamSortKeyPacked@@U1@VStreamImageLoadingPredicate@@@std@@YAXPEAUStreamSortKeyPacked@@_J1$$QEAU1@VStreamImageLoadingPredicate@@@Z(_First, _Hole, _Bottom, _Val, _Pred);
}

/*
==============
std::_Insertion_sort_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>
==============
*/

gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *__fastcall std::_Insertion_sort_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *result, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, const gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Last, SortKeyPartialPredicate _Pred)
{
  return ??$_Insertion_sort_unchecked@V?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@USortKeyPartialPredicate@@@std@@YA?AV?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@V123@V123@USortKeyPartialPredicate@@@Z(result, _First, _Last, _Pred);
}

/*
==============
std::_Pop_heap_hole_by_index<StreamSortKeyPacked *,StreamSortKeyPacked,StreamGenericLoadingPredicate>
==============
*/

void __fastcall std::_Pop_heap_hole_by_index<StreamSortKeyPacked *,StreamSortKeyPacked,StreamGenericLoadingPredicate>(StreamSortKeyPacked *_First, __int64 _Hole, __int64 _Bottom, StreamSortKeyPacked *_Val, StreamGenericLoadingPredicate _Pred)
{
  ??$_Pop_heap_hole_by_index@PEAUStreamSortKeyPacked@@U1@VStreamGenericLoadingPredicate@@@std@@YAXPEAUStreamSortKeyPacked@@_J1$$QEAU1@VStreamGenericLoadingPredicate@@@Z(_First, _Hole, _Bottom, _Val, _Pred);
}

/*
==============
std::_Partition_by_median_guess_unchecked<CgVehiclePriorityInfo *,CgVehicleMPSortFunctor>
==============
*/

std::pair<CgVehiclePriorityInfo *,CgVehiclePriorityInfo *> *__fastcall std::_Partition_by_median_guess_unchecked<CgVehiclePriorityInfo *,CgVehicleMPSortFunctor>(std::pair<CgVehiclePriorityInfo *,CgVehiclePriorityInfo *> *result, CgVehiclePriorityInfo *_First, CgVehiclePriorityInfo *_Last, CgVehicleMPSortFunctor _Pred)
{
  return ??$_Partition_by_median_guess_unchecked@PEAUCgVehiclePriorityInfo@@UCgVehicleMPSortFunctor@@@std@@YA?AU?$pair@PEAUCgVehiclePriorityInfo@@PEAU1@@0@PEAUCgVehiclePriorityInfo@@0UCgVehicleMPSortFunctor@@@Z(result, _First, _Last, _Pred);
}

/*
==============
std::_Make_heap_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>
==============
*/

void __fastcall std::_Make_heap_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, StreamGenericLoadingPredicate _Pred)
{
  ??$_Make_heap_unchecked@PEAUStreamSortKeyPacked@@VStreamGenericLoadingPredicate@@@std@@YAXPEAUStreamSortKeyPacked@@0VStreamGenericLoadingPredicate@@@Z(_First, _Last, _Pred);
}

/*
==============
std::_Pop_heap_hole_by_index<score_t *,score_t,CgScoreBoardCompare>
==============
*/

void __fastcall std::_Pop_heap_hole_by_index<score_t *,score_t,CgScoreBoardCompare>(score_t *_First, __int64 _Hole, __int64 _Bottom, score_t *_Val, CgScoreBoardCompare _Pred)
{
  ??$_Pop_heap_hole_by_index@PEAUscore_t@@U1@UCgScoreBoardCompare@@@std@@YAXPEAUscore_t@@_J1$$QEAU1@UCgScoreBoardCompare@@@Z(_First, _Hole, _Bottom, _Val, _Pred);
}

/*
==============
std::_Make_heap_unchecked<PostMatchInfo_t *,LUIScoreCompare>
==============
*/

void __fastcall std::_Make_heap_unchecked<PostMatchInfo_t *,LUIScoreCompare>(PostMatchInfo_t *_First, PostMatchInfo_t *_Last, LUIScoreCompare _Pred)
{
  ??$_Make_heap_unchecked@PEAUPostMatchInfo_t@@ULUIScoreCompare@@@std@@YAXPEAUPostMatchInfo_t@@0ULUIScoreCompare@@@Z(_First, _Last, _Pred);
}

/*
==============
std::_Insertion_sort_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>
==============
*/

StreamSortKeyPacked *__fastcall std::_Insertion_sort_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *const _Last, StreamMeshLoadingPredicate _Pred)
{
  return ??$_Insertion_sort_unchecked@PEAUStreamSortKeyPacked@@VStreamMeshLoadingPredicate@@@std@@YAPEAUStreamSortKeyPacked@@PEAU1@QEAU1@VStreamMeshLoadingPredicate@@@Z(_First, _Last, _Pred);
}

/*
==============
std::_Sort_unchecked<XSurface * *,XSurfaceHashComparer>
==============
*/

void __fastcall std::_Sort_unchecked<XSurface * *,XSurfaceHashComparer>(XSurface **_First, XSurface **_Last, __int64 _Ideal, XSurfaceHashComparer _Pred)
{
  ??$_Sort_unchecked@PEAPEAUXSurface@@UXSurfaceHashComparer@@@std@@YAXPEAPEAUXSurface@@0_JUXSurfaceHashComparer@@@Z(_First, _Last, _Ideal, _Pred);
}

/*
==============
std::_Pop_heap_hole_by_index<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingScriptableLootChestInfo,CgWeaponStreamingMpScriptableLootSortFunctor>
==============
*/

void __fastcall std::_Pop_heap_hole_by_index<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingScriptableLootChestInfo,CgWeaponStreamingMpScriptableLootSortFunctor>(CgWeaponStreamingScriptableLootChestInfo *_First, __int64 _Hole, __int64 _Bottom, CgWeaponStreamingScriptableLootChestInfo *_Val, CgWeaponStreamingMpScriptableLootSortFunctor _Pred)
{
  ??$_Pop_heap_hole_by_index@PEAUCgWeaponStreamingScriptableLootChestInfo@@U1@UCgWeaponStreamingMpScriptableLootSortFunctor@@@std@@YAXPEAUCgWeaponStreamingScriptableLootChestInfo@@_J1$$QEAU1@UCgWeaponStreamingMpScriptableLootSortFunctor@@@Z(_First, _Hole, _Bottom, _Val, _Pred);
}

/*
==============
std::_Push_heap_by_index<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,StreamSortKeyPacked,SortKeyPartialPredicate>
==============
*/

void __fastcall std::_Push_heap_by_index<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,StreamSortKeyPacked,SortKeyPartialPredicate>(gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, __int64 _Hole, __int64 _Top, StreamSortKeyPacked *_Val, SortKeyPartialPredicate _Pred)
{
  ??$_Push_heap_by_index@V?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@UStreamSortKeyPacked@@USortKeyPartialPredicate@@@std@@YAXV?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@_J1$$QEAUStreamSortKeyPacked@@USortKeyPartialPredicate@@@Z(_First, _Hole, _Top, _Val, _Pred);
}

/*
==============
std::_Sort_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>
==============
*/

void __fastcall std::_Sort_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Last, __int64 _Ideal, SortKeyPartialPredicate _Pred)
{
  ??$_Sort_unchecked@V?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@USortKeyPartialPredicate@@@std@@YAXV?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@0_JUSortKeyPartialPredicate@@@Z(_First, _Last, _Ideal, _Pred);
}

/*
==============
std::_Partition_by_median_guess_unchecked<score_t *,CgScoreBoardCompare>
==============
*/

std::pair<score_t *,score_t *> *__fastcall std::_Partition_by_median_guess_unchecked<score_t *,CgScoreBoardCompare>(std::pair<score_t *,score_t *> *result, score_t *_First, score_t *_Last, CgScoreBoardCompare _Pred)
{
  return ??$_Partition_by_median_guess_unchecked@PEAUscore_t@@UCgScoreBoardCompare@@@std@@YA?AU?$pair@PEAUscore_t@@PEAU1@@0@PEAUscore_t@@0UCgScoreBoardCompare@@@Z(result, _First, _Last, _Pred);
}

/*
==============
std::_Insertion_sort_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>
==============
*/

StreamSortKeyPacked *__fastcall std::_Insertion_sort_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *const _Last, StreamGenericLoadingPredicate _Pred)
{
  return ??$_Insertion_sort_unchecked@PEAUStreamSortKeyPacked@@VStreamGenericLoadingPredicate@@@std@@YAPEAUStreamSortKeyPacked@@PEAU1@QEAU1@VStreamGenericLoadingPredicate@@@Z(_First, _Last, _Pred);
}

/*
==============
std::_Pop_heap_hole_by_index<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingClientModelInfo,CgWeaponStreamingMpClientModelSortFunctor>
==============
*/

void __fastcall std::_Pop_heap_hole_by_index<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingClientModelInfo,CgWeaponStreamingMpClientModelSortFunctor>(CgWeaponStreamingClientModelInfo *_First, __int64 _Hole, __int64 _Bottom, CgWeaponStreamingClientModelInfo *_Val, CgWeaponStreamingMpClientModelSortFunctor _Pred)
{
  ??$_Pop_heap_hole_by_index@PEAUCgWeaponStreamingClientModelInfo@@U1@UCgWeaponStreamingMpClientModelSortFunctor@@@std@@YAXPEAUCgWeaponStreamingClientModelInfo@@_J1$$QEAU1@UCgWeaponStreamingMpClientModelSortFunctor@@@Z(_First, _Hole, _Bottom, _Val, _Pred);
}

/*
==============
std::_Partition_by_median_guess_unchecked<PostMatchInfo_t *,LUIScoreCompare>
==============
*/

std::pair<PostMatchInfo_t *,PostMatchInfo_t *> *__fastcall std::_Partition_by_median_guess_unchecked<PostMatchInfo_t *,LUIScoreCompare>(std::pair<PostMatchInfo_t *,PostMatchInfo_t *> *result, PostMatchInfo_t *_First, PostMatchInfo_t *_Last, LUIScoreCompare _Pred)
{
  return ??$_Partition_by_median_guess_unchecked@PEAUPostMatchInfo_t@@ULUIScoreCompare@@@std@@YA?AU?$pair@PEAUPostMatchInfo_t@@PEAU1@@0@PEAUPostMatchInfo_t@@0ULUIScoreCompare@@@Z(result, _First, _Last, _Pred);
}

/*
==============
std::_Partition_by_median_guess_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>
==============
*/

std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> *__fastcall std::_Partition_by_median_guess_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>(std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> *result, StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, StreamImageLoadingPredicate _Pred)
{
  return ??$_Partition_by_median_guess_unchecked@PEAUStreamSortKeyPacked@@VStreamImageLoadingPredicate@@@std@@YA?AU?$pair@PEAUStreamSortKeyPacked@@PEAU1@@0@PEAUStreamSortKeyPacked@@0VStreamImageLoadingPredicate@@@Z(result, _First, _Last, _Pred);
}

/*
==============
std::_Pop_heap_hole_by_index<XSurface * *,XSurface *,XSurfaceHashComparer>
==============
*/

void __fastcall std::_Pop_heap_hole_by_index<XSurface * *,XSurface *,XSurfaceHashComparer>(XSurface **_First, __int64 _Hole, __int64 _Bottom, XSurface **_Val, XSurfaceHashComparer _Pred)
{
  ??$_Pop_heap_hole_by_index@PEAPEAUXSurface@@PEAU1@UXSurfaceHashComparer@@@std@@YAXPEAPEAUXSurface@@_J1$$QEAPEAU1@UXSurfaceHashComparer@@@Z(_First, _Hole, _Bottom, _Val, _Pred);
}

/*
==============
std::_Pop_heap_hole_by_index<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,StreamSortKeyPacked,SortKeyPartialPredicate>
==============
*/

void __fastcall std::_Pop_heap_hole_by_index<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,StreamSortKeyPacked,SortKeyPartialPredicate>(gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, __int64 _Hole, __int64 _Bottom, StreamSortKeyPacked *_Val, SortKeyPartialPredicate _Pred)
{
  ??$_Pop_heap_hole_by_index@V?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@UStreamSortKeyPacked@@USortKeyPartialPredicate@@@std@@YAXV?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@_J1$$QEAUStreamSortKeyPacked@@USortKeyPartialPredicate@@@Z(_First, _Hole, _Bottom, _Val, _Pred);
}

/*
==============
std::_Make_heap_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>
==============
*/

void __fastcall std::_Make_heap_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Last, SortKeyPartialPredicate _Pred)
{
  ??$_Make_heap_unchecked@V?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@USortKeyPartialPredicate@@@std@@YAXV?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@0USortKeyPartialPredicate@@@Z(_First, _Last, _Pred);
}

/*
==============
std::_Guess_median_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>
==============
*/

void __fastcall std::_Guess_median_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Mid, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Last, SortKeyPartialPredicate _Pred)
{
  ??$_Guess_median_unchecked@V?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@USortKeyPartialPredicate@@@std@@YAXV?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@00USortKeyPartialPredicate@@@Z(_First, _Mid, _Last, _Pred);
}

/*
==============
std::_Med3_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>
==============
*/

void __fastcall std::_Med3_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Mid, StreamSortKeyPacked *_Last, StreamImageLoadingPredicate _Pred)
{
  ??$_Med3_unchecked@PEAUStreamSortKeyPacked@@VStreamImageLoadingPredicate@@@std@@YAXPEAUStreamSortKeyPacked@@00VStreamImageLoadingPredicate@@@Z(_First, _Mid, _Last, _Pred);
}

/*
==============
std::_Pop_heap_hole_by_index<StreamSortKeyPacked *,StreamSortKeyPacked,StreamMeshLoadingPredicate>
==============
*/

void __fastcall std::_Pop_heap_hole_by_index<StreamSortKeyPacked *,StreamSortKeyPacked,StreamMeshLoadingPredicate>(StreamSortKeyPacked *_First, __int64 _Hole, __int64 _Bottom, StreamSortKeyPacked *_Val, StreamMeshLoadingPredicate _Pred)
{
  ??$_Pop_heap_hole_by_index@PEAUStreamSortKeyPacked@@U1@VStreamMeshLoadingPredicate@@@std@@YAXPEAUStreamSortKeyPacked@@_J1$$QEAU1@VStreamMeshLoadingPredicate@@@Z(_First, _Hole, _Bottom, _Val, _Pred);
}

/*
==============
std::_Pop_heap_hole_by_index<CgVehiclePriorityInfo *,CgVehiclePriorityInfo,CgVehicleMPSortFunctor>
==============
*/

void __fastcall std::_Pop_heap_hole_by_index<CgVehiclePriorityInfo *,CgVehiclePriorityInfo,CgVehicleMPSortFunctor>(CgVehiclePriorityInfo *_First, __int64 _Hole, __int64 _Bottom, CgVehiclePriorityInfo *_Val, CgVehicleMPSortFunctor _Pred)
{
  ??$_Pop_heap_hole_by_index@PEAUCgVehiclePriorityInfo@@U1@UCgVehicleMPSortFunctor@@@std@@YAXPEAUCgVehiclePriorityInfo@@_J1$$QEAU1@UCgVehicleMPSortFunctor@@@Z(_First, _Hole, _Bottom, _Val, _Pred);
}

/*
==============
std::_Med3_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>
==============
*/

void __fastcall std::_Med3_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>(CG_PlayerCorpseMP_SortableCorpseInfo *_First, CG_PlayerCorpseMP_SortableCorpseInfo *_Mid, CG_PlayerCorpseMP_SortableCorpseInfo *_Last, CG_PlayerCorpseMP_SortableCorpse_LessThanFunc _Pred)
{
  ??$_Med3_unchecked@PEAUCG_PlayerCorpseMP_SortableCorpseInfo@@UCG_PlayerCorpseMP_SortableCorpse_LessThanFunc@@@std@@YAXPEAUCG_PlayerCorpseMP_SortableCorpseInfo@@00UCG_PlayerCorpseMP_SortableCorpse_LessThanFunc@@@Z(_First, _Mid, _Last, _Pred);
}

/*
==============
std::_Partition_by_median_guess_unchecked<XSurface * *,XSurfaceHashComparer>
==============
*/

std::pair<XSurface * *,XSurface * *> *__fastcall std::_Partition_by_median_guess_unchecked<XSurface * *,XSurfaceHashComparer>(std::pair<XSurface * *,XSurface * *> *result, XSurface **_First, XSurface **_Last, XSurfaceHashComparer _Pred)
{
  return ??$_Partition_by_median_guess_unchecked@PEAPEAUXSurface@@UXSurfaceHashComparer@@@std@@YA?AU?$pair@PEAPEAUXSurface@@PEAPEAU1@@0@PEAPEAUXSurface@@0UXSurfaceHashComparer@@@Z(result, _First, _Last, _Pred);
}

/*
==============
std::_Med3_unchecked<XSurface * *,XSurfaceHashComparer>
==============
*/

void __fastcall std::_Med3_unchecked<XSurface * *,XSurfaceHashComparer>(XSurface **_First, XSurface **_Mid, XSurface **_Last, XSurfaceHashComparer _Pred)
{
  ??$_Med3_unchecked@PEAPEAUXSurface@@UXSurfaceHashComparer@@@std@@YAXPEAPEAUXSurface@@00UXSurfaceHashComparer@@@Z(_First, _Mid, _Last, _Pred);
}

/*
==============
std::_Guess_median_unchecked<CgVehiclePriorityInfo *,CgVehicleMPSortFunctor>
==============
*/

void __fastcall std::_Guess_median_unchecked<CgVehiclePriorityInfo *,CgVehicleMPSortFunctor>(CgVehiclePriorityInfo *_First, CgVehiclePriorityInfo *_Mid, CgVehiclePriorityInfo *_Last, CgVehicleMPSortFunctor _Pred)
{
  ??$_Guess_median_unchecked@PEAUCgVehiclePriorityInfo@@UCgVehicleMPSortFunctor@@@std@@YAXPEAUCgVehiclePriorityInfo@@00UCgVehicleMPSortFunctor@@@Z(_First, _Mid, _Last, _Pred);
}

/*
==============
std::_Sort_unchecked<score_t *,CgScoreBoardCompare>
==============
*/

void __fastcall std::_Sort_unchecked<score_t *,CgScoreBoardCompare>(score_t *_First, score_t *_Last, __int64 _Ideal, CgScoreBoardCompare _Pred)
{
  ??$_Sort_unchecked@PEAUscore_t@@UCgScoreBoardCompare@@@std@@YAXPEAUscore_t@@0_JUCgScoreBoardCompare@@@Z(_First, _Last, _Ideal, _Pred);
}

/*
==============
std::_Med3_unchecked<score_t *,CgScoreBoardCompare>
==============
*/

void __fastcall std::_Med3_unchecked<score_t *,CgScoreBoardCompare>(score_t *_First, score_t *_Mid, score_t *_Last, CgScoreBoardCompare _Pred)
{
  ??$_Med3_unchecked@PEAUscore_t@@UCgScoreBoardCompare@@@std@@YAXPEAUscore_t@@00UCgScoreBoardCompare@@@Z(_First, _Mid, _Last, _Pred);
}

/*
==============
std::_Pop_heap_hole_by_index<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpseInfo,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>
==============
*/

void __fastcall std::_Pop_heap_hole_by_index<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpseInfo,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>(CG_PlayerCorpseMP_SortableCorpseInfo *_First, __int64 _Hole, __int64 _Bottom, CG_PlayerCorpseMP_SortableCorpseInfo *_Val, CG_PlayerCorpseMP_SortableCorpse_LessThanFunc _Pred)
{
  ??$_Pop_heap_hole_by_index@PEAUCG_PlayerCorpseMP_SortableCorpseInfo@@U1@UCG_PlayerCorpseMP_SortableCorpse_LessThanFunc@@@std@@YAXPEAUCG_PlayerCorpseMP_SortableCorpseInfo@@_J1$$QEAU1@UCG_PlayerCorpseMP_SortableCorpse_LessThanFunc@@@Z(_First, _Hole, _Bottom, _Val, _Pred);
}

/*
==============
std::_Med3_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>
==============
*/

void __fastcall std::_Med3_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Mid, StreamSortKeyPacked *_Last, StreamMeshLoadingPredicate _Pred)
{
  ??$_Med3_unchecked@PEAUStreamSortKeyPacked@@VStreamMeshLoadingPredicate@@@std@@YAXPEAUStreamSortKeyPacked@@00VStreamMeshLoadingPredicate@@@Z(_First, _Mid, _Last, _Pred);
}

/*
==============
std::_Partition_by_median_guess_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>
==============
*/

std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> *__fastcall std::_Partition_by_median_guess_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>(std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> *result, StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, StreamMeshLoadingPredicate _Pred)
{
  return ??$_Partition_by_median_guess_unchecked@PEAUStreamSortKeyPacked@@VStreamMeshLoadingPredicate@@@std@@YA?AU?$pair@PEAUStreamSortKeyPacked@@PEAU1@@0@PEAUStreamSortKeyPacked@@0VStreamMeshLoadingPredicate@@@Z(result, _First, _Last, _Pred);
}

/*
==============
std::_Make_heap_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>
==============
*/

void __fastcall std::_Make_heap_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>(CG_PlayerCorpseMP_SortableCorpseInfo *_First, CG_PlayerCorpseMP_SortableCorpseInfo *_Last, CG_PlayerCorpseMP_SortableCorpse_LessThanFunc _Pred)
{
  ??$_Make_heap_unchecked@PEAUCG_PlayerCorpseMP_SortableCorpseInfo@@UCG_PlayerCorpseMP_SortableCorpse_LessThanFunc@@@std@@YAXPEAUCG_PlayerCorpseMP_SortableCorpseInfo@@0UCG_PlayerCorpseMP_SortableCorpse_LessThanFunc@@@Z(_First, _Last, _Pred);
}

/*
==============
std::_Pop_heap_hole_by_index<PostMatchInfo_t *,PostMatchInfo_t,LUIScoreCompare>
==============
*/

void __fastcall std::_Pop_heap_hole_by_index<PostMatchInfo_t *,PostMatchInfo_t,LUIScoreCompare>(PostMatchInfo_t *_First, __int64 _Hole, __int64 _Bottom, PostMatchInfo_t *_Val, LUIScoreCompare _Pred)
{
  ??$_Pop_heap_hole_by_index@PEAUPostMatchInfo_t@@U1@ULUIScoreCompare@@@std@@YAXPEAUPostMatchInfo_t@@_J1$$QEAU1@ULUIScoreCompare@@@Z(_First, _Hole, _Bottom, _Val, _Pred);
}

/*
==============
std::_Partition_by_median_guess_unchecked<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingMpScriptableLootSortFunctor>
==============
*/

std::pair<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingScriptableLootChestInfo *> *__fastcall std::_Partition_by_median_guess_unchecked<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingMpScriptableLootSortFunctor>(std::pair<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingScriptableLootChestInfo *> *result, CgWeaponStreamingScriptableLootChestInfo *_First, CgWeaponStreamingScriptableLootChestInfo *_Last, CgWeaponStreamingMpScriptableLootSortFunctor _Pred)
{
  return ??$_Partition_by_median_guess_unchecked@PEAUCgWeaponStreamingScriptableLootChestInfo@@UCgWeaponStreamingMpScriptableLootSortFunctor@@@std@@YA?AU?$pair@PEAUCgWeaponStreamingScriptableLootChestInfo@@PEAU1@@0@PEAUCgWeaponStreamingScriptableLootChestInfo@@0UCgWeaponStreamingMpScriptableLootSortFunctor@@@Z(result, _First, _Last, _Pred);
}

/*
==============
std::_Sort_unchecked<PostMatchInfo_t *,LUIScoreCompare>
==============
*/

void __fastcall std::_Sort_unchecked<PostMatchInfo_t *,LUIScoreCompare>(PostMatchInfo_t *_First, PostMatchInfo_t *_Last, __int64 _Ideal, LUIScoreCompare _Pred)
{
  ??$_Sort_unchecked@PEAUPostMatchInfo_t@@ULUIScoreCompare@@@std@@YAXPEAUPostMatchInfo_t@@0_JULUIScoreCompare@@@Z(_First, _Last, _Ideal, _Pred);
}

/*
==============
std::_Sort_unchecked<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingMpScriptableLootSortFunctor>
==============
*/

void __fastcall std::_Sort_unchecked<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingMpScriptableLootSortFunctor>(CgWeaponStreamingScriptableLootChestInfo *_First, CgWeaponStreamingScriptableLootChestInfo *_Last, __int64 _Ideal, CgWeaponStreamingMpScriptableLootSortFunctor _Pred)
{
  ??$_Sort_unchecked@PEAUCgWeaponStreamingScriptableLootChestInfo@@UCgWeaponStreamingMpScriptableLootSortFunctor@@@std@@YAXPEAUCgWeaponStreamingScriptableLootChestInfo@@0_JUCgWeaponStreamingMpScriptableLootSortFunctor@@@Z(_First, _Last, _Ideal, _Pred);
}

/*
==============
std::_Insertion_sort_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>
==============
*/

StreamSortKeyPacked *__fastcall std::_Insertion_sort_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *const _Last, StreamImageLoadingPredicate _Pred)
{
  return ??$_Insertion_sort_unchecked@PEAUStreamSortKeyPacked@@VStreamImageLoadingPredicate@@@std@@YAPEAUStreamSortKeyPacked@@PEAU1@QEAU1@VStreamImageLoadingPredicate@@@Z(_First, _Last, _Pred);
}

/*
==============
std::_Sort_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>
==============
*/

void __fastcall std::_Sort_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, __int64 _Ideal, StreamMeshLoadingPredicate _Pred)
{
  ??$_Sort_unchecked@PEAUStreamSortKeyPacked@@VStreamMeshLoadingPredicate@@@std@@YAXPEAUStreamSortKeyPacked@@0_JVStreamMeshLoadingPredicate@@@Z(_First, _Last, _Ideal, _Pred);
}

/*
==============
std::_Partition_by_median_guess_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>
==============
*/

std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> *__fastcall std::_Partition_by_median_guess_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>(std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> *result, StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, StreamGenericLoadingPredicate _Pred)
{
  return ??$_Partition_by_median_guess_unchecked@PEAUStreamSortKeyPacked@@VStreamGenericLoadingPredicate@@@std@@YA?AU?$pair@PEAUStreamSortKeyPacked@@PEAU1@@0@PEAUStreamSortKeyPacked@@0VStreamGenericLoadingPredicate@@@Z(result, _First, _Last, _Pred);
}

/*
==============
std::_Med3_unchecked<StreamSortKeyPacked *,SortKeyPartialPredicate>
==============
*/

void __fastcall std::_Med3_unchecked<StreamSortKeyPacked *,SortKeyPartialPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Mid, StreamSortKeyPacked *_Last, SortKeyPartialPredicate _Pred)
{
  ??$_Med3_unchecked@PEAUStreamSortKeyPacked@@USortKeyPartialPredicate@@@std@@YAXPEAUStreamSortKeyPacked@@00USortKeyPartialPredicate@@@Z(_First, _Mid, _Last, _Pred);
}

/*
==============
std::_Sort_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>
==============
*/

void __fastcall std::_Sort_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, __int64 _Ideal, StreamGenericLoadingPredicate _Pred)
{
  ??$_Sort_unchecked@PEAUStreamSortKeyPacked@@VStreamGenericLoadingPredicate@@@std@@YAXPEAUStreamSortKeyPacked@@0_JVStreamGenericLoadingPredicate@@@Z(_First, _Last, _Ideal, _Pred);
}

/*
==============
std::_Sort_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>
==============
*/

void __fastcall std::_Sort_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, __int64 _Ideal, StreamImageLoadingPredicate _Pred)
{
  ??$_Sort_unchecked@PEAUStreamSortKeyPacked@@VStreamImageLoadingPredicate@@@std@@YAXPEAUStreamSortKeyPacked@@0_JVStreamImageLoadingPredicate@@@Z(_First, _Last, _Ideal, _Pred);
}

/*
==============
std::_Guess_median_unchecked<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingMpClientModelSortFunctor>
==============
*/

void __fastcall std::_Guess_median_unchecked<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingMpClientModelSortFunctor>(CgWeaponStreamingClientModelInfo *_First, CgWeaponStreamingClientModelInfo *_Mid, CgWeaponStreamingClientModelInfo *_Last, CgWeaponStreamingMpClientModelSortFunctor _Pred)
{
  ??$_Guess_median_unchecked@PEAUCgWeaponStreamingClientModelInfo@@UCgWeaponStreamingMpClientModelSortFunctor@@@std@@YAXPEAUCgWeaponStreamingClientModelInfo@@00UCgWeaponStreamingMpClientModelSortFunctor@@@Z(_First, _Mid, _Last, _Pred);
}

/*
==============
std::_Partition_by_median_guess_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>
==============
*/

std::pair<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpseInfo *> *__fastcall std::_Partition_by_median_guess_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>(std::pair<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpseInfo *> *result, CG_PlayerCorpseMP_SortableCorpseInfo *_First, CG_PlayerCorpseMP_SortableCorpseInfo *_Last, CG_PlayerCorpseMP_SortableCorpse_LessThanFunc _Pred)
{
  return ??$_Partition_by_median_guess_unchecked@PEAUCG_PlayerCorpseMP_SortableCorpseInfo@@UCG_PlayerCorpseMP_SortableCorpse_LessThanFunc@@@std@@YA?AU?$pair@PEAUCG_PlayerCorpseMP_SortableCorpseInfo@@PEAU1@@0@PEAUCG_PlayerCorpseMP_SortableCorpseInfo@@0UCG_PlayerCorpseMP_SortableCorpse_LessThanFunc@@@Z(result, _First, _Last, _Pred);
}

/*
==============
std::_Pop_heap_hole_by_index<StreamSortKeyPacked *,StreamSortKeyPacked,SortKeyPartialPredicate>
==============
*/

void __fastcall std::_Pop_heap_hole_by_index<StreamSortKeyPacked *,StreamSortKeyPacked,SortKeyPartialPredicate>(StreamSortKeyPacked *_First, __int64 _Hole, __int64 _Bottom, StreamSortKeyPacked *_Val, SortKeyPartialPredicate _Pred)
{
  ??$_Pop_heap_hole_by_index@PEAUStreamSortKeyPacked@@U1@USortKeyPartialPredicate@@@std@@YAXPEAUStreamSortKeyPacked@@_J1$$QEAU1@USortKeyPartialPredicate@@@Z(_First, _Hole, _Bottom, _Val, _Pred);
}

/*
==============
std::_Make_heap_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>
==============
*/

void __fastcall std::_Make_heap_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, StreamMeshLoadingPredicate _Pred)
{
  ??$_Make_heap_unchecked@PEAUStreamSortKeyPacked@@VStreamMeshLoadingPredicate@@@std@@YAXPEAUStreamSortKeyPacked@@0VStreamMeshLoadingPredicate@@@Z(_First, _Last, _Pred);
}

/*
==============
std::is_sorted_until<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>
==============
*/

gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *__fastcall std::is_sorted_until<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *result, const gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Last, SortKeyPartialPredicate _Pred)
{
  return ??$is_sorted_until@V?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@USortKeyPartialPredicate@@@std@@YA?AV?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@V123@V123@USortKeyPartialPredicate@@@Z(result, _First, _Last, _Pred);
}

/*
==============
std::_Med3_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>
==============
*/

void __fastcall std::_Med3_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Mid, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Last, SortKeyPartialPredicate _Pred)
{
  ??$_Med3_unchecked@V?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@USortKeyPartialPredicate@@@std@@YAXV?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@00USortKeyPartialPredicate@@@Z(_First, _Mid, _Last, _Pred);
}

/*
==============
std::_Insertion_sort_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>
==============
*/

CG_PlayerCorpseMP_SortableCorpseInfo *__fastcall std::_Insertion_sort_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>(CG_PlayerCorpseMP_SortableCorpseInfo *_First, CG_PlayerCorpseMP_SortableCorpseInfo *const _Last, CG_PlayerCorpseMP_SortableCorpse_LessThanFunc _Pred)
{
  return ??$_Insertion_sort_unchecked@PEAUCG_PlayerCorpseMP_SortableCorpseInfo@@UCG_PlayerCorpseMP_SortableCorpse_LessThanFunc@@@std@@YAPEAUCG_PlayerCorpseMP_SortableCorpseInfo@@PEAU1@QEAU1@UCG_PlayerCorpseMP_SortableCorpse_LessThanFunc@@@Z(_First, _Last, _Pred);
}

/*
==============
std::_Partition_by_median_guess_unchecked<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingMpClientModelSortFunctor>
==============
*/

std::pair<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingClientModelInfo *> *__fastcall std::_Partition_by_median_guess_unchecked<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingMpClientModelSortFunctor>(std::pair<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingClientModelInfo *> *result, CgWeaponStreamingClientModelInfo *_First, CgWeaponStreamingClientModelInfo *_Last, CgWeaponStreamingMpClientModelSortFunctor _Pred)
{
  return ??$_Partition_by_median_guess_unchecked@PEAUCgWeaponStreamingClientModelInfo@@UCgWeaponStreamingMpClientModelSortFunctor@@@std@@YA?AU?$pair@PEAUCgWeaponStreamingClientModelInfo@@PEAU1@@0@PEAUCgWeaponStreamingClientModelInfo@@0UCgWeaponStreamingMpClientModelSortFunctor@@@Z(result, _First, _Last, _Pred);
}

/*
==============
std::nth_element<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>
==============
*/

void __fastcall std::nth_element<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Nth, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Last, SortKeyPartialPredicate _Pred)
{
  ??$nth_element@V?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@USortKeyPartialPredicate@@@std@@YAXV?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@00USortKeyPartialPredicate@@@Z(_First, _Nth, _Last, _Pred);
}

/*
==============
std::_Sort_unchecked<CgVehiclePriorityInfo *,CgVehicleMPSortFunctor>
==============
*/

void __fastcall std::_Sort_unchecked<CgVehiclePriorityInfo *,CgVehicleMPSortFunctor>(CgVehiclePriorityInfo *_First, CgVehiclePriorityInfo *_Last, __int64 _Ideal, CgVehicleMPSortFunctor _Pred)
{
  ??$_Sort_unchecked@PEAUCgVehiclePriorityInfo@@UCgVehicleMPSortFunctor@@@std@@YAXPEAUCgVehiclePriorityInfo@@0_JUCgVehicleMPSortFunctor@@@Z(_First, _Last, _Ideal, _Pred);
}

/*
==============
std::_Sort_unchecked<StreamSortKeyPacked *,SortKeyPartialPredicate>
==============
*/

void __fastcall std::_Sort_unchecked<StreamSortKeyPacked *,SortKeyPartialPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, __int64 _Ideal, SortKeyPartialPredicate _Pred)
{
  ??$_Sort_unchecked@PEAUStreamSortKeyPacked@@USortKeyPartialPredicate@@@std@@YAXPEAUStreamSortKeyPacked@@0_JUSortKeyPartialPredicate@@@Z(_First, _Last, _Ideal, _Pred);
}

/*
==============
std::_Med3_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>
==============
*/

void __fastcall std::_Med3_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Mid, StreamSortKeyPacked *_Last, StreamGenericLoadingPredicate _Pred)
{
  ??$_Med3_unchecked@PEAUStreamSortKeyPacked@@VStreamGenericLoadingPredicate@@@std@@YAXPEAUStreamSortKeyPacked@@00VStreamGenericLoadingPredicate@@@Z(_First, _Mid, _Last, _Pred);
}

/*
==============
std::_Guess_median_unchecked<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingMpScriptableLootSortFunctor>
==============
*/

void __fastcall std::_Guess_median_unchecked<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingMpScriptableLootSortFunctor>(CgWeaponStreamingScriptableLootChestInfo *_First, CgWeaponStreamingScriptableLootChestInfo *_Mid, CgWeaponStreamingScriptableLootChestInfo *_Last, CgWeaponStreamingMpScriptableLootSortFunctor _Pred)
{
  ??$_Guess_median_unchecked@PEAUCgWeaponStreamingScriptableLootChestInfo@@UCgWeaponStreamingMpScriptableLootSortFunctor@@@std@@YAXPEAUCgWeaponStreamingScriptableLootChestInfo@@00UCgWeaponStreamingMpScriptableLootSortFunctor@@@Z(_First, _Mid, _Last, _Pred);
}

/*
==============
std::_Partition_by_median_guess_unchecked<StreamSortKeyPacked *,SortKeyPartialPredicate>
==============
*/

std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> *__fastcall std::_Partition_by_median_guess_unchecked<StreamSortKeyPacked *,SortKeyPartialPredicate>(std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> *result, StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, SortKeyPartialPredicate _Pred)
{
  return ??$_Partition_by_median_guess_unchecked@PEAUStreamSortKeyPacked@@USortKeyPartialPredicate@@@std@@YA?AU?$pair@PEAUStreamSortKeyPacked@@PEAU1@@0@PEAUStreamSortKeyPacked@@0USortKeyPartialPredicate@@@Z(result, _First, _Last, _Pred);
}

/*
==============
std::_Med3_unchecked<PostMatchInfo_t *,LUIScoreCompare>
==============
*/

void __fastcall std::_Med3_unchecked<PostMatchInfo_t *,LUIScoreCompare>(PostMatchInfo_t *_First, PostMatchInfo_t *_Mid, PostMatchInfo_t *_Last, LUIScoreCompare _Pred)
{
  ??$_Med3_unchecked@PEAUPostMatchInfo_t@@ULUIScoreCompare@@@std@@YAXPEAUPostMatchInfo_t@@00ULUIScoreCompare@@@Z(_First, _Mid, _Last, _Pred);
}

/*
==============
std::_Sort_heap_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>
==============
*/

void __fastcall std::_Sort_heap_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Last, SortKeyPartialPredicate _Pred)
{
  ??$_Sort_heap_unchecked@V?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@USortKeyPartialPredicate@@@std@@YAXV?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@0USortKeyPartialPredicate@@@Z(_First, _Last, _Pred);
}

/*
==============
std::_Sort_unchecked<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingMpClientModelSortFunctor>
==============
*/

void __fastcall std::_Sort_unchecked<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingMpClientModelSortFunctor>(CgWeaponStreamingClientModelInfo *_First, CgWeaponStreamingClientModelInfo *_Last, __int64 _Ideal, CgWeaponStreamingMpClientModelSortFunctor _Pred)
{
  ??$_Sort_unchecked@PEAUCgWeaponStreamingClientModelInfo@@UCgWeaponStreamingMpClientModelSortFunctor@@@std@@YAXPEAUCgWeaponStreamingClientModelInfo@@0_JUCgWeaponStreamingMpClientModelSortFunctor@@@Z(_First, _Last, _Ideal, _Pred);
}

/*
==============
std::_Partition_by_median_guess_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>
==============
*/

std::pair<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> > *__fastcall std::_Partition_by_median_guess_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(std::pair<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> > *result, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Last, SortKeyPartialPredicate _Pred)
{
  return ??$_Partition_by_median_guess_unchecked@V?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@USortKeyPartialPredicate@@@std@@YA?AU?$pair@V?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@V123@@0@V?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@0USortKeyPartialPredicate@@@Z(result, _First, _Last, _Pred);
}

/*
==============
std::_Sort_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>
==============
*/

void __fastcall std::_Sort_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>(CG_PlayerCorpseMP_SortableCorpseInfo *_First, CG_PlayerCorpseMP_SortableCorpseInfo *_Last, __int64 _Ideal, CG_PlayerCorpseMP_SortableCorpse_LessThanFunc _Pred)
{
  ??$_Sort_unchecked@PEAUCG_PlayerCorpseMP_SortableCorpseInfo@@UCG_PlayerCorpseMP_SortableCorpse_LessThanFunc@@@std@@YAXPEAUCG_PlayerCorpseMP_SortableCorpseInfo@@0_JUCG_PlayerCorpseMP_SortableCorpse_LessThanFunc@@@Z(_First, _Last, _Ideal, _Pred);
}

/*
==============
std::sort<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>
==============
*/

void __fastcall std::sort<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(const gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, const gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Last, SortKeyPartialPredicate _Pred)
{
  ??$sort@V?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@USortKeyPartialPredicate@@@std@@YAXV?$span_iterator@V?$span@UStreamSortKeyPacked@@$0?0@gsl@@$0A@@details@gsl@@0USortKeyPartialPredicate@@@Z(_First, _Last, _Pred);
}

/*
==============
std::_Insertion_sort_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>
==============
*/
CG_PlayerCorpseMP_SortableCorpseInfo *std::_Insertion_sort_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>(CG_PlayerCorpseMP_SortableCorpseInfo *_First, CG_PlayerCorpseMP_SortableCorpseInfo *const _Last, CG_PlayerCorpseMP_SortableCorpse_LessThanFunc _Pred)
{
  CG_PlayerCorpseMP_SortableCorpseInfo *v5; 
  CG_PlayerCorpseMP_SortableCorpseInfo *v6; 
  __int64 v7; 
  double v8; 
  PlayerCorpseMPViewZone zone; 
  CG_PlayerCorpseMP_SortableCorpseInfo *v11; 
  __int16 v12; 
  unsigned __int64 v13; 
  unsigned __int64 v15; 
  bool *i; 
  unsigned __int8 v17; 
  char v18; 
  int v19; 
  __int128 v21; 
  __int128 v22; 
  double v23; 

  if ( _First == _Last )
    return _Last;
  v5 = _First + 1;
  v6 = _First + 1;
  if ( &_First[1] == _Last )
    return _Last;
  v7 = 1i64;
  do
  {
    v8 = *(double *)&v6->visible;
    _XMM0 = *(_OWORD *)&v6->entityState;
    zone = _First->zone;
    v11 = v6;
    v23 = v8;
    v22 = *(_OWORD *)&v6->entityState;
    v12 = *(_QWORD *)&v6->index;
    LOBYTE(v13) = BYTE2(v8) < 5u;
    v21 = *(_OWORD *)&v6->entityState;
    if ( BYTE2(v8) < 5u == (unsigned __int8)zone < PLAYER_CORPSE_ZONE_5 )
    {
      if ( LOBYTE(v8) == _First->visible )
      {
        __asm { vpextrq rax, xmm0, 1 }
        v13 = _RAX >> 16;
        if ( BYTE2(_RAX) == _First->isNewNextSnap )
        {
          if ( BYTE1(v8) == _First->fresh )
          {
            if ( BYTE2(v8) == (unsigned __int8)zone )
            {
              LODWORD(v13) = _First->time;
              v15 = HIDWORD(_RAX);
              if ( (_DWORD)v15 == (_DWORD)v13 )
                LOBYTE(v13) = v12 < _First->index;
              else
                LOBYTE(v13) = (int)v15 > (int)v13;
            }
            else
            {
              LOBYTE(v13) = BYTE2(v8) < (unsigned int)(unsigned __int8)zone;
            }
          }
          else
          {
            LOBYTE(v13) = BYTE1(v8);
          }
        }
      }
      else
      {
        LOBYTE(v13) = LOBYTE(v8);
      }
    }
    if ( (_BYTE)v13 )
    {
      memmove_0(v5, _First, v7 * 24);
      *(_OWORD *)&_First->entityState = v21;
      *(double *)&_First->visible = v8;
    }
    else
    {
      for ( i = &_First[v7].visible; ; v11 = (CG_PlayerCorpseMP_SortableCorpseInfo *)(i - 16) )
      {
        v17 = *(i - 22);
        i -= 24;
        if ( BYTE2(v23) < 5u == v17 < 5u )
        {
          if ( LOBYTE(v8) == *i )
          {
            if ( BYTE10(v22) == *(i - 6) )
            {
              if ( BYTE1(v23) == i[1] )
              {
                if ( BYTE2(v23) == v17 )
                {
                  v19 = *((_DWORD *)i - 1);
                  v18 = HIDWORD(v22) == v19 ? v12 < *((_WORD *)i - 4) : SHIDWORD(v22) > v19;
                }
                else
                {
                  v18 = BYTE2(v23) < (unsigned int)v17;
                }
              }
              else
              {
                v18 = BYTE1(v23);
              }
            }
            else
            {
              v18 = BYTE10(v22);
            }
          }
          else
          {
            v18 = LOBYTE(v8);
          }
        }
        else
        {
          v18 = BYTE2(v23) < 5u;
        }
        if ( !v18 )
          break;
        *(_OWORD *)&v11->entityState = *((_OWORD *)i - 1);
        *(double *)&v11->visible = *(double *)i;
      }
      *(_OWORD *)&v11->entityState = v21;
      *(double *)&v11->visible = v8;
    }
    ++v6;
    v5 = _First + 1;
    ++v7;
  }
  while ( v6 != _Last );
  return _Last;
}

/*
==============
std::_Make_heap_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>
==============
*/
void std::_Make_heap_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>(CG_PlayerCorpseMP_SortableCorpseInfo *_First, CG_PlayerCorpseMP_SortableCorpseInfo *_Last, CG_PlayerCorpseMP_SortableCorpse_LessThanFunc _Pred)
{
  __int64 v4; 
  __int64 v5; 
  __int64 v6; 
  __int64 v7; 
  CG_PlayerCorpseMP_SortableCorpseInfo *v8; 
  __int64 v9; 
  __int128 v10; 
  double v11; 
  __int64 v12; 
  __int64 v13; 
  __int64 v14; 
  __int64 v15; 
  PlayerCorpseMPViewZone zone; 
  PlayerCorpseMPViewZone v17; 
  bool visible; 
  int time; 
  __int64 v20; 
  __int64 v21; 
  __int64 v22; 
  __int64 i; 
  PlayerCorpseMPViewZone v24; 
  CG_PlayerCorpseMP_SortableCorpseInfo *v25; 
  char isNewNextSnap; 
  int v27; 
  __int64 v28; 
  __int64 v29; 
  __int64 v30; 
  __int64 v31; 
  CG_PlayerCorpseMP_SortableCorpseInfo *v32; 

  v4 = (unsigned __int128)(((char *)_Last - (char *)_First) * (__int128)0x2AAAAAAAAAAAAAABi64) >> 64;
  v5 = ((unsigned __int64)v4 >> 63) + (v4 >> 2);
  v30 = v5;
  v6 = v5 >> 1;
  if ( v5 >> 1 > 0 )
  {
    v7 = v5 - 1;
    v8 = &_First[v6];
    v9 = (v5 - 1) >> 1;
    v31 = v5 - 1;
    do
    {
      v10 = *(_OWORD *)&v8[-1].entityState;
      v11 = *(double *)&v8[-1].visible;
      --v6;
      v32 = v8 - 1;
      v12 = v6;
      v13 = v6;
      if ( v6 < v9 )
      {
        do
        {
          v14 = 2 * v13;
          v15 = 2 * v13;
          zone = _First[2 * v13 + 2].zone;
          v17 = _First[2 * v13 + 1].zone;
          visible = (unsigned __int8)zone < PLAYER_CORPSE_ZONE_5;
          if ( (unsigned __int8)zone < PLAYER_CORPSE_ZONE_5 == (unsigned __int8)v17 < PLAYER_CORPSE_ZONE_5 )
          {
            visible = _First[v15 + 2].visible;
            if ( visible == _First[v15 + 1].visible )
            {
              visible = _First[v15 + 2].isNewNextSnap;
              if ( visible == _First[v15 + 1].isNewNextSnap )
              {
                visible = _First[v15 + 2].fresh;
                if ( visible == _First[v15 + 1].fresh )
                {
                  if ( zone == v17 )
                  {
                    time = _First[v15 + 1].time;
                    if ( _First[v15 + 2].time == time )
                      visible = _First[v15 + 2].index < _First[v15 + 1].index;
                    else
                      visible = _First[v15 + 2].time > time;
                  }
                  else
                  {
                    visible = (unsigned __int8)zone < (unsigned __int8)v17;
                  }
                }
              }
            }
          }
          v20 = v12;
          v13 = v14 + 2i64 - visible;
          v12 = v13;
          *(_OWORD *)&_First[v20].entityState = *(_OWORD *)&_First[v13].entityState;
          *(double *)&_First[v20].visible = *(double *)&_First[v13].visible;
        }
        while ( v13 < v9 );
        v5 = v30;
        v7 = v31;
      }
      if ( v13 == v9 && (v5 & 1) == 0 )
      {
        v21 = v12;
        v12 = v7;
        v22 = v5;
        *(_OWORD *)&_First[v21].entityState = *(_OWORD *)&_First[v22 - 1].entityState;
        *(double *)&_First[v21].visible = *(double *)&_First[v22 - 1].visible;
      }
      for ( i = (v12 - 1) >> 1; v6 < v12; *(double *)&_First[v28].visible = *(double *)&v25->visible )
      {
        v24 = _First[i].zone;
        v25 = &_First[i];
        isNewNextSnap = (unsigned __int8)v24 < PLAYER_CORPSE_ZONE_5;
        if ( (unsigned __int8)v24 < PLAYER_CORPSE_ZONE_5 == BYTE2(v11) < 5u )
        {
          isNewNextSnap = v25->visible;
          if ( isNewNextSnap == LOBYTE(v11) )
          {
            isNewNextSnap = v25->isNewNextSnap;
            if ( isNewNextSnap == BYTE10(v10) )
            {
              isNewNextSnap = v25->fresh;
              if ( isNewNextSnap == BYTE1(v11) )
              {
                if ( v24 == BYTE2(v11) )
                {
                  v27 = v25->time;
                  if ( v27 == HIDWORD(v10) )
                    isNewNextSnap = v25->index < SWORD4(v10);
                  else
                    isNewNextSnap = v27 > SHIDWORD(v10);
                }
                else
                {
                  isNewNextSnap = (unsigned __int8)v24 < BYTE2(v11);
                }
              }
            }
          }
        }
        if ( !isNewNextSnap )
          break;
        v28 = v12;
        v12 = i;
        *(_OWORD *)&_First[v28].entityState = *(_OWORD *)&v25->entityState;
        i = (i - 1) >> 1;
      }
      v5 = v30;
      v29 = v12;
      *(_OWORD *)&_First[v29].entityState = v10;
      *(double *)&_First[v29].visible = v11;
      v8 = v32;
      v7 = v30 - 1;
    }
    while ( v6 > 0 );
  }
}

/*
==============
std::_Med3_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>
==============
*/
void std::_Med3_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>(CG_PlayerCorpseMP_SortableCorpseInfo *_First, CG_PlayerCorpseMP_SortableCorpseInfo *_Mid, CG_PlayerCorpseMP_SortableCorpseInfo *_Last, CG_PlayerCorpseMP_SortableCorpse_LessThanFunc _Pred)
{
  PlayerCorpseMPViewZone zone; 
  PlayerCorpseMPViewZone v6; 
  bool visible; 
  int time; 
  __int128 v9; 
  double v10; 
  PlayerCorpseMPViewZone v11; 
  bool isNewNextSnap; 
  int v13; 
  __int128 v14; 
  double v15; 
  PlayerCorpseMPViewZone v16; 
  PlayerCorpseMPViewZone v17; 
  bool fresh; 
  int v19; 

  zone = _Mid->zone;
  v6 = _First->zone;
  visible = (unsigned __int8)zone < PLAYER_CORPSE_ZONE_5;
  if ( (unsigned __int8)zone < PLAYER_CORPSE_ZONE_5 == (unsigned __int8)v6 < PLAYER_CORPSE_ZONE_5 )
  {
    visible = _Mid->visible;
    if ( visible == _First->visible )
    {
      visible = _Mid->isNewNextSnap;
      if ( visible == _First->isNewNextSnap )
      {
        visible = _Mid->fresh;
        if ( visible == _First->fresh )
        {
          if ( zone == v6 )
          {
            time = _First->time;
            if ( _Mid->time == time )
              visible = _Mid->index < _First->index;
            else
              visible = _Mid->time > time;
          }
          else
          {
            visible = (unsigned __int8)zone < (unsigned __int8)v6;
          }
        }
      }
    }
  }
  if ( visible )
  {
    v9 = *(_OWORD *)&_Mid->entityState;
    v10 = *(double *)&_Mid->visible;
    *_Mid = *_First;
    *(_OWORD *)&_First->entityState = v9;
    *(double *)&_First->visible = v10;
    zone = _Mid->zone;
  }
  v11 = _Last->zone;
  isNewNextSnap = (unsigned __int8)v11 < PLAYER_CORPSE_ZONE_5;
  if ( (unsigned __int8)v11 < PLAYER_CORPSE_ZONE_5 == (unsigned __int8)zone < PLAYER_CORPSE_ZONE_5 )
  {
    isNewNextSnap = _Last->visible;
    if ( isNewNextSnap == _Mid->visible )
    {
      isNewNextSnap = _Last->isNewNextSnap;
      if ( isNewNextSnap == _Mid->isNewNextSnap )
      {
        isNewNextSnap = _Last->fresh;
        if ( isNewNextSnap == _Mid->fresh )
        {
          if ( v11 == zone )
          {
            v13 = _Mid->time;
            if ( _Last->time == v13 )
              isNewNextSnap = _Last->index < _Mid->index;
            else
              isNewNextSnap = _Last->time > v13;
          }
          else
          {
            isNewNextSnap = (unsigned __int8)v11 < (unsigned __int8)zone;
          }
        }
      }
    }
  }
  if ( isNewNextSnap )
  {
    v14 = *(_OWORD *)&_Last->entityState;
    v15 = *(double *)&_Last->visible;
    *_Last = *_Mid;
    *(_OWORD *)&_Mid->entityState = v14;
    *(double *)&_Mid->visible = v15;
    v16 = _Mid->zone;
    v17 = _First->zone;
    fresh = (unsigned __int8)v16 < PLAYER_CORPSE_ZONE_5;
    if ( (unsigned __int8)v16 < PLAYER_CORPSE_ZONE_5 == (unsigned __int8)v17 < PLAYER_CORPSE_ZONE_5 )
    {
      fresh = _Mid->visible;
      if ( fresh == _First->visible )
      {
        fresh = _Mid->isNewNextSnap;
        if ( fresh == _First->isNewNextSnap )
        {
          fresh = _Mid->fresh;
          if ( fresh == _First->fresh )
          {
            if ( v16 == v17 )
            {
              v19 = _First->time;
              if ( _Mid->time == v19 )
                fresh = _Mid->index < _First->index;
              else
                fresh = _Mid->time > v19;
            }
            else
            {
              fresh = (unsigned __int8)v16 < (unsigned __int8)v17;
            }
          }
        }
      }
    }
    if ( fresh )
    {
      *_Mid = *_First;
      *(_OWORD *)&_First->entityState = v14;
      *(double *)&_First->visible = v15;
    }
  }
}

/*
==============
std::_Partition_by_median_guess_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>
==============
*/
std::pair<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpseInfo *> *std::_Partition_by_median_guess_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>(std::pair<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpseInfo *> *result, CG_PlayerCorpseMP_SortableCorpseInfo *_First, CG_PlayerCorpseMP_SortableCorpseInfo *_Last, CG_PlayerCorpseMP_SortableCorpse_LessThanFunc _Pred)
{
  CG_PlayerCorpseMP_SortableCorpseInfo *v4; 
  std::pair<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpseInfo *> *v6; 
  CG_PlayerCorpseMP_SortableCorpseInfo *v8; 
  signed __int64 v9; 
  unsigned __int64 v10; 
  unsigned __int64 v11; 
  CG_PlayerCorpseMP_SortableCorpseInfo *v12; 
  unsigned __int64 v13; 
  bool *p_visible; 
  unsigned __int8 v15; 
  unsigned __int8 v16; 
  char v17; 
  char v18; 
  int v19; 
  int v20; 
  int v21; 
  int v22; 
  PlayerCorpseMPViewZone zone; 
  bool v24; 
  unsigned __int8 v25; 
  char v26; 
  int v27; 
  int time; 
  char visible; 
  int v30; 
  int v31; 
  unsigned __int64 v32; 
  CG_PlayerCorpseMP_SortableCorpseInfo *v33; 
  PlayerCorpseMPViewZone v34; 
  unsigned __int8 v35; 
  char v36; 
  char isNewNextSnap; 
  int v38; 
  int v39; 
  int v40; 
  __int128 v41; 
  double v42; 
  bool v43; 
  PlayerCorpseMPViewZone v44; 
  PlayerCorpseMPViewZone v45; 
  bool v46; 
  bool fresh; 
  int v48; 
  int v49; 
  int v50; 
  CG_PlayerCorpseMP_SortableCorpseInfo *v51; 
  __int128 v52; 
  double v53; 
  __int128 v54; 
  double v55; 
  __int128 v56; 
  double v57; 
  __int128 v58; 
  double v59; 
  __int128 v60; 
  __int128 v61; 
  double v62; 
  __int128 v63; 
  double v64; 
  std::pair<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpseInfo *> *v65; 

  v4 = _First;
  v6 = result;
  v8 = &_First[(_Last - _First) >> 1];
  v9 = &_Last[-1] - _First;
  if ( v9 <= 40 )
  {
    std::_Med3_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>(v4, v8, _Last - 1, _Pred);
  }
  else
  {
    v10 = 48 * ((v9 + 1) >> 3);
    v11 = 24 * ((v9 + 1) >> 3);
    v12 = &v4[v11 / 0x18];
    std::_Med3_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>(_First, v12, &_First[v10 / 0x18], _Pred);
    std::_Med3_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>(&v8[v11 / 0xFFFFFFFFFFFFFFE8ui64], v8, &v8[v11 / 0x18], _Pred);
    std::_Med3_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>(&_Last[v10 / 0xFFFFFFFFFFFFFFE8ui64 - 1], &_Last[v11 / 0xFFFFFFFFFFFFFFE8ui64 - 1], _Last - 1, _Pred);
    std::_Med3_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>(v12, v8, &_Last[v11 / 0xFFFFFFFFFFFFFFE8ui64 - 1], _Pred);
    v4 = _First;
    v6 = result;
  }
  v13 = (unsigned __int64)&v8[1];
  if ( v4 < v8 )
  {
    p_visible = &v8[-1].visible;
    do
    {
      v15 = p_visible[2];
      v16 = p_visible[26];
      v17 = v16 < 5u;
      if ( v15 < 5u == v16 < 5u )
      {
        v18 = *p_visible;
        if ( *p_visible == p_visible[24] )
        {
          v18 = *(p_visible - 6);
          if ( v18 == p_visible[18] )
          {
            v18 = p_visible[1];
            if ( v18 == p_visible[25] )
            {
              if ( v15 == v16 )
              {
                v19 = *((_DWORD *)p_visible - 1);
                v20 = *((_DWORD *)p_visible + 5);
                if ( v19 == v20 )
                  v18 = *((_WORD *)p_visible - 4) < *((_WORD *)p_visible + 8);
                else
                  v18 = v19 > v20;
              }
              else
              {
                v18 = v15 < v16;
              }
            }
          }
        }
      }
      else
      {
        v18 = v15 < 5u;
      }
      if ( v18 )
        break;
      if ( v17 == v15 < 5u )
      {
        v17 = p_visible[24];
        if ( v17 == *p_visible )
        {
          v17 = p_visible[18];
          if ( v17 == *(p_visible - 6) )
          {
            v17 = p_visible[25];
            if ( v17 == p_visible[1] )
            {
              if ( v16 == v15 )
              {
                v21 = *((_DWORD *)p_visible + 5);
                v22 = *((_DWORD *)p_visible - 1);
                if ( v21 == v22 )
                  v17 = *((_WORD *)p_visible + 8) < *((_WORD *)p_visible - 4);
                else
                  v17 = v21 > v22;
              }
              else
              {
                v17 = v16 < v15;
              }
            }
          }
        }
      }
      if ( v17 )
        break;
      --v8;
      p_visible -= 24;
    }
    while ( v4 < v8 );
  }
  if ( v13 < (unsigned __int64)_Last )
  {
    zone = v8->zone;
    v24 = (unsigned __int8)zone < PLAYER_CORPSE_ZONE_5;
    do
    {
      v25 = *(_BYTE *)(v13 + 18);
      if ( v25 < 5u == v24 )
      {
        v26 = *(_BYTE *)(v13 + 16);
        if ( v26 == v8->visible )
        {
          v26 = *(_BYTE *)(v13 + 10);
          if ( v26 == v8->isNewNextSnap )
          {
            v26 = *(_BYTE *)(v13 + 17);
            if ( v26 == v8->fresh )
            {
              if ( v25 == zone )
              {
                v27 = *(_DWORD *)(v13 + 12);
                time = v8->time;
                if ( v27 == time )
                  v26 = *(_WORD *)(v13 + 8) < v8->index;
                else
                  v26 = v27 > time;
              }
              else
              {
                v26 = v25 < (unsigned __int8)zone;
              }
            }
          }
        }
      }
      else
      {
        v26 = v25 < 5u;
      }
      if ( v26 )
        break;
      if ( v24 == v25 < 5u )
      {
        visible = v8->visible;
        if ( visible == *(_BYTE *)(v13 + 16) )
        {
          visible = v8->isNewNextSnap;
          if ( visible == *(_BYTE *)(v13 + 10) )
          {
            visible = v8->fresh;
            if ( visible == *(_BYTE *)(v13 + 17) )
            {
              if ( zone == v25 )
              {
                v30 = v8->time;
                v31 = *(_DWORD *)(v13 + 12);
                if ( v30 == v31 )
                  visible = v8->index < *(_WORD *)(v13 + 8);
                else
                  visible = v30 > v31;
              }
              else
              {
                visible = (unsigned __int8)zone < v25;
              }
            }
          }
        }
      }
      else
      {
        visible = (unsigned __int8)zone < PLAYER_CORPSE_ZONE_5;
      }
      if ( visible )
        break;
      v13 += 24i64;
    }
    while ( v13 < (unsigned __int64)_Last );
  }
  v32 = v13;
  v33 = v8;
  while ( 2 )
  {
    while ( 2 )
    {
      while ( v32 < (unsigned __int64)_Last )
      {
        v34 = v8->zone;
        v35 = *(_BYTE *)(v32 + 18);
        v36 = v35 < 5u;
        if ( (unsigned __int8)v34 < PLAYER_CORPSE_ZONE_5 == v35 < 5u )
        {
          isNewNextSnap = v8->visible;
          if ( isNewNextSnap == *(_BYTE *)(v32 + 16) )
          {
            isNewNextSnap = v8->isNewNextSnap;
            if ( isNewNextSnap == *(_BYTE *)(v32 + 10) )
            {
              isNewNextSnap = v8->fresh;
              if ( isNewNextSnap == *(_BYTE *)(v32 + 17) )
              {
                if ( v34 == v35 )
                {
                  v38 = v8->time;
                  if ( v38 == *(_DWORD *)(v32 + 12) )
                    isNewNextSnap = v8->index < *(_WORD *)(v32 + 8);
                  else
                    isNewNextSnap = v38 > *(_DWORD *)(v32 + 12);
                }
                else
                {
                  isNewNextSnap = (unsigned __int8)v34 < v35;
                }
              }
            }
          }
        }
        else
        {
          isNewNextSnap = (unsigned __int8)v34 < PLAYER_CORPSE_ZONE_5;
        }
        if ( !isNewNextSnap )
        {
          if ( v36 == (unsigned __int8)v34 < PLAYER_CORPSE_ZONE_5 )
          {
            v36 = *(_BYTE *)(v32 + 16);
            if ( v36 == v8->visible )
            {
              v36 = *(_BYTE *)(v32 + 10);
              if ( v36 == v8->isNewNextSnap )
              {
                v36 = *(_BYTE *)(v32 + 17);
                if ( v36 == v8->fresh )
                {
                  if ( v35 == v34 )
                  {
                    v39 = *(_DWORD *)(v32 + 12);
                    v40 = v8->time;
                    if ( v39 == v40 )
                      v36 = *(_WORD *)(v32 + 8) < v8->index;
                    else
                      v36 = v39 > v40;
                  }
                  else
                  {
                    v36 = v35 < (unsigned __int8)v34;
                  }
                }
              }
            }
          }
          if ( v36 )
            break;
          if ( v13 != v32 )
          {
            v41 = *(_OWORD *)v13;
            v42 = *(double *)(v13 + 16);
            *(_OWORD *)v13 = *(_OWORD *)v32;
            *(double *)(v13 + 16) = *(double *)(v32 + 16);
            *(_OWORD *)v32 = v41;
            *(double *)(v32 + 16) = v42;
          }
          v13 += 24i64;
        }
        v32 += 24i64;
      }
      v43 = v33 == v4;
      if ( v33 <= v4 )
        goto LABEL_106;
      do
      {
        v44 = v33[-1].zone;
        v45 = v8->zone;
        v46 = (unsigned __int8)v45 < PLAYER_CORPSE_ZONE_5;
        if ( (unsigned __int8)v44 < PLAYER_CORPSE_ZONE_5 == (unsigned __int8)v45 < PLAYER_CORPSE_ZONE_5 )
        {
          fresh = v33[-1].visible;
          if ( fresh == v8->visible )
          {
            fresh = v33[-1].isNewNextSnap;
            if ( fresh == v8->isNewNextSnap )
            {
              fresh = v33[-1].fresh;
              if ( fresh == v8->fresh )
              {
                if ( v44 == v45 )
                {
                  v48 = v33[-1].time;
                  if ( v48 == v8->time )
                    fresh = v33[-1].index < v8->index;
                  else
                    fresh = v48 > v8->time;
                }
                else
                {
                  fresh = (unsigned __int8)v44 < (unsigned __int8)v45;
                }
              }
            }
          }
        }
        else
        {
          fresh = (unsigned __int8)v44 < PLAYER_CORPSE_ZONE_5;
        }
        if ( fresh )
          goto LABEL_104;
        if ( v46 == (unsigned __int8)v44 < PLAYER_CORPSE_ZONE_5 )
        {
          v46 = v8->visible;
          if ( v46 == v33[-1].visible )
          {
            v46 = v8->isNewNextSnap;
            if ( v46 == v33[-1].isNewNextSnap )
            {
              v46 = v8->fresh;
              if ( v46 == v33[-1].fresh )
              {
                if ( v45 == v44 )
                {
                  v49 = v8->time;
                  v50 = v33[-1].time;
                  if ( v49 == v50 )
                    v46 = v8->index < v33[-1].index;
                  else
                    v46 = v49 > v50;
                }
                else
                {
                  v46 = (unsigned __int8)v45 < (unsigned __int8)v44;
                }
              }
            }
          }
        }
        if ( v46 )
          break;
        --v8;
        v51 = v33 - 1;
        if ( v8 != &v33[-1] )
        {
          v52 = *(_OWORD *)&v8->entityState;
          v53 = *(double *)&v8->visible;
          *(_OWORD *)&v8->entityState = *(_OWORD *)&v51->entityState;
          *(double *)&v8->visible = *(double *)&v51->visible;
          *(_OWORD *)&v51->entityState = v52;
          *(double *)&v51->visible = v53;
        }
LABEL_104:
        --v33;
      }
      while ( v4 < v33 );
      v43 = v33 == v4;
LABEL_106:
      if ( !v43 )
      {
        --v33;
        if ( (CG_PlayerCorpseMP_SortableCorpseInfo *)v32 == _Last )
        {
          if ( v33 != --v8 )
          {
            v58 = *(_OWORD *)&v33->entityState;
            v59 = *(double *)&v33->visible;
            *(_OWORD *)&v33->entityState = *(_OWORD *)&v8->entityState;
            *(double *)&v33->visible = *(double *)&v8->visible;
            *(_OWORD *)&v8->entityState = v58;
            *(double *)&v8->visible = v59;
          }
          v60 = *(_OWORD *)(v13 - 24);
          v61 = *(_OWORD *)&v8->entityState;
          v62 = *(double *)&v8->visible;
          v13 -= 24i64;
          *(_OWORD *)&v8->entityState = v60;
          *(double *)&v8->visible = *(double *)(v13 + 16);
          *(_OWORD *)v13 = v61;
          *(double *)(v13 + 16) = v62;
        }
        else
        {
          v63 = *(_OWORD *)v32;
          v64 = *(double *)(v32 + 16);
          *(_OWORD *)v32 = *(_OWORD *)&v33->entityState;
          *(double *)(v32 + 16) = *(double *)&v33->visible;
          *(_OWORD *)&v33->entityState = v63;
          *(double *)&v33->visible = v64;
          v32 += 24i64;
        }
        continue;
      }
      break;
    }
    if ( (CG_PlayerCorpseMP_SortableCorpseInfo *)v32 != _Last )
    {
      if ( v13 != v32 )
      {
        v54 = *(_OWORD *)&v8->entityState;
        v55 = *(double *)&v8->visible;
        *(_OWORD *)&v8->entityState = *(_OWORD *)v13;
        *(double *)&v8->visible = *(double *)(v13 + 16);
        *(_OWORD *)v13 = v54;
        *(double *)(v13 + 16) = v55;
      }
      v56 = *(_OWORD *)&v8->entityState;
      v57 = *(double *)&v8->visible;
      *(_OWORD *)&v8->entityState = *(_OWORD *)v32;
      *(double *)&v8->visible = *(double *)(v32 + 16);
      *(_OWORD *)v32 = v56;
      ++v8;
      v13 += 24i64;
      *(double *)(v32 + 16) = v57;
      v32 += 24i64;
      continue;
    }
    break;
  }
  v6->first = v8;
  v65 = v6;
  v6->second = (CG_PlayerCorpseMP_SortableCorpseInfo *)v13;
  return v65;
}

/*
==============
std::_Pop_heap_hole_by_index<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpseInfo,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>
==============
*/
void std::_Pop_heap_hole_by_index<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpseInfo,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>(CG_PlayerCorpseMP_SortableCorpseInfo *_First, __int64 _Hole, __int64 _Bottom, CG_PlayerCorpseMP_SortableCorpseInfo *_Val)
{
  __int64 v4; 
  __int64 v6; 
  __int64 i; 
  __int64 v10; 
  PlayerCorpseMPViewZone zone; 
  CG_PlayerCorpseMP_SortableCorpseInfo *v12; 
  PlayerCorpseMPViewZone v13; 
  bool visible; 
  int time; 
  __int64 v16; 
  __int64 v17; 
  PlayerCorpseMPViewZone v18; 
  __int64 v19; 
  PlayerCorpseMPViewZone v20; 
  CG_PlayerCorpseMP_SortableCorpseInfo *v21; 
  bool isNewNextSnap; 
  int v23; 
  __int64 v24; 

  v4 = _Hole;
  v6 = (_Bottom - 1) >> 1;
  for ( i = _Hole; i < v6; *(double *)&_First[v16].visible = *(double *)&_First[i].visible )
  {
    v10 = 2 * i;
    zone = _First[2 * i + 2].zone;
    v12 = &_First[2 * i];
    v13 = v12[1].zone;
    visible = (unsigned __int8)zone < PLAYER_CORPSE_ZONE_5;
    if ( (unsigned __int8)zone < PLAYER_CORPSE_ZONE_5 == (unsigned __int8)v13 < PLAYER_CORPSE_ZONE_5 )
    {
      visible = v12[2].visible;
      if ( visible == v12[1].visible )
      {
        visible = v12[2].isNewNextSnap;
        if ( visible == v12[1].isNewNextSnap )
        {
          visible = v12[2].fresh;
          if ( visible == v12[1].fresh )
          {
            if ( zone == v13 )
            {
              time = v12[1].time;
              if ( v12[2].time == time )
                visible = v12[2].index < v12[1].index;
              else
                visible = v12[2].time > time;
            }
            else
            {
              visible = (unsigned __int8)zone < (unsigned __int8)v13;
            }
          }
        }
      }
    }
    v16 = v4;
    i = v10 + 2i64 - visible;
    v4 = i;
    *(_OWORD *)&_First[v16].entityState = *(_OWORD *)&_First[i].entityState;
  }
  if ( i == v6 && (_Bottom & 1) == 0 )
  {
    v17 = v4;
    *(_OWORD *)&_First[v17].entityState = *(_OWORD *)&_First[_Bottom - 1].entityState;
    *(double *)&_First[v17].visible = *(double *)&_First[_Bottom - 1].visible;
    v4 = _Bottom - 1;
  }
  if ( _Hole < v4 )
  {
    do
    {
      v18 = _Val->zone;
      v19 = (v4 - 1) >> 1;
      v20 = _First[v19].zone;
      v21 = &_First[v19];
      isNewNextSnap = (unsigned __int8)v20 < PLAYER_CORPSE_ZONE_5;
      if ( (unsigned __int8)v20 < PLAYER_CORPSE_ZONE_5 == (unsigned __int8)v18 < PLAYER_CORPSE_ZONE_5 )
      {
        isNewNextSnap = v21->visible;
        if ( isNewNextSnap == _Val->visible )
        {
          isNewNextSnap = v21->isNewNextSnap;
          if ( isNewNextSnap == _Val->isNewNextSnap )
          {
            isNewNextSnap = v21->fresh;
            if ( isNewNextSnap == _Val->fresh )
            {
              if ( v20 == v18 )
              {
                v23 = v21->time;
                if ( v23 == _Val->time )
                  isNewNextSnap = v21->index < _Val->index;
                else
                  isNewNextSnap = v23 > _Val->time;
              }
              else
              {
                isNewNextSnap = (unsigned __int8)v20 < (unsigned __int8)v18;
              }
            }
          }
        }
      }
      if ( !isNewNextSnap )
        break;
      v24 = v4;
      v4 = (v4 - 1) >> 1;
      *(_OWORD *)&_First[v24].entityState = *(_OWORD *)&v21->entityState;
      *(double *)&_First[v24].visible = *(double *)&v21->visible;
    }
    while ( _Hole < v19 );
  }
  _First[v4] = *_Val;
}

/*
==============
std::_Sort_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>
==============
*/
void std::_Sort_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>(CG_PlayerCorpseMP_SortableCorpseInfo *_First, CG_PlayerCorpseMP_SortableCorpseInfo *_Last, __int64 _Ideal, CG_PlayerCorpseMP_SortableCorpse_LessThanFunc _Pred)
{
  CG_PlayerCorpseMP_SortableCorpseInfo *v4; 
  CG_PlayerCorpseMP_SortableCorpseInfo *v7; 
  unsigned __int64 v8; 
  __int64 v9; 
  CG_PlayerCorpseMP_SortableCorpseInfo *v10; 
  const entityState_t *entityState; 
  CG_PlayerCorpseMP_SortableCorpseInfo *v12; 
  double v13; 
  CG_PlayerCorpseMP_SortableCorpseInfo result; 

  v4 = _Last;
  v7 = _First;
  v8 = (__int64)((unsigned __int128)(((char *)_Last - (char *)_First) * (__int128)0x2AAAAAAAAAAAAAABi64) >> 64) >> 2;
  v9 = (v8 >> 63) + v8;
  if ( v9 <= 32 )
  {
LABEL_7:
    if ( v9 >= 2 )
      std::_Insertion_sort_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>(v7, v4, _Pred);
  }
  else
  {
    while ( _Ideal > 0 )
    {
      std::_Partition_by_median_guess_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>((std::pair<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpseInfo *> *)&result, v7, v4, _Pred);
      v10 = *(CG_PlayerCorpseMP_SortableCorpseInfo **)&result.index;
      entityState = result.entityState;
      _Ideal = (_Ideal >> 2) + (_Ideal >> 1);
      if ( ((char *)result.entityState - (char *)v7) / 24 >= ((__int64)v4 - *(_QWORD *)&result.index) / 24 )
      {
        std::_Sort_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>(*(CG_PlayerCorpseMP_SortableCorpseInfo **)&result.index, v4, _Ideal, _Pred);
        v4 = (CG_PlayerCorpseMP_SortableCorpseInfo *)entityState;
      }
      else
      {
        std::_Sort_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>(v7, (CG_PlayerCorpseMP_SortableCorpseInfo *)result.entityState, _Ideal, _Pred);
        v7 = v10;
      }
      v9 = v4 - v7;
      if ( v9 <= 32 )
        goto LABEL_7;
    }
    std::_Make_heap_unchecked<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>(v7, v4, _Pred);
    if ( v4 - v7 >= 2 )
    {
      v12 = v4 - 1;
      do
      {
        v13 = *(double *)&v12->visible;
        *(_OWORD *)&result.entityState = *(_OWORD *)&v12->entityState;
        *(_OWORD *)&v12->entityState = *(_OWORD *)&v7->entityState;
        *(double *)&result.visible = v13;
        *(double *)&v12->visible = *(double *)&v7->visible;
        std::_Pop_heap_hole_by_index<CG_PlayerCorpseMP_SortableCorpseInfo *,CG_PlayerCorpseMP_SortableCorpseInfo,CG_PlayerCorpseMP_SortableCorpse_LessThanFunc>(v7, 0i64, v12 - v7, &result, _Pred);
        --v12;
      }
      while ( ((char *)v12 - (char *)v7 + 24) / 24 >= 2 );
    }
  }
}

/*
==============
std::_Guess_median_unchecked<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingMpClientModelSortFunctor>
==============
*/
void std::_Guess_median_unchecked<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingMpClientModelSortFunctor>(CgWeaponStreamingClientModelInfo *_First, CgWeaponStreamingClientModelInfo *_Mid, CgWeaponStreamingClientModelInfo *_Last, CgWeaponStreamingMpClientModelSortFunctor _Pred)
{
  signed __int64 v5; 
  __int64 v6; 
  unsigned __int64 v7; 
  unsigned __int64 v8; 
  float v9; 
  CgWeaponStreamingClientModelInfo v10; 
  CgWeaponStreamingClientModelInfo v11; 
  float v12; 
  CgWeaponStreamingClientModelInfo *v13; 
  CgWeaponStreamingClientModelInfo v14; 
  CgWeaponStreamingClientModelInfo v15; 
  CgWeaponStreamingClientModelInfo *v16; 
  CgWeaponStreamingClientModelInfo *v17; 
  float v18; 
  CgWeaponStreamingClientModelInfo v19; 
  CgWeaponStreamingClientModelInfo v20; 
  float v21; 
  CgWeaponStreamingClientModelInfo v22; 
  CgWeaponStreamingClientModelInfo v23; 
  float distanceSq; 
  CgWeaponStreamingClientModelInfo v25; 
  CgWeaponStreamingClientModelInfo v26; 

  v5 = _Last - _First;
  if ( v5 <= 40 )
  {
    distanceSq = _Mid->distanceSq;
    if ( distanceSq < _First->distanceSq )
    {
      v25 = *_Mid;
      *_Mid = *_First;
      *_First = v25;
      distanceSq = _Mid->distanceSq;
    }
    if ( distanceSq > _Last->distanceSq )
    {
      v26 = *_Last;
      *_Last = *_Mid;
      *_Mid = v26;
      if ( _First->distanceSq > _Mid->distanceSq )
      {
        *_Mid = *_First;
        *_First = v26;
      }
    }
  }
  else
  {
    v6 = (v5 + 1) >> 3;
    v7 = 16 * v6;
    v8 = 8 * v6;
    v9 = _First[v6].distanceSq;
    if ( v9 < _First->distanceSq )
    {
      v10 = _First[v8 / 8];
      _First[v8 / 8] = *_First;
      *_First = v10;
      v9 = _First[v8 / 8].distanceSq;
    }
    if ( v9 > _First[v7 / 8].distanceSq )
    {
      v11 = _First[v7 / 8];
      _First[v7 / 8] = _First[v8 / 8];
      _First[v8 / 8] = v11;
      if ( _First->distanceSq > _First[v8 / 8].distanceSq )
      {
        _First[v8 / 8] = *_First;
        *_First = v11;
      }
    }
    v12 = _Mid->distanceSq;
    v13 = &_Mid[v8 / 0xFFFFFFFFFFFFFFF8ui64];
    if ( v12 < _Mid[v8 / 0xFFFFFFFFFFFFFFF8ui64].distanceSq )
    {
      v14 = *_Mid;
      *_Mid = *v13;
      *v13 = v14;
      v12 = _Mid->distanceSq;
    }
    if ( v12 > _Mid[v8 / 8].distanceSq )
    {
      v15 = _Mid[v8 / 8];
      _Mid[v8 / 8] = *_Mid;
      *_Mid = v15;
      if ( v13->distanceSq > _Mid->distanceSq )
      {
        *_Mid = *v13;
        *v13 = v15;
      }
    }
    v16 = &_Last[v8 / 0xFFFFFFFFFFFFFFF8ui64];
    v17 = &_Last[v7 / 0xFFFFFFFFFFFFFFF8ui64];
    v18 = _Last[v8 / 0xFFFFFFFFFFFFFFF8ui64].distanceSq;
    if ( v18 < _Last[v7 / 0xFFFFFFFFFFFFFFF8ui64].distanceSq )
    {
      v19 = *v16;
      *v16 = *v17;
      *v17 = v19;
      v18 = v16->distanceSq;
    }
    if ( v18 > _Last->distanceSq )
    {
      v20 = *_Last;
      *_Last = *v16;
      *v16 = v20;
      if ( v17->distanceSq > v16->distanceSq )
      {
        *v16 = *v17;
        *v17 = v20;
      }
    }
    v21 = _Mid->distanceSq;
    if ( v21 < _First[v8 / 8].distanceSq )
    {
      v22 = *_Mid;
      *_Mid = _First[v8 / 8];
      _First[v8 / 8] = v22;
      v21 = _Mid->distanceSq;
    }
    if ( v21 > v16->distanceSq )
    {
      v23 = *v16;
      *v16 = *_Mid;
      *_Mid = v23;
      if ( _First[v8 / 8].distanceSq > _Mid->distanceSq )
      {
        *_Mid = _First[v8 / 8];
        _First[v8 / 8] = v23;
      }
    }
  }
}

/*
==============
std::_Guess_median_unchecked<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingMpScriptableLootSortFunctor>
==============
*/
void std::_Guess_median_unchecked<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingMpScriptableLootSortFunctor>(CgWeaponStreamingScriptableLootChestInfo *_First, CgWeaponStreamingScriptableLootChestInfo *_Mid, CgWeaponStreamingScriptableLootChestInfo *_Last, CgWeaponStreamingMpScriptableLootSortFunctor _Pred)
{
  signed __int64 v5; 
  __int64 v6; 
  unsigned __int64 v7; 
  unsigned __int64 v8; 
  float v9; 
  CgWeaponStreamingScriptableLootChestInfo v10; 
  CgWeaponStreamingScriptableLootChestInfo v11; 
  float v12; 
  CgWeaponStreamingScriptableLootChestInfo *v13; 
  CgWeaponStreamingScriptableLootChestInfo v14; 
  CgWeaponStreamingScriptableLootChestInfo v15; 
  CgWeaponStreamingScriptableLootChestInfo *v16; 
  CgWeaponStreamingScriptableLootChestInfo *v17; 
  float v18; 
  CgWeaponStreamingScriptableLootChestInfo v19; 
  CgWeaponStreamingScriptableLootChestInfo v20; 
  float v21; 
  CgWeaponStreamingScriptableLootChestInfo v22; 
  CgWeaponStreamingScriptableLootChestInfo v23; 
  float distanceSq; 
  CgWeaponStreamingScriptableLootChestInfo v25; 
  CgWeaponStreamingScriptableLootChestInfo v26; 

  v5 = _Last - _First;
  if ( v5 <= 40 )
  {
    distanceSq = _Mid->distanceSq;
    if ( distanceSq < _First->distanceSq )
    {
      v25 = *_Mid;
      *_Mid = *_First;
      *_First = v25;
      distanceSq = _Mid->distanceSq;
    }
    if ( distanceSq > _Last->distanceSq )
    {
      v26 = *_Last;
      *_Last = *_Mid;
      *_Mid = v26;
      if ( _First->distanceSq > _Mid->distanceSq )
      {
        *_Mid = *_First;
        *_First = v26;
      }
    }
  }
  else
  {
    v6 = (v5 + 1) >> 3;
    v7 = 16 * v6;
    v8 = 8 * v6;
    v9 = _First[v6].distanceSq;
    if ( v9 < _First->distanceSq )
    {
      v10 = _First[v8 / 8];
      _First[v8 / 8] = *_First;
      *_First = v10;
      v9 = _First[v8 / 8].distanceSq;
    }
    if ( v9 > _First[v7 / 8].distanceSq )
    {
      v11 = _First[v7 / 8];
      _First[v7 / 8] = _First[v8 / 8];
      _First[v8 / 8] = v11;
      if ( _First->distanceSq > _First[v8 / 8].distanceSq )
      {
        _First[v8 / 8] = *_First;
        *_First = v11;
      }
    }
    v12 = _Mid->distanceSq;
    v13 = &_Mid[v8 / 0xFFFFFFFFFFFFFFF8ui64];
    if ( v12 < _Mid[v8 / 0xFFFFFFFFFFFFFFF8ui64].distanceSq )
    {
      v14 = *_Mid;
      *_Mid = *v13;
      *v13 = v14;
      v12 = _Mid->distanceSq;
    }
    if ( v12 > _Mid[v8 / 8].distanceSq )
    {
      v15 = _Mid[v8 / 8];
      _Mid[v8 / 8] = *_Mid;
      *_Mid = v15;
      if ( v13->distanceSq > _Mid->distanceSq )
      {
        *_Mid = *v13;
        *v13 = v15;
      }
    }
    v16 = &_Last[v8 / 0xFFFFFFFFFFFFFFF8ui64];
    v17 = &_Last[v7 / 0xFFFFFFFFFFFFFFF8ui64];
    v18 = _Last[v8 / 0xFFFFFFFFFFFFFFF8ui64].distanceSq;
    if ( v18 < _Last[v7 / 0xFFFFFFFFFFFFFFF8ui64].distanceSq )
    {
      v19 = *v16;
      *v16 = *v17;
      *v17 = v19;
      v18 = v16->distanceSq;
    }
    if ( v18 > _Last->distanceSq )
    {
      v20 = *_Last;
      *_Last = *v16;
      *v16 = v20;
      if ( v17->distanceSq > v16->distanceSq )
      {
        *v16 = *v17;
        *v17 = v20;
      }
    }
    v21 = _Mid->distanceSq;
    if ( v21 < _First[v8 / 8].distanceSq )
    {
      v22 = *_Mid;
      *_Mid = _First[v8 / 8];
      _First[v8 / 8] = v22;
      v21 = _Mid->distanceSq;
    }
    if ( v21 > v16->distanceSq )
    {
      v23 = *v16;
      *v16 = *_Mid;
      *_Mid = v23;
      if ( _First[v8 / 8].distanceSq > _Mid->distanceSq )
      {
        *_Mid = _First[v8 / 8];
        _First[v8 / 8] = v23;
      }
    }
  }
}

/*
==============
std::_Partition_by_median_guess_unchecked<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingMpClientModelSortFunctor>
==============
*/
std::pair<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingClientModelInfo *> *std::_Partition_by_median_guess_unchecked<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingMpClientModelSortFunctor>(std::pair<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingClientModelInfo *> *result, CgWeaponStreamingClientModelInfo *_First, CgWeaponStreamingClientModelInfo *_Last, CgWeaponStreamingMpClientModelSortFunctor _Pred)
{
  CgWeaponStreamingClientModelInfo *v7; 
  CgWeaponStreamingClientModelInfo *i; 
  float distanceSq; 
  float v10; 
  float v11; 
  float v12; 
  CgWeaponStreamingClientModelInfo *v13; 
  CgWeaponStreamingClientModelInfo *v14; 
  CgWeaponStreamingClientModelInfo *v15; 
  float v16; 
  float v17; 
  CgWeaponStreamingClientModelInfo v18; 
  float v19; 
  CgWeaponStreamingClientModelInfo v20; 
  float v21; 
  CgWeaponStreamingClientModelInfo *v22; 
  CgWeaponStreamingClientModelInfo v23; 
  float v24; 
  CgWeaponStreamingClientModelInfo v25; 
  float v26; 
  float v27; 
  CgWeaponStreamingClientModelInfo v28; 
  bool v29; 
  CgWeaponStreamingClientModelInfo *v30; 
  float v31; 
  float v32; 
  CgWeaponStreamingClientModelInfo v33; 
  CgWeaponStreamingClientModelInfo v34; 
  CgWeaponStreamingClientModelInfo v35; 
  CgWeaponStreamingClientModelInfo v36; 
  CgWeaponStreamingClientModelInfo v37; 
  CgWeaponStreamingClientModelInfo v38; 
  CgWeaponStreamingClientModelInfo v39; 
  std::pair<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingClientModelInfo *> *v40; 

  v7 = &_First[((char *)_Last - (char *)_First) >> 4];
  std::_Guess_median_unchecked<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingMpClientModelSortFunctor>(_First, v7, _Last - 1, _Pred);
  for ( i = v7 + 1; _First < v7; --v7 )
  {
    distanceSq = v7[-1].distanceSq;
    v10 = v7->distanceSq;
    if ( distanceSq < v10 )
      break;
    if ( v10 < distanceSq )
      break;
  }
  if ( i < _Last )
  {
    v11 = v7->distanceSq;
    do
    {
      v12 = i->distanceSq;
      if ( v12 < v11 )
        break;
      if ( v11 < v12 )
        break;
      ++i;
    }
    while ( i < _Last );
  }
  v13 = i;
  v14 = v7;
  while ( 1 )
  {
    while ( 1 )
    {
      if ( v13 >= _Last )
        goto LABEL_42;
      if ( (((char *)_Last - (char *)v13 + 7) & 0xFFFFFFFFFFFFFFF8ui64) >= 0x20 )
      {
        v15 = v13 + 1;
        do
        {
          v16 = v7->distanceSq;
          v17 = v15[-1].distanceSq;
          if ( v16 >= v17 )
          {
            if ( v17 < v16 )
              goto LABEL_42;
            if ( i != v13 )
            {
              v18 = *i;
              *i = *v13;
              *v13 = v18;
              v16 = v7->distanceSq;
            }
            ++i;
          }
          v19 = v15->distanceSq;
          if ( v16 >= v19 )
          {
            if ( v19 < v16 )
            {
              v13 = v15;
              goto LABEL_42;
            }
            if ( i != v15 )
            {
              v20 = *i;
              *i = *v15;
              *v15 = v20;
              v16 = v7->distanceSq;
            }
            ++i;
          }
          v21 = v15[1].distanceSq;
          if ( v16 >= v21 )
          {
            v22 = v15 + 1;
            if ( v21 < v16 )
              goto LABEL_56;
            if ( i != v22 )
            {
              v23 = *i;
              *i = *v22;
              *v22 = v23;
              v16 = v7->distanceSq;
            }
            ++i;
          }
          v24 = v15[2].distanceSq;
          if ( v16 >= v24 )
          {
            v22 = v15 + 2;
            if ( v24 < v16 )
            {
LABEL_56:
              v13 = v22;
              goto LABEL_42;
            }
            if ( i != v22 )
            {
              v25 = *i;
              *i = *v22;
              *v22 = v25;
            }
            ++i;
          }
          v13 += 4;
          v15 += 4;
        }
        while ( v13 < &_Last[-3] );
      }
      for ( ; v13 < _Last; ++v13 )
      {
        v26 = v7->distanceSq;
        v27 = v13->distanceSq;
        if ( v26 >= v27 )
        {
          if ( v27 < v26 )
            break;
          if ( i != v13 )
          {
            v28 = *i;
            *i = *v13;
            *v13 = v28;
          }
          ++i;
        }
      }
LABEL_42:
      v29 = v14 == _First;
      if ( v14 > _First )
      {
        v30 = v14 - 1;
        do
        {
          v31 = v30->distanceSq;
          v32 = v7->distanceSq;
          if ( v31 >= v32 )
          {
            if ( v32 < v31 )
              break;
            if ( --v7 != v30 )
            {
              v33 = *v7;
              *v7 = *v30;
              *v30 = v33;
            }
          }
          --v14;
          --v30;
        }
        while ( _First < v14 );
        v29 = v14 == _First;
      }
      if ( v29 )
        break;
      --v14;
      if ( v13 == _Last )
      {
        if ( v14 != --v7 )
        {
          v36 = *v14;
          *v14 = *v7;
          *v7 = v36;
        }
        v37 = i[-1];
        --i;
        v38 = *v7;
        *v7 = v37;
        *i = v38;
      }
      else
      {
        v39 = *v13;
        *v13++ = *v14;
        *v14 = v39;
      }
    }
    if ( v13 == _Last )
      break;
    if ( i != v13 )
    {
      v34 = *v7;
      *v7 = *i;
      *i = v34;
    }
    ++i;
    v35 = *v7;
    *v7++ = *v13;
    *v13++ = v35;
  }
  v40 = result;
  result->first = v7;
  result->second = i;
  return v40;
}

/*
==============
std::_Partition_by_median_guess_unchecked<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingMpScriptableLootSortFunctor>
==============
*/
std::pair<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingScriptableLootChestInfo *> *std::_Partition_by_median_guess_unchecked<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingMpScriptableLootSortFunctor>(std::pair<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingScriptableLootChestInfo *> *result, CgWeaponStreamingScriptableLootChestInfo *_First, CgWeaponStreamingScriptableLootChestInfo *_Last, CgWeaponStreamingMpScriptableLootSortFunctor _Pred)
{
  CgWeaponStreamingScriptableLootChestInfo *v7; 
  CgWeaponStreamingScriptableLootChestInfo *i; 
  float distanceSq; 
  float v10; 
  float v11; 
  float v12; 
  CgWeaponStreamingScriptableLootChestInfo *v13; 
  CgWeaponStreamingScriptableLootChestInfo *v14; 
  CgWeaponStreamingScriptableLootChestInfo *v15; 
  float v16; 
  float v17; 
  CgWeaponStreamingScriptableLootChestInfo v18; 
  float v19; 
  CgWeaponStreamingScriptableLootChestInfo v20; 
  float v21; 
  CgWeaponStreamingScriptableLootChestInfo *v22; 
  CgWeaponStreamingScriptableLootChestInfo v23; 
  float v24; 
  CgWeaponStreamingScriptableLootChestInfo v25; 
  float v26; 
  float v27; 
  CgWeaponStreamingScriptableLootChestInfo v28; 
  bool v29; 
  CgWeaponStreamingScriptableLootChestInfo *v30; 
  float v31; 
  float v32; 
  CgWeaponStreamingScriptableLootChestInfo v33; 
  CgWeaponStreamingScriptableLootChestInfo v34; 
  CgWeaponStreamingScriptableLootChestInfo v35; 
  CgWeaponStreamingScriptableLootChestInfo v36; 
  CgWeaponStreamingScriptableLootChestInfo v37; 
  CgWeaponStreamingScriptableLootChestInfo v38; 
  CgWeaponStreamingScriptableLootChestInfo v39; 
  std::pair<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingScriptableLootChestInfo *> *v40; 

  v7 = &_First[((char *)_Last - (char *)_First) >> 4];
  std::_Guess_median_unchecked<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingMpScriptableLootSortFunctor>(_First, v7, _Last - 1, _Pred);
  for ( i = v7 + 1; _First < v7; --v7 )
  {
    distanceSq = v7[-1].distanceSq;
    v10 = v7->distanceSq;
    if ( distanceSq < v10 )
      break;
    if ( v10 < distanceSq )
      break;
  }
  if ( i < _Last )
  {
    v11 = v7->distanceSq;
    do
    {
      v12 = i->distanceSq;
      if ( v12 < v11 )
        break;
      if ( v11 < v12 )
        break;
      ++i;
    }
    while ( i < _Last );
  }
  v13 = i;
  v14 = v7;
  while ( 1 )
  {
    while ( 1 )
    {
      if ( v13 >= _Last )
        goto LABEL_42;
      if ( (((char *)_Last - (char *)v13 + 7) & 0xFFFFFFFFFFFFFFF8ui64) >= 0x20 )
      {
        v15 = v13 + 1;
        do
        {
          v16 = v7->distanceSq;
          v17 = v15[-1].distanceSq;
          if ( v16 >= v17 )
          {
            if ( v17 < v16 )
              goto LABEL_42;
            if ( i != v13 )
            {
              v18 = *i;
              *i = *v13;
              *v13 = v18;
              v16 = v7->distanceSq;
            }
            ++i;
          }
          v19 = v15->distanceSq;
          if ( v16 >= v19 )
          {
            if ( v19 < v16 )
            {
              v13 = v15;
              goto LABEL_42;
            }
            if ( i != v15 )
            {
              v20 = *i;
              *i = *v15;
              *v15 = v20;
              v16 = v7->distanceSq;
            }
            ++i;
          }
          v21 = v15[1].distanceSq;
          if ( v16 >= v21 )
          {
            v22 = v15 + 1;
            if ( v21 < v16 )
              goto LABEL_56;
            if ( i != v22 )
            {
              v23 = *i;
              *i = *v22;
              *v22 = v23;
              v16 = v7->distanceSq;
            }
            ++i;
          }
          v24 = v15[2].distanceSq;
          if ( v16 >= v24 )
          {
            v22 = v15 + 2;
            if ( v24 < v16 )
            {
LABEL_56:
              v13 = v22;
              goto LABEL_42;
            }
            if ( i != v22 )
            {
              v25 = *i;
              *i = *v22;
              *v22 = v25;
            }
            ++i;
          }
          v13 += 4;
          v15 += 4;
        }
        while ( v13 < &_Last[-3] );
      }
      for ( ; v13 < _Last; ++v13 )
      {
        v26 = v7->distanceSq;
        v27 = v13->distanceSq;
        if ( v26 >= v27 )
        {
          if ( v27 < v26 )
            break;
          if ( i != v13 )
          {
            v28 = *i;
            *i = *v13;
            *v13 = v28;
          }
          ++i;
        }
      }
LABEL_42:
      v29 = v14 == _First;
      if ( v14 > _First )
      {
        v30 = v14 - 1;
        do
        {
          v31 = v30->distanceSq;
          v32 = v7->distanceSq;
          if ( v31 >= v32 )
          {
            if ( v32 < v31 )
              break;
            if ( --v7 != v30 )
            {
              v33 = *v7;
              *v7 = *v30;
              *v30 = v33;
            }
          }
          --v14;
          --v30;
        }
        while ( _First < v14 );
        v29 = v14 == _First;
      }
      if ( v29 )
        break;
      --v14;
      if ( v13 == _Last )
      {
        if ( v14 != --v7 )
        {
          v36 = *v14;
          *v14 = *v7;
          *v7 = v36;
        }
        v37 = i[-1];
        --i;
        v38 = *v7;
        *v7 = v37;
        *i = v38;
      }
      else
      {
        v39 = *v13;
        *v13++ = *v14;
        *v14 = v39;
      }
    }
    if ( v13 == _Last )
      break;
    if ( i != v13 )
    {
      v34 = *v7;
      *v7 = *i;
      *i = v34;
    }
    ++i;
    v35 = *v7;
    *v7++ = *v13;
    *v13++ = v35;
  }
  v40 = result;
  result->first = v7;
  result->second = i;
  return v40;
}

/*
==============
std::_Pop_heap_hole_by_index<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingClientModelInfo,CgWeaponStreamingMpClientModelSortFunctor>
==============
*/
void std::_Pop_heap_hole_by_index<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingClientModelInfo,CgWeaponStreamingMpClientModelSortFunctor>(CgWeaponStreamingClientModelInfo *_First, __int64 _Hole, __int64 _Bottom, CgWeaponStreamingClientModelInfo *_Val)
{
  __int64 v5; 
  __int64 v6; 
  __int64 i; 
  bool v8; 
  __int64 v9; 
  __int64 v10; 

  v5 = (_Bottom - 1) >> 1;
  v6 = _Hole;
  for ( i = _Hole; i < v5; _Hole = i )
  {
    v8 = _First[2 * i + 1].distanceSq <= _First[2 * i + 2].distanceSq;
    v9 = 2 * i + 2;
    i = 2 * i + 1;
    if ( v8 )
      i = v9;
    _First[_Hole] = _First[i];
  }
  if ( i == v5 && (_Bottom & 1) == 0 )
  {
    _First[_Hole] = _First[_Bottom - 1];
    _Hole = _Bottom - 1;
  }
  if ( v6 < _Hole )
  {
    while ( 1 )
    {
      v10 = (_Hole - 1) >> 1;
      if ( _Val->distanceSq <= _First[v10].distanceSq )
        break;
      _First[_Hole] = _First[v10];
      _Hole = (_Hole - 1) >> 1;
      if ( v6 >= v10 )
      {
        _First[v10] = *_Val;
        return;
      }
    }
  }
  _First[_Hole] = *_Val;
}

/*
==============
std::_Pop_heap_hole_by_index<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingScriptableLootChestInfo,CgWeaponStreamingMpScriptableLootSortFunctor>
==============
*/
void std::_Pop_heap_hole_by_index<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingScriptableLootChestInfo,CgWeaponStreamingMpScriptableLootSortFunctor>(CgWeaponStreamingScriptableLootChestInfo *_First, __int64 _Hole, __int64 _Bottom, CgWeaponStreamingScriptableLootChestInfo *_Val)
{
  __int64 v5; 
  __int64 v6; 
  __int64 i; 
  bool v8; 
  __int64 v9; 
  __int64 v10; 

  v5 = (_Bottom - 1) >> 1;
  v6 = _Hole;
  for ( i = _Hole; i < v5; _Hole = i )
  {
    v8 = _First[2 * i + 1].distanceSq <= _First[2 * i + 2].distanceSq;
    v9 = 2 * i + 2;
    i = 2 * i + 1;
    if ( v8 )
      i = v9;
    _First[_Hole] = _First[i];
  }
  if ( i == v5 && (_Bottom & 1) == 0 )
  {
    _First[_Hole] = _First[_Bottom - 1];
    _Hole = _Bottom - 1;
  }
  if ( v6 < _Hole )
  {
    while ( 1 )
    {
      v10 = (_Hole - 1) >> 1;
      if ( _Val->distanceSq <= _First[v10].distanceSq )
        break;
      _First[_Hole] = _First[v10];
      _Hole = (_Hole - 1) >> 1;
      if ( v6 >= v10 )
      {
        _First[v10] = *_Val;
        return;
      }
    }
  }
  _First[_Hole] = *_Val;
}

/*
==============
std::_Sort_unchecked<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingMpClientModelSortFunctor>
==============
*/
void std::_Sort_unchecked<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingMpClientModelSortFunctor>(CgWeaponStreamingClientModelInfo *_First, CgWeaponStreamingClientModelInfo *_Last, __int64 _Ideal, CgWeaponStreamingMpClientModelSortFunctor _Pred)
{
  __int64 v6; 
  CgWeaponStreamingClientModelInfo *v7; 
  CgWeaponStreamingClientModelInfo *v8; 
  CgWeaponStreamingClientModelInfo *first; 
  CgWeaponStreamingClientModelInfo *second; 
  CgWeaponStreamingClientModelInfo *v11; 
  size_t v12; 
  CgWeaponStreamingClientModelInfo v13; 
  _QWORD *v14; 
  float distanceSq; 
  __int64 v16; 
  __int64 v17; 
  __int64 v18; 
  CgWeaponStreamingClientModelInfo v19; 
  __int64 v20; 
  __int64 i; 
  bool v22; 
  __int64 v23; 
  __int64 v24; 
  float v25; 
  CgWeaponStreamingClientModelInfo *v26; 
  __int64 v27; 
  std::pair<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingClientModelInfo *> result; 
  CgWeaponStreamingClientModelInfo _Val; 

  v6 = _Last - _First;
  v7 = _Last;
  v8 = _First;
  if ( v6 <= 32 )
  {
LABEL_7:
    if ( v6 >= 2 && v8 != v7 )
    {
      v11 = v8 + 1;
      if ( &v8[1] != v7 )
      {
        v12 = 1i64;
        do
        {
          v13 = *v11;
          v14 = v11;
          _Val = *v11;
          distanceSq = _Val.distanceSq;
          if ( _Val.distanceSq >= v8->distanceSq )
          {
            v27 = (__int64)&v8[v12 - 1];
            if ( _Val.distanceSq < v8[v12 - 1].distanceSq )
            {
              do
              {
                *v14 = *(_QWORD *)v27;
                v14 = (_QWORD *)v27;
                v27 -= 8i64;
              }
              while ( distanceSq < *(float *)(v27 + 4) );
            }
            *v14 = v13;
          }
          else
          {
            memmove_0(&v8[1], v8, v12 * 8);
            *v8 = v13;
          }
          ++v11;
          ++v12;
        }
        while ( v11 != v7 );
      }
    }
  }
  else
  {
    while ( _Ideal > 0 )
    {
      std::_Partition_by_median_guess_unchecked<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingMpClientModelSortFunctor>(&result, v8, v7, _Pred);
      first = result.first;
      second = result.second;
      _Ideal = (_Ideal >> 2) + (_Ideal >> 1);
      if ( (__int64)(((char *)result.first - (char *)v8) & 0xFFFFFFFFFFFFFFF8ui64) >= (__int64)(((char *)v7 - (char *)result.second) & 0xFFFFFFFFFFFFFFF8ui64) )
      {
        std::_Sort_unchecked<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingMpClientModelSortFunctor>(result.second, v7, _Ideal, _Pred);
        v7 = first;
      }
      else
      {
        std::_Sort_unchecked<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingMpClientModelSortFunctor>(v8, result.first, _Ideal, _Pred);
        v8 = second;
      }
      v6 = v7 - v8;
      if ( v6 <= 32 )
        goto LABEL_7;
    }
    v16 = v7 - v8;
    v17 = ((char *)v7 - (char *)v8) >> 4;
    if ( v17 > 0 )
    {
      v18 = (v16 - 1) >> 1;
      do
      {
        v19 = v8[--v17];
        _Val = v19;
        v20 = v17;
        for ( i = v17; i < v18; v20 = i )
        {
          v22 = v8[2 * i + 1].distanceSq <= v8[2 * i + 2].distanceSq;
          v23 = 2 * i + 2;
          i = 2 * i + 1;
          if ( v22 )
            i = v23;
          v8[v20] = v8[i];
        }
        if ( i == v18 && (v16 & 1) == 0 )
        {
          v8[v20] = v8[v16 - 1];
          v20 = v16 - 1;
        }
        v24 = (v20 - 1) >> 1;
        if ( v17 < v20 )
        {
          v25 = _Val.distanceSq;
          do
          {
            if ( v25 <= v8[v24].distanceSq )
              break;
            v8[v20] = v8[v24];
            v20 = v24;
            v24 = (v24 - 1) >> 1;
          }
          while ( v17 < v20 );
        }
        v8[v20] = v19;
      }
      while ( v17 > 0 );
    }
    if ( v16 >= 2 )
    {
      v26 = v7 - 1;
      do
      {
        _Val = *v26;
        *v26 = *v8;
        std::_Pop_heap_hole_by_index<CgWeaponStreamingClientModelInfo *,CgWeaponStreamingClientModelInfo,CgWeaponStreamingMpClientModelSortFunctor>(v8, 0i64, v26 - v8, &_Val, _Pred);
        --v26;
      }
      while ( ((__int64)v26 + 8 - (__int64)v8) >> 3 >= 2 );
    }
  }
}

/*
==============
std::_Sort_unchecked<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingMpScriptableLootSortFunctor>
==============
*/
void std::_Sort_unchecked<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingMpScriptableLootSortFunctor>(CgWeaponStreamingScriptableLootChestInfo *_First, CgWeaponStreamingScriptableLootChestInfo *_Last, __int64 _Ideal, CgWeaponStreamingMpScriptableLootSortFunctor _Pred)
{
  __int64 v6; 
  CgWeaponStreamingScriptableLootChestInfo *v7; 
  CgWeaponStreamingScriptableLootChestInfo *v8; 
  CgWeaponStreamingScriptableLootChestInfo *first; 
  CgWeaponStreamingScriptableLootChestInfo *second; 
  CgWeaponStreamingScriptableLootChestInfo *v11; 
  size_t v12; 
  CgWeaponStreamingScriptableLootChestInfo v13; 
  _QWORD *v14; 
  float distanceSq; 
  __int64 v16; 
  __int64 v17; 
  __int64 v18; 
  CgWeaponStreamingScriptableLootChestInfo v19; 
  __int64 v20; 
  __int64 i; 
  bool v22; 
  __int64 v23; 
  __int64 v24; 
  float v25; 
  CgWeaponStreamingScriptableLootChestInfo *v26; 
  __int64 v27; 
  std::pair<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingScriptableLootChestInfo *> result; 
  CgWeaponStreamingScriptableLootChestInfo _Val; 

  v6 = _Last - _First;
  v7 = _Last;
  v8 = _First;
  if ( v6 <= 32 )
  {
LABEL_7:
    if ( v6 >= 2 && v8 != v7 )
    {
      v11 = v8 + 1;
      if ( &v8[1] != v7 )
      {
        v12 = 1i64;
        do
        {
          v13 = *v11;
          v14 = v11;
          _Val = *v11;
          distanceSq = _Val.distanceSq;
          if ( _Val.distanceSq >= v8->distanceSq )
          {
            v27 = (__int64)&v8[v12 - 1];
            if ( _Val.distanceSq < v8[v12 - 1].distanceSq )
            {
              do
              {
                *v14 = *(_QWORD *)v27;
                v14 = (_QWORD *)v27;
                v27 -= 8i64;
              }
              while ( distanceSq < *(float *)(v27 + 4) );
            }
            *v14 = v13;
          }
          else
          {
            memmove_0(&v8[1], v8, v12 * 8);
            *v8 = v13;
          }
          ++v11;
          ++v12;
        }
        while ( v11 != v7 );
      }
    }
  }
  else
  {
    while ( _Ideal > 0 )
    {
      std::_Partition_by_median_guess_unchecked<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingMpScriptableLootSortFunctor>(&result, v8, v7, _Pred);
      first = result.first;
      second = result.second;
      _Ideal = (_Ideal >> 2) + (_Ideal >> 1);
      if ( (__int64)(((char *)result.first - (char *)v8) & 0xFFFFFFFFFFFFFFF8ui64) >= (__int64)(((char *)v7 - (char *)result.second) & 0xFFFFFFFFFFFFFFF8ui64) )
      {
        std::_Sort_unchecked<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingMpScriptableLootSortFunctor>(result.second, v7, _Ideal, _Pred);
        v7 = first;
      }
      else
      {
        std::_Sort_unchecked<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingMpScriptableLootSortFunctor>(v8, result.first, _Ideal, _Pred);
        v8 = second;
      }
      v6 = v7 - v8;
      if ( v6 <= 32 )
        goto LABEL_7;
    }
    v16 = v7 - v8;
    v17 = ((char *)v7 - (char *)v8) >> 4;
    if ( v17 > 0 )
    {
      v18 = (v16 - 1) >> 1;
      do
      {
        v19 = v8[--v17];
        _Val = v19;
        v20 = v17;
        for ( i = v17; i < v18; v20 = i )
        {
          v22 = v8[2 * i + 1].distanceSq <= v8[2 * i + 2].distanceSq;
          v23 = 2 * i + 2;
          i = 2 * i + 1;
          if ( v22 )
            i = v23;
          v8[v20] = v8[i];
        }
        if ( i == v18 && (v16 & 1) == 0 )
        {
          v8[v20] = v8[v16 - 1];
          v20 = v16 - 1;
        }
        v24 = (v20 - 1) >> 1;
        if ( v17 < v20 )
        {
          v25 = _Val.distanceSq;
          do
          {
            if ( v25 <= v8[v24].distanceSq )
              break;
            v8[v20] = v8[v24];
            v20 = v24;
            v24 = (v24 - 1) >> 1;
          }
          while ( v17 < v20 );
        }
        v8[v20] = v19;
      }
      while ( v17 > 0 );
    }
    if ( v16 >= 2 )
    {
      v26 = v7 - 1;
      do
      {
        _Val = *v26;
        *v26 = *v8;
        std::_Pop_heap_hole_by_index<CgWeaponStreamingScriptableLootChestInfo *,CgWeaponStreamingScriptableLootChestInfo,CgWeaponStreamingMpScriptableLootSortFunctor>(v8, 0i64, v26 - v8, &_Val, _Pred);
        --v26;
      }
      while ( ((__int64)v26 + 8 - (__int64)v8) >> 3 >= 2 );
    }
  }
}

/*
==============
std::_Med3_unchecked<XSurface * *,XSurfaceHashComparer>
==============
*/
void std::_Med3_unchecked<XSurface * *,XSurfaceHashComparer>(XSurface **_First, XSurface **_Mid, XSurface **_Last, XSurfaceHashComparer _Pred)
{
  XSurface *v4; 
  XSurface *v6; 
  XSurface *v7; 
  unsigned __int64 v8; 
  unsigned __int64 v9; 
  unsigned __int64 v10; 
  unsigned __int64 v11; 
  unsigned __int64 v12; 
  unsigned __int64 v13; 

  v4 = *_Mid;
  v6 = *_First;
  LODWORD(v11) = (*_Mid)->hash;
  HIDWORD(v11) = *(_DWORD *)&(*_Mid)->vertCount;
  LODWORD(v8) = v6->hash;
  HIDWORD(v8) = *(_DWORD *)&v6->vertCount;
  if ( v11 < v8 )
  {
    *_Mid = v6;
    *_First = v4;
    v4 = *_Mid;
  }
  v7 = *_Last;
  LODWORD(v12) = (*_Last)->hash;
  HIDWORD(v12) = *(_DWORD *)&(*_Last)->vertCount;
  LODWORD(v9) = v4->hash;
  HIDWORD(v9) = *(_DWORD *)&v4->vertCount;
  if ( v12 < v9 )
  {
    *_Last = v4;
    *_Mid = v7;
    LODWORD(v13) = v7->hash;
    HIDWORD(v13) = *(_DWORD *)&v7->vertCount;
    LODWORD(v10) = (*_First)->hash;
    HIDWORD(v10) = *(_DWORD *)&(*_First)->vertCount;
    if ( v13 < v10 )
    {
      *_Mid = *_First;
      *_First = v7;
    }
  }
}

/*
==============
std::_Partition_by_median_guess_unchecked<XSurface * *,XSurfaceHashComparer>
==============
*/
std::pair<XSurface * *,XSurface * *> *std::_Partition_by_median_guess_unchecked<XSurface * *,XSurfaceHashComparer>(std::pair<XSurface * *,XSurface * *> *result, XSurface **_First, XSurface **_Last, XSurfaceHashComparer _Pred)
{
  XSurface **v4; 
  XSurface **v6; 
  XSurface **v7; 
  XSurface **v8; 
  signed __int64 v9; 
  __int64 v10; 
  __int64 v11; 
  __int64 v12; 
  XSurface **v13; 
  XSurface **v14; 
  XSurface **v15; 
  XSurface **v16; 
  __int64 v17; 
  unsigned __int64 v18; 
  XSurface **v19; 
  XSurface **v20; 
  XSurface *v21; 
  bool v22; 
  XSurface **v23; 
  XSurface *v24; 
  XSurface *v25; 
  XSurface *v26; 
  XSurface *v27; 
  XSurface *v28; 
  XSurface *v29; 
  XSurface *v30; 
  std::pair<XSurface * *,XSurface * *> *v31; 
  unsigned __int64 v32; 
  unsigned __int64 v33; 
  unsigned __int64 v34; 
  unsigned __int64 v35; 
  unsigned __int64 v36; 
  unsigned __int64 v37; 
  unsigned __int64 v38; 
  unsigned __int64 v39; 
  unsigned __int64 v40; 
  unsigned __int64 v41; 
  unsigned __int64 v42; 
  unsigned __int64 v43; 
  unsigned __int64 v44; 
  unsigned __int64 v45; 
  unsigned __int64 v46; 
  unsigned __int64 v47; 

  v4 = _Last - 1;
  v6 = _Last;
  v7 = _First;
  v8 = &_First[((char *)_Last - (char *)_First) >> 4];
  v9 = _Last - 1 - _First;
  if ( v9 <= 40 )
  {
    std::_Med3_unchecked<XSurface * *,XSurfaceHashComparer>(_First, v8, _Last - 1, _Pred);
  }
  else
  {
    v10 = (v9 + 1) >> 3;
    v11 = 16 * v10;
    v12 = 8 * v10;
    v13 = &_First[v10];
    std::_Med3_unchecked<XSurface * *,XSurfaceHashComparer>(_First, v13, &_First[2 * v10], _Pred);
    std::_Med3_unchecked<XSurface * *,XSurfaceHashComparer>(&v8[v12 / 0xFFFFFFFFFFFFFFF8ui64], v8, &v8[(unsigned __int64)v12 / 8], _Pred);
    v14 = &v4[v12 / 0xFFFFFFFFFFFFFFF8ui64];
    std::_Med3_unchecked<XSurface * *,XSurfaceHashComparer>(&v6[v11 / 0xFFFFFFFFFFFFFFF8ui64 - 1], v14, v6 - 1, _Pred);
    std::_Med3_unchecked<XSurface * *,XSurfaceHashComparer>(v13, v8, v14, _Pred);
    v7 = _First;
  }
  v15 = v8 + 1;
  if ( v7 < v8 )
  {
    v16 = v8;
    do
    {
      v17 = (__int64)*(v8 - 1);
      HIWORD(v32) = (*v8)->triCount;
      LODWORD(v32) = (*v8)->hash;
      WORD2(v32) = (*v8)->vertCount;
      LODWORD(v34) = *(_DWORD *)(v17 + 12);
      HIDWORD(v34) = *(_DWORD *)(v17 + 2);
      if ( v34 < v32 )
        break;
      LODWORD(v37) = *(_DWORD *)(v17 + 12);
      HIDWORD(v37) = *(_DWORD *)(v17 + 2);
      LODWORD(v40) = (*v8)->hash;
      HIDWORD(v40) = *(_DWORD *)&(*v8)->vertCount;
      if ( v40 < v37 )
        break;
      v8 = v16 - 1;
      v16 = v8;
    }
    while ( v7 < v8 );
  }
  if ( v15 < v6 )
  {
    HIDWORD(v41) = *(_DWORD *)&(*v8)->vertCount;
    LODWORD(v41) = (*v8)->hash;
    v18 = v41;
    do
    {
      HIDWORD(v42) = *(_DWORD *)&(*v15)->vertCount;
      LODWORD(v42) = (*v15)->hash;
      if ( v42 < v18 )
        break;
      LODWORD(v38) = (*v15)->hash;
      HIDWORD(v38) = *(_DWORD *)&(*v15)->vertCount;
      LODWORD(v35) = (*v8)->hash;
      HIDWORD(v35) = *(_DWORD *)&(*v8)->vertCount;
      if ( v35 < v38 )
        break;
      ++v15;
    }
    while ( v15 < v6 );
  }
  v19 = v15;
  v20 = v8;
  while ( 1 )
  {
    while ( 1 )
    {
      for ( ; v19 < v6; ++v19 )
      {
        HIDWORD(v43) = *(_DWORD *)&(*v19)->vertCount;
        LODWORD(v43) = (*v19)->hash;
        LODWORD(v39) = (*v8)->hash;
        HIDWORD(v39) = *(_DWORD *)&(*v8)->vertCount;
        if ( v39 >= v43 )
        {
          LODWORD(v36) = (*v8)->hash;
          HIDWORD(v36) = *(_DWORD *)&(*v8)->vertCount;
          LODWORD(v33) = (*v19)->hash;
          HIDWORD(v33) = *(_DWORD *)&(*v19)->vertCount;
          if ( v33 < v36 )
            break;
          if ( v15 != v19 )
          {
            v21 = *v15;
            *v15 = *v19;
            *v19 = v21;
          }
          ++v15;
        }
      }
      v22 = v20 == v7;
      if ( v20 > v7 )
      {
        v23 = v20 - 1;
        do
        {
          HIDWORD(v44) = *(_DWORD *)&(*v8)->vertCount;
          LODWORD(v44) = (*v8)->hash;
          LODWORD(v45) = (*v23)->hash;
          HIDWORD(v45) = *(_DWORD *)&(*v23)->vertCount;
          if ( v45 >= v44 )
          {
            LODWORD(v46) = (*v23)->hash;
            HIDWORD(v46) = *(_DWORD *)&(*v23)->vertCount;
            LODWORD(v47) = (*v8)->hash;
            HIDWORD(v47) = *(_DWORD *)&(*v8)->vertCount;
            if ( v47 < v46 )
              break;
            if ( --v8 != v23 )
            {
              v24 = *v8;
              *v8 = *v23;
              *v23 = v24;
            }
          }
          --v20;
          --v23;
        }
        while ( _First < v20 );
        v7 = _First;
        v6 = _Last;
        v22 = v20 == _First;
      }
      if ( v22 )
        break;
      --v20;
      if ( v19 == v6 )
      {
        if ( v20 != --v8 )
        {
          v27 = *v20;
          *v20 = *v8;
          *v8 = v27;
        }
        v28 = *--v15;
        v29 = *v8;
        *v8 = v28;
        *v15 = v29;
      }
      else
      {
        v30 = *v19;
        *v19++ = *v20;
        *v20 = v30;
      }
    }
    if ( v19 == v6 )
      break;
    if ( v15 != v19 )
    {
      v25 = *v8;
      *v8 = *v15;
      *v15 = v25;
    }
    ++v15;
    v26 = *v8;
    *v8++ = *v19;
    *v19++ = v26;
  }
  v31 = result;
  result->first = v8;
  result->second = v15;
  return v31;
}

/*
==============
std::_Pop_heap_hole_by_index<XSurface * *,XSurface *,XSurfaceHashComparer>
==============
*/
void std::_Pop_heap_hole_by_index<XSurface * *,XSurface *,XSurfaceHashComparer>(XSurface **_First, __int64 _Hole, __int64 _Bottom, XSurface **_Val)
{
  __int64 v5; 
  __int64 v8; 
  __int64 i; 
  XSurface *v10; 
  XSurface *v11; 
  __int64 v12; 
  XSurface *v13; 
  unsigned __int64 v14; 
  unsigned __int64 v15; 
  unsigned __int64 v16; 
  unsigned __int64 v17; 

  v5 = (_Bottom - 1) >> 1;
  v8 = _Hole;
  for ( i = _Hole; i < v5; _Hole = i )
  {
    i = 2 * i + 2;
    v10 = _First[i];
    v11 = _First[i - 1];
    LODWORD(v16) = v10->hash;
    HIDWORD(v16) = *(_DWORD *)&v10->vertCount;
    LODWORD(v14) = v11->hash;
    HIDWORD(v14) = *(_DWORD *)&v11->vertCount;
    if ( v16 < v14 )
      --i;
    _First[_Hole] = _First[i];
  }
  if ( i == v5 && (_Bottom & 1) == 0 )
  {
    _First[_Hole] = _First[_Bottom - 1];
    _Hole = _Bottom - 1;
  }
  if ( v8 >= _Hole )
  {
    _First[_Hole] = *_Val;
  }
  else
  {
    while ( 1 )
    {
      v12 = (_Hole - 1) >> 1;
      v13 = _First[v12];
      LODWORD(v17) = v13->hash;
      HIDWORD(v17) = *(_DWORD *)&v13->vertCount;
      LODWORD(v15) = (*_Val)->hash;
      HIDWORD(v15) = *(_DWORD *)&(*_Val)->vertCount;
      if ( v17 >= v15 )
        break;
      _First[_Hole] = v13;
      _Hole = (_Hole - 1) >> 1;
      if ( v8 >= v12 )
      {
        _First[v12] = *_Val;
        return;
      }
    }
    _First[_Hole] = *_Val;
  }
}

/*
==============
std::_Sort_unchecked<XSurface * *,XSurfaceHashComparer>
==============
*/
void std::_Sort_unchecked<XSurface * *,XSurfaceHashComparer>(XSurface **_First, XSurface **_Last, __int64 _Ideal, XSurfaceHashComparer _Pred)
{
  __int64 v6; 
  XSurface **v7; 
  XSurface **v8; 
  XSurface **first; 
  XSurface **second; 
  XSurface **v11; 
  size_t v12; 
  XSurface *v13; 
  XSurface **v14; 
  XSurface *v15; 
  unsigned __int16 vertCount; 
  unsigned __int16 triCount; 
  unsigned int hash; 
  __int64 v19; 
  __int64 v20; 
  __int64 v21; 
  XSurface *v22; 
  __int64 v23; 
  __int64 i; 
  XSurface *v25; 
  XSurface *v26; 
  __int64 j; 
  XSurface *v28; 
  XSurface **v29; 
  XSurface *v30; 
  XSurface **v31; 
  XSurface **v32; 
  XSurface **v33; 
  std::pair<XSurface * *,XSurface * *> result; 
  XSurface *_Val; 
  unsigned __int64 v36; 

  v6 = _Last - _First;
  v7 = _Last;
  v8 = _First;
  if ( v6 <= 32 )
  {
LABEL_7:
    if ( v6 >= 2 && v8 != v7 )
    {
      v11 = v8 + 1;
      if ( v8 + 1 != v7 )
      {
        v12 = 1i64;
        do
        {
          v13 = *v8;
          v14 = v11;
          v15 = *v11;
          vertCount = (*v11)->vertCount;
          triCount = (*v11)->triCount;
          hash = (*v11)->hash;
          LODWORD(result.first) = (*v8)->hash;
          HIDWORD(result.first) = *(_DWORD *)&v13->vertCount;
          LODWORD(v32) = hash;
          WORD2(v32) = vertCount;
          HIWORD(v32) = triCount;
          if ( v32 >= result.first )
          {
            v30 = v8[v12 - 1];
            v31 = &v8[v12 - 1];
            LODWORD(v36) = hash;
            WORD2(v36) = vertCount;
            HIWORD(v36) = triCount;
            LODWORD(_Val) = v30->hash;
            for ( HIDWORD(_Val) = *(_DWORD *)&v30->vertCount; v36 < (unsigned __int64)_Val; HIDWORD(_Val) = *(_DWORD *)&v30->vertCount )
            {
              *v14 = v30;
              v14 = v31--;
              LODWORD(v36) = v15->hash;
              WORD2(v36) = v15->vertCount;
              v30 = *v31;
              HIWORD(v36) = v15->triCount;
              LODWORD(_Val) = v30->hash;
            }
            *v14 = v15;
          }
          else
          {
            memmove_0(v8 + 1, v8, v12 * 8);
            *v8 = v15;
          }
          ++v11;
          ++v12;
        }
        while ( v11 != v7 );
      }
    }
  }
  else
  {
    while ( _Ideal > 0 )
    {
      std::_Partition_by_median_guess_unchecked<XSurface * *,XSurfaceHashComparer>(&result, v8, v7, _Pred);
      first = result.first;
      second = result.second;
      _Ideal = (_Ideal >> 2) + (_Ideal >> 1);
      if ( (__int64)(((char *)result.first - (char *)v8) & 0xFFFFFFFFFFFFFFF8ui64) >= (__int64)(((char *)v7 - (char *)result.second) & 0xFFFFFFFFFFFFFFF8ui64) )
      {
        std::_Sort_unchecked<XSurface * *,XSurfaceHashComparer>(result.second, v7, _Ideal, _Pred);
        v7 = first;
      }
      else
      {
        std::_Sort_unchecked<XSurface * *,XSurfaceHashComparer>(v8, result.first, _Ideal, _Pred);
        v8 = second;
      }
      v6 = v7 - v8;
      if ( v6 <= 32 )
        goto LABEL_7;
    }
    v19 = v7 - v8;
    v20 = ((char *)v7 - (char *)v8) >> 4;
    if ( v20 > 0 )
    {
      v21 = (v19 - 1) >> 1;
      do
      {
        v22 = v8[--v20];
        v23 = v20;
        for ( i = v20; i < v21; v23 = i )
        {
          i = 2 * i + 2;
          v25 = v8[i];
          v26 = v8[i - 1];
          LODWORD(v36) = v25->hash;
          HIDWORD(v36) = *(_DWORD *)&v25->vertCount;
          LODWORD(_Val) = v26->hash;
          HIDWORD(_Val) = *(_DWORD *)&v26->vertCount;
          if ( v36 < (unsigned __int64)_Val )
            --i;
          v8[v23] = v8[i];
        }
        if ( i == v21 && (v19 & 1) == 0 )
        {
          v8[v23] = v8[v19 - 1];
          v23 = v19 - 1;
        }
        for ( j = (v23 - 1) >> 1; v20 < v23; j = (j - 1) >> 1 )
        {
          v28 = v8[j];
          LODWORD(result.first) = v28->hash;
          HIDWORD(result.first) = *(_DWORD *)&v28->vertCount;
          LODWORD(v33) = v22->hash;
          HIDWORD(v33) = *(_DWORD *)&v22->vertCount;
          if ( result.first >= v33 )
            break;
          v8[v23] = v28;
          v23 = j;
        }
        v8[v23] = v22;
      }
      while ( v20 > 0 );
    }
    if ( v19 >= 2 )
    {
      v29 = v7 - 1;
      do
      {
        _Val = *v29;
        *v29 = *v8;
        std::_Pop_heap_hole_by_index<XSurface * *,XSurface *,XSurfaceHashComparer>(v8, 0i64, v29 - v8, &_Val, _Pred);
        --v29;
      }
      while ( ((__int64)v29 + 8 - (__int64)v8) >> 3 >= 2 );
    }
  }
}

/*
==============
std::_Guess_median_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>
==============
*/
void std::_Guess_median_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Mid, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Last, SortKeyPartialPredicate _Pred)
{
  __int64 v8; 
  __int64 v9; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v10; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v11; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v12; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v13; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v14; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v15; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v16; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v17; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v18; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v19; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v20; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v21; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v22; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v23; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v24; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v25; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v26; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> result; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v28; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v29; 

  if ( _Last->span_ != _First->span_ && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 236, ASSERT_TYPE_SANITY, "( span_ == rhs.span_ )", (const char *)&queryFormat, "span_ == rhs.span_") )
    __debugbreak();
  v8 = _Last->index_ - _First->index_;
  if ( v8 <= 40 )
  {
    gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v29, _Last);
    v21 = v25;
    gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v28, _Mid);
    v23 = v26;
    gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&result, _First);
  }
  else
  {
    v9 = (v8 + 1) >> 3;
    v10 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator+(_First, &result, 2 * v9);
    v11 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator+(_First, &v28, v9);
    gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v29, _First);
    std::_Med3_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(v12, v11, v10, _Pred);
    v13 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator+(_Mid, &v29, v9);
    gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v28, _Mid);
    v15 = v14;
    v16 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator-(_Mid, &result, v9);
    std::_Med3_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(v16, v15, v13, _Pred);
    gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v29, _Last);
    v18 = v17;
    v19 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator-(_Last, &v28, v9);
    v20 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator-(_Last, &result, 2 * v9);
    std::_Med3_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(v20, v19, v18, _Pred);
    v21 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator-(_Last, &v29, v9);
    gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v28, _Mid);
    v23 = v22;
    v24 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator+(_First, &result, v9);
  }
  std::_Med3_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(v24, v23, v21, _Pred);
}

/*
==============
std::_Insertion_sort_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>
==============
*/
gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *std::_Insertion_sort_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *result, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, const gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Last, SortKeyPartialPredicate _Pred)
{
  const gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v4; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v5; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v6; 
  const gsl::span<StreamSortKeyPacked,-1> *span; 
  __int64 index; 
  __int64 v9; 
  unsigned __int64 bits; 
  const gsl::span<StreamSortKeyPacked,-1> *v11; 
  __int64 v12; 
  __int64 v13; 
  const gsl::span<StreamSortKeyPacked,-1> *v14; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v15; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v16; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v17; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v18; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v19; 
  const gsl::span<StreamSortKeyPacked,-1> *v20; 
  __int64 v21; 
  __int64 v22; 
  unsigned __int64 v23; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> other; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v26; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v27; 
  __int64 v28; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v29; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v30; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v31; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v32; 

  v28 = -2i64;
  v4 = _Last;
  v5 = _First;
  v6 = result;
  span = _First->span_;
  if ( *(_OWORD *)_First != *(_OWORD *)_Last )
  {
    index = _First->index_;
    if ( span && (index < 0 || index > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
      __debugbreak();
    while ( 1 )
    {
      if ( (!span || index < 0 || index >= span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 187, ASSERT_TYPE_SANITY, "( span_ && index_ >= 0 && index_ < span_->length() )", (const char *)&queryFormat, "span_ && index_ >= 0 && index_ < span_->length()") )
        __debugbreak();
      ++index;
      if ( span == v4->span_ && index == v4->index_ )
        break;
      v9 = index;
      if ( span && (index < 0 || index > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      if ( !span && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
        __debugbreak();
      if ( (index < 0 || index >= span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
        __debugbreak();
      bits = span->storage_.data_[index].bits;
      if ( !v5->span_ && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
        __debugbreak();
      v11 = v5->span_;
      v12 = v5->index_;
      if ( (v12 < 0 || v12 >= v11->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
        __debugbreak();
      if ( (bits & 0xFFFFFFFFFFFi64) <= (v11->storage_.data_[v12].bits & 0xFFFFFFFFFFFi64) )
      {
        v22 = index;
        if ( (index < 0 || index > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
          __debugbreak();
        while ( 1 )
        {
          if ( (v22 <= 0 || v22 > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 201, ASSERT_TYPE_SANITY, "( span_ && index_ > 0 && index_ <= span_->length() )", (const char *)&queryFormat, "span_ && index_ > 0 && index_ <= span_->length()") )
            __debugbreak();
          if ( (--v22 < 0 || v22 >= span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
            __debugbreak();
          if ( (bits & 0xFFFFFFFFFFFi64) <= (span->storage_.data_[v22].bits & 0xFFFFFFFFFFFi64) )
            break;
          if ( (v22 < 0 || v22 >= span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
            __debugbreak();
          v23 = span->storage_.data_[v22].bits;
          if ( (v9 < 0 || v9 >= span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
            __debugbreak();
          span->storage_.data_[v9].bits = v23;
          v9 = v22;
        }
        v5 = _First;
        v4 = _Last;
        if ( (v9 < 0 || v9 >= span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
        {
          __debugbreak();
          span->storage_.data_[v9].bits = bits;
        }
        else
        {
          span->storage_.data_[v9].bits = bits;
        }
      }
      else
      {
        if ( (index < 0 || index >= span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 187, ASSERT_TYPE_SANITY, "( span_ && index_ >= 0 && index_ < span_->length() )", (const char *)&queryFormat, "span_ && index_ >= 0 && index_ < span_->length()") )
          __debugbreak();
        other.span_ = span;
        other.index_ = index + 1;
        if ( (index + 1 < 0 || index + 1 > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
          __debugbreak();
        v26.span_ = span;
        v26.index_ = index;
        if ( (index < 0 || index > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
          __debugbreak();
        v13 = v5->index_;
        v14 = v5->span_;
        v27.span_ = v14;
        v27.index_ = v13;
        if ( v14 && (v13 < 0 || v13 > v14->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
          __debugbreak();
        gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v29, &other);
        v16 = v15;
        gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v30, &v26);
        v18 = v17;
        gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v31, &v27);
        std::_Move_backward_unchecked1<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>>(&v32, v19, v18, v16, 0);
        if ( !v5->span_ && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
          __debugbreak();
        v20 = v5->span_;
        v21 = v5->index_;
        if ( (v21 < 0 || v21 >= v20->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
          __debugbreak();
        v20->storage_.data_[v21].bits = bits;
      }
    }
    v6 = result;
  }
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(v6, v4);
  return v6;
}

/*
==============
std::_Make_heap_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>
==============
*/
void std::_Make_heap_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Last, SortKeyPartialPredicate _Pred)
{
  __int64 v6; 
  __int64 i; 
  __int64 index; 
  const gsl::span<StreamSortKeyPacked,-1> *span; 
  __int64 v10; 
  __int64 v11; 
  const gsl::span<StreamSortKeyPacked,-1> *v12; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v13; 
  StreamSortKeyPacked v14; 

  if ( _Last->span_ != _First->span_ && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 236, ASSERT_TYPE_SANITY, "( span_ == rhs.span_ )", (const char *)&queryFormat, "span_ == rhs.span_", -2i64) )
    __debugbreak();
  v6 = _Last->index_ - _First->index_;
  for ( i = v6 >> 1; i > 0; std::_Pop_heap_hole_by_index<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,StreamSortKeyPacked,SortKeyPartialPredicate>(&v13, i, v6, &v14, _Pred) )
  {
    --i;
    index = _First->index_;
    span = _First->span_;
    if ( _First->span_ && (index < 0 || index > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
      __debugbreak();
    if ( (!span || index + i < 0 || index + i > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 221, ASSERT_TYPE_SANITY, "( span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length() )", (const char *)&queryFormat, "span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length()") )
      __debugbreak();
    v10 = i + index;
    if ( span && (v10 < 0 || v10 > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
      __debugbreak();
    if ( !span && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
      __debugbreak();
    if ( (v10 < 0 || v10 >= span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
      __debugbreak();
    v14.0 = ($FD3C46332B1196AF8F5C8C522E71774D)span->storage_.data_[v10].bits;
    v11 = _First->index_;
    v12 = _First->span_;
    v13.span_ = v12;
    v13.index_ = v11;
    if ( v12 && (v11 < 0 || v11 > v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
      __debugbreak();
  }
}

/*
==============
std::_Med3_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>
==============
*/
void std::_Med3_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Mid, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Last, SortKeyPartialPredicate _Pred)
{
  StreamSortKeyPacked *v7; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v8; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v9; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v10; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v11; 
  StreamSortKeyPacked *v12; 
  StreamSortKeyPacked *v13; 
  unsigned __int64 bits; 
  StreamSortKeyPacked *v15; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v16; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v17; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v18; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v19; 
  StreamSortKeyPacked *v20; 
  StreamSortKeyPacked *v21; 
  unsigned __int64 v22; 
  StreamSortKeyPacked *v23; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v24; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v25; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v26; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v27; 
  StreamSortKeyPacked *v28; 
  StreamSortKeyPacked *v29; 
  unsigned __int64 v30; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v31; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v32; 

  v7 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(_First);
  if ( (gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(_Mid)->bits & 0xFFFFFFFFFFFi64) > (v7->bits & 0xFFFFFFFFFFFi64) )
  {
    gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v31, _First);
    v9 = v8;
    gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v32, _Mid);
    v11 = v10;
    v12 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(v9);
    v13 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(v11);
    bits = v13->bits;
    v13->0 = v12->0;
    v12->bits = bits;
  }
  v15 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(_Mid);
  if ( (gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(_Last)->bits & 0xFFFFFFFFFFFi64) > (v15->bits & 0xFFFFFFFFFFFi64) )
  {
    gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v32, _Mid);
    v17 = v16;
    gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v31, _Last);
    v19 = v18;
    v20 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(v17);
    v21 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(v19);
    v22 = v21->bits;
    v21->0 = v20->0;
    v20->bits = v22;
    v23 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(_First);
    if ( (gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(_Mid)->bits & 0xFFFFFFFFFFFi64) > (v23->bits & 0xFFFFFFFFFFFi64) )
    {
      gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v32, _First);
      v25 = v24;
      gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v31, _Mid);
      v27 = v26;
      v28 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(v25);
      v29 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(v27);
      v30 = v29->bits;
      v29->0 = v28->0;
      v28->bits = v30;
    }
  }
}

/*
==============
std::_Partition_by_median_guess_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>
==============
*/
std::pair<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> > *std::_Partition_by_median_guess_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(std::pair<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> > *result, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Last, SortKeyPartialPredicate _Pred)
{
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v7; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v8; 
  __int64 index; 
  const gsl::span<StreamSortKeyPacked,-1> *span; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v11; 
  const gsl::span<StreamSortKeyPacked,-1> *v12; 
  __int64 i; 
  unsigned __int64 *v14; 
  __int64 v15; 
  __int64 v16; 
  unsigned __int64 *v17; 
  const gsl::span<StreamSortKeyPacked,-1> *v18; 
  __int64 v19; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v20; 
  unsigned __int64 *v21; 
  unsigned __int64 *v22; 
  __int64 v23; 
  unsigned __int64 *v24; 
  unsigned __int64 *v25; 
  StreamSortKeyPacked *v26; 
  StreamSortKeyPacked *v27; 
  unsigned __int64 bits; 
  __int64 v29; 
  __int64 j; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v31; 
  __int64 v32; 
  unsigned __int64 *v33; 
  unsigned __int64 *v34; 
  __int64 v35; 
  StreamSortKeyPacked *v36; 
  StreamSortKeyPacked *v37; 
  unsigned __int64 v38; 
  StreamSortKeyPacked *v39; 
  StreamSortKeyPacked *v40; 
  unsigned __int64 v41; 
  StreamSortKeyPacked *v42; 
  StreamSortKeyPacked *v43; 
  unsigned __int64 v44; 
  __int64 v45; 
  StreamSortKeyPacked *v46; 
  StreamSortKeyPacked *v47; 
  unsigned __int64 v48; 
  StreamSortKeyPacked *v49; 
  StreamSortKeyPacked *v50; 
  unsigned __int64 v51; 
  __int64 v52; 
  StreamSortKeyPacked *v53; 
  StreamSortKeyPacked *v54; 
  unsigned __int64 v55; 
  __int64 v57; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v58; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> result_8; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v60; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v61; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v62; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v63; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> other; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v65; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v66; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v67; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v68; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v69; 
  __int64 v70; 

  v70 = -2i64;
  if ( _Last->span_ != _First->span_ && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 236, ASSERT_TYPE_SANITY, "( span_ == rhs.span_ )", (const char *)&queryFormat, "span_ == rhs.span_") )
    __debugbreak();
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator+(_First, &result_8, (_Last->index_ - _First->index_) >> 1);
  v7 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator-(_Last, &v60, 1i64);
  v8 = result_8;
  v62 = result_8;
  index = result_8.index_;
  span = result_8.span_;
  if ( result_8.span_ && (result_8.index_ < 0 || result_8.index_ > result_8.span_->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
    __debugbreak();
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v69, _First);
  std::_Guess_median_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(v11, &v62, v7, _Pred);
  v58 = v8;
  if ( span && (index < 0 || index > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
    __debugbreak();
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator+(&v58, &result_8, 1i64);
  v12 = v58.span_;
  for ( i = v58.index_; ; --i )
  {
    if ( _First->span_ != v12 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 256, ASSERT_TYPE_SANITY, "( lhs.span_ == rhs.span_ )", (const char *)&queryFormat, "lhs.span_ == rhs.span_") )
      __debugbreak();
    if ( _First->index_ >= i )
      break;
    if ( !v12 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
      __debugbreak();
    if ( (i < 0 || i >= v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
      __debugbreak();
    v14 = (unsigned __int64 *)&v12->storage_.data_[i];
    if ( v12 && (i < 0 || i > v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
      __debugbreak();
    if ( (!v12 || i - 1 < 0 || i - 1 > v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 221, ASSERT_TYPE_SANITY, "( span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length() )", (const char *)&queryFormat, "span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length()") )
      __debugbreak();
    v15 = i - 1;
    if ( v12 && (v15 < 0 || v15 > v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
      __debugbreak();
    if ( !v12 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
      __debugbreak();
    if ( (v15 < 0 || v15 >= v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
      __debugbreak();
    if ( (v12->storage_.data_[v15].bits & 0xFFFFFFFFFFFi64) > (*v14 & 0xFFFFFFFFFFFi64) )
      break;
    if ( v12 && (i < 0 || i > v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
      __debugbreak();
    if ( (!v12 || i - 1 < 0 || i - 1 > v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 221, ASSERT_TYPE_SANITY, "( span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length() )", (const char *)&queryFormat, "span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length()") )
      __debugbreak();
    v16 = i - 1;
    if ( v12 && (v16 < 0 || v16 > v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
      __debugbreak();
    if ( !v12 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
      __debugbreak();
    if ( (v16 < 0 || v16 >= v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
      __debugbreak();
    v17 = (unsigned __int64 *)&v12->storage_.data_[v16];
    if ( !v12 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
      __debugbreak();
    if ( (i < 0 || i >= v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
      __debugbreak();
    if ( (v12->storage_.data_[i].bits & 0xFFFFFFFFFFFi64) > (*v17 & 0xFFFFFFFFFFFi64) )
      break;
    if ( (!v12 || i <= 0 || i > v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 201, ASSERT_TYPE_SANITY, "( span_ && index_ > 0 && index_ <= span_->length() )", (const char *)&queryFormat, "span_ && index_ > 0 && index_ <= span_->length()") )
      __debugbreak();
  }
  v58.index_ = i;
  v18 = result_8.span_;
  v19 = result_8.index_;
  v20 = _Last;
  while ( 1 )
  {
    if ( v18 != _Last->span_ && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 256, ASSERT_TYPE_SANITY, "( lhs.span_ == rhs.span_ )", (const char *)&queryFormat, "lhs.span_ == rhs.span_") )
      __debugbreak();
    if ( v19 >= _Last->index_ )
      break;
    if ( !v12 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
      __debugbreak();
    if ( (i < 0 || i >= v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
      __debugbreak();
    v21 = (unsigned __int64 *)&v12->storage_.data_[i];
    if ( !v18 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
      __debugbreak();
    if ( (v19 < 0 || v19 >= v18->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
      __debugbreak();
    if ( (v18->storage_.data_[v19].bits & 0xFFFFFFFFFFFi64) > (*v21 & 0xFFFFFFFFFFFi64) )
      break;
    if ( !v18 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
      __debugbreak();
    if ( (v19 < 0 || v19 >= v18->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
      __debugbreak();
    v22 = (unsigned __int64 *)&v18->storage_.data_[v19];
    if ( !v12 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
      __debugbreak();
    if ( (i < 0 || i >= v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
      __debugbreak();
    if ( (v12->storage_.data_[i].bits & 0xFFFFFFFFFFFi64) > (*v22 & 0xFFFFFFFFFFFi64) )
      break;
    if ( (!v18 || v19 < 0 || v19 >= v18->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 187, ASSERT_TYPE_SANITY, "( span_ && index_ >= 0 && index_ < span_->length() )", (const char *)&queryFormat, "span_ && index_ >= 0 && index_ < span_->length()") )
      __debugbreak();
    ++v19;
  }
  result_8.index_ = v19;
  v23 = v19;
  if ( v18 && (v19 < 0 || v19 > v18->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
    __debugbreak();
  v57 = i;
  if ( v12 && (i < 0 || i > v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
    __debugbreak();
  while ( 1 )
  {
LABEL_136:
    if ( v18 != v20->span_ && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 256, ASSERT_TYPE_SANITY, "( lhs.span_ == rhs.span_ )", (const char *)&queryFormat, "lhs.span_ == rhs.span_") )
      __debugbreak();
    if ( v23 >= v20->index_ )
      break;
    if ( !v18 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
      __debugbreak();
    if ( (v23 < 0 || v23 >= v18->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
      __debugbreak();
    v24 = (unsigned __int64 *)&v18->storage_.data_[v23];
    if ( !v12 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
      __debugbreak();
    if ( (i < 0 || i >= v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
      __debugbreak();
    if ( (v12->storage_.data_[i].bits & 0xFFFFFFFFFFFi64) <= (*v24 & 0xFFFFFFFFFFFi64) )
    {
      if ( !v12 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
        __debugbreak();
      if ( (i < 0 || i >= v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
        __debugbreak();
      v25 = (unsigned __int64 *)&v12->storage_.data_[i];
      if ( (v23 < 0 || v23 >= v18->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
        __debugbreak();
      if ( (v18->storage_.data_[v23].bits & 0xFFFFFFFFFFFi64) > (*v25 & 0xFFFFFFFFFFFi64) )
        break;
      if ( v19 != v23 )
      {
        v63.span_ = v18;
        v63.index_ = v23;
        if ( (v23 < 0 || v23 > v18->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
          __debugbreak();
        v61 = result_8;
        if ( v18 && (v19 < 0 || v19 > v18->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
          __debugbreak();
        v26 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(&v63);
        v27 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(&v61);
        bits = v27->bits;
        v27->0 = v26->0;
        v26->bits = bits;
      }
      if ( (!v18 || v19 < 0 || v19 >= v18->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 187, ASSERT_TYPE_SANITY, "( span_ && index_ >= 0 && index_ < span_->length() )", (const char *)&queryFormat, "span_ && index_ >= 0 && index_ < span_->length()") )
        __debugbreak();
      result_8.index_ = ++v19;
    }
LABEL_184:
    if ( v23 >= 0 && v23 < v18->storage_.size_ )
    {
LABEL_188:
      ++v23;
    }
    else
    {
LABEL_186:
      if ( !CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 187, ASSERT_TYPE_SANITY, "( span_ && index_ >= 0 && index_ < span_->length() )", (const char *)&queryFormat, "span_ && index_ >= 0 && index_ < span_->length()") )
        goto LABEL_188;
      __debugbreak();
      ++v23;
    }
  }
  v29 = v57;
  for ( j = v57 - 1; ; --j )
  {
    v31 = _First;
    if ( _First->span_ != v12 )
    {
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 256, ASSERT_TYPE_SANITY, "( lhs.span_ == rhs.span_ )", (const char *)&queryFormat, "lhs.span_ == rhs.span_") )
        __debugbreak();
      v31 = _First;
    }
    v32 = v31->index_;
    if ( v32 >= v29 )
      break;
    if ( !v12 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
      __debugbreak();
    if ( (i < 0 || i >= v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
      __debugbreak();
    v33 = (unsigned __int64 *)&v12->storage_.data_[i];
    if ( v12 && (v57 < 0 || v57 > v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
      __debugbreak();
    if ( (!v12 || j < 0 || j > v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 221, ASSERT_TYPE_SANITY, "( span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length() )", (const char *)&queryFormat, "span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length()") )
      __debugbreak();
    if ( v12 && (j < 0 || j > v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
      __debugbreak();
    if ( !v12 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
      __debugbreak();
    if ( (j < 0 || j >= v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
      __debugbreak();
    if ( (v12->storage_.data_[j].bits & 0xFFFFFFFFFFFi64) > (*v33 & 0xFFFFFFFFFFFi64) )
      goto LABEL_282;
    if ( (v57 < 0 || v57 > v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
      __debugbreak();
    if ( (j < 0 || j > v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 221, ASSERT_TYPE_SANITY, "( span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length() )", (const char *)&queryFormat, "span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length()") )
      __debugbreak();
    if ( (j < 0 || j > v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
      __debugbreak();
    if ( (j < 0 || j >= v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
      __debugbreak();
    v34 = (unsigned __int64 *)&v12->storage_.data_[j];
    if ( !v12 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
      __debugbreak();
    if ( (i < 0 || i >= v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
      __debugbreak();
    if ( (v12->storage_.data_[i].bits & 0xFFFFFFFFFFFi64) > (*v34 & 0xFFFFFFFFFFFi64) )
    {
      v32 = _First->index_;
      v29 = v57;
      break;
    }
    v35 = v57;
    if ( (v57 < 0 || v57 > v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
      __debugbreak();
    if ( (j < 0 || j > v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 221, ASSERT_TYPE_SANITY, "( span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length() )", (const char *)&queryFormat, "span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length()") )
      __debugbreak();
    if ( (j < 0 || j > v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
      __debugbreak();
    if ( (!v12 || i <= 0 || i > v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 201, ASSERT_TYPE_SANITY, "( span_ && index_ > 0 && index_ <= span_->length() )", (const char *)&queryFormat, "span_ && index_ > 0 && index_ <= span_->length()") )
      __debugbreak();
    v58.index_ = --i;
    if ( i != j )
    {
      other.span_ = v12;
      if ( (v57 < 0 || v57 > v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      if ( (!v12 || v57 - 1 < 0 || v57 - 1 > v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 221, ASSERT_TYPE_SANITY, "( span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length() )", (const char *)&queryFormat, "span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length()") )
        __debugbreak();
      other.index_ = v57 - 1;
      gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v69, &other);
      v61 = v58;
      if ( v12 && (i < 0 || i > v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      v36 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(&v69);
      v37 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(&v61);
      v38 = v37->bits;
      v37->0 = v36->0;
      v36->bits = v38;
LABEL_282:
      v35 = v57;
    }
    if ( (v35 <= 0 || v35 > v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 201, ASSERT_TYPE_SANITY, "( span_ && index_ > 0 && index_ <= span_->length() )", (const char *)&queryFormat, "span_ && index_ > 0 && index_ <= span_->length()") )
      __debugbreak();
    v29 = v35 - 1;
    v57 = v29;
  }
  v20 = _Last;
  if ( v12 != _First->span_ || v29 != v32 )
    goto LABEL_332;
  if ( v18 != _Last->span_ || v23 != _Last->index_ )
  {
    if ( v29 == v32 )
    {
      if ( v19 != v23 )
      {
        v61 = result_8;
        if ( v18 && (v19 < 0 || v19 > v18->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
          __debugbreak();
        v60 = v58;
        if ( v12 && (i < 0 || i > v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
          __debugbreak();
        v39 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(&v61);
        v40 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(&v60);
        v41 = v40->bits;
        v40->0 = v39->0;
        v39->bits = v41;
      }
      if ( (!v18 || v19 < 0 || v19 >= v18->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 187, ASSERT_TYPE_SANITY, "( span_ && index_ >= 0 && index_ < span_->length() )", (const char *)&queryFormat, "span_ && index_ >= 0 && index_ < span_->length()") )
        __debugbreak();
      result_8.index_ = ++v19;
      v65.span_ = v18;
      v65.index_ = v23;
      if ( v18 && (v23 < 0 || v23 > v18->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      v60 = v58;
      if ( v12 && (i < 0 || i > v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      v42 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(&v65);
      v43 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(&v60);
      v44 = v43->bits;
      v43->0 = v42->0;
      v42->bits = v44;
      if ( (!v12 || i < 0 || i >= v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 187, ASSERT_TYPE_SANITY, "( span_ && index_ >= 0 && index_ < span_->length() )", (const char *)&queryFormat, "span_ && index_ >= 0 && index_ < span_->length()") )
        __debugbreak();
      v58.index_ = ++i;
      if ( (!v18 || v23 < 0 || v23 >= v18->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 187, ASSERT_TYPE_SANITY, "( span_ && index_ >= 0 && index_ < span_->length() )", (const char *)&queryFormat, "span_ && index_ >= 0 && index_ < span_->length()") )
        __debugbreak();
      ++v23;
      goto LABEL_136;
    }
LABEL_332:
    if ( v18 == _Last->span_ && v23 == _Last->index_ )
    {
      if ( (!v12 || i <= 0 || i > v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 201, ASSERT_TYPE_SANITY, "( span_ && index_ > 0 && index_ <= span_->length() )", (const char *)&queryFormat, "span_ && index_ > 0 && index_ <= span_->length()") )
        __debugbreak();
      v58.index_ = --i;
      if ( (!v12 || v29 <= 0 || v29 > v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 201, ASSERT_TYPE_SANITY, "( span_ && index_ > 0 && index_ <= span_->length() )", (const char *)&queryFormat, "span_ && index_ > 0 && index_ <= span_->length()") )
        __debugbreak();
      v45 = v29 - 1;
      v57 = v45;
      if ( v45 != i )
      {
        v60 = v58;
        if ( v12 && (i < 0 || i > v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
          __debugbreak();
        v66.span_ = v12;
        v66.index_ = v45;
        if ( v12 && (v45 < 0 || v45 > v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
          __debugbreak();
        v46 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(&v60);
        v47 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(&v66);
        v48 = v47->bits;
        v47->0 = v46->0;
        v46->bits = v48;
      }
      if ( (!v18 || v19 <= 0 || v19 > v18->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 201, ASSERT_TYPE_SANITY, "( span_ && index_ > 0 && index_ <= span_->length() )", (const char *)&queryFormat, "span_ && index_ > 0 && index_ <= span_->length()") )
        __debugbreak();
      result_8.index_ = --v19;
      v67.span_ = v18;
      v67.index_ = v19;
      if ( v18 && (v19 < 0 || v19 > v18->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      v60 = v58;
      if ( v12 && (i < 0 || i > v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      v49 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(&v67);
      v50 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(&v60);
      v51 = v50->bits;
      v50->0 = v49->0;
      v49->bits = v51;
      goto LABEL_136;
    }
    if ( (!v12 || v29 <= 0 || v29 > v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 201, ASSERT_TYPE_SANITY, "( span_ && index_ > 0 && index_ <= span_->length() )", (const char *)&queryFormat, "span_ && index_ > 0 && index_ <= span_->length()") )
      __debugbreak();
    v52 = v29 - 1;
    v57 = v52;
    v68.span_ = v12;
    v68.index_ = v52;
    if ( v12 && (v52 < 0 || v52 > v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
      __debugbreak();
    v62.span_ = v18;
    v62.index_ = v23;
    if ( v18 && (v23 < 0 || v23 > v18->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
      __debugbreak();
    v53 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(&v68);
    v54 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(&v62);
    v55 = v54->bits;
    v54->0 = v53->0;
    v53->bits = v55;
    if ( !v18 )
      goto LABEL_186;
    goto LABEL_184;
  }
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&result->first, &v58);
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&result->second, &result_8);
  return result;
}

/*
==============
std::_Pop_heap_hole_by_index<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,StreamSortKeyPacked,SortKeyPartialPredicate>
==============
*/
void std::_Pop_heap_hole_by_index<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,StreamSortKeyPacked,SortKeyPartialPredicate>(gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, __int64 _Hole, __int64 _Bottom, StreamSortKeyPacked *_Val, SortKeyPartialPredicate _Pred)
{
  StreamSortKeyPacked *v5; 
  char v6; 
  __int64 v7; 
  __int64 v9; 
  __int64 v10; 
  __int64 v11; 
  __int64 v12; 
  __int64 v13; 
  __int64 index; 
  const gsl::span<StreamSortKeyPacked,-1> *span; 
  __int64 v16; 
  __int64 v17; 
  unsigned __int64 *v18; 
  __int64 v19; 
  const gsl::span<StreamSortKeyPacked,-1> *v20; 
  __int64 v21; 
  __int64 v22; 
  __int64 v23; 
  const gsl::span<StreamSortKeyPacked,-1> *v24; 
  __int64 v25; 
  unsigned __int64 bits; 
  __int64 v27; 
  const gsl::span<StreamSortKeyPacked,-1> *v28; 
  __int64 v29; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v30; 
  unsigned __int64 v31; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v32; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v33; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> result; 
  __int64 v35; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v36; 
  __int64 v37; 
  char v38; 

  v38 = _Bottom;
  v35 = -2i64;
  v5 = _Val;
  v6 = _Bottom;
  v7 = _Hole;
  v9 = _Hole;
  result.span_ = (const gsl::span<StreamSortKeyPacked,-1> *)_Hole;
  v10 = _Hole;
  v11 = _Bottom - 1;
  v37 = _Bottom - 1;
  v12 = (_Bottom - 1) >> 1;
  if ( _Hole < v12 )
  {
    do
    {
      v13 = 2 * v10;
      index = _First->index_;
      span = _First->span_;
      if ( _First->span_ && (index < 0 || index > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      if ( !span || (v16 = index + v13 + 1, v16 < 0) || v16 > span->storage_.size_ )
      {
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 221, ASSERT_TYPE_SANITY, "( span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length() )", (const char *)&queryFormat, "span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length()") )
          __debugbreak();
      }
      v17 = index + v13 + 1;
      if ( span && (v17 < 0 || v17 > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      if ( !span && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
        __debugbreak();
      if ( (v17 < 0 || v17 >= span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
        __debugbreak();
      v18 = (unsigned __int64 *)&span->storage_.data_[v17];
      v19 = _First->index_;
      v20 = _First->span_;
      if ( _First->span_ && (v19 < 0 || v19 > v20->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      if ( !v20 || (v21 = v19 + v13 + 2, v21 < 0) || v21 > v20->storage_.size_ )
      {
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 221, ASSERT_TYPE_SANITY, "( span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length() )", (const char *)&queryFormat, "span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length()") )
          __debugbreak();
      }
      v22 = v19 + v13 + 2;
      if ( v20 && (v22 < 0 || v22 > v20->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      if ( !v20 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
        __debugbreak();
      if ( (v22 < 0 || v22 >= v20->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
        __debugbreak();
      v10 = v13 + 2i64 - ((*v18 & 0xFFFFFFFFFFFi64) < (v20->storage_.data_[v22].bits & 0xFFFFFFFFFFFi64));
      v23 = _First->index_;
      v24 = _First->span_;
      if ( _First->span_ && (v23 < 0 || v23 > v24->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      if ( (!v24 || v10 + v23 < 0 || v10 + v23 > v24->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 221, ASSERT_TYPE_SANITY, "( span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length() )", (const char *)&queryFormat, "span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length()") )
        __debugbreak();
      v25 = v10 + v23;
      if ( v24 && (v25 < 0 || v25 > v24->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      if ( !v24 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
        __debugbreak();
      if ( (v25 < 0 || v25 >= v24->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
        __debugbreak();
      bits = v24->storage_.data_[v25].bits;
      v27 = _First->index_;
      v28 = _First->span_;
      if ( _First->span_ && (v27 < 0 || v27 > v28->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      if ( (!v28 || v27 + v7 < 0 || v27 + v7 > v28->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 221, ASSERT_TYPE_SANITY, "( span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length() )", (const char *)&queryFormat, "span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length()") )
        __debugbreak();
      v29 = v7 + v27;
      if ( v28 && (v29 < 0 || v29 > v28->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      if ( !v28 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
        __debugbreak();
      if ( (v29 < 0 || v29 >= v28->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
        __debugbreak();
      v28->storage_.data_[v29].bits = bits;
      v7 = v10;
    }
    while ( v10 < v12 );
    v11 = v37;
    v6 = v38;
    v5 = _Val;
    v9 = (__int64)result.span_;
  }
  if ( v10 == v12 && (v6 & 1) == 0 )
  {
    v30 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator+(_First, &result, v11);
    v31 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(v30)->bits;
    v32 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator+(_First, &v36, v7);
    gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(v32)->bits = v31;
    v7 = v11;
  }
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v36, _First);
  std::_Push_heap_by_index<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,StreamSortKeyPacked,SortKeyPartialPredicate>(v33, v7, v9, v5, _Pred);
}

/*
==============
std::_Push_heap_by_index<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,StreamSortKeyPacked,SortKeyPartialPredicate>
==============
*/
void std::_Push_heap_by_index<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,StreamSortKeyPacked,SortKeyPartialPredicate>(gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, __int64 _Hole, __int64 _Top, StreamSortKeyPacked *_Val)
{
  __int64 v6; 
  __int64 v8; 
  __int64 index; 
  const gsl::span<StreamSortKeyPacked,-1> *span; 
  __int64 v11; 
  __int64 v12; 
  const gsl::span<StreamSortKeyPacked,-1> *v13; 
  __int64 v14; 
  unsigned __int64 bits; 
  __int64 v16; 
  const gsl::span<StreamSortKeyPacked,-1> *v17; 
  __int64 v18; 
  unsigned __int64 v19; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v20; 
  __int64 v21; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> result; 

  v21 = -2i64;
  v6 = _Hole;
  if ( _Top < _Hole )
  {
    do
    {
      v8 = (v6 - 1) >> 1;
      index = _First->index_;
      span = _First->span_;
      if ( _First->span_ && (index < 0 || index > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())", v21) )
        __debugbreak();
      if ( (!span || index + v8 < 0 || index + v8 > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 221, ASSERT_TYPE_SANITY, "( span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length() )", (const char *)&queryFormat, "span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length()") )
        __debugbreak();
      v11 = v8 + index;
      if ( span && (v11 < 0 || v11 > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      if ( !span && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
        __debugbreak();
      if ( (v11 < 0 || v11 >= span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
        __debugbreak();
      if ( (span->storage_.data_[v11].bits & 0xFFFFFFFFFFFi64) <= (_Val->bits & 0xFFFFFFFFFFFi64) )
        break;
      v12 = _First->index_;
      v13 = _First->span_;
      if ( _First->span_ && (v12 < 0 || v12 > v13->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      if ( (!v13 || v12 + v8 < 0 || v12 + v8 > v13->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 221, ASSERT_TYPE_SANITY, "( span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length() )", (const char *)&queryFormat, "span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length()") )
        __debugbreak();
      v14 = v8 + v12;
      if ( v13 && (v14 < 0 || v14 > v13->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      if ( !v13 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
        __debugbreak();
      if ( (v14 < 0 || v14 >= v13->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
        __debugbreak();
      bits = v13->storage_.data_[v14].bits;
      v16 = _First->index_;
      v17 = _First->span_;
      if ( _First->span_ && (v16 < 0 || v16 > v17->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      if ( (!v17 || v16 + v6 < 0 || v16 + v6 > v17->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 221, ASSERT_TYPE_SANITY, "( span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length() )", (const char *)&queryFormat, "span_ && (index_ + n) >= 0 && (index_ + n) <= span_->length()") )
        __debugbreak();
      v18 = v6 + v16;
      if ( v17 && (v18 < 0 || v18 > v17->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      if ( !v17 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
        __debugbreak();
      if ( (v18 < 0 || v18 >= v17->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
        __debugbreak();
      v17->storage_.data_[v18].bits = bits;
      v6 = (v6 - 1) >> 1;
    }
    while ( _Top < v8 );
  }
  v19 = _Val->bits;
  v20 = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator+(_First, &result, v6);
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(v20)->bits = v19;
}

/*
==============
std::_Sort_heap_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>
==============
*/
void std::_Sort_heap_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Last, SortKeyPartialPredicate _Pred)
{
  __int64 index; 
  const gsl::span<StreamSortKeyPacked,-1> *span; 
  __int64 v8; 
  const gsl::span<StreamSortKeyPacked,-1> *v9; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v10; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v11; 
  const gsl::span<StreamSortKeyPacked,-1> **v12; 
  const gsl::span<StreamSortKeyPacked,-1> **v13; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v14; 
  const gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v15; 
  unsigned __int64 bits; 
  __int64 v17; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v18; 
  __int64 v19; 
  __int64 v20; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> other; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v22; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v23; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v24; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v25; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v26; 
  StreamSortKeyPacked v27; 

  v20 = -2i64;
  while ( 1 )
  {
    if ( _Last->span_ != _First->span_ && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 236, ASSERT_TYPE_SANITY, "( span_ == rhs.span_ )", (const char *)&queryFormat, "span_ == rhs.span_", v20) )
      __debugbreak();
    index = _Last->index_;
    if ( index - _First->index_ < 2 )
      break;
    span = _Last->span_;
    other.span_ = span;
    other.index_ = index;
    if ( span && (index < 0 || index > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
      __debugbreak();
    v8 = _First->index_;
    v9 = _First->span_;
    v22.span_ = v9;
    v22.index_ = v8;
    if ( v9 && (v8 < 0 || v8 > v9->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
      __debugbreak();
    if ( span != v9 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 236, ASSERT_TYPE_SANITY, "( span_ == rhs.span_ )", (const char *)&queryFormat, "span_ == rhs.span_") )
      __debugbreak();
    if ( index - v8 >= 2 )
    {
      gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator--(&other);
      v27.0 = ($FD3C46332B1196AF8F5C8C522E71774D)gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(&other)->bits;
      gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v23, &other);
      v11 = v10;
      gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v24, &other);
      v13 = v12;
      gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v25, &v22);
      v15 = v14;
      bits = gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(v14)->bits;
      gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::operator*(v11)->bits = bits;
      if ( *v13 != v15->span_ && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 236, ASSERT_TYPE_SANITY, "( span_ == rhs.span_ )", (const char *)&queryFormat, "span_ == rhs.span_") )
        __debugbreak();
      v17 = (__int64)v13[1] - v15->index_;
      gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v26, v15);
      std::_Pop_heap_hole_by_index<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,StreamSortKeyPacked,SortKeyPartialPredicate>(v18, 0i64, v17, &v27, _Pred);
    }
    if ( !_Last->span_ || (v19 = _Last->index_, v19 <= 0) || v19 > _Last->span_->storage_.size_ )
    {
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 201, ASSERT_TYPE_SANITY, "( span_ && index_ > 0 && index_ <= span_->length() )", (const char *)&queryFormat, "span_ && index_ > 0 && index_ <= span_->length()") )
        __debugbreak();
    }
    --_Last->index_;
  }
}

/*
==============
std::_Sort_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>
==============
*/
void std::_Sort_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Last, __int64 _Ideal, SortKeyPartialPredicate _Pred)
{
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v6; 
  __int64 index; 
  __int64 v9; 
  const gsl::span<StreamSortKeyPacked,-1> *span; 
  __int64 v11; 
  const gsl::span<StreamSortKeyPacked,-1> *v12; 
  const gsl::span<StreamSortKeyPacked,-1> *v13; 
  __int64 v14; 
  __int64 v15; 
  const gsl::span<StreamSortKeyPacked,-1> *v16; 
  __int64 v17; 
  __int64 v18; 
  __int64 v19; 
  const gsl::span<StreamSortKeyPacked,-1> *v20; 
  const gsl::span<StreamSortKeyPacked,-1> *v21; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v22; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v23; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v24; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v25; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v26; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v27; 
  const gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v28; 
  const gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v29; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *v30; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v31; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v32; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v33; 
  std::pair<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> > v34; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v35; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v36; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v37; 
  __int64 v38; 
  __int64 v40; 

  v38 = -2i64;
  v6 = _Last;
  while ( 1 )
  {
    if ( v6->span_ != _First->span_ && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 236, ASSERT_TYPE_SANITY, "( span_ == rhs.span_ )", (const char *)&queryFormat, "span_ == rhs.span_") )
      __debugbreak();
    index = v6->index_;
    v9 = index - _First->index_;
    if ( v9 <= 32 )
      break;
    if ( _Ideal <= 0 )
    {
      gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v32, v6);
      v23 = v22;
      gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v31, _First);
      std::_Make_heap_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(v24, v23, _Pred);
      gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v32, v6);
      v26 = v25;
      gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v31, _First);
      std::_Sort_heap_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(v27, v26, _Pred);
      return;
    }
    span = v6->span_;
    v35.span_ = span;
    v35.index_ = index;
    if ( span && (index < 0 || index > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())", v31.span_, v31.index_, v32.span_, v32.index_, v33.span_, v33.index_) )
      __debugbreak();
    v11 = _First->index_;
    v12 = _First->span_;
    v36.span_ = v12;
    v36.index_ = v11;
    if ( v12 && (v11 < 0 || v11 > v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
      __debugbreak();
    std::_Partition_by_median_guess_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(&v34, &v36, &v35, _Pred);
    v40 = (_Ideal >> 1) + (_Ideal >> 2);
    v13 = v34.first.span_;
    if ( v34.first.span_ != _First->span_ && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 236, ASSERT_TYPE_SANITY, "( span_ == rhs.span_ )", (const char *)&queryFormat, "span_ == rhs.span_") )
      __debugbreak();
    v14 = v34.first.index_;
    v15 = v34.first.index_ - _First->index_;
    v16 = v34.second.span_;
    if ( v6->span_ != v34.second.span_ && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 236, ASSERT_TYPE_SANITY, "( span_ == rhs.span_ )", (const char *)&queryFormat, "span_ == rhs.span_") )
      __debugbreak();
    v17 = v6->index_;
    v18 = v34.second.index_;
    if ( v15 >= v17 - v34.second.index_ )
    {
      v21 = _Last->span_;
      v31.span_ = v21;
      v31.index_ = v17;
      if ( v21 && (v17 < 0 || v17 > v21->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())", v31.span_, v31.index_) )
        __debugbreak();
      v32.span_ = v16;
      v32.index_ = v18;
      if ( v16 && (v18 < 0 || v18 > v16->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      _Ideal = v40;
      std::_Sort_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(&v32, &v31, v40, _Pred);
      v6 = _Last;
      *_Last = v34.first;
    }
    else
    {
      v37.span_ = v13;
      v37.index_ = v14;
      if ( v13 && (v14 < 0 || v14 > v13->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      v19 = _First->index_;
      v20 = _First->span_;
      v33.span_ = v20;
      v33.index_ = v19;
      if ( v20 && (v19 < 0 || v19 > v20->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      _Ideal = v40;
      std::_Sort_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(&v33, &v37, v40, _Pred);
      *_First = v34.second;
      v6 = _Last;
    }
  }
  if ( v9 >= 2 )
  {
    gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v32, v6);
    v29 = v28;
    gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(&v31, _First);
    std::_Insertion_sort_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(&v33, v30, v29, _Pred);
  }
}

/*
==============
std::is_sorted_until<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>
==============
*/
gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *std::is_sorted_until<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *result, const gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Last, SortKeyPartialPredicate _Pred)
{
  __int64 index; 
  const gsl::span<StreamSortKeyPacked,-1> *span; 
  __int64 v8; 
  const gsl::span<StreamSortKeyPacked,-1> *v9; 
  __int64 v10; 
  unsigned __int64 *v11; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v12; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v14; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v15; 

  index = _First->index_;
  span = _First->span_;
  if ( _First->span_ && (index < 0 || index > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())", -2i64) )
    __debugbreak();
  v8 = _Last->index_;
  v9 = _Last->span_;
  v14.span_ = _Last->span_;
  v14.index_ = v8;
  if ( _Last->span_ && (v8 < 0 || v8 > v9->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
    __debugbreak();
  if ( span != v9 || index != v8 )
  {
    v15.span_ = span;
    v10 = index;
    if ( span && (index < 0 || index > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
      __debugbreak();
    while ( 1 )
    {
      if ( (!span || v10 < 0 || v10 >= span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 187, ASSERT_TYPE_SANITY, "( span_ && index_ >= 0 && index_ < span_->length() )", (const char *)&queryFormat, "span_ && index_ >= 0 && index_ < span_->length()") )
        __debugbreak();
      v15.index_ = ++v10;
      if ( span == v9 && v10 == v8 )
        break;
      if ( !span && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
        __debugbreak();
      if ( (index < 0 || index >= span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
        __debugbreak();
      v11 = (unsigned __int64 *)&span->storage_.data_[index];
      if ( !span && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 175, ASSERT_TYPE_SANITY, "( span_ )", (const char *)&queryFormat, "span_") )
        __debugbreak();
      if ( (v10 < 0 || v10 >= span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 514, ASSERT_TYPE_SANITY, "( idx >= 0 && idx < storage_.size() )", (const char *)&queryFormat, "idx >= 0 && idx < storage_.size()") )
        __debugbreak();
      if ( (span->storage_.data_[v10].bits & 0xFFFFFFFFFFFi64) > (*v11 & 0xFFFFFFFFFFFi64) )
      {
        v12 = v15;
        goto LABEL_47;
      }
      if ( (index < 0 || index >= span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 187, ASSERT_TYPE_SANITY, "( span_ && index_ >= 0 && index_ < span_->length() )", (const char *)&queryFormat, "span_ && index_ >= 0 && index_ < span_->length()") )
      {
        __debugbreak();
        ++index;
      }
      else
      {
        ++index;
      }
    }
  }
  v12 = v14;
LABEL_47:
  *_Last = v12;
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>(result, _Last);
  return result;
}

/*
==============
std::nth_element<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>
==============
*/
void std::nth_element<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Nth, gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Last, SortKeyPartialPredicate _Pred)
{
  __int64 index; 
  const gsl::span<StreamSortKeyPacked,-1> *span; 
  __int64 v9; 
  const gsl::span<StreamSortKeyPacked,-1> *v10; 
  __int64 v11; 
  const gsl::span<StreamSortKeyPacked,-1> *v12; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> second; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> first; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v15; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v16; 
  std::pair<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> > v17[2]; 

  index = _First->index_;
  span = _First->span_;
  v15.span_ = span;
  v15.index_ = index;
  if ( span && (index < 0 || index > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())", -2i64) )
    __debugbreak();
  v9 = _Nth->index_;
  v10 = _Nth->span_;
  if ( _Nth->span_ && (v9 < 0 || v9 > v10->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
    __debugbreak();
  v11 = _Last->index_;
  v12 = _Last->span_;
  v16.span_ = v12;
  v16.index_ = v11;
  if ( v12 && (v11 < 0 || v11 > v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
    __debugbreak();
  if ( v10 != v12 || v9 != v11 )
  {
    second = v15;
    first = v16;
    while ( 1 )
    {
      if ( v12 != span && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 236, ASSERT_TYPE_SANITY, "( span_ == rhs.span_ )", (const char *)&queryFormat, "span_ == rhs.span_") )
        __debugbreak();
      if ( v11 - index <= 32 )
        break;
      v16 = first;
      if ( v12 && (v11 < 0 || v11 > v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      v15 = second;
      if ( span && (index < 0 || index > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
        __debugbreak();
      std::_Partition_by_median_guess_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(v17, &v15, &v16, _Pred);
      if ( v10 != v17[0].second.span_ && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 256, ASSERT_TYPE_SANITY, "( lhs.span_ == rhs.span_ )", (const char *)&queryFormat, "lhs.span_ == rhs.span_") )
        __debugbreak();
      if ( v9 < v17[0].second.index_ )
      {
        if ( v10 != v17[0].first.span_ && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 256, ASSERT_TYPE_SANITY, "( lhs.span_ == rhs.span_ )", (const char *)&queryFormat, "lhs.span_ == rhs.span_") )
          __debugbreak();
        if ( v9 >= v17[0].first.index_ )
          return;
        first = v17[0].first;
        v16 = v17[0].first;
        v11 = v17[0].first.index_;
        v12 = v17[0].first.span_;
      }
      else
      {
        second = v17[0].second;
        v15 = v17[0].second;
        index = v17[0].second.index_;
        span = v17[0].second.span_;
      }
    }
    v16 = first;
    if ( v12 && (v11 < 0 || v11 > v12->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
      __debugbreak();
    v15 = second;
    if ( span && (index < 0 || index > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
      __debugbreak();
    std::_Insertion_sort_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(&v17[0].first, &v15, &v16, _Pred);
  }
}

/*
==============
std::sort<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>
==============
*/
void std::sort<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(const gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_First, const gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> *_Last, SortKeyPartialPredicate _Pred)
{
  __int64 index; 
  const gsl::span<StreamSortKeyPacked,-1> *span; 
  __int64 v7; 
  const gsl::span<StreamSortKeyPacked,-1> *v8; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v9; 
  gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0> v10; 

  index = _First->index_;
  span = _First->span_;
  if ( _First->span_ && (index < 0 || index > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())", -2i64) )
    __debugbreak();
  v7 = _Last->index_;
  v8 = _Last->span_;
  if ( v8 && (v7 < 0 || v7 > v8->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
    __debugbreak();
  if ( v8 != span && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 236, ASSERT_TYPE_SANITY, "( span_ == rhs.span_ )", (const char *)&queryFormat, "span_ == rhs.span_") )
    __debugbreak();
  v9.span_ = v8;
  v9.index_ = v7;
  if ( v8 && (v7 < 0 || v7 > v8->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
    __debugbreak();
  v10.span_ = span;
  v10.index_ = index;
  if ( span && (index < 0 || index > span->storage_.size_) && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\gsl\\span", 162, ASSERT_TYPE_SANITY, "( span == nullptr || (index_ >= 0 && index <= span_->length()) )", (const char *)&queryFormat, "span == nullptr || (index_ >= 0 && index <= span_->length())") )
    __debugbreak();
  std::_Sort_unchecked<gsl::details::span_iterator<gsl::span<StreamSortKeyPacked,-1>,0>,SortKeyPartialPredicate>(&v10, &v9, v7 - index, _Pred);
}

/*
==============
std::_Insertion_sort_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>
==============
*/
StreamSortKeyPacked *std::_Insertion_sort_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *const _Last, StreamGenericLoadingPredicate _Pred)
{
  StreamSortKeyPacked *v4; 
  StreamSortKeyPacked *v5; 
  size_t v6; 
  unsigned __int64 bits; 
  unsigned __int64 *v8; 
  __int64 v9; 
  StreamKey *StreamKeyAtIndex; 
  StreamKey *v11; 
  unsigned __int64 v12; 
  unsigned __int64 v13; 
  bool v14; 
  unsigned __int64 *i; 
  unsigned __int64 v16; 
  unsigned __int64 v17; 
  StreamKey *v18; 
  StreamKey *v19; 
  __int64 v20; 
  XPakEntryInfo *p_xpakInfo; 
  unsigned __int64 v22; 
  bool v23; 

  if ( _First == _Last )
    return _Last;
  v4 = _First + 1;
  v5 = _First + 1;
  if ( &_First[1] == _Last )
    return _Last;
  v6 = 8i64;
  do
  {
    bits = v5->bits;
    v8 = (unsigned __int64 *)v5;
    v9 = (v5->bits >> 44) & 1;
    if ( v9 == ((_First->bits & 0x100000000000i64) != 0) )
    {
      StreamKeyAtIndex = DB_GetStreamKeyAtIndex(bits >> 45);
      v11 = DB_GetStreamKeyAtIndex(_First->bits >> 45);
      v4 = _First + 1;
      v12 = (unsigned __int8)*((_QWORD *)&StreamKeyAtIndex->xpakInfo + 3);
      v13 = (unsigned __int8)*((_QWORD *)&v11->xpakInfo + 3);
      if ( v13 == v12 )
        v14 = StreamKeyAtIndex->xpakInfo.offset > v11->xpakInfo.offset;
      else
        v14 = v13 < v12;
    }
    else
    {
      v14 = (_First->bits & 0x100000000000i64) != 0;
    }
    if ( v14 )
    {
      memmove_0(v4, _First, v6);
      _First->bits = bits;
    }
    else
    {
      for ( i = (unsigned __int64 *)v5; ; v8 = i )
      {
        v16 = *--i;
        v17 = v16 >> 44;
        if ( v9 == (v17 & 1) )
        {
          v18 = DB_GetStreamKeyAtIndex(bits >> 45);
          v19 = DB_GetStreamKeyAtIndex(*i >> 45);
          v20 = *((_QWORD *)&v19->xpakInfo + 3);
          p_xpakInfo = &v19->xpakInfo;
          v22 = (unsigned __int8)*((_QWORD *)&v18->xpakInfo + 3);
          v23 = (unsigned __int8)v20 == v22 ? v18->xpakInfo.offset > p_xpakInfo->offset : (unsigned __int8)v20 < v22;
        }
        else
        {
          v23 = v17 & 1;
        }
        if ( !v23 )
          break;
        *v8 = *i;
      }
      *v8 = bits;
    }
    v4 = _First + 1;
    ++v5;
    v6 += 8i64;
  }
  while ( v5 != _Last );
  return _Last;
}

/*
==============
std::_Insertion_sort_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>
==============
*/
StreamSortKeyPacked *std::_Insertion_sort_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *const _Last, StreamImageLoadingPredicate _Pred)
{
  StreamSortKeyPacked *v4; 
  StreamSortKeyPacked *v5; 
  unsigned __int64 bits; 
  unsigned __int64 *v7; 
  unsigned int v8; 
  GfxImage *GfxImageAtIndex; 
  unsigned __int64 v10; 
  unsigned int v11; 
  char *v12; 
  __int64 v13; 
  GfxImage *v14; 
  unsigned __int64 v15; 
  char *v16; 
  unsigned __int64 v17; 
  bool v18; 
  __int64 v19; 
  bool v20; 
  bool v21; 
  bool v22; 
  unsigned __int64 *i; 
  unsigned __int64 v24; 
  unsigned __int64 v25; 
  unsigned int v26; 
  GfxImage *v27; 
  unsigned __int64 v28; 
  unsigned int v29; 
  char *v30; 
  __int64 v31; 
  GfxImage *v32; 
  unsigned __int64 v33; 
  char *v34; 
  unsigned __int64 v35; 
  bool v36; 
  __int64 v38; 
  __int64 v39; 
  StreamSortKeyPacked *__formal; 
  StreamSortKeyPacked *v41; 
  StreamSortKeyPacked *v42; 

  v41 = _Last;
  if ( _First == _Last )
    return _Last;
  v4 = _First + 1;
  if ( &_First[1] == _Last )
    return _Last;
  v5 = _First + 2;
  __formal = _First + 2;
  do
  {
    bits = v4->bits;
    v7 = (unsigned __int64 *)v4;
    if ( (((unsigned __int8)(_First->bits >> 44) ^ (unsigned __int8)(v4->bits >> 44)) & 1) != 0 )
    {
      v18 = (_First->bits & 0x100000000000i64) != 0;
    }
    else
    {
      v8 = (unsigned int)(bits >> 45) >> 2;
      if ( (unsigned int)(bits >> 45) >= 0x50000 )
      {
        LODWORD(v39) = 327680;
        LODWORD(v38) = bits >> 45;
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v38, v39) )
          __debugbreak();
      }
      GfxImageAtIndex = DB_GetGfxImageAtIndex(v8);
      v10 = _First->bits >> 45;
      v11 = (unsigned int)v10 >> 2;
      v12 = (char *)GfxImageAtIndex + 40 * ((bits >> 45) - 4 * v8);
      v13 = (unsigned int)v10 - 4 * ((unsigned int)v10 >> 2);
      if ( (unsigned int)v10 >= 0x50000 )
      {
        LODWORD(v39) = 327680;
        LODWORD(v38) = v10;
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v38, v39) )
          __debugbreak();
      }
      v14 = DB_GetGfxImageAtIndex(v11);
      v15 = (unsigned __int8)*((_QWORD *)v12 + 10);
      v16 = (char *)v14 + 40 * v13;
      v17 = (unsigned __int8)*((_QWORD *)v16 + 10);
      if ( v17 == v15 )
      {
        v19 = *((_QWORD *)v16 + 8);
        v22 = __OFSUB__(*((_QWORD *)v12 + 8), v19);
        v20 = *((_QWORD *)v12 + 8) == v19;
        v21 = *((_QWORD *)v12 + 8) - v19 < 0;
        v5 = __formal;
        v18 = !(v21 ^ v22 | v20);
      }
      else
      {
        v5 = __formal;
        v18 = v17 < v15;
      }
    }
    if ( v18 )
    {
      std::_Ptr_move_cat<StreamSortKeyPacked,StreamSortKeyPacked>(&__formal, &v42);
      memmove_0((char *)v5 - ((char *)v4 - (char *)_First), _First, (char *)v4 - (char *)_First);
      _First->bits = bits;
    }
    else
    {
      for ( i = (unsigned __int64 *)v4; ; v7 = i )
      {
        v24 = *--i;
        v25 = v24 >> 44;
        if ( (((unsigned __int8)v25 ^ (unsigned __int8)(bits >> 44)) & 1) != 0 )
        {
          v36 = v25 & 1;
        }
        else
        {
          v26 = (unsigned int)(bits >> 45) >> 2;
          if ( (unsigned int)(bits >> 45) >= 0x50000 )
          {
            LODWORD(v39) = 327680;
            LODWORD(v38) = bits >> 45;
            if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v38, v39) )
              __debugbreak();
          }
          v27 = DB_GetGfxImageAtIndex(v26);
          v28 = *i >> 45;
          v29 = (unsigned int)v28 >> 2;
          v30 = (char *)v27 + 40 * ((bits >> 45) - 4 * v26);
          v31 = (unsigned int)v28 - 4 * ((unsigned int)v28 >> 2);
          if ( (unsigned int)v28 >= 0x50000 )
          {
            LODWORD(v39) = 327680;
            LODWORD(v38) = v28;
            if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v38, v39) )
              __debugbreak();
          }
          v32 = DB_GetGfxImageAtIndex(v29);
          v33 = (unsigned __int8)*((_QWORD *)v30 + 10);
          v34 = (char *)v32 + 40 * v31;
          v35 = (unsigned __int8)*((_QWORD *)v34 + 10);
          v36 = v35 == v33 ? *((_QWORD *)v30 + 8) > *((_QWORD *)v34 + 8) : v35 < v33;
        }
        if ( !v36 )
          break;
        *v7 = *i;
      }
      v5 = __formal;
      *v7 = bits;
    }
    ++v5;
    ++v4;
    __formal = v5;
  }
  while ( v4 != v41 );
  return v41;
}

/*
==============
std::_Insertion_sort_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>
==============
*/
StreamSortKeyPacked *std::_Insertion_sort_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *const _Last, StreamMeshLoadingPredicate _Pred)
{
  StreamSortKeyPacked *v4; 
  StreamSortKeyPacked *v5; 
  size_t v6; 
  unsigned __int64 bits; 
  unsigned __int64 *v8; 
  __int64 v9; 
  XModelSurfs *XModelSurfsAtIndex; 
  XModelSurfs *v11; 
  unsigned __int64 v12; 
  unsigned __int64 v13; 
  bool v14; 
  unsigned __int64 *i; 
  unsigned __int64 v16; 
  unsigned __int64 v17; 
  XModelSurfs *v18; 
  XModelSurfs *v19; 
  __int64 v20; 
  XPakEntryInfo *p_xpakEntry; 
  unsigned __int64 v22; 
  bool v23; 

  if ( _First == _Last )
    return _Last;
  v4 = _First + 1;
  v5 = _First + 1;
  if ( &_First[1] == _Last )
    return _Last;
  v6 = 8i64;
  do
  {
    bits = v5->bits;
    v8 = (unsigned __int64 *)v5;
    v9 = (v5->bits >> 44) & 1;
    if ( v9 == ((_First->bits & 0x100000000000i64) != 0) )
    {
      XModelSurfsAtIndex = DB_GetXModelSurfsAtIndex(bits >> 45);
      v11 = DB_GetXModelSurfsAtIndex(_First->bits >> 45);
      v4 = _First + 1;
      v12 = (unsigned __int8)*((_QWORD *)&XModelSurfsAtIndex->xpakEntry + 3);
      v13 = (unsigned __int8)*((_QWORD *)&v11->xpakEntry + 3);
      if ( v13 == v12 )
        v14 = XModelSurfsAtIndex->xpakEntry.offset > v11->xpakEntry.offset;
      else
        v14 = v13 < v12;
    }
    else
    {
      v14 = (_First->bits & 0x100000000000i64) != 0;
    }
    if ( v14 )
    {
      memmove_0(v4, _First, v6);
      _First->bits = bits;
    }
    else
    {
      for ( i = (unsigned __int64 *)v5; ; v8 = i )
      {
        v16 = *--i;
        v17 = v16 >> 44;
        if ( v9 == (v17 & 1) )
        {
          v18 = DB_GetXModelSurfsAtIndex(bits >> 45);
          v19 = DB_GetXModelSurfsAtIndex(*i >> 45);
          v20 = *((_QWORD *)&v19->xpakEntry + 3);
          p_xpakEntry = &v19->xpakEntry;
          v22 = (unsigned __int8)*((_QWORD *)&v18->xpakEntry + 3);
          v23 = (unsigned __int8)v20 == v22 ? v18->xpakEntry.offset > p_xpakEntry->offset : (unsigned __int8)v20 < v22;
        }
        else
        {
          v23 = v17 & 1;
        }
        if ( !v23 )
          break;
        *v8 = *i;
      }
      *v8 = bits;
    }
    v4 = _First + 1;
    ++v5;
    v6 += 8i64;
  }
  while ( v5 != _Last );
  return _Last;
}

/*
==============
std::_Make_heap_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>
==============
*/
void std::_Make_heap_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, StreamGenericLoadingPredicate _Pred)
{
  signed __int64 v4; 
  signed __int64 v5; 
  signed __int64 v6; 
  __int64 v7; 
  unsigned __int64 bits; 
  signed __int64 v9; 
  __int64 v10; 
  __int64 v11; 
  unsigned __int64 v12; 
  StreamKey *StreamKeyAtIndex; 
  StreamKey *v14; 
  __int64 v15; 
  XPakEntryInfo *p_xpakInfo; 
  unsigned __int64 v17; 
  bool v18; 
  __int64 v19; 
  StreamKey *v20; 
  StreamKey *v21; 
  __int64 v22; 
  XPakEntryInfo *v23; 
  unsigned __int64 v24; 
  bool v25; 
  signed __int64 v26; 
  signed __int64 v27; 
  __int64 v28; 

  v4 = _Last - _First;
  v27 = v4;
  v5 = ((char *)_Last - (char *)_First) >> 4;
  if ( v5 > 0 )
  {
    v6 = v4 - 1;
    v7 = (v4 - 1) >> 1;
    v28 = v7;
    v26 = v4 - 1;
    do
    {
      bits = _First[--v5].bits;
      v9 = v5;
      v10 = v5;
      if ( v5 < v7 )
      {
        do
        {
          v11 = 2 * v10;
          v12 = _First[2 * v10 + 2].bits;
          if ( (((unsigned __int8)(_First[v11 + 1].bits >> 44) ^ (unsigned __int8)(v12 >> 44)) & 1) != 0 )
          {
            v18 = (_First[v11 + 1].bits & 0x100000000000i64) != 0;
          }
          else
          {
            StreamKeyAtIndex = DB_GetStreamKeyAtIndex(v12 >> 45);
            v14 = DB_GetStreamKeyAtIndex(_First[v11 + 1].bits >> 45);
            v15 = *((_QWORD *)&v14->xpakInfo + 3);
            p_xpakInfo = &v14->xpakInfo;
            v17 = (unsigned __int8)*((_QWORD *)&StreamKeyAtIndex->xpakInfo + 3);
            if ( (unsigned __int8)v15 == v17 )
              v18 = StreamKeyAtIndex->xpakInfo.offset > p_xpakInfo->offset;
            else
              v18 = (unsigned __int8)v15 < v17;
          }
          v10 = !v18 + v11 + 1;
          _First[v9] = _First[v10];
          v9 = v10;
        }
        while ( v10 < v7 );
        v4 = v27;
        v6 = v26;
      }
      if ( v10 == v7 && (v4 & 1) == 0 )
      {
        _First[v9] = _First[v4 - 1];
        v9 = v6;
      }
      v19 = (v9 - 1) >> 1;
      if ( v5 < v9 )
      {
        do
        {
          if ( ((_First[v19].bits >> 44) & 1) == ((bits & 0x100000000000i64) != 0) )
          {
            v20 = DB_GetStreamKeyAtIndex(_First[v19].bits >> 45);
            v21 = DB_GetStreamKeyAtIndex(bits >> 45);
            v22 = *((_QWORD *)&v21->xpakInfo + 3);
            v23 = &v21->xpakInfo;
            v24 = (unsigned __int8)*((_QWORD *)&v20->xpakInfo + 3);
            if ( (unsigned __int8)v22 == v24 )
              v25 = v20->xpakInfo.offset > v23->offset;
            else
              v25 = (unsigned __int8)v22 < v24;
          }
          else
          {
            v25 = (bits & 0x100000000000i64) != 0;
          }
          if ( !v25 )
            break;
          _First[v9] = _First[v19];
          v9 = v19;
          v19 = (v19 - 1) >> 1;
        }
        while ( v5 < v9 );
        v7 = v28;
      }
      v4 = v27;
      _First[v9].bits = bits;
      v6 = v27 - 1;
    }
    while ( v5 > 0 );
  }
}

/*
==============
std::_Make_heap_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>
==============
*/
void std::_Make_heap_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, StreamImageLoadingPredicate _Pred)
{
  signed __int64 v4; 
  __int64 v5; 
  __int64 v6; 
  __int64 v7; 
  unsigned __int64 bits; 
  __int64 v9; 
  __int64 v10; 
  __int64 v11; 
  unsigned __int64 v12; 
  unsigned __int64 v13; 
  unsigned __int64 v14; 
  unsigned int v15; 
  __int64 v16; 
  GfxImage *GfxImageAtIndex; 
  __int64 v18; 
  unsigned __int64 v19; 
  unsigned int v20; 
  const char **v21; 
  __int64 v22; 
  GfxImage *v23; 
  unsigned __int64 v24; 
  char *v25; 
  unsigned __int64 v26; 
  bool v27; 
  __int64 v28; 
  unsigned __int64 v29; 
  unsigned int v30; 
  __int64 v31; 
  GfxImage *v32; 
  __int64 v33; 
  unsigned int v34; 
  const char **v35; 
  GfxImage *v36; 
  unsigned __int64 v37; 
  char *v38; 
  unsigned __int64 v39; 
  bool v40; 
  __int64 v41; 
  __int64 v42; 
  signed __int64 v43; 
  __int64 v44; 
  signed __int64 v45; 

  v4 = _Last - _First;
  v45 = v4;
  v5 = v4 >> 1;
  if ( v4 >> 1 > 0 )
  {
    v6 = v4 - 1;
    v7 = (v4 - 1) >> 1;
    v44 = v7;
    v43 = v4 - 1;
    do
    {
      bits = _First[--v5].bits;
      v9 = v5;
      v10 = v5;
      if ( v5 < v7 )
      {
        do
        {
          v11 = 2 * v10;
          v12 = _First[2 * v10 + 2].bits;
          v13 = _First[2 * v10 + 1].bits >> 44;
          if ( (((unsigned __int8)v13 ^ (unsigned __int8)(v12 >> 44)) & 1) != 0 )
          {
            v27 = v13 & 1;
          }
          else
          {
            v14 = v12 >> 45;
            v15 = (unsigned int)v14 >> 2;
            v16 = (unsigned int)v14 - 4 * ((unsigned int)v14 >> 2);
            if ( (unsigned int)v14 >= 0x50000 )
            {
              LODWORD(v42) = 327680;
              LODWORD(v41) = v14;
              if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v41, v42) )
                __debugbreak();
            }
            GfxImageAtIndex = DB_GetGfxImageAtIndex(v15);
            v18 = 5 * v16;
            v19 = _First[v11 + 1].bits >> 45;
            v20 = (unsigned int)v19 >> 2;
            v21 = &GfxImageAtIndex->name + v18;
            v22 = (unsigned int)v19 - 4 * ((unsigned int)v19 >> 2);
            if ( (unsigned int)v19 >= 0x50000 )
            {
              LODWORD(v42) = 327680;
              LODWORD(v41) = v19;
              if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v41, v42) )
                __debugbreak();
            }
            v23 = DB_GetGfxImageAtIndex(v20);
            v24 = (unsigned __int8)v21[10];
            v25 = (char *)v23 + 40 * v22;
            v26 = (unsigned __int8)*((_QWORD *)v25 + 10);
            if ( v26 == v24 )
              v27 = (__int64)v21[8] > *((_QWORD *)v25 + 8);
            else
              v27 = v26 < v24;
          }
          v10 = !v27 + v11 + 1;
          _First[v9] = _First[v10];
          v9 = v10;
        }
        while ( v10 < v44 );
        v7 = v44;
        v4 = v45;
        v6 = v43;
      }
      if ( v10 == v7 && (v4 & 1) == 0 )
      {
        _First[v9] = _First[v4 - 1];
        v9 = v6;
      }
      if ( v5 < v9 )
      {
        do
        {
          v28 = (v9 - 1) >> 1;
          if ( (((unsigned __int8)(bits >> 44) ^ (unsigned __int8)(_First[v28].bits >> 44)) & 1) != 0 )
          {
            v40 = (bits & 0x100000000000i64) != 0;
          }
          else
          {
            v29 = _First[v28].bits >> 45;
            v30 = (unsigned int)v29 >> 2;
            v31 = (unsigned int)v29 - 4 * ((unsigned int)v29 >> 2);
            if ( (unsigned int)v29 >= 0x50000 )
            {
              LODWORD(v42) = 327680;
              LODWORD(v41) = _First[v28].bits >> 45;
              if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v41, v42) )
                __debugbreak();
            }
            v32 = DB_GetGfxImageAtIndex(v30);
            v33 = 5 * v31;
            v34 = (unsigned int)(bits >> 45) >> 2;
            v35 = &v32->name + v33;
            if ( (unsigned int)(bits >> 45) >= 0x50000 )
            {
              LODWORD(v42) = 327680;
              LODWORD(v41) = bits >> 45;
              if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v41, v42) )
                __debugbreak();
            }
            v36 = DB_GetGfxImageAtIndex(v34);
            v37 = (unsigned __int8)v35[10];
            v38 = (char *)v36 + 40 * ((bits >> 45) - 4 * v34);
            v39 = (unsigned __int8)*((_QWORD *)v38 + 10);
            if ( v39 == v37 )
              v40 = (__int64)v35[8] > *((_QWORD *)v38 + 8);
            else
              v40 = v39 < v37;
          }
          if ( !v40 )
            break;
          _First[v9] = _First[v28];
          v9 = (v9 - 1) >> 1;
        }
        while ( v5 < v28 );
      }
      v4 = v45;
      v7 = v44;
      _First[v9].bits = bits;
      v6 = v45 - 1;
    }
    while ( v5 > 0 );
  }
}

/*
==============
std::_Make_heap_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>
==============
*/
void std::_Make_heap_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, StreamMeshLoadingPredicate _Pred)
{
  signed __int64 v4; 
  signed __int64 v5; 
  signed __int64 v6; 
  __int64 v7; 
  unsigned __int64 bits; 
  signed __int64 v9; 
  __int64 v10; 
  __int64 v11; 
  unsigned __int64 v12; 
  XModelSurfs *XModelSurfsAtIndex; 
  XModelSurfs *v14; 
  __int64 v15; 
  XPakEntryInfo *p_xpakEntry; 
  unsigned __int64 v17; 
  bool v18; 
  __int64 v19; 
  XModelSurfs *v20; 
  XModelSurfs *v21; 
  __int64 v22; 
  XPakEntryInfo *v23; 
  unsigned __int64 v24; 
  bool v25; 
  signed __int64 v26; 
  signed __int64 v27; 
  __int64 v28; 

  v4 = _Last - _First;
  v27 = v4;
  v5 = ((char *)_Last - (char *)_First) >> 4;
  if ( v5 > 0 )
  {
    v6 = v4 - 1;
    v7 = (v4 - 1) >> 1;
    v28 = v7;
    v26 = v4 - 1;
    do
    {
      bits = _First[--v5].bits;
      v9 = v5;
      v10 = v5;
      if ( v5 < v7 )
      {
        do
        {
          v11 = 2 * v10;
          v12 = _First[2 * v10 + 2].bits;
          if ( (((unsigned __int8)(_First[v11 + 1].bits >> 44) ^ (unsigned __int8)(v12 >> 44)) & 1) != 0 )
          {
            v18 = (_First[v11 + 1].bits & 0x100000000000i64) != 0;
          }
          else
          {
            XModelSurfsAtIndex = DB_GetXModelSurfsAtIndex(v12 >> 45);
            v14 = DB_GetXModelSurfsAtIndex(_First[v11 + 1].bits >> 45);
            v15 = *((_QWORD *)&v14->xpakEntry + 3);
            p_xpakEntry = &v14->xpakEntry;
            v17 = (unsigned __int8)*((_QWORD *)&XModelSurfsAtIndex->xpakEntry + 3);
            if ( (unsigned __int8)v15 == v17 )
              v18 = XModelSurfsAtIndex->xpakEntry.offset > p_xpakEntry->offset;
            else
              v18 = (unsigned __int8)v15 < v17;
          }
          v10 = !v18 + v11 + 1;
          _First[v9] = _First[v10];
          v9 = v10;
        }
        while ( v10 < v7 );
        v4 = v27;
        v6 = v26;
      }
      if ( v10 == v7 && (v4 & 1) == 0 )
      {
        _First[v9] = _First[v4 - 1];
        v9 = v6;
      }
      v19 = (v9 - 1) >> 1;
      if ( v5 < v9 )
      {
        do
        {
          if ( ((_First[v19].bits >> 44) & 1) == ((bits & 0x100000000000i64) != 0) )
          {
            v20 = DB_GetXModelSurfsAtIndex(_First[v19].bits >> 45);
            v21 = DB_GetXModelSurfsAtIndex(bits >> 45);
            v22 = *((_QWORD *)&v21->xpakEntry + 3);
            v23 = &v21->xpakEntry;
            v24 = (unsigned __int8)*((_QWORD *)&v20->xpakEntry + 3);
            if ( (unsigned __int8)v22 == v24 )
              v25 = v20->xpakEntry.offset > v23->offset;
            else
              v25 = (unsigned __int8)v22 < v24;
          }
          else
          {
            v25 = (bits & 0x100000000000i64) != 0;
          }
          if ( !v25 )
            break;
          _First[v9] = _First[v19];
          v9 = v19;
          v19 = (v19 - 1) >> 1;
        }
        while ( v5 < v9 );
        v7 = v28;
      }
      v4 = v27;
      _First[v9].bits = bits;
      v6 = v27 - 1;
    }
    while ( v5 > 0 );
  }
}

/*
==============
std::_Med3_unchecked<StreamSortKeyPacked *,SortKeyPartialPredicate>
==============
*/
void std::_Med3_unchecked<StreamSortKeyPacked *,SortKeyPartialPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Mid, StreamSortKeyPacked *_Last, SortKeyPartialPredicate _Pred)
{
  unsigned __int64 bits; 
  unsigned __int64 v6; 
  unsigned __int64 v8; 
  unsigned __int64 v9; 

  bits = _Mid->bits;
  v6 = _First->bits;
  if ( (_Mid->bits & 0xFFFFFFFFFFFi64) > (v6 & 0xFFFFFFFFFFFi64) )
  {
    _Mid->bits = v6;
    _First->bits = bits;
    bits = _Mid->bits;
  }
  v8 = _Last->bits;
  v9 = _Last->bits & 0xFFFFFFFFFFFi64;
  if ( v9 > (bits & 0xFFFFFFFFFFFi64) )
  {
    _Last->bits = bits;
    _Mid->bits = v8;
    if ( v9 > (_First->bits & 0xFFFFFFFFFFFi64) )
    {
      _Mid->0 = _First->0;
      _First->bits = v8;
    }
  }
}

/*
==============
std::_Med3_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>
==============
*/
void std::_Med3_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Mid, StreamSortKeyPacked *_Last, StreamGenericLoadingPredicate _Pred)
{
  StreamKey *StreamKeyAtIndex; 
  StreamKey *v8; 
  unsigned __int64 v9; 
  unsigned __int64 v10; 
  bool v11; 
  unsigned __int64 bits; 
  StreamKey *v13; 
  StreamKey *v14; 
  unsigned __int64 v15; 
  unsigned __int64 v16; 
  bool v17; 
  unsigned __int64 v18; 
  unsigned __int64 v19; 
  StreamGenericLoadingPredicate v20; 

  if ( (((unsigned __int8)(_First->bits >> 44) ^ (unsigned __int8)(_Mid->bits >> 44)) & 1) != 0 )
  {
    v11 = (_First->bits & 0x100000000000i64) != 0;
  }
  else
  {
    StreamKeyAtIndex = DB_GetStreamKeyAtIndex(_Mid->bits >> 45);
    v8 = DB_GetStreamKeyAtIndex(_First->bits >> 45);
    v9 = (unsigned __int8)*((_QWORD *)&StreamKeyAtIndex->xpakInfo + 3);
    v10 = (unsigned __int8)*((_QWORD *)&v8->xpakInfo + 3);
    if ( v10 == v9 )
      v11 = StreamKeyAtIndex->xpakInfo.offset > v8->xpakInfo.offset;
    else
      v11 = v10 < v9;
  }
  if ( v11 )
  {
    bits = _Mid->bits;
    _Mid->0 = _First->0;
    _First->bits = bits;
  }
  if ( (((unsigned __int8)(_Mid->bits >> 44) ^ (unsigned __int8)(_Last->bits >> 44)) & 1) != 0 )
  {
    v17 = (_Mid->bits & 0x100000000000i64) != 0;
  }
  else
  {
    v13 = DB_GetStreamKeyAtIndex(_Last->bits >> 45);
    v14 = DB_GetStreamKeyAtIndex(_Mid->bits >> 45);
    v15 = (unsigned __int8)*((_QWORD *)&v13->xpakInfo + 3);
    v16 = (unsigned __int8)*((_QWORD *)&v14->xpakInfo + 3);
    if ( v16 == v15 )
      v17 = v13->xpakInfo.offset > v14->xpakInfo.offset;
    else
      v17 = v16 < v15;
  }
  if ( v17 )
  {
    v18 = _Last->bits;
    _Last->0 = _Mid->0;
    _Mid->bits = v18;
    if ( StreamGenericLoadingPredicate::operator()(&v20, _Mid, _First) )
    {
      v19 = _Mid->bits;
      _Mid->0 = _First->0;
      _First->bits = v19;
    }
  }
}

/*
==============
std::_Med3_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>
==============
*/
void std::_Med3_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Mid, StreamSortKeyPacked *_Last, StreamImageLoadingPredicate _Pred)
{
  unsigned __int64 bits; 
  unsigned __int64 v8; 
  unsigned __int64 v9; 
  StreamImageLoadingPredicate v10; 

  if ( StreamImageLoadingPredicate::operator()(&v10, _Mid, _First) )
  {
    bits = _Mid->bits;
    _Mid->0 = _First->0;
    _First->bits = bits;
  }
  if ( StreamImageLoadingPredicate::operator()(&v10, _Last, _Mid) )
  {
    v8 = _Last->bits;
    _Last->0 = _Mid->0;
    _Mid->bits = v8;
    if ( StreamImageLoadingPredicate::operator()(&v10, _Mid, _First) )
    {
      v9 = _Mid->bits;
      _Mid->0 = _First->0;
      _First->bits = v9;
    }
  }
}

/*
==============
std::_Med3_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>
==============
*/
void std::_Med3_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Mid, StreamSortKeyPacked *_Last, StreamMeshLoadingPredicate _Pred)
{
  XModelSurfs *XModelSurfsAtIndex; 
  XModelSurfs *v8; 
  unsigned __int64 v9; 
  unsigned __int64 v10; 
  bool v11; 
  unsigned __int64 bits; 
  XModelSurfs *v13; 
  XModelSurfs *v14; 
  unsigned __int64 v15; 
  unsigned __int64 v16; 
  bool v17; 
  unsigned __int64 v18; 
  unsigned __int64 v19; 
  StreamMeshLoadingPredicate v20; 

  if ( (((unsigned __int8)(_First->bits >> 44) ^ (unsigned __int8)(_Mid->bits >> 44)) & 1) != 0 )
  {
    v11 = (_First->bits & 0x100000000000i64) != 0;
  }
  else
  {
    XModelSurfsAtIndex = DB_GetXModelSurfsAtIndex(_Mid->bits >> 45);
    v8 = DB_GetXModelSurfsAtIndex(_First->bits >> 45);
    v9 = (unsigned __int8)*((_QWORD *)&XModelSurfsAtIndex->xpakEntry + 3);
    v10 = (unsigned __int8)*((_QWORD *)&v8->xpakEntry + 3);
    if ( v10 == v9 )
      v11 = XModelSurfsAtIndex->xpakEntry.offset > v8->xpakEntry.offset;
    else
      v11 = v10 < v9;
  }
  if ( v11 )
  {
    bits = _Mid->bits;
    _Mid->0 = _First->0;
    _First->bits = bits;
  }
  if ( (((unsigned __int8)(_Mid->bits >> 44) ^ (unsigned __int8)(_Last->bits >> 44)) & 1) != 0 )
  {
    v17 = (_Mid->bits & 0x100000000000i64) != 0;
  }
  else
  {
    v13 = DB_GetXModelSurfsAtIndex(_Last->bits >> 45);
    v14 = DB_GetXModelSurfsAtIndex(_Mid->bits >> 45);
    v15 = (unsigned __int8)*((_QWORD *)&v13->xpakEntry + 3);
    v16 = (unsigned __int8)*((_QWORD *)&v14->xpakEntry + 3);
    if ( v16 == v15 )
      v17 = v13->xpakEntry.offset > v14->xpakEntry.offset;
    else
      v17 = v16 < v15;
  }
  if ( v17 )
  {
    v18 = _Last->bits;
    _Last->0 = _Mid->0;
    _Mid->bits = v18;
    if ( StreamMeshLoadingPredicate::operator()(&v20, _Mid, _First) )
    {
      v19 = _Mid->bits;
      _Mid->0 = _First->0;
      _First->bits = v19;
    }
  }
}

/*
==============
std::_Partition_by_median_guess_unchecked<StreamSortKeyPacked *,SortKeyPartialPredicate>
==============
*/
std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> *std::_Partition_by_median_guess_unchecked<StreamSortKeyPacked *,SortKeyPartialPredicate>(std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> *result, StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, SortKeyPartialPredicate _Pred)
{
  StreamSortKeyPacked *v4; 
  std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> *v5; 
  StreamSortKeyPacked *v9; 
  signed __int64 v10; 
  __int64 v11; 
  unsigned __int64 v12; 
  __int64 v13; 
  StreamSortKeyPacked *v14; 
  StreamSortKeyPacked *v15; 
  StreamSortKeyPacked *v16; 
  unsigned __int64 *v17; 
  StreamSortKeyPacked *v18; 
  unsigned __int64 v19; 
  unsigned __int64 v20; 
  unsigned __int64 v21; 
  unsigned __int64 v22; 
  StreamSortKeyPacked *v23; 
  StreamSortKeyPacked *v24; 
  unsigned __int64 v25; 
  unsigned __int64 v26; 
  unsigned __int64 bits; 
  bool v28; 
  StreamSortKeyPacked *v29; 
  unsigned __int64 v30; 
  unsigned __int64 v31; 
  StreamSortKeyPacked v32; 
  StreamSortKeyPacked v33; 
  StreamSortKeyPacked v34; 
  unsigned __int64 v35; 
  unsigned __int64 v36; 
  StreamSortKeyPacked v37; 
  unsigned __int64 v38; 
  std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> *v39; 

  v4 = _Last - 1;
  v5 = result;
  v9 = &_First[((char *)_Last - (char *)_First) >> 4];
  v10 = &_Last[-1] - _First;
  if ( v10 <= 40 )
  {
    std::_Med3_unchecked<StreamSortKeyPacked *,SortKeyPartialPredicate>(_First, v9, v4, _Pred);
  }
  else
  {
    v11 = (v10 + 1) >> 3;
    v12 = 16 * v11;
    v13 = 8 * v11;
    v14 = &_First[v11];
    std::_Med3_unchecked<StreamSortKeyPacked *,SortKeyPartialPredicate>(_First, v14, &_First[2 * v11], _Pred);
    std::_Med3_unchecked<StreamSortKeyPacked *,SortKeyPartialPredicate>(&v9[v13 / 0xFFFFFFFFFFFFFFF8ui64], v9, &v9[(unsigned __int64)v13 / 8], _Pred);
    v15 = &v4[v13 / 0xFFFFFFFFFFFFFFF8ui64];
    std::_Med3_unchecked<StreamSortKeyPacked *,SortKeyPartialPredicate>(&_Last[v12 / 0xFFFFFFFFFFFFFFF8ui64 - 1], v15, _Last - 1, _Pred);
    std::_Med3_unchecked<StreamSortKeyPacked *,SortKeyPartialPredicate>(v14, v9, v15, _Pred);
    v5 = result;
  }
  v16 = v9 + 1;
  v17 = (unsigned __int64 *)v9;
  if ( _First < v9 )
  {
    v18 = v9;
    do
    {
      v17 = (unsigned __int64 *)v18;
      v19 = v9[-1].bits & 0xFFFFFFFFFFFi64;
      v20 = v9->bits & 0xFFFFFFFFFFFi64;
      if ( v19 > v20 )
        break;
      if ( v19 < v20 )
        break;
      v9 = v18 - 1;
      v18 = v9;
      v17 = (unsigned __int64 *)v9;
    }
    while ( _First < v9 );
  }
  if ( v16 < _Last )
  {
    v21 = *v17 & 0xFFFFFFFFFFFi64;
    do
    {
      v22 = v16->bits & 0xFFFFFFFFFFFi64;
      if ( v22 > v21 )
        break;
      if ( v22 < v21 )
        break;
      ++v16;
    }
    while ( v16 < _Last );
  }
  v23 = v16;
  v24 = v9;
  while ( 1 )
  {
    while ( 1 )
    {
      for ( ; v23 < _Last; ++v23 )
      {
        v25 = v23->bits & 0xFFFFFFFFFFFi64;
        v26 = v9->bits & 0xFFFFFFFFFFFi64;
        if ( v26 <= v25 )
        {
          if ( v26 < v25 )
            break;
          if ( v16 != v23 )
          {
            bits = v16->bits;
            v16->0 = v23->0;
            v23->bits = bits;
          }
          ++v16;
        }
      }
      v28 = v24 == _First;
      if ( v24 > _First )
      {
        v29 = v24 - 1;
        do
        {
          v30 = v29->bits & 0xFFFFFFFFFFFi64;
          v31 = v9->bits & 0xFFFFFFFFFFFi64;
          if ( v30 <= v31 )
          {
            if ( v30 < v31 )
              break;
            if ( --v9 != v29 )
            {
              v32.0 = ($FD3C46332B1196AF8F5C8C522E71774D)v9->bits;
              v9->0 = v29->0;
              v29->0 = v32.0;
            }
          }
          --v24;
          --v29;
        }
        while ( _First < v24 );
        v28 = v24 == _First;
      }
      if ( v28 )
        break;
      --v24;
      if ( v23 == _Last )
      {
        if ( v24 != --v9 )
        {
          v35 = v24->bits;
          v24->0 = v9->0;
          v9->bits = v35;
        }
        v36 = v16[-1].bits;
        --v16;
        v37.0 = ($FD3C46332B1196AF8F5C8C522E71774D)v9->bits;
        v9->bits = v36;
        v16->0 = v37.0;
      }
      else
      {
        v38 = v23->bits;
        v23->0 = v24->0;
        ++v23;
        v24->bits = v38;
      }
    }
    if ( v23 == _Last )
      break;
    if ( v16 != v23 )
    {
      v33.0 = ($FD3C46332B1196AF8F5C8C522E71774D)v9->bits;
      v9->0 = v16->0;
      v16->0 = v33.0;
    }
    ++v16;
    v34.0 = ($FD3C46332B1196AF8F5C8C522E71774D)v9->bits;
    v9->0 = v23->0;
    ++v9;
    v23->0 = v34.0;
    ++v23;
  }
  v5->first = v9;
  v39 = v5;
  v5->second = v16;
  return v39;
}

/*
==============
std::_Partition_by_median_guess_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>
==============
*/
std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> *std::_Partition_by_median_guess_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>(std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> *result, StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, StreamGenericLoadingPredicate _Pred)
{
  StreamSortKeyPacked *v6; 
  signed __int64 v7; 
  __int64 v8; 
  unsigned __int64 v9; 
  unsigned __int64 v10; 
  StreamSortKeyPacked *v11; 
  StreamSortKeyPacked *v12; 
  StreamSortKeyPacked *v13; 
  StreamSortKeyPacked *v14; 
  unsigned __int64 *v15; 
  StreamKey *StreamKeyAtIndex; 
  StreamKey *v17; 
  unsigned __int64 v18; 
  unsigned __int64 v19; 
  bool v20; 
  StreamKey *v21; 
  StreamKey *v22; 
  unsigned __int64 v23; 
  unsigned __int64 v24; 
  bool v25; 
  StreamKey *v26; 
  StreamKey *v27; 
  unsigned __int64 v28; 
  unsigned __int64 v29; 
  bool v30; 
  StreamKey *v31; 
  StreamKey *v32; 
  unsigned __int64 v33; 
  unsigned __int64 v34; 
  bool v35; 
  StreamSortKeyPacked *i; 
  StreamKey *v37; 
  StreamKey *v38; 
  unsigned __int64 v39; 
  unsigned __int64 v40; 
  bool v41; 
  StreamKey *v42; 
  StreamKey *v43; 
  unsigned __int64 v44; 
  unsigned __int64 v45; 
  bool v46; 
  unsigned __int64 bits; 
  bool v48; 
  StreamSortKeyPacked *v49; 
  StreamKey *v50; 
  StreamKey *v51; 
  unsigned __int64 v52; 
  unsigned __int64 v53; 
  bool v54; 
  StreamKey *v55; 
  StreamKey *v56; 
  unsigned __int64 v57; 
  unsigned __int64 v58; 
  bool v59; 
  StreamSortKeyPacked v60; 
  StreamSortKeyPacked v61; 
  StreamSortKeyPacked v62; 
  unsigned __int64 v63; 
  unsigned __int64 v64; 
  StreamSortKeyPacked v65; 
  unsigned __int64 v66; 
  std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> *v67; 

  v6 = &_First[((char *)_Last - (char *)_First) >> 4];
  v7 = &_Last[-1] - _First;
  if ( v7 <= 40 )
  {
    v12 = _First;
    std::_Med3_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>(_First, v6, _Last - 1, _Pred);
  }
  else
  {
    v8 = (v7 + 1) >> 3;
    v9 = 16 * v8;
    v10 = 8 * v8;
    v11 = &_First[v8];
    std::_Med3_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>(_First, v11, &_First[2 * v8], _Pred);
    std::_Med3_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>(&v6[v10 / 0xFFFFFFFFFFFFFFF8ui64], v6, &v6[v10 / 8], _Pred);
    std::_Med3_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>(&_Last[v9 / 0xFFFFFFFFFFFFFFF8ui64 - 1], &_Last[v10 / 0xFFFFFFFFFFFFFFF8ui64 - 1], _Last - 1, _Pred);
    std::_Med3_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>(v11, v6, &_Last[v10 / 0xFFFFFFFFFFFFFFF8ui64 - 1], _Pred);
    v12 = _First;
  }
  v13 = v6 + 1;
  v14 = v6;
  if ( v12 < v6 )
  {
    v15 = (unsigned __int64 *)v6;
    do
    {
      if ( (((unsigned __int8)(*v15 >> 44) ^ (unsigned __int8)(v6[-1].bits >> 44)) & 1) != 0 )
      {
        v20 = (*v15 & 0x100000000000i64) != 0;
      }
      else
      {
        StreamKeyAtIndex = DB_GetStreamKeyAtIndex(v6[-1].bits >> 45);
        v17 = DB_GetStreamKeyAtIndex(*v15 >> 45);
        v18 = (unsigned __int8)*((_QWORD *)&StreamKeyAtIndex->xpakInfo + 3);
        v19 = (unsigned __int8)*((_QWORD *)&v17->xpakInfo + 3);
        if ( v19 == v18 )
          v20 = StreamKeyAtIndex->xpakInfo.offset > v17->xpakInfo.offset;
        else
          v20 = v19 < v18;
      }
      v14 = (StreamSortKeyPacked *)v15;
      if ( v20 )
        break;
      if ( (((unsigned __int8)(v6[-1].bits >> 44) ^ (unsigned __int8)(*v15 >> 44)) & 1) != 0 )
      {
        v25 = (v6[-1].bits & 0x100000000000i64) != 0;
      }
      else
      {
        v21 = DB_GetStreamKeyAtIndex(*v15 >> 45);
        v22 = DB_GetStreamKeyAtIndex(v6[-1].bits >> 45);
        v23 = (unsigned __int8)*((_QWORD *)&v21->xpakInfo + 3);
        v24 = (unsigned __int8)*((_QWORD *)&v22->xpakInfo + 3);
        v25 = v24 == v23 ? v21->xpakInfo.offset > v22->xpakInfo.offset : v24 < v23;
      }
      if ( v25 )
        break;
      v6 = (StreamSortKeyPacked *)(v15 - 1);
      v15 = (unsigned __int64 *)v6;
      v14 = v6;
    }
    while ( v12 < v6 );
  }
  for ( ; v13 < _Last; ++v13 )
  {
    if ( (((unsigned __int8)(v14->bits >> 44) ^ (unsigned __int8)(v13->bits >> 44)) & 1) != 0 )
    {
      v30 = (v14->bits & 0x100000000000i64) != 0;
    }
    else
    {
      v26 = DB_GetStreamKeyAtIndex(v13->bits >> 45);
      v27 = DB_GetStreamKeyAtIndex(v14->bits >> 45);
      v28 = (unsigned __int8)*((_QWORD *)&v26->xpakInfo + 3);
      v29 = (unsigned __int8)*((_QWORD *)&v27->xpakInfo + 3);
      if ( v29 == v28 )
        v30 = v26->xpakInfo.offset > v27->xpakInfo.offset;
      else
        v30 = v29 < v28;
    }
    if ( v30 )
      break;
    if ( (((unsigned __int8)(v13->bits >> 44) ^ (unsigned __int8)(v14->bits >> 44)) & 1) != 0 )
    {
      v35 = (v13->bits & 0x100000000000i64) != 0;
    }
    else
    {
      v31 = DB_GetStreamKeyAtIndex(v14->bits >> 45);
      v32 = DB_GetStreamKeyAtIndex(v13->bits >> 45);
      v33 = (unsigned __int8)*((_QWORD *)&v31->xpakInfo + 3);
      v34 = (unsigned __int8)*((_QWORD *)&v32->xpakInfo + 3);
      v35 = v34 == v33 ? v31->xpakInfo.offset > v32->xpakInfo.offset : v34 < v33;
    }
    if ( v35 )
      break;
  }
  while ( 2 )
  {
    while ( 2 )
    {
      for ( i = v13; i < _Last; ++i )
      {
        if ( (((unsigned __int8)(i->bits >> 44) ^ (unsigned __int8)(v6->bits >> 44)) & 1) != 0 )
        {
          v41 = (i->bits & 0x100000000000i64) != 0;
        }
        else
        {
          v37 = DB_GetStreamKeyAtIndex(v6->bits >> 45);
          v38 = DB_GetStreamKeyAtIndex(i->bits >> 45);
          v39 = (unsigned __int8)*((_QWORD *)&v37->xpakInfo + 3);
          v40 = (unsigned __int8)*((_QWORD *)&v38->xpakInfo + 3);
          if ( v40 == v39 )
            v41 = v37->xpakInfo.offset > v38->xpakInfo.offset;
          else
            v41 = v40 < v39;
        }
        if ( !v41 )
        {
          if ( (((unsigned __int8)(v6->bits >> 44) ^ (unsigned __int8)(i->bits >> 44)) & 1) != 0 )
          {
            v46 = (v6->bits & 0x100000000000i64) != 0;
          }
          else
          {
            v42 = DB_GetStreamKeyAtIndex(i->bits >> 45);
            v43 = DB_GetStreamKeyAtIndex(v6->bits >> 45);
            v44 = (unsigned __int8)*((_QWORD *)&v42->xpakInfo + 3);
            v45 = (unsigned __int8)*((_QWORD *)&v43->xpakInfo + 3);
            if ( v45 == v44 )
              v46 = v42->xpakInfo.offset > v43->xpakInfo.offset;
            else
              v46 = v45 < v44;
          }
          if ( v46 )
            break;
          if ( v13 != i )
          {
            bits = v13->bits;
            v13->0 = i->0;
            i->bits = bits;
          }
          ++v13;
        }
      }
      v48 = v14 == v12;
      if ( v14 <= v12 )
        goto LABEL_69;
      v49 = v14 - 1;
      while ( 1 )
      {
        if ( (((unsigned __int8)(v6->bits >> 44) ^ (unsigned __int8)(v49->bits >> 44)) & 1) != 0 )
        {
          v54 = (v6->bits & 0x100000000000i64) != 0;
        }
        else
        {
          v50 = DB_GetStreamKeyAtIndex(v49->bits >> 45);
          v51 = DB_GetStreamKeyAtIndex(v6->bits >> 45);
          v52 = (unsigned __int8)*((_QWORD *)&v50->xpakInfo + 3);
          v53 = (unsigned __int8)*((_QWORD *)&v51->xpakInfo + 3);
          v54 = v53 == v52 ? v50->xpakInfo.offset > v51->xpakInfo.offset : v53 < v52;
        }
        if ( !v54 )
          break;
LABEL_67:
        --v14;
        --v49;
        if ( v12 >= v14 )
          goto LABEL_68;
      }
      if ( (((unsigned __int8)(v49->bits >> 44) ^ (unsigned __int8)(v6->bits >> 44)) & 1) != 0 )
      {
        v59 = (v49->bits & 0x100000000000i64) != 0;
      }
      else
      {
        v55 = DB_GetStreamKeyAtIndex(v6->bits >> 45);
        v56 = DB_GetStreamKeyAtIndex(v49->bits >> 45);
        v57 = (unsigned __int8)*((_QWORD *)&v55->xpakInfo + 3);
        v58 = (unsigned __int8)*((_QWORD *)&v56->xpakInfo + 3);
        if ( v58 == v57 )
          v59 = v55->xpakInfo.offset > v56->xpakInfo.offset;
        else
          v59 = v58 < v57;
      }
      if ( !v59 )
      {
        if ( --v6 != v49 )
        {
          v60.0 = ($FD3C46332B1196AF8F5C8C522E71774D)v6->bits;
          v6->0 = v49->0;
          v49->0 = v60.0;
        }
        goto LABEL_67;
      }
LABEL_68:
      v48 = v14 == v12;
LABEL_69:
      if ( !v48 )
      {
        --v14;
        if ( i == _Last )
        {
          if ( v14 != --v6 )
          {
            v63 = v14->bits;
            v14->0 = v6->0;
            v6->bits = v63;
          }
          v64 = v13[-1].bits;
          --v13;
          v65.0 = ($FD3C46332B1196AF8F5C8C522E71774D)v6->bits;
          v6->bits = v64;
          v13->0 = v65.0;
        }
        else
        {
          v66 = i->bits;
          i->0 = v14->0;
          ++i;
          v14->bits = v66;
        }
        continue;
      }
      break;
    }
    if ( i != _Last )
    {
      if ( v13 != i )
      {
        v61.0 = ($FD3C46332B1196AF8F5C8C522E71774D)v6->bits;
        v6->0 = v13->0;
        v13->0 = v61.0;
      }
      ++v13;
      v62.0 = ($FD3C46332B1196AF8F5C8C522E71774D)v6->bits;
      v6->0 = i->0;
      ++v6;
      i->0 = v62.0;
      ++i;
      continue;
    }
    break;
  }
  v67 = result;
  result->first = v6;
  result->second = v13;
  return v67;
}

/*
==============
std::_Partition_by_median_guess_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>
==============
*/
std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> *std::_Partition_by_median_guess_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>(std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> *result, StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, StreamImageLoadingPredicate _Pred)
{
  StreamSortKeyPacked *v4; 
  StreamImageLoadingPredicate v5; 
  StreamSortKeyPacked *v7; 
  StreamSortKeyPacked *v8; 
  signed __int64 v9; 
  __int64 v10; 
  __int64 v11; 
  __int64 v12; 
  StreamSortKeyPacked *v13; 
  StreamSortKeyPacked *v14; 
  StreamSortKeyPacked *v15; 
  unsigned __int64 *v16; 
  unsigned __int64 v17; 
  unsigned int v18; 
  __int64 v19; 
  GfxImage *GfxImageAtIndex; 
  unsigned __int64 v21; 
  unsigned int v22; 
  char *v23; 
  __int64 v24; 
  GfxImage *v25; 
  unsigned __int64 v26; 
  char *v27; 
  unsigned __int64 v28; 
  bool v29; 
  unsigned __int64 v30; 
  unsigned int v31; 
  __int64 v32; 
  GfxImage *v33; 
  unsigned __int64 v34; 
  unsigned int v35; 
  char *v36; 
  __int64 v37; 
  GfxImage *v38; 
  unsigned __int64 v39; 
  char *v40; 
  unsigned __int64 v41; 
  bool v42; 
  StreamSortKeyPacked *v43; 
  unsigned __int64 v44; 
  unsigned int v45; 
  __int64 v46; 
  GfxImage *v47; 
  unsigned __int64 v48; 
  unsigned int v49; 
  char *v50; 
  __int64 v51; 
  GfxImage *v52; 
  unsigned __int64 v53; 
  char *v54; 
  unsigned __int64 v55; 
  bool v56; 
  unsigned __int64 v57; 
  unsigned int v58; 
  __int64 v59; 
  GfxImage *v60; 
  unsigned __int64 v61; 
  unsigned int v62; 
  char *v63; 
  __int64 v64; 
  GfxImage *v65; 
  unsigned __int64 v66; 
  char *v67; 
  unsigned __int64 v68; 
  bool v69; 
  StreamSortKeyPacked *v70; 
  StreamSortKeyPacked *v71; 
  unsigned __int64 v72; 
  unsigned int v73; 
  __int64 v74; 
  GfxImage *v75; 
  unsigned __int64 v76; 
  unsigned int v77; 
  char *v78; 
  __int64 v79; 
  GfxImage *v80; 
  unsigned __int64 v81; 
  char *v82; 
  unsigned __int64 v83; 
  bool v84; 
  unsigned __int64 v85; 
  unsigned int v86; 
  __int64 v87; 
  GfxImage *v88; 
  unsigned __int64 v89; 
  unsigned int v90; 
  char *v91; 
  __int64 v92; 
  GfxImage *v93; 
  unsigned __int64 v94; 
  char *v95; 
  unsigned __int64 v96; 
  bool v97; 
  unsigned __int64 bits; 
  bool v99; 
  StreamSortKeyPacked *v100; 
  unsigned __int64 v101; 
  unsigned int v102; 
  __int64 v103; 
  GfxImage *v104; 
  unsigned __int64 v105; 
  unsigned int v106; 
  char *v107; 
  __int64 v108; 
  GfxImage *v109; 
  unsigned __int64 v110; 
  char *v111; 
  unsigned __int64 v112; 
  bool v113; 
  unsigned __int64 v114; 
  unsigned int v115; 
  __int64 v116; 
  GfxImage *v117; 
  unsigned __int64 v118; 
  unsigned int v119; 
  char *v120; 
  __int64 v121; 
  GfxImage *v122; 
  unsigned __int64 v123; 
  char *v124; 
  unsigned __int64 v125; 
  bool v126; 
  StreamSortKeyPacked v127; 
  StreamSortKeyPacked v128; 
  StreamSortKeyPacked v129; 
  unsigned __int64 v130; 
  unsigned __int64 v131; 
  StreamSortKeyPacked v132; 
  unsigned __int64 v133; 
  std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> *v134; 
  __int64 v135; 
  __int64 v136; 
  StreamSortKeyPacked *v137; 
  StreamSortKeyPacked *v138; 
  StreamSortKeyPacked *v139; 

  v4 = _Last - 1;
  v5 = _Pred;
  v7 = _First;
  v8 = &_First[((char *)_Last - (char *)_First) >> 4];
  v9 = &_Last[-1] - _First;
  if ( v9 <= 40 )
  {
    v14 = _Last - 1;
  }
  else
  {
    v10 = (v9 + 1) >> 3;
    v11 = 16 * v10;
    v12 = 8 * v10;
    v13 = &_First[v10];
    std::_Med3_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>(_First, v13, &_First[2 * v10], _Pred);
    std::_Med3_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>(&v8[v12 / 0xFFFFFFFFFFFFFFF8ui64], v8, &v8[(unsigned __int64)v12 / 8], v5);
    std::_Med3_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>(&v4[v11 / 0xFFFFFFFFFFFFFFF8ui64], &v4[v12 / 0xFFFFFFFFFFFFFFF8ui64], v4, v5);
    _Pred = v5;
    v14 = &v4[v12 / 0xFFFFFFFFFFFFFFF8ui64];
    v7 = v13;
  }
  std::_Med3_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>(v7, v8, v14, _Pred);
  v15 = v8 + 1;
  v137 = v8 + 1;
  if ( _First < v8 )
  {
    v16 = (unsigned __int64 *)v8;
    do
    {
      if ( (((unsigned __int8)(*v16 >> 44) ^ (unsigned __int8)(v8[-1].bits >> 44)) & 1) != 0 )
      {
        v29 = (*v16 & 0x100000000000i64) != 0;
      }
      else
      {
        v17 = v8[-1].bits >> 45;
        v18 = (unsigned int)v17 >> 2;
        v19 = (unsigned int)v17 - 4 * ((unsigned int)v17 >> 2);
        if ( (unsigned int)v17 >= 0x50000 )
        {
          LODWORD(v136) = 327680;
          LODWORD(v135) = v8[-1].bits >> 45;
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v135, v136) )
            __debugbreak();
        }
        GfxImageAtIndex = DB_GetGfxImageAtIndex(v18);
        v21 = *v16 >> 45;
        v22 = (unsigned int)v21 >> 2;
        v23 = (char *)GfxImageAtIndex + 40 * v19;
        v24 = (unsigned int)v21 - 4 * ((unsigned int)v21 >> 2);
        if ( (unsigned int)v21 >= 0x50000 )
        {
          LODWORD(v136) = 327680;
          LODWORD(v135) = v21;
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v135, v136) )
            __debugbreak();
        }
        v25 = DB_GetGfxImageAtIndex(v22);
        v26 = (unsigned __int8)*((_QWORD *)v23 + 10);
        v27 = (char *)v25 + 40 * v24;
        v28 = (unsigned __int8)*((_QWORD *)v27 + 10);
        if ( v28 == v26 )
          v29 = *((_QWORD *)v23 + 8) > *((_QWORD *)v27 + 8);
        else
          v29 = v28 < v26;
      }
      if ( v29 )
        break;
      if ( (((unsigned __int8)(v8[-1].bits >> 44) ^ (unsigned __int8)(v8->bits >> 44)) & 1) != 0 )
      {
        v42 = (v8[-1].bits & 0x100000000000i64) != 0;
      }
      else
      {
        v30 = v8->bits >> 45;
        v31 = (unsigned int)v30 >> 2;
        v32 = (unsigned int)v30 - 4 * ((unsigned int)v30 >> 2);
        if ( (unsigned int)v30 >= 0x50000 )
        {
          LODWORD(v136) = 327680;
          LODWORD(v135) = v8->bits >> 45;
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v135, v136) )
            __debugbreak();
        }
        v33 = DB_GetGfxImageAtIndex(v31);
        v34 = v8[-1].bits >> 45;
        v35 = (unsigned int)v34 >> 2;
        v36 = (char *)v33 + 40 * v32;
        v37 = (unsigned int)v34 - 4 * ((unsigned int)v34 >> 2);
        if ( (unsigned int)v34 >= 0x50000 )
        {
          LODWORD(v136) = 327680;
          LODWORD(v135) = v34;
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v135, v136) )
            __debugbreak();
        }
        v38 = DB_GetGfxImageAtIndex(v35);
        v39 = (unsigned __int8)*((_QWORD *)v36 + 10);
        v40 = (char *)v38 + 40 * v37;
        v41 = (unsigned __int8)*((_QWORD *)v40 + 10);
        v42 = v41 == v39 ? *((_QWORD *)v36 + 8) > *((_QWORD *)v40 + 8) : v41 < v39;
      }
      if ( v42 )
        break;
      v16 = (unsigned __int64 *)--v8;
    }
    while ( _First < v8 );
    v15 = v137;
  }
  v43 = _Last;
  if ( v15 < _Last )
  {
    do
    {
      if ( (((unsigned __int8)(v8->bits >> 44) ^ (unsigned __int8)(v15->bits >> 44)) & 1) != 0 )
      {
        v56 = (v8->bits & 0x100000000000i64) != 0;
      }
      else
      {
        v44 = v15->bits >> 45;
        v45 = (unsigned int)v44 >> 2;
        v46 = (unsigned int)v44 - 4 * ((unsigned int)v44 >> 2);
        if ( (unsigned int)v44 >= 0x50000 )
        {
          LODWORD(v136) = 327680;
          LODWORD(v135) = v15->bits >> 45;
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v135, v136) )
            __debugbreak();
        }
        v47 = DB_GetGfxImageAtIndex(v45);
        v48 = v8->bits >> 45;
        v49 = (unsigned int)v48 >> 2;
        v50 = (char *)v47 + 40 * v46;
        v51 = (unsigned int)v48 - 4 * ((unsigned int)v48 >> 2);
        if ( (unsigned int)v48 >= 0x50000 )
        {
          LODWORD(v136) = 327680;
          LODWORD(v135) = v48;
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v135, v136) )
            __debugbreak();
        }
        v52 = DB_GetGfxImageAtIndex(v49);
        v53 = (unsigned __int8)*((_QWORD *)v50 + 10);
        v54 = (char *)v52 + 40 * v51;
        v55 = (unsigned __int8)*((_QWORD *)v54 + 10);
        if ( v55 == v53 )
          v56 = *((_QWORD *)v50 + 8) > *((_QWORD *)v54 + 8);
        else
          v56 = v55 < v53;
      }
      if ( v56 )
        break;
      if ( (((unsigned __int8)(v15->bits >> 44) ^ (unsigned __int8)(v8->bits >> 44)) & 1) != 0 )
      {
        v69 = (v15->bits & 0x100000000000i64) != 0;
      }
      else
      {
        v57 = v8->bits >> 45;
        v58 = (unsigned int)v57 >> 2;
        v59 = (unsigned int)v57 - 4 * ((unsigned int)v57 >> 2);
        if ( (unsigned int)v57 >= 0x50000 )
        {
          LODWORD(v136) = 327680;
          LODWORD(v135) = v8->bits >> 45;
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v135, v136) )
            __debugbreak();
        }
        v60 = DB_GetGfxImageAtIndex(v58);
        v61 = v15->bits >> 45;
        v62 = (unsigned int)v61 >> 2;
        v63 = (char *)v60 + 40 * v59;
        v64 = (unsigned int)v61 - 4 * ((unsigned int)v61 >> 2);
        if ( (unsigned int)v61 >= 0x50000 )
        {
          LODWORD(v136) = 327680;
          LODWORD(v135) = v61;
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v135, v136) )
            __debugbreak();
        }
        v65 = DB_GetGfxImageAtIndex(v62);
        v66 = (unsigned __int8)*((_QWORD *)v63 + 10);
        v67 = (char *)v65 + 40 * v64;
        v68 = (unsigned __int8)*((_QWORD *)v67 + 10);
        v69 = v68 == v66 ? *((_QWORD *)v63 + 8) > *((_QWORD *)v67 + 8) : v68 < v66;
      }
      if ( v69 )
        break;
      ++v15;
    }
    while ( v15 < _Last );
    v137 = v15;
  }
  v70 = v15;
  v138 = v8;
  v71 = v8;
  while ( 2 )
  {
    while ( 2 )
    {
      v139 = v70;
LABEL_61:
      if ( v70 < v43 )
      {
        while ( 1 )
        {
          if ( (((unsigned __int8)(v70->bits >> 44) ^ (unsigned __int8)(v8->bits >> 44)) & 1) != 0 )
          {
            v84 = (v70->bits & 0x100000000000i64) != 0;
          }
          else
          {
            v72 = v8->bits >> 45;
            v73 = (unsigned int)v72 >> 2;
            v74 = (unsigned int)v72 - 4 * ((unsigned int)v72 >> 2);
            if ( (unsigned int)v72 >= 0x50000 )
            {
              LODWORD(v136) = 327680;
              LODWORD(v135) = v8->bits >> 45;
              if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v135, v136) )
                __debugbreak();
            }
            v75 = DB_GetGfxImageAtIndex(v73);
            v76 = v70->bits >> 45;
            v77 = (unsigned int)v76 >> 2;
            v78 = (char *)v75 + 40 * v74;
            v79 = (unsigned int)v76 - 4 * ((unsigned int)v76 >> 2);
            if ( (unsigned int)v76 >= 0x50000 )
            {
              LODWORD(v136) = 327680;
              LODWORD(v135) = v76;
              if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v135, v136) )
                __debugbreak();
            }
            v80 = DB_GetGfxImageAtIndex(v77);
            v81 = (unsigned __int8)*((_QWORD *)v78 + 10);
            v82 = (char *)v80 + 40 * v79;
            v83 = (unsigned __int8)*((_QWORD *)v82 + 10);
            if ( v83 == v81 )
              v84 = *((_QWORD *)v78 + 8) > *((_QWORD *)v82 + 8);
            else
              v84 = v83 < v81;
          }
          if ( !v84 )
          {
            if ( (((unsigned __int8)(v8->bits >> 44) ^ (unsigned __int8)(v70->bits >> 44)) & 1) != 0 )
            {
              v97 = (v8->bits & 0x100000000000i64) != 0;
            }
            else
            {
              v85 = v70->bits >> 45;
              v86 = (unsigned int)v85 >> 2;
              v87 = (unsigned int)v85 - 4 * ((unsigned int)v85 >> 2);
              if ( (unsigned int)v85 >= 0x50000 )
              {
                LODWORD(v136) = 327680;
                LODWORD(v135) = v70->bits >> 45;
                if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v135, v136) )
                  __debugbreak();
              }
              v88 = DB_GetGfxImageAtIndex(v86);
              v89 = v8->bits >> 45;
              v90 = (unsigned int)v89 >> 2;
              v91 = (char *)v88 + 40 * v87;
              v92 = (unsigned int)v89 - 4 * ((unsigned int)v89 >> 2);
              if ( (unsigned int)v89 >= 0x50000 )
              {
                LODWORD(v136) = 327680;
                LODWORD(v135) = v89;
                if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v135, v136) )
                  __debugbreak();
              }
              v93 = DB_GetGfxImageAtIndex(v90);
              v94 = (unsigned __int8)*((_QWORD *)v91 + 10);
              v95 = (char *)v93 + 40 * v92;
              v96 = (unsigned __int8)*((_QWORD *)v95 + 10);
              if ( v96 == v94 )
                v97 = *((_QWORD *)v91 + 8) > *((_QWORD *)v95 + 8);
              else
                v97 = v96 < v94;
            }
            if ( v97 )
            {
LABEL_90:
              v71 = v138;
              v137 = v15;
              v139 = v70;
              break;
            }
            if ( v15 != v70 )
            {
              bits = v15->bits;
              v15->0 = v70->0;
              v70->bits = bits;
            }
            ++v15;
          }
          if ( ++v70 >= v43 )
            goto LABEL_90;
        }
      }
      v99 = v71 == _First;
      if ( v71 <= _First )
        goto LABEL_121;
      v100 = v71 - 1;
      do
      {
        if ( (((unsigned __int8)(v8->bits >> 44) ^ (unsigned __int8)(v100->bits >> 44)) & 1) != 0 )
        {
          v113 = (v8->bits & 0x100000000000i64) != 0;
        }
        else
        {
          v101 = v100->bits >> 45;
          v102 = (unsigned int)v101 >> 2;
          v103 = (unsigned int)v101 - 4 * ((unsigned int)v101 >> 2);
          if ( (unsigned int)v101 >= 0x50000 )
          {
            LODWORD(v136) = 327680;
            LODWORD(v135) = v100->bits >> 45;
            if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v135, v136) )
              __debugbreak();
          }
          v104 = DB_GetGfxImageAtIndex(v102);
          v105 = v8->bits >> 45;
          v106 = (unsigned int)v105 >> 2;
          v107 = (char *)v104 + 40 * v103;
          v108 = (unsigned int)v105 - 4 * ((unsigned int)v105 >> 2);
          if ( (unsigned int)v105 >= 0x50000 )
          {
            LODWORD(v136) = 327680;
            LODWORD(v135) = v105;
            if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v135, v136) )
              __debugbreak();
          }
          v109 = DB_GetGfxImageAtIndex(v106);
          v110 = (unsigned __int8)*((_QWORD *)v107 + 10);
          v111 = (char *)v109 + 40 * v108;
          v112 = (unsigned __int8)*((_QWORD *)v111 + 10);
          if ( v112 == v110 )
            v113 = *((_QWORD *)v107 + 8) > *((_QWORD *)v111 + 8);
          else
            v113 = v112 < v110;
        }
        if ( v113 )
          goto LABEL_119;
        if ( (((unsigned __int8)(v100->bits >> 44) ^ (unsigned __int8)(v8->bits >> 44)) & 1) != 0 )
        {
          v126 = (v100->bits & 0x100000000000i64) != 0;
        }
        else
        {
          v114 = v8->bits >> 45;
          v115 = (unsigned int)v114 >> 2;
          v116 = (unsigned int)v114 - 4 * ((unsigned int)v114 >> 2);
          if ( (unsigned int)v114 >= 0x50000 )
          {
            LODWORD(v136) = 327680;
            LODWORD(v135) = v8->bits >> 45;
            if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v135, v136) )
              __debugbreak();
          }
          v117 = DB_GetGfxImageAtIndex(v115);
          v118 = v100->bits >> 45;
          v119 = (unsigned int)v118 >> 2;
          v120 = (char *)v117 + 40 * v116;
          v121 = (unsigned int)v118 - 4 * ((unsigned int)v118 >> 2);
          if ( (unsigned int)v118 >= 0x50000 )
          {
            LODWORD(v136) = 327680;
            LODWORD(v135) = v118;
            if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v135, v136) )
              __debugbreak();
          }
          v122 = DB_GetGfxImageAtIndex(v119);
          v123 = (unsigned __int8)*((_QWORD *)v120 + 10);
          v124 = (char *)v122 + 40 * v121;
          v125 = (unsigned __int8)*((_QWORD *)v124 + 10);
          v126 = v125 == v123 ? *((_QWORD *)v120 + 8) > *((_QWORD *)v124 + 8) : v125 < v123;
        }
        if ( v126 )
          break;
        if ( --v8 != v100 )
        {
          v127.0 = ($FD3C46332B1196AF8F5C8C522E71774D)v8->bits;
          v8->0 = v100->0;
          v100->0 = v127.0;
        }
LABEL_119:
        --v71;
        --v100;
      }
      while ( _First < v71 );
      v70 = v139;
      v99 = v71 == _First;
      v15 = v137;
      v43 = _Last;
      v138 = v71;
LABEL_121:
      if ( !v99 )
      {
        v138 = --v71;
        if ( v70 != v43 )
        {
          v133 = v70->bits;
          v70->0 = v71->0;
          ++v70;
          v71->bits = v133;
          v138 = v71;
          continue;
        }
        if ( v71 != --v8 )
        {
          v130 = v71->bits;
          v71->0 = v8->0;
          v8->bits = v130;
        }
        v131 = v15[-1].bits;
        --v15;
        v132.0 = ($FD3C46332B1196AF8F5C8C522E71774D)v8->bits;
        v8->bits = v131;
        v137 = v15;
        v15->0 = v132.0;
        goto LABEL_61;
      }
      break;
    }
    if ( v70 != v43 )
    {
      if ( v15 != v70 )
      {
        v128.0 = ($FD3C46332B1196AF8F5C8C522E71774D)v8->bits;
        v8->0 = v15->0;
        v15->0 = v128.0;
      }
      ++v15;
      v129.0 = ($FD3C46332B1196AF8F5C8C522E71774D)v8->bits;
      v8->0 = v70->0;
      ++v8;
      v70->0 = v129.0;
      ++v70;
      v137 = v15;
      continue;
    }
    break;
  }
  v134 = result;
  result->first = v8;
  result->second = v15;
  return v134;
}

/*
==============
std::_Partition_by_median_guess_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>
==============
*/
std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> *std::_Partition_by_median_guess_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>(std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> *result, StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, StreamMeshLoadingPredicate _Pred)
{
  StreamSortKeyPacked *v6; 
  signed __int64 v7; 
  __int64 v8; 
  unsigned __int64 v9; 
  unsigned __int64 v10; 
  StreamSortKeyPacked *v11; 
  StreamSortKeyPacked *v12; 
  StreamSortKeyPacked *v13; 
  StreamSortKeyPacked *v14; 
  unsigned __int64 *v15; 
  XModelSurfs *XModelSurfsAtIndex; 
  XModelSurfs *v17; 
  unsigned __int64 v18; 
  unsigned __int64 v19; 
  bool v20; 
  XModelSurfs *v21; 
  XModelSurfs *v22; 
  unsigned __int64 v23; 
  unsigned __int64 v24; 
  bool v25; 
  XModelSurfs *v26; 
  XModelSurfs *v27; 
  unsigned __int64 v28; 
  unsigned __int64 v29; 
  bool v30; 
  XModelSurfs *v31; 
  XModelSurfs *v32; 
  unsigned __int64 v33; 
  unsigned __int64 v34; 
  bool v35; 
  StreamSortKeyPacked *i; 
  XModelSurfs *v37; 
  XModelSurfs *v38; 
  unsigned __int64 v39; 
  unsigned __int64 v40; 
  bool v41; 
  XModelSurfs *v42; 
  XModelSurfs *v43; 
  unsigned __int64 v44; 
  unsigned __int64 v45; 
  bool v46; 
  unsigned __int64 bits; 
  bool v48; 
  StreamSortKeyPacked *v49; 
  XModelSurfs *v50; 
  XModelSurfs *v51; 
  unsigned __int64 v52; 
  unsigned __int64 v53; 
  bool v54; 
  XModelSurfs *v55; 
  XModelSurfs *v56; 
  unsigned __int64 v57; 
  unsigned __int64 v58; 
  bool v59; 
  StreamSortKeyPacked v60; 
  StreamSortKeyPacked v61; 
  StreamSortKeyPacked v62; 
  unsigned __int64 v63; 
  unsigned __int64 v64; 
  StreamSortKeyPacked v65; 
  unsigned __int64 v66; 
  std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> *v67; 

  v6 = &_First[((char *)_Last - (char *)_First) >> 4];
  v7 = &_Last[-1] - _First;
  if ( v7 <= 40 )
  {
    v12 = _First;
    std::_Med3_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>(_First, v6, _Last - 1, _Pred);
  }
  else
  {
    v8 = (v7 + 1) >> 3;
    v9 = 16 * v8;
    v10 = 8 * v8;
    v11 = &_First[v8];
    std::_Med3_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>(_First, v11, &_First[2 * v8], _Pred);
    std::_Med3_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>(&v6[v10 / 0xFFFFFFFFFFFFFFF8ui64], v6, &v6[v10 / 8], _Pred);
    std::_Med3_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>(&_Last[v9 / 0xFFFFFFFFFFFFFFF8ui64 - 1], &_Last[v10 / 0xFFFFFFFFFFFFFFF8ui64 - 1], _Last - 1, _Pred);
    std::_Med3_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>(v11, v6, &_Last[v10 / 0xFFFFFFFFFFFFFFF8ui64 - 1], _Pred);
    v12 = _First;
  }
  v13 = v6 + 1;
  v14 = v6;
  if ( v12 < v6 )
  {
    v15 = (unsigned __int64 *)v6;
    do
    {
      if ( (((unsigned __int8)(*v15 >> 44) ^ (unsigned __int8)(v6[-1].bits >> 44)) & 1) != 0 )
      {
        v20 = (*v15 & 0x100000000000i64) != 0;
      }
      else
      {
        XModelSurfsAtIndex = DB_GetXModelSurfsAtIndex(v6[-1].bits >> 45);
        v17 = DB_GetXModelSurfsAtIndex(*v15 >> 45);
        v18 = (unsigned __int8)*((_QWORD *)&XModelSurfsAtIndex->xpakEntry + 3);
        v19 = (unsigned __int8)*((_QWORD *)&v17->xpakEntry + 3);
        if ( v19 == v18 )
          v20 = XModelSurfsAtIndex->xpakEntry.offset > v17->xpakEntry.offset;
        else
          v20 = v19 < v18;
      }
      v14 = (StreamSortKeyPacked *)v15;
      if ( v20 )
        break;
      if ( (((unsigned __int8)(v6[-1].bits >> 44) ^ (unsigned __int8)(*v15 >> 44)) & 1) != 0 )
      {
        v25 = (v6[-1].bits & 0x100000000000i64) != 0;
      }
      else
      {
        v21 = DB_GetXModelSurfsAtIndex(*v15 >> 45);
        v22 = DB_GetXModelSurfsAtIndex(v6[-1].bits >> 45);
        v23 = (unsigned __int8)*((_QWORD *)&v21->xpakEntry + 3);
        v24 = (unsigned __int8)*((_QWORD *)&v22->xpakEntry + 3);
        v25 = v24 == v23 ? v21->xpakEntry.offset > v22->xpakEntry.offset : v24 < v23;
      }
      if ( v25 )
        break;
      v6 = (StreamSortKeyPacked *)(v15 - 1);
      v15 = (unsigned __int64 *)v6;
      v14 = v6;
    }
    while ( v12 < v6 );
  }
  for ( ; v13 < _Last; ++v13 )
  {
    if ( (((unsigned __int8)(v14->bits >> 44) ^ (unsigned __int8)(v13->bits >> 44)) & 1) != 0 )
    {
      v30 = (v14->bits & 0x100000000000i64) != 0;
    }
    else
    {
      v26 = DB_GetXModelSurfsAtIndex(v13->bits >> 45);
      v27 = DB_GetXModelSurfsAtIndex(v14->bits >> 45);
      v28 = (unsigned __int8)*((_QWORD *)&v26->xpakEntry + 3);
      v29 = (unsigned __int8)*((_QWORD *)&v27->xpakEntry + 3);
      if ( v29 == v28 )
        v30 = v26->xpakEntry.offset > v27->xpakEntry.offset;
      else
        v30 = v29 < v28;
    }
    if ( v30 )
      break;
    if ( (((unsigned __int8)(v13->bits >> 44) ^ (unsigned __int8)(v14->bits >> 44)) & 1) != 0 )
    {
      v35 = (v13->bits & 0x100000000000i64) != 0;
    }
    else
    {
      v31 = DB_GetXModelSurfsAtIndex(v14->bits >> 45);
      v32 = DB_GetXModelSurfsAtIndex(v13->bits >> 45);
      v33 = (unsigned __int8)*((_QWORD *)&v31->xpakEntry + 3);
      v34 = (unsigned __int8)*((_QWORD *)&v32->xpakEntry + 3);
      v35 = v34 == v33 ? v31->xpakEntry.offset > v32->xpakEntry.offset : v34 < v33;
    }
    if ( v35 )
      break;
  }
  while ( 2 )
  {
    while ( 2 )
    {
      for ( i = v13; i < _Last; ++i )
      {
        if ( (((unsigned __int8)(i->bits >> 44) ^ (unsigned __int8)(v6->bits >> 44)) & 1) != 0 )
        {
          v41 = (i->bits & 0x100000000000i64) != 0;
        }
        else
        {
          v37 = DB_GetXModelSurfsAtIndex(v6->bits >> 45);
          v38 = DB_GetXModelSurfsAtIndex(i->bits >> 45);
          v39 = (unsigned __int8)*((_QWORD *)&v37->xpakEntry + 3);
          v40 = (unsigned __int8)*((_QWORD *)&v38->xpakEntry + 3);
          if ( v40 == v39 )
            v41 = v37->xpakEntry.offset > v38->xpakEntry.offset;
          else
            v41 = v40 < v39;
        }
        if ( !v41 )
        {
          if ( (((unsigned __int8)(v6->bits >> 44) ^ (unsigned __int8)(i->bits >> 44)) & 1) != 0 )
          {
            v46 = (v6->bits & 0x100000000000i64) != 0;
          }
          else
          {
            v42 = DB_GetXModelSurfsAtIndex(i->bits >> 45);
            v43 = DB_GetXModelSurfsAtIndex(v6->bits >> 45);
            v44 = (unsigned __int8)*((_QWORD *)&v42->xpakEntry + 3);
            v45 = (unsigned __int8)*((_QWORD *)&v43->xpakEntry + 3);
            if ( v45 == v44 )
              v46 = v42->xpakEntry.offset > v43->xpakEntry.offset;
            else
              v46 = v45 < v44;
          }
          if ( v46 )
            break;
          if ( v13 != i )
          {
            bits = v13->bits;
            v13->0 = i->0;
            i->bits = bits;
          }
          ++v13;
        }
      }
      v48 = v14 == v12;
      if ( v14 <= v12 )
        goto LABEL_69;
      v49 = v14 - 1;
      while ( 1 )
      {
        if ( (((unsigned __int8)(v6->bits >> 44) ^ (unsigned __int8)(v49->bits >> 44)) & 1) != 0 )
        {
          v54 = (v6->bits & 0x100000000000i64) != 0;
        }
        else
        {
          v50 = DB_GetXModelSurfsAtIndex(v49->bits >> 45);
          v51 = DB_GetXModelSurfsAtIndex(v6->bits >> 45);
          v52 = (unsigned __int8)*((_QWORD *)&v50->xpakEntry + 3);
          v53 = (unsigned __int8)*((_QWORD *)&v51->xpakEntry + 3);
          v54 = v53 == v52 ? v50->xpakEntry.offset > v51->xpakEntry.offset : v53 < v52;
        }
        if ( !v54 )
          break;
LABEL_67:
        --v14;
        --v49;
        if ( v12 >= v14 )
          goto LABEL_68;
      }
      if ( (((unsigned __int8)(v49->bits >> 44) ^ (unsigned __int8)(v6->bits >> 44)) & 1) != 0 )
      {
        v59 = (v49->bits & 0x100000000000i64) != 0;
      }
      else
      {
        v55 = DB_GetXModelSurfsAtIndex(v6->bits >> 45);
        v56 = DB_GetXModelSurfsAtIndex(v49->bits >> 45);
        v57 = (unsigned __int8)*((_QWORD *)&v55->xpakEntry + 3);
        v58 = (unsigned __int8)*((_QWORD *)&v56->xpakEntry + 3);
        if ( v58 == v57 )
          v59 = v55->xpakEntry.offset > v56->xpakEntry.offset;
        else
          v59 = v58 < v57;
      }
      if ( !v59 )
      {
        if ( --v6 != v49 )
        {
          v60.0 = ($FD3C46332B1196AF8F5C8C522E71774D)v6->bits;
          v6->0 = v49->0;
          v49->0 = v60.0;
        }
        goto LABEL_67;
      }
LABEL_68:
      v48 = v14 == v12;
LABEL_69:
      if ( !v48 )
      {
        --v14;
        if ( i == _Last )
        {
          if ( v14 != --v6 )
          {
            v63 = v14->bits;
            v14->0 = v6->0;
            v6->bits = v63;
          }
          v64 = v13[-1].bits;
          --v13;
          v65.0 = ($FD3C46332B1196AF8F5C8C522E71774D)v6->bits;
          v6->bits = v64;
          v13->0 = v65.0;
        }
        else
        {
          v66 = i->bits;
          i->0 = v14->0;
          ++i;
          v14->bits = v66;
        }
        continue;
      }
      break;
    }
    if ( i != _Last )
    {
      if ( v13 != i )
      {
        v61.0 = ($FD3C46332B1196AF8F5C8C522E71774D)v6->bits;
        v6->0 = v13->0;
        v13->0 = v61.0;
      }
      ++v13;
      v62.0 = ($FD3C46332B1196AF8F5C8C522E71774D)v6->bits;
      v6->0 = i->0;
      ++v6;
      i->0 = v62.0;
      ++i;
      continue;
    }
    break;
  }
  v67 = result;
  result->first = v6;
  result->second = v13;
  return v67;
}

/*
==============
std::_Pop_heap_hole_by_index<StreamSortKeyPacked *,StreamSortKeyPacked,SortKeyPartialPredicate>
==============
*/
void std::_Pop_heap_hole_by_index<StreamSortKeyPacked *,StreamSortKeyPacked,SortKeyPartialPredicate>(StreamSortKeyPacked *_First, __int64 _Hole, __int64 _Bottom, StreamSortKeyPacked *_Val)
{
  __int64 v6; 
  __int64 v7; 
  __int64 i; 
  __int64 v9; 

  v6 = (_Bottom - 1) >> 1;
  v7 = _Hole;
  for ( i = _Hole; i < v6; _Hole = i )
  {
    i = 2 * i + 2i64 - ((_First[2 * i + 1].bits & 0xFFFFFFFFFFFi64) < (_First[2 * i + 2].bits & 0xFFFFFFFFFFFi64));
    _First[_Hole] = _First[i];
  }
  if ( i == v6 && (_Bottom & 1) == 0 )
  {
    _First[_Hole] = _First[_Bottom - 1];
    _Hole = _Bottom - 1;
  }
  if ( v7 < _Hole )
  {
    while ( 1 )
    {
      v9 = (_Hole - 1) >> 1;
      if ( (_First[v9].bits & 0xFFFFFFFFFFFi64) <= (_Val->bits & 0xFFFFFFFFFFFi64) )
        break;
      _First[_Hole] = _First[v9];
      _Hole = (_Hole - 1) >> 1;
      if ( v7 >= v9 )
      {
        _First[v9] = (StreamSortKeyPacked)_Val->0;
        return;
      }
    }
  }
  _First[_Hole] = (StreamSortKeyPacked)_Val->0;
}

/*
==============
std::_Pop_heap_hole_by_index<StreamSortKeyPacked *,StreamSortKeyPacked,StreamGenericLoadingPredicate>
==============
*/
void std::_Pop_heap_hole_by_index<StreamSortKeyPacked *,StreamSortKeyPacked,StreamGenericLoadingPredicate>(StreamSortKeyPacked *_First, __int64 _Hole, __int64 _Bottom, StreamSortKeyPacked *_Val)
{
  __int64 v5; 
  __int64 v6; 
  __int64 v8; 
  __int64 v11; 
  __int64 v12; 
  unsigned __int64 bits; 
  StreamKey *StreamKeyAtIndex; 
  StreamKey *v15; 
  unsigned __int64 v16; 
  unsigned __int64 v17; 
  bool v18; 
  __int64 v19; 
  StreamKey *v20; 
  StreamKey *v21; 
  __int64 v22; 
  XPakEntryInfo *p_xpakInfo; 
  unsigned __int64 v24; 
  bool v25; 

  v5 = _Hole;
  v6 = _Hole;
  v8 = _Bottom - 1;
  v11 = (_Bottom - 1) >> 1;
  if ( v5 < v11 )
  {
    do
    {
      v12 = 2 * v5;
      bits = _First[2 * v5 + 2].bits;
      if ( (((unsigned __int8)(_First[v12 + 1].bits >> 44) ^ (unsigned __int8)(bits >> 44)) & 1) != 0 )
      {
        v18 = (_First[v12 + 1].bits & 0x100000000000i64) != 0;
      }
      else
      {
        StreamKeyAtIndex = DB_GetStreamKeyAtIndex(bits >> 45);
        v15 = DB_GetStreamKeyAtIndex(_First[v12 + 1].bits >> 45);
        v16 = (unsigned __int8)*((_QWORD *)&StreamKeyAtIndex->xpakInfo + 3);
        v17 = (unsigned __int8)*((_QWORD *)&v15->xpakInfo + 3);
        if ( v17 == v16 )
          v18 = StreamKeyAtIndex->xpakInfo.offset > v15->xpakInfo.offset;
        else
          v18 = v17 < v16;
      }
      v5 = !v18 + v12 + 1;
      _First[v6] = _First[v5];
      v6 = v5;
    }
    while ( v5 < v11 );
    v8 = _Bottom - 1;
  }
  if ( v5 == v11 && (_Bottom & 1) == 0 )
  {
    _First[v6] = _First[_Bottom - 1];
    v6 = v8;
  }
  if ( _Hole < v6 )
  {
    while ( 1 )
    {
      v19 = (v6 - 1) >> 1;
      if ( (((unsigned __int8)(_Val->bits >> 44) ^ (unsigned __int8)(_First[v19].bits >> 44)) & 1) != 0 )
      {
        v25 = (_Val->bits & 0x100000000000i64) != 0;
      }
      else
      {
        v20 = DB_GetStreamKeyAtIndex(_First[v19].bits >> 45);
        v21 = DB_GetStreamKeyAtIndex(_Val->bits >> 45);
        v22 = *((_QWORD *)&v21->xpakInfo + 3);
        p_xpakInfo = &v21->xpakInfo;
        v24 = (unsigned __int8)*((_QWORD *)&v20->xpakInfo + 3);
        v25 = (unsigned __int8)v22 == v24 ? v20->xpakInfo.offset > p_xpakInfo->offset : (unsigned __int8)v22 < v24;
      }
      if ( !v25 )
        break;
      _First[v6] = _First[v19];
      v6 = (v6 - 1) >> 1;
      if ( _Hole >= v19 )
      {
        _First[v19] = (StreamSortKeyPacked)_Val->0;
        return;
      }
    }
  }
  _First[v6] = (StreamSortKeyPacked)_Val->0;
}

/*
==============
std::_Pop_heap_hole_by_index<StreamSortKeyPacked *,StreamSortKeyPacked,StreamImageLoadingPredicate>
==============
*/
void std::_Pop_heap_hole_by_index<StreamSortKeyPacked *,StreamSortKeyPacked,StreamImageLoadingPredicate>(StreamSortKeyPacked *_First, __int64 _Hole, __int64 _Bottom, StreamSortKeyPacked *_Val)
{
  __int64 v4; 
  StreamSortKeyPacked *v6; 
  __int64 v7; 
  __int64 v8; 
  __int64 v9; 
  __int64 v10; 
  __int64 v11; 
  __int64 v12; 
  unsigned __int64 v13; 
  unsigned int v14; 
  __int64 v15; 
  GfxImage *GfxImageAtIndex; 
  __int64 v17; 
  unsigned __int64 v18; 
  unsigned int v19; 
  const char **v20; 
  __int64 v21; 
  GfxImage *v22; 
  unsigned __int64 v23; 
  char *v24; 
  unsigned __int64 v25; 
  bool v26; 
  __int64 v27; 
  unsigned __int64 v28; 
  unsigned int v29; 
  __int64 v30; 
  GfxImage *v31; 
  unsigned __int64 v32; 
  unsigned int v33; 
  char *v34; 
  __int64 v35; 
  GfxImage *v36; 
  unsigned __int64 v37; 
  char *v38; 
  unsigned __int64 v39; 
  bool v40; 
  __int64 v41; 
  __int64 v42; 
  __int64 v43; 
  __int64 v45; 

  v4 = _Bottom;
  v6 = _Val;
  v7 = _Hole;
  v8 = _Hole;
  v9 = v4 - 1;
  v10 = _Hole;
  v45 = v4 - 1;
  v11 = (v4 - 1) >> 1;
  if ( _Hole < v11 )
  {
    do
    {
      v12 = 2 * v10;
      if ( (((unsigned __int8)(_First[2 * v10 + 1].bits >> 44) ^ (unsigned __int8)(_First[2 * v10 + 2].bits >> 44)) & 1) != 0 )
      {
        v26 = (_First[2 * v10 + 1].bits & 0x100000000000i64) != 0;
      }
      else
      {
        v13 = _First[2 * v10 + 2].bits >> 45;
        v14 = (unsigned int)v13 >> 2;
        v15 = (unsigned int)v13 - 4 * ((unsigned int)v13 >> 2);
        if ( (unsigned int)v13 >= 0x50000 )
        {
          LODWORD(v43) = 327680;
          LODWORD(v42) = _First[2 * v10 + 2].bits >> 45;
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v42, v43) )
            __debugbreak();
        }
        GfxImageAtIndex = DB_GetGfxImageAtIndex(v14);
        v17 = 5 * v15;
        v18 = _First[v12 + 1].bits >> 45;
        v19 = (unsigned int)v18 >> 2;
        v20 = &GfxImageAtIndex->name + v17;
        v21 = (unsigned int)v18 - 4 * ((unsigned int)v18 >> 2);
        if ( (unsigned int)v18 >= 0x50000 )
        {
          LODWORD(v43) = 327680;
          LODWORD(v42) = v18;
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v42, v43) )
            __debugbreak();
        }
        v22 = DB_GetGfxImageAtIndex(v19);
        v23 = (unsigned __int8)v20[10];
        v24 = (char *)v22 + 40 * v21;
        v25 = (unsigned __int8)*((_QWORD *)v24 + 10);
        if ( v25 == v23 )
          v26 = (__int64)v20[8] > *((_QWORD *)v24 + 8);
        else
          v26 = v25 < v23;
      }
      v10 = !v26 + v12 + 1;
      _First[v7] = _First[v10];
      v7 = v10;
    }
    while ( v10 < v11 );
    v6 = _Val;
    v4 = _Bottom;
    v9 = v45;
    v8 = _Hole;
  }
  if ( v10 == v11 && (v4 & 1) == 0 )
  {
    _First[v7] = _First[v4 - 1];
    v7 = v9;
  }
  if ( v8 < v7 )
  {
    while ( 1 )
    {
      v27 = (v7 - 1) >> 1;
      if ( (((unsigned __int8)(v6->bits >> 44) ^ (unsigned __int8)(_First[v27].bits >> 44)) & 1) != 0 )
      {
        v40 = (v6->bits & 0x100000000000i64) != 0;
      }
      else
      {
        v28 = _First[v27].bits >> 45;
        v29 = (unsigned int)v28 >> 2;
        v30 = (unsigned int)v28 - 4 * ((unsigned int)v28 >> 2);
        if ( (unsigned int)v28 >= 0x50000 )
        {
          LODWORD(v43) = 327680;
          LODWORD(v42) = _First[v27].bits >> 45;
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v42, v43) )
            __debugbreak();
        }
        v31 = DB_GetGfxImageAtIndex(v29);
        v32 = v6->bits >> 45;
        v33 = (unsigned int)v32 >> 2;
        v34 = (char *)v31 + 40 * v30;
        v35 = (unsigned int)v32 - 4 * ((unsigned int)v32 >> 2);
        if ( (unsigned int)v32 >= 0x50000 )
        {
          LODWORD(v43) = 327680;
          LODWORD(v42) = v32;
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\stream\\stream_sort.cpp", 55, ASSERT_TYPE_ASSERT, "(unsigned)( imagePartIndex ) < (unsigned)( TOTAL_IMAGE_PARTS )", "imagePartIndex doesn't index TOTAL_IMAGE_PARTS\n\t%i not in [0, %i)", v42, v43) )
            __debugbreak();
        }
        v36 = DB_GetGfxImageAtIndex(v33);
        v37 = (unsigned __int8)*((_QWORD *)v34 + 10);
        v38 = (char *)v36 + 40 * v35;
        v39 = (unsigned __int8)*((_QWORD *)v38 + 10);
        if ( v39 == v37 )
        {
          v41 = *((_QWORD *)v38 + 8);
          v8 = _Hole;
          v40 = *((_QWORD *)v34 + 8) > v41;
        }
        else
        {
          v8 = _Hole;
          v40 = v39 < v37;
        }
      }
      if ( !v40 )
        break;
      _First[v7] = _First[v27];
      v7 = (v7 - 1) >> 1;
      if ( v8 >= v27 )
      {
        _First[v27] = (StreamSortKeyPacked)v6->0;
        return;
      }
    }
  }
  _First[v7] = (StreamSortKeyPacked)v6->0;
}

/*
==============
std::_Pop_heap_hole_by_index<StreamSortKeyPacked *,StreamSortKeyPacked,StreamMeshLoadingPredicate>
==============
*/
void std::_Pop_heap_hole_by_index<StreamSortKeyPacked *,StreamSortKeyPacked,StreamMeshLoadingPredicate>(StreamSortKeyPacked *_First, __int64 _Hole, __int64 _Bottom, StreamSortKeyPacked *_Val)
{
  __int64 v5; 
  __int64 v6; 
  __int64 v8; 
  __int64 v11; 
  __int64 v12; 
  unsigned __int64 bits; 
  XModelSurfs *XModelSurfsAtIndex; 
  XModelSurfs *v15; 
  unsigned __int64 v16; 
  unsigned __int64 v17; 
  bool v18; 
  __int64 v19; 
  XModelSurfs *v20; 
  XModelSurfs *v21; 
  __int64 v22; 
  XPakEntryInfo *p_xpakEntry; 
  unsigned __int64 v24; 
  bool v25; 

  v5 = _Hole;
  v6 = _Hole;
  v8 = _Bottom - 1;
  v11 = (_Bottom - 1) >> 1;
  if ( v5 < v11 )
  {
    do
    {
      v12 = 2 * v5;
      bits = _First[2 * v5 + 2].bits;
      if ( (((unsigned __int8)(_First[v12 + 1].bits >> 44) ^ (unsigned __int8)(bits >> 44)) & 1) != 0 )
      {
        v18 = (_First[v12 + 1].bits & 0x100000000000i64) != 0;
      }
      else
      {
        XModelSurfsAtIndex = DB_GetXModelSurfsAtIndex(bits >> 45);
        v15 = DB_GetXModelSurfsAtIndex(_First[v12 + 1].bits >> 45);
        v16 = (unsigned __int8)*((_QWORD *)&XModelSurfsAtIndex->xpakEntry + 3);
        v17 = (unsigned __int8)*((_QWORD *)&v15->xpakEntry + 3);
        if ( v17 == v16 )
          v18 = XModelSurfsAtIndex->xpakEntry.offset > v15->xpakEntry.offset;
        else
          v18 = v17 < v16;
      }
      v5 = !v18 + v12 + 1;
      _First[v6] = _First[v5];
      v6 = v5;
    }
    while ( v5 < v11 );
    v8 = _Bottom - 1;
  }
  if ( v5 == v11 && (_Bottom & 1) == 0 )
  {
    _First[v6] = _First[_Bottom - 1];
    v6 = v8;
  }
  if ( _Hole < v6 )
  {
    while ( 1 )
    {
      v19 = (v6 - 1) >> 1;
      if ( (((unsigned __int8)(_Val->bits >> 44) ^ (unsigned __int8)(_First[v19].bits >> 44)) & 1) != 0 )
      {
        v25 = (_Val->bits & 0x100000000000i64) != 0;
      }
      else
      {
        v20 = DB_GetXModelSurfsAtIndex(_First[v19].bits >> 45);
        v21 = DB_GetXModelSurfsAtIndex(_Val->bits >> 45);
        v22 = *((_QWORD *)&v21->xpakEntry + 3);
        p_xpakEntry = &v21->xpakEntry;
        v24 = (unsigned __int8)*((_QWORD *)&v20->xpakEntry + 3);
        v25 = (unsigned __int8)v22 == v24 ? v20->xpakEntry.offset > p_xpakEntry->offset : (unsigned __int8)v22 < v24;
      }
      if ( !v25 )
        break;
      _First[v6] = _First[v19];
      v6 = (v6 - 1) >> 1;
      if ( _Hole >= v19 )
      {
        _First[v19] = (StreamSortKeyPacked)_Val->0;
        return;
      }
    }
  }
  _First[v6] = (StreamSortKeyPacked)_Val->0;
}

/*
==============
std::_Sort_unchecked<StreamSortKeyPacked *,SortKeyPartialPredicate>
==============
*/
void std::_Sort_unchecked<StreamSortKeyPacked *,SortKeyPartialPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, __int64 _Ideal, SortKeyPartialPredicate _Pred)
{
  __int64 v6; 
  StreamSortKeyPacked *v7; 
  StreamSortKeyPacked *v8; 
  StreamSortKeyPacked *first; 
  StreamSortKeyPacked *second; 
  StreamSortKeyPacked *i; 
  unsigned __int64 bits; 
  unsigned __int64 *v13; 
  unsigned __int64 v14; 
  __int64 v15; 
  __int64 v16; 
  __int64 v17; 
  unsigned __int64 v18; 
  __int64 v19; 
  __int64 k; 
  __int64 m; 
  $FD3C46332B1196AF8F5C8C522E71774D *v22; 
  unsigned __int64 v23; 
  unsigned __int64 *j; 
  std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> result; 
  StreamSortKeyPacked _Val; 

  v6 = _Last - _First;
  v7 = _Last;
  v8 = _First;
  if ( v6 <= 32 )
  {
LABEL_7:
    if ( v6 >= 2 && v8 != v7 )
    {
      for ( i = v8 + 1; i != v7; ++i )
      {
        bits = i->bits;
        v13 = (unsigned __int64 *)i;
        v14 = i->bits & 0xFFFFFFFFFFFi64;
        if ( v14 <= (v8->bits & 0xFFFFFFFFFFFi64) )
        {
          v23 = i[-1].bits;
          for ( j = (unsigned __int64 *)&i[-1]; v14 > (v23 & 0xFFFFFFFFFFFi64); --j )
          {
            *v13 = v23;
            v13 = j;
            v23 = *(j - 1);
          }
          *v13 = bits;
        }
        else
        {
          memmove_0(&v8[1], v8, (char *)i - (char *)v8);
          v8->bits = bits;
        }
      }
    }
  }
  else
  {
    while ( _Ideal > 0 )
    {
      std::_Partition_by_median_guess_unchecked<StreamSortKeyPacked *,SortKeyPartialPredicate>(&result, v8, v7, _Pred);
      first = result.first;
      second = result.second;
      _Ideal = (_Ideal >> 2) + (_Ideal >> 1);
      if ( (__int64)(((char *)result.first - (char *)v8) & 0xFFFFFFFFFFFFFFF8ui64) >= (__int64)(((char *)v7 - (char *)result.second) & 0xFFFFFFFFFFFFFFF8ui64) )
      {
        std::_Sort_unchecked<StreamSortKeyPacked *,SortKeyPartialPredicate>(result.second, v7, _Ideal, _Pred);
        v7 = first;
      }
      else
      {
        std::_Sort_unchecked<StreamSortKeyPacked *,SortKeyPartialPredicate>(v8, result.first, _Ideal, _Pred);
        v8 = second;
      }
      v6 = v7 - v8;
      if ( v6 <= 32 )
        goto LABEL_7;
    }
    v15 = v7 - v8;
    v16 = ((char *)v7 - (char *)v8) >> 4;
    if ( v16 > 0 )
    {
      v17 = (v15 - 1) >> 1;
      do
      {
        v18 = v8[--v16].bits;
        v19 = v16;
        for ( k = v16; k < v17; v19 = k )
        {
          k = 2 * k + 2i64 - ((v8[2 * k + 1].bits & 0xFFFFFFFFFFFi64) < (v8[2 * k + 2].bits & 0xFFFFFFFFFFFi64));
          v8[v19] = v8[k];
        }
        if ( k == v17 && (v15 & 1) == 0 )
        {
          v8[v19] = v8[v15 - 1];
          v19 = v15 - 1;
        }
        for ( m = (v19 - 1) >> 1; v16 < v19; m = (m - 1) >> 1 )
        {
          if ( (v8[m].bits & 0xFFFFFFFFFFFi64) <= (v18 & 0xFFFFFFFFFFFi64) )
            break;
          v8[v19] = v8[m];
          v19 = m;
        }
        v8[v19].bits = v18;
      }
      while ( v16 > 0 );
    }
    if ( v15 >= 2 )
    {
      v22 = &v7[-1].0;
      do
      {
        _Val.0 = *v22;
        *v22 = v8->0;
        std::_Pop_heap_hole_by_index<StreamSortKeyPacked *,StreamSortKeyPacked,SortKeyPartialPredicate>(v8, 0i64, ((char *)v22-- - (char *)v8) >> 3, &_Val, _Pred);
      }
      while ( ((__int64)v22 + 8 - (__int64)v8) >> 3 >= 2 );
    }
  }
}

/*
==============
std::_Sort_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>
==============
*/
void std::_Sort_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, __int64 _Ideal, StreamGenericLoadingPredicate _Pred)
{
  __int64 v6; 
  StreamSortKeyPacked *v7; 
  StreamSortKeyPacked *v8; 
  StreamSortKeyPacked *first; 
  StreamSortKeyPacked *second; 
  $FD3C46332B1196AF8F5C8C522E71774D *v11; 
  std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> result; 
  StreamSortKeyPacked _Val; 

  v6 = _Last - _First;
  v7 = _Last;
  v8 = _First;
  if ( v6 <= 32 )
  {
LABEL_7:
    if ( v6 >= 2 )
      std::_Insertion_sort_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>(v8, v7, _Pred);
  }
  else
  {
    while ( _Ideal > 0 )
    {
      std::_Partition_by_median_guess_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>(&result, v8, v7, _Pred);
      first = result.first;
      second = result.second;
      _Ideal = (_Ideal >> 2) + (_Ideal >> 1);
      if ( (__int64)(((char *)result.first - (char *)v8) & 0xFFFFFFFFFFFFFFF8ui64) >= (__int64)(((char *)v7 - (char *)result.second) & 0xFFFFFFFFFFFFFFF8ui64) )
      {
        std::_Sort_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>(result.second, v7, _Ideal, _Pred);
        v7 = first;
      }
      else
      {
        std::_Sort_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>(v8, result.first, _Ideal, _Pred);
        v8 = second;
      }
      v6 = v7 - v8;
      if ( v6 <= 32 )
        goto LABEL_7;
    }
    std::_Make_heap_unchecked<StreamSortKeyPacked *,StreamGenericLoadingPredicate>(v8, v7, _Pred);
    if ( v7 - v8 >= 2 )
    {
      v11 = &v7[-1].0;
      do
      {
        _Val.0 = *v11;
        *v11 = v8->0;
        std::_Pop_heap_hole_by_index<StreamSortKeyPacked *,StreamSortKeyPacked,StreamGenericLoadingPredicate>(v8, 0i64, ((char *)v11-- - (char *)v8) >> 3, &_Val, _Pred);
      }
      while ( ((__int64)v11 + 8 - (__int64)v8) >> 3 >= 2 );
    }
  }
}

/*
==============
std::_Sort_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>
==============
*/
void std::_Sort_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, __int64 _Ideal, StreamImageLoadingPredicate _Pred)
{
  __int64 v6; 
  StreamSortKeyPacked *v7; 
  StreamSortKeyPacked *v8; 
  StreamSortKeyPacked *first; 
  StreamSortKeyPacked *second; 
  $FD3C46332B1196AF8F5C8C522E71774D *v11; 
  std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> result; 
  StreamSortKeyPacked _Val; 

  v6 = _Last - _First;
  v7 = _Last;
  v8 = _First;
  if ( v6 <= 32 )
  {
LABEL_7:
    if ( v6 >= 2 )
      std::_Insertion_sort_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>(v8, v7, _Pred);
  }
  else
  {
    while ( _Ideal > 0 )
    {
      std::_Partition_by_median_guess_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>(&result, v8, v7, _Pred);
      first = result.first;
      second = result.second;
      _Ideal = (_Ideal >> 2) + (_Ideal >> 1);
      if ( (__int64)(((char *)result.first - (char *)v8) & 0xFFFFFFFFFFFFFFF8ui64) >= (__int64)(((char *)v7 - (char *)result.second) & 0xFFFFFFFFFFFFFFF8ui64) )
      {
        std::_Sort_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>(result.second, v7, _Ideal, _Pred);
        v7 = first;
      }
      else
      {
        std::_Sort_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>(v8, result.first, _Ideal, _Pred);
        v8 = second;
      }
      v6 = v7 - v8;
      if ( v6 <= 32 )
        goto LABEL_7;
    }
    std::_Make_heap_unchecked<StreamSortKeyPacked *,StreamImageLoadingPredicate>(v8, v7, _Pred);
    if ( v7 - v8 >= 2 )
    {
      v11 = &v7[-1].0;
      do
      {
        _Val.0 = *v11;
        *v11 = v8->0;
        std::_Pop_heap_hole_by_index<StreamSortKeyPacked *,StreamSortKeyPacked,StreamImageLoadingPredicate>(v8, 0i64, ((char *)v11-- - (char *)v8) >> 3, &_Val, _Pred);
      }
      while ( ((__int64)v11 + 8 - (__int64)v8) >> 3 >= 2 );
    }
  }
}

/*
==============
std::_Sort_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>
==============
*/
void std::_Sort_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>(StreamSortKeyPacked *_First, StreamSortKeyPacked *_Last, __int64 _Ideal, StreamMeshLoadingPredicate _Pred)
{
  __int64 v6; 
  StreamSortKeyPacked *v7; 
  StreamSortKeyPacked *v8; 
  StreamSortKeyPacked *first; 
  StreamSortKeyPacked *second; 
  $FD3C46332B1196AF8F5C8C522E71774D *v11; 
  std::pair<StreamSortKeyPacked *,StreamSortKeyPacked *> result; 
  StreamSortKeyPacked _Val; 

  v6 = _Last - _First;
  v7 = _Last;
  v8 = _First;
  if ( v6 <= 32 )
  {
LABEL_7:
    if ( v6 >= 2 )
      std::_Insertion_sort_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>(v8, v7, _Pred);
  }
  else
  {
    while ( _Ideal > 0 )
    {
      std::_Partition_by_median_guess_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>(&result, v8, v7, _Pred);
      first = result.first;
      second = result.second;
      _Ideal = (_Ideal >> 2) + (_Ideal >> 1);
      if ( (__int64)(((char *)result.first - (char *)v8) & 0xFFFFFFFFFFFFFFF8ui64) >= (__int64)(((char *)v7 - (char *)result.second) & 0xFFFFFFFFFFFFFFF8ui64) )
      {
        std::_Sort_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>(result.second, v7, _Ideal, _Pred);
        v7 = first;
      }
      else
      {
        std::_Sort_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>(v8, result.first, _Ideal, _Pred);
        v8 = second;
      }
      v6 = v7 - v8;
      if ( v6 <= 32 )
        goto LABEL_7;
    }
    std::_Make_heap_unchecked<StreamSortKeyPacked *,StreamMeshLoadingPredicate>(v8, v7, _Pred);
    if ( v7 - v8 >= 2 )
    {
      v11 = &v7[-1].0;
      do
      {
        _Val.0 = *v11;
        *v11 = v8->0;
        std::_Pop_heap_hole_by_index<StreamSortKeyPacked *,StreamSortKeyPacked,StreamMeshLoadingPredicate>(v8, 0i64, ((char *)v11-- - (char *)v8) >> 3, &_Val, _Pred);
      }
      while ( ((__int64)v11 + 8 - (__int64)v8) >> 3 >= 2 );
    }
  }
}

/*
==============
std::_Med3_unchecked<score_t *,CgScoreBoardCompare>
==============
*/
void std::_Med3_unchecked<score_t *,CgScoreBoardCompare>(score_t *_First, score_t *_Mid, score_t *_Last, CgScoreBoardCompare _Pred)
{
  __m256i v7; 
  __m256i v8; 
  __m256i v9; 
  __int128 v10; 
  __m256i v11; 
  __m256i v12; 
  __m256i v13; 
  __int128 v14; 
  __m256i v15; 
  __m256i v16; 
  __m256i v17; 
  __int128 v18; 

  if ( CG_ServerCmdMP_CompareScores(_Mid->client, _First->client, _Mid->team, _First->team, _Mid->score, _First->score, _Mid->deaths, _First->deaths) )
  {
    v7 = *(__m256i *)&_Mid->client;
    v8 = *(__m256i *)&_Mid->rank_mp;
    v9 = *(__m256i *)&_Mid->extrascore3;
    v10 = *(_OWORD *)&_Mid->hStatusIcon;
    *(__m256i *)&_Mid->client = *(__m256i *)&_First->client;
    *(__m256i *)&_Mid->rank_mp = *(__m256i *)&_First->rank_mp;
    *(__m256i *)&_Mid->extrascore3 = *(__m256i *)&_First->extrascore3;
    *(_OWORD *)&_Mid->hStatusIcon = *(_OWORD *)&_First->hStatusIcon;
    *(__m256i *)&_First->client = v7;
    *(__m256i *)&_First->rank_mp = v8;
    *(__m256i *)&_First->extrascore3 = v9;
    *(_OWORD *)&_First->hStatusIcon = v10;
  }
  if ( CG_ServerCmdMP_CompareScores(_Last->client, _Mid->client, _Last->team, _Mid->team, _Last->score, _Mid->score, _Last->deaths, _Mid->deaths) )
  {
    v11 = *(__m256i *)&_Last->client;
    v12 = *(__m256i *)&_Last->rank_mp;
    v13 = *(__m256i *)&_Last->extrascore3;
    v14 = *(_OWORD *)&_Last->hStatusIcon;
    *(__m256i *)&_Last->client = *(__m256i *)&_Mid->client;
    *(__m256i *)&_Last->rank_mp = *(__m256i *)&_Mid->rank_mp;
    *(__m256i *)&_Last->extrascore3 = *(__m256i *)&_Mid->extrascore3;
    *(_OWORD *)&_Last->hStatusIcon = *(_OWORD *)&_Mid->hStatusIcon;
    *(__m256i *)&_Mid->client = v11;
    *(__m256i *)&_Mid->rank_mp = v12;
    *(__m256i *)&_Mid->extrascore3 = v13;
    *(_OWORD *)&_Mid->hStatusIcon = v14;
    if ( CG_ServerCmdMP_CompareScores(_Mid->client, _First->client, _Mid->team, _First->team, _Mid->score, _First->score, _Mid->deaths, _First->deaths) )
    {
      v15 = *(__m256i *)&_Mid->client;
      v16 = *(__m256i *)&_Mid->rank_mp;
      v17 = *(__m256i *)&_Mid->extrascore3;
      v18 = *(_OWORD *)&_Mid->hStatusIcon;
      *(__m256i *)&_Mid->client = *(__m256i *)&_First->client;
      *(__m256i *)&_Mid->rank_mp = *(__m256i *)&_First->rank_mp;
      *(__m256i *)&_Mid->extrascore3 = *(__m256i *)&_First->extrascore3;
      *(_OWORD *)&_Mid->hStatusIcon = *(_OWORD *)&_First->hStatusIcon;
      *(__m256i *)&_First->client = v15;
      *(__m256i *)&_First->rank_mp = v16;
      *(__m256i *)&_First->extrascore3 = v17;
      *(_OWORD *)&_First->hStatusIcon = v18;
    }
  }
}

/*
==============
std::_Partition_by_median_guess_unchecked<score_t *,CgScoreBoardCompare>
==============
*/
std::pair<score_t *,score_t *> *std::_Partition_by_median_guess_unchecked<score_t *,CgScoreBoardCompare>(std::pair<score_t *,score_t *> *result, score_t *_First, score_t *_Last, CgScoreBoardCompare _Pred)
{
  CgScoreBoardCompare v5; 
  score_t *v7; 
  score_t *v8; 
  score_t *v9; 
  signed __int64 v10; 
  __int64 v11; 
  __int64 v12; 
  unsigned __int64 v13; 
  score_t *v14; 
  unsigned __int64 v15; 
  const int *p_client; 
  const int *v17; 
  score_t *i; 
  unsigned __int64 j; 
  __m256i v20; 
  __m256i v21; 
  __m256i v22; 
  __int128 v23; 
  bool v24; 
  const int *p_score; 
  int *v26; 
  __m256i v27; 
  __m256i v28; 
  __m256i v29; 
  __int128 v30; 
  __m256i v31; 
  __m256i v32; 
  __m256i v33; 
  __int128 v34; 
  __m256i v35; 
  __m256i v36; 
  __m256i v37; 
  __int128 v38; 
  __m256i v39; 
  __m256i v40; 
  __m256i v41; 
  __int128 v42; 
  __m256i v43; 
  __m256i v44; 
  __m256i v45; 
  __int128 v46; 
  __m256i v47; 
  __m256i v48; 
  __m256i v49; 
  __m256i v50; 
  __int128 v51; 
  std::pair<score_t *,score_t *> *v52; 

  v5 = _Pred;
  v7 = _Last - 1;
  v8 = &_First[(_Last - _First) >> 1];
  v9 = _First;
  v10 = &_Last[-1] - _First;
  if ( v10 > 40 )
  {
    v11 = (v10 + 1) >> 3;
    v12 = 112 * v11;
    v13 = 224 * v11;
    v14 = &_First[v11];
    std::_Med3_unchecked<score_t *,CgScoreBoardCompare>(v9, v14, &_First[2 * v11], _Pred);
    std::_Med3_unchecked<score_t *,CgScoreBoardCompare>(&v8[v12 / 0xFFFFFFFFFFFFFF90ui64], v8, &v8[(unsigned __int64)v12 / 0x70], v5);
    v7 = (score_t *)((char *)v7 - v12);
    std::_Med3_unchecked<score_t *,CgScoreBoardCompare>(&_Last[v13 / 0xFFFFFFFFFFFFFF90ui64 - 1], v7, _Last - 1, v5);
    _Pred = v5;
    v9 = v14;
  }
  std::_Med3_unchecked<score_t *,CgScoreBoardCompare>(v9, v8, v7, _Pred);
  v15 = (unsigned __int64)&v8[1];
  p_client = &v8->client;
  if ( _First < v8 )
  {
    v17 = &v8->client;
    do
    {
      p_client = v17;
      if ( CG_ServerCmdMP_CompareScores(v8[-1].client, *v17, v8[-1].team, v17[5], v8[-1].score, v17[2], v8[-1].deaths, v17[4]) )
        break;
      if ( CG_ServerCmdMP_CompareScores(*v17, v8[-1].client, v17[5], v8[-1].team, v17[2], v8[-1].score, v17[4], v8[-1].deaths) )
        break;
      v8 = (score_t *)(v17 - 28);
      v17 = &v8->client;
      p_client = &v8->client;
    }
    while ( _First < v8 );
  }
  for ( i = (score_t *)p_client; v15 < (unsigned __int64)_Last; i = v8 )
  {
    i = (score_t *)p_client;
    if ( CG_ServerCmdMP_CompareScores(*(_DWORD *)v15, *p_client, *(_DWORD *)(v15 + 20), p_client[5], *(_DWORD *)(v15 + 8), p_client[2], *(_DWORD *)(v15 + 16), p_client[4]) )
      break;
    if ( CG_ServerCmdMP_CompareScores(*p_client, *(_DWORD *)v15, p_client[5], *(_DWORD *)(v15 + 20), p_client[2], *(_DWORD *)(v15 + 8), p_client[4], *(_DWORD *)(v15 + 16)) )
      break;
    v15 += 112i64;
  }
  for ( j = v15; ; j += 112i64 )
  {
    while ( 1 )
    {
      for ( ; j < (unsigned __int64)_Last; j += 112i64 )
      {
        if ( !CG_ServerCmdMP_CompareScores(v8->client, *(_DWORD *)j, v8->team, *(_DWORD *)(j + 20), v8->score, *(_DWORD *)(j + 8), v8->deaths, *(_DWORD *)(j + 16)) )
        {
          if ( CG_ServerCmdMP_CompareScores(*(_DWORD *)j, v8->client, *(_DWORD *)(j + 20), v8->team, *(_DWORD *)(j + 8), v8->score, *(_DWORD *)(j + 16), v8->deaths) )
            break;
          if ( v15 != j )
          {
            v20 = *(__m256i *)v15;
            v21 = *(__m256i *)(v15 + 32);
            v22 = *(__m256i *)(v15 + 64);
            v23 = *(_OWORD *)(v15 + 96);
            *(__m256i *)v15 = *(__m256i *)j;
            *(__m256i *)(v15 + 32) = *(__m256i *)(j + 32);
            *(__m256i *)(v15 + 64) = *(__m256i *)(j + 64);
            *(_OWORD *)(v15 + 96) = *(_OWORD *)(j + 96);
            *(__m256i *)j = v20;
            *(__m256i *)(j + 32) = v21;
            *(__m256i *)(j + 64) = v22;
            *(_OWORD *)(j + 96) = v23;
          }
          v15 += 112i64;
        }
      }
      v24 = i == _First;
      if ( i > _First )
      {
        p_score = &i[-1].score;
        do
        {
          v26 = (int *)(p_score - 2);
          if ( !CG_ServerCmdMP_CompareScores(*(p_score - 2), v8->client, p_score[3], v8->team, *p_score, v8->score, p_score[2], v8->deaths) )
          {
            if ( CG_ServerCmdMP_CompareScores(v8->client, *v26, v8->team, p_score[3], v8->score, *p_score, v8->deaths, p_score[2]) )
              break;
            if ( --v8 != (score_t *)v26 )
            {
              v27 = *(__m256i *)&v8->client;
              v28 = *(__m256i *)&v8->rank_mp;
              v29 = *(__m256i *)&v8->extrascore3;
              v30 = *(_OWORD *)&v8->hStatusIcon;
              *(__m256i *)&v8->client = *(__m256i *)v26;
              *(__m256i *)&v8->rank_mp = *((__m256i *)v26 + 1);
              *(__m256i *)&v8->extrascore3 = *((__m256i *)v26 + 2);
              *(_OWORD *)&v8->hStatusIcon = *((_OWORD *)v26 + 6);
              *(__m256i *)v26 = v27;
              *((__m256i *)v26 + 1) = v28;
              *((__m256i *)v26 + 2) = v29;
              *((_OWORD *)v26 + 6) = v30;
            }
          }
          --i;
          p_score -= 28;
        }
        while ( _First < i );
        v24 = i == _First;
      }
      if ( v24 )
        break;
      --i;
      if ( (score_t *)j == _Last )
      {
        if ( i != --v8 )
        {
          v39 = *(__m256i *)&i->client;
          v40 = *(__m256i *)&i->rank_mp;
          v41 = *(__m256i *)&i->extrascore3;
          v42 = *(_OWORD *)&i->hStatusIcon;
          *(__m256i *)&i->client = *(__m256i *)&v8->client;
          *(__m256i *)&i->rank_mp = *(__m256i *)&v8->rank_mp;
          *(__m256i *)&i->extrascore3 = *(__m256i *)&v8->extrascore3;
          *(_OWORD *)&i->hStatusIcon = *(_OWORD *)&v8->hStatusIcon;
          *(__m256i *)&v8->client = v39;
          *(__m256i *)&v8->rank_mp = v40;
          *(__m256i *)&v8->extrascore3 = v41;
          *(_OWORD *)&v8->hStatusIcon = v42;
        }
        v43 = *(__m256i *)&v8->client;
        v44 = *(__m256i *)&v8->rank_mp;
        v45 = *(__m256i *)&v8->extrascore3;
        v46 = *(_OWORD *)&v8->hStatusIcon;
        *(__m256i *)&v8->client = *(__m256i *)(v15 - 112);
        v47 = *(__m256i *)(v15 - 80);
        v15 -= 112i64;
        *(__m256i *)&v8->rank_mp = v47;
        *(__m256i *)&v8->extrascore3 = *(__m256i *)(v15 + 64);
        *(_OWORD *)&v8->hStatusIcon = *(_OWORD *)(v15 + 96);
        *(__m256i *)v15 = v43;
        *(__m256i *)(v15 + 32) = v44;
        *(__m256i *)(v15 + 64) = v45;
        *(_OWORD *)(v15 + 96) = v46;
      }
      else
      {
        v48 = *(__m256i *)j;
        v49 = *(__m256i *)(j + 32);
        v50 = *(__m256i *)(j + 64);
        v51 = *(_OWORD *)(j + 96);
        *(__m256i *)j = *(__m256i *)&i->client;
        *(__m256i *)(j + 32) = *(__m256i *)&i->rank_mp;
        *(__m256i *)(j + 64) = *(__m256i *)&i->extrascore3;
        *(_OWORD *)(j + 96) = *(_OWORD *)&i->hStatusIcon;
        *(__m256i *)&i->client = v48;
        *(__m256i *)&i->rank_mp = v49;
        *(__m256i *)&i->extrascore3 = v50;
        *(_OWORD *)&i->hStatusIcon = v51;
        j += 112i64;
      }
    }
    if ( (score_t *)j == _Last )
      break;
    if ( v15 != j )
    {
      v31 = *(__m256i *)&v8->client;
      v32 = *(__m256i *)&v8->rank_mp;
      v33 = *(__m256i *)&v8->extrascore3;
      v34 = *(_OWORD *)&v8->hStatusIcon;
      *(__m256i *)&v8->client = *(__m256i *)v15;
      *(__m256i *)&v8->rank_mp = *(__m256i *)(v15 + 32);
      *(__m256i *)&v8->extrascore3 = *(__m256i *)(v15 + 64);
      *(_OWORD *)&v8->hStatusIcon = *(_OWORD *)(v15 + 96);
      *(__m256i *)v15 = v31;
      *(__m256i *)(v15 + 32) = v32;
      *(__m256i *)(v15 + 64) = v33;
      *(_OWORD *)(v15 + 96) = v34;
    }
    v35 = *(__m256i *)&v8->client;
    v36 = *(__m256i *)&v8->rank_mp;
    v37 = *(__m256i *)&v8->extrascore3;
    v38 = *(_OWORD *)&v8->hStatusIcon;
    *(__m256i *)&v8->client = *(__m256i *)j;
    *(__m256i *)&v8->rank_mp = *(__m256i *)(j + 32);
    *(__m256i *)&v8->extrascore3 = *(__m256i *)(j + 64);
    *(_OWORD *)&v8->hStatusIcon = *(_OWORD *)(j + 96);
    *(__m256i *)j = v35;
    *(__m256i *)(j + 32) = v36;
    *(__m256i *)(j + 64) = v37;
    v15 += 112i64;
    ++v8;
    *(_OWORD *)(j + 96) = v38;
  }
  v52 = result;
  result->first = v8;
  result->second = (score_t *)v15;
  return v52;
}

/*
==============
std::_Pop_heap_hole_by_index<score_t *,score_t,CgScoreBoardCompare>
==============
*/
void std::_Pop_heap_hole_by_index<score_t *,score_t,CgScoreBoardCompare>(score_t *_First, __int64 _Hole, __int64 _Bottom, score_t *_Val)
{
  __int64 v5; 
  __int64 v7; 
  __int64 i; 
  score_t *v11; 
  __int64 v12; 
  __int64 v13; 
  __int64 v14; 
  score_t *v15; 
  __int64 v16; 
  __int64 v17; 

  v5 = (_Bottom - 1) >> 1;
  v7 = _Hole;
  for ( i = _Hole; i < v5; *(_OWORD *)&_First[v12].hStatusIcon = *(_OWORD *)&_First[i].hStatusIcon )
  {
    i = 2 * i + 2;
    v11 = &_First[i];
    if ( CG_ServerCmdMP_CompareScores(v11->client, v11[-1].client, v11->team, v11[-1].team, v11->score, v11[-1].score, v11->deaths, v11[-1].deaths) )
      --i;
    v12 = v7;
    v7 = i;
    *(__m256i *)&_First[v12].client = *(__m256i *)&_First[i].client;
    *(__m256i *)&_First[v12].rank_mp = *(__m256i *)&_First[i].rank_mp;
    *(__m256i *)&_First[v12].extrascore3 = *(__m256i *)&_First[i].extrascore3;
  }
  if ( i == v5 && (_Bottom & 1) == 0 )
  {
    v13 = v7;
    v7 = _Bottom - 1;
    *(__m256i *)&_First[v13].client = *(__m256i *)&_First[_Bottom - 1].client;
    *(__m256i *)&_First[v13].rank_mp = *(__m256i *)&_First[_Bottom - 1].rank_mp;
    *(__m256i *)&_First[v13].extrascore3 = *(__m256i *)&_First[_Bottom - 1].extrascore3;
    *(_OWORD *)&_First[v13].hStatusIcon = *(_OWORD *)&_First[_Bottom - 1].hStatusIcon;
  }
  if ( _Hole < v7 )
  {
    do
    {
      v14 = (v7 - 1) >> 1;
      v15 = &_First[v14];
      if ( !CG_ServerCmdMP_CompareScores(v15->client, _Val->client, v15->team, _Val->team, v15->score, _Val->score, v15->deaths, _Val->deaths) )
        break;
      v16 = v7;
      v7 = (v7 - 1) >> 1;
      *(__m256i *)&_First[v16].client = *(__m256i *)&v15->client;
      *(__m256i *)&_First[v16].rank_mp = *(__m256i *)&v15->rank_mp;
      *(__m256i *)&_First[v16].extrascore3 = *(__m256i *)&v15->extrascore3;
      *(_OWORD *)&_First[v16].hStatusIcon = *(_OWORD *)&v15->hStatusIcon;
    }
    while ( _Hole < v14 );
  }
  v17 = v7;
  *(__m256i *)&_First[v17].client = *(__m256i *)&_Val->client;
  *(__m256i *)&_First[v17].rank_mp = *(__m256i *)&_Val->rank_mp;
  *(__m256i *)&_First[v17].extrascore3 = *(__m256i *)&_Val->extrascore3;
  *(_OWORD *)&_First[v17].hStatusIcon = *(_OWORD *)&_Val->hStatusIcon;
}

/*
==============
std::_Sort_unchecked<score_t *,CgScoreBoardCompare>
==============
*/
void std::_Sort_unchecked<score_t *,CgScoreBoardCompare>(score_t *_First, score_t *_Last, __int64 _Ideal, CgScoreBoardCompare _Pred)
{
  score_t *v5; 
  score_t *v6; 
  CgScoreBoardCompare v7; 
  __int64 v9; 
  score_t *second; 
  score_t *v11; 
  score_t *v12; 
  const int *p_score; 
  score_t *first; 
  int deaths; 
  score_t *v17; 
  int team; 
  int client; 
  int score2; 
  int v22; 
  __int128 deaths1; 
  int v25; 
  __m256i v26; 
  __m256i v27; 
  __int64 v28; 
  __int64 v29; 
  __int64 v30; 
  __int64 v31; 
  score_t *v32; 
  __m256i v33; 
  __int64 v34; 
  __int64 v35; 
  const int *p_client; 
  __int64 v37; 
  __int64 v38; 
  __int64 v39; 
  int v40; 
  int score; 
  score_t *v42; 
  __int64 v43; 
  __m256i v44; 
  __int64 v45; 
  __m256i v46; 
  __int128 v47; 
  score_t *v48; 
  __m256i v49; 
  __m256i v50; 
  __int128 v51; 
  const int *v52; 
  int v56; 
  int v57; 
  __m256i v58; 
  __m256i v59; 
  int score1; 
  int deaths2; 
  score_t *v62; 
  __int64 v63; 
  int v64; 
  __int64 v65; 
  std::pair<score_t *,score_t *> result; 
  __int128 v67; 
  __m256i v68; 
  __m256i v69; 
  __m256i v70; 
  score_t client2; 
  score_t *v73; 

  v73 = _Last;
  v5 = _Last;
  v6 = _First;
  v7 = _Pred;
  v9 = _Last - _First;
  if ( v9 <= 32 )
  {
LABEL_7:
    if ( v9 >= 2 && v6 != v5 )
    {
      v12 = v6 + 1;
      v62 = v6 + 1;
      if ( &v6[1] != v5 )
      {
        p_score = &v6->score;
        first = (score_t *)(104i64 - (_QWORD)v6);
        result.first = (score_t *)(104i64 - (_QWORD)v6);
        do
        {
          _YMM1 = *(__m256i *)&v12->client;
          deaths = v6->deaths;
          v17 = v12;
          team = v6->team;
          client = v6->client;
          v69 = *(__m256i *)&v12->rank_mp;
          deaths2 = deaths;
          score2 = v6->score;
          v70 = *(__m256i *)&v12->extrascore3;
          v67 = *(_OWORD *)&v12->hStatusIcon;
          __asm { vextractf128 xmm0, ymm1, 1 }
          v22 = DWORD1(_XMM0);
          __asm
          {
            vpextrd r15d, xmm1, 2
            vextractf128 xmm0, ymm1, 1
          }
          v25 = deaths1;
          v68 = _YMM1;
          v64 = _ER15;
          if ( CG_ServerCmdMP_CompareScores(_XMM1, client, v22, team, _ER15, score2, deaths1, deaths2) )
          {
            memmove_0((void *)(216i64 - (_QWORD)first), v6, (size_t)p_score + (_QWORD)first);
            v26 = v69;
            *(__m256i *)&v6->client = v68;
            v27 = v70;
            *(__m256i *)&v6->rank_mp = v26;
            _XMM1 = v67;
            *(__m256i *)&v6->extrascore3 = v27;
            *(_OWORD *)&v6->hStatusIcon = _XMM1;
          }
          else
          {
            v52 = p_score - 2;
            _YMM0 = v68;
            __asm { vextractf128 xmm0, ymm0, 1 }
            score1 = _ER15;
            __asm { vpextrd r15d, xmm0, 1 }
            if ( CG_ServerCmdMP_CompareScores(_XMM1, *(p_score - 2), _ER15, p_score[3], score1, *p_score, v25, p_score[2]) )
            {
              do
              {
                *(__m256i *)&v17->client = *(__m256i *)v52;
                *(__m256i *)&v17->rank_mp = *((__m256i *)v52 + 1);
                *(__m256i *)&v17->extrascore3 = *((__m256i *)v52 + 2);
                *(_OWORD *)&v17->hStatusIcon = *((_OWORD *)v52 + 6);
                v56 = *(v52 - 24);
                v17 = (score_t *)v52;
                v57 = *(v52 - 23);
                v52 -= 28;
              }
              while ( CG_ServerCmdMP_CompareScores(_XMM1, *v52, _ER15, v57, v64, v52[2], v25, v56) );
              v12 = v62;
              v5 = v73;
            }
            v58 = v69;
            first = result.first;
            *(__m256i *)&v17->client = v68;
            v59 = v70;
            *(__m256i *)&v17->rank_mp = v58;
            _XMM1 = v67;
            *(__m256i *)&v17->extrascore3 = v59;
            *(_OWORD *)&v17->hStatusIcon = _XMM1;
          }
          ++v12;
          p_score += 28;
          v62 = v12;
        }
        while ( v12 != v5 );
      }
    }
  }
  else
  {
    while ( _Ideal > 0 )
    {
      std::_Partition_by_median_guess_unchecked<score_t *,CgScoreBoardCompare>(&result, v6, v5, v7);
      second = result.second;
      v11 = result.first;
      _Ideal = (_Ideal >> 2) + (_Ideal >> 1);
      if ( result.first - v6 >= v5 - result.second )
      {
        std::_Sort_unchecked<score_t *,CgScoreBoardCompare>(result.second, v5, _Ideal, v7);
        v5 = v11;
        v73 = v11;
      }
      else
      {
        std::_Sort_unchecked<score_t *,CgScoreBoardCompare>(v6, result.first, _Ideal, v7);
        v6 = second;
      }
      v9 = v5 - v6;
      if ( v9 <= 32 )
        goto LABEL_7;
    }
    v28 = v5 - v6;
    v63 = v28;
    v29 = v28 >> 1;
    if ( v28 >> 1 > 0 )
    {
      v30 = v28 - 1;
      v31 = (v28 - 1) >> 1;
      v32 = &v6[v29];
      v65 = v31;
      do
      {
        v33 = *(__m256i *)&v32[-1].client;
        --v32;
        v34 = --v29;
        v35 = v29;
        v70 = v33;
        *(__m256i *)&client2.client = v33;
        v69 = *(__m256i *)&v32->rank_mp;
        v68 = *(__m256i *)&v32->extrascore3;
        v67 = *(_OWORD *)&v32->hStatusIcon;
        if ( v29 < v31 )
        {
          do
          {
            v35 = 2 * v35 + 2;
            p_client = &v6[v35].client;
            if ( CG_ServerCmdMP_CompareScores(*p_client, *(p_client - 28), p_client[5], *(p_client - 23), p_client[2], *(p_client - 26), p_client[4], *(p_client - 24)) )
              --v35;
            v37 = v34;
            v34 = v35;
            *(__m256i *)&v6[v37].client = *(__m256i *)&v6[v35].client;
            *(__m256i *)&v6[v37].rank_mp = *(__m256i *)&v6[v35].rank_mp;
            *(__m256i *)&v6[v37].extrascore3 = *(__m256i *)&v6[v35].extrascore3;
            *(_OWORD *)&v6[v37].hStatusIcon = *(_OWORD *)&v6[v35].hStatusIcon;
          }
          while ( v35 < v31 );
          v30 = v28 - 1;
        }
        if ( v35 == v31 && (v28 & 1) == 0 )
        {
          v38 = v34;
          v34 = v30;
          *(__m256i *)&v6[v38].client = *(__m256i *)&v6[v28 - 1].client;
          *(__m256i *)&v6[v38].rank_mp = *(__m256i *)&v6[v28 - 1].rank_mp;
          *(__m256i *)&v6[v38].extrascore3 = *(__m256i *)&v6[v28 - 1].extrascore3;
          *(_OWORD *)&v6[v38].hStatusIcon = *(_OWORD *)&v6[v28 - 1].hStatusIcon;
        }
        v39 = (v34 - 1) >> 1;
        if ( v29 < v34 )
        {
          v40 = client2.deaths;
          score = client2.score;
          do
          {
            v42 = &v6[v39];
            if ( !CG_ServerCmdMP_CompareScores(v42->client, client2.client, v42->team, client2.team, v42->score, score, v42->deaths, v40) )
              break;
            v43 = v34;
            v34 = v39;
            v39 = (v39 - 1) >> 1;
            *(__m256i *)&v6[v43].client = *(__m256i *)&v42->client;
            *(__m256i *)&v6[v43].rank_mp = *(__m256i *)&v42->rank_mp;
            *(__m256i *)&v6[v43].extrascore3 = *(__m256i *)&v42->extrascore3;
            *(_OWORD *)&v6[v43].hStatusIcon = *(_OWORD *)&v42->hStatusIcon;
          }
          while ( v29 < v34 );
          v28 = v63;
        }
        v44 = v69;
        v31 = v65;
        v30 = v28 - 1;
        v45 = v34;
        *(__m256i *)&v6[v45].client = v70;
        v46 = v68;
        *(__m256i *)&v6[v45].rank_mp = v44;
        v47 = v67;
        *(__m256i *)&v6[v45].extrascore3 = v46;
        *(_OWORD *)&v6[v45].hStatusIcon = v47;
      }
      while ( v29 > 0 );
      v7 = _Pred;
      v5 = v73;
    }
    if ( v28 >= 2 )
    {
      v48 = v5 - 1;
      do
      {
        v49 = *(__m256i *)&v48->rank_mp;
        *(__m256i *)&client2.client = *(__m256i *)&v48->client;
        v50 = *(__m256i *)&v48->extrascore3;
        *(__m256i *)&client2.rank_mp = v49;
        v51 = *(_OWORD *)&v48->hStatusIcon;
        *(__m256i *)&client2.extrascore3 = v50;
        *(__m256i *)&v48->client = *(__m256i *)&v6->client;
        *(_OWORD *)&client2.hStatusIcon = v51;
        *(__m256i *)&v48->rank_mp = *(__m256i *)&v6->rank_mp;
        *(__m256i *)&v48->extrascore3 = *(__m256i *)&v6->extrascore3;
        *(_OWORD *)&v48->hStatusIcon = *(_OWORD *)&v6->hStatusIcon;
        std::_Pop_heap_hole_by_index<score_t *,score_t,CgScoreBoardCompare>(v6, 0i64, v48 - v6, &client2, v7);
        --v48;
      }
      while ( ((char *)v48 - (char *)v6 + 112) / 112 >= 2 );
    }
  }
}

/*
==============
std::_Guess_median_unchecked<CgVehiclePriorityInfo *,CgVehicleMPSortFunctor>
==============
*/
void std::_Guess_median_unchecked<CgVehiclePriorityInfo *,CgVehicleMPSortFunctor>(CgVehiclePriorityInfo *_First, CgVehiclePriorityInfo *_Mid, CgVehiclePriorityInfo *_Last, CgVehicleMPSortFunctor _Pred)
{
  signed __int64 v5; 
  __int64 v6; 
  unsigned __int64 v7; 
  unsigned __int64 v8; 
  float v9; 
  CgVehiclePriorityInfo v10; 
  CgVehiclePriorityInfo v11; 
  float v12; 
  CgVehiclePriorityInfo *v13; 
  CgVehiclePriorityInfo v14; 
  CgVehiclePriorityInfo v15; 
  CgVehiclePriorityInfo *v16; 
  CgVehiclePriorityInfo *v17; 
  float v18; 
  CgVehiclePriorityInfo v19; 
  CgVehiclePriorityInfo v20; 
  float v21; 
  CgVehiclePriorityInfo v22; 
  CgVehiclePriorityInfo v23; 
  float distanceSq; 
  CgVehiclePriorityInfo v25; 
  CgVehiclePriorityInfo v26; 

  v5 = _Last - _First;
  if ( v5 <= 40 )
  {
    distanceSq = _Mid->distanceSq;
    if ( distanceSq < _First->distanceSq )
    {
      v25 = *_Mid;
      *_Mid = *_First;
      *_First = v25;
      distanceSq = _Mid->distanceSq;
    }
    if ( distanceSq > _Last->distanceSq )
    {
      v26 = *_Last;
      *_Last = *_Mid;
      *_Mid = v26;
      if ( _First->distanceSq > _Mid->distanceSq )
      {
        *_Mid = *_First;
        *_First = v26;
      }
    }
  }
  else
  {
    v6 = (v5 + 1) >> 3;
    v7 = 16 * v6;
    v8 = 8 * v6;
    v9 = _First[v6].distanceSq;
    if ( v9 < _First->distanceSq )
    {
      v10 = _First[v8 / 8];
      _First[v8 / 8] = *_First;
      *_First = v10;
      v9 = _First[v8 / 8].distanceSq;
    }
    if ( v9 > _First[v7 / 8].distanceSq )
    {
      v11 = _First[v7 / 8];
      _First[v7 / 8] = _First[v8 / 8];
      _First[v8 / 8] = v11;
      if ( _First->distanceSq > _First[v8 / 8].distanceSq )
      {
        _First[v8 / 8] = *_First;
        *_First = v11;
      }
    }
    v12 = _Mid->distanceSq;
    v13 = &_Mid[v8 / 0xFFFFFFFFFFFFFFF8ui64];
    if ( v12 < _Mid[v8 / 0xFFFFFFFFFFFFFFF8ui64].distanceSq )
    {
      v14 = *_Mid;
      *_Mid = *v13;
      *v13 = v14;
      v12 = _Mid->distanceSq;
    }
    if ( v12 > _Mid[v8 / 8].distanceSq )
    {
      v15 = _Mid[v8 / 8];
      _Mid[v8 / 8] = *_Mid;
      *_Mid = v15;
      if ( v13->distanceSq > _Mid->distanceSq )
      {
        *_Mid = *v13;
        *v13 = v15;
      }
    }
    v16 = &_Last[v8 / 0xFFFFFFFFFFFFFFF8ui64];
    v17 = &_Last[v7 / 0xFFFFFFFFFFFFFFF8ui64];
    v18 = _Last[v8 / 0xFFFFFFFFFFFFFFF8ui64].distanceSq;
    if ( v18 < _Last[v7 / 0xFFFFFFFFFFFFFFF8ui64].distanceSq )
    {
      v19 = *v16;
      *v16 = *v17;
      *v17 = v19;
      v18 = v16->distanceSq;
    }
    if ( v18 > _Last->distanceSq )
    {
      v20 = *_Last;
      *_Last = *v16;
      *v16 = v20;
      if ( v17->distanceSq > v16->distanceSq )
      {
        *v16 = *v17;
        *v17 = v20;
      }
    }
    v21 = _Mid->distanceSq;
    if ( v21 < _First[v8 / 8].distanceSq )
    {
      v22 = *_Mid;
      *_Mid = _First[v8 / 8];
      _First[v8 / 8] = v22;
      v21 = _Mid->distanceSq;
    }
    if ( v21 > v16->distanceSq )
    {
      v23 = *v16;
      *v16 = *_Mid;
      *_Mid = v23;
      if ( _First[v8 / 8].distanceSq > _Mid->distanceSq )
      {
        *_Mid = _First[v8 / 8];
        _First[v8 / 8] = v23;
      }
    }
  }
}

/*
==============
std::_Partition_by_median_guess_unchecked<CgVehiclePriorityInfo *,CgVehicleMPSortFunctor>
==============
*/
std::pair<CgVehiclePriorityInfo *,CgVehiclePriorityInfo *> *std::_Partition_by_median_guess_unchecked<CgVehiclePriorityInfo *,CgVehicleMPSortFunctor>(std::pair<CgVehiclePriorityInfo *,CgVehiclePriorityInfo *> *result, CgVehiclePriorityInfo *_First, CgVehiclePriorityInfo *_Last, CgVehicleMPSortFunctor _Pred)
{
  CgVehiclePriorityInfo *v7; 
  CgVehiclePriorityInfo *i; 
  float distanceSq; 
  float v10; 
  float v11; 
  float v12; 
  CgVehiclePriorityInfo *v13; 
  CgVehiclePriorityInfo *v14; 
  CgVehiclePriorityInfo *v15; 
  float v16; 
  float v17; 
  CgVehiclePriorityInfo v18; 
  float v19; 
  CgVehiclePriorityInfo v20; 
  float v21; 
  CgVehiclePriorityInfo *v22; 
  CgVehiclePriorityInfo v23; 
  float v24; 
  CgVehiclePriorityInfo v25; 
  float v26; 
  float v27; 
  CgVehiclePriorityInfo v28; 
  bool v29; 
  CgVehiclePriorityInfo *v30; 
  float v31; 
  float v32; 
  CgVehiclePriorityInfo v33; 
  CgVehiclePriorityInfo v34; 
  CgVehiclePriorityInfo v35; 
  CgVehiclePriorityInfo v36; 
  CgVehiclePriorityInfo v37; 
  CgVehiclePriorityInfo v38; 
  CgVehiclePriorityInfo v39; 
  std::pair<CgVehiclePriorityInfo *,CgVehiclePriorityInfo *> *v40; 

  v7 = &_First[((char *)_Last - (char *)_First) >> 4];
  std::_Guess_median_unchecked<CgVehiclePriorityInfo *,CgVehicleMPSortFunctor>(_First, v7, _Last - 1, _Pred);
  for ( i = v7 + 1; _First < v7; --v7 )
  {
    distanceSq = v7[-1].distanceSq;
    v10 = v7->distanceSq;
    if ( distanceSq < v10 )
      break;
    if ( v10 < distanceSq )
      break;
  }
  if ( i < _Last )
  {
    v11 = v7->distanceSq;
    do
    {
      v12 = i->distanceSq;
      if ( v12 < v11 )
        break;
      if ( v11 < v12 )
        break;
      ++i;
    }
    while ( i < _Last );
  }
  v13 = i;
  v14 = v7;
  while ( 1 )
  {
    while ( 1 )
    {
      if ( v13 >= _Last )
        goto LABEL_42;
      if ( (((char *)_Last - (char *)v13 + 7) & 0xFFFFFFFFFFFFFFF8ui64) >= 0x20 )
      {
        v15 = v13 + 1;
        do
        {
          v16 = v7->distanceSq;
          v17 = v15[-1].distanceSq;
          if ( v16 >= v17 )
          {
            if ( v17 < v16 )
              goto LABEL_42;
            if ( i != v13 )
            {
              v18 = *i;
              *i = *v13;
              *v13 = v18;
              v16 = v7->distanceSq;
            }
            ++i;
          }
          v19 = v15->distanceSq;
          if ( v16 >= v19 )
          {
            if ( v19 < v16 )
            {
              v13 = v15;
              goto LABEL_42;
            }
            if ( i != v15 )
            {
              v20 = *i;
              *i = *v15;
              *v15 = v20;
              v16 = v7->distanceSq;
            }
            ++i;
          }
          v21 = v15[1].distanceSq;
          if ( v16 >= v21 )
          {
            v22 = v15 + 1;
            if ( v21 < v16 )
              goto LABEL_56;
            if ( i != v22 )
            {
              v23 = *i;
              *i = *v22;
              *v22 = v23;
              v16 = v7->distanceSq;
            }
            ++i;
          }
          v24 = v15[2].distanceSq;
          if ( v16 >= v24 )
          {
            v22 = v15 + 2;
            if ( v24 < v16 )
            {
LABEL_56:
              v13 = v22;
              goto LABEL_42;
            }
            if ( i != v22 )
            {
              v25 = *i;
              *i = *v22;
              *v22 = v25;
            }
            ++i;
          }
          v13 += 4;
          v15 += 4;
        }
        while ( v13 < &_Last[-3] );
      }
      for ( ; v13 < _Last; ++v13 )
      {
        v26 = v7->distanceSq;
        v27 = v13->distanceSq;
        if ( v26 >= v27 )
        {
          if ( v27 < v26 )
            break;
          if ( i != v13 )
          {
            v28 = *i;
            *i = *v13;
            *v13 = v28;
          }
          ++i;
        }
      }
LABEL_42:
      v29 = v14 == _First;
      if ( v14 > _First )
      {
        v30 = v14 - 1;
        do
        {
          v31 = v30->distanceSq;
          v32 = v7->distanceSq;
          if ( v31 >= v32 )
          {
            if ( v32 < v31 )
              break;
            if ( --v7 != v30 )
            {
              v33 = *v7;
              *v7 = *v30;
              *v30 = v33;
            }
          }
          --v14;
          --v30;
        }
        while ( _First < v14 );
        v29 = v14 == _First;
      }
      if ( v29 )
        break;
      --v14;
      if ( v13 == _Last )
      {
        if ( v14 != --v7 )
        {
          v36 = *v14;
          *v14 = *v7;
          *v7 = v36;
        }
        v37 = i[-1];
        --i;
        v38 = *v7;
        *v7 = v37;
        *i = v38;
      }
      else
      {
        v39 = *v13;
        *v13++ = *v14;
        *v14 = v39;
      }
    }
    if ( v13 == _Last )
      break;
    if ( i != v13 )
    {
      v34 = *v7;
      *v7 = *i;
      *i = v34;
    }
    ++i;
    v35 = *v7;
    *v7++ = *v13;
    *v13++ = v35;
  }
  v40 = result;
  result->first = v7;
  result->second = i;
  return v40;
}

/*
==============
std::_Pop_heap_hole_by_index<CgVehiclePriorityInfo *,CgVehiclePriorityInfo,CgVehicleMPSortFunctor>
==============
*/
void std::_Pop_heap_hole_by_index<CgVehiclePriorityInfo *,CgVehiclePriorityInfo,CgVehicleMPSortFunctor>(CgVehiclePriorityInfo *_First, __int64 _Hole, __int64 _Bottom, CgVehiclePriorityInfo *_Val)
{
  __int64 v5; 
  __int64 v6; 
  __int64 i; 
  bool v8; 
  __int64 v9; 
  __int64 v10; 

  v5 = (_Bottom - 1) >> 1;
  v6 = _Hole;
  for ( i = _Hole; i < v5; _Hole = i )
  {
    v8 = _First[2 * i + 1].distanceSq <= _First[2 * i + 2].distanceSq;
    v9 = 2 * i + 2;
    i = 2 * i + 1;
    if ( v8 )
      i = v9;
    _First[_Hole] = _First[i];
  }
  if ( i == v5 && (_Bottom & 1) == 0 )
  {
    _First[_Hole] = _First[_Bottom - 1];
    _Hole = _Bottom - 1;
  }
  if ( v6 < _Hole )
  {
    while ( 1 )
    {
      v10 = (_Hole - 1) >> 1;
      if ( _Val->distanceSq <= _First[v10].distanceSq )
        break;
      _First[_Hole] = _First[v10];
      _Hole = (_Hole - 1) >> 1;
      if ( v6 >= v10 )
      {
        _First[v10] = *_Val;
        return;
      }
    }
  }
  _First[_Hole] = *_Val;
}

/*
==============
std::_Sort_unchecked<CgVehiclePriorityInfo *,CgVehicleMPSortFunctor>
==============
*/
void std::_Sort_unchecked<CgVehiclePriorityInfo *,CgVehicleMPSortFunctor>(CgVehiclePriorityInfo *_First, CgVehiclePriorityInfo *_Last, __int64 _Ideal, CgVehicleMPSortFunctor _Pred)
{
  __int64 v6; 
  CgVehiclePriorityInfo *v7; 
  CgVehiclePriorityInfo *v8; 
  CgVehiclePriorityInfo *first; 
  CgVehiclePriorityInfo *second; 
  CgVehiclePriorityInfo *v11; 
  size_t v12; 
  CgVehiclePriorityInfo v13; 
  _QWORD *v14; 
  float distanceSq; 
  __int64 v16; 
  __int64 v17; 
  __int64 v18; 
  CgVehiclePriorityInfo v19; 
  __int64 v20; 
  __int64 i; 
  bool v22; 
  __int64 v23; 
  __int64 v24; 
  float v25; 
  CgVehiclePriorityInfo *v26; 
  __int64 v27; 
  std::pair<CgVehiclePriorityInfo *,CgVehiclePriorityInfo *> result; 
  CgVehiclePriorityInfo _Val; 

  v6 = _Last - _First;
  v7 = _Last;
  v8 = _First;
  if ( v6 <= 32 )
  {
LABEL_7:
    if ( v6 >= 2 && v8 != v7 )
    {
      v11 = v8 + 1;
      if ( &v8[1] != v7 )
      {
        v12 = 1i64;
        do
        {
          v13 = *v11;
          v14 = v11;
          _Val = *v11;
          distanceSq = _Val.distanceSq;
          if ( _Val.distanceSq >= v8->distanceSq )
          {
            v27 = (__int64)&v8[v12 - 1];
            if ( _Val.distanceSq < v8[v12 - 1].distanceSq )
            {
              do
              {
                *v14 = *(_QWORD *)v27;
                v14 = (_QWORD *)v27;
                v27 -= 8i64;
              }
              while ( distanceSq < *(float *)(v27 + 4) );
            }
            *v14 = v13;
          }
          else
          {
            memmove_0(&v8[1], v8, v12 * 8);
            *v8 = v13;
          }
          ++v11;
          ++v12;
        }
        while ( v11 != v7 );
      }
    }
  }
  else
  {
    while ( _Ideal > 0 )
    {
      std::_Partition_by_median_guess_unchecked<CgVehiclePriorityInfo *,CgVehicleMPSortFunctor>(&result, v8, v7, _Pred);
      first = result.first;
      second = result.second;
      _Ideal = (_Ideal >> 2) + (_Ideal >> 1);
      if ( (__int64)(((char *)result.first - (char *)v8) & 0xFFFFFFFFFFFFFFF8ui64) >= (__int64)(((char *)v7 - (char *)result.second) & 0xFFFFFFFFFFFFFFF8ui64) )
      {
        std::_Sort_unchecked<CgVehiclePriorityInfo *,CgVehicleMPSortFunctor>(result.second, v7, _Ideal, _Pred);
        v7 = first;
      }
      else
      {
        std::_Sort_unchecked<CgVehiclePriorityInfo *,CgVehicleMPSortFunctor>(v8, result.first, _Ideal, _Pred);
        v8 = second;
      }
      v6 = v7 - v8;
      if ( v6 <= 32 )
        goto LABEL_7;
    }
    v16 = v7 - v8;
    v17 = ((char *)v7 - (char *)v8) >> 4;
    if ( v17 > 0 )
    {
      v18 = (v16 - 1) >> 1;
      do
      {
        v19 = v8[--v17];
        _Val = v19;
        v20 = v17;
        for ( i = v17; i < v18; v20 = i )
        {
          v22 = v8[2 * i + 1].distanceSq <= v8[2 * i + 2].distanceSq;
          v23 = 2 * i + 2;
          i = 2 * i + 1;
          if ( v22 )
            i = v23;
          v8[v20] = v8[i];
        }
        if ( i == v18 && (v16 & 1) == 0 )
        {
          v8[v20] = v8[v16 - 1];
          v20 = v16 - 1;
        }
        v24 = (v20 - 1) >> 1;
        if ( v17 < v20 )
        {
          v25 = _Val.distanceSq;
          do
          {
            if ( v25 <= v8[v24].distanceSq )
              break;
            v8[v20] = v8[v24];
            v20 = v24;
            v24 = (v24 - 1) >> 1;
          }
          while ( v17 < v20 );
        }
        v8[v20] = v19;
      }
      while ( v17 > 0 );
    }
    if ( v16 >= 2 )
    {
      v26 = v7 - 1;
      do
      {
        _Val = *v26;
        *v26 = *v8;
        std::_Pop_heap_hole_by_index<CgVehiclePriorityInfo *,CgVehiclePriorityInfo,CgVehicleMPSortFunctor>(v8, 0i64, v26 - v8, &_Val, _Pred);
        --v26;
      }
      while ( ((__int64)v26 + 8 - (__int64)v8) >> 3 >= 2 );
    }
  }
}

/*
==============
std::_Make_heap_unchecked<PostMatchInfo_t *,LUIScoreCompare>
==============
*/
void std::_Make_heap_unchecked<PostMatchInfo_t *,LUIScoreCompare>(PostMatchInfo_t *_First, PostMatchInfo_t *_Last, LUIScoreCompare _Pred)
{
  signed __int64 v4; 
  __int64 v5; 
  __int64 v6; 
  signed __int64 v7; 
  __int64 v8; 
  PostMatchInfo_t *v9; 
  __int64 v10; 
  __int64 v11; 
  PostMatchInfo_t *v12; 
  PostMatchInfo_t *v13; 
  PostMatchInfo_t *v14; 
  signed __int64 v15; 
  __int64 v16; 
  PostMatchInfo_t *v17; 
  PostMatchInfo_t *v18; 
  __int64 i; 
  PostMatchInfo_t *v20; 
  __int64 v21; 
  PostMatchInfo_t *v22; 
  PostMatchInfo_t *v23; 
  signed __int64 v24; 
  signed __int64 v25; 
  __int64 v26; 
  PostMatchInfo_t *v27; 
  __m256i client2; 
  __m256i v29; 
  __m256i v30; 
  __m256i v31; 
  __m256i v32; 
  __int128 v33; 

  v5 = (__int64)((unsigned __int128)(((char *)_Last - (char *)_First) * (__int128)0x2E8BA2E8BA2E8BA3i64) >> 64) >> 5;
  v4 = _Last - _First;
  v24 = v4;
  v6 = v5 / 2;
  if ( v5 / 2 > 0 )
  {
    v7 = v4 - 1;
    v8 = (v4 - 1) >> 1;
    v9 = &_First[v6];
    v25 = v4 - 1;
    v26 = v8;
    do
    {
      --v6;
      v27 = v9 - 1;
      v10 = v6;
      v11 = v6;
      client2 = *(__m256i *)&v9[-1].scoreInfo.client;
      v29 = *(__m256i *)&v9[-1].scoreInfo.rank_mp;
      v30 = *(__m256i *)&v9[-1].scoreInfo.extrascore3;
      v31 = *(__m256i *)&v9[-1].scoreInfo.hStatusIcon;
      v32 = *(__m256i *)v9[-1].clanTag;
      v33 = *(_OWORD *)&v9[-1].xuidString[20];
      if ( v6 < v8 )
      {
        do
        {
          v11 = 2 * v11 + 2;
          v12 = &_First[v11];
          if ( CG_ServerCmdMP_CompareScores(v12->scoreInfo.client, v12[-1].scoreInfo.client, v12->scoreInfo.team, v12[-1].scoreInfo.team, v12->scoreInfo.score, v12[-1].scoreInfo.score, v12->scoreInfo.deaths, v12[-1].scoreInfo.deaths) )
            --v11;
          v13 = &_First[v10];
          v10 = v11;
          v14 = &_First[v11];
          *(_OWORD *)&v13->scoreInfo.client = *(_OWORD *)&v14->scoreInfo.client;
          *(_OWORD *)&v13->scoreInfo.deaths = *(_OWORD *)&v14->scoreInfo.deaths;
          *(_OWORD *)&v13->scoreInfo.rank_mp = *(_OWORD *)&v14->scoreInfo.rank_mp;
          *(_OWORD *)&v13->scoreInfo.assists = *(_OWORD *)&v14->scoreInfo.assists;
          *(_OWORD *)&v13->scoreInfo.extrascore3 = *(_OWORD *)&v14->scoreInfo.extrascore3;
          *(_OWORD *)&v13->scoreInfo.adrenaline = *(_OWORD *)&v14->scoreInfo.adrenaline;
          *(_OWORD *)&v13->scoreInfo.hStatusIcon = *(_OWORD *)&v14->scoreInfo.hStatusIcon;
          *(_OWORD *)&v13->voiceInfo.isMicOn = *(_OWORD *)&v14->voiceInfo.isMicOn;
          *(_OWORD *)v13->clanTag = *(_OWORD *)v14->clanTag;
          *(_OWORD *)&v13->xuidString[4] = *(_OWORD *)&v14->xuidString[4];
          *(_OWORD *)&v13->xuidString[20] = *(_OWORD *)&v14->xuidString[20];
        }
        while ( v11 < v8 );
        v4 = v24;
        v7 = v25;
      }
      if ( v11 == v8 && (v4 & 1) == 0 )
      {
        v15 = v4;
        v16 = v10;
        v17 = &_First[v15 - 1];
        v10 = v7;
        v18 = &_First[v16];
        *(_OWORD *)&v18->scoreInfo.client = *(_OWORD *)&v17->scoreInfo.client;
        *(_OWORD *)&v18->scoreInfo.deaths = *(_OWORD *)&v17->scoreInfo.deaths;
        *(_OWORD *)&v18->scoreInfo.rank_mp = *(_OWORD *)&v17->scoreInfo.rank_mp;
        *(_OWORD *)&v18->scoreInfo.assists = *(_OWORD *)&v17->scoreInfo.assists;
        *(_OWORD *)&v18->scoreInfo.extrascore3 = *(_OWORD *)&v17->scoreInfo.extrascore3;
        *(_OWORD *)&v18->scoreInfo.adrenaline = *(_OWORD *)&v17->scoreInfo.adrenaline;
        *(_OWORD *)&v18->scoreInfo.hStatusIcon = *(_OWORD *)&v17->scoreInfo.hStatusIcon;
        *(_OWORD *)&v18->voiceInfo.isMicOn = *(_OWORD *)&v17->voiceInfo.isMicOn;
        *(_OWORD *)v18->clanTag = *(_OWORD *)v17->clanTag;
        *(_OWORD *)&v18->xuidString[4] = *(_OWORD *)&v17->xuidString[4];
        *(_OWORD *)&v18->xuidString[20] = *(_OWORD *)&v17->xuidString[20];
      }
      for ( i = (v10 - 1) >> 1; v6 < v10; *(_OWORD *)&v22->xuidString[20] = *(_OWORD *)&v20->xuidString[20] )
      {
        v20 = &_First[i];
        if ( !CG_ServerCmdMP_CompareScores(v20->scoreInfo.client, client2.m256i_i32[0], v20->scoreInfo.team, client2.m256i_i32[5], v20->scoreInfo.score, client2.m256i_i32[2], v20->scoreInfo.deaths, client2.m256i_i32[4]) )
          break;
        v21 = v10;
        v10 = i;
        v22 = &_First[v21];
        i = (i - 1) >> 1;
        *(_OWORD *)&v22->scoreInfo.client = *(_OWORD *)&v20->scoreInfo.client;
        *(_OWORD *)&v22->scoreInfo.deaths = *(_OWORD *)&v20->scoreInfo.deaths;
        *(_OWORD *)&v22->scoreInfo.rank_mp = *(_OWORD *)&v20->scoreInfo.rank_mp;
        *(_OWORD *)&v22->scoreInfo.assists = *(_OWORD *)&v20->scoreInfo.assists;
        *(_OWORD *)&v22->scoreInfo.extrascore3 = *(_OWORD *)&v20->scoreInfo.extrascore3;
        *(_OWORD *)&v22->scoreInfo.adrenaline = *(_OWORD *)&v20->scoreInfo.adrenaline;
        *(_OWORD *)&v22->scoreInfo.hStatusIcon = *(_OWORD *)&v20->scoreInfo.hStatusIcon;
        *(_OWORD *)&v22->voiceInfo.isMicOn = *(_OWORD *)&v20->voiceInfo.isMicOn;
        *(_OWORD *)v22->clanTag = *(_OWORD *)v20->clanTag;
        *(_OWORD *)&v22->xuidString[4] = *(_OWORD *)&v20->xuidString[4];
      }
      v4 = v24;
      v8 = v26;
      v7 = v24 - 1;
      v23 = &_First[v10];
      *(__m256i *)&v23->scoreInfo.client = client2;
      *(__m256i *)&v23->scoreInfo.rank_mp = v29;
      *(__m256i *)&v23->scoreInfo.extrascore3 = v30;
      *(__m256i *)&v23->scoreInfo.hStatusIcon = v31;
      *(__m256i *)v23->clanTag = v32;
      v9 = v27;
      *(_OWORD *)&v23->xuidString[20] = v33;
    }
    while ( v6 > 0 );
  }
}

/*
==============
std::_Med3_unchecked<PostMatchInfo_t *,LUIScoreCompare>
==============
*/
void std::_Med3_unchecked<PostMatchInfo_t *,LUIScoreCompare>(PostMatchInfo_t *_First, PostMatchInfo_t *_Mid, PostMatchInfo_t *_Last, LUIScoreCompare _Pred)
{
  __m256i v7; 
  __m256i v8; 
  __m256i v9; 
  __m256i v10; 
  __m256i v11; 
  __m256i v12; 
  __m256i v13; 
  __m256i v14; 
  __m256i v15; 
  __m256i v16; 
  __m256i v17; 
  __m256i v18; 
  __m256i v19; 
  __m256i v20; 
  __m256i v21; 
  __int128 v22; 
  __int128 v23; 
  __int128 v24; 

  if ( CG_ServerCmdMP_CompareScores(_Mid->scoreInfo.client, _First->scoreInfo.client, _Mid->scoreInfo.team, _First->scoreInfo.team, _Mid->scoreInfo.score, _First->scoreInfo.score, _Mid->scoreInfo.deaths, _First->scoreInfo.deaths) )
  {
    v7 = *(__m256i *)&_Mid->scoreInfo.client;
    v10 = *(__m256i *)&_Mid->scoreInfo.rank_mp;
    v13 = *(__m256i *)&_Mid->scoreInfo.extrascore3;
    v16 = *(__m256i *)&_Mid->scoreInfo.hStatusIcon;
    v19 = *(__m256i *)_Mid->clanTag;
    v22 = *(_OWORD *)&_Mid->xuidString[20];
    *(_OWORD *)&_Mid->scoreInfo.client = *(_OWORD *)&_First->scoreInfo.client;
    *(_OWORD *)&_Mid->scoreInfo.deaths = *(_OWORD *)&_First->scoreInfo.deaths;
    *(_OWORD *)&_Mid->scoreInfo.rank_mp = *(_OWORD *)&_First->scoreInfo.rank_mp;
    *(_OWORD *)&_Mid->scoreInfo.assists = *(_OWORD *)&_First->scoreInfo.assists;
    *(_OWORD *)&_Mid->scoreInfo.extrascore3 = *(_OWORD *)&_First->scoreInfo.extrascore3;
    *(_OWORD *)&_Mid->scoreInfo.adrenaline = *(_OWORD *)&_First->scoreInfo.adrenaline;
    *(_OWORD *)&_Mid->scoreInfo.hStatusIcon = *(_OWORD *)&_First->scoreInfo.hStatusIcon;
    *(_OWORD *)&_Mid->voiceInfo.isMicOn = *(_OWORD *)&_First->voiceInfo.isMicOn;
    *(_OWORD *)_Mid->clanTag = *(_OWORD *)_First->clanTag;
    *(_OWORD *)&_Mid->xuidString[4] = *(_OWORD *)&_First->xuidString[4];
    *(_OWORD *)&_Mid->xuidString[20] = *(_OWORD *)&_First->xuidString[20];
    *(__m256i *)&_First->scoreInfo.client = v7;
    *(__m256i *)&_First->scoreInfo.rank_mp = v10;
    *(__m256i *)&_First->scoreInfo.extrascore3 = v13;
    *(__m256i *)&_First->scoreInfo.hStatusIcon = v16;
    *(__m256i *)_First->clanTag = v19;
    *(_OWORD *)&_First->xuidString[20] = v22;
  }
  if ( CG_ServerCmdMP_CompareScores(_Last->scoreInfo.client, _Mid->scoreInfo.client, _Last->scoreInfo.team, _Mid->scoreInfo.team, _Last->scoreInfo.score, _Mid->scoreInfo.score, _Last->scoreInfo.deaths, _Mid->scoreInfo.deaths) )
  {
    v8 = *(__m256i *)&_Last->scoreInfo.client;
    v11 = *(__m256i *)&_Last->scoreInfo.rank_mp;
    v14 = *(__m256i *)&_Last->scoreInfo.extrascore3;
    v17 = *(__m256i *)&_Last->scoreInfo.hStatusIcon;
    v20 = *(__m256i *)_Last->clanTag;
    v23 = *(_OWORD *)&_Last->xuidString[20];
    *(_OWORD *)&_Last->scoreInfo.client = *(_OWORD *)&_Mid->scoreInfo.client;
    *(_OWORD *)&_Last->scoreInfo.deaths = *(_OWORD *)&_Mid->scoreInfo.deaths;
    *(_OWORD *)&_Last->scoreInfo.rank_mp = *(_OWORD *)&_Mid->scoreInfo.rank_mp;
    *(_OWORD *)&_Last->scoreInfo.assists = *(_OWORD *)&_Mid->scoreInfo.assists;
    *(_OWORD *)&_Last->scoreInfo.extrascore3 = *(_OWORD *)&_Mid->scoreInfo.extrascore3;
    *(_OWORD *)&_Last->scoreInfo.adrenaline = *(_OWORD *)&_Mid->scoreInfo.adrenaline;
    *(_OWORD *)&_Last->scoreInfo.hStatusIcon = *(_OWORD *)&_Mid->scoreInfo.hStatusIcon;
    *(_OWORD *)&_Last->voiceInfo.isMicOn = *(_OWORD *)&_Mid->voiceInfo.isMicOn;
    *(_OWORD *)_Last->clanTag = *(_OWORD *)_Mid->clanTag;
    *(_OWORD *)&_Last->xuidString[4] = *(_OWORD *)&_Mid->xuidString[4];
    *(_OWORD *)&_Last->xuidString[20] = *(_OWORD *)&_Mid->xuidString[20];
    *(__m256i *)&_Mid->scoreInfo.client = v8;
    *(__m256i *)&_Mid->scoreInfo.rank_mp = v11;
    *(__m256i *)&_Mid->scoreInfo.extrascore3 = v14;
    *(__m256i *)&_Mid->scoreInfo.hStatusIcon = v17;
    *(__m256i *)_Mid->clanTag = v20;
    *(_OWORD *)&_Mid->xuidString[20] = v23;
    if ( CG_ServerCmdMP_CompareScores(_Mid->scoreInfo.client, _First->scoreInfo.client, _Mid->scoreInfo.team, _First->scoreInfo.team, _Mid->scoreInfo.score, _First->scoreInfo.score, _Mid->scoreInfo.deaths, _First->scoreInfo.deaths) )
    {
      v9 = *(__m256i *)&_Mid->scoreInfo.client;
      v12 = *(__m256i *)&_Mid->scoreInfo.rank_mp;
      v15 = *(__m256i *)&_Mid->scoreInfo.extrascore3;
      v18 = *(__m256i *)&_Mid->scoreInfo.hStatusIcon;
      v21 = *(__m256i *)_Mid->clanTag;
      v24 = *(_OWORD *)&_Mid->xuidString[20];
      *(_OWORD *)&_Mid->scoreInfo.client = *(_OWORD *)&_First->scoreInfo.client;
      *(_OWORD *)&_Mid->scoreInfo.deaths = *(_OWORD *)&_First->scoreInfo.deaths;
      *(_OWORD *)&_Mid->scoreInfo.rank_mp = *(_OWORD *)&_First->scoreInfo.rank_mp;
      *(_OWORD *)&_Mid->scoreInfo.assists = *(_OWORD *)&_First->scoreInfo.assists;
      *(_OWORD *)&_Mid->scoreInfo.extrascore3 = *(_OWORD *)&_First->scoreInfo.extrascore3;
      *(_OWORD *)&_Mid->scoreInfo.adrenaline = *(_OWORD *)&_First->scoreInfo.adrenaline;
      *(_OWORD *)&_Mid->scoreInfo.hStatusIcon = *(_OWORD *)&_First->scoreInfo.hStatusIcon;
      *(_OWORD *)&_Mid->voiceInfo.isMicOn = *(_OWORD *)&_First->voiceInfo.isMicOn;
      *(_OWORD *)_Mid->clanTag = *(_OWORD *)_First->clanTag;
      *(_OWORD *)&_Mid->xuidString[4] = *(_OWORD *)&_First->xuidString[4];
      *(_OWORD *)&_Mid->xuidString[20] = *(_OWORD *)&_First->xuidString[20];
      *(__m256i *)&_First->scoreInfo.client = v9;
      *(__m256i *)&_First->scoreInfo.rank_mp = v12;
      *(__m256i *)&_First->scoreInfo.extrascore3 = v15;
      *(__m256i *)&_First->scoreInfo.hStatusIcon = v18;
      *(__m256i *)_First->clanTag = v21;
      *(_OWORD *)&_First->xuidString[20] = v24;
    }
  }
}

/*
==============
std::_Partition_by_median_guess_unchecked<PostMatchInfo_t *,LUIScoreCompare>
==============
*/
std::pair<PostMatchInfo_t *,PostMatchInfo_t *> *std::_Partition_by_median_guess_unchecked<PostMatchInfo_t *,LUIScoreCompare>(std::pair<PostMatchInfo_t *,PostMatchInfo_t *> *result, PostMatchInfo_t *_First, PostMatchInfo_t *_Last, LUIScoreCompare _Pred)
{
  LUIScoreCompare v5; 
  PostMatchInfo_t *v7; 
  PostMatchInfo_t *v8; 
  PostMatchInfo_t *v9; 
  signed __int64 v10; 
  __int64 v11; 
  __int64 v12; 
  unsigned __int64 v13; 
  PostMatchInfo_t *v14; 
  unsigned __int64 v15; 
  const int *p_client; 
  const int *v17; 
  PostMatchInfo_t *i; 
  unsigned __int64 j; 
  bool v20; 
  const int *p_score; 
  int *v22; 
  std::pair<PostMatchInfo_t *,PostMatchInfo_t *> *v23; 
  __m256i v24; 
  __m256i v25; 
  __m256i v26; 
  __m256i v27; 
  __m256i v28; 
  __int128 v29; 
  __m256i v30; 
  __m256i v31; 
  __m256i v32; 
  __m256i v33; 
  __m256i v34; 
  __int128 v35; 
  __m256i v36; 
  __m256i v37; 
  __m256i v38; 
  __m256i v39; 
  __m256i v40; 
  __int128 v41; 
  __m256i v42; 
  __m256i v43; 
  __m256i v44; 
  __m256i v45; 
  __m256i v46; 
  __int128 v47; 
  __m256i v48; 
  __m256i v49; 
  __m256i v50; 
  __m256i v51; 
  __m256i v52; 
  __int128 v53; 
  __m256i v54; 
  __m256i v55; 
  __m256i v56; 
  __m256i v57; 
  __m256i v58; 
  __int128 v59; 
  __m256i v60; 
  __m256i v61; 
  __m256i v62; 
  __m256i v63; 
  __m256i v64; 
  __int128 v65; 

  v5 = _Pred;
  v7 = _Last - 1;
  v8 = &_First[(_Last - _First) >> 1];
  v9 = _First;
  v10 = &_Last[-1] - _First;
  if ( v10 > 40 )
  {
    v11 = (v10 + 1) >> 3;
    v12 = 176 * v11;
    v13 = 352 * v11;
    v14 = &_First[v11];
    std::_Med3_unchecked<PostMatchInfo_t *,LUIScoreCompare>(v9, v14, &_First[2 * v11], _Pred);
    std::_Med3_unchecked<PostMatchInfo_t *,LUIScoreCompare>(&v8[v12 / 0xFFFFFFFFFFFFFF50ui64], v8, &v8[(unsigned __int64)v12 / 0xB0], v5);
    v7 = (PostMatchInfo_t *)((char *)v7 - v12);
    std::_Med3_unchecked<PostMatchInfo_t *,LUIScoreCompare>(&_Last[v13 / 0xFFFFFFFFFFFFFF50ui64 - 1], v7, _Last - 1, v5);
    _Pred = v5;
    v9 = v14;
  }
  std::_Med3_unchecked<PostMatchInfo_t *,LUIScoreCompare>(v9, v8, v7, _Pred);
  v15 = (unsigned __int64)&v8[1];
  p_client = &v8->scoreInfo.client;
  if ( _First < v8 )
  {
    v17 = &v8->scoreInfo.client;
    do
    {
      p_client = v17;
      if ( CG_ServerCmdMP_CompareScores(v8[-1].scoreInfo.client, *v17, v8[-1].scoreInfo.team, v17[5], v8[-1].scoreInfo.score, v17[2], v8[-1].scoreInfo.deaths, v17[4]) )
        break;
      if ( CG_ServerCmdMP_CompareScores(*v17, v8[-1].scoreInfo.client, v17[5], v8[-1].scoreInfo.team, v17[2], v8[-1].scoreInfo.score, v17[4], v8[-1].scoreInfo.deaths) )
        break;
      v8 = (PostMatchInfo_t *)(v17 - 44);
      v17 = &v8->scoreInfo.client;
      p_client = &v8->scoreInfo.client;
    }
    while ( _First < v8 );
  }
  for ( i = (PostMatchInfo_t *)p_client; v15 < (unsigned __int64)_Last; i = v8 )
  {
    i = (PostMatchInfo_t *)p_client;
    if ( CG_ServerCmdMP_CompareScores(*(_DWORD *)v15, *p_client, *(_DWORD *)(v15 + 20), p_client[5], *(_DWORD *)(v15 + 8), p_client[2], *(_DWORD *)(v15 + 16), p_client[4]) )
      break;
    if ( CG_ServerCmdMP_CompareScores(*p_client, *(_DWORD *)v15, p_client[5], *(_DWORD *)(v15 + 20), p_client[2], *(_DWORD *)(v15 + 8), p_client[4], *(_DWORD *)(v15 + 16)) )
      break;
    v15 += 176i64;
  }
  for ( j = v15; ; j += 176i64 )
  {
    while ( 1 )
    {
      for ( ; j < (unsigned __int64)_Last; j += 176i64 )
      {
        if ( !CG_ServerCmdMP_CompareScores(v8->scoreInfo.client, *(_DWORD *)j, v8->scoreInfo.team, *(_DWORD *)(j + 20), v8->scoreInfo.score, *(_DWORD *)(j + 8), v8->scoreInfo.deaths, *(_DWORD *)(j + 16)) )
        {
          if ( CG_ServerCmdMP_CompareScores(*(_DWORD *)j, v8->scoreInfo.client, *(_DWORD *)(j + 20), v8->scoreInfo.team, *(_DWORD *)(j + 8), v8->scoreInfo.score, *(_DWORD *)(j + 16), v8->scoreInfo.deaths) )
            break;
          if ( v15 != j )
          {
            v24 = *(__m256i *)v15;
            v25 = *(__m256i *)(v15 + 32);
            v26 = *(__m256i *)(v15 + 64);
            v27 = *(__m256i *)(v15 + 96);
            v28 = *(__m256i *)(v15 + 128);
            v29 = *(_OWORD *)(v15 + 160);
            *(_OWORD *)v15 = *(_OWORD *)j;
            *(_OWORD *)(v15 + 16) = *(_OWORD *)(j + 16);
            *(_OWORD *)(v15 + 32) = *(_OWORD *)(j + 32);
            *(_OWORD *)(v15 + 48) = *(_OWORD *)(j + 48);
            *(_OWORD *)(v15 + 64) = *(_OWORD *)(j + 64);
            *(_OWORD *)(v15 + 80) = *(_OWORD *)(j + 80);
            *(_OWORD *)(v15 + 96) = *(_OWORD *)(j + 96);
            *(_OWORD *)(v15 + 112) = *(_OWORD *)(j + 112);
            *(_OWORD *)(v15 + 128) = *(_OWORD *)(j + 128);
            *(_OWORD *)(v15 + 144) = *(_OWORD *)(j + 144);
            *(_OWORD *)(v15 + 160) = *(_OWORD *)(j + 160);
            *(__m256i *)j = v24;
            *(__m256i *)(j + 32) = v25;
            *(__m256i *)(j + 64) = v26;
            *(__m256i *)(j + 96) = v27;
            *(__m256i *)(j + 128) = v28;
            *(_OWORD *)(j + 160) = v29;
          }
          v15 += 176i64;
        }
      }
      v20 = i == _First;
      if ( i > _First )
      {
        p_score = &i[-1].scoreInfo.score;
        do
        {
          v22 = (int *)(p_score - 2);
          if ( !CG_ServerCmdMP_CompareScores(*(p_score - 2), v8->scoreInfo.client, p_score[3], v8->scoreInfo.team, *p_score, v8->scoreInfo.score, p_score[2], v8->scoreInfo.deaths) )
          {
            if ( CG_ServerCmdMP_CompareScores(v8->scoreInfo.client, *v22, v8->scoreInfo.team, p_score[3], v8->scoreInfo.score, *p_score, v8->scoreInfo.deaths, p_score[2]) )
              break;
            if ( --v8 != (PostMatchInfo_t *)v22 )
            {
              v30 = *(__m256i *)&v8->scoreInfo.client;
              v31 = *(__m256i *)&v8->scoreInfo.rank_mp;
              v32 = *(__m256i *)&v8->scoreInfo.extrascore3;
              v33 = *(__m256i *)&v8->scoreInfo.hStatusIcon;
              v34 = *(__m256i *)v8->clanTag;
              v35 = *(_OWORD *)&v8->xuidString[20];
              *(_OWORD *)&v8->scoreInfo.client = *(_OWORD *)v22;
              *(_OWORD *)&v8->scoreInfo.deaths = *((_OWORD *)v22 + 1);
              *(_OWORD *)&v8->scoreInfo.rank_mp = *((_OWORD *)v22 + 2);
              *(_OWORD *)&v8->scoreInfo.assists = *((_OWORD *)v22 + 3);
              *(_OWORD *)&v8->scoreInfo.extrascore3 = *((_OWORD *)v22 + 4);
              *(_OWORD *)&v8->scoreInfo.adrenaline = *((_OWORD *)v22 + 5);
              *(_OWORD *)&v8->scoreInfo.hStatusIcon = *((_OWORD *)v22 + 6);
              *(_OWORD *)&v8->voiceInfo.isMicOn = *((_OWORD *)v22 + 7);
              *(_OWORD *)v8->clanTag = *((_OWORD *)v22 + 8);
              *(_OWORD *)&v8->xuidString[4] = *((_OWORD *)v22 + 9);
              *(_OWORD *)&v8->xuidString[20] = *((_OWORD *)v22 + 10);
              *(__m256i *)v22 = v30;
              *((__m256i *)v22 + 1) = v31;
              *((__m256i *)v22 + 2) = v32;
              *((__m256i *)v22 + 3) = v33;
              *((__m256i *)v22 + 4) = v34;
              *((_OWORD *)v22 + 10) = v35;
            }
          }
          --i;
          p_score -= 44;
        }
        while ( _First < i );
        v20 = i == _First;
      }
      if ( v20 )
        break;
      --i;
      if ( (PostMatchInfo_t *)j == _Last )
      {
        if ( i != --v8 )
        {
          v48 = *(__m256i *)&i->scoreInfo.client;
          v49 = *(__m256i *)&i->scoreInfo.rank_mp;
          v50 = *(__m256i *)&i->scoreInfo.extrascore3;
          v51 = *(__m256i *)&i->scoreInfo.hStatusIcon;
          v52 = *(__m256i *)i->clanTag;
          v53 = *(_OWORD *)&i->xuidString[20];
          *(_OWORD *)&i->scoreInfo.client = *(_OWORD *)&v8->scoreInfo.client;
          *(_OWORD *)&i->scoreInfo.deaths = *(_OWORD *)&v8->scoreInfo.deaths;
          *(_OWORD *)&i->scoreInfo.rank_mp = *(_OWORD *)&v8->scoreInfo.rank_mp;
          *(_OWORD *)&i->scoreInfo.assists = *(_OWORD *)&v8->scoreInfo.assists;
          *(_OWORD *)&i->scoreInfo.extrascore3 = *(_OWORD *)&v8->scoreInfo.extrascore3;
          *(_OWORD *)&i->scoreInfo.adrenaline = *(_OWORD *)&v8->scoreInfo.adrenaline;
          *(_OWORD *)&i->scoreInfo.hStatusIcon = *(_OWORD *)&v8->scoreInfo.hStatusIcon;
          *(_OWORD *)&i->voiceInfo.isMicOn = *(_OWORD *)&v8->voiceInfo.isMicOn;
          *(_OWORD *)i->clanTag = *(_OWORD *)v8->clanTag;
          *(_OWORD *)&i->xuidString[4] = *(_OWORD *)&v8->xuidString[4];
          *(_OWORD *)&i->xuidString[20] = *(_OWORD *)&v8->xuidString[20];
          *(__m256i *)&v8->scoreInfo.client = v48;
          *(__m256i *)&v8->scoreInfo.rank_mp = v49;
          *(__m256i *)&v8->scoreInfo.extrascore3 = v50;
          *(__m256i *)&v8->scoreInfo.hStatusIcon = v51;
          *(__m256i *)v8->clanTag = v52;
          *(_OWORD *)&v8->xuidString[20] = v53;
        }
        v15 -= 176i64;
        v54 = *(__m256i *)&v8->scoreInfo.client;
        v55 = *(__m256i *)&v8->scoreInfo.rank_mp;
        v56 = *(__m256i *)&v8->scoreInfo.extrascore3;
        v57 = *(__m256i *)&v8->scoreInfo.hStatusIcon;
        v58 = *(__m256i *)v8->clanTag;
        v59 = *(_OWORD *)&v8->xuidString[20];
        *(_OWORD *)&v8->scoreInfo.client = *(_OWORD *)v15;
        *(_OWORD *)&v8->scoreInfo.deaths = *(_OWORD *)(v15 + 16);
        *(_OWORD *)&v8->scoreInfo.rank_mp = *(_OWORD *)(v15 + 32);
        *(_OWORD *)&v8->scoreInfo.assists = *(_OWORD *)(v15 + 48);
        *(_OWORD *)&v8->scoreInfo.extrascore3 = *(_OWORD *)(v15 + 64);
        *(_OWORD *)&v8->scoreInfo.adrenaline = *(_OWORD *)(v15 + 80);
        *(_OWORD *)&v8->scoreInfo.hStatusIcon = *(_OWORD *)(v15 + 96);
        *(_OWORD *)&v8->voiceInfo.isMicOn = *(_OWORD *)(v15 + 112);
        *(_OWORD *)v8->clanTag = *(_OWORD *)(v15 + 128);
        *(_OWORD *)&v8->xuidString[4] = *(_OWORD *)(v15 + 144);
        *(_OWORD *)&v8->xuidString[20] = *(_OWORD *)(v15 + 160);
        *(__m256i *)v15 = v54;
        *(__m256i *)(v15 + 32) = v55;
        *(__m256i *)(v15 + 64) = v56;
        *(__m256i *)(v15 + 96) = v57;
        *(__m256i *)(v15 + 128) = v58;
        *(_OWORD *)(v15 + 160) = v59;
      }
      else
      {
        v60 = *(__m256i *)j;
        v61 = *(__m256i *)(j + 32);
        v62 = *(__m256i *)(j + 64);
        v63 = *(__m256i *)(j + 96);
        v64 = *(__m256i *)(j + 128);
        v65 = *(_OWORD *)(j + 160);
        *(_OWORD *)j = *(_OWORD *)&i->scoreInfo.client;
        *(_OWORD *)(j + 16) = *(_OWORD *)&i->scoreInfo.deaths;
        *(_OWORD *)(j + 32) = *(_OWORD *)&i->scoreInfo.rank_mp;
        *(_OWORD *)(j + 48) = *(_OWORD *)&i->scoreInfo.assists;
        *(_OWORD *)(j + 64) = *(_OWORD *)&i->scoreInfo.extrascore3;
        *(_OWORD *)(j + 80) = *(_OWORD *)&i->scoreInfo.adrenaline;
        *(_OWORD *)(j + 96) = *(_OWORD *)&i->scoreInfo.hStatusIcon;
        *(_OWORD *)(j + 112) = *(_OWORD *)&i->voiceInfo.isMicOn;
        *(_OWORD *)(j + 128) = *(_OWORD *)i->clanTag;
        *(_OWORD *)(j + 144) = *(_OWORD *)&i->xuidString[4];
        *(_OWORD *)(j + 160) = *(_OWORD *)&i->xuidString[20];
        j += 176i64;
        *(__m256i *)&i->scoreInfo.client = v60;
        *(__m256i *)&i->scoreInfo.rank_mp = v61;
        *(__m256i *)&i->scoreInfo.extrascore3 = v62;
        *(__m256i *)&i->scoreInfo.hStatusIcon = v63;
        *(__m256i *)i->clanTag = v64;
        *(_OWORD *)&i->xuidString[20] = v65;
      }
    }
    if ( (PostMatchInfo_t *)j == _Last )
      break;
    if ( v15 != j )
    {
      v36 = *(__m256i *)&v8->scoreInfo.client;
      v37 = *(__m256i *)&v8->scoreInfo.rank_mp;
      v38 = *(__m256i *)&v8->scoreInfo.extrascore3;
      v39 = *(__m256i *)&v8->scoreInfo.hStatusIcon;
      v40 = *(__m256i *)v8->clanTag;
      v41 = *(_OWORD *)&v8->xuidString[20];
      *(_OWORD *)&v8->scoreInfo.client = *(_OWORD *)v15;
      *(_OWORD *)&v8->scoreInfo.deaths = *(_OWORD *)(v15 + 16);
      *(_OWORD *)&v8->scoreInfo.rank_mp = *(_OWORD *)(v15 + 32);
      *(_OWORD *)&v8->scoreInfo.assists = *(_OWORD *)(v15 + 48);
      *(_OWORD *)&v8->scoreInfo.extrascore3 = *(_OWORD *)(v15 + 64);
      *(_OWORD *)&v8->scoreInfo.adrenaline = *(_OWORD *)(v15 + 80);
      *(_OWORD *)&v8->scoreInfo.hStatusIcon = *(_OWORD *)(v15 + 96);
      *(_OWORD *)&v8->voiceInfo.isMicOn = *(_OWORD *)(v15 + 112);
      *(_OWORD *)v8->clanTag = *(_OWORD *)(v15 + 128);
      *(_OWORD *)&v8->xuidString[4] = *(_OWORD *)(v15 + 144);
      *(_OWORD *)&v8->xuidString[20] = *(_OWORD *)(v15 + 160);
      *(__m256i *)v15 = v36;
      *(__m256i *)(v15 + 32) = v37;
      *(__m256i *)(v15 + 64) = v38;
      *(__m256i *)(v15 + 96) = v39;
      *(__m256i *)(v15 + 128) = v40;
      *(_OWORD *)(v15 + 160) = v41;
    }
    v15 += 176i64;
    v42 = *(__m256i *)&v8->scoreInfo.client;
    v43 = *(__m256i *)&v8->scoreInfo.rank_mp;
    v44 = *(__m256i *)&v8->scoreInfo.extrascore3;
    v45 = *(__m256i *)&v8->scoreInfo.hStatusIcon;
    v46 = *(__m256i *)v8->clanTag;
    v47 = *(_OWORD *)&v8->xuidString[20];
    *(_OWORD *)&v8->scoreInfo.client = *(_OWORD *)j;
    *(_OWORD *)&v8->scoreInfo.deaths = *(_OWORD *)(j + 16);
    *(_OWORD *)&v8->scoreInfo.rank_mp = *(_OWORD *)(j + 32);
    *(_OWORD *)&v8->scoreInfo.assists = *(_OWORD *)(j + 48);
    *(_OWORD *)&v8->scoreInfo.extrascore3 = *(_OWORD *)(j + 64);
    *(_OWORD *)&v8->scoreInfo.adrenaline = *(_OWORD *)(j + 80);
    *(_OWORD *)&v8->scoreInfo.hStatusIcon = *(_OWORD *)(j + 96);
    *(_OWORD *)&v8->voiceInfo.isMicOn = *(_OWORD *)(j + 112);
    *(_OWORD *)v8->clanTag = *(_OWORD *)(j + 128);
    *(_OWORD *)&v8->xuidString[4] = *(_OWORD *)(j + 144);
    *(_OWORD *)&v8->xuidString[20] = *(_OWORD *)(j + 160);
    ++v8;
    *(__m256i *)j = v42;
    *(__m256i *)(j + 32) = v43;
    *(__m256i *)(j + 64) = v44;
    *(__m256i *)(j + 96) = v45;
    *(__m256i *)(j + 128) = v46;
    *(_OWORD *)(j + 160) = v47;
  }
  v23 = result;
  result->second = (PostMatchInfo_t *)v15;
  result->first = v8;
  return v23;
}

/*
==============
std::_Pop_heap_hole_by_index<PostMatchInfo_t *,PostMatchInfo_t,LUIScoreCompare>
==============
*/
void std::_Pop_heap_hole_by_index<PostMatchInfo_t *,PostMatchInfo_t,LUIScoreCompare>(PostMatchInfo_t *_First, __int64 _Hole, __int64 _Bottom, PostMatchInfo_t *_Val)
{
  __int64 v5; 
  __int64 v7; 
  __int64 i; 
  PostMatchInfo_t *v11; 
  PostMatchInfo_t *v12; 
  PostMatchInfo_t *v13; 
  __int64 v14; 
  PostMatchInfo_t *v15; 
  PostMatchInfo_t *v16; 
  __int64 v17; 
  PostMatchInfo_t *v18; 
  __int64 v19; 
  PostMatchInfo_t *v20; 
  PostMatchInfo_t *v21; 

  v5 = (_Bottom - 1) >> 1;
  v7 = _Hole;
  for ( i = _Hole; i < v5; *(_OWORD *)&v12->xuidString[20] = *(_OWORD *)&v13->xuidString[20] )
  {
    i = 2 * i + 2;
    v11 = &_First[i];
    if ( CG_ServerCmdMP_CompareScores(v11->scoreInfo.client, v11[-1].scoreInfo.client, v11->scoreInfo.team, v11[-1].scoreInfo.team, v11->scoreInfo.score, v11[-1].scoreInfo.score, v11->scoreInfo.deaths, v11[-1].scoreInfo.deaths) )
      --i;
    v12 = &_First[v7];
    v7 = i;
    v13 = &_First[i];
    *(_OWORD *)&v12->scoreInfo.client = *(_OWORD *)&v13->scoreInfo.client;
    *(_OWORD *)&v12->scoreInfo.deaths = *(_OWORD *)&v13->scoreInfo.deaths;
    *(_OWORD *)&v12->scoreInfo.rank_mp = *(_OWORD *)&v13->scoreInfo.rank_mp;
    *(_OWORD *)&v12->scoreInfo.assists = *(_OWORD *)&v13->scoreInfo.assists;
    *(_OWORD *)&v12->scoreInfo.extrascore3 = *(_OWORD *)&v13->scoreInfo.extrascore3;
    *(_OWORD *)&v12->scoreInfo.adrenaline = *(_OWORD *)&v13->scoreInfo.adrenaline;
    *(_OWORD *)&v12->scoreInfo.hStatusIcon = *(_OWORD *)&v13->scoreInfo.hStatusIcon;
    *(_OWORD *)&v12->voiceInfo.isMicOn = *(_OWORD *)&v13->voiceInfo.isMicOn;
    *(_OWORD *)v12->clanTag = *(_OWORD *)v13->clanTag;
    *(_OWORD *)&v12->xuidString[4] = *(_OWORD *)&v13->xuidString[4];
  }
  if ( i == v5 && (_Bottom & 1) == 0 )
  {
    v14 = v7;
    v15 = &_First[_Bottom - 1];
    v7 = _Bottom - 1;
    v16 = &_First[v14];
    *(_OWORD *)&v16->scoreInfo.client = *(_OWORD *)&v15->scoreInfo.client;
    *(_OWORD *)&v16->scoreInfo.deaths = *(_OWORD *)&v15->scoreInfo.deaths;
    *(_OWORD *)&v16->scoreInfo.rank_mp = *(_OWORD *)&v15->scoreInfo.rank_mp;
    *(_OWORD *)&v16->scoreInfo.assists = *(_OWORD *)&v15->scoreInfo.assists;
    *(_OWORD *)&v16->scoreInfo.extrascore3 = *(_OWORD *)&v15->scoreInfo.extrascore3;
    *(_OWORD *)&v16->scoreInfo.adrenaline = *(_OWORD *)&v15->scoreInfo.adrenaline;
    *(_OWORD *)&v16->scoreInfo.hStatusIcon = *(_OWORD *)&v15->scoreInfo.hStatusIcon;
    *(_OWORD *)&v16->voiceInfo.isMicOn = *(_OWORD *)&v15->voiceInfo.isMicOn;
    *(_OWORD *)v16->clanTag = *(_OWORD *)v15->clanTag;
    *(_OWORD *)&v16->xuidString[4] = *(_OWORD *)&v15->xuidString[4];
    *(_OWORD *)&v16->xuidString[20] = *(_OWORD *)&v15->xuidString[20];
  }
  if ( _Hole < v7 )
  {
    do
    {
      v17 = (v7 - 1) >> 1;
      v18 = &_First[v17];
      if ( !CG_ServerCmdMP_CompareScores(v18->scoreInfo.client, _Val->scoreInfo.client, v18->scoreInfo.team, _Val->scoreInfo.team, v18->scoreInfo.score, _Val->scoreInfo.score, v18->scoreInfo.deaths, _Val->scoreInfo.deaths) )
        break;
      v19 = v7;
      v7 = (v7 - 1) >> 1;
      v20 = &_First[v19];
      *(_OWORD *)&v20->scoreInfo.client = *(_OWORD *)&v18->scoreInfo.client;
      *(_OWORD *)&v20->scoreInfo.deaths = *(_OWORD *)&v18->scoreInfo.deaths;
      *(_OWORD *)&v20->scoreInfo.rank_mp = *(_OWORD *)&v18->scoreInfo.rank_mp;
      *(_OWORD *)&v20->scoreInfo.assists = *(_OWORD *)&v18->scoreInfo.assists;
      *(_OWORD *)&v20->scoreInfo.extrascore3 = *(_OWORD *)&v18->scoreInfo.extrascore3;
      *(_OWORD *)&v20->scoreInfo.adrenaline = *(_OWORD *)&v18->scoreInfo.adrenaline;
      *(_OWORD *)&v20->scoreInfo.hStatusIcon = *(_OWORD *)&v18->scoreInfo.hStatusIcon;
      *(_OWORD *)&v20->voiceInfo.isMicOn = *(_OWORD *)&v18->voiceInfo.isMicOn;
      *(_OWORD *)v20->clanTag = *(_OWORD *)v18->clanTag;
      *(_OWORD *)&v20->xuidString[4] = *(_OWORD *)&v18->xuidString[4];
      *(_OWORD *)&v20->xuidString[20] = *(_OWORD *)&v18->xuidString[20];
    }
    while ( _Hole < v17 );
  }
  v21 = &_First[v7];
  *(_OWORD *)&v21->scoreInfo.client = *(_OWORD *)&_Val->scoreInfo.client;
  *(_OWORD *)&v21->scoreInfo.deaths = *(_OWORD *)&_Val->scoreInfo.deaths;
  *(_OWORD *)&v21->scoreInfo.rank_mp = *(_OWORD *)&_Val->scoreInfo.rank_mp;
  *(_OWORD *)&v21->scoreInfo.assists = *(_OWORD *)&_Val->scoreInfo.assists;
  *(_OWORD *)&v21->scoreInfo.extrascore3 = *(_OWORD *)&_Val->scoreInfo.extrascore3;
  *(_OWORD *)&v21->scoreInfo.adrenaline = *(_OWORD *)&_Val->scoreInfo.adrenaline;
  *(_OWORD *)&v21->scoreInfo.hStatusIcon = *(_OWORD *)&_Val->scoreInfo.hStatusIcon;
  *(_OWORD *)&v21->voiceInfo.isMicOn = *(_OWORD *)&_Val->voiceInfo.isMicOn;
  *(_OWORD *)v21->clanTag = *(_OWORD *)_Val->clanTag;
  *(_OWORD *)&v21->xuidString[4] = *(_OWORD *)&_Val->xuidString[4];
  *(_OWORD *)&v21->xuidString[20] = *(_OWORD *)&_Val->xuidString[20];
}

/*
==============
std::_Sort_unchecked<PostMatchInfo_t *,LUIScoreCompare>
==============
*/
void std::_Sort_unchecked<PostMatchInfo_t *,LUIScoreCompare>(PostMatchInfo_t *_First, PostMatchInfo_t *_Last, __int64 _Ideal, LUIScoreCompare _Pred)
{
  PostMatchInfo_t *v4; 
  PostMatchInfo_t *v5; 
  __int64 v8; 
  PostMatchInfo_t *v9; 
  PostMatchInfo_t *second; 
  PostMatchInfo_t *v11; 
  PostMatchInfo_t *first; 
  const int *p_score; 
  int deaths; 
  int team; 
  PostMatchInfo_t *v16; 
  int client; 
  int score2; 
  int deaths1; 
  int score; 
  PostMatchInfo_t *v21; 
  const int *v22; 
  int v23; 
  int v24; 
  int v25; 
  int score1; 
  int deaths2; 
  PostMatchInfo_t *v28; 
  std::pair<PostMatchInfo_t *,PostMatchInfo_t *> result; 
  PostMatchInfo_t client1; 

  v4 = _Last;
  v28 = _Last;
  v5 = _First;
  v8 = _Last - _First;
  if ( v8 <= 32 )
  {
LABEL_7:
    if ( v8 >= 2 && v5 != v4 )
    {
      v11 = v5 + 1;
      if ( &v5[1] != v4 )
      {
        first = (PostMatchInfo_t *)(168i64 - (_QWORD)v5);
        p_score = &v5->scoreInfo.score;
        result.first = (PostMatchInfo_t *)(168i64 - (_QWORD)v5);
        do
        {
          deaths = v5->scoreInfo.deaths;
          team = v5->scoreInfo.team;
          v16 = v11;
          client = v5->scoreInfo.client;
          *(__m256i *)&client1.scoreInfo.client = *(__m256i *)&v11->scoreInfo.client;
          *(__m256i *)&client1.scoreInfo.rank_mp = *(__m256i *)&v11->scoreInfo.rank_mp;
          *(__m256i *)&client1.scoreInfo.extrascore3 = *(__m256i *)&v11->scoreInfo.extrascore3;
          *(__m256i *)&client1.scoreInfo.hStatusIcon = *(__m256i *)&v11->scoreInfo.hStatusIcon;
          *(__m256i *)client1.clanTag = *(__m256i *)v11->clanTag;
          deaths2 = deaths;
          score2 = v5->scoreInfo.score;
          *(_OWORD *)&client1.xuidString[20] = *(_OWORD *)&v11->xuidString[20];
          deaths1 = client1.scoreInfo.deaths;
          score = client1.scoreInfo.score;
          if ( CG_ServerCmdMP_CompareScores(client1.scoreInfo.client, client, client1.scoreInfo.team, team, client1.scoreInfo.score, score2, client1.scoreInfo.deaths, deaths2) )
          {
            memmove_0((void *)(344i64 - (_QWORD)first), v5, (size_t)p_score + (_QWORD)first);
            *v5 = client1;
          }
          else
          {
            v22 = p_score - 2;
            score1 = score;
            v23 = client1.scoreInfo.team;
            if ( CG_ServerCmdMP_CompareScores(client1.scoreInfo.client, *(p_score - 2), client1.scoreInfo.team, p_score[3], score1, *p_score, deaths1, p_score[2]) )
            {
              v24 = client1.scoreInfo.score;
              do
              {
                v25 = client1.scoreInfo.client;
                *(_OWORD *)&v16->scoreInfo.client = *(_OWORD *)v22;
                *(_OWORD *)&v16->scoreInfo.deaths = *((_OWORD *)v22 + 1);
                *(_OWORD *)&v16->scoreInfo.rank_mp = *((_OWORD *)v22 + 2);
                *(_OWORD *)&v16->scoreInfo.assists = *((_OWORD *)v22 + 3);
                *(_OWORD *)&v16->scoreInfo.extrascore3 = *((_OWORD *)v22 + 4);
                *(_OWORD *)&v16->scoreInfo.adrenaline = *((_OWORD *)v22 + 5);
                *(_OWORD *)&v16->scoreInfo.hStatusIcon = *((_OWORD *)v22 + 6);
                *(_OWORD *)&v16->voiceInfo.isMicOn = *((_OWORD *)v22 + 7);
                *(_OWORD *)v16->clanTag = *((_OWORD *)v22 + 8);
                *(_OWORD *)&v16->xuidString[4] = *((_OWORD *)v22 + 9);
                *(_OWORD *)&v16->xuidString[20] = *((_OWORD *)v22 + 10);
                v16 = (PostMatchInfo_t *)v22;
                v22 -= 44;
              }
              while ( CG_ServerCmdMP_CompareScores(v25, *v22, v23, v22[5], v24, v22[2], deaths1, v22[4]) );
              v4 = v28;
            }
            first = result.first;
            *v16 = client1;
          }
          ++v11;
          p_score += 44;
        }
        while ( v11 != v4 );
      }
    }
  }
  else
  {
    while ( _Ideal > 0 )
    {
      std::_Partition_by_median_guess_unchecked<PostMatchInfo_t *,LUIScoreCompare>(&result, v5, v4, _Pred);
      v9 = result.first;
      second = result.second;
      _Ideal = (_Ideal >> 2) + (_Ideal >> 1);
      if ( result.first - v5 >= v4 - result.second )
      {
        std::_Sort_unchecked<PostMatchInfo_t *,LUIScoreCompare>(result.second, v4, _Ideal, _Pred);
        v4 = v9;
        v28 = v9;
      }
      else
      {
        std::_Sort_unchecked<PostMatchInfo_t *,LUIScoreCompare>(v5, result.first, _Ideal, _Pred);
        v5 = second;
      }
      v8 = v4 - v5;
      if ( v8 <= 32 )
        goto LABEL_7;
    }
    std::_Make_heap_unchecked<PostMatchInfo_t *,LUIScoreCompare>(v5, v4, _Pred);
    if ( v4 - v5 >= 2 )
    {
      v21 = v4 - 1;
      do
      {
        client1 = *v21;
        *(_OWORD *)&v21->scoreInfo.client = *(_OWORD *)&v5->scoreInfo.client;
        *(_OWORD *)&v21->scoreInfo.deaths = *(_OWORD *)&v5->scoreInfo.deaths;
        *(_OWORD *)&v21->scoreInfo.rank_mp = *(_OWORD *)&v5->scoreInfo.rank_mp;
        *(_OWORD *)&v21->scoreInfo.assists = *(_OWORD *)&v5->scoreInfo.assists;
        *(_OWORD *)&v21->scoreInfo.extrascore3 = *(_OWORD *)&v5->scoreInfo.extrascore3;
        *(_OWORD *)&v21->scoreInfo.adrenaline = *(_OWORD *)&v5->scoreInfo.adrenaline;
        *(_OWORD *)&v21->scoreInfo.hStatusIcon = *(_OWORD *)&v5->scoreInfo.hStatusIcon;
        *(_OWORD *)&v21->voiceInfo.isMicOn = *(_OWORD *)&v5->voiceInfo.isMicOn;
        *(_OWORD *)v21->clanTag = *(_OWORD *)v5->clanTag;
        *(_OWORD *)&v21->xuidString[4] = *(_OWORD *)&v5->xuidString[4];
        *(_OWORD *)&v21->xuidString[20] = *(_OWORD *)&v5->xuidString[20];
        std::_Pop_heap_hole_by_index<PostMatchInfo_t *,PostMatchInfo_t,LUIScoreCompare>(v5, 0i64, v21 - v5, &client1, _Pred);
        --v21;
      }
      while ( ((char *)v21 - (char *)v5 + 176) / 176 >= 2 );
    }
  }
}

