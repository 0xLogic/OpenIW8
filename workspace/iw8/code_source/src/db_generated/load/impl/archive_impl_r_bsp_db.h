/*
==============
Preload_LightGridVolumePackingParamsArray
==============
*/

void __fastcall Preload_LightGridVolumePackingParamsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_LightGridVolumePackingParamsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxVoxelTopDownViewNodeStream
==============
*/

void __fastcall Preload_GfxVoxelTopDownViewNodeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxVoxelTopDownViewNodeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxLightAABBNodeArray
==============
*/

void __fastcall Load_GfxLightAABBNodeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxLightAABBNodeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxGpuLightGridVoxelStartTetrahedronArray
==============
*/

int __fastcall Mark_GfxGpuLightGridVoxelStartTetrahedronArray(const unsigned __int64 count)
{
  return ?Mark_GfxGpuLightGridVoxelStartTetrahedronArray@@YAH_K@Z(count);
}

/*
==============
Load_ProcessStructLayout_GfxVoxelTreeHeader
==============
*/

void Load_ProcessStructLayout_GfxVoxelTreeHeader(void)
{
  ?Load_ProcessStructLayout_GfxVoxelTreeHeader@@YAXXZ();
}

/*
==============
Load_GfxLightmapAtlasDataTemp
==============
*/

void __fastcall Load_GfxLightmapAtlasDataTemp(const DBStreamStart streamStart)
{
  ?Load_GfxLightmapAtlasDataTemp@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_GfxGpuLightGridVoxelTree
==============
*/

GfxGpuLightGridVoxelTree *__fastcall AllocPostload_GfxGpuLightGridVoxelTree()
{
  return ?AllocPostload_GfxGpuLightGridVoxelTree@@YAPEAUGfxGpuLightGridVoxelTree@@XZ();
}

/*
==============
Preload_GfxSceneDynBrushStream
==============
*/

void __fastcall Preload_GfxSceneDynBrushStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxSceneDynBrushStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic396
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic396(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic396@@YAXXZ();
}

/*
==============
Load_GfxDynamicLightsetLMData
==============
*/

void __fastcall Load_GfxDynamicLightsetLMData(const DBStreamStart streamStart)
{
  ?Load_GfxDynamicLightsetLMData@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_GfxVoxelLeafNode
==============
*/

GfxVoxelLeafNode *__fastcall AllocPostload_GfxVoxelLeafNode()
{
  return ?AllocPostload_GfxVoxelLeafNode@@YAPEAUGfxVoxelLeafNode@@XZ();
}

/*
==============
Preload_GfxLightAABBNodeArray
==============
*/

void __fastcall Preload_GfxLightAABBNodeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxLightAABBNodeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic494
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic494(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic494@@YAXXZ();
}

/*
==============
Load_GfxDrawSurfStream
==============
*/

void __fastcall Load_GfxDrawSurfStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxDrawSurfStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxGpuLightGridZone
==============
*/

int __fastcall Mark_GfxGpuLightGridZone()
{
  return ?Mark_GfxGpuLightGridZone@@YAHXZ();
}

/*
==============
Preload_GfxPrecomputedSkyIllumination
==============
*/

void __fastcall Preload_GfxPrecomputedSkyIllumination(const DBStreamStart streamStart)
{
  ?Preload_GfxPrecomputedSkyIllumination@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_GfxVoxelInternalNodeArray
==============
*/

int __fastcall Mark_GfxVoxelInternalNodeArray(const unsigned __int64 count)
{
  return ?Mark_GfxVoxelInternalNodeArray@@YAH_K@Z(count);
}

/*
==============
Mark_GfxDecalVolumeTransientDataArray
==============
*/

int __fastcall Mark_GfxDecalVolumeTransientDataArray(const unsigned __int64 count)
{
  return ?Mark_GfxDecalVolumeTransientDataArray@@YAH_K@Z(count);
}

/*
==============
AllocPreload_GfxDynamicLightset
==============
*/

GfxDynamicLightset *__fastcall AllocPreload_GfxDynamicLightset()
{
  return ?AllocPreload_GfxDynamicLightset@@YAPEAUGfxDynamicLightset@@XZ();
}

/*
==============
Load_GfxLightGridVolumeAtlasDataTempStream
==============
*/

void __fastcall Load_GfxLightGridVolumeAtlasDataTempStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxLightGridVolumeAtlasDataTempStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxDynamicLightsetLMData
==============
*/

void __fastcall Postload_GfxDynamicLightsetLMData(const DBStreamStart streamStart)
{
  ?Postload_GfxDynamicLightsetLMData@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxModelLightmapInstArray
==============
*/

void __fastcall Postload_GfxModelLightmapInstArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxModelLightmapInstArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_GfxGpuLightGridVoxelStartTetrahedron
==============
*/

GfxGpuLightGridVoxelStartTetrahedron *__fastcall AllocPreload_GfxGpuLightGridVoxelStartTetrahedron()
{
  return ?AllocPreload_GfxGpuLightGridVoxelStartTetrahedron@@YAPEAUGfxGpuLightGridVoxelStartTetrahedron@@XZ();
}

/*
==============
Mark_mnode_t
==============
*/

int __fastcall Mark_mnode_t()
{
  return ?Mark_mnode_t@@YAHXZ();
}

/*
==============
Preload_GfxWorldLightmapReindexDataElementArray
==============
*/

void __fastcall Preload_GfxWorldLightmapReindexDataElementArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxWorldLightmapReindexDataElementArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_BspVersionStream
==============
*/

void __fastcall Load_BspVersionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_BspVersionStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxWorldPtrArray
==============
*/

void __fastcall Postload_GfxWorldPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxWorldPtrArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxStaticDecalVolumeUidStream
==============
*/

void __fastcall Postload_GfxStaticDecalVolumeUidStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxStaticDecalVolumeUidStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxLightmapTypeStream
==============
*/

void __fastcall Preload_GfxLightmapTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxLightmapTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxGpuLightGridTetrahedronNeighborsArray
==============
*/

void __fastcall Preload_GfxGpuLightGridTetrahedronNeighborsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxGpuLightGridTetrahedronNeighborsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxVoxelTreeHeader
==============
*/

void __fastcall Postload_GfxVoxelTreeHeader(const DBStreamStart streamStart)
{
  ?Postload_GfxVoxelTreeHeader@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_GfxLightmapAtlasDataTempArray
==============
*/

void __fastcall Preload_GfxLightmapAtlasDataTempArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxLightmapAtlasDataTempArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxVoxelLeafNode
==============
*/

void __fastcall Preload_GfxVoxelLeafNode(const DBStreamStart streamStart)
{
  ?Preload_GfxVoxelLeafNode@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic872
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic872(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic872@@YAXXZ();
}

/*
==============
AllocPreload_GfxStaticDecalVolumeMask
==============
*/

GfxStaticDecalVolumeMask *__fastcall AllocPreload_GfxStaticDecalVolumeMask()
{
  return ?AllocPreload_GfxStaticDecalVolumeMask@@YAPEAUGfxStaticDecalVolumeMask@@XZ();
}

/*
==============
Preload_GfxMapEntLookup
==============
*/

void __fastcall Preload_GfxMapEntLookup(const DBStreamStart streamStart)
{
  ?Preload_GfxMapEntLookup@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_GfxSceneDynModelArray
==============
*/

void __fastcall Preload_GfxSceneDynModelArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxSceneDynModelArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic550
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic550(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic550@@YAXXZ();
}

/*
==============
AllocLoad_StaticModelIndex
==============
*/

unsigned __int16 *__fastcall AllocLoad_StaticModelIndex()
{
  return ?AllocLoad_StaticModelIndex@@YAPEAGXZ();
}

/*
==============
AllocPostload_GfxGpuLightGridTetrahedronVisibility
==============
*/

GfxGpuLightGridTetrahedronVisibility *__fastcall AllocPostload_GfxGpuLightGridTetrahedronVisibility()
{
  return ?AllocPostload_GfxGpuLightGridTetrahedronVisibility@@YAPEAUGfxGpuLightGridTetrahedronVisibility@@XZ();
}

/*
==============
Postload_GfxStaticModelLightGridVolumeFlagsArray
==============
*/

void __fastcall Postload_GfxStaticModelLightGridVolumeFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxStaticModelLightGridVolumeFlagsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_LightGridVolumePackingParams
==============
*/

LightGridVolumePackingParams *__fastcall AllocLoad_LightGridVolumePackingParams()
{
  return ?AllocLoad_LightGridVolumePackingParams@@YAPEAULightGridVolumePackingParams@@XZ();
}

/*
==============
AllocLoad_GfxCompressedSunShadowDataTempPtr
==============
*/

GfxCompressedSunShadowDataTemp **__fastcall AllocLoad_GfxCompressedSunShadowDataTempPtr()
{
  return ?AllocLoad_GfxCompressedSunShadowDataTempPtr@@YAPEAPEAUGfxCompressedSunShadowDataTemp@@XZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic578
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic578(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic578@@YAXXZ();
}

/*
==============
Load_GfxLightGridTypeStream
==============
*/

void __fastcall Load_GfxLightGridTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxLightGridTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_GfxStaticDecalVolumeUid
==============
*/

GfxStaticDecalVolumeUid *__fastcall AllocPreload_GfxStaticDecalVolumeUid()
{
  return ?AllocPreload_GfxStaticDecalVolumeUid@@YAPEAUGfxStaticDecalVolumeUid@@XZ();
}

/*
==============
Postload_GfxCellTreeCountArray
==============
*/

void __fastcall Postload_GfxCellTreeCountArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxCellTreeCountArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_GfxDynamicLightsetGChunkInfo
==============
*/

GfxDynamicLightsetGChunkInfo *__fastcall AllocLoad_GfxDynamicLightsetGChunkInfo()
{
  return ?AllocLoad_GfxDynamicLightsetGChunkInfo@@YAPEAUGfxDynamicLightsetGChunkInfo@@XZ();
}

/*
==============
Load_GfxCellArray
==============
*/

void __fastcall Load_GfxCellArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxCellArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxWorldDpvsStatic
==============
*/

void __fastcall Load_GfxWorldDpvsStatic(const DBStreamStart streamStart)
{
  ?Load_GfxWorldDpvsStatic@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxSHCompressedProbeDataStream
==============
*/

void __fastcall Load_GfxSHCompressedProbeDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxSHCompressedProbeDataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxPrecomputedSkyIllumination
==============
*/

void __fastcall Postload_GfxPrecomputedSkyIllumination(const DBStreamStart streamStart)
{
  ?Postload_GfxPrecomputedSkyIllumination@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_GfxPrecomputedSkyIlluminationArray
==============
*/

void __fastcall Preload_GfxPrecomputedSkyIlluminationArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxPrecomputedSkyIlluminationArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_GfxDynamicLightsetLGppZoneInfo
==============
*/

GfxDynamicLightsetLGppZoneInfo *__fastcall AllocPostload_GfxDynamicLightsetLGppZoneInfo()
{
  return ?AllocPostload_GfxDynamicLightsetLGppZoneInfo@@YAPEAUGfxDynamicLightsetLGppZoneInfo@@XZ();
}

/*
==============
Load_GfxDynamicLightsetGChunkInfoArray
==============
*/

void __fastcall Load_GfxDynamicLightsetGChunkInfoArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxDynamicLightsetGChunkInfoArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_LightGridVolumePackingParams
==============
*/

void __fastcall Preload_LightGridVolumePackingParams(const DBStreamStart streamStart)
{
  ?Preload_LightGridVolumePackingParams@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxDynamicLightsetLightInfoStream
==============
*/

void __fastcall Postload_GfxDynamicLightsetLightInfoStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxDynamicLightsetLightInfoStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxDynamicLightsetBFTypeArray
==============
*/

void __fastcall Load_GfxDynamicLightsetBFTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxDynamicLightsetBFTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_GfxStaticDecalVolumeUid
==============
*/

void Load_ProcessStructLayout_GfxStaticDecalVolumeUid(void)
{
  ?Load_ProcessStructLayout_GfxStaticDecalVolumeUid@@YAXXZ();
}

/*
==============
AllocPreload_GfxWorldLightmapReindexData
==============
*/

GfxWorldLightmapReindexData *__fastcall AllocPreload_GfxWorldLightmapReindexData()
{
  return ?AllocPreload_GfxWorldLightmapReindexData@@YAPEAUGfxWorldLightmapReindexData@@XZ();
}

/*
==============
Load_GfxVoxelInternalNodeStream
==============
*/

void __fastcall Load_GfxVoxelInternalNodeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxVoxelInternalNodeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxWorldLightmapImagePtrArrayArray
==============
*/

void __fastcall Load_GfxWorldLightmapImagePtrArrayArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxWorldLightmapImagePtrArrayArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxDynamicLightsetLGppZoneInfoStream
==============
*/

void __fastcall Preload_GfxDynamicLightsetLGppZoneInfoStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxDynamicLightsetLGppZoneInfoStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxStaticDecalVolumeMaterial
==============
*/

void __fastcall Postload_GfxStaticDecalVolumeMaterial(const DBStreamStart streamStart)
{
  ?Postload_GfxStaticDecalVolumeMaterial@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_GfxVoxelTopDownViewNode
==============
*/

void __fastcall Preload_GfxVoxelTopDownViewNode(const DBStreamStart streamStart)
{
  ?Preload_GfxVoxelTopDownViewNode@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_mnode_t
==============
*/

mnode_t *__fastcall AllocPreload_mnode_t()
{
  return ?AllocPreload_mnode_t@@YAPEAUmnode_t@@XZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic943
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic943(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic943@@YAXXZ();
}

/*
==============
AllocPostload_GfxGpuDynLightsetsLGVReference
==============
*/

GfxGpuDynLightsetsLGVReference *__fastcall AllocPostload_GfxGpuDynLightsetsLGVReference()
{
  return ?AllocPostload_GfxGpuDynLightsetsLGVReference@@YAPEAUGfxGpuDynLightsetsLGVReference@@XZ();
}

/*
==============
Preload_GfxStaticDecalVolumeUid
==============
*/

void __fastcall Preload_GfxStaticDecalVolumeUid(const DBStreamStart streamStart)
{
  ?Preload_GfxStaticDecalVolumeUid@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_GfxWorldDraw
==============
*/

void Load_ProcessStructLayout_GfxWorldDraw(void)
{
  ?Load_ProcessStructLayout_GfxWorldDraw@@YAXXZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic752
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic752(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic752@@YAXXZ();
}

/*
==============
AllocPostload_GfxStaticDecalVolumeMaterial
==============
*/

GfxStaticDecalVolumeMaterial *__fastcall AllocPostload_GfxStaticDecalVolumeMaterial()
{
  return ?AllocPostload_GfxStaticDecalVolumeMaterial@@YAPEAUGfxStaticDecalVolumeMaterial@@XZ();
}

/*
==============
Mark_DpvsPlaneArray
==============
*/

int __fastcall Mark_DpvsPlaneArray(const unsigned __int64 count)
{
  return ?Mark_DpvsPlaneArray@@YAH_K@Z(count);
}

/*
==============
Load_GfxWorldTransientZone
==============
*/

void __fastcall Load_GfxWorldTransientZone(const DBStreamStart streamStart)
{
  ?Load_GfxWorldTransientZone@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxCellTransientInfoStream
==============
*/

void __fastcall Postload_GfxCellTransientInfoStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxCellTransientInfoStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxVoxelTreeHeaderStream
==============
*/

void __fastcall Postload_GfxVoxelTreeHeaderStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxVoxelTreeHeaderStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxWorldDraw
==============
*/

void __fastcall Postload_GfxWorldDraw(const DBStreamStart streamStart)
{
  ?Postload_GfxWorldDraw@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_GfxDynamicLightsetLMData
==============
*/

GfxDynamicLightsetLMData *__fastcall AllocPostload_GfxDynamicLightsetLMData()
{
  return ?AllocPostload_GfxDynamicLightsetLMData@@YAPEAUGfxDynamicLightsetLMData@@XZ();
}

/*
==============
Mark_GfxLightAABBNode
==============
*/

int __fastcall Mark_GfxLightAABBNode()
{
  return ?Mark_GfxLightAABBNode@@YAHXZ();
}

/*
==============
AllocPreload_GfxDrawSurf
==============
*/

GfxDrawSurf *__fastcall AllocPreload_GfxDrawSurf()
{
  return ?AllocPreload_GfxDrawSurf@@YAPEATGfxDrawSurf@@XZ();
}

/*
==============
AllocPostload_GfxWorldDraw
==============
*/

GfxWorldDraw *__fastcall AllocPostload_GfxWorldDraw()
{
  return ?AllocPostload_GfxWorldDraw@@YAPEAUGfxWorldDraw@@XZ();
}

/*
==============
Load_GfxMapEntLookupStream
==============
*/

void __fastcall Load_GfxMapEntLookupStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxMapEntLookupStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxStaticDecalVolumeUidArray
==============
*/

void __fastcall Postload_GfxStaticDecalVolumeUidArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxStaticDecalVolumeUidArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxVoxelLeafNodeStream
==============
*/

void __fastcall Postload_GfxVoxelLeafNodeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxVoxelLeafNodeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxDecalVolumeCollection
==============
*/

void __fastcall Load_GfxDecalVolumeCollection(const DBStreamStart streamStart)
{
  ?Load_GfxDecalVolumeCollection@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_GfxWorldTransientZone
==============
*/

GfxWorldTransientZone *__fastcall AllocPreload_GfxWorldTransientZone()
{
  return ?AllocPreload_GfxWorldTransientZone@@YAPEAUGfxWorldTransientZone@@XZ();
}

/*
==============
Preload_GfxSceneDynModel
==============
*/

void __fastcall Preload_GfxSceneDynModel(const DBStreamStart streamStart)
{
  ?Preload_GfxSceneDynModel@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_GfxGpuDynLightsetsLGVReference
==============
*/

GfxGpuDynLightsetsLGVReference *__fastcall AllocLoad_GfxGpuDynLightsetsLGVReference()
{
  return ?AllocLoad_GfxGpuDynLightsetsLGVReference@@YAPEAUGfxGpuDynLightsetsLGVReference@@XZ();
}

/*
==============
Load_ProcessStructLayout_LightGridVolumeTransformParams
==============
*/

void Load_ProcessStructLayout_LightGridVolumeTransformParams(void)
{
  ?Load_ProcessStructLayout_LightGridVolumeTransformParams@@YAXXZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic1021
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic1021(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic1021@@YAXXZ();
}

/*
==============
Load_GfxDynamicLightset
==============
*/

void __fastcall Load_GfxDynamicLightset(const DBStreamStart streamStart)
{
  ?Load_GfxDynamicLightset@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxStaticModelLightGridVolumeStream
==============
*/

void __fastcall Load_GfxStaticModelLightGridVolumeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxStaticModelLightGridVolumeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic613
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic613(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic613@@YAXXZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic788
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic788(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic788@@YAXXZ();
}

/*
==============
Load_GfxVoxelTreeHeaderStream
==============
*/

void __fastcall Load_GfxVoxelTreeHeaderStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxVoxelTreeHeaderStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxGpuLightGridVoxelTree
==============
*/

int __fastcall Mark_GfxGpuLightGridVoxelTree()
{
  return ?Mark_GfxGpuLightGridVoxelTree@@YAHXZ();
}

/*
==============
Postload_GfxDynamicLightsetProbeDataArray
==============
*/

void __fastcall Postload_GfxDynamicLightsetProbeDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxDynamicLightsetProbeDataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxCellTransientInfo
==============
*/

int __fastcall Mark_GfxCellTransientInfo()
{
  return ?Mark_GfxCellTransientInfo@@YAHXZ();
}

/*
==============
Postload_LightGridVolumePackingParamsArray
==============
*/

void __fastcall Postload_LightGridVolumePackingParamsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_LightGridVolumePackingParamsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_GfxCompressedSunShadowParams
==============
*/

GfxCompressedSunShadowParams *__fastcall AllocLoad_GfxCompressedSunShadowParams()
{
  return ?AllocLoad_GfxCompressedSunShadowParams@@YAPEAUGfxCompressedSunShadowParams@@XZ();
}

/*
==============
Postload_GfxShadowGeometryStream
==============
*/

void __fastcall Postload_GfxShadowGeometryStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxShadowGeometryStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_GfxWorldDrawCells
==============
*/

GfxWorldDrawCells *__fastcall AllocLoad_GfxWorldDrawCells()
{
  return ?AllocLoad_GfxWorldDrawCells@@YAPEAUGfxWorldDrawCells@@XZ();
}

/*
==============
AllocPreload_GfxGpuDynLightsetsLGVReference
==============
*/

GfxGpuDynLightsetsLGVReference *__fastcall AllocPreload_GfxGpuDynLightsetsLGVReference()
{
  return ?AllocPreload_GfxGpuDynLightsetsLGVReference@@YAPEAUGfxGpuDynLightsetsLGVReference@@XZ();
}

/*
==============
AllocPreload_GfxDynamicLightsetLMData
==============
*/

GfxDynamicLightsetLMData *__fastcall AllocPreload_GfxDynamicLightsetLMData()
{
  return ?AllocPreload_GfxDynamicLightsetLMData@@YAPEAUGfxDynamicLightsetLMData@@XZ();
}

/*
==============
AllocPreload_GfxCell
==============
*/

GfxCell *__fastcall AllocPreload_GfxCell()
{
  return ?AllocPreload_GfxCell@@YAPEAUGfxCell@@XZ();
}

/*
==============
Mark_GfxGpuLightGridArray
==============
*/

int __fastcall Mark_GfxGpuLightGridArray(const unsigned __int64 count)
{
  return ?Mark_GfxGpuLightGridArray@@YAH_K@Z(count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic710
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic710(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic710@@YAXXZ();
}

/*
==============
AllocPreload_GfxGpuLightGridTransientData
==============
*/

GfxGpuLightGridTransientData *__fastcall AllocPreload_GfxGpuLightGridTransientData()
{
  return ?AllocPreload_GfxGpuLightGridTransientData@@YAPEAUGfxGpuLightGridTransientData@@XZ();
}

/*
==============
Postload_GfxGpuLightGridVoxelStartTetrahedronArray
==============
*/

void __fastcall Postload_GfxGpuLightGridVoxelStartTetrahedronArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxGpuLightGridVoxelStartTetrahedronArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxSceneDynModelArray
==============
*/

void __fastcall Load_GfxSceneDynModelArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxSceneDynModelArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxCellTreeCountArray
==============
*/

int __fastcall Mark_GfxCellTreeCountArray(const unsigned __int64 count)
{
  return ?Mark_GfxCellTreeCountArray@@YAH_K@Z(count);
}

/*
==============
Postload_GfxLightmapAtlasDataTempPtr
==============
*/

void __fastcall Postload_GfxLightmapAtlasDataTempPtr(const DBStreamStart streamStart)
{
  ?Postload_GfxLightmapAtlasDataTempPtr@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxDynamicLightsetGChunkInfo
==============
*/

void __fastcall Load_GfxDynamicLightsetGChunkInfo(const DBStreamStart streamStart)
{
  ?Load_GfxDynamicLightsetGChunkInfo@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_GfxLightGridVolumeAtlasDataTemp
==============
*/

GfxLightGridVolumeAtlasDataTemp *__fastcall AllocLoad_GfxLightGridVolumeAtlasDataTemp()
{
  return ?AllocLoad_GfxLightGridVolumeAtlasDataTemp@@YAPEAUGfxLightGridVolumeAtlasDataTemp@@XZ();
}

/*
==============
Load_GfxLightmapRawStream
==============
*/

void __fastcall Load_GfxLightmapRawStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxLightmapRawStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxDynamicLightsetPortalGIDataStream
==============
*/

void __fastcall Preload_GfxDynamicLightsetPortalGIDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxDynamicLightsetPortalGIDataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxDynamicLightsetArray
==============
*/

int __fastcall Mark_GfxDynamicLightsetArray(const unsigned __int64 count)
{
  return ?Mark_GfxDynamicLightsetArray@@YAH_K@Z(count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic1014
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic1014(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic1014@@YAXXZ();
}

/*
==============
Mark_GfxVoxelTopDownViewNode
==============
*/

int __fastcall Mark_GfxVoxelTopDownViewNode()
{
  return ?Mark_GfxVoxelTopDownViewNode@@YAHXZ();
}

/*
==============
Mark_GfxDynamicLightsetBFDataArray
==============
*/

int __fastcall Mark_GfxDynamicLightsetBFDataArray(const unsigned __int64 count)
{
  return ?Mark_GfxDynamicLightsetBFDataArray@@YAH_K@Z(count);
}

/*
==============
Postload_GfxVoxelTreeStream
==============
*/

void __fastcall Postload_GfxVoxelTreeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxVoxelTreeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxWorldTransientZonePtr
==============
*/

void __fastcall Postload_GfxWorldTransientZonePtr(const DBStreamStart streamStart)
{
  ?Postload_GfxWorldTransientZonePtr@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_GfxGpuLightGridZone
==============
*/

GfxGpuLightGridZone *__fastcall AllocLoad_GfxGpuLightGridZone()
{
  return ?AllocLoad_GfxGpuLightGridZone@@YAPEAUGfxGpuLightGridZone@@XZ();
}

/*
==============
Preload_GfxCellArray
==============
*/

void __fastcall Preload_GfxCellArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxCellArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxDynamicLightsetLMDataArray
==============
*/

void __fastcall Load_GfxDynamicLightsetLMDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxDynamicLightsetLMDataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxDynamicLightsetProbeDataStream
==============
*/

void __fastcall Load_GfxDynamicLightsetProbeDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxDynamicLightsetProbeDataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxDynamicLightsetGChunkFlags
==============
*/

int __fastcall Mark_GfxDynamicLightsetGChunkFlags()
{
  return ?Mark_GfxDynamicLightsetGChunkFlags@@YAHXZ();
}

/*
==============
Mark_GfxMapEntLookup
==============
*/

int __fastcall Mark_GfxMapEntLookup()
{
  return ?Mark_GfxMapEntLookup@@YAHXZ();
}

/*
==============
Preload_GfxLightAABB
==============
*/

void __fastcall Preload_GfxLightAABB(const DBStreamStart streamStart)
{
  ?Preload_GfxLightAABB@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic1126
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic1126(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic1126@@YAXXZ();
}

/*
==============
Mark_GfxDynamicLightsetGChunk
==============
*/

int __fastcall Mark_GfxDynamicLightsetGChunk()
{
  return ?Mark_GfxDynamicLightsetGChunk@@YAHXZ();
}

/*
==============
Load_GfxWorldDpvsPlanesStream
==============
*/

void __fastcall Load_GfxWorldDpvsPlanesStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxWorldDpvsPlanesStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic936
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic936(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic936@@YAXXZ();
}

/*
==============
Load_GfxGpuLightGridVoxelStartTetrahedron
==============
*/

void __fastcall Load_GfxGpuLightGridVoxelStartTetrahedron(const DBStreamStart streamStart)
{
  ?Load_GfxGpuLightGridVoxelStartTetrahedron@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxModelLightmapInstStream
==============
*/

void __fastcall Postload_GfxModelLightmapInstStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxModelLightmapInstStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxAabbTreeArray
==============
*/

void __fastcall Preload_GfxAabbTreeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxAabbTreeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxCellTree
==============
*/

int __fastcall Mark_GfxCellTree()
{
  return ?Mark_GfxCellTree@@YAHXZ();
}

/*
==============
Load_GfxWorldDraw
==============
*/

void __fastcall Load_GfxWorldDraw(const DBStreamStart streamStart)
{
  ?Load_GfxWorldDraw@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_GfxDynamicLightsetLightInfo
==============
*/

void Load_ProcessStructLayout_GfxDynamicLightsetLightInfo(void)
{
  ?Load_ProcessStructLayout_GfxDynamicLightsetLightInfo@@YAXXZ();
}

/*
==============
Load_ProcessStructLayout_GfxGpuLightGridVoxelTree
==============
*/

void Load_ProcessStructLayout_GfxGpuLightGridVoxelTree(void)
{
  ?Load_ProcessStructLayout_GfxGpuLightGridVoxelTree@@YAXXZ();
}

/*
==============
Preload_GfxLightmapType
==============
*/

void __fastcall Preload_GfxLightmapType(const DBStreamStart streamStart)
{
  ?Preload_GfxLightmapType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_GfxLightAABBNode
==============
*/

GfxLightAABBNode *__fastcall AllocLoad_GfxLightAABBNode()
{
  return ?AllocLoad_GfxLightAABBNode@@YAPEAUGfxLightAABBNode@@XZ();
}

/*
==============
Postload_GfxLightViewFrustumArray
==============
*/

void __fastcall Postload_GfxLightViewFrustumArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxLightViewFrustumArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxShadowGeometry
==============
*/

int __fastcall Mark_GfxShadowGeometry()
{
  return ?Mark_GfxShadowGeometry@@YAHXZ();
}

/*
==============
Preload_GfxGpuLightGrid
==============
*/

void __fastcall Preload_GfxGpuLightGrid(const DBStreamStart streamStart)
{
  ?Preload_GfxGpuLightGrid@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxShadowGeometryArray
==============
*/

void __fastcall Load_GfxShadowGeometryArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxShadowGeometryArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_LightGridVolumePackingParams
==============
*/

void Load_ProcessStructLayout_LightGridVolumePackingParams(void)
{
  ?Load_ProcessStructLayout_LightGridVolumePackingParams@@YAXXZ();
}

/*
==============
AllocPostload_StaticModelIndex
==============
*/

unsigned __int16 *__fastcall AllocPostload_StaticModelIndex()
{
  return ?AllocPostload_StaticModelIndex@@YAPEAGXZ();
}

/*
==============
AllocPreload_GfxWorldLightmapReindexDataElement
==============
*/

GfxWorldLightmapReindexDataElement *__fastcall AllocPreload_GfxWorldLightmapReindexDataElement()
{
  return ?AllocPreload_GfxWorldLightmapReindexDataElement@@YAPEAUGfxWorldLightmapReindexDataElement@@XZ();
}

/*
==============
Mark_GfxDynamicLightset
==============
*/

int __fastcall Mark_GfxDynamicLightset()
{
  return ?Mark_GfxDynamicLightset@@YAHXZ();
}

/*
==============
Postload_GfxLightGridType
==============
*/

void __fastcall Postload_GfxLightGridType(const DBStreamStart streamStart)
{
  ?Postload_GfxLightGridType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_GfxStaticDecalVolumePackedArray
==============
*/

int __fastcall Mark_GfxStaticDecalVolumePackedArray(const unsigned __int64 count)
{
  return ?Mark_GfxStaticDecalVolumePackedArray@@YAH_K@Z(count);
}

/*
==============
Preload_GfxVoxelLeafNodeStream
==============
*/

void __fastcall Preload_GfxVoxelLeafNodeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxVoxelLeafNodeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxLightAABBNodeStream
==============
*/

void __fastcall Preload_GfxLightAABBNodeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxLightAABBNodeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxVoxelLeafNode
==============
*/

void __fastcall Load_GfxVoxelLeafNode(const DBStreamStart streamStart)
{
  ?Load_GfxVoxelLeafNode@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_GfxWorldDrawArray
==============
*/

int __fastcall Mark_GfxWorldDrawArray(const unsigned __int64 count)
{
  return ?Mark_GfxWorldDrawArray@@YAH_K@Z(count);
}

/*
==============
AllocPostload_GfxGpuLightGridVoxelStartTetrahedron
==============
*/

GfxGpuLightGridVoxelStartTetrahedron *__fastcall AllocPostload_GfxGpuLightGridVoxelStartTetrahedron()
{
  return ?AllocPostload_GfxGpuLightGridVoxelStartTetrahedron@@YAPEAUGfxGpuLightGridVoxelStartTetrahedron@@XZ();
}

/*
==============
Load_GfxVoxelTree
==============
*/

void __fastcall Load_GfxVoxelTree(const DBStreamStart streamStart)
{
  ?Load_GfxVoxelTree@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_BspVersionArray
==============
*/

void __fastcall Preload_BspVersionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_BspVersionArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxWorldTransientZoneArray
==============
*/

void __fastcall Preload_GfxWorldTransientZoneArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxWorldTransientZoneArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxLightAABB
==============
*/

void __fastcall Postload_GfxLightAABB(const DBStreamStart streamStart)
{
  ?Postload_GfxLightAABB@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxWorldDrawCells
==============
*/

void __fastcall Load_GfxWorldDrawCells(const DBStreamStart streamStart)
{
  ?Load_GfxWorldDrawCells@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxLightmapRaw
==============
*/

void __fastcall Load_GfxLightmapRaw(const DBStreamStart streamStart)
{
  ?Load_GfxLightmapRaw@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_GfxStaticDecalVolumePackedStream
==============
*/

void __fastcall Preload_GfxStaticDecalVolumePackedStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxStaticDecalVolumePackedStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic219
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic219(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic219@@YAXXZ();
}

/*
==============
Postload_GfxMapEntLookupArray
==============
*/

void __fastcall Postload_GfxMapEntLookupArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxMapEntLookupArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxLightmapAtlasDataTemp
==============
*/

void __fastcall Preload_GfxLightmapAtlasDataTemp(const DBStreamStart streamStart)
{
  ?Preload_GfxLightmapAtlasDataTemp@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxLightmapRawStream
==============
*/

void __fastcall Postload_GfxLightmapRawStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxLightmapRawStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxDynamicLightsetProbeDataArray
==============
*/

void __fastcall Load_GfxDynamicLightsetProbeDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxDynamicLightsetProbeDataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_mnode_tArray
==============
*/

void __fastcall Load_mnode_tArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_mnode_tArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxLightmapTypeArray
==============
*/

void __fastcall Preload_GfxLightmapTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxLightmapTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxMapEntLookup
==============
*/

void __fastcall Load_GfxMapEntLookup(const DBStreamStart streamStart)
{
  ?Load_GfxMapEntLookup@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_DpvsPlane
==============
*/

void Load_ProcessStructLayout_DpvsPlane(void)
{
  ?Load_ProcessStructLayout_DpvsPlane@@YAXXZ();
}

/*
==============
Load_GfxLightAABBStream
==============
*/

void __fastcall Load_GfxLightAABBStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxLightAABBStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxCompressedSunShadowDataTempArray
==============
*/

void __fastcall Load_GfxCompressedSunShadowDataTempArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxCompressedSunShadowDataTempArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_GfxWorldDpvsPlane
==============
*/

GfxWorldDpvsPlane *__fastcall AllocLoad_GfxWorldDpvsPlane()
{
  return ?AllocLoad_GfxWorldDpvsPlane@@YAPEAUGfxWorldDpvsPlane@@XZ();
}

/*
==============
AllocPreload_GfxLightmapAtlasDataTempPtr
==============
*/

GfxLightmapAtlasDataTemp **__fastcall AllocPreload_GfxLightmapAtlasDataTempPtr()
{
  return ?AllocPreload_GfxLightmapAtlasDataTempPtr@@YAPEAPEAUGfxLightmapAtlasDataTemp@@XZ();
}

/*
==============
Load_GfxStaticDecalVolumeUidArray
==============
*/

void __fastcall Load_GfxStaticDecalVolumeUidArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxStaticDecalVolumeUidArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxDynamicLightsetProbeData
==============
*/

void __fastcall Load_GfxDynamicLightsetProbeData(const DBStreamStart streamStart)
{
  ?Load_GfxDynamicLightsetProbeData@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxLightGridVolumeAtlasDataTempArray
==============
*/

void __fastcall Postload_GfxLightGridVolumeAtlasDataTempArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxLightGridVolumeAtlasDataTempArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_GfxDynamicLightsetGChunk
==============
*/

void Load_ProcessStructLayout_GfxDynamicLightsetGChunk(void)
{
  ?Load_ProcessStructLayout_GfxDynamicLightsetGChunk@@YAXXZ();
}

/*
==============
Postload_mnode_tArray
==============
*/

void __fastcall Postload_mnode_tArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_mnode_tArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxWorldArray
==============
*/

int __fastcall Mark_GfxWorldArray(const unsigned __int64 count)
{
  return ?Mark_GfxWorldArray@@YAH_K@Z(count);
}

/*
==============
Postload_BspVersionStream
==============
*/

void __fastcall Postload_BspVersionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_BspVersionStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxGpuLightGridVoxelTree
==============
*/

void __fastcall Preload_GfxGpuLightGridVoxelTree(const DBStreamStart streamStart)
{
  ?Preload_GfxGpuLightGridVoxelTree@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxLightGridVolumeAtlasDataTempPtr
==============
*/

void __fastcall Load_GfxLightGridVolumeAtlasDataTempPtr(const DBStreamStart streamStart)
{
  ?Load_GfxLightGridVolumeAtlasDataTempPtr@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_GfxShadowGeometry
==============
*/

GfxShadowGeometry *__fastcall AllocLoad_GfxShadowGeometry()
{
  return ?AllocLoad_GfxShadowGeometry@@YAPEAUGfxShadowGeometry@@XZ();
}

/*
==============
Load_GfxStaticDecalVolumePackedArray
==============
*/

void __fastcall Load_GfxStaticDecalVolumePackedArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxStaticDecalVolumePackedArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_GfxDynamicLightsetBFType
==============
*/

GfxDynamicLightsetBFType *__fastcall AllocPreload_GfxDynamicLightsetBFType()
{
  return ?AllocPreload_GfxDynamicLightsetBFType@@YAPEAW4GfxDynamicLightsetBFType@@XZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic1000
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic1000(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic1000@@YAXXZ();
}

/*
==============
Load_GfxHeightfieldStream
==============
*/

void __fastcall Load_GfxHeightfieldStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxHeightfieldStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxWorldTransientZonePtr
==============
*/

void __fastcall Load_GfxWorldTransientZonePtr(const DBStreamStart streamStart)
{
  ?Load_GfxWorldTransientZonePtr@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_GfxWorldDrawCells
==============
*/

void __fastcall Preload_GfxWorldDrawCells(const DBStreamStart streamStart)
{
  ?Preload_GfxWorldDrawCells@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_UmbraGateArray
==============
*/

void __fastcall Load_UmbraGateArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_UmbraGateArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_GfxDisplacementParms
==============
*/

float4 *__fastcall AllocPostload_GfxDisplacementParms()
{
  return ?AllocPostload_GfxDisplacementParms@@YAPEAUfloat4@@XZ();
}

/*
==============
Load_GfxDynamicLightsetGChunkFlagsArray
==============
*/

void __fastcall Load_GfxDynamicLightsetGChunkFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxDynamicLightsetGChunkFlagsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxWorldDrawStream
==============
*/

void __fastcall Load_GfxWorldDrawStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxWorldDrawStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxVoxelTreeHeader
==============
*/

void __fastcall Load_GfxVoxelTreeHeader(const DBStreamStart streamStart)
{
  ?Load_GfxVoxelTreeHeader@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_GfxWorldDpvsStatic
==============
*/

GfxWorldDpvsStatic *__fastcall AllocLoad_GfxWorldDpvsStatic()
{
  return ?AllocLoad_GfxWorldDpvsStatic@@YAPEAUGfxWorldDpvsStatic@@XZ();
}

/*
==============
Preload_GfxCellTreeCountStream
==============
*/

void __fastcall Preload_GfxCellTreeCountStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxCellTreeCountStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_GfxCompressedSunShadowDataTempPtr
==============
*/

void Load_ProcessStructLayout_GfxCompressedSunShadowDataTempPtr(void)
{
  ?Load_ProcessStructLayout_GfxCompressedSunShadowDataTempPtr@@YAXXZ();
}

/*
==============
Load_ProcessStructLayout_GfxWorldDpvsPlanes
==============
*/

void Load_ProcessStructLayout_GfxWorldDpvsPlanes(void)
{
  ?Load_ProcessStructLayout_GfxWorldDpvsPlanes@@YAXXZ();
}

/*
==============
Load_GfxLightGridVolumeAtlasDataTempPtrStream
==============
*/

void __fastcall Load_GfxLightGridVolumeAtlasDataTempPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxLightGridVolumeAtlasDataTempPtrStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxCellArray
==============
*/

void __fastcall Postload_GfxCellArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxCellArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxLightmapAtlasDataTempArray
==============
*/

int __fastcall Mark_GfxLightmapAtlasDataTempArray(const unsigned __int64 count)
{
  return ?Mark_GfxLightmapAtlasDataTempArray@@YAH_K@Z(count);
}

/*
==============
Preload_GfxGpuLightGridZoneArray
==============
*/

void __fastcall Preload_GfxGpuLightGridZoneArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxGpuLightGridZoneArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_umbraTomePtr_tStream
==============
*/

void __fastcall Postload_umbraTomePtr_tStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_umbraTomePtr_tStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_BspVersionArray
==============
*/

void __fastcall Load_BspVersionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_BspVersionArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_GfxDynamicLightsetLMData
==============
*/

void Load_ProcessStructLayout_GfxDynamicLightsetLMData(void)
{
  ?Load_ProcessStructLayout_GfxDynamicLightsetLMData@@YAXXZ();
}

/*
==============
Load_ProcessStructLayout_GfxLightGridVolumeAtlasDataTemp
==============
*/

void Load_ProcessStructLayout_GfxLightGridVolumeAtlasDataTemp(void)
{
  ?Load_ProcessStructLayout_GfxLightGridVolumeAtlasDataTemp@@YAXXZ();
}

/*
==============
Mark_GfxDynamicLightsetBFType
==============
*/

int __fastcall Mark_GfxDynamicLightsetBFType()
{
  return ?Mark_GfxDynamicLightsetBFType@@YAHXZ();
}

/*
==============
Postload_GfxWorldArray
==============
*/

void __fastcall Postload_GfxWorldArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxWorldArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_GfxFrustumLights
==============
*/

GfxFrustumLights *__fastcall AllocPostload_GfxFrustumLights()
{
  return ?AllocPostload_GfxFrustumLights@@YAPEAUGfxFrustumLights@@XZ();
}

/*
==============
Postload_GfxWorldDpvsDynamic
==============
*/

void __fastcall Postload_GfxWorldDpvsDynamic(const DBStreamStart streamStart)
{
  ?Postload_GfxWorldDpvsDynamic@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxWorldDpvsPlaneStream
==============
*/

void __fastcall Postload_GfxWorldDpvsPlaneStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxWorldDpvsPlaneStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic696
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic696(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic696@@YAXXZ();
}

/*
==============
Preload_GfxDynamicLightsetLightInfoStream
==============
*/

void __fastcall Preload_GfxDynamicLightsetLightInfoStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxDynamicLightsetLightInfoStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic193
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic193(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic193@@YAXXZ();
}

/*
==============
Preload_GfxSHProbeDataArray
==============
*/

void __fastcall Preload_GfxSHProbeDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxSHProbeDataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxDynamicLightsetGChunkFlagsStream
==============
*/

void __fastcall Preload_GfxDynamicLightsetGChunkFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxDynamicLightsetGChunkFlagsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxHeightfield
==============
*/

void __fastcall Postload_GfxHeightfield(const DBStreamStart streamStart)
{
  ?Postload_GfxHeightfield@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_DpvsPlaneArray
==============
*/

void __fastcall Preload_DpvsPlaneArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_DpvsPlaneArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxDynamicLightsetLGppZoneInfoArray
==============
*/

void __fastcall Load_GfxDynamicLightsetLGppZoneInfoArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxDynamicLightsetLGppZoneInfoArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxCellArray
==============
*/

int __fastcall Mark_GfxCellArray(const unsigned __int64 count)
{
  return ?Mark_GfxCellArray@@YAH_K@Z(count);
}

/*
==============
AllocLoad_GfxVoxelInternalNode
==============
*/

GfxVoxelInternalNode *__fastcall AllocLoad_GfxVoxelInternalNode()
{
  return ?AllocLoad_GfxVoxelInternalNode@@YAPEAUGfxVoxelInternalNode@@XZ();
}

/*
==============
AllocLoad_GfxLightmapRaw
==============
*/

GfxLightmapRaw *__fastcall AllocLoad_GfxLightmapRaw()
{
  return ?AllocLoad_GfxLightmapRaw@@YAPEAUGfxLightmapRaw@@XZ();
}

/*
==============
Preload_GfxVoxelTopDownViewNodeArray
==============
*/

void __fastcall Preload_GfxVoxelTopDownViewNodeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxVoxelTopDownViewNodeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxSHProbeDataArray
==============
*/

void __fastcall Load_GfxSHProbeDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxSHProbeDataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxWorldTransientZonePtrArray
==============
*/

void __fastcall Preload_GfxWorldTransientZonePtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxWorldTransientZonePtrArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxLightAABBNode
==============
*/

void __fastcall Load_GfxLightAABBNode(const DBStreamStart streamStart)
{
  ?Load_GfxLightAABBNode@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_GfxCellTreeCount
==============
*/

int __fastcall Mark_GfxCellTreeCount()
{
  return ?Mark_GfxCellTreeCount@@YAHXZ();
}

/*
==============
Postload_GfxSceneDynBrushArray
==============
*/

void __fastcall Postload_GfxSceneDynBrushArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxSceneDynBrushArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_GfxVoxelLeafNode
==============
*/

GfxVoxelLeafNode *__fastcall AllocLoad_GfxVoxelLeafNode()
{
  return ?AllocLoad_GfxVoxelLeafNode@@YAPEAUGfxVoxelLeafNode@@XZ();
}

/*
==============
Postload_GfxLightAABBNodeArray
==============
*/

void __fastcall Postload_GfxLightAABBNodeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxLightAABBNodeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_GfxGpuLightGrid
==============
*/

void Load_ProcessStructLayout_GfxGpuLightGrid(void)
{
  ?Load_ProcessStructLayout_GfxGpuLightGrid@@YAXXZ();
}

/*
==============
Preload_GfxDynamicLightsetGChunk
==============
*/

void __fastcall Preload_GfxDynamicLightsetGChunk(const DBStreamStart streamStart)
{
  ?Preload_GfxDynamicLightsetGChunk@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxGpuLightGridVoxelTreeArray
==============
*/

void __fastcall Postload_GfxGpuLightGridVoxelTreeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxGpuLightGridVoxelTreeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_GfxMayhemSelfVis
==============
*/

void Load_ProcessStructLayout_GfxMayhemSelfVis(void)
{
  ?Load_ProcessStructLayout_GfxMayhemSelfVis@@YAXXZ();
}

/*
==============
Preload_GfxCellTreeArray
==============
*/

void __fastcall Preload_GfxCellTreeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxCellTreeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxWorldTransientZoneStream
==============
*/

void __fastcall Postload_GfxWorldTransientZoneStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxWorldTransientZoneStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic767
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic767(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic767@@YAXXZ();
}

/*
==============
Load_GfxStaticModelLightGridVolumeFlagsArray
==============
*/

void __fastcall Load_GfxStaticModelLightGridVolumeFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxStaticModelLightGridVolumeFlagsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic738
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic738(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic738@@YAXXZ();
}

/*
==============
Load_CheckArrayMemberGfxWorld1681
==============
*/

void Load_CheckArrayMemberGfxWorld1681(void)
{
  ?Load_CheckArrayMemberGfxWorld1681@@YAXXZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic957
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic957(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic957@@YAXXZ();
}

/*
==============
Mark_GfxDrawSurf
==============
*/

int __fastcall Mark_GfxDrawSurf()
{
  return ?Mark_GfxDrawSurf@@YAHXZ();
}

/*
==============
Preload_GfxVoxelTreeHeaderStream
==============
*/

void __fastcall Preload_GfxVoxelTreeHeaderStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxVoxelTreeHeaderStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxStaticModelLightGridVolumeStream
==============
*/

void __fastcall Postload_GfxStaticModelLightGridVolumeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxStaticModelLightGridVolumeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_mnode_t
==============
*/

void __fastcall Load_mnode_t(const DBStreamStart streamStart)
{
  ?Load_mnode_t@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_GfxWorldDpvsPlaneStream
==============
*/

void __fastcall Preload_GfxWorldDpvsPlaneStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxWorldDpvsPlaneStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_GfxSHProbeData
==============
*/

GfxSHProbeData *__fastcall AllocLoad_GfxSHProbeData()
{
  return ?AllocLoad_GfxSHProbeData@@YAPEAUGfxSHProbeData@@XZ();
}

/*
==============
Preload_GfxStaticModelLightGridVolumeFlags
==============
*/

void __fastcall Preload_GfxStaticModelLightGridVolumeFlags(const DBStreamStart streamStart)
{
  ?Preload_GfxStaticModelLightGridVolumeFlags@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_GfxDynamicLightsetGChunkFlags
==============
*/

GfxDynamicLightsetGChunkFlags *__fastcall AllocPostload_GfxDynamicLightsetGChunkFlags()
{
  return ?AllocPostload_GfxDynamicLightsetGChunkFlags@@YAPEAW4GfxDynamicLightsetGChunkFlags@@XZ();
}

/*
==============
Load_GfxSceneDynBrushStream
==============
*/

void __fastcall Load_GfxSceneDynBrushStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxSceneDynBrushStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_GfxVoxelInternalNode
==============
*/

GfxVoxelInternalNode *__fastcall AllocPreload_GfxVoxelInternalNode()
{
  return ?AllocPreload_GfxVoxelInternalNode@@YAPEAUGfxVoxelInternalNode@@XZ();
}

/*
==============
Mark_GfxStaticDecalVolumeMaskArray
==============
*/

int __fastcall Mark_GfxStaticDecalVolumeMaskArray(const unsigned __int64 count)
{
  return ?Mark_GfxStaticDecalVolumeMaskArray@@YAH_K@Z(count);
}

/*
==============
AllocLoad_GfxSHCompressedProbeData
==============
*/

GfxSHCompressedProbeData *__fastcall AllocLoad_GfxSHCompressedProbeData()
{
  return ?AllocLoad_GfxSHCompressedProbeData@@YAPEAUGfxSHCompressedProbeData@@XZ();
}

/*
==============
Mark_GfxModelLightmapInst
==============
*/

int __fastcall Mark_GfxModelLightmapInst()
{
  return ?Mark_GfxModelLightmapInst@@YAHXZ();
}

/*
==============
AllocPostload_GfxPortal
==============
*/

GfxPortal *__fastcall AllocPostload_GfxPortal()
{
  return ?AllocPostload_GfxPortal@@YAPEAUGfxPortal@@XZ();
}

/*
==============
AllocPreload_GfxPrecomputedSkyIllumination
==============
*/

GfxPrecomputedSkyIllumination *__fastcall AllocPreload_GfxPrecomputedSkyIllumination()
{
  return ?AllocPreload_GfxPrecomputedSkyIllumination@@YAPEAUGfxPrecomputedSkyIllumination@@XZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic971
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic971(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic971@@YAXXZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic1091
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic1091(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic1091@@YAXXZ();
}

/*
==============
Load_GfxCellTreeCountStream
==============
*/

void __fastcall Load_GfxCellTreeCountStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxCellTreeCountStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxLightmapAtlasDataTempPtrArray
==============
*/

void __fastcall Preload_GfxLightmapAtlasDataTempPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxLightmapAtlasDataTempPtrArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxGpuLightGridVoxelStartTetrahedron
==============
*/

void __fastcall Preload_GfxGpuLightGridVoxelStartTetrahedron(const DBStreamStart streamStart)
{
  ?Preload_GfxGpuLightGridVoxelStartTetrahedron@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_GfxDynamicLightsetBFTypeArray
==============
*/

void __fastcall Preload_GfxDynamicLightsetBFTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxDynamicLightsetBFTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxWorld
==============
*/

void __fastcall Postload_GfxWorld(const DBStreamStart streamStart)
{
  ?Postload_GfxWorld@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxDynamicLightsetGChunk
==============
*/

void __fastcall Postload_GfxDynamicLightsetGChunk(const DBStreamStart streamStart)
{
  ?Postload_GfxDynamicLightsetGChunk@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_GfxVoxelTree
==============
*/

GfxVoxelTree *__fastcall AllocLoad_GfxVoxelTree()
{
  return ?AllocLoad_GfxVoxelTree@@YAPEAUGfxVoxelTree@@XZ();
}

/*
==============
AllocPostload_GfxDynamicLightsetBFType
==============
*/

GfxDynamicLightsetBFType *__fastcall AllocPostload_GfxDynamicLightsetBFType()
{
  return ?AllocPostload_GfxDynamicLightsetBFType@@YAPEAW4GfxDynamicLightsetBFType@@XZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic487
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic487(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic487@@YAXXZ();
}

/*
==============
Postload_GfxLightmapAtlasDataTempArray
==============
*/

void __fastcall Postload_GfxLightmapAtlasDataTempArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxLightmapAtlasDataTempArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_GfxCellTree
==============
*/

void Load_ProcessStructLayout_GfxCellTree(void)
{
  ?Load_ProcessStructLayout_GfxCellTree@@YAXXZ();
}

/*
==============
Preload_GfxWorldDpvsDynamic
==============
*/

void __fastcall Preload_GfxWorldDpvsDynamic(const DBStreamStart streamStart)
{
  ?Preload_GfxWorldDpvsDynamic@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_GfxShadowGeometry
==============
*/

void Load_ProcessStructLayout_GfxShadowGeometry(void)
{
  ?Load_ProcessStructLayout_GfxShadowGeometry@@YAXXZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic964
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic964(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic964@@YAXXZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic438
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic438(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic438@@YAXXZ();
}

/*
==============
Mark_GfxWorldLightmapImagePtrArray
==============
*/

int __fastcall Mark_GfxWorldLightmapImagePtrArray()
{
  return ?Mark_GfxWorldLightmapImagePtrArray@@YAHXZ();
}

/*
==============
Preload_GfxGpuLightGridTetrahedron
==============
*/

void __fastcall Preload_GfxGpuLightGridTetrahedron(const DBStreamStart streamStart)
{
  ?Preload_GfxGpuLightGridTetrahedron@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxCompressedSunShadowDataTempPtrArray
==============
*/

void __fastcall Load_GfxCompressedSunShadowDataTempPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxCompressedSunShadowDataTempPtrArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxDynamicLightsetGChunkArray
==============
*/

void __fastcall Load_GfxDynamicLightsetGChunkArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxDynamicLightsetGChunkArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_GfxLightmapAtlasDataTempPtr
==============
*/

GfxLightmapAtlasDataTemp **__fastcall AllocLoad_GfxLightmapAtlasDataTempPtr()
{
  return ?AllocLoad_GfxLightmapAtlasDataTempPtr@@YAPEAPEAUGfxLightmapAtlasDataTemp@@XZ();
}

/*
==============
Mark_GfxLightGridVolumeAtlasDataTemp
==============
*/

int __fastcall Mark_GfxLightGridVolumeAtlasDataTemp()
{
  return ?Mark_GfxLightGridVolumeAtlasDataTemp@@YAHXZ();
}

/*
==============
Preload_GfxMayhemSelfVisArray
==============
*/

void __fastcall Preload_GfxMayhemSelfVisArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxMayhemSelfVisArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxCellTransientInfoArray
==============
*/

void __fastcall Load_GfxCellTransientInfoArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxCellTransientInfoArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxWorldDpvsPlaneArray
==============
*/

void __fastcall Load_GfxWorldDpvsPlaneArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxWorldDpvsPlaneArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxStaticDecalVolumePacked
==============
*/

void __fastcall Preload_GfxStaticDecalVolumePacked(const DBStreamStart streamStart)
{
  ?Preload_GfxStaticDecalVolumePacked@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_GfxLightmapAtlasDataTempPtr
==============
*/

int __fastcall Mark_GfxLightmapAtlasDataTempPtr()
{
  return ?Mark_GfxLightmapAtlasDataTempPtr@@YAHXZ();
}

/*
==============
Preload_GfxGpuLightGridTetrahedronArray
==============
*/

void __fastcall Preload_GfxGpuLightGridTetrahedronArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxGpuLightGridTetrahedronArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_GfxDynamicLightsetLGppZoneInfo
==============
*/

void Load_ProcessStructLayout_GfxDynamicLightsetLGppZoneInfo(void)
{
  ?Load_ProcessStructLayout_GfxDynamicLightsetLGppZoneInfo@@YAXXZ();
}

/*
==============
Preload_GfxHeightfieldStream
==============
*/

void __fastcall Preload_GfxHeightfieldStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxHeightfieldStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxStaticModelLightGridVolumeArray
==============
*/

void __fastcall Load_GfxStaticModelLightGridVolumeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxStaticModelLightGridVolumeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic199
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic199(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic199@@YAXXZ();
}

/*
==============
Mark_GfxDynamicLightsetLightInfo
==============
*/

int __fastcall Mark_GfxDynamicLightsetLightInfo()
{
  return ?Mark_GfxDynamicLightsetLightInfo@@YAHXZ();
}

/*
==============
AllocLoad_GfxMapEntLookup
==============
*/

GfxMapEntLookup *__fastcall AllocLoad_GfxMapEntLookup()
{
  return ?AllocLoad_GfxMapEntLookup@@YAPEAUGfxMapEntLookup@@XZ();
}

/*
==============
Postload_GfxDynamicLightsetGChunkStream
==============
*/

void __fastcall Postload_GfxDynamicLightsetGChunkStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxDynamicLightsetGChunkStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxCellTransientInfo
==============
*/

void __fastcall Postload_GfxCellTransientInfo(const DBStreamStart streamStart)
{
  ?Postload_GfxCellTransientInfo@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_GfxWorldTransientZone
==============
*/

GfxWorldTransientZone *__fastcall AllocLoad_GfxWorldTransientZone()
{
  return ?AllocLoad_GfxWorldTransientZone@@YAPEAUGfxWorldTransientZone@@XZ();
}

/*
==============
AllocLoad_GfxVoxelTreeHeader
==============
*/

GfxVoxelTreeHeader *__fastcall AllocLoad_GfxVoxelTreeHeader()
{
  return ?AllocLoad_GfxVoxelTreeHeader@@YAPEAUGfxVoxelTreeHeader@@XZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic1007
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic1007(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic1007@@YAXXZ();
}

/*
==============
Postload_GfxGpuLightGridTetrahedronNeighborsStream
==============
*/

void __fastcall Postload_GfxGpuLightGridTetrahedronNeighborsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxGpuLightGridTetrahedronNeighborsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxLightAABBNode
==============
*/

void __fastcall Preload_GfxLightAABBNode(const DBStreamStart streamStart)
{
  ?Preload_GfxLightAABBNode@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic543
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic543(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic543@@YAXXZ();
}

/*
==============
AllocPreload_GfxDynamicLightsetPortalGIData
==============
*/

GfxDynamicLightsetPortalGIData *__fastcall AllocPreload_GfxDynamicLightsetPortalGIData()
{
  return ?AllocPreload_GfxDynamicLightsetPortalGIData@@YAPEAUGfxDynamicLightsetPortalGIData@@XZ();
}

/*
==============
Mark_GfxMayhemSelfVisArray
==============
*/

int __fastcall Mark_GfxMayhemSelfVisArray(const unsigned __int64 count)
{
  return ?Mark_GfxMayhemSelfVisArray@@YAH_K@Z(count);
}

/*
==============
AllocPreload_GfxWorldLightmapImagePtrArray
==============
*/

GfxWorldLightmapImagePtrArray *__fastcall AllocPreload_GfxWorldLightmapImagePtrArray()
{
  return ?AllocPreload_GfxWorldLightmapImagePtrArray@@YAPEAUGfxWorldLightmapImagePtrArray@@XZ();
}

/*
==============
Postload_LightGridVolumeTransformParamsStream
==============
*/

void __fastcall Postload_LightGridVolumeTransformParamsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_LightGridVolumeTransformParamsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_GfxDynamicLightset
==============
*/

void Load_ProcessStructLayout_GfxDynamicLightset(void)
{
  ?Load_ProcessStructLayout_GfxDynamicLightset@@YAXXZ();
}

/*
==============
Load_GfxWorldDpvsDynamicStream
==============
*/

void __fastcall Load_GfxWorldDpvsDynamicStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxWorldDpvsDynamicStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxWorldDpvsStaticArray
==============
*/

void __fastcall Load_GfxWorldDpvsStaticArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxWorldDpvsStaticArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_GfxMapEntLookup
==============
*/

GfxMapEntLookup *__fastcall AllocPostload_GfxMapEntLookup()
{
  return ?AllocPostload_GfxMapEntLookup@@YAPEAUGfxMapEntLookup@@XZ();
}

/*
==============
AllocPreload_GfxGpuLightGridTetrahedronVisibility
==============
*/

GfxGpuLightGridTetrahedronVisibility *__fastcall AllocPreload_GfxGpuLightGridTetrahedronVisibility()
{
  return ?AllocPreload_GfxGpuLightGridTetrahedronVisibility@@YAPEAUGfxGpuLightGridTetrahedronVisibility@@XZ();
}

/*
==============
Load_ProcessStructLayout_GfxWorldLightmapReindexDataElement
==============
*/

void Load_ProcessStructLayout_GfxWorldLightmapReindexDataElement(void)
{
  ?Load_ProcessStructLayout_GfxWorldLightmapReindexDataElement@@YAXXZ();
}

/*
==============
Postload_GfxDynamicLightsetProductGIData
==============
*/

void __fastcall Postload_GfxDynamicLightsetProductGIData(const DBStreamStart streamStart)
{
  ?Postload_GfxDynamicLightsetProductGIData@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxCellTreeArray
==============
*/

void __fastcall Postload_GfxCellTreeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxCellTreeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxPrecomputedSkyIlluminationArray
==============
*/

void __fastcall Load_GfxPrecomputedSkyIlluminationArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxPrecomputedSkyIlluminationArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_GfxDynamicLightset
==============
*/

GfxDynamicLightset *__fastcall AllocLoad_GfxDynamicLightset()
{
  return ?AllocLoad_GfxDynamicLightset@@YAPEAUGfxDynamicLightset@@XZ();
}

/*
==============
Preload_GfxCellTransientInfoArray
==============
*/

void __fastcall Preload_GfxCellTransientInfoArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxCellTransientInfoArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxDecalVolumeTransientDataStream
==============
*/

void __fastcall Load_GfxDecalVolumeTransientDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxDecalVolumeTransientDataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxSHCompressedProbeDataStream
==============
*/

void __fastcall Postload_GfxSHCompressedProbeDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxSHCompressedProbeDataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_GfxPortal
==============
*/

GfxPortal *__fastcall AllocLoad_GfxPortal()
{
  return ?AllocLoad_GfxPortal@@YAPEAUGfxPortal@@XZ();
}

/*
==============
Postload_GfxGpuDynLightsetsLGVReferenceStream
==============
*/

void __fastcall Postload_GfxGpuDynLightsetsLGVReferenceStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxGpuDynLightsetsLGVReferenceStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_StaticModelIndexStream
==============
*/

void __fastcall Load_StaticModelIndexStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_StaticModelIndexStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_GfxLightmapType
==============
*/

GfxLightmapType *__fastcall AllocLoad_GfxLightmapType()
{
  return ?AllocLoad_GfxLightmapType@@YAPEAW4GfxLightmapType@@XZ();
}

/*
==============
Postload_GfxStaticDecalVolumeMaterialArray
==============
*/

void __fastcall Postload_GfxStaticDecalVolumeMaterialArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxStaticDecalVolumeMaterialArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxWorldDrawCellsStream
==============
*/

void __fastcall Postload_GfxWorldDrawCellsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxWorldDrawCellsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxWorldLightmapReindexDataArray
==============
*/

void __fastcall Postload_GfxWorldLightmapReindexDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxWorldLightmapReindexDataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxWorldDrawCellsStream
==============
*/

void __fastcall Preload_GfxWorldDrawCellsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxWorldDrawCellsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxCellTreeCountArray
==============
*/

void __fastcall Preload_GfxCellTreeCountArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxCellTreeCountArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxDecalVolumeTransientDataArray
==============
*/

void __fastcall Postload_GfxDecalVolumeTransientDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxDecalVolumeTransientDataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxWorldLightmapReindexDataElement
==============
*/

void __fastcall Postload_GfxWorldLightmapReindexDataElement(const DBStreamStart streamStart)
{
  ?Postload_GfxWorldLightmapReindexDataElement@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_GfxDynamicLightsetProbeDataStream
==============
*/

void __fastcall Preload_GfxDynamicLightsetProbeDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxDynamicLightsetProbeDataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic816
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic816(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic816@@YAXXZ();
}

/*
==============
Mark_GfxWorldPackedLightmapArray
==============
*/

int __fastcall Mark_GfxWorldPackedLightmapArray(const unsigned __int64 count)
{
  return ?Mark_GfxWorldPackedLightmapArray@@YAH_K@Z(count);
}

/*
==============
Preload_GfxFrustumLightsArray
==============
*/

void __fastcall Preload_GfxFrustumLightsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxFrustumLightsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxWorldStream
==============
*/

void __fastcall Postload_GfxWorldStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxWorldStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxSceneDynBrushArray
==============
*/

void __fastcall Load_GfxSceneDynBrushArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxSceneDynBrushArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_GfxStaticDecalVolumeMask
==============
*/

GfxStaticDecalVolumeMask *__fastcall AllocPostload_GfxStaticDecalVolumeMask()
{
  return ?AllocPostload_GfxStaticDecalVolumeMask@@YAPEAUGfxStaticDecalVolumeMask@@XZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic879
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic879(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic879@@YAXXZ();
}

/*
==============
Preload_GfxWorld
==============
*/

void __fastcall Preload_GfxWorld(const DBStreamStart streamStart)
{
  ?Preload_GfxWorld@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxStaticDecalVolumePackedStream
==============
*/

void __fastcall Load_GfxStaticDecalVolumePackedStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxStaticDecalVolumePackedStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxPortal
==============
*/

void __fastcall Preload_GfxPortal(const DBStreamStart streamStart)
{
  ?Preload_GfxPortal@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_GfxWorldLightmapImagePtrArray
==============
*/

void __fastcall Preload_GfxWorldLightmapImagePtrArray(const DBStreamStart streamStart)
{
  ?Preload_GfxWorldLightmapImagePtrArray@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_GfxCellTreeCount
==============
*/

GfxCellTreeCount *__fastcall AllocPreload_GfxCellTreeCount()
{
  return ?AllocPreload_GfxCellTreeCount@@YAPEAUGfxCellTreeCount@@XZ();
}

/*
==============
Mark_GfxWorldDpvsPlanes
==============
*/

int __fastcall Mark_GfxWorldDpvsPlanes()
{
  return ?Mark_GfxWorldDpvsPlanes@@YAHXZ();
}

/*
==============
Mark_GfxWorldDraw
==============
*/

int __fastcall Mark_GfxWorldDraw()
{
  return ?Mark_GfxWorldDraw@@YAHXZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic247
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic247(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic247@@YAXXZ();
}

/*
==============
Postload_GfxMayhemSelfVis
==============
*/

void __fastcall Postload_GfxMayhemSelfVis(const DBStreamStart streamStart)
{
  ?Postload_GfxMayhemSelfVis@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxCompressedSunShadowDataTempPtrArray
==============
*/

void __fastcall Postload_GfxCompressedSunShadowDataTempPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxCompressedSunShadowDataTempPtrArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_GfxDynamicLightsetPortalGIData
==============
*/

GfxDynamicLightsetPortalGIData *__fastcall AllocLoad_GfxDynamicLightsetPortalGIData()
{
  return ?AllocLoad_GfxDynamicLightsetPortalGIData@@YAPEAUGfxDynamicLightsetPortalGIData@@XZ();
}

/*
==============
Load_DpvsPlane
==============
*/

void __fastcall Load_DpvsPlane(const DBStreamStart streamStart)
{
  ?Load_DpvsPlane@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_GfxLightViewFrustumArray
==============
*/

int __fastcall Mark_GfxLightViewFrustumArray(const unsigned __int64 count)
{
  return ?Mark_GfxLightViewFrustumArray@@YAH_K@Z(count);
}

/*
==============
Load_GfxGpuLightGridTetrahedronNeighborsArray
==============
*/

void __fastcall Load_GfxGpuLightGridTetrahedronNeighborsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxGpuLightGridTetrahedronNeighborsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxDynamicLightsetProductGIData
==============
*/

void __fastcall Preload_GfxDynamicLightsetProductGIData(const DBStreamStart streamStart)
{
  ?Preload_GfxDynamicLightsetProductGIData@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_GfxSceneDynBrush
==============
*/

GfxSceneDynBrush *__fastcall AllocLoad_GfxSceneDynBrush()
{
  return ?AllocLoad_GfxSceneDynBrush@@YAPEAUGfxSceneDynBrush@@XZ();
}

/*
==============
Load_ProcessStructLayout_GfxDynamicLightsetPortalGIData
==============
*/

void Load_ProcessStructLayout_GfxDynamicLightsetPortalGIData(void)
{
  ?Load_ProcessStructLayout_GfxDynamicLightsetPortalGIData@@YAXXZ();
}

/*
==============
Postload_GfxWorldTransientZonePtrArray
==============
*/

void __fastcall Postload_GfxWorldTransientZonePtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxWorldTransientZonePtrArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxStaticDecalVolumeMaterialStream
==============
*/

void __fastcall Preload_GfxStaticDecalVolumeMaterialStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxStaticDecalVolumeMaterialStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_mnode_t
==============
*/

mnode_t *__fastcall AllocPostload_mnode_t()
{
  return ?AllocPostload_mnode_t@@YAPEAUmnode_t@@XZ();
}

/*
==============
Load_GfxLightmapAtlasDataTempStream
==============
*/

void __fastcall Load_GfxLightmapAtlasDataTempStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxLightmapAtlasDataTempStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_UmbraGateStream
==============
*/

void __fastcall Load_UmbraGateStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_UmbraGateStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxStaticDecalVolumeMaskStream
==============
*/

void __fastcall Load_GfxStaticDecalVolumeMaskStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxStaticDecalVolumeMaskStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic830
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic830(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic830@@YAXXZ();
}

/*
==============
Mark_umbraTomePtr_t
==============
*/

int __fastcall Mark_umbraTomePtr_t()
{
  return ?Mark_umbraTomePtr_t@@YAHXZ();
}

/*
==============
Mark_GfxStaticDecalVolumeUid
==============
*/

int __fastcall Mark_GfxStaticDecalVolumeUid()
{
  return ?Mark_GfxStaticDecalVolumeUid@@YAHXZ();
}

/*
==============
Preload_GfxDynamicLightsetProbeData
==============
*/

void __fastcall Preload_GfxDynamicLightsetProbeData(const DBStreamStart streamStart)
{
  ?Preload_GfxDynamicLightsetProbeData@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxStaticDecalVolumePackedArray
==============
*/

void __fastcall Postload_GfxStaticDecalVolumePackedArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxStaticDecalVolumePackedArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxSHProbeData
==============
*/

int __fastcall Mark_GfxSHProbeData()
{
  return ?Mark_GfxSHProbeData@@YAHXZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic978
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic978(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic978@@YAXXZ();
}

/*
==============
Mark_GfxCellTransientInfoArray
==============
*/

int __fastcall Mark_GfxCellTransientInfoArray(const unsigned __int64 count)
{
  return ?Mark_GfxCellTransientInfoArray@@YAH_K@Z(count);
}

/*
==============
Load_GfxLightmapAtlasDataTempArray
==============
*/

void __fastcall Load_GfxLightmapAtlasDataTempArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxLightmapAtlasDataTempArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_UmbraGate
==============
*/

void __fastcall Preload_UmbraGate(const DBStreamStart streamStart)
{
  ?Preload_UmbraGate@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxGpuDynLightsetsLGVReference
==============
*/

void __fastcall Postload_GfxGpuDynLightsetsLGVReference(const DBStreamStart streamStart)
{
  ?Postload_GfxGpuDynLightsetsLGVReference@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_GfxDecalVolumeCollection
==============
*/

GfxDecalVolumeCollection *__fastcall AllocLoad_GfxDecalVolumeCollection()
{
  return ?AllocLoad_GfxDecalVolumeCollection@@YAPEAUGfxDecalVolumeCollection@@XZ();
}

/*
==============
Mark_LightGridVolumePackingParamsArray
==============
*/

int __fastcall Mark_LightGridVolumePackingParamsArray(const unsigned __int64 count)
{
  return ?Mark_LightGridVolumePackingParamsArray@@YAH_K@Z(count);
}

/*
==============
Load_GfxVoxelTopDownViewNodeArray
==============
*/

void __fastcall Load_GfxVoxelTopDownViewNodeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxVoxelTopDownViewNodeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxWorldDpvsStaticStream
==============
*/

void __fastcall Load_GfxWorldDpvsStaticStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxWorldDpvsStaticStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_GfxLightmapRaw
==============
*/

GfxLightmapRaw *__fastcall AllocPreload_GfxLightmapRaw()
{
  return ?AllocPreload_GfxLightmapRaw@@YAPEAUGfxLightmapRaw@@XZ();
}

/*
==============
Postload_GfxVoxelLeafNode
==============
*/

void __fastcall Postload_GfxVoxelLeafNode(const DBStreamStart streamStart)
{
  ?Postload_GfxVoxelLeafNode@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_GfxFrustumLights
==============
*/

int __fastcall Mark_GfxFrustumLights()
{
  return ?Mark_GfxFrustumLights@@YAHXZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic606
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic606(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic606@@YAXXZ();
}

/*
==============
Postload_GfxLightGridVolumeAtlasDataTemp
==============
*/

void __fastcall Postload_GfxLightGridVolumeAtlasDataTemp(const DBStreamStart streamStart)
{
  ?Postload_GfxLightGridVolumeAtlasDataTemp@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxDrawSurf
==============
*/

void __fastcall Load_GfxDrawSurf(const DBStreamStart streamStart)
{
  ?Load_GfxDrawSurf@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxPortalArray
==============
*/

void __fastcall Load_GfxPortalArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxPortalArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxDynamicLightsetBFData
==============
*/

void __fastcall Load_GfxDynamicLightsetBFData(const DBStreamStart streamStart)
{
  ?Load_GfxDynamicLightsetBFData@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_GfxStaticDecalVolumePackedArray
==============
*/

void __fastcall Preload_GfxStaticDecalVolumePackedArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxStaticDecalVolumePackedArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_LightGridVolumePackingParams
==============
*/

int __fastcall Mark_LightGridVolumePackingParams()
{
  return ?Mark_LightGridVolumePackingParams@@YAHXZ();
}

/*
==============
Postload_GfxGpuLightGrid
==============
*/

void __fastcall Postload_GfxGpuLightGrid(const DBStreamStart streamStart)
{
  ?Postload_GfxGpuLightGrid@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxDynamicLightsetLightInfo
==============
*/

void __fastcall Load_GfxDynamicLightsetLightInfo(const DBStreamStart streamStart)
{
  ?Load_GfxDynamicLightsetLightInfo@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_GfxWorldPackedLightmap
==============
*/

GfxWorldPackedLightmap *__fastcall AllocPreload_GfxWorldPackedLightmap()
{
  return ?AllocPreload_GfxWorldPackedLightmap@@YAPEAUGfxWorldPackedLightmap@@XZ();
}

/*
==============
Postload_GfxDynamicLightsetLGppZoneInfo
==============
*/

void __fastcall Postload_GfxDynamicLightsetLGppZoneInfo(const DBStreamStart streamStart)
{
  ?Postload_GfxDynamicLightsetLGppZoneInfo@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic1049
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic1049(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic1049@@YAXXZ();
}

/*
==============
Preload_GfxLightGridVolumeAtlasDataTempPtrStream
==============
*/

void __fastcall Preload_GfxLightGridVolumeAtlasDataTempPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxLightGridVolumeAtlasDataTempPtrStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_GfxSceneDynModel
==============
*/

GfxSceneDynModel *__fastcall AllocPreload_GfxSceneDynModel()
{
  return ?AllocPreload_GfxSceneDynModel@@YAPEAUGfxSceneDynModel@@XZ();
}

/*
==============
Load_ProcessStructLayout_GfxPrecomputedSkyIllumination
==============
*/

void Load_ProcessStructLayout_GfxPrecomputedSkyIllumination(void)
{
  ?Load_ProcessStructLayout_GfxPrecomputedSkyIllumination@@YAXXZ();
}

/*
==============
Load_ProcessStructLayout_GfxWorldPtr
==============
*/

void Load_ProcessStructLayout_GfxWorldPtr(void)
{
  ?Load_ProcessStructLayout_GfxWorldPtr@@YAXXZ();
}

/*
==============
Mark_GfxWorldLightmapReindexDataElementArray
==============
*/

int __fastcall Mark_GfxWorldLightmapReindexDataElementArray(const unsigned __int64 count)
{
  return ?Mark_GfxWorldLightmapReindexDataElementArray@@YAH_K@Z(count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic515
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic515(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic515@@YAXXZ();
}

/*
==============
Preload_GfxDisplacementParmsArray
==============
*/

void __fastcall Preload_GfxDisplacementParmsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxDisplacementParmsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxGpuLightGridTetrahedronVisibility
==============
*/

int __fastcall Mark_GfxGpuLightGridTetrahedronVisibility()
{
  return ?Mark_GfxGpuLightGridTetrahedronVisibility@@YAHXZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic522
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic522(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic522@@YAXXZ();
}

/*
==============
Mark_GfxPrecomputedSkyIllumination
==============
*/

int __fastcall Mark_GfxPrecomputedSkyIllumination()
{
  return ?Mark_GfxPrecomputedSkyIllumination@@YAHXZ();
}

/*
==============
AllocLoad_GfxDynamicLightsetGChunkFlags
==============
*/

GfxDynamicLightsetGChunkFlags *__fastcall AllocLoad_GfxDynamicLightsetGChunkFlags()
{
  return ?AllocLoad_GfxDynamicLightsetGChunkFlags@@YAPEAW4GfxDynamicLightsetGChunkFlags@@XZ();
}

/*
==============
AllocPreload_GfxDisplacementParms
==============
*/

float4 *__fastcall AllocPreload_GfxDisplacementParms()
{
  return ?AllocPreload_GfxDisplacementParms@@YAPEAUfloat4@@XZ();
}

/*
==============
Postload_GfxDynamicLightsetGChunkInfoStream
==============
*/

void __fastcall Postload_GfxDynamicLightsetGChunkInfoStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxDynamicLightsetGChunkInfoStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic774
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic774(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic774@@YAXXZ();
}

/*
==============
Preload_GfxLightmapRaw
==============
*/

void __fastcall Preload_GfxLightmapRaw(const DBStreamStart streamStart)
{
  ?Preload_GfxLightmapRaw@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_GfxHeightfieldArray
==============
*/

void __fastcall Preload_GfxHeightfieldArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxHeightfieldArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxDynamicLightsetPortalGIDataArray
==============
*/

int __fastcall Mark_GfxDynamicLightsetPortalGIDataArray(const unsigned __int64 count)
{
  return ?Mark_GfxDynamicLightsetPortalGIDataArray@@YAH_K@Z(count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic1077
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic1077(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic1077@@YAXXZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic717
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic717(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic717@@YAXXZ();
}

/*
==============
Preload_GfxDecalVolumeCollectionStream
==============
*/

void __fastcall Preload_GfxDecalVolumeCollectionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxDecalVolumeCollectionStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxWorldLightmapReindexDataArray
==============
*/

int __fastcall Mark_GfxWorldLightmapReindexDataArray(const unsigned __int64 count)
{
  return ?Mark_GfxWorldLightmapReindexDataArray@@YAH_K@Z(count);
}

/*
==============
Postload_GfxSHCompressedProbeData
==============
*/

void __fastcall Postload_GfxSHCompressedProbeData(const DBStreamStart streamStart)
{
  ?Postload_GfxSHCompressedProbeData@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxWorldDpvsPlane
==============
*/

void __fastcall Load_GfxWorldDpvsPlane(const DBStreamStart streamStart)
{
  ?Load_GfxWorldDpvsPlane@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic501
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic501(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic501@@YAXXZ();
}

/*
==============
Load_GfxModelLightmapInstStream
==============
*/

void __fastcall Load_GfxModelLightmapInstStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxModelLightmapInstStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxDrawSurfArray
==============
*/

int __fastcall Mark_GfxDrawSurfArray(const unsigned __int64 count)
{
  return ?Mark_GfxDrawSurfArray@@YAH_K@Z(count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic627
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic627(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic627@@YAXXZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic1098
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic1098(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic1098@@YAXXZ();
}

/*
==============
AllocPostload_GfxDecalVolumeCollection
==============
*/

GfxDecalVolumeCollection *__fastcall AllocPostload_GfxDecalVolumeCollection()
{
  return ?AllocPostload_GfxDecalVolumeCollection@@YAPEAUGfxDecalVolumeCollection@@XZ();
}

/*
==============
Load_GfxGpuLightGridTetrahedronArray
==============
*/

void __fastcall Load_GfxGpuLightGridTetrahedronArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxGpuLightGridTetrahedronArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxWorldDpvsStaticArray
==============
*/

void __fastcall Preload_GfxWorldDpvsStaticArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxWorldDpvsStaticArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxLightGridType
==============
*/

void __fastcall Preload_GfxLightGridType(const DBStreamStart streamStart)
{
  ?Preload_GfxLightGridType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_GfxDynamicLightsetProbeDataArray
==============
*/

void __fastcall Preload_GfxDynamicLightsetProbeDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxDynamicLightsetProbeDataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxWorldLightmapReindexDataElementStream
==============
*/

void __fastcall Postload_GfxWorldLightmapReindexDataElementStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxWorldLightmapReindexDataElementStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_GfxWorldPackedLightmap
==============
*/

GfxWorldPackedLightmap *__fastcall AllocLoad_GfxWorldPackedLightmap()
{
  return ?AllocLoad_GfxWorldPackedLightmap@@YAPEAUGfxWorldPackedLightmap@@XZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic254
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic254(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic254@@YAXXZ();
}

/*
==============
Load_GfxLightViewFrustumStream
==============
*/

void __fastcall Load_GfxLightViewFrustumStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxLightViewFrustumStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxWorldPackedLightmapStream
==============
*/

void __fastcall Postload_GfxWorldPackedLightmapStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxWorldPackedLightmapStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxGpuLightGrid
==============
*/

int __fastcall Mark_GfxGpuLightGrid()
{
  return ?Mark_GfxGpuLightGrid@@YAHXZ();
}

/*
==============
Preload_GfxVoxelInternalNodeArray
==============
*/

void __fastcall Preload_GfxVoxelInternalNodeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxVoxelInternalNodeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxLightGridVolumeAtlasDataTempPtrStream
==============
*/

void __fastcall Postload_GfxLightGridVolumeAtlasDataTempPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxLightGridVolumeAtlasDataTempPtrStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxWorldDrawCellsArray
==============
*/

void __fastcall Postload_GfxWorldDrawCellsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxWorldDrawCellsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxShadowGeometry
==============
*/

void __fastcall Preload_GfxShadowGeometry(const DBStreamStart streamStart)
{
  ?Preload_GfxShadowGeometry@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxGpuLightGridTetrahedronStream
==============
*/

void __fastcall Postload_GfxGpuLightGridTetrahedronStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxGpuLightGridTetrahedronStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_GfxPortal
==============
*/

GfxPortal *__fastcall AllocPreload_GfxPortal()
{
  return ?AllocPreload_GfxPortal@@YAPEAUGfxPortal@@XZ();
}

/*
==============
Load_ProcessStructLayout_StaticModelIndex
==============
*/

void Load_ProcessStructLayout_StaticModelIndex(void)
{
  ?Load_ProcessStructLayout_StaticModelIndex@@YAXXZ();
}

/*
==============
Postload_GfxWorldDpvsDynamicStream
==============
*/

void __fastcall Postload_GfxWorldDpvsDynamicStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxWorldDpvsDynamicStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxHeightfieldStream
==============
*/

void __fastcall Postload_GfxHeightfieldStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxHeightfieldStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_GfxDecalVolumeCollection
==============
*/

void Load_ProcessStructLayout_GfxDecalVolumeCollection(void)
{
  ?Load_ProcessStructLayout_GfxDecalVolumeCollection@@YAXXZ();
}

/*
==============
Load_ProcessStructLayout_GfxStaticDecalVolumeMask
==============
*/

void Load_ProcessStructLayout_GfxStaticDecalVolumeMask(void)
{
  ?Load_ProcessStructLayout_GfxStaticDecalVolumeMask@@YAXXZ();
}

/*
==============
AllocPostload_GfxGpuLightGridTransientData
==============
*/

GfxGpuLightGridTransientData *__fastcall AllocPostload_GfxGpuLightGridTransientData()
{
  return ?AllocPostload_GfxGpuLightGridTransientData@@YAPEAUGfxGpuLightGridTransientData@@XZ();
}

/*
==============
Load_GfxStaticDecalVolumePacked
==============
*/

void __fastcall Load_GfxStaticDecalVolumePacked(const DBStreamStart streamStart)
{
  ?Load_GfxStaticDecalVolumePacked@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_GfxWorldTransientZoneStream
==============
*/

void __fastcall Preload_GfxWorldTransientZoneStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxWorldTransientZoneStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxWorldPtrArray
==============
*/

void __fastcall Preload_GfxWorldPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxWorldPtrArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxDisplacementParms
==============
*/

void __fastcall Postload_GfxDisplacementParms(const DBStreamStart streamStart)
{
  ?Postload_GfxDisplacementParms@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic310
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic310(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic310@@YAXXZ();
}

/*
==============
AllocPostload_GfxLightmapAtlasDataTemp
==============
*/

GfxLightmapAtlasDataTemp *__fastcall AllocPostload_GfxLightmapAtlasDataTemp()
{
  return ?AllocPostload_GfxLightmapAtlasDataTemp@@YAPEAUGfxLightmapAtlasDataTemp@@XZ();
}

/*
==============
AllocPostload_GfxDrawSurf
==============
*/

GfxDrawSurf *__fastcall AllocPostload_GfxDrawSurf()
{
  return ?AllocPostload_GfxDrawSurf@@YAPEATGfxDrawSurf@@XZ();
}

/*
==============
AllocPostload_BspVersion
==============
*/

BspVersion *__fastcall AllocPostload_BspVersion()
{
  return ?AllocPostload_BspVersion@@YAPEAW4BspVersion@@XZ();
}

/*
==============
AllocPostload_GfxMayhemSelfVis
==============
*/

GfxMayhemSelfVis *__fastcall AllocPostload_GfxMayhemSelfVis()
{
  return ?AllocPostload_GfxMayhemSelfVis@@YAPEAUGfxMayhemSelfVis@@XZ();
}

/*
==============
Mark_GfxLightmapRaw
==============
*/

int __fastcall Mark_GfxLightmapRaw()
{
  return ?Mark_GfxLightmapRaw@@YAHXZ();
}

/*
==============
Preload_GfxVoxelInternalNode
==============
*/

void __fastcall Preload_GfxVoxelInternalNode(const DBStreamStart streamStart)
{
  ?Preload_GfxVoxelInternalNode@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxDynamicLightset
==============
*/

void __fastcall Postload_GfxDynamicLightset(const DBStreamStart streamStart)
{
  ?Postload_GfxDynamicLightset@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxGpuDynLightsetsLGVReference
==============
*/

void __fastcall Load_GfxGpuDynLightsetsLGVReference(const DBStreamStart streamStart)
{
  ?Load_GfxGpuDynLightsetsLGVReference@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic1042
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic1042(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic1042@@YAXXZ();
}

/*
==============
Postload_GfxGpuLightGridTetrahedronVisibility
==============
*/

void __fastcall Postload_GfxGpuLightGridTetrahedronVisibility(const DBStreamStart streamStart)
{
  ?Postload_GfxGpuLightGridTetrahedronVisibility@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxDynamicLightsetPortalGIData
==============
*/

void __fastcall Postload_GfxDynamicLightsetPortalGIData(const DBStreamStart streamStart)
{
  ?Postload_GfxDynamicLightsetPortalGIData@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_GfxStaticDecalVolumeMaskStream
==============
*/

void __fastcall Preload_GfxStaticDecalVolumeMaskStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxStaticDecalVolumeMaskStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxStaticModelLightGridVolumeFlagsStream
==============
*/

void __fastcall Postload_GfxStaticModelLightGridVolumeFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxStaticModelLightGridVolumeFlagsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxPortalArray
==============
*/

void __fastcall Postload_GfxPortalArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxPortalArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxWorldDpvsPlanesArray
==============
*/

int __fastcall Mark_GfxWorldDpvsPlanesArray(const unsigned __int64 count)
{
  return ?Mark_GfxWorldDpvsPlanesArray@@YAH_K@Z(count);
}

/*
==============
Preload_GfxWorldDpvsDynamicArray
==============
*/

void __fastcall Preload_GfxWorldDpvsDynamicArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxWorldDpvsDynamicArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_UmbraGate
==============
*/

void Load_ProcessStructLayout_UmbraGate(void)
{
  ?Load_ProcessStructLayout_UmbraGate@@YAXXZ();
}

/*
==============
Postload_GfxAabbTreeArray
==============
*/

void __fastcall Postload_GfxAabbTreeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxAabbTreeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_LightGridVolumePackingParams
==============
*/

LightGridVolumePackingParams *__fastcall AllocPostload_LightGridVolumePackingParams()
{
  return ?AllocPostload_LightGridVolumePackingParams@@YAPEAULightGridVolumePackingParams@@XZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic387
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic387(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic387@@YAXXZ();
}

/*
==============
Load_GfxDynamicLightsetBFDataArray
==============
*/

void __fastcall Load_GfxDynamicLightsetBFDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxDynamicLightsetBFDataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_GfxCellTreeCount
==============
*/

GfxCellTreeCount *__fastcall AllocLoad_GfxCellTreeCount()
{
  return ?AllocLoad_GfxCellTreeCount@@YAPEAUGfxCellTreeCount@@XZ();
}

/*
==============
AllocPreload_GfxHeightfield
==============
*/

GfxHeightfield *__fastcall AllocPreload_GfxHeightfield()
{
  return ?AllocPreload_GfxHeightfield@@YAPEAUGfxHeightfield@@XZ();
}

/*
==============
Load_GfxGpuLightGridVoxelStartTetrahedronStream
==============
*/

void __fastcall Load_GfxGpuLightGridVoxelStartTetrahedronStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxGpuLightGridVoxelStartTetrahedronStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxDecalVolumeCollectionStream
==============
*/

void __fastcall Load_GfxDecalVolumeCollectionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxDecalVolumeCollectionStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_GfxMapEntLookup
==============
*/

GfxMapEntLookup *__fastcall AllocPreload_GfxMapEntLookup()
{
  return ?AllocPreload_GfxMapEntLookup@@YAPEAUGfxMapEntLookup@@XZ();
}

/*
==============
Load_LightGridVolumeTransformParamsStream
==============
*/

void __fastcall Load_LightGridVolumeTransformParamsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_LightGridVolumeTransformParamsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxCompressedSunShadowParamsArray
==============
*/

void __fastcall Preload_GfxCompressedSunShadowParamsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxCompressedSunShadowParamsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxCompressedSunShadowDataTempPtrStream
==============
*/

void __fastcall Postload_GfxCompressedSunShadowDataTempPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxCompressedSunShadowDataTempPtrStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxDynamicLightsetGChunkInfoArray
==============
*/

void __fastcall Postload_GfxDynamicLightsetGChunkInfoArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxDynamicLightsetGChunkInfoArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic557
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic557(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic557@@YAXXZ();
}

/*
==============
Load_ProcessStructLayout_BspVersion
==============
*/

void Load_ProcessStructLayout_BspVersion(void)
{
  ?Load_ProcessStructLayout_BspVersion@@YAXXZ();
}

/*
==============
Load_GfxLightGridVolumeAtlasDataTempPtrArray
==============
*/

void __fastcall Load_GfxLightGridVolumeAtlasDataTempPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxLightGridVolumeAtlasDataTempPtrArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxVoxelTopDownViewNodeArray
==============
*/

int __fastcall Mark_GfxVoxelTopDownViewNodeArray(const unsigned __int64 count)
{
  return ?Mark_GfxVoxelTopDownViewNodeArray@@YAH_K@Z(count);
}

/*
==============
Preload_GfxGpuDynLightsetsLGVReferenceArray
==============
*/

void __fastcall Preload_GfxGpuDynLightsetsLGVReferenceArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxGpuDynLightsetsLGVReferenceArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxCell
==============
*/

void __fastcall Postload_GfxCell(const DBStreamStart streamStart)
{
  ?Postload_GfxCell@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_LightGridVolumePackingParams
==============
*/

void __fastcall Postload_LightGridVolumePackingParams(const DBStreamStart streamStart)
{
  ?Postload_LightGridVolumePackingParams@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_GfxCompressedSunShadowDataTemp
==============
*/

GfxCompressedSunShadowDataTemp *__fastcall AllocLoad_GfxCompressedSunShadowDataTemp()
{
  return ?AllocLoad_GfxCompressedSunShadowDataTemp@@YAPEAUGfxCompressedSunShadowDataTemp@@XZ();
}

/*
==============
Mark_GfxDynamicLightsetLGppZoneInfo
==============
*/

int __fastcall Mark_GfxDynamicLightsetLGppZoneInfo()
{
  return ?Mark_GfxDynamicLightsetLGppZoneInfo@@YAHXZ();
}

/*
==============
Postload_mnode_tStream
==============
*/

void __fastcall Postload_mnode_tStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_mnode_tStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic893
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic893(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic893@@YAXXZ();
}

/*
==============
AllocPostload_GfxLightmapType
==============
*/

GfxLightmapType *__fastcall AllocPostload_GfxLightmapType()
{
  return ?AllocPostload_GfxLightmapType@@YAPEAW4GfxLightmapType@@XZ();
}

/*
==============
Mark_GfxDynamicLightsetProbeData
==============
*/

int __fastcall Mark_GfxDynamicLightsetProbeData()
{
  return ?Mark_GfxDynamicLightsetProbeData@@YAHXZ();
}

/*
==============
Preload_GfxStaticModelLightGridVolumeArray
==============
*/

void __fastcall Preload_GfxStaticModelLightGridVolumeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxStaticModelLightGridVolumeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxVoxelLeafNodeArray
==============
*/

int __fastcall Mark_GfxVoxelLeafNodeArray(const unsigned __int64 count)
{
  return ?Mark_GfxVoxelLeafNodeArray@@YAH_K@Z(count);
}

/*
==============
Postload_GfxLightAABBArray
==============
*/

void __fastcall Postload_GfxLightAABBArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxLightAABBArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_UmbraGate
==============
*/

void __fastcall Load_UmbraGate(const DBStreamStart streamStart)
{
  ?Load_UmbraGate@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic985
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic985(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic985@@YAXXZ();
}

/*
==============
AllocPostload_GfxVoxelInternalNode
==============
*/

GfxVoxelInternalNode *__fastcall AllocPostload_GfxVoxelInternalNode()
{
  return ?AllocPostload_GfxVoxelInternalNode@@YAPEAUGfxVoxelInternalNode@@XZ();
}

/*
==============
AllocPostload_GfxDynamicLightset
==============
*/

GfxDynamicLightset *__fastcall AllocPostload_GfxDynamicLightset()
{
  return ?AllocPostload_GfxDynamicLightset@@YAPEAUGfxDynamicLightset@@XZ();
}

/*
==============
AllocPostload_GfxSHProbeData
==============
*/

GfxSHProbeData *__fastcall AllocPostload_GfxSHProbeData()
{
  return ?AllocPostload_GfxSHProbeData@@YAPEAUGfxSHProbeData@@XZ();
}

/*
==============
AllocPostload_GfxStaticDecalVolumeUid
==============
*/

GfxStaticDecalVolumeUid *__fastcall AllocPostload_GfxStaticDecalVolumeUid()
{
  return ?AllocPostload_GfxStaticDecalVolumeUid@@YAPEAUGfxStaticDecalVolumeUid@@XZ();
}

/*
==============
Postload_GfxWorldLightmapImagePtrArrayStream
==============
*/

void __fastcall Postload_GfxWorldLightmapImagePtrArrayStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxWorldLightmapImagePtrArrayStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxStaticModelLightGridVolumeFlagsArray
==============
*/

void __fastcall Preload_GfxStaticModelLightGridVolumeFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxStaticModelLightGridVolumeFlagsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_GfxLightGridVolumeAtlasDataTempPtr
==============
*/

GfxLightGridVolumeAtlasDataTemp **__fastcall AllocPostload_GfxLightGridVolumeAtlasDataTempPtr()
{
  return ?AllocPostload_GfxLightGridVolumeAtlasDataTempPtr@@YAPEAPEAUGfxLightGridVolumeAtlasDataTemp@@XZ();
}

/*
==============
Mark_GfxCellTreeArray
==============
*/

int __fastcall Mark_GfxCellTreeArray(const unsigned __int64 count)
{
  return ?Mark_GfxCellTreeArray@@YAH_K@Z(count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic844
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic844(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic844@@YAXXZ();
}

/*
==============
AllocPreload_BspVersion
==============
*/

BspVersion *__fastcall AllocPreload_BspVersion()
{
  return ?AllocPreload_BspVersion@@YAPEAW4BspVersion@@XZ();
}

/*
==============
AllocPostload_GfxCell
==============
*/

GfxCell *__fastcall AllocPostload_GfxCell()
{
  return ?AllocPostload_GfxCell@@YAPEAUGfxCell@@XZ();
}

/*
==============
AllocLoad_GfxDynamicLightsetBFType
==============
*/

GfxDynamicLightsetBFType *__fastcall AllocLoad_GfxDynamicLightsetBFType()
{
  return ?AllocLoad_GfxDynamicLightsetBFType@@YAPEAW4GfxDynamicLightsetBFType@@XZ();
}

/*
==============
Postload_GfxVoxelTopDownViewNodeStream
==============
*/

void __fastcall Postload_GfxVoxelTopDownViewNodeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxVoxelTopDownViewNodeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxSHCompressedProbeDataArray
==============
*/

void __fastcall Postload_GfxSHCompressedProbeDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxSHCompressedProbeDataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxLightAABBArray
==============
*/

int __fastcall Mark_GfxLightAABBArray(const unsigned __int64 count)
{
  return ?Mark_GfxLightAABBArray@@YAH_K@Z(count);
}

/*
==============
Load_GfxAabbTreeArray
==============
*/

void __fastcall Load_GfxAabbTreeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxAabbTreeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxGpuLightGridVoxelTree
==============
*/

void __fastcall Load_GfxGpuLightGridVoxelTree(const DBStreamStart streamStart)
{
  ?Load_GfxGpuLightGridVoxelTree@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_GfxWorldDpvsPlane
==============
*/

GfxWorldDpvsPlane *__fastcall AllocPreload_GfxWorldDpvsPlane()
{
  return ?AllocPreload_GfxWorldDpvsPlane@@YAPEAUGfxWorldDpvsPlane@@XZ();
}

/*
==============
Load_GfxGpuLightGridTransientData
==============
*/

void __fastcall Load_GfxGpuLightGridTransientData(const DBStreamStart streamStart)
{
  ?Load_GfxGpuLightGridTransientData@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic445
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic445(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic445@@YAXXZ();
}

/*
==============
AllocLoad_GfxVoxelTopDownViewNode
==============
*/

GfxVoxelTopDownViewNode *__fastcall AllocLoad_GfxVoxelTopDownViewNode()
{
  return ?AllocLoad_GfxVoxelTopDownViewNode@@YAPEAUGfxVoxelTopDownViewNode@@XZ();
}

/*
==============
Preload_GfxDecalVolumeTransientData
==============
*/

void __fastcall Preload_GfxDecalVolumeTransientData(const DBStreamStart streamStart)
{
  ?Preload_GfxDecalVolumeTransientData@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxGpuLightGridTransientDataArray
==============
*/

void __fastcall Load_GfxGpuLightGridTransientDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxGpuLightGridTransientDataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic915
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic915(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic915@@YAXXZ();
}

/*
==============
AllocPreload_GfxSHCompressedProbeData
==============
*/

GfxSHCompressedProbeData *__fastcall AllocPreload_GfxSHCompressedProbeData()
{
  return ?AllocPreload_GfxSHCompressedProbeData@@YAPEAUGfxSHCompressedProbeData@@XZ();
}

/*
==============
Load_ProcessStructLayout_GfxLightmapRaw
==============
*/

void Load_ProcessStructLayout_GfxLightmapRaw(void)
{
  ?Load_ProcessStructLayout_GfxLightmapRaw@@YAXXZ();
}

/*
==============
Postload_GfxAabbTree
==============
*/

void __fastcall Postload_GfxAabbTree(const DBStreamStart streamStart)
{
  ?Postload_GfxAabbTree@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_StaticModelIndexArray
==============
*/

void __fastcall Load_StaticModelIndexArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_StaticModelIndexArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxCellTreeCountArray
==============
*/

void __fastcall Load_GfxCellTreeCountArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxCellTreeCountArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxGpuLightGridTransientData
==============
*/

void __fastcall Postload_GfxGpuLightGridTransientData(const DBStreamStart streamStart)
{
  ?Postload_GfxGpuLightGridTransientData@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic781
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic781(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic781@@YAXXZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic851
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic851(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic851@@YAXXZ();
}

/*
==============
Postload_GfxDrawSurfStream
==============
*/

void __fastcall Postload_GfxDrawSurfStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxDrawSurfStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_GfxWorldLightmapImagePtrArray
==============
*/

void Load_ProcessStructLayout_GfxWorldLightmapImagePtrArray(void)
{
  ?Load_ProcessStructLayout_GfxWorldLightmapImagePtrArray@@YAXXZ();
}

/*
==============
Postload_LightGridVolumeTransformParams
==============
*/

void __fastcall Postload_LightGridVolumeTransformParams(const DBStreamStart streamStart)
{
  ?Postload_LightGridVolumeTransformParams@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxDynamicLightsetGChunkFlagsStream
==============
*/

void __fastcall Postload_GfxDynamicLightsetGChunkFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxDynamicLightsetGChunkFlagsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxWorldPackedLightmap
==============
*/

void __fastcall Postload_GfxWorldPackedLightmap(const DBStreamStart streamStart)
{
  ?Postload_GfxWorldPackedLightmap@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_LightGridVolumeTransformParams
==============
*/

void __fastcall Preload_LightGridVolumeTransformParams(const DBStreamStart streamStart)
{
  ?Preload_LightGridVolumeTransformParams@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_umbraTomePtr_tArray
==============
*/

int __fastcall Mark_umbraTomePtr_tArray(const unsigned __int64 count)
{
  return ?Mark_umbraTomePtr_tArray@@YAH_K@Z(count);
}

/*
==============
AllocPostload_GfxGpuLightGridTetrahedron
==============
*/

GfxGpuLightGridTetrahedron *__fastcall AllocPostload_GfxGpuLightGridTetrahedron()
{
  return ?AllocPostload_GfxGpuLightGridTetrahedron@@YAPEAUGfxGpuLightGridTetrahedron@@XZ();
}

/*
==============
Mark_GfxWorldTransientZone
==============
*/

int __fastcall Mark_GfxWorldTransientZone()
{
  return ?Mark_GfxWorldTransientZone@@YAHXZ();
}

/*
==============
Preload_GfxVoxelTreeHeader
==============
*/

void __fastcall Preload_GfxVoxelTreeHeader(const DBStreamStart streamStart)
{
  ?Preload_GfxVoxelTreeHeader@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_GfxDynamicLightsetProductGIDataArray
==============
*/

void __fastcall Preload_GfxDynamicLightsetProductGIDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxDynamicLightsetProductGIDataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxDynamicLightsetBFType
==============
*/

void __fastcall Postload_GfxDynamicLightsetBFType(const DBStreamStart streamStart)
{
  ?Postload_GfxDynamicLightsetBFType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_GfxWorldDpvsStatic
==============
*/

GfxWorldDpvsStatic *__fastcall AllocPreload_GfxWorldDpvsStatic()
{
  return ?AllocPreload_GfxWorldDpvsStatic@@YAPEAUGfxWorldDpvsStatic@@XZ();
}

/*
==============
Mark_GfxDisplacementParms
==============
*/

int __fastcall Mark_GfxDisplacementParms()
{
  return ?Mark_GfxDisplacementParms@@YAHXZ();
}

/*
==============
Preload_umbraTomePtr_tArray
==============
*/

void __fastcall Preload_umbraTomePtr_tArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_umbraTomePtr_tArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_GfxCompressedSunShadowParams
==============
*/

GfxCompressedSunShadowParams *__fastcall AllocPreload_GfxCompressedSunShadowParams()
{
  return ?AllocPreload_GfxCompressedSunShadowParams@@YAPEAUGfxCompressedSunShadowParams@@XZ();
}

/*
==============
Postload_GfxDynamicLightsetGChunkFlagsArray
==============
*/

void __fastcall Postload_GfxDynamicLightsetGChunkFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxDynamicLightsetGChunkFlagsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic205
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic205(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic205@@YAXXZ();
}

/*
==============
AllocPreload_GfxAabbTree
==============
*/

GfxAabbTree *__fastcall AllocPreload_GfxAabbTree()
{
  return ?AllocPreload_GfxAabbTree@@YAPEAUGfxAabbTree@@XZ();
}

/*
==============
AllocLoad_GfxDecalVolumeTransientData
==============
*/

GfxDecalVolumeTransientData *__fastcall AllocLoad_GfxDecalVolumeTransientData()
{
  return ?AllocLoad_GfxDecalVolumeTransientData@@YAPEAUGfxDecalVolumeTransientData@@XZ();
}

/*
==============
Preload_GfxHeightfield
==============
*/

void __fastcall Preload_GfxHeightfield(const DBStreamStart streamStart)
{
  ?Preload_GfxHeightfield@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_GfxDrawSurf
==============
*/

GfxDrawSurf *__fastcall AllocLoad_GfxDrawSurf()
{
  return ?AllocLoad_GfxDrawSurf@@YAPEATGfxDrawSurf@@XZ();
}

/*
==============
Load_GfxLightAABBArray
==============
*/

void __fastcall Load_GfxLightAABBArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxLightAABBArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxGpuLightGridVoxelStartTetrahedronStream
==============
*/

void __fastcall Postload_GfxGpuLightGridVoxelStartTetrahedronStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxGpuLightGridVoxelStartTetrahedronStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_GfxModelLightmapInst
==============
*/

GfxModelLightmapInst *__fastcall AllocPostload_GfxModelLightmapInst()
{
  return ?AllocPostload_GfxModelLightmapInst@@YAPEAUGfxModelLightmapInst@@XZ();
}

/*
==============
Preload_GfxWorldTransientZonePtrStream
==============
*/

void __fastcall Preload_GfxWorldTransientZonePtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxWorldTransientZonePtrStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_GfxWorldDpvsDynamic
==============
*/

GfxWorldDpvsDynamic *__fastcall AllocPreload_GfxWorldDpvsDynamic()
{
  return ?AllocPreload_GfxWorldDpvsDynamic@@YAPEAUGfxWorldDpvsDynamic@@XZ();
}

/*
==============
Preload_GfxSHProbeDataStream
==============
*/

void __fastcall Preload_GfxSHProbeDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxSHProbeDataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_GfxWorld
==============
*/

GfxWorld *__fastcall AllocPostload_GfxWorld()
{
  return ?AllocPostload_GfxWorld@@YAPEAUGfxWorld@@XZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic599
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic599(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic599@@YAXXZ();
}

/*
==============
Load_GfxGpuLightGridArray
==============
*/

void __fastcall Load_GfxGpuLightGridArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxGpuLightGridArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxWorldDpvsPlanesArray
==============
*/

void __fastcall Preload_GfxWorldDpvsPlanesArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxWorldDpvsPlanesArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_DpvsPlaneArray
==============
*/

void __fastcall Load_DpvsPlaneArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_DpvsPlaneArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_GfxMayhemSelfVis
==============
*/

GfxMayhemSelfVis *__fastcall AllocPreload_GfxMayhemSelfVis()
{
  return ?AllocPreload_GfxMayhemSelfVis@@YAPEAUGfxMayhemSelfVis@@XZ();
}

/*
==============
AllocPreload_GfxFrustumLights
==============
*/

GfxFrustumLights *__fastcall AllocPreload_GfxFrustumLights()
{
  return ?AllocPreload_GfxFrustumLights@@YAPEAUGfxFrustumLights@@XZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic452
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic452(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic452@@YAXXZ();
}

/*
==============
AllocLoad_GfxGpuLightGridTransientData
==============
*/

GfxGpuLightGridTransientData *__fastcall AllocLoad_GfxGpuLightGridTransientData()
{
  return ?AllocLoad_GfxGpuLightGridTransientData@@YAPEAUGfxGpuLightGridTransientData@@XZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic1112
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic1112(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic1112@@YAXXZ();
}

/*
==============
Load_GfxDynamicLightsetPortalGIData
==============
*/

void __fastcall Load_GfxDynamicLightsetPortalGIData(const DBStreamStart streamStart)
{
  ?Load_GfxDynamicLightsetPortalGIData@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxWorldDrawArray
==============
*/

void __fastcall Postload_GfxWorldDrawArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxWorldDrawArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_DpvsPlaneStream
==============
*/

void __fastcall Load_DpvsPlaneStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_DpvsPlaneStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxGpuDynLightsetsLGVReferenceStream
==============
*/

void __fastcall Load_GfxGpuDynLightsetsLGVReferenceStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxGpuDynLightsetsLGVReferenceStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxGpuLightGridTransientDataArray
==============
*/

void __fastcall Preload_GfxGpuLightGridTransientDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxGpuLightGridTransientDataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxCompressedSunShadowParamsStream
==============
*/

void __fastcall Postload_GfxCompressedSunShadowParamsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxCompressedSunShadowParamsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic508
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic508(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic508@@YAXXZ();
}

/*
==============
Load_GfxLightmapRawArray
==============
*/

void __fastcall Load_GfxLightmapRawArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxLightmapRawArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxFrustumLights
==============
*/

void __fastcall Load_GfxFrustumLights(const DBStreamStart streamStart)
{
  ?Load_GfxFrustumLights@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_GfxFrustumLights
==============
*/

void Load_ProcessStructLayout_GfxFrustumLights(void)
{
  ?Load_ProcessStructLayout_GfxFrustumLights@@YAXXZ();
}

/*
==============
AllocPostload_GfxPrecomputedSkyIllumination
==============
*/

GfxPrecomputedSkyIllumination *__fastcall AllocPostload_GfxPrecomputedSkyIllumination()
{
  return ?AllocPostload_GfxPrecomputedSkyIllumination@@YAPEAUGfxPrecomputedSkyIllumination@@XZ();
}

/*
==============
Preload_GfxGpuLightGridTetrahedronVisibilityStream
==============
*/

void __fastcall Preload_GfxGpuLightGridTetrahedronVisibilityStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxGpuLightGridTetrahedronVisibilityStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxDynamicLightsetProductGIDataArray
==============
*/

void __fastcall Load_GfxDynamicLightsetProductGIDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxDynamicLightsetProductGIDataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxWorldDpvsPlanesStream
==============
*/

void __fastcall Postload_GfxWorldDpvsPlanesStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxWorldDpvsPlanesStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_GfxLightmapAtlasDataTemp
==============
*/

void Load_ProcessStructLayout_GfxLightmapAtlasDataTemp(void)
{
  ?Load_ProcessStructLayout_GfxLightmapAtlasDataTemp@@YAXXZ();
}

/*
==============
Load_GfxWorldTransientZoneStream
==============
*/

void __fastcall Load_GfxWorldTransientZoneStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxWorldTransientZoneStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxWorldTransientZone
==============
*/

void __fastcall Postload_GfxWorldTransientZone(const DBStreamStart streamStart)
{
  ?Postload_GfxWorldTransientZone@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_GfxGpuLightGridTetrahedronStream
==============
*/

void __fastcall Preload_GfxGpuLightGridTetrahedronStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxGpuLightGridTetrahedronStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_UmbraGateArray
==============
*/

void __fastcall Postload_UmbraGateArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_UmbraGateArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_UmbraGate
==============
*/

void __fastcall Postload_UmbraGate(const DBStreamStart streamStart)
{
  ?Postload_UmbraGate@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_GfxCellTransientInfo
==============
*/

GfxCellTransientInfo *__fastcall AllocPreload_GfxCellTransientInfo()
{
  return ?AllocPreload_GfxCellTransientInfo@@YAPEAUGfxCellTransientInfo@@XZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic529
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic529(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic529@@YAXXZ();
}

/*
==============
Load_GfxDynamicLightsetLightInfoArray
==============
*/

void __fastcall Load_GfxDynamicLightsetLightInfoArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxDynamicLightsetLightInfoArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_GfxLightmapRaw
==============
*/

GfxLightmapRaw *__fastcall AllocPostload_GfxLightmapRaw()
{
  return ?AllocPostload_GfxLightmapRaw@@YAPEAUGfxLightmapRaw@@XZ();
}

/*
==============
AllocPreload_GfxLightAABB
==============
*/

GfxLightAABB *__fastcall AllocPreload_GfxLightAABB()
{
  return ?AllocPreload_GfxLightAABB@@YAPEAUGfxLightAABB@@XZ();
}

/*
==============
AllocPostload_GfxLightAABBNode
==============
*/

GfxLightAABBNode *__fastcall AllocPostload_GfxLightAABBNode()
{
  return ?AllocPostload_GfxLightAABBNode@@YAPEAUGfxLightAABBNode@@XZ();
}

/*
==============
AllocPreload_GfxCompressedSunShadowDataTemp
==============
*/

GfxCompressedSunShadowDataTemp *__fastcall AllocPreload_GfxCompressedSunShadowDataTemp()
{
  return ?AllocPreload_GfxCompressedSunShadowDataTemp@@YAPEAUGfxCompressedSunShadowDataTemp@@XZ();
}

/*
==============
AllocLoad_GfxSceneDynModel
==============
*/

GfxSceneDynModel *__fastcall AllocLoad_GfxSceneDynModel()
{
  return ?AllocLoad_GfxSceneDynModel@@YAPEAUGfxSceneDynModel@@XZ();
}

/*
==============
Load_GfxCompressedSunShadowDataTempStream
==============
*/

void __fastcall Load_GfxCompressedSunShadowDataTempStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxCompressedSunShadowDataTempStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxVoxelInternalNodeStream
==============
*/

void __fastcall Postload_GfxVoxelInternalNodeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxVoxelInternalNodeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxVoxelTopDownViewNodeStream
==============
*/

void __fastcall Load_GfxVoxelTopDownViewNodeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxVoxelTopDownViewNodeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxLightGridTypeStream
==============
*/

void __fastcall Preload_GfxLightGridTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxLightGridTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxGpuLightGridArray
==============
*/

void __fastcall Postload_GfxGpuLightGridArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxGpuLightGridArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxFrustumLights
==============
*/

void __fastcall Postload_GfxFrustumLights(const DBStreamStart streamStart)
{
  ?Postload_GfxFrustumLights@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_GfxWorldDrawStream
==============
*/

void __fastcall Preload_GfxWorldDrawStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxWorldDrawStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_GfxWorldLightmapReindexData
==============
*/

GfxWorldLightmapReindexData *__fastcall AllocLoad_GfxWorldLightmapReindexData()
{
  return ?AllocLoad_GfxWorldLightmapReindexData@@YAPEAUGfxWorldLightmapReindexData@@XZ();
}

/*
==============
Mark_GfxGpuLightGridVoxelStartTetrahedron
==============
*/

int __fastcall Mark_GfxGpuLightGridVoxelStartTetrahedron()
{
  return ?Mark_GfxGpuLightGridVoxelStartTetrahedron@@YAHXZ();
}

/*
==============
Postload_GfxWorldLightmapImagePtrArrayArray
==============
*/

void __fastcall Postload_GfxWorldLightmapImagePtrArrayArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxWorldLightmapImagePtrArrayArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxGpuLightGridArray
==============
*/

void __fastcall Preload_GfxGpuLightGridArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxGpuLightGridArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxWorldDpvsPlanes
==============
*/

void __fastcall Postload_GfxWorldDpvsPlanes(const DBStreamStart streamStart)
{
  ?Postload_GfxWorldDpvsPlanes@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_GfxStaticDecalVolumePacked
==============
*/

GfxStaticDecalVolumePacked *__fastcall AllocPostload_GfxStaticDecalVolumePacked()
{
  return ?AllocPostload_GfxStaticDecalVolumePacked@@YAPEAUGfxStaticDecalVolumePacked@@XZ();
}

/*
==============
Load_ProcessStructLayout_GfxWorldDpvsDynamic
==============
*/

void Load_ProcessStructLayout_GfxWorldDpvsDynamic(void)
{
  ?Load_ProcessStructLayout_GfxWorldDpvsDynamic@@YAXXZ();
}

/*
==============
Mark_GfxLightmapTypeArray
==============
*/

int __fastcall Mark_GfxLightmapTypeArray(const unsigned __int64 count)
{
  return ?Mark_GfxLightmapTypeArray@@YAH_K@Z(count);
}

/*
==============
AllocPostload_GfxWorldLightmapImagePtrArray
==============
*/

GfxWorldLightmapImagePtrArray *__fastcall AllocPostload_GfxWorldLightmapImagePtrArray()
{
  return ?AllocPostload_GfxWorldLightmapImagePtrArray@@YAPEAUGfxWorldLightmapImagePtrArray@@XZ();
}

/*
==============
Load_LightGridVolumeTransformParams
==============
*/

void __fastcall Load_LightGridVolumeTransformParams(const DBStreamStart streamStart)
{
  ?Load_LightGridVolumeTransformParams@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_GfxWorldLightmapReindexDataElement
==============
*/

void __fastcall Preload_GfxWorldLightmapReindexDataElement(const DBStreamStart streamStart)
{
  ?Preload_GfxWorldLightmapReindexDataElement@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxStaticDecalVolumePackedStream
==============
*/

void __fastcall Postload_GfxStaticDecalVolumePackedStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxStaticDecalVolumePackedStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxGpuLightGridVoxelTreeStream
==============
*/

void __fastcall Load_GfxGpuLightGridVoxelTreeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxGpuLightGridVoxelTreeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxWorldPackedLightmap
==============
*/

void __fastcall Preload_GfxWorldPackedLightmap(const DBStreamStart streamStart)
{
  ?Preload_GfxWorldPackedLightmap@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxWorldDpvsPlanes
==============
*/

void __fastcall Load_GfxWorldDpvsPlanes(const DBStreamStart streamStart)
{
  ?Load_GfxWorldDpvsPlanes@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_GfxDynamicLightsetBFDataArray
==============
*/

void __fastcall Preload_GfxDynamicLightsetBFDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxDynamicLightsetBFDataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_GfxGpuLightGrid
==============
*/

GfxGpuLightGrid *__fastcall AllocPreload_GfxGpuLightGrid()
{
  return ?AllocPreload_GfxGpuLightGrid@@YAPEAUGfxGpuLightGrid@@XZ();
}

/*
==============
Mark_GfxGpuLightGridTetrahedronVisibilityArray
==============
*/

int __fastcall Mark_GfxGpuLightGridTetrahedronVisibilityArray(const unsigned __int64 count)
{
  return ?Mark_GfxGpuLightGridTetrahedronVisibilityArray@@YAH_K@Z(count);
}

/*
==============
Load_GfxHeightfield
==============
*/

void __fastcall Load_GfxHeightfield(const DBStreamStart streamStart)
{
  ?Load_GfxHeightfield@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_GfxGpuDynLightsetsLGVReference
==============
*/

void Load_ProcessStructLayout_GfxGpuDynLightsetsLGVReference(void)
{
  ?Load_ProcessStructLayout_GfxGpuDynLightsetsLGVReference@@YAXXZ();
}

/*
==============
Preload_GfxLightViewFrustum
==============
*/

void __fastcall Preload_GfxLightViewFrustum(const DBStreamStart streamStart)
{
  ?Preload_GfxLightViewFrustum@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_LightGridVolumeTransformParams
==============
*/

LightGridVolumeTransformParams *__fastcall AllocPreload_LightGridVolumeTransformParams()
{
  return ?AllocPreload_LightGridVolumeTransformParams@@YAPEAULightGridVolumeTransformParams@@XZ();
}

/*
==============
Preload_GfxDynamicLightsetBFData
==============
*/

void __fastcall Preload_GfxDynamicLightsetBFData(const DBStreamStart streamStart)
{
  ?Preload_GfxDynamicLightsetBFData@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_GfxSceneDynBrushArray
==============
*/

int __fastcall Mark_GfxSceneDynBrushArray(const unsigned __int64 count)
{
  return ?Mark_GfxSceneDynBrushArray@@YAH_K@Z(count);
}

/*
==============
AllocLoad_GfxCell
==============
*/

GfxCell *__fastcall AllocLoad_GfxCell()
{
  return ?AllocLoad_GfxCell@@YAPEAUGfxCell@@XZ();
}

/*
==============
Preload_GfxSHProbeData
==============
*/

void __fastcall Preload_GfxSHProbeData(const DBStreamStart streamStart)
{
  ?Preload_GfxSHProbeData@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxSceneDynBrush
==============
*/

void __fastcall Postload_GfxSceneDynBrush(const DBStreamStart streamStart)
{
  ?Postload_GfxSceneDynBrush@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxStaticDecalVolumeMaterialStream
==============
*/

void __fastcall Load_GfxStaticDecalVolumeMaterialStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxStaticDecalVolumeMaterialStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxLightViewFrustum
==============
*/

void __fastcall Postload_GfxLightViewFrustum(const DBStreamStart streamStart)
{
  ?Postload_GfxLightViewFrustum@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_GfxVoxelLeafNode
==============
*/

int __fastcall Mark_GfxVoxelLeafNode()
{
  return ?Mark_GfxVoxelLeafNode@@YAHXZ();
}

/*
==============
Postload_GfxGpuLightGridZoneArray
==============
*/

void __fastcall Postload_GfxGpuLightGridZoneArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxGpuLightGridZoneArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxDecalVolumeCollection
==============
*/

void __fastcall Postload_GfxDecalVolumeCollection(const DBStreamStart streamStart)
{
  ?Postload_GfxDecalVolumeCollection@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxShadowGeometry
==============
*/

void __fastcall Postload_GfxShadowGeometry(const DBStreamStart streamStart)
{
  ?Postload_GfxShadowGeometry@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxLightViewFrustumArray
==============
*/

void __fastcall Load_GfxLightViewFrustumArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxLightViewFrustumArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxLightGridVolumeAtlasDataTempPtr
==============
*/

int __fastcall Mark_GfxLightGridVolumeAtlasDataTempPtr()
{
  return ?Mark_GfxLightGridVolumeAtlasDataTempPtr@@YAHXZ();
}

/*
==============
AllocLoad_GfxDynamicLightsetProductGIData
==============
*/

GfxDynamicLightsetProductGIData *__fastcall AllocLoad_GfxDynamicLightsetProductGIData()
{
  return ?AllocLoad_GfxDynamicLightsetProductGIData@@YAPEAUGfxDynamicLightsetProductGIData@@XZ();
}

/*
==============
Postload_GfxVoxelInternalNodeArray
==============
*/

void __fastcall Postload_GfxVoxelInternalNodeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxVoxelInternalNodeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxStaticModelLightGridVolumeFlagsStream
==============
*/

void __fastcall Load_GfxStaticModelLightGridVolumeFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxStaticModelLightGridVolumeFlagsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxWorldPackedLightmapArray
==============
*/

void __fastcall Preload_GfxWorldPackedLightmapArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxWorldPackedLightmapArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxCompressedSunShadowDataTempArray
==============
*/

int __fastcall Mark_GfxCompressedSunShadowDataTempArray(const unsigned __int64 count)
{
  return ?Mark_GfxCompressedSunShadowDataTempArray@@YAH_K@Z(count);
}

/*
==============
AllocLoad_GfxGpuLightGridVoxelTree
==============
*/

GfxGpuLightGridVoxelTree *__fastcall AllocLoad_GfxGpuLightGridVoxelTree()
{
  return ?AllocLoad_GfxGpuLightGridVoxelTree@@YAPEAUGfxGpuLightGridVoxelTree@@XZ();
}

/*
==============
Preload_StaticModelIndexStream
==============
*/

void __fastcall Preload_StaticModelIndexStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_StaticModelIndexStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_GfxShadowGeometry
==============
*/

GfxShadowGeometry *__fastcall AllocPreload_GfxShadowGeometry()
{
  return ?AllocPreload_GfxShadowGeometry@@YAPEAUGfxShadowGeometry@@XZ();
}

/*
==============
Mark_GfxSceneDynModelArray
==============
*/

int __fastcall Mark_GfxSceneDynModelArray(const unsigned __int64 count)
{
  return ?Mark_GfxSceneDynModelArray@@YAH_K@Z(count);
}

/*
==============
Postload_GfxWorldDrawStream
==============
*/

void __fastcall Postload_GfxWorldDrawStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxWorldDrawStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxVoxelTreeHeaderArray
==============
*/

void __fastcall Preload_GfxVoxelTreeHeaderArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxVoxelTreeHeaderArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxDecalVolumeTransientDataStream
==============
*/

void __fastcall Postload_GfxDecalVolumeTransientDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxDecalVolumeTransientDataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_GfxStaticModelLightGridVolume
==============
*/

GfxStaticModelLightGridVolume *__fastcall AllocPreload_GfxStaticModelLightGridVolume()
{
  return ?AllocPreload_GfxStaticModelLightGridVolume@@YAPEAUGfxStaticModelLightGridVolume@@XZ();
}

/*
==============
Postload_GfxWorldLightmapReindexDataStream
==============
*/

void __fastcall Postload_GfxWorldLightmapReindexDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxWorldLightmapReindexDataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_GfxDynamicLightsetProbeData
==============
*/

GfxDynamicLightsetProbeData *__fastcall AllocPostload_GfxDynamicLightsetProbeData()
{
  return ?AllocPostload_GfxDynamicLightsetProbeData@@YAPEAUGfxDynamicLightsetProbeData@@XZ();
}

/*
==============
Postload_GfxGpuLightGridVoxelTreeStream
==============
*/

void __fastcall Postload_GfxGpuLightGridVoxelTreeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxGpuLightGridVoxelTreeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_GfxLightAABB
==============
*/

void Load_ProcessStructLayout_GfxLightAABB(void)
{
  ?Load_ProcessStructLayout_GfxLightAABB@@YAXXZ();
}

/*
==============
AllocPostload_UmbraGate
==============
*/

UmbraGate *__fastcall AllocPostload_UmbraGate()
{
  return ?AllocPostload_UmbraGate@@YAPEAUUmbraGate@@XZ();
}

/*
==============
Mark_GfxWorldDpvsStaticArray
==============
*/

int __fastcall Mark_GfxWorldDpvsStaticArray(const unsigned __int64 count)
{
  return ?Mark_GfxWorldDpvsStaticArray@@YAH_K@Z(count);
}

/*
==============
Postload_GfxWorldLightmapReindexData
==============
*/

void __fastcall Postload_GfxWorldLightmapReindexData(const DBStreamStart streamStart)
{
  ?Postload_GfxWorldLightmapReindexData@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic317
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic317(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic317@@YAXXZ();
}

/*
==============
Mark_GfxStaticModelLightGridVolume
==============
*/

int __fastcall Mark_GfxStaticModelLightGridVolume()
{
  return ?Mark_GfxStaticModelLightGridVolume@@YAHXZ();
}

/*
==============
Mark_GfxPrecomputedSkyIlluminationArray
==============
*/

int __fastcall Mark_GfxPrecomputedSkyIlluminationArray(const unsigned __int64 count)
{
  return ?Mark_GfxPrecomputedSkyIlluminationArray@@YAH_K@Z(count);
}

/*
==============
AllocLoad_GfxPrecomputedSkyIllumination
==============
*/

GfxPrecomputedSkyIllumination *__fastcall AllocLoad_GfxPrecomputedSkyIllumination()
{
  return ?AllocLoad_GfxPrecomputedSkyIllumination@@YAPEAUGfxPrecomputedSkyIllumination@@XZ();
}

/*
==============
AllocPreload_GfxGpuLightGridVoxelTree
==============
*/

GfxGpuLightGridVoxelTree *__fastcall AllocPreload_GfxGpuLightGridVoxelTree()
{
  return ?AllocPreload_GfxGpuLightGridVoxelTree@@YAPEAUGfxGpuLightGridVoxelTree@@XZ();
}

/*
==============
Load_ProcessStructLayout_GfxDynamicLightsetProbeData
==============
*/

void Load_ProcessStructLayout_GfxDynamicLightsetProbeData(void)
{
  ?Load_ProcessStructLayout_GfxDynamicLightsetProbeData@@YAXXZ();
}

/*
==============
AllocLoad_GfxDynamicLightsetGChunk
==============
*/

GfxDynamicLightsetGChunk *__fastcall AllocLoad_GfxDynamicLightsetGChunk()
{
  return ?AllocLoad_GfxDynamicLightsetGChunk@@YAPEAUGfxDynamicLightsetGChunk@@XZ();
}

/*
==============
Postload_GfxLightGridVolumeAtlasDataTempPtr
==============
*/

void __fastcall Postload_GfxLightGridVolumeAtlasDataTempPtr(const DBStreamStart streamStart)
{
  ?Postload_GfxLightGridVolumeAtlasDataTempPtr@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_GfxWorldDpvsDynamic
==============
*/

int __fastcall Mark_GfxWorldDpvsDynamic()
{
  return ?Mark_GfxWorldDpvsDynamic@@YAHXZ();
}

/*
==============
Preload_GfxWorldLightmapReindexDataStream
==============
*/

void __fastcall Preload_GfxWorldLightmapReindexDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxWorldLightmapReindexDataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxDecalVolumeCollection
==============
*/

int __fastcall Mark_GfxDecalVolumeCollection()
{
  return ?Mark_GfxDecalVolumeCollection@@YAHXZ();
}

/*
==============
AllocPostload_GfxWorldTransientZonePtr
==============
*/

GfxWorldTransientZone **__fastcall AllocPostload_GfxWorldTransientZonePtr()
{
  return ?AllocPostload_GfxWorldTransientZonePtr@@YAPEAPEAUGfxWorldTransientZone@@XZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic655
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic655(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic655@@YAXXZ();
}

/*
==============
Load_GfxGpuLightGridTetrahedronVisibility
==============
*/

void __fastcall Load_GfxGpuLightGridTetrahedronVisibility(const DBStreamStart streamStart)
{
  ?Load_GfxGpuLightGridTetrahedronVisibility@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxFrustumLightsArray
==============
*/

void __fastcall Load_GfxFrustumLightsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxFrustumLightsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxLightGridVolumeAtlasDataTempPtrArray
==============
*/

void __fastcall Preload_GfxLightGridVolumeAtlasDataTempPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxLightGridVolumeAtlasDataTempPtrArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxDynamicLightsetLMDataArray
==============
*/

void __fastcall Postload_GfxDynamicLightsetLMDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxDynamicLightsetLMDataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_GfxWorldTransientZonePtr
==============
*/

GfxWorldTransientZone **__fastcall AllocPreload_GfxWorldTransientZonePtr()
{
  return ?AllocPreload_GfxWorldTransientZonePtr@@YAPEAPEAUGfxWorldTransientZone@@XZ();
}

/*
==============
Load_GfxDynamicLightsetPortalGIDataArray
==============
*/

void __fastcall Load_GfxDynamicLightsetPortalGIDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxDynamicLightsetPortalGIDataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxCompressedSunShadowDataTemp
==============
*/

void __fastcall Postload_GfxCompressedSunShadowDataTemp(const DBStreamStart streamStart)
{
  ?Postload_GfxCompressedSunShadowDataTemp@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxVoxelTreeArray
==============
*/

void __fastcall Load_GfxVoxelTreeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxVoxelTreeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_UmbraGate
==============
*/

int __fastcall Mark_UmbraGate()
{
  return ?Mark_UmbraGate@@YAHXZ();
}

/*
==============
Load_GfxDynamicLightsetGChunk
==============
*/

void __fastcall Load_GfxDynamicLightsetGChunk(const DBStreamStart streamStart)
{
  ?Load_GfxDynamicLightsetGChunk@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_GfxSHCompressedProbeData
==============
*/

void __fastcall Preload_GfxSHCompressedProbeData(const DBStreamStart streamStart)
{
  ?Preload_GfxSHCompressedProbeData@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxSHCompressedProbeDataArray
==============
*/

void __fastcall Load_GfxSHCompressedProbeDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxSHCompressedProbeDataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_GfxDynamicLightsetGChunkFlags
==============
*/

GfxDynamicLightsetGChunkFlags *__fastcall AllocPreload_GfxDynamicLightsetGChunkFlags()
{
  return ?AllocPreload_GfxDynamicLightsetGChunkFlags@@YAPEAW4GfxDynamicLightsetGChunkFlags@@XZ();
}

/*
==============
AllocPreload_GfxLightGridVolumeAtlasDataTemp
==============
*/

GfxLightGridVolumeAtlasDataTemp *__fastcall AllocPreload_GfxLightGridVolumeAtlasDataTemp()
{
  return ?AllocPreload_GfxLightGridVolumeAtlasDataTemp@@YAPEAUGfxLightGridVolumeAtlasDataTemp@@XZ();
}

/*
==============
AllocPreload_GfxVoxelTopDownViewNode
==============
*/

GfxVoxelTopDownViewNode *__fastcall AllocPreload_GfxVoxelTopDownViewNode()
{
  return ?AllocPreload_GfxVoxelTopDownViewNode@@YAPEAUGfxVoxelTopDownViewNode@@XZ();
}

/*
==============
Preload_GfxDynamicLightsetBFType
==============
*/

void __fastcall Preload_GfxDynamicLightsetBFType(const DBStreamStart streamStart)
{
  ?Preload_GfxDynamicLightsetBFType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic759
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic759(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic759@@YAXXZ();
}

/*
==============
Postload_GfxLightmapTypeArray
==============
*/

void __fastcall Postload_GfxLightmapTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxLightmapTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxWorldLightmapReindexDataElementArray
==============
*/

void __fastcall Postload_GfxWorldLightmapReindexDataElementArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxWorldLightmapReindexDataElementArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxCompressedSunShadowParamsArray
==============
*/

void __fastcall Load_GfxCompressedSunShadowParamsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxCompressedSunShadowParamsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxPrecomputedSkyIlluminationStream
==============
*/

void __fastcall Load_GfxPrecomputedSkyIlluminationStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxPrecomputedSkyIlluminationStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxStaticDecalVolumeMask
==============
*/

void __fastcall Preload_GfxStaticDecalVolumeMask(const DBStreamStart streamStart)
{
  ?Preload_GfxStaticDecalVolumeMask@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_GfxCellTransientInfo
==============
*/

GfxCellTransientInfo *__fastcall AllocPostload_GfxCellTransientInfo()
{
  return ?AllocPostload_GfxCellTransientInfo@@YAPEAUGfxCellTransientInfo@@XZ();
}

/*
==============
Load_GfxStaticDecalVolumeMaterialArray
==============
*/

void __fastcall Load_GfxStaticDecalVolumeMaterialArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxStaticDecalVolumeMaterialArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_StaticModelIndexStream
==============
*/

void __fastcall Postload_StaticModelIndexStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_StaticModelIndexStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_GfxDynamicLightsetLMData
==============
*/

GfxDynamicLightsetLMData *__fastcall AllocLoad_GfxDynamicLightsetLMData()
{
  return ?AllocLoad_GfxDynamicLightsetLMData@@YAPEAUGfxDynamicLightsetLMData@@XZ();
}

/*
==============
Load_GfxCellTransientInfoStream
==============
*/

void __fastcall Load_GfxCellTransientInfoStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxCellTransientInfoStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxLightmapAtlasDataTemp
==============
*/

int __fastcall Mark_GfxLightmapAtlasDataTemp()
{
  return ?Mark_GfxLightmapAtlasDataTemp@@YAHXZ();
}

/*
==============
Load_GfxCell
==============
*/

void __fastcall Load_GfxCell(const DBStreamStart streamStart)
{
  ?Load_GfxCell@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic261
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic261(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic261@@YAXXZ();
}

/*
==============
Preload_umbraTomePtr_tStream
==============
*/

void __fastcall Preload_umbraTomePtr_tStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_umbraTomePtr_tStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_GfxLightmapAtlasDataTemp
==============
*/

GfxLightmapAtlasDataTemp *__fastcall AllocLoad_GfxLightmapAtlasDataTemp()
{
  return ?AllocLoad_GfxLightmapAtlasDataTemp@@YAPEAUGfxLightmapAtlasDataTemp@@XZ();
}

/*
==============
Load_GfxCompressedSunShadowDataTempPtrStream
==============
*/

void __fastcall Load_GfxCompressedSunShadowDataTempPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxCompressedSunShadowDataTempPtrStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxDynamicLightsetGChunkStream
==============
*/

void __fastcall Preload_GfxDynamicLightsetGChunkStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxDynamicLightsetGChunkStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxWorldPtr
==============
*/

int __fastcall Mark_GfxWorldPtr()
{
  return ?Mark_GfxWorldPtr@@YAHXZ();
}

/*
==============
Postload_GfxLightAABBNode
==============
*/

void __fastcall Postload_GfxLightAABBNode(const DBStreamStart streamStart)
{
  ?Postload_GfxLightAABBNode@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_GfxWorldDpvsStaticStream
==============
*/

void __fastcall Preload_GfxWorldDpvsStaticStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxWorldDpvsStaticStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxDynamicLightsetGChunkInfo
==============
*/

int __fastcall Mark_GfxDynamicLightsetGChunkInfo()
{
  return ?Mark_GfxDynamicLightsetGChunkInfo@@YAHXZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic858
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic858(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic858@@YAXXZ();
}

/*
==============
Load_GfxCompressedSunShadowDataTempPtr
==============
*/

void __fastcall Load_GfxCompressedSunShadowDataTempPtr(const DBStreamStart streamStart)
{
  ?Load_GfxCompressedSunShadowDataTempPtr@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_GfxPortalArray
==============
*/

int __fastcall Mark_GfxPortalArray(const unsigned __int64 count)
{
  return ?Mark_GfxPortalArray@@YAH_K@Z(count);
}

/*
==============
Load_GfxGpuLightGridStream
==============
*/

void __fastcall Load_GfxGpuLightGridStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxGpuLightGridStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxStaticDecalVolumeMaterialArray
==============
*/

int __fastcall Mark_GfxStaticDecalVolumeMaterialArray(const unsigned __int64 count)
{
  return ?Mark_GfxStaticDecalVolumeMaterialArray@@YAH_K@Z(count);
}

/*
==============
Load_GfxLightViewFrustum
==============
*/

void __fastcall Load_GfxLightViewFrustum(const DBStreamStart streamStart)
{
  ?Load_GfxLightViewFrustum@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_GfxSHCompressedProbeDataArray
==============
*/

void __fastcall Preload_GfxSHCompressedProbeDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxSHCompressedProbeDataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxModelLightmapInst
==============
*/

void __fastcall Load_GfxModelLightmapInst(const DBStreamStart streamStart)
{
  ?Load_GfxModelLightmapInst@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_GfxGpuLightGridZone
==============
*/

GfxGpuLightGridZone *__fastcall AllocPostload_GfxGpuLightGridZone()
{
  return ?AllocPostload_GfxGpuLightGridZone@@YAPEAUGfxGpuLightGridZone@@XZ();
}

/*
==============
Postload_GfxGpuLightGridTransientDataArray
==============
*/

void __fastcall Postload_GfxGpuLightGridTransientDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxGpuLightGridTransientDataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxDecalVolumeTransientData
==============
*/

void __fastcall Load_GfxDecalVolumeTransientData(const DBStreamStart streamStart)
{
  ?Load_GfxDecalVolumeTransientData@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_GfxVoxelInternalNode
==============
*/

int __fastcall Mark_GfxVoxelInternalNode()
{
  return ?Mark_GfxVoxelInternalNode@@YAHXZ();
}

/*
==============
Mark_GfxLightmapType
==============
*/

int __fastcall Mark_GfxLightmapType()
{
  return ?Mark_GfxLightmapType@@YAHXZ();
}

/*
==============
Preload_GfxGpuLightGridZoneStream
==============
*/

void __fastcall Preload_GfxGpuLightGridZoneStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxGpuLightGridZoneStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_BspVersionArray
==============
*/

void __fastcall Postload_BspVersionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_BspVersionArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxWorldLightmapImagePtrArray
==============
*/

void __fastcall Load_GfxWorldLightmapImagePtrArray(const DBStreamStart streamStart)
{
  ?Load_GfxWorldLightmapImagePtrArray@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_LightGridVolumePackingParamsStream
==============
*/

void __fastcall Postload_LightGridVolumePackingParamsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_LightGridVolumePackingParamsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxCompressedSunShadowDataTempPtrStream
==============
*/

void __fastcall Preload_GfxCompressedSunShadowDataTempPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxCompressedSunShadowDataTempPtrStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxLightmapType
==============
*/

void __fastcall Load_GfxLightmapType(const DBStreamStart streamStart)
{
  ?Load_GfxLightmapType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_GfxDynamicLightsetLMData
==============
*/

void __fastcall Preload_GfxDynamicLightsetLMData(const DBStreamStart streamStart)
{
  ?Preload_GfxDynamicLightsetLMData@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxLightGridTypeArray
==============
*/

void __fastcall Load_GfxLightGridTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxLightGridTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_LightGridVolumePackingParamsArray
==============
*/

void __fastcall Load_LightGridVolumePackingParamsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_LightGridVolumePackingParamsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_GfxWorldLightmapImagePtrArray
==============
*/

GfxWorldLightmapImagePtrArray *__fastcall AllocLoad_GfxWorldLightmapImagePtrArray()
{
  return ?AllocLoad_GfxWorldLightmapImagePtrArray@@YAPEAUGfxWorldLightmapImagePtrArray@@XZ();
}

/*
==============
Load_GfxDynamicLightsetProductGIDataStream
==============
*/

void __fastcall Load_GfxDynamicLightsetProductGIDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxDynamicLightsetProductGIDataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxFrustumLightsStream
==============
*/

void __fastcall Load_GfxFrustumLightsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxFrustumLightsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxDynamicLightsetBFType
==============
*/

void __fastcall Load_GfxDynamicLightsetBFType(const DBStreamStart streamStart)
{
  ?Load_GfxDynamicLightsetBFType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_GfxAabbTree
==============
*/

void Load_ProcessStructLayout_GfxAabbTree(void)
{
  ?Load_ProcessStructLayout_GfxAabbTree@@YAXXZ();
}

/*
==============
Mark_StaticModelIndex
==============
*/

int __fastcall Mark_StaticModelIndex()
{
  return ?Mark_StaticModelIndex@@YAHXZ();
}

/*
==============
Preload_GfxPrecomputedSkyIlluminationStream
==============
*/

void __fastcall Preload_GfxPrecomputedSkyIlluminationStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxPrecomputedSkyIlluminationStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_GfxGpuLightGrid
==============
*/

GfxGpuLightGrid *__fastcall AllocPostload_GfxGpuLightGrid()
{
  return ?AllocPostload_GfxGpuLightGrid@@YAPEAUGfxGpuLightGrid@@XZ();
}

/*
==============
AllocPreload_GfxDynamicLightsetLGppZoneInfo
==============
*/

GfxDynamicLightsetLGppZoneInfo *__fastcall AllocPreload_GfxDynamicLightsetLGppZoneInfo()
{
  return ?AllocPreload_GfxDynamicLightsetLGppZoneInfo@@YAPEAUGfxDynamicLightsetLGppZoneInfo@@XZ();
}

/*
==============
Postload_GfxMapEntLookupStream
==============
*/

void __fastcall Postload_GfxMapEntLookupStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxMapEntLookupStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxSHProbeDataStream
==============
*/

void __fastcall Load_GfxSHProbeDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxSHProbeDataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_GfxGpuLightGridVoxelStartTetrahedron
==============
*/

void Load_ProcessStructLayout_GfxGpuLightGridVoxelStartTetrahedron(void)
{
  ?Load_ProcessStructLayout_GfxGpuLightGridVoxelStartTetrahedron@@YAXXZ();
}

/*
==============
Preload_GfxDecalVolumeCollection
==============
*/

void __fastcall Preload_GfxDecalVolumeCollection(const DBStreamStart streamStart)
{
  ?Preload_GfxDecalVolumeCollection@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic1028
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic1028(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic1028@@YAXXZ();
}

/*
==============
Postload_BspVersion
==============
*/

void __fastcall Postload_BspVersion(const DBStreamStart streamStart)
{
  ?Postload_BspVersion@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxWorldTransientZonePtrStream
==============
*/

void __fastcall Postload_GfxWorldTransientZonePtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxWorldTransientZonePtrStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_GfxWorldPtr
==============
*/

GfxWorld **__fastcall AllocPreload_GfxWorldPtr()
{
  return ?AllocPreload_GfxWorldPtr@@YAPEAPEAUGfxWorld@@XZ();
}

/*
==============
AllocLoad_GfxStaticDecalVolumeUid
==============
*/

GfxStaticDecalVolumeUid *__fastcall AllocLoad_GfxStaticDecalVolumeUid()
{
  return ?AllocLoad_GfxStaticDecalVolumeUid@@YAPEAUGfxStaticDecalVolumeUid@@XZ();
}

/*
==============
AllocLoad_GfxFrustumLights
==============
*/

GfxFrustumLights *__fastcall AllocLoad_GfxFrustumLights()
{
  return ?AllocLoad_GfxFrustumLights@@YAPEAUGfxFrustumLights@@XZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic809
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic809(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic809@@YAXXZ();
}

/*
==============
Postload_GfxWorldDrawCells
==============
*/

void __fastcall Postload_GfxWorldDrawCells(const DBStreamStart streamStart)
{
  ?Postload_GfxWorldDrawCells@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_GfxWorldTransientZone
==============
*/

GfxWorldTransientZone *__fastcall AllocPostload_GfxWorldTransientZone()
{
  return ?AllocPostload_GfxWorldTransientZone@@YAPEAUGfxWorldTransientZone@@XZ();
}

/*
==============
Mark_GfxWorldLightmapReindexData
==============
*/

int __fastcall Mark_GfxWorldLightmapReindexData()
{
  return ?Mark_GfxWorldLightmapReindexData@@YAHXZ();
}

/*
==============
Load_GfxDynamicLightsetGChunkInfoStream
==============
*/

void __fastcall Load_GfxDynamicLightsetGChunkInfoStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxDynamicLightsetGChunkInfoStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxLightmapAtlasDataTempPtr
==============
*/

void __fastcall Preload_GfxLightmapAtlasDataTempPtr(const DBStreamStart streamStart)
{
  ?Preload_GfxLightmapAtlasDataTempPtr@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxDynamicLightsetArray
==============
*/

void __fastcall Postload_GfxDynamicLightsetArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxDynamicLightsetArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxPortalStream
==============
*/

void __fastcall Postload_GfxPortalStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxPortalStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic585
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic585(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic585@@YAXXZ();
}

/*
==============
Load_LightGridVolumePackingParamsStream
==============
*/

void __fastcall Load_LightGridVolumePackingParamsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_LightGridVolumePackingParamsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic620
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic620(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic620@@YAXXZ();
}

/*
==============
Load_ProcessStructLayout_GfxWorldDpvsPlane
==============
*/

void Load_ProcessStructLayout_GfxWorldDpvsPlane(void)
{
  ?Load_ProcessStructLayout_GfxWorldDpvsPlane@@YAXXZ();
}

/*
==============
AllocPostload_GfxVoxelTreeHeader
==============
*/

GfxVoxelTreeHeader *__fastcall AllocPostload_GfxVoxelTreeHeader()
{
  return ?AllocPostload_GfxVoxelTreeHeader@@YAPEAUGfxVoxelTreeHeader@@XZ();
}

/*
==============
Preload_mnode_tArray
==============
*/

void __fastcall Preload_mnode_tArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_mnode_tArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_GfxLightViewFrustum
==============
*/

GfxLightViewFrustum *__fastcall AllocPreload_GfxLightViewFrustum()
{
  return ?AllocPreload_GfxLightViewFrustum@@YAPEAUGfxLightViewFrustum@@XZ();
}

/*
==============
Preload_GfxPortalArray
==============
*/

void __fastcall Preload_GfxPortalArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxPortalArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxGpuLightGridTetrahedronVisibilityStream
==============
*/

void __fastcall Postload_GfxGpuLightGridTetrahedronVisibilityStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxGpuLightGridTetrahedronVisibilityStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxPortalStream
==============
*/

void __fastcall Preload_GfxPortalStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxPortalStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxDynamicLightsetBFData
==============
*/

void __fastcall Postload_GfxDynamicLightsetBFData(const DBStreamStart streamStart)
{
  ?Postload_GfxDynamicLightsetBFData@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxLightAABBNodeStream
==============
*/

void __fastcall Postload_GfxLightAABBNodeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxLightAABBNodeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxGpuDynLightsetsLGVReferenceArray
==============
*/

void __fastcall Postload_GfxGpuDynLightsetsLGVReferenceArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxGpuDynLightsetsLGVReferenceArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxSceneDynBrush
==============
*/

void __fastcall Load_GfxSceneDynBrush(const DBStreamStart streamStart)
{
  ?Load_GfxSceneDynBrush@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_GfxWorldPackedLightmap
==============
*/

int __fastcall Mark_GfxWorldPackedLightmap()
{
  return ?Mark_GfxWorldPackedLightmap@@YAHXZ();
}

/*
==============
AllocLoad_GfxWorldTransientZonePtr
==============
*/

GfxWorldTransientZone **__fastcall AllocLoad_GfxWorldTransientZonePtr()
{
  return ?AllocLoad_GfxWorldTransientZonePtr@@YAPEAPEAUGfxWorldTransientZone@@XZ();
}

/*
==============
Mark_GfxCompressedSunShadowParams
==============
*/

int __fastcall Mark_GfxCompressedSunShadowParams()
{
  return ?Mark_GfxCompressedSunShadowParams@@YAHXZ();
}

/*
==============
AllocPostload_umbraTomePtr_t
==============
*/

Umbra::Tome **__fastcall AllocPostload_umbraTomePtr_t()
{
  return ?AllocPostload_umbraTomePtr_t@@YAPEAPEAVTome@Umbra@@XZ();
}

/*
==============
Preload_GfxDynamicLightsetLightInfoArray
==============
*/

void __fastcall Preload_GfxDynamicLightsetLightInfoArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxDynamicLightsetLightInfoArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic662
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic662(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic662@@YAXXZ();
}

/*
==============
Preload_GfxVoxelTreeArray
==============
*/

void __fastcall Preload_GfxVoxelTreeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxVoxelTreeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxStaticDecalVolumeMaskArray
==============
*/

void __fastcall Preload_GfxStaticDecalVolumeMaskArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxStaticDecalVolumeMaskArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxDisplacementParms
==============
*/

void __fastcall Load_GfxDisplacementParms(const DBStreamStart streamStart)
{
  ?Load_GfxDisplacementParms@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_GfxGpuLightGridTetrahedronVisibility
==============
*/

void Load_ProcessStructLayout_GfxGpuLightGridTetrahedronVisibility(void)
{
  ?Load_ProcessStructLayout_GfxGpuLightGridTetrahedronVisibility@@YAXXZ();
}

/*
==============
Postload_GfxPortal
==============
*/

void __fastcall Postload_GfxPortal(const DBStreamStart streamStart)
{
  ?Postload_GfxPortal@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_GfxHeightfieldArray
==============
*/

int __fastcall Mark_GfxHeightfieldArray(const unsigned __int64 count)
{
  return ?Mark_GfxHeightfieldArray@@YAH_K@Z(count);
}

/*
==============
AllocPreload_GfxCompressedSunShadowDataTempPtr
==============
*/

GfxCompressedSunShadowDataTemp **__fastcall AllocPreload_GfxCompressedSunShadowDataTempPtr()
{
  return ?AllocPreload_GfxCompressedSunShadowDataTempPtr@@YAPEAPEAUGfxCompressedSunShadowDataTemp@@XZ();
}

/*
==============
Postload_GfxSHProbeData
==============
*/

void __fastcall Postload_GfxSHProbeData(const DBStreamStart streamStart)
{
  ?Postload_GfxSHProbeData@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_StaticModelIndexArray
==============
*/

void __fastcall Postload_StaticModelIndexArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_StaticModelIndexArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_GfxStaticModelLightGridVolume
==============
*/

GfxStaticModelLightGridVolume *__fastcall AllocPostload_GfxStaticModelLightGridVolume()
{
  return ?AllocPostload_GfxStaticModelLightGridVolume@@YAPEAUGfxStaticModelLightGridVolume@@XZ();
}

/*
==============
AllocPreload_GfxDecalVolumeTransientData
==============
*/

GfxDecalVolumeTransientData *__fastcall AllocPreload_GfxDecalVolumeTransientData()
{
  return ?AllocPreload_GfxDecalVolumeTransientData@@YAPEAUGfxDecalVolumeTransientData@@XZ();
}

/*
==============
Postload_GfxCompressedSunShadowDataTempArray
==============
*/

void __fastcall Postload_GfxCompressedSunShadowDataTempArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxCompressedSunShadowDataTempArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_GfxLightmapType
==============
*/

void Load_ProcessStructLayout_GfxLightmapType(void)
{
  ?Load_ProcessStructLayout_GfxLightmapType@@YAXXZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic417
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic417(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic417@@YAXXZ();
}

/*
==============
Postload_GfxWorldPtrStream
==============
*/

void __fastcall Postload_GfxWorldPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxWorldPtrStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_GfxStaticDecalVolumeMaterial
==============
*/

GfxStaticDecalVolumeMaterial *__fastcall AllocLoad_GfxStaticDecalVolumeMaterial()
{
  return ?AllocLoad_GfxStaticDecalVolumeMaterial@@YAPEAUGfxStaticDecalVolumeMaterial@@XZ();
}

/*
==============
Load_GfxCellTreeStream
==============
*/

void __fastcall Load_GfxCellTreeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxCellTreeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxMapEntLookup
==============
*/

void __fastcall Postload_GfxMapEntLookup(const DBStreamStart streamStart)
{
  ?Postload_GfxMapEntLookup@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_GfxCompressedSunShadowDataTempPtr
==============
*/

void __fastcall Preload_GfxCompressedSunShadowDataTempPtr(const DBStreamStart streamStart)
{
  ?Preload_GfxCompressedSunShadowDataTempPtr@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxLightmapRaw
==============
*/

void __fastcall Postload_GfxLightmapRaw(const DBStreamStart streamStart)
{
  ?Postload_GfxLightmapRaw@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_GfxDynamicLightsetBFData
==============
*/

GfxDynamicLightsetBFData *__fastcall AllocPreload_GfxDynamicLightsetBFData()
{
  return ?AllocPreload_GfxDynamicLightsetBFData@@YAPEAUGfxDynamicLightsetBFData@@XZ();
}

/*
==============
Postload_GfxDynamicLightsetProductGIDataStream
==============
*/

void __fastcall Postload_GfxDynamicLightsetProductGIDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxDynamicLightsetProductGIDataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxWorldArray
==============
*/

void __fastcall Preload_GfxWorldArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxWorldArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxLightmapRawArray
==============
*/

void __fastcall Preload_GfxLightmapRawArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxLightmapRawArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxLightmapAtlasDataTempPtrArray
==============
*/

int __fastcall Mark_GfxLightmapAtlasDataTempPtrArray(const unsigned __int64 count)
{
  return ?Mark_GfxLightmapAtlasDataTempPtrArray@@YAH_K@Z(count);
}

/*
==============
Preload_GfxStaticModelLightGridVolumeFlagsStream
==============
*/

void __fastcall Preload_GfxStaticModelLightGridVolumeFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxStaticModelLightGridVolumeFlagsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_GfxDisplacementParms
==============
*/

void Load_ProcessStructLayout_GfxDisplacementParms(void)
{
  ?Load_ProcessStructLayout_GfxDisplacementParms@@YAXXZ();
}

/*
==============
Mark_GfxDynamicLightsetLGppZoneInfoArray
==============
*/

int __fastcall Mark_GfxDynamicLightsetLGppZoneInfoArray(const unsigned __int64 count)
{
  return ?Mark_GfxDynamicLightsetLGppZoneInfoArray@@YAH_K@Z(count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic922
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic922(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic922@@YAXXZ();
}

/*
==============
AllocLoad_GfxWorldDraw
==============
*/

GfxWorldDraw *__fastcall AllocLoad_GfxWorldDraw()
{
  return ?AllocLoad_GfxWorldDraw@@YAPEAUGfxWorldDraw@@XZ();
}

/*
==============
AllocLoad_GfxHeightfield
==============
*/

GfxHeightfield *__fastcall AllocLoad_GfxHeightfield()
{
  return ?AllocLoad_GfxHeightfield@@YAPEAUGfxHeightfield@@XZ();
}

/*
==============
Preload_GfxLightGridVolumeAtlasDataTempStream
==============
*/

void __fastcall Preload_GfxLightGridVolumeAtlasDataTempStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxLightGridVolumeAtlasDataTempStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_umbraTomePtr_tArray
==============
*/

void __fastcall Postload_umbraTomePtr_tArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_umbraTomePtr_tArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_GfxWorldDpvsPlanes
==============
*/

GfxWorldDpvsPlanes *__fastcall AllocPostload_GfxWorldDpvsPlanes()
{
  return ?AllocPostload_GfxWorldDpvsPlanes@@YAPEAUGfxWorldDpvsPlanes@@XZ();
}

/*
==============
Preload_GfxCellTransientInfoStream
==============
*/

void __fastcall Preload_GfxCellTransientInfoStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxCellTransientInfoStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic403
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic403(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic403@@YAXXZ();
}

/*
==============
AllocPostload_GfxVoxelTree
==============
*/

GfxVoxelTree *__fastcall AllocPostload_GfxVoxelTree()
{
  return ?AllocPostload_GfxVoxelTree@@YAPEAUGfxVoxelTree@@XZ();
}

/*
==============
Preload_GfxLightmapAtlasDataTempStream
==============
*/

void __fastcall Preload_GfxLightmapAtlasDataTempStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxLightmapAtlasDataTempStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic459
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic459(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic459@@YAXXZ();
}

/*
==============
Load_GfxWorldTransientZonePtrStream
==============
*/

void __fastcall Load_GfxWorldTransientZonePtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxWorldTransientZonePtrStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxWorldArray
==============
*/

void __fastcall Load_GfxWorldArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxWorldArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxGpuLightGridZoneArray
==============
*/

int __fastcall Mark_GfxGpuLightGridZoneArray(const unsigned __int64 count)
{
  return ?Mark_GfxGpuLightGridZoneArray@@YAH_K@Z(count);
}

/*
==============
AllocLoad_GfxCellTree
==============
*/

GfxCellTree *__fastcall AllocLoad_GfxCellTree()
{
  return ?AllocLoad_GfxCellTree@@YAPEAUGfxCellTree@@XZ();
}

/*
==============
Postload_GfxStaticDecalVolumeUid
==============
*/

void __fastcall Postload_GfxStaticDecalVolumeUid(const DBStreamStart streamStart)
{
  ?Postload_GfxStaticDecalVolumeUid@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxSHProbeData
==============
*/

void __fastcall Load_GfxSHProbeData(const DBStreamStart streamStart)
{
  ?Load_GfxSHProbeData@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxAabbTreeStream
==============
*/

void __fastcall Postload_GfxAabbTreeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxAabbTreeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_GfxShadowGeometry
==============
*/

GfxShadowGeometry *__fastcall AllocPostload_GfxShadowGeometry()
{
  return ?AllocPostload_GfxShadowGeometry@@YAPEAUGfxShadowGeometry@@XZ();
}

/*
==============
Mark_GfxLightGridType
==============
*/

int __fastcall Mark_GfxLightGridType()
{
  return ?Mark_GfxLightGridType@@YAHXZ();
}

/*
==============
Load_GfxGpuLightGridVoxelTreeArray
==============
*/

void __fastcall Load_GfxGpuLightGridVoxelTreeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxGpuLightGridVoxelTreeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxGpuLightGridTransientDataStream
==============
*/

void __fastcall Preload_GfxGpuLightGridTransientDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxGpuLightGridTransientDataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_GfxDynamicLightsetProbeData
==============
*/

GfxDynamicLightsetProbeData *__fastcall AllocLoad_GfxDynamicLightsetProbeData()
{
  return ?AllocLoad_GfxDynamicLightsetProbeData@@YAPEAUGfxDynamicLightsetProbeData@@XZ();
}

/*
==============
Preload_StaticModelIndex
==============
*/

void __fastcall Preload_StaticModelIndex(const DBStreamStart streamStart)
{
  ?Preload_StaticModelIndex@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_GfxWorldPtr
==============
*/

GfxWorld **__fastcall AllocPostload_GfxWorldPtr()
{
  return ?AllocPostload_GfxWorldPtr@@YAPEAPEAUGfxWorld@@XZ();
}

/*
==============
AllocLoad_GfxStaticModelLightGridVolumeFlags
==============
*/

GfxStaticModelLightGridVolumeFlags *__fastcall AllocLoad_GfxStaticModelLightGridVolumeFlags()
{
  return ?AllocLoad_GfxStaticModelLightGridVolumeFlags@@YAPEAW4GfxStaticModelLightGridVolumeFlags@@XZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic466
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic466(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic466@@YAXXZ();
}

/*
==============
Postload_GfxSceneDynModelStream
==============
*/

void __fastcall Postload_GfxSceneDynModelStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxSceneDynModelStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic345
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic345(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic345@@YAXXZ();
}

/*
==============
Load_GfxWorldDrawCellsStream
==============
*/

void __fastcall Load_GfxWorldDrawCellsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxWorldDrawCellsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_GfxCellTransientInfo
==============
*/

void Load_ProcessStructLayout_GfxCellTransientInfo(void)
{
  ?Load_ProcessStructLayout_GfxCellTransientInfo@@YAXXZ();
}

/*
==============
Postload_GfxGpuLightGridZoneStream
==============
*/

void __fastcall Postload_GfxGpuLightGridZoneStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxGpuLightGridZoneStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxStaticDecalVolumeMaterial
==============
*/

void __fastcall Preload_GfxStaticDecalVolumeMaterial(const DBStreamStart streamStart)
{
  ?Preload_GfxStaticDecalVolumeMaterial@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_GfxWorldDpvsStatic
==============
*/

GfxWorldDpvsStatic *__fastcall AllocPostload_GfxWorldDpvsStatic()
{
  return ?AllocPostload_GfxWorldDpvsStatic@@YAPEAUGfxWorldDpvsStatic@@XZ();
}

/*
==============
Mark_GfxFrustumLightsArray
==============
*/

int __fastcall Mark_GfxFrustumLightsArray(const unsigned __int64 count)
{
  return ?Mark_GfxFrustumLightsArray@@YAH_K@Z(count);
}

/*
==============
Preload_GfxDynamicLightset
==============
*/

void __fastcall Preload_GfxDynamicLightset(const DBStreamStart streamStart)
{
  ?Preload_GfxDynamicLightset@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_GfxCell
==============
*/

void Load_ProcessStructLayout_GfxCell(void)
{
  ?Load_ProcessStructLayout_GfxCell@@YAXXZ();
}

/*
==============
Preload_GfxWorldPackedLightmapStream
==============
*/

void __fastcall Preload_GfxWorldPackedLightmapStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxWorldPackedLightmapStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxWorldDpvsPlaneArray
==============
*/

void __fastcall Postload_GfxWorldDpvsPlaneArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxWorldDpvsPlaneArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxVoxelTreeArray
==============
*/

int __fastcall Mark_GfxVoxelTreeArray(const unsigned __int64 count)
{
  return ?Mark_GfxVoxelTreeArray@@YAH_K@Z(count);
}

/*
==============
Load_GfxWorldDpvsDynamicArray
==============
*/

void __fastcall Load_GfxWorldDpvsDynamicArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxWorldDpvsDynamicArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxGpuLightGridTetrahedronStream
==============
*/

void __fastcall Load_GfxGpuLightGridTetrahedronStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxGpuLightGridTetrahedronStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_DpvsPlane
==============
*/

int __fastcall Mark_DpvsPlane()
{
  return ?Mark_DpvsPlane@@YAHXZ();
}

/*
==============
Load_GfxDynamicLightsetLGppZoneInfoStream
==============
*/

void __fastcall Load_GfxDynamicLightsetLGppZoneInfoStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxDynamicLightsetLGppZoneInfoStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxStaticDecalVolumeMaterial
==============
*/

int __fastcall Mark_GfxStaticDecalVolumeMaterial()
{
  return ?Mark_GfxStaticDecalVolumeMaterial@@YAHXZ();
}

/*
==============
Load_GfxMapEntLookupArray
==============
*/

void __fastcall Load_GfxMapEntLookupArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxMapEntLookupArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxVoxelTreeStream
==============
*/

void __fastcall Load_GfxVoxelTreeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxVoxelTreeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_GfxDynamicLightsetGChunkInfo
==============
*/

GfxDynamicLightsetGChunkInfo *__fastcall AllocPostload_GfxDynamicLightsetGChunkInfo()
{
  return ?AllocPostload_GfxDynamicLightsetGChunkInfo@@YAPEAUGfxDynamicLightsetGChunkInfo@@XZ();
}

/*
==============
Mark_GfxStaticDecalVolumePacked
==============
*/

int __fastcall Mark_GfxStaticDecalVolumePacked()
{
  return ?Mark_GfxStaticDecalVolumePacked@@YAHXZ();
}

/*
==============
AllocPreload_GfxDecalVolumeCollection
==============
*/

GfxDecalVolumeCollection *__fastcall AllocPreload_GfxDecalVolumeCollection()
{
  return ?AllocPreload_GfxDecalVolumeCollection@@YAPEAUGfxDecalVolumeCollection@@XZ();
}

/*
==============
Load_umbraTomePtr_t
==============
*/

void __fastcall Load_umbraTomePtr_t(const DBStreamStart streamStart)
{
  ?Load_umbraTomePtr_t@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_GfxGpuLightGridZone
==============
*/

void __fastcall Preload_GfxGpuLightGridZone(const DBStreamStart streamStart)
{
  ?Preload_GfxGpuLightGridZone@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxLightGridVolumeAtlasDataTempPtrArray
==============
*/

void __fastcall Postload_GfxLightGridVolumeAtlasDataTempPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxLightGridVolumeAtlasDataTempPtrArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxDisplacementParmsArray
==============
*/

void __fastcall Load_GfxDisplacementParmsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxDisplacementParmsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_StaticModelIndex
==============
*/

void __fastcall Load_StaticModelIndex(const DBStreamStart streamStart)
{
  ?Load_StaticModelIndex@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_DpvsPlaneArray
==============
*/

void __fastcall Postload_DpvsPlaneArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_DpvsPlaneArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_DpvsPlaneStream
==============
*/

void __fastcall Preload_DpvsPlaneStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_DpvsPlaneStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_DpvsPlane
==============
*/

DpvsPlane *__fastcall AllocPreload_DpvsPlane()
{
  return ?AllocPreload_DpvsPlane@@YAPEAUDpvsPlane@@XZ();
}

/*
==============
Mark_GfxDecalVolumeTransientData
==============
*/

int __fastcall Mark_GfxDecalVolumeTransientData()
{
  return ?Mark_GfxDecalVolumeTransientData@@YAHXZ();
}

/*
==============
AllocPreload_UmbraGate
==============
*/

UmbraGate *__fastcall AllocPreload_UmbraGate()
{
  return ?AllocPreload_UmbraGate@@YAPEAUUmbraGate@@XZ();
}

/*
==============
Mark_GfxGpuLightGridTetrahedron
==============
*/

int __fastcall Mark_GfxGpuLightGridTetrahedron()
{
  return ?Mark_GfxGpuLightGridTetrahedron@@YAHXZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic837
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic837(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic837@@YAXXZ();
}

/*
==============
Load_ProcessStructLayout_GfxLightGridVolumeAtlasDataTempPtr
==============
*/

void Load_ProcessStructLayout_GfxLightGridVolumeAtlasDataTempPtr(void)
{
  ?Load_ProcessStructLayout_GfxLightGridVolumeAtlasDataTempPtr@@YAXXZ();
}

/*
==============
Preload_GfxDynamicLightsetBFDataStream
==============
*/

void __fastcall Preload_GfxDynamicLightsetBFDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxDynamicLightsetBFDataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxWorldTransientZonePtrArray
==============
*/

void __fastcall Load_GfxWorldTransientZonePtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxWorldTransientZonePtrArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxWorldLightmapReindexDataElementArray
==============
*/

void __fastcall Load_GfxWorldLightmapReindexDataElementArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxWorldLightmapReindexDataElementArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxWorldLightmapImagePtrArrayArray
==============
*/

int __fastcall Mark_GfxWorldLightmapImagePtrArrayArray(const unsigned __int64 count)
{
  return ?Mark_GfxWorldLightmapImagePtrArrayArray@@YAH_K@Z(count);
}

/*
==============
Load_ProcessStructLayout_GfxPortal
==============
*/

void Load_ProcessStructLayout_GfxPortal(void)
{
  ?Load_ProcessStructLayout_GfxPortal@@YAXXZ();
}

/*
==============
Postload_GfxDynamicLightsetProbeDataStream
==============
*/

void __fastcall Postload_GfxDynamicLightsetProbeDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxDynamicLightsetProbeDataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxLightGridVolumeAtlasDataTemp
==============
*/

void __fastcall Preload_GfxLightGridVolumeAtlasDataTemp(const DBStreamStart streamStart)
{
  ?Preload_GfxLightGridVolumeAtlasDataTemp@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_GfxStaticDecalVolumePacked
==============
*/

GfxStaticDecalVolumePacked *__fastcall AllocPreload_GfxStaticDecalVolumePacked()
{
  return ?AllocPreload_GfxStaticDecalVolumePacked@@YAPEAUGfxStaticDecalVolumePacked@@XZ();
}

/*
==============
Load_GfxGpuDynLightsetsLGVReferenceArray
==============
*/

void __fastcall Load_GfxGpuDynLightsetsLGVReferenceArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxGpuDynLightsetsLGVReferenceArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_UmbraGateStream
==============
*/

void __fastcall Postload_UmbraGateStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_UmbraGateStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_GfxModelLightmapInst
==============
*/

void Load_ProcessStructLayout_GfxModelLightmapInst(void)
{
  ?Load_ProcessStructLayout_GfxModelLightmapInst@@YAXXZ();
}

/*
==============
Postload_GfxStaticDecalVolumeMaskArray
==============
*/

void __fastcall Postload_GfxStaticDecalVolumeMaskArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxStaticDecalVolumeMaskArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_GfxGpuLightGridVoxelStartTetrahedron
==============
*/

GfxGpuLightGridVoxelStartTetrahedron *__fastcall AllocLoad_GfxGpuLightGridVoxelStartTetrahedron()
{
  return ?AllocLoad_GfxGpuLightGridVoxelStartTetrahedron@@YAPEAUGfxGpuLightGridVoxelStartTetrahedron@@XZ();
}

/*
==============
Load_ProcessStructLayout_GfxSceneDynBrush
==============
*/

void Load_ProcessStructLayout_GfxSceneDynBrush(void)
{
  ?Load_ProcessStructLayout_GfxSceneDynBrush@@YAXXZ();
}

/*
==============
Preload_GfxDrawSurfStream
==============
*/

void __fastcall Preload_GfxDrawSurfStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxDrawSurfStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_GfxGpuLightGridTetrahedronVisibility
==============
*/

GfxGpuLightGridTetrahedronVisibility *__fastcall AllocLoad_GfxGpuLightGridTetrahedronVisibility()
{
  return ?AllocLoad_GfxGpuLightGridTetrahedronVisibility@@YAPEAUGfxGpuLightGridTetrahedronVisibility@@XZ();
}

/*
==============
Preload_GfxCompressedSunShadowDataTempPtrArray
==============
*/

void __fastcall Preload_GfxCompressedSunShadowDataTempPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxCompressedSunShadowDataTempPtrArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_StaticModelIndex
==============
*/

void __fastcall Postload_StaticModelIndex(const DBStreamStart streamStart)
{
  ?Postload_StaticModelIndex@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_GfxDecalVolumeTransientDataArray
==============
*/

void __fastcall Preload_GfxDecalVolumeTransientDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxDecalVolumeTransientDataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxGpuLightGridTetrahedron
==============
*/

void __fastcall Load_GfxGpuLightGridTetrahedron(const DBStreamStart streamStart)
{
  ?Load_GfxGpuLightGridTetrahedron@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxDynamicLightsetLightInfoArray
==============
*/

void __fastcall Postload_GfxDynamicLightsetLightInfoArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxDynamicLightsetLightInfoArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxWorldDpvsPlanesStream
==============
*/

void __fastcall Preload_GfxWorldDpvsPlanesStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxWorldDpvsPlanesStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic473
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic473(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic473@@YAXXZ();
}

/*
==============
Preload_GfxAabbTree
==============
*/

void __fastcall Preload_GfxAabbTree(const DBStreamStart streamStart)
{
  ?Preload_GfxAabbTree@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxDynamicLightsetPortalGIDataArray
==============
*/

void __fastcall Postload_GfxDynamicLightsetPortalGIDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxDynamicLightsetPortalGIDataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxStaticDecalVolumeMaskArray
==============
*/

void __fastcall Load_GfxStaticDecalVolumeMaskArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxStaticDecalVolumeMaskArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxPortal
==============
*/

int __fastcall Mark_GfxPortal()
{
  return ?Mark_GfxPortal@@YAHXZ();
}

/*
==============
Load_BspVersion
==============
*/

void __fastcall Load_BspVersion(const DBStreamStart streamStart)
{
  ?Load_BspVersion@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxDecalVolumeCollectionArray
==============
*/

void __fastcall Postload_GfxDecalVolumeCollectionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxDecalVolumeCollectionArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxWorldLightmapImagePtrArrayArray
==============
*/

void __fastcall Preload_GfxWorldLightmapImagePtrArrayArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxWorldLightmapImagePtrArrayArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxVoxelTreeHeaderArray
==============
*/

void __fastcall Load_GfxVoxelTreeHeaderArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxVoxelTreeHeaderArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxDynamicLightsetLightInfo
==============
*/

void __fastcall Postload_GfxDynamicLightsetLightInfo(const DBStreamStart streamStart)
{
  ?Postload_GfxDynamicLightsetLightInfo@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxDynamicLightsetLGppZoneInfoArray
==============
*/

void __fastcall Postload_GfxDynamicLightsetLGppZoneInfoArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxDynamicLightsetLGppZoneInfoArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxDynamicLightsetBFData
==============
*/

int __fastcall Mark_GfxDynamicLightsetBFData()
{
  return ?Mark_GfxDynamicLightsetBFData@@YAHXZ();
}

/*
==============
Load_GfxDynamicLightsetLightInfoStream
==============
*/

void __fastcall Load_GfxDynamicLightsetLightInfoStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxDynamicLightsetLightInfoStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxDynamicLightsetArray
==============
*/

void __fastcall Load_GfxDynamicLightsetArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxDynamicLightsetArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_DpvsPlane
==============
*/

DpvsPlane *__fastcall AllocLoad_DpvsPlane()
{
  return ?AllocLoad_DpvsPlane@@YAPEAUDpvsPlane@@XZ();
}

/*
==============
AllocPostload_GfxSHCompressedProbeData
==============
*/

GfxSHCompressedProbeData *__fastcall AllocPostload_GfxSHCompressedProbeData()
{
  return ?AllocPostload_GfxSHCompressedProbeData@@YAPEAUGfxSHCompressedProbeData@@XZ();
}

/*
==============
Postload_GfxDecalVolumeCollectionStream
==============
*/

void __fastcall Postload_GfxDecalVolumeCollectionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxDecalVolumeCollectionStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxGpuLightGridVoxelStartTetrahedronArray
==============
*/

void __fastcall Load_GfxGpuLightGridVoxelStartTetrahedronArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxGpuLightGridVoxelStartTetrahedronArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_GfxVoxelTree
==============
*/

void Load_ProcessStructLayout_GfxVoxelTree(void)
{
  ?Load_ProcessStructLayout_GfxVoxelTree@@YAXXZ();
}

/*
==============
Mark_GfxWorldPtrArray
==============
*/

int __fastcall Mark_GfxWorldPtrArray(const unsigned __int64 count)
{
  return ?Mark_GfxWorldPtrArray@@YAH_K@Z(count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic187
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic187(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic187@@YAXXZ();
}

/*
==============
Mark_GfxLightViewFrustum
==============
*/

int __fastcall Mark_GfxLightViewFrustum()
{
  return ?Mark_GfxLightViewFrustum@@YAHXZ();
}

/*
==============
Load_GfxGpuLightGridTetrahedronVisibilityStream
==============
*/

void __fastcall Load_GfxGpuLightGridTetrahedronVisibilityStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxGpuLightGridTetrahedronVisibilityStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_GfxDynamicLightsetProductGIData
==============
*/

void Load_ProcessStructLayout_GfxDynamicLightsetProductGIData(void)
{
  ?Load_ProcessStructLayout_GfxDynamicLightsetProductGIData@@YAXXZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic634
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic634(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic634@@YAXXZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic324
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic324(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic324@@YAXXZ();
}

/*
==============
Load_GfxDynamicLightsetLGppZoneInfo
==============
*/

void __fastcall Load_GfxDynamicLightsetLGppZoneInfo(const DBStreamStart streamStart)
{
  ?Load_GfxDynamicLightsetLGppZoneInfo@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_GfxStaticDecalVolumeUidArray
==============
*/

int __fastcall Mark_GfxStaticDecalVolumeUidArray(const unsigned __int64 count)
{
  return ?Mark_GfxStaticDecalVolumeUidArray@@YAH_K@Z(count);
}

/*
==============
Load_GfxPortalStream
==============
*/

void __fastcall Load_GfxPortalStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxPortalStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_GfxWorldDrawCells
==============
*/

GfxWorldDrawCells *__fastcall AllocPostload_GfxWorldDrawCells()
{
  return ?AllocPostload_GfxWorldDrawCells@@YAPEAUGfxWorldDrawCells@@XZ();
}

/*
==============
Preload_GfxFrustumLightsStream
==============
*/

void __fastcall Preload_GfxFrustumLightsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxFrustumLightsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxCompressedSunShadowParamsStream
==============
*/

void __fastcall Preload_GfxCompressedSunShadowParamsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxCompressedSunShadowParamsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_LightGridVolumeTransformParamsStream
==============
*/

void __fastcall Preload_LightGridVolumeTransformParamsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_LightGridVolumeTransformParamsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_GfxStaticModelLightGridVolumeFlags
==============
*/

void Load_ProcessStructLayout_GfxStaticModelLightGridVolumeFlags(void)
{
  ?Load_ProcessStructLayout_GfxStaticModelLightGridVolumeFlags@@YAXXZ();
}

/*
==============
Load_GfxCompressedSunShadowParams
==============
*/

void __fastcall Load_GfxCompressedSunShadowParams(const DBStreamStart streamStart)
{
  ?Load_GfxCompressedSunShadowParams@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_GfxWorldDpvsPlane
==============
*/

int __fastcall Mark_GfxWorldDpvsPlane()
{
  return ?Mark_GfxWorldDpvsPlane@@YAHXZ();
}

/*
==============
AllocPostload_GfxCompressedSunShadowDataTemp
==============
*/

GfxCompressedSunShadowDataTemp *__fastcall AllocPostload_GfxCompressedSunShadowDataTemp()
{
  return ?AllocPostload_GfxCompressedSunShadowDataTemp@@YAPEAUGfxCompressedSunShadowDataTemp@@XZ();
}

/*
==============
Postload_GfxVoxelTree
==============
*/

void __fastcall Postload_GfxVoxelTree(const DBStreamStart streamStart)
{
  ?Postload_GfxVoxelTree@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic1056
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic1056(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic1056@@YAXXZ();
}

/*
==============
Postload_GfxWorldPackedLightmapArray
==============
*/

void __fastcall Postload_GfxWorldPackedLightmapArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxWorldPackedLightmapArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxDynamicLightsetBFTypeStream
==============
*/

void __fastcall Load_GfxDynamicLightsetBFTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxDynamicLightsetBFTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxDynamicLightsetPortalGIDataArray
==============
*/

void __fastcall Preload_GfxDynamicLightsetPortalGIDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxDynamicLightsetPortalGIDataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_GfxGpuLightGrid
==============
*/

GfxGpuLightGrid *__fastcall AllocLoad_GfxGpuLightGrid()
{
  return ?AllocLoad_GfxGpuLightGrid@@YAPEAUGfxGpuLightGrid@@XZ();
}

/*
==============
Preload_GfxStaticModelLightGridVolumeStream
==============
*/

void __fastcall Preload_GfxStaticModelLightGridVolumeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxStaticModelLightGridVolumeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxVoxelInternalNodeStream
==============
*/

void __fastcall Preload_GfxVoxelInternalNodeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxVoxelInternalNodeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_GfxWorld
==============
*/

GfxWorld *__fastcall AllocLoad_GfxWorld()
{
  return ?AllocLoad_GfxWorld@@YAPEAUGfxWorld@@XZ();
}

/*
==============
Mark_GfxLightGridTypeArray
==============
*/

int __fastcall Mark_GfxLightGridTypeArray(const unsigned __int64 count)
{
  return ?Mark_GfxLightGridTypeArray@@YAH_K@Z(count);
}

/*
==============
Load_GfxVoxelInternalNodeArray
==============
*/

void __fastcall Load_GfxVoxelInternalNodeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxVoxelInternalNodeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxSceneDynBrush
==============
*/

int __fastcall Mark_GfxSceneDynBrush()
{
  return ?Mark_GfxSceneDynBrush@@YAHXZ();
}

/*
==============
Preload_GfxWorldLightmapImagePtrArrayStream
==============
*/

void __fastcall Preload_GfxWorldLightmapImagePtrArrayStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxWorldLightmapImagePtrArrayStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxDynamicLightsetBFTypeArray
==============
*/

int __fastcall Mark_GfxDynamicLightsetBFTypeArray(const unsigned __int64 count)
{
  return ?Mark_GfxDynamicLightsetBFTypeArray@@YAH_K@Z(count);
}

/*
==============
Postload_GfxDynamicLightsetBFDataArray
==============
*/

void __fastcall Postload_GfxDynamicLightsetBFDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxDynamicLightsetBFDataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxWorldDrawCellsArray
==============
*/

int __fastcall Mark_GfxWorldDrawCellsArray(const unsigned __int64 count)
{
  return ?Mark_GfxWorldDrawCellsArray@@YAH_K@Z(count);
}

/*
==============
Postload_mnode_t
==============
*/

void __fastcall Postload_mnode_t(const DBStreamStart streamStart)
{
  ?Postload_mnode_t@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxSceneDynModel
==============
*/

void __fastcall Load_GfxSceneDynModel(const DBStreamStart streamStart)
{
  ?Load_GfxSceneDynModel@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic571
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic571(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic571@@YAXXZ();
}

/*
==============
Mark_GfxGpuLightGridVoxelTreeArray
==============
*/

int __fastcall Mark_GfxGpuLightGridVoxelTreeArray(const unsigned __int64 count)
{
  return ?Mark_GfxGpuLightGridVoxelTreeArray@@YAH_K@Z(count);
}

/*
==============
Postload_GfxDisplacementParmsStream
==============
*/

void __fastcall Postload_GfxDisplacementParmsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxDisplacementParmsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxDynamicLightsetProductGIDataArray
==============
*/

void __fastcall Postload_GfxDynamicLightsetProductGIDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxDynamicLightsetProductGIDataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_GfxWorldTransientZone
==============
*/

void Load_ProcessStructLayout_GfxWorldTransientZone(void)
{
  ?Load_ProcessStructLayout_GfxWorldTransientZone@@YAXXZ();
}

/*
==============
Postload_GfxDrawSurf
==============
*/

void __fastcall Postload_GfxDrawSurf(const DBStreamStart streamStart)
{
  ?Postload_GfxDrawSurf@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxLightmapAtlasDataTempPtrArray
==============
*/

void __fastcall Load_GfxLightmapAtlasDataTempPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxLightmapAtlasDataTempPtrArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxDynamicLightsetBFDataStream
==============
*/

void __fastcall Postload_GfxDynamicLightsetBFDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxDynamicLightsetBFDataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_BspVersionStream
==============
*/

void __fastcall Preload_BspVersionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_BspVersionStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxLightAABBStream
==============
*/

void __fastcall Postload_GfxLightAABBStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxLightAABBStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxWorldDpvsDynamic
==============
*/

void __fastcall Load_GfxWorldDpvsDynamic(const DBStreamStart streamStart)
{
  ?Load_GfxWorldDpvsDynamic@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_GfxSHCompressedProbeData
==============
*/

int __fastcall Mark_GfxSHCompressedProbeData()
{
  return ?Mark_GfxSHCompressedProbeData@@YAHXZ();
}

/*
==============
AllocPreload_GfxSHProbeData
==============
*/

GfxSHProbeData *__fastcall AllocPreload_GfxSHProbeData()
{
  return ?AllocPreload_GfxSHProbeData@@YAPEAUGfxSHProbeData@@XZ();
}

/*
==============
Mark_GfxGpuLightGridTransientData
==============
*/

int __fastcall Mark_GfxGpuLightGridTransientData()
{
  return ?Mark_GfxGpuLightGridTransientData@@YAHXZ();
}

/*
==============
Preload_GfxModelLightmapInst
==============
*/

void __fastcall Preload_GfxModelLightmapInst(const DBStreamStart streamStart)
{
  ?Preload_GfxModelLightmapInst@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxLightGridVolumeAtlasDataTempStream
==============
*/

void __fastcall Postload_GfxLightGridVolumeAtlasDataTempStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxLightGridVolumeAtlasDataTempStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxLightViewFrustumStream
==============
*/

void __fastcall Preload_GfxLightViewFrustumStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxLightViewFrustumStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxDynamicLightsetProbeDataArray
==============
*/

int __fastcall Mark_GfxDynamicLightsetProbeDataArray(const unsigned __int64 count)
{
  return ?Mark_GfxDynamicLightsetProbeDataArray@@YAH_K@Z(count);
}

/*
==============
Load_CheckArrayMemberGfxWorld1688
==============
*/

void Load_CheckArrayMemberGfxWorld1688(void)
{
  ?Load_CheckArrayMemberGfxWorld1688@@YAXXZ();
}

/*
==============
Postload_GfxVoxelInternalNode
==============
*/

void __fastcall Postload_GfxVoxelInternalNode(const DBStreamStart streamStart)
{
  ?Postload_GfxVoxelInternalNode@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_GfxCellTreeCount
==============
*/

void __fastcall Preload_GfxCellTreeCount(const DBStreamStart streamStart)
{
  ?Preload_GfxCellTreeCount@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxLightGridVolumeAtlasDataTempArray
==============
*/

void __fastcall Load_GfxLightGridVolumeAtlasDataTempArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxLightGridVolumeAtlasDataTempArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic929
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic929(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic929@@YAXXZ();
}

/*
==============
Postload_GfxCellStream
==============
*/

void __fastcall Postload_GfxCellStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxCellStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_GfxWorldPackedLightmap
==============
*/

GfxWorldPackedLightmap *__fastcall AllocPostload_GfxWorldPackedLightmap()
{
  return ?AllocPostload_GfxWorldPackedLightmap@@YAPEAUGfxWorldPackedLightmap@@XZ();
}

/*
==============
Preload_GfxGpuLightGridVoxelTreeArray
==============
*/

void __fastcall Preload_GfxGpuLightGridVoxelTreeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxGpuLightGridVoxelTreeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxDisplacementParms
==============
*/

void __fastcall Preload_GfxDisplacementParms(const DBStreamStart streamStart)
{
  ?Preload_GfxDisplacementParms@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_GfxStaticDecalVolumeMaterialArray
==============
*/

void __fastcall Preload_GfxStaticDecalVolumeMaterialArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxStaticDecalVolumeMaterialArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxDynamicLightsetGChunkInfo
==============
*/

void __fastcall Postload_GfxDynamicLightsetGChunkInfo(const DBStreamStart streamStart)
{
  ?Postload_GfxDynamicLightsetGChunkInfo@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxDynamicLightsetGChunkArray
==============
*/

void __fastcall Postload_GfxDynamicLightsetGChunkArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxDynamicLightsetGChunkArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxWorldTransientZoneArray
==============
*/

void __fastcall Postload_GfxWorldTransientZoneArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxWorldTransientZoneArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_GfxLightGridType
==============
*/

GfxLightGridType *__fastcall AllocPreload_GfxLightGridType()
{
  return ?AllocPreload_GfxLightGridType@@YAPEAW4GfxLightGridType@@XZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic303
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic303(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic303@@YAXXZ();
}

/*
==============
Mark_GfxMapEntLookupArray
==============
*/

int __fastcall Mark_GfxMapEntLookupArray(const unsigned __int64 count)
{
  return ?Mark_GfxMapEntLookupArray@@YAH_K@Z(count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic1105
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic1105(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic1105@@YAXXZ();
}

/*
==============
Postload_GfxCellTree
==============
*/

void __fastcall Postload_GfxCellTree(const DBStreamStart streamStart)
{
  ?Postload_GfxCellTree@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_GfxCellTreeCount
==============
*/

void Load_ProcessStructLayout_GfxCellTreeCount(void)
{
  ?Load_ProcessStructLayout_GfxCellTreeCount@@YAXXZ();
}

/*
==============
Load_GfxDynamicLightsetPortalGIDataStream
==============
*/

void __fastcall Load_GfxDynamicLightsetPortalGIDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxDynamicLightsetPortalGIDataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic1070
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic1070(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic1070@@YAXXZ();
}

/*
==============
Postload_GfxSHProbeDataArray
==============
*/

void __fastcall Postload_GfxSHProbeDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxSHProbeDataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxWorldPtrStream
==============
*/

void __fastcall Load_GfxWorldPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxWorldPtrStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_GfxWorldDpvsPlanes
==============
*/

GfxWorldDpvsPlanes *__fastcall AllocLoad_GfxWorldDpvsPlanes()
{
  return ?AllocLoad_GfxWorldDpvsPlanes@@YAPEAUGfxWorldDpvsPlanes@@XZ();
}

/*
==============
Preload_GfxSceneDynBrushArray
==============
*/

void __fastcall Preload_GfxSceneDynBrushArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxSceneDynBrushArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_GfxCompressedSunShadowDataTemp
==============
*/

void Load_ProcessStructLayout_GfxCompressedSunShadowDataTemp(void)
{
  ?Load_ProcessStructLayout_GfxCompressedSunShadowDataTemp@@YAXXZ();
}

/*
==============
AllocLoad_GfxLightAABB
==============
*/

GfxLightAABB *__fastcall AllocLoad_GfxLightAABB()
{
  return ?AllocLoad_GfxLightAABB@@YAPEAUGfxLightAABB@@XZ();
}

/*
==============
Load_GfxWorldPtrArray
==============
*/

void __fastcall Load_GfxWorldPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxWorldPtrArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorld1702
==============
*/

void Load_CheckArrayMemberGfxWorld1702(void)
{
  ?Load_CheckArrayMemberGfxWorld1702@@YAXXZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic480
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic480(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic480@@YAXXZ();
}

/*
==============
Postload_GfxGpuLightGridTetrahedronNeighborsArray
==============
*/

void __fastcall Postload_GfxGpuLightGridTetrahedronNeighborsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxGpuLightGridTetrahedronNeighborsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxVoxelLeafNodeStream
==============
*/

void __fastcall Load_GfxVoxelLeafNodeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxVoxelLeafNodeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic592
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic592(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic592@@YAXXZ();
}

/*
==============
AllocPreload_GfxVoxelTree
==============
*/

GfxVoxelTree *__fastcall AllocPreload_GfxVoxelTree()
{
  return ?AllocPreload_GfxVoxelTree@@YAPEAUGfxVoxelTree@@XZ();
}

/*
==============
Postload_GfxCompressedSunShadowParams
==============
*/

void __fastcall Postload_GfxCompressedSunShadowParams(const DBStreamStart streamStart)
{
  ?Postload_GfxCompressedSunShadowParams@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_GfxCompressedSunShadowDataTempStream
==============
*/

void __fastcall Preload_GfxCompressedSunShadowDataTempStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxCompressedSunShadowDataTempStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxDecalVolumeCollectionArray
==============
*/

void __fastcall Load_GfxDecalVolumeCollectionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxDecalVolumeCollectionArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_GfxWorldDpvsDynamic
==============
*/

GfxWorldDpvsDynamic *__fastcall AllocLoad_GfxWorldDpvsDynamic()
{
  return ?AllocLoad_GfxWorldDpvsDynamic@@YAPEAUGfxWorldDpvsDynamic@@XZ();
}

/*
==============
AllocLoad_GfxDynamicLightsetLightInfo
==============
*/

GfxDynamicLightsetLightInfo *__fastcall AllocLoad_GfxDynamicLightsetLightInfo()
{
  return ?AllocLoad_GfxDynamicLightsetLightInfo@@YAPEAUGfxDynamicLightsetLightInfo@@XZ();
}

/*
==============
Load_GfxDynamicLightsetBFDataStream
==============
*/

void __fastcall Load_GfxDynamicLightsetBFDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxDynamicLightsetBFDataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_GfxLightmapAtlasDataTempPtr
==============
*/

void Load_ProcessStructLayout_GfxLightmapAtlasDataTempPtr(void)
{
  ?Load_ProcessStructLayout_GfxLightmapAtlasDataTempPtr@@YAXXZ();
}

/*
==============
Postload_GfxDynamicLightsetPortalGIDataStream
==============
*/

void __fastcall Postload_GfxDynamicLightsetPortalGIDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxDynamicLightsetPortalGIDataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxMapEntLookupStream
==============
*/

void __fastcall Preload_GfxMapEntLookupStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxMapEntLookupStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxAabbTree
==============
*/

int __fastcall Mark_GfxAabbTree()
{
  return ?Mark_GfxAabbTree@@YAHXZ();
}

/*
==============
Preload_BspVersion
==============
*/

void __fastcall Preload_BspVersion(const DBStreamStart streamStart)
{
  ?Preload_BspVersion@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxWorldPtr
==============
*/

void __fastcall Load_GfxWorldPtr(const DBStreamStart streamStart)
{
  ?Load_GfxWorldPtr@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxWorldDpvsStaticArray
==============
*/

void __fastcall Postload_GfxWorldDpvsStaticArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxWorldDpvsStaticArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_GfxHeightfield
==============
*/

GfxHeightfield *__fastcall AllocPostload_GfxHeightfield()
{
  return ?AllocPostload_GfxHeightfield@@YAPEAUGfxHeightfield@@XZ();
}

/*
==============
Preload_GfxDynamicLightsetStream
==============
*/

void __fastcall Preload_GfxDynamicLightsetStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxDynamicLightsetStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic289
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic289(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic289@@YAXXZ();
}

/*
==============
Postload_GfxCellTreeCountStream
==============
*/

void __fastcall Postload_GfxCellTreeCountStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxCellTreeCountStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic275
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic275(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic275@@YAXXZ();
}

/*
==============
Load_ProcessStructLayout_GfxGpuLightGridTetrahedron
==============
*/

void Load_ProcessStructLayout_GfxGpuLightGridTetrahedron(void)
{
  ?Load_ProcessStructLayout_GfxGpuLightGridTetrahedron@@YAXXZ();
}

/*
==============
Mark_GfxAabbTreeArray
==============
*/

int __fastcall Mark_GfxAabbTreeArray(const unsigned __int64 count)
{
  return ?Mark_GfxAabbTreeArray@@YAH_K@Z(count);
}

/*
==============
Preload_StaticModelIndexArray
==============
*/

void __fastcall Preload_StaticModelIndexArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_StaticModelIndexArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_GfxLightGridVolumeAtlasDataTempPtr
==============
*/

GfxLightGridVolumeAtlasDataTemp **__fastcall AllocPreload_GfxLightGridVolumeAtlasDataTempPtr()
{
  return ?AllocPreload_GfxLightGridVolumeAtlasDataTempPtr@@YAPEAPEAUGfxLightGridVolumeAtlasDataTemp@@XZ();
}

/*
==============
Load_GfxPrecomputedSkyIllumination
==============
*/

void __fastcall Load_GfxPrecomputedSkyIllumination(const DBStreamStart streamStart)
{
  ?Load_GfxPrecomputedSkyIllumination@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxModelLightmapInstArray
==============
*/

void __fastcall Load_GfxModelLightmapInstArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxModelLightmapInstArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxVoxelLeafNodeArray
==============
*/

void __fastcall Load_GfxVoxelLeafNodeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxVoxelLeafNodeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxDynamicLightsetLGppZoneInfoStream
==============
*/

void __fastcall Postload_GfxDynamicLightsetLGppZoneInfoStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxDynamicLightsetLGppZoneInfoStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_GfxVoxelLeafNode
==============
*/

GfxVoxelLeafNode *__fastcall AllocPreload_GfxVoxelLeafNode()
{
  return ?AllocPreload_GfxVoxelLeafNode@@YAPEAUGfxVoxelLeafNode@@XZ();
}

/*
==============
AllocPostload_GfxDecalVolumeTransientData
==============
*/

GfxDecalVolumeTransientData *__fastcall AllocPostload_GfxDecalVolumeTransientData()
{
  return ?AllocPostload_GfxDecalVolumeTransientData@@YAPEAUGfxDecalVolumeTransientData@@XZ();
}

/*
==============
Load_GfxGpuLightGridTransientDataStream
==============
*/

void __fastcall Load_GfxGpuLightGridTransientDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxGpuLightGridTransientDataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_BspVersion
==============
*/

BspVersion *__fastcall AllocLoad_BspVersion()
{
  return ?AllocLoad_BspVersion@@YAPEAW4BspVersion@@XZ();
}

/*
==============
Preload_GfxWorldTransientZone
==============
*/

void __fastcall Preload_GfxWorldTransientZone(const DBStreamStart streamStart)
{
  ?Preload_GfxWorldTransientZone@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_GfxWorldDrawCellsArray
==============
*/

void __fastcall Preload_GfxWorldDrawCellsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxWorldDrawCellsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_mnode_tArray
==============
*/

int __fastcall Mark_mnode_tArray(const unsigned __int64 count)
{
  return ?Mark_mnode_tArray@@YAH_K@Z(count);
}

/*
==============
Load_ProcessStructLayout_GfxLightViewFrustum
==============
*/

void Load_ProcessStructLayout_GfxLightViewFrustum(void)
{
  ?Load_ProcessStructLayout_GfxLightViewFrustum@@YAXXZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic226
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic226(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic226@@YAXXZ();
}

/*
==============
Preload_GfxLightGridVolumeAtlasDataTempArray
==============
*/

void __fastcall Preload_GfxLightGridVolumeAtlasDataTempArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxLightGridVolumeAtlasDataTempArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_GfxDynamicLightsetGChunkInfo
==============
*/

void Load_ProcessStructLayout_GfxDynamicLightsetGChunkInfo(void)
{
  ?Load_ProcessStructLayout_GfxDynamicLightsetGChunkInfo@@YAXXZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic993
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic993(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic993@@YAXXZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic669
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic669(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic669@@YAXXZ();
}

/*
==============
Postload_GfxPrecomputedSkyIlluminationArray
==============
*/

void __fastcall Postload_GfxPrecomputedSkyIlluminationArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxPrecomputedSkyIlluminationArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxGpuLightGridVoxelStartTetrahedronArray
==============
*/

void __fastcall Preload_GfxGpuLightGridVoxelStartTetrahedronArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxGpuLightGridVoxelStartTetrahedronArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxCellTransientInfo
==============
*/

void __fastcall Preload_GfxCellTransientInfo(const DBStreamStart streamStart)
{
  ?Preload_GfxCellTransientInfo@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic338
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic338(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic338@@YAXXZ();
}

/*
==============
AllocPostload_GfxCellTree
==============
*/

GfxCellTree *__fastcall AllocPostload_GfxCellTree()
{
  return ?AllocPostload_GfxCellTree@@YAPEAUGfxCellTree@@XZ();
}

/*
==============
Preload_GfxWorldLightmapReindexData
==============
*/

void __fastcall Preload_GfxWorldLightmapReindexData(const DBStreamStart streamStart)
{
  ?Preload_GfxWorldLightmapReindexData@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_GfxWorldDpvsStatic
==============
*/

int __fastcall Mark_GfxWorldDpvsStatic()
{
  return ?Mark_GfxWorldDpvsStatic@@YAHXZ();
}

/*
==============
Postload_GfxVoxelTreeHeaderArray
==============
*/

void __fastcall Postload_GfxVoxelTreeHeaderArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxVoxelTreeHeaderArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxDynamicLightsetStream
==============
*/

void __fastcall Postload_GfxDynamicLightsetStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxDynamicLightsetStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxWorldLightmapImagePtrArray
==============
*/

void __fastcall Postload_GfxWorldLightmapImagePtrArray(const DBStreamStart streamStart)
{
  ?Postload_GfxWorldLightmapImagePtrArray@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxAabbTree
==============
*/

void __fastcall Load_GfxAabbTree(const DBStreamStart streamStart)
{
  ?Load_GfxAabbTree@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxVoxelTopDownViewNode
==============
*/

void __fastcall Postload_GfxVoxelTopDownViewNode(const DBStreamStart streamStart)
{
  ?Postload_GfxVoxelTopDownViewNode@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_GfxCell
==============
*/

int __fastcall Mark_GfxCell()
{
  return ?Mark_GfxCell@@YAHXZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic682
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic682(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic682@@YAXXZ();
}

/*
==============
Load_GfxWorldLightmapReindexDataArray
==============
*/

void __fastcall Load_GfxWorldLightmapReindexDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxWorldLightmapReindexDataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxDynamicLightsetLGppZoneInfo
==============
*/

void __fastcall Preload_GfxDynamicLightsetLGppZoneInfo(const DBStreamStart streamStart)
{
  ?Preload_GfxDynamicLightsetLGppZoneInfo@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_umbraTomePtr_t
==============
*/

Umbra::Tome **__fastcall AllocLoad_umbraTomePtr_t()
{
  return ?AllocLoad_umbraTomePtr_t@@YAPEAPEAVTome@Umbra@@XZ();
}

/*
==============
Load_GfxWorldPackedLightmapArray
==============
*/

void __fastcall Load_GfxWorldPackedLightmapArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxWorldPackedLightmapArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_GfxCompressedSunShadowParams
==============
*/

GfxCompressedSunShadowParams *__fastcall AllocPostload_GfxCompressedSunShadowParams()
{
  return ?AllocPostload_GfxCompressedSunShadowParams@@YAPEAUGfxCompressedSunShadowParams@@XZ();
}

/*
==============
Preload_GfxWorldTransientZonePtr
==============
*/

void __fastcall Preload_GfxWorldTransientZonePtr(const DBStreamStart streamStart)
{
  ?Preload_GfxWorldTransientZonePtr@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_GfxCompressedSunShadowParamsArray
==============
*/

int __fastcall Mark_GfxCompressedSunShadowParamsArray(const unsigned __int64 count)
{
  return ?Mark_GfxCompressedSunShadowParamsArray@@YAH_K@Z(count);
}

/*
==============
AllocLoad_GfxAabbTree
==============
*/

GfxAabbTree *__fastcall AllocLoad_GfxAabbTree()
{
  return ?AllocLoad_GfxAabbTree@@YAPEAUGfxAabbTree@@XZ();
}

/*
==============
Preload_GfxWorldStream
==============
*/

void __fastcall Preload_GfxWorldStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxWorldStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxWorldLightmapReindexDataArray
==============
*/

void __fastcall Preload_GfxWorldLightmapReindexDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxWorldLightmapReindexDataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxWorldDrawCellsArray
==============
*/

void __fastcall Load_GfxWorldDrawCellsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxWorldDrawCellsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxCompressedSunShadowDataTempPtr
==============
*/

int __fastcall Mark_GfxCompressedSunShadowDataTempPtr()
{
  return ?Mark_GfxCompressedSunShadowDataTempPtr@@YAHXZ();
}

/*
==============
AllocLoad_GfxModelLightmapInst
==============
*/

GfxModelLightmapInst *__fastcall AllocLoad_GfxModelLightmapInst()
{
  return ?AllocLoad_GfxModelLightmapInst@@YAPEAUGfxModelLightmapInst@@XZ();
}

/*
==============
Postload_GfxStaticDecalVolumeMaterialStream
==============
*/

void __fastcall Postload_GfxStaticDecalVolumeMaterialStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxStaticDecalVolumeMaterialStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_LightGridVolumeTransformParams
==============
*/

LightGridVolumeTransformParams *__fastcall AllocLoad_LightGridVolumeTransformParams()
{
  return ?AllocLoad_LightGridVolumeTransformParams@@YAPEAULightGridVolumeTransformParams@@XZ();
}

/*
==============
Preload_GfxDynamicLightsetBFTypeStream
==============
*/

void __fastcall Preload_GfxDynamicLightsetBFTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxDynamicLightsetBFTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxWorldLightmapReindexDataElement
==============
*/

int __fastcall Mark_GfxWorldLightmapReindexDataElement()
{
  return ?Mark_GfxWorldLightmapReindexDataElement@@YAHXZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic908
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic908(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic908@@YAXXZ();
}

/*
==============
Load_GfxShadowGeometryStream
==============
*/

void __fastcall Load_GfxShadowGeometryStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxShadowGeometryStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxModelLightmapInst
==============
*/

void __fastcall Postload_GfxModelLightmapInst(const DBStreamStart streamStart)
{
  ?Postload_GfxModelLightmapInst@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic282
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic282(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic282@@YAXXZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic424
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic424(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic424@@YAXXZ();
}

/*
==============
Preload_GfxGpuLightGridTetrahedronNeighborsStream
==============
*/

void __fastcall Preload_GfxGpuLightGridTetrahedronNeighborsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxGpuLightGridTetrahedronNeighborsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_GfxDynamicLightsetGChunk
==============
*/

GfxDynamicLightsetGChunk *__fastcall AllocPostload_GfxDynamicLightsetGChunk()
{
  return ?AllocPostload_GfxDynamicLightsetGChunk@@YAPEAUGfxDynamicLightsetGChunk@@XZ();
}

/*
==============
Preload_GfxDrawSurfArray
==============
*/

void __fastcall Preload_GfxDrawSurfArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxDrawSurfArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic886
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic886(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic886@@YAXXZ();
}

/*
==============
Preload_GfxWorldPtr
==============
*/

void __fastcall Preload_GfxWorldPtr(const DBStreamStart streamStart)
{
  ?Preload_GfxWorldPtr@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic233
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic233(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic233@@YAXXZ();
}

/*
==============
AllocLoad_mnode_t
==============
*/

mnode_t *__fastcall AllocLoad_mnode_t()
{
  return ?AllocLoad_mnode_t@@YAPEAUmnode_t@@XZ();
}

/*
==============
Preload_GfxVoxelLeafNodeArray
==============
*/

void __fastcall Preload_GfxVoxelLeafNodeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxVoxelLeafNodeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxStaticDecalVolumeUidStream
==============
*/

void __fastcall Load_GfxStaticDecalVolumeUidStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxStaticDecalVolumeUidStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxGpuLightGridVoxelTreeStream
==============
*/

void __fastcall Preload_GfxGpuLightGridVoxelTreeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxGpuLightGridVoxelTreeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxGpuDynLightsetsLGVReference
==============
*/

int __fastcall Mark_GfxGpuDynLightsetsLGVReference()
{
  return ?Mark_GfxGpuDynLightsetsLGVReference@@YAHXZ();
}

/*
==============
Postload_GfxDecalVolumeTransientData
==============
*/

void __fastcall Postload_GfxDecalVolumeTransientData(const DBStreamStart streamStart)
{
  ?Postload_GfxDecalVolumeTransientData@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_GfxCompressedSunShadowParams
==============
*/

void __fastcall Preload_GfxCompressedSunShadowParams(const DBStreamStart streamStart)
{
  ?Preload_GfxCompressedSunShadowParams@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_UmbraGateStream
==============
*/

void __fastcall Preload_UmbraGateStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_UmbraGateStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxSceneDynModel
==============
*/

void __fastcall Postload_GfxSceneDynModel(const DBStreamStart streamStart)
{
  ?Postload_GfxSceneDynModel@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxLightAABB
==============
*/

void __fastcall Load_GfxLightAABB(const DBStreamStart streamStart)
{
  ?Load_GfxLightAABB@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxGpuLightGridZoneArray
==============
*/

void __fastcall Load_GfxGpuLightGridZoneArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxGpuLightGridZoneArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxCellStream
==============
*/

void __fastcall Preload_GfxCellStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxCellStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxStaticModelLightGridVolumeFlagsArray
==============
*/

int __fastcall Mark_GfxStaticModelLightGridVolumeFlagsArray(const unsigned __int64 count)
{
  return ?Mark_GfxStaticModelLightGridVolumeFlagsArray@@YAH_K@Z(count);
}

/*
==============
Mark_GfxModelLightmapInstArray
==============
*/

int __fastcall Mark_GfxModelLightmapInstArray(const unsigned __int64 count)
{
  return ?Mark_GfxModelLightmapInstArray@@YAH_K@Z(count);
}

/*
==============
Postload_GfxStaticDecalVolumeMask
==============
*/

void __fastcall Postload_GfxStaticDecalVolumeMask(const DBStreamStart streamStart)
{
  ?Postload_GfxStaticDecalVolumeMask@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_GfxWorldLightmapReindexDataElementStream
==============
*/

void __fastcall Preload_GfxWorldLightmapReindexDataElementStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxWorldLightmapReindexDataElementStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxLightAABBArray
==============
*/

void __fastcall Preload_GfxLightAABBArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxLightAABBArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_GfxLightViewFrustum
==============
*/

GfxLightViewFrustum *__fastcall AllocPostload_GfxLightViewFrustum()
{
  return ?AllocPostload_GfxLightViewFrustum@@YAPEAUGfxLightViewFrustum@@XZ();
}

/*
==============
AllocPreload_GfxStaticDecalVolumeMaterial
==============
*/

GfxStaticDecalVolumeMaterial *__fastcall AllocPreload_GfxStaticDecalVolumeMaterial()
{
  return ?AllocPreload_GfxStaticDecalVolumeMaterial@@YAPEAUGfxStaticDecalVolumeMaterial@@XZ();
}

/*
==============
Load_LightGridVolumeTransformParamsArray
==============
*/

void __fastcall Load_LightGridVolumeTransformParamsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_LightGridVolumeTransformParamsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxWorldDpvsPlaneArray
==============
*/

int __fastcall Mark_GfxWorldDpvsPlaneArray(const unsigned __int64 count)
{
  return ?Mark_GfxWorldDpvsPlaneArray@@YAH_K@Z(count);
}

/*
==============
Preload_GfxVoxelTreeStream
==============
*/

void __fastcall Preload_GfxVoxelTreeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxVoxelTreeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_GfxSceneDynBrush
==============
*/

GfxSceneDynBrush *__fastcall AllocPreload_GfxSceneDynBrush()
{
  return ?AllocPreload_GfxSceneDynBrush@@YAPEAUGfxSceneDynBrush@@XZ();
}

/*
==============
Preload_GfxSceneDynModelStream
==============
*/

void __fastcall Preload_GfxSceneDynModelStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxSceneDynModelStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxDynamicLightsetGChunkFlagsArray
==============
*/

int __fastcall Mark_GfxDynamicLightsetGChunkFlagsArray(const unsigned __int64 count)
{
  return ?Mark_GfxDynamicLightsetGChunkFlagsArray@@YAH_K@Z(count);
}

/*
==============
Load_GfxSceneDynModelStream
==============
*/

void __fastcall Load_GfxSceneDynModelStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxSceneDynModelStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxWorldStream
==============
*/

void __fastcall Load_GfxWorldStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxWorldStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxCellTransientInfoArray
==============
*/

void __fastcall Postload_GfxCellTransientInfoArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxCellTransientInfoArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxGpuLightGridTetrahedronVisibilityArray
==============
*/

void __fastcall Load_GfxGpuLightGridTetrahedronVisibilityArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxGpuLightGridTetrahedronVisibilityArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxWorldDraw
==============
*/

void __fastcall Preload_GfxWorldDraw(const DBStreamStart streamStart)
{
  ?Preload_GfxWorldDraw@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_GfxLightAABBNode
==============
*/

GfxLightAABBNode *__fastcall AllocPreload_GfxLightAABBNode()
{
  return ?AllocPreload_GfxLightAABBNode@@YAPEAUGfxLightAABBNode@@XZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic352
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic352(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic352@@YAXXZ();
}

/*
==============
AllocPreload_GfxDynamicLightsetGChunkInfo
==============
*/

GfxDynamicLightsetGChunkInfo *__fastcall AllocPreload_GfxDynamicLightsetGChunkInfo()
{
  return ?AllocPreload_GfxDynamicLightsetGChunkInfo@@YAPEAUGfxDynamicLightsetGChunkInfo@@XZ();
}

/*
==============
AllocPostload_GfxDynamicLightsetBFData
==============
*/

GfxDynamicLightsetBFData *__fastcall AllocPostload_GfxDynamicLightsetBFData()
{
  return ?AllocPostload_GfxDynamicLightsetBFData@@YAPEAUGfxDynamicLightsetBFData@@XZ();
}

/*
==============
Preload_GfxDynamicLightsetLightInfo
==============
*/

void __fastcall Preload_GfxDynamicLightsetLightInfo(const DBStreamStart streamStart)
{
  ?Preload_GfxDynamicLightsetLightInfo@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxWorldPackedLightmapStream
==============
*/

void __fastcall Load_GfxWorldPackedLightmapStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxWorldPackedLightmapStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_GfxGpuLightGridTetrahedronNeighbors
==============
*/

GfxGpuLightGridTetrahedronNeighbors *__fastcall AllocPreload_GfxGpuLightGridTetrahedronNeighbors()
{
  return ?AllocPreload_GfxGpuLightGridTetrahedronNeighbors@@YAPEAUGfxGpuLightGridTetrahedronNeighbors@@XZ();
}

/*
==============
AllocLoad_GfxStaticDecalVolumePacked
==============
*/

GfxStaticDecalVolumePacked *__fastcall AllocLoad_GfxStaticDecalVolumePacked()
{
  return ?AllocLoad_GfxStaticDecalVolumePacked@@YAPEAUGfxStaticDecalVolumePacked@@XZ();
}

/*
==============
Postload_GfxLightmapAtlasDataTempStream
==============
*/

void __fastcall Postload_GfxLightmapAtlasDataTempStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxLightmapAtlasDataTempStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxMayhemSelfVisStream
==============
*/

void __fastcall Load_GfxMayhemSelfVisStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxMayhemSelfVisStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_GfxWorld
==============
*/

void Load_ProcessStructLayout_GfxWorld(void)
{
  ?Load_ProcessStructLayout_GfxWorld@@YAXXZ();
}

/*
==============
Mark_GfxCompressedSunShadowDataTempPtrArray
==============
*/

int __fastcall Mark_GfxCompressedSunShadowDataTempPtrArray(const unsigned __int64 count)
{
  return ?Mark_GfxCompressedSunShadowDataTempPtrArray@@YAH_K@Z(count);
}

/*
==============
Preload_GfxStaticModelLightGridVolume
==============
*/

void __fastcall Preload_GfxStaticModelLightGridVolume(const DBStreamStart streamStart)
{
  ?Preload_GfxStaticModelLightGridVolume@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxGpuLightGridZone
==============
*/

void __fastcall Load_GfxGpuLightGridZone(const DBStreamStart streamStart)
{
  ?Load_GfxGpuLightGridZone@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_GfxVoxelTopDownViewNode
==============
*/

GfxVoxelTopDownViewNode *__fastcall AllocPostload_GfxVoxelTopDownViewNode()
{
  return ?AllocPostload_GfxVoxelTopDownViewNode@@YAPEAUGfxVoxelTopDownViewNode@@XZ();
}

/*
==============
Postload_GfxLightmapRawArray
==============
*/

void __fastcall Postload_GfxLightmapRawArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxLightmapRawArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxGpuLightGridStream
==============
*/

void __fastcall Postload_GfxGpuLightGridStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxGpuLightGridStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxDynamicLightsetBFTypeStream
==============
*/

void __fastcall Postload_GfxDynamicLightsetBFTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxDynamicLightsetBFTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxGpuLightGridTetrahedronNeighbors
==============
*/

int __fastcall Mark_GfxGpuLightGridTetrahedronNeighbors()
{
  return ?Mark_GfxGpuLightGridTetrahedronNeighbors@@YAHXZ();
}

/*
==============
Postload_GfxLightGridTypeArray
==============
*/

void __fastcall Postload_GfxLightGridTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxLightGridTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxWorldTransientZoneArray
==============
*/

void __fastcall Load_GfxWorldTransientZoneArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxWorldTransientZoneArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_GfxAabbTree
==============
*/

GfxAabbTree *__fastcall AllocPostload_GfxAabbTree()
{
  return ?AllocPostload_GfxAabbTree@@YAPEAUGfxAabbTree@@XZ();
}

/*
==============
Load_ProcessStructLayout_GfxSceneDynModel
==============
*/

void Load_ProcessStructLayout_GfxSceneDynModel(void)
{
  ?Load_ProcessStructLayout_GfxSceneDynModel@@YAXXZ();
}

/*
==============
Preload_DpvsPlane
==============
*/

void __fastcall Preload_DpvsPlane(const DBStreamStart streamStart)
{
  ?Preload_DpvsPlane@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxGpuLightGridTetrahedronArray
==============
*/

void __fastcall Postload_GfxGpuLightGridTetrahedronArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxGpuLightGridTetrahedronArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic380
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic380(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic380@@YAXXZ();
}

/*
==============
Preload_GfxLightmapAtlasDataTempPtrStream
==============
*/

void __fastcall Preload_GfxLightmapAtlasDataTempPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxLightmapAtlasDataTempPtrStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxGpuLightGridVoxelStartTetrahedronStream
==============
*/

void __fastcall Preload_GfxGpuLightGridVoxelStartTetrahedronStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxGpuLightGridVoxelStartTetrahedronStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxStaticDecalVolumeUid
==============
*/

void __fastcall Load_GfxStaticDecalVolumeUid(const DBStreamStart streamStart)
{
  ?Load_GfxStaticDecalVolumeUid@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxWorldLightmapImagePtrArrayStream
==============
*/

void __fastcall Load_GfxWorldLightmapImagePtrArrayStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxWorldLightmapImagePtrArrayStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxDisplacementParmsArray
==============
*/

void __fastcall Postload_GfxDisplacementParmsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxDisplacementParmsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxGpuLightGridTetrahedronVisibility
==============
*/

void __fastcall Preload_GfxGpuLightGridTetrahedronVisibility(const DBStreamStart streamStart)
{
  ?Preload_GfxGpuLightGridTetrahedronVisibility@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxCellTreeArray
==============
*/

void __fastcall Load_GfxCellTreeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxCellTreeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_GfxDisplacementParms
==============
*/

float4 *__fastcall AllocLoad_GfxDisplacementParms()
{
  return ?AllocLoad_GfxDisplacementParms@@YAPEAUfloat4@@XZ();
}

/*
==============
Load_ProcessStructLayout_GfxWorldDrawCells
==============
*/

void Load_ProcessStructLayout_GfxWorldDrawCells(void)
{
  ?Load_ProcessStructLayout_GfxWorldDrawCells@@YAXXZ();
}

/*
==============
Postload_GfxHeightfieldArray
==============
*/

void __fastcall Postload_GfxHeightfieldArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxHeightfieldArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic366
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic366(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic366@@YAXXZ();
}

/*
==============
Preload_GfxDynamicLightsetGChunkInfoStream
==============
*/

void __fastcall Preload_GfxDynamicLightsetGChunkInfoStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxDynamicLightsetGChunkInfoStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxCompressedSunShadowParamsArray
==============
*/

void __fastcall Postload_GfxCompressedSunShadowParamsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxCompressedSunShadowParamsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_GfxWorldLightmapReindexDataElement
==============
*/

GfxWorldLightmapReindexDataElement *__fastcall AllocLoad_GfxWorldLightmapReindexDataElement()
{
  return ?AllocLoad_GfxWorldLightmapReindexDataElement@@YAPEAUGfxWorldLightmapReindexDataElement@@XZ();
}

/*
==============
Load_GfxAabbTreeStream
==============
*/

void __fastcall Load_GfxAabbTreeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxAabbTreeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxLightmapAtlasDataTempPtr
==============
*/

void __fastcall Load_GfxLightmapAtlasDataTempPtr(const DBStreamStart streamStart)
{
  ?Load_GfxLightmapAtlasDataTempPtr@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic212
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic212(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic212@@YAXXZ();
}

/*
==============
Load_ProcessStructLayout_GfxVoxelTopDownViewNode
==============
*/

void Load_ProcessStructLayout_GfxVoxelTopDownViewNode(void)
{
  ?Load_ProcessStructLayout_GfxVoxelTopDownViewNode@@YAXXZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic724
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic724(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic724@@YAXXZ();
}

/*
==============
Mark_GfxVoxelTree
==============
*/

int __fastcall Mark_GfxVoxelTree()
{
  return ?Mark_GfxVoxelTree@@YAHXZ();
}

/*
==============
Mark_LightGridVolumeTransformParamsArray
==============
*/

int __fastcall Mark_LightGridVolumeTransformParamsArray(const unsigned __int64 count)
{
  return ?Mark_LightGridVolumeTransformParamsArray@@YAH_K@Z(count);
}

/*
==============
Load_GfxCellTransientInfo
==============
*/

void __fastcall Load_GfxCellTransientInfo(const DBStreamStart streamStart)
{
  ?Load_GfxCellTransientInfo@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_GfxModelLightmapInstArray
==============
*/

void __fastcall Preload_GfxModelLightmapInstArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxModelLightmapInstArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxGpuLightGridZoneStream
==============
*/

void __fastcall Load_GfxGpuLightGridZoneStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxGpuLightGridZoneStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxCellStream
==============
*/

void __fastcall Load_GfxCellStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxCellStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic331
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic331(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic331@@YAXXZ();
}

/*
==============
Preload_GfxShadowGeometryArray
==============
*/

void __fastcall Preload_GfxShadowGeometryArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxShadowGeometryArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic536
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic536(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic536@@YAXXZ();
}

/*
==============
Preload_GfxCell
==============
*/

void __fastcall Preload_GfxCell(const DBStreamStart streamStart)
{
  ?Preload_GfxCell@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_GfxDynamicLightsetProductGIDataStream
==============
*/

void __fastcall Preload_GfxDynamicLightsetProductGIDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxDynamicLightsetProductGIDataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_mnode_tStream
==============
*/

void __fastcall Preload_mnode_tStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_mnode_tStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxGpuLightGridTransientDataStream
==============
*/

void __fastcall Postload_GfxGpuLightGridTransientDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxGpuLightGridTransientDataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_GfxWorldTransientZonePtr
==============
*/

void Load_ProcessStructLayout_GfxWorldTransientZonePtr(void)
{
  ?Load_ProcessStructLayout_GfxWorldTransientZonePtr@@YAXXZ();
}

/*
==============
Preload_GfxGpuLightGridTetrahedronNeighbors
==============
*/

void __fastcall Preload_GfxGpuLightGridTetrahedronNeighbors(const DBStreamStart streamStart)
{
  ?Preload_GfxGpuLightGridTetrahedronNeighbors@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_GfxLightGridType
==============
*/

void Load_ProcessStructLayout_GfxLightGridType(void)
{
  ?Load_ProcessStructLayout_GfxLightGridType@@YAXXZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic641
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic641(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic641@@YAXXZ();
}

/*
==============
Mark_GfxLightGridVolumeAtlasDataTempArray
==============
*/

int __fastcall Mark_GfxLightGridVolumeAtlasDataTempArray(const unsigned __int64 count)
{
  return ?Mark_GfxLightGridVolumeAtlasDataTempArray@@YAH_K@Z(count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic1063
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic1063(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic1063@@YAXXZ();
}

/*
==============
Postload_GfxDynamicLightsetBFTypeArray
==============
*/

void __fastcall Postload_GfxDynamicLightsetBFTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxDynamicLightsetBFTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxModelLightmapInstStream
==============
*/

void __fastcall Preload_GfxModelLightmapInstStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxModelLightmapInstStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_mnode_t
==============
*/

void __fastcall Preload_mnode_t(const DBStreamStart streamStart)
{
  ?Preload_mnode_t@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_GfxCompressedSunShadowDataTempPtr
==============
*/

GfxCompressedSunShadowDataTemp **__fastcall AllocPostload_GfxCompressedSunShadowDataTempPtr()
{
  return ?AllocPostload_GfxCompressedSunShadowDataTempPtr@@YAPEAPEAUGfxCompressedSunShadowDataTemp@@XZ();
}

/*
==============
Load_LightGridVolumePackingParams
==============
*/

void __fastcall Load_LightGridVolumePackingParams(const DBStreamStart streamStart)
{
  ?Load_LightGridVolumePackingParams@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxHeightfieldArray
==============
*/

void __fastcall Load_GfxHeightfieldArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxHeightfieldArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_GfxDynamicLightsetBFData
==============
*/

void Load_ProcessStructLayout_GfxDynamicLightsetBFData(void)
{
  ?Load_ProcessStructLayout_GfxDynamicLightsetBFData@@YAXXZ();
}

/*
==============
Mark_GfxCompressedSunShadowDataTemp
==============
*/

int __fastcall Mark_GfxCompressedSunShadowDataTemp()
{
  return ?Mark_GfxCompressedSunShadowDataTemp@@YAHXZ();
}

/*
==============
Mark_GfxHeightfield
==============
*/

int __fastcall Mark_GfxHeightfield()
{
  return ?Mark_GfxHeightfield@@YAHXZ();
}

/*
==============
Preload_GfxDynamicLightsetGChunkArray
==============
*/

void __fastcall Preload_GfxDynamicLightsetGChunkArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxDynamicLightsetGChunkArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_GfxDynamicLightsetLightInfo
==============
*/

GfxDynamicLightsetLightInfo *__fastcall AllocPostload_GfxDynamicLightsetLightInfo()
{
  return ?AllocPostload_GfxDynamicLightsetLightInfo@@YAPEAUGfxDynamicLightsetLightInfo@@XZ();
}

/*
==============
Preload_GfxLightGridVolumeAtlasDataTempPtr
==============
*/

void __fastcall Preload_GfxLightGridVolumeAtlasDataTempPtr(const DBStreamStart streamStart)
{
  ?Preload_GfxLightGridVolumeAtlasDataTempPtr@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_GfxWorldDraw
==============
*/

GfxWorldDraw *__fastcall AllocPreload_GfxWorldDraw()
{
  return ?AllocPreload_GfxWorldDraw@@YAPEAUGfxWorldDraw@@XZ();
}

/*
==============
AllocPostload_GfxLightAABB
==============
*/

GfxLightAABB *__fastcall AllocPostload_GfxLightAABB()
{
  return ?AllocPostload_GfxLightAABB@@YAPEAUGfxLightAABB@@XZ();
}

/*
==============
Load_GfxMayhemSelfVis
==============
*/

void __fastcall Load_GfxMayhemSelfVis(const DBStreamStart streamStart)
{
  ?Load_GfxMayhemSelfVis@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_GfxGpuLightGridZone
==============
*/

void Load_ProcessStructLayout_GfxGpuLightGridZone(void)
{
  ?Load_ProcessStructLayout_GfxGpuLightGridZone@@YAXXZ();
}

/*
==============
Mark_GfxWorldTransientZonePtrArray
==============
*/

int __fastcall Mark_GfxWorldTransientZonePtrArray(const unsigned __int64 count)
{
  return ?Mark_GfxWorldTransientZonePtrArray@@YAH_K@Z(count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic648
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic648(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic648@@YAXXZ();
}

/*
==============
Load_CheckArrayMemberGfxWorld1695
==============
*/

void Load_CheckArrayMemberGfxWorld1695(void)
{
  ?Load_CheckArrayMemberGfxWorld1695@@YAXXZ();
}

/*
==============
Load_GfxGpuLightGrid
==============
*/

void __fastcall Load_GfxGpuLightGrid(const DBStreamStart streamStart)
{
  ?Load_GfxGpuLightGrid@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_GfxMayhemSelfVis
==============
*/

int __fastcall Mark_GfxMayhemSelfVis()
{
  return ?Mark_GfxMayhemSelfVis@@YAHXZ();
}

/*
==============
Mark_GfxDynamicLightsetGChunkInfoArray
==============
*/

int __fastcall Mark_GfxDynamicLightsetGChunkInfoArray(const unsigned __int64 count)
{
  return ?Mark_GfxDynamicLightsetGChunkInfoArray@@YAH_K@Z(count);
}

/*
==============
Mark_LightGridVolumeTransformParams
==============
*/

int __fastcall Mark_LightGridVolumeTransformParams()
{
  return ?Mark_LightGridVolumeTransformParams@@YAHXZ();
}

/*
==============
Load_ProcessStructLayout_GfxStaticDecalVolumePacked
==============
*/

void Load_ProcessStructLayout_GfxStaticDecalVolumePacked(void)
{
  ?Load_ProcessStructLayout_GfxStaticDecalVolumePacked@@YAXXZ();
}

/*
==============
AllocPostload_GfxLightmapAtlasDataTempPtr
==============
*/

GfxLightmapAtlasDataTemp **__fastcall AllocPostload_GfxLightmapAtlasDataTempPtr()
{
  return ?AllocPostload_GfxLightmapAtlasDataTempPtr@@YAPEAPEAUGfxLightmapAtlasDataTemp@@XZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic564
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic564(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic564@@YAXXZ();
}

/*
==============
Preload_GfxLightViewFrustumArray
==============
*/

void __fastcall Preload_GfxLightViewFrustumArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxLightViewFrustumArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxStaticModelLightGridVolume
==============
*/

void __fastcall Postload_GfxStaticModelLightGridVolume(const DBStreamStart streamStart)
{
  ?Postload_GfxStaticModelLightGridVolume@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_BspVersion
==============
*/

int __fastcall Mark_BspVersion()
{
  return ?Mark_BspVersion@@YAHXZ();
}

/*
==============
Postload_GfxPrecomputedSkyIlluminationStream
==============
*/

void __fastcall Postload_GfxPrecomputedSkyIlluminationStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxPrecomputedSkyIlluminationStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxShadowGeometryStream
==============
*/

void __fastcall Preload_GfxShadowGeometryStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxShadowGeometryStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxLightGridTypeArray
==============
*/

void __fastcall Preload_GfxLightGridTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxLightGridTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxLightGridVolumeAtlasDataTempPtrArray
==============
*/

int __fastcall Mark_GfxLightGridVolumeAtlasDataTempPtrArray(const unsigned __int64 count)
{
  return ?Mark_GfxLightGridVolumeAtlasDataTempPtrArray@@YAH_K@Z(count);
}

/*
==============
AllocPostload_GfxWorldDpvsDynamic
==============
*/

GfxWorldDpvsDynamic *__fastcall AllocPostload_GfxWorldDpvsDynamic()
{
  return ?AllocPostload_GfxWorldDpvsDynamic@@YAPEAUGfxWorldDpvsDynamic@@XZ();
}

/*
==============
Load_GfxCompressedSunShadowParamsStream
==============
*/

void __fastcall Load_GfxCompressedSunShadowParamsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxCompressedSunShadowParamsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxLightViewFrustumStream
==============
*/

void __fastcall Postload_GfxLightViewFrustumStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxLightViewFrustumStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_GfxCompressedSunShadowParams
==============
*/

void Load_ProcessStructLayout_GfxCompressedSunShadowParams(void)
{
  ?Load_ProcessStructLayout_GfxCompressedSunShadowParams@@YAXXZ();
}

/*
==============
AllocPostload_GfxStaticModelLightGridVolumeFlags
==============
*/

GfxStaticModelLightGridVolumeFlags *__fastcall AllocPostload_GfxStaticModelLightGridVolumeFlags()
{
  return ?AllocPostload_GfxStaticModelLightGridVolumeFlags@@YAPEAW4GfxStaticModelLightGridVolumeFlags@@XZ();
}

/*
==============
Mark_GfxDynamicLightsetLightInfoArray
==============
*/

int __fastcall Mark_GfxDynamicLightsetLightInfoArray(const unsigned __int64 count)
{
  return ?Mark_GfxDynamicLightsetLightInfoArray@@YAH_K@Z(count);
}

/*
==============
Load_GfxVoxelTopDownViewNode
==============
*/

void __fastcall Load_GfxVoxelTopDownViewNode(const DBStreamStart streamStart)
{
  ?Load_GfxVoxelTopDownViewNode@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_GfxSceneDynModel
==============
*/

int __fastcall Mark_GfxSceneDynModel()
{
  return ?Mark_GfxSceneDynModel@@YAHXZ();
}

/*
==============
Preload_GfxStaticDecalVolumeUidStream
==============
*/

void __fastcall Preload_GfxStaticDecalVolumeUidStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxStaticDecalVolumeUidStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_GfxMapEntLookup
==============
*/

void Load_ProcessStructLayout_GfxMapEntLookup(void)
{
  ?Load_ProcessStructLayout_GfxMapEntLookup@@YAXXZ();
}

/*
==============
Postload_GfxGpuLightGridZone
==============
*/

void __fastcall Postload_GfxGpuLightGridZone(const DBStreamStart streamStart)
{
  ?Postload_GfxGpuLightGridZone@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_GfxWorldDrawCells
==============
*/

int __fastcall Mark_GfxWorldDrawCells()
{
  return ?Mark_GfxWorldDrawCells@@YAHXZ();
}

/*
==============
Postload_GfxDynamicLightsetProbeData
==============
*/

void __fastcall Postload_GfxDynamicLightsetProbeData(const DBStreamStart streamStart)
{
  ?Postload_GfxDynamicLightsetProbeData@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxDynamicLightsetProductGIData
==============
*/

void __fastcall Load_GfxDynamicLightsetProductGIData(const DBStreamStart streamStart)
{
  ?Load_GfxDynamicLightsetProductGIData@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic731
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic731(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic731@@YAXXZ();
}

/*
==============
AllocPreload_GfxWorld
==============
*/

GfxWorld *__fastcall AllocPreload_GfxWorld()
{
  return ?AllocPreload_GfxWorld@@YAPEAUGfxWorld@@XZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic359
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic359(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic359@@YAXXZ();
}

/*
==============
Load_ProcessStructLayout_GfxGpuLightGridTransientData
==============
*/

void Load_ProcessStructLayout_GfxGpuLightGridTransientData(void)
{
  ?Load_ProcessStructLayout_GfxGpuLightGridTransientData@@YAXXZ();
}

/*
==============
AllocPostload_GfxLightGridVolumeAtlasDataTemp
==============
*/

GfxLightGridVolumeAtlasDataTemp *__fastcall AllocPostload_GfxLightGridVolumeAtlasDataTemp()
{
  return ?AllocPostload_GfxLightGridVolumeAtlasDataTemp@@YAPEAUGfxLightGridVolumeAtlasDataTemp@@XZ();
}

/*
==============
Load_GfxLightmapAtlasDataTempPtrStream
==============
*/

void __fastcall Load_GfxLightmapAtlasDataTempPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxLightmapAtlasDataTempPtrStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxCompressedSunShadowDataTempArray
==============
*/

void __fastcall Preload_GfxCompressedSunShadowDataTempArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxCompressedSunShadowDataTempArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic268
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic268(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic268@@YAXXZ();
}

/*
==============
Preload_GfxDynamicLightsetLGppZoneInfoArray
==============
*/

void __fastcall Preload_GfxDynamicLightsetLGppZoneInfoArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxDynamicLightsetLGppZoneInfoArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_DpvsPlane
==============
*/

DpvsPlane *__fastcall AllocPostload_DpvsPlane()
{
  return ?AllocPostload_DpvsPlane@@YAPEAUDpvsPlane@@XZ();
}

/*
==============
Load_GfxDynamicLightsetGChunkStream
==============
*/

void __fastcall Load_GfxDynamicLightsetGChunkStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxDynamicLightsetGChunkStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_GfxWorldLightmapReindexData
==============
*/

void Load_ProcessStructLayout_GfxWorldLightmapReindexData(void)
{
  ?Load_ProcessStructLayout_GfxWorldLightmapReindexData@@YAXXZ();
}

/*
==============
AllocPreload_GfxDynamicLightsetProductGIData
==============
*/

GfxDynamicLightsetProductGIData *__fastcall AllocPreload_GfxDynamicLightsetProductGIData()
{
  return ?AllocPreload_GfxDynamicLightsetProductGIData@@YAPEAUGfxDynamicLightsetProductGIData@@XZ();
}

/*
==============
Preload_GfxDynamicLightsetPortalGIData
==============
*/

void __fastcall Preload_GfxDynamicLightsetPortalGIData(const DBStreamStart streamStart)
{
  ?Preload_GfxDynamicLightsetPortalGIData@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_GfxDynamicLightsetProductGIData
==============
*/

int __fastcall Mark_GfxDynamicLightsetProductGIData()
{
  return ?Mark_GfxDynamicLightsetProductGIData@@YAHXZ();
}

/*
==============
AllocLoad_GfxMayhemSelfVis
==============
*/

GfxMayhemSelfVis *__fastcall AllocLoad_GfxMayhemSelfVis()
{
  return ?AllocLoad_GfxMayhemSelfVis@@YAPEAUGfxMayhemSelfVis@@XZ();
}

/*
==============
Load_ProcessStructLayout_GfxDrawSurf
==============
*/

void Load_ProcessStructLayout_GfxDrawSurf(void)
{
  ?Load_ProcessStructLayout_GfxDrawSurf@@YAXXZ();
}

/*
==============
AllocPreload_GfxStaticModelLightGridVolumeFlags
==============
*/

GfxStaticModelLightGridVolumeFlags *__fastcall AllocPreload_GfxStaticModelLightGridVolumeFlags()
{
  return ?AllocPreload_GfxStaticModelLightGridVolumeFlags@@YAPEAW4GfxStaticModelLightGridVolumeFlags@@XZ();
}

/*
==============
Postload_GfxSceneDynModelArray
==============
*/

void __fastcall Postload_GfxSceneDynModelArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxSceneDynModelArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_GfxDecalVolumeTransientData
==============
*/

void Load_ProcessStructLayout_GfxDecalVolumeTransientData(void)
{
  ?Load_ProcessStructLayout_GfxDecalVolumeTransientData@@YAXXZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic689
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic689(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic689@@YAXXZ();
}

/*
==============
AllocPreload_StaticModelIndex
==============
*/

unsigned __int16 *__fastcall AllocPreload_StaticModelIndex()
{
  return ?AllocPreload_StaticModelIndex@@YAPEAGXZ();
}

/*
==============
Postload_DpvsPlaneStream
==============
*/

void __fastcall Postload_DpvsPlaneStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_DpvsPlaneStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxFrustumLightsArray
==============
*/

void __fastcall Postload_GfxFrustumLightsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxFrustumLightsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic950
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic950(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic950@@YAXXZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic296
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic296(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic296@@YAXXZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic865
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic865(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic865@@YAXXZ();
}

/*
==============
Load_GfxStaticDecalVolumeMask
==============
*/

void __fastcall Load_GfxStaticDecalVolumeMask(const DBStreamStart streamStart)
{
  ?Load_GfxStaticDecalVolumeMask@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxLightmapTypeArray
==============
*/

void __fastcall Load_GfxLightmapTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxLightmapTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxDynamicLightsetLMData
==============
*/

int __fastcall Mark_GfxDynamicLightsetLMData()
{
  return ?Mark_GfxDynamicLightsetLMData@@YAHXZ();
}

/*
==============
AllocPreload_GfxWorldDpvsPlanes
==============
*/

GfxWorldDpvsPlanes *__fastcall AllocPreload_GfxWorldDpvsPlanes()
{
  return ?AllocPreload_GfxWorldDpvsPlanes@@YAPEAUGfxWorldDpvsPlanes@@XZ();
}

/*
==============
AllocPostload_GfxSceneDynBrush
==============
*/

GfxSceneDynBrush *__fastcall AllocPostload_GfxSceneDynBrush()
{
  return ?AllocPostload_GfxSceneDynBrush@@YAPEAUGfxSceneDynBrush@@XZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic1035
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic1035(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic1035@@YAXXZ();
}

/*
==============
Mark_GfxSHCompressedProbeDataArray
==============
*/

int __fastcall Mark_GfxSHCompressedProbeDataArray(const unsigned __int64 count)
{
  return ?Mark_GfxSHCompressedProbeDataArray@@YAH_K@Z(count);
}

/*
==============
Load_GfxDynamicLightsetStream
==============
*/

void __fastcall Load_GfxDynamicLightsetStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxDynamicLightsetStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_GfxGpuLightGridZone
==============
*/

GfxGpuLightGridZone *__fastcall AllocPreload_GfxGpuLightGridZone()
{
  return ?AllocPreload_GfxGpuLightGridZone@@YAPEAUGfxGpuLightGridZone@@XZ();
}

/*
==============
Mark_GfxDynamicLightsetGChunkArray
==============
*/

int __fastcall Mark_GfxDynamicLightsetGChunkArray(const unsigned __int64 count)
{
  return ?Mark_GfxDynamicLightsetGChunkArray@@YAH_K@Z(count);
}

/*
==============
Preload_GfxDrawSurf
==============
*/

void __fastcall Preload_GfxDrawSurf(const DBStreamStart streamStart)
{
  ?Preload_GfxDrawSurf@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxWorldPtr
==============
*/

void __fastcall Postload_GfxWorldPtr(const DBStreamStart streamStart)
{
  ?Postload_GfxWorldPtr@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic431
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic431(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic431@@YAXXZ();
}

/*
==============
AllocLoad_UmbraGate
==============
*/

UmbraGate *__fastcall AllocLoad_UmbraGate()
{
  return ?AllocLoad_UmbraGate@@YAPEAUUmbraGate@@XZ();
}

/*
==============
Load_GfxWorld
==============
*/

void __fastcall Load_GfxWorld(const DBStreamStart streamStart)
{
  ?Load_GfxWorld@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_GfxSHCompressedProbeDataStream
==============
*/

void __fastcall Preload_GfxSHCompressedProbeDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxSHCompressedProbeDataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_GfxGpuLightGridTetrahedronNeighbors
==============
*/

void Load_ProcessStructLayout_GfxGpuLightGridTetrahedronNeighbors(void)
{
  ?Load_ProcessStructLayout_GfxGpuLightGridTetrahedronNeighbors@@YAXXZ();
}

/*
==============
Load_GfxDynamicLightsetGChunkFlags
==============
*/

void __fastcall Load_GfxDynamicLightsetGChunkFlags(const DBStreamStart streamStart)
{
  ?Load_GfxDynamicLightsetGChunkFlags@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_GfxModelLightmapInst
==============
*/

GfxModelLightmapInst *__fastcall AllocPreload_GfxModelLightmapInst()
{
  return ?AllocPreload_GfxModelLightmapInst@@YAPEAUGfxModelLightmapInst@@XZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic745
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic745(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic745@@YAXXZ();
}

/*
==============
Mark_GfxDynamicLightsetLMDataArray
==============
*/

int __fastcall Mark_GfxDynamicLightsetLMDataArray(const unsigned __int64 count)
{
  return ?Mark_GfxDynamicLightsetLMDataArray@@YAH_K@Z(count);
}

/*
==============
Preload_GfxDisplacementParmsStream
==============
*/

void __fastcall Preload_GfxDisplacementParmsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxDisplacementParmsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxDynamicLightsetGChunkFlagsStream
==============
*/

void __fastcall Load_GfxDynamicLightsetGChunkFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxDynamicLightsetGChunkFlagsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic1084
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic1084(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic1084@@YAXXZ();
}

/*
==============
Postload_GfxGpuLightGridTetrahedronVisibilityArray
==============
*/

void __fastcall Postload_GfxGpuLightGridTetrahedronVisibilityArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxGpuLightGridTetrahedronVisibilityArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxGpuDynLightsetsLGVReference
==============
*/

void __fastcall Preload_GfxGpuDynLightsetsLGVReference(const DBStreamStart streamStart)
{
  ?Preload_GfxGpuDynLightsetsLGVReference@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxWorldLightmapReindexDataStream
==============
*/

void __fastcall Load_GfxWorldLightmapReindexDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxWorldLightmapReindexDataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxAabbTreeStream
==============
*/

void __fastcall Preload_GfxAabbTreeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxAabbTreeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_umbraTomePtr_t
==============
*/

void __fastcall Preload_umbraTomePtr_t(const DBStreamStart streamStart)
{
  ?Preload_umbraTomePtr_t@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_GfxStaticDecalVolumeUidArray
==============
*/

void __fastcall Preload_GfxStaticDecalVolumeUidArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxStaticDecalVolumeUidArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxDynamicLightsetGChunkFlags
==============
*/

void __fastcall Preload_GfxDynamicLightsetGChunkFlags(const DBStreamStart streamStart)
{
  ?Preload_GfxDynamicLightsetGChunkFlags@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_GfxLightGridVolumeAtlasDataTempPtr
==============
*/

GfxLightGridVolumeAtlasDataTemp **__fastcall AllocLoad_GfxLightGridVolumeAtlasDataTempPtr()
{
  return ?AllocLoad_GfxLightGridVolumeAtlasDataTempPtr@@YAPEAPEAUGfxLightGridVolumeAtlasDataTemp@@XZ();
}

/*
==============
Mark_GfxStaticModelLightGridVolumeFlags
==============
*/

int __fastcall Mark_GfxStaticModelLightGridVolumeFlags()
{
  return ?Mark_GfxStaticModelLightGridVolumeFlags@@YAHXZ();
}

/*
==============
Load_GfxLightmapTypeStream
==============
*/

void __fastcall Load_GfxLightmapTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxLightmapTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxFrustumLights
==============
*/

void __fastcall Preload_GfxFrustumLights(const DBStreamStart streamStart)
{
  ?Preload_GfxFrustumLights@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_umbraTomePtr_t
==============
*/

void Load_ProcessStructLayout_umbraTomePtr_t(void)
{
  ?Load_ProcessStructLayout_umbraTomePtr_t@@YAXXZ();
}

/*
==============
Mark_GfxDisplacementParmsArray
==============
*/

int __fastcall Mark_GfxDisplacementParmsArray(const unsigned __int64 count)
{
  return ?Mark_GfxDisplacementParmsArray@@YAH_K@Z(count);
}

/*
==============
Preload_GfxWorldPtrStream
==============
*/

void __fastcall Preload_GfxWorldPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxWorldPtrStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic410
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic410(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic410@@YAXXZ();
}

/*
==============
Postload_umbraTomePtr_t
==============
*/

void __fastcall Postload_umbraTomePtr_t(const DBStreamStart streamStart)
{
  ?Postload_umbraTomePtr_t@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_GfxWorldPackedLightmap
==============
*/

void Load_ProcessStructLayout_GfxWorldPackedLightmap(void)
{
  ?Load_ProcessStructLayout_GfxWorldPackedLightmap@@YAXXZ();
}

/*
==============
AllocLoad_GfxStaticDecalVolumeMask
==============
*/

GfxStaticDecalVolumeMask *__fastcall AllocLoad_GfxStaticDecalVolumeMask()
{
  return ?AllocLoad_GfxStaticDecalVolumeMask@@YAPEAUGfxStaticDecalVolumeMask@@XZ();
}

/*
==============
Load_ProcessStructLayout_GfxLightAABBNode
==============
*/

void Load_ProcessStructLayout_GfxLightAABBNode(void)
{
  ?Load_ProcessStructLayout_GfxLightAABBNode@@YAXXZ();
}

/*
==============
Postload_GfxDynamicLightsetGChunkFlags
==============
*/

void __fastcall Postload_GfxDynamicLightsetGChunkFlags(const DBStreamStart streamStart)
{
  ?Postload_GfxDynamicLightsetGChunkFlags@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_DpvsPlane
==============
*/

void __fastcall Postload_DpvsPlane(const DBStreamStart streamStart)
{
  ?Postload_DpvsPlane@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_GfxCellTreeCount
==============
*/

GfxCellTreeCount *__fastcall AllocPostload_GfxCellTreeCount()
{
  return ?AllocPostload_GfxCellTreeCount@@YAPEAUGfxCellTreeCount@@XZ();
}

/*
==============
Preload_GfxGpuLightGridTransientData
==============
*/

void __fastcall Preload_GfxGpuLightGridTransientData(const DBStreamStart streamStart)
{
  ?Preload_GfxGpuLightGridTransientData@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxLightAABBNodeStream
==============
*/

void __fastcall Load_GfxLightAABBNodeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxLightAABBNodeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_LightGridVolumeTransformParamsArray
==============
*/

void __fastcall Preload_LightGridVolumeTransformParamsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_LightGridVolumeTransformParamsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxLightmapRawArray
==============
*/

int __fastcall Mark_GfxLightmapRawArray(const unsigned __int64 count)
{
  return ?Mark_GfxLightmapRawArray@@YAH_K@Z(count);
}

/*
==============
Preload_GfxWorldDpvsStatic
==============
*/

void __fastcall Preload_GfxWorldDpvsStatic(const DBStreamStart streamStart)
{
  ?Preload_GfxWorldDpvsStatic@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_GfxSceneDynModel
==============
*/

GfxSceneDynModel *__fastcall AllocPostload_GfxSceneDynModel()
{
  return ?AllocPostload_GfxSceneDynModel@@YAPEAUGfxSceneDynModel@@XZ();
}

/*
==============
AllocLoad_GfxCellTransientInfo
==============
*/

GfxCellTransientInfo *__fastcall AllocLoad_GfxCellTransientInfo()
{
  return ?AllocLoad_GfxCellTransientInfo@@YAPEAUGfxCellTransientInfo@@XZ();
}

/*
==============
Postload_GfxGpuLightGridTetrahedronNeighbors
==============
*/

void __fastcall Postload_GfxGpuLightGridTetrahedronNeighbors(const DBStreamStart streamStart)
{
  ?Postload_GfxGpuLightGridTetrahedronNeighbors@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxWorldDpvsPlaneStream
==============
*/

void __fastcall Load_GfxWorldDpvsPlaneStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxWorldDpvsPlaneStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_LightGridVolumeTransformParams
==============
*/

LightGridVolumeTransformParams *__fastcall AllocPostload_LightGridVolumeTransformParams()
{
  return ?AllocPostload_LightGridVolumeTransformParams@@YAPEAULightGridVolumeTransformParams@@XZ();
}

/*
==============
Postload_GfxShadowGeometryArray
==============
*/

void __fastcall Postload_GfxShadowGeometryArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxShadowGeometryArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxWorldLightmapReindexDataElement
==============
*/

void __fastcall Load_GfxWorldLightmapReindexDataElement(const DBStreamStart streamStart)
{
  ?Load_GfxWorldLightmapReindexDataElement@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_GfxGpuLightGridTetrahedron
==============
*/

GfxGpuLightGridTetrahedron *__fastcall AllocPreload_GfxGpuLightGridTetrahedron()
{
  return ?AllocPreload_GfxGpuLightGridTetrahedron@@YAPEAUGfxGpuLightGridTetrahedron@@XZ();
}

/*
==============
Postload_GfxDrawSurfArray
==============
*/

void __fastcall Postload_GfxDrawSurfArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxDrawSurfArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxWorldDpvsPlanesArray
==============
*/

void __fastcall Load_GfxWorldDpvsPlanesArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxWorldDpvsPlanesArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_GfxLightGridType
==============
*/

GfxLightGridType *__fastcall AllocLoad_GfxLightGridType()
{
  return ?AllocLoad_GfxLightGridType@@YAPEAW4GfxLightGridType@@XZ();
}

/*
==============
Load_GfxWorldLightmapReindexData
==============
*/

void __fastcall Load_GfxWorldLightmapReindexData(const DBStreamStart streamStart)
{
  ?Load_GfxWorldLightmapReindexData@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxStaticDecalVolumeMaskStream
==============
*/

void __fastcall Postload_GfxStaticDecalVolumeMaskStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxStaticDecalVolumeMaskStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxCellTreeCount
==============
*/

void __fastcall Postload_GfxCellTreeCount(const DBStreamStart streamStart)
{
  ?Postload_GfxCellTreeCount@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_GfxHeightfield
==============
*/

void Load_ProcessStructLayout_GfxHeightfield(void)
{
  ?Load_ProcessStructLayout_GfxHeightfield@@YAXXZ();
}

/*
==============
Postload_GfxCompressedSunShadowDataTempStream
==============
*/

void __fastcall Postload_GfxCompressedSunShadowDataTempStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxCompressedSunShadowDataTempStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_GfxWorldDpvsPlane
==============
*/

GfxWorldDpvsPlane *__fastcall AllocPostload_GfxWorldDpvsPlane()
{
  return ?AllocPostload_GfxWorldDpvsPlane@@YAPEAUGfxWorldDpvsPlane@@XZ();
}

/*
==============
AllocPostload_GfxLightGridType
==============
*/

GfxLightGridType *__fastcall AllocPostload_GfxLightGridType()
{
  return ?AllocPostload_GfxLightGridType@@YAPEAW4GfxLightGridType@@XZ();
}

/*
==============
Postload_GfxMayhemSelfVisArray
==============
*/

void __fastcall Postload_GfxMayhemSelfVisArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxMayhemSelfVisArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_GfxDynamicLightsetBFData
==============
*/

GfxDynamicLightsetBFData *__fastcall AllocLoad_GfxDynamicLightsetBFData()
{
  return ?AllocLoad_GfxDynamicLightsetBFData@@YAPEAUGfxDynamicLightsetBFData@@XZ();
}

/*
==============
Preload_GfxDecalVolumeCollectionArray
==============
*/

void __fastcall Preload_GfxDecalVolumeCollectionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxDecalVolumeCollectionArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_GfxSHProbeData
==============
*/

void Load_ProcessStructLayout_GfxSHProbeData(void)
{
  ?Load_ProcessStructLayout_GfxSHProbeData@@YAXXZ();
}

/*
==============
Preload_GfxCellTree
==============
*/

void __fastcall Preload_GfxCellTree(const DBStreamStart streamStart)
{
  ?Preload_GfxCellTree@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_umbraTomePtr_tStream
==============
*/

void __fastcall Load_umbraTomePtr_tStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_umbraTomePtr_tStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_mnode_t
==============
*/

void Load_ProcessStructLayout_mnode_t(void)
{
  ?Load_ProcessStructLayout_mnode_t@@YAXXZ();
}

/*
==============
Load_GfxCompressedSunShadowDataTemp
==============
*/

void __fastcall Load_GfxCompressedSunShadowDataTemp(const DBStreamStart streamStart)
{
  ?Load_GfxCompressedSunShadowDataTemp@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_GfxCellTreeStream
==============
*/

void __fastcall Preload_GfxCellTreeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxCellTreeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic373
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic373(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic373@@YAXXZ();
}

/*
==============
Preload_GfxGpuLightGridTetrahedronVisibilityArray
==============
*/

void __fastcall Preload_GfxGpuLightGridTetrahedronVisibilityArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxGpuLightGridTetrahedronVisibilityArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_GfxStaticDecalVolumeMaterial
==============
*/

void Load_ProcessStructLayout_GfxStaticDecalVolumeMaterial(void)
{
  ?Load_ProcessStructLayout_GfxStaticDecalVolumeMaterial@@YAXXZ();
}

/*
==============
Preload_GfxWorldDpvsDynamicStream
==============
*/

void __fastcall Preload_GfxWorldDpvsDynamicStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxWorldDpvsDynamicStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_GfxVoxelInternalNode
==============
*/

void Load_ProcessStructLayout_GfxVoxelInternalNode(void)
{
  ?Load_ProcessStructLayout_GfxVoxelInternalNode@@YAXXZ();
}

/*
==============
Preload_GfxMayhemSelfVis
==============
*/

void __fastcall Preload_GfxMayhemSelfVis(const DBStreamStart streamStart)
{
  ?Preload_GfxMayhemSelfVis@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxWorldLightmapReindexDataElementStream
==============
*/

void __fastcall Load_GfxWorldLightmapReindexDataElementStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxWorldLightmapReindexDataElementStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic240
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsDynamic240(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsDynamic240@@YAXXZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic703
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic703(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic703@@YAXXZ();
}

/*
==============
Mark_GfxVoxelTreeHeader
==============
*/

int __fastcall Mark_GfxVoxelTreeHeader()
{
  return ?Mark_GfxVoxelTreeHeader@@YAHXZ();
}

/*
==============
Postload_GfxLightmapAtlasDataTemp
==============
*/

void __fastcall Postload_GfxLightmapAtlasDataTemp(const DBStreamStart streamStart)
{
  ?Postload_GfxLightmapAtlasDataTemp@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxStaticModelLightGridVolumeFlags
==============
*/

void __fastcall Load_GfxStaticModelLightGridVolumeFlags(const DBStreamStart streamStart)
{
  ?Load_GfxStaticModelLightGridVolumeFlags@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_GfxDynamicLightsetLightInfo
==============
*/

GfxDynamicLightsetLightInfo *__fastcall AllocPreload_GfxDynamicLightsetLightInfo()
{
  return ?AllocPreload_GfxDynamicLightsetLightInfo@@YAPEAUGfxDynamicLightsetLightInfo@@XZ();
}

/*
==============
Mark_UmbraGateArray
==============
*/

int __fastcall Mark_UmbraGateArray(const unsigned __int64 count)
{
  return ?Mark_UmbraGateArray@@YAH_K@Z(count);
}

/*
==============
Mark_GfxDecalVolumeCollectionArray
==============
*/

int __fastcall Mark_GfxDecalVolumeCollectionArray(const unsigned __int64 count)
{
  return ?Mark_GfxDecalVolumeCollectionArray@@YAH_K@Z(count);
}

/*
==============
Postload_GfxLightmapType
==============
*/

void __fastcall Postload_GfxLightmapType(const DBStreamStart streamStart)
{
  ?Postload_GfxLightmapType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxStaticModelLightGridVolume
==============
*/

void __fastcall Load_GfxStaticModelLightGridVolume(const DBStreamStart streamStart)
{
  ?Load_GfxStaticModelLightGridVolume@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_GfxGpuLightGridTetrahedronArray
==============
*/

int __fastcall Mark_GfxGpuLightGridTetrahedronArray(const unsigned __int64 count)
{
  return ?Mark_GfxGpuLightGridTetrahedronArray@@YAH_K@Z(count);
}

/*
==============
Load_GfxShadowGeometry
==============
*/

void __fastcall Load_GfxShadowGeometry(const DBStreamStart streamStart)
{
  ?Load_GfxShadowGeometry@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_GfxWorldLightmapReindexDataElement
==============
*/

GfxWorldLightmapReindexDataElement *__fastcall AllocPostload_GfxWorldLightmapReindexDataElement()
{
  return ?AllocPostload_GfxWorldLightmapReindexDataElement@@YAPEAUGfxWorldLightmapReindexDataElement@@XZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic795
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic795(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic795@@YAXXZ();
}

/*
==============
Load_GfxGpuLightGridTetrahedronNeighborsStream
==============
*/

void __fastcall Load_GfxGpuLightGridTetrahedronNeighborsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxGpuLightGridTetrahedronNeighborsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxWorldPackedLightmap
==============
*/

void __fastcall Load_GfxWorldPackedLightmap(const DBStreamStart streamStart)
{
  ?Load_GfxWorldPackedLightmap@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_GfxLightAABB
==============
*/

int __fastcall Mark_GfxLightAABB()
{
  return ?Mark_GfxLightAABB@@YAHXZ();
}

/*
==============
Postload_GfxLightmapAtlasDataTempPtrStream
==============
*/

void __fastcall Postload_GfxLightmapAtlasDataTempPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxLightmapAtlasDataTempPtrStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxStaticDecalVolumeMaterial
==============
*/

void __fastcall Load_GfxStaticDecalVolumeMaterial(const DBStreamStart streamStart)
{
  ?Load_GfxStaticDecalVolumeMaterial@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_GfxDynamicLightsetProbeData
==============
*/

GfxDynamicLightsetProbeData *__fastcall AllocPreload_GfxDynamicLightsetProbeData()
{
  return ?AllocPreload_GfxDynamicLightsetProbeData@@YAPEAUGfxDynamicLightsetProbeData@@XZ();
}

/*
==============
Preload_GfxWorldDpvsPlanes
==============
*/

void __fastcall Preload_GfxWorldDpvsPlanes(const DBStreamStart streamStart)
{
  ?Preload_GfxWorldDpvsPlanes@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_GfxLightViewFrustum
==============
*/

GfxLightViewFrustum *__fastcall AllocLoad_GfxLightViewFrustum()
{
  return ?AllocLoad_GfxLightViewFrustum@@YAPEAUGfxLightViewFrustum@@XZ();
}

/*
==============
Mark_GfxGpuDynLightsetsLGVReferenceArray
==============
*/

int __fastcall Mark_GfxGpuDynLightsetsLGVReferenceArray(const unsigned __int64 count)
{
  return ?Mark_GfxGpuDynLightsetsLGVReferenceArray@@YAH_K@Z(count);
}

/*
==============
Load_GfxSHCompressedProbeData
==============
*/

void __fastcall Load_GfxSHCompressedProbeData(const DBStreamStart streamStart)
{
  ?Load_GfxSHCompressedProbeData@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxMayhemSelfVisStream
==============
*/

void __fastcall Postload_GfxMayhemSelfVisStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxMayhemSelfVisStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxDynamicLightsetGChunkInfoArray
==============
*/

void __fastcall Preload_GfxDynamicLightsetGChunkInfoArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxDynamicLightsetGChunkInfoArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxGpuDynLightsetsLGVReferenceStream
==============
*/

void __fastcall Preload_GfxGpuDynLightsetsLGVReferenceStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxGpuDynLightsetsLGVReferenceStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxWorldDrawArray
==============
*/

void __fastcall Preload_GfxWorldDrawArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxWorldDrawArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxLightGridType
==============
*/

void __fastcall Load_GfxLightGridType(const DBStreamStart streamStart)
{
  ?Load_GfxLightGridType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_GfxVoxelLeafNode
==============
*/

void Load_ProcessStructLayout_GfxVoxelLeafNode(void)
{
  ?Load_ProcessStructLayout_GfxVoxelLeafNode@@YAXXZ();
}

/*
==============
Load_GfxDisplacementParmsStream
==============
*/

void __fastcall Load_GfxDisplacementParmsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxDisplacementParmsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxLightGridTypeStream
==============
*/

void __fastcall Postload_GfxLightGridTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxLightGridTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxGpuLightGridTransientDataArray
==============
*/

int __fastcall Mark_GfxGpuLightGridTransientDataArray(const unsigned __int64 count)
{
  return ?Mark_GfxGpuLightGridTransientDataArray@@YAH_K@Z(count);
}

/*
==============
Preload_GfxMayhemSelfVisStream
==============
*/

void __fastcall Preload_GfxMayhemSelfVisStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxMayhemSelfVisStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxLightmapTypeStream
==============
*/

void __fastcall Postload_GfxLightmapTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxLightmapTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_GfxSHCompressedProbeData
==============
*/

void Load_ProcessStructLayout_GfxSHCompressedProbeData(void)
{
  ?Load_ProcessStructLayout_GfxSHCompressedProbeData@@YAXXZ();
}

/*
==============
Preload_GfxDynamicLightsetLMDataArray
==============
*/

void __fastcall Preload_GfxDynamicLightsetLMDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxDynamicLightsetLMDataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxShadowGeometryArray
==============
*/

int __fastcall Mark_GfxShadowGeometryArray(const unsigned __int64 count)
{
  return ?Mark_GfxShadowGeometryArray@@YAH_K@Z(count);
}

/*
==============
Postload_GfxWorldDpvsDynamicArray
==============
*/

void __fastcall Postload_GfxWorldDpvsDynamicArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxWorldDpvsDynamicArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_GfxWorldDpvsStatic
==============
*/

void Load_ProcessStructLayout_GfxWorldDpvsStatic(void)
{
  ?Load_ProcessStructLayout_GfxWorldDpvsStatic@@YAXXZ();
}

/*
==============
Postload_LightGridVolumeTransformParamsArray
==============
*/

void __fastcall Postload_LightGridVolumeTransformParamsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_LightGridVolumeTransformParamsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxGpuLightGridTetrahedronNeighborsArray
==============
*/

int __fastcall Mark_GfxGpuLightGridTetrahedronNeighborsArray(const unsigned __int64 count)
{
  return ?Mark_GfxGpuLightGridTetrahedronNeighborsArray@@YAH_K@Z(count);
}

/*
==============
Load_GfxWorldDrawArray
==============
*/

void __fastcall Load_GfxWorldDrawArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxWorldDrawArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_LightGridVolumePackingParams
==============
*/

LightGridVolumePackingParams *__fastcall AllocPreload_LightGridVolumePackingParams()
{
  return ?AllocPreload_LightGridVolumePackingParams@@YAPEAULightGridVolumePackingParams@@XZ();
}

/*
==============
Mark_GfxStaticDecalVolumeMask
==============
*/

int __fastcall Mark_GfxStaticDecalVolumeMask()
{
  return ?Mark_GfxStaticDecalVolumeMask@@YAHXZ();
}

/*
==============
Preload_LightGridVolumePackingParamsStream
==============
*/

void __fastcall Preload_LightGridVolumePackingParamsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_LightGridVolumePackingParamsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxCellTreeStream
==============
*/

void __fastcall Postload_GfxCellTreeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxCellTreeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxGpuLightGridTetrahedronNeighbors
==============
*/

void __fastcall Load_GfxGpuLightGridTetrahedronNeighbors(const DBStreamStart streamStart)
{
  ?Load_GfxGpuLightGridTetrahedronNeighbors@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_GfxWorldDpvsPlaneArray
==============
*/

void __fastcall Preload_GfxWorldDpvsPlaneArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxWorldDpvsPlaneArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxDrawSurfArray
==============
*/

void __fastcall Load_GfxDrawSurfArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxDrawSurfArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_GfxStaticModelLightGridVolume
==============
*/

GfxStaticModelLightGridVolume *__fastcall AllocLoad_GfxStaticModelLightGridVolume()
{
  return ?AllocLoad_GfxStaticModelLightGridVolume@@YAPEAUGfxStaticModelLightGridVolume@@XZ();
}

/*
==============
Mark_StaticModelIndexArray
==============
*/

int __fastcall Mark_StaticModelIndexArray(const unsigned __int64 count)
{
  return ?Mark_StaticModelIndexArray@@YAH_K@Z(count);
}

/*
==============
Mark_GfxWorldTransientZoneArray
==============
*/

int __fastcall Mark_GfxWorldTransientZoneArray(const unsigned __int64 count)
{
  return ?Mark_GfxWorldTransientZoneArray@@YAH_K@Z(count);
}

/*
==============
Postload_GfxGpuLightGridVoxelStartTetrahedron
==============
*/

void __fastcall Postload_GfxGpuLightGridVoxelStartTetrahedron(const DBStreamStart streamStart)
{
  ?Postload_GfxGpuLightGridVoxelStartTetrahedron@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxVoxelTreeArray
==============
*/

void __fastcall Postload_GfxVoxelTreeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxVoxelTreeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_GfxDynamicLightsetPortalGIData
==============
*/

GfxDynamicLightsetPortalGIData *__fastcall AllocPostload_GfxDynamicLightsetPortalGIData()
{
  return ?AllocPostload_GfxDynamicLightsetPortalGIData@@YAPEAUGfxDynamicLightsetPortalGIData@@XZ();
}

/*
==============
Load_GfxDecalVolumeTransientDataArray
==============
*/

void __fastcall Load_GfxDecalVolumeTransientDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxDecalVolumeTransientDataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxLightGridVolumeAtlasDataTemp
==============
*/

void __fastcall Load_GfxLightGridVolumeAtlasDataTemp(const DBStreamStart streamStart)
{
  ?Load_GfxLightGridVolumeAtlasDataTemp@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_GfxLightmapRawStream
==============
*/

void __fastcall Preload_GfxLightmapRawStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxLightmapRawStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxDynamicLightsetProductGIDataArray
==============
*/

int __fastcall Mark_GfxDynamicLightsetProductGIDataArray(const unsigned __int64 count)
{
  return ?Mark_GfxDynamicLightsetProductGIDataArray@@YAH_K@Z(count);
}

/*
==============
Preload_GfxVoxelTree
==============
*/

void __fastcall Preload_GfxVoxelTree(const DBStreamStart streamStart)
{
  ?Preload_GfxVoxelTree@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxStaticModelLightGridVolumeFlags
==============
*/

void __fastcall Postload_GfxStaticModelLightGridVolumeFlags(const DBStreamStart streamStart)
{
  ?Postload_GfxStaticModelLightGridVolumeFlags@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_mnode_tStream
==============
*/

void __fastcall Load_mnode_tStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_mnode_tStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxMayhemSelfVisArray
==============
*/

void __fastcall Load_GfxMayhemSelfVisArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxMayhemSelfVisArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_GfxDynamicLightsetLGppZoneInfo
==============
*/

GfxDynamicLightsetLGppZoneInfo *__fastcall AllocLoad_GfxDynamicLightsetLGppZoneInfo()
{
  return ?AllocLoad_GfxDynamicLightsetLGppZoneInfo@@YAPEAUGfxDynamicLightsetLGppZoneInfo@@XZ();
}

/*
==============
Mark_GfxSHProbeDataArray
==============
*/

int __fastcall Mark_GfxSHProbeDataArray(const unsigned __int64 count)
{
  return ?Mark_GfxSHProbeDataArray@@YAH_K@Z(count);
}

/*
==============
AllocPreload_GfxWorldDrawCells
==============
*/

GfxWorldDrawCells *__fastcall AllocPreload_GfxWorldDrawCells()
{
  return ?AllocPreload_GfxWorldDrawCells@@YAPEAUGfxWorldDrawCells@@XZ();
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic802
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic802(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic802@@YAXXZ();
}

/*
==============
Preload_GfxDynamicLightsetLMDataStream
==============
*/

void __fastcall Preload_GfxDynamicLightsetLMDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxDynamicLightsetLMDataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxStaticDecalVolumePacked
==============
*/

void __fastcall Postload_GfxStaticDecalVolumePacked(const DBStreamStart streamStart)
{
  ?Postload_GfxStaticDecalVolumePacked@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_GfxDecalVolumeTransientDataStream
==============
*/

void __fastcall Preload_GfxDecalVolumeTransientDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxDecalVolumeTransientDataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_GfxDynamicLightsetGChunkFlags
==============
*/

void Load_ProcessStructLayout_GfxDynamicLightsetGChunkFlags(void)
{
  ?Load_ProcessStructLayout_GfxDynamicLightsetGChunkFlags@@YAXXZ();
}

/*
==============
Mark_GfxStaticModelLightGridVolumeArray
==============
*/

int __fastcall Mark_GfxStaticModelLightGridVolumeArray(const unsigned __int64 count)
{
  return ?Mark_GfxStaticModelLightGridVolumeArray@@YAH_K@Z(count);
}

/*
==============
Preload_GfxSceneDynBrush
==============
*/

void __fastcall Preload_GfxSceneDynBrush(const DBStreamStart streamStart)
{
  ?Preload_GfxSceneDynBrush@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_GfxMapEntLookupArray
==============
*/

void __fastcall Preload_GfxMapEntLookupArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxMapEntLookupArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_BspVersionArray
==============
*/

int __fastcall Mark_BspVersionArray(const unsigned __int64 count)
{
  return ?Mark_BspVersionArray@@YAH_K@Z(count);
}

/*
==============
Mark_GfxWorld
==============
*/

int __fastcall Mark_GfxWorld()
{
  return ?Mark_GfxWorld@@YAHXZ();
}

/*
==============
Load_ProcessStructLayout_GfxDynamicLightsetBFType
==============
*/

void Load_ProcessStructLayout_GfxDynamicLightsetBFType(void)
{
  ?Load_ProcessStructLayout_GfxDynamicLightsetBFType@@YAXXZ();
}

/*
==============
Postload_GfxDynamicLightsetLMDataStream
==============
*/

void __fastcall Postload_GfxDynamicLightsetLMDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxDynamicLightsetLMDataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxLightAABBNodeArray
==============
*/

int __fastcall Mark_GfxLightAABBNodeArray(const unsigned __int64 count)
{
  return ?Mark_GfxLightAABBNodeArray@@YAH_K@Z(count);
}

/*
==============
AllocPreload_umbraTomePtr_t
==============
*/

Umbra::Tome **__fastcall AllocPreload_umbraTomePtr_t()
{
  return ?AllocPreload_umbraTomePtr_t@@YAPEAPEAVTome@Umbra@@XZ();
}

/*
==============
Preload_GfxGpuLightGridStream
==============
*/

void __fastcall Preload_GfxGpuLightGridStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxGpuLightGridStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_GfxGpuLightGridTetrahedronNeighbors
==============
*/

GfxGpuLightGridTetrahedronNeighbors *__fastcall AllocLoad_GfxGpuLightGridTetrahedronNeighbors()
{
  return ?AllocLoad_GfxGpuLightGridTetrahedronNeighbors@@YAPEAUGfxGpuLightGridTetrahedronNeighbors@@XZ();
}

/*
==============
Preload_GfxDynamicLightsetGChunkInfo
==============
*/

void __fastcall Preload_GfxDynamicLightsetGChunkInfo(const DBStreamStart streamStart)
{
  ?Preload_GfxDynamicLightsetGChunkInfo@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_GfxLightmapAtlasDataTemp
==============
*/

GfxLightmapAtlasDataTemp *__fastcall AllocPreload_GfxLightmapAtlasDataTemp()
{
  return ?AllocPreload_GfxLightmapAtlasDataTemp@@YAPEAUGfxLightmapAtlasDataTemp@@XZ();
}

/*
==============
AllocPreload_GfxDynamicLightsetGChunk
==============
*/

GfxDynamicLightsetGChunk *__fastcall AllocPreload_GfxDynamicLightsetGChunk()
{
  return ?AllocPreload_GfxDynamicLightsetGChunk@@YAPEAUGfxDynamicLightsetGChunk@@XZ();
}

/*
==============
Postload_GfxWorldDpvsPlane
==============
*/

void __fastcall Postload_GfxWorldDpvsPlane(const DBStreamStart streamStart)
{
  ?Postload_GfxWorldDpvsPlane@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxStaticModelLightGridVolumeArray
==============
*/

void __fastcall Postload_GfxStaticModelLightGridVolumeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxStaticModelLightGridVolumeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_GfxDynamicLightsetProductGIData
==============
*/

GfxDynamicLightsetProductGIData *__fastcall AllocPostload_GfxDynamicLightsetProductGIData()
{
  return ?AllocPostload_GfxDynamicLightsetProductGIData@@YAPEAUGfxDynamicLightsetProductGIData@@XZ();
}

/*
==============
Postload_GfxFrustumLightsStream
==============
*/

void __fastcall Postload_GfxFrustumLightsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxFrustumLightsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxLightAABBStream
==============
*/

void __fastcall Preload_GfxLightAABBStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxLightAABBStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxPortal
==============
*/

void __fastcall Load_GfxPortal(const DBStreamStart streamStart)
{
  ?Load_GfxPortal@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxVoxelInternalNode
==============
*/

void __fastcall Load_GfxVoxelInternalNode(const DBStreamStart streamStart)
{
  ?Load_GfxVoxelInternalNode@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_GfxDynamicLightsetLMDataStream
==============
*/

void __fastcall Load_GfxDynamicLightsetLMDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_GfxDynamicLightsetLMDataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_GfxVoxelTreeHeader
==============
*/

GfxVoxelTreeHeader *__fastcall AllocPreload_GfxVoxelTreeHeader()
{
  return ?AllocPreload_GfxVoxelTreeHeader@@YAPEAUGfxVoxelTreeHeader@@XZ();
}

/*
==============
Preload_UmbraGateArray
==============
*/

void __fastcall Preload_UmbraGateArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_UmbraGateArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic823
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic823(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic823@@YAXXZ();
}

/*
==============
Postload_GfxWorldDpvsStatic
==============
*/

void __fastcall Postload_GfxWorldDpvsStatic(const DBStreamStart streamStart)
{
  ?Postload_GfxWorldDpvsStatic@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxLightmapAtlasDataTempPtrArray
==============
*/

void __fastcall Postload_GfxLightmapAtlasDataTempPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxLightmapAtlasDataTempPtrArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxSHProbeDataStream
==============
*/

void __fastcall Postload_GfxSHProbeDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxSHProbeDataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_GfxDynamicLightsetGChunkFlagsArray
==============
*/

void __fastcall Preload_GfxDynamicLightsetGChunkFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxDynamicLightsetGChunkFlagsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxWorldTransientZonePtr
==============
*/

int __fastcall Mark_GfxWorldTransientZonePtr()
{
  return ?Mark_GfxWorldTransientZonePtr@@YAHXZ();
}

/*
==============
Load_GfxCellTree
==============
*/

void __fastcall Load_GfxCellTree(const DBStreamStart streamStart)
{
  ?Load_GfxCellTree@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic900
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic900(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic900@@YAXXZ();
}

/*
==============
Postload_GfxSceneDynBrushStream
==============
*/

void __fastcall Postload_GfxSceneDynBrushStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxSceneDynBrushStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxWorldDpvsStaticStream
==============
*/

void __fastcall Postload_GfxWorldDpvsStaticStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxWorldDpvsStaticStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_GfxVoxelTopDownViewNodeArray
==============
*/

void __fastcall Postload_GfxVoxelTopDownViewNodeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxVoxelTopDownViewNodeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_GfxDynamicLightsetPortalGIData
==============
*/

int __fastcall Mark_GfxDynamicLightsetPortalGIData()
{
  return ?Mark_GfxDynamicLightsetPortalGIData@@YAHXZ();
}

/*
==============
Mark_GfxWorldDpvsDynamicArray
==============
*/

int __fastcall Mark_GfxWorldDpvsDynamicArray(const unsigned __int64 count)
{
  return ?Mark_GfxWorldDpvsDynamicArray@@YAH_K@Z(count);
}

/*
==============
AllocPreload_GfxLightmapType
==============
*/

GfxLightmapType *__fastcall AllocPreload_GfxLightmapType()
{
  return ?AllocPreload_GfxLightmapType@@YAPEAW4GfxLightmapType@@XZ();
}

/*
==============
Postload_GfxGpuLightGridVoxelTree
==============
*/

void __fastcall Postload_GfxGpuLightGridVoxelTree(const DBStreamStart streamStart)
{
  ?Postload_GfxGpuLightGridVoxelTree@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_umbraTomePtr_tArray
==============
*/

void __fastcall Load_umbraTomePtr_tArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_umbraTomePtr_tArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_GfxGpuLightGridTetrahedron
==============
*/

GfxGpuLightGridTetrahedron *__fastcall AllocLoad_GfxGpuLightGridTetrahedron()
{
  return ?AllocLoad_GfxGpuLightGridTetrahedron@@YAPEAUGfxGpuLightGridTetrahedron@@XZ();
}

/*
==============
Postload_GfxVoxelLeafNodeArray
==============
*/

void __fastcall Postload_GfxVoxelLeafNodeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxVoxelLeafNodeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_GfxStaticModelLightGridVolume
==============
*/

void Load_ProcessStructLayout_GfxStaticModelLightGridVolume(void)
{
  ?Load_ProcessStructLayout_GfxStaticModelLightGridVolume@@YAXXZ();
}

/*
==============
Postload_GfxGpuLightGridTetrahedron
==============
*/

void __fastcall Postload_GfxGpuLightGridTetrahedron(const DBStreamStart streamStart)
{
  ?Postload_GfxGpuLightGridTetrahedron@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_GfxWorldPtr
==============
*/

GfxWorld **__fastcall AllocLoad_GfxWorldPtr()
{
  return ?AllocLoad_GfxWorldPtr@@YAPEAPEAUGfxWorld@@XZ();
}

/*
==============
Preload_GfxDynamicLightsetArray
==============
*/

void __fastcall Preload_GfxDynamicLightsetArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_GfxDynamicLightsetArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_GfxCellTreeCount
==============
*/

void __fastcall Load_GfxCellTreeCount(const DBStreamStart streamStart)
{
  ?Load_GfxCellTreeCount@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_GfxGpuLightGridTetrahedronNeighbors
==============
*/

GfxGpuLightGridTetrahedronNeighbors *__fastcall AllocPostload_GfxGpuLightGridTetrahedronNeighbors()
{
  return ?AllocPostload_GfxGpuLightGridTetrahedronNeighbors@@YAPEAUGfxGpuLightGridTetrahedronNeighbors@@XZ();
}

/*
==============
Mark_GfxVoxelTreeHeaderArray
==============
*/

int __fastcall Mark_GfxVoxelTreeHeaderArray(const unsigned __int64 count)
{
  return ?Mark_GfxVoxelTreeHeaderArray@@YAH_K@Z(count);
}

/*
==============
Preload_GfxCompressedSunShadowDataTemp
==============
*/

void __fastcall Preload_GfxCompressedSunShadowDataTemp(const DBStreamStart streamStart)
{
  ?Preload_GfxCompressedSunShadowDataTemp@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxWorldDpvsPlanesArray
==============
*/

void __fastcall Postload_GfxWorldDpvsPlanesArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_GfxWorldDpvsPlanesArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic1119
==============
*/

void Load_CheckArrayMemberGfxWorldDpvsStatic1119(void)
{
  ?Load_CheckArrayMemberGfxWorldDpvsStatic1119@@YAXXZ();
}

/*
==============
Preload_GfxWorldDpvsPlane
==============
*/

void __fastcall Preload_GfxWorldDpvsPlane(const DBStreamStart streamStart)
{
  ?Preload_GfxWorldDpvsPlane@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_GfxCompressedSunShadowDataTempPtr
==============
*/

void __fastcall Postload_GfxCompressedSunShadowDataTempPtr(const DBStreamStart streamStart)
{
  ?Postload_GfxCompressedSunShadowDataTempPtr@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_GfxCellTree
==============
*/

GfxCellTree *__fastcall AllocPreload_GfxCellTree()
{
  return ?AllocPreload_GfxCellTree@@YAPEAUGfxCellTree@@XZ();
}

/*
==============
AllocPostload_GfxWorldLightmapReindexData
==============
*/

GfxWorldLightmapReindexData *__fastcall AllocPostload_GfxWorldLightmapReindexData()
{
  return ?AllocPostload_GfxWorldLightmapReindexData@@YAPEAUGfxWorldLightmapReindexData@@XZ();
}

/*
==============
AllocLoad_BspVersion
==============
*/
BspVersion *AllocLoad_BspVersion()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (BspVersion *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_DpvsPlane
==============
*/
DpvsPlane *AllocLoad_DpvsPlane()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (DpvsPlane *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxAabbTree
==============
*/
GfxAabbTree *AllocLoad_GfxAabbTree()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxAabbTree *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxCell
==============
*/
GfxCell *AllocLoad_GfxCell()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxCell *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxCellTransientInfo
==============
*/
GfxCellTransientInfo *AllocLoad_GfxCellTransientInfo()
{
  DB_PatchMem_FixStreamAlignment(1ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxCellTransientInfo *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxCellTree
==============
*/
GfxCellTree *AllocLoad_GfxCellTree()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxCellTree *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxCellTreeCount
==============
*/
GfxCellTreeCount *AllocLoad_GfxCellTreeCount()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxCellTreeCount *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxCompressedSunShadowDataTemp
==============
*/
GfxCompressedSunShadowDataTemp *AllocLoad_GfxCompressedSunShadowDataTemp()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxCompressedSunShadowDataTemp *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxCompressedSunShadowDataTempPtr
==============
*/
GfxCompressedSunShadowDataTemp **AllocLoad_GfxCompressedSunShadowDataTempPtr()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxCompressedSunShadowDataTemp **)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxCompressedSunShadowParams
==============
*/
GfxCompressedSunShadowParams *AllocLoad_GfxCompressedSunShadowParams()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxCompressedSunShadowParams *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxDecalVolumeCollection
==============
*/
GfxDecalVolumeCollection *AllocLoad_GfxDecalVolumeCollection()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDecalVolumeCollection *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxDecalVolumeTransientData
==============
*/
GfxDecalVolumeTransientData *AllocLoad_GfxDecalVolumeTransientData()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDecalVolumeTransientData *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxDisplacementParms
==============
*/
float4 *AllocLoad_GfxDisplacementParms()
{
  DB_PatchMem_FixStreamAlignment(0x3Fui64);
  DB_CheckCanIncStreamPos(0i64);
  return (float4 *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxDrawSurf
==============
*/
GfxDrawSurf *AllocLoad_GfxDrawSurf()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDrawSurf *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxDynamicLightset
==============
*/
GfxDynamicLightset *AllocLoad_GfxDynamicLightset()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDynamicLightset *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxDynamicLightsetBFData
==============
*/
GfxDynamicLightsetBFData *AllocLoad_GfxDynamicLightsetBFData()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDynamicLightsetBFData *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxDynamicLightsetBFType
==============
*/
GfxDynamicLightsetBFType *AllocLoad_GfxDynamicLightsetBFType()
{
  DB_PatchMem_FixStreamAlignment(1ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDynamicLightsetBFType *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxDynamicLightsetGChunk
==============
*/
GfxDynamicLightsetGChunk *AllocLoad_GfxDynamicLightsetGChunk()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDynamicLightsetGChunk *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxDynamicLightsetGChunkFlags
==============
*/
GfxDynamicLightsetGChunkFlags *AllocLoad_GfxDynamicLightsetGChunkFlags()
{
  DB_PatchMem_FixStreamAlignment(1ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDynamicLightsetGChunkFlags *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxDynamicLightsetGChunkInfo
==============
*/
GfxDynamicLightsetGChunkInfo *AllocLoad_GfxDynamicLightsetGChunkInfo()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDynamicLightsetGChunkInfo *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxDynamicLightsetLGppZoneInfo
==============
*/
GfxDynamicLightsetLGppZoneInfo *AllocLoad_GfxDynamicLightsetLGppZoneInfo()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDynamicLightsetLGppZoneInfo *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxDynamicLightsetLMData
==============
*/
GfxDynamicLightsetLMData *AllocLoad_GfxDynamicLightsetLMData()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDynamicLightsetLMData *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxDynamicLightsetLightInfo
==============
*/
GfxDynamicLightsetLightInfo *AllocLoad_GfxDynamicLightsetLightInfo()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDynamicLightsetLightInfo *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxDynamicLightsetPortalGIData
==============
*/
GfxDynamicLightsetPortalGIData *AllocLoad_GfxDynamicLightsetPortalGIData()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDynamicLightsetPortalGIData *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxDynamicLightsetProbeData
==============
*/
GfxDynamicLightsetProbeData *AllocLoad_GfxDynamicLightsetProbeData()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDynamicLightsetProbeData *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxDynamicLightsetProductGIData
==============
*/
GfxDynamicLightsetProductGIData *AllocLoad_GfxDynamicLightsetProductGIData()
{
  DB_PatchMem_FixStreamAlignment(1ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDynamicLightsetProductGIData *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxFrustumLights
==============
*/
GfxFrustumLights *AllocLoad_GfxFrustumLights()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxFrustumLights *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxGpuDynLightsetsLGVReference
==============
*/
GfxGpuDynLightsetsLGVReference *AllocLoad_GfxGpuDynLightsetsLGVReference()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxGpuDynLightsetsLGVReference *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxGpuLightGrid
==============
*/
GfxGpuLightGrid *AllocLoad_GfxGpuLightGrid()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxGpuLightGrid *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxGpuLightGridTetrahedron
==============
*/
GfxGpuLightGridTetrahedron *AllocLoad_GfxGpuLightGridTetrahedron()
{
  DB_PatchMem_FixStreamAlignment(0x3Fui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxGpuLightGridTetrahedron *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxGpuLightGridTetrahedronNeighbors
==============
*/
GfxGpuLightGridTetrahedronNeighbors *AllocLoad_GfxGpuLightGridTetrahedronNeighbors()
{
  DB_PatchMem_FixStreamAlignment(0x3Fui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxGpuLightGridTetrahedronNeighbors *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxGpuLightGridTetrahedronVisibility
==============
*/
GfxGpuLightGridTetrahedronVisibility *AllocLoad_GfxGpuLightGridTetrahedronVisibility()
{
  DB_PatchMem_FixStreamAlignment(0x3Fui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxGpuLightGridTetrahedronVisibility *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxGpuLightGridTransientData
==============
*/
GfxGpuLightGridTransientData *AllocLoad_GfxGpuLightGridTransientData()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxGpuLightGridTransientData *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxGpuLightGridVoxelStartTetrahedron
==============
*/
GfxGpuLightGridVoxelStartTetrahedron *AllocLoad_GfxGpuLightGridVoxelStartTetrahedron()
{
  DB_PatchMem_FixStreamAlignment(0x3Fui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxGpuLightGridVoxelStartTetrahedron *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxGpuLightGridVoxelTree
==============
*/
GfxGpuLightGridVoxelTree *AllocLoad_GfxGpuLightGridVoxelTree()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxGpuLightGridVoxelTree *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxGpuLightGridZone
==============
*/
GfxGpuLightGridZone *AllocLoad_GfxGpuLightGridZone()
{
  DB_PatchMem_FixStreamAlignment(0x3Fui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxGpuLightGridZone *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxHeightfield
==============
*/
GfxHeightfield *AllocLoad_GfxHeightfield()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxHeightfield *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxLightAABB
==============
*/
GfxLightAABB *AllocLoad_GfxLightAABB()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxLightAABB *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxLightAABBNode
==============
*/
GfxLightAABBNode *AllocLoad_GfxLightAABBNode()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxLightAABBNode *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxLightGridType
==============
*/
GfxLightGridType *AllocLoad_GfxLightGridType()
{
  return (GfxLightGridType *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxLightGridVolumeAtlasDataTemp
==============
*/
GfxLightGridVolumeAtlasDataTemp *AllocLoad_GfxLightGridVolumeAtlasDataTemp()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxLightGridVolumeAtlasDataTemp *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxLightGridVolumeAtlasDataTempPtr
==============
*/
GfxLightGridVolumeAtlasDataTemp **AllocLoad_GfxLightGridVolumeAtlasDataTempPtr()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxLightGridVolumeAtlasDataTemp **)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxLightViewFrustum
==============
*/
GfxLightViewFrustum *AllocLoad_GfxLightViewFrustum()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxLightViewFrustum *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxLightmapAtlasDataTemp
==============
*/
GfxLightmapAtlasDataTemp *AllocLoad_GfxLightmapAtlasDataTemp()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxLightmapAtlasDataTemp *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxLightmapAtlasDataTempPtr
==============
*/
GfxLightmapAtlasDataTemp **AllocLoad_GfxLightmapAtlasDataTempPtr()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxLightmapAtlasDataTemp **)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxLightmapRaw
==============
*/
GfxLightmapRaw *AllocLoad_GfxLightmapRaw()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxLightmapRaw *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxLightmapType
==============
*/
GfxLightmapType *AllocLoad_GfxLightmapType()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxLightmapType *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxMapEntLookup
==============
*/
GfxMapEntLookup *AllocLoad_GfxMapEntLookup()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxMapEntLookup *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxMayhemSelfVis
==============
*/
GfxMayhemSelfVis *AllocLoad_GfxMayhemSelfVis()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxMayhemSelfVis *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxModelLightmapInst
==============
*/
GfxModelLightmapInst *AllocLoad_GfxModelLightmapInst()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxModelLightmapInst *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxPortal
==============
*/
GfxPortal *AllocLoad_GfxPortal()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxPortal *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxPrecomputedSkyIllumination
==============
*/
GfxPrecomputedSkyIllumination *AllocLoad_GfxPrecomputedSkyIllumination()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxPrecomputedSkyIllumination *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxSHCompressedProbeData
==============
*/
GfxSHCompressedProbeData *AllocLoad_GfxSHCompressedProbeData()
{
  DB_PatchMem_FixStreamAlignment(0x1Fui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxSHCompressedProbeData *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxSHProbeData
==============
*/
GfxSHProbeData *AllocLoad_GfxSHProbeData()
{
  DB_PatchMem_FixStreamAlignment(0x3Fui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxSHProbeData *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxSceneDynBrush
==============
*/
GfxSceneDynBrush *AllocLoad_GfxSceneDynBrush()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxSceneDynBrush *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxSceneDynModel
==============
*/
GfxSceneDynModel *AllocLoad_GfxSceneDynModel()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxSceneDynModel *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxShadowGeometry
==============
*/
GfxShadowGeometry *AllocLoad_GfxShadowGeometry()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxShadowGeometry *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxStaticDecalVolumeMask
==============
*/
GfxStaticDecalVolumeMask *AllocLoad_GfxStaticDecalVolumeMask()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxStaticDecalVolumeMask *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxStaticDecalVolumeMaterial
==============
*/
GfxStaticDecalVolumeMaterial *AllocLoad_GfxStaticDecalVolumeMaterial()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxStaticDecalVolumeMaterial *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxStaticDecalVolumePacked
==============
*/
GfxStaticDecalVolumePacked *AllocLoad_GfxStaticDecalVolumePacked()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxStaticDecalVolumePacked *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxStaticDecalVolumeUid
==============
*/
GfxStaticDecalVolumeUid *AllocLoad_GfxStaticDecalVolumeUid()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxStaticDecalVolumeUid *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxStaticModelLightGridVolume
==============
*/
GfxStaticModelLightGridVolume *AllocLoad_GfxStaticModelLightGridVolume()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxStaticModelLightGridVolume *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxStaticModelLightGridVolumeFlags
==============
*/
GfxStaticModelLightGridVolumeFlags *AllocLoad_GfxStaticModelLightGridVolumeFlags()
{
  DB_PatchMem_FixStreamAlignment(1ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxStaticModelLightGridVolumeFlags *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxVoxelInternalNode
==============
*/
GfxVoxelInternalNode *AllocLoad_GfxVoxelInternalNode()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxVoxelInternalNode *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxVoxelLeafNode
==============
*/
GfxVoxelLeafNode *AllocLoad_GfxVoxelLeafNode()
{
  DB_PatchMem_FixStreamAlignment(1ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxVoxelLeafNode *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxVoxelTopDownViewNode
==============
*/
GfxVoxelTopDownViewNode *AllocLoad_GfxVoxelTopDownViewNode()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxVoxelTopDownViewNode *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxVoxelTree
==============
*/
GfxVoxelTree *AllocLoad_GfxVoxelTree()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxVoxelTree *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxVoxelTreeHeader
==============
*/
GfxVoxelTreeHeader *AllocLoad_GfxVoxelTreeHeader()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxVoxelTreeHeader *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxWorld
==============
*/
GfxWorld *AllocLoad_GfxWorld()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxWorld *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxWorldDpvsDynamic
==============
*/
GfxWorldDpvsDynamic *AllocLoad_GfxWorldDpvsDynamic()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxWorldDpvsDynamic *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxWorldDpvsPlane
==============
*/
GfxWorldDpvsPlane *AllocLoad_GfxWorldDpvsPlane()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxWorldDpvsPlane *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxWorldDpvsPlanes
==============
*/
GfxWorldDpvsPlanes *AllocLoad_GfxWorldDpvsPlanes()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxWorldDpvsPlanes *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxWorldDpvsStatic
==============
*/
GfxWorldDpvsStatic *AllocLoad_GfxWorldDpvsStatic()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxWorldDpvsStatic *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxWorldDraw
==============
*/
GfxWorldDraw *AllocLoad_GfxWorldDraw()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxWorldDraw *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxWorldDrawCells
==============
*/
GfxWorldDrawCells *AllocLoad_GfxWorldDrawCells()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxWorldDrawCells *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxWorldLightmapImagePtrArray
==============
*/
GfxWorldLightmapImagePtrArray *AllocLoad_GfxWorldLightmapImagePtrArray()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxWorldLightmapImagePtrArray *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxWorldLightmapReindexData
==============
*/
GfxWorldLightmapReindexData *AllocLoad_GfxWorldLightmapReindexData()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxWorldLightmapReindexData *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxWorldLightmapReindexDataElement
==============
*/
GfxWorldLightmapReindexDataElement *AllocLoad_GfxWorldLightmapReindexDataElement()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxWorldLightmapReindexDataElement *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxWorldPackedLightmap
==============
*/
GfxWorldPackedLightmap *AllocLoad_GfxWorldPackedLightmap()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxWorldPackedLightmap *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxWorldPtr
==============
*/
GfxWorld **AllocLoad_GfxWorldPtr()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxWorld **)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxWorldTransientZone
==============
*/
GfxWorldTransientZone *AllocLoad_GfxWorldTransientZone()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxWorldTransientZone *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_GfxWorldTransientZonePtr
==============
*/
GfxWorldTransientZone **AllocLoad_GfxWorldTransientZonePtr()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxWorldTransientZone **)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_LightGridVolumePackingParams
==============
*/
LightGridVolumePackingParams *AllocLoad_LightGridVolumePackingParams()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (LightGridVolumePackingParams *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_LightGridVolumeTransformParams
==============
*/
LightGridVolumeTransformParams *AllocLoad_LightGridVolumeTransformParams()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (LightGridVolumeTransformParams *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_StaticModelIndex
==============
*/
unsigned __int8 *AllocLoad_StaticModelIndex()
{
  DB_PatchMem_FixStreamAlignment(1ui64);
  DB_CheckCanIncStreamPos(0i64);
  return g_streamPosGlob.pos;
}

/*
==============
AllocLoad_UmbraGate
==============
*/
UmbraGate *AllocLoad_UmbraGate()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (UmbraGate *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_mnode_t
==============
*/
mnode_t *AllocLoad_mnode_t()
{
  DB_PatchMem_FixStreamAlignment(1ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (mnode_t *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_umbraTomePtr_t
==============
*/
Umbra::Tome **AllocLoad_umbraTomePtr_t()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (Umbra::Tome **)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_BspVersion
==============
*/
BspVersion *AllocPostload_BspVersion()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (BspVersion *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_DpvsPlane
==============
*/
DpvsPlane *AllocPostload_DpvsPlane()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (DpvsPlane *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxAabbTree
==============
*/
GfxAabbTree *AllocPostload_GfxAabbTree()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxAabbTree *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxCell
==============
*/
GfxCell *AllocPostload_GfxCell()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxCell *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxCellTransientInfo
==============
*/
GfxCellTransientInfo *AllocPostload_GfxCellTransientInfo()
{
  DB_PatchMem_FixStreamAlignment(1ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxCellTransientInfo *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxCellTree
==============
*/
GfxCellTree *AllocPostload_GfxCellTree()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxCellTree *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxCellTreeCount
==============
*/
GfxCellTreeCount *AllocPostload_GfxCellTreeCount()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxCellTreeCount *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxCompressedSunShadowDataTemp
==============
*/
GfxCompressedSunShadowDataTemp *AllocPostload_GfxCompressedSunShadowDataTemp()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxCompressedSunShadowDataTemp *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxCompressedSunShadowDataTempPtr
==============
*/
GfxCompressedSunShadowDataTemp **AllocPostload_GfxCompressedSunShadowDataTempPtr()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxCompressedSunShadowDataTemp **)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxCompressedSunShadowParams
==============
*/
GfxCompressedSunShadowParams *AllocPostload_GfxCompressedSunShadowParams()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxCompressedSunShadowParams *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxDecalVolumeCollection
==============
*/
GfxDecalVolumeCollection *AllocPostload_GfxDecalVolumeCollection()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDecalVolumeCollection *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxDecalVolumeTransientData
==============
*/
GfxDecalVolumeTransientData *AllocPostload_GfxDecalVolumeTransientData()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDecalVolumeTransientData *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxDisplacementParms
==============
*/
float4 *AllocPostload_GfxDisplacementParms()
{
  DB_PatchMem_FixStreamAlignment(0x3Fui64);
  DB_CheckCanIncStreamPos(0i64);
  return (float4 *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxDrawSurf
==============
*/
GfxDrawSurf *AllocPostload_GfxDrawSurf()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDrawSurf *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxDynamicLightset
==============
*/
GfxDynamicLightset *AllocPostload_GfxDynamicLightset()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDynamicLightset *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxDynamicLightsetBFData
==============
*/
GfxDynamicLightsetBFData *AllocPostload_GfxDynamicLightsetBFData()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDynamicLightsetBFData *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxDynamicLightsetBFType
==============
*/
GfxDynamicLightsetBFType *AllocPostload_GfxDynamicLightsetBFType()
{
  DB_PatchMem_FixStreamAlignment(1ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDynamicLightsetBFType *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxDynamicLightsetGChunk
==============
*/
GfxDynamicLightsetGChunk *AllocPostload_GfxDynamicLightsetGChunk()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDynamicLightsetGChunk *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxDynamicLightsetGChunkFlags
==============
*/
GfxDynamicLightsetGChunkFlags *AllocPostload_GfxDynamicLightsetGChunkFlags()
{
  DB_PatchMem_FixStreamAlignment(1ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDynamicLightsetGChunkFlags *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxDynamicLightsetGChunkInfo
==============
*/
GfxDynamicLightsetGChunkInfo *AllocPostload_GfxDynamicLightsetGChunkInfo()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDynamicLightsetGChunkInfo *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxDynamicLightsetLGppZoneInfo
==============
*/
GfxDynamicLightsetLGppZoneInfo *AllocPostload_GfxDynamicLightsetLGppZoneInfo()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDynamicLightsetLGppZoneInfo *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxDynamicLightsetLMData
==============
*/
GfxDynamicLightsetLMData *AllocPostload_GfxDynamicLightsetLMData()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDynamicLightsetLMData *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxDynamicLightsetLightInfo
==============
*/
GfxDynamicLightsetLightInfo *AllocPostload_GfxDynamicLightsetLightInfo()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDynamicLightsetLightInfo *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxDynamicLightsetPortalGIData
==============
*/
GfxDynamicLightsetPortalGIData *AllocPostload_GfxDynamicLightsetPortalGIData()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDynamicLightsetPortalGIData *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxDynamicLightsetProbeData
==============
*/
GfxDynamicLightsetProbeData *AllocPostload_GfxDynamicLightsetProbeData()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDynamicLightsetProbeData *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxDynamicLightsetProductGIData
==============
*/
GfxDynamicLightsetProductGIData *AllocPostload_GfxDynamicLightsetProductGIData()
{
  DB_PatchMem_FixStreamAlignment(1ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDynamicLightsetProductGIData *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxFrustumLights
==============
*/
GfxFrustumLights *AllocPostload_GfxFrustumLights()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxFrustumLights *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxGpuDynLightsetsLGVReference
==============
*/
GfxGpuDynLightsetsLGVReference *AllocPostload_GfxGpuDynLightsetsLGVReference()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxGpuDynLightsetsLGVReference *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxGpuLightGrid
==============
*/
GfxGpuLightGrid *AllocPostload_GfxGpuLightGrid()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxGpuLightGrid *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxGpuLightGridTetrahedron
==============
*/
GfxGpuLightGridTetrahedron *AllocPostload_GfxGpuLightGridTetrahedron()
{
  DB_PatchMem_FixStreamAlignment(0x3Fui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxGpuLightGridTetrahedron *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxGpuLightGridTetrahedronNeighbors
==============
*/
GfxGpuLightGridTetrahedronNeighbors *AllocPostload_GfxGpuLightGridTetrahedronNeighbors()
{
  DB_PatchMem_FixStreamAlignment(0x3Fui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxGpuLightGridTetrahedronNeighbors *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxGpuLightGridTetrahedronVisibility
==============
*/
GfxGpuLightGridTetrahedronVisibility *AllocPostload_GfxGpuLightGridTetrahedronVisibility()
{
  DB_PatchMem_FixStreamAlignment(0x3Fui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxGpuLightGridTetrahedronVisibility *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxGpuLightGridTransientData
==============
*/
GfxGpuLightGridTransientData *AllocPostload_GfxGpuLightGridTransientData()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxGpuLightGridTransientData *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxGpuLightGridVoxelStartTetrahedron
==============
*/
GfxGpuLightGridVoxelStartTetrahedron *AllocPostload_GfxGpuLightGridVoxelStartTetrahedron()
{
  DB_PatchMem_FixStreamAlignment(0x3Fui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxGpuLightGridVoxelStartTetrahedron *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxGpuLightGridVoxelTree
==============
*/
GfxGpuLightGridVoxelTree *AllocPostload_GfxGpuLightGridVoxelTree()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxGpuLightGridVoxelTree *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxGpuLightGridZone
==============
*/
GfxGpuLightGridZone *AllocPostload_GfxGpuLightGridZone()
{
  DB_PatchMem_FixStreamAlignment(0x3Fui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxGpuLightGridZone *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxHeightfield
==============
*/
GfxHeightfield *AllocPostload_GfxHeightfield()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxHeightfield *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxLightAABB
==============
*/
GfxLightAABB *AllocPostload_GfxLightAABB()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxLightAABB *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxLightAABBNode
==============
*/
GfxLightAABBNode *AllocPostload_GfxLightAABBNode()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxLightAABBNode *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxLightGridType
==============
*/
GfxLightGridType *AllocPostload_GfxLightGridType()
{
  return (GfxLightGridType *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxLightGridVolumeAtlasDataTemp
==============
*/
GfxLightGridVolumeAtlasDataTemp *AllocPostload_GfxLightGridVolumeAtlasDataTemp()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxLightGridVolumeAtlasDataTemp *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxLightGridVolumeAtlasDataTempPtr
==============
*/
GfxLightGridVolumeAtlasDataTemp **AllocPostload_GfxLightGridVolumeAtlasDataTempPtr()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxLightGridVolumeAtlasDataTemp **)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxLightViewFrustum
==============
*/
GfxLightViewFrustum *AllocPostload_GfxLightViewFrustum()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxLightViewFrustum *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxLightmapAtlasDataTemp
==============
*/
GfxLightmapAtlasDataTemp *AllocPostload_GfxLightmapAtlasDataTemp()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxLightmapAtlasDataTemp *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxLightmapAtlasDataTempPtr
==============
*/
GfxLightmapAtlasDataTemp **AllocPostload_GfxLightmapAtlasDataTempPtr()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxLightmapAtlasDataTemp **)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxLightmapRaw
==============
*/
GfxLightmapRaw *AllocPostload_GfxLightmapRaw()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxLightmapRaw *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxLightmapType
==============
*/
GfxLightmapType *AllocPostload_GfxLightmapType()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxLightmapType *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxMapEntLookup
==============
*/
GfxMapEntLookup *AllocPostload_GfxMapEntLookup()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxMapEntLookup *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxMayhemSelfVis
==============
*/
GfxMayhemSelfVis *AllocPostload_GfxMayhemSelfVis()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxMayhemSelfVis *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxModelLightmapInst
==============
*/
GfxModelLightmapInst *AllocPostload_GfxModelLightmapInst()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxModelLightmapInst *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxPortal
==============
*/
GfxPortal *AllocPostload_GfxPortal()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxPortal *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxPrecomputedSkyIllumination
==============
*/
GfxPrecomputedSkyIllumination *AllocPostload_GfxPrecomputedSkyIllumination()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxPrecomputedSkyIllumination *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxSHCompressedProbeData
==============
*/
GfxSHCompressedProbeData *AllocPostload_GfxSHCompressedProbeData()
{
  DB_PatchMem_FixStreamAlignment(0x1Fui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxSHCompressedProbeData *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxSHProbeData
==============
*/
GfxSHProbeData *AllocPostload_GfxSHProbeData()
{
  DB_PatchMem_FixStreamAlignment(0x3Fui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxSHProbeData *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxSceneDynBrush
==============
*/
GfxSceneDynBrush *AllocPostload_GfxSceneDynBrush()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxSceneDynBrush *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxSceneDynModel
==============
*/
GfxSceneDynModel *AllocPostload_GfxSceneDynModel()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxSceneDynModel *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxShadowGeometry
==============
*/
GfxShadowGeometry *AllocPostload_GfxShadowGeometry()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxShadowGeometry *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxStaticDecalVolumeMask
==============
*/
GfxStaticDecalVolumeMask *AllocPostload_GfxStaticDecalVolumeMask()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxStaticDecalVolumeMask *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxStaticDecalVolumeMaterial
==============
*/
GfxStaticDecalVolumeMaterial *AllocPostload_GfxStaticDecalVolumeMaterial()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxStaticDecalVolumeMaterial *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxStaticDecalVolumePacked
==============
*/
GfxStaticDecalVolumePacked *AllocPostload_GfxStaticDecalVolumePacked()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxStaticDecalVolumePacked *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxStaticDecalVolumeUid
==============
*/
GfxStaticDecalVolumeUid *AllocPostload_GfxStaticDecalVolumeUid()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxStaticDecalVolumeUid *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxStaticModelLightGridVolume
==============
*/
GfxStaticModelLightGridVolume *AllocPostload_GfxStaticModelLightGridVolume()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxStaticModelLightGridVolume *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxStaticModelLightGridVolumeFlags
==============
*/
GfxStaticModelLightGridVolumeFlags *AllocPostload_GfxStaticModelLightGridVolumeFlags()
{
  DB_PatchMem_FixStreamAlignment(1ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxStaticModelLightGridVolumeFlags *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxVoxelInternalNode
==============
*/
GfxVoxelInternalNode *AllocPostload_GfxVoxelInternalNode()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxVoxelInternalNode *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxVoxelLeafNode
==============
*/
GfxVoxelLeafNode *AllocPostload_GfxVoxelLeafNode()
{
  DB_PatchMem_FixStreamAlignment(1ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxVoxelLeafNode *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxVoxelTopDownViewNode
==============
*/
GfxVoxelTopDownViewNode *AllocPostload_GfxVoxelTopDownViewNode()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxVoxelTopDownViewNode *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxVoxelTree
==============
*/
GfxVoxelTree *AllocPostload_GfxVoxelTree()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxVoxelTree *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxVoxelTreeHeader
==============
*/
GfxVoxelTreeHeader *AllocPostload_GfxVoxelTreeHeader()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxVoxelTreeHeader *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxWorld
==============
*/
GfxWorld *AllocPostload_GfxWorld()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxWorld *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxWorldDpvsDynamic
==============
*/
GfxWorldDpvsDynamic *AllocPostload_GfxWorldDpvsDynamic()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxWorldDpvsDynamic *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxWorldDpvsPlane
==============
*/
GfxWorldDpvsPlane *AllocPostload_GfxWorldDpvsPlane()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxWorldDpvsPlane *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxWorldDpvsPlanes
==============
*/
GfxWorldDpvsPlanes *AllocPostload_GfxWorldDpvsPlanes()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxWorldDpvsPlanes *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxWorldDpvsStatic
==============
*/
GfxWorldDpvsStatic *AllocPostload_GfxWorldDpvsStatic()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxWorldDpvsStatic *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxWorldDraw
==============
*/
GfxWorldDraw *AllocPostload_GfxWorldDraw()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxWorldDraw *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxWorldDrawCells
==============
*/
GfxWorldDrawCells *AllocPostload_GfxWorldDrawCells()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxWorldDrawCells *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxWorldLightmapImagePtrArray
==============
*/
GfxWorldLightmapImagePtrArray *AllocPostload_GfxWorldLightmapImagePtrArray()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxWorldLightmapImagePtrArray *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxWorldLightmapReindexData
==============
*/
GfxWorldLightmapReindexData *AllocPostload_GfxWorldLightmapReindexData()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxWorldLightmapReindexData *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxWorldLightmapReindexDataElement
==============
*/
GfxWorldLightmapReindexDataElement *AllocPostload_GfxWorldLightmapReindexDataElement()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxWorldLightmapReindexDataElement *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxWorldPackedLightmap
==============
*/
GfxWorldPackedLightmap *AllocPostload_GfxWorldPackedLightmap()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxWorldPackedLightmap *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxWorldPtr
==============
*/
GfxWorld **AllocPostload_GfxWorldPtr()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxWorld **)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxWorldTransientZone
==============
*/
GfxWorldTransientZone *AllocPostload_GfxWorldTransientZone()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxWorldTransientZone *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_GfxWorldTransientZonePtr
==============
*/
GfxWorldTransientZone **AllocPostload_GfxWorldTransientZonePtr()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxWorldTransientZone **)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_LightGridVolumePackingParams
==============
*/
LightGridVolumePackingParams *AllocPostload_LightGridVolumePackingParams()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (LightGridVolumePackingParams *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_LightGridVolumeTransformParams
==============
*/
LightGridVolumeTransformParams *AllocPostload_LightGridVolumeTransformParams()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (LightGridVolumeTransformParams *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_StaticModelIndex
==============
*/
unsigned __int8 *AllocPostload_StaticModelIndex()
{
  DB_PatchMem_FixStreamAlignment(1ui64);
  DB_CheckCanIncStreamPos(0i64);
  return g_streamPosGlob.pos;
}

/*
==============
AllocPostload_UmbraGate
==============
*/
UmbraGate *AllocPostload_UmbraGate()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (UmbraGate *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_mnode_t
==============
*/
mnode_t *AllocPostload_mnode_t()
{
  DB_PatchMem_FixStreamAlignment(1ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (mnode_t *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_umbraTomePtr_t
==============
*/
Umbra::Tome **AllocPostload_umbraTomePtr_t()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (Umbra::Tome **)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_BspVersion
==============
*/
BspVersion *AllocPreload_BspVersion()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (BspVersion *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_DpvsPlane
==============
*/
DpvsPlane *AllocPreload_DpvsPlane()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (DpvsPlane *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxAabbTree
==============
*/
GfxAabbTree *AllocPreload_GfxAabbTree()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxAabbTree *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxCell
==============
*/
GfxCell *AllocPreload_GfxCell()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxCell *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxCellTransientInfo
==============
*/
GfxCellTransientInfo *AllocPreload_GfxCellTransientInfo()
{
  DB_PatchMem_FixStreamAlignment(1ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxCellTransientInfo *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxCellTree
==============
*/
GfxCellTree *AllocPreload_GfxCellTree()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxCellTree *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxCellTreeCount
==============
*/
GfxCellTreeCount *AllocPreload_GfxCellTreeCount()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxCellTreeCount *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxCompressedSunShadowDataTemp
==============
*/
GfxCompressedSunShadowDataTemp *AllocPreload_GfxCompressedSunShadowDataTemp()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxCompressedSunShadowDataTemp *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxCompressedSunShadowDataTempPtr
==============
*/
GfxCompressedSunShadowDataTemp **AllocPreload_GfxCompressedSunShadowDataTempPtr()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxCompressedSunShadowDataTemp **)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxCompressedSunShadowParams
==============
*/
GfxCompressedSunShadowParams *AllocPreload_GfxCompressedSunShadowParams()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxCompressedSunShadowParams *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxDecalVolumeCollection
==============
*/
GfxDecalVolumeCollection *AllocPreload_GfxDecalVolumeCollection()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDecalVolumeCollection *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxDecalVolumeTransientData
==============
*/
GfxDecalVolumeTransientData *AllocPreload_GfxDecalVolumeTransientData()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDecalVolumeTransientData *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxDisplacementParms
==============
*/
float4 *AllocPreload_GfxDisplacementParms()
{
  DB_PatchMem_FixStreamAlignment(0x3Fui64);
  DB_CheckCanIncStreamPos(0i64);
  return (float4 *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxDrawSurf
==============
*/
GfxDrawSurf *AllocPreload_GfxDrawSurf()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDrawSurf *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxDynamicLightset
==============
*/
GfxDynamicLightset *AllocPreload_GfxDynamicLightset()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDynamicLightset *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxDynamicLightsetBFData
==============
*/
GfxDynamicLightsetBFData *AllocPreload_GfxDynamicLightsetBFData()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDynamicLightsetBFData *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxDynamicLightsetBFType
==============
*/
GfxDynamicLightsetBFType *AllocPreload_GfxDynamicLightsetBFType()
{
  DB_PatchMem_FixStreamAlignment(1ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDynamicLightsetBFType *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxDynamicLightsetGChunk
==============
*/
GfxDynamicLightsetGChunk *AllocPreload_GfxDynamicLightsetGChunk()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDynamicLightsetGChunk *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxDynamicLightsetGChunkFlags
==============
*/
GfxDynamicLightsetGChunkFlags *AllocPreload_GfxDynamicLightsetGChunkFlags()
{
  DB_PatchMem_FixStreamAlignment(1ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDynamicLightsetGChunkFlags *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxDynamicLightsetGChunkInfo
==============
*/
GfxDynamicLightsetGChunkInfo *AllocPreload_GfxDynamicLightsetGChunkInfo()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDynamicLightsetGChunkInfo *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxDynamicLightsetLGppZoneInfo
==============
*/
GfxDynamicLightsetLGppZoneInfo *AllocPreload_GfxDynamicLightsetLGppZoneInfo()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDynamicLightsetLGppZoneInfo *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxDynamicLightsetLMData
==============
*/
GfxDynamicLightsetLMData *AllocPreload_GfxDynamicLightsetLMData()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDynamicLightsetLMData *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxDynamicLightsetLightInfo
==============
*/
GfxDynamicLightsetLightInfo *AllocPreload_GfxDynamicLightsetLightInfo()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDynamicLightsetLightInfo *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxDynamicLightsetPortalGIData
==============
*/
GfxDynamicLightsetPortalGIData *AllocPreload_GfxDynamicLightsetPortalGIData()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDynamicLightsetPortalGIData *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxDynamicLightsetProbeData
==============
*/
GfxDynamicLightsetProbeData *AllocPreload_GfxDynamicLightsetProbeData()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDynamicLightsetProbeData *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxDynamicLightsetProductGIData
==============
*/
GfxDynamicLightsetProductGIData *AllocPreload_GfxDynamicLightsetProductGIData()
{
  DB_PatchMem_FixStreamAlignment(1ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxDynamicLightsetProductGIData *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxFrustumLights
==============
*/
GfxFrustumLights *AllocPreload_GfxFrustumLights()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxFrustumLights *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxGpuDynLightsetsLGVReference
==============
*/
GfxGpuDynLightsetsLGVReference *AllocPreload_GfxGpuDynLightsetsLGVReference()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxGpuDynLightsetsLGVReference *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxGpuLightGrid
==============
*/
GfxGpuLightGrid *AllocPreload_GfxGpuLightGrid()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxGpuLightGrid *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxGpuLightGridTetrahedron
==============
*/
GfxGpuLightGridTetrahedron *AllocPreload_GfxGpuLightGridTetrahedron()
{
  DB_PatchMem_FixStreamAlignment(0x3Fui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxGpuLightGridTetrahedron *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxGpuLightGridTetrahedronNeighbors
==============
*/
GfxGpuLightGridTetrahedronNeighbors *AllocPreload_GfxGpuLightGridTetrahedronNeighbors()
{
  DB_PatchMem_FixStreamAlignment(0x3Fui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxGpuLightGridTetrahedronNeighbors *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxGpuLightGridTetrahedronVisibility
==============
*/
GfxGpuLightGridTetrahedronVisibility *AllocPreload_GfxGpuLightGridTetrahedronVisibility()
{
  DB_PatchMem_FixStreamAlignment(0x3Fui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxGpuLightGridTetrahedronVisibility *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxGpuLightGridTransientData
==============
*/
GfxGpuLightGridTransientData *AllocPreload_GfxGpuLightGridTransientData()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxGpuLightGridTransientData *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxGpuLightGridVoxelStartTetrahedron
==============
*/
GfxGpuLightGridVoxelStartTetrahedron *AllocPreload_GfxGpuLightGridVoxelStartTetrahedron()
{
  DB_PatchMem_FixStreamAlignment(0x3Fui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxGpuLightGridVoxelStartTetrahedron *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxGpuLightGridVoxelTree
==============
*/
GfxGpuLightGridVoxelTree *AllocPreload_GfxGpuLightGridVoxelTree()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxGpuLightGridVoxelTree *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxGpuLightGridZone
==============
*/
GfxGpuLightGridZone *AllocPreload_GfxGpuLightGridZone()
{
  DB_PatchMem_FixStreamAlignment(0x3Fui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxGpuLightGridZone *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxHeightfield
==============
*/
GfxHeightfield *AllocPreload_GfxHeightfield()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxHeightfield *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxLightAABB
==============
*/
GfxLightAABB *AllocPreload_GfxLightAABB()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxLightAABB *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxLightAABBNode
==============
*/
GfxLightAABBNode *AllocPreload_GfxLightAABBNode()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxLightAABBNode *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxLightGridType
==============
*/
GfxLightGridType *AllocPreload_GfxLightGridType()
{
  return (GfxLightGridType *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxLightGridVolumeAtlasDataTemp
==============
*/
GfxLightGridVolumeAtlasDataTemp *AllocPreload_GfxLightGridVolumeAtlasDataTemp()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxLightGridVolumeAtlasDataTemp *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxLightGridVolumeAtlasDataTempPtr
==============
*/
GfxLightGridVolumeAtlasDataTemp **AllocPreload_GfxLightGridVolumeAtlasDataTempPtr()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxLightGridVolumeAtlasDataTemp **)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxLightViewFrustum
==============
*/
GfxLightViewFrustum *AllocPreload_GfxLightViewFrustum()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxLightViewFrustum *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxLightmapAtlasDataTemp
==============
*/
GfxLightmapAtlasDataTemp *AllocPreload_GfxLightmapAtlasDataTemp()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxLightmapAtlasDataTemp *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxLightmapAtlasDataTempPtr
==============
*/
GfxLightmapAtlasDataTemp **AllocPreload_GfxLightmapAtlasDataTempPtr()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxLightmapAtlasDataTemp **)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxLightmapRaw
==============
*/
GfxLightmapRaw *AllocPreload_GfxLightmapRaw()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxLightmapRaw *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxLightmapType
==============
*/
GfxLightmapType *AllocPreload_GfxLightmapType()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxLightmapType *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxMapEntLookup
==============
*/
GfxMapEntLookup *AllocPreload_GfxMapEntLookup()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxMapEntLookup *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxMayhemSelfVis
==============
*/
GfxMayhemSelfVis *AllocPreload_GfxMayhemSelfVis()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxMayhemSelfVis *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxModelLightmapInst
==============
*/
GfxModelLightmapInst *AllocPreload_GfxModelLightmapInst()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxModelLightmapInst *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxPortal
==============
*/
GfxPortal *AllocPreload_GfxPortal()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxPortal *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxPrecomputedSkyIllumination
==============
*/
GfxPrecomputedSkyIllumination *AllocPreload_GfxPrecomputedSkyIllumination()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxPrecomputedSkyIllumination *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxSHCompressedProbeData
==============
*/
GfxSHCompressedProbeData *AllocPreload_GfxSHCompressedProbeData()
{
  DB_PatchMem_FixStreamAlignment(0x1Fui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxSHCompressedProbeData *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxSHProbeData
==============
*/
GfxSHProbeData *AllocPreload_GfxSHProbeData()
{
  DB_PatchMem_FixStreamAlignment(0x3Fui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxSHProbeData *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxSceneDynBrush
==============
*/
GfxSceneDynBrush *AllocPreload_GfxSceneDynBrush()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxSceneDynBrush *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxSceneDynModel
==============
*/
GfxSceneDynModel *AllocPreload_GfxSceneDynModel()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxSceneDynModel *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxShadowGeometry
==============
*/
GfxShadowGeometry *AllocPreload_GfxShadowGeometry()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxShadowGeometry *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxStaticDecalVolumeMask
==============
*/
GfxStaticDecalVolumeMask *AllocPreload_GfxStaticDecalVolumeMask()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxStaticDecalVolumeMask *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxStaticDecalVolumeMaterial
==============
*/
GfxStaticDecalVolumeMaterial *AllocPreload_GfxStaticDecalVolumeMaterial()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxStaticDecalVolumeMaterial *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxStaticDecalVolumePacked
==============
*/
GfxStaticDecalVolumePacked *AllocPreload_GfxStaticDecalVolumePacked()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxStaticDecalVolumePacked *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxStaticDecalVolumeUid
==============
*/
GfxStaticDecalVolumeUid *AllocPreload_GfxStaticDecalVolumeUid()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxStaticDecalVolumeUid *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxStaticModelLightGridVolume
==============
*/
GfxStaticModelLightGridVolume *AllocPreload_GfxStaticModelLightGridVolume()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxStaticModelLightGridVolume *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxStaticModelLightGridVolumeFlags
==============
*/
GfxStaticModelLightGridVolumeFlags *AllocPreload_GfxStaticModelLightGridVolumeFlags()
{
  DB_PatchMem_FixStreamAlignment(1ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxStaticModelLightGridVolumeFlags *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxVoxelInternalNode
==============
*/
GfxVoxelInternalNode *AllocPreload_GfxVoxelInternalNode()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxVoxelInternalNode *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxVoxelLeafNode
==============
*/
GfxVoxelLeafNode *AllocPreload_GfxVoxelLeafNode()
{
  DB_PatchMem_FixStreamAlignment(1ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxVoxelLeafNode *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxVoxelTopDownViewNode
==============
*/
GfxVoxelTopDownViewNode *AllocPreload_GfxVoxelTopDownViewNode()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxVoxelTopDownViewNode *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxVoxelTree
==============
*/
GfxVoxelTree *AllocPreload_GfxVoxelTree()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxVoxelTree *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxVoxelTreeHeader
==============
*/
GfxVoxelTreeHeader *AllocPreload_GfxVoxelTreeHeader()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxVoxelTreeHeader *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxWorld
==============
*/
GfxWorld *AllocPreload_GfxWorld()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxWorld *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxWorldDpvsDynamic
==============
*/
GfxWorldDpvsDynamic *AllocPreload_GfxWorldDpvsDynamic()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxWorldDpvsDynamic *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxWorldDpvsPlane
==============
*/
GfxWorldDpvsPlane *AllocPreload_GfxWorldDpvsPlane()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxWorldDpvsPlane *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxWorldDpvsPlanes
==============
*/
GfxWorldDpvsPlanes *AllocPreload_GfxWorldDpvsPlanes()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxWorldDpvsPlanes *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxWorldDpvsStatic
==============
*/
GfxWorldDpvsStatic *AllocPreload_GfxWorldDpvsStatic()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxWorldDpvsStatic *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxWorldDraw
==============
*/
GfxWorldDraw *AllocPreload_GfxWorldDraw()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxWorldDraw *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxWorldDrawCells
==============
*/
GfxWorldDrawCells *AllocPreload_GfxWorldDrawCells()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxWorldDrawCells *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxWorldLightmapImagePtrArray
==============
*/
GfxWorldLightmapImagePtrArray *AllocPreload_GfxWorldLightmapImagePtrArray()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxWorldLightmapImagePtrArray *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxWorldLightmapReindexData
==============
*/
GfxWorldLightmapReindexData *AllocPreload_GfxWorldLightmapReindexData()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxWorldLightmapReindexData *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxWorldLightmapReindexDataElement
==============
*/
GfxWorldLightmapReindexDataElement *AllocPreload_GfxWorldLightmapReindexDataElement()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxWorldLightmapReindexDataElement *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxWorldPackedLightmap
==============
*/
GfxWorldPackedLightmap *AllocPreload_GfxWorldPackedLightmap()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxWorldPackedLightmap *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxWorldPtr
==============
*/
GfxWorld **AllocPreload_GfxWorldPtr()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxWorld **)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxWorldTransientZone
==============
*/
GfxWorldTransientZone *AllocPreload_GfxWorldTransientZone()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxWorldTransientZone *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_GfxWorldTransientZonePtr
==============
*/
GfxWorldTransientZone **AllocPreload_GfxWorldTransientZonePtr()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (GfxWorldTransientZone **)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_LightGridVolumePackingParams
==============
*/
LightGridVolumePackingParams *AllocPreload_LightGridVolumePackingParams()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (LightGridVolumePackingParams *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_LightGridVolumeTransformParams
==============
*/
LightGridVolumeTransformParams *AllocPreload_LightGridVolumeTransformParams()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (LightGridVolumeTransformParams *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_StaticModelIndex
==============
*/
unsigned __int8 *AllocPreload_StaticModelIndex()
{
  DB_PatchMem_FixStreamAlignment(1ui64);
  DB_CheckCanIncStreamPos(0i64);
  return g_streamPosGlob.pos;
}

/*
==============
AllocPreload_UmbraGate
==============
*/
UmbraGate *AllocPreload_UmbraGate()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (UmbraGate *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_mnode_t
==============
*/
mnode_t *AllocPreload_mnode_t()
{
  DB_PatchMem_FixStreamAlignment(1ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (mnode_t *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_umbraTomePtr_t
==============
*/
Umbra::Tome **AllocPreload_umbraTomePtr_t()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (Umbra::Tome **)g_streamPosGlob.pos;
}

/*
==============
Load_BspVersion
==============
*/
void Load_BspVersion(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varBspVersion, 4ui64);
}

/*
==============
Load_BspVersionArray
==============
*/
void Load_BspVersionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varBspVersion, 4 * count);
}

/*
==============
Load_BspVersionStream
==============
*/
void Load_BspVersionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 26015, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varBspVersion;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varBspVersion = (BspVersion *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_CheckArrayMemberGfxWorld1681
==============
*/
void Load_CheckArrayMemberGfxWorld1681(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorld1688
==============
*/
void Load_CheckArrayMemberGfxWorld1688(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorld1695
==============
*/
void Load_CheckArrayMemberGfxWorld1695(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorld1702
==============
*/
void Load_CheckArrayMemberGfxWorld1702(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic187
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic187(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic193
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic193(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic199
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic199(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic205
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic205(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic212
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic212(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic219
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic219(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic226
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic226(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic233
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic233(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic240
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic240(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic247
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic247(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic254
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic254(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic261
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic261(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic268
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic268(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic275
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic275(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic282
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic282(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic289
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic289(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic296
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic296(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic303
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic303(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic310
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic310(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic317
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic317(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic324
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic324(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic331
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic331(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic338
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic338(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic345
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic345(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic352
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic352(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic359
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic359(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic366
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic366(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic373
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic373(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic380
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic380(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic387
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic387(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic396
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic396(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic403
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic403(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic410
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic410(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic417
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic417(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic424
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic424(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic431
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic431(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic438
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic438(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic445
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic445(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic452
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic452(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic459
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic459(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic466
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic466(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic473
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic473(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic480
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic480(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic487
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic487(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic494
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic494(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic501
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic501(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic508
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic508(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic515
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic515(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic522
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic522(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic529
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic529(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic536
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic536(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic543
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic543(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic550
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic550(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic557
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic557(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic564
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic564(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic571
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic571(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic578
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic578(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic585
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic585(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic592
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic592(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic599
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic599(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic606
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic606(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic613
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic613(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic620
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic620(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic627
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic627(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic634
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic634(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic641
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic641(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic648
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic648(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic655
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic655(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic662
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic662(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsDynamic669
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsDynamic669(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic1000
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic1000(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic1007
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic1007(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic1014
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic1014(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic1021
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic1021(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic1028
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic1028(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic1035
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic1035(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic1042
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic1042(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic1049
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic1049(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic1056
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic1056(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic1063
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic1063(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic1070
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic1070(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic1077
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic1077(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic1084
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic1084(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic1091
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic1091(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic1098
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic1098(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic1105
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic1105(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic1112
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic1112(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic1119
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic1119(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic1126
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic1126(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic682
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic682(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic689
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic689(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic696
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic696(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic703
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic703(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic710
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic710(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic717
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic717(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic724
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic724(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic731
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic731(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic738
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic738(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic745
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic745(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic752
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic752(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic759
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic759(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic767
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic767(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic774
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic774(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic781
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic781(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic788
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic788(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic795
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic795(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic802
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic802(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic809
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic809(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic816
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic816(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic823
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic823(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic830
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic830(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic837
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic837(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic844
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic844(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic851
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic851(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic858
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic858(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic865
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic865(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic872
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic872(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic879
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic879(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic886
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic886(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic893
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic893(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic900
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic900(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic908
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic908(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic915
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic915(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic922
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic922(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic929
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic929(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic936
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic936(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic943
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic943(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic950
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic950(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic957
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic957(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic964
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic964(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic971
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic971(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic978
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic978(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic985
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic985(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberGfxWorldDpvsStatic993
==============
*/
void Load_CheckArrayMemberGfxWorldDpvsStatic993(void)
{
  ;
}

/*
==============
Load_DpvsPlane
==============
*/
void Load_DpvsPlane(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varDpvsPlane, 0x10ui64);
}

/*
==============
Load_DpvsPlaneArray
==============
*/
void Load_DpvsPlaneArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varDpvsPlane, 16 * count);
}

/*
==============
Load_DpvsPlaneStream
==============
*/
void Load_DpvsPlaneStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 11509, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varDpvsPlane;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      pos = g_streamPosGlob.pos;
      varDpvsPlane = (DpvsPlane *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxAabbTree
==============
*/
void Load_GfxAabbTree(const DBStreamStart streamStart)
{
  GfxAabbTree *v1; 
  unsigned __int16 *smodelIndexes; 
  unsigned __int16 *v3; 

  Load_Stream(streamStart, varGfxAabbTree, 0x30ui64);
  v1 = varGfxAabbTree;
  smodelIndexes = varGfxAabbTree->smodelIndexes;
  if ( smodelIndexes )
  {
    if ( smodelIndexes == (unsigned __int16 *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( smodelIndexes != (unsigned __int16 *)-2i64 )
    {
      v1->smodelIndexes = (unsigned __int16 *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varGfxAabbTree->smodelIndexes);
      return;
    }
    v3 = varStaticModelIndex;
    DB_PatchMem_FixStreamAlignment(1ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->smodelIndexes = (unsigned __int16 *)g_streamPosGlob.pos;
    varStaticModelIndex = (unsigned __int16 *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 2i64 * varGfxAabbTree->smodelIndexCount);
    varStaticModelIndex = v3;
    if ( smodelIndexes == (unsigned __int16 *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Load_GfxAabbTreeArray
==============
*/
void Load_GfxAabbTreeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxAabbTree *i; 
  GfxAabbTree *v4; 
  unsigned __int16 *smodelIndexes; 
  unsigned __int16 *v6; 

  v2 = count;
  Load_Stream(streamStart, varGfxAabbTree, 48 * count);
  for ( i = varGfxAabbTree; v2; --v2 )
  {
    varGfxAabbTree = i;
    Load_Stream(NotAtStart, i, 0x30ui64);
    v4 = varGfxAabbTree;
    smodelIndexes = varGfxAabbTree->smodelIndexes;
    if ( smodelIndexes )
    {
      if ( smodelIndexes == (unsigned __int16 *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varStaticModelIndex;
        DB_PatchMem_FixStreamAlignment(1ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->smodelIndexes = (unsigned __int16 *)g_streamPosGlob.pos;
        varStaticModelIndex = (unsigned __int16 *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 2i64 * varGfxAabbTree->smodelIndexCount);
        varStaticModelIndex = v6;
        if ( smodelIndexes == (unsigned __int16 *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( smodelIndexes == (unsigned __int16 *)-2i64 )
        goto LABEL_7;
      v4->smodelIndexes = (unsigned __int16 *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varGfxAabbTree->smodelIndexes);
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Load_GfxAabbTreeStream
==============
*/
void Load_GfxAabbTreeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxAabbTree *v4; 
  unsigned __int16 *smodelIndexes; 
  unsigned __int16 *v6; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 11933, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxAabbTree;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      v4 = varGfxAabbTree;
      smodelIndexes = varGfxAabbTree->smodelIndexes;
      if ( smodelIndexes )
      {
        if ( smodelIndexes == (unsigned __int16 *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varStaticModelIndex;
          DB_PatchMem_FixStreamAlignment(1ui64);
          DB_CheckCanIncStreamPos(0i64);
          v4->smodelIndexes = (unsigned __int16 *)g_streamPosGlob.pos;
          varStaticModelIndex = (unsigned __int16 *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 2i64 * varGfxAabbTree->smodelIndexCount);
          varStaticModelIndex = v6;
          if ( smodelIndexes == (unsigned __int16 *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( smodelIndexes == (unsigned __int16 *)-2i64 )
          goto LABEL_11;
        v4->smodelIndexes = (unsigned __int16 *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varGfxAabbTree->smodelIndexes);
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varGfxAabbTree = (GfxAabbTree *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxCell
==============
*/
void Load_GfxCell(const DBStreamStart streamStart)
{
  GfxCell *v1; 
  GfxPortal *v2; 
  __int64 portalCount; 
  GfxPortal *i; 
  GfxPortal *v5; 
  vec3_t *v6; 
  vec3_t *vec3_t; 

  Load_Stream(streamStart, varGfxCell, 0x28ui64);
  v1 = varGfxCell;
  if ( varGfxCell->portals )
  {
    v2 = varGfxPortal;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->portals = (GfxPortal *)g_streamPosGlob.pos;
    varGfxPortal = (GfxPortal *)g_streamPosGlob.pos;
    portalCount = varGfxCell->portalCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 80 * portalCount);
    for ( i = varGfxPortal; portalCount; --portalCount )
    {
      varGfxPortal = i;
      Load_Stream(NotAtStart, i, 0x50ui64);
      v5 = varGfxPortal;
      if ( varGfxPortal->vertices )
      {
        v6 = varvec3_t;
        vec3_t = AllocLoad_vec3_t();
        v5->vertices = vec3_t;
        varvec3_t = vec3_t;
        Load_vec3_tArray(AtStart, varGfxPortal->vertexCount);
        varvec3_t = v6;
      }
      ++i;
    }
    varGfxPortal = v2;
  }
}

/*
==============
Load_GfxCellArray
==============
*/
void Load_GfxCellArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxCell *i; 
  GfxCell *v4; 
  GfxPortal *v5; 
  __int64 portalCount; 
  GfxPortal *j; 
  GfxPortal *v8; 
  vec3_t *v9; 
  vec3_t *vec3_t; 

  v2 = count;
  Load_Stream(streamStart, varGfxCell, 40 * count);
  for ( i = varGfxCell; v2; --v2 )
  {
    varGfxCell = i;
    Load_Stream(NotAtStart, i, 0x28ui64);
    v4 = varGfxCell;
    if ( varGfxCell->portals )
    {
      v5 = varGfxPortal;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->portals = (GfxPortal *)g_streamPosGlob.pos;
      varGfxPortal = (GfxPortal *)g_streamPosGlob.pos;
      portalCount = varGfxCell->portalCount;
      Load_Stream(AtStart, g_streamPosGlob.pos, 80 * portalCount);
      for ( j = varGfxPortal; portalCount; --portalCount )
      {
        varGfxPortal = j;
        Load_Stream(NotAtStart, j, 0x50ui64);
        v8 = varGfxPortal;
        if ( varGfxPortal->vertices )
        {
          v9 = varvec3_t;
          vec3_t = AllocLoad_vec3_t();
          v8->vertices = vec3_t;
          varvec3_t = vec3_t;
          Load_vec3_tArray(AtStart, varGfxPortal->vertexCount);
          varvec3_t = v9;
        }
        ++j;
      }
      varGfxPortal = v5;
    }
    ++i;
  }
}

/*
==============
Load_GfxCellStream
==============
*/
void Load_GfxCellStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxCell *v4; 
  GfxPortal *v5; 
  __int64 portalCount; 
  GfxPortal *i; 
  GfxPortal *v8; 
  vec3_t *v9; 
  vec3_t *vec3_t; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 12364, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxCell;
    do
    {
      Load_Stream(AtStart, pos, 0x28ui64);
      v4 = varGfxCell;
      if ( varGfxCell->portals )
      {
        v5 = varGfxPortal;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->portals = (GfxPortal *)g_streamPosGlob.pos;
        varGfxPortal = (GfxPortal *)g_streamPosGlob.pos;
        portalCount = varGfxCell->portalCount;
        Load_Stream(AtStart, g_streamPosGlob.pos, 80 * portalCount);
        for ( i = varGfxPortal; portalCount; --portalCount )
        {
          varGfxPortal = i;
          Load_Stream(NotAtStart, i, 0x50ui64);
          v8 = varGfxPortal;
          if ( varGfxPortal->vertices )
          {
            v9 = varvec3_t;
            vec3_t = AllocLoad_vec3_t();
            v8->vertices = vec3_t;
            varvec3_t = vec3_t;
            Load_vec3_tArray(AtStart, varGfxPortal->vertexCount);
            varvec3_t = v9;
          }
          ++i;
        }
        varGfxPortal = v5;
      }
      pos = g_streamPosGlob.pos;
      varGfxCell = (GfxCell *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxCellTransientInfo
==============
*/
void Load_GfxCellTransientInfo(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxCellTransientInfo, 4ui64);
}

/*
==============
Load_GfxCellTransientInfoArray
==============
*/
void Load_GfxCellTransientInfoArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxCellTransientInfo, 4 * count);
}

/*
==============
Load_GfxCellTransientInfoStream
==============
*/
void Load_GfxCellTransientInfoStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 12237, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxCellTransientInfo;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varGfxCellTransientInfo = (GfxCellTransientInfo *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxCellTree
==============
*/
void Load_GfxCellTree(const DBStreamStart streamStart)
{
  GfxCellTree *v1; 
  GfxAabbTree *v2; 
  __int64 v3; 
  GfxAabbTree *i; 

  Load_Stream(streamStart, varGfxCellTree, 8ui64);
  v1 = varGfxCellTree;
  if ( varGfxCellTree->aabbTree )
  {
    v2 = varGfxAabbTree;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->aabbTree = (GfxAabbTree *)g_streamPosGlob.pos;
    varGfxAabbTree = (GfxAabbTree *)g_streamPosGlob.pos;
    v3 = *(unsigned int *)Load_ReadTempData(4ui64, 4ui64);
    Load_Stream(AtStart, varGfxAabbTree, 48 * v3);
    for ( i = varGfxAabbTree; v3; --v3 )
    {
      varGfxAabbTree = i;
      Load_GfxAabbTree(NotAtStart);
      ++i;
    }
    varGfxAabbTree = v2;
  }
}

/*
==============
Load_GfxCellTreeArray
==============
*/
void Load_GfxCellTreeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxCellTree *i; 
  GfxCellTree *v4; 
  GfxAabbTree *v5; 
  __int64 v6; 
  GfxAabbTree *j; 

  v2 = count;
  Load_Stream(streamStart, varGfxCellTree, 8 * count);
  for ( i = varGfxCellTree; v2; --v2 )
  {
    varGfxCellTree = i;
    Load_Stream(NotAtStart, i, 8ui64);
    v4 = varGfxCellTree;
    if ( varGfxCellTree->aabbTree )
    {
      v5 = varGfxAabbTree;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->aabbTree = (GfxAabbTree *)g_streamPosGlob.pos;
      varGfxAabbTree = (GfxAabbTree *)g_streamPosGlob.pos;
      v6 = *(unsigned int *)Load_ReadTempData(4ui64, 4ui64);
      Load_Stream(AtStart, varGfxAabbTree, 48 * v6);
      for ( j = varGfxAabbTree; v6; --v6 )
      {
        varGfxAabbTree = j;
        Load_GfxAabbTree(NotAtStart);
        ++j;
      }
      varGfxAabbTree = v5;
    }
    ++i;
  }
}

/*
==============
Load_GfxCellTreeCount
==============
*/
void Load_GfxCellTreeCount(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxCellTreeCount, 4ui64);
}

/*
==============
Load_GfxCellTreeCountArray
==============
*/
void Load_GfxCellTreeCountArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxCellTreeCount, 4 * count);
}

/*
==============
Load_GfxCellTreeCountStream
==============
*/
void Load_GfxCellTreeCountStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 12010, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxCellTreeCount;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varGfxCellTreeCount = (GfxCellTreeCount *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxCellTreeStream
==============
*/
void Load_GfxCellTreeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxCellTree *v4; 
  GfxAabbTree *v5; 
  __int64 v6; 
  GfxAabbTree *i; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 12134, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxCellTree;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      v4 = varGfxCellTree;
      if ( varGfxCellTree->aabbTree )
      {
        v5 = varGfxAabbTree;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->aabbTree = (GfxAabbTree *)g_streamPosGlob.pos;
        varGfxAabbTree = (GfxAabbTree *)g_streamPosGlob.pos;
        v6 = *(unsigned int *)Load_ReadTempData(4ui64, 4ui64);
        Load_Stream(AtStart, varGfxAabbTree, 48 * v6);
        for ( i = varGfxAabbTree; v6; --v6 )
        {
          varGfxAabbTree = i;
          Load_GfxAabbTree(NotAtStart);
          ++i;
        }
        varGfxAabbTree = v5;
      }
      pos = g_streamPosGlob.pos;
      varGfxCellTree = (GfxCellTree *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxCompressedSunShadowDataTemp
==============
*/
void Load_GfxCompressedSunShadowDataTemp(const DBStreamStart streamStart)
{
  GfxCompressedSunShadowDataTemp *v1; 
  unsigned int *v2; 
  unsigned int *uint; 
  unsigned int *v4; 
  GfxCompressedSunShadowDataTemp *v5; 
  unsigned __int8 *v6; 
  unsigned __int8 *byte; 
  GfxWrappedBuffer *v8; 
  GfxWrappedBuffer *p_tilesDataBuffer; 

  Load_Stream(streamStart, varGfxCompressedSunShadowDataTemp, 0x48ui64);
  v1 = varGfxCompressedSunShadowDataTemp;
  v2 = varuint;
  if ( varGfxCompressedSunShadowDataTemp->tilesIndices )
  {
    uint = AllocLoad_uint();
    v1->tilesIndices = uint;
    varuint = uint;
    Load_uintArray(AtStart, varGfxCompressedSunShadowDataTemp->tilesCount);
    v1 = varGfxCompressedSunShadowDataTemp;
    varuint = v2;
  }
  if ( v1->tilesOffsets )
  {
    v4 = AllocLoad_uint();
    v1->tilesOffsets = v4;
    varuint = v4;
    Load_uintArray(AtStart, varGfxCompressedSunShadowDataTemp->tilesCount);
    varuint = v2;
  }
  DB_PushStreamPos(0xAu);
  v5 = varGfxCompressedSunShadowDataTemp;
  if ( varGfxCompressedSunShadowDataTemp->tilesData )
  {
    v6 = varbyte;
    byte = AllocLoad_byte();
    v5->tilesData = byte;
    varbyte = byte;
    Load_byteArray(AtStart, varGfxCompressedSunShadowDataTemp->tilesDataSize);
    varbyte = v6;
  }
  DB_PopStreamPos();
  v8 = varGfxWrappedBuffer;
  p_tilesDataBuffer = &varGfxCompressedSunShadowDataTemp->tilesDataBuffer;
  varGfxWrappedBuffer = &varGfxCompressedSunShadowDataTemp->tilesDataBuffer;
  Load_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_tilesDataBuffer, GfxWrappedBuffer_Raw, 1u, varGfxCompressedSunShadowDataTemp->tilesDataSize, varGfxCompressedSunShadowDataTemp->tilesData, "compressedSunShadowStreamingData", 0);
  varGfxWrappedBuffer = v8;
}

/*
==============
Load_GfxCompressedSunShadowDataTempArray
==============
*/
void Load_GfxCompressedSunShadowDataTempArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxCompressedSunShadowDataTemp *i; 
  GfxCompressedSunShadowDataTemp *v4; 
  unsigned int *v5; 
  unsigned int *uint; 
  unsigned int *v7; 
  GfxCompressedSunShadowDataTemp *v8; 
  unsigned __int8 *v9; 
  unsigned __int8 *byte; 
  GfxWrappedBuffer *v11; 
  GfxWrappedBuffer *p_tilesDataBuffer; 

  v2 = count;
  Load_Stream(streamStart, varGfxCompressedSunShadowDataTemp, 72 * count);
  for ( i = varGfxCompressedSunShadowDataTemp; v2; --v2 )
  {
    varGfxCompressedSunShadowDataTemp = i;
    Load_Stream(NotAtStart, i, 0x48ui64);
    v4 = varGfxCompressedSunShadowDataTemp;
    v5 = varuint;
    if ( varGfxCompressedSunShadowDataTemp->tilesIndices )
    {
      uint = AllocLoad_uint();
      v4->tilesIndices = uint;
      varuint = uint;
      Load_uintArray(AtStart, varGfxCompressedSunShadowDataTemp->tilesCount);
      v4 = varGfxCompressedSunShadowDataTemp;
      varuint = v5;
    }
    if ( v4->tilesOffsets )
    {
      v7 = AllocLoad_uint();
      v4->tilesOffsets = v7;
      varuint = v7;
      Load_uintArray(AtStart, varGfxCompressedSunShadowDataTemp->tilesCount);
      varuint = v5;
    }
    DB_PushStreamPos(0xAu);
    v8 = varGfxCompressedSunShadowDataTemp;
    if ( varGfxCompressedSunShadowDataTemp->tilesData )
    {
      v9 = varbyte;
      byte = AllocLoad_byte();
      v8->tilesData = byte;
      varbyte = byte;
      Load_byteArray(AtStart, varGfxCompressedSunShadowDataTemp->tilesDataSize);
      varbyte = v9;
    }
    DB_PopStreamPos();
    v11 = varGfxWrappedBuffer;
    p_tilesDataBuffer = &varGfxCompressedSunShadowDataTemp->tilesDataBuffer;
    varGfxWrappedBuffer = &varGfxCompressedSunShadowDataTemp->tilesDataBuffer;
    Load_GfxWrappedBuffer(NotAtStart);
    Load_GfxWrappedBuffer(p_tilesDataBuffer, GfxWrappedBuffer_Raw, 1u, varGfxCompressedSunShadowDataTemp->tilesDataSize, varGfxCompressedSunShadowDataTemp->tilesData, "compressedSunShadowStreamingData", 0);
    ++i;
    varGfxWrappedBuffer = v11;
  }
}

/*
==============
Load_GfxCompressedSunShadowDataTempPtr
==============
*/
void Load_GfxCompressedSunShadowDataTempPtr(const DBStreamStart streamStart)
{
  GfxCompressedSunShadowDataTemp **v1; 
  GfxCompressedSunShadowDataTemp *v2; 
  unsigned __int8 *pos; 
  XZoneHandleUnique CurrentZoneLoadHandleUnique; 

  Load_Stream(streamStart, varGfxCompressedSunShadowDataTempPtr, 8ui64);
  v1 = varGfxCompressedSunShadowDataTempPtr;
  if ( *varGfxCompressedSunShadowDataTempPtr )
  {
    v2 = varGfxCompressedSunShadowDataTemp;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    pos = g_streamPosGlob.pos;
    *v1 = (GfxCompressedSunShadowDataTemp *)g_streamPosGlob.pos;
    varGfxCompressedSunShadowDataTemp = (GfxCompressedSunShadowDataTemp *)pos;
    Load_GfxCompressedSunShadowDataTemp(AtStart);
    CurrentZoneLoadHandleUnique = DB_Zones_GetCurrentZoneLoadHandleUnique();
    DB_ScheduleBackendCallback<GfxCompressedSunShadowDataTemp>(CurrentZoneLoadHandleUnique, R_CompressedSunShadow_StreamIn, varGfxCompressedSunShadowDataTemp);
    *v1 = NULL;
    varGfxCompressedSunShadowDataTemp = v2;
  }
}

/*
==============
Load_GfxCompressedSunShadowDataTempPtrArray
==============
*/
void Load_GfxCompressedSunShadowDataTempPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxCompressedSunShadowDataTemp **i; 
  GfxCompressedSunShadowDataTemp **v4; 
  GfxCompressedSunShadowDataTemp *v5; 
  XZoneHandleUnique CurrentZoneLoadHandleUnique; 
  GfxCompressedSunShadowDataTemp *v7; 
  unsigned int m_packed; 
  DB_BackendCallbackDataRingBufferAlloc v9; 
  int v10; 
  DB_BackendCallbackDataRingBufferAlloc alloc; 
  DB_BackendCallbackDataRingBufferAlloc result; 
  int v13; 

  v2 = count;
  Load_Stream(streamStart, varGfxCompressedSunShadowDataTempPtr, 8 * count);
  for ( i = varGfxCompressedSunShadowDataTempPtr; v2; --v2 )
  {
    varGfxCompressedSunShadowDataTempPtr = i;
    Load_Stream(NotAtStart, i, 8ui64);
    v4 = varGfxCompressedSunShadowDataTempPtr;
    if ( *varGfxCompressedSunShadowDataTempPtr )
    {
      v5 = varGfxCompressedSunShadowDataTemp;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      *v4 = (GfxCompressedSunShadowDataTemp *)g_streamPosGlob.pos;
      varGfxCompressedSunShadowDataTemp = (GfxCompressedSunShadowDataTemp *)g_streamPosGlob.pos;
      Load_GfxCompressedSunShadowDataTemp(AtStart);
      CurrentZoneLoadHandleUnique = DB_Zones_GetCurrentZoneLoadHandleUnique();
      v7 = varGfxCompressedSunShadowDataTemp;
      v13 = 0;
      m_packed = CurrentZoneLoadHandleUnique.m_packed;
      v9 = *DB_BackendCallbackDataRingBuffer_PreallocData(&result, 0x70u);
      v10 = v13;
      alloc = v9;
      *(_DWORD *)v9.m_data = 112;
      *((_DWORD *)v9.m_data + 1) = m_packed;
      *((_DWORD *)v9.m_data + 2) = v10;
      *((_QWORD *)v9.m_data + 2) = DB_BackendCallbackTrampoline_GfxCompressedSunShadowDataTemp_;
      *((_QWORD *)v9.m_data + 3) = 0i64;
      *((_QWORD *)v9.m_data + 4) = R_CompressedSunShadow_StreamIn;
      *(GfxCompressedSunShadowDataTemp *)(v9.m_data + 40) = *v7;
      DB_BackendCallbackDataRingBuffer_Queue(&alloc);
      *v4 = NULL;
      varGfxCompressedSunShadowDataTemp = v5;
    }
    ++i;
  }
}

/*
==============
Load_GfxCompressedSunShadowDataTempPtrStream
==============
*/
void Load_GfxCompressedSunShadowDataTempPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxCompressedSunShadowDataTemp **v4; 
  GfxCompressedSunShadowDataTemp *v5; 
  XZoneHandleUnique CurrentZoneLoadHandleUnique; 
  GfxCompressedSunShadowDataTemp *v7; 
  unsigned int m_packed; 
  DB_BackendCallbackDataRingBufferAlloc v9; 
  int v10; 
  DB_BackendCallbackDataRingBufferAlloc alloc; 
  DB_BackendCallbackDataRingBufferAlloc result; 
  int v13; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 21033, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxCompressedSunShadowDataTempPtr;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      v4 = varGfxCompressedSunShadowDataTempPtr;
      if ( *varGfxCompressedSunShadowDataTempPtr )
      {
        v5 = varGfxCompressedSunShadowDataTemp;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        *v4 = (GfxCompressedSunShadowDataTemp *)g_streamPosGlob.pos;
        varGfxCompressedSunShadowDataTemp = (GfxCompressedSunShadowDataTemp *)g_streamPosGlob.pos;
        Load_GfxCompressedSunShadowDataTemp(AtStart);
        CurrentZoneLoadHandleUnique = DB_Zones_GetCurrentZoneLoadHandleUnique();
        v7 = varGfxCompressedSunShadowDataTemp;
        v13 = 0;
        m_packed = CurrentZoneLoadHandleUnique.m_packed;
        v9 = *DB_BackendCallbackDataRingBuffer_PreallocData(&result, 0x70u);
        v10 = v13;
        alloc = v9;
        *(_DWORD *)v9.m_data = 112;
        *((_DWORD *)v9.m_data + 1) = m_packed;
        *((_DWORD *)v9.m_data + 2) = v10;
        *((_QWORD *)v9.m_data + 2) = DB_BackendCallbackTrampoline_GfxCompressedSunShadowDataTemp_;
        *((_QWORD *)v9.m_data + 3) = 0i64;
        *((_QWORD *)v9.m_data + 4) = R_CompressedSunShadow_StreamIn;
        *(GfxCompressedSunShadowDataTemp *)(v9.m_data + 40) = *v7;
        DB_BackendCallbackDataRingBuffer_Queue(&alloc);
        *v4 = NULL;
        varGfxCompressedSunShadowDataTemp = v5;
      }
      pos = g_streamPosGlob.pos;
      varGfxCompressedSunShadowDataTempPtr = (GfxCompressedSunShadowDataTemp **)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxCompressedSunShadowDataTempStream
==============
*/
void Load_GfxCompressedSunShadowDataTempStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxCompressedSunShadowDataTemp *v4; 
  unsigned int *v5; 
  unsigned int *uint; 
  unsigned int *v7; 
  GfxCompressedSunShadowDataTemp *v8; 
  unsigned __int8 *v9; 
  unsigned __int8 *byte; 
  GfxWrappedBuffer *v11; 
  GfxWrappedBuffer *p_tilesDataBuffer; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 20948, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxCompressedSunShadowDataTemp;
    do
    {
      Load_Stream(AtStart, pos, 0x48ui64);
      v4 = varGfxCompressedSunShadowDataTemp;
      v5 = varuint;
      if ( varGfxCompressedSunShadowDataTemp->tilesIndices )
      {
        uint = AllocLoad_uint();
        v4->tilesIndices = uint;
        varuint = uint;
        Load_uintArray(AtStart, varGfxCompressedSunShadowDataTemp->tilesCount);
        v4 = varGfxCompressedSunShadowDataTemp;
        varuint = v5;
      }
      if ( v4->tilesOffsets )
      {
        v7 = AllocLoad_uint();
        v4->tilesOffsets = v7;
        varuint = v7;
        Load_uintArray(AtStart, varGfxCompressedSunShadowDataTemp->tilesCount);
        varuint = v5;
      }
      DB_PushStreamPos(0xAu);
      v8 = varGfxCompressedSunShadowDataTemp;
      if ( varGfxCompressedSunShadowDataTemp->tilesData )
      {
        v9 = varbyte;
        byte = AllocLoad_byte();
        v8->tilesData = byte;
        varbyte = byte;
        Load_byteArray(AtStart, varGfxCompressedSunShadowDataTemp->tilesDataSize);
        varbyte = v9;
      }
      DB_PopStreamPos();
      v11 = varGfxWrappedBuffer;
      p_tilesDataBuffer = &varGfxCompressedSunShadowDataTemp->tilesDataBuffer;
      varGfxWrappedBuffer = &varGfxCompressedSunShadowDataTemp->tilesDataBuffer;
      Load_GfxWrappedBuffer(NotAtStart);
      Load_GfxWrappedBuffer(p_tilesDataBuffer, GfxWrappedBuffer_Raw, 1u, varGfxCompressedSunShadowDataTemp->tilesDataSize, varGfxCompressedSunShadowDataTemp->tilesData, "compressedSunShadowStreamingData", 0);
      pos = g_streamPosGlob.pos;
      varGfxCompressedSunShadowDataTemp = (GfxCompressedSunShadowDataTemp *)g_streamPosGlob.pos;
      varGfxWrappedBuffer = v11;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxCompressedSunShadowParams
==============
*/
void Load_GfxCompressedSunShadowParams(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxCompressedSunShadowParams, 0x30ui64);
}

/*
==============
Load_GfxCompressedSunShadowParamsArray
==============
*/
void Load_GfxCompressedSunShadowParamsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxCompressedSunShadowParams, 48 * count);
}

/*
==============
Load_GfxCompressedSunShadowParamsStream
==============
*/
void Load_GfxCompressedSunShadowParamsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 23806, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxCompressedSunShadowParams;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      pos = g_streamPosGlob.pos;
      varGfxCompressedSunShadowParams = (GfxCompressedSunShadowParams *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxDecalVolumeCollection
==============
*/
void Load_GfxDecalVolumeCollection(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxDecalVolumeCollection, 8ui64);
}

/*
==============
Load_GfxDecalVolumeCollectionArray
==============
*/
void Load_GfxDecalVolumeCollectionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxDecalVolumeCollection, 8 * count);
}

/*
==============
Load_GfxDecalVolumeCollectionStream
==============
*/
void Load_GfxDecalVolumeCollectionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 23518, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxDecalVolumeCollection;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      pos = g_streamPosGlob.pos;
      varGfxDecalVolumeCollection = (GfxDecalVolumeCollection *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxDecalVolumeTransientData
==============
*/
void Load_GfxDecalVolumeTransientData(const DBStreamStart streamStart)
{
  GfxDecalVolumeTransientData *v1; 
  GfxStaticDecalVolumePacked *decalVolumes; 
  GfxStaticDecalVolumePacked *v3; 
  GfxWrappedBuffer *v4; 
  GfxWrappedBuffer *p_decalVolumesBuffer; 
  GfxDecalVolumeTransientData *v6; 
  Bounds *v7; 
  Bounds *Bounds; 
  GfxStaticDecalVolumeUid *v9; 

  Load_Stream(streamStart, varGfxDecalVolumeTransientData, 0x40ui64);
  DB_PushStreamPos(7u);
  v1 = varGfxDecalVolumeTransientData;
  decalVolumes = varGfxDecalVolumeTransientData->decalVolumes;
  if ( decalVolumes )
  {
    if ( decalVolumes == (GfxStaticDecalVolumePacked *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( decalVolumes != (GfxStaticDecalVolumePacked *)-2i64 )
    {
      v1->decalVolumes = (GfxStaticDecalVolumePacked *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varGfxDecalVolumeTransientData->decalVolumes);
      goto LABEL_8;
    }
    v3 = varGfxStaticDecalVolumePacked;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->decalVolumes = (GfxStaticDecalVolumePacked *)g_streamPosGlob.pos;
    varGfxStaticDecalVolumePacked = (GfxStaticDecalVolumePacked *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 44i64 * varGfxDecalVolumeTransientData->decalVolumeCount);
    varGfxStaticDecalVolumePacked = v3;
    if ( decalVolumes == (GfxStaticDecalVolumePacked *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  DB_PopStreamPos();
  v4 = varGfxWrappedBuffer;
  p_decalVolumesBuffer = &varGfxDecalVolumeTransientData->decalVolumesBuffer;
  varGfxWrappedBuffer = &varGfxDecalVolumeTransientData->decalVolumesBuffer;
  Load_GfxWrappedBuffer(NotAtStart);
  Load_DecalVolumesBuffer(p_decalVolumesBuffer, varGfxDecalVolumeTransientData);
  varGfxWrappedBuffer = v4;
  v6 = varGfxDecalVolumeTransientData;
  if ( varGfxDecalVolumeTransientData->collectionBounds )
  {
    v7 = varBounds;
    Bounds = AllocLoad_Bounds();
    v6->collectionBounds = Bounds;
    varBounds = Bounds;
    Load_BoundsArray(AtStart, varGfxDecalVolumeTransientData->collectionCount);
    v6 = varGfxDecalVolumeTransientData;
    varBounds = v7;
  }
  if ( v6->decalVolumeUids )
  {
    v9 = varGfxStaticDecalVolumeUid;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v6->decalVolumeUids = (GfxStaticDecalVolumeUid *)g_streamPosGlob.pos;
    varGfxStaticDecalVolumeUid = (GfxStaticDecalVolumeUid *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 4i64 * varGfxDecalVolumeTransientData->decalVolumeCount);
    varGfxStaticDecalVolumeUid = v9;
  }
}

/*
==============
Load_GfxDecalVolumeTransientDataArray
==============
*/
void Load_GfxDecalVolumeTransientDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxDecalVolumeTransientData *i; 
  GfxDecalVolumeTransientData *v4; 
  GfxStaticDecalVolumePacked *decalVolumes; 
  GfxStaticDecalVolumePacked *v6; 
  GfxWrappedBuffer *v7; 
  GfxWrappedBuffer *p_decalVolumesBuffer; 
  GfxDecalVolumeTransientData *v9; 
  Bounds *v10; 
  Bounds *Bounds; 
  GfxStaticDecalVolumeUid *v12; 

  v2 = count;
  Load_Stream(streamStart, varGfxDecalVolumeTransientData, count << 6);
  for ( i = varGfxDecalVolumeTransientData; v2; --v2 )
  {
    varGfxDecalVolumeTransientData = i;
    Load_Stream(NotAtStart, i, 0x40ui64);
    DB_PushStreamPos(7u);
    v4 = varGfxDecalVolumeTransientData;
    decalVolumes = varGfxDecalVolumeTransientData->decalVolumes;
    if ( decalVolumes )
    {
      if ( decalVolumes == (GfxStaticDecalVolumePacked *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varGfxStaticDecalVolumePacked;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->decalVolumes = (GfxStaticDecalVolumePacked *)g_streamPosGlob.pos;
        varGfxStaticDecalVolumePacked = (GfxStaticDecalVolumePacked *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 44i64 * varGfxDecalVolumeTransientData->decalVolumeCount);
        varGfxStaticDecalVolumePacked = v6;
        if ( decalVolumes == (GfxStaticDecalVolumePacked *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( decalVolumes == (GfxStaticDecalVolumePacked *)-2i64 )
        goto LABEL_7;
      v4->decalVolumes = (GfxStaticDecalVolumePacked *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varGfxDecalVolumeTransientData->decalVolumes);
    }
LABEL_9:
    DB_PopStreamPos();
    v7 = varGfxWrappedBuffer;
    p_decalVolumesBuffer = &varGfxDecalVolumeTransientData->decalVolumesBuffer;
    varGfxWrappedBuffer = &varGfxDecalVolumeTransientData->decalVolumesBuffer;
    Load_GfxWrappedBuffer(NotAtStart);
    Load_DecalVolumesBuffer(p_decalVolumesBuffer, varGfxDecalVolumeTransientData);
    varGfxWrappedBuffer = v7;
    v9 = varGfxDecalVolumeTransientData;
    if ( varGfxDecalVolumeTransientData->collectionBounds )
    {
      v10 = varBounds;
      Bounds = AllocLoad_Bounds();
      v9->collectionBounds = Bounds;
      varBounds = Bounds;
      Load_BoundsArray(AtStart, varGfxDecalVolumeTransientData->collectionCount);
      v9 = varGfxDecalVolumeTransientData;
      varBounds = v10;
    }
    if ( v9->decalVolumeUids )
    {
      v12 = varGfxStaticDecalVolumeUid;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      v9->decalVolumeUids = (GfxStaticDecalVolumeUid *)g_streamPosGlob.pos;
      varGfxStaticDecalVolumeUid = (GfxStaticDecalVolumeUid *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 4i64 * varGfxDecalVolumeTransientData->decalVolumeCount);
      varGfxStaticDecalVolumeUid = v12;
    }
    ++i;
  }
}

/*
==============
Load_GfxDecalVolumeTransientDataStream
==============
*/
void Load_GfxDecalVolumeTransientDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxDecalVolumeTransientData *v4; 
  GfxStaticDecalVolumePacked *decalVolumes; 
  GfxStaticDecalVolumePacked *v6; 
  GfxWrappedBuffer *v7; 
  GfxWrappedBuffer *p_decalVolumesBuffer; 
  GfxDecalVolumeTransientData *v9; 
  Bounds *v10; 
  Bounds *Bounds; 
  GfxStaticDecalVolumeUid *v12; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 20719, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxDecalVolumeTransientData;
    do
    {
      Load_Stream(AtStart, pos, 0x40ui64);
      DB_PushStreamPos(7u);
      v4 = varGfxDecalVolumeTransientData;
      decalVolumes = varGfxDecalVolumeTransientData->decalVolumes;
      if ( decalVolumes )
      {
        if ( decalVolumes == (GfxStaticDecalVolumePacked *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varGfxStaticDecalVolumePacked;
          DB_PatchMem_FixStreamAlignment(3ui64);
          DB_CheckCanIncStreamPos(0i64);
          v4->decalVolumes = (GfxStaticDecalVolumePacked *)g_streamPosGlob.pos;
          varGfxStaticDecalVolumePacked = (GfxStaticDecalVolumePacked *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 44i64 * varGfxDecalVolumeTransientData->decalVolumeCount);
          varGfxStaticDecalVolumePacked = v6;
          if ( decalVolumes == (GfxStaticDecalVolumePacked *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( decalVolumes == (GfxStaticDecalVolumePacked *)-2i64 )
          goto LABEL_11;
        v4->decalVolumes = (GfxStaticDecalVolumePacked *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varGfxDecalVolumeTransientData->decalVolumes);
      }
LABEL_13:
      DB_PopStreamPos();
      v7 = varGfxWrappedBuffer;
      p_decalVolumesBuffer = &varGfxDecalVolumeTransientData->decalVolumesBuffer;
      varGfxWrappedBuffer = &varGfxDecalVolumeTransientData->decalVolumesBuffer;
      Load_GfxWrappedBuffer(NotAtStart);
      Load_DecalVolumesBuffer(p_decalVolumesBuffer, varGfxDecalVolumeTransientData);
      varGfxWrappedBuffer = v7;
      v9 = varGfxDecalVolumeTransientData;
      if ( varGfxDecalVolumeTransientData->collectionBounds )
      {
        v10 = varBounds;
        Bounds = AllocLoad_Bounds();
        v9->collectionBounds = Bounds;
        varBounds = Bounds;
        Load_BoundsArray(AtStart, varGfxDecalVolumeTransientData->collectionCount);
        v9 = varGfxDecalVolumeTransientData;
        varBounds = v10;
      }
      if ( v9->decalVolumeUids )
      {
        v12 = varGfxStaticDecalVolumeUid;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v9->decalVolumeUids = (GfxStaticDecalVolumeUid *)g_streamPosGlob.pos;
        varGfxStaticDecalVolumeUid = (GfxStaticDecalVolumeUid *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 4i64 * varGfxDecalVolumeTransientData->decalVolumeCount);
        varGfxStaticDecalVolumeUid = v12;
      }
      pos = g_streamPosGlob.pos;
      varGfxDecalVolumeTransientData = (GfxDecalVolumeTransientData *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxDisplacementParms
==============
*/
void Load_GfxDisplacementParms(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxDisplacementParms, 0x10ui64);
}

/*
==============
Load_GfxDisplacementParmsArray
==============
*/
void Load_GfxDisplacementParmsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxDisplacementParms, 16 * count);
}

/*
==============
Load_GfxDisplacementParmsStream
==============
*/
void Load_GfxDisplacementParmsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  float4 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 19977, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = varGfxDisplacementParms;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      pos = (float4 *)g_streamPosGlob.pos;
      varGfxDisplacementParms = (float4 *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxDrawSurf
==============
*/
void Load_GfxDrawSurf(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxDrawSurf, 0x10ui64);
}

/*
==============
Load_GfxDrawSurfArray
==============
*/
void Load_GfxDrawSurfArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxDrawSurf, 16 * count);
}

/*
==============
Load_GfxDrawSurfStream
==============
*/
void Load_GfxDrawSurfStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 14928, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxDrawSurf;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      pos = g_streamPosGlob.pos;
      varGfxDrawSurf = (GfxDrawSurf *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxDynamicLightset
==============
*/
void Load_GfxDynamicLightset(const DBStreamStart streamStart)
{
  GfxDynamicLightset *v1; 
  GfxDynamicLightsetBFData *v2; 
  GfxDynamicLightsetLightInfo *v3; 
  GfxDynamicLightsetPortalGIData *v4; 
  GfxDynamicLightsetProductGIData *v5; 
  GfxDynamicLightsetLMData *v6; 
  GfxDynamicLightsetProbeData *v7; 

  Load_Stream(streamStart, varGfxDynamicLightset, 0x260ui64);
  v1 = varGfxDynamicLightset;
  if ( varGfxDynamicLightset->basisFunctions )
  {
    v2 = varGfxDynamicLightsetBFData;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->basisFunctions = (GfxDynamicLightsetBFData *)g_streamPosGlob.pos;
    varGfxDynamicLightsetBFData = (GfxDynamicLightsetBFData *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 32i64 * varGfxDynamicLightset->numBasisFunctions);
    v1 = varGfxDynamicLightset;
    varGfxDynamicLightsetBFData = v2;
  }
  if ( v1->basisFunctionLights )
  {
    v3 = varGfxDynamicLightsetLightInfo;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->basisFunctionLights = (GfxDynamicLightsetLightInfo *)g_streamPosGlob.pos;
    varGfxDynamicLightsetLightInfo = (GfxDynamicLightsetLightInfo *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 28i64 * varGfxDynamicLightset->numBasisFunctionPrimaryLights);
    v1 = varGfxDynamicLightset;
    varGfxDynamicLightsetLightInfo = v3;
  }
  if ( v1->portalGIData )
  {
    v4 = varGfxDynamicLightsetPortalGIData;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->portalGIData = (GfxDynamicLightsetPortalGIData *)g_streamPosGlob.pos;
    varGfxDynamicLightsetPortalGIData = (GfxDynamicLightsetPortalGIData *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 36i64 * varGfxDynamicLightset->numPortalGI);
    v1 = varGfxDynamicLightset;
    varGfxDynamicLightsetPortalGIData = v4;
  }
  if ( v1->productGIData )
  {
    v5 = varGfxDynamicLightsetProductGIData;
    DB_PatchMem_FixStreamAlignment(1ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->productGIData = (GfxDynamicLightsetProductGIData *)g_streamPosGlob.pos;
    varGfxDynamicLightsetProductGIData = (GfxDynamicLightsetProductGIData *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 4i64 * varGfxDynamicLightset->numProductGI);
    v1 = varGfxDynamicLightset;
    varGfxDynamicLightsetProductGIData = v5;
  }
  v6 = varGfxDynamicLightsetLMData;
  varGfxDynamicLightsetLMData = &v1->lmData;
  Load_GfxDynamicLightsetLMData(NotAtStart);
  varGfxDynamicLightsetLMData = v6;
  v7 = varGfxDynamicLightsetProbeData;
  varGfxDynamicLightsetProbeData = &varGfxDynamicLightset->lgProbeData;
  Load_GfxDynamicLightsetProbeData(NotAtStart);
  varGfxDynamicLightsetProbeData = v7;
}

/*
==============
Load_GfxDynamicLightsetArray
==============
*/
void Load_GfxDynamicLightsetArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxDynamicLightset *i; 
  GfxDynamicLightset *v4; 
  GfxDynamicLightsetBFData *v5; 
  GfxDynamicLightsetLightInfo *v6; 
  GfxDynamicLightsetPortalGIData *v7; 
  GfxDynamicLightsetProductGIData *v8; 
  GfxDynamicLightsetLMData *v9; 
  GfxDynamicLightsetProbeData *v10; 

  v2 = count;
  Load_Stream(streamStart, varGfxDynamicLightset, 608 * count);
  for ( i = varGfxDynamicLightset; v2; --v2 )
  {
    varGfxDynamicLightset = i;
    Load_Stream(NotAtStart, i, 0x260ui64);
    v4 = varGfxDynamicLightset;
    if ( varGfxDynamicLightset->basisFunctions )
    {
      v5 = varGfxDynamicLightsetBFData;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->basisFunctions = (GfxDynamicLightsetBFData *)g_streamPosGlob.pos;
      varGfxDynamicLightsetBFData = (GfxDynamicLightsetBFData *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 32i64 * varGfxDynamicLightset->numBasisFunctions);
      v4 = varGfxDynamicLightset;
      varGfxDynamicLightsetBFData = v5;
    }
    if ( v4->basisFunctionLights )
    {
      v6 = varGfxDynamicLightsetLightInfo;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->basisFunctionLights = (GfxDynamicLightsetLightInfo *)g_streamPosGlob.pos;
      varGfxDynamicLightsetLightInfo = (GfxDynamicLightsetLightInfo *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 28i64 * varGfxDynamicLightset->numBasisFunctionPrimaryLights);
      v4 = varGfxDynamicLightset;
      varGfxDynamicLightsetLightInfo = v6;
    }
    if ( v4->portalGIData )
    {
      v7 = varGfxDynamicLightsetPortalGIData;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->portalGIData = (GfxDynamicLightsetPortalGIData *)g_streamPosGlob.pos;
      varGfxDynamicLightsetPortalGIData = (GfxDynamicLightsetPortalGIData *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 36i64 * varGfxDynamicLightset->numPortalGI);
      v4 = varGfxDynamicLightset;
      varGfxDynamicLightsetPortalGIData = v7;
    }
    if ( v4->productGIData )
    {
      v8 = varGfxDynamicLightsetProductGIData;
      DB_PatchMem_FixStreamAlignment(1ui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->productGIData = (GfxDynamicLightsetProductGIData *)g_streamPosGlob.pos;
      varGfxDynamicLightsetProductGIData = (GfxDynamicLightsetProductGIData *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 4i64 * varGfxDynamicLightset->numProductGI);
      v4 = varGfxDynamicLightset;
      varGfxDynamicLightsetProductGIData = v8;
    }
    v9 = varGfxDynamicLightsetLMData;
    varGfxDynamicLightsetLMData = &v4->lmData;
    Load_GfxDynamicLightsetLMData(NotAtStart);
    v10 = varGfxDynamicLightsetProbeData;
    varGfxDynamicLightsetProbeData = &varGfxDynamicLightset->lgProbeData;
    varGfxDynamicLightsetLMData = v9;
    Load_GfxDynamicLightsetProbeData(NotAtStart);
    ++i;
    varGfxDynamicLightsetProbeData = v10;
  }
}

/*
==============
Load_GfxDynamicLightsetBFData
==============
*/
void Load_GfxDynamicLightsetBFData(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxDynamicLightsetBFData, 0x20ui64);
}

/*
==============
Load_GfxDynamicLightsetBFDataArray
==============
*/
void Load_GfxDynamicLightsetBFDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxDynamicLightsetBFData, 32 * count);
}

/*
==============
Load_GfxDynamicLightsetBFDataStream
==============
*/
void Load_GfxDynamicLightsetBFDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 27223, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxDynamicLightsetBFData;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      pos = g_streamPosGlob.pos;
      varGfxDynamicLightsetBFData = (GfxDynamicLightsetBFData *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxDynamicLightsetBFType
==============
*/
void Load_GfxDynamicLightsetBFType(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxDynamicLightsetBFType, 2ui64);
}

/*
==============
Load_GfxDynamicLightsetBFTypeArray
==============
*/
void Load_GfxDynamicLightsetBFTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxDynamicLightsetBFType, 2 * count);
}

/*
==============
Load_GfxDynamicLightsetBFTypeStream
==============
*/
void Load_GfxDynamicLightsetBFTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 27054, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxDynamicLightsetBFType;
    do
    {
      Load_Stream(AtStart, pos, 2ui64);
      pos = g_streamPosGlob.pos;
      varGfxDynamicLightsetBFType = (GfxDynamicLightsetBFType *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxDynamicLightsetGChunk
==============
*/
void Load_GfxDynamicLightsetGChunk(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxDynamicLightsetGChunk, 0x18ui64);
}

/*
==============
Load_GfxDynamicLightsetGChunkArray
==============
*/
void Load_GfxDynamicLightsetGChunkArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxDynamicLightsetGChunk, 24 * count);
}

/*
==============
Load_GfxDynamicLightsetGChunkFlags
==============
*/
void Load_GfxDynamicLightsetGChunkFlags(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxDynamicLightsetGChunkFlags, 2ui64);
}

/*
==============
Load_GfxDynamicLightsetGChunkFlagsArray
==============
*/
void Load_GfxDynamicLightsetGChunkFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxDynamicLightsetGChunkFlags, 2 * count);
}

/*
==============
Load_GfxDynamicLightsetGChunkFlagsStream
==============
*/
void Load_GfxDynamicLightsetGChunkFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 27669, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxDynamicLightsetGChunkFlags;
    do
    {
      Load_Stream(AtStart, pos, 2ui64);
      pos = g_streamPosGlob.pos;
      varGfxDynamicLightsetGChunkFlags = (GfxDynamicLightsetGChunkFlags *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxDynamicLightsetGChunkInfo
==============
*/
void Load_GfxDynamicLightsetGChunkInfo(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxDynamicLightsetGChunkInfo, 0x10ui64);
}

/*
==============
Load_GfxDynamicLightsetGChunkInfoArray
==============
*/
void Load_GfxDynamicLightsetGChunkInfoArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxDynamicLightsetGChunkInfo, 16 * count);
}

/*
==============
Load_GfxDynamicLightsetGChunkInfoStream
==============
*/
void Load_GfxDynamicLightsetGChunkInfoStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 27592, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxDynamicLightsetGChunkInfo;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      pos = g_streamPosGlob.pos;
      varGfxDynamicLightsetGChunkInfo = (GfxDynamicLightsetGChunkInfo *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxDynamicLightsetGChunkStream
==============
*/
void Load_GfxDynamicLightsetGChunkStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 27815, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxDynamicLightsetGChunk;
    do
    {
      Load_Stream(AtStart, pos, 0x18ui64);
      pos = g_streamPosGlob.pos;
      varGfxDynamicLightsetGChunk = (GfxDynamicLightsetGChunk *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxDynamicLightsetLGppZoneInfo
==============
*/
void Load_GfxDynamicLightsetLGppZoneInfo(const DBStreamStart streamStart)
{
  GfxDynamicLightsetLGppZoneInfo *v1; 
  GfxGpuDynLightsetsLGVReference *v2; 
  GfxWrappedBuffer *v3; 
  GfxWrappedBuffer *p_lgvReferencesBuffer; 
  GfxDynamicLightsetProbeData *v5; 

  Load_Stream(streamStart, varGfxDynamicLightsetLGppZoneInfo, 0x130ui64);
  DB_PushStreamPos(7u);
  v1 = varGfxDynamicLightsetLGppZoneInfo;
  if ( varGfxDynamicLightsetLGppZoneInfo->lgvReferences )
  {
    v2 = varGfxGpuDynLightsetsLGVReference;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->lgvReferences = (GfxGpuDynLightsetsLGVReference *)g_streamPosGlob.pos;
    varGfxGpuDynLightsetsLGVReference = (GfxGpuDynLightsetsLGVReference *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 8i64 * varGfxDynamicLightsetLGppZoneInfo->numOrigSMLGppProbes);
    varGfxGpuDynLightsetsLGVReference = v2;
  }
  DB_PopStreamPos();
  v3 = varGfxWrappedBuffer;
  p_lgvReferencesBuffer = &varGfxDynamicLightsetLGppZoneInfo->lgvReferencesBuffer;
  varGfxWrappedBuffer = &varGfxDynamicLightsetLGppZoneInfo->lgvReferencesBuffer;
  Load_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_lgvReferencesBuffer, GfxWrappedBuffer_Structured, 8u, varGfxDynamicLightsetLGppZoneInfo->numOrigSMLGppProbes, varGfxDynamicLightsetLGppZoneInfo->lgvReferences, "static model lgv references", 0);
  v5 = varGfxDynamicLightsetProbeData;
  varGfxDynamicLightsetProbeData = &varGfxDynamicLightsetLGppZoneInfo->lgvProbeData;
  varGfxWrappedBuffer = v3;
  Load_GfxDynamicLightsetProbeData(NotAtStart);
  varGfxDynamicLightsetProbeData = v5;
}

/*
==============
Load_GfxDynamicLightsetLGppZoneInfoArray
==============
*/
void Load_GfxDynamicLightsetLGppZoneInfoArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxDynamicLightsetLGppZoneInfo *i; 
  GfxDynamicLightsetLGppZoneInfo *v4; 
  GfxGpuDynLightsetsLGVReference *v5; 
  GfxWrappedBuffer *v6; 
  GfxWrappedBuffer *p_lgvReferencesBuffer; 
  GfxDynamicLightsetProbeData *v8; 

  v2 = count;
  Load_Stream(streamStart, varGfxDynamicLightsetLGppZoneInfo, 304 * count);
  for ( i = varGfxDynamicLightsetLGppZoneInfo; v2; --v2 )
  {
    varGfxDynamicLightsetLGppZoneInfo = i;
    Load_Stream(NotAtStart, i, 0x130ui64);
    DB_PushStreamPos(7u);
    v4 = varGfxDynamicLightsetLGppZoneInfo;
    if ( varGfxDynamicLightsetLGppZoneInfo->lgvReferences )
    {
      v5 = varGfxGpuDynLightsetsLGVReference;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->lgvReferences = (GfxGpuDynLightsetsLGVReference *)g_streamPosGlob.pos;
      varGfxGpuDynLightsetsLGVReference = (GfxGpuDynLightsetsLGVReference *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 8i64 * varGfxDynamicLightsetLGppZoneInfo->numOrigSMLGppProbes);
      varGfxGpuDynLightsetsLGVReference = v5;
    }
    DB_PopStreamPos();
    v6 = varGfxWrappedBuffer;
    p_lgvReferencesBuffer = &varGfxDynamicLightsetLGppZoneInfo->lgvReferencesBuffer;
    varGfxWrappedBuffer = &varGfxDynamicLightsetLGppZoneInfo->lgvReferencesBuffer;
    Load_GfxWrappedBuffer(NotAtStart);
    Load_GfxWrappedBuffer(p_lgvReferencesBuffer, GfxWrappedBuffer_Structured, 8u, varGfxDynamicLightsetLGppZoneInfo->numOrigSMLGppProbes, varGfxDynamicLightsetLGppZoneInfo->lgvReferences, "static model lgv references", 0);
    v8 = varGfxDynamicLightsetProbeData;
    varGfxDynamicLightsetProbeData = &varGfxDynamicLightsetLGppZoneInfo->lgvProbeData;
    varGfxWrappedBuffer = v6;
    Load_GfxDynamicLightsetProbeData(NotAtStart);
    ++i;
    varGfxDynamicLightsetProbeData = v8;
  }
}

/*
==============
Load_GfxDynamicLightsetLGppZoneInfoStream
==============
*/
void Load_GfxDynamicLightsetLGppZoneInfoStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxDynamicLightsetLGppZoneInfo *v4; 
  GfxGpuDynLightsetsLGVReference *v5; 
  GfxWrappedBuffer *v6; 
  GfxWrappedBuffer *p_lgvReferencesBuffer; 
  GfxDynamicLightsetProbeData *v8; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 28583, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxDynamicLightsetLGppZoneInfo;
    do
    {
      Load_Stream(AtStart, pos, 0x130ui64);
      DB_PushStreamPos(7u);
      v4 = varGfxDynamicLightsetLGppZoneInfo;
      if ( varGfxDynamicLightsetLGppZoneInfo->lgvReferences )
      {
        v5 = varGfxGpuDynLightsetsLGVReference;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->lgvReferences = (GfxGpuDynLightsetsLGVReference *)g_streamPosGlob.pos;
        varGfxGpuDynLightsetsLGVReference = (GfxGpuDynLightsetsLGVReference *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 8i64 * varGfxDynamicLightsetLGppZoneInfo->numOrigSMLGppProbes);
        varGfxGpuDynLightsetsLGVReference = v5;
      }
      DB_PopStreamPos();
      v6 = varGfxWrappedBuffer;
      p_lgvReferencesBuffer = &varGfxDynamicLightsetLGppZoneInfo->lgvReferencesBuffer;
      varGfxWrappedBuffer = &varGfxDynamicLightsetLGppZoneInfo->lgvReferencesBuffer;
      Load_GfxWrappedBuffer(NotAtStart);
      Load_GfxWrappedBuffer(p_lgvReferencesBuffer, GfxWrappedBuffer_Structured, 8u, varGfxDynamicLightsetLGppZoneInfo->numOrigSMLGppProbes, varGfxDynamicLightsetLGppZoneInfo->lgvReferences, "static model lgv references", 0);
      v8 = varGfxDynamicLightsetProbeData;
      varGfxDynamicLightsetProbeData = &varGfxDynamicLightsetLGppZoneInfo->lgvProbeData;
      varGfxWrappedBuffer = v6;
      Load_GfxDynamicLightsetProbeData(NotAtStart);
      pos = g_streamPosGlob.pos;
      varGfxDynamicLightsetLGppZoneInfo = (GfxDynamicLightsetLGppZoneInfo *)g_streamPosGlob.pos;
      varGfxDynamicLightsetProbeData = v8;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxDynamicLightsetLMData
==============
*/
void Load_GfxDynamicLightsetLMData(const DBStreamStart streamStart)
{
  GfxDynamicLightsetLMData *v1; 
  GfxDynamicLightsetGChunk *v2; 
  unsigned __int16 *v3; 
  unsigned __int16 *ushort; 
  unsigned __int16 *v5; 
  unsigned int *v6; 
  unsigned int *uint; 
  GfxDynamicLightsetLMData *v8; 
  unsigned int *v9; 
  unsigned int *v10; 
  GfxWrappedBuffer *v11; 
  GfxWrappedBuffer *p_origTexelsBuffer; 
  GfxDynamicLightsetLMData *v13; 
  unsigned int *v14; 
  unsigned int *v15; 
  GfxWrappedBuffer *v16; 
  GfxWrappedBuffer *p_origRecordsBuffer; 
  GfxDynamicLightsetLMData *v18; 
  unsigned int *v19; 
  unsigned int *v20; 
  GfxWrappedBuffer *v21; 
  GfxWrappedBuffer *p_bfTexelsBuffer; 
  GfxDynamicLightsetLMData *v23; 
  unsigned __int16 *v24; 
  unsigned __int16 *v25; 
  GfxDynamicLightsetLMData *v26; 
  unsigned int *v27; 
  unsigned int *v28; 

  Load_Stream(streamStart, varGfxDynamicLightsetLMData, 0x118ui64);
  v1 = varGfxDynamicLightsetLMData;
  if ( varGfxDynamicLightsetLMData->chunkGLM )
  {
    v2 = varGfxDynamicLightsetGChunk;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->chunkGLM = (GfxDynamicLightsetGChunk *)g_streamPosGlob.pos;
    varGfxDynamicLightsetGChunk = (GfxDynamicLightsetGChunk *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 24i64 * varGfxDynamicLightsetLMData->numGChunkLM);
    v1 = varGfxDynamicLightsetLMData;
    varGfxDynamicLightsetGChunk = v2;
  }
  v3 = varushort;
  if ( v1->chunkGLMBF )
  {
    ushort = AllocLoad_ushort();
    v1->chunkGLMBF = ushort;
    varushort = ushort;
    Load_ushortArray(AtStart, varGfxDynamicLightsetLMData->numGChunkLMBF);
    v1 = varGfxDynamicLightsetLMData;
    varushort = v3;
  }
  if ( v1->chunkWhichLM )
  {
    v5 = AllocLoad_ushort();
    v1->chunkWhichLM = v5;
    varushort = v5;
    Load_ushortArray(AtStart, varGfxDynamicLightsetLMData->numLMHave);
    v1 = varGfxDynamicLightsetLMData;
    varushort = v3;
  }
  if ( v1->chunkLMStart )
  {
    v6 = varuint;
    uint = AllocLoad_uint();
    v1->chunkLMStart = uint;
    varuint = uint;
    Load_uintArray(AtStart, varGfxDynamicLightsetLMData->numLMHave + (varGfxDynamicLightsetLMData->numLMHave != 0));
    varuint = v6;
  }
  DB_PushStreamPos(7u);
  v8 = varGfxDynamicLightsetLMData;
  if ( varGfxDynamicLightsetLMData->origTexels )
  {
    v9 = varuint;
    v10 = AllocLoad_uint();
    v8->origTexels = v10;
    varuint = v10;
    Load_uintArray(AtStart, 2 * varGfxDynamicLightsetLMData->numOrigTexels);
    varuint = v9;
  }
  DB_PopStreamPos();
  v11 = varGfxWrappedBuffer;
  p_origTexelsBuffer = &varGfxDynamicLightsetLMData->origTexelsBuffer;
  varGfxWrappedBuffer = &varGfxDynamicLightsetLMData->origTexelsBuffer;
  Load_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_origTexelsBuffer, GfxWrappedBuffer_Raw, 8u, varGfxDynamicLightsetLMData->numOrigTexels, varGfxDynamicLightsetLMData->origTexels, "origTexels", 0);
  varGfxWrappedBuffer = v11;
  DB_PushStreamPos(7u);
  v13 = varGfxDynamicLightsetLMData;
  if ( varGfxDynamicLightsetLMData->origRecords )
  {
    v14 = varuint;
    v15 = AllocLoad_uint();
    v13->origRecords = v15;
    varuint = v15;
    Load_uintArray(AtStart, varGfxDynamicLightsetLMData->numOrigTexels);
    varuint = v14;
  }
  DB_PopStreamPos();
  v16 = varGfxWrappedBuffer;
  p_origRecordsBuffer = &varGfxDynamicLightsetLMData->origRecordsBuffer;
  varGfxWrappedBuffer = &varGfxDynamicLightsetLMData->origRecordsBuffer;
  Load_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_origRecordsBuffer, GfxWrappedBuffer_Data, 4u, varGfxDynamicLightsetLMData->numOrigTexels, varGfxDynamicLightsetLMData->origRecords, "origRecords", 0);
  varGfxWrappedBuffer = v16;
  DB_PushStreamPos(7u);
  v18 = varGfxDynamicLightsetLMData;
  if ( varGfxDynamicLightsetLMData->bfTexels )
  {
    v19 = varuint;
    v20 = AllocLoad_uint();
    v18->bfTexels = v20;
    varuint = v20;
    Load_uintArray(AtStart, 2 * varGfxDynamicLightsetLMData->numBFLMTexels);
    varuint = v19;
  }
  DB_PopStreamPos();
  v21 = varGfxWrappedBuffer;
  p_bfTexelsBuffer = &varGfxDynamicLightsetLMData->bfTexelsBuffer;
  varGfxWrappedBuffer = &varGfxDynamicLightsetLMData->bfTexelsBuffer;
  Load_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_bfTexelsBuffer, GfxWrappedBuffer_Raw, 8u, varGfxDynamicLightsetLMData->numBFLMTexels, varGfxDynamicLightsetLMData->bfTexels, "bfTexels", 0);
  v23 = varGfxDynamicLightsetLMData;
  varGfxWrappedBuffer = v21;
  if ( varGfxDynamicLightsetLMData->skipRecords )
  {
    v24 = varushort;
    v25 = AllocLoad_ushort();
    v23->skipRecords = v25;
    varushort = v25;
    Load_ushortArray(AtStart, varGfxDynamicLightsetLMData->numSkipRecords);
    v23 = varGfxDynamicLightsetLMData;
    v21 = varGfxWrappedBuffer;
    varushort = v24;
  }
  varGfxWrappedBuffer = &v23->skipRecordsBuffer;
  Load_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(&v23->skipRecordsBuffer, GfxWrappedBuffer_Data, 2u, varGfxDynamicLightsetLMData->numSkipRecords, varGfxDynamicLightsetLMData->skipRecords, "skipRecords", 0);
  v26 = varGfxDynamicLightsetLMData;
  varGfxWrappedBuffer = v21;
  if ( varGfxDynamicLightsetLMData->palletteRecords )
  {
    v27 = varuint;
    v28 = AllocLoad_uint();
    v26->palletteRecords = v28;
    varuint = v28;
    Load_uintArray(AtStart, varGfxDynamicLightsetLMData->numSkipRecords);
    v26 = varGfxDynamicLightsetLMData;
    v21 = varGfxWrappedBuffer;
    varuint = v27;
  }
  varGfxWrappedBuffer = &v26->palletteRecordsBuffer;
  Load_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(&v26->palletteRecordsBuffer, GfxWrappedBuffer_Data, 4u, varGfxDynamicLightsetLMData->numSkipRecords, varGfxDynamicLightsetLMData->palletteRecords, "palletteRecords", 0);
  varGfxWrappedBuffer = v21;
}

/*
==============
Load_GfxDynamicLightsetLMDataArray
==============
*/
void Load_GfxDynamicLightsetLMDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxDynamicLightsetLMData *i; 

  v2 = count;
  Load_Stream(streamStart, varGfxDynamicLightsetLMData, 280 * count);
  for ( i = varGfxDynamicLightsetLMData; v2; --v2 )
  {
    varGfxDynamicLightsetLMData = i;
    Load_GfxDynamicLightsetLMData(NotAtStart);
    ++i;
  }
}

/*
==============
Load_GfxDynamicLightsetLMDataStream
==============
*/
void Load_GfxDynamicLightsetLMDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 29137, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  for ( ; count; --count )
  {
    Load_GfxDynamicLightsetLMData(AtStart);
    varGfxDynamicLightsetLMData = (GfxDynamicLightsetLMData *)g_streamPosGlob.pos;
  }
}

/*
==============
Load_GfxDynamicLightsetLightInfo
==============
*/
void Load_GfxDynamicLightsetLightInfo(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxDynamicLightsetLightInfo, 0x1Cui64);
}

/*
==============
Load_GfxDynamicLightsetLightInfoArray
==============
*/
void Load_GfxDynamicLightsetLightInfoArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxDynamicLightsetLightInfo, 28 * count);
}

/*
==============
Load_GfxDynamicLightsetLightInfoStream
==============
*/
void Load_GfxDynamicLightsetLightInfoStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 26977, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxDynamicLightsetLightInfo;
    do
    {
      Load_Stream(AtStart, pos, 0x1Cui64);
      pos = g_streamPosGlob.pos;
      varGfxDynamicLightsetLightInfo = (GfxDynamicLightsetLightInfo *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxDynamicLightsetPortalGIData
==============
*/
void Load_GfxDynamicLightsetPortalGIData(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxDynamicLightsetPortalGIData, 0x24ui64);
}

/*
==============
Load_GfxDynamicLightsetPortalGIDataArray
==============
*/
void Load_GfxDynamicLightsetPortalGIDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxDynamicLightsetPortalGIData, 36 * count);
}

/*
==============
Load_GfxDynamicLightsetPortalGIDataStream
==============
*/
void Load_GfxDynamicLightsetPortalGIDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 27346, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxDynamicLightsetPortalGIData;
    do
    {
      Load_Stream(AtStart, pos, 0x24ui64);
      pos = g_streamPosGlob.pos;
      varGfxDynamicLightsetPortalGIData = (GfxDynamicLightsetPortalGIData *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxDynamicLightsetProbeData
==============
*/
void Load_GfxDynamicLightsetProbeData(const DBStreamStart streamStart)
{
  GfxDynamicLightsetProbeData *v1; 
  GfxDynamicLightsetGChunk *v2; 
  unsigned __int16 *v3; 
  unsigned __int16 *ushort; 
  GfxDynamicLightsetProbeData *v5; 
  GfxSHCompressedProbeData *v6; 
  GfxWrappedBuffer *v7; 
  GfxWrappedBuffer *p_origProbesBuffer; 
  GfxDynamicLightsetProbeData *v9; 
  GfxSHCompressedProbeData *v10; 
  GfxWrappedBuffer *v11; 
  GfxWrappedBuffer *p_bfProbesBuffer; 
  GfxDynamicLightsetProbeData *v13; 
  unsigned __int16 *v14; 
  unsigned __int16 *v15; 
  GfxWrappedBuffer *v16; 
  GfxWrappedBuffer *p_skipRecordsBuffer; 
  GfxDynamicLightsetProbeData *v18; 
  unsigned int *v19; 
  unsigned int *uint; 
  GfxWrappedBuffer *v21; 
  GfxWrappedBuffer *p_palletteRecordsBuffer; 
  GfxDynamicLightsetProbeData *v23; 
  unsigned int *v24; 
  unsigned int *v25; 
  GfxWrappedBuffer *v26; 
  GfxWrappedBuffer *p_tempRemapBuffer; 

  Load_Stream(streamStart, varGfxDynamicLightsetProbeData, 0x100ui64);
  v1 = varGfxDynamicLightsetProbeData;
  if ( varGfxDynamicLightsetProbeData->chunkG )
  {
    v2 = varGfxDynamicLightsetGChunk;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->chunkG = (GfxDynamicLightsetGChunk *)g_streamPosGlob.pos;
    varGfxDynamicLightsetGChunk = (GfxDynamicLightsetGChunk *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 24i64 * varGfxDynamicLightsetProbeData->numGChunk);
    v1 = varGfxDynamicLightsetProbeData;
    varGfxDynamicLightsetGChunk = v2;
  }
  if ( v1->chunkGBF )
  {
    v3 = varushort;
    ushort = AllocLoad_ushort();
    v1->chunkGBF = ushort;
    varushort = ushort;
    Load_ushortArray(AtStart, varGfxDynamicLightsetProbeData->numGChunkBF);
    varushort = v3;
  }
  DB_PushStreamPos(7u);
  v5 = varGfxDynamicLightsetProbeData;
  if ( varGfxDynamicLightsetProbeData->origProbes )
  {
    v6 = varGfxSHCompressedProbeData;
    DB_PatchMem_FixStreamAlignment(0x1Fui64);
    DB_CheckCanIncStreamPos(0i64);
    v5->origProbes = (GfxSHCompressedProbeData *)g_streamPosGlob.pos;
    varGfxSHCompressedProbeData = (GfxSHCompressedProbeData *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 32i64 * varGfxDynamicLightsetProbeData->numOrigProbes);
    varGfxSHCompressedProbeData = v6;
  }
  DB_PopStreamPos();
  v7 = varGfxWrappedBuffer;
  p_origProbesBuffer = &varGfxDynamicLightsetProbeData->origProbesBuffer;
  varGfxWrappedBuffer = &varGfxDynamicLightsetProbeData->origProbesBuffer;
  Load_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_origProbesBuffer, GfxWrappedBuffer_Raw, 0x20u, varGfxDynamicLightsetProbeData->numOrigProbes, varGfxDynamicLightsetProbeData->origProbes, "origProbes", 0);
  varGfxWrappedBuffer = v7;
  DB_PushStreamPos(7u);
  v9 = varGfxDynamicLightsetProbeData;
  if ( varGfxDynamicLightsetProbeData->bfProbes )
  {
    v10 = varGfxSHCompressedProbeData;
    DB_PatchMem_FixStreamAlignment(0x1Fui64);
    DB_CheckCanIncStreamPos(0i64);
    v9->bfProbes = (GfxSHCompressedProbeData *)g_streamPosGlob.pos;
    varGfxSHCompressedProbeData = (GfxSHCompressedProbeData *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 32i64 * varGfxDynamicLightsetProbeData->numBFProbes);
    varGfxSHCompressedProbeData = v10;
  }
  DB_PopStreamPos();
  v11 = varGfxWrappedBuffer;
  p_bfProbesBuffer = &varGfxDynamicLightsetProbeData->bfProbesBuffer;
  varGfxWrappedBuffer = &varGfxDynamicLightsetProbeData->bfProbesBuffer;
  Load_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_bfProbesBuffer, GfxWrappedBuffer_Raw, 0x20u, varGfxDynamicLightsetProbeData->numBFProbes, varGfxDynamicLightsetProbeData->bfProbes, "bfProbes", 0);
  varGfxWrappedBuffer = v11;
  DB_PushStreamPos(7u);
  v13 = varGfxDynamicLightsetProbeData;
  if ( varGfxDynamicLightsetProbeData->skipRecords )
  {
    v14 = varushort;
    v15 = AllocLoad_ushort();
    v13->skipRecords = v15;
    varushort = v15;
    Load_ushortArray(AtStart, varGfxDynamicLightsetProbeData->numSkipRecords);
    varushort = v14;
  }
  DB_PopStreamPos();
  v16 = varGfxWrappedBuffer;
  p_skipRecordsBuffer = &varGfxDynamicLightsetProbeData->skipRecordsBuffer;
  varGfxWrappedBuffer = &varGfxDynamicLightsetProbeData->skipRecordsBuffer;
  Load_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_skipRecordsBuffer, GfxWrappedBuffer_Data, 2u, varGfxDynamicLightsetProbeData->numSkipRecords, varGfxDynamicLightsetProbeData->skipRecords, "skipRecords", 0);
  varGfxWrappedBuffer = v16;
  DB_PushStreamPos(7u);
  v18 = varGfxDynamicLightsetProbeData;
  if ( varGfxDynamicLightsetProbeData->palletteRecords )
  {
    v19 = varuint;
    uint = AllocLoad_uint();
    v18->palletteRecords = uint;
    varuint = uint;
    Load_uintArray(AtStart, varGfxDynamicLightsetProbeData->numSkipRecords);
    varuint = v19;
  }
  DB_PopStreamPos();
  v21 = varGfxWrappedBuffer;
  p_palletteRecordsBuffer = &varGfxDynamicLightsetProbeData->palletteRecordsBuffer;
  varGfxWrappedBuffer = &varGfxDynamicLightsetProbeData->palletteRecordsBuffer;
  Load_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_palletteRecordsBuffer, GfxWrappedBuffer_Data, 4u, varGfxDynamicLightsetProbeData->numSkipRecords, varGfxDynamicLightsetProbeData->palletteRecords, "palletteRecords", 0);
  varGfxWrappedBuffer = v21;
  DB_PushStreamPos(7u);
  v23 = varGfxDynamicLightsetProbeData;
  if ( varGfxDynamicLightsetProbeData->tempRemap )
  {
    v24 = varuint;
    v25 = AllocLoad_uint();
    v23->tempRemap = v25;
    varuint = v25;
    Load_uintArray(AtStart, varGfxDynamicLightsetProbeData->numOrigProbes);
    varuint = v24;
  }
  DB_PopStreamPos();
  v26 = varGfxWrappedBuffer;
  p_tempRemapBuffer = &varGfxDynamicLightsetProbeData->tempRemapBuffer;
  varGfxWrappedBuffer = &varGfxDynamicLightsetProbeData->tempRemapBuffer;
  Load_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_tempRemapBuffer, GfxWrappedBuffer_Data, 4u, varGfxDynamicLightsetProbeData->numOrigProbes, varGfxDynamicLightsetProbeData->tempRemap, "tempRemap", 0);
  varGfxWrappedBuffer = v26;
}

/*
==============
Load_GfxDynamicLightsetProbeDataArray
==============
*/
void Load_GfxDynamicLightsetProbeDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxDynamicLightsetProbeData *i; 

  v2 = count;
  Load_Stream(streamStart, varGfxDynamicLightsetProbeData, count << 8);
  for ( i = varGfxDynamicLightsetProbeData; v2; --v2 )
  {
    varGfxDynamicLightsetProbeData = i;
    Load_GfxDynamicLightsetProbeData(NotAtStart);
    ++i;
  }
}

/*
==============
Load_GfxDynamicLightsetProbeDataStream
==============
*/
void Load_GfxDynamicLightsetProbeDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 28329, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  for ( ; count; --count )
  {
    Load_GfxDynamicLightsetProbeData(AtStart);
    varGfxDynamicLightsetProbeData = (GfxDynamicLightsetProbeData *)g_streamPosGlob.pos;
  }
}

/*
==============
Load_GfxDynamicLightsetProductGIData
==============
*/
void Load_GfxDynamicLightsetProductGIData(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxDynamicLightsetProductGIData, 4ui64);
}

/*
==============
Load_GfxDynamicLightsetProductGIDataArray
==============
*/
void Load_GfxDynamicLightsetProductGIDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxDynamicLightsetProductGIData, 4 * count);
}

/*
==============
Load_GfxDynamicLightsetProductGIDataStream
==============
*/
void Load_GfxDynamicLightsetProductGIDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 27446, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxDynamicLightsetProductGIData;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varGfxDynamicLightsetProductGIData = (GfxDynamicLightsetProductGIData *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxDynamicLightsetStream
==============
*/
void Load_GfxDynamicLightsetStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxDynamicLightset *v4; 
  GfxDynamicLightsetBFData *v5; 
  GfxDynamicLightsetLightInfo *v6; 
  GfxDynamicLightsetPortalGIData *v7; 
  GfxDynamicLightsetProductGIData *v8; 
  GfxDynamicLightsetLMData *v9; 
  GfxDynamicLightsetProbeData *v10; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 29456, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxDynamicLightset;
    do
    {
      Load_Stream(AtStart, pos, 0x260ui64);
      v4 = varGfxDynamicLightset;
      if ( varGfxDynamicLightset->basisFunctions )
      {
        v5 = varGfxDynamicLightsetBFData;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->basisFunctions = (GfxDynamicLightsetBFData *)g_streamPosGlob.pos;
        varGfxDynamicLightsetBFData = (GfxDynamicLightsetBFData *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 32i64 * varGfxDynamicLightset->numBasisFunctions);
        v4 = varGfxDynamicLightset;
        varGfxDynamicLightsetBFData = v5;
      }
      if ( v4->basisFunctionLights )
      {
        v6 = varGfxDynamicLightsetLightInfo;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->basisFunctionLights = (GfxDynamicLightsetLightInfo *)g_streamPosGlob.pos;
        varGfxDynamicLightsetLightInfo = (GfxDynamicLightsetLightInfo *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 28i64 * varGfxDynamicLightset->numBasisFunctionPrimaryLights);
        v4 = varGfxDynamicLightset;
        varGfxDynamicLightsetLightInfo = v6;
      }
      if ( v4->portalGIData )
      {
        v7 = varGfxDynamicLightsetPortalGIData;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->portalGIData = (GfxDynamicLightsetPortalGIData *)g_streamPosGlob.pos;
        varGfxDynamicLightsetPortalGIData = (GfxDynamicLightsetPortalGIData *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 36i64 * varGfxDynamicLightset->numPortalGI);
        v4 = varGfxDynamicLightset;
        varGfxDynamicLightsetPortalGIData = v7;
      }
      if ( v4->productGIData )
      {
        v8 = varGfxDynamicLightsetProductGIData;
        DB_PatchMem_FixStreamAlignment(1ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->productGIData = (GfxDynamicLightsetProductGIData *)g_streamPosGlob.pos;
        varGfxDynamicLightsetProductGIData = (GfxDynamicLightsetProductGIData *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 4i64 * varGfxDynamicLightset->numProductGI);
        v4 = varGfxDynamicLightset;
        varGfxDynamicLightsetProductGIData = v8;
      }
      v9 = varGfxDynamicLightsetLMData;
      varGfxDynamicLightsetLMData = &v4->lmData;
      Load_GfxDynamicLightsetLMData(NotAtStart);
      v10 = varGfxDynamicLightsetProbeData;
      varGfxDynamicLightsetProbeData = &varGfxDynamicLightset->lgProbeData;
      varGfxDynamicLightsetLMData = v9;
      Load_GfxDynamicLightsetProbeData(NotAtStart);
      pos = g_streamPosGlob.pos;
      varGfxDynamicLightset = (GfxDynamicLightset *)g_streamPosGlob.pos;
      varGfxDynamicLightsetProbeData = v10;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxFrustumLights
==============
*/
void Load_GfxFrustumLights(const DBStreamStart streamStart)
{
  GfxFrustumLights *v1; 
  unsigned int *v2; 
  unsigned int *uint; 
  unsigned int *v4; 
  unsigned __int16 *v5; 
  unsigned __int16 *ushort; 
  unsigned __int16 *v7; 
  unsigned __int16 *v8; 
  unsigned __int16 *alignIndBufUShort_t; 
  unsigned __int8 *v10; 
  unsigned __int8 *alignVertBufByte_t; 
  GfxWrappedBuffer *p_indexBuffer; 
  GfxWrappedBuffer *v13; 
  GfxWrappedBuffer *p_vertexBuffer; 

  Load_Stream(streamStart, varGfxFrustumLights, 0x80ui64);
  v1 = varGfxFrustumLights;
  v2 = varuint;
  if ( varGfxFrustumLights->indicesOffsets )
  {
    uint = AllocLoad_uint();
    v1->indicesOffsets = uint;
    varuint = uint;
    Load_uintArray(AtStart, varGfxFrustumLights->lightCount);
    v1 = varGfxFrustumLights;
    varuint = v2;
  }
  if ( v1->verticesOffsets )
  {
    v4 = AllocLoad_uint();
    v1->verticesOffsets = v4;
    varuint = v4;
    Load_uintArray(AtStart, varGfxFrustumLights->lightCount);
    v1 = varGfxFrustumLights;
    varuint = v2;
  }
  v5 = varushort;
  if ( v1->indicesCounts )
  {
    ushort = AllocLoad_ushort();
    v1->indicesCounts = ushort;
    varushort = ushort;
    Load_ushortArray(AtStart, varGfxFrustumLights->lightCount);
    v1 = varGfxFrustumLights;
    varushort = v5;
  }
  if ( v1->verticesCounts )
  {
    v7 = AllocLoad_ushort();
    v1->verticesCounts = v7;
    varushort = v7;
    Load_ushortArray(AtStart, varGfxFrustumLights->lightCount);
    v1 = varGfxFrustumLights;
    varushort = v5;
  }
  if ( v1->indices )
  {
    v8 = varalignIndBufUShort_t;
    alignIndBufUShort_t = AllocLoad_alignIndBufUShort_t();
    v1->indices = alignIndBufUShort_t;
    varalignIndBufUShort_t = alignIndBufUShort_t;
    Load_alignIndBufUShort_tArray(AtStart, varGfxFrustumLights->totalIndicesCount);
    v1 = varGfxFrustumLights;
    varalignIndBufUShort_t = v8;
  }
  if ( v1->vertices )
  {
    v10 = varalignVertBufByte_t;
    alignVertBufByte_t = AllocLoad_alignVertBufByte_t();
    v1->vertices = alignVertBufByte_t;
    varalignVertBufByte_t = alignVertBufByte_t;
    Load_alignVertBufByte_tArray(AtStart, 16i64 * varGfxFrustumLights->totalVerticesCount);
    v1 = varGfxFrustumLights;
    varalignVertBufByte_t = v10;
  }
  p_indexBuffer = &v1->indexBuffer;
  v13 = varGfxWrappedBuffer;
  varGfxWrappedBuffer = p_indexBuffer;
  Load_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_indexBuffer, GfxWrappedBuffer_Raw, 2u, varGfxFrustumLights->totalIndicesCount, varGfxFrustumLights->indices, "primary lights index buffer", 0x80u);
  p_vertexBuffer = &varGfxFrustumLights->vertexBuffer;
  varGfxWrappedBuffer = &varGfxFrustumLights->vertexBuffer;
  Load_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_vertexBuffer, GfxWrappedBuffer_Raw, 0x10u, varGfxFrustumLights->totalVerticesCount, varGfxFrustumLights->vertices, "primary lights vertex buffer", 0);
  varGfxWrappedBuffer = v13;
}

/*
==============
Load_GfxFrustumLightsArray
==============
*/
void Load_GfxFrustumLightsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxFrustumLights *i; 
  GfxFrustumLights *v4; 
  unsigned int *v5; 
  unsigned int *uint; 
  unsigned int *v7; 
  unsigned __int16 *v8; 
  unsigned __int16 *ushort; 
  unsigned __int16 *v10; 
  unsigned __int16 *v11; 
  unsigned __int16 *alignIndBufUShort_t; 
  unsigned __int8 *v13; 
  unsigned __int8 *alignVertBufByte_t; 
  GfxWrappedBuffer *v15; 
  GfxWrappedBuffer *p_indexBuffer; 
  GfxWrappedBuffer *p_vertexBuffer; 

  v2 = count;
  Load_Stream(streamStart, varGfxFrustumLights, count << 7);
  for ( i = varGfxFrustumLights; v2; --v2 )
  {
    varGfxFrustumLights = i;
    Load_Stream(NotAtStart, i, 0x80ui64);
    v4 = varGfxFrustumLights;
    v5 = varuint;
    if ( varGfxFrustumLights->indicesOffsets )
    {
      uint = AllocLoad_uint();
      v4->indicesOffsets = uint;
      varuint = uint;
      Load_uintArray(AtStart, varGfxFrustumLights->lightCount);
      v4 = varGfxFrustumLights;
      varuint = v5;
    }
    if ( v4->verticesOffsets )
    {
      v7 = AllocLoad_uint();
      v4->verticesOffsets = v7;
      varuint = v7;
      Load_uintArray(AtStart, varGfxFrustumLights->lightCount);
      v4 = varGfxFrustumLights;
      varuint = v5;
    }
    v8 = varushort;
    if ( v4->indicesCounts )
    {
      ushort = AllocLoad_ushort();
      v4->indicesCounts = ushort;
      varushort = ushort;
      Load_ushortArray(AtStart, varGfxFrustumLights->lightCount);
      v4 = varGfxFrustumLights;
      varushort = v8;
    }
    if ( v4->verticesCounts )
    {
      v10 = AllocLoad_ushort();
      v4->verticesCounts = v10;
      varushort = v10;
      Load_ushortArray(AtStart, varGfxFrustumLights->lightCount);
      v4 = varGfxFrustumLights;
      varushort = v8;
    }
    if ( v4->indices )
    {
      v11 = varalignIndBufUShort_t;
      alignIndBufUShort_t = AllocLoad_alignIndBufUShort_t();
      v4->indices = alignIndBufUShort_t;
      varalignIndBufUShort_t = alignIndBufUShort_t;
      Load_alignIndBufUShort_tArray(AtStart, varGfxFrustumLights->totalIndicesCount);
      v4 = varGfxFrustumLights;
      varalignIndBufUShort_t = v11;
    }
    if ( v4->vertices )
    {
      v13 = varalignVertBufByte_t;
      alignVertBufByte_t = AllocLoad_alignVertBufByte_t();
      v4->vertices = alignVertBufByte_t;
      varalignVertBufByte_t = alignVertBufByte_t;
      Load_alignVertBufByte_tArray(AtStart, 16i64 * varGfxFrustumLights->totalVerticesCount);
      v4 = varGfxFrustumLights;
      varalignVertBufByte_t = v13;
    }
    v15 = varGfxWrappedBuffer;
    p_indexBuffer = &v4->indexBuffer;
    varGfxWrappedBuffer = p_indexBuffer;
    Load_GfxWrappedBuffer(NotAtStart);
    Load_GfxWrappedBuffer(p_indexBuffer, GfxWrappedBuffer_Raw, 2u, varGfxFrustumLights->totalIndicesCount, varGfxFrustumLights->indices, "primary lights index buffer", 0x80u);
    p_vertexBuffer = &varGfxFrustumLights->vertexBuffer;
    varGfxWrappedBuffer = &varGfxFrustumLights->vertexBuffer;
    Load_GfxWrappedBuffer(NotAtStart);
    Load_GfxWrappedBuffer(p_vertexBuffer, GfxWrappedBuffer_Raw, 0x10u, varGfxFrustumLights->totalVerticesCount, varGfxFrustumLights->vertices, "primary lights vertex buffer", 0);
    ++i;
    varGfxWrappedBuffer = v15;
  }
}

/*
==============
Load_GfxFrustumLightsStream
==============
*/
void Load_GfxFrustumLightsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxFrustumLights *v4; 
  unsigned int *v5; 
  unsigned int *uint; 
  unsigned int *v7; 
  unsigned __int16 *v8; 
  unsigned __int16 *ushort; 
  unsigned __int16 *v10; 
  unsigned __int16 *v11; 
  unsigned __int16 *alignIndBufUShort_t; 
  unsigned __int8 *v13; 
  unsigned __int8 *alignVertBufByte_t; 
  GfxWrappedBuffer *v15; 
  GfxWrappedBuffer *p_indexBuffer; 
  GfxWrappedBuffer *p_vertexBuffer; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 26338, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxFrustumLights;
    do
    {
      Load_Stream(AtStart, pos, 0x80ui64);
      v4 = varGfxFrustumLights;
      v5 = varuint;
      if ( varGfxFrustumLights->indicesOffsets )
      {
        uint = AllocLoad_uint();
        v4->indicesOffsets = uint;
        varuint = uint;
        Load_uintArray(AtStart, varGfxFrustumLights->lightCount);
        v4 = varGfxFrustumLights;
        varuint = v5;
      }
      if ( v4->verticesOffsets )
      {
        v7 = AllocLoad_uint();
        v4->verticesOffsets = v7;
        varuint = v7;
        Load_uintArray(AtStart, varGfxFrustumLights->lightCount);
        v4 = varGfxFrustumLights;
        varuint = v5;
      }
      v8 = varushort;
      if ( v4->indicesCounts )
      {
        ushort = AllocLoad_ushort();
        v4->indicesCounts = ushort;
        varushort = ushort;
        Load_ushortArray(AtStart, varGfxFrustumLights->lightCount);
        v4 = varGfxFrustumLights;
        varushort = v8;
      }
      if ( v4->verticesCounts )
      {
        v10 = AllocLoad_ushort();
        v4->verticesCounts = v10;
        varushort = v10;
        Load_ushortArray(AtStart, varGfxFrustumLights->lightCount);
        v4 = varGfxFrustumLights;
        varushort = v8;
      }
      if ( v4->indices )
      {
        v11 = varalignIndBufUShort_t;
        alignIndBufUShort_t = AllocLoad_alignIndBufUShort_t();
        v4->indices = alignIndBufUShort_t;
        varalignIndBufUShort_t = alignIndBufUShort_t;
        Load_alignIndBufUShort_tArray(AtStart, varGfxFrustumLights->totalIndicesCount);
        v4 = varGfxFrustumLights;
        varalignIndBufUShort_t = v11;
      }
      if ( v4->vertices )
      {
        v13 = varalignVertBufByte_t;
        alignVertBufByte_t = AllocLoad_alignVertBufByte_t();
        v4->vertices = alignVertBufByte_t;
        varalignVertBufByte_t = alignVertBufByte_t;
        Load_alignVertBufByte_tArray(AtStart, 16i64 * varGfxFrustumLights->totalVerticesCount);
        v4 = varGfxFrustumLights;
        varalignVertBufByte_t = v13;
      }
      v15 = varGfxWrappedBuffer;
      p_indexBuffer = &v4->indexBuffer;
      varGfxWrappedBuffer = p_indexBuffer;
      Load_GfxWrappedBuffer(NotAtStart);
      Load_GfxWrappedBuffer(p_indexBuffer, GfxWrappedBuffer_Raw, 2u, varGfxFrustumLights->totalIndicesCount, varGfxFrustumLights->indices, "primary lights index buffer", 0x80u);
      p_vertexBuffer = &varGfxFrustumLights->vertexBuffer;
      varGfxWrappedBuffer = &varGfxFrustumLights->vertexBuffer;
      Load_GfxWrappedBuffer(NotAtStart);
      Load_GfxWrappedBuffer(p_vertexBuffer, GfxWrappedBuffer_Raw, 0x10u, varGfxFrustumLights->totalVerticesCount, varGfxFrustumLights->vertices, "primary lights vertex buffer", 0);
      pos = g_streamPosGlob.pos;
      varGfxFrustumLights = (GfxFrustumLights *)g_streamPosGlob.pos;
      varGfxWrappedBuffer = v15;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxGpuDynLightsetsLGVReference
==============
*/
void Load_GfxGpuDynLightsetsLGVReference(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxGpuDynLightsetsLGVReference, 8ui64);
}

/*
==============
Load_GfxGpuDynLightsetsLGVReferenceArray
==============
*/
void Load_GfxGpuDynLightsetsLGVReferenceArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxGpuDynLightsetsLGVReference, 8 * count);
}

/*
==============
Load_GfxGpuDynLightsetsLGVReferenceStream
==============
*/
void Load_GfxGpuDynLightsetsLGVReferenceStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 28429, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxGpuDynLightsetsLGVReference;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      pos = g_streamPosGlob.pos;
      varGfxGpuDynLightsetsLGVReference = (GfxGpuDynLightsetsLGVReference *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxGpuLightGrid
==============
*/
void Load_GfxGpuLightGrid(const DBStreamStart streamStart)
{
  GfxGpuLightGrid *v1; 
  GfxSHCompressedProbeData *v2; 
  GfxWrappedRWBuffer *v3; 
  GfxWrappedRWBuffer *p_probesBuffer; 
  GfxGpuLightGrid *v5; 
  vec3_t *v6; 
  vec3_t *alignVertBufVec3_t; 
  GfxWrappedBuffer *v8; 
  GfxWrappedBuffer *p_probePositionsBuffer; 
  GfxGpuLightGrid *v10; 
  GfxGpuLightGridZone *v11; 
  GfxGpuLightGridVoxelTree *v12; 
  GfxGpuLightGrid *v13; 
  GfxGpuLightGridTetrahedron *v14; 
  GfxWrappedBuffer *v15; 
  GfxWrappedBuffer *p_tetrahedronBuffer; 
  GfxGpuLightGrid *v17; 
  GfxGpuLightGridTetrahedronNeighbors *v18; 
  GfxWrappedBuffer *v19; 
  GfxWrappedBuffer *p_tetrahedronNeighborsBuffer; 
  GfxGpuLightGrid *v21; 
  GfxGpuLightGridTetrahedronVisibility *v22; 
  GfxWrappedBuffer *v23; 
  GfxWrappedBuffer *p_tetrahedronVisibilityBuffer; 
  GfxGpuLightGrid *v25; 
  GfxGpuLightGridVoxelStartTetrahedron *v26; 
  GfxWrappedBuffer *v27; 
  GfxWrappedBuffer *p_voxelStartTetrahedronBuffer; 

  Load_Stream(streamStart, varGfxGpuLightGrid, 0x1B8ui64);
  DB_PushStreamPos(7u);
  v1 = varGfxGpuLightGrid;
  if ( varGfxGpuLightGrid->probes )
  {
    v2 = varGfxSHCompressedProbeData;
    DB_PatchMem_FixStreamAlignment(0x1Fui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->probes = (GfxSHCompressedProbeData *)g_streamPosGlob.pos;
    varGfxSHCompressedProbeData = (GfxSHCompressedProbeData *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 32i64 * varGfxGpuLightGrid->probeCount);
    varGfxSHCompressedProbeData = v2;
  }
  DB_PopStreamPos();
  v3 = varGfxWrappedRWBuffer;
  p_probesBuffer = &varGfxGpuLightGrid->probesBuffer;
  varGfxWrappedRWBuffer = &varGfxGpuLightGrid->probesBuffer;
  Load_GfxWrappedRWBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_probesBuffer, GfxWrappedBuffer_Raw, 0x20u, varGfxGpuLightGrid->probeCount, varGfxGpuLightGrid->probes, "probesData", 0);
  varGfxWrappedRWBuffer = v3;
  DB_PushStreamPos(7u);
  v5 = varGfxGpuLightGrid;
  if ( varGfxGpuLightGrid->probePositions )
  {
    v6 = varalignVertBufVec3_t;
    alignVertBufVec3_t = AllocLoad_alignVertBufVec3_t();
    v5->probePositions = alignVertBufVec3_t;
    varalignVertBufVec3_t = alignVertBufVec3_t;
    Load_alignVertBufVec3_tArray(AtStart, varGfxGpuLightGrid->probeCount);
    varalignVertBufVec3_t = v6;
  }
  DB_PopStreamPos();
  v8 = varGfxWrappedBuffer;
  p_probePositionsBuffer = &varGfxGpuLightGrid->probePositionsBuffer;
  varGfxWrappedBuffer = &varGfxGpuLightGrid->probePositionsBuffer;
  Load_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_probePositionsBuffer, GfxWrappedBuffer_Raw, 0xCu, varGfxGpuLightGrid->probeCount, varGfxGpuLightGrid->probePositions, "probesPositions", 0);
  varGfxWrappedBuffer = v8;
  v10 = varGfxGpuLightGrid;
  if ( varGfxGpuLightGrid->zones )
  {
    v11 = varGfxGpuLightGridZone;
    DB_PatchMem_FixStreamAlignment(0x3Fui64);
    DB_CheckCanIncStreamPos(0i64);
    v10->zones = (GfxGpuLightGridZone *)g_streamPosGlob.pos;
    varGfxGpuLightGridZone = (GfxGpuLightGridZone *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 92i64 * varGfxGpuLightGrid->zoneCount);
    v10 = varGfxGpuLightGrid;
    varGfxGpuLightGridZone = v11;
  }
  if ( v10->zoneVoxelTrees )
  {
    v12 = varGfxGpuLightGridVoxelTree;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v10->zoneVoxelTrees = (GfxGpuLightGridVoxelTree *)g_streamPosGlob.pos;
    varGfxGpuLightGridVoxelTree = (GfxGpuLightGridVoxelTree *)g_streamPosGlob.pos;
    Load_GfxGpuLightGridVoxelTreeArray(AtStart, varGfxGpuLightGrid->zoneCount);
    varGfxGpuLightGridVoxelTree = v12;
  }
  DB_PushStreamPos(7u);
  v13 = varGfxGpuLightGrid;
  if ( varGfxGpuLightGrid->tetrahedrons )
  {
    v14 = varGfxGpuLightGridTetrahedron;
    DB_PatchMem_FixStreamAlignment(0x3Fui64);
    DB_CheckCanIncStreamPos(0i64);
    v13->tetrahedrons = (GfxGpuLightGridTetrahedron *)g_streamPosGlob.pos;
    varGfxGpuLightGridTetrahedron = (GfxGpuLightGridTetrahedron *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varGfxGpuLightGrid->tetrahedronCount);
    varGfxGpuLightGridTetrahedron = v14;
  }
  DB_PopStreamPos();
  v15 = varGfxWrappedBuffer;
  p_tetrahedronBuffer = &varGfxGpuLightGrid->tetrahedronBuffer;
  varGfxWrappedBuffer = &varGfxGpuLightGrid->tetrahedronBuffer;
  Load_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_tetrahedronBuffer, GfxWrappedBuffer_Raw, 0x10u, varGfxGpuLightGrid->tetrahedronCount, varGfxGpuLightGrid->tetrahedrons, "probeTets", 0);
  varGfxWrappedBuffer = v15;
  DB_PushStreamPos(7u);
  v17 = varGfxGpuLightGrid;
  if ( varGfxGpuLightGrid->tetrahedronNeighbors )
  {
    v18 = varGfxGpuLightGridTetrahedronNeighbors;
    DB_PatchMem_FixStreamAlignment(0x3Fui64);
    DB_CheckCanIncStreamPos(0i64);
    v17->tetrahedronNeighbors = (GfxGpuLightGridTetrahedronNeighbors *)g_streamPosGlob.pos;
    varGfxGpuLightGridTetrahedronNeighbors = (GfxGpuLightGridTetrahedronNeighbors *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varGfxGpuLightGrid->tetrahedronCount);
    varGfxGpuLightGridTetrahedronNeighbors = v18;
  }
  DB_PopStreamPos();
  v19 = varGfxWrappedBuffer;
  p_tetrahedronNeighborsBuffer = &varGfxGpuLightGrid->tetrahedronNeighborsBuffer;
  varGfxWrappedBuffer = &varGfxGpuLightGrid->tetrahedronNeighborsBuffer;
  Load_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_tetrahedronNeighborsBuffer, GfxWrappedBuffer_Raw, 0x10u, varGfxGpuLightGrid->tetrahedronCount, varGfxGpuLightGrid->tetrahedronNeighbors, "probeTetNeighbors", 0);
  varGfxWrappedBuffer = v19;
  DB_PushStreamPos(7u);
  v21 = varGfxGpuLightGrid;
  if ( varGfxGpuLightGrid->tetrahedronVisibility )
  {
    v22 = varGfxGpuLightGridTetrahedronVisibility;
    DB_PatchMem_FixStreamAlignment(0x3Fui64);
    DB_CheckCanIncStreamPos(0i64);
    v21->tetrahedronVisibility = (GfxGpuLightGridTetrahedronVisibility *)g_streamPosGlob.pos;
    varGfxGpuLightGridTetrahedronVisibility = (GfxGpuLightGridTetrahedronVisibility *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, (unsigned __int64)varGfxGpuLightGrid->tetrahedronCountVisible << 6);
    varGfxGpuLightGridTetrahedronVisibility = v22;
  }
  DB_PopStreamPos();
  v23 = varGfxWrappedBuffer;
  p_tetrahedronVisibilityBuffer = &varGfxGpuLightGrid->tetrahedronVisibilityBuffer;
  varGfxWrappedBuffer = &varGfxGpuLightGrid->tetrahedronVisibilityBuffer;
  Load_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_tetrahedronVisibilityBuffer, GfxWrappedBuffer_Raw, 0x40u, varGfxGpuLightGrid->tetrahedronCountVisible, varGfxGpuLightGrid->tetrahedronVisibility, "probeTetVisibility", 0);
  varGfxWrappedBuffer = v23;
  DB_PushStreamPos(7u);
  v25 = varGfxGpuLightGrid;
  if ( varGfxGpuLightGrid->voxelStartTetrahedron )
  {
    v26 = varGfxGpuLightGridVoxelStartTetrahedron;
    DB_PatchMem_FixStreamAlignment(0x3Fui64);
    DB_CheckCanIncStreamPos(0i64);
    v25->voxelStartTetrahedron = (GfxGpuLightGridVoxelStartTetrahedron *)g_streamPosGlob.pos;
    varGfxGpuLightGridVoxelStartTetrahedron = (GfxGpuLightGridVoxelStartTetrahedron *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 4i64 * varGfxGpuLightGrid->voxelStartTetrahedronCount);
    varGfxGpuLightGridVoxelStartTetrahedron = v26;
  }
  DB_PopStreamPos();
  v27 = varGfxWrappedBuffer;
  p_voxelStartTetrahedronBuffer = &varGfxGpuLightGrid->voxelStartTetrahedronBuffer;
  varGfxWrappedBuffer = &varGfxGpuLightGrid->voxelStartTetrahedronBuffer;
  Load_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_voxelStartTetrahedronBuffer, GfxWrappedBuffer_Raw, 4u, varGfxGpuLightGrid->voxelStartTetrahedronCount, varGfxGpuLightGrid->voxelStartTetrahedron, "probeVoxelStartTet", 0);
  varGfxWrappedBuffer = v27;
}

/*
==============
Load_GfxGpuLightGridArray
==============
*/
void Load_GfxGpuLightGridArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxGpuLightGrid *i; 

  v2 = count;
  Load_Stream(streamStart, varGfxGpuLightGrid, 440 * count);
  for ( i = varGfxGpuLightGrid; v2; --v2 )
  {
    varGfxGpuLightGrid = i;
    Load_GfxGpuLightGrid(NotAtStart);
    ++i;
  }
}

/*
==============
Load_GfxGpuLightGridStream
==============
*/
void Load_GfxGpuLightGridStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 14763, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  for ( ; count; --count )
  {
    Load_GfxGpuLightGrid(AtStart);
    varGfxGpuLightGrid = (GfxGpuLightGrid *)g_streamPosGlob.pos;
  }
}

/*
==============
Load_GfxGpuLightGridTetrahedron
==============
*/
void Load_GfxGpuLightGridTetrahedron(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxGpuLightGridTetrahedron, 0x10ui64);
}

/*
==============
Load_GfxGpuLightGridTetrahedronArray
==============
*/
void Load_GfxGpuLightGridTetrahedronArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxGpuLightGridTetrahedron, 16 * count);
}

/*
==============
Load_GfxGpuLightGridTetrahedronNeighbors
==============
*/
void Load_GfxGpuLightGridTetrahedronNeighbors(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxGpuLightGridTetrahedronNeighbors, 0x10ui64);
}

/*
==============
Load_GfxGpuLightGridTetrahedronNeighborsArray
==============
*/
void Load_GfxGpuLightGridTetrahedronNeighborsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxGpuLightGridTetrahedronNeighbors, 16 * count);
}

/*
==============
Load_GfxGpuLightGridTetrahedronNeighborsStream
==============
*/
void Load_GfxGpuLightGridTetrahedronNeighborsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 13128, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxGpuLightGridTetrahedronNeighbors;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      pos = g_streamPosGlob.pos;
      varGfxGpuLightGridTetrahedronNeighbors = (GfxGpuLightGridTetrahedronNeighbors *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxGpuLightGridTetrahedronStream
==============
*/
void Load_GfxGpuLightGridTetrahedronStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 13051, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxGpuLightGridTetrahedron;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      pos = g_streamPosGlob.pos;
      varGfxGpuLightGridTetrahedron = (GfxGpuLightGridTetrahedron *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxGpuLightGridTetrahedronVisibility
==============
*/
void Load_GfxGpuLightGridTetrahedronVisibility(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxGpuLightGridTetrahedronVisibility, 0x40ui64);
}

/*
==============
Load_GfxGpuLightGridTetrahedronVisibilityArray
==============
*/
void Load_GfxGpuLightGridTetrahedronVisibilityArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxGpuLightGridTetrahedronVisibility, count << 6);
}

/*
==============
Load_GfxGpuLightGridTetrahedronVisibilityStream
==============
*/
void Load_GfxGpuLightGridTetrahedronVisibilityStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 13205, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxGpuLightGridTetrahedronVisibility;
    do
    {
      Load_Stream(AtStart, pos, 0x40ui64);
      pos = g_streamPosGlob.pos;
      varGfxGpuLightGridTetrahedronVisibility = (GfxGpuLightGridTetrahedronVisibility *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxGpuLightGridTransientData
==============
*/
void Load_GfxGpuLightGridTransientData(const DBStreamStart streamStart)
{
  GfxGpuLightGridTransientData *v1; 
  GfxGpuLightGrid *v2; 
  GfxStaticModelLightGridVolume *v3; 
  GfxDynamicLightsetLGppZoneInfo *v4; 
  GfxLightGridVolumeAtlasDataTemp **v5; 

  Load_Stream(streamStart, varGfxGpuLightGridTransientData, 0x28ui64);
  v1 = varGfxGpuLightGridTransientData;
  if ( varGfxGpuLightGridTransientData->gpuLightGrid )
  {
    v2 = varGfxGpuLightGrid;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->gpuLightGrid = (GfxGpuLightGrid *)g_streamPosGlob.pos;
    varGfxGpuLightGrid = (GfxGpuLightGrid *)g_streamPosGlob.pos;
    Load_GfxGpuLightGrid(AtStart);
    v1 = varGfxGpuLightGridTransientData;
    varGfxGpuLightGrid = v2;
  }
  if ( v1->staticModelVolumes )
  {
    v3 = varGfxStaticModelLightGridVolume;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->staticModelVolumes = (GfxStaticModelLightGridVolume *)g_streamPosGlob.pos;
    varGfxStaticModelLightGridVolume = (GfxStaticModelLightGridVolume *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, (unsigned __int64)varGfxGpuLightGridTransientData->staticModelVolumeCount << 6);
    v1 = varGfxGpuLightGridTransientData;
    varGfxStaticModelLightGridVolume = v3;
  }
  if ( v1->SMLGppZone )
  {
    v4 = varGfxDynamicLightsetLGppZoneInfo;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->SMLGppZone = (GfxDynamicLightsetLGppZoneInfo *)g_streamPosGlob.pos;
    varGfxDynamicLightsetLGppZoneInfo = (GfxDynamicLightsetLGppZoneInfo *)g_streamPosGlob.pos;
    Load_GfxDynamicLightsetLGppZoneInfo(AtStart);
    v1 = varGfxGpuLightGridTransientData;
    varGfxDynamicLightsetLGppZoneInfo = v4;
  }
  v5 = varGfxLightGridVolumeAtlasDataTempPtr;
  varGfxLightGridVolumeAtlasDataTempPtr = &v1->tempLightGridVolumeData;
  Load_GfxLightGridVolumeAtlasDataTempPtr(NotAtStart);
  varGfxLightGridVolumeAtlasDataTempPtr = v5;
}

/*
==============
Load_GfxGpuLightGridTransientDataArray
==============
*/
void Load_GfxGpuLightGridTransientDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxGpuLightGridTransientData *i; 
  GfxGpuLightGridTransientData *v4; 
  GfxGpuLightGrid *v5; 
  GfxStaticModelLightGridVolume *v6; 
  GfxDynamicLightsetLGppZoneInfo *v7; 
  GfxLightGridVolumeAtlasDataTemp **v8; 

  v2 = count;
  Load_Stream(streamStart, varGfxGpuLightGridTransientData, 40 * count);
  for ( i = varGfxGpuLightGridTransientData; v2; --v2 )
  {
    varGfxGpuLightGridTransientData = i;
    Load_Stream(NotAtStart, i, 0x28ui64);
    v4 = varGfxGpuLightGridTransientData;
    if ( varGfxGpuLightGridTransientData->gpuLightGrid )
    {
      v5 = varGfxGpuLightGrid;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->gpuLightGrid = (GfxGpuLightGrid *)g_streamPosGlob.pos;
      varGfxGpuLightGrid = (GfxGpuLightGrid *)g_streamPosGlob.pos;
      Load_GfxGpuLightGrid(AtStart);
      v4 = varGfxGpuLightGridTransientData;
      varGfxGpuLightGrid = v5;
    }
    if ( v4->staticModelVolumes )
    {
      v6 = varGfxStaticModelLightGridVolume;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->staticModelVolumes = (GfxStaticModelLightGridVolume *)g_streamPosGlob.pos;
      varGfxStaticModelLightGridVolume = (GfxStaticModelLightGridVolume *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, (unsigned __int64)varGfxGpuLightGridTransientData->staticModelVolumeCount << 6);
      v4 = varGfxGpuLightGridTransientData;
      varGfxStaticModelLightGridVolume = v6;
    }
    if ( v4->SMLGppZone )
    {
      v7 = varGfxDynamicLightsetLGppZoneInfo;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->SMLGppZone = (GfxDynamicLightsetLGppZoneInfo *)g_streamPosGlob.pos;
      varGfxDynamicLightsetLGppZoneInfo = (GfxDynamicLightsetLGppZoneInfo *)g_streamPosGlob.pos;
      Load_GfxDynamicLightsetLGppZoneInfo(AtStart);
      v4 = varGfxGpuLightGridTransientData;
      varGfxDynamicLightsetLGppZoneInfo = v7;
    }
    v8 = varGfxLightGridVolumeAtlasDataTempPtr;
    varGfxLightGridVolumeAtlasDataTempPtr = &v4->tempLightGridVolumeData;
    Load_GfxLightGridVolumeAtlasDataTempPtr(NotAtStart);
    ++i;
    varGfxLightGridVolumeAtlasDataTempPtr = v8;
  }
}

/*
==============
Load_GfxGpuLightGridTransientDataStream
==============
*/
void Load_GfxGpuLightGridTransientDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxGpuLightGridTransientData *v4; 
  GfxGpuLightGrid *v5; 
  GfxStaticModelLightGridVolume *v6; 
  GfxDynamicLightsetLGppZoneInfo *v7; 
  GfxLightGridVolumeAtlasDataTemp **v8; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 20456, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxGpuLightGridTransientData;
    do
    {
      Load_Stream(AtStart, pos, 0x28ui64);
      v4 = varGfxGpuLightGridTransientData;
      if ( varGfxGpuLightGridTransientData->gpuLightGrid )
      {
        v5 = varGfxGpuLightGrid;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->gpuLightGrid = (GfxGpuLightGrid *)g_streamPosGlob.pos;
        varGfxGpuLightGrid = (GfxGpuLightGrid *)g_streamPosGlob.pos;
        Load_GfxGpuLightGrid(AtStart);
        v4 = varGfxGpuLightGridTransientData;
        varGfxGpuLightGrid = v5;
      }
      if ( v4->staticModelVolumes )
      {
        v6 = varGfxStaticModelLightGridVolume;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->staticModelVolumes = (GfxStaticModelLightGridVolume *)g_streamPosGlob.pos;
        varGfxStaticModelLightGridVolume = (GfxStaticModelLightGridVolume *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, (unsigned __int64)varGfxGpuLightGridTransientData->staticModelVolumeCount << 6);
        v4 = varGfxGpuLightGridTransientData;
        varGfxStaticModelLightGridVolume = v6;
      }
      if ( v4->SMLGppZone )
      {
        v7 = varGfxDynamicLightsetLGppZoneInfo;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->SMLGppZone = (GfxDynamicLightsetLGppZoneInfo *)g_streamPosGlob.pos;
        varGfxDynamicLightsetLGppZoneInfo = (GfxDynamicLightsetLGppZoneInfo *)g_streamPosGlob.pos;
        Load_GfxDynamicLightsetLGppZoneInfo(AtStart);
        v4 = varGfxGpuLightGridTransientData;
        varGfxDynamicLightsetLGppZoneInfo = v7;
      }
      v8 = varGfxLightGridVolumeAtlasDataTempPtr;
      varGfxLightGridVolumeAtlasDataTempPtr = &v4->tempLightGridVolumeData;
      Load_GfxLightGridVolumeAtlasDataTempPtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varGfxGpuLightGridTransientData = (GfxGpuLightGridTransientData *)g_streamPosGlob.pos;
      varGfxLightGridVolumeAtlasDataTempPtr = v8;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxGpuLightGridVoxelStartTetrahedron
==============
*/
void Load_GfxGpuLightGridVoxelStartTetrahedron(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxGpuLightGridVoxelStartTetrahedron, 4ui64);
}

/*
==============
Load_GfxGpuLightGridVoxelStartTetrahedronArray
==============
*/
void Load_GfxGpuLightGridVoxelStartTetrahedronArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxGpuLightGridVoxelStartTetrahedron, 4 * count);
}

/*
==============
Load_GfxGpuLightGridVoxelStartTetrahedronStream
==============
*/
void Load_GfxGpuLightGridVoxelStartTetrahedronStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 13282, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxGpuLightGridVoxelStartTetrahedron;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varGfxGpuLightGridVoxelStartTetrahedron = (GfxGpuLightGridVoxelStartTetrahedron *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxGpuLightGridVoxelTree
==============
*/
void Load_GfxGpuLightGridVoxelTree(const DBStreamStart streamStart)
{
  GfxGpuLightGridVoxelTree *v1; 
  GfxVoxelTreeHeader *v2; 
  GfxGpuLightGridVoxelTree *v3; 
  GfxVoxelTopDownViewNode *v4; 
  GfxGpuLightGridVoxelTree *v5; 
  GfxVoxelInternalNode *v6; 
  GfxWrappedBuffer *v7; 
  GfxWrappedBuffer *p_treeHeaderBuffer; 
  GfxWrappedBuffer *p_topDownViewNodeBuffer; 
  GfxWrappedBuffer *p_internalNodeBuffer; 

  Load_Stream(streamStart, varGfxGpuLightGridVoxelTree, 0x80ui64);
  DB_PushStreamPos(6u);
  v1 = varGfxGpuLightGridVoxelTree;
  if ( varGfxGpuLightGridVoxelTree->treeHeader )
  {
    v2 = varGfxVoxelTreeHeader;
    DB_PatchMem_FixStreamAlignment(0xFui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->treeHeader = (GfxVoxelTreeHeader *)g_streamPosGlob.pos;
    varGfxVoxelTreeHeader = (GfxVoxelTreeHeader *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x40ui64);
    varGfxVoxelTreeHeader = v2;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(7u);
  v3 = varGfxGpuLightGridVoxelTree;
  if ( varGfxGpuLightGridVoxelTree->topDownViewNodes )
  {
    v4 = varGfxVoxelTopDownViewNode;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v3->topDownViewNodes = (GfxVoxelTopDownViewNode *)g_streamPosGlob.pos;
    varGfxVoxelTopDownViewNode = (GfxVoxelTopDownViewNode *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 12i64 * varGfxGpuLightGridVoxelTree->topDownViewNodeCount);
    varGfxVoxelTopDownViewNode = v4;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(7u);
  v5 = varGfxGpuLightGridVoxelTree;
  if ( varGfxGpuLightGridVoxelTree->internalNodes )
  {
    v6 = varGfxVoxelInternalNode;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v5->internalNodes = (GfxVoxelInternalNode *)g_streamPosGlob.pos;
    varGfxVoxelInternalNode = (GfxVoxelInternalNode *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varGfxGpuLightGridVoxelTree->internalNodeCount);
    varGfxVoxelInternalNode = v6;
  }
  DB_PopStreamPos();
  v7 = varGfxWrappedBuffer;
  p_treeHeaderBuffer = &varGfxGpuLightGridVoxelTree->treeHeaderBuffer;
  varGfxWrappedBuffer = &varGfxGpuLightGridVoxelTree->treeHeaderBuffer;
  Load_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_treeHeaderBuffer, GfxWrappedBuffer_Structured, 0x40u, 1u, varGfxGpuLightGridVoxelTree->treeHeader, "lightgrid voxel tree header", 0);
  p_topDownViewNodeBuffer = &varGfxGpuLightGridVoxelTree->topDownViewNodeBuffer;
  varGfxWrappedBuffer = &varGfxGpuLightGridVoxelTree->topDownViewNodeBuffer;
  Load_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_topDownViewNodeBuffer, GfxWrappedBuffer_Structured, 0xCu, varGfxGpuLightGridVoxelTree->topDownViewNodeCount, varGfxGpuLightGridVoxelTree->topDownViewNodes, "lightgrid voxel tree to-down nodes", 0);
  p_internalNodeBuffer = &varGfxGpuLightGridVoxelTree->internalNodeBuffer;
  varGfxWrappedBuffer = &varGfxGpuLightGridVoxelTree->internalNodeBuffer;
  Load_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_internalNodeBuffer, GfxWrappedBuffer_Structured, 0x10u, varGfxGpuLightGridVoxelTree->internalNodeCount, varGfxGpuLightGridVoxelTree->internalNodes, "lightgrid voxel tree internal nodes", 0);
  varGfxWrappedBuffer = v7;
}

/*
==============
Load_GfxGpuLightGridVoxelTreeArray
==============
*/
void Load_GfxGpuLightGridVoxelTreeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxGpuLightGridVoxelTree *i; 
  GfxGpuLightGridVoxelTree *v4; 
  GfxVoxelTreeHeader *v5; 
  GfxGpuLightGridVoxelTree *v6; 
  GfxVoxelTopDownViewNode *v7; 
  GfxGpuLightGridVoxelTree *v8; 
  GfxVoxelInternalNode *v9; 
  GfxWrappedBuffer *v10; 
  GfxWrappedBuffer *p_treeHeaderBuffer; 
  GfxWrappedBuffer *p_topDownViewNodeBuffer; 
  GfxWrappedBuffer *p_internalNodeBuffer; 

  v2 = count;
  Load_Stream(streamStart, varGfxGpuLightGridVoxelTree, count << 7);
  for ( i = varGfxGpuLightGridVoxelTree; v2; --v2 )
  {
    varGfxGpuLightGridVoxelTree = i;
    Load_Stream(NotAtStart, i, 0x80ui64);
    DB_PushStreamPos(6u);
    v4 = varGfxGpuLightGridVoxelTree;
    if ( varGfxGpuLightGridVoxelTree->treeHeader )
    {
      v5 = varGfxVoxelTreeHeader;
      DB_PatchMem_FixStreamAlignment(0xFui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->treeHeader = (GfxVoxelTreeHeader *)g_streamPosGlob.pos;
      varGfxVoxelTreeHeader = (GfxVoxelTreeHeader *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 0x40ui64);
      varGfxVoxelTreeHeader = v5;
    }
    DB_PopStreamPos();
    DB_PushStreamPos(7u);
    v6 = varGfxGpuLightGridVoxelTree;
    if ( varGfxGpuLightGridVoxelTree->topDownViewNodes )
    {
      v7 = varGfxVoxelTopDownViewNode;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      v6->topDownViewNodes = (GfxVoxelTopDownViewNode *)g_streamPosGlob.pos;
      varGfxVoxelTopDownViewNode = (GfxVoxelTopDownViewNode *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 12i64 * varGfxGpuLightGridVoxelTree->topDownViewNodeCount);
      varGfxVoxelTopDownViewNode = v7;
    }
    DB_PopStreamPos();
    DB_PushStreamPos(7u);
    v8 = varGfxGpuLightGridVoxelTree;
    if ( varGfxGpuLightGridVoxelTree->internalNodes )
    {
      v9 = varGfxVoxelInternalNode;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      v8->internalNodes = (GfxVoxelInternalNode *)g_streamPosGlob.pos;
      varGfxVoxelInternalNode = (GfxVoxelInternalNode *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varGfxGpuLightGridVoxelTree->internalNodeCount);
      varGfxVoxelInternalNode = v9;
    }
    DB_PopStreamPos();
    v10 = varGfxWrappedBuffer;
    p_treeHeaderBuffer = &varGfxGpuLightGridVoxelTree->treeHeaderBuffer;
    varGfxWrappedBuffer = &varGfxGpuLightGridVoxelTree->treeHeaderBuffer;
    Load_GfxWrappedBuffer(NotAtStart);
    Load_GfxWrappedBuffer(p_treeHeaderBuffer, GfxWrappedBuffer_Structured, 0x40u, 1u, varGfxGpuLightGridVoxelTree->treeHeader, "lightgrid voxel tree header", 0);
    p_topDownViewNodeBuffer = &varGfxGpuLightGridVoxelTree->topDownViewNodeBuffer;
    varGfxWrappedBuffer = &varGfxGpuLightGridVoxelTree->topDownViewNodeBuffer;
    Load_GfxWrappedBuffer(NotAtStart);
    Load_GfxWrappedBuffer(p_topDownViewNodeBuffer, GfxWrappedBuffer_Structured, 0xCu, varGfxGpuLightGridVoxelTree->topDownViewNodeCount, varGfxGpuLightGridVoxelTree->topDownViewNodes, "lightgrid voxel tree to-down nodes", 0);
    p_internalNodeBuffer = &varGfxGpuLightGridVoxelTree->internalNodeBuffer;
    varGfxWrappedBuffer = &varGfxGpuLightGridVoxelTree->internalNodeBuffer;
    Load_GfxWrappedBuffer(NotAtStart);
    Load_GfxWrappedBuffer(p_internalNodeBuffer, GfxWrappedBuffer_Structured, 0x10u, varGfxGpuLightGridVoxelTree->internalNodeCount, varGfxGpuLightGridVoxelTree->internalNodes, "lightgrid voxel tree internal nodes", 0);
    ++i;
    varGfxWrappedBuffer = v10;
  }
}

/*
==============
Load_GfxGpuLightGridVoxelTreeStream
==============
*/
void Load_GfxGpuLightGridVoxelTreeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxGpuLightGridVoxelTree *v4; 
  GfxVoxelTreeHeader *v5; 
  GfxGpuLightGridVoxelTree *v6; 
  GfxVoxelTopDownViewNode *v7; 
  GfxGpuLightGridVoxelTree *v8; 
  GfxVoxelInternalNode *v9; 
  GfxWrappedBuffer *v10; 
  GfxWrappedBuffer *p_treeHeaderBuffer; 
  GfxWrappedBuffer *p_topDownViewNodeBuffer; 
  GfxWrappedBuffer *p_internalNodeBuffer; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 14172, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxGpuLightGridVoxelTree;
    do
    {
      Load_Stream(AtStart, pos, 0x80ui64);
      DB_PushStreamPos(6u);
      v4 = varGfxGpuLightGridVoxelTree;
      if ( varGfxGpuLightGridVoxelTree->treeHeader )
      {
        v5 = varGfxVoxelTreeHeader;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->treeHeader = (GfxVoxelTreeHeader *)g_streamPosGlob.pos;
        varGfxVoxelTreeHeader = (GfxVoxelTreeHeader *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x40ui64);
        varGfxVoxelTreeHeader = v5;
      }
      DB_PopStreamPos();
      DB_PushStreamPos(7u);
      v6 = varGfxGpuLightGridVoxelTree;
      if ( varGfxGpuLightGridVoxelTree->topDownViewNodes )
      {
        v7 = varGfxVoxelTopDownViewNode;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v6->topDownViewNodes = (GfxVoxelTopDownViewNode *)g_streamPosGlob.pos;
        varGfxVoxelTopDownViewNode = (GfxVoxelTopDownViewNode *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 12i64 * varGfxGpuLightGridVoxelTree->topDownViewNodeCount);
        varGfxVoxelTopDownViewNode = v7;
      }
      DB_PopStreamPos();
      DB_PushStreamPos(7u);
      v8 = varGfxGpuLightGridVoxelTree;
      if ( varGfxGpuLightGridVoxelTree->internalNodes )
      {
        v9 = varGfxVoxelInternalNode;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v8->internalNodes = (GfxVoxelInternalNode *)g_streamPosGlob.pos;
        varGfxVoxelInternalNode = (GfxVoxelInternalNode *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varGfxGpuLightGridVoxelTree->internalNodeCount);
        varGfxVoxelInternalNode = v9;
      }
      DB_PopStreamPos();
      v10 = varGfxWrappedBuffer;
      p_treeHeaderBuffer = &varGfxGpuLightGridVoxelTree->treeHeaderBuffer;
      varGfxWrappedBuffer = &varGfxGpuLightGridVoxelTree->treeHeaderBuffer;
      Load_GfxWrappedBuffer(NotAtStart);
      Load_GfxWrappedBuffer(p_treeHeaderBuffer, GfxWrappedBuffer_Structured, 0x40u, 1u, varGfxGpuLightGridVoxelTree->treeHeader, "lightgrid voxel tree header", 0);
      p_topDownViewNodeBuffer = &varGfxGpuLightGridVoxelTree->topDownViewNodeBuffer;
      varGfxWrappedBuffer = &varGfxGpuLightGridVoxelTree->topDownViewNodeBuffer;
      Load_GfxWrappedBuffer(NotAtStart);
      Load_GfxWrappedBuffer(p_topDownViewNodeBuffer, GfxWrappedBuffer_Structured, 0xCu, varGfxGpuLightGridVoxelTree->topDownViewNodeCount, varGfxGpuLightGridVoxelTree->topDownViewNodes, "lightgrid voxel tree to-down nodes", 0);
      p_internalNodeBuffer = &varGfxGpuLightGridVoxelTree->internalNodeBuffer;
      varGfxWrappedBuffer = &varGfxGpuLightGridVoxelTree->internalNodeBuffer;
      Load_GfxWrappedBuffer(NotAtStart);
      Load_GfxWrappedBuffer(p_internalNodeBuffer, GfxWrappedBuffer_Structured, 0x10u, varGfxGpuLightGridVoxelTree->internalNodeCount, varGfxGpuLightGridVoxelTree->internalNodes, "lightgrid voxel tree internal nodes", 0);
      pos = g_streamPosGlob.pos;
      varGfxGpuLightGridVoxelTree = (GfxGpuLightGridVoxelTree *)g_streamPosGlob.pos;
      varGfxWrappedBuffer = v10;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxGpuLightGridZone
==============
*/
void Load_GfxGpuLightGridZone(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxGpuLightGridZone, 0x5Cui64);
}

/*
==============
Load_GfxGpuLightGridZoneArray
==============
*/
void Load_GfxGpuLightGridZoneArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxGpuLightGridZone, 92 * count);
}

/*
==============
Load_GfxGpuLightGridZoneStream
==============
*/
void Load_GfxGpuLightGridZoneStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 12974, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxGpuLightGridZone;
    do
    {
      Load_Stream(AtStart, pos, 0x5Cui64);
      pos = g_streamPosGlob.pos;
      varGfxGpuLightGridZone = (GfxGpuLightGridZone *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxHeightfield
==============
*/
void Load_GfxHeightfield(const DBStreamStart streamStart)
{
  GfxImage **v1; 

  Load_Stream(streamStart, varGfxHeightfield, 0x60ui64);
  v1 = varGfxImagePtr;
  varGfxImagePtr = &varGfxHeightfield->image;
  Load_GfxImagePtr(NotAtStart);
  varGfxImagePtr = v1;
}

/*
==============
Load_GfxHeightfieldArray
==============
*/
void Load_GfxHeightfieldArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxHeightfield *i; 
  GfxImage **v4; 

  v2 = count;
  Load_Stream(streamStart, varGfxHeightfield, 96 * count);
  for ( i = varGfxHeightfield; v2; --v2 )
  {
    varGfxHeightfield = i;
    Load_Stream(NotAtStart, i, 0x60ui64);
    v4 = varGfxImagePtr;
    varGfxImagePtr = &varGfxHeightfield->image;
    Load_GfxImagePtr(NotAtStart);
    ++i;
    varGfxImagePtr = v4;
  }
}

/*
==============
Load_GfxHeightfieldStream
==============
*/
void Load_GfxHeightfieldStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxImage **v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 25837, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxHeightfield;
    do
    {
      Load_Stream(AtStart, pos, 0x60ui64);
      v4 = varGfxImagePtr;
      varGfxImagePtr = &varGfxHeightfield->image;
      Load_GfxImagePtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varGfxHeightfield = (GfxHeightfield *)g_streamPosGlob.pos;
      varGfxImagePtr = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxLightAABB
==============
*/
void Load_GfxLightAABB(const DBStreamStart streamStart)
{
  GfxLightAABB *v1; 
  GfxLightAABBNode *v2; 
  unsigned __int16 *v3; 
  unsigned __int16 *ushort; 

  Load_Stream(streamStart, varGfxLightAABB, 0x18ui64);
  v1 = varGfxLightAABB;
  if ( varGfxLightAABB->nodeArray )
  {
    v2 = varGfxLightAABBNode;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->nodeArray = (GfxLightAABBNode *)g_streamPosGlob.pos;
    varGfxLightAABBNode = (GfxLightAABBNode *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 28i64 * varGfxLightAABB->nodeCount);
    v1 = varGfxLightAABB;
    varGfxLightAABBNode = v2;
  }
  if ( v1->lightArray )
  {
    v3 = varushort;
    ushort = AllocLoad_ushort();
    v1->lightArray = ushort;
    varushort = ushort;
    Load_ushortArray(AtStart, varGfxLightAABB->lightCount);
    varushort = v3;
  }
}

/*
==============
Load_GfxLightAABBArray
==============
*/
void Load_GfxLightAABBArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxLightAABB *i; 
  GfxLightAABB *v4; 
  GfxLightAABBNode *v5; 
  unsigned __int16 *v6; 
  unsigned __int16 *ushort; 

  v2 = count;
  Load_Stream(streamStart, varGfxLightAABB, 24 * count);
  for ( i = varGfxLightAABB; v2; --v2 )
  {
    varGfxLightAABB = i;
    Load_Stream(NotAtStart, i, 0x18ui64);
    v4 = varGfxLightAABB;
    if ( varGfxLightAABB->nodeArray )
    {
      v5 = varGfxLightAABBNode;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->nodeArray = (GfxLightAABBNode *)g_streamPosGlob.pos;
      varGfxLightAABBNode = (GfxLightAABBNode *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 28i64 * varGfxLightAABB->nodeCount);
      v4 = varGfxLightAABB;
      varGfxLightAABBNode = v5;
    }
    if ( v4->lightArray )
    {
      v6 = varushort;
      ushort = AllocLoad_ushort();
      v4->lightArray = ushort;
      varushort = ushort;
      Load_ushortArray(AtStart, varGfxLightAABB->lightCount);
      varushort = v6;
    }
    ++i;
  }
}

/*
==============
Load_GfxLightAABBNode
==============
*/
void Load_GfxLightAABBNode(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxLightAABBNode, 0x1Cui64);
}

/*
==============
Load_GfxLightAABBNodeArray
==============
*/
void Load_GfxLightAABBNodeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxLightAABBNode, 28 * count);
}

/*
==============
Load_GfxLightAABBNodeStream
==============
*/
void Load_GfxLightAABBNodeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 15203, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxLightAABBNode;
    do
    {
      Load_Stream(AtStart, pos, 0x1Cui64);
      pos = g_streamPosGlob.pos;
      varGfxLightAABBNode = (GfxLightAABBNode *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxLightAABBStream
==============
*/
void Load_GfxLightAABBStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxLightAABB *v4; 
  GfxLightAABBNode *v5; 
  unsigned __int16 *v6; 
  unsigned __int16 *ushort; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 15355, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxLightAABB;
    do
    {
      Load_Stream(AtStart, pos, 0x18ui64);
      v4 = varGfxLightAABB;
      if ( varGfxLightAABB->nodeArray )
      {
        v5 = varGfxLightAABBNode;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->nodeArray = (GfxLightAABBNode *)g_streamPosGlob.pos;
        varGfxLightAABBNode = (GfxLightAABBNode *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 28i64 * varGfxLightAABB->nodeCount);
        v4 = varGfxLightAABB;
        varGfxLightAABBNode = v5;
      }
      if ( v4->lightArray )
      {
        v6 = varushort;
        ushort = AllocLoad_ushort();
        v4->lightArray = ushort;
        varushort = ushort;
        Load_ushortArray(AtStart, varGfxLightAABB->lightCount);
        varushort = v6;
      }
      pos = g_streamPosGlob.pos;
      varGfxLightAABB = (GfxLightAABB *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxLightGridType
==============
*/
void Load_GfxLightGridType(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxLightGridType, 1ui64);
}

/*
==============
Load_GfxLightGridTypeArray
==============
*/
void Load_GfxLightGridTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxLightGridType, count);
}

/*
==============
Load_GfxLightGridTypeStream
==============
*/
void Load_GfxLightGridTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 21581, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxLightGridType;
    do
    {
      Load_Stream(AtStart, pos, 1ui64);
      pos = g_streamPosGlob.pos;
      varGfxLightGridType = (GfxLightGridType *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxLightGridVolumeAtlasDataTemp
==============
*/
void Load_GfxLightGridVolumeAtlasDataTemp(const DBStreamStart streamStart)
{
  GfxImageRaw *v1; 
  GfxLightGridVolumeAtlasDataTemp *v2; 
  LightGridVolumePackingParams *v3; 
  GfxWrappedBuffer *v4; 
  GfxWrappedBuffer *p_m_packingParamsBuffer; 
  GfxLightGridVolumeAtlasDataTemp *v6; 
  LightGridVolumeTransformParams *v7; 
  GfxWrappedBuffer *v8; 
  GfxWrappedBuffer *p_m_transformParamsBuffer; 

  Load_Stream(streamStart, varGfxLightGridVolumeAtlasDataTemp, 0xB0ui64);
  v1 = varGfxImageRawGpuTemp;
  varGfxImageRawGpuTemp = varGfxLightGridVolumeAtlasDataTemp->m_textures;
  Load_GfxImageRawGpuTempArray(NotAtStart, 2ui64);
  varGfxImageRawGpuTemp = v1;
  DB_PushStreamPos(0xAu);
  v2 = varGfxLightGridVolumeAtlasDataTemp;
  if ( varGfxLightGridVolumeAtlasDataTemp->m_packingParams )
  {
    v3 = varLightGridVolumePackingParams;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->m_packingParams = (LightGridVolumePackingParams *)g_streamPosGlob.pos;
    varLightGridVolumePackingParams = (LightGridVolumePackingParams *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 32i64 * varGfxLightGridVolumeAtlasDataTemp->m_numVolumes);
    varLightGridVolumePackingParams = v3;
  }
  DB_PopStreamPos();
  v4 = varGfxWrappedBuffer;
  p_m_packingParamsBuffer = &varGfxLightGridVolumeAtlasDataTemp->m_packingParamsBuffer;
  varGfxWrappedBuffer = &varGfxLightGridVolumeAtlasDataTemp->m_packingParamsBuffer;
  Load_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_m_packingParamsBuffer, GfxWrappedBuffer_Structured, 0x20u, varGfxLightGridVolumeAtlasDataTemp->m_numVolumes, varGfxLightGridVolumeAtlasDataTemp->m_packingParams, "static lgv packing params", 0);
  varGfxWrappedBuffer = v4;
  DB_PushStreamPos(0xAu);
  v6 = varGfxLightGridVolumeAtlasDataTemp;
  if ( varGfxLightGridVolumeAtlasDataTemp->m_transformParams )
  {
    v7 = varLightGridVolumeTransformParams;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v6->m_transformParams = (LightGridVolumeTransformParams *)g_streamPosGlob.pos;
    varLightGridVolumeTransformParams = (LightGridVolumeTransformParams *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, (unsigned __int64)varGfxLightGridVolumeAtlasDataTemp->m_numVolumes << 6);
    varLightGridVolumeTransformParams = v7;
  }
  DB_PopStreamPos();
  v8 = varGfxWrappedBuffer;
  p_m_transformParamsBuffer = &varGfxLightGridVolumeAtlasDataTemp->m_transformParamsBuffer;
  varGfxWrappedBuffer = &varGfxLightGridVolumeAtlasDataTemp->m_transformParamsBuffer;
  Load_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_m_transformParamsBuffer, GfxWrappedBuffer_Structured, 0x40u, varGfxLightGridVolumeAtlasDataTemp->m_numVolumes, varGfxLightGridVolumeAtlasDataTemp->m_transformParams, "static lgv transform params", 0);
  varGfxWrappedBuffer = v8;
}

/*
==============
Load_GfxLightGridVolumeAtlasDataTempArray
==============
*/
void Load_GfxLightGridVolumeAtlasDataTempArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxLightGridVolumeAtlasDataTemp *i; 
  GfxImageRaw *v4; 
  GfxLightGridVolumeAtlasDataTemp *v5; 
  LightGridVolumePackingParams *v6; 
  GfxWrappedBuffer *v7; 
  GfxWrappedBuffer *p_m_packingParamsBuffer; 
  GfxLightGridVolumeAtlasDataTemp *v9; 
  LightGridVolumeTransformParams *v10; 
  GfxWrappedBuffer *v11; 
  GfxWrappedBuffer *p_m_transformParamsBuffer; 

  v2 = count;
  Load_Stream(streamStart, varGfxLightGridVolumeAtlasDataTemp, 176 * count);
  for ( i = varGfxLightGridVolumeAtlasDataTemp; v2; --v2 )
  {
    varGfxLightGridVolumeAtlasDataTemp = i;
    Load_Stream(NotAtStart, i, 0xB0ui64);
    v4 = varGfxImageRawGpuTemp;
    varGfxImageRawGpuTemp = varGfxLightGridVolumeAtlasDataTemp->m_textures;
    Load_GfxImageRawGpuTempArray(NotAtStart, 2ui64);
    varGfxImageRawGpuTemp = v4;
    DB_PushStreamPos(0xAu);
    v5 = varGfxLightGridVolumeAtlasDataTemp;
    if ( varGfxLightGridVolumeAtlasDataTemp->m_packingParams )
    {
      v6 = varLightGridVolumePackingParams;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      v5->m_packingParams = (LightGridVolumePackingParams *)g_streamPosGlob.pos;
      varLightGridVolumePackingParams = (LightGridVolumePackingParams *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 32i64 * varGfxLightGridVolumeAtlasDataTemp->m_numVolumes);
      varLightGridVolumePackingParams = v6;
    }
    DB_PopStreamPos();
    v7 = varGfxWrappedBuffer;
    p_m_packingParamsBuffer = &varGfxLightGridVolumeAtlasDataTemp->m_packingParamsBuffer;
    varGfxWrappedBuffer = &varGfxLightGridVolumeAtlasDataTemp->m_packingParamsBuffer;
    Load_GfxWrappedBuffer(NotAtStart);
    Load_GfxWrappedBuffer(p_m_packingParamsBuffer, GfxWrappedBuffer_Structured, 0x20u, varGfxLightGridVolumeAtlasDataTemp->m_numVolumes, varGfxLightGridVolumeAtlasDataTemp->m_packingParams, "static lgv packing params", 0);
    varGfxWrappedBuffer = v7;
    DB_PushStreamPos(0xAu);
    v9 = varGfxLightGridVolumeAtlasDataTemp;
    if ( varGfxLightGridVolumeAtlasDataTemp->m_transformParams )
    {
      v10 = varLightGridVolumeTransformParams;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      v9->m_transformParams = (LightGridVolumeTransformParams *)g_streamPosGlob.pos;
      varLightGridVolumeTransformParams = (LightGridVolumeTransformParams *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, (unsigned __int64)varGfxLightGridVolumeAtlasDataTemp->m_numVolumes << 6);
      varLightGridVolumeTransformParams = v10;
    }
    DB_PopStreamPos();
    v11 = varGfxWrappedBuffer;
    p_m_transformParamsBuffer = &varGfxLightGridVolumeAtlasDataTemp->m_transformParamsBuffer;
    varGfxWrappedBuffer = &varGfxLightGridVolumeAtlasDataTemp->m_transformParamsBuffer;
    Load_GfxWrappedBuffer(NotAtStart);
    Load_GfxWrappedBuffer(p_m_transformParamsBuffer, GfxWrappedBuffer_Structured, 0x40u, varGfxLightGridVolumeAtlasDataTemp->m_numVolumes, varGfxLightGridVolumeAtlasDataTemp->m_transformParams, "static lgv transform params", 0);
    ++i;
    varGfxWrappedBuffer = v11;
  }
}

/*
==============
Load_GfxLightGridVolumeAtlasDataTempPtr
==============
*/
void Load_GfxLightGridVolumeAtlasDataTempPtr(const DBStreamStart streamStart)
{
  GfxLightGridVolumeAtlasDataTemp **v1; 
  GfxLightGridVolumeAtlasDataTemp *v2; 
  unsigned __int8 *pos; 
  XZoneHandleUnique CurrentZoneLoadHandleUnique; 

  Load_Stream(streamStart, varGfxLightGridVolumeAtlasDataTempPtr, 8ui64);
  v1 = varGfxLightGridVolumeAtlasDataTempPtr;
  if ( *varGfxLightGridVolumeAtlasDataTempPtr )
  {
    v2 = varGfxLightGridVolumeAtlasDataTemp;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    pos = g_streamPosGlob.pos;
    *v1 = (GfxLightGridVolumeAtlasDataTemp *)g_streamPosGlob.pos;
    varGfxLightGridVolumeAtlasDataTemp = (GfxLightGridVolumeAtlasDataTemp *)pos;
    Load_GfxLightGridVolumeAtlasDataTemp(AtStart);
    CurrentZoneLoadHandleUnique = DB_Zones_GetCurrentZoneLoadHandleUnique();
    DB_ScheduleBackendCallback<GfxLightGridVolumeAtlasDataTemp>(CurrentZoneLoadHandleUnique, RB_ProcessGfxLightGridVolumeAtlasData, varGfxLightGridVolumeAtlasDataTemp);
    *v1 = NULL;
    varGfxLightGridVolumeAtlasDataTemp = v2;
  }
}

/*
==============
Load_GfxLightGridVolumeAtlasDataTempPtrArray
==============
*/
void Load_GfxLightGridVolumeAtlasDataTempPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxLightGridVolumeAtlasDataTemp **i; 
  GfxLightGridVolumeAtlasDataTemp **v4; 
  GfxLightGridVolumeAtlasDataTemp *v5; 
  XZoneHandleUnique CurrentZoneLoadHandleUnique; 

  v2 = count;
  Load_Stream(streamStart, varGfxLightGridVolumeAtlasDataTempPtr, 8 * count);
  for ( i = varGfxLightGridVolumeAtlasDataTempPtr; v2; --v2 )
  {
    varGfxLightGridVolumeAtlasDataTempPtr = i;
    Load_Stream(NotAtStart, i, 8ui64);
    v4 = varGfxLightGridVolumeAtlasDataTempPtr;
    if ( *varGfxLightGridVolumeAtlasDataTempPtr )
    {
      v5 = varGfxLightGridVolumeAtlasDataTemp;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      *v4 = (GfxLightGridVolumeAtlasDataTemp *)g_streamPosGlob.pos;
      varGfxLightGridVolumeAtlasDataTemp = (GfxLightGridVolumeAtlasDataTemp *)g_streamPosGlob.pos;
      Load_GfxLightGridVolumeAtlasDataTemp(AtStart);
      CurrentZoneLoadHandleUnique = DB_Zones_GetCurrentZoneLoadHandleUnique();
      DB_ScheduleBackendCallback<GfxLightGridVolumeAtlasDataTemp>(CurrentZoneLoadHandleUnique, RB_ProcessGfxLightGridVolumeAtlasData, varGfxLightGridVolumeAtlasDataTemp);
      *v4 = NULL;
      varGfxLightGridVolumeAtlasDataTemp = v5;
    }
    ++i;
  }
}

/*
==============
Load_GfxLightGridVolumeAtlasDataTempPtrStream
==============
*/
void Load_GfxLightGridVolumeAtlasDataTempPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxLightGridVolumeAtlasDataTemp **v4; 
  GfxLightGridVolumeAtlasDataTemp *v5; 
  XZoneHandleUnique CurrentZoneLoadHandleUnique; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 20276, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxLightGridVolumeAtlasDataTempPtr;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      v4 = varGfxLightGridVolumeAtlasDataTempPtr;
      if ( *varGfxLightGridVolumeAtlasDataTempPtr )
      {
        v5 = varGfxLightGridVolumeAtlasDataTemp;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        *v4 = (GfxLightGridVolumeAtlasDataTemp *)g_streamPosGlob.pos;
        varGfxLightGridVolumeAtlasDataTemp = (GfxLightGridVolumeAtlasDataTemp *)g_streamPosGlob.pos;
        Load_GfxLightGridVolumeAtlasDataTemp(AtStart);
        CurrentZoneLoadHandleUnique = DB_Zones_GetCurrentZoneLoadHandleUnique();
        DB_ScheduleBackendCallback<GfxLightGridVolumeAtlasDataTemp>(CurrentZoneLoadHandleUnique, RB_ProcessGfxLightGridVolumeAtlasData, varGfxLightGridVolumeAtlasDataTemp);
        *v4 = NULL;
        varGfxLightGridVolumeAtlasDataTemp = v5;
      }
      pos = g_streamPosGlob.pos;
      varGfxLightGridVolumeAtlasDataTempPtr = (GfxLightGridVolumeAtlasDataTemp **)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxLightGridVolumeAtlasDataTempStream
==============
*/
void Load_GfxLightGridVolumeAtlasDataTempStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxImageRaw *v4; 
  GfxLightGridVolumeAtlasDataTemp *v5; 
  LightGridVolumePackingParams *v6; 
  GfxWrappedBuffer *v7; 
  GfxWrappedBuffer *p_m_packingParamsBuffer; 
  GfxLightGridVolumeAtlasDataTemp *v9; 
  LightGridVolumeTransformParams *v10; 
  GfxWrappedBuffer *v11; 
  GfxWrappedBuffer *p_m_transformParamsBuffer; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 22176, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxLightGridVolumeAtlasDataTemp;
    do
    {
      Load_Stream(AtStart, pos, 0xB0ui64);
      v4 = varGfxImageRawGpuTemp;
      varGfxImageRawGpuTemp = varGfxLightGridVolumeAtlasDataTemp->m_textures;
      Load_GfxImageRawGpuTempArray(NotAtStart, 2ui64);
      varGfxImageRawGpuTemp = v4;
      DB_PushStreamPos(0xAu);
      v5 = varGfxLightGridVolumeAtlasDataTemp;
      if ( varGfxLightGridVolumeAtlasDataTemp->m_packingParams )
      {
        v6 = varLightGridVolumePackingParams;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v5->m_packingParams = (LightGridVolumePackingParams *)g_streamPosGlob.pos;
        varLightGridVolumePackingParams = (LightGridVolumePackingParams *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 32i64 * varGfxLightGridVolumeAtlasDataTemp->m_numVolumes);
        varLightGridVolumePackingParams = v6;
      }
      DB_PopStreamPos();
      v7 = varGfxWrappedBuffer;
      p_m_packingParamsBuffer = &varGfxLightGridVolumeAtlasDataTemp->m_packingParamsBuffer;
      varGfxWrappedBuffer = &varGfxLightGridVolumeAtlasDataTemp->m_packingParamsBuffer;
      Load_GfxWrappedBuffer(NotAtStart);
      Load_GfxWrappedBuffer(p_m_packingParamsBuffer, GfxWrappedBuffer_Structured, 0x20u, varGfxLightGridVolumeAtlasDataTemp->m_numVolumes, varGfxLightGridVolumeAtlasDataTemp->m_packingParams, "static lgv packing params", 0);
      varGfxWrappedBuffer = v7;
      DB_PushStreamPos(0xAu);
      v9 = varGfxLightGridVolumeAtlasDataTemp;
      if ( varGfxLightGridVolumeAtlasDataTemp->m_transformParams )
      {
        v10 = varLightGridVolumeTransformParams;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v9->m_transformParams = (LightGridVolumeTransformParams *)g_streamPosGlob.pos;
        varLightGridVolumeTransformParams = (LightGridVolumeTransformParams *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, (unsigned __int64)varGfxLightGridVolumeAtlasDataTemp->m_numVolumes << 6);
        varLightGridVolumeTransformParams = v10;
      }
      DB_PopStreamPos();
      v11 = varGfxWrappedBuffer;
      p_m_transformParamsBuffer = &varGfxLightGridVolumeAtlasDataTemp->m_transformParamsBuffer;
      varGfxWrappedBuffer = &varGfxLightGridVolumeAtlasDataTemp->m_transformParamsBuffer;
      Load_GfxWrappedBuffer(NotAtStart);
      Load_GfxWrappedBuffer(p_m_transformParamsBuffer, GfxWrappedBuffer_Structured, 0x40u, varGfxLightGridVolumeAtlasDataTemp->m_numVolumes, varGfxLightGridVolumeAtlasDataTemp->m_transformParams, "static lgv transform params", 0);
      pos = g_streamPosGlob.pos;
      varGfxLightGridVolumeAtlasDataTemp = (GfxLightGridVolumeAtlasDataTemp *)g_streamPosGlob.pos;
      varGfxWrappedBuffer = v11;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxLightViewFrustum
==============
*/
void Load_GfxLightViewFrustum(const DBStreamStart streamStart)
{
  GfxLightViewFrustum *v1; 
  vec4_t *v2; 
  vec4_t *vec4_t; 
  unsigned __int8 *v4; 
  unsigned __int8 *byte; 
  vec3_t *v6; 
  vec3_t *vec3_t; 

  Load_Stream(streamStart, varGfxLightViewFrustum, 0x20ui64);
  v1 = varGfxLightViewFrustum;
  if ( varGfxLightViewFrustum->planes )
  {
    v2 = varvec4_t;
    vec4_t = AllocLoad_vec4_t();
    v1->planes = vec4_t;
    varvec4_t = vec4_t;
    Load_vec4_tArray(AtStart, varGfxLightViewFrustum->planeCount);
    v1 = varGfxLightViewFrustum;
    varvec4_t = v2;
  }
  if ( v1->indices )
  {
    v4 = varbyte;
    byte = AllocLoad_byte();
    v1->indices = byte;
    varbyte = byte;
    Load_byteArray(AtStart, varGfxLightViewFrustum->indexCount);
    v1 = varGfxLightViewFrustum;
    varbyte = v4;
  }
  if ( v1->vertices )
  {
    v6 = varvec3_t;
    vec3_t = AllocLoad_vec3_t();
    v1->vertices = vec3_t;
    varvec3_t = vec3_t;
    Load_vec3_tArray(AtStart, varGfxLightViewFrustum->vertexCount);
    varvec3_t = v6;
  }
}

/*
==============
Load_GfxLightViewFrustumArray
==============
*/
void Load_GfxLightViewFrustumArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxLightViewFrustum *i; 
  GfxLightViewFrustum *v4; 
  vec4_t *v5; 
  vec4_t *vec4_t; 
  unsigned __int8 *v7; 
  unsigned __int8 *byte; 
  vec3_t *v9; 
  vec3_t *vec3_t; 

  v2 = count;
  Load_Stream(streamStart, varGfxLightViewFrustum, 32 * count);
  for ( i = varGfxLightViewFrustum; v2; --v2 )
  {
    varGfxLightViewFrustum = i;
    Load_Stream(NotAtStart, i, 0x20ui64);
    v4 = varGfxLightViewFrustum;
    if ( varGfxLightViewFrustum->planes )
    {
      v5 = varvec4_t;
      vec4_t = AllocLoad_vec4_t();
      v4->planes = vec4_t;
      varvec4_t = vec4_t;
      Load_vec4_tArray(AtStart, varGfxLightViewFrustum->planeCount);
      v4 = varGfxLightViewFrustum;
      varvec4_t = v5;
    }
    if ( v4->indices )
    {
      v7 = varbyte;
      byte = AllocLoad_byte();
      v4->indices = byte;
      varbyte = byte;
      Load_byteArray(AtStart, varGfxLightViewFrustum->indexCount);
      v4 = varGfxLightViewFrustum;
      varbyte = v7;
    }
    if ( v4->vertices )
    {
      v9 = varvec3_t;
      vec3_t = AllocLoad_vec3_t();
      v4->vertices = vec3_t;
      varvec3_t = vec3_t;
      Load_vec3_tArray(AtStart, varGfxLightViewFrustum->vertexCount);
      varvec3_t = v9;
    }
    ++i;
  }
}

/*
==============
Load_GfxLightViewFrustumStream
==============
*/
void Load_GfxLightViewFrustumStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxLightViewFrustum *pos; 
  GfxLightViewFrustum *v4; 
  vec4_t *v5; 
  vec4_t *vec4_t; 
  unsigned __int8 *v7; 
  unsigned __int8 *byte; 
  vec3_t *v9; 
  vec3_t *vec3_t; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 26539, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = varGfxLightViewFrustum;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      v4 = varGfxLightViewFrustum;
      if ( varGfxLightViewFrustum->planes )
      {
        v5 = varvec4_t;
        vec4_t = AllocLoad_vec4_t();
        v4->planes = vec4_t;
        varvec4_t = vec4_t;
        Load_vec4_tArray(AtStart, varGfxLightViewFrustum->planeCount);
        v4 = varGfxLightViewFrustum;
        varvec4_t = v5;
      }
      if ( v4->indices )
      {
        v7 = varbyte;
        byte = AllocLoad_byte();
        v4->indices = byte;
        varbyte = byte;
        Load_byteArray(AtStart, varGfxLightViewFrustum->indexCount);
        v4 = varGfxLightViewFrustum;
        varbyte = v7;
      }
      if ( v4->vertices )
      {
        v9 = varvec3_t;
        vec3_t = AllocLoad_vec3_t();
        v4->vertices = vec3_t;
        varvec3_t = vec3_t;
        Load_vec3_tArray(AtStart, varGfxLightViewFrustum->vertexCount);
        varvec3_t = v9;
      }
      pos = (GfxLightViewFrustum *)g_streamPosGlob.pos;
      varGfxLightViewFrustum = (GfxLightViewFrustum *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxLightmapAtlasDataTemp
==============
*/
void Load_GfxLightmapAtlasDataTemp(const DBStreamStart streamStart)
{
  GfxLightmapRaw *v1; 
  GfxLightmapRaw *v2; 
  __int64 v3; 
  GfxImageRaw *v4; 

  Load_Stream(streamStart, varGfxLightmapAtlasDataTemp, 0xF10ui64);
  v1 = varGfxLightmapRaw;
  varGfxLightmapRaw = varGfxLightmapAtlasDataTemp->lightmaps;
  Load_Stream(NotAtStart, varGfxLightmapAtlasDataTemp->lightmaps, 0xF00ui64);
  v2 = varGfxLightmapRaw;
  v3 = 32i64;
  do
  {
    varGfxLightmapRaw = v2;
    Load_Stream(NotAtStart, v2, 0x78ui64);
    v4 = varGfxImageRawGpuTemp;
    varGfxImageRawGpuTemp = (GfxImageRaw *)varGfxLightmapRaw;
    Load_GfxImageRawGpuTempArray(NotAtStart, 3ui64);
    ++v2;
    varGfxImageRawGpuTemp = v4;
    --v3;
  }
  while ( v3 );
  varGfxLightmapRaw = v1;
}

/*
==============
Load_GfxLightmapAtlasDataTempArray
==============
*/
void Load_GfxLightmapAtlasDataTempArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxLightmapAtlasDataTemp *i; 
  GfxLightmapRaw *v4; 
  GfxLightmapRaw *v5; 
  __int64 v6; 
  GfxImageRaw *v7; 

  v2 = count;
  Load_Stream(streamStart, varGfxLightmapAtlasDataTemp, 3856 * count);
  for ( i = varGfxLightmapAtlasDataTemp; v2; --v2 )
  {
    varGfxLightmapAtlasDataTemp = i;
    Load_Stream(NotAtStart, i, 0xF10ui64);
    v4 = varGfxLightmapRaw;
    varGfxLightmapRaw = varGfxLightmapAtlasDataTemp->lightmaps;
    Load_Stream(NotAtStart, varGfxLightmapAtlasDataTemp->lightmaps, 0xF00ui64);
    v5 = varGfxLightmapRaw;
    v6 = 32i64;
    do
    {
      varGfxLightmapRaw = v5;
      Load_Stream(NotAtStart, v5, 0x78ui64);
      v7 = varGfxImageRawGpuTemp;
      varGfxImageRawGpuTemp = (GfxImageRaw *)varGfxLightmapRaw;
      Load_GfxImageRawGpuTempArray(NotAtStart, 3ui64);
      ++v5;
      varGfxImageRawGpuTemp = v7;
      --v6;
    }
    while ( v6 );
    ++i;
    varGfxLightmapRaw = v4;
  }
}

/*
==============
Load_GfxLightmapAtlasDataTempPtr
==============
*/
void Load_GfxLightmapAtlasDataTempPtr(const DBStreamStart streamStart)
{
  GfxLightmapAtlasDataTemp **v1; 
  GfxLightmapAtlasDataTemp *v2; 
  unsigned __int8 *pos; 
  XZoneHandleUnique CurrentZoneLoadHandleUnique; 

  Load_Stream(streamStart, varGfxLightmapAtlasDataTempPtr, 8ui64);
  v1 = varGfxLightmapAtlasDataTempPtr;
  if ( *varGfxLightmapAtlasDataTempPtr )
  {
    v2 = varGfxLightmapAtlasDataTemp;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    pos = g_streamPosGlob.pos;
    *v1 = (GfxLightmapAtlasDataTemp *)g_streamPosGlob.pos;
    varGfxLightmapAtlasDataTemp = (GfxLightmapAtlasDataTemp *)pos;
    Load_GfxLightmapAtlasDataTemp(AtStart);
    CurrentZoneLoadHandleUnique = DB_Zones_GetCurrentZoneLoadHandleUnique();
    DB_ScheduleBackendCallback<GfxLightmapAtlasDataTemp>(CurrentZoneLoadHandleUnique, RB_ProcessGfxLightmapAtlasData, varGfxLightmapAtlasDataTemp);
    *v1 = NULL;
    varGfxLightmapAtlasDataTemp = v2;
  }
}

/*
==============
Load_GfxLightmapAtlasDataTempPtrArray
==============
*/
void Load_GfxLightmapAtlasDataTempPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxLightmapAtlasDataTemp **i; 
  GfxLightmapAtlasDataTemp **v4; 
  GfxLightmapAtlasDataTemp *v5; 
  XZoneHandleUnique CurrentZoneLoadHandleUnique; 

  v2 = count;
  Load_Stream(streamStart, varGfxLightmapAtlasDataTempPtr, 8 * count);
  for ( i = varGfxLightmapAtlasDataTempPtr; v2; --v2 )
  {
    varGfxLightmapAtlasDataTempPtr = i;
    Load_Stream(NotAtStart, i, 8ui64);
    v4 = varGfxLightmapAtlasDataTempPtr;
    if ( *varGfxLightmapAtlasDataTempPtr )
    {
      v5 = varGfxLightmapAtlasDataTemp;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      *v4 = (GfxLightmapAtlasDataTemp *)g_streamPosGlob.pos;
      varGfxLightmapAtlasDataTemp = (GfxLightmapAtlasDataTemp *)g_streamPosGlob.pos;
      Load_GfxLightmapAtlasDataTemp(AtStart);
      CurrentZoneLoadHandleUnique = DB_Zones_GetCurrentZoneLoadHandleUnique();
      DB_ScheduleBackendCallback<GfxLightmapAtlasDataTemp>(CurrentZoneLoadHandleUnique, RB_ProcessGfxLightmapAtlasData, varGfxLightmapAtlasDataTemp);
      *v4 = NULL;
      varGfxLightmapAtlasDataTemp = v5;
    }
    ++i;
  }
}

/*
==============
Load_GfxLightmapAtlasDataTempPtrStream
==============
*/
void Load_GfxLightmapAtlasDataTempPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxLightmapAtlasDataTemp **v4; 
  GfxLightmapAtlasDataTemp *v5; 
  XZoneHandleUnique CurrentZoneLoadHandleUnique; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 20193, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxLightmapAtlasDataTempPtr;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      v4 = varGfxLightmapAtlasDataTempPtr;
      if ( *varGfxLightmapAtlasDataTempPtr )
      {
        v5 = varGfxLightmapAtlasDataTemp;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        *v4 = (GfxLightmapAtlasDataTemp *)g_streamPosGlob.pos;
        varGfxLightmapAtlasDataTemp = (GfxLightmapAtlasDataTemp *)g_streamPosGlob.pos;
        Load_GfxLightmapAtlasDataTemp(AtStart);
        CurrentZoneLoadHandleUnique = DB_Zones_GetCurrentZoneLoadHandleUnique();
        DB_ScheduleBackendCallback<GfxLightmapAtlasDataTemp>(CurrentZoneLoadHandleUnique, RB_ProcessGfxLightmapAtlasData, varGfxLightmapAtlasDataTemp);
        *v4 = NULL;
        varGfxLightmapAtlasDataTemp = v5;
      }
      pos = g_streamPosGlob.pos;
      varGfxLightmapAtlasDataTempPtr = (GfxLightmapAtlasDataTemp **)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxLightmapAtlasDataTempStream
==============
*/
void Load_GfxLightmapAtlasDataTempStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxLightmapRaw *v4; 
  GfxLightmapRaw *v5; 
  __int64 v6; 
  GfxImageRaw *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 21904, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxLightmapAtlasDataTemp;
    do
    {
      Load_Stream(AtStart, pos, 0xF10ui64);
      v4 = varGfxLightmapRaw;
      varGfxLightmapRaw = varGfxLightmapAtlasDataTemp->lightmaps;
      Load_Stream(NotAtStart, varGfxLightmapAtlasDataTemp->lightmaps, 0xF00ui64);
      v5 = varGfxLightmapRaw;
      v6 = 32i64;
      do
      {
        varGfxLightmapRaw = v5;
        Load_Stream(NotAtStart, v5, 0x78ui64);
        v7 = varGfxImageRawGpuTemp;
        varGfxImageRawGpuTemp = (GfxImageRaw *)varGfxLightmapRaw;
        Load_GfxImageRawGpuTempArray(NotAtStart, 3ui64);
        ++v5;
        varGfxImageRawGpuTemp = v7;
        --v6;
      }
      while ( v6 );
      pos = g_streamPosGlob.pos;
      varGfxLightmapAtlasDataTemp = (GfxLightmapAtlasDataTemp *)g_streamPosGlob.pos;
      varGfxLightmapRaw = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxLightmapRaw
==============
*/
void Load_GfxLightmapRaw(const DBStreamStart streamStart)
{
  GfxImageRaw *v1; 

  Load_Stream(streamStart, varGfxLightmapRaw, 0x78ui64);
  v1 = varGfxImageRawGpuTemp;
  varGfxImageRawGpuTemp = (GfxImageRaw *)varGfxLightmapRaw;
  Load_GfxImageRawGpuTempArray(NotAtStart, 3ui64);
  varGfxImageRawGpuTemp = v1;
}

/*
==============
Load_GfxLightmapRawArray
==============
*/
void Load_GfxLightmapRawArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxLightmapRaw *i; 
  GfxImageRaw *v4; 

  v2 = count;
  Load_Stream(streamStart, varGfxLightmapRaw, 120 * count);
  for ( i = varGfxLightmapRaw; v2; --v2 )
  {
    varGfxLightmapRaw = i;
    Load_Stream(NotAtStart, i, 0x78ui64);
    v4 = varGfxImageRawGpuTemp;
    varGfxImageRawGpuTemp = (GfxImageRaw *)varGfxLightmapRaw;
    Load_GfxImageRawGpuTempArray(NotAtStart, 3ui64);
    ++i;
    varGfxImageRawGpuTemp = v4;
  }
}

/*
==============
Load_GfxLightmapRawStream
==============
*/
void Load_GfxLightmapRawStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxImageRaw *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 21735, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxLightmapRaw;
    do
    {
      Load_Stream(AtStart, pos, 0x78ui64);
      v4 = varGfxImageRawGpuTemp;
      varGfxImageRawGpuTemp = (GfxImageRaw *)varGfxLightmapRaw;
      Load_GfxImageRawGpuTempArray(NotAtStart, 3ui64);
      pos = g_streamPosGlob.pos;
      varGfxLightmapRaw = (GfxLightmapRaw *)g_streamPosGlob.pos;
      varGfxImageRawGpuTemp = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxLightmapType
==============
*/
void Load_GfxLightmapType(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxLightmapType, 4ui64);
}

/*
==============
Load_GfxLightmapTypeArray
==============
*/
void Load_GfxLightmapTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxLightmapType, 4 * count);
}

/*
==============
Load_GfxLightmapTypeStream
==============
*/
void Load_GfxLightmapTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 21658, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxLightmapType;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varGfxLightmapType = (GfxLightmapType *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxMapEntLookup
==============
*/
void Load_GfxMapEntLookup(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxMapEntLookup, 0x1Cui64);
}

/*
==============
Load_GfxMapEntLookupArray
==============
*/
void Load_GfxMapEntLookupArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxMapEntLookup, 28 * count);
}

/*
==============
Load_GfxMapEntLookupStream
==============
*/
void Load_GfxMapEntLookupStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 26854, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxMapEntLookup;
    do
    {
      Load_Stream(AtStart, pos, 0x1Cui64);
      pos = g_streamPosGlob.pos;
      varGfxMapEntLookup = (GfxMapEntLookup *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxMayhemSelfVis
==============
*/
void Load_GfxMayhemSelfVis(const DBStreamStart streamStart)
{
  GfxMayhemSelfVis *v1; 
  unsigned __int8 *v2; 
  unsigned __int8 *alignCompBufByte_t; 
  GfxWrappedRWBuffer *v4; 
  GfxWrappedRWBuffer *p_selfVisBuffer; 

  Load_Stream(streamStart, varGfxMayhemSelfVis, 0x48ui64);
  DB_PushStreamPos(7u);
  v1 = varGfxMayhemSelfVis;
  if ( varGfxMayhemSelfVis->selfVis )
  {
    v2 = varalignCompBufByte_t;
    alignCompBufByte_t = AllocLoad_alignCompBufByte_t();
    v1->selfVis = alignCompBufByte_t;
    varalignCompBufByte_t = alignCompBufByte_t;
    Load_alignCompBufByte_tArray(AtStart, varGfxMayhemSelfVis->selfVisBufferSize);
    varalignCompBufByte_t = v2;
  }
  DB_PopStreamPos();
  v4 = varGfxWrappedRWBuffer;
  p_selfVisBuffer = &varGfxMayhemSelfVis->selfVisBuffer;
  varGfxWrappedRWBuffer = &varGfxMayhemSelfVis->selfVisBuffer;
  Load_GfxWrappedRWBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_selfVisBuffer, GfxWrappedBuffer_Raw, varGfxMayhemSelfVis->selfVisBufferSize, 1u, varGfxMayhemSelfVis->selfVis, "mayhem selfvis buffer", 0);
  varGfxWrappedRWBuffer = v4;
}

/*
==============
Load_GfxMayhemSelfVisArray
==============
*/
void Load_GfxMayhemSelfVisArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxMayhemSelfVis *i; 
  GfxMayhemSelfVis *v4; 
  unsigned __int8 *v5; 
  unsigned __int8 *alignCompBufByte_t; 
  GfxWrappedRWBuffer *v7; 
  GfxWrappedRWBuffer *p_selfVisBuffer; 

  v2 = count;
  Load_Stream(streamStart, varGfxMayhemSelfVis, 72 * count);
  for ( i = varGfxMayhemSelfVis; v2; --v2 )
  {
    varGfxMayhemSelfVis = i;
    Load_Stream(NotAtStart, i, 0x48ui64);
    DB_PushStreamPos(7u);
    v4 = varGfxMayhemSelfVis;
    if ( varGfxMayhemSelfVis->selfVis )
    {
      v5 = varalignCompBufByte_t;
      alignCompBufByte_t = AllocLoad_alignCompBufByte_t();
      v4->selfVis = alignCompBufByte_t;
      varalignCompBufByte_t = alignCompBufByte_t;
      Load_alignCompBufByte_tArray(AtStart, varGfxMayhemSelfVis->selfVisBufferSize);
      varalignCompBufByte_t = v5;
    }
    DB_PopStreamPos();
    v7 = varGfxWrappedRWBuffer;
    p_selfVisBuffer = &varGfxMayhemSelfVis->selfVisBuffer;
    varGfxWrappedRWBuffer = &varGfxMayhemSelfVis->selfVisBuffer;
    Load_GfxWrappedRWBuffer(NotAtStart);
    Load_GfxWrappedBuffer(p_selfVisBuffer, GfxWrappedBuffer_Raw, varGfxMayhemSelfVis->selfVisBufferSize, 1u, varGfxMayhemSelfVis->selfVis, "mayhem selfvis buffer", 0);
    ++i;
    varGfxWrappedRWBuffer = v7;
  }
}

/*
==============
Load_GfxMayhemSelfVisStream
==============
*/
void Load_GfxMayhemSelfVisStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxMayhemSelfVis *v4; 
  unsigned __int8 *v5; 
  unsigned __int8 *alignCompBufByte_t; 
  GfxWrappedRWBuffer *v7; 
  GfxWrappedRWBuffer *p_selfVisBuffer; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 29590, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxMayhemSelfVis;
    do
    {
      Load_Stream(AtStart, pos, 0x48ui64);
      DB_PushStreamPos(7u);
      v4 = varGfxMayhemSelfVis;
      if ( varGfxMayhemSelfVis->selfVis )
      {
        v5 = varalignCompBufByte_t;
        alignCompBufByte_t = AllocLoad_alignCompBufByte_t();
        v4->selfVis = alignCompBufByte_t;
        varalignCompBufByte_t = alignCompBufByte_t;
        Load_alignCompBufByte_tArray(AtStart, varGfxMayhemSelfVis->selfVisBufferSize);
        varalignCompBufByte_t = v5;
      }
      DB_PopStreamPos();
      v7 = varGfxWrappedRWBuffer;
      p_selfVisBuffer = &varGfxMayhemSelfVis->selfVisBuffer;
      varGfxWrappedRWBuffer = &varGfxMayhemSelfVis->selfVisBuffer;
      Load_GfxWrappedRWBuffer(NotAtStart);
      Load_GfxWrappedBuffer(p_selfVisBuffer, GfxWrappedBuffer_Raw, varGfxMayhemSelfVis->selfVisBufferSize, 1u, varGfxMayhemSelfVis->selfVis, "mayhem selfvis buffer", 0);
      pos = g_streamPosGlob.pos;
      varGfxMayhemSelfVis = (GfxMayhemSelfVis *)g_streamPosGlob.pos;
      varGfxWrappedRWBuffer = v7;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxModelLightmapInst
==============
*/
void Load_GfxModelLightmapInst(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxModelLightmapInst, 0x14ui64);
}

/*
==============
Load_GfxModelLightmapInstArray
==============
*/
void Load_GfxModelLightmapInstArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxModelLightmapInst, 20 * count);
}

/*
==============
Load_GfxModelLightmapInstStream
==============
*/
void Load_GfxModelLightmapInstStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 26685, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxModelLightmapInst;
    do
    {
      Load_Stream(AtStart, pos, 0x14ui64);
      pos = g_streamPosGlob.pos;
      varGfxModelLightmapInst = (GfxModelLightmapInst *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxPortal
==============
*/
void Load_GfxPortal(const DBStreamStart streamStart)
{
  GfxPortal *v1; 
  vec3_t *v2; 
  vec3_t *vec3_t; 

  Load_Stream(streamStart, varGfxPortal, 0x50ui64);
  v1 = varGfxPortal;
  if ( varGfxPortal->vertices )
  {
    v2 = varvec3_t;
    vec3_t = AllocLoad_vec3_t();
    v1->vertices = vec3_t;
    varvec3_t = vec3_t;
    Load_vec3_tArray(AtStart, varGfxPortal->vertexCount);
    varvec3_t = v2;
  }
}

/*
==============
Load_GfxPortalArray
==============
*/
void Load_GfxPortalArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxPortal *i; 
  GfxPortal *v4; 
  vec3_t *v5; 
  vec3_t *vec3_t; 

  v2 = count;
  Load_Stream(streamStart, varGfxPortal, 80 * count);
  for ( i = varGfxPortal; v2; --v2 )
  {
    varGfxPortal = i;
    Load_Stream(NotAtStart, i, 0x50ui64);
    v4 = varGfxPortal;
    if ( varGfxPortal->vertices )
    {
      v5 = varvec3_t;
      vec3_t = AllocLoad_vec3_t();
      v4->vertices = vec3_t;
      varvec3_t = vec3_t;
      Load_vec3_tArray(AtStart, varGfxPortal->vertexCount);
      varvec3_t = v5;
    }
    ++i;
  }
}

/*
==============
Load_GfxPortalStream
==============
*/
void Load_GfxPortalStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxPortal *pos; 
  GfxPortal *v4; 
  vec3_t *v5; 
  vec3_t *vec3_t; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 12559, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = varGfxPortal;
    do
    {
      Load_Stream(AtStart, pos, 0x50ui64);
      v4 = varGfxPortal;
      if ( varGfxPortal->vertices )
      {
        v5 = varvec3_t;
        vec3_t = AllocLoad_vec3_t();
        v4->vertices = vec3_t;
        varvec3_t = vec3_t;
        Load_vec3_tArray(AtStart, varGfxPortal->vertexCount);
        varvec3_t = v5;
      }
      pos = (GfxPortal *)g_streamPosGlob.pos;
      varGfxPortal = (GfxPortal *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxPrecomputedSkyIllumination
==============
*/
void Load_GfxPrecomputedSkyIllumination(const DBStreamStart streamStart)
{
  GfxImage **v1; 

  Load_Stream(streamStart, varGfxPrecomputedSkyIllumination, 0x60ui64);
  v1 = varGfxImagePtr;
  varGfxImagePtr = &varGfxPrecomputedSkyIllumination->detailMask;
  Load_GfxImagePtr(NotAtStart);
  varGfxImagePtr = &varGfxPrecomputedSkyIllumination->heightMap;
  Load_GfxImagePtr(NotAtStart);
  varGfxImagePtr = &varGfxPrecomputedSkyIllumination->SVDCoefficient;
  Load_GfxImagePtr(NotAtStart);
  varGfxImagePtr = &varGfxPrecomputedSkyIllumination->SVDBasis;
  Load_GfxImagePtr(NotAtStart);
  varGfxImagePtr = v1;
}

/*
==============
Load_GfxPrecomputedSkyIlluminationArray
==============
*/
void Load_GfxPrecomputedSkyIlluminationArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxPrecomputedSkyIllumination *i; 
  GfxImage **v4; 

  v2 = count;
  Load_Stream(streamStart, varGfxPrecomputedSkyIllumination, 96 * count);
  for ( i = varGfxPrecomputedSkyIllumination; v2; --v2 )
  {
    varGfxPrecomputedSkyIllumination = i;
    Load_Stream(NotAtStart, i, 0x60ui64);
    v4 = varGfxImagePtr;
    varGfxImagePtr = &varGfxPrecomputedSkyIllumination->detailMask;
    Load_GfxImagePtr(NotAtStart);
    varGfxImagePtr = &varGfxPrecomputedSkyIllumination->heightMap;
    Load_GfxImagePtr(NotAtStart);
    varGfxImagePtr = &varGfxPrecomputedSkyIllumination->SVDCoefficient;
    Load_GfxImagePtr(NotAtStart);
    varGfxImagePtr = &varGfxPrecomputedSkyIllumination->SVDBasis;
    Load_GfxImagePtr(NotAtStart);
    ++i;
    varGfxImagePtr = v4;
  }
}

/*
==============
Load_GfxPrecomputedSkyIlluminationStream
==============
*/
void Load_GfxPrecomputedSkyIlluminationStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxImage **v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 29829, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxPrecomputedSkyIllumination;
    do
    {
      Load_Stream(AtStart, pos, 0x60ui64);
      v4 = varGfxImagePtr;
      varGfxImagePtr = &varGfxPrecomputedSkyIllumination->detailMask;
      Load_GfxImagePtr(NotAtStart);
      varGfxImagePtr = &varGfxPrecomputedSkyIllumination->heightMap;
      Load_GfxImagePtr(NotAtStart);
      varGfxImagePtr = &varGfxPrecomputedSkyIllumination->SVDCoefficient;
      Load_GfxImagePtr(NotAtStart);
      varGfxImagePtr = &varGfxPrecomputedSkyIllumination->SVDBasis;
      Load_GfxImagePtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varGfxPrecomputedSkyIllumination = (GfxPrecomputedSkyIllumination *)g_streamPosGlob.pos;
      varGfxImagePtr = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxSHCompressedProbeData
==============
*/
void Load_GfxSHCompressedProbeData(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxSHCompressedProbeData, 0x20ui64);
}

/*
==============
Load_GfxSHCompressedProbeDataArray
==============
*/
void Load_GfxSHCompressedProbeDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxSHCompressedProbeData, 32 * count);
}

/*
==============
Load_GfxSHCompressedProbeDataStream
==============
*/
void Load_GfxSHCompressedProbeDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 12736, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxSHCompressedProbeData;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      pos = g_streamPosGlob.pos;
      varGfxSHCompressedProbeData = (GfxSHCompressedProbeData *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxSHProbeData
==============
*/
void Load_GfxSHProbeData(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxSHProbeData, 0x40ui64);
}

/*
==============
Load_GfxSHProbeDataArray
==============
*/
void Load_GfxSHProbeDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxSHProbeData, count << 6);
}

/*
==============
Load_GfxSHProbeDataStream
==============
*/
void Load_GfxSHProbeDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 12659, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxSHProbeData;
    do
    {
      Load_Stream(AtStart, pos, 0x40ui64);
      pos = g_streamPosGlob.pos;
      varGfxSHProbeData = (GfxSHProbeData *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxSceneDynBrush
==============
*/
void Load_GfxSceneDynBrush(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxSceneDynBrush, 0xCui64);
}

/*
==============
Load_GfxSceneDynBrushArray
==============
*/
void Load_GfxSceneDynBrushArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxSceneDynBrush, 12 * count);
}

/*
==============
Load_GfxSceneDynBrushStream
==============
*/
void Load_GfxSceneDynBrushStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 14873, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxSceneDynBrush;
    do
    {
      Load_Stream(AtStart, pos, 0xCui64);
      pos = g_streamPosGlob.pos;
      varGfxSceneDynBrush = (GfxSceneDynBrush *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxSceneDynModel
==============
*/
void Load_GfxSceneDynModel(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxSceneDynModel, 0xCui64);
}

/*
==============
Load_GfxSceneDynModelArray
==============
*/
void Load_GfxSceneDynModelArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxSceneDynModel, 12 * count);
}

/*
==============
Load_GfxSceneDynModelStream
==============
*/
void Load_GfxSceneDynModelStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 14818, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxSceneDynModel;
    do
    {
      Load_Stream(AtStart, pos, 0xCui64);
      pos = g_streamPosGlob.pos;
      varGfxSceneDynModel = (GfxSceneDynModel *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxShadowGeometry
==============
*/
void Load_GfxShadowGeometry(const DBStreamStart streamStart)
{
  GfxShadowGeometry *v1; 
  unsigned int *v2; 
  unsigned int *BSPSURF_COUNT_TYPE; 
  unsigned __int16 *v4; 
  unsigned __int16 *ushort; 

  Load_Stream(streamStart, varGfxShadowGeometry, 0x18ui64);
  v1 = varGfxShadowGeometry;
  if ( varGfxShadowGeometry->sortedSurfIndex )
  {
    v2 = varBSPSURF_COUNT_TYPE;
    BSPSURF_COUNT_TYPE = AllocLoad_BSPSURF_COUNT_TYPE();
    v1->sortedSurfIndex = BSPSURF_COUNT_TYPE;
    varBSPSURF_COUNT_TYPE = BSPSURF_COUNT_TYPE;
    Load_BSPSURF_COUNT_TYPEArray(AtStart, varGfxShadowGeometry->surfaceCount);
    v1 = varGfxShadowGeometry;
    varBSPSURF_COUNT_TYPE = v2;
  }
  if ( v1->smodelIndex )
  {
    v4 = varushort;
    ushort = AllocLoad_ushort();
    v1->smodelIndex = ushort;
    varushort = ushort;
    Load_ushortArray(AtStart, varGfxShadowGeometry->smodelCount);
    varushort = v4;
  }
}

/*
==============
Load_GfxShadowGeometryArray
==============
*/
void Load_GfxShadowGeometryArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxShadowGeometry *i; 
  GfxShadowGeometry *v4; 
  unsigned int *v5; 
  unsigned int *BSPSURF_COUNT_TYPE; 
  unsigned __int16 *v7; 
  unsigned __int16 *ushort; 

  v2 = count;
  Load_Stream(streamStart, varGfxShadowGeometry, 24 * count);
  for ( i = varGfxShadowGeometry; v2; --v2 )
  {
    varGfxShadowGeometry = i;
    Load_Stream(NotAtStart, i, 0x18ui64);
    v4 = varGfxShadowGeometry;
    if ( varGfxShadowGeometry->sortedSurfIndex )
    {
      v5 = varBSPSURF_COUNT_TYPE;
      BSPSURF_COUNT_TYPE = AllocLoad_BSPSURF_COUNT_TYPE();
      v4->sortedSurfIndex = BSPSURF_COUNT_TYPE;
      varBSPSURF_COUNT_TYPE = BSPSURF_COUNT_TYPE;
      Load_BSPSURF_COUNT_TYPEArray(AtStart, varGfxShadowGeometry->surfaceCount);
      v4 = varGfxShadowGeometry;
      varBSPSURF_COUNT_TYPE = v5;
    }
    if ( v4->smodelIndex )
    {
      v7 = varushort;
      ushort = AllocLoad_ushort();
      v4->smodelIndex = ushort;
      varushort = ushort;
      Load_ushortArray(AtStart, varGfxShadowGeometry->smodelCount);
      varushort = v7;
    }
    ++i;
  }
}

/*
==============
Load_GfxShadowGeometryStream
==============
*/
void Load_GfxShadowGeometryStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxShadowGeometry *v4; 
  unsigned int *v5; 
  unsigned int *BSPSURF_COUNT_TYPE; 
  unsigned __int16 *v7; 
  unsigned __int16 *ushort; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 15080, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxShadowGeometry;
    do
    {
      Load_Stream(AtStart, pos, 0x18ui64);
      v4 = varGfxShadowGeometry;
      if ( varGfxShadowGeometry->sortedSurfIndex )
      {
        v5 = varBSPSURF_COUNT_TYPE;
        BSPSURF_COUNT_TYPE = AllocLoad_BSPSURF_COUNT_TYPE();
        v4->sortedSurfIndex = BSPSURF_COUNT_TYPE;
        varBSPSURF_COUNT_TYPE = BSPSURF_COUNT_TYPE;
        Load_BSPSURF_COUNT_TYPEArray(AtStart, varGfxShadowGeometry->surfaceCount);
        v4 = varGfxShadowGeometry;
        varBSPSURF_COUNT_TYPE = v5;
      }
      if ( v4->smodelIndex )
      {
        v7 = varushort;
        ushort = AllocLoad_ushort();
        v4->smodelIndex = ushort;
        varushort = ushort;
        Load_ushortArray(AtStart, varGfxShadowGeometry->smodelCount);
        varushort = v7;
      }
      pos = g_streamPosGlob.pos;
      varGfxShadowGeometry = (GfxShadowGeometry *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxStaticDecalVolumeMask
==============
*/
void Load_GfxStaticDecalVolumeMask(const DBStreamStart streamStart)
{
  GfxDecalVolumeMask **v1; 

  Load_Stream(streamStart, varGfxStaticDecalVolumeMask, 8ui64);
  v1 = varGfxDecalVolumeMaskPtr;
  varGfxDecalVolumeMaskPtr = &varGfxStaticDecalVolumeMask->blendMapOverride;
  Load_GfxDecalVolumeMaskPtr(NotAtStart);
  varGfxDecalVolumeMaskPtr = v1;
}

/*
==============
Load_GfxStaticDecalVolumeMaskArray
==============
*/
void Load_GfxStaticDecalVolumeMaskArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxStaticDecalVolumeMask *i; 
  GfxDecalVolumeMask **v4; 

  v2 = count;
  Load_Stream(streamStart, varGfxStaticDecalVolumeMask, 8 * count);
  for ( i = varGfxStaticDecalVolumeMask; v2; --v2 )
  {
    varGfxStaticDecalVolumeMask = i;
    Load_Stream(NotAtStart, i, 8ui64);
    v4 = varGfxDecalVolumeMaskPtr;
    varGfxDecalVolumeMaskPtr = &varGfxStaticDecalVolumeMask->blendMapOverride;
    Load_GfxDecalVolumeMaskPtr(NotAtStart);
    ++i;
    varGfxDecalVolumeMaskPtr = v4;
  }
}

/*
==============
Load_GfxStaticDecalVolumeMaskStream
==============
*/
void Load_GfxStaticDecalVolumeMaskStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxDecalVolumeMask **v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 23314, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxStaticDecalVolumeMask;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      v4 = varGfxDecalVolumeMaskPtr;
      varGfxDecalVolumeMaskPtr = &varGfxStaticDecalVolumeMask->blendMapOverride;
      Load_GfxDecalVolumeMaskPtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varGfxStaticDecalVolumeMask = (GfxStaticDecalVolumeMask *)g_streamPosGlob.pos;
      varGfxDecalVolumeMaskPtr = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxStaticDecalVolumeMaterial
==============
*/
void Load_GfxStaticDecalVolumeMaterial(const DBStreamStart streamStart)
{
  Material **v1; 

  Load_Stream(streamStart, varGfxStaticDecalVolumeMaterial, 8ui64);
  v1 = varMaterialHandle;
  varMaterialHandle = &varGfxStaticDecalVolumeMaterial->material;
  Load_MaterialHandle(NotAtStart);
  varMaterialHandle = v1;
}

/*
==============
Load_GfxStaticDecalVolumeMaterialArray
==============
*/
void Load_GfxStaticDecalVolumeMaterialArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxStaticDecalVolumeMaterial *i; 
  Material **v4; 

  v2 = count;
  Load_Stream(streamStart, varGfxStaticDecalVolumeMaterial, 8 * count);
  for ( i = varGfxStaticDecalVolumeMaterial; v2; --v2 )
  {
    varGfxStaticDecalVolumeMaterial = i;
    Load_Stream(NotAtStart, i, 8ui64);
    v4 = varMaterialHandle;
    varMaterialHandle = &varGfxStaticDecalVolumeMaterial->material;
    Load_MaterialHandle(NotAtStart);
    ++i;
    varMaterialHandle = v4;
  }
}

/*
==============
Load_GfxStaticDecalVolumeMaterialStream
==============
*/
void Load_GfxStaticDecalVolumeMaterialStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  Material **v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 23235, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxStaticDecalVolumeMaterial;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      v4 = varMaterialHandle;
      varMaterialHandle = &varGfxStaticDecalVolumeMaterial->material;
      Load_MaterialHandle(NotAtStart);
      pos = g_streamPosGlob.pos;
      varGfxStaticDecalVolumeMaterial = (GfxStaticDecalVolumeMaterial *)g_streamPosGlob.pos;
      varMaterialHandle = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxStaticDecalVolumePacked
==============
*/
void Load_GfxStaticDecalVolumePacked(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxStaticDecalVolumePacked, 0x2Cui64);
}

/*
==============
Load_GfxStaticDecalVolumePackedArray
==============
*/
void Load_GfxStaticDecalVolumePackedArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxStaticDecalVolumePacked, 44 * count);
}

/*
==============
Load_GfxStaticDecalVolumePackedStream
==============
*/
void Load_GfxStaticDecalVolumePackedStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 23156, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxStaticDecalVolumePacked;
    do
    {
      Load_Stream(AtStart, pos, 0x2Cui64);
      pos = g_streamPosGlob.pos;
      varGfxStaticDecalVolumePacked = (GfxStaticDecalVolumePacked *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxStaticDecalVolumeUid
==============
*/
void Load_GfxStaticDecalVolumeUid(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxStaticDecalVolumeUid, 4ui64);
}

/*
==============
Load_GfxStaticDecalVolumeUidArray
==============
*/
void Load_GfxStaticDecalVolumeUidArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxStaticDecalVolumeUid, 4 * count);
}

/*
==============
Load_GfxStaticDecalVolumeUidStream
==============
*/
void Load_GfxStaticDecalVolumeUidStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 23393, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxStaticDecalVolumeUid;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varGfxStaticDecalVolumeUid = (GfxStaticDecalVolumeUid *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxStaticModelLightGridVolume
==============
*/
void Load_GfxStaticModelLightGridVolume(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxStaticModelLightGridVolume, 0x40ui64);
}

/*
==============
Load_GfxStaticModelLightGridVolumeArray
==============
*/
void Load_GfxStaticModelLightGridVolumeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxStaticModelLightGridVolume, count << 6);
}

/*
==============
Load_GfxStaticModelLightGridVolumeFlags
==============
*/
void Load_GfxStaticModelLightGridVolumeFlags(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxStaticModelLightGridVolumeFlags, 2ui64);
}

/*
==============
Load_GfxStaticModelLightGridVolumeFlagsArray
==============
*/
void Load_GfxStaticModelLightGridVolumeFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxStaticModelLightGridVolumeFlags, 2 * count);
}

/*
==============
Load_GfxStaticModelLightGridVolumeFlagsStream
==============
*/
void Load_GfxStaticModelLightGridVolumeFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 13359, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxStaticModelLightGridVolumeFlags;
    do
    {
      Load_Stream(AtStart, pos, 2ui64);
      pos = g_streamPosGlob.pos;
      varGfxStaticModelLightGridVolumeFlags = (GfxStaticModelLightGridVolumeFlags *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxStaticModelLightGridVolumeStream
==============
*/
void Load_GfxStaticModelLightGridVolumeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 13531, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxStaticModelLightGridVolume;
    do
    {
      Load_Stream(AtStart, pos, 0x40ui64);
      pos = g_streamPosGlob.pos;
      varGfxStaticModelLightGridVolume = (GfxStaticModelLightGridVolume *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxVoxelInternalNode
==============
*/
void Load_GfxVoxelInternalNode(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxVoxelInternalNode, 0x10ui64);
}

/*
==============
Load_GfxVoxelInternalNodeArray
==============
*/
void Load_GfxVoxelInternalNodeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxVoxelInternalNode, 16 * count);
}

/*
==============
Load_GfxVoxelInternalNodeStream
==============
*/
void Load_GfxVoxelInternalNodeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 25022, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxVoxelInternalNode;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      pos = g_streamPosGlob.pos;
      varGfxVoxelInternalNode = (GfxVoxelInternalNode *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxVoxelLeafNode
==============
*/
void Load_GfxVoxelLeafNode(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxVoxelLeafNode, 2ui64);
}

/*
==============
Load_GfxVoxelLeafNodeArray
==============
*/
void Load_GfxVoxelLeafNodeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxVoxelLeafNode, 2 * count);
}

/*
==============
Load_GfxVoxelLeafNodeStream
==============
*/
void Load_GfxVoxelLeafNodeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 25099, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxVoxelLeafNode;
    do
    {
      Load_Stream(AtStart, pos, 2ui64);
      pos = g_streamPosGlob.pos;
      varGfxVoxelLeafNode = (GfxVoxelLeafNode *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxVoxelTopDownViewNode
==============
*/
void Load_GfxVoxelTopDownViewNode(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxVoxelTopDownViewNode, 0xCui64);
}

/*
==============
Load_GfxVoxelTopDownViewNodeArray
==============
*/
void Load_GfxVoxelTopDownViewNodeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxVoxelTopDownViewNode, 12 * count);
}

/*
==============
Load_GfxVoxelTopDownViewNodeStream
==============
*/
void Load_GfxVoxelTopDownViewNodeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 24922, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxVoxelTopDownViewNode;
    do
    {
      Load_Stream(AtStart, pos, 0xCui64);
      pos = g_streamPosGlob.pos;
      varGfxVoxelTopDownViewNode = (GfxVoxelTopDownViewNode *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxVoxelTree
==============
*/
void Load_GfxVoxelTree(const DBStreamStart streamStart)
{
  GfxVoxelTree *v1; 
  GfxVoxelTreeHeader *v2; 
  GfxVoxelTree *v3; 
  GfxVoxelTopDownViewNode *v4; 
  GfxVoxelTree *v5; 
  GfxVoxelInternalNode *v6; 
  GfxVoxelTree *v7; 
  GfxVoxelLeafNode *v8; 
  GfxVoxelTree *v9; 
  unsigned __int16 *v10; 
  unsigned __int16 *raw_ushort4; 
  GfxVoxelTree *v12; 
  unsigned int *v13; 
  unsigned int *uint; 
  GfxVoxelTree *v15; 
  unsigned int *v16; 
  unsigned int *v17; 
  GfxVoxelTree *v18; 
  GfxVoxelTreeHeader *v19; 
  GfxVoxelTopDownViewNode *v20; 
  GfxVoxelInternalNode *v21; 

  Load_Stream(streamStart, varGfxVoxelTree, 0x78ui64);
  DB_PushStreamPos(7u);
  v1 = varGfxVoxelTree;
  if ( varGfxVoxelTree->voxelTreeHeader )
  {
    v2 = varGfxVoxelTreeHeader;
    DB_PatchMem_FixStreamAlignment(0xFui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->voxelTreeHeader = (GfxVoxelTreeHeader *)g_streamPosGlob.pos;
    varGfxVoxelTreeHeader = (GfxVoxelTreeHeader *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x40ui64);
    varGfxVoxelTreeHeader = v2;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(7u);
  v3 = varGfxVoxelTree;
  if ( varGfxVoxelTree->voxelTopDownViewNodeArray )
  {
    v4 = varGfxVoxelTopDownViewNode;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v3->voxelTopDownViewNodeArray = (GfxVoxelTopDownViewNode *)g_streamPosGlob.pos;
    varGfxVoxelTopDownViewNode = (GfxVoxelTopDownViewNode *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 12i64 * varGfxVoxelTree->voxelTopDownViewNodeCount);
    varGfxVoxelTopDownViewNode = v4;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(7u);
  v5 = varGfxVoxelTree;
  if ( varGfxVoxelTree->voxelInternalNodeArray )
  {
    v6 = varGfxVoxelInternalNode;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v5->voxelInternalNodeArray = (GfxVoxelInternalNode *)g_streamPosGlob.pos;
    varGfxVoxelInternalNode = (GfxVoxelInternalNode *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varGfxVoxelTree->voxelInternalNodeCount);
    varGfxVoxelInternalNode = v6;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(7u);
  v7 = varGfxVoxelTree;
  if ( varGfxVoxelTree->voxelLeafNodeArray )
  {
    v8 = varGfxVoxelLeafNode;
    DB_PatchMem_FixStreamAlignment(1ui64);
    DB_CheckCanIncStreamPos(0i64);
    v7->voxelLeafNodeArray = (GfxVoxelLeafNode *)g_streamPosGlob.pos;
    varGfxVoxelLeafNode = (GfxVoxelLeafNode *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 2i64 * varGfxVoxelTree->voxelLeafNodeCount);
    varGfxVoxelLeafNode = v8;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(7u);
  v9 = varGfxVoxelTree;
  if ( varGfxVoxelTree->lightListArray )
  {
    v10 = varraw_ushort4;
    raw_ushort4 = AllocLoad_raw_ushort4();
    v9->lightListArray = raw_ushort4;
    varraw_ushort4 = raw_ushort4;
    Load_raw_ushort4Array(AtStart, varGfxVoxelTree->lightListArraySize);
    varraw_ushort4 = v10;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v12 = varGfxVoxelTree;
  if ( varGfxVoxelTree->voxelInternalNodeDynamicLightListCPU )
  {
    v13 = varuint;
    uint = AllocLoad_uint();
    v12->voxelInternalNodeDynamicLightListCPU = uint;
    varuint = uint;
    Load_uintArray(AtStart, 2 * varGfxVoxelTree->voxelInternalNodeCount);
    varuint = v13;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(5u);
  v15 = varGfxVoxelTree;
  if ( varGfxVoxelTree->voxelInternalNodeDynamicLightList )
  {
    v16 = varuint;
    v17 = AllocLoad_uint();
    v15->voxelInternalNodeDynamicLightList = v17;
    varuint = v17;
    Load_uintArray(AtStart, 2 * varGfxVoxelTree->voxelInternalNodeCount);
    varuint = v16;
  }
  DB_PopStreamPos();
  v18 = varGfxVoxelTree;
  if ( varGfxVoxelTree->voxelTreeHeaderCPU )
  {
    v19 = varGfxVoxelTreeHeader;
    DB_PatchMem_FixStreamAlignment(0xFui64);
    DB_CheckCanIncStreamPos(0i64);
    v18->voxelTreeHeaderCPU = (GfxVoxelTreeHeader *)g_streamPosGlob.pos;
    varGfxVoxelTreeHeader = (GfxVoxelTreeHeader *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x40ui64);
    v18 = varGfxVoxelTree;
    varGfxVoxelTreeHeader = v19;
  }
  if ( v18->voxelTopDownViewNodeArrayCPU )
  {
    v20 = varGfxVoxelTopDownViewNode;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v18->voxelTopDownViewNodeArrayCPU = (GfxVoxelTopDownViewNode *)g_streamPosGlob.pos;
    varGfxVoxelTopDownViewNode = (GfxVoxelTopDownViewNode *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 12i64 * varGfxVoxelTree->voxelTopDownViewNodeCount);
    v18 = varGfxVoxelTree;
    varGfxVoxelTopDownViewNode = v20;
  }
  if ( v18->voxelInternalNodeArrayCPU )
  {
    v21 = varGfxVoxelInternalNode;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v18->voxelInternalNodeArrayCPU = (GfxVoxelInternalNode *)g_streamPosGlob.pos;
    varGfxVoxelInternalNode = (GfxVoxelInternalNode *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varGfxVoxelTree->voxelInternalNodeCount);
    varGfxVoxelInternalNode = v21;
  }
}

/*
==============
Load_GfxVoxelTreeArray
==============
*/
void Load_GfxVoxelTreeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxVoxelTree *i; 

  v2 = count;
  Load_Stream(streamStart, varGfxVoxelTree, 120 * count);
  for ( i = varGfxVoxelTree; v2; --v2 )
  {
    varGfxVoxelTree = i;
    Load_GfxVoxelTree(NotAtStart);
    ++i;
  }
}

/*
==============
Load_GfxVoxelTreeHeader
==============
*/
void Load_GfxVoxelTreeHeader(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxVoxelTreeHeader, 0x40ui64);
}

/*
==============
Load_GfxVoxelTreeHeaderArray
==============
*/
void Load_GfxVoxelTreeHeaderArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxVoxelTreeHeader, count << 6);
}

/*
==============
Load_GfxVoxelTreeHeaderStream
==============
*/
void Load_GfxVoxelTreeHeaderStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 25245, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxVoxelTreeHeader;
    do
    {
      Load_Stream(AtStart, pos, 0x40ui64);
      pos = g_streamPosGlob.pos;
      varGfxVoxelTreeHeader = (GfxVoxelTreeHeader *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxVoxelTreeStream
==============
*/
void Load_GfxVoxelTreeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 25714, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  for ( ; count; --count )
  {
    Load_GfxVoxelTree(AtStart);
    varGfxVoxelTree = (GfxVoxelTree *)g_streamPosGlob.pos;
  }
}

/*
==============
Load_GfxWorld
==============
*/
void Load_GfxWorld(const DBStreamStart streamStart)
{
  const char **v2; 
  GfxWorldDpvsPlanes *v3; 
  GfxWorld *v4; 
  GfxCellTransientInfo *v5; 
  GfxCell *v6; 
  __int64 cellCount; 
  GfxCell *i; 
  GfxWorldSurfaces *v9; 
  GfxWorldStaticModels *v10; 
  GfxWorldDraw *v11; 
  GfxDynamicLightset *v12; 
  GfxWorld *v13; 
  GfxVoxelTree *v14; 
  __int64 voxelTreeCount; 
  GfxVoxelTree *j; 
  GfxMayhemSelfVis *v17; 
  GfxFrustumLights *v18; 
  GfxWorld *v19; 
  GfxLight *v20; 
  GfxLight *GfxLight; 
  GfxWorld *v22; 
  GfxLightViewFrustum *v23; 
  __int64 primaryLightCount; 
  GfxLightViewFrustum *k; 
  GfxHeightfield *v26; 
  __int64 heightfieldCount; 
  GfxHeightfield *m; 
  GfxImage **v29; 
  GfxBrushModel *v30; 
  GfxBrushModel *GfxBrushModel; 
  GfxPrecomputedSkyIllumination *v32; 
  GfxWorld *v33; 
  GfxModelLightmapInst *v34; 
  GfxMapEntLookup *v35; 
  sunflare_t *v36; 
  GfxImage **v37; 
  Material **v38; 
  GfxWorld *v39; 
  unsigned int *v40; 
  unsigned int *raw_uint; 
  GfxWorld *v42; 
  unsigned int *v43; 
  unsigned int *v44; 
  GfxWorld *v45; 
  GfxSceneDynModel *v46; 
  GfxWorld *v47; 
  GfxSceneDynBrush *v48; 
  GfxWorld *v49; 
  unsigned int *v50; 
  unsigned int *v51; 
  GfxWorld *v52; 
  unsigned int *v53; 
  unsigned int *v54; 
  GfxWorld *v55; 
  unsigned int *v56; 
  unsigned int *v57; 
  GfxWorld *v58; 
  unsigned int *v59; 
  unsigned int *v60; 
  GfxWorld *v61; 
  unsigned int *v62; 
  unsigned int *v63; 
  GfxWorld *v64; 
  unsigned int *v65; 
  unsigned int *v66; 
  GfxWorld *v67; 
  unsigned int *v68; 
  unsigned int *v69; 
  GfxWorld *v70; 
  GfxShadowGeometry *v71; 
  __int64 v72; 
  GfxShadowGeometry *n; 
  GfxLightAABB *v74; 
  GfxWorldDpvsStatic *v75; 
  GfxWorldDpvsDynamic *v76; 
  GfxWorld *v77; 
  UmbraGate *v78; 
  unsigned __int8 *v79; 
  unsigned __int8 *byte16; 
  Umbra::Tome **p_umbraTome; 
  Umbra::Tome **v82; 
  GfxWorld *v83; 
  MdaoVolume *v84; 
  MdaoVolume *MdaoVolume; 
  StreamTree *v86; 
  StreamTreeGrid *v87; 

  DB_PatchMem_PushAsset(27, varGfxWorld);
  Load_Stream(streamStart, varGfxWorld, 0x41E0ui64);
  DB_PushStreamPos(8u);
  v2 = varXString;
  varXString = &varGfxWorld->name;
  Load_XString(NotAtStart);
  varXString = &varGfxWorld->baseName;
  Load_XString(NotAtStart);
  varXString = v2;
  v3 = varGfxWorldDpvsPlanes;
  varGfxWorldDpvsPlanes = &varGfxWorld->dpvsPlanes;
  Load_GfxWorldDpvsPlanes(NotAtStart);
  v4 = varGfxWorld;
  varGfxWorldDpvsPlanes = v3;
  if ( varGfxWorld->cellTransientInfos )
  {
    v5 = varGfxCellTransientInfo;
    DB_PatchMem_FixStreamAlignment(1ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->cellTransientInfos = (GfxCellTransientInfo *)g_streamPosGlob.pos;
    varGfxCellTransientInfo = (GfxCellTransientInfo *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 4i64 * varGfxWorld->dpvsPlanes.cellCount);
    v4 = varGfxWorld;
    varGfxCellTransientInfo = v5;
  }
  if ( v4->cells )
  {
    v6 = varGfxCell;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->cells = (GfxCell *)g_streamPosGlob.pos;
    varGfxCell = (GfxCell *)g_streamPosGlob.pos;
    cellCount = varGfxWorld->dpvsPlanes.cellCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 40 * cellCount);
    for ( i = varGfxCell; cellCount; --cellCount )
    {
      varGfxCell = i;
      Load_GfxCell(NotAtStart);
      ++i;
    }
    v4 = varGfxWorld;
    varGfxCell = v6;
  }
  v9 = varGfxWorldSurfaces;
  varGfxWorldSurfaces = &v4->surfaces;
  Load_GfxWorldSurfaces(NotAtStart);
  varGfxWorldSurfaces = v9;
  v10 = varGfxWorldStaticModels;
  varGfxWorldStaticModels = &varGfxWorld->smodels;
  Load_GfxWorldStaticModels(NotAtStart);
  varGfxWorldStaticModels = v10;
  v11 = varGfxWorldDraw;
  varGfxWorldDraw = &varGfxWorld->draw;
  Load_GfxWorldDraw(NotAtStart);
  varGfxWorldDraw = v11;
  v12 = varGfxDynamicLightset;
  varGfxDynamicLightset = &varGfxWorld->dynamicLightset;
  Load_GfxDynamicLightset(NotAtStart);
  v13 = varGfxWorld;
  varGfxDynamicLightset = v12;
  if ( varGfxWorld->voxelTree )
  {
    v14 = varGfxVoxelTree;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v13->voxelTree = (GfxVoxelTree *)g_streamPosGlob.pos;
    varGfxVoxelTree = (GfxVoxelTree *)g_streamPosGlob.pos;
    voxelTreeCount = varGfxWorld->voxelTreeCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 120 * voxelTreeCount);
    for ( j = varGfxVoxelTree; voxelTreeCount; --voxelTreeCount )
    {
      varGfxVoxelTree = j;
      Load_GfxVoxelTree(NotAtStart);
      ++j;
    }
    v13 = varGfxWorld;
    varGfxVoxelTree = v14;
  }
  v17 = varGfxMayhemSelfVis;
  varGfxMayhemSelfVis = &v13->mayhemSelfVis;
  Load_GfxMayhemSelfVis(NotAtStart);
  varGfxMayhemSelfVis = v17;
  v18 = varGfxFrustumLights;
  varGfxFrustumLights = &varGfxWorld->frustumLights;
  Load_GfxFrustumLights(NotAtStart);
  varGfxFrustumLights = v18;
  DB_PushStreamPos(4u);
  v19 = varGfxWorld;
  if ( varGfxWorld->primaryLights )
  {
    v20 = varGfxLight;
    GfxLight = AllocLoad_GfxLight();
    v19->primaryLights = GfxLight;
    varGfxLight = GfxLight;
    Load_GfxLightArray(AtStart, varGfxWorld->primaryLightCount);
    varGfxLight = v20;
  }
  DB_PopStreamPos();
  v22 = varGfxWorld;
  if ( varGfxWorld->lightViewFrustums )
  {
    v23 = varGfxLightViewFrustum;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v22->lightViewFrustums = (GfxLightViewFrustum *)g_streamPosGlob.pos;
    varGfxLightViewFrustum = (GfxLightViewFrustum *)g_streamPosGlob.pos;
    primaryLightCount = varGfxWorld->primaryLightCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 32 * primaryLightCount);
    for ( k = varGfxLightViewFrustum; primaryLightCount; --primaryLightCount )
    {
      varGfxLightViewFrustum = k;
      Load_GfxLightViewFrustum(NotAtStart);
      ++k;
    }
    v22 = varGfxWorld;
    varGfxLightViewFrustum = v23;
  }
  if ( v22->heightfields )
  {
    v26 = varGfxHeightfield;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v22->heightfields = (GfxHeightfield *)g_streamPosGlob.pos;
    varGfxHeightfield = (GfxHeightfield *)g_streamPosGlob.pos;
    heightfieldCount = varGfxWorld->heightfieldCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 96 * heightfieldCount);
    for ( m = varGfxHeightfield; heightfieldCount; --heightfieldCount )
    {
      varGfxHeightfield = m;
      Load_Stream(NotAtStart, m, 0x60ui64);
      v29 = varGfxImagePtr;
      varGfxImagePtr = &varGfxHeightfield->image;
      Load_GfxImagePtr(NotAtStart);
      ++m;
      varGfxImagePtr = v29;
    }
    v22 = varGfxWorld;
    varGfxHeightfield = v26;
  }
  if ( v22->models )
  {
    v30 = varGfxBrushModel;
    GfxBrushModel = AllocLoad_GfxBrushModel();
    v22->models = GfxBrushModel;
    varGfxBrushModel = GfxBrushModel;
    Load_GfxBrushModelArray(AtStart, varGfxWorld->modelCount);
    v22 = varGfxWorld;
    varGfxBrushModel = v30;
  }
  v32 = varGfxPrecomputedSkyIllumination;
  varGfxPrecomputedSkyIllumination = &v22->precomputedSkyIllumination;
  Load_GfxPrecomputedSkyIllumination(NotAtStart);
  v33 = varGfxWorld;
  varGfxPrecomputedSkyIllumination = v32;
  if ( varGfxWorld->lmapLookup )
  {
    v34 = varGfxModelLightmapInst;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v33->lmapLookup = (GfxModelLightmapInst *)g_streamPosGlob.pos;
    varGfxModelLightmapInst = (GfxModelLightmapInst *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 20i64 * varGfxWorld->lmapLookupCount);
    v33 = varGfxWorld;
    varGfxModelLightmapInst = v34;
  }
  if ( v33->gfxMapEntLookup )
  {
    v35 = varGfxMapEntLookup;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v33->gfxMapEntLookup = (GfxMapEntLookup *)g_streamPosGlob.pos;
    varGfxMapEntLookup = (GfxMapEntLookup *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 28i64 * varGfxWorld->gfxMapEntLookupCount);
    v33 = varGfxWorld;
    varGfxMapEntLookup = v35;
  }
  v36 = varsunflare_t;
  varsunflare_t = &v33->sun;
  Load_sunflare_t(NotAtStart);
  varsunflare_t = v36;
  v37 = varGfxImagePtr;
  varGfxImagePtr = &varGfxWorld->outdoorImage;
  Load_GfxImagePtr(NotAtStart);
  varGfxImagePtr = v37;
  v38 = varMaterialHandle;
  varMaterialHandle = &varGfxWorld->dustMaterial;
  Load_MaterialHandle(NotAtStart);
  varMaterialHandle = v38;
  DB_PushStreamPos(4u);
  v39 = varGfxWorld;
  if ( varGfxWorld->cellCasterBits )
  {
    v40 = varraw_uint;
    raw_uint = AllocLoad_raw_uint();
    v39->cellCasterBits = raw_uint;
    varraw_uint = raw_uint;
    Load_raw_uintArray(AtStart, varGfxWorld->dpvsPlanes.cellCount * ((varGfxWorld->dpvsPlanes.cellCount + 31) >> 5));
    varraw_uint = v40;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v42 = varGfxWorld;
  if ( varGfxWorld->cellHasSunLitSurfsBits )
  {
    v43 = varraw_uint;
    v44 = AllocLoad_raw_uint();
    v42->cellHasSunLitSurfsBits = v44;
    varraw_uint = v44;
    Load_raw_uintArray(AtStart, (unsigned __int64)(varGfxWorld->dpvsPlanes.cellCount + 31) >> 5);
    varraw_uint = v43;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v45 = varGfxWorld;
  if ( varGfxWorld->sceneDynModel )
  {
    v46 = varGfxSceneDynModel;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v45->sceneDynModel = (GfxSceneDynModel *)g_streamPosGlob.pos;
    varGfxSceneDynModel = (GfxSceneDynModel *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 12i64 * varGfxWorld->dpvsDyn.dynEntClientCount[0]);
    varGfxSceneDynModel = v46;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v47 = varGfxWorld;
  if ( varGfxWorld->sceneDynBrush )
  {
    v48 = varGfxSceneDynBrush;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v47->sceneDynBrush = (GfxSceneDynBrush *)g_streamPosGlob.pos;
    varGfxSceneDynBrush = (GfxSceneDynBrush *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 12i64 * varGfxWorld->dpvsDyn.dynEntClientCount[1]);
    varGfxSceneDynBrush = v48;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v49 = varGfxWorld;
  if ( varGfxWorld->primaryLightMotionDetectBits )
  {
    v50 = varraw_uint;
    v51 = AllocLoad_raw_uint();
    v49->primaryLightMotionDetectBits = v51;
    varraw_uint = v51;
    Load_raw_uintArray(AtStart, varGfxWorld->primaryLightMotionDetectBitsEntries);
    varraw_uint = v50;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v52 = varGfxWorld;
  if ( varGfxWorld->entityMotionBits )
  {
    v53 = varraw_uint;
    v54 = AllocLoad_raw_uint();
    v52->entityMotionBits = v54;
    varraw_uint = v54;
    Load_raw_uintArray(AtStart, varGfxWorld->entityMotionBitsEntries);
    varraw_uint = v53;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v55 = varGfxWorld;
  if ( varGfxWorld->primaryLightEntityShadowVis )
  {
    v56 = varraw_uint;
    v57 = AllocLoad_raw_uint();
    v55->primaryLightEntityShadowVis = v57;
    varraw_uint = v57;
    Load_raw_uintArray(AtStart, varGfxWorld->numPrimaryLightEntityShadowVisEntries);
    varraw_uint = v56;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v58 = varGfxWorld;
  if ( varGfxWorld->dynEntMotionBits[0] )
  {
    v59 = varraw_uint;
    v60 = AllocLoad_raw_uint();
    v58->dynEntMotionBits[0] = v60;
    varraw_uint = v60;
    Load_raw_uintArray(AtStart, varGfxWorld->dynEntMotionBitsEntries[0]);
    varraw_uint = v59;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v61 = varGfxWorld;
  if ( varGfxWorld->dynEntMotionBits[1] )
  {
    v62 = varraw_uint;
    v63 = AllocLoad_raw_uint();
    v61->dynEntMotionBits[1] = v63;
    varraw_uint = v63;
    Load_raw_uintArray(AtStart, varGfxWorld->dynEntMotionBitsEntries[1]);
    varraw_uint = v62;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v64 = varGfxWorld;
  if ( varGfxWorld->primaryLightDynEntShadowVis[0] )
  {
    v65 = varraw_uint;
    v66 = AllocLoad_raw_uint();
    v64->primaryLightDynEntShadowVis[0] = v66;
    varraw_uint = v66;
    Load_raw_uintArray(AtStart, varGfxWorld->numPrimaryLightDynEntShadowVisEntries[0]);
    varraw_uint = v65;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v67 = varGfxWorld;
  if ( varGfxWorld->primaryLightDynEntShadowVis[1] )
  {
    v68 = varraw_uint;
    v69 = AllocLoad_raw_uint();
    v67->primaryLightDynEntShadowVis[1] = v69;
    varraw_uint = v69;
    Load_raw_uintArray(AtStart, varGfxWorld->numPrimaryLightDynEntShadowVisEntries[1]);
    varraw_uint = v68;
  }
  DB_PopStreamPos();
  v70 = varGfxWorld;
  if ( varGfxWorld->shadowGeomOptimized )
  {
    v71 = varGfxShadowGeometry;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v70->shadowGeomOptimized = (GfxShadowGeometry *)g_streamPosGlob.pos;
    varGfxShadowGeometry = (GfxShadowGeometry *)g_streamPosGlob.pos;
    v72 = varGfxWorld->primaryLightCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 24 * v72);
    for ( n = varGfxShadowGeometry; v72; --v72 )
    {
      varGfxShadowGeometry = n;
      Load_GfxShadowGeometry(NotAtStart);
      ++n;
    }
    v70 = varGfxWorld;
    varGfxShadowGeometry = v71;
  }
  v74 = varGfxLightAABB;
  varGfxLightAABB = &v70->lightAABB;
  Load_GfxLightAABB(NotAtStart);
  varGfxLightAABB = v74;
  v75 = varGfxWorldDpvsStatic;
  varGfxWorldDpvsStatic = &varGfxWorld->dpvs;
  Load_GfxWorldDpvsStatic(NotAtStart);
  varGfxWorldDpvsStatic = v75;
  v76 = varGfxWorldDpvsDynamic;
  varGfxWorldDpvsDynamic = &varGfxWorld->dpvsDyn;
  Load_GfxWorldDpvsDynamic(NotAtStart);
  v77 = varGfxWorld;
  varGfxWorldDpvsDynamic = v76;
  if ( varGfxWorld->umbraGates )
  {
    v78 = varUmbraGate;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v77->umbraGates = (UmbraGate *)g_streamPosGlob.pos;
    varUmbraGate = (UmbraGate *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 32i64 * varGfxWorld->numUmbraGates);
    v77 = varGfxWorld;
    varUmbraGate = v78;
  }
  if ( v77->umbraTomeData )
  {
    v79 = varbyte16;
    byte16 = AllocLoad_byte16();
    v77->umbraTomeData = byte16;
    varbyte16 = byte16;
    Load_byte16Array(AtStart, varGfxWorld->umbraTomeSize);
    v77 = varGfxWorld;
    varbyte16 = v79;
  }
  p_umbraTome = &v77->umbraTome;
  v82 = varumbraTomePtr_t;
  varumbraTomePtr_t = p_umbraTome;
  Load_Stream(NotAtStart, p_umbraTome, 8ui64);
  Load_UmbraTome(p_umbraTome, varGfxWorld->umbraTomeData, varGfxWorld->umbraTomeSize);
  varumbraTomePtr_t = v82;
  v83 = varGfxWorld;
  if ( varGfxWorld->mdaoVolumes )
  {
    v84 = varMdaoVolume;
    MdaoVolume = AllocLoad_MdaoVolume();
    v83->mdaoVolumes = MdaoVolume;
    varMdaoVolume = MdaoVolume;
    Load_MdaoVolumeArray(AtStart, varGfxWorld->mdaoVolumeCount);
    v83 = varGfxWorld;
    varMdaoVolume = v84;
  }
  v86 = varStreamTree;
  varStreamTree = &v83->streamTree;
  Load_StreamTree(NotAtStart);
  varStreamTree = v86;
  v87 = varStreamTreeGrid;
  varStreamTreeGrid = &varGfxWorld->materialStreamTreeGrid;
  Load_StreamTreeGrid(NotAtStart);
  varStreamTreeGrid = &varGfxWorld->xmodelStreamTreeGrid;
  Load_StreamTreeGrid(NotAtStart);
  varStreamTreeGrid = v87;
  DB_PopStreamPos();
  DB_PatchMem_PopAsset();
}

/*
==============
Load_GfxWorldArray
==============
*/
void Load_GfxWorldArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxWorld *i; 

  v2 = count;
  Load_Stream(streamStart, varGfxWorld, 16864 * count);
  for ( i = varGfxWorld; v2; --v2 )
  {
    varGfxWorld = i;
    Load_GfxWorld(NotAtStart);
    ++i;
  }
}

/*
==============
Load_GfxWorldDpvsDynamic
==============
*/
void Load_GfxWorldDpvsDynamic(const DBStreamStart streamStart)
{
  GfxWorldDpvsDynamic *v1; 
  unsigned int *v2; 
  unsigned int *raw_uint; 
  GfxWorldDpvsDynamic *v4; 
  unsigned int *v5; 
  unsigned int *v6; 
  GfxWorldDpvsDynamic *v7; 
  unsigned __int8 *v8; 
  unsigned __int8 *raw_byte16; 
  GfxWorldDpvsDynamic *v10; 
  unsigned __int8 *v11; 
  unsigned __int8 *v12; 
  GfxWorldDpvsDynamic *v13; 
  unsigned __int8 *v14; 
  unsigned __int8 *v15; 
  GfxWorldDpvsDynamic *v16; 
  unsigned __int8 *v17; 
  unsigned __int8 *v18; 
  GfxWorldDpvsDynamic *v19; 
  unsigned __int8 *v20; 
  unsigned __int8 *v21; 
  GfxWorldDpvsDynamic *v22; 
  unsigned __int8 *v23; 
  unsigned __int8 *v24; 
  GfxWorldDpvsDynamic *v25; 
  unsigned __int8 *v26; 
  unsigned __int8 *v27; 
  GfxWorldDpvsDynamic *v28; 
  unsigned __int8 *v29; 
  unsigned __int8 *v30; 
  GfxWorldDpvsDynamic *v31; 
  unsigned __int8 *v32; 
  unsigned __int8 *v33; 
  GfxWorldDpvsDynamic *v34; 
  unsigned __int8 *v35; 
  unsigned __int8 *v36; 
  GfxWorldDpvsDynamic *v37; 
  unsigned __int8 *v38; 
  unsigned __int8 *v39; 
  GfxWorldDpvsDynamic *v40; 
  unsigned __int8 *v41; 
  unsigned __int8 *v42; 
  GfxWorldDpvsDynamic *v43; 
  unsigned __int8 *v44; 
  unsigned __int8 *v45; 
  GfxWorldDpvsDynamic *v46; 
  unsigned __int8 *v47; 
  unsigned __int8 *v48; 
  GfxWorldDpvsDynamic *v49; 
  unsigned __int8 *v50; 
  unsigned __int8 *v51; 
  GfxWorldDpvsDynamic *v52; 
  unsigned __int8 *v53; 
  unsigned __int8 *v54; 
  GfxWorldDpvsDynamic *v55; 
  unsigned __int8 *v56; 
  unsigned __int8 *v57; 
  GfxWorldDpvsDynamic *v58; 
  unsigned __int8 *v59; 
  unsigned __int8 *v60; 
  GfxWorldDpvsDynamic *v61; 
  unsigned __int8 *v62; 
  unsigned __int8 *v63; 
  GfxWorldDpvsDynamic *v64; 
  unsigned __int8 *v65; 
  unsigned __int8 *v66; 
  GfxWorldDpvsDynamic *v67; 
  unsigned __int8 *v68; 
  unsigned __int8 *v69; 
  GfxWorldDpvsDynamic *v70; 
  unsigned __int8 *v71; 
  unsigned __int8 *v72; 
  GfxWorldDpvsDynamic *v73; 
  unsigned __int8 *v74; 
  unsigned __int8 *v75; 
  GfxWorldDpvsDynamic *v76; 
  unsigned __int8 *v77; 
  unsigned __int8 *v78; 
  GfxWorldDpvsDynamic *v79; 
  unsigned __int8 *v80; 
  unsigned __int8 *v81; 
  GfxWorldDpvsDynamic *v82; 
  unsigned __int8 *v83; 
  unsigned __int8 *v84; 
  GfxWorldDpvsDynamic *v85; 
  unsigned __int8 *v86; 
  unsigned __int8 *v87; 
  GfxWorldDpvsDynamic *v88; 
  unsigned __int8 *v89; 
  unsigned __int8 *v90; 
  GfxWorldDpvsDynamic *v91; 
  unsigned __int8 *v92; 
  unsigned __int8 *v93; 
  GfxWorldDpvsDynamic *v94; 
  unsigned __int8 *v95; 
  unsigned __int8 *v96; 
  GfxWorldDpvsDynamic *v97; 
  unsigned __int8 *v98; 
  unsigned __int8 *v99; 
  GfxWorldDpvsDynamic *v100; 
  unsigned __int8 *v101; 
  unsigned __int8 *v102; 
  GfxWorldDpvsDynamic *v103; 
  unsigned __int8 *v104; 
  unsigned __int8 *v105; 
  GfxWorldDpvsDynamic *v106; 
  unsigned __int8 *v107; 
  unsigned __int8 *v108; 
  GfxWorldDpvsDynamic *v109; 
  unsigned __int8 *v110; 
  unsigned __int8 *v111; 
  GfxWorldDpvsDynamic *v112; 
  unsigned __int8 *v113; 
  unsigned __int8 *v114; 
  GfxWorldDpvsDynamic *v115; 
  unsigned __int8 *v116; 
  unsigned __int8 *v117; 
  GfxWorldDpvsDynamic *v118; 
  unsigned __int8 *v119; 
  unsigned __int8 *v120; 
  GfxWorldDpvsDynamic *v121; 
  unsigned __int8 *v122; 
  unsigned __int8 *v123; 
  GfxWorldDpvsDynamic *v124; 
  unsigned __int8 *v125; 
  unsigned __int8 *v126; 
  GfxWorldDpvsDynamic *v127; 
  unsigned __int8 *v128; 
  unsigned __int8 *v129; 
  GfxWorldDpvsDynamic *v130; 
  unsigned __int8 *v131; 
  unsigned __int8 *v132; 
  GfxWorldDpvsDynamic *v133; 
  unsigned __int8 *v134; 
  unsigned __int8 *v135; 
  GfxWorldDpvsDynamic *v136; 
  unsigned __int8 *v137; 
  unsigned __int8 *v138; 
  GfxWorldDpvsDynamic *v139; 
  unsigned __int8 *v140; 
  unsigned __int8 *v141; 
  GfxWorldDpvsDynamic *v142; 
  unsigned __int8 *v143; 
  unsigned __int8 *v144; 
  GfxWorldDpvsDynamic *v145; 
  unsigned __int8 *v146; 
  unsigned __int8 *v147; 
  GfxWorldDpvsDynamic *v148; 
  unsigned __int8 *v149; 
  unsigned __int8 *v150; 
  GfxWorldDpvsDynamic *v151; 
  unsigned __int8 *v152; 
  unsigned __int8 *v153; 
  GfxWorldDpvsDynamic *v154; 
  unsigned __int8 *v155; 
  unsigned __int8 *v156; 
  GfxWorldDpvsDynamic *v157; 
  unsigned __int8 *v158; 
  unsigned __int8 *v159; 
  GfxWorldDpvsDynamic *v160; 
  unsigned __int8 *v161; 
  unsigned __int8 *v162; 
  GfxWorldDpvsDynamic *v163; 
  unsigned __int8 *v164; 
  unsigned __int8 *v165; 
  GfxWorldDpvsDynamic *v166; 
  unsigned __int8 *v167; 
  unsigned __int8 *v168; 
  GfxWorldDpvsDynamic *v169; 
  unsigned __int8 *v170; 
  unsigned __int8 *v171; 
  GfxWorldDpvsDynamic *v172; 
  unsigned __int8 *v173; 
  unsigned __int8 *v174; 
  GfxWorldDpvsDynamic *v175; 
  unsigned __int8 *v176; 
  unsigned __int8 *v177; 
  GfxWorldDpvsDynamic *v178; 
  unsigned __int8 *v179; 
  unsigned __int8 *v180; 
  GfxWorldDpvsDynamic *v181; 
  unsigned __int8 *v182; 
  unsigned __int8 *v183; 
  GfxWorldDpvsDynamic *v184; 
  unsigned __int8 *v185; 
  unsigned __int8 *v186; 
  GfxWorldDpvsDynamic *v187; 
  unsigned __int8 *v188; 
  unsigned __int8 *v189; 
  GfxWorldDpvsDynamic *v190; 
  unsigned __int8 *v191; 
  unsigned __int8 *v192; 
  GfxWorldDpvsDynamic *v193; 
  unsigned __int8 *v194; 
  unsigned __int8 *v195; 
  GfxWorldDpvsDynamic *v196; 
  unsigned __int8 *v197; 
  unsigned __int8 *v198; 

  Load_Stream(streamStart, varGfxWorldDpvsDynamic, 0x230ui64);
  DB_PushStreamPos(4u);
  v1 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntCellBits[0] )
  {
    v2 = varraw_uint;
    raw_uint = AllocLoad_raw_uint();
    v1->dynEntCellBits[0] = raw_uint;
    varraw_uint = raw_uint;
    Load_raw_uintArray(AtStart, varGfxWorldDpvsDynamic->dynEntClientWordCount[0] * varGfxWorld->dpvsPlanes.cellCount);
    varraw_uint = v2;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v4 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntCellBits[1] )
  {
    v5 = varraw_uint;
    v6 = AllocLoad_raw_uint();
    v4->dynEntCellBits[1] = v6;
    varraw_uint = v6;
    Load_raw_uintArray(AtStart, varGfxWorldDpvsDynamic->dynEntClientWordCount[1] * varGfxWorld->dpvsPlanes.cellCount);
    varraw_uint = v5;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v7 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][0] )
  {
    v8 = varraw_byte16;
    raw_byte16 = AllocLoad_raw_byte16();
    v7->dynEntVisData[0][0] = raw_byte16;
    varraw_byte16 = raw_byte16;
    Load_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[0]);
    varraw_byte16 = v8;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v10 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][0] )
  {
    v11 = varraw_byte16;
    v12 = AllocLoad_raw_byte16();
    v10->dynEntVisData[1][0] = v12;
    varraw_byte16 = v12;
    Load_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[1]);
    varraw_byte16 = v11;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v13 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][1] )
  {
    v14 = varraw_byte16;
    v15 = AllocLoad_raw_byte16();
    v13->dynEntVisData[0][1] = v15;
    varraw_byte16 = v15;
    Load_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[0]);
    varraw_byte16 = v14;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v16 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][1] )
  {
    v17 = varraw_byte16;
    v18 = AllocLoad_raw_byte16();
    v16->dynEntVisData[1][1] = v18;
    varraw_byte16 = v18;
    Load_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[1]);
    varraw_byte16 = v17;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v19 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][2] )
  {
    v20 = varraw_byte16;
    v21 = AllocLoad_raw_byte16();
    v19->dynEntVisData[0][2] = v21;
    varraw_byte16 = v21;
    Load_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[0]);
    varraw_byte16 = v20;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v22 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][2] )
  {
    v23 = varraw_byte16;
    v24 = AllocLoad_raw_byte16();
    v22->dynEntVisData[1][2] = v24;
    varraw_byte16 = v24;
    Load_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[1]);
    varraw_byte16 = v23;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v25 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][3] )
  {
    v26 = varraw_byte16;
    v27 = AllocLoad_raw_byte16();
    v25->dynEntVisData[0][3] = v27;
    varraw_byte16 = v27;
    Load_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v26;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v28 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][3] )
  {
    v29 = varraw_byte16;
    v30 = AllocLoad_raw_byte16();
    v28->dynEntVisData[1][3] = v30;
    varraw_byte16 = v30;
    Load_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v29;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v31 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][4] )
  {
    v32 = varraw_byte16;
    v33 = AllocLoad_raw_byte16();
    v31->dynEntVisData[0][4] = v33;
    varraw_byte16 = v33;
    Load_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[0]);
    varraw_byte16 = v32;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v34 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][4] )
  {
    v35 = varraw_byte16;
    v36 = AllocLoad_raw_byte16();
    v34->dynEntVisData[1][4] = v36;
    varraw_byte16 = v36;
    Load_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[1]);
    varraw_byte16 = v35;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v37 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][5] )
  {
    v38 = varraw_byte16;
    v39 = AllocLoad_raw_byte16();
    v37->dynEntVisData[0][5] = v39;
    varraw_byte16 = v39;
    Load_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[0]);
    varraw_byte16 = v38;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v40 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][5] )
  {
    v41 = varraw_byte16;
    v42 = AllocLoad_raw_byte16();
    v40->dynEntVisData[1][5] = v42;
    varraw_byte16 = v42;
    Load_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[1]);
    varraw_byte16 = v41;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v43 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][6] )
  {
    v44 = varraw_byte16;
    v45 = AllocLoad_raw_byte16();
    v43->dynEntVisData[0][6] = v45;
    varraw_byte16 = v45;
    Load_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[0]);
    varraw_byte16 = v44;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v46 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][6] )
  {
    v47 = varraw_byte16;
    v48 = AllocLoad_raw_byte16();
    v46->dynEntVisData[1][6] = v48;
    varraw_byte16 = v48;
    Load_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[1]);
    varraw_byte16 = v47;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v49 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][7] )
  {
    v50 = varraw_byte16;
    v51 = AllocLoad_raw_byte16();
    v49->dynEntVisData[0][7] = v51;
    varraw_byte16 = v51;
    Load_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[0]);
    varraw_byte16 = v50;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v52 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][7] )
  {
    v53 = varraw_byte16;
    v54 = AllocLoad_raw_byte16();
    v52->dynEntVisData[1][7] = v54;
    varraw_byte16 = v54;
    Load_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[1]);
    varraw_byte16 = v53;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v55 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][8] )
  {
    v56 = varraw_byte16;
    v57 = AllocLoad_raw_byte16();
    v55->dynEntVisData[0][8] = v57;
    varraw_byte16 = v57;
    Load_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[0]);
    varraw_byte16 = v56;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v58 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][8] )
  {
    v59 = varraw_byte16;
    v60 = AllocLoad_raw_byte16();
    v58->dynEntVisData[1][8] = v60;
    varraw_byte16 = v60;
    Load_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[1]);
    varraw_byte16 = v59;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v61 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][9] )
  {
    v62 = varraw_byte16;
    v63 = AllocLoad_raw_byte16();
    v61->dynEntVisData[0][9] = v63;
    varraw_byte16 = v63;
    Load_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[0]);
    varraw_byte16 = v62;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v64 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][9] )
  {
    v65 = varraw_byte16;
    v66 = AllocLoad_raw_byte16();
    v64->dynEntVisData[1][9] = v66;
    varraw_byte16 = v66;
    Load_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[1]);
    varraw_byte16 = v65;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v67 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][10] )
  {
    v68 = varraw_byte16;
    v69 = AllocLoad_raw_byte16();
    v67->dynEntVisData[0][10] = v69;
    varraw_byte16 = v69;
    Load_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[0]);
    varraw_byte16 = v68;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v70 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][10] )
  {
    v71 = varraw_byte16;
    v72 = AllocLoad_raw_byte16();
    v70->dynEntVisData[1][10] = v72;
    varraw_byte16 = v72;
    Load_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[1]);
    varraw_byte16 = v71;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v73 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][11] )
  {
    v74 = varraw_byte16;
    v75 = AllocLoad_raw_byte16();
    v73->dynEntVisData[0][11] = v75;
    varraw_byte16 = v75;
    Load_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[0]);
    varraw_byte16 = v74;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v76 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][11] )
  {
    v77 = varraw_byte16;
    v78 = AllocLoad_raw_byte16();
    v76->dynEntVisData[1][11] = v78;
    varraw_byte16 = v78;
    Load_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[1]);
    varraw_byte16 = v77;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v79 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][12] )
  {
    v80 = varraw_byte16;
    v81 = AllocLoad_raw_byte16();
    v79->dynEntVisData[0][12] = v81;
    varraw_byte16 = v81;
    Load_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v80;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v82 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][12] )
  {
    v83 = varraw_byte16;
    v84 = AllocLoad_raw_byte16();
    v82->dynEntVisData[1][12] = v84;
    varraw_byte16 = v84;
    Load_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v83;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v85 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][13] )
  {
    v86 = varraw_byte16;
    v87 = AllocLoad_raw_byte16();
    v85->dynEntVisData[0][13] = v87;
    varraw_byte16 = v87;
    Load_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v86;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v88 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][13] )
  {
    v89 = varraw_byte16;
    v90 = AllocLoad_raw_byte16();
    v88->dynEntVisData[1][13] = v90;
    varraw_byte16 = v90;
    Load_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v89;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v91 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][14] )
  {
    v92 = varraw_byte16;
    v93 = AllocLoad_raw_byte16();
    v91->dynEntVisData[0][14] = v93;
    varraw_byte16 = v93;
    Load_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v92;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v94 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][14] )
  {
    v95 = varraw_byte16;
    v96 = AllocLoad_raw_byte16();
    v94->dynEntVisData[1][14] = v96;
    varraw_byte16 = v96;
    Load_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v95;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v97 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][15] )
  {
    v98 = varraw_byte16;
    v99 = AllocLoad_raw_byte16();
    v97->dynEntVisData[0][15] = v99;
    varraw_byte16 = v99;
    Load_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v98;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v100 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][15] )
  {
    v101 = varraw_byte16;
    v102 = AllocLoad_raw_byte16();
    v100->dynEntVisData[1][15] = v102;
    varraw_byte16 = v102;
    Load_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v101;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v103 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][16] )
  {
    v104 = varraw_byte16;
    v105 = AllocLoad_raw_byte16();
    v103->dynEntVisData[0][16] = v105;
    varraw_byte16 = v105;
    Load_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v104;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v106 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][16] )
  {
    v107 = varraw_byte16;
    v108 = AllocLoad_raw_byte16();
    v106->dynEntVisData[1][16] = v108;
    varraw_byte16 = v108;
    Load_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v107;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v109 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][17] )
  {
    v110 = varraw_byte16;
    v111 = AllocLoad_raw_byte16();
    v109->dynEntVisData[0][17] = v111;
    varraw_byte16 = v111;
    Load_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v110;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v112 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][17] )
  {
    v113 = varraw_byte16;
    v114 = AllocLoad_raw_byte16();
    v112->dynEntVisData[1][17] = v114;
    varraw_byte16 = v114;
    Load_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v113;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v115 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][18] )
  {
    v116 = varraw_byte16;
    v117 = AllocLoad_raw_byte16();
    v115->dynEntVisData[0][18] = v117;
    varraw_byte16 = v117;
    Load_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v116;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v118 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][18] )
  {
    v119 = varraw_byte16;
    v120 = AllocLoad_raw_byte16();
    v118->dynEntVisData[1][18] = v120;
    varraw_byte16 = v120;
    Load_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v119;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v121 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][19] )
  {
    v122 = varraw_byte16;
    v123 = AllocLoad_raw_byte16();
    v121->dynEntVisData[0][19] = v123;
    varraw_byte16 = v123;
    Load_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v122;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v124 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][19] )
  {
    v125 = varraw_byte16;
    v126 = AllocLoad_raw_byte16();
    v124->dynEntVisData[1][19] = v126;
    varraw_byte16 = v126;
    Load_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v125;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v127 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][20] )
  {
    v128 = varraw_byte16;
    v129 = AllocLoad_raw_byte16();
    v127->dynEntVisData[0][20] = v129;
    varraw_byte16 = v129;
    Load_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v128;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v130 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][20] )
  {
    v131 = varraw_byte16;
    v132 = AllocLoad_raw_byte16();
    v130->dynEntVisData[1][20] = v132;
    varraw_byte16 = v132;
    Load_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v131;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v133 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][21] )
  {
    v134 = varraw_byte16;
    v135 = AllocLoad_raw_byte16();
    v133->dynEntVisData[0][21] = v135;
    varraw_byte16 = v135;
    Load_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v134;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v136 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][21] )
  {
    v137 = varraw_byte16;
    v138 = AllocLoad_raw_byte16();
    v136->dynEntVisData[1][21] = v138;
    varraw_byte16 = v138;
    Load_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v137;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v139 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][22] )
  {
    v140 = varraw_byte16;
    v141 = AllocLoad_raw_byte16();
    v139->dynEntVisData[0][22] = v141;
    varraw_byte16 = v141;
    Load_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v140;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v142 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][22] )
  {
    v143 = varraw_byte16;
    v144 = AllocLoad_raw_byte16();
    v142->dynEntVisData[1][22] = v144;
    varraw_byte16 = v144;
    Load_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v143;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v145 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][23] )
  {
    v146 = varraw_byte16;
    v147 = AllocLoad_raw_byte16();
    v145->dynEntVisData[0][23] = v147;
    varraw_byte16 = v147;
    Load_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v146;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v148 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][23] )
  {
    v149 = varraw_byte16;
    v150 = AllocLoad_raw_byte16();
    v148->dynEntVisData[1][23] = v150;
    varraw_byte16 = v150;
    Load_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v149;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v151 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][24] )
  {
    v152 = varraw_byte16;
    v153 = AllocLoad_raw_byte16();
    v151->dynEntVisData[0][24] = v153;
    varraw_byte16 = v153;
    Load_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v152;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v154 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][24] )
  {
    v155 = varraw_byte16;
    v156 = AllocLoad_raw_byte16();
    v154->dynEntVisData[1][24] = v156;
    varraw_byte16 = v156;
    Load_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v155;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v157 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][25] )
  {
    v158 = varraw_byte16;
    v159 = AllocLoad_raw_byte16();
    v157->dynEntVisData[0][25] = v159;
    varraw_byte16 = v159;
    Load_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v158;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v160 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][25] )
  {
    v161 = varraw_byte16;
    v162 = AllocLoad_raw_byte16();
    v160->dynEntVisData[1][25] = v162;
    varraw_byte16 = v162;
    Load_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v161;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v163 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][26] )
  {
    v164 = varraw_byte16;
    v165 = AllocLoad_raw_byte16();
    v163->dynEntVisData[0][26] = v165;
    varraw_byte16 = v165;
    Load_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v164;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v166 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][26] )
  {
    v167 = varraw_byte16;
    v168 = AllocLoad_raw_byte16();
    v166->dynEntVisData[1][26] = v168;
    varraw_byte16 = v168;
    Load_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v167;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v169 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][27] )
  {
    v170 = varraw_byte16;
    v171 = AllocLoad_raw_byte16();
    v169->dynEntVisData[0][27] = v171;
    varraw_byte16 = v171;
    Load_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v170;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v172 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][27] )
  {
    v173 = varraw_byte16;
    v174 = AllocLoad_raw_byte16();
    v172->dynEntVisData[1][27] = v174;
    varraw_byte16 = v174;
    Load_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v173;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v175 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][28] )
  {
    v176 = varraw_byte16;
    v177 = AllocLoad_raw_byte16();
    v175->dynEntVisData[0][28] = v177;
    varraw_byte16 = v177;
    Load_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v176;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v178 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][28] )
  {
    v179 = varraw_byte16;
    v180 = AllocLoad_raw_byte16();
    v178->dynEntVisData[1][28] = v180;
    varraw_byte16 = v180;
    Load_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v179;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v181 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][29] )
  {
    v182 = varraw_byte16;
    v183 = AllocLoad_raw_byte16();
    v181->dynEntVisData[0][29] = v183;
    varraw_byte16 = v183;
    Load_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v182;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v184 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][29] )
  {
    v185 = varraw_byte16;
    v186 = AllocLoad_raw_byte16();
    v184->dynEntVisData[1][29] = v186;
    varraw_byte16 = v186;
    Load_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v185;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v187 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][30] )
  {
    v188 = varraw_byte16;
    v189 = AllocLoad_raw_byte16();
    v187->dynEntVisData[0][30] = v189;
    varraw_byte16 = v189;
    Load_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v188;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v190 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][30] )
  {
    v191 = varraw_byte16;
    v192 = AllocLoad_raw_byte16();
    v190->dynEntVisData[1][30] = v192;
    varraw_byte16 = v192;
    Load_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v191;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v193 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][31] )
  {
    v194 = varraw_byte16;
    v195 = AllocLoad_raw_byte16();
    v193->dynEntVisData[0][31] = v195;
    varraw_byte16 = v195;
    Load_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v194;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v196 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][31] )
  {
    v197 = varraw_byte16;
    v198 = AllocLoad_raw_byte16();
    v196->dynEntVisData[1][31] = v198;
    varraw_byte16 = v198;
    Load_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v197;
  }
  DB_PopStreamPos();
}

/*
==============
Load_GfxWorldDpvsDynamicArray
==============
*/
void Load_GfxWorldDpvsDynamicArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxWorldDpvsDynamic *i; 

  v2 = count;
  Load_Stream(streamStart, varGfxWorldDpvsDynamic, 560 * count);
  for ( i = varGfxWorldDpvsDynamic; v2; --v2 )
  {
    varGfxWorldDpvsDynamic = i;
    Load_GfxWorldDpvsDynamic(NotAtStart);
    ++i;
  }
}

/*
==============
Load_GfxWorldDpvsDynamicStream
==============
*/
void Load_GfxWorldDpvsDynamicStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 17354, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  for ( ; count; --count )
  {
    Load_GfxWorldDpvsDynamic(AtStart);
    varGfxWorldDpvsDynamic = (GfxWorldDpvsDynamic *)g_streamPosGlob.pos;
  }
}

/*
==============
Load_GfxWorldDpvsPlane
==============
*/
void Load_GfxWorldDpvsPlane(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxWorldDpvsPlane, 0x14ui64);
}

/*
==============
Load_GfxWorldDpvsPlaneArray
==============
*/
void Load_GfxWorldDpvsPlaneArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxWorldDpvsPlane, 20 * count);
}

/*
==============
Load_GfxWorldDpvsPlaneStream
==============
*/
void Load_GfxWorldDpvsPlaneStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 19719, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxWorldDpvsPlane;
    do
    {
      Load_Stream(AtStart, pos, 0x14ui64);
      pos = g_streamPosGlob.pos;
      varGfxWorldDpvsPlane = (GfxWorldDpvsPlane *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxWorldDpvsPlanes
==============
*/
void Load_GfxWorldDpvsPlanes(const DBStreamStart streamStart)
{
  GfxWorldDpvsPlanes *v1; 
  GfxWorldDpvsPlane *v2; 
  unsigned __int16 *v3; 
  unsigned __int16 *ushort; 
  GfxWorldDpvsPlanes *v5; 
  unsigned int *v6; 
  unsigned int *raw_uint; 

  Load_Stream(streamStart, varGfxWorldDpvsPlanes, 0x28ui64);
  v1 = varGfxWorldDpvsPlanes;
  if ( varGfxWorldDpvsPlanes->planes )
  {
    v2 = varGfxWorldDpvsPlane;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->planes = (GfxWorldDpvsPlane *)g_streamPosGlob.pos;
    varGfxWorldDpvsPlane = (GfxWorldDpvsPlane *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 20i64 * varGfxWorldDpvsPlanes->planeCount);
    v1 = varGfxWorldDpvsPlanes;
    varGfxWorldDpvsPlane = v2;
  }
  if ( v1->nodes )
  {
    v3 = varushort;
    ushort = AllocLoad_ushort();
    v1->nodes = ushort;
    varushort = ushort;
    Load_ushortArray(AtStart, varGfxWorldDpvsPlanes->nodeCount);
    varushort = v3;
  }
  DB_PushStreamPos(4u);
  v5 = varGfxWorldDpvsPlanes;
  if ( varGfxWorldDpvsPlanes->sceneEntCellBits )
  {
    v6 = varraw_uint;
    raw_uint = AllocLoad_raw_uint();
    v5->sceneEntCellBits = raw_uint;
    varraw_uint = raw_uint;
    Load_raw_uintArray(AtStart, varGfxWorldDpvsPlanes->cellCount << 9);
    varraw_uint = v6;
  }
  DB_PopStreamPos();
}

/*
==============
Load_GfxWorldDpvsPlanesArray
==============
*/
void Load_GfxWorldDpvsPlanesArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxWorldDpvsPlanes *i; 
  GfxWorldDpvsPlanes *v4; 
  GfxWorldDpvsPlane *v5; 
  unsigned __int16 *v6; 
  unsigned __int16 *ushort; 
  GfxWorldDpvsPlanes *v8; 
  unsigned int *v9; 
  unsigned int *raw_uint; 

  v2 = count;
  Load_Stream(streamStart, varGfxWorldDpvsPlanes, 40 * count);
  for ( i = varGfxWorldDpvsPlanes; v2; --v2 )
  {
    varGfxWorldDpvsPlanes = i;
    Load_Stream(NotAtStart, i, 0x28ui64);
    v4 = varGfxWorldDpvsPlanes;
    if ( varGfxWorldDpvsPlanes->planes )
    {
      v5 = varGfxWorldDpvsPlane;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->planes = (GfxWorldDpvsPlane *)g_streamPosGlob.pos;
      varGfxWorldDpvsPlane = (GfxWorldDpvsPlane *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 20i64 * varGfxWorldDpvsPlanes->planeCount);
      v4 = varGfxWorldDpvsPlanes;
      varGfxWorldDpvsPlane = v5;
    }
    if ( v4->nodes )
    {
      v6 = varushort;
      ushort = AllocLoad_ushort();
      v4->nodes = ushort;
      varushort = ushort;
      Load_ushortArray(AtStart, varGfxWorldDpvsPlanes->nodeCount);
      varushort = v6;
    }
    DB_PushStreamPos(4u);
    v8 = varGfxWorldDpvsPlanes;
    if ( varGfxWorldDpvsPlanes->sceneEntCellBits )
    {
      v9 = varraw_uint;
      raw_uint = AllocLoad_raw_uint();
      v8->sceneEntCellBits = raw_uint;
      varraw_uint = raw_uint;
      Load_raw_uintArray(AtStart, varGfxWorldDpvsPlanes->cellCount << 9);
      varraw_uint = v9;
    }
    DB_PopStreamPos();
    ++i;
  }
}

/*
==============
Load_GfxWorldDpvsPlanesStream
==============
*/
void Load_GfxWorldDpvsPlanesStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxWorldDpvsPlanes *v4; 
  GfxWorldDpvsPlane *v5; 
  unsigned __int16 *v6; 
  unsigned __int16 *ushort; 
  GfxWorldDpvsPlanes *v8; 
  unsigned int *v9; 
  unsigned int *raw_uint; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 19922, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxWorldDpvsPlanes;
    do
    {
      Load_Stream(AtStart, pos, 0x28ui64);
      v4 = varGfxWorldDpvsPlanes;
      if ( varGfxWorldDpvsPlanes->planes )
      {
        v5 = varGfxWorldDpvsPlane;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->planes = (GfxWorldDpvsPlane *)g_streamPosGlob.pos;
        varGfxWorldDpvsPlane = (GfxWorldDpvsPlane *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 20i64 * varGfxWorldDpvsPlanes->planeCount);
        v4 = varGfxWorldDpvsPlanes;
        varGfxWorldDpvsPlane = v5;
      }
      if ( v4->nodes )
      {
        v6 = varushort;
        ushort = AllocLoad_ushort();
        v4->nodes = ushort;
        varushort = ushort;
        Load_ushortArray(AtStart, varGfxWorldDpvsPlanes->nodeCount);
        varushort = v6;
      }
      DB_PushStreamPos(4u);
      v8 = varGfxWorldDpvsPlanes;
      if ( varGfxWorldDpvsPlanes->sceneEntCellBits )
      {
        v9 = varraw_uint;
        raw_uint = AllocLoad_raw_uint();
        v8->sceneEntCellBits = raw_uint;
        varraw_uint = raw_uint;
        Load_raw_uintArray(AtStart, varGfxWorldDpvsPlanes->cellCount << 9);
        varraw_uint = v9;
      }
      DB_PopStreamPos();
      pos = g_streamPosGlob.pos;
      varGfxWorldDpvsPlanes = (GfxWorldDpvsPlanes *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxWorldDpvsStatic
==============
*/
void Load_GfxWorldDpvsStatic(const DBStreamStart streamStart)
{
  GfxWorldDpvsStatic *v1; 
  unsigned int *v2; 
  unsigned int *raw_uint128; 
  GfxWorldDpvsStatic *v4; 
  unsigned int *v5; 
  unsigned int *v6; 
  GfxWorldDpvsStatic *v7; 
  unsigned int *v8; 
  unsigned int *v9; 
  GfxWorldDpvsStatic *v10; 
  unsigned int *v11; 
  unsigned int *v12; 
  GfxWorldDpvsStatic *v13; 
  unsigned int *v14; 
  unsigned int *v15; 
  GfxWorldDpvsStatic *v16; 
  unsigned int *v17; 
  unsigned int *v18; 
  GfxWorldDpvsStatic *v19; 
  unsigned int *v20; 
  unsigned int *v21; 
  GfxWorldDpvsStatic *v22; 
  unsigned int *v23; 
  unsigned int *v24; 
  GfxWorldDpvsStatic *v25; 
  unsigned int *v26; 
  unsigned int *v27; 
  GfxWorldDpvsStatic *v28; 
  unsigned int *v29; 
  unsigned int *v30; 
  GfxWorldDpvsStatic *v31; 
  unsigned int *v32; 
  unsigned int *v33; 
  GfxWorldDpvsStatic *v34; 
  unsigned int *v35; 
  unsigned int *v36; 
  GfxWorldDpvsStatic *v37; 
  unsigned int *v38; 
  unsigned int *v39; 
  GfxWorldDpvsStatic *v40; 
  unsigned int *v41; 
  unsigned int *v42; 
  GfxWorldDpvsStatic *v43; 
  unsigned int *v44; 
  unsigned int *v45; 
  GfxWorldDpvsStatic *v46; 
  unsigned int *v47; 
  unsigned int *v48; 
  GfxWorldDpvsStatic *v49; 
  unsigned int *v50; 
  unsigned int *v51; 
  GfxWorldDpvsStatic *v52; 
  unsigned int *v53; 
  unsigned int *v54; 
  GfxWorldDpvsStatic *v55; 
  unsigned int *v56; 
  unsigned int *v57; 
  GfxWorldDpvsStatic *v58; 
  unsigned int *v59; 
  unsigned int *v60; 
  GfxWorldDpvsStatic *v61; 
  unsigned int *v62; 
  unsigned int *v63; 
  GfxWorldDpvsStatic *v64; 
  unsigned int *v65; 
  unsigned int *v66; 
  GfxWorldDpvsStatic *v67; 
  unsigned int *v68; 
  unsigned int *v69; 
  GfxWorldDpvsStatic *v70; 
  unsigned int *v71; 
  unsigned int *v72; 
  GfxWorldDpvsStatic *v73; 
  unsigned int *v74; 
  unsigned int *v75; 
  GfxWorldDpvsStatic *v76; 
  unsigned int *v77; 
  unsigned int *v78; 
  GfxWorldDpvsStatic *v79; 
  unsigned int *v80; 
  unsigned int *v81; 
  GfxWorldDpvsStatic *v82; 
  unsigned int *v83; 
  unsigned int *v84; 
  GfxWorldDpvsStatic *v85; 
  unsigned int *v86; 
  unsigned int *v87; 
  GfxWorldDpvsStatic *v88; 
  unsigned int *v89; 
  unsigned int *v90; 
  GfxWorldDpvsStatic *v91; 
  unsigned int *v92; 
  unsigned int *v93; 
  GfxWorldDpvsStatic *v94; 
  unsigned int *v95; 
  unsigned int *v96; 
  GfxWorldDpvsStatic *v97; 
  unsigned int *v98; 
  unsigned int *v99; 
  GfxWorldDpvsStatic *v100; 
  unsigned int *v101; 
  unsigned int *v102; 
  GfxWorldDpvsStatic *v103; 
  unsigned int *v104; 
  unsigned int *v105; 
  GfxWorldDpvsStatic *v106; 
  unsigned int *v107; 
  unsigned int *v108; 
  GfxWorldDpvsStatic *v109; 
  unsigned int *v110; 
  unsigned int *v111; 
  GfxWorldDpvsStatic *v112; 
  unsigned int *v113; 
  unsigned int *v114; 
  GfxWorldDpvsStatic *v115; 
  unsigned int *v116; 
  unsigned int *v117; 
  GfxWorldDpvsStatic *v118; 
  unsigned int *v119; 
  unsigned int *v120; 
  GfxWorldDpvsStatic *v121; 
  unsigned int *v122; 
  unsigned int *v123; 
  GfxWorldDpvsStatic *v124; 
  unsigned int *v125; 
  unsigned int *v126; 
  GfxWorldDpvsStatic *v127; 
  unsigned int *v128; 
  unsigned int *v129; 
  GfxWorldDpvsStatic *v130; 
  unsigned int *v131; 
  unsigned int *v132; 
  GfxWorldDpvsStatic *v133; 
  unsigned int *v134; 
  unsigned int *v135; 
  GfxWorldDpvsStatic *v136; 
  unsigned int *v137; 
  unsigned int *v138; 
  GfxWorldDpvsStatic *v139; 
  unsigned int *v140; 
  unsigned int *v141; 
  GfxWorldDpvsStatic *v142; 
  unsigned int *v143; 
  unsigned int *v144; 
  GfxWorldDpvsStatic *v145; 
  unsigned int *v146; 
  unsigned int *v147; 
  GfxWorldDpvsStatic *v148; 
  unsigned int *v149; 
  unsigned int *v150; 
  GfxWorldDpvsStatic *v151; 
  unsigned int *v152; 
  unsigned int *v153; 
  GfxWorldDpvsStatic *v154; 
  unsigned int *v155; 
  unsigned int *v156; 
  GfxWorldDpvsStatic *v157; 
  unsigned int *v158; 
  unsigned int *v159; 
  GfxWorldDpvsStatic *v160; 
  unsigned int *v161; 
  unsigned int *v162; 
  GfxWorldDpvsStatic *v163; 
  unsigned int *v164; 
  unsigned int *v165; 
  GfxWorldDpvsStatic *v166; 
  unsigned int *v167; 
  unsigned int *v168; 
  GfxWorldDpvsStatic *v169; 
  unsigned int *v170; 
  unsigned int *v171; 
  GfxWorldDpvsStatic *v172; 
  unsigned int *v173; 
  unsigned int *v174; 
  GfxWorldDpvsStatic *v175; 
  unsigned int *v176; 
  unsigned int *v177; 
  GfxWorldDpvsStatic *v178; 
  unsigned int *v179; 
  unsigned int *v180; 
  GfxWorldDpvsStatic *v181; 
  unsigned int *v182; 
  unsigned int *v183; 
  GfxWorldDpvsStatic *v184; 
  unsigned int *v185; 
  unsigned int *v186; 
  GfxWorldDpvsStatic *v187; 
  unsigned int *v188; 
  unsigned int *v189; 
  GfxWorldDpvsStatic *v190; 
  unsigned int *v191; 
  unsigned int *v192; 
  GfxWorldDpvsStatic *v193; 
  unsigned int *v194; 
  unsigned int *v195; 
  GfxWorldDpvsStatic *v196; 
  unsigned int *v197; 
  unsigned int *v198; 
  GfxWorldDpvsStatic *v199; 
  unsigned int *v200; 
  unsigned int *v201; 
  GfxWorldDpvsStatic *v202; 
  unsigned int *v203; 
  unsigned int *v204; 
  GfxWorldDpvsStatic *v205; 
  unsigned int *v206; 
  unsigned int *BSPSURF_COUNT_TYPE; 
  unsigned __int16 *v208; 
  unsigned __int16 *ushort; 
  GfxWorldDpvsStatic *v210; 
  unsigned int *v211; 
  unsigned int *v212; 
  GfxWorldDpvsStatic *v213; 
  unsigned int *v214; 
  unsigned int *v215; 

  Load_Stream(streamStart, varGfxWorldDpvsStatic, 0x278ui64);
  DB_PushStreamPos(4u);
  v1 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[0] )
  {
    v2 = varraw_uint128;
    raw_uint128 = AllocLoad_raw_uint128();
    v1->smodelVisData[0] = raw_uint128;
    varraw_uint128 = raw_uint128;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v2;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v4 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[1] )
  {
    v5 = varraw_uint128;
    v6 = AllocLoad_raw_uint128();
    v4->smodelVisData[1] = v6;
    varraw_uint128 = v6;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v5;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v7 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[2] )
  {
    v8 = varraw_uint128;
    v9 = AllocLoad_raw_uint128();
    v7->smodelVisData[2] = v9;
    varraw_uint128 = v9;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v8;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v10 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[3] )
  {
    v11 = varraw_uint128;
    v12 = AllocLoad_raw_uint128();
    v10->smodelVisData[3] = v12;
    varraw_uint128 = v12;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v11;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v13 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[4] )
  {
    v14 = varraw_uint128;
    v15 = AllocLoad_raw_uint128();
    v13->smodelVisData[4] = v15;
    varraw_uint128 = v15;
    Load_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v14;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v16 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[5] )
  {
    v17 = varraw_uint128;
    v18 = AllocLoad_raw_uint128();
    v16->smodelVisData[5] = v18;
    varraw_uint128 = v18;
    Load_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v17;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v19 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[6] )
  {
    v20 = varraw_uint128;
    v21 = AllocLoad_raw_uint128();
    v19->smodelVisData[6] = v21;
    varraw_uint128 = v21;
    Load_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v20;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v22 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[7] )
  {
    v23 = varraw_uint128;
    v24 = AllocLoad_raw_uint128();
    v22->smodelVisData[7] = v24;
    varraw_uint128 = v24;
    Load_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v23;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v25 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[8] )
  {
    v26 = varraw_uint128;
    v27 = AllocLoad_raw_uint128();
    v25->smodelVisData[8] = v27;
    varraw_uint128 = v27;
    Load_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v26;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v28 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[9] )
  {
    v29 = varraw_uint128;
    v30 = AllocLoad_raw_uint128();
    v28->smodelVisData[9] = v30;
    varraw_uint128 = v30;
    Load_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v29;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v31 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[10] )
  {
    v32 = varraw_uint128;
    v33 = AllocLoad_raw_uint128();
    v31->smodelVisData[10] = v33;
    varraw_uint128 = v33;
    Load_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v32;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v34 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[11] )
  {
    v35 = varraw_uint128;
    v36 = AllocLoad_raw_uint128();
    v34->smodelVisData[11] = v36;
    varraw_uint128 = v36;
    Load_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v35;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v37 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[12] )
  {
    v38 = varraw_uint128;
    v39 = AllocLoad_raw_uint128();
    v37->smodelVisData[12] = v39;
    varraw_uint128 = v39;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v38;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v40 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[13] )
  {
    v41 = varraw_uint128;
    v42 = AllocLoad_raw_uint128();
    v40->smodelVisData[13] = v42;
    varraw_uint128 = v42;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v41;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v43 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[14] )
  {
    v44 = varraw_uint128;
    v45 = AllocLoad_raw_uint128();
    v43->smodelVisData[14] = v45;
    varraw_uint128 = v45;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v44;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v46 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[15] )
  {
    v47 = varraw_uint128;
    v48 = AllocLoad_raw_uint128();
    v46->smodelVisData[15] = v48;
    varraw_uint128 = v48;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v47;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v49 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[16] )
  {
    v50 = varraw_uint128;
    v51 = AllocLoad_raw_uint128();
    v49->smodelVisData[16] = v51;
    varraw_uint128 = v51;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v50;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v52 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[17] )
  {
    v53 = varraw_uint128;
    v54 = AllocLoad_raw_uint128();
    v52->smodelVisData[17] = v54;
    varraw_uint128 = v54;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v53;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v55 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[18] )
  {
    v56 = varraw_uint128;
    v57 = AllocLoad_raw_uint128();
    v55->smodelVisData[18] = v57;
    varraw_uint128 = v57;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v56;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v58 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[19] )
  {
    v59 = varraw_uint128;
    v60 = AllocLoad_raw_uint128();
    v58->smodelVisData[19] = v60;
    varraw_uint128 = v60;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v59;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v61 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[20] )
  {
    v62 = varraw_uint128;
    v63 = AllocLoad_raw_uint128();
    v61->smodelVisData[20] = v63;
    varraw_uint128 = v63;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v62;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v64 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[21] )
  {
    v65 = varraw_uint128;
    v66 = AllocLoad_raw_uint128();
    v64->smodelVisData[21] = v66;
    varraw_uint128 = v66;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v65;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v67 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[22] )
  {
    v68 = varraw_uint128;
    v69 = AllocLoad_raw_uint128();
    v67->smodelVisData[22] = v69;
    varraw_uint128 = v69;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v68;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v70 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[23] )
  {
    v71 = varraw_uint128;
    v72 = AllocLoad_raw_uint128();
    v70->smodelVisData[23] = v72;
    varraw_uint128 = v72;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v71;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v73 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[24] )
  {
    v74 = varraw_uint128;
    v75 = AllocLoad_raw_uint128();
    v73->smodelVisData[24] = v75;
    varraw_uint128 = v75;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v74;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v76 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[25] )
  {
    v77 = varraw_uint128;
    v78 = AllocLoad_raw_uint128();
    v76->smodelVisData[25] = v78;
    varraw_uint128 = v78;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v77;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v79 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[26] )
  {
    v80 = varraw_uint128;
    v81 = AllocLoad_raw_uint128();
    v79->smodelVisData[26] = v81;
    varraw_uint128 = v81;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v80;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v82 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[27] )
  {
    v83 = varraw_uint128;
    v84 = AllocLoad_raw_uint128();
    v82->smodelVisData[27] = v84;
    varraw_uint128 = v84;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v83;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v85 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[28] )
  {
    v86 = varraw_uint128;
    v87 = AllocLoad_raw_uint128();
    v85->smodelVisData[28] = v87;
    varraw_uint128 = v87;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v86;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v88 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[29] )
  {
    v89 = varraw_uint128;
    v90 = AllocLoad_raw_uint128();
    v88->smodelVisData[29] = v90;
    varraw_uint128 = v90;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v89;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v91 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[30] )
  {
    v92 = varraw_uint128;
    v93 = AllocLoad_raw_uint128();
    v91->smodelVisData[30] = v93;
    varraw_uint128 = v93;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v92;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v94 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[31] )
  {
    v95 = varraw_uint128;
    v96 = AllocLoad_raw_uint128();
    v94->smodelVisData[31] = v96;
    varraw_uint128 = v96;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v95;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v97 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[0] )
  {
    v98 = varraw_uint128;
    v99 = AllocLoad_raw_uint128();
    v97->surfaceVisData[0] = v99;
    varraw_uint128 = v99;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v98;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v100 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[1] )
  {
    v101 = varraw_uint128;
    v102 = AllocLoad_raw_uint128();
    v100->surfaceVisData[1] = v102;
    varraw_uint128 = v102;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v101;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v103 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[2] )
  {
    v104 = varraw_uint128;
    v105 = AllocLoad_raw_uint128();
    v103->surfaceVisData[2] = v105;
    varraw_uint128 = v105;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v104;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v106 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[3] )
  {
    v107 = varraw_uint128;
    v108 = AllocLoad_raw_uint128();
    v106->surfaceVisData[3] = v108;
    varraw_uint128 = v108;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v107;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v109 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[4] )
  {
    v110 = varraw_uint128;
    v111 = AllocLoad_raw_uint128();
    v109->surfaceVisData[4] = v111;
    varraw_uint128 = v111;
    Load_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v110;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v112 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[5] )
  {
    v113 = varraw_uint128;
    v114 = AllocLoad_raw_uint128();
    v112->surfaceVisData[5] = v114;
    varraw_uint128 = v114;
    Load_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v113;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v115 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[6] )
  {
    v116 = varraw_uint128;
    v117 = AllocLoad_raw_uint128();
    v115->surfaceVisData[6] = v117;
    varraw_uint128 = v117;
    Load_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v116;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v118 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[7] )
  {
    v119 = varraw_uint128;
    v120 = AllocLoad_raw_uint128();
    v118->surfaceVisData[7] = v120;
    varraw_uint128 = v120;
    Load_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v119;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v121 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[8] )
  {
    v122 = varraw_uint128;
    v123 = AllocLoad_raw_uint128();
    v121->surfaceVisData[8] = v123;
    varraw_uint128 = v123;
    Load_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v122;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v124 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[9] )
  {
    v125 = varraw_uint128;
    v126 = AllocLoad_raw_uint128();
    v124->surfaceVisData[9] = v126;
    varraw_uint128 = v126;
    Load_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v125;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v127 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[10] )
  {
    v128 = varraw_uint128;
    v129 = AllocLoad_raw_uint128();
    v127->surfaceVisData[10] = v129;
    varraw_uint128 = v129;
    Load_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v128;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v130 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[11] )
  {
    v131 = varraw_uint128;
    v132 = AllocLoad_raw_uint128();
    v130->surfaceVisData[11] = v132;
    varraw_uint128 = v132;
    Load_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v131;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v133 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[12] )
  {
    v134 = varraw_uint128;
    v135 = AllocLoad_raw_uint128();
    v133->surfaceVisData[12] = v135;
    varraw_uint128 = v135;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v134;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v136 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[13] )
  {
    v137 = varraw_uint128;
    v138 = AllocLoad_raw_uint128();
    v136->surfaceVisData[13] = v138;
    varraw_uint128 = v138;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v137;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v139 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[14] )
  {
    v140 = varraw_uint128;
    v141 = AllocLoad_raw_uint128();
    v139->surfaceVisData[14] = v141;
    varraw_uint128 = v141;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v140;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v142 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[15] )
  {
    v143 = varraw_uint128;
    v144 = AllocLoad_raw_uint128();
    v142->surfaceVisData[15] = v144;
    varraw_uint128 = v144;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v143;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v145 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[16] )
  {
    v146 = varraw_uint128;
    v147 = AllocLoad_raw_uint128();
    v145->surfaceVisData[16] = v147;
    varraw_uint128 = v147;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v146;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v148 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[17] )
  {
    v149 = varraw_uint128;
    v150 = AllocLoad_raw_uint128();
    v148->surfaceVisData[17] = v150;
    varraw_uint128 = v150;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v149;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v151 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[18] )
  {
    v152 = varraw_uint128;
    v153 = AllocLoad_raw_uint128();
    v151->surfaceVisData[18] = v153;
    varraw_uint128 = v153;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v152;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v154 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[19] )
  {
    v155 = varraw_uint128;
    v156 = AllocLoad_raw_uint128();
    v154->surfaceVisData[19] = v156;
    varraw_uint128 = v156;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v155;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v157 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[20] )
  {
    v158 = varraw_uint128;
    v159 = AllocLoad_raw_uint128();
    v157->surfaceVisData[20] = v159;
    varraw_uint128 = v159;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v158;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v160 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[21] )
  {
    v161 = varraw_uint128;
    v162 = AllocLoad_raw_uint128();
    v160->surfaceVisData[21] = v162;
    varraw_uint128 = v162;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v161;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v163 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[22] )
  {
    v164 = varraw_uint128;
    v165 = AllocLoad_raw_uint128();
    v163->surfaceVisData[22] = v165;
    varraw_uint128 = v165;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v164;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v166 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[23] )
  {
    v167 = varraw_uint128;
    v168 = AllocLoad_raw_uint128();
    v166->surfaceVisData[23] = v168;
    varraw_uint128 = v168;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v167;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v169 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[24] )
  {
    v170 = varraw_uint128;
    v171 = AllocLoad_raw_uint128();
    v169->surfaceVisData[24] = v171;
    varraw_uint128 = v171;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v170;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v172 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[25] )
  {
    v173 = varraw_uint128;
    v174 = AllocLoad_raw_uint128();
    v172->surfaceVisData[25] = v174;
    varraw_uint128 = v174;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v173;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v175 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[26] )
  {
    v176 = varraw_uint128;
    v177 = AllocLoad_raw_uint128();
    v175->surfaceVisData[26] = v177;
    varraw_uint128 = v177;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v176;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v178 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[27] )
  {
    v179 = varraw_uint128;
    v180 = AllocLoad_raw_uint128();
    v178->surfaceVisData[27] = v180;
    varraw_uint128 = v180;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v179;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v181 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[28] )
  {
    v182 = varraw_uint128;
    v183 = AllocLoad_raw_uint128();
    v181->surfaceVisData[28] = v183;
    varraw_uint128 = v183;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v182;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v184 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[29] )
  {
    v185 = varraw_uint128;
    v186 = AllocLoad_raw_uint128();
    v184->surfaceVisData[29] = v186;
    varraw_uint128 = v186;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v185;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v187 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[30] )
  {
    v188 = varraw_uint128;
    v189 = AllocLoad_raw_uint128();
    v187->surfaceVisData[30] = v189;
    varraw_uint128 = v189;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v188;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v190 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[31] )
  {
    v191 = varraw_uint128;
    v192 = AllocLoad_raw_uint128();
    v190->surfaceVisData[31] = v192;
    varraw_uint128 = v192;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v191;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v193 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->primaryLightVisData )
  {
    v194 = varraw_uint128;
    v195 = AllocLoad_raw_uint128();
    v193->primaryLightVisData = v195;
    varraw_uint128 = v195;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->primaryLightVisDataCount);
    varraw_uint128 = v194;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v196 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->reflectionProbeVisData )
  {
    v197 = varraw_uint128;
    v198 = AllocLoad_raw_uint128();
    v196->reflectionProbeVisData = v198;
    varraw_uint128 = v198;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->reflectionProbeVisDataCount);
    varraw_uint128 = v197;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v199 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->volumetricVisData )
  {
    v200 = varraw_uint128;
    v201 = AllocLoad_raw_uint128();
    v199->volumetricVisData = v201;
    varraw_uint128 = v201;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->volumetricVisDataCount);
    varraw_uint128 = v200;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v202 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->decalVisData )
  {
    v203 = varraw_uint128;
    v204 = AllocLoad_raw_uint128();
    v202->decalVisData = v204;
    varraw_uint128 = v204;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->decalVisDataCount);
    varraw_uint128 = v203;
  }
  DB_PopStreamPos();
  v205 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->sortedSurfIndex )
  {
    v206 = varBSPSURF_COUNT_TYPE;
    BSPSURF_COUNT_TYPE = AllocLoad_BSPSURF_COUNT_TYPE();
    v205->sortedSurfIndex = BSPSURF_COUNT_TYPE;
    varBSPSURF_COUNT_TYPE = BSPSURF_COUNT_TYPE;
    Load_BSPSURF_COUNT_TYPEArray(AtStart, 32i64 * varGfxWorldDpvsStatic->surfaceVisDataCount);
    v205 = varGfxWorldDpvsStatic;
    varBSPSURF_COUNT_TYPE = v206;
  }
  if ( v205->sortedSmodelIndices )
  {
    v208 = varushort;
    ushort = AllocLoad_ushort();
    v205->sortedSmodelIndices = ushort;
    varushort = ushort;
    Load_ushortArray(AtStart, 32i64 * varGfxWorldDpvsStatic->smodelVisDataCount + 1);
    varushort = v208;
  }
  DB_PushStreamPos(4u);
  v210 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceCastsSunShadow )
  {
    v211 = varraw_uint128;
    v212 = AllocLoad_raw_uint128();
    v210->surfaceCastsSunShadow = v212;
    varraw_uint128 = v212;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v211;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v213 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceCastsSunShadowOpt )
  {
    v214 = varraw_uint128;
    v215 = AllocLoad_raw_uint128();
    v213->surfaceCastsSunShadowOpt = v215;
    varraw_uint128 = v215;
    Load_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->sunShadowOptCount * varGfxWorldDpvsStatic->sunSurfVisDataCount);
    varraw_uint128 = v214;
  }
  DB_PopStreamPos();
}

/*
==============
Load_GfxWorldDpvsStaticArray
==============
*/
void Load_GfxWorldDpvsStaticArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxWorldDpvsStatic *i; 

  v2 = count;
  Load_Stream(streamStart, varGfxWorldDpvsStatic, 632 * count);
  for ( i = varGfxWorldDpvsStatic; v2; --v2 )
  {
    varGfxWorldDpvsStatic = i;
    Load_GfxWorldDpvsStatic(NotAtStart);
    ++i;
  }
}

/*
==============
Load_GfxWorldDpvsStaticStream
==============
*/
void Load_GfxWorldDpvsStaticStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 19619, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  for ( ; count; --count )
  {
    Load_GfxWorldDpvsStatic(AtStart);
    varGfxWorldDpvsStatic = (GfxWorldDpvsStatic *)g_streamPosGlob.pos;
  }
}

/*
==============
Load_GfxWorldDraw
==============
*/
void Load_GfxWorldDraw(const DBStreamStart streamStart)
{
  GfxWorldReflectionProbeData *v1; 
  GfxWorldLightmapReindexData *v2; 
  GfxImage **v3; 
  GfxWorldDraw *v4; 
  GfxStaticDecalVolumeMaterial *v5; 
  __int64 decalVolumeMaterialCount; 
  GfxStaticDecalVolumeMaterial *i; 
  Material **v8; 
  GfxStaticDecalVolumeMask *v9; 
  __int64 decalVolumeMaskCount; 
  GfxStaticDecalVolumeMask *j; 
  GfxDecalVolumeMask **v12; 
  GfxDecalVolumeCollection *v13; 
  GfxWorldDraw *v14; 
  unsigned int *v15; 
  unsigned int *uint; 
  GfxWrappedBuffer *v17; 
  GfxWrappedBuffer *p_materialAndMaskIndirectionBuffer; 
  GfxWorldTransientZone **v19; 
  GfxWorldTransientZone **v20; 
  __int64 v21; 
  GfxWorldDraw *v22; 
  unsigned int *v23; 
  unsigned int *v24; 
  GfxWorldDraw *v25; 
  float4 *v26; 
  ID3D12Resource **v27; 
  ID3D12Resource **p_displacementParmsBuffer; 
  GfxShaderBufferView *p_displacementParmsView; 
  GfxShaderBufferView *v30; 
  GfxWorldVolumetrics *v31; 
  GfxWorldDraw *v32; 
  unsigned __int8 *v33; 
  unsigned __int8 *byte; 
  GfxWrappedRWBuffer *v35; 
  GfxWrappedRWBuffer *p_compressedSunShadowBuffer; 

  Load_Stream(streamStart, varGfxWorldDraw, 0x3200ui64);
  v1 = varGfxWorldReflectionProbeData;
  varGfxWorldReflectionProbeData = &varGfxWorldDraw->reflectionProbeData;
  Load_GfxWorldReflectionProbeData(NotAtStart);
  varGfxWorldReflectionProbeData = v1;
  v2 = varGfxWorldLightmapReindexData;
  varGfxWorldLightmapReindexData = &varGfxWorldDraw->lightmapReindexData;
  Load_GfxWorldLightmapReindexData(NotAtStart);
  varGfxWorldLightmapReindexData = v2;
  v3 = varGfxImagePtr;
  varGfxImagePtr = &varGfxWorldDraw->iesLookupTexture;
  Load_GfxImagePtr(NotAtStart);
  v4 = varGfxWorldDraw;
  varGfxImagePtr = v3;
  if ( varGfxWorldDraw->decalVolumeMaterials )
  {
    v5 = varGfxStaticDecalVolumeMaterial;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->decalVolumeMaterials = (GfxStaticDecalVolumeMaterial *)g_streamPosGlob.pos;
    varGfxStaticDecalVolumeMaterial = (GfxStaticDecalVolumeMaterial *)g_streamPosGlob.pos;
    decalVolumeMaterialCount = varGfxWorldDraw->decalVolumeMaterialCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 8 * decalVolumeMaterialCount);
    for ( i = varGfxStaticDecalVolumeMaterial; decalVolumeMaterialCount; --decalVolumeMaterialCount )
    {
      varGfxStaticDecalVolumeMaterial = i;
      Load_Stream(NotAtStart, i, 8ui64);
      v8 = varMaterialHandle;
      varMaterialHandle = &varGfxStaticDecalVolumeMaterial->material;
      Load_MaterialHandle(NotAtStart);
      ++i;
      varMaterialHandle = v8;
    }
    v4 = varGfxWorldDraw;
    varGfxStaticDecalVolumeMaterial = v5;
  }
  if ( v4->decalVolumeMasks )
  {
    v9 = varGfxStaticDecalVolumeMask;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->decalVolumeMasks = (GfxStaticDecalVolumeMask *)g_streamPosGlob.pos;
    varGfxStaticDecalVolumeMask = (GfxStaticDecalVolumeMask *)g_streamPosGlob.pos;
    decalVolumeMaskCount = varGfxWorldDraw->decalVolumeMaskCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 8 * decalVolumeMaskCount);
    for ( j = varGfxStaticDecalVolumeMask; decalVolumeMaskCount; --decalVolumeMaskCount )
    {
      varGfxStaticDecalVolumeMask = j;
      Load_Stream(NotAtStart, j, 8ui64);
      v12 = varGfxDecalVolumeMaskPtr;
      varGfxDecalVolumeMaskPtr = &varGfxStaticDecalVolumeMask->blendMapOverride;
      Load_GfxDecalVolumeMaskPtr(NotAtStart);
      ++j;
      varGfxDecalVolumeMaskPtr = v12;
    }
    v4 = varGfxWorldDraw;
    varGfxStaticDecalVolumeMask = v9;
  }
  if ( v4->decalVolumeCollections )
  {
    v13 = varGfxDecalVolumeCollection;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->decalVolumeCollections = (GfxDecalVolumeCollection *)g_streamPosGlob.pos;
    varGfxDecalVolumeCollection = (GfxDecalVolumeCollection *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 8i64 * varGfxWorldDraw->decalVolumeCollectionCount);
    varGfxDecalVolumeCollection = v13;
  }
  DB_PushStreamPos(7u);
  v14 = varGfxWorldDraw;
  if ( varGfxWorldDraw->materialAndMaskIndirection )
  {
    v15 = varuint;
    uint = AllocLoad_uint();
    v14->materialAndMaskIndirection = uint;
    varuint = uint;
    Load_uintArray(AtStart, varGfxWorldDraw->decalVolumeMaterialCount + varGfxWorldDraw->decalVolumeMaskCount);
    varuint = v15;
  }
  DB_PopStreamPos();
  v17 = varGfxWrappedBuffer;
  p_materialAndMaskIndirectionBuffer = &varGfxWorldDraw->materialAndMaskIndirectionBuffer;
  varGfxWrappedBuffer = &varGfxWorldDraw->materialAndMaskIndirectionBuffer;
  Load_GfxWrappedBuffer(NotAtStart);
  Load_DecalVolumesBuffer(p_materialAndMaskIndirectionBuffer, varGfxWorldDraw);
  v19 = varGfxWorldTransientZonePtr;
  varGfxWorldTransientZonePtr = varGfxWorldDraw->transientZones;
  varGfxWrappedBuffer = v17;
  Load_Stream(NotAtStart, varGfxWorldDraw->transientZones, 0x3000ui64);
  v20 = varGfxWorldTransientZonePtr;
  v21 = 1536i64;
  do
  {
    varGfxWorldTransientZonePtr = v20;
    Load_GfxWorldTransientZonePtr(NotAtStart);
    ++v20;
    --v21;
  }
  while ( v21 );
  v22 = varGfxWorldDraw;
  varGfxWorldTransientZonePtr = v19;
  if ( varGfxWorldDraw->lightmapTransientIndex )
  {
    v23 = varuint;
    v24 = AllocLoad_uint();
    v22->lightmapTransientIndex = v24;
    varuint = v24;
    Load_uintArray(AtStart, varGfxWorldDraw->lightmapCount);
    varuint = v23;
  }
  DB_PushStreamPos(7u);
  v25 = varGfxWorldDraw;
  if ( varGfxWorldDraw->displacementParms )
  {
    v26 = varGfxDisplacementParms;
    DB_PatchMem_FixStreamAlignment(0x3Fui64);
    DB_CheckCanIncStreamPos(0i64);
    v25->displacementParms = (float4 *)g_streamPosGlob.pos;
    varGfxDisplacementParms = (float4 *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varGfxWorldDraw->displacementParmsCount);
    varGfxDisplacementParms = v26;
  }
  DB_PopStreamPos();
  v27 = varGfxVertexBuffer;
  p_displacementParmsBuffer = &varGfxWorldDraw->displacementParmsBuffer;
  varGfxVertexBuffer = &varGfxWorldDraw->displacementParmsBuffer;
  Load_GfxVertexBuffer(NotAtStart);
  Load_VertexBuffer(p_displacementParmsBuffer, varGfxWorldDraw->displacementParms, 16 * varGfxWorldDraw->displacementParmsCount, "Displacement vertex buffer");
  varGfxVertexBuffer = v27;
  p_displacementParmsView = &varGfxWorldDraw->displacementParmsView;
  v30 = varGfxShaderBufferView;
  varGfxShaderBufferView = &varGfxWorldDraw->displacementParmsView;
  Load_GfxShaderBufferView(NotAtStart);
  Load_VertexBufferView(p_displacementParmsView, varGfxWorldDraw->displacementParmsBuffer, 16 * varGfxWorldDraw->displacementParmsCount, "displacementParmsView");
  v31 = varGfxWorldVolumetrics;
  varGfxWorldVolumetrics = &varGfxWorldDraw->volumetrics;
  varGfxShaderBufferView = v30;
  Load_GfxWorldVolumetrics(NotAtStart);
  varGfxWorldVolumetrics = v31;
  DB_PushStreamPos(7u);
  v32 = varGfxWorldDraw;
  if ( varGfxWorldDraw->compressedSunShadow )
  {
    v33 = varbyte;
    byte = AllocLoad_byte();
    v32->compressedSunShadow = byte;
    varbyte = byte;
    Load_byteArray(AtStart, varGfxWorldDraw->compressedSunShadowSize);
    varbyte = v33;
  }
  DB_PopStreamPos();
  v35 = varGfxWrappedRWBuffer;
  p_compressedSunShadowBuffer = &varGfxWorldDraw->compressedSunShadowBuffer;
  varGfxWrappedRWBuffer = &varGfxWorldDraw->compressedSunShadowBuffer;
  Load_GfxWrappedRWBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_compressedSunShadowBuffer, GfxWrappedBuffer_Raw, 1u, varGfxWorldDraw->compressedSunShadowSize, varGfxWorldDraw->compressedSunShadow, "compressedSunShadow", 0);
  varGfxWrappedRWBuffer = v35;
}

/*
==============
Load_GfxWorldDrawArray
==============
*/
void Load_GfxWorldDrawArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxWorldDraw *i; 

  v2 = count;
  Load_Stream(streamStart, varGfxWorldDraw, 12800 * count);
  for ( i = varGfxWorldDraw; v2; --v2 )
  {
    varGfxWorldDraw = i;
    Load_GfxWorldDraw(NotAtStart);
    ++i;
  }
}

/*
==============
Load_GfxWorldDrawCells
==============
*/
void Load_GfxWorldDrawCells(const DBStreamStart streamStart)
{
  GfxWorldDrawCells *v1; 
  GfxCellTreeCount *v2; 
  GfxCellTree *v3; 
  __int64 cellCount; 
  GfxCellTree *i; 

  Load_Stream(streamStart, varGfxWorldDrawCells, 0x18ui64);
  v1 = varGfxWorldDrawCells;
  if ( varGfxWorldDrawCells->aabbTreeCounts )
  {
    v2 = varGfxCellTreeCount;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->aabbTreeCounts = (GfxCellTreeCount *)g_streamPosGlob.pos;
    varGfxCellTreeCount = (GfxCellTreeCount *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 4i64 * varGfxWorldDrawCells->cellCount);
    v1 = varGfxWorldDrawCells;
    varGfxCellTreeCount = v2;
  }
  if ( v1->aabbTrees )
  {
    v3 = varGfxCellTree;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->aabbTrees = (GfxCellTree *)g_streamPosGlob.pos;
    varGfxCellTree = (GfxCellTree *)g_streamPosGlob.pos;
    cellCount = varGfxWorldDrawCells->cellCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 8 * cellCount);
    for ( i = varGfxCellTree; cellCount; --cellCount )
    {
      varGfxCellTree = i;
      Load_GfxCellTree(NotAtStart);
      ++i;
    }
    varGfxCellTree = v3;
  }
}

/*
==============
Load_GfxWorldDrawCellsArray
==============
*/
void Load_GfxWorldDrawCellsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxWorldDrawCells *i; 
  GfxWorldDrawCells *v4; 
  GfxCellTreeCount *v5; 
  GfxCellTree *v6; 
  __int64 cellCount; 
  GfxCellTree *j; 

  v2 = count;
  Load_Stream(streamStart, varGfxWorldDrawCells, 24 * count);
  for ( i = varGfxWorldDrawCells; v2; --v2 )
  {
    varGfxWorldDrawCells = i;
    Load_Stream(NotAtStart, i, 0x18ui64);
    v4 = varGfxWorldDrawCells;
    if ( varGfxWorldDrawCells->aabbTreeCounts )
    {
      v5 = varGfxCellTreeCount;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->aabbTreeCounts = (GfxCellTreeCount *)g_streamPosGlob.pos;
      varGfxCellTreeCount = (GfxCellTreeCount *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 4i64 * varGfxWorldDrawCells->cellCount);
      v4 = varGfxWorldDrawCells;
      varGfxCellTreeCount = v5;
    }
    if ( v4->aabbTrees )
    {
      v6 = varGfxCellTree;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->aabbTrees = (GfxCellTree *)g_streamPosGlob.pos;
      varGfxCellTree = (GfxCellTree *)g_streamPosGlob.pos;
      cellCount = varGfxWorldDrawCells->cellCount;
      Load_Stream(AtStart, g_streamPosGlob.pos, 8 * cellCount);
      for ( j = varGfxCellTree; cellCount; --cellCount )
      {
        varGfxCellTree = j;
        Load_GfxCellTree(NotAtStart);
        ++j;
      }
      varGfxCellTree = v6;
    }
    ++i;
  }
}

/*
==============
Load_GfxWorldDrawCellsStream
==============
*/
void Load_GfxWorldDrawCellsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxWorldDrawCells *v4; 
  GfxCellTreeCount *v5; 
  GfxCellTree *v6; 
  __int64 cellCount; 
  GfxCellTree *i; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 20109, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxWorldDrawCells;
    do
    {
      Load_Stream(AtStart, pos, 0x18ui64);
      v4 = varGfxWorldDrawCells;
      if ( varGfxWorldDrawCells->aabbTreeCounts )
      {
        v5 = varGfxCellTreeCount;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->aabbTreeCounts = (GfxCellTreeCount *)g_streamPosGlob.pos;
        varGfxCellTreeCount = (GfxCellTreeCount *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 4i64 * varGfxWorldDrawCells->cellCount);
        v4 = varGfxWorldDrawCells;
        varGfxCellTreeCount = v5;
      }
      if ( v4->aabbTrees )
      {
        v6 = varGfxCellTree;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->aabbTrees = (GfxCellTree *)g_streamPosGlob.pos;
        varGfxCellTree = (GfxCellTree *)g_streamPosGlob.pos;
        cellCount = varGfxWorldDrawCells->cellCount;
        Load_Stream(AtStart, g_streamPosGlob.pos, 8 * cellCount);
        for ( i = varGfxCellTree; cellCount; --cellCount )
        {
          varGfxCellTree = i;
          Load_GfxCellTree(NotAtStart);
          ++i;
        }
        varGfxCellTree = v6;
      }
      pos = g_streamPosGlob.pos;
      varGfxWorldDrawCells = (GfxWorldDrawCells *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxWorldDrawStream
==============
*/
void Load_GfxWorldDrawStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 24799, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  for ( ; count; --count )
  {
    Load_GfxWorldDraw(AtStart);
    varGfxWorldDraw = (GfxWorldDraw *)g_streamPosGlob.pos;
  }
}

/*
==============
Load_GfxWorldLightmapImagePtrArray
==============
*/
void Load_GfxWorldLightmapImagePtrArray(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxWorldLightmapImagePtrArray, 0x18ui64);
}

/*
==============
Load_GfxWorldLightmapImagePtrArrayArray
==============
*/
void Load_GfxWorldLightmapImagePtrArrayArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxWorldLightmapImagePtrArray, 24 * count);
}

/*
==============
Load_GfxWorldLightmapImagePtrArrayStream
==============
*/
void Load_GfxWorldLightmapImagePtrArrayStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 22938, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxWorldLightmapImagePtrArray;
    do
    {
      Load_Stream(AtStart, pos, 0x18ui64);
      pos = g_streamPosGlob.pos;
      varGfxWorldLightmapImagePtrArray = (GfxWorldLightmapImagePtrArray *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxWorldLightmapReindexData
==============
*/
void Load_GfxWorldLightmapReindexData(const DBStreamStart streamStart)
{
  GfxWorldLightmapReindexData *v1; 
  GfxWorldLightmapReindexDataElement *v2; 
  GfxWorldPackedLightmap *v3; 

  Load_Stream(streamStart, varGfxWorldLightmapReindexData, 0x20ui64);
  v1 = varGfxWorldLightmapReindexData;
  if ( varGfxWorldLightmapReindexData->reindexElement )
  {
    v2 = varGfxWorldLightmapReindexDataElement;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->reindexElement = (GfxWorldLightmapReindexDataElement *)g_streamPosGlob.pos;
    varGfxWorldLightmapReindexDataElement = (GfxWorldLightmapReindexDataElement *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 20i64 * varGfxWorldLightmapReindexData->reindexCount);
    v1 = varGfxWorldLightmapReindexData;
    varGfxWorldLightmapReindexDataElement = v2;
  }
  if ( v1->packedLightmap )
  {
    v3 = varGfxWorldPackedLightmap;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->packedLightmap = (GfxWorldPackedLightmap *)g_streamPosGlob.pos;
    varGfxWorldPackedLightmap = (GfxWorldPackedLightmap *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 8i64 * varGfxWorldLightmapReindexData->packedLightmapCount);
    varGfxWorldPackedLightmap = v3;
  }
}

/*
==============
Load_GfxWorldLightmapReindexDataArray
==============
*/
void Load_GfxWorldLightmapReindexDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxWorldLightmapReindexData *i; 
  GfxWorldLightmapReindexData *v4; 
  GfxWorldLightmapReindexDataElement *v5; 
  GfxWorldPackedLightmap *v6; 

  v2 = count;
  Load_Stream(streamStart, varGfxWorldLightmapReindexData, 32 * count);
  for ( i = varGfxWorldLightmapReindexData; v2; --v2 )
  {
    varGfxWorldLightmapReindexData = i;
    Load_Stream(NotAtStart, i, 0x20ui64);
    v4 = varGfxWorldLightmapReindexData;
    if ( varGfxWorldLightmapReindexData->reindexElement )
    {
      v5 = varGfxWorldLightmapReindexDataElement;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->reindexElement = (GfxWorldLightmapReindexDataElement *)g_streamPosGlob.pos;
      varGfxWorldLightmapReindexDataElement = (GfxWorldLightmapReindexDataElement *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 20i64 * varGfxWorldLightmapReindexData->reindexCount);
      v4 = varGfxWorldLightmapReindexData;
      varGfxWorldLightmapReindexDataElement = v5;
    }
    if ( v4->packedLightmap )
    {
      v6 = varGfxWorldPackedLightmap;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->packedLightmap = (GfxWorldPackedLightmap *)g_streamPosGlob.pos;
      varGfxWorldPackedLightmap = (GfxWorldPackedLightmap *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 8i64 * varGfxWorldLightmapReindexData->packedLightmapCount);
      varGfxWorldPackedLightmap = v6;
    }
    ++i;
  }
}

/*
==============
Load_GfxWorldLightmapReindexDataElement
==============
*/
void Load_GfxWorldLightmapReindexDataElement(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxWorldLightmapReindexDataElement, 0x14ui64);
}

/*
==============
Load_GfxWorldLightmapReindexDataElementArray
==============
*/
void Load_GfxWorldLightmapReindexDataElementArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxWorldLightmapReindexDataElement, 20 * count);
}

/*
==============
Load_GfxWorldLightmapReindexDataElementStream
==============
*/
void Load_GfxWorldLightmapReindexDataElementStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 22586, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxWorldLightmapReindexDataElement;
    do
    {
      Load_Stream(AtStart, pos, 0x14ui64);
      pos = g_streamPosGlob.pos;
      varGfxWorldLightmapReindexDataElement = (GfxWorldLightmapReindexDataElement *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxWorldLightmapReindexDataStream
==============
*/
void Load_GfxWorldLightmapReindexDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxWorldLightmapReindexData *v4; 
  GfxWorldLightmapReindexDataElement *v5; 
  GfxWorldPackedLightmap *v6; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 22861, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxWorldLightmapReindexData;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      v4 = varGfxWorldLightmapReindexData;
      if ( varGfxWorldLightmapReindexData->reindexElement )
      {
        v5 = varGfxWorldLightmapReindexDataElement;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->reindexElement = (GfxWorldLightmapReindexDataElement *)g_streamPosGlob.pos;
        varGfxWorldLightmapReindexDataElement = (GfxWorldLightmapReindexDataElement *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 20i64 * varGfxWorldLightmapReindexData->reindexCount);
        v4 = varGfxWorldLightmapReindexData;
        varGfxWorldLightmapReindexDataElement = v5;
      }
      if ( v4->packedLightmap )
      {
        v6 = varGfxWorldPackedLightmap;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->packedLightmap = (GfxWorldPackedLightmap *)g_streamPosGlob.pos;
        varGfxWorldPackedLightmap = (GfxWorldPackedLightmap *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 8i64 * varGfxWorldLightmapReindexData->packedLightmapCount);
        varGfxWorldPackedLightmap = v6;
      }
      pos = g_streamPosGlob.pos;
      varGfxWorldLightmapReindexData = (GfxWorldLightmapReindexData *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxWorldPackedLightmap
==============
*/
void Load_GfxWorldPackedLightmap(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxWorldPackedLightmap, 8ui64);
}

/*
==============
Load_GfxWorldPackedLightmapArray
==============
*/
void Load_GfxWorldPackedLightmapArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxWorldPackedLightmap, 8 * count);
}

/*
==============
Load_GfxWorldPackedLightmapStream
==============
*/
void Load_GfxWorldPackedLightmapStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 22686, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxWorldPackedLightmap;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      pos = g_streamPosGlob.pos;
      varGfxWorldPackedLightmap = (GfxWorldPackedLightmap *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxWorldPtr
==============
*/
void Load_GfxWorldPtr(const DBStreamStart streamStart)
{
  GfxWorld **v1; 
  __int64 v2; 
  GfxWorld *v3; 
  unsigned __int8 *inserted; 

  Load_Stream(streamStart, varGfxWorldPtr, 8ui64);
  DB_PushStreamPos(1u);
  v1 = varGfxWorldPtr;
  v2 = (__int64)*varGfxWorldPtr;
  if ( *varGfxWorldPtr )
  {
    if ( v2 == -1 )
    {
      DB_PushSharedData();
    }
    else if ( v2 != -2 && v2 != -3 )
    {
      DB_ConvertOffsetToAlias((unsigned __int64 *)varGfxWorldPtr);
      goto LABEL_6;
    }
    v3 = varGfxWorld;
    DB_PatchMem_FixStreamAlignment(0xFui64);
    DB_CheckCanIncStreamPos(0i64);
    inserted = NULL;
    *v1 = (GfxWorld *)g_streamPosGlob.pos;
    varGfxWorld = (GfxWorld *)g_streamPosGlob.pos;
    if ( v2 == -3 )
      inserted = DB_InsertPointer();
    Load_GfxWorld(AtStart);
    Load_GfxWorldAsset(v1);
    varGfxWorld = v3;
    if ( inserted )
      *(_QWORD *)inserted = *v1;
    if ( v2 == -1 )
      DB_PopSharedData();
  }
LABEL_6:
  DB_PopStreamPos();
}

/*
==============
Load_GfxWorldPtrArray
==============
*/
void Load_GfxWorldPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxWorld **i; 
  GfxWorld **v4; 
  __int64 v5; 
  GfxWorld *v6; 
  unsigned __int8 *inserted; 

  v2 = count;
  Load_Stream(streamStart, varGfxWorldPtr, 8 * count);
  for ( i = varGfxWorldPtr; v2; --v2 )
  {
    varGfxWorldPtr = i;
    Load_Stream(NotAtStart, i, 8ui64);
    DB_PushStreamPos(1u);
    v4 = varGfxWorldPtr;
    v5 = (__int64)*varGfxWorldPtr;
    if ( *varGfxWorldPtr )
    {
      if ( v5 == -1 )
      {
        DB_PushSharedData();
LABEL_8:
        v6 = varGfxWorld;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        inserted = NULL;
        *v4 = (GfxWorld *)g_streamPosGlob.pos;
        varGfxWorld = (GfxWorld *)g_streamPosGlob.pos;
        if ( v5 == -3 )
          inserted = DB_InsertPointer();
        Load_GfxWorld(AtStart);
        Load_GfxWorldAsset(v4);
        varGfxWorld = v6;
        if ( inserted )
          *(_QWORD *)inserted = *v4;
        if ( v5 == -1 )
          DB_PopSharedData();
        goto LABEL_14;
      }
      if ( v5 == -2 || v5 == -3 )
        goto LABEL_8;
      DB_ConvertOffsetToAlias((unsigned __int64 *)varGfxWorldPtr);
    }
LABEL_14:
    DB_PopStreamPos();
    ++i;
  }
}

/*
==============
Load_GfxWorldPtrStream
==============
*/
void Load_GfxWorldPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxWorld **v4; 
  __int64 v5; 
  GfxWorld *v6; 
  unsigned __int8 *inserted; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 32047, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxWorldPtr;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      DB_PushStreamPos(1u);
      v4 = varGfxWorldPtr;
      v5 = (__int64)*varGfxWorldPtr;
      if ( *varGfxWorldPtr )
      {
        if ( v5 == -1 )
        {
          DB_PushSharedData();
LABEL_12:
          v6 = varGfxWorld;
          DB_PatchMem_FixStreamAlignment(0xFui64);
          DB_CheckCanIncStreamPos(0i64);
          inserted = NULL;
          *v4 = (GfxWorld *)g_streamPosGlob.pos;
          varGfxWorld = (GfxWorld *)g_streamPosGlob.pos;
          if ( v5 == -3 )
            inserted = DB_InsertPointer();
          Load_GfxWorld(AtStart);
          Load_GfxWorldAsset(v4);
          varGfxWorld = v6;
          if ( inserted )
            *(_QWORD *)inserted = *v4;
          if ( v5 == -1 )
            DB_PopSharedData();
          goto LABEL_18;
        }
        if ( v5 == -2 || v5 == -3 )
          goto LABEL_12;
        DB_ConvertOffsetToAlias((unsigned __int64 *)varGfxWorldPtr);
      }
LABEL_18:
      DB_PopStreamPos();
      pos = g_streamPosGlob.pos;
      varGfxWorldPtr = (GfxWorld **)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxWorldStream
==============
*/
void Load_GfxWorldStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 31923, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  for ( ; count; --count )
  {
    Load_GfxWorld(AtStart);
    varGfxWorld = (GfxWorld *)g_streamPosGlob.pos;
  }
}

/*
==============
Load_GfxWorldTransientZone
==============
*/
void Load_GfxWorldTransientZone(const DBStreamStart streamStart)
{
  const char **v2; 
  GfxWorldDrawVerts *v3; 
  GfxWorldDrawCells *v4; 
  GfxLightmapAtlasDataTemp **v5; 
  GfxGpuLightGridTransientData *v6; 
  GfxWorldTransientZone *v7; 
  GfxReflectionProbeTransientData *v8; 
  GfxReflectionProbeTransientData *GfxReflectionProbeTransientData; 
  unsigned __int16 *v10; 
  unsigned __int16 *ushort; 
  GfxDecalVolumeTransientData *v12; 
  GfxCompressedSunShadowDataTemp **v13; 

  DB_PatchMem_PushAsset(28, varGfxWorldTransientZone);
  Load_Stream(streamStart, varGfxWorldTransientZone, 0x100ui64);
  DB_PushStreamPos(8u);
  v2 = varXString;
  varXString = &varGfxWorldTransientZone->name;
  Load_XString(NotAtStart);
  varXString = v2;
  v3 = varGfxWorldDrawVerts;
  varGfxWorldDrawVerts = &varGfxWorldTransientZone->drawVerts;
  Load_GfxWorldDrawVerts(NotAtStart);
  varGfxWorldDrawVerts = v3;
  v4 = varGfxWorldDrawCells;
  varGfxWorldDrawCells = &varGfxWorldTransientZone->drawCells;
  Load_GfxWorldDrawCells(NotAtStart);
  varGfxWorldDrawCells = v4;
  v5 = varGfxLightmapAtlasDataTempPtr;
  varGfxLightmapAtlasDataTempPtr = &varGfxWorldTransientZone->tempLightmapData;
  Load_GfxLightmapAtlasDataTempPtr(NotAtStart);
  varGfxLightmapAtlasDataTempPtr = v5;
  v6 = varGfxGpuLightGridTransientData;
  varGfxGpuLightGridTransientData = &varGfxWorldTransientZone->gpuLightGrid;
  Load_GfxGpuLightGridTransientData(NotAtStart);
  v7 = varGfxWorldTransientZone;
  varGfxGpuLightGridTransientData = v6;
  if ( varGfxWorldTransientZone->reflectionProbes )
  {
    v8 = varGfxReflectionProbeTransientData;
    GfxReflectionProbeTransientData = AllocLoad_GfxReflectionProbeTransientData();
    v7->reflectionProbes = GfxReflectionProbeTransientData;
    varGfxReflectionProbeTransientData = GfxReflectionProbeTransientData;
    Load_GfxReflectionProbeTransientData(AtStart);
    v7 = varGfxWorldTransientZone;
    varGfxReflectionProbeTransientData = v8;
  }
  if ( v7->collections )
  {
    v10 = varushort;
    ushort = AllocLoad_ushort();
    v7->collections = ushort;
    varushort = ushort;
    Load_ushortArray(AtStart, varGfxWorldTransientZone->collectionCount);
    v7 = varGfxWorldTransientZone;
    varushort = v10;
  }
  if ( v7->decalVolumes )
  {
    v12 = varGfxDecalVolumeTransientData;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v7->decalVolumes = (GfxDecalVolumeTransientData *)g_streamPosGlob.pos;
    varGfxDecalVolumeTransientData = (GfxDecalVolumeTransientData *)g_streamPosGlob.pos;
    Load_GfxDecalVolumeTransientData(AtStart);
    v7 = varGfxWorldTransientZone;
    varGfxDecalVolumeTransientData = v12;
  }
  v13 = varGfxCompressedSunShadowDataTempPtr;
  varGfxCompressedSunShadowDataTempPtr = &v7->compressedSunShadow;
  Load_GfxCompressedSunShadowDataTempPtr(NotAtStart);
  varGfxCompressedSunShadowDataTempPtr = v13;
  DB_PopStreamPos();
  DB_PatchMem_PopAsset();
}

/*
==============
Load_GfxWorldTransientZoneArray
==============
*/
void Load_GfxWorldTransientZoneArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxWorldTransientZone *i; 
  const char **v4; 
  GfxWorldDrawVerts *v5; 
  GfxWorldDrawCells *v6; 
  GfxLightmapAtlasDataTemp **v7; 
  GfxGpuLightGridTransientData *v8; 
  GfxWorldTransientZone *v9; 
  GfxReflectionProbeTransientData *v10; 
  GfxReflectionProbeTransientData *GfxReflectionProbeTransientData; 
  unsigned __int16 *v12; 
  unsigned __int16 *ushort; 
  GfxDecalVolumeTransientData *v14; 
  GfxCompressedSunShadowDataTemp **v15; 

  v2 = count;
  Load_Stream(streamStart, varGfxWorldTransientZone, count << 8);
  for ( i = varGfxWorldTransientZone; v2; --v2 )
  {
    varGfxWorldTransientZone = i;
    DB_PatchMem_PushAsset(28, i);
    Load_Stream(NotAtStart, varGfxWorldTransientZone, 0x100ui64);
    DB_PushStreamPos(8u);
    v4 = varXString;
    varXString = &varGfxWorldTransientZone->name;
    Load_XString(NotAtStart);
    varXString = v4;
    v5 = varGfxWorldDrawVerts;
    varGfxWorldDrawVerts = &varGfxWorldTransientZone->drawVerts;
    Load_GfxWorldDrawVerts(NotAtStart);
    varGfxWorldDrawVerts = v5;
    v6 = varGfxWorldDrawCells;
    varGfxWorldDrawCells = &varGfxWorldTransientZone->drawCells;
    Load_GfxWorldDrawCells(NotAtStart);
    varGfxWorldDrawCells = v6;
    v7 = varGfxLightmapAtlasDataTempPtr;
    varGfxLightmapAtlasDataTempPtr = &varGfxWorldTransientZone->tempLightmapData;
    Load_GfxLightmapAtlasDataTempPtr(NotAtStart);
    varGfxLightmapAtlasDataTempPtr = v7;
    v8 = varGfxGpuLightGridTransientData;
    varGfxGpuLightGridTransientData = &varGfxWorldTransientZone->gpuLightGrid;
    Load_GfxGpuLightGridTransientData(NotAtStart);
    varGfxGpuLightGridTransientData = v8;
    v9 = varGfxWorldTransientZone;
    if ( varGfxWorldTransientZone->reflectionProbes )
    {
      v10 = varGfxReflectionProbeTransientData;
      GfxReflectionProbeTransientData = AllocLoad_GfxReflectionProbeTransientData();
      v9->reflectionProbes = GfxReflectionProbeTransientData;
      varGfxReflectionProbeTransientData = GfxReflectionProbeTransientData;
      Load_GfxReflectionProbeTransientData(AtStart);
      v9 = varGfxWorldTransientZone;
      varGfxReflectionProbeTransientData = v10;
    }
    if ( v9->collections )
    {
      v12 = varushort;
      ushort = AllocLoad_ushort();
      v9->collections = ushort;
      varushort = ushort;
      Load_ushortArray(AtStart, varGfxWorldTransientZone->collectionCount);
      v9 = varGfxWorldTransientZone;
      varushort = v12;
    }
    if ( v9->decalVolumes )
    {
      v14 = varGfxDecalVolumeTransientData;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      v9->decalVolumes = (GfxDecalVolumeTransientData *)g_streamPosGlob.pos;
      varGfxDecalVolumeTransientData = (GfxDecalVolumeTransientData *)g_streamPosGlob.pos;
      Load_GfxDecalVolumeTransientData(AtStart);
      v9 = varGfxWorldTransientZone;
      varGfxDecalVolumeTransientData = v14;
    }
    v15 = varGfxCompressedSunShadowDataTempPtr;
    varGfxCompressedSunShadowDataTempPtr = &v9->compressedSunShadow;
    Load_GfxCompressedSunShadowDataTempPtr(NotAtStart);
    varGfxCompressedSunShadowDataTempPtr = v15;
    DB_PopStreamPos();
    DB_PatchMem_PopAsset();
    ++i;
  }
}

/*
==============
Load_GfxWorldTransientZonePtr
==============
*/
void Load_GfxWorldTransientZonePtr(const DBStreamStart streamStart)
{
  GfxWorldTransientZone **v1; 
  __int64 v2; 
  GfxWorldTransientZone *v3; 
  unsigned __int8 *inserted; 

  Load_Stream(streamStart, varGfxWorldTransientZonePtr, 8ui64);
  DB_PushStreamPos(1u);
  v1 = varGfxWorldTransientZonePtr;
  v2 = (__int64)*varGfxWorldTransientZonePtr;
  if ( *varGfxWorldTransientZonePtr )
  {
    if ( v2 == -1 )
    {
      DB_PushSharedData();
    }
    else if ( v2 != -2 && v2 != -3 )
    {
      DB_ConvertOffsetToAlias((unsigned __int64 *)varGfxWorldTransientZonePtr);
      goto LABEL_6;
    }
    v3 = varGfxWorldTransientZone;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    inserted = NULL;
    *v1 = (GfxWorldTransientZone *)g_streamPosGlob.pos;
    varGfxWorldTransientZone = (GfxWorldTransientZone *)g_streamPosGlob.pos;
    if ( v2 == -3 )
      inserted = DB_InsertPointer();
    Load_GfxWorldTransientZone(AtStart);
    Load_GfxWorldTransientZoneAsset(v1);
    varGfxWorldTransientZone = v3;
    if ( inserted )
      *(_QWORD *)inserted = *v1;
    if ( v2 == -1 )
      DB_PopSharedData();
  }
LABEL_6:
  DB_PopStreamPos();
}

/*
==============
Load_GfxWorldTransientZonePtrArray
==============
*/
void Load_GfxWorldTransientZonePtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxWorldTransientZone **i; 
  GfxWorldTransientZone **v4; 
  __int64 v5; 
  GfxWorldTransientZone *v6; 
  unsigned __int8 *inserted; 

  v2 = count;
  Load_Stream(streamStart, varGfxWorldTransientZonePtr, 8 * count);
  for ( i = varGfxWorldTransientZonePtr; v2; --v2 )
  {
    varGfxWorldTransientZonePtr = i;
    Load_Stream(NotAtStart, i, 8ui64);
    DB_PushStreamPos(1u);
    v4 = varGfxWorldTransientZonePtr;
    v5 = (__int64)*varGfxWorldTransientZonePtr;
    if ( *varGfxWorldTransientZonePtr )
    {
      if ( v5 == -1 )
      {
        DB_PushSharedData();
LABEL_8:
        v6 = varGfxWorldTransientZone;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        inserted = NULL;
        *v4 = (GfxWorldTransientZone *)g_streamPosGlob.pos;
        varGfxWorldTransientZone = (GfxWorldTransientZone *)g_streamPosGlob.pos;
        if ( v5 == -3 )
          inserted = DB_InsertPointer();
        Load_GfxWorldTransientZone(AtStart);
        Load_GfxWorldTransientZoneAsset(v4);
        varGfxWorldTransientZone = v6;
        if ( inserted )
          *(_QWORD *)inserted = *v4;
        if ( v5 == -1 )
          DB_PopSharedData();
        goto LABEL_14;
      }
      if ( v5 == -2 || v5 == -3 )
        goto LABEL_8;
      DB_ConvertOffsetToAlias((unsigned __int64 *)varGfxWorldTransientZonePtr);
    }
LABEL_14:
    DB_PopStreamPos();
    ++i;
  }
}

/*
==============
Load_GfxWorldTransientZonePtrStream
==============
*/
void Load_GfxWorldTransientZonePtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxWorldTransientZone **v4; 
  __int64 v5; 
  GfxWorldTransientZone *v6; 
  unsigned __int8 *inserted; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 21503, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxWorldTransientZonePtr;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      DB_PushStreamPos(1u);
      v4 = varGfxWorldTransientZonePtr;
      v5 = (__int64)*varGfxWorldTransientZonePtr;
      if ( *varGfxWorldTransientZonePtr )
      {
        if ( v5 == -1 )
        {
          DB_PushSharedData();
LABEL_12:
          v6 = varGfxWorldTransientZone;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          inserted = NULL;
          *v4 = (GfxWorldTransientZone *)g_streamPosGlob.pos;
          varGfxWorldTransientZone = (GfxWorldTransientZone *)g_streamPosGlob.pos;
          if ( v5 == -3 )
            inserted = DB_InsertPointer();
          Load_GfxWorldTransientZone(AtStart);
          Load_GfxWorldTransientZoneAsset(v4);
          varGfxWorldTransientZone = v6;
          if ( inserted )
            *(_QWORD *)inserted = *v4;
          if ( v5 == -1 )
            DB_PopSharedData();
          goto LABEL_18;
        }
        if ( v5 == -2 || v5 == -3 )
          goto LABEL_12;
        DB_ConvertOffsetToAlias((unsigned __int64 *)varGfxWorldTransientZonePtr);
      }
LABEL_18:
      DB_PopStreamPos();
      pos = g_streamPosGlob.pos;
      varGfxWorldTransientZonePtr = (GfxWorldTransientZone **)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_GfxWorldTransientZoneStream
==============
*/
void Load_GfxWorldTransientZoneStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  const char **v4; 
  GfxWorldDrawVerts *v5; 
  GfxWorldDrawCells *v6; 
  GfxLightmapAtlasDataTemp **v7; 
  GfxGpuLightGridTransientData *v8; 
  GfxWorldTransientZone *v9; 
  GfxReflectionProbeTransientData *v10; 
  GfxReflectionProbeTransientData *GfxReflectionProbeTransientData; 
  unsigned __int16 *v12; 
  unsigned __int16 *ushort; 
  GfxDecalVolumeTransientData *v14; 
  GfxCompressedSunShadowDataTemp **v15; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 21375, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxWorldTransientZone;
    do
    {
      DB_PatchMem_PushAsset(28, pos);
      Load_Stream(AtStart, varGfxWorldTransientZone, 0x100ui64);
      DB_PushStreamPos(8u);
      v4 = varXString;
      varXString = &varGfxWorldTransientZone->name;
      Load_XString(NotAtStart);
      varXString = v4;
      v5 = varGfxWorldDrawVerts;
      varGfxWorldDrawVerts = &varGfxWorldTransientZone->drawVerts;
      Load_GfxWorldDrawVerts(NotAtStart);
      varGfxWorldDrawVerts = v5;
      v6 = varGfxWorldDrawCells;
      varGfxWorldDrawCells = &varGfxWorldTransientZone->drawCells;
      Load_GfxWorldDrawCells(NotAtStart);
      varGfxWorldDrawCells = v6;
      v7 = varGfxLightmapAtlasDataTempPtr;
      varGfxLightmapAtlasDataTempPtr = &varGfxWorldTransientZone->tempLightmapData;
      Load_GfxLightmapAtlasDataTempPtr(NotAtStart);
      varGfxLightmapAtlasDataTempPtr = v7;
      v8 = varGfxGpuLightGridTransientData;
      varGfxGpuLightGridTransientData = &varGfxWorldTransientZone->gpuLightGrid;
      Load_GfxGpuLightGridTransientData(NotAtStart);
      varGfxGpuLightGridTransientData = v8;
      v9 = varGfxWorldTransientZone;
      if ( varGfxWorldTransientZone->reflectionProbes )
      {
        v10 = varGfxReflectionProbeTransientData;
        GfxReflectionProbeTransientData = AllocLoad_GfxReflectionProbeTransientData();
        v9->reflectionProbes = GfxReflectionProbeTransientData;
        varGfxReflectionProbeTransientData = GfxReflectionProbeTransientData;
        Load_GfxReflectionProbeTransientData(AtStart);
        v9 = varGfxWorldTransientZone;
        varGfxReflectionProbeTransientData = v10;
      }
      if ( v9->collections )
      {
        v12 = varushort;
        ushort = AllocLoad_ushort();
        v9->collections = ushort;
        varushort = ushort;
        Load_ushortArray(AtStart, varGfxWorldTransientZone->collectionCount);
        v9 = varGfxWorldTransientZone;
        varushort = v12;
      }
      if ( v9->decalVolumes )
      {
        v14 = varGfxDecalVolumeTransientData;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v9->decalVolumes = (GfxDecalVolumeTransientData *)g_streamPosGlob.pos;
        varGfxDecalVolumeTransientData = (GfxDecalVolumeTransientData *)g_streamPosGlob.pos;
        Load_GfxDecalVolumeTransientData(AtStart);
        v9 = varGfxWorldTransientZone;
        varGfxDecalVolumeTransientData = v14;
      }
      v15 = varGfxCompressedSunShadowDataTempPtr;
      varGfxCompressedSunShadowDataTempPtr = &v9->compressedSunShadow;
      Load_GfxCompressedSunShadowDataTempPtr(NotAtStart);
      varGfxCompressedSunShadowDataTempPtr = v15;
      DB_PopStreamPos();
      DB_PatchMem_PopAsset();
      pos = g_streamPosGlob.pos;
      varGfxWorldTransientZone = (GfxWorldTransientZone *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_LightGridVolumePackingParams
==============
*/
void Load_LightGridVolumePackingParams(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varLightGridVolumePackingParams, 0x20ui64);
}

/*
==============
Load_LightGridVolumePackingParamsArray
==============
*/
void Load_LightGridVolumePackingParamsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varLightGridVolumePackingParams, 32 * count);
}

/*
==============
Load_LightGridVolumePackingParamsStream
==============
*/
void Load_LightGridVolumePackingParamsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 13873, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varLightGridVolumePackingParams;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      pos = g_streamPosGlob.pos;
      varLightGridVolumePackingParams = (LightGridVolumePackingParams *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_LightGridVolumeTransformParams
==============
*/
void Load_LightGridVolumeTransformParams(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varLightGridVolumeTransformParams, 0x40ui64);
}

/*
==============
Load_LightGridVolumeTransformParamsArray
==============
*/
void Load_LightGridVolumeTransformParamsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varLightGridVolumeTransformParams, count << 6);
}

/*
==============
Load_LightGridVolumeTransformParamsStream
==============
*/
void Load_LightGridVolumeTransformParamsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 13702, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varLightGridVolumeTransformParams;
    do
    {
      Load_Stream(AtStart, pos, 0x40ui64);
      pos = g_streamPosGlob.pos;
      varLightGridVolumeTransformParams = (LightGridVolumeTransformParams *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ProcessStructLayout_BspVersion
==============
*/
void Load_ProcessStructLayout_BspVersion(void)
{
  Load_RegisterStructSize("BspVersion", 0x4E1CB4A5u, 4ui64, 4ui64);
}

/*
==============
Load_ProcessStructLayout_DpvsPlane
==============
*/
void Load_ProcessStructLayout_DpvsPlane(void)
{
  if ( Load_RegisterStructSize("DpvsPlane", 0xD2CFC40D, 0x10ui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("DpvsPlane", 0xD2CFC40D, "vec4_t", 0x77673763u, "coeffs", 0x47F2A83Eu, 0i64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec4_t();
  }
}

/*
==============
Load_ProcessStructLayout_GfxAabbTree
==============
*/
void Load_ProcessStructLayout_GfxAabbTree(void)
{
  if ( Load_RegisterStructSize("GfxAabbTree", 0x5B3B8A67u, 0x30ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("GfxAabbTree", 0x5B3B8A67u, "Bounds", 0x1605EBBBu, "bounds", 0x704A7A5Bu, 0i64, 0x18ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_Bounds();
    Load_RegisterStructMemberSize("GfxAabbTree", 0x5B3B8A67u, "BSPSURF_COUNT_TYPE", 0x5FDA68CEu, "surfaceCount", 0xF4EEB1BE, 0x18ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_BSPSURF_COUNT_TYPE();
    Load_RegisterStructMemberSize("GfxAabbTree", 0x5B3B8A67u, "BSPSURF_COUNT_TYPE", 0x5FDA68CEu, "startSurfIndex", 0x7C1D4D2Cu, 0x1Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_BSPSURF_COUNT_TYPE();
    Load_RegisterStructMemberSize("GfxAabbTree", 0x5B3B8A67u, "int", 0x7103F94Bu, "childrenOffset", 0xE827A10C, 0x20ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("GfxAabbTree", 0x5B3B8A67u, "ushort", 0xB7BE387D, "childCount", 0xB53BB467, 0x24ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("GfxAabbTree", 0x5B3B8A67u, "ushort", 0xB7BE387D, "smodelIndexCount", 0xF6D29473, 0x26ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("GfxAabbTree", 0x5B3B8A67u, "StaticModelIndex", 0xE7F57E53, "smodelIndexes", 0xF2BD096u, 0x28ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("StaticModelIndex", 0xE7F57E53, 2ui64, 2ui64) )
    {
      Load_RegisterStructMemberSize("StaticModelIndex", 0xE7F57E53, "ushort", 0xB7BE387D, (const char *)&queryFormat.fmt + 3, 0, 0i64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ushort();
    }
  }
}

/*
==============
Load_ProcessStructLayout_GfxCell
==============
*/
void Load_ProcessStructLayout_GfxCell(void)
{
  if ( Load_RegisterStructSize("GfxCell", 0xB4C720D5, 0x28ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("GfxCell", 0xB4C720D5, "Bounds", 0x1605EBBBu, "bounds", 0x704A7A5Bu, 0i64, 0x18ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_Bounds();
    Load_RegisterStructMemberSize("GfxCell", 0xB4C720D5, "ushort", 0xB7BE387D, "portalCount", 0x50817197u, 0x18ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("GfxCell", 0xB4C720D5, "GfxPortal", 0xD3DDD05B, "portals", 0x1387A255u, 0x20ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_GfxPortal();
  }
}

/*
==============
Load_ProcessStructLayout_GfxCellTransientInfo
==============
*/
void Load_ProcessStructLayout_GfxCellTransientInfo(void)
{
  if ( Load_RegisterStructSize("GfxCellTransientInfo", 0xDFB73B5u, 4ui64, 2ui64) )
  {
    Load_RegisterStructMemberSize("GfxCellTransientInfo", 0xDFB73B5u, "ushort", 0xB7BE387D, "aabbTreeIndex", 0xB1297A7E, 0i64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("GfxCellTransientInfo", 0xDFB73B5u, "ushort", 0xB7BE387D, "transientZone", 0x48200190u, 2ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
  }
}

/*
==============
Load_ProcessStructLayout_GfxCellTree
==============
*/
void Load_ProcessStructLayout_GfxCellTree(void)
{
  if ( Load_RegisterStructSize("GfxCellTree", 0xC0284CE1, 8ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("GfxCellTree", 0xC0284CE1, "GfxAabbTree", 0x5B3B8A67u, "aabbTree", 0x52B08F92u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_GfxAabbTree();
  }
}

/*
==============
Load_ProcessStructLayout_GfxCellTreeCount
==============
*/
void Load_ProcessStructLayout_GfxCellTreeCount(void)
{
  if ( Load_RegisterStructSize("GfxCellTreeCount", 0xE6703966, 4ui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("GfxCellTreeCount", 0xE6703966, "int", 0x7103F94Bu, "aabbTreeCount", 0xC4D2A087, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
  }
}

/*
==============
Load_ProcessStructLayout_GfxCompressedSunShadowDataTemp
==============
*/
void Load_ProcessStructLayout_GfxCompressedSunShadowDataTemp(void)
{
  if ( Load_RegisterStructSize("GfxCompressedSunShadowDataTemp", 0x5A59D00Eu, 0x48ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("GfxCompressedSunShadowDataTemp", 0x5A59D00Eu, "ushort", 0xB7BE387D, "zoneIndex", 0xB5FA9FEE, 0i64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("GfxCompressedSunShadowDataTemp", 0x5A59D00Eu, "ushort", 0xB7BE387D, "tilesCount", 0x88F311FC, 2ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("GfxCompressedSunShadowDataTemp", 0x5A59D00Eu, "uint", 0x53A932A0u, "tilesIndices", 0xC58F9B46, 8ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxCompressedSunShadowDataTemp", 0x5A59D00Eu, "uint", 0x53A932A0u, "tilesOffsets", 0xFA481EF9, 0x10ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxCompressedSunShadowDataTemp", 0x5A59D00Eu, "uint", 0x53A932A0u, "tilesDataSize", 0xE446A334, 0x18ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxCompressedSunShadowDataTemp", 0x5A59D00Eu, "byte", 0x363F8F7Eu, "tilesData", 0x30767E27u, 0x20ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_byte();
    Load_RegisterStructMemberSize("GfxCompressedSunShadowDataTemp", 0x5A59D00Eu, "GfxWrappedBuffer", 0xF87B73BE, "tilesDataBuffer", 0x410C76F9u, 0x28ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxWrappedBuffer();
  }
}

/*
==============
Load_ProcessStructLayout_GfxCompressedSunShadowDataTempPtr
==============
*/
void Load_ProcessStructLayout_GfxCompressedSunShadowDataTempPtr(void)
{
  if ( Load_RegisterStructSize("GfxCompressedSunShadowDataTempPtr", 0xA224445C, 8ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("GfxCompressedSunShadowDataTempPtr", 0xA224445C, "GfxCompressedSunShadowDataTemp", 0x5A59D00Eu, (const char *)&queryFormat.fmt + 3, 0, 0i64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("GfxCompressedSunShadowDataTemp", 0x5A59D00Eu, 0x48ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("GfxCompressedSunShadowDataTemp", 0x5A59D00Eu, "ushort", 0xB7BE387D, "zoneIndex", 0xB5FA9FEE, 0i64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ushort();
      Load_RegisterStructMemberSize("GfxCompressedSunShadowDataTemp", 0x5A59D00Eu, "ushort", 0xB7BE387D, "tilesCount", 0x88F311FC, 2ui64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ushort();
      Load_RegisterStructMemberSize("GfxCompressedSunShadowDataTemp", 0x5A59D00Eu, "uint", 0x53A932A0u, "tilesIndices", 0xC58F9B46, 8ui64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("GfxCompressedSunShadowDataTemp", 0x5A59D00Eu, "uint", 0x53A932A0u, "tilesOffsets", 0xFA481EF9, 0x10ui64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("GfxCompressedSunShadowDataTemp", 0x5A59D00Eu, "uint", 0x53A932A0u, "tilesDataSize", 0xE446A334, 0x18ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("GfxCompressedSunShadowDataTemp", 0x5A59D00Eu, "byte", 0x363F8F7Eu, "tilesData", 0x30767E27u, 0x20ui64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_byte();
      Load_RegisterStructMemberSize("GfxCompressedSunShadowDataTemp", 0x5A59D00Eu, "GfxWrappedBuffer", 0xF87B73BE, "tilesDataBuffer", 0x410C76F9u, 0x28ui64, 0x20ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_GfxWrappedBuffer();
    }
  }
}

/*
==============
Load_ProcessStructLayout_GfxCompressedSunShadowParams
==============
*/
void Load_ProcessStructLayout_GfxCompressedSunShadowParams(void)
{
  if ( Load_RegisterStructSize("GfxCompressedSunShadowParams", 0xD9B9BCA6, 0x30ui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("GfxCompressedSunShadowParams", 0xD9B9BCA6, "vec3_t", 0x375A0610u, "sunDirection", 0x3CF1A181u, 0i64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("GfxCompressedSunShadowParams", 0xD9B9BCA6, "uint", 0x53A932A0u, "resolution", 0x92056436, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxCompressedSunShadowParams", 0xD9B9BCA6, "float", 0x9B987AFE, "centerX", 0xE01524C1, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("GfxCompressedSunShadowParams", 0xD9B9BCA6, "float", 0x9B987AFE, "centerY", 0xE01524C0, 0x14ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("GfxCompressedSunShadowParams", 0xD9B9BCA6, "float", 0x9B987AFE, "sampleSize", 0xAD5BB2C9, 0x18ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("GfxCompressedSunShadowParams", 0xD9B9BCA6, "float", 0x9B987AFE, "nearPlane", 0xCD35271C, 0x1Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("GfxCompressedSunShadowParams", 0xD9B9BCA6, "float", 0x9B987AFE, "farPlane", 0x98207FCB, 0x20ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("GfxCompressedSunShadowParams", 0xD9B9BCA6, "uint", 0x53A932A0u, "forestSize", 0x9C4F6C18, 0x24ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxCompressedSunShadowParams", 0xD9B9BCA6, "uint", 0x53A932A0u, "flags", 0x85A76201, 0x28ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxCompressedSunShadowParams", 0xD9B9BCA6, "uint", 0x53A932A0u, "reserved", 0x7C6A0C6Cu, 0x2Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
  }
}

/*
==============
Load_ProcessStructLayout_GfxDecalVolumeCollection
==============
*/
void Load_ProcessStructLayout_GfxDecalVolumeCollection(void)
{
  if ( Load_RegisterStructSize("GfxDecalVolumeCollection", 0x1DC0CB2u, 8ui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("GfxDecalVolumeCollection", 0x1DC0CB2u, "ushort", 0xB7BE387D, "transientZoneIndex", 0x4E561784u, 0i64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("GfxDecalVolumeCollection", 0x1DC0CB2u, "ushort", 0xB7BE387D, "decalCount", 0x9195080C, 2ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("GfxDecalVolumeCollection", 0x1DC0CB2u, "uint", 0x53A932A0u, "firstZoneDecal", 0x68B211F7u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
  }
}

/*
==============
Load_ProcessStructLayout_GfxDecalVolumeTransientData
==============
*/
void Load_ProcessStructLayout_GfxDecalVolumeTransientData(void)
{
  if ( Load_RegisterStructSize("GfxDecalVolumeTransientData", 0x3D39AA40u, 0x40ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("GfxDecalVolumeTransientData", 0x3D39AA40u, "uint", 0x53A932A0u, "decalVolumeCount", 0x99F0BC62, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxDecalVolumeTransientData", 0x3D39AA40u, "ushort", 0xB7BE387D, "firstCollection", 0x24B20AC2u, 4ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("GfxDecalVolumeTransientData", 0x3D39AA40u, "ushort", 0xB7BE387D, "collectionCount", 0x4E35E511u, 6ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("GfxDecalVolumeTransientData", 0x3D39AA40u, "GfxStaticDecalVolumePacked", 0x2413DCE4u, "decalVolumes", 0x2D2955ACu, 8ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("GfxStaticDecalVolumePacked", 0x2413DCE4u, 0x2Cui64, 4ui64) )
    {
      Load_RegisterStructMemberSize("GfxStaticDecalVolumePacked", 0x2413DCE4u, "vec3_t", 0x375A0610u, "obbCenter", 0x7F0D3CA4u, 0i64, 0xCui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec3_t();
      Load_RegisterStructMemberSize("GfxStaticDecalVolumePacked", 0x2413DCE4u, "uint", 0x53A932A0u, "obbQuat", 0xD6D6A252, 0xCui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("GfxStaticDecalVolumePacked", 0x2413DCE4u, "uint", 0x53A932A0u, "obbHalfSize", 0x839FABF7, 0x10ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("GfxStaticDecalVolumePacked", 0x2413DCE4u, "uint", 0x53A932A0u, "opacityParams", 0x67E85531u, 0x14ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("GfxStaticDecalVolumePacked", 0x2413DCE4u, "uint", 0x53A932A0u, "uvMatrixAndOffset", 0x5B93B244u, 0x18ui64, 0xCui64, 3ui64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("GfxStaticDecalVolumePacked", 0x2413DCE4u, "uint", 0x53A932A0u, "packedMaterialInfo", 0x100807B3u, 0x24ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("GfxStaticDecalVolumePacked", 0x2413DCE4u, "uint", 0x53A932A0u, "reserved", 0x7C6A0C6Cu, 0x28ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
    }
    Load_RegisterStructMemberSize("GfxDecalVolumeTransientData", 0x3D39AA40u, "GfxWrappedBuffer", 0xF87B73BE, "decalVolumesBuffer", 0x496D1C2Au, 0x10ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxWrappedBuffer();
    Load_RegisterStructMemberSize("GfxDecalVolumeTransientData", 0x3D39AA40u, "Bounds", 0x1605EBBBu, "collectionBounds", 0x4FB6F37Fu, 0x30ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_Bounds();
    Load_RegisterStructMemberSize("GfxDecalVolumeTransientData", 0x3D39AA40u, "GfxStaticDecalVolumeUid", 0xC1DDEDBA, "decalVolumeUids", 0xBA24E430, 0x38ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("GfxStaticDecalVolumeUid", 0xC1DDEDBA, 4ui64, 4ui64) )
    {
      Load_RegisterStructMemberSize("GfxStaticDecalVolumeUid", 0xC1DDEDBA, "uint", 0x53A932A0u, "uid", 0x76221656u, 0i64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
    }
  }
}

/*
==============
Load_ProcessStructLayout_GfxDisplacementParms
==============
*/
void Load_ProcessStructLayout_GfxDisplacementParms(void)
{
  Load_RegisterStructSize("GfxDisplacementParms", 0xE87B49F9, 0x10ui64, 0x40ui64);
}

/*
==============
Load_ProcessStructLayout_GfxDrawSurf
==============
*/
void Load_ProcessStructLayout_GfxDrawSurf(void)
{
  Load_RegisterStructSize("GfxDrawSurf", 0xD00B5B37, 0x10ui64, 8ui64);
}

/*
==============
Load_ProcessStructLayout_GfxDynamicLightset
==============
*/
void Load_ProcessStructLayout_GfxDynamicLightset(void)
{
  if ( Load_RegisterStructSize("GfxDynamicLightset", 0x18C4F8CCu, 0x260ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("GfxDynamicLightset", 0x18C4F8CCu, "uint", 0x53A932A0u, "numBasisFunctions", 0x208729A9u, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxDynamicLightset", 0x18C4F8CCu, "GfxDynamicLightsetBFData", 0x490E7FECu, "basisFunctions", 0xE7D96C29, 8ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("GfxDynamicLightsetBFData", 0x490E7FECu, 0x20ui64, 4ui64) )
    {
      Load_RegisterStructMemberSize("GfxDynamicLightsetBFData", 0x490E7FECu, "float", 0x9B987AFE, "curValue", 0xF8C57D49, 0i64, 0xCui64, 3ui64, 0, 0);
      Load_ProcessStructLayout_float();
      Load_RegisterStructMemberSize("GfxDynamicLightsetBFData", 0x490E7FECu, "float", 0x9B987AFE, "lastValue", 0xA28CEEDB, 0xCui64, 0xCui64, 3ui64, 0, 0);
      Load_ProcessStructLayout_float();
      Load_RegisterStructMemberSize("GfxDynamicLightsetBFData", 0x490E7FECu, "GfxDynamicLightsetBFType", 0x67A4687Cu, "bfType", 0x3B4917B8u, 0x18ui64, 2ui64, 0i64, 0, 0);
      if ( Load_RegisterStructSize("GfxDynamicLightsetBFType", 0x67A4687Cu, 2ui64, 2ui64) )
      {
        Load_RegisterStructMemberSize("GfxDynamicLightsetBFType", 0x67A4687Cu, "ushort", 0xB7BE387D, (const char *)&queryFormat.fmt + 3, 0, 0i64, 2ui64, 0i64, 0, 0);
        Load_ProcessStructLayout_ushort();
      }
      Load_RegisterStructMemberSize("GfxDynamicLightsetBFData", 0x490E7FECu, "ushort", 0xB7BE387D, "numRec", 0x23A09F0Au, 0x1Aui64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ushort();
      Load_RegisterStructMemberSize("GfxDynamicLightsetBFData", 0x490E7FECu, "uint", 0x53A932A0u, "startRec", 0x78D97AFEu, 0x1Cui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
    }
    Load_RegisterStructMemberSize("GfxDynamicLightset", 0x18C4F8CCu, "uint", 0x53A932A0u, "numBasisFunctionPrimaryLights", 0x2DC60A63u, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxDynamicLightset", 0x18C4F8CCu, "GfxDynamicLightsetLightInfo", 0xEA12C47C, "basisFunctionLights", 0xD1D142AD, 0x18ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("GfxDynamicLightsetLightInfo", 0xEA12C47C, 0x1Cui64, 4ui64) )
    {
      Load_RegisterStructMemberSize("GfxDynamicLightsetLightInfo", 0xEA12C47C, "float", 0x9B987AFE, "baseIntensity", 0x490A66Eu, 0i64, 0xCui64, 3ui64, 0, 0);
      Load_ProcessStructLayout_float();
      Load_RegisterStructMemberSize("GfxDynamicLightsetLightInfo", 0xEA12C47C, "float", 0x9B987AFE, "lastIntensity", 0x99DBE88B, 0xCui64, 0xCui64, 3ui64, 0, 0);
      Load_ProcessStructLayout_float();
      Load_RegisterStructMemberSize("GfxDynamicLightsetLightInfo", 0xEA12C47C, "uint", 0x53A932A0u, "whichPrimary", 0x498F714Fu, 0x18ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
    }
    Load_RegisterStructMemberSize("GfxDynamicLightset", 0x18C4F8CCu, "uint", 0x53A932A0u, "numPortalGI", 0xC9CEA87A, 0x20ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxDynamicLightset", 0x18C4F8CCu, "GfxDynamicLightsetPortalGIData", 0xCEE68C96, "portalGIData", 0xBD0C8DDA, 0x28ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("GfxDynamicLightsetPortalGIData", 0xCEE68C96, 0x24ui64, 4ui64) )
    {
      Load_RegisterStructMemberSize("GfxDynamicLightsetPortalGIData", 0xCEE68C96, "uint", 0x53A932A0u, "whichEntity", 0x441C10DAu, 0i64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("GfxDynamicLightsetPortalGIData", 0xCEE68C96, "vec4_t", 0x77673763u, "baseQuat", 0x44C56B0Au, 4ui64, 0x10ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec4_t();
      Load_RegisterStructMemberSize("GfxDynamicLightsetPortalGIData", 0xCEE68C96, "vec4_t", 0x77673763u, "extraInfo", 0x65C35392u, 0x14ui64, 0x10ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec4_t();
    }
    Load_RegisterStructMemberSize("GfxDynamicLightset", 0x18C4F8CCu, "uint", 0x53A932A0u, "numProductGI", 0x141DAD1u, 0x30ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxDynamicLightset", 0x18C4F8CCu, "GfxDynamicLightsetProductGIData", 0xA545A995, "productGIData", 0xBF935869, 0x38ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("GfxDynamicLightsetProductGIData", 0xA545A995, 4ui64, 2ui64) )
    {
      Load_RegisterStructMemberSize("GfxDynamicLightsetProductGIData", 0xA545A995, "ushort", 0xB7BE387D, "whichDLS", 0x1D37CA82u, 0i64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ushort();
      Load_RegisterStructMemberSize("GfxDynamicLightsetProductGIData", 0xA545A995, "ushort", 0xB7BE387D, "whichPortal", 0x1782181Du, 2ui64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ushort();
    }
    Load_RegisterStructMemberSize("GfxDynamicLightset", 0x18C4F8CCu, "GfxDynamicLightsetLMData", 0xD97AACED, "lmData", 0xD8E0A221, 0x40ui64, 0x118ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxDynamicLightsetLMData();
    Load_RegisterStructMemberSize("GfxDynamicLightset", 0x18C4F8CCu, "GfxDynamicLightsetProbeData", 0x7BF65202u, "lgProbeData", 0x612FB3BFu, 0x158ui64, 0x100ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxDynamicLightsetProbeData();
    Load_RegisterStructMemberSize("GfxDynamicLightset", 0x18C4F8CCu, "uint", 0x53A932A0u, "numDLSBasisFunctions", 0xE84516CE, 0x258ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
  }
}

/*
==============
Load_ProcessStructLayout_GfxDynamicLightsetBFData
==============
*/
void Load_ProcessStructLayout_GfxDynamicLightsetBFData(void)
{
  if ( Load_RegisterStructSize("GfxDynamicLightsetBFData", 0x490E7FECu, 0x20ui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("GfxDynamicLightsetBFData", 0x490E7FECu, "float", 0x9B987AFE, "curValue", 0xF8C57D49, 0i64, 0xCui64, 3ui64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("GfxDynamicLightsetBFData", 0x490E7FECu, "float", 0x9B987AFE, "lastValue", 0xA28CEEDB, 0xCui64, 0xCui64, 3ui64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("GfxDynamicLightsetBFData", 0x490E7FECu, "GfxDynamicLightsetBFType", 0x67A4687Cu, "bfType", 0x3B4917B8u, 0x18ui64, 2ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("GfxDynamicLightsetBFType", 0x67A4687Cu, 2ui64, 2ui64) )
    {
      Load_RegisterStructMemberSize("GfxDynamicLightsetBFType", 0x67A4687Cu, "ushort", 0xB7BE387D, (const char *)&queryFormat.fmt + 3, 0, 0i64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ushort();
    }
    Load_RegisterStructMemberSize("GfxDynamicLightsetBFData", 0x490E7FECu, "ushort", 0xB7BE387D, "numRec", 0x23A09F0Au, 0x1Aui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("GfxDynamicLightsetBFData", 0x490E7FECu, "uint", 0x53A932A0u, "startRec", 0x78D97AFEu, 0x1Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
  }
}

/*
==============
Load_ProcessStructLayout_GfxDynamicLightsetBFType
==============
*/
void Load_ProcessStructLayout_GfxDynamicLightsetBFType(void)
{
  if ( Load_RegisterStructSize("GfxDynamicLightsetBFType", 0x67A4687Cu, 2ui64, 2ui64) )
  {
    Load_RegisterStructMemberSize("GfxDynamicLightsetBFType", 0x67A4687Cu, "ushort", 0xB7BE387D, (const char *)&queryFormat.fmt + 3, 0, 0i64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
  }
}

/*
==============
Load_ProcessStructLayout_GfxDynamicLightsetGChunk
==============
*/
void Load_ProcessStructLayout_GfxDynamicLightsetGChunk(void)
{
  if ( Load_RegisterStructSize("GfxDynamicLightsetGChunk", 0x2CE4961Au, 0x18ui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("GfxDynamicLightsetGChunk", 0x2CE4961Au, "GfxDynamicLightsetGChunkInfo", 0x3FBB727Au, "chunkInfo", 0xFB5634BF, 0i64, 0x10ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("GfxDynamicLightsetGChunkInfo", 0x3FBB727Au, 0x10ui64, 4ui64) )
    {
      Load_RegisterStructMemberSize("GfxDynamicLightsetGChunkInfo", 0x3FBB727Au, "uint", 0x53A932A0u, "numRecords", 0xFEB55CF6, 0i64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("GfxDynamicLightsetGChunkInfo", 0x3FBB727Au, "uint", 0x53A932A0u, "bfStart", 0x7A68B0D4u, 4ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("GfxDynamicLightsetGChunkInfo", 0x3FBB727Au, "uint", 0x53A932A0u, "orgStart", 0xA9AB39EA, 8ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("GfxDynamicLightsetGChunkInfo", 0x3FBB727Au, "uint", 0x53A932A0u, "tmpStart", 0xC07FF4E9, 0xCui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
    }
    Load_RegisterStructMemberSize("GfxDynamicLightsetGChunk", 0x2CE4961Au, "GfxDynamicLightsetGChunkFlags", 0x1E92FE33u, "flags", 0x85A76201, 0x10ui64, 2ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("GfxDynamicLightsetGChunkFlags", 0x1E92FE33u, 2ui64, 2ui64) )
    {
      Load_RegisterStructMemberSize("GfxDynamicLightsetGChunkFlags", 0x1E92FE33u, "ushort", 0xB7BE387D, (const char *)&queryFormat.fmt + 3, 0, 0i64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ushort();
    }
    Load_RegisterStructMemberSize("GfxDynamicLightsetGChunk", 0x2CE4961Au, "ushort", 0xB7BE387D, "whichLM", 0x57034462u, 0x12ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("GfxDynamicLightsetGChunk", 0x2CE4961Au, "uint", 0x53A932A0u, "bfChunkStart", 0xB7D4339D, 0x14ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
  }
}

/*
==============
Load_ProcessStructLayout_GfxDynamicLightsetGChunkFlags
==============
*/
void Load_ProcessStructLayout_GfxDynamicLightsetGChunkFlags(void)
{
  if ( Load_RegisterStructSize("GfxDynamicLightsetGChunkFlags", 0x1E92FE33u, 2ui64, 2ui64) )
  {
    Load_RegisterStructMemberSize("GfxDynamicLightsetGChunkFlags", 0x1E92FE33u, "ushort", 0xB7BE387D, (const char *)&queryFormat.fmt + 3, 0, 0i64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
  }
}

/*
==============
Load_ProcessStructLayout_GfxDynamicLightsetGChunkInfo
==============
*/
void Load_ProcessStructLayout_GfxDynamicLightsetGChunkInfo(void)
{
  if ( Load_RegisterStructSize("GfxDynamicLightsetGChunkInfo", 0x3FBB727Au, 0x10ui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("GfxDynamicLightsetGChunkInfo", 0x3FBB727Au, "uint", 0x53A932A0u, "numRecords", 0xFEB55CF6, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxDynamicLightsetGChunkInfo", 0x3FBB727Au, "uint", 0x53A932A0u, "bfStart", 0x7A68B0D4u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxDynamicLightsetGChunkInfo", 0x3FBB727Au, "uint", 0x53A932A0u, "orgStart", 0xA9AB39EA, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxDynamicLightsetGChunkInfo", 0x3FBB727Au, "uint", 0x53A932A0u, "tmpStart", 0xC07FF4E9, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
  }
}

/*
==============
Load_ProcessStructLayout_GfxDynamicLightsetLGppZoneInfo
==============
*/
void Load_ProcessStructLayout_GfxDynamicLightsetLGppZoneInfo(void)
{
  if ( Load_RegisterStructSize("GfxDynamicLightsetLGppZoneInfo", 0x416A6E21u, 0x130ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("GfxDynamicLightsetLGppZoneInfo", 0x416A6E21u, "uint", 0x53A932A0u, "numOrigSMLGppProbes", 0x4057EA09u, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxDynamicLightsetLGppZoneInfo", 0x416A6E21u, "GfxGpuDynLightsetsLGVReference", 0xE042CE87, "lgvReferences", 0x42B42A81u, 8ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("GfxGpuDynLightsetsLGVReference", 0xE042CE87, 8ui64, 4ui64) )
    {
      Load_RegisterStructMemberSize("GfxGpuDynLightsetsLGVReference", 0xE042CE87, "uint", 0x53A932A0u, "volumeIndex", 0xFF4A56A2, 0i64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("GfxGpuDynLightsetsLGVReference", 0xE042CE87, "uint", 0x53A932A0u, "volumeProbeIndex", 0xF92DF708, 4ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
    }
    Load_RegisterStructMemberSize("GfxDynamicLightsetLGppZoneInfo", 0x416A6E21u, "GfxWrappedBuffer", 0xF87B73BE, "lgvReferencesBuffer", 0xA1B93E73, 0x10ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxWrappedBuffer();
    Load_RegisterStructMemberSize("GfxDynamicLightsetLGppZoneInfo", 0x416A6E21u, "GfxDynamicLightsetProbeData", 0x7BF65202u, "lgvProbeData", 0x39368683u, 0x30ui64, 0x100ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxDynamicLightsetProbeData();
  }
}

/*
==============
Load_ProcessStructLayout_GfxDynamicLightsetLMData
==============
*/
void Load_ProcessStructLayout_GfxDynamicLightsetLMData(void)
{
  if ( Load_RegisterStructSize("GfxDynamicLightsetLMData", 0xD97AACED, 0x118ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("GfxDynamicLightsetLMData", 0xD97AACED, "uint", 0x53A932A0u, "numGChunkLM", 0x70567307u, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxDynamicLightsetLMData", 0xD97AACED, "GfxDynamicLightsetGChunk", 0x2CE4961Au, "chunkGLM", 0x5408470Bu, 8ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_GfxDynamicLightsetGChunk();
    Load_RegisterStructMemberSize("GfxDynamicLightsetLMData", 0xD97AACED, "uint", 0x53A932A0u, "numGChunkLMBF", 0x7854EB83u, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxDynamicLightsetLMData", 0xD97AACED, "ushort", 0xB7BE387D, "chunkGLMBF", 0x5B55FFAFu, 0x18ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("GfxDynamicLightsetLMData", 0xD97AACED, "uint", 0x53A932A0u, "numLMHave", 0x7B015EDFu, 0x20ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxDynamicLightsetLMData", 0xD97AACED, "ushort", 0xB7BE387D, "chunkWhichLM", 0xC2760E8F, 0x28ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("GfxDynamicLightsetLMData", 0xD97AACED, "uint", 0x53A932A0u, "chunkLMStart", 0xFB11ECE6, 0x30ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxDynamicLightsetLMData", 0xD97AACED, "uint", 0x53A932A0u, "numOrigTexels", 0x9DE3E728, 0x38ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxDynamicLightsetLMData", 0xD97AACED, "uint", 0x53A932A0u, "origTexels", 0x69FF01A8u, 0x40ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxDynamicLightsetLMData", 0xD97AACED, "GfxWrappedBuffer", 0xF87B73BE, "origTexelsBuffer", 0xBB6B6106, 0x48ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxWrappedBuffer();
    Load_RegisterStructMemberSize("GfxDynamicLightsetLMData", 0xD97AACED, "uint", 0x53A932A0u, "origRecords", 0x6D184333u, 0x68ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxDynamicLightsetLMData", 0xD97AACED, "GfxWrappedBuffer", 0xF87B73BE, "origRecordsBuffer", 0xF4202CA5, 0x70ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxWrappedBuffer();
    Load_RegisterStructMemberSize("GfxDynamicLightsetLMData", 0xD97AACED, "uint", 0x53A932A0u, "numBFLMTexels", 0x5152531Au, 0x90ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxDynamicLightsetLMData", 0xD97AACED, "uint", 0x53A932A0u, "bfTexels", 0x56D939Bu, 0x98ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxDynamicLightsetLMData", 0xD97AACED, "GfxWrappedBuffer", 0xF87B73BE, "bfTexelsBuffer", 0x58AF664Du, 0xA0ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxWrappedBuffer();
    Load_RegisterStructMemberSize("GfxDynamicLightsetLMData", 0xD97AACED, "uint", 0x53A932A0u, "numSkipRecords", 0xF9D1B1AD, 0xC0ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxDynamicLightsetLMData", 0xD97AACED, "ushort", 0xB7BE387D, "skipRecords", 0xC87C692D, 0xC8ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("GfxDynamicLightsetLMData", 0xD97AACED, "GfxWrappedBuffer", 0xF87B73BE, "skipRecordsBuffer", 0xF444383F, 0xD0ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxWrappedBuffer();
    Load_RegisterStructMemberSize("GfxDynamicLightsetLMData", 0xD97AACED, "uint", 0x53A932A0u, "palletteRecords", 0x2B5550AFu, 0xF0ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxDynamicLightsetLMData", 0xD97AACED, "GfxWrappedBuffer", 0xF87B73BE, "palletteRecordsBuffer", 0x191A6921u, 0xF8ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxWrappedBuffer();
  }
}

/*
==============
Load_ProcessStructLayout_GfxDynamicLightsetLightInfo
==============
*/
void Load_ProcessStructLayout_GfxDynamicLightsetLightInfo(void)
{
  if ( Load_RegisterStructSize("GfxDynamicLightsetLightInfo", 0xEA12C47C, 0x1Cui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("GfxDynamicLightsetLightInfo", 0xEA12C47C, "float", 0x9B987AFE, "baseIntensity", 0x490A66Eu, 0i64, 0xCui64, 3ui64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("GfxDynamicLightsetLightInfo", 0xEA12C47C, "float", 0x9B987AFE, "lastIntensity", 0x99DBE88B, 0xCui64, 0xCui64, 3ui64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("GfxDynamicLightsetLightInfo", 0xEA12C47C, "uint", 0x53A932A0u, "whichPrimary", 0x498F714Fu, 0x18ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
  }
}

/*
==============
Load_ProcessStructLayout_GfxDynamicLightsetPortalGIData
==============
*/
void Load_ProcessStructLayout_GfxDynamicLightsetPortalGIData(void)
{
  if ( Load_RegisterStructSize("GfxDynamicLightsetPortalGIData", 0xCEE68C96, 0x24ui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("GfxDynamicLightsetPortalGIData", 0xCEE68C96, "uint", 0x53A932A0u, "whichEntity", 0x441C10DAu, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxDynamicLightsetPortalGIData", 0xCEE68C96, "vec4_t", 0x77673763u, "baseQuat", 0x44C56B0Au, 4ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec4_t();
    Load_RegisterStructMemberSize("GfxDynamicLightsetPortalGIData", 0xCEE68C96, "vec4_t", 0x77673763u, "extraInfo", 0x65C35392u, 0x14ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec4_t();
  }
}

/*
==============
Load_ProcessStructLayout_GfxDynamicLightsetProbeData
==============
*/
void Load_ProcessStructLayout_GfxDynamicLightsetProbeData(void)
{
  if ( Load_RegisterStructSize("GfxDynamicLightsetProbeData", 0x7BF65202u, 0x100ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("GfxDynamicLightsetProbeData", 0x7BF65202u, "uint", 0x53A932A0u, "numGChunk", 0xA3CAADB6, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxDynamicLightsetProbeData", 0x7BF65202u, "GfxDynamicLightsetGChunk", 0x2CE4961Au, "chunkG", 0x39E6F8DAu, 8ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_GfxDynamicLightsetGChunk();
    Load_RegisterStructMemberSize("GfxDynamicLightsetProbeData", 0x7BF65202u, "uint", 0x53A932A0u, "numGChunkBF", 0x62565D06u, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxDynamicLightsetProbeData", 0x7BF65202u, "ushort", 0xB7BE387D, "chunkGBF", 0x5E085742u, 0x18ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("GfxDynamicLightsetProbeData", 0x7BF65202u, "uint", 0x53A932A0u, "origStart", 0x37A9EBA1u, 0x20ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxDynamicLightsetProbeData", 0x7BF65202u, "uint", 0x53A932A0u, "numOrigProbes", 0x31B14926u, 0x24ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxDynamicLightsetProbeData", 0x7BF65202u, "GfxSHCompressedProbeData", 0x13FB689Bu, "origProbes", 0xFDCC63A6, 0x28ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_GfxSHCompressedProbeData();
    Load_RegisterStructMemberSize("GfxDynamicLightsetProbeData", 0x7BF65202u, "GfxWrappedBuffer", 0xF87B73BE, "origProbesBuffer", 0x2DC30294u, 0x30ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxWrappedBuffer();
    Load_RegisterStructMemberSize("GfxDynamicLightsetProbeData", 0x7BF65202u, "uint", 0x53A932A0u, "numBFProbes", 0x84510539, 0x50ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxDynamicLightsetProbeData", 0x7BF65202u, "GfxSHCompressedProbeData", 0x13FB689Bu, "bfProbes", 0xBA7FFD19, 0x58ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_GfxSHCompressedProbeData();
    Load_RegisterStructMemberSize("GfxDynamicLightsetProbeData", 0x7BF65202u, "GfxWrappedBuffer", 0xF87B73BE, "bfProbesBuffer", 0xB16D318B, 0x60ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxWrappedBuffer();
    Load_RegisterStructMemberSize("GfxDynamicLightsetProbeData", 0x7BF65202u, "uint", 0x53A932A0u, "numSkipRecords", 0xF9D1B1AD, 0x80ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxDynamicLightsetProbeData", 0x7BF65202u, "ushort", 0xB7BE387D, "skipRecords", 0xC87C692D, 0x88ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("GfxDynamicLightsetProbeData", 0x7BF65202u, "GfxWrappedBuffer", 0xF87B73BE, "skipRecordsBuffer", 0xF444383F, 0x90ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxWrappedBuffer();
    Load_RegisterStructMemberSize("GfxDynamicLightsetProbeData", 0x7BF65202u, "uint", 0x53A932A0u, "palletteRecords", 0x2B5550AFu, 0xB0ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxDynamicLightsetProbeData", 0x7BF65202u, "GfxWrappedBuffer", 0xF87B73BE, "palletteRecordsBuffer", 0x191A6921u, 0xB8ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxWrappedBuffer();
    Load_RegisterStructMemberSize("GfxDynamicLightsetProbeData", 0x7BF65202u, "uint", 0x53A932A0u, "tempRemap", 0xA8FB16B9, 0xD8ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxDynamicLightsetProbeData", 0x7BF65202u, "GfxWrappedBuffer", 0xF87B73BE, "tempRemapBuffer", 0x26787E6Bu, 0xE0ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxWrappedBuffer();
  }
}

/*
==============
Load_ProcessStructLayout_GfxDynamicLightsetProductGIData
==============
*/
void Load_ProcessStructLayout_GfxDynamicLightsetProductGIData(void)
{
  if ( Load_RegisterStructSize("GfxDynamicLightsetProductGIData", 0xA545A995, 4ui64, 2ui64) )
  {
    Load_RegisterStructMemberSize("GfxDynamicLightsetProductGIData", 0xA545A995, "ushort", 0xB7BE387D, "whichDLS", 0x1D37CA82u, 0i64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("GfxDynamicLightsetProductGIData", 0xA545A995, "ushort", 0xB7BE387D, "whichPortal", 0x1782181Du, 2ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
  }
}

/*
==============
Load_ProcessStructLayout_GfxFrustumLights
==============
*/
void Load_ProcessStructLayout_GfxFrustumLights(void)
{
  if ( Load_RegisterStructSize("GfxFrustumLights", 0x456B82AEu, 0x80ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("GfxFrustumLights", 0x456B82AEu, "uint", 0x53A932A0u, "lightCount", 0xD4765D09, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxFrustumLights", 0x456B82AEu, "uint", 0x53A932A0u, "totalIndicesCount", 0x6403F942u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxFrustumLights", 0x456B82AEu, "uint", 0x53A932A0u, "totalVerticesCount", 0x218E9D30u, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxFrustumLights", 0x456B82AEu, "uint", 0x53A932A0u, "indicesOffsets", 0x84821D91, 0x10ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxFrustumLights", 0x456B82AEu, "uint", 0x53A932A0u, "verticesOffsets", 0xA5FB8A77, 0x18ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxFrustumLights", 0x456B82AEu, "ushort", 0xB7BE387D, "indicesCounts", 0xFD27B63F, 0x20ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("GfxFrustumLights", 0x456B82AEu, "ushort", 0xB7BE387D, "verticesCounts", 0x44DE3F5u, 0x28ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("GfxFrustumLights", 0x456B82AEu, "alignIndBufUShort_t", 0xA26482B9, "indices", 0x36D7951Fu, 0x30ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_alignIndBufUShort_t();
    Load_RegisterStructMemberSize("GfxFrustumLights", 0x456B82AEu, "alignVertBufByte_t", 0x4120F62Eu, "vertices", 0x8D8947C5, 0x38ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_alignVertBufByte_t();
    Load_RegisterStructMemberSize("GfxFrustumLights", 0x456B82AEu, "GfxWrappedBuffer", 0xF87B73BE, "indexBuffer", 0xA85632u, 0x40ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxWrappedBuffer();
    Load_RegisterStructMemberSize("GfxFrustumLights", 0x456B82AEu, "GfxWrappedBuffer", 0xF87B73BE, "vertexBuffer", 0x9CE2D2E8, 0x60ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxWrappedBuffer();
  }
}

/*
==============
Load_ProcessStructLayout_GfxGpuDynLightsetsLGVReference
==============
*/
void Load_ProcessStructLayout_GfxGpuDynLightsetsLGVReference(void)
{
  if ( Load_RegisterStructSize("GfxGpuDynLightsetsLGVReference", 0xE042CE87, 8ui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("GfxGpuDynLightsetsLGVReference", 0xE042CE87, "uint", 0x53A932A0u, "volumeIndex", 0xFF4A56A2, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxGpuDynLightsetsLGVReference", 0xE042CE87, "uint", 0x53A932A0u, "volumeProbeIndex", 0xF92DF708, 4ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
  }
}

/*
==============
Load_ProcessStructLayout_GfxGpuLightGrid
==============
*/
void Load_ProcessStructLayout_GfxGpuLightGrid(void)
{
  if ( Load_RegisterStructSize("GfxGpuLightGrid", 0x164A33u, 0x1B8ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("GfxGpuLightGrid", 0x164A33u, "uint", 0x53A932A0u, "probeCount", 0x2CC5FDBu, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxGpuLightGrid", 0x164A33u, "GfxSHCompressedProbeData", 0x13FB689Bu, "probes", 0x2B1FC059u, 8ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_GfxSHCompressedProbeData();
    Load_RegisterStructMemberSize("GfxGpuLightGrid", 0x164A33u, "GfxWrappedRWBuffer", 0xE696E573, "probesBuffer", 0x94CE55CB, 0x10ui64, 0x38ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxWrappedRWBuffer();
    Load_RegisterStructMemberSize("GfxGpuLightGrid", 0x164A33u, "alignVertBufVec3_t", 0xDB8ACA4D, "probePositions", 0xD5CA6326, 0x48ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_alignVertBufVec3_t();
    Load_RegisterStructMemberSize("GfxGpuLightGrid", 0x164A33u, "GfxWrappedBuffer", 0xF87B73BE, "probePositionsBuffer", 0x2AD50614u, 0x50ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxWrappedBuffer();
    Load_RegisterStructMemberSize("GfxGpuLightGrid", 0x164A33u, "bool", 0x1F095080u, "fallbackProbeUseCustomSample", 0x75744EAEu, 0x70ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("GfxGpuLightGrid", 0x164A33u, "vec3_t", 0x375A0610u, "fallbackProbeCustomSamplePos", 0x44F69DFu, 0x74ui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("GfxGpuLightGrid", 0x164A33u, "uint", 0x53A932A0u, "zoneCount", 0xE3402D17, 0x80ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxGpuLightGrid", 0x164A33u, "GfxGpuLightGridZone", 0xE0E1CAF1, "zones", 0x7149A5D5u, 0x88ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_GfxGpuLightGridZone();
    Load_RegisterStructMemberSize("GfxGpuLightGrid", 0x164A33u, "GfxGpuLightGridVoxelTree", 0x55901BF5u, "zoneVoxelTrees", 0x3BB4AC49u, 0x90ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_GfxGpuLightGridVoxelTree();
    Load_RegisterStructMemberSize("GfxGpuLightGrid", 0x164A33u, "uint", 0x53A932A0u, "tetrahedronCount", 0x7B5B8835u, 0x98ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxGpuLightGrid", 0x164A33u, "uint", 0x53A932A0u, "tetrahedronCountVisible", 0x4581E121u, 0x9Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxGpuLightGrid", 0x164A33u, "GfxGpuLightGridTetrahedron", 0x4E777CE9u, "tetrahedrons", 0x8CCD54B3, 0xA0ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("GfxGpuLightGridTetrahedron", 0x4E777CE9u, 0x10ui64, 0x40ui64) )
    {
      Load_RegisterStructMemberSize("GfxGpuLightGridTetrahedron", 0x4E777CE9u, "uint", 0x53A932A0u, "indexFlags", 0x93BFBD5u, 0i64, 0x10ui64, 4ui64, 0, 0);
      Load_ProcessStructLayout_uint();
    }
    Load_RegisterStructMemberSize("GfxGpuLightGrid", 0x164A33u, "GfxWrappedBuffer", 0xF87B73BE, "tetrahedronBuffer", 0xE4564BBE, 0xA8ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxWrappedBuffer();
    Load_RegisterStructMemberSize("GfxGpuLightGrid", 0x164A33u, "GfxGpuLightGridTetrahedronNeighbors", 0x3E381BB6u, "tetrahedronNeighbors", 0xD47ED389, 0xC8ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("GfxGpuLightGridTetrahedronNeighbors", 0x3E381BB6u, 0x10ui64, 0x40ui64) )
    {
      Load_RegisterStructMemberSize("GfxGpuLightGridTetrahedronNeighbors", 0x3E381BB6u, "uint", 0x53A932A0u, "neighbors", 0xA1AC5869, 0i64, 0x10ui64, 4ui64, 0, 0);
      Load_ProcessStructLayout_uint();
    }
    Load_RegisterStructMemberSize("GfxGpuLightGrid", 0x164A33u, "GfxWrappedBuffer", 0xF87B73BE, "tetrahedronNeighborsBuffer", 0x15D1AA7Bu, 0xD0ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxWrappedBuffer();
    Load_RegisterStructMemberSize("GfxGpuLightGrid", 0x164A33u, "GfxGpuLightGridTetrahedronVisibility", 0x4C26E6F5u, "tetrahedronVisibility", 0xC9B47014, 0xF0ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("GfxGpuLightGridTetrahedronVisibility", 0x4C26E6F5u, 0x40ui64, 0x40ui64) )
    {
      Load_RegisterStructMemberSize("GfxGpuLightGridTetrahedronVisibility", 0x4C26E6F5u, "uint", 0x53A932A0u, "visibility", 0x4FA2CD74u, 0i64, 0x40ui64, 0x10ui64, 0, 0);
      Load_ProcessStructLayout_uint();
    }
    Load_RegisterStructMemberSize("GfxGpuLightGrid", 0x164A33u, "GfxWrappedBuffer", 0xF87B73BE, "tetrahedronVisibilityBuffer", 0xCF3DD472, 0xF8ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxWrappedBuffer();
    Load_RegisterStructMemberSize("GfxGpuLightGrid", 0x164A33u, "uint", 0x53A932A0u, "voxelStartTetrahedronCount", 0xB4A8CD5u, 0x118ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxGpuLightGrid", 0x164A33u, "GfxGpuLightGridVoxelStartTetrahedron", 0xD18B49D1, "voxelStartTetrahedron", 0x56A0C920u, 0x120ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("GfxGpuLightGridVoxelStartTetrahedron", 0xD18B49D1, 4ui64, 0x40ui64) )
    {
      Load_RegisterStructMemberSize("GfxGpuLightGridVoxelStartTetrahedron", 0xD18B49D1, "uint", 0x53A932A0u, "index", 0x972C76D4, 0i64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
    }
    Load_RegisterStructMemberSize("GfxGpuLightGrid", 0x164A33u, "GfxWrappedBuffer", 0xF87B73BE, "voxelStartTetrahedronBuffer", 0x199A93DEu, 0x128ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxWrappedBuffer();
  }
}

/*
==============
Load_ProcessStructLayout_GfxGpuLightGridTetrahedron
==============
*/
void Load_ProcessStructLayout_GfxGpuLightGridTetrahedron(void)
{
  if ( Load_RegisterStructSize("GfxGpuLightGridTetrahedron", 0x4E777CE9u, 0x10ui64, 0x40ui64) )
  {
    Load_RegisterStructMemberSize("GfxGpuLightGridTetrahedron", 0x4E777CE9u, "uint", 0x53A932A0u, "indexFlags", 0x93BFBD5u, 0i64, 0x10ui64, 4ui64, 0, 0);
    Load_ProcessStructLayout_uint();
  }
}

/*
==============
Load_ProcessStructLayout_GfxGpuLightGridTetrahedronNeighbors
==============
*/
void Load_ProcessStructLayout_GfxGpuLightGridTetrahedronNeighbors(void)
{
  if ( Load_RegisterStructSize("GfxGpuLightGridTetrahedronNeighbors", 0x3E381BB6u, 0x10ui64, 0x40ui64) )
  {
    Load_RegisterStructMemberSize("GfxGpuLightGridTetrahedronNeighbors", 0x3E381BB6u, "uint", 0x53A932A0u, "neighbors", 0xA1AC5869, 0i64, 0x10ui64, 4ui64, 0, 0);
    Load_ProcessStructLayout_uint();
  }
}

/*
==============
Load_ProcessStructLayout_GfxGpuLightGridTetrahedronVisibility
==============
*/
void Load_ProcessStructLayout_GfxGpuLightGridTetrahedronVisibility(void)
{
  if ( Load_RegisterStructSize("GfxGpuLightGridTetrahedronVisibility", 0x4C26E6F5u, 0x40ui64, 0x40ui64) )
  {
    Load_RegisterStructMemberSize("GfxGpuLightGridTetrahedronVisibility", 0x4C26E6F5u, "uint", 0x53A932A0u, "visibility", 0x4FA2CD74u, 0i64, 0x40ui64, 0x10ui64, 0, 0);
    Load_ProcessStructLayout_uint();
  }
}

/*
==============
Load_ProcessStructLayout_GfxGpuLightGridTransientData
==============
*/
void Load_ProcessStructLayout_GfxGpuLightGridTransientData(void)
{
  if ( Load_RegisterStructSize("GfxGpuLightGridTransientData", 0x43DD69DBu, 0x28ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("GfxGpuLightGridTransientData", 0x43DD69DBu, "GfxGpuLightGrid", 0x164A33u, "gpuLightGrid", 0x46098C0Eu, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_GfxGpuLightGrid();
    Load_RegisterStructMemberSize("GfxGpuLightGridTransientData", 0x43DD69DBu, "uint", 0x53A932A0u, "staticModelVolumeCount", 0xD8D5FB04, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxGpuLightGridTransientData", 0x43DD69DBu, "GfxStaticModelLightGridVolume", 0x6216D374u, "staticModelVolumes", 0x8F8D7ABE, 0x10ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("GfxStaticModelLightGridVolume", 0x6216D374u, 0x40ui64, 4ui64) )
    {
      Load_RegisterStructMemberSize("GfxStaticModelLightGridVolume", 0x6216D374u, "uint", 0x53A932A0u, "firstProbe", 0xB9A25E90, 0i64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("GfxStaticModelLightGridVolume", 0x6216D374u, "ushort", 0xB7BE387D, "m_volumeSize", 0x7CBFEB1u, 4ui64, 6ui64, 3ui64, 0, 0);
      Load_ProcessStructLayout_ushort();
      Load_RegisterStructMemberSize("GfxStaticModelLightGridVolume", 0x6216D374u, "GfxStaticModelLightGridVolumeFlags", 0x4B86AAB5u, "flags", 0x85A76201, 0xAui64, 2ui64, 0i64, 0, 0);
      if ( Load_RegisterStructSize("GfxStaticModelLightGridVolumeFlags", 0x4B86AAB5u, 2ui64, 2ui64) )
      {
        Load_RegisterStructMemberSize("GfxStaticModelLightGridVolumeFlags", 0x4B86AAB5u, "ushort", 0xB7BE387D, (const char *)&queryFormat.fmt + 3, 0, 0i64, 2ui64, 0i64, 0, 0);
        Load_ProcessStructLayout_ushort();
      }
      Load_RegisterStructMemberSize("GfxStaticModelLightGridVolume", 0x6216D374u, "uint", 0x53A932A0u, "singleProbe", 0x88FE17DA, 0xCui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("GfxStaticModelLightGridVolume", 0x6216D374u, "vec4_t", 0x77673763u, "volumeTransform", 0x2D4F63DEu, 0x10ui64, 0x30ui64, 3ui64, 0, 0);
      Load_ProcessStructLayout_vec4_t();
    }
    Load_RegisterStructMemberSize("GfxGpuLightGridTransientData", 0x43DD69DBu, "GfxDynamicLightsetLGppZoneInfo", 0x416A6E21u, "SMLGppZone", 0xA2F1CFC5, 0x18ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("GfxDynamicLightsetLGppZoneInfo", 0x416A6E21u, 0x130ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("GfxDynamicLightsetLGppZoneInfo", 0x416A6E21u, "uint", 0x53A932A0u, "numOrigSMLGppProbes", 0x4057EA09u, 0i64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("GfxDynamicLightsetLGppZoneInfo", 0x416A6E21u, "GfxGpuDynLightsetsLGVReference", 0xE042CE87, "lgvReferences", 0x42B42A81u, 8ui64, 8ui64, 0i64, 1, 0);
      if ( Load_RegisterStructSize("GfxGpuDynLightsetsLGVReference", 0xE042CE87, 8ui64, 4ui64) )
      {
        Load_RegisterStructMemberSize("GfxGpuDynLightsetsLGVReference", 0xE042CE87, "uint", 0x53A932A0u, "volumeIndex", 0xFF4A56A2, 0i64, 4ui64, 0i64, 0, 0);
        Load_ProcessStructLayout_uint();
        Load_RegisterStructMemberSize("GfxGpuDynLightsetsLGVReference", 0xE042CE87, "uint", 0x53A932A0u, "volumeProbeIndex", 0xF92DF708, 4ui64, 4ui64, 0i64, 0, 0);
        Load_ProcessStructLayout_uint();
      }
      Load_RegisterStructMemberSize("GfxDynamicLightsetLGppZoneInfo", 0x416A6E21u, "GfxWrappedBuffer", 0xF87B73BE, "lgvReferencesBuffer", 0xA1B93E73, 0x10ui64, 0x20ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_GfxWrappedBuffer();
      Load_RegisterStructMemberSize("GfxDynamicLightsetLGppZoneInfo", 0x416A6E21u, "GfxDynamicLightsetProbeData", 0x7BF65202u, "lgvProbeData", 0x39368683u, 0x30ui64, 0x100ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_GfxDynamicLightsetProbeData();
    }
    Load_RegisterStructMemberSize("GfxGpuLightGridTransientData", 0x43DD69DBu, "GfxLightGridVolumeAtlasDataTempPtr", 0xB0FBDC6E, "tempLightGridVolumeData", 0xFA3CCE44, 0x20ui64, 8ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("GfxLightGridVolumeAtlasDataTempPtr", 0xB0FBDC6E, 8ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("GfxLightGridVolumeAtlasDataTempPtr", 0xB0FBDC6E, "GfxLightGridVolumeAtlasDataTemp", 0x1749F0F0u, (const char *)&queryFormat.fmt + 3, 0, 0i64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_GfxLightGridVolumeAtlasDataTemp();
    }
  }
}

/*
==============
Load_ProcessStructLayout_GfxGpuLightGridVoxelStartTetrahedron
==============
*/
void Load_ProcessStructLayout_GfxGpuLightGridVoxelStartTetrahedron(void)
{
  if ( Load_RegisterStructSize("GfxGpuLightGridVoxelStartTetrahedron", 0xD18B49D1, 4ui64, 0x40ui64) )
  {
    Load_RegisterStructMemberSize("GfxGpuLightGridVoxelStartTetrahedron", 0xD18B49D1, "uint", 0x53A932A0u, "index", 0x972C76D4, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
  }
}

/*
==============
Load_ProcessStructLayout_GfxGpuLightGridVoxelTree
==============
*/
void Load_ProcessStructLayout_GfxGpuLightGridVoxelTree(void)
{
  if ( Load_RegisterStructSize("GfxGpuLightGridVoxelTree", 0x55901BF5u, 0x80ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("GfxGpuLightGridVoxelTree", 0x55901BF5u, "int", 0x7103F94Bu, "topDownViewNodeCount", 0x9D07C3DF, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("GfxGpuLightGridVoxelTree", 0x55901BF5u, "int", 0x7103F94Bu, "internalNodeCount", 0x4D6FB950u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("GfxGpuLightGridVoxelTree", 0x55901BF5u, "GfxVoxelTreeHeader", 0xB2BEAC34, "treeHeader", 0xB566141F, 8ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_GfxVoxelTreeHeader();
    Load_RegisterStructMemberSize("GfxGpuLightGridVoxelTree", 0x55901BF5u, "GfxVoxelTopDownViewNode", 0x8E92FE4F, "topDownViewNodes", 0x7D13A01Du, 0x10ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_GfxVoxelTopDownViewNode();
    Load_RegisterStructMemberSize("GfxGpuLightGridVoxelTree", 0x55901BF5u, "GfxVoxelInternalNode", 0x72ADFB0u, "internalNodes", 0xD7E7E69A, 0x18ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_GfxVoxelInternalNode();
    Load_RegisterStructMemberSize("GfxGpuLightGridVoxelTree", 0x55901BF5u, "GfxWrappedBuffer", 0xF87B73BE, "treeHeaderBuffer", 0x3EC7D091u, 0x20ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxWrappedBuffer();
    Load_RegisterStructMemberSize("GfxGpuLightGridVoxelTree", 0x55901BF5u, "GfxWrappedBuffer", 0xF87B73BE, "topDownViewNodeBuffer", 0xA34CCDC8, 0x40ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxWrappedBuffer();
    Load_RegisterStructMemberSize("GfxGpuLightGridVoxelTree", 0x55901BF5u, "GfxWrappedBuffer", 0xF87B73BE, "internalNodeBuffer", 0x8ECBB3C5, 0x60ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxWrappedBuffer();
  }
}

/*
==============
Load_ProcessStructLayout_GfxGpuLightGridZone
==============
*/
void Load_ProcessStructLayout_GfxGpuLightGridZone(void)
{
  if ( Load_RegisterStructSize("GfxGpuLightGridZone", 0xE0E1CAF1, 0x5Cui64, 0x40ui64) )
  {
    Load_RegisterStructMemberSize("GfxGpuLightGridZone", 0xE0E1CAF1, "uint", 0x53A932A0u, "numProbes", 0x1B994DD9u, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxGpuLightGridZone", 0xE0E1CAF1, "uint", 0x53A932A0u, "firstProbe", 0xB9A25E90, 4ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxGpuLightGridZone", 0xE0E1CAF1, "uint", 0x53A932A0u, "numTetrahedrons", 0xB60E7633, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxGpuLightGridZone", 0xE0E1CAF1, "uint", 0x53A932A0u, "firstTetrahedron", 0x2A7FCC6u, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxGpuLightGridZone", 0xE0E1CAF1, "uint", 0x53A932A0u, "firstVoxelTetrahedronIndex", 0x9508A5F2, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxGpuLightGridZone", 0xE0E1CAF1, "uint", 0x53A932A0u, "voxelTetrahedronInternalNodeShift", 0xB75F8035, 0x14ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxGpuLightGridZone", 0xE0E1CAF1, "uint", 0x53A932A0u, "numVoxelTetrahedronIndices", 0xB54729F3, 0x18ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxGpuLightGridZone", 0xE0E1CAF1, "GfxSHProbeData", 0xC9BD7AA6, "fallbackProbeData", 0x3700D450u, 0x1Cui64, 0x40ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("GfxSHProbeData", 0xC9BD7AA6, 0x40ui64, 0x40ui64) )
    {
      Load_RegisterStructMemberSize("GfxSHProbeData", 0xC9BD7AA6, "ushort", 0xB7BE387D, "coeffs", 0x47F2A83Eu, 0i64, 0x3Aui64, 0x1Dui64, 0, 0);
      Load_ProcessStructLayout_ushort();
      Load_RegisterStructMemberSize("GfxSHProbeData", 0xC9BD7AA6, "ushort", 0xB7BE387D, "pad", 0x82155D47, 0x3Aui64, 6ui64, 3ui64, 0, 0);
      Load_ProcessStructLayout_ushort();
    }
  }
}

/*
==============
Load_ProcessStructLayout_GfxHeightfield
==============
*/
void Load_ProcessStructLayout_GfxHeightfield(void)
{
  if ( Load_RegisterStructSize("GfxHeightfield", 0x337DBBC0u, 0x60ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("GfxHeightfield", 0x337DBBC0u, "Bounds", 0x1605EBBBu, "bounds", 0x704A7A5Bu, 0i64, 0x18ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_Bounds();
    Load_RegisterStructMemberSize("GfxHeightfield", 0x337DBBC0u, "mat44_t", 0xC0F91913, "lookupMatrix", 0xD994D1C1, 0x18ui64, 0x40ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_mat44_t();
    Load_RegisterStructMemberSize("GfxHeightfield", 0x337DBBC0u, "GfxImagePtr", 0x4A325366u, "image", 0x1580F68Fu, 0x58ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxImagePtr();
  }
}

/*
==============
Load_ProcessStructLayout_GfxLightAABB
==============
*/
void Load_ProcessStructLayout_GfxLightAABB(void)
{
  if ( Load_RegisterStructSize("GfxLightAABB", 0x8619E55u, 0x18ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("GfxLightAABB", 0x8619E55u, "ushort", 0xB7BE387D, "nodeCount", 0xF38F9CC1, 0i64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("GfxLightAABB", 0x8619E55u, "ushort", 0xB7BE387D, "lightCount", 0xD4765D09, 2ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("GfxLightAABB", 0x8619E55u, "GfxLightAABBNode", 0xE3C82E95, "nodeArray", 0xBC374EBB, 8ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("GfxLightAABBNode", 0xE3C82E95, 0x1Cui64, 4ui64) )
    {
      Load_RegisterStructMemberSize("GfxLightAABBNode", 0xE3C82E95, "Bounds", 0x1605EBBBu, "bound", 0x7DEA9638u, 0i64, 0x18ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_Bounds();
      Load_RegisterStructMemberSize("GfxLightAABBNode", 0xE3C82E95, "ushort", 0xB7BE387D, "firstChild", 0xBF65BB84, 0x18ui64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ushort();
      Load_RegisterStructMemberSize("GfxLightAABBNode", 0xE3C82E95, "ushort", 0xB7BE387D, "childCount", 0xB53BB467, 0x1Aui64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ushort();
    }
    Load_RegisterStructMemberSize("GfxLightAABB", 0x8619E55u, "ushort", 0xB7BE387D, "lightArray", 0x7A4A63F3u, 0x10ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ushort();
  }
}

/*
==============
Load_ProcessStructLayout_GfxLightAABBNode
==============
*/
void Load_ProcessStructLayout_GfxLightAABBNode(void)
{
  if ( Load_RegisterStructSize("GfxLightAABBNode", 0xE3C82E95, 0x1Cui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("GfxLightAABBNode", 0xE3C82E95, "Bounds", 0x1605EBBBu, "bound", 0x7DEA9638u, 0i64, 0x18ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_Bounds();
    Load_RegisterStructMemberSize("GfxLightAABBNode", 0xE3C82E95, "ushort", 0xB7BE387D, "firstChild", 0xBF65BB84, 0x18ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("GfxLightAABBNode", 0xE3C82E95, "ushort", 0xB7BE387D, "childCount", 0xB53BB467, 0x1Aui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
  }
}

/*
==============
Load_ProcessStructLayout_GfxLightGridType
==============
*/
void Load_ProcessStructLayout_GfxLightGridType(void)
{
  if ( Load_RegisterStructSize("GfxLightGridType", 0xA77BD04B, 1ui64, 1ui64) )
  {
    Load_RegisterStructMemberSize("GfxLightGridType", 0xA77BD04B, "byte", 0x363F8F7Eu, (const char *)&queryFormat.fmt + 3, 0, 0i64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_byte();
  }
}

/*
==============
Load_ProcessStructLayout_GfxLightGridVolumeAtlasDataTemp
==============
*/
void Load_ProcessStructLayout_GfxLightGridVolumeAtlasDataTemp(void)
{
  if ( Load_RegisterStructSize("GfxLightGridVolumeAtlasDataTemp", 0x1749F0F0u, 0xB0ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("GfxLightGridVolumeAtlasDataTemp", 0x1749F0F0u, "uint", 0x53A932A0u, "m_widthAndHeight", 0x9EA352C6, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxLightGridVolumeAtlasDataTemp", 0x1749F0F0u, "uint", 0x53A932A0u, "m_depth", 0x72695C6Fu, 4ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxLightGridVolumeAtlasDataTemp", 0x1749F0F0u, "uint", 0x53A932A0u, "m_numVolumes", 0x8017079u, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxLightGridVolumeAtlasDataTemp", 0x1749F0F0u, "ushort", 0xB7BE387D, "m_worldTransient", 0xDA42B39E, 0xCui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("GfxLightGridVolumeAtlasDataTemp", 0x1749F0F0u, "GfxImageRawGpuTemp", 0xC0ABBE5E, "m_textures", 0x756F1260u, 0x10ui64, 0x50ui64, 2ui64, 0, 0);
    Load_ProcessStructLayout_GfxImageRawGpuTemp();
    Load_RegisterStructMemberSize("GfxLightGridVolumeAtlasDataTemp", 0x1749F0F0u, "LightGridVolumePackingParams", 0x230A3CA5u, "m_packingParams", 0x868DDA87, 0x60ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("LightGridVolumePackingParams", 0x230A3CA5u, 0x20ui64, 4ui64) )
    {
      Load_RegisterStructMemberSize("LightGridVolumePackingParams", 0x230A3CA5u, "vec3_t", 0x375A0610u, "m_uvScale", 0x9B385189, 0i64, 0xCui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec3_t();
      Load_RegisterStructMemberSize("LightGridVolumePackingParams", 0x230A3CA5u, "byte", 0x363F8F7Eu, "m_volumeSize", 0x7CBFEB1u, 0xCui64, 3ui64, 3ui64, 0, 0);
      Load_ProcessStructLayout_byte();
      Load_RegisterStructMemberSize("LightGridVolumePackingParams", 0x230A3CA5u, "byte", 0x363F8F7Eu, "m_basisType", 0xCC3C1ACA, 0xFui64, 1ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_byte();
      Load_RegisterStructMemberSize("LightGridVolumePackingParams", 0x230A3CA5u, "vec3_t", 0x375A0610u, "m_uvBias", 0x144893Eu, 0x10ui64, 0xCui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec3_t();
      Load_RegisterStructMemberSize("LightGridVolumePackingParams", 0x230A3CA5u, "uint", 0x53A932A0u, "m_firstStaticProbeIndex", 0x2B98CD8Eu, 0x1Cui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
    }
    Load_RegisterStructMemberSize("GfxLightGridVolumeAtlasDataTemp", 0x1749F0F0u, "GfxWrappedBuffer", 0xF87B73BE, "m_packingParamsBuffer", 0x8CC56719, 0x68ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxWrappedBuffer();
    Load_RegisterStructMemberSize("GfxLightGridVolumeAtlasDataTemp", 0x1749F0F0u, "LightGridVolumeTransformParams", 0xCD7F1DAC, "m_transformParams", 0xD905EED6, 0x88ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("LightGridVolumeTransformParams", 0xCD7F1DAC, 0x40ui64, 4ui64) )
    {
      Load_RegisterStructMemberSize("LightGridVolumeTransformParams", 0xCD7F1DAC, "vec4_t", 0x77673763u, "m_volumeTransform", 0xC8124756, 0i64, 0x30ui64, 3ui64, 0, 0);
      Load_ProcessStructLayout_vec4_t();
      Load_RegisterStructMemberSize("LightGridVolumeTransformParams", 0xCD7F1DAC, "uint", 0x53A932A0u, "m_historyEntryOrStaticFlags", 0xE6AE7F12, 0x30ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("LightGridVolumeTransformParams", 0xCD7F1DAC, "uint", 0x53A932A0u, "m_lastFrameHistoryEntryAndSetup", 0xA7544205, 0x34ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("LightGridVolumeTransformParams", 0xCD7F1DAC, "uint", 0x53A932A0u, "m_lodAndSamplingOffsetZ", 0x6CB89310u, 0x38ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("LightGridVolumeTransformParams", 0xCD7F1DAC, "uint", 0x53A932A0u, "m_samplingOffsetXY", 0x61B1B067u, 0x3Cui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
    }
    Load_RegisterStructMemberSize("GfxLightGridVolumeAtlasDataTemp", 0x1749F0F0u, "GfxWrappedBuffer", 0xF87B73BE, "m_transformParamsBuffer", 0x94FD43C4, 0x90ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxWrappedBuffer();
  }
}

/*
==============
Load_ProcessStructLayout_GfxLightGridVolumeAtlasDataTempPtr
==============
*/
void Load_ProcessStructLayout_GfxLightGridVolumeAtlasDataTempPtr(void)
{
  if ( Load_RegisterStructSize("GfxLightGridVolumeAtlasDataTempPtr", 0xB0FBDC6E, 8ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("GfxLightGridVolumeAtlasDataTempPtr", 0xB0FBDC6E, "GfxLightGridVolumeAtlasDataTemp", 0x1749F0F0u, (const char *)&queryFormat.fmt + 3, 0, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_GfxLightGridVolumeAtlasDataTemp();
  }
}

/*
==============
Load_ProcessStructLayout_GfxLightViewFrustum
==============
*/
void Load_ProcessStructLayout_GfxLightViewFrustum(void)
{
  if ( Load_RegisterStructSize("GfxLightViewFrustum", 0xEA6BD482, 0x20ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("GfxLightViewFrustum", 0xEA6BD482, "byte", 0x363F8F7Eu, "planeCount", 0x320FD993u, 0i64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_byte();
    Load_RegisterStructMemberSize("GfxLightViewFrustum", 0xEA6BD482, "byte", 0x363F8F7Eu, "indexCount", 0x75B69431u, 1ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_byte();
    Load_RegisterStructMemberSize("GfxLightViewFrustum", 0xEA6BD482, "byte", 0x363F8F7Eu, "vertexCount", 0xECA9CA7F, 2ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_byte();
    Load_RegisterStructMemberSize("GfxLightViewFrustum", 0xEA6BD482, "vec4_t", 0x77673763u, "planes", 0x9DE95B91, 8ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_vec4_t();
    Load_RegisterStructMemberSize("GfxLightViewFrustum", 0xEA6BD482, "byte", 0x363F8F7Eu, "indices", 0x36D7951Fu, 0x10ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_byte();
    Load_RegisterStructMemberSize("GfxLightViewFrustum", 0xEA6BD482, "vec3_t", 0x375A0610u, "vertices", 0x8D8947C5, 0x18ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_vec3_t();
  }
}

/*
==============
Load_ProcessStructLayout_GfxLightmapAtlasDataTemp
==============
*/
void Load_ProcessStructLayout_GfxLightmapAtlasDataTemp(void)
{
  if ( Load_RegisterStructSize("GfxLightmapAtlasDataTemp", 0x8C080AB2, 0xF10ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("GfxLightmapAtlasDataTemp", 0x8C080AB2, "uint", 0x53A932A0u, "transientZone", 0x48200190u, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxLightmapAtlasDataTemp", 0x8C080AB2, "uint", 0x53A932A0u, "numLightmaps", 0xF9CDB909, 4ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxLightmapAtlasDataTemp", 0x8C080AB2, "uint", 0x53A932A0u, "firstLightmapIndex", 0x48B3ADC8u, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxLightmapAtlasDataTemp", 0x8C080AB2, "GfxLightmapType", 0x46DF815Bu, "lightmapType", 0x26FB313Eu, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxLightmapType();
    Load_RegisterStructMemberSize("GfxLightmapAtlasDataTemp", 0x8C080AB2, "GfxLightmapRaw", 0xBB6B0357, "lightmaps", 0x6740C489u, 0x10ui64, 0xF00ui64, 0x20ui64, 0, 0);
    if ( Load_RegisterStructSize("GfxLightmapRaw", 0xBB6B0357, 0x78ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("GfxLightmapRaw", 0xBB6B0357, "GfxImageRawGpuTemp", 0xC0ABBE5E, "textures", 0xAB1263A8, 0i64, 0x78ui64, 3ui64, 0, 0);
      Load_ProcessStructLayout_GfxImageRawGpuTemp();
    }
  }
}

/*
==============
Load_ProcessStructLayout_GfxLightmapAtlasDataTempPtr
==============
*/
void Load_ProcessStructLayout_GfxLightmapAtlasDataTempPtr(void)
{
  if ( Load_RegisterStructSize("GfxLightmapAtlasDataTempPtr", 0xD2391060, 8ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("GfxLightmapAtlasDataTempPtr", 0xD2391060, "GfxLightmapAtlasDataTemp", 0x8C080AB2, (const char *)&queryFormat.fmt + 3, 0, 0i64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("GfxLightmapAtlasDataTemp", 0x8C080AB2, 0xF10ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("GfxLightmapAtlasDataTemp", 0x8C080AB2, "uint", 0x53A932A0u, "transientZone", 0x48200190u, 0i64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("GfxLightmapAtlasDataTemp", 0x8C080AB2, "uint", 0x53A932A0u, "numLightmaps", 0xF9CDB909, 4ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("GfxLightmapAtlasDataTemp", 0x8C080AB2, "uint", 0x53A932A0u, "firstLightmapIndex", 0x48B3ADC8u, 8ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("GfxLightmapAtlasDataTemp", 0x8C080AB2, "GfxLightmapType", 0x46DF815Bu, "lightmapType", 0x26FB313Eu, 0xCui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_GfxLightmapType();
      Load_RegisterStructMemberSize("GfxLightmapAtlasDataTemp", 0x8C080AB2, "GfxLightmapRaw", 0xBB6B0357, "lightmaps", 0x6740C489u, 0x10ui64, 0xF00ui64, 0x20ui64, 0, 0);
      if ( Load_RegisterStructSize("GfxLightmapRaw", 0xBB6B0357, 0x78ui64, 8ui64) )
      {
        Load_RegisterStructMemberSize("GfxLightmapRaw", 0xBB6B0357, "GfxImageRawGpuTemp", 0xC0ABBE5E, "textures", 0xAB1263A8, 0i64, 0x78ui64, 3ui64, 0, 0);
        Load_ProcessStructLayout_GfxImageRawGpuTemp();
      }
    }
  }
}

/*
==============
Load_ProcessStructLayout_GfxLightmapRaw
==============
*/
void Load_ProcessStructLayout_GfxLightmapRaw(void)
{
  if ( Load_RegisterStructSize("GfxLightmapRaw", 0xBB6B0357, 0x78ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("GfxLightmapRaw", 0xBB6B0357, "GfxImageRawGpuTemp", 0xC0ABBE5E, "textures", 0xAB1263A8, 0i64, 0x78ui64, 3ui64, 0, 0);
    Load_ProcessStructLayout_GfxImageRawGpuTemp();
  }
}

/*
==============
Load_ProcessStructLayout_GfxLightmapType
==============
*/
void Load_ProcessStructLayout_GfxLightmapType(void)
{
  if ( Load_RegisterStructSize("GfxLightmapType", 0x46DF815Bu, 4ui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("GfxLightmapType", 0x46DF815Bu, "uint", 0x53A932A0u, (const char *)&queryFormat.fmt + 3, 0, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
  }
}

/*
==============
Load_ProcessStructLayout_GfxMapEntLookup
==============
*/
void Load_ProcessStructLayout_GfxMapEntLookup(void)
{
  if ( Load_RegisterStructSize("GfxMapEntLookup", 0x75F52E32u, 0x1Cui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("GfxMapEntLookup", 0x75F52E32u, "uint", 0x53A932A0u, "lmapLookup", 0x25C12364u, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxMapEntLookup", 0x75F52E32u, "vec3_t", 0x375A0610u, "probesOffset", 0x6723C48u, 4ui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("GfxMapEntLookup", 0x75F52E32u, "uint", 0x53A932A0u, "flags", 0x85A76201, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxMapEntLookup", 0x75F52E32u, "uint", 0x53A932A0u, "lgvData", 0x961B5DCF, 0x14ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxMapEntLookup", 0x75F52E32u, "int", 0x7103F94Bu, "portalGISlot", 0xDB334D6E, 0x18ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
  }
}

/*
==============
Load_ProcessStructLayout_GfxMayhemSelfVis
==============
*/
void Load_ProcessStructLayout_GfxMayhemSelfVis(void)
{
  if ( Load_RegisterStructSize("GfxMayhemSelfVis", 0x6938E662u, 0x48ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("GfxMayhemSelfVis", 0x6938E662u, "uint32_t", 0xFC58820E, "selfVisBufferSize", 0xC159F93D, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint32_t();
    Load_RegisterStructMemberSize("GfxMayhemSelfVis", 0x6938E662u, "alignCompBufByte_t", 0x232A03F6u, "selfVis", 0xA914F4A4, 8ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_alignCompBufByte_t();
    Load_RegisterStructMemberSize("GfxMayhemSelfVis", 0x6938E662u, "GfxWrappedRWBuffer", 0xE696E573, "selfVisBuffer", 0xFF00B502, 0x10ui64, 0x38ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxWrappedRWBuffer();
  }
}

/*
==============
Load_ProcessStructLayout_GfxModelLightmapInst
==============
*/
void Load_ProcessStructLayout_GfxModelLightmapInst(void)
{
  if ( Load_RegisterStructSize("GfxModelLightmapInst", 0x628DC826u, 0x14ui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("GfxModelLightmapInst", 0x628DC826u, "ushort", 0xB7BE387D, "lmapIndex", 0x630CEC8Au, 0i64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("GfxModelLightmapInst", 0x628DC826u, "vec2_t", 0x3757C7B9u, "offset", 0xE85BFB1u, 4ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec2_t();
    Load_RegisterStructMemberSize("GfxModelLightmapInst", 0x628DC826u, "vec_t", 0xF2244F23, "scaleWidth", 0xEC22C32A, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec_t();
    Load_RegisterStructMemberSize("GfxModelLightmapInst", 0x628DC826u, "vec_t", 0xF2244F23, "scaleHeight", 0xE2D2798B, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec_t();
  }
}

/*
==============
Load_ProcessStructLayout_GfxPortal
==============
*/
void Load_ProcessStructLayout_GfxPortal(void)
{
  if ( Load_RegisterStructSize("GfxPortal", 0xD3DDD05B, 0x50ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("GfxPortal", 0xD3DDD05B, "DpvsPlane", 0xD2CFC40D, "plane", 0x606AA9D6u, 0x18ui64, 0x10ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("DpvsPlane", 0xD2CFC40D, 0x10ui64, 4ui64) )
    {
      Load_RegisterStructMemberSize("DpvsPlane", 0xD2CFC40D, "vec4_t", 0x77673763u, "coeffs", 0x47F2A83Eu, 0i64, 0x10ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec4_t();
    }
    Load_RegisterStructMemberSize("GfxPortal", 0xD3DDD05B, "vec3_t", 0x375A0610u, "vertices", 0x8D8947C5, 0x28ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("GfxPortal", 0xD3DDD05B, "ushort", 0xB7BE387D, "cellIndex", 0xD6040AF8, 0x30ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("GfxPortal", 0xD3DDD05B, "ushort", 0xB7BE387D, "closeDistance", 0x4ADDECF5u, 0x32ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("GfxPortal", 0xD3DDD05B, "byte", 0x363F8F7Eu, "vertexCount", 0xECA9CA7F, 0x34ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_byte();
    Load_RegisterStructMemberSize("GfxPortal", 0xD3DDD05B, "vec3_t", 0x375A0610u, "hullAxis", 0x12C3AFB6u, 0x38ui64, 0x18ui64, 2ui64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
  }
}

/*
==============
Load_ProcessStructLayout_GfxPrecomputedSkyIllumination
==============
*/
void Load_ProcessStructLayout_GfxPrecomputedSkyIllumination(void)
{
  if ( Load_RegisterStructSize("GfxPrecomputedSkyIllumination", 0x5AE8410Du, 0x60ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("GfxPrecomputedSkyIllumination", 0x5AE8410Du, "GfxImagePtr", 0x4A325366u, "detailMask", 0xD66CC28F, 0i64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxImagePtr();
    Load_RegisterStructMemberSize("GfxPrecomputedSkyIllumination", 0x5AE8410Du, "GfxImagePtr", 0x4A325366u, "heightMap", 0xE94EA009, 8ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxImagePtr();
    Load_RegisterStructMemberSize("GfxPrecomputedSkyIllumination", 0x5AE8410Du, "GfxImagePtr", 0x4A325366u, "SVDCoefficient", 0xCE2F2D6C, 0x10ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxImagePtr();
    Load_RegisterStructMemberSize("GfxPrecomputedSkyIllumination", 0x5AE8410Du, "GfxImagePtr", 0x4A325366u, "SVDBasis", 0xEE922309, 0x18ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxImagePtr();
    Load_RegisterStructMemberSize("GfxPrecomputedSkyIllumination", 0x5AE8410Du, "vec4_t", 0x77673763u, "boxMin", 0xA051EC11, 0x20ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec4_t();
    Load_RegisterStructMemberSize("GfxPrecomputedSkyIllumination", 0x5AE8410Du, "vec4_t", 0x77673763u, "boxMax", 0xA851F96F, 0x30ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec4_t();
    Load_RegisterStructMemberSize("GfxPrecomputedSkyIllumination", 0x5AE8410Du, "vec4_t", 0x77673763u, "SVDCoefficientMinMax", 0x658137D2u, 0x40ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec4_t();
    Load_RegisterStructMemberSize("GfxPrecomputedSkyIllumination", 0x5AE8410Du, "vec4_t", 0x77673763u, "heightConsts", 0x54B1385u, 0x50ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec4_t();
  }
}

/*
==============
Load_ProcessStructLayout_GfxSHCompressedProbeData
==============
*/
void Load_ProcessStructLayout_GfxSHCompressedProbeData(void)
{
  if ( Load_RegisterStructSize("GfxSHCompressedProbeData", 0x13FB689Bu, 0x20ui64, 0x20ui64) )
  {
    Load_RegisterStructMemberSize("GfxSHCompressedProbeData", 0x13FB689Bu, "uint", 0x53A932A0u, "data", 0x331E5D8u, 0i64, 0x20ui64, 8ui64, 0, 0);
    Load_ProcessStructLayout_uint();
  }
}

/*
==============
Load_ProcessStructLayout_GfxSHProbeData
==============
*/
void Load_ProcessStructLayout_GfxSHProbeData(void)
{
  if ( Load_RegisterStructSize("GfxSHProbeData", 0xC9BD7AA6, 0x40ui64, 0x40ui64) )
  {
    Load_RegisterStructMemberSize("GfxSHProbeData", 0xC9BD7AA6, "ushort", 0xB7BE387D, "coeffs", 0x47F2A83Eu, 0i64, 0x3Aui64, 0x1Dui64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("GfxSHProbeData", 0xC9BD7AA6, "ushort", 0xB7BE387D, "pad", 0x82155D47, 0x3Aui64, 6ui64, 3ui64, 0, 0);
    Load_ProcessStructLayout_ushort();
  }
}

/*
==============
Load_ProcessStructLayout_GfxSceneDynBrush
==============
*/
void Load_ProcessStructLayout_GfxSceneDynBrush(void)
{
  Load_RegisterStructSize("GfxSceneDynBrush", 0x3EBDD01Cu, 0xCui64, 4ui64);
}

/*
==============
Load_ProcessStructLayout_GfxSceneDynModel
==============
*/
void Load_ProcessStructLayout_GfxSceneDynModel(void)
{
  Load_RegisterStructSize("GfxSceneDynModel", 0xB1949BEB, 0xCui64, 4ui64);
}

/*
==============
Load_ProcessStructLayout_GfxShadowGeometry
==============
*/
void Load_ProcessStructLayout_GfxShadowGeometry(void)
{
  if ( Load_RegisterStructSize("GfxShadowGeometry", 0x419E3789u, 0x18ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("GfxShadowGeometry", 0x419E3789u, "ushort", 0xB7BE387D, "surfaceCount", 0xF4EEB1BE, 0i64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("GfxShadowGeometry", 0x419E3789u, "ushort", 0xB7BE387D, "smodelCount", 0xC4E5AB6F, 2ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("GfxShadowGeometry", 0x419E3789u, "BSPSURF_COUNT_TYPE", 0x5FDA68CEu, "sortedSurfIndex", 0xBD51A80D, 8ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_BSPSURF_COUNT_TYPE();
    Load_RegisterStructMemberSize("GfxShadowGeometry", 0x419E3789u, "ushort", 0xB7BE387D, "smodelIndex", 0x91833776, 0x10ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ushort();
  }
}

/*
==============
Load_ProcessStructLayout_GfxStaticDecalVolumeMask
==============
*/
void Load_ProcessStructLayout_GfxStaticDecalVolumeMask(void)
{
  if ( Load_RegisterStructSize("GfxStaticDecalVolumeMask", 0x74384FDCu, 8ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("GfxStaticDecalVolumeMask", 0x74384FDCu, "GfxDecalVolumeMaskPtr", 0x887F6FD8, "blendMapOverride", 0xBD6DA3C1, 0i64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxDecalVolumeMaskPtr();
  }
}

/*
==============
Load_ProcessStructLayout_GfxStaticDecalVolumeMaterial
==============
*/
void Load_ProcessStructLayout_GfxStaticDecalVolumeMaterial(void)
{
  if ( Load_RegisterStructSize("GfxStaticDecalVolumeMaterial", 0xB050BE3F, 8ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("GfxStaticDecalVolumeMaterial", 0xB050BE3F, "MaterialHandle", 0x2FCF718Du, "material", 0xB1102FC3, 0i64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_MaterialHandle();
  }
}

/*
==============
Load_ProcessStructLayout_GfxStaticDecalVolumePacked
==============
*/
void Load_ProcessStructLayout_GfxStaticDecalVolumePacked(void)
{
  if ( Load_RegisterStructSize("GfxStaticDecalVolumePacked", 0x2413DCE4u, 0x2Cui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("GfxStaticDecalVolumePacked", 0x2413DCE4u, "vec3_t", 0x375A0610u, "obbCenter", 0x7F0D3CA4u, 0i64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("GfxStaticDecalVolumePacked", 0x2413DCE4u, "uint", 0x53A932A0u, "obbQuat", 0xD6D6A252, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxStaticDecalVolumePacked", 0x2413DCE4u, "uint", 0x53A932A0u, "obbHalfSize", 0x839FABF7, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxStaticDecalVolumePacked", 0x2413DCE4u, "uint", 0x53A932A0u, "opacityParams", 0x67E85531u, 0x14ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxStaticDecalVolumePacked", 0x2413DCE4u, "uint", 0x53A932A0u, "uvMatrixAndOffset", 0x5B93B244u, 0x18ui64, 0xCui64, 3ui64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxStaticDecalVolumePacked", 0x2413DCE4u, "uint", 0x53A932A0u, "packedMaterialInfo", 0x100807B3u, 0x24ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxStaticDecalVolumePacked", 0x2413DCE4u, "uint", 0x53A932A0u, "reserved", 0x7C6A0C6Cu, 0x28ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
  }
}

/*
==============
Load_ProcessStructLayout_GfxStaticDecalVolumeUid
==============
*/
void Load_ProcessStructLayout_GfxStaticDecalVolumeUid(void)
{
  if ( Load_RegisterStructSize("GfxStaticDecalVolumeUid", 0xC1DDEDBA, 4ui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("GfxStaticDecalVolumeUid", 0xC1DDEDBA, "uint", 0x53A932A0u, "uid", 0x76221656u, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
  }
}

/*
==============
Load_ProcessStructLayout_GfxStaticModelLightGridVolume
==============
*/
void Load_ProcessStructLayout_GfxStaticModelLightGridVolume(void)
{
  if ( Load_RegisterStructSize("GfxStaticModelLightGridVolume", 0x6216D374u, 0x40ui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("GfxStaticModelLightGridVolume", 0x6216D374u, "uint", 0x53A932A0u, "firstProbe", 0xB9A25E90, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxStaticModelLightGridVolume", 0x6216D374u, "ushort", 0xB7BE387D, "m_volumeSize", 0x7CBFEB1u, 4ui64, 6ui64, 3ui64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("GfxStaticModelLightGridVolume", 0x6216D374u, "GfxStaticModelLightGridVolumeFlags", 0x4B86AAB5u, "flags", 0x85A76201, 0xAui64, 2ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("GfxStaticModelLightGridVolumeFlags", 0x4B86AAB5u, 2ui64, 2ui64) )
    {
      Load_RegisterStructMemberSize("GfxStaticModelLightGridVolumeFlags", 0x4B86AAB5u, "ushort", 0xB7BE387D, (const char *)&queryFormat.fmt + 3, 0, 0i64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ushort();
    }
    Load_RegisterStructMemberSize("GfxStaticModelLightGridVolume", 0x6216D374u, "uint", 0x53A932A0u, "singleProbe", 0x88FE17DA, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxStaticModelLightGridVolume", 0x6216D374u, "vec4_t", 0x77673763u, "volumeTransform", 0x2D4F63DEu, 0x10ui64, 0x30ui64, 3ui64, 0, 0);
    Load_ProcessStructLayout_vec4_t();
  }
}

/*
==============
Load_ProcessStructLayout_GfxStaticModelLightGridVolumeFlags
==============
*/
void Load_ProcessStructLayout_GfxStaticModelLightGridVolumeFlags(void)
{
  if ( Load_RegisterStructSize("GfxStaticModelLightGridVolumeFlags", 0x4B86AAB5u, 2ui64, 2ui64) )
  {
    Load_RegisterStructMemberSize("GfxStaticModelLightGridVolumeFlags", 0x4B86AAB5u, "ushort", 0xB7BE387D, (const char *)&queryFormat.fmt + 3, 0, 0i64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
  }
}

/*
==============
Load_ProcessStructLayout_GfxVoxelInternalNode
==============
*/
void Load_ProcessStructLayout_GfxVoxelInternalNode(void)
{
  if ( Load_RegisterStructSize("GfxVoxelInternalNode", 0x72ADFB0u, 0x10ui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("GfxVoxelInternalNode", 0x72ADFB0u, "int", 0x7103F94Bu, "firstNodeIndex", 0x687489BAu, 0i64, 8ui64, 2ui64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("GfxVoxelInternalNode", 0x72ADFB0u, "int", 0x7103F94Bu, "childNodeMask", 0xB3A8B5CE, 8ui64, 8ui64, 2ui64, 0, 0);
    Load_ProcessStructLayout_int();
  }
}

/*
==============
Load_ProcessStructLayout_GfxVoxelLeafNode
==============
*/
void Load_ProcessStructLayout_GfxVoxelLeafNode(void)
{
  if ( Load_RegisterStructSize("GfxVoxelLeafNode", 0xBA7C777B, 2ui64, 2ui64) )
  {
    Load_RegisterStructMemberSize("GfxVoxelLeafNode", 0xBA7C777B, "ushort", 0xB7BE387D, "lightListAddress", 0x5B47CB24u, 0i64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
  }
}

/*
==============
Load_ProcessStructLayout_GfxVoxelTopDownViewNode
==============
*/
void Load_ProcessStructLayout_GfxVoxelTopDownViewNode(void)
{
  if ( Load_RegisterStructSize("GfxVoxelTopDownViewNode", 0x8E92FE4F, 0xCui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("GfxVoxelTopDownViewNode", 0x8E92FE4F, "int", 0x7103F94Bu, "firstNodeIndex", 0x687489BAu, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("GfxVoxelTopDownViewNode", 0x8E92FE4F, "int", 0x7103F94Bu, "zMin", 0x6F74245Eu, 4ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("GfxVoxelTopDownViewNode", 0x8E92FE4F, "int", 0x7103F94Bu, "zMax", 0x777430B0u, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
  }
}

/*
==============
Load_ProcessStructLayout_GfxVoxelTree
==============
*/
void Load_ProcessStructLayout_GfxVoxelTree(void)
{
  if ( Load_RegisterStructSize("GfxVoxelTree", 0x29DC32F3u, 0x78ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("GfxVoxelTree", 0x29DC32F3u, "Bounds", 0x1605EBBBu, "zoneBound", 0x9476E79A, 0i64, 0x18ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_Bounds();
    Load_RegisterStructMemberSize("GfxVoxelTree", 0x29DC32F3u, "int", 0x7103F94Bu, "voxelTopDownViewNodeCount", 0x5E4C080Bu, 0x18ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("GfxVoxelTree", 0x29DC32F3u, "int", 0x7103F94Bu, "voxelInternalNodeCount", 0xF6353B34, 0x1Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("GfxVoxelTree", 0x29DC32F3u, "int", 0x7103F94Bu, "voxelLeafNodeCount", 0x92146A5u, 0x20ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("GfxVoxelTree", 0x29DC32F3u, "int", 0x7103F94Bu, "lightListArraySize", 0xCA85B3E0, 0x24ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("GfxVoxelTree", 0x29DC32F3u, "GfxVoxelTreeHeader", 0xB2BEAC34, "voxelTreeHeader", 0x5F94BCD3u, 0x28ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_GfxVoxelTreeHeader();
    Load_RegisterStructMemberSize("GfxVoxelTree", 0x29DC32F3u, "GfxVoxelTopDownViewNode", 0x8E92FE4F, "voxelTopDownViewNodeArray", 0xDB1E3739, 0x30ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_GfxVoxelTopDownViewNode();
    Load_RegisterStructMemberSize("GfxVoxelTree", 0x29DC32F3u, "GfxVoxelInternalNode", 0x72ADFB0u, "voxelInternalNodeArray", 0xF235614A, 0x38ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_GfxVoxelInternalNode();
    Load_RegisterStructMemberSize("GfxVoxelTree", 0x29DC32F3u, "GfxVoxelLeafNode", 0xBA7C777B, "voxelLeafNodeArray", 0x42A15Fu, 0x40ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("GfxVoxelLeafNode", 0xBA7C777B, 2ui64, 2ui64) )
    {
      Load_RegisterStructMemberSize("GfxVoxelLeafNode", 0xBA7C777B, "ushort", 0xB7BE387D, "lightListAddress", 0x5B47CB24u, 0i64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ushort();
    }
    Load_RegisterStructMemberSize("GfxVoxelTree", 0x29DC32F3u, "raw_ushort4", 0x531436E8u, "lightListArray", 0xE19F4BAB, 0x48ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_ushort4();
    Load_RegisterStructMemberSize("GfxVoxelTree", 0x29DC32F3u, "uint", 0x53A932A0u, "voxelInternalNodeDynamicLightListCPU", 0x47D60378u, 0x50ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxVoxelTree", 0x29DC32F3u, "uint", 0x53A932A0u, "voxelInternalNodeDynamicLightList", 0xA76F2472, 0x58ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxVoxelTree", 0x29DC32F3u, "GfxVoxelTreeHeader", 0xB2BEAC34, "voxelTreeHeaderCPU", 0x16CD71DFu, 0x60ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_GfxVoxelTreeHeader();
    Load_RegisterStructMemberSize("GfxVoxelTree", 0x29DC32F3u, "GfxVoxelTopDownViewNode", 0x8E92FE4F, "voxelTopDownViewNodeArrayCPU", 0x9C43E87D, 0x68ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_GfxVoxelTopDownViewNode();
    Load_RegisterStructMemberSize("GfxVoxelTree", 0x29DC32F3u, "GfxVoxelInternalNode", 0x72ADFB0u, "voxelInternalNodeArrayCPU", 0x4685A7A0u, 0x70ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_GfxVoxelInternalNode();
  }
}

/*
==============
Load_ProcessStructLayout_GfxVoxelTreeHeader
==============
*/
void Load_ProcessStructLayout_GfxVoxelTreeHeader(void)
{
  if ( Load_RegisterStructSize("GfxVoxelTreeHeader", 0xB2BEAC34, 0x40ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("GfxVoxelTreeHeader", 0xB2BEAC34, "int", 0x7103F94Bu, "rootNodeDimension", 0xA05F9B08, 0i64, 0x10ui64, 4ui64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("GfxVoxelTreeHeader", 0xB2BEAC34, "int", 0x7103F94Bu, "nodeCoordBitShift", 0x340AADF4u, 0x10ui64, 0x10ui64, 4ui64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("GfxVoxelTreeHeader", 0xB2BEAC34, "vec4_t", 0x77673763u, "boundMin", 0x16A9B04Cu, 0x20ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec4_t();
    Load_RegisterStructMemberSize("GfxVoxelTreeHeader", 0xB2BEAC34, "vec4_t", 0x77673763u, "boundMax", 0x1EA9BCC2u, 0x30ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec4_t();
  }
}

/*
==============
Load_ProcessStructLayout_GfxWorld
==============
*/
void Load_ProcessStructLayout_GfxWorld(void)
{
  if ( Load_RegisterStructSize("GfxWorld", 0x8353D723, 0x41E0ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "XString", 0x6231894Bu, (const char *)&stru_143C9A1A4, 0x58737A51u, 0i64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "XString", 0x6231894Bu, "baseName", 0x8974CE22, 8ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "BspVersion", 0x4E1CB4A5u, "bspVersion", 0x7A11B05u, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("BspVersion", 0x4E1CB4A5u, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "uint", 0x53A932A0u, "lastSunPrimaryLightIndex", 0xD25DCC40, 0x14ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "uint", 0x53A932A0u, "primaryLightCount", 0x21EE1B63u, 0x18ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "uint", 0x53A932A0u, "firstMutablePrimaryLight", 0xF2C21EAE, 0x1Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "uint", 0x53A932A0u, "mutablePrimaryLightCount", 0xE7A463C5, 0x20ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "uint", 0x53A932A0u, "firstStaticScriptablesPrimaryLight", 0x9994BED6, 0x24ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "uint", 0x53A932A0u, "staticScriptablesPrimaryLightCount", 0xCCDA39FD, 0x28ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "uint", 0x53A932A0u, "firstStaticScriptablePrimaryLight", 0x787C081Fu, 0x2Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "uint", 0x53A932A0u, "staticScriptablePrimaryLightCount", 0x49FB05E6u, 0x30ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "uint", 0x53A932A0u, "firstMovingScriptablePrimaryLight", 0xF4EE9D7F, 0x34ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "uint", 0x53A932A0u, "movingScriptablePrimaryLightCount", 0x123BE406u, 0x38ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "uint", 0x53A932A0u, "sortKeyLitDecal", 0xDD3A6B87, 0x3Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "uint", 0x53A932A0u, "sortKeyEffectDecal", 0x61A8B289u, 0x40ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "uint", 0x53A932A0u, "sortKeyTopDecal", 0x86AE2B55, 0x44ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "uint", 0x53A932A0u, "sortKeyEffectAuto", 0x9F27610B, 0x48ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "uint", 0x53A932A0u, "sortKeyDistortion", 0xB2791E4C, 0x4Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "uint", 0x53A932A0u, "sortKeyEffectDistortion", 0x560F937Bu, 0x50ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "uint", 0x53A932A0u, "sortKey2D", 0xF9A41A3F, 0x54ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "GfxWorldDpvsPlanes", 0x8884C793, "dpvsPlanes", 0x5BF9BEE4u, 0x90ui64, 0x28ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxWorldDpvsPlanes();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "GfxCellTransientInfo", 0xDFB73B5u, "cellTransientInfos", 0x6DC18151u, 0xC0ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("GfxCellTransientInfo", 0xDFB73B5u, 4ui64, 2ui64) )
    {
      Load_RegisterStructMemberSize("GfxCellTransientInfo", 0xDFB73B5u, "ushort", 0xB7BE387D, "aabbTreeIndex", 0xB1297A7E, 0i64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ushort();
      Load_RegisterStructMemberSize("GfxCellTransientInfo", 0xDFB73B5u, "ushort", 0xB7BE387D, "transientZone", 0x48200190u, 2ui64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ushort();
    }
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "GfxCell", 0xB4C720D5, "cells", 0x1415DDDFu, 0xB8ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("GfxCell", 0xB4C720D5, 0x28ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("GfxCell", 0xB4C720D5, "Bounds", 0x1605EBBBu, "bounds", 0x704A7A5Bu, 0i64, 0x18ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_Bounds();
      Load_RegisterStructMemberSize("GfxCell", 0xB4C720D5, "ushort", 0xB7BE387D, "portalCount", 0x50817197u, 0x18ui64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ushort();
      Load_RegisterStructMemberSize("GfxCell", 0xB4C720D5, "GfxPortal", 0xD3DDD05B, "portals", 0x1387A255u, 0x20ui64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_GfxPortal();
    }
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "GfxWorldSurfaces", 0xE5E28353, "surfaces", 0xC06224F8, 0xC8ui64, 0xA8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxWorldSurfaces();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "GfxWorldStaticModels", 0xC99DFE5F, "smodels", 0x93662C8D, 0x170ui64, 0x318ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxWorldStaticModels();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "GfxWorldDraw", 0x2C03E65Du, "draw", 0x1E5CF136u, 0x488ui64, 0x3200ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxWorldDraw();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "GfxDynamicLightset", 0x18C4F8CCu, "dynamicLightset", 0xEC9FAE3u, 0x3688ui64, 0x260ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxDynamicLightset();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "int", 0x7103F94Bu, "voxelTreeCount", 0x74039A51u, 0x39C0ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "GfxVoxelTree", 0x29DC32F3u, "voxelTree", 0xE0F59DB4, 0x39C8ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_GfxVoxelTree();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "GfxMayhemSelfVis", 0x6938E662u, "mayhemSelfVis", 0xA455B9Du, 0x38E8ui64, 0x48ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("GfxMayhemSelfVis", 0x6938E662u, 0x48ui64, 0x10ui64) )
    {
      Load_RegisterStructMemberSize("GfxMayhemSelfVis", 0x6938E662u, "uint32_t", 0xFC58820E, "selfVisBufferSize", 0xC159F93D, 0i64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint32_t();
      Load_RegisterStructMemberSize("GfxMayhemSelfVis", 0x6938E662u, "alignCompBufByte_t", 0x232A03F6u, "selfVis", 0xA914F4A4, 8ui64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_alignCompBufByte_t();
      Load_RegisterStructMemberSize("GfxMayhemSelfVis", 0x6938E662u, "GfxWrappedRWBuffer", 0xE696E573, "selfVisBuffer", 0xFF00B502, 0x10ui64, 0x38ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_GfxWrappedRWBuffer();
    }
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "GfxFrustumLights", 0x456B82AEu, "frustumLights", 0xFFDD4FF9, 0x3930ui64, 0x80ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxFrustumLights();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "GfxLight", 0x217FB06Fu, "primaryLights", 0xB8D5BE81, 0x39B8ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_GfxLight();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "GfxLightViewFrustum", 0xEA6BD482, "lightViewFrustums", 0x6374C7FEu, 0x39B0ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("GfxLightViewFrustum", 0xEA6BD482, 0x20ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("GfxLightViewFrustum", 0xEA6BD482, "byte", 0x363F8F7Eu, "planeCount", 0x320FD993u, 0i64, 1ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_byte();
      Load_RegisterStructMemberSize("GfxLightViewFrustum", 0xEA6BD482, "byte", 0x363F8F7Eu, "indexCount", 0x75B69431u, 1ui64, 1ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_byte();
      Load_RegisterStructMemberSize("GfxLightViewFrustum", 0xEA6BD482, "byte", 0x363F8F7Eu, "vertexCount", 0xECA9CA7F, 2ui64, 1ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_byte();
      Load_RegisterStructMemberSize("GfxLightViewFrustum", 0xEA6BD482, "vec4_t", 0x77673763u, "planes", 0x9DE95B91, 8ui64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_vec4_t();
      Load_RegisterStructMemberSize("GfxLightViewFrustum", 0xEA6BD482, "byte", 0x363F8F7Eu, "indices", 0x36D7951Fu, 0x10ui64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_byte();
      Load_RegisterStructMemberSize("GfxLightViewFrustum", 0xEA6BD482, "vec3_t", 0x375A0610u, "vertices", 0x8D8947C5, 0x18ui64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_vec3_t();
    }
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "int", 0x7103F94Bu, "heightfieldCount", 0xC0A9401C, 0x39D0ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "GfxHeightfield", 0x337DBBC0u, "heightfields", 0x3173E436u, 0x39D8ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("GfxHeightfield", 0x337DBBC0u, 0x60ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("GfxHeightfield", 0x337DBBC0u, "Bounds", 0x1605EBBBu, "bounds", 0x704A7A5Bu, 0i64, 0x18ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_Bounds();
      Load_RegisterStructMemberSize("GfxHeightfield", 0x337DBBC0u, "mat44_t", 0xC0F91913, "lookupMatrix", 0xD994D1C1, 0x18ui64, 0x40ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_mat44_t();
      Load_RegisterStructMemberSize("GfxHeightfield", 0x337DBBC0u, "GfxImagePtr", 0x4A325366u, "image", 0x1580F68Fu, 0x58ui64, 8ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_GfxImagePtr();
    }
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "int", 0x7103F94Bu, "modelCount", 0xE01A1124, 0x3A40ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "GfxBrushModel", 0xF581D9E2, "models", 0x9420579E, 0x3A48ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_GfxBrushModel();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "GfxPrecomputedSkyIllumination", 0x5AE8410Du, "precomputedSkyIllumination", 0xD2F30Cu, 0x39E0ui64, 0x60ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxPrecomputedSkyIllumination();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "Bounds", 0x1605EBBBu, "bounds", 0x704A7A5Bu, 0x78ui64, 0x18ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_Bounds();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "uint", 0x53A932A0u, "lmapLookupCount", 0x27B4EAA1u, 0x3A50ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "GfxModelLightmapInst", 0x628DC826u, "lmapLookup", 0x25C12364u, 0x3A58ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("GfxModelLightmapInst", 0x628DC826u, 0x14ui64, 4ui64) )
    {
      Load_RegisterStructMemberSize("GfxModelLightmapInst", 0x628DC826u, "ushort", 0xB7BE387D, "lmapIndex", 0x630CEC8Au, 0i64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ushort();
      Load_RegisterStructMemberSize("GfxModelLightmapInst", 0x628DC826u, "vec2_t", 0x3757C7B9u, "offset", 0xE85BFB1u, 4ui64, 8ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec2_t();
      Load_RegisterStructMemberSize("GfxModelLightmapInst", 0x628DC826u, "vec_t", 0xF2244F23, "scaleWidth", 0xEC22C32A, 0xCui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec_t();
      Load_RegisterStructMemberSize("GfxModelLightmapInst", 0x628DC826u, "vec_t", 0xF2244F23, "scaleHeight", 0xE2D2798B, 0x10ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec_t();
    }
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "uint", 0x53A932A0u, "gfxMapEntLookupCount", 0x7A2EB807u, 0x3A60ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "GfxMapEntLookup", 0x75F52E32u, "gfxMapEntLookup", 0xAB0A2212, 0x3A68ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("GfxMapEntLookup", 0x75F52E32u, 0x1Cui64, 4ui64) )
    {
      Load_RegisterStructMemberSize("GfxMapEntLookup", 0x75F52E32u, "uint", 0x53A932A0u, "lmapLookup", 0x25C12364u, 0i64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("GfxMapEntLookup", 0x75F52E32u, "vec3_t", 0x375A0610u, "probesOffset", 0x6723C48u, 4ui64, 0xCui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec3_t();
      Load_RegisterStructMemberSize("GfxMapEntLookup", 0x75F52E32u, "uint", 0x53A932A0u, "flags", 0x85A76201, 0x10ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("GfxMapEntLookup", 0x75F52E32u, "uint", 0x53A932A0u, "lgvData", 0x961B5DCF, 0x14ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("GfxMapEntLookup", 0x75F52E32u, "int", 0x7103F94Bu, "portalGISlot", 0xDB334D6E, 0x18ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_int();
    }
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "sunflare_t", 0x53550B87u, "sun", 0x861DB25A, 0x3A78ui64, 0x70ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_sunflare_t();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "mat44_t", 0xC0F91913, "outdoorLookupMatrix", 0x66322DE5u, 0x3AE8ui64, 0x40ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_mat44_t();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "GfxImagePtr", 0x4A325366u, "outdoorImage", 0xF5E48DB3, 0x3B28ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxImagePtr();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "MaterialHandle", 0x2FCF718Du, "dustMaterial", 0x5123CE1Fu, 0x3B30ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_MaterialHandle();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "float", 0x9B987AFE, "materialLod0SizeThreshold", 0xB8FDBC70, 0x3B38ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "raw_uint", 0x67932DA1u, "cellCasterBits", 0xBE8E2218, 0x3B40ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "raw_uint", 0x67932DA1u, "cellHasSunLitSurfsBits", 0xFA248DD4, 0x3B48ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "GfxSceneDynModel", 0xB1949BEB, "sceneDynModel", 0xD4E1DF8u, 0x3B50ui64, 8ui64, 0i64, 1, 0);
    Load_RegisterStructSize("GfxSceneDynModel", 0xB1949BEB, 0xCui64, 4ui64);
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "GfxSceneDynBrush", 0x3EBDD01Cu, "sceneDynBrush", 0xE469C373, 0x3B58ui64, 8ui64, 0i64, 1, 0);
    Load_RegisterStructSize("GfxSceneDynBrush", 0x3EBDD01Cu, 0xCui64, 4ui64);
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "uint", 0x53A932A0u, "primaryLightMotionDetectBitsEntries", 0xF032DA2B, 0x3B60ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "raw_uint", 0x67932DA1u, "primaryLightMotionDetectBits", 0xFD7E9851, 0x3B68ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "uint", 0x53A932A0u, "entityMotionBitsEntries", 0x56D743B1u, 0x3B70ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "raw_uint", 0x67932DA1u, "entityMotionBits", 0xCE28DCF7, 0x3B78ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "uint", 0x53A932A0u, "staticSpotOmniPrimaryLightCountAligned", 0x409BD074u, 0x3B80ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "uint", 0x53A932A0u, "shadowBitsArrayPitch", 0x6071CDF7u, 0x3B84ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "uint", 0x53A932A0u, "numPrimaryLightEntityShadowVisEntries", 0x8BDE9E35, 0x3B88ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "raw_uint", 0x67932DA1u, "primaryLightEntityShadowVis", 0x49CAEB83u, 0x3B90ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "uint", 0x53A932A0u, "dynEntMotionBitsEntries", 0xDFB481A6, 0x3B98ui64, 8ui64, 2ui64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "raw_uint", 0x67932DA1u, "dynEntMotionBits[DYNENT_BASIS_MODEL]", 0x86166BB1, 0x3BA0ui64, 0x10ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "raw_uint", 0x67932DA1u, "dynEntMotionBits[DYNENT_BASIS_BRUSH]", 0x61DD4D0u, 0x3BA0ui64, 0x10ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "uint", 0x53A932A0u, "numPrimaryLightDynEntShadowVisEntries", 0x529525ACu, 0x3BB0ui64, 8ui64, 2ui64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "raw_uint", 0x67932DA1u, "primaryLightDynEntShadowVis[DYNENT_BASIS_MODEL]", 0xC19AAC63, 0x3BB8ui64, 0x10ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "raw_uint", 0x67932DA1u, "primaryLightDynEntShadowVis[DYNENT_BASIS_BRUSH]", 0x4FD943Au, 0x3BB8ui64, 0x10ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "GfxShadowGeometry", 0x419E3789u, "shadowGeomOptimized", 0xB704E687, 0x3BC8ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("GfxShadowGeometry", 0x419E3789u, 0x18ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("GfxShadowGeometry", 0x419E3789u, "ushort", 0xB7BE387D, "surfaceCount", 0xF4EEB1BE, 0i64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ushort();
      Load_RegisterStructMemberSize("GfxShadowGeometry", 0x419E3789u, "ushort", 0xB7BE387D, "smodelCount", 0xC4E5AB6F, 2ui64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ushort();
      Load_RegisterStructMemberSize("GfxShadowGeometry", 0x419E3789u, "BSPSURF_COUNT_TYPE", 0x5FDA68CEu, "sortedSurfIndex", 0xBD51A80D, 8ui64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_BSPSURF_COUNT_TYPE();
      Load_RegisterStructMemberSize("GfxShadowGeometry", 0x419E3789u, "ushort", 0xB7BE387D, "smodelIndex", 0x91833776, 0x10ui64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_ushort();
    }
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "GfxLightAABB", 0x8619E55u, "lightAABB", 0xDD1E285A, 0x3BD0ui64, 0x18ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxLightAABB();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "GfxWorldDpvsStatic", 0x64E5B564u, "dpvs", 0xFF584335, 0x3BE8ui64, 0x278ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxWorldDpvsStatic();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "GfxWorldDpvsDynamic", 0x4323D1B9u, "dpvsDyn", 0xBBCF5FB6, 0x3E60ui64, 0x230ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxWorldDpvsDynamic();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "uint", 0x53A932A0u, "numUmbraGates", 0xCDD659F5, 0x4090ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "UmbraGate", 0x5E895842u, "umbraGates", 0x99F17475, 0x4098ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("UmbraGate", 0x5E895842u, 0x20ui64, 4ui64) )
    {
      Load_RegisterStructMemberSize("UmbraGate", 0x5E895842u, "uint", 0x53A932A0u, "objID", 0xC1B2A140, 0i64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("UmbraGate", 0x5E895842u, "Bounds", 0x1605EBBBu, "bounds", 0x704A7A5Bu, 4ui64, 0x18ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_Bounds();
      Load_RegisterStructMemberSize("UmbraGate", 0x5E895842u, "float", 0x9B987AFE, "closeDistance", 0x4ADDECF5u, 0x1Cui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_float();
    }
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "uint", 0x53A932A0u, "umbraTomeSize", 0xBE8457ED, 0x40A0ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "byte16", 0x6E700147u, "umbraTomeData", 0x4253F832u, 0x40A8ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_byte16();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "umbraTomePtr_t", 0x22107799u, "umbraTome", 0x916843B2, 0x40B0ui64, 8ui64, 0i64, 0, 0);
    Load_RegisterStructSize("umbraTomePtr_t", 0x22107799u, 8ui64, 8ui64);
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "uint", 0x53A932A0u, "mdaoVolumeCount", 0x390E1E2u, 0x40B8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "MdaoVolume", 0xFA47E9A5, "mdaoVolumes", 0xC22A232C, 0x40C0ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_MdaoVolume();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "bool", 0x1F095080u, "enableMdao", 0x5B31FABAu, 0x40C8ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "StreamTree", 0x56E57158u, "streamTree", 0x17496038u, 0x40D0ui64, 0x60ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_StreamTree();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "StreamTreeGrid", 0x6BCA4418u, "materialStreamTreeGrid", 0x291C3DA7u, 0x4130ui64, 0x58ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_StreamTreeGrid();
    Load_RegisterStructMemberSize("GfxWorld", 0x8353D723, "StreamTreeGrid", 0x6BCA4418u, "xmodelStreamTreeGrid", 0x6FAAE62Bu, 0x4188ui64, 0x58ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_StreamTreeGrid();
  }
}

/*
==============
Load_ProcessStructLayout_GfxWorldDpvsDynamic
==============
*/
void Load_ProcessStructLayout_GfxWorldDpvsDynamic(void)
{
  if ( Load_RegisterStructSize("GfxWorldDpvsDynamic", 0x4323D1B9u, 0x230ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "uint", 0x53A932A0u, "dynEntClientWordCount[DYNENT_BASIS_MODEL]", 0xA67D1E99, 0i64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "uint", 0x53A932A0u, "dynEntClientWordCount[DYNENT_BASIS_BRUSH]", 0x5F231758u, 0i64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "uint", 0x53A932A0u, "dynEntClientCount[DYNENT_BASIS_MODEL]", 0x5B19167Du, 8ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "uint", 0x53A932A0u, "dynEntClientCount[DYNENT_BASIS_BRUSH]", 0x8CA38FDC, 8ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_uint", 0x67932DA1u, "dynEntCellBits[DYNENT_BASIS_MODEL]", 0x3720803u, 0x10ui64, 0x10ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_uint", 0x67932DA1u, "dynEntCellBits[DYNENT_BASIS_BRUSH]", 0x494DC6DAu, 0x10ui64, 0x10ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_MODEL][SCENE_VIEW_CAMERA]", 0x9F886677, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_BRUSH][SCENE_VIEW_CAMERA]", 0xD4F67DB0, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_MODEL][SCENE_VIEW_SUNSHADOW_NEAR]", 0x287F1939u, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_BRUSH][SCENE_VIEW_SUNSHADOW_NEAR]", 0xEDD6EB1E, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_MODEL][SCENE_VIEW_SUNSHADOW_FAR]", 0xF2E2594A, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_BRUSH][SCENE_VIEW_SUNSHADOW_FAR]", 0xF274A85F, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_MODEL][SCENE_VIEW_SUNSHADOW_DISTANT]", 0x8B8B91AA, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_BRUSH][SCENE_VIEW_SUNSHADOW_DISTANT]", 0xDDD865B3, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_MODEL][SCENE_VIEW_SPOTSHADOW_0]", 0x8952ED0F, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_BRUSH][SCENE_VIEW_SPOTSHADOW_0]", 0xDC452984, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_MODEL][SCENE_VIEW_SPOTSHADOW_1]", 0x8A52EEB8, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_BRUSH][SCENE_VIEW_SPOTSHADOW_1]", 0xDB45281B, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_MODEL][SCENE_VIEW_SPOTSHADOW_2]", 0x8752EA71, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_BRUSH][SCENE_VIEW_SPOTSHADOW_2]", 0xDA4526EE, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_MODEL][SCENE_VIEW_SPOTSHADOW_3]", 0x8852EBE2, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_BRUSH][SCENE_VIEW_SPOTSHADOW_3]", 0xD945257D, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_MODEL][SCENE_VIEW_SPOTSHADOW_4]", 0x8552E75B, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_BRUSH][SCENE_VIEW_SPOTSHADOW_4]", 0xE0453078, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_MODEL][SCENE_VIEW_SPOTSHADOW_5]", 0x8652E8C4, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_BRUSH][SCENE_VIEW_SPOTSHADOW_5]", 0xDF452ECF, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_MODEL][SCENE_VIEW_SPOTSHADOW_6]", 0x8352E3BD, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_BRUSH][SCENE_VIEW_SPOTSHADOW_6]", 0xDE452CA2, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_MODEL][SCENE_VIEW_SPOTSHADOW_7]", 0x8452E52E, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_BRUSH][SCENE_VIEW_SPOTSHADOW_7]", 0xDD452B31, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_MODEL][SCENE_VIEW_CACHED_SUNSHADOW_NEAR_0]", 0x86B8DFD7, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_BRUSH][SCENE_VIEW_CACHED_SUNSHADOW_NEAR_0]", 0xA851FBE2, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_MODEL][SCENE_VIEW_CACHED_SUNSHADOW_NEAR_1]", 0x87B8E140, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_BRUSH][SCENE_VIEW_CACHED_SUNSHADOW_NEAR_1]", 0xA751FA71, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_MODEL][SCENE_VIEW_CACHED_SUNSHADOW_NEAR_2]", 0x84B8DC39, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_BRUSH][SCENE_VIEW_CACHED_SUNSHADOW_NEAR_2]", 0xAA51FEB8, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_MODEL][SCENE_VIEW_CACHED_SUNSHADOW_NEAR_3]", 0x85B8DDAA, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_BRUSH][SCENE_VIEW_CACHED_SUNSHADOW_NEAR_3]", 0xA951FD0F, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_MODEL][SCENE_VIEW_CACHED_SUNSHADOW_NEAR_4]", 0x82B8D963, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_BRUSH][SCENE_VIEW_CACHED_SUNSHADOW_NEAR_4]", 0xA451F52E, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_MODEL][SCENE_VIEW_CACHED_SUNSHADOW_NEAR_5]", 0x83B8DA8C, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_BRUSH][SCENE_VIEW_CACHED_SUNSHADOW_NEAR_5]", 0xA351F3BD, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_MODEL][SCENE_VIEW_CACHED_SUNSHADOW_NEAR_6]", 0x80B8D645, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_BRUSH][SCENE_VIEW_CACHED_SUNSHADOW_NEAR_6]", 0xA651F8C4, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_MODEL][SCENE_VIEW_CACHED_SUNSHADOW_NEAR_7]", 0x81B8D7F6, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_BRUSH][SCENE_VIEW_CACHED_SUNSHADOW_NEAR_7]", 0xA551F75B, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_MODEL][SCENE_VIEW_CACHED_SUNSHADOW_NEAR_8]", 0x7EB8D2AFu, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_BRUSH][SCENE_VIEW_CACHED_SUNSHADOW_NEAR_8]", 0xB052080A, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_MODEL][SCENE_VIEW_CACHED_SUNSHADOW_NEAR_PRECACHE]", 0xE8F93136, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_BRUSH][SCENE_VIEW_CACHED_SUNSHADOW_NEAR_PRECACHE]", 0xEBD9DCA9, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_MODEL][SCENE_VIEW_CACHED_SUNSHADOW_FAR_0]", 0xB2714DE2, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_BRUSH][SCENE_VIEW_CACHED_SUNSHADOW_FAR_0]", 0xD33BB1C9, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_MODEL][SCENE_VIEW_CACHED_SUNSHADOW_FAR_1]", 0xB1714C71, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_BRUSH][SCENE_VIEW_CACHED_SUNSHADOW_FAR_1]", 0xD43BB37A, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_MODEL][SCENE_VIEW_CACHED_SUNSHADOW_FAR_2]", 0xB47150B8, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_BRUSH][SCENE_VIEW_CACHED_SUNSHADOW_FAR_2]", 0xD53BB4E7, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_MODEL][SCENE_VIEW_CACHED_SUNSHADOW_FAR_3]", 0xB3714F0F, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_BRUSH][SCENE_VIEW_CACHED_SUNSHADOW_FAR_3]", 0xD63BB610, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_MODEL][SCENE_VIEW_CACHED_SUNSHADOW_FAR_4]", 0xAE71472E, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_BRUSH][SCENE_VIEW_CACHED_SUNSHADOW_FAR_4]", 0xCF3BAB15, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_MODEL][SCENE_VIEW_CACHED_SUNSHADOW_FAR_5]", 0xAD7145BD, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_BRUSH][SCENE_VIEW_CACHED_SUNSHADOW_FAR_5]", 0xD03BAC86, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_MODEL][SCENE_VIEW_CACHED_SUNSHADOW_FAR_6]", 0xB0714AC4, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_BRUSH][SCENE_VIEW_CACHED_SUNSHADOW_FAR_6]", 0xD13BAE33, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_MODEL][SCENE_VIEW_CACHED_SUNSHADOW_FAR_7]", 0xAF71495B, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_BRUSH][SCENE_VIEW_CACHED_SUNSHADOW_FAR_7]", 0xD23BB05C, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_MODEL][SCENE_VIEW_CACHED_SUNSHADOW_FAR_8]", 0xBA715A0A, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_BRUSH][SCENE_VIEW_CACHED_SUNSHADOW_FAR_8]", 0xCB3BA4A1, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_MODEL][SCENE_VIEW_CACHED_SUNSHADOW_FAR_PRECACHE]", 0x540742A9u, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
    Load_RegisterStructMemberSize("GfxWorldDpvsDynamic", 0x4323D1B9u, "raw_byte16", 0x4F9E68FEu, "dynEntVisData[DYNENT_BASIS_BRUSH][SCENE_VIEW_CACHED_SUNSHADOW_FAR_PRECACHE]", 0x67706848u, 0x20ui64, 0x210ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_byte16();
  }
}

/*
==============
Load_ProcessStructLayout_GfxWorldDpvsPlane
==============
*/
void Load_ProcessStructLayout_GfxWorldDpvsPlane(void)
{
  if ( Load_RegisterStructSize("GfxWorldDpvsPlane", 0x19FC84A0u, 0x14ui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("GfxWorldDpvsPlane", 0x19FC84A0u, "vec3_t", 0x375A0610u, "normal", 0xECC0CD1u, 0i64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("GfxWorldDpvsPlane", 0x19FC84A0u, "float", 0x9B987AFE, "dist", 0x141E78B0u, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
  }
}

/*
==============
Load_ProcessStructLayout_GfxWorldDpvsPlanes
==============
*/
void Load_ProcessStructLayout_GfxWorldDpvsPlanes(void)
{
  if ( Load_RegisterStructSize("GfxWorldDpvsPlanes", 0x8884C793, 0x28ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("GfxWorldDpvsPlanes", 0x8884C793, "uint", 0x53A932A0u, "cellCount", 0x1D0DF61u, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorldDpvsPlanes", 0x8884C793, "ushort", 0xB7BE387D, "planeCount", 0x320FD993u, 4ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("GfxWorldDpvsPlanes", 0x8884C793, "GfxWorldDpvsPlane", 0x19FC84A0u, "planes", 0x9DE95B91, 8ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("GfxWorldDpvsPlane", 0x19FC84A0u, 0x14ui64, 4ui64) )
    {
      Load_RegisterStructMemberSize("GfxWorldDpvsPlane", 0x19FC84A0u, "vec3_t", 0x375A0610u, "normal", 0xECC0CD1u, 0i64, 0xCui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec3_t();
      Load_RegisterStructMemberSize("GfxWorldDpvsPlane", 0x19FC84A0u, "float", 0x9B987AFE, "dist", 0x141E78B0u, 0xCui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_float();
    }
    Load_RegisterStructMemberSize("GfxWorldDpvsPlanes", 0x8884C793, "ushort", 0xB7BE387D, "nodeCount", 0xF38F9CC1, 0x10ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("GfxWorldDpvsPlanes", 0x8884C793, "ushort", 0xB7BE387D, "nodes", 0xE13C377F, 0x18ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("GfxWorldDpvsPlanes", 0x8884C793, "raw_uint", 0x67932DA1u, "sceneEntCellBits", 0x9B2EAC8B, 0x20ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint();
  }
}

/*
==============
Load_ProcessStructLayout_GfxWorldDpvsStatic
==============
*/
void Load_ProcessStructLayout_GfxWorldDpvsStatic(void)
{
  if ( Load_RegisterStructSize("GfxWorldDpvsStatic", 0x64E5B564u, 0x278ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "uint", 0x53A932A0u, "smodelVisDataCount", 0x30C7C7EDu, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "uint", 0x53A932A0u, "surfaceVisDataCount", 0xD85255F6, 4ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "uint", 0x53A932A0u, "primaryLightVisDataCount", 0x76F7A721u, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "uint", 0x53A932A0u, "reflectionProbeVisDataCount", 0x7D704A84u, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "uint", 0x53A932A0u, "volumetricVisDataCount", 0x427E73CFu, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "uint", 0x53A932A0u, "decalVisDataCount", 0x7BEB2750u, 0x14ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "smodelVisData[SCENE_VIEW_CAMERA]", 0x6F795FFCu, 0x18ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "smodelVisData[SCENE_VIEW_SUNSHADOW_NEAR]", 0x1674B17Au, 0x18ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "smodelVisData[SCENE_VIEW_SUNSHADOW_FAR]", 0xEEA537BB, 0x18ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "smodelVisData[SCENE_VIEW_SUNSHADOW_DISTANT]", 0xE385A007, 0x18ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "smodelVisData[SCENE_VIEW_SPOTSHADOW_0]", 0xF8687F30, 0x18ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "smodelVisData[SCENE_VIEW_SPOTSHADOW_1]", 0xF7687D87, 0x18ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "smodelVisData[SCENE_VIEW_SPOTSHADOW_2]", 0xF6687C1A, 0x18ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "smodelVisData[SCENE_VIEW_SPOTSHADOW_3]", 0xF5687AE9, 0x18ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "smodelVisData[SCENE_VIEW_SPOTSHADOW_4]", 0xF468797C, 0x18ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "smodelVisData[SCENE_VIEW_SPOTSHADOW_5]", 0xF36877D3, 0x18ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "smodelVisData[SCENE_VIEW_SPOTSHADOW_6]", 0xF26875A6, 0x18ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "smodelVisData[SCENE_VIEW_SPOTSHADOW_7]", 0xF1687435, 0x18ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "smodelVisData[SCENE_VIEW_CACHED_SUNSHADOW_NEAR_0]", 0xE5BA1F96, 0x18ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "smodelVisData[SCENE_VIEW_CACHED_SUNSHADOW_NEAR_1]", 0xE4BA1E65, 0x18ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "smodelVisData[SCENE_VIEW_CACHED_SUNSHADOW_NEAR_2]", 0xE7BA22AC, 0x18ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "smodelVisData[SCENE_VIEW_CACHED_SUNSHADOW_NEAR_3]", 0xE6BA2103, 0x18ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "smodelVisData[SCENE_VIEW_CACHED_SUNSHADOW_NEAR_4]", 0xE9BA264A, 0x18ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "smodelVisData[SCENE_VIEW_CACHED_SUNSHADOW_NEAR_5]", 0xE8BA24D9, 0x18ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "smodelVisData[SCENE_VIEW_CACHED_SUNSHADOW_NEAR_6]", 0xEBBA2960, 0x18ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "smodelVisData[SCENE_VIEW_CACHED_SUNSHADOW_NEAR_7]", 0xEABA27F7, 0x18ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "smodelVisData[SCENE_VIEW_CACHED_SUNSHADOW_NEAR_8]", 0xDDBA136E, 0x18ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "smodelVisData[SCENE_VIEW_CACHED_SUNSHADOW_NEAR_PRECACHE]", 0x3CDAC985u, 0x18ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "smodelVisData[SCENE_VIEW_CACHED_SUNSHADOW_FAR_0]", 0xA374DB3D, 0x18ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "smodelVisData[SCENE_VIEW_CACHED_SUNSHADOW_FAR_1]", 0xA474DCAE, 0x18ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "smodelVisData[SCENE_VIEW_CACHED_SUNSHADOW_FAR_2]", 0xA574DEDB, 0x18ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "smodelVisData[SCENE_VIEW_CACHED_SUNSHADOW_FAR_3]", 0xA674E044, 0x18ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "smodelVisData[SCENE_VIEW_CACHED_SUNSHADOW_FAR_4]", 0xA774E1F1, 0x18ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "smodelVisData[SCENE_VIEW_CACHED_SUNSHADOW_FAR_5]", 0xA874E362, 0x18ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "smodelVisData[SCENE_VIEW_CACHED_SUNSHADOW_FAR_6]", 0xA974E48F, 0x18ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "smodelVisData[SCENE_VIEW_CACHED_SUNSHADOW_FAR_7]", 0xAA74E638, 0x18ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "smodelVisData[SCENE_VIEW_CACHED_SUNSHADOW_FAR_8]", 0xAB74E7A5, 0x18ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "smodelVisData[SCENE_VIEW_CACHED_SUNSHADOW_FAR_PRECACHE]", 0x5091B284u, 0x18ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "surfaceVisData[SCENE_VIEW_CAMERA]", 0x8BC6E75B, 0x120ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "surfaceVisData[SCENE_VIEW_SUNSHADOW_NEAR]", 0x73C98ACDu, 0x120ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "surfaceVisData[SCENE_VIEW_SUNSHADOW_FAR]", 0x6355B95Eu, 0x120ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "surfaceVisData[SCENE_VIEW_SUNSHADOW_DISTANT]", 0x6723EB06u, 0x120ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "surfaceVisData[SCENE_VIEW_SPOTSHADOW_0]", 0x93F718B3, 0x120ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "surfaceVisData[SCENE_VIEW_SPOTSHADOW_1]", 0x94F71ADC, 0x120ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "surfaceVisData[SCENE_VIEW_SPOTSHADOW_2]", 0x91F71595, 0x120ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "surfaceVisData[SCENE_VIEW_SPOTSHADOW_3]", 0x92F71706, 0x120ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "surfaceVisData[SCENE_VIEW_SPOTSHADOW_4]", 0x97F71F67, 0x120ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "surfaceVisData[SCENE_VIEW_SPOTSHADOW_5]", 0x98F72090, 0x120ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "surfaceVisData[SCENE_VIEW_SPOTSHADOW_6]", 0x95F71C49, 0x120ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "surfaceVisData[SCENE_VIEW_SPOTSHADOW_7]", 0x96F71DFA, 0x120ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "surfaceVisData[SCENE_VIEW_CACHED_SUNSHADOW_NEAR_0]", 0x48D7D2C3u, 0x120ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "surfaceVisData[SCENE_VIEW_CACHED_SUNSHADOW_NEAR_1]", 0x49D7D46Cu, 0x120ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "surfaceVisData[SCENE_VIEW_CACHED_SUNSHADOW_NEAR_2]", 0x46D7CF25u, 0x120ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "surfaceVisData[SCENE_VIEW_CACHED_SUNSHADOW_NEAR_3]", 0x47D7D156u, 0x120ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "surfaceVisData[SCENE_VIEW_CACHED_SUNSHADOW_NEAR_4]", 0x4CD7D8B7u, 0x120ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "surfaceVisData[SCENE_VIEW_CACHED_SUNSHADOW_NEAR_5]", 0x4DD7DA20u, 0x120ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "surfaceVisData[SCENE_VIEW_CACHED_SUNSHADOW_NEAR_6]", 0x4AD7D599u, 0x120ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "surfaceVisData[SCENE_VIEW_CACHED_SUNSHADOW_NEAR_7]", 0x4BD7D70Au, 0x120ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "surfaceVisData[SCENE_VIEW_CACHED_SUNSHADOW_NEAR_8]", 0x40D7C65Bu, 0x120ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "surfaceVisData[SCENE_VIEW_CACHED_SUNSHADOW_NEAR_PRECACHE]", 0xEDBAA59A, 0x120ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "surfaceVisData[SCENE_VIEW_CACHED_SUNSHADOW_FAR_0]", 0xD52175AE, 0x120ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "surfaceVisData[SCENE_VIEW_CACHED_SUNSHADOW_FAR_1]", 0xD421743D, 0x120ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "surfaceVisData[SCENE_VIEW_CACHED_SUNSHADOW_FAR_2]", 0xD7217944, 0x120ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "surfaceVisData[SCENE_VIEW_CACHED_SUNSHADOW_FAR_3]", 0xD62177DB, 0x120ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "surfaceVisData[SCENE_VIEW_CACHED_SUNSHADOW_FAR_4]", 0xD9217C62, 0x120ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "surfaceVisData[SCENE_VIEW_CACHED_SUNSHADOW_FAR_5]", 0xD8217AF1, 0x120ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "surfaceVisData[SCENE_VIEW_CACHED_SUNSHADOW_FAR_6]", 0xDB217F38, 0x120ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "surfaceVisData[SCENE_VIEW_CACHED_SUNSHADOW_FAR_7]", 0xDA217D8F, 0x120ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "surfaceVisData[SCENE_VIEW_CACHED_SUNSHADOW_FAR_8]", 0xDD2182D6, 0x120ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "surfaceVisData[SCENE_VIEW_CACHED_SUNSHADOW_FAR_PRECACHE]", 0x31D102FDu, 0x120ui64, 0x108ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "primaryLightVisData", 0x7AB42CE4u, 0x228ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "reflectionProbeVisData", 0x50AAC89Fu, 0x230ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "volumetricVisData", 0x8D566BEA, 0x238ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "decalVisData", 0xA48AD13u, 0x240ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "BSPSURF_COUNT_TYPE", 0x5FDA68CEu, "sortedSurfIndex", 0xBD51A80D, 0x248ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_BSPSURF_COUNT_TYPE();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "ushort", 0xB7BE387D, "sortedSmodelIndices", 0x2E35405Cu, 0x258ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "surfaceCastsSunShadow", 0x2372B1F7u, 0x260ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "uint", 0x53A932A0u, "sunShadowOptCount", 0xE230019A, 0x268ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "uint", 0x53A932A0u, "sunSurfVisDataCount", 0xBCB3DC4D, 0x26Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorldDpvsStatic", 0x64E5B564u, "raw_uint128", 0xE5326684, "surfaceCastsSunShadowOpt", 0x3861244Eu, 0x270ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_raw_uint128();
  }
}

/*
==============
Load_ProcessStructLayout_GfxWorldDraw
==============
*/
void Load_ProcessStructLayout_GfxWorldDraw(void)
{
  if ( Load_RegisterStructSize("GfxWorldDraw", 0x2C03E65Du, 0x3200ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("GfxWorldDraw", 0x2C03E65Du, "GfxWorldReflectionProbeData", 0xEF87014E, "reflectionProbeData", 0xB1A05583, 0i64, 0xA8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxWorldReflectionProbeData();
    Load_RegisterStructMemberSize("GfxWorldDraw", 0x2C03E65Du, "GfxWorldLightmapReindexData", 0xD0E11692, "lightmapReindexData", 0x54A6A17Fu, 0xA8ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxWorldLightmapReindexData();
    Load_RegisterStructMemberSize("GfxWorldDraw", 0x2C03E65Du, "GfxImagePtr", 0x4A325366u, "iesLookupTexture", 0x3AB6BCECu, 0xC8ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxImagePtr();
    Load_RegisterStructMemberSize("GfxWorldDraw", 0x2C03E65Du, "uint", 0x53A932A0u, "decalVolumeVersion", 0x87B1ECDB, 0xD0ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorldDraw", 0x2C03E65Du, "uint", 0x53A932A0u, "decalVolumeReserved0", 0x1FCD62B7u, 0xD4ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorldDraw", 0x2C03E65Du, "uint", 0x53A932A0u, "decalVolumeReserved1", 0x1FCD62B6u, 0xD8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorldDraw", 0x2C03E65Du, "uint", 0x53A932A0u, "decalVolumeReserved2", 0x1FCD62B5u, 0xDCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorldDraw", 0x2C03E65Du, "uint", 0x53A932A0u, "decalVolumeMaterialCount", 0x5683F5B7u, 0xE0ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorldDraw", 0x2C03E65Du, "uint", 0x53A932A0u, "decalVolumeMaskCount", 0x7FBA1FAEu, 0xE4ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorldDraw", 0x2C03E65Du, "uint", 0x53A932A0u, "mapDecalVolumeCount", 0x3F101E44u, 0xE8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorldDraw", 0x2C03E65Du, "uint", 0x53A932A0u, "decalVolumeCollectionCount", 0xC9110502, 0xECui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorldDraw", 0x2C03E65Du, "GfxStaticDecalVolumeMaterial", 0xB050BE3F, "decalVolumeMaterials", 0xAF27D5B5, 0xF0ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("GfxStaticDecalVolumeMaterial", 0xB050BE3F, 8ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("GfxStaticDecalVolumeMaterial", 0xB050BE3F, "MaterialHandle", 0x2FCF718Du, "material", 0xB1102FC3, 0i64, 8ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_MaterialHandle();
    }
    Load_RegisterStructMemberSize("GfxWorldDraw", 0x2C03E65Du, "GfxStaticDecalVolumeMask", 0x74384FDCu, "decalVolumeMasks", 0x50BF4388u, 0xF8ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("GfxStaticDecalVolumeMask", 0x74384FDCu, 8ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("GfxStaticDecalVolumeMask", 0x74384FDCu, "GfxDecalVolumeMaskPtr", 0x887F6FD8, "blendMapOverride", 0xBD6DA3C1, 0i64, 8ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_GfxDecalVolumeMaskPtr();
    }
    Load_RegisterStructMemberSize("GfxWorldDraw", 0x2C03E65Du, "GfxDecalVolumeCollection", 0x1DC0CB2u, "decalVolumeCollections", 0xA1342E0C, 0x100ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("GfxDecalVolumeCollection", 0x1DC0CB2u, 8ui64, 4ui64) )
    {
      Load_RegisterStructMemberSize("GfxDecalVolumeCollection", 0x1DC0CB2u, "ushort", 0xB7BE387D, "transientZoneIndex", 0x4E561784u, 0i64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ushort();
      Load_RegisterStructMemberSize("GfxDecalVolumeCollection", 0x1DC0CB2u, "ushort", 0xB7BE387D, "decalCount", 0x9195080C, 2ui64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ushort();
      Load_RegisterStructMemberSize("GfxDecalVolumeCollection", 0x1DC0CB2u, "uint", 0x53A932A0u, "firstZoneDecal", 0x68B211F7u, 4ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
    }
    Load_RegisterStructMemberSize("GfxWorldDraw", 0x2C03E65Du, "uint", 0x53A932A0u, "materialAndMaskIndirection", 0xCE9F49Eu, 0x108ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorldDraw", 0x2C03E65Du, "GfxWrappedBuffer", 0xF87B73BE, "materialAndMaskIndirectionBuffer", 0x34B9854Cu, 0x110ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxWrappedBuffer();
    Load_RegisterStructMemberSize("GfxWorldDraw", 0x2C03E65Du, "GfxLightGridType", 0xA77BD04B, "lightGridType", 0xE919D834, 0x130ui64, 1ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("GfxLightGridType", 0xA77BD04B, 1ui64, 1ui64) )
    {
      Load_RegisterStructMemberSize("GfxLightGridType", 0xA77BD04B, "byte", 0x363F8F7Eu, (const char *)&queryFormat.fmt + 3, 0, 0i64, 1ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_byte();
    }
    Load_RegisterStructMemberSize("GfxWorldDraw", 0x2C03E65Du, "GfxLightmapType", 0x46DF815Bu, "lightmapType", 0x26FB313Eu, 0x134ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxLightmapType();
    Load_RegisterStructMemberSize("GfxWorldDraw", 0x2C03E65Du, "int", 0x7103F94Bu, "lightmapCount", 0x1829B02Bu, 0x138ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("GfxWorldDraw", 0x2C03E65Du, "uint", 0x53A932A0u, "transientZoneCount", 0xCFF6A565, 0x13Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorldDraw", 0x2C03E65Du, "GfxWorldTransientZonePtr", 0xF60A7D9D, "transientZones", 0x1A6275C3u, 0x140ui64, 0x3000ui64, 0x600ui64, 0, 0);
    if ( Load_RegisterStructSize("GfxWorldTransientZonePtr", 0xF60A7D9D, 8ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("GfxWorldTransientZonePtr", 0xF60A7D9D, "GfxWorldTransientZone", 0xD61C2B29, (const char *)&queryFormat.fmt + 3, 0, 0i64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_GfxWorldTransientZone();
    }
    Load_RegisterStructMemberSize("GfxWorldDraw", 0x2C03E65Du, "uint", 0x53A932A0u, "lightmapTransientIndex", 0x49140B10u, 0x3140ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorldDraw", 0x2C03E65Du, "uint", 0x53A932A0u, "displacementParmsCount", 0x3234803Fu, 0x3148ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorldDraw", 0x2C03E65Du, "GfxDisplacementParms", 0xE87B49F9, "displacementParms", 0x4041BBAu, 0x3150ui64, 8ui64, 0i64, 1, 0);
    Load_RegisterStructSize("GfxDisplacementParms", 0xE87B49F9, 0x10ui64, 0x40ui64);
    Load_RegisterStructMemberSize("GfxWorldDraw", 0x2C03E65Du, "GfxVertexBuffer", 0xEAAA51B9, "displacementParmsBuffer", 0xD64082A8, 0x3158ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxVertexBuffer();
    Load_RegisterStructMemberSize("GfxWorldDraw", 0x2C03E65Du, "GfxShaderBufferView", 0x12892AF3u, "displacementParmsView", 0xBF059355, 0x3160ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxShaderBufferView();
    Load_RegisterStructMemberSize("GfxWorldDraw", 0x2C03E65Du, "GfxWorldVolumetrics", 0x2B9BB6C6u, "volumetrics", 0xC7E3922B, 0x3170ui64, 0x18ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxWorldVolumetrics();
    Load_RegisterStructMemberSize("GfxWorldDraw", 0x2C03E65Du, "float", 0x9B987AFE, "bakedLightScale", 0x269720CBu, 0x3188ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("GfxWorldDraw", 0x2C03E65Du, "uint", 0x53A932A0u, "compressedSunShadowSize", 0xF4454F6C, 0x318Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorldDraw", 0x2C03E65Du, "byte", 0x363F8F7Eu, "compressedSunShadow", 0xD57A0B7F, 0x3190ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_byte();
    Load_RegisterStructMemberSize("GfxWorldDraw", 0x2C03E65Du, "GfxWrappedRWBuffer", 0xE696E573, "compressedSunShadowBuffer", 0xB1DBFF31, 0x3198ui64, 0x38ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxWrappedRWBuffer();
    Load_RegisterStructMemberSize("GfxWorldDraw", 0x2C03E65Du, "GfxCompressedSunShadowParams", 0xD9B9BCA6, "compressedSunShadowParams", 0xB6A1F1E9, 0x31D0ui64, 0x30ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxCompressedSunShadowParams();
  }
}

/*
==============
Load_ProcessStructLayout_GfxWorldDrawCells
==============
*/
void Load_ProcessStructLayout_GfxWorldDrawCells(void)
{
  if ( Load_RegisterStructSize("GfxWorldDrawCells", 0x1DDE38u, 0x18ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("GfxWorldDrawCells", 0x1DDE38u, "uint", 0x53A932A0u, "cellCount", 0x1D0DF61u, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorldDrawCells", 0x1DDE38u, "GfxCellTreeCount", 0xE6703966, "aabbTreeCounts", 0x5E92B4F6u, 8ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("GfxCellTreeCount", 0xE6703966, 4ui64, 4ui64) )
    {
      Load_RegisterStructMemberSize("GfxCellTreeCount", 0xE6703966, "int", 0x7103F94Bu, "aabbTreeCount", 0xC4D2A087, 0i64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_int();
    }
    Load_RegisterStructMemberSize("GfxWorldDrawCells", 0x1DDE38u, "GfxCellTree", 0xC0284CE1, "aabbTrees", 0xBDF202A5, 0x10ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("GfxCellTree", 0xC0284CE1, 8ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("GfxCellTree", 0xC0284CE1, "GfxAabbTree", 0x5B3B8A67u, "aabbTree", 0x52B08F92u, 0i64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_GfxAabbTree();
    }
  }
}

/*
==============
Load_ProcessStructLayout_GfxWorldLightmapImagePtrArray
==============
*/
void Load_ProcessStructLayout_GfxWorldLightmapImagePtrArray(void)
{
  if ( Load_RegisterStructSize("GfxWorldLightmapImagePtrArray", 0xCC10BA61, 0x18ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("GfxWorldLightmapImagePtrArray", 0xCC10BA61, "opaque_ptr", 0x51F7ADDAu, "images", 0x6904236Eu, 0i64, 0x18ui64, 3ui64, 0, 0);
    Load_ProcessStructLayout_opaque_ptr();
  }
}

/*
==============
Load_ProcessStructLayout_GfxWorldLightmapReindexData
==============
*/
void Load_ProcessStructLayout_GfxWorldLightmapReindexData(void)
{
  if ( Load_RegisterStructSize("GfxWorldLightmapReindexData", 0xD0E11692, 0x20ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("GfxWorldLightmapReindexData", 0xD0E11692, "uint", 0x53A932A0u, "imagePixelSize", 0xC35A33A2, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorldLightmapReindexData", 0xD0E11692, "uint", 0x53A932A0u, "reindexCount", 0x938F1BE2, 4ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorldLightmapReindexData", 0xD0E11692, "GfxWorldLightmapReindexDataElement", 0xE540025A, "reindexElement", 0x9DC939Bu, 8ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("GfxWorldLightmapReindexDataElement", 0xE540025A, 0x14ui64, 4ui64) )
    {
      Load_RegisterStructMemberSize("GfxWorldLightmapReindexDataElement", 0xE540025A, "uint", 0x53A932A0u, "index", 0x972C76D4, 0i64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("GfxWorldLightmapReindexDataElement", 0xE540025A, "uint", 0x53A932A0u, "posX", 0x2FC49CA2u, 4ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("GfxWorldLightmapReindexDataElement", 0xE540025A, "uint", 0x53A932A0u, "posY", 0x2FC49CA3u, 8ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("GfxWorldLightmapReindexDataElement", 0xE540025A, "uint", 0x53A932A0u, "width", 0x5B121D64u, 0xCui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("GfxWorldLightmapReindexDataElement", 0xE540025A, "uint", 0x53A932A0u, "height", 0x871BE999, 0x10ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
    }
    Load_RegisterStructMemberSize("GfxWorldLightmapReindexData", 0xD0E11692, "uint", 0x53A932A0u, "packedLightmapCount", 0x1324EDF3u, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorldLightmapReindexData", 0xD0E11692, "GfxWorldPackedLightmap", 0x47B69E85u, "packedLightmap", 0x76AB5FF6u, 0x18ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("GfxWorldPackedLightmap", 0x47B69E85u, 8ui64, 4ui64) )
    {
      Load_RegisterStructMemberSize("GfxWorldPackedLightmap", 0x47B69E85u, "uint", 0x53A932A0u, "imageWidth", 0x7C2184BDu, 0i64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("GfxWorldPackedLightmap", 0x47B69E85u, "uint", 0x53A932A0u, "imageHeight", 0xABDF368E, 4ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
    }
  }
}

/*
==============
Load_ProcessStructLayout_GfxWorldLightmapReindexDataElement
==============
*/
void Load_ProcessStructLayout_GfxWorldLightmapReindexDataElement(void)
{
  if ( Load_RegisterStructSize("GfxWorldLightmapReindexDataElement", 0xE540025A, 0x14ui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("GfxWorldLightmapReindexDataElement", 0xE540025A, "uint", 0x53A932A0u, "index", 0x972C76D4, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorldLightmapReindexDataElement", 0xE540025A, "uint", 0x53A932A0u, "posX", 0x2FC49CA2u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorldLightmapReindexDataElement", 0xE540025A, "uint", 0x53A932A0u, "posY", 0x2FC49CA3u, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorldLightmapReindexDataElement", 0xE540025A, "uint", 0x53A932A0u, "width", 0x5B121D64u, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorldLightmapReindexDataElement", 0xE540025A, "uint", 0x53A932A0u, "height", 0x871BE999, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
  }
}

/*
==============
Load_ProcessStructLayout_GfxWorldPackedLightmap
==============
*/
void Load_ProcessStructLayout_GfxWorldPackedLightmap(void)
{
  if ( Load_RegisterStructSize("GfxWorldPackedLightmap", 0x47B69E85u, 8ui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("GfxWorldPackedLightmap", 0x47B69E85u, "uint", 0x53A932A0u, "imageWidth", 0x7C2184BDu, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorldPackedLightmap", 0x47B69E85u, "uint", 0x53A932A0u, "imageHeight", 0xABDF368E, 4ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
  }
}

/*
==============
Load_ProcessStructLayout_GfxWorldPtr
==============
*/
void Load_ProcessStructLayout_GfxWorldPtr(void)
{
  if ( Load_RegisterStructSize("GfxWorldPtr", 0xB0E5FC3F, 8ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("GfxWorldPtr", 0xB0E5FC3F, "GfxWorld", 0x8353D723, (const char *)&queryFormat.fmt + 3, 0, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_GfxWorld();
  }
}

/*
==============
Load_ProcessStructLayout_GfxWorldTransientZone
==============
*/
void Load_ProcessStructLayout_GfxWorldTransientZone(void)
{
  if ( Load_RegisterStructSize("GfxWorldTransientZone", 0xD61C2B29, 0x100ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("GfxWorldTransientZone", 0xD61C2B29, "XString", 0x6231894Bu, (const char *)&stru_143C9A1A4, 0x58737A51u, 0i64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("GfxWorldTransientZone", 0xD61C2B29, "uint", 0x53A932A0u, "transientZoneIndex", 0x4E561784u, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorldTransientZone", 0xD61C2B29, "GfxWorldDrawVerts", 0x8DF182Fu, "drawVerts", 0x5CFB725Eu, 0x10ui64, 0x80ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxWorldDrawVerts();
    Load_RegisterStructMemberSize("GfxWorldTransientZone", 0xD61C2B29, "GfxWorldDrawCells", 0x1DDE38u, "drawCells", 0xC5B8BC41, 0x90ui64, 0x18ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("GfxWorldDrawCells", 0x1DDE38u, 0x18ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("GfxWorldDrawCells", 0x1DDE38u, "uint", 0x53A932A0u, "cellCount", 0x1D0DF61u, 0i64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("GfxWorldDrawCells", 0x1DDE38u, "GfxCellTreeCount", 0xE6703966, "aabbTreeCounts", 0x5E92B4F6u, 8ui64, 8ui64, 0i64, 1, 0);
      if ( Load_RegisterStructSize("GfxCellTreeCount", 0xE6703966, 4ui64, 4ui64) )
      {
        Load_RegisterStructMemberSize("GfxCellTreeCount", 0xE6703966, "int", 0x7103F94Bu, "aabbTreeCount", 0xC4D2A087, 0i64, 4ui64, 0i64, 0, 0);
        Load_ProcessStructLayout_int();
      }
      Load_RegisterStructMemberSize("GfxWorldDrawCells", 0x1DDE38u, "GfxCellTree", 0xC0284CE1, "aabbTrees", 0xBDF202A5, 0x10ui64, 8ui64, 0i64, 1, 0);
      if ( Load_RegisterStructSize("GfxCellTree", 0xC0284CE1, 8ui64, 8ui64) )
      {
        Load_RegisterStructMemberSize("GfxCellTree", 0xC0284CE1, "GfxAabbTree", 0x5B3B8A67u, "aabbTree", 0x52B08F92u, 0i64, 8ui64, 0i64, 1, 0);
        Load_ProcessStructLayout_GfxAabbTree();
      }
    }
    Load_RegisterStructMemberSize("GfxWorldTransientZone", 0xD61C2B29, "GfxLightmapAtlasDataTempPtr", 0xD2391060, "tempLightmapData", 0x34AE8E84u, 0xA8ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxLightmapAtlasDataTempPtr();
    Load_RegisterStructMemberSize("GfxWorldTransientZone", 0xD61C2B29, "GfxGpuLightGridTransientData", 0x43DD69DBu, "gpuLightGrid", 0x46098C0Eu, 0xB0ui64, 0x28ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxGpuLightGridTransientData();
    Load_RegisterStructMemberSize("GfxWorldTransientZone", 0xD61C2B29, "GfxReflectionProbeTransientData", 0xEF435C82, "reflectionProbes", 0x26B2013Au, 0xD8ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_GfxReflectionProbeTransientData();
    Load_RegisterStructMemberSize("GfxWorldTransientZone", 0xD61C2B29, "uint", 0x53A932A0u, "collectionCount", 0x4E35E511u, 0xE0ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("GfxWorldTransientZone", 0xD61C2B29, "ushort", 0xB7BE387D, "collections", 0x7EB729EFu, 0xE8ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("GfxWorldTransientZone", 0xD61C2B29, "GfxDecalVolumeTransientData", 0x3D39AA40u, "decalVolumes", 0x2D2955ACu, 0xF0ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_GfxDecalVolumeTransientData();
    Load_RegisterStructMemberSize("GfxWorldTransientZone", 0xD61C2B29, "GfxCompressedSunShadowDataTempPtr", 0xA224445C, "compressedSunShadow", 0xD57A0B7F, 0xF8ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxCompressedSunShadowDataTempPtr();
  }
}

/*
==============
Load_ProcessStructLayout_GfxWorldTransientZonePtr
==============
*/
void Load_ProcessStructLayout_GfxWorldTransientZonePtr(void)
{
  if ( Load_RegisterStructSize("GfxWorldTransientZonePtr", 0xF60A7D9D, 8ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("GfxWorldTransientZonePtr", 0xF60A7D9D, "GfxWorldTransientZone", 0xD61C2B29, (const char *)&queryFormat.fmt + 3, 0, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_GfxWorldTransientZone();
  }
}

/*
==============
Load_ProcessStructLayout_LightGridVolumePackingParams
==============
*/
void Load_ProcessStructLayout_LightGridVolumePackingParams(void)
{
  if ( Load_RegisterStructSize("LightGridVolumePackingParams", 0x230A3CA5u, 0x20ui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("LightGridVolumePackingParams", 0x230A3CA5u, "vec3_t", 0x375A0610u, "m_uvScale", 0x9B385189, 0i64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("LightGridVolumePackingParams", 0x230A3CA5u, "byte", 0x363F8F7Eu, "m_volumeSize", 0x7CBFEB1u, 0xCui64, 3ui64, 3ui64, 0, 0);
    Load_ProcessStructLayout_byte();
    Load_RegisterStructMemberSize("LightGridVolumePackingParams", 0x230A3CA5u, "byte", 0x363F8F7Eu, "m_basisType", 0xCC3C1ACA, 0xFui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_byte();
    Load_RegisterStructMemberSize("LightGridVolumePackingParams", 0x230A3CA5u, "vec3_t", 0x375A0610u, "m_uvBias", 0x144893Eu, 0x10ui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("LightGridVolumePackingParams", 0x230A3CA5u, "uint", 0x53A932A0u, "m_firstStaticProbeIndex", 0x2B98CD8Eu, 0x1Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
  }
}

/*
==============
Load_ProcessStructLayout_LightGridVolumeTransformParams
==============
*/
void Load_ProcessStructLayout_LightGridVolumeTransformParams(void)
{
  if ( Load_RegisterStructSize("LightGridVolumeTransformParams", 0xCD7F1DAC, 0x40ui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("LightGridVolumeTransformParams", 0xCD7F1DAC, "vec4_t", 0x77673763u, "m_volumeTransform", 0xC8124756, 0i64, 0x30ui64, 3ui64, 0, 0);
    Load_ProcessStructLayout_vec4_t();
    Load_RegisterStructMemberSize("LightGridVolumeTransformParams", 0xCD7F1DAC, "uint", 0x53A932A0u, "m_historyEntryOrStaticFlags", 0xE6AE7F12, 0x30ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("LightGridVolumeTransformParams", 0xCD7F1DAC, "uint", 0x53A932A0u, "m_lastFrameHistoryEntryAndSetup", 0xA7544205, 0x34ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("LightGridVolumeTransformParams", 0xCD7F1DAC, "uint", 0x53A932A0u, "m_lodAndSamplingOffsetZ", 0x6CB89310u, 0x38ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("LightGridVolumeTransformParams", 0xCD7F1DAC, "uint", 0x53A932A0u, "m_samplingOffsetXY", 0x61B1B067u, 0x3Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
  }
}

/*
==============
Load_ProcessStructLayout_StaticModelIndex
==============
*/
void Load_ProcessStructLayout_StaticModelIndex(void)
{
  if ( Load_RegisterStructSize("StaticModelIndex", 0xE7F57E53, 2ui64, 2ui64) )
  {
    Load_RegisterStructMemberSize("StaticModelIndex", 0xE7F57E53, "ushort", 0xB7BE387D, (const char *)&queryFormat.fmt + 3, 0, 0i64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
  }
}

/*
==============
Load_ProcessStructLayout_UmbraGate
==============
*/
void Load_ProcessStructLayout_UmbraGate(void)
{
  if ( Load_RegisterStructSize("UmbraGate", 0x5E895842u, 0x20ui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("UmbraGate", 0x5E895842u, "uint", 0x53A932A0u, "objID", 0xC1B2A140, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("UmbraGate", 0x5E895842u, "Bounds", 0x1605EBBBu, "bounds", 0x704A7A5Bu, 4ui64, 0x18ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_Bounds();
    Load_RegisterStructMemberSize("UmbraGate", 0x5E895842u, "float", 0x9B987AFE, "closeDistance", 0x4ADDECF5u, 0x1Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
  }
}

/*
==============
Load_ProcessStructLayout_mnode_t
==============
*/
void Load_ProcessStructLayout_mnode_t(void)
{
  if ( Load_RegisterStructSize("mnode_t", 0x57753F6Cu, 4ui64, 2ui64) )
  {
    Load_RegisterStructMemberSize("mnode_t", 0x57753F6Cu, "ushort", 0xB7BE387D, "planeOrCellIndex", 0xD5A509E3, 0i64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("mnode_t", 0x57753F6Cu, "ushort", 0xB7BE387D, "rightChildOffset", 0x75290159u, 2ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
  }
}

/*
==============
Load_ProcessStructLayout_umbraTomePtr_t
==============
*/
void Load_ProcessStructLayout_umbraTomePtr_t(void)
{
  Load_RegisterStructSize("umbraTomePtr_t", 0x22107799u, 8ui64, 8ui64);
}

/*
==============
Load_StaticModelIndex
==============
*/
void Load_StaticModelIndex(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varStaticModelIndex, 2ui64);
}

/*
==============
Load_StaticModelIndexArray
==============
*/
void Load_StaticModelIndexArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varStaticModelIndex, 2 * count);
}

/*
==============
Load_StaticModelIndexStream
==============
*/
void Load_StaticModelIndexStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 11686, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varStaticModelIndex;
    do
    {
      Load_Stream(AtStart, pos, 2ui64);
      pos = g_streamPosGlob.pos;
      varStaticModelIndex = (unsigned __int16 *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_UmbraGate
==============
*/
void Load_UmbraGate(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varUmbraGate, 0x20ui64);
}

/*
==============
Load_UmbraGateArray
==============
*/
void Load_UmbraGateArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varUmbraGate, 32 * count);
}

/*
==============
Load_UmbraGateStream
==============
*/
void Load_UmbraGateStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 25960, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varUmbraGate;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      pos = g_streamPosGlob.pos;
      varUmbraGate = (UmbraGate *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_mnode_t
==============
*/
void Load_mnode_t(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varmnode_t, 4ui64);
}

/*
==============
Load_mnode_tArray
==============
*/
void Load_mnode_tArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varmnode_t, 4 * count);
}

/*
==============
Load_mnode_tStream
==============
*/
void Load_mnode_tStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 11609, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varmnode_t;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varmnode_t = (mnode_t *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_umbraTomePtr_t
==============
*/
void Load_umbraTomePtr_t(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varumbraTomePtr_t, 8ui64);
}

/*
==============
Load_umbraTomePtr_tArray
==============
*/
void Load_umbraTomePtr_tArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varumbraTomePtr_t, 8 * count);
}

/*
==============
Load_umbraTomePtr_tStream
==============
*/
void Load_umbraTomePtr_tStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 11431, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varumbraTomePtr_t;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      pos = g_streamPosGlob.pos;
      varumbraTomePtr_t = (Umbra::Tome **)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Mark_BspVersion
==============
*/
__int64 Mark_BspVersion()
{
  return 1i64;
}

/*
==============
Mark_BspVersionArray
==============
*/
__int64 Mark_BspVersionArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_DpvsPlane
==============
*/
__int64 Mark_DpvsPlane()
{
  return 1i64;
}

/*
==============
Mark_DpvsPlaneArray
==============
*/
__int64 Mark_DpvsPlaneArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxAabbTree
==============
*/
__int64 Mark_GfxAabbTree()
{
  return 1i64;
}

/*
==============
Mark_GfxAabbTreeArray
==============
*/
__int64 Mark_GfxAabbTreeArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxCell
==============
*/
__int64 Mark_GfxCell()
{
  return 1i64;
}

/*
==============
Mark_GfxCellArray
==============
*/
__int64 Mark_GfxCellArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxCellTransientInfo
==============
*/
__int64 Mark_GfxCellTransientInfo()
{
  return 1i64;
}

/*
==============
Mark_GfxCellTransientInfoArray
==============
*/
__int64 Mark_GfxCellTransientInfoArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxCellTree
==============
*/
__int64 Mark_GfxCellTree()
{
  return 1i64;
}

/*
==============
Mark_GfxCellTreeArray
==============
*/
__int64 Mark_GfxCellTreeArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxCellTreeCount
==============
*/
__int64 Mark_GfxCellTreeCount()
{
  return 1i64;
}

/*
==============
Mark_GfxCellTreeCountArray
==============
*/
__int64 Mark_GfxCellTreeCountArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxCompressedSunShadowDataTemp
==============
*/
__int64 Mark_GfxCompressedSunShadowDataTemp()
{
  return 1i64;
}

/*
==============
Mark_GfxCompressedSunShadowDataTempArray
==============
*/
__int64 Mark_GfxCompressedSunShadowDataTempArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxCompressedSunShadowDataTempPtr
==============
*/
__int64 Mark_GfxCompressedSunShadowDataTempPtr()
{
  return 1i64;
}

/*
==============
Mark_GfxCompressedSunShadowDataTempPtrArray
==============
*/
__int64 Mark_GfxCompressedSunShadowDataTempPtrArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxCompressedSunShadowParams
==============
*/
__int64 Mark_GfxCompressedSunShadowParams()
{
  return 1i64;
}

/*
==============
Mark_GfxCompressedSunShadowParamsArray
==============
*/
__int64 Mark_GfxCompressedSunShadowParamsArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxDecalVolumeCollection
==============
*/
__int64 Mark_GfxDecalVolumeCollection()
{
  return 1i64;
}

/*
==============
Mark_GfxDecalVolumeCollectionArray
==============
*/
__int64 Mark_GfxDecalVolumeCollectionArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxDecalVolumeTransientData
==============
*/
__int64 Mark_GfxDecalVolumeTransientData()
{
  return 1i64;
}

/*
==============
Mark_GfxDecalVolumeTransientDataArray
==============
*/
__int64 Mark_GfxDecalVolumeTransientDataArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxDisplacementParms
==============
*/
__int64 Mark_GfxDisplacementParms()
{
  return 1i64;
}

/*
==============
Mark_GfxDisplacementParmsArray
==============
*/
__int64 Mark_GfxDisplacementParmsArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxDrawSurf
==============
*/
__int64 Mark_GfxDrawSurf()
{
  return 1i64;
}

/*
==============
Mark_GfxDrawSurfArray
==============
*/
__int64 Mark_GfxDrawSurfArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxDynamicLightset
==============
*/
__int64 Mark_GfxDynamicLightset()
{
  return 1i64;
}

/*
==============
Mark_GfxDynamicLightsetArray
==============
*/
__int64 Mark_GfxDynamicLightsetArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxDynamicLightsetBFData
==============
*/
__int64 Mark_GfxDynamicLightsetBFData()
{
  return 1i64;
}

/*
==============
Mark_GfxDynamicLightsetBFDataArray
==============
*/
__int64 Mark_GfxDynamicLightsetBFDataArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxDynamicLightsetBFType
==============
*/
__int64 Mark_GfxDynamicLightsetBFType()
{
  return 1i64;
}

/*
==============
Mark_GfxDynamicLightsetBFTypeArray
==============
*/
__int64 Mark_GfxDynamicLightsetBFTypeArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxDynamicLightsetGChunk
==============
*/
__int64 Mark_GfxDynamicLightsetGChunk()
{
  return 1i64;
}

/*
==============
Mark_GfxDynamicLightsetGChunkArray
==============
*/
__int64 Mark_GfxDynamicLightsetGChunkArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxDynamicLightsetGChunkFlags
==============
*/
__int64 Mark_GfxDynamicLightsetGChunkFlags()
{
  return 1i64;
}

/*
==============
Mark_GfxDynamicLightsetGChunkFlagsArray
==============
*/
__int64 Mark_GfxDynamicLightsetGChunkFlagsArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxDynamicLightsetGChunkInfo
==============
*/
__int64 Mark_GfxDynamicLightsetGChunkInfo()
{
  return 1i64;
}

/*
==============
Mark_GfxDynamicLightsetGChunkInfoArray
==============
*/
__int64 Mark_GfxDynamicLightsetGChunkInfoArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxDynamicLightsetLGppZoneInfo
==============
*/
__int64 Mark_GfxDynamicLightsetLGppZoneInfo()
{
  return 1i64;
}

/*
==============
Mark_GfxDynamicLightsetLGppZoneInfoArray
==============
*/
__int64 Mark_GfxDynamicLightsetLGppZoneInfoArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxDynamicLightsetLMData
==============
*/
__int64 Mark_GfxDynamicLightsetLMData()
{
  return 1i64;
}

/*
==============
Mark_GfxDynamicLightsetLMDataArray
==============
*/
__int64 Mark_GfxDynamicLightsetLMDataArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxDynamicLightsetLightInfo
==============
*/
__int64 Mark_GfxDynamicLightsetLightInfo()
{
  return 1i64;
}

/*
==============
Mark_GfxDynamicLightsetLightInfoArray
==============
*/
__int64 Mark_GfxDynamicLightsetLightInfoArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxDynamicLightsetPortalGIData
==============
*/
__int64 Mark_GfxDynamicLightsetPortalGIData()
{
  return 1i64;
}

/*
==============
Mark_GfxDynamicLightsetPortalGIDataArray
==============
*/
__int64 Mark_GfxDynamicLightsetPortalGIDataArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxDynamicLightsetProbeData
==============
*/
__int64 Mark_GfxDynamicLightsetProbeData()
{
  return 1i64;
}

/*
==============
Mark_GfxDynamicLightsetProbeDataArray
==============
*/
__int64 Mark_GfxDynamicLightsetProbeDataArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxDynamicLightsetProductGIData
==============
*/
__int64 Mark_GfxDynamicLightsetProductGIData()
{
  return 1i64;
}

/*
==============
Mark_GfxDynamicLightsetProductGIDataArray
==============
*/
__int64 Mark_GfxDynamicLightsetProductGIDataArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxFrustumLights
==============
*/
__int64 Mark_GfxFrustumLights()
{
  return 1i64;
}

/*
==============
Mark_GfxFrustumLightsArray
==============
*/
__int64 Mark_GfxFrustumLightsArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxGpuDynLightsetsLGVReference
==============
*/
__int64 Mark_GfxGpuDynLightsetsLGVReference()
{
  return 1i64;
}

/*
==============
Mark_GfxGpuDynLightsetsLGVReferenceArray
==============
*/
__int64 Mark_GfxGpuDynLightsetsLGVReferenceArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxGpuLightGrid
==============
*/
__int64 Mark_GfxGpuLightGrid()
{
  return 1i64;
}

/*
==============
Mark_GfxGpuLightGridArray
==============
*/
__int64 Mark_GfxGpuLightGridArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxGpuLightGridTetrahedron
==============
*/
__int64 Mark_GfxGpuLightGridTetrahedron()
{
  return 1i64;
}

/*
==============
Mark_GfxGpuLightGridTetrahedronArray
==============
*/
__int64 Mark_GfxGpuLightGridTetrahedronArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxGpuLightGridTetrahedronNeighbors
==============
*/
__int64 Mark_GfxGpuLightGridTetrahedronNeighbors()
{
  return 1i64;
}

/*
==============
Mark_GfxGpuLightGridTetrahedronNeighborsArray
==============
*/
__int64 Mark_GfxGpuLightGridTetrahedronNeighborsArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxGpuLightGridTetrahedronVisibility
==============
*/
__int64 Mark_GfxGpuLightGridTetrahedronVisibility()
{
  return 1i64;
}

/*
==============
Mark_GfxGpuLightGridTetrahedronVisibilityArray
==============
*/
__int64 Mark_GfxGpuLightGridTetrahedronVisibilityArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxGpuLightGridTransientData
==============
*/
__int64 Mark_GfxGpuLightGridTransientData()
{
  return 1i64;
}

/*
==============
Mark_GfxGpuLightGridTransientDataArray
==============
*/
__int64 Mark_GfxGpuLightGridTransientDataArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxGpuLightGridVoxelStartTetrahedron
==============
*/
__int64 Mark_GfxGpuLightGridVoxelStartTetrahedron()
{
  return 1i64;
}

/*
==============
Mark_GfxGpuLightGridVoxelStartTetrahedronArray
==============
*/
__int64 Mark_GfxGpuLightGridVoxelStartTetrahedronArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxGpuLightGridVoxelTree
==============
*/
__int64 Mark_GfxGpuLightGridVoxelTree()
{
  return 1i64;
}

/*
==============
Mark_GfxGpuLightGridVoxelTreeArray
==============
*/
__int64 Mark_GfxGpuLightGridVoxelTreeArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxGpuLightGridZone
==============
*/
__int64 Mark_GfxGpuLightGridZone()
{
  return 1i64;
}

/*
==============
Mark_GfxGpuLightGridZoneArray
==============
*/
__int64 Mark_GfxGpuLightGridZoneArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxHeightfield
==============
*/
_BOOL8 Mark_GfxHeightfield()
{
  GfxImage **v0; 
  int v1; 

  v0 = marGfxImagePtr;
  marGfxImagePtr = &marGfxHeightfield->image;
  v1 = Mark_GfxImagePtr();
  marGfxImagePtr = v0;
  return v1 != 0;
}

/*
==============
Mark_GfxHeightfieldArray
==============
*/
__int64 Mark_GfxHeightfieldArray(const unsigned __int64 count)
{
  GfxHeightfield *v1; 
  __int64 v2; 
  GfxImage **v4; 
  int v5; 

  v1 = marGfxHeightfield;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marGfxImagePtr;
  while ( 1 )
  {
    marGfxHeightfield = v1;
    marGfxImagePtr = &v1->image;
    v5 = Mark_GfxImagePtr();
    marGfxImagePtr = v4;
    if ( !v5 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_GfxLightAABB
==============
*/
__int64 Mark_GfxLightAABB()
{
  return 1i64;
}

/*
==============
Mark_GfxLightAABBArray
==============
*/
__int64 Mark_GfxLightAABBArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxLightAABBNode
==============
*/
__int64 Mark_GfxLightAABBNode()
{
  return 1i64;
}

/*
==============
Mark_GfxLightAABBNodeArray
==============
*/
__int64 Mark_GfxLightAABBNodeArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxLightGridType
==============
*/
__int64 Mark_GfxLightGridType()
{
  return 1i64;
}

/*
==============
Mark_GfxLightGridTypeArray
==============
*/
__int64 Mark_GfxLightGridTypeArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxLightGridVolumeAtlasDataTemp
==============
*/
__int64 Mark_GfxLightGridVolumeAtlasDataTemp()
{
  return 1i64;
}

/*
==============
Mark_GfxLightGridVolumeAtlasDataTempArray
==============
*/
__int64 Mark_GfxLightGridVolumeAtlasDataTempArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxLightGridVolumeAtlasDataTempPtr
==============
*/
__int64 Mark_GfxLightGridVolumeAtlasDataTempPtr()
{
  return 1i64;
}

/*
==============
Mark_GfxLightGridVolumeAtlasDataTempPtrArray
==============
*/
__int64 Mark_GfxLightGridVolumeAtlasDataTempPtrArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxLightViewFrustum
==============
*/
__int64 Mark_GfxLightViewFrustum()
{
  return 1i64;
}

/*
==============
Mark_GfxLightViewFrustumArray
==============
*/
__int64 Mark_GfxLightViewFrustumArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxLightmapAtlasDataTemp
==============
*/
__int64 Mark_GfxLightmapAtlasDataTemp()
{
  return 1i64;
}

/*
==============
Mark_GfxLightmapAtlasDataTempArray
==============
*/
__int64 Mark_GfxLightmapAtlasDataTempArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxLightmapAtlasDataTempPtr
==============
*/
__int64 Mark_GfxLightmapAtlasDataTempPtr()
{
  return 1i64;
}

/*
==============
Mark_GfxLightmapAtlasDataTempPtrArray
==============
*/
__int64 Mark_GfxLightmapAtlasDataTempPtrArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxLightmapRaw
==============
*/
__int64 Mark_GfxLightmapRaw()
{
  return 1i64;
}

/*
==============
Mark_GfxLightmapRawArray
==============
*/
__int64 Mark_GfxLightmapRawArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxLightmapType
==============
*/
__int64 Mark_GfxLightmapType()
{
  return 1i64;
}

/*
==============
Mark_GfxLightmapTypeArray
==============
*/
__int64 Mark_GfxLightmapTypeArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxMapEntLookup
==============
*/
__int64 Mark_GfxMapEntLookup()
{
  return 1i64;
}

/*
==============
Mark_GfxMapEntLookupArray
==============
*/
__int64 Mark_GfxMapEntLookupArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxMayhemSelfVis
==============
*/
__int64 Mark_GfxMayhemSelfVis()
{
  return 1i64;
}

/*
==============
Mark_GfxMayhemSelfVisArray
==============
*/
__int64 Mark_GfxMayhemSelfVisArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxModelLightmapInst
==============
*/
__int64 Mark_GfxModelLightmapInst()
{
  return 1i64;
}

/*
==============
Mark_GfxModelLightmapInstArray
==============
*/
__int64 Mark_GfxModelLightmapInstArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxPortal
==============
*/
__int64 Mark_GfxPortal()
{
  return 1i64;
}

/*
==============
Mark_GfxPortalArray
==============
*/
__int64 Mark_GfxPortalArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxPrecomputedSkyIllumination
==============
*/
_BOOL8 Mark_GfxPrecomputedSkyIllumination()
{
  GfxImage **v0; 
  int v1; 
  _BOOL8 result; 

  v0 = marGfxImagePtr;
  marGfxImagePtr = &marGfxPrecomputedSkyIllumination->detailMask;
  if ( Mark_GfxImagePtr() && (marGfxImagePtr = &marGfxPrecomputedSkyIllumination->heightMap, Mark_GfxImagePtr()) && (marGfxImagePtr = &marGfxPrecomputedSkyIllumination->SVDCoefficient, Mark_GfxImagePtr()) )
  {
    marGfxImagePtr = &marGfxPrecomputedSkyIllumination->SVDBasis;
    v1 = Mark_GfxImagePtr();
    marGfxImagePtr = v0;
    return v1 != 0;
  }
  else
  {
    result = 0i64;
    marGfxImagePtr = v0;
  }
  return result;
}

/*
==============
Mark_GfxPrecomputedSkyIlluminationArray
==============
*/
__int64 Mark_GfxPrecomputedSkyIlluminationArray(const unsigned __int64 count)
{
  GfxPrecomputedSkyIllumination *v1; 
  __int64 v2; 
  GfxImage **v4; 

  v1 = marGfxPrecomputedSkyIllumination;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marGfxImagePtr;
  while ( 1 )
  {
    marGfxPrecomputedSkyIllumination = v1;
    marGfxImagePtr = &v1->detailMask;
    if ( !Mark_GfxImagePtr() )
      break;
    marGfxImagePtr = &marGfxPrecomputedSkyIllumination->heightMap;
    if ( !Mark_GfxImagePtr() )
      break;
    marGfxImagePtr = &marGfxPrecomputedSkyIllumination->SVDCoefficient;
    if ( !Mark_GfxImagePtr() )
      break;
    marGfxImagePtr = &marGfxPrecomputedSkyIllumination->SVDBasis;
    if ( !Mark_GfxImagePtr() )
      break;
    ++v1;
    marGfxImagePtr = v4;
    if ( ++v2 >= count )
      return 1i64;
  }
  marGfxImagePtr = v4;
  return 0i64;
}

/*
==============
Mark_GfxSHCompressedProbeData
==============
*/
__int64 Mark_GfxSHCompressedProbeData()
{
  return 1i64;
}

/*
==============
Mark_GfxSHCompressedProbeDataArray
==============
*/
__int64 Mark_GfxSHCompressedProbeDataArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxSHProbeData
==============
*/
__int64 Mark_GfxSHProbeData()
{
  return 1i64;
}

/*
==============
Mark_GfxSHProbeDataArray
==============
*/
__int64 Mark_GfxSHProbeDataArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxSceneDynBrush
==============
*/
__int64 Mark_GfxSceneDynBrush()
{
  return 1i64;
}

/*
==============
Mark_GfxSceneDynBrushArray
==============
*/
__int64 Mark_GfxSceneDynBrushArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxSceneDynModel
==============
*/
__int64 Mark_GfxSceneDynModel()
{
  return 1i64;
}

/*
==============
Mark_GfxSceneDynModelArray
==============
*/
__int64 Mark_GfxSceneDynModelArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxShadowGeometry
==============
*/
__int64 Mark_GfxShadowGeometry()
{
  return 1i64;
}

/*
==============
Mark_GfxShadowGeometryArray
==============
*/
__int64 Mark_GfxShadowGeometryArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxStaticDecalVolumeMask
==============
*/
_BOOL8 Mark_GfxStaticDecalVolumeMask()
{
  GfxDecalVolumeMask **v0; 
  int v1; 

  v0 = marGfxDecalVolumeMaskPtr;
  marGfxDecalVolumeMaskPtr = &marGfxStaticDecalVolumeMask->blendMapOverride;
  v1 = Mark_GfxDecalVolumeMaskPtr();
  marGfxDecalVolumeMaskPtr = v0;
  return v1 != 0;
}

/*
==============
Mark_GfxStaticDecalVolumeMaskArray
==============
*/
__int64 Mark_GfxStaticDecalVolumeMaskArray(const unsigned __int64 count)
{
  GfxStaticDecalVolumeMask *v1; 
  __int64 v2; 
  GfxDecalVolumeMask **v4; 
  int v5; 

  v1 = marGfxStaticDecalVolumeMask;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marGfxDecalVolumeMaskPtr;
  while ( 1 )
  {
    marGfxStaticDecalVolumeMask = v1;
    marGfxDecalVolumeMaskPtr = &v1->blendMapOverride;
    v5 = Mark_GfxDecalVolumeMaskPtr();
    marGfxDecalVolumeMaskPtr = v4;
    if ( !v5 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_GfxStaticDecalVolumeMaterial
==============
*/
_BOOL8 Mark_GfxStaticDecalVolumeMaterial()
{
  Material **v0; 
  int v1; 

  v0 = marMaterialHandle;
  marMaterialHandle = &marGfxStaticDecalVolumeMaterial->material;
  v1 = Mark_MaterialHandle();
  marMaterialHandle = v0;
  return v1 != 0;
}

/*
==============
Mark_GfxStaticDecalVolumeMaterialArray
==============
*/
__int64 Mark_GfxStaticDecalVolumeMaterialArray(const unsigned __int64 count)
{
  GfxStaticDecalVolumeMaterial *v1; 
  __int64 v2; 
  Material **v4; 
  int v5; 

  v1 = marGfxStaticDecalVolumeMaterial;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marMaterialHandle;
  while ( 1 )
  {
    marGfxStaticDecalVolumeMaterial = v1;
    marMaterialHandle = &v1->material;
    v5 = Mark_MaterialHandle();
    marMaterialHandle = v4;
    if ( !v5 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_GfxStaticDecalVolumePacked
==============
*/
__int64 Mark_GfxStaticDecalVolumePacked()
{
  return 1i64;
}

/*
==============
Mark_GfxStaticDecalVolumePackedArray
==============
*/
__int64 Mark_GfxStaticDecalVolumePackedArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxStaticDecalVolumeUid
==============
*/
__int64 Mark_GfxStaticDecalVolumeUid()
{
  return 1i64;
}

/*
==============
Mark_GfxStaticDecalVolumeUidArray
==============
*/
__int64 Mark_GfxStaticDecalVolumeUidArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxStaticModelLightGridVolume
==============
*/
__int64 Mark_GfxStaticModelLightGridVolume()
{
  return 1i64;
}

/*
==============
Mark_GfxStaticModelLightGridVolumeArray
==============
*/
__int64 Mark_GfxStaticModelLightGridVolumeArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxStaticModelLightGridVolumeFlags
==============
*/
__int64 Mark_GfxStaticModelLightGridVolumeFlags()
{
  return 1i64;
}

/*
==============
Mark_GfxStaticModelLightGridVolumeFlagsArray
==============
*/
__int64 Mark_GfxStaticModelLightGridVolumeFlagsArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxVoxelInternalNode
==============
*/
__int64 Mark_GfxVoxelInternalNode()
{
  return 1i64;
}

/*
==============
Mark_GfxVoxelInternalNodeArray
==============
*/
__int64 Mark_GfxVoxelInternalNodeArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxVoxelLeafNode
==============
*/
__int64 Mark_GfxVoxelLeafNode()
{
  return 1i64;
}

/*
==============
Mark_GfxVoxelLeafNodeArray
==============
*/
__int64 Mark_GfxVoxelLeafNodeArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxVoxelTopDownViewNode
==============
*/
__int64 Mark_GfxVoxelTopDownViewNode()
{
  return 1i64;
}

/*
==============
Mark_GfxVoxelTopDownViewNodeArray
==============
*/
__int64 Mark_GfxVoxelTopDownViewNodeArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxVoxelTree
==============
*/
__int64 Mark_GfxVoxelTree()
{
  return 1i64;
}

/*
==============
Mark_GfxVoxelTreeArray
==============
*/
__int64 Mark_GfxVoxelTreeArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxVoxelTreeHeader
==============
*/
__int64 Mark_GfxVoxelTreeHeader()
{
  return 1i64;
}

/*
==============
Mark_GfxVoxelTreeHeaderArray
==============
*/
__int64 Mark_GfxVoxelTreeHeaderArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxWorld
==============
*/
_BOOL8 Mark_GfxWorld()
{
  GfxWorldSurfaces *v0; 
  int v1; 
  GfxWorldStaticModels *v2; 
  int v3; 
  GfxWorldDraw *v4; 
  int v5; 
  GfxWorld *v6; 
  GfxHeightfield *heightfields; 
  GfxHeightfield *v8; 
  __int64 v9; 
  unsigned __int64 heightfieldCount; 
  GfxImage **v11; 
  int v12; 
  GfxPrecomputedSkyIllumination *v13; 
  int v14; 
  sunflare_t *v15; 
  int v16; 
  GfxImage **v17; 
  int v18; 
  Material **v19; 
  int v20; 
  GfxWorld *v21; 
  MdaoVolume *v22; 
  int v23; 
  StreamTree *v24; 
  int v25; 
  StreamTreeGrid *v26; 
  int v28; 

  v0 = marGfxWorldSurfaces;
  marGfxWorldSurfaces = &marGfxWorld->surfaces;
  v1 = Mark_GfxWorldSurfaces();
  marGfxWorldSurfaces = v0;
  if ( !v1 )
    return 0i64;
  v2 = marGfxWorldStaticModels;
  marGfxWorldStaticModels = &marGfxWorld->smodels;
  v3 = Mark_GfxWorldStaticModels();
  marGfxWorldStaticModels = v2;
  if ( !v3 )
    return 0i64;
  v4 = marGfxWorldDraw;
  marGfxWorldDraw = &marGfxWorld->draw;
  v5 = Mark_GfxWorldDraw();
  marGfxWorldDraw = v4;
  if ( !v5 )
    return 0i64;
  v6 = marGfxWorld;
  heightfields = marGfxWorld->heightfields;
  if ( heightfields )
  {
    v8 = marGfxHeightfield;
    v9 = 0i64;
    marGfxHeightfield = marGfxWorld->heightfields;
    heightfieldCount = marGfxWorld->heightfieldCount;
    if ( marGfxWorld->heightfieldCount )
    {
      v11 = marGfxImagePtr;
      while ( 1 )
      {
        marGfxHeightfield = heightfields;
        marGfxImagePtr = &heightfields->image;
        v12 = Mark_GfxImagePtr();
        marGfxImagePtr = v11;
        if ( !v12 )
          break;
        ++heightfields;
        if ( ++v9 >= heightfieldCount )
        {
          v6 = marGfxWorld;
          goto LABEL_10;
        }
      }
      marGfxHeightfield = v8;
      return 0i64;
    }
LABEL_10:
    marGfxHeightfield = v8;
  }
  v13 = marGfxPrecomputedSkyIllumination;
  marGfxPrecomputedSkyIllumination = &v6->precomputedSkyIllumination;
  v14 = Mark_GfxPrecomputedSkyIllumination();
  marGfxPrecomputedSkyIllumination = v13;
  if ( !v14 )
    return 0i64;
  v15 = marsunflare_t;
  marsunflare_t = &marGfxWorld->sun;
  v16 = Mark_sunflare_t();
  marsunflare_t = v15;
  if ( !v16 )
    return 0i64;
  v17 = marGfxImagePtr;
  marGfxImagePtr = &marGfxWorld->outdoorImage;
  v18 = Mark_GfxImagePtr();
  marGfxImagePtr = v17;
  if ( !v18 )
    return 0i64;
  v19 = marMaterialHandle;
  marMaterialHandle = &marGfxWorld->dustMaterial;
  v20 = Mark_MaterialHandle();
  marMaterialHandle = v19;
  if ( !v20 )
    return 0i64;
  v21 = marGfxWorld;
  if ( !marGfxWorld->mdaoVolumes )
    goto LABEL_18;
  v22 = marMdaoVolume;
  marMdaoVolume = marGfxWorld->mdaoVolumes;
  v23 = Mark_MdaoVolumeArray(marGfxWorld->mdaoVolumeCount);
  marMdaoVolume = v22;
  if ( !v23 )
    return 0i64;
  v21 = marGfxWorld;
LABEL_18:
  v24 = marStreamTree;
  marStreamTree = &v21->streamTree;
  v25 = Mark_StreamTree();
  marStreamTree = v24;
  if ( !v25 )
    return 0i64;
  v26 = marStreamTreeGrid;
  marStreamTreeGrid = &marGfxWorld->materialStreamTreeGrid;
  if ( !Mark_StreamTreeGrid() )
  {
    marStreamTreeGrid = v26;
    return 0i64;
  }
  marStreamTreeGrid = &marGfxWorld->xmodelStreamTreeGrid;
  v28 = Mark_StreamTreeGrid();
  marStreamTreeGrid = v26;
  return v28 != 0;
}

/*
==============
Mark_GfxWorldArray
==============
*/
__int64 Mark_GfxWorldArray(const unsigned __int64 count)
{
  GfxWorld *v1; 
  __int64 v2; 
  GfxWorldSurfaces *v4; 
  int v5; 
  GfxWorldStaticModels *v6; 
  int v7; 
  GfxWorldDraw *v8; 
  int v9; 
  GfxWorld *v10; 
  GfxHeightfield *heightfields; 
  GfxHeightfield *v12; 
  __int64 v13; 
  unsigned __int64 heightfieldCount; 
  GfxImage **v15; 
  int v16; 
  GfxPrecomputedSkyIllumination *v17; 
  int v18; 
  sunflare_t *v19; 
  int v20; 
  GfxImage **v21; 
  int v22; 
  Material **v23; 
  int v24; 
  GfxWorld *v25; 
  MdaoVolume *v26; 
  int v27; 
  StreamTree *v28; 
  int v29; 
  StreamTreeGrid *v30; 
  int v31; 

  v1 = marGfxWorld;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  while ( 1 )
  {
    v4 = marGfxWorldSurfaces;
    marGfxWorldSurfaces = &v1->surfaces;
    marGfxWorld = v1;
    v5 = Mark_GfxWorldSurfaces();
    marGfxWorldSurfaces = v4;
    if ( !v5 )
      return 0i64;
    v6 = marGfxWorldStaticModels;
    marGfxWorldStaticModels = &marGfxWorld->smodels;
    v7 = Mark_GfxWorldStaticModels();
    marGfxWorldStaticModels = v6;
    if ( !v7 )
      return 0i64;
    v8 = marGfxWorldDraw;
    marGfxWorldDraw = &marGfxWorld->draw;
    v9 = Mark_GfxWorldDraw();
    marGfxWorldDraw = v8;
    if ( !v9 )
      return 0i64;
    v10 = marGfxWorld;
    heightfields = marGfxWorld->heightfields;
    if ( heightfields )
      break;
LABEL_12:
    v17 = marGfxPrecomputedSkyIllumination;
    marGfxPrecomputedSkyIllumination = &v10->precomputedSkyIllumination;
    v18 = Mark_GfxPrecomputedSkyIllumination();
    marGfxPrecomputedSkyIllumination = v17;
    if ( !v18 )
      return 0i64;
    v19 = marsunflare_t;
    marsunflare_t = &marGfxWorld->sun;
    v20 = Mark_sunflare_t();
    marsunflare_t = v19;
    if ( !v20 )
      return 0i64;
    v21 = marGfxImagePtr;
    marGfxImagePtr = &marGfxWorld->outdoorImage;
    v22 = Mark_GfxImagePtr();
    marGfxImagePtr = v21;
    if ( !v22 )
      return 0i64;
    v23 = marMaterialHandle;
    marMaterialHandle = &marGfxWorld->dustMaterial;
    v24 = Mark_MaterialHandle();
    marMaterialHandle = v23;
    if ( !v24 )
      return 0i64;
    v25 = marGfxWorld;
    if ( marGfxWorld->mdaoVolumes )
    {
      v26 = marMdaoVolume;
      marMdaoVolume = marGfxWorld->mdaoVolumes;
      v27 = Mark_MdaoVolumeArray(marGfxWorld->mdaoVolumeCount);
      marMdaoVolume = v26;
      if ( !v27 )
        return 0i64;
      v25 = marGfxWorld;
    }
    v28 = marStreamTree;
    marStreamTree = &v25->streamTree;
    v29 = Mark_StreamTree();
    marStreamTree = v28;
    if ( !v29 )
      return 0i64;
    v30 = marStreamTreeGrid;
    marStreamTreeGrid = &marGfxWorld->materialStreamTreeGrid;
    if ( !Mark_StreamTreeGrid() )
    {
      marStreamTreeGrid = v30;
      return 0i64;
    }
    marStreamTreeGrid = &marGfxWorld->xmodelStreamTreeGrid;
    v31 = Mark_StreamTreeGrid();
    marStreamTreeGrid = v30;
    if ( !v31 )
      return 0i64;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  v12 = marGfxHeightfield;
  v13 = 0i64;
  marGfxHeightfield = marGfxWorld->heightfields;
  heightfieldCount = marGfxWorld->heightfieldCount;
  if ( !marGfxWorld->heightfieldCount )
  {
LABEL_11:
    marGfxHeightfield = v12;
    goto LABEL_12;
  }
  v15 = marGfxImagePtr;
  while ( 1 )
  {
    marGfxHeightfield = heightfields;
    marGfxImagePtr = &heightfields->image;
    v16 = Mark_GfxImagePtr();
    marGfxImagePtr = v15;
    if ( !v16 )
      break;
    ++heightfields;
    if ( ++v13 >= heightfieldCount )
    {
      v10 = marGfxWorld;
      goto LABEL_11;
    }
  }
  marGfxHeightfield = v12;
  return 0i64;
}

/*
==============
Mark_GfxWorldDpvsDynamic
==============
*/
__int64 Mark_GfxWorldDpvsDynamic()
{
  return 1i64;
}

/*
==============
Mark_GfxWorldDpvsDynamicArray
==============
*/
__int64 Mark_GfxWorldDpvsDynamicArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxWorldDpvsPlane
==============
*/
__int64 Mark_GfxWorldDpvsPlane()
{
  return 1i64;
}

/*
==============
Mark_GfxWorldDpvsPlaneArray
==============
*/
__int64 Mark_GfxWorldDpvsPlaneArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxWorldDpvsPlanes
==============
*/
__int64 Mark_GfxWorldDpvsPlanes()
{
  return 1i64;
}

/*
==============
Mark_GfxWorldDpvsPlanesArray
==============
*/
__int64 Mark_GfxWorldDpvsPlanesArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxWorldDpvsStatic
==============
*/
__int64 Mark_GfxWorldDpvsStatic()
{
  return 1i64;
}

/*
==============
Mark_GfxWorldDpvsStaticArray
==============
*/
__int64 Mark_GfxWorldDpvsStaticArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxWorldDraw
==============
*/
_BOOL8 Mark_GfxWorldDraw()
{
  GfxWorldReflectionProbeData *v0; 
  int v1; 
  GfxImage **v2; 
  int v3; 
  GfxWorldDraw *v4; 
  unsigned __int64 v5; 
  GfxStaticDecalVolumeMaterial *decalVolumeMaterials; 
  GfxStaticDecalVolumeMaterial *v7; 
  __int64 v8; 
  unsigned __int64 decalVolumeMaterialCount; 
  Material **v10; 
  int v11; 
  GfxStaticDecalVolumeMask *decalVolumeMasks; 
  GfxStaticDecalVolumeMask *v13; 
  __int64 v14; 
  unsigned __int64 decalVolumeMaskCount; 
  GfxDecalVolumeMask **v16; 
  int v17; 
  GfxWorldTransientZone **v18; 
  GfxWorldTransientZone **transientZones; 
  GfxWorldTransientZone *v20; 
  GfxWorldTransientZone *v21; 
  int v23; 
  GfxWorldVolumetrics *v24; 
  int v25; 

  v0 = marGfxWorldReflectionProbeData;
  marGfxWorldReflectionProbeData = &marGfxWorldDraw->reflectionProbeData;
  v1 = Mark_GfxWorldReflectionProbeData();
  marGfxWorldReflectionProbeData = v0;
  if ( !v1 )
    return 0i64;
  v2 = marGfxImagePtr;
  marGfxImagePtr = &marGfxWorldDraw->iesLookupTexture;
  v3 = Mark_GfxImagePtr();
  marGfxImagePtr = v2;
  if ( !v3 )
    return 0i64;
  v4 = marGfxWorldDraw;
  v5 = 0i64;
  decalVolumeMaterials = marGfxWorldDraw->decalVolumeMaterials;
  if ( decalVolumeMaterials )
  {
    v7 = marGfxStaticDecalVolumeMaterial;
    v8 = 0i64;
    marGfxStaticDecalVolumeMaterial = marGfxWorldDraw->decalVolumeMaterials;
    decalVolumeMaterialCount = marGfxWorldDraw->decalVolumeMaterialCount;
    if ( marGfxWorldDraw->decalVolumeMaterialCount )
    {
      v10 = marMaterialHandle;
      while ( 1 )
      {
        marGfxStaticDecalVolumeMaterial = decalVolumeMaterials;
        marMaterialHandle = &decalVolumeMaterials->material;
        v11 = Mark_MaterialHandle();
        marMaterialHandle = v10;
        if ( !v11 )
          break;
        ++decalVolumeMaterials;
        if ( ++v8 >= decalVolumeMaterialCount )
        {
          v4 = marGfxWorldDraw;
          goto LABEL_9;
        }
      }
      marGfxStaticDecalVolumeMaterial = v7;
      return 0i64;
    }
LABEL_9:
    marGfxStaticDecalVolumeMaterial = v7;
  }
  decalVolumeMasks = v4->decalVolumeMasks;
  if ( decalVolumeMasks )
  {
    v13 = marGfxStaticDecalVolumeMask;
    v14 = 0i64;
    marGfxStaticDecalVolumeMask = v4->decalVolumeMasks;
    decalVolumeMaskCount = v4->decalVolumeMaskCount;
    if ( v4->decalVolumeMaskCount )
    {
      v16 = marGfxDecalVolumeMaskPtr;
      while ( 1 )
      {
        marGfxStaticDecalVolumeMask = decalVolumeMasks;
        marGfxDecalVolumeMaskPtr = &decalVolumeMasks->blendMapOverride;
        v17 = Mark_GfxDecalVolumeMaskPtr();
        marGfxDecalVolumeMaskPtr = v16;
        if ( !v17 )
          break;
        ++decalVolumeMasks;
        if ( ++v14 >= decalVolumeMaskCount )
        {
          v4 = marGfxWorldDraw;
          goto LABEL_16;
        }
      }
      marGfxStaticDecalVolumeMask = v13;
      return 0i64;
    }
LABEL_16:
    marGfxStaticDecalVolumeMask = v13;
  }
  v18 = marGfxWorldTransientZonePtr;
  transientZones = v4->transientZones;
  v20 = marGfxWorldTransientZone;
  do
  {
    marGfxWorldTransientZonePtr = transientZones;
    v21 = *transientZones;
    if ( *transientZones )
    {
      marGfxWorldTransientZone = *transientZones;
      if ( Mark_GfxWorldTransientZoneAsset(v21, 0) )
      {
        marGfxWorldTransientZone = v20;
      }
      else
      {
        v23 = Mark_GfxWorldTransientZoneAsset(marGfxWorldTransientZone, 1);
        marGfxWorldTransientZone = v20;
        if ( !v23 )
        {
          marGfxWorldTransientZonePtr = v18;
          return 0i64;
        }
      }
    }
    ++transientZones;
    ++v5;
  }
  while ( v5 < 0x600 );
  v24 = marGfxWorldVolumetrics;
  marGfxWorldVolumetrics = &marGfxWorldDraw->volumetrics;
  marGfxWorldTransientZonePtr = v18;
  v25 = Mark_GfxWorldVolumetrics();
  marGfxWorldVolumetrics = v24;
  return v25 != 0;
}

/*
==============
Mark_GfxWorldDrawArray
==============
*/
__int64 Mark_GfxWorldDrawArray(const unsigned __int64 count)
{
  GfxWorldDraw *v1; 
  __int64 v2; 
  GfxWorldReflectionProbeData *v4; 
  int v5; 
  GfxImage **v6; 
  int v7; 
  GfxWorldDraw *v8; 
  GfxStaticDecalVolumeMaterial *decalVolumeMaterials; 
  GfxStaticDecalVolumeMaterial *v10; 
  __int64 v11; 
  unsigned __int64 decalVolumeMaterialCount; 
  Material **v13; 
  int v14; 
  GfxStaticDecalVolumeMask *decalVolumeMasks; 
  GfxStaticDecalVolumeMask *v16; 
  __int64 v17; 
  unsigned __int64 decalVolumeMaskCount; 
  GfxDecalVolumeMask **v19; 
  int v20; 
  GfxWorldTransientZone **v21; 
  GfxWorldTransientZone **transientZones; 
  GfxWorldTransientZone *v23; 
  unsigned __int64 i; 
  GfxWorldTransientZone *v25; 
  int v26; 
  GfxWorldVolumetrics *v27; 
  int v28; 

  v1 = marGfxWorldDraw;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  while ( 1 )
  {
    v4 = marGfxWorldReflectionProbeData;
    marGfxWorldReflectionProbeData = &v1->reflectionProbeData;
    marGfxWorldDraw = v1;
    v5 = Mark_GfxWorldReflectionProbeData();
    marGfxWorldReflectionProbeData = v4;
    if ( !v5 )
      return 0i64;
    v6 = marGfxImagePtr;
    marGfxImagePtr = &marGfxWorldDraw->iesLookupTexture;
    v7 = Mark_GfxImagePtr();
    marGfxImagePtr = v6;
    if ( !v7 )
      return 0i64;
    v8 = marGfxWorldDraw;
    decalVolumeMaterials = marGfxWorldDraw->decalVolumeMaterials;
    if ( decalVolumeMaterials )
      break;
LABEL_11:
    decalVolumeMasks = v8->decalVolumeMasks;
    if ( decalVolumeMasks )
    {
      v16 = marGfxStaticDecalVolumeMask;
      v17 = 0i64;
      marGfxStaticDecalVolumeMask = v8->decalVolumeMasks;
      decalVolumeMaskCount = v8->decalVolumeMaskCount;
      if ( v8->decalVolumeMaskCount )
      {
        v19 = marGfxDecalVolumeMaskPtr;
        while ( 1 )
        {
          marGfxStaticDecalVolumeMask = decalVolumeMasks;
          marGfxDecalVolumeMaskPtr = &decalVolumeMasks->blendMapOverride;
          v20 = Mark_GfxDecalVolumeMaskPtr();
          marGfxDecalVolumeMaskPtr = v19;
          if ( !v20 )
            break;
          ++decalVolumeMasks;
          if ( ++v17 >= decalVolumeMaskCount )
          {
            v8 = marGfxWorldDraw;
            goto LABEL_17;
          }
        }
        marGfxStaticDecalVolumeMask = v16;
        return 0i64;
      }
LABEL_17:
      marGfxStaticDecalVolumeMask = v16;
    }
    v21 = marGfxWorldTransientZonePtr;
    transientZones = v8->transientZones;
    v23 = marGfxWorldTransientZone;
    for ( i = 0i64; i < 0x600; ++i )
    {
      marGfxWorldTransientZonePtr = transientZones;
      v25 = *transientZones;
      if ( *transientZones )
      {
        marGfxWorldTransientZone = *transientZones;
        if ( Mark_GfxWorldTransientZoneAsset(v25, 0) )
        {
          marGfxWorldTransientZone = v23;
        }
        else
        {
          v26 = Mark_GfxWorldTransientZoneAsset(marGfxWorldTransientZone, 1);
          marGfxWorldTransientZone = v23;
          if ( !v26 )
          {
            marGfxWorldTransientZonePtr = v21;
            return 0i64;
          }
        }
      }
      ++transientZones;
    }
    v27 = marGfxWorldVolumetrics;
    marGfxWorldVolumetrics = &marGfxWorldDraw->volumetrics;
    marGfxWorldTransientZonePtr = v21;
    v28 = Mark_GfxWorldVolumetrics();
    marGfxWorldVolumetrics = v27;
    if ( !v28 )
      return 0i64;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  v10 = marGfxStaticDecalVolumeMaterial;
  v11 = 0i64;
  marGfxStaticDecalVolumeMaterial = marGfxWorldDraw->decalVolumeMaterials;
  decalVolumeMaterialCount = marGfxWorldDraw->decalVolumeMaterialCount;
  if ( !marGfxWorldDraw->decalVolumeMaterialCount )
  {
LABEL_10:
    marGfxStaticDecalVolumeMaterial = v10;
    goto LABEL_11;
  }
  v13 = marMaterialHandle;
  while ( 1 )
  {
    marGfxStaticDecalVolumeMaterial = decalVolumeMaterials;
    marMaterialHandle = &decalVolumeMaterials->material;
    v14 = Mark_MaterialHandle();
    marMaterialHandle = v13;
    if ( !v14 )
      break;
    ++decalVolumeMaterials;
    if ( ++v11 >= decalVolumeMaterialCount )
    {
      v8 = marGfxWorldDraw;
      goto LABEL_10;
    }
  }
  marGfxStaticDecalVolumeMaterial = v10;
  return 0i64;
}

/*
==============
Mark_GfxWorldDrawCells
==============
*/
__int64 Mark_GfxWorldDrawCells()
{
  return 1i64;
}

/*
==============
Mark_GfxWorldDrawCellsArray
==============
*/
__int64 Mark_GfxWorldDrawCellsArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxWorldLightmapImagePtrArray
==============
*/
__int64 Mark_GfxWorldLightmapImagePtrArray()
{
  return 1i64;
}

/*
==============
Mark_GfxWorldLightmapImagePtrArrayArray
==============
*/
__int64 Mark_GfxWorldLightmapImagePtrArrayArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxWorldLightmapReindexData
==============
*/
__int64 Mark_GfxWorldLightmapReindexData()
{
  return 1i64;
}

/*
==============
Mark_GfxWorldLightmapReindexDataArray
==============
*/
__int64 Mark_GfxWorldLightmapReindexDataArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxWorldLightmapReindexDataElement
==============
*/
__int64 Mark_GfxWorldLightmapReindexDataElement()
{
  return 1i64;
}

/*
==============
Mark_GfxWorldLightmapReindexDataElementArray
==============
*/
__int64 Mark_GfxWorldLightmapReindexDataElementArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxWorldPackedLightmap
==============
*/
__int64 Mark_GfxWorldPackedLightmap()
{
  return 1i64;
}

/*
==============
Mark_GfxWorldPackedLightmapArray
==============
*/
__int64 Mark_GfxWorldPackedLightmapArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxWorldPtr
==============
*/
__int64 Mark_GfxWorldPtr()
{
  GfxWorld *v0; 
  GfxWorld *v1; 
  int v3; 

  v0 = *marGfxWorldPtr;
  if ( *marGfxWorldPtr )
  {
    v1 = marGfxWorld;
    marGfxWorld = *marGfxWorldPtr;
    if ( Mark_GfxWorldAsset(v0, 0) )
    {
      marGfxWorld = v1;
      return 1i64;
    }
    if ( !Mark_GfxWorld() )
    {
      marGfxWorld = v1;
      return 0i64;
    }
    v3 = Mark_GfxWorldAsset(marGfxWorld, 1);
    marGfxWorld = v1;
    if ( !v3 )
      return 0i64;
  }
  return 1i64;
}

/*
==============
Mark_GfxWorldPtrArray
==============
*/
__int64 Mark_GfxWorldPtrArray(const unsigned __int64 count)
{
  GfxWorld **v1; 
  __int64 v2; 
  GfxWorld *v4; 
  GfxWorld *v5; 
  int v6; 

  v1 = marGfxWorldPtr;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marGfxWorld;
  while ( 1 )
  {
    marGfxWorldPtr = v1;
    v5 = *v1;
    if ( !*v1 )
      goto LABEL_8;
    marGfxWorld = *v1;
    if ( Mark_GfxWorldAsset(v5, 0) )
    {
      marGfxWorld = v4;
      goto LABEL_8;
    }
    if ( !Mark_GfxWorld() )
      break;
    v6 = Mark_GfxWorldAsset(marGfxWorld, 1);
    marGfxWorld = v4;
    if ( !v6 )
      return 0i64;
LABEL_8:
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  marGfxWorld = v4;
  return 0i64;
}

/*
==============
Mark_GfxWorldTransientZone
==============
*/
__int64 Mark_GfxWorldTransientZone()
{
  return 1i64;
}

/*
==============
Mark_GfxWorldTransientZoneArray
==============
*/
__int64 Mark_GfxWorldTransientZoneArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_GfxWorldTransientZonePtr
==============
*/
int Mark_GfxWorldTransientZonePtr()
{
  GfxWorldTransientZone *v0; 
  GfxWorldTransientZone *v1; 
  int result; 

  v0 = *marGfxWorldTransientZonePtr;
  if ( !*marGfxWorldTransientZonePtr )
    return 1;
  v1 = marGfxWorldTransientZone;
  marGfxWorldTransientZone = *marGfxWorldTransientZonePtr;
  if ( Mark_GfxWorldTransientZoneAsset(v0, 0) )
  {
    marGfxWorldTransientZone = v1;
    return 1;
  }
  result = Mark_GfxWorldTransientZoneAsset(marGfxWorldTransientZone, 1);
  marGfxWorldTransientZone = v1;
  if ( result )
    return 1;
  return result;
}

/*
==============
Mark_GfxWorldTransientZonePtrArray
==============
*/
__int64 Mark_GfxWorldTransientZonePtrArray(const unsigned __int64 count)
{
  GfxWorldTransientZone **v1; 
  __int64 v2; 
  GfxWorldTransientZone *v4; 
  GfxWorldTransientZone *v5; 
  int v6; 

  v1 = marGfxWorldTransientZonePtr;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marGfxWorldTransientZone;
  while ( 1 )
  {
    marGfxWorldTransientZonePtr = v1;
    v5 = *v1;
    if ( *v1 )
      break;
LABEL_7:
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  marGfxWorldTransientZone = *v1;
  if ( Mark_GfxWorldTransientZoneAsset(v5, 0) )
  {
    marGfxWorldTransientZone = v4;
    goto LABEL_7;
  }
  v6 = Mark_GfxWorldTransientZoneAsset(marGfxWorldTransientZone, 1);
  marGfxWorldTransientZone = v4;
  if ( v6 )
    goto LABEL_7;
  return 0i64;
}

/*
==============
Mark_LightGridVolumePackingParams
==============
*/
__int64 Mark_LightGridVolumePackingParams()
{
  return 1i64;
}

/*
==============
Mark_LightGridVolumePackingParamsArray
==============
*/
__int64 Mark_LightGridVolumePackingParamsArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_LightGridVolumeTransformParams
==============
*/
__int64 Mark_LightGridVolumeTransformParams()
{
  return 1i64;
}

/*
==============
Mark_LightGridVolumeTransformParamsArray
==============
*/
__int64 Mark_LightGridVolumeTransformParamsArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_StaticModelIndex
==============
*/
__int64 Mark_StaticModelIndex()
{
  return 1i64;
}

/*
==============
Mark_StaticModelIndexArray
==============
*/
__int64 Mark_StaticModelIndexArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_UmbraGate
==============
*/
__int64 Mark_UmbraGate()
{
  return 1i64;
}

/*
==============
Mark_UmbraGateArray
==============
*/
__int64 Mark_UmbraGateArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_mnode_t
==============
*/
__int64 Mark_mnode_t()
{
  return 1i64;
}

/*
==============
Mark_mnode_tArray
==============
*/
__int64 Mark_mnode_tArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_umbraTomePtr_t
==============
*/
__int64 Mark_umbraTomePtr_t()
{
  return 1i64;
}

/*
==============
Mark_umbraTomePtr_tArray
==============
*/
__int64 Mark_umbraTomePtr_tArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Postload_BspVersion
==============
*/
void Postload_BspVersion(const DBStreamStart streamStart)
{
  if ( streamStart != (varBspVersion != (BspVersion *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varBspVersion, 4ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(4ui64);
}

/*
==============
Postload_BspVersionArray
==============
*/
void Postload_BspVersionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varBspVersion, 4 * count);
}

/*
==============
Postload_BspVersionStream
==============
*/
void Postload_BspVersionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  BspVersion *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 46783, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varBspVersion;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (BspVersion *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 4ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(4ui64);
      pos = g_streamPosGlob.pos + 4;
      g_streamPosGlob.pos = pos;
      v3 = (BspVersion *)pos;
      varBspVersion = (BspVersion *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_DpvsPlane
==============
*/
void Postload_DpvsPlane(const DBStreamStart streamStart)
{
  if ( streamStart != (varDpvsPlane != (DpvsPlane *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varDpvsPlane, 0x10ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x10ui64);
}

/*
==============
Postload_DpvsPlaneArray
==============
*/
void Postload_DpvsPlaneArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varDpvsPlane, 16 * count);
}

/*
==============
Postload_DpvsPlaneStream
==============
*/
void Postload_DpvsPlaneStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  DpvsPlane *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 32184, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varDpvsPlane;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (DpvsPlane *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x10ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x10ui64);
      pos = g_streamPosGlob.pos + 16;
      g_streamPosGlob.pos = pos;
      v3 = (DpvsPlane *)pos;
      varDpvsPlane = (DpvsPlane *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxAabbTree
==============
*/
void Postload_GfxAabbTree(const DBStreamStart streamStart)
{
  GfxAabbTree *v2; 
  unsigned __int16 *smodelIndexes; 
  unsigned __int16 *v4; 
  unsigned __int64 v5; 

  if ( streamStart != (varGfxAabbTree != (GfxAabbTree *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxAabbTree, 0x30ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x30ui64);
  v2 = varGfxAabbTree;
  smodelIndexes = varGfxAabbTree->smodelIndexes;
  if ( smodelIndexes )
  {
    if ( smodelIndexes == (unsigned __int16 *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( smodelIndexes != (unsigned __int16 *)-2i64 )
    {
      v2->smodelIndexes = (unsigned __int16 *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varGfxAabbTree->smodelIndexes);
      return;
    }
    v4 = varStaticModelIndex;
    DB_PatchMem_FixStreamAlignment(1ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->smodelIndexes = (unsigned __int16 *)g_streamPosGlob.pos;
    varStaticModelIndex = (unsigned __int16 *)g_streamPosGlob.pos;
    v5 = 2i64 * varGfxAabbTree->smodelIndexCount;
    if ( v5 )
      DB_IncStreamPos(v5);
    varStaticModelIndex = v4;
    if ( smodelIndexes == (unsigned __int16 *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Postload_GfxAabbTreeArray
==============
*/
void Postload_GfxAabbTreeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxAabbTree *i; 

  v2 = count;
  Postload_Stream(streamStart, varGfxAabbTree, 48 * count);
  for ( i = varGfxAabbTree; v2; --v2 )
  {
    varGfxAabbTree = i;
    Postload_GfxAabbTree(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_GfxAabbTreeStream
==============
*/
void Postload_GfxAabbTreeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxAabbTree *v4; 
  unsigned __int16 *smodelIndexes; 
  unsigned __int16 *v6; 
  unsigned __int64 v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 32607, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxAabbTree;
    while ( 1 )
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x30ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x30ui64);
      g_streamPosGlob.pos += 48;
      v4 = varGfxAabbTree;
      smodelIndexes = varGfxAabbTree->smodelIndexes;
      if ( !smodelIndexes )
        goto LABEL_20;
      if ( smodelIndexes == (unsigned __int16 *)-1i64 )
        break;
      if ( smodelIndexes == (unsigned __int16 *)-2i64 )
        goto LABEL_16;
      v4->smodelIndexes = (unsigned __int16 *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varGfxAabbTree->smodelIndexes);
LABEL_20:
      pos = g_streamPosGlob.pos;
      varGfxAabbTree = (GfxAabbTree *)g_streamPosGlob.pos;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v6 = varStaticModelIndex;
    DB_PatchMem_FixStreamAlignment(1ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->smodelIndexes = (unsigned __int16 *)g_streamPosGlob.pos;
    varStaticModelIndex = (unsigned __int16 *)g_streamPosGlob.pos;
    v7 = 2i64 * varGfxAabbTree->smodelIndexCount;
    if ( v7 )
      DB_IncStreamPos(v7);
    varStaticModelIndex = v6;
    if ( smodelIndexes == (unsigned __int16 *)-1i64 )
      DB_PopSharedData();
    goto LABEL_20;
  }
}

/*
==============
Postload_GfxCell
==============
*/
void Postload_GfxCell(const DBStreamStart streamStart)
{
  GfxCell *v2; 
  GfxPortal *v3; 
  __int64 portalCount; 
  GfxPortal *i; 
  GfxPortal *v6; 
  vec3_t *v7; 
  vec3_t *v8; 

  if ( streamStart != (varGfxCell != (GfxCell *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxCell, 0x28ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x28ui64);
  v2 = varGfxCell;
  if ( varGfxCell->portals )
  {
    v3 = varGfxPortal;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->portals = (GfxPortal *)g_streamPosGlob.pos;
    varGfxPortal = (GfxPortal *)g_streamPosGlob.pos;
    portalCount = varGfxCell->portalCount;
    if ( 80 * portalCount )
      DB_IncStreamPos(80 * portalCount);
    for ( i = varGfxPortal; portalCount; --portalCount )
    {
      v6 = i;
      varGfxPortal = i;
      if ( i == (GfxPortal *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x50ui64);
        v6 = varGfxPortal;
      }
      if ( v6->vertices )
      {
        v7 = varvec3_t;
        v8 = AllocPostload_vec3_t();
        v6->vertices = v8;
        varvec3_t = v8;
        Postload_vec3_tArray(AtStart, varGfxPortal->vertexCount);
        varvec3_t = v7;
      }
      ++i;
    }
    varGfxPortal = v3;
  }
}

/*
==============
Postload_GfxCellArray
==============
*/
void Postload_GfxCellArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxCell *i; 

  v2 = count;
  Postload_Stream(streamStart, varGfxCell, 40 * count);
  for ( i = varGfxCell; v2; --v2 )
  {
    varGfxCell = i;
    Postload_GfxCell(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_GfxCellStream
==============
*/
void Postload_GfxCellStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxCell *v4; 
  GfxPortal *v5; 
  __int64 portalCount; 
  GfxPortal *i; 
  GfxPortal *v8; 
  vec3_t *v9; 
  vec3_t *v10; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 33042, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxCell;
    do
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x28ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x28ui64);
      v4 = varGfxCell;
      g_streamPosGlob.pos += 40;
      if ( varGfxCell->portals )
      {
        v5 = varGfxPortal;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->portals = (GfxPortal *)g_streamPosGlob.pos;
        varGfxPortal = (GfxPortal *)g_streamPosGlob.pos;
        portalCount = varGfxCell->portalCount;
        if ( 80 * portalCount )
          DB_IncStreamPos(80 * portalCount);
        for ( i = varGfxPortal; portalCount; --portalCount )
        {
          v8 = i;
          varGfxPortal = i;
          if ( i == (GfxPortal *)g_streamPosGlob.pos )
          {
            DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x50ui64);
            v8 = varGfxPortal;
          }
          if ( v8->vertices )
          {
            v9 = varvec3_t;
            v10 = AllocPostload_vec3_t();
            v8->vertices = v10;
            varvec3_t = v10;
            Postload_vec3_tArray(AtStart, varGfxPortal->vertexCount);
            varvec3_t = v9;
          }
          ++i;
        }
        varGfxPortal = v5;
      }
      pos = g_streamPosGlob.pos;
      varGfxCell = (GfxCell *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxCellTransientInfo
==============
*/
void Postload_GfxCellTransientInfo(const DBStreamStart streamStart)
{
  if ( streamStart != (varGfxCellTransientInfo != (GfxCellTransientInfo *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxCellTransientInfo, 4ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(4ui64);
}

/*
==============
Postload_GfxCellTransientInfoArray
==============
*/
void Postload_GfxCellTransientInfoArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varGfxCellTransientInfo, 4 * count);
}

/*
==============
Postload_GfxCellTransientInfoStream
==============
*/
void Postload_GfxCellTransientInfoStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxCellTransientInfo *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 32916, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxCellTransientInfo;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (GfxCellTransientInfo *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 4ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(4ui64);
      pos = g_streamPosGlob.pos + 4;
      g_streamPosGlob.pos = pos;
      v3 = (GfxCellTransientInfo *)pos;
      varGfxCellTransientInfo = (GfxCellTransientInfo *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxCellTree
==============
*/
void Postload_GfxCellTree(const DBStreamStart streamStart)
{
  GfxCellTree *v2; 
  GfxAabbTree *v3; 
  unsigned __int8 *pos; 
  __int64 v5; 
  unsigned __int64 v6; 
  GfxAabbTree *i; 

  if ( streamStart != (varGfxCellTree != (GfxCellTree *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxCellTree, 8ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(8ui64);
  v2 = varGfxCellTree;
  if ( varGfxCellTree->aabbTree )
  {
    v3 = varGfxAabbTree;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->aabbTree = (GfxAabbTree *)g_streamPosGlob.pos;
    varGfxAabbTree = (GfxAabbTree *)g_streamPosGlob.pos;
    DB_PushStreamPos(2u);
    DB_AllocStreamPos(3ui64);
    pos = g_streamPosGlob.pos;
    if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
      __debugbreak();
    DB_CheckCanIncStreamPos(4ui64);
    g_streamPosGlob.pos += 4;
    DB_PopStreamPos();
    v5 = *(unsigned int *)pos;
    v6 = 48 * v5;
    if ( varGfxAabbTree != (GfxAabbTree *)g_streamPosGlob.pos )
      DB_PatchMem_ValidatePostloadStream(AtStart, varGfxAabbTree, 48 * v5);
    if ( v6 )
    {
      if ( v6 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(48 * v5);
    }
    for ( i = varGfxAabbTree; v5; --v5 )
    {
      varGfxAabbTree = i;
      Postload_GfxAabbTree(NotAtStart);
      ++i;
    }
    varGfxAabbTree = v3;
  }
}

/*
==============
Postload_GfxCellTreeArray
==============
*/
void Postload_GfxCellTreeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxCellTree *i; 

  v2 = count;
  Postload_Stream(streamStart, varGfxCellTree, 8 * count);
  for ( i = varGfxCellTree; v2; --v2 )
  {
    varGfxCellTree = i;
    Postload_GfxCellTree(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_GfxCellTreeCount
==============
*/
void Postload_GfxCellTreeCount(const DBStreamStart streamStart)
{
  if ( streamStart != (varGfxCellTreeCount != (GfxCellTreeCount *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxCellTreeCount, 4ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(4ui64);
}

/*
==============
Postload_GfxCellTreeCountArray
==============
*/
void Postload_GfxCellTreeCountArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varGfxCellTreeCount, 4 * count);
}

/*
==============
Postload_GfxCellTreeCountStream
==============
*/
void Postload_GfxCellTreeCountStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxCellTreeCount *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 32683, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxCellTreeCount;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (GfxCellTreeCount *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 4ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(4ui64);
      pos = g_streamPosGlob.pos + 4;
      g_streamPosGlob.pos = pos;
      v3 = (GfxCellTreeCount *)pos;
      varGfxCellTreeCount = (GfxCellTreeCount *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxCellTreeStream
==============
*/
void Postload_GfxCellTreeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  GfxCellTree *v4; 
  GfxAabbTree *v5; 
  unsigned __int8 *pos; 
  __int64 v7; 
  unsigned __int64 v8; 
  GfxAabbTree *i; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 32808, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varGfxCellTree;
    do
    {
      if ( v3 != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 8ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(8ui64);
      v4 = varGfxCellTree;
      g_streamPosGlob.pos += 8;
      if ( varGfxCellTree->aabbTree )
      {
        v5 = varGfxAabbTree;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->aabbTree = (GfxAabbTree *)g_streamPosGlob.pos;
        varGfxAabbTree = (GfxAabbTree *)g_streamPosGlob.pos;
        DB_PushStreamPos(2u);
        DB_AllocStreamPos(3ui64);
        pos = g_streamPosGlob.pos;
        if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
          __debugbreak();
        DB_CheckCanIncStreamPos(4ui64);
        g_streamPosGlob.pos += 4;
        DB_PopStreamPos();
        v7 = *(unsigned int *)pos;
        v8 = 48 * v7;
        if ( varGfxAabbTree != (GfxAabbTree *)g_streamPosGlob.pos )
          DB_PatchMem_ValidatePostloadStream(AtStart, varGfxAabbTree, 48 * v7);
        if ( v8 )
        {
          if ( v8 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
            __debugbreak();
          DB_IncStreamPos(48 * v7);
        }
        for ( i = varGfxAabbTree; v7; --v7 )
        {
          varGfxAabbTree = i;
          Postload_GfxAabbTree(NotAtStart);
          ++i;
        }
        varGfxAabbTree = v5;
      }
      v3 = g_streamPosGlob.pos;
      varGfxCellTree = (GfxCellTree *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxCompressedSunShadowDataTemp
==============
*/
void Postload_GfxCompressedSunShadowDataTemp(const DBStreamStart streamStart)
{
  GfxCompressedSunShadowDataTemp *v2; 
  unsigned int *v3; 
  unsigned int *v4; 
  GfxCompressedSunShadowDataTemp *v5; 
  unsigned int *v6; 
  GfxCompressedSunShadowDataTemp *v7; 
  unsigned __int8 *v8; 
  unsigned __int8 *v9; 
  GfxWrappedBuffer *v10; 
  GfxWrappedBuffer *p_tilesDataBuffer; 

  if ( streamStart != (varGfxCompressedSunShadowDataTemp != (GfxCompressedSunShadowDataTemp *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxCompressedSunShadowDataTemp, 0x48ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x48ui64);
  v2 = varGfxCompressedSunShadowDataTemp;
  v3 = varuint;
  if ( varGfxCompressedSunShadowDataTemp->tilesIndices )
  {
    v4 = AllocPostload_uint();
    v2->tilesIndices = v4;
    varuint = v4;
    Postload_uintArray(AtStart, varGfxCompressedSunShadowDataTemp->tilesCount);
    varuint = v3;
  }
  v5 = varGfxCompressedSunShadowDataTemp;
  if ( varGfxCompressedSunShadowDataTemp->tilesOffsets )
  {
    v6 = AllocPostload_uint();
    v5->tilesOffsets = v6;
    varuint = v6;
    Postload_uintArray(AtStart, varGfxCompressedSunShadowDataTemp->tilesCount);
    varuint = v3;
  }
  DB_PushStreamPos(0xAu);
  v7 = varGfxCompressedSunShadowDataTemp;
  if ( varGfxCompressedSunShadowDataTemp->tilesData )
  {
    v8 = varbyte;
    v9 = AllocPostload_byte();
    v7->tilesData = v9;
    varbyte = v9;
    Postload_byteArray(AtStart, varGfxCompressedSunShadowDataTemp->tilesDataSize);
    varbyte = v8;
  }
  DB_PopStreamPos();
  v10 = varGfxWrappedBuffer;
  p_tilesDataBuffer = &varGfxCompressedSunShadowDataTemp->tilesDataBuffer;
  varGfxWrappedBuffer = &varGfxCompressedSunShadowDataTemp->tilesDataBuffer;
  Postload_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_tilesDataBuffer, GfxWrappedBuffer_Raw, 1u, varGfxCompressedSunShadowDataTemp->tilesDataSize, varGfxCompressedSunShadowDataTemp->tilesData, "compressedSunShadowStreamingData", 0);
  varGfxWrappedBuffer = v10;
}

/*
==============
Postload_GfxCompressedSunShadowDataTempArray
==============
*/
void Postload_GfxCompressedSunShadowDataTempArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxCompressedSunShadowDataTemp *i; 

  v2 = count;
  Postload_Stream(streamStart, varGfxCompressedSunShadowDataTemp, 72 * count);
  for ( i = varGfxCompressedSunShadowDataTemp; v2; --v2 )
  {
    varGfxCompressedSunShadowDataTemp = i;
    Postload_GfxCompressedSunShadowDataTemp(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_GfxCompressedSunShadowDataTempPtr
==============
*/
void Postload_GfxCompressedSunShadowDataTempPtr(const DBStreamStart streamStart)
{
  GfxCompressedSunShadowDataTemp **v2; 
  GfxCompressedSunShadowDataTemp *v3; 
  unsigned __int8 *pos; 
  XZoneHandleUnique CurrentZoneLoadHandleUnique; 

  if ( streamStart != (varGfxCompressedSunShadowDataTempPtr != (GfxCompressedSunShadowDataTemp **)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxCompressedSunShadowDataTempPtr, 8ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(8ui64);
  v2 = varGfxCompressedSunShadowDataTempPtr;
  if ( *varGfxCompressedSunShadowDataTempPtr )
  {
    v3 = varGfxCompressedSunShadowDataTemp;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    pos = g_streamPosGlob.pos;
    *v2 = (GfxCompressedSunShadowDataTemp *)g_streamPosGlob.pos;
    varGfxCompressedSunShadowDataTemp = (GfxCompressedSunShadowDataTemp *)pos;
    Postload_GfxCompressedSunShadowDataTemp(AtStart);
    CurrentZoneLoadHandleUnique = DB_Zones_GetCurrentZoneLoadHandleUnique();
    DB_ScheduleBackendCallback<GfxCompressedSunShadowDataTemp>(CurrentZoneLoadHandleUnique, R_CompressedSunShadow_StreamIn, varGfxCompressedSunShadowDataTemp);
    *v2 = NULL;
    varGfxCompressedSunShadowDataTemp = v3;
  }
}

/*
==============
Postload_GfxCompressedSunShadowDataTempPtrArray
==============
*/
void Postload_GfxCompressedSunShadowDataTempPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxCompressedSunShadowDataTemp **i; 
  GfxCompressedSunShadowDataTemp **v4; 
  GfxCompressedSunShadowDataTemp *v5; 
  XZoneHandleUnique CurrentZoneLoadHandleUnique; 
  GfxCompressedSunShadowDataTemp *v7; 
  unsigned int m_packed; 
  DB_BackendCallbackDataRingBufferAlloc v9; 
  int v10; 
  DB_BackendCallbackDataRingBufferAlloc alloc; 
  DB_BackendCallbackDataRingBufferAlloc result; 
  int v13; 

  v2 = count;
  Postload_Stream(streamStart, varGfxCompressedSunShadowDataTempPtr, 8 * count);
  for ( i = varGfxCompressedSunShadowDataTempPtr; v2; --v2 )
  {
    v4 = i;
    varGfxCompressedSunShadowDataTempPtr = i;
    if ( i == (GfxCompressedSunShadowDataTemp **)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 8ui64);
      v4 = varGfxCompressedSunShadowDataTempPtr;
    }
    if ( *v4 )
    {
      v5 = varGfxCompressedSunShadowDataTemp;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      *v4 = (GfxCompressedSunShadowDataTemp *)g_streamPosGlob.pos;
      varGfxCompressedSunShadowDataTemp = (GfxCompressedSunShadowDataTemp *)g_streamPosGlob.pos;
      Postload_GfxCompressedSunShadowDataTemp(AtStart);
      CurrentZoneLoadHandleUnique = DB_Zones_GetCurrentZoneLoadHandleUnique();
      v7 = varGfxCompressedSunShadowDataTemp;
      v13 = 0;
      m_packed = CurrentZoneLoadHandleUnique.m_packed;
      v9 = *DB_BackendCallbackDataRingBuffer_PreallocData(&result, 0x70u);
      v10 = v13;
      alloc = v9;
      *(_DWORD *)v9.m_data = 112;
      *((_DWORD *)v9.m_data + 1) = m_packed;
      *((_DWORD *)v9.m_data + 2) = v10;
      *((_QWORD *)v9.m_data + 2) = DB_BackendCallbackTrampoline_GfxCompressedSunShadowDataTemp_;
      *((_QWORD *)v9.m_data + 3) = 0i64;
      *((_QWORD *)v9.m_data + 4) = R_CompressedSunShadow_StreamIn;
      *(GfxCompressedSunShadowDataTemp *)(v9.m_data + 40) = *v7;
      DB_BackendCallbackDataRingBuffer_Queue(&alloc);
      *v4 = NULL;
      varGfxCompressedSunShadowDataTemp = v5;
    }
    ++i;
  }
}

/*
==============
Postload_GfxCompressedSunShadowDataTempPtrStream
==============
*/
void Postload_GfxCompressedSunShadowDataTempPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxCompressedSunShadowDataTemp **v3; 
  unsigned __int8 *pos; 
  GfxCompressedSunShadowDataTemp **v5; 
  GfxCompressedSunShadowDataTemp *v6; 
  XZoneHandleUnique CurrentZoneLoadHandleUnique; 
  GfxCompressedSunShadowDataTemp *v8; 
  unsigned int m_packed; 
  DB_BackendCallbackDataRingBufferAlloc v10; 
  int v11; 
  DB_BackendCallbackDataRingBufferAlloc alloc; 
  DB_BackendCallbackDataRingBufferAlloc result; 
  int v14; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 41745, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxCompressedSunShadowDataTempPtr;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (GfxCompressedSunShadowDataTemp **)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 8ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(8ui64);
      v5 = varGfxCompressedSunShadowDataTempPtr;
      pos = g_streamPosGlob.pos + 8;
      g_streamPosGlob.pos += 8;
      if ( *varGfxCompressedSunShadowDataTempPtr )
      {
        v6 = varGfxCompressedSunShadowDataTemp;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        *v5 = (GfxCompressedSunShadowDataTemp *)g_streamPosGlob.pos;
        varGfxCompressedSunShadowDataTemp = (GfxCompressedSunShadowDataTemp *)g_streamPosGlob.pos;
        Postload_GfxCompressedSunShadowDataTemp(AtStart);
        CurrentZoneLoadHandleUnique = DB_Zones_GetCurrentZoneLoadHandleUnique();
        v8 = varGfxCompressedSunShadowDataTemp;
        v14 = 0;
        m_packed = CurrentZoneLoadHandleUnique.m_packed;
        v10 = *DB_BackendCallbackDataRingBuffer_PreallocData(&result, 0x70u);
        v11 = v14;
        alloc = v10;
        *(_DWORD *)v10.m_data = 112;
        *((_DWORD *)v10.m_data + 1) = m_packed;
        *((_DWORD *)v10.m_data + 2) = v11;
        *((_QWORD *)v10.m_data + 2) = DB_BackendCallbackTrampoline_GfxCompressedSunShadowDataTemp_;
        *((_QWORD *)v10.m_data + 3) = 0i64;
        *((_QWORD *)v10.m_data + 4) = R_CompressedSunShadow_StreamIn;
        *(GfxCompressedSunShadowDataTemp *)(v10.m_data + 40) = *v8;
        DB_BackendCallbackDataRingBuffer_Queue(&alloc);
        *v5 = NULL;
        pos = g_streamPosGlob.pos;
        varGfxCompressedSunShadowDataTemp = v6;
      }
      varGfxCompressedSunShadowDataTempPtr = (GfxCompressedSunShadowDataTemp **)pos;
      v3 = (GfxCompressedSunShadowDataTemp **)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxCompressedSunShadowDataTempStream
==============
*/
void Postload_GfxCompressedSunShadowDataTempStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  GfxCompressedSunShadowDataTemp *v5; 
  unsigned int *v6; 
  unsigned int *v7; 
  unsigned int *v8; 
  GfxCompressedSunShadowDataTemp *v9; 
  unsigned __int8 *v10; 
  unsigned __int8 *v11; 
  GfxWrappedBuffer *v12; 
  GfxWrappedBuffer *p_tilesDataBuffer; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 41652, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varGfxCompressedSunShadowDataTemp;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x48ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x48ui64);
      v5 = varGfxCompressedSunShadowDataTemp;
      g_streamPosGlob.pos += 72;
      v6 = varuint;
      if ( varGfxCompressedSunShadowDataTemp->tilesIndices )
      {
        v7 = AllocPostload_uint();
        v5->tilesIndices = v7;
        varuint = v7;
        Postload_uintArray(AtStart, varGfxCompressedSunShadowDataTemp->tilesCount);
        v5 = varGfxCompressedSunShadowDataTemp;
        varuint = v6;
      }
      if ( v5->tilesOffsets )
      {
        v8 = AllocPostload_uint();
        v5->tilesOffsets = v8;
        varuint = v8;
        Postload_uintArray(AtStart, varGfxCompressedSunShadowDataTemp->tilesCount);
        varuint = v6;
      }
      DB_PushStreamPos(0xAu);
      v9 = varGfxCompressedSunShadowDataTemp;
      if ( varGfxCompressedSunShadowDataTemp->tilesData )
      {
        v10 = varbyte;
        v11 = AllocPostload_byte();
        v9->tilesData = v11;
        varbyte = v11;
        Postload_byteArray(AtStart, varGfxCompressedSunShadowDataTemp->tilesDataSize);
        varbyte = v10;
      }
      DB_PopStreamPos();
      v12 = varGfxWrappedBuffer;
      p_tilesDataBuffer = &varGfxCompressedSunShadowDataTemp->tilesDataBuffer;
      varGfxWrappedBuffer = &varGfxCompressedSunShadowDataTemp->tilesDataBuffer;
      Postload_GfxWrappedBuffer(NotAtStart);
      Load_GfxWrappedBuffer(p_tilesDataBuffer, GfxWrappedBuffer_Raw, 1u, varGfxCompressedSunShadowDataTemp->tilesDataSize, varGfxCompressedSunShadowDataTemp->tilesData, "compressedSunShadowStreamingData", 0);
      pos = g_streamPosGlob.pos;
      varGfxCompressedSunShadowDataTemp = (GfxCompressedSunShadowDataTemp *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varGfxWrappedBuffer = v12;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxCompressedSunShadowParams
==============
*/
void Postload_GfxCompressedSunShadowParams(const DBStreamStart streamStart)
{
  if ( streamStart != (varGfxCompressedSunShadowParams != (GfxCompressedSunShadowParams *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxCompressedSunShadowParams, 0x30ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x30ui64);
}

/*
==============
Postload_GfxCompressedSunShadowParamsArray
==============
*/
void Postload_GfxCompressedSunShadowParamsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varGfxCompressedSunShadowParams, 48 * count);
}

/*
==============
Postload_GfxCompressedSunShadowParamsStream
==============
*/
void Postload_GfxCompressedSunShadowParamsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxCompressedSunShadowParams *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 44579, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxCompressedSunShadowParams;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (GfxCompressedSunShadowParams *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x30ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x30ui64);
      pos = g_streamPosGlob.pos + 48;
      g_streamPosGlob.pos = pos;
      v3 = (GfxCompressedSunShadowParams *)pos;
      varGfxCompressedSunShadowParams = (GfxCompressedSunShadowParams *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxDecalVolumeCollection
==============
*/
void Postload_GfxDecalVolumeCollection(const DBStreamStart streamStart)
{
  if ( streamStart != (varGfxDecalVolumeCollection != (GfxDecalVolumeCollection *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxDecalVolumeCollection, 8ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(8ui64);
}

/*
==============
Postload_GfxDecalVolumeCollectionArray
==============
*/
void Postload_GfxDecalVolumeCollectionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varGfxDecalVolumeCollection, 8 * count);
}

/*
==============
Postload_GfxDecalVolumeCollectionStream
==============
*/
void Postload_GfxDecalVolumeCollectionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxDecalVolumeCollection *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 44286, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxDecalVolumeCollection;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (GfxDecalVolumeCollection *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 8ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(8ui64);
      pos = g_streamPosGlob.pos + 8;
      g_streamPosGlob.pos = pos;
      v3 = (GfxDecalVolumeCollection *)pos;
      varGfxDecalVolumeCollection = (GfxDecalVolumeCollection *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxDecalVolumeTransientData
==============
*/
void Postload_GfxDecalVolumeTransientData(const DBStreamStart streamStart)
{
  GfxDecalVolumeTransientData *v2; 
  GfxStaticDecalVolumePacked *decalVolumes; 
  GfxStaticDecalVolumePacked *v4; 
  unsigned __int64 v5; 
  GfxWrappedBuffer *v6; 
  GfxWrappedBuffer *p_decalVolumesBuffer; 
  GfxDecalVolumeTransientData *v8; 
  Bounds *v9; 
  Bounds *v10; 
  GfxStaticDecalVolumeUid *v11; 
  unsigned __int64 v12; 

  if ( streamStart != (varGfxDecalVolumeTransientData != (GfxDecalVolumeTransientData *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxDecalVolumeTransientData, 0x40ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x40ui64);
  DB_PushStreamPos(7u);
  v2 = varGfxDecalVolumeTransientData;
  decalVolumes = varGfxDecalVolumeTransientData->decalVolumes;
  if ( decalVolumes )
  {
    if ( decalVolumes == (GfxStaticDecalVolumePacked *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( decalVolumes != (GfxStaticDecalVolumePacked *)-2i64 )
    {
      v2->decalVolumes = (GfxStaticDecalVolumePacked *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varGfxDecalVolumeTransientData->decalVolumes);
      goto LABEL_17;
    }
    v4 = varGfxStaticDecalVolumePacked;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->decalVolumes = (GfxStaticDecalVolumePacked *)g_streamPosGlob.pos;
    varGfxStaticDecalVolumePacked = (GfxStaticDecalVolumePacked *)g_streamPosGlob.pos;
    v5 = 44i64 * varGfxDecalVolumeTransientData->decalVolumeCount;
    if ( v5 )
    {
      if ( v5 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v5);
    }
    varGfxStaticDecalVolumePacked = v4;
    if ( decalVolumes == (GfxStaticDecalVolumePacked *)-1i64 )
      DB_PopSharedData();
  }
LABEL_17:
  DB_PopStreamPos();
  v6 = varGfxWrappedBuffer;
  p_decalVolumesBuffer = &varGfxDecalVolumeTransientData->decalVolumesBuffer;
  varGfxWrappedBuffer = &varGfxDecalVolumeTransientData->decalVolumesBuffer;
  Postload_GfxWrappedBuffer(NotAtStart);
  Load_DecalVolumesBuffer(p_decalVolumesBuffer, varGfxDecalVolumeTransientData);
  varGfxWrappedBuffer = v6;
  v8 = varGfxDecalVolumeTransientData;
  if ( varGfxDecalVolumeTransientData->collectionBounds )
  {
    v9 = varBounds;
    v10 = AllocPostload_Bounds();
    v8->collectionBounds = v10;
    varBounds = v10;
    Postload_BoundsArray(AtStart, varGfxDecalVolumeTransientData->collectionCount);
    v8 = varGfxDecalVolumeTransientData;
    varBounds = v9;
  }
  if ( v8->decalVolumeUids )
  {
    v11 = varGfxStaticDecalVolumeUid;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v8->decalVolumeUids = (GfxStaticDecalVolumeUid *)g_streamPosGlob.pos;
    varGfxStaticDecalVolumeUid = (GfxStaticDecalVolumeUid *)g_streamPosGlob.pos;
    v12 = 4i64 * varGfxDecalVolumeTransientData->decalVolumeCount;
    if ( v12 )
    {
      if ( v12 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v12);
    }
    varGfxStaticDecalVolumeUid = v11;
  }
}

/*
==============
Postload_GfxDecalVolumeTransientDataArray
==============
*/
void Postload_GfxDecalVolumeTransientDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxDecalVolumeTransientData *i; 

  v2 = count;
  Postload_Stream(streamStart, varGfxDecalVolumeTransientData, count << 6);
  for ( i = varGfxDecalVolumeTransientData; v2; --v2 )
  {
    varGfxDecalVolumeTransientData = i;
    Postload_GfxDecalVolumeTransientData(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_GfxDecalVolumeTransientDataStream
==============
*/
void Postload_GfxDecalVolumeTransientDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxDecalVolumeTransientData *v4; 
  GfxStaticDecalVolumePacked *decalVolumes; 
  GfxStaticDecalVolumePacked *v6; 
  unsigned __int64 v7; 
  GfxWrappedBuffer *v8; 
  GfxWrappedBuffer *p_decalVolumesBuffer; 
  GfxDecalVolumeTransientData *v10; 
  Bounds *v11; 
  Bounds *v12; 
  GfxStaticDecalVolumeUid *v13; 
  unsigned __int64 v14; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 41417, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxDecalVolumeTransientData;
    while ( 1 )
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x40ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x40ui64);
      g_streamPosGlob.pos += 64;
      DB_PushStreamPos(7u);
      v4 = varGfxDecalVolumeTransientData;
      decalVolumes = varGfxDecalVolumeTransientData->decalVolumes;
      if ( !decalVolumes )
        goto LABEL_23;
      if ( decalVolumes == (GfxStaticDecalVolumePacked *)-1i64 )
        break;
      if ( decalVolumes == (GfxStaticDecalVolumePacked *)-2i64 )
        goto LABEL_16;
      v4->decalVolumes = (GfxStaticDecalVolumePacked *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varGfxDecalVolumeTransientData->decalVolumes);
LABEL_23:
      DB_PopStreamPos();
      v8 = varGfxWrappedBuffer;
      p_decalVolumesBuffer = &varGfxDecalVolumeTransientData->decalVolumesBuffer;
      varGfxWrappedBuffer = &varGfxDecalVolumeTransientData->decalVolumesBuffer;
      Postload_GfxWrappedBuffer(NotAtStart);
      Load_DecalVolumesBuffer(p_decalVolumesBuffer, varGfxDecalVolumeTransientData);
      varGfxWrappedBuffer = v8;
      v10 = varGfxDecalVolumeTransientData;
      if ( varGfxDecalVolumeTransientData->collectionBounds )
      {
        v11 = varBounds;
        v12 = AllocPostload_Bounds();
        v10->collectionBounds = v12;
        varBounds = v12;
        Postload_BoundsArray(AtStart, varGfxDecalVolumeTransientData->collectionCount);
        v10 = varGfxDecalVolumeTransientData;
        varBounds = v11;
      }
      if ( v10->decalVolumeUids )
      {
        v13 = varGfxStaticDecalVolumeUid;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v10->decalVolumeUids = (GfxStaticDecalVolumeUid *)g_streamPosGlob.pos;
        varGfxStaticDecalVolumeUid = (GfxStaticDecalVolumeUid *)g_streamPosGlob.pos;
        v14 = 4i64 * varGfxDecalVolumeTransientData->decalVolumeCount;
        if ( v14 )
        {
          if ( v14 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
            __debugbreak();
          DB_IncStreamPos(v14);
        }
        varGfxStaticDecalVolumeUid = v13;
      }
      pos = g_streamPosGlob.pos;
      varGfxDecalVolumeTransientData = (GfxDecalVolumeTransientData *)g_streamPosGlob.pos;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v6 = varGfxStaticDecalVolumePacked;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->decalVolumes = (GfxStaticDecalVolumePacked *)g_streamPosGlob.pos;
    varGfxStaticDecalVolumePacked = (GfxStaticDecalVolumePacked *)g_streamPosGlob.pos;
    v7 = 44i64 * varGfxDecalVolumeTransientData->decalVolumeCount;
    if ( v7 )
    {
      if ( v7 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v7);
    }
    varGfxStaticDecalVolumePacked = v6;
    if ( decalVolumes == (GfxStaticDecalVolumePacked *)-1i64 )
      DB_PopSharedData();
    goto LABEL_23;
  }
}

/*
==============
Postload_GfxDisplacementParms
==============
*/
void Postload_GfxDisplacementParms(const DBStreamStart streamStart)
{
  if ( streamStart != (varGfxDisplacementParms != (float4 *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxDisplacementParms, 0x10ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x10ui64);
}

/*
==============
Postload_GfxDisplacementParmsArray
==============
*/
void Postload_GfxDisplacementParmsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varGfxDisplacementParms, 16 * count);
}

/*
==============
Postload_GfxDisplacementParmsStream
==============
*/
void Postload_GfxDisplacementParmsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  float4 *v3; 
  float4 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 40667, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxDisplacementParms;
    pos = (float4 *)g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x10ui64);
        pos = (float4 *)g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x10ui64);
      pos = (float4 *)(g_streamPosGlob.pos + 16);
      g_streamPosGlob.pos = (unsigned __int8 *)pos;
      v3 = pos;
      varGfxDisplacementParms = pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxDrawSurf
==============
*/
void Postload_GfxDrawSurf(const DBStreamStart streamStart)
{
  if ( streamStart != (varGfxDrawSurf != (GfxDrawSurf *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxDrawSurf, 0x10ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x10ui64);
}

/*
==============
Postload_GfxDrawSurfArray
==============
*/
void Postload_GfxDrawSurfArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varGfxDrawSurf, 16 * count);
}

/*
==============
Postload_GfxDrawSurfStream
==============
*/
void Postload_GfxDrawSurfStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxDrawSurf *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 35620, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxDrawSurf;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (GfxDrawSurf *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x10ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x10ui64);
      pos = g_streamPosGlob.pos + 16;
      g_streamPosGlob.pos = pos;
      v3 = (GfxDrawSurf *)pos;
      varGfxDrawSurf = (GfxDrawSurf *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxDynamicLightset
==============
*/
void Postload_GfxDynamicLightset(const DBStreamStart streamStart)
{
  GfxDynamicLightset *v2; 
  GfxDynamicLightsetBFData *v3; 
  unsigned __int64 v4; 
  GfxDynamicLightset *v5; 
  GfxDynamicLightsetLightInfo *v6; 
  unsigned __int64 v7; 
  GfxDynamicLightset *v8; 
  GfxDynamicLightsetPortalGIData *v9; 
  unsigned __int64 v10; 
  GfxDynamicLightset *v11; 
  GfxDynamicLightsetProductGIData *v12; 
  unsigned __int64 v13; 
  GfxDynamicLightsetLMData *v14; 
  GfxDynamicLightsetProbeData *v15; 

  if ( streamStart != (varGfxDynamicLightset != (GfxDynamicLightset *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxDynamicLightset, 0x260ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x260ui64);
  v2 = varGfxDynamicLightset;
  if ( varGfxDynamicLightset->basisFunctions )
  {
    v3 = varGfxDynamicLightsetBFData;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->basisFunctions = (GfxDynamicLightsetBFData *)g_streamPosGlob.pos;
    varGfxDynamicLightsetBFData = (GfxDynamicLightsetBFData *)g_streamPosGlob.pos;
    v4 = 32i64 * varGfxDynamicLightset->numBasisFunctions;
    if ( v4 )
    {
      if ( v4 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v4);
    }
    varGfxDynamicLightsetBFData = v3;
  }
  v5 = varGfxDynamicLightset;
  if ( varGfxDynamicLightset->basisFunctionLights )
  {
    v6 = varGfxDynamicLightsetLightInfo;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v5->basisFunctionLights = (GfxDynamicLightsetLightInfo *)g_streamPosGlob.pos;
    varGfxDynamicLightsetLightInfo = (GfxDynamicLightsetLightInfo *)g_streamPosGlob.pos;
    v7 = 28i64 * varGfxDynamicLightset->numBasisFunctionPrimaryLights;
    if ( v7 )
    {
      if ( v7 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v7);
    }
    varGfxDynamicLightsetLightInfo = v6;
  }
  v8 = varGfxDynamicLightset;
  if ( varGfxDynamicLightset->portalGIData )
  {
    v9 = varGfxDynamicLightsetPortalGIData;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v8->portalGIData = (GfxDynamicLightsetPortalGIData *)g_streamPosGlob.pos;
    varGfxDynamicLightsetPortalGIData = (GfxDynamicLightsetPortalGIData *)g_streamPosGlob.pos;
    v10 = 36i64 * varGfxDynamicLightset->numPortalGI;
    if ( v10 )
    {
      if ( v10 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v10);
    }
    varGfxDynamicLightsetPortalGIData = v9;
  }
  v11 = varGfxDynamicLightset;
  if ( varGfxDynamicLightset->productGIData )
  {
    v12 = varGfxDynamicLightsetProductGIData;
    DB_PatchMem_FixStreamAlignment(1ui64);
    DB_CheckCanIncStreamPos(0i64);
    v11->productGIData = (GfxDynamicLightsetProductGIData *)g_streamPosGlob.pos;
    varGfxDynamicLightsetProductGIData = (GfxDynamicLightsetProductGIData *)g_streamPosGlob.pos;
    v13 = 4i64 * varGfxDynamicLightset->numProductGI;
    if ( v13 )
    {
      if ( v13 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v13);
    }
    varGfxDynamicLightsetProductGIData = v12;
  }
  v14 = varGfxDynamicLightsetLMData;
  varGfxDynamicLightsetLMData = &varGfxDynamicLightset->lmData;
  Postload_GfxDynamicLightsetLMData(NotAtStart);
  varGfxDynamicLightsetLMData = v14;
  v15 = varGfxDynamicLightsetProbeData;
  varGfxDynamicLightsetProbeData = &varGfxDynamicLightset->lgProbeData;
  Postload_GfxDynamicLightsetProbeData(NotAtStart);
  varGfxDynamicLightsetProbeData = v15;
}

/*
==============
Postload_GfxDynamicLightsetArray
==============
*/
void Postload_GfxDynamicLightsetArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxDynamicLightset *i; 

  v2 = count;
  Postload_Stream(streamStart, varGfxDynamicLightset, 608 * count);
  for ( i = varGfxDynamicLightset; v2; --v2 )
  {
    varGfxDynamicLightset = i;
    Postload_GfxDynamicLightset(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_GfxDynamicLightsetBFData
==============
*/
void Postload_GfxDynamicLightsetBFData(const DBStreamStart streamStart)
{
  if ( streamStart != (varGfxDynamicLightsetBFData != (GfxDynamicLightsetBFData *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxDynamicLightsetBFData, 0x20ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x20ui64);
}

/*
==============
Postload_GfxDynamicLightsetBFDataArray
==============
*/
void Postload_GfxDynamicLightsetBFDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varGfxDynamicLightsetBFData, 32 * count);
}

/*
==============
Postload_GfxDynamicLightsetBFDataStream
==============
*/
void Postload_GfxDynamicLightsetBFDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxDynamicLightsetBFData *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 47986, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxDynamicLightsetBFData;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (GfxDynamicLightsetBFData *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x20ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x20ui64);
      pos = g_streamPosGlob.pos + 32;
      g_streamPosGlob.pos = pos;
      v3 = (GfxDynamicLightsetBFData *)pos;
      varGfxDynamicLightsetBFData = (GfxDynamicLightsetBFData *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxDynamicLightsetBFType
==============
*/
void Postload_GfxDynamicLightsetBFType(const DBStreamStart streamStart)
{
  if ( streamStart != (varGfxDynamicLightsetBFType != (GfxDynamicLightsetBFType *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxDynamicLightsetBFType, 2ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(2ui64);
}

/*
==============
Postload_GfxDynamicLightsetBFTypeArray
==============
*/
void Postload_GfxDynamicLightsetBFTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varGfxDynamicLightsetBFType, 2 * count);
}

/*
==============
Postload_GfxDynamicLightsetBFTypeStream
==============
*/
void Postload_GfxDynamicLightsetBFTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxDynamicLightsetBFType *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 47818, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxDynamicLightsetBFType;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (GfxDynamicLightsetBFType *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 2ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(2ui64);
      pos = g_streamPosGlob.pos + 2;
      g_streamPosGlob.pos = pos;
      v3 = (GfxDynamicLightsetBFType *)pos;
      varGfxDynamicLightsetBFType = (GfxDynamicLightsetBFType *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxDynamicLightsetGChunk
==============
*/
void Postload_GfxDynamicLightsetGChunk(const DBStreamStart streamStart)
{
  if ( streamStart != (varGfxDynamicLightsetGChunk != (GfxDynamicLightsetGChunk *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxDynamicLightsetGChunk, 0x18ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x18ui64);
}

/*
==============
Postload_GfxDynamicLightsetGChunkArray
==============
*/
void Postload_GfxDynamicLightsetGChunkArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varGfxDynamicLightsetGChunk, 24 * count);
}

/*
==============
Postload_GfxDynamicLightsetGChunkFlags
==============
*/
void Postload_GfxDynamicLightsetGChunkFlags(const DBStreamStart streamStart)
{
  if ( streamStart != (varGfxDynamicLightsetGChunkFlags != (GfxDynamicLightsetGChunkFlags *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxDynamicLightsetGChunkFlags, 2ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(2ui64);
}

/*
==============
Postload_GfxDynamicLightsetGChunkFlagsArray
==============
*/
void Postload_GfxDynamicLightsetGChunkFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varGfxDynamicLightsetGChunkFlags, 2 * count);
}

/*
==============
Postload_GfxDynamicLightsetGChunkFlagsStream
==============
*/
void Postload_GfxDynamicLightsetGChunkFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxDynamicLightsetGChunkFlags *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 48428, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxDynamicLightsetGChunkFlags;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (GfxDynamicLightsetGChunkFlags *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 2ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(2ui64);
      pos = g_streamPosGlob.pos + 2;
      g_streamPosGlob.pos = pos;
      v3 = (GfxDynamicLightsetGChunkFlags *)pos;
      varGfxDynamicLightsetGChunkFlags = (GfxDynamicLightsetGChunkFlags *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxDynamicLightsetGChunkInfo
==============
*/
void Postload_GfxDynamicLightsetGChunkInfo(const DBStreamStart streamStart)
{
  if ( streamStart != (varGfxDynamicLightsetGChunkInfo != (GfxDynamicLightsetGChunkInfo *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxDynamicLightsetGChunkInfo, 0x10ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x10ui64);
}

/*
==============
Postload_GfxDynamicLightsetGChunkInfoArray
==============
*/
void Postload_GfxDynamicLightsetGChunkInfoArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varGfxDynamicLightsetGChunkInfo, 16 * count);
}

/*
==============
Postload_GfxDynamicLightsetGChunkInfoStream
==============
*/
void Postload_GfxDynamicLightsetGChunkInfoStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxDynamicLightsetGChunkInfo *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 48352, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxDynamicLightsetGChunkInfo;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (GfxDynamicLightsetGChunkInfo *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x10ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x10ui64);
      pos = g_streamPosGlob.pos + 16;
      g_streamPosGlob.pos = pos;
      v3 = (GfxDynamicLightsetGChunkInfo *)pos;
      varGfxDynamicLightsetGChunkInfo = (GfxDynamicLightsetGChunkInfo *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxDynamicLightsetGChunkStream
==============
*/
void Postload_GfxDynamicLightsetGChunkStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxDynamicLightsetGChunk *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 48573, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxDynamicLightsetGChunk;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (GfxDynamicLightsetGChunk *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x18ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x18ui64);
      pos = g_streamPosGlob.pos + 24;
      g_streamPosGlob.pos = pos;
      v3 = (GfxDynamicLightsetGChunk *)pos;
      varGfxDynamicLightsetGChunk = (GfxDynamicLightsetGChunk *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxDynamicLightsetLGppZoneInfo
==============
*/
void Postload_GfxDynamicLightsetLGppZoneInfo(const DBStreamStart streamStart)
{
  GfxDynamicLightsetLGppZoneInfo *v2; 
  GfxGpuDynLightsetsLGVReference *v3; 
  unsigned __int64 v4; 
  GfxWrappedBuffer *v5; 
  GfxWrappedBuffer *p_lgvReferencesBuffer; 
  GfxDynamicLightsetProbeData *v7; 

  if ( streamStart != (varGfxDynamicLightsetLGppZoneInfo != (GfxDynamicLightsetLGppZoneInfo *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxDynamicLightsetLGppZoneInfo, 0x130ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x130ui64);
  DB_PushStreamPos(7u);
  v2 = varGfxDynamicLightsetLGppZoneInfo;
  if ( varGfxDynamicLightsetLGppZoneInfo->lgvReferences )
  {
    v3 = varGfxGpuDynLightsetsLGVReference;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->lgvReferences = (GfxGpuDynLightsetsLGVReference *)g_streamPosGlob.pos;
    varGfxGpuDynLightsetsLGVReference = (GfxGpuDynLightsetsLGVReference *)g_streamPosGlob.pos;
    v4 = 8i64 * varGfxDynamicLightsetLGppZoneInfo->numOrigSMLGppProbes;
    if ( v4 )
    {
      if ( v4 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v4);
    }
    varGfxGpuDynLightsetsLGVReference = v3;
  }
  DB_PopStreamPos();
  v5 = varGfxWrappedBuffer;
  p_lgvReferencesBuffer = &varGfxDynamicLightsetLGppZoneInfo->lgvReferencesBuffer;
  varGfxWrappedBuffer = &varGfxDynamicLightsetLGppZoneInfo->lgvReferencesBuffer;
  Postload_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_lgvReferencesBuffer, GfxWrappedBuffer_Structured, 8u, varGfxDynamicLightsetLGppZoneInfo->numOrigSMLGppProbes, varGfxDynamicLightsetLGppZoneInfo->lgvReferences, "static model lgv references", 0);
  v7 = varGfxDynamicLightsetProbeData;
  varGfxDynamicLightsetProbeData = &varGfxDynamicLightsetLGppZoneInfo->lgvProbeData;
  varGfxWrappedBuffer = v5;
  Postload_GfxDynamicLightsetProbeData(NotAtStart);
  varGfxDynamicLightsetProbeData = v7;
}

/*
==============
Postload_GfxDynamicLightsetLGppZoneInfoArray
==============
*/
void Postload_GfxDynamicLightsetLGppZoneInfoArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxDynamicLightsetLGppZoneInfo *i; 

  v2 = count;
  Postload_Stream(streamStart, varGfxDynamicLightsetLGppZoneInfo, 304 * count);
  for ( i = varGfxDynamicLightsetLGppZoneInfo; v2; --v2 )
  {
    varGfxDynamicLightsetLGppZoneInfo = i;
    Postload_GfxDynamicLightsetLGppZoneInfo(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_GfxDynamicLightsetLGppZoneInfoStream
==============
*/
void Postload_GfxDynamicLightsetLGppZoneInfoStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  GfxDynamicLightsetLGppZoneInfo *v5; 
  GfxGpuDynLightsetsLGVReference *v6; 
  unsigned __int64 v7; 
  GfxWrappedBuffer *v8; 
  GfxWrappedBuffer *p_lgvReferencesBuffer; 
  GfxDynamicLightsetProbeData *v10; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 49344, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varGfxDynamicLightsetLGppZoneInfo;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x130ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x130ui64);
      g_streamPosGlob.pos += 304;
      DB_PushStreamPos(7u);
      v5 = varGfxDynamicLightsetLGppZoneInfo;
      if ( varGfxDynamicLightsetLGppZoneInfo->lgvReferences )
      {
        v6 = varGfxGpuDynLightsetsLGVReference;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v5->lgvReferences = (GfxGpuDynLightsetsLGVReference *)g_streamPosGlob.pos;
        varGfxGpuDynLightsetsLGVReference = (GfxGpuDynLightsetsLGVReference *)g_streamPosGlob.pos;
        v7 = 8i64 * varGfxDynamicLightsetLGppZoneInfo->numOrigSMLGppProbes;
        if ( v7 )
        {
          if ( v7 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
            __debugbreak();
          DB_IncStreamPos(v7);
        }
        varGfxGpuDynLightsetsLGVReference = v6;
      }
      DB_PopStreamPos();
      v8 = varGfxWrappedBuffer;
      p_lgvReferencesBuffer = &varGfxDynamicLightsetLGppZoneInfo->lgvReferencesBuffer;
      varGfxWrappedBuffer = &varGfxDynamicLightsetLGppZoneInfo->lgvReferencesBuffer;
      Postload_GfxWrappedBuffer(NotAtStart);
      Load_GfxWrappedBuffer(p_lgvReferencesBuffer, GfxWrappedBuffer_Structured, 8u, varGfxDynamicLightsetLGppZoneInfo->numOrigSMLGppProbes, varGfxDynamicLightsetLGppZoneInfo->lgvReferences, "static model lgv references", 0);
      v10 = varGfxDynamicLightsetProbeData;
      varGfxDynamicLightsetProbeData = &varGfxDynamicLightsetLGppZoneInfo->lgvProbeData;
      varGfxWrappedBuffer = v8;
      Postload_GfxDynamicLightsetProbeData(NotAtStart);
      pos = g_streamPosGlob.pos;
      varGfxDynamicLightsetLGppZoneInfo = (GfxDynamicLightsetLGppZoneInfo *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varGfxDynamicLightsetProbeData = v10;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxDynamicLightsetLMData
==============
*/
void Postload_GfxDynamicLightsetLMData(const DBStreamStart streamStart)
{
  GfxDynamicLightsetLMData *v2; 
  GfxDynamicLightsetGChunk *v3; 
  unsigned __int64 v4; 
  GfxDynamicLightsetLMData *v5; 
  unsigned __int16 *v6; 
  unsigned __int16 *v7; 
  GfxDynamicLightsetLMData *v8; 
  unsigned __int16 *v9; 
  GfxDynamicLightsetLMData *v10; 
  unsigned int *v11; 
  unsigned int *v12; 
  GfxDynamicLightsetLMData *v13; 
  unsigned int *v14; 
  unsigned int *v15; 
  GfxWrappedBuffer *v16; 
  GfxWrappedBuffer *p_origTexelsBuffer; 
  GfxDynamicLightsetLMData *v18; 
  unsigned int *v19; 
  unsigned int *v20; 
  GfxWrappedBuffer *v21; 
  GfxWrappedBuffer *p_origRecordsBuffer; 
  GfxDynamicLightsetLMData *v23; 
  unsigned int *v24; 
  unsigned int *v25; 
  GfxWrappedBuffer *v26; 
  GfxWrappedBuffer *p_bfTexelsBuffer; 
  GfxDynamicLightsetLMData *v28; 
  unsigned __int16 *v29; 
  unsigned __int16 *v30; 
  GfxDynamicLightsetLMData *v31; 
  unsigned int *v32; 
  unsigned int *v33; 

  if ( streamStart != (varGfxDynamicLightsetLMData != (GfxDynamicLightsetLMData *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxDynamicLightsetLMData, 0x118ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x118ui64);
  v2 = varGfxDynamicLightsetLMData;
  if ( varGfxDynamicLightsetLMData->chunkGLM )
  {
    v3 = varGfxDynamicLightsetGChunk;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->chunkGLM = (GfxDynamicLightsetGChunk *)g_streamPosGlob.pos;
    varGfxDynamicLightsetGChunk = (GfxDynamicLightsetGChunk *)g_streamPosGlob.pos;
    v4 = 24i64 * varGfxDynamicLightsetLMData->numGChunkLM;
    if ( v4 )
    {
      if ( v4 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v4);
    }
    varGfxDynamicLightsetGChunk = v3;
  }
  v5 = varGfxDynamicLightsetLMData;
  v6 = varushort;
  if ( varGfxDynamicLightsetLMData->chunkGLMBF )
  {
    v7 = AllocPostload_ushort();
    v5->chunkGLMBF = v7;
    varushort = v7;
    Postload_ushortArray(AtStart, varGfxDynamicLightsetLMData->numGChunkLMBF);
    varushort = v6;
  }
  v8 = varGfxDynamicLightsetLMData;
  if ( varGfxDynamicLightsetLMData->chunkWhichLM )
  {
    v9 = AllocPostload_ushort();
    v8->chunkWhichLM = v9;
    varushort = v9;
    Postload_ushortArray(AtStart, varGfxDynamicLightsetLMData->numLMHave);
    varushort = v6;
  }
  v10 = varGfxDynamicLightsetLMData;
  if ( varGfxDynamicLightsetLMData->chunkLMStart )
  {
    v11 = varuint;
    v12 = AllocPostload_uint();
    v10->chunkLMStart = v12;
    varuint = v12;
    Postload_uintArray(AtStart, varGfxDynamicLightsetLMData->numLMHave + (varGfxDynamicLightsetLMData->numLMHave != 0));
    varuint = v11;
  }
  DB_PushStreamPos(7u);
  v13 = varGfxDynamicLightsetLMData;
  if ( varGfxDynamicLightsetLMData->origTexels )
  {
    v14 = varuint;
    v15 = AllocPostload_uint();
    v13->origTexels = v15;
    varuint = v15;
    Postload_uintArray(AtStart, 2 * varGfxDynamicLightsetLMData->numOrigTexels);
    varuint = v14;
  }
  DB_PopStreamPos();
  v16 = varGfxWrappedBuffer;
  p_origTexelsBuffer = &varGfxDynamicLightsetLMData->origTexelsBuffer;
  varGfxWrappedBuffer = &varGfxDynamicLightsetLMData->origTexelsBuffer;
  Postload_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_origTexelsBuffer, GfxWrappedBuffer_Raw, 8u, varGfxDynamicLightsetLMData->numOrigTexels, varGfxDynamicLightsetLMData->origTexels, "origTexels", 0);
  varGfxWrappedBuffer = v16;
  DB_PushStreamPos(7u);
  v18 = varGfxDynamicLightsetLMData;
  if ( varGfxDynamicLightsetLMData->origRecords )
  {
    v19 = varuint;
    v20 = AllocPostload_uint();
    v18->origRecords = v20;
    varuint = v20;
    Postload_uintArray(AtStart, varGfxDynamicLightsetLMData->numOrigTexels);
    varuint = v19;
  }
  DB_PopStreamPos();
  v21 = varGfxWrappedBuffer;
  p_origRecordsBuffer = &varGfxDynamicLightsetLMData->origRecordsBuffer;
  varGfxWrappedBuffer = &varGfxDynamicLightsetLMData->origRecordsBuffer;
  Postload_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_origRecordsBuffer, GfxWrappedBuffer_Data, 4u, varGfxDynamicLightsetLMData->numOrigTexels, varGfxDynamicLightsetLMData->origRecords, "origRecords", 0);
  varGfxWrappedBuffer = v21;
  DB_PushStreamPos(7u);
  v23 = varGfxDynamicLightsetLMData;
  if ( varGfxDynamicLightsetLMData->bfTexels )
  {
    v24 = varuint;
    v25 = AllocPostload_uint();
    v23->bfTexels = v25;
    varuint = v25;
    Postload_uintArray(AtStart, 2 * varGfxDynamicLightsetLMData->numBFLMTexels);
    varuint = v24;
  }
  DB_PopStreamPos();
  v26 = varGfxWrappedBuffer;
  p_bfTexelsBuffer = &varGfxDynamicLightsetLMData->bfTexelsBuffer;
  varGfxWrappedBuffer = &varGfxDynamicLightsetLMData->bfTexelsBuffer;
  Postload_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_bfTexelsBuffer, GfxWrappedBuffer_Raw, 8u, varGfxDynamicLightsetLMData->numBFLMTexels, varGfxDynamicLightsetLMData->bfTexels, "bfTexels", 0);
  v28 = varGfxDynamicLightsetLMData;
  varGfxWrappedBuffer = v26;
  if ( varGfxDynamicLightsetLMData->skipRecords )
  {
    v29 = varushort;
    v30 = AllocPostload_ushort();
    v28->skipRecords = v30;
    varushort = v30;
    Postload_ushortArray(AtStart, varGfxDynamicLightsetLMData->numSkipRecords);
    v28 = varGfxDynamicLightsetLMData;
    v26 = varGfxWrappedBuffer;
    varushort = v29;
  }
  varGfxWrappedBuffer = &v28->skipRecordsBuffer;
  Postload_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(&v28->skipRecordsBuffer, GfxWrappedBuffer_Data, 2u, varGfxDynamicLightsetLMData->numSkipRecords, varGfxDynamicLightsetLMData->skipRecords, "skipRecords", 0);
  v31 = varGfxDynamicLightsetLMData;
  varGfxWrappedBuffer = v26;
  if ( varGfxDynamicLightsetLMData->palletteRecords )
  {
    v32 = varuint;
    v33 = AllocPostload_uint();
    v31->palletteRecords = v33;
    varuint = v33;
    Postload_uintArray(AtStart, varGfxDynamicLightsetLMData->numSkipRecords);
    v31 = varGfxDynamicLightsetLMData;
    v26 = varGfxWrappedBuffer;
    varuint = v32;
  }
  varGfxWrappedBuffer = &v31->palletteRecordsBuffer;
  Postload_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(&v31->palletteRecordsBuffer, GfxWrappedBuffer_Data, 4u, varGfxDynamicLightsetLMData->numSkipRecords, varGfxDynamicLightsetLMData->palletteRecords, "palletteRecords", 0);
  varGfxWrappedBuffer = v26;
}

/*
==============
Postload_GfxDynamicLightsetLMDataArray
==============
*/
void Postload_GfxDynamicLightsetLMDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxDynamicLightsetLMData *i; 

  v2 = count;
  Postload_Stream(streamStart, varGfxDynamicLightsetLMData, 280 * count);
  for ( i = varGfxDynamicLightsetLMData; v2; --v2 )
  {
    varGfxDynamicLightsetLMData = i;
    Postload_GfxDynamicLightsetLMData(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_GfxDynamicLightsetLMDataStream
==============
*/
void Postload_GfxDynamicLightsetLMDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 49902, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  for ( ; count; --count )
  {
    Postload_GfxDynamicLightsetLMData(AtStart);
    varGfxDynamicLightsetLMData = (GfxDynamicLightsetLMData *)g_streamPosGlob.pos;
  }
}

/*
==============
Postload_GfxDynamicLightsetLightInfo
==============
*/
void Postload_GfxDynamicLightsetLightInfo(const DBStreamStart streamStart)
{
  if ( streamStart != (varGfxDynamicLightsetLightInfo != (GfxDynamicLightsetLightInfo *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxDynamicLightsetLightInfo, 0x1Cui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x1Cui64);
}

/*
==============
Postload_GfxDynamicLightsetLightInfoArray
==============
*/
void Postload_GfxDynamicLightsetLightInfoArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varGfxDynamicLightsetLightInfo, 28 * count);
}

/*
==============
Postload_GfxDynamicLightsetLightInfoStream
==============
*/
void Postload_GfxDynamicLightsetLightInfoStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxDynamicLightsetLightInfo *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 47742, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxDynamicLightsetLightInfo;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (GfxDynamicLightsetLightInfo *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x1Cui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x1Cui64);
      pos = g_streamPosGlob.pos + 28;
      g_streamPosGlob.pos = pos;
      v3 = (GfxDynamicLightsetLightInfo *)pos;
      varGfxDynamicLightsetLightInfo = (GfxDynamicLightsetLightInfo *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxDynamicLightsetPortalGIData
==============
*/
void Postload_GfxDynamicLightsetPortalGIData(const DBStreamStart streamStart)
{
  if ( streamStart != (varGfxDynamicLightsetPortalGIData != (GfxDynamicLightsetPortalGIData *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxDynamicLightsetPortalGIData, 0x24ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x24ui64);
}

/*
==============
Postload_GfxDynamicLightsetPortalGIDataArray
==============
*/
void Postload_GfxDynamicLightsetPortalGIDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varGfxDynamicLightsetPortalGIData, 36 * count);
}

/*
==============
Postload_GfxDynamicLightsetPortalGIDataStream
==============
*/
void Postload_GfxDynamicLightsetPortalGIDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxDynamicLightsetPortalGIData *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 48108, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxDynamicLightsetPortalGIData;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (GfxDynamicLightsetPortalGIData *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x24ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x24ui64);
      pos = g_streamPosGlob.pos + 36;
      g_streamPosGlob.pos = pos;
      v3 = (GfxDynamicLightsetPortalGIData *)pos;
      varGfxDynamicLightsetPortalGIData = (GfxDynamicLightsetPortalGIData *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxDynamicLightsetProbeData
==============
*/
void Postload_GfxDynamicLightsetProbeData(const DBStreamStart streamStart)
{
  GfxDynamicLightsetProbeData *v2; 
  GfxDynamicLightsetGChunk *v3; 
  unsigned __int64 v4; 
  GfxDynamicLightsetProbeData *v5; 
  unsigned __int16 *v6; 
  unsigned __int16 *v7; 
  GfxDynamicLightsetProbeData *v8; 
  GfxSHCompressedProbeData *v9; 
  unsigned __int64 v10; 
  GfxWrappedBuffer *v11; 
  GfxWrappedBuffer *p_origProbesBuffer; 
  GfxDynamicLightsetProbeData *v13; 
  GfxSHCompressedProbeData *v14; 
  unsigned __int64 v15; 
  GfxWrappedBuffer *v16; 
  GfxWrappedBuffer *p_bfProbesBuffer; 
  GfxDynamicLightsetProbeData *v18; 
  unsigned __int16 *v19; 
  unsigned __int16 *v20; 
  GfxWrappedBuffer *v21; 
  GfxWrappedBuffer *p_skipRecordsBuffer; 
  GfxDynamicLightsetProbeData *v23; 
  unsigned int *v24; 
  unsigned int *v25; 
  GfxWrappedBuffer *v26; 
  GfxWrappedBuffer *p_palletteRecordsBuffer; 
  GfxDynamicLightsetProbeData *v28; 
  unsigned int *v29; 
  unsigned int *v30; 
  GfxWrappedBuffer *v31; 
  GfxWrappedBuffer *p_tempRemapBuffer; 

  if ( streamStart != (varGfxDynamicLightsetProbeData != (GfxDynamicLightsetProbeData *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxDynamicLightsetProbeData, 0x100ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x100ui64);
  v2 = varGfxDynamicLightsetProbeData;
  if ( varGfxDynamicLightsetProbeData->chunkG )
  {
    v3 = varGfxDynamicLightsetGChunk;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->chunkG = (GfxDynamicLightsetGChunk *)g_streamPosGlob.pos;
    varGfxDynamicLightsetGChunk = (GfxDynamicLightsetGChunk *)g_streamPosGlob.pos;
    v4 = 24i64 * varGfxDynamicLightsetProbeData->numGChunk;
    if ( v4 )
    {
      if ( v4 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v4);
    }
    varGfxDynamicLightsetGChunk = v3;
  }
  v5 = varGfxDynamicLightsetProbeData;
  if ( varGfxDynamicLightsetProbeData->chunkGBF )
  {
    v6 = varushort;
    v7 = AllocPostload_ushort();
    v5->chunkGBF = v7;
    varushort = v7;
    Postload_ushortArray(AtStart, varGfxDynamicLightsetProbeData->numGChunkBF);
    varushort = v6;
  }
  DB_PushStreamPos(7u);
  v8 = varGfxDynamicLightsetProbeData;
  if ( varGfxDynamicLightsetProbeData->origProbes )
  {
    v9 = varGfxSHCompressedProbeData;
    DB_PatchMem_FixStreamAlignment(0x1Fui64);
    DB_CheckCanIncStreamPos(0i64);
    v8->origProbes = (GfxSHCompressedProbeData *)g_streamPosGlob.pos;
    varGfxSHCompressedProbeData = (GfxSHCompressedProbeData *)g_streamPosGlob.pos;
    v10 = 32i64 * varGfxDynamicLightsetProbeData->numOrigProbes;
    if ( v10 )
    {
      if ( v10 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v10);
    }
    varGfxSHCompressedProbeData = v9;
  }
  DB_PopStreamPos();
  v11 = varGfxWrappedBuffer;
  p_origProbesBuffer = &varGfxDynamicLightsetProbeData->origProbesBuffer;
  varGfxWrappedBuffer = &varGfxDynamicLightsetProbeData->origProbesBuffer;
  Postload_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_origProbesBuffer, GfxWrappedBuffer_Raw, 0x20u, varGfxDynamicLightsetProbeData->numOrigProbes, varGfxDynamicLightsetProbeData->origProbes, "origProbes", 0);
  varGfxWrappedBuffer = v11;
  DB_PushStreamPos(7u);
  v13 = varGfxDynamicLightsetProbeData;
  if ( varGfxDynamicLightsetProbeData->bfProbes )
  {
    v14 = varGfxSHCompressedProbeData;
    DB_PatchMem_FixStreamAlignment(0x1Fui64);
    DB_CheckCanIncStreamPos(0i64);
    v13->bfProbes = (GfxSHCompressedProbeData *)g_streamPosGlob.pos;
    varGfxSHCompressedProbeData = (GfxSHCompressedProbeData *)g_streamPosGlob.pos;
    v15 = 32i64 * varGfxDynamicLightsetProbeData->numBFProbes;
    if ( v15 )
    {
      if ( v15 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v15);
    }
    varGfxSHCompressedProbeData = v14;
  }
  DB_PopStreamPos();
  v16 = varGfxWrappedBuffer;
  p_bfProbesBuffer = &varGfxDynamicLightsetProbeData->bfProbesBuffer;
  varGfxWrappedBuffer = &varGfxDynamicLightsetProbeData->bfProbesBuffer;
  Postload_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_bfProbesBuffer, GfxWrappedBuffer_Raw, 0x20u, varGfxDynamicLightsetProbeData->numBFProbes, varGfxDynamicLightsetProbeData->bfProbes, "bfProbes", 0);
  varGfxWrappedBuffer = v16;
  DB_PushStreamPos(7u);
  v18 = varGfxDynamicLightsetProbeData;
  if ( varGfxDynamicLightsetProbeData->skipRecords )
  {
    v19 = varushort;
    v20 = AllocPostload_ushort();
    v18->skipRecords = v20;
    varushort = v20;
    Postload_ushortArray(AtStart, varGfxDynamicLightsetProbeData->numSkipRecords);
    varushort = v19;
  }
  DB_PopStreamPos();
  v21 = varGfxWrappedBuffer;
  p_skipRecordsBuffer = &varGfxDynamicLightsetProbeData->skipRecordsBuffer;
  varGfxWrappedBuffer = &varGfxDynamicLightsetProbeData->skipRecordsBuffer;
  Postload_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_skipRecordsBuffer, GfxWrappedBuffer_Data, 2u, varGfxDynamicLightsetProbeData->numSkipRecords, varGfxDynamicLightsetProbeData->skipRecords, "skipRecords", 0);
  varGfxWrappedBuffer = v21;
  DB_PushStreamPos(7u);
  v23 = varGfxDynamicLightsetProbeData;
  if ( varGfxDynamicLightsetProbeData->palletteRecords )
  {
    v24 = varuint;
    v25 = AllocPostload_uint();
    v23->palletteRecords = v25;
    varuint = v25;
    Postload_uintArray(AtStart, varGfxDynamicLightsetProbeData->numSkipRecords);
    varuint = v24;
  }
  DB_PopStreamPos();
  v26 = varGfxWrappedBuffer;
  p_palletteRecordsBuffer = &varGfxDynamicLightsetProbeData->palletteRecordsBuffer;
  varGfxWrappedBuffer = &varGfxDynamicLightsetProbeData->palletteRecordsBuffer;
  Postload_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_palletteRecordsBuffer, GfxWrappedBuffer_Data, 4u, varGfxDynamicLightsetProbeData->numSkipRecords, varGfxDynamicLightsetProbeData->palletteRecords, "palletteRecords", 0);
  varGfxWrappedBuffer = v26;
  DB_PushStreamPos(7u);
  v28 = varGfxDynamicLightsetProbeData;
  if ( varGfxDynamicLightsetProbeData->tempRemap )
  {
    v29 = varuint;
    v30 = AllocPostload_uint();
    v28->tempRemap = v30;
    varuint = v30;
    Postload_uintArray(AtStart, varGfxDynamicLightsetProbeData->numOrigProbes);
    varuint = v29;
  }
  DB_PopStreamPos();
  v31 = varGfxWrappedBuffer;
  p_tempRemapBuffer = &varGfxDynamicLightsetProbeData->tempRemapBuffer;
  varGfxWrappedBuffer = &varGfxDynamicLightsetProbeData->tempRemapBuffer;
  Postload_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_tempRemapBuffer, GfxWrappedBuffer_Data, 4u, varGfxDynamicLightsetProbeData->numOrigProbes, varGfxDynamicLightsetProbeData->tempRemap, "tempRemap", 0);
  varGfxWrappedBuffer = v31;
}

/*
==============
Postload_GfxDynamicLightsetProbeDataArray
==============
*/
void Postload_GfxDynamicLightsetProbeDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxDynamicLightsetProbeData *i; 

  v2 = count;
  Postload_Stream(streamStart, varGfxDynamicLightsetProbeData, count << 8);
  for ( i = varGfxDynamicLightsetProbeData; v2; --v2 )
  {
    varGfxDynamicLightsetProbeData = i;
    Postload_GfxDynamicLightsetProbeData(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_GfxDynamicLightsetProbeDataStream
==============
*/
void Postload_GfxDynamicLightsetProbeDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 49091, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  for ( ; count; --count )
  {
    Postload_GfxDynamicLightsetProbeData(AtStart);
    varGfxDynamicLightsetProbeData = (GfxDynamicLightsetProbeData *)g_streamPosGlob.pos;
  }
}

/*
==============
Postload_GfxDynamicLightsetProductGIData
==============
*/
void Postload_GfxDynamicLightsetProductGIData(const DBStreamStart streamStart)
{
  if ( streamStart != (varGfxDynamicLightsetProductGIData != (GfxDynamicLightsetProductGIData *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxDynamicLightsetProductGIData, 4ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(4ui64);
}

/*
==============
Postload_GfxDynamicLightsetProductGIDataArray
==============
*/
void Postload_GfxDynamicLightsetProductGIDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varGfxDynamicLightsetProductGIData, 4 * count);
}

/*
==============
Postload_GfxDynamicLightsetProductGIDataStream
==============
*/
void Postload_GfxDynamicLightsetProductGIDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxDynamicLightsetProductGIData *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 48207, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxDynamicLightsetProductGIData;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (GfxDynamicLightsetProductGIData *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 4ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(4ui64);
      pos = g_streamPosGlob.pos + 4;
      g_streamPosGlob.pos = pos;
      v3 = (GfxDynamicLightsetProductGIData *)pos;
      varGfxDynamicLightsetProductGIData = (GfxDynamicLightsetProductGIData *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxDynamicLightsetStream
==============
*/
void Postload_GfxDynamicLightsetStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  GfxDynamicLightset *v5; 
  GfxDynamicLightsetBFData *v6; 
  unsigned __int64 v7; 
  GfxDynamicLightset *v8; 
  GfxDynamicLightsetLightInfo *v9; 
  unsigned __int64 v10; 
  GfxDynamicLightset *v11; 
  GfxDynamicLightsetPortalGIData *v12; 
  unsigned __int64 v13; 
  GfxDynamicLightset *v14; 
  GfxDynamicLightsetProductGIData *v15; 
  unsigned __int64 v16; 
  GfxDynamicLightsetLMData *v17; 
  GfxDynamicLightsetProbeData *v18; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 50220, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varGfxDynamicLightset;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x260ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x260ui64);
      v5 = varGfxDynamicLightset;
      g_streamPosGlob.pos += 608;
      if ( varGfxDynamicLightset->basisFunctions )
      {
        v6 = varGfxDynamicLightsetBFData;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v5->basisFunctions = (GfxDynamicLightsetBFData *)g_streamPosGlob.pos;
        varGfxDynamicLightsetBFData = (GfxDynamicLightsetBFData *)g_streamPosGlob.pos;
        v7 = 32i64 * varGfxDynamicLightset->numBasisFunctions;
        if ( v7 )
        {
          if ( v7 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
            __debugbreak();
          DB_IncStreamPos(v7);
        }
        varGfxDynamicLightsetBFData = v6;
      }
      v8 = varGfxDynamicLightset;
      if ( varGfxDynamicLightset->basisFunctionLights )
      {
        v9 = varGfxDynamicLightsetLightInfo;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v8->basisFunctionLights = (GfxDynamicLightsetLightInfo *)g_streamPosGlob.pos;
        varGfxDynamicLightsetLightInfo = (GfxDynamicLightsetLightInfo *)g_streamPosGlob.pos;
        v10 = 28i64 * varGfxDynamicLightset->numBasisFunctionPrimaryLights;
        if ( v10 )
        {
          if ( v10 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
            __debugbreak();
          DB_IncStreamPos(v10);
        }
        varGfxDynamicLightsetLightInfo = v9;
      }
      v11 = varGfxDynamicLightset;
      if ( varGfxDynamicLightset->portalGIData )
      {
        v12 = varGfxDynamicLightsetPortalGIData;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v11->portalGIData = (GfxDynamicLightsetPortalGIData *)g_streamPosGlob.pos;
        varGfxDynamicLightsetPortalGIData = (GfxDynamicLightsetPortalGIData *)g_streamPosGlob.pos;
        v13 = 36i64 * varGfxDynamicLightset->numPortalGI;
        if ( v13 )
        {
          if ( v13 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
            __debugbreak();
          DB_IncStreamPos(v13);
        }
        varGfxDynamicLightsetPortalGIData = v12;
      }
      v14 = varGfxDynamicLightset;
      if ( varGfxDynamicLightset->productGIData )
      {
        v15 = varGfxDynamicLightsetProductGIData;
        DB_PatchMem_FixStreamAlignment(1ui64);
        DB_CheckCanIncStreamPos(0i64);
        v14->productGIData = (GfxDynamicLightsetProductGIData *)g_streamPosGlob.pos;
        varGfxDynamicLightsetProductGIData = (GfxDynamicLightsetProductGIData *)g_streamPosGlob.pos;
        v16 = 4i64 * varGfxDynamicLightset->numProductGI;
        if ( v16 )
        {
          if ( v16 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
            __debugbreak();
          DB_IncStreamPos(v16);
        }
        varGfxDynamicLightsetProductGIData = v15;
      }
      v17 = varGfxDynamicLightsetLMData;
      varGfxDynamicLightsetLMData = &varGfxDynamicLightset->lmData;
      Postload_GfxDynamicLightsetLMData(NotAtStart);
      varGfxDynamicLightsetLMData = v17;
      v18 = varGfxDynamicLightsetProbeData;
      varGfxDynamicLightsetProbeData = &varGfxDynamicLightset->lgProbeData;
      Postload_GfxDynamicLightsetProbeData(NotAtStart);
      pos = g_streamPosGlob.pos;
      varGfxDynamicLightset = (GfxDynamicLightset *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varGfxDynamicLightsetProbeData = v18;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxFrustumLights
==============
*/
void Postload_GfxFrustumLights(const DBStreamStart streamStart)
{
  GfxFrustumLights *v2; 
  unsigned int *v3; 
  unsigned int *v4; 
  GfxFrustumLights *v5; 
  unsigned int *v6; 
  GfxFrustumLights *v7; 
  unsigned __int16 *v8; 
  unsigned __int16 *v9; 
  GfxFrustumLights *v10; 
  unsigned __int16 *v11; 
  GfxFrustumLights *v12; 
  unsigned __int16 *v13; 
  unsigned __int16 *v14; 
  GfxFrustumLights *v15; 
  unsigned __int8 *v16; 
  unsigned __int8 *v17; 
  GfxWrappedBuffer *v18; 
  GfxWrappedBuffer *p_indexBuffer; 
  GfxWrappedBuffer *p_vertexBuffer; 

  if ( streamStart != (varGfxFrustumLights != (GfxFrustumLights *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxFrustumLights, 0x80ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x80ui64);
  v2 = varGfxFrustumLights;
  v3 = varuint;
  if ( varGfxFrustumLights->indicesOffsets )
  {
    v4 = AllocPostload_uint();
    v2->indicesOffsets = v4;
    varuint = v4;
    Postload_uintArray(AtStart, varGfxFrustumLights->lightCount);
    varuint = v3;
  }
  v5 = varGfxFrustumLights;
  if ( varGfxFrustumLights->verticesOffsets )
  {
    v6 = AllocPostload_uint();
    v5->verticesOffsets = v6;
    varuint = v6;
    Postload_uintArray(AtStart, varGfxFrustumLights->lightCount);
    varuint = v3;
  }
  v7 = varGfxFrustumLights;
  v8 = varushort;
  if ( varGfxFrustumLights->indicesCounts )
  {
    v9 = AllocPostload_ushort();
    v7->indicesCounts = v9;
    varushort = v9;
    Postload_ushortArray(AtStart, varGfxFrustumLights->lightCount);
    varushort = v8;
  }
  v10 = varGfxFrustumLights;
  if ( varGfxFrustumLights->verticesCounts )
  {
    v11 = AllocPostload_ushort();
    v10->verticesCounts = v11;
    varushort = v11;
    Postload_ushortArray(AtStart, varGfxFrustumLights->lightCount);
    varushort = v8;
  }
  v12 = varGfxFrustumLights;
  if ( varGfxFrustumLights->indices )
  {
    v13 = varalignIndBufUShort_t;
    v14 = AllocPostload_alignIndBufUShort_t();
    v12->indices = v14;
    varalignIndBufUShort_t = v14;
    Postload_alignIndBufUShort_tArray(AtStart, varGfxFrustumLights->totalIndicesCount);
    varalignIndBufUShort_t = v13;
  }
  v15 = varGfxFrustumLights;
  if ( varGfxFrustumLights->vertices )
  {
    v16 = varalignVertBufByte_t;
    v17 = AllocPostload_alignVertBufByte_t();
    v15->vertices = v17;
    varalignVertBufByte_t = v17;
    Postload_alignVertBufByte_tArray(AtStart, 16i64 * varGfxFrustumLights->totalVerticesCount);
    varalignVertBufByte_t = v16;
  }
  v18 = varGfxWrappedBuffer;
  p_indexBuffer = &varGfxFrustumLights->indexBuffer;
  varGfxWrappedBuffer = &varGfxFrustumLights->indexBuffer;
  Postload_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_indexBuffer, GfxWrappedBuffer_Raw, 2u, varGfxFrustumLights->totalIndicesCount, varGfxFrustumLights->indices, "primary lights index buffer", 0x80u);
  p_vertexBuffer = &varGfxFrustumLights->vertexBuffer;
  varGfxWrappedBuffer = &varGfxFrustumLights->vertexBuffer;
  Postload_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_vertexBuffer, GfxWrappedBuffer_Raw, 0x10u, varGfxFrustumLights->totalVerticesCount, varGfxFrustumLights->vertices, "primary lights vertex buffer", 0);
  varGfxWrappedBuffer = v18;
}

/*
==============
Postload_GfxFrustumLightsArray
==============
*/
void Postload_GfxFrustumLightsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxFrustumLights *i; 

  v2 = count;
  Postload_Stream(streamStart, varGfxFrustumLights, count << 7);
  for ( i = varGfxFrustumLights; v2; --v2 )
  {
    varGfxFrustumLights = i;
    Postload_GfxFrustumLights(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_GfxFrustumLightsStream
==============
*/
void Postload_GfxFrustumLightsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  GfxFrustumLights *v5; 
  unsigned int *v6; 
  unsigned int *v7; 
  unsigned int *v8; 
  unsigned __int16 *v9; 
  unsigned __int16 *v10; 
  unsigned __int16 *v11; 
  unsigned __int16 *v12; 
  unsigned __int16 *v13; 
  unsigned __int8 *v14; 
  unsigned __int8 *v15; 
  GfxWrappedBuffer *v16; 
  GfxWrappedBuffer *p_indexBuffer; 
  GfxWrappedBuffer *p_vertexBuffer; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 47107, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varGfxFrustumLights;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x80ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x80ui64);
      v5 = varGfxFrustumLights;
      g_streamPosGlob.pos += 128;
      v6 = varuint;
      if ( varGfxFrustumLights->indicesOffsets )
      {
        v7 = AllocPostload_uint();
        v5->indicesOffsets = v7;
        varuint = v7;
        Postload_uintArray(AtStart, varGfxFrustumLights->lightCount);
        v5 = varGfxFrustumLights;
        varuint = v6;
      }
      if ( v5->verticesOffsets )
      {
        v8 = AllocPostload_uint();
        v5->verticesOffsets = v8;
        varuint = v8;
        Postload_uintArray(AtStart, varGfxFrustumLights->lightCount);
        v5 = varGfxFrustumLights;
        varuint = v6;
      }
      v9 = varushort;
      if ( v5->indicesCounts )
      {
        v10 = AllocPostload_ushort();
        v5->indicesCounts = v10;
        varushort = v10;
        Postload_ushortArray(AtStart, varGfxFrustumLights->lightCount);
        v5 = varGfxFrustumLights;
        varushort = v9;
      }
      if ( v5->verticesCounts )
      {
        v11 = AllocPostload_ushort();
        v5->verticesCounts = v11;
        varushort = v11;
        Postload_ushortArray(AtStart, varGfxFrustumLights->lightCount);
        v5 = varGfxFrustumLights;
        varushort = v9;
      }
      if ( v5->indices )
      {
        v12 = varalignIndBufUShort_t;
        v13 = AllocPostload_alignIndBufUShort_t();
        v5->indices = v13;
        varalignIndBufUShort_t = v13;
        Postload_alignIndBufUShort_tArray(AtStart, varGfxFrustumLights->totalIndicesCount);
        v5 = varGfxFrustumLights;
        varalignIndBufUShort_t = v12;
      }
      if ( v5->vertices )
      {
        v14 = varalignVertBufByte_t;
        v15 = AllocPostload_alignVertBufByte_t();
        v5->vertices = v15;
        varalignVertBufByte_t = v15;
        Postload_alignVertBufByte_tArray(AtStart, 16i64 * varGfxFrustumLights->totalVerticesCount);
        v5 = varGfxFrustumLights;
        varalignVertBufByte_t = v14;
      }
      v16 = varGfxWrappedBuffer;
      p_indexBuffer = &v5->indexBuffer;
      varGfxWrappedBuffer = p_indexBuffer;
      Postload_GfxWrappedBuffer(NotAtStart);
      Load_GfxWrappedBuffer(p_indexBuffer, GfxWrappedBuffer_Raw, 2u, varGfxFrustumLights->totalIndicesCount, varGfxFrustumLights->indices, "primary lights index buffer", 0x80u);
      p_vertexBuffer = &varGfxFrustumLights->vertexBuffer;
      varGfxWrappedBuffer = &varGfxFrustumLights->vertexBuffer;
      Postload_GfxWrappedBuffer(NotAtStart);
      Load_GfxWrappedBuffer(p_vertexBuffer, GfxWrappedBuffer_Raw, 0x10u, varGfxFrustumLights->totalVerticesCount, varGfxFrustumLights->vertices, "primary lights vertex buffer", 0);
      pos = g_streamPosGlob.pos;
      varGfxFrustumLights = (GfxFrustumLights *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varGfxWrappedBuffer = v16;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxGpuDynLightsetsLGVReference
==============
*/
void Postload_GfxGpuDynLightsetsLGVReference(const DBStreamStart streamStart)
{
  if ( streamStart != (varGfxGpuDynLightsetsLGVReference != (GfxGpuDynLightsetsLGVReference *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxGpuDynLightsetsLGVReference, 8ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(8ui64);
}

/*
==============
Postload_GfxGpuDynLightsetsLGVReferenceArray
==============
*/
void Postload_GfxGpuDynLightsetsLGVReferenceArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varGfxGpuDynLightsetsLGVReference, 8 * count);
}

/*
==============
Postload_GfxGpuDynLightsetsLGVReferenceStream
==============
*/
void Postload_GfxGpuDynLightsetsLGVReferenceStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxGpuDynLightsetsLGVReference *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 49190, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxGpuDynLightsetsLGVReference;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (GfxGpuDynLightsetsLGVReference *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 8ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(8ui64);
      pos = g_streamPosGlob.pos + 8;
      g_streamPosGlob.pos = pos;
      v3 = (GfxGpuDynLightsetsLGVReference *)pos;
      varGfxGpuDynLightsetsLGVReference = (GfxGpuDynLightsetsLGVReference *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxGpuLightGrid
==============
*/
void Postload_GfxGpuLightGrid(const DBStreamStart streamStart)
{
  GfxGpuLightGrid *v2; 
  GfxSHCompressedProbeData *v3; 
  unsigned __int64 v4; 
  GfxWrappedRWBuffer *v5; 
  GfxWrappedRWBuffer *p_probesBuffer; 
  GfxGpuLightGrid *v7; 
  vec3_t *v8; 
  vec3_t *v9; 
  GfxWrappedBuffer *v10; 
  GfxWrappedBuffer *p_probePositionsBuffer; 
  GfxGpuLightGrid *v12; 
  GfxGpuLightGridZone *v13; 
  unsigned __int64 v14; 
  GfxGpuLightGrid *v15; 
  GfxGpuLightGridVoxelTree *v16; 
  __int64 zoneCount; 
  unsigned __int64 v18; 
  GfxGpuLightGridVoxelTree *i; 
  GfxGpuLightGrid *v20; 
  GfxGpuLightGridTetrahedron *v21; 
  unsigned __int64 v22; 
  GfxWrappedBuffer *v23; 
  GfxWrappedBuffer *p_tetrahedronBuffer; 
  GfxGpuLightGrid *v25; 
  GfxGpuLightGridTetrahedronNeighbors *v26; 
  unsigned __int64 v27; 
  GfxWrappedBuffer *v28; 
  GfxWrappedBuffer *p_tetrahedronNeighborsBuffer; 
  GfxGpuLightGrid *v30; 
  GfxGpuLightGridTetrahedronVisibility *v31; 
  unsigned __int64 v32; 
  GfxWrappedBuffer *v33; 
  GfxWrappedBuffer *p_tetrahedronVisibilityBuffer; 
  GfxGpuLightGrid *v35; 
  GfxGpuLightGridVoxelStartTetrahedron *v36; 
  unsigned __int64 v37; 
  GfxWrappedBuffer *v38; 
  GfxWrappedBuffer *p_voxelStartTetrahedronBuffer; 

  if ( streamStart != (varGfxGpuLightGrid != (GfxGpuLightGrid *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxGpuLightGrid, 0x1B8ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x1B8ui64);
  DB_PushStreamPos(7u);
  v2 = varGfxGpuLightGrid;
  if ( varGfxGpuLightGrid->probes )
  {
    v3 = varGfxSHCompressedProbeData;
    DB_PatchMem_FixStreamAlignment(0x1Fui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->probes = (GfxSHCompressedProbeData *)g_streamPosGlob.pos;
    varGfxSHCompressedProbeData = (GfxSHCompressedProbeData *)g_streamPosGlob.pos;
    v4 = 32i64 * varGfxGpuLightGrid->probeCount;
    if ( v4 )
    {
      if ( v4 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v4);
    }
    varGfxSHCompressedProbeData = v3;
  }
  DB_PopStreamPos();
  v5 = varGfxWrappedRWBuffer;
  p_probesBuffer = &varGfxGpuLightGrid->probesBuffer;
  varGfxWrappedRWBuffer = &varGfxGpuLightGrid->probesBuffer;
  Postload_GfxWrappedRWBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_probesBuffer, GfxWrappedBuffer_Raw, 0x20u, varGfxGpuLightGrid->probeCount, varGfxGpuLightGrid->probes, "probesData", 0);
  varGfxWrappedRWBuffer = v5;
  DB_PushStreamPos(7u);
  v7 = varGfxGpuLightGrid;
  if ( varGfxGpuLightGrid->probePositions )
  {
    v8 = varalignVertBufVec3_t;
    v9 = AllocPostload_alignVertBufVec3_t();
    v7->probePositions = v9;
    varalignVertBufVec3_t = v9;
    Postload_alignVertBufVec3_tArray(AtStart, varGfxGpuLightGrid->probeCount);
    varalignVertBufVec3_t = v8;
  }
  DB_PopStreamPos();
  v10 = varGfxWrappedBuffer;
  p_probePositionsBuffer = &varGfxGpuLightGrid->probePositionsBuffer;
  varGfxWrappedBuffer = &varGfxGpuLightGrid->probePositionsBuffer;
  Postload_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_probePositionsBuffer, GfxWrappedBuffer_Raw, 0xCu, varGfxGpuLightGrid->probeCount, varGfxGpuLightGrid->probePositions, "probesPositions", 0);
  v12 = varGfxGpuLightGrid;
  varGfxWrappedBuffer = v10;
  if ( varGfxGpuLightGrid->zones )
  {
    v13 = varGfxGpuLightGridZone;
    DB_PatchMem_FixStreamAlignment(0x3Fui64);
    DB_CheckCanIncStreamPos(0i64);
    v12->zones = (GfxGpuLightGridZone *)g_streamPosGlob.pos;
    varGfxGpuLightGridZone = (GfxGpuLightGridZone *)g_streamPosGlob.pos;
    v14 = 92i64 * varGfxGpuLightGrid->zoneCount;
    if ( v14 )
    {
      if ( v14 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v14);
    }
    varGfxGpuLightGridZone = v13;
  }
  v15 = varGfxGpuLightGrid;
  if ( varGfxGpuLightGrid->zoneVoxelTrees )
  {
    v16 = varGfxGpuLightGridVoxelTree;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v15->zoneVoxelTrees = (GfxGpuLightGridVoxelTree *)g_streamPosGlob.pos;
    varGfxGpuLightGridVoxelTree = (GfxGpuLightGridVoxelTree *)g_streamPosGlob.pos;
    zoneCount = varGfxGpuLightGrid->zoneCount;
    v18 = zoneCount << 7;
    if ( zoneCount << 7 )
    {
      if ( v18 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v18);
    }
    for ( i = varGfxGpuLightGridVoxelTree; zoneCount; --zoneCount )
    {
      varGfxGpuLightGridVoxelTree = i;
      Postload_GfxGpuLightGridVoxelTree(NotAtStart);
      ++i;
    }
    varGfxGpuLightGridVoxelTree = v16;
  }
  DB_PushStreamPos(7u);
  v20 = varGfxGpuLightGrid;
  if ( varGfxGpuLightGrid->tetrahedrons )
  {
    v21 = varGfxGpuLightGridTetrahedron;
    DB_PatchMem_FixStreamAlignment(0x3Fui64);
    DB_CheckCanIncStreamPos(0i64);
    v20->tetrahedrons = (GfxGpuLightGridTetrahedron *)g_streamPosGlob.pos;
    varGfxGpuLightGridTetrahedron = (GfxGpuLightGridTetrahedron *)g_streamPosGlob.pos;
    v22 = 16i64 * varGfxGpuLightGrid->tetrahedronCount;
    if ( v22 )
    {
      if ( v22 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v22);
    }
    varGfxGpuLightGridTetrahedron = v21;
  }
  DB_PopStreamPos();
  v23 = varGfxWrappedBuffer;
  p_tetrahedronBuffer = &varGfxGpuLightGrid->tetrahedronBuffer;
  varGfxWrappedBuffer = &varGfxGpuLightGrid->tetrahedronBuffer;
  Postload_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_tetrahedronBuffer, GfxWrappedBuffer_Raw, 0x10u, varGfxGpuLightGrid->tetrahedronCount, varGfxGpuLightGrid->tetrahedrons, "probeTets", 0);
  varGfxWrappedBuffer = v23;
  DB_PushStreamPos(7u);
  v25 = varGfxGpuLightGrid;
  if ( varGfxGpuLightGrid->tetrahedronNeighbors )
  {
    v26 = varGfxGpuLightGridTetrahedronNeighbors;
    DB_PatchMem_FixStreamAlignment(0x3Fui64);
    DB_CheckCanIncStreamPos(0i64);
    v25->tetrahedronNeighbors = (GfxGpuLightGridTetrahedronNeighbors *)g_streamPosGlob.pos;
    varGfxGpuLightGridTetrahedronNeighbors = (GfxGpuLightGridTetrahedronNeighbors *)g_streamPosGlob.pos;
    v27 = 16i64 * varGfxGpuLightGrid->tetrahedronCount;
    if ( v27 )
    {
      if ( v27 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v27);
    }
    varGfxGpuLightGridTetrahedronNeighbors = v26;
  }
  DB_PopStreamPos();
  v28 = varGfxWrappedBuffer;
  p_tetrahedronNeighborsBuffer = &varGfxGpuLightGrid->tetrahedronNeighborsBuffer;
  varGfxWrappedBuffer = &varGfxGpuLightGrid->tetrahedronNeighborsBuffer;
  Postload_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_tetrahedronNeighborsBuffer, GfxWrappedBuffer_Raw, 0x10u, varGfxGpuLightGrid->tetrahedronCount, varGfxGpuLightGrid->tetrahedronNeighbors, "probeTetNeighbors", 0);
  varGfxWrappedBuffer = v28;
  DB_PushStreamPos(7u);
  v30 = varGfxGpuLightGrid;
  if ( varGfxGpuLightGrid->tetrahedronVisibility )
  {
    v31 = varGfxGpuLightGridTetrahedronVisibility;
    DB_PatchMem_FixStreamAlignment(0x3Fui64);
    DB_CheckCanIncStreamPos(0i64);
    v30->tetrahedronVisibility = (GfxGpuLightGridTetrahedronVisibility *)g_streamPosGlob.pos;
    varGfxGpuLightGridTetrahedronVisibility = (GfxGpuLightGridTetrahedronVisibility *)g_streamPosGlob.pos;
    v32 = (unsigned __int64)varGfxGpuLightGrid->tetrahedronCountVisible << 6;
    if ( v32 )
    {
      if ( v32 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v32);
    }
    varGfxGpuLightGridTetrahedronVisibility = v31;
  }
  DB_PopStreamPos();
  v33 = varGfxWrappedBuffer;
  p_tetrahedronVisibilityBuffer = &varGfxGpuLightGrid->tetrahedronVisibilityBuffer;
  varGfxWrappedBuffer = &varGfxGpuLightGrid->tetrahedronVisibilityBuffer;
  Postload_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_tetrahedronVisibilityBuffer, GfxWrappedBuffer_Raw, 0x40u, varGfxGpuLightGrid->tetrahedronCountVisible, varGfxGpuLightGrid->tetrahedronVisibility, "probeTetVisibility", 0);
  varGfxWrappedBuffer = v33;
  DB_PushStreamPos(7u);
  v35 = varGfxGpuLightGrid;
  if ( varGfxGpuLightGrid->voxelStartTetrahedron )
  {
    v36 = varGfxGpuLightGridVoxelStartTetrahedron;
    DB_PatchMem_FixStreamAlignment(0x3Fui64);
    DB_CheckCanIncStreamPos(0i64);
    v35->voxelStartTetrahedron = (GfxGpuLightGridVoxelStartTetrahedron *)g_streamPosGlob.pos;
    varGfxGpuLightGridVoxelStartTetrahedron = (GfxGpuLightGridVoxelStartTetrahedron *)g_streamPosGlob.pos;
    v37 = 4i64 * varGfxGpuLightGrid->voxelStartTetrahedronCount;
    if ( v37 )
    {
      if ( v37 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v37);
    }
    varGfxGpuLightGridVoxelStartTetrahedron = v36;
  }
  DB_PopStreamPos();
  v38 = varGfxWrappedBuffer;
  p_voxelStartTetrahedronBuffer = &varGfxGpuLightGrid->voxelStartTetrahedronBuffer;
  varGfxWrappedBuffer = &varGfxGpuLightGrid->voxelStartTetrahedronBuffer;
  Postload_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_voxelStartTetrahedronBuffer, GfxWrappedBuffer_Raw, 4u, varGfxGpuLightGrid->voxelStartTetrahedronCount, varGfxGpuLightGrid->voxelStartTetrahedron, "probeVoxelStartTet", 0);
  varGfxWrappedBuffer = v38;
}

/*
==============
Postload_GfxGpuLightGridArray
==============
*/
void Postload_GfxGpuLightGridArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxGpuLightGrid *i; 

  v2 = count;
  Postload_Stream(streamStart, varGfxGpuLightGrid, 440 * count);
  for ( i = varGfxGpuLightGrid; v2; --v2 )
  {
    varGfxGpuLightGrid = i;
    Postload_GfxGpuLightGrid(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_GfxGpuLightGridStream
==============
*/
void Postload_GfxGpuLightGridStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 35458, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  for ( ; count; --count )
  {
    Postload_GfxGpuLightGrid(AtStart);
    varGfxGpuLightGrid = (GfxGpuLightGrid *)g_streamPosGlob.pos;
  }
}

/*
==============
Postload_GfxGpuLightGridTetrahedron
==============
*/
void Postload_GfxGpuLightGridTetrahedron(const DBStreamStart streamStart)
{
  if ( streamStart != (varGfxGpuLightGridTetrahedron != (GfxGpuLightGridTetrahedron *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxGpuLightGridTetrahedron, 0x10ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x10ui64);
}

/*
==============
Postload_GfxGpuLightGridTetrahedronArray
==============
*/
void Postload_GfxGpuLightGridTetrahedronArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varGfxGpuLightGridTetrahedron, 16 * count);
}

/*
==============
Postload_GfxGpuLightGridTetrahedronNeighbors
==============
*/
void Postload_GfxGpuLightGridTetrahedronNeighbors(const DBStreamStart streamStart)
{
  if ( streamStart != (varGfxGpuLightGridTetrahedronNeighbors != (GfxGpuLightGridTetrahedronNeighbors *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxGpuLightGridTetrahedronNeighbors, 0x10ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x10ui64);
}

/*
==============
Postload_GfxGpuLightGridTetrahedronNeighborsArray
==============
*/
void Postload_GfxGpuLightGridTetrahedronNeighborsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varGfxGpuLightGridTetrahedronNeighbors, 16 * count);
}

/*
==============
Postload_GfxGpuLightGridTetrahedronNeighborsStream
==============
*/
void Postload_GfxGpuLightGridTetrahedronNeighborsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxGpuLightGridTetrahedronNeighbors *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 33800, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxGpuLightGridTetrahedronNeighbors;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (GfxGpuLightGridTetrahedronNeighbors *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x10ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x10ui64);
      pos = g_streamPosGlob.pos + 16;
      g_streamPosGlob.pos = pos;
      v3 = (GfxGpuLightGridTetrahedronNeighbors *)pos;
      varGfxGpuLightGridTetrahedronNeighbors = (GfxGpuLightGridTetrahedronNeighbors *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxGpuLightGridTetrahedronStream
==============
*/
void Postload_GfxGpuLightGridTetrahedronStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxGpuLightGridTetrahedron *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 33724, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxGpuLightGridTetrahedron;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (GfxGpuLightGridTetrahedron *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x10ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x10ui64);
      pos = g_streamPosGlob.pos + 16;
      g_streamPosGlob.pos = pos;
      v3 = (GfxGpuLightGridTetrahedron *)pos;
      varGfxGpuLightGridTetrahedron = (GfxGpuLightGridTetrahedron *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxGpuLightGridTetrahedronVisibility
==============
*/
void Postload_GfxGpuLightGridTetrahedronVisibility(const DBStreamStart streamStart)
{
  if ( streamStart != (varGfxGpuLightGridTetrahedronVisibility != (GfxGpuLightGridTetrahedronVisibility *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxGpuLightGridTetrahedronVisibility, 0x40ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x40ui64);
}

/*
==============
Postload_GfxGpuLightGridTetrahedronVisibilityArray
==============
*/
void Postload_GfxGpuLightGridTetrahedronVisibilityArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varGfxGpuLightGridTetrahedronVisibility, count << 6);
}

/*
==============
Postload_GfxGpuLightGridTetrahedronVisibilityStream
==============
*/
void Postload_GfxGpuLightGridTetrahedronVisibilityStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxGpuLightGridTetrahedronVisibility *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 33876, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxGpuLightGridTetrahedronVisibility;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (GfxGpuLightGridTetrahedronVisibility *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x40ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x40ui64);
      pos = g_streamPosGlob.pos + 64;
      g_streamPosGlob.pos = pos;
      v3 = (GfxGpuLightGridTetrahedronVisibility *)pos;
      varGfxGpuLightGridTetrahedronVisibility = (GfxGpuLightGridTetrahedronVisibility *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxGpuLightGridTransientData
==============
*/
void Postload_GfxGpuLightGridTransientData(const DBStreamStart streamStart)
{
  GfxGpuLightGridTransientData *v2; 
  GfxGpuLightGrid *v3; 
  GfxGpuLightGridTransientData *v4; 
  GfxStaticModelLightGridVolume *v5; 
  unsigned __int64 v6; 
  GfxGpuLightGridTransientData *v7; 
  GfxDynamicLightsetLGppZoneInfo *v8; 
  GfxLightGridVolumeAtlasDataTemp **v9; 

  if ( streamStart != (varGfxGpuLightGridTransientData != (GfxGpuLightGridTransientData *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxGpuLightGridTransientData, 0x28ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x28ui64);
  v2 = varGfxGpuLightGridTransientData;
  if ( varGfxGpuLightGridTransientData->gpuLightGrid )
  {
    v3 = varGfxGpuLightGrid;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->gpuLightGrid = (GfxGpuLightGrid *)g_streamPosGlob.pos;
    varGfxGpuLightGrid = (GfxGpuLightGrid *)g_streamPosGlob.pos;
    Postload_GfxGpuLightGrid(AtStart);
    varGfxGpuLightGrid = v3;
  }
  v4 = varGfxGpuLightGridTransientData;
  if ( varGfxGpuLightGridTransientData->staticModelVolumes )
  {
    v5 = varGfxStaticModelLightGridVolume;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->staticModelVolumes = (GfxStaticModelLightGridVolume *)g_streamPosGlob.pos;
    varGfxStaticModelLightGridVolume = (GfxStaticModelLightGridVolume *)g_streamPosGlob.pos;
    v6 = (unsigned __int64)varGfxGpuLightGridTransientData->staticModelVolumeCount << 6;
    if ( v6 )
    {
      if ( v6 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v6);
    }
    varGfxStaticModelLightGridVolume = v5;
  }
  v7 = varGfxGpuLightGridTransientData;
  if ( varGfxGpuLightGridTransientData->SMLGppZone )
  {
    v8 = varGfxDynamicLightsetLGppZoneInfo;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v7->SMLGppZone = (GfxDynamicLightsetLGppZoneInfo *)g_streamPosGlob.pos;
    varGfxDynamicLightsetLGppZoneInfo = (GfxDynamicLightsetLGppZoneInfo *)g_streamPosGlob.pos;
    Postload_GfxDynamicLightsetLGppZoneInfo(AtStart);
    varGfxDynamicLightsetLGppZoneInfo = v8;
  }
  v9 = varGfxLightGridVolumeAtlasDataTempPtr;
  varGfxLightGridVolumeAtlasDataTempPtr = &varGfxGpuLightGridTransientData->tempLightGridVolumeData;
  Postload_GfxLightGridVolumeAtlasDataTempPtr(NotAtStart);
  varGfxLightGridVolumeAtlasDataTempPtr = v9;
}

/*
==============
Postload_GfxGpuLightGridTransientDataArray
==============
*/
void Postload_GfxGpuLightGridTransientDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxGpuLightGridTransientData *i; 

  v2 = count;
  Postload_Stream(streamStart, varGfxGpuLightGridTransientData, 40 * count);
  for ( i = varGfxGpuLightGridTransientData; v2; --v2 )
  {
    varGfxGpuLightGridTransientData = i;
    Postload_GfxGpuLightGridTransientData(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_GfxGpuLightGridTransientDataStream
==============
*/
void Postload_GfxGpuLightGridTransientDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxGpuLightGridTransientData *v4; 
  GfxGpuLightGrid *v5; 
  GfxStaticModelLightGridVolume *v6; 
  unsigned __int64 v7; 
  GfxDynamicLightsetLGppZoneInfo *v8; 
  GfxLightGridVolumeAtlasDataTemp **v9; 
  GfxLightGridVolumeAtlasDataTemp **p_tempLightGridVolumeData; 
  GfxLightGridVolumeAtlasDataTemp *v11; 
  XZoneHandleUnique CurrentZoneLoadHandleUnique; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 41150, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxGpuLightGridTransientData;
    do
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x28ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x28ui64);
      v4 = varGfxGpuLightGridTransientData;
      g_streamPosGlob.pos += 40;
      if ( varGfxGpuLightGridTransientData->gpuLightGrid )
      {
        v5 = varGfxGpuLightGrid;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->gpuLightGrid = (GfxGpuLightGrid *)g_streamPosGlob.pos;
        varGfxGpuLightGrid = (GfxGpuLightGrid *)g_streamPosGlob.pos;
        Postload_GfxGpuLightGrid(AtStart);
        v4 = varGfxGpuLightGridTransientData;
        varGfxGpuLightGrid = v5;
      }
      if ( v4->staticModelVolumes )
      {
        v6 = varGfxStaticModelLightGridVolume;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->staticModelVolumes = (GfxStaticModelLightGridVolume *)g_streamPosGlob.pos;
        v4 = varGfxGpuLightGridTransientData;
        varGfxStaticModelLightGridVolume = (GfxStaticModelLightGridVolume *)g_streamPosGlob.pos;
        v7 = (unsigned __int64)varGfxGpuLightGridTransientData->staticModelVolumeCount << 6;
        if ( v7 )
        {
          if ( v7 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
            __debugbreak();
          DB_IncStreamPos(v7);
          v4 = varGfxGpuLightGridTransientData;
        }
        varGfxStaticModelLightGridVolume = v6;
      }
      if ( v4->SMLGppZone )
      {
        v8 = varGfxDynamicLightsetLGppZoneInfo;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->SMLGppZone = (GfxDynamicLightsetLGppZoneInfo *)g_streamPosGlob.pos;
        varGfxDynamicLightsetLGppZoneInfo = (GfxDynamicLightsetLGppZoneInfo *)g_streamPosGlob.pos;
        Postload_GfxDynamicLightsetLGppZoneInfo(AtStart);
        v4 = varGfxGpuLightGridTransientData;
        varGfxDynamicLightsetLGppZoneInfo = v8;
      }
      v9 = varGfxLightGridVolumeAtlasDataTempPtr;
      p_tempLightGridVolumeData = &v4->tempLightGridVolumeData;
      varGfxLightGridVolumeAtlasDataTempPtr = &v4->tempLightGridVolumeData;
      if ( &v4->tempLightGridVolumeData == (GfxLightGridVolumeAtlasDataTemp **)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, &v4->tempLightGridVolumeData, 8ui64);
        p_tempLightGridVolumeData = varGfxLightGridVolumeAtlasDataTempPtr;
      }
      if ( *p_tempLightGridVolumeData )
      {
        v11 = varGfxLightGridVolumeAtlasDataTemp;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        *p_tempLightGridVolumeData = (GfxLightGridVolumeAtlasDataTemp *)g_streamPosGlob.pos;
        varGfxLightGridVolumeAtlasDataTemp = (GfxLightGridVolumeAtlasDataTemp *)g_streamPosGlob.pos;
        Postload_GfxLightGridVolumeAtlasDataTemp(AtStart);
        CurrentZoneLoadHandleUnique = DB_Zones_GetCurrentZoneLoadHandleUnique();
        DB_ScheduleBackendCallback<GfxLightGridVolumeAtlasDataTemp>(CurrentZoneLoadHandleUnique, RB_ProcessGfxLightGridVolumeAtlasData, varGfxLightGridVolumeAtlasDataTemp);
        *p_tempLightGridVolumeData = NULL;
        varGfxLightGridVolumeAtlasDataTemp = v11;
      }
      pos = g_streamPosGlob.pos;
      varGfxGpuLightGridTransientData = (GfxGpuLightGridTransientData *)g_streamPosGlob.pos;
      varGfxLightGridVolumeAtlasDataTempPtr = v9;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxGpuLightGridVoxelStartTetrahedron
==============
*/
void Postload_GfxGpuLightGridVoxelStartTetrahedron(const DBStreamStart streamStart)
{
  if ( streamStart != (varGfxGpuLightGridVoxelStartTetrahedron != (GfxGpuLightGridVoxelStartTetrahedron *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxGpuLightGridVoxelStartTetrahedron, 4ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(4ui64);
}

/*
==============
Postload_GfxGpuLightGridVoxelStartTetrahedronArray
==============
*/
void Postload_GfxGpuLightGridVoxelStartTetrahedronArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varGfxGpuLightGridVoxelStartTetrahedron, 4 * count);
}

/*
==============
Postload_GfxGpuLightGridVoxelStartTetrahedronStream
==============
*/
void Postload_GfxGpuLightGridVoxelStartTetrahedronStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxGpuLightGridVoxelStartTetrahedron *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 33952, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxGpuLightGridVoxelStartTetrahedron;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (GfxGpuLightGridVoxelStartTetrahedron *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 4ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(4ui64);
      pos = g_streamPosGlob.pos + 4;
      g_streamPosGlob.pos = pos;
      v3 = (GfxGpuLightGridVoxelStartTetrahedron *)pos;
      varGfxGpuLightGridVoxelStartTetrahedron = (GfxGpuLightGridVoxelStartTetrahedron *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxGpuLightGridVoxelTree
==============
*/
void Postload_GfxGpuLightGridVoxelTree(const DBStreamStart streamStart)
{
  GfxGpuLightGridVoxelTree *v2; 
  GfxVoxelTreeHeader *v3; 
  GfxGpuLightGridVoxelTree *v4; 
  GfxVoxelTopDownViewNode *v5; 
  unsigned __int64 v6; 
  GfxGpuLightGridVoxelTree *v7; 
  GfxVoxelInternalNode *v8; 
  unsigned __int64 v9; 
  GfxWrappedBuffer *v10; 
  GfxWrappedBuffer *p_treeHeaderBuffer; 
  GfxWrappedBuffer *p_topDownViewNodeBuffer; 
  GfxWrappedBuffer *p_internalNodeBuffer; 

  if ( streamStart != (varGfxGpuLightGridVoxelTree != (GfxGpuLightGridVoxelTree *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxGpuLightGridVoxelTree, 0x80ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x80ui64);
  DB_PushStreamPos(6u);
  v2 = varGfxGpuLightGridVoxelTree;
  if ( varGfxGpuLightGridVoxelTree->treeHeader )
  {
    v3 = varGfxVoxelTreeHeader;
    DB_PatchMem_FixStreamAlignment(0xFui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->treeHeader = (GfxVoxelTreeHeader *)g_streamPosGlob.pos;
    varGfxVoxelTreeHeader = (GfxVoxelTreeHeader *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x40ui64);
    varGfxVoxelTreeHeader = v3;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(7u);
  v4 = varGfxGpuLightGridVoxelTree;
  if ( varGfxGpuLightGridVoxelTree->topDownViewNodes )
  {
    v5 = varGfxVoxelTopDownViewNode;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->topDownViewNodes = (GfxVoxelTopDownViewNode *)g_streamPosGlob.pos;
    varGfxVoxelTopDownViewNode = (GfxVoxelTopDownViewNode *)g_streamPosGlob.pos;
    v6 = 12i64 * varGfxGpuLightGridVoxelTree->topDownViewNodeCount;
    if ( v6 )
    {
      if ( v6 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v6);
    }
    varGfxVoxelTopDownViewNode = v5;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(7u);
  v7 = varGfxGpuLightGridVoxelTree;
  if ( varGfxGpuLightGridVoxelTree->internalNodes )
  {
    v8 = varGfxVoxelInternalNode;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v7->internalNodes = (GfxVoxelInternalNode *)g_streamPosGlob.pos;
    varGfxVoxelInternalNode = (GfxVoxelInternalNode *)g_streamPosGlob.pos;
    v9 = 16i64 * varGfxGpuLightGridVoxelTree->internalNodeCount;
    if ( v9 )
    {
      if ( v9 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v9);
    }
    varGfxVoxelInternalNode = v8;
  }
  DB_PopStreamPos();
  v10 = varGfxWrappedBuffer;
  p_treeHeaderBuffer = &varGfxGpuLightGridVoxelTree->treeHeaderBuffer;
  varGfxWrappedBuffer = &varGfxGpuLightGridVoxelTree->treeHeaderBuffer;
  Postload_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_treeHeaderBuffer, GfxWrappedBuffer_Structured, 0x40u, 1u, varGfxGpuLightGridVoxelTree->treeHeader, "lightgrid voxel tree header", 0);
  p_topDownViewNodeBuffer = &varGfxGpuLightGridVoxelTree->topDownViewNodeBuffer;
  varGfxWrappedBuffer = &varGfxGpuLightGridVoxelTree->topDownViewNodeBuffer;
  Postload_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_topDownViewNodeBuffer, GfxWrappedBuffer_Structured, 0xCu, varGfxGpuLightGridVoxelTree->topDownViewNodeCount, varGfxGpuLightGridVoxelTree->topDownViewNodes, "lightgrid voxel tree to-down nodes", 0);
  p_internalNodeBuffer = &varGfxGpuLightGridVoxelTree->internalNodeBuffer;
  varGfxWrappedBuffer = &varGfxGpuLightGridVoxelTree->internalNodeBuffer;
  Postload_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_internalNodeBuffer, GfxWrappedBuffer_Structured, 0x10u, varGfxGpuLightGridVoxelTree->internalNodeCount, varGfxGpuLightGridVoxelTree->internalNodes, "lightgrid voxel tree internal nodes", 0);
  varGfxWrappedBuffer = v10;
}

/*
==============
Postload_GfxGpuLightGridVoxelTreeArray
==============
*/
void Postload_GfxGpuLightGridVoxelTreeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxGpuLightGridVoxelTree *i; 

  v2 = count;
  Postload_Stream(streamStart, varGfxGpuLightGridVoxelTree, count << 7);
  for ( i = varGfxGpuLightGridVoxelTree; v2; --v2 )
  {
    varGfxGpuLightGridVoxelTree = i;
    Postload_GfxGpuLightGridVoxelTree(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_GfxGpuLightGridVoxelTreeStream
==============
*/
void Postload_GfxGpuLightGridVoxelTreeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  GfxGpuLightGridVoxelTree *v5; 
  GfxVoxelTreeHeader *v6; 
  GfxGpuLightGridVoxelTree *v7; 
  GfxVoxelTopDownViewNode *v8; 
  unsigned __int64 v9; 
  GfxGpuLightGridVoxelTree *v10; 
  GfxVoxelInternalNode *v11; 
  unsigned __int64 v12; 
  GfxWrappedBuffer *v13; 
  GfxWrappedBuffer *p_treeHeaderBuffer; 
  GfxWrappedBuffer *p_topDownViewNodeBuffer; 
  GfxWrappedBuffer *p_internalNodeBuffer; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 34862, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varGfxGpuLightGridVoxelTree;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x80ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x80ui64);
      g_streamPosGlob.pos += 128;
      DB_PushStreamPos(6u);
      v5 = varGfxGpuLightGridVoxelTree;
      if ( varGfxGpuLightGridVoxelTree->treeHeader )
      {
        v6 = varGfxVoxelTreeHeader;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        v5->treeHeader = (GfxVoxelTreeHeader *)g_streamPosGlob.pos;
        varGfxVoxelTreeHeader = (GfxVoxelTreeHeader *)g_streamPosGlob.pos;
        DB_IncStreamPos(0x40ui64);
        varGfxVoxelTreeHeader = v6;
      }
      DB_PopStreamPos();
      DB_PushStreamPos(7u);
      v7 = varGfxGpuLightGridVoxelTree;
      if ( varGfxGpuLightGridVoxelTree->topDownViewNodes )
      {
        v8 = varGfxVoxelTopDownViewNode;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v7->topDownViewNodes = (GfxVoxelTopDownViewNode *)g_streamPosGlob.pos;
        varGfxVoxelTopDownViewNode = (GfxVoxelTopDownViewNode *)g_streamPosGlob.pos;
        v9 = 12i64 * varGfxGpuLightGridVoxelTree->topDownViewNodeCount;
        if ( v9 )
        {
          if ( v9 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
            __debugbreak();
          DB_IncStreamPos(v9);
        }
        varGfxVoxelTopDownViewNode = v8;
      }
      DB_PopStreamPos();
      DB_PushStreamPos(7u);
      v10 = varGfxGpuLightGridVoxelTree;
      if ( varGfxGpuLightGridVoxelTree->internalNodes )
      {
        v11 = varGfxVoxelInternalNode;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v10->internalNodes = (GfxVoxelInternalNode *)g_streamPosGlob.pos;
        varGfxVoxelInternalNode = (GfxVoxelInternalNode *)g_streamPosGlob.pos;
        v12 = 16i64 * varGfxGpuLightGridVoxelTree->internalNodeCount;
        if ( v12 )
        {
          if ( v12 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
            __debugbreak();
          DB_IncStreamPos(v12);
        }
        varGfxVoxelInternalNode = v11;
      }
      DB_PopStreamPos();
      v13 = varGfxWrappedBuffer;
      p_treeHeaderBuffer = &varGfxGpuLightGridVoxelTree->treeHeaderBuffer;
      varGfxWrappedBuffer = &varGfxGpuLightGridVoxelTree->treeHeaderBuffer;
      Postload_GfxWrappedBuffer(NotAtStart);
      Load_GfxWrappedBuffer(p_treeHeaderBuffer, GfxWrappedBuffer_Structured, 0x40u, 1u, varGfxGpuLightGridVoxelTree->treeHeader, "lightgrid voxel tree header", 0);
      p_topDownViewNodeBuffer = &varGfxGpuLightGridVoxelTree->topDownViewNodeBuffer;
      varGfxWrappedBuffer = &varGfxGpuLightGridVoxelTree->topDownViewNodeBuffer;
      Postload_GfxWrappedBuffer(NotAtStart);
      Load_GfxWrappedBuffer(p_topDownViewNodeBuffer, GfxWrappedBuffer_Structured, 0xCu, varGfxGpuLightGridVoxelTree->topDownViewNodeCount, varGfxGpuLightGridVoxelTree->topDownViewNodes, "lightgrid voxel tree to-down nodes", 0);
      p_internalNodeBuffer = &varGfxGpuLightGridVoxelTree->internalNodeBuffer;
      varGfxWrappedBuffer = &varGfxGpuLightGridVoxelTree->internalNodeBuffer;
      Postload_GfxWrappedBuffer(NotAtStart);
      Load_GfxWrappedBuffer(p_internalNodeBuffer, GfxWrappedBuffer_Structured, 0x10u, varGfxGpuLightGridVoxelTree->internalNodeCount, varGfxGpuLightGridVoxelTree->internalNodes, "lightgrid voxel tree internal nodes", 0);
      pos = g_streamPosGlob.pos;
      varGfxGpuLightGridVoxelTree = (GfxGpuLightGridVoxelTree *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varGfxWrappedBuffer = v13;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxGpuLightGridZone
==============
*/
void Postload_GfxGpuLightGridZone(const DBStreamStart streamStart)
{
  if ( streamStart != (varGfxGpuLightGridZone != (GfxGpuLightGridZone *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxGpuLightGridZone, 0x5Cui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x5Cui64);
}

/*
==============
Postload_GfxGpuLightGridZoneArray
==============
*/
void Postload_GfxGpuLightGridZoneArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varGfxGpuLightGridZone, 92 * count);
}

/*
==============
Postload_GfxGpuLightGridZoneStream
==============
*/
void Postload_GfxGpuLightGridZoneStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxGpuLightGridZone *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 33648, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxGpuLightGridZone;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (GfxGpuLightGridZone *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x5Cui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x5Cui64);
      pos = g_streamPosGlob.pos + 92;
      g_streamPosGlob.pos = pos;
      v3 = (GfxGpuLightGridZone *)pos;
      varGfxGpuLightGridZone = (GfxGpuLightGridZone *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxHeightfield
==============
*/
void Postload_GfxHeightfield(const DBStreamStart streamStart)
{
  GfxImage **v2; 

  if ( streamStart != (varGfxHeightfield != (GfxHeightfield *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxHeightfield, 0x60ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x60ui64);
  v2 = varGfxImagePtr;
  varGfxImagePtr = &varGfxHeightfield->image;
  Postload_GfxImagePtr(NotAtStart);
  varGfxImagePtr = v2;
}

/*
==============
Postload_GfxHeightfieldArray
==============
*/
void Postload_GfxHeightfieldArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxHeightfield *i; 
  GfxHeightfield *v4; 
  GfxImage **v5; 

  v2 = count;
  Postload_Stream(streamStart, varGfxHeightfield, 96 * count);
  for ( i = varGfxHeightfield; v2; --v2 )
  {
    v4 = i;
    varGfxHeightfield = i;
    if ( i == (GfxHeightfield *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x60ui64);
      v4 = varGfxHeightfield;
    }
    v5 = varGfxImagePtr;
    varGfxImagePtr = &v4->image;
    Postload_GfxImagePtr(NotAtStart);
    ++i;
    varGfxImagePtr = v5;
  }
}

/*
==============
Postload_GfxHeightfieldStream
==============
*/
void Postload_GfxHeightfieldStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  GfxImage **v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 46607, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varGfxHeightfield;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x60ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x60ui64);
      v5 = varGfxImagePtr;
      g_streamPosGlob.pos += 96;
      varGfxImagePtr = &varGfxHeightfield->image;
      Postload_GfxImagePtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varGfxHeightfield = (GfxHeightfield *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varGfxImagePtr = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxLightAABB
==============
*/
void Postload_GfxLightAABB(const DBStreamStart streamStart)
{
  GfxLightAABB *v2; 
  GfxLightAABBNode *v3; 
  __int64 nodeCount; 
  GfxLightAABB *v5; 
  unsigned __int16 *v6; 
  unsigned __int16 *v7; 

  if ( streamStart != (varGfxLightAABB != (GfxLightAABB *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxLightAABB, 0x18ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x18ui64);
  v2 = varGfxLightAABB;
  if ( varGfxLightAABB->nodeArray )
  {
    v3 = varGfxLightAABBNode;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->nodeArray = (GfxLightAABBNode *)g_streamPosGlob.pos;
    varGfxLightAABBNode = (GfxLightAABBNode *)g_streamPosGlob.pos;
    nodeCount = varGfxLightAABB->nodeCount;
    if ( 28 * nodeCount )
      DB_IncStreamPos(28 * nodeCount);
    varGfxLightAABBNode = v3;
  }
  v5 = varGfxLightAABB;
  if ( varGfxLightAABB->lightArray )
  {
    v6 = varushort;
    v7 = AllocPostload_ushort();
    v5->lightArray = v7;
    varushort = v7;
    Postload_ushortArray(AtStart, varGfxLightAABB->lightCount);
    varushort = v6;
  }
}

/*
==============
Postload_GfxLightAABBArray
==============
*/
void Postload_GfxLightAABBArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxLightAABB *i; 

  v2 = count;
  Postload_Stream(streamStart, varGfxLightAABB, 24 * count);
  for ( i = varGfxLightAABB; v2; --v2 )
  {
    varGfxLightAABB = i;
    Postload_GfxLightAABB(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_GfxLightAABBNode
==============
*/
void Postload_GfxLightAABBNode(const DBStreamStart streamStart)
{
  if ( streamStart != (varGfxLightAABBNode != (GfxLightAABBNode *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxLightAABBNode, 0x1Cui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x1Cui64);
}

/*
==============
Postload_GfxLightAABBNodeArray
==============
*/
void Postload_GfxLightAABBNodeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varGfxLightAABBNode, 28 * count);
}

/*
==============
Postload_GfxLightAABBNodeStream
==============
*/
void Postload_GfxLightAABBNodeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxLightAABBNode *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 35893, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxLightAABBNode;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (GfxLightAABBNode *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x1Cui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x1Cui64);
      pos = g_streamPosGlob.pos + 28;
      g_streamPosGlob.pos = pos;
      v3 = (GfxLightAABBNode *)pos;
      varGfxLightAABBNode = (GfxLightAABBNode *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxLightAABBStream
==============
*/
void Postload_GfxLightAABBStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxLightAABB *v4; 
  GfxLightAABBNode *v5; 
  __int64 nodeCount; 
  GfxLightAABB *v7; 
  unsigned __int16 *v8; 
  unsigned __int16 *v9; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 36044, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxLightAABB;
    do
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x18ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x18ui64);
      v4 = varGfxLightAABB;
      g_streamPosGlob.pos += 24;
      if ( varGfxLightAABB->nodeArray )
      {
        v5 = varGfxLightAABBNode;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->nodeArray = (GfxLightAABBNode *)g_streamPosGlob.pos;
        varGfxLightAABBNode = (GfxLightAABBNode *)g_streamPosGlob.pos;
        nodeCount = varGfxLightAABB->nodeCount;
        if ( 28 * nodeCount )
          DB_IncStreamPos(28 * nodeCount);
        varGfxLightAABBNode = v5;
      }
      v7 = varGfxLightAABB;
      if ( varGfxLightAABB->lightArray )
      {
        v8 = varushort;
        v9 = AllocPostload_ushort();
        v7->lightArray = v9;
        varushort = v9;
        Postload_ushortArray(AtStart, varGfxLightAABB->lightCount);
        varushort = v8;
      }
      pos = g_streamPosGlob.pos;
      varGfxLightAABB = (GfxLightAABB *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxLightGridType
==============
*/
void Postload_GfxLightGridType(const DBStreamStart streamStart)
{
  if ( streamStart != (varGfxLightGridType != (GfxLightGridType *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxLightGridType, 1ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(1ui64);
}

/*
==============
Postload_GfxLightGridTypeArray
==============
*/
void Postload_GfxLightGridTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varGfxLightGridType, count);
}

/*
==============
Postload_GfxLightGridTypeStream
==============
*/
void Postload_GfxLightGridTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxLightGridType *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 42304, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxLightGridType;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (GfxLightGridType *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 1ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(1ui64);
      pos = g_streamPosGlob.pos + 1;
      g_streamPosGlob.pos = pos;
      v3 = (GfxLightGridType *)pos;
      varGfxLightGridType = (GfxLightGridType *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxLightGridVolumeAtlasDataTemp
==============
*/
void Postload_GfxLightGridVolumeAtlasDataTemp(const DBStreamStart streamStart)
{
  GfxImageRaw *v2; 
  GfxLightGridVolumeAtlasDataTemp *v3; 
  LightGridVolumePackingParams *v4; 
  unsigned __int64 v5; 
  GfxWrappedBuffer *v6; 
  GfxWrappedBuffer *p_m_packingParamsBuffer; 
  GfxLightGridVolumeAtlasDataTemp *v8; 
  LightGridVolumeTransformParams *v9; 
  unsigned __int64 v10; 
  GfxWrappedBuffer *v11; 
  GfxWrappedBuffer *p_m_transformParamsBuffer; 

  if ( streamStart != (varGfxLightGridVolumeAtlasDataTemp != (GfxLightGridVolumeAtlasDataTemp *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxLightGridVolumeAtlasDataTemp, 0xB0ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0xB0ui64);
  v2 = varGfxImageRawGpuTemp;
  varGfxImageRawGpuTemp = varGfxLightGridVolumeAtlasDataTemp->m_textures;
  Postload_GfxImageRawGpuTempArray(NotAtStart, 2ui64);
  varGfxImageRawGpuTemp = v2;
  DB_PushStreamPos(0xAu);
  v3 = varGfxLightGridVolumeAtlasDataTemp;
  if ( varGfxLightGridVolumeAtlasDataTemp->m_packingParams )
  {
    v4 = varLightGridVolumePackingParams;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v3->m_packingParams = (LightGridVolumePackingParams *)g_streamPosGlob.pos;
    varLightGridVolumePackingParams = (LightGridVolumePackingParams *)g_streamPosGlob.pos;
    v5 = 32i64 * varGfxLightGridVolumeAtlasDataTemp->m_numVolumes;
    if ( v5 )
    {
      if ( v5 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v5);
    }
    varLightGridVolumePackingParams = v4;
  }
  DB_PopStreamPos();
  v6 = varGfxWrappedBuffer;
  p_m_packingParamsBuffer = &varGfxLightGridVolumeAtlasDataTemp->m_packingParamsBuffer;
  varGfxWrappedBuffer = &varGfxLightGridVolumeAtlasDataTemp->m_packingParamsBuffer;
  Postload_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_m_packingParamsBuffer, GfxWrappedBuffer_Structured, 0x20u, varGfxLightGridVolumeAtlasDataTemp->m_numVolumes, varGfxLightGridVolumeAtlasDataTemp->m_packingParams, "static lgv packing params", 0);
  varGfxWrappedBuffer = v6;
  DB_PushStreamPos(0xAu);
  v8 = varGfxLightGridVolumeAtlasDataTemp;
  if ( varGfxLightGridVolumeAtlasDataTemp->m_transformParams )
  {
    v9 = varLightGridVolumeTransformParams;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v8->m_transformParams = (LightGridVolumeTransformParams *)g_streamPosGlob.pos;
    varLightGridVolumeTransformParams = (LightGridVolumeTransformParams *)g_streamPosGlob.pos;
    v10 = (unsigned __int64)varGfxLightGridVolumeAtlasDataTemp->m_numVolumes << 6;
    if ( v10 )
    {
      if ( v10 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v10);
    }
    varLightGridVolumeTransformParams = v9;
  }
  DB_PopStreamPos();
  v11 = varGfxWrappedBuffer;
  p_m_transformParamsBuffer = &varGfxLightGridVolumeAtlasDataTemp->m_transformParamsBuffer;
  varGfxWrappedBuffer = &varGfxLightGridVolumeAtlasDataTemp->m_transformParamsBuffer;
  Postload_GfxWrappedBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_m_transformParamsBuffer, GfxWrappedBuffer_Structured, 0x40u, varGfxLightGridVolumeAtlasDataTemp->m_numVolumes, varGfxLightGridVolumeAtlasDataTemp->m_transformParams, "static lgv transform params", 0);
  varGfxWrappedBuffer = v11;
}

/*
==============
Postload_GfxLightGridVolumeAtlasDataTempArray
==============
*/
void Postload_GfxLightGridVolumeAtlasDataTempArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxLightGridVolumeAtlasDataTemp *i; 

  v2 = count;
  Postload_Stream(streamStart, varGfxLightGridVolumeAtlasDataTemp, 176 * count);
  for ( i = varGfxLightGridVolumeAtlasDataTemp; v2; --v2 )
  {
    varGfxLightGridVolumeAtlasDataTemp = i;
    Postload_GfxLightGridVolumeAtlasDataTemp(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_GfxLightGridVolumeAtlasDataTempPtr
==============
*/
void Postload_GfxLightGridVolumeAtlasDataTempPtr(const DBStreamStart streamStart)
{
  GfxLightGridVolumeAtlasDataTemp **v2; 
  GfxLightGridVolumeAtlasDataTemp *v3; 
  unsigned __int8 *pos; 
  XZoneHandleUnique CurrentZoneLoadHandleUnique; 

  if ( streamStart != (varGfxLightGridVolumeAtlasDataTempPtr != (GfxLightGridVolumeAtlasDataTemp **)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxLightGridVolumeAtlasDataTempPtr, 8ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(8ui64);
  v2 = varGfxLightGridVolumeAtlasDataTempPtr;
  if ( *varGfxLightGridVolumeAtlasDataTempPtr )
  {
    v3 = varGfxLightGridVolumeAtlasDataTemp;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    pos = g_streamPosGlob.pos;
    *v2 = (GfxLightGridVolumeAtlasDataTemp *)g_streamPosGlob.pos;
    varGfxLightGridVolumeAtlasDataTemp = (GfxLightGridVolumeAtlasDataTemp *)pos;
    Postload_GfxLightGridVolumeAtlasDataTemp(AtStart);
    CurrentZoneLoadHandleUnique = DB_Zones_GetCurrentZoneLoadHandleUnique();
    DB_ScheduleBackendCallback<GfxLightGridVolumeAtlasDataTemp>(CurrentZoneLoadHandleUnique, RB_ProcessGfxLightGridVolumeAtlasData, varGfxLightGridVolumeAtlasDataTemp);
    *v2 = NULL;
    varGfxLightGridVolumeAtlasDataTemp = v3;
  }
}

/*
==============
Postload_GfxLightGridVolumeAtlasDataTempPtrArray
==============
*/
void Postload_GfxLightGridVolumeAtlasDataTempPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxLightGridVolumeAtlasDataTemp **i; 
  GfxLightGridVolumeAtlasDataTemp **v4; 
  GfxLightGridVolumeAtlasDataTemp *v5; 
  XZoneHandleUnique CurrentZoneLoadHandleUnique; 

  v2 = count;
  Postload_Stream(streamStart, varGfxLightGridVolumeAtlasDataTempPtr, 8 * count);
  for ( i = varGfxLightGridVolumeAtlasDataTempPtr; v2; --v2 )
  {
    v4 = i;
    varGfxLightGridVolumeAtlasDataTempPtr = i;
    if ( i == (GfxLightGridVolumeAtlasDataTemp **)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 8ui64);
      v4 = varGfxLightGridVolumeAtlasDataTempPtr;
    }
    if ( *v4 )
    {
      v5 = varGfxLightGridVolumeAtlasDataTemp;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      *v4 = (GfxLightGridVolumeAtlasDataTemp *)g_streamPosGlob.pos;
      varGfxLightGridVolumeAtlasDataTemp = (GfxLightGridVolumeAtlasDataTemp *)g_streamPosGlob.pos;
      Postload_GfxLightGridVolumeAtlasDataTemp(AtStart);
      CurrentZoneLoadHandleUnique = DB_Zones_GetCurrentZoneLoadHandleUnique();
      DB_ScheduleBackendCallback<GfxLightGridVolumeAtlasDataTemp>(CurrentZoneLoadHandleUnique, RB_ProcessGfxLightGridVolumeAtlasData, varGfxLightGridVolumeAtlasDataTemp);
      *v4 = NULL;
      varGfxLightGridVolumeAtlasDataTemp = v5;
    }
    ++i;
  }
}

/*
==============
Postload_GfxLightGridVolumeAtlasDataTempPtrStream
==============
*/
void Postload_GfxLightGridVolumeAtlasDataTempPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxLightGridVolumeAtlasDataTemp **v3; 
  unsigned __int8 *pos; 
  GfxLightGridVolumeAtlasDataTemp **v5; 
  GfxLightGridVolumeAtlasDataTemp *v6; 
  XZoneHandleUnique CurrentZoneLoadHandleUnique; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 40971, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxLightGridVolumeAtlasDataTempPtr;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (GfxLightGridVolumeAtlasDataTemp **)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 8ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(8ui64);
      v5 = varGfxLightGridVolumeAtlasDataTempPtr;
      pos = g_streamPosGlob.pos + 8;
      g_streamPosGlob.pos += 8;
      if ( *varGfxLightGridVolumeAtlasDataTempPtr )
      {
        v6 = varGfxLightGridVolumeAtlasDataTemp;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        *v5 = (GfxLightGridVolumeAtlasDataTemp *)g_streamPosGlob.pos;
        varGfxLightGridVolumeAtlasDataTemp = (GfxLightGridVolumeAtlasDataTemp *)g_streamPosGlob.pos;
        Postload_GfxLightGridVolumeAtlasDataTemp(AtStart);
        CurrentZoneLoadHandleUnique = DB_Zones_GetCurrentZoneLoadHandleUnique();
        DB_ScheduleBackendCallback<GfxLightGridVolumeAtlasDataTemp>(CurrentZoneLoadHandleUnique, RB_ProcessGfxLightGridVolumeAtlasData, varGfxLightGridVolumeAtlasDataTemp);
        *v5 = NULL;
        pos = g_streamPosGlob.pos;
        varGfxLightGridVolumeAtlasDataTemp = v6;
      }
      varGfxLightGridVolumeAtlasDataTempPtr = (GfxLightGridVolumeAtlasDataTemp **)pos;
      v3 = (GfxLightGridVolumeAtlasDataTemp **)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxLightGridVolumeAtlasDataTempStream
==============
*/
void Postload_GfxLightGridVolumeAtlasDataTempStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  GfxImageRaw *v5; 
  GfxLightGridVolumeAtlasDataTemp *v6; 
  LightGridVolumePackingParams *v7; 
  unsigned __int64 v8; 
  GfxWrappedBuffer *v9; 
  GfxWrappedBuffer *p_m_packingParamsBuffer; 
  GfxLightGridVolumeAtlasDataTemp *v11; 
  LightGridVolumeTransformParams *v12; 
  unsigned __int64 v13; 
  GfxWrappedBuffer *v14; 
  GfxWrappedBuffer *p_m_transformParamsBuffer; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 42903, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varGfxLightGridVolumeAtlasDataTemp;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0xB0ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0xB0ui64);
      v5 = varGfxImageRawGpuTemp;
      g_streamPosGlob.pos += 176;
      varGfxImageRawGpuTemp = varGfxLightGridVolumeAtlasDataTemp->m_textures;
      Postload_GfxImageRawGpuTempArray(NotAtStart, 2ui64);
      varGfxImageRawGpuTemp = v5;
      DB_PushStreamPos(0xAu);
      v6 = varGfxLightGridVolumeAtlasDataTemp;
      if ( varGfxLightGridVolumeAtlasDataTemp->m_packingParams )
      {
        v7 = varLightGridVolumePackingParams;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v6->m_packingParams = (LightGridVolumePackingParams *)g_streamPosGlob.pos;
        varLightGridVolumePackingParams = (LightGridVolumePackingParams *)g_streamPosGlob.pos;
        v8 = 32i64 * varGfxLightGridVolumeAtlasDataTemp->m_numVolumes;
        if ( v8 )
        {
          if ( v8 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
            __debugbreak();
          DB_IncStreamPos(v8);
        }
        varLightGridVolumePackingParams = v7;
      }
      DB_PopStreamPos();
      v9 = varGfxWrappedBuffer;
      p_m_packingParamsBuffer = &varGfxLightGridVolumeAtlasDataTemp->m_packingParamsBuffer;
      varGfxWrappedBuffer = &varGfxLightGridVolumeAtlasDataTemp->m_packingParamsBuffer;
      Postload_GfxWrappedBuffer(NotAtStart);
      Load_GfxWrappedBuffer(p_m_packingParamsBuffer, GfxWrappedBuffer_Structured, 0x20u, varGfxLightGridVolumeAtlasDataTemp->m_numVolumes, varGfxLightGridVolumeAtlasDataTemp->m_packingParams, "static lgv packing params", 0);
      varGfxWrappedBuffer = v9;
      DB_PushStreamPos(0xAu);
      v11 = varGfxLightGridVolumeAtlasDataTemp;
      if ( varGfxLightGridVolumeAtlasDataTemp->m_transformParams )
      {
        v12 = varLightGridVolumeTransformParams;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v11->m_transformParams = (LightGridVolumeTransformParams *)g_streamPosGlob.pos;
        varLightGridVolumeTransformParams = (LightGridVolumeTransformParams *)g_streamPosGlob.pos;
        v13 = (unsigned __int64)varGfxLightGridVolumeAtlasDataTemp->m_numVolumes << 6;
        if ( v13 )
        {
          if ( v13 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
            __debugbreak();
          DB_IncStreamPos(v13);
        }
        varLightGridVolumeTransformParams = v12;
      }
      DB_PopStreamPos();
      v14 = varGfxWrappedBuffer;
      p_m_transformParamsBuffer = &varGfxLightGridVolumeAtlasDataTemp->m_transformParamsBuffer;
      varGfxWrappedBuffer = &varGfxLightGridVolumeAtlasDataTemp->m_transformParamsBuffer;
      Postload_GfxWrappedBuffer(NotAtStart);
      Load_GfxWrappedBuffer(p_m_transformParamsBuffer, GfxWrappedBuffer_Structured, 0x40u, varGfxLightGridVolumeAtlasDataTemp->m_numVolumes, varGfxLightGridVolumeAtlasDataTemp->m_transformParams, "static lgv transform params", 0);
      pos = g_streamPosGlob.pos;
      varGfxLightGridVolumeAtlasDataTemp = (GfxLightGridVolumeAtlasDataTemp *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varGfxWrappedBuffer = v14;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxLightViewFrustum
==============
*/
void Postload_GfxLightViewFrustum(const DBStreamStart streamStart)
{
  GfxLightViewFrustum *v2; 
  vec4_t *v3; 
  vec4_t *v4; 
  GfxLightViewFrustum *v5; 
  unsigned __int8 *v6; 
  unsigned __int8 *v7; 
  GfxLightViewFrustum *v8; 
  vec3_t *v9; 
  vec3_t *v10; 

  if ( streamStart != (varGfxLightViewFrustum != (GfxLightViewFrustum *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxLightViewFrustum, 0x20ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x20ui64);
  v2 = varGfxLightViewFrustum;
  if ( varGfxLightViewFrustum->planes )
  {
    v3 = varvec4_t;
    v4 = AllocPostload_vec4_t();
    v2->planes = v4;
    varvec4_t = v4;
    Postload_vec4_tArray(AtStart, varGfxLightViewFrustum->planeCount);
    varvec4_t = v3;
  }
  v5 = varGfxLightViewFrustum;
  if ( varGfxLightViewFrustum->indices )
  {
    v6 = varbyte;
    v7 = AllocPostload_byte();
    v5->indices = v7;
    varbyte = v7;
    Postload_byteArray(AtStart, varGfxLightViewFrustum->indexCount);
    varbyte = v6;
  }
  v8 = varGfxLightViewFrustum;
  if ( varGfxLightViewFrustum->vertices )
  {
    v9 = varvec3_t;
    v10 = AllocPostload_vec3_t();
    v8->vertices = v10;
    varvec3_t = v10;
    Postload_vec3_tArray(AtStart, varGfxLightViewFrustum->vertexCount);
    varvec3_t = v9;
  }
}

/*
==============
Postload_GfxLightViewFrustumArray
==============
*/
void Postload_GfxLightViewFrustumArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxLightViewFrustum *i; 

  v2 = count;
  Postload_Stream(streamStart, varGfxLightViewFrustum, 32 * count);
  for ( i = varGfxLightViewFrustum; v2; --v2 )
  {
    varGfxLightViewFrustum = i;
    Postload_GfxLightViewFrustum(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_GfxLightViewFrustumStream
==============
*/
void Postload_GfxLightViewFrustumStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxLightViewFrustum *pos; 
  GfxLightViewFrustum *v4; 
  vec4_t *v5; 
  vec4_t *v6; 
  unsigned __int8 *v7; 
  unsigned __int8 *v8; 
  vec3_t *v9; 
  vec3_t *v10; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 47307, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = varGfxLightViewFrustum;
    do
    {
      if ( pos != (GfxLightViewFrustum *)g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x20ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x20ui64);
      v4 = varGfxLightViewFrustum;
      g_streamPosGlob.pos += 32;
      if ( varGfxLightViewFrustum->planes )
      {
        v5 = varvec4_t;
        v6 = AllocPostload_vec4_t();
        v4->planes = v6;
        varvec4_t = v6;
        Postload_vec4_tArray(AtStart, varGfxLightViewFrustum->planeCount);
        v4 = varGfxLightViewFrustum;
        varvec4_t = v5;
      }
      if ( v4->indices )
      {
        v7 = varbyte;
        v8 = AllocPostload_byte();
        v4->indices = v8;
        varbyte = v8;
        Postload_byteArray(AtStart, varGfxLightViewFrustum->indexCount);
        v4 = varGfxLightViewFrustum;
        varbyte = v7;
      }
      if ( v4->vertices )
      {
        v9 = varvec3_t;
        v10 = AllocPostload_vec3_t();
        v4->vertices = v10;
        varvec3_t = v10;
        Postload_vec3_tArray(AtStart, varGfxLightViewFrustum->vertexCount);
        varvec3_t = v9;
      }
      pos = (GfxLightViewFrustum *)g_streamPosGlob.pos;
      varGfxLightViewFrustum = (GfxLightViewFrustum *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxLightmapAtlasDataTemp
==============
*/
void Postload_GfxLightmapAtlasDataTemp(const DBStreamStart streamStart)
{
  GfxLightmapRaw *v2; 
  GfxLightmapRaw *lightmaps; 
  __int64 v4; 
  GfxLightmapRaw *v5; 
  GfxImageRaw *v6; 

  if ( streamStart != (varGfxLightmapAtlasDataTemp != (GfxLightmapAtlasDataTemp *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxLightmapAtlasDataTemp, 0xF10ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0xF10ui64);
  v2 = varGfxLightmapRaw;
  lightmaps = varGfxLightmapAtlasDataTemp->lightmaps;
  varGfxLightmapRaw = varGfxLightmapAtlasDataTemp->lightmaps;
  if ( varGfxLightmapAtlasDataTemp->lightmaps == (GfxLightmapRaw *)g_streamPosGlob.pos )
  {
    DB_PatchMem_ValidatePostloadStream(NotAtStart, varGfxLightmapAtlasDataTemp->lightmaps, 0xF00ui64);
    lightmaps = varGfxLightmapRaw;
  }
  v4 = 32i64;
  do
  {
    v5 = lightmaps;
    varGfxLightmapRaw = lightmaps;
    if ( lightmaps == (GfxLightmapRaw *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, lightmaps, 0x78ui64);
      v5 = varGfxLightmapRaw;
    }
    v6 = varGfxImageRawGpuTemp;
    varGfxImageRawGpuTemp = (GfxImageRaw *)v5;
    Postload_GfxImageRawGpuTempArray(NotAtStart, 3ui64);
    ++lightmaps;
    varGfxImageRawGpuTemp = v6;
    --v4;
  }
  while ( v4 );
  varGfxLightmapRaw = v2;
}

/*
==============
Postload_GfxLightmapAtlasDataTempArray
==============
*/
void Postload_GfxLightmapAtlasDataTempArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxLightmapAtlasDataTemp *i; 

  v2 = count;
  Postload_Stream(streamStart, varGfxLightmapAtlasDataTemp, 3856 * count);
  for ( i = varGfxLightmapAtlasDataTemp; v2; --v2 )
  {
    varGfxLightmapAtlasDataTemp = i;
    Postload_GfxLightmapAtlasDataTemp(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_GfxLightmapAtlasDataTempPtr
==============
*/
void Postload_GfxLightmapAtlasDataTempPtr(const DBStreamStart streamStart)
{
  GfxLightmapAtlasDataTemp **v2; 
  GfxLightmapAtlasDataTemp *v3; 
  unsigned __int8 *pos; 
  XZoneHandleUnique CurrentZoneLoadHandleUnique; 

  if ( streamStart != (varGfxLightmapAtlasDataTempPtr != (GfxLightmapAtlasDataTemp **)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxLightmapAtlasDataTempPtr, 8ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(8ui64);
  v2 = varGfxLightmapAtlasDataTempPtr;
  if ( *varGfxLightmapAtlasDataTempPtr )
  {
    v3 = varGfxLightmapAtlasDataTemp;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    pos = g_streamPosGlob.pos;
    *v2 = (GfxLightmapAtlasDataTemp *)g_streamPosGlob.pos;
    varGfxLightmapAtlasDataTemp = (GfxLightmapAtlasDataTemp *)pos;
    Postload_GfxLightmapAtlasDataTemp(AtStart);
    CurrentZoneLoadHandleUnique = DB_Zones_GetCurrentZoneLoadHandleUnique();
    DB_ScheduleBackendCallback<GfxLightmapAtlasDataTemp>(CurrentZoneLoadHandleUnique, RB_ProcessGfxLightmapAtlasData, varGfxLightmapAtlasDataTemp);
    *v2 = NULL;
    varGfxLightmapAtlasDataTemp = v3;
  }
}

/*
==============
Postload_GfxLightmapAtlasDataTempPtrArray
==============
*/
void Postload_GfxLightmapAtlasDataTempPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxLightmapAtlasDataTemp **i; 
  GfxLightmapAtlasDataTemp **v4; 
  GfxLightmapAtlasDataTemp *v5; 
  XZoneHandleUnique CurrentZoneLoadHandleUnique; 

  v2 = count;
  Postload_Stream(streamStart, varGfxLightmapAtlasDataTempPtr, 8 * count);
  for ( i = varGfxLightmapAtlasDataTempPtr; v2; --v2 )
  {
    v4 = i;
    varGfxLightmapAtlasDataTempPtr = i;
    if ( i == (GfxLightmapAtlasDataTemp **)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 8ui64);
      v4 = varGfxLightmapAtlasDataTempPtr;
    }
    if ( *v4 )
    {
      v5 = varGfxLightmapAtlasDataTemp;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      *v4 = (GfxLightmapAtlasDataTemp *)g_streamPosGlob.pos;
      varGfxLightmapAtlasDataTemp = (GfxLightmapAtlasDataTemp *)g_streamPosGlob.pos;
      Postload_GfxLightmapAtlasDataTemp(AtStart);
      CurrentZoneLoadHandleUnique = DB_Zones_GetCurrentZoneLoadHandleUnique();
      DB_ScheduleBackendCallback<GfxLightmapAtlasDataTemp>(CurrentZoneLoadHandleUnique, RB_ProcessGfxLightmapAtlasData, varGfxLightmapAtlasDataTemp);
      *v4 = NULL;
      varGfxLightmapAtlasDataTemp = v5;
    }
    ++i;
  }
}

/*
==============
Postload_GfxLightmapAtlasDataTempPtrStream
==============
*/
void Postload_GfxLightmapAtlasDataTempPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxLightmapAtlasDataTemp **v3; 
  unsigned __int8 *pos; 
  GfxLightmapAtlasDataTemp **v5; 
  GfxLightmapAtlasDataTemp *v6; 
  XZoneHandleUnique CurrentZoneLoadHandleUnique; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 40888, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxLightmapAtlasDataTempPtr;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (GfxLightmapAtlasDataTemp **)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 8ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(8ui64);
      v5 = varGfxLightmapAtlasDataTempPtr;
      pos = g_streamPosGlob.pos + 8;
      g_streamPosGlob.pos += 8;
      if ( *varGfxLightmapAtlasDataTempPtr )
      {
        v6 = varGfxLightmapAtlasDataTemp;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        *v5 = (GfxLightmapAtlasDataTemp *)g_streamPosGlob.pos;
        varGfxLightmapAtlasDataTemp = (GfxLightmapAtlasDataTemp *)g_streamPosGlob.pos;
        Postload_GfxLightmapAtlasDataTemp(AtStart);
        CurrentZoneLoadHandleUnique = DB_Zones_GetCurrentZoneLoadHandleUnique();
        DB_ScheduleBackendCallback<GfxLightmapAtlasDataTemp>(CurrentZoneLoadHandleUnique, RB_ProcessGfxLightmapAtlasData, varGfxLightmapAtlasDataTemp);
        *v5 = NULL;
        pos = g_streamPosGlob.pos;
        varGfxLightmapAtlasDataTemp = v6;
      }
      varGfxLightmapAtlasDataTempPtr = (GfxLightmapAtlasDataTemp **)pos;
      v3 = (GfxLightmapAtlasDataTemp **)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxLightmapAtlasDataTempStream
==============
*/
void Postload_GfxLightmapAtlasDataTempStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  unsigned __int8 *v5; 
  GfxLightmapRaw *v6; 
  GfxLightmapRaw *lightmaps; 
  __int64 v8; 
  GfxLightmapRaw *v9; 
  GfxImageRaw *v10; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 42624, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varGfxLightmapAtlasDataTemp;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0xF10ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0xF10ui64);
      v5 = g_streamPosGlob.pos + 3856;
      v6 = varGfxLightmapRaw;
      lightmaps = varGfxLightmapAtlasDataTemp->lightmaps;
      g_streamPosGlob.pos = v5;
      varGfxLightmapRaw = varGfxLightmapAtlasDataTemp->lightmaps;
      if ( varGfxLightmapAtlasDataTemp->lightmaps == (GfxLightmapRaw *)v5 )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, varGfxLightmapAtlasDataTemp->lightmaps, 0xF00ui64);
        v5 = g_streamPosGlob.pos;
        lightmaps = varGfxLightmapRaw;
      }
      v8 = 32i64;
      while ( 1 )
      {
        varGfxLightmapRaw = lightmaps;
        v9 = lightmaps;
        if ( lightmaps == (GfxLightmapRaw *)v5 )
        {
          DB_PatchMem_ValidatePostloadStream(NotAtStart, lightmaps, 0x78ui64);
          v9 = varGfxLightmapRaw;
        }
        v10 = varGfxImageRawGpuTemp;
        varGfxImageRawGpuTemp = (GfxImageRaw *)v9;
        Postload_GfxImageRawGpuTempArray(NotAtStart, 3ui64);
        ++lightmaps;
        varGfxImageRawGpuTemp = v10;
        if ( !--v8 )
          break;
        v5 = g_streamPosGlob.pos;
      }
      pos = g_streamPosGlob.pos;
      varGfxLightmapAtlasDataTemp = (GfxLightmapAtlasDataTemp *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varGfxLightmapRaw = v6;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxLightmapRaw
==============
*/
void Postload_GfxLightmapRaw(const DBStreamStart streamStart)
{
  GfxImageRaw *v2; 

  if ( streamStart != (varGfxLightmapRaw != (GfxLightmapRaw *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxLightmapRaw, 0x78ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x78ui64);
  v2 = varGfxImageRawGpuTemp;
  varGfxImageRawGpuTemp = (GfxImageRaw *)varGfxLightmapRaw;
  Postload_GfxImageRawGpuTempArray(NotAtStart, 3ui64);
  varGfxImageRawGpuTemp = v2;
}

/*
==============
Postload_GfxLightmapRawArray
==============
*/
void Postload_GfxLightmapRawArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxLightmapRaw *i; 
  GfxLightmapRaw *v4; 
  GfxImageRaw *v5; 

  v2 = count;
  Postload_Stream(streamStart, varGfxLightmapRaw, 120 * count);
  for ( i = varGfxLightmapRaw; v2; --v2 )
  {
    v4 = i;
    varGfxLightmapRaw = i;
    if ( i == (GfxLightmapRaw *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x78ui64);
      v4 = varGfxLightmapRaw;
    }
    v5 = varGfxImageRawGpuTemp;
    varGfxImageRawGpuTemp = (GfxImageRaw *)v4;
    Postload_GfxImageRawGpuTempArray(NotAtStart, 3ui64);
    ++i;
    varGfxImageRawGpuTemp = v5;
  }
}

/*
==============
Postload_GfxLightmapRawStream
==============
*/
void Postload_GfxLightmapRawStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  GfxImageRaw *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 42456, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varGfxLightmapRaw;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x78ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x78ui64);
      v5 = varGfxImageRawGpuTemp;
      g_streamPosGlob.pos += 120;
      varGfxImageRawGpuTemp = (GfxImageRaw *)varGfxLightmapRaw;
      Postload_GfxImageRawGpuTempArray(NotAtStart, 3ui64);
      pos = g_streamPosGlob.pos;
      varGfxLightmapRaw = (GfxLightmapRaw *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varGfxImageRawGpuTemp = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxLightmapType
==============
*/
void Postload_GfxLightmapType(const DBStreamStart streamStart)
{
  if ( streamStart != (varGfxLightmapType != (GfxLightmapType *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxLightmapType, 4ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(4ui64);
}

/*
==============
Postload_GfxLightmapTypeArray
==============
*/
void Postload_GfxLightmapTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varGfxLightmapType, 4 * count);
}

/*
==============
Postload_GfxLightmapTypeStream
==============
*/
void Postload_GfxLightmapTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxLightmapType *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 42380, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxLightmapType;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (GfxLightmapType *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 4ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(4ui64);
      pos = g_streamPosGlob.pos + 4;
      g_streamPosGlob.pos = pos;
      v3 = (GfxLightmapType *)pos;
      varGfxLightmapType = (GfxLightmapType *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxMapEntLookup
==============
*/
void Postload_GfxMapEntLookup(const DBStreamStart streamStart)
{
  if ( streamStart != (varGfxMapEntLookup != (GfxMapEntLookup *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxMapEntLookup, 0x1Cui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x1Cui64);
}

/*
==============
Postload_GfxMapEntLookupArray
==============
*/
void Postload_GfxMapEntLookupArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varGfxMapEntLookup, 28 * count);
}

/*
==============
Postload_GfxMapEntLookupStream
==============
*/
void Postload_GfxMapEntLookupStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxMapEntLookup *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 47620, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxMapEntLookup;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (GfxMapEntLookup *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x1Cui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x1Cui64);
      pos = g_streamPosGlob.pos + 28;
      g_streamPosGlob.pos = pos;
      v3 = (GfxMapEntLookup *)pos;
      varGfxMapEntLookup = (GfxMapEntLookup *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxMayhemSelfVis
==============
*/
void Postload_GfxMayhemSelfVis(const DBStreamStart streamStart)
{
  GfxMayhemSelfVis *v2; 
  unsigned __int8 *v3; 
  unsigned __int8 *v4; 
  GfxWrappedRWBuffer *v5; 
  GfxWrappedRWBuffer *p_selfVisBuffer; 

  if ( streamStart != (varGfxMayhemSelfVis != (GfxMayhemSelfVis *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxMayhemSelfVis, 0x48ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x48ui64);
  DB_PushStreamPos(7u);
  v2 = varGfxMayhemSelfVis;
  if ( varGfxMayhemSelfVis->selfVis )
  {
    v3 = varalignCompBufByte_t;
    v4 = AllocPostload_alignCompBufByte_t();
    v2->selfVis = v4;
    varalignCompBufByte_t = v4;
    Postload_alignCompBufByte_tArray(AtStart, varGfxMayhemSelfVis->selfVisBufferSize);
    varalignCompBufByte_t = v3;
  }
  DB_PopStreamPos();
  v5 = varGfxWrappedRWBuffer;
  p_selfVisBuffer = &varGfxMayhemSelfVis->selfVisBuffer;
  varGfxWrappedRWBuffer = &varGfxMayhemSelfVis->selfVisBuffer;
  Postload_GfxWrappedRWBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_selfVisBuffer, GfxWrappedBuffer_Raw, varGfxMayhemSelfVis->selfVisBufferSize, 1u, varGfxMayhemSelfVis->selfVis, "mayhem selfvis buffer", 0);
  varGfxWrappedRWBuffer = v5;
}

/*
==============
Postload_GfxMayhemSelfVisArray
==============
*/
void Postload_GfxMayhemSelfVisArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxMayhemSelfVis *i; 

  v2 = count;
  Postload_Stream(streamStart, varGfxMayhemSelfVis, 72 * count);
  for ( i = varGfxMayhemSelfVis; v2; --v2 )
  {
    varGfxMayhemSelfVis = i;
    Postload_GfxMayhemSelfVis(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_GfxMayhemSelfVisStream
==============
*/
void Postload_GfxMayhemSelfVisStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  GfxMayhemSelfVis *v5; 
  unsigned __int8 *v6; 
  unsigned __int8 *v7; 
  GfxWrappedRWBuffer *v8; 
  GfxWrappedRWBuffer *p_selfVisBuffer; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 50360, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varGfxMayhemSelfVis;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x48ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x48ui64);
      g_streamPosGlob.pos += 72;
      DB_PushStreamPos(7u);
      v5 = varGfxMayhemSelfVis;
      if ( varGfxMayhemSelfVis->selfVis )
      {
        v6 = varalignCompBufByte_t;
        v7 = AllocPostload_alignCompBufByte_t();
        v5->selfVis = v7;
        varalignCompBufByte_t = v7;
        Postload_alignCompBufByte_tArray(AtStart, varGfxMayhemSelfVis->selfVisBufferSize);
        varalignCompBufByte_t = v6;
      }
      DB_PopStreamPos();
      v8 = varGfxWrappedRWBuffer;
      p_selfVisBuffer = &varGfxMayhemSelfVis->selfVisBuffer;
      varGfxWrappedRWBuffer = &varGfxMayhemSelfVis->selfVisBuffer;
      Postload_GfxWrappedRWBuffer(NotAtStart);
      Load_GfxWrappedBuffer(p_selfVisBuffer, GfxWrappedBuffer_Raw, varGfxMayhemSelfVis->selfVisBufferSize, 1u, varGfxMayhemSelfVis->selfVis, "mayhem selfvis buffer", 0);
      pos = g_streamPosGlob.pos;
      varGfxMayhemSelfVis = (GfxMayhemSelfVis *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varGfxWrappedRWBuffer = v8;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxModelLightmapInst
==============
*/
void Postload_GfxModelLightmapInst(const DBStreamStart streamStart)
{
  if ( streamStart != (varGfxModelLightmapInst != (GfxModelLightmapInst *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxModelLightmapInst, 0x14ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x14ui64);
}

/*
==============
Postload_GfxModelLightmapInstArray
==============
*/
void Postload_GfxModelLightmapInstArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varGfxModelLightmapInst, 20 * count);
}

/*
==============
Postload_GfxModelLightmapInstStream
==============
*/
void Postload_GfxModelLightmapInstStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxModelLightmapInst *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 47452, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxModelLightmapInst;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (GfxModelLightmapInst *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x14ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x14ui64);
      pos = g_streamPosGlob.pos + 20;
      g_streamPosGlob.pos = pos;
      v3 = (GfxModelLightmapInst *)pos;
      varGfxModelLightmapInst = (GfxModelLightmapInst *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxPortal
==============
*/
void Postload_GfxPortal(const DBStreamStart streamStart)
{
  GfxPortal *v2; 
  vec3_t *v3; 
  vec3_t *v4; 

  if ( streamStart != (varGfxPortal != (GfxPortal *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxPortal, 0x50ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x50ui64);
  v2 = varGfxPortal;
  if ( varGfxPortal->vertices )
  {
    v3 = varvec3_t;
    v4 = AllocPostload_vec3_t();
    v2->vertices = v4;
    varvec3_t = v4;
    Postload_vec3_tArray(AtStart, varGfxPortal->vertexCount);
    varvec3_t = v3;
  }
}

/*
==============
Postload_GfxPortalArray
==============
*/
void Postload_GfxPortalArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxPortal *i; 
  GfxPortal *v4; 
  vec3_t *v5; 
  vec3_t *v6; 

  v2 = count;
  Postload_Stream(streamStart, varGfxPortal, 80 * count);
  for ( i = varGfxPortal; v2; --v2 )
  {
    v4 = i;
    varGfxPortal = i;
    if ( i == (GfxPortal *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x50ui64);
      v4 = varGfxPortal;
    }
    if ( v4->vertices )
    {
      v5 = varvec3_t;
      v6 = AllocPostload_vec3_t();
      v4->vertices = v6;
      varvec3_t = v6;
      Postload_vec3_tArray(AtStart, varGfxPortal->vertexCount);
      varvec3_t = v5;
    }
    ++i;
  }
}

/*
==============
Postload_GfxPortalStream
==============
*/
void Postload_GfxPortalStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxPortal *v3; 
  GfxPortal *pos; 
  GfxPortal *v5; 
  vec3_t *v6; 
  vec3_t *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 33236, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxPortal;
    pos = (GfxPortal *)g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x50ui64);
        pos = (GfxPortal *)g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x50ui64);
      v5 = varGfxPortal;
      pos = (GfxPortal *)(g_streamPosGlob.pos + 80);
      g_streamPosGlob.pos += 80;
      if ( varGfxPortal->vertices )
      {
        v6 = varvec3_t;
        v7 = AllocPostload_vec3_t();
        v5->vertices = v7;
        varvec3_t = v7;
        Postload_vec3_tArray(AtStart, varGfxPortal->vertexCount);
        pos = (GfxPortal *)g_streamPosGlob.pos;
        varvec3_t = v6;
      }
      varGfxPortal = pos;
      v3 = pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxPrecomputedSkyIllumination
==============
*/
void Postload_GfxPrecomputedSkyIllumination(const DBStreamStart streamStart)
{
  GfxImage **v2; 

  if ( streamStart != (varGfxPrecomputedSkyIllumination != (GfxPrecomputedSkyIllumination *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxPrecomputedSkyIllumination, 0x60ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x60ui64);
  v2 = varGfxImagePtr;
  varGfxImagePtr = &varGfxPrecomputedSkyIllumination->detailMask;
  Postload_GfxImagePtr(NotAtStart);
  varGfxImagePtr = &varGfxPrecomputedSkyIllumination->heightMap;
  Postload_GfxImagePtr(NotAtStart);
  varGfxImagePtr = &varGfxPrecomputedSkyIllumination->SVDCoefficient;
  Postload_GfxImagePtr(NotAtStart);
  varGfxImagePtr = &varGfxPrecomputedSkyIllumination->SVDBasis;
  Postload_GfxImagePtr(NotAtStart);
  varGfxImagePtr = v2;
}

/*
==============
Postload_GfxPrecomputedSkyIlluminationArray
==============
*/
void Postload_GfxPrecomputedSkyIlluminationArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxPrecomputedSkyIllumination *i; 
  GfxPrecomputedSkyIllumination *v4; 
  GfxImage **v5; 

  v2 = count;
  Postload_Stream(streamStart, varGfxPrecomputedSkyIllumination, 96 * count);
  for ( i = varGfxPrecomputedSkyIllumination; v2; --v2 )
  {
    v4 = i;
    varGfxPrecomputedSkyIllumination = i;
    if ( i == (GfxPrecomputedSkyIllumination *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x60ui64);
      v4 = varGfxPrecomputedSkyIllumination;
    }
    v5 = varGfxImagePtr;
    varGfxImagePtr = &v4->detailMask;
    Postload_GfxImagePtr(NotAtStart);
    varGfxImagePtr = &varGfxPrecomputedSkyIllumination->heightMap;
    Postload_GfxImagePtr(NotAtStart);
    varGfxImagePtr = &varGfxPrecomputedSkyIllumination->SVDCoefficient;
    Postload_GfxImagePtr(NotAtStart);
    varGfxImagePtr = &varGfxPrecomputedSkyIllumination->SVDBasis;
    Postload_GfxImagePtr(NotAtStart);
    ++i;
    varGfxImagePtr = v5;
  }
}

/*
==============
Postload_GfxPrecomputedSkyIlluminationStream
==============
*/
void Postload_GfxPrecomputedSkyIlluminationStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  GfxImage **v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 50598, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varGfxPrecomputedSkyIllumination;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x60ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x60ui64);
      v5 = varGfxImagePtr;
      g_streamPosGlob.pos += 96;
      varGfxImagePtr = &varGfxPrecomputedSkyIllumination->detailMask;
      Postload_GfxImagePtr(NotAtStart);
      varGfxImagePtr = &varGfxPrecomputedSkyIllumination->heightMap;
      Postload_GfxImagePtr(NotAtStart);
      varGfxImagePtr = &varGfxPrecomputedSkyIllumination->SVDCoefficient;
      Postload_GfxImagePtr(NotAtStart);
      varGfxImagePtr = &varGfxPrecomputedSkyIllumination->SVDBasis;
      Postload_GfxImagePtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varGfxPrecomputedSkyIllumination = (GfxPrecomputedSkyIllumination *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varGfxImagePtr = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxSHCompressedProbeData
==============
*/
void Postload_GfxSHCompressedProbeData(const DBStreamStart streamStart)
{
  if ( streamStart != (varGfxSHCompressedProbeData != (GfxSHCompressedProbeData *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxSHCompressedProbeData, 0x20ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x20ui64);
}

/*
==============
Postload_GfxSHCompressedProbeDataArray
==============
*/
void Postload_GfxSHCompressedProbeDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varGfxSHCompressedProbeData, 32 * count);
}

/*
==============
Postload_GfxSHCompressedProbeDataStream
==============
*/
void Postload_GfxSHCompressedProbeDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxSHCompressedProbeData *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 33411, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxSHCompressedProbeData;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (GfxSHCompressedProbeData *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x20ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x20ui64);
      pos = g_streamPosGlob.pos + 32;
      g_streamPosGlob.pos = pos;
      v3 = (GfxSHCompressedProbeData *)pos;
      varGfxSHCompressedProbeData = (GfxSHCompressedProbeData *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxSHProbeData
==============
*/
void Postload_GfxSHProbeData(const DBStreamStart streamStart)
{
  if ( streamStart != (varGfxSHProbeData != (GfxSHProbeData *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxSHProbeData, 0x40ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x40ui64);
}

/*
==============
Postload_GfxSHProbeDataArray
==============
*/
void Postload_GfxSHProbeDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varGfxSHProbeData, count << 6);
}

/*
==============
Postload_GfxSHProbeDataStream
==============
*/
void Postload_GfxSHProbeDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxSHProbeData *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 33335, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxSHProbeData;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (GfxSHProbeData *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x40ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x40ui64);
      pos = g_streamPosGlob.pos + 64;
      g_streamPosGlob.pos = pos;
      v3 = (GfxSHProbeData *)pos;
      varGfxSHProbeData = (GfxSHProbeData *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxSceneDynBrush
==============
*/
void Postload_GfxSceneDynBrush(const DBStreamStart streamStart)
{
  if ( streamStart != (varGfxSceneDynBrush != (GfxSceneDynBrush *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxSceneDynBrush, 0xCui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0xCui64);
}

/*
==============
Postload_GfxSceneDynBrushArray
==============
*/
void Postload_GfxSceneDynBrushArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varGfxSceneDynBrush, 12 * count);
}

/*
==============
Postload_GfxSceneDynBrushStream
==============
*/
void Postload_GfxSceneDynBrushStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxSceneDynBrush *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 35566, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxSceneDynBrush;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (GfxSceneDynBrush *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0xCui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0xCui64);
      pos = g_streamPosGlob.pos + 12;
      g_streamPosGlob.pos = pos;
      v3 = (GfxSceneDynBrush *)pos;
      varGfxSceneDynBrush = (GfxSceneDynBrush *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxSceneDynModel
==============
*/
void Postload_GfxSceneDynModel(const DBStreamStart streamStart)
{
  if ( streamStart != (varGfxSceneDynModel != (GfxSceneDynModel *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxSceneDynModel, 0xCui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0xCui64);
}

/*
==============
Postload_GfxSceneDynModelArray
==============
*/
void Postload_GfxSceneDynModelArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varGfxSceneDynModel, 12 * count);
}

/*
==============
Postload_GfxSceneDynModelStream
==============
*/
void Postload_GfxSceneDynModelStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxSceneDynModel *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 35512, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxSceneDynModel;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (GfxSceneDynModel *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0xCui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0xCui64);
      pos = g_streamPosGlob.pos + 12;
      g_streamPosGlob.pos = pos;
      v3 = (GfxSceneDynModel *)pos;
      varGfxSceneDynModel = (GfxSceneDynModel *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxShadowGeometry
==============
*/
void Postload_GfxShadowGeometry(const DBStreamStart streamStart)
{
  GfxShadowGeometry *v2; 
  unsigned int *v3; 
  unsigned int *v4; 
  GfxShadowGeometry *v5; 
  unsigned __int16 *v6; 
  unsigned __int16 *v7; 

  if ( streamStart != (varGfxShadowGeometry != (GfxShadowGeometry *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxShadowGeometry, 0x18ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x18ui64);
  v2 = varGfxShadowGeometry;
  if ( varGfxShadowGeometry->sortedSurfIndex )
  {
    v3 = varBSPSURF_COUNT_TYPE;
    v4 = AllocPostload_BSPSURF_COUNT_TYPE();
    v2->sortedSurfIndex = v4;
    varBSPSURF_COUNT_TYPE = v4;
    Postload_BSPSURF_COUNT_TYPEArray(AtStart, varGfxShadowGeometry->surfaceCount);
    varBSPSURF_COUNT_TYPE = v3;
  }
  v5 = varGfxShadowGeometry;
  if ( varGfxShadowGeometry->smodelIndex )
  {
    v6 = varushort;
    v7 = AllocPostload_ushort();
    v5->smodelIndex = v7;
    varushort = v7;
    Postload_ushortArray(AtStart, varGfxShadowGeometry->smodelCount);
    varushort = v6;
  }
}

/*
==============
Postload_GfxShadowGeometryArray
==============
*/
void Postload_GfxShadowGeometryArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxShadowGeometry *i; 
  GfxShadowGeometry *v4; 
  unsigned int *v5; 
  unsigned int *v6; 
  unsigned __int16 *v7; 
  unsigned __int16 *v8; 

  v2 = count;
  Postload_Stream(streamStart, varGfxShadowGeometry, 24 * count);
  for ( i = varGfxShadowGeometry; v2; --v2 )
  {
    v4 = i;
    varGfxShadowGeometry = i;
    if ( i == (GfxShadowGeometry *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x18ui64);
      v4 = varGfxShadowGeometry;
    }
    if ( v4->sortedSurfIndex )
    {
      v5 = varBSPSURF_COUNT_TYPE;
      v6 = AllocPostload_BSPSURF_COUNT_TYPE();
      v4->sortedSurfIndex = v6;
      varBSPSURF_COUNT_TYPE = v6;
      Postload_BSPSURF_COUNT_TYPEArray(AtStart, varGfxShadowGeometry->surfaceCount);
      v4 = varGfxShadowGeometry;
      varBSPSURF_COUNT_TYPE = v5;
    }
    if ( v4->smodelIndex )
    {
      v7 = varushort;
      v8 = AllocPostload_ushort();
      v4->smodelIndex = v8;
      varushort = v8;
      Postload_ushortArray(AtStart, varGfxShadowGeometry->smodelCount);
      varushort = v7;
    }
    ++i;
  }
}

/*
==============
Postload_GfxShadowGeometryStream
==============
*/
void Postload_GfxShadowGeometryStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxShadowGeometry *v4; 
  unsigned int *v5; 
  unsigned int *v6; 
  unsigned __int16 *v7; 
  unsigned __int16 *v8; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 35771, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxShadowGeometry;
    do
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x18ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x18ui64);
      v4 = varGfxShadowGeometry;
      g_streamPosGlob.pos += 24;
      if ( varGfxShadowGeometry->sortedSurfIndex )
      {
        v5 = varBSPSURF_COUNT_TYPE;
        v6 = AllocPostload_BSPSURF_COUNT_TYPE();
        v4->sortedSurfIndex = v6;
        varBSPSURF_COUNT_TYPE = v6;
        Postload_BSPSURF_COUNT_TYPEArray(AtStart, varGfxShadowGeometry->surfaceCount);
        v4 = varGfxShadowGeometry;
        varBSPSURF_COUNT_TYPE = v5;
      }
      if ( v4->smodelIndex )
      {
        v7 = varushort;
        v8 = AllocPostload_ushort();
        v4->smodelIndex = v8;
        varushort = v8;
        Postload_ushortArray(AtStart, varGfxShadowGeometry->smodelCount);
        varushort = v7;
      }
      pos = g_streamPosGlob.pos;
      varGfxShadowGeometry = (GfxShadowGeometry *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxStaticDecalVolumeMask
==============
*/
void Postload_GfxStaticDecalVolumeMask(const DBStreamStart streamStart)
{
  GfxDecalVolumeMask **v2; 

  if ( streamStart != (varGfxStaticDecalVolumeMask != (GfxStaticDecalVolumeMask *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxStaticDecalVolumeMask, 8ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(8ui64);
  v2 = varGfxDecalVolumeMaskPtr;
  varGfxDecalVolumeMaskPtr = &varGfxStaticDecalVolumeMask->blendMapOverride;
  Postload_GfxDecalVolumeMaskPtr(NotAtStart);
  varGfxDecalVolumeMaskPtr = v2;
}

/*
==============
Postload_GfxStaticDecalVolumeMaskArray
==============
*/
void Postload_GfxStaticDecalVolumeMaskArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxStaticDecalVolumeMask *i; 
  GfxStaticDecalVolumeMask *v4; 
  GfxDecalVolumeMask **v5; 

  v2 = count;
  Postload_Stream(streamStart, varGfxStaticDecalVolumeMask, 8 * count);
  for ( i = varGfxStaticDecalVolumeMask; v2; --v2 )
  {
    v4 = i;
    varGfxStaticDecalVolumeMask = i;
    if ( i == (GfxStaticDecalVolumeMask *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 8ui64);
      v4 = varGfxStaticDecalVolumeMask;
    }
    v5 = varGfxDecalVolumeMaskPtr;
    varGfxDecalVolumeMaskPtr = &v4->blendMapOverride;
    Postload_GfxDecalVolumeMaskPtr(NotAtStart);
    ++i;
    varGfxDecalVolumeMaskPtr = v5;
  }
}

/*
==============
Postload_GfxStaticDecalVolumeMaskStream
==============
*/
void Postload_GfxStaticDecalVolumeMaskStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  GfxDecalVolumeMask **v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 44068, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varGfxStaticDecalVolumeMask;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 8ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(8ui64);
      v5 = varGfxDecalVolumeMaskPtr;
      g_streamPosGlob.pos += 8;
      varGfxDecalVolumeMaskPtr = &varGfxStaticDecalVolumeMask->blendMapOverride;
      Postload_GfxDecalVolumeMaskPtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varGfxStaticDecalVolumeMask = (GfxStaticDecalVolumeMask *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varGfxDecalVolumeMaskPtr = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxStaticDecalVolumeMaterial
==============
*/
void Postload_GfxStaticDecalVolumeMaterial(const DBStreamStart streamStart)
{
  Material **v2; 

  if ( streamStart != (varGfxStaticDecalVolumeMaterial != (GfxStaticDecalVolumeMaterial *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxStaticDecalVolumeMaterial, 8ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(8ui64);
  v2 = varMaterialHandle;
  varMaterialHandle = &varGfxStaticDecalVolumeMaterial->material;
  Postload_MaterialHandle(NotAtStart);
  varMaterialHandle = v2;
}

/*
==============
Postload_GfxStaticDecalVolumeMaterialArray
==============
*/
void Postload_GfxStaticDecalVolumeMaterialArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxStaticDecalVolumeMaterial *i; 
  GfxStaticDecalVolumeMaterial *v4; 
  Material **v5; 

  v2 = count;
  Postload_Stream(streamStart, varGfxStaticDecalVolumeMaterial, 8 * count);
  for ( i = varGfxStaticDecalVolumeMaterial; v2; --v2 )
  {
    v4 = i;
    varGfxStaticDecalVolumeMaterial = i;
    if ( i == (GfxStaticDecalVolumeMaterial *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 8ui64);
      v4 = varGfxStaticDecalVolumeMaterial;
    }
    v5 = varMaterialHandle;
    varMaterialHandle = &v4->material;
    Postload_MaterialHandle(NotAtStart);
    ++i;
    varMaterialHandle = v5;
  }
}

/*
==============
Postload_GfxStaticDecalVolumeMaterialStream
==============
*/
void Postload_GfxStaticDecalVolumeMaterialStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  Material **v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 43982, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varGfxStaticDecalVolumeMaterial;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 8ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(8ui64);
      v5 = varMaterialHandle;
      g_streamPosGlob.pos += 8;
      varMaterialHandle = &varGfxStaticDecalVolumeMaterial->material;
      Postload_MaterialHandle(NotAtStart);
      pos = g_streamPosGlob.pos;
      varGfxStaticDecalVolumeMaterial = (GfxStaticDecalVolumeMaterial *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varMaterialHandle = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxStaticDecalVolumePacked
==============
*/
void Postload_GfxStaticDecalVolumePacked(const DBStreamStart streamStart)
{
  if ( streamStart != (varGfxStaticDecalVolumePacked != (GfxStaticDecalVolumePacked *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxStaticDecalVolumePacked, 0x2Cui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x2Cui64);
}

/*
==============
Postload_GfxStaticDecalVolumePackedArray
==============
*/
void Postload_GfxStaticDecalVolumePackedArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varGfxStaticDecalVolumePacked, 44 * count);
}

/*
==============
Postload_GfxStaticDecalVolumePackedStream
==============
*/
void Postload_GfxStaticDecalVolumePackedStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxStaticDecalVolumePacked *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 43896, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxStaticDecalVolumePacked;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (GfxStaticDecalVolumePacked *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x2Cui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x2Cui64);
      pos = g_streamPosGlob.pos + 44;
      g_streamPosGlob.pos = pos;
      v3 = (GfxStaticDecalVolumePacked *)pos;
      varGfxStaticDecalVolumePacked = (GfxStaticDecalVolumePacked *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxStaticDecalVolumeUid
==============
*/
void Postload_GfxStaticDecalVolumeUid(const DBStreamStart streamStart)
{
  if ( streamStart != (varGfxStaticDecalVolumeUid != (GfxStaticDecalVolumeUid *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxStaticDecalVolumeUid, 4ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(4ui64);
}

/*
==============
Postload_GfxStaticDecalVolumeUidArray
==============
*/
void Postload_GfxStaticDecalVolumeUidArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varGfxStaticDecalVolumeUid, 4 * count);
}

/*
==============
Postload_GfxStaticDecalVolumeUidStream
==============
*/
void Postload_GfxStaticDecalVolumeUidStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxStaticDecalVolumeUid *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 44154, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxStaticDecalVolumeUid;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (GfxStaticDecalVolumeUid *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 4ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(4ui64);
      pos = g_streamPosGlob.pos + 4;
      g_streamPosGlob.pos = pos;
      v3 = (GfxStaticDecalVolumeUid *)pos;
      varGfxStaticDecalVolumeUid = (GfxStaticDecalVolumeUid *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxStaticModelLightGridVolume
==============
*/
void Postload_GfxStaticModelLightGridVolume(const DBStreamStart streamStart)
{
  if ( streamStart != (varGfxStaticModelLightGridVolume != (GfxStaticModelLightGridVolume *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxStaticModelLightGridVolume, 0x40ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x40ui64);
}

/*
==============
Postload_GfxStaticModelLightGridVolumeArray
==============
*/
void Postload_GfxStaticModelLightGridVolumeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varGfxStaticModelLightGridVolume, count << 6);
}

/*
==============
Postload_GfxStaticModelLightGridVolumeFlags
==============
*/
void Postload_GfxStaticModelLightGridVolumeFlags(const DBStreamStart streamStart)
{
  if ( streamStart != (varGfxStaticModelLightGridVolumeFlags != (GfxStaticModelLightGridVolumeFlags *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxStaticModelLightGridVolumeFlags, 2ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(2ui64);
}

/*
==============
Postload_GfxStaticModelLightGridVolumeFlagsArray
==============
*/
void Postload_GfxStaticModelLightGridVolumeFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varGfxStaticModelLightGridVolumeFlags, 2 * count);
}

/*
==============
Postload_GfxStaticModelLightGridVolumeFlagsStream
==============
*/
void Postload_GfxStaticModelLightGridVolumeFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxStaticModelLightGridVolumeFlags *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 34028, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxStaticModelLightGridVolumeFlags;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (GfxStaticModelLightGridVolumeFlags *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 2ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(2ui64);
      pos = g_streamPosGlob.pos + 2;
      g_streamPosGlob.pos = pos;
      v3 = (GfxStaticModelLightGridVolumeFlags *)pos;
      varGfxStaticModelLightGridVolumeFlags = (GfxStaticModelLightGridVolumeFlags *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxStaticModelLightGridVolumeStream
==============
*/
void Postload_GfxStaticModelLightGridVolumeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxStaticModelLightGridVolume *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 34205, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxStaticModelLightGridVolume;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (GfxStaticModelLightGridVolume *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x40ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x40ui64);
      pos = g_streamPosGlob.pos + 64;
      g_streamPosGlob.pos = pos;
      v3 = (GfxStaticModelLightGridVolume *)pos;
      varGfxStaticModelLightGridVolume = (GfxStaticModelLightGridVolume *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxVoxelInternalNode
==============
*/
void Postload_GfxVoxelInternalNode(const DBStreamStart streamStart)
{
  if ( streamStart != (varGfxVoxelInternalNode != (GfxVoxelInternalNode *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxVoxelInternalNode, 0x10ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x10ui64);
}

/*
==============
Postload_GfxVoxelInternalNodeArray
==============
*/
void Postload_GfxVoxelInternalNodeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varGfxVoxelInternalNode, 16 * count);
}

/*
==============
Postload_GfxVoxelInternalNodeStream
==============
*/
void Postload_GfxVoxelInternalNodeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxVoxelInternalNode *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 45796, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxVoxelInternalNode;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (GfxVoxelInternalNode *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x10ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x10ui64);
      pos = g_streamPosGlob.pos + 16;
      g_streamPosGlob.pos = pos;
      v3 = (GfxVoxelInternalNode *)pos;
      varGfxVoxelInternalNode = (GfxVoxelInternalNode *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxVoxelLeafNode
==============
*/
void Postload_GfxVoxelLeafNode(const DBStreamStart streamStart)
{
  if ( streamStart != (varGfxVoxelLeafNode != (GfxVoxelLeafNode *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxVoxelLeafNode, 2ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(2ui64);
}

/*
==============
Postload_GfxVoxelLeafNodeArray
==============
*/
void Postload_GfxVoxelLeafNodeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varGfxVoxelLeafNode, 2 * count);
}

/*
==============
Postload_GfxVoxelLeafNodeStream
==============
*/
void Postload_GfxVoxelLeafNodeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxVoxelLeafNode *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 45872, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxVoxelLeafNode;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (GfxVoxelLeafNode *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 2ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(2ui64);
      pos = g_streamPosGlob.pos + 2;
      g_streamPosGlob.pos = pos;
      v3 = (GfxVoxelLeafNode *)pos;
      varGfxVoxelLeafNode = (GfxVoxelLeafNode *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxVoxelTopDownViewNode
==============
*/
void Postload_GfxVoxelTopDownViewNode(const DBStreamStart streamStart)
{
  if ( streamStart != (varGfxVoxelTopDownViewNode != (GfxVoxelTopDownViewNode *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxVoxelTopDownViewNode, 0xCui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0xCui64);
}

/*
==============
Postload_GfxVoxelTopDownViewNodeArray
==============
*/
void Postload_GfxVoxelTopDownViewNodeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varGfxVoxelTopDownViewNode, 12 * count);
}

/*
==============
Postload_GfxVoxelTopDownViewNodeStream
==============
*/
void Postload_GfxVoxelTopDownViewNodeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxVoxelTopDownViewNode *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 45697, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxVoxelTopDownViewNode;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (GfxVoxelTopDownViewNode *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0xCui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0xCui64);
      pos = g_streamPosGlob.pos + 12;
      g_streamPosGlob.pos = pos;
      v3 = (GfxVoxelTopDownViewNode *)pos;
      varGfxVoxelTopDownViewNode = (GfxVoxelTopDownViewNode *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxVoxelTree
==============
*/
void Postload_GfxVoxelTree(const DBStreamStart streamStart)
{
  GfxVoxelTree *v2; 
  GfxVoxelTreeHeader *v3; 
  GfxVoxelTree *v4; 
  GfxVoxelTopDownViewNode *v5; 
  unsigned __int64 v6; 
  GfxVoxelTree *v7; 
  GfxVoxelInternalNode *v8; 
  unsigned __int64 v9; 
  GfxVoxelTree *v10; 
  GfxVoxelLeafNode *v11; 
  unsigned __int64 v12; 
  GfxVoxelTree *v13; 
  unsigned __int16 *v14; 
  unsigned __int16 *v15; 
  GfxVoxelTree *v16; 
  unsigned int *v17; 
  unsigned int *v18; 
  GfxVoxelTree *v19; 
  unsigned int *v20; 
  unsigned int *v21; 
  GfxVoxelTree *v22; 
  GfxVoxelTreeHeader *v23; 
  GfxVoxelTree *v24; 
  GfxVoxelTopDownViewNode *v25; 
  unsigned __int64 v26; 
  GfxVoxelTree *v27; 
  GfxVoxelInternalNode *v28; 
  unsigned __int64 v29; 

  if ( streamStart != (varGfxVoxelTree != (GfxVoxelTree *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxVoxelTree, 0x78ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x78ui64);
  DB_PushStreamPos(7u);
  v2 = varGfxVoxelTree;
  if ( varGfxVoxelTree->voxelTreeHeader )
  {
    v3 = varGfxVoxelTreeHeader;
    DB_PatchMem_FixStreamAlignment(0xFui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->voxelTreeHeader = (GfxVoxelTreeHeader *)g_streamPosGlob.pos;
    varGfxVoxelTreeHeader = (GfxVoxelTreeHeader *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x40ui64);
    varGfxVoxelTreeHeader = v3;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(7u);
  v4 = varGfxVoxelTree;
  if ( varGfxVoxelTree->voxelTopDownViewNodeArray )
  {
    v5 = varGfxVoxelTopDownViewNode;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->voxelTopDownViewNodeArray = (GfxVoxelTopDownViewNode *)g_streamPosGlob.pos;
    varGfxVoxelTopDownViewNode = (GfxVoxelTopDownViewNode *)g_streamPosGlob.pos;
    v6 = 12i64 * varGfxVoxelTree->voxelTopDownViewNodeCount;
    if ( v6 )
    {
      if ( v6 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v6);
    }
    varGfxVoxelTopDownViewNode = v5;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(7u);
  v7 = varGfxVoxelTree;
  if ( varGfxVoxelTree->voxelInternalNodeArray )
  {
    v8 = varGfxVoxelInternalNode;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v7->voxelInternalNodeArray = (GfxVoxelInternalNode *)g_streamPosGlob.pos;
    varGfxVoxelInternalNode = (GfxVoxelInternalNode *)g_streamPosGlob.pos;
    v9 = 16i64 * varGfxVoxelTree->voxelInternalNodeCount;
    if ( v9 )
    {
      if ( v9 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v9);
    }
    varGfxVoxelInternalNode = v8;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(7u);
  v10 = varGfxVoxelTree;
  if ( varGfxVoxelTree->voxelLeafNodeArray )
  {
    v11 = varGfxVoxelLeafNode;
    DB_PatchMem_FixStreamAlignment(1ui64);
    DB_CheckCanIncStreamPos(0i64);
    v10->voxelLeafNodeArray = (GfxVoxelLeafNode *)g_streamPosGlob.pos;
    varGfxVoxelLeafNode = (GfxVoxelLeafNode *)g_streamPosGlob.pos;
    v12 = 2i64 * varGfxVoxelTree->voxelLeafNodeCount;
    if ( v12 )
    {
      if ( v12 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v12);
    }
    varGfxVoxelLeafNode = v11;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(7u);
  v13 = varGfxVoxelTree;
  if ( varGfxVoxelTree->lightListArray )
  {
    v14 = varraw_ushort4;
    v15 = AllocPostload_raw_ushort4();
    v13->lightListArray = v15;
    varraw_ushort4 = v15;
    Postload_raw_ushort4Array(AtStart, varGfxVoxelTree->lightListArraySize);
    varraw_ushort4 = v14;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v16 = varGfxVoxelTree;
  if ( varGfxVoxelTree->voxelInternalNodeDynamicLightListCPU )
  {
    v17 = varuint;
    v18 = AllocPostload_uint();
    v16->voxelInternalNodeDynamicLightListCPU = v18;
    varuint = v18;
    Postload_uintArray(AtStart, 2 * varGfxVoxelTree->voxelInternalNodeCount);
    varuint = v17;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(5u);
  v19 = varGfxVoxelTree;
  if ( varGfxVoxelTree->voxelInternalNodeDynamicLightList )
  {
    v20 = varuint;
    v21 = AllocPostload_uint();
    v19->voxelInternalNodeDynamicLightList = v21;
    varuint = v21;
    Postload_uintArray(AtStart, 2 * varGfxVoxelTree->voxelInternalNodeCount);
    varuint = v20;
  }
  DB_PopStreamPos();
  v22 = varGfxVoxelTree;
  if ( varGfxVoxelTree->voxelTreeHeaderCPU )
  {
    v23 = varGfxVoxelTreeHeader;
    DB_PatchMem_FixStreamAlignment(0xFui64);
    DB_CheckCanIncStreamPos(0i64);
    v22->voxelTreeHeaderCPU = (GfxVoxelTreeHeader *)g_streamPosGlob.pos;
    varGfxVoxelTreeHeader = (GfxVoxelTreeHeader *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x40ui64);
    varGfxVoxelTreeHeader = v23;
  }
  v24 = varGfxVoxelTree;
  if ( varGfxVoxelTree->voxelTopDownViewNodeArrayCPU )
  {
    v25 = varGfxVoxelTopDownViewNode;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v24->voxelTopDownViewNodeArrayCPU = (GfxVoxelTopDownViewNode *)g_streamPosGlob.pos;
    varGfxVoxelTopDownViewNode = (GfxVoxelTopDownViewNode *)g_streamPosGlob.pos;
    v26 = 12i64 * varGfxVoxelTree->voxelTopDownViewNodeCount;
    if ( v26 )
    {
      if ( v26 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v26);
    }
    varGfxVoxelTopDownViewNode = v25;
  }
  v27 = varGfxVoxelTree;
  if ( varGfxVoxelTree->voxelInternalNodeArrayCPU )
  {
    v28 = varGfxVoxelInternalNode;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v27->voxelInternalNodeArrayCPU = (GfxVoxelInternalNode *)g_streamPosGlob.pos;
    varGfxVoxelInternalNode = (GfxVoxelInternalNode *)g_streamPosGlob.pos;
    v29 = 16i64 * varGfxVoxelTree->voxelInternalNodeCount;
    if ( v29 )
    {
      if ( v29 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v29);
    }
    varGfxVoxelInternalNode = v28;
  }
}

/*
==============
Postload_GfxVoxelTreeArray
==============
*/
void Postload_GfxVoxelTreeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxVoxelTree *i; 

  v2 = count;
  Postload_Stream(streamStart, varGfxVoxelTree, 120 * count);
  for ( i = varGfxVoxelTree; v2; --v2 )
  {
    varGfxVoxelTree = i;
    Postload_GfxVoxelTree(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_GfxVoxelTreeHeader
==============
*/
void Postload_GfxVoxelTreeHeader(const DBStreamStart streamStart)
{
  if ( streamStart != (varGfxVoxelTreeHeader != (GfxVoxelTreeHeader *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxVoxelTreeHeader, 0x40ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x40ui64);
}

/*
==============
Postload_GfxVoxelTreeHeaderArray
==============
*/
void Postload_GfxVoxelTreeHeaderArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varGfxVoxelTreeHeader, count << 6);
}

/*
==============
Postload_GfxVoxelTreeHeaderStream
==============
*/
void Postload_GfxVoxelTreeHeaderStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxVoxelTreeHeader *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 46017, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxVoxelTreeHeader;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (GfxVoxelTreeHeader *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x40ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x40ui64);
      pos = g_streamPosGlob.pos + 64;
      g_streamPosGlob.pos = pos;
      v3 = (GfxVoxelTreeHeader *)pos;
      varGfxVoxelTreeHeader = (GfxVoxelTreeHeader *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxVoxelTreeStream
==============
*/
void Postload_GfxVoxelTreeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 46485, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  for ( ; count; --count )
  {
    Postload_GfxVoxelTree(AtStart);
    varGfxVoxelTree = (GfxVoxelTree *)g_streamPosGlob.pos;
  }
}

/*
==============
Postload_GfxWorld
==============
*/
void Postload_GfxWorld(const DBStreamStart streamStart)
{
  const char **v2; 
  GfxWorldDpvsPlanes *v3; 
  GfxWorld *v4; 
  GfxCellTransientInfo *v5; 
  unsigned __int64 v6; 
  GfxWorld *v7; 
  GfxCell *v8; 
  __int64 cellCount; 
  GfxCell *i; 
  GfxWorldSurfaces *v11; 
  GfxWorldStaticModels *v12; 
  GfxWorldDraw *v13; 
  GfxDynamicLightset *v14; 
  GfxWorld *v15; 
  GfxVoxelTree *v16; 
  __int64 voxelTreeCount; 
  GfxVoxelTree *j; 
  GfxMayhemSelfVis *v19; 
  GfxFrustumLights *v20; 
  GfxWorld *v21; 
  GfxLight *v22; 
  GfxLight *v23; 
  GfxWorld *v24; 
  GfxLightViewFrustum *v25; 
  __int64 primaryLightCount; 
  unsigned __int64 v27; 
  GfxLightViewFrustum *k; 
  GfxWorld *v29; 
  GfxHeightfield *v30; 
  __int64 heightfieldCount; 
  GfxHeightfield *m; 
  GfxHeightfield *v33; 
  GfxImage **v34; 
  GfxWorld *v35; 
  GfxBrushModel *v36; 
  GfxBrushModel *v37; 
  GfxPrecomputedSkyIllumination *v38; 
  GfxWorld *v39; 
  GfxModelLightmapInst *v40; 
  unsigned __int64 v41; 
  GfxWorld *v42; 
  GfxMapEntLookup *v43; 
  unsigned __int64 v44; 
  sunflare_t *v45; 
  GfxImage **v46; 
  Material **v47; 
  GfxWorld *v48; 
  unsigned int *v49; 
  unsigned int *v50; 
  GfxWorld *v51; 
  unsigned int *v52; 
  unsigned int *v53; 
  GfxWorld *v54; 
  GfxSceneDynModel *v55; 
  unsigned __int64 v56; 
  GfxWorld *v57; 
  GfxSceneDynBrush *v58; 
  unsigned __int64 v59; 
  GfxWorld *v60; 
  unsigned int *v61; 
  unsigned int *v62; 
  GfxWorld *v63; 
  unsigned int *v64; 
  unsigned int *v65; 
  GfxWorld *v66; 
  unsigned int *v67; 
  unsigned int *v68; 
  GfxWorld *v69; 
  unsigned int *v70; 
  unsigned int *v71; 
  GfxWorld *v72; 
  unsigned int *v73; 
  unsigned int *v74; 
  GfxWorld *v75; 
  unsigned int *v76; 
  unsigned int *v77; 
  GfxWorld *v78; 
  unsigned int *v79; 
  unsigned int *v80; 
  GfxWorld *v81; 
  GfxShadowGeometry *v82; 
  __int64 v83; 
  GfxShadowGeometry *n; 
  GfxShadowGeometry *v85; 
  unsigned int *v86; 
  unsigned int *v87; 
  unsigned __int16 *v88; 
  unsigned __int16 *v89; 
  GfxLightAABB *v90; 
  GfxWorldDpvsStatic *v91; 
  GfxWorldDpvsDynamic *v92; 
  GfxWorld *v93; 
  UmbraGate *v94; 
  unsigned __int64 v95; 
  unsigned __int8 *v96; 
  unsigned __int8 *v97; 
  Umbra::Tome **v98; 
  Umbra::Tome **p_umbraTome; 
  GfxWorld *v100; 
  MdaoVolume *v101; 
  MdaoVolume *v102; 
  StreamTree *v103; 
  StreamTreeGrid *v104; 

  DB_PatchMem_PostLoad_PushAsset(27, varGfxWorld);
  if ( streamStart != (varGfxWorld != (GfxWorld *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxWorld, 0x41E0ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x41E0ui64);
  DB_PushStreamPos(8u);
  v2 = varXString;
  varXString = &varGfxWorld->name;
  Postload_XString(NotAtStart);
  varXString = &varGfxWorld->baseName;
  Postload_XString(NotAtStart);
  varXString = v2;
  v3 = varGfxWorldDpvsPlanes;
  varGfxWorldDpvsPlanes = &varGfxWorld->dpvsPlanes;
  Postload_GfxWorldDpvsPlanes(NotAtStart);
  varGfxWorldDpvsPlanes = v3;
  v4 = varGfxWorld;
  if ( varGfxWorld->cellTransientInfos )
  {
    v5 = varGfxCellTransientInfo;
    DB_PatchMem_FixStreamAlignment(1ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->cellTransientInfos = (GfxCellTransientInfo *)g_streamPosGlob.pos;
    varGfxCellTransientInfo = (GfxCellTransientInfo *)g_streamPosGlob.pos;
    v6 = 4i64 * varGfxWorld->dpvsPlanes.cellCount;
    if ( v6 )
    {
      if ( v6 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v6);
    }
    varGfxCellTransientInfo = v5;
  }
  v7 = varGfxWorld;
  if ( varGfxWorld->cells )
  {
    v8 = varGfxCell;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v7->cells = (GfxCell *)g_streamPosGlob.pos;
    varGfxCell = (GfxCell *)g_streamPosGlob.pos;
    cellCount = varGfxWorld->dpvsPlanes.cellCount;
    if ( 40 * cellCount )
    {
      if ( (unsigned __int64)(40 * cellCount) > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(40 * cellCount);
    }
    for ( i = varGfxCell; cellCount; --cellCount )
    {
      varGfxCell = i;
      Postload_GfxCell(NotAtStart);
      ++i;
    }
    varGfxCell = v8;
  }
  v11 = varGfxWorldSurfaces;
  varGfxWorldSurfaces = &varGfxWorld->surfaces;
  Postload_GfxWorldSurfaces(NotAtStart);
  varGfxWorldSurfaces = v11;
  v12 = varGfxWorldStaticModels;
  varGfxWorldStaticModels = &varGfxWorld->smodels;
  Postload_GfxWorldStaticModels(NotAtStart);
  varGfxWorldStaticModels = v12;
  v13 = varGfxWorldDraw;
  varGfxWorldDraw = &varGfxWorld->draw;
  Postload_GfxWorldDraw(NotAtStart);
  varGfxWorldDraw = v13;
  v14 = varGfxDynamicLightset;
  varGfxDynamicLightset = &varGfxWorld->dynamicLightset;
  Postload_GfxDynamicLightset(NotAtStart);
  varGfxDynamicLightset = v14;
  v15 = varGfxWorld;
  if ( varGfxWorld->voxelTree )
  {
    v16 = varGfxVoxelTree;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v15->voxelTree = (GfxVoxelTree *)g_streamPosGlob.pos;
    varGfxVoxelTree = (GfxVoxelTree *)g_streamPosGlob.pos;
    voxelTreeCount = varGfxWorld->voxelTreeCount;
    if ( 120 * voxelTreeCount )
    {
      if ( (unsigned __int64)(120 * voxelTreeCount) > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(120 * voxelTreeCount);
    }
    for ( j = varGfxVoxelTree; voxelTreeCount; --voxelTreeCount )
    {
      varGfxVoxelTree = j;
      Postload_GfxVoxelTree(NotAtStart);
      ++j;
    }
    varGfxVoxelTree = v16;
  }
  v19 = varGfxMayhemSelfVis;
  varGfxMayhemSelfVis = &varGfxWorld->mayhemSelfVis;
  Postload_GfxMayhemSelfVis(NotAtStart);
  varGfxMayhemSelfVis = v19;
  v20 = varGfxFrustumLights;
  varGfxFrustumLights = &varGfxWorld->frustumLights;
  Postload_GfxFrustumLights(NotAtStart);
  varGfxFrustumLights = v20;
  DB_PushStreamPos(4u);
  v21 = varGfxWorld;
  if ( varGfxWorld->primaryLights )
  {
    v22 = varGfxLight;
    v23 = AllocPostload_GfxLight();
    v21->primaryLights = v23;
    varGfxLight = v23;
    Postload_GfxLightArray(AtStart, varGfxWorld->primaryLightCount);
    varGfxLight = v22;
  }
  DB_PopStreamPos();
  v24 = varGfxWorld;
  if ( varGfxWorld->lightViewFrustums )
  {
    v25 = varGfxLightViewFrustum;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v24->lightViewFrustums = (GfxLightViewFrustum *)g_streamPosGlob.pos;
    varGfxLightViewFrustum = (GfxLightViewFrustum *)g_streamPosGlob.pos;
    primaryLightCount = varGfxWorld->primaryLightCount;
    v27 = 32 * primaryLightCount;
    if ( 32 * primaryLightCount )
    {
      if ( v27 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v27);
    }
    for ( k = varGfxLightViewFrustum; primaryLightCount; --primaryLightCount )
    {
      varGfxLightViewFrustum = k;
      Postload_GfxLightViewFrustum(NotAtStart);
      ++k;
    }
    varGfxLightViewFrustum = v25;
  }
  v29 = varGfxWorld;
  if ( varGfxWorld->heightfields )
  {
    v30 = varGfxHeightfield;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v29->heightfields = (GfxHeightfield *)g_streamPosGlob.pos;
    varGfxHeightfield = (GfxHeightfield *)g_streamPosGlob.pos;
    heightfieldCount = varGfxWorld->heightfieldCount;
    if ( 96 * heightfieldCount )
    {
      if ( (unsigned __int64)(96 * heightfieldCount) > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(96 * heightfieldCount);
    }
    for ( m = varGfxHeightfield; heightfieldCount; --heightfieldCount )
    {
      v33 = m;
      varGfxHeightfield = m;
      if ( m == (GfxHeightfield *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, m, 0x60ui64);
        v33 = varGfxHeightfield;
      }
      v34 = varGfxImagePtr;
      varGfxImagePtr = &v33->image;
      Postload_GfxImagePtr(NotAtStart);
      ++m;
      varGfxImagePtr = v34;
    }
    varGfxHeightfield = v30;
  }
  v35 = varGfxWorld;
  if ( varGfxWorld->models )
  {
    v36 = varGfxBrushModel;
    v37 = AllocPostload_GfxBrushModel();
    v35->models = v37;
    varGfxBrushModel = v37;
    Postload_GfxBrushModelArray(AtStart, varGfxWorld->modelCount);
    varGfxBrushModel = v36;
  }
  v38 = varGfxPrecomputedSkyIllumination;
  varGfxPrecomputedSkyIllumination = &varGfxWorld->precomputedSkyIllumination;
  Postload_GfxPrecomputedSkyIllumination(NotAtStart);
  varGfxPrecomputedSkyIllumination = v38;
  v39 = varGfxWorld;
  if ( varGfxWorld->lmapLookup )
  {
    v40 = varGfxModelLightmapInst;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v39->lmapLookup = (GfxModelLightmapInst *)g_streamPosGlob.pos;
    varGfxModelLightmapInst = (GfxModelLightmapInst *)g_streamPosGlob.pos;
    v41 = 20i64 * varGfxWorld->lmapLookupCount;
    if ( v41 )
    {
      if ( v41 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v41);
    }
    varGfxModelLightmapInst = v40;
  }
  v42 = varGfxWorld;
  if ( varGfxWorld->gfxMapEntLookup )
  {
    v43 = varGfxMapEntLookup;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v42->gfxMapEntLookup = (GfxMapEntLookup *)g_streamPosGlob.pos;
    varGfxMapEntLookup = (GfxMapEntLookup *)g_streamPosGlob.pos;
    v44 = 28i64 * varGfxWorld->gfxMapEntLookupCount;
    if ( v44 )
    {
      if ( v44 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v44);
    }
    varGfxMapEntLookup = v43;
  }
  v45 = varsunflare_t;
  varsunflare_t = &varGfxWorld->sun;
  Postload_sunflare_t(NotAtStart);
  varsunflare_t = v45;
  v46 = varGfxImagePtr;
  varGfxImagePtr = &varGfxWorld->outdoorImage;
  Postload_GfxImagePtr(NotAtStart);
  varGfxImagePtr = v46;
  v47 = varMaterialHandle;
  varMaterialHandle = &varGfxWorld->dustMaterial;
  Postload_MaterialHandle(NotAtStart);
  varMaterialHandle = v47;
  DB_PushStreamPos(4u);
  v48 = varGfxWorld;
  if ( varGfxWorld->cellCasterBits )
  {
    v49 = varraw_uint;
    v50 = AllocPostload_raw_uint();
    v48->cellCasterBits = v50;
    varraw_uint = v50;
    Postload_raw_uintArray(AtStart, varGfxWorld->dpvsPlanes.cellCount * ((varGfxWorld->dpvsPlanes.cellCount + 31) >> 5));
    varraw_uint = v49;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v51 = varGfxWorld;
  if ( varGfxWorld->cellHasSunLitSurfsBits )
  {
    v52 = varraw_uint;
    v53 = AllocPostload_raw_uint();
    v51->cellHasSunLitSurfsBits = v53;
    varraw_uint = v53;
    Postload_raw_uintArray(AtStart, (unsigned __int64)(varGfxWorld->dpvsPlanes.cellCount + 31) >> 5);
    varraw_uint = v52;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v54 = varGfxWorld;
  if ( varGfxWorld->sceneDynModel )
  {
    v55 = varGfxSceneDynModel;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v54->sceneDynModel = (GfxSceneDynModel *)g_streamPosGlob.pos;
    varGfxSceneDynModel = (GfxSceneDynModel *)g_streamPosGlob.pos;
    v56 = 12i64 * varGfxWorld->dpvsDyn.dynEntClientCount[0];
    if ( v56 )
    {
      if ( v56 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v56);
    }
    varGfxSceneDynModel = v55;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v57 = varGfxWorld;
  if ( varGfxWorld->sceneDynBrush )
  {
    v58 = varGfxSceneDynBrush;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v57->sceneDynBrush = (GfxSceneDynBrush *)g_streamPosGlob.pos;
    varGfxSceneDynBrush = (GfxSceneDynBrush *)g_streamPosGlob.pos;
    v59 = 12i64 * varGfxWorld->dpvsDyn.dynEntClientCount[1];
    if ( v59 )
    {
      if ( v59 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v59);
    }
    varGfxSceneDynBrush = v58;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v60 = varGfxWorld;
  if ( varGfxWorld->primaryLightMotionDetectBits )
  {
    v61 = varraw_uint;
    v62 = AllocPostload_raw_uint();
    v60->primaryLightMotionDetectBits = v62;
    varraw_uint = v62;
    Postload_raw_uintArray(AtStart, varGfxWorld->primaryLightMotionDetectBitsEntries);
    varraw_uint = v61;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v63 = varGfxWorld;
  if ( varGfxWorld->entityMotionBits )
  {
    v64 = varraw_uint;
    v65 = AllocPostload_raw_uint();
    v63->entityMotionBits = v65;
    varraw_uint = v65;
    Postload_raw_uintArray(AtStart, varGfxWorld->entityMotionBitsEntries);
    varraw_uint = v64;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v66 = varGfxWorld;
  if ( varGfxWorld->primaryLightEntityShadowVis )
  {
    v67 = varraw_uint;
    v68 = AllocPostload_raw_uint();
    v66->primaryLightEntityShadowVis = v68;
    varraw_uint = v68;
    Postload_raw_uintArray(AtStart, varGfxWorld->numPrimaryLightEntityShadowVisEntries);
    varraw_uint = v67;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v69 = varGfxWorld;
  if ( varGfxWorld->dynEntMotionBits[0] )
  {
    v70 = varraw_uint;
    v71 = AllocPostload_raw_uint();
    v69->dynEntMotionBits[0] = v71;
    varraw_uint = v71;
    Postload_raw_uintArray(AtStart, varGfxWorld->dynEntMotionBitsEntries[0]);
    varraw_uint = v70;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v72 = varGfxWorld;
  if ( varGfxWorld->dynEntMotionBits[1] )
  {
    v73 = varraw_uint;
    v74 = AllocPostload_raw_uint();
    v72->dynEntMotionBits[1] = v74;
    varraw_uint = v74;
    Postload_raw_uintArray(AtStart, varGfxWorld->dynEntMotionBitsEntries[1]);
    varraw_uint = v73;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v75 = varGfxWorld;
  if ( varGfxWorld->primaryLightDynEntShadowVis[0] )
  {
    v76 = varraw_uint;
    v77 = AllocPostload_raw_uint();
    v75->primaryLightDynEntShadowVis[0] = v77;
    varraw_uint = v77;
    Postload_raw_uintArray(AtStart, varGfxWorld->numPrimaryLightDynEntShadowVisEntries[0]);
    varraw_uint = v76;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v78 = varGfxWorld;
  if ( varGfxWorld->primaryLightDynEntShadowVis[1] )
  {
    v79 = varraw_uint;
    v80 = AllocPostload_raw_uint();
    v78->primaryLightDynEntShadowVis[1] = v80;
    varraw_uint = v80;
    Postload_raw_uintArray(AtStart, varGfxWorld->numPrimaryLightDynEntShadowVisEntries[1]);
    varraw_uint = v79;
  }
  DB_PopStreamPos();
  v81 = varGfxWorld;
  if ( varGfxWorld->shadowGeomOptimized )
  {
    v82 = varGfxShadowGeometry;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v81->shadowGeomOptimized = (GfxShadowGeometry *)g_streamPosGlob.pos;
    varGfxShadowGeometry = (GfxShadowGeometry *)g_streamPosGlob.pos;
    v83 = varGfxWorld->primaryLightCount;
    if ( 24 * v83 )
    {
      if ( (unsigned __int64)(24 * v83) > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(24 * v83);
    }
    for ( n = varGfxShadowGeometry; v83; --v83 )
    {
      v85 = n;
      varGfxShadowGeometry = n;
      if ( n == (GfxShadowGeometry *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, n, 0x18ui64);
        v85 = varGfxShadowGeometry;
      }
      if ( v85->sortedSurfIndex )
      {
        v86 = varBSPSURF_COUNT_TYPE;
        v87 = AllocPostload_BSPSURF_COUNT_TYPE();
        v85->sortedSurfIndex = v87;
        varBSPSURF_COUNT_TYPE = v87;
        Postload_BSPSURF_COUNT_TYPEArray(AtStart, varGfxShadowGeometry->surfaceCount);
        v85 = varGfxShadowGeometry;
        varBSPSURF_COUNT_TYPE = v86;
      }
      if ( v85->smodelIndex )
      {
        v88 = varushort;
        v89 = AllocPostload_ushort();
        v85->smodelIndex = v89;
        varushort = v89;
        Postload_ushortArray(AtStart, varGfxShadowGeometry->smodelCount);
        varushort = v88;
      }
      ++n;
    }
    varGfxShadowGeometry = v82;
  }
  v90 = varGfxLightAABB;
  varGfxLightAABB = &varGfxWorld->lightAABB;
  Postload_GfxLightAABB(NotAtStart);
  varGfxLightAABB = v90;
  v91 = varGfxWorldDpvsStatic;
  varGfxWorldDpvsStatic = &varGfxWorld->dpvs;
  Postload_GfxWorldDpvsStatic(NotAtStart);
  varGfxWorldDpvsStatic = v91;
  v92 = varGfxWorldDpvsDynamic;
  varGfxWorldDpvsDynamic = &varGfxWorld->dpvsDyn;
  Postload_GfxWorldDpvsDynamic(NotAtStart);
  v93 = varGfxWorld;
  varGfxWorldDpvsDynamic = v92;
  if ( varGfxWorld->umbraGates )
  {
    v94 = varUmbraGate;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v93->umbraGates = (UmbraGate *)g_streamPosGlob.pos;
    v93 = varGfxWorld;
    varUmbraGate = (UmbraGate *)g_streamPosGlob.pos;
    v95 = 32i64 * varGfxWorld->numUmbraGates;
    if ( v95 )
    {
      if ( v95 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v95);
      v93 = varGfxWorld;
    }
    varUmbraGate = v94;
  }
  if ( v93->umbraTomeData )
  {
    v96 = varbyte16;
    v97 = AllocPostload_byte16();
    v93->umbraTomeData = v97;
    varbyte16 = v97;
    Postload_byte16Array(AtStart, varGfxWorld->umbraTomeSize);
    v93 = varGfxWorld;
    varbyte16 = v96;
  }
  v98 = varumbraTomePtr_t;
  p_umbraTome = &v93->umbraTome;
  varumbraTomePtr_t = &v93->umbraTome;
  if ( &v93->umbraTome == (Umbra::Tome **)g_streamPosGlob.pos )
  {
    DB_PatchMem_ValidatePostloadStream(NotAtStart, &v93->umbraTome, 8ui64);
    v93 = varGfxWorld;
  }
  Load_UmbraTome(p_umbraTome, v93->umbraTomeData, v93->umbraTomeSize);
  v100 = varGfxWorld;
  varumbraTomePtr_t = v98;
  if ( varGfxWorld->mdaoVolumes )
  {
    v101 = varMdaoVolume;
    v102 = AllocPostload_MdaoVolume();
    v100->mdaoVolumes = v102;
    varMdaoVolume = v102;
    Postload_MdaoVolumeArray(AtStart, varGfxWorld->mdaoVolumeCount);
    v100 = varGfxWorld;
    varMdaoVolume = v101;
  }
  v103 = varStreamTree;
  varStreamTree = &v100->streamTree;
  Postload_StreamTree(NotAtStart);
  varStreamTree = v103;
  v104 = varStreamTreeGrid;
  varStreamTreeGrid = &varGfxWorld->materialStreamTreeGrid;
  Postload_StreamTreeGrid(NotAtStart);
  varStreamTreeGrid = &varGfxWorld->xmodelStreamTreeGrid;
  Postload_StreamTreeGrid(NotAtStart);
  varStreamTreeGrid = v104;
  DB_PopStreamPos();
  DB_PatchMem_PopAsset();
}

/*
==============
Postload_GfxWorldArray
==============
*/
void Postload_GfxWorldArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxWorld *i; 

  v2 = count;
  Postload_Stream(streamStart, varGfxWorld, 16864 * count);
  for ( i = varGfxWorld; v2; --v2 )
  {
    varGfxWorld = i;
    Postload_GfxWorld(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_GfxWorldDpvsDynamic
==============
*/
void Postload_GfxWorldDpvsDynamic(const DBStreamStart streamStart)
{
  GfxWorldDpvsDynamic *v2; 
  unsigned int *v3; 
  unsigned int *v4; 
  GfxWorldDpvsDynamic *v5; 
  unsigned int *v6; 
  unsigned int *v7; 
  GfxWorldDpvsDynamic *v8; 
  unsigned __int8 *v9; 
  unsigned __int8 *v10; 
  GfxWorldDpvsDynamic *v11; 
  unsigned __int8 *v12; 
  unsigned __int8 *v13; 
  GfxWorldDpvsDynamic *v14; 
  unsigned __int8 *v15; 
  unsigned __int8 *v16; 
  GfxWorldDpvsDynamic *v17; 
  unsigned __int8 *v18; 
  unsigned __int8 *v19; 
  GfxWorldDpvsDynamic *v20; 
  unsigned __int8 *v21; 
  unsigned __int8 *v22; 
  GfxWorldDpvsDynamic *v23; 
  unsigned __int8 *v24; 
  unsigned __int8 *v25; 
  GfxWorldDpvsDynamic *v26; 
  unsigned __int8 *v27; 
  unsigned __int8 *v28; 
  GfxWorldDpvsDynamic *v29; 
  unsigned __int8 *v30; 
  unsigned __int8 *v31; 
  GfxWorldDpvsDynamic *v32; 
  unsigned __int8 *v33; 
  unsigned __int8 *v34; 
  GfxWorldDpvsDynamic *v35; 
  unsigned __int8 *v36; 
  unsigned __int8 *v37; 
  GfxWorldDpvsDynamic *v38; 
  unsigned __int8 *v39; 
  unsigned __int8 *v40; 
  GfxWorldDpvsDynamic *v41; 
  unsigned __int8 *v42; 
  unsigned __int8 *v43; 
  GfxWorldDpvsDynamic *v44; 
  unsigned __int8 *v45; 
  unsigned __int8 *v46; 
  GfxWorldDpvsDynamic *v47; 
  unsigned __int8 *v48; 
  unsigned __int8 *v49; 
  GfxWorldDpvsDynamic *v50; 
  unsigned __int8 *v51; 
  unsigned __int8 *v52; 
  GfxWorldDpvsDynamic *v53; 
  unsigned __int8 *v54; 
  unsigned __int8 *v55; 
  GfxWorldDpvsDynamic *v56; 
  unsigned __int8 *v57; 
  unsigned __int8 *v58; 
  GfxWorldDpvsDynamic *v59; 
  unsigned __int8 *v60; 
  unsigned __int8 *v61; 
  GfxWorldDpvsDynamic *v62; 
  unsigned __int8 *v63; 
  unsigned __int8 *v64; 
  GfxWorldDpvsDynamic *v65; 
  unsigned __int8 *v66; 
  unsigned __int8 *v67; 
  GfxWorldDpvsDynamic *v68; 
  unsigned __int8 *v69; 
  unsigned __int8 *v70; 
  GfxWorldDpvsDynamic *v71; 
  unsigned __int8 *v72; 
  unsigned __int8 *v73; 
  GfxWorldDpvsDynamic *v74; 
  unsigned __int8 *v75; 
  unsigned __int8 *v76; 
  GfxWorldDpvsDynamic *v77; 
  unsigned __int8 *v78; 
  unsigned __int8 *v79; 
  GfxWorldDpvsDynamic *v80; 
  unsigned __int8 *v81; 
  unsigned __int8 *v82; 
  GfxWorldDpvsDynamic *v83; 
  unsigned __int8 *v84; 
  unsigned __int8 *v85; 
  GfxWorldDpvsDynamic *v86; 
  unsigned __int8 *v87; 
  unsigned __int8 *v88; 
  GfxWorldDpvsDynamic *v89; 
  unsigned __int8 *v90; 
  unsigned __int8 *v91; 
  GfxWorldDpvsDynamic *v92; 
  unsigned __int8 *v93; 
  unsigned __int8 *v94; 
  GfxWorldDpvsDynamic *v95; 
  unsigned __int8 *v96; 
  unsigned __int8 *v97; 
  GfxWorldDpvsDynamic *v98; 
  unsigned __int8 *v99; 
  unsigned __int8 *v100; 
  GfxWorldDpvsDynamic *v101; 
  unsigned __int8 *v102; 
  unsigned __int8 *v103; 
  GfxWorldDpvsDynamic *v104; 
  unsigned __int8 *v105; 
  unsigned __int8 *v106; 
  GfxWorldDpvsDynamic *v107; 
  unsigned __int8 *v108; 
  unsigned __int8 *v109; 
  GfxWorldDpvsDynamic *v110; 
  unsigned __int8 *v111; 
  unsigned __int8 *v112; 
  GfxWorldDpvsDynamic *v113; 
  unsigned __int8 *v114; 
  unsigned __int8 *v115; 
  GfxWorldDpvsDynamic *v116; 
  unsigned __int8 *v117; 
  unsigned __int8 *v118; 
  GfxWorldDpvsDynamic *v119; 
  unsigned __int8 *v120; 
  unsigned __int8 *v121; 
  GfxWorldDpvsDynamic *v122; 
  unsigned __int8 *v123; 
  unsigned __int8 *v124; 
  GfxWorldDpvsDynamic *v125; 
  unsigned __int8 *v126; 
  unsigned __int8 *v127; 
  GfxWorldDpvsDynamic *v128; 
  unsigned __int8 *v129; 
  unsigned __int8 *v130; 
  GfxWorldDpvsDynamic *v131; 
  unsigned __int8 *v132; 
  unsigned __int8 *v133; 
  GfxWorldDpvsDynamic *v134; 
  unsigned __int8 *v135; 
  unsigned __int8 *v136; 
  GfxWorldDpvsDynamic *v137; 
  unsigned __int8 *v138; 
  unsigned __int8 *v139; 
  GfxWorldDpvsDynamic *v140; 
  unsigned __int8 *v141; 
  unsigned __int8 *v142; 
  GfxWorldDpvsDynamic *v143; 
  unsigned __int8 *v144; 
  unsigned __int8 *v145; 
  GfxWorldDpvsDynamic *v146; 
  unsigned __int8 *v147; 
  unsigned __int8 *v148; 
  GfxWorldDpvsDynamic *v149; 
  unsigned __int8 *v150; 
  unsigned __int8 *v151; 
  GfxWorldDpvsDynamic *v152; 
  unsigned __int8 *v153; 
  unsigned __int8 *v154; 
  GfxWorldDpvsDynamic *v155; 
  unsigned __int8 *v156; 
  unsigned __int8 *v157; 
  GfxWorldDpvsDynamic *v158; 
  unsigned __int8 *v159; 
  unsigned __int8 *v160; 
  GfxWorldDpvsDynamic *v161; 
  unsigned __int8 *v162; 
  unsigned __int8 *v163; 
  GfxWorldDpvsDynamic *v164; 
  unsigned __int8 *v165; 
  unsigned __int8 *v166; 
  GfxWorldDpvsDynamic *v167; 
  unsigned __int8 *v168; 
  unsigned __int8 *v169; 
  GfxWorldDpvsDynamic *v170; 
  unsigned __int8 *v171; 
  unsigned __int8 *v172; 
  GfxWorldDpvsDynamic *v173; 
  unsigned __int8 *v174; 
  unsigned __int8 *v175; 
  GfxWorldDpvsDynamic *v176; 
  unsigned __int8 *v177; 
  unsigned __int8 *v178; 
  GfxWorldDpvsDynamic *v179; 
  unsigned __int8 *v180; 
  unsigned __int8 *v181; 
  GfxWorldDpvsDynamic *v182; 
  unsigned __int8 *v183; 
  unsigned __int8 *v184; 
  GfxWorldDpvsDynamic *v185; 
  unsigned __int8 *v186; 
  unsigned __int8 *v187; 
  GfxWorldDpvsDynamic *v188; 
  unsigned __int8 *v189; 
  unsigned __int8 *v190; 
  GfxWorldDpvsDynamic *v191; 
  unsigned __int8 *v192; 
  unsigned __int8 *v193; 
  GfxWorldDpvsDynamic *v194; 
  unsigned __int8 *v195; 
  unsigned __int8 *v196; 
  GfxWorldDpvsDynamic *v197; 
  unsigned __int8 *v198; 
  unsigned __int8 *v199; 

  if ( streamStart != (varGfxWorldDpvsDynamic != (GfxWorldDpvsDynamic *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxWorldDpvsDynamic, 0x230ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x230ui64);
  DB_PushStreamPos(4u);
  v2 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntCellBits[0] )
  {
    v3 = varraw_uint;
    v4 = AllocPostload_raw_uint();
    v2->dynEntCellBits[0] = v4;
    varraw_uint = v4;
    Postload_raw_uintArray(AtStart, varGfxWorldDpvsDynamic->dynEntClientWordCount[0] * varGfxWorld->dpvsPlanes.cellCount);
    varraw_uint = v3;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v5 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntCellBits[1] )
  {
    v6 = varraw_uint;
    v7 = AllocPostload_raw_uint();
    v5->dynEntCellBits[1] = v7;
    varraw_uint = v7;
    Postload_raw_uintArray(AtStart, varGfxWorldDpvsDynamic->dynEntClientWordCount[1] * varGfxWorld->dpvsPlanes.cellCount);
    varraw_uint = v6;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v8 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][0] )
  {
    v9 = varraw_byte16;
    v10 = AllocPostload_raw_byte16();
    v8->dynEntVisData[0][0] = v10;
    varraw_byte16 = v10;
    Postload_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[0]);
    varraw_byte16 = v9;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v11 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][0] )
  {
    v12 = varraw_byte16;
    v13 = AllocPostload_raw_byte16();
    v11->dynEntVisData[1][0] = v13;
    varraw_byte16 = v13;
    Postload_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[1]);
    varraw_byte16 = v12;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v14 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][1] )
  {
    v15 = varraw_byte16;
    v16 = AllocPostload_raw_byte16();
    v14->dynEntVisData[0][1] = v16;
    varraw_byte16 = v16;
    Postload_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[0]);
    varraw_byte16 = v15;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v17 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][1] )
  {
    v18 = varraw_byte16;
    v19 = AllocPostload_raw_byte16();
    v17->dynEntVisData[1][1] = v19;
    varraw_byte16 = v19;
    Postload_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[1]);
    varraw_byte16 = v18;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v20 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][2] )
  {
    v21 = varraw_byte16;
    v22 = AllocPostload_raw_byte16();
    v20->dynEntVisData[0][2] = v22;
    varraw_byte16 = v22;
    Postload_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[0]);
    varraw_byte16 = v21;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v23 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][2] )
  {
    v24 = varraw_byte16;
    v25 = AllocPostload_raw_byte16();
    v23->dynEntVisData[1][2] = v25;
    varraw_byte16 = v25;
    Postload_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[1]);
    varraw_byte16 = v24;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v26 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][3] )
  {
    v27 = varraw_byte16;
    v28 = AllocPostload_raw_byte16();
    v26->dynEntVisData[0][3] = v28;
    varraw_byte16 = v28;
    Postload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v27;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v29 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][3] )
  {
    v30 = varraw_byte16;
    v31 = AllocPostload_raw_byte16();
    v29->dynEntVisData[1][3] = v31;
    varraw_byte16 = v31;
    Postload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v30;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v32 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][4] )
  {
    v33 = varraw_byte16;
    v34 = AllocPostload_raw_byte16();
    v32->dynEntVisData[0][4] = v34;
    varraw_byte16 = v34;
    Postload_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[0]);
    varraw_byte16 = v33;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v35 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][4] )
  {
    v36 = varraw_byte16;
    v37 = AllocPostload_raw_byte16();
    v35->dynEntVisData[1][4] = v37;
    varraw_byte16 = v37;
    Postload_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[1]);
    varraw_byte16 = v36;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v38 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][5] )
  {
    v39 = varraw_byte16;
    v40 = AllocPostload_raw_byte16();
    v38->dynEntVisData[0][5] = v40;
    varraw_byte16 = v40;
    Postload_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[0]);
    varraw_byte16 = v39;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v41 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][5] )
  {
    v42 = varraw_byte16;
    v43 = AllocPostload_raw_byte16();
    v41->dynEntVisData[1][5] = v43;
    varraw_byte16 = v43;
    Postload_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[1]);
    varraw_byte16 = v42;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v44 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][6] )
  {
    v45 = varraw_byte16;
    v46 = AllocPostload_raw_byte16();
    v44->dynEntVisData[0][6] = v46;
    varraw_byte16 = v46;
    Postload_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[0]);
    varraw_byte16 = v45;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v47 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][6] )
  {
    v48 = varraw_byte16;
    v49 = AllocPostload_raw_byte16();
    v47->dynEntVisData[1][6] = v49;
    varraw_byte16 = v49;
    Postload_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[1]);
    varraw_byte16 = v48;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v50 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][7] )
  {
    v51 = varraw_byte16;
    v52 = AllocPostload_raw_byte16();
    v50->dynEntVisData[0][7] = v52;
    varraw_byte16 = v52;
    Postload_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[0]);
    varraw_byte16 = v51;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v53 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][7] )
  {
    v54 = varraw_byte16;
    v55 = AllocPostload_raw_byte16();
    v53->dynEntVisData[1][7] = v55;
    varraw_byte16 = v55;
    Postload_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[1]);
    varraw_byte16 = v54;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v56 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][8] )
  {
    v57 = varraw_byte16;
    v58 = AllocPostload_raw_byte16();
    v56->dynEntVisData[0][8] = v58;
    varraw_byte16 = v58;
    Postload_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[0]);
    varraw_byte16 = v57;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v59 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][8] )
  {
    v60 = varraw_byte16;
    v61 = AllocPostload_raw_byte16();
    v59->dynEntVisData[1][8] = v61;
    varraw_byte16 = v61;
    Postload_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[1]);
    varraw_byte16 = v60;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v62 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][9] )
  {
    v63 = varraw_byte16;
    v64 = AllocPostload_raw_byte16();
    v62->dynEntVisData[0][9] = v64;
    varraw_byte16 = v64;
    Postload_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[0]);
    varraw_byte16 = v63;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v65 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][9] )
  {
    v66 = varraw_byte16;
    v67 = AllocPostload_raw_byte16();
    v65->dynEntVisData[1][9] = v67;
    varraw_byte16 = v67;
    Postload_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[1]);
    varraw_byte16 = v66;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v68 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][10] )
  {
    v69 = varraw_byte16;
    v70 = AllocPostload_raw_byte16();
    v68->dynEntVisData[0][10] = v70;
    varraw_byte16 = v70;
    Postload_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[0]);
    varraw_byte16 = v69;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v71 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][10] )
  {
    v72 = varraw_byte16;
    v73 = AllocPostload_raw_byte16();
    v71->dynEntVisData[1][10] = v73;
    varraw_byte16 = v73;
    Postload_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[1]);
    varraw_byte16 = v72;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v74 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][11] )
  {
    v75 = varraw_byte16;
    v76 = AllocPostload_raw_byte16();
    v74->dynEntVisData[0][11] = v76;
    varraw_byte16 = v76;
    Postload_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[0]);
    varraw_byte16 = v75;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v77 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][11] )
  {
    v78 = varraw_byte16;
    v79 = AllocPostload_raw_byte16();
    v77->dynEntVisData[1][11] = v79;
    varraw_byte16 = v79;
    Postload_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[1]);
    varraw_byte16 = v78;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v80 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][12] )
  {
    v81 = varraw_byte16;
    v82 = AllocPostload_raw_byte16();
    v80->dynEntVisData[0][12] = v82;
    varraw_byte16 = v82;
    Postload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v81;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v83 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][12] )
  {
    v84 = varraw_byte16;
    v85 = AllocPostload_raw_byte16();
    v83->dynEntVisData[1][12] = v85;
    varraw_byte16 = v85;
    Postload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v84;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v86 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][13] )
  {
    v87 = varraw_byte16;
    v88 = AllocPostload_raw_byte16();
    v86->dynEntVisData[0][13] = v88;
    varraw_byte16 = v88;
    Postload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v87;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v89 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][13] )
  {
    v90 = varraw_byte16;
    v91 = AllocPostload_raw_byte16();
    v89->dynEntVisData[1][13] = v91;
    varraw_byte16 = v91;
    Postload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v90;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v92 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][14] )
  {
    v93 = varraw_byte16;
    v94 = AllocPostload_raw_byte16();
    v92->dynEntVisData[0][14] = v94;
    varraw_byte16 = v94;
    Postload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v93;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v95 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][14] )
  {
    v96 = varraw_byte16;
    v97 = AllocPostload_raw_byte16();
    v95->dynEntVisData[1][14] = v97;
    varraw_byte16 = v97;
    Postload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v96;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v98 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][15] )
  {
    v99 = varraw_byte16;
    v100 = AllocPostload_raw_byte16();
    v98->dynEntVisData[0][15] = v100;
    varraw_byte16 = v100;
    Postload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v99;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v101 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][15] )
  {
    v102 = varraw_byte16;
    v103 = AllocPostload_raw_byte16();
    v101->dynEntVisData[1][15] = v103;
    varraw_byte16 = v103;
    Postload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v102;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v104 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][16] )
  {
    v105 = varraw_byte16;
    v106 = AllocPostload_raw_byte16();
    v104->dynEntVisData[0][16] = v106;
    varraw_byte16 = v106;
    Postload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v105;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v107 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][16] )
  {
    v108 = varraw_byte16;
    v109 = AllocPostload_raw_byte16();
    v107->dynEntVisData[1][16] = v109;
    varraw_byte16 = v109;
    Postload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v108;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v110 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][17] )
  {
    v111 = varraw_byte16;
    v112 = AllocPostload_raw_byte16();
    v110->dynEntVisData[0][17] = v112;
    varraw_byte16 = v112;
    Postload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v111;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v113 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][17] )
  {
    v114 = varraw_byte16;
    v115 = AllocPostload_raw_byte16();
    v113->dynEntVisData[1][17] = v115;
    varraw_byte16 = v115;
    Postload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v114;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v116 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][18] )
  {
    v117 = varraw_byte16;
    v118 = AllocPostload_raw_byte16();
    v116->dynEntVisData[0][18] = v118;
    varraw_byte16 = v118;
    Postload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v117;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v119 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][18] )
  {
    v120 = varraw_byte16;
    v121 = AllocPostload_raw_byte16();
    v119->dynEntVisData[1][18] = v121;
    varraw_byte16 = v121;
    Postload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v120;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v122 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][19] )
  {
    v123 = varraw_byte16;
    v124 = AllocPostload_raw_byte16();
    v122->dynEntVisData[0][19] = v124;
    varraw_byte16 = v124;
    Postload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v123;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v125 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][19] )
  {
    v126 = varraw_byte16;
    v127 = AllocPostload_raw_byte16();
    v125->dynEntVisData[1][19] = v127;
    varraw_byte16 = v127;
    Postload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v126;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v128 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][20] )
  {
    v129 = varraw_byte16;
    v130 = AllocPostload_raw_byte16();
    v128->dynEntVisData[0][20] = v130;
    varraw_byte16 = v130;
    Postload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v129;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v131 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][20] )
  {
    v132 = varraw_byte16;
    v133 = AllocPostload_raw_byte16();
    v131->dynEntVisData[1][20] = v133;
    varraw_byte16 = v133;
    Postload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v132;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v134 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][21] )
  {
    v135 = varraw_byte16;
    v136 = AllocPostload_raw_byte16();
    v134->dynEntVisData[0][21] = v136;
    varraw_byte16 = v136;
    Postload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v135;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v137 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][21] )
  {
    v138 = varraw_byte16;
    v139 = AllocPostload_raw_byte16();
    v137->dynEntVisData[1][21] = v139;
    varraw_byte16 = v139;
    Postload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v138;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v140 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][22] )
  {
    v141 = varraw_byte16;
    v142 = AllocPostload_raw_byte16();
    v140->dynEntVisData[0][22] = v142;
    varraw_byte16 = v142;
    Postload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v141;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v143 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][22] )
  {
    v144 = varraw_byte16;
    v145 = AllocPostload_raw_byte16();
    v143->dynEntVisData[1][22] = v145;
    varraw_byte16 = v145;
    Postload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v144;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v146 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][23] )
  {
    v147 = varraw_byte16;
    v148 = AllocPostload_raw_byte16();
    v146->dynEntVisData[0][23] = v148;
    varraw_byte16 = v148;
    Postload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v147;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v149 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][23] )
  {
    v150 = varraw_byte16;
    v151 = AllocPostload_raw_byte16();
    v149->dynEntVisData[1][23] = v151;
    varraw_byte16 = v151;
    Postload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v150;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v152 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][24] )
  {
    v153 = varraw_byte16;
    v154 = AllocPostload_raw_byte16();
    v152->dynEntVisData[0][24] = v154;
    varraw_byte16 = v154;
    Postload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v153;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v155 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][24] )
  {
    v156 = varraw_byte16;
    v157 = AllocPostload_raw_byte16();
    v155->dynEntVisData[1][24] = v157;
    varraw_byte16 = v157;
    Postload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v156;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v158 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][25] )
  {
    v159 = varraw_byte16;
    v160 = AllocPostload_raw_byte16();
    v158->dynEntVisData[0][25] = v160;
    varraw_byte16 = v160;
    Postload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v159;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v161 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][25] )
  {
    v162 = varraw_byte16;
    v163 = AllocPostload_raw_byte16();
    v161->dynEntVisData[1][25] = v163;
    varraw_byte16 = v163;
    Postload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v162;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v164 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][26] )
  {
    v165 = varraw_byte16;
    v166 = AllocPostload_raw_byte16();
    v164->dynEntVisData[0][26] = v166;
    varraw_byte16 = v166;
    Postload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v165;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v167 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][26] )
  {
    v168 = varraw_byte16;
    v169 = AllocPostload_raw_byte16();
    v167->dynEntVisData[1][26] = v169;
    varraw_byte16 = v169;
    Postload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v168;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v170 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][27] )
  {
    v171 = varraw_byte16;
    v172 = AllocPostload_raw_byte16();
    v170->dynEntVisData[0][27] = v172;
    varraw_byte16 = v172;
    Postload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v171;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v173 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][27] )
  {
    v174 = varraw_byte16;
    v175 = AllocPostload_raw_byte16();
    v173->dynEntVisData[1][27] = v175;
    varraw_byte16 = v175;
    Postload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v174;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v176 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][28] )
  {
    v177 = varraw_byte16;
    v178 = AllocPostload_raw_byte16();
    v176->dynEntVisData[0][28] = v178;
    varraw_byte16 = v178;
    Postload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v177;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v179 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][28] )
  {
    v180 = varraw_byte16;
    v181 = AllocPostload_raw_byte16();
    v179->dynEntVisData[1][28] = v181;
    varraw_byte16 = v181;
    Postload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v180;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v182 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][29] )
  {
    v183 = varraw_byte16;
    v184 = AllocPostload_raw_byte16();
    v182->dynEntVisData[0][29] = v184;
    varraw_byte16 = v184;
    Postload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v183;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v185 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][29] )
  {
    v186 = varraw_byte16;
    v187 = AllocPostload_raw_byte16();
    v185->dynEntVisData[1][29] = v187;
    varraw_byte16 = v187;
    Postload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v186;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v188 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][30] )
  {
    v189 = varraw_byte16;
    v190 = AllocPostload_raw_byte16();
    v188->dynEntVisData[0][30] = v190;
    varraw_byte16 = v190;
    Postload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v189;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v191 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][30] )
  {
    v192 = varraw_byte16;
    v193 = AllocPostload_raw_byte16();
    v191->dynEntVisData[1][30] = v193;
    varraw_byte16 = v193;
    Postload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v192;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v194 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][31] )
  {
    v195 = varraw_byte16;
    v196 = AllocPostload_raw_byte16();
    v194->dynEntVisData[0][31] = v196;
    varraw_byte16 = v196;
    Postload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v195;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v197 = varGfxWorldDpvsDynamic;
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][31] )
  {
    v198 = varraw_byte16;
    v199 = AllocPostload_raw_byte16();
    v197->dynEntVisData[1][31] = v199;
    varraw_byte16 = v199;
    Postload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v198;
  }
  DB_PopStreamPos();
}

/*
==============
Postload_GfxWorldDpvsDynamicArray
==============
*/
void Postload_GfxWorldDpvsDynamicArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxWorldDpvsDynamic *i; 

  v2 = count;
  Postload_Stream(streamStart, varGfxWorldDpvsDynamic, 560 * count);
  for ( i = varGfxWorldDpvsDynamic; v2; --v2 )
  {
    varGfxWorldDpvsDynamic = i;
    Postload_GfxWorldDpvsDynamic(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_GfxWorldDpvsDynamicStream
==============
*/
void Postload_GfxWorldDpvsDynamicStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 38048, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  for ( ; count; --count )
  {
    Postload_GfxWorldDpvsDynamic(AtStart);
    varGfxWorldDpvsDynamic = (GfxWorldDpvsDynamic *)g_streamPosGlob.pos;
  }
}

/*
==============
Postload_GfxWorldDpvsPlane
==============
*/
void Postload_GfxWorldDpvsPlane(const DBStreamStart streamStart)
{
  if ( streamStart != (varGfxWorldDpvsPlane != (GfxWorldDpvsPlane *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxWorldDpvsPlane, 0x14ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x14ui64);
}

/*
==============
Postload_GfxWorldDpvsPlaneArray
==============
*/
void Postload_GfxWorldDpvsPlaneArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varGfxWorldDpvsPlane, 20 * count);
}

/*
==============
Postload_GfxWorldDpvsPlaneStream
==============
*/
void Postload_GfxWorldDpvsPlaneStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxWorldDpvsPlane *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 40411, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxWorldDpvsPlane;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (GfxWorldDpvsPlane *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x14ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x14ui64);
      pos = g_streamPosGlob.pos + 20;
      g_streamPosGlob.pos = pos;
      v3 = (GfxWorldDpvsPlane *)pos;
      varGfxWorldDpvsPlane = (GfxWorldDpvsPlane *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxWorldDpvsPlanes
==============
*/
void Postload_GfxWorldDpvsPlanes(const DBStreamStart streamStart)
{
  GfxWorldDpvsPlanes *v2; 
  GfxWorldDpvsPlane *v3; 
  __int64 planeCount; 
  GfxWorldDpvsPlanes *v5; 
  unsigned __int16 *v6; 
  unsigned __int16 *v7; 
  GfxWorldDpvsPlanes *v8; 
  unsigned int *v9; 
  unsigned int *v10; 

  if ( streamStart != (varGfxWorldDpvsPlanes != (GfxWorldDpvsPlanes *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxWorldDpvsPlanes, 0x28ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x28ui64);
  v2 = varGfxWorldDpvsPlanes;
  if ( varGfxWorldDpvsPlanes->planes )
  {
    v3 = varGfxWorldDpvsPlane;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->planes = (GfxWorldDpvsPlane *)g_streamPosGlob.pos;
    varGfxWorldDpvsPlane = (GfxWorldDpvsPlane *)g_streamPosGlob.pos;
    planeCount = varGfxWorldDpvsPlanes->planeCount;
    if ( 20 * planeCount )
      DB_IncStreamPos(20 * planeCount);
    varGfxWorldDpvsPlane = v3;
  }
  v5 = varGfxWorldDpvsPlanes;
  if ( varGfxWorldDpvsPlanes->nodes )
  {
    v6 = varushort;
    v7 = AllocPostload_ushort();
    v5->nodes = v7;
    varushort = v7;
    Postload_ushortArray(AtStart, varGfxWorldDpvsPlanes->nodeCount);
    varushort = v6;
  }
  DB_PushStreamPos(4u);
  v8 = varGfxWorldDpvsPlanes;
  if ( varGfxWorldDpvsPlanes->sceneEntCellBits )
  {
    v9 = varraw_uint;
    v10 = AllocPostload_raw_uint();
    v8->sceneEntCellBits = v10;
    varraw_uint = v10;
    Postload_raw_uintArray(AtStart, varGfxWorldDpvsPlanes->cellCount << 9);
    varraw_uint = v9;
  }
  DB_PopStreamPos();
}

/*
==============
Postload_GfxWorldDpvsPlanesArray
==============
*/
void Postload_GfxWorldDpvsPlanesArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxWorldDpvsPlanes *i; 

  v2 = count;
  Postload_Stream(streamStart, varGfxWorldDpvsPlanes, 40 * count);
  for ( i = varGfxWorldDpvsPlanes; v2; --v2 )
  {
    varGfxWorldDpvsPlanes = i;
    Postload_GfxWorldDpvsPlanes(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_GfxWorldDpvsPlanesStream
==============
*/
void Postload_GfxWorldDpvsPlanesStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  GfxWorldDpvsPlanes *v5; 
  GfxWorldDpvsPlane *v6; 
  __int64 planeCount; 
  GfxWorldDpvsPlanes *v8; 
  unsigned __int16 *v9; 
  unsigned __int16 *v10; 
  GfxWorldDpvsPlanes *v11; 
  unsigned int *v12; 
  unsigned int *v13; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 40613, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varGfxWorldDpvsPlanes;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x28ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x28ui64);
      v5 = varGfxWorldDpvsPlanes;
      g_streamPosGlob.pos += 40;
      if ( varGfxWorldDpvsPlanes->planes )
      {
        v6 = varGfxWorldDpvsPlane;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v5->planes = (GfxWorldDpvsPlane *)g_streamPosGlob.pos;
        varGfxWorldDpvsPlane = (GfxWorldDpvsPlane *)g_streamPosGlob.pos;
        planeCount = varGfxWorldDpvsPlanes->planeCount;
        if ( 20 * planeCount )
          DB_IncStreamPos(20 * planeCount);
        varGfxWorldDpvsPlane = v6;
      }
      v8 = varGfxWorldDpvsPlanes;
      if ( varGfxWorldDpvsPlanes->nodes )
      {
        v9 = varushort;
        v10 = AllocPostload_ushort();
        v8->nodes = v10;
        varushort = v10;
        Postload_ushortArray(AtStart, varGfxWorldDpvsPlanes->nodeCount);
        varushort = v9;
      }
      DB_PushStreamPos(4u);
      v11 = varGfxWorldDpvsPlanes;
      if ( varGfxWorldDpvsPlanes->sceneEntCellBits )
      {
        v12 = varraw_uint;
        v13 = AllocPostload_raw_uint();
        v11->sceneEntCellBits = v13;
        varraw_uint = v13;
        Postload_raw_uintArray(AtStart, varGfxWorldDpvsPlanes->cellCount << 9);
        varraw_uint = v12;
      }
      DB_PopStreamPos();
      pos = g_streamPosGlob.pos;
      varGfxWorldDpvsPlanes = (GfxWorldDpvsPlanes *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxWorldDpvsStatic
==============
*/
void Postload_GfxWorldDpvsStatic(const DBStreamStart streamStart)
{
  GfxWorldDpvsStatic *v2; 
  unsigned int *v3; 
  unsigned int *v4; 
  GfxWorldDpvsStatic *v5; 
  unsigned int *v6; 
  unsigned int *v7; 
  GfxWorldDpvsStatic *v8; 
  unsigned int *v9; 
  unsigned int *v10; 
  GfxWorldDpvsStatic *v11; 
  unsigned int *v12; 
  unsigned int *v13; 
  GfxWorldDpvsStatic *v14; 
  unsigned int *v15; 
  unsigned int *v16; 
  GfxWorldDpvsStatic *v17; 
  unsigned int *v18; 
  unsigned int *v19; 
  GfxWorldDpvsStatic *v20; 
  unsigned int *v21; 
  unsigned int *v22; 
  GfxWorldDpvsStatic *v23; 
  unsigned int *v24; 
  unsigned int *v25; 
  GfxWorldDpvsStatic *v26; 
  unsigned int *v27; 
  unsigned int *v28; 
  GfxWorldDpvsStatic *v29; 
  unsigned int *v30; 
  unsigned int *v31; 
  GfxWorldDpvsStatic *v32; 
  unsigned int *v33; 
  unsigned int *v34; 
  GfxWorldDpvsStatic *v35; 
  unsigned int *v36; 
  unsigned int *v37; 
  GfxWorldDpvsStatic *v38; 
  unsigned int *v39; 
  unsigned int *v40; 
  GfxWorldDpvsStatic *v41; 
  unsigned int *v42; 
  unsigned int *v43; 
  GfxWorldDpvsStatic *v44; 
  unsigned int *v45; 
  unsigned int *v46; 
  GfxWorldDpvsStatic *v47; 
  unsigned int *v48; 
  unsigned int *v49; 
  GfxWorldDpvsStatic *v50; 
  unsigned int *v51; 
  unsigned int *v52; 
  GfxWorldDpvsStatic *v53; 
  unsigned int *v54; 
  unsigned int *v55; 
  GfxWorldDpvsStatic *v56; 
  unsigned int *v57; 
  unsigned int *v58; 
  GfxWorldDpvsStatic *v59; 
  unsigned int *v60; 
  unsigned int *v61; 
  GfxWorldDpvsStatic *v62; 
  unsigned int *v63; 
  unsigned int *v64; 
  GfxWorldDpvsStatic *v65; 
  unsigned int *v66; 
  unsigned int *v67; 
  GfxWorldDpvsStatic *v68; 
  unsigned int *v69; 
  unsigned int *v70; 
  GfxWorldDpvsStatic *v71; 
  unsigned int *v72; 
  unsigned int *v73; 
  GfxWorldDpvsStatic *v74; 
  unsigned int *v75; 
  unsigned int *v76; 
  GfxWorldDpvsStatic *v77; 
  unsigned int *v78; 
  unsigned int *v79; 
  GfxWorldDpvsStatic *v80; 
  unsigned int *v81; 
  unsigned int *v82; 
  GfxWorldDpvsStatic *v83; 
  unsigned int *v84; 
  unsigned int *v85; 
  GfxWorldDpvsStatic *v86; 
  unsigned int *v87; 
  unsigned int *v88; 
  GfxWorldDpvsStatic *v89; 
  unsigned int *v90; 
  unsigned int *v91; 
  GfxWorldDpvsStatic *v92; 
  unsigned int *v93; 
  unsigned int *v94; 
  GfxWorldDpvsStatic *v95; 
  unsigned int *v96; 
  unsigned int *v97; 
  GfxWorldDpvsStatic *v98; 
  unsigned int *v99; 
  unsigned int *v100; 
  GfxWorldDpvsStatic *v101; 
  unsigned int *v102; 
  unsigned int *v103; 
  GfxWorldDpvsStatic *v104; 
  unsigned int *v105; 
  unsigned int *v106; 
  GfxWorldDpvsStatic *v107; 
  unsigned int *v108; 
  unsigned int *v109; 
  GfxWorldDpvsStatic *v110; 
  unsigned int *v111; 
  unsigned int *v112; 
  GfxWorldDpvsStatic *v113; 
  unsigned int *v114; 
  unsigned int *v115; 
  GfxWorldDpvsStatic *v116; 
  unsigned int *v117; 
  unsigned int *v118; 
  GfxWorldDpvsStatic *v119; 
  unsigned int *v120; 
  unsigned int *v121; 
  GfxWorldDpvsStatic *v122; 
  unsigned int *v123; 
  unsigned int *v124; 
  GfxWorldDpvsStatic *v125; 
  unsigned int *v126; 
  unsigned int *v127; 
  GfxWorldDpvsStatic *v128; 
  unsigned int *v129; 
  unsigned int *v130; 
  GfxWorldDpvsStatic *v131; 
  unsigned int *v132; 
  unsigned int *v133; 
  GfxWorldDpvsStatic *v134; 
  unsigned int *v135; 
  unsigned int *v136; 
  GfxWorldDpvsStatic *v137; 
  unsigned int *v138; 
  unsigned int *v139; 
  GfxWorldDpvsStatic *v140; 
  unsigned int *v141; 
  unsigned int *v142; 
  GfxWorldDpvsStatic *v143; 
  unsigned int *v144; 
  unsigned int *v145; 
  GfxWorldDpvsStatic *v146; 
  unsigned int *v147; 
  unsigned int *v148; 
  GfxWorldDpvsStatic *v149; 
  unsigned int *v150; 
  unsigned int *v151; 
  GfxWorldDpvsStatic *v152; 
  unsigned int *v153; 
  unsigned int *v154; 
  GfxWorldDpvsStatic *v155; 
  unsigned int *v156; 
  unsigned int *v157; 
  GfxWorldDpvsStatic *v158; 
  unsigned int *v159; 
  unsigned int *v160; 
  GfxWorldDpvsStatic *v161; 
  unsigned int *v162; 
  unsigned int *v163; 
  GfxWorldDpvsStatic *v164; 
  unsigned int *v165; 
  unsigned int *v166; 
  GfxWorldDpvsStatic *v167; 
  unsigned int *v168; 
  unsigned int *v169; 
  GfxWorldDpvsStatic *v170; 
  unsigned int *v171; 
  unsigned int *v172; 
  GfxWorldDpvsStatic *v173; 
  unsigned int *v174; 
  unsigned int *v175; 
  GfxWorldDpvsStatic *v176; 
  unsigned int *v177; 
  unsigned int *v178; 
  GfxWorldDpvsStatic *v179; 
  unsigned int *v180; 
  unsigned int *v181; 
  GfxWorldDpvsStatic *v182; 
  unsigned int *v183; 
  unsigned int *v184; 
  GfxWorldDpvsStatic *v185; 
  unsigned int *v186; 
  unsigned int *v187; 
  GfxWorldDpvsStatic *v188; 
  unsigned int *v189; 
  unsigned int *v190; 
  GfxWorldDpvsStatic *v191; 
  unsigned int *v192; 
  unsigned int *v193; 
  GfxWorldDpvsStatic *v194; 
  unsigned int *v195; 
  unsigned int *v196; 
  GfxWorldDpvsStatic *v197; 
  unsigned int *v198; 
  unsigned int *v199; 
  GfxWorldDpvsStatic *v200; 
  unsigned int *v201; 
  unsigned int *v202; 
  GfxWorldDpvsStatic *v203; 
  unsigned int *v204; 
  unsigned int *v205; 
  GfxWorldDpvsStatic *v206; 
  unsigned int *v207; 
  unsigned int *v208; 
  unsigned __int16 *v209; 
  unsigned __int16 *v210; 
  GfxWorldDpvsStatic *v211; 
  unsigned int *v212; 
  unsigned int *v213; 
  GfxWorldDpvsStatic *v214; 
  unsigned int *v215; 
  unsigned int *v216; 

  if ( streamStart != (varGfxWorldDpvsStatic != (GfxWorldDpvsStatic *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxWorldDpvsStatic, 0x278ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x278ui64);
  DB_PushStreamPos(4u);
  v2 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[0] )
  {
    v3 = varraw_uint128;
    v4 = AllocPostload_raw_uint128();
    v2->smodelVisData[0] = v4;
    varraw_uint128 = v4;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v3;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v5 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[1] )
  {
    v6 = varraw_uint128;
    v7 = AllocPostload_raw_uint128();
    v5->smodelVisData[1] = v7;
    varraw_uint128 = v7;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v6;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v8 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[2] )
  {
    v9 = varraw_uint128;
    v10 = AllocPostload_raw_uint128();
    v8->smodelVisData[2] = v10;
    varraw_uint128 = v10;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v9;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v11 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[3] )
  {
    v12 = varraw_uint128;
    v13 = AllocPostload_raw_uint128();
    v11->smodelVisData[3] = v13;
    varraw_uint128 = v13;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v12;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v14 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[4] )
  {
    v15 = varraw_uint128;
    v16 = AllocPostload_raw_uint128();
    v14->smodelVisData[4] = v16;
    varraw_uint128 = v16;
    Postload_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v15;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v17 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[5] )
  {
    v18 = varraw_uint128;
    v19 = AllocPostload_raw_uint128();
    v17->smodelVisData[5] = v19;
    varraw_uint128 = v19;
    Postload_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v18;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v20 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[6] )
  {
    v21 = varraw_uint128;
    v22 = AllocPostload_raw_uint128();
    v20->smodelVisData[6] = v22;
    varraw_uint128 = v22;
    Postload_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v21;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v23 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[7] )
  {
    v24 = varraw_uint128;
    v25 = AllocPostload_raw_uint128();
    v23->smodelVisData[7] = v25;
    varraw_uint128 = v25;
    Postload_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v24;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v26 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[8] )
  {
    v27 = varraw_uint128;
    v28 = AllocPostload_raw_uint128();
    v26->smodelVisData[8] = v28;
    varraw_uint128 = v28;
    Postload_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v27;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v29 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[9] )
  {
    v30 = varraw_uint128;
    v31 = AllocPostload_raw_uint128();
    v29->smodelVisData[9] = v31;
    varraw_uint128 = v31;
    Postload_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v30;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v32 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[10] )
  {
    v33 = varraw_uint128;
    v34 = AllocPostload_raw_uint128();
    v32->smodelVisData[10] = v34;
    varraw_uint128 = v34;
    Postload_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v33;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v35 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[11] )
  {
    v36 = varraw_uint128;
    v37 = AllocPostload_raw_uint128();
    v35->smodelVisData[11] = v37;
    varraw_uint128 = v37;
    Postload_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v36;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v38 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[12] )
  {
    v39 = varraw_uint128;
    v40 = AllocPostload_raw_uint128();
    v38->smodelVisData[12] = v40;
    varraw_uint128 = v40;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v39;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v41 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[13] )
  {
    v42 = varraw_uint128;
    v43 = AllocPostload_raw_uint128();
    v41->smodelVisData[13] = v43;
    varraw_uint128 = v43;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v42;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v44 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[14] )
  {
    v45 = varraw_uint128;
    v46 = AllocPostload_raw_uint128();
    v44->smodelVisData[14] = v46;
    varraw_uint128 = v46;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v45;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v47 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[15] )
  {
    v48 = varraw_uint128;
    v49 = AllocPostload_raw_uint128();
    v47->smodelVisData[15] = v49;
    varraw_uint128 = v49;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v48;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v50 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[16] )
  {
    v51 = varraw_uint128;
    v52 = AllocPostload_raw_uint128();
    v50->smodelVisData[16] = v52;
    varraw_uint128 = v52;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v51;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v53 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[17] )
  {
    v54 = varraw_uint128;
    v55 = AllocPostload_raw_uint128();
    v53->smodelVisData[17] = v55;
    varraw_uint128 = v55;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v54;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v56 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[18] )
  {
    v57 = varraw_uint128;
    v58 = AllocPostload_raw_uint128();
    v56->smodelVisData[18] = v58;
    varraw_uint128 = v58;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v57;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v59 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[19] )
  {
    v60 = varraw_uint128;
    v61 = AllocPostload_raw_uint128();
    v59->smodelVisData[19] = v61;
    varraw_uint128 = v61;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v60;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v62 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[20] )
  {
    v63 = varraw_uint128;
    v64 = AllocPostload_raw_uint128();
    v62->smodelVisData[20] = v64;
    varraw_uint128 = v64;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v63;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v65 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[21] )
  {
    v66 = varraw_uint128;
    v67 = AllocPostload_raw_uint128();
    v65->smodelVisData[21] = v67;
    varraw_uint128 = v67;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v66;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v68 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[22] )
  {
    v69 = varraw_uint128;
    v70 = AllocPostload_raw_uint128();
    v68->smodelVisData[22] = v70;
    varraw_uint128 = v70;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v69;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v71 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[23] )
  {
    v72 = varraw_uint128;
    v73 = AllocPostload_raw_uint128();
    v71->smodelVisData[23] = v73;
    varraw_uint128 = v73;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v72;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v74 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[24] )
  {
    v75 = varraw_uint128;
    v76 = AllocPostload_raw_uint128();
    v74->smodelVisData[24] = v76;
    varraw_uint128 = v76;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v75;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v77 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[25] )
  {
    v78 = varraw_uint128;
    v79 = AllocPostload_raw_uint128();
    v77->smodelVisData[25] = v79;
    varraw_uint128 = v79;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v78;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v80 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[26] )
  {
    v81 = varraw_uint128;
    v82 = AllocPostload_raw_uint128();
    v80->smodelVisData[26] = v82;
    varraw_uint128 = v82;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v81;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v83 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[27] )
  {
    v84 = varraw_uint128;
    v85 = AllocPostload_raw_uint128();
    v83->smodelVisData[27] = v85;
    varraw_uint128 = v85;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v84;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v86 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[28] )
  {
    v87 = varraw_uint128;
    v88 = AllocPostload_raw_uint128();
    v86->smodelVisData[28] = v88;
    varraw_uint128 = v88;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v87;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v89 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[29] )
  {
    v90 = varraw_uint128;
    v91 = AllocPostload_raw_uint128();
    v89->smodelVisData[29] = v91;
    varraw_uint128 = v91;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v90;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v92 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[30] )
  {
    v93 = varraw_uint128;
    v94 = AllocPostload_raw_uint128();
    v92->smodelVisData[30] = v94;
    varraw_uint128 = v94;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v93;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v95 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->smodelVisData[31] )
  {
    v96 = varraw_uint128;
    v97 = AllocPostload_raw_uint128();
    v95->smodelVisData[31] = v97;
    varraw_uint128 = v97;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v96;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v98 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[0] )
  {
    v99 = varraw_uint128;
    v100 = AllocPostload_raw_uint128();
    v98->surfaceVisData[0] = v100;
    varraw_uint128 = v100;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v99;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v101 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[1] )
  {
    v102 = varraw_uint128;
    v103 = AllocPostload_raw_uint128();
    v101->surfaceVisData[1] = v103;
    varraw_uint128 = v103;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v102;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v104 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[2] )
  {
    v105 = varraw_uint128;
    v106 = AllocPostload_raw_uint128();
    v104->surfaceVisData[2] = v106;
    varraw_uint128 = v106;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v105;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v107 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[3] )
  {
    v108 = varraw_uint128;
    v109 = AllocPostload_raw_uint128();
    v107->surfaceVisData[3] = v109;
    varraw_uint128 = v109;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v108;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v110 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[4] )
  {
    v111 = varraw_uint128;
    v112 = AllocPostload_raw_uint128();
    v110->surfaceVisData[4] = v112;
    varraw_uint128 = v112;
    Postload_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v111;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v113 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[5] )
  {
    v114 = varraw_uint128;
    v115 = AllocPostload_raw_uint128();
    v113->surfaceVisData[5] = v115;
    varraw_uint128 = v115;
    Postload_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v114;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v116 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[6] )
  {
    v117 = varraw_uint128;
    v118 = AllocPostload_raw_uint128();
    v116->surfaceVisData[6] = v118;
    varraw_uint128 = v118;
    Postload_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v117;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v119 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[7] )
  {
    v120 = varraw_uint128;
    v121 = AllocPostload_raw_uint128();
    v119->surfaceVisData[7] = v121;
    varraw_uint128 = v121;
    Postload_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v120;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v122 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[8] )
  {
    v123 = varraw_uint128;
    v124 = AllocPostload_raw_uint128();
    v122->surfaceVisData[8] = v124;
    varraw_uint128 = v124;
    Postload_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v123;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v125 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[9] )
  {
    v126 = varraw_uint128;
    v127 = AllocPostload_raw_uint128();
    v125->surfaceVisData[9] = v127;
    varraw_uint128 = v127;
    Postload_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v126;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v128 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[10] )
  {
    v129 = varraw_uint128;
    v130 = AllocPostload_raw_uint128();
    v128->surfaceVisData[10] = v130;
    varraw_uint128 = v130;
    Postload_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v129;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v131 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[11] )
  {
    v132 = varraw_uint128;
    v133 = AllocPostload_raw_uint128();
    v131->surfaceVisData[11] = v133;
    varraw_uint128 = v133;
    Postload_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v132;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v134 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[12] )
  {
    v135 = varraw_uint128;
    v136 = AllocPostload_raw_uint128();
    v134->surfaceVisData[12] = v136;
    varraw_uint128 = v136;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v135;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v137 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[13] )
  {
    v138 = varraw_uint128;
    v139 = AllocPostload_raw_uint128();
    v137->surfaceVisData[13] = v139;
    varraw_uint128 = v139;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v138;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v140 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[14] )
  {
    v141 = varraw_uint128;
    v142 = AllocPostload_raw_uint128();
    v140->surfaceVisData[14] = v142;
    varraw_uint128 = v142;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v141;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v143 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[15] )
  {
    v144 = varraw_uint128;
    v145 = AllocPostload_raw_uint128();
    v143->surfaceVisData[15] = v145;
    varraw_uint128 = v145;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v144;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v146 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[16] )
  {
    v147 = varraw_uint128;
    v148 = AllocPostload_raw_uint128();
    v146->surfaceVisData[16] = v148;
    varraw_uint128 = v148;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v147;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v149 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[17] )
  {
    v150 = varraw_uint128;
    v151 = AllocPostload_raw_uint128();
    v149->surfaceVisData[17] = v151;
    varraw_uint128 = v151;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v150;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v152 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[18] )
  {
    v153 = varraw_uint128;
    v154 = AllocPostload_raw_uint128();
    v152->surfaceVisData[18] = v154;
    varraw_uint128 = v154;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v153;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v155 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[19] )
  {
    v156 = varraw_uint128;
    v157 = AllocPostload_raw_uint128();
    v155->surfaceVisData[19] = v157;
    varraw_uint128 = v157;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v156;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v158 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[20] )
  {
    v159 = varraw_uint128;
    v160 = AllocPostload_raw_uint128();
    v158->surfaceVisData[20] = v160;
    varraw_uint128 = v160;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v159;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v161 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[21] )
  {
    v162 = varraw_uint128;
    v163 = AllocPostload_raw_uint128();
    v161->surfaceVisData[21] = v163;
    varraw_uint128 = v163;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v162;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v164 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[22] )
  {
    v165 = varraw_uint128;
    v166 = AllocPostload_raw_uint128();
    v164->surfaceVisData[22] = v166;
    varraw_uint128 = v166;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v165;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v167 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[23] )
  {
    v168 = varraw_uint128;
    v169 = AllocPostload_raw_uint128();
    v167->surfaceVisData[23] = v169;
    varraw_uint128 = v169;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v168;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v170 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[24] )
  {
    v171 = varraw_uint128;
    v172 = AllocPostload_raw_uint128();
    v170->surfaceVisData[24] = v172;
    varraw_uint128 = v172;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v171;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v173 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[25] )
  {
    v174 = varraw_uint128;
    v175 = AllocPostload_raw_uint128();
    v173->surfaceVisData[25] = v175;
    varraw_uint128 = v175;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v174;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v176 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[26] )
  {
    v177 = varraw_uint128;
    v178 = AllocPostload_raw_uint128();
    v176->surfaceVisData[26] = v178;
    varraw_uint128 = v178;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v177;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v179 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[27] )
  {
    v180 = varraw_uint128;
    v181 = AllocPostload_raw_uint128();
    v179->surfaceVisData[27] = v181;
    varraw_uint128 = v181;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v180;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v182 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[28] )
  {
    v183 = varraw_uint128;
    v184 = AllocPostload_raw_uint128();
    v182->surfaceVisData[28] = v184;
    varraw_uint128 = v184;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v183;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v185 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[29] )
  {
    v186 = varraw_uint128;
    v187 = AllocPostload_raw_uint128();
    v185->surfaceVisData[29] = v187;
    varraw_uint128 = v187;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v186;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v188 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[30] )
  {
    v189 = varraw_uint128;
    v190 = AllocPostload_raw_uint128();
    v188->surfaceVisData[30] = v190;
    varraw_uint128 = v190;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v189;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v191 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceVisData[31] )
  {
    v192 = varraw_uint128;
    v193 = AllocPostload_raw_uint128();
    v191->surfaceVisData[31] = v193;
    varraw_uint128 = v193;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v192;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v194 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->primaryLightVisData )
  {
    v195 = varraw_uint128;
    v196 = AllocPostload_raw_uint128();
    v194->primaryLightVisData = v196;
    varraw_uint128 = v196;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->primaryLightVisDataCount);
    varraw_uint128 = v195;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v197 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->reflectionProbeVisData )
  {
    v198 = varraw_uint128;
    v199 = AllocPostload_raw_uint128();
    v197->reflectionProbeVisData = v199;
    varraw_uint128 = v199;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->reflectionProbeVisDataCount);
    varraw_uint128 = v198;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v200 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->volumetricVisData )
  {
    v201 = varraw_uint128;
    v202 = AllocPostload_raw_uint128();
    v200->volumetricVisData = v202;
    varraw_uint128 = v202;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->volumetricVisDataCount);
    varraw_uint128 = v201;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v203 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->decalVisData )
  {
    v204 = varraw_uint128;
    v205 = AllocPostload_raw_uint128();
    v203->decalVisData = v205;
    varraw_uint128 = v205;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->decalVisDataCount);
    varraw_uint128 = v204;
  }
  DB_PopStreamPos();
  v206 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->sortedSurfIndex )
  {
    v207 = varBSPSURF_COUNT_TYPE;
    v208 = AllocPostload_BSPSURF_COUNT_TYPE();
    v206->sortedSurfIndex = v208;
    varBSPSURF_COUNT_TYPE = v208;
    Postload_BSPSURF_COUNT_TYPEArray(AtStart, 32i64 * varGfxWorldDpvsStatic->surfaceVisDataCount);
    v206 = varGfxWorldDpvsStatic;
    varBSPSURF_COUNT_TYPE = v207;
  }
  if ( v206->sortedSmodelIndices )
  {
    v209 = varushort;
    v210 = AllocPostload_ushort();
    v206->sortedSmodelIndices = v210;
    varushort = v210;
    Postload_ushortArray(AtStart, 32i64 * varGfxWorldDpvsStatic->smodelVisDataCount + 1);
    varushort = v209;
  }
  DB_PushStreamPos(4u);
  v211 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceCastsSunShadow )
  {
    v212 = varraw_uint128;
    v213 = AllocPostload_raw_uint128();
    v211->surfaceCastsSunShadow = v213;
    varraw_uint128 = v213;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v212;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  v214 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->surfaceCastsSunShadowOpt )
  {
    v215 = varraw_uint128;
    v216 = AllocPostload_raw_uint128();
    v214->surfaceCastsSunShadowOpt = v216;
    varraw_uint128 = v216;
    Postload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->sunShadowOptCount * varGfxWorldDpvsStatic->sunSurfVisDataCount);
    varraw_uint128 = v215;
  }
  DB_PopStreamPos();
}

/*
==============
Postload_GfxWorldDpvsStaticArray
==============
*/
void Postload_GfxWorldDpvsStaticArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxWorldDpvsStatic *i; 

  v2 = count;
  Postload_Stream(streamStart, varGfxWorldDpvsStatic, 632 * count);
  for ( i = varGfxWorldDpvsStatic; v2; --v2 )
  {
    varGfxWorldDpvsStatic = i;
    Postload_GfxWorldDpvsStatic(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_GfxWorldDpvsStaticStream
==============
*/
void Postload_GfxWorldDpvsStaticStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 40312, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  for ( ; count; --count )
  {
    Postload_GfxWorldDpvsStatic(AtStart);
    varGfxWorldDpvsStatic = (GfxWorldDpvsStatic *)g_streamPosGlob.pos;
  }
}

/*
==============
Postload_GfxWorldDraw
==============
*/
void Postload_GfxWorldDraw(const DBStreamStart streamStart)
{
  GfxWorldReflectionProbeData *v2; 
  GfxWorldLightmapReindexData *v3; 
  GfxImage **v4; 
  GfxWorldDraw *v5; 
  GfxStaticDecalVolumeMaterial *v6; 
  __int64 decalVolumeMaterialCount; 
  GfxStaticDecalVolumeMaterial *i; 
  GfxStaticDecalVolumeMaterial *v9; 
  Material **v10; 
  GfxWorldDraw *v11; 
  GfxStaticDecalVolumeMask *v12; 
  __int64 decalVolumeMaskCount; 
  GfxStaticDecalVolumeMask *j; 
  GfxStaticDecalVolumeMask *v15; 
  GfxDecalVolumeMask **v16; 
  GfxWorldDraw *v17; 
  GfxDecalVolumeCollection *v18; 
  unsigned __int64 v19; 
  GfxWorldDraw *v20; 
  unsigned int *v21; 
  unsigned int *v22; 
  GfxWrappedBuffer *v23; 
  GfxWrappedBuffer *p_materialAndMaskIndirectionBuffer; 
  GfxWorldTransientZone **v25; 
  GfxWorldTransientZone **transientZones; 
  __int64 v27; 
  GfxWorldDraw *v28; 
  unsigned int *v29; 
  unsigned int *v30; 
  GfxWorldDraw *v31; 
  float4 *v32; 
  unsigned __int64 v33; 
  ID3D12Resource **v34; 
  ID3D12Resource **p_displacementParmsBuffer; 
  GfxShaderBufferView *p_displacementParmsView; 
  GfxShaderBufferView *v37; 
  GfxWorldVolumetrics *v38; 
  GfxWorldDraw *v39; 
  unsigned __int8 *v40; 
  unsigned __int8 *v41; 
  GfxWrappedRWBuffer *v42; 
  GfxWrappedRWBuffer *p_compressedSunShadowBuffer; 

  if ( streamStart != (varGfxWorldDraw != (GfxWorldDraw *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxWorldDraw, 0x3200ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x3200ui64);
  v2 = varGfxWorldReflectionProbeData;
  varGfxWorldReflectionProbeData = &varGfxWorldDraw->reflectionProbeData;
  Postload_GfxWorldReflectionProbeData(NotAtStart);
  varGfxWorldReflectionProbeData = v2;
  v3 = varGfxWorldLightmapReindexData;
  varGfxWorldLightmapReindexData = &varGfxWorldDraw->lightmapReindexData;
  Postload_GfxWorldLightmapReindexData(NotAtStart);
  varGfxWorldLightmapReindexData = v3;
  v4 = varGfxImagePtr;
  varGfxImagePtr = &varGfxWorldDraw->iesLookupTexture;
  Postload_GfxImagePtr(NotAtStart);
  varGfxImagePtr = v4;
  v5 = varGfxWorldDraw;
  if ( varGfxWorldDraw->decalVolumeMaterials )
  {
    v6 = varGfxStaticDecalVolumeMaterial;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v5->decalVolumeMaterials = (GfxStaticDecalVolumeMaterial *)g_streamPosGlob.pos;
    varGfxStaticDecalVolumeMaterial = (GfxStaticDecalVolumeMaterial *)g_streamPosGlob.pos;
    decalVolumeMaterialCount = varGfxWorldDraw->decalVolumeMaterialCount;
    if ( 8 * decalVolumeMaterialCount )
    {
      if ( (unsigned __int64)(8 * decalVolumeMaterialCount) > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(8 * decalVolumeMaterialCount);
    }
    for ( i = varGfxStaticDecalVolumeMaterial; decalVolumeMaterialCount; --decalVolumeMaterialCount )
    {
      v9 = i;
      varGfxStaticDecalVolumeMaterial = i;
      if ( i == (GfxStaticDecalVolumeMaterial *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 8ui64);
        v9 = varGfxStaticDecalVolumeMaterial;
      }
      v10 = varMaterialHandle;
      varMaterialHandle = &v9->material;
      Postload_MaterialHandle(NotAtStart);
      ++i;
      varMaterialHandle = v10;
    }
    varGfxStaticDecalVolumeMaterial = v6;
  }
  v11 = varGfxWorldDraw;
  if ( varGfxWorldDraw->decalVolumeMasks )
  {
    v12 = varGfxStaticDecalVolumeMask;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v11->decalVolumeMasks = (GfxStaticDecalVolumeMask *)g_streamPosGlob.pos;
    varGfxStaticDecalVolumeMask = (GfxStaticDecalVolumeMask *)g_streamPosGlob.pos;
    decalVolumeMaskCount = varGfxWorldDraw->decalVolumeMaskCount;
    if ( 8 * decalVolumeMaskCount )
    {
      if ( (unsigned __int64)(8 * decalVolumeMaskCount) > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(8 * decalVolumeMaskCount);
    }
    for ( j = varGfxStaticDecalVolumeMask; decalVolumeMaskCount; --decalVolumeMaskCount )
    {
      v15 = j;
      varGfxStaticDecalVolumeMask = j;
      if ( j == (GfxStaticDecalVolumeMask *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, j, 8ui64);
        v15 = varGfxStaticDecalVolumeMask;
      }
      v16 = varGfxDecalVolumeMaskPtr;
      varGfxDecalVolumeMaskPtr = &v15->blendMapOverride;
      Postload_GfxDecalVolumeMaskPtr(NotAtStart);
      ++j;
      varGfxDecalVolumeMaskPtr = v16;
    }
    varGfxStaticDecalVolumeMask = v12;
  }
  v17 = varGfxWorldDraw;
  if ( varGfxWorldDraw->decalVolumeCollections )
  {
    v18 = varGfxDecalVolumeCollection;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v17->decalVolumeCollections = (GfxDecalVolumeCollection *)g_streamPosGlob.pos;
    varGfxDecalVolumeCollection = (GfxDecalVolumeCollection *)g_streamPosGlob.pos;
    v19 = 8i64 * varGfxWorldDraw->decalVolumeCollectionCount;
    if ( v19 )
    {
      if ( v19 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v19);
    }
    varGfxDecalVolumeCollection = v18;
  }
  DB_PushStreamPos(7u);
  v20 = varGfxWorldDraw;
  if ( varGfxWorldDraw->materialAndMaskIndirection )
  {
    v21 = varuint;
    v22 = AllocPostload_uint();
    v20->materialAndMaskIndirection = v22;
    varuint = v22;
    Postload_uintArray(AtStart, varGfxWorldDraw->decalVolumeMaterialCount + varGfxWorldDraw->decalVolumeMaskCount);
    varuint = v21;
  }
  DB_PopStreamPos();
  v23 = varGfxWrappedBuffer;
  p_materialAndMaskIndirectionBuffer = &varGfxWorldDraw->materialAndMaskIndirectionBuffer;
  varGfxWrappedBuffer = &varGfxWorldDraw->materialAndMaskIndirectionBuffer;
  Postload_GfxWrappedBuffer(NotAtStart);
  Load_DecalVolumesBuffer(p_materialAndMaskIndirectionBuffer, varGfxWorldDraw);
  v25 = varGfxWorldTransientZonePtr;
  transientZones = varGfxWorldDraw->transientZones;
  varGfxWrappedBuffer = v23;
  varGfxWorldTransientZonePtr = varGfxWorldDraw->transientZones;
  if ( varGfxWorldDraw->transientZones == (GfxWorldTransientZone **)g_streamPosGlob.pos )
  {
    DB_PatchMem_ValidatePostloadStream(NotAtStart, varGfxWorldDraw->transientZones, 0x3000ui64);
    transientZones = varGfxWorldTransientZonePtr;
  }
  v27 = 1536i64;
  do
  {
    varGfxWorldTransientZonePtr = transientZones;
    Postload_GfxWorldTransientZonePtr(NotAtStart);
    ++transientZones;
    --v27;
  }
  while ( v27 );
  v28 = varGfxWorldDraw;
  varGfxWorldTransientZonePtr = v25;
  if ( varGfxWorldDraw->lightmapTransientIndex )
  {
    v29 = varuint;
    v30 = AllocPostload_uint();
    v28->lightmapTransientIndex = v30;
    varuint = v30;
    Postload_uintArray(AtStart, varGfxWorldDraw->lightmapCount);
    varuint = v29;
  }
  DB_PushStreamPos(7u);
  v31 = varGfxWorldDraw;
  if ( varGfxWorldDraw->displacementParms )
  {
    v32 = varGfxDisplacementParms;
    DB_PatchMem_FixStreamAlignment(0x3Fui64);
    DB_CheckCanIncStreamPos(0i64);
    v31->displacementParms = (float4 *)g_streamPosGlob.pos;
    varGfxDisplacementParms = (float4 *)g_streamPosGlob.pos;
    v33 = 16i64 * varGfxWorldDraw->displacementParmsCount;
    if ( v33 )
    {
      if ( v33 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v33);
    }
    varGfxDisplacementParms = v32;
  }
  DB_PopStreamPos();
  v34 = varGfxVertexBuffer;
  p_displacementParmsBuffer = &varGfxWorldDraw->displacementParmsBuffer;
  varGfxVertexBuffer = &varGfxWorldDraw->displacementParmsBuffer;
  Postload_GfxVertexBuffer(NotAtStart);
  Load_VertexBuffer(p_displacementParmsBuffer, varGfxWorldDraw->displacementParms, 16 * varGfxWorldDraw->displacementParmsCount, "Displacement vertex buffer");
  varGfxVertexBuffer = v34;
  p_displacementParmsView = &varGfxWorldDraw->displacementParmsView;
  v37 = varGfxShaderBufferView;
  varGfxShaderBufferView = &varGfxWorldDraw->displacementParmsView;
  Postload_GfxShaderBufferView(NotAtStart);
  Load_VertexBufferView(p_displacementParmsView, varGfxWorldDraw->displacementParmsBuffer, 16 * varGfxWorldDraw->displacementParmsCount, "displacementParmsView");
  v38 = varGfxWorldVolumetrics;
  varGfxWorldVolumetrics = &varGfxWorldDraw->volumetrics;
  varGfxShaderBufferView = v37;
  Postload_GfxWorldVolumetrics(NotAtStart);
  varGfxWorldVolumetrics = v38;
  DB_PushStreamPos(7u);
  v39 = varGfxWorldDraw;
  if ( varGfxWorldDraw->compressedSunShadow )
  {
    v40 = varbyte;
    v41 = AllocPostload_byte();
    v39->compressedSunShadow = v41;
    varbyte = v41;
    Postload_byteArray(AtStart, varGfxWorldDraw->compressedSunShadowSize);
    varbyte = v40;
  }
  DB_PopStreamPos();
  v42 = varGfxWrappedRWBuffer;
  p_compressedSunShadowBuffer = &varGfxWorldDraw->compressedSunShadowBuffer;
  varGfxWrappedRWBuffer = &varGfxWorldDraw->compressedSunShadowBuffer;
  Postload_GfxWrappedRWBuffer(NotAtStart);
  Load_GfxWrappedBuffer(p_compressedSunShadowBuffer, GfxWrappedBuffer_Raw, 1u, varGfxWorldDraw->compressedSunShadowSize, varGfxWorldDraw->compressedSunShadow, "compressedSunShadow", 0);
  varGfxWrappedRWBuffer = v42;
}

/*
==============
Postload_GfxWorldDrawArray
==============
*/
void Postload_GfxWorldDrawArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxWorldDraw *i; 

  v2 = count;
  Postload_Stream(streamStart, varGfxWorldDraw, 12800 * count);
  for ( i = varGfxWorldDraw; v2; --v2 )
  {
    varGfxWorldDraw = i;
    Postload_GfxWorldDraw(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_GfxWorldDrawCells
==============
*/
void Postload_GfxWorldDrawCells(const DBStreamStart streamStart)
{
  GfxWorldDrawCells *v2; 
  GfxCellTreeCount *v3; 
  unsigned __int64 v4; 
  GfxWorldDrawCells *v5; 
  GfxCellTree *v6; 
  __int64 cellCount; 
  GfxCellTree *i; 

  if ( streamStart != (varGfxWorldDrawCells != (GfxWorldDrawCells *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxWorldDrawCells, 0x18ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x18ui64);
  v2 = varGfxWorldDrawCells;
  if ( varGfxWorldDrawCells->aabbTreeCounts )
  {
    v3 = varGfxCellTreeCount;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->aabbTreeCounts = (GfxCellTreeCount *)g_streamPosGlob.pos;
    varGfxCellTreeCount = (GfxCellTreeCount *)g_streamPosGlob.pos;
    v4 = 4i64 * varGfxWorldDrawCells->cellCount;
    if ( v4 )
    {
      if ( v4 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v4);
    }
    varGfxCellTreeCount = v3;
  }
  v5 = varGfxWorldDrawCells;
  if ( varGfxWorldDrawCells->aabbTrees )
  {
    v6 = varGfxCellTree;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v5->aabbTrees = (GfxCellTree *)g_streamPosGlob.pos;
    varGfxCellTree = (GfxCellTree *)g_streamPosGlob.pos;
    cellCount = varGfxWorldDrawCells->cellCount;
    if ( 8 * cellCount )
    {
      if ( (unsigned __int64)(8 * cellCount) > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(8 * cellCount);
    }
    for ( i = varGfxCellTree; cellCount; --cellCount )
    {
      varGfxCellTree = i;
      Postload_GfxCellTree(NotAtStart);
      ++i;
    }
    varGfxCellTree = v6;
  }
}

/*
==============
Postload_GfxWorldDrawCellsArray
==============
*/
void Postload_GfxWorldDrawCellsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxWorldDrawCells *i; 

  v2 = count;
  Postload_Stream(streamStart, varGfxWorldDrawCells, 24 * count);
  for ( i = varGfxWorldDrawCells; v2; --v2 )
  {
    varGfxWorldDrawCells = i;
    Postload_GfxWorldDrawCells(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_GfxWorldDrawCellsStream
==============
*/
void Postload_GfxWorldDrawCellsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxWorldDrawCells *v4; 
  GfxCellTreeCount *v5; 
  unsigned __int64 v6; 
  GfxWorldDrawCells *v7; 
  GfxCellTree *v8; 
  __int64 cellCount; 
  GfxCellTree *i; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 40804, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxWorldDrawCells;
    do
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x18ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x18ui64);
      v4 = varGfxWorldDrawCells;
      g_streamPosGlob.pos += 24;
      if ( varGfxWorldDrawCells->aabbTreeCounts )
      {
        v5 = varGfxCellTreeCount;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->aabbTreeCounts = (GfxCellTreeCount *)g_streamPosGlob.pos;
        varGfxCellTreeCount = (GfxCellTreeCount *)g_streamPosGlob.pos;
        v6 = 4i64 * varGfxWorldDrawCells->cellCount;
        if ( v6 )
        {
          if ( v6 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
            __debugbreak();
          DB_IncStreamPos(v6);
        }
        varGfxCellTreeCount = v5;
      }
      v7 = varGfxWorldDrawCells;
      if ( varGfxWorldDrawCells->aabbTrees )
      {
        v8 = varGfxCellTree;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v7->aabbTrees = (GfxCellTree *)g_streamPosGlob.pos;
        varGfxCellTree = (GfxCellTree *)g_streamPosGlob.pos;
        cellCount = varGfxWorldDrawCells->cellCount;
        if ( 8 * cellCount )
        {
          if ( (unsigned __int64)(8 * cellCount) > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
            __debugbreak();
          DB_IncStreamPos(8 * cellCount);
        }
        for ( i = varGfxCellTree; cellCount; --cellCount )
        {
          varGfxCellTree = i;
          Postload_GfxCellTree(NotAtStart);
          ++i;
        }
        varGfxCellTree = v8;
      }
      pos = g_streamPosGlob.pos;
      varGfxWorldDrawCells = (GfxWorldDrawCells *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxWorldDrawStream
==============
*/
void Postload_GfxWorldDrawStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 45575, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  for ( ; count; --count )
  {
    Postload_GfxWorldDraw(AtStart);
    varGfxWorldDraw = (GfxWorldDraw *)g_streamPosGlob.pos;
  }
}

/*
==============
Postload_GfxWorldLightmapImagePtrArray
==============
*/
void Postload_GfxWorldLightmapImagePtrArray(const DBStreamStart streamStart)
{
  if ( streamStart != (varGfxWorldLightmapImagePtrArray != (GfxWorldLightmapImagePtrArray *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxWorldLightmapImagePtrArray, 0x18ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x18ui64);
}

/*
==============
Postload_GfxWorldLightmapImagePtrArrayArray
==============
*/
void Postload_GfxWorldLightmapImagePtrArrayArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varGfxWorldLightmapImagePtrArray, 24 * count);
}

/*
==============
Postload_GfxWorldLightmapImagePtrArrayStream
==============
*/
void Postload_GfxWorldLightmapImagePtrArrayStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxWorldLightmapImagePtrArray *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 43673, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxWorldLightmapImagePtrArray;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (GfxWorldLightmapImagePtrArray *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x18ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x18ui64);
      pos = g_streamPosGlob.pos + 24;
      g_streamPosGlob.pos = pos;
      v3 = (GfxWorldLightmapImagePtrArray *)pos;
      varGfxWorldLightmapImagePtrArray = (GfxWorldLightmapImagePtrArray *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxWorldLightmapReindexData
==============
*/
void Postload_GfxWorldLightmapReindexData(const DBStreamStart streamStart)
{
  GfxWorldLightmapReindexData *v2; 
  GfxWorldLightmapReindexDataElement *v3; 
  unsigned __int64 v4; 
  GfxWorldLightmapReindexData *v5; 
  GfxWorldPackedLightmap *v6; 
  unsigned __int64 v7; 

  if ( streamStart != (varGfxWorldLightmapReindexData != (GfxWorldLightmapReindexData *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxWorldLightmapReindexData, 0x20ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x20ui64);
  v2 = varGfxWorldLightmapReindexData;
  if ( varGfxWorldLightmapReindexData->reindexElement )
  {
    v3 = varGfxWorldLightmapReindexDataElement;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->reindexElement = (GfxWorldLightmapReindexDataElement *)g_streamPosGlob.pos;
    varGfxWorldLightmapReindexDataElement = (GfxWorldLightmapReindexDataElement *)g_streamPosGlob.pos;
    v4 = 20i64 * varGfxWorldLightmapReindexData->reindexCount;
    if ( v4 )
    {
      if ( v4 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v4);
    }
    varGfxWorldLightmapReindexDataElement = v3;
  }
  v5 = varGfxWorldLightmapReindexData;
  if ( varGfxWorldLightmapReindexData->packedLightmap )
  {
    v6 = varGfxWorldPackedLightmap;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v5->packedLightmap = (GfxWorldPackedLightmap *)g_streamPosGlob.pos;
    varGfxWorldPackedLightmap = (GfxWorldPackedLightmap *)g_streamPosGlob.pos;
    v7 = 8i64 * varGfxWorldLightmapReindexData->packedLightmapCount;
    if ( v7 )
    {
      if ( v7 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v7);
    }
    varGfxWorldPackedLightmap = v6;
  }
}

/*
==============
Postload_GfxWorldLightmapReindexDataArray
==============
*/
void Postload_GfxWorldLightmapReindexDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxWorldLightmapReindexData *i; 

  v2 = count;
  Postload_Stream(streamStart, varGfxWorldLightmapReindexData, 32 * count);
  for ( i = varGfxWorldLightmapReindexData; v2; --v2 )
  {
    varGfxWorldLightmapReindexData = i;
    Postload_GfxWorldLightmapReindexData(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_GfxWorldLightmapReindexDataElement
==============
*/
void Postload_GfxWorldLightmapReindexDataElement(const DBStreamStart streamStart)
{
  if ( streamStart != (varGfxWorldLightmapReindexDataElement != (GfxWorldLightmapReindexDataElement *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxWorldLightmapReindexDataElement, 0x14ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x14ui64);
}

/*
==============
Postload_GfxWorldLightmapReindexDataElementArray
==============
*/
void Postload_GfxWorldLightmapReindexDataElementArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varGfxWorldLightmapReindexDataElement, 20 * count);
}

/*
==============
Postload_GfxWorldLightmapReindexDataElementStream
==============
*/
void Postload_GfxWorldLightmapReindexDataElementStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxWorldLightmapReindexDataElement *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 43324, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxWorldLightmapReindexDataElement;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (GfxWorldLightmapReindexDataElement *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x14ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x14ui64);
      pos = g_streamPosGlob.pos + 20;
      g_streamPosGlob.pos = pos;
      v3 = (GfxWorldLightmapReindexDataElement *)pos;
      varGfxWorldLightmapReindexDataElement = (GfxWorldLightmapReindexDataElement *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxWorldLightmapReindexDataStream
==============
*/
void Postload_GfxWorldLightmapReindexDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxWorldLightmapReindexData *v4; 
  GfxWorldLightmapReindexDataElement *v5; 
  unsigned __int64 v6; 
  GfxWorldLightmapReindexData *v7; 
  GfxWorldPackedLightmap *v8; 
  unsigned __int64 v9; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 43597, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxWorldLightmapReindexData;
    do
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x20ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x20ui64);
      v4 = varGfxWorldLightmapReindexData;
      g_streamPosGlob.pos += 32;
      if ( varGfxWorldLightmapReindexData->reindexElement )
      {
        v5 = varGfxWorldLightmapReindexDataElement;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->reindexElement = (GfxWorldLightmapReindexDataElement *)g_streamPosGlob.pos;
        varGfxWorldLightmapReindexDataElement = (GfxWorldLightmapReindexDataElement *)g_streamPosGlob.pos;
        v6 = 20i64 * varGfxWorldLightmapReindexData->reindexCount;
        if ( v6 )
        {
          if ( v6 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
            __debugbreak();
          DB_IncStreamPos(v6);
        }
        varGfxWorldLightmapReindexDataElement = v5;
      }
      v7 = varGfxWorldLightmapReindexData;
      if ( varGfxWorldLightmapReindexData->packedLightmap )
      {
        v8 = varGfxWorldPackedLightmap;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v7->packedLightmap = (GfxWorldPackedLightmap *)g_streamPosGlob.pos;
        varGfxWorldPackedLightmap = (GfxWorldPackedLightmap *)g_streamPosGlob.pos;
        v9 = 8i64 * varGfxWorldLightmapReindexData->packedLightmapCount;
        if ( v9 )
        {
          if ( v9 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
            __debugbreak();
          DB_IncStreamPos(v9);
        }
        varGfxWorldPackedLightmap = v8;
      }
      pos = g_streamPosGlob.pos;
      varGfxWorldLightmapReindexData = (GfxWorldLightmapReindexData *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxWorldPackedLightmap
==============
*/
void Postload_GfxWorldPackedLightmap(const DBStreamStart streamStart)
{
  if ( streamStart != (varGfxWorldPackedLightmap != (GfxWorldPackedLightmap *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxWorldPackedLightmap, 8ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(8ui64);
}

/*
==============
Postload_GfxWorldPackedLightmapArray
==============
*/
void Postload_GfxWorldPackedLightmapArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varGfxWorldPackedLightmap, 8 * count);
}

/*
==============
Postload_GfxWorldPackedLightmapStream
==============
*/
void Postload_GfxWorldPackedLightmapStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxWorldPackedLightmap *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 43423, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varGfxWorldPackedLightmap;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (GfxWorldPackedLightmap *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 8ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(8ui64);
      pos = g_streamPosGlob.pos + 8;
      g_streamPosGlob.pos = pos;
      v3 = (GfxWorldPackedLightmap *)pos;
      varGfxWorldPackedLightmap = (GfxWorldPackedLightmap *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_GfxWorldPtr
==============
*/
void Postload_GfxWorldPtr(const DBStreamStart streamStart)
{
  unsigned __int8 *inserted; 
  GfxWorld **v3; 
  __int64 v4; 
  GfxWorld *v5; 

  inserted = NULL;
  if ( streamStart != (varGfxWorldPtr != (GfxWorld **)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxWorldPtr, 8ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(8ui64);
  DB_PushStreamPos(2u);
  v3 = varGfxWorldPtr;
  v4 = (__int64)*varGfxWorldPtr;
  if ( *varGfxWorldPtr )
  {
    if ( v4 == -1 )
    {
      DB_PushSharedData();
    }
    else if ( v4 != -2 && v4 != -3 )
    {
      DB_ConvertOffsetToAlias((unsigned __int64 *)varGfxWorldPtr);
      goto LABEL_17;
    }
    v5 = varGfxWorld;
    DB_PatchMem_FixStreamAlignment(0xFui64);
    DB_CheckCanIncStreamPos(0i64);
    *v3 = (GfxWorld *)g_streamPosGlob.pos;
    varGfxWorld = (GfxWorld *)g_streamPosGlob.pos;
    if ( v4 == -3 )
      inserted = DB_InsertPointer();
    Postload_GfxWorld(AtStart);
    Load_GfxWorldAsset(v3);
    varGfxWorld = v5;
    if ( inserted )
      *(_QWORD *)inserted = *v3;
    if ( v4 == -1 )
      DB_PopSharedData();
  }
LABEL_17:
  DB_PopStreamPos();
}

/*
==============
Postload_GfxWorldPtrArray
==============
*/
void Postload_GfxWorldPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxWorld **i; 

  v2 = count;
  Postload_Stream(streamStart, varGfxWorldPtr, 8 * count);
  for ( i = varGfxWorldPtr; v2; --v2 )
  {
    varGfxWorldPtr = i;
    Postload_GfxWorldPtr(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_GfxWorldPtrStream
==============
*/
void Postload_GfxWorldPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  GfxWorld **v5; 
  __int64 v6; 
  GfxWorld *v7; 
  unsigned __int8 *inserted; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 52819, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varGfxWorldPtr;
    pos = g_streamPosGlob.pos;
    while ( 1 )
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 8ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(8ui64);
      g_streamPosGlob.pos += 8;
      DB_PushStreamPos(2u);
      v5 = varGfxWorldPtr;
      v6 = (__int64)*varGfxWorldPtr;
      if ( !*varGfxWorldPtr )
        goto LABEL_23;
      if ( v6 == -1 )
        break;
      if ( v6 == -2 || v6 == -3 )
        goto LABEL_17;
      DB_ConvertOffsetToAlias((unsigned __int64 *)varGfxWorldPtr);
LABEL_23:
      DB_PopStreamPos();
      pos = g_streamPosGlob.pos;
      varGfxWorldPtr = (GfxWorld **)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_17:
    v7 = varGfxWorld;
    DB_PatchMem_FixStreamAlignment(0xFui64);
    DB_CheckCanIncStreamPos(0i64);
    inserted = NULL;
    *v5 = (GfxWorld *)g_streamPosGlob.pos;
    varGfxWorld = (GfxWorld *)g_streamPosGlob.pos;
    if ( v6 == -3 )
      inserted = DB_InsertPointer();
    Postload_GfxWorld(AtStart);
    Load_GfxWorldAsset(v5);
    varGfxWorld = v7;
    if ( inserted )
      *(_QWORD *)inserted = *v5;
    if ( v6 == -1 )
      DB_PopSharedData();
    goto LABEL_23;
  }
}

/*
==============
Postload_GfxWorldStream
==============
*/
void Postload_GfxWorldStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 52692, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  for ( ; count; --count )
  {
    Postload_GfxWorld(AtStart);
    varGfxWorld = (GfxWorld *)g_streamPosGlob.pos;
  }
}

/*
==============
Postload_GfxWorldTransientZone
==============
*/
void Postload_GfxWorldTransientZone(const DBStreamStart streamStart)
{
  const char **v2; 
  GfxWorldDrawVerts *v3; 
  GfxWorldDrawCells *v4; 
  GfxLightmapAtlasDataTemp **v5; 
  GfxGpuLightGridTransientData *v6; 
  GfxWorldTransientZone *v7; 
  GfxReflectionProbeTransientData *v8; 
  GfxReflectionProbeTransientData *v9; 
  unsigned __int16 *v10; 
  unsigned __int16 *v11; 
  GfxDecalVolumeTransientData *v12; 
  GfxCompressedSunShadowDataTemp **v13; 

  DB_PatchMem_PostLoad_PushAsset(28, varGfxWorldTransientZone);
  if ( streamStart != (varGfxWorldTransientZone != (GfxWorldTransientZone *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxWorldTransientZone, 0x100ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x100ui64);
  DB_PushStreamPos(8u);
  v2 = varXString;
  varXString = &varGfxWorldTransientZone->name;
  Postload_XString(NotAtStart);
  varXString = v2;
  v3 = varGfxWorldDrawVerts;
  varGfxWorldDrawVerts = &varGfxWorldTransientZone->drawVerts;
  Postload_GfxWorldDrawVerts(NotAtStart);
  varGfxWorldDrawVerts = v3;
  v4 = varGfxWorldDrawCells;
  varGfxWorldDrawCells = &varGfxWorldTransientZone->drawCells;
  Postload_GfxWorldDrawCells(NotAtStart);
  varGfxWorldDrawCells = v4;
  v5 = varGfxLightmapAtlasDataTempPtr;
  varGfxLightmapAtlasDataTempPtr = &varGfxWorldTransientZone->tempLightmapData;
  Postload_GfxLightmapAtlasDataTempPtr(NotAtStart);
  varGfxLightmapAtlasDataTempPtr = v5;
  v6 = varGfxGpuLightGridTransientData;
  varGfxGpuLightGridTransientData = &varGfxWorldTransientZone->gpuLightGrid;
  Postload_GfxGpuLightGridTransientData(NotAtStart);
  v7 = varGfxWorldTransientZone;
  varGfxGpuLightGridTransientData = v6;
  if ( varGfxWorldTransientZone->reflectionProbes )
  {
    v8 = varGfxReflectionProbeTransientData;
    v9 = AllocPostload_GfxReflectionProbeTransientData();
    v7->reflectionProbes = v9;
    varGfxReflectionProbeTransientData = v9;
    Postload_GfxReflectionProbeTransientData(AtStart);
    v7 = varGfxWorldTransientZone;
    varGfxReflectionProbeTransientData = v8;
  }
  if ( v7->collections )
  {
    v10 = varushort;
    v11 = AllocPostload_ushort();
    v7->collections = v11;
    varushort = v11;
    Postload_ushortArray(AtStart, varGfxWorldTransientZone->collectionCount);
    v7 = varGfxWorldTransientZone;
    varushort = v10;
  }
  if ( v7->decalVolumes )
  {
    v12 = varGfxDecalVolumeTransientData;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v7->decalVolumes = (GfxDecalVolumeTransientData *)g_streamPosGlob.pos;
    varGfxDecalVolumeTransientData = (GfxDecalVolumeTransientData *)g_streamPosGlob.pos;
    Postload_GfxDecalVolumeTransientData(AtStart);
    v7 = varGfxWorldTransientZone;
    varGfxDecalVolumeTransientData = v12;
  }
  v13 = varGfxCompressedSunShadowDataTempPtr;
  varGfxCompressedSunShadowDataTempPtr = &v7->compressedSunShadow;
  Postload_GfxCompressedSunShadowDataTempPtr(NotAtStart);
  varGfxCompressedSunShadowDataTempPtr = v13;
  DB_PopStreamPos();
  DB_PatchMem_PopAsset();
}

/*
==============
Postload_GfxWorldTransientZoneArray
==============
*/
void Postload_GfxWorldTransientZoneArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxWorldTransientZone *i; 

  v2 = count;
  Postload_Stream(streamStart, varGfxWorldTransientZone, count << 8);
  for ( i = varGfxWorldTransientZone; v2; --v2 )
  {
    varGfxWorldTransientZone = i;
    Postload_GfxWorldTransientZone(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_GfxWorldTransientZonePtr
==============
*/
void Postload_GfxWorldTransientZonePtr(const DBStreamStart streamStart)
{
  unsigned __int8 *inserted; 
  GfxWorldTransientZone **v3; 
  __int64 v4; 
  GfxWorldTransientZone *v5; 

  inserted = NULL;
  if ( streamStart != (varGfxWorldTransientZonePtr != (GfxWorldTransientZone **)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varGfxWorldTransientZonePtr, 8ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(8ui64);
  DB_PushStreamPos(2u);
  v3 = varGfxWorldTransientZonePtr;
  v4 = (__int64)*varGfxWorldTransientZonePtr;
  if ( *varGfxWorldTransientZonePtr )
  {
    if ( v4 == -1 )
    {
      DB_PushSharedData();
    }
    else if ( v4 != -2 && v4 != -3 )
    {
      DB_ConvertOffsetToAlias((unsigned __int64 *)varGfxWorldTransientZonePtr);
      goto LABEL_17;
    }
    v5 = varGfxWorldTransientZone;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    *v3 = (GfxWorldTransientZone *)g_streamPosGlob.pos;
    varGfxWorldTransientZone = (GfxWorldTransientZone *)g_streamPosGlob.pos;
    if ( v4 == -3 )
      inserted = DB_InsertPointer();
    Postload_GfxWorldTransientZone(AtStart);
    Load_GfxWorldTransientZoneAsset(v3);
    varGfxWorldTransientZone = v5;
    if ( inserted )
      *(_QWORD *)inserted = *v3;
    if ( v4 == -1 )
      DB_PopSharedData();
  }
LABEL_17:
  DB_PopStreamPos();
}

/*
==============
Postload_GfxWorldTransientZonePtrArray
==============
*/
void Postload_GfxWorldTransientZonePtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxWorldTransientZone **i; 

  v2 = count;
  Postload_Stream(streamStart, varGfxWorldTransientZonePtr, 8 * count);
  for ( i = varGfxWorldTransientZonePtr; v2; --v2 )
  {
    varGfxWorldTransientZonePtr = i;
    Postload_GfxWorldTransientZonePtr(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_GfxWorldTransientZonePtrStream
==============
*/
void Postload_GfxWorldTransientZonePtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  GfxWorldTransientZone **v5; 
  __int64 v6; 
  GfxWorldTransientZone *v7; 
  unsigned __int8 *inserted; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 42227, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varGfxWorldTransientZonePtr;
    pos = g_streamPosGlob.pos;
    while ( 1 )
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 8ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(8ui64);
      g_streamPosGlob.pos += 8;
      DB_PushStreamPos(2u);
      v5 = varGfxWorldTransientZonePtr;
      v6 = (__int64)*varGfxWorldTransientZonePtr;
      if ( !*varGfxWorldTransientZonePtr )
        goto LABEL_23;
      if ( v6 == -1 )
        break;
      if ( v6 == -2 || v6 == -3 )
        goto LABEL_17;
      DB_ConvertOffsetToAlias((unsigned __int64 *)varGfxWorldTransientZonePtr);
LABEL_23:
      DB_PopStreamPos();
      pos = g_streamPosGlob.pos;
      varGfxWorldTransientZonePtr = (GfxWorldTransientZone **)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_17:
    v7 = varGfxWorldTransientZone;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    inserted = NULL;
    *v5 = (GfxWorldTransientZone *)g_streamPosGlob.pos;
    varGfxWorldTransientZone = (GfxWorldTransientZone *)g_streamPosGlob.pos;
    if ( v6 == -3 )
      inserted = DB_InsertPointer();
    Postload_GfxWorldTransientZone(AtStart);
    Load_GfxWorldTransientZoneAsset(v5);
    varGfxWorldTransientZone = v7;
    if ( inserted )
      *(_QWORD *)inserted = *v5;
    if ( v6 == -1 )
      DB_PopSharedData();
    goto LABEL_23;
  }
}

/*
==============
Postload_GfxWorldTransientZoneStream
==============
*/
void Postload_GfxWorldTransientZoneStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  const char **v5; 
  GfxWorldDrawVerts *v6; 
  GfxWorldDrawCells *v7; 
  GfxLightmapAtlasDataTemp **v8; 
  GfxLightmapAtlasDataTemp **p_tempLightmapData; 
  GfxLightmapAtlasDataTemp *v10; 
  XZoneHandleUnique CurrentZoneLoadHandleUnique; 
  GfxGpuLightGridTransientData *v12; 
  GfxWorldTransientZone *v13; 
  GfxReflectionProbeTransientData *v14; 
  GfxReflectionProbeTransientData *v15; 
  unsigned __int16 *v16; 
  unsigned __int16 *v17; 
  GfxDecalVolumeTransientData *v18; 
  GfxCompressedSunShadowDataTemp **v19; 
  GfxCompressedSunShadowDataTemp **p_compressedSunShadow; 
  GfxCompressedSunShadowDataTemp *v21; 
  XZoneHandleUnique v22; 
  GfxCompressedSunShadowDataTemp *v23; 
  unsigned int m_packed; 
  DB_BackendCallbackDataRingBufferAlloc v25; 
  int v26; 
  DB_BackendCallbackDataRingBufferAlloc alloc; 
  DB_BackendCallbackDataRingBufferAlloc result; 
  int v29; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 42092, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varGfxWorldTransientZone;
    do
    {
      DB_PatchMem_PostLoad_PushAsset(28, v3);
      pos = g_streamPosGlob.pos;
      if ( varGfxWorldTransientZone != (GfxWorldTransientZone *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, varGfxWorldTransientZone, 0x100ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x100ui64);
      g_streamPosGlob.pos += 256;
      DB_PushStreamPos(8u);
      v5 = varXString;
      varXString = &varGfxWorldTransientZone->name;
      Postload_XString(NotAtStart);
      varXString = v5;
      v6 = varGfxWorldDrawVerts;
      varGfxWorldDrawVerts = &varGfxWorldTransientZone->drawVerts;
      Postload_GfxWorldDrawVerts(NotAtStart);
      varGfxWorldDrawVerts = v6;
      v7 = varGfxWorldDrawCells;
      varGfxWorldDrawCells = &varGfxWorldTransientZone->drawCells;
      Postload_GfxWorldDrawCells(NotAtStart);
      v8 = varGfxLightmapAtlasDataTempPtr;
      p_tempLightmapData = &varGfxWorldTransientZone->tempLightmapData;
      varGfxWorldDrawCells = v7;
      varGfxLightmapAtlasDataTempPtr = &varGfxWorldTransientZone->tempLightmapData;
      if ( &varGfxWorldTransientZone->tempLightmapData == (GfxLightmapAtlasDataTemp **)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, &varGfxWorldTransientZone->tempLightmapData, 8ui64);
        p_tempLightmapData = varGfxLightmapAtlasDataTempPtr;
      }
      if ( *p_tempLightmapData )
      {
        v10 = varGfxLightmapAtlasDataTemp;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        *p_tempLightmapData = (GfxLightmapAtlasDataTemp *)g_streamPosGlob.pos;
        varGfxLightmapAtlasDataTemp = (GfxLightmapAtlasDataTemp *)g_streamPosGlob.pos;
        Postload_GfxLightmapAtlasDataTemp(AtStart);
        CurrentZoneLoadHandleUnique = DB_Zones_GetCurrentZoneLoadHandleUnique();
        DB_ScheduleBackendCallback<GfxLightmapAtlasDataTemp>(CurrentZoneLoadHandleUnique, RB_ProcessGfxLightmapAtlasData, varGfxLightmapAtlasDataTemp);
        *p_tempLightmapData = NULL;
        varGfxLightmapAtlasDataTemp = v10;
      }
      v12 = varGfxGpuLightGridTransientData;
      varGfxGpuLightGridTransientData = &varGfxWorldTransientZone->gpuLightGrid;
      varGfxLightmapAtlasDataTempPtr = v8;
      Postload_GfxGpuLightGridTransientData(NotAtStart);
      varGfxGpuLightGridTransientData = v12;
      v13 = varGfxWorldTransientZone;
      if ( varGfxWorldTransientZone->reflectionProbes )
      {
        v14 = varGfxReflectionProbeTransientData;
        v15 = AllocPostload_GfxReflectionProbeTransientData();
        v13->reflectionProbes = v15;
        varGfxReflectionProbeTransientData = v15;
        Postload_GfxReflectionProbeTransientData(AtStart);
        v13 = varGfxWorldTransientZone;
        varGfxReflectionProbeTransientData = v14;
      }
      if ( v13->collections )
      {
        v16 = varushort;
        v17 = AllocPostload_ushort();
        v13->collections = v17;
        varushort = v17;
        Postload_ushortArray(AtStart, varGfxWorldTransientZone->collectionCount);
        v13 = varGfxWorldTransientZone;
        varushort = v16;
      }
      if ( v13->decalVolumes )
      {
        v18 = varGfxDecalVolumeTransientData;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v13->decalVolumes = (GfxDecalVolumeTransientData *)g_streamPosGlob.pos;
        varGfxDecalVolumeTransientData = (GfxDecalVolumeTransientData *)g_streamPosGlob.pos;
        Postload_GfxDecalVolumeTransientData(AtStart);
        v13 = varGfxWorldTransientZone;
        varGfxDecalVolumeTransientData = v18;
      }
      v19 = varGfxCompressedSunShadowDataTempPtr;
      p_compressedSunShadow = &v13->compressedSunShadow;
      varGfxCompressedSunShadowDataTempPtr = &v13->compressedSunShadow;
      if ( &v13->compressedSunShadow == (GfxCompressedSunShadowDataTemp **)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, &v13->compressedSunShadow, 8ui64);
        p_compressedSunShadow = varGfxCompressedSunShadowDataTempPtr;
      }
      if ( *p_compressedSunShadow )
      {
        v21 = varGfxCompressedSunShadowDataTemp;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        *p_compressedSunShadow = (GfxCompressedSunShadowDataTemp *)g_streamPosGlob.pos;
        varGfxCompressedSunShadowDataTemp = (GfxCompressedSunShadowDataTemp *)g_streamPosGlob.pos;
        Postload_GfxCompressedSunShadowDataTemp(AtStart);
        v22 = DB_Zones_GetCurrentZoneLoadHandleUnique();
        v23 = varGfxCompressedSunShadowDataTemp;
        v29 = 0;
        m_packed = v22.m_packed;
        v25 = *DB_BackendCallbackDataRingBuffer_PreallocData(&result, 0x70u);
        v26 = v29;
        alloc = v25;
        *(_DWORD *)v25.m_data = 112;
        *((_DWORD *)v25.m_data + 1) = m_packed;
        *((_DWORD *)v25.m_data + 2) = v26;
        *((_QWORD *)v25.m_data + 2) = DB_BackendCallbackTrampoline_GfxCompressedSunShadowDataTemp_;
        *((_QWORD *)v25.m_data + 3) = 0i64;
        *((_QWORD *)v25.m_data + 4) = R_CompressedSunShadow_StreamIn;
        *(GfxCompressedSunShadowDataTemp *)(v25.m_data + 40) = *v23;
        DB_BackendCallbackDataRingBuffer_Queue(&alloc);
        *p_compressedSunShadow = NULL;
        varGfxCompressedSunShadowDataTemp = v21;
      }
      varGfxCompressedSunShadowDataTempPtr = v19;
      DB_PopStreamPos();
      DB_PatchMem_PopAsset();
      v3 = g_streamPosGlob.pos;
      varGfxWorldTransientZone = (GfxWorldTransientZone *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_LightGridVolumePackingParams
==============
*/
void Postload_LightGridVolumePackingParams(const DBStreamStart streamStart)
{
  if ( streamStart != (varLightGridVolumePackingParams != (LightGridVolumePackingParams *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varLightGridVolumePackingParams, 0x20ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x20ui64);
}

/*
==============
Postload_LightGridVolumePackingParamsArray
==============
*/
void Postload_LightGridVolumePackingParamsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varLightGridVolumePackingParams, 32 * count);
}

/*
==============
Postload_LightGridVolumePackingParamsStream
==============
*/
void Postload_LightGridVolumePackingParamsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  LightGridVolumePackingParams *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 34561, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varLightGridVolumePackingParams;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (LightGridVolumePackingParams *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x20ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x20ui64);
      pos = g_streamPosGlob.pos + 32;
      g_streamPosGlob.pos = pos;
      v3 = (LightGridVolumePackingParams *)pos;
      varLightGridVolumePackingParams = (LightGridVolumePackingParams *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_LightGridVolumeTransformParams
==============
*/
void Postload_LightGridVolumeTransformParams(const DBStreamStart streamStart)
{
  if ( streamStart != (varLightGridVolumeTransformParams != (LightGridVolumeTransformParams *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varLightGridVolumeTransformParams, 0x40ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x40ui64);
}

/*
==============
Postload_LightGridVolumeTransformParamsArray
==============
*/
void Postload_LightGridVolumeTransformParamsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varLightGridVolumeTransformParams, count << 6);
}

/*
==============
Postload_LightGridVolumeTransformParamsStream
==============
*/
void Postload_LightGridVolumeTransformParamsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  LightGridVolumeTransformParams *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 34383, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varLightGridVolumeTransformParams;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (LightGridVolumeTransformParams *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x40ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x40ui64);
      pos = g_streamPosGlob.pos + 64;
      g_streamPosGlob.pos = pos;
      v3 = (LightGridVolumeTransformParams *)pos;
      varLightGridVolumeTransformParams = (LightGridVolumeTransformParams *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_StaticModelIndex
==============
*/
void Postload_StaticModelIndex(const DBStreamStart streamStart)
{
  if ( streamStart != (varStaticModelIndex != (unsigned __int16 *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varStaticModelIndex, 2ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(2ui64);
}

/*
==============
Postload_StaticModelIndexArray
==============
*/
void Postload_StaticModelIndexArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varStaticModelIndex, 2 * count);
}

/*
==============
Postload_StaticModelIndexStream
==============
*/
void Postload_StaticModelIndexStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int16 *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 32359, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varStaticModelIndex;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (unsigned __int16 *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 2ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(2ui64);
      pos = g_streamPosGlob.pos + 2;
      g_streamPosGlob.pos = pos;
      v3 = (unsigned __int16 *)pos;
      varStaticModelIndex = (unsigned __int16 *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_UmbraGate
==============
*/
void Postload_UmbraGate(const DBStreamStart streamStart)
{
  if ( streamStart != (varUmbraGate != (UmbraGate *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varUmbraGate, 0x20ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x20ui64);
}

/*
==============
Postload_UmbraGateArray
==============
*/
void Postload_UmbraGateArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varUmbraGate, 32 * count);
}

/*
==============
Postload_UmbraGateStream
==============
*/
void Postload_UmbraGateStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  UmbraGate *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 46729, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varUmbraGate;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (UmbraGate *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x20ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x20ui64);
      pos = g_streamPosGlob.pos + 32;
      g_streamPosGlob.pos = pos;
      v3 = (UmbraGate *)pos;
      varUmbraGate = (UmbraGate *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_mnode_t
==============
*/
void Postload_mnode_t(const DBStreamStart streamStart)
{
  if ( streamStart != (varmnode_t != (mnode_t *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varmnode_t, 4ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(4ui64);
}

/*
==============
Postload_mnode_tArray
==============
*/
void Postload_mnode_tArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varmnode_t, 4 * count);
}

/*
==============
Postload_mnode_tStream
==============
*/
void Postload_mnode_tStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  mnode_t *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 32283, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varmnode_t;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (mnode_t *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 4ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(4ui64);
      pos = g_streamPosGlob.pos + 4;
      g_streamPosGlob.pos = pos;
      v3 = (mnode_t *)pos;
      varmnode_t = (mnode_t *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_umbraTomePtr_t
==============
*/
void Postload_umbraTomePtr_t(const DBStreamStart streamStart)
{
  if ( streamStart != (varumbraTomePtr_t != (Umbra::Tome **)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varumbraTomePtr_t, 8ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(8ui64);
}

/*
==============
Postload_umbraTomePtr_tArray
==============
*/
void Postload_umbraTomePtr_tArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varumbraTomePtr_t, 8 * count);
}

/*
==============
Postload_umbraTomePtr_tStream
==============
*/
void Postload_umbraTomePtr_tStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Umbra::Tome **v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 32107, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varumbraTomePtr_t;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (Umbra::Tome **)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 8ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(8ui64);
      pos = g_streamPosGlob.pos + 8;
      g_streamPosGlob.pos = pos;
      v3 = (Umbra::Tome **)pos;
      varumbraTomePtr_t = (Umbra::Tome **)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_BspVersion
==============
*/
void Preload_BspVersion(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varBspVersion, 4ui64);
}

/*
==============
Preload_BspVersionArray
==============
*/
void Preload_BspVersionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varBspVersion, 4 * count);
}

/*
==============
Preload_BspVersionStream
==============
*/
void Preload_BspVersionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 67273, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varBspVersion;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varBspVersion = (BspVersion *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_DpvsPlane
==============
*/
void Preload_DpvsPlane(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varDpvsPlane, 0x10ui64);
}

/*
==============
Preload_DpvsPlaneArray
==============
*/
void Preload_DpvsPlaneArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varDpvsPlane, 16 * count);
}

/*
==============
Preload_DpvsPlaneStream
==============
*/
void Preload_DpvsPlaneStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 52955, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varDpvsPlane;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      pos = g_streamPosGlob.pos;
      varDpvsPlane = (DpvsPlane *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxAabbTree
==============
*/
void Preload_GfxAabbTree(const DBStreamStart streamStart)
{
  unsigned __int16 *smodelIndexes; 
  unsigned __int16 *v2; 

  Load_Stream(streamStart, varGfxAabbTree, 0x30ui64);
  smodelIndexes = varGfxAabbTree->smodelIndexes;
  if ( smodelIndexes )
  {
    if ( smodelIndexes == (unsigned __int16 *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( smodelIndexes != (unsigned __int16 *)-2i64 )
    {
      return;
    }
    v2 = varStaticModelIndex;
    DB_PatchMem_FixStreamAlignment(1ui64);
    DB_CheckCanIncStreamPos(0i64);
    varStaticModelIndex = (unsigned __int16 *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 2i64 * varGfxAabbTree->smodelIndexCount);
    varStaticModelIndex = v2;
    if ( smodelIndexes == (unsigned __int16 *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Preload_GfxAabbTreeArray
==============
*/
void Preload_GfxAabbTreeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxAabbTree *i; 
  unsigned __int16 *smodelIndexes; 
  unsigned __int16 *v5; 

  v2 = count;
  Load_Stream(streamStart, varGfxAabbTree, 48 * count);
  for ( i = varGfxAabbTree; v2; --v2 )
  {
    varGfxAabbTree = i;
    Load_Stream(NotAtStart, i, 0x30ui64);
    smodelIndexes = varGfxAabbTree->smodelIndexes;
    if ( smodelIndexes )
    {
      if ( smodelIndexes == (unsigned __int16 *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v5 = varStaticModelIndex;
        DB_PatchMem_FixStreamAlignment(1ui64);
        DB_CheckCanIncStreamPos(0i64);
        varStaticModelIndex = (unsigned __int16 *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 2i64 * varGfxAabbTree->smodelIndexCount);
        varStaticModelIndex = v5;
        if ( smodelIndexes == (unsigned __int16 *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( smodelIndexes == (unsigned __int16 *)-2i64 )
        goto LABEL_7;
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Preload_GfxAabbTreeStream
==============
*/
void Preload_GfxAabbTreeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  unsigned __int16 *smodelIndexes; 
  unsigned __int16 *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 53373, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxAabbTree;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      smodelIndexes = varGfxAabbTree->smodelIndexes;
      if ( smodelIndexes )
      {
        if ( smodelIndexes == (unsigned __int16 *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v5 = varStaticModelIndex;
          DB_PatchMem_FixStreamAlignment(1ui64);
          DB_CheckCanIncStreamPos(0i64);
          varStaticModelIndex = (unsigned __int16 *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 2i64 * varGfxAabbTree->smodelIndexCount);
          varStaticModelIndex = v5;
          if ( smodelIndexes == (unsigned __int16 *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( smodelIndexes == (unsigned __int16 *)-2i64 )
          goto LABEL_11;
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varGfxAabbTree = (GfxAabbTree *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxCell
==============
*/
void Preload_GfxCell(const DBStreamStart streamStart)
{
  GfxPortal *v1; 
  __int64 portalCount; 
  GfxPortal *i; 
  vec3_t *v4; 

  Load_Stream(streamStart, varGfxCell, 0x28ui64);
  if ( varGfxCell->portals )
  {
    v1 = varGfxPortal;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxPortal = (GfxPortal *)g_streamPosGlob.pos;
    portalCount = varGfxCell->portalCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 80 * portalCount);
    for ( i = varGfxPortal; portalCount; --portalCount )
    {
      varGfxPortal = i;
      Load_Stream(NotAtStart, i, 0x50ui64);
      if ( varGfxPortal->vertices )
      {
        v4 = varvec3_t;
        varvec3_t = AllocPreload_vec3_t();
        Preload_vec3_tArray(AtStart, varGfxPortal->vertexCount);
        varvec3_t = v4;
      }
      ++i;
    }
    varGfxPortal = v1;
  }
}

/*
==============
Preload_GfxCellArray
==============
*/
void Preload_GfxCellArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxCell *i; 
  GfxPortal *v4; 
  __int64 portalCount; 
  GfxPortal *j; 
  vec3_t *v7; 

  v2 = count;
  Load_Stream(streamStart, varGfxCell, 40 * count);
  for ( i = varGfxCell; v2; --v2 )
  {
    varGfxCell = i;
    Load_Stream(NotAtStart, i, 0x28ui64);
    if ( varGfxCell->portals )
    {
      v4 = varGfxPortal;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      varGfxPortal = (GfxPortal *)g_streamPosGlob.pos;
      portalCount = varGfxCell->portalCount;
      Load_Stream(AtStart, g_streamPosGlob.pos, 80 * portalCount);
      for ( j = varGfxPortal; portalCount; --portalCount )
      {
        varGfxPortal = j;
        Load_Stream(NotAtStart, j, 0x50ui64);
        if ( varGfxPortal->vertices )
        {
          v7 = varvec3_t;
          varvec3_t = AllocPreload_vec3_t();
          Preload_vec3_tArray(AtStart, varGfxPortal->vertexCount);
          varvec3_t = v7;
        }
        ++j;
      }
      varGfxPortal = v4;
    }
    ++i;
  }
}

/*
==============
Preload_GfxCellStream
==============
*/
void Preload_GfxCellStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxPortal *v4; 
  __int64 portalCount; 
  GfxPortal *i; 
  vec3_t *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 53805, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxCell;
    do
    {
      Load_Stream(AtStart, pos, 0x28ui64);
      if ( varGfxCell->portals )
      {
        v4 = varGfxPortal;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varGfxPortal = (GfxPortal *)g_streamPosGlob.pos;
        portalCount = varGfxCell->portalCount;
        Load_Stream(AtStart, g_streamPosGlob.pos, 80 * portalCount);
        for ( i = varGfxPortal; portalCount; --portalCount )
        {
          varGfxPortal = i;
          Load_Stream(NotAtStart, i, 0x50ui64);
          if ( varGfxPortal->vertices )
          {
            v7 = varvec3_t;
            varvec3_t = AllocPreload_vec3_t();
            Preload_vec3_tArray(AtStart, varGfxPortal->vertexCount);
            varvec3_t = v7;
          }
          ++i;
        }
        varGfxPortal = v4;
      }
      pos = g_streamPosGlob.pos;
      varGfxCell = (GfxCell *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxCellTransientInfo
==============
*/
void Preload_GfxCellTransientInfo(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxCellTransientInfo, 4ui64);
}

/*
==============
Preload_GfxCellTransientInfoArray
==============
*/
void Preload_GfxCellTransientInfoArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxCellTransientInfo, 4 * count);
}

/*
==============
Preload_GfxCellTransientInfoStream
==============
*/
void Preload_GfxCellTransientInfoStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 53680, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxCellTransientInfo;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varGfxCellTransientInfo = (GfxCellTransientInfo *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxCellTree
==============
*/
void Preload_GfxCellTree(const DBStreamStart streamStart)
{
  GfxAabbTree *v1; 
  unsigned __int8 *pos; 
  __int64 v3; 
  GfxAabbTree *i; 

  Load_Stream(streamStart, varGfxCellTree, 8ui64);
  if ( varGfxCellTree->aabbTree )
  {
    v1 = varGfxAabbTree;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxAabbTree = (GfxAabbTree *)g_streamPosGlob.pos;
    DB_PushStreamPos(2u);
    DB_AllocStreamPos(3ui64);
    pos = g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 4ui64);
    DB_PopStreamPos();
    v3 = *(unsigned int *)pos;
    Load_Stream(AtStart, varGfxAabbTree, 48 * v3);
    for ( i = varGfxAabbTree; v3; --v3 )
    {
      varGfxAabbTree = i;
      Preload_GfxAabbTree(NotAtStart);
      ++i;
    }
    varGfxAabbTree = v1;
  }
}

/*
==============
Preload_GfxCellTreeArray
==============
*/
void Preload_GfxCellTreeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxCellTree *i; 
  GfxAabbTree *v4; 
  unsigned __int8 *pos; 
  __int64 v6; 
  GfxAabbTree *j; 

  v2 = count;
  Load_Stream(streamStart, varGfxCellTree, 8 * count);
  for ( i = varGfxCellTree; v2; --v2 )
  {
    varGfxCellTree = i;
    Load_Stream(NotAtStart, i, 8ui64);
    if ( varGfxCellTree->aabbTree )
    {
      v4 = varGfxAabbTree;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      varGfxAabbTree = (GfxAabbTree *)g_streamPosGlob.pos;
      DB_PushStreamPos(2u);
      DB_AllocStreamPos(3ui64);
      pos = g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 4ui64);
      DB_PopStreamPos();
      v6 = *(unsigned int *)pos;
      Load_Stream(AtStart, varGfxAabbTree, 48 * v6);
      for ( j = varGfxAabbTree; v6; --v6 )
      {
        varGfxAabbTree = j;
        Preload_GfxAabbTree(NotAtStart);
        ++j;
      }
      varGfxAabbTree = v4;
    }
    ++i;
  }
}

/*
==============
Preload_GfxCellTreeCount
==============
*/
void Preload_GfxCellTreeCount(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxCellTreeCount, 4ui64);
}

/*
==============
Preload_GfxCellTreeCountArray
==============
*/
void Preload_GfxCellTreeCountArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxCellTreeCount, 4 * count);
}

/*
==============
Preload_GfxCellTreeCountStream
==============
*/
void Preload_GfxCellTreeCountStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 53449, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxCellTreeCount;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varGfxCellTreeCount = (GfxCellTreeCount *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxCellTreeStream
==============
*/
void Preload_GfxCellTreeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  GfxAabbTree *v4; 
  unsigned __int8 *pos; 
  __int64 v6; 
  GfxAabbTree *i; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 53572, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varGfxCellTree;
    do
    {
      Load_Stream(AtStart, v3, 8ui64);
      if ( varGfxCellTree->aabbTree )
      {
        v4 = varGfxAabbTree;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varGfxAabbTree = (GfxAabbTree *)g_streamPosGlob.pos;
        DB_PushStreamPos(2u);
        DB_AllocStreamPos(3ui64);
        pos = g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 4ui64);
        DB_PopStreamPos();
        v6 = *(unsigned int *)pos;
        Load_Stream(AtStart, varGfxAabbTree, 48 * v6);
        for ( i = varGfxAabbTree; v6; --v6 )
        {
          varGfxAabbTree = i;
          Preload_GfxAabbTree(NotAtStart);
          ++i;
        }
        varGfxAabbTree = v4;
      }
      v3 = g_streamPosGlob.pos;
      varGfxCellTree = (GfxCellTree *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxCompressedSunShadowDataTemp
==============
*/
void Preload_GfxCompressedSunShadowDataTemp(const DBStreamStart streamStart)
{
  GfxCompressedSunShadowDataTemp *v1; 
  unsigned int *v2; 
  unsigned __int8 *v3; 
  GfxWrappedBuffer *v4; 

  Load_Stream(streamStart, varGfxCompressedSunShadowDataTemp, 0x48ui64);
  v1 = varGfxCompressedSunShadowDataTemp;
  v2 = varuint;
  if ( varGfxCompressedSunShadowDataTemp->tilesIndices )
  {
    varuint = AllocPreload_uint();
    Preload_uintArray(AtStart, varGfxCompressedSunShadowDataTemp->tilesCount);
    v1 = varGfxCompressedSunShadowDataTemp;
    varuint = v2;
  }
  if ( v1->tilesOffsets )
  {
    varuint = AllocPreload_uint();
    Preload_uintArray(AtStart, varGfxCompressedSunShadowDataTemp->tilesCount);
    varuint = v2;
  }
  DB_PushStreamPos(0xAu);
  if ( varGfxCompressedSunShadowDataTemp->tilesData )
  {
    v3 = varbyte;
    varbyte = AllocPreload_byte();
    Preload_byteArray(AtStart, varGfxCompressedSunShadowDataTemp->tilesDataSize);
    varbyte = v3;
  }
  DB_PopStreamPos();
  v4 = varGfxWrappedBuffer;
  varGfxWrappedBuffer = &varGfxCompressedSunShadowDataTemp->tilesDataBuffer;
  Preload_GfxWrappedBuffer(NotAtStart);
  varGfxWrappedBuffer = v4;
}

/*
==============
Preload_GfxCompressedSunShadowDataTempArray
==============
*/
void Preload_GfxCompressedSunShadowDataTempArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxCompressedSunShadowDataTemp *i; 
  GfxCompressedSunShadowDataTemp *v4; 
  unsigned int *v5; 
  unsigned __int8 *v6; 
  GfxWrappedBuffer *v7; 

  v2 = count;
  Load_Stream(streamStart, varGfxCompressedSunShadowDataTemp, 72 * count);
  for ( i = varGfxCompressedSunShadowDataTemp; v2; --v2 )
  {
    varGfxCompressedSunShadowDataTemp = i;
    Load_Stream(NotAtStart, i, 0x48ui64);
    v4 = varGfxCompressedSunShadowDataTemp;
    v5 = varuint;
    if ( varGfxCompressedSunShadowDataTemp->tilesIndices )
    {
      varuint = AllocPreload_uint();
      Preload_uintArray(AtStart, varGfxCompressedSunShadowDataTemp->tilesCount);
      v4 = varGfxCompressedSunShadowDataTemp;
      varuint = v5;
    }
    if ( v4->tilesOffsets )
    {
      varuint = AllocPreload_uint();
      Preload_uintArray(AtStart, varGfxCompressedSunShadowDataTemp->tilesCount);
      varuint = v5;
    }
    DB_PushStreamPos(0xAu);
    if ( varGfxCompressedSunShadowDataTemp->tilesData )
    {
      v6 = varbyte;
      varbyte = AllocPreload_byte();
      Preload_byteArray(AtStart, varGfxCompressedSunShadowDataTemp->tilesDataSize);
      varbyte = v6;
    }
    DB_PopStreamPos();
    v7 = varGfxWrappedBuffer;
    varGfxWrappedBuffer = &varGfxCompressedSunShadowDataTemp->tilesDataBuffer;
    Preload_GfxWrappedBuffer(NotAtStart);
    ++i;
    varGfxWrappedBuffer = v7;
  }
}

/*
==============
Preload_GfxCompressedSunShadowDataTempPtr
==============
*/
void Preload_GfxCompressedSunShadowDataTempPtr(const DBStreamStart streamStart)
{
  GfxCompressedSunShadowDataTemp *v1; 

  Load_Stream(streamStart, varGfxCompressedSunShadowDataTempPtr, 8ui64);
  if ( *varGfxCompressedSunShadowDataTempPtr )
  {
    v1 = varGfxCompressedSunShadowDataTemp;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxCompressedSunShadowDataTemp = (GfxCompressedSunShadowDataTemp *)g_streamPosGlob.pos;
    Preload_GfxCompressedSunShadowDataTemp(AtStart);
    varGfxCompressedSunShadowDataTemp = v1;
  }
}

/*
==============
Preload_GfxCompressedSunShadowDataTempPtrArray
==============
*/
void Preload_GfxCompressedSunShadowDataTempPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxCompressedSunShadowDataTemp **i; 
  GfxCompressedSunShadowDataTemp *v4; 

  v2 = count;
  Load_Stream(streamStart, varGfxCompressedSunShadowDataTempPtr, 8 * count);
  for ( i = varGfxCompressedSunShadowDataTempPtr; v2; --v2 )
  {
    varGfxCompressedSunShadowDataTempPtr = i;
    Load_Stream(NotAtStart, i, 8ui64);
    if ( *varGfxCompressedSunShadowDataTempPtr )
    {
      v4 = varGfxCompressedSunShadowDataTemp;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      varGfxCompressedSunShadowDataTemp = (GfxCompressedSunShadowDataTemp *)g_streamPosGlob.pos;
      Preload_GfxCompressedSunShadowDataTemp(AtStart);
      varGfxCompressedSunShadowDataTemp = v4;
    }
    ++i;
  }
}

/*
==============
Preload_GfxCompressedSunShadowDataTempPtrStream
==============
*/
void Preload_GfxCompressedSunShadowDataTempPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxCompressedSunShadowDataTemp *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 62298, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxCompressedSunShadowDataTempPtr;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      if ( *varGfxCompressedSunShadowDataTempPtr )
      {
        v4 = varGfxCompressedSunShadowDataTemp;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varGfxCompressedSunShadowDataTemp = (GfxCompressedSunShadowDataTemp *)g_streamPosGlob.pos;
        Preload_GfxCompressedSunShadowDataTemp(AtStart);
        varGfxCompressedSunShadowDataTemp = v4;
      }
      pos = g_streamPosGlob.pos;
      varGfxCompressedSunShadowDataTempPtr = (GfxCompressedSunShadowDataTemp **)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxCompressedSunShadowDataTempStream
==============
*/
void Preload_GfxCompressedSunShadowDataTempStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxCompressedSunShadowDataTemp *v4; 
  unsigned int *v5; 
  unsigned __int8 *v6; 
  GfxWrappedBuffer *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 62210, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxCompressedSunShadowDataTemp;
    do
    {
      Load_Stream(AtStart, pos, 0x48ui64);
      v4 = varGfxCompressedSunShadowDataTemp;
      v5 = varuint;
      if ( varGfxCompressedSunShadowDataTemp->tilesIndices )
      {
        varuint = AllocPreload_uint();
        Preload_uintArray(AtStart, varGfxCompressedSunShadowDataTemp->tilesCount);
        v4 = varGfxCompressedSunShadowDataTemp;
        varuint = v5;
      }
      if ( v4->tilesOffsets )
      {
        varuint = AllocPreload_uint();
        Preload_uintArray(AtStart, varGfxCompressedSunShadowDataTemp->tilesCount);
        varuint = v5;
      }
      DB_PushStreamPos(0xAu);
      if ( varGfxCompressedSunShadowDataTemp->tilesData )
      {
        v6 = varbyte;
        varbyte = AllocPreload_byte();
        Preload_byteArray(AtStart, varGfxCompressedSunShadowDataTemp->tilesDataSize);
        varbyte = v6;
      }
      DB_PopStreamPos();
      v7 = varGfxWrappedBuffer;
      varGfxWrappedBuffer = &varGfxCompressedSunShadowDataTemp->tilesDataBuffer;
      Preload_GfxWrappedBuffer(NotAtStart);
      pos = g_streamPosGlob.pos;
      varGfxCompressedSunShadowDataTemp = (GfxCompressedSunShadowDataTemp *)g_streamPosGlob.pos;
      varGfxWrappedBuffer = v7;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxCompressedSunShadowParams
==============
*/
void Preload_GfxCompressedSunShadowParams(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxCompressedSunShadowParams, 0x30ui64);
}

/*
==============
Preload_GfxCompressedSunShadowParamsArray
==============
*/
void Preload_GfxCompressedSunShadowParamsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxCompressedSunShadowParams, 48 * count);
}

/*
==============
Preload_GfxCompressedSunShadowParamsStream
==============
*/
void Preload_GfxCompressedSunShadowParamsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 65097, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxCompressedSunShadowParams;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      pos = g_streamPosGlob.pos;
      varGfxCompressedSunShadowParams = (GfxCompressedSunShadowParams *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxDecalVolumeCollection
==============
*/
void Preload_GfxDecalVolumeCollection(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxDecalVolumeCollection, 8ui64);
}

/*
==============
Preload_GfxDecalVolumeCollectionArray
==============
*/
void Preload_GfxDecalVolumeCollectionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxDecalVolumeCollection, 8 * count);
}

/*
==============
Preload_GfxDecalVolumeCollectionStream
==============
*/
void Preload_GfxDecalVolumeCollectionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 64804, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxDecalVolumeCollection;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      pos = g_streamPosGlob.pos;
      varGfxDecalVolumeCollection = (GfxDecalVolumeCollection *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxDecalVolumeTransientData
==============
*/
void Preload_GfxDecalVolumeTransientData(const DBStreamStart streamStart)
{
  GfxStaticDecalVolumePacked *decalVolumes; 
  GfxStaticDecalVolumePacked *v2; 
  GfxWrappedBuffer *v3; 
  GfxDecalVolumeTransientData *v4; 
  Bounds *v5; 
  GfxStaticDecalVolumeUid *v6; 

  Load_Stream(streamStart, varGfxDecalVolumeTransientData, 0x40ui64);
  DB_PushStreamPos(7u);
  decalVolumes = varGfxDecalVolumeTransientData->decalVolumes;
  if ( decalVolumes )
  {
    if ( decalVolumes == (GfxStaticDecalVolumePacked *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( decalVolumes != (GfxStaticDecalVolumePacked *)-2i64 )
    {
      goto LABEL_8;
    }
    v2 = varGfxStaticDecalVolumePacked;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxStaticDecalVolumePacked = (GfxStaticDecalVolumePacked *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 44i64 * varGfxDecalVolumeTransientData->decalVolumeCount);
    varGfxStaticDecalVolumePacked = v2;
    if ( decalVolumes == (GfxStaticDecalVolumePacked *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  DB_PopStreamPos();
  v3 = varGfxWrappedBuffer;
  varGfxWrappedBuffer = &varGfxDecalVolumeTransientData->decalVolumesBuffer;
  Preload_GfxWrappedBuffer(NotAtStart);
  v4 = varGfxDecalVolumeTransientData;
  varGfxWrappedBuffer = v3;
  if ( varGfxDecalVolumeTransientData->collectionBounds )
  {
    v5 = varBounds;
    varBounds = AllocPreload_Bounds();
    Preload_BoundsArray(AtStart, varGfxDecalVolumeTransientData->collectionCount);
    v4 = varGfxDecalVolumeTransientData;
    varBounds = v5;
  }
  if ( v4->decalVolumeUids )
  {
    v6 = varGfxStaticDecalVolumeUid;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxStaticDecalVolumeUid = (GfxStaticDecalVolumeUid *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 4i64 * varGfxDecalVolumeTransientData->decalVolumeCount);
    varGfxStaticDecalVolumeUid = v6;
  }
}

/*
==============
Preload_GfxDecalVolumeTransientDataArray
==============
*/
void Preload_GfxDecalVolumeTransientDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxDecalVolumeTransientData *i; 
  GfxStaticDecalVolumePacked *decalVolumes; 
  GfxStaticDecalVolumePacked *v5; 
  GfxWrappedBuffer *v6; 
  GfxDecalVolumeTransientData *v7; 
  Bounds *v8; 
  GfxStaticDecalVolumeUid *v9; 

  v2 = count;
  Load_Stream(streamStart, varGfxDecalVolumeTransientData, count << 6);
  for ( i = varGfxDecalVolumeTransientData; v2; --v2 )
  {
    varGfxDecalVolumeTransientData = i;
    Load_Stream(NotAtStart, i, 0x40ui64);
    DB_PushStreamPos(7u);
    decalVolumes = varGfxDecalVolumeTransientData->decalVolumes;
    if ( decalVolumes )
    {
      if ( decalVolumes == (GfxStaticDecalVolumePacked *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v5 = varGfxStaticDecalVolumePacked;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        varGfxStaticDecalVolumePacked = (GfxStaticDecalVolumePacked *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 44i64 * varGfxDecalVolumeTransientData->decalVolumeCount);
        varGfxStaticDecalVolumePacked = v5;
        if ( decalVolumes == (GfxStaticDecalVolumePacked *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( decalVolumes == (GfxStaticDecalVolumePacked *)-2i64 )
        goto LABEL_7;
    }
LABEL_9:
    DB_PopStreamPos();
    v6 = varGfxWrappedBuffer;
    varGfxWrappedBuffer = &varGfxDecalVolumeTransientData->decalVolumesBuffer;
    Preload_GfxWrappedBuffer(NotAtStart);
    v7 = varGfxDecalVolumeTransientData;
    varGfxWrappedBuffer = v6;
    if ( varGfxDecalVolumeTransientData->collectionBounds )
    {
      v8 = varBounds;
      varBounds = AllocPreload_Bounds();
      Preload_BoundsArray(AtStart, varGfxDecalVolumeTransientData->collectionCount);
      v7 = varGfxDecalVolumeTransientData;
      varBounds = v8;
    }
    if ( v7->decalVolumeUids )
    {
      v9 = varGfxStaticDecalVolumeUid;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      varGfxStaticDecalVolumeUid = (GfxStaticDecalVolumeUid *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 4i64 * varGfxDecalVolumeTransientData->decalVolumeCount);
      varGfxStaticDecalVolumeUid = v9;
    }
    ++i;
  }
}

/*
==============
Preload_GfxDecalVolumeTransientDataStream
==============
*/
void Preload_GfxDecalVolumeTransientDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxStaticDecalVolumePacked *decalVolumes; 
  GfxStaticDecalVolumePacked *v5; 
  GfxWrappedBuffer *v6; 
  GfxDecalVolumeTransientData *v7; 
  Bounds *v8; 
  GfxStaticDecalVolumeUid *v9; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 61980, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxDecalVolumeTransientData;
    do
    {
      Load_Stream(AtStart, pos, 0x40ui64);
      DB_PushStreamPos(7u);
      decalVolumes = varGfxDecalVolumeTransientData->decalVolumes;
      if ( decalVolumes )
      {
        if ( decalVolumes == (GfxStaticDecalVolumePacked *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v5 = varGfxStaticDecalVolumePacked;
          DB_PatchMem_FixStreamAlignment(3ui64);
          DB_CheckCanIncStreamPos(0i64);
          varGfxStaticDecalVolumePacked = (GfxStaticDecalVolumePacked *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 44i64 * varGfxDecalVolumeTransientData->decalVolumeCount);
          varGfxStaticDecalVolumePacked = v5;
          if ( decalVolumes == (GfxStaticDecalVolumePacked *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( decalVolumes == (GfxStaticDecalVolumePacked *)-2i64 )
          goto LABEL_11;
      }
LABEL_13:
      DB_PopStreamPos();
      v6 = varGfxWrappedBuffer;
      varGfxWrappedBuffer = &varGfxDecalVolumeTransientData->decalVolumesBuffer;
      Preload_GfxWrappedBuffer(NotAtStart);
      v7 = varGfxDecalVolumeTransientData;
      varGfxWrappedBuffer = v6;
      if ( varGfxDecalVolumeTransientData->collectionBounds )
      {
        v8 = varBounds;
        varBounds = AllocPreload_Bounds();
        Preload_BoundsArray(AtStart, varGfxDecalVolumeTransientData->collectionCount);
        v7 = varGfxDecalVolumeTransientData;
        varBounds = v8;
      }
      if ( v7->decalVolumeUids )
      {
        v9 = varGfxStaticDecalVolumeUid;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        varGfxStaticDecalVolumeUid = (GfxStaticDecalVolumeUid *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 4i64 * varGfxDecalVolumeTransientData->decalVolumeCount);
        varGfxStaticDecalVolumeUid = v9;
      }
      pos = g_streamPosGlob.pos;
      varGfxDecalVolumeTransientData = (GfxDecalVolumeTransientData *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxDisplacementParms
==============
*/
void Preload_GfxDisplacementParms(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxDisplacementParms, 0x10ui64);
}

/*
==============
Preload_GfxDisplacementParmsArray
==============
*/
void Preload_GfxDisplacementParmsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxDisplacementParms, 16 * count);
}

/*
==============
Preload_GfxDisplacementParmsStream
==============
*/
void Preload_GfxDisplacementParmsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  float4 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 61254, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = varGfxDisplacementParms;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      pos = (float4 *)g_streamPosGlob.pos;
      varGfxDisplacementParms = (float4 *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxDrawSurf
==============
*/
void Preload_GfxDrawSurf(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxDrawSurf, 0x10ui64);
}

/*
==============
Preload_GfxDrawSurfArray
==============
*/
void Preload_GfxDrawSurfArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxDrawSurf, 16 * count);
}

/*
==============
Preload_GfxDrawSurfStream
==============
*/
void Preload_GfxDrawSurfStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 56352, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxDrawSurf;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      pos = g_streamPosGlob.pos;
      varGfxDrawSurf = (GfxDrawSurf *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxDynamicLightset
==============
*/
void Preload_GfxDynamicLightset(const DBStreamStart streamStart)
{
  GfxDynamicLightset *v1; 
  GfxDynamicLightsetBFData *v2; 
  GfxDynamicLightsetLightInfo *v3; 
  GfxDynamicLightsetPortalGIData *v4; 
  GfxDynamicLightsetProductGIData *v5; 
  GfxDynamicLightsetLMData *v6; 
  GfxDynamicLightsetProbeData *v7; 

  Load_Stream(streamStart, varGfxDynamicLightset, 0x260ui64);
  v1 = varGfxDynamicLightset;
  if ( varGfxDynamicLightset->basisFunctions )
  {
    v2 = varGfxDynamicLightsetBFData;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxDynamicLightsetBFData = (GfxDynamicLightsetBFData *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 32i64 * varGfxDynamicLightset->numBasisFunctions);
    v1 = varGfxDynamicLightset;
    varGfxDynamicLightsetBFData = v2;
  }
  if ( v1->basisFunctionLights )
  {
    v3 = varGfxDynamicLightsetLightInfo;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxDynamicLightsetLightInfo = (GfxDynamicLightsetLightInfo *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 28i64 * varGfxDynamicLightset->numBasisFunctionPrimaryLights);
    v1 = varGfxDynamicLightset;
    varGfxDynamicLightsetLightInfo = v3;
  }
  if ( v1->portalGIData )
  {
    v4 = varGfxDynamicLightsetPortalGIData;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxDynamicLightsetPortalGIData = (GfxDynamicLightsetPortalGIData *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 36i64 * varGfxDynamicLightset->numPortalGI);
    v1 = varGfxDynamicLightset;
    varGfxDynamicLightsetPortalGIData = v4;
  }
  if ( v1->productGIData )
  {
    v5 = varGfxDynamicLightsetProductGIData;
    DB_PatchMem_FixStreamAlignment(1ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxDynamicLightsetProductGIData = (GfxDynamicLightsetProductGIData *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 4i64 * varGfxDynamicLightset->numProductGI);
    v1 = varGfxDynamicLightset;
    varGfxDynamicLightsetProductGIData = v5;
  }
  v6 = varGfxDynamicLightsetLMData;
  varGfxDynamicLightsetLMData = &v1->lmData;
  Preload_GfxDynamicLightsetLMData(NotAtStart);
  varGfxDynamicLightsetLMData = v6;
  v7 = varGfxDynamicLightsetProbeData;
  varGfxDynamicLightsetProbeData = &varGfxDynamicLightset->lgProbeData;
  Preload_GfxDynamicLightsetProbeData(NotAtStart);
  varGfxDynamicLightsetProbeData = v7;
}

/*
==============
Preload_GfxDynamicLightsetArray
==============
*/
void Preload_GfxDynamicLightsetArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxDynamicLightset *i; 
  GfxDynamicLightset *v4; 
  GfxDynamicLightsetBFData *v5; 
  GfxDynamicLightsetLightInfo *v6; 
  GfxDynamicLightsetPortalGIData *v7; 
  GfxDynamicLightsetProductGIData *v8; 
  GfxDynamicLightsetLMData *v9; 
  GfxDynamicLightsetProbeData *v10; 

  v2 = count;
  Load_Stream(streamStart, varGfxDynamicLightset, 608 * count);
  for ( i = varGfxDynamicLightset; v2; --v2 )
  {
    varGfxDynamicLightset = i;
    Load_Stream(NotAtStart, i, 0x260ui64);
    v4 = varGfxDynamicLightset;
    if ( varGfxDynamicLightset->basisFunctions )
    {
      v5 = varGfxDynamicLightsetBFData;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      varGfxDynamicLightsetBFData = (GfxDynamicLightsetBFData *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 32i64 * varGfxDynamicLightset->numBasisFunctions);
      v4 = varGfxDynamicLightset;
      varGfxDynamicLightsetBFData = v5;
    }
    if ( v4->basisFunctionLights )
    {
      v6 = varGfxDynamicLightsetLightInfo;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      varGfxDynamicLightsetLightInfo = (GfxDynamicLightsetLightInfo *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 28i64 * varGfxDynamicLightset->numBasisFunctionPrimaryLights);
      v4 = varGfxDynamicLightset;
      varGfxDynamicLightsetLightInfo = v6;
    }
    if ( v4->portalGIData )
    {
      v7 = varGfxDynamicLightsetPortalGIData;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      varGfxDynamicLightsetPortalGIData = (GfxDynamicLightsetPortalGIData *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 36i64 * varGfxDynamicLightset->numPortalGI);
      v4 = varGfxDynamicLightset;
      varGfxDynamicLightsetPortalGIData = v7;
    }
    if ( v4->productGIData )
    {
      v8 = varGfxDynamicLightsetProductGIData;
      DB_PatchMem_FixStreamAlignment(1ui64);
      DB_CheckCanIncStreamPos(0i64);
      varGfxDynamicLightsetProductGIData = (GfxDynamicLightsetProductGIData *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 4i64 * varGfxDynamicLightset->numProductGI);
      v4 = varGfxDynamicLightset;
      varGfxDynamicLightsetProductGIData = v8;
    }
    v9 = varGfxDynamicLightsetLMData;
    varGfxDynamicLightsetLMData = &v4->lmData;
    Preload_GfxDynamicLightsetLMData(NotAtStart);
    varGfxDynamicLightsetLMData = v9;
    v10 = varGfxDynamicLightsetProbeData;
    varGfxDynamicLightsetProbeData = &varGfxDynamicLightset->lgProbeData;
    Preload_GfxDynamicLightsetProbeData(NotAtStart);
    ++i;
    varGfxDynamicLightsetProbeData = v10;
  }
}

/*
==============
Preload_GfxDynamicLightsetBFData
==============
*/
void Preload_GfxDynamicLightsetBFData(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxDynamicLightsetBFData, 0x20ui64);
}

/*
==============
Preload_GfxDynamicLightsetBFDataArray
==============
*/
void Preload_GfxDynamicLightsetBFDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxDynamicLightsetBFData, 32 * count);
}

/*
==============
Preload_GfxDynamicLightsetBFDataStream
==============
*/
void Preload_GfxDynamicLightsetBFDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 68463, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxDynamicLightsetBFData;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      pos = g_streamPosGlob.pos;
      varGfxDynamicLightsetBFData = (GfxDynamicLightsetBFData *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxDynamicLightsetBFType
==============
*/
void Preload_GfxDynamicLightsetBFType(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxDynamicLightsetBFType, 2ui64);
}

/*
==============
Preload_GfxDynamicLightsetBFTypeArray
==============
*/
void Preload_GfxDynamicLightsetBFTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxDynamicLightsetBFType, 2 * count);
}

/*
==============
Preload_GfxDynamicLightsetBFTypeStream
==============
*/
void Preload_GfxDynamicLightsetBFTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 68295, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxDynamicLightsetBFType;
    do
    {
      Load_Stream(AtStart, pos, 2ui64);
      pos = g_streamPosGlob.pos;
      varGfxDynamicLightsetBFType = (GfxDynamicLightsetBFType *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxDynamicLightsetGChunk
==============
*/
void Preload_GfxDynamicLightsetGChunk(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxDynamicLightsetGChunk, 0x18ui64);
}

/*
==============
Preload_GfxDynamicLightsetGChunkArray
==============
*/
void Preload_GfxDynamicLightsetGChunkArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxDynamicLightsetGChunk, 24 * count);
}

/*
==============
Preload_GfxDynamicLightsetGChunkFlags
==============
*/
void Preload_GfxDynamicLightsetGChunkFlags(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxDynamicLightsetGChunkFlags, 2ui64);
}

/*
==============
Preload_GfxDynamicLightsetGChunkFlagsArray
==============
*/
void Preload_GfxDynamicLightsetGChunkFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxDynamicLightsetGChunkFlags, 2 * count);
}

/*
==============
Preload_GfxDynamicLightsetGChunkFlagsStream
==============
*/
void Preload_GfxDynamicLightsetGChunkFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 68905, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxDynamicLightsetGChunkFlags;
    do
    {
      Load_Stream(AtStart, pos, 2ui64);
      pos = g_streamPosGlob.pos;
      varGfxDynamicLightsetGChunkFlags = (GfxDynamicLightsetGChunkFlags *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxDynamicLightsetGChunkInfo
==============
*/
void Preload_GfxDynamicLightsetGChunkInfo(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxDynamicLightsetGChunkInfo, 0x10ui64);
}

/*
==============
Preload_GfxDynamicLightsetGChunkInfoArray
==============
*/
void Preload_GfxDynamicLightsetGChunkInfoArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxDynamicLightsetGChunkInfo, 16 * count);
}

/*
==============
Preload_GfxDynamicLightsetGChunkInfoStream
==============
*/
void Preload_GfxDynamicLightsetGChunkInfoStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 68829, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxDynamicLightsetGChunkInfo;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      pos = g_streamPosGlob.pos;
      varGfxDynamicLightsetGChunkInfo = (GfxDynamicLightsetGChunkInfo *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxDynamicLightsetGChunkStream
==============
*/
void Preload_GfxDynamicLightsetGChunkStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 69050, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxDynamicLightsetGChunk;
    do
    {
      Load_Stream(AtStart, pos, 0x18ui64);
      pos = g_streamPosGlob.pos;
      varGfxDynamicLightsetGChunk = (GfxDynamicLightsetGChunk *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxDynamicLightsetLGppZoneInfo
==============
*/
void Preload_GfxDynamicLightsetLGppZoneInfo(const DBStreamStart streamStart)
{
  GfxGpuDynLightsetsLGVReference *v1; 
  GfxWrappedBuffer *v2; 
  GfxDynamicLightsetProbeData *v3; 

  Load_Stream(streamStart, varGfxDynamicLightsetLGppZoneInfo, 0x130ui64);
  DB_PushStreamPos(7u);
  if ( varGfxDynamicLightsetLGppZoneInfo->lgvReferences )
  {
    v1 = varGfxGpuDynLightsetsLGVReference;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxGpuDynLightsetsLGVReference = (GfxGpuDynLightsetsLGVReference *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 8i64 * varGfxDynamicLightsetLGppZoneInfo->numOrigSMLGppProbes);
    varGfxGpuDynLightsetsLGVReference = v1;
  }
  DB_PopStreamPos();
  v2 = varGfxWrappedBuffer;
  varGfxWrappedBuffer = &varGfxDynamicLightsetLGppZoneInfo->lgvReferencesBuffer;
  Preload_GfxWrappedBuffer(NotAtStart);
  varGfxWrappedBuffer = v2;
  v3 = varGfxDynamicLightsetProbeData;
  varGfxDynamicLightsetProbeData = &varGfxDynamicLightsetLGppZoneInfo->lgvProbeData;
  Preload_GfxDynamicLightsetProbeData(NotAtStart);
  varGfxDynamicLightsetProbeData = v3;
}

/*
==============
Preload_GfxDynamicLightsetLGppZoneInfoArray
==============
*/
void Preload_GfxDynamicLightsetLGppZoneInfoArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxDynamicLightsetLGppZoneInfo *i; 
  GfxGpuDynLightsetsLGVReference *v4; 
  GfxWrappedBuffer *v5; 
  GfxDynamicLightsetProbeData *v6; 

  v2 = count;
  Load_Stream(streamStart, varGfxDynamicLightsetLGppZoneInfo, 304 * count);
  for ( i = varGfxDynamicLightsetLGppZoneInfo; v2; --v2 )
  {
    varGfxDynamicLightsetLGppZoneInfo = i;
    Load_Stream(NotAtStart, i, 0x130ui64);
    DB_PushStreamPos(7u);
    if ( varGfxDynamicLightsetLGppZoneInfo->lgvReferences )
    {
      v4 = varGfxGpuDynLightsetsLGVReference;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      varGfxGpuDynLightsetsLGVReference = (GfxGpuDynLightsetsLGVReference *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 8i64 * varGfxDynamicLightsetLGppZoneInfo->numOrigSMLGppProbes);
      varGfxGpuDynLightsetsLGVReference = v4;
    }
    DB_PopStreamPos();
    v5 = varGfxWrappedBuffer;
    varGfxWrappedBuffer = &varGfxDynamicLightsetLGppZoneInfo->lgvReferencesBuffer;
    Preload_GfxWrappedBuffer(NotAtStart);
    varGfxWrappedBuffer = v5;
    v6 = varGfxDynamicLightsetProbeData;
    varGfxDynamicLightsetProbeData = &varGfxDynamicLightsetLGppZoneInfo->lgvProbeData;
    Preload_GfxDynamicLightsetProbeData(NotAtStart);
    ++i;
    varGfxDynamicLightsetProbeData = v6;
  }
}

/*
==============
Preload_GfxDynamicLightsetLGppZoneInfoStream
==============
*/
void Preload_GfxDynamicLightsetLGppZoneInfoStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxGpuDynLightsetsLGVReference *v4; 
  GfxWrappedBuffer *v5; 
  GfxDynamicLightsetProbeData *v6; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 69801, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxDynamicLightsetLGppZoneInfo;
    do
    {
      Load_Stream(AtStart, pos, 0x130ui64);
      DB_PushStreamPos(7u);
      if ( varGfxDynamicLightsetLGppZoneInfo->lgvReferences )
      {
        v4 = varGfxGpuDynLightsetsLGVReference;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        varGfxGpuDynLightsetsLGVReference = (GfxGpuDynLightsetsLGVReference *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 8i64 * varGfxDynamicLightsetLGppZoneInfo->numOrigSMLGppProbes);
        varGfxGpuDynLightsetsLGVReference = v4;
      }
      DB_PopStreamPos();
      v5 = varGfxWrappedBuffer;
      varGfxWrappedBuffer = &varGfxDynamicLightsetLGppZoneInfo->lgvReferencesBuffer;
      Preload_GfxWrappedBuffer(NotAtStart);
      varGfxWrappedBuffer = v5;
      v6 = varGfxDynamicLightsetProbeData;
      varGfxDynamicLightsetProbeData = &varGfxDynamicLightsetLGppZoneInfo->lgvProbeData;
      Preload_GfxDynamicLightsetProbeData(NotAtStart);
      pos = g_streamPosGlob.pos;
      varGfxDynamicLightsetLGppZoneInfo = (GfxDynamicLightsetLGppZoneInfo *)g_streamPosGlob.pos;
      varGfxDynamicLightsetProbeData = v6;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxDynamicLightsetLMData
==============
*/
void Preload_GfxDynamicLightsetLMData(const DBStreamStart streamStart)
{
  GfxDynamicLightsetLMData *v1; 
  GfxDynamicLightsetGChunk *v2; 
  unsigned __int16 *v3; 
  unsigned int *v4; 
  unsigned int *v5; 
  GfxWrappedBuffer *v6; 
  unsigned int *v7; 
  GfxWrappedBuffer *v8; 
  unsigned int *v9; 
  GfxWrappedBuffer *v10; 
  GfxDynamicLightsetLMData *v11; 
  unsigned __int16 *v12; 
  GfxDynamicLightsetLMData *v13; 
  unsigned int *v14; 

  Load_Stream(streamStart, varGfxDynamicLightsetLMData, 0x118ui64);
  v1 = varGfxDynamicLightsetLMData;
  if ( varGfxDynamicLightsetLMData->chunkGLM )
  {
    v2 = varGfxDynamicLightsetGChunk;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxDynamicLightsetGChunk = (GfxDynamicLightsetGChunk *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 24i64 * varGfxDynamicLightsetLMData->numGChunkLM);
    v1 = varGfxDynamicLightsetLMData;
    varGfxDynamicLightsetGChunk = v2;
  }
  v3 = varushort;
  if ( v1->chunkGLMBF )
  {
    varushort = AllocPreload_ushort();
    Preload_ushortArray(AtStart, varGfxDynamicLightsetLMData->numGChunkLMBF);
    v1 = varGfxDynamicLightsetLMData;
    varushort = v3;
  }
  if ( v1->chunkWhichLM )
  {
    varushort = AllocPreload_ushort();
    Preload_ushortArray(AtStart, varGfxDynamicLightsetLMData->numLMHave);
    v1 = varGfxDynamicLightsetLMData;
    varushort = v3;
  }
  if ( v1->chunkLMStart )
  {
    v4 = varuint;
    varuint = AllocPreload_uint();
    Preload_uintArray(AtStart, varGfxDynamicLightsetLMData->numLMHave + (varGfxDynamicLightsetLMData->numLMHave != 0));
    varuint = v4;
  }
  DB_PushStreamPos(7u);
  if ( varGfxDynamicLightsetLMData->origTexels )
  {
    v5 = varuint;
    varuint = AllocPreload_uint();
    Preload_uintArray(AtStart, 2 * varGfxDynamicLightsetLMData->numOrigTexels);
    varuint = v5;
  }
  DB_PopStreamPos();
  v6 = varGfxWrappedBuffer;
  varGfxWrappedBuffer = &varGfxDynamicLightsetLMData->origTexelsBuffer;
  Preload_GfxWrappedBuffer(NotAtStart);
  varGfxWrappedBuffer = v6;
  DB_PushStreamPos(7u);
  if ( varGfxDynamicLightsetLMData->origRecords )
  {
    v7 = varuint;
    varuint = AllocPreload_uint();
    Preload_uintArray(AtStart, varGfxDynamicLightsetLMData->numOrigTexels);
    varuint = v7;
  }
  DB_PopStreamPos();
  v8 = varGfxWrappedBuffer;
  varGfxWrappedBuffer = &varGfxDynamicLightsetLMData->origRecordsBuffer;
  Preload_GfxWrappedBuffer(NotAtStart);
  varGfxWrappedBuffer = v8;
  DB_PushStreamPos(7u);
  if ( varGfxDynamicLightsetLMData->bfTexels )
  {
    v9 = varuint;
    varuint = AllocPreload_uint();
    Preload_uintArray(AtStart, 2 * varGfxDynamicLightsetLMData->numBFLMTexels);
    varuint = v9;
  }
  DB_PopStreamPos();
  v10 = varGfxWrappedBuffer;
  varGfxWrappedBuffer = &varGfxDynamicLightsetLMData->bfTexelsBuffer;
  Preload_GfxWrappedBuffer(NotAtStart);
  v11 = varGfxDynamicLightsetLMData;
  varGfxWrappedBuffer = v10;
  if ( varGfxDynamicLightsetLMData->skipRecords )
  {
    v12 = varushort;
    varushort = AllocPreload_ushort();
    Preload_ushortArray(AtStart, varGfxDynamicLightsetLMData->numSkipRecords);
    v11 = varGfxDynamicLightsetLMData;
    varushort = v12;
    v10 = varGfxWrappedBuffer;
  }
  varGfxWrappedBuffer = &v11->skipRecordsBuffer;
  Preload_GfxWrappedBuffer(NotAtStart);
  v13 = varGfxDynamicLightsetLMData;
  varGfxWrappedBuffer = v10;
  if ( varGfxDynamicLightsetLMData->palletteRecords )
  {
    v14 = varuint;
    varuint = AllocPreload_uint();
    Preload_uintArray(AtStart, varGfxDynamicLightsetLMData->numSkipRecords);
    v13 = varGfxDynamicLightsetLMData;
    varuint = v14;
    v10 = varGfxWrappedBuffer;
  }
  varGfxWrappedBuffer = &v13->palletteRecordsBuffer;
  Preload_GfxWrappedBuffer(NotAtStart);
  varGfxWrappedBuffer = v10;
}

/*
==============
Preload_GfxDynamicLightsetLMDataArray
==============
*/
void Preload_GfxDynamicLightsetLMDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxDynamicLightsetLMData *i; 
  GfxDynamicLightsetLMData *v4; 
  GfxDynamicLightsetGChunk *v5; 
  unsigned __int16 *v6; 
  unsigned int *v7; 
  unsigned int *v8; 
  GfxWrappedBuffer *v9; 
  unsigned int *v10; 
  GfxWrappedBuffer *v11; 
  unsigned int *v12; 
  GfxWrappedBuffer *v13; 
  GfxDynamicLightsetLMData *v14; 
  unsigned __int16 *v15; 
  GfxDynamicLightsetLMData *v16; 
  unsigned int *v17; 

  v2 = count;
  Load_Stream(streamStart, varGfxDynamicLightsetLMData, 280 * count);
  for ( i = varGfxDynamicLightsetLMData; v2; --v2 )
  {
    varGfxDynamicLightsetLMData = i;
    Load_Stream(NotAtStart, i, 0x118ui64);
    v4 = varGfxDynamicLightsetLMData;
    if ( varGfxDynamicLightsetLMData->chunkGLM )
    {
      v5 = varGfxDynamicLightsetGChunk;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      varGfxDynamicLightsetGChunk = (GfxDynamicLightsetGChunk *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 24i64 * varGfxDynamicLightsetLMData->numGChunkLM);
      v4 = varGfxDynamicLightsetLMData;
      varGfxDynamicLightsetGChunk = v5;
    }
    v6 = varushort;
    if ( v4->chunkGLMBF )
    {
      varushort = AllocPreload_ushort();
      Preload_ushortArray(AtStart, varGfxDynamicLightsetLMData->numGChunkLMBF);
      v4 = varGfxDynamicLightsetLMData;
      varushort = v6;
    }
    if ( v4->chunkWhichLM )
    {
      varushort = AllocPreload_ushort();
      Preload_ushortArray(AtStart, varGfxDynamicLightsetLMData->numLMHave);
      v4 = varGfxDynamicLightsetLMData;
      varushort = v6;
    }
    if ( v4->chunkLMStart )
    {
      v7 = varuint;
      varuint = AllocPreload_uint();
      Preload_uintArray(AtStart, varGfxDynamicLightsetLMData->numLMHave + (varGfxDynamicLightsetLMData->numLMHave != 0));
      varuint = v7;
    }
    DB_PushStreamPos(7u);
    if ( varGfxDynamicLightsetLMData->origTexels )
    {
      v8 = varuint;
      varuint = AllocPreload_uint();
      Preload_uintArray(AtStart, 2 * varGfxDynamicLightsetLMData->numOrigTexels);
      varuint = v8;
    }
    DB_PopStreamPos();
    v9 = varGfxWrappedBuffer;
    varGfxWrappedBuffer = &varGfxDynamicLightsetLMData->origTexelsBuffer;
    Preload_GfxWrappedBuffer(NotAtStart);
    varGfxWrappedBuffer = v9;
    DB_PushStreamPos(7u);
    if ( varGfxDynamicLightsetLMData->origRecords )
    {
      v10 = varuint;
      varuint = AllocPreload_uint();
      Preload_uintArray(AtStart, varGfxDynamicLightsetLMData->numOrigTexels);
      varuint = v10;
    }
    DB_PopStreamPos();
    v11 = varGfxWrappedBuffer;
    varGfxWrappedBuffer = &varGfxDynamicLightsetLMData->origRecordsBuffer;
    Preload_GfxWrappedBuffer(NotAtStart);
    varGfxWrappedBuffer = v11;
    DB_PushStreamPos(7u);
    if ( varGfxDynamicLightsetLMData->bfTexels )
    {
      v12 = varuint;
      varuint = AllocPreload_uint();
      Preload_uintArray(AtStart, 2 * varGfxDynamicLightsetLMData->numBFLMTexels);
      varuint = v12;
    }
    DB_PopStreamPos();
    v13 = varGfxWrappedBuffer;
    varGfxWrappedBuffer = &varGfxDynamicLightsetLMData->bfTexelsBuffer;
    Preload_GfxWrappedBuffer(NotAtStart);
    v14 = varGfxDynamicLightsetLMData;
    varGfxWrappedBuffer = v13;
    if ( varGfxDynamicLightsetLMData->skipRecords )
    {
      v15 = varushort;
      varushort = AllocPreload_ushort();
      Preload_ushortArray(AtStart, varGfxDynamicLightsetLMData->numSkipRecords);
      v14 = varGfxDynamicLightsetLMData;
      varushort = v15;
      v13 = varGfxWrappedBuffer;
    }
    varGfxWrappedBuffer = &v14->skipRecordsBuffer;
    Preload_GfxWrappedBuffer(NotAtStart);
    v16 = varGfxDynamicLightsetLMData;
    varGfxWrappedBuffer = v13;
    if ( varGfxDynamicLightsetLMData->palletteRecords )
    {
      v17 = varuint;
      varuint = AllocPreload_uint();
      Preload_uintArray(AtStart, varGfxDynamicLightsetLMData->numSkipRecords);
      v16 = varGfxDynamicLightsetLMData;
      varuint = v17;
      v13 = varGfxWrappedBuffer;
    }
    varGfxWrappedBuffer = &v16->palletteRecordsBuffer;
    Preload_GfxWrappedBuffer(NotAtStart);
    ++i;
    varGfxWrappedBuffer = v13;
  }
}

/*
==============
Preload_GfxDynamicLightsetLMDataStream
==============
*/
void Preload_GfxDynamicLightsetLMDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxDynamicLightsetLMData *v4; 
  GfxDynamicLightsetGChunk *v5; 
  unsigned __int16 *v6; 
  unsigned int *v7; 
  unsigned int *v8; 
  GfxWrappedBuffer *v9; 
  unsigned int *v10; 
  GfxWrappedBuffer *v11; 
  unsigned int *v12; 
  GfxWrappedBuffer *v13; 
  GfxDynamicLightsetLMData *v14; 
  unsigned __int16 *v15; 
  GfxDynamicLightsetLMData *v16; 
  unsigned int *v17; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 70340, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxDynamicLightsetLMData;
    do
    {
      Load_Stream(AtStart, pos, 0x118ui64);
      v4 = varGfxDynamicLightsetLMData;
      if ( varGfxDynamicLightsetLMData->chunkGLM )
      {
        v5 = varGfxDynamicLightsetGChunk;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        varGfxDynamicLightsetGChunk = (GfxDynamicLightsetGChunk *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 24i64 * varGfxDynamicLightsetLMData->numGChunkLM);
        v4 = varGfxDynamicLightsetLMData;
        varGfxDynamicLightsetGChunk = v5;
      }
      v6 = varushort;
      if ( v4->chunkGLMBF )
      {
        varushort = AllocPreload_ushort();
        Preload_ushortArray(AtStart, varGfxDynamicLightsetLMData->numGChunkLMBF);
        v4 = varGfxDynamicLightsetLMData;
        varushort = v6;
      }
      if ( v4->chunkWhichLM )
      {
        varushort = AllocPreload_ushort();
        Preload_ushortArray(AtStart, varGfxDynamicLightsetLMData->numLMHave);
        v4 = varGfxDynamicLightsetLMData;
        varushort = v6;
      }
      if ( v4->chunkLMStart )
      {
        v7 = varuint;
        varuint = AllocPreload_uint();
        Preload_uintArray(AtStart, varGfxDynamicLightsetLMData->numLMHave + (varGfxDynamicLightsetLMData->numLMHave != 0));
        varuint = v7;
      }
      DB_PushStreamPos(7u);
      if ( varGfxDynamicLightsetLMData->origTexels )
      {
        v8 = varuint;
        varuint = AllocPreload_uint();
        Preload_uintArray(AtStart, 2 * varGfxDynamicLightsetLMData->numOrigTexels);
        varuint = v8;
      }
      DB_PopStreamPos();
      v9 = varGfxWrappedBuffer;
      varGfxWrappedBuffer = &varGfxDynamicLightsetLMData->origTexelsBuffer;
      Preload_GfxWrappedBuffer(NotAtStart);
      varGfxWrappedBuffer = v9;
      DB_PushStreamPos(7u);
      if ( varGfxDynamicLightsetLMData->origRecords )
      {
        v10 = varuint;
        varuint = AllocPreload_uint();
        Preload_uintArray(AtStart, varGfxDynamicLightsetLMData->numOrigTexels);
        varuint = v10;
      }
      DB_PopStreamPos();
      v11 = varGfxWrappedBuffer;
      varGfxWrappedBuffer = &varGfxDynamicLightsetLMData->origRecordsBuffer;
      Preload_GfxWrappedBuffer(NotAtStart);
      varGfxWrappedBuffer = v11;
      DB_PushStreamPos(7u);
      if ( varGfxDynamicLightsetLMData->bfTexels )
      {
        v12 = varuint;
        varuint = AllocPreload_uint();
        Preload_uintArray(AtStart, 2 * varGfxDynamicLightsetLMData->numBFLMTexels);
        varuint = v12;
      }
      DB_PopStreamPos();
      v13 = varGfxWrappedBuffer;
      varGfxWrappedBuffer = &varGfxDynamicLightsetLMData->bfTexelsBuffer;
      Preload_GfxWrappedBuffer(NotAtStart);
      v14 = varGfxDynamicLightsetLMData;
      varGfxWrappedBuffer = v13;
      if ( varGfxDynamicLightsetLMData->skipRecords )
      {
        v15 = varushort;
        varushort = AllocPreload_ushort();
        Preload_ushortArray(AtStart, varGfxDynamicLightsetLMData->numSkipRecords);
        v14 = varGfxDynamicLightsetLMData;
        varushort = v15;
        v13 = varGfxWrappedBuffer;
      }
      varGfxWrappedBuffer = &v14->skipRecordsBuffer;
      Preload_GfxWrappedBuffer(NotAtStart);
      v16 = varGfxDynamicLightsetLMData;
      varGfxWrappedBuffer = v13;
      if ( varGfxDynamicLightsetLMData->palletteRecords )
      {
        v17 = varuint;
        varuint = AllocPreload_uint();
        Preload_uintArray(AtStart, varGfxDynamicLightsetLMData->numSkipRecords);
        v16 = varGfxDynamicLightsetLMData;
        varuint = v17;
        v13 = varGfxWrappedBuffer;
      }
      varGfxWrappedBuffer = &v16->palletteRecordsBuffer;
      Preload_GfxWrappedBuffer(NotAtStart);
      pos = g_streamPosGlob.pos;
      varGfxDynamicLightsetLMData = (GfxDynamicLightsetLMData *)g_streamPosGlob.pos;
      varGfxWrappedBuffer = v13;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxDynamicLightsetLightInfo
==============
*/
void Preload_GfxDynamicLightsetLightInfo(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxDynamicLightsetLightInfo, 0x1Cui64);
}

/*
==============
Preload_GfxDynamicLightsetLightInfoArray
==============
*/
void Preload_GfxDynamicLightsetLightInfoArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxDynamicLightsetLightInfo, 28 * count);
}

/*
==============
Preload_GfxDynamicLightsetLightInfoStream
==============
*/
void Preload_GfxDynamicLightsetLightInfoStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 68219, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxDynamicLightsetLightInfo;
    do
    {
      Load_Stream(AtStart, pos, 0x1Cui64);
      pos = g_streamPosGlob.pos;
      varGfxDynamicLightsetLightInfo = (GfxDynamicLightsetLightInfo *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxDynamicLightsetPortalGIData
==============
*/
void Preload_GfxDynamicLightsetPortalGIData(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxDynamicLightsetPortalGIData, 0x24ui64);
}

/*
==============
Preload_GfxDynamicLightsetPortalGIDataArray
==============
*/
void Preload_GfxDynamicLightsetPortalGIDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxDynamicLightsetPortalGIData, 36 * count);
}

/*
==============
Preload_GfxDynamicLightsetPortalGIDataStream
==============
*/
void Preload_GfxDynamicLightsetPortalGIDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 68585, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxDynamicLightsetPortalGIData;
    do
    {
      Load_Stream(AtStart, pos, 0x24ui64);
      pos = g_streamPosGlob.pos;
      varGfxDynamicLightsetPortalGIData = (GfxDynamicLightsetPortalGIData *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxDynamicLightsetProbeData
==============
*/
void Preload_GfxDynamicLightsetProbeData(const DBStreamStart streamStart)
{
  GfxDynamicLightsetProbeData *v1; 
  GfxDynamicLightsetGChunk *v2; 
  unsigned __int16 *v3; 
  GfxSHCompressedProbeData *v4; 
  GfxWrappedBuffer *v5; 
  GfxSHCompressedProbeData *v6; 
  GfxWrappedBuffer *v7; 
  unsigned __int16 *v8; 
  GfxWrappedBuffer *v9; 
  unsigned int *v10; 
  GfxWrappedBuffer *v11; 
  unsigned int *v12; 
  GfxWrappedBuffer *v13; 

  Load_Stream(streamStart, varGfxDynamicLightsetProbeData, 0x100ui64);
  v1 = varGfxDynamicLightsetProbeData;
  if ( varGfxDynamicLightsetProbeData->chunkG )
  {
    v2 = varGfxDynamicLightsetGChunk;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxDynamicLightsetGChunk = (GfxDynamicLightsetGChunk *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 24i64 * varGfxDynamicLightsetProbeData->numGChunk);
    v1 = varGfxDynamicLightsetProbeData;
    varGfxDynamicLightsetGChunk = v2;
  }
  if ( v1->chunkGBF )
  {
    v3 = varushort;
    varushort = AllocPreload_ushort();
    Preload_ushortArray(AtStart, varGfxDynamicLightsetProbeData->numGChunkBF);
    varushort = v3;
  }
  DB_PushStreamPos(7u);
  if ( varGfxDynamicLightsetProbeData->origProbes )
  {
    v4 = varGfxSHCompressedProbeData;
    DB_PatchMem_FixStreamAlignment(0x1Fui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxSHCompressedProbeData = (GfxSHCompressedProbeData *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 32i64 * varGfxDynamicLightsetProbeData->numOrigProbes);
    varGfxSHCompressedProbeData = v4;
  }
  DB_PopStreamPos();
  v5 = varGfxWrappedBuffer;
  varGfxWrappedBuffer = &varGfxDynamicLightsetProbeData->origProbesBuffer;
  Preload_GfxWrappedBuffer(NotAtStart);
  varGfxWrappedBuffer = v5;
  DB_PushStreamPos(7u);
  if ( varGfxDynamicLightsetProbeData->bfProbes )
  {
    v6 = varGfxSHCompressedProbeData;
    DB_PatchMem_FixStreamAlignment(0x1Fui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxSHCompressedProbeData = (GfxSHCompressedProbeData *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 32i64 * varGfxDynamicLightsetProbeData->numBFProbes);
    varGfxSHCompressedProbeData = v6;
  }
  DB_PopStreamPos();
  v7 = varGfxWrappedBuffer;
  varGfxWrappedBuffer = &varGfxDynamicLightsetProbeData->bfProbesBuffer;
  Preload_GfxWrappedBuffer(NotAtStart);
  varGfxWrappedBuffer = v7;
  DB_PushStreamPos(7u);
  if ( varGfxDynamicLightsetProbeData->skipRecords )
  {
    v8 = varushort;
    varushort = AllocPreload_ushort();
    Preload_ushortArray(AtStart, varGfxDynamicLightsetProbeData->numSkipRecords);
    varushort = v8;
  }
  DB_PopStreamPos();
  v9 = varGfxWrappedBuffer;
  varGfxWrappedBuffer = &varGfxDynamicLightsetProbeData->skipRecordsBuffer;
  Preload_GfxWrappedBuffer(NotAtStart);
  varGfxWrappedBuffer = v9;
  DB_PushStreamPos(7u);
  if ( varGfxDynamicLightsetProbeData->palletteRecords )
  {
    v10 = varuint;
    varuint = AllocPreload_uint();
    Preload_uintArray(AtStart, varGfxDynamicLightsetProbeData->numSkipRecords);
    varuint = v10;
  }
  DB_PopStreamPos();
  v11 = varGfxWrappedBuffer;
  varGfxWrappedBuffer = &varGfxDynamicLightsetProbeData->palletteRecordsBuffer;
  Preload_GfxWrappedBuffer(NotAtStart);
  varGfxWrappedBuffer = v11;
  DB_PushStreamPos(7u);
  if ( varGfxDynamicLightsetProbeData->tempRemap )
  {
    v12 = varuint;
    varuint = AllocPreload_uint();
    Preload_uintArray(AtStart, varGfxDynamicLightsetProbeData->numOrigProbes);
    varuint = v12;
  }
  DB_PopStreamPos();
  v13 = varGfxWrappedBuffer;
  varGfxWrappedBuffer = &varGfxDynamicLightsetProbeData->tempRemapBuffer;
  Preload_GfxWrappedBuffer(NotAtStart);
  varGfxWrappedBuffer = v13;
}

/*
==============
Preload_GfxDynamicLightsetProbeDataArray
==============
*/
void Preload_GfxDynamicLightsetProbeDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxDynamicLightsetProbeData *i; 
  GfxDynamicLightsetProbeData *v4; 
  GfxDynamicLightsetGChunk *v5; 
  unsigned __int16 *v6; 
  GfxSHCompressedProbeData *v7; 
  GfxWrappedBuffer *v8; 
  GfxSHCompressedProbeData *v9; 
  GfxWrappedBuffer *v10; 
  unsigned __int16 *v11; 
  GfxWrappedBuffer *v12; 
  unsigned int *v13; 
  GfxWrappedBuffer *v14; 
  unsigned int *v15; 
  GfxWrappedBuffer *v16; 

  v2 = count;
  Load_Stream(streamStart, varGfxDynamicLightsetProbeData, count << 8);
  for ( i = varGfxDynamicLightsetProbeData; v2; --v2 )
  {
    varGfxDynamicLightsetProbeData = i;
    Load_Stream(NotAtStart, i, 0x100ui64);
    v4 = varGfxDynamicLightsetProbeData;
    if ( varGfxDynamicLightsetProbeData->chunkG )
    {
      v5 = varGfxDynamicLightsetGChunk;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      varGfxDynamicLightsetGChunk = (GfxDynamicLightsetGChunk *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 24i64 * varGfxDynamicLightsetProbeData->numGChunk);
      v4 = varGfxDynamicLightsetProbeData;
      varGfxDynamicLightsetGChunk = v5;
    }
    if ( v4->chunkGBF )
    {
      v6 = varushort;
      varushort = AllocPreload_ushort();
      Preload_ushortArray(AtStart, varGfxDynamicLightsetProbeData->numGChunkBF);
      varushort = v6;
    }
    DB_PushStreamPos(7u);
    if ( varGfxDynamicLightsetProbeData->origProbes )
    {
      v7 = varGfxSHCompressedProbeData;
      DB_PatchMem_FixStreamAlignment(0x1Fui64);
      DB_CheckCanIncStreamPos(0i64);
      varGfxSHCompressedProbeData = (GfxSHCompressedProbeData *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 32i64 * varGfxDynamicLightsetProbeData->numOrigProbes);
      varGfxSHCompressedProbeData = v7;
    }
    DB_PopStreamPos();
    v8 = varGfxWrappedBuffer;
    varGfxWrappedBuffer = &varGfxDynamicLightsetProbeData->origProbesBuffer;
    Preload_GfxWrappedBuffer(NotAtStart);
    varGfxWrappedBuffer = v8;
    DB_PushStreamPos(7u);
    if ( varGfxDynamicLightsetProbeData->bfProbes )
    {
      v9 = varGfxSHCompressedProbeData;
      DB_PatchMem_FixStreamAlignment(0x1Fui64);
      DB_CheckCanIncStreamPos(0i64);
      varGfxSHCompressedProbeData = (GfxSHCompressedProbeData *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 32i64 * varGfxDynamicLightsetProbeData->numBFProbes);
      varGfxSHCompressedProbeData = v9;
    }
    DB_PopStreamPos();
    v10 = varGfxWrappedBuffer;
    varGfxWrappedBuffer = &varGfxDynamicLightsetProbeData->bfProbesBuffer;
    Preload_GfxWrappedBuffer(NotAtStart);
    varGfxWrappedBuffer = v10;
    DB_PushStreamPos(7u);
    if ( varGfxDynamicLightsetProbeData->skipRecords )
    {
      v11 = varushort;
      varushort = AllocPreload_ushort();
      Preload_ushortArray(AtStart, varGfxDynamicLightsetProbeData->numSkipRecords);
      varushort = v11;
    }
    DB_PopStreamPos();
    v12 = varGfxWrappedBuffer;
    varGfxWrappedBuffer = &varGfxDynamicLightsetProbeData->skipRecordsBuffer;
    Preload_GfxWrappedBuffer(NotAtStart);
    varGfxWrappedBuffer = v12;
    DB_PushStreamPos(7u);
    if ( varGfxDynamicLightsetProbeData->palletteRecords )
    {
      v13 = varuint;
      varuint = AllocPreload_uint();
      Preload_uintArray(AtStart, varGfxDynamicLightsetProbeData->numSkipRecords);
      varuint = v13;
    }
    DB_PopStreamPos();
    v14 = varGfxWrappedBuffer;
    varGfxWrappedBuffer = &varGfxDynamicLightsetProbeData->palletteRecordsBuffer;
    Preload_GfxWrappedBuffer(NotAtStart);
    varGfxWrappedBuffer = v14;
    DB_PushStreamPos(7u);
    if ( varGfxDynamicLightsetProbeData->tempRemap )
    {
      v15 = varuint;
      varuint = AllocPreload_uint();
      Preload_uintArray(AtStart, varGfxDynamicLightsetProbeData->numOrigProbes);
      varuint = v15;
    }
    DB_PopStreamPos();
    v16 = varGfxWrappedBuffer;
    varGfxWrappedBuffer = &varGfxDynamicLightsetProbeData->tempRemapBuffer;
    Preload_GfxWrappedBuffer(NotAtStart);
    ++i;
    varGfxWrappedBuffer = v16;
  }
}

/*
==============
Preload_GfxDynamicLightsetProbeDataStream
==============
*/
void Preload_GfxDynamicLightsetProbeDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxDynamicLightsetProbeData *v4; 
  GfxDynamicLightsetGChunk *v5; 
  unsigned __int16 *v6; 
  GfxSHCompressedProbeData *v7; 
  GfxWrappedBuffer *v8; 
  GfxSHCompressedProbeData *v9; 
  GfxWrappedBuffer *v10; 
  unsigned __int16 *v11; 
  GfxWrappedBuffer *v12; 
  unsigned int *v13; 
  GfxWrappedBuffer *v14; 
  unsigned int *v15; 
  GfxWrappedBuffer *v16; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 69551, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxDynamicLightsetProbeData;
    do
    {
      Load_Stream(AtStart, pos, 0x100ui64);
      v4 = varGfxDynamicLightsetProbeData;
      if ( varGfxDynamicLightsetProbeData->chunkG )
      {
        v5 = varGfxDynamicLightsetGChunk;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        varGfxDynamicLightsetGChunk = (GfxDynamicLightsetGChunk *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 24i64 * varGfxDynamicLightsetProbeData->numGChunk);
        v4 = varGfxDynamicLightsetProbeData;
        varGfxDynamicLightsetGChunk = v5;
      }
      if ( v4->chunkGBF )
      {
        v6 = varushort;
        varushort = AllocPreload_ushort();
        Preload_ushortArray(AtStart, varGfxDynamicLightsetProbeData->numGChunkBF);
        varushort = v6;
      }
      DB_PushStreamPos(7u);
      if ( varGfxDynamicLightsetProbeData->origProbes )
      {
        v7 = varGfxSHCompressedProbeData;
        DB_PatchMem_FixStreamAlignment(0x1Fui64);
        DB_CheckCanIncStreamPos(0i64);
        varGfxSHCompressedProbeData = (GfxSHCompressedProbeData *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 32i64 * varGfxDynamicLightsetProbeData->numOrigProbes);
        varGfxSHCompressedProbeData = v7;
      }
      DB_PopStreamPos();
      v8 = varGfxWrappedBuffer;
      varGfxWrappedBuffer = &varGfxDynamicLightsetProbeData->origProbesBuffer;
      Preload_GfxWrappedBuffer(NotAtStart);
      varGfxWrappedBuffer = v8;
      DB_PushStreamPos(7u);
      if ( varGfxDynamicLightsetProbeData->bfProbes )
      {
        v9 = varGfxSHCompressedProbeData;
        DB_PatchMem_FixStreamAlignment(0x1Fui64);
        DB_CheckCanIncStreamPos(0i64);
        varGfxSHCompressedProbeData = (GfxSHCompressedProbeData *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 32i64 * varGfxDynamicLightsetProbeData->numBFProbes);
        varGfxSHCompressedProbeData = v9;
      }
      DB_PopStreamPos();
      v10 = varGfxWrappedBuffer;
      varGfxWrappedBuffer = &varGfxDynamicLightsetProbeData->bfProbesBuffer;
      Preload_GfxWrappedBuffer(NotAtStart);
      varGfxWrappedBuffer = v10;
      DB_PushStreamPos(7u);
      if ( varGfxDynamicLightsetProbeData->skipRecords )
      {
        v11 = varushort;
        varushort = AllocPreload_ushort();
        Preload_ushortArray(AtStart, varGfxDynamicLightsetProbeData->numSkipRecords);
        varushort = v11;
      }
      DB_PopStreamPos();
      v12 = varGfxWrappedBuffer;
      varGfxWrappedBuffer = &varGfxDynamicLightsetProbeData->skipRecordsBuffer;
      Preload_GfxWrappedBuffer(NotAtStart);
      varGfxWrappedBuffer = v12;
      DB_PushStreamPos(7u);
      if ( varGfxDynamicLightsetProbeData->palletteRecords )
      {
        v13 = varuint;
        varuint = AllocPreload_uint();
        Preload_uintArray(AtStart, varGfxDynamicLightsetProbeData->numSkipRecords);
        varuint = v13;
      }
      DB_PopStreamPos();
      v14 = varGfxWrappedBuffer;
      varGfxWrappedBuffer = &varGfxDynamicLightsetProbeData->palletteRecordsBuffer;
      Preload_GfxWrappedBuffer(NotAtStart);
      varGfxWrappedBuffer = v14;
      DB_PushStreamPos(7u);
      if ( varGfxDynamicLightsetProbeData->tempRemap )
      {
        v15 = varuint;
        varuint = AllocPreload_uint();
        Preload_uintArray(AtStart, varGfxDynamicLightsetProbeData->numOrigProbes);
        varuint = v15;
      }
      DB_PopStreamPos();
      v16 = varGfxWrappedBuffer;
      varGfxWrappedBuffer = &varGfxDynamicLightsetProbeData->tempRemapBuffer;
      Preload_GfxWrappedBuffer(NotAtStart);
      pos = g_streamPosGlob.pos;
      varGfxDynamicLightsetProbeData = (GfxDynamicLightsetProbeData *)g_streamPosGlob.pos;
      varGfxWrappedBuffer = v16;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxDynamicLightsetProductGIData
==============
*/
void Preload_GfxDynamicLightsetProductGIData(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxDynamicLightsetProductGIData, 4ui64);
}

/*
==============
Preload_GfxDynamicLightsetProductGIDataArray
==============
*/
void Preload_GfxDynamicLightsetProductGIDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxDynamicLightsetProductGIData, 4 * count);
}

/*
==============
Preload_GfxDynamicLightsetProductGIDataStream
==============
*/
void Preload_GfxDynamicLightsetProductGIDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 68684, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxDynamicLightsetProductGIData;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varGfxDynamicLightsetProductGIData = (GfxDynamicLightsetProductGIData *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxDynamicLightsetStream
==============
*/
void Preload_GfxDynamicLightsetStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxDynamicLightset *v4; 
  GfxDynamicLightsetBFData *v5; 
  GfxDynamicLightsetLightInfo *v6; 
  GfxDynamicLightsetPortalGIData *v7; 
  GfxDynamicLightsetProductGIData *v8; 
  GfxDynamicLightsetLMData *v9; 
  GfxDynamicLightsetProbeData *v10; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 70654, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxDynamicLightset;
    do
    {
      Load_Stream(AtStart, pos, 0x260ui64);
      v4 = varGfxDynamicLightset;
      if ( varGfxDynamicLightset->basisFunctions )
      {
        v5 = varGfxDynamicLightsetBFData;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        varGfxDynamicLightsetBFData = (GfxDynamicLightsetBFData *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 32i64 * varGfxDynamicLightset->numBasisFunctions);
        v4 = varGfxDynamicLightset;
        varGfxDynamicLightsetBFData = v5;
      }
      if ( v4->basisFunctionLights )
      {
        v6 = varGfxDynamicLightsetLightInfo;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        varGfxDynamicLightsetLightInfo = (GfxDynamicLightsetLightInfo *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 28i64 * varGfxDynamicLightset->numBasisFunctionPrimaryLights);
        v4 = varGfxDynamicLightset;
        varGfxDynamicLightsetLightInfo = v6;
      }
      if ( v4->portalGIData )
      {
        v7 = varGfxDynamicLightsetPortalGIData;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        varGfxDynamicLightsetPortalGIData = (GfxDynamicLightsetPortalGIData *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 36i64 * varGfxDynamicLightset->numPortalGI);
        v4 = varGfxDynamicLightset;
        varGfxDynamicLightsetPortalGIData = v7;
      }
      if ( v4->productGIData )
      {
        v8 = varGfxDynamicLightsetProductGIData;
        DB_PatchMem_FixStreamAlignment(1ui64);
        DB_CheckCanIncStreamPos(0i64);
        varGfxDynamicLightsetProductGIData = (GfxDynamicLightsetProductGIData *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 4i64 * varGfxDynamicLightset->numProductGI);
        v4 = varGfxDynamicLightset;
        varGfxDynamicLightsetProductGIData = v8;
      }
      v9 = varGfxDynamicLightsetLMData;
      varGfxDynamicLightsetLMData = &v4->lmData;
      Preload_GfxDynamicLightsetLMData(NotAtStart);
      varGfxDynamicLightsetLMData = v9;
      v10 = varGfxDynamicLightsetProbeData;
      varGfxDynamicLightsetProbeData = &varGfxDynamicLightset->lgProbeData;
      Preload_GfxDynamicLightsetProbeData(NotAtStart);
      pos = g_streamPosGlob.pos;
      varGfxDynamicLightset = (GfxDynamicLightset *)g_streamPosGlob.pos;
      varGfxDynamicLightsetProbeData = v10;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxFrustumLights
==============
*/
void Preload_GfxFrustumLights(const DBStreamStart streamStart)
{
  GfxFrustumLights *v1; 
  unsigned int *v2; 
  unsigned __int16 *v3; 
  unsigned __int16 *v4; 
  unsigned __int8 *v5; 
  GfxWrappedBuffer *v6; 

  Load_Stream(streamStart, varGfxFrustumLights, 0x80ui64);
  v1 = varGfxFrustumLights;
  v2 = varuint;
  if ( varGfxFrustumLights->indicesOffsets )
  {
    varuint = AllocPreload_uint();
    Preload_uintArray(AtStart, varGfxFrustumLights->lightCount);
    v1 = varGfxFrustumLights;
    varuint = v2;
  }
  if ( v1->verticesOffsets )
  {
    varuint = AllocPreload_uint();
    Preload_uintArray(AtStart, varGfxFrustumLights->lightCount);
    v1 = varGfxFrustumLights;
    varuint = v2;
  }
  v3 = varushort;
  if ( v1->indicesCounts )
  {
    varushort = AllocPreload_ushort();
    Preload_ushortArray(AtStart, varGfxFrustumLights->lightCount);
    v1 = varGfxFrustumLights;
    varushort = v3;
  }
  if ( v1->verticesCounts )
  {
    varushort = AllocPreload_ushort();
    Preload_ushortArray(AtStart, varGfxFrustumLights->lightCount);
    v1 = varGfxFrustumLights;
    varushort = v3;
  }
  if ( v1->indices )
  {
    v4 = varalignIndBufUShort_t;
    varalignIndBufUShort_t = AllocPreload_alignIndBufUShort_t();
    Preload_alignIndBufUShort_tArray(AtStart, varGfxFrustumLights->totalIndicesCount);
    v1 = varGfxFrustumLights;
    varalignIndBufUShort_t = v4;
  }
  if ( v1->vertices )
  {
    v5 = varalignVertBufByte_t;
    varalignVertBufByte_t = AllocPreload_alignVertBufByte_t();
    Preload_alignVertBufByte_tArray(AtStart, 16i64 * varGfxFrustumLights->totalVerticesCount);
    v1 = varGfxFrustumLights;
    varalignVertBufByte_t = v5;
  }
  v6 = varGfxWrappedBuffer;
  varGfxWrappedBuffer = &v1->indexBuffer;
  Preload_GfxWrappedBuffer(NotAtStart);
  varGfxWrappedBuffer = &varGfxFrustumLights->vertexBuffer;
  Preload_GfxWrappedBuffer(NotAtStart);
  varGfxWrappedBuffer = v6;
}

/*
==============
Preload_GfxFrustumLightsArray
==============
*/
void Preload_GfxFrustumLightsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxFrustumLights *i; 
  GfxFrustumLights *v4; 
  unsigned int *v5; 
  unsigned __int16 *v6; 
  unsigned __int16 *v7; 
  unsigned __int8 *v8; 
  GfxWrappedBuffer *v9; 

  v2 = count;
  Load_Stream(streamStart, varGfxFrustumLights, count << 7);
  for ( i = varGfxFrustumLights; v2; --v2 )
  {
    varGfxFrustumLights = i;
    Load_Stream(NotAtStart, i, 0x80ui64);
    v4 = varGfxFrustumLights;
    v5 = varuint;
    if ( varGfxFrustumLights->indicesOffsets )
    {
      varuint = AllocPreload_uint();
      Preload_uintArray(AtStart, varGfxFrustumLights->lightCount);
      v4 = varGfxFrustumLights;
      varuint = v5;
    }
    if ( v4->verticesOffsets )
    {
      varuint = AllocPreload_uint();
      Preload_uintArray(AtStart, varGfxFrustumLights->lightCount);
      v4 = varGfxFrustumLights;
      varuint = v5;
    }
    v6 = varushort;
    if ( v4->indicesCounts )
    {
      varushort = AllocPreload_ushort();
      Preload_ushortArray(AtStart, varGfxFrustumLights->lightCount);
      v4 = varGfxFrustumLights;
      varushort = v6;
    }
    if ( v4->verticesCounts )
    {
      varushort = AllocPreload_ushort();
      Preload_ushortArray(AtStart, varGfxFrustumLights->lightCount);
      v4 = varGfxFrustumLights;
      varushort = v6;
    }
    if ( v4->indices )
    {
      v7 = varalignIndBufUShort_t;
      varalignIndBufUShort_t = AllocPreload_alignIndBufUShort_t();
      Preload_alignIndBufUShort_tArray(AtStart, varGfxFrustumLights->totalIndicesCount);
      v4 = varGfxFrustumLights;
      varalignIndBufUShort_t = v7;
    }
    if ( v4->vertices )
    {
      v8 = varalignVertBufByte_t;
      varalignVertBufByte_t = AllocPreload_alignVertBufByte_t();
      Preload_alignVertBufByte_tArray(AtStart, 16i64 * varGfxFrustumLights->totalVerticesCount);
      v4 = varGfxFrustumLights;
      varalignVertBufByte_t = v8;
    }
    v9 = varGfxWrappedBuffer;
    varGfxWrappedBuffer = &v4->indexBuffer;
    Preload_GfxWrappedBuffer(NotAtStart);
    varGfxWrappedBuffer = &varGfxFrustumLights->vertexBuffer;
    Preload_GfxWrappedBuffer(NotAtStart);
    ++i;
    varGfxWrappedBuffer = v9;
  }
}

/*
==============
Preload_GfxFrustumLightsStream
==============
*/
void Preload_GfxFrustumLightsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxFrustumLights *v4; 
  unsigned int *v5; 
  unsigned __int16 *v6; 
  unsigned __int16 *v7; 
  unsigned __int8 *v8; 
  GfxWrappedBuffer *v9; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 67587, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxFrustumLights;
    do
    {
      Load_Stream(AtStart, pos, 0x80ui64);
      v4 = varGfxFrustumLights;
      v5 = varuint;
      if ( varGfxFrustumLights->indicesOffsets )
      {
        varuint = AllocPreload_uint();
        Preload_uintArray(AtStart, varGfxFrustumLights->lightCount);
        v4 = varGfxFrustumLights;
        varuint = v5;
      }
      if ( v4->verticesOffsets )
      {
        varuint = AllocPreload_uint();
        Preload_uintArray(AtStart, varGfxFrustumLights->lightCount);
        v4 = varGfxFrustumLights;
        varuint = v5;
      }
      v6 = varushort;
      if ( v4->indicesCounts )
      {
        varushort = AllocPreload_ushort();
        Preload_ushortArray(AtStart, varGfxFrustumLights->lightCount);
        v4 = varGfxFrustumLights;
        varushort = v6;
      }
      if ( v4->verticesCounts )
      {
        varushort = AllocPreload_ushort();
        Preload_ushortArray(AtStart, varGfxFrustumLights->lightCount);
        v4 = varGfxFrustumLights;
        varushort = v6;
      }
      if ( v4->indices )
      {
        v7 = varalignIndBufUShort_t;
        varalignIndBufUShort_t = AllocPreload_alignIndBufUShort_t();
        Preload_alignIndBufUShort_tArray(AtStart, varGfxFrustumLights->totalIndicesCount);
        v4 = varGfxFrustumLights;
        varalignIndBufUShort_t = v7;
      }
      if ( v4->vertices )
      {
        v8 = varalignVertBufByte_t;
        varalignVertBufByte_t = AllocPreload_alignVertBufByte_t();
        Preload_alignVertBufByte_tArray(AtStart, 16i64 * varGfxFrustumLights->totalVerticesCount);
        v4 = varGfxFrustumLights;
        varalignVertBufByte_t = v8;
      }
      v9 = varGfxWrappedBuffer;
      varGfxWrappedBuffer = &v4->indexBuffer;
      Preload_GfxWrappedBuffer(NotAtStart);
      varGfxWrappedBuffer = &varGfxFrustumLights->vertexBuffer;
      Preload_GfxWrappedBuffer(NotAtStart);
      pos = g_streamPosGlob.pos;
      varGfxFrustumLights = (GfxFrustumLights *)g_streamPosGlob.pos;
      varGfxWrappedBuffer = v9;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxGpuDynLightsetsLGVReference
==============
*/
void Preload_GfxGpuDynLightsetsLGVReference(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxGpuDynLightsetsLGVReference, 8ui64);
}

/*
==============
Preload_GfxGpuDynLightsetsLGVReferenceArray
==============
*/
void Preload_GfxGpuDynLightsetsLGVReferenceArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxGpuDynLightsetsLGVReference, 8 * count);
}

/*
==============
Preload_GfxGpuDynLightsetsLGVReferenceStream
==============
*/
void Preload_GfxGpuDynLightsetsLGVReferenceStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 69650, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxGpuDynLightsetsLGVReference;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      pos = g_streamPosGlob.pos;
      varGfxGpuDynLightsetsLGVReference = (GfxGpuDynLightsetsLGVReference *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxGpuLightGrid
==============
*/
void Preload_GfxGpuLightGrid(const DBStreamStart streamStart)
{
  GfxSHCompressedProbeData *v1; 
  GfxWrappedRWBuffer *v2; 
  vec3_t *v3; 
  GfxWrappedBuffer *v4; 
  GfxGpuLightGrid *v5; 
  GfxGpuLightGridZone *v6; 
  GfxGpuLightGridVoxelTree *v7; 
  __int64 zoneCount; 
  GfxGpuLightGridVoxelTree *i; 
  GfxGpuLightGridTetrahedron *v10; 
  GfxWrappedBuffer *v11; 
  GfxGpuLightGridTetrahedronNeighbors *v12; 
  GfxWrappedBuffer *v13; 
  GfxGpuLightGridTetrahedronVisibility *v14; 
  GfxWrappedBuffer *v15; 
  GfxGpuLightGridVoxelStartTetrahedron *v16; 
  GfxWrappedBuffer *v17; 

  Load_Stream(streamStart, varGfxGpuLightGrid, 0x1B8ui64);
  DB_PushStreamPos(7u);
  if ( varGfxGpuLightGrid->probes )
  {
    v1 = varGfxSHCompressedProbeData;
    DB_PatchMem_FixStreamAlignment(0x1Fui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxSHCompressedProbeData = (GfxSHCompressedProbeData *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 32i64 * varGfxGpuLightGrid->probeCount);
    varGfxSHCompressedProbeData = v1;
  }
  DB_PopStreamPos();
  v2 = varGfxWrappedRWBuffer;
  varGfxWrappedRWBuffer = &varGfxGpuLightGrid->probesBuffer;
  Preload_GfxWrappedRWBuffer(NotAtStart);
  varGfxWrappedRWBuffer = v2;
  DB_PushStreamPos(7u);
  if ( varGfxGpuLightGrid->probePositions )
  {
    v3 = varalignVertBufVec3_t;
    varalignVertBufVec3_t = AllocPreload_alignVertBufVec3_t();
    Preload_alignVertBufVec3_tArray(AtStart, varGfxGpuLightGrid->probeCount);
    varalignVertBufVec3_t = v3;
  }
  DB_PopStreamPos();
  v4 = varGfxWrappedBuffer;
  varGfxWrappedBuffer = &varGfxGpuLightGrid->probePositionsBuffer;
  Preload_GfxWrappedBuffer(NotAtStart);
  v5 = varGfxGpuLightGrid;
  varGfxWrappedBuffer = v4;
  if ( varGfxGpuLightGrid->zones )
  {
    v6 = varGfxGpuLightGridZone;
    DB_PatchMem_FixStreamAlignment(0x3Fui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxGpuLightGridZone = (GfxGpuLightGridZone *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 92i64 * varGfxGpuLightGrid->zoneCount);
    v5 = varGfxGpuLightGrid;
    varGfxGpuLightGridZone = v6;
  }
  if ( v5->zoneVoxelTrees )
  {
    v7 = varGfxGpuLightGridVoxelTree;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxGpuLightGridVoxelTree = (GfxGpuLightGridVoxelTree *)g_streamPosGlob.pos;
    zoneCount = varGfxGpuLightGrid->zoneCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, zoneCount << 7);
    for ( i = varGfxGpuLightGridVoxelTree; zoneCount; --zoneCount )
    {
      varGfxGpuLightGridVoxelTree = i;
      Preload_GfxGpuLightGridVoxelTree(NotAtStart);
      ++i;
    }
    varGfxGpuLightGridVoxelTree = v7;
  }
  DB_PushStreamPos(7u);
  if ( varGfxGpuLightGrid->tetrahedrons )
  {
    v10 = varGfxGpuLightGridTetrahedron;
    DB_PatchMem_FixStreamAlignment(0x3Fui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxGpuLightGridTetrahedron = (GfxGpuLightGridTetrahedron *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varGfxGpuLightGrid->tetrahedronCount);
    varGfxGpuLightGridTetrahedron = v10;
  }
  DB_PopStreamPos();
  v11 = varGfxWrappedBuffer;
  varGfxWrappedBuffer = &varGfxGpuLightGrid->tetrahedronBuffer;
  Preload_GfxWrappedBuffer(NotAtStart);
  varGfxWrappedBuffer = v11;
  DB_PushStreamPos(7u);
  if ( varGfxGpuLightGrid->tetrahedronNeighbors )
  {
    v12 = varGfxGpuLightGridTetrahedronNeighbors;
    DB_PatchMem_FixStreamAlignment(0x3Fui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxGpuLightGridTetrahedronNeighbors = (GfxGpuLightGridTetrahedronNeighbors *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varGfxGpuLightGrid->tetrahedronCount);
    varGfxGpuLightGridTetrahedronNeighbors = v12;
  }
  DB_PopStreamPos();
  v13 = varGfxWrappedBuffer;
  varGfxWrappedBuffer = &varGfxGpuLightGrid->tetrahedronNeighborsBuffer;
  Preload_GfxWrappedBuffer(NotAtStart);
  varGfxWrappedBuffer = v13;
  DB_PushStreamPos(7u);
  if ( varGfxGpuLightGrid->tetrahedronVisibility )
  {
    v14 = varGfxGpuLightGridTetrahedronVisibility;
    DB_PatchMem_FixStreamAlignment(0x3Fui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxGpuLightGridTetrahedronVisibility = (GfxGpuLightGridTetrahedronVisibility *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, (unsigned __int64)varGfxGpuLightGrid->tetrahedronCountVisible << 6);
    varGfxGpuLightGridTetrahedronVisibility = v14;
  }
  DB_PopStreamPos();
  v15 = varGfxWrappedBuffer;
  varGfxWrappedBuffer = &varGfxGpuLightGrid->tetrahedronVisibilityBuffer;
  Preload_GfxWrappedBuffer(NotAtStart);
  varGfxWrappedBuffer = v15;
  DB_PushStreamPos(7u);
  if ( varGfxGpuLightGrid->voxelStartTetrahedron )
  {
    v16 = varGfxGpuLightGridVoxelStartTetrahedron;
    DB_PatchMem_FixStreamAlignment(0x3Fui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxGpuLightGridVoxelStartTetrahedron = (GfxGpuLightGridVoxelStartTetrahedron *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 4i64 * varGfxGpuLightGrid->voxelStartTetrahedronCount);
    varGfxGpuLightGridVoxelStartTetrahedron = v16;
  }
  DB_PopStreamPos();
  v17 = varGfxWrappedBuffer;
  varGfxWrappedBuffer = &varGfxGpuLightGrid->voxelStartTetrahedronBuffer;
  Preload_GfxWrappedBuffer(NotAtStart);
  varGfxWrappedBuffer = v17;
}

/*
==============
Preload_GfxGpuLightGridArray
==============
*/
void Preload_GfxGpuLightGridArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxGpuLightGrid *i; 

  v2 = count;
  Load_Stream(streamStart, varGfxGpuLightGrid, 440 * count);
  for ( i = varGfxGpuLightGrid; v2; --v2 )
  {
    varGfxGpuLightGrid = i;
    Preload_GfxGpuLightGrid(NotAtStart);
    ++i;
  }
}

/*
==============
Preload_GfxGpuLightGridStream
==============
*/
void Preload_GfxGpuLightGridStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 56190, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  for ( ; count; --count )
  {
    Preload_GfxGpuLightGrid(AtStart);
    varGfxGpuLightGrid = (GfxGpuLightGrid *)g_streamPosGlob.pos;
  }
}

/*
==============
Preload_GfxGpuLightGridTetrahedron
==============
*/
void Preload_GfxGpuLightGridTetrahedron(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxGpuLightGridTetrahedron, 0x10ui64);
}

/*
==============
Preload_GfxGpuLightGridTetrahedronArray
==============
*/
void Preload_GfxGpuLightGridTetrahedronArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxGpuLightGridTetrahedron, 16 * count);
}

/*
==============
Preload_GfxGpuLightGridTetrahedronNeighbors
==============
*/
void Preload_GfxGpuLightGridTetrahedronNeighbors(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxGpuLightGridTetrahedronNeighbors, 0x10ui64);
}

/*
==============
Preload_GfxGpuLightGridTetrahedronNeighborsArray
==============
*/
void Preload_GfxGpuLightGridTetrahedronNeighborsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxGpuLightGridTetrahedronNeighbors, 16 * count);
}

/*
==============
Preload_GfxGpuLightGridTetrahedronNeighborsStream
==============
*/
void Preload_GfxGpuLightGridTetrahedronNeighborsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 54562, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxGpuLightGridTetrahedronNeighbors;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      pos = g_streamPosGlob.pos;
      varGfxGpuLightGridTetrahedronNeighbors = (GfxGpuLightGridTetrahedronNeighbors *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxGpuLightGridTetrahedronStream
==============
*/
void Preload_GfxGpuLightGridTetrahedronStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 54486, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxGpuLightGridTetrahedron;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      pos = g_streamPosGlob.pos;
      varGfxGpuLightGridTetrahedron = (GfxGpuLightGridTetrahedron *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxGpuLightGridTetrahedronVisibility
==============
*/
void Preload_GfxGpuLightGridTetrahedronVisibility(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxGpuLightGridTetrahedronVisibility, 0x40ui64);
}

/*
==============
Preload_GfxGpuLightGridTetrahedronVisibilityArray
==============
*/
void Preload_GfxGpuLightGridTetrahedronVisibilityArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxGpuLightGridTetrahedronVisibility, count << 6);
}

/*
==============
Preload_GfxGpuLightGridTetrahedronVisibilityStream
==============
*/
void Preload_GfxGpuLightGridTetrahedronVisibilityStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 54638, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxGpuLightGridTetrahedronVisibility;
    do
    {
      Load_Stream(AtStart, pos, 0x40ui64);
      pos = g_streamPosGlob.pos;
      varGfxGpuLightGridTetrahedronVisibility = (GfxGpuLightGridTetrahedronVisibility *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxGpuLightGridTransientData
==============
*/
void Preload_GfxGpuLightGridTransientData(const DBStreamStart streamStart)
{
  GfxGpuLightGridTransientData *v1; 
  GfxGpuLightGrid *v2; 
  GfxStaticModelLightGridVolume *v3; 
  GfxDynamicLightsetLGppZoneInfo *v4; 
  GfxLightGridVolumeAtlasDataTemp **v5; 
  GfxLightGridVolumeAtlasDataTemp *v6; 

  Load_Stream(streamStart, varGfxGpuLightGridTransientData, 0x28ui64);
  v1 = varGfxGpuLightGridTransientData;
  if ( varGfxGpuLightGridTransientData->gpuLightGrid )
  {
    v2 = varGfxGpuLightGrid;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxGpuLightGrid = (GfxGpuLightGrid *)g_streamPosGlob.pos;
    Preload_GfxGpuLightGrid(AtStart);
    v1 = varGfxGpuLightGridTransientData;
    varGfxGpuLightGrid = v2;
  }
  if ( v1->staticModelVolumes )
  {
    v3 = varGfxStaticModelLightGridVolume;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxStaticModelLightGridVolume = (GfxStaticModelLightGridVolume *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, (unsigned __int64)varGfxGpuLightGridTransientData->staticModelVolumeCount << 6);
    v1 = varGfxGpuLightGridTransientData;
    varGfxStaticModelLightGridVolume = v3;
  }
  if ( v1->SMLGppZone )
  {
    v4 = varGfxDynamicLightsetLGppZoneInfo;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxDynamicLightsetLGppZoneInfo = (GfxDynamicLightsetLGppZoneInfo *)g_streamPosGlob.pos;
    Preload_GfxDynamicLightsetLGppZoneInfo(AtStart);
    v1 = varGfxGpuLightGridTransientData;
    varGfxDynamicLightsetLGppZoneInfo = v4;
  }
  v5 = varGfxLightGridVolumeAtlasDataTempPtr;
  varGfxLightGridVolumeAtlasDataTempPtr = &v1->tempLightGridVolumeData;
  Load_Stream(NotAtStart, &v1->tempLightGridVolumeData, 8ui64);
  if ( *varGfxLightGridVolumeAtlasDataTempPtr )
  {
    v6 = varGfxLightGridVolumeAtlasDataTemp;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxLightGridVolumeAtlasDataTemp = (GfxLightGridVolumeAtlasDataTemp *)g_streamPosGlob.pos;
    Preload_GfxLightGridVolumeAtlasDataTemp(AtStart);
    varGfxLightGridVolumeAtlasDataTemp = v6;
  }
  varGfxLightGridVolumeAtlasDataTempPtr = v5;
}

/*
==============
Preload_GfxGpuLightGridTransientDataArray
==============
*/
void Preload_GfxGpuLightGridTransientDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxGpuLightGridTransientData *i; 
  GfxGpuLightGridTransientData *v4; 
  GfxGpuLightGrid *v5; 
  GfxStaticModelLightGridVolume *v6; 
  GfxDynamicLightsetLGppZoneInfo *v7; 
  GfxLightGridVolumeAtlasDataTemp **v8; 
  GfxLightGridVolumeAtlasDataTemp *v9; 

  v2 = count;
  Load_Stream(streamStart, varGfxGpuLightGridTransientData, 40 * count);
  for ( i = varGfxGpuLightGridTransientData; v2; --v2 )
  {
    varGfxGpuLightGridTransientData = i;
    Load_Stream(NotAtStart, i, 0x28ui64);
    v4 = varGfxGpuLightGridTransientData;
    if ( varGfxGpuLightGridTransientData->gpuLightGrid )
    {
      v5 = varGfxGpuLightGrid;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      varGfxGpuLightGrid = (GfxGpuLightGrid *)g_streamPosGlob.pos;
      Preload_GfxGpuLightGrid(AtStart);
      v4 = varGfxGpuLightGridTransientData;
      varGfxGpuLightGrid = v5;
    }
    if ( v4->staticModelVolumes )
    {
      v6 = varGfxStaticModelLightGridVolume;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      varGfxStaticModelLightGridVolume = (GfxStaticModelLightGridVolume *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, (unsigned __int64)varGfxGpuLightGridTransientData->staticModelVolumeCount << 6);
      v4 = varGfxGpuLightGridTransientData;
      varGfxStaticModelLightGridVolume = v6;
    }
    if ( v4->SMLGppZone )
    {
      v7 = varGfxDynamicLightsetLGppZoneInfo;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      varGfxDynamicLightsetLGppZoneInfo = (GfxDynamicLightsetLGppZoneInfo *)g_streamPosGlob.pos;
      Preload_GfxDynamicLightsetLGppZoneInfo(AtStart);
      v4 = varGfxGpuLightGridTransientData;
      varGfxDynamicLightsetLGppZoneInfo = v7;
    }
    v8 = varGfxLightGridVolumeAtlasDataTempPtr;
    varGfxLightGridVolumeAtlasDataTempPtr = &v4->tempLightGridVolumeData;
    Load_Stream(NotAtStart, &v4->tempLightGridVolumeData, 8ui64);
    if ( *varGfxLightGridVolumeAtlasDataTempPtr )
    {
      v9 = varGfxLightGridVolumeAtlasDataTemp;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      varGfxLightGridVolumeAtlasDataTemp = (GfxLightGridVolumeAtlasDataTemp *)g_streamPosGlob.pos;
      Preload_GfxLightGridVolumeAtlasDataTemp(AtStart);
      varGfxLightGridVolumeAtlasDataTemp = v9;
    }
    ++i;
    varGfxLightGridVolumeAtlasDataTempPtr = v8;
  }
}

/*
==============
Preload_GfxGpuLightGridTransientDataStream
==============
*/
void Preload_GfxGpuLightGridTransientDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxGpuLightGridTransientData *v4; 
  GfxGpuLightGrid *v5; 
  GfxStaticModelLightGridVolume *v6; 
  GfxDynamicLightsetLGppZoneInfo *v7; 
  GfxLightGridVolumeAtlasDataTemp **v8; 
  GfxLightGridVolumeAtlasDataTemp *v9; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 61722, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxGpuLightGridTransientData;
    do
    {
      Load_Stream(AtStart, pos, 0x28ui64);
      v4 = varGfxGpuLightGridTransientData;
      if ( varGfxGpuLightGridTransientData->gpuLightGrid )
      {
        v5 = varGfxGpuLightGrid;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varGfxGpuLightGrid = (GfxGpuLightGrid *)g_streamPosGlob.pos;
        Preload_GfxGpuLightGrid(AtStart);
        v4 = varGfxGpuLightGridTransientData;
        varGfxGpuLightGrid = v5;
      }
      if ( v4->staticModelVolumes )
      {
        v6 = varGfxStaticModelLightGridVolume;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        varGfxStaticModelLightGridVolume = (GfxStaticModelLightGridVolume *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, (unsigned __int64)varGfxGpuLightGridTransientData->staticModelVolumeCount << 6);
        v4 = varGfxGpuLightGridTransientData;
        varGfxStaticModelLightGridVolume = v6;
      }
      if ( v4->SMLGppZone )
      {
        v7 = varGfxDynamicLightsetLGppZoneInfo;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varGfxDynamicLightsetLGppZoneInfo = (GfxDynamicLightsetLGppZoneInfo *)g_streamPosGlob.pos;
        Preload_GfxDynamicLightsetLGppZoneInfo(AtStart);
        v4 = varGfxGpuLightGridTransientData;
        varGfxDynamicLightsetLGppZoneInfo = v7;
      }
      v8 = varGfxLightGridVolumeAtlasDataTempPtr;
      varGfxLightGridVolumeAtlasDataTempPtr = &v4->tempLightGridVolumeData;
      Load_Stream(NotAtStart, &v4->tempLightGridVolumeData, 8ui64);
      if ( *varGfxLightGridVolumeAtlasDataTempPtr )
      {
        v9 = varGfxLightGridVolumeAtlasDataTemp;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varGfxLightGridVolumeAtlasDataTemp = (GfxLightGridVolumeAtlasDataTemp *)g_streamPosGlob.pos;
        Preload_GfxLightGridVolumeAtlasDataTemp(AtStart);
        varGfxLightGridVolumeAtlasDataTemp = v9;
      }
      pos = g_streamPosGlob.pos;
      varGfxGpuLightGridTransientData = (GfxGpuLightGridTransientData *)g_streamPosGlob.pos;
      varGfxLightGridVolumeAtlasDataTempPtr = v8;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxGpuLightGridVoxelStartTetrahedron
==============
*/
void Preload_GfxGpuLightGridVoxelStartTetrahedron(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxGpuLightGridVoxelStartTetrahedron, 4ui64);
}

/*
==============
Preload_GfxGpuLightGridVoxelStartTetrahedronArray
==============
*/
void Preload_GfxGpuLightGridVoxelStartTetrahedronArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxGpuLightGridVoxelStartTetrahedron, 4 * count);
}

/*
==============
Preload_GfxGpuLightGridVoxelStartTetrahedronStream
==============
*/
void Preload_GfxGpuLightGridVoxelStartTetrahedronStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 54714, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxGpuLightGridVoxelStartTetrahedron;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varGfxGpuLightGridVoxelStartTetrahedron = (GfxGpuLightGridVoxelStartTetrahedron *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxGpuLightGridVoxelTree
==============
*/
void Preload_GfxGpuLightGridVoxelTree(const DBStreamStart streamStart)
{
  GfxVoxelTreeHeader *v1; 
  GfxVoxelTopDownViewNode *v2; 
  GfxVoxelInternalNode *v3; 
  GfxWrappedBuffer *v4; 

  Load_Stream(streamStart, varGfxGpuLightGridVoxelTree, 0x80ui64);
  DB_PushStreamPos(6u);
  if ( varGfxGpuLightGridVoxelTree->treeHeader )
  {
    v1 = varGfxVoxelTreeHeader;
    DB_PatchMem_FixStreamAlignment(0xFui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxVoxelTreeHeader = (GfxVoxelTreeHeader *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x40ui64);
    varGfxVoxelTreeHeader = v1;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(7u);
  if ( varGfxGpuLightGridVoxelTree->topDownViewNodes )
  {
    v2 = varGfxVoxelTopDownViewNode;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxVoxelTopDownViewNode = (GfxVoxelTopDownViewNode *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 12i64 * varGfxGpuLightGridVoxelTree->topDownViewNodeCount);
    varGfxVoxelTopDownViewNode = v2;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(7u);
  if ( varGfxGpuLightGridVoxelTree->internalNodes )
  {
    v3 = varGfxVoxelInternalNode;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxVoxelInternalNode = (GfxVoxelInternalNode *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varGfxGpuLightGridVoxelTree->internalNodeCount);
    varGfxVoxelInternalNode = v3;
  }
  DB_PopStreamPos();
  v4 = varGfxWrappedBuffer;
  varGfxWrappedBuffer = &varGfxGpuLightGridVoxelTree->treeHeaderBuffer;
  Preload_GfxWrappedBuffer(NotAtStart);
  varGfxWrappedBuffer = &varGfxGpuLightGridVoxelTree->topDownViewNodeBuffer;
  Preload_GfxWrappedBuffer(NotAtStart);
  varGfxWrappedBuffer = &varGfxGpuLightGridVoxelTree->internalNodeBuffer;
  Preload_GfxWrappedBuffer(NotAtStart);
  varGfxWrappedBuffer = v4;
}

/*
==============
Preload_GfxGpuLightGridVoxelTreeArray
==============
*/
void Preload_GfxGpuLightGridVoxelTreeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxGpuLightGridVoxelTree *i; 
  GfxVoxelTreeHeader *v4; 
  GfxVoxelTopDownViewNode *v5; 
  GfxVoxelInternalNode *v6; 
  GfxWrappedBuffer *v7; 

  v2 = count;
  Load_Stream(streamStart, varGfxGpuLightGridVoxelTree, count << 7);
  for ( i = varGfxGpuLightGridVoxelTree; v2; --v2 )
  {
    varGfxGpuLightGridVoxelTree = i;
    Load_Stream(NotAtStart, i, 0x80ui64);
    DB_PushStreamPos(6u);
    if ( varGfxGpuLightGridVoxelTree->treeHeader )
    {
      v4 = varGfxVoxelTreeHeader;
      DB_PatchMem_FixStreamAlignment(0xFui64);
      DB_CheckCanIncStreamPos(0i64);
      varGfxVoxelTreeHeader = (GfxVoxelTreeHeader *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 0x40ui64);
      varGfxVoxelTreeHeader = v4;
    }
    DB_PopStreamPos();
    DB_PushStreamPos(7u);
    if ( varGfxGpuLightGridVoxelTree->topDownViewNodes )
    {
      v5 = varGfxVoxelTopDownViewNode;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      varGfxVoxelTopDownViewNode = (GfxVoxelTopDownViewNode *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 12i64 * varGfxGpuLightGridVoxelTree->topDownViewNodeCount);
      varGfxVoxelTopDownViewNode = v5;
    }
    DB_PopStreamPos();
    DB_PushStreamPos(7u);
    if ( varGfxGpuLightGridVoxelTree->internalNodes )
    {
      v6 = varGfxVoxelInternalNode;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      varGfxVoxelInternalNode = (GfxVoxelInternalNode *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varGfxGpuLightGridVoxelTree->internalNodeCount);
      varGfxVoxelInternalNode = v6;
    }
    DB_PopStreamPos();
    v7 = varGfxWrappedBuffer;
    varGfxWrappedBuffer = &varGfxGpuLightGridVoxelTree->treeHeaderBuffer;
    Preload_GfxWrappedBuffer(NotAtStart);
    varGfxWrappedBuffer = &varGfxGpuLightGridVoxelTree->topDownViewNodeBuffer;
    Preload_GfxWrappedBuffer(NotAtStart);
    varGfxWrappedBuffer = &varGfxGpuLightGridVoxelTree->internalNodeBuffer;
    Preload_GfxWrappedBuffer(NotAtStart);
    ++i;
    varGfxWrappedBuffer = v7;
  }
}

/*
==============
Preload_GfxGpuLightGridVoxelTreeStream
==============
*/
void Preload_GfxGpuLightGridVoxelTreeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxVoxelTreeHeader *v4; 
  GfxVoxelTopDownViewNode *v5; 
  GfxVoxelInternalNode *v6; 
  GfxWrappedBuffer *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 55614, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxGpuLightGridVoxelTree;
    do
    {
      Load_Stream(AtStart, pos, 0x80ui64);
      DB_PushStreamPos(6u);
      if ( varGfxGpuLightGridVoxelTree->treeHeader )
      {
        v4 = varGfxVoxelTreeHeader;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        varGfxVoxelTreeHeader = (GfxVoxelTreeHeader *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x40ui64);
        varGfxVoxelTreeHeader = v4;
      }
      DB_PopStreamPos();
      DB_PushStreamPos(7u);
      if ( varGfxGpuLightGridVoxelTree->topDownViewNodes )
      {
        v5 = varGfxVoxelTopDownViewNode;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        varGfxVoxelTopDownViewNode = (GfxVoxelTopDownViewNode *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 12i64 * varGfxGpuLightGridVoxelTree->topDownViewNodeCount);
        varGfxVoxelTopDownViewNode = v5;
      }
      DB_PopStreamPos();
      DB_PushStreamPos(7u);
      if ( varGfxGpuLightGridVoxelTree->internalNodes )
      {
        v6 = varGfxVoxelInternalNode;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        varGfxVoxelInternalNode = (GfxVoxelInternalNode *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varGfxGpuLightGridVoxelTree->internalNodeCount);
        varGfxVoxelInternalNode = v6;
      }
      DB_PopStreamPos();
      v7 = varGfxWrappedBuffer;
      varGfxWrappedBuffer = &varGfxGpuLightGridVoxelTree->treeHeaderBuffer;
      Preload_GfxWrappedBuffer(NotAtStart);
      varGfxWrappedBuffer = &varGfxGpuLightGridVoxelTree->topDownViewNodeBuffer;
      Preload_GfxWrappedBuffer(NotAtStart);
      varGfxWrappedBuffer = &varGfxGpuLightGridVoxelTree->internalNodeBuffer;
      Preload_GfxWrappedBuffer(NotAtStart);
      pos = g_streamPosGlob.pos;
      varGfxGpuLightGridVoxelTree = (GfxGpuLightGridVoxelTree *)g_streamPosGlob.pos;
      varGfxWrappedBuffer = v7;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxGpuLightGridZone
==============
*/
void Preload_GfxGpuLightGridZone(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxGpuLightGridZone, 0x5Cui64);
}

/*
==============
Preload_GfxGpuLightGridZoneArray
==============
*/
void Preload_GfxGpuLightGridZoneArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxGpuLightGridZone, 92 * count);
}

/*
==============
Preload_GfxGpuLightGridZoneStream
==============
*/
void Preload_GfxGpuLightGridZoneStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 54410, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxGpuLightGridZone;
    do
    {
      Load_Stream(AtStart, pos, 0x5Cui64);
      pos = g_streamPosGlob.pos;
      varGfxGpuLightGridZone = (GfxGpuLightGridZone *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxHeightfield
==============
*/
void Preload_GfxHeightfield(const DBStreamStart streamStart)
{
  GfxImage **v1; 

  Load_Stream(streamStart, varGfxHeightfield, 0x60ui64);
  v1 = varGfxImagePtr;
  varGfxImagePtr = &varGfxHeightfield->image;
  Preload_GfxImagePtr(NotAtStart);
  varGfxImagePtr = v1;
}

/*
==============
Preload_GfxHeightfieldArray
==============
*/
void Preload_GfxHeightfieldArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxHeightfield *i; 
  GfxImage **v4; 

  v2 = count;
  Load_Stream(streamStart, varGfxHeightfield, 96 * count);
  for ( i = varGfxHeightfield; v2; --v2 )
  {
    varGfxHeightfield = i;
    Load_Stream(NotAtStart, i, 0x60ui64);
    v4 = varGfxImagePtr;
    varGfxImagePtr = &varGfxHeightfield->image;
    Preload_GfxImagePtr(NotAtStart);
    ++i;
    varGfxImagePtr = v4;
  }
}

/*
==============
Preload_GfxHeightfieldStream
==============
*/
void Preload_GfxHeightfieldStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxImage **v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 67097, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxHeightfield;
    do
    {
      Load_Stream(AtStart, pos, 0x60ui64);
      v4 = varGfxImagePtr;
      varGfxImagePtr = &varGfxHeightfield->image;
      Preload_GfxImagePtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varGfxHeightfield = (GfxHeightfield *)g_streamPosGlob.pos;
      varGfxImagePtr = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxLightAABB
==============
*/
void Preload_GfxLightAABB(const DBStreamStart streamStart)
{
  GfxLightAABB *v1; 
  GfxLightAABBNode *v2; 
  unsigned __int16 *v3; 

  Load_Stream(streamStart, varGfxLightAABB, 0x18ui64);
  v1 = varGfxLightAABB;
  if ( varGfxLightAABB->nodeArray )
  {
    v2 = varGfxLightAABBNode;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxLightAABBNode = (GfxLightAABBNode *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 28i64 * varGfxLightAABB->nodeCount);
    v1 = varGfxLightAABB;
    varGfxLightAABBNode = v2;
  }
  if ( v1->lightArray )
  {
    v3 = varushort;
    varushort = AllocPreload_ushort();
    Preload_ushortArray(AtStart, varGfxLightAABB->lightCount);
    varushort = v3;
  }
}

/*
==============
Preload_GfxLightAABBArray
==============
*/
void Preload_GfxLightAABBArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxLightAABB *i; 
  GfxLightAABB *v4; 
  GfxLightAABBNode *v5; 
  unsigned __int16 *v6; 

  v2 = count;
  Load_Stream(streamStart, varGfxLightAABB, 24 * count);
  for ( i = varGfxLightAABB; v2; --v2 )
  {
    varGfxLightAABB = i;
    Load_Stream(NotAtStart, i, 0x18ui64);
    v4 = varGfxLightAABB;
    if ( varGfxLightAABB->nodeArray )
    {
      v5 = varGfxLightAABBNode;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      varGfxLightAABBNode = (GfxLightAABBNode *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 28i64 * varGfxLightAABB->nodeCount);
      v4 = varGfxLightAABB;
      varGfxLightAABBNode = v5;
    }
    if ( v4->lightArray )
    {
      v6 = varushort;
      varushort = AllocPreload_ushort();
      Preload_ushortArray(AtStart, varGfxLightAABB->lightCount);
      varushort = v6;
    }
    ++i;
  }
}

/*
==============
Preload_GfxLightAABBNode
==============
*/
void Preload_GfxLightAABBNode(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxLightAABBNode, 0x1Cui64);
}

/*
==============
Preload_GfxLightAABBNodeArray
==============
*/
void Preload_GfxLightAABBNodeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxLightAABBNode, 28 * count);
}

/*
==============
Preload_GfxLightAABBNodeStream
==============
*/
void Preload_GfxLightAABBNodeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 56623, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxLightAABBNode;
    do
    {
      Load_Stream(AtStart, pos, 0x1Cui64);
      pos = g_streamPosGlob.pos;
      varGfxLightAABBNode = (GfxLightAABBNode *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxLightAABBStream
==============
*/
void Preload_GfxLightAABBStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxLightAABB *v4; 
  GfxLightAABBNode *v5; 
  unsigned __int16 *v6; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 56772, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxLightAABB;
    do
    {
      Load_Stream(AtStart, pos, 0x18ui64);
      v4 = varGfxLightAABB;
      if ( varGfxLightAABB->nodeArray )
      {
        v5 = varGfxLightAABBNode;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        varGfxLightAABBNode = (GfxLightAABBNode *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 28i64 * varGfxLightAABB->nodeCount);
        v4 = varGfxLightAABB;
        varGfxLightAABBNode = v5;
      }
      if ( v4->lightArray )
      {
        v6 = varushort;
        varushort = AllocPreload_ushort();
        Preload_ushortArray(AtStart, varGfxLightAABB->lightCount);
        varushort = v6;
      }
      pos = g_streamPosGlob.pos;
      varGfxLightAABB = (GfxLightAABB *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxLightGridType
==============
*/
void Preload_GfxLightGridType(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxLightGridType, 1ui64);
}

/*
==============
Preload_GfxLightGridTypeArray
==============
*/
void Preload_GfxLightGridTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxLightGridType, count);
}

/*
==============
Preload_GfxLightGridTypeStream
==============
*/
void Preload_GfxLightGridTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 62842, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxLightGridType;
    do
    {
      Load_Stream(AtStart, pos, 1ui64);
      pos = g_streamPosGlob.pos;
      varGfxLightGridType = (GfxLightGridType *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxLightGridVolumeAtlasDataTemp
==============
*/
void Preload_GfxLightGridVolumeAtlasDataTemp(const DBStreamStart streamStart)
{
  GfxImageRaw *v1; 
  LightGridVolumePackingParams *v2; 
  GfxWrappedBuffer *v3; 
  LightGridVolumeTransformParams *v4; 
  GfxWrappedBuffer *v5; 

  Load_Stream(streamStart, varGfxLightGridVolumeAtlasDataTemp, 0xB0ui64);
  v1 = varGfxImageRawGpuTemp;
  varGfxImageRawGpuTemp = varGfxLightGridVolumeAtlasDataTemp->m_textures;
  Preload_GfxImageRawGpuTempArray(NotAtStart, 2ui64);
  varGfxImageRawGpuTemp = v1;
  DB_PushStreamPos(0xAu);
  if ( varGfxLightGridVolumeAtlasDataTemp->m_packingParams )
  {
    v2 = varLightGridVolumePackingParams;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varLightGridVolumePackingParams = (LightGridVolumePackingParams *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 32i64 * varGfxLightGridVolumeAtlasDataTemp->m_numVolumes);
    varLightGridVolumePackingParams = v2;
  }
  DB_PopStreamPos();
  v3 = varGfxWrappedBuffer;
  varGfxWrappedBuffer = &varGfxLightGridVolumeAtlasDataTemp->m_packingParamsBuffer;
  Preload_GfxWrappedBuffer(NotAtStart);
  varGfxWrappedBuffer = v3;
  DB_PushStreamPos(0xAu);
  if ( varGfxLightGridVolumeAtlasDataTemp->m_transformParams )
  {
    v4 = varLightGridVolumeTransformParams;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varLightGridVolumeTransformParams = (LightGridVolumeTransformParams *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, (unsigned __int64)varGfxLightGridVolumeAtlasDataTemp->m_numVolumes << 6);
    varLightGridVolumeTransformParams = v4;
  }
  DB_PopStreamPos();
  v5 = varGfxWrappedBuffer;
  varGfxWrappedBuffer = &varGfxLightGridVolumeAtlasDataTemp->m_transformParamsBuffer;
  Preload_GfxWrappedBuffer(NotAtStart);
  varGfxWrappedBuffer = v5;
}

/*
==============
Preload_GfxLightGridVolumeAtlasDataTempArray
==============
*/
void Preload_GfxLightGridVolumeAtlasDataTempArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxLightGridVolumeAtlasDataTemp *i; 
  GfxImageRaw *v4; 
  LightGridVolumePackingParams *v5; 
  GfxWrappedBuffer *v6; 
  LightGridVolumeTransformParams *v7; 
  GfxWrappedBuffer *v8; 

  v2 = count;
  Load_Stream(streamStart, varGfxLightGridVolumeAtlasDataTemp, 176 * count);
  for ( i = varGfxLightGridVolumeAtlasDataTemp; v2; --v2 )
  {
    varGfxLightGridVolumeAtlasDataTemp = i;
    Load_Stream(NotAtStart, i, 0xB0ui64);
    v4 = varGfxImageRawGpuTemp;
    varGfxImageRawGpuTemp = varGfxLightGridVolumeAtlasDataTemp->m_textures;
    Preload_GfxImageRawGpuTempArray(NotAtStart, 2ui64);
    varGfxImageRawGpuTemp = v4;
    DB_PushStreamPos(0xAu);
    if ( varGfxLightGridVolumeAtlasDataTemp->m_packingParams )
    {
      v5 = varLightGridVolumePackingParams;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      varLightGridVolumePackingParams = (LightGridVolumePackingParams *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 32i64 * varGfxLightGridVolumeAtlasDataTemp->m_numVolumes);
      varLightGridVolumePackingParams = v5;
    }
    DB_PopStreamPos();
    v6 = varGfxWrappedBuffer;
    varGfxWrappedBuffer = &varGfxLightGridVolumeAtlasDataTemp->m_packingParamsBuffer;
    Preload_GfxWrappedBuffer(NotAtStart);
    varGfxWrappedBuffer = v6;
    DB_PushStreamPos(0xAu);
    if ( varGfxLightGridVolumeAtlasDataTemp->m_transformParams )
    {
      v7 = varLightGridVolumeTransformParams;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      varLightGridVolumeTransformParams = (LightGridVolumeTransformParams *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, (unsigned __int64)varGfxLightGridVolumeAtlasDataTemp->m_numVolumes << 6);
      varLightGridVolumeTransformParams = v7;
    }
    DB_PopStreamPos();
    v8 = varGfxWrappedBuffer;
    varGfxWrappedBuffer = &varGfxLightGridVolumeAtlasDataTemp->m_transformParamsBuffer;
    Preload_GfxWrappedBuffer(NotAtStart);
    ++i;
    varGfxWrappedBuffer = v8;
  }
}

/*
==============
Preload_GfxLightGridVolumeAtlasDataTempPtr
==============
*/
void Preload_GfxLightGridVolumeAtlasDataTempPtr(const DBStreamStart streamStart)
{
  GfxLightGridVolumeAtlasDataTemp *v1; 

  Load_Stream(streamStart, varGfxLightGridVolumeAtlasDataTempPtr, 8ui64);
  if ( *varGfxLightGridVolumeAtlasDataTempPtr )
  {
    v1 = varGfxLightGridVolumeAtlasDataTemp;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxLightGridVolumeAtlasDataTemp = (GfxLightGridVolumeAtlasDataTemp *)g_streamPosGlob.pos;
    Preload_GfxLightGridVolumeAtlasDataTemp(AtStart);
    varGfxLightGridVolumeAtlasDataTemp = v1;
  }
}

/*
==============
Preload_GfxLightGridVolumeAtlasDataTempPtrArray
==============
*/
void Preload_GfxLightGridVolumeAtlasDataTempPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxLightGridVolumeAtlasDataTemp **i; 
  GfxLightGridVolumeAtlasDataTemp *v4; 

  v2 = count;
  Load_Stream(streamStart, varGfxLightGridVolumeAtlasDataTempPtr, 8 * count);
  for ( i = varGfxLightGridVolumeAtlasDataTempPtr; v2; --v2 )
  {
    varGfxLightGridVolumeAtlasDataTempPtr = i;
    Load_Stream(NotAtStart, i, 8ui64);
    if ( *varGfxLightGridVolumeAtlasDataTempPtr )
    {
      v4 = varGfxLightGridVolumeAtlasDataTemp;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      varGfxLightGridVolumeAtlasDataTemp = (GfxLightGridVolumeAtlasDataTemp *)g_streamPosGlob.pos;
      Preload_GfxLightGridVolumeAtlasDataTemp(AtStart);
      varGfxLightGridVolumeAtlasDataTemp = v4;
    }
    ++i;
  }
}

/*
==============
Preload_GfxLightGridVolumeAtlasDataTempPtrStream
==============
*/
void Preload_GfxLightGridVolumeAtlasDataTempPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxLightGridVolumeAtlasDataTemp *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 61546, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxLightGridVolumeAtlasDataTempPtr;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      if ( *varGfxLightGridVolumeAtlasDataTempPtr )
      {
        v4 = varGfxLightGridVolumeAtlasDataTemp;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varGfxLightGridVolumeAtlasDataTemp = (GfxLightGridVolumeAtlasDataTemp *)g_streamPosGlob.pos;
        Preload_GfxLightGridVolumeAtlasDataTemp(AtStart);
        varGfxLightGridVolumeAtlasDataTemp = v4;
      }
      pos = g_streamPosGlob.pos;
      varGfxLightGridVolumeAtlasDataTempPtr = (GfxLightGridVolumeAtlasDataTemp **)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxLightGridVolumeAtlasDataTempStream
==============
*/
void Preload_GfxLightGridVolumeAtlasDataTempStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxImageRaw *v4; 
  LightGridVolumePackingParams *v5; 
  GfxWrappedBuffer *v6; 
  LightGridVolumeTransformParams *v7; 
  GfxWrappedBuffer *v8; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 63435, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxLightGridVolumeAtlasDataTemp;
    do
    {
      Load_Stream(AtStart, pos, 0xB0ui64);
      v4 = varGfxImageRawGpuTemp;
      varGfxImageRawGpuTemp = varGfxLightGridVolumeAtlasDataTemp->m_textures;
      Preload_GfxImageRawGpuTempArray(NotAtStart, 2ui64);
      varGfxImageRawGpuTemp = v4;
      DB_PushStreamPos(0xAu);
      if ( varGfxLightGridVolumeAtlasDataTemp->m_packingParams )
      {
        v5 = varLightGridVolumePackingParams;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        varLightGridVolumePackingParams = (LightGridVolumePackingParams *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 32i64 * varGfxLightGridVolumeAtlasDataTemp->m_numVolumes);
        varLightGridVolumePackingParams = v5;
      }
      DB_PopStreamPos();
      v6 = varGfxWrappedBuffer;
      varGfxWrappedBuffer = &varGfxLightGridVolumeAtlasDataTemp->m_packingParamsBuffer;
      Preload_GfxWrappedBuffer(NotAtStart);
      varGfxWrappedBuffer = v6;
      DB_PushStreamPos(0xAu);
      if ( varGfxLightGridVolumeAtlasDataTemp->m_transformParams )
      {
        v7 = varLightGridVolumeTransformParams;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        varLightGridVolumeTransformParams = (LightGridVolumeTransformParams *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, (unsigned __int64)varGfxLightGridVolumeAtlasDataTemp->m_numVolumes << 6);
        varLightGridVolumeTransformParams = v7;
      }
      DB_PopStreamPos();
      v8 = varGfxWrappedBuffer;
      varGfxWrappedBuffer = &varGfxLightGridVolumeAtlasDataTemp->m_transformParamsBuffer;
      Preload_GfxWrappedBuffer(NotAtStart);
      pos = g_streamPosGlob.pos;
      varGfxLightGridVolumeAtlasDataTemp = (GfxLightGridVolumeAtlasDataTemp *)g_streamPosGlob.pos;
      varGfxWrappedBuffer = v8;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxLightViewFrustum
==============
*/
void Preload_GfxLightViewFrustum(const DBStreamStart streamStart)
{
  GfxLightViewFrustum *v1; 
  vec4_t *v2; 
  unsigned __int8 *v3; 
  vec3_t *v4; 

  Load_Stream(streamStart, varGfxLightViewFrustum, 0x20ui64);
  v1 = varGfxLightViewFrustum;
  if ( varGfxLightViewFrustum->planes )
  {
    v2 = varvec4_t;
    varvec4_t = AllocPreload_vec4_t();
    Preload_vec4_tArray(AtStart, varGfxLightViewFrustum->planeCount);
    v1 = varGfxLightViewFrustum;
    varvec4_t = v2;
  }
  if ( v1->indices )
  {
    v3 = varbyte;
    varbyte = AllocPreload_byte();
    Preload_byteArray(AtStart, varGfxLightViewFrustum->indexCount);
    v1 = varGfxLightViewFrustum;
    varbyte = v3;
  }
  if ( v1->vertices )
  {
    v4 = varvec3_t;
    varvec3_t = AllocPreload_vec3_t();
    Preload_vec3_tArray(AtStart, varGfxLightViewFrustum->vertexCount);
    varvec3_t = v4;
  }
}

/*
==============
Preload_GfxLightViewFrustumArray
==============
*/
void Preload_GfxLightViewFrustumArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxLightViewFrustum *i; 
  GfxLightViewFrustum *v4; 
  vec4_t *v5; 
  unsigned __int8 *v6; 
  vec3_t *v7; 

  v2 = count;
  Load_Stream(streamStart, varGfxLightViewFrustum, 32 * count);
  for ( i = varGfxLightViewFrustum; v2; --v2 )
  {
    varGfxLightViewFrustum = i;
    Load_Stream(NotAtStart, i, 0x20ui64);
    v4 = varGfxLightViewFrustum;
    if ( varGfxLightViewFrustum->planes )
    {
      v5 = varvec4_t;
      varvec4_t = AllocPreload_vec4_t();
      Preload_vec4_tArray(AtStart, varGfxLightViewFrustum->planeCount);
      v4 = varGfxLightViewFrustum;
      varvec4_t = v5;
    }
    if ( v4->indices )
    {
      v6 = varbyte;
      varbyte = AllocPreload_byte();
      Preload_byteArray(AtStart, varGfxLightViewFrustum->indexCount);
      v4 = varGfxLightViewFrustum;
      varbyte = v6;
    }
    if ( v4->vertices )
    {
      v7 = varvec3_t;
      varvec3_t = AllocPreload_vec3_t();
      Preload_vec3_tArray(AtStart, varGfxLightViewFrustum->vertexCount);
      varvec3_t = v7;
    }
    ++i;
  }
}

/*
==============
Preload_GfxLightViewFrustumStream
==============
*/
void Preload_GfxLightViewFrustumStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxLightViewFrustum *pos; 
  GfxLightViewFrustum *v4; 
  vec4_t *v5; 
  unsigned __int8 *v6; 
  vec3_t *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 67784, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = varGfxLightViewFrustum;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      v4 = varGfxLightViewFrustum;
      if ( varGfxLightViewFrustum->planes )
      {
        v5 = varvec4_t;
        varvec4_t = AllocPreload_vec4_t();
        Preload_vec4_tArray(AtStart, varGfxLightViewFrustum->planeCount);
        v4 = varGfxLightViewFrustum;
        varvec4_t = v5;
      }
      if ( v4->indices )
      {
        v6 = varbyte;
        varbyte = AllocPreload_byte();
        Preload_byteArray(AtStart, varGfxLightViewFrustum->indexCount);
        v4 = varGfxLightViewFrustum;
        varbyte = v6;
      }
      if ( v4->vertices )
      {
        v7 = varvec3_t;
        varvec3_t = AllocPreload_vec3_t();
        Preload_vec3_tArray(AtStart, varGfxLightViewFrustum->vertexCount);
        varvec3_t = v7;
      }
      pos = (GfxLightViewFrustum *)g_streamPosGlob.pos;
      varGfxLightViewFrustum = (GfxLightViewFrustum *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxLightmapAtlasDataTemp
==============
*/
void Preload_GfxLightmapAtlasDataTemp(const DBStreamStart streamStart)
{
  GfxLightmapRaw *v1; 
  GfxLightmapRaw *v2; 
  __int64 v3; 
  GfxImageRaw *v4; 

  Load_Stream(streamStart, varGfxLightmapAtlasDataTemp, 0xF10ui64);
  v1 = varGfxLightmapRaw;
  varGfxLightmapRaw = varGfxLightmapAtlasDataTemp->lightmaps;
  Load_Stream(NotAtStart, varGfxLightmapAtlasDataTemp->lightmaps, 0xF00ui64);
  v2 = varGfxLightmapRaw;
  v3 = 32i64;
  do
  {
    varGfxLightmapRaw = v2;
    Load_Stream(NotAtStart, v2, 0x78ui64);
    v4 = varGfxImageRawGpuTemp;
    varGfxImageRawGpuTemp = (GfxImageRaw *)varGfxLightmapRaw;
    Preload_GfxImageRawGpuTempArray(NotAtStart, 3ui64);
    ++v2;
    varGfxImageRawGpuTemp = v4;
    --v3;
  }
  while ( v3 );
  varGfxLightmapRaw = v1;
}

/*
==============
Preload_GfxLightmapAtlasDataTempArray
==============
*/
void Preload_GfxLightmapAtlasDataTempArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxLightmapAtlasDataTemp *i; 
  GfxLightmapRaw *v4; 
  GfxLightmapRaw *v5; 
  __int64 v6; 
  GfxImageRaw *v7; 

  v2 = count;
  Load_Stream(streamStart, varGfxLightmapAtlasDataTemp, 3856 * count);
  for ( i = varGfxLightmapAtlasDataTemp; v2; --v2 )
  {
    varGfxLightmapAtlasDataTemp = i;
    Load_Stream(NotAtStart, i, 0xF10ui64);
    v4 = varGfxLightmapRaw;
    varGfxLightmapRaw = varGfxLightmapAtlasDataTemp->lightmaps;
    Load_Stream(NotAtStart, varGfxLightmapAtlasDataTemp->lightmaps, 0xF00ui64);
    v5 = varGfxLightmapRaw;
    v6 = 32i64;
    do
    {
      varGfxLightmapRaw = v5;
      Load_Stream(NotAtStart, v5, 0x78ui64);
      v7 = varGfxImageRawGpuTemp;
      varGfxImageRawGpuTemp = (GfxImageRaw *)varGfxLightmapRaw;
      Preload_GfxImageRawGpuTempArray(NotAtStart, 3ui64);
      ++v5;
      varGfxImageRawGpuTemp = v7;
      --v6;
    }
    while ( v6 );
    ++i;
    varGfxLightmapRaw = v4;
  }
}

/*
==============
Preload_GfxLightmapAtlasDataTempPtr
==============
*/
void Preload_GfxLightmapAtlasDataTempPtr(const DBStreamStart streamStart)
{
  GfxLightmapAtlasDataTemp *v1; 

  Load_Stream(streamStart, varGfxLightmapAtlasDataTempPtr, 8ui64);
  if ( *varGfxLightmapAtlasDataTempPtr )
  {
    v1 = varGfxLightmapAtlasDataTemp;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxLightmapAtlasDataTemp = (GfxLightmapAtlasDataTemp *)g_streamPosGlob.pos;
    Preload_GfxLightmapAtlasDataTemp(AtStart);
    varGfxLightmapAtlasDataTemp = v1;
  }
}

/*
==============
Preload_GfxLightmapAtlasDataTempPtrArray
==============
*/
void Preload_GfxLightmapAtlasDataTempPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxLightmapAtlasDataTemp **i; 
  GfxLightmapAtlasDataTemp *v4; 

  v2 = count;
  Load_Stream(streamStart, varGfxLightmapAtlasDataTempPtr, 8 * count);
  for ( i = varGfxLightmapAtlasDataTempPtr; v2; --v2 )
  {
    varGfxLightmapAtlasDataTempPtr = i;
    Load_Stream(NotAtStart, i, 8ui64);
    if ( *varGfxLightmapAtlasDataTempPtr )
    {
      v4 = varGfxLightmapAtlasDataTemp;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      varGfxLightmapAtlasDataTemp = (GfxLightmapAtlasDataTemp *)g_streamPosGlob.pos;
      Preload_GfxLightmapAtlasDataTemp(AtStart);
      varGfxLightmapAtlasDataTemp = v4;
    }
    ++i;
  }
}

/*
==============
Preload_GfxLightmapAtlasDataTempPtrStream
==============
*/
void Preload_GfxLightmapAtlasDataTempPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxLightmapAtlasDataTemp *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 61468, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxLightmapAtlasDataTempPtr;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      if ( *varGfxLightmapAtlasDataTempPtr )
      {
        v4 = varGfxLightmapAtlasDataTemp;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varGfxLightmapAtlasDataTemp = (GfxLightmapAtlasDataTemp *)g_streamPosGlob.pos;
        Preload_GfxLightmapAtlasDataTemp(AtStart);
        varGfxLightmapAtlasDataTemp = v4;
      }
      pos = g_streamPosGlob.pos;
      varGfxLightmapAtlasDataTempPtr = (GfxLightmapAtlasDataTemp **)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxLightmapAtlasDataTempStream
==============
*/
void Preload_GfxLightmapAtlasDataTempStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxLightmapRaw *v4; 
  GfxLightmapRaw *v5; 
  __int64 v6; 
  GfxImageRaw *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 63162, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxLightmapAtlasDataTemp;
    do
    {
      Load_Stream(AtStart, pos, 0xF10ui64);
      v4 = varGfxLightmapRaw;
      varGfxLightmapRaw = varGfxLightmapAtlasDataTemp->lightmaps;
      Load_Stream(NotAtStart, varGfxLightmapAtlasDataTemp->lightmaps, 0xF00ui64);
      v5 = varGfxLightmapRaw;
      v6 = 32i64;
      do
      {
        varGfxLightmapRaw = v5;
        Load_Stream(NotAtStart, v5, 0x78ui64);
        v7 = varGfxImageRawGpuTemp;
        varGfxImageRawGpuTemp = (GfxImageRaw *)varGfxLightmapRaw;
        Preload_GfxImageRawGpuTempArray(NotAtStart, 3ui64);
        ++v5;
        varGfxImageRawGpuTemp = v7;
        --v6;
      }
      while ( v6 );
      pos = g_streamPosGlob.pos;
      varGfxLightmapAtlasDataTemp = (GfxLightmapAtlasDataTemp *)g_streamPosGlob.pos;
      varGfxLightmapRaw = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxLightmapRaw
==============
*/
void Preload_GfxLightmapRaw(const DBStreamStart streamStart)
{
  GfxImageRaw *v1; 

  Load_Stream(streamStart, varGfxLightmapRaw, 0x78ui64);
  v1 = varGfxImageRawGpuTemp;
  varGfxImageRawGpuTemp = (GfxImageRaw *)varGfxLightmapRaw;
  Preload_GfxImageRawGpuTempArray(NotAtStart, 3ui64);
  varGfxImageRawGpuTemp = v1;
}

/*
==============
Preload_GfxLightmapRawArray
==============
*/
void Preload_GfxLightmapRawArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxLightmapRaw *i; 
  GfxImageRaw *v4; 

  v2 = count;
  Load_Stream(streamStart, varGfxLightmapRaw, 120 * count);
  for ( i = varGfxLightmapRaw; v2; --v2 )
  {
    varGfxLightmapRaw = i;
    Load_Stream(NotAtStart, i, 0x78ui64);
    v4 = varGfxImageRawGpuTemp;
    varGfxImageRawGpuTemp = (GfxImageRaw *)varGfxLightmapRaw;
    Preload_GfxImageRawGpuTempArray(NotAtStart, 3ui64);
    ++i;
    varGfxImageRawGpuTemp = v4;
  }
}

/*
==============
Preload_GfxLightmapRawStream
==============
*/
void Preload_GfxLightmapRawStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxImageRaw *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 62994, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxLightmapRaw;
    do
    {
      Load_Stream(AtStart, pos, 0x78ui64);
      v4 = varGfxImageRawGpuTemp;
      varGfxImageRawGpuTemp = (GfxImageRaw *)varGfxLightmapRaw;
      Preload_GfxImageRawGpuTempArray(NotAtStart, 3ui64);
      pos = g_streamPosGlob.pos;
      varGfxLightmapRaw = (GfxLightmapRaw *)g_streamPosGlob.pos;
      varGfxImageRawGpuTemp = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxLightmapType
==============
*/
void Preload_GfxLightmapType(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxLightmapType, 4ui64);
}

/*
==============
Preload_GfxLightmapTypeArray
==============
*/
void Preload_GfxLightmapTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxLightmapType, 4 * count);
}

/*
==============
Preload_GfxLightmapTypeStream
==============
*/
void Preload_GfxLightmapTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 62918, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxLightmapType;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varGfxLightmapType = (GfxLightmapType *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxMapEntLookup
==============
*/
void Preload_GfxMapEntLookup(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxMapEntLookup, 0x1Cui64);
}

/*
==============
Preload_GfxMapEntLookupArray
==============
*/
void Preload_GfxMapEntLookupArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxMapEntLookup, 28 * count);
}

/*
==============
Preload_GfxMapEntLookupStream
==============
*/
void Preload_GfxMapEntLookupStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 68097, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxMapEntLookup;
    do
    {
      Load_Stream(AtStart, pos, 0x1Cui64);
      pos = g_streamPosGlob.pos;
      varGfxMapEntLookup = (GfxMapEntLookup *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxMayhemSelfVis
==============
*/
void Preload_GfxMayhemSelfVis(const DBStreamStart streamStart)
{
  unsigned __int8 *v1; 
  GfxWrappedRWBuffer *v2; 

  Load_Stream(streamStart, varGfxMayhemSelfVis, 0x48ui64);
  DB_PushStreamPos(7u);
  if ( varGfxMayhemSelfVis->selfVis )
  {
    v1 = varalignCompBufByte_t;
    varalignCompBufByte_t = AllocPreload_alignCompBufByte_t();
    Preload_alignCompBufByte_tArray(AtStart, varGfxMayhemSelfVis->selfVisBufferSize);
    varalignCompBufByte_t = v1;
  }
  DB_PopStreamPos();
  v2 = varGfxWrappedRWBuffer;
  varGfxWrappedRWBuffer = &varGfxMayhemSelfVis->selfVisBuffer;
  Preload_GfxWrappedRWBuffer(NotAtStart);
  varGfxWrappedRWBuffer = v2;
}

/*
==============
Preload_GfxMayhemSelfVisArray
==============
*/
void Preload_GfxMayhemSelfVisArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxMayhemSelfVis *i; 
  unsigned __int8 *v4; 
  GfxWrappedRWBuffer *v5; 

  v2 = count;
  Load_Stream(streamStart, varGfxMayhemSelfVis, 72 * count);
  for ( i = varGfxMayhemSelfVis; v2; --v2 )
  {
    varGfxMayhemSelfVis = i;
    Load_Stream(NotAtStart, i, 0x48ui64);
    DB_PushStreamPos(7u);
    if ( varGfxMayhemSelfVis->selfVis )
    {
      v4 = varalignCompBufByte_t;
      varalignCompBufByte_t = AllocPreload_alignCompBufByte_t();
      Preload_alignCompBufByte_tArray(AtStart, varGfxMayhemSelfVis->selfVisBufferSize);
      varalignCompBufByte_t = v4;
    }
    DB_PopStreamPos();
    v5 = varGfxWrappedRWBuffer;
    varGfxWrappedRWBuffer = &varGfxMayhemSelfVis->selfVisBuffer;
    Preload_GfxWrappedRWBuffer(NotAtStart);
    ++i;
    varGfxWrappedRWBuffer = v5;
  }
}

/*
==============
Preload_GfxMayhemSelfVisStream
==============
*/
void Preload_GfxMayhemSelfVisStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  unsigned __int8 *v4; 
  GfxWrappedRWBuffer *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 70791, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxMayhemSelfVis;
    do
    {
      Load_Stream(AtStart, pos, 0x48ui64);
      DB_PushStreamPos(7u);
      if ( varGfxMayhemSelfVis->selfVis )
      {
        v4 = varalignCompBufByte_t;
        varalignCompBufByte_t = AllocPreload_alignCompBufByte_t();
        Preload_alignCompBufByte_tArray(AtStart, varGfxMayhemSelfVis->selfVisBufferSize);
        varalignCompBufByte_t = v4;
      }
      DB_PopStreamPos();
      v5 = varGfxWrappedRWBuffer;
      varGfxWrappedRWBuffer = &varGfxMayhemSelfVis->selfVisBuffer;
      Preload_GfxWrappedRWBuffer(NotAtStart);
      pos = g_streamPosGlob.pos;
      varGfxMayhemSelfVis = (GfxMayhemSelfVis *)g_streamPosGlob.pos;
      varGfxWrappedRWBuffer = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxModelLightmapInst
==============
*/
void Preload_GfxModelLightmapInst(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxModelLightmapInst, 0x14ui64);
}

/*
==============
Preload_GfxModelLightmapInstArray
==============
*/
void Preload_GfxModelLightmapInstArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxModelLightmapInst, 20 * count);
}

/*
==============
Preload_GfxModelLightmapInstStream
==============
*/
void Preload_GfxModelLightmapInstStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 67929, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxModelLightmapInst;
    do
    {
      Load_Stream(AtStart, pos, 0x14ui64);
      pos = g_streamPosGlob.pos;
      varGfxModelLightmapInst = (GfxModelLightmapInst *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxPortal
==============
*/
void Preload_GfxPortal(const DBStreamStart streamStart)
{
  vec3_t *v1; 

  Load_Stream(streamStart, varGfxPortal, 0x50ui64);
  if ( varGfxPortal->vertices )
  {
    v1 = varvec3_t;
    varvec3_t = AllocPreload_vec3_t();
    Preload_vec3_tArray(AtStart, varGfxPortal->vertexCount);
    varvec3_t = v1;
  }
}

/*
==============
Preload_GfxPortalArray
==============
*/
void Preload_GfxPortalArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxPortal *i; 
  vec3_t *v4; 

  v2 = count;
  Load_Stream(streamStart, varGfxPortal, 80 * count);
  for ( i = varGfxPortal; v2; --v2 )
  {
    varGfxPortal = i;
    Load_Stream(NotAtStart, i, 0x50ui64);
    if ( varGfxPortal->vertices )
    {
      v4 = varvec3_t;
      varvec3_t = AllocPreload_vec3_t();
      Preload_vec3_tArray(AtStart, varGfxPortal->vertexCount);
      varvec3_t = v4;
    }
    ++i;
  }
}

/*
==============
Preload_GfxPortalStream
==============
*/
void Preload_GfxPortalStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  GfxPortal *pos; 
  vec3_t *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 53998, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = varGfxPortal;
    do
    {
      Load_Stream(AtStart, pos, 0x50ui64);
      if ( varGfxPortal->vertices )
      {
        v4 = varvec3_t;
        varvec3_t = AllocPreload_vec3_t();
        Preload_vec3_tArray(AtStart, varGfxPortal->vertexCount);
        varvec3_t = v4;
      }
      pos = (GfxPortal *)g_streamPosGlob.pos;
      varGfxPortal = (GfxPortal *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxPrecomputedSkyIllumination
==============
*/
void Preload_GfxPrecomputedSkyIllumination(const DBStreamStart streamStart)
{
  GfxImage **v1; 

  Load_Stream(streamStart, varGfxPrecomputedSkyIllumination, 0x60ui64);
  v1 = varGfxImagePtr;
  varGfxImagePtr = &varGfxPrecomputedSkyIllumination->detailMask;
  Preload_GfxImagePtr(NotAtStart);
  varGfxImagePtr = &varGfxPrecomputedSkyIllumination->heightMap;
  Preload_GfxImagePtr(NotAtStart);
  varGfxImagePtr = &varGfxPrecomputedSkyIllumination->SVDCoefficient;
  Preload_GfxImagePtr(NotAtStart);
  varGfxImagePtr = &varGfxPrecomputedSkyIllumination->SVDBasis;
  Preload_GfxImagePtr(NotAtStart);
  varGfxImagePtr = v1;
}

/*
==============
Preload_GfxPrecomputedSkyIlluminationArray
==============
*/
void Preload_GfxPrecomputedSkyIlluminationArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxPrecomputedSkyIllumination *i; 
  GfxImage **v4; 

  v2 = count;
  Load_Stream(streamStart, varGfxPrecomputedSkyIllumination, 96 * count);
  for ( i = varGfxPrecomputedSkyIllumination; v2; --v2 )
  {
    varGfxPrecomputedSkyIllumination = i;
    Load_Stream(NotAtStart, i, 0x60ui64);
    v4 = varGfxImagePtr;
    varGfxImagePtr = &varGfxPrecomputedSkyIllumination->detailMask;
    Preload_GfxImagePtr(NotAtStart);
    varGfxImagePtr = &varGfxPrecomputedSkyIllumination->heightMap;
    Preload_GfxImagePtr(NotAtStart);
    varGfxImagePtr = &varGfxPrecomputedSkyIllumination->SVDCoefficient;
    Preload_GfxImagePtr(NotAtStart);
    varGfxImagePtr = &varGfxPrecomputedSkyIllumination->SVDBasis;
    Preload_GfxImagePtr(NotAtStart);
    ++i;
    varGfxImagePtr = v4;
  }
}

/*
==============
Preload_GfxPrecomputedSkyIlluminationStream
==============
*/
void Preload_GfxPrecomputedSkyIlluminationStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxImage **v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 71029, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxPrecomputedSkyIllumination;
    do
    {
      Load_Stream(AtStart, pos, 0x60ui64);
      v4 = varGfxImagePtr;
      varGfxImagePtr = &varGfxPrecomputedSkyIllumination->detailMask;
      Preload_GfxImagePtr(NotAtStart);
      varGfxImagePtr = &varGfxPrecomputedSkyIllumination->heightMap;
      Preload_GfxImagePtr(NotAtStart);
      varGfxImagePtr = &varGfxPrecomputedSkyIllumination->SVDCoefficient;
      Preload_GfxImagePtr(NotAtStart);
      varGfxImagePtr = &varGfxPrecomputedSkyIllumination->SVDBasis;
      Preload_GfxImagePtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varGfxPrecomputedSkyIllumination = (GfxPrecomputedSkyIllumination *)g_streamPosGlob.pos;
      varGfxImagePtr = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxSHCompressedProbeData
==============
*/
void Preload_GfxSHCompressedProbeData(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxSHCompressedProbeData, 0x20ui64);
}

/*
==============
Preload_GfxSHCompressedProbeDataArray
==============
*/
void Preload_GfxSHCompressedProbeDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxSHCompressedProbeData, 32 * count);
}

/*
==============
Preload_GfxSHCompressedProbeDataStream
==============
*/
void Preload_GfxSHCompressedProbeDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 54173, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxSHCompressedProbeData;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      pos = g_streamPosGlob.pos;
      varGfxSHCompressedProbeData = (GfxSHCompressedProbeData *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxSHProbeData
==============
*/
void Preload_GfxSHProbeData(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxSHProbeData, 0x40ui64);
}

/*
==============
Preload_GfxSHProbeDataArray
==============
*/
void Preload_GfxSHProbeDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxSHProbeData, count << 6);
}

/*
==============
Preload_GfxSHProbeDataStream
==============
*/
void Preload_GfxSHProbeDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 54097, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxSHProbeData;
    do
    {
      Load_Stream(AtStart, pos, 0x40ui64);
      pos = g_streamPosGlob.pos;
      varGfxSHProbeData = (GfxSHProbeData *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxSceneDynBrush
==============
*/
void Preload_GfxSceneDynBrush(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxSceneDynBrush, 0xCui64);
}

/*
==============
Preload_GfxSceneDynBrushArray
==============
*/
void Preload_GfxSceneDynBrushArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxSceneDynBrush, 12 * count);
}

/*
==============
Preload_GfxSceneDynBrushStream
==============
*/
void Preload_GfxSceneDynBrushStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 56298, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxSceneDynBrush;
    do
    {
      Load_Stream(AtStart, pos, 0xCui64);
      pos = g_streamPosGlob.pos;
      varGfxSceneDynBrush = (GfxSceneDynBrush *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxSceneDynModel
==============
*/
void Preload_GfxSceneDynModel(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxSceneDynModel, 0xCui64);
}

/*
==============
Preload_GfxSceneDynModelArray
==============
*/
void Preload_GfxSceneDynModelArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxSceneDynModel, 12 * count);
}

/*
==============
Preload_GfxSceneDynModelStream
==============
*/
void Preload_GfxSceneDynModelStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 56244, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxSceneDynModel;
    do
    {
      Load_Stream(AtStart, pos, 0xCui64);
      pos = g_streamPosGlob.pos;
      varGfxSceneDynModel = (GfxSceneDynModel *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxShadowGeometry
==============
*/
void Preload_GfxShadowGeometry(const DBStreamStart streamStart)
{
  GfxShadowGeometry *v1; 
  unsigned int *v2; 
  unsigned __int16 *v3; 

  Load_Stream(streamStart, varGfxShadowGeometry, 0x18ui64);
  v1 = varGfxShadowGeometry;
  if ( varGfxShadowGeometry->sortedSurfIndex )
  {
    v2 = varBSPSURF_COUNT_TYPE;
    varBSPSURF_COUNT_TYPE = AllocPreload_BSPSURF_COUNT_TYPE();
    Preload_BSPSURF_COUNT_TYPEArray(AtStart, varGfxShadowGeometry->surfaceCount);
    v1 = varGfxShadowGeometry;
    varBSPSURF_COUNT_TYPE = v2;
  }
  if ( v1->smodelIndex )
  {
    v3 = varushort;
    varushort = AllocPreload_ushort();
    Preload_ushortArray(AtStart, varGfxShadowGeometry->smodelCount);
    varushort = v3;
  }
}

/*
==============
Preload_GfxShadowGeometryArray
==============
*/
void Preload_GfxShadowGeometryArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxShadowGeometry *i; 
  GfxShadowGeometry *v4; 
  unsigned int *v5; 
  unsigned __int16 *v6; 

  v2 = count;
  Load_Stream(streamStart, varGfxShadowGeometry, 24 * count);
  for ( i = varGfxShadowGeometry; v2; --v2 )
  {
    varGfxShadowGeometry = i;
    Load_Stream(NotAtStart, i, 0x18ui64);
    v4 = varGfxShadowGeometry;
    if ( varGfxShadowGeometry->sortedSurfIndex )
    {
      v5 = varBSPSURF_COUNT_TYPE;
      varBSPSURF_COUNT_TYPE = AllocPreload_BSPSURF_COUNT_TYPE();
      Preload_BSPSURF_COUNT_TYPEArray(AtStart, varGfxShadowGeometry->surfaceCount);
      v4 = varGfxShadowGeometry;
      varBSPSURF_COUNT_TYPE = v5;
    }
    if ( v4->smodelIndex )
    {
      v6 = varushort;
      varushort = AllocPreload_ushort();
      Preload_ushortArray(AtStart, varGfxShadowGeometry->smodelCount);
      varushort = v6;
    }
    ++i;
  }
}

/*
==============
Preload_GfxShadowGeometryStream
==============
*/
void Preload_GfxShadowGeometryStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxShadowGeometry *v4; 
  unsigned int *v5; 
  unsigned __int16 *v6; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 56501, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxShadowGeometry;
    do
    {
      Load_Stream(AtStart, pos, 0x18ui64);
      v4 = varGfxShadowGeometry;
      if ( varGfxShadowGeometry->sortedSurfIndex )
      {
        v5 = varBSPSURF_COUNT_TYPE;
        varBSPSURF_COUNT_TYPE = AllocPreload_BSPSURF_COUNT_TYPE();
        Preload_BSPSURF_COUNT_TYPEArray(AtStart, varGfxShadowGeometry->surfaceCount);
        v4 = varGfxShadowGeometry;
        varBSPSURF_COUNT_TYPE = v5;
      }
      if ( v4->smodelIndex )
      {
        v6 = varushort;
        varushort = AllocPreload_ushort();
        Preload_ushortArray(AtStart, varGfxShadowGeometry->smodelCount);
        varushort = v6;
      }
      pos = g_streamPosGlob.pos;
      varGfxShadowGeometry = (GfxShadowGeometry *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxStaticDecalVolumeMask
==============
*/
void Preload_GfxStaticDecalVolumeMask(const DBStreamStart streamStart)
{
  GfxDecalVolumeMask **v1; 

  Load_Stream(streamStart, varGfxStaticDecalVolumeMask, 8ui64);
  v1 = varGfxDecalVolumeMaskPtr;
  varGfxDecalVolumeMaskPtr = &varGfxStaticDecalVolumeMask->blendMapOverride;
  Preload_GfxDecalVolumeMaskPtr(NotAtStart);
  varGfxDecalVolumeMaskPtr = v1;
}

/*
==============
Preload_GfxStaticDecalVolumeMaskArray
==============
*/
void Preload_GfxStaticDecalVolumeMaskArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxStaticDecalVolumeMask *i; 
  GfxDecalVolumeMask **v4; 

  v2 = count;
  Load_Stream(streamStart, varGfxStaticDecalVolumeMask, 8 * count);
  for ( i = varGfxStaticDecalVolumeMask; v2; --v2 )
  {
    varGfxStaticDecalVolumeMask = i;
    Load_Stream(NotAtStart, i, 8ui64);
    v4 = varGfxDecalVolumeMaskPtr;
    varGfxDecalVolumeMaskPtr = &varGfxStaticDecalVolumeMask->blendMapOverride;
    Preload_GfxDecalVolumeMaskPtr(NotAtStart);
    ++i;
    varGfxDecalVolumeMaskPtr = v4;
  }
}

/*
==============
Preload_GfxStaticDecalVolumeMaskStream
==============
*/
void Preload_GfxStaticDecalVolumeMaskStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxDecalVolumeMask **v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 64586, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxStaticDecalVolumeMask;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      v4 = varGfxDecalVolumeMaskPtr;
      varGfxDecalVolumeMaskPtr = &varGfxStaticDecalVolumeMask->blendMapOverride;
      Preload_GfxDecalVolumeMaskPtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varGfxStaticDecalVolumeMask = (GfxStaticDecalVolumeMask *)g_streamPosGlob.pos;
      varGfxDecalVolumeMaskPtr = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxStaticDecalVolumeMaterial
==============
*/
void Preload_GfxStaticDecalVolumeMaterial(const DBStreamStart streamStart)
{
  Material **v1; 

  Load_Stream(streamStart, varGfxStaticDecalVolumeMaterial, 8ui64);
  v1 = varMaterialHandle;
  varMaterialHandle = &varGfxStaticDecalVolumeMaterial->material;
  Preload_MaterialHandle(NotAtStart);
  varMaterialHandle = v1;
}

/*
==============
Preload_GfxStaticDecalVolumeMaterialArray
==============
*/
void Preload_GfxStaticDecalVolumeMaterialArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxStaticDecalVolumeMaterial *i; 
  Material **v4; 

  v2 = count;
  Load_Stream(streamStart, varGfxStaticDecalVolumeMaterial, 8 * count);
  for ( i = varGfxStaticDecalVolumeMaterial; v2; --v2 )
  {
    varGfxStaticDecalVolumeMaterial = i;
    Load_Stream(NotAtStart, i, 8ui64);
    v4 = varMaterialHandle;
    varMaterialHandle = &varGfxStaticDecalVolumeMaterial->material;
    Preload_MaterialHandle(NotAtStart);
    ++i;
    varMaterialHandle = v4;
  }
}

/*
==============
Preload_GfxStaticDecalVolumeMaterialStream
==============
*/
void Preload_GfxStaticDecalVolumeMaterialStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  Material **v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 64500, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxStaticDecalVolumeMaterial;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      v4 = varMaterialHandle;
      varMaterialHandle = &varGfxStaticDecalVolumeMaterial->material;
      Preload_MaterialHandle(NotAtStart);
      pos = g_streamPosGlob.pos;
      varGfxStaticDecalVolumeMaterial = (GfxStaticDecalVolumeMaterial *)g_streamPosGlob.pos;
      varMaterialHandle = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxStaticDecalVolumePacked
==============
*/
void Preload_GfxStaticDecalVolumePacked(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxStaticDecalVolumePacked, 0x2Cui64);
}

/*
==============
Preload_GfxStaticDecalVolumePackedArray
==============
*/
void Preload_GfxStaticDecalVolumePackedArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxStaticDecalVolumePacked, 44 * count);
}

/*
==============
Preload_GfxStaticDecalVolumePackedStream
==============
*/
void Preload_GfxStaticDecalVolumePackedStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 64414, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxStaticDecalVolumePacked;
    do
    {
      Load_Stream(AtStart, pos, 0x2Cui64);
      pos = g_streamPosGlob.pos;
      varGfxStaticDecalVolumePacked = (GfxStaticDecalVolumePacked *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxStaticDecalVolumeUid
==============
*/
void Preload_GfxStaticDecalVolumeUid(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxStaticDecalVolumeUid, 4ui64);
}

/*
==============
Preload_GfxStaticDecalVolumeUidArray
==============
*/
void Preload_GfxStaticDecalVolumeUidArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxStaticDecalVolumeUid, 4 * count);
}

/*
==============
Preload_GfxStaticDecalVolumeUidStream
==============
*/
void Preload_GfxStaticDecalVolumeUidStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 64672, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxStaticDecalVolumeUid;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varGfxStaticDecalVolumeUid = (GfxStaticDecalVolumeUid *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxStaticModelLightGridVolume
==============
*/
void Preload_GfxStaticModelLightGridVolume(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxStaticModelLightGridVolume, 0x40ui64);
}

/*
==============
Preload_GfxStaticModelLightGridVolumeArray
==============
*/
void Preload_GfxStaticModelLightGridVolumeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxStaticModelLightGridVolume, count << 6);
}

/*
==============
Preload_GfxStaticModelLightGridVolumeFlags
==============
*/
void Preload_GfxStaticModelLightGridVolumeFlags(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxStaticModelLightGridVolumeFlags, 2ui64);
}

/*
==============
Preload_GfxStaticModelLightGridVolumeFlagsArray
==============
*/
void Preload_GfxStaticModelLightGridVolumeFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxStaticModelLightGridVolumeFlags, 2 * count);
}

/*
==============
Preload_GfxStaticModelLightGridVolumeFlagsStream
==============
*/
void Preload_GfxStaticModelLightGridVolumeFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 54790, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxStaticModelLightGridVolumeFlags;
    do
    {
      Load_Stream(AtStart, pos, 2ui64);
      pos = g_streamPosGlob.pos;
      varGfxStaticModelLightGridVolumeFlags = (GfxStaticModelLightGridVolumeFlags *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxStaticModelLightGridVolumeStream
==============
*/
void Preload_GfxStaticModelLightGridVolumeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 54967, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxStaticModelLightGridVolume;
    do
    {
      Load_Stream(AtStart, pos, 0x40ui64);
      pos = g_streamPosGlob.pos;
      varGfxStaticModelLightGridVolume = (GfxStaticModelLightGridVolume *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxVoxelInternalNode
==============
*/
void Preload_GfxVoxelInternalNode(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxVoxelInternalNode, 0x10ui64);
}

/*
==============
Preload_GfxVoxelInternalNodeArray
==============
*/
void Preload_GfxVoxelInternalNodeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxVoxelInternalNode, 16 * count);
}

/*
==============
Preload_GfxVoxelInternalNodeStream
==============
*/
void Preload_GfxVoxelInternalNodeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 66296, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxVoxelInternalNode;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      pos = g_streamPosGlob.pos;
      varGfxVoxelInternalNode = (GfxVoxelInternalNode *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxVoxelLeafNode
==============
*/
void Preload_GfxVoxelLeafNode(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxVoxelLeafNode, 2ui64);
}

/*
==============
Preload_GfxVoxelLeafNodeArray
==============
*/
void Preload_GfxVoxelLeafNodeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxVoxelLeafNode, 2 * count);
}

/*
==============
Preload_GfxVoxelLeafNodeStream
==============
*/
void Preload_GfxVoxelLeafNodeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 66372, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxVoxelLeafNode;
    do
    {
      Load_Stream(AtStart, pos, 2ui64);
      pos = g_streamPosGlob.pos;
      varGfxVoxelLeafNode = (GfxVoxelLeafNode *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxVoxelTopDownViewNode
==============
*/
void Preload_GfxVoxelTopDownViewNode(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxVoxelTopDownViewNode, 0xCui64);
}

/*
==============
Preload_GfxVoxelTopDownViewNodeArray
==============
*/
void Preload_GfxVoxelTopDownViewNodeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxVoxelTopDownViewNode, 12 * count);
}

/*
==============
Preload_GfxVoxelTopDownViewNodeStream
==============
*/
void Preload_GfxVoxelTopDownViewNodeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 66197, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxVoxelTopDownViewNode;
    do
    {
      Load_Stream(AtStart, pos, 0xCui64);
      pos = g_streamPosGlob.pos;
      varGfxVoxelTopDownViewNode = (GfxVoxelTopDownViewNode *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxVoxelTree
==============
*/
void Preload_GfxVoxelTree(const DBStreamStart streamStart)
{
  GfxVoxelTreeHeader *v1; 
  GfxVoxelTopDownViewNode *v2; 
  GfxVoxelInternalNode *v3; 
  GfxVoxelLeafNode *v4; 
  unsigned __int16 *v5; 
  unsigned int *v6; 
  unsigned int *v7; 
  GfxVoxelTree *v8; 
  GfxVoxelTreeHeader *v9; 
  GfxVoxelTopDownViewNode *v10; 
  GfxVoxelInternalNode *v11; 

  Load_Stream(streamStart, varGfxVoxelTree, 0x78ui64);
  DB_PushStreamPos(7u);
  if ( varGfxVoxelTree->voxelTreeHeader )
  {
    v1 = varGfxVoxelTreeHeader;
    DB_PatchMem_FixStreamAlignment(0xFui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxVoxelTreeHeader = (GfxVoxelTreeHeader *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x40ui64);
    varGfxVoxelTreeHeader = v1;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(7u);
  if ( varGfxVoxelTree->voxelTopDownViewNodeArray )
  {
    v2 = varGfxVoxelTopDownViewNode;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxVoxelTopDownViewNode = (GfxVoxelTopDownViewNode *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 12i64 * varGfxVoxelTree->voxelTopDownViewNodeCount);
    varGfxVoxelTopDownViewNode = v2;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(7u);
  if ( varGfxVoxelTree->voxelInternalNodeArray )
  {
    v3 = varGfxVoxelInternalNode;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxVoxelInternalNode = (GfxVoxelInternalNode *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varGfxVoxelTree->voxelInternalNodeCount);
    varGfxVoxelInternalNode = v3;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(7u);
  if ( varGfxVoxelTree->voxelLeafNodeArray )
  {
    v4 = varGfxVoxelLeafNode;
    DB_PatchMem_FixStreamAlignment(1ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxVoxelLeafNode = (GfxVoxelLeafNode *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 2i64 * varGfxVoxelTree->voxelLeafNodeCount);
    varGfxVoxelLeafNode = v4;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(7u);
  if ( varGfxVoxelTree->lightListArray )
  {
    v5 = varraw_ushort4;
    varraw_ushort4 = AllocPreload_raw_ushort4();
    Preload_raw_ushort4Array(AtStart, varGfxVoxelTree->lightListArraySize);
    varraw_ushort4 = v5;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxVoxelTree->voxelInternalNodeDynamicLightListCPU )
  {
    v6 = varuint;
    varuint = AllocPreload_uint();
    Preload_uintArray(AtStart, 2 * varGfxVoxelTree->voxelInternalNodeCount);
    varuint = v6;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(5u);
  if ( varGfxVoxelTree->voxelInternalNodeDynamicLightList )
  {
    v7 = varuint;
    varuint = AllocPreload_uint();
    Preload_uintArray(AtStart, 2 * varGfxVoxelTree->voxelInternalNodeCount);
    varuint = v7;
  }
  DB_PopStreamPos();
  v8 = varGfxVoxelTree;
  if ( varGfxVoxelTree->voxelTreeHeaderCPU )
  {
    v9 = varGfxVoxelTreeHeader;
    DB_PatchMem_FixStreamAlignment(0xFui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxVoxelTreeHeader = (GfxVoxelTreeHeader *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x40ui64);
    v8 = varGfxVoxelTree;
    varGfxVoxelTreeHeader = v9;
  }
  if ( v8->voxelTopDownViewNodeArrayCPU )
  {
    v10 = varGfxVoxelTopDownViewNode;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxVoxelTopDownViewNode = (GfxVoxelTopDownViewNode *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 12i64 * varGfxVoxelTree->voxelTopDownViewNodeCount);
    v8 = varGfxVoxelTree;
    varGfxVoxelTopDownViewNode = v10;
  }
  if ( v8->voxelInternalNodeArrayCPU )
  {
    v11 = varGfxVoxelInternalNode;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxVoxelInternalNode = (GfxVoxelInternalNode *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varGfxVoxelTree->voxelInternalNodeCount);
    varGfxVoxelInternalNode = v11;
  }
}

/*
==============
Preload_GfxVoxelTreeArray
==============
*/
void Preload_GfxVoxelTreeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxVoxelTree *i; 
  GfxVoxelTreeHeader *v4; 
  GfxVoxelTopDownViewNode *v5; 
  GfxVoxelInternalNode *v6; 
  GfxVoxelLeafNode *v7; 
  unsigned __int16 *v8; 
  unsigned int *v9; 
  unsigned int *v10; 
  GfxVoxelTree *v11; 
  GfxVoxelTreeHeader *v12; 
  GfxVoxelTopDownViewNode *v13; 
  GfxVoxelInternalNode *v14; 

  v2 = count;
  Load_Stream(streamStart, varGfxVoxelTree, 120 * count);
  for ( i = varGfxVoxelTree; v2; --v2 )
  {
    varGfxVoxelTree = i;
    Load_Stream(NotAtStart, i, 0x78ui64);
    DB_PushStreamPos(7u);
    if ( varGfxVoxelTree->voxelTreeHeader )
    {
      v4 = varGfxVoxelTreeHeader;
      DB_PatchMem_FixStreamAlignment(0xFui64);
      DB_CheckCanIncStreamPos(0i64);
      varGfxVoxelTreeHeader = (GfxVoxelTreeHeader *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 0x40ui64);
      varGfxVoxelTreeHeader = v4;
    }
    DB_PopStreamPos();
    DB_PushStreamPos(7u);
    if ( varGfxVoxelTree->voxelTopDownViewNodeArray )
    {
      v5 = varGfxVoxelTopDownViewNode;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      varGfxVoxelTopDownViewNode = (GfxVoxelTopDownViewNode *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 12i64 * varGfxVoxelTree->voxelTopDownViewNodeCount);
      varGfxVoxelTopDownViewNode = v5;
    }
    DB_PopStreamPos();
    DB_PushStreamPos(7u);
    if ( varGfxVoxelTree->voxelInternalNodeArray )
    {
      v6 = varGfxVoxelInternalNode;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      varGfxVoxelInternalNode = (GfxVoxelInternalNode *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varGfxVoxelTree->voxelInternalNodeCount);
      varGfxVoxelInternalNode = v6;
    }
    DB_PopStreamPos();
    DB_PushStreamPos(7u);
    if ( varGfxVoxelTree->voxelLeafNodeArray )
    {
      v7 = varGfxVoxelLeafNode;
      DB_PatchMem_FixStreamAlignment(1ui64);
      DB_CheckCanIncStreamPos(0i64);
      varGfxVoxelLeafNode = (GfxVoxelLeafNode *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 2i64 * varGfxVoxelTree->voxelLeafNodeCount);
      varGfxVoxelLeafNode = v7;
    }
    DB_PopStreamPos();
    DB_PushStreamPos(7u);
    if ( varGfxVoxelTree->lightListArray )
    {
      v8 = varraw_ushort4;
      varraw_ushort4 = AllocPreload_raw_ushort4();
      Preload_raw_ushort4Array(AtStart, varGfxVoxelTree->lightListArraySize);
      varraw_ushort4 = v8;
    }
    DB_PopStreamPos();
    DB_PushStreamPos(4u);
    if ( varGfxVoxelTree->voxelInternalNodeDynamicLightListCPU )
    {
      v9 = varuint;
      varuint = AllocPreload_uint();
      Preload_uintArray(AtStart, 2 * varGfxVoxelTree->voxelInternalNodeCount);
      varuint = v9;
    }
    DB_PopStreamPos();
    DB_PushStreamPos(5u);
    if ( varGfxVoxelTree->voxelInternalNodeDynamicLightList )
    {
      v10 = varuint;
      varuint = AllocPreload_uint();
      Preload_uintArray(AtStart, 2 * varGfxVoxelTree->voxelInternalNodeCount);
      varuint = v10;
    }
    DB_PopStreamPos();
    v11 = varGfxVoxelTree;
    if ( varGfxVoxelTree->voxelTreeHeaderCPU )
    {
      v12 = varGfxVoxelTreeHeader;
      DB_PatchMem_FixStreamAlignment(0xFui64);
      DB_CheckCanIncStreamPos(0i64);
      varGfxVoxelTreeHeader = (GfxVoxelTreeHeader *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 0x40ui64);
      v11 = varGfxVoxelTree;
      varGfxVoxelTreeHeader = v12;
    }
    if ( v11->voxelTopDownViewNodeArrayCPU )
    {
      v13 = varGfxVoxelTopDownViewNode;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      varGfxVoxelTopDownViewNode = (GfxVoxelTopDownViewNode *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 12i64 * varGfxVoxelTree->voxelTopDownViewNodeCount);
      v11 = varGfxVoxelTree;
      varGfxVoxelTopDownViewNode = v13;
    }
    if ( v11->voxelInternalNodeArrayCPU )
    {
      v14 = varGfxVoxelInternalNode;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      varGfxVoxelInternalNode = (GfxVoxelInternalNode *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varGfxVoxelTree->voxelInternalNodeCount);
      varGfxVoxelInternalNode = v14;
    }
    ++i;
  }
}

/*
==============
Preload_GfxVoxelTreeHeader
==============
*/
void Preload_GfxVoxelTreeHeader(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxVoxelTreeHeader, 0x40ui64);
}

/*
==============
Preload_GfxVoxelTreeHeaderArray
==============
*/
void Preload_GfxVoxelTreeHeaderArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxVoxelTreeHeader, count << 6);
}

/*
==============
Preload_GfxVoxelTreeHeaderStream
==============
*/
void Preload_GfxVoxelTreeHeaderStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 66517, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxVoxelTreeHeader;
    do
    {
      Load_Stream(AtStart, pos, 0x40ui64);
      pos = g_streamPosGlob.pos;
      varGfxVoxelTreeHeader = (GfxVoxelTreeHeader *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxVoxelTreeStream
==============
*/
void Preload_GfxVoxelTreeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxVoxelTreeHeader *v4; 
  GfxVoxelTopDownViewNode *v5; 
  GfxVoxelInternalNode *v6; 
  GfxVoxelLeafNode *v7; 
  unsigned __int16 *v8; 
  unsigned int *v9; 
  unsigned int *v10; 
  GfxVoxelTree *v11; 
  GfxVoxelTreeHeader *v12; 
  GfxVoxelTopDownViewNode *v13; 
  GfxVoxelInternalNode *v14; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 66975, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxVoxelTree;
    do
    {
      Load_Stream(AtStart, pos, 0x78ui64);
      DB_PushStreamPos(7u);
      if ( varGfxVoxelTree->voxelTreeHeader )
      {
        v4 = varGfxVoxelTreeHeader;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        varGfxVoxelTreeHeader = (GfxVoxelTreeHeader *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x40ui64);
        varGfxVoxelTreeHeader = v4;
      }
      DB_PopStreamPos();
      DB_PushStreamPos(7u);
      if ( varGfxVoxelTree->voxelTopDownViewNodeArray )
      {
        v5 = varGfxVoxelTopDownViewNode;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        varGfxVoxelTopDownViewNode = (GfxVoxelTopDownViewNode *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 12i64 * varGfxVoxelTree->voxelTopDownViewNodeCount);
        varGfxVoxelTopDownViewNode = v5;
      }
      DB_PopStreamPos();
      DB_PushStreamPos(7u);
      if ( varGfxVoxelTree->voxelInternalNodeArray )
      {
        v6 = varGfxVoxelInternalNode;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        varGfxVoxelInternalNode = (GfxVoxelInternalNode *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varGfxVoxelTree->voxelInternalNodeCount);
        varGfxVoxelInternalNode = v6;
      }
      DB_PopStreamPos();
      DB_PushStreamPos(7u);
      if ( varGfxVoxelTree->voxelLeafNodeArray )
      {
        v7 = varGfxVoxelLeafNode;
        DB_PatchMem_FixStreamAlignment(1ui64);
        DB_CheckCanIncStreamPos(0i64);
        varGfxVoxelLeafNode = (GfxVoxelLeafNode *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 2i64 * varGfxVoxelTree->voxelLeafNodeCount);
        varGfxVoxelLeafNode = v7;
      }
      DB_PopStreamPos();
      DB_PushStreamPos(7u);
      if ( varGfxVoxelTree->lightListArray )
      {
        v8 = varraw_ushort4;
        varraw_ushort4 = AllocPreload_raw_ushort4();
        Preload_raw_ushort4Array(AtStart, varGfxVoxelTree->lightListArraySize);
        varraw_ushort4 = v8;
      }
      DB_PopStreamPos();
      DB_PushStreamPos(4u);
      if ( varGfxVoxelTree->voxelInternalNodeDynamicLightListCPU )
      {
        v9 = varuint;
        varuint = AllocPreload_uint();
        Preload_uintArray(AtStart, 2 * varGfxVoxelTree->voxelInternalNodeCount);
        varuint = v9;
      }
      DB_PopStreamPos();
      DB_PushStreamPos(5u);
      if ( varGfxVoxelTree->voxelInternalNodeDynamicLightList )
      {
        v10 = varuint;
        varuint = AllocPreload_uint();
        Preload_uintArray(AtStart, 2 * varGfxVoxelTree->voxelInternalNodeCount);
        varuint = v10;
      }
      DB_PopStreamPos();
      v11 = varGfxVoxelTree;
      if ( varGfxVoxelTree->voxelTreeHeaderCPU )
      {
        v12 = varGfxVoxelTreeHeader;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        varGfxVoxelTreeHeader = (GfxVoxelTreeHeader *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x40ui64);
        v11 = varGfxVoxelTree;
        varGfxVoxelTreeHeader = v12;
      }
      if ( v11->voxelTopDownViewNodeArrayCPU )
      {
        v13 = varGfxVoxelTopDownViewNode;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        varGfxVoxelTopDownViewNode = (GfxVoxelTopDownViewNode *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 12i64 * varGfxVoxelTree->voxelTopDownViewNodeCount);
        v11 = varGfxVoxelTree;
        varGfxVoxelTopDownViewNode = v13;
      }
      if ( v11->voxelInternalNodeArrayCPU )
      {
        v14 = varGfxVoxelInternalNode;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        varGfxVoxelInternalNode = (GfxVoxelInternalNode *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varGfxVoxelTree->voxelInternalNodeCount);
        varGfxVoxelInternalNode = v14;
      }
      pos = g_streamPosGlob.pos;
      varGfxVoxelTree = (GfxVoxelTree *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxWorld
==============
*/
void Preload_GfxWorld(const DBStreamStart streamStart)
{
  const char **v2; 
  GfxWorldDpvsPlanes *v3; 
  GfxWorld *v4; 
  GfxCellTransientInfo *v5; 
  GfxCell *v6; 
  __int64 cellCount; 
  GfxCell *i; 
  GfxWorldSurfaces *v9; 
  GfxWorldStaticModels *v10; 
  GfxWorldDraw *v11; 
  GfxDynamicLightset *v12; 
  GfxWorld *v13; 
  GfxVoxelTree *v14; 
  GfxMayhemSelfVis *v15; 
  GfxFrustumLights *v16; 
  GfxLight *v17; 
  GfxWorld *v18; 
  GfxLightViewFrustum *v19; 
  __int64 primaryLightCount; 
  GfxLightViewFrustum *j; 
  GfxHeightfield *v22; 
  __int64 heightfieldCount; 
  GfxHeightfield *k; 
  GfxImage **v25; 
  GfxBrushModel *v26; 
  GfxPrecomputedSkyIllumination *v27; 
  GfxWorld *v28; 
  GfxModelLightmapInst *v29; 
  GfxMapEntLookup *v30; 
  sunflare_t *v31; 
  GfxImage **v32; 
  Material **v33; 
  unsigned int *v34; 
  unsigned int *v35; 
  GfxSceneDynModel *v36; 
  GfxSceneDynBrush *v37; 
  unsigned int *v38; 
  unsigned int *v39; 
  unsigned int *v40; 
  unsigned int *v41; 
  unsigned int *v42; 
  unsigned int *v43; 
  unsigned int *v44; 
  GfxWorld *v45; 
  GfxShadowGeometry *v46; 
  __int64 v47; 
  GfxShadowGeometry *m; 
  GfxLightAABB *v49; 
  GfxWorldDpvsStatic *v50; 
  GfxWorldDpvsDynamic *v51; 
  GfxWorld *v52; 
  UmbraGate *v53; 
  unsigned __int8 *v54; 
  Umbra::Tome **v55; 
  GfxWorld *v56; 
  MdaoVolume *v57; 
  StreamTree *v58; 
  StreamTreeGrid *v59; 

  DB_PatchMem_PushAsset(27, varGfxWorld);
  Load_Stream(streamStart, varGfxWorld, 0x41E0ui64);
  DB_PushStreamPos(8u);
  v2 = varXString;
  varXString = &varGfxWorld->name;
  Preload_XString(NotAtStart);
  varXString = &varGfxWorld->baseName;
  Preload_XString(NotAtStart);
  varXString = v2;
  v3 = varGfxWorldDpvsPlanes;
  varGfxWorldDpvsPlanes = &varGfxWorld->dpvsPlanes;
  Preload_GfxWorldDpvsPlanes(NotAtStart);
  v4 = varGfxWorld;
  varGfxWorldDpvsPlanes = v3;
  if ( varGfxWorld->cellTransientInfos )
  {
    v5 = varGfxCellTransientInfo;
    DB_PatchMem_FixStreamAlignment(1ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxCellTransientInfo = (GfxCellTransientInfo *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 4i64 * varGfxWorld->dpvsPlanes.cellCount);
    v4 = varGfxWorld;
    varGfxCellTransientInfo = v5;
  }
  if ( v4->cells )
  {
    v6 = varGfxCell;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxCell = (GfxCell *)g_streamPosGlob.pos;
    cellCount = varGfxWorld->dpvsPlanes.cellCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 40 * cellCount);
    for ( i = varGfxCell; cellCount; --cellCount )
    {
      varGfxCell = i;
      Preload_GfxCell(NotAtStart);
      ++i;
    }
    v4 = varGfxWorld;
    varGfxCell = v6;
  }
  v9 = varGfxWorldSurfaces;
  varGfxWorldSurfaces = &v4->surfaces;
  Preload_GfxWorldSurfaces(NotAtStart);
  varGfxWorldSurfaces = v9;
  v10 = varGfxWorldStaticModels;
  varGfxWorldStaticModels = &varGfxWorld->smodels;
  Preload_GfxWorldStaticModels(NotAtStart);
  varGfxWorldStaticModels = v10;
  v11 = varGfxWorldDraw;
  varGfxWorldDraw = &varGfxWorld->draw;
  Preload_GfxWorldDraw(NotAtStart);
  varGfxWorldDraw = v11;
  v12 = varGfxDynamicLightset;
  varGfxDynamicLightset = &varGfxWorld->dynamicLightset;
  Preload_GfxDynamicLightset(NotAtStart);
  v13 = varGfxWorld;
  varGfxDynamicLightset = v12;
  if ( varGfxWorld->voxelTree )
  {
    v14 = varGfxVoxelTree;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxVoxelTree = (GfxVoxelTree *)g_streamPosGlob.pos;
    Preload_GfxVoxelTreeArray(AtStart, varGfxWorld->voxelTreeCount);
    v13 = varGfxWorld;
    varGfxVoxelTree = v14;
  }
  v15 = varGfxMayhemSelfVis;
  varGfxMayhemSelfVis = &v13->mayhemSelfVis;
  Preload_GfxMayhemSelfVis(NotAtStart);
  varGfxMayhemSelfVis = v15;
  v16 = varGfxFrustumLights;
  varGfxFrustumLights = &varGfxWorld->frustumLights;
  Preload_GfxFrustumLights(NotAtStart);
  varGfxFrustumLights = v16;
  DB_PushStreamPos(4u);
  if ( varGfxWorld->primaryLights )
  {
    v17 = varGfxLight;
    varGfxLight = AllocPreload_GfxLight();
    Preload_GfxLightArray(AtStart, varGfxWorld->primaryLightCount);
    varGfxLight = v17;
  }
  DB_PopStreamPos();
  v18 = varGfxWorld;
  if ( varGfxWorld->lightViewFrustums )
  {
    v19 = varGfxLightViewFrustum;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxLightViewFrustum = (GfxLightViewFrustum *)g_streamPosGlob.pos;
    primaryLightCount = varGfxWorld->primaryLightCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 32 * primaryLightCount);
    for ( j = varGfxLightViewFrustum; primaryLightCount; --primaryLightCount )
    {
      varGfxLightViewFrustum = j;
      Preload_GfxLightViewFrustum(NotAtStart);
      ++j;
    }
    v18 = varGfxWorld;
    varGfxLightViewFrustum = v19;
  }
  if ( v18->heightfields )
  {
    v22 = varGfxHeightfield;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxHeightfield = (GfxHeightfield *)g_streamPosGlob.pos;
    heightfieldCount = varGfxWorld->heightfieldCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 96 * heightfieldCount);
    for ( k = varGfxHeightfield; heightfieldCount; --heightfieldCount )
    {
      varGfxHeightfield = k;
      Load_Stream(NotAtStart, k, 0x60ui64);
      v25 = varGfxImagePtr;
      varGfxImagePtr = &varGfxHeightfield->image;
      Preload_GfxImagePtr(NotAtStart);
      ++k;
      varGfxImagePtr = v25;
    }
    v18 = varGfxWorld;
    varGfxHeightfield = v22;
  }
  if ( v18->models )
  {
    v26 = varGfxBrushModel;
    varGfxBrushModel = AllocPreload_GfxBrushModel();
    Preload_GfxBrushModelArray(AtStart, varGfxWorld->modelCount);
    v18 = varGfxWorld;
    varGfxBrushModel = v26;
  }
  v27 = varGfxPrecomputedSkyIllumination;
  varGfxPrecomputedSkyIllumination = &v18->precomputedSkyIllumination;
  Preload_GfxPrecomputedSkyIllumination(NotAtStart);
  v28 = varGfxWorld;
  varGfxPrecomputedSkyIllumination = v27;
  if ( varGfxWorld->lmapLookup )
  {
    v29 = varGfxModelLightmapInst;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxModelLightmapInst = (GfxModelLightmapInst *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 20i64 * varGfxWorld->lmapLookupCount);
    v28 = varGfxWorld;
    varGfxModelLightmapInst = v29;
  }
  if ( v28->gfxMapEntLookup )
  {
    v30 = varGfxMapEntLookup;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxMapEntLookup = (GfxMapEntLookup *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 28i64 * varGfxWorld->gfxMapEntLookupCount);
    v28 = varGfxWorld;
    varGfxMapEntLookup = v30;
  }
  v31 = varsunflare_t;
  varsunflare_t = &v28->sun;
  Preload_sunflare_t(NotAtStart);
  varsunflare_t = v31;
  v32 = varGfxImagePtr;
  varGfxImagePtr = &varGfxWorld->outdoorImage;
  Preload_GfxImagePtr(NotAtStart);
  varGfxImagePtr = v32;
  v33 = varMaterialHandle;
  varMaterialHandle = &varGfxWorld->dustMaterial;
  Preload_MaterialHandle(NotAtStart);
  varMaterialHandle = v33;
  DB_PushStreamPos(4u);
  if ( varGfxWorld->cellCasterBits )
  {
    v34 = varraw_uint;
    varraw_uint = AllocPreload_raw_uint();
    Preload_raw_uintArray(AtStart, varGfxWorld->dpvsPlanes.cellCount * ((varGfxWorld->dpvsPlanes.cellCount + 31) >> 5));
    varraw_uint = v34;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorld->cellHasSunLitSurfsBits )
  {
    v35 = varraw_uint;
    varraw_uint = AllocPreload_raw_uint();
    Preload_raw_uintArray(AtStart, (unsigned __int64)(varGfxWorld->dpvsPlanes.cellCount + 31) >> 5);
    varraw_uint = v35;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorld->sceneDynModel )
  {
    v36 = varGfxSceneDynModel;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxSceneDynModel = (GfxSceneDynModel *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 12i64 * varGfxWorld->dpvsDyn.dynEntClientCount[0]);
    varGfxSceneDynModel = v36;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorld->sceneDynBrush )
  {
    v37 = varGfxSceneDynBrush;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxSceneDynBrush = (GfxSceneDynBrush *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 12i64 * varGfxWorld->dpvsDyn.dynEntClientCount[1]);
    varGfxSceneDynBrush = v37;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorld->primaryLightMotionDetectBits )
  {
    v38 = varraw_uint;
    varraw_uint = AllocPreload_raw_uint();
    Preload_raw_uintArray(AtStart, varGfxWorld->primaryLightMotionDetectBitsEntries);
    varraw_uint = v38;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorld->entityMotionBits )
  {
    v39 = varraw_uint;
    varraw_uint = AllocPreload_raw_uint();
    Preload_raw_uintArray(AtStart, varGfxWorld->entityMotionBitsEntries);
    varraw_uint = v39;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorld->primaryLightEntityShadowVis )
  {
    v40 = varraw_uint;
    varraw_uint = AllocPreload_raw_uint();
    Preload_raw_uintArray(AtStart, varGfxWorld->numPrimaryLightEntityShadowVisEntries);
    varraw_uint = v40;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorld->dynEntMotionBits[0] )
  {
    v41 = varraw_uint;
    varraw_uint = AllocPreload_raw_uint();
    Preload_raw_uintArray(AtStart, varGfxWorld->dynEntMotionBitsEntries[0]);
    varraw_uint = v41;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorld->dynEntMotionBits[1] )
  {
    v42 = varraw_uint;
    varraw_uint = AllocPreload_raw_uint();
    Preload_raw_uintArray(AtStart, varGfxWorld->dynEntMotionBitsEntries[1]);
    varraw_uint = v42;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorld->primaryLightDynEntShadowVis[0] )
  {
    v43 = varraw_uint;
    varraw_uint = AllocPreload_raw_uint();
    Preload_raw_uintArray(AtStart, varGfxWorld->numPrimaryLightDynEntShadowVisEntries[0]);
    varraw_uint = v43;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorld->primaryLightDynEntShadowVis[1] )
  {
    v44 = varraw_uint;
    varraw_uint = AllocPreload_raw_uint();
    Preload_raw_uintArray(AtStart, varGfxWorld->numPrimaryLightDynEntShadowVisEntries[1]);
    varraw_uint = v44;
  }
  DB_PopStreamPos();
  v45 = varGfxWorld;
  if ( varGfxWorld->shadowGeomOptimized )
  {
    v46 = varGfxShadowGeometry;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxShadowGeometry = (GfxShadowGeometry *)g_streamPosGlob.pos;
    v47 = varGfxWorld->primaryLightCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 24 * v47);
    for ( m = varGfxShadowGeometry; v47; --v47 )
    {
      varGfxShadowGeometry = m;
      Preload_GfxShadowGeometry(NotAtStart);
      ++m;
    }
    v45 = varGfxWorld;
    varGfxShadowGeometry = v46;
  }
  v49 = varGfxLightAABB;
  varGfxLightAABB = &v45->lightAABB;
  Preload_GfxLightAABB(NotAtStart);
  varGfxLightAABB = v49;
  v50 = varGfxWorldDpvsStatic;
  varGfxWorldDpvsStatic = &varGfxWorld->dpvs;
  Preload_GfxWorldDpvsStatic(NotAtStart);
  varGfxWorldDpvsStatic = v50;
  v51 = varGfxWorldDpvsDynamic;
  varGfxWorldDpvsDynamic = &varGfxWorld->dpvsDyn;
  Preload_GfxWorldDpvsDynamic(NotAtStart);
  v52 = varGfxWorld;
  varGfxWorldDpvsDynamic = v51;
  if ( varGfxWorld->umbraGates )
  {
    v53 = varUmbraGate;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varUmbraGate = (UmbraGate *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 32i64 * varGfxWorld->numUmbraGates);
    v52 = varGfxWorld;
    varUmbraGate = v53;
  }
  if ( v52->umbraTomeData )
  {
    v54 = varbyte16;
    varbyte16 = AllocPreload_byte16();
    Preload_byte16Array(AtStart, varGfxWorld->umbraTomeSize);
    v52 = varGfxWorld;
    varbyte16 = v54;
  }
  v55 = varumbraTomePtr_t;
  varumbraTomePtr_t = &v52->umbraTome;
  Load_Stream(NotAtStart, &v52->umbraTome, 8ui64);
  v56 = varGfxWorld;
  varumbraTomePtr_t = v55;
  if ( varGfxWorld->mdaoVolumes )
  {
    v57 = varMdaoVolume;
    varMdaoVolume = AllocPreload_MdaoVolume();
    Preload_MdaoVolumeArray(AtStart, varGfxWorld->mdaoVolumeCount);
    v56 = varGfxWorld;
    varMdaoVolume = v57;
  }
  v58 = varStreamTree;
  varStreamTree = &v56->streamTree;
  Preload_StreamTree(NotAtStart);
  varStreamTree = v58;
  v59 = varStreamTreeGrid;
  varStreamTreeGrid = &varGfxWorld->materialStreamTreeGrid;
  Preload_StreamTreeGrid(NotAtStart);
  varStreamTreeGrid = &varGfxWorld->xmodelStreamTreeGrid;
  Preload_StreamTreeGrid(NotAtStart);
  varStreamTreeGrid = v59;
  DB_PopStreamPos();
  DB_PatchMem_PopAsset();
}

/*
==============
Preload_GfxWorldArray
==============
*/
void Preload_GfxWorldArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxWorld *i; 

  v2 = count;
  Load_Stream(streamStart, varGfxWorld, 16864 * count);
  for ( i = varGfxWorld; v2; --v2 )
  {
    varGfxWorld = i;
    Preload_GfxWorld(NotAtStart);
    ++i;
  }
}

/*
==============
Preload_GfxWorldDpvsDynamic
==============
*/
void Preload_GfxWorldDpvsDynamic(const DBStreamStart streamStart)
{
  unsigned int *v1; 
  unsigned int *v2; 
  unsigned __int8 *v3; 
  unsigned __int8 *v4; 
  unsigned __int8 *v5; 
  unsigned __int8 *v6; 
  unsigned __int8 *v7; 
  unsigned __int8 *v8; 
  unsigned __int8 *v9; 
  unsigned __int8 *v10; 
  unsigned __int8 *v11; 
  unsigned __int8 *v12; 
  unsigned __int8 *v13; 
  unsigned __int8 *v14; 
  unsigned __int8 *v15; 
  unsigned __int8 *v16; 
  unsigned __int8 *v17; 
  unsigned __int8 *v18; 
  unsigned __int8 *v19; 
  unsigned __int8 *v20; 
  unsigned __int8 *v21; 
  unsigned __int8 *v22; 
  unsigned __int8 *v23; 
  unsigned __int8 *v24; 
  unsigned __int8 *v25; 
  unsigned __int8 *v26; 
  unsigned __int8 *v27; 
  unsigned __int8 *v28; 
  unsigned __int8 *v29; 
  unsigned __int8 *v30; 
  unsigned __int8 *v31; 
  unsigned __int8 *v32; 
  unsigned __int8 *v33; 
  unsigned __int8 *v34; 
  unsigned __int8 *v35; 
  unsigned __int8 *v36; 
  unsigned __int8 *v37; 
  unsigned __int8 *v38; 
  unsigned __int8 *v39; 
  unsigned __int8 *v40; 
  unsigned __int8 *v41; 
  unsigned __int8 *v42; 
  unsigned __int8 *v43; 
  unsigned __int8 *v44; 
  unsigned __int8 *v45; 
  unsigned __int8 *v46; 
  unsigned __int8 *v47; 
  unsigned __int8 *v48; 
  unsigned __int8 *v49; 
  unsigned __int8 *v50; 
  unsigned __int8 *v51; 
  unsigned __int8 *v52; 
  unsigned __int8 *v53; 
  unsigned __int8 *v54; 
  unsigned __int8 *v55; 
  unsigned __int8 *v56; 
  unsigned __int8 *v57; 
  unsigned __int8 *v58; 
  unsigned __int8 *v59; 
  unsigned __int8 *v60; 
  unsigned __int8 *v61; 
  unsigned __int8 *v62; 
  unsigned __int8 *v63; 
  unsigned __int8 *v64; 
  unsigned __int8 *v65; 
  unsigned __int8 *v66; 

  Load_Stream(streamStart, varGfxWorldDpvsDynamic, 0x230ui64);
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntCellBits[0] )
  {
    v1 = varraw_uint;
    varraw_uint = AllocPreload_raw_uint();
    Preload_raw_uintArray(AtStart, varGfxWorldDpvsDynamic->dynEntClientWordCount[0] * varGfxWorld->dpvsPlanes.cellCount);
    varraw_uint = v1;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntCellBits[1] )
  {
    v2 = varraw_uint;
    varraw_uint = AllocPreload_raw_uint();
    Preload_raw_uintArray(AtStart, varGfxWorldDpvsDynamic->dynEntClientWordCount[1] * varGfxWorld->dpvsPlanes.cellCount);
    varraw_uint = v2;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][0] )
  {
    v3 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[0]);
    varraw_byte16 = v3;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][0] )
  {
    v4 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[1]);
    varraw_byte16 = v4;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][1] )
  {
    v5 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[0]);
    varraw_byte16 = v5;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][1] )
  {
    v6 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[1]);
    varraw_byte16 = v6;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][2] )
  {
    v7 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[0]);
    varraw_byte16 = v7;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][2] )
  {
    v8 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[1]);
    varraw_byte16 = v8;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][3] )
  {
    v9 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v9;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][3] )
  {
    v10 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v10;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][4] )
  {
    v11 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[0]);
    varraw_byte16 = v11;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][4] )
  {
    v12 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[1]);
    varraw_byte16 = v12;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][5] )
  {
    v13 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[0]);
    varraw_byte16 = v13;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][5] )
  {
    v14 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[1]);
    varraw_byte16 = v14;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][6] )
  {
    v15 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[0]);
    varraw_byte16 = v15;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][6] )
  {
    v16 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[1]);
    varraw_byte16 = v16;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][7] )
  {
    v17 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[0]);
    varraw_byte16 = v17;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][7] )
  {
    v18 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[1]);
    varraw_byte16 = v18;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][8] )
  {
    v19 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[0]);
    varraw_byte16 = v19;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][8] )
  {
    v20 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[1]);
    varraw_byte16 = v20;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][9] )
  {
    v21 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[0]);
    varraw_byte16 = v21;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][9] )
  {
    v22 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[1]);
    varraw_byte16 = v22;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][10] )
  {
    v23 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[0]);
    varraw_byte16 = v23;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][10] )
  {
    v24 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[1]);
    varraw_byte16 = v24;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][11] )
  {
    v25 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[0]);
    varraw_byte16 = v25;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][11] )
  {
    v26 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 32 * varGfxWorldDpvsDynamic->dynEntClientWordCount[1]);
    varraw_byte16 = v26;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][12] )
  {
    v27 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v27;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][12] )
  {
    v28 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v28;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][13] )
  {
    v29 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v29;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][13] )
  {
    v30 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v30;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][14] )
  {
    v31 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v31;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][14] )
  {
    v32 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v32;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][15] )
  {
    v33 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v33;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][15] )
  {
    v34 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v34;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][16] )
  {
    v35 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v35;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][16] )
  {
    v36 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v36;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][17] )
  {
    v37 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v37;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][17] )
  {
    v38 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v38;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][18] )
  {
    v39 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v39;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][18] )
  {
    v40 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v40;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][19] )
  {
    v41 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v41;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][19] )
  {
    v42 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v42;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][20] )
  {
    v43 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v43;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][20] )
  {
    v44 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v44;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][21] )
  {
    v45 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v45;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][21] )
  {
    v46 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v46;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][22] )
  {
    v47 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v47;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][22] )
  {
    v48 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v48;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][23] )
  {
    v49 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v49;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][23] )
  {
    v50 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v50;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][24] )
  {
    v51 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v51;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][24] )
  {
    v52 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v52;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][25] )
  {
    v53 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v53;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][25] )
  {
    v54 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v54;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][26] )
  {
    v55 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v55;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][26] )
  {
    v56 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v56;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][27] )
  {
    v57 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v57;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][27] )
  {
    v58 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v58;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][28] )
  {
    v59 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v59;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][28] )
  {
    v60 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v60;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][29] )
  {
    v61 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v61;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][29] )
  {
    v62 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v62;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][30] )
  {
    v63 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v63;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][30] )
  {
    v64 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v64;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[0][31] )
  {
    v65 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v65;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsDynamic->dynEntVisData[1][31] )
  {
    v66 = varraw_byte16;
    varraw_byte16 = AllocPreload_raw_byte16();
    Preload_raw_byte16Array(AtStart, 0i64);
    varraw_byte16 = v66;
  }
  DB_PopStreamPos();
}

/*
==============
Preload_GfxWorldDpvsDynamicArray
==============
*/
void Preload_GfxWorldDpvsDynamicArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxWorldDpvsDynamic *i; 

  v2 = count;
  Load_Stream(streamStart, varGfxWorldDpvsDynamic, 560 * count);
  for ( i = varGfxWorldDpvsDynamic; v2; --v2 )
  {
    varGfxWorldDpvsDynamic = i;
    Preload_GfxWorldDpvsDynamic(NotAtStart);
    ++i;
  }
}

/*
==============
Preload_GfxWorldDpvsDynamicStream
==============
*/
void Preload_GfxWorldDpvsDynamicStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 58710, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  for ( ; count; --count )
  {
    Preload_GfxWorldDpvsDynamic(AtStart);
    varGfxWorldDpvsDynamic = (GfxWorldDpvsDynamic *)g_streamPosGlob.pos;
  }
}

/*
==============
Preload_GfxWorldDpvsPlane
==============
*/
void Preload_GfxWorldDpvsPlane(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxWorldDpvsPlane, 0x14ui64);
}

/*
==============
Preload_GfxWorldDpvsPlaneArray
==============
*/
void Preload_GfxWorldDpvsPlaneArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxWorldDpvsPlane, 20 * count);
}

/*
==============
Preload_GfxWorldDpvsPlaneStream
==============
*/
void Preload_GfxWorldDpvsPlaneStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 61001, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxWorldDpvsPlane;
    do
    {
      Load_Stream(AtStart, pos, 0x14ui64);
      pos = g_streamPosGlob.pos;
      varGfxWorldDpvsPlane = (GfxWorldDpvsPlane *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxWorldDpvsPlanes
==============
*/
void Preload_GfxWorldDpvsPlanes(const DBStreamStart streamStart)
{
  GfxWorldDpvsPlanes *v1; 
  GfxWorldDpvsPlane *v2; 
  unsigned __int16 *v3; 
  unsigned int *v4; 

  Load_Stream(streamStart, varGfxWorldDpvsPlanes, 0x28ui64);
  v1 = varGfxWorldDpvsPlanes;
  if ( varGfxWorldDpvsPlanes->planes )
  {
    v2 = varGfxWorldDpvsPlane;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxWorldDpvsPlane = (GfxWorldDpvsPlane *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 20i64 * varGfxWorldDpvsPlanes->planeCount);
    v1 = varGfxWorldDpvsPlanes;
    varGfxWorldDpvsPlane = v2;
  }
  if ( v1->nodes )
  {
    v3 = varushort;
    varushort = AllocPreload_ushort();
    Preload_ushortArray(AtStart, varGfxWorldDpvsPlanes->nodeCount);
    varushort = v3;
  }
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsPlanes->sceneEntCellBits )
  {
    v4 = varraw_uint;
    varraw_uint = AllocPreload_raw_uint();
    Preload_raw_uintArray(AtStart, varGfxWorldDpvsPlanes->cellCount << 9);
    varraw_uint = v4;
  }
  DB_PopStreamPos();
}

/*
==============
Preload_GfxWorldDpvsPlanesArray
==============
*/
void Preload_GfxWorldDpvsPlanesArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxWorldDpvsPlanes *i; 
  GfxWorldDpvsPlanes *v4; 
  GfxWorldDpvsPlane *v5; 
  unsigned __int16 *v6; 
  unsigned int *v7; 

  v2 = count;
  Load_Stream(streamStart, varGfxWorldDpvsPlanes, 40 * count);
  for ( i = varGfxWorldDpvsPlanes; v2; --v2 )
  {
    varGfxWorldDpvsPlanes = i;
    Load_Stream(NotAtStart, i, 0x28ui64);
    v4 = varGfxWorldDpvsPlanes;
    if ( varGfxWorldDpvsPlanes->planes )
    {
      v5 = varGfxWorldDpvsPlane;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      varGfxWorldDpvsPlane = (GfxWorldDpvsPlane *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 20i64 * varGfxWorldDpvsPlanes->planeCount);
      v4 = varGfxWorldDpvsPlanes;
      varGfxWorldDpvsPlane = v5;
    }
    if ( v4->nodes )
    {
      v6 = varushort;
      varushort = AllocPreload_ushort();
      Preload_ushortArray(AtStart, varGfxWorldDpvsPlanes->nodeCount);
      varushort = v6;
    }
    DB_PushStreamPos(4u);
    if ( varGfxWorldDpvsPlanes->sceneEntCellBits )
    {
      v7 = varraw_uint;
      varraw_uint = AllocPreload_raw_uint();
      Preload_raw_uintArray(AtStart, varGfxWorldDpvsPlanes->cellCount << 9);
      varraw_uint = v7;
    }
    DB_PopStreamPos();
    ++i;
  }
}

/*
==============
Preload_GfxWorldDpvsPlanesStream
==============
*/
void Preload_GfxWorldDpvsPlanesStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxWorldDpvsPlanes *v4; 
  GfxWorldDpvsPlane *v5; 
  unsigned __int16 *v6; 
  unsigned int *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 61200, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxWorldDpvsPlanes;
    do
    {
      Load_Stream(AtStart, pos, 0x28ui64);
      v4 = varGfxWorldDpvsPlanes;
      if ( varGfxWorldDpvsPlanes->planes )
      {
        v5 = varGfxWorldDpvsPlane;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        varGfxWorldDpvsPlane = (GfxWorldDpvsPlane *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 20i64 * varGfxWorldDpvsPlanes->planeCount);
        v4 = varGfxWorldDpvsPlanes;
        varGfxWorldDpvsPlane = v5;
      }
      if ( v4->nodes )
      {
        v6 = varushort;
        varushort = AllocPreload_ushort();
        Preload_ushortArray(AtStart, varGfxWorldDpvsPlanes->nodeCount);
        varushort = v6;
      }
      DB_PushStreamPos(4u);
      if ( varGfxWorldDpvsPlanes->sceneEntCellBits )
      {
        v7 = varraw_uint;
        varraw_uint = AllocPreload_raw_uint();
        Preload_raw_uintArray(AtStart, varGfxWorldDpvsPlanes->cellCount << 9);
        varraw_uint = v7;
      }
      DB_PopStreamPos();
      pos = g_streamPosGlob.pos;
      varGfxWorldDpvsPlanes = (GfxWorldDpvsPlanes *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxWorldDpvsStatic
==============
*/
void Preload_GfxWorldDpvsStatic(const DBStreamStart streamStart)
{
  unsigned int *v1; 
  unsigned int *v2; 
  unsigned int *v3; 
  unsigned int *v4; 
  unsigned int *v5; 
  unsigned int *v6; 
  unsigned int *v7; 
  unsigned int *v8; 
  unsigned int *v9; 
  unsigned int *v10; 
  unsigned int *v11; 
  unsigned int *v12; 
  unsigned int *v13; 
  unsigned int *v14; 
  unsigned int *v15; 
  unsigned int *v16; 
  unsigned int *v17; 
  unsigned int *v18; 
  unsigned int *v19; 
  unsigned int *v20; 
  unsigned int *v21; 
  unsigned int *v22; 
  unsigned int *v23; 
  unsigned int *v24; 
  unsigned int *v25; 
  unsigned int *v26; 
  unsigned int *v27; 
  unsigned int *v28; 
  unsigned int *v29; 
  unsigned int *v30; 
  unsigned int *v31; 
  unsigned int *v32; 
  unsigned int *v33; 
  unsigned int *v34; 
  unsigned int *v35; 
  unsigned int *v36; 
  unsigned int *v37; 
  unsigned int *v38; 
  unsigned int *v39; 
  unsigned int *v40; 
  unsigned int *v41; 
  unsigned int *v42; 
  unsigned int *v43; 
  unsigned int *v44; 
  unsigned int *v45; 
  unsigned int *v46; 
  unsigned int *v47; 
  unsigned int *v48; 
  unsigned int *v49; 
  unsigned int *v50; 
  unsigned int *v51; 
  unsigned int *v52; 
  unsigned int *v53; 
  unsigned int *v54; 
  unsigned int *v55; 
  unsigned int *v56; 
  unsigned int *v57; 
  unsigned int *v58; 
  unsigned int *v59; 
  unsigned int *v60; 
  unsigned int *v61; 
  unsigned int *v62; 
  unsigned int *v63; 
  unsigned int *v64; 
  unsigned int *v65; 
  unsigned int *v66; 
  unsigned int *v67; 
  unsigned int *v68; 
  GfxWorldDpvsStatic *v69; 
  unsigned int *v70; 
  unsigned __int16 *v71; 
  unsigned int *v72; 
  unsigned int *v73; 

  Load_Stream(streamStart, varGfxWorldDpvsStatic, 0x278ui64);
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->smodelVisData[0] )
  {
    v1 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v1;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->smodelVisData[1] )
  {
    v2 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v2;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->smodelVisData[2] )
  {
    v3 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v3;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->smodelVisData[3] )
  {
    v4 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v4;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->smodelVisData[4] )
  {
    v5 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v5;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->smodelVisData[5] )
  {
    v6 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v6;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->smodelVisData[6] )
  {
    v7 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v7;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->smodelVisData[7] )
  {
    v8 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v8;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->smodelVisData[8] )
  {
    v9 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v9;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->smodelVisData[9] )
  {
    v10 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v10;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->smodelVisData[10] )
  {
    v11 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v11;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->smodelVisData[11] )
  {
    v12 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v12;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->smodelVisData[12] )
  {
    v13 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v13;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->smodelVisData[13] )
  {
    v14 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v14;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->smodelVisData[14] )
  {
    v15 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v15;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->smodelVisData[15] )
  {
    v16 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v16;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->smodelVisData[16] )
  {
    v17 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v17;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->smodelVisData[17] )
  {
    v18 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v18;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->smodelVisData[18] )
  {
    v19 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v19;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->smodelVisData[19] )
  {
    v20 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v20;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->smodelVisData[20] )
  {
    v21 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v21;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->smodelVisData[21] )
  {
    v22 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v22;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->smodelVisData[22] )
  {
    v23 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v23;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->smodelVisData[23] )
  {
    v24 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v24;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->smodelVisData[24] )
  {
    v25 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v25;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->smodelVisData[25] )
  {
    v26 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v26;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->smodelVisData[26] )
  {
    v27 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v27;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->smodelVisData[27] )
  {
    v28 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v28;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->smodelVisData[28] )
  {
    v29 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v29;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->smodelVisData[29] )
  {
    v30 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v30;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->smodelVisData[30] )
  {
    v31 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v31;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->smodelVisData[31] )
  {
    v32 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->smodelVisDataCount);
    varraw_uint128 = v32;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->surfaceVisData[0] )
  {
    v33 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v33;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->surfaceVisData[1] )
  {
    v34 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v34;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->surfaceVisData[2] )
  {
    v35 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v35;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->surfaceVisData[3] )
  {
    v36 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v36;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->surfaceVisData[4] )
  {
    v37 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v37;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->surfaceVisData[5] )
  {
    v38 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v38;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->surfaceVisData[6] )
  {
    v39 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v39;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->surfaceVisData[7] )
  {
    v40 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v40;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->surfaceVisData[8] )
  {
    v41 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v41;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->surfaceVisData[9] )
  {
    v42 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v42;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->surfaceVisData[10] )
  {
    v43 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v43;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->surfaceVisData[11] )
  {
    v44 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, 0i64);
    varraw_uint128 = v44;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->surfaceVisData[12] )
  {
    v45 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v45;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->surfaceVisData[13] )
  {
    v46 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v46;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->surfaceVisData[14] )
  {
    v47 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v47;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->surfaceVisData[15] )
  {
    v48 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v48;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->surfaceVisData[16] )
  {
    v49 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v49;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->surfaceVisData[17] )
  {
    v50 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v50;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->surfaceVisData[18] )
  {
    v51 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v51;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->surfaceVisData[19] )
  {
    v52 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v52;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->surfaceVisData[20] )
  {
    v53 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v53;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->surfaceVisData[21] )
  {
    v54 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v54;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->surfaceVisData[22] )
  {
    v55 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v55;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->surfaceVisData[23] )
  {
    v56 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v56;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->surfaceVisData[24] )
  {
    v57 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v57;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->surfaceVisData[25] )
  {
    v58 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v58;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->surfaceVisData[26] )
  {
    v59 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v59;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->surfaceVisData[27] )
  {
    v60 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v60;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->surfaceVisData[28] )
  {
    v61 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v61;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->surfaceVisData[29] )
  {
    v62 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v62;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->surfaceVisData[30] )
  {
    v63 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v63;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->surfaceVisData[31] )
  {
    v64 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v64;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->primaryLightVisData )
  {
    v65 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->primaryLightVisDataCount);
    varraw_uint128 = v65;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->reflectionProbeVisData )
  {
    v66 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->reflectionProbeVisDataCount);
    varraw_uint128 = v66;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->volumetricVisData )
  {
    v67 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->volumetricVisDataCount);
    varraw_uint128 = v67;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->decalVisData )
  {
    v68 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->decalVisDataCount);
    varraw_uint128 = v68;
  }
  DB_PopStreamPos();
  v69 = varGfxWorldDpvsStatic;
  if ( varGfxWorldDpvsStatic->sortedSurfIndex )
  {
    v70 = varBSPSURF_COUNT_TYPE;
    varBSPSURF_COUNT_TYPE = AllocPreload_BSPSURF_COUNT_TYPE();
    Preload_BSPSURF_COUNT_TYPEArray(AtStart, 32i64 * varGfxWorldDpvsStatic->surfaceVisDataCount);
    v69 = varGfxWorldDpvsStatic;
    varBSPSURF_COUNT_TYPE = v70;
  }
  if ( v69->sortedSmodelIndices )
  {
    v71 = varushort;
    varushort = AllocPreload_ushort();
    Preload_ushortArray(AtStart, 32i64 * varGfxWorldDpvsStatic->smodelVisDataCount + 1);
    varushort = v71;
  }
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->surfaceCastsSunShadow )
  {
    v72 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->surfaceVisDataCount);
    varraw_uint128 = v72;
  }
  DB_PopStreamPos();
  DB_PushStreamPos(4u);
  if ( varGfxWorldDpvsStatic->surfaceCastsSunShadowOpt )
  {
    v73 = varraw_uint128;
    varraw_uint128 = AllocPreload_raw_uint128();
    Preload_raw_uint128Array(AtStart, varGfxWorldDpvsStatic->sunShadowOptCount * varGfxWorldDpvsStatic->sunSurfVisDataCount);
    varraw_uint128 = v73;
  }
  DB_PopStreamPos();
}

/*
==============
Preload_GfxWorldDpvsStaticArray
==============
*/
void Preload_GfxWorldDpvsStaticArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxWorldDpvsStatic *i; 

  v2 = count;
  Load_Stream(streamStart, varGfxWorldDpvsStatic, 632 * count);
  for ( i = varGfxWorldDpvsStatic; v2; --v2 )
  {
    varGfxWorldDpvsStatic = i;
    Preload_GfxWorldDpvsStatic(NotAtStart);
    ++i;
  }
}

/*
==============
Preload_GfxWorldDpvsStaticStream
==============
*/
void Preload_GfxWorldDpvsStaticStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 60902, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  for ( ; count; --count )
  {
    Preload_GfxWorldDpvsStatic(AtStart);
    varGfxWorldDpvsStatic = (GfxWorldDpvsStatic *)g_streamPosGlob.pos;
  }
}

/*
==============
Preload_GfxWorldDraw
==============
*/
void Preload_GfxWorldDraw(const DBStreamStart streamStart)
{
  GfxWorldReflectionProbeData *v1; 
  GfxWorldLightmapReindexData *v2; 
  GfxImage **v3; 
  GfxWorldDraw *v4; 
  GfxStaticDecalVolumeMaterial *v5; 
  __int64 decalVolumeMaterialCount; 
  GfxStaticDecalVolumeMaterial *i; 
  Material **v8; 
  GfxStaticDecalVolumeMask *v9; 
  __int64 decalVolumeMaskCount; 
  GfxStaticDecalVolumeMask *j; 
  GfxDecalVolumeMask **v12; 
  GfxDecalVolumeCollection *v13; 
  unsigned int *v14; 
  GfxWrappedBuffer *v15; 
  GfxWorldTransientZone **v16; 
  GfxWorldTransientZone **v17; 
  __int64 v18; 
  unsigned int *v19; 
  float4 *v20; 
  ID3D12Resource **v21; 
  GfxShaderBufferView *v22; 
  GfxWorldVolumetrics *v23; 
  unsigned __int8 *v24; 
  GfxWrappedRWBuffer *v25; 

  Load_Stream(streamStart, varGfxWorldDraw, 0x3200ui64);
  v1 = varGfxWorldReflectionProbeData;
  varGfxWorldReflectionProbeData = &varGfxWorldDraw->reflectionProbeData;
  Preload_GfxWorldReflectionProbeData(NotAtStart);
  varGfxWorldReflectionProbeData = v1;
  v2 = varGfxWorldLightmapReindexData;
  varGfxWorldLightmapReindexData = &varGfxWorldDraw->lightmapReindexData;
  Preload_GfxWorldLightmapReindexData(NotAtStart);
  varGfxWorldLightmapReindexData = v2;
  v3 = varGfxImagePtr;
  varGfxImagePtr = &varGfxWorldDraw->iesLookupTexture;
  Preload_GfxImagePtr(NotAtStart);
  v4 = varGfxWorldDraw;
  varGfxImagePtr = v3;
  if ( varGfxWorldDraw->decalVolumeMaterials )
  {
    v5 = varGfxStaticDecalVolumeMaterial;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxStaticDecalVolumeMaterial = (GfxStaticDecalVolumeMaterial *)g_streamPosGlob.pos;
    decalVolumeMaterialCount = varGfxWorldDraw->decalVolumeMaterialCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 8 * decalVolumeMaterialCount);
    for ( i = varGfxStaticDecalVolumeMaterial; decalVolumeMaterialCount; --decalVolumeMaterialCount )
    {
      varGfxStaticDecalVolumeMaterial = i;
      Load_Stream(NotAtStart, i, 8ui64);
      v8 = varMaterialHandle;
      varMaterialHandle = &varGfxStaticDecalVolumeMaterial->material;
      Preload_MaterialHandle(NotAtStart);
      ++i;
      varMaterialHandle = v8;
    }
    v4 = varGfxWorldDraw;
    varGfxStaticDecalVolumeMaterial = v5;
  }
  if ( v4->decalVolumeMasks )
  {
    v9 = varGfxStaticDecalVolumeMask;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxStaticDecalVolumeMask = (GfxStaticDecalVolumeMask *)g_streamPosGlob.pos;
    decalVolumeMaskCount = varGfxWorldDraw->decalVolumeMaskCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 8 * decalVolumeMaskCount);
    for ( j = varGfxStaticDecalVolumeMask; decalVolumeMaskCount; --decalVolumeMaskCount )
    {
      varGfxStaticDecalVolumeMask = j;
      Load_Stream(NotAtStart, j, 8ui64);
      v12 = varGfxDecalVolumeMaskPtr;
      varGfxDecalVolumeMaskPtr = &varGfxStaticDecalVolumeMask->blendMapOverride;
      Preload_GfxDecalVolumeMaskPtr(NotAtStart);
      ++j;
      varGfxDecalVolumeMaskPtr = v12;
    }
    v4 = varGfxWorldDraw;
    varGfxStaticDecalVolumeMask = v9;
  }
  if ( v4->decalVolumeCollections )
  {
    v13 = varGfxDecalVolumeCollection;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxDecalVolumeCollection = (GfxDecalVolumeCollection *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 8i64 * varGfxWorldDraw->decalVolumeCollectionCount);
    varGfxDecalVolumeCollection = v13;
  }
  DB_PushStreamPos(7u);
  if ( varGfxWorldDraw->materialAndMaskIndirection )
  {
    v14 = varuint;
    varuint = AllocPreload_uint();
    Preload_uintArray(AtStart, varGfxWorldDraw->decalVolumeMaterialCount + varGfxWorldDraw->decalVolumeMaskCount);
    varuint = v14;
  }
  DB_PopStreamPos();
  v15 = varGfxWrappedBuffer;
  varGfxWrappedBuffer = &varGfxWorldDraw->materialAndMaskIndirectionBuffer;
  Preload_GfxWrappedBuffer(NotAtStart);
  v16 = varGfxWorldTransientZonePtr;
  varGfxWorldTransientZonePtr = varGfxWorldDraw->transientZones;
  varGfxWrappedBuffer = v15;
  Load_Stream(NotAtStart, varGfxWorldDraw->transientZones, 0x3000ui64);
  v17 = varGfxWorldTransientZonePtr;
  v18 = 1536i64;
  do
  {
    varGfxWorldTransientZonePtr = v17;
    Preload_GfxWorldTransientZonePtr(NotAtStart);
    ++v17;
    --v18;
  }
  while ( v18 );
  varGfxWorldTransientZonePtr = v16;
  if ( varGfxWorldDraw->lightmapTransientIndex )
  {
    v19 = varuint;
    varuint = AllocPreload_uint();
    Preload_uintArray(AtStart, varGfxWorldDraw->lightmapCount);
    varuint = v19;
  }
  DB_PushStreamPos(7u);
  if ( varGfxWorldDraw->displacementParms )
  {
    v20 = varGfxDisplacementParms;
    DB_PatchMem_FixStreamAlignment(0x3Fui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxDisplacementParms = (float4 *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varGfxWorldDraw->displacementParmsCount);
    varGfxDisplacementParms = v20;
  }
  DB_PopStreamPos();
  v21 = varGfxVertexBuffer;
  varGfxVertexBuffer = &varGfxWorldDraw->displacementParmsBuffer;
  Preload_GfxVertexBuffer(NotAtStart);
  varGfxVertexBuffer = v21;
  v22 = varGfxShaderBufferView;
  varGfxShaderBufferView = &varGfxWorldDraw->displacementParmsView;
  Preload_GfxShaderBufferView(NotAtStart);
  varGfxShaderBufferView = v22;
  v23 = varGfxWorldVolumetrics;
  varGfxWorldVolumetrics = &varGfxWorldDraw->volumetrics;
  Preload_GfxWorldVolumetrics(NotAtStart);
  varGfxWorldVolumetrics = v23;
  DB_PushStreamPos(7u);
  if ( varGfxWorldDraw->compressedSunShadow )
  {
    v24 = varbyte;
    varbyte = AllocPreload_byte();
    Preload_byteArray(AtStart, varGfxWorldDraw->compressedSunShadowSize);
    varbyte = v24;
  }
  DB_PopStreamPos();
  v25 = varGfxWrappedRWBuffer;
  varGfxWrappedRWBuffer = &varGfxWorldDraw->compressedSunShadowBuffer;
  Preload_GfxWrappedRWBuffer(NotAtStart);
  varGfxWrappedRWBuffer = v25;
}

/*
==============
Preload_GfxWorldDrawArray
==============
*/
void Preload_GfxWorldDrawArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxWorldDraw *i; 

  v2 = count;
  Load_Stream(streamStart, varGfxWorldDraw, 12800 * count);
  for ( i = varGfxWorldDraw; v2; --v2 )
  {
    varGfxWorldDraw = i;
    Preload_GfxWorldDraw(NotAtStart);
    ++i;
  }
}

/*
==============
Preload_GfxWorldDrawCells
==============
*/
void Preload_GfxWorldDrawCells(const DBStreamStart streamStart)
{
  GfxWorldDrawCells *v1; 
  GfxCellTreeCount *v2; 
  GfxCellTree *v3; 
  __int64 cellCount; 
  GfxCellTree *i; 

  Load_Stream(streamStart, varGfxWorldDrawCells, 0x18ui64);
  v1 = varGfxWorldDrawCells;
  if ( varGfxWorldDrawCells->aabbTreeCounts )
  {
    v2 = varGfxCellTreeCount;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxCellTreeCount = (GfxCellTreeCount *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 4i64 * varGfxWorldDrawCells->cellCount);
    v1 = varGfxWorldDrawCells;
    varGfxCellTreeCount = v2;
  }
  if ( v1->aabbTrees )
  {
    v3 = varGfxCellTree;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxCellTree = (GfxCellTree *)g_streamPosGlob.pos;
    cellCount = varGfxWorldDrawCells->cellCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 8 * cellCount);
    for ( i = varGfxCellTree; cellCount; --cellCount )
    {
      varGfxCellTree = i;
      Preload_GfxCellTree(NotAtStart);
      ++i;
    }
    varGfxCellTree = v3;
  }
}

/*
==============
Preload_GfxWorldDrawCellsArray
==============
*/
void Preload_GfxWorldDrawCellsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxWorldDrawCells *i; 
  GfxWorldDrawCells *v4; 
  GfxCellTreeCount *v5; 
  GfxCellTree *v6; 
  __int64 cellCount; 
  GfxCellTree *j; 

  v2 = count;
  Load_Stream(streamStart, varGfxWorldDrawCells, 24 * count);
  for ( i = varGfxWorldDrawCells; v2; --v2 )
  {
    varGfxWorldDrawCells = i;
    Load_Stream(NotAtStart, i, 0x18ui64);
    v4 = varGfxWorldDrawCells;
    if ( varGfxWorldDrawCells->aabbTreeCounts )
    {
      v5 = varGfxCellTreeCount;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      varGfxCellTreeCount = (GfxCellTreeCount *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 4i64 * varGfxWorldDrawCells->cellCount);
      v4 = varGfxWorldDrawCells;
      varGfxCellTreeCount = v5;
    }
    if ( v4->aabbTrees )
    {
      v6 = varGfxCellTree;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      varGfxCellTree = (GfxCellTree *)g_streamPosGlob.pos;
      cellCount = varGfxWorldDrawCells->cellCount;
      Load_Stream(AtStart, g_streamPosGlob.pos, 8 * cellCount);
      for ( j = varGfxCellTree; cellCount; --cellCount )
      {
        varGfxCellTree = j;
        Preload_GfxCellTree(NotAtStart);
        ++j;
      }
      varGfxCellTree = v6;
    }
    ++i;
  }
}

/*
==============
Preload_GfxWorldDrawCellsStream
==============
*/
void Preload_GfxWorldDrawCellsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxWorldDrawCells *v4; 
  GfxCellTreeCount *v5; 
  GfxCellTree *v6; 
  __int64 cellCount; 
  GfxCellTree *i; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 61389, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxWorldDrawCells;
    do
    {
      Load_Stream(AtStart, pos, 0x18ui64);
      v4 = varGfxWorldDrawCells;
      if ( varGfxWorldDrawCells->aabbTreeCounts )
      {
        v5 = varGfxCellTreeCount;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        varGfxCellTreeCount = (GfxCellTreeCount *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 4i64 * varGfxWorldDrawCells->cellCount);
        v4 = varGfxWorldDrawCells;
        varGfxCellTreeCount = v5;
      }
      if ( v4->aabbTrees )
      {
        v6 = varGfxCellTree;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varGfxCellTree = (GfxCellTree *)g_streamPosGlob.pos;
        cellCount = varGfxWorldDrawCells->cellCount;
        Load_Stream(AtStart, g_streamPosGlob.pos, 8 * cellCount);
        for ( i = varGfxCellTree; cellCount; --cellCount )
        {
          varGfxCellTree = i;
          Preload_GfxCellTree(NotAtStart);
          ++i;
        }
        varGfxCellTree = v6;
      }
      pos = g_streamPosGlob.pos;
      varGfxWorldDrawCells = (GfxWorldDrawCells *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxWorldDrawStream
==============
*/
void Preload_GfxWorldDrawStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 66075, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  for ( ; count; --count )
  {
    Preload_GfxWorldDraw(AtStart);
    varGfxWorldDraw = (GfxWorldDraw *)g_streamPosGlob.pos;
  }
}

/*
==============
Preload_GfxWorldLightmapImagePtrArray
==============
*/
void Preload_GfxWorldLightmapImagePtrArray(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxWorldLightmapImagePtrArray, 0x18ui64);
}

/*
==============
Preload_GfxWorldLightmapImagePtrArrayArray
==============
*/
void Preload_GfxWorldLightmapImagePtrArrayArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxWorldLightmapImagePtrArray, 24 * count);
}

/*
==============
Preload_GfxWorldLightmapImagePtrArrayStream
==============
*/
void Preload_GfxWorldLightmapImagePtrArrayStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 64191, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxWorldLightmapImagePtrArray;
    do
    {
      Load_Stream(AtStart, pos, 0x18ui64);
      pos = g_streamPosGlob.pos;
      varGfxWorldLightmapImagePtrArray = (GfxWorldLightmapImagePtrArray *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxWorldLightmapReindexData
==============
*/
void Preload_GfxWorldLightmapReindexData(const DBStreamStart streamStart)
{
  GfxWorldLightmapReindexData *v1; 
  GfxWorldLightmapReindexDataElement *v2; 
  GfxWorldPackedLightmap *v3; 

  Load_Stream(streamStart, varGfxWorldLightmapReindexData, 0x20ui64);
  v1 = varGfxWorldLightmapReindexData;
  if ( varGfxWorldLightmapReindexData->reindexElement )
  {
    v2 = varGfxWorldLightmapReindexDataElement;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxWorldLightmapReindexDataElement = (GfxWorldLightmapReindexDataElement *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 20i64 * varGfxWorldLightmapReindexData->reindexCount);
    v1 = varGfxWorldLightmapReindexData;
    varGfxWorldLightmapReindexDataElement = v2;
  }
  if ( v1->packedLightmap )
  {
    v3 = varGfxWorldPackedLightmap;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxWorldPackedLightmap = (GfxWorldPackedLightmap *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 8i64 * varGfxWorldLightmapReindexData->packedLightmapCount);
    varGfxWorldPackedLightmap = v3;
  }
}

/*
==============
Preload_GfxWorldLightmapReindexDataArray
==============
*/
void Preload_GfxWorldLightmapReindexDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxWorldLightmapReindexData *i; 
  GfxWorldLightmapReindexData *v4; 
  GfxWorldLightmapReindexDataElement *v5; 
  GfxWorldPackedLightmap *v6; 

  v2 = count;
  Load_Stream(streamStart, varGfxWorldLightmapReindexData, 32 * count);
  for ( i = varGfxWorldLightmapReindexData; v2; --v2 )
  {
    varGfxWorldLightmapReindexData = i;
    Load_Stream(NotAtStart, i, 0x20ui64);
    v4 = varGfxWorldLightmapReindexData;
    if ( varGfxWorldLightmapReindexData->reindexElement )
    {
      v5 = varGfxWorldLightmapReindexDataElement;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      varGfxWorldLightmapReindexDataElement = (GfxWorldLightmapReindexDataElement *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 20i64 * varGfxWorldLightmapReindexData->reindexCount);
      v4 = varGfxWorldLightmapReindexData;
      varGfxWorldLightmapReindexDataElement = v5;
    }
    if ( v4->packedLightmap )
    {
      v6 = varGfxWorldPackedLightmap;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      varGfxWorldPackedLightmap = (GfxWorldPackedLightmap *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 8i64 * varGfxWorldLightmapReindexData->packedLightmapCount);
      varGfxWorldPackedLightmap = v6;
    }
    ++i;
  }
}

/*
==============
Preload_GfxWorldLightmapReindexDataElement
==============
*/
void Preload_GfxWorldLightmapReindexDataElement(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxWorldLightmapReindexDataElement, 0x14ui64);
}

/*
==============
Preload_GfxWorldLightmapReindexDataElementArray
==============
*/
void Preload_GfxWorldLightmapReindexDataElementArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxWorldLightmapReindexDataElement, 20 * count);
}

/*
==============
Preload_GfxWorldLightmapReindexDataElementStream
==============
*/
void Preload_GfxWorldLightmapReindexDataElementStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 63844, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxWorldLightmapReindexDataElement;
    do
    {
      Load_Stream(AtStart, pos, 0x14ui64);
      pos = g_streamPosGlob.pos;
      varGfxWorldLightmapReindexDataElement = (GfxWorldLightmapReindexDataElement *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxWorldLightmapReindexDataStream
==============
*/
void Preload_GfxWorldLightmapReindexDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  GfxWorldLightmapReindexData *v4; 
  GfxWorldLightmapReindexDataElement *v5; 
  GfxWorldPackedLightmap *v6; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 64115, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxWorldLightmapReindexData;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      v4 = varGfxWorldLightmapReindexData;
      if ( varGfxWorldLightmapReindexData->reindexElement )
      {
        v5 = varGfxWorldLightmapReindexDataElement;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        varGfxWorldLightmapReindexDataElement = (GfxWorldLightmapReindexDataElement *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 20i64 * varGfxWorldLightmapReindexData->reindexCount);
        v4 = varGfxWorldLightmapReindexData;
        varGfxWorldLightmapReindexDataElement = v5;
      }
      if ( v4->packedLightmap )
      {
        v6 = varGfxWorldPackedLightmap;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        varGfxWorldPackedLightmap = (GfxWorldPackedLightmap *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 8i64 * varGfxWorldLightmapReindexData->packedLightmapCount);
        varGfxWorldPackedLightmap = v6;
      }
      pos = g_streamPosGlob.pos;
      varGfxWorldLightmapReindexData = (GfxWorldLightmapReindexData *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxWorldPackedLightmap
==============
*/
void Preload_GfxWorldPackedLightmap(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varGfxWorldPackedLightmap, 8ui64);
}

/*
==============
Preload_GfxWorldPackedLightmapArray
==============
*/
void Preload_GfxWorldPackedLightmapArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varGfxWorldPackedLightmap, 8 * count);
}

/*
==============
Preload_GfxWorldPackedLightmapStream
==============
*/
void Preload_GfxWorldPackedLightmapStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 63943, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxWorldPackedLightmap;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      pos = g_streamPosGlob.pos;
      varGfxWorldPackedLightmap = (GfxWorldPackedLightmap *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxWorldPtr
==============
*/
void Preload_GfxWorldPtr(const DBStreamStart streamStart)
{
  __int64 v1; 
  GfxWorld *v2; 

  Load_Stream(streamStart, varGfxWorldPtr, 8ui64);
  DB_PushStreamPos(2u);
  v1 = (__int64)*varGfxWorldPtr;
  if ( *varGfxWorldPtr )
  {
    if ( v1 == -1 )
    {
      DB_PushSharedData();
    }
    else if ( v1 != -2 && v1 != -3 )
    {
      goto LABEL_11;
    }
    v2 = varGfxWorld;
    DB_PatchMem_FixStreamAlignment(0xFui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxWorld = (GfxWorld *)g_streamPosGlob.pos;
    if ( v1 == -3 )
      DB_InsertPointer();
    Preload_GfxWorld(AtStart);
    varGfxWorld = v2;
    if ( v1 == -1 )
      DB_PopSharedData();
  }
LABEL_11:
  DB_PopStreamPos();
}

/*
==============
Preload_GfxWorldPtrArray
==============
*/
void Preload_GfxWorldPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxWorld **i; 
  __int64 v4; 
  GfxWorld *v5; 

  v2 = count;
  Load_Stream(streamStart, varGfxWorldPtr, 8 * count);
  for ( i = varGfxWorldPtr; v2; --v2 )
  {
    varGfxWorldPtr = i;
    Load_Stream(NotAtStart, i, 8ui64);
    DB_PushStreamPos(2u);
    v4 = (__int64)*varGfxWorldPtr;
    if ( *varGfxWorldPtr )
    {
      if ( v4 == -1 )
      {
        DB_PushSharedData();
LABEL_8:
        v5 = varGfxWorld;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        varGfxWorld = (GfxWorld *)g_streamPosGlob.pos;
        if ( v4 == -3 )
          DB_InsertPointer();
        Preload_GfxWorld(AtStart);
        varGfxWorld = v5;
        if ( v4 == -1 )
          DB_PopSharedData();
        goto LABEL_12;
      }
      if ( v4 == -2 || v4 == -3 )
        goto LABEL_8;
    }
LABEL_12:
    DB_PopStreamPos();
    ++i;
  }
}

/*
==============
Preload_GfxWorldPtrStream
==============
*/
void Preload_GfxWorldPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  __int64 v4; 
  GfxWorld *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 73210, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxWorldPtr;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      DB_PushStreamPos(2u);
      v4 = (__int64)*varGfxWorldPtr;
      if ( *varGfxWorldPtr )
      {
        if ( v4 == -1 )
        {
          DB_PushSharedData();
LABEL_12:
          v5 = varGfxWorld;
          DB_PatchMem_FixStreamAlignment(0xFui64);
          DB_CheckCanIncStreamPos(0i64);
          varGfxWorld = (GfxWorld *)g_streamPosGlob.pos;
          if ( v4 == -3 )
            DB_InsertPointer();
          Preload_GfxWorld(AtStart);
          varGfxWorld = v5;
          if ( v4 == -1 )
            DB_PopSharedData();
          goto LABEL_16;
        }
        if ( v4 == -2 || v4 == -3 )
          goto LABEL_12;
      }
LABEL_16:
      DB_PopStreamPos();
      pos = g_streamPosGlob.pos;
      varGfxWorldPtr = (GfxWorld **)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxWorldStream
==============
*/
void Preload_GfxWorldStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 73095, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  for ( ; count; --count )
  {
    Preload_GfxWorld(AtStart);
    varGfxWorld = (GfxWorld *)g_streamPosGlob.pos;
  }
}

/*
==============
Preload_GfxWorldTransientZone
==============
*/
void Preload_GfxWorldTransientZone(const DBStreamStart streamStart)
{
  const char **v2; 
  GfxWorldDrawVerts *v3; 
  GfxWorldDrawCells *v4; 
  GfxLightmapAtlasDataTemp **v5; 
  GfxLightmapAtlasDataTemp *v6; 
  GfxGpuLightGridTransientData *v7; 
  GfxWorldTransientZone *v8; 
  GfxReflectionProbeTransientData *v9; 
  unsigned __int16 *v10; 
  GfxDecalVolumeTransientData *v11; 
  GfxCompressedSunShadowDataTemp **v12; 
  GfxCompressedSunShadowDataTemp *v13; 

  DB_PatchMem_PushAsset(28, varGfxWorldTransientZone);
  Load_Stream(streamStart, varGfxWorldTransientZone, 0x100ui64);
  DB_PushStreamPos(8u);
  v2 = varXString;
  varXString = &varGfxWorldTransientZone->name;
  Preload_XString(NotAtStart);
  varXString = v2;
  v3 = varGfxWorldDrawVerts;
  varGfxWorldDrawVerts = &varGfxWorldTransientZone->drawVerts;
  Preload_GfxWorldDrawVerts(NotAtStart);
  varGfxWorldDrawVerts = v3;
  v4 = varGfxWorldDrawCells;
  varGfxWorldDrawCells = &varGfxWorldTransientZone->drawCells;
  Preload_GfxWorldDrawCells(NotAtStart);
  v5 = varGfxLightmapAtlasDataTempPtr;
  varGfxWorldDrawCells = v4;
  varGfxLightmapAtlasDataTempPtr = &varGfxWorldTransientZone->tempLightmapData;
  Load_Stream(NotAtStart, &varGfxWorldTransientZone->tempLightmapData, 8ui64);
  if ( *varGfxLightmapAtlasDataTempPtr )
  {
    v6 = varGfxLightmapAtlasDataTemp;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxLightmapAtlasDataTemp = (GfxLightmapAtlasDataTemp *)g_streamPosGlob.pos;
    Preload_GfxLightmapAtlasDataTemp(AtStart);
    varGfxLightmapAtlasDataTemp = v6;
  }
  v7 = varGfxGpuLightGridTransientData;
  varGfxGpuLightGridTransientData = &varGfxWorldTransientZone->gpuLightGrid;
  varGfxLightmapAtlasDataTempPtr = v5;
  Preload_GfxGpuLightGridTransientData(NotAtStart);
  v8 = varGfxWorldTransientZone;
  varGfxGpuLightGridTransientData = v7;
  if ( varGfxWorldTransientZone->reflectionProbes )
  {
    v9 = varGfxReflectionProbeTransientData;
    varGfxReflectionProbeTransientData = AllocPreload_GfxReflectionProbeTransientData();
    Preload_GfxReflectionProbeTransientData(AtStart);
    v8 = varGfxWorldTransientZone;
    varGfxReflectionProbeTransientData = v9;
  }
  if ( v8->collections )
  {
    v10 = varushort;
    varushort = AllocPreload_ushort();
    Preload_ushortArray(AtStart, varGfxWorldTransientZone->collectionCount);
    v8 = varGfxWorldTransientZone;
    varushort = v10;
  }
  if ( v8->decalVolumes )
  {
    v11 = varGfxDecalVolumeTransientData;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxDecalVolumeTransientData = (GfxDecalVolumeTransientData *)g_streamPosGlob.pos;
    Preload_GfxDecalVolumeTransientData(AtStart);
    v8 = varGfxWorldTransientZone;
    varGfxDecalVolumeTransientData = v11;
  }
  v12 = varGfxCompressedSunShadowDataTempPtr;
  varGfxCompressedSunShadowDataTempPtr = &v8->compressedSunShadow;
  Load_Stream(NotAtStart, &v8->compressedSunShadow, 8ui64);
  if ( *varGfxCompressedSunShadowDataTempPtr )
  {
    v13 = varGfxCompressedSunShadowDataTemp;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxCompressedSunShadowDataTemp = (GfxCompressedSunShadowDataTemp *)g_streamPosGlob.pos;
    Preload_GfxCompressedSunShadowDataTemp(AtStart);
    varGfxCompressedSunShadowDataTemp = v13;
  }
  varGfxCompressedSunShadowDataTempPtr = v12;
  DB_PopStreamPos();
  DB_PatchMem_PopAsset();
}

/*
==============
Preload_GfxWorldTransientZoneArray
==============
*/
void Preload_GfxWorldTransientZoneArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxWorldTransientZone *i; 
  const char **v4; 
  GfxWorldDrawVerts *v5; 
  GfxWorldDrawCells *v6; 
  GfxLightmapAtlasDataTemp **v7; 
  GfxLightmapAtlasDataTemp *v8; 
  GfxGpuLightGridTransientData *v9; 
  GfxWorldTransientZone *v10; 
  GfxReflectionProbeTransientData *v11; 
  unsigned __int16 *v12; 
  GfxDecalVolumeTransientData *v13; 
  GfxCompressedSunShadowDataTemp **v14; 
  GfxCompressedSunShadowDataTemp *v15; 

  v2 = count;
  Load_Stream(streamStart, varGfxWorldTransientZone, count << 8);
  for ( i = varGfxWorldTransientZone; v2; --v2 )
  {
    varGfxWorldTransientZone = i;
    DB_PatchMem_PushAsset(28, i);
    Load_Stream(NotAtStart, varGfxWorldTransientZone, 0x100ui64);
    DB_PushStreamPos(8u);
    v4 = varXString;
    varXString = &varGfxWorldTransientZone->name;
    Preload_XString(NotAtStart);
    varXString = v4;
    v5 = varGfxWorldDrawVerts;
    varGfxWorldDrawVerts = &varGfxWorldTransientZone->drawVerts;
    Preload_GfxWorldDrawVerts(NotAtStart);
    varGfxWorldDrawVerts = v5;
    v6 = varGfxWorldDrawCells;
    varGfxWorldDrawCells = &varGfxWorldTransientZone->drawCells;
    Preload_GfxWorldDrawCells(NotAtStart);
    v7 = varGfxLightmapAtlasDataTempPtr;
    varGfxWorldDrawCells = v6;
    varGfxLightmapAtlasDataTempPtr = &varGfxWorldTransientZone->tempLightmapData;
    Load_Stream(NotAtStart, &varGfxWorldTransientZone->tempLightmapData, 8ui64);
    if ( *varGfxLightmapAtlasDataTempPtr )
    {
      v8 = varGfxLightmapAtlasDataTemp;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      varGfxLightmapAtlasDataTemp = (GfxLightmapAtlasDataTemp *)g_streamPosGlob.pos;
      Preload_GfxLightmapAtlasDataTemp(AtStart);
      varGfxLightmapAtlasDataTemp = v8;
    }
    v9 = varGfxGpuLightGridTransientData;
    varGfxGpuLightGridTransientData = &varGfxWorldTransientZone->gpuLightGrid;
    varGfxLightmapAtlasDataTempPtr = v7;
    Preload_GfxGpuLightGridTransientData(NotAtStart);
    v10 = varGfxWorldTransientZone;
    varGfxGpuLightGridTransientData = v9;
    if ( varGfxWorldTransientZone->reflectionProbes )
    {
      v11 = varGfxReflectionProbeTransientData;
      varGfxReflectionProbeTransientData = AllocPreload_GfxReflectionProbeTransientData();
      Preload_GfxReflectionProbeTransientData(AtStart);
      v10 = varGfxWorldTransientZone;
      varGfxReflectionProbeTransientData = v11;
    }
    if ( v10->collections )
    {
      v12 = varushort;
      varushort = AllocPreload_ushort();
      Preload_ushortArray(AtStart, varGfxWorldTransientZone->collectionCount);
      v10 = varGfxWorldTransientZone;
      varushort = v12;
    }
    if ( v10->decalVolumes )
    {
      v13 = varGfxDecalVolumeTransientData;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      varGfxDecalVolumeTransientData = (GfxDecalVolumeTransientData *)g_streamPosGlob.pos;
      Preload_GfxDecalVolumeTransientData(AtStart);
      v10 = varGfxWorldTransientZone;
      varGfxDecalVolumeTransientData = v13;
    }
    v14 = varGfxCompressedSunShadowDataTempPtr;
    varGfxCompressedSunShadowDataTempPtr = &v10->compressedSunShadow;
    Load_Stream(NotAtStart, &v10->compressedSunShadow, 8ui64);
    if ( *varGfxCompressedSunShadowDataTempPtr )
    {
      v15 = varGfxCompressedSunShadowDataTemp;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      varGfxCompressedSunShadowDataTemp = (GfxCompressedSunShadowDataTemp *)g_streamPosGlob.pos;
      Preload_GfxCompressedSunShadowDataTemp(AtStart);
      varGfxCompressedSunShadowDataTemp = v15;
    }
    varGfxCompressedSunShadowDataTempPtr = v14;
    DB_PopStreamPos();
    DB_PatchMem_PopAsset();
    ++i;
  }
}

/*
==============
Preload_GfxWorldTransientZonePtr
==============
*/
void Preload_GfxWorldTransientZonePtr(const DBStreamStart streamStart)
{
  __int64 v1; 
  GfxWorldTransientZone *v2; 

  Load_Stream(streamStart, varGfxWorldTransientZonePtr, 8ui64);
  DB_PushStreamPos(2u);
  v1 = (__int64)*varGfxWorldTransientZonePtr;
  if ( *varGfxWorldTransientZonePtr )
  {
    if ( v1 == -1 )
    {
      DB_PushSharedData();
    }
    else if ( v1 != -2 && v1 != -3 )
    {
      goto LABEL_11;
    }
    v2 = varGfxWorldTransientZone;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varGfxWorldTransientZone = (GfxWorldTransientZone *)g_streamPosGlob.pos;
    if ( v1 == -3 )
      DB_InsertPointer();
    Preload_GfxWorldTransientZone(AtStart);
    varGfxWorldTransientZone = v2;
    if ( v1 == -1 )
      DB_PopSharedData();
  }
LABEL_11:
  DB_PopStreamPos();
}

/*
==============
Preload_GfxWorldTransientZonePtrArray
==============
*/
void Preload_GfxWorldTransientZonePtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  GfxWorldTransientZone **i; 
  __int64 v4; 
  GfxWorldTransientZone *v5; 

  v2 = count;
  Load_Stream(streamStart, varGfxWorldTransientZonePtr, 8 * count);
  for ( i = varGfxWorldTransientZonePtr; v2; --v2 )
  {
    varGfxWorldTransientZonePtr = i;
    Load_Stream(NotAtStart, i, 8ui64);
    DB_PushStreamPos(2u);
    v4 = (__int64)*varGfxWorldTransientZonePtr;
    if ( *varGfxWorldTransientZonePtr )
    {
      if ( v4 == -1 )
      {
        DB_PushSharedData();
LABEL_8:
        v5 = varGfxWorldTransientZone;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varGfxWorldTransientZone = (GfxWorldTransientZone *)g_streamPosGlob.pos;
        if ( v4 == -3 )
          DB_InsertPointer();
        Preload_GfxWorldTransientZone(AtStart);
        varGfxWorldTransientZone = v5;
        if ( v4 == -1 )
          DB_PopSharedData();
        goto LABEL_12;
      }
      if ( v4 == -2 || v4 == -3 )
        goto LABEL_8;
    }
LABEL_12:
    DB_PopStreamPos();
    ++i;
  }
}

/*
==============
Preload_GfxWorldTransientZonePtrStream
==============
*/
void Preload_GfxWorldTransientZonePtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  __int64 v4; 
  GfxWorldTransientZone *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 62765, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxWorldTransientZonePtr;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      DB_PushStreamPos(2u);
      v4 = (__int64)*varGfxWorldTransientZonePtr;
      if ( *varGfxWorldTransientZonePtr )
      {
        if ( v4 == -1 )
        {
          DB_PushSharedData();
LABEL_12:
          v5 = varGfxWorldTransientZone;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varGfxWorldTransientZone = (GfxWorldTransientZone *)g_streamPosGlob.pos;
          if ( v4 == -3 )
            DB_InsertPointer();
          Preload_GfxWorldTransientZone(AtStart);
          varGfxWorldTransientZone = v5;
          if ( v4 == -1 )
            DB_PopSharedData();
          goto LABEL_16;
        }
        if ( v4 == -2 || v4 == -3 )
          goto LABEL_12;
      }
LABEL_16:
      DB_PopStreamPos();
      pos = g_streamPosGlob.pos;
      varGfxWorldTransientZonePtr = (GfxWorldTransientZone **)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_GfxWorldTransientZoneStream
==============
*/
void Preload_GfxWorldTransientZoneStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  const char **v4; 
  GfxWorldDrawVerts *v5; 
  GfxWorldDrawCells *v6; 
  GfxLightmapAtlasDataTemp **v7; 
  GfxLightmapAtlasDataTemp *v8; 
  GfxGpuLightGridTransientData *v9; 
  GfxWorldTransientZone *v10; 
  GfxReflectionProbeTransientData *v11; 
  unsigned __int16 *v12; 
  GfxDecalVolumeTransientData *v13; 
  GfxCompressedSunShadowDataTemp **v14; 
  GfxCompressedSunShadowDataTemp *v15; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 62642, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varGfxWorldTransientZone;
    do
    {
      DB_PatchMem_PushAsset(28, pos);
      Load_Stream(AtStart, varGfxWorldTransientZone, 0x100ui64);
      DB_PushStreamPos(8u);
      v4 = varXString;
      varXString = &varGfxWorldTransientZone->name;
      Preload_XString(NotAtStart);
      varXString = v4;
      v5 = varGfxWorldDrawVerts;
      varGfxWorldDrawVerts = &varGfxWorldTransientZone->drawVerts;
      Preload_GfxWorldDrawVerts(NotAtStart);
      varGfxWorldDrawVerts = v5;
      v6 = varGfxWorldDrawCells;
      varGfxWorldDrawCells = &varGfxWorldTransientZone->drawCells;
      Preload_GfxWorldDrawCells(NotAtStart);
      v7 = varGfxLightmapAtlasDataTempPtr;
      varGfxWorldDrawCells = v6;
      varGfxLightmapAtlasDataTempPtr = &varGfxWorldTransientZone->tempLightmapData;
      Load_Stream(NotAtStart, &varGfxWorldTransientZone->tempLightmapData, 8ui64);
      if ( *varGfxLightmapAtlasDataTempPtr )
      {
        v8 = varGfxLightmapAtlasDataTemp;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varGfxLightmapAtlasDataTemp = (GfxLightmapAtlasDataTemp *)g_streamPosGlob.pos;
        Preload_GfxLightmapAtlasDataTemp(AtStart);
        varGfxLightmapAtlasDataTemp = v8;
      }
      v9 = varGfxGpuLightGridTransientData;
      varGfxGpuLightGridTransientData = &varGfxWorldTransientZone->gpuLightGrid;
      varGfxLightmapAtlasDataTempPtr = v7;
      Preload_GfxGpuLightGridTransientData(NotAtStart);
      v10 = varGfxWorldTransientZone;
      varGfxGpuLightGridTransientData = v9;
      if ( varGfxWorldTransientZone->reflectionProbes )
      {
        v11 = varGfxReflectionProbeTransientData;
        varGfxReflectionProbeTransientData = AllocPreload_GfxReflectionProbeTransientData();
        Preload_GfxReflectionProbeTransientData(AtStart);
        v10 = varGfxWorldTransientZone;
        varGfxReflectionProbeTransientData = v11;
      }
      if ( v10->collections )
      {
        v12 = varushort;
        varushort = AllocPreload_ushort();
        Preload_ushortArray(AtStart, varGfxWorldTransientZone->collectionCount);
        v10 = varGfxWorldTransientZone;
        varushort = v12;
      }
      if ( v10->decalVolumes )
      {
        v13 = varGfxDecalVolumeTransientData;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varGfxDecalVolumeTransientData = (GfxDecalVolumeTransientData *)g_streamPosGlob.pos;
        Preload_GfxDecalVolumeTransientData(AtStart);
        v10 = varGfxWorldTransientZone;
        varGfxDecalVolumeTransientData = v13;
      }
      v14 = varGfxCompressedSunShadowDataTempPtr;
      varGfxCompressedSunShadowDataTempPtr = &v10->compressedSunShadow;
      Load_Stream(NotAtStart, &v10->compressedSunShadow, 8ui64);
      if ( *varGfxCompressedSunShadowDataTempPtr )
      {
        v15 = varGfxCompressedSunShadowDataTemp;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varGfxCompressedSunShadowDataTemp = (GfxCompressedSunShadowDataTemp *)g_streamPosGlob.pos;
        Preload_GfxCompressedSunShadowDataTemp(AtStart);
        varGfxCompressedSunShadowDataTemp = v15;
      }
      varGfxCompressedSunShadowDataTempPtr = v14;
      DB_PopStreamPos();
      DB_PatchMem_PopAsset();
      pos = g_streamPosGlob.pos;
      varGfxWorldTransientZone = (GfxWorldTransientZone *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_LightGridVolumePackingParams
==============
*/
void Preload_LightGridVolumePackingParams(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varLightGridVolumePackingParams, 0x20ui64);
}

/*
==============
Preload_LightGridVolumePackingParamsArray
==============
*/
void Preload_LightGridVolumePackingParamsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varLightGridVolumePackingParams, 32 * count);
}

/*
==============
Preload_LightGridVolumePackingParamsStream
==============
*/
void Preload_LightGridVolumePackingParamsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 55323, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varLightGridVolumePackingParams;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      pos = g_streamPosGlob.pos;
      varLightGridVolumePackingParams = (LightGridVolumePackingParams *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_LightGridVolumeTransformParams
==============
*/
void Preload_LightGridVolumeTransformParams(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varLightGridVolumeTransformParams, 0x40ui64);
}

/*
==============
Preload_LightGridVolumeTransformParamsArray
==============
*/
void Preload_LightGridVolumeTransformParamsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varLightGridVolumeTransformParams, count << 6);
}

/*
==============
Preload_LightGridVolumeTransformParamsStream
==============
*/
void Preload_LightGridVolumeTransformParamsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 55145, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varLightGridVolumeTransformParams;
    do
    {
      Load_Stream(AtStart, pos, 0x40ui64);
      pos = g_streamPosGlob.pos;
      varLightGridVolumeTransformParams = (LightGridVolumeTransformParams *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_StaticModelIndex
==============
*/
void Preload_StaticModelIndex(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varStaticModelIndex, 2ui64);
}

/*
==============
Preload_StaticModelIndexArray
==============
*/
void Preload_StaticModelIndexArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varStaticModelIndex, 2 * count);
}

/*
==============
Preload_StaticModelIndexStream
==============
*/
void Preload_StaticModelIndexStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 53130, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varStaticModelIndex;
    do
    {
      Load_Stream(AtStart, pos, 2ui64);
      pos = g_streamPosGlob.pos;
      varStaticModelIndex = (unsigned __int16 *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_UmbraGate
==============
*/
void Preload_UmbraGate(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varUmbraGate, 0x20ui64);
}

/*
==============
Preload_UmbraGateArray
==============
*/
void Preload_UmbraGateArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varUmbraGate, 32 * count);
}

/*
==============
Preload_UmbraGateStream
==============
*/
void Preload_UmbraGateStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 67219, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varUmbraGate;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      pos = g_streamPosGlob.pos;
      varUmbraGate = (UmbraGate *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_mnode_t
==============
*/
void Preload_mnode_t(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varmnode_t, 4ui64);
}

/*
==============
Preload_mnode_tArray
==============
*/
void Preload_mnode_tArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varmnode_t, 4 * count);
}

/*
==============
Preload_mnode_tStream
==============
*/
void Preload_mnode_tStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 53054, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varmnode_t;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varmnode_t = (mnode_t *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_umbraTomePtr_t
==============
*/
void Preload_umbraTomePtr_t(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varumbraTomePtr_t, 8ui64);
}

/*
==============
Preload_umbraTomePtr_tArray
==============
*/
void Preload_umbraTomePtr_tArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varumbraTomePtr_t, 8 * count);
}

/*
==============
Preload_umbraTomePtr_tStream
==============
*/
void Preload_umbraTomePtr_tStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_r_bsp_db.h", 52878, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varumbraTomePtr_t;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      pos = g_streamPosGlob.pos;
      varumbraTomePtr_t = (Umbra::Tome **)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

