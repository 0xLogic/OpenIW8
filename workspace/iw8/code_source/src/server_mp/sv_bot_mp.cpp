/*
==============
SV_BotUpdateBots
==============
*/

void SV_BotUpdateBots(void)
{
  ?SV_BotUpdateBots@@YAXXZ();
}

/*
==============
SV_BotIsBot
==============
*/

int __fastcall SV_BotIsBot(const int clientNum)
{
  return ?SV_BotIsBot@@YAHH@Z(clientNum);
}

/*
==============
Bot_EndProf
==============
*/

long double __fastcall Bot_EndProf()
{
  return ?Bot_EndProf@@YANXZ();
}

/*
==============
Bot_UpdateZoneObstacles
==============
*/

void __fastcall Bot_UpdateZoneObstacles(bot_info_t *botInfo)
{
  ?Bot_UpdateZoneObstacles@@YAXPEAUbot_info_t@@@Z(botInfo);
}

/*
==============
Bot_GetSpectatedBotData
==============
*/

bot_data_t *__fastcall Bot_GetSpectatedBotData(const LocalClientNum_t localClientNum)
{
  return ?Bot_GetSpectatedBotData@@YAPEAUbot_data_t@@W4LocalClientNum_t@@@Z(localClientNum);
}

/*
==============
Bot_GetLastKnownEntPosAndTime
==============
*/

int __fastcall Bot_GetLastKnownEntPosAndTime(const bot_data_t *botData, const gentity_s *entity, vec3_t *targetPos)
{
  return ?Bot_GetLastKnownEntPosAndTime@@YAHPEBUbot_data_t@@PEBUgentity_s@@PEATvec3_t@@@Z(botData, entity, targetPos);
}

/*
==============
Bot_CanUseAnyTraversals
==============
*/

bool __fastcall Bot_CanUseAnyTraversals(const bot_info_t *botInfo)
{
  return ?Bot_CanUseAnyTraversals@@YA_NPEBUbot_info_t@@@Z(botInfo);
}

/*
==============
Bot_MemoryIterateInit
==============
*/

void __fastcall Bot_MemoryIterateInit(bot_mem_iterator_t *memIt)
{
  ?Bot_MemoryIterateInit@@YAXPEAUbot_mem_iterator_t@@@Z(memIt);
}

/*
==============
Bot_IsFacingPosition
==============
*/

int __fastcall Bot_IsFacingPosition(bot_data_t *botData, const vec3_t *position)
{
  return ?Bot_IsFacingPosition@@YAHPEAUbot_data_t@@AEBTvec3_t@@@Z(botData, position);
}

/*
==============
Bot_NegotiationPointReached
==============
*/

int __fastcall Bot_NegotiationPointReached(bot_data_t *botData, bot_traversal_stage_t stage, usercmd_s *cmd)
{
  return ?Bot_NegotiationPointReached@@YAHPEAUbot_data_t@@W4bot_traversal_stage_t@@PEAUusercmd_s@@@Z(botData, stage, cmd);
}

/*
==============
Bot_UpdateDive
==============
*/

void __fastcall Bot_UpdateDive(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_UpdateDive@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_SetScriptGoalNode
==============
*/

int __fastcall Bot_SetScriptGoalNode(bot_data_t *botData, unsigned __int16 pathNodeNum, float goalRadius, bot_scr_goal_t goalType, float *goalYaw, float objectiveRadius, int shortTermGoal)
{
  return ?Bot_SetScriptGoalNode@@YAHPEAUbot_data_t@@GMW4bot_scr_goal_t@@PEAMMH@Z(botData, pathNodeNum, goalRadius, goalType, goalYaw, objectiveRadius, shortTermGoal);
}

/*
==============
SV_BotDisconnectCleanup
==============
*/

void __fastcall SV_BotDisconnectCleanup(const int clientIndex)
{
  ?SV_BotDisconnectCleanup@@YAXH@Z(clientIndex);
}

/*
==============
Bot_PathHasNegotiation
==============
*/

bool __fastcall Bot_PathHasNegotiation(const bot_info_t *botInfo)
{
  return ?Bot_PathHasNegotiation@@YA_NPEBUbot_info_t@@@Z(botInfo);
}

/*
==============
Bot_CanMoveTo
==============
*/

int __fastcall Bot_CanMoveTo(const bot_info_t *botInfo, const vec3_t *from, const vec3_t *to)
{
  return ?Bot_CanMoveTo@@YAHPEBUbot_info_t@@AEBTvec3_t@@1@Z(botInfo, from, to);
}

/*
==============
SV_BotDrawDebugClientScreen
==============
*/

void __fastcall SV_BotDrawDebugClientScreen(const LocalClientNum_t localClientNum)
{
  ?SV_BotDrawDebugClientScreen@@YAXW4LocalClientNum_t@@@Z(localClientNum);
}

/*
==============
Bot_UpdateDoors
==============
*/

bool __fastcall Bot_UpdateDoors(bot_data_t *botData)
{
  return ?Bot_UpdateDoors@@YA_NPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_MemoryWriteEvent
==============
*/

void __fastcall Bot_MemoryWriteEvent(bot_data_t *botData, bot_mem_type_t type, const Weapon *weapon, const vec3_t *location1, const vec3_t *location2, __int16 entNum)
{
  ?Bot_MemoryWriteEvent@@YAXPEAUbot_data_t@@W4bot_mem_type_t@@AEBUWeapon@@AEBTvec3_t@@3F@Z(botData, type, weapon, location1, location2, entNum);
}

/*
==============
SV_BotDropped
==============
*/

void __fastcall SV_BotDropped(const int clientIndex)
{
  ?SV_BotDropped@@YAXH@Z(clientIndex);
}

/*
==============
Bot_DebugGoal
==============
*/

void __fastcall Bot_DebugGoal(int index, vec3_t *goal)
{
  ?Bot_DebugGoal@@YAXHAEATvec3_t@@@Z(index, goal);
}

/*
==============
Bot_UpdateMeleeCharge
==============
*/

void __fastcall Bot_UpdateMeleeCharge(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_UpdateMeleeCharge@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_GetWorldCenter
==============
*/

void __fastcall Bot_GetWorldCenter(vec3_t *worldSize)
{
  ?Bot_GetWorldCenter@@YAXAEATvec3_t@@@Z(worldSize);
}

/*
==============
Bot_AtScriptGoal
==============
*/

int __fastcall Bot_AtScriptGoal(const bot_data_t *botData)
{
  return ?Bot_AtScriptGoal@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_InitializeCmdTime
==============
*/

void __fastcall Bot_InitializeCmdTime(usercmd_s *cmd)
{
  ?Bot_InitializeCmdTime@@YAXPEAUusercmd_s@@@Z(cmd);
}

/*
==============
Bot_GetScriptGoalNode
==============
*/

pathnode_t *__fastcall Bot_GetScriptGoalNode(const bot_data_t *botData)
{
  return ?Bot_GetScriptGoalNode@@YAPEAUpathnode_t@@PEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_IsStuckReacting
==============
*/

int __fastcall Bot_IsStuckReacting(const bot_info_t *botInfo)
{
  return ?Bot_IsStuckReacting@@YAHPEBUbot_info_t@@@Z(botInfo);
}

/*
==============
Bot_SetPersonality
==============
*/

void __fastcall Bot_SetPersonality(bot_data_t *botData, bot_personality_t botPersonality)
{
  ?Bot_SetPersonality@@YAXPEAUbot_data_t@@W4bot_personality_t@@@Z(botData, botPersonality);
}

/*
==============
Bot_DrawDebug
==============
*/

void __fastcall Bot_DrawDebug(bot_data_t *botData)
{
  ?Bot_DrawDebug@@YAXPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_PredictSeeTacPoint
==============
*/

bool __fastcall Bot_PredictSeeTacPoint(const bot_info_t *botInfo, const tacpoint_t *testTacPoint, vec3_t *predictedOriginOut)
{
  return ?Bot_PredictSeeTacPoint@@YA_NPEBUbot_info_t@@PEBUtacpoint_t@@PEATvec3_t@@@Z(botInfo, testTacPoint, predictedOriginOut);
}

/*
==============
Bot_ThinkRoundRobin
==============
*/

void __fastcall Bot_ThinkRoundRobin(bot_data_t *botData)
{
  ?Bot_ThinkRoundRobin@@YAXPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_GetMemEventType
==============
*/

bot_mem_type_t __fastcall Bot_GetMemEventType(const char *memEventTypeName)
{
  return ?Bot_GetMemEventType@@YA?AW4bot_mem_type_t@@PEBD@Z(memEventTypeName);
}

/*
==============
Bot_SetFrozenCmd
==============
*/

void __fastcall Bot_SetFrozenCmd(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_SetFrozenCmd@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_IsBlinded
==============
*/

int __fastcall Bot_IsBlinded(const bot_data_t *botData)
{
  return ?Bot_IsBlinded@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
SV_BotCanAlwaysSeeEnt
==============
*/

int __fastcall SV_BotCanAlwaysSeeEnt(const ai_common_t *self, const gentity_s *ent)
{
  return ?SV_BotCanAlwaysSeeEnt@@YAHPEBUai_common_t@@PEBUgentity_s@@@Z(self, ent);
}

/*
==============
Bot_UpdateLostEnemyPath
==============
*/

int __fastcall Bot_UpdateLostEnemyPath(bot_data_t *botData)
{
  return ?Bot_UpdateLostEnemyPath@@YAHPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_UpdateGrenadeLook
==============
*/

int __fastcall Bot_UpdateGrenadeLook(bot_data_t *botData, vec3_t *viewAnglesOut)
{
  return ?Bot_UpdateGrenadeLook@@YAHPEAUbot_data_t@@AEATvec3_t@@@Z(botData, viewAnglesOut);
}

/*
==============
Bot_ResumeScriptGoal
==============
*/

int __fastcall Bot_ResumeScriptGoal(bot_data_t *botData)
{
  return ?Bot_ResumeScriptGoal@@YAHPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_IsPointNearWorldEdge
==============
*/

int __fastcall Bot_IsPointNearWorldEdge(const vec3_t *point, const float tolerance)
{
  return ?Bot_IsPointNearWorldEdge@@YAHAEBTvec3_t@@M@Z(point, tolerance);
}

/*
==============
Bot_PointInGoal
==============
*/

int __fastcall Bot_PointInGoal(const bot_data_t *botData, float goalRadius, const vec3_t *point)
{
  return ?Bot_PointInGoal@@YAHPEBUbot_data_t@@MAEBTvec3_t@@@Z(botData, goalRadius, point);
}

/*
==============
SV_BotControllingRemoteMissile
==============
*/

int __fastcall SV_BotControllingRemoteMissile(const gentity_s *ent)
{
  return ?SV_BotControllingRemoteMissile@@YAHPEBUgentity_s@@@Z(ent);
}

/*
==============
Bot_PathExists
==============
*/

int __fastcall Bot_PathExists(const bot_info_t *botInfo)
{
  return ?Bot_PathExists@@YAHPEBUbot_info_t@@@Z(botInfo);
}

/*
==============
Bot_SetBotPersistentMatchData
==============
*/

void __fastcall Bot_SetBotPersistentMatchData(bot_data_t *botData, int firstConnect)
{
  ?Bot_SetBotPersistentMatchData@@YAXPEAUbot_data_t@@H@Z(botData, firstConnect);
}

/*
==============
Bot_GetClosestCharacterToOrigin
==============
*/

gentity_s *__fastcall Bot_GetClosestCharacterToOrigin(gentity_s *selfEntity, const vec3_t *origin, int onlyAI, int allowScriptedAgents, const bitarray<224> *teamFlags)
{
  return ?Bot_GetClosestCharacterToOrigin@@YAPEAUgentity_s@@PEAU1@AEBTvec3_t@@HHAEBV?$bitarray@$0OA@@@@Z(selfEntity, origin, onlyAI, allowScriptedAgents, teamFlags);
}

/*
==============
Bot_UpdateHidingGoal
==============
*/

int __fastcall Bot_UpdateHidingGoal(bot_data_t *botData)
{
  return ?Bot_UpdateHidingGoal@@YAHPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_UpdateScriptGoal
==============
*/

int __fastcall Bot_UpdateScriptGoal(bot_data_t *botData)
{
  return ?Bot_UpdateScriptGoal@@YAHPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_MemoryIterateTeams
==============
*/

bot_mem_event_t *__fastcall Bot_MemoryIterateTeams(bot_data_t *botData, const bitarray<224> *teamFlags, int timeNewest, int timeOldest, bot_mem_iterator_t *memIt)
{
  return ?Bot_MemoryIterateTeams@@YAPEAUbot_mem_event_t@@PEAUbot_data_t@@AEBV?$bitarray@$0OA@@@HHPEAUbot_mem_iterator_t@@@Z(botData, teamFlags, timeNewest, timeOldest, memIt);
}

/*
==============
Bot_UpdateLadder
==============
*/

int __fastcall Bot_UpdateLadder(bot_data_t *botData, usercmd_s *cmd)
{
  return ?Bot_UpdateLadder@@YAHPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_LookAtPoint
==============
*/

void __fastcall Bot_LookAtPoint(bot_data_t *botData, const vec3_t *point, int duration, bot_look_t type)
{
  ?Bot_LookAtPoint@@YAXPEAUbot_data_t@@PEBTvec3_t@@HW4bot_look_t@@@Z(botData, point, duration, type);
}

/*
==============
Bot_UpdateMantleJump
==============
*/

void __fastcall Bot_UpdateMantleJump(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_UpdateMantleJump@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
SV_BotUnregisterEntAffecter
==============
*/

int __fastcall SV_BotUnregisterEntAffecter(const gentity_s *ent)
{
  return ?SV_BotUnregisterEntAffecter@@YAHPEBUgentity_s@@@Z(ent);
}

/*
==============
SV_BotCanTargetSentient
==============
*/

int __fastcall SV_BotCanTargetSentient(const sentient_s *botSentient, const sentient_s *enemySentient, int *isAwareOfSentient)
{
  return ?SV_BotCanTargetSentient@@YAHPEBUsentient_s@@0PEAH@Z(botSentient, enemySentient, isAwareOfSentient);
}

/*
==============
SV_BotAllocateSystemMemory
==============
*/

void __fastcall SV_BotAllocateSystemMemory(HunkUser *hunkUser)
{
  ?SV_BotAllocateSystemMemory@@YAXPEAUHunkUser@@@Z(hunkUser);
}

/*
==============
Bot_ClearScriptGoal
==============
*/

void __fastcall Bot_ClearScriptGoal(bot_data_t *botData)
{
  ?Bot_ClearScriptGoal@@YAXPEAUbot_data_t@@@Z(botData);
}

/*
==============
SV_BotIsBotEnt
==============
*/

int __fastcall SV_BotIsBotEnt(const gentity_s *ent)
{
  return ?SV_BotIsBotEnt@@YAHPEBUgentity_s@@@Z(ent);
}

/*
==============
Bot_UpdateScriptedButtons
==============
*/

void __fastcall Bot_UpdateScriptedButtons(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_UpdateScriptedButtons@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_UpdateMovementTraversal
==============
*/

int __fastcall Bot_UpdateMovementTraversal(bot_data_t *botData, usercmd_s *cmd)
{
  return ?Bot_UpdateMovementTraversal@@YAHPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_GetBotDifficultyFromMenu
==============
*/

bot_difficulty_t __fastcall Bot_GetBotDifficultyFromMenu(const bot_data_t *botData)
{
  return ?Bot_GetBotDifficultyFromMenu@@YA?AW4bot_difficulty_t@@PEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_UpdateClientMessageNotifies
==============
*/

void __fastcall Bot_UpdateClientMessageNotifies(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_UpdateClientMessageNotifies@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_ResetBotInfo
==============
*/

void __fastcall Bot_ResetBotInfo(bot_data_t *botData, gentity_s *entity)
{
  ?Bot_ResetBotInfo@@YAXPEAUbot_data_t@@PEAUgentity_s@@@Z(botData, entity);
}

/*
==============
Bot_IsFiringWeapon
==============
*/

int __fastcall Bot_IsFiringWeapon(const bot_data_t *botData, const usercmd_s *cmd)
{
  return ?Bot_IsFiringWeapon@@YAHPEBUbot_data_t@@PEBUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_UpdateMove_OffPathGrid
==============
*/

int __fastcall Bot_UpdateMove_OffPathGrid(bot_data_t *botData, usercmd_s *cmd)
{
  return ?Bot_UpdateMove_OffPathGrid@@YAHPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
SV_BotIncrementActiveBotCount
==============
*/

void SV_BotIncrementActiveBotCount(void)
{
  ?SV_BotIncrementActiveBotCount@@YAXXZ();
}

/*
==============
Bot_UpdatePathingLook
==============
*/

int __fastcall Bot_UpdatePathingLook(bot_data_t *botData, vec3_t *viewAnglesOut)
{
  return ?Bot_UpdatePathingLook@@YAHPEAUbot_data_t@@AEATvec3_t@@@Z(botData, viewAnglesOut);
}

/*
==============
SV_BotStaticStateWrite
==============
*/

void __fastcall SV_BotStaticStateWrite(MemoryFile *memFile)
{
  ?SV_BotStaticStateWrite@@YAXPEAUMemoryFile@@@Z(memFile);
}

/*
==============
Bot_UpdatePath
==============
*/

void __fastcall Bot_UpdatePath(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_UpdatePath@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_MemoryGetMostRecentPosition
==============
*/

int __fastcall Bot_MemoryGetMostRecentPosition(bot_data_t *botData, int typeFlags, int locationNumber, vec3_t *resultPos, int *resultTime)
{
  return ?Bot_MemoryGetMostRecentPosition@@YAHPEAUbot_data_t@@HHAEATvec3_t@@PEAH@Z(botData, typeFlags, locationNumber, resultPos, resultTime);
}

/*
==============
Bot_IsOnGround
==============
*/

int __fastcall Bot_IsOnGround(const bot_data_t *botData)
{
  return ?Bot_IsOnGround@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_UpdateNavigator
==============
*/

void __fastcall Bot_UpdateNavigator(bot_info_t *botInfo)
{
  ?Bot_UpdateNavigator@@YAXPEAUbot_info_t@@@Z(botInfo);
}

/*
==============
Bot_IsAwareOfEnemy
==============
*/

int __fastcall Bot_IsAwareOfEnemy(const bot_data_t *botData)
{
  return ?Bot_IsAwareOfEnemy@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_IsDeaf
==============
*/

int __fastcall Bot_IsDeaf(const bot_data_t *botData)
{
  return ?Bot_IsDeaf@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_UpdateHybridToggle
==============
*/

void __fastcall Bot_UpdateHybridToggle(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_UpdateHybridToggle@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_NearbyBotExists
==============
*/

int __fastcall Bot_NearbyBotExists(bot_data_t *botData, const float maxDist, int onlySameTeam)
{
  return ?Bot_NearbyBotExists@@YAHPEAUbot_data_t@@MH@Z(botData, maxDist, onlySameTeam);
}

/*
==============
Bot_IsThrowingGrenade
==============
*/

int __fastcall Bot_IsThrowingGrenade(const bot_data_t *botData)
{
  return ?Bot_IsThrowingGrenade@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_IsReloading
==============
*/

int __fastcall Bot_IsReloading(const bot_data_t *botData)
{
  return ?Bot_IsReloading@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_GetLastKnownEntNearestTacPoint
==============
*/

const tacpoint_t *__fastcall Bot_GetLastKnownEntNearestTacPoint(const bot_data_t *botData, const gentity_s *entity)
{
  return ?Bot_GetLastKnownEntNearestTacPoint@@YAPEBUtacpoint_t@@PEBUbot_data_t@@PEBUgentity_s@@@Z(botData, entity);
}

/*
==============
Bot_UpdateMove
==============
*/

void __fastcall Bot_UpdateMove(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_UpdateMove@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_PreferWeaponOverLongRange
==============
*/

int __fastcall Bot_PreferWeaponOverLongRange(const bot_data_t *botData, const Weapon *weapon)
{
  return ?Bot_PreferWeaponOverLongRange@@YAHPEBUbot_data_t@@AEBUWeapon@@@Z(botData, weapon);
}

/*
==============
Bot_GetObstacleFlagsForTeam
==============
*/

unsigned int __fastcall Bot_GetObstacleFlagsForTeam(team_t team)
{
  return ?Bot_GetObstacleFlagsForTeam@@YAIW4team_t@@@Z(team);
}

/*
==============
Bot_StampNodeArea
==============
*/

void __fastcall Bot_StampNodeArea(const bot_data_t *const botData, pathnode_t *node)
{
  ?Bot_StampNodeArea@@YAXQEBUbot_data_t@@PEAUpathnode_t@@@Z(botData, node);
}

/*
==============
Bot_PursuingScriptGoal
==============
*/

int __fastcall Bot_PursuingScriptGoal(const bot_data_t *botData)
{
  return ?Bot_PursuingScriptGoal@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_IsPostedAtGoalType
==============
*/

int __fastcall Bot_IsPostedAtGoalType(const bot_data_t *botData, bot_scr_goal_t goalType)
{
  return ?Bot_IsPostedAtGoalType@@YAHPEBUbot_data_t@@W4bot_scr_goal_t@@@Z(botData, goalType);
}

/*
==============
Bot_HasNavigator
==============
*/

int __fastcall Bot_HasNavigator(const bot_info_t *botInfo)
{
  return ?Bot_HasNavigator@@YAHPEBUbot_info_t@@@Z(botInfo);
}

/*
==============
Bot_HasScriptGoal
==============
*/

int __fastcall Bot_HasScriptGoal(const bot_data_t *botData)
{
  return ?Bot_HasScriptGoal@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_UpdateEnemyTrack
==============
*/

void __fastcall Bot_UpdateEnemyTrack(bot_data_t *botData)
{
  ?Bot_UpdateEnemyTrack@@YAXPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_PredictPosition
==============
*/

void __fastcall Bot_PredictPosition(const gentity_s *ent, const bot_data_t *botData, const vec3_t *startPos, vec3_t *vPos)
{
  ?Bot_PredictPosition@@YAXPEBUgentity_s@@PEBUbot_data_t@@AEBTvec3_t@@AEAT3@@Z(ent, botData, startPos, vPos);
}

/*
==============
Bot_GetScriptButtonType
==============
*/

int __fastcall Bot_GetScriptButtonType(const char *buttonName)
{
  return ?Bot_GetScriptButtonType@@YAHPEBD@Z(buttonName);
}

/*
==============
Bot_GetGroundEnt
==============
*/

__int16 __fastcall Bot_GetGroundEnt(const playerState_s *ps)
{
  return ?Bot_GetGroundEnt@@YAFPEBUplayerState_s@@@Z(ps);
}

/*
==============
Bot_PressButton
==============
*/

void __fastcall Bot_PressButton(bot_data_t *botData, bot_scr_buttons_t button, int msec)
{
  ?Bot_PressButton@@YAXPEAUbot_data_t@@W4bot_scr_buttons_t@@H@Z(botData, button, msec);
}

/*
==============
Bot_UpdateEnemyInSightLook
==============
*/

int __fastcall Bot_UpdateEnemyInSightLook(bot_data_t *botData, vec3_t *viewAnglesOut)
{
  return ?Bot_UpdateEnemyInSightLook@@YAHPEAUbot_data_t@@AEATvec3_t@@@Z(botData, viewAnglesOut);
}

/*
==============
Bot_UpdateSprinting
==============
*/

void __fastcall Bot_UpdateSprinting(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_UpdateSprinting@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_IsAtPathEnd
==============
*/

int __fastcall Bot_IsAtPathEnd(const bot_data_t *botData, float goalRadius)
{
  return ?Bot_IsAtPathEnd@@YAHPEBUbot_data_t@@M@Z(botData, goalRadius);
}

/*
==============
SV_BotSetAvoidanceRadius
==============
*/

void __fastcall SV_BotSetAvoidanceRadius(const gentity_s *ent, float radius)
{
  ?SV_BotSetAvoidanceRadius@@YAXPEBUgentity_s@@M@Z(ent, radius);
}

/*
==============
SV_BotGetAllocationSize
==============
*/

unsigned int __fastcall SV_BotGetAllocationSize()
{
  return ?SV_BotGetAllocationSize@@YAIXZ();
}

/*
==============
Bot_EntityOccupiesLocation
==============
*/

int __fastcall Bot_EntityOccupiesLocation(const gentity_s *ent, const vec3_t *origin, float distanceScalar)
{
  return ?Bot_EntityOccupiesLocation@@YAHPEBUgentity_s@@AEBTvec3_t@@M@Z(ent, origin, distanceScalar);
}

/*
==============
Bot_UpdateDistToEnemy
==============
*/

void __fastcall Bot_UpdateDistToEnemy(bot_data_t *botData)
{
  ?Bot_UpdateDistToEnemy@@YAXPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_EnemyIsAttackingMe
==============
*/

int __fastcall Bot_EnemyIsAttackingMe(const bot_data_t *botData, int timeLimit)
{
  return ?Bot_EnemyIsAttackingMe@@YAHPEBUbot_data_t@@H@Z(botData, timeLimit);
}

/*
==============
Bot_CombatStateGrenade
==============
*/

int __fastcall Bot_CombatStateGrenade(bot_data_t *botData, usercmd_s *cmd)
{
  return ?Bot_CombatStateGrenade@@YAHPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
SV_BotMissileFired
==============
*/

void __fastcall SV_BotMissileFired(const gentity_s *self, gentity_s *missile)
{
  ?SV_BotMissileFired@@YAXPEBUgentity_s@@PEAU1@@Z(self, missile);
}

/*
==============
Bot_CanSeeEnemy
==============
*/

int __fastcall Bot_CanSeeEnemy(const bot_data_t *botData)
{
  return ?Bot_CanSeeEnemy@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_StartProf
==============
*/

void Bot_StartProf(void)
{
  ?Bot_StartProf@@YAXXZ();
}

/*
==============
Bot_ForceClaimNode
==============
*/

void __fastcall Bot_ForceClaimNode(bot_info_t *botInfo, pathnode_t *node)
{
  ?Bot_ForceClaimNode@@YAXPEAUbot_info_t@@PEAUpathnode_t@@@Z(botInfo, node);
}

/*
==============
Bot_UpdateIdleLook
==============
*/

int __fastcall Bot_UpdateIdleLook(bot_data_t *botData, vec3_t *viewAnglesOut)
{
  return ?Bot_UpdateIdleLook@@YAHPEAUbot_data_t@@AEATvec3_t@@@Z(botData, viewAnglesOut);
}

/*
==============
Bot_PredictEnemyCampSpots
==============
*/

int __fastcall Bot_PredictEnemyCampSpots(bot_data_t *botData, int humanOnly, vec3_t *spots, int maxCount)
{
  return ?Bot_PredictEnemyCampSpots@@YAHPEAUbot_data_t@@HPEATvec3_t@@H@Z(botData, humanOnly, spots, maxCount);
}

/*
==============
Bot_TimeStampPath
==============
*/

void __fastcall Bot_TimeStampPath(bot_info_t *botInfo, int useTime)
{
  ?Bot_TimeStampPath@@YAXPEAUbot_info_t@@H@Z(botInfo, useTime);
}

/*
==============
Bot_DrawDebugNavmeshExposure
==============
*/

void Bot_DrawDebugNavmeshExposure(void)
{
  ?Bot_DrawDebugNavmeshExposure@@YAXXZ();
}

/*
==============
Bot_UpdatePathToEnemy
==============
*/

int __fastcall Bot_UpdatePathToEnemy(bot_data_t *botData)
{
  return ?Bot_UpdatePathToEnemy@@YAHPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_UpdateSentientHistory
==============
*/

void __fastcall Bot_UpdateSentientHistory(sentient_s *sentient)
{
  ?Bot_UpdateSentientHistory@@YAXPEAUsentient_s@@@Z(sentient);
}

/*
==============
Bot_Think
==============
*/

void __fastcall Bot_Think(SvClientMP *bot, usercmd_s *cmd)
{
  ?Bot_Think@@YAXPEAVSvClientMP@@PEAUusercmd_s@@@Z(bot, cmd);
}

/*
==============
SV_BotGetPerfectInfo
==============
*/

int __fastcall SV_BotGetPerfectInfo(const gentity_s *self, sentient_s *other, unsigned __int8 reason)
{
  return ?SV_BotGetPerfectInfo@@YAHPEBUgentity_s@@PEAUsentient_s@@E@Z(self, other, reason);
}

/*
==============
Bot_ShouldForgetEnemy
==============
*/

int __fastcall Bot_ShouldForgetEnemy(const bot_data_t *botData, const gentity_s *enemy)
{
  return ?Bot_ShouldForgetEnemy@@YAHPEBUbot_data_t@@PEBUgentity_s@@@Z(botData, enemy);
}

/*
==============
Bot_UpdateRiotShieldDesired
==============
*/

void __fastcall Bot_UpdateRiotShieldDesired(bot_data_t *botData)
{
  ?Bot_UpdateRiotShieldDesired@@YAXPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_UpdateViewAngles
==============
*/

void __fastcall Bot_UpdateViewAngles(bot_data_t *botData, vec3_t *viewAnglesOut)
{
  ?Bot_UpdateViewAngles@@YAXPEAUbot_data_t@@AEATvec3_t@@@Z(botData, viewAnglesOut);
}

/*
==============
Bot_GetScriptGoalTypeName
==============
*/

const char *__fastcall Bot_GetScriptGoalTypeName(const bot_data_t *botData)
{
  return ?Bot_GetScriptGoalTypeName@@YAPEBDPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_UpdateTraversalLook
==============
*/

int __fastcall Bot_UpdateTraversalLook(bot_data_t *botData, vec3_t *viewAnglesOut)
{
  return ?Bot_UpdateTraversalLook@@YAHPEAUbot_data_t@@AEATvec3_t@@@Z(botData, viewAnglesOut);
}

/*
==============
Bot_ShouldRushEnemy
==============
*/

int __fastcall Bot_ShouldRushEnemy(bot_data_t *botData)
{
  return ?Bot_ShouldRushEnemy@@YAHPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_ActiveGoalIsScriptGoal
==============
*/

int __fastcall Bot_ActiveGoalIsScriptGoal(const bot_data_t *botData)
{
  return ?Bot_ActiveGoalIsScriptGoal@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_CyclePathTurn
==============
*/

void __fastcall Bot_CyclePathTurn(int postThinkEntNum)
{
  ?Bot_CyclePathTurn@@YAXH@Z(postThinkEntNum);
}

/*
==============
SV_BotSwitchWeapon
==============
*/

int __fastcall SV_BotSwitchWeapon(gentity_s *self, const Weapon *weapon)
{
  return ?SV_BotSwitchWeapon@@YAHPEAUgentity_s@@AEBUWeapon@@@Z(self, weapon);
}

/*
==============
SV_BotGrenadePing
==============
*/

void __fastcall SV_BotGrenadePing(const gentity_s *self, gentity_s *originator, const vec3_t *vOrigin)
{
  ?SV_BotGrenadePing@@YAXPEBUgentity_s@@PEAU1@AEBTvec3_t@@@Z(self, originator, vOrigin);
}

/*
==============
Bot_GetDifficultySetting
==============
*/

double __fastcall Bot_GetDifficultySetting(bot_data_t *botData, const char *settingName, int *succeeded)
{
  double result; 

  *(float *)&result = ?Bot_GetDifficultySetting@@YAMPEAUbot_data_t@@PEBDPEAH@Z(botData, settingName, succeeded);
  return result;
}

/*
==============
Bot_SetAttacker
==============
*/

void __fastcall Bot_SetAttacker(bot_data_t *botData, gentity_s *attacker)
{
  ?Bot_SetAttacker@@YAXPEAUbot_data_t@@PEAUgentity_s@@@Z(botData, attacker);
}

/*
==============
Bot_DifficultyFromString
==============
*/

bot_difficulty_t __fastcall Bot_DifficultyFromString(const char *botDifficultyString)
{
  return ?Bot_DifficultyFromString@@YA?AW4bot_difficulty_t@@PEBD@Z(botDifficultyString);
}

/*
==============
Bot_UpdateDebugErrorLocations
==============
*/

void __fastcall Bot_UpdateDebugErrorLocations(bot_data_t *botData)
{
  ?Bot_UpdateDebugErrorLocations@@YAXPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_UpdatePathLookPredict
==============
*/

void __fastcall Bot_UpdatePathLookPredict(bot_data_t *botData)
{
  ?Bot_UpdatePathLookPredict@@YAXPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_UpdateLookAtPoint
==============
*/

int __fastcall Bot_UpdateLookAtPoint(bot_data_t *botData, int minPriority, vec3_t *viewAnglesOut)
{
  return ?Bot_UpdateLookAtPoint@@YAHPEAUbot_data_t@@HAEATvec3_t@@@Z(botData, minPriority, viewAnglesOut);
}

/*
==============
Bot_MakeBotData
==============
*/

void __fastcall Bot_MakeBotData(bot_data_t *botData)
{
  ?Bot_MakeBotData@@YAXPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_IsFireFromHipRange
==============
*/

int __fastcall Bot_IsFireFromHipRange(const bot_data_t *botData)
{
  return ?Bot_IsFireFromHipRange@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
SV_BotIsBotEntClient
==============
*/

int __fastcall SV_BotIsBotEntClient(const gentity_s *ent)
{
  return ?SV_BotIsBotEntClient@@YAHPEBUgentity_s@@@Z(ent);
}

/*
==============
Bot_ShouldDrawDebugForBot
==============
*/

int __fastcall Bot_ShouldDrawDebugForBot(const bot_data_t *botData)
{
  return ?Bot_ShouldDrawDebugForBot@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
SV_BotCheckAvoidSentient
==============
*/

void __fastcall SV_BotCheckAvoidSentient(int isAwareOfSentient, const sentient_s *botSentient, sentient_s *otherSentient)
{
  ?SV_BotCheckAvoidSentient@@YAXHPEBUsentient_s@@PEAU1@@Z(isAwareOfSentient, botSentient, otherSentient);
}

/*
==============
Bot_MemoryFlagAllNear
==============
*/

void __fastcall Bot_MemoryFlagAllNear(bot_data_t *botData, int timeNewest, int timeOldest, int typeFlags, int locationNumber, const vec3_t *location, float radius, int flags)
{
  ?Bot_MemoryFlagAllNear@@YAXPEAUbot_data_t@@HHHHAEBTvec3_t@@MH@Z(botData, timeNewest, timeOldest, typeFlags, locationNumber, location, radius, flags);
}

/*
==============
Bot_SetScriptFlag
==============
*/

void __fastcall Bot_SetScriptFlag(bot_data_t *botData, int flag, int value)
{
  ?Bot_SetScriptFlag@@YAXPEAUbot_data_t@@HH@Z(botData, flag, value);
}

/*
==============
Bot_CanSeePointViaNodes
==============
*/

int __fastcall Bot_CanSeePointViaNodes(const bot_data_t *botData, const vec3_t *point)
{
  return ?Bot_CanSeePointViaNodes@@YAHPEBUbot_data_t@@AEBTvec3_t@@@Z(botData, point);
}

/*
==============
Bot_UpdateAimDownSights
==============
*/

void __fastcall Bot_UpdateAimDownSights(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_UpdateAimDownSights@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_GetNextDebugGoal
==============
*/

int __fastcall Bot_GetNextDebugGoal(const bot_data_t *botData)
{
  return ?Bot_GetNextDebugGoal@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
SV_BotGetAdjustedEnemyDistForThreat
==============
*/

double __fastcall SV_BotGetAdjustedEnemyDistForThreat(const sentient_s *botSentient, sentient_s *enemy, float enemyDist)
{
  double result; 

  *(float *)&result = ?SV_BotGetAdjustedEnemyDistForThreat@@YAMPEBUsentient_s@@PEAU1@M@Z(botSentient, enemy, enemyDist);
  return result;
}

/*
==============
Bot_IsForcedFiring
==============
*/

int __fastcall Bot_IsForcedFiring(const bot_data_t *botData)
{
  return ?Bot_IsForcedFiring@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_GetZoneCountType
==============
*/

int __fastcall Bot_GetZoneCountType(const char *string)
{
  return ?Bot_GetZoneCountType@@YAHPEBD@Z(string);
}

/*
==============
Bot_GetClientData
==============
*/

bot_data_t *__fastcall Bot_GetClientData(SvClientMP *bot)
{
  return ?Bot_GetClientData@@YAPEAUbot_data_t@@PEAVSvClientMP@@@Z(bot);
}

/*
==============
Bot_GetPathToGoalInternal
==============
*/

int __fastcall Bot_GetPathToGoalInternal(bot_data_t *botData, const vec3_t *goal, float goalRadius, const char *debugReason)
{
  return ?Bot_GetPathToGoalInternal@@YAHPEAUbot_data_t@@AEBTvec3_t@@MPEBD@Z(botData, goal, goalRadius, debugReason);
}

/*
==============
Bot_AtScriptGoalNode
==============
*/

int __fastcall Bot_AtScriptGoalNode(const bot_data_t *botData)
{
  return ?Bot_AtScriptGoalNode@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_UpdateThreat
==============
*/

void __fastcall Bot_UpdateThreat(bot_data_t *botData)
{
  ?Bot_UpdateThreat@@YAXPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_DrawDebugNavmesh
==============
*/

void Bot_DrawDebugNavmesh(void)
{
  ?Bot_DrawDebugNavmesh@@YAXXZ();
}

/*
==============
Bot_RegisterEvents
==============
*/

void __fastcall Bot_RegisterEvents(const bot_data_t *botData)
{
  ?Bot_RegisterEvents@@YAXPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_ZoneNearestCount
==============
*/

int __fastcall Bot_ZoneNearestCount(int zone, int nodeTeam, int steps, const bot_zone_count_cmp_t *compares, int numCompares)
{
  return ?Bot_ZoneNearestCount@@YAHHHHPEBUbot_zone_count_cmp_t@@H@Z(zone, nodeTeam, steps, compares, numCompares);
}

/*
==============
Bot_ShouldADS
==============
*/

int __fastcall Bot_ShouldADS(bot_data_t *botData, const playerState_s *ps)
{
  return ?Bot_ShouldADS@@YAHPEAUbot_data_t@@PEBUplayerState_s@@@Z(botData, ps);
}

/*
==============
Bot_GetStopGoalStance
==============
*/

ai_stance_e __fastcall Bot_GetStopGoalStance(const pathnode_t *node)
{
  return ?Bot_GetStopGoalStance@@YA?AW4ai_stance_e@@PEBUpathnode_t@@@Z(node);
}

/*
==============
SV_BotInitRound
==============
*/

void SV_BotInitRound(void)
{
  ?SV_BotInitRound@@YAXXZ();
}

/*
==============
Bot_UpdateAimDownSightsDesire
==============
*/

void __fastcall Bot_UpdateAimDownSightsDesire(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_UpdateAimDownSightsDesire@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_MemoryUpdateEntityEvent
==============
*/

void __fastcall Bot_MemoryUpdateEntityEvent(bot_data_t *botData, bot_mem_type_t type, __int16 entNum, int locationNum, int newestTime, int oldestTime)
{
  ?Bot_MemoryUpdateEntityEvent@@YAXPEAUbot_data_t@@W4bot_mem_type_t@@FHHH@Z(botData, type, entNum, locationNum, newestTime, oldestTime);
}

/*
==============
Bot_AnimscriptToLinkMask
==============
*/

unsigned int __fastcall Bot_AnimscriptToLinkMask(const char *animscript)
{
  return ?Bot_AnimscriptToLinkMask@@YAIPEBD@Z(animscript);
}

/*
==============
SV_BotPerfectInfoIgnored
==============
*/

void __fastcall SV_BotPerfectInfoIgnored(const ai_common_t *self, sentient_s *other, unsigned __int8 reason)
{
  ?SV_BotPerfectInfoIgnored@@YAXPEBUai_common_t@@PEAUsentient_s@@E@Z(self, other, reason);
}

/*
==============
Bot_CanSeeAndCanFireOnEnemy
==============
*/

int __fastcall Bot_CanSeeAndCanFireOnEnemy(const bot_data_t *botData)
{
  return ?Bot_CanSeeAndCanFireOnEnemy@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_EnemyFacesBot
==============
*/

int __fastcall Bot_EnemyFacesBot(const bot_data_t *botData)
{
  return ?Bot_EnemyFacesBot@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_GetDifficultyName
==============
*/

const char *__fastcall Bot_GetDifficultyName(bot_difficulty_t difficulty)
{
  return ?Bot_GetDifficultyName@@YAPEBDW4bot_difficulty_t@@@Z(difficulty);
}

/*
==============
Bot_PredictSeePointUsingTacPoint
==============
*/

bool __fastcall Bot_PredictSeePointUsingTacPoint(const bot_info_t *botInfo, const vec3_t *point, const tacpoint_t *nearestTPointToPoint, vec3_t *predictedPointOut)
{
  return ?Bot_PredictSeePointUsingTacPoint@@YA_NPEBUbot_info_t@@AEBTvec3_t@@PEBUtacpoint_t@@PEAT2@@Z(botInfo, point, nearestTPointToPoint, predictedPointOut);
}

/*
==============
Bot_UpdateFireFromHipRange
==============
*/

void __fastcall Bot_UpdateFireFromHipRange(bot_data_t *botData)
{
  ?Bot_UpdateFireFromHipRange@@YAXPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_ShouldThrowGrenade
==============
*/

int __fastcall Bot_ShouldThrowGrenade(bot_data_t *botData)
{
  return ?Bot_ShouldThrowGrenade@@YAHPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_InitNavigator
==============
*/

void __fastcall Bot_InitNavigator(bot_info_t *botInfo)
{
  ?Bot_InitNavigator@@YAXPEAUbot_info_t@@@Z(botInfo);
}

/*
==============
Bot_CanAttack
==============
*/

int __fastcall Bot_CanAttack(const bot_data_t *botData)
{
  return ?Bot_CanAttack@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_GetPersonalityName
==============
*/

const char *__fastcall Bot_GetPersonalityName(const bot_data_t *botData)
{
  return ?Bot_GetPersonalityName@@YAPEBDPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_UpdateSight
==============
*/

void __fastcall Bot_UpdateSight(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_UpdateSight@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_CheckPathRecalculate
==============
*/

int __fastcall Bot_CheckPathRecalculate(bot_data_t *botData)
{
  return ?Bot_CheckPathRecalculate@@YAHPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_UpdateDirection
==============
*/

void __fastcall Bot_UpdateDirection(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_UpdateDirection@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
SV_BotInit
==============
*/

void __fastcall SV_BotInit(SvClientMP *bot, int firstConnect)
{
  ?SV_BotInit@@YAXPEAVSvClientMP@@H@Z(bot, firstConnect);
}

/*
==============
Bot_GetMaxFovDot
==============
*/

double __fastcall Bot_GetMaxFovDot(const bot_data_t *botData)
{
  double result; 

  *(float *)&result = ?Bot_GetMaxFovDot@@YAMPEBUbot_data_t@@@Z(botData);
  return result;
}

/*
==============
Bot_EntityFacesBot
==============
*/

int __fastcall Bot_EntityFacesBot(const bot_data_t *botData, const gentity_s *ent)
{
  return ?Bot_EntityFacesBot@@YAHPEBUbot_data_t@@PEBUgentity_s@@@Z(botData, ent);
}

/*
==============
Bot_ClearEnemy
==============
*/

void __fastcall Bot_ClearEnemy(bot_data_t *botData)
{
  ?Bot_ClearEnemy@@YAXPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_FinalizeCmdTime
==============
*/

void __fastcall Bot_FinalizeCmdTime(usercmd_s *cmd)
{
  ?Bot_FinalizeCmdTime@@YAXPEAUusercmd_s@@@Z(cmd);
}

/*
==============
Bot_AtScriptGoalYaw
==============
*/

int __fastcall Bot_AtScriptGoalYaw(const bot_data_t *botData)
{
  return ?Bot_AtScriptGoalYaw@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
SV_BotHandleGunshotTeammate
==============
*/

void __fastcall SV_BotHandleGunshotTeammate(const gentity_s *self, gentity_s *originator, const vec3_t *vBulletEndOrigin)
{
  ?SV_BotHandleGunshotTeammate@@YAXPEBUgentity_s@@PEAU1@AEBTvec3_t@@@Z(self, originator, vBulletEndOrigin);
}

/*
==============
Bot_GetScriptGoalType
==============
*/

bot_scr_goal_t __fastcall Bot_GetScriptGoalType(const bot_data_t *botData)
{
  return ?Bot_GetScriptGoalType@@YA?AW4bot_scr_goal_t@@PEBUbot_data_t@@@Z(botData);
}

/*
==============
SV_BotRequirePathnodes
==============
*/

bool __fastcall SV_BotRequirePathnodes(const bot_data_t *botData)
{
  return ?SV_BotRequirePathnodes@@YA_NPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_UpdatePitch
==============
*/

double __fastcall Bot_UpdatePitch(bot_data_t *botData, float currentPitch, float targetPitch, int forceSlow)
{
  double result; 

  *(float *)&result = ?Bot_UpdatePitch@@YAMPEAUbot_data_t@@MMH@Z(botData, currentPitch, targetPitch, forceSlow);
  return result;
}

/*
==============
SV_Bot_GetNavigator
==============
*/

AINavigator *__fastcall SV_Bot_GetNavigator(const gentity_s *pEnt)
{
  return ?SV_Bot_GetNavigator@@YAPEAVAINavigator@@PEBUgentity_s@@@Z(pEnt);
}

/*
==============
SV_BotRegisterEntAffecter
==============
*/

int __fastcall SV_BotRegisterEntAffecter(const gentity_s *ent)
{
  return ?SV_BotRegisterEntAffecter@@YAHPEBUgentity_s@@@Z(ent);
}

/*
==============
Bot_EntityUsingRiotShield
==============
*/

int __fastcall Bot_EntityUsingRiotShield(const gentity_s *ent, int onlyPermanentShields)
{
  return ?Bot_EntityUsingRiotShield@@YAHPEBUgentity_s@@H@Z(ent, onlyPermanentShields);
}

/*
==============
SV_BotCanUseTraversalLink
==============
*/

bool __fastcall SV_BotCanUseTraversalLink(const pathnode_t *startNode, const pathnode_t *endNode, const gentity_s *ent)
{
  return ?SV_BotCanUseTraversalLink@@YA_NPEBUpathnode_t@@0PEBUgentity_s@@@Z(startNode, endNode, ent);
}

/*
==============
Bot_UpdateCombat
==============
*/

void __fastcall Bot_UpdateCombat(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_UpdateCombat@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_BadPath
==============
*/

void __fastcall Bot_BadPath(gentity_s *ent)
{
  ?Bot_BadPath@@YAXPEAUgentity_s@@@Z(ent);
}

/*
==============
SV_BotStoreSentientThreat
==============
*/

void __fastcall SV_BotStoreSentientThreat(const sentient_s *botSentient, const sentient_s *otherSentient, int threat)
{
  ?SV_BotStoreSentientThreat@@YAXPEBUsentient_s@@0H@Z(botSentient, otherSentient, threat);
}

/*
==============
Bot_GetPathingStyle
==============
*/

bot_path_style_t __fastcall Bot_GetPathingStyle(const bot_data_t *botData, const vec3_t *newGoal)
{
  return ?Bot_GetPathingStyle@@YA?AW4bot_path_style_t@@PEBUbot_data_t@@PEBTvec3_t@@@Z(botData, newGoal);
}

/*
==============
Bot_GetMaxFov
==============
*/

double __fastcall Bot_GetMaxFov(const bot_data_t *botData)
{
  double result; 

  *(float *)&result = ?Bot_GetMaxFov@@YAMPEBUbot_data_t@@@Z(botData);
  return result;
}

/*
==============
Bot_Badplace_Update
==============
*/

int __fastcall Bot_Badplace_Update(bot_data_t *botData)
{
  return ?Bot_Badplace_Update@@YAHPEAUbot_data_t@@@Z(botData);
}

/*
==============
SV_BotSupportsCommand
==============
*/

int __fastcall SV_BotSupportsCommand(const char *commandString)
{
  return ?SV_BotSupportsCommand@@YAHPEBD@Z(commandString);
}

/*
==============
Bot_IsCharacterActive
==============
*/

int __fastcall Bot_IsCharacterActive(const gentity_s *ent)
{
  return ?Bot_IsCharacterActive@@YAHPEBUgentity_s@@@Z(ent);
}

/*
==============
Bot_GetGoalType
==============
*/

bot_scr_goal_t __fastcall Bot_GetGoalType(const char *goalTypeName)
{
  return ?Bot_GetGoalType@@YA?AW4bot_scr_goal_t@@PEBD@Z(goalTypeName);
}

/*
==============
Bot_UpdateCLFinishMoveButtons
==============
*/

void __fastcall Bot_UpdateCLFinishMoveButtons(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_UpdateCLFinishMoveButtons@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_CombatStateFireWait
==============
*/

int __fastcall Bot_CombatStateFireWait(bot_data_t *botData, const playerState_s *ps, const vec3_t *overrideAimPoint)
{
  return ?Bot_CombatStateFireWait@@YAHPEAUbot_data_t@@PEBUplayerState_s@@PEBTvec3_t@@@Z(botData, ps, overrideAimPoint);
}

/*
==============
Bot_GrenadeReleaseTime
==============
*/

int __fastcall Bot_GrenadeReleaseTime(bot_data_t *botData)
{
  return ?Bot_GrenadeReleaseTime@@YAHPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_GetRemoteEyesVehicleDef
==============
*/

const VehicleDef *__fastcall Bot_GetRemoteEyesVehicleDef(const bot_data_t *botData)
{
  return ?Bot_GetRemoteEyesVehicleDef@@YAPEBUVehicleDef@@PEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_IsJumping
==============
*/

int __fastcall Bot_IsJumping(const bot_data_t *botData)
{
  return ?Bot_IsJumping@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_UnregisterEvents
==============
*/

void __fastcall Bot_UnregisterEvents(const bot_data_t *botData)
{
  ?Bot_UnregisterEvents@@YAXPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_AdjustEnemyAimPoint
==============
*/

void __fastcall Bot_AdjustEnemyAimPoint(const bot_data_t *botData, const gentity_s *ent, vec3_t *aimPoint)
{
  ?Bot_AdjustEnemyAimPoint@@YAXPEBUbot_data_t@@PEBUgentity_s@@AEATvec3_t@@@Z(botData, ent, aimPoint);
}

/*
==============
Bot_EntityOnScreenForMelee
==============
*/

int __fastcall Bot_EntityOnScreenForMelee(bot_data_t *botData, const gentity_s *ent)
{
  return ?Bot_EntityOnScreenForMelee@@YAHPEAUbot_data_t@@PEBUgentity_s@@@Z(botData, ent);
}

/*
==============
Bot_IsFacingEnemy
==============
*/

int __fastcall Bot_IsFacingEnemy(bot_data_t *botData)
{
  return ?Bot_IsFacingEnemy@@YAHPEAUbot_data_t@@@Z(botData);
}

/*
==============
SV_BotEntityStartedLastStand
==============
*/

void __fastcall SV_BotEntityStartedLastStand(const gentity_s *victimEnt)
{
  ?SV_BotEntityStartedLastStand@@YAXPEBUgentity_s@@@Z(victimEnt);
}

/*
==============
Bot_GetMemFlag
==============
*/

int __fastcall Bot_GetMemFlag(const char *strFlag)
{
  return ?Bot_GetMemFlag@@YAHPEBD@Z(strFlag);
}

/*
==============
SV_BotKilled
==============
*/

void __fastcall SV_BotKilled(SvClientMP *bot)
{
  ?SV_BotKilled@@YAXPEAVSvClientMP@@@Z(bot);
}

/*
==============
Bot_GetLastKnownEntFacingDir
==============
*/

int __fastcall Bot_GetLastKnownEntFacingDir(const bot_data_t *botData, const gentity_s *entity, vec3_t *facingDir)
{
  return ?Bot_GetLastKnownEntFacingDir@@YAHPEBUbot_data_t@@PEBUgentity_s@@AEATvec3_t@@@Z(botData, entity, facingDir);
}

/*
==============
Bot_PredictSeeNode
==============
*/

bool __fastcall Bot_PredictSeeNode(const bot_info_t *botInfo, const pathnode_t *node, vec3_t *predictedOriginOut)
{
  return ?Bot_PredictSeeNode@@YA_NPEBUbot_info_t@@PEBUpathnode_t@@PEATvec3_t@@@Z(botInfo, node, predictedOriginOut);
}

/*
==============
Bot_IsSliding
==============
*/

int __fastcall Bot_IsSliding(const bot_data_t *botData)
{
  return ?Bot_IsSliding@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_UpdateAerialLockOnPath
==============
*/

int __fastcall Bot_UpdateAerialLockOnPath(bot_data_t *botData)
{
  return ?Bot_UpdateAerialLockOnPath@@YAHPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_DrawDebugErrorLocations
==============
*/

void __fastcall Bot_DrawDebugErrorLocations(const bot_data_t *botData)
{
  ?Bot_DrawDebugErrorLocations@@YAXPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_GetPathingStyleFromString
==============
*/

bot_path_style_t __fastcall Bot_GetPathingStyleFromString(const char *string)
{
  return ?Bot_GetPathingStyleFromString@@YA?AW4bot_path_style_t@@PEBD@Z(string);
}

/*
==============
Bot_ClearButton
==============
*/

void __fastcall Bot_ClearButton(bot_data_t *botData, bot_scr_buttons_t button)
{
  ?Bot_ClearButton@@YAXPEAUbot_data_t@@W4bot_scr_buttons_t@@@Z(botData, button);
}

/*
==============
Bot_ZoneSetTeam
==============
*/

void __fastcall Bot_ZoneSetTeam(int zone, team_t team)
{
  ?Bot_ZoneSetTeam@@YAXHW4team_t@@@Z(zone, team);
}

/*
==============
SV_BotPathsInit
==============
*/

void SV_BotPathsInit(void)
{
  ?SV_BotPathsInit@@YAXXZ();
}

/*
==============
Bot_UpdateStuckCheck
==============
*/

void __fastcall Bot_UpdateStuckCheck(bot_data_t *botData)
{
  ?Bot_UpdateStuckCheck@@YAXPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_MemoryGetMostRecentEvent
==============
*/

bot_mem_event_t *__fastcall Bot_MemoryGetMostRecentEvent(bot_data_t *botData, int typeFlags, int flagsRequire, int flagsExclude)
{
  return ?Bot_MemoryGetMostRecentEvent@@YAPEAUbot_mem_event_t@@PEAUbot_data_t@@HHH@Z(botData, typeFlags, flagsRequire, flagsExclude);
}

/*
==============
Bot_SetScriptEnemy
==============
*/

void __fastcall Bot_SetScriptEnemy(bot_data_t *botData, gentity_s *enemy)
{
  ?Bot_SetScriptEnemy@@YAXPEAUbot_data_t@@PEAUgentity_s@@@Z(botData, enemy);
}

/*
==============
Bot_UpdateStrafe
==============
*/

void __fastcall Bot_UpdateStrafe(bot_data_t *botData)
{
  ?Bot_UpdateStrafe@@YAXPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_GetLookAheadDist
==============
*/

double __fastcall Bot_GetLookAheadDist(const bot_info_t *botInfo)
{
  double result; 

  *(float *)&result = ?Bot_GetLookAheadDist@@YAMPEBUbot_info_t@@@Z(botInfo);
  return result;
}

/*
==============
Bot_SetScriptMove
==============
*/

void __fastcall Bot_SetScriptMove(bot_data_t *botData, const float yaw, int duration, float speed, int moveRemoteControl, int moveStickSwap)
{
  ?Bot_SetScriptMove@@YAXPEAUbot_data_t@@MHMHH@Z(botData, yaw, duration, speed, moveRemoteControl, moveStickSwap);
}

/*
==============
Bot_CanSeeSentient
==============
*/

int __fastcall Bot_CanSeeSentient(const bot_data_t *botData, const sentient_s *otherSent)
{
  return ?Bot_CanSeeSentient@@YAHPEBUbot_data_t@@PEBUsentient_s@@@Z(botData, otherSent);
}

/*
==============
Bot_SetScriptGoal
==============
*/

int __fastcall Bot_SetScriptGoal(bot_data_t *botData, const vec3_t *goal, float goalRadius, bot_scr_goal_t goalType, float *goalYaw, float objectiveRadius, int shortTermGoal)
{
  return ?Bot_SetScriptGoal@@YAHPEAUbot_data_t@@AEBTvec3_t@@MW4bot_scr_goal_t@@PEAMMH@Z(botData, goal, goalRadius, goalType, goalYaw, objectiveRadius, shortTermGoal);
}

/*
==============
Bot_ZoneSetCount
==============
*/

void __fastcall Bot_ZoneSetCount(int zone, int nodeTeam, bot_zone_count_t type, int count)
{
  ?Bot_ZoneSetCount@@YAXHHW4bot_zone_count_t@@H@Z(zone, nodeTeam, type, count);
}

/*
==============
Bot_CreateZoneObstacle
==============
*/

void __fastcall Bot_CreateZoneObstacle(int zoneNum, team_t team, float obsPenalty)
{
  ?Bot_CreateZoneObstacle@@YAXHW4team_t@@M@Z(zoneNum, team, obsPenalty);
}

/*
==============
Bot_ClearScriptEnemy
==============
*/

void __fastcall Bot_ClearScriptEnemy(bot_data_t *botData)
{
  ?Bot_ClearScriptEnemy@@YAXPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_GetZoneCountCompareType
==============
*/

int __fastcall Bot_GetZoneCountCompareType(const char *string)
{
  return ?Bot_GetZoneCountCompareType@@YAHPEBD@Z(string);
}

/*
==============
Bot_CombatStateBlinded
==============
*/

int __fastcall Bot_CombatStateBlinded(bot_data_t *botData, usercmd_s *cmd)
{
  return ?Bot_CombatStateBlinded@@YAHPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_IsSentientPotentialCamper
==============
*/

int __fastcall Bot_IsSentientPotentialCamper(const sentient_s *sentient)
{
  return ?Bot_IsSentientPotentialCamper@@YAHPEBUsentient_s@@@Z(sentient);
}

/*
==============
SV_BotClearActiveBotCount
==============
*/

void SV_BotClearActiveBotCount(void)
{
  ?SV_BotClearActiveBotCount@@YAXXZ();
}

/*
==============
Bot_GetLastKnownEntNearestNode
==============
*/

pathnode_t *__fastcall Bot_GetLastKnownEntNearestNode(const bot_data_t *botData, const gentity_s *entity)
{
  return ?Bot_GetLastKnownEntNearestNode@@YAPEAUpathnode_t@@PEBUbot_data_t@@PEBUgentity_s@@@Z(botData, entity);
}

/*
==============
SV_BotSetFireRecoil
==============
*/

void __fastcall SV_BotSetFireRecoil(const int clientNum, const vec3_t *kickAVel)
{
  ?SV_BotSetFireRecoil@@YAXHAEBTvec3_t@@@Z(clientNum, kickAVel);
}

/*
==============
Bot_IsUseButtonPressed
==============
*/

bool __fastcall Bot_IsUseButtonPressed(const bot_data_t *botData)
{
  return ?Bot_IsUseButtonPressed@@YA_NPEBUbot_data_t@@@Z(botData);
}

/*
==============
SV_BotEntInCurrentFOV
==============
*/

int __fastcall SV_BotEntInCurrentFOV(ai_common_t *self, const gentity_s *ent)
{
  return ?SV_BotEntInCurrentFOV@@YAHPEAUai_common_t@@PEBUgentity_s@@@Z(self, ent);
}

/*
==============
SV_BotKnownEnemiesRadial
==============
*/

void __fastcall SV_BotKnownEnemiesRadial(const gentity_s *self, const vec3_t *vOrigin, float radius, unsigned __int8 knownType)
{
  ?SV_BotKnownEnemiesRadial@@YAXPEBUgentity_s@@AEBTvec3_t@@ME@Z(self, vOrigin, radius, knownType);
}

/*
==============
Bot_GetScriptedGrenadeType
==============
*/

int __fastcall Bot_GetScriptedGrenadeType(const char *scriptGrenadeTypeName)
{
  return ?Bot_GetScriptedGrenadeType@@YAHPEBD@Z(scriptGrenadeTypeName);
}

/*
==============
Bot_UpdateEnemySearchLook
==============
*/

int __fastcall Bot_UpdateEnemySearchLook(bot_data_t *botData, vec3_t *viewAnglesOut)
{
  return ?Bot_UpdateEnemySearchLook@@YAHPEAUbot_data_t@@AEATvec3_t@@@Z(botData, viewAnglesOut);
}

/*
==============
Bot_GetCharacterIndex
==============
*/

int __fastcall Bot_GetCharacterIndex(const bot_data_t *botData)
{
  return ?Bot_GetCharacterIndex@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
SV_BadPlaceExistsToBot
==============
*/

int __fastcall SV_BadPlaceExistsToBot(const ai_common_t *self, unsigned __int8 badPlaceType)
{
  return ?SV_BadPlaceExistsToBot@@YAHPEBUai_common_t@@E@Z(self, badPlaceType);
}

/*
==============
Bot_LocationIsScriptGoal
==============
*/

int __fastcall Bot_LocationIsScriptGoal(const bot_data_t *botData, const vec3_t *location)
{
  return ?Bot_LocationIsScriptGoal@@YAHPEBUbot_data_t@@AEBTvec3_t@@@Z(botData, location);
}

/*
==============
SV_BotAllowedToSeeEnt
==============
*/

int __fastcall SV_BotAllowedToSeeEnt(ai_common_t *self, const gentity_s *ent)
{
  return ?SV_BotAllowedToSeeEnt@@YAHPEAUai_common_t@@PEBUgentity_s@@@Z(self, ent);
}

/*
==============
Bot_NavPathExists
==============
*/

int __fastcall Bot_NavPathExists(const bot_info_t *botInfo)
{
  return ?Bot_NavPathExists@@YAHPEBUbot_info_t@@@Z(botInfo);
}

/*
==============
Bot_CanReactEnemy
==============
*/

int __fastcall Bot_CanReactEnemy(const bot_data_t *botData)
{
  return ?Bot_CanReactEnemy@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_UpdateXRayVision
==============
*/

void __fastcall Bot_UpdateXRayVision(bot_data_t *botData)
{
  ?Bot_UpdateXRayVision@@YAXPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_MemoryFindEvent
==============
*/

int __fastcall Bot_MemoryFindEvent(bot_data_t *botData, bot_mem_type_t type, __int16 entNum, const vec3_t *location1, int newestTime, int oldestTime)
{
  return ?Bot_MemoryFindEvent@@YAHPEAUbot_data_t@@W4bot_mem_type_t@@FPEBTvec3_t@@HH@Z(botData, type, entNum, location1, newestTime, oldestTime);
}

/*
==============
Bot_UpdateReload
==============
*/

void __fastcall Bot_UpdateReload(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_UpdateReload@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
SV_BotClearBotSentientInfo
==============
*/

void __fastcall SV_BotClearBotSentientInfo(sentient_s *botSentient, sentient_s *otherSentient)
{
  ?SV_BotClearBotSentientInfo@@YAXPEAUsentient_s@@0@Z(botSentient, otherSentient);
}

/*
==============
SV_BotInitDataSafety
==============
*/

void __fastcall SV_BotInitDataSafety(SvClientMP *bot)
{
  ?SV_BotInitDataSafety@@YAXPEAVSvClientMP@@@Z(bot);
}

/*
==============
Bot_ClearScriptedGrenade
==============
*/

void __fastcall Bot_ClearScriptedGrenade(bot_info_t *botInfo)
{
  ?Bot_ClearScriptedGrenade@@YAXPEAUbot_info_t@@@Z(botInfo);
}

/*
==============
Bot_CombatStateFire
==============
*/

int __fastcall Bot_CombatStateFire(bot_data_t *botData, const playerState_s *ps, usercmd_s *cmd)
{
  return ?Bot_CombatStateFire@@YAHPEAUbot_data_t@@PEBUplayerState_s@@PEAUusercmd_s@@@Z(botData, ps, cmd);
}

/*
==============
Bot_SetDifficultySetting
==============
*/

int __fastcall Bot_SetDifficultySetting(bot_data_t *botData, const char *settingName, const char *settingValue)
{
  return ?Bot_SetDifficultySetting@@YAHPEAUbot_data_t@@PEBD1@Z(botData, settingName, settingValue);
}

/*
==============
Bot_UpdateSearchLook
==============
*/

int __fastcall Bot_UpdateSearchLook(bot_data_t *botData)
{
  return ?Bot_UpdateSearchLook@@YAHPEAUbot_data_t@@@Z(botData);
}

/*
==============
SV_BotShutdownBotAI
==============
*/

void SV_BotShutdownBotAI(void)
{
  ?SV_BotShutdownBotAI@@YAXXZ();
}

/*
==============
Bot_PathGetNegotiationStartNode
==============
*/

pathnode_t *__fastcall Bot_PathGetNegotiationStartNode(const bot_info_t *botInfo)
{
  return ?Bot_PathGetNegotiationStartNode@@YAPEAUpathnode_t@@PEBUbot_info_t@@@Z(botInfo);
}

/*
==============
SV_BotTeamLimit
==============
*/

unsigned __int8 __fastcall SV_BotTeamLimit(int relativeTeam)
{
  return ?SV_BotTeamLimit@@YAEH@Z(relativeTeam);
}

/*
==============
Bot_CanSeeSentientQuick
==============
*/

int __fastcall Bot_CanSeeSentientQuick(const bot_data_t *botData, sentient_s *otherSent)
{
  return ?Bot_CanSeeSentientQuick@@YAHPEBUbot_data_t@@PEAUsentient_s@@@Z(botData, otherSent);
}

/*
==============
Bot_GetActiveGoal
==============
*/

void __fastcall Bot_GetActiveGoal(const bot_data_t *botData, vec3_t *goal)
{
  ?Bot_GetActiveGoal@@YAXPEBUbot_data_t@@AEATvec3_t@@@Z(botData, goal);
}

/*
==============
Bot_GetScriptGoal
==============
*/

void __fastcall Bot_GetScriptGoal(const bot_data_t *botData, vec3_t *goal)
{
  ?Bot_GetScriptGoal@@YAXPEBUbot_data_t@@AEATvec3_t@@@Z(botData, goal);
}

/*
==============
Bot_IsUnreachableHighAerialSentient
==============
*/

int __fastcall Bot_IsUnreachableHighAerialSentient(sentient_s *sentient)
{
  return ?Bot_IsUnreachableHighAerialSentient@@YAHPEAUsentient_s@@@Z(sentient);
}

/*
==============
SV_BotReevaluatePath
==============
*/

void __fastcall SV_BotReevaluatePath(const gentity_s *ent)
{
  ?SV_BotReevaluatePath@@YAXPEBUgentity_s@@@Z(ent);
}

/*
==============
SV_BotFovDotZ
==============
*/

double __fastcall SV_BotFovDotZ(const ai_common_t *self, const gentity_s *otherEnt)
{
  double result; 

  *(float *)&result = ?SV_BotFovDotZ@@YAMPEBUai_common_t@@PEBUgentity_s@@@Z(self, otherEnt);
  return result;
}

/*
==============
Bot_GetTargetedLookAt
==============
*/

int __fastcall Bot_GetTargetedLookAt(bot_data_t *botData, vec3_t *lookAtPosOut)
{
  return ?Bot_GetTargetedLookAt@@YAHPEAUbot_data_t@@AEATvec3_t@@@Z(botData, lookAtPosOut);
}

/*
==============
SV_BotUpdateCommon
==============
*/

void SV_BotUpdateCommon(void)
{
  ?SV_BotUpdateCommon@@YAXXZ();
}

/*
==============
Bot_IsCamping
==============
*/

int __fastcall Bot_IsCamping(const bot_data_t *botData)
{
  return ?Bot_IsCamping@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
SV_BotDebugString
==============
*/

void __fastcall SV_BotDebugString(bot_data_t *botData, const vec3_t *xyz, const vec4_t *color, float scale, const char *pszText, int duration)
{
  ?SV_BotDebugString@@YAXPEAUbot_data_t@@AEBTvec3_t@@AEBTvec4_t@@MPEBDH@Z(botData, xyz, color, scale, pszText, duration);
}

/*
==============
Bot_FreeNavigator
==============
*/

void __fastcall Bot_FreeNavigator(bot_info_t *botInfo)
{
  ?Bot_FreeNavigator@@YAXPEAUbot_info_t@@@Z(botInfo);
}

/*
==============
Bot_GetLookType
==============
*/

int __fastcall Bot_GetLookType(const char *strName)
{
  return ?Bot_GetLookType@@YAHPEBD@Z(strName);
}

/*
==============
SV_BotFovDot
==============
*/

double __fastcall SV_BotFovDot(const ai_common_t *self, const gentity_s *otherEnt)
{
  double result; 

  *(float *)&result = ?SV_BotFovDot@@YAMPEBUai_common_t@@PEBUgentity_s@@@Z(self, otherEnt);
  return result;
}

/*
==============
Bot_UpdateJumpTraversal
==============
*/

void __fastcall Bot_UpdateJumpTraversal(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_UpdateJumpTraversal@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
SV_BotFreeSystemMemory
==============
*/

void SV_BotFreeSystemMemory(void)
{
  ?SV_BotFreeSystemMemory@@YAXXZ();
}

/*
==============
Bot_GetBotPersonalityFromMenu
==============
*/

bot_personality_t __fastcall Bot_GetBotPersonalityFromMenu(const bot_data_t *botData)
{
  return ?Bot_GetBotPersonalityFromMenu@@YA?AW4bot_personality_t@@PEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_PathStuckRecover
==============
*/

int __fastcall Bot_PathStuckRecover(bot_data_t *botData)
{
  return ?Bot_PathStuckRecover@@YAHPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_GetPersonality
==============
*/

bot_personality_t __fastcall Bot_GetPersonality(const bot_data_t *botData)
{
  return ?Bot_GetPersonality@@YA?AW4bot_personality_t@@PEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_StrafeOnPath
==============
*/

void __fastcall Bot_StrafeOnPath(bot_data_t *botData, usercmd_s *cmd, int speed)
{
  ?Bot_StrafeOnPath@@YAXPEAUbot_data_t@@PEAUusercmd_s@@H@Z(botData, cmd, speed);
}

/*
==============
SV_BotRecalculatePath
==============
*/

void __fastcall SV_BotRecalculatePath(gentity_s *ent)
{
  ?SV_BotRecalculatePath@@YAXPEAUgentity_s@@@Z(ent);
}

/*
==============
Bot_ZonePathAdd
==============
*/

void __fastcall Bot_ZonePathAdd(const bot_info_t *botInfo, int addCount)
{
  ?Bot_ZonePathAdd@@YAXPEBUbot_info_t@@H@Z(botInfo, addCount);
}

/*
==============
Bot_GetEntityData
==============
*/

bot_data_t *__fastcall Bot_GetEntityData(const gentity_s *entity)
{
  return ?Bot_GetEntityData@@YAPEAUbot_data_t@@PEBUgentity_s@@@Z(entity);
}

/*
==============
Bot_PredictSeePointUsingNode
==============
*/

bool __fastcall Bot_PredictSeePointUsingNode(const bot_info_t *botInfo, const vec3_t *point, const pathnode_t *nearestNodeToPoint, vec3_t *predictedPointOut)
{
  return ?Bot_PredictSeePointUsingNode@@YA_NPEBUbot_info_t@@AEBTvec3_t@@PEBUpathnode_t@@PEAT2@@Z(botInfo, point, nearestNodeToPoint, predictedPointOut);
}

/*
==============
SV_BotUpdateEyeInfo
==============
*/

void __fastcall SV_BotUpdateEyeInfo(const gentity_s *self)
{
  ?SV_BotUpdateEyeInfo@@YAXPEBUgentity_s@@@Z(self);
}

/*
==============
Bot_CombatStateMelee
==============
*/

int __fastcall Bot_CombatStateMelee(bot_data_t *botData, const playerState_s *ps, usercmd_s *cmd)
{
  return ?Bot_CombatStateMelee@@YAHPEAUbot_data_t@@PEBUplayerState_s@@PEAUusercmd_s@@@Z(botData, ps, cmd);
}

/*
==============
Bot_ApplyKickAngles
==============
*/

void __fastcall Bot_ApplyKickAngles(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_ApplyKickAngles@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_IsHighAerialSentient
==============
*/

int __fastcall Bot_IsHighAerialSentient(sentient_s *sentient)
{
  return ?Bot_IsHighAerialSentient@@YAHPEAUsentient_s@@@Z(sentient);
}

/*
==============
SV_BotClearGoalAndEnemy
==============
*/

void __fastcall SV_BotClearGoalAndEnemy(gentity_s *bot)
{
  ?SV_BotClearGoalAndEnemy@@YAXPEAUgentity_s@@@Z(bot);
}

/*
==============
Bot_UpdateScriptGoalLook
==============
*/

int __fastcall Bot_UpdateScriptGoalLook(bot_data_t *botData, vec3_t *viewAnglesOut)
{
  return ?Bot_UpdateScriptGoalLook@@YAHPEAUbot_data_t@@AEATvec3_t@@@Z(botData, viewAnglesOut);
}

/*
==============
Bot_MemoryReadEvent
==============
*/

bot_mem_event_t *__fastcall Bot_MemoryReadEvent(bot_data_t *botData, const int index)
{
  return ?Bot_MemoryReadEvent@@YAPEAUbot_mem_event_t@@PEAUbot_data_t@@H@Z(botData, index);
}

/*
==============
Bot_GetScriptGoalYaw
==============
*/

double __fastcall Bot_GetScriptGoalYaw(const bot_data_t *botData)
{
  double result; 

  *(float *)&result = ?Bot_GetScriptGoalYaw@@YAMPEBUbot_data_t@@@Z(botData);
  return result;
}

/*
==============
Bot_ZoneUpdateCounts
==============
*/

void Bot_ZoneUpdateCounts(void)
{
  ?Bot_ZoneUpdateCounts@@YAXXZ();
}

/*
==============
Bot_IsRandomized
==============
*/

int __fastcall Bot_IsRandomized(const bot_data_t *botData)
{
  return ?Bot_IsRandomized@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_PathClear
==============
*/

void __fastcall Bot_PathClear(bot_info_t *botInfo)
{
  ?Bot_PathClear@@YAXPEAUbot_info_t@@@Z(botInfo);
}

/*
==============
Bot_SetDifficulty
==============
*/

void __fastcall Bot_SetDifficulty(bot_data_t *botData, bot_difficulty_t botDifficulty)
{
  ?Bot_SetDifficulty@@YAXPEAUbot_data_t@@W4bot_difficulty_t@@@Z(botData, botDifficulty);
}

/*
==============
Bot_GetScriptFlagType
==============
*/

int __fastcall Bot_GetScriptFlagType(const char *scriptFlagName)
{
  return ?Bot_GetScriptFlagType@@YAHPEBD@Z(scriptFlagName);
}

/*
==============
Bot_MemoryGetAllPositions
==============
*/

void __fastcall Bot_MemoryGetAllPositions(bot_data_t *botData, int timeNewest, int timeOldest, int typeFlags, int locationNumber, vec3_t *positions, int numPositionsStart, int positionsSize, int *numResults, int flagsExclude)
{
  ?Bot_MemoryGetAllPositions@@YAXPEAUbot_data_t@@HHHHPEATvec3_t@@HHPEAHH@Z(botData, timeNewest, timeOldest, typeFlags, locationNumber, positions, numPositionsStart, positionsSize, numResults, flagsExclude);
}

/*
==============
Bot_UpdateStance
==============
*/

void __fastcall Bot_UpdateStance(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_UpdateStance@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_GetCurrentNumDebugGoals
==============
*/

int __fastcall Bot_GetCurrentNumDebugGoals()
{
  return ?Bot_GetCurrentNumDebugGoals@@YAHXZ();
}

/*
==============
Bot_CleanupBotInfo
==============
*/

void __fastcall Bot_CleanupBotInfo(bot_data_t *botData)
{
  ?Bot_CleanupBotInfo@@YAXPEAUbot_data_t@@@Z(botData);
}

/*
==============
SV_BotEntityDied
==============
*/

void __fastcall SV_BotEntityDied(const gentity_s *victimEnt)
{
  ?SV_BotEntityDied@@YAXPEBUgentity_s@@@Z(victimEnt);
}

/*
==============
Bot_GetTeamDifficulty
==============
*/

bot_difficulty_t __fastcall Bot_GetTeamDifficulty(int relativeTeam)
{
  return ?Bot_GetTeamDifficulty@@YA?AW4bot_difficulty_t@@H@Z(relativeTeam);
}

/*
==============
SV_BotGetRandomName
==============
*/

const char *__fastcall SV_BotGetRandomName()
{
  return ?SV_BotGetRandomName@@YAPEBDXZ();
}

/*
==============
Bot_ZoneGetCount
==============
*/

int __fastcall Bot_ZoneGetCount(int zone, int nodeTeam, bot_zone_count_t type)
{
  return ?Bot_ZoneGetCount@@YAHHHW4bot_zone_count_t@@@Z(zone, nodeTeam, type);
}

/*
==============
Bot_GetClosestCharacterList
==============
*/

int __fastcall Bot_GetClosestCharacterList(gentity_s *entity, const vec3_t *originPoint, const float maxDist, int onlyAI, int allowScriptedAgents, int excludeSelf, int onlyVisibleClients, const bitarray<224> *teamFlags, gentity_s **results, int limit)
{
  return ?Bot_GetClosestCharacterList@@YAHPEAUgentity_s@@AEBTvec3_t@@MHHHHAEBV?$bitarray@$0OA@@@PEAPEAU1@H@Z(entity, originPoint, maxDist, onlyAI, allowScriptedAgents, excludeSelf, onlyVisibleClients, teamFlags, results, limit);
}

/*
==============
Bot_SightThresholdReached
==============
*/

int __fastcall Bot_SightThresholdReached(const sentient_s *botSentient, const sentient_s *enemy)
{
  return ?Bot_SightThresholdReached@@YAHPEBUsentient_s@@0@Z(botSentient, enemy);
}

/*
==============
Bot_GetDifficulty
==============
*/

bot_difficulty_t __fastcall Bot_GetDifficulty(const bot_data_t *botData)
{
  return ?Bot_GetDifficulty@@YA?AW4bot_difficulty_t@@PEBUbot_data_t@@@Z(botData);
}

/*
==============
SV_BotStaticStateRead
==============
*/

void __fastcall SV_BotStaticStateRead(SaveGame *save)
{
  ?SV_BotStaticStateRead@@YAXPEAUSaveGame@@@Z(save);
}

/*
==============
Bot_GetWorldSize
==============
*/

void __fastcall Bot_GetWorldSize(vec3_t *worldSize)
{
  ?Bot_GetWorldSize@@YAXAEATvec3_t@@@Z(worldSize);
}

/*
==============
Bot_UpdateMovement
==============
*/

void __fastcall Bot_UpdateMovement(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_UpdateMovement@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_UpdateScreenTargets
==============
*/

void __fastcall Bot_UpdateScreenTargets(bot_data_t *botData)
{
  ?Bot_UpdateScreenTargets@@YAXPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_IsVehicleEnt
==============
*/

int __fastcall Bot_IsVehicleEnt(const gentity_s *ent)
{
  return ?Bot_IsVehicleEnt@@YAHPEBUgentity_s@@@Z(ent);
}

/*
==============
Bot_GetScriptGoalRadius
==============
*/

double __fastcall Bot_GetScriptGoalRadius(const bot_data_t *botData)
{
  double result; 

  *(float *)&result = ?Bot_GetScriptGoalRadius@@YAMPEBUbot_data_t@@@Z(botData);
  return result;
}

/*
==============
Bot_GetLookAheadDir
==============
*/

void __fastcall Bot_GetLookAheadDir(const bot_info_t *botInfo, vec3_t *lookaheadDirOut)
{
  ?Bot_GetLookAheadDir@@YAXPEBUbot_info_t@@AEATvec3_t@@@Z(botInfo, lookaheadDirOut);
}

/*
==============
Bot_GetBotPersistentMatchData
==============
*/

bot_match_data_t *__fastcall Bot_GetBotPersistentMatchData(const SvClientMP *bot)
{
  return ?Bot_GetBotPersistentMatchData@@YAPEAUbot_match_data_t@@PEBVSvClientMP@@@Z(bot);
}

/*
==============
SV_BotZoneGetIndoorPercent
==============
*/

double __fastcall SV_BotZoneGetIndoorPercent(int zone)
{
  double result; 

  *(float *)&result = ?SV_BotZoneGetIndoorPercent@@YAMH@Z(zone);
  return result;
}

/*
==============
Bot_UpdateVariableZoomToggle
==============
*/

void __fastcall Bot_UpdateVariableZoomToggle(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_UpdateVariableZoomToggle@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_CanSeeHardware
==============
*/

int __fastcall Bot_CanSeeHardware(ai_common_t *self, const gentity_s *ent)
{
  return ?Bot_CanSeeHardware@@YAHPEAUai_common_t@@PEBUgentity_s@@@Z(self, ent);
}

/*
==============
SV_BotDebugStringEnt
==============
*/

void __fastcall SV_BotDebugStringEnt(gentity_s *ent, const vec3_t *xyz, const vec4_t *color, float scale, const char *pszText, int duration)
{
  ?SV_BotDebugStringEnt@@YAXPEAUgentity_s@@Tvec3_t@@Tvec4_t@@MPEBDH@Z(ent, xyz, color, scale, pszText, duration);
}

/*
==============
Bot_ResetLife
==============
*/

void __fastcall Bot_ResetLife(bot_data_t *botData)
{
  ?Bot_ResetLife@@YAXPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_UpdateYaw
==============
*/

double __fastcall Bot_UpdateYaw(bot_data_t *botData, float currentYaw, float targetYaw, int forceSlow)
{
  double result; 

  *(float *)&result = ?Bot_UpdateYaw@@YAMPEAUbot_data_t@@MMH@Z(botData, currentYaw, targetYaw, forceSlow);
  return result;
}

/*
==============
Bot_ValidateMatchData
==============
*/

void __fastcall Bot_ValidateMatchData(const bot_data_t *botData)
{
  ?Bot_ValidateMatchData@@YAXPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_CombatStateThrowBack
==============
*/

bool __fastcall Bot_CombatStateThrowBack(bot_data_t *botData, playerState_s *ps, usercmd_s *cmd)
{
  return ?Bot_CombatStateThrowBack@@YA_NPEAUbot_data_t@@PEAUplayerState_s@@PEAUusercmd_s@@@Z(botData, ps, cmd);
}

/*
==============
Bot_Badplace_PathEscape
==============
*/

int __fastcall Bot_Badplace_PathEscape(bot_data_t *botData)
{
  return ?Bot_Badplace_PathEscape@@YAHPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_MemoryIterate
==============
*/

bot_mem_event_t *__fastcall Bot_MemoryIterate(bot_data_t *botData, int timeNewest, int timeOldest, bot_mem_iterator_t *memIt)
{
  return ?Bot_MemoryIterate@@YAPEAUbot_mem_event_t@@PEAUbot_data_t@@HHPEAUbot_mem_iterator_t@@@Z(botData, timeNewest, timeOldest, memIt);
}

/*
==============
Bot_UpdateRadar
==============
*/

void __fastcall Bot_UpdateRadar(bot_data_t *botData)
{
  ?Bot_UpdateRadar@@YAXPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_GetRequestedNavGoal
==============
*/

void __fastcall Bot_GetRequestedNavGoal(const bot_info_t *botInfo, vec3_t *requestedGoalOut)
{
  ?Bot_GetRequestedNavGoal@@YAXPEBUbot_info_t@@AEATvec3_t@@@Z(botInfo, requestedGoalOut);
}

/*
==============
SV_BotFindRandomGoal
==============
*/

bool __fastcall SV_BotFindRandomGoal(const bot_data_t *botData, const vec3_t *nonBotOverrideOrigin, const vec3_t *nonBotOverrideAngles, vec3_t *goalOut)
{
  return ?SV_BotFindRandomGoal@@YA_NPEBUbot_data_t@@PEBTvec3_t@@1AEAT2@@Z(botData, nonBotOverrideOrigin, nonBotOverrideAngles, goalOut);
}

/*
==============
Bot_GetSensesObstructed
==============
*/

int __fastcall Bot_GetSensesObstructed(const bot_data_t *botData, float *visionBlock, float *hearingBlock)
{
  return ?Bot_GetSensesObstructed@@YAHPEBUbot_data_t@@PEAM1@Z(botData, visionBlock, hearingBlock);
}

/*
==============
Bot_NegotiationGetType
==============
*/

int __fastcall Bot_NegotiationGetType(const pathnode_t *negotiationNode)
{
  return ?Bot_NegotiationGetType@@YAHPEBUpathnode_t@@@Z(negotiationNode);
}

/*
==============
Bot_LookAtEntity
==============
*/

void __fastcall Bot_LookAtEntity(bot_data_t *botData, gentity_s *ent, int duration, bot_look_t type)
{
  ?Bot_LookAtEntity@@YAXPEAUbot_data_t@@PEAUgentity_s@@HW4bot_look_t@@@Z(botData, ent, duration, type);
}

/*
==============
Bot_IsEnemyNearGoal
==============
*/

int __fastcall Bot_IsEnemyNearGoal(bot_data_t *botData, const gentity_s *enemy)
{
  return ?Bot_IsEnemyNearGoal@@YAHPEAUbot_data_t@@PEBUgentity_s@@@Z(botData, enemy);
}

/*
==============
Bot_SetAwareness
==============
*/

void __fastcall Bot_SetAwareness(bot_data_t *botData, float awareness)
{
  ?Bot_SetAwareness@@YAXPEAUbot_data_t@@M@Z(botData, awareness);
}

/*
==============
Bot_LoadDifficultySettings
==============
*/

void __fastcall Bot_LoadDifficultySettings(bot_data_t *botData, bot_difficulty_t botDifficulty)
{
  ?Bot_LoadDifficultySettings@@YAXPEAUbot_data_t@@W4bot_difficulty_t@@@Z(botData, botDifficulty);
}

/*
==============
Bot_UpdateEnemyAwareLook
==============
*/

int __fastcall Bot_UpdateEnemyAwareLook(bot_data_t *botData, vec3_t *viewAnglesOut)
{
  return ?Bot_UpdateEnemyAwareLook@@YAHPEAUbot_data_t@@AEATvec3_t@@@Z(botData, viewAnglesOut);
}

/*
==============
Bot_DestroyZoneObstacle
==============
*/

void __fastcall Bot_DestroyZoneObstacle(int zoneNum, team_t team)
{
  ?Bot_DestroyZoneObstacle@@YAXHW4team_t@@@Z(zoneNum, team);
}

/*
==============
Bot_HideFromEntity
==============
*/

void __fastcall Bot_HideFromEntity(bot_data_t *botData, const gentity_s *entity, float hideRange, int duration)
{
  ?Bot_HideFromEntity@@YAXPEAUbot_data_t@@PEBUgentity_s@@MH@Z(botData, entity, hideRange, duration);
}

/*
==============
Bot_DebugPathGoalEnabled
==============
*/

int __fastcall Bot_DebugPathGoalEnabled()
{
  return ?Bot_DebugPathGoalEnabled@@YAHXZ();
}

/*
==============
Bot_IsOnGroundOrNearGround
==============
*/

int __fastcall Bot_IsOnGroundOrNearGround(const bot_data_t *botData)
{
  return ?Bot_IsOnGroundOrNearGround@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_RandomInput
==============
*/

void __fastcall Bot_RandomInput(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_RandomInput@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_GetHidingFromEntity
==============
*/

gentity_s *__fastcall Bot_GetHidingFromEntity(const bot_data_t *botData)
{
  return ?Bot_GetHidingFromEntity@@YAPEAUgentity_s@@PEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_UpdateBadPathLook
==============
*/

int __fastcall Bot_UpdateBadPathLook(bot_data_t *botData, vec3_t *viewAnglesOut)
{
  return ?Bot_UpdateBadPathLook@@YAHPEAUbot_data_t@@AEATvec3_t@@@Z(botData, viewAnglesOut);
}

/*
==============
Bot_IsInRangeOfEnemy
==============
*/

int __fastcall Bot_IsInRangeOfEnemy(const bot_data_t *botData)
{
  return ?Bot_IsInRangeOfEnemy@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_PersonalityFromString
==============
*/

bot_personality_t __fastcall Bot_PersonalityFromString(const char *botPersonalityString)
{
  return ?Bot_PersonalityFromString@@YA?AW4bot_personality_t@@PEBD@Z(botPersonalityString);
}

/*
==============
Bot_GetWorldClosestEdge
==============
*/

double __fastcall Bot_GetWorldClosestEdge(const bot_data_t *botData, const vec3_t *point, vec3_t *resultPoint, vec3_t *resultNormal)
{
  double result; 

  *(float *)&result = ?Bot_GetWorldClosestEdge@@YAMPEBUbot_data_t@@PEBTvec3_t@@AEAT2@PEAT2@@Z(botData, point, resultPoint, resultNormal);
  return result;
}

/*
==============
Bot_GetBotInfoFromNetBuffer
==============
*/

bot_info_t *__fastcall Bot_GetBotInfoFromNetBuffer(const SvClientMP *bot)
{
  return ?Bot_GetBotInfoFromNetBuffer@@YAPEAUbot_info_t@@PEBVSvClientMP@@@Z(bot);
}

/*
==============
Bot_GetClosestNavigablePoint
==============
*/

int __fastcall Bot_GetClosestNavigablePoint(const vec3_t *point, float maxDist, int traceMask, vec3_t *resultPoint, __int16 groundEnt)
{
  return ?Bot_GetClosestNavigablePoint@@YAHAEBTvec3_t@@MHAEAT1@F@Z(point, maxDist, traceMask, resultPoint, groundEnt);
}

/*
==============
SV_BotBreakGlassMove
==============
*/

int __fastcall SV_BotBreakGlassMove(const gentity_s *ent, const vec3_t *velocity, const Bounds *bounds)
{
  return ?SV_BotBreakGlassMove@@YAHPEBUgentity_s@@AEBTvec3_t@@PEBUBounds@@@Z(ent, velocity, bounds);
}

/*
==============
Bot_ShouldDelayScriptGoal
==============
*/

int __fastcall Bot_ShouldDelayScriptGoal(const bot_data_t *botData)
{
  return ?Bot_ShouldDelayScriptGoal@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_AIKnownEnemiesCapsule
==============
*/
void Bot_AIKnownEnemiesCapsule(bot_info_t *botInfo, const vec3_t *start, const vec3_t *end, float capsuleRadius, unsigned __int8 knownType)
{
  float v10; 
  float v11; 
  gentity_s *ent; 
  AIBotInterface *m_pAI; 
  bitarray<224> *AllTeamFlags; 
  sentient_s *i; 
  gentity_s *v16; 
  __int16 EntityIndex; 
  const SvClientMP *MpClient; 
  int IsClientConnected; 
  bitarray_base<bitarray<224> > *v20; 
  const SvClientMP *v21; 
  double v22; 
  __int64 v23; 
  __int64 v24; 
  AIBotWrapper v25; 
  bitarray<224> iTeamFlags; 
  vec3_t vEyePosOut; 

  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6063, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  if ( !botInfo->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6064, ASSERT_TYPE_ASSERT, "( botInfo->sentient )", (const char *)&queryFormat, "botInfo->sentient") )
    __debugbreak();
  if ( capsuleRadius <= 0.0 )
  {
    __asm { vxorpd  xmm0, xmm0, xmm0 }
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6065, ASSERT_TYPE_ASSERT, "( capsuleRadius ) > ( 0 )", "capsuleRadius > 0\n\t%g, %g", capsuleRadius, *(double *)&_XMM0) )
      __debugbreak();
  }
  if ( knownType >= 0x1Bu )
  {
    LODWORD(v24) = 27;
    LODWORD(v23) = knownType;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6066, ASSERT_TYPE_ASSERT, "(unsigned)( knownType ) < (unsigned)( NUM_AI_KNOWN )", "knownType doesn't index NUM_AI_KNOWN\n\t%i not in [0, %i)", v23, v24) )
      __debugbreak();
  }
  v10 = end->v[1] - start->v[1];
  v11 = end->v[2] - start->v[2];
  if ( (float)((float)((float)(v10 * v10) + (float)((float)(end->v[0] - start->v[0]) * (float)(end->v[0] - start->v[0]))) + (float)(v11 * v11)) <= 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6067, ASSERT_TYPE_ASSERT, "( Vec3DistanceSq( start, end ) > 0 )", (const char *)&queryFormat, "Vec3DistanceSq( start, end ) > 0") )
    __debugbreak();
  AICommonInterface::AICommonInterface(&v25.m_botInterface);
  v25.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v25.m_botAgentInterface);
  ent = botInfo->ent;
  v25.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v25.m_pAI = NULL;
  AIBotWrapper::Setup(&v25, ent);
  m_pAI = v25.m_pAI;
  if ( !v25.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6075, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  if ( Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) )
    AllTeamFlags = (bitarray<224> *)Com_TeamsSP_GetAllTeamFlags();
  else
    AllTeamFlags = (bitarray<224> *)Com_TeamsMP_GetAllTeamFlags();
  iTeamFlags = *AllTeamFlags;
  for ( i = Sentient_FirstSentient(&iTeamFlags); i; i = Sentient_NextSentient(i, &iTeamFlags) )
  {
    v16 = i->ent;
    if ( i->ent )
    {
      EntityIndex = G_GetEntityIndex(i->ent);
      if ( G_IsEntityInUse(EntityIndex) )
      {
        if ( v16->sentient )
        {
          if ( v16->client )
          {
            MpClient = SV_Client_GetMpClient(v16->s.number);
            IsClientConnected = Bot_IsClientConnected(MpClient);
          }
          else
          {
            if ( !v16->agent )
              goto LABEL_31;
            IsClientConnected = v16->s.eType == ET_AGENT;
          }
          if ( IsClientConnected )
          {
LABEL_31:
            if ( v16->s.eType != ET_INVISIBLE )
            {
              v20 = (bitarray_base<bitarray<224> > *)Com_TeamsMP_GetAllTeamFlags();
              if ( bitarray_base<bitarray<224>>::testBit(v20, v16->sentient->eTeam) )
              {
                if ( !v16->client || (v21 = SV_Client_GetMpClient(v16->s.number), Bot_IsClientActive(v21)) )
                {
                  if ( !AI_IsAlliedSentient(botInfo->sentient, i) )
                  {
                    Sentient_GetHeadPosition(i, &vEyePosOut);
                    v22 = PointToLineSegmentDistSq(&vEyePosOut, start, end);
                    if ( *(float *)&v22 <= (float)(capsuleRadius * capsuleRadius) )
                      m_pAI->GetPerfectInfo(m_pAI, i, knownType);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

/*
==============
Bot_AIKnownEnemiesRadial
==============
*/
void Bot_AIKnownEnemiesRadial(bot_info_t *botInfo, const vec3_t *position, float radius, unsigned __int8 knownType)
{
  gentity_s *ent; 
  AIBotInterface *m_pAI; 
  float v9; 
  bitarray<224> *AllTeamFlags; 
  sentient_s *i; 
  gentity_s *v12; 
  __int16 EntityIndex; 
  const SvClientMP *MpClient; 
  int IsClientConnected; 
  bitarray_base<bitarray<224> > *v16; 
  const SvClientMP *v17; 
  float v18; 
  float v19; 
  float v20; 
  const playerState_s *EntityPlayerStateConst; 
  __int64 v22; 
  __int64 v23; 
  AIBotWrapper v24; 
  bitarray<224> iTeamFlags; 

  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6021, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  if ( !botInfo->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6022, ASSERT_TYPE_ASSERT, "( botInfo->sentient )", (const char *)&queryFormat, "botInfo->sentient") )
    __debugbreak();
  if ( radius <= 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6023, ASSERT_TYPE_ASSERT, "( radius ) > ( 0 )", "radius > 0\n\t%g, %g", radius, 0.0) )
    __debugbreak();
  if ( knownType >= 0x1Bu )
  {
    LODWORD(v23) = 27;
    LODWORD(v22) = knownType;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6024, ASSERT_TYPE_ASSERT, "(unsigned)( knownType ) < (unsigned)( NUM_AI_KNOWN )", "knownType doesn't index NUM_AI_KNOWN\n\t%i not in [0, %i)", v22, v23) )
      __debugbreak();
  }
  AICommonInterface::AICommonInterface(&v24.m_botInterface);
  v24.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v24.m_botAgentInterface);
  ent = botInfo->ent;
  v24.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v24.m_pAI = NULL;
  AIBotWrapper::Setup(&v24, ent);
  m_pAI = v24.m_pAI;
  if ( !v24.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6026, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  v9 = radius * radius;
  if ( Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) )
    AllTeamFlags = (bitarray<224> *)Com_TeamsSP_GetAllTeamFlags();
  else
    AllTeamFlags = (bitarray<224> *)Com_TeamsMP_GetAllTeamFlags();
  iTeamFlags = *AllTeamFlags;
  for ( i = Sentient_FirstSentient(&iTeamFlags); i; i = Sentient_NextSentient(i, &iTeamFlags) )
  {
    v12 = i->ent;
    if ( i->ent )
    {
      EntityIndex = G_GetEntityIndex(i->ent);
      if ( G_IsEntityInUse(EntityIndex) )
      {
        if ( v12->sentient )
        {
          if ( v12->client )
          {
            MpClient = SV_Client_GetMpClient(v12->s.number);
            IsClientConnected = Bot_IsClientConnected(MpClient);
          }
          else
          {
            if ( !v12->agent )
              goto LABEL_28;
            IsClientConnected = v12->s.eType == ET_AGENT;
          }
          if ( IsClientConnected )
          {
LABEL_28:
            if ( v12->s.eType != ET_INVISIBLE )
            {
              v16 = (bitarray_base<bitarray<224> > *)Com_TeamsMP_GetAllTeamFlags();
              if ( bitarray_base<bitarray<224>>::testBit(v16, v12->sentient->eTeam) )
              {
                if ( !v12->client || (v17 = SV_Client_GetMpClient(v12->s.number), Bot_IsClientActive(v17)) )
                {
                  if ( !AI_IsAlliedSentient(botInfo->sentient, i) )
                  {
                    v18 = position->v[0] - i->ent->r.currentOrigin.v[0];
                    v19 = position->v[1] - i->ent->r.currentOrigin.v[1];
                    v20 = position->v[2] - i->ent->r.currentOrigin.v[2];
                    if ( (float)((float)((float)(v19 * v19) + (float)(v18 * v18)) + (float)(v20 * v20)) <= v9 && (knownType != 26 || (EntityPlayerStateConst = G_GetEntityPlayerStateConst(i->ent)) == NULL || !BG_HasPerk(&EntityPlayerStateConst->perks, 0x1Bu)) )
                      m_pAI->GetPerfectInfo(m_pAI, i, knownType);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

/*
==============
Bot_ActiveGoalIsScriptGoal
==============
*/
int Bot_ActiveGoalIsScriptGoal(const bot_data_t *botData)
{
  vec3_t outFinalGoal; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24131, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( botData == (const bot_data_t *)-8i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13725, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  if ( !Bot_NavPathExists(&botData->botInfo) )
    return 0;
  Bot_GetPathFinalGoal(&botData->botInfo, &outFinalGoal);
  return Bot_LocationIsScriptGoal(botData, &outFinalGoal);
}

/*
==============
Bot_ActualMeleeRange
==============
*/
float Bot_ActualMeleeRange(const bot_data_t *botData)
{
  playerState_s *playerState; 
  GWeaponMap *Instance; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10281, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10285, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  Instance = GWeaponMap::GetInstance();
  BG_GetMeleeRange(Instance, playerState, 1);
  _XMM1 = LODWORD(botData->botMatchData.meleeDist);
  __asm { vminss  xmm0, xmm1, xmm0 }
  return *(float *)&_XMM0;
}

/*
==============
Bot_AdjustEnemyAimPoint
==============
*/
void Bot_AdjustEnemyAimPoint(const bot_data_t *botData, const gentity_s *ent, vec3_t *aimPoint)
{
  __int128 v3; 
  int v7; 
  const gentity_s *v8; 
  playerState_s *playerState; 
  const Weapon *ViewmodelWeapon; 
  unsigned int v11; 
  BOOL v12; 
  sentient_s *sentient; 
  float v14; 
  float v15; 
  __int128 v16; 
  float v17; 
  float v22; 
  float v23; 
  float v24; 
  double v32; 
  float targetHeadBias; 
  float v34; 
  int BoneIndex; 
  vec3_t vEyePosOut; 
  __int128 v37; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11972, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11973, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  v7 = 0;
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
    v8 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
  else
    v8 = NULL;
  if ( ent != v8 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11974, ASSERT_TYPE_ASSERT, "( ent == Bot_GetEnemy( botData ) )", (const char *)&queryFormat, "ent == Bot_GetEnemy( botData )") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(playerState);
  if ( G_GetEntityPlayerStateConst(ent) )
  {
    v11 = ((unsigned int)botData->botInfo.scriptFlags >> 20) & 1;
    if ( Bot_EntityUsingRiotShield(ent, 0) && !Bot_EntityUsingRiotShield(botData->botInfo.ent, 0) )
      v7 = 1;
    v12 = Bot_Weap_IsWeapClass(playerState, ViewmodelWeapon, WEAPCLASS_ROCKETLAUNCHER) && Bot_ActualMeleeRange(botData) <= botData->botInfo.enemyTrack.lastDist;
    if ( v11 || !v7 && !v12 )
    {
      sentient = ent->sentient;
      v37 = v3;
      Sentient_GetHeadPosition(sentient, &vEyePosOut);
      v14 = vEyePosOut.v[0] - ent->r.currentOrigin.v[0];
      v16 = LODWORD(vEyePosOut.v[1]);
      v15 = vEyePosOut.v[1] - ent->r.currentOrigin.v[1];
      v17 = vEyePosOut.v[2] - ent->r.currentOrigin.v[2];
      _XMM7 = LODWORD(FLOAT_1_0);
      *(float *)&v16 = fsqrt((float)((float)(v15 * v15) + (float)(v14 * v14)) + (float)(v17 * v17));
      _XMM9 = v16;
      __asm
      {
        vcmpless xmm0, xmm9, cs:__real@80000000
        vblendvps xmm0, xmm9, xmm7, xmm0
      }
      v22 = v14 * (float)(1.0 / *(float *)&_XMM0);
      v23 = v15 * (float)(1.0 / *(float *)&_XMM0);
      v24 = v17 * (float)(1.0 / *(float *)&_XMM0);
      if ( Bot_IsInRangeOfEnemy(botData) )
      {
        _XMM6 = LODWORD(FLOAT_0_33333001);
        if ( GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&playerState->pm_flags, ACTIVE, 1u) || GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&playerState->pm_flags, ACTIVE, 0) )
        {
          _XMM0 = LODWORD(botData->botInfo.enemyTrack.lastDist);
          __asm
          {
            vcmpltss xmm2, xmm0, cs:__real@42c00000
            vblendvps xmm6, xmm6, xmm1, xmm2
          }
        }
      }
      _XMM0 = v11;
      __asm
      {
        vpcmpeqd xmm2, xmm0, xmm1
        vblendvps xmm0, xmm7, xmm6, xmm2; val
      }
      v32 = I_fclamp(*(float *)&_XMM0, 0.0, 1.0);
      targetHeadBias = botData->botInfo.targetHeadBias;
      if ( (targetHeadBias < 0.0 || targetHeadBias > 1.0) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12083, ASSERT_TYPE_ASSERT, "( botInfo->targetHeadBias >= 0.0f && botInfo->targetHeadBias <= 1.0f )", (const char *)&queryFormat, "botInfo->targetHeadBias >= 0.0f && botInfo->targetHeadBias <= 1.0f") )
        __debugbreak();
      v34 = *(float *)&v32 + (float)((float)(1.0 - *(float *)&v32) * (float)(1.0 - botData->botInfo.targetHeadBias));
      if ( (v34 < 0.0 || v34 > 1.0) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12085, ASSERT_TYPE_ASSERT, "( percentAimTowardHead >= 0.0f && percentAimTowardHead <= 1.0f )", (const char *)&queryFormat, "percentAimTowardHead >= 0.0f && percentAimTowardHead <= 1.0f") )
        __debugbreak();
      aimPoint->v[0] = (float)(v22 * (float)(*(float *)&_XMM9 * v34)) + aimPoint->v[0];
      aimPoint->v[1] = (float)(v23 * (float)(*(float *)&_XMM9 * v34)) + aimPoint->v[1];
      aimPoint->v[2] = (float)(v24 * (float)(*(float *)&_XMM9 * v34)) + aimPoint->v[2];
    }
  }
  else
  {
    BoneIndex = SV_Game_DObjGetBoneIndex(ent, scr_const.tag_ai_aim_target);
    if ( BoneIndex < 0 )
      Sentient_GetHeadPosition(ent->sentient, aimPoint);
    else
      G_Utils_DObjGetWorldBoneIndexPos(ent, BoneIndex, aimPoint);
    if ( Bot_EnemyPreferMelee(botData) )
      aimPoint->v[2] = botData->botInfo.enemyTrack.predictOrigin.v[2] + playerState->viewHeightCurrent;
  }
}

/*
==============
Bot_AllowedToMeleeEnemy
==============
*/
_BOOL8 Bot_AllowedToMeleeEnemy(const bot_data_t *botData)
{
  const gentity_s *v2; 
  _BOOL8 result; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8172, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8173, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  result = 0;
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
  {
    v2 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
    if ( v2 )
    {
      if ( !Bot_IsHardwareEnt(v2) && !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 0x26u) && !Bot_IsUsingTurret(botData) )
        return 1;
    }
  }
  return result;
}

/*
==============
Bot_AnimscriptToLinkMask
==============
*/
__int64 Bot_AnimscriptToLinkMask(const char *animscript)
{
  const char *v1; 
  __int64 v3; 
  const char *v4; 
  char v5; 
  __int64 v6; 
  char v7; 
  int v9; 
  int v10; 
  int v11; 
  int v12; 

  v1 = g_AILinkUsageNames_0[11];
  v3 = 0x7FFFFFFFi64;
  if ( !animscript && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 181, ASSERT_TYPE_SANITY, "( s0 )", (const char *)&queryFormat, "s0") )
    __debugbreak();
  if ( !v1 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 182, ASSERT_TYPE_SANITY, "( s1 )", (const char *)&queryFormat, "s1") )
    __debugbreak();
  v4 = (const char *)(animscript - v1);
  while ( 1 )
  {
    v5 = v1[(_QWORD)v4];
    v6 = v3;
    v7 = *v1++;
    --v3;
    if ( !v6 )
      return 2048i64;
    if ( v5 != v7 )
      break;
    if ( !v5 )
      return 2048i64;
  }
  v9 = Bot_AnimscriptToNegotiationType(animscript) - 1;
  if ( !v9 )
    return 512i64;
  v10 = v9 - 1;
  if ( !v10 )
    return 1024i64;
  v11 = v10 - 2;
  if ( !v11 )
    return 1024i64;
  v12 = v11 - 4;
  if ( !v12 )
    return 1024i64;
  if ( v12 == 8 )
    return 256i64;
  return 0i64;
}

/*
==============
Bot_AnimscriptToNegotiationType
==============
*/
__int64 Bot_AnimscriptToNegotiationType(const char *animscript)
{
  const char *v2; 
  const char *v3; 
  unsigned int v4; 
  unsigned int v5; 
  const char **v6; 
  unsigned int v7; 
  const char **v8; 
  int v9; 
  const char **v10; 
  int v11; 
  const char **v12; 
  char v13; 
  const char *v14; 

  v2 = NULL;
  v3 = animscript;
  v4 = 0;
  if ( !animscript )
    return 16i64;
  v5 = 0;
  v6 = LADDER_TYPES;
  do
  {
    if ( v5 >= 2 )
      break;
    if ( strstr_0(v3, *v6) )
      v4 = 1;
    ++v5;
    ++v6;
  }
  while ( !v4 );
  v7 = 0;
  if ( !v4 )
  {
    v8 = JUMP_TYPES;
    do
    {
      if ( v7 >= 3 )
        break;
      if ( strstr_0(v3, *v8) )
        v4 = 2;
      ++v7;
      ++v8;
    }
    while ( !v4 );
  }
  v9 = 0;
  if ( !v4 )
  {
    v10 = JUMP_ACROSS_TYPES;
    do
    {
      if ( v9 )
        break;
      if ( strstr_0(v3, *v10) )
        v4 = 4;
      v9 = 1;
      ++v10;
    }
    while ( !v4 );
  }
  v11 = 0;
  if ( !v4 )
  {
    v12 = JUMP_STANDING_TYPES;
    do
    {
      if ( v11 )
        break;
      if ( strstr_0(v3, *v12) )
        v4 = 8;
      v11 = 1;
      ++v12;
    }
    while ( !v4 );
  }
  if ( (v4 & 2) != 0 )
  {
    v13 = *v3;
    if ( *v3 )
    {
      do
      {
        v14 = ++v3;
        if ( v13 != 95 )
          v14 = v2;
        v13 = *v3;
        v2 = v14;
      }
      while ( *v3 );
      if ( v14 )
      {
        *(double *)&_XMM0 = atof(v14);
        __asm { vcvtsd2ss xmm1, xmm0, xmm0 }
        if ( *(float *)&_XMM1 <= 18.0 )
          return 16i64;
      }
    }
  }
  if ( !v4 )
    return 16;
  return v4;
}

/*
==============
Bot_ApplyKickAngles
==============
*/
void Bot_ApplyKickAngles(bot_data_t *botData, usercmd_s *cmd)
{
  playerState_s *playerState; 
  int frameDuration; 
  GWeaponMap *Instance; 
  char *v7; 
  char *v8; 
  char *v9; 
  base_vec3_t<int> *p_angles; 
  unsigned int v11; 
  __int64 v12; 
  bool v13; 
  double v15; 
  int v18; 
  vec3_t *inOutRawKickAngles; 
  vec3_t *outKickAngles; 
  bool inOutKickNeedsToCrossCenter; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11529, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11530, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11533, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  inOutKickNeedsToCrossCenter = 0;
  if ( !level.frameDuration && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_level_locals.h", 349, ASSERT_TYPE_ASSERT, "(level.frameDuration)", "%s\n\tAccessing frame duration before it's been set", "level.frameDuration") )
    __debugbreak();
  frameDuration = level.frameDuration;
  Instance = GWeaponMap::GetInstance();
  v7 = (char *)&botData->scriptedAgentInfo + 28068;
  v8 = (char *)&botData->scriptedAgentInfo + 28080;
  v9 = (char *)&botData->scriptedAgentInfo + 28056;
  BG_KickAngles(Instance, playerState, frameDuration, &botData->botInfo.kickTimeRemaining, &botData->botInfo.kickAVel, &botData->botInfo.rawKickAngles, &botData->botInfo.kickAngles, &inOutKickNeedsToCrossCenter);
  p_angles = &cmd->angles;
  v11 = 0;
  v12 = v7 - (char *)&cmd->angles;
  v13 = 1;
  _XMM8 = 0i64;
  do
  {
    if ( !v13 )
    {
      LODWORD(outKickAngles) = 3;
      LODWORD(inOutRawKickAngles) = v11;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\com_vec_types.h", 39, ASSERT_TYPE_SANITY, "(unsigned)( idx ) < (unsigned)( ( sizeof( *array_counter( v ) ) + 0 ) )", "idx doesn't index ARRAY_COUNT( v )\n\t%i not in [0, %i)", inOutRawKickAngles, outKickAngles) )
        __debugbreak();
    }
    v15 = MSG_UnpackSignedFloat(p_angles->v[0], 180.0, 0x14u);
    __asm { vroundss xmm7, xmm8, xmm0, 1 }
    if ( v11 >= 3 )
    {
      LODWORD(outKickAngles) = 3;
      LODWORD(inOutRawKickAngles) = v11;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_vec_types.h", 53, ASSERT_TYPE_SANITY, "(unsigned)( idx ) < (unsigned)( ( sizeof( *array_counter( v ) ) + 0 ) )", "idx doesn't index ARRAY_COUNT( v )\n\t%i not in [0, %i)", inOutRawKickAngles, outKickAngles) )
        __debugbreak();
    }
    __asm { vroundss xmm2, xmm8, xmm3, 1 }
    v18 = MSG_PackSignedFloat((float)((float)((float)(0.0027777778 * *(float *)((char *)p_angles->v + v12)) + (float)((float)((float)(*(float *)&v15 * 0.0027777778) - *(float *)&_XMM7) * 1.0)) - *(float *)&_XMM2) * 360.0, 180.0, 0x14u);
    if ( v11 >= 3 )
    {
      LODWORD(outKickAngles) = 3;
      LODWORD(inOutRawKickAngles) = v11;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\com_vec_types.h", 39, ASSERT_TYPE_SANITY, "(unsigned)( idx ) < (unsigned)( ( sizeof( *array_counter( v ) ) + 0 ) )", "idx doesn't index ARRAY_COUNT( v )\n\t%i not in [0, %i)", inOutRawKickAngles, outKickAngles) )
        __debugbreak();
    }
    p_angles->v[0] = v18;
    ++v11;
    p_angles = (base_vec3_t<int> *)((char *)p_angles + 4);
    v13 = v11 < 3;
  }
  while ( (int)v11 < 3 );
  *(_QWORD *)v7 = 0i64;
  *((_DWORD *)v7 + 2) = 0;
  *(_QWORD *)v8 = 0i64;
  *((_DWORD *)v8 + 2) = 0;
  *(_QWORD *)v9 = 0i64;
  *((_DWORD *)v9 + 2) = 0;
}

/*
==============
Bot_ApplyTwitchVectors
==============
*/
void Bot_ApplyTwitchVectors(bot_info_t *botInfo, vec3_t *position, vec3_t *angles)
{
  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7447, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  Bot_UpdateTwitchVectors(botInfo, position, angles);
  if ( position )
  {
    position->v[0] = botInfo->twitchOffsetPos.v[0] + position->v[0];
    position->v[1] = botInfo->twitchOffsetPos.v[1] + position->v[1];
  }
  if ( angles )
  {
    angles->v[0] = botInfo->twitchOffsetRot.v[0] + angles->v[0];
    angles->v[1] = botInfo->twitchOffsetRot.v[1] + angles->v[1];
  }
}

/*
==============
Bot_AtScriptGoal
==============
*/
_BOOL8 Bot_AtScriptGoal(const bot_data_t *botData)
{
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23953, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23954, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( botData->botInfo.scriptGoal.type == BOT_SCR_GOAL_NONE )
    return 0i64;
  if ( botData == (const bot_data_t *)-8i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13725, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  return Bot_NavPathExists(&botData->botInfo) && Bot_ActiveGoalIsScriptGoal(botData) && Bot_IsAtPathEnd(botData, botData->botInfo.scriptGoal.radius);
}

/*
==============
Bot_AtScriptGoalNode
==============
*/
_BOOL8 Bot_AtScriptGoalNode(const bot_data_t *botData)
{
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23979, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  return Bot_AtScriptGoal(botData) && botData->botInfo.scriptGoal.node;
}

/*
==============
Bot_AtScriptGoalYaw
==============
*/
_BOOL8 Bot_AtScriptGoalYaw(const bot_data_t *botData)
{
  float yaw; 
  gentity_s *ent; 
  vec3_t angles; 
  vec3_t v6; 
  tmat33_t<vec3_t> axis; 
  tmat33_t<vec3_t> v8; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23989, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23990, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( (LOBYTE(botData->scriptedAgentInfo.blackboard.m_ShootParams.m_Pos.v[0]) & 4) == 0 )
    return 1i64;
  yaw = botData->botInfo.scriptGoal.yaw;
  ent = botData->botInfo.ent;
  angles.v[0] = 0.0;
  angles.v[1] = yaw;
  angles.v[2] = 0.0;
  v6.v[1] = ent->r.currentAngles.v[1];
  v6.v[0] = 0.0;
  v6.v[2] = 0.0;
  AnglesToAxis(&angles, &axis);
  AnglesToAxis(&v6, &v8);
  return (float)((float)((float)(axis.m[0].v[0] * v8.m[0].v[0]) + (float)(axis.m[0].v[1] * v8.m[0].v[1])) + (float)(axis.m[0].v[2] * v8.m[0].v[2])) > 0.94999999;
}

/*
==============
Bot_AvoidGrenade
==============
*/
void Bot_AvoidGrenade(const gentity_s *self, gentity_s *originator, const vec3_t *vOrigin, float safeDist, int duration)
{
  gentity_s *v8; 
  gentity_s *GEntity; 
  __int16 otherEntityNum; 
  const sentient_s *v11; 
  sentient_s *sentient; 
  int v13; 
  BOOL v14; 
  sentient_s *v15; 
  const bitarray<224> *TeamFlag; 
  int usageFlags; 
  nav_space_s *DefaultSpace; 
  __int64 entNum; 
  bitarray<224> result; 

  if ( !self && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6330, ASSERT_TYPE_ASSERT, "( self )", (const char *)&queryFormat, "self") )
    __debugbreak();
  if ( !originator && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6331, ASSERT_TYPE_ASSERT, "( originator )", (const char *)&queryFormat, "originator") )
    __debugbreak();
  v8 = originator;
  if ( EntHandle::isDefined(&originator->r.ownerNum) )
  {
    GEntity = EntHandle::ent(&originator->r.ownerNum);
LABEL_17:
    v8 = GEntity;
    goto LABEL_18;
  }
  otherEntityNum = originator->s.otherEntityNum;
  if ( otherEntityNum != 2047 )
  {
    if ( (unsigned __int16)otherEntityNum >= 0x800u )
    {
      LODWORD(entNum) = otherEntityNum;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6345, ASSERT_TYPE_ASSERT, "(unsigned)( originator->s.otherEntityNum ) < (unsigned)( ( 2048 ) )", "originator->s.otherEntityNum doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", entNum, 2048) )
        __debugbreak();
    }
    if ( originator->s.otherEntityNum == 2047 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6346, ASSERT_TYPE_ASSERT, "( originator->s.otherEntityNum != ENTITYNUM_NONE )", (const char *)&queryFormat, "originator->s.otherEntityNum != ENTITYNUM_NONE") )
      __debugbreak();
    GEntity = G_GetGEntity(originator->s.otherEntityNum);
    goto LABEL_17;
  }
LABEL_18:
  if ( v8 && (v11 = v8->sentient) != NULL )
  {
    sentient = self->sentient;
    v13 = 0;
    if ( v11 == sentient && !originator->sentient && level.time - originator->birthTime > 1000 )
      v13 = 1;
    v14 = AI_IsAlliedSentient(sentient, v11) == 0;
  }
  else
  {
    v14 = 1;
    v13 = 1;
  }
  v15 = self->sentient;
  if ( v15 && (v13 || v14) )
  {
    TeamFlag = Com_Teams_GetTeamFlag(&result, v15->eTeam);
    usageFlags = Nav_TranslateTeamFlagsToRepulsorUsageFlags(TeamFlag);
    DefaultSpace = Nav_GetDefaultSpace();
    Nav_CreateRepulsor(DefaultSpace, vOrigin, &vec3_origin, duration, safeDist, 2047, usageFlags, (const scr_string_t)0, 1);
  }
}

/*
==============
Bot_BadPath
==============
*/
void Bot_BadPath(gentity_s *ent)
{
  bot_data_t *EntityData; 
  int time; 
  int debugPathGoalCurrent; 
  int NextDebugGoal; 
  vec3_t goal; 

  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7753, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  EntityData = Bot_GetEntityData(ent);
  if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7758, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  Bot_PathClear(&EntityData->botInfo);
  GScr_Notify(ent, scr_const.bad_path, 0);
  time = level.time;
  EntityData->botDebugData.flags |= 1u;
  EntityData->botInfo.lastBadPath = time;
  if ( Bot_GetCurrentNumDebugGoals() > 0 )
  {
    debugPathGoalCurrent = EntityData->botDebugData.debugPathGoalCurrent;
    if ( debugPathGoalCurrent )
    {
      Bot_DebugGoal(debugPathGoalCurrent, &goal);
      if ( (float)((float)((float)((float)(goal.v[1] - EntityData->botInfo.activeGoal.pos.v[1]) * (float)(goal.v[1] - EntityData->botInfo.activeGoal.pos.v[1])) + (float)((float)(goal.v[0] - EntityData->botInfo.activeGoal.pos.v[0]) * (float)(goal.v[0] - EntityData->botInfo.activeGoal.pos.v[0]))) + (float)((float)(goal.v[2] - EntityData->botInfo.activeGoal.pos.v[2]) * (float)(goal.v[2] - EntityData->botInfo.activeGoal.pos.v[2]))) < 5.0 )
      {
        NextDebugGoal = Bot_GetNextDebugGoal(EntityData);
        EntityData->botInfo.flags &= ~0x100000u;
        EntityData->botDebugData.debugPathGoalCurrent = NextDebugGoal;
      }
    }
  }
}

/*
==============
Bot_BadPlace_FindSafeNodeOutsideBadPlace
==============
*/
__int64 Bot_BadPlace_FindSafeNodeOutsideBadPlace(bot_info_t *botInfo, pathsort_s *potentialNodes, float maxFleeDist)
{
  pathsort_s *v3; 
  sentient_s *sentient; 
  int v6; 
  unsigned __int64 eTeam; 
  gentity_s *ent; 
  AIBotInterface *m_pAI; 
  int v10; 
  __int64 v11; 
  double v12; 
  pathsort_s *p_nodes; 
  __int128 v14; 
  pathnode_t *node; 
  gentity_s *v16; 
  unsigned __int16 v17; 
  int v18; 
  int v19; 
  double IndoorPercent; 
  char v21; 
  int v22; 
  pathsort_s v23; 
  int AdjacentIndoorZones; 
  pathsort_s *v26; 
  bitarray<224> v28; 
  AIBotWrapper v29; 
  __int128 v30; 
  double v31; 
  unsigned int v32; 
  vec3_t pos; 
  pathsort_s nodes; 
  unsigned __int8 indoorZonesMask[32]; 

  v3 = potentialNodes;
  if ( !Com_GameMode_SupportsFeature(WEAPON_RAISING_ALTSWITCH) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10823, ASSERT_TYPE_ASSERT, "(G_Bot_UseGlobalBadPlace())", "%s\n\tThis function uses global bad places, refactor if turned off", "G_Bot_UseGlobalBadPlace()") )
    __debugbreak();
  if ( !Com_GameMode_SupportsFeature(WEAPON_RAISING_ALTSWITCH) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10824, ASSERT_TYPE_ASSERT, "(G_Bot_UseBadPlaceRestrictions())", "%s\n\tThis function uses bad place restrictions, refactor if turned off", "G_Bot_UseBadPlaceRestrictions()") )
    __debugbreak();
  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10825, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  if ( !botInfo->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10826, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  if ( !botInfo->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10827, ASSERT_TYPE_ASSERT, "( botInfo->sentient )", (const char *)&queryFormat, "botInfo->sentient") )
    __debugbreak();
  if ( !v3 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10828, ASSERT_TYPE_ASSERT, "( potentialNodes )", (const char *)&queryFormat, "potentialNodes") )
    __debugbreak();
  if ( maxFleeDist <= 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10829, ASSERT_TYPE_ASSERT, "( maxFleeDist > 0.0f )", (const char *)&queryFormat, "maxFleeDist > 0.0f") )
    __debugbreak();
  sentient = botInfo->sentient;
  v6 = 0;
  v30 = 0ui64;
  v31 = 0.0;
  eTeam = (unsigned int)sentient->eTeam;
  v32 = 0;
  if ( (unsigned int)eTeam >= 0xE0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\bitarray.h", 263, ASSERT_TYPE_ASSERT, "( pos ) < ( impl()->getBitCount() )", "%s < %s\n\t%u, %u", "pos", "impl()->getBitCount()", eTeam, 224) )
    __debugbreak();
  *((_DWORD *)&v30 + (eTeam >> 5)) |= 0x80000000 >> (eTeam & 0x1F);
  AICommonInterface::AICommonInterface(&v29.m_botInterface);
  v29.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v29.m_botAgentInterface);
  ent = botInfo->ent;
  v29.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v29.m_pAI = NULL;
  AIBotWrapper::Setup(&v29, ent);
  m_pAI = v29.m_pAI;
  if ( !v29.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10837, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  AdjacentIndoorZones = 0;
  if ( AICommonInterface::IsInGlobalBadplace(m_pAI, 1u) )
    AdjacentIndoorZones = Bot_GetAdjacentIndoorZones(botInfo, 0.5, indoorZonesMask, 32);
  v10 = Path_NodesInCylinder(&botInfo->ent->r.currentOrigin, NULL, maxFleeDist, 80.0, &nodes, 256, -510656514);
  v11 = v10;
  if ( v10 > 0 )
  {
    v12 = v31;
    p_nodes = &nodes;
    v14 = v30;
    v26 = v3;
    do
    {
      node = p_nodes->node;
      v28.array[6] = v32;
      v16 = botInfo->ent;
      *(_OWORD *)v28.array = v14;
      *(double *)&v28.array[4] = v12;
      if ( !AICommonInterface::BadPlace_IsNodeInAnyBadPlace(m_pAI, node, v16->clipmask, &v28) && Path_NodeUnclaimedByOther(node, botInfo->sentient) )
      {
        v17 = Path_ConvertNodeToIndex(node);
        if ( !Path_IsNodeDisconnected(v17) && botInfo->pNavigator->IsNodeReachable(botInfo->pNavigator, node) )
        {
          if ( !AICommonInterface::IsInGlobalBadplace(m_pAI, 1u) )
            goto LABEL_43;
          v18 = Path_NodeZoneFromNode(node);
          v19 = v18;
          if ( v18 == 255 )
            goto LABEL_43;
          IndoorPercent = SV_BotZoneGetIndoorPercent(v18);
          if ( *(float *)&IndoorPercent >= 0.5 )
          {
            if ( AdjacentIndoorZones <= 0 )
              goto LABEL_43;
            v21 = v19 & 7;
            if ( v19 < 0 )
            {
              v19 += 7;
              v21 -= 8;
            }
            if ( (indoorZonesMask[v19 >> 3] & (unsigned __int8)(1 << v21)) == 0 )
            {
LABEL_43:
              pathnode_t::GetPos(node, &pos);
              ++v6;
              v26->metric = (float)((float)((float)(pos.v[1] - botInfo->ent->r.currentOrigin.v[1]) * (float)(pos.v[1] - botInfo->ent->r.currentOrigin.v[1])) + (float)((float)(pos.v[0] - botInfo->ent->r.currentOrigin.v[0]) * (float)(pos.v[0] - botInfo->ent->r.currentOrigin.v[0]))) + (float)((float)(pos.v[2] - botInfo->ent->r.currentOrigin.v[2]) * (float)(pos.v[2] - botInfo->ent->r.currentOrigin.v[2]));
              v26->node = node;
              ++v26;
            }
          }
        }
      }
      ++p_nodes;
      --v11;
    }
    while ( v11 );
    v3 = potentialNodes;
  }
  if ( AICommonInterface::IsInGlobalBadplace(m_pAI, 1u) && v6 > 0 && AdjacentIndoorZones > 0 )
  {
    v22 = G_rand();
    v23 = v3[v22 % v6];
    v3[v22 % v6] = *v3;
    *v3 = v23;
  }
  else if ( v6 > 1 )
  {
    std::_Sort_unchecked<pathsort_s *,bool (*)(pathsort_s const &,pathsort_s const &)>(v3, &v3[v6], v6, Path_CompareNodesIncreasing);
  }
  return (unsigned int)v6;
}

/*
==============
Bot_BadPlace_StartEscape
==============
*/
void Bot_BadPlace_StartEscape(bot_info_t *botInfo, pathnode_t *node)
{
  gentity_s *ent; 
  AIBotInterface *m_pAI; 
  AIBotWrapper v6; 

  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10794, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  if ( !botInfo->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10795, ASSERT_TYPE_ASSERT, "( botInfo->sentient )", (const char *)&queryFormat, "botInfo->sentient") )
    __debugbreak();
  if ( !node && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10796, ASSERT_TYPE_ASSERT, "( node )", (const char *)&queryFormat, "node") )
    __debugbreak();
  Bot_ForceClaimNode(botInfo, node);
  botInfo->flags |= 0x800u;
  AICommonInterface::AICommonInterface(&v6.m_botInterface);
  v6.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v6.m_botAgentInterface);
  ent = botInfo->ent;
  v6.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v6.m_pAI = NULL;
  AIBotWrapper::Setup(&v6, ent);
  m_pAI = v6.m_pAI;
  if ( !v6.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10802, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  AICommonInterface::BadPlace_StartEscape(m_pAI, node);
}

/*
==============
Bot_Badplace_PathEscape
==============
*/
__int64 Bot_Badplace_PathEscape(bot_data_t *botData)
{
  signed __int64 v1; 
  __int128 v2; 
  void *v3; 
  gentity_s *ent; 
  __int64 v6; 
  AIBotInterface *m_pAI; 
  double MaximumFleeRadius; 
  int SafeNodeOutsideBadPlace; 
  __int64 v10; 
  pathsort_s *i; 
  pathnode_t *node; 
  AIBotWrapper v14; 
  vec3_t pos; 
  pathsort_s potentialNodes; 
  __int128 v17; 

  v3 = alloca(v1);
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10971, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  AICommonInterface::AICommonInterface(&v14.m_botInterface);
  v14.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v14.m_botAgentInterface);
  ent = botData->botInfo.ent;
  v6 = 0i64;
  v14.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v14.m_pAI = NULL;
  AIBotWrapper::Setup(&v14, ent);
  m_pAI = v14.m_pAI;
  if ( !v14.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10981, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  MaximumFleeRadius = AI_BadPlace_GetMaximumFleeRadius();
  if ( *(float *)&MaximumFleeRadius < 0.0 )
  {
    MaximumFleeRadius = Nav_GetLargestRepulsorBadplaceRadius();
    if ( *(float *)&MaximumFleeRadius < 0.0 )
      return 0i64;
  }
  v17 = v2;
  AICommonInterface::IsInGlobalBadplace(m_pAI, 0);
  SafeNodeOutsideBadPlace = Bot_BadPlace_FindSafeNodeOutsideBadPlace(&botData->botInfo, &potentialNodes, *(float *)&MaximumFleeRadius + 256.0);
  v10 = SafeNodeOutsideBadPlace;
  if ( SafeNodeOutsideBadPlace <= 0 )
    return 0i64;
  for ( i = &potentialNodes; ; ++i )
  {
    node = i->node;
    if ( !i->node && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11029, ASSERT_TYPE_ASSERT, "( safeNode )", (const char *)&queryFormat, "safeNode") )
      __debugbreak();
    pathnode_t::GetPos(node, &pos);
    if ( Bot_GetPathToGoalInternal(botData, &pos, 0.0, "badplace away") )
      break;
    if ( ++v6 >= v10 )
      return 0i64;
  }
  Bot_BadPlace_StartEscape(&botData->botInfo, node);
  return 1i64;
}

/*
==============
Bot_Badplace_Update
==============
*/
__int64 Bot_Badplace_Update(bot_data_t *botData)
{
  gentity_s *ent; 
  int v4; 
  AIBotInterface *m_pAI; 
  int v6; 
  int v7; 
  bool v8; 
  BOOL v9; 
  int v10; 
  int v11; 
  AIBotWrapper v12; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11071, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !Com_GameMode_SupportsFeature(WEAPON_RAISING_ALTSWITCH) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11072, ASSERT_TYPE_ASSERT, "(G_Bot_UseGlobalBadPlace())", "%s\n\tThis function uses global bad places, refactor if turned off", "G_Bot_UseGlobalBadPlace()") )
    __debugbreak();
  if ( !Com_GameMode_SupportsFeature(WEAPON_RAISING_ALTSWITCH) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11073, ASSERT_TYPE_ASSERT, "(G_Bot_UseBadPlaceRestrictions())", "%s\n\tThis function uses bad place restrictions, refactor if turned off", "G_Bot_UseBadPlaceRestrictions()") )
    __debugbreak();
  if ( Bot_ShouldDelayPathGen(botData) )
    return 0i64;
  AICommonInterface::AICommonInterface(&v12.m_botInterface);
  v12.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v12.m_botAgentInterface);
  ent = botData->botInfo.ent;
  v4 = 0;
  v12.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v12.m_pAI = NULL;
  AIBotWrapper::Setup(&v12, ent);
  m_pAI = v12.m_pAI;
  if ( !v12.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11087, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  v6 = AICommonInterface::BadPlaceExists(m_pAI, 1, 1u);
  v7 = v6;
  if ( botData->botInfo.navigation.isInBadPlace || v6 )
  {
    v8 = AICommonInterface::IsInAnyBadPlace(m_pAI);
    v9 = v8;
    if ( v8 || v7 )
      v4 = 1;
    v10 = Bot_PathExists(&botData->botInfo);
    v11 = Bot_IsAtPathEnd(botData, 0.0);
    if ( v7 )
    {
      if ( v10 && ((botData->botInfo.flags & 0x800) != 0 || v11 && !v9) )
        return 1i64;
    }
    if ( v4 && Bot_Badplace_PathEscape(botData) )
      return 1i64;
  }
  AICommonInterface::MarkNotInBadPlace(m_pAI);
  return 0i64;
}

/*
==============
Bot_CalculateLauncherCombatChance
==============
*/
void Bot_CalculateLauncherCombatChance(bot_data_t *botData)
{
  int scriptFlags; 
  __int128 launcherCombatChance_low; 
  double v4; 
  __int128 v6; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4555, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  scriptFlags = botData->botInfo.scriptFlags;
  launcherCombatChance_low = LODWORD(botData->botMatchData.launcherCombatChance);
  botData->botInfo.flags &= ~0x800000u;
  v4 = G_random();
  v6 = launcherCombatChance_low;
  *(float *)&v6 = *(float *)&launcherCombatChance_low + 0.1;
  _XMM4 = v6;
  _XMM1 = scriptFlags & 0x80000;
  __asm
  {
    vpcmpeqd xmm3, xmm1, xmm2
    vblendvps xmm2, xmm4, xmm6, xmm3
  }
  if ( *(float *)&v4 < *(float *)&_XMM2 )
    botData->botInfo.flags |= 0x800000u;
}

/*
==============
Bot_CanAttack
==============
*/
_BOOL8 Bot_CanAttack(const bot_data_t *botData)
{
  const dvar_t *v2; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7521, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v2 = DVARBOOL_bot_DisableAttack;
  if ( !DVARBOOL_bot_DisableAttack && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 692, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DisableAttack") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v2);
  return !v2->current.enabled && (botData->botInfo.scriptFlags & 0x1000) == 0 && !GameModeFlagContainer<enum PWeaponFlagsCommon,enum PWeaponFlagsSP,enum PWeaponFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->weapCommon.weapFlags, ACTIVE, 0xAu);
}

/*
==============
Bot_CanMeleeReactEnemy
==============
*/
_BOOL8 Bot_CanMeleeReactEnemy(bot_data_t *botData)
{
  gentity_s *v2; 
  const gentity_s *v3; 
  sentient_info_t *SentientInfo; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16459, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16460, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
    __debugbreak();
  if ( SLOBYTE(botData->botMatchData.flags) >= 0 && !Bot_EnemyPreferMelee(botData) && Bot_Weap_HasWeaponWithNormalAmmo(botData) )
    return 0i64;
  if ( !EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
    return 0i64;
  v2 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
  v3 = v2;
  if ( !v2 )
    return 0i64;
  if ( !v2->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16476, ASSERT_TYPE_ASSERT, "( enemy->sentient )", (const char *)&queryFormat, "enemy->sentient") )
    __debugbreak();
  if ( !Bot_RecentSeeSentient(botData, v3->sentient, 1000) || !Bot_EntityOnScreenForMelee(botData, v3) )
    return 0i64;
  SentientInfo = Sentient_GetSentientInfo(botData->botInfo.sentient, v3->sentient);
  if ( !SentientInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16485, ASSERT_TYPE_ASSERT, "( pInfo )", (const char *)&queryFormat, "pInfo") )
    __debugbreak();
  return (float)(level.time - SentientInfo->VisCache.iFirstVisTime) >= botData->botMatchData.meleeReactionTime;
}

/*
==============
Bot_CanMoveTo
==============
*/
_BOOL8 Bot_CanMoveTo(const bot_info_t *botInfo, const vec3_t *from, const vec3_t *to)
{
  AINavigator *pNavigator; 
  AINavLayer Layer; 
  bfx::PathSpec pathSpec; 

  *(_QWORD *)&pathSpec.m_obstacleBlockageFlags = -1i64;
  *(_QWORD *)&pathSpec.m_areaPenaltyFlags = -1i64;
  pathSpec.m_obstacleMode = BLOCKED_IF_ANY_MATCH;
  pathSpec.m_pathSharingPenalty = 0.0;
  pathSpec.m_maxPathSharingPenalty = 0.0;
  pathSpec.m_maxSearchDist = 0.0;
  pathSpec.m_usePathSharingPenalty = 0;
  bfx::PenaltyTable::PenaltyTable(&pathSpec.m_penaltyTable);
  pNavigator = botInfo->pNavigator;
  pathSpec.m_snapMode = SNAP_CLOSEST;
  Layer = Nav_GetLayer(pNavigator);
  return !Nav_Trace(botInfo->pNavigator->m_pSpace, from, to, Layer, &pathSpec);
}

/*
==============
Bot_CanReactEnemy
==============
*/
_BOOL8 Bot_CanReactEnemy(const bot_data_t *botData)
{
  gentity_s *v2; 
  gentity_s *v3; 
  signed __int64 v4; 
  char *v5; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16404, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16405, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
    __debugbreak();
  if ( !EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
    return 0i64;
  v2 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
  v3 = v2;
  if ( !v2 )
    return 0i64;
  if ( !v2->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16412, ASSERT_TYPE_ASSERT, "( enemy->sentient )", (const char *)&queryFormat, "enemy->sentient") )
    __debugbreak();
  v4 = 60 * (v3->sentient - level.sentients);
  v5 = (char *)&botData->scriptedAgentInfo + v4 + 11644;
  if ( (const bot_data_t *)((char *)botData + v4) == (const bot_data_t *)-11652i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16414, ASSERT_TYPE_ASSERT, "( botSentientInfo )", (const char *)&queryFormat, "botSentientInfo") )
    __debugbreak();
  return (float)(level.time - *((_DWORD *)v5 + 8)) >= botData->botMatchData.reactionTime;
}

/*
==============
Bot_CanSeeAndCanFireOnEnemy
==============
*/
_BOOL8 Bot_CanSeeAndCanFireOnEnemy(const bot_data_t *botData)
{
  gentity_s *v2; 
  gentity_s *v3; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16379, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16380, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
    __debugbreak();
  if ( !EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
    return 0i64;
  v2 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
  v3 = v2;
  if ( !v2 )
    return 0i64;
  if ( !v2->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16387, ASSERT_TYPE_ASSERT, "( enemyEnt->sentient )", (const char *)&queryFormat, "enemyEnt->sentient") )
    __debugbreak();
  return Bot_RecentSeeSentient(botData, v3->sentient, 1000) != 0;
}

/*
==============
Bot_CanSeeEnemy
==============
*/
int Bot_CanSeeEnemy(const bot_data_t *botData)
{
  gentity_s *v2; 
  gentity_s *v3; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16358, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16359, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
    __debugbreak();
  if ( !EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
    return 0;
  v2 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
  v3 = v2;
  if ( !v2 )
    return 0;
  if ( !v2->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16366, ASSERT_TYPE_ASSERT, "( enemyEnt->sentient )", (const char *)&queryFormat, "enemyEnt->sentient") )
    __debugbreak();
  return Bot_RecentSeeSentient(botData, v3->sentient, 1000);
}

/*
==============
Bot_CanSeeEnemyThroughWall
==============
*/
int Bot_CanSeeEnemyThroughWall(bot_data_t *botData)
{
  const gentity_s *v2; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6462, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) && (v2 = EntHandle::ent(&botData->botInfo.sentient->targetEnt)) != NULL )
    return Bot_CanSeeEntityThroughWall(botData, v2);
  else
    return 0;
}

/*
==============
Bot_CanSeeEntityOutline
==============
*/
_BOOL8 Bot_CanSeeEntityOutline(const bot_data_t *botData, const gentity_s *ent)
{
  const playerState_s *EntityPlayerStateConst; 
  signed __int64 v5; 
  unsigned int EntHudOutlineIndex; 
  const HudOutlineDef *HudOutlineDefFromPlayerState; 
  __int64 v9; 
  __int64 v10; 

  EntityPlayerStateConst = G_GetEntityPlayerStateConst(ent);
  if ( EntityPlayerStateConst && BG_HasPerk(&EntityPlayerStateConst->perks, 0x31u) )
    return 0i64;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6392, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6393, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState )", (const char *)&queryFormat, "botData->botInfo.playerState") )
    __debugbreak();
  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6394, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 196, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
    __debugbreak();
  v5 = ent - g_entities;
  if ( (unsigned int)v5 >= 0x800 )
  {
    LODWORD(v9) = ent - g_entities;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 199, ASSERT_TYPE_ASSERT, "(unsigned)( index ) < (unsigned)( ( 2048 ) )", "index doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v9, 2048) )
      __debugbreak();
  }
  v5 = (__int16)v5;
  if ( (unsigned int)(__int16)v5 >= 0x800 )
  {
    LODWORD(v10) = 2048;
    LODWORD(v9) = v5;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 207, ASSERT_TYPE_ASSERT, "(unsigned)( entityIndex ) < (unsigned)( ( 2048 ) )", "entityIndex doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v9, v10) )
      __debugbreak();
  }
  if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 208, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
    __debugbreak();
  if ( g_entities[v5].r.isInUse != g_entityIsInUse[v5] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 209, ASSERT_TYPE_ASSERT, "( g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex] )", (const char *)&queryFormat, "g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex]") )
    __debugbreak();
  if ( !g_entityIsInUse[v5] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6395, ASSERT_TYPE_ASSERT, "( G_IsEntityInUse( G_GetEntityIndex( ent ) ) )", (const char *)&queryFormat, "G_IsEntityInUse( G_GetEntityIndex( ent ) )") )
    __debugbreak();
  EntHudOutlineIndex = G_HudOutline_GetEntHudOutlineIndex(ent);
  HudOutlineDefFromPlayerState = BG_GetHudOutlineDefFromPlayerState(botData->botInfo.playerState, EntHudOutlineIndex);
  return G_HudOutline_IsEntHudOutlineEnabled(ent) && HudOutlineDefFromPlayerState && HudOutlineDefFromPlayerState->drawNonOccludedPixels && HudOutlineDefFromPlayerState->outlineColor;
}

/*
==============
Bot_CanSeeEntityThroughWall
==============
*/
_BOOL8 Bot_CanSeeEntityThroughWall(bot_data_t *botData, const gentity_s *entity)
{
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6442, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !entity && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6443, ASSERT_TYPE_ASSERT, "( entity )", (const char *)&queryFormat, "entity") )
    __debugbreak();
  return entity->sentient && Bot_EntityVisibleThroughWalls(botData, entity) && SV_BotEntInCurrentFOV(&botData->botInfo, entity);
}

/*
==============
Bot_CanSeeHardware
==============
*/
__int64 Bot_CanSeeHardware(ai_common_t *self, const gentity_s *ent)
{
  entityType_s eType; 
  bot_data_t *EntityData; 
  signed __int64 v6; 
  __int64 v7; 
  unsigned int v8; 
  int v9; 
  double v10; 

  if ( !self && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17890, ASSERT_TYPE_ASSERT, "( self )", (const char *)&queryFormat, "self") )
    __debugbreak();
  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17891, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( !ent->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17892, ASSERT_TYPE_ASSERT, "( ent->sentient )", (const char *)&queryFormat, "ent->sentient") )
    __debugbreak();
  eType = ent->s.eType;
  if ( eType != ET_MISSILE && (eType != ET_SCRIPTMOVER || Sentient_IsAerial(ent->sentient)) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17893, ASSERT_TYPE_ASSERT, "( Bot_IsHardwareEnt( ent ) )", (const char *)&queryFormat, "Bot_IsHardwareEnt( ent )") )
    __debugbreak();
  EntityData = Bot_GetEntityData(self->ent);
  if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17900, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v6 = 60 * (ent->sentient - level.sentients);
  v7 = (__int64)&EntityData->scriptedAgentInfo + v6 + 11644;
  if ( (bot_data_t *)((char *)EntityData + v6) == (bot_data_t *)-11652i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17904, ASSERT_TYPE_ASSERT, "( botSentientInfo )", (const char *)&queryFormat, "botSentientInfo") )
    __debugbreak();
  if ( ent->r.box.halfSize.v[0] > 12.0 || ent->r.box.halfSize.v[1] > 12.0 || ent->r.box.halfSize.v[2] > 12.0 )
    return 1i64;
  v8 = *(_DWORD *)(v7 + 48);
  if ( (v8 & 1) == 0 )
  {
    v9 = *(_DWORD *)(v7 + 44);
    if ( !v9 || level.time - v9 > 1000 )
    {
      *(_DWORD *)(v7 + 44) = level.time;
      v10 = G_random();
      v8 = *(_DWORD *)(v7 + 48) & 0xFFFFFFFE | (*(float *)&v10 < EntityData->botMatchData.seeHardwareChance);
      *(_DWORD *)(v7 + 48) = v8;
    }
  }
  return v8 & 1;
}

/*
==============
Bot_CanSeeNode
==============
*/
bool Bot_CanSeeNode(const bot_data_t *botData, const pathnode_t *node)
{
  const pathnode_t *v4; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6618, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6619, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
    __debugbreak();
  if ( !node && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6620, ASSERT_TYPE_ASSERT, "( node )", (const char *)&queryFormat, "node") )
    __debugbreak();
  v4 = Sentient_NearestNode(botData->botInfo.sentient);
  return v4 && Path_NodesVisibleNoPeek(v4, node);
}

/*
==============
Bot_CanSeePointViaNodes
==============
*/
_BOOL8 Bot_CanSeePointViaNodes(const bot_data_t *botData, const vec3_t *point)
{
  const pathnode_t *v4; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16524, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16525, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  v4 = Path_NearestNode(point, botData->botInfo.ent->clipmask, NULL);
  return v4 && Bot_CanSeeNode(botData, v4);
}

/*
==============
Bot_CanSeeSentient
==============
*/
int Bot_CanSeeSentient(const bot_data_t *botData, const sentient_s *otherSent)
{
  return Bot_RecentSeeSentient(botData, otherSent, 1000);
}

/*
==============
Bot_CanSeeSentientQuick
==============
*/
_BOOL8 Bot_CanSeeSentientQuick(const bot_data_t *botData, sentient_s *otherSent)
{
  const pathnode_t *v4; 
  const tacpoint_t *v6; 
  const tacpoint_t *v7; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16501, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !otherSent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16502, ASSERT_TYPE_ASSERT, "( otherSent )", (const char *)&queryFormat, "otherSent") )
    __debugbreak();
  if ( SV_BotRequirePathnodes(botData) )
  {
    v4 = Sentient_NearestNode(otherSent);
    if ( !v4 )
      return 0i64;
    return Bot_CanSeeNode(botData, v4);
  }
  else
  {
    v6 = Sentient_NearestTacPoint(otherSent);
    if ( !v6 )
      return 0i64;
    if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6633, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
      __debugbreak();
    if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6634, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
      __debugbreak();
    v7 = Sentient_NearestTacPoint(botData->botInfo.sentient);
    if ( !v7 )
      return 0i64;
    return TacVisGraph_HasVis(v7, v6);
  }
}

/*
==============
Bot_CanSetScriptGoalType
==============
*/
_BOOL8 Bot_CanSetScriptGoalType(bot_data_t *botData, bot_scr_goal_t newGoalType)
{
  if ( !botData )
  {
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22983, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
      __debugbreak();
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20741, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
      __debugbreak();
  }
  return newGoalType >= botData->botInfo.scriptGoal.type;
}

/*
==============
Bot_CanSlide
==============
*/
_BOOL8 Bot_CanSlide(const bot_data_t *botData)
{
  playerState_s *playerState; 
  double v3; 
  _BOOL8 result; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6874, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6878, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  result = 1;
  if ( !Bot_IsSliding(botData) )
  {
    v3 = G_random();
    if ( *(float *)&v3 >= botData->botMatchData.slideChance || !Slide_CanSlideFromGroundConditionsMet(playerState, level.time) || !Slide_CanSlideNowConditionsMet(playerState) )
      return 0;
  }
  return result;
}

/*
==============
Bot_CanUseAnyTraversals
==============
*/
bool Bot_CanUseAnyTraversals(const bot_info_t *botInfo)
{
  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4363, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  if ( !botInfo->playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4364, ASSERT_TYPE_ASSERT, "( botInfo->playerState )", (const char *)&queryFormat, "botInfo->playerState") )
    __debugbreak();
  return (botInfo->scriptFlags & 0x8000) == 0;
}

/*
==============
Bot_CheckCloseFOV
==============
*/
float Bot_CheckCloseFOV(const gentity_s *botEnt, const gentity_s *otherEnt)
{
  float v4; 
  float v5; 
  float v6; 
  float v7; 

  if ( !botEnt && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17932, ASSERT_TYPE_ASSERT, "( botEnt )", (const char *)&queryFormat, "botEnt") )
    __debugbreak();
  if ( !otherEnt )
    return FLOAT_N1_0;
  v4 = otherEnt->r.currentOrigin.v[0] - botEnt->r.currentOrigin.v[0];
  v5 = otherEnt->r.currentOrigin.v[1] - botEnt->r.currentOrigin.v[1];
  v6 = otherEnt->r.currentOrigin.v[2] - botEnt->r.currentOrigin.v[2];
  v7 = (float)((float)(v5 * v5) + (float)(v4 * v4)) + (float)(v6 * v6);
  if ( v7 < 10000.0 )
    return FLOAT_0_25;
  if ( v7 < 22500.0 )
    return FLOAT_0_5;
  else
    return FLOAT_N1_0;
}

/*
==============
Bot_CheckForLedgeFall
==============
*/
_BOOL8 Bot_CheckForLedgeFall(bot_data_t *botData, const usercmd_s *cmd)
{
  float forwardmove; 
  float v5; 
  float v6; 
  float rightmove; 
  float v8; 
  float v9; 
  double FrameDurationInSeconds; 
  gentity_s *ent; 
  int number; 
  int contentmask; 
  const Bounds *Bounds; 
  vec3_t forward; 
  vec3_t right; 
  vec3_t end; 
  vec3_t start; 
  trace_t results; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12971, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !cmd->forwardmove && !cmd->rightmove )
    return 0i64;
  AngleVectors(&botData->botInfo.playerState->viewangles, &forward, &right, NULL);
  forwardmove = (float)cmd->forwardmove;
  rightmove = (float)cmd->rightmove;
  forward.v[2] = forwardmove * forward.v[2];
  right.v[2] = rightmove * right.v[2];
  forward.v[0] = forwardmove * forward.v[0];
  v5 = forward.v[0];
  forward.v[1] = forwardmove * forward.v[1];
  v6 = forward.v[1];
  right.v[0] = rightmove * right.v[0];
  v8 = right.v[0];
  right.v[1] = rightmove * right.v[1];
  v9 = right.v[1];
  FrameDurationInSeconds = G_Level_GetFrameDurationInSeconds();
  ent = botData->botInfo.ent;
  start.v[0] = (float)((float)(v8 + v5) * (float)(*(float *)&FrameDurationInSeconds * 5.0)) + ent->r.currentOrigin.v[0];
  start.v[1] = (float)((float)(v9 + v6) * (float)(*(float *)&FrameDurationInSeconds * 5.0)) + ent->r.currentOrigin.v[1];
  start.v[2] = ent->r.currentOrigin.v[2];
  end.v[2] = start.v[2] - 54.0;
  end.v[0] = start.v[0];
  end.v[1] = start.v[1];
  results.fraction = FLOAT_1_0;
  number = ent->s.number;
  contentmask = ent->clipmask & 0xFDFFBFFF;
  Bounds = BG_Suit_GetBounds(botData->botInfo.playerState->suitIndex, PM_EFF_STANCE_DEFAULT);
  G_Main_TraceCapsule(&results, &start, &end, Bounds, number, contentmask);
  return results.fraction >= 1.0;
}

/*
==============
Bot_CheckPathRecalculate
==============
*/
__int64 Bot_CheckPathRecalculate(bot_data_t *botData)
{
  return 0i64;
}

/*
==============
Bot_CleanupBotInfo
==============
*/
void Bot_CleanupBotInfo(bot_data_t *botData)
{
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4574, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->bIsScriptedAgent && Bot_HasNavigator(&botData->botInfo) )
  {
    Bot_PathClear(&botData->botInfo);
    Bot_FreeNavigator(&botData->botInfo);
  }
  AICommonInterface::RemoveEntRefs(&botData->botInfo);
}

/*
==============
Bot_ClearButton
==============
*/
void Bot_ClearButton(bot_data_t *botData, bot_scr_buttons_t button)
{
  int v4; 
  int time; 
  int v6; 
  int v7; 
  int v8; 
  int v9; 
  int v10; 
  int v11; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23528, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( button )
  {
    switch ( button )
    {
      case BOT_SCR_BUTTON_ATTACK:
        time = level.time;
        botData->botInfo.scriptPress &= ~2u;
        botData->botInfo.scriptAttackButtonEndTime = time;
        break;
      case BOT_SCR_BUTTON_THROW:
        botData->botInfo.scriptPress &= ~4u;
        break;
      case BOT_SCR_BUTTON_JUMP:
        botData->botInfo.scriptPress &= ~8u;
        break;
      case BOT_SCR_BUTTON_MELEE:
        botData->botInfo.scriptPress &= ~0x10u;
        break;
      case BOT_SCR_BUTTON_SPRINT:
        botData->botInfo.scriptPress &= ~0x20u;
        break;
      case BOT_SCR_BUTTON_ADS:
        v6 = level.time;
        botData->botInfo.scriptPress &= ~0x40u;
        botData->botInfo.scriptADSButtonEndTime = v6;
        break;
      case BOT_SCR_BUTTON_LETHAL:
        v7 = level.time;
        botData->botInfo.scriptPress &= ~0x80u;
        botData->botInfo.scriptLethalButtonEndTime = v7;
        break;
      case BOT_SCR_BUTTON_TACTICAL:
        v8 = level.time;
        botData->botInfo.scriptPress &= ~0x100u;
        botData->botInfo.scriptTacticalButtonEndTime = v8;
        break;
      case BOT_SCR_BUTTON_SPECIAL:
        v9 = level.time;
        botData->botInfo.scriptPress &= ~0x200u;
        botData->botInfo.scriptSpecialButtonEndTime = v9;
        break;
      case BOT_SCR_BUTTON_LEAN_LEFT:
        v10 = level.time;
        botData->botInfo.scriptPress &= ~0x400u;
        botData->botInfo.scriptLeanButtonEndTime = v10;
        break;
      case BOT_SCR_BUTTON_LEAN_RIGHT:
        v11 = level.time;
        botData->botInfo.scriptPress &= ~0x800u;
        botData->botInfo.scriptLeanButtonEndTime = v11;
        break;
      default:
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23590, ASSERT_TYPE_ASSERT, (const char *)&queryFormat.fmt + 3, "Unreachable") )
          __debugbreak();
        break;
    }
  }
  else
  {
    v4 = level.time;
    botData->botInfo.scriptPress &= ~1u;
    botData->botInfo.scriptUseButtonEndTime = v4;
  }
}

/*
==============
Bot_ClearEnemy
==============
*/
void Bot_ClearEnemy(bot_data_t *botData)
{
  gentity_s *v2; 
  gentity_s *v3; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24327, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24328, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !botData->botInfo.ent->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24329, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent->sentient )", (const char *)&queryFormat, "botData->botInfo.ent->sentient") )
    __debugbreak();
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
  {
    v2 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
    v3 = v2;
    if ( v2 )
    {
      if ( !v2->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24339, ASSERT_TYPE_ASSERT, "( enemy->sentient )", (const char *)&queryFormat, "enemy->sentient") )
        __debugbreak();
      SentientInfo_Clear(botData->botInfo.ent->sentient, v3->sentient);
    }
  }
  Sentient_SetEnemy(botData->botInfo.ent->sentient, NULL, 1, 1);
}

/*
==============
Bot_ClearScriptEnemy
==============
*/
void Bot_ClearScriptEnemy(bot_data_t *botData)
{
  sentient_s *sentient; 
  gentity_s *v3; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23392, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23393, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !botData->botInfo.ent->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23394, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent->sentient )", (const char *)&queryFormat, "botData->botInfo.ent->sentient") )
    __debugbreak();
  sentient = botData->botInfo.ent->sentient;
  if ( EntHandle::isDefined(&sentient->scriptTargetEnt) )
  {
    if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
      v3 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
    else
      v3 = NULL;
    if ( v3 == EntHandle::ent(&sentient->scriptTargetEnt) )
      Sentient_SetEnemy(botData->botInfo.ent->sentient, NULL, 1, 1);
  }
  EntHandle::setEnt(&sentient->scriptTargetEnt, NULL);
  sentient->scriptTargetHasTagEye = 0;
  sentient->entityTargetThreat = 0.0;
}

/*
==============
Bot_ClearScriptGoal
==============
*/
void Bot_ClearScriptGoal(bot_data_t *botData)
{
  pathnode_t *node; 
  sentient_s *sentient; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23330, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23331, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23332, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
    __debugbreak();
  if ( botData->botInfo.scriptGoal.type )
    GScr_Notify(botData->botInfo.ent, scr_const.script_goal_changed, 0);
  node = botData->botInfo.scriptGoal.node;
  if ( node )
  {
    sentient = botData->botInfo.sentient;
    if ( sentient->pClaimedNode == node )
      Path_RelinquishNodeNow(sentient);
  }
  if ( botData->botInfo.scriptGoal.type && Bot_ActiveGoalIsScriptGoal(botData) )
    botData->botInfo.flags |= 8u;
  *(_QWORD *)&botData->scriptedAgentInfo.blackboard.m_ShootParams.m_Pos.z = 0i64;
  *(_QWORD *)&botData->scriptedAgentInfo.blackboard.m_ShootParams.m_StartTime = 0i64;
  botData->botInfo.flags &= 0xFBEFFFFB;
  botData->botInfo.scriptGoal.type = BOT_SCR_GOAL_NONE;
  botData->botInfo.scriptGoal.node = NULL;
  *(_QWORD *)&botData->scriptedAgentInfo.scriptGoal.bMultiGoalPath = 0i64;
  botData->botInfo.scriptGoalNotified = 0;
}

/*
==============
Bot_ClearScriptedGrenade
==============
*/
void Bot_ClearScriptedGrenade(bot_info_t *botInfo)
{
  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19022, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  botInfo->grenadeFlags &= 0xFFFFFFED;
  *(_QWORD *)botInfo->scriptedGrenadeTarget.v = 0i64;
  *(_QWORD *)&botInfo->scriptedGrenadeTarget.z = 0i64;
  *(_QWORD *)&botInfo->scriptedGrenadeTime = 0i64;
  botInfo->scriptedGrenadeType = BOT_GRENADE_TYPE_NONE;
}

/*
==============
Bot_CloseToObjectiveGoal
==============
*/
_BOOL8 Bot_CloseToObjectiveGoal(const bot_data_t *botData)
{
  gentity_s *ent; 
  vec3_t goal; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8128, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( botData->botInfo.scriptGoal.type != BOT_SCR_GOAL_OBJECTIVE )
    return 0i64;
  _XMM3 = LODWORD(botData->botInfo.scriptGoal.objectiveRadius);
  __asm
  {
    vcmpless xmm2, xmm3, xmm0
    vblendvps xmm6, xmm3, xmm1, xmm2
  }
  Bot_GetScriptGoal(botData, &goal);
  ent = botData->botInfo.ent;
  return (float)((float)((float)((float)(ent->r.currentOrigin.v[1] - goal.v[1]) * (float)(ent->r.currentOrigin.v[1] - goal.v[1])) + (float)((float)(ent->r.currentOrigin.v[0] - goal.v[0]) * (float)(ent->r.currentOrigin.v[0] - goal.v[0]))) + (float)((float)(ent->r.currentOrigin.v[2] - goal.v[2]) * (float)(ent->r.currentOrigin.v[2] - goal.v[2]))) < (float)(*(float *)&_XMM6 * *(float *)&_XMM6);
}

/*
==============
Bot_CombatStateBlinded
==============
*/
int Bot_CombatStateBlinded(bot_data_t *botData, usercmd_s *cmd)
{
  int result; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18882, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  result = Bot_IsBlinded(botData);
  if ( result )
  {
    botData->botInfo.grenadeFlags &= ~1u;
    return 1;
  }
  return result;
}

/*
==============
Bot_CombatStateCornerCombat
==============
*/
__int64 Bot_CombatStateCornerCombat(bot_data_t *botData, usercmd_s *cmd)
{
  playerState_s *playerState; 
  const Weapon *ViewmodelWeapon; 
  EntHandle *p_targetEnt; 
  int v6; 
  gentity_s *v7; 
  int flags; 
  int CanSeeEnemy; 
  bool v10; 
  weapFireType_t WeaponFireType; 
  int v12; 
  int CanSeeSentientQuick; 
  playerState_s *v14; 
  float v15; 
  const Weapon *v16; 
  int v17; 
  int IsWeapType; 
  BOOL v19; 
  double v20; 
  int v21; 
  double v22; 
  BOOL v24; 
  vec3_t end; 
  vec3_t weapon; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8442, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( botData == (bot_data_t *)-29440i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8444, ASSERT_TYPE_ASSERT, "( pBotMatchData )", (const char *)&queryFormat, "pBotMatchData") )
    __debugbreak();
  if ( (botData->botMatchData.cornerJumpChance > 0.0 || botData->botMatchData.cornerFireChance > 0.0) && (botData->botInfo.scriptFlags & 0x10000) == 0 )
  {
    playerState = botData->botInfo.playerState;
    if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8454, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
      __debugbreak();
    ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(playerState);
    p_targetEnt = &botData->botInfo.sentient->targetEnt;
    *(_QWORD *)weapon.v = ViewmodelWeapon;
    v6 = 0;
    if ( EntHandle::isDefined(p_targetEnt) )
      v7 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
    else
      v7 = NULL;
    if ( !v7 )
      goto LABEL_56;
    flags = botData->botInfo.flags;
    CanSeeEnemy = Bot_CanSeeEnemy(botData);
    v10 = BG_UsingAlternate(playerState);
    WeaponFireType = BG_GetWeaponFireType(ViewmodelWeapon, v10);
    v12 = botData->botInfo.flags;
    v24 = WeaponFireType == WEAPON_FIRETYPE_FULLAUTO;
    if ( !v7->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8470, ASSERT_TYPE_ASSERT, "( enemy->sentient )", (const char *)&queryFormat, "enemy->sentient") )
      __debugbreak();
    if ( ((CanSeeSentientQuick = Bot_CanSeeSentientQuick(botData, v7->sentient), (v12 & 0x400) != 0) || (flags & 0x200) != 0) && !CanSeeEnemy && CanSeeSentientQuick )
    {
      v14 = botData->botInfo.playerState;
      v15 = botData->botInfo.enemyTrack.awarePoint.v[1];
      end.v[0] = botData->botInfo.enemyTrack.awarePoint.v[0];
      end.v[2] = botData->botInfo.enemyTrack.awarePoint.v[2] + 58.0;
      end.v[1] = v15;
      if ( !v14 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8403, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
        __debugbreak();
      v16 = Bot_Weap_GetViewmodelWeapon(v14);
      if ( Bot_IsMovementLocked(botData) )
      {
        v17 = 0;
      }
      else if ( Bot_ShouldCombatMove(botData) )
      {
        if ( Bot_Weap_IsWeapClass(v14, v16, WEAPCLASS_SMG) || Bot_Weap_IsWeapClass(v14, v16, WEAPCLASS_PISTOL) )
          v17 = botData->botInfo.currentStanceFlags & 1;
        else
          v17 = 0;
      }
      else
      {
        v17 = 0;
      }
      if ( level.time - botData->botInfo.lastCornerCombat > 1500 )
      {
        IsWeapType = Bot_Weap_IsWeapType(playerState, *(const Weapon **)weapon.v, WEAPTYPE_PROJECTILE);
        v19 = Bot_Weap_PenetrateType(playerState, *(const Weapon **)weapon.v) != PENETRATE_TYPE_NONE;
        if ( !v17 || (v20 = G_random(), v21 = 1, *(float *)&v20 >= botData->botMatchData.cornerJumpChance) )
          v21 = 0;
        if ( v24 )
        {
          if ( !IsWeapType )
          {
            if ( v19 )
            {
              v22 = G_random();
              if ( *(float *)&v22 < botData->botMatchData.cornerFireChance )
                v6 = 1;
            }
          }
        }
        botData->botInfo.flags &= ~0x400u;
        if ( v21 || v6 )
        {
          Sentient_GetEyePosition(botData->botInfo.ent->sentient, &weapon);
          if ( PhysicsQuery_LegacySightTrace(PHYSICS_WORLD_ID_FIRST, &weapon, &end, &bounds_origin, botData->botInfo.ent->s.number, 2047, 41965569) )
          {
            if ( v21 )
              botData->botInfo.scriptPress |= 8u;
            if ( v6 )
              botData->botInfo.flags |= 0x400u;
          }
        }
        botData->botInfo.lastCornerCombat = level.time;
      }
      if ( (botData->botInfo.flags & 0x400) != 0 && !Bot_CombatStateFireWait(botData, playerState, &end) && Bot_CombatStateFire(botData, playerState, cmd) )
        return 1i64;
    }
    else
    {
LABEL_56:
      botData->botInfo.flags &= ~0x400u;
    }
  }
  return 0i64;
}

/*
==============
Bot_CombatStateFire
==============
*/
__int64 Bot_CombatStateFire(bot_data_t *botData, const playerState_s *ps, usercmd_s *cmd)
{
  const Weapon *ViewmodelWeapon; 
  GWeaponMap *Instance; 
  bool v8; 
  weapFireType_t WeaponFireType; 
  int v10; 
  unsigned int v11; 
  int v12; 
  int v13; 
  bool v14; 
  weapFireType_t v15; 
  bot_burst_fire_type_t burstFireType; 
  __int32 v17; 
  int time; 
  __int64 result; 
  int maxBurstFireTime; 
  int minTimeBetweenBursts; 
  int maxTimeBetweenBursts; 
  int weaponDelayNextFireStartTime; 
  int weaponDelayNextFireStopTime; 
  int v25; 
  int v26; 
  int v27; 
  int v28; 
  float fWeaponPosFrac; 
  float adsDelayFireTimeScoped; 
  __int64 v31; 
  int v32; 
  int v33; 
  unsigned __int64 buttons; 
  int v35; 
  bool v36; 
  int v37; 
  int WeaponStateForViewWeapon; 
  int dualWield; 
  int v40; 
  int min; 
  int ShouldPressADSButton; 
  int HasOverlay; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19954, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !ps && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19955, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19956, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(ps);
  if ( Bot_Weap_IsNone(ViewmodelWeapon) )
    return 0i64;
  Instance = GWeaponMap::GetInstance();
  v8 = BG_UsingAlternate(ps);
  WeaponFireType = BG_GetWeaponFireType(ViewmodelWeapon, v8);
  Bot_Weap_GetWeaponHandForViewWeapon(ps);
  WeaponStateForViewWeapon = Bot_Weap_GetWeaponStateForViewWeapon(botData->botInfo.playerState);
  v10 = BG_PlayerDualWieldingWeapon(Instance, ps, ViewmodelWeapon);
  dualWield = v10;
  v11 = 1;
  if ( WeaponFireType == WEAPON_FIRETYPE_FULLAUTO || (v40 = 0, WeaponFireType == WEAPON_FIRETYPE_BEAM) )
    v40 = 1;
  if ( v10 || Bot_Weap_IsWeapClass(ps, ViewmodelWeapon, WEAPCLASS_GRENADE) )
    v11 = 0;
  HasOverlay = Bot_Weap_HasOverlay(ps, ViewmodelWeapon);
  v12 = HasOverlay;
  if ( Bot_ShouldADS(botData, ps) )
    botData->botInfo.lastADSPressTime = level.time;
  ShouldPressADSButton = Bot_ShouldPressADSButton(botData);
  v13 = ShouldPressADSButton;
  v14 = BG_UsingAlternate(ps);
  v15 = BG_GetWeaponFireType(ViewmodelWeapon, v14);
  burstFireType = botData->botMatchData.burstFireType;
  if ( burstFireType == BOT_BURST_FIRE_TYPE_NONE )
    goto LABEL_24;
  v17 = burstFireType - 1;
  if ( v17 )
  {
    if ( v17 != 1 )
    {
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19942, ASSERT_TYPE_ASSERT, (const char *)&queryFormat.fmt + 3, "Bot_ShouldBurstFire failed to match burstFireType.") )
        __debugbreak();
      goto LABEL_24;
    }
    if ( v15 || !Bot_Weap_IsHighRecoil(botData, ViewmodelWeapon) )
    {
LABEL_24:
      time = level.time;
      goto LABEL_25;
    }
  }
  maxBurstFireTime = (int)botData->botMatchData.maxBurstFireTime;
  min = (int)botData->botMatchData.minBurstFireTime;
  minTimeBetweenBursts = (int)botData->botMatchData.minTimeBetweenBursts;
  maxTimeBetweenBursts = (int)botData->botMatchData.maxTimeBetweenBursts;
  if ( (!maxBurstFireTime || !maxTimeBetweenBursts) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20031, ASSERT_TYPE_ASSERT, "(maxBurstFireTime && maxTimeBetweenBursts)", (const char *)&queryFormat, "maxBurstFireTime && maxTimeBetweenBursts") )
    __debugbreak();
  weaponDelayNextFireStartTime = botData->botInfo.weaponDelayNextFireStartTime;
  time = level.time;
  if ( level.time < weaponDelayNextFireStartTime )
    return 0i64;
  weaponDelayNextFireStopTime = botData->botInfo.weaponDelayNextFireStopTime;
  if ( level.time >= weaponDelayNextFireStopTime )
  {
    if ( level.time < maxTimeBetweenBursts + weaponDelayNextFireStopTime )
      v25 = G_irand(minTimeBetweenBursts, maxTimeBetweenBursts);
    else
      v25 = 0;
    v26 = G_irand(min, maxBurstFireTime);
    weaponDelayNextFireStartTime = v25 + level.time;
    botData->botInfo.weaponDelayNextFireStartTime = v25 + level.time;
    botData->botInfo.weaponDelayNextFireStopTime = weaponDelayNextFireStartTime + v26;
    time = level.time;
  }
  if ( time < weaponDelayNextFireStartTime || time >= botData->botInfo.weaponDelayNextFireStopTime )
    return 0i64;
  v13 = ShouldPressADSButton;
  v12 = HasOverlay;
LABEL_25:
  if ( time <= botData->botInfo.weaponDelayForOffhand )
    return 0i64;
  if ( v40 )
  {
    if ( v11 )
      v11 = ((unsigned int)botData->botMatchData.flags >> 4) & 1;
  }
  else if ( time < botData->botInfo.weaponDelayEndTime )
  {
    return 0i64;
  }
  if ( Bot_IsForcedFiring(botData) )
  {
    botData->botInfo.weaponDelayAdsTime = 0;
    v11 = 0;
    goto LABEL_61;
  }
  if ( v11 )
  {
    v27 = 0;
    v28 = 0;
    if ( v13 && ps->weapCommon.fWeaponPosFrac < 1.0 )
      v27 = 1;
    fWeaponPosFrac = ps->weapCommon.fWeaponPosFrac;
    if ( fWeaponPosFrac > 0.0 && fWeaponPosFrac < 1.0 )
    {
      if ( v13 )
      {
LABEL_57:
        if ( (botData->botMatchData.flags & 4) != 0 )
        {
LABEL_60:
          botData->botInfo.weaponDelayAdsTime = level.time;
          goto LABEL_61;
        }
LABEL_58:
        if ( !v28 || (botData->botMatchData.flags & 8) == 0 )
          goto LABEL_61;
        goto LABEL_60;
      }
      v28 = 1;
    }
    if ( !v27 )
      goto LABEL_58;
    goto LABEL_57;
  }
LABEL_61:
  if ( v12 )
    adsDelayFireTimeScoped = botData->botMatchData.adsDelayFireTimeScoped;
  else
    adsDelayFireTimeScoped = botData->botMatchData.adsDelayFireTime;
  if ( Bot_Weap_CanHoldBreath(ps) )
  {
    if ( botData->botInfo.forceHoldBreathCheck )
    {
      if ( ps->weapCommon.fWeaponPosFrac < 1.0 )
        botData->botInfo.forceHoldBreathCheck = 0;
    }
    else if ( BG_InADS(ps) )
    {
      botData->botInfo.forceHoldBreathCheck = 1;
      botData->botInfo.nextHoldBreathCheckTime = 0;
    }
  }
  if ( v11 && level.time - botData->botInfo.weaponDelayAdsTime <= (int)adsDelayFireTimeScoped )
    return 0i64;
  if ( (unsigned int)WeaponStateForViewWeapon > 0x3B || (v31 = 0xC39001C01C30001i64, !_bittest64(&v31, WeaponStateForViewWeapon)) )
  {
    if ( !Bot_IsUsingTurret(botData) )
      return 0i64;
  }
  if ( Bot_Weap_WeaponRequiresLockon(ps, ViewmodelWeapon) && !Bot_Weap_IsLockedOn(ps) )
    return 0i64;
  if ( !dualWield )
  {
    if ( Bot_Weap_IsWeapClass(ps, ViewmodelWeapon, WEAPCLASS_GRENADE) && (botData->botInfo.lastUserCmd->buttons & 1) != 0 )
      goto LABEL_89;
LABEL_88:
    cmd->buttons |= 1ui64;
    goto LABEL_89;
  }
  v32 = Bot_Weap_AmmoInClip(ps, ViewmodelWeapon, WEAPON_HAND_LEFT);
  v33 = Bot_Weap_AmmoInClip(ps, ViewmodelWeapon, WEAPON_HAND_DEFAULT);
  if ( !v40 )
  {
    if ( v32 )
    {
      if ( v33 )
      {
        buttons = cmd->buttons;
        if ( (botData->botInfo.flags & 0x200000) != 0 )
        {
          cmd->buttons = buttons | 1;
          botData->botInfo.flags &= ~0x200000u;
        }
        else
        {
          cmd->buttons = buttons | 0x20000;
          botData->botInfo.flags |= 0x200000u;
        }
      }
      else
      {
        cmd->buttons |= 0x20000ui64;
      }
      goto LABEL_89;
    }
    goto LABEL_88;
  }
  cmd->buttons |= 0x20001ui64;
LABEL_89:
  v35 = Bot_Weap_Class(ps, ViewmodelWeapon);
  v36 = BG_UsingAlternate(ps);
  v37 = BG_GetWeaponFireType(ViewmodelWeapon, v36);
  botData->botInfo.weaponDelayEndTime = Bot_GetNextWeaponDelayEndTime(botData, v37, v35, dualWield);
  result = 1i64;
  botData->botInfo.enemyTrack.lastFireTime = level.time;
  return result;
}

/*
==============
Bot_CombatStateFireWait
==============
*/
__int64 Bot_CombatStateFireWait(bot_data_t *botData, const playerState_s *ps, const vec3_t *overrideAimPoint)
{
  const Weapon *ViewmodelWeapon; 
  gentity_s *v7; 
  int flags; 
  double v10; 
  double v11; 
  __int128 weaponFireWaitArcCos_low; 
  __int128 v13; 
  gentity_s *ent; 
  float v15; 
  float v16; 
  float v17; 
  float v18; 
  __int128 v19; 
  __int128 v20; 
  __int128 v21; 
  __int128 v22; 
  const dvar_t *v26; 
  float dotResult[4]; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19853, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19854, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(ps);
  if ( !EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
    return 0i64;
  v7 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
  if ( !v7 )
    return 0i64;
  _XMM5 = LODWORD(botData->botInfo.weaponFireWaitArcCos);
  if ( *(float *)&_XMM5 <= 0.0 || (flags = botData->botInfo.flags, (flags & 0x80u) == 0) )
  {
    v10 = Bot_Weap_FireWaitArcCos(ps, ViewmodelWeapon);
    botData->botInfo.weaponFireWaitArcCos = *(float *)&v10;
    v11 = G_flrand(0.0, 0.02);
    weaponFireWaitArcCos_low = LODWORD(botData->botInfo.weaponFireWaitArcCos);
    botData->botInfo.flags |= 0x180u;
    flags = botData->botInfo.flags;
    v13 = weaponFireWaitArcCos_low;
    *(float *)&v13 = *(float *)&weaponFireWaitArcCos_low - *(float *)&v11;
    _XMM5 = v13;
    botData->botInfo.weaponFireWaitArcCos = *(float *)&weaponFireWaitArcCos_low - *(float *)&v11;
  }
  if ( (flags & 0x100) == 0 )
    return 0i64;
  ent = botData->botInfo.ent;
  v15 = ent->r.currentOrigin.v[0];
  v16 = ent->r.currentOrigin.v[1];
  if ( overrideAimPoint )
  {
    v17 = v15 - overrideAimPoint->v[0];
    v18 = ent->r.currentOrigin.v[2] - overrideAimPoint->v[2];
    v20 = LODWORD(ent->r.currentOrigin.v[1]);
    *(float *)&v20 = v16 - overrideAimPoint->v[1];
    v19 = v20;
  }
  else
  {
    v17 = v15 - v7->r.currentOrigin.v[0];
    v18 = ent->r.currentOrigin.v[2] - v7->r.currentOrigin.v[2];
    v21 = LODWORD(ent->r.currentOrigin.v[1]);
    *(float *)&v21 = v16 - v7->r.currentOrigin.v[1];
    v19 = v21;
  }
  v22 = v19;
  *(float *)&v22 = (float)((float)(*(float *)&v19 * *(float *)&v19) + (float)(v17 * v17)) + (float)(v18 * v18);
  _XMM2 = v22;
  __asm
  {
    vcmpltss xmm0, xmm2, cs:__real@48742400
    vblendvps xmm6, xmm5, xmm1, xmm0
  }
  dotResult[0] = *(float *)&_XMM6;
  if ( Bot_EntityWithinSpecificCombatFOV(botData, v7, *(float *)&_XMM6, overrideAimPoint, dotResult) )
  {
    botData->botInfo.flags &= ~0x100u;
    return 0i64;
  }
  v26 = DVARINT_bot_DrawDebug;
  if ( !DVARINT_bot_DrawDebug && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebug") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v26);
  if ( v26->current.integer == 8 )
    Bot_DrawDebugFireWait(&botData->botInfo, dotResult[0], *(float *)&_XMM6);
  return 1i64;
}

/*
==============
Bot_CombatStateGrenade
==============
*/
__int64 Bot_CombatStateGrenade(bot_data_t *botData, usercmd_s *cmd)
{
  usercmd_s *v2; 
  playerState_s *playerState; 
  int v5; 
  int HasOnlyUnderbarrelGL; 
  const gentity_s *v7; 
  int grenadeFlags; 
  int v9; 
  int v10; 
  gentity_s *ent; 
  const dvar_t *v12; 
  const dvar_t *v13; 
  int WeaponStateForViewWeapon; 
  int scriptedGrenadeStopTime; 
  int scriptedGrenadeTime; 
  int scriptedGrenadeAlignedTime; 
  bool v18; 
  __int64 result; 
  int time; 
  int v21; 
  int v22; 
  int v23; 
  __int64 v24; 
  int v25; 
  int v26; 
  int grenadeStartTime; 
  int grenadeFiredTime; 
  int grenadeHangTime; 
  int weaponDelayForOffhand; 
  int HasUnderBarrelGLAmmo; 
  vec3_t predictedPositionOut; 

  v2 = cmd;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19589, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19590, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19593, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  HasUnderBarrelGLAmmo = Bot_Weap_HasUnderBarrelGLAmmo(playerState);
  v5 = HasUnderBarrelGLAmmo;
  HasOnlyUnderbarrelGL = Bot_Weap_HasOnlyUnderbarrelGL(botData);
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
    v7 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
  else
    v7 = NULL;
  Bot_Weap_GetWeaponHandForViewWeapon(playerState);
  if ( Bot_Weap_HasUnderBarrelGL(playerState) )
    botData->botInfo.wantsAlternate = 0;
  if ( Bot_IsThrowingGrenade(botData) )
  {
    if ( (*((_BYTE *)&botData->scriptedAgentInfo + 28228) & 2) != 0 || !Bot_CanSeeAndCanFireOnEnemy(botData) )
      *(_WORD *)&v2->forwardmove = 0;
    grenadeFlags = botData->botInfo.grenadeFlags;
    v9 = level.time + 2000;
    botData->botInfo.flags &= ~0x10u;
    v10 = grenadeFlags & 0xFFFFFFFE;
    botData->botInfo.grenadeDelayTime = v9;
    botData->botInfo.grenadeFlags = v10;
    botData->botInfo.scriptedGrenadeStopTime = level.time + 500;
    if ( v7 )
    {
      if ( (v10 & 4) != 0 )
      {
        if ( Bot_GetPredictedEntityPosition(botData, v7, &predictedPositionOut) )
        {
          ent = botData->botInfo.ent;
          if ( (float)((float)((float)((float)(predictedPositionOut.v[1] - ent->r.currentOrigin.v[1]) * (float)(predictedPositionOut.v[1] - ent->r.currentOrigin.v[1])) + (float)((float)(predictedPositionOut.v[0] - ent->r.currentOrigin.v[0]) * (float)(predictedPositionOut.v[0] - ent->r.currentOrigin.v[0]))) + (float)((float)(predictedPositionOut.v[2] - ent->r.currentOrigin.v[2]) * (float)(predictedPositionOut.v[2] - ent->r.currentOrigin.v[2]))) < 4000000.0 )
            Bot_GrenadeGoodTargetCheck(botData, &botData->botInfo.grenadeWeap, &predictedPositionOut);
        }
      }
    }
    if ( Bot_Weap_GrenadeInRange(botData, &botData->botInfo.grenadeWeap, &botData->botInfo.grenadePitchDesired, &botData->botInfo.grenadeLaunchVel) )
      Bot_GrenadeTraceCalculatePitch(botData, 0);
    else
      botData->botInfo.grenadeStartTime = 0;
    if ( Bot_EnemyFacesBot(botData) && !Bot_EntityUsingRiotShield(v7, 1) && !Bot_ShouldForceGrenadeThrow(botData, 1) )
      botData->botInfo.grenadeStartTime = 0;
    v12 = DVARINT_bot_DrawDebugSpecial;
    if ( !DVARINT_bot_DrawDebugSpecial && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebugSpecial") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v12);
    if ( v12->current.integer == 9 )
      goto LABEL_95;
    v13 = DVARINT_bot_DrawDebugSpecial;
    if ( !DVARINT_bot_DrawDebugSpecial && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebugSpecial") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v13);
    if ( v13->current.integer == 10 )
    {
LABEL_95:
      if ( Bot_ShouldDrawDebugForBot(botData) )
      {
        G_DebugBox(&botData->botInfo.grenadeThrowTarget, &actorBoxCrouch, 0.0, &colorGreen, 0, 2);
        G_DebugLineWithDuration(&botData->botInfo.ent->r.currentOrigin, &botData->botInfo.grenadeThrowTarget, &colorGreen, 0, 2);
      }
    }
    if ( HasUnderBarrelGLAmmo )
    {
      botData->botInfo.wantsAlternate = 1;
      if ( BG_UsingAlternate(playerState) && level.time >= botData->botInfo.underbarrelNextFireTime )
      {
        botData->botInfo.weaponDelayForOffhand = level.time + 1000;
        WeaponStateForViewWeapon = Bot_Weap_GetWeaponStateForViewWeapon(playerState);
        if ( !Bot_IsReloading(botData) && (unsigned int)(WeaponStateForViewWeapon - 34) > 2 && !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 0x25u) )
        {
          v2->buttons |= 1ui64;
          botData->botInfo.underbarrelNextFireTime = botData->botInfo.weaponDelayForOffhand + 500;
        }
      }
    }
    else if ( level.time < Bot_GrenadeReleaseTime(botData) )
    {
      if ( Bot_Weap_IsNone(&botData->botInfo.grenadeWeap) )
      {
        weaponDelayForOffhand = botData->botInfo.weaponDelayForOffhand;
        grenadeHangTime = botData->botInfo.grenadeHangTime;
        grenadeFiredTime = botData->botInfo.grenadeFiredTime;
        grenadeStartTime = botData->botInfo.grenadeStartTime;
        v26 = botData->botInfo.grenadeFlags;
        v25 = Bot_GrenadeReleaseTime(botData);
        LODWORD(v24) = level.time;
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19680, ASSERT_TYPE_ASSERT, "(!Bot_Weap_IsNone( botInfo->grenadeWeap ))", "%s\n\tlevel.time: %i, Bot_GrenadeReleaseTime(): %i, gFlags: %i, gStartTime: %i, gFiredTime: %i, gHangTime: %i, delayForOffHand :%i", "!Bot_Weap_IsNone( botInfo->grenadeWeap )", v24, v25, v26, grenadeStartTime, grenadeFiredTime, grenadeHangTime, weaponDelayForOffhand) )
          __debugbreak();
        v5 = HasUnderBarrelGLAmmo;
        v2 = cmd;
      }
      v2->buttons |= Bot_Weap_GrenadeButton(playerState, &botData->botInfo.grenadeWeap);
    }
  }
  if ( (*((_BYTE *)&botData->scriptedAgentInfo + 28228) & 2) != 0 && Bot_Weap_BotFacingScriptedGrenadeTarget(botData) )
  {
    if ( !botData->botInfo.scriptedGrenadeAlignedTime )
      botData->botInfo.scriptedGrenadeAlignedTime = level.time;
    scriptedGrenadeStopTime = botData->botInfo.scriptedGrenadeStopTime;
    if ( scriptedGrenadeStopTime && level.time >= scriptedGrenadeStopTime )
      goto LABEL_65;
    scriptedGrenadeTime = botData->botInfo.scriptedGrenadeTime;
    scriptedGrenadeAlignedTime = botData->botInfo.scriptedGrenadeAlignedTime;
    if ( scriptedGrenadeStopTime > scriptedGrenadeTime )
      scriptedGrenadeTime = botData->botInfo.scriptedGrenadeStopTime;
    if ( scriptedGrenadeTime > scriptedGrenadeAlignedTime )
      scriptedGrenadeAlignedTime = scriptedGrenadeTime;
    if ( level.time - scriptedGrenadeAlignedTime > 500 )
LABEL_65:
      Bot_ClearScriptedGrenade(&botData->botInfo);
  }
  if ( HasOnlyUnderbarrelGL )
    botData->botInfo.wantsAlternate = 1;
  if ( !Bot_ShouldThrowGrenade(botData) )
    return 0i64;
  if ( (*((_BYTE *)&botData->scriptedAgentInfo + 28228) & 2) != 0 )
  {
    botData->botInfo.grenadeThrowTarget.v[0] = botData->botInfo.scriptedGrenadeTarget.v[0];
    botData->botInfo.grenadeThrowTarget.v[1] = botData->botInfo.scriptedGrenadeTarget.v[1];
    botData->botInfo.grenadeThrowTarget.v[2] = botData->botInfo.scriptedGrenadeTarget.v[2];
  }
  if ( !Bot_Weap_GrenadePick(&botData->botInfo, playerState, &botData->botInfo.grenadeWeap) )
  {
    v18 = (*((_BYTE *)&botData->scriptedAgentInfo + 28228) & 2) == 0;
    botData->botInfo.grenadeDelayTime = level.time + 2000;
    if ( v18 )
      return 0i64;
LABEL_73:
    Bot_ClearScriptedGrenade(&botData->botInfo);
    return 0i64;
  }
  if ( !Bot_Weap_GrenadeInRange(botData, &botData->botInfo.grenadeWeap, &botData->botInfo.grenadePitchDesired, &botData->botInfo.grenadeLaunchVel) )
    return 0i64;
  if ( !Bot_GrenadeTraceCalculatePitch(botData, 1) )
  {
    v23 = botData->botInfo.grenadeFlags;
    if ( (v23 & 2) == 0 )
      return 0i64;
    if ( (v23 & 0x10) != 0 )
    {
      botData->botInfo.scriptedGrenadeTarget.v[2] = botData->botInfo.scriptedGrenadeTarget.v[2] + 15.0;
      botData->botInfo.grenadePitchLastCheck = 0;
      return 0i64;
    }
    goto LABEL_73;
  }
  if ( !v5 && !Bot_Weap_IsThrowable(playerState, &botData->botInfo.grenadeWeap) && (*((_BYTE *)&botData->scriptedAgentInfo + 28228) & 2) == 0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19736, ASSERT_TYPE_ASSERT, "( hasUnderbarrelGL || Bot_Weap_IsThrowable( ps, botInfo->grenadeWeap ) || (botInfo->grenadeFlags & ( 1 << 1 )) )", (const char *)&queryFormat, "hasUnderbarrelGL || Bot_Weap_IsThrowable( ps, botInfo->grenadeWeap ) || (botInfo->grenadeFlags & BOT_FLAG_GRENADE_SCRIPTED_GRENADE)") )
    __debugbreak();
  time = level.time;
  botData->botInfo.grenadeFlags |= 1u;
  botData->botInfo.grenadeStartTime = time;
  if ( v5 )
  {
    botData->botInfo.wantsAlternate = 1;
    v21 = level.time;
    if ( HasOnlyUnderbarrelGL )
    {
      botData->botInfo.underbarrelNextFireTime = level.time;
      botData->botInfo.weaponDelayForOffhand = v21 + 500;
      result = 1i64;
      botData->botInfo.grenadeFiredTime = 0;
    }
    else
    {
      v22 = level.time + 1000;
      botData->botInfo.grenadeFiredTime = 0;
      botData->botInfo.underbarrelNextFireTime = v22;
      botData->botInfo.weaponDelayForOffhand = v22 + 500;
      return 1i64;
    }
  }
  else
  {
    if ( Bot_Weap_IsNone(&botData->botInfo.grenadeWeap) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19752, ASSERT_TYPE_ASSERT, "( !Bot_Weap_IsNone( botInfo->grenadeWeap ) )", (const char *)&queryFormat, "!Bot_Weap_IsNone( botInfo->grenadeWeap )") )
      __debugbreak();
    v2->buttons |= Bot_Weap_GrenadeButton(playerState, &botData->botInfo.grenadeWeap);
    result = 1i64;
    botData->botInfo.grenadeFiredTime = 0;
  }
  return result;
}

/*
==============
Bot_CombatStateMelee
==============
*/
__int64 Bot_CombatStateMelee(bot_data_t *botData, const playerState_s *ps, usercmd_s *cmd)
{
  const Weapon *ViewmodelWeapon; 
  PlayerHandIndex WeaponHandForViewWeapon; 
  unsigned __int64 v8; 
  __int64 v9; 
  double v10; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18968, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !ps && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18969, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(ps);
  if ( Bot_CanSeeAndCanFireOnEnemy(botData) && Bot_CanMeleeReactEnemy(botData) && Bot_AllowedToMeleeEnemy(botData) && ((WeaponHandForViewWeapon = Bot_Weap_GetWeaponHandForViewWeapon(ps), LODWORD(v8) = Bot_Weap_GetWeaponStateForViewWeapon(botData->botInfo.playerState), (unsigned int)v8 > 0x32) || (v9 = 0x4000001C31FBEi64, !_bittest64(&v9, v8))) && Bot_ActualMeleeRange(botData) > botData->botInfo.enemyTrack.lastDist && (!Bot_Weap_AmmoInClip(ps, ViewmodelWeapon, WeaponHandForViewWeapon) || (v10 = G_random(), *(float *)&v10 < 0.75) || Bot_EnemyPreferMelee(botData)) )
  {
    if ( (botData->botInfo.lastUserCmd->buttons & 4) == 0 )
      cmd->buttons |= 4ui64;
    return 1i64;
  }
  else
  {
    cmd->buttons &= ~4ui64;
    return 0i64;
  }
}

/*
==============
Bot_CombatStateOffhandFire
==============
*/
__int64 Bot_CombatStateOffhandFire(bot_data_t *botData, playerState_s *ps, usercmd_s *cmd)
{
  gentity_s *v6; 
  GWeaponMap *Instance; 
  const Weapon *ViewmodelWeapon; 
  int FrameDuration; 
  int v10; 
  int v11; 
  double v12; 
  int WeaponStateForViewWeapon; 
  GWeaponMap *v14; 
  int v15; 
  Weapon offHand; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9130, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
    v6 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
  else
    v6 = NULL;
  if ( !ps && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9133, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9134, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  if ( !v6 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9135, ASSERT_TYPE_ASSERT, "( enemy )", (const char *)&queryFormat, "enemy") )
    __debugbreak();
  if ( !v6->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9136, ASSERT_TYPE_ASSERT, "( enemy->sentient )", (const char *)&queryFormat, "enemy->sentient") )
    __debugbreak();
  Instance = GWeaponMap::GetInstance();
  ViewmodelWeapon = BG_GetViewmodelWeapon(Instance, ps);
  if ( Bot_Weap_IsNone(ViewmodelWeapon) )
    return 0i64;
  if ( !Bot_GrenadesAllowed(botData) )
    return 0i64;
  FrameDuration = G_Level_GetFrameDuration();
  if ( !Bot_RecentSeeSentient(botData, v6->sentient, FrameDuration) )
    return 0i64;
  v10 = Bot_Weap_Class(ps, ViewmodelWeapon);
  if ( level.time < botData->botInfo.weaponDelayEndTime || Bot_EnemyPreferMelee(botData) && (botData->botInfo.scriptFlags & 0x200) == 0 )
    return 0i64;
  if ( (!Bot_Weap_FirstAvailableOfType(ps, BOT_GRENADE_TYPE_LETHAL, &offHand) || !Bot_Weap_IsOffhandClass(ps, &offHand, OFFHAND_CLASS_THROWINGKNIFE)) && (!Bot_Weap_FirstAvailableOfType(ps, BOT_GRENADE_TYPE_TACTICAL, &offHand) || !Bot_Weap_IsOffhandClass(ps, &offHand, OFFHAND_CLASS_THROWINGKNIFE)) )
    return 0i64;
  v11 = Bot_Weap_Ammo(ps, &offHand);
  if ( !v11 )
    return 0i64;
  if ( v11 > 0 )
  {
    if ( !Bot_EntityWithinSpecificCombatFOV(botData, v6, 0.95999998, NULL, NULL) )
      return 0i64;
    if ( botData->botInfo.enemyTrack.lastDist > 500.0 )
      return 0i64;
    if ( level.time - botData->botInfo.lastKnifeThrowCheck < 200 )
      return 0i64;
    botData->botInfo.lastKnifeThrowCheck = level.time;
    if ( Bot_Weap_IsRanged(ps, ViewmodelWeapon) )
    {
      if ( Bot_Weap_Ammo(ps, ViewmodelWeapon) )
      {
        v12 = G_random();
        if ( *(float *)&v12 >= botData->botMatchData.throwKnifeChance )
          return 0i64;
      }
    }
    if ( Bot_CombatStateFireWait(botData, ps, NULL) )
      return 0i64;
  }
  WeaponStateForViewWeapon = Bot_Weap_GetWeaponStateForViewWeapon(botData->botInfo.playerState);
  botData->botInfo.weaponDelayForOffhand = level.time + (int)botData->botMatchData.maxNonAutoFireDelay;
  if ( (unsigned int)(WeaponStateForViewWeapon - 16) > 1 && (unsigned int)(WeaponStateForViewWeapon - 22) > 2 && level.time >= botData->botInfo.weaponDelayEndTime )
  {
    if ( Bot_Weap_IsNone(&offHand) )
    {
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9215, ASSERT_TYPE_ASSERT, "( !Bot_Weap_IsNone( offHand ) )", (const char *)&queryFormat, "!Bot_Weap_IsNone( offHand )") )
        __debugbreak();
    }
    cmd->buttons |= Bot_Weap_GrenadeButton(ps, &offHand);
    v14 = GWeaponMap::GetInstance();
    v15 = BG_PlayerDualWieldingWeapon(v14, ps, ViewmodelWeapon);
    botData->botInfo.weaponDelayEndTime = Bot_GetNextWeaponDelayEndTime(botData, 1, v10, v15);
  }
  return 1i64;
}

/*
==============
Bot_CombatStateThrowBack
==============
*/
bool Bot_CombatStateThrowBack(bot_data_t *botData, playerState_s *ps, usercmd_s *cmd)
{
  bool result; 
  int grenadeThrowbackStartTime; 
  int time; 
  double v9; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18901, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !ps && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18902, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18903, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  if ( !Bot_GrenadesAllowed(botData) || GameModeFlagContainer<enum PWeaponFlagsCommon,enum PWeaponFlagsSP,enum PWeaponFlagsMP,64>::TestFlagInternal(&ps->weapCommon.weapFlags, ACTIVE, 0x33u) )
    return 0;
  if ( ps->throwbackGrenadeTimeLeft <= 0 )
  {
    *(_QWORD *)((char *)&botData->scriptedAgentInfo + 28236) = -1i64;
    return 0;
  }
  grenadeThrowbackStartTime = botData->botInfo.grenadeThrowbackStartTime;
  time = level.time;
  if ( grenadeThrowbackStartTime == -1 )
  {
    botData->botInfo.grenadeThrowbackStartTime = level.time;
    time = level.time;
    grenadeThrowbackStartTime = level.time;
  }
  if ( (float)(time - grenadeThrowbackStartTime) < botData->botMatchData.reactionTime )
    return 0;
  if ( GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 5u) )
    return 0;
  if ( (LOBYTE(botData->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) != 0 )
    return 0;
  if ( level.time - botData->botInfo.grenadeThrowbackLastCheckTime < 100 )
    return 0;
  botData->botInfo.grenadeThrowbackLastCheckTime = level.time;
  v9 = G_random();
  if ( *(float *)&v9 >= botData->botMatchData.grenadeThrowbackChance )
    return 0;
  cmd->buttons &= 0xFFFFFFFFFFFDFFFCui64;
  result = 1;
  cmd->buttons |= 0x1000ui64;
  botData->botInfo.grenadeFiredTime = 0;
  return result;
}

/*
==============
Bot_CompareHUDStrings
==============
*/
__int64 Bot_CompareHUDStrings(const void *hs0, const void *hs1)
{
  return (unsigned int)(*(_DWORD *)hs1 - *(_DWORD *)hs0);
}

/*
==============
Bot_CreateZoneObstacle
==============
*/
void Bot_CreateZoneObstacle(int zoneNum, team_t team, float obsPenalty)
{
  __int64 v3; 
  __int64 v5; 
  char NodeTeam; 
  Bounds *p_bounds; 
  nav_space_s *DefaultSpace; 
  __int128 angles; 

  v3 = zoneNum;
  v5 = 13i64 * zoneNum + Path_GetNodeTeam(team);
  if ( s_botZoneData->obstacleID[v5] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13828, ASSERT_TYPE_ASSERT, "( BOT_ZONE_OBSTACLE_NONE == s_botZoneData[zoneNum].obstacleID[nodeTeam] )", (const char *)&queryFormat, "BOT_ZONE_OBSTACLE_NONE == s_botZoneData[zoneNum].obstacleID[nodeTeam]") )
    __debugbreak();
  if ( (!Path_ZoneCount() || level.teammode == TEAMMODE_FFA) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13829, ASSERT_TYPE_ASSERT, "( Bot_TeamsZoneData() )", (const char *)&queryFormat, "Bot_TeamsZoneData()") )
    __debugbreak();
  *(float *)&angles = 0.0;
  *((float *)&angles + 1) = 0.0;
  *((float *)&angles + 2) = 0.0;
  if ( (unsigned int)(team - 1) > 1 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13808, ASSERT_TYPE_ASSERT, "( team == TEAM_AXIS || team == TEAM_ALLIES )", (const char *)&queryFormat, "team == TEAM_AXIS || team == TEAM_ALLIES", angles) )
    __debugbreak();
  NodeTeam = Path_GetNodeTeam(team);
  p_bounds = &s_botZoneData[v3].bounds;
  DefaultSpace = Nav_GetDefaultSpace();
  s_botZoneData->obstacleID[v5] = Nav_CreateObstacleByBounds(DefaultSpace, p_bounds, (const vec3_t *)&angles, obsPenalty, 1u, 1 << NodeTeam);
}

/*
==============
Bot_CurrentEnemyIsHighlyThreatening
==============
*/
__int64 Bot_CurrentEnemyIsHighlyThreatening(const bot_data_t *botData)
{
  unsigned int v2; 
  gentity_s *v3; 
  int v4; 
  int MaxThreat; 
  bitarray<224> *AllTeamFlags; 
  sentient_s *v7; 
  signed __int64 v8; 
  char *v9; 
  const EnemySelector *v10; 
  bitarray<224> iTeamFlags; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9523, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v2 = 0;
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
  {
    v3 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
    if ( v3 )
      goto LABEL_10;
  }
  else
  {
    v3 = NULL;
  }
  if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9533, ASSERT_TYPE_ASSERT, "( enemy )", (const char *)&queryFormat, "enemy") )
    __debugbreak();
LABEL_10:
  if ( !v3->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9534, ASSERT_TYPE_ASSERT, "( enemy->sentient )", (const char *)&queryFormat, "enemy->sentient") )
    __debugbreak();
  v4 = -2147483647;
  MaxThreat = -2147483647;
  if ( Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) )
    AllTeamFlags = (bitarray<224> *)Com_TeamsSP_GetAllTeamFlags();
  else
    AllTeamFlags = (bitarray<224> *)Com_TeamsMP_GetAllTeamFlags();
  iTeamFlags = *AllTeamFlags;
  v7 = Sentient_FirstSentient(&iTeamFlags);
  if ( !v7 )
    goto LABEL_36;
  do
  {
    if ( v7->inuse && !AI_IsAlliedSentient(botData->botInfo.sentient, v7) )
    {
      v8 = 60 * (v7 - level.sentients);
      v9 = (char *)&botData->scriptedAgentInfo + v8 + 11644;
      if ( (const bot_data_t *)((char *)botData + v8) == (const bot_data_t *)-11652i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9545, ASSERT_TYPE_ASSERT, "( botSentientInfo )", (const char *)&queryFormat, "botSentientInfo") )
        __debugbreak();
      if ( v7 == v3->sentient )
      {
        if ( EntHandle::isDefined(&botData->botInfo.sentient->scriptTargetEnt) && EntHandle::ent(&botData->botInfo.sentient->scriptTargetEnt) == v7->ent )
        {
          v10 = EnemySelector_Get(botData->botInfo.sentient->enemySelector);
          MaxThreat = EnemySelector_GetMaxThreat(v10);
        }
        else
        {
          MaxThreat = *((_DWORD *)v9 + 10);
        }
      }
      else if ( *((_DWORD *)v9 + 10) > v4 )
      {
        v4 = *((_DWORD *)v9 + 10);
      }
    }
    v7 = Sentient_NextSentient(v7, &iTeamFlags);
  }
  while ( v7 );
  v2 = 0;
  if ( MaxThreat == 0x80000000 || MaxThreat == -2147483647 )
  {
LABEL_36:
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9560, ASSERT_TYPE_ASSERT, "(currentEnemyThreat > AI_THREAT_MIN)", "%s\n\tBot has no threat on his current enemy. Current enemy num: %i, highestOtherThreat: %i", "currentEnemyThreat > AI_THREAT_MIN", v3->s.number, v4) )
      __debugbreak();
  }
  LOBYTE(v2) = (float)((float)MaxThreat - (float)v4) > 3000.0;
  return v2;
}

/*
==============
Bot_CyclePathTurn
==============
*/
void Bot_CyclePathTurn(int postThinkEntNum)
{
  unsigned int v2; 
  int m_characterCount; 
  int v4; 
  int v5; 
  gentity_s *v6; 
  __int16 EntityIndex; 
  const SvClientMP *MpClient; 
  int IsClientConnected; 
  bitarray_base<bitarray<224> > *AllTeamFlags; 
  const SvClientMP *v11; 
  __int64 v12; 
  __int64 v13; 

  v2 = (unsigned int)postThinkEntNum >> 31;
  if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
    __debugbreak();
  m_characterCount = ComCharacterLimits::ms_gameData.m_characterCount;
  if ( (int)ComCharacterLimits::ms_gameData.m_characterCount >= 2048 )
  {
    LODWORD(v12) = ComCharacterLimits::ms_gameData.m_characterCount;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3092, ASSERT_TYPE_ASSERT, "( characterMaxCount ) < ( ( 2048 ) )", "characterMaxCount < MAX_GENTITIES\n\t%i, %i", v12, 2048) )
      __debugbreak();
  }
  if ( s_botPathTurn >= (unsigned int)m_characterCount )
  {
    LODWORD(v13) = m_characterCount;
    LODWORD(v12) = s_botPathTurn;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3093, ASSERT_TYPE_ASSERT, "(unsigned)( s_botPathTurn ) < (unsigned)( characterMaxCount )", "s_botPathTurn doesn't index characterMaxCount\n\t%i not in [0, %i)", v12, v13) )
      __debugbreak();
  }
  if ( postThinkEntNum < -1 )
  {
    LODWORD(v13) = -1;
    LODWORD(v12) = postThinkEntNum;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3094, ASSERT_TYPE_ASSERT, "( postThinkEntNum ) >= ( -1 )", "postThinkEntNum >= -1\n\t%i, %i", v12, v13) )
      __debugbreak();
  }
  if ( postThinkEntNum >= m_characterCount )
  {
    LODWORD(v13) = m_characterCount;
    LODWORD(v12) = postThinkEntNum;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3095, ASSERT_TYPE_ASSERT, "( postThinkEntNum ) < ( characterMaxCount )", "postThinkEntNum < characterMaxCount\n\t%i, %i", v12, v13) )
      __debugbreak();
  }
  if ( (_BYTE)v2 || !s_botGetPathToGoalCalled && s_botPathTurn == postThinkEntNum )
  {
    v4 = s_botPathTurn;
    while ( 1 )
    {
      while ( 1 )
      {
        while ( 1 )
        {
          v5 = s_botPathTurn + 1;
          s_botPathTurn = v5;
          if ( v5 >= m_characterCount )
          {
            if ( !(_BYTE)v2 )
            {
              s_botPathTurn = v5 - 1;
              return;
            }
            s_botPathTurn = 0;
            v5 = 0;
          }
          v6 = &level.gentities[v5];
          if ( v5 == v4 )
            return;
          if ( v6 )
          {
            EntityIndex = G_GetEntityIndex(&level.gentities[v5]);
            if ( G_IsEntityInUse(EntityIndex) )
            {
              if ( v6->sentient )
                break;
            }
          }
        }
        if ( !v6->client )
          break;
        MpClient = SV_Client_GetMpClient(v6->s.number);
        IsClientConnected = Bot_IsClientConnected(MpClient);
LABEL_31:
        if ( IsClientConnected )
          goto LABEL_32;
      }
      if ( v6->agent )
      {
        IsClientConnected = v6->s.eType == ET_AGENT;
        goto LABEL_31;
      }
LABEL_32:
      if ( v6->s.eType != ET_INVISIBLE )
      {
        AllTeamFlags = (bitarray_base<bitarray<224> > *)Com_TeamsMP_GetAllTeamFlags();
        if ( bitarray_base<bitarray<224>>::testBit(AllTeamFlags, v6->sentient->eTeam) )
        {
          if ( !v6->client || (v11 = SV_Client_GetMpClient(v6->s.number), Bot_IsClientActive(v11)) )
          {
            if ( SV_BotIsBotEnt(v6) )
              return;
          }
        }
      }
    }
  }
}

/*
==============
Bot_DebugAddErrorLocation
==============
*/
void Bot_DebugAddErrorLocation(bot_data_t *botData, bot_error_loc_type_t type, float duplicateRadius, const vec3_t *errorOrigin, const vec3_t *errorOrigin2, const vec3_t *errorOrigin3, const char *string)
{
  __int64 errorLocCount; 
  __int64 v11; 
  bot_error_loc_t *v12; 
  __int64 v13; 
  usercmd_s cmd; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2602, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2603, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( (unsigned int)type >= BOT_ERROR_LOC_COUNT )
  {
    LODWORD(v13) = type;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2604, ASSERT_TYPE_ASSERT, "(unsigned)( type ) < (unsigned)( BOT_ERROR_LOC_COUNT )", "type doesn't index BOT_ERROR_LOC_COUNT\n\t%i not in [0, %i)", v13, 3) )
      __debugbreak();
  }
  if ( Bot_DebugValidNewErrorLocation(type, errorOrigin, errorOrigin2, duplicateRadius) )
  {
    errorLocCount = botData->botDebugData.errorLocCount;
    if ( (int)errorLocCount < 20 )
    {
      v11 = errorLocCount;
      botData->botDebugData.errorLocCount = errorLocCount + 1;
      v12 = &botData->botDebugData.errorLocs[errorLocCount];
      memset_0(v12, 0, sizeof(bot_error_loc_t));
      botData->botDebugData.errorLocs[v11].type = type;
      v12->origin.v[0] = errorOrigin->v[0];
      v12->origin.v[1] = errorOrigin->v[1];
      v12->origin.v[2] = errorOrigin->v[2];
      if ( errorOrigin2 )
        botData->botDebugData.errorLocs[v11].origin2 = *errorOrigin2;
      if ( errorOrigin3 )
      {
        botData->botDebugData.errorLocs[v11].origin3 = *errorOrigin3;
        botData->botDebugData.errorLocs[v11].usingOrigin3 = 1;
      }
      botData->botDebugData.errorLocs[v11].yaw = botData->botInfo.ent->r.currentAngles.v[1];
      if ( type )
      {
        if ( type == BOT_ERROR_LOC_SEE_THROUGH )
        {
          if ( string )
            Core_strcpy_truncate(botData->botDebugData.errorLocs[v11].string, 0x400ui64, string);
        }
      }
      else
      {
        botData->botDebugData.errorLocs[v11].traversal = botData->botInfo.traversal;
        botData->botDebugData.errorLocs[v11].nodeStart = botData->botInfo.nodeNegotStart;
        botData->botDebugData.errorLocs[v11].nodeEnd = botData->botInfo.nodeNegotEnd;
        Bot_SetMovementAlongNegotiation(botData, &cmd);
        botData->botDebugData.errorLocs[v11].forward = cmd.forwardmove;
        botData->botDebugData.errorLocs[v11].right = cmd.rightmove;
        botData->botDebugData.errorLocs[v11].jumpCount = truncate_cast<short,int>(botData->botInfo.traverseProgressJumps);
      }
    }
  }
}

/*
==============
Bot_DebugGoal
==============
*/
void Bot_DebugGoal(int index, vec3_t *goal)
{
  int v2; 
  __int64 v4; 
  unsigned int v5; 
  gentity_s *GEntity; 
  float v7; 
  float v8; 
  __int64 v9; 
  __int64 v10; 
  vec3_t out; 
  tmat33_t<vec3_t> axis; 

  v2 = index - 1;
  if ( index - 1 < 0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9926, ASSERT_TYPE_ASSERT, "( indexAdjusted ) >= ( 0 )", "indexAdjusted >= 0\n\t%i, %i", index - 1, 0i64) )
    __debugbreak();
  if ( (unsigned int)v2 >= 4 )
  {
    LODWORD(v10) = 4;
    LODWORD(v9) = v2;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9927, ASSERT_TYPE_ASSERT, "(unsigned)( indexAdjusted ) < (unsigned)( ( sizeof( *array_counter( s_botDebugPathGoal ) ) + 0 ) )", "indexAdjusted doesn't index ARRAY_COUNT( s_botDebugPathGoal )\n\t%i not in [0, %i)", v9, v10) )
      __debugbreak();
  }
  v4 = v2;
  v5 = s_botDebugPathGoalGround[v2];
  if ( v5 == 2047 )
  {
    goal->v[0] = s_botDebugPathGoal[v2].v[0];
    goal->v[1] = s_botDebugPathGoal[v2].v[1];
    goal->v[2] = s_botDebugPathGoal[v2].v[2];
  }
  else
  {
    if ( v5 >= 0x800 )
    {
      LODWORD(v10) = 2048;
      LODWORD(v9) = s_botDebugPathGoalGround[v2];
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9935, ASSERT_TYPE_ASSERT, "(unsigned)( s_botDebugPathGoalGround[indexAdjusted] ) < (unsigned)( ( 2048 ) )", "s_botDebugPathGoalGround[indexAdjusted] doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v9, v10) )
        __debugbreak();
    }
    if ( s_botDebugPathGoalGround[v2] == 2047 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9936, ASSERT_TYPE_ASSERT, "( s_botDebugPathGoalGround[indexAdjusted] != ENTITYNUM_NONE )", (const char *)&queryFormat, "s_botDebugPathGoalGround[indexAdjusted] != ENTITYNUM_NONE") )
      __debugbreak();
    if ( G_IsEntityInUse(s_botDebugPathGoalGround[v2]) )
    {
      GEntity = G_GetGEntity(s_botDebugPathGoalGround[v2]);
      AnglesToAxis(&GEntity->r.currentAngles, &axis);
      MatrixTransformVector(&s_botDebugPathGoal[v4], &axis, &out);
      v7 = out.v[1];
      goal->v[0] = out.v[0] + GEntity->r.currentOrigin.v[0];
      v8 = out.v[2];
      goal->v[1] = v7 + GEntity->r.currentOrigin.v[1];
      goal->v[2] = v8 + GEntity->r.currentOrigin.v[2];
    }
  }
}

/*
==============
Bot_DebugPathGoalEnabled
==============
*/
_BOOL8 Bot_DebugPathGoalEnabled()
{
  return Bot_GetCurrentNumDebugGoals() > 0;
}

/*
==============
Bot_DebugValidNewErrorLocation
==============
*/
__int64 Bot_DebugValidNewErrorLocation(bot_error_loc_type_t type, const vec3_t *errorOrigin, const vec3_t *otherErrorOrigin, float duplicateRadius)
{
  char v6; 
  float v7; 
  int v8; 
  __int64 i; 
  gentity_s *v10; 
  __int16 EntityIndex; 
  const SvClientMP *MpClient; 
  int IsClientConnected; 
  bot_data_t *EntityData; 
  __int64 errorLocCount; 
  __int64 v16; 
  float *v17; 
  float v18; 
  float v19; 
  float v20; 
  float v21; 
  float v22; 
  float v23; 
  float v24; 
  float v25; 
  float v26; 
  float v27; 
  float v28; 
  __int64 v30; 
  __int64 v31; 

  v6 = type;
  if ( (unsigned int)type >= BOT_ERROR_LOC_COUNT && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2540, ASSERT_TYPE_ASSERT, "(unsigned)( type ) < (unsigned)( BOT_ERROR_LOC_COUNT )", "type doesn't index BOT_ERROR_LOC_COUNT\n\t%i not in [0, %i)", type, 3) )
    __debugbreak();
  if ( duplicateRadius > 0.0 )
  {
    v7 = duplicateRadius * duplicateRadius;
    if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
      __debugbreak();
    if ( (int)ComCharacterLimits::ms_gameData.m_characterCount > 2048 )
    {
      if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
        __debugbreak();
      LODWORD(v31) = 2048;
      LODWORD(v30) = ComCharacterLimits::ms_gameData.m_characterCount;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2549, ASSERT_TYPE_ASSERT, "( ComCharacterLimits::GetCharacterMaxCount() ) <= ( ( 2048 ) )", "ComCharacterLimits::GetCharacterMaxCount() <= MAX_GENTITIES\n\t%i, %i", v30, v31) )
        __debugbreak();
    }
    v8 = 0;
    for ( i = 0i64; ; ++i )
    {
      if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
        __debugbreak();
      if ( v8 >= (int)ComCharacterLimits::ms_gameData.m_characterCount )
        return 1i64;
      v10 = &level.gentities[i];
      if ( &level.gentities[i] )
      {
        EntityIndex = G_GetEntityIndex(&level.gentities[i]);
        if ( G_IsEntityInUse(EntityIndex) )
        {
          if ( v10->sentient )
            break;
        }
      }
LABEL_40:
      ++v8;
    }
    if ( v10->client )
    {
      MpClient = SV_Client_GetMpClient(v10->s.number);
      IsClientConnected = Bot_IsClientConnected(MpClient);
    }
    else
    {
      if ( !v10->agent )
      {
LABEL_27:
        if ( SV_BotIsBotEnt(v10) )
        {
          EntityData = Bot_GetEntityData(v10);
          if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2563, ASSERT_TYPE_ASSERT, "( otherBotData )", (const char *)&queryFormat, "otherBotData") )
            __debugbreak();
          errorLocCount = EntityData->botDebugData.errorLocCount;
          v16 = 0i64;
          if ( errorLocCount > 0 )
          {
            v17 = &EntityData->botDebugData.errorLocs[0].origin.v[2];
            while ( 1 )
            {
              if ( *((_BYTE *)v17 + 48) == v6 )
              {
                v18 = errorOrigin->v[1];
                v19 = *(v17 - 1);
                v20 = errorOrigin->v[0];
                v21 = *(v17 - 2);
                v22 = errorOrigin->v[2];
                if ( (float)((float)((float)((float)(v18 - v19) * (float)(v18 - v19)) + (float)((float)(v20 - v21) * (float)(v20 - v21))) + (float)((float)(v22 - *v17) * (float)(v22 - *v17))) <= v7 )
                  return 0i64;
                if ( otherErrorOrigin )
                {
                  v23 = otherErrorOrigin->v[1];
                  v24 = otherErrorOrigin->v[0];
                  v25 = otherErrorOrigin->v[2];
                  if ( (float)((float)((float)((float)(v23 - v19) * (float)(v23 - v19)) + (float)((float)(v24 - v21) * (float)(v24 - v21))) + (float)((float)(v25 - *v17) * (float)(v25 - *v17))) <= v7 )
                    return 0i64;
                  v26 = v17[2];
                  v27 = v17[1];
                  v28 = v17[3];
                  if ( (float)((float)((float)((float)(v18 - v26) * (float)(v18 - v26)) + (float)((float)(v20 - v27) * (float)(v20 - v27))) + (float)((float)(v22 - v28) * (float)(v22 - v28))) <= v7 || (float)((float)((float)((float)(v23 - v26) * (float)(v23 - v26)) + (float)((float)(v24 - v27) * (float)(v24 - v27))) + (float)((float)(v25 - v28) * (float)(v25 - v28))) <= v7 )
                    return 0i64;
                }
              }
              ++v16;
              v17 += 271;
              if ( v16 >= errorLocCount )
                goto LABEL_40;
            }
          }
        }
        goto LABEL_40;
      }
      IsClientConnected = v10->s.eType == ET_AGENT;
    }
    if ( !IsClientConnected )
      goto LABEL_40;
    goto LABEL_27;
  }
  return 1i64;
}

/*
==============
Bot_DestroyZoneObstacle
==============
*/
void Bot_DestroyZoneObstacle(int zoneNum, team_t team)
{
  __int64 v2; 
  unsigned int v3; 

  v2 = 4 * (13i64 * zoneNum + Path_GetNodeTeam(team)) + 8;
  v3 = *(_DWORD *)((char *)&s_botZoneData->team + v2);
  if ( v3 )
  {
    Nav_DestroyObstacleByID(v3);
    *(_DWORD *)((char *)&s_botZoneData->team + v2) = 0;
  }
}

/*
==============
Bot_DifficultyFromString
==============
*/
__int64 Bot_DifficultyFromString(const char *botDifficultyString)
{
  const char *v2; 
  unsigned int v3; 
  __int64 v4; 
  __int64 v5; 
  const char *v6; 
  signed __int64 v7; 
  int v8; 
  __int64 v9; 
  int v10; 
  int v11; 
  int v12; 

  if ( !botDifficultyString && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4815, ASSERT_TYPE_ASSERT, "( botDifficultyString )", (const char *)&queryFormat, "botDifficultyString") )
    __debugbreak();
  v2 = BOT_STR_TBL_DIFFICULTY[0];
  v3 = 0;
  if ( !BOT_STR_TBL_DIFFICULTY[0] )
    return 5i64;
  v4 = 0i64;
  do
  {
    if ( !*v2 || v3 >= 6 )
      break;
    v5 = 0x7FFFFFFFi64;
    v6 = botDifficultyString;
    if ( !v2 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 212, ASSERT_TYPE_SANITY, "( s0 )", (const char *)&queryFormat, "s0") )
      __debugbreak();
    if ( !botDifficultyString && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 213, ASSERT_TYPE_SANITY, "( s1 )", (const char *)&queryFormat, "s1") )
      __debugbreak();
    v7 = v2 - botDifficultyString;
    while ( 1 )
    {
      v8 = (unsigned __int8)v6[v7];
      v9 = v5;
      v10 = *(unsigned __int8 *)v6++;
      --v5;
      if ( !v9 )
        return v3;
      if ( v8 != v10 )
      {
        v11 = v8 + 32;
        if ( (unsigned int)(v8 - 65) > 0x19 )
          v11 = v8;
        v8 = v11;
        v12 = v10 + 32;
        if ( (unsigned int)(v10 - 65) > 0x19 )
          v12 = v10;
        if ( v8 != v12 )
          break;
      }
      if ( !v8 )
        return v3;
    }
    v2 = BOT_STR_TBL_DIFFICULTY[++v4];
    ++v3;
  }
  while ( v2 );
  return 5i64;
}

/*
==============
Bot_DoGrenadeTrace
==============
*/
__int64 Bot_DoGrenadeTrace(bot_data_t *botData, const vec3_t *traceStart, const vec3_t *tracePeak, const vec3_t *traceEnd, const Bounds *grenadeBounds, int initialCheck)
{
  int v10; 
  const dvar_t *v11; 
  const dvar_t *v12; 
  unsigned int v13; 
  int v14; 
  const dvar_t *v16; 
  const dvar_t *v17; 
  float v18; 
  float v19; 
  float v20; 
  float v21; 
  vec3_t center; 
  trace_t v23; 
  trace_t results; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19382, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19383, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !grenadeBounds && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19384, ASSERT_TYPE_ASSERT, "( grenadeBounds )", (const char *)&queryFormat, "grenadeBounds") )
    __debugbreak();
  if ( traceEnd->v[0] == traceStart->v[0] && traceEnd->v[1] == traceStart->v[1] && traceEnd->v[2] == traceStart->v[2] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19385, ASSERT_TYPE_ASSERT, "( !Vec3Compare( traceStart, traceEnd ) )", (const char *)&queryFormat, "!Vec3Compare( traceStart, traceEnd )") )
    __debugbreak();
  v10 = LODWORD(traceStart->v[0]) & 0x7F800000;
  results.fraction = FLOAT_1_0;
  v23.fraction = FLOAT_1_0;
  if ( (v10 == 2139095040 || (LODWORD(traceStart->v[1]) & 0x7F800000) == 2139095040 || (LODWORD(traceStart->v[2]) & 0x7F800000) == 2139095040) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19390, ASSERT_TYPE_ASSERT, "( !( IS_NAN( ( traceStart )[0] ) || IS_NAN( ( traceStart )[1] ) || IS_NAN( ( traceStart )[2] ) ) )", (const char *)&queryFormat, "!IS_NAN_VEC( traceStart )") )
    __debugbreak();
  if ( ((LODWORD(tracePeak->v[0]) & 0x7F800000) == 2139095040 || (LODWORD(tracePeak->v[1]) & 0x7F800000) == 2139095040 || (LODWORD(tracePeak->v[2]) & 0x7F800000) == 2139095040) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19391, ASSERT_TYPE_ASSERT, "( !( IS_NAN( ( tracePeak )[0] ) || IS_NAN( ( tracePeak )[1] ) || IS_NAN( ( tracePeak )[2] ) ) )", (const char *)&queryFormat, "!IS_NAN_VEC( tracePeak )") )
    __debugbreak();
  PhysicsQuery_LegacyTrace(PHYSICS_WORLD_ID_FIRST, &results, traceStart, tracePeak, grenadeBounds, botData->botInfo.ent->s.number, 0, 8397185, 0, NULL, All, 0);
  if ( results.fraction < 1.0 )
    goto LABEL_46;
  if ( ((LODWORD(traceEnd->v[0]) & 0x7F800000) == 2139095040 || (LODWORD(traceEnd->v[1]) & 0x7F800000) == 2139095040 || (LODWORD(traceEnd->v[2]) & 0x7F800000) == 2139095040) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19396, ASSERT_TYPE_ASSERT, "( !( IS_NAN( ( traceEnd )[0] ) || IS_NAN( ( traceEnd )[1] ) || IS_NAN( ( traceEnd )[2] ) ) )", (const char *)&queryFormat, "!IS_NAN_VEC( traceEnd )") )
    __debugbreak();
  PhysicsQuery_LegacyTrace(PHYSICS_WORLD_ID_FIRST, &v23, tracePeak, traceEnd, grenadeBounds, botData->botInfo.ent->s.number, 0, 8397185, 0, NULL, All, 0);
  if ( v23.fraction < 1.0 )
  {
LABEL_46:
    v16 = DVARINT_bot_DrawDebugSpecial;
    if ( !DVARINT_bot_DrawDebugSpecial && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebugSpecial") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v16);
    if ( v16->current.integer != 9 )
    {
      v17 = DVARINT_bot_DrawDebugSpecial;
      if ( !DVARINT_bot_DrawDebugSpecial && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebugSpecial") )
        __debugbreak();
      Dvar_CheckFrontendServerThread(v17);
      if ( v17->current.integer != 10 )
        return 0i64;
    }
    if ( !Bot_ShouldDrawDebugForBot(botData) || !initialCheck )
      return 0i64;
    if ( results.fraction < 1.0 )
    {
      G_DebugLineWithDuration(traceStart, tracePeak, &colorRed, 0, 7);
      v20 = tracePeak->v[1];
      center.v[0] = (float)((float)(tracePeak->v[0] - traceStart->v[0]) * results.fraction) + traceStart->v[0];
      v21 = (float)(tracePeak->v[2] - traceStart->v[2]) * results.fraction;
      center.v[1] = (float)((float)(v20 - traceStart->v[1]) * results.fraction) + traceStart->v[1];
      center.v[2] = v21 + traceStart->v[2];
    }
    else
    {
      G_DebugLineWithDuration(traceStart, tracePeak, &colorGreen, 0, 7);
      if ( v23.fraction >= 1.0 )
      {
        G_DebugLineWithDuration(tracePeak, traceEnd, &colorGreen, 0, 7);
        return 0i64;
      }
      G_DebugLineWithDuration(tracePeak, traceEnd, &colorRed, 0, 7);
      v18 = traceEnd->v[1];
      center.v[0] = (float)((float)(traceEnd->v[0] - tracePeak->v[0]) * v23.fraction) + tracePeak->v[0];
      v19 = (float)(traceEnd->v[2] - tracePeak->v[2]) * v23.fraction;
      center.v[1] = (float)((float)(v18 - tracePeak->v[1]) * v23.fraction) + tracePeak->v[1];
      center.v[2] = v19 + tracePeak->v[2];
    }
    G_DebugSphere(&center, 1.0, &colorRed, 0, 7);
    return 0i64;
  }
  v11 = DVARINT_bot_DrawDebugSpecial;
  if ( !DVARINT_bot_DrawDebugSpecial && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebugSpecial") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v11);
  if ( v11->current.integer == 9 )
    goto LABEL_41;
  v12 = DVARINT_bot_DrawDebugSpecial;
  if ( !DVARINT_bot_DrawDebugSpecial && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebugSpecial") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v12);
  if ( v12->current.integer == 10 )
  {
LABEL_41:
    if ( Bot_ShouldDrawDebugForBot(botData) && initialCheck )
    {
      v13 = 350;
      if ( Dvar_GetInt_Internal_DebugName(DVARINT_bot_DrawDebugSpecial, "bot_DrawDebugSpecial") == 10 )
        v13 = 4000;
      v14 = v13 / 0x32;
      G_DebugLineWithDuration(traceStart, tracePeak, &colorGreen, 0, v14);
      G_DebugLineWithDuration(tracePeak, traceEnd, &colorGreen, 0, v14);
    }
  }
  return 1i64;
}

/*
==============
Bot_DrawDebug
==============
*/
void Bot_DrawDebug(bot_data_t *botData)
{
  __int128 v2; 
  __int128 v3; 
  __int128 v4; 
  __int128 v5; 
  __int128 v6; 
  __int128 v7; 
  __int128 v8; 
  unsigned int v10; 
  gentity_s *v11; 
  playerState_s *playerState; 
  gentity_s *ent; 
  AIBotInterface *m_pAI; 
  gentity_s *v15; 
  float v16; 
  float v17; 
  float v18; 
  const dvar_t *v19; 
  bitarray<224> *v20; 
  sentient_s *i; 
  vec4_t v22; 
  const dvar_t *v23; 
  const dvar_t *v24; 
  pathnode_t *v25; 
  gentity_s *v26; 
  float v27; 
  __int128 v28; 
  const dvar_t *v32; 
  double Angle; 
  const dvar_t *v34; 
  pathnode_t *v35; 
  __m128 v36; 
  double v37; 
  const dvar_t *v38; 
  gentity_s *v39; 
  bitarray<224> *v40; 
  sentient_s *v41; 
  const gentity_s *v43; 
  __int16 EntityIndex; 
  const SvClientMP *MpClient; 
  int IsClientConnected; 
  bitarray_base<bitarray<224> > *AllTeamFlags; 
  const SvClientMP *v48; 
  signed __int64 v49; 
  char *v50; 
  float v51; 
  float v52; 
  float v53; 
  float v54; 
  __int128 v56; 
  const gentity_s *v58; 
  const char *Name; 
  const dvar_t *v60; 
  const dvar_t *v61; 
  const dvar_t *v62; 
  const dvar_t *v63; 
  int CanSeeEnemy; 
  const vec4_t *v65; 
  const dvar_t *v66; 
  const dvar_t *v67; 
  const char *v68; 
  float v69; 
  const vec3_t *p_lookAtPoint; 
  gentity_s *v71; 
  vec4_t v72; 
  pathnode_t *node; 
  unsigned int *v74; 
  float radius; 
  float yaw; 
  const char *v80; 
  bot_scr_goal_t ScriptGoalType; 
  const char *v82; 
  PlayerHandIndex WeaponHandForViewWeapon; 
  const Weapon *ViewmodelWeapon; 
  const char *v85; 
  usercmd_s *lastUserCmd; 
  const char *v87; 
  const char *v88; 
  const char *v89; 
  unsigned int v90; 
  unsigned int v91; 
  const char *v92; 
  const char *v93; 
  bot_personality_t Personality; 
  __int64 v95; 
  __int64 duration; 
  __int64 v97; 
  const char *v98; 
  playerState_s *ps; 
  AIBotWrapper v100; 
  vec3_t xyz; 
  vec3_t center; 
  vec3_t vEyePosOut; 
  vec3_t currentOrigin; 
  vec3_t start; 
  vec3_t vEyeDir; 
  Bounds color; 
  vec3_t end; 
  bitarray<224> iTeamFlags; 
  vec4_t v110; 
  bitarray<224> v111; 
  char result[256]; 
  __int128 v113; 
  __int128 v114; 
  __int128 v115; 
  __int128 v116; 
  __int128 v117; 
  __int128 v118; 
  __int128 v119; 
  __int128 v120; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21756, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v10 = 0;
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
    v11 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
  else
    v11 = NULL;
  playerState = botData->botInfo.playerState;
  *(_QWORD *)currentOrigin.v = v11;
  ps = playerState;
  v98 = "<None>";
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21766, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21769, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  AICommonInterface::AICommonInterface(&v100.m_botInterface);
  v100.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v100.m_botAgentInterface);
  ent = botData->botInfo.ent;
  v100.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v100.m_pAI = NULL;
  AIBotWrapper::Setup(&v100, ent);
  m_pAI = v100.m_pAI;
  *(_QWORD *)center.v = v100.m_pAI;
  if ( !v100.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21771, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  if ( botData->botInfo.ent->health > 0 && Bot_ShouldDrawDebugForBot(botData) )
  {
    v15 = botData->botInfo.ent;
    v119 = v2;
    v110 = colorWhiteFaded;
    v16 = v15->r.currentOrigin.v[0];
    v117 = v4;
    xyz.v[0] = v16;
    v17 = v15->r.currentOrigin.v[1];
    v116 = v5;
    xyz.v[1] = v17;
    v18 = v15->r.currentOrigin.v[2];
    v115 = v6;
    v114 = v7;
    xyz.v[2] = v18 + 64.0;
    v113 = v8;
    if ( Bot_HasRemoteEyes(botData) )
    {
      v19 = DVARINT_bot_DrawDebug;
      if ( !DVARINT_bot_DrawDebug && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebug") )
        __debugbreak();
      Dvar_CheckFrontendServerThread(v19);
      if ( v19->current.integer == 9 )
      {
        v20 = (bitarray<224> *)(Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) ? Com_TeamsSP_GetAllTeamFlags() : Com_TeamsMP_GetAllTeamFlags());
        iTeamFlags = *v20;
        for ( i = Sentient_FirstSentient(&iTeamFlags); i; i = Sentient_NextSentient(i, &iTeamFlags) )
        {
          if ( Bot_IsCharacterActive(i->ent) && !AI_IsAlliedSentient(botData->botInfo.sentient, i) )
          {
            AICommonInterface::GetEyeDirection(m_pAI, &vEyeDir);
            Sentient_GetEyePosition(botData->botInfo.ent->sentient, &vEyePosOut);
            start.v[0] = (float)(5.0 * vEyeDir.v[0]) + vEyePosOut.v[0];
            start.v[1] = (float)(5.0 * vEyeDir.v[1]) + vEyePosOut.v[1];
            start.v[2] = (float)((float)(5.0 * vEyeDir.v[2]) + vEyePosOut.v[2]) - 0.25;
            if ( Bot_RecentSeeSentient(botData, i, 1000) )
              v22 = colorRed;
            else
              v22 = colorOrange;
            *(vec4_t *)color.midPoint.v = v22;
            Sentient_GetHeadPosition(i, &end);
            G_DebugLine(&start, &end, (const vec4_t *)&color, 1);
          }
        }
      }
    }
    v23 = DVARINT_bot_DrawDebug;
    if ( !DVARINT_bot_DrawDebug && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebug") )
      __debugbreak();
    v120 = _XMM6;
    Dvar_CheckFrontendServerThread(v23);
    if ( v23->current.integer == 6 )
      goto LABEL_188;
    v24 = DVARINT_bot_DrawDebug;
    if ( !DVARINT_bot_DrawDebug && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebug") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v24);
    if ( v24->current.integer == 7 )
    {
LABEL_188:
      if ( !Bot_HasScriptGoal(botData) || Bot_ShouldDelayScriptGoalForAISearch(botData) )
      {
        v25 = Path_ConvertIndexToNode(botData->botInfo.currentAISearch.currentNodePicked);
        pathnode_t::GetPos(v25, &vEyeDir);
        v26 = botData->botInfo.ent;
        *(_OWORD *)color.midPoint.v = _xmm;
        color.halfSize.v[1] = FLOAT_15_0;
        color.halfSize.v[2] = FLOAT_46_0;
        *(_QWORD *)start.v = *(_QWORD *)v26->r.currentOrigin.v;
        v27 = v26->r.currentOrigin.v[2];
        vEyePosOut.v[0] = vEyeDir.v[0];
        vEyePosOut.v[2] = vEyeDir.v[2] + 30.0;
        vEyePosOut.v[1] = vEyeDir.v[1];
        start.v[2] = v27 + 30.0;
        if ( botData == Bot_GetSpectatedBotData(LOCAL_CLIENT_0) )
        {
          v28 = LODWORD(vEyePosOut.v[1]);
          *(float *)&v28 = vEyePosOut.v[1] - start.v[1];
          _XMM6 = v28;
          *(float *)&v28 = fsqrt((float)((float)(*(float *)&v28 * *(float *)&v28) + (float)((float)(vEyePosOut.v[0] - start.v[0]) * (float)(vEyePosOut.v[0] - start.v[0]))) + (float)((float)(vEyePosOut.v[2] - start.v[2]) * (float)(vEyePosOut.v[2] - start.v[2])));
          _XMM1 = v28;
          __asm
          {
            vcmpless xmm0, xmm1, cs:__real@80000000
            vblendvps xmm0, xmm1, xmm14, xmm0
          }
          start.v[0] = (float)((float)((float)(vEyePosOut.v[0] - start.v[0]) * (float)(1.0 / *(float *)&_XMM0)) * 24.0) + start.v[0];
          start.v[1] = (float)((float)(*(float *)&_XMM6 * (float)(1.0 / *(float *)&_XMM0)) * 24.0) + start.v[1];
          v118 = v3;
          start.v[2] = (float)((float)((float)(vEyePosOut.v[2] - start.v[2]) * (float)(1.0 / *(float *)&_XMM0)) * 24.0) + start.v[2];
        }
        G_DebugLine(&start, &vEyePosOut, &colorBlue, 1);
        v32 = DVARINT_bot_DrawDebug;
        if ( !DVARINT_bot_DrawDebug && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebug") )
          __debugbreak();
        Dvar_CheckFrontendServerThread(v32);
        if ( v32->current.integer == 7 )
        {
          Angle = pathnode_t::GetAngle(v25);
          G_DebugBox(&vEyeDir, &color, *(float *)&Angle, &colorBlue, 1, 0);
        }
        v34 = DVARINT_bot_DrawDebug;
        if ( !DVARINT_bot_DrawDebug && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebug") )
          __debugbreak();
        Dvar_CheckFrontendServerThread(v34);
        if ( v34->current.integer == 6 && botData->botInfo.currentAISearch.currentNodeCount )
        {
          _XMM6 = LODWORD(FLOAT_0_001);
          do
          {
            v35 = Path_ConvertIndexToNode(botData->botInfo.currentAISearch.nodes[v10].nodeIndex);
            pathnode_t::GetPos(v35, &end);
            v36 = 0i64;
            v36.m128_f32[0] = (float)botData->botInfo.currentAISearch.nodes[v10].priority * 0.001;
            *(__m128 *)color.midPoint.v = _mm128_add_ps(_mm128_mul_ps(_mm128_sub_ps((__m128)colorGreen, (__m128)colorRed), _mm_shuffle_ps(v36, v36, 0)), (__m128)colorRed);
            v37 = pathnode_t::GetAngle(v35);
            G_DebugBox(&end, &nodeBox_0, *(float *)&v37, (const vec4_t *)&color, 1, 0);
            ++v10;
          }
          while ( v10 < botData->botInfo.currentAISearch.currentNodeCount );
          m_pAI = *(AIBotInterface **)center.v;
        }
      }
    }
    v38 = DVARINT_bot_DrawDebug;
    if ( !DVARINT_bot_DrawDebug && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebug") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v38);
    if ( v38->current.integer == 4 )
    {
      v39 = botData->botInfo.ent;
      *(float *)&iTeamFlags.array[4] = FLOAT_15_0;
      *(float *)&iTeamFlags.array[5] = FLOAT_46_0;
      *(_OWORD *)iTeamFlags.array = _xmm;
      Sentient_GetEyePosition(v39->sentient, &end);
      v40 = (bitarray<224> *)(Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) ? Com_TeamsSP_GetAllTeamFlags() : Com_TeamsMP_GetAllTeamFlags());
      v111 = *v40;
      v41 = Sentient_FirstSentient(&v111);
      if ( v41 )
      {
        __asm { vxorpd  xmm6, xmm6, xmm6 }
        while ( 1 )
        {
          v43 = v41->ent;
          if ( v41->ent )
          {
            EntityIndex = G_GetEntityIndex(v41->ent);
            if ( G_IsEntityInUse(EntityIndex) )
            {
              if ( v43->sentient )
              {
                if ( v43->client )
                {
                  MpClient = SV_Client_GetMpClient(v43->s.number);
                  IsClientConnected = Bot_IsClientConnected(MpClient);
                }
                else
                {
                  if ( !v43->agent )
                    goto LABEL_76;
                  IsClientConnected = v43->s.eType == ET_AGENT;
                }
                if ( IsClientConnected )
                {
LABEL_76:
                  if ( v43->s.eType != ET_INVISIBLE )
                  {
                    AllTeamFlags = (bitarray_base<bitarray<224> > *)Com_TeamsMP_GetAllTeamFlags();
                    if ( bitarray_base<bitarray<224>>::testBit(AllTeamFlags, v43->sentient->eTeam) )
                    {
                      if ( !v43->client || (v48 = SV_Client_GetMpClient(v43->s.number), Bot_IsClientActive(v48)) )
                      {
                        if ( !AI_IsAlliedSentient(botData->botInfo.ent->sentient, v41) )
                        {
                          v49 = 60 * (v41 - level.sentients);
                          v50 = (char *)&botData->scriptedAgentInfo + v49 + 11644;
                          if ( (bot_data_t *)((char *)botData + v49) == (bot_data_t *)-11652i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21887, ASSERT_TYPE_ASSERT, "( botSentientInfo )", (const char *)&queryFormat, "botSentientInfo") )
                            __debugbreak();
                          if ( !Bot_SightThresholdExpiredOrNotStarted((bot_sight_threshold_t *)(v50 + 8)) )
                          {
                            v51 = *((float *)v50 + 5) - v41->ent->r.currentOrigin.v[0];
                            v52 = *((float *)v50 + 6) - v41->ent->r.currentOrigin.v[1];
                            v53 = *((float *)v50 + 7) - v41->ent->r.currentOrigin.v[2];
                            if ( (float)((float)((float)(v52 * v52) + (float)(v51 * v51)) + (float)(v53 * v53)) <= 250000.0 )
                            {
                              v54 = *((float *)v50 + 4);
                              if ( v54 <= 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21894, ASSERT_TYPE_ASSERT, "( botSentientInfo->sightThreshold.nextSightThreshold ) > ( 0.0f )", "botSentientInfo->sightThreshold.nextSightThreshold > 0.0f\n\t%g, %g", v54, *(double *)&_XMM6) )
                                __debugbreak();
                              v56 = *((unsigned int *)v50 + 3);
                              *(float *)&v56 = *((float *)v50 + 3) / *((float *)v50 + 4);
                              _XMM1 = v56;
                              __asm { vminss  xmm1, xmm1, xmm14 }
                              *(__m128 *)color.midPoint.v = _mm128_add_ps(_mm128_mul_ps(_mm128_sub_ps((__m128)colorRed, (__m128)colorGreen), _mm_shuffle_ps(_XMM1, _XMM1, 0)), (__m128)colorGreen);
                              *(_QWORD *)vEyeDir.v = *(_QWORD *)(v50 + 20);
                              vEyeDir.v[2] = *((float *)v50 + 7) + 60.0;
                              G_DebugLine(&end, &vEyeDir, (const vec4_t *)&color, 1);
                              G_DebugBox((const vec3_t *)(v50 + 20), (const Bounds *)&iTeamFlags, 0.0, (const vec4_t *)&color, 1, 0);
                              v58 = v41->ent;
                              *(_QWORD *)vEyePosOut.v = *(_QWORD *)v41->ent->r.currentOrigin.v;
                              vEyePosOut.v[2] = v58->r.currentOrigin.v[2] + 60.0;
                              G_DebugLine(&vEyeDir, &vEyePosOut, (const vec4_t *)&color, 1);
                              G_DebugBox(&v41->ent->r.currentOrigin, (const Bounds *)&iTeamFlags, 0.0, (const vec4_t *)&color, 1, 0);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          v41 = Sentient_NextSentient(v41, &v111);
          if ( !v41 )
          {
            v11 = *(gentity_s **)currentOrigin.v;
            m_pAI = *(AIBotInterface **)center.v;
            break;
          }
        }
      }
    }
    if ( v11 )
    {
      if ( v11->client )
        Name = SV_ClientMP_GetName(v11->s.number);
      else
        Name = SL_ConvertToString(v11->classname);
      v110 = colorGreen;
      v98 = Name;
    }
    v60 = DVARINT_bot_DrawDebug;
    if ( !DVARINT_bot_DrawDebug && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebug") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v60);
    if ( v60->current.integer == 2 )
      goto LABEL_109;
    v61 = DVARINT_bot_DrawDebug;
    if ( !DVARINT_bot_DrawDebug && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebug") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v61);
    if ( v61->current.integer == 3 )
      goto LABEL_109;
    v62 = DVARINT_bot_DrawDebug;
    if ( !DVARINT_bot_DrawDebug && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebug") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v62);
    if ( v62->current.integer == 5 )
    {
LABEL_109:
      AICommonInterface::GetEyeDirection(m_pAI, &start);
      Sentient_GetEyePosition(botData->botInfo.ent->sentient, &center);
      if ( Bot_IsRemoteEyesVehicle(botData) && Bot_GetRemoteVehicleType(botData) == BOT_VEHICLE_3RD_PERSON )
      {
        currentOrigin = center;
      }
      else
      {
        currentOrigin.v[0] = (float)(5.0 * start.v[0]) + center.v[0];
        currentOrigin.v[1] = (float)(5.0 * start.v[1]) + center.v[1];
        currentOrigin.v[2] = (float)((float)(5.0 * start.v[2]) + center.v[2]) - 0.25;
      }
      v63 = DVARINT_bot_DrawDebug;
      if ( !DVARINT_bot_DrawDebug && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebug") )
        __debugbreak();
      Dvar_CheckFrontendServerThread(v63);
      if ( v63->current.integer == 2 )
      {
        CanSeeEnemy = Bot_CanSeeEnemy(botData);
        if ( v11 )
        {
          if ( !v11->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21952, ASSERT_TYPE_ASSERT, "( pEnemy->sentient )", (const char *)&queryFormat, "pEnemy->sentient") )
            __debugbreak();
          Sentient_GetHeadPosition(v11->sentient, &vEyePosOut);
          v65 = &colorRed;
          if ( !CanSeeEnemy )
            v65 = &colorOrange;
          G_DebugLine(&currentOrigin, &vEyePosOut, v65, 1);
        }
      }
      v66 = DVARINT_bot_DrawDebug;
      if ( !DVARINT_bot_DrawDebug && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebug") )
        __debugbreak();
      Dvar_CheckFrontendServerThread(v66);
      if ( v66->current.integer == 2 )
        goto LABEL_132;
      v67 = DVARINT_bot_DrawDebug;
      if ( !DVARINT_bot_DrawDebug && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebug") )
        __debugbreak();
      Dvar_CheckFrontendServerThread(v67);
      if ( v67->current.integer == 5 )
      {
LABEL_132:
        v68 = j_va("ENEMY: %s", v98);
        SV_BotDebugString(botData, &xyz, &v110, 0.64999998, v68, 0);
        xyz.v[2] = xyz.v[2] + 10.0;
      }
      if ( Dvar_GetInt_Internal_DebugName(DVARINT_bot_DrawDebug, "bot_DrawDebug") == 3 )
      {
        if ( Bot_HasRemoteEyes(botData) )
          v69 = FLOAT_150_0;
        else
          v69 = FLOAT_50_0;
        vEyePosOut.v[0] = (float)(v69 * start.v[0]) + center.v[0];
        vEyePosOut.v[1] = (float)(v69 * start.v[1]) + center.v[1];
        vEyePosOut.v[2] = (float)(v69 * start.v[2]) + center.v[2];
        G_DebugLine(&currentOrigin, &vEyePosOut, &colorBlue, 1);
        if ( (botData->botInfo.flags & 0x200) != 0 )
        {
          G_DebugLine(&currentOrigin, &botData->botInfo.enemyTrack.awarePoint, &colorRed, 1);
          SV_BotDebugString(botData, &botData->botInfo.enemyTrack.awarePoint, &colorRed, 1.0, "aware", 0);
        }
        if ( Bot_HasRemoteEyes(botData) )
          G_DebugSphere(&center, 5.0, &colorBlue, 1, 0);
        if ( botData->botInfo.lookAtTime >= level.time )
        {
          p_lookAtPoint = &botData->botInfo.lookAtPoint;
          if ( (botData->botDebugData.flags & 2) != 0 )
          {
            G_DebugLine(&currentOrigin, p_lookAtPoint, &colorCyan, 0);
            SV_BotDebugString(botData, &center, &colorCyan, 1.0, BOT_STR_TBL_LOOK_TYPE[botData->botInfo.lookAtType], 0);
            SV_BotDebugString(NULL, &botData->botInfo.lookAtPoint, &colorCyan, 1.0, BOT_STR_TBL_LOOK_TYPE[botData->botInfo.lookAtType], 0);
          }
          else
          {
            G_DebugLine(&currentOrigin, p_lookAtPoint, &colorDkCyan, 0);
            SV_BotDebugString(botData, &center, &colorCyan, 1.0, BOT_STR_TBL_LOOK_TYPE[botData->botInfo.lookAtType], 0);
            SV_BotDebugString(NULL, &botData->botInfo.lookAtPoint, &colorDkCyan, 1.0, BOT_STR_TBL_LOOK_TYPE[botData->botInfo.lookAtType], 0);
          }
        }
      }
    }
    if ( Dvar_GetInt_Internal_DebugName(DVARINT_bot_DrawDebug, "bot_DrawDebug") != 1 && Dvar_GetInt_Internal_DebugName(DVARINT_bot_DrawDebug, "bot_DrawDebug") != 2 && Dvar_GetInt_Internal_DebugName(DVARINT_bot_DrawDebug, "bot_DrawDebug") != 5 )
      goto LABEL_178;
    if ( Bot_GetScriptGoalType(botData) )
    {
      v71 = botData->botInfo.ent;
      vEyePosOut.v[0] = 0.0;
      vEyePosOut.v[1] = 0.0;
      vEyePosOut.v[2] = 0.0;
      currentOrigin = v71->r.currentOrigin;
      Bot_GetScriptGoal(botData, &end);
      center = end;
      if ( Bot_PathExists(&botData->botInfo) )
      {
        if ( Bot_ActiveGoalIsScriptGoal(botData) )
          v72 = colorWhite;
        else
          v72 = colorMdGrey;
      }
      else
      {
        v72 = colorRed;
      }
      *(vec4_t *)color.midPoint.v = v72;
      G_DebugLine(&currentOrigin, &center, (const vec4_t *)&color, 0);
      if ( (LOBYTE(botData->scriptedAgentInfo.blackboard.m_ShootParams.m_Pos.v[0]) & 4) != 0 )
        YawVectors(botData->botInfo.scriptGoal.yaw, &vEyePosOut, NULL);
      node = botData->botInfo.scriptGoal.node;
      *(_OWORD *)iTeamFlags.array = *(_OWORD *)color.midPoint.v;
      if ( node )
      {
        v74 = (unsigned int *)Path_DebugNodeColor(node);
        iTeamFlags.array[0] = *v74;
        iTeamFlags.array[1] = v74[1];
        iTeamFlags.array[2] = v74[2];
      }
      radius = botData->botInfo.scriptGoal.radius;
      if ( radius == 0.0 )
      {
        if ( Bot_PathExists(&botData->botInfo) )
          radius = botData->botInfo.activeGoal.radius;
        else
          radius = FLOAT_16_0;
      }
      G_DebugCircle(&center, radius, (const vec4_t *)&iTeamFlags, 0, 1, 1);
      if ( Dvar_GetInt_Internal_DebugName(DVARINT_bot_DrawDebug, "bot_DrawDebug") == 5 && botData->botInfo.scriptGoal.type == BOT_SCR_GOAL_OBJECTIVE )
      {
        _XMM2 = LODWORD(botData->botInfo.scriptGoal.objectiveRadius);
        __asm
        {
          vcmpless xmm1, xmm2, xmm9
          vblendvps xmm1, xmm2, xmm0, xmm1; radius
        }
        G_DebugCircle(&center, *(float *)&_XMM1, &colorGreen, 0, 1, 1);
      }
      if ( (float)((float)(vEyePosOut.v[1] * vEyePosOut.v[1]) + (float)(vEyePosOut.v[0] * vEyePosOut.v[0])) > 0.0099999998 )
      {
        currentOrigin.v[0] = (float)(radius * vEyePosOut.v[0]) + center.v[0];
        currentOrigin.v[2] = center.v[2];
        currentOrigin.v[1] = (float)(radius * vEyePosOut.v[1]) + center.v[1];
        G_DebugLine(&center, &currentOrigin, (const vec4_t *)&iTeamFlags, 0);
      }
      if ( (LOBYTE(botData->scriptedAgentInfo.blackboard.m_ShootParams.m_Pos.v[0]) & 4) != 0 )
      {
        *(double *)currentOrigin.v = *(double *)center.v;
        yaw = botData->botInfo.scriptGoal.yaw;
        currentOrigin.v[2] = center.v[2];
        vEyeDir.v[1] = yaw;
        vEyeDir.v[0] = 0.0;
        vEyeDir.v[2] = 0.0;
        AngleVectors(&vEyeDir, &start, NULL, NULL);
        currentOrigin.v[0] = (float)(radius * start.v[0]) + center.v[0];
        currentOrigin.v[2] = (float)(radius * start.v[2]) + center.v[2];
        currentOrigin.v[1] = (float)(radius * start.v[1]) + center.v[1];
        G_DebugLine(&currentOrigin, &center, (const vec4_t *)&color, 0);
      }
      if ( Dvar_GetInt_Internal_DebugName(DVARINT_bot_DrawDebug, "bot_DrawDebug") != 2 && Dvar_GetInt_Internal_DebugName(DVARINT_bot_DrawDebug, "bot_DrawDebug") != 5 )
        goto LABEL_178;
      v80 = "PATH: <Script Goal and Yaw>";
      if ( (LOBYTE(botData->scriptedAgentInfo.blackboard.m_ShootParams.m_Pos.v[0]) & 4) == 0 )
        v80 = "PATH: <Script Goal>";
      SV_BotDebugString(botData, &xyz, &colorWhite, 0.64999998, v80, 0);
      xyz.v[2] = xyz.v[2] + 10.0;
      ScriptGoalType = Bot_GetScriptGoalType(botData);
      v82 = j_va("GOAL TYPE: %s", BOT_STR_TBL_GOAL_TYPE[ScriptGoalType]);
    }
    else
    {
      if ( Dvar_GetInt_Internal_DebugName(DVARINT_bot_DrawDebug, "bot_DrawDebug") == 1 )
      {
LABEL_178:
        if ( Dvar_GetInt_Internal_DebugName(DVARINT_bot_DrawDebug, "bot_DrawDebug") == 5 )
        {
          WeaponHandForViewWeapon = Bot_Weap_GetWeaponHandForViewWeapon(ps);
          ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(ps);
          v85 = j_va("FLAGS: 0x%04x BUTTONS: 0x%016zx", (unsigned int)botData->botInfo.flags, botData->botInfo.lastUserCmd->buttons);
          SV_BotDebugString(botData, &xyz, &colorWhite, 0.64999998, v85, 0);
          lastUserCmd = botData->botInfo.lastUserCmd;
          xyz.v[2] = xyz.v[2] + 10.0;
          v87 = j_va("MOVE: ( %i, %i )", (unsigned int)lastUserCmd->forwardmove, (unsigned int)lastUserCmd->rightmove);
          SV_BotDebugString(botData, &xyz, &colorWhite, 0.64999998, v87, 0);
          xyz.v[2] = xyz.v[2] + 10.0;
          Bot_Weap_Name(ViewmodelWeapon, result, 256);
          v88 = j_va("WEAPON: %s", result);
          SV_BotDebugString(botData, &xyz, &colorWhite, 0.64999998, v88, 0);
          xyz.v[2] = xyz.v[2] + 10.0;
          v89 = j_va("WEAPON FLAGS: 0x%08x 0x%08x", ps->weapCommon.weapFlags.m_flags[0], ps->weapCommon.weapFlags.m_flags[1]);
          SV_BotDebugString(botData, &xyz, &colorWhite, 0.64999998, v89, 0);
          xyz.v[2] = xyz.v[2] + 10.0;
          v90 = Bot_Weap_AmmoNotInClip(ps, ViewmodelWeapon);
          v91 = Bot_Weap_AmmoInClip(ps, ViewmodelWeapon, WeaponHandForViewWeapon);
          v92 = j_va("HEALTH: %i AMMO: %i/%i", (unsigned int)botData->botInfo.ent->health, v91, v90);
          SV_BotDebugString(botData, &xyz, &colorWhite, 0.64999998, v92, 0);
          xyz.v[2] = xyz.v[2] + 10.0;
        }
        if ( Dvar_GetInt_Internal_DebugName(DVARINT_bot_DrawDebug, "bot_DrawDebug") == 2 || Dvar_GetInt_Internal_DebugName(DVARINT_bot_DrawDebug, "bot_DrawDebug") == 5 )
        {
          v93 = j_va("TRAVERSAL: 0x%x", (unsigned int)botData->botInfo.traversal);
          SV_BotDebugString(botData, &xyz, &colorWhite, 0.64999998, v93, 0);
          xyz.v[2] = xyz.v[2] + 10.0;
          Personality = Bot_GetPersonality(botData);
          v95 = Personality;
          if ( (unsigned int)Personality >= BOT_PERSONALITY_DEFAULT )
          {
            LODWORD(v97) = 3;
            LODWORD(duration) = Personality;
            if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20782, ASSERT_TYPE_ASSERT, "(unsigned)( type ) < (unsigned)( BOT_PERSONALITY_DEFAULT )", "type doesn't index BOT_PERSONALITY_DEFAULT\n\t%i not in [0, %i)", duration, v97) )
              __debugbreak();
          }
          SV_BotDebugString(botData, &xyz, &colorWhite, 0.64999998, BOT_STR_TBL_PERSONALITY[v95], 0);
        }
        return;
      }
      v82 = "PATH: <THREAT>";
      if ( !v11 )
        v82 = "PATH: <NONE>";
    }
    SV_BotDebugString(botData, &xyz, &colorWhite, 0.64999998, v82, 0);
    xyz.v[2] = xyz.v[2] + 10.0;
    goto LABEL_178;
  }
}

/*
==============
Bot_DrawDebugErrorLocation
==============
*/
void Bot_DrawDebugErrorLocation(const bot_data_t *botData, const bot_error_loc_t *errorLoc)
{
  float v4; 
  float v5; 
  float yaw; 
  bool v7; 
  const dvar_t *v8; 
  pathnode_t *v9; 
  pathnode_t *v10; 
  int traversal; 
  const char *v12; 
  __int64 right; 
  __int64 v14; 
  const char *v15; 
  __int64 jumpCount; 
  const char *v17; 
  int v18; 
  const vec4_t *v19; 
  vec3_t *p_pos; 
  vec3_t *v21; 
  char type; 
  bool v23; 
  const char *v24; 
  const dvar_t *v25; 
  float v26; 
  float v27; 
  __int128 v28; 
  float v29; 
  float v33; 
  float v34; 
  float v35; 
  float v36; 
  float v37; 
  float v38; 
  char *string; 
  __int64 v40; 
  float v41; 
  float v42; 
  float v43; 
  vec3_t xyz; 
  vec3_t point; 
  vec3_t forward; 
  vec3_t v47; 
  vec3_t pos; 
  vec3_t v49; 
  vec3_t start; 
  vec3_t end; 

  if ( !errorLoc && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2770, ASSERT_TYPE_ASSERT, "( errorLoc )", (const char *)&queryFormat, "errorLoc") )
    __debugbreak();
  v4 = errorLoc->origin.v[0];
  v5 = errorLoc->origin.v[1];
  xyz.v[2] = errorLoc->origin.v[2];
  start.v[2] = xyz.v[2] + 50.0;
  yaw = errorLoc->yaw;
  xyz.v[0] = v4;
  xyz.v[1] = v5;
  start.v[0] = v4;
  start.v[1] = v5;
  YawVectors(yaw, &forward, NULL);
  v7 = errorLoc->type == 0;
  forward.v[2] = 0.0;
  end.v[0] = (float)(forward.v[0] * 30.0) + start.v[0];
  end.v[1] = (float)(forward.v[1] * 30.0) + start.v[1];
  end.v[2] = start.v[2];
  if ( v7 )
  {
    v8 = DVARINT_bot_DrawBrokenTraversals;
    if ( !DVARINT_bot_DrawBrokenTraversals && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawBrokenTraversals") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v8);
    if ( v8->current.integer > 0 )
    {
      if ( Path_NodeValid(errorLoc->nodeStart) )
        v9 = Path_ConvertIndexToNode(errorLoc->nodeStart);
      else
        v9 = NULL;
      if ( Path_NodeValid(errorLoc->nodeEnd) )
        v10 = Path_ConvertIndexToNode(errorLoc->nodeEnd);
      else
        v10 = NULL;
      if ( !v9 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2783, ASSERT_TYPE_ASSERT, "( negotiationStartNode )", (const char *)&queryFormat, "negotiationStartNode") )
        __debugbreak();
      if ( !v10 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2784, ASSERT_TYPE_ASSERT, "( negotiationEndNode )", (const char *)&queryFormat, "negotiationEndNode") )
        __debugbreak();
      G_DebugBox(&errorLoc->origin, &actorBox, errorLoc->yaw, &colorRed, 0, 1);
      G_DebugLineWithDuration(&start, &end, &colorRed, 0, 1);
      G_Main_AddDebugStringWithDuration(&xyz, &colorRed, 1.0, "STUCK TRAVERSAL", 1);
      traversal = errorLoc->traversal;
      xyz.v[2] = xyz.v[2] + 11.0;
      if ( (traversal & 1) != 0 )
      {
        v12 = "LADDER";
      }
      else if ( (traversal & 2) != 0 )
      {
        v12 = "JUMP";
      }
      else if ( (traversal & 4) != 0 )
      {
        v12 = "JUMP_ACROSS";
      }
      else if ( (traversal & 8) != 0 )
      {
        v12 = "JUMP_STANDING";
      }
      else
      {
        v12 = "MOVE_FWD";
        if ( (traversal & 0x10) == 0 )
          v12 = "???";
      }
      G_Main_AddDebugStringWithDuration(&xyz, &colorRed, 1.0, v12, 1);
      right = (unsigned int)errorLoc->right;
      v14 = (unsigned int)errorLoc->forward;
      xyz.v[2] = xyz.v[2] + 11.0;
      v15 = j_va("fwd: %i right: %i", v14, right);
      G_Main_AddDebugStringWithDuration(&xyz, &colorRed, 1.0, v15, 1);
      jumpCount = (unsigned int)errorLoc->jumpCount;
      xyz.v[2] = xyz.v[2] + 11.0;
      v17 = j_va("jump attempts: %i", jumpCount);
      G_Main_AddDebugStringWithDuration(&xyz, &colorRed, 1.0, v17, 1);
      pathnode_t::GetPos(v9, &pos);
      pathnode_t::GetPos(v10, &v49);
      G_DebugLineWithDuration(&pos, &errorLoc->origin, &colorGreen, 0, 1);
      G_DebugLineWithDuration(&v49, &errorLoc->origin, &colorBlue, 0, 1);
      v18 = 0;
      v19 = &colorCyan;
      p_pos = &pos;
      v21 = &v49;
      goto LABEL_51;
    }
  }
  type = errorLoc->type;
  if ( type == 1 )
  {
    G_DebugBox(&errorLoc->origin, &actorBox, errorLoc->yaw, &colorRed, 0, 1);
    G_DebugLineWithDuration(&start, &end, &colorRed, 0, 1);
    v23 = SV_BotRequirePathnodes(botData);
    v24 = "NO NODE";
    if ( !v23 )
      v24 = "NO TAC POINT";
    G_Main_AddDebugStringWithDuration(&xyz, &colorRed, 1.0, v24, 1);
  }
  else if ( type == 2 )
  {
    v25 = DVARINT_bot_DrawSeeThrough;
    if ( !DVARINT_bot_DrawSeeThrough && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawSeeThrough") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v25);
    if ( v25->current.integer )
    {
      G_DebugLineWithDuration(&errorLoc->origin, &errorLoc->origin2, &colorRed, 1, 1);
      v26 = errorLoc->origin2.v[0] - errorLoc->origin.v[0];
      v28 = LODWORD(errorLoc->origin2.v[1]);
      v27 = errorLoc->origin2.v[1] - errorLoc->origin.v[1];
      v29 = errorLoc->origin2.v[2] - errorLoc->origin.v[2];
      *(float *)&v28 = fsqrt((float)((float)(v27 * v27) + (float)(v26 * v26)) + (float)(v29 * v29));
      _XMM7 = v28;
      __asm
      {
        vcmpless xmm0, xmm7, cs:__real@80000000
        vblendvps xmm0, xmm7, xmm1, xmm0
      }
      v33 = (float)(1.0 / *(float *)&_XMM0) * v26;
      v34 = (float)(1.0 / *(float *)&_XMM0) * v29;
      v35 = (float)(1.0 / *(float *)&_XMM0) * v27;
      *(float *)&_XMM0 = (float)(v35 * 15.0) + errorLoc->origin.v[1];
      point.v[0] = (float)(v33 * 15.0) + errorLoc->origin.v[0];
      point.v[2] = (float)(v34 * 15.0) + errorLoc->origin.v[2];
      point.v[1] = *(float *)&_XMM0;
      G_DebugStarWithSize(&point, &colorRed, 0.25);
      if ( *(float *)&_XMM7 > 30.0 )
      {
        v36 = errorLoc->origin2.v[1];
        point.v[0] = errorLoc->origin2.v[0] - (float)(v33 * 15.0);
        v37 = v36 - (float)(v35 * 15.0);
        v38 = errorLoc->origin2.v[2];
        point.v[1] = v37;
        point.v[2] = v38 - (float)(v34 * 15.0);
        G_DebugStarWithSize(&point, &colorRed, 0.25);
      }
      string = errorLoc->string;
      v40 = -1i64;
      do
        ++v40;
      while ( string[v40] );
      if ( (_DWORD)v40 )
      {
        G_Main_AddDebugStringWithDuration(&xyz, &colorRed, 0.40000001, string, 1);
        xyz.v[2] = xyz.v[2] + 10.0;
      }
      G_Main_AddDebugStringWithDuration(&xyz, &colorRed, 0.60000002, "SEE THRU", 1);
      xyz.v[2] = xyz.v[2] + 11.0;
      if ( Dvar_GetInt_Internal_DebugName(DVARINT_bot_DrawSeeThrough, "bot_DrawSeeThrough") == 4 )
        Bot_SeeThruBlockedByAllSurroundingGeo(&errorLoc->origin, &errorLoc->origin2, 2047, 0, 1);
      if ( errorLoc->usingOrigin3 )
      {
        v41 = errorLoc->origin2.v[1] + errorLoc->origin.v[1];
        v42 = errorLoc->origin2.v[2];
        v47.v[0] = (float)(errorLoc->origin2.v[0] + errorLoc->origin.v[0]) * 0.5;
        v43 = v42 + errorLoc->origin.v[2];
        v47.v[1] = v41 * 0.5;
        v47.v[2] = v43 * 0.5;
        p_pos = &errorLoc->origin3;
        v18 = 1;
        v19 = &colorBlue;
        v21 = &v47;
LABEL_51:
        G_DebugLineWithDuration(v21, p_pos, v19, v18, 1);
      }
    }
  }
}

/*
==============
Bot_DrawDebugErrorLocations
==============
*/
void Bot_DrawDebugErrorLocations(const bot_data_t *botData)
{
  int i; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3069, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  for ( i = 0; i < botData->botDebugData.errorLocCount; ++i )
    Bot_DrawDebugErrorLocation(botData, &botData->botDebugData.errorLocs[i]);
}

/*
==============
Bot_DrawDebugFireWait
==============
*/
void Bot_DrawDebugFireWait(const bot_info_t *botInfo, float lookOffCos, float fireWaitArcCos)
{
  const bot_data_t *EntityData; 
  unsigned int v5; 
  playerState_s *PlayerState; 
  __int64 v7; 
  SvClient *CommonClient; 
  float v9; 
  float v10; 
  float v11; 
  float v12; 
  float v13; 
  float v14; 
  float v15; 
  const vec4_t *v16; 
  vec3_t *p_vEyePosOut; 
  vec3_t *p_start; 
  __int64 v19; 
  vec3_t vEyePosOut; 
  vec3_t start; 
  vec3_t end; 
  vec3_t forward; 
  vec3_t right; 

  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19798, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  EntityData = Bot_GetEntityData(botInfo->ent);
  if ( Bot_ShouldDrawDebugForBot(EntityData) )
  {
    *(float *)&v19 = acosf_0(fireWaitArcCos);
    v5 = 0;
    *((float *)&v19 + 1) = acosf_0(lookOffCos);
    if ( (int)SvClient::ms_clientCount > 0 )
    {
      while ( SvClient::GetCommonClient(v5)->state != CS_ACTIVE || SV_BotIsBot(v5) )
      {
LABEL_27:
        if ( (int)++v5 >= (int)SvClient::ms_clientCount )
          return;
      }
      PlayerState = G_MainMP_GetPlayerState(v5);
      if ( !PlayerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19811, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps", v19) )
        __debugbreak();
      AngleVectors(&PlayerState->viewangles, &forward, &right, NULL);
      v7 = 0i64;
      while ( 1 )
      {
        if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
          __debugbreak();
        CommonClient = SvClient::GetCommonClient(v5);
        v9 = tanf_0(*((float *)&v19 + v7)) * 100.0;
        if ( !CommonClient->gentity && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19820, ASSERT_TYPE_ASSERT, "( cl->gentity )", (const char *)&queryFormat, "cl->gentity") )
          __debugbreak();
        if ( !CommonClient->gentity->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19821, ASSERT_TYPE_ASSERT, "( cl->gentity->sentient )", (const char *)&queryFormat, "cl->gentity->sentient") )
          __debugbreak();
        Sentient_GetEyePosition(CommonClient->gentity->sentient, &vEyePosOut);
        v10 = vEyePosOut.v[2] + 1.0;
        v11 = (float)(100.0 * forward.v[1]) + vEyePosOut.v[1];
        v12 = (float)(100.0 * forward.v[0]) + vEyePosOut.v[0];
        vEyePosOut.v[1] = (float)(10.0 * forward.v[1]) + vEyePosOut.v[1];
        vEyePosOut.v[0] = (float)(10.0 * forward.v[0]) + vEyePosOut.v[0];
        v13 = (float)(right.v[0] * v9) + v12;
        v14 = (float)(right.v[1] * v9) + v11;
        vEyePosOut.v[2] = (float)((float)(10.0 * forward.v[2]) + (float)(vEyePosOut.v[2] + 1.0)) - 2.0;
        v15 = (float)((float)(100.0 * forward.v[2]) + v10) + (float)(right.v[2] * v9);
        start.v[2] = v15;
        start.v[0] = v13;
        start.v[1] = v14;
        if ( !v7 )
          break;
        if ( v7 == 1 )
        {
          v16 = &colorBlue;
          p_vEyePosOut = &vEyePosOut;
          p_start = &start;
          goto LABEL_25;
        }
LABEL_26:
        if ( ++v7 >= 2 )
          goto LABEL_27;
      }
      end.v[0] = (float)(right.v[0] * (float)(v9 * -2.0)) + v13;
      end.v[2] = (float)(right.v[2] * (float)(v9 * -2.0)) + v15;
      end.v[1] = (float)(right.v[1] * (float)(v9 * -2.0)) + v14;
      G_DebugLine(&start, &end, &colorRed, 0);
      G_DebugLine(&start, &vEyePosOut, &colorRed, 0);
      v16 = &colorRed;
      p_vEyePosOut = &end;
      p_start = &vEyePosOut;
LABEL_25:
      G_DebugLine(p_start, p_vEyePosOut, v16, 0);
      goto LABEL_26;
    }
  }
}

/*
==============
Bot_DrawDebugNavmesh
==============
*/

void Bot_DrawDebugNavmesh(void)
{
  Bot_DrawDebugNavmeshExposure();
}

/*
==============
Bot_DrawDebugNavmeshExposure
==============
*/
void Bot_DrawDebugNavmeshExposure(void)
{
  const dvar_t *v0; 
  gclient_s *client; 
  nav_space_s *DefaultSpace; 
  int ClosestAreas; 
  bfx::AreaHandle *v4; 
  __int64 v5; 
  unsigned int AreaUsageFlags; 
  bfx::Vector3 *v7; 
  float m_z; 
  const char *v9; 
  unsigned int AreaExposureValue; 
  const char *v11; 
  unsigned int v12; 
  const char *v13; 
  unsigned int v14; 
  const char *v15; 
  unsigned int v16; 
  const char *v17; 
  bfx::Vector3 pos; 
  __int64 v19; 
  bfx::Vector3 result; 
  vec3_t outPos; 
  bfx::PathSpec pathSpec; 
  bfx::AreaHandle ptr[32]; 

  v19 = -2i64;
  v0 = DVARBOOL_bot_DrawNavmeshExposure;
  if ( !DVARBOOL_bot_DrawNavmeshExposure && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 692, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawNavmeshExposure") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v0);
  if ( v0->current.enabled && Com_GameMode_SupportsFeature(WEAPON_RAISING_ALTSWITCH) && Nav_HasExposureData() )
  {
    `eh vector constructor iterator'(ptr, 0x10ui64, 0x20ui64, (void (__fastcall *)(void *))bfx::AreaHandle::AreaHandle, (void (__fastcall *)(void *))bfx::AreaHandle::~AreaHandle);
    pathSpec.m_obstacleMode = BLOCKED_IF_ANY_MATCH;
    *(_QWORD *)&pathSpec.m_obstacleBlockageFlags = -1i64;
    *(_QWORD *)&pathSpec.m_areaPenaltyFlags = -1i64;
    pathSpec.m_usePathSharingPenalty = 0;
    pathSpec.m_pathSharingPenalty = 0.0;
    pathSpec.m_maxPathSharingPenalty = 0.0;
    pathSpec.m_maxSearchDist = 0.0;
    bfx::PenaltyTable::PenaltyTable(&pathSpec.m_penaltyTable);
    pathSpec.m_snapMode = SNAP_CLOSEST;
    if ( !Nav_MeshLoaded() && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21690, ASSERT_TYPE_ASSERT, "( Nav_MeshLoaded() )", (const char *)&queryFormat, "Nav_MeshLoaded()") )
      __debugbreak();
    if ( SvStaticGlobals::ms_svStaticGlobals.state == SS_GAME )
    {
      client = level.gentities->client;
      if ( client )
      {
        if ( client->sess.connected == CON_CONNECTED && cg_t::ms_allocatedCount > 0 )
        {
          outPos.v[0] = 0.0;
          outPos.v[1] = 0.0;
          outPos.v[2] = 0.0;
          CL_GetViewPos(LOCAL_CLIENT_0, &outPos);
          pos = (bfx::Vector3)outPos;
          DefaultSpace = Nav_GetDefaultSpace();
          ClosestAreas = bfx::GetClosestAreas(&DefaultSpace->hSpace, &pos, 0, &pathSpec, 4000.0, 32, ptr);
          if ( ClosestAreas > 0 )
          {
            v4 = ptr;
            v5 = (unsigned int)ClosestAreas;
            do
            {
              AreaUsageFlags = bfx::AreaHandle::GetAreaUsageFlags(v4);
              v7 = bfx::AreaHandle::CalcCentroid(v4, &result);
              m_z = v7->m_z;
              *(_QWORD *)outPos.v = *(_QWORD *)&v7->m_x;
              outPos.v[2] = m_z;
              v9 = j_va("Flags:%u", AreaUsageFlags);
              G_Main_AddDebugStringWithDuration(&outPos, &colorWhite, 0.5, v9, 0);
              outPos.v[2] = outPos.v[2] + 6.0;
              AreaExposureValue = Bot_GetAreaExposureValue(AREA_EXPOSURE_SKY, AreaUsageFlags);
              v11 = j_va("Sky:%u", AreaExposureValue);
              G_Main_AddDebugStringWithDuration(&outPos, &colorWhite, 0.5, v11, 0);
              outPos.v[2] = outPos.v[2] + 6.0;
              v12 = Bot_GetAreaExposureValue(AREA_EXPOSURE_GENERAL, AreaUsageFlags);
              v13 = j_va("General:%u", v12);
              G_Main_AddDebugStringWithDuration(&outPos, &colorWhite, 0.5, v13, 0);
              outPos.v[2] = outPos.v[2] + 6.0;
              v14 = Bot_GetAreaExposureValue(AREA_EXPOSURE_TRAFFIC, AreaUsageFlags);
              v15 = j_va("Traffic:%u", v14);
              G_Main_AddDebugStringWithDuration(&outPos, &colorWhite, 0.5, v15, 0);
              outPos.v[2] = outPos.v[2] + 6.0;
              v16 = Bot_GetAreaExposureValue(AREA_EXPOSURE_LOS, AreaUsageFlags);
              v17 = j_va("LOS:%u", v16);
              G_Main_AddDebugStringWithDuration(&outPos, &colorWhite, 0.5, v17, 0);
              ++v4;
              --v5;
            }
            while ( v5 );
          }
        }
      }
    }
    `eh vector destructor iterator'(ptr, 0x10ui64, 0x20ui64, (void (__fastcall *)(void *))bfx::AreaHandle::~AreaHandle);
  }
}

/*
==============
Bot_DrawDebugSpecial
==============
*/
void Bot_DrawDebugSpecial()
{
  unsigned int v0; 
  int esi1; 
  bot_trigger_draw_data_t *v2; 
  vec4_t *p_color; 
  gentity_s *trigger; 
  unsigned __int64 v5; 
  unsigned __int64 v6; 
  int v7; 
  const dvar_t *v8; 
  unsigned __int16 i; 
  const pathnode_t *v10; 
  const dvar_t *v11; 
  const dvar_t *v12; 
  const dvar_t *v13; 
  const dvar_t *v14; 
  int integer; 
  const dvar_t *v16; 
  int v17; 
  int v18; 
  unsigned int v19; 
  const SvClientMP *CommonClient; 
  playerState_s *PlayerState; 
  int v22; 
  unsigned __int8 *priorityMap; 
  float v24; 
  float v25; 
  float v26; 
  const vec4_t *v27; 
  const vec4_t *v28; 
  const dvar_t *v29; 
  const dvar_t *v30; 
  int v31; 
  int v32; 
  vec3_t *p_results; 
  const dvar_t *v34; 
  nav_space_s *DefaultSpace; 
  int v36; 
  bfx::PolylinePathRCPtr v37; 
  int v38; 
  trace_t *v39; 
  const vec3_t *v40; 
  nav_space_s *v41; 
  bfx::PolylinePathRCPtr v42; 
  const dvar_t *v43; 
  const dvar_t *v44; 
  int v45; 
  const dvar_t *v46; 
  float value; 
  cg_t *LocalClientGlobals; 
  int v49; 
  float v50; 
  float v51; 
  float v52; 
  pathnode_t *v53; 
  __int128 v54; 
  const dvar_t *v58; 
  vec4_t v59; 
  const dvar_t *v60; 
  const dvar_t *v61; 
  int v62; 
  float *v63; 
  const dvar_t *v64; 
  const dvar_t *v65; 
  vec4_t v66; 
  int v67; 
  int v68; 
  const char **v69; 
  const dvar_t *v70; 
  unsigned int Count; 
  const char *v72; 
  const char *v73; 
  const vec4_t *v74; 
  const dvar_t *v75; 
  __int64 v76; 
  const char *v77; 
  unsigned int v78; 
  __int64 v79; 
  pathnode_t *v80; 
  int v81; 
  vec3_t *p_origin; 
  int v83; 
  float v84; 
  __m128 v85; 
  __m128 v86; 
  __m128 v87; 
  __int64 v88; 
  pathnode_t *v89; 
  unsigned __int16 team; 
  int v91; 
  bool v92; 
  int v93; 
  unsigned int v94; 
  const char *fmt; 
  const char *v96; 
  int v97; 
  vec4_t v98; 
  vec4_t *interiorColor; 
  __int64 contentMask; 
  __int64 skipChildren; 
  float v102; 
  float v103; 
  float v104; 
  vec3_t vEyePosOut; 
  float v1[4]; 
  vec3_t origin; 
  vec3_t up; 
  vec3_t right; 
  vec4_t color; 
  Bounds box; 
  trace_t results; 

  v0 = Path_NodeCount();
  esi1 = 0;
  if ( g_botCurrentNumDebugDrawTriggers > 0 )
  {
    v2 = g_botDebugDrawTriggers;
    p_color = &g_botDebugDrawTriggers[0].color;
    do
    {
      trigger = v2->trigger;
      if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 196, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
        __debugbreak();
      v5 = (__int64)((unsigned __int128)(((char *)trigger - (char *)g_entities) * (__int128)0x2D02D02D02D02D03i64) >> 64) >> 8;
      v6 = (v5 >> 63) + v5;
      if ( (unsigned int)v6 >= 0x800 )
      {
        LODWORD(contentMask) = 2048;
        LODWORD(interiorColor) = v6;
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 199, ASSERT_TYPE_ASSERT, "(unsigned)( index ) < (unsigned)( ( 2048 ) )", "index doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", interiorColor, contentMask) )
          __debugbreak();
      }
      v6 = (__int16)v6;
      if ( (unsigned int)(__int16)v6 >= 0x800 )
      {
        LODWORD(contentMask) = 2048;
        LODWORD(interiorColor) = v6;
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 207, ASSERT_TYPE_ASSERT, "(unsigned)( entityIndex ) < (unsigned)( ( 2048 ) )", "entityIndex doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", interiorColor, contentMask) )
          __debugbreak();
      }
      if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 208, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
        __debugbreak();
      if ( g_entities[v6].r.isInUse != g_entityIsInUse[v6] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 209, ASSERT_TYPE_ASSERT, "( g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex] )", (const char *)&queryFormat, "g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex]") )
        __debugbreak();
      if ( g_entityIsInUse[v6] )
      {
        G_DrawTriggerGeometry(v2->trigger, p_color, v2->depthTest, 0, 0, &colorWhite);
      }
      else
      {
        v7 = g_botCurrentNumDebugDrawTriggers - 1;
        *v2 = g_botDebugDrawTriggers[g_botCurrentNumDebugDrawTriggers - 1];
        g_botCurrentNumDebugDrawTriggers = v7;
        --esi1;
        --v2;
        p_color -= 2;
      }
      ++esi1;
      ++v2;
      p_color += 2;
    }
    while ( esi1 < g_botCurrentNumDebugDrawTriggers );
  }
  v8 = DVARINT_bot_DrawDebugSpecial;
  if ( !DVARINT_bot_DrawDebugSpecial && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebugSpecial") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v8);
  if ( v8->current.integer == 12 )
  {
    for ( i = 0; i < v0; ++i )
    {
      if ( Path_NodeValid(i) )
      {
        v10 = &pathData.nodes[i];
        v11 = DVARINT_bot_DrawDebugSpecial;
        if ( !DVARINT_bot_DrawDebugSpecial && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebugSpecial") )
          __debugbreak();
        Dvar_CheckFrontendServerThread(v11);
        if ( v11->current.integer == 12 && Path_IsNodeDisconnected(i) )
          Path_DrawDebugNodeBox(v10);
      }
    }
  }
  v12 = DVARINT_bot_DrawDebugSpecial;
  if ( !DVARINT_bot_DrawDebugSpecial && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebugSpecial") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v12);
  if ( v12->current.integer == 4 )
    goto LABEL_234;
  v13 = DVARINT_bot_DrawDebugSpecial;
  if ( !DVARINT_bot_DrawDebugSpecial && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebugSpecial") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v13);
  if ( v13->current.integer == 5 )
  {
LABEL_234:
    v14 = DVARINT_bot_DrawDebugSpecial;
    if ( !DVARINT_bot_DrawDebugSpecial && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebugSpecial") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v14);
    integer = v14->current.integer;
    v16 = DVARINT_bot_DrawDebugSpecial;
    if ( !DVARINT_bot_DrawDebugSpecial && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebugSpecial") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v16);
    v17 = v16->current.integer;
    if ( integer == 4 && v17 == 5 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22201, ASSERT_TYPE_ASSERT, "( !(sightTrace && bulletTrace) )", (const char *)&queryFormat, "!(sightTrace && bulletTrace)") )
      __debugbreak();
    box.midPoint.v[0] = bounds_origin.midPoint.v[0];
    box.midPoint.v[1] = bounds_origin.midPoint.v[1];
    box.midPoint.v[2] = bounds_origin.midPoint.v[2];
    box.halfSize.v[0] = FLOAT_2_5;
    box.halfSize.v[1] = FLOAT_2_5;
    box.halfSize.v[2] = FLOAT_2_5;
    v18 = 0;
    v19 = 0;
    if ( (int)SvClient::ms_clientCount > 0 )
    {
      while ( 1 )
      {
        if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
          __debugbreak();
        CommonClient = (const SvClientMP *)SvClient::GetCommonClient(v19);
        if ( !Bot_IsClientActive(CommonClient) )
          goto LABEL_81;
        if ( !CommonClient->gentity && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22224, ASSERT_TYPE_ASSERT, "( cl->gentity )", (const char *)&queryFormat, "cl->gentity") )
          __debugbreak();
        if ( !CommonClient->gentity->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22225, ASSERT_TYPE_ASSERT, "( cl->gentity->sentient )", (const char *)&queryFormat, "cl->gentity->sentient") )
          __debugbreak();
        if ( SV_BotIsBot(v19) )
          goto LABEL_81;
        PlayerState = G_MainMP_GetPlayerState(v19);
        Sentient_GetHeadPosition(CommonClient->gentity->sentient, &vEyePosOut);
        AngleVectors(&PlayerState->viewangles, (vec3_t *)v1, &right, &up);
        origin.v[0] = (float)(100.0 * v1[0]) + vEyePosOut.v[0];
        origin.v[1] = (float)(100.0 * v1[1]) + vEyePosOut.v[1];
        origin.v[2] = (float)(100.0 * v1[2]) + vEyePosOut.v[2];
        G_DebugBox(&origin, &box, 0.0, &colorYellow, 1, 1);
        v22 = 0;
        results.fraction = FLOAT_1_0;
        if ( integer == 4 )
        {
          v22 = PhysicsQuery_LegacySightTrace(PHYSICS_WORLD_ID_FIRST, &vEyePosOut, &origin, &bounds_origin, CommonClient->gentity->s.number, 2047, 41965569);
          v18 = PhysicsQuery_LegacySightTrace(PHYSICS_WORLD_ID_FIRST, &vEyePosOut, &origin, &bounds_origin, CommonClient->gentity->s.number, 2047, 41965571);
        }
        else if ( v17 == 5 )
        {
          priorityMap = BG_GetWeaponPriorityMap(&NULL_WEAPON, 0);
          PhysicsQuery_LegacyTraceSkipEntities(PHYSICS_WORLD_ID_SERVER_DETAIL, &results, &vEyePosOut, &origin, &bounds_origin, &PlayerState->clientNum, 1, 0, 41969969, 1, priorityMap, All);
        }
        v24 = vEyePosOut.v[0] - up.v[0];
        v25 = vEyePosOut.v[1] - up.v[1];
        v26 = vEyePosOut.v[2] - up.v[2];
        vEyePosOut.v[0] = (float)(vEyePosOut.v[0] - up.v[0]) - right.v[0];
        vEyePosOut.v[1] = (float)(vEyePosOut.v[1] - up.v[1]) - right.v[1];
        vEyePosOut.v[2] = (float)(vEyePosOut.v[2] - up.v[2]) - right.v[2];
        if ( v18 )
          break;
        if ( v22 )
          goto LABEL_74;
        v27 = &colorMdGrey;
        if ( results.fraction < 1.0 )
          goto LABEL_74;
LABEL_75:
        G_DebugLine(&vEyePosOut, &origin, v27, 1);
        vEyePosOut.v[0] = (float)(2.0 * right.v[0]) + v24;
        vEyePosOut.v[1] = (float)(2.0 * right.v[1]) + v25;
        vEyePosOut.v[2] = (float)(2.0 * right.v[2]) + v26;
        if ( v18 )
        {
          if ( v22 )
            goto LABEL_79;
          v28 = &colorGreen;
        }
        else
        {
          v28 = &colorMdGrey;
          if ( results.fraction < 1.0 )
LABEL_79:
            v28 = &colorRed;
        }
        G_DebugLine(&vEyePosOut, &origin, v28, 1);
        v18 = 0;
LABEL_81:
        if ( (int)++v19 >= (int)SvClient::ms_clientCount )
          goto LABEL_82;
      }
      if ( !v22 )
      {
        v27 = &colorGreen;
        goto LABEL_75;
      }
LABEL_74:
      v27 = &colorRed;
      goto LABEL_75;
    }
  }
LABEL_82:
  v29 = DVARINT_bot_DebugPathGoal;
  if ( !DVARINT_bot_DebugPathGoal && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DebugPathGoal") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v29);
  if ( v29->current.integer > 0 )
  {
    v30 = DVARINT_bot_DebugPathGoal;
    if ( !DVARINT_bot_DebugPathGoal && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DebugPathGoal") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v30);
    v31 = v30->current.integer;
    v32 = 1;
    if ( v31 >= 1 )
    {
      p_results = (vec3_t *)&results;
      do
      {
        if ( (unsigned int)(v32 - 1) > 3 )
        {
          LODWORD(skipChildren) = 4;
          LODWORD(contentMask) = 1;
          LODWORD(interiorColor) = v32;
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22277, ASSERT_TYPE_ASSERT, "( 1 ) <= ( pathGoalIndex ) && ( pathGoalIndex ) <= ( 4 )", "pathGoalIndex not in [1, BOT_MAX_DEBUG_PATH_GOALS]\n\t%i not in [%i, %i]", interiorColor, contentMask, skipChildren) )
            __debugbreak();
        }
        Bot_DebugGoal(v32, p_results);
        v1[0] = 0.0;
        v1[1] = 0.0;
        v1[2] = 0.0;
        if ( !VecNCompareCustomEpsilon(p_results->v, v1, 0.001, 3) )
          G_DebugBox(p_results, &actorBoxProne, 0.0, &colorBlue, 0, 0);
        ++v32;
        ++p_results;
      }
      while ( v32 <= v31 );
    }
    v34 = DVARBOOL_bot_DebugPathGoal_DrawPathsBetweenPoints;
    if ( !DVARBOOL_bot_DebugPathGoal_DrawPathsBetweenPoints && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 692, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DebugPathGoal_DrawPathsBetweenPoints") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v34);
    if ( v34->current.enabled )
    {
      if ( v31 == 2 )
      {
        v1[0] = 0.0;
        v1[1] = 0.0;
        v1[2] = 0.0;
        if ( !VecNCompareCustomEpsilon(&results.fraction, v1, 0.001, 3) )
        {
          v1[0] = 0.0;
          v1[1] = 0.0;
          v1[2] = 0.0;
          if ( !VecNCompareCustomEpsilon(&results.position.v[2], v1, 0.001, 3) )
          {
            DefaultSpace = Nav_GetDefaultSpace();
            v36 = 0;
            Nav_FindPath((bfx::PolylinePathRCPtr *)&up, DefaultSpace, (const vec3_t *)&results, (const vec3_t *)&results.position.v[2], 0);
            bfx::PolylinePathRCPtr::PolylinePathRCPtr((bfx::PolylinePathRCPtr *)&origin, (const bfx::PolylinePathRCPtr *)&up);
            Nav_DrawPolyLinePath(v37);
            bfx::PolylinePathRCPtr::~PolylinePathRCPtr((bfx::PolylinePathRCPtr *)&up);
            goto LABEL_113;
          }
        }
      }
      else if ( v31 > 2 )
      {
        v38 = 0;
        if ( v31 - 1 >= 0 )
        {
          v39 = &results;
          do
          {
            ++v38;
            v1[0] = 0.0;
            v1[1] = 0.0;
            v1[2] = 0.0;
            if ( !VecNCompareCustomEpsilon(&v39->fraction, v1, 0.001, 3) )
            {
              vEyePosOut.v[0] = 0.0;
              vEyePosOut.v[1] = 0.0;
              vEyePosOut.v[2] = 0.0;
              v40 = (const vec3_t *)((char *)&results + 12 * (v38 % v31));
              if ( !VecNCompareCustomEpsilon(v40->v, vEyePosOut.v, 0.001, 3) )
              {
                v41 = Nav_GetDefaultSpace();
                Nav_FindPath((bfx::PolylinePathRCPtr *)&up, v41, (const vec3_t *)v39, v40, 0);
                bfx::PolylinePathRCPtr::PolylinePathRCPtr((bfx::PolylinePathRCPtr *)&origin, (const bfx::PolylinePathRCPtr *)&up);
                Nav_DrawPolyLinePath(v42);
                bfx::PolylinePathRCPtr::~PolylinePathRCPtr((bfx::PolylinePathRCPtr *)&up);
              }
            }
            v39 = (trace_t *)((char *)v39 + 12);
          }
          while ( v38 <= v31 - 1 );
        }
      }
    }
  }
  v36 = 0;
LABEL_113:
  v43 = DVARINT_ai_showNodes;
  if ( !DVARINT_ai_showNodes && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "ai_showNodes") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v43);
  if ( v43->current.integer >= 11 )
  {
    v44 = DVARINT_ai_showNodes;
    if ( !DVARINT_ai_showNodes && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "ai_showNodes") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v44);
    if ( v44->current.integer <= 13 )
    {
      v45 = Path_ZoneCount();
      LODWORD(up.v[0]) = v45;
      v46 = DVARFLT_ai_showNodesDist;
      if ( !DVARFLT_ai_showNodesDist && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 720, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "ai_showNodesDist") )
        __debugbreak();
      Dvar_CheckFrontendServerThread(v46);
      value = v46->current.value;
      CL_GetViewPos(LOCAL_CLIENT_0, (vec3_t *)v1);
      LocalClientGlobals = CG_GetLocalClientGlobals(LOCAL_CLIENT_0);
      v103 = LocalClientGlobals->refdef.view.axis.m[0].v[0];
      v102 = LocalClientGlobals->refdef.view.axis.m[0].v[1];
      v104 = LocalClientGlobals->refdef.view.axis.m[0].v[2];
      *(_QWORD *)origin.v = 0i64;
      v49 = 0;
      if ( v45 > 0 )
      {
        v50 = v1[2];
        v51 = v1[1];
        v52 = v1[0];
        do
        {
          v53 = Path_ConvertZoneIndexToZone(v49);
          if ( !v53 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22343, ASSERT_TYPE_ASSERT, "( zoneNode )", (const char *)&queryFormat, "zoneNode") )
            __debugbreak();
          pathnode_t::GetPos(v53, &vEyePosOut);
          if ( value != 0.0 && (float)((float)((float)((float)(v51 - vEyePosOut.v[1]) * (float)(v51 - vEyePosOut.v[1])) + (float)((float)(v52 - vEyePosOut.v[0]) * (float)(v52 - vEyePosOut.v[0]))) + (float)((float)(v50 - vEyePosOut.v[2]) * (float)(v50 - vEyePosOut.v[2]))) > (float)(value * value) )
            goto LABEL_193;
          v54 = LODWORD(vEyePosOut.v[1]);
          *(float *)&v54 = fsqrt((float)((float)((float)(vEyePosOut.v[1] - v51) * (float)(vEyePosOut.v[1] - v51)) + (float)((float)(vEyePosOut.v[0] - v52) * (float)(vEyePosOut.v[0] - v52))) + (float)((float)(vEyePosOut.v[2] - v50) * (float)(vEyePosOut.v[2] - v50)));
          _XMM3 = v54;
          __asm
          {
            vcmpless xmm0, xmm3, cs:__real@80000000
            vblendvps xmm0, xmm3, xmm1, xmm0
          }
          if ( (float)((float)((float)((float)((float)(vEyePosOut.v[1] - v51) * (float)(1.0 / *(float *)&_XMM0)) * v102) + (float)((float)((float)(vEyePosOut.v[0] - v52) * (float)(1.0 / *(float *)&_XMM0)) * v103)) + (float)((float)((float)(vEyePosOut.v[2] - v50) * (float)(1.0 / *(float *)&_XMM0)) * v104)) < VIEW_FOV_DOT )
            goto LABEL_193;
          v58 = DVARINT_ai_showNodes;
          if ( !DVARINT_ai_showNodes && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "ai_showNodes") )
            __debugbreak();
          Dvar_CheckFrontendServerThread(v58);
          if ( v58->current.integer == 12 )
          {
            if ( Path_ZoneIsTraversalIsland(v49) )
              v59 = colorRed;
            else
              v59 = colorBlue;
          }
          else
          {
            v60 = DVARINT_ai_showNodes;
            if ( !DVARINT_ai_showNodes && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "ai_showNodes") )
              __debugbreak();
            Dvar_CheckFrontendServerThread(v60);
            if ( v60->current.integer == 11 )
            {
              color = *Path_ZoneColor(v49);
              goto LABEL_150;
            }
            v61 = DVARINT_ai_showNodes;
            if ( !DVARINT_ai_showNodes && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "ai_showNodes") )
              __debugbreak();
            Dvar_CheckFrontendServerThread(v61);
            if ( v61->current.integer != 13 )
              goto LABEL_150;
            v59 = colorWhite;
          }
          color = v59;
LABEL_150:
          if ( Path_ZoneCount() && level.teammode != TEAMMODE_FFA )
          {
            v62 = 1;
            v63 = &origin.v[1];
            *(_QWORD *)right.v = &origin.y;
            do
            {
              *(_DWORD *)v63 += Bot_ZoneGetCount(v49, v62, BOT_ZONE_COUNT_ENEMY);
              v64 = DVARINT_ai_showNodes;
              if ( !DVARINT_ai_showNodes && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "ai_showNodes") )
                __debugbreak();
              Dvar_CheckFrontendServerThread(v64);
              if ( v64->current.integer == 11 )
              {
                *(vec4_t *)v1 = *Path_ZoneColor(v49);
              }
              else
              {
                v65 = DVARINT_ai_showNodes;
                if ( !DVARINT_ai_showNodes && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "ai_showNodes") )
                  __debugbreak();
                Dvar_CheckFrontendServerThread(v65);
                if ( v65->current.integer == 13 )
                {
                  if ( v62 )
                    v66 = colorBlue;
                  else
                    v66 = colorRed;
                  *(vec4_t *)v1 = v66;
                }
              }
              v67 = 0;
              v68 = 4;
              v69 = &BOT_STR_ZONE_COUNT[4];
              do
              {
                v70 = DVARINT_ai_showNodes;
                if ( !DVARINT_ai_showNodes && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "ai_showNodes") )
                  __debugbreak();
                Dvar_CheckFrontendServerThread(v70);
                if ( v70->current.integer != 12 )
                {
                  if ( (unsigned int)v68 >= 5 )
                  {
                    LODWORD(contentMask) = 5;
                    LODWORD(interiorColor) = v68;
                    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22403, ASSERT_TYPE_ASSERT, "(unsigned)( k ) < (unsigned)( BOT_ZONE_COUNT_COUNT )", "k doesn't index BOT_ZONE_COUNT_COUNT\n\t%i not in [0, %i)", interiorColor, contentMask) )
                      __debugbreak();
                  }
                  Count = Bot_ZoneGetCount(v49, v62, (bot_zone_count_t)v68);
                  v72 = *v69;
                  if ( Count )
                  {
                    v67 = 1;
                    v73 = j_va("%s %i", v72, Count);
                    v74 = (const vec4_t *)v1;
                  }
                  else
                  {
                    v73 = j_va("%s %i", v72, 0i64);
                    v74 = &colorDkGrey;
                  }
                  G_Main_AddDebugStringWithDuration(&vEyePosOut, v74, 0.5, v73, 0);
                }
                vEyePosOut.v[2] = vEyePosOut.v[2] + 6.0;
                --v69;
                --v68;
              }
              while ( v68 >= 0 );
              v75 = DVARINT_ai_showNodes;
              v76 = *(_QWORD *)right.v;
              if ( !DVARINT_ai_showNodes && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "ai_showNodes") )
                __debugbreak();
              Dvar_CheckFrontendServerThread(v75);
              if ( v75->current.integer == 12 )
              {
                v36 = 0;
              }
              else
              {
                if ( v67 )
                  *(_OWORD *)box.midPoint.v = *(_OWORD *)v1;
                else
                  *(vec4_t *)box.midPoint.v = colorDkGrey;
                v36 = 0;
                if ( v62 )
                  G_Main_AddDebugStringWithDuration(&vEyePosOut, (const vec4_t *)&box, 0.5, "(Team 1 (Allies))", 0);
                else
                  G_Main_AddDebugStringWithDuration(&vEyePosOut, (const vec4_t *)&box, 0.5, "(Team 0 (Axis))", 0);
              }
              vEyePosOut.v[2] = vEyePosOut.v[2] + 9.0;
              v63 = (float *)(v76 - 4);
              *(_QWORD *)right.v = v63;
              --v62;
            }
            while ( v62 >= 0 );
            v45 = LODWORD(up.v[0]);
          }
          v77 = j_va("[Zone %i]", (unsigned int)v49);
          G_Main_AddDebugStringWithDuration(&vEyePosOut, &color, 0.5, v77, 0);
          vEyePosOut.v[2] = vEyePosOut.v[2] + 9.0;
LABEL_193:
          ++v49;
        }
        while ( v49 < v45 );
      }
      if ( Dvar_GetInt_Internal_DebugName(DVARINT_ai_showNodes, "ai_showNodes") == 13 )
      {
        if ( Path_ZoneCount() )
        {
          if ( level.teammode != TEAMMODE_FFA )
          {
            v78 = 0;
            *(_QWORD *)right.v = v45;
            if ( v45 > 0 )
            {
              v79 = 0i64;
              do
              {
                *(_OWORD *)&results.fraction = _xmm;
                results.normal.v[0] = FLOAT_32_0;
                results.normal.v[1] = FLOAT_32_0;
                v80 = Path_ConvertZoneIndexToZone(v78);
                if ( !v80 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22449, ASSERT_TYPE_ASSERT, "( zoneNode )", (const char *)&queryFormat, "zoneNode") )
                  __debugbreak();
                v81 = 0;
                p_origin = &origin;
                do
                {
                  v83 = Bot_ZoneGetCount(v78, v81, BOT_ZONE_COUNT_ENEMY_PREDICT);
                  pathnode_t::GetPos(v80, &vEyePosOut);
                  v84 = (float)((float)v81 * 10.0) + 32.0;
                  vEyePosOut.v[2] = v84 + vEyePosOut.v[2];
                  if ( v83 > 0 )
                  {
                    if ( v81 )
                    {
                      v85 = (__m128)colorRed;
                      v86 = (__m128)colorMagenta;
                    }
                    else
                    {
                      v85 = (__m128)colorBlue;
                      v86 = (__m128)colorLtBlue;
                    }
                    v87 = 0i64;
                    v87.m128_f32[0] = (float)v83 / (float)SLODWORD(p_origin->v[0]);
                    color = (vec4_t)_mm128_add_ps(_mm128_mul_ps(_mm128_sub_ps(v85, v86), _mm_shuffle_ps(v87, v87, 0)), v86);
                    G_DebugBox(&vEyePosOut, (const Bounds *)&results, 0.0, &color, 0, 0);
                    if ( v80->dynamic.wLinkCount > 0 )
                    {
                      v88 = 0i64;
                      do
                      {
                        v89 = Path_ConvertIndexToNode(v80->constant.Links[v88].nodeNum);
                        pathnode_t::GetPos(v89, &up);
                        up.v[0] = (float)((float)(vEyePosOut.v[0] - up.v[0]) * 0.5) + up.v[0];
                        up.v[1] = (float)((float)(vEyePosOut.v[1] - up.v[1]) * 0.5) + up.v[1];
                        up.v[2] = (float)((float)(vEyePosOut.v[2] - (float)(v84 + up.v[2])) * 0.5) + (float)(v84 + up.v[2]);
                        G_DebugLine(&vEyePosOut, &up, &color, 0);
                        ++v36;
                        ++v88;
                      }
                      while ( v36 < v80->dynamic.wLinkCount );
                    }
                    v36 = 0;
                  }
                  ++v81;
                  p_origin = (vec3_t *)((char *)p_origin + 4);
                }
                while ( v81 < 2 );
                if ( v78 >= s_botZoneDataCount )
                {
                  LODWORD(contentMask) = s_botZoneDataCount;
                  LODWORD(interiorColor) = v78;
                  if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22492, ASSERT_TYPE_ASSERT, "(unsigned)( i ) < (unsigned)( s_botZoneDataCount )", "i doesn't index s_botZoneDataCount\n\t%i not in [0, %i)", interiorColor, contentMask) )
                    __debugbreak();
                }
                team = s_botZoneData[v79].team;
                if ( !team )
                  goto LABEL_231;
                v91 = team;
                v92 = !Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80);
                v93 = v91 - 1;
                if ( v92 )
                {
                  v94 = 1;
                  if ( v93 < 1 )
                    v94 = v93;
                  if ( v94 < 2 )
                    goto LABEL_227;
                  LODWORD(contentMask) = 2;
                  fmt = "result doesn't index MAX_NODE_TEAMS_MP\n\t%i not in [0, %i)";
                  v96 = "(unsigned)( result ) < (unsigned)( (2) )";
                  v97 = 210;
                }
                else
                {
                  v94 = 2;
                  if ( v93 < 2 )
                    v94 = v93;
                  if ( v94 < 3 )
                    goto LABEL_227;
                  LODWORD(contentMask) = 3;
                  fmt = "result doesn't index MAX_NODE_TEAMS_SP\n\t%i not in [0, %i)";
                  v96 = "(unsigned)( result ) < (unsigned)( (3) )";
                  v97 = 205;
                }
                LODWORD(interiorColor) = v94;
                if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\pathnode.h", v97, ASSERT_TYPE_ASSERT, v96, fmt, interiorColor, contentMask) )
                  __debugbreak();
LABEL_227:
                if ( v94 )
                  v98 = colorBlue;
                else
                  v98 = colorRed;
                *(vec4_t *)box.midPoint.v = v98;
                v1[0] = vEyePosOut.v[0];
                v1[1] = vEyePosOut.v[1];
                v1[2] = vEyePosOut.v[2] + 485.0;
                G_DebugLine(&vEyePosOut, (const vec3_t *)v1, (const vec4_t *)&box, 0);
                v1[2] = v1[2] + 15.0;
                G_DebugCircle((const vec3_t *)v1, 15.0, (const vec4_t *)&box, 0, 0, 1);
LABEL_231:
                ++v78;
                ++v79;
                --*(_QWORD *)right.v;
              }
              while ( *(_QWORD *)right.v );
            }
          }
        }
      }
    }
  }
}

/*
==============
Bot_DrawFindPathDebugInfo
==============
*/
void Bot_DrawFindPathDebugInfo(bot_data_t *botData, int pathFindResult, const char *debugReason)
{
  const dvar_t *v6; 
  const dvar_t *v7; 
  const dvar_t *v8; 
  gentity_s *ent; 
  float v10; 
  float v11; 
  float v12; 
  float v13; 
  float v14; 
  char *v15; 
  const vec4_t *v16; 
  const dvar_t *v17; 
  const char *v18; 
  vec3_t xyz; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13754, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v6 = DVARINT_ai_showPaths;
  if ( !DVARINT_ai_showPaths && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "ai_showPaths") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v6);
  if ( v6->current.integer > 0 )
    goto LABEL_17;
  v7 = DVARINT_bot_DrawDebug;
  if ( !DVARINT_bot_DrawDebug && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebug") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v7);
  if ( v7->current.integer == 1 )
    goto LABEL_17;
  v8 = DVARINT_bot_DrawDebug;
  if ( !DVARINT_bot_DrawDebug && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebug") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v8);
  if ( v8->current.integer == 2 )
  {
LABEL_17:
    if ( Bot_ShouldDrawDebugForBot(botData) && debugReason )
    {
      ent = botData->botInfo.ent;
      v10 = ent->r.currentOrigin.v[0];
      v11 = v10 - botData->botDebugData.lastDebugPathPos.v[0];
      xyz.v[0] = v10;
      v12 = ent->r.currentOrigin.v[1];
      v13 = (float)((float)(v12 - botData->botDebugData.lastDebugPathPos.v[1]) * (float)(v12 - botData->botDebugData.lastDebugPathPos.v[1])) + (float)(v11 * v11);
      xyz.v[1] = v12;
      v14 = ent->r.currentOrigin.v[2];
      xyz.v[2] = v14;
      if ( v13 < 2500.0 )
      {
        v14 = botData->botDebugData.lastDebugPathPos.v[2] + 10.0;
        xyz.v[2] = v14;
      }
      botData->botDebugData.lastDebugPathPos.v[0] = v10;
      botData->botDebugData.lastDebugPathPos.v[1] = v12;
      botData->botDebugData.lastDebugPathPos.v[2] = v14;
      if ( pathFindResult )
      {
        if ( (botData->botDebugData.flags & 1) != 0 )
        {
          v15 = j_va("%s *", debugReason);
          v16 = &colorOrange;
        }
        else
        {
          v15 = (char *)debugReason;
          v16 = &colorGreen;
        }
      }
      else
      {
        v15 = j_va("%s *", debugReason);
        v16 = &colorRed;
      }
      SV_BotDebugString(botData, &xyz, v16, 1.0, v15, 200);
    }
  }
  v17 = DVARINT_bot_DrawDebugSpecial;
  if ( !DVARINT_bot_DrawDebugSpecial && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebugSpecial") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v17);
  if ( v17->current.integer == 11 && Bot_ShouldDrawDebugForBot(botData) && debugReason )
  {
    v18 = (char *)&queryFormat.fmt + 3;
    if ( (botData->botDebugData.flags & 1) != 0 )
      v18 = " <after bad_path>";
    Com_Printf(18, "(%7i) Bot <%2i> path <%s>%s\n", (unsigned int)level.time, (unsigned int)botData->botInfo.ent->s.number, debugReason, v18);
  }
  botData->botDebugData.flags &= ~1u;
}

/*
==============
Bot_EndProf
==============
*/
long double Bot_EndProf()
{
  __rdtsc();
  _XMM0 = 0i64;
  __asm { vcvtsi2sd xmm0, xmm0, rax }
  return *(double *)&_XMM0 * msecPerRawTimerTick;
}

/*
==============
Bot_EnemyDied
==============
*/
void Bot_EnemyDied(bot_data_t *botData)
{
  gentity_s *v2; 
  gentity_s *ent; 
  AIBotInterface *m_pAI; 
  gentity_s *v5; 
  const playerState_s *EntityPlayerStateConst; 
  gclient_s *client; 
  const EnemySelector *v8; 
  AIBotWrapper v9; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7177, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7178, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
    v2 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
  else
    v2 = NULL;
  AICommonInterface::AICommonInterface(&v9.m_botInterface);
  v9.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v9.m_botAgentInterface);
  ent = botData->botInfo.ent;
  v9.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v9.m_pAI = NULL;
  AIBotWrapper::Setup(&v9, ent);
  m_pAI = v9.m_pAI;
  if ( !v9.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7186, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  if ( v2 && !Bot_CanSeeEnemy(botData) && botData->botInfo.enemyTrack.lastDist >= 500.0 )
  {
    if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
    {
      v5 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
      if ( v5 )
      {
LABEL_22:
        if ( !Bot_EntityIsConsideredDead(v5) )
        {
          if ( !v5 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.h", 1164, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
            __debugbreak();
          EntityPlayerStateConst = G_GetEntityPlayerStateConst(v5);
          client = v5->client;
          if ( (!client || !client->lastStand) && (!EntityPlayerStateConst || !GameModeFlagContainer<enum POtherFlagsCommon,enum POtherFlagsSP,enum POtherFlagsMP,64>::TestFlagInternal(&EntityPlayerStateConst->otherFlags, ACTIVE, 0xBu)) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7164, ASSERT_TYPE_ASSERT, "( Bot_EntityIsConsideredDead( enemy ) || Bot_EntIsInLastStand( enemy ) )", (const char *)&queryFormat, "Bot_EntityIsConsideredDead( enemy ) || Bot_EntIsInLastStand( enemy )") )
            __debugbreak();
        }
        if ( !Sentient_IsAerial(v5->sentient) )
        {
          v8 = EnemySelector_Get(botData->botInfo.sentient->enemySelector);
          botData->botInfo.enemyTrack.deadEnemyThreat = ((__int64 (__fastcall *)(AIBotInterface *, sentient_s *, int (__fastcall *)(AICommonInterface *, sentient_s *, float, bool, const vec3_t *, const vec3_t *, int, const EnemySelector *), _QWORD, vec3_t *, vec3_t *, _DWORD, const EnemySelector *))m_pAI->UpdateSingleThreat)(m_pAI, v2->sentient, m_pAI->UpdateSingleThreat, 0i64, &vec3_origin, &vec3_origin, 0, v8);
        }
        goto LABEL_34;
      }
    }
    else
    {
      v5 = NULL;
    }
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7163, ASSERT_TYPE_ASSERT, "( enemy )", (const char *)&queryFormat, "enemy") )
      __debugbreak();
    goto LABEL_22;
  }
LABEL_34:
  Bot_ClearEnemy(botData);
}

/*
==============
Bot_EnemyFacesBot
==============
*/
int Bot_EnemyFacesBot(const bot_data_t *botData)
{
  const gentity_s *v2; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16281, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) && (v2 = EntHandle::ent(&botData->botInfo.sentient->targetEnt)) != NULL )
    return Bot_EntityFacesBot(botData, v2);
  else
    return 0;
}

/*
==============
Bot_EnemyIsAttackingMe
==============
*/
_BOOL8 Bot_EnemyIsAttackingMe(const bot_data_t *botData, int timeLimit)
{
  gentity_s *v4; 
  gentity_s *v5; 
  sentient_info_t *SentientInfo; 
  int iLastAttackMeTime; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18328, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18331, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  if ( !botData->botInfo.ent->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18332, ASSERT_TYPE_ASSERT, "( botInfo->ent->sentient )", (const char *)&queryFormat, "botInfo->ent->sentient") )
    __debugbreak();
  if ( !EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
    return 0i64;
  v4 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
  v5 = v4;
  if ( !v4 )
    return 0i64;
  if ( !v4->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18341, ASSERT_TYPE_ASSERT, "( enemy->sentient )", (const char *)&queryFormat, "enemy->sentient") )
    __debugbreak();
  SentientInfo = Sentient_GetSentientInfo(botData->botInfo.ent->sentient, v5->sentient);
  if ( !SentientInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18344, ASSERT_TYPE_ASSERT, "( info )", (const char *)&queryFormat, "info") )
    __debugbreak();
  iLastAttackMeTime = SentientInfo->iLastAttackMeTime;
  return iLastAttackMeTime && level.time - iLastAttackMeTime < timeLimit;
}

/*
==============
Bot_EnemyPreferMelee
==============
*/
_BOOL8 Bot_EnemyPreferMelee(const bot_data_t *botData)
{
  gentity_s *v2; 
  gentity_s *v3; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8200, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8201, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
    return 0i64;
  v2 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
  v3 = v2;
  if ( !v2 )
    return 0i64;
  if ( !v2->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8210, ASSERT_TYPE_ASSERT, "( enemy->sentient )", (const char *)&queryFormat, "enemy->sentient") )
    __debugbreak();
  return !Sentient_IsAerial(v3->sentient) && Bot_AllowedToMeleeEnemy(botData) && (Bot_EntityUsingRiotShield(botData->botInfo.ent, 0) || (botData->botInfo.flags & 0x20000) != 0);
}

/*
==============
Bot_EntityDeadWhileUsingRemote
==============
*/
const playerState_s *Bot_EntityDeadWhileUsingRemote(const gentity_s *entity)
{
  const playerState_s *result; 
  const playerState_s *v3; 
  bool HasRemoteEyes; 
  GameModeFlagContainer<enum EntityStateFlagsCommon,enum EntityStateFlagsSP,enum EntityStateFlagsMP,32> *p_eFlags; 
  BOOL v6; 
  unsigned int v7; 
  BOOL v8; 

  if ( !entity && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7083, ASSERT_TYPE_ASSERT, "( entity )", (const char *)&queryFormat, "entity") )
    __debugbreak();
  result = G_GetEntityPlayerStateConst(entity);
  v3 = result;
  if ( result )
  {
    HasRemoteEyes = Sentient_HasRemoteEyes(entity->sentient);
    p_eFlags = &v3->eFlags;
    v6 = HasRemoteEyes;
    v7 = 1;
    v8 = GameModeFlagContainer<enum EntityStateFlagsCommon,enum EntityStateFlagsSP,enum EntityStateFlagsMP,32>::TestFlagInternal(p_eFlags, ACTIVE, 0xCu);
    if ( !v6 || !v8 )
      return 0;
    return (const playerState_s *)v7;
  }
  return result;
}

/*
==============
Bot_EntityDiedInternal
==============
*/
void Bot_EntityDiedInternal(bot_data_t *botData, const gentity_s *deadEnt)
{
  const playerState_s *EntityPlayerStateConst; 
  gclient_s *client; 
  gentity_s *ent; 
  AIBotInterface *m_pAI; 
  gentity_s *v8; 
  gentity_s *v9; 
  sentient_info_t *SentientInfo; 
  gentity_s *v11; 
  int lookAtDeadTime; 
  float v13; 
  float v14; 
  float v15; 
  float v16; 
  int time; 
  int traversal; 
  AIBotWrapper v19; 
  vec3_t outLastKnownPos; 
  vec3_t vEyeDir; 
  vec3_t vEyePosOut; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7204, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !deadEnt && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7205, ASSERT_TYPE_ASSERT, "( deadEnt )", (const char *)&queryFormat, "deadEnt") )
    __debugbreak();
  if ( !Bot_EntityIsConsideredDead(deadEnt) )
  {
    if ( !deadEnt && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.h", 1164, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
      __debugbreak();
    EntityPlayerStateConst = G_GetEntityPlayerStateConst(deadEnt);
    client = deadEnt->client;
    if ( (!client || !client->lastStand) && (!EntityPlayerStateConst || !GameModeFlagContainer<enum POtherFlagsCommon,enum POtherFlagsSP,enum POtherFlagsMP,64>::TestFlagInternal(&EntityPlayerStateConst->otherFlags, ACTIVE, 0xBu)) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7206, ASSERT_TYPE_ASSERT, "( Bot_EntityIsConsideredDead( deadEnt ) || Bot_EntIsInLastStand( deadEnt ) )", (const char *)&queryFormat, "Bot_EntityIsConsideredDead( deadEnt ) || Bot_EntIsInLastStand( deadEnt )") )
      __debugbreak();
  }
  AICommonInterface::AICommonInterface(&v19.m_botInterface);
  v19.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v19.m_botAgentInterface);
  ent = botData->botInfo.ent;
  v19.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v19.m_pAI = NULL;
  AIBotWrapper::Setup(&v19, ent);
  m_pAI = v19.m_pAI;
  if ( !v19.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7213, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) && (v8 = EntHandle::ent(&botData->botInfo.sentient->targetEnt), (v9 = v8) != NULL) && v8 == deadEnt )
  {
    if ( !v8->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7219, ASSERT_TYPE_ASSERT, "( curEnemy->sentient )", (const char *)&queryFormat, "curEnemy->sentient") )
      __debugbreak();
    SentientInfo = Sentient_GetSentientInfo(botData->botInfo.sentient, v9->sentient);
    if ( Bot_CanSeeAndCanFireOnEnemy(botData) && level.time - botData->botInfo.enemyTrack.lastFireTime < 500 && !Bot_Weap_WeaponDoesSplashDamage(botData) )
    {
      if ( !SentientInfo )
        return;
      if ( level.time - SentientInfo->VisCache.iLastVisTime < 250 )
      {
        AICommonInterface::GetEyeDirection(m_pAI, &vEyeDir);
        Sentient_GetEyePosition(botData->botInfo.sentient, &vEyePosOut);
        SentientInfo_GetLastKnownPos(SentientInfo, &outLastKnownPos);
        v11 = botData->botInfo.ent;
        lookAtDeadTime = (int)botData->botMatchData.lookAtDeadTime;
        v13 = fsqrt((float)((float)((float)(v11->r.currentOrigin.v[1] - outLastKnownPos.v[1]) * (float)(v11->r.currentOrigin.v[1] - outLastKnownPos.v[1])) + (float)((float)(v11->r.currentOrigin.v[0] - outLastKnownPos.v[0]) * (float)(v11->r.currentOrigin.v[0] - outLastKnownPos.v[0]))) + (float)((float)(v11->r.currentOrigin.v[2] - outLastKnownPos.v[2]) * (float)(v11->r.currentOrigin.v[2] - outLastKnownPos.v[2])));
        v14 = (float)(v13 * vEyeDir.v[0]) + vEyePosOut.v[0];
        v15 = (float)(v13 * vEyeDir.v[1]) + vEyePosOut.v[1];
        v16 = (float)(v13 * vEyeDir.v[2]) + vEyePosOut.v[2];
        if ( v14 == 0.0 && v15 == 0.0 && v16 == 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14633, ASSERT_TYPE_ASSERT, "( Vec3NotZero( *point ) )", (const char *)&queryFormat, "Vec3NotZero( *point )") )
          __debugbreak();
        time = level.time;
        if ( botData->botInfo.lookAtType <= BOT_LOOK_CODE_FORCED || level.time >= botData->botInfo.lookAtTime )
        {
          botData->botInfo.lookAtType = BOT_LOOK_CODE_FORCED;
          botData->botInfo.lookAtTime = time + lookAtDeadTime;
          botData->botInfo.lookAtPoint.v[0] = v14;
          botData->botInfo.lookAtPoint.v[1] = v15;
          botData->botInfo.lookAtPoint.v[2] = v16;
          traversal = botData->botInfo.traversal;
          if ( (traversal & 1) != 0 )
            botData->botInfo.traversal = traversal & 0xFFFFFFFE;
          time = level.time;
        }
        botData->botInfo.forceFireTime = time + (int)botData->botMatchData.fireAtDeadTime;
      }
    }
    if ( SentientInfo )
      Bot_EnemyDied(botData);
  }
  else
  {
    if ( !deadEnt->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7250, ASSERT_TYPE_ASSERT, "( deadEnt->sentient )", (const char *)&queryFormat, "deadEnt->sentient") )
      __debugbreak();
    Sentient_GetSentientInfo(botData->botInfo.sentient, deadEnt->sentient)->iLastAttackMeTime = 0;
    if ( Bot_RecentSeeSentient(botData, deadEnt->sentient, 1000) )
      SentientInfo_Clear(botData->botInfo.ent->sentient, deadEnt->sentient);
  }
}

/*
==============
Bot_EntityFacesBot
==============
*/
_BOOL8 Bot_EntityFacesBot(const bot_data_t *botData, const gentity_s *ent)
{
  sentient_s *sentient; 
  int HasLOSToHighAerialEnemy; 
  gentity_s *v6; 
  playerState_s *EntityPlayerState; 
  vec3_t *p_currentAngles; 
  gentity_s *v9; 
  float v10; 
  float v11; 
  __int128 v12; 
  float v13; 
  vec3_t forward; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16228, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16229, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( !ent->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16230, ASSERT_TYPE_ASSERT, "( ent->sentient )", (const char *)&queryFormat, "ent->sentient") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16233, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  sentient = ent->sentient;
  if ( sentient )
  {
    if ( Bot_IsHighAerialSentient(sentient) )
      HasLOSToHighAerialEnemy = Bot_HasLOSToHighAerialEnemy(botData, ent);
    else
      HasLOSToHighAerialEnemy = Bot_CanSeeSentientQuick(botData, ent->sentient);
  }
  else
  {
    HasLOSToHighAerialEnemy = Bot_CanSeePointViaNodes(botData, &ent->r.currentOrigin);
  }
  if ( !HasLOSToHighAerialEnemy )
    return 0i64;
  if ( !Bot_IsVehicleEnt(ent) || !EntHandle::isDefined(&ent->r.ownerNum) || (v6 = EntHandle::ent(&ent->r.ownerNum), (EntityPlayerState = G_GetEntityPlayerState(v6)) == NULL) || (p_currentAngles = &EntityPlayerState->viewangles, EntityPlayerState->vehicleState.entity == 2047) )
    p_currentAngles = &ent->r.currentAngles;
  AngleVectors(p_currentAngles, &forward, NULL, NULL);
  v9 = botData->botInfo.ent;
  v10 = ent->r.currentOrigin.v[0] - v9->r.currentOrigin.v[0];
  v12 = LODWORD(ent->r.currentOrigin.v[1]);
  v11 = ent->r.currentOrigin.v[1] - v9->r.currentOrigin.v[1];
  v13 = ent->r.currentOrigin.v[2] - v9->r.currentOrigin.v[2];
  *(float *)&v12 = fsqrt((float)((float)(v11 * v11) + (float)(v10 * v10)) + (float)(v13 * v13));
  _XMM4 = v12;
  __asm
  {
    vcmpless xmm0, xmm4, cs:__real@80000000
    vblendvps xmm0, xmm4, xmm1, xmm0
  }
  return (float)((float)((float)((float)(v10 * (float)(1.0 / *(float *)&_XMM0)) * forward.v[0]) + (float)((float)(v11 * (float)(1.0 / *(float *)&_XMM0)) * forward.v[1])) + (float)((float)(v13 * (float)(1.0 / *(float *)&_XMM0)) * forward.v[2])) < -0.1;
}

/*
==============
Bot_EntityIsConsideredDead
==============
*/
bool Bot_EntityIsConsideredDead(const gentity_s *ent)
{
  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7125, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( ent->health <= 0 || (unsigned int)Bot_EntityDeadWhileUsingRemote(ent) )
    return 1;
  if ( !ent->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7137, ASSERT_TYPE_ASSERT, "( ent->sentient )", (const char *)&queryFormat, "ent->sentient") )
    __debugbreak();
  return Sentient_IsAerial(ent->sentient) && Bot_IsAerialEntityInDeathStage(ent);
}

/*
==============
Bot_EntityIsInvisible
==============
*/
_BOOL8 Bot_EntityIsInvisible(const gentity_s *ent)
{
  const playerState_s *EntityPlayerStateConst; 

  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2136, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  EntityPlayerStateConst = G_GetEntityPlayerStateConst(ent);
  return EntityPlayerStateConst && GameModeFlagContainer<enum EntityStateFlagsCommon,enum EntityStateFlagsSP,enum EntityStateFlagsMP,32>::TestFlagInternal(&EntityPlayerStateConst->eFlags, ACTIVE, 0xCu) || GameModeFlagContainer<enum EntityStateFlagsCommon,enum EntityStateFlagsSP,enum EntityStateFlagsMP,32>::TestFlagInternal(&ent->s.lerp.eFlags, ACTIVE, 0xCu) || ent->s.eType == ET_INVISIBLE;
}

/*
==============
Bot_EntityIsJuggernaut
==============
*/
_BOOL8 Bot_EntityIsJuggernaut(const gentity_s *ent)
{
  const playerState_s *EntityPlayerStateConst; 

  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2084, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  EntityPlayerStateConst = G_GetEntityPlayerStateConst(ent);
  return EntityPlayerStateConst && BG_HasPerk(&EntityPlayerStateConst->perks, 0x2Fu);
}

/*
==============
Bot_EntityOccupiesLocation
==============
*/
_BOOL8 Bot_EntityOccupiesLocation(const gentity_s *ent, const vec3_t *origin, float distanceScalar)
{
  float v5; 
  _BOOL8 result; 

  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10086, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  result = 0;
  if ( COERCE_FLOAT(COERCE_UNSIGNED_INT(ent->r.currentOrigin.v[2] - origin->v[2]) & _xmm) <= (float)(ent->r.box.halfSize.v[2] * 2.0) )
  {
    v5 = origin->v[1] - ent->r.currentOrigin.v[1];
    if ( (float)((float)(v5 * v5) + (float)((float)(origin->v[0] - ent->r.currentOrigin.v[0]) * (float)(origin->v[0] - ent->r.currentOrigin.v[0]))) < (float)((float)((float)((float)(ent->r.box.halfSize.v[0] * 16.0) * distanceScalar) * ent->r.box.halfSize.v[0]) * distanceScalar) )
      return 1;
  }
  return result;
}

/*
==============
Bot_EntityOnScreenForMelee
==============
*/
int Bot_EntityOnScreenForMelee(bot_data_t *botData, const gentity_s *ent)
{
  float v4; 
  float fovDot; 
  int result; 
  vec3_t overrideAimPoint; 
  vec3_t vEyePosOut; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16428, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16429, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( !ent->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16430, ASSERT_TYPE_ASSERT, "( ent->sentient )", (const char *)&queryFormat, "ent->sentient") )
    __debugbreak();
  Sentient_GetEyePosition(ent->sentient, &vEyePosOut);
  v4 = ent->r.currentOrigin.v[1];
  fovDot = botData->botInfo.sight.fovDot;
  overrideAimPoint.v[0] = ent->r.currentOrigin.v[0];
  overrideAimPoint.v[2] = ent->r.currentOrigin.v[2];
  overrideAimPoint.v[1] = v4;
  if ( Bot_EntityWithinSpecificCombatFOV(botData, ent, fovDot, &vEyePosOut, NULL) )
    return 1;
  result = Bot_EntityWithinSpecificCombatFOV(botData, ent, botData->botInfo.sight.fovDot, &overrideAimPoint, NULL);
  if ( result )
    return 1;
  return result;
}

/*
==============
Bot_EntityUsingRiotShield
==============
*/
_BOOL8 Bot_EntityUsingRiotShield(const gentity_s *ent, int onlyPermanentShields)
{
  const playerState_s *EntityPlayerStateConst; 
  const playerState_s *v4; 
  const Weapon *ViewmodelWeapon; 
  bool v6; 
  _BOOL8 result; 

  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16297, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( !ent->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16298, ASSERT_TYPE_ASSERT, "( ent->sentient )", (const char *)&queryFormat, "ent->sentient") )
    __debugbreak();
  EntityPlayerStateConst = G_GetEntityPlayerStateConst(ent);
  v4 = EntityPlayerStateConst;
  result = 0;
  if ( EntityPlayerStateConst )
  {
    ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(EntityPlayerStateConst);
    v6 = BG_UsingAlternate(v4);
    if ( BG_IsRiotShield(ViewmodelWeapon, v6) )
      return 1;
  }
  return result;
}

/*
==============
Bot_EntityVisibleThroughWalls
==============
*/
_BOOL8 Bot_EntityVisibleThroughWalls(const bot_data_t *botData, const gentity_s *ent)
{
  signed __int64 v4; 
  gentity_s *v5; 
  float v6; 
  float v7; 
  float v8; 
  unsigned int EntHudOutlineIndex; 
  const HudOutlineDef *HudOutlineDefFromPlayerState; 
  _BOOL8 result; 
  __int64 v12; 
  __int64 v13; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6413, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6414, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState )", (const char *)&queryFormat, "botData->botInfo.playerState") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6415, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6416, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 196, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
    __debugbreak();
  v4 = ent - g_entities;
  if ( (unsigned int)v4 >= 0x800 )
  {
    LODWORD(v12) = ent - g_entities;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 199, ASSERT_TYPE_ASSERT, "(unsigned)( index ) < (unsigned)( ( 2048 ) )", "index doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v12, 2048) )
      __debugbreak();
  }
  v4 = (__int16)v4;
  if ( (unsigned int)(__int16)v4 >= 0x800 )
  {
    LODWORD(v13) = 2048;
    LODWORD(v12) = v4;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 207, ASSERT_TYPE_ASSERT, "(unsigned)( entityIndex ) < (unsigned)( ( 2048 ) )", "entityIndex doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v12, v13) )
      __debugbreak();
  }
  if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 208, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
    __debugbreak();
  if ( g_entities[v4].r.isInUse != g_entityIsInUse[v4] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 209, ASSERT_TYPE_ASSERT, "( g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex] )", (const char *)&queryFormat, "g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex]") )
    __debugbreak();
  if ( !g_entityIsInUse[v4] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6417, ASSERT_TYPE_ASSERT, "( G_IsEntityInUse( G_GetEntityIndex( ent ) ) )", (const char *)&queryFormat, "G_IsEntityInUse( G_GetEntityIndex( ent ) )") )
    __debugbreak();
  result = 1;
  if ( !Bot_IsHardwareEnt(ent) || !BG_HasPerk(&botData->botInfo.playerState->perks, 6u) || (v5 = botData->botInfo.ent, v6 = v5->r.currentOrigin.v[0] - ent->r.currentOrigin.v[0], v7 = v5->r.currentOrigin.v[1] - ent->r.currentOrigin.v[1], v8 = v5->r.currentOrigin.v[2] - ent->r.currentOrigin.v[2], (float)((float)((float)(v7 * v7) + (float)(v6 * v6)) + (float)(v8 * v8)) > 518400.0) )
  {
    EntHudOutlineIndex = G_HudOutline_GetEntHudOutlineIndex(ent);
    HudOutlineDefFromPlayerState = BG_GetHudOutlineDefFromPlayerState(botData->botInfo.playerState, EntHudOutlineIndex);
    if ( !Bot_CanSeeEntityOutline(botData, ent) || !HudOutlineDefFromPlayerState || !HudOutlineDefFromPlayerState->drawOccludedPixels )
      return 0;
  }
  return result;
}

/*
==============
Bot_EntityWithinSpecificCombatFOV
==============
*/
__int64 Bot_EntityWithinSpecificCombatFOV(bot_data_t *botData, const gentity_s *ent, float arcCos, const vec3_t *overrideAimPoint, float *dotResult)
{
  gentity_s *v8; 
  unsigned int v9; 
  AIBotInterface *m_pAI; 
  float v11; 
  const gentity_s *v12; 
  sentient_s *sentient; 
  __int128 v14; 
  float v18; 
  AIBotWrapper v20; 
  vec3_t aimPoint; 
  vec3_t eyePoint; 
  vec3_t vEyeDir; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8968, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8969, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  AICommonInterface::AICommonInterface(&v20.m_botInterface);
  v20.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v20.m_botAgentInterface);
  v8 = botData->botInfo.ent;
  v9 = 0;
  v20.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v20.m_pAI = NULL;
  AIBotWrapper::Setup(&v20, v8);
  m_pAI = v20.m_pAI;
  if ( !v20.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8971, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  AICommonInterface::GetEyeDirection(m_pAI, &vEyeDir);
  m_pAI->GetEyePosition(m_pAI, &eyePoint);
  if ( overrideAimPoint )
  {
    v11 = overrideAimPoint->v[1];
    aimPoint.v[0] = overrideAimPoint->v[0];
    aimPoint.v[2] = overrideAimPoint->v[2];
    aimPoint.v[1] = v11;
  }
  else
  {
    if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
      v12 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
    else
      v12 = NULL;
    if ( ent == v12 )
    {
      Bot_GetEnemyAimPoints(botData, ent, &aimPoint, &eyePoint);
    }
    else
    {
      sentient = ent->sentient;
      if ( sentient )
        Sentient_GetHeadPosition(sentient, &aimPoint);
      else
        G_Utils_EntityCentroid(ent, &aimPoint);
    }
  }
  v14 = LODWORD(aimPoint.v[1]);
  *(float *)&v14 = fsqrt((float)((float)((float)(aimPoint.v[1] - eyePoint.v[1]) * (float)(aimPoint.v[1] - eyePoint.v[1])) + (float)((float)(aimPoint.v[0] - eyePoint.v[0]) * (float)(aimPoint.v[0] - eyePoint.v[0]))) + (float)((float)(aimPoint.v[2] - eyePoint.v[2]) * (float)(aimPoint.v[2] - eyePoint.v[2])));
  _XMM4 = v14;
  __asm
  {
    vcmpless xmm0, xmm4, cs:__real@80000000
    vblendvps xmm0, xmm4, xmm1, xmm0
  }
  v18 = (float)((float)((float)((float)(aimPoint.v[0] - eyePoint.v[0]) * (float)(1.0 / *(float *)&_XMM0)) * vEyeDir.v[0]) + (float)((float)((float)(aimPoint.v[1] - eyePoint.v[1]) * (float)(1.0 / *(float *)&_XMM0)) * vEyeDir.v[1])) + (float)((float)((float)(aimPoint.v[2] - eyePoint.v[2]) * (float)(1.0 / *(float *)&_XMM0)) * vEyeDir.v[2]);
  if ( dotResult )
    *dotResult = v18;
  LOBYTE(v9) = arcCos <= v18;
  return v9;
}

/*
==============
Bot_FinalizeCmdTime
==============
*/
void Bot_FinalizeCmdTime(usercmd_s *cmd)
{
  int time; 

  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5501, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  time = SvPersistentGlobalsMP::GetPersistentGlobalsMP()->time;
  cmd->serverTime = time;
  cmd->commandTime = time;
  cmd->inputTime = time;
}

/*
==============
Bot_FindNodeRandom
==============
*/
__int64 Bot_FindNodeRandom(const bot_data_t *botData, const vec3_t *nonBotOverrideOrigin, const vec3_t *nonBotOverrideAngles)
{
  signed __int64 v3; 
  void *v4; 
  const bot_data_t *v7; 
  const char *v8; 
  const char *v9; 
  int v10; 
  float v13; 
  int v14; 
  __int64 v15; 
  unsigned __int16 i; 
  float *p_number; 
  float v18; 
  float v19; 
  float v20; 
  const vec3_t *p_viewangles; 
  __int128 v22; 
  int v26; 
  int v27; 
  int v28; 
  int NodeTeam; 
  int v30; 
  int Count; 
  int v32; 
  int v33; 
  int v34; 
  __int64 v35; 
  char v36; 
  team_t eTeam; 
  unsigned int v38; 
  const char *fmt; 
  const char *v40; 
  int v41; 
  int v42; 
  int v43; 
  unsigned int v44; 
  int v45; 
  int v46; 
  char *v47; 
  __int16 v48; 
  int v49; 
  unsigned __int16 v50; 
  pathnode_t *v51; 
  unsigned __int16 v52; 
  const char *MapName; 
  const char *v54; 
  float v55; 
  int v56; 
  float v57; 
  __int128 v58; 
  __int16 v61; 
  unsigned __int16 v62; 
  __int64 v64; 
  __int64 v65; 
  __int16 v66; 
  int v67; 
  int v68; 
  int anyValidZones; 
  int v70; 
  int v71; 
  vec3_t forward; 
  vec3_t pos; 
  unsigned __int8 validZones[8]; 
  __int64 v76; 
  __int64 v77; 
  __int64 v78; 
  char v79[393226]; 

  v4 = alloca(v3);
  v7 = botData;
  if ( !botData )
  {
    if ( nonBotOverrideOrigin && nonBotOverrideAngles )
      goto LABEL_15;
    v8 = "botData || (nonBotOverrideOrigin && nonBotOverrideAngles)";
    v9 = "( botData || (nonBotOverrideOrigin && nonBotOverrideAngles) )";
    v10 = 21018;
    goto LABEL_13;
  }
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21023, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !v7->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21024, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
    __debugbreak();
  if ( !v7->botInfo.playerState )
  {
    v8 = "botData->botInfo.playerState";
    v9 = "( botData->botInfo.playerState )";
    v10 = 21025;
LABEL_13:
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", v10, ASSERT_TYPE_ASSERT, v9, (const char *)&queryFormat, v8) )
      __debugbreak();
  }
LABEL_15:
  _XMM0 = LODWORD(s_botWorldBounds.halfSize.v[0]);
  __asm { vmaxss  xmm1, xmm0, dword ptr cs:s_botWorldBounds.halfSize+4 }
  v13 = *(float *)&_XMM1 * *(float *)&_XMM1;
  v14 = Path_NodeCount();
  v67 = v14;
  Sys_ProfBeginNamedEvent(0xFFFFFFFF, "Bot_FindNodeRandom");
  v66 = -1;
  v70 = 0xFFFF;
  v15 = 0i64;
  for ( i = 0; i < v14; ++i )
    *(_WORD *)&v79[2 * i + 2] = i;
  if ( v7 )
  {
    p_number = (float *)&v7->botInfo.ent->s.number;
    v18 = p_number[76];
    v19 = p_number[77];
    v20 = p_number[78];
    p_viewangles = &v7->botInfo.playerState->viewangles;
  }
  else
  {
    v18 = nonBotOverrideOrigin->v[0];
    v19 = nonBotOverrideOrigin->v[1];
    v20 = nonBotOverrideOrigin->v[2];
    p_viewangles = nonBotOverrideAngles;
  }
  AngleVectors(p_viewangles, &forward, NULL, NULL);
  v22 = LODWORD(forward.v[0]);
  *(float *)&v22 = fsqrt((float)(*(float *)&v22 * *(float *)&v22) + (float)(forward.v[1] * forward.v[1]));
  _XMM2 = v22;
  __asm
  {
    vcmpless xmm0, xmm2, cs:__real@80000000
    vblendvps xmm1, xmm2, xmm3, xmm0
  }
  *(float *)&_XMM1 = 1.0 / *(float *)&_XMM1;
  forward.v[0] = forward.v[0] * *(float *)&_XMM1;
  forward.v[1] = forward.v[1] * *(float *)&_XMM1;
  forward.v[2] = 0.0;
  v26 = 0x7FFFFFFF;
  v71 = 0x7FFFFFFF;
  v27 = 0;
  *(_QWORD *)validZones = -1i64;
  v76 = -1i64;
  v77 = -1i64;
  v78 = -1i64;
  v28 = 0;
  anyValidZones = 0;
  if ( Path_ZoneCount() )
  {
    if ( level.teammode != TEAMMODE_FFA )
    {
      if ( v7 )
      {
        NodeTeam = Path_GetNodeTeam(v7->botInfo.sentient->eTeam);
        v30 = 0;
        if ( Path_ZoneCount() > 0 )
        {
          do
          {
            Count = Bot_ZoneGetCount(v30, NodeTeam, BOT_ZONE_COUNT_ALLY);
            v32 = Bot_ZoneGetCount(v30, NodeTeam, BOT_ZONE_COUNT_PATH_ALLY) + Count;
            if ( v26 < v32 )
              v32 = v26;
            v26 = v32;
            if ( Bot_ZoneGetCount(v30, NodeTeam, BOT_ZONE_COUNT_ENEMY_PREDICT) > 0 )
            {
              v33 = Bot_ZoneGetCount(v30, NodeTeam, BOT_ZONE_COUNT_ENEMY_PREDICT);
              if ( v27 > v33 )
                v33 = v27;
              v27 = v33;
            }
            ++v30;
          }
          while ( v30 < Path_ZoneCount() );
          v71 = v32;
          v28 = 0;
        }
      }
    }
  }
  v34 = 0;
  if ( Path_ZoneCount() > 0 )
  {
    while ( 1 )
    {
      if ( v34 >= s_botZoneDataCount )
      {
        LODWORD(v65) = s_botZoneDataCount;
        LODWORD(v64) = v34;
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21107, ASSERT_TYPE_ASSERT, "(unsigned)( iZone ) < (unsigned)( s_botZoneDataCount )", "iZone doesn't index s_botZoneDataCount\n\t%i not in [0, %i)", v64, v65) )
          __debugbreak();
      }
      v35 = v34 / 8;
      v36 = v34 % 8;
      if ( (unsigned int)v35 >= 0x20 )
      {
        LODWORD(v65) = 32;
        LODWORD(v64) = v34 / 8;
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21108, ASSERT_TYPE_ASSERT, "(unsigned)( (iZone / 8) ) < (unsigned)( ( ( 256 ) / 8 ) )", "(iZone / 8) doesn't index BOT_ZONE_STACK_VISIT_MAX\n\t%i not in [0, %i)", v64, v65) )
          __debugbreak();
      }
      if ( Path_ZoneCount() > 0 && Path_ZoneIsTraversalIsland(v34) )
        validZones[v35] &= ~(1 << v36);
      if ( !Path_ZoneCount() || level.teammode == TEAMMODE_FFA || !botData )
        goto LABEL_62;
      eTeam = botData->botInfo.sentient->eTeam;
      if ( Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) )
      {
        v38 = 2;
        if ( eTeam <= TEAM_TWO )
          v38 = eTeam - 1;
        if ( v38 < 3 )
          goto LABEL_56;
        LODWORD(v65) = 3;
        fmt = "result doesn't index MAX_NODE_TEAMS_SP\n\t%i not in [0, %i)";
        v40 = "(unsigned)( result ) < (unsigned)( (3) )";
        v41 = 205;
      }
      else
      {
        v38 = 1;
        if ( eTeam <= TEAM_ONE )
          v38 = eTeam - 1;
        if ( v38 < 2 )
          goto LABEL_56;
        LODWORD(v65) = 2;
        fmt = "result doesn't index MAX_NODE_TEAMS_MP\n\t%i not in [0, %i)";
        v40 = "(unsigned)( result ) < (unsigned)( (2) )";
        v41 = 210;
      }
      LODWORD(v64) = v38;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\pathnode.h", v41, ASSERT_TYPE_ASSERT, v40, fmt, v64, v65) )
        __debugbreak();
LABEL_56:
      v42 = Bot_ZoneGetCount(v34, v38, BOT_ZONE_COUNT_ALLY);
      if ( Bot_ZoneGetCount(v34, v38, BOT_ZONE_COUNT_PATH_ALLY) + v42 > v71 )
        validZones[v35] &= ~(1 << v36);
      v43 = Bot_ZoneGetCount(v34, v38, BOT_ZONE_COUNT_ENEMY_PREDICT);
      if ( v27 > 0 && v43 <= 0 )
        validZones[v35] &= ~(1 << v36);
      v28 = anyValidZones;
LABEL_62:
      if ( !v28 )
      {
        v28 = (1 << v36) & validZones[v35];
        anyValidZones = v28;
      }
      if ( ++v34 >= Path_ZoneCount() )
      {
        v15 = 0i64;
        v7 = botData;
        break;
      }
    }
  }
  v44 = 0;
  v45 = 7;
  if ( GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&v7->botInfo.playerState->pm_flags, ACTIVE, 0x21u) )
    v45 = 6;
  if ( GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&v7->botInfo.playerState->pm_flags, ACTIVE, 0x23u) )
    v45 &= ~4u;
  if ( GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&v7->botInfo.playerState->pm_flags, ACTIVE, 0x22u) )
    v45 &= ~2u;
  v46 = v67;
  v47 = &v79[2 * v67];
  v48 = -1;
  do
  {
    if ( v46 <= 0 )
      break;
    v49 = G_irand(0, v46);
    v50 = *(_WORD *)&v79[2 * v49 + 2];
    *(_WORD *)&v79[2 * v49 + 2] = *(_WORD *)v47;
    v68 = --v46;
    v47 -= 2;
    if ( Path_NodeValid(v50) )
    {
      v51 = Path_ConvertIndexToNode(v50);
      if ( !v51 )
      {
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21164, ASSERT_TYPE_ASSERT, "( node )", (const char *)&queryFormat, "node") )
          __debugbreak();
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20895, ASSERT_TYPE_ASSERT, "( node )", (const char *)&queryFormat, "node") )
          __debugbreak();
      }
      v52 = Path_ConvertNodeToIndex(v51);
      if ( !Path_IsNodeDisconnected(v52) && (Path_AllowedStancesForNode(v51) & v45) != 0 && !v51->constant.parent.index )
      {
        if ( (unsigned int)v15 >= 0xFFFF )
        {
          MapName = SV_Game_GetMapName();
          Com_Error_impl(ERR_DROP, (const ObfuscateErrorText)&stru_1440CE1B0, 275i64, 0xFFFFi64, MapName);
        }
        else
        {
          *(_WORD *)&v79[2 * v15 + 262146] = v50;
          v15 = (unsigned int)(v15 + 1);
        }
        if ( !Bot_RandomNodeInvalidSelective(botData, v51, validZones, anyValidZones) )
        {
          if ( v44 >= 0xFFFF )
          {
            v54 = SV_Game_GetMapName();
            Com_Error_impl(ERR_DROP, (const ObfuscateErrorText)&stru_1440CE210, 276i64, 0xFFFFi64, v54);
          }
          else
          {
            *(_WORD *)&v79[2 * v44++ + 131074] = v50;
          }
          pathnode_t::GetPos(v51, &pos);
          v55 = (float)((float)((float)(v19 - pos.v[1]) * (float)(v19 - pos.v[1])) + (float)((float)(v18 - pos.v[0]) * (float)(v18 - pos.v[0]))) + (float)((float)(v20 - pos.v[2]) * (float)(v20 - pos.v[2]));
          v56 = v70;
          if ( v55 > v13 )
            LOWORD(v56) = v50;
          v70 = v56;
          if ( v55 > 640000.0 )
          {
            v57 = pos.v[0] - v18;
            v58 = LODWORD(pos.v[1]);
            *(float *)&v58 = (float)((float)(pos.v[1] - v19) * (float)(pos.v[1] - v19)) + (float)(v57 * v57);
            if ( *(float *)&v58 > 0.0 )
            {
              _XMM1 = v58;
              __asm { vrsqrtss xmm2, xmm1, xmm2 }
              v61 = v66;
              if ( (float)((float)((float)(*(float *)&_XMM2 * v57) * forward.v[0]) + (float)((float)(*(float *)&_XMM2 * (float)(pos.v[1] - v19)) * forward.v[1])) > 0.5 )
                v61 = v50;
              v66 = v61;
            }
          }
        }
      }
      v46 = v68;
    }
    v48 = v66;
  }
  while ( v66 == -1 );
  v62 = v70;
  if ( v48 != -1 )
    v62 = v48;
  if ( v62 == 0xFFFF )
  {
    v62 = -1;
    if ( !v44 || (v62 = *(_WORD *)&v79[2 * G_irand(0, v44) + 131074], v62 == 0xFFFF) )
    {
      if ( (_DWORD)v15 )
        v62 = *(_WORD *)&v79[2 * G_irand(0, v15) + 262146];
    }
  }
  Sys_ProfEndNamedEvent();
  return v62;
}

/*
==============
Bot_FinishedSearchingForEnemy
==============
*/
bool Bot_FinishedSearchingForEnemy(const bot_data_t *botData, const gentity_s *enemy)
{
  signed __int64 v4; 
  char *v5; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17375, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !enemy && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17376, ASSERT_TYPE_ASSERT, "( enemy )", (const char *)&queryFormat, "enemy") )
    __debugbreak();
  v4 = 60 * (enemy->sentient - level.sentients);
  v5 = (char *)&botData->scriptedAgentInfo + v4 + 11644;
  if ( (const bot_data_t *)((char *)botData + v4) == (const bot_data_t *)-11652i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17379, ASSERT_TYPE_ASSERT, "( botTgtSentientInfo )", (const char *)&queryFormat, "botTgtSentientInfo") )
    __debugbreak();
  return *((_DWORD *)v5 + 9) >= Bot_GetLastKnownEntPosAndTime(botData, enemy, NULL);
}

/*
==============
Bot_ForceClaimNode
==============
*/
void Bot_ForceClaimNode(bot_info_t *botInfo, pathnode_t *node)
{
  sentient_s *sentient; 
  sentient_s *v5; 
  __int64 v6; 
  int v7; 
  int v8; 
  __int64 v9; 
  team_t eTeam; 
  unsigned int v11; 
  const char *fmt; 
  const char *v13; 
  int v14; 
  int v15; 
  pathnode_t *v16; 
  sentient_s *NodeOwner; 
  __int64 v18; 
  sentient_s *v19; 
  __int64 v20; 
  sentient_s *v21; 
  sentient_s *v22; 
  bot_data_t *EntityData; 
  __int64 v24; 
  __int64 v25; 
  sentient_s *claimer[3]; 

  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23095, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  if ( !botInfo->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23096, ASSERT_TYPE_ASSERT, "( botInfo->sentient )", (const char *)&queryFormat, "botInfo->sentient") )
    __debugbreak();
  sentient = botInfo->sentient;
  if ( sentient->pClaimedNode != node )
  {
    Sentient_SetPrevClaimNode(sentient);
    v5 = botInfo->sentient;
    if ( v5->pClaimedNode )
      Path_RelinquishNodeNow(v5);
    v6 = 0i64;
    v7 = 0;
    v8 = 0;
    v9 = 0i64;
    while ( 1 )
    {
      eTeam = botInfo->sentient->eTeam;
      if ( Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) )
      {
        v11 = 2;
        if ( eTeam <= TEAM_TWO )
          v11 = eTeam - 1;
        if ( v11 < 3 )
          goto LABEL_22;
        LODWORD(v25) = 3;
        fmt = "result doesn't index MAX_NODE_TEAMS_SP\n\t%i not in [0, %i)";
        v13 = "(unsigned)( result ) < (unsigned)( (3) )";
        v14 = 205;
      }
      else
      {
        v11 = 1;
        if ( eTeam <= TEAM_ONE )
          v11 = eTeam - 1;
        if ( v11 < 2 )
          goto LABEL_22;
        LODWORD(v25) = 2;
        fmt = "result doesn't index MAX_NODE_TEAMS_MP\n\t%i not in [0, %i)";
        v13 = "(unsigned)( result ) < (unsigned)( (2) )";
        v14 = 210;
      }
      LODWORD(v24) = v11;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\pathnode.h", v14, ASSERT_TYPE_ASSERT, v13, fmt, v24, v25) )
        __debugbreak();
LABEL_22:
      v15 = v11;
      v16 = node;
      NodeOwner = Path_GetNodeOwner(node, v8, v15);
      v18 = 0i64;
      if ( NodeOwner )
      {
        do
        {
          if ( v18 >= v9 )
            break;
          v19 = NULL;
          if ( claimer[v18] != NodeOwner )
            v19 = NodeOwner;
          ++v18;
          NodeOwner = v19;
        }
        while ( v19 );
        if ( NodeOwner )
        {
          ++v7;
          claimer[v9++] = NodeOwner;
        }
      }
      if ( ++v8 >= 3 )
      {
        if ( v7 > 0i64 )
        {
          v20 = 0i64;
          do
          {
            v21 = claimer[v20];
            if ( v21 )
            {
              if ( v21->pClaimedNode )
                Path_RelinquishNodeNow(claimer[v20]);
              Bot_BadPath(v21->ent);
            }
            ++v20;
          }
          while ( v20 < v7 );
          v16 = node;
        }
        if ( Path_CanClaimNode(v16, botInfo->sentient) )
          Path_ClaimNode(v16, botInfo->sentient);
        if ( v7 > 0i64 )
        {
          do
          {
            v22 = claimer[v6];
            if ( v22 && v22 != botInfo->sentient )
            {
              if ( !v22->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11048, ASSERT_TYPE_ASSERT, "( otherSentient->ent )", (const char *)&queryFormat, "otherSentient->ent") )
                __debugbreak();
              if ( SV_BotIsBotEnt(v22->ent) )
              {
                EntityData = Bot_GetEntityData(v22->ent);
                if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11056, ASSERT_TYPE_ASSERT, "( otherBotData )", (const char *)&queryFormat, "otherBotData") )
                  __debugbreak();
                if ( (EntityData->botInfo.flags & 0x800) != 0 )
                  Bot_Badplace_PathEscape(EntityData);
              }
            }
            ++v6;
          }
          while ( v6 < v7 );
        }
        return;
      }
    }
  }
}

/*
==============
Bot_FreeNavigator
==============
*/
void Bot_FreeNavigator(bot_info_t *botInfo)
{
  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13911, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  Nav_FreeNavigator(botInfo->pNavigator);
  botInfo->pNavigator = NULL;
}

/*
==============
Bot_GetActiveGoal
==============
*/
void Bot_GetActiveGoal(const bot_data_t *botData, vec3_t *goal)
{
  pathnode_t *nearestNode; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23661, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23662, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  goal->v[0] = botData->botInfo.activeGoal.pos.v[0];
  goal->v[1] = botData->botInfo.activeGoal.pos.v[1];
  goal->v[2] = botData->botInfo.activeGoal.pos.v[2];
  nearestNode = botData->botInfo.activeGoal.nearestNode;
  if ( nearestNode )
    pathnode_t::WorldifyPosFromParent(nearestNode, goal);
}

/*
==============
Bot_GetAdjacentIndoorZones
==============
*/
__int64 Bot_GetAdjacentIndoorZones(bot_info_t *botInfo, float indoorPercent, unsigned __int8 *indoorZonesMask, int maskSize)
{
  size_t v5; 
  int v7; 
  const pathnode_t *v8; 
  int v9; 
  int i; 
  pathnode_t *v11; 
  unsigned int v12; 
  pathnode_t *pNextOpen; 
  pathnode_t *v14; 
  int v15; 
  double v16; 
  int v17; 
  unsigned int v18; 
  char v19; 
  int v20; 
  __int64 v21; 
  pathnode_t *v22; 
  int v23; 
  double v24; 
  __int64 v26; 
  __int64 v27; 

  v5 = maskSize;
  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10725, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  if ( !botInfo->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10726, ASSERT_TYPE_ASSERT, "( botInfo->sentient )", (const char *)&queryFormat, "botInfo->sentient") )
    __debugbreak();
  v7 = Path_ZoneCount();
  v8 = Sentient_NearestNode(botInfo->sentient);
  if ( !v8 )
    return 0xFFFFFFFFi64;
  v9 = Path_NodeZoneFromNode(v8);
  if ( v9 == 255 )
    return 0xFFFFFFFFi64;
  for ( i = 0; i < v7; *(_QWORD *)&v11->transient.nodeCost = 0i64 )
  {
    v11 = Path_ConvertZoneIndexToZone(i++);
    *(_QWORD *)&v11->transient.iSearchFrame = 0i64;
    v11->transient.pNextOpen = NULL;
    v11->transient.pPrevOpen = NULL;
    v11->transient.pParent = NULL;
    *(_QWORD *)&v11->transient.fCost = 0i64;
  }
  memset_0(indoorZonesMask, 255, v5);
  v12 = 0;
  pNextOpen = Path_ConvertZoneIndexToZone(v9);
  if ( !pNextOpen && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10756, ASSERT_TYPE_ASSERT, "( nodeCur )", (const char *)&queryFormat, "nodeCur") )
    __debugbreak();
  pNextOpen->transient.linkIndex = 1;
  v14 = pNextOpen;
  do
  {
    v15 = Path_NodeZoneFromNode(pNextOpen);
    v16 = SV_BotZoneGetIndoorPercent(v15);
    if ( *(float *)&v16 >= indoorPercent )
    {
      v17 = v15 % 8;
      v18 = v15 / 8;
      v19 = v17;
      if ( v18 >= (unsigned int)v5 )
      {
        LODWORD(v27) = v5;
        LODWORD(v26) = v18;
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10765, ASSERT_TYPE_ASSERT, "(unsigned)( nodeCurZone / 8 ) < (unsigned)( maskSize )", "nodeCurZone / 8 doesn't index maskSize\n\t%i not in [0, %i)", v26, v27) )
          __debugbreak();
      }
      indoorZonesMask[v18] &= ~(1 << v19);
      ++v12;
    }
    v20 = 0;
    if ( pNextOpen->dynamic.wLinkCount > 0 )
    {
      v21 = 0i64;
      do
      {
        v22 = Path_ConvertIndexToNode(pNextOpen->constant.Links[v21].nodeNum);
        v23 = Path_NodeZoneFromNode(v22);
        if ( !v22->transient.linkIndex )
        {
          v24 = SV_BotZoneGetIndoorPercent(v23);
          if ( *(float *)&v24 >= indoorPercent )
          {
            v22->transient.linkIndex = 1;
            v14->transient.pNextOpen = v22;
            v14 = v22;
          }
        }
        ++v20;
        ++v21;
      }
      while ( v20 < pNextOpen->dynamic.wLinkCount );
    }
    pNextOpen = pNextOpen->transient.pNextOpen;
  }
  while ( pNextOpen );
  return v12;
}

/*
==============
Bot_GetBotDifficultyFromMenu
==============
*/
__int64 Bot_GetBotDifficultyFromMenu(const bot_data_t *botData)
{
  const dvar_t *v1; 
  const dvar_t *v2; 
  GameStateInfo *v4; 

  v1 = DVARINT_bot_DebugDifficulty;
  if ( !DVARINT_bot_DebugDifficulty && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DebugDifficulty") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v1);
  if ( v1->current.integer >= 4 )
  {
    v4 = GameStateInfo_Get();
    if ( !v4 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5045, ASSERT_TYPE_ASSERT, "( gInfo )", (const char *)&queryFormat, "gInfo") )
      __debugbreak();
    if ( !BG_BotsUsingTeamDifficulty() && v4->usingBotsDifficulty[0] != v4->usingBotsDifficulty[1] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5049, ASSERT_TYPE_ASSERT, "( BG_BotsUsingTeamDifficulty() || (gInfo->usingBotsDifficulty[0] == gInfo->usingBotsDifficulty[1]) )", (const char *)&queryFormat, "BG_BotsUsingTeamDifficulty() || (gInfo->usingBotsDifficulty[0] == gInfo->usingBotsDifficulty[1])") )
      __debugbreak();
    if ( v4->usingBotsDifficulty[0] >= 5u && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5050, ASSERT_TYPE_ASSERT, "( gInfo->usingBotsDifficulty[0] < BOT_DIFFICULTY_COUNT )", (const char *)&queryFormat, "gInfo->usingBotsDifficulty[0] < BOT_DIFFICULTY_COUNT") )
      __debugbreak();
    return v4->usingBotsDifficulty[0];
  }
  else
  {
    v2 = DVARINT_bot_DebugDifficulty;
    if ( !DVARINT_bot_DebugDifficulty && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DebugDifficulty") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v2);
    return v2->current.unsignedInt;
  }
}

/*
==============
Bot_GetBotInfoFromNetBuffer
==============
*/
bot_info_t *Bot_GetBotInfoFromNetBuffer(const SvClientMP *bot)
{
  if ( bot )
    return (bot_info_t *)&bot->netBuf.reliableCommands.m_entries[0].size;
  if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20424, ASSERT_TYPE_ASSERT, "( bot )", (const char *)&queryFormat, "bot") )
    __debugbreak();
  return (bot_info_t *)1376;
}

/*
==============
Bot_GetBotPersistentMatchData
==============
*/
bot_match_data_t *Bot_GetBotPersistentMatchData(const SvClientMP *bot)
{
  if ( bot )
    return (bot_match_data_t *)&bot->netBuf.reliableCommands.m_buffer[25340];
  if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20527, ASSERT_TYPE_ASSERT, "( bot )", (const char *)&queryFormat, "bot") )
    __debugbreak();
  return (bot_match_data_t *)30808;
}

/*
==============
Bot_GetBotPersonalityFromMenu
==============
*/
__int64 Bot_GetBotPersonalityFromMenu(const bot_data_t *botData)
{
  int flags; 
  int v3; 
  int v4; 
  unsigned int v5; 
  __int64 v7; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5062, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  flags = botData->botMatchData.flags;
  v3 = G_rand();
  v4 = 1;
  if ( (flags & 0x20) != 0 )
    v4 = 3;
  v5 = v3 % v4;
  if ( (unsigned int)(v3 % v4) >= 3 )
  {
    LODWORD(v7) = v3 % v4;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5081, ASSERT_TYPE_ASSERT, "(unsigned)( personalityChosen ) < (unsigned)( BOT_PERSONALITY_DEFAULT )", "personalityChosen doesn't index BOT_PERSONALITY_DEFAULT\n\t%i not in [0, %i)", v7, 3) )
      __debugbreak();
  }
  return v5;
}

/*
==============
Bot_GetCharacterIndex
==============
*/
__int64 Bot_GetCharacterIndex(const bot_data_t *botData)
{
  gentity_s *ent; 
  unsigned int m_clientCount; 
  unsigned int v4; 
  unsigned int v5; 
  __int64 v7; 
  __int64 v8; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1204, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1205, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !G_Utils_IsClientOrAgent(botData->botInfo.ent) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1206, ASSERT_TYPE_ASSERT, "( G_Utils_IsClientOrAgent( botData->botInfo.ent ) )", (const char *)&queryFormat, "G_Utils_IsClientOrAgent( botData->botInfo.ent )") )
    __debugbreak();
  ent = botData->botInfo.ent;
  if ( ent->client )
  {
    if ( ent->s.number >= SvClient::ms_clientCount )
    {
      LODWORD(v7) = ent->s.number;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1210, ASSERT_TYPE_ASSERT, "(unsigned)( botData->botInfo.ent->s.number ) < (unsigned)( SvClient::GetClientCount() )", "botData->botInfo.ent->s.number doesn't index SvClient::GetClientCount()\n\t%i not in [0, %i)", v7, SvClient::ms_clientCount) )
LABEL_30:
        __debugbreak();
    }
  }
  else if ( ent->agent )
  {
    if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 168, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
      __debugbreak();
    if ( (int)ComCharacterLimits::ms_gameData.m_clientCount > botData->botInfo.ent->s.number )
      goto LABEL_43;
    if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 168, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
      __debugbreak();
    m_clientCount = ComCharacterLimits::ms_gameData.m_clientCount;
    if ( botData->botInfo.ent->s.number > (int)(m_clientCount + SvPersistentGlobalsMP::GetPersistentGlobalsMP()->agentCount) )
    {
LABEL_43:
      if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 168, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
        __debugbreak();
      v4 = ComCharacterLimits::ms_gameData.m_clientCount;
      v5 = SvPersistentGlobalsMP::GetPersistentGlobalsMP()->agentCount + v4;
      if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 168, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
        __debugbreak();
      LODWORD(v7) = botData->botInfo.ent->s.number;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1212, ASSERT_TYPE_ASSERT, "( ComCharacterLimits::GetAgentEntityIndexOffset() ) <= ( botData->botInfo.ent->s.number ) && ( botData->botInfo.ent->s.number ) <= ( ComCharacterLimits::GetAgentEntityIndexOffset() + SvPersistentGlobalsMP::GetAgentCount() )", "botData->botInfo.ent->s.number not in [ComCharacterLimits::GetAgentEntityIndexOffset(), ComCharacterLimits::GetAgentEntityIndexOffset() + SvPersistentGlobalsMP::GetAgentCount()]\n\t%i not in [%i, %i]", v7, ComCharacterLimits::ms_gameData.m_clientCount, v5) )
        goto LABEL_30;
    }
  }
  if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
    __debugbreak();
  if ( botData->botInfo.ent->s.number >= ComCharacterLimits::ms_gameData.m_characterCount )
  {
    if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
      __debugbreak();
    LODWORD(v8) = ComCharacterLimits::ms_gameData.m_characterCount;
    LODWORD(v7) = botData->botInfo.ent->s.number;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1215, ASSERT_TYPE_ASSERT, "(unsigned)( botData->botInfo.ent->s.number ) < (unsigned)( ComCharacterLimits::GetCharacterMaxCount() )", "botData->botInfo.ent->s.number doesn't index ComCharacterLimits::GetCharacterMaxCount()\n\t%i not in [0, %i)", v7, v8) )
      __debugbreak();
  }
  return (unsigned int)botData->botInfo.ent->s.number;
}

/*
==============
Bot_GetClientData
==============
*/
client_net_buffers_t *Bot_GetClientData(SvClientMP *bot)
{
  signed __int64 v2; 
  __int64 v4; 
  __int64 v5; 

  if ( !bot && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1139, ASSERT_TYPE_ASSERT, "( bot )", (const char *)&queryFormat, "bot") )
    __debugbreak();
  if ( bot->state != CS_ACTIVE && bot->migrationState != CS_ACTIVE && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1145, ASSERT_TYPE_ASSERT, "( (bot->state == SvClientConnectionState::CS_ACTIVE) || (bot->migrationState == SvClientConnectionState::CS_ACTIVE) )", (const char *)&queryFormat, "(bot->state == SvClientConnectionState::CS_ACTIVE) || (bot->migrationState == SvClientConnectionState::CS_ACTIVE)") )
    __debugbreak();
  if ( !*(_QWORD *)&bot->netBuf.reliableCommands.m_entries[2].size )
  {
    if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
      __debugbreak();
    v2 = ((char *)bot - (char *)SvClient::GetCommonClient(0)) / 379488;
    if ( (unsigned int)v2 >= 0xC8 )
    {
      LODWORD(v4) = v2;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 1072, ASSERT_TYPE_ASSERT, "(unsigned)( index ) < (unsigned)( 200 )", "index doesn't index MAX_CLIENTS_MP\n\t%i not in [0, %i)", v4, 200) )
        __debugbreak();
    }
    LODWORD(v5) = level.time;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1153, ASSERT_TYPE_ASSERT, "(botData->botInfo.sentientInfo != nullptr)", "%s\n\t[BOTS] (%d) botData->botInfo.sentientInfo is NULL for for client %i (%s)", "botData->botInfo.sentientInfo != nullptr", v5, v2, bot->name) )
      __debugbreak();
  }
  if ( *(_DWORD *)&bot->netBuf.reliableCommands.TYPE_NOT_SPECIFIED != -17973521 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1156, ASSERT_TYPE_ASSERT, "( botData->botDataHeader == 0xFEEDBEEF )", (const char *)&queryFormat, "botData->botDataHeader == BOT_DATA_MAGIC_NUMBER") )
    __debugbreak();
  if ( *(_DWORD *)&bot->netBuf.reliableCommands.m_buffer[126948] != -17973521 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1157, ASSERT_TYPE_ASSERT, "( botData->botDataFooter == 0xFEEDBEEF )", (const char *)&queryFormat, "botData->botDataFooter == BOT_DATA_MAGIC_NUMBER") )
    __debugbreak();
  return &bot->netBuf;
}

/*
==============
Bot_GetClosestCharacterList
==============
*/
__int64 Bot_GetClosestCharacterList(gentity_s *entity, const vec3_t *originPoint, const float maxDist, int onlyAI, int allowScriptedAgents, int excludeSelf, int onlyVisibleClients, const bitarray<224> *teamFlags, gentity_s **results, int limit)
{
  int v14; 
  int v15; 
  __int64 v16; 
  __int64 i; 
  gentity_s *v18; 
  __int16 EntityIndex; 
  const SvClientMP *MpClient; 
  int IsClientConnected; 
  bitarray_base<bitarray<224> > *AllTeamFlags; 
  const SvClientMP *v23; 
  int IsAgentScripted; 
  int v25; 
  bot_data_t *EntityData; 
  float v27; 
  float v28; 
  int v29; 
  __int64 v30; 
  __int64 v31; 
  int v32; 
  float v33; 
  float v34; 
  float v35; 
  float v36; 
  float v37; 
  __int64 v39; 
  __int64 v40; 
  int v43[248]; 

  if ( maxDist < 0.0 )
  {
    __asm { vxorpd  xmm0, xmm0, xmm0 }
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23838, ASSERT_TYPE_ASSERT, "( maxDist ) >= ( 0 )", "maxDist >= 0\n\t%g, %g", maxDist, *(double *)&_XMM0) )
      __debugbreak();
  }
  if ( !results && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23839, ASSERT_TYPE_ASSERT, "( results )", (const char *)&queryFormat, "results") )
    __debugbreak();
  if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
    __debugbreak();
  if ( limit > (int)ComCharacterLimits::ms_gameData.m_characterCount )
  {
    if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
      __debugbreak();
    LODWORD(v40) = ComCharacterLimits::ms_gameData.m_characterCount;
    LODWORD(v39) = limit;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23840, ASSERT_TYPE_ASSERT, "( limit ) <= ( ComCharacterLimits::GetCharacterMaxCount() )", "limit <= ComCharacterLimits::GetCharacterMaxCount()\n\t%i, %i", v39, v40) )
      __debugbreak();
  }
  if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
    __debugbreak();
  if ( (int)ComCharacterLimits::ms_gameData.m_characterCount > 248 )
  {
    if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
      __debugbreak();
    LODWORD(v40) = 248;
    LODWORD(v39) = ComCharacterLimits::ms_gameData.m_characterCount;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23841, ASSERT_TYPE_ASSERT, "( ComCharacterLimits::GetCharacterMaxCount() ) <= ( (200 + 48) )", "ComCharacterLimits::GetCharacterMaxCount() <= MAX_CHARACTERS_MP\n\t%i, %i", v39, v40) )
      __debugbreak();
  }
  v14 = 0;
  v15 = 0;
  v16 = 0i64;
  for ( i = 0i64; ; ++i )
  {
    if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
      __debugbreak();
    if ( v15 >= (int)ComCharacterLimits::ms_gameData.m_characterCount )
      break;
    v18 = &level.gentities[i];
    if ( !&level.gentities[i] )
      goto LABEL_88;
    EntityIndex = G_GetEntityIndex(&level.gentities[i]);
    if ( !G_IsEntityInUse(EntityIndex) || !v18->sentient )
      goto LABEL_88;
    if ( v18->client )
    {
      MpClient = SV_Client_GetMpClient(v18->s.number);
      IsClientConnected = Bot_IsClientConnected(MpClient);
      goto LABEL_37;
    }
    if ( v18->agent )
    {
      IsClientConnected = v18->s.eType == ET_AGENT;
LABEL_37:
      if ( !IsClientConnected )
        goto LABEL_88;
    }
    if ( v18->s.eType != ET_INVISIBLE )
    {
      AllTeamFlags = (bitarray_base<bitarray<224> > *)Com_TeamsMP_GetAllTeamFlags();
      if ( bitarray_base<bitarray<224>>::testBit(AllTeamFlags, v18->sentient->eTeam) )
      {
        if ( !v18->client || (v23 = SV_Client_GetMpClient(v18->s.number), Bot_IsClientActive(v23)) )
        {
          if ( !v18->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23863, ASSERT_TYPE_ASSERT, "( currentEnt->sentient )", (const char *)&queryFormat, "currentEnt->sentient") )
            __debugbreak();
          IsAgentScripted = SV_IsAgentScripted(v18);
          v25 = IsAgentScripted;
          if ( (allowScriptedAgents || !IsAgentScripted) && !Bot_EntityIsConsideredDead(v18) && bitarray_base<bitarray<224>>::testBit((bitarray_base<bitarray<224> > *)teamFlags, v18->sentient->eTeam) && (!onlyAI || SV_BotIsBotEnt(v18) || allowScriptedAgents && v25) && (!excludeSelf || !entity || v18 != entity) )
          {
            if ( !onlyVisibleClients || !entity )
              goto LABEL_63;
            EntityData = Bot_GetEntityData(entity);
            if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23890, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
              __debugbreak();
            if ( SV_BotEntInCurrentFOV(&EntityData->botInfo, v18) && Bot_CanSeeSentientQuick(EntityData, v18->sentient) )
            {
LABEL_63:
              v27 = v18->r.currentOrigin.v[1] - originPoint->v[1];
              v28 = v18->r.currentOrigin.v[2] - originPoint->v[2];
              *(float *)&v29 = (float)((float)(v27 * v27) + (float)((float)(v18->r.currentOrigin.v[0] - originPoint->v[0]) * (float)(v18->r.currentOrigin.v[0] - originPoint->v[0]))) + (float)(v28 * v28);
              if ( maxDist <= 0.0 || *(float *)&v29 <= (float)(maxDist * maxDist) )
              {
                if ( v14 >= limit )
                {
                  v30 = 0i64;
                  v31 = -1i64;
                  *(float *)&v32 = 0.0;
                  if ( v16 >= 4 )
                  {
                    do
                    {
                      v33 = *(float *)&v43[v30];
                      if ( *(float *)&v29 < v33 && v33 >= *(float *)&v32 )
                      {
                        v32 = v43[v30];
                        v31 = v30;
                      }
                      v34 = *(float *)&v43[v30 + 1];
                      if ( *(float *)&v29 < v34 && v34 >= *(float *)&v32 )
                      {
                        v32 = v43[v30 + 1];
                        v31 = v30 + 1;
                      }
                      v35 = *(float *)&v43[v30 + 2];
                      if ( *(float *)&v29 < v35 && v35 >= *(float *)&v32 )
                      {
                        v32 = v43[v30 + 2];
                        v31 = v30 + 2;
                      }
                      v36 = *(float *)&v43[v30 + 3];
                      if ( *(float *)&v29 < v36 && v36 >= *(float *)&v32 )
                      {
                        v32 = v43[v30 + 3];
                        v31 = v30 + 3;
                      }
                      v30 += 4i64;
                    }
                    while ( v30 < v16 - 3 );
                  }
                  for ( ; v30 < v16; ++v30 )
                  {
                    v37 = *(float *)&v43[v30];
                    if ( *(float *)&v29 < v37 && v37 >= *(float *)&v32 )
                    {
                      v32 = v43[v30];
                      v31 = v30;
                    }
                  }
                  if ( v31 >= 0 )
                  {
                    v43[v31] = v29;
                    results[v31] = v18;
                  }
                }
                else
                {
                  ++v14;
                  results[v16] = v18;
                  v43[v16++] = v29;
                }
              }
            }
          }
        }
      }
    }
LABEL_88:
    ++v15;
  }
  return (unsigned int)v14;
}

/*
==============
Bot_GetClosestCharacterToOrigin
==============
*/
gentity_s *Bot_GetClosestCharacterToOrigin(gentity_s *selfEntity, const vec3_t *origin, int onlyAI, int allowScriptedAgents, const bitarray<224> *teamFlags)
{
  __int64 v5; 
  gentity_s *results; 

  v5 = 0i64;
  if ( Bot_GetClosestCharacterList(selfEntity, origin, 0.0, onlyAI, allowScriptedAgents, 1, 0, teamFlags, &results, 1) == 1 )
    return results;
  return (gentity_s *)v5;
}

/*
==============
Bot_GetClosestNavigablePoint
==============
*/
__int64 Bot_GetClosestNavigablePoint(const vec3_t *point, float maxDist, int traceMask, vec3_t *resultPoint, __int16 groundEnt)
{
  unsigned __int8 v7; 
  nav_space_s *SpaceByEntNum; 
  const tacpoint_t *ClosestPoint; 
  vec3_t outUp; 
  bfx::PathSpec pPathSpec; 

  v7 = 0;
  SpaceByEntNum = Nav_GetSpaceByEntNum(groundEnt);
  if ( SpaceByEntNum )
  {
    *(_QWORD *)&pPathSpec.m_obstacleBlockageFlags = -1i64;
    pPathSpec.m_obstacleMode = BLOCKED_IF_ANY_MATCH;
    pPathSpec.m_pathSharingPenalty = 0.0;
    pPathSpec.m_maxPathSharingPenalty = 0.0;
    pPathSpec.m_maxSearchDist = 0.0;
    pPathSpec.m_usePathSharingPenalty = 0;
    *(_QWORD *)&pPathSpec.m_areaPenaltyFlags = -1i64;
    bfx::PenaltyTable::PenaltyTable(&pPathSpec.m_penaltyTable);
    pPathSpec.m_snapMode = SNAP_CLOSEST;
    Nav_GetSpaceUp(SpaceByEntNum, &outUp);
    if ( groundEnt == 2046 )
    {
      ClosestPoint = TacGraph_FindClosestPoint(point);
      if ( ClosestPoint )
        return Nav_GetClosestVerticalPosWithHint(point, &outUp, 0, &SpaceByEntNum->hSpace, &pPathSpec, resultPoint, &ClosestPoint->m_hArea, NULL);
    }
    return Nav_GetClosestVerticalPos(point, &outUp, 0, &SpaceByEntNum->hSpace, &pPathSpec, resultPoint, NULL);
  }
  return v7;
}

/*
==============
Bot_GetCombatCoverNode
==============
*/
pathnode_t *Bot_GetCombatCoverNode(bot_data_t *botData, const pathnode_t *enemyNode)
{
  int v4; 
  __int64 v5; 
  __int64 v6; 
  pathsort_s *p_nodes; 
  unsigned __int16 v8; 
  int nodesPicked; 
  bot_score_parms_s parms; 
  bot_score_item_s objects[512]; 
  pathsort_s nodes; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10303, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !enemyNode && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10304, ASSERT_TYPE_ASSERT, "( enemyNode )", (const char *)&queryFormat, "enemyNode") )
    __debugbreak();
  v4 = Path_NodesInRadius(&botData->botInfo.ent->r.currentOrigin, 300.0, &nodes, 512, -510656513);
  v5 = v4;
  if ( v4 > 0 )
  {
    v6 = 0i64;
    p_nodes = &nodes;
    do
    {
      v8 = Path_ConvertNodeToIndex(p_nodes->node);
      ++p_nodes;
      objects[v6++].object = v8;
    }
    while ( v6 < v5 );
  }
  if ( (int)v5 > 0 && (Bot_Score_ScoreNodesInitParms(botData, &parms, BOT_SCORE_NODE_COMBAT), parms.integer1 = Path_ConvertNodeToIndex(enemyNode), parms.integer2 = 300, Bot_Score_ScoreNodesPick(botData, objects, v5, 1, &parms, 1, &nodesPicked) == 1) )
    return Path_ConvertIndexToNode(nodesPicked);
  else
    return 0i64;
}

/*
==============
Bot_GetCurrentNumDebugGoals
==============
*/
__int64 Bot_GetCurrentNumDebugGoals()
{
  const dvar_t *v0; 

  v0 = DVARINT_bot_DebugPathGoal;
  if ( !DVARINT_bot_DebugPathGoal && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DebugPathGoal") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v0);
  return v0->current.unsignedInt;
}

/*
==============
Bot_GetDeltaAngleToTraversal
==============
*/
float Bot_GetDeltaAngleToTraversal(const bot_data_t *botData)
{
  pathnode_t *v2; 
  pathnode_t *v3; 
  float v6; 
  float v8; 
  float result; 
  __int64 v11; 
  __int64 v12; 
  __int64 v13; 
  vec3_t pos; 
  vec3_t v15; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15805, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15806, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  v2 = NULL;
  if ( Path_NodeValid(botData->botInfo.nodeNegotStart) )
    v3 = Path_ConvertIndexToNode(botData->botInfo.nodeNegotStart);
  else
    v3 = NULL;
  if ( Path_NodeValid(botData->botInfo.nodeNegotEnd) )
    v2 = Path_ConvertIndexToNode(botData->botInfo.nodeNegotEnd);
  if ( !v3 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15812, ASSERT_TYPE_ASSERT, "(negotiationStartNode)", "%s\n\tNo traversal start node.  botInfo->traversal = %i, botInfo->nodeNegotStart = %i, botInfo->traverseJumpTime = %i", "negotiationStartNode", botData->botInfo.traversal, botData->botInfo.nodeNegotStart, botData->botInfo.traverseJumpTime) )
    __debugbreak();
  if ( !v2 )
  {
    LODWORD(v13) = botData->botInfo.traverseJumpTime;
    LODWORD(v12) = botData->botInfo.nodeNegotEnd;
    LODWORD(v11) = botData->botInfo.traversal;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15812, ASSERT_TYPE_ASSERT, "(negotiationEndNode)", "%s\n\tNo traversal end node.  botInfo->traversal = %i, botInfo->nodeNegotEnd = %i, botInfo->traverseJumpTime = %i", "negotiationEndNode", v11, v12, v13) )
      __debugbreak();
  }
  pathnode_t::GetPos(v3, &pos);
  pathnode_t::GetPos(v2, &v15);
  _XMM9 = 0i64;
  __asm { vroundss xmm2, xmm9, xmm1, 1 }
  v6 = (float)((float)(Bot_GetNodeTraversalYaw(v3, v2, 1) * 0.0027777778) - *(float *)&_XMM2) * 360.0;
  __asm { vroundss xmm2, xmm9, xmm1, 1 }
  v8 = (float)(v6 - (float)((float)((float)(botData->botInfo.ent->r.currentAngles.v[1] * 0.0027777778) - *(float *)&_XMM2) * 360.0)) * 0.0027777778;
  __asm { vroundss xmm2, xmm9, xmm1, 1 }
  LODWORD(result) = COERCE_UNSIGNED_INT((float)(v8 - *(float *)&_XMM2) * 360.0) & _xmm;
  return result;
}

/*
==============
Bot_GetDifficulty
==============
*/
__int64 Bot_GetDifficulty(const bot_data_t *botData)
{
  if ( botData )
    return (unsigned int)botData->botMatchData.difficulty;
  if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20793, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  return MEMORY[0x7300];
}

/*
==============
Bot_GetDifficultyName
==============
*/
const char *Bot_GetDifficultyName(bot_difficulty_t difficulty)
{
  __int64 v1; 
  int v4; 

  v1 = difficulty;
  if ( (unsigned int)difficulty >= BOT_DIFFICULTY_COUNT )
  {
    v4 = 5;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20806, ASSERT_TYPE_ASSERT, "(unsigned)( difficulty ) < (unsigned)( BOT_DIFFICULTY_COUNT )", "difficulty doesn't index BOT_DIFFICULTY_COUNT\n\t%i not in [0, %i)", difficulty, v4) )
      __debugbreak();
  }
  return BOT_STR_TBL_DIFFICULTY[v1];
}

/*
==============
Bot_GetDifficultySetting
==============
*/
float Bot_GetDifficultySetting(bot_data_t *botData, const char *settingName, int *succeeded)
{
  bot_match_data_setting_t *matched; 
  bot_match_data_setting_t *v7; 
  __int64 offset; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4951, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !settingName && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4952, ASSERT_TYPE_ASSERT, "( settingName )", (const char *)&queryFormat, "settingName") )
    __debugbreak();
  matched = Bot_MatchDataSetting(settingName);
  v7 = matched;
  if ( matched )
  {
    if ( succeeded )
      *succeeded = 1;
    offset = matched->offset;
    if ( (_DWORD)offset != 3212 )
      return *(float *)((char *)&botData->botMatchData.difficulty + offset);
    if ( (botData->botMatchData.flags & v7->flag) != 0 )
      return FLOAT_1_0;
  }
  else if ( succeeded )
  {
    *succeeded = 0;
  }
  return 0.0;
}

/*
==============
Bot_GetEnemyAimPoints
==============
*/
void Bot_GetEnemyAimPoints(const bot_data_t *botData, const gentity_s *enemyEnt, vec3_t *aimPoint, vec3_t *eyePoint)
{
  const gentity_s *v8; 
  playerState_s *playerState; 
  gentity_s *ent; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8530, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8531, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !enemyEnt && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8532, ASSERT_TYPE_ASSERT, "( enemyEnt )", (const char *)&queryFormat, "enemyEnt") )
    __debugbreak();
  if ( !enemyEnt->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8533, ASSERT_TYPE_ASSERT, "( enemyEnt->sentient )", (const char *)&queryFormat, "enemyEnt->sentient") )
    __debugbreak();
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
    v8 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
  else
    v8 = NULL;
  if ( enemyEnt != v8 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8534, ASSERT_TYPE_ASSERT, "( enemyEnt == Bot_GetEnemy( botData ) )", (const char *)&queryFormat, "enemyEnt == Bot_GetEnemy( botData )") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8537, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  ent = botData->botInfo.ent;
  *(_QWORD *)eyePoint->v = 0i64;
  eyePoint->v[2] = 0.0;
  Bot_PredictPosition(ent, botData, &ent->r.currentOrigin, eyePoint);
  if ( eyePoint->v[0] == 0.0 && eyePoint->v[1] == 0.0 && eyePoint->v[2] == 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8554, ASSERT_TYPE_ASSERT, "( Vec3NotZero( eyePoint ) )", (const char *)&queryFormat, "Vec3NotZero( eyePoint )") )
    __debugbreak();
  eyePoint->v[2] = playerState->viewHeightCurrent + eyePoint->v[2];
  if ( aimPoint )
  {
    if ( botData->botInfo.enemyTrack.predictOrigin.v[0] == 0.0 && botData->botInfo.enemyTrack.predictOrigin.v[1] == 0.0 && botData->botInfo.enemyTrack.predictOrigin.v[2] == 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8560, ASSERT_TYPE_ASSERT, "( Vec3NotZero( botInfo->enemyTrack.predictOrigin ) )", (const char *)&queryFormat, "Vec3NotZero( botInfo->enemyTrack.predictOrigin )") )
      __debugbreak();
    aimPoint->v[0] = botData->botInfo.enemyTrack.predictOrigin.v[0];
    aimPoint->v[1] = botData->botInfo.enemyTrack.predictOrigin.v[1];
    aimPoint->v[2] = botData->botInfo.enemyTrack.predictOrigin.v[2];
    Bot_AdjustEnemyAimPoint(botData, enemyEnt, aimPoint);
    aimPoint->v[0] = botData->botInfo.enemyTrack.aimOffset.v[0] + aimPoint->v[0];
    aimPoint->v[1] = botData->botInfo.enemyTrack.aimOffset.v[1] + aimPoint->v[1];
    aimPoint->v[2] = botData->botInfo.enemyTrack.aimOffset.v[2] + aimPoint->v[2];
  }
}

/*
==============
Bot_GetEntityData
==============
*/
bot_data_t *Bot_GetEntityData(const gentity_s *entity)
{
  unsigned int number; 
  SvClientMP *CommonClient; 
  bot_data_t *ClientData; 
  bot_data_t *v5; 
  __int64 v7; 

  if ( !entity && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1169, ASSERT_TYPE_ASSERT, "( entity )", (const char *)&queryFormat, "entity") )
    __debugbreak();
  if ( SV_BotIsBotEntClient(entity) )
  {
    if ( entity->s.number >= SvClient::ms_clientCount )
    {
      LODWORD(v7) = entity->s.number;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1175, ASSERT_TYPE_ASSERT, "(unsigned)( entity->s.number ) < (unsigned)( SvClient::GetClientCount() )", "entity->s.number doesn't index SvClient::GetClientCount()\n\t%i not in [0, %i)", v7, SvClient::ms_clientCount) )
        __debugbreak();
    }
    number = entity->s.number;
    if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
      __debugbreak();
    CommonClient = (SvClientMP *)SvClient::GetCommonClient(number);
    ClientData = Bot_GetClientData(CommonClient);
  }
  else
  {
    if ( !entity->agent )
      return 0i64;
    ClientData = Agent_GetBotDataForEnt(entity);
  }
  v5 = ClientData;
  if ( ClientData )
  {
    if ( ClientData->botDataHeader != -17973521 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1190, ASSERT_TYPE_ASSERT, "( botData->botDataHeader == 0xFEEDBEEF )", (const char *)&queryFormat, "botData->botDataHeader == BOT_DATA_MAGIC_NUMBER") )
      __debugbreak();
    if ( v5->botDataFooter != -17973521 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1191, ASSERT_TYPE_ASSERT, "( botData->botDataFooter == 0xFEEDBEEF )", (const char *)&queryFormat, "botData->botDataFooter == BOT_DATA_MAGIC_NUMBER") )
      __debugbreak();
  }
  return v5;
}

/*
==============
Bot_GetGoalType
==============
*/
__int64 Bot_GetGoalType(const char *goalTypeName)
{
  const char *v1; 
  unsigned int v2; 
  __int64 v4; 
  __int64 v5; 
  const char *v6; 
  signed __int64 v7; 
  int v8; 
  __int64 v9; 
  int v10; 
  int v11; 
  int v12; 

  v1 = BOT_STR_TBL_GOAL_TYPE[0];
  v2 = 0;
  if ( BOT_STR_TBL_GOAL_TYPE[0] )
  {
    v4 = 0i64;
    do
    {
      if ( !*v1 )
        break;
      v5 = 0x7FFFFFFFi64;
      v6 = goalTypeName;
      if ( !v1 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 212, ASSERT_TYPE_SANITY, "( s0 )", (const char *)&queryFormat, "s0") )
        __debugbreak();
      if ( !goalTypeName && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 213, ASSERT_TYPE_SANITY, "( s1 )", (const char *)&queryFormat, "s1") )
        __debugbreak();
      v7 = v1 - goalTypeName;
      while ( 1 )
      {
        v8 = (unsigned __int8)v6[v7];
        v9 = v5;
        v10 = *(unsigned __int8 *)v6++;
        --v5;
        if ( !v9 )
          return v2;
        if ( v8 != v10 )
        {
          v11 = v8 + 32;
          if ( (unsigned int)(v8 - 65) > 0x19 )
            v11 = v8;
          v8 = v11;
          v12 = v10 + 32;
          if ( (unsigned int)(v10 - 65) > 0x19 )
            v12 = v10;
          if ( v8 != v12 )
            break;
        }
        if ( !v8 )
          return v2;
      }
      v1 = BOT_STR_TBL_GOAL_TYPE[++v4];
      ++v2;
    }
    while ( v1 );
  }
  return 0i64;
}

/*
==============
Bot_GetGroundEnt
==============
*/
__int16 Bot_GetGroundEnt(const playerState_s *ps)
{
  int MoverThenGroundEnt; 

  MoverThenGroundEnt = BGMovingPlatformPS::GetMoverThenGroundEnt(&ps->movingPlatforms, ps);
  return truncate_cast<short,int>(MoverThenGroundEnt);
}

/*
==============
Bot_GetHidingFromEntity
==============
*/
gentity_s *Bot_GetHidingFromEntity(const bot_data_t *botData)
{
  gentity_s *GEntity; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14777, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( level.time > botData->botInfo.hideFromTime || !G_IsEntityInUse(botData->botInfo.hideFromEntNum) )
    return 0i64;
  GEntity = G_GetGEntity(botData->botInfo.hideFromEntNum);
  if ( !GEntity && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14788, ASSERT_TYPE_ASSERT, "( entity )", (const char *)&queryFormat, "entity") )
    __debugbreak();
  if ( GEntity->s.eType == ET_MISSILE || GEntity->sentient && !Bot_EntityIsConsideredDead(GEntity) )
    return GEntity;
  else
    return 0i64;
}

/*
==============
Bot_GetInaccuracy
==============
*/
float Bot_GetInaccuracy(const bot_data_t *botData)
{
  __int128 v1; 
  const Weapon *ViewmodelWeapon; 
  float inaccuracy; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16538, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData", v1) )
    __debugbreak();
  if ( !botData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16539, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState )", (const char *)&queryFormat, "botData->botInfo.playerState") )
    __debugbreak();
  ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(botData->botInfo.playerState);
  inaccuracy = botData->botInfo.inaccuracy;
  if ( Bot_Weap_IsWeapClass(botData->botInfo.playerState, ViewmodelWeapon, WEAPCLASS_SNIPER) )
    return inaccuracy * botData->botMatchData.sniperInaccuracyScale;
  else
    return inaccuracy;
}

/*
==============
Bot_GetLastKnownEntFacingDir
==============
*/
__int64 Bot_GetLastKnownEntFacingDir(const bot_data_t *botData, const gentity_s *entity, vec3_t *facingDir)
{
  sentient_s *sentient; 
  char *v7; 
  vec3_t angles; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9453, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9454, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9455, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
    __debugbreak();
  if ( !entity && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9456, ASSERT_TYPE_ASSERT, "( entity )", (const char *)&queryFormat, "entity") )
    __debugbreak();
  sentient = entity->sentient;
  if ( !sentient )
    return 0i64;
  v7 = (char *)&botData->scriptedAgentInfo + 60 * (sentient - level.sentients) + 11644;
  if ( !v7 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9461, ASSERT_TYPE_ASSERT, "( botSentInfo )", (const char *)&queryFormat, "botSentInfo") )
    __debugbreak();
  if ( !*(_DWORD *)v7 || !Bot_IsStationaryEnt(entity) && level.time - *(_DWORD *)v7 >= 30000 )
    return 0i64;
  angles.v[1] = (float)*((__int16 *)v7 + 2);
  angles.v[0] = 0.0;
  angles.v[2] = 0.0;
  AngleVectors(&angles, facingDir, NULL, NULL);
  return 1i64;
}

/*
==============
Bot_GetLastKnownEntNearestNode
==============
*/
pathnode_t *Bot_GetLastKnownEntNearestNode(const bot_data_t *botData, const gentity_s *entity)
{
  sentient_s *sentient; 
  sentient_info_t *SentientInfo; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9405, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9406, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !botData->botInfo.ent->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9407, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent->sentient )", (const char *)&queryFormat, "botData->botInfo.ent->sentient") )
    __debugbreak();
  if ( !entity && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9408, ASSERT_TYPE_ASSERT, "( entity )", (const char *)&queryFormat, "entity") )
    __debugbreak();
  sentient = entity->sentient;
  if ( !sentient )
    return Path_NearestNode(&entity->r.currentOrigin, entity->clipmask, NULL);
  SentientInfo = Sentient_GetSentientInfo(botData->botInfo.ent->sentient, sentient);
  if ( !SentientInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9413, ASSERT_TYPE_ASSERT, "( sentInfo )", (const char *)&queryFormat, "sentInfo") )
    __debugbreak();
  return SentientInfo->pLastKnownNode;
}

/*
==============
Bot_GetLastKnownEntNearestTacPoint
==============
*/
tacpoint_t *Bot_GetLastKnownEntNearestTacPoint(const bot_data_t *botData, const gentity_s *entity)
{
  sentient_s *sentient; 
  sentient_info_t *SentientInfo; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9429, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9430, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !botData->botInfo.ent->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9431, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent->sentient )", (const char *)&queryFormat, "botData->botInfo.ent->sentient") )
    __debugbreak();
  if ( !entity && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9432, ASSERT_TYPE_ASSERT, "( entity )", (const char *)&queryFormat, "entity") )
    __debugbreak();
  sentient = entity->sentient;
  if ( !sentient )
    return (tacpoint_t *)TacGraph_FindClosestPoint(&entity->r.currentOrigin);
  SentientInfo = Sentient_GetSentientInfo(botData->botInfo.ent->sentient, sentient);
  if ( !SentientInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9437, ASSERT_TYPE_ASSERT, "( sentInfo )", (const char *)&queryFormat, "sentInfo") )
    __debugbreak();
  return tacpoint_ref_t::GetPoint(&SentientInfo->lastKnownTacPoint);
}

/*
==============
Bot_GetLastKnownEntPosAndTime
==============
*/
__int64 Bot_GetLastKnownEntPosAndTime(const bot_data_t *botData, const gentity_s *entity, vec3_t *targetPos)
{
  sentient_s *sentient; 
  sentient_info_t *SentientInfo; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9375, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9376, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9377, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
    __debugbreak();
  if ( !entity && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9378, ASSERT_TYPE_ASSERT, "( entity )", (const char *)&queryFormat, "entity") )
    __debugbreak();
  sentient = entity->sentient;
  if ( sentient )
  {
    SentientInfo = Sentient_GetSentientInfo(botData->botInfo.sentient, sentient);
    if ( !SentientInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9385, ASSERT_TYPE_ASSERT, "( sentInfo )", (const char *)&queryFormat, "sentInfo") )
      __debugbreak();
    if ( targetPos )
      SentientInfo_GetLastKnownPos(SentientInfo, targetPos);
    return (unsigned int)SentientInfo->lastKnownPosTime;
  }
  else
  {
    if ( targetPos )
    {
      targetPos->v[0] = entity->r.currentOrigin.v[0];
      targetPos->v[1] = entity->r.currentOrigin.v[1];
      targetPos->v[2] = entity->r.currentOrigin.v[2];
    }
    return (unsigned int)level.time;
  }
}

/*
==============
Bot_GetLookAheadDir
==============
*/
void Bot_GetLookAheadDir(const bot_info_t *botInfo, vec3_t *lookaheadDirOut)
{
  Nav_GetLookaheadDir(botInfo->pNavigator, lookaheadDirOut);
}

/*
==============
Bot_GetLookAheadDist
==============
*/
double Bot_GetLookAheadDist(const bot_info_t *botInfo)
{
  if ( !botInfo )
  {
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13735, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
      __debugbreak();
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13725, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
      __debugbreak();
  }
  if ( Bot_NavPathExists(botInfo) )
    return Nav_GetDistToNextCorner(botInfo->pNavigator);
  else
    return 0.0;
}

/*
==============
Bot_GetLookType
==============
*/
__int64 Bot_GetLookType(const char *strName)
{
  const char *v1; 
  unsigned int v2; 
  __int64 v4; 
  __int64 v5; 
  const char *v6; 
  signed __int64 v7; 
  int v8; 
  __int64 v9; 
  int v10; 
  int v11; 
  int v12; 

  v1 = BOT_STR_TBL_LOOK_TYPE[0];
  v2 = 0;
  if ( BOT_STR_TBL_LOOK_TYPE[0] )
  {
    v4 = 0i64;
    do
    {
      if ( !*v1 )
        break;
      v5 = 0x7FFFFFFFi64;
      v6 = strName;
      if ( !v1 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 212, ASSERT_TYPE_SANITY, "( s0 )", (const char *)&queryFormat, "s0") )
        __debugbreak();
      if ( !strName && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 213, ASSERT_TYPE_SANITY, "( s1 )", (const char *)&queryFormat, "s1") )
        __debugbreak();
      v7 = v1 - strName;
      while ( 1 )
      {
        v8 = (unsigned __int8)v6[v7];
        v9 = v5;
        v10 = *(unsigned __int8 *)v6++;
        --v5;
        if ( !v9 )
          return v2;
        if ( v8 != v10 )
        {
          v11 = v8 + 32;
          if ( (unsigned int)(v8 - 65) > 0x19 )
            v11 = v8;
          v8 = v11;
          v12 = v10 + 32;
          if ( (unsigned int)(v10 - 65) > 0x19 )
            v12 = v10;
          if ( v8 != v12 )
            break;
        }
        if ( !v8 )
          return v2;
      }
      v1 = BOT_STR_TBL_LOOK_TYPE[++v4];
      ++v2;
    }
    while ( v1 );
  }
  return 7i64;
}

/*
==============
Bot_GetMaxFov
==============
*/
float Bot_GetMaxFov(const bot_data_t *botData)
{
  playerState_s *playerState; 
  const dvar_t *v4; 
  const VehicleDef *RemoteEyesVehicleDef; 
  WeaponCompleteDef *turretWeapon; 
  float camFovIncrease; 
  float v11; 
  const Weapon *ViewmodelWeapon; 
  GWeaponMap *Instance; 
  const dvar_t *v15; 
  float v16; 
  float v17; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20436, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20439, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  if ( Bot_IsControllingRemoteMissile(botData) )
  {
    v4 = DVARFLT_missileRemoteFOV;
    if ( !DVARFLT_missileRemoteFOV && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 720, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "missileRemoteFOV") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v4);
    _XMM3 = v4->current.unsignedInt;
    __asm
    {
      vcmpless xmm2, xmm3, xmm0
      vblendvps xmm0, xmm3, xmm1, xmm2
    }
  }
  else if ( Bot_IsFirstPersonRemoteVehicle(botData) )
  {
    RemoteEyesVehicleDef = Bot_GetRemoteEyesVehicleDef(botData);
    turretWeapon = RemoteEyesVehicleDef->turretWeapon;
    if ( turretWeapon )
    {
      *(float *)&_XMM0 = (float)((float)(1.0 - playerState->weapCommon.fWeaponPosFrac) * turretWeapon->weapDef->turretFov) + (float)(playerState->weapCommon.fWeaponPosFrac * turretWeapon->weapDef->turretFovADS);
    }
    else
    {
      camFovIncrease = RemoteEyesVehicleDef->camFovIncrease;
      if ( playerState->weapCommon.fWeaponPosFrac != 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20466, ASSERT_TYPE_ASSERT, "( ps->weapCommon.fWeaponPosFrac == 0.0f )", (const char *)&queryFormat, "ps->weapCommon.fWeaponPosFrac == 0.0f") )
        __debugbreak();
      *(float *)&_XMM0 = camFovIncrease;
    }
  }
  else
  {
    if ( playerState->pm_type == 6 )
    {
      v11 = FLOAT_90_0;
    }
    else
    {
      v11 = FLOAT_65_0;
      if ( Bot_Weap_IsDoingADS(botData) )
      {
        ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(playerState);
        *(double *)&_XMM0 = Bot_Weap_GetWeaponFOV(playerState, ViewmodelWeapon);
        __asm { vminss  xmm7, xmm0, xmm6 }
        if ( Bot_Weap_IsWeapClass(playerState, ViewmodelWeapon, WEAPCLASS_SNIPER) && Bot_Weap_HasOverlay(playerState, ViewmodelWeapon) )
          *(float *)&_XMM7 = *(float *)&_XMM7 * 0.5;
        v11 = (float)(playerState->weapCommon.fWeaponPosFrac * *(float *)&_XMM7) + (float)((float)(1.0 - playerState->weapCommon.fWeaponPosFrac) * 65.0);
      }
    }
    Instance = GWeaponMap::GetInstance();
    if ( BG_IsThirdPersonMode(Instance, playerState) )
    {
      v15 = DCONST_DVARMPSPFLT_camera_thirdPersonFovScale;
      if ( !DCONST_DVARMPSPFLT_camera_thirdPersonFovScale && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 720, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "camera_thirdPersonFovScale") )
        __debugbreak();
      Dvar_CheckFrontendServerThread(v15);
      v11 = v11 * v15->current.value;
    }
    v16 = tanf_0(v11 * 0.0087266462);
    v17 = atanf_0(v16 * 1.2566371);
    *(double *)&_XMM0 = I_fclamp(v17 * 114.59155, 1.0, 170.0);
  }
  return *(float *)&_XMM0;
}

/*
==============
Bot_GetMaxFovDot
==============
*/
double Bot_GetMaxFovDot(const bot_data_t *botData)
{
  double result; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20516, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  result = Bot_GetMaxFov(botData);
  *(float *)&result = cosf_0((float)(*(float *)&result * 0.017453292) * 0.5);
  return result;
}

/*
==============
Bot_GetMemEventType
==============
*/
__int64 Bot_GetMemEventType(const char *memEventTypeName)
{
  const char *v1; 
  unsigned int v2; 
  __int64 v4; 
  __int64 v5; 
  const char *v6; 
  signed __int64 v7; 
  int v8; 
  __int64 v9; 
  int v10; 
  int v11; 
  int v12; 

  v1 = BOT_STR_TBL_MEM_EVENT[0];
  v2 = 0;
  if ( BOT_STR_TBL_MEM_EVENT[0] )
  {
    v4 = 0i64;
    do
    {
      if ( !*v1 )
        break;
      v5 = 0x7FFFFFFFi64;
      v6 = memEventTypeName;
      if ( !v1 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 212, ASSERT_TYPE_SANITY, "( s0 )", (const char *)&queryFormat, "s0") )
        __debugbreak();
      if ( !memEventTypeName && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 213, ASSERT_TYPE_SANITY, "( s1 )", (const char *)&queryFormat, "s1") )
        __debugbreak();
      v7 = v1 - memEventTypeName;
      while ( 1 )
      {
        v8 = (unsigned __int8)v6[v7];
        v9 = v5;
        v10 = *(unsigned __int8 *)v6++;
        --v5;
        if ( !v9 )
          return v2;
        if ( v8 != v10 )
        {
          v11 = v8 + 32;
          if ( (unsigned int)(v8 - 65) > 0x19 )
            v11 = v8;
          v8 = v11;
          v12 = v10 + 32;
          if ( (unsigned int)(v10 - 65) > 0x19 )
            v12 = v10;
          if ( v8 != v12 )
            break;
        }
        if ( !v8 )
          return v2;
      }
      v1 = BOT_STR_TBL_MEM_EVENT[++v4];
      ++v2;
    }
    while ( v1 );
  }
  return 5i64;
}

/*
==============
Bot_GetMemFlag
==============
*/
__int64 Bot_GetMemFlag(const char *strFlag)
{
  const char *v1; 
  char v2; 
  __int64 v4; 
  __int64 v5; 
  const char *v6; 
  signed __int64 v7; 
  int v8; 
  __int64 v9; 
  int v10; 
  int v11; 
  int v12; 

  v1 = BOT_STR_TBL_MEM_FLAG[0];
  v2 = 0;
  if ( BOT_STR_TBL_MEM_FLAG[0] )
  {
    v4 = 0i64;
    do
    {
      if ( !*v1 )
        break;
      v5 = 0x7FFFFFFFi64;
      v6 = strFlag;
      if ( !v1 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 212, ASSERT_TYPE_SANITY, "( s0 )", (const char *)&queryFormat, "s0") )
        __debugbreak();
      if ( !strFlag && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 213, ASSERT_TYPE_SANITY, "( s1 )", (const char *)&queryFormat, "s1") )
        __debugbreak();
      v7 = v1 - strFlag;
      while ( 1 )
      {
        v8 = (unsigned __int8)v6[v7];
        v9 = v5;
        v10 = *(unsigned __int8 *)v6++;
        --v5;
        if ( !v9 )
          return (unsigned int)(1 << v2);
        if ( v8 != v10 )
        {
          v11 = v8 + 32;
          if ( (unsigned int)(v8 - 65) > 0x19 )
            v11 = v8;
          v8 = v11;
          v12 = v10 + 32;
          if ( (unsigned int)(v10 - 65) > 0x19 )
            v12 = v10;
          if ( v8 != v12 )
            break;
        }
        if ( !v8 )
          return (unsigned int)(1 << v2);
      }
      ++v4;
      ++v2;
      v1 = BOT_STR_TBL_MEM_FLAG[v4];
    }
    while ( v1 );
  }
  return 0i64;
}

/*
==============
Bot_GetMinJammerDist
==============
*/
float Bot_GetMinJammerDist(const bot_info_t *botInfo)
{
  float v2; 
  unsigned int v3; 
  __int16 *v4; 
  __int16 v5; 
  gentity_s *GEntity; 
  gentity_s *v7; 
  gclient_s *client; 
  GameModeFlagContainer<enum EntityStateFlagsCommon,enum EntityStateFlagsSP,enum EntityStateFlagsMP,32> *p_eFlags; 
  __int16 number; 
  sentient_s *sentient; 
  float v12; 
  float v13; 
  float v14; 
  float v15; 
  __int64 v17; 
  __int64 v18; 

  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6175, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  v2 = 0.0;
  v3 = 0;
  v4 = s_botEntAffecters;
  do
  {
    v5 = *v4;
    if ( *v4 != 2047 )
    {
      if ( (unsigned __int16)v5 >= 0x800u )
      {
        LODWORD(v18) = 2048;
        LODWORD(v17) = v5;
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6114, ASSERT_TYPE_ASSERT, "(unsigned)( affecterEntNum ) < (unsigned)( ( 2048 ) )", "affecterEntNum doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v17, v18) )
          __debugbreak();
      }
      if ( G_IsEntityInUse(v5) )
      {
        GEntity = G_GetGEntity(v5);
        v7 = GEntity;
        if ( GEntity )
        {
          client = GEntity->client;
          p_eFlags = &client->ps.eFlags;
          if ( !client )
            p_eFlags = &GEntity->s.lerp.eFlags;
          if ( GameModeFlagValues::ms_mpValue != ACTIVE && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_gamemode_flags.h", 190, ASSERT_TYPE_ASSERT, "(IsFlagActive( index ))", "%s\n\tThis function must be used in a MP-only context", "IsFlagActive( index )") )
            __debugbreak();
          if ( GameModeFlagContainer<enum EntityStateFlagsCommon,enum EntityStateFlagsSP,enum EntityStateFlagsMP,32>::TestFlagInternal(p_eFlags, ACTIVE, 0x14u) )
          {
            if ( v7->client )
              number = v7->s.number;
            else
              number = v7->s.otherEntityNum;
            if ( (unsigned int)number >= 0x800 )
            {
              LODWORD(v18) = 2048;
              LODWORD(v17) = number;
              if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 207, ASSERT_TYPE_ASSERT, "(unsigned)( entityIndex ) < (unsigned)( ( 2048 ) )", "entityIndex doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v17, v18) )
                __debugbreak();
            }
            if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 208, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
              __debugbreak();
            if ( g_entities[number].r.isInUse != g_entityIsInUse[number] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 209, ASSERT_TYPE_ASSERT, "( g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex] )", (const char *)&queryFormat, "g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex]") )
              __debugbreak();
            if ( g_entityIsInUse[number] )
            {
              if ( (unsigned __int16)number >= 0x800u )
              {
                LODWORD(v18) = 2048;
                LODWORD(v17) = number;
                if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6195, ASSERT_TYPE_ASSERT, "(unsigned)( ownerEntNum ) < (unsigned)( ( 2048 ) )", "ownerEntNum doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v17, v18) )
                  __debugbreak();
              }
              if ( number == 2047 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6196, ASSERT_TYPE_ASSERT, "( ownerEntNum != ENTITYNUM_NONE )", (const char *)&queryFormat, "ownerEntNum != ENTITYNUM_NONE") )
                __debugbreak();
              sentient = G_GetGEntity(number)->sentient;
              if ( sentient )
              {
                if ( !AI_IsAlliedSentient(sentient, botInfo->sentient) )
                {
                  v12 = botInfo->ent->r.currentOrigin.v[0] - v7->r.currentOrigin.v[0];
                  v13 = botInfo->ent->r.currentOrigin.v[1] - v7->r.currentOrigin.v[1];
                  v14 = botInfo->ent->r.currentOrigin.v[2] - v7->r.currentOrigin.v[2];
                  v15 = fsqrt((float)((float)(v13 * v13) + (float)(v12 * v12)) + (float)(v14 * v14)) + 0.001;
                  if ( v2 == 0.0 || v15 < v2 )
                    v2 = v15;
                }
              }
            }
          }
        }
      }
    }
    ++v3;
    ++v4;
  }
  while ( v3 < 0x40 );
  return v2;
}

/*
==============
Bot_GetNextDebugGoal
==============
*/
__int64 Bot_GetNextDebugGoal(const bot_data_t *botData)
{
  unsigned int debugPathGoalCurrent; 
  const dvar_t *v3; 
  int v4; 
  float v1[4]; 
  vec3_t goal; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9959, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  debugPathGoalCurrent = botData->botDebugData.debugPathGoalCurrent;
  do
  {
    v3 = DVARINT_bot_DebugPathGoal;
    v4 = debugPathGoalCurrent + 1;
    if ( !DVARINT_bot_DebugPathGoal && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DebugPathGoal") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v3);
    debugPathGoalCurrent = 1;
    if ( v4 <= v3->current.integer )
      debugPathGoalCurrent = v4;
    Bot_DebugGoal(debugPathGoalCurrent, &goal);
    v1[0] = 0.0;
    v1[1] = 0.0;
    v1[2] = 0.0;
  }
  while ( VecNCompareCustomEpsilon(goal.v, v1, 0.001, 3) && debugPathGoalCurrent != botData->botDebugData.debugPathGoalCurrent );
  return debugPathGoalCurrent;
}

/*
==============
Bot_GetNextWeaponDelayEndTime
==============
*/
__int64 Bot_GetNextWeaponDelayEndTime(const bot_data_t *botData, int weapFireType, int weapClass, int dualWield)
{
  int v8; 
  int v9; 
  int v10; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9095, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !weapFireType || weapFireType == 5 )
    return (unsigned int)botData->botInfo.weaponDelayEndTime;
  v8 = G_irand((int)botData->botMatchData.minNonAutoFireDelay, (int)botData->botMatchData.maxNonAutoFireDelay);
  v9 = v8;
  if ( weapClass == 5 )
    v9 = (int)(float)((float)v8 * 0.75);
  if ( dualWield )
    v9 = (int)(float)((float)v9 * 0.75);
  v10 = 200;
  if ( v9 > 200 )
    v10 = v9;
  return (unsigned int)(level.time + v10);
}

/*
==============
Bot_GetNodeTraversalYaw
==============
*/
float Bot_GetNodeTraversalYaw(const pathnode_t *nodeStart, const pathnode_t *nodeEnd, int onlyConsiderTraversalDirection)
{
  double Angle; 
  __int128 v7; 
  float v8; 
  float v9; 
  vec3_t vec; 
  vec3_t v15; 
  vec3_t forward; 
  vec3_t v17; 
  vec3_t pos; 
  vec3_t angles; 

  if ( !nodeStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2158, ASSERT_TYPE_ASSERT, "( nodeStart )", (const char *)&queryFormat, "nodeStart") )
    __debugbreak();
  if ( !nodeEnd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2159, ASSERT_TYPE_ASSERT, "( nodeEnd )", (const char *)&queryFormat, "nodeEnd") )
    __debugbreak();
  pathnode_t::GetPos((pathnode_t *)nodeStart, &pos);
  pathnode_t::GetPos((pathnode_t *)nodeEnd, &v17);
  Angle = pathnode_t::GetAngle((pathnode_t *)nodeEnd);
  v7 = LODWORD(v17.v[1]);
  *(float *)&v7 = v17.v[1] - pos.v[1];
  v8 = *(float *)&Angle;
  v9 = v17.v[0] - pos.v[0];
  if ( (float)(v17.v[0] - pos.v[0]) == 0.0 && *(float *)&v7 == 0.0 )
    return v8;
  *(float *)&v7 = fsqrt((float)(*(float *)&v7 * *(float *)&v7) + (float)(v9 * v9));
  _XMM2 = v7;
  __asm
  {
    vcmpless xmm0, xmm2, cs:__real@80000000
    vblendvps xmm0, xmm2, xmm1, xmm0
  }
  vec.v[1] = (float)(1.0 / *(float *)&_XMM0) * (float)(v17.v[1] - pos.v[1]);
  vec.v[0] = (float)(1.0 / *(float *)&_XMM0) * v9;
  vec.v[2] = 0.0;
  vectoangles(&vec, &angles);
  v15.v[0] = 0.0;
  v15.v[1] = v8;
  v15.v[2] = 0.0;
  AngleVectors(&v15, &forward, NULL, NULL);
  if ( (nodeEnd->constant.spawnflags & 0x8000) == 0 )
    return angles.v[1];
  if ( (float)((float)((float)(forward.v[1] * vec.v[1]) + (float)(forward.v[0] * vec.v[0])) + (float)(forward.v[2] * vec.v[2])) > 0.69999999 && !onlyConsiderTraversalDirection )
    return v8;
  else
    return angles.v[1];
}

/*
==============
Bot_GetObstacleFlagsForTeam
==============
*/
__int64 Bot_GetObstacleFlagsForTeam(team_t team)
{
  if ( (unsigned int)(team - 1) > 1 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13808, ASSERT_TYPE_ASSERT, "( team == TEAM_AXIS || team == TEAM_ALLIES )", (const char *)&queryFormat, "team == TEAM_AXIS || team == TEAM_ALLIES") )
    __debugbreak();
  return (unsigned int)(1 << Path_GetNodeTeam(team));
}

/*
==============
Bot_GetPathFinalGoal
==============
*/
void Bot_GetPathFinalGoal(const bot_info_t *botInfo, vec3_t *outFinalGoal)
{
  if ( !botInfo )
  {
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1984, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
      __debugbreak();
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13968, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
      __debugbreak();
  }
  if ( !Nav_HasPath(botInfo->pNavigator) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1986, ASSERT_TYPE_ASSERT, "( Bot_NavPathExists( botInfo ) )", (const char *)&queryFormat, "Bot_NavPathExists( botInfo )") )
    __debugbreak();
  botInfo->pNavigator->GetRequestedGoalPos(botInfo->pNavigator, outFinalGoal);
  if ( outFinalGoal->v[0] == 0.0 && outFinalGoal->v[1] == 0.0 && outFinalGoal->v[2] == 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1994, ASSERT_TYPE_ASSERT, "( Vec3NotZero( outFinalGoal ) )", (const char *)&queryFormat, "Vec3NotZero( outFinalGoal )") )
    __debugbreak();
}

/*
==============
Bot_GetPathToGoalInternal
==============
*/

__int64 __fastcall Bot_GetPathToGoalInternal(bot_data_t *botData, const vec3_t *goal, double goalRadius, const char *debugReason)
{
  AINavigator *pNavigator; 
  int ShouldAvoidTraversals; 
  unsigned int v10; 
  bot_path_style_t PathingStyle; 
  bot_path_style_t v12; 
  __int64 v13; 
  float v14; 
  float v15; 
  float v16; 
  const dvar_t *v17; 
  unsigned int v18; 
  int IsScriptGoal; 
  int flags; 
  int v21; 
  scr_string_t bad_path; 
  pathnode_t *v25; 
  gentity_s *ent; 
  __int64 result; 

  pNavigator = botData->botInfo.pNavigator;
  botData->botInfo.lastPathCalcTime = level.time;
  _XMM10 = *(_OWORD *)&goalRadius;
  Bot_PathClear(&botData->botInfo);
  botData->botInfo.flags &= ~8u;
  s_botGetPathToGoalCalled = 1;
  ShouldAvoidTraversals = Bot_ShouldAvoidTraversals(botData);
  v10 = 0;
  if ( !ShouldAvoidTraversals )
    v10 = 1792;
  Nav_SetLinkUsageFlags(botData->botInfo.pNavigator, v10);
  Path_ZoneCount();
  PathingStyle = Bot_GetPathingStyle(botData, goal);
  v12 = PathingStyle;
  if ( (unsigned int)PathingStyle >= BOT_PATH_STYLE_COUNT && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14049, ASSERT_TYPE_ASSERT, "(unsigned)( pathStyle ) < (unsigned)( BOT_PATH_STYLE_COUNT )", "pathStyle doesn't index BOT_PATH_STYLE_COUNT\n\t%i not in [0, %i)", PathingStyle, 12) )
    __debugbreak();
  if ( v12 != BOT_PATH_STYLE_SCRIPTED && Com_GameMode_SupportsFeature(WEAPON_RAISING_ALTSWITCH) && Nav_HasExposureData() )
  {
    v13 = 4 * v12;
    v14 = PATH_WEIGHTS[v13];
    v15 = PATH_WEIGHTS[v13 + 1];
    v16 = PATH_WEIGHTS[v13 + 2];
    Nav_SetPenaltyTableMode(pNavigator, PENALTY_MODE_DISABLED);
    Nav_ClearPenaltyTable(pNavigator);
    if ( v14 != 0.0 )
    {
      Nav_SetPenaltyTableValue(pNavigator, 1u, 1);
      Nav_SetPenaltyTableValue(pNavigator, 2u, 2);
      Nav_SetPenaltyTableValue(pNavigator, 3u, 4);
      Nav_SetPenaltyTableValue(pNavigator, 4u, 8);
    }
    if ( v16 != 0.0 )
    {
      Nav_SetPenaltyTableValue(pNavigator, 5u, 1);
      Nav_SetPenaltyTableValue(pNavigator, 6u, 2);
      Nav_SetPenaltyTableValue(pNavigator, 7u, 4);
      Nav_SetPenaltyTableValue(pNavigator, 8u, 8);
    }
    if ( v15 != 0.0 )
    {
      Nav_SetPenaltyTableValue(pNavigator, 9u, 1);
      Nav_SetPenaltyTableValue(pNavigator, 0xAu, 2);
      Nav_SetPenaltyTableValue(pNavigator, 0xBu, 4);
      Nav_SetPenaltyTableValue(pNavigator, 0xCu, 8);
    }
    v17 = DVARBOOL_bot_ForcePathIndoors;
    if ( !DVARBOOL_bot_ForcePathIndoors && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 692, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_ForcePathIndoors") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v17);
    if ( (*((_BYTE *)&botData->scriptedAgentInfo + 9016) & 2) != 0 || v17->current.enabled )
    {
      Nav_SetPenaltyTableValue(pNavigator, 0, (int)(float)(botData->botMatchData.avoidSkyPercent * 9.0));
LABEL_25:
      Nav_SetPenaltyTableMode(pNavigator, PENALTY_MODE_TOTAL);
      goto LABEL_26;
    }
    if ( v14 != 0.0 || v16 != 0.0 || v15 != 0.0 )
      goto LABEL_25;
  }
LABEL_26:
  v18 = Nav_SetGoalPos(pNavigator, goal, 0.0);
  Bot_DrawFindPathDebugInfo(botData, v18, debugReason);
  IsScriptGoal = Bot_LocationIsScriptGoal(botData, goal);
  flags = botData->botInfo.flags;
  v21 = IsScriptGoal;
  if ( v18 )
  {
    __asm
    {
      vcmpeqss xmm1, xmm10, xmm6
      vblendvps xmm2, xmm10, xmm0, xmm1; fRadius
    }
    botData->scriptedAgentInfo.scriptGoal.node = NULL;
    AICommonInterface::SetGoal(&botData->botInfo.activeGoal, goal, *(float *)&_XMM2, 0.0, 1);
    v25 = Path_NearestNode(goal, botData->botInfo.ent->clipmask, NULL);
    botData->botInfo.activeGoal.nearestNode = v25;
    if ( v25 )
      pathnode_t::LocalizePosToParent(v25, &botData->botInfo.activeGoal.pos);
    botData->botInfo.flags &= 0xFFBFE7FF;
    if ( (botData->botInfo.flags & 0x4000) != 0 && v21 && (flags & 0x80000) != 0 )
    {
      bad_path = scr_const.bad_path;
      goto LABEL_37;
    }
  }
  else
  {
    if ( !botData->botInfo.noPathFoundTime )
      botData->botInfo.noPathFoundTime = level.time;
    botData->botInfo.noPathFoundTimeLast = level.time;
    if ( IsScriptGoal )
    {
      bad_path = scr_const.no_path;
LABEL_37:
      GScr_Notify(botData->botInfo.ent, bad_path, 0);
    }
  }
  ent = botData->botInfo.ent;
  result = v18;
  botData->botInfo.pathProgressTime = 0;
  botData->botInfo.pathProgressLast.v[0] = ent->r.currentOrigin.v[0];
  botData->botInfo.pathProgressLast.v[1] = ent->r.currentOrigin.v[1];
  botData->botInfo.pathProgressLast.v[2] = ent->r.currentOrigin.v[2];
  return result;
}

/*
==============
Bot_GetPathingStyle
==============
*/
__int64 Bot_GetPathingStyle(const bot_data_t *botData, const vec3_t *newGoal)
{
  const dvar_t *v4; 
  const dvar_t *v5; 
  __int64 result; 
  bot_scr_goal_t type; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14551, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( newGoal && botData->botInfo.lastPathCalcTime != level.time && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14557, ASSERT_TYPE_ASSERT, "( !newGoal || (botInfo->lastPathCalcTime == level.time) )", (const char *)&queryFormat, "!newGoal || (botInfo->lastPathCalcTime == level.time)") )
    __debugbreak();
  v4 = DVARINT_bot_DebugPathStyle;
  if ( !DVARINT_bot_DebugPathStyle && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DebugPathStyle") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v4);
  if ( v4->current.integer )
  {
    v5 = DVARINT_bot_DebugPathStyle;
    if ( !DVARINT_bot_DebugPathStyle && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DebugPathStyle") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v5);
    return v5->current.unsignedInt;
  }
  result = (unsigned int)botData->botInfo.scriptPathStyle;
  if ( (_DWORD)result )
    return result;
  if ( !Bot_HasScriptGoal(botData) )
    return (unsigned int)botData->botInfo.activeGoal.pathStyle;
  if ( !newGoal )
  {
    if ( Bot_ActiveGoalIsScriptGoal(botData) )
      goto LABEL_22;
    return (unsigned int)botData->botInfo.activeGoal.pathStyle;
  }
  if ( !Bot_LocationIsScriptGoal(botData, newGoal) )
    return (unsigned int)botData->botInfo.activeGoal.pathStyle;
LABEL_22:
  type = botData->botInfo.scriptGoal.type;
  if ( type == BOT_SCR_GOAL_CAMP )
    return 4i64;
  if ( type != BOT_SCR_GOAL_OBJECTIVE )
    return (unsigned int)botData->botInfo.activeGoal.pathStyle;
  result = 8i64;
  if ( *((char *)&botData->scriptedAgentInfo + 9016) >= 0 )
    return (unsigned int)botData->botInfo.activeGoal.pathStyle;
  return result;
}

/*
==============
Bot_GetPathingStyleFromString
==============
*/
__int64 Bot_GetPathingStyleFromString(const char *string)
{
  const char *v1; 
  unsigned int v2; 
  __int64 v4; 
  __int64 v5; 
  const char *v6; 
  signed __int64 v7; 
  int v8; 
  __int64 v9; 
  int v10; 
  int v11; 
  int v12; 

  v1 = BOT_STR_TBL_PATH_TYPE[0];
  v2 = 0;
  if ( BOT_STR_TBL_PATH_TYPE[0] )
  {
    v4 = 0i64;
    do
    {
      if ( !*v1 )
        break;
      v5 = 0x7FFFFFFFi64;
      v6 = string;
      if ( !v1 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 212, ASSERT_TYPE_SANITY, "( s0 )", (const char *)&queryFormat, "s0") )
        __debugbreak();
      if ( !string && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 213, ASSERT_TYPE_SANITY, "( s1 )", (const char *)&queryFormat, "s1") )
        __debugbreak();
      v7 = v1 - string;
      while ( 1 )
      {
        v8 = (unsigned __int8)v6[v7];
        v9 = v5;
        v10 = *(unsigned __int8 *)v6++;
        --v5;
        if ( !v9 )
          return v2;
        if ( v8 != v10 )
        {
          v11 = v8 + 32;
          if ( (unsigned int)(v8 - 65) > 0x19 )
            v11 = v8;
          v8 = v11;
          v12 = v10 + 32;
          if ( (unsigned int)(v10 - 65) > 0x19 )
            v12 = v10;
          if ( v8 != v12 )
            break;
        }
        if ( !v8 )
          return v2;
      }
      v1 = BOT_STR_TBL_PATH_TYPE[++v4];
      ++v2;
    }
    while ( v1 );
  }
  return 12i64;
}

/*
==============
Bot_GetPersonality
==============
*/
__int64 Bot_GetPersonality(const bot_data_t *botData)
{
  __int64 result; 
  __int64 v3; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20765, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  result = (unsigned int)botData->botMatchData.personality;
  if ( (unsigned int)result >= 3 )
  {
    LODWORD(v3) = botData->botMatchData.personality;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20768, ASSERT_TYPE_ASSERT, "(unsigned)( botMatchData->personality ) < (unsigned)( BOT_PERSONALITY_DEFAULT )", "botMatchData->personality doesn't index BOT_PERSONALITY_DEFAULT\n\t%i not in [0, %i)", v3, 3) )
      __debugbreak();
    return (unsigned int)botData->botMatchData.personality;
  }
  return result;
}

/*
==============
Bot_GetPersonalityName
==============
*/
const char *Bot_GetPersonalityName(const bot_data_t *botData)
{
  bot_personality_t Personality; 
  __int64 v3; 
  __int64 v5; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20779, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  Personality = Bot_GetPersonality(botData);
  v3 = Personality;
  if ( (unsigned int)Personality >= BOT_PERSONALITY_DEFAULT )
  {
    LODWORD(v5) = Personality;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20782, ASSERT_TYPE_ASSERT, "(unsigned)( type ) < (unsigned)( BOT_PERSONALITY_DEFAULT )", "type doesn't index BOT_PERSONALITY_DEFAULT\n\t%i not in [0, %i)", v5, 3) )
      __debugbreak();
  }
  return BOT_STR_TBL_PERSONALITY[v3];
}

/*
==============
Bot_GetPredictedEntityPosition
==============
*/
__int64 Bot_GetPredictedEntityPosition(const bot_data_t *botData, const gentity_s *ent, vec3_t *predictedPositionOut)
{
  int LastKnownEntPosAndTime; 
  const gentity_s *v7; 
  pathnode_t *BestNode; 
  float v9; 
  __int64 result; 
  __int64 v11; 
  vec3_t targetPos; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19080, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  LastKnownEntPosAndTime = Bot_GetLastKnownEntPosAndTime(botData, ent, &targetPos);
  if ( !LastKnownEntPosAndTime || level.time - LastKnownEntPosAndTime > 2500 )
    return 0i64;
  if ( (LODWORD(targetPos.v[0]) & 0x7F800000) == 2139095040 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19092, ASSERT_TYPE_ASSERT, "( !IS_NAN( position[0] ) )", (const char *)&queryFormat, "!IS_NAN( position[0] )", targetPos.v[0]) )
    __debugbreak();
  *(float *)&v11 = targetPos.v[1];
  if ( (LODWORD(targetPos.v[1]) & 0x7F800000) == 2139095040 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19093, ASSERT_TYPE_ASSERT, "( !IS_NAN( position[1] ) )", (const char *)&queryFormat, "!IS_NAN( position[1] )", v11) )
    __debugbreak();
  *(float *)&v11 = targetPos.v[2];
  if ( (LODWORD(targetPos.v[2]) & 0x7F800000) == 2139095040 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19094, ASSERT_TYPE_ASSERT, "( !IS_NAN( position[2] ) )", (const char *)&queryFormat, "!IS_NAN( position[2] )", v11) )
    __debugbreak();
  if ( botData->botInfo.currentAISearch.currentNodeCount )
  {
    v7 = EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) ? EntHandle::ent(&botData->botInfo.sentient->targetEnt) : 0i64;
    if ( v7 == ent && !Bot_CanSeeEnemy(botData) )
    {
      BestNode = AI_SearchGetBestNode(&botData->botInfo.currentAISearch);
      if ( BestNode )
        pathnode_t::GetPos(BestNode, &targetPos);
    }
  }
  *(float *)&v11 = targetPos.v[0];
  if ( (LODWORD(targetPos.v[0]) & 0x7F800000) == 2139095040 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19103, ASSERT_TYPE_ASSERT, "( !IS_NAN( position[0] ) )", (const char *)&queryFormat, "!IS_NAN( position[0] )", v11) )
    __debugbreak();
  *(float *)&v11 = targetPos.v[1];
  if ( (LODWORD(targetPos.v[1]) & 0x7F800000) == 2139095040 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19104, ASSERT_TYPE_ASSERT, "( !IS_NAN( position[1] ) )", (const char *)&queryFormat, "!IS_NAN( position[1] )", v11) )
    __debugbreak();
  *(float *)&v11 = targetPos.v[2];
  if ( (LODWORD(targetPos.v[2]) & 0x7F800000) == 2139095040 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19105, ASSERT_TYPE_ASSERT, "( !IS_NAN( position[2] ) )", (const char *)&queryFormat, "!IS_NAN( position[2] )", v11) )
    __debugbreak();
  v9 = targetPos.v[1];
  result = 1i64;
  predictedPositionOut->v[0] = targetPos.v[0];
  predictedPositionOut->v[2] = targetPos.v[2];
  predictedPositionOut->v[1] = v9;
  return result;
}

/*
==============
Bot_GetRadarIsJammed
==============
*/
_BOOL8 Bot_GetRadarIsJammed(const bot_info_t *botInfo)
{
  playerState_s *playerState; 
  float MinJammerDist; 
  _BOOL8 result; 

  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6256, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  if ( !botInfo->playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6257, ASSERT_TYPE_ASSERT, "( botInfo->playerState )", (const char *)&queryFormat, "botInfo->playerState") )
    __debugbreak();
  playerState = botInfo->playerState;
  result = 1;
  if ( !playerState->radarBlocked )
  {
    if ( BG_HasPerk(&playerState->perks, 0x2Cu) )
      return 0;
    if ( botInfo->playerState->radarStrength > 2 )
    {
      MinJammerDist = Bot_GetMinJammerDist(botInfo);
      if ( MinJammerDist <= 0.0 || MinJammerDist > 800.0 )
        return 0;
    }
  }
  return result;
}

/*
==============
Bot_GetRemoteEyesEnt
==============
*/
gentity_s *Bot_GetRemoteEyesEnt(const bot_data_t *botData)
{
  __int16 RemoteEyesEntNum; 
  gentity_s *v3; 
  __int64 v5; 
  __int64 v6; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5274, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !Bot_HasRemoteEyes(botData) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5275, ASSERT_TYPE_ASSERT, "( Bot_HasRemoteEyes( botData ) )", (const char *)&queryFormat, "Bot_HasRemoteEyes( botData )") )
    __debugbreak();
  RemoteEyesEntNum = Bot_GetRemoteEyesEntNum(botData);
  if ( (unsigned int)RemoteEyesEntNum >= 0x800 )
  {
    LODWORD(v5) = RemoteEyesEntNum;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5279, ASSERT_TYPE_ASSERT, "(unsigned)( remoteEyesEntNum ) < (unsigned)( ( 2048 ) )", "remoteEyesEntNum doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v5, 2048) )
      __debugbreak();
  }
  if ( RemoteEyesEntNum == 2047 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5280, ASSERT_TYPE_ASSERT, "( remoteEyesEntNum != ENTITYNUM_NONE )", (const char *)&queryFormat, "remoteEyesEntNum != ENTITYNUM_NONE") )
    __debugbreak();
  if ( (unsigned int)RemoteEyesEntNum >= 0x800 )
  {
    LODWORD(v6) = 2048;
    LODWORD(v5) = RemoteEyesEntNum;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 207, ASSERT_TYPE_ASSERT, "(unsigned)( entityIndex ) < (unsigned)( ( 2048 ) )", "entityIndex doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v5, v6) )
      __debugbreak();
  }
  if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 208, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
    __debugbreak();
  if ( g_entities[RemoteEyesEntNum].r.isInUse != g_entityIsInUse[RemoteEyesEntNum] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 209, ASSERT_TYPE_ASSERT, "( g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex] )", (const char *)&queryFormat, "g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex]") )
    __debugbreak();
  if ( !g_entityIsInUse[RemoteEyesEntNum] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5281, ASSERT_TYPE_ASSERT, "( G_IsEntityInUse( remoteEyesEntNum ) )", (const char *)&queryFormat, "G_IsEntityInUse( remoteEyesEntNum )") )
    __debugbreak();
  v3 = &g_entities[RemoteEyesEntNum];
  if ( !v3 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5284, ASSERT_TYPE_ASSERT, "( remoteEyesEnt )", (const char *)&queryFormat, "remoteEyesEnt") )
    __debugbreak();
  return v3;
}

/*
==============
Bot_GetRemoteEyesEntNum
==============
*/
__int64 Bot_GetRemoteEyesEntNum(const bot_data_t *botData)
{
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5236, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5237, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState )", (const char *)&queryFormat, "botData->botInfo.playerState") )
    __debugbreak();
  return (unsigned __int16)botData->botInfo.playerState->remoteEyesEnt;
}

/*
==============
Bot_GetRemoteEyesVehicleDef
==============
*/
const VehicleDef *Bot_GetRemoteEyesVehicleDef(const bot_data_t *botData)
{
  const gentity_s *RemoteEyesVehicleEnt; 
  const VehicleDef *result; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5339, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !Bot_IsRemoteEyesVehicle(botData) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5340, ASSERT_TYPE_ASSERT, "( Bot_IsRemoteEyesVehicle( botData ) )", (const char *)&queryFormat, "Bot_IsRemoteEyesVehicle( botData )") )
    __debugbreak();
  RemoteEyesVehicleEnt = Bot_GetRemoteEyesVehicleEnt(botData);
  result = G_Vehicle_GetServerDef(RemoteEyesVehicleEnt->vehicle->defIndex);
  if ( !result )
  {
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5344, ASSERT_TYPE_ASSERT, "( vehicleDef )", (const char *)&queryFormat, "vehicleDef") )
      __debugbreak();
    return 0i64;
  }
  return result;
}

/*
==============
Bot_GetRemoteEyesVehicleEnt
==============
*/
gentity_s *Bot_GetRemoteEyesVehicleEnt(const bot_data_t *botData)
{
  __int64 entity; 
  gentity_s *v3; 
  __int64 v5; 
  __int64 v6; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5316, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5317, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState )", (const char *)&queryFormat, "botData->botInfo.playerState") )
    __debugbreak();
  if ( !Bot_HasRemoteEyes(botData) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5318, ASSERT_TYPE_ASSERT, "( Bot_HasRemoteEyes( botData ) )", (const char *)&queryFormat, "Bot_HasRemoteEyes( botData )") )
    __debugbreak();
  if ( !Bot_IsRemoteEyesVehicle(botData) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5319, ASSERT_TYPE_ASSERT, "( Bot_IsRemoteEyesVehicle( botData ) )", (const char *)&queryFormat, "Bot_IsRemoteEyesVehicle( botData )") )
    __debugbreak();
  if ( botData->botInfo.playerState->vehicleState.entity >= 0x800u )
  {
    LODWORD(v5) = botData->botInfo.playerState->vehicleState.entity;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5321, ASSERT_TYPE_ASSERT, "(unsigned)( botData->botInfo.playerState->vehicleState.entity ) < (unsigned)( ( 2048 ) )", "botData->botInfo.playerState->vehicleState.entity doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v5, 2048) )
      __debugbreak();
  }
  if ( botData->botInfo.playerState->vehicleState.entity == 2047 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5322, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState->vehicleState.entity != ENTITYNUM_NONE )", (const char *)&queryFormat, "botData->botInfo.playerState->vehicleState.entity != ENTITYNUM_NONE") )
    __debugbreak();
  if ( botData->botInfo.playerState->vehicleState.entity != (__int16)Bot_GetRemoteEyesEntNum(botData) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5323, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState->vehicleState.entity == Bot_GetRemoteEyesEntNum( botData ) )", (const char *)&queryFormat, "botData->botInfo.playerState->vehicleState.entity == Bot_GetRemoteEyesEntNum( botData )") )
    __debugbreak();
  entity = botData->botInfo.playerState->vehicleState.entity;
  if ( (unsigned int)entity >= 0x800 )
  {
    LODWORD(v6) = 2048;
    LODWORD(v5) = botData->botInfo.playerState->vehicleState.entity;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 207, ASSERT_TYPE_ASSERT, "(unsigned)( entityIndex ) < (unsigned)( ( 2048 ) )", "entityIndex doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v5, v6) )
      __debugbreak();
  }
  if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 208, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
    __debugbreak();
  if ( g_entities[entity].r.isInUse != g_entityIsInUse[entity] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 209, ASSERT_TYPE_ASSERT, "( g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex] )", (const char *)&queryFormat, "g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex]") )
    __debugbreak();
  if ( !g_entityIsInUse[entity] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5324, ASSERT_TYPE_ASSERT, "( G_IsEntityInUse( botData->botInfo.playerState->vehicleState.entity ) )", (const char *)&queryFormat, "G_IsEntityInUse( botData->botInfo.playerState->vehicleState.entity )") )
    __debugbreak();
  v3 = &g_entities[botData->botInfo.playerState->vehicleState.entity];
  if ( !v3 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5327, ASSERT_TYPE_ASSERT, "( remoteEyesVehicleEnt )", (const char *)&queryFormat, "remoteEyesVehicleEnt") )
    __debugbreak();
  if ( !v3->vehicle && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5328, ASSERT_TYPE_ASSERT, "( remoteEyesVehicleEnt->vehicle )", (const char *)&queryFormat, "remoteEyesVehicleEnt->vehicle") )
    __debugbreak();
  return v3;
}

/*
==============
Bot_GetRemoteVehicleType
==============
*/
__int64 Bot_GetRemoteVehicleType(const bot_data_t *botData)
{
  gentity_s *RemoteEyesVehicleEnt; 
  Vehicle *vehicle; 
  const VehicleDef *ServerDef; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5355, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !Bot_HasRemoteEyes(botData) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5356, ASSERT_TYPE_ASSERT, "( Bot_HasRemoteEyes( botData ) )", (const char *)&queryFormat, "Bot_HasRemoteEyes( botData )") )
    __debugbreak();
  if ( !Bot_IsRemoteEyesVehicle(botData) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5357, ASSERT_TYPE_ASSERT, "( Bot_IsRemoteEyesVehicle( botData ) )", (const char *)&queryFormat, "Bot_IsRemoteEyesVehicle( botData )") )
    __debugbreak();
  RemoteEyesVehicleEnt = Bot_GetRemoteEyesVehicleEnt(botData);
  if ( !RemoteEyesVehicleEnt && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\bgame\\bg_public.h", 1914, ASSERT_TYPE_ASSERT, "(es)", (const char *)&queryFormat, "es") )
    __debugbreak();
  if ( ((RemoteEyesVehicleEnt->s.eType - 12) & 0xFFFD) != 0 || (vehicle = RemoteEyesVehicleEnt->vehicle) == NULL )
  {
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5372, ASSERT_TYPE_ASSERT, (const char *)&queryFormat.fmt + 3, "unreachable") )
      __debugbreak();
    return 2i64;
  }
  else
  {
    ServerDef = G_Vehicle_GetServerDef(vehicle->defIndex);
    if ( !ServerDef && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5364, ASSERT_TYPE_ASSERT, "( vehicleDef )", (const char *)&queryFormat, "vehicleDef") )
      __debugbreak();
    return !ServerDef->camRemoteDrive && ServerDef->vehCam_zOffsetMode == VEHCAM_ZMODE_VEHICLE && ServerDef->vehCam_zOffsetMode3P == VEHCAM_ZMODE_VIEW && ServerDef->vehCam_radius3P > 0.0;
  }
}

/*
==============
Bot_GetRequestedNavGoal
==============
*/
void Bot_GetRequestedNavGoal(const bot_info_t *botInfo, vec3_t *requestedGoalOut)
{
  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13980, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  botInfo->pNavigator->GetRequestedGoalPos(botInfo->pNavigator, requestedGoalOut);
}

/*
==============
Bot_GetScriptButtonType
==============
*/
__int64 Bot_GetScriptButtonType(const char *buttonName)
{
  const char *v1; 
  unsigned int v2; 
  __int64 v4; 
  __int64 v5; 
  const char *v6; 
  signed __int64 v7; 
  int v8; 
  __int64 v9; 
  int v10; 
  int v11; 
  int v12; 

  v1 = BOT_STR_TBL_BUTTONS[0];
  v2 = 0;
  if ( BOT_STR_TBL_BUTTONS[0] )
  {
    v4 = 0i64;
    do
    {
      if ( !*v1 )
        break;
      v5 = 0x7FFFFFFFi64;
      v6 = buttonName;
      if ( !v1 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 212, ASSERT_TYPE_SANITY, "( s0 )", (const char *)&queryFormat, "s0") )
        __debugbreak();
      if ( !buttonName && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 213, ASSERT_TYPE_SANITY, "( s1 )", (const char *)&queryFormat, "s1") )
        __debugbreak();
      v7 = v1 - buttonName;
      while ( 1 )
      {
        v8 = (unsigned __int8)v6[v7];
        v9 = v5;
        v10 = *(unsigned __int8 *)v6++;
        --v5;
        if ( !v9 )
          return v2;
        if ( v8 != v10 )
        {
          v11 = v8 + 32;
          if ( (unsigned int)(v8 - 65) > 0x19 )
            v11 = v8;
          v8 = v11;
          v12 = v10 + 32;
          if ( (unsigned int)(v10 - 65) > 0x19 )
            v12 = v10;
          if ( v8 != v12 )
            break;
        }
        if ( !v8 )
          return v2;
      }
      v1 = BOT_STR_TBL_BUTTONS[++v4];
      ++v2;
    }
    while ( v1 );
  }
  return 12i64;
}

/*
==============
Bot_GetScriptFlagType
==============
*/
__int64 Bot_GetScriptFlagType(const char *scriptFlagName)
{
  const char *v1; 
  unsigned int v2; 
  __int64 v4; 
  __int64 v5; 
  const char *v6; 
  signed __int64 v7; 
  int v8; 
  __int64 v9; 
  int v10; 
  int v11; 
  int v12; 

  v1 = BOT_STR_TBL_FLAGS[0];
  v2 = 0;
  if ( BOT_STR_TBL_FLAGS[0] )
  {
    v4 = 0i64;
    do
    {
      if ( !*v1 )
        break;
      v5 = 0x7FFFFFFFi64;
      v6 = scriptFlagName;
      if ( !v1 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 212, ASSERT_TYPE_SANITY, "( s0 )", (const char *)&queryFormat, "s0") )
        __debugbreak();
      if ( !scriptFlagName && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 213, ASSERT_TYPE_SANITY, "( s1 )", (const char *)&queryFormat, "s1") )
        __debugbreak();
      v7 = v1 - scriptFlagName;
      while ( 1 )
      {
        v8 = (unsigned __int8)v6[v7];
        v9 = v5;
        v10 = *(unsigned __int8 *)v6++;
        --v5;
        if ( !v9 )
          return v2;
        if ( v8 != v10 )
        {
          v11 = v8 + 32;
          if ( (unsigned int)(v8 - 65) > 0x19 )
            v11 = v8;
          v8 = v11;
          v12 = v10 + 32;
          if ( (unsigned int)(v10 - 65) > 0x19 )
            v12 = v10;
          if ( v8 != v12 )
            break;
        }
        if ( !v8 )
          return v2;
      }
      v1 = BOT_STR_TBL_FLAGS[++v4];
      ++v2;
    }
    while ( v1 );
  }
  return 25i64;
}

/*
==============
Bot_GetScriptGoal
==============
*/
void Bot_GetScriptGoal(const bot_data_t *botData, vec3_t *goal)
{
  float v4; 
  pathnode_t *nearestNode; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23638, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23639, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( botData->botInfo.scriptGoal.type == BOT_SCR_GOAL_NONE && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23642, ASSERT_TYPE_ASSERT, "( botInfo->scriptGoal.type != BOT_SCR_GOAL_NONE )", (const char *)&queryFormat, "botInfo->scriptGoal.type != BOT_SCR_GOAL_NONE") )
    __debugbreak();
  v4 = botData->botInfo.scriptGoal.pos.v[0];
  goal->v[0] = v4;
  goal->v[1] = botData->botInfo.scriptGoal.pos.v[1];
  LODWORD(goal->v[2]) = botData->scriptedAgentInfo.blackboard.m_ShootParams.m_StartTime;
  nearestNode = botData->botInfo.scriptGoal.nearestNode;
  if ( nearestNode )
  {
    pathnode_t::WorldifyPosFromParent(nearestNode, goal);
    v4 = goal->v[0];
  }
  if ( v4 == 0.0 && goal->v[1] == 0.0 && goal->v[2] == 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23649, ASSERT_TYPE_ASSERT, "( Vec3NotZero( goal ) )", (const char *)&queryFormat, "Vec3NotZero( goal )") )
    __debugbreak();
  if ( (LODWORD(goal->v[0]) & 0x7F800000) == 2139095040 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23650, ASSERT_TYPE_ASSERT, "( !IS_NAN( goal[0] ) )", (const char *)&queryFormat, "!IS_NAN( goal[0] )") )
    __debugbreak();
  if ( (LODWORD(goal->v[1]) & 0x7F800000) == 2139095040 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23651, ASSERT_TYPE_ASSERT, "( !IS_NAN( goal[1] ) )", (const char *)&queryFormat, "!IS_NAN( goal[1] )") )
    __debugbreak();
  if ( (LODWORD(goal->v[2]) & 0x7F800000) == 2139095040 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23652, ASSERT_TYPE_ASSERT, "( !IS_NAN( goal[2] ) )", (const char *)&queryFormat, "!IS_NAN( goal[2] )") )
    __debugbreak();
}

/*
==============
Bot_GetScriptGoalNode
==============
*/
pathnode_t *Bot_GetScriptGoalNode(const bot_data_t *botData)
{
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23678, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( botData->botInfo.scriptGoal.type == BOT_SCR_GOAL_NONE && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23679, ASSERT_TYPE_ASSERT, "( botData->botInfo.scriptGoal.type != BOT_SCR_GOAL_NONE )", (const char *)&queryFormat, "botData->botInfo.scriptGoal.type != BOT_SCR_GOAL_NONE") )
    __debugbreak();
  return botData->botInfo.scriptGoal.node;
}

/*
==============
Bot_GetScriptGoalRadius
==============
*/
float Bot_GetScriptGoalRadius(const bot_data_t *botData)
{
  if ( botData )
    return botData->botInfo.scriptGoal.radius;
  if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23690, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  return MEMORY[0x20C];
}

/*
==============
Bot_GetScriptGoalType
==============
*/
__int64 Bot_GetScriptGoalType(const bot_data_t *botData)
{
  if ( botData )
    return (unsigned int)botData->botInfo.scriptGoal.type;
  if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20741, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  return MEMORY[0x22C];
}

/*
==============
Bot_GetScriptGoalTypeName
==============
*/
const char *Bot_GetScriptGoalTypeName(const bot_data_t *botData)
{
  if ( !botData )
  {
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20752, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
      __debugbreak();
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20741, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
      __debugbreak();
  }
  return BOT_STR_TBL_GOAL_TYPE[botData->botInfo.scriptGoal.type];
}

/*
==============
Bot_GetScriptGoalYaw
==============
*/
float Bot_GetScriptGoalYaw(const bot_data_t *botData)
{
  if ( botData )
    return botData->botInfo.scriptGoal.yaw;
  if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23701, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  return MEMORY[0x228];
}

/*
==============
Bot_GetScriptedGrenadeType
==============
*/
__int64 Bot_GetScriptedGrenadeType(const char *scriptGrenadeTypeName)
{
  const char *v1; 
  unsigned int v2; 
  __int64 v4; 
  __int64 v5; 
  const char *v6; 
  signed __int64 v7; 
  int v8; 
  __int64 v9; 
  int v10; 
  int v11; 
  int v12; 

  v1 = BOT_STR_TBL_GRENADE_TYPES[0];
  v2 = 0;
  if ( BOT_STR_TBL_GRENADE_TYPES[0] )
  {
    v4 = 0i64;
    do
    {
      if ( !*v1 )
        break;
      v5 = 0x7FFFFFFFi64;
      v6 = scriptGrenadeTypeName;
      if ( !v1 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 212, ASSERT_TYPE_SANITY, "( s0 )", (const char *)&queryFormat, "s0") )
        __debugbreak();
      if ( !scriptGrenadeTypeName && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 213, ASSERT_TYPE_SANITY, "( s1 )", (const char *)&queryFormat, "s1") )
        __debugbreak();
      v7 = v1 - scriptGrenadeTypeName;
      while ( 1 )
      {
        v8 = (unsigned __int8)v6[v7];
        v9 = v5;
        v10 = *(unsigned __int8 *)v6++;
        --v5;
        if ( !v9 )
          return v2;
        if ( v8 != v10 )
        {
          v11 = v8 + 32;
          if ( (unsigned int)(v8 - 65) > 0x19 )
            v11 = v8;
          v8 = v11;
          v12 = v10 + 32;
          if ( (unsigned int)(v10 - 65) > 0x19 )
            v12 = v10;
          if ( v8 != v12 )
            break;
        }
        if ( !v8 )
          return v2;
      }
      v1 = BOT_STR_TBL_GRENADE_TYPES[++v4];
      ++v2;
    }
    while ( v1 );
  }
  return 3i64;
}

/*
==============
Bot_GetSensesObstructed
==============
*/
_BOOL8 Bot_GetSensesObstructed(const bot_data_t *botData, float *visionBlock, float *hearingBlock)
{
  playerState_s *playerState; 
  BOOL v7; 
  int shellshockTime; 
  int shellshockDuration; 
  int v10; 
  shellshock_parms_t *ShellshockParms; 
  ShockViewTypes type; 
  int blurredEffectTime; 
  float v14; 
  int blurredFadeTime; 
  float flashWhiteFadeTime; 
  float flashShotFadeTime; 
  float v20; 
  float v21; 
  double v22; 
  float v23; 
  double v24; 
  float v25; 
  int fadeOutTime; 
  int fadeInTime; 
  int v28; 
  float v29; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13488, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13491, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  v7 = 0;
  if ( visionBlock )
    *visionBlock = 0.0;
  if ( hearingBlock )
    *hearingBlock = 0.0;
  if ( GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&playerState->pm_flags, ACTIVE, 0x15u) )
  {
    shellshockTime = playerState->shellshockTime;
    shellshockDuration = playerState->shellshockDuration;
    if ( level.time < shellshockTime + shellshockDuration )
    {
      v10 = shellshockTime + shellshockDuration - level.time;
      if ( playerState->shellshockDuration )
      {
        if ( shellshockTime > 0 && v10 > 0 )
        {
          ShellshockParms = BG_GetShellshockParms(playerState->shellshockIndex);
          type = ShellshockParms->screenBlend.type;
          blurredEffectTime = ShellshockParms->screenBlend.blurredEffectTime;
          v14 = (float)v10;
          v7 = type == SHELLSHOCK_VIEWTYPE_FLASHED || ShellshockParms->sound.affect;
          blurredFadeTime = ShellshockParms->screenBlend.blurredFadeTime;
          if ( type == SHELLSHOCK_VIEWTYPE_BLURRED )
            v7 = 1;
          if ( v10 < blurredFadeTime )
          {
            _mm_cvtepi32_ps((__m128i)(unsigned int)blurredFadeTime);
            _mm_cvtepi32_ps((__m128i)(unsigned int)blurredEffectTime);
            _XMM1 = 0i64;
            __asm { vroundss xmm2, xmm1, xmm3, 1 }
            blurredEffectTime = (int)*(float *)&_XMM2;
          }
          if ( blurredEffectTime > 0 && visionBlock )
          {
            if ( type )
            {
              if ( type == SHELLSHOCK_VIEWTYPE_FLASHED )
              {
                flashWhiteFadeTime = (float)ShellshockParms->screenBlend.flashWhiteFadeTime;
                flashShotFadeTime = (float)ShellshockParms->screenBlend.flashShotFadeTime;
                if ( v14 >= flashWhiteFadeTime )
                  v20 = FLOAT_1_0;
                else
                  v20 = v14 / flashWhiteFadeTime;
                if ( v14 >= flashShotFadeTime )
                  v21 = FLOAT_1_0;
                else
                  v21 = v14 / flashShotFadeTime;
                v22 = BG_ShellshockBlendSmooth(v20);
                v23 = *(float *)&v22;
                v24 = BG_ShellshockBlendSmooth(v21);
                *visionBlock = (float)((float)(*(float *)&v24 * 0.25) + (float)(v23 * 0.75)) + *visionBlock;
              }
            }
            else
            {
              if ( v14 >= (float)blurredFadeTime )
                v25 = FLOAT_1_0;
              else
                v25 = v14 / (float)blurredFadeTime;
              *visionBlock = (float)(v25 * 0.30000001) + *visionBlock;
            }
          }
          if ( ShellshockParms->sound.affect && hearingBlock )
          {
            fadeOutTime = ShellshockParms->sound.fadeOutTime;
            fadeInTime = ShellshockParms->sound.fadeInTime;
            v28 = shellshockDuration + fadeOutTime + ShellshockParms->sound.modEndDelay - (level.time - shellshockTime);
            if ( level.time - shellshockTime < fadeInTime )
            {
              v29 = 1.0 - (float)((float)(level.time - shellshockTime) / (float)fadeInTime);
LABEL_44:
              *hearingBlock = v29;
              return v7;
            }
            if ( v28 <= fadeOutTime )
            {
              if ( v28 >= 0 && v28 < fadeOutTime )
              {
                v29 = (float)v28 / (float)fadeOutTime;
                goto LABEL_44;
              }
            }
            else
            {
              *hearingBlock = 1.0;
            }
          }
        }
      }
    }
  }
  return v7;
}

/*
==============
Bot_GetSpectatedBotData
==============
*/
bot_data_t *Bot_GetSpectatedBotData(const LocalClientNum_t localClientNum)
{
  const dvar_t *v2; 
  const dvar_t *v3; 
  const dvar_t *v4; 
  const dvar_t *v5; 
  const dvar_t *v6; 
  gentity_s *v7; 
  cg_t *LocalClientGlobals; 
  cg_t *v10; 
  centity_t *predictedPlayerEntity; 
  int number; 
  __int16 v13; 
  __int64 v14; 
  __int64 v15; 

  if ( !Com_IsAnyLocalServerRunning() )
    return 0i64;
  v2 = DVARINT_bot_DrawDebugHudEnt;
  if ( !DVARINT_bot_DrawDebugHudEnt && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebugHudEnt") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v2);
  if ( v2->current.integer < 0 )
  {
    LocalClientGlobals = CG_GetLocalClientGlobals(localClientNum);
    v10 = LocalClientGlobals;
    if ( !LocalClientGlobals->inKillCam )
    {
      predictedPlayerEntity = LocalClientGlobals->predictedPlayerEntity;
      if ( predictedPlayerEntity )
      {
        number = predictedPlayerEntity->nextState.number;
        if ( number < (int)SvClient::ms_clientCount && SV_BotIsBot(number) && SvClient::GetCommonClient(v10->predictedPlayerEntity->nextState.number)->state == CS_ACTIVE )
        {
          v13 = v10->predictedPlayerEntity->nextState.number;
          if ( (unsigned __int16)v13 >= 0x800u )
          {
            LODWORD(v15) = 2048;
            LODWORD(v14) = v13;
            if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22577, ASSERT_TYPE_ASSERT, "(unsigned)( cgameGlob->predictedPlayerEntity->nextState.number ) < (unsigned)( ( 2048 ) )", "cgameGlob->predictedPlayerEntity->nextState.number doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v14, v15) )
              __debugbreak();
          }
          if ( v10->predictedPlayerEntity->nextState.number == 2047 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22578, ASSERT_TYPE_ASSERT, "( cgameGlob->predictedPlayerEntity->nextState.number != ENTITYNUM_NONE )", (const char *)&queryFormat, "cgameGlob->predictedPlayerEntity->nextState.number != ENTITYNUM_NONE") )
            __debugbreak();
          if ( G_IsEntityInUse(v10->predictedPlayerEntity->nextState.number) )
            return Bot_GetEntityData(&g_entities[v10->predictedPlayerEntity->nextState.number]);
        }
      }
    }
    return 0i64;
  }
  v3 = DVARINT_bot_DrawDebugHudEnt;
  if ( !DVARINT_bot_DrawDebugHudEnt && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebugHudEnt") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v3);
  if ( v3->current.integer >= 0x800u )
  {
    v4 = DVARINT_bot_DrawDebugHudEnt;
    if ( !DVARINT_bot_DrawDebugHudEnt && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebugHudEnt") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v4);
    LODWORD(v15) = 2048;
    LODWORD(v14) = v4->current.integer;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22545, ASSERT_TYPE_ASSERT, "(unsigned)( Dvar_GetInt_Internal_DebugName( DVARINT_bot_DrawDebugHudEnt, \"bot_DrawDebugHudEnt\" ) ) < (unsigned)( ( 2048 ) )", "Dvar_GetInt( bot_DrawDebugHudEnt ) doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v14, v15) )
      __debugbreak();
  }
  v5 = DVARINT_bot_DrawDebugHudEnt;
  if ( !DVARINT_bot_DrawDebugHudEnt && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebugHudEnt") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v5);
  if ( v5->current.integer == 2047 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22546, ASSERT_TYPE_ASSERT, "( Dvar_GetInt_Internal_DebugName( DVARINT_bot_DrawDebugHudEnt, \"bot_DrawDebugHudEnt\" ) != ENTITYNUM_NONE )", (const char *)&queryFormat, "Dvar_GetInt( bot_DrawDebugHudEnt ) != ENTITYNUM_NONE") )
    __debugbreak();
  v6 = DVARINT_bot_DrawDebugHudEnt;
  v7 = g_entities;
  if ( !DVARINT_bot_DrawDebugHudEnt && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebugHudEnt") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v6);
  return Bot_GetEntityData(&v7[v6->current.integer]);
}

/*
==============
Bot_GetStopGoalStance
==============
*/
ai_stance_e Bot_GetStopGoalStance(const pathnode_t *node)
{
  ai_stance_e result; 
  unsigned __int16 type; 
  int v4; 
  unsigned __int16 v5; 

  if ( !node )
    return 6;
  result = Path_AllowedStancesForNode(node);
  if ( (result & 2) != 0 )
  {
    type = node->constant.type;
    if ( type > 0x16u || (v4 = 4195332, !_bittest(&v4, type)) )
      result &= ~1u;
  }
  v5 = node->constant.type;
  if ( v5 == 5 || v5 == 12 )
    result &= 0xFFFFFFFC;
  if ( (result & 1) != 0 )
    return result & 0xFFFFFFF9;
  if ( (result & 2) != 0 )
    return result & 0xFFFFFFFB;
  return result;
}

/*
==============
Bot_GetTargetedLookAt
==============
*/
__int64 Bot_GetTargetedLookAt(bot_data_t *botData, vec3_t *lookAtPosOut)
{
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12514, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( Bot_IsThrowingGrenade(botData) )
  {
    lookAtPosOut->v[0] = botData->botInfo.grenadeThrowTarget.v[0];
    lookAtPosOut->v[1] = botData->botInfo.grenadeThrowTarget.v[1];
    lookAtPosOut->v[2] = botData->botInfo.grenadeThrowTarget.v[2];
    return 1i64;
  }
  else if ( (*((_BYTE *)&botData->scriptedAgentInfo + 28228) & 2) != 0 )
  {
    lookAtPosOut->v[0] = botData->botInfo.scriptedGrenadeTarget.v[0];
    lookAtPosOut->v[1] = botData->botInfo.scriptedGrenadeTarget.v[1];
    lookAtPosOut->v[2] = botData->botInfo.scriptedGrenadeTarget.v[2];
    return 1i64;
  }
  else if ( level.time < botData->botInfo.lookAtTime && Bot_ShouldLookAtPoint(botData) )
  {
    lookAtPosOut->v[0] = botData->botInfo.lookAtPoint.v[0];
    lookAtPosOut->v[1] = botData->botInfo.lookAtPoint.v[1];
    lookAtPosOut->v[2] = botData->botInfo.lookAtPoint.v[2];
    return 1i64;
  }
  else
  {
    return 0i64;
  }
}

/*
==============
Bot_GetTeamDifficulty
==============
*/
bot_difficulty_t Bot_GetTeamDifficulty(int relativeTeam)
{
  if ( BG_BotsUsingTeamDifficulty() )
    return BG_GetBotsDifficulty(relativeTeam);
  else
    return BG_GetBotsDifficulty(0);
}

/*
==============
Bot_GetWorldCenter
==============
*/
void Bot_GetWorldCenter(vec3_t *worldSize)
{
  *worldSize = s_botWorldBounds.midPoint;
}

/*
==============
Bot_GetWorldClosestEdge
==============
*/
float Bot_GetWorldClosestEdge(const bot_data_t *botData, const vec3_t *point, vec3_t *resultPoint, vec3_t *resultNormal)
{
  gentity_s *ent; 
  float v9; 
  float v10; 
  float v11; 
  float v12; 
  float v13; 
  float v14; 
  float v15; 
  float v16; 
  float v17; 
  float v18; 
  float v19; 
  float v20; 
  float v21; 
  float v22; 
  float v23; 
  float result; 
  float v25; 
  float v26; 
  float v27; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20855, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !point )
  {
    ent = botData->botInfo.ent;
    if ( !ent || (point = &ent->r.currentOrigin, ent == (gentity_s *)-304i64) )
    {
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20865, ASSERT_TYPE_ASSERT, "( point )", (const char *)&queryFormat, "point") )
        __debugbreak();
    }
  }
  LODWORD(v9) = COERCE_UNSIGNED_INT(s_botWorldEdgePlanes[0].v[3] - (float)((float)((float)(point->v[0] * s_botWorldEdgePlanes[0].v[0]) + (float)(s_botWorldEdgePlanes[0].v[1] * point->v[1])) + (float)(s_botWorldEdgePlanes[0].v[2] * point->v[2]))) & _xmm;
  resultPoint->v[0] = (float)(v9 * s_botWorldEdgePlanes[0].v[0]) + point->v[0];
  resultPoint->v[1] = (float)(v9 * s_botWorldEdgePlanes[0].v[1]) + point->v[1];
  resultPoint->v[2] = (float)(v9 * s_botWorldEdgePlanes[0].v[2]) + point->v[2];
  if ( resultNormal )
  {
    v10 = s_botWorldEdgePlanes[0].v[0];
    resultNormal->v[0] = s_botWorldEdgePlanes[0].v[0];
    v11 = s_botWorldEdgePlanes[0].v[1];
    resultNormal->v[1] = s_botWorldEdgePlanes[0].v[1];
    v12 = s_botWorldEdgePlanes[0].v[2];
    resultNormal->v[0] = COERCE_FLOAT(LODWORD(v10) ^ _xmm);
    resultNormal->v[2] = COERCE_FLOAT(LODWORD(v12) ^ _xmm);
    resultNormal->v[1] = COERCE_FLOAT(LODWORD(v11) ^ _xmm);
  }
  v13 = s_botWorldEdgePlanes[1].v[3] - (float)((float)((float)(point->v[0] * s_botWorldEdgePlanes[1].v[0]) + (float)(s_botWorldEdgePlanes[1].v[1] * point->v[1])) + (float)(s_botWorldEdgePlanes[1].v[2] * point->v[2]));
  LODWORD(v14) = LODWORD(v13) & _xmm;
  if ( COERCE_FLOAT(LODWORD(v13) & _xmm) < v9 )
  {
    resultPoint->v[0] = (float)(s_botWorldEdgePlanes[1].v[0] * v14) + point->v[0];
    resultPoint->v[1] = (float)(v14 * s_botWorldEdgePlanes[1].v[1]) + point->v[1];
    resultPoint->v[2] = (float)(v14 * s_botWorldEdgePlanes[1].v[2]) + point->v[2];
    LODWORD(v9) = LODWORD(v13) & _xmm;
    if ( resultNormal )
    {
      v15 = s_botWorldEdgePlanes[1].v[0];
      resultNormal->v[0] = s_botWorldEdgePlanes[1].v[0];
      v16 = s_botWorldEdgePlanes[1].v[1];
      resultNormal->v[1] = s_botWorldEdgePlanes[1].v[1];
      v17 = s_botWorldEdgePlanes[1].v[2];
      resultNormal->v[0] = COERCE_FLOAT(LODWORD(v15) ^ _xmm);
      resultNormal->v[2] = COERCE_FLOAT(LODWORD(v17) ^ _xmm);
      resultNormal->v[1] = COERCE_FLOAT(LODWORD(v16) ^ _xmm);
    }
  }
  v18 = s_botWorldEdgePlanes[2].v[3] - (float)((float)((float)(s_botWorldEdgePlanes[2].v[1] * point->v[1]) + (float)(point->v[0] * s_botWorldEdgePlanes[2].v[0])) + (float)(s_botWorldEdgePlanes[2].v[2] * point->v[2]));
  LODWORD(v19) = LODWORD(v18) & _xmm;
  if ( COERCE_FLOAT(LODWORD(v18) & _xmm) < v9 || v9 < 0.0 )
  {
    resultPoint->v[0] = (float)(s_botWorldEdgePlanes[2].v[0] * v19) + point->v[0];
    resultPoint->v[1] = (float)(v19 * s_botWorldEdgePlanes[2].v[1]) + point->v[1];
    resultPoint->v[2] = (float)(v19 * s_botWorldEdgePlanes[2].v[2]) + point->v[2];
    LODWORD(v9) = LODWORD(v18) & _xmm;
    if ( resultNormal )
    {
      v20 = s_botWorldEdgePlanes[2].v[0];
      resultNormal->v[0] = s_botWorldEdgePlanes[2].v[0];
      v21 = s_botWorldEdgePlanes[2].v[1];
      resultNormal->v[1] = s_botWorldEdgePlanes[2].v[1];
      v22 = s_botWorldEdgePlanes[2].v[2];
      resultNormal->v[0] = COERCE_FLOAT(LODWORD(v20) ^ _xmm);
      resultNormal->v[2] = COERCE_FLOAT(LODWORD(v22) ^ _xmm);
      resultNormal->v[1] = COERCE_FLOAT(LODWORD(v21) ^ _xmm);
    }
  }
  LODWORD(v23) = COERCE_UNSIGNED_INT(s_botWorldEdgePlanes[3].v[3] - (float)((float)((float)(s_botWorldEdgePlanes[3].v[1] * point->v[1]) + (float)(point->v[0] * s_botWorldEdgePlanes[3].v[0])) + (float)(s_botWorldEdgePlanes[3].v[2] * point->v[2]))) & _xmm;
  if ( v23 >= v9 && v9 >= 0.0 )
    return v9;
  resultPoint->v[0] = (float)(s_botWorldEdgePlanes[3].v[0] * v23) + point->v[0];
  resultPoint->v[1] = (float)(v23 * s_botWorldEdgePlanes[3].v[1]) + point->v[1];
  resultPoint->v[2] = (float)(v23 * s_botWorldEdgePlanes[3].v[2]) + point->v[2];
  result = v23;
  if ( resultNormal )
  {
    v25 = s_botWorldEdgePlanes[3].v[0];
    resultNormal->v[0] = s_botWorldEdgePlanes[3].v[0];
    v26 = s_botWorldEdgePlanes[3].v[1];
    resultNormal->v[1] = s_botWorldEdgePlanes[3].v[1];
    v27 = s_botWorldEdgePlanes[3].v[2];
    resultNormal->v[0] = COERCE_FLOAT(LODWORD(v25) ^ _xmm);
    resultNormal->v[2] = COERCE_FLOAT(LODWORD(v27) ^ _xmm);
    resultNormal->v[1] = COERCE_FLOAT(LODWORD(v26) ^ _xmm);
  }
  return result;
}

/*
==============
Bot_GetWorldSize
==============
*/
void Bot_GetWorldSize(vec3_t *worldSize)
{
  float v1; 
  float v2; 

  v1 = 2.0 * s_botWorldBounds.halfSize.v[0];
  v2 = 2.0 * s_botWorldBounds.halfSize.v[1];
  worldSize->v[2] = 2.0 * s_botWorldBounds.halfSize.v[2];
  worldSize->v[0] = v1;
  worldSize->v[1] = v2;
}

/*
==============
Bot_GetZoneCountCompareType
==============
*/
__int64 Bot_GetZoneCountCompareType(const char *string)
{
  const char *v1; 
  unsigned int v2; 
  __int64 v4; 
  __int64 v5; 
  const char *v6; 
  signed __int64 v7; 
  int v8; 
  __int64 v9; 
  int v10; 
  int v11; 
  int v12; 

  v1 = BOT_STR_ZONE_COUNT_CMP[0];
  v2 = 0;
  if ( BOT_STR_ZONE_COUNT_CMP[0] )
  {
    v4 = 0i64;
    do
    {
      if ( !*v1 )
        break;
      v5 = 0x7FFFFFFFi64;
      v6 = string;
      if ( !v1 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 212, ASSERT_TYPE_SANITY, "( s0 )", (const char *)&queryFormat, "s0") )
        __debugbreak();
      if ( !string && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 213, ASSERT_TYPE_SANITY, "( s1 )", (const char *)&queryFormat, "s1") )
        __debugbreak();
      v7 = v1 - string;
      while ( 1 )
      {
        v8 = (unsigned __int8)v6[v7];
        v9 = v5;
        v10 = *(unsigned __int8 *)v6++;
        --v5;
        if ( !v9 )
          return v2;
        if ( v8 != v10 )
        {
          v11 = v8 + 32;
          if ( (unsigned int)(v8 - 65) > 0x19 )
            v11 = v8;
          v8 = v11;
          v12 = v10 + 32;
          if ( (unsigned int)(v10 - 65) > 0x19 )
            v12 = v10;
          if ( v8 != v12 )
            break;
        }
        if ( !v8 )
          return v2;
      }
      v1 = BOT_STR_ZONE_COUNT_CMP[++v4];
      ++v2;
    }
    while ( v1 );
  }
  return 2i64;
}

/*
==============
Bot_GetZoneCountType
==============
*/
__int64 Bot_GetZoneCountType(const char *string)
{
  const char *v1; 
  unsigned int v2; 
  __int64 v4; 
  __int64 v5; 
  const char *v6; 
  signed __int64 v7; 
  int v8; 
  __int64 v9; 
  int v10; 
  int v11; 
  int v12; 

  v1 = BOT_STR_ZONE_COUNT[0];
  v2 = 0;
  if ( BOT_STR_ZONE_COUNT[0] )
  {
    v4 = 0i64;
    do
    {
      if ( !*v1 )
        break;
      v5 = 0x7FFFFFFFi64;
      v6 = string;
      if ( !v1 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 212, ASSERT_TYPE_SANITY, "( s0 )", (const char *)&queryFormat, "s0") )
        __debugbreak();
      if ( !string && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 213, ASSERT_TYPE_SANITY, "( s1 )", (const char *)&queryFormat, "s1") )
        __debugbreak();
      v7 = v1 - string;
      while ( 1 )
      {
        v8 = (unsigned __int8)v6[v7];
        v9 = v5;
        v10 = *(unsigned __int8 *)v6++;
        --v5;
        if ( !v9 )
          return v2;
        if ( v8 != v10 )
        {
          v11 = v8 + 32;
          if ( (unsigned int)(v8 - 65) > 0x19 )
            v11 = v8;
          v8 = v11;
          v12 = v10 + 32;
          if ( (unsigned int)(v10 - 65) > 0x19 )
            v12 = v10;
          if ( v8 != v12 )
            break;
        }
        if ( !v8 )
          return v2;
      }
      v1 = BOT_STR_ZONE_COUNT[++v4];
      ++v2;
    }
    while ( v1 );
  }
  return 5i64;
}

/*
==============
Bot_GrenadeGoodEnemyCheck
==============
*/
__int64 Bot_GrenadeGoodEnemyCheck(bot_data_t *botData, const Weapon *grenadeWeap, vec3_t *victimPosOut)
{
  int v5; 
  gentity_s *v6; 
  playerState_s *playerState; 
  playerState_s *EntityPlayerState; 
  PlayerHandIndex WeaponHandForViewWeapon; 
  gentity_s *v10; 
  bool v11; 
  const bitarray<224> *AllCombatTeamFlags; 
  __int128 v13; 
  double v14; 
  unsigned int v15; 
  unsigned int v16; 
  unsigned int v17; 
  float v18; 
  float v19; 
  float v20; 
  int v21; 
  int v22; 
  bool v23; 
  int v24; 
  const playerState_s *v25; 
  gentity_s *ent; 
  float v27; 
  float v28; 
  float v29; 
  double v30; 
  int CanFireOnEnemy; 
  int HasUnderBarrelGLAmmo; 
  int v34; 
  playerState_s *ps; 
  BOOL v36; 
  int v37; 
  Weapon *weapon; 
  gentity_s *results; 
  bitarray<224> result; 
  vec3_t predictedPositionOut; 

  *(_QWORD *)predictedPositionOut.v = grenadeWeap;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19147, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19148, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState )", (const char *)&queryFormat, "botData->botInfo.playerState") )
    __debugbreak();
  if ( !Bot_CanReactEnemy(botData) )
    return 0i64;
  v5 = 0;
  v6 = EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) ? EntHandle::ent(&botData->botInfo.sentient->targetEnt) : 0i64;
  if ( !v6 || Bot_EntityIsConsideredDead(v6) )
    return 0i64;
  if ( !v6->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19159, ASSERT_TYPE_ASSERT, "( enemy->sentient )", (const char *)&queryFormat, "enemy->sentient") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  ps = playerState;
  EntityPlayerState = G_GetEntityPlayerState(v6);
  WeaponHandForViewWeapon = Bot_Weap_GetWeaponHandForViewWeapon(playerState);
  weapon = (Weapon *)Bot_Weap_GetViewmodelWeapon(playerState);
  v37 = Bot_EntityUsingRiotShield(v6, 1);
  v36 = Bot_Weap_AmmoInClip(playerState, weapon, WeaponHandForViewWeapon) > 0;
  HasUnderBarrelGLAmmo = Bot_Weap_HasUnderBarrelGLAmmo(playerState);
  v34 = 0;
  v10 = NULL;
  CanFireOnEnemy = Bot_CanSeeAndCanFireOnEnemy(botData);
  if ( Sentient_IsAerial(v6->sentient) || Bot_IsHardwareEnt(v6) )
    return 0i64;
  if ( EntityPlayerState )
  {
    if ( !v6->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19189, ASSERT_TYPE_ASSERT, "( enemy->sentient )", (const char *)&queryFormat, "enemy->sentient") )
      __debugbreak();
    if ( level.teammode == TEAMMODE_FFA )
    {
      v11 = Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80);
      if ( Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) )
        AllCombatTeamFlags = Com_TeamsSP_GetAllCombatTeamFlags();
      else
        AllCombatTeamFlags = Com_TeamsMP_GetAllTeamFlags();
      v13 = *(_OWORD *)AllCombatTeamFlags->array;
      v14 = *(double *)&AllCombatTeamFlags->array[4];
      v15 = AllCombatTeamFlags->array[6] & 0xFFEFFFFF;
      *(_OWORD *)result.array = v13;
      v16 = v13;
      *(double *)&result.array[4] = v14;
      if ( v11 )
        v16 = v13 & 0xF7FFFFFF;
      v17 = v15 & 0xFF9FFFFF;
    }
    else
    {
      Com_Teams_GetEnemyTeamFlags(&result, v6->sentient->eTeam);
      v17 = result.array[6];
      v16 = result.array[0];
    }
    result.array[1] = ~result.array[1];
    result.array[2] = ~result.array[2];
    result.array[3] = ~result.array[3];
    result.array[4] = ~result.array[4];
    result.array[5] = ~result.array[5];
    result.array[6] = ~v17;
    result.array[0] = ~v16;
    if ( Bot_GetClosestCharacterList(v6, &v6->r.currentOrigin, 0.0, 0, 0, 1, 0, &result, &results, 1) == 1 )
    {
      v10 = results;
      if ( results )
      {
        v18 = results->r.currentOrigin.v[0] - v6->r.currentOrigin.v[0];
        v19 = results->r.currentOrigin.v[1] - v6->r.currentOrigin.v[1];
        v20 = results->r.currentOrigin.v[2] - v6->r.currentOrigin.v[2];
        if ( (float)((float)((float)(v19 * v19) + (float)(v18 * v18)) + (float)(v20 * v20)) > 65536.0 )
          v10 = NULL;
      }
    }
    else
    {
      v10 = NULL;
    }
  }
  if ( v36 && Bot_IsFireFromHipRange(botData) && !HasUnderBarrelGLAmmo && !Dvar_GetBool_Internal_DebugName(DVARBOOL_bot_ForceGrenadeThrow, "bot_ForceGrenadeThrow") )
    return 0i64;
  v21 = Bot_EnemyFacesBot(botData);
  if ( v10 )
  {
    if ( !v10->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19207, ASSERT_TYPE_ASSERT, "( closestAllyOfEnemy->sentient )", (const char *)&queryFormat, "closestAllyOfEnemy->sentient") )
      __debugbreak();
    v22 = Bot_RecentSeeSentient(botData, v10->sentient, 1000);
    v34 = v22;
    v21 = v21 || v22 && Bot_EntityFacesBot(botData, v10);
  }
  if ( EntityPlayerState && v37 )
  {
    v23 = GameModeFlagContainer<enum EntityStateFlagsCommon,enum EntityStateFlagsSP,enum EntityStateFlagsMP,32>::TestFlagInternal(&EntityPlayerState->eFlags, ACTIVE, 3u);
    v24 = CanFireOnEnemy;
    if ( v23 && CanFireOnEnemy )
    {
      v5 = 1;
      goto LABEL_54;
    }
  }
  else
  {
    v24 = CanFireOnEnemy;
  }
  if ( v21 && !Bot_ShouldForceGrenadeThrow(botData, v21) )
  {
    v25 = ps;
    if ( !Bot_Weap_ProjectileDirectTarget(botData->botInfo.ent, ps, *(const Weapon **)predictedPositionOut.v) )
      return 0i64;
    goto LABEL_55;
  }
LABEL_54:
  v25 = ps;
LABEL_55:
  if ( (unsigned int)Bot_GetPredictedEntityPosition(botData, v6, &predictedPositionOut) )
  {
    ent = botData->botInfo.ent;
    v27 = predictedPositionOut.v[1];
    v28 = predictedPositionOut.v[0];
    v29 = predictedPositionOut.v[2];
    if ( (float)((float)((float)((float)(predictedPositionOut.v[1] - ent->r.currentOrigin.v[1]) * (float)(predictedPositionOut.v[1] - ent->r.currentOrigin.v[1])) + (float)((float)(predictedPositionOut.v[0] - ent->r.currentOrigin.v[0]) * (float)(predictedPositionOut.v[0] - ent->r.currentOrigin.v[0]))) + (float)((float)(predictedPositionOut.v[2] - ent->r.currentOrigin.v[2]) * (float)(predictedPositionOut.v[2] - ent->r.currentOrigin.v[2]))) < 4000000.0 )
    {
      if ( v5 || Bot_ShouldForceGrenadeThrow(botData, v21) || !v24 || !Bot_IsInRangeOfEnemy(botData) && (v30 = G_random(), *(float *)&v30 < 0.1) || v6->turretHandle.m_objIndex && !Bot_Weap_IsLauncher(v25, weapon) || v34 || HasUnderBarrelGLAmmo )
      {
        victimPosOut->v[0] = v28;
        victimPosOut->v[1] = v27;
        victimPosOut->v[2] = v29;
        return 1i64;
      }
    }
  }
  return 0i64;
}

/*
==============
Bot_GrenadeGoodTargetCheck
==============
*/
__int64 Bot_GrenadeGoodTargetCheck(bot_data_t *botData, const Weapon *grenadeWeap, const vec3_t *victimPos)
{
  gentity_s *ent; 
  unsigned __int16 v7; 
  AIBotInterface *m_pAI; 
  playerState_s *playerState; 
  gentity_s *v10; 
  int v11; 
  float v12; 
  float v13; 
  int v14; 
  __int64 v15; 
  unsigned __int16 v16; 
  float v17; 
  pathnode_t *v18; 
  __int128 v19; 
  float v23; 
  int nodesPicked; 
  AIBotWrapper v26; 
  vec3_t pos; 
  float v28; 
  float v29; 
  float v30; 
  bot_score_parms_s parms; 
  bot_score_item_s objects[256]; 
  pathsort_s nodes[256]; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19314, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19315, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19316, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
    __debugbreak();
  AICommonInterface::AICommonInterface(&v26.m_botInterface);
  v26.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v26.m_botAgentInterface);
  ent = botData->botInfo.ent;
  v7 = 0;
  v26.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v26.m_pAI = NULL;
  AIBotWrapper::Setup(&v26, ent);
  m_pAI = v26.m_pAI;
  if ( !v26.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19326, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19329, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  if ( level.time < botData->botInfo.grenadeCheckTime )
    return 0i64;
  v10 = botData->botInfo.ent;
  botData->botInfo.grenadeCheckTime = level.time + 500;
  v11 = Bot_Weap_ProjectileDirectTarget(v10, playerState, grenadeWeap);
  v12 = victimPos->v[1];
  v13 = victimPos->v[2];
  pos.v[0] = victimPos->v[0];
  pos.v[1] = v12;
  pos.v[2] = v13;
  if ( !v11 )
  {
    v14 = Path_NodesInCylinder(victimPos, NULL, 500.0, 80.0, nodes, 256, -510656514);
    if ( v14 <= 0 )
      return 0i64;
    do
    {
      v15 = v7;
      v16 = Path_ConvertNodeToIndex(nodes[v7++].node);
      objects[v15].object = v16;
    }
    while ( v7 < v14 );
    Bot_Score_ScoreNodesInitParms(botData, &parms, BOT_SCORE_NODE_GRENADE_TARGET);
    v17 = victimPos->v[1];
    parms.vector1.v[0] = victimPos->v[0];
    parms.vector1.v[2] = victimPos->v[2];
    parms.vector1.v[1] = v17;
    if ( Bot_Score_ScoreNodesPick(botData, objects, v14, 1, &parms, 1, &nodesPicked) != 1 )
      return 0i64;
    v18 = Path_ConvertIndexToNode(nodesPicked);
    if ( !v18 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19065, ASSERT_TYPE_ASSERT, "( nodePicked )", (const char *)&queryFormat, "nodePicked") )
      __debugbreak();
    pathnode_t::GetPos(v18, &pos);
  }
  m_pAI->GetEyePosition(m_pAI, (vec3_t *)&v28);
  v19 = LODWORD(v29);
  *(float *)&v19 = fsqrt((float)((float)((float)(v29 - pos.v[1]) * (float)(v29 - pos.v[1])) + (float)((float)(v28 - pos.v[0]) * (float)(v28 - pos.v[0]))) + (float)((float)(v30 - pos.v[2]) * (float)(v30 - pos.v[2])));
  _XMM4 = v19;
  __asm
  {
    vcmpless xmm0, xmm4, cs:__real@80000000
    vblendvps xmm0, xmm4, xmm1, xmm0
  }
  pos.v[0] = (float)((float)((float)(v28 - pos.v[0]) * (float)(1.0 / *(float *)&_XMM0)) * 30.0) + pos.v[0];
  pos.v[1] = (float)((float)((float)(v29 - pos.v[1]) * (float)(1.0 / *(float *)&_XMM0)) * 30.0) + pos.v[1];
  pos.v[2] = (float)((float)((float)(v30 - pos.v[2]) * (float)(1.0 / *(float *)&_XMM0)) * 30.0) + pos.v[2];
  if ( AICommonInterface::CanSeePoint(m_pAI, &pos) )
  {
    v23 = pos.v[1];
    botData->botInfo.grenadeThrowTarget.v[0] = pos.v[0];
    botData->botInfo.grenadeThrowTarget.v[2] = pos.v[2];
    botData->botInfo.grenadeThrowTarget.v[1] = v23;
    return 1i64;
  }
  return 0i64;
}

/*
==============
Bot_GrenadeReleaseTime
==============
*/
__int64 Bot_GrenadeReleaseTime(bot_data_t *botData)
{
  playerState_s *playerState; 
  const gentity_s *v3; 
  int v4; 
  int time; 
  bool v6; 
  int CookingGrenadeFuseMax; 
  int grenadeStartTime; 
  float grenadeCookPrecision; 
  int grenadeHangTime; 
  __int64 result; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21589, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  if ( !EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) || (v3 = EntHandle::ent(&botData->botInfo.sentient->targetEnt)) == NULL || (v4 = 1, !Bot_EntityUsingRiotShield(v3, 1)) )
    v4 = 0;
  time = level.time;
  if ( !Bot_CanSeeEnemy(botData) || !Bot_EnemyFacesBot(botData) || v4 )
  {
    if ( Bot_IsThrowingGrenade(botData) )
    {
      if ( !Bot_Weap_IsNone(&botData->botInfo.grenadeWeap) )
      {
        if ( Bot_Weap_IsCookable(playerState, &botData->botInfo.grenadeWeap) )
        {
          v6 = BG_UsingAlternate(playerState);
          CookingGrenadeFuseMax = BG_GetCookingGrenadeFuseMax(&botData->botInfo.grenadeWeap, v6, playerState);
          grenadeStartTime = botData->botInfo.grenadeStartTime;
          if ( grenadeStartTime > 0 )
          {
            grenadeCookPrecision = botData->botMatchData.grenadeCookPrecision;
            if ( grenadeCookPrecision >= 0.0 )
            {
              grenadeHangTime = botData->botInfo.grenadeHangTime;
              if ( grenadeHangTime > 0 )
                time = CookingGrenadeFuseMax + grenadeStartTime - (int)grenadeCookPrecision - grenadeHangTime;
            }
          }
        }
      }
    }
  }
  result = (unsigned int)botData->botInfo.weaponDelayForOffhand;
  if ( time > (int)result )
    return (unsigned int)time;
  return result;
}

/*
==============
Bot_GrenadeTraceCalculatePitch
==============
*/
__int64 Bot_GrenadeTraceCalculatePitch(bot_data_t *botData, int initialCheck)
{
  gentity_s *ent; 
  float v5; 
  float v6; 
  float v7; 
  sentient_s *sentient; 
  __int128 v9; 
  __int128 v10; 
  __int64 v11; 
  float grenadePitchDesired; 
  float v13; 
  float v14; 
  __int128 v15; 
  __int128 v17; 
  __int128 v26; 
  float v27; 
  float v29; 
  __int128 v31; 
  vec3_t v34; 
  vec3_t v35; 
  vec3_t v36; 
  vec3_t forward; 
  vec3_t vEyePosOut; 
  vec3_t angles; 
  vec3_t v40; 
  Bounds v41; 
  int v42; 
  float v43; 

  if ( Com_GameMode_SupportsFeature(WEAPON_SPRINT_RAISE) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19468, ASSERT_TYPE_ASSERT, "( !Com_GameMode_SupportsFeature( Com_GameMode_Feature::GRAVITY_CHANGE_ALLOWED ) )", (const char *)&queryFormat, "!Com_GameMode_SupportsFeature( Com_GameMode_Feature::GRAVITY_CHANGE_ALLOWED )") )
    __debugbreak();
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19475, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19476, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19477, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
    __debugbreak();
  if ( !botData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19478, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState )", (const char *)&queryFormat, "botData->botInfo.playerState") )
    __debugbreak();
  if ( (*((_BYTE *)&botData->scriptedAgentInfo + 28228) & 2) != 0 && (ent = botData->botInfo.ent, v5 = botData->botInfo.grenadeThrowTarget.v[0] - ent->r.currentOrigin.v[0], v6 = botData->botInfo.grenadeThrowTarget.v[1] - ent->r.currentOrigin.v[1], v7 = botData->botInfo.grenadeThrowTarget.v[2] - ent->r.currentOrigin.v[2], (float)((float)((float)(v6 * v6) + (float)(v5 * v5)) + (float)(v7 * v7)) < 10000.0) || !Bot_Weap_IsThrowable(botData->botInfo.playerState, &botData->botInfo.grenadeWeap) )
  {
    botData->botInfo.grenadeFlags |= 8u;
LABEL_31:
    botData->botInfo.grenadeHangTime = -1;
    botData->botInfo.grenadePitch = 0.0;
    return ((unsigned int)botData->botInfo.grenadeFlags >> 3) & 1;
  }
  if ( level.time - botData->botInfo.grenadePitchLastCheck <= 350 )
    return ((unsigned int)botData->botInfo.grenadeFlags >> 3) & 1;
  botData->botInfo.grenadePitchLastCheck = level.time;
  sentient = botData->botInfo.sentient;
  botData->botInfo.grenadeHangTime = -1;
  Sentient_GetEyePosition(sentient, &vEyePosOut);
  v9 = LODWORD(botData->botInfo.grenadeLaunchVel.v[0]);
  *(float *)&v9 = fsqrt((float)((float)(botData->botInfo.grenadeLaunchVel.v[0] * botData->botInfo.grenadeLaunchVel.v[0]) + (float)(botData->botInfo.grenadeLaunchVel.v[1] * botData->botInfo.grenadeLaunchVel.v[1])) + (float)(botData->botInfo.grenadeLaunchVel.v[2] * botData->botInfo.grenadeLaunchVel.v[2]));
  v10 = v9;
  vectoangles(&botData->botInfo.grenadeLaunchVel, &angles);
  *(_OWORD *)&v41.midPoint.z = _xmm;
  v41.midPoint.v[0] = 0.0;
  v41.midPoint.v[1] = 0.0;
  v11 = 0i64;
  while ( 1 )
  {
    grenadePitchDesired = botData->botInfo.grenadePitchDesired;
    v13 = grenadePitchDesired * CHECK_DELTA_PCT[v11];
    if ( v11 <= 0 || COERCE_FLOAT(LODWORD(v13) & _xmm) >= 1.0 )
    {
      v14 = grenadePitchDesired + v13;
      v40.v[2] = angles.v[2];
      v40.v[0] = v13 + angles.v[0];
      v40.v[1] = angles.v[1];
      AngleVectors(&v40, &forward, NULL, NULL);
      v15 = v10;
      *(float *)&v15 = (float)(*(float *)&v10 * forward.v[2]) * 0.00125;
      _XMM0 = v15;
      v17 = v10;
      _XMM8 = LODWORD(vEyePosOut.v[0]);
      _XMM13 = LODWORD(botData->botInfo.grenadeThrowTarget.v[2]);
      __asm { vmaxss  xmm3, xmm0, xmm11 }
      forward.v[0] = *(float *)&v10 * forward.v[0];
      *(float *)&v17 = (float)(forward.v[0] * *(float *)&_XMM3) + vEyePosOut.v[0];
      _XMM6 = v17;
      forward.v[2] = *(float *)&v10 * forward.v[2];
      forward.v[1] = *(float *)&v10 * forward.v[1];
      _XMM1 = LODWORD(botData->botInfo.grenadeThrowTarget.v[0]);
      __asm { vunpcklps xmm0, xmm1, xmm0 }
      *(double *)v34.v = *(double *)&_XMM0;
      __asm { vunpcklps xmm0, xmm6, xmm5 }
      *(double *)v35.v = *(double *)&_XMM0;
      __asm { vunpcklps xmm0, xmm8, xmm7 }
      v42 = _XMM13;
      LODWORD(v34.v[2]) = _XMM13;
      v43 = (float)((float)((float)((float)(forward.v[2] * *(float *)&_XMM3) + vEyePosOut.v[2]) - (float)((float)(*(float *)&_XMM3 * *(float *)&_XMM3) * 400.0)) - vEyePosOut.v[2]) + vEyePosOut.v[2];
      v35.v[2] = v43;
      v36.v[2] = vEyePosOut.v[2];
      *(double *)vEyePosOut.v = *(double *)&_XMM0;
      *(double *)v36.v = *(double *)&_XMM0;
      if ( (unsigned int)Bot_DoGrenadeTrace(botData, &v36, &v35, &v34, &v41, initialCheck) )
        break;
    }
    if ( ++v11 >= 5 )
    {
      botData->botInfo.grenadeFlags &= ~8u;
      goto LABEL_31;
    }
  }
  v26 = LODWORD(forward.v[2]);
  v27 = vEyePosOut.v[2];
  botData->botInfo.grenadeFlags |= 8u;
  __asm { vminss  xmm1, xmm13, xmm12 }
  v29 = fsqrt((float)(*(float *)&v26 * *(float *)&v26) - (float)((float)(v27 - *(float *)&_XMM1) * -1600.0));
  v31 = v26 ^ _xmm;
  botData->botInfo.grenadePitch = v14;
  *(float *)&v31 = (float)(COERCE_FLOAT(v26 ^ _xmm) - v29) * -0.00125;
  _XMM0 = v31;
  if ( (COERCE_UNSIGNED_INT((float)(v29 * -0.00125) - (float)(*(float *)&v26 * -0.00125)) & 0x7F800000) != 2139095040 && (v31 & 0x7F800000) != 2139095040 )
  {
    __asm { vmaxss  xmm0, xmm0, xmm3 }
    botData->botInfo.grenadeHangTime = (int)(float)(*(float *)&_XMM0 * 1000.0);
  }
  return 1i64;
}

/*
==============
Bot_GrenadesAllowed
==============
*/
__int64 Bot_GrenadesAllowed(const bot_data_t *botData)
{
  const dvar_t *v2; 
  int v3; 
  unsigned int v4; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9062, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v2 = DVARBOOL_bot_DisableGrenadeThrow;
  v3 = botData->botMatchData.flags & 1;
  if ( !DVARBOOL_bot_DisableGrenadeThrow && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 692, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DisableGrenadeThrow") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v2);
  v4 = 0;
  if ( !v2->current.enabled )
    v4 = v3;
  if ( GameModeFlagContainer<enum PWeaponFlagsCommon,enum PWeaponFlagsSP,enum PWeaponFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->weapCommon.weapFlags, ACTIVE, 0xFu) )
  {
    v4 = 0;
  }
  else if ( v4 )
  {
    return v4;
  }
  if ( Bot_Weap_HasOnlyUnderbarrelGL(botData) )
    return 1;
  return v4;
}

/*
==============
Bot_HasDebugSuffixInName
==============
*/
_BOOL8 Bot_HasDebugSuffixInName(const char *name)
{
  if ( !name && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3441, ASSERT_TYPE_ASSERT, "( name )", (const char *)&queryFormat, &stru_143C9A1A4) )
    __debugbreak();
  return I_strstr(name, " [") != NULL;
}

/*
==============
Bot_HasLOSToHighAerialEnemy
==============
*/
__int64 Bot_HasLOSToHighAerialEnemy(const bot_data_t *botData, const gentity_s *enemy)
{
  signed __int64 v4; 
  char *v5; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10262, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !enemy && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10263, ASSERT_TYPE_ASSERT, "( enemy )", (const char *)&queryFormat, "enemy") )
    __debugbreak();
  if ( !enemy->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10264, ASSERT_TYPE_ASSERT, "( enemy->sentient )", (const char *)&queryFormat, "enemy->sentient") )
    __debugbreak();
  if ( !Bot_IsHighAerialSentient(enemy->sentient) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10265, ASSERT_TYPE_ASSERT, "( Bot_IsHighAerialSentient( enemy->sentient ) )", (const char *)&queryFormat, "Bot_IsHighAerialSentient( enemy->sentient )") )
    __debugbreak();
  v4 = 60 * (enemy->sentient - level.sentients);
  v5 = (char *)&botData->scriptedAgentInfo + v4 + 11644;
  if ( (const bot_data_t *)((char *)botData + v4) == (const bot_data_t *)-11652i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10268, ASSERT_TYPE_ASSERT, "( botSentInfo )", (const char *)&queryFormat, "botSentInfo") )
    __debugbreak();
  return (*((_DWORD *)v5 + 14) >> 1) & 1;
}

/*
==============
Bot_HasNavigator
==============
*/
_BOOL8 Bot_HasNavigator(const bot_info_t *botInfo)
{
  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13922, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  return botInfo->pNavigator != NULL;
}

/*
==============
Bot_HasRemoteEyes
==============
*/
_BOOL8 Bot_HasRemoteEyes(const bot_data_t *botData)
{
  __int16 RemoteEyesEntNum; 
  int v3; 
  __int64 v5; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5248, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !GameModeFlagContainer<enum POtherFlagsCommon,enum POtherFlagsSP,enum POtherFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->otherFlags, ACTIVE, 1u) )
    return 0i64;
  RemoteEyesEntNum = Bot_GetRemoteEyesEntNum(botData);
  if ( RemoteEyesEntNum == 2047 )
    return 0i64;
  v3 = RemoteEyesEntNum;
  if ( (unsigned int)RemoteEyesEntNum >= 0x800 )
  {
    LODWORD(v5) = RemoteEyesEntNum;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5255, ASSERT_TYPE_ASSERT, "(unsigned)( remoteEyesEntNum ) < (unsigned)( ( 2048 ) )", "remoteEyesEntNum doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v5, 2048) )
      __debugbreak();
  }
  return G_IsEntityInUse(v3) != 0;
}

/*
==============
Bot_HasScriptGoal
==============
*/
_BOOL8 Bot_HasScriptGoal(const bot_data_t *botData)
{
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23600, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  return botData->botInfo.scriptGoal.type != BOT_SCR_GOAL_NONE;
}

/*
==============
Bot_HideFromEntity
==============
*/
void Bot_HideFromEntity(bot_data_t *botData, const gentity_s *entity, float hideRange, int duration)
{
  signed __int64 v7; 
  __int64 v8; 
  __int64 v9; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6838, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !entity && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6839, ASSERT_TYPE_ASSERT, "( entity )", (const char *)&queryFormat, "entity") )
    __debugbreak();
  if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 196, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
    __debugbreak();
  v7 = entity - g_entities;
  if ( (unsigned int)v7 >= 0x800 )
  {
    LODWORD(v8) = entity - g_entities;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 199, ASSERT_TYPE_ASSERT, "(unsigned)( index ) < (unsigned)( ( 2048 ) )", "index doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v8, 2048) )
      __debugbreak();
  }
  v7 = (__int16)v7;
  if ( (unsigned int)(__int16)v7 >= 0x800 )
  {
    LODWORD(v9) = 2048;
    LODWORD(v8) = v7;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 207, ASSERT_TYPE_ASSERT, "(unsigned)( entityIndex ) < (unsigned)( ( 2048 ) )", "entityIndex doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v8, v9) )
      __debugbreak();
  }
  if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 208, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
    __debugbreak();
  if ( g_entities[v7].r.isInUse != g_entityIsInUse[v7] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 209, ASSERT_TYPE_ASSERT, "( g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex] )", (const char *)&queryFormat, "g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex]") )
    __debugbreak();
  if ( !g_entityIsInUse[v7] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6840, ASSERT_TYPE_ASSERT, "( G_IsEntityInUse( G_GetEntityIndex( entity ) ) )", (const char *)&queryFormat, "G_IsEntityInUse( G_GetEntityIndex( entity ) )") )
    __debugbreak();
  if ( hideRange <= 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6841, ASSERT_TYPE_ASSERT, "( hideRange ) > ( 0 )", "hideRange > 0\n\t%g, %g", hideRange, 0.0) )
    __debugbreak();
  if ( duration <= 0 )
  {
    LODWORD(v8) = duration;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6842, ASSERT_TYPE_ASSERT, "( duration ) > ( 0 )", "duration > 0\n\t%i, %i", v8, 0i64) )
      __debugbreak();
  }
  if ( SV_BotRequirePathnodes(botData) )
  {
    botData->botInfo.hideFromEntNum = entity->s.number;
    botData->botInfo.hideFromRange = hideRange;
    botData->botInfo.hideFromTime = duration + level.time;
    *(_QWORD *)&botData->scriptedAgentInfo.btGoals[0].pos.z = 0i64;
    botData->botInfo.hideFromLastPos.v[2] = 0.0;
  }
}

/*
==============
Bot_HudText
==============
*/
void Bot_HudText(int y, const char *string)
{
  vec4_t color; 

  color = (vec4_t)_xmm;
  CL_DrawRect(48, y - 4, 256, 14, &color);
  CL_DrawString(50, y, string, 0, 10);
}

/*
==============
Bot_InitNavigator
==============
*/
void Bot_InitNavigator(bot_info_t *botInfo)
{
  AINavigator *v2; 
  AINavigator2D *v3; 
  sentient_s *sentient; 
  void (__fastcall *SetObstacleBlockageFlags)(AINavigator *, unsigned int); 
  const bitarray<224> *TeamFlag; 
  unsigned int ObstacleBlockageFlagsFromTeamFlags; 
  bitarray<224> result; 

  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13897, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  v2 = Nav_Create2DNavigator(botInfo->ent, NAV_LAYER_HUMAN);
  botInfo->pNavigator = v2;
  v3 = v2->Get2DNavigator(v2);
  v3->m_MaxDeviationFromPath = 20.0;
  sentient = botInfo->sentient;
  if ( sentient )
  {
    SetObstacleBlockageFlags = v3->SetObstacleBlockageFlags;
    TeamFlag = Com_Teams_GetTeamFlag(&result, sentient->eTeam);
    ObstacleBlockageFlagsFromTeamFlags = Nav_GetObstacleBlockageFlagsFromTeamFlags(TeamFlag);
    SetObstacleBlockageFlags(v3, ObstacleBlockageFlagsFromTeamFlags);
  }
}

/*
==============
Bot_InitializeCmdTime
==============
*/
void Bot_InitializeCmdTime(usercmd_s *cmd)
{
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5486, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  *(_QWORD *)&cmd->serverTime = 0i64;
  cmd->inputTime = 0;
}

/*
==============
Bot_IsAerialEntityInDeathStage
==============
*/
_BOOL8 Bot_IsAerialEntityInDeathStage(const gentity_s *entity)
{
  Vehicle *vehicle; 

  if ( !entity && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7109, ASSERT_TYPE_ASSERT, "( entity )", (const char *)&queryFormat, "entity") )
    __debugbreak();
  if ( !entity->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7110, ASSERT_TYPE_ASSERT, "( entity->sentient )", (const char *)&queryFormat, "entity->sentient") )
    __debugbreak();
  if ( !Sentient_IsAerial(entity->sentient) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7111, ASSERT_TYPE_ASSERT, "( Sentient_IsAerial( entity->sentient ) )", (const char *)&queryFormat, "Sentient_IsAerial( entity->sentient )") )
    __debugbreak();
  vehicle = entity->vehicle;
  return vehicle && vehicle->isMultiStage && vehicle->isDeathStage;
}

/*
==============
Bot_IsAtPathEnd
==============
*/
_BOOL8 Bot_IsAtPathEnd(const bot_data_t *botData, float goalRadius)
{
  float radius; 

  radius = goalRadius;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14691, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14692, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( goalRadius == 0.0 )
    radius = botData->botInfo.activeGoal.radius;
  return Bot_NavPathExists(&botData->botInfo) && Nav_IsAtGoal(botData->botInfo.pNavigator, radius);
}

/*
==============
Bot_IsAwareOfEnemy
==============
*/
_BOOL8 Bot_IsAwareOfEnemy(const bot_data_t *botData)
{
  gentity_s *v2; 
  int awareTime; 
  _BOOL8 result; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16325, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  result = 0;
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
  {
    v2 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
    if ( v2 )
    {
      if ( v2->s.number == botData->botInfo.enemyTrack.lastEnemyEntNum )
      {
        awareTime = botData->botInfo.enemyTrack.awareTime;
        if ( awareTime )
        {
          if ( level.time - awareTime <= 500 )
            return 1;
        }
      }
    }
  }
  return result;
}

/*
==============
Bot_IsBlinded
==============
*/
_BOOL8 Bot_IsBlinded(const bot_data_t *botData)
{
  float visionBlinded; 
  _BOOL8 result; 
  float visionBlock; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13608, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  result = 0;
  if ( Bot_GetSensesObstructed(botData, &visionBlock, NULL) )
  {
    visionBlinded = botData->botMatchData.visionBlinded;
    if ( visionBlinded > 0.0 && visionBlock >= visionBlinded )
      return 1;
  }
  return result;
}

/*
==============
Bot_IsBlockedByBreakable
==============
*/
__int64 Bot_IsBlockedByBreakable(bot_data_t *botData, float range)
{
  unsigned int v3; 
  vec3_t vEyePosOut; 
  vec3_t forward; 
  vec3_t end; 
  trace_t results; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15644, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15645, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15646, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  v3 = 1;
  Sentient_GetEyePosition(botData->botInfo.sentient, &vEyePosOut);
  AngleVectors(&botData->botInfo.ent->r.currentAngles, &forward, NULL, NULL);
  end.v[0] = (float)(range * forward.v[0]) + vEyePosOut.v[0];
  end.v[1] = (float)(range * forward.v[1]) + vEyePosOut.v[1];
  end.v[2] = (float)(range * forward.v[2]) + vEyePosOut.v[2];
  G_Main_TraceCapsule(&results, &vEyePosOut, &end, &bounds_origin, 2047, 16);
  if ( !Com_IsSurfaceTypeBreakableGlass(results.surfaceFlags) )
    v3 = 0;
  if ( Trace_GetEntityHitId(&results) < 0x7FEu )
    v3 = 0;
  if ( !Trace_GetGlassHitId(&results) )
    return 0;
  return v3;
}

/*
==============
Bot_IsCamping
==============
*/
int Bot_IsCamping(const bot_data_t *botData)
{
  int result; 

  if ( !botData )
  {
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11235, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
      __debugbreak();
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11220, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
      __debugbreak();
  }
  result = Bot_IsIdleAtScriptGoal(botData);
  if ( result )
    return botData->botInfo.scriptGoal.type == BOT_SCR_GOAL_CAMP;
  return result;
}

/*
==============
Bot_IsCharacterActive
==============
*/
int Bot_IsCharacterActive(const gentity_s *ent)
{
  bitarray_base<bitarray<224> > *AllTeamFlags; 
  const SvClientMP *MpClient; 

  if ( !Bot_IsSentientEntityConnected(ent) )
    return 0;
  if ( ent->s.eType == ET_INVISIBLE )
    return 0;
  AllTeamFlags = (bitarray_base<bitarray<224> > *)Com_TeamsMP_GetAllTeamFlags();
  if ( !bitarray_base<bitarray<224>>::testBit(AllTeamFlags, ent->sentient->eTeam) )
    return 0;
  if ( !ent->client )
    return 1;
  MpClient = SV_Client_GetMpClient(ent->s.number);
  return Bot_IsClientActive(MpClient);
}

/*
==============
Bot_IsClientActive
==============
*/
_BOOL8 Bot_IsClientActive(const SvClientMP *cl)
{
  gentity_s *gentity; 
  gclient_s *client; 

  if ( !cl && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 971, ASSERT_TYPE_ASSERT, "( cl )", (const char *)&queryFormat, "cl") )
    __debugbreak();
  if ( !Bot_IsClientConnected(cl) )
    return 0i64;
  gentity = cl->gentity;
  if ( !gentity && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 978, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( !gentity->client && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 979, ASSERT_TYPE_ASSERT, "( ent->client )", (const char *)&queryFormat, "ent->client") )
    __debugbreak();
  client = gentity->client;
  return client->sess.sessionState == SESS_STATE_PLAYING && client->ps.clientNum == gentity->s.number;
}

/*
==============
Bot_IsClientConnected
==============
*/
_BOOL8 Bot_IsClientConnected(const SvClientMP *cl)
{
  unsigned int MpClientIndex; 
  gentity_s *gentity; 

  if ( !cl && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 948, ASSERT_TYPE_ASSERT, "( cl )", (const char *)&queryFormat, "cl") )
    __debugbreak();
  MpClientIndex = SV_Client_GetMpClientIndex(cl);
  if ( SvClient::GetCommonClient(MpClientIndex)->state < CS_ACTIVE )
    return 0i64;
  gentity = cl->gentity;
  if ( !gentity && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 956, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( !gentity->client && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 957, ASSERT_TYPE_ASSERT, "( ent->client )", (const char *)&queryFormat, "ent->client") )
    __debugbreak();
  return gentity->client->sess.connected == CON_CONNECTED;
}

/*
==============
Bot_IsClientSpectatorState
==============
*/
_BOOL8 Bot_IsClientSpectatorState(const SvClientMP *cl)
{
  gentity_s *gentity; 

  if ( !cl && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 996, ASSERT_TYPE_ASSERT, "( cl )", (const char *)&queryFormat, "cl") )
    __debugbreak();
  if ( !Bot_IsClientConnected(cl) )
    return 0i64;
  gentity = cl->gentity;
  if ( !gentity && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1003, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( !gentity->client && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1004, ASSERT_TYPE_ASSERT, "( ent->client )", (const char *)&queryFormat, "ent->client") )
    __debugbreak();
  return gentity->client->sess.sessionState == SESS_STATE_SPECTATOR;
}

/*
==============
Bot_IsControllingRemoteMissile
==============
*/
_BOOL8 Bot_IsControllingRemoteMissile(const bot_data_t *botData)
{
  __int16 remoteControlEnt; 
  gentity_s *v3; 
  __int64 v5; 
  __int64 v6; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5421, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5422, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState )", (const char *)&queryFormat, "botData->botInfo.playerState") )
    __debugbreak();
  if ( !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 0x1Cu) )
    return 0i64;
  remoteControlEnt = botData->botInfo.playerState->remoteControlEnt;
  if ( remoteControlEnt == 2047 )
    return 0i64;
  if ( (unsigned __int16)remoteControlEnt >= 0x800u )
  {
    LODWORD(v5) = remoteControlEnt;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5427, ASSERT_TYPE_ASSERT, "(unsigned)( remoteControlEntNum ) < (unsigned)( ( 2048 ) )", "remoteControlEntNum doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v5, 2048) )
      __debugbreak();
  }
  if ( (unsigned int)remoteControlEnt >= 0x800 )
  {
    LODWORD(v6) = 2048;
    LODWORD(v5) = remoteControlEnt;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 207, ASSERT_TYPE_ASSERT, "(unsigned)( entityIndex ) < (unsigned)( ( 2048 ) )", "entityIndex doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v5, v6) )
      __debugbreak();
  }
  if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 208, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
    __debugbreak();
  if ( g_entities[remoteControlEnt].r.isInUse != g_entityIsInUse[remoteControlEnt] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 209, ASSERT_TYPE_ASSERT, "( g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex] )", (const char *)&queryFormat, "g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex]") )
    __debugbreak();
  if ( !g_entityIsInUse[remoteControlEnt] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5429, ASSERT_TYPE_ASSERT, "( G_IsEntityInUse( remoteControlEntNum ) )", (const char *)&queryFormat, "G_IsEntityInUse( remoteControlEntNum )") )
    __debugbreak();
  v3 = &g_entities[remoteControlEnt];
  if ( !v3 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5431, ASSERT_TYPE_ASSERT, "( remoteControlledEnt )", (const char *)&queryFormat, "remoteControlledEnt") )
    __debugbreak();
  return v3->s.eType == ET_MISSILE && (v3->c.item[0].weapon.attachmentVariationIndices[5] & 0x80u) != 0;
}

/*
==============
Bot_IsDeaf
==============
*/
_BOOL8 Bot_IsDeaf(const bot_data_t *botData)
{
  float hearingDeaf; 
  _BOOL8 result; 
  float hearingBlock; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13628, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  result = 0;
  if ( Bot_GetSensesObstructed(botData, NULL, &hearingBlock) )
  {
    hearingDeaf = botData->botMatchData.hearingDeaf;
    if ( hearingDeaf > 0.0 && hearingBlock >= hearingDeaf )
      return 1;
  }
  return result;
}

/*
==============
Bot_IsEnemyNearGoal
==============
*/
_BOOL8 Bot_IsEnemyNearGoal(bot_data_t *botData, const gentity_s *enemy)
{
  if ( !enemy && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11163, ASSERT_TYPE_ASSERT, "( enemy )", (const char *)&queryFormat, "enemy") )
    __debugbreak();
  return Bot_PointInGoal(botData, 300.0, &enemy->r.currentOrigin) != 0;
}

/*
==============
Bot_IsEntPositionAlwaysKnown
==============
*/
__int64 Bot_IsEntPositionAlwaysKnown(const ai_common_t *ai, gentity_s *ent)
{
  const playerState_s *EntityPlayerStateConst; 
  const playerState_s *v5; 
  int number; 

  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2099, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( !ent->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2100, ASSERT_TYPE_ASSERT, "( ent->sentient )", (const char *)&queryFormat, "ent->sentient") )
    __debugbreak();
  EntityPlayerStateConst = G_GetEntityPlayerStateConst(ent);
  if ( EntityPlayerStateConst && BG_HasPerk(&EntityPlayerStateConst->perks, 0x2Eu) || Bot_EntityIsJuggernaut(ent) || Sentient_IsAerial(ent->sentient) && !Bot_IsHardwareEnt(ent) )
    return 1i64;
  if ( !ai && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2114, ASSERT_TYPE_ASSERT, "( ai )", (const char *)&queryFormat, "ai") )
    __debugbreak();
  if ( !ai->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2115, ASSERT_TYPE_ASSERT, "( ai->ent )", (const char *)&queryFormat, "ai->ent") )
    __debugbreak();
  v5 = G_GetEntityPlayerStateConst(ai->ent);
  if ( !v5 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2117, ASSERT_TYPE_ASSERT, "( psAI )", (const char *)&queryFormat, "psAI") )
    __debugbreak();
  if ( GameModeFlagContainer<enum POtherFlagsCommon,enum POtherFlagsSP,enum POtherFlagsMP,64>::TestFlagStrict(&v5->otherFlags, FIRING|0x20) && (number = ent->s.number, number < level.maxclients) && bitarray_base<bitarray<224>>::testBit(&v5->sightedEnemyPlayersMask, number) )
    return 1i64;
  else
    return 0i64;
}

/*
==============
Bot_IsFacingEnemy
==============
*/
int Bot_IsFacingEnemy(bot_data_t *botData)
{
  gentity_s *v2; 
  const sentient_s *sentient; 
  vec3_t vEyePosOut; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21343, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
    return 0;
  v2 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
  if ( !v2 )
    return 0;
  sentient = v2->sentient;
  if ( !sentient )
    return 0;
  Sentient_GetHeadPosition(sentient, &vEyePosOut);
  return Bot_IsFacingPosition(botData, &vEyePosOut);
}

/*
==============
Bot_IsFacingPosition
==============
*/
_BOOL8 Bot_IsFacingPosition(bot_data_t *botData, const vec3_t *position)
{
  gentity_s *ent; 
  AIBotInterface *m_pAI; 
  gentity_s *v6; 
  float v7; 
  __int128 v8; 
  __int128 v9; 
  float v10; 
  float v14; 
  float v15; 
  __int128 v16; 
  float v17; 
  float v21; 
  __int128 v22; 
  float v26; 
  float v27; 
  float v28; 
  double v29; 
  AIBotWrapper v31; 
  vec3_t vEyeDir; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21302, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21314, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  AICommonInterface::AICommonInterface(&v31.m_botInterface);
  v31.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v31.m_botAgentInterface);
  ent = botData->botInfo.ent;
  v31.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v31.m_pAI = NULL;
  AIBotWrapper::Setup(&v31, ent);
  m_pAI = v31.m_pAI;
  if ( !v31.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21316, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  v6 = botData->botInfo.ent;
  v7 = position->v[0] - v6->r.currentOrigin.v[0];
  v9 = LODWORD(position->v[1]);
  *(float *)&v9 = position->v[1] - v6->r.currentOrigin.v[1];
  v8 = v9;
  v10 = position->v[2] - v6->r.currentOrigin.v[2];
  *(float *)&v9 = fsqrt((float)((float)(*(float *)&v9 * *(float *)&v9) + (float)(v7 * v7)) + (float)(v10 * v10));
  _XMM1 = v9;
  __asm
  {
    vcmpless xmm0, xmm1, xmm7
    vblendvps xmm0, xmm1, xmm10, xmm0
  }
  v14 = v7 * (float)(1.0 / *(float *)&_XMM0);
  v16 = v8;
  v15 = *(float *)&v8 * (float)(1.0 / *(float *)&_XMM0);
  v17 = v10 * (float)(1.0 / *(float *)&_XMM0);
  *(float *)&v16 = fsqrt((float)(v15 * v15) + (float)(v14 * v14));
  _XMM2 = v16;
  __asm
  {
    vcmpless xmm0, xmm2, xmm7
    vblendvps xmm0, xmm2, xmm10, xmm0
  }
  v21 = 1.0 / *(float *)&_XMM0;
  AICommonInterface::GetEyeDirection(m_pAI, &vEyeDir);
  v22 = LODWORD(vEyeDir.v[1]);
  *(float *)&v22 = fsqrt((float)(*(float *)&v22 * *(float *)&v22) + (float)(vEyeDir.v[0] * vEyeDir.v[0]));
  _XMM2 = v22;
  __asm
  {
    vcmpless xmm0, xmm2, xmm7
    vblendvps xmm0, xmm2, xmm10, xmm0
  }
  v26 = vEyeDir.v[0] * (float)(1.0 / *(float *)&_XMM0);
  v27 = (float)((float)(vEyeDir.v[0] * v14) + (float)(vEyeDir.v[1] * v15)) + (float)(v17 * vEyeDir.v[2]);
  v28 = vEyeDir.v[1] * (float)(1.0 / *(float *)&_XMM0);
  v29 = SV_BotFovDot(&botData->botInfo, NULL);
  return (float)((float)((float)(v15 * v21) * v28) + (float)((float)(v14 * v21) * v26)) > *(float *)&v29 && v27 > (float)(*(float *)&v29 - 0.1);
}

/*
==============
Bot_IsFireFromHipRange
==============
*/
_BOOL8 Bot_IsFireFromHipRange(const bot_data_t *botData)
{
  int lastFireFromHipRangeTime; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20219, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  lastFireFromHipRangeTime = botData->botInfo.lastFireFromHipRangeTime;
  return lastFireFromHipRangeTime > 0 && level.time - lastFireFromHipRangeTime < 500;
}

/*
==============
Bot_IsFiringWeapon
==============
*/
_BOOL8 Bot_IsFiringWeapon(const bot_data_t *botData, const usercmd_s *cmd)
{
  const Weapon *ViewmodelWeapon; 
  playerState_s *playerState; 
  const Weapon *v6; 
  GWeaponMap *Instance; 
  _BOOL8 result; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11180, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11181, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !botData->botInfo.lastUserCmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11182, ASSERT_TYPE_ASSERT, "( botData->botInfo.lastUserCmd )", (const char *)&queryFormat, "botData->botInfo.lastUserCmd") )
    __debugbreak();
  if ( !botData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11183, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState )", (const char *)&queryFormat, "botData->botInfo.playerState") )
    __debugbreak();
  result = 1;
  if ( (botData->botInfo.lastUserCmd->buttons & 1) == 0 && (cmd->buttons & 1) == 0 )
  {
    ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(botData->botInfo.playerState);
    playerState = botData->botInfo.playerState;
    v6 = ViewmodelWeapon;
    Instance = GWeaponMap::GetInstance();
    if ( !BG_PlayerDualWieldingWeapon(Instance, playerState, v6) || (botData->botInfo.lastUserCmd->buttons & 0x20000) == 0 && (cmd->buttons & 0x20000) == 0 )
      return 0;
  }
  return result;
}

/*
==============
Bot_IsFirstPersonRemoteVehicle
==============
*/
int Bot_IsFirstPersonRemoteVehicle(const bot_data_t *botData)
{
  int result; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5396, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  result = Bot_IsRemoteEyesVehicle(botData);
  if ( result )
    return Bot_GetRemoteVehicleType(botData) == 0;
  return result;
}

/*
==============
Bot_IsForcedFiring
==============
*/
_BOOL8 Bot_IsForcedFiring(const bot_data_t *botData)
{
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11207, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  return botData->botInfo.forceFireTime > level.time;
}

/*
==============
Bot_IsGoalInBadPlace
==============
*/
_BOOL8 Bot_IsGoalInBadPlace(const bot_info_t *botInfo, const bot_goal_t *goal)
{
  pathnode_t *node; 
  float v5; 
  unsigned __int64 eTeam; 
  int v7; 
  vec3_t pos; 
  bitarray<224> teamFlags; 

  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20306, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  if ( !botInfo->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20307, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  if ( !botInfo->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20308, ASSERT_TYPE_ASSERT, "( botInfo->sentient )", (const char *)&queryFormat, "botInfo->sentient") )
    __debugbreak();
  if ( !goal && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20309, ASSERT_TYPE_ASSERT, "( goal )", (const char *)&queryFormat, "goal") )
    __debugbreak();
  node = goal->node;
  if ( node || (node = goal->nearestNode) != NULL )
  {
    pathnode_t::GetPos(node, &pos);
  }
  else
  {
    v5 = goal->pos.v[1];
    pos.v[0] = goal->pos.v[0];
    pos.v[2] = goal->pos.v[2];
    pos.v[1] = v5;
  }
  eTeam = (unsigned int)botInfo->sentient->eTeam;
  memset(&teamFlags, 0, sizeof(teamFlags));
  if ( (unsigned int)eTeam >= 0xE0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\bitarray.h", 263, ASSERT_TYPE_ASSERT, "( pos ) < ( impl()->getBitCount() )", "%s < %s\n\t%u, %u", "pos", "impl()->getBitCount()", eTeam, 224) )
    __debugbreak();
  teamFlags.array[eTeam >> 5] |= 0x80000000 >> (eTeam & 0x1F);
  v7 = Nav_TranslateTeamFlagsToRepulsorUsageFlags(&teamFlags);
  return Nav_IsPointInRepulsorBadplace(&pos, v7, botInfo->ent->s.number, 2047);
}

/*
==============
Bot_IsHardwareEnt
==============
*/
_BOOL8 Bot_IsHardwareEnt(const gentity_s *ent)
{
  entityType_s eType; 

  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1384, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  eType = ent->s.eType;
  return eType == ET_MISSILE || eType == ET_SCRIPTMOVER && !Sentient_IsAerial(ent->sentient);
}

/*
==============
Bot_IsHighAerialSentient
==============
*/
__int64 Bot_IsHighAerialSentient(sentient_s *sentient)
{
  pathnode_t *v2; 
  vec3_t pos; 

  if ( !sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17426, ASSERT_TYPE_ASSERT, "( sentient )", (const char *)&queryFormat, "sentient") )
    __debugbreak();
  if ( !Sentient_IsAerial(sentient) )
    return 0i64;
  if ( !sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17396, ASSERT_TYPE_ASSERT, "( sentient )", (const char *)&queryFormat, "sentient") )
    __debugbreak();
  if ( !sentient->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17397, ASSERT_TYPE_ASSERT, "( sentient->ent )", (const char *)&queryFormat, "sentient->ent") )
    __debugbreak();
  if ( !Sentient_IsAerial(sentient) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17398, ASSERT_TYPE_ASSERT, "( Sentient_IsAerial( sentient ) )", (const char *)&queryFormat, "Sentient_IsAerial( sentient )") )
    __debugbreak();
  v2 = Sentient_NearestNode(sentient);
  if ( v2 && (pathnode_t::GetPos(v2, &pos), (float)(sentient->ent->r.currentOrigin.v[2] - pos.v[2]) < 300.0) )
    return 0i64;
  else
    return 1i64;
}

/*
==============
Bot_IsIdleAtScriptGoal
==============
*/
_BOOL8 Bot_IsIdleAtScriptGoal(const bot_data_t *botData)
{
  int scriptGoalIdleTime; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7948, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  scriptGoalIdleTime = botData->botInfo.scriptGoalIdleTime;
  return Bot_AtScriptGoal(botData) && scriptGoalIdleTime >= 1000;
}

/*
==============
Bot_IsInRangeOfEnemy
==============
*/
__int64 Bot_IsInRangeOfEnemy(const bot_data_t *botData)
{
  playerState_s *playerState; 
  const Weapon *ViewmodelWeapon; 
  unsigned int v5; 
  gentity_s *v6; 
  double MaxDamageRange; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21365, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21369, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(playerState);
  if ( Bot_Weap_IsNone(ViewmodelWeapon) )
    return 0i64;
  v5 = 0;
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
  {
    v6 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
    if ( v6 )
    {
      if ( Bot_IsHighAerialSentient(v6->sentient) )
      {
        return (unsigned int)Bot_Weap_CurrentWeapCanDamageEnemy(botData, 3.0);
      }
      else if ( Bot_Weap_IsWeapClass(playerState, ViewmodelWeapon, WEAPCLASS_SPREAD) )
      {
        MaxDamageRange = Bot_Weap_GetMaxDamageRange(playerState, ViewmodelWeapon);
        LOBYTE(v5) = *(float *)&MaxDamageRange >= botData->botInfo.enemyTrack.lastDist;
      }
      else if ( Bot_Weap_CurrentWeapCanDamageEnemy(botData, 1.5) || Bot_ActualMeleeRange(botData) > botData->botInfo.enemyTrack.lastDist )
      {
        return 1;
      }
    }
  }
  return v5;
}

/*
==============
Bot_IsJumping
==============
*/
_BOOL8 Bot_IsJumping(const bot_data_t *botData)
{
  playerState_s *playerState; 

  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14727, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  return GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&playerState->pm_flags, ACTIVE, 0x13u) && playerState->pm_time == 0;
}

/*
==============
Bot_IsMovementLocked
==============
*/
int Bot_IsMovementLocked(const bot_data_t *botData)
{
  const dvar_t *v2; 
  const dvar_t *v3; 
  playerState_s *playerState; 
  int result; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7468, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v2 = DVARINT_bot_DisableMovement;
  if ( !DVARINT_bot_DisableMovement && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DisableMovement") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v2);
  if ( v2->current.integer == 1 )
    return 1;
  v3 = DVARINT_bot_DisableMovement;
  if ( !DVARINT_bot_DisableMovement && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DisableMovement") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v3);
  if ( v3->current.integer == 2 )
    return 1;
  playerState = botData->botInfo.playerState;
  if ( playerState->commandTime < playerState->serverTime )
    return 1;
  if ( (*((_BYTE *)&botData->scriptedAgentInfo + 9016) & 4) != 0 )
    return 1;
  if ( GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&playerState->pm_flags, ACTIVE, 0x20u) )
    return 1;
  result = Bot_IsUsingTurret(botData);
  if ( result )
    return 1;
  return result;
}

/*
==============
Bot_IsNearEnemies
==============
*/
__int64 Bot_IsNearEnemies(const bot_data_t *botData)
{
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6007, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  return ((unsigned int)botData->botInfo.flags >> 15) & 1;
}

/*
==============
Bot_IsOKToFireSplashDamageWeaponFrom
==============
*/
bool Bot_IsOKToFireSplashDamageWeaponFrom(const bot_data_t *botData, gentity_s *enemy, const Weapon *weapon, const vec3_t *startPos, const vec3_t *enemyPos, bool bUsingAlternate, float explosionRadius)
{
  gentity_s *ent; 
  const dvar_t *v9; 
  const vec4_t *v11; 
  const vec3_t *p_position; 
  Bounds bounds; 
  trace_t results; 

  ent = botData->botInfo.ent;
  bounds.halfSize.v[1] = FLOAT_6_0;
  bounds.halfSize.v[2] = FLOAT_6_0;
  results.fraction = FLOAT_1_0;
  *(_OWORD *)bounds.midPoint.v = _xmm;
  G_Main_TraceCapsule(&results, startPos, enemyPos, &bounds, ent->s.number, 1);
  v9 = DVARBOOL_bot_DrawSplashDamageChecks;
  if ( results.fraction < 0.5 )
  {
    if ( !DVARBOOL_bot_DrawSplashDamageChecks && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 692, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawSplashDamageChecks") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v9);
    if ( v9->current.enabled )
    {
      CL_AddDebugLine(startPos, &results.position, &colorRed, 0, 10, 1);
      return 0;
    }
    return 0;
  }
  if ( results.fraction >= 1.0 )
  {
    if ( !DVARBOOL_bot_DrawSplashDamageChecks && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 692, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawSplashDamageChecks") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v9);
    if ( v9->current.enabled )
    {
      v11 = &colorGreen;
      p_position = enemyPos;
      goto LABEL_18;
    }
  }
  else
  {
    if ( !DVARBOOL_bot_DrawSplashDamageChecks && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 692, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawSplashDamageChecks") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v9);
    if ( v9->current.enabled )
    {
      v11 = &colorYellow;
      p_position = &results.position;
LABEL_18:
      CL_AddDebugLine(startPos, p_position, v11, 0, 10, 1);
    }
  }
  return results.fraction >= 1.0 || results.hitId != 2046 || (float)((float)((float)((float)(results.position.v[1] - startPos->v[1]) * (float)(results.position.v[1] - startPos->v[1])) + (float)((float)(results.position.v[0] - startPos->v[0]) * (float)(results.position.v[0] - startPos->v[0]))) + (float)((float)(results.position.v[2] - startPos->v[2]) * (float)(results.position.v[2] - startPos->v[2]))) >= (float)(explosionRadius * explosionRadius);
}

/*
==============
Bot_IsOnGround
==============
*/
_BOOL8 Bot_IsOnGround(const bot_data_t *botData)
{
  playerState_s *playerState; 

  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14746, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  return playerState->groundEntityNum != 2047;
}

/*
==============
Bot_IsOnGroundOrNearGround
==============
*/
int Bot_IsOnGroundOrNearGround(const bot_data_t *botData)
{
  int result; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14760, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  result = Bot_IsOnGround(botData);
  if ( result || (botData->botInfo.flags & 0x8000000) != 0 )
    return 1;
  return result;
}

/*
==============
Bot_IsPointInRangeOfHardwareEntExplosion
==============
*/
_BOOL8 Bot_IsPointInRangeOfHardwareEntExplosion(const gentity_s *ent, const vec3_t *point)
{
  float v4; 
  float v5; 

  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8257, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( !ent->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8258, ASSERT_TYPE_ASSERT, "( ent->sentient )", (const char *)&queryFormat, "ent->sentient") )
    __debugbreak();
  if ( !Bot_IsHardwareEnt(ent) || ent->sentient->expendable || !GameModeFlagContainer<enum BgEntityFlagsCommon,enum BgEntityFlagsSP,enum BgEntityFlagsMP,64>::TestFlagStrict(&ent->flags, (BgEntityFlagsMP)34) )
    return 0i64;
  v4 = ent->r.currentOrigin.v[1] - point->v[1];
  v5 = ent->r.currentOrigin.v[2] - point->v[2];
  return (float)((float)((float)(v4 * v4) + (float)((float)(ent->r.currentOrigin.v[0] - point->v[0]) * (float)(ent->r.currentOrigin.v[0] - point->v[0]))) + (float)(v5 * v5)) < 90000.0;
}

/*
==============
Bot_IsPointNearWorldEdge
==============
*/
_BOOL8 Bot_IsPointNearWorldEdge(const vec3_t *point, const float tolerance)
{
  float v2; 
  float v3; 
  float v4; 
  float v5; 

  v2 = point->v[1];
  v3 = point->v[0];
  v4 = point->v[2];
  LODWORD(v5) = LODWORD(tolerance) ^ _xmm;
  return (float)((float)((float)((float)(point->v[0] * s_botWorldEdgePlanes[0].v[0]) + (float)(v2 * s_botWorldEdgePlanes[0].v[1])) + (float)(v4 * s_botWorldEdgePlanes[0].v[2])) - s_botWorldEdgePlanes[0].v[3]) > COERCE_FLOAT(LODWORD(tolerance) ^ _xmm) || (float)((float)((float)((float)(v3 * s_botWorldEdgePlanes[1].v[0]) + (float)(v2 * s_botWorldEdgePlanes[1].v[1])) + (float)(v4 * s_botWorldEdgePlanes[1].v[2])) - s_botWorldEdgePlanes[1].v[3]) > v5 || (float)((float)((float)((float)(v3 * s_botWorldEdgePlanes[2].v[0]) + (float)(v2 * s_botWorldEdgePlanes[2].v[1])) + (float)(v4 * s_botWorldEdgePlanes[2].v[2])) - s_botWorldEdgePlanes[2].v[3]) > v5 || (float)((float)((float)((float)(v3 * s_botWorldEdgePlanes[3].v[0]) + (float)(v2 * s_botWorldEdgePlanes[3].v[1])) + (float)(v4 * s_botWorldEdgePlanes[3].v[2])) - s_botWorldEdgePlanes[3].v[3]) > v5;
}

/*
==============
Bot_IsPostedAtGoalType
==============
*/
_BOOL8 Bot_IsPostedAtGoalType(const bot_data_t *botData, bot_scr_goal_t goalType)
{
  _BOOL8 result; 
  __int64 v5; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11220, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( (unsigned int)goalType >= BOT_SCR_GOAL_COUNT )
  {
    LODWORD(v5) = goalType;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11221, ASSERT_TYPE_ASSERT, "(unsigned)( goalType ) < (unsigned)( BOT_SCR_GOAL_COUNT )", "goalType doesn't index BOT_SCR_GOAL_COUNT\n\t%i not in [0, %i)", v5, 7) )
      __debugbreak();
  }
  result = Bot_IsIdleAtScriptGoal(botData);
  if ( result )
    return botData->botInfo.scriptGoal.type == goalType;
  return result;
}

/*
==============
Bot_IsRandomized
==============
*/
__int64 Bot_IsRandomized(const bot_data_t *botData)
{
  return 1i64;
}

/*
==============
Bot_IsReloading
==============
*/
_BOOL8 Bot_IsReloading(const bot_data_t *botData)
{
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21488, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21489, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState )", (const char *)&queryFormat, "botData->botInfo.playerState") )
    __debugbreak();
  return (unsigned int)(Bot_Weap_GetWeaponStateForViewWeapon(botData->botInfo.playerState) - 18) <= 3;
}

/*
==============
Bot_IsRemoteEyesVehicle
==============
*/
__int64 Bot_IsRemoteEyesVehicle(const bot_data_t *botData)
{
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5295, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !Bot_HasRemoteEyes(botData) )
    return 0i64;
  if ( (unsigned __int16)Bot_GetRemoteEyesEntNum(botData) == 2047 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5300, ASSERT_TYPE_ASSERT, "( Bot_GetRemoteEyesEntNum( botData ) != ENTITYNUM_NONE )", (const char *)&queryFormat, "Bot_GetRemoteEyesEntNum( botData ) != ENTITYNUM_NONE") )
    __debugbreak();
  if ( botData->botInfo.playerState->vehicleState.entity == 2047 )
    return 0i64;
  if ( botData->botInfo.playerState->vehicleState.entity != (__int16)Bot_GetRemoteEyesEntNum(botData) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5303, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState->vehicleState.entity == Bot_GetRemoteEyesEntNum( botData ) )", (const char *)&queryFormat, "botData->botInfo.playerState->vehicleState.entity == Bot_GetRemoteEyesEntNum( botData )") )
    __debugbreak();
  return 1i64;
}

/*
==============
Bot_IsSentientEntityConnected
==============
*/
_BOOL8 Bot_IsSentientEntityConnected(const gentity_s *ent)
{
  __int16 EntityIndex; 
  const SvClientMP *MpClient; 

  if ( !ent )
    return 0i64;
  EntityIndex = G_GetEntityIndex(ent);
  if ( !G_IsEntityInUse(EntityIndex) || !ent->sentient )
    return 0i64;
  if ( ent->client )
  {
    MpClient = SV_Client_GetMpClient(ent->s.number);
    return Bot_IsClientConnected(MpClient);
  }
  else
  {
    return !ent->agent || ent->s.eType == ET_AGENT;
  }
}

/*
==============
Bot_IsSentientPotentialCamper
==============
*/
_BOOL8 Bot_IsSentientPotentialCamper(const sentient_s *sentient)
{
  signed __int64 v2; 
  __int64 v3; 
  __int64 v5; 

  if ( !sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1967, ASSERT_TYPE_ASSERT, "( sentient )", (const char *)&queryFormat, "sentient") )
    __debugbreak();
  v2 = (char *)sentient - (char *)level.sentients;
  v3 = v2 / 184;
  if ( !s_botSentientHistory && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1969, ASSERT_TYPE_ASSERT, "( s_botSentientHistory )", (const char *)&queryFormat, "s_botSentientHistory") )
    __debugbreak();
  if ( (unsigned int)v3 >= level.maxSentients )
  {
    LODWORD(v5) = v2 / 184;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1970, ASSERT_TYPE_ASSERT, "(unsigned)( sentientIndex ) < (unsigned)( level.maxSentients )", "sentientIndex doesn't index level.maxSentients\n\t%i not in [0, %i)", v5, level.maxSentients) )
      __debugbreak();
  }
  return level.time - s_botSentientHistory[v3].lastTimeMovedPositions > 5000;
}

/*
==============
Bot_IsSliding
==============
*/
_BOOL8 Bot_IsSliding(const bot_data_t *botData)
{
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6862, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6863, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState )", (const char *)&queryFormat, "botData->botInfo.playerState") )
    __debugbreak();
  return GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 0x1Du);
}

/*
==============
Bot_IsStationaryEnt
==============
*/
_BOOL8 Bot_IsStationaryEnt(const gentity_s *ent)
{
  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1406, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  return Bot_IsHardwareEnt(ent) && !Sentient_IsAerial(ent->sentient) || ent->s.eType == ET_TURRET;
}

/*
==============
Bot_IsStuckReacting
==============
*/
__int64 Bot_IsStuckReacting(const bot_info_t *botInfo)
{
  __int64 result; 

  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14713, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  result = 0i64;
  if ( botInfo->stuckReactionTime - level.time > 0 )
    return (unsigned int)(botInfo->stuckReactionTime - level.time);
  return result;
}

/*
==============
Bot_IsThirdPersonRemoteVehicle
==============
*/
__int64 Bot_IsThirdPersonRemoteVehicle(const bot_data_t *botData)
{
  __int64 result; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5382, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  result = Bot_IsRemoteEyesVehicle(botData);
  if ( (_DWORD)result )
    return (unsigned int)Bot_GetRemoteVehicleType(botData) == 1;
  return result;
}

/*
==============
Bot_IsThrowingGrenade
==============
*/
_BOOL8 Bot_IsThrowingGrenade(const bot_data_t *botData)
{
  playerState_s *playerState; 
  const Weapon *ViewmodelWeapon; 
  int grenadeFiredTime; 
  int time; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21448, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21449, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState )", (const char *)&queryFormat, "botData->botInfo.playerState") )
    __debugbreak();
  if ( (*((_BYTE *)&botData->scriptedAgentInfo + 28228) & 1) != 0 )
    return 1i64;
  playerState = botData->botInfo.playerState;
  ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(playerState);
  if ( (unsigned int)(Bot_Weap_GetWeaponStateForViewWeapon(botData->botInfo.playerState) - 26) <= 6 && Bot_Weap_IsWeapClass(botData->botInfo.playerState, ViewmodelWeapon, WEAPCLASS_GRENADE) )
  {
    if ( botData->botInfo.grenadeFiredTime < 0 || Bot_Weap_IsNone(&botData->botInfo.grenadeWeap) )
      return 0i64;
    grenadeFiredTime = botData->botInfo.grenadeFiredTime;
    if ( !grenadeFiredTime )
      return 1i64;
    time = level.time;
    if ( level.time - grenadeFiredTime < (int)botData->botMatchData.reactionTime >> 1 )
      return 1i64;
  }
  else
  {
    time = level.time;
  }
  return time <= botData->botInfo.weaponDelayForOffhand && Bot_Weap_HasUnderBarrelGLAmmo(playerState);
}

/*
==============
Bot_IsTraversalBlocked
==============
*/
_BOOL8 Bot_IsTraversalBlocked(bot_data_t *botData, int *byEnemy)
{
  pathnode_t *v4; 
  pathnode_t *v5; 
  playerState_s *playerState; 
  const Bounds *Bounds; 
  gentity_s *ent; 
  __int128 v12; 
  gentity_s *v14; 
  __int64 v16; 
  __int64 v17; 
  __int64 v18; 
  vec3_t destination; 
  vec3_t end; 
  vec3_t pos; 
  vec3_t start; 
  trace_t results; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2253, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v4 = NULL;
  if ( Path_NodeValid(botData->botInfo.nodeNegotStart) )
    v5 = Path_ConvertIndexToNode(botData->botInfo.nodeNegotStart);
  else
    v5 = NULL;
  if ( Path_NodeValid(botData->botInfo.nodeNegotEnd) )
    v4 = Path_ConvertIndexToNode(botData->botInfo.nodeNegotEnd);
  if ( !v5 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2257, ASSERT_TYPE_ASSERT, "(negotiationStartNode)", "%s\n\tNo traversal start node.  botInfo->traversal = %i, botInfo->nodeNegotStart = %i, botInfo->traverseJumpTime = %i", "negotiationStartNode", botData->botInfo.traversal, botData->botInfo.nodeNegotStart, botData->botInfo.traverseJumpTime) )
    __debugbreak();
  if ( !v4 )
  {
    LODWORD(v18) = botData->botInfo.traverseJumpTime;
    LODWORD(v17) = botData->botInfo.nodeNegotEnd;
    LODWORD(v16) = botData->botInfo.traversal;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2257, ASSERT_TYPE_ASSERT, "(negotiationEndNode)", "%s\n\tNo traversal end node.  botInfo->traversal = %i, botInfo->nodeNegotEnd = %i, botInfo->traverseJumpTime = %i", "negotiationEndNode", v16, v17, v18) )
      __debugbreak();
  }
  pathnode_t::GetPos(v5, &pos);
  pathnode_t::GetPos(v4, &destination);
  playerState = botData->botInfo.playerState;
  results.fraction = FLOAT_1_0;
  Bounds = BG_Suit_GetBounds(playerState->suitIndex, PM_EFF_STANCE_DEFAULT);
  ent = botData->botInfo.ent;
  if ( (LOBYTE(botData->scriptedAgentInfo.scriptGoal.pos.y) & 1) != 0 )
  {
    start = pos;
    _XMM0 = LODWORD(ent->r.currentOrigin.v[2]);
    __asm { vmaxss  xmm2, xmm0, dword ptr [rsp+120h+pos+8] }
    end.v[0] = pos.v[0];
    v12 = _XMM2;
    *(float *)&v12 = *(float *)&_XMM2 + 105.0;
    _XMM1 = v12;
    start.v[2] = *(float *)&_XMM2;
    __asm { vminss  xmm2, xmm1, dword ptr [rsp+120h+destination+8] }
    end.v[2] = *(float *)&_XMM2;
    end.v[1] = pos.v[1];
    G_Main_TraceCapsule(&results, &start, &end, Bounds, ent->s.number, 33570816);
    if ( !Bot_TraceBlocksTraversal(botData, &results, &destination, byEnemy) )
    {
      if ( end.v[2] < destination.v[2] )
        return 0i64;
      v14 = botData->botInfo.ent;
      results.fraction = FLOAT_1_0;
      G_Main_TraceCapsule(&results, &end, &destination, Bounds, v14->s.number, 33570816);
      if ( !Bot_TraceBlocksTraversal(botData, &results, &destination, byEnemy) || !*byEnemy && (float)((float)((float)(end.v[1] - (float)((float)((float)(destination.v[1] - end.v[1]) * results.fraction) + end.v[1])) * (float)(end.v[1] - (float)((float)((float)(destination.v[1] - end.v[1]) * results.fraction) + end.v[1]))) + (float)((float)(end.v[0] - (float)((float)((float)(destination.v[0] - end.v[0]) * results.fraction) + end.v[0])) * (float)(end.v[0] - (float)((float)((float)(destination.v[0] - end.v[0]) * results.fraction) + end.v[0])))) >= (float)((float)(Bounds->halfSize.v[0] * Bounds->halfSize.v[0]) * 3.0625) )
        return 0i64;
    }
    return 1i64;
  }
  G_Main_TraceCapsule(&results, &pos, &destination, Bounds, ent->s.number, 33570816);
  return Bot_TraceBlocksTraversal(botData, &results, &destination, byEnemy) != 0;
}

/*
==============
Bot_IsUnreachableHighAerialSentient
==============
*/
__int64 Bot_IsUnreachableHighAerialSentient(sentient_s *sentient)
{
  if ( !sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17443, ASSERT_TYPE_ASSERT, "( sentient )", (const char *)&queryFormat, "sentient") )
    __debugbreak();
  if ( !sentient->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17444, ASSERT_TYPE_ASSERT, "( sentient->ent )", (const char *)&queryFormat, "sentient->ent") )
    __debugbreak();
  Bot_IsHighAerialSentient(sentient);
  return 0i64;
}

/*
==============
Bot_IsUseButtonPressed
==============
*/
bool Bot_IsUseButtonPressed(const bot_data_t *botData)
{
  const playerState_s *EntityPlayerStateConst; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11246, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.lastUserCmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11247, ASSERT_TYPE_ASSERT, "( botData->botInfo.lastUserCmd )", (const char *)&queryFormat, "botData->botInfo.lastUserCmd") )
    __debugbreak();
  EntityPlayerStateConst = G_GetEntityPlayerStateConst(botData->botInfo.ent);
  return (G_PlayerUse_GetUseButtonMask(EntityPlayerStateConst) & botData->botInfo.lastUserCmd->buttons) != 0;
}

/*
==============
Bot_IsVehicleEnt
==============
*/
_BOOL8 Bot_IsVehicleEnt(const gentity_s *ent)
{
  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17705, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( !ent->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17706, ASSERT_TYPE_ASSERT, "( ent->sentient )", (const char *)&queryFormat, "ent->sentient") )
    __debugbreak();
  return !Bot_IsHardwareEnt(ent) && (ent->s.eType == ET_VEHICLE || Sentient_IsAerial(ent->sentient));
}

/*
==============
Bot_LoadDifficultySettings
==============
*/
void Bot_LoadDifficultySettings(bot_data_t *botData, bot_difficulty_t botDifficulty)
{
  int v5; 
  bot_difficulty_t v6; 
  const char *ColumnValueForRow; 
  const char *v8; 
  const char *v9; 
  bot_match_data_setting_t *matched; 
  __int64 offset; 
  int flag; 
  bot_difficulty_t v14; 
  const char **v15; 
  const char *v16; 
  __int64 v17; 
  signed __int64 v18; 
  int v19; 
  __int64 v20; 
  int v21; 
  int v22; 
  int v23; 
  int row; 
  bot_difficulty_t v25; 
  StringTable *tablePtr; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4991, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( (unsigned int)botDifficulty > BOT_DIFFICULTY_DEFAULT && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4992, ASSERT_TYPE_ASSERT, "( (botDifficulty >= BOT_DIFFICULTY_RECRUIT) && (botDifficulty < BOT_DIFFICULTY_COUNT) )", (const char *)&queryFormat, "(botDifficulty >= BOT_DIFFICULTY_RECRUIT) && (botDifficulty < BOT_DIFFICULTY_COUNT)") )
    __debugbreak();
  StringTable_GetAsset("mp/botDifficultyTable.csv", (const StringTable **)&tablePtr);
  if ( !tablePtr && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5000, ASSERT_TYPE_ASSERT, "( pTable )", (const char *)&queryFormat, "pTable") )
    __debugbreak();
  v5 = 0;
  botData->botMatchData.flags = 0;
  row = 0;
  v6 = BOT_DIFFICULTY_REGULAR;
  if ( botDifficulty != BOT_DIFFICULTY_DEFAULT )
    v6 = botDifficulty;
  v25 = v6;
  while ( 1 )
  {
    ColumnValueForRow = StringTable_GetColumnValueForRow(tablePtr, v5, 0);
    v8 = ColumnValueForRow;
    if ( ColumnValueForRow )
    {
      if ( *ColumnValueForRow )
        break;
    }
LABEL_42:
    v5 = ++row;
    if ( !v8 || !*v8 )
    {
      Bot_ValidateMatchData(botData);
      return;
    }
  }
  v9 = StringTable_GetColumnValueForRow(tablePtr, row, v6 + 1);
  matched = Bot_MatchDataSetting(v8);
  if ( matched )
  {
    *(double *)&_XMM0 = atof(v9);
    offset = matched->offset;
    __asm { vcvtsd2ss xmm1, xmm0, xmm0 }
    if ( (_DWORD)offset == 3212 )
    {
      flag = matched->flag;
      if ( *(float *)&_XMM1 == 0.0 )
        botData->botMatchData.flags &= ~flag;
      else
        botData->botMatchData.flags |= flag;
    }
    else if ( (_DWORD)offset == 3416 )
    {
      v14 = BOT_DIFFICULTY_RECRUIT;
      v15 = BOT_BURST_FIRE_TYPE_STRINGS;
      do
      {
        v16 = *v15;
        v17 = 0x7FFFFFFFi64;
        if ( !v9 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 212, ASSERT_TYPE_SANITY, "( s0 )", (const char *)&queryFormat, "s0") )
          __debugbreak();
        if ( !v16 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 213, ASSERT_TYPE_SANITY, "( s1 )", (const char *)&queryFormat, "s1") )
          __debugbreak();
        v18 = v9 - v16;
        while ( 1 )
        {
          v19 = (unsigned __int8)v16[v18];
          v20 = v17;
          v21 = *(unsigned __int8 *)v16++;
          --v17;
          if ( !v20 )
          {
LABEL_37:
            *(bot_difficulty_t *)((char *)&botData->botMatchData.difficulty + matched->offset) = v14;
            goto LABEL_38;
          }
          if ( v19 != v21 )
          {
            v22 = v19 + 32;
            if ( (unsigned int)(v19 - 65) > 0x19 )
              v22 = v19;
            v19 = v22;
            v23 = v21 + 32;
            if ( (unsigned int)(v21 - 65) > 0x19 )
              v23 = v21;
            if ( v19 != v23 )
              break;
          }
          if ( !v19 )
            goto LABEL_37;
        }
        ++v14;
        ++v15;
      }
      while ( (__int64)v15 < (__int64)&BOT_BURST_FIRE_TYPE_STRINGS[3] );
LABEL_38:
      if ( v14 == BOT_DIFFICULTY_VETERAN && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4932, ASSERT_TYPE_ASSERT, (const char *)&queryFormat.fmt + 3, "Bot_SetDifficultySetting could not set '%s' with value '%s'.", v8, v9) )
        __debugbreak();
      v6 = v25;
    }
    else
    {
      *(bot_difficulty_t *)((char *)&botData->botMatchData.difficulty + offset) = _XMM1;
    }
    goto LABEL_42;
  }
  if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5017, ASSERT_TYPE_ASSERT, (const char *)&queryFormat.fmt + 3, "Bot_LoadDifficultySettings() invalid settingName '%s'", v8) )
    __debugbreak();
}

/*
==============
Bot_LocationIsScriptGoal
==============
*/
_BOOL8 Bot_LocationIsScriptGoal(const bot_data_t *botData, const vec3_t *location)
{
  vec3_t goal; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24153, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( botData->botInfo.scriptGoal.type == BOT_SCR_GOAL_NONE )
    return 0i64;
  Bot_GetScriptGoal(botData, &goal);
  return (float)((float)((float)((float)(goal.v[1] - location->v[1]) * (float)(goal.v[1] - location->v[1])) + (float)((float)(goal.v[0] - location->v[0]) * (float)(goal.v[0] - location->v[0]))) + (float)((float)(goal.v[2] - location->v[2]) * (float)(goal.v[2] - location->v[2]))) <= 1.0;
}

/*
==============
Bot_LookAtEntity
==============
*/
void Bot_LookAtEntity(bot_data_t *botData, gentity_s *ent, int duration, bot_look_t type)
{
  bot_data_t *v8; 
  vec3_t *p_targetPos; 
  vec3_t targetPos; 
  vec3_t vEyePosOut; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14597, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14598, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  v8 = botData;
  if ( ent->sentient )
  {
    if ( Bot_ShouldForgetEnemy(botData, ent) )
      return;
    Bot_GetLastKnownEntPosAndTime(botData, ent, &targetPos);
    Sentient_GetEyePosition(ent->sentient, &vEyePosOut);
    targetPos.v[2] = (float)(vEyePosOut.v[2] - ent->r.currentOrigin.v[2]) + targetPos.v[2];
    p_targetPos = &targetPos;
    v8 = botData;
  }
  else
  {
    p_targetPos = &ent->r.currentOrigin;
  }
  Bot_LookAtPoint(v8, p_targetPos, duration, type);
}

/*
==============
Bot_LookAtPoint
==============
*/
void Bot_LookAtPoint(bot_data_t *botData, const vec3_t *point, int duration, bot_look_t type)
{
  int time; 
  int traversal; 
  __int64 v10; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14625, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( (unsigned int)type >= BOT_LOOK_COUNT )
  {
    LODWORD(v10) = type;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14626, ASSERT_TYPE_ASSERT, "(unsigned)( type ) < (unsigned)( BOT_LOOK_COUNT )", "type doesn't index BOT_LOOK_COUNT\n\t%i not in [0, %i)", v10, 7) )
      __debugbreak();
  }
  if ( point )
  {
    if ( point->v[0] == 0.0 && point->v[1] == 0.0 && point->v[2] == 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14633, ASSERT_TYPE_ASSERT, "( Vec3NotZero( *point ) )", (const char *)&queryFormat, "Vec3NotZero( *point )") )
      __debugbreak();
    time = level.time;
    if ( botData->botInfo.lookAtType <= type || level.time >= botData->botInfo.lookAtTime )
    {
      botData->botInfo.lookAtType = type;
      botData->botInfo.lookAtTime = duration + time;
      botData->botInfo.lookAtPoint.v[0] = point->v[0];
      botData->botInfo.lookAtPoint.v[1] = point->v[1];
      botData->botInfo.lookAtPoint.v[2] = point->v[2];
      if ( type >= BOT_LOOK_CODE_SEEK )
      {
        traversal = botData->botInfo.traversal;
        if ( (traversal & 1) != 0 )
          botData->botInfo.traversal = traversal & 0xFFFFFFFE;
      }
    }
  }
  else
  {
    botData->botInfo.lookAtTime = level.time - 1;
    botData->botInfo.lookAtType = BOT_LOOK_CODE_PATH;
    *((_QWORD *)&botData->scriptedAgentInfo + 3544) = 0i64;
    botData->botInfo.lookAtPoint.v[2] = 0.0;
  }
}

/*
==============
Bot_MakeBotData
==============
*/
void Bot_MakeBotData(bot_data_t *botData)
{
  if ( botData )
  {
    botData->botDataHeader = -17973521;
    botData->botDataFooter = -17973521;
  }
  else
  {
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1127, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
      __debugbreak();
    MEMORY[0] = -17973521;
    MEMORY[0x1FFE8] = -17973521;
  }
}

/*
==============
Bot_MatchDataSetting
==============
*/
bot_match_data_setting_t *Bot_MatchDataSetting(const char *settingName)
{
  int v1; 
  const char *v2; 
  const char *name; 
  __int64 v4; 
  bot_match_data_setting_t *v5; 
  __int64 v6; 
  int v7; 
  const char *v8; 
  int v9; 
  __int64 v10; 
  __int64 v11; 
  __int64 v12; 
  const char *v13; 
  signed __int64 v14; 
  int v15; 
  __int64 v16; 
  int v17; 
  int v18; 
  int v19; 

  v1 = 0;
  v2 = settingName;
  if ( !s_BotMatchDataSettingsInit )
  {
    name = s_BotMatchDataSettings[0].name;
    if ( s_BotMatchDataSettings[0].name )
    {
      v4 = 0i64;
      v5 = s_BotMatchDataSettings;
      v6 = 0i64;
      do
      {
        if ( !*name )
          break;
        if ( s_BotMatchDataSettings[v6].offset < 3212 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4868, ASSERT_TYPE_ASSERT, "( s_BotMatchDataSettings[i].offset >= ( static_cast< intptr_t >( ( __builtin_offsetof(bot_match_data_t,flags) ) ) ) )", (const char *)&queryFormat, "s_BotMatchDataSettings[i].offset >= BMD_OFS( flags )") )
          __debugbreak();
        if ( s_BotMatchDataSettings[v6].offset > 0xD58u && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4869, ASSERT_TYPE_ASSERT, "( s_BotMatchDataSettings[i].offset <= (sizeof(bot_match_data_t) - sizeof(float)) )", (const char *)&queryFormat, "s_BotMatchDataSettings[i].offset <= (sizeof(bot_match_data_t) - sizeof(float))") )
          __debugbreak();
        s_BotMatchDataSettings[v6].hash = StringTable_HashString(v5->name);
        v6 = ++v4;
        name = s_BotMatchDataSettings[v4].name;
        v5 = &s_BotMatchDataSettings[v4];
      }
      while ( name );
      v2 = settingName;
    }
    s_BotMatchDataSettingsInit = 1;
  }
  v7 = StringTable_HashString(v2);
  v8 = s_BotMatchDataSettings[0].name;
  v9 = v7;
  if ( s_BotMatchDataSettings[0].name )
  {
    v10 = 0i64;
    v11 = 0i64;
    while ( *v8 )
    {
      if ( s_BotMatchDataSettings[v11].hash == v9 )
      {
        v12 = 0x7FFFFFFFi64;
        v13 = v2;
        if ( !v8 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 212, ASSERT_TYPE_SANITY, "( s0 )", (const char *)&queryFormat, "s0") )
          __debugbreak();
        if ( !v2 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 213, ASSERT_TYPE_SANITY, "( s1 )", (const char *)&queryFormat, "s1") )
          __debugbreak();
        v14 = v8 - v2;
        do
        {
          v15 = (unsigned __int8)v13[v14];
          v16 = v12;
          v17 = *(unsigned __int8 *)v13++;
          --v12;
          if ( !v16 )
            break;
          if ( v15 != v17 )
          {
            v18 = v15 + 32;
            if ( (unsigned int)(v15 - 65) > 0x19 )
              v18 = v15;
            v15 = v18;
            v19 = v17 + 32;
            if ( (unsigned int)(v17 - 65) > 0x19 )
              v19 = v17;
            if ( v15 != v19 )
              goto LABEL_34;
          }
        }
        while ( v15 );
        return &s_BotMatchDataSettings[v1];
      }
LABEL_34:
      ++v10;
      ++v1;
      v11 = v10;
      v8 = s_BotMatchDataSettings[v10].name;
      if ( !v8 )
        return 0i64;
    }
  }
  return 0i64;
}

/*
==============
Bot_MemoryFindEvent
==============
*/
__int64 Bot_MemoryFindEvent(bot_data_t *botData, bot_mem_type_t type, __int16 entNum, const vec3_t *location1, int newestTime, int oldestTime)
{
  bot_mem_event_t *v10; 
  __int64 v12; 
  bot_mem_iterator_t memIt; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25059, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( (unsigned int)type >= BOT_MEM_TYPE_COUNT )
  {
    LODWORD(v12) = type;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25060, ASSERT_TYPE_ASSERT, "(unsigned)( type ) < (unsigned)( BOT_MEM_TYPE_COUNT )", "type doesn't index BOT_MEM_TYPE_COUNT\n\t%i not in [0, %i)", v12, 5) )
      __debugbreak();
  }
  memset_0(&memIt, -1, 0xF8ui64);
  memset_0(memIt.stopIndex, -1, sizeof(memIt.stopIndex));
  v10 = Bot_MemoryIterate(botData, newestTime, oldestTime, &memIt);
  if ( !v10 )
    return 0i64;
  while ( v10->type != type || v10->entNum != entNum || location1 && !VecNCompareCustomEpsilon(v10->location1.v, location1->v, 0.001, 3) )
  {
    v10 = Bot_MemoryIterate(botData, newestTime, oldestTime, &memIt);
    if ( !v10 )
      return 0i64;
  }
  return 1i64;
}

/*
==============
Bot_MemoryFlagAllNear
==============
*/
void Bot_MemoryFlagAllNear(bot_data_t *botData, int timeNewest, int timeOldest, int typeFlags, int locationNumber, const vec3_t *location, float radius, int flags)
{
  bot_mem_event_t *i; 
  float v13; 
  float v14; 
  float v15; 
  bot_mem_iterator_t memIt; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25309, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  memset_0(&memIt, -1, 0xF8ui64);
  memset_0(memIt.stopIndex, -1, sizeof(memIt.stopIndex));
  for ( i = Bot_MemoryIterate(botData, timeNewest, timeOldest, &memIt); i; i = Bot_MemoryIterate(botData, timeNewest, timeOldest, &memIt) )
  {
    if ( _bittest(&typeFlags, i->type) )
    {
      if ( locationNumber == 1 )
      {
        v13 = location->v[0] - i->location1.v[0];
        v14 = location->v[2] - i->location1.v[2];
        v15 = location->v[1] - i->location1.v[1];
        goto LABEL_10;
      }
      if ( locationNumber == 2 )
      {
        v13 = location->v[0] - i->location2.v[0];
        v14 = location->v[2] - i->location2.v[2];
        v15 = location->v[1] - i->location2.v[1];
LABEL_10:
        if ( (float)((float)((float)(v15 * v15) + (float)(v13 * v13)) + (float)(v14 * v14)) <= (float)(radius * radius) )
          i->flags |= flags;
      }
    }
  }
}

/*
==============
Bot_MemoryGetAllPositions
==============
*/
void Bot_MemoryGetAllPositions(bot_data_t *botData, int timeNewest, int timeOldest, int typeFlags, int locationNumber, vec3_t *positions, int numPositionsStart, int positionsSize, int *numResults, int flagsExclude)
{
  int v14; 
  bot_mem_event_t *v15; 
  __int64 v16; 
  float v17; 
  int v18; 
  unsigned __int64 timeOldesta; 
  bot_mem_iterator_t memIt; 

  timeOldesta = __PAIR64__(timeNewest, timeOldest);
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25338, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData", __PAIR64__(timeNewest, timeOldest)) )
    __debugbreak();
  if ( !positions && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25339, ASSERT_TYPE_ASSERT, "( positions )", (const char *)&queryFormat, "positions") )
    __debugbreak();
  if ( !numResults && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25340, ASSERT_TYPE_ASSERT, "( numResults )", (const char *)&queryFormat, "numResults") )
    __debugbreak();
  memset_0(&memIt, -1, 0xF8ui64);
  memset_0(memIt.stopIndex, -1, sizeof(memIt.stopIndex));
  v14 = *numResults;
  v15 = Bot_MemoryIterate(botData, timeNewest, timeOldest, &memIt);
  if ( v14 + numPositionsStart < positionsSize )
  {
    while ( 1 )
    {
      if ( !v15 )
        return;
      if ( _bittest(&typeFlags, v15->type) && ((unsigned __int8)flagsExclude & v15->flags) == 0 )
        break;
LABEL_20:
      v18 = *numResults;
      v15 = Bot_MemoryIterate(botData, SHIDWORD(timeOldesta), timeOldesta, &memIt);
      if ( v18 + numPositionsStart >= positionsSize )
        return;
    }
    if ( locationNumber == 1 )
    {
      v16 = numPositionsStart + *numResults;
      positions[v16].v[0] = v15->location1.v[0];
      positions[v16].v[1] = v15->location1.v[1];
      v17 = v15->location1.v[2];
    }
    else
    {
      if ( locationNumber != 2 )
      {
LABEL_19:
        ++*numResults;
        goto LABEL_20;
      }
      v16 = numPositionsStart + *numResults;
      positions[v16].v[0] = v15->location2.v[0];
      positions[v16].v[1] = v15->location2.v[1];
      v17 = v15->location2.v[2];
    }
    positions[v16].v[2] = v17;
    goto LABEL_19;
  }
}

/*
==============
Bot_MemoryGetMostRecentEvent
==============
*/
bot_mem_event_t *Bot_MemoryGetMostRecentEvent(bot_data_t *botData, int typeFlags, int flagsRequire, int flagsExclude)
{
  bot_mem_event_t *v8; 
  BOOL v9; 
  BOOL v10; 
  bot_mem_iterator_t memIt; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25373, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  memset_0(&memIt, -1, 0xF8ui64);
  memset_0(memIt.stopIndex, -1, sizeof(memIt.stopIndex));
  v8 = Bot_MemoryIterate(botData, level.time, 0, &memIt);
  if ( !v8 )
    return 0i64;
  while ( 1 )
  {
    if ( _bittest(&typeFlags, v8->type) )
    {
      v9 = !flagsRequire || (unsigned __int8)(flagsRequire & v8->flags) == flagsRequire;
      v10 = !flagsExclude || ((unsigned __int8)flagsExclude & v8->flags) == 0;
      if ( v9 && v10 )
        break;
    }
    v8 = Bot_MemoryIterate(botData, level.time, 0, &memIt);
    if ( !v8 )
      return 0i64;
  }
  return v8;
}

/*
==============
Bot_MemoryGetMostRecentPosition
==============
*/
__int64 Bot_MemoryGetMostRecentPosition(bot_data_t *botData, int typeFlags, int locationNumber, vec3_t *resultPos, int *resultTime)
{
  bot_mem_event_t *v9; 
  float v11; 
  bot_mem_iterator_t memIt; 

  if ( !botData )
  {
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25401, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
      __debugbreak();
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25373, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
      __debugbreak();
  }
  memset_0(&memIt, -1, 0xF8ui64);
  memset_0(memIt.stopIndex, -1, sizeof(memIt.stopIndex));
  v9 = Bot_MemoryIterate(botData, level.time, 0, &memIt);
  if ( !v9 )
    return 0i64;
  while ( !_bittest(&typeFlags, v9->type) )
  {
    v9 = Bot_MemoryIterate(botData, level.time, 0, &memIt);
    if ( !v9 )
      return 0i64;
  }
  if ( locationNumber == 1 )
  {
    resultPos->v[0] = v9->location1.v[0];
    resultPos->v[1] = v9->location1.v[1];
    v11 = v9->location1.v[2];
LABEL_14:
    resultPos->v[2] = v11;
    goto LABEL_15;
  }
  if ( locationNumber == 2 )
  {
    resultPos->v[0] = v9->location2.v[0];
    resultPos->v[1] = v9->location2.v[1];
    v11 = v9->location2.v[2];
    goto LABEL_14;
  }
LABEL_15:
  if ( resultTime )
    *resultTime = v9->time;
  return 1i64;
}

/*
==============
Bot_MemoryIterate
==============
*/
bot_mem_event_t *Bot_MemoryIterate(bot_data_t *botData, int timeNewest, int timeOldest, bot_mem_iterator_t *memIt)
{
  __int64 CharacterIndex; 
  char *v9; 
  char v10; 
  unsigned __int8 v11; 
  char v12; 
  char v13; 
  char v14; 
  int time; 
  __int64 v17; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25226, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !memIt && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25227, ASSERT_TYPE_ASSERT, "( memIt )", (const char *)&queryFormat, "memIt") )
    __debugbreak();
  CharacterIndex = Bot_GetCharacterIndex(botData);
  if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
    __debugbreak();
  if ( (unsigned int)CharacterIndex >= ComCharacterLimits::ms_gameData.m_characterCount )
  {
    if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
      __debugbreak();
    LODWORD(v17) = CharacterIndex;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25239, ASSERT_TYPE_ASSERT, "(unsigned)( charIndex ) < (unsigned)( ComCharacterLimits::GetCharacterMaxCount() )", "charIndex doesn't index ComCharacterLimits::GetCharacterMaxCount()\n\t%i not in [0, %i)", v17, ComCharacterLimits::ms_gameData.m_characterCount) )
      __debugbreak();
  }
  v9 = &memIt->index[CharacterIndex];
  if ( *v9 >= 0 )
  {
    v13 = *v9 - 1;
    *v9 = v13;
    if ( v13 < 0 )
    {
      *v9 = 31;
      goto LABEL_34;
    }
  }
  else
  {
    v10 = LOBYTE(botData->botMatchData.botMemory.eventNext) - 1;
    *v9 = v10;
    if ( v10 < 0 )
    {
      *v9 = 31;
      v10 = 31;
    }
    if ( timeNewest > 0 )
    {
      v11 = v10;
      while ( botData->botMatchData.botMemory.events[v11].time > timeNewest )
      {
        v10 = v11 - 1;
        *v9 = v11 - 1;
        if ( (char)(v11 - 1) == botData->botMatchData.botMemory.eventNext - 1 )
          goto LABEL_47;
        --v11;
        if ( v10 < 0 )
        {
          v11 = 31;
          *v9 = 31;
          v10 = 31;
        }
      }
    }
    v12 = v10 + 1;
    if ( (char)(v10 + 1) >= 32 )
      v12 = 0;
    v9[248] = v12;
    v13 = *v9;
  }
  if ( v13 < 0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25289, ASSERT_TYPE_ASSERT, "( *index >= 0 )", (const char *)&queryFormat, "*index >= 0") )
    __debugbreak();
  if ( *v9 >= 32 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25290, ASSERT_TYPE_ASSERT, "( *index < ( 32 ) )", (const char *)&queryFormat, "*index < BOT_MEM_MAX_EVENTS") )
    __debugbreak();
LABEL_34:
  if ( v9[248] < 0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25291, ASSERT_TYPE_ASSERT, "( *stopIndex >= 0 )", (const char *)&queryFormat, "*stopIndex >= 0") )
    __debugbreak();
  if ( v9[248] >= 32 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25292, ASSERT_TYPE_ASSERT, "( *stopIndex < ( 32 ) )", (const char *)&queryFormat, "*stopIndex < BOT_MEM_MAX_EVENTS") )
    __debugbreak();
  v14 = *v9;
  if ( *v9 != v9[248] )
  {
    time = botData->botMatchData.botMemory.events[(unsigned __int8)v14].time;
    if ( time )
    {
      if ( timeOldest <= 0 || time >= timeOldest )
        return Bot_MemoryReadEvent(botData, v14);
    }
  }
LABEL_47:
  *v9 = -1;
  return 0i64;
}

/*
==============
Bot_MemoryIterateInit
==============
*/
void Bot_MemoryIterateInit(bot_mem_iterator_t *memIt)
{
  if ( !memIt && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25104, ASSERT_TYPE_ASSERT, "( memIt )", (const char *)&queryFormat, "memIt") )
    __debugbreak();
  memset_0(memIt, -1, 0xF8ui64);
  memset_0(memIt->stopIndex, -1, sizeof(memIt->stopIndex));
}

/*
==============
Bot_MemoryIterateTeams
==============
*/
bot_mem_event_t *Bot_MemoryIterateTeams(bot_data_t *botData, const bitarray<224> *teamFlags, int timeNewest, int timeOldest, bot_mem_iterator_t *memIt)
{
  bitarray_base<bitarray<224> > *v7; 
  int v10; 
  __int64 i; 
  gentity_s *v12; 
  __int16 EntityIndex; 
  const SvClientMP *MpClient; 
  BOOL IsClientConnected; 
  bot_data_t *EntityData; 
  __int64 CharacterIndex; 
  char *v18; 
  char v19; 
  bot_mem_event_t *Event; 
  __int64 v21; 
  __int64 v22; 
  __int64 v23; 
  int time; 
  bot_data_t *botDataa; 
  bot_mem_event_t *v26; 

  time = 0;
  botDataa = NULL;
  v7 = (bitarray_base<bitarray<224> > *)teamFlags;
  v26 = NULL;
  if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
    __debugbreak();
  if ( (int)ComCharacterLimits::ms_gameData.m_characterCount > 2048 )
  {
    if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
      __debugbreak();
    LODWORD(v22) = ComCharacterLimits::ms_gameData.m_characterCount;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25132, ASSERT_TYPE_ASSERT, "( ComCharacterLimits::GetCharacterMaxCount() ) <= ( ( 2048 ) )", "ComCharacterLimits::GetCharacterMaxCount() <= MAX_GENTITIES\n\t%i, %i", v22, 2048) )
      __debugbreak();
  }
  if ( level.teammode == TEAMMODE_FFA )
  {
    if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25137, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
      __debugbreak();
    if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25138, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
      __debugbreak();
    if ( bitarray_base<bitarray<224>>::testBit(v7, botData->botInfo.sentient->eTeam) )
      return Bot_MemoryIterate(botData, timeNewest, timeOldest, memIt);
    else
      return 0i64;
  }
  v10 = 0;
  for ( i = 0i64; ; ++i )
  {
    if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
      __debugbreak();
    if ( v10 >= (int)ComCharacterLimits::ms_gameData.m_characterCount )
      break;
    v12 = &level.gentities[i];
    if ( !&level.gentities[i] )
      goto LABEL_64;
    EntityIndex = G_GetEntityIndex(&level.gentities[i]);
    if ( !G_IsEntityInUse(EntityIndex) || !v12->sentient )
      goto LABEL_64;
    if ( v12->client )
    {
      MpClient = SV_Client_GetMpClient(v12->s.number);
      IsClientConnected = Bot_IsClientConnected(MpClient);
    }
    else
    {
      if ( !v12->agent )
        goto LABEL_33;
      IsClientConnected = v12->s.eType == ET_AGENT;
    }
    if ( !IsClientConnected )
      goto LABEL_64;
LABEL_33:
    if ( SV_BotIsBotEnt(v12) )
    {
      if ( !v12->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25159, ASSERT_TYPE_ASSERT, "( ent->sentient )", (const char *)&queryFormat, "ent->sentient") )
        __debugbreak();
      if ( bitarray_base<bitarray<224>>::testBit(v7, v12->sentient->eTeam) )
      {
        EntityData = Bot_GetEntityData(v12);
        if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25163, ASSERT_TYPE_ASSERT, "( otherBotData )", (const char *)&queryFormat, "otherBotData") )
          __debugbreak();
        CharacterIndex = Bot_GetCharacterIndex(EntityData);
        if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
          __debugbreak();
        if ( (unsigned int)CharacterIndex >= ComCharacterLimits::ms_gameData.m_characterCount )
        {
          if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
            __debugbreak();
          LODWORD(v23) = ComCharacterLimits::ms_gameData.m_characterCount;
          LODWORD(v22) = CharacterIndex;
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25165, ASSERT_TYPE_ASSERT, "(unsigned)( charIndex ) < (unsigned)( ComCharacterLimits::GetCharacterMaxCount() )", "charIndex doesn't index ComCharacterLimits::GetCharacterMaxCount()\n\t%i not in [0, %i)", v22, v23) )
            __debugbreak();
        }
        v18 = &memIt->index[CharacterIndex];
        v19 = *v18;
        if ( *v18 == -2 )
          goto LABEL_63;
        if ( v19 == -1 )
        {
          Bot_MemoryIterate(EntityData, timeNewest, timeOldest, memIt);
          v19 = *v18;
        }
        if ( v19 < 0 )
        {
LABEL_62:
          *v18 = -2;
LABEL_63:
          v7 = (bitarray_base<bitarray<224> > *)teamFlags;
          goto LABEL_64;
        }
        Event = Bot_MemoryReadEvent(EntityData, v19);
        if ( !Event )
          goto LABEL_63;
        while ( (Event->flags & 8) != 0 && botData != EntityData )
        {
          Bot_MemoryIterate(EntityData, timeNewest, timeOldest, memIt);
          if ( *v18 < 0 )
            goto LABEL_62;
          Event = Bot_MemoryReadEvent(EntityData, *v18);
          if ( !Event )
            goto LABEL_63;
        }
        v7 = (bitarray_base<bitarray<224> > *)teamFlags;
        if ( Event->time >= time )
        {
          botDataa = EntityData;
          time = Event->time;
          v26 = Event;
        }
      }
    }
LABEL_64:
    ++v10;
  }
  if ( botDataa )
  {
    v21 = Bot_GetCharacterIndex(botDataa);
    if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
      __debugbreak();
    if ( (unsigned int)v21 >= ComCharacterLimits::ms_gameData.m_characterCount )
    {
      if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
        __debugbreak();
      LODWORD(v23) = ComCharacterLimits::ms_gameData.m_characterCount;
      LODWORD(v22) = v21;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25208, ASSERT_TYPE_ASSERT, "(unsigned)( charIndex ) < (unsigned)( ComCharacterLimits::GetCharacterMaxCount() )", "charIndex doesn't index ComCharacterLimits::GetCharacterMaxCount()\n\t%i not in [0, %i)", v22, v23) )
        __debugbreak();
    }
    Bot_MemoryIterate(botDataa, timeNewest, timeOldest, memIt);
    if ( memIt->index[v21] < 0 )
      memIt->index[v21] = -2;
  }
  return v26;
}

/*
==============
Bot_MemoryReadEvent
==============
*/
bot_mem_event_t *Bot_MemoryReadEvent(bot_data_t *botData, const int index)
{
  __int64 v2; 
  __int64 v5; 

  v2 = index;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25092, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( (unsigned int)v2 >= 0x20 )
  {
    LODWORD(v5) = v2;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25093, ASSERT_TYPE_ASSERT, "(unsigned)( index ) < (unsigned)( ( 32 ) )", "index doesn't index BOT_MEM_MAX_EVENTS\n\t%i not in [0, %i)", v5, 32) )
      __debugbreak();
  }
  return (bot_mem_event_t *)((char *)&botData->botMatchData.botMemory + 100 * v2);
}

/*
==============
Bot_MemoryUpdateEntityEvent
==============
*/
void Bot_MemoryUpdateEntityEvent(bot_data_t *botData, bot_mem_type_t type, __int16 entNum, int locationNum, int newestTime, int oldestTime)
{
  gentity_s *v10; 
  bot_mem_event_t *i; 
  __int64 v12; 
  bot_mem_iterator_t memIt; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25023, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( (unsigned int)type >= BOT_MEM_TYPE_COUNT )
  {
    LODWORD(v12) = type;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25024, ASSERT_TYPE_ASSERT, "(unsigned)( type ) < (unsigned)( BOT_MEM_TYPE_COUNT )", "type doesn't index BOT_MEM_TYPE_COUNT\n\t%i not in [0, %i)", v12, 5) )
      __debugbreak();
  }
  if ( (unsigned int)(locationNum - 1) > 1 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25025, ASSERT_TYPE_ASSERT, "( (locationNum == 1) || (locationNum == 2) )", (const char *)&queryFormat, "(locationNum == 1) || (locationNum == 2)") )
    __debugbreak();
  v10 = &g_entities[entNum];
  if ( !v10 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25032, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  memset_0(&memIt, -1, 0xF8ui64);
  memset_0(memIt.stopIndex, -1, sizeof(memIt.stopIndex));
  for ( i = Bot_MemoryIterate(botData, newestTime, oldestTime, &memIt); i; i = Bot_MemoryIterate(botData, newestTime, oldestTime, &memIt) )
  {
    if ( i->type == type && i->entNum == entNum )
    {
      if ( locationNum == 1 )
      {
        i->location1.v[0] = v10->r.currentOrigin.v[0];
        i->location1.v[1] = v10->r.currentOrigin.v[1];
        i->location1.v[2] = v10->r.currentOrigin.v[2];
      }
      else if ( locationNum == 2 )
      {
        i->location2.v[0] = v10->r.currentOrigin.v[0];
        i->location2.v[1] = v10->r.currentOrigin.v[1];
        i->location2.v[2] = v10->r.currentOrigin.v[2];
      }
    }
  }
}

/*
==============
Bot_MemoryWriteEvent
==============
*/
void Bot_MemoryWriteEvent(bot_data_t *botData, bot_mem_type_t type, const Weapon *weapon, const vec3_t *location1, const vec3_t *location2, __int16 entNum)
{
  float v10; 
  __int64 eventNext; 
  vec3_t *p_location1; 
  bot_mem_type_t v13; 
  gentity_s *v14; 
  sentient_s *sentient; 
  signed __int64 v16; 
  const pathnode_t *v17; 
  const playerState_s *EntityPlayerStateConst; 
  __int64 v19; 
  __int64 v20; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24946, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( (unsigned int)type >= BOT_MEM_TYPE_COUNT )
  {
    LODWORD(v19) = type;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24947, ASSERT_TYPE_ASSERT, "(unsigned)( type ) < (unsigned)( BOT_MEM_TYPE_COUNT )", "type doesn't index BOT_MEM_TYPE_COUNT\n\t%i not in [0, %i)", v19, 5) )
      __debugbreak();
  }
  v10 = location1->v[0];
  if ( type == BOT_MEM_KNOWN_ENEMY )
  {
    if ( v10 >= 3.4028235e38 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24952, ASSERT_TYPE_ASSERT, "( location1[0] < 3.402823466e+38F )", (const char *)&queryFormat, "location1[0] < FLT_MAX") )
      __debugbreak();
    if ( location1->v[0] == 0.0 && location1->v[1] == 0.0 && location1->v[2] == 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24953, ASSERT_TYPE_ASSERT, "( Vec3NotZero( location1 ) )", (const char *)&queryFormat, "Vec3NotZero( location1 )") )
LABEL_29:
      __debugbreak();
  }
  else
  {
    if ( (v10 >= 3.4028235e38 || location2->v[0] >= 3.4028235e38) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24957, ASSERT_TYPE_ASSERT, "( (location1[0] < 3.402823466e+38F) && (location2[0] < 3.402823466e+38F) )", (const char *)&queryFormat, "(location1[0] < FLT_MAX) && (location2[0] < FLT_MAX)") )
      __debugbreak();
    if ( location1->v[0] == 0.0 && location1->v[1] == 0.0 && location1->v[2] == 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24958, ASSERT_TYPE_ASSERT, "( Vec3NotZero( location1 ) )", (const char *)&queryFormat, "Vec3NotZero( location1 )") )
      __debugbreak();
    if ( location2->v[0] == 0.0 && location2->v[1] == 0.0 && location2->v[2] == 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24959, ASSERT_TYPE_ASSERT, "( Vec3NotZero( location2 ) )", (const char *)&queryFormat, "Vec3NotZero( location2 )") )
      goto LABEL_29;
  }
  eventNext = botData->botMatchData.botMemory.eventNext;
  memset_0(&botData->botMatchData.botMemory.events[eventNext].time, 0, 0x60ui64);
  botData->botMatchData.botMemory.events[eventNext].type = type;
  p_location1 = &botData->botMatchData.botMemory.events[eventNext].location1;
  botData->botMatchData.botMemory.events[eventNext].time = level.time;
  *(__m256i *)&botData->botMatchData.botMemory.events[eventNext].weapon.weaponIdx = *(__m256i *)&weapon->weaponIdx;
  *(_OWORD *)&botData->botMatchData.botMemory.events[eventNext].weapon.attachmentVariationIndices[5] = *(_OWORD *)&weapon->attachmentVariationIndices[5];
  *(double *)&botData->botMatchData.botMemory.events[eventNext].weapon.attachmentVariationIndices[21] = *(double *)&weapon->attachmentVariationIndices[21];
  *(_DWORD *)&botData->botMatchData.botMemory.events[eventNext].weapon.weaponCamo = *(_DWORD *)&weapon->weaponCamo;
  botData->botMatchData.botMemory.events[eventNext].entNum = entNum;
  p_location1->v[0] = location1->v[0];
  p_location1->v[1] = location1->v[1];
  p_location1->v[2] = location1->v[2];
  botData->botMatchData.botMemory.events[eventNext].location2 = *location2;
  v13 = botData->botMatchData.botMemory.events[eventNext].type;
  if ( v13 == BOT_MEM_KNOWN_ENEMY )
  {
    Bot_AIKnownEnemiesRadial(&botData->botInfo, p_location1, 300.0, 0xFu);
    v13 = botData->botMatchData.botMemory.events[eventNext].type;
  }
  if ( v13 == BOT_MEM_DEATH && entNum >= 0 && entNum < level.num_entities )
  {
    if ( G_IsEntityInUse(entNum) )
    {
      v14 = &level.gentities[entNum];
      if ( v14 )
      {
        sentient = v14->sentient;
        if ( sentient )
        {
          v16 = sentient - level.sentients;
          if ( !s_botSentientHistory && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1969, ASSERT_TYPE_ASSERT, "( s_botSentientHistory )", (const char *)&queryFormat, "s_botSentientHistory") )
            __debugbreak();
          if ( (unsigned int)v16 >= level.maxSentients )
          {
            LODWORD(v20) = level.maxSentients;
            LODWORD(v19) = v16;
            if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1970, ASSERT_TYPE_ASSERT, "(unsigned)( sentientIndex ) < (unsigned)( level.maxSentients )", "sentientIndex doesn't index level.maxSentients\n\t%i not in [0, %i)", v19, v20) )
              __debugbreak();
          }
          if ( level.time - s_botSentientHistory[v16].lastTimeMovedPositions > 5000 )
          {
            v17 = Sentient_NearestNode(v14->sentient);
            botData->botMatchData.botMemory.events[eventNext].flags |= 1u;
            botData->botMatchData.botMemory.events[eventNext].nodeIndex = -1;
            if ( v17 )
              botData->botMatchData.botMemory.events[eventNext].nodeIndex = Path_ConvertNodeToIndex(v17);
          }
        }
        EntityPlayerStateConst = G_GetEntityPlayerStateConst(v14);
        if ( EntityPlayerStateConst && BG_HasPerk(&EntityPlayerStateConst->perks, 0x30u) )
          botData->botMatchData.botMemory.events[eventNext].flags |= 8u;
      }
    }
  }
  botData->botMatchData.botMemory.eventNext = (botData->botMatchData.botMemory.eventNext + 1) % 32;
}

/*
==============
Bot_NameSet
==============
*/
void Bot_NameSet(bot_data_t *botData, const char *name, const char *debugPersonalityTag)
{
  gentity_s *ent; 
  int number; 
  gclient_s *client; 
  __int64 v9; 
  __int64 v10; 
  __int64 v11; 
  const char *v12; 
  const char *v13; 
  bot_difficulty_t Difficulty; 
  __int64 v15; 
  __int64 v16; 
  char dest[36]; 
  char v18[40]; 
  char buffer[8]; 
  char v20[8]; 

  if ( !name && !debugPersonalityTag && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3506, ASSERT_TYPE_ASSERT, "( name || debugPersonalityTag )", (const char *)&queryFormat, "name || debugPersonalityTag") )
    __debugbreak();
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3508, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3509, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !botData->botInfo.ent->client && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3510, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent->client )", (const char *)&queryFormat, "botData->botInfo.ent->client") )
    __debugbreak();
  if ( botData->botInfo.ent->s.number >= SvClient::ms_clientCount )
  {
    LODWORD(v15) = botData->botInfo.ent->s.number;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3511, ASSERT_TYPE_ASSERT, "(unsigned)( botData->botInfo.ent->s.number ) < (unsigned)( SvClient::GetClientCount() )", "botData->botInfo.ent->s.number doesn't index SvClient::GetClientCount()\n\t%i not in [0, %i)", v15, SvClient::ms_clientCount) )
      __debugbreak();
  }
  ent = botData->botInfo.ent;
  number = ent->s.number;
  client = ent->client;
  SV_ClientMP_GetUserinfo(number, buffer, 1024);
  if ( !Info_Validate(buffer) )
  {
    strcpy(v20, "dinfo");
    *(double *)buffer = *(double *)"\\name\\badinfo";
  }
  if ( name )
    Core_strcpy(dest, 0x24ui64, name);
  if ( debugPersonalityTag )
  {
    v9 = -1i64;
    v10 = -1i64;
    do
      ++v10;
    while ( debugPersonalityTag[v10] );
    if ( (_DWORD)v10 != 3 )
    {
      v11 = -1i64;
      do
        ++v11;
      while ( debugPersonalityTag[v11] );
      LODWORD(v16) = 3;
      LODWORD(v15) = v11;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3533, ASSERT_TYPE_ASSERT, "( I_strlen( debugPersonalityTag ) ) == ( BOT_NAME_SUFFIX_PERSONALITY_LENGTH )", "I_strlen( debugPersonalityTag ) == BOT_NAME_SUFFIX_PERSONALITY_LENGTH\n\t%i, %i", v15, v16) )
        __debugbreak();
    }
    if ( name )
    {
      v12 = name;
    }
    else
    {
      v13 = Info_ValueForKey(buffer, (const char *)&stru_143C9A1A4);
      if ( !v13 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3452, ASSERT_TYPE_ASSERT, "( originalName )", (const char *)&queryFormat, "originalName") )
        __debugbreak();
      do
        ++v9;
      while ( v13[v9] );
      if ( Bot_HasDebugSuffixInName(v13) )
        LODWORD(v9) = v9 - 7;
      if ( (int)v9 + 1 > 36 )
      {
        LODWORD(v16) = 36;
        LODWORD(v15) = v9 + 1;
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3462, ASSERT_TYPE_ASSERT, "( nameSize + 1 ) <= ( 36 )", "nameSize + 1 <= MAX_PLAYERNAME_LENGTH\n\t%i, %i", v15, v16) )
          __debugbreak();
      }
      Core_strncpy(v18, 0x24ui64, v13, (int)v9);
      v12 = v18;
    }
    Com_sprintf<36>((char (*)[36])dest, "%s [%s", v12, debugPersonalityTag);
    Difficulty = Bot_GetDifficulty(botData);
    Com_sprintf<36>((char (*)[36])dest, "%s%i]", dest, (unsigned int)Difficulty);
  }
  if ( dest[0] )
  {
    Info_RemoveKey(buffer, (const char *)&stru_143C9A1A4);
    Info_SetValueForKey(buffer, (const char *)&stru_143C9A1A4, dest);
    Core_strcpy(client->sess.cs.name, 0x24ui64, dest);
    Core_strcpy(client->sess.newnetname, 0x24ui64, dest);
  }
  SV_ClientMP_SetUserinfo(number, buffer);
}

/*
==============
Bot_NavPathExists
==============
*/
_BOOL8 Bot_NavPathExists(const bot_info_t *botInfo)
{
  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13968, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  return Nav_HasPath(botInfo->pNavigator);
}

/*
==============
Bot_NearbyBotExists
==============
*/
_BOOL8 Bot_NearbyBotExists(bot_data_t *botData, const float maxDist, int onlySameTeam)
{
  bool v6; 
  const bitarray<224> *AllCombatTeamFlags; 
  double v8; 
  unsigned int v9; 
  unsigned int v10; 
  unsigned int v11; 
  double v12; 
  __int128 v13; 
  const bitarray<224> *AllTeamFlags; 
  gentity_s *ent; 
  gentity_s *results; 
  bitarray<224> result; 
  bitarray<224> teamFlags; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23808, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23809, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( onlySameTeam )
  {
    if ( level.teammode == TEAMMODE_FFA )
    {
      v6 = Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80);
      if ( Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) )
        AllCombatTeamFlags = Com_TeamsSP_GetAllCombatTeamFlags();
      else
        AllCombatTeamFlags = Com_TeamsMP_GetAllTeamFlags();
      v8 = *(double *)&AllCombatTeamFlags->array[4];
      v9 = AllCombatTeamFlags->array[6] & 0xFFEFFFFF;
      *(_OWORD *)result.array = *(_OWORD *)AllCombatTeamFlags->array;
      v10 = result.array[0];
      *(double *)&result.array[4] = v8;
      if ( v6 )
        v10 = result.array[0] & 0xF7FFFFFF;
      v11 = v9 & 0xFF9FFFFF;
    }
    else
    {
      Com_Teams_GetEnemyTeamFlags(&result, botData->botInfo.ent->sentient->eTeam);
      v11 = result.array[6];
      v10 = result.array[0];
    }
    result.array[1] = ~result.array[1];
    result.array[2] = ~result.array[2];
    result.array[3] = ~result.array[3];
    *(_QWORD *)&result.array[4] = ~*(_QWORD *)&result.array[4];
    v12 = *(double *)&result.array[4];
    result.array[0] = ~v10;
    v13 = *(_OWORD *)result.array;
    teamFlags.array[6] = ~v11;
  }
  else
  {
    if ( Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) )
      AllTeamFlags = Com_TeamsSP_GetAllTeamFlags();
    else
      AllTeamFlags = Com_TeamsMP_GetAllTeamFlags();
    v13 = *(_OWORD *)AllTeamFlags->array;
    v12 = *(double *)&AllTeamFlags->array[4];
    teamFlags.array[6] = AllTeamFlags->array[6];
  }
  ent = botData->botInfo.ent;
  *(double *)&teamFlags.array[4] = v12;
  *(_OWORD *)teamFlags.array = v13;
  return Bot_GetClosestCharacterList(ent, &ent->r.currentOrigin, maxDist, 1, 0, 1, 0, &teamFlags, &results, 1) > 0;
}

/*
==============
Bot_NeedsTraversalJump
==============
*/
_BOOL8 Bot_NeedsTraversalJump(const bot_data_t *botData, const usercmd_s *cmd)
{
  int traversal; 
  pathnode_t *v4; 
  pathnode_t *v5; 
  int v6; 
  __int64 v8; 
  __int64 v9; 
  __int64 v10; 
  vec3_t v11; 
  vec3_t pos; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15610, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  traversal = botData->botInfo.traversal;
  if ( (traversal & 0x1F) == 0 || (traversal & 0xE) == 0 && level.time > botData->botInfo.traverseJumpTime )
    return 0i64;
  v4 = NULL;
  if ( Path_NodeValid(botData->botInfo.nodeNegotStart) )
    v5 = Path_ConvertIndexToNode(botData->botInfo.nodeNegotStart);
  else
    v5 = NULL;
  if ( Path_NodeValid(botData->botInfo.nodeNegotEnd) )
    v4 = Path_ConvertIndexToNode(botData->botInfo.nodeNegotEnd);
  if ( !v5 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15617, ASSERT_TYPE_ASSERT, "(negotiationStartNode)", "%s\n\tNo traversal start node.  botInfo->traversal = %i, botInfo->nodeNegotStart = %i, botInfo->traverseJumpTime = %i", "negotiationStartNode", botData->botInfo.traversal, botData->botInfo.nodeNegotStart, botData->botInfo.traverseJumpTime) )
    __debugbreak();
  if ( !v4 )
  {
    LODWORD(v10) = botData->botInfo.traverseJumpTime;
    LODWORD(v9) = botData->botInfo.nodeNegotEnd;
    LODWORD(v8) = botData->botInfo.traversal;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15617, ASSERT_TYPE_ASSERT, "(negotiationEndNode)", "%s\n\tNo traversal end node.  botInfo->traversal = %i, botInfo->nodeNegotEnd = %i, botInfo->traverseJumpTime = %i", "negotiationEndNode", v8, v9, v10) )
      __debugbreak();
  }
  pathnode_t::GetPos(v5, &pos);
  pathnode_t::GetPos(v4, &v11);
  if ( level.time <= botData->botInfo.traverseJumpTime )
    return 1i64;
  v6 = botData->botInfo.traversal;
  return (v6 & 4) != 0 || (v6 & 8) != 0 || (float)(v11.v[2] - pos.v[2]) > -5.0;
}

/*
==============
Bot_NegotiationGetType
==============
*/
__int64 Bot_NegotiationGetType(const pathnode_t *negotiationNode)
{
  unsigned int v2; 
  __int64 v3; 
  char v4; 
  __int64 v6; 

  if ( !negotiationNode && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3663, ASSERT_TYPE_ASSERT, "( negotiationNode )", (const char *)&queryFormat, "negotiationNode") )
    __debugbreak();
  if ( !Path_IsNodeTraversalBegin(negotiationNode) )
    return 0i64;
  v2 = Path_ConvertNodeToIndex(negotiationNode);
  v3 = v2 >> 1;
  v4 = 4 * (v2 & 1);
  if ( (unsigned int)v3 >= (unsigned int)s_botTraversalTypesCount )
  {
    LODWORD(v6) = v3;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3675, ASSERT_TYPE_ASSERT, "(unsigned)( byteIndex ) < (unsigned)( s_botTraversalTypesCount )", "byteIndex doesn't index s_botTraversalTypesCount\n\t%i not in [0, %i)", v6, s_botTraversalTypesCount) )
      __debugbreak();
  }
  return (unsigned int)(1 << (((15 << v4) & s_botTraversalTypes[v3]) >> v4));
}

/*
==============
Bot_NegotiationPointReached
==============
*/
__int64 Bot_NegotiationPointReached(bot_data_t *botData, bot_traversal_stage_t stage, usercmd_s *cmd)
{
  __int128 v3; 
  __int128 v4; 
  __int128 v5; 
  int v8; 
  pathnode_t *NegotiationStartNode; 
  pathnode_t *NegotiationEndNode; 
  bool v11; 
  float v12; 
  float v13; 
  float v14; 
  bool v16; 
  gentity_s *ent; 
  float v18; 
  float v19; 
  float v20; 
  float v21; 
  playerState_s *playerState; 
  float v23; 
  float v24; 
  float v25; 
  BOOL v26; 
  int traversal; 
  float v28; 
  float v29; 
  __int128 v30; 
  BOOL v34; 
  int v35; 
  unsigned int v36; 
  int v37; 
  int v38; 
  int v39; 
  int traverseJumpTime; 
  int v41; 
  int v42; 
  int v43; 
  gentity_s *v44; 
  float v45; 
  float v46; 
  float v47; 
  float v48; 
  BOOL v49; 
  gentity_s *v50; 
  int scriptPress; 
  const dvar_t *v52; 
  int traverseAvoidTime; 
  int v54; 
  char *string; 
  __int64 v56; 
  __int64 v57; 
  unsigned int v58; 
  int v59; 
  vec3_t v61; 
  vec3_t pos; 
  __int128 v63; 
  __int128 v64; 
  __int128 v65; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15313, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15316, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  v8 = botData->botInfo.traversal & 8;
  v59 = v8;
  if ( (botData->botInfo.traversal & 0x1F) != 0 )
  {
    if ( Path_NodeValid(botData->botInfo.nodeNegotStart) )
      NegotiationStartNode = Path_ConvertIndexToNode(botData->botInfo.nodeNegotStart);
    else
      NegotiationStartNode = NULL;
    if ( Path_NodeValid(botData->botInfo.nodeNegotEnd) )
      NegotiationEndNode = Path_ConvertIndexToNode(botData->botInfo.nodeNegotEnd);
    else
      NegotiationEndNode = NULL;
    if ( !NegotiationStartNode && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15330, ASSERT_TYPE_ASSERT, "(negotiationStartNode)", "%s\n\tNo traversal start node.  botInfo->traversal = %i, botInfo->nodeNegotStart = %i, botInfo->traverseJumpTime = %i", "negotiationStartNode", botData->botInfo.traversal, botData->botInfo.nodeNegotStart, botData->botInfo.traverseJumpTime) )
      __debugbreak();
    if ( !NegotiationEndNode )
    {
      LODWORD(v57) = botData->botInfo.traverseJumpTime;
      LODWORD(v56) = botData->botInfo.nodeNegotEnd;
      LODWORD(string) = botData->botInfo.traversal;
      v11 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15332, ASSERT_TYPE_ASSERT, "(negotiationEndNode)", "%s\n\tNo traversal end node.  botInfo->traversal = %i, botInfo->nodeNegotEnd = %i, botInfo->traverseJumpTime = %i", "negotiationEndNode", string, v56, v57);
      goto LABEL_30;
    }
  }
  else
  {
    if ( !botData->botInfo.pNavigator && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15336, ASSERT_TYPE_ASSERT, "( Bot_HasNavigator( botInfo ) )", (const char *)&queryFormat, "Bot_HasNavigator( botInfo )") )
      __debugbreak();
    if ( !Bot_PathHasNegotiation(&botData->botInfo) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15337, ASSERT_TYPE_ASSERT, "( Bot_PathHasNegotiation( botInfo ) )", (const char *)&queryFormat, "Bot_PathHasNegotiation( botInfo )") )
      __debugbreak();
    NegotiationStartNode = Bot_PathGetNegotiationStartNode(&botData->botInfo);
    if ( !NegotiationStartNode && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15339, ASSERT_TYPE_ASSERT, "( negotiationStartNode )", (const char *)&queryFormat, "negotiationStartNode") )
      __debugbreak();
    NegotiationEndNode = Bot_PathGetNegotiationEndNode(&botData->botInfo);
    if ( !NegotiationEndNode )
    {
      v11 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15341, ASSERT_TYPE_ASSERT, "( negotiationEndNode )", (const char *)&queryFormat, "negotiationEndNode");
LABEL_30:
      if ( v11 )
        __debugbreak();
    }
  }
  if ( !NegotiationStartNode && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15344, ASSERT_TYPE_ASSERT, "( negotiationStartNode )", (const char *)&queryFormat, "negotiationStartNode") )
    __debugbreak();
  if ( !NegotiationEndNode && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15345, ASSERT_TYPE_ASSERT, "( negotiationEndNode )", (const char *)&queryFormat, "negotiationEndNode") )
    __debugbreak();
  pathnode_t::GetPos(NegotiationStartNode, &pos);
  pathnode_t::GetPos(NegotiationEndNode, &v61);
  if ( stage == BOT_TRAVERSAL_STAGE_BETWEEN_START_AND_END_NODE )
  {
    v12 = v61.v[0];
    v13 = v61.v[1];
    v14 = v61.v[2];
    if ( v8 && (botData->botInfo.playerState->mantleState.flags & 8) != 0 )
      return 1i64;
  }
  else if ( stage )
  {
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15373, ASSERT_TYPE_ASSERT, (const char *)&queryFormat.fmt + 3, "unreachable") )
      __debugbreak();
    v14 = 0.0;
    v13 = 0.0;
    v12 = 0.0;
  }
  else
  {
    v12 = pos.v[0];
    v13 = pos.v[1];
    v14 = pos.v[2];
  }
  v16 = botData->botInfo.playerState == NULL;
  ent = botData->botInfo.ent;
  v65 = v3;
  v64 = v4;
  v18 = v12 - ent->r.currentOrigin.v[0];
  v19 = v13 - ent->r.currentOrigin.v[1];
  v21 = v14 - ent->r.currentOrigin.v[2];
  v20 = v21;
  v63 = v5;
  if ( v16 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15377, ASSERT_TYPE_ASSERT, "( botInfo->playerState )", (const char *)&queryFormat, "botInfo->playerState") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  v23 = (float)((float)(playerState->velocity.v[1] * playerState->velocity.v[1]) + (float)(playerState->velocity.v[0] * playerState->velocity.v[0])) + (float)(playerState->velocity.v[2] * playerState->velocity.v[2]);
  v25 = (float)((float)(v18 * v18) + (float)(v19 * v19)) + (float)(v21 * v21);
  v24 = (float)((float)(v18 * v18) + (float)(v19 * v19)) + (float)(v20 * v20);
  if ( !level.frameDuration && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_level_locals.h", 349, ASSERT_TYPE_ASSERT, "(level.frameDuration)", "%s\n\tAccessing frame duration before it's been set", "level.frameDuration") )
    __debugbreak();
  v26 = v25 <= 400.0 || v24 <= (float)((float)((float)((float)((float)(level.frameDuration * level.frameDuration) * 0.000001) * 2.0) * v23) + 0.000001);
  traversal = botData->botInfo.traversal;
  if ( ((traversal & 0x1F) != 0 || stage == BOT_TRAVERSAL_STAGE_BETWEEN_START_AND_END_NODE) && (v30 = LODWORD(v61.v[1]), v28 = v61.v[1] - pos.v[1], v29 = v61.v[0] - pos.v[0], *(float *)&v30 = (float)(v28 * v28) + (float)(v29 * v29), *(float *)&v30 > 0.0099999998) )
  {
    *(float *)&v30 = fsqrt(*(float *)&v30);
    _XMM6 = v30;
    __asm
    {
      vcmpless xmm0, xmm6, cs:__real@80000000
      vblendvps xmm0, xmm6, xmm1, xmm0
    }
    v34 = (float)((float)((float)(botData->botInfo.ent->r.currentOrigin.v[1] - pos.v[1]) * (float)(v28 * (float)(1.0 / *(float *)&_XMM0))) + (float)((float)(botData->botInfo.ent->r.currentOrigin.v[0] - pos.v[0]) * (float)(v29 * (float)(1.0 / *(float *)&_XMM0)))) > *(float *)&v30;
  }
  else
  {
    v34 = 0;
  }
  if ( v26 || (v58 = 0, v34) )
    v58 = 1;
  if ( !cmd->forwardmove && !cmd->rightmove && !v8 )
    botData->botInfo.traverseProgressTime = level.time;
  if ( !v58 && (traversal & 0x1F) != 0 )
  {
    v35 = traversal & 1;
    v36 = ((unsigned int)botData->botInfo.flags >> 5) & 1;
    v37 = Bot_IsOnGround(botData);
    v38 = botData->botInfo.traversal & 0x4800;
    if ( GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 5u) && (LOBYTE(botData->scriptedAgentInfo.scriptGoal.pos.y) & 0x10) != 0 )
      botData->botInfo.traverseProgressJumps = 0;
    v39 = v59;
    if ( !v59 && v37 && v36 && !v38 )
    {
      if ( !Jump_InJumpDebounce(botData->botInfo.playerState, cmd) )
      {
        botData->botInfo.scriptPress |= 8u;
        traverseJumpTime = level.time + 500;
        if ( botData->botInfo.traverseJumpTime > level.time + 500 )
          traverseJumpTime = botData->botInfo.traverseJumpTime;
        ++botData->botInfo.traverseProgressJumps;
        botData->botInfo.traverseJumpTime = traverseJumpTime;
      }
      v39 = 0;
    }
    v41 = 0;
    v42 = level.time - botData->botInfo.traverseProgressTime;
    if ( !v35 )
      LOBYTE(v41) = level.time - botData->botInfo.traverseStartTime > 4000;
    v43 = 500;
    if ( (botData->botInfo.traversal & 0x800) != 0 || v39 )
      v43 = 1000;
    if ( v42 > v43 || v41 )
    {
      v44 = botData->botInfo.ent;
      v45 = v44->r.currentOrigin.v[0] - botData->botInfo.traverseProgressLoc.v[0];
      v46 = v44->r.currentOrigin.v[1] - botData->botInfo.traverseProgressLoc.v[1];
      v48 = (float)(v46 * v46) + (float)(v45 * v45);
      if ( v35 )
      {
        v47 = v44->r.currentOrigin.v[2] - botData->botInfo.traverseProgressLoc.v[2];
        v48 = (float)(v47 * v47) + v48;
      }
      v49 = !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 5u) && v48 < 100.0 && (botData->botInfo.traversal & 0x400) == 0;
      if ( botData->botInfo.traverseProgressJumps >= 2 || v41 || v49 )
      {
        if ( !v59 && v36 && v37 && (botData->botInfo.traversal & 0x4000) == 0 && !Jump_InJumpDebounce(botData->botInfo.playerState, cmd) )
        {
          scriptPress = botData->botInfo.scriptPress;
          if ( (scriptPress & 8) == 0 )
            ++botData->botInfo.traverseProgressJumps;
          botData->botInfo.traversal |= 0x4000u;
          botData->botInfo.scriptPress = scriptPress | 8;
        }
        if ( (v42 > 1000 || v41) && !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 5u) && (v37 || v35) )
        {
          v52 = DVARINT_bot_DrawBrokenTraversals;
          if ( !DVARINT_bot_DrawBrokenTraversals && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawBrokenTraversals") )
            __debugbreak();
          Dvar_CheckFrontendServerThread(v52);
          if ( v52->current.integer > 0 && (LOBYTE(botData->scriptedAgentInfo.blackboard.m_ShootParams.m_Pos.v[0]) & 0x40) == 0 && (botData->botInfo.traversal & 0x1000) == 0 )
            Bot_DebugAddErrorLocation(botData, BOT_ERROR_LOC_TRAVERSAL, 16.0, &botData->botInfo.ent->r.currentOrigin, NULL, NULL, NULL);
          traverseAvoidTime = botData->botInfo.traverseAvoidTime;
          botData->botInfo.flags |= 0x80000u;
          v54 = level.time + 10000;
          if ( traverseAvoidTime > level.time + 10000 )
            v54 = traverseAvoidTime;
          botData->botInfo.traverseAvoidTime = v54;
          Bot_TraversalClear(&botData->botInfo);
          if ( (botData->botInfo.flags & 0x100000) != 0 )
          {
            Bot_BadPath(botData->botInfo.ent);
          }
          else
          {
            botData->botInfo.pNavigator->ClearPath(botData->botInfo.pNavigator);
            botData->botInfo.flags |= 0x100000u;
          }
        }
      }
      else
      {
        v50 = botData->botInfo.ent;
        botData->botInfo.traverseProgressLoc.v[0] = v50->r.currentOrigin.v[0];
        botData->botInfo.traverseProgressLoc.v[1] = v50->r.currentOrigin.v[1];
        botData->botInfo.traverseProgressLoc.v[2] = v50->r.currentOrigin.v[2];
        botData->botInfo.traverseProgressTime = level.time;
      }
    }
  }
  return v58;
}

/*
==============
Bot_NotifyBadPathOnOwnerCollide
==============
*/
void Bot_NotifyBadPathOnOwnerCollide(bot_data_t *botData)
{
  gentity_s *v2; 
  gentity_s *ent; 
  float v6; 
  __int128 v7; 
  __int128 v8; 
  float v9; 
  float v13; 
  gentity_s *v16; 
  float v17; 
  float v18; 
  playerState_s *playerState; 
  const playerState_s *EntityPlayerStateConst; 
  float v21; 
  __int128 v22; 
  float v23; 
  __int128 v24; 
  gentity_s *v25; 
  float v29; 
  __int128 v30; 
  float v31; 
  float v32; 
  float v33; 
  vec3_t forward; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10111, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10122, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  if ( EntHandle::isDefined(&botData->botInfo.ent->r.ownerNum) && level.time - botData->botInfo.lastBadPath > 1000 )
  {
    v2 = EntHandle::ent(&botData->botInfo.ent->r.ownerNum);
    if ( !v2 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10127, ASSERT_TYPE_ASSERT, "( botOwner )", (const char *)&queryFormat, "botOwner") )
      __debugbreak();
    _XMM12 = LODWORD(FLOAT_1_0);
    if ( Bot_CanSeeAndCanFireOnEnemy(botData) )
    {
      *(float *)&_XMM7 = FLOAT_0_44999999;
    }
    else
    {
      ent = botData->botInfo.ent;
      v6 = v2->r.currentOrigin.v[0] - ent->r.currentOrigin.v[0];
      v8 = LODWORD(v2->r.currentOrigin.v[1]);
      *(float *)&v8 = v2->r.currentOrigin.v[1] - ent->r.currentOrigin.v[1];
      v7 = v8;
      v9 = v2->r.currentOrigin.v[2] - ent->r.currentOrigin.v[2];
      *(float *)&v8 = fsqrt((float)((float)(*(float *)&v8 * *(float *)&v8) + (float)(v6 * v6)) + (float)(v9 * v9));
      _XMM1 = v8;
      __asm
      {
        vcmpless xmm0, xmm1, cs:__real@80000000
        vblendvps xmm0, xmm1, xmm12, xmm0
      }
      *((_QWORD *)&v8 + 1) = *((_QWORD *)&v7 + 1);
      *(float *)&v8 = *(float *)&v7 * (float)(1.0 / *(float *)&_XMM0);
      v13 = v9 * (float)(1.0 / *(float *)&_XMM0);
      AngleVectors(&ent->r.currentAngles, &forward, NULL, NULL);
      *(double *)&v8 = (float)((float)((float)(*(float *)&v8 * forward.v[1]) + (float)((float)(v6 * (float)(1.0 / *(float *)&_XMM0)) * forward.v[0])) + (float)(v13 * forward.v[2]));
      _XMM3 = v8;
      __asm
      {
        vcmpltsd xmm2, xmm3, cs:__real@bfdccccccccccccd
        vblendvps xmm7, xmm12, xmm0, xmm2
      }
    }
    v16 = botData->botInfo.ent;
    if ( !v2 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10086, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
      __debugbreak();
    if ( COERCE_FLOAT(COERCE_UNSIGNED_INT(v2->r.currentOrigin.v[2] - v16->r.currentOrigin.v[2]) & _xmm) <= (float)(v2->r.box.halfSize.v[2] * 2.0) )
    {
      v17 = v16->r.currentOrigin.v[1] - v2->r.currentOrigin.v[1];
      v18 = v16->r.currentOrigin.v[0] - v2->r.currentOrigin.v[0];
      if ( (float)((float)(v17 * v17) + (float)(v18 * v18)) < (float)((float)((float)((float)(v2->r.box.halfSize.v[0] * 16.0) * *(float *)&_XMM7) * v2->r.box.halfSize.v[0]) * *(float *)&_XMM7) )
      {
        playerState = botData->botInfo.playerState;
        if ( (float)((float)((float)(playerState->velocity.v[0] * playerState->velocity.v[0]) + (float)(playerState->velocity.v[1] * playerState->velocity.v[1])) + (float)(playerState->velocity.v[2] * playerState->velocity.v[2])) < 100.0 )
        {
          EntityPlayerStateConst = G_GetEntityPlayerStateConst(v2);
          if ( EntityPlayerStateConst )
          {
            v21 = EntityPlayerStateConst->velocity.v[1];
            v22 = LODWORD(EntityPlayerStateConst->velocity.v[0]);
            v24 = v22;
            v23 = EntityPlayerStateConst->velocity.v[2];
            *(float *)&v24 = (float)((float)(*(float *)&v22 * *(float *)&v22) + (float)(v21 * v21)) + (float)(v23 * v23);
            if ( *(float *)&v24 > 100.0 )
            {
              v25 = botData->botInfo.ent;
              *(float *)&v24 = fsqrt(*(float *)&v24);
              _XMM1 = v24;
              __asm
              {
                vcmpless xmm0, xmm1, cs:__real@80000000
                vblendvps xmm0, xmm1, xmm12, xmm0
              }
              v30 = LODWORD(v25->r.currentOrigin.v[1]);
              v29 = v25->r.currentOrigin.v[1] - v2->r.currentOrigin.v[1];
              v31 = 1.0 / *(float *)&_XMM0;
              v32 = v25->r.currentOrigin.v[0] - v2->r.currentOrigin.v[0];
              v33 = v25->r.currentOrigin.v[2] - v2->r.currentOrigin.v[2];
              *(float *)&v30 = fsqrt((float)((float)(v29 * v29) + (float)(v32 * v32)) + (float)(v33 * v33));
              _XMM1 = v30;
              __asm
              {
                vcmpless xmm0, xmm1, cs:__real@80000000
                vblendvps xmm0, xmm1, xmm12, xmm0
              }
              if ( (float)((float)((float)((float)((float)(1.0 / *(float *)&_XMM0) * v29) * (float)(v31 * v21)) + (float)((float)((float)(1.0 / *(float *)&_XMM0) * v32) * (float)(v31 * *(float *)&v22))) + (float)((float)((float)(1.0 / *(float *)&_XMM0) * v33) * (float)(v23 * v31))) > 0.5 )
                Bot_BadPath(v25);
            }
          }
        }
      }
    }
  }
}

/*
==============
Bot_PathClear
==============
*/
void Bot_PathClear(bot_info_t *botInfo)
{
  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4337, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  if ( Nav_HasPath(botInfo->pNavigator) )
    Nav_ClearGoalPos(botInfo->pNavigator);
}

/*
==============
Bot_PathExists
==============
*/
int Bot_PathExists(const bot_info_t *botInfo)
{
  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13725, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  return Bot_NavPathExists(botInfo);
}

/*
==============
Bot_PathGetNegotiationEndNode
==============
*/
pathnode_t *Bot_PathGetNegotiationEndNode(const bot_info_t *botInfo)
{
  pathnode_t *EndNodeFromLink; 
  const char *v3; 
  vec3_t outStartPos; 
  nav_posAlongPathResults_t pResults; 

  bfx::AreaHandle::AreaHandle(&pResults.m_hArea);
  bfx::LinkHandle::LinkHandle(&pResults.m_hLink);
  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13701, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  Nav_GetPosAlongPath(botInfo->pNavigator, 256.0, 1, &pResults);
  if ( pResults.m_PosType != POS_ON_LINK && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13704, ASSERT_TYPE_ASSERT, "( results.m_PosType == bfx::POS_ON_LINK )", (const char *)&queryFormat, "results.m_PosType == bfx::POS_ON_LINK") )
    __debugbreak();
  if ( !bfx::LinkHandle::IsValid(&pResults.m_hLink) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13705, ASSERT_TYPE_ASSERT, "( results.m_hLink.IsValid() )", (const char *)&queryFormat, "results.m_hLink.IsValid()") )
    __debugbreak();
  EndNodeFromLink = Nav_GetEndNodeFromLink(&pResults.m_hLink);
  Nav_GetStartPosFromLink(&pResults.m_hLink, &outStartPos);
  if ( !EndNodeFromLink )
  {
    v3 = vtos(&outStartPos);
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13713, ASSERT_TYPE_ASSERT, "(negotEndNode)", "%s\n\tNo negotiation end node found for link ending at location %s", "negotEndNode", v3) )
      __debugbreak();
  }
  bfx::LinkHandle::~LinkHandle(&pResults.m_hLink);
  bfx::AreaHandle::~AreaHandle(&pResults.m_hArea);
  return EndNodeFromLink;
}

/*
==============
Bot_PathGetNegotiationStartNode
==============
*/
pathnode_t *Bot_PathGetNegotiationStartNode(const bot_info_t *botInfo)
{
  pathnode_t *StartNodeFromLink; 
  const char *v3; 
  vec3_t outStartPos; 
  nav_posAlongPathResults_t pResults; 

  bfx::AreaHandle::AreaHandle(&pResults.m_hArea);
  bfx::LinkHandle::LinkHandle(&pResults.m_hLink);
  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13674, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  Nav_GetPosAlongPath(botInfo->pNavigator, 256.0, 1, &pResults);
  if ( pResults.m_PosType != POS_ON_LINK && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13677, ASSERT_TYPE_ASSERT, "( results.m_PosType == bfx::POS_ON_LINK )", (const char *)&queryFormat, "results.m_PosType == bfx::POS_ON_LINK") )
    __debugbreak();
  if ( !bfx::LinkHandle::IsValid(&pResults.m_hLink) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13678, ASSERT_TYPE_ASSERT, "( results.m_hLink.IsValid() )", (const char *)&queryFormat, "results.m_hLink.IsValid()") )
    __debugbreak();
  StartNodeFromLink = Nav_GetStartNodeFromLink(&pResults.m_hLink);
  Nav_GetStartPosFromLink(&pResults.m_hLink, &outStartPos);
  if ( !StartNodeFromLink )
  {
    v3 = vtos(&outStartPos);
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13686, ASSERT_TYPE_ASSERT, "(negotStartNode)", "%s\n\tNo negotiation begin node found for link starting at location %s", "negotStartNode", v3) )
      __debugbreak();
  }
  bfx::LinkHandle::~LinkHandle(&pResults.m_hLink);
  bfx::AreaHandle::~AreaHandle(&pResults.m_hArea);
  return StartNodeFromLink;
}

/*
==============
Bot_PathHasNegotiation
==============
*/
char Bot_PathHasNegotiation(const bot_info_t *botInfo)
{
  nav_posAlongPathResults_t pResults; 

  if ( !botInfo )
  {
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13648, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo", -2i64) )
      __debugbreak();
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13922, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
      __debugbreak();
  }
  if ( !botInfo->pNavigator && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13650, ASSERT_TYPE_ASSERT, "( Bot_HasNavigator( botInfo ) )", (const char *)&queryFormat, "Bot_HasNavigator( botInfo )") )
    __debugbreak();
  if ( Bot_NavPathExists(botInfo) )
  {
    if ( !botInfo->pNavigator && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13653, ASSERT_TYPE_ASSERT, "( botInfo->pNavigator )", (const char *)&queryFormat, "botInfo->pNavigator") )
      __debugbreak();
    bfx::AreaHandle::AreaHandle(&pResults.m_hArea);
    bfx::LinkHandle::LinkHandle(&pResults.m_hLink);
    Nav_GetPosAlongPath(botInfo->pNavigator, 256.0, 1, &pResults);
    if ( pResults.m_PosType == POS_ON_LINK )
    {
      bfx::LinkHandle::~LinkHandle(&pResults.m_hLink);
      bfx::AreaHandle::~AreaHandle(&pResults.m_hArea);
      return 1;
    }
    bfx::LinkHandle::~LinkHandle(&pResults.m_hLink);
    bfx::AreaHandle::~AreaHandle(&pResults.m_hArea);
  }
  return 0;
}

/*
==============
Bot_PathStuckRecover
==============
*/
__int64 Bot_PathStuckRecover(bot_data_t *botData)
{
  unsigned int PathToGoalInternal; 
  int v3; 
  vec3_t goal; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10550, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  PathToGoalInternal = 0;
  if ( !Bot_IsOnGround(botData) || !Bot_StuckShouldReact(&botData->botInfo) )
    return 0i64;
  v3 = Bot_PathExists(&botData->botInfo);
  if ( !Bot_IsStuckReacting(&botData->botInfo) )
  {
    if ( v3 )
    {
      if ( !Bot_IsAtPathEnd(botData, 0.0) )
      {
        Bot_GetActiveGoal(botData, &goal);
        PathToGoalInternal = Bot_GetPathToGoalInternal(botData, &goal, botData->botInfo.activeGoal.radius, "stuck");
        if ( PathToGoalInternal )
          botData->botInfo.lastPathCalcTime = level.time - 750;
      }
    }
  }
  if ( botData == (bot_data_t *)-8i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7797, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  if ( botData->botInfo.stuckFrames >= 0xFu )
    Bot_BadPath(botData->botInfo.ent);
  return PathToGoalInternal;
}

/*
==============
Bot_PersonalityFromString
==============
*/
__int64 Bot_PersonalityFromString(const char *botPersonalityString)
{
  const char *v2; 
  unsigned int v3; 
  __int64 v4; 
  __int64 v5; 
  const char *v6; 
  signed __int64 v7; 
  int v8; 
  __int64 v9; 
  int v10; 
  int v11; 
  int v12; 

  if ( !botPersonalityString && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4752, ASSERT_TYPE_ASSERT, "( botPersonalityString )", (const char *)&queryFormat, "botPersonalityString") )
    __debugbreak();
  v2 = BOT_STR_TBL_PERSONALITY[0];
  v3 = 0;
  if ( !BOT_STR_TBL_PERSONALITY[0] )
    return 3i64;
  v4 = 0i64;
  do
  {
    if ( !*v2 )
      break;
    v5 = 0x7FFFFFFFi64;
    v6 = botPersonalityString;
    if ( !v2 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 212, ASSERT_TYPE_SANITY, "( s0 )", (const char *)&queryFormat, "s0") )
      __debugbreak();
    if ( !botPersonalityString && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 213, ASSERT_TYPE_SANITY, "( s1 )", (const char *)&queryFormat, "s1") )
      __debugbreak();
    v7 = v2 - botPersonalityString;
    while ( 1 )
    {
      v8 = (unsigned __int8)v6[v7];
      v9 = v5;
      v10 = *(unsigned __int8 *)v6++;
      --v5;
      if ( !v9 )
        return v3;
      if ( v8 != v10 )
      {
        v11 = v8 + 32;
        if ( (unsigned int)(v8 - 65) > 0x19 )
          v11 = v8;
        v8 = v11;
        v12 = v10 + 32;
        if ( (unsigned int)(v10 - 65) > 0x19 )
          v12 = v10;
        if ( v8 != v12 )
          break;
      }
      if ( !v8 )
        return v3;
    }
    v2 = BOT_STR_TBL_PERSONALITY[++v4];
    ++v3;
  }
  while ( v2 );
  return 3i64;
}

/*
==============
Bot_PointInGoal
==============
*/
_BOOL8 Bot_PointInGoal(const bot_data_t *botData, float goalRadius, const vec3_t *point)
{
  float radius; 
  $3396140AF3A78F7FCD1D73807E505015 *v6; 
  _BOOL8 result; 
  vec3_t outFinalGoal; 

  radius = goalRadius;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14663, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v6 = &botData->8;
  if ( goalRadius == 0.0 )
    radius = v6->botInfo.activeGoal.radius;
  if ( !v6 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13725, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  result = 0;
  if ( Bot_NavPathExists(&v6->botInfo) )
  {
    Bot_GetPathFinalGoal(&v6->botInfo, &outFinalGoal);
    if ( (float)((float)((float)((float)(outFinalGoal.v[1] - point->v[1]) * (float)(outFinalGoal.v[1] - point->v[1])) + (float)((float)(outFinalGoal.v[0] - point->v[0]) * (float)(outFinalGoal.v[0] - point->v[0]))) + (float)((float)(outFinalGoal.v[2] - point->v[2]) * (float)(outFinalGoal.v[2] - point->v[2]))) < (float)(radius * radius) )
      return 1;
  }
  return result;
}

/*
==============
Bot_PortableRadarPing
==============
*/
void Bot_PortableRadarPing(bot_info_t *botInfo)
{
  unsigned int v2; 
  __int16 *v3; 
  __int16 v4; 
  gentity_s *GEntity; 
  gentity_s *v6; 
  gclient_s *client; 
  GameModeFlagContainer<enum EntityStateFlagsCommon,enum EntityStateFlagsSP,enum EntityStateFlagsMP,32> *p_eFlags; 
  __int16 number; 
  const dvar_t *v10; 
  __int64 v11; 
  __int64 v12; 

  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6221, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  v2 = 0;
  v3 = s_botEntAffecters;
  do
  {
    v4 = *v3;
    if ( *v3 != 2047 )
    {
      if ( (unsigned __int16)v4 >= 0x800u )
      {
        LODWORD(v12) = 2048;
        LODWORD(v11) = v4;
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6114, ASSERT_TYPE_ASSERT, "(unsigned)( affecterEntNum ) < (unsigned)( ( 2048 ) )", "affecterEntNum doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v11, v12) )
          __debugbreak();
      }
      if ( G_IsEntityInUse(v4) )
      {
        GEntity = G_GetGEntity(v4);
        v6 = GEntity;
        if ( GEntity )
        {
          client = GEntity->client;
          p_eFlags = &client->ps.eFlags;
          if ( !client )
            p_eFlags = &GEntity->s.lerp.eFlags;
          if ( GameModeFlagValues::ms_mpValue != ACTIVE && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_gamemode_flags.h", 190, ASSERT_TYPE_ASSERT, "(IsFlagActive( index ))", "%s\n\tThis function must be used in a MP-only context", "IsFlagActive( index )") )
            __debugbreak();
          if ( GameModeFlagContainer<enum EntityStateFlagsCommon,enum EntityStateFlagsSP,enum EntityStateFlagsMP,32>::TestFlagInternal(p_eFlags, ACTIVE, 0x15u) )
          {
            if ( v6->client )
              number = v6->s.number;
            else
              number = v6->s.otherEntityNum;
            if ( (unsigned int)number >= 0x800 )
            {
              LODWORD(v12) = 2048;
              LODWORD(v11) = number;
              if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 207, ASSERT_TYPE_ASSERT, "(unsigned)( entityIndex ) < (unsigned)( ( 2048 ) )", "entityIndex doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v11, v12) )
                __debugbreak();
            }
            if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 208, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
              __debugbreak();
            if ( g_entities[number].r.isInUse != g_entityIsInUse[number] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 209, ASSERT_TYPE_ASSERT, "( g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex] )", (const char *)&queryFormat, "g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex]") )
              __debugbreak();
            if ( g_entityIsInUse[number] )
            {
              if ( (unsigned __int16)number >= 0x800u )
              {
                LODWORD(v12) = 2048;
                LODWORD(v11) = number;
                if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6237, ASSERT_TYPE_ASSERT, "(unsigned)( ownerEntNum ) < (unsigned)( ( 2048 ) )", "ownerEntNum doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v11, v12) )
                  __debugbreak();
              }
              if ( number == 2047 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6238, ASSERT_TYPE_ASSERT, "( ownerEntNum != ENTITYNUM_NONE )", (const char *)&queryFormat, "ownerEntNum != ENTITYNUM_NONE") )
                __debugbreak();
              if ( botInfo->ent->s.number == number )
              {
                v10 = DCONST_DVARFLT_bg_compassPortableRadarRadius;
                if ( !DCONST_DVARFLT_bg_compassPortableRadarRadius && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 720, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bg_compassPortableRadarRadius") )
                  __debugbreak();
                Dvar_CheckFrontendServerThread(v10);
                Bot_AIKnownEnemiesRadial(botInfo, &v6->r.currentOrigin, v10->current.value, 0x1Au);
              }
            }
          }
        }
      }
    }
    ++v2;
    ++v3;
  }
  while ( v2 < 0x40 );
}

/*
==============
Bot_PredictEnemyCampSpots
==============
*/
__int64 Bot_PredictEnemyCampSpots(bot_data_t *botData, int humanOnly, vec3_t *spots, int maxCount)
{
  signed __int64 v4; 
  void *v5; 
  unsigned int v10; 
  signed int v11; 
  bool v12; 
  const bitarray<224> *AllCombatTeamFlags; 
  double v14; 
  unsigned int v15; 
  unsigned int v16; 
  unsigned int v17; 
  __int64 v18; 
  _DWORD *v19; 
  bot_mem_event_t *v20; 
  bot_mem_event_t *v21; 
  unsigned __int8 flags; 
  __int16 entNum; 
  int v24; 
  const gentity_s *v25; 
  __int64 v26; 
  float *v27; 
  float v28; 
  float v29; 
  __int64 v30; 
  int v31; 
  __int64 v32; 
  float *v33; 
  vec3_t *v34; 
  __int64 v35; 
  float *v36; 
  float *v37; 
  int v38; 
  __int64 v40; 
  bitarray<224> result; 
  bot_mem_iterator_t memIt; 
  int v45[402]; 
  _DWORD v46[598]; 

  v5 = alloca(v4);
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6740, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6741, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
    __debugbreak();
  if ( !spots && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6742, ASSERT_TYPE_ASSERT, "( spots )", (const char *)&queryFormat, "spots") )
    __debugbreak();
  if ( maxCount <= 0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6743, ASSERT_TYPE_ASSERT, "( maxCount > 0 )", (const char *)&queryFormat, "maxCount > 0") )
    __debugbreak();
  memset_0(&memIt, -1, 0xF8ui64);
  memset_0(memIt.stopIndex, -1, sizeof(memIt.stopIndex));
  v10 = 0;
  v11 = 0;
  if ( level.teammode == TEAMMODE_FFA )
  {
    v12 = Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80);
    if ( Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) )
      AllCombatTeamFlags = Com_TeamsSP_GetAllCombatTeamFlags();
    else
      AllCombatTeamFlags = Com_TeamsMP_GetAllTeamFlags();
    v14 = *(double *)&AllCombatTeamFlags->array[4];
    v15 = AllCombatTeamFlags->array[6] & 0xFFEFFFFF;
    *(_OWORD *)result.array = *(_OWORD *)AllCombatTeamFlags->array;
    v16 = result.array[0];
    *(double *)&result.array[4] = v14;
    if ( v12 )
      v16 = result.array[0] & 0xF7FFFFFF;
    v17 = v15 & 0xFF9FFFFF;
  }
  else
  {
    Com_Teams_GetEnemyTeamFlags(&result, botData->botInfo.sentient->eTeam);
    v17 = result.array[6];
    v16 = result.array[0];
  }
  result.array[1] = ~result.array[1];
  result.array[2] = ~result.array[2];
  result.array[3] = ~result.array[3];
  result.array[4] = ~result.array[4];
  result.array[5] = ~result.array[5];
  result.array[0] = ~v16;
  result.array[6] = ~v17;
  if ( (unsigned __int64)(int)SvClient::ms_clientCount > 0xC8 )
  {
    LODWORD(v40) = SvClient::ms_clientCount;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6751, ASSERT_TYPE_ASSERT, "( SvClient::GetClientCount() ) <= ( ( sizeof( *array_counter( potentialSpots ) ) + 0 ) )", "SvClient::GetClientCount() <= ARRAY_COUNT( potentialSpots )\n\t%i, %i", v40, 200) )
      __debugbreak();
  }
  v18 = 0i64;
  v19 = v46;
  while ( 1 )
  {
    v20 = Bot_MemoryIterateTeams(botData, &result, level.time, level.time - 30000, &memIt);
    v21 = v20;
    if ( !v20 )
      break;
    flags = v20->flags;
    if ( (flags & 2) == 0 && (flags & 1) != 0 )
    {
      entNum = v21->entNum;
      if ( entNum < 0 || (v24 = 1, entNum >= level.num_entities) )
        v24 = 0;
      if ( v21->type == BOT_MEM_DEATH )
      {
        if ( v24 )
        {
          v25 = &level.gentities[entNum];
          if ( !humanOnly || !SV_BotIsBotEnt(v25) )
          {
            v26 = 0i64;
            if ( v18 <= 0 )
            {
LABEL_40:
              if ( v11 < (int)SvClient::ms_clientCount )
              {
                ++v11;
                *(v19 - 2) = LODWORD(v21->location1.v[0]);
                *(v19 - 1) = LODWORD(v21->location1.v[1]);
                *v19 = LODWORD(v21->location1.v[2]);
                v45[v18 + 200] = v21->entNum;
                v45[v18++] = 1;
                v19 += 3;
              }
            }
            else
            {
              v27 = (float *)v46;
              while ( 1 )
              {
                if ( v45[v26 + 200] == v21->entNum )
                {
                  v28 = v21->location1.v[0] - *(v27 - 2);
                  v29 = v21->location1.v[1] - *(v27 - 1);
                  if ( (float)((float)((float)(v29 * v29) + (float)(v28 * v28)) + (float)((float)(v21->location1.v[2] - *v27) * (float)(v21->location1.v[2] - *v27))) < 90000.0 )
                    break;
                }
                ++v26;
                v27 += 3;
                if ( v26 >= v18 )
                  goto LABEL_40;
              }
              ++v45[v26];
            }
          }
        }
      }
    }
  }
  v30 = 0i64;
  if ( v18 < 4 )
  {
    v31 = maxCount;
  }
  else
  {
    v31 = maxCount;
    v32 = 0i64;
    v33 = (float *)v46;
    v34 = spots;
    do
    {
      if ( v45[v30] >= 2 && v32 < maxCount )
      {
        ++v10;
        v34->v[0] = *(v33 - 2);
        ++v32;
        v34->v[1] = *(v33 - 1);
        v34->v[2] = *v33;
        ++v34;
      }
      if ( v45[v30 + 1] >= 2 && v32 < maxCount )
      {
        ++v10;
        v34->v[0] = v33[1];
        ++v32;
        v34->v[1] = v33[2];
        v34->v[2] = v33[3];
        ++v34;
      }
      if ( v45[v30 + 2] >= 2 && v32 < maxCount )
      {
        ++v10;
        v34->v[0] = v33[4];
        ++v32;
        v34->v[1] = v33[5];
        v34->v[2] = v33[6];
        ++v34;
      }
      if ( v45[v30 + 3] >= 2 && v32 < maxCount )
      {
        ++v10;
        v34->v[0] = v33[7];
        ++v32;
        v34->v[1] = v33[8];
        v34->v[2] = v33[9];
        ++v34;
      }
      v30 += 4i64;
      v33 += 12;
    }
    while ( v30 < v18 - 3 );
  }
  if ( v30 < v18 )
  {
    v35 = (int)v10;
    v36 = &spots[v10].v[2];
    v37 = (float *)&v46[3 * v30];
    do
    {
      if ( v45[v30] >= 2 && v35 < v31 )
      {
        ++v10;
        v38 = *((_DWORD *)v37 - 2);
        ++v35;
        *(v36 - 1) = *(v37 - 1);
        *v36 = *v37;
        *((_DWORD *)v36 - 2) = v38;
        v36 += 3;
      }
      ++v30;
      v37 += 3;
    }
    while ( v30 < v18 );
  }
  return v10;
}

/*
==============
Bot_PredictPosition
==============
*/
void Bot_PredictPosition(const gentity_s *ent, const bot_data_t *botData, const vec3_t *startPos, vec3_t *vPos)
{
  playerState_s *playerState; 
  float v8; 
  float v9; 
  int v10; 
  float v11; 
  float v12; 
  __int64 v13; 
  float v14; 
  trajectory_t_secure tr; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17991, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17992, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState )", (const char *)&queryFormat, "botData->botInfo.playerState") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17995, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  v8 = startPos->v[1];
  v9 = startPos->v[2];
  v14 = startPos->v[0];
  v10 = LODWORD(startPos->v[0]) & 0x7F800000;
  tr.trBase.v[0] = startPos->v[0];
  tr.trBase.v[1] = v8;
  tr.trBase.v[2] = v9;
  if ( v10 == 2139095040 || (v14 = v8, (LODWORD(v8) & 0x7F800000) == 2139095040) || (v14 = v9, (LODWORD(v9) & 0x7F800000) == 2139095040) )
  {
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18000, ASSERT_TYPE_SANITY, "( !IS_NAN( ( tr.trBase )[0] ) && !IS_NAN( ( tr.trBase )[1] ) && !IS_NAN( ( tr.trBase )[2] ) )", (const char *)&queryFormat, "!IS_NAN( ( tr.trBase )[0] ) && !IS_NAN( ( tr.trBase )[1] ) && !IS_NAN( ( tr.trBase )[2] )", v14) )
      __debugbreak();
  }
  tr.trDelta.v[0] = playerState->velocity.v[0];
  v11 = playerState->velocity.v[1];
  *(float *)&v13 = tr.trDelta.v[0];
  tr.trDelta.v[1] = v11;
  v12 = playerState->velocity.v[2];
  tr.trDelta.v[2] = v12;
  if ( (LODWORD(tr.trDelta.v[0]) & 0x7F800000) == 2139095040 || (*(float *)&v13 = v11, (LODWORD(v11) & 0x7F800000) == 2139095040) || (*(float *)&v13 = v12, (LODWORD(v12) & 0x7F800000) == 2139095040) )
  {
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18003, ASSERT_TYPE_SANITY, "( !IS_NAN( ( tr.trDelta )[0] ) && !IS_NAN( ( tr.trDelta )[1] ) && !IS_NAN( ( tr.trDelta )[2] ) )", (const char *)&queryFormat, "!IS_NAN( ( tr.trDelta )[0] ) && !IS_NAN( ( tr.trDelta )[1] ) && !IS_NAN( ( tr.trDelta )[2] )", v13) )
      __debugbreak();
  }
  *(_QWORD *)&tr.trType = 2i64;
  if ( !level.frameDuration && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_level_locals.h", 349, ASSERT_TYPE_ASSERT, "(level.frameDuration)", "%s\n\tAccessing frame duration before it's been set", "level.frameDuration") )
    __debugbreak();
  BgTrajectory::LegacyEvaluateTrajectory(&tr, 2 * level.frameDuration, vPos);
}

/*
==============
Bot_PredictSeeNode
==============
*/
bool Bot_PredictSeeNode(const bot_info_t *botInfo, const pathnode_t *node, vec3_t *predictedOriginOut)
{
  const pathnode_t *v6; 
  int v7; 
  const pathnode_t *v8; 
  pathlink_s *Links; 
  bool v10; 
  __int64 v11; 
  unsigned __int16 *p_nodeNum; 
  pathnode_t *v13; 

  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24834, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  if ( !botInfo->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24835, ASSERT_TYPE_ASSERT, "( botInfo->sentient )", (const char *)&queryFormat, "botInfo->sentient") )
    __debugbreak();
  v6 = Sentient_NearestNode(botInfo->sentient);
  v7 = 0;
  v8 = v6;
  if ( !node || !v6 )
    goto LABEL_19;
  v7 = Path_NodesVisibleNoPeek(v6, node);
  if ( v7 && predictedOriginOut )
    pathnode_t::GetPos((pathnode_t *)node, predictedOriginOut);
  Links = node->constant.Links;
  v10 = v7 == 0;
  if ( !v7 )
  {
    v11 = node->dynamic.wLinkCount - 1;
    p_nodeNum = &Links[v11].nodeNum;
    do
    {
      if ( v11 < 0 )
        break;
      v13 = Path_ConvertIndexToNode(*p_nodeNum);
      v7 = Path_NodesVisibleNoPeek(v8, v13);
      if ( v7 && predictedOriginOut )
        pathnode_t::GetPos(v13, predictedOriginOut);
      --v11;
      p_nodeNum -= 6;
    }
    while ( !v7 );
LABEL_19:
    v10 = v7 == 0;
  }
  return !v10;
}

/*
==============
Bot_PredictSeePointUsingNode
==============
*/
bool Bot_PredictSeePointUsingNode(const bot_info_t *botInfo, const vec3_t *point, const pathnode_t *nearestNodeToPoint, vec3_t *predictedPointOut)
{
  const pathnode_t *v8; 
  const pathnode_t *v9; 
  int v10; 
  const pathnode_t *v11; 
  pathlink_s *Links; 
  bool v13; 
  __int64 v14; 
  unsigned __int16 *p_nodeNum; 
  pathnode_t *v16; 

  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24869, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  if ( !botInfo->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24870, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  if ( nearestNodeToPoint || (v8 = Path_NearestNode(point, botInfo->ent->clipmask, NULL), (nearestNodeToPoint = v8) != NULL) )
  {
    if ( !botInfo->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24835, ASSERT_TYPE_ASSERT, "( botInfo->sentient )", (const char *)&queryFormat, "botInfo->sentient") )
      __debugbreak();
    v9 = Sentient_NearestNode(botInfo->sentient);
    v10 = 0;
    v11 = v9;
    if ( v9 )
    {
      v10 = Path_NodesVisibleNoPeek(v9, nearestNodeToPoint);
      if ( v10 && predictedPointOut )
        pathnode_t::GetPos((pathnode_t *)nearestNodeToPoint, predictedPointOut);
      Links = nearestNodeToPoint->constant.Links;
      v13 = v10 == 0;
      if ( v10 )
        goto LABEL_24;
      v14 = nearestNodeToPoint->dynamic.wLinkCount - 1;
      p_nodeNum = &Links[v14].nodeNum;
      do
      {
        if ( v14 < 0 )
          break;
        v16 = Path_ConvertIndexToNode(*p_nodeNum);
        v10 = Path_NodesVisibleNoPeek(v11, v16);
        if ( v10 && predictedPointOut )
          pathnode_t::GetPos(v16, predictedPointOut);
        --v14;
        p_nodeNum -= 6;
      }
      while ( !v10 );
    }
    v13 = v10 == 0;
LABEL_24:
    LOBYTE(v8) = !v13;
  }
  return (char)v8;
}

/*
==============
Bot_PredictSeePointUsingTacPoint
==============
*/
bool Bot_PredictSeePointUsingTacPoint(const bot_info_t *botInfo, const vec3_t *point, const tacpoint_t *nearestTPointToPoint, vec3_t *predictedPointOut)
{
  const tacpoint_t *ClosestPoint; 

  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24891, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  if ( nearestTPointToPoint || (ClosestPoint = TacGraph_FindClosestPoint(point), (nearestTPointToPoint = ClosestPoint) != NULL) )
    LOBYTE(ClosestPoint) = Bot_PredictSeeTacPoint(botInfo, nearestTPointToPoint, predictedPointOut);
  return (char)ClosestPoint;
}

/*
==============
Bot_PredictSeeTacPoint
==============
*/
char Bot_PredictSeeTacPoint(const bot_info_t *botInfo, const tacpoint_t *testTacPoint, vec3_t *predictedOriginOut)
{
  const tacpoint_t *v6; 
  __int64 PointsInRadiusWithVis_Sorted; 
  const bfx::AreaHandle *AreaForPoint; 
  AINavigator2D *v10; 
  __int64 v11; 
  __int64 v12; 
  const tacpoint_t *v13; 
  const bfx::AreaHandle *v14; 
  bfx::AreaHandle hEndArea; 
  bfx::AreaHandle hStartArea; 
  __int64 v17; 
  vec3_t endPos; 
  bfx::PathSpec pPathSpec; 
  vec3_t outPos; 
  tacpoint_t *pPoint2[128]; 

  v17 = -2i64;
  v6 = Sentient_NearestTacPoint(botInfo->sentient);
  if ( !botInfo->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24756, ASSERT_TYPE_ASSERT, "( botInfo->sentient )", (const char *)&queryFormat, "botInfo->sentient") )
    __debugbreak();
  if ( !botInfo->pNavigator && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24757, ASSERT_TYPE_ASSERT, "( botInfo->pNavigator )", (const char *)&queryFormat, "botInfo->pNavigator") )
    __debugbreak();
  if ( !testTacPoint && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24758, ASSERT_TYPE_ASSERT, "( testTacPoint )", (const char *)&queryFormat, "testTacPoint") )
    __debugbreak();
  if ( !v6 )
    return 0;
  if ( TacVisGraph_HasVis(v6, testTacPoint) )
  {
    if ( predictedOriginOut )
      TacGraph_GetApproxGroundPosForPoint(testTacPoint, predictedOriginOut);
    return 1;
  }
  PointsInRadiusWithVis_Sorted = TacGraph_FindPointsInRadiusWithVis_Sorted(&testTacPoint->m_Pos, 0.0, 256.0, 256.0, testTacPoint, (const tacpoint_t **)pPoint2, 128);
  TacGraph_GetApproxGroundPosForPoint(testTacPoint, &outPos);
  AreaForPoint = TacGraph_GetAreaForPoint(testTacPoint);
  bfx::AreaHandle::AreaHandle(&hStartArea, AreaForPoint);
  v10 = botInfo->pNavigator->Get2DNavigator(botInfo->pNavigator);
  v11 = PointsInRadiusWithVis_Sorted;
  if ( (int)PointsInRadiusWithVis_Sorted <= 0 )
  {
LABEL_24:
    bfx::AreaHandle::~AreaHandle(&hStartArea);
    return 0;
  }
  v12 = 0i64;
  while ( 1 )
  {
    v13 = pPoint2[v12];
    if ( v13 == testTacPoint || !TacVisGraph_HasVis(v6, v13) )
      goto LABEL_23;
    pPathSpec.m_obstacleMode = BLOCKED_IF_ANY_MATCH;
    *(_QWORD *)&pPathSpec.m_obstacleBlockageFlags = -1i64;
    *(_QWORD *)&pPathSpec.m_areaPenaltyFlags = -1i64;
    pPathSpec.m_usePathSharingPenalty = 0;
    pPathSpec.m_pathSharingPenalty = 0.0;
    pPathSpec.m_maxPathSharingPenalty = 0.0;
    pPathSpec.m_maxSearchDist = 0.0;
    bfx::PenaltyTable::PenaltyTable(&pPathSpec.m_penaltyTable);
    pPathSpec.m_snapMode = SNAP_CLOSEST;
    if ( v10 )
      pPathSpec = *AINavigator2D::GetPathSpec(v10);
    TacGraph_GetApproxGroundPosForPoint(pPoint2[v12], &endPos);
    v14 = TacGraph_GetAreaForPoint(pPoint2[v12]);
    bfx::AreaHandle::AreaHandle(&hEndArea, v14);
    if ( Nav_IsStraightLineReachable(&outPos, &hStartArea, &endPos, &hEndArea, &pPathSpec) )
      break;
    bfx::AreaHandle::~AreaHandle(&hEndArea);
LABEL_23:
    if ( ++v12 >= v11 )
      goto LABEL_24;
  }
  if ( predictedOriginOut )
    *predictedOriginOut = endPos;
  bfx::AreaHandle::~AreaHandle(&hEndArea);
  bfx::AreaHandle::~AreaHandle(&hStartArea);
  return 1;
}

/*
==============
Bot_PreferWeaponOverLongRange
==============
*/
_BOOL8 Bot_PreferWeaponOverLongRange(const bot_data_t *botData, const Weapon *weapon)
{
  playerState_s *playerState; 
  gentity_s *v5; 
  const sentient_s *sentient; 
  double MaxRange; 
  _BOOL8 result; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1892, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1896, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
    v5 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
  else
    v5 = NULL;
  result = 0;
  if ( !Bot_Weap_IsNone(weapon) && Bot_Weap_Ammo(playerState, weapon) )
  {
    if ( Bot_IsFireFromHipRange(botData) )
      return 1;
    if ( !Bot_Weap_IsWeapClass(playerState, weapon, WEAPCLASS_PISTOL) && (!Bot_AtScriptGoal(botData) || level.time - botData->botInfo.scriptGoalReachedTime < 150 || (botData->botInfo.flags & 0x4000000) != 0) )
    {
      if ( !v5 )
        return 1;
      sentient = v5->sentient;
      if ( !sentient )
        return 1;
      if ( !Bot_RecentSeeSentient(botData, sentient, 1000) )
        return 1;
      MaxRange = Bot_Weap_GetMaxRange(playerState, weapon);
      if ( *(float *)&MaxRange >= botData->botInfo.enemyTrack.lastDist )
        return 1;
    }
  }
  return result;
}

/*
==============
Bot_PressButton
==============
*/
void Bot_PressButton(bot_data_t *botData, bot_scr_buttons_t button, int msec)
{
  int v6; 
  int v7; 
  int v8; 
  int v9; 
  int v10; 
  int v11; 
  int scriptPress; 
  int v13; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23454, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( button )
  {
    switch ( button )
    {
      case BOT_SCR_BUTTON_ATTACK:
        v7 = msec + level.time;
        botData->botInfo.scriptPress |= 2u;
        botData->botInfo.scriptAttackButtonEndTime = v7;
        break;
      case BOT_SCR_BUTTON_THROW:
        botData->botInfo.scriptPress |= 4u;
        break;
      case BOT_SCR_BUTTON_JUMP:
        botData->botInfo.scriptPress |= 8u;
        break;
      case BOT_SCR_BUTTON_MELEE:
        botData->botInfo.scriptPress |= 0x10u;
        break;
      case BOT_SCR_BUTTON_SPRINT:
        botData->botInfo.scriptPress |= 0x20u;
        break;
      case BOT_SCR_BUTTON_ADS:
        v8 = msec + level.time;
        botData->botInfo.scriptPress |= 0x40u;
        botData->botInfo.scriptADSButtonEndTime = v8;
        break;
      case BOT_SCR_BUTTON_LETHAL:
        v9 = msec + level.time;
        botData->botInfo.scriptPress |= 0x80u;
        botData->botInfo.scriptLethalButtonEndTime = v9;
        break;
      case BOT_SCR_BUTTON_TACTICAL:
        v10 = msec + level.time;
        botData->botInfo.scriptPress |= 0x100u;
        botData->botInfo.scriptTacticalButtonEndTime = v10;
        break;
      case BOT_SCR_BUTTON_SPECIAL:
        v11 = msec + level.time;
        botData->botInfo.scriptPress |= 0x200u;
        botData->botInfo.scriptSpecialButtonEndTime = v11;
        break;
      case BOT_SCR_BUTTON_LEAN_LEFT:
        scriptPress = botData->botInfo.scriptPress;
        botData->botInfo.scriptLeanButtonEndTime = msec + level.time;
        botData->botInfo.scriptPress = scriptPress & 0xFFFFF3FF | 0x400;
        break;
      case BOT_SCR_BUTTON_LEAN_RIGHT:
        v13 = botData->botInfo.scriptPress;
        botData->botInfo.scriptLeanButtonEndTime = msec + level.time;
        botData->botInfo.scriptPress = v13 & 0xFFFFF3FF | 0x800;
        break;
      default:
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23518, ASSERT_TYPE_ASSERT, (const char *)&queryFormat.fmt + 3, "Unreachable") )
          __debugbreak();
        break;
    }
  }
  else
  {
    v6 = msec + level.time;
    botData->botInfo.scriptPress |= 1u;
    botData->botInfo.scriptUseButtonEndTime = v6;
  }
}

/*
==============
Bot_PrintSentientInfo
==============
*/
void Bot_PrintSentientInfo(const sentient_s *const sentient)
{
  int v1; 
  signed int v2; 
  const sentient_s *v3; 
  int v4; 
  const SvClientMP *CommonClient; 
  int v6; 
  int eType; 
  __int16 v8; 
  gentity_s *v9; 
  BOOL v10; 
  __int16 EntityIndex; 
  const SvClientMP *MpClient; 
  BOOL IsClientConnected; 
  bitarray_base<bitarray<224> > *AllTeamFlags; 
  const SvClientMP *v15; 
  int IsEntityInUse; 
  int time; 
  const char *GameType; 
  const char *MapName; 
  const pathnode_t *pNearestNode; 
  int v21; 
  const pathnode_t *pPrevClaimedNode; 
  int v23; 
  const pathnode_t *pClaimedNode; 
  int v25; 
  double attackerAccuracy; 
  double entityTargetThreat; 
  int v28; 
  int v29; 
  char *fmt; 
  char *fmtb; 
  char *fmta; 
  __int64 v33; 
  __int64 v34; 
  __int64 v35; 
  __int64 v36; 
  __int64 v37; 
  int bNearestNodeBad; 
  int bNearestNodeValid; 
  BOOL scriptTargetHasTagEye; 
  BOOL turretInvulnerability; 
  BOOL doDamageToAll; 
  BOOL ignoreRandomBulletDamage; 
  int v44; 
  int v45; 
  int v46; 
  int v47; 
  int v49; 
  int banNodeTime; 
  BOOL expendable; 
  BOOL bOnlyGoodNearestNodes; 

  v1 = 0;
  v2 = 0;
  v3 = sentient;
  v4 = 0;
  if ( (int)SvClient::ms_clientCount > 0 )
  {
    do
    {
      if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
        __debugbreak();
      CommonClient = (const SvClientMP *)SvClient::GetCommonClient(v2);
      if ( Bot_IsClientConnected(CommonClient) )
        ++v4;
      ++v2;
    }
    while ( v2 < (int)SvClient::ms_clientCount );
    v3 = sentient;
  }
  v6 = -1;
  eType = -1;
  v8 = 0;
  while ( 1 )
  {
    if ( (unsigned int)v8 >= 0x800 )
    {
      LODWORD(v36) = 2048;
      LODWORD(v33) = v8;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 188, ASSERT_TYPE_ASSERT, "(unsigned)( entityIndex ) < (unsigned)( ( 2048 ) )", "entityIndex doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v33, v36) )
        __debugbreak();
    }
    if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 189, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
      __debugbreak();
    v9 = &g_entities[v8];
    if ( v9->sentient == v3 )
      break;
    if ( ++v8 >= 2048 )
    {
      v10 = 0;
      goto LABEL_38;
    }
  }
  eType = v9->s.eType;
  if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
    __debugbreak();
  if ( v8 >= (int)ComCharacterLimits::ms_gameData.m_characterCount )
  {
    IsEntityInUse = G_IsEntityInUse(v8);
    goto LABEL_37;
  }
  EntityIndex = G_GetEntityIndex(v9);
  if ( G_IsEntityInUse(EntityIndex) && v9->sentient )
  {
    if ( v9->client )
    {
      MpClient = SV_Client_GetMpClient(v9->s.number);
      IsClientConnected = Bot_IsClientConnected(MpClient);
    }
    else
    {
      if ( !v9->agent )
      {
LABEL_30:
        if ( v9->s.eType != ET_INVISIBLE )
        {
          AllTeamFlags = (bitarray_base<bitarray<224> > *)Com_TeamsMP_GetAllTeamFlags();
          if ( bitarray_base<bitarray<224>>::testBit(AllTeamFlags, v9->sentient->eTeam) )
          {
            if ( v9->client )
            {
              v15 = SV_Client_GetMpClient(v9->s.number);
              IsEntityInUse = Bot_IsClientActive(v15);
            }
            else
            {
              IsEntityInUse = 1;
            }
            goto LABEL_37;
          }
        }
        goto LABEL_35;
      }
      IsClientConnected = v9->s.eType == ET_AGENT;
    }
    if ( IsClientConnected )
      goto LABEL_30;
  }
LABEL_35:
  IsEntityInUse = 0;
LABEL_37:
  v10 = IsEntityInUse != 0;
LABEL_38:
  LODWORD(v36) = v10;
  LOBYTE(v1) = v3->ai != NULL;
  LODWORD(v33) = v1;
  LODWORD(fmt) = eType;
  Com_Printf(131087, "*** Sentient Index:%d  Entity Index:%d  Entity Type:%d  IsAI:%d  Active:%d ***\n", (unsigned int)(((int)v3 - LODWORD(level.sentients)) / 184), (unsigned int)v8, fmt, v33, v36);
  time = level.time;
  GameType = SV_GameMP_GetGameType();
  MapName = SV_Game_GetMapName();
  LODWORD(v34) = v4;
  LODWORD(fmtb) = time;
  Com_Printf(131087, "*** Map Name:%s  Game Type:%s  Game Time:%d  Connected Clients:%d ***\n", MapName, GameType, fmtb, v34);
  pNearestNode = v3->pNearestNode;
  banNodeTime = v3->banNodeTime;
  expendable = v3->expendable;
  bOnlyGoodNearestNodes = v3->bOnlyGoodNearestNodes;
  bNearestNodeBad = v3->bNearestNodeBad;
  bNearestNodeValid = v3->bNearestNodeValid;
  if ( pNearestNode )
    v21 = Path_ConvertNodeToIndex(pNearestNode);
  else
    v21 = -1;
  pPrevClaimedNode = v3->pPrevClaimedNode;
  if ( pPrevClaimedNode )
    v23 = Path_ConvertNodeToIndex(pPrevClaimedNode);
  else
    v23 = -1;
  pClaimedNode = v3->pClaimedNode;
  if ( pClaimedNode )
    v25 = Path_ConvertNodeToIndex(pClaimedNode);
  else
    v25 = -1;
  scriptTargetHasTagEye = v3->scriptTargetHasTagEye;
  turretInvulnerability = v3->turretInvulnerability;
  doDamageToAll = v3->doDamageToAll;
  ignoreRandomBulletDamage = v3->ignoreRandomBulletDamage;
  v44 = v3->meleeAttackerSpot[3];
  v45 = v3->meleeAttackerSpot[2];
  v46 = v3->meleeAttackerSpot[1];
  v47 = v3->meleeAttackerSpot[0];
  attackerAccuracy = v3->attackerAccuracy;
  entityTargetThreat = v3->entityTargetThreat;
  if ( EntHandle::isDefined(&v3->scriptTargetEnt) )
    v49 = EntHandle::entnum(&v3->scriptTargetEnt);
  else
    v49 = -1;
  if ( EntHandle::isDefined(&v3->targetEnt) )
    v28 = EntHandle::entnum(&v3->targetEnt);
  else
    v28 = -1;
  if ( EntHandle::isDefined(&v3->syncedMeleeEnt) )
    v29 = EntHandle::entnum(&v3->syncedMeleeEnt);
  else
    v29 = -1;
  if ( EntHandle::isDefined(&v3->lastAttacker) )
    v6 = EntHandle::entnum(&v3->lastAttacker);
  LODWORD(v37) = v3->bIgnoreMe;
  LODWORD(v35) = v3->iThreatBiasGroupIndex;
  LODWORD(fmta) = v3->iThreatBias;
  Com_Printf(131087, "*** Sentient Data *** \n inUse:%d\n eTeam:%d\n iThreatBias:%d\n iThreatBiasGroupIndex:%d\n bIgnoreMe:%d\n bIgnoreAll:%d\n originChanged:%d\n oldOrigin:%.2f,%.2f,%.2f\n maxVisibleDist:%f\n surprisedByMeDistSq:%f\n iEnemyNotifyTime:%d\n attackerCount:%d\n lastAttacker:%d\n synchedMeleeEnt:%d\n targetEnt:%d\n scriptTargetEnt:%d\n entityTargetThread:%f\n attacker[0]:%d\n attacker[1]:%d\n attacker[2]:%d\n attacker[3]:%d\n attackerAccuracy:%f\n ignoreRandomBulletDamage:%d\n doDamageToAll:%d\n turrentInvulnerability:%d\n scriptTargetHasTagEye:%d\n claimedNode:%d\n prevClaimedNode:%d\n nearestNode:%d\n bNearestNodeValid:%d\n bNearestNodeBad:%d\n bOnlyGoodNearestNodes:%d\n expendable:%d\n banNodeTime:%d\n", v3->inuse, (unsigned int)v3->eTeam, fmta, v35, v37, v3->bIgnoreAll, v3->originChanged, v3->oldOrigin.v[0], v3->oldOrigin.v[1], v3->oldOrigin.v[2], v3->maxVisibleDist, v3->surprisedByMeDistSq, v3->iEnemyNotifyTime, v3->attackerCount, v6, v29, v28, v49, entityTargetThreat, v47, v46, v45, v44, attackerAccuracy, ignoreRandomBulletDamage, doDamageToAll, turretInvulnerability, scriptTargetHasTagEye, v25, v23, v21, bNearestNodeValid, bNearestNodeBad, bOnlyGoodNearestNodes, expendable, banNodeTime);
}

/*
==============
Bot_PursuingScriptGoal
==============
*/
_BOOL8 Bot_PursuingScriptGoal(const bot_data_t *botData)
{
  if ( !botData )
  {
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23612, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
      __debugbreak();
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23600, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
      __debugbreak();
  }
  if ( botData->botInfo.scriptGoal.type == BOT_SCR_GOAL_NONE && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23613, ASSERT_TYPE_ASSERT, "( Bot_HasScriptGoal( botData ) )", (const char *)&queryFormat, "Bot_HasScriptGoal( botData )") )
    __debugbreak();
  if ( botData == (const bot_data_t *)-8i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13725, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  return Bot_NavPathExists(&botData->botInfo) && Bot_ActiveGoalIsScriptGoal(botData);
}

/*
==============
Bot_RandomInput
==============
*/
void Bot_RandomInput(bot_data_t *botData, usercmd_s *cmd)
{
  __int64 v4; 
  __int64 v5; 
  __int64 v6; 
  __int64 v7; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15210, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15211, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  if ( level.time >= botData->botInfo.randomInputEndTime )
  {
    v4 = G_irand(0, 6);
    v5 = G_irand(0, 9);
    if ( (unsigned int)v4 >= 6 )
    {
      LODWORD(v6) = v4;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15227, ASSERT_TYPE_ASSERT, "(unsigned)( fwdIndex ) < (unsigned)( ( sizeof( *array_counter( FORWARD_OFFSET ) ) + 0 ) )", "fwdIndex doesn't index ARRAY_COUNT( FORWARD_OFFSET )\n\t%i not in [0, %i)", v6, 6) )
        __debugbreak();
    }
    if ( (unsigned int)v5 >= 9 )
    {
      LODWORD(v7) = 9;
      LODWORD(v6) = v5;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15228, ASSERT_TYPE_ASSERT, "(unsigned)( rightIndex ) < (unsigned)( ( sizeof( *array_counter( RIGHT_OFFSET ) ) + 0 ) )", "rightIndex doesn't index ARRAY_COUNT( RIGHT_OFFSET )\n\t%i not in [0, %i)", v6, v7) )
        __debugbreak();
    }
    cmd->forwardmove = FORWARD_OFFSET[v4];
    cmd->rightmove = RIGHT_OFFSET[v5];
    botData->botInfo.randomInputEndTime = level.time + G_irand(1500, 3000);
  }
}

/*
==============
Bot_RandomNodeInvalidSelective
==============
*/
bool Bot_RandomNodeInvalidSelective(const bot_data_t *botData, pathnode_t *node, const unsigned __int8 *validZones, int anyValidZones)
{
  unsigned __int16 v8; 
  int v9; 
  int v10; 
  unsigned int v11; 
  char v12; 
  gentity_s *ent; 
  AIBotInterface *m_pAI; 
  gentity_s *v15; 
  __int64 v17; 
  __int64 v18; 
  bitarray<224> v19; 
  AIBotWrapper v20; 
  vec3_t pos; 
  bitarray<224> result; 

  if ( !Com_GameMode_SupportsFeature(WEAPON_RAISING_ALTSWITCH) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20927, ASSERT_TYPE_ASSERT, "(G_Bot_UseBadPlaceRestrictions())", "%s\n\tThis function uses bad place restrictions, refactor if turned off", "G_Bot_UseBadPlaceRestrictions()") )
    __debugbreak();
  if ( !node && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20928, ASSERT_TYPE_ASSERT, "( node )", (const char *)&queryFormat, "node") )
    __debugbreak();
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20929, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( node->constant.type != 1 || Path_IsNodeTraversalOrOverlapsTraversal(node) )
    return 1;
  v8 = Path_ConvertNodeToIndex(node);
  if ( (v8 & 0xFFF8u) >= 0xFFF8 )
  {
    LODWORD(v17) = v8 >> 3;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20938, ASSERT_TYPE_ASSERT, "(unsigned)( nodeIndex / 8 ) < (unsigned)( sizeof( s_botRandomNodeCornerMask ) )", "nodeIndex / 8 doesn't index sizeof( s_botRandomNodeCornerMask )\n\t%i not in [0, %i)", v17, 0x1FFF) )
      __debugbreak();
  }
  if ( ((unsigned __int8)(1 << (v8 & 7)) & s_botRandomNodeCornerMask[(unsigned __int64)v8 >> 3]) != 0 )
    return 1;
  if ( anyValidZones )
  {
    if ( !validZones && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20944, ASSERT_TYPE_ASSERT, "( validZones )", (const char *)&queryFormat, "validZones") )
      __debugbreak();
    v9 = Path_NodeZoneFromNode(node);
    if ( v9 == 255 )
      return 1;
    if ( v9 >= s_botZoneDataCount )
    {
      LODWORD(v18) = s_botZoneDataCount;
      LODWORD(v17) = v9;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20950, ASSERT_TYPE_ASSERT, "(unsigned)( iZone ) < (unsigned)( s_botZoneDataCount )", "iZone doesn't index s_botZoneDataCount\n\t%i not in [0, %i)", v17, v18) )
        __debugbreak();
    }
    v10 = v9 % 8;
    v11 = v9 / 8;
    v12 = v10;
    if ( v11 >= 0x20 )
    {
      LODWORD(v18) = 32;
      LODWORD(v17) = v11;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20951, ASSERT_TYPE_ASSERT, "(unsigned)( iZone / 8 ) < (unsigned)( ( ( 256 ) / 8 ) )", "iZone / 8 doesn't index BOT_ZONE_STACK_VISIT_MAX\n\t%i not in [0, %i)", v17, v18) )
        __debugbreak();
    }
    if ( (validZones[v11] & (unsigned __int8)(1 << v12)) == 0 )
      return 1;
  }
  pathnode_t::GetPos(node, &pos);
  if ( (float)((float)((float)((float)(pos.v[0] * s_botWorldEdgePlanes[0].v[0]) + (float)(pos.v[1] * s_botWorldEdgePlanes[0].v[1])) + (float)(pos.v[2] * s_botWorldEdgePlanes[0].v[2])) - s_botWorldEdgePlanes[0].v[3]) > -128.0 || (float)((float)((float)((float)(pos.v[0] * s_botWorldEdgePlanes[1].v[0]) + (float)(pos.v[1] * s_botWorldEdgePlanes[1].v[1])) + (float)(pos.v[2] * s_botWorldEdgePlanes[1].v[2])) - s_botWorldEdgePlanes[1].v[3]) > -128.0 || (float)((float)((float)((float)(pos.v[0] * s_botWorldEdgePlanes[2].v[0]) + (float)(pos.v[1] * s_botWorldEdgePlanes[2].v[1])) + (float)(pos.v[2] * s_botWorldEdgePlanes[2].v[2])) - s_botWorldEdgePlanes[2].v[3]) > -128.0 || (float)((float)((float)((float)(pos.v[0] * s_botWorldEdgePlanes[3].v[0]) + (float)(pos.v[1] * s_botWorldEdgePlanes[3].v[1])) + (float)(pos.v[2] * s_botWorldEdgePlanes[3].v[2])) - s_botWorldEdgePlanes[3].v[3]) > -128.0 )
    return 1;
  if ( !botData )
    return 0;
  if ( Bot_GetPersonality(botData) == BOT_PERSONALITY_CQB && (Path_NodeExposureGeneral(node, 1) > 0x46 || Path_NodeExposureGetRawArcMax(node, 0.0, 180.0, 1) > 0xC) )
    return 1;
  AICommonInterface::AICommonInterface(&v20.m_botInterface);
  v20.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v20.m_botAgentInterface);
  ent = botData->botInfo.ent;
  v20.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v20.m_pAI = NULL;
  AIBotWrapper::Setup(&v20, ent);
  m_pAI = v20.m_pAI;
  if ( !v20.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20978, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  Com_Teams_GetTeamFlag(&result, botData->botInfo.sentient->eTeam);
  v19.array[6] = result.array[6];
  v15 = botData->botInfo.ent;
  *(_OWORD *)v19.array = *(_OWORD *)result.array;
  *(double *)&v19.array[4] = *(double *)&result.array[4];
  return AICommonInterface::BadPlace_IsNodeInAnyBadPlace(m_pAI, node, v15->clipmask, &v19);
}

/*
==============
Bot_ReactedToSentient
==============
*/
_BOOL8 Bot_ReactedToSentient(const bot_data_t *botData, const sentient_info_t *otherSentientInfo)
{
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9018, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !otherSentientInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9019, ASSERT_TYPE_ASSERT, "( otherSentientInfo )", (const char *)&queryFormat, "otherSentientInfo") )
    __debugbreak();
  return (float)(level.time - otherSentientInfo->VisCache.iFirstVisTime) >= botData->botMatchData.reactionTime;
}

/*
==============
Bot_RecentSeeSentient
==============
*/
_BOOL8 Bot_RecentSeeSentient(const bot_data_t *botData, const sentient_s *otherSent, int timeLimitMs)
{
  sentient_info_t *SentientInfo; 
  int iLastVisTime; 
  int v8; 
  BOOL v9; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9030, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9031, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
    __debugbreak();
  if ( !otherSent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9032, ASSERT_TYPE_ASSERT, "( otherSent )", (const char *)&queryFormat, "otherSent") )
    __debugbreak();
  SentientInfo = Sentient_GetSentientInfo(botData->botInfo.sentient, otherSent);
  if ( !SentientInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9040, ASSERT_TYPE_ASSERT, "( pInfo )", (const char *)&queryFormat, "pInfo") )
    __debugbreak();
  iLastVisTime = SentientInfo->VisCache.iLastVisTime;
  v8 = level.time - iLastVisTime;
  v9 = Bot_ReactedToSentient(botData, SentientInfo);
  return iLastVisTime && v8 < timeLimitMs && v9;
}

/*
==============
Bot_RegisterEvents
==============
*/
void Bot_RegisterEvents(const bot_data_t *botData)
{
  gentity_s *ent; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5092, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  ent = botData->botInfo.ent;
  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5095, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  Actor_EventListener_Add(ent->s.number, scr_const.bulletwhizby);
  Actor_EventListener_Add(ent->s.number, scr_const.projectile_impact);
  Actor_EventListener_Add(ent->s.number, scr_const.gunshot);
  Actor_EventListener_Add(ent->s.number, scr_const.gunshot_teammate);
  Actor_EventListener_Add(ent->s.number, scr_const.silenced_shot);
  Actor_EventListener_Add(ent->s.number, scr_const.explode);
  Actor_EventListener_Add(ent->s.number, scr_const.enemy);
  Actor_EventListener_Add(ent->s.number, scr_const.death);
  Actor_EventListener_Add(ent->s.number, scr_const.grenadedanger);
  Actor_EventListener_Add_ByEnum(ent->s.number, 2);
  Actor_EventListener_Add_ByEnum(ent->s.number, 3);
  Actor_EventListener_Add_ByEnum(ent->s.number, 4);
  Actor_EventListener_Add_ByEnum(ent->s.number, 22);
  Actor_EventListener_Add_ByEnum(ent->s.number, 25);
  Actor_EventListener_Add_ByEnum(ent->s.number, 28);
}

/*
==============
Bot_RemoveDebugSuffixFromName
==============
*/
void Bot_RemoveDebugSuffixFromName(const char *originalName, char (*newName)[36])
{
  __int64 v4; 
  __int64 v5; 

  if ( !originalName && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3452, ASSERT_TYPE_ASSERT, "( originalName )", (const char *)&queryFormat, "originalName") )
    __debugbreak();
  if ( !newName && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3453, ASSERT_TYPE_ASSERT, "( newName )", (const char *)&queryFormat, "newName") )
    __debugbreak();
  v4 = -1i64;
  do
    ++v4;
  while ( originalName[v4] );
  if ( Bot_HasDebugSuffixInName(originalName) )
    LODWORD(v4) = v4 - 7;
  if ( (int)v4 + 1 > 36 )
  {
    LODWORD(v5) = v4 + 1;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3462, ASSERT_TYPE_ASSERT, "( nameSize + 1 ) <= ( 36 )", "nameSize + 1 <= MAX_PLAYERNAME_LENGTH\n\t%i, %i", v5, 36) )
      __debugbreak();
  }
  Core_strncpy((char *)newName, 0x24ui64, originalName, (int)v4);
}

/*
==============
Bot_ResetBotInfo
==============
*/
void Bot_ResetBotInfo(bot_data_t *botData, gentity_s *entity)
{
  $3396140AF3A78F7FCD1D73807E505015 *v4; 
  sentient_info_t *sentientInfo; 
  gentity_s *ent; 
  playerState_s *p_ps; 
  unsigned int number; 
  usercmd_s *p_lastUsercmd; 
  SvPersistentGlobalsMP *PersistentGlobalsMP; 
  gentity_s *v11; 
  agent_t *agents; 
  int v13; 
  unsigned int v14; 
  sentient_s *sentient; 
  gentity_s *v16; 
  AINavigator *v17; 
  AINavigator2D *v18; 
  sentient_s *v19; 
  void (__fastcall *SetObstacleBlockageFlags)(AINavigator *, unsigned int); 
  const bitarray<224> *TeamFlag; 
  unsigned int ObstacleBlockageFlagsFromTeamFlags; 
  __int64 v27; 
  char *v28; 
  __int64 v29; 
  __int64 v30; 
  __int64 v31; 
  bitarray<224> result; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4600, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.sentientInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4601, ASSERT_TYPE_ASSERT, "(botData->botInfo.sentientInfo != nullptr)", "%s\n\t[BOTS] (%d) botData->botInfo.sentientInfo is NULL for for client %i", "botData->botInfo.sentientInfo != nullptr", level.time, entity->s.number) )
    __debugbreak();
  if ( !entity && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4602, ASSERT_TYPE_ASSERT, "( entity )", (const char *)&queryFormat, "entity") )
    __debugbreak();
  v4 = &botData->8;
  Bot_CleanupBotInfo(botData);
  botData->bIsScriptedAgent = 0;
  sentientInfo = botData->botInfo.sentientInfo;
  memset_0(&botData->scriptedAgentInfo.sentient, 0, 0x72F0ui64);
  botData->botInfo.ent = entity;
  botData->botInfo.sentientInfo = sentientInfo;
  if ( !botData->botInfo.sentientInfo )
  {
    LODWORD(v31) = entity->s.number;
    LODWORD(v30) = level.time;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4617, ASSERT_TYPE_ASSERT, "(botData->botInfo.sentientInfo != nullptr)", "%s\n\t[BOTS] (%d) botData->botInfo.sentientInfo is NULL for for client %i", "botData->botInfo.sentientInfo != nullptr", v30, v31) )
      __debugbreak();
  }
  if ( level.maxSentients != 272 )
  {
    LODWORD(v30) = 272;
    LODWORD(v29) = level.maxSentients;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4620, ASSERT_TYPE_ASSERT, "( level.maxSentients ) == ( (200 + 48 + 24) )", "level.maxSentients == MAX_SENTIENTS_MP\n\t%i, %i", v29, v30) )
      __debugbreak();
  }
  memset_0(botData->botInfo.sentientInfo, 0, 0x4400ui64);
  ent = v4->botInfo.ent;
  p_ps = &v4->botInfo.ent->client->ps;
  if ( p_ps )
  {
    botData->botInfo.playerState = p_ps;
    number = ent->s.number;
    if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
      __debugbreak();
    p_lastUsercmd = &SvClient::GetCommonClient(number)->lastUsercmd;
LABEL_44:
    botData->botInfo.lastUserCmd = p_lastUsercmd;
    goto LABEL_45;
  }
  if ( ent->agent )
  {
    PersistentGlobalsMP = SvPersistentGlobalsMP::GetPersistentGlobalsMP();
    v11 = v4->botInfo.ent;
    botData->botInfo.playerState = &v4->botInfo.ent->agent->playerState;
    agents = PersistentGlobalsMP->agents;
    v13 = v11->s.number;
    if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 168, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
      __debugbreak();
    if ( v13 < (int)ComCharacterLimits::ms_gameData.m_clientCount )
    {
      if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 168, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
        __debugbreak();
      LODWORD(v31) = v13;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 175, ASSERT_TYPE_ASSERT, "( entityIndex ) >= ( ComCharacterLimits::GetAgentEntityIndexOffset() )", "%s >= %s\n\t%i, %i", "entityIndex", "ComCharacterLimits::GetAgentEntityIndexOffset()", v31, ComCharacterLimits::ms_gameData.m_clientCount) )
        __debugbreak();
    }
    if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 168, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
      __debugbreak();
    v14 = v13 - ComCharacterLimits::ms_gameData.m_clientCount;
    if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 116, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
      __debugbreak();
    if ( v14 >= ComCharacterLimits::ms_gameData.m_agentCount )
    {
      if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 116, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
        __debugbreak();
      LODWORD(v30) = ComCharacterLimits::ms_gameData.m_agentCount;
      LODWORD(v29) = v14;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 178, ASSERT_TYPE_ASSERT, "(unsigned)( agentIndex ) < (unsigned)( ComCharacterLimits::GetAgentMaxCount() )", "agentIndex doesn't index ComCharacterLimits::GetAgentMaxCount()\n\t%i not in [0, %i)", v29, v30) )
        __debugbreak();
    }
    p_lastUsercmd = &agents[v14].lastUsercmd;
    goto LABEL_44;
  }
LABEL_45:
  if ( !botData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4637, ASSERT_TYPE_ASSERT, "( botInfo->playerState )", (const char *)&queryFormat, "botInfo->playerState") )
    __debugbreak();
  if ( !botData->botInfo.lastUserCmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4638, ASSERT_TYPE_ASSERT, "( botInfo->lastUserCmd )", (const char *)&queryFormat, "botInfo->lastUserCmd") )
    __debugbreak();
  botData->botInfo.playerState->serverTime = botData->botInfo.lastUserCmd->serverTime;
  botData->botInfo.playerState->commandTime = botData->botInfo.lastUserCmd->commandTime;
  sentient = v4->botInfo.ent->sentient;
  if ( sentient )
  {
    botData->botInfo.sentient = sentient;
    sentient->ai = &v4->botInfo;
    Sentient_SetEnemy(botData->botInfo.sentient, NULL, 1, 1);
    Sentient_InvalidateNearestNode(botData->botInfo.sentient);
    Sentient_InvalidateNearestTacPoint(botData->botInfo.sentient);
    EntHandle::setEnt(&botData->botInfo.sentient->scriptTargetEnt, NULL);
    botData->botInfo.sentient->scriptTargetHasTagEye = 0;
    botData->botInfo.sentient->entityTargetThreat = 0.0;
  }
  Bot_SetSightFovValues(botData);
  botData->botInfo.threat.newEnemyReactionDistSq = 262144.0;
  botData->botInfo.sight.fMaxSightDistSqrd = 268435460.0;
  botData->botInfo.sight.latency = 100;
  botData->botInfo.sight.ignoreCloseFoliage = 1;
  botData->botInfo.threat.iPacifistWait = 20000;
  botData->botInfo.threat.footstepDetectDistSq = 36864.0;
  botData->botInfo.threat.footstepDetectDistWalkSq = 9216.0;
  botData->botInfo.threat.footstepDetectDistSprintSq = 90000.0;
  *(_QWORD *)&botData->scriptedAgentInfo.navigation.fWalkDist = 0i64;
  *(_QWORD *)&botData->scriptedAgentInfo.navigation.isInBadPlace = 0i64;
  v16 = v4->botInfo.ent;
  botData->botInfo.navigation.badPlaceAwareness = 0.75;
  v17 = Nav_Create2DNavigator(v16, NAV_LAYER_HUMAN);
  botData->botInfo.pNavigator = v17;
  v18 = v17->Get2DNavigator(v17);
  v18->m_MaxDeviationFromPath = 20.0;
  v19 = botData->botInfo.sentient;
  if ( v19 )
  {
    SetObstacleBlockageFlags = v18->SetObstacleBlockageFlags;
    TeamFlag = Com_Teams_GetTeamFlag(&result, v19->eTeam);
    ObstacleBlockageFlagsFromTeamFlags = Nav_GetObstacleBlockageFlagsFromTeamFlags(TeamFlag);
    SetObstacleBlockageFlags(v18, ObstacleBlockageFlagsFromTeamFlags);
  }
  *(_WORD *)&botData->scriptedAgentInfo.avoidance.avoidanceEnabled = 257;
  botData->botInfo.avoidance.reciprocality = 0.5;
  botData->botInfo.avoidance.othersAvoidMe = 1;
  botData->botInfo.avoidance.maxSpeed = 300.0;
  botData->botInfo.avoidance.minSpeed = 30.0;
  botData->botInfo.avoidance.radius = entity->r.box.halfSize.v[0];
  botData->botInfo.avoidance.avoidanceBoundsHalfSize.v[0] = 300.0;
  botData->botInfo.avoidance.avoidanceBoundsHalfSize.v[1] = 300.0;
  botData->botInfo.avoidance.avoidanceBoundsHalfSize.v[2] = 80.0;
  _XMM0 = LODWORD(botData->botInfo.avoidance.radius);
  __asm { vcmpeqss xmm3, xmm0, xmm1 }
  _XMM1 = _XMM0;
  __asm { vblendvps xmm0, xmm1, xmm2, xmm3 }
  botData->botInfo.avoidance.radius = *(float *)&_XMM0;
  botData->botInfo.avoidance.lookAheadTime = 1.0;
  botData->botInfo.nextProneTime = 0x7FFFFFFF;
  botData->botInfo.nextCrouchTime = 0x7FFFFFFF;
  botData->botInfo.nextStandTime = 0x7FFFFFFF;
  botData->botInfo.currentForceStance = 7;
  botData->botInfo.enemyTrack.lastEnemyEntNum = -1;
  botData->botInfo.enemyTrack.deadEnemyThreat = -2147483647;
  if ( !botData->botInfo.sentientInfo )
  {
    LODWORD(v31) = entity->s.number;
    LODWORD(v30) = level.time;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4697, ASSERT_TYPE_ASSERT, "(botInfo->sentientInfo != nullptr)", "%s\n\t[BOTS] (%d) botData->botInfo.sentientInfo is NULL for for client %i", "botInfo->sentientInfo != nullptr", v30, v31) )
      __debugbreak();
  }
  if ( level.maxSentients != 272 )
  {
    LODWORD(v30) = 272;
    LODWORD(v29) = level.maxSentients;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4699, ASSERT_TYPE_ASSERT, "( level.maxSentients ) == ( (200 + 48 + 24) )", "level.maxSentients == MAX_SENTIENTS_MP\n\t%i, %i", v29, v30) )
      __debugbreak();
  }
  v27 = 0i64;
  v28 = (char *)&botData->scriptedAgentInfo + 11744;
  do
  {
    v28 += 240;
    botData->botInfo.sentientInfo[v27].lastKnownReason = -1;
    *((_DWORD *)v28 - 75) = -2147483647;
    botData->botInfo.sentientInfo[v27 + 1].lastKnownReason = -1;
    *((_DWORD *)v28 - 60) = -2147483647;
    botData->botInfo.sentientInfo[v27 + 2].lastKnownReason = -1;
    *((_DWORD *)v28 - 45) = -2147483647;
    botData->botInfo.sentientInfo[v27 + 3].lastKnownReason = -1;
    v27 += 4i64;
    *((_DWORD *)v28 - 30) = -2147483647;
  }
  while ( v27 < 272 );
  botData->botInfo.awareness = 1.0;
  botData->botInfo.hideFromLastNode = -1;
  botData->botInfo.aerialEnemyLockOnNode = -1;
  botData->botInfo.traversal = 0;
  botData->botInfo.traverseWaitingTime = 0;
  botData->botInfo.traverseJumpTime = 0;
  *((_DWORD *)&botData->scriptedAgentInfo + 7061) = -1;
  botData->botInfo.hideFromEntNum = 2047;
  botData->botInfo.weaponRiotShieldTime = -1000;
  botData->botInfo.grenadeFiredTime = -1;
  Bot_CalculateLauncherCombatChance(botData);
}

/*
==============
Bot_ResetLife
==============
*/
void Bot_ResetLife(bot_data_t *botData)
{
  $3396140AF3A78F7FCD1D73807E505015 *v2; 
  gentity_s *ent; 
  sentient_s *sentient; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4420, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v2 = &botData->8;
  Bot_PathClear(&botData->botInfo);
  Bot_ResetBotInfo(botData, botData->botInfo.ent);
  ent = v2->botInfo.ent;
  if ( !v2->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5095, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  Actor_EventListener_Add(ent->s.number, scr_const.bulletwhizby);
  Actor_EventListener_Add(ent->s.number, scr_const.projectile_impact);
  Actor_EventListener_Add(ent->s.number, scr_const.gunshot);
  Actor_EventListener_Add(ent->s.number, scr_const.gunshot_teammate);
  Actor_EventListener_Add(ent->s.number, scr_const.silenced_shot);
  Actor_EventListener_Add(ent->s.number, scr_const.explode);
  Actor_EventListener_Add(ent->s.number, scr_const.enemy);
  Actor_EventListener_Add(ent->s.number, scr_const.death);
  Actor_EventListener_Add(ent->s.number, scr_const.grenadedanger);
  Actor_EventListener_Add_ByEnum(ent->s.number, 2);
  Actor_EventListener_Add_ByEnum(ent->s.number, 3);
  Actor_EventListener_Add_ByEnum(ent->s.number, 4);
  Actor_EventListener_Add_ByEnum(ent->s.number, 22);
  Actor_EventListener_Add_ByEnum(ent->s.number, 25);
  Actor_EventListener_Add_ByEnum(ent->s.number, 28);
  sentient = v2->botInfo.sentient;
  if ( sentient )
  {
    if ( sentient->pClaimedNode )
      Path_RelinquishNodeNow(sentient);
  }
}

/*
==============
Bot_ResumeScriptGoal
==============
*/
__int64 Bot_ResumeScriptGoal(bot_data_t *botData)
{
  unsigned int PathToGoalInternal; 
  pathnode_t *node; 
  bot_scr_goal_t type; 
  const char *v6; 
  pathnode_t *v7; 
  unsigned __int16 NodeRandom; 
  pathnode_t *v9; 
  const tacpoint_t *v10; 
  const tacpoint_t *RandomPointReachableFromPoint; 
  __int64 v12; 
  vec3_t goal; 
  char _Buffer[256]; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20330, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20331, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !botData->botInfo.ent->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20332, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent->sentient )", (const char *)&queryFormat, "botData->botInfo.ent->sentient") )
    __debugbreak();
  PathToGoalInternal = 0;
  if ( Bot_ShouldDelayPathGen(botData) )
    return 0i64;
  if ( botData->botInfo.scriptGoal.type == BOT_SCR_GOAL_NONE )
  {
    if ( Bot_PathExists(&botData->botInfo) && !Bot_IsAtPathEnd(botData, 0.0) || level.time - botData->botInfo.ent->birthTime <= 500 )
      return PathToGoalInternal;
    if ( SV_BotRequirePathnodes(botData) )
    {
      NodeRandom = Bot_FindNodeRandom(botData, NULL, NULL);
      if ( NodeRandom == 0xFFFF )
        return PathToGoalInternal;
      v9 = Path_ConvertIndexToNode(NodeRandom);
      pathnode_t::GetPos(v9, &goal);
    }
    else
    {
      if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21247, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
        __debugbreak();
      v10 = Sentient_NearestTacPoint(botData->botInfo.sentient);
      if ( !v10 )
        return PathToGoalInternal;
      RandomPointReachableFromPoint = TacGraph_FindRandomPointReachableFromPoint(v10, 10);
      if ( !RandomPointReachableFromPoint )
        return PathToGoalInternal;
      TacGraph_GetApproxGroundPosForPoint(RandomPointReachableFromPoint, &goal);
    }
    Bot_GetPathToGoalInternal(botData, &goal, 128.0, "random");
    return PathToGoalInternal;
  }
  Bot_GetScriptGoal(botData, &goal);
  if ( !Bot_IsGoalInBadPlace(&botData->botInfo, &botData->botInfo.scriptGoal) )
  {
    node = botData->botInfo.scriptGoal.node;
    if ( !node || Path_NodeUnclaimedByOther(node, botData->botInfo.sentient) )
    {
      if ( Bot_PathExists(&botData->botInfo) && Bot_ActiveGoalIsScriptGoal(botData) )
        return 1;
      type = botData->botInfo.scriptGoal.type;
      _Buffer[0] = 0;
      if ( (unsigned int)type >= 8 )
      {
        LODWORD(v12) = type;
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20365, ASSERT_TYPE_ASSERT, "(unsigned)( botInfo->scriptGoal.type ) < (unsigned)( ( sizeof( *array_counter( BOT_STR_TBL_GOAL_TYPE ) ) + 0 ) )", "botInfo->scriptGoal.type doesn't index ARRAY_COUNT(BOT_STR_TBL_GOAL_TYPE)\n\t%i not in [0, %i)", v12, 8) )
          __debugbreak();
      }
      if ( !*BOT_STR_TBL_GOAL_TYPE[botData->botInfo.scriptGoal.type] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20366, ASSERT_TYPE_ASSERT, "( BOT_STR_TBL_GOAL_TYPE[botInfo->scriptGoal.type][0] )", (const char *)&queryFormat, "BOT_STR_TBL_GOAL_TYPE[botInfo->scriptGoal.type][0]") )
        __debugbreak();
      if ( !BOT_STR_TBL_GOAL_TYPE[botData->botInfo.scriptGoal.type][1] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20367, ASSERT_TYPE_ASSERT, "( BOT_STR_TBL_GOAL_TYPE[botInfo->scriptGoal.type][1] )", (const char *)&queryFormat, "BOT_STR_TBL_GOAL_TYPE[botInfo->scriptGoal.type][1]") )
        __debugbreak();
      v6 = BOT_STR_TBL_GOAL_TYPE[botData->botInfo.scriptGoal.type];
      j_sprintf(_Buffer, "script [%c%c]", (unsigned int)*v6, (unsigned int)v6[1]);
      PathToGoalInternal = Bot_GetPathToGoalInternal(botData, &goal, botData->botInfo.scriptGoal.radius, _Buffer);
      if ( PathToGoalInternal )
      {
        v7 = botData->botInfo.scriptGoal.node;
        if ( v7 )
          Bot_ForceClaimNode(&botData->botInfo, v7);
        botData->botInfo.scriptGoal.radius = botData->botInfo.activeGoal.radius;
        return PathToGoalInternal;
      }
    }
    Bot_BadPath(botData->botInfo.ent);
  }
  return PathToGoalInternal;
}

/*
==============
Bot_SeeThruBlockedByAllSurroundingGeo
==============
*/
__int64 Bot_SeeThruBlockedByAllSurroundingGeo(const vec3_t *drawPoint0, const vec3_t *drawPoint1, const __int16 entToIgnore, const int contents, int drawInsteadOfTrace)
{
  __int16 v5; 
  float v8; 
  float v9; 
  __int128 v10; 
  float v11; 
  float v15; 
  float v16; 
  float v17; 
  int v18; 
  int v19; 
  int v20; 
  float v21; 
  vec3_t *p_point; 
  float v23; 
  float v24; 
  float v25; 
  float v26; 
  float v27; 
  int v28; 
  unsigned __int8 *priorityMap; 
  const dvar_t *v30; 
  float v31; 
  float v32; 
  float v33; 
  float v34; 
  float v37; 
  float v39; 
  float v40; 
  float v41; 
  vec3_t vec; 
  int v43[4]; 
  vec3_t point; 
  vec3_t dst; 
  vec3_t angles; 
  tmat33_t<vec3_t> axis; 
  trace_t results; 
  vec3_t start; 
  vec3_t end; 

  v5 = entToIgnore;
  if ( drawPoint1->v[0] == drawPoint0->v[0] && drawPoint1->v[1] == drawPoint0->v[1] && drawPoint1->v[2] == drawPoint0->v[2] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2660, ASSERT_TYPE_ASSERT, "( !Vec3Compare( drawPoint0, drawPoint1 ) )", (const char *)&queryFormat, "!Vec3Compare( drawPoint0, drawPoint1 )") )
    __debugbreak();
  v8 = drawPoint1->v[0] - drawPoint0->v[0];
  v10 = LODWORD(drawPoint1->v[1]);
  v9 = drawPoint1->v[1] - drawPoint0->v[1];
  v11 = drawPoint1->v[2] - drawPoint0->v[2];
  *(float *)&v10 = fsqrt((float)((float)(v9 * v9) + (float)(v8 * v8)) + (float)(v11 * v11));
  _XMM1 = v10;
  __asm
  {
    vcmpless xmm0, xmm1, cs:__real@80000000
    vblendvps xmm0, xmm1, xmm10, xmm0
  }
  vec.v[0] = (float)(1.0 / *(float *)&_XMM0) * v8;
  vec.v[2] = (float)(1.0 / *(float *)&_XMM0) * v11;
  vec.v[1] = (float)(1.0 / *(float *)&_XMM0) * v9;
  vectoangles(&vec, &angles);
  AnglesToAxis(&angles, &axis);
  v15 = (float)(15.0 * vec.v[0]) + drawPoint0->v[0];
  v16 = (float)(15.0 * vec.v[1]) + drawPoint0->v[1];
  *(float *)v43 = 2.5 * axis.m[2].v[0];
  *(float *)&v43[2] = 2.5 * axis.m[2].v[2];
  *(float *)&v43[1] = 2.5 * axis.m[2].v[1];
  point.v[1] = 5.0 * axis.m[2].v[1];
  point.v[0] = 5.0 * axis.m[2].v[0];
  v17 = (float)(15.0 * vec.v[2]) + drawPoint0->v[2];
  point.v[2] = 5.0 * axis.m[2].v[2];
  v39 = drawPoint1->v[0] - (float)(15.0 * vec.v[0]);
  v40 = drawPoint1->v[1] - (float)(15.0 * vec.v[1]);
  v18 = 1;
  v19 = 1;
  v41 = drawPoint1->v[2] - (float)(15.0 * vec.v[2]);
  v37 = v17;
  v20 = 0;
  while ( 1 )
  {
    if ( v20 >= 4 )
    {
      v21 = (float)(v20 - 4) * 60.0;
      p_point = &point;
    }
    else
    {
      v21 = (float)((float)v20 * 90.0) + 45.0;
      p_point = (vec3_t *)v43;
    }
    RotatePointAroundVector(&dst, &vec, p_point, v21);
    v23 = dst.v[1] + drawPoint0->v[1];
    start.v[0] = dst.v[0] + drawPoint0->v[0];
    v24 = dst.v[2] + drawPoint0->v[2];
    start.v[1] = v23;
    v25 = dst.v[0] + drawPoint1->v[0];
    start.v[2] = v24;
    v26 = dst.v[1] + drawPoint1->v[1];
    end.v[0] = v25;
    v27 = dst.v[2] + drawPoint1->v[2];
    end.v[1] = v26;
    end.v[2] = v27;
    if ( !drawInsteadOfTrace )
      break;
    G_DebugLineWithDuration(&start, &end, &colorRedFaded, 1, 1);
LABEL_29:
    if ( ++v20 >= 10 )
      return 1i64;
  }
  v28 = v5;
  results.fraction = FLOAT_1_0;
  priorityMap = BG_GetWeaponPriorityMap(&NULL_WEAPON, 0);
  PhysicsQuery_LegacyTrace(PHYSICS_WORLD_ID_SERVER_DETAIL, &results, &start, &end, &bounds_origin, v5, 0, contents, 1, priorityMap, All);
  if ( results.fraction < 1.0 && (results.surfaceFlags & 0x100) == 0 )
  {
    v30 = DVARINT_bot_DrawSeeThrough;
    if ( !DVARINT_bot_DrawSeeThrough && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawSeeThrough") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v30);
    if ( v30->current.integer == 3 )
      goto LABEL_28;
    if ( !G_Main_SightTrace(&start, &end, v28, 2047, 41965569) )
      return 0i64;
    v31 = (float)((float)(end.v[0] - start.v[0]) * results.fraction) + start.v[0];
    v32 = (float)((float)(end.v[1] - start.v[1]) * results.fraction) + start.v[1];
    v33 = (float)((float)((float)(v16 - v32) * (float)(v16 - v32)) + (float)((float)(v15 - v31) * (float)(v15 - v31))) + (float)((float)(v17 - (float)((float)((float)(end.v[2] - start.v[2]) * results.fraction) + start.v[2])) * (float)(v17 - (float)((float)((float)(end.v[2] - start.v[2]) * results.fraction) + start.v[2])));
    v34 = (float)((float)((float)(v40 - v32) * (float)(v40 - v32)) + (float)((float)(v39 - v31) * (float)(v39 - v31))) + (float)((float)(v41 - (float)((float)((float)(end.v[2] - start.v[2]) * results.fraction) + start.v[2])) * (float)(v41 - (float)((float)((float)(end.v[2] - start.v[2]) * results.fraction) + start.v[2])));
    if ( v33 <= 1600.0 && v34 > 1600.0 )
      v18 = 0;
    if ( v34 > 1600.0 || v33 <= 1600.0 )
    {
      if ( v19 )
      {
LABEL_27:
        v17 = v37;
LABEL_28:
        v5 = entToIgnore;
        goto LABEL_29;
      }
    }
    else
    {
      v19 = 0;
    }
    if ( !v18 )
      return 0i64;
    goto LABEL_27;
  }
  return 0i64;
}

/*
==============
Bot_SetAttacker
==============
*/
void Bot_SetAttacker(bot_data_t *botData, gentity_s *attacker)
{
  gentity_s *ent; 
  AIBotInterface *m_pAI; 
  __int64 v6; 
  AIBotWrapper v7; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23418, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  AICommonInterface::AICommonInterface(&v7.m_botInterface);
  v7.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v7.m_botAgentInterface);
  ent = botData->botInfo.ent;
  v7.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v7.m_pAI = NULL;
  AIBotWrapper::Setup(&v7, ent);
  m_pAI = v7.m_pAI;
  if ( !v7.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23423, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  if ( attacker && (unsigned __int16)(attacker->s.number - 2046) > 1u && G_IsEntityInUse(attacker->s.number) )
  {
    if ( attacker->sentient )
    {
      EntHandle::setEnt(&botData->botInfo.ent->sentient->lastAttacker, attacker);
      AICommonInterface::WasAttackedBy(m_pAI, attacker->sentient);
      LOBYTE(v6) = 19;
      m_pAI->GetPerfectInfo(m_pAI, attacker->sentient, v6);
    }
  }
}

/*
==============
Bot_SetAwareness
==============
*/
void Bot_SetAwareness(bot_data_t *botData, float awareness)
{
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23440, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( awareness < 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23441, ASSERT_TYPE_ASSERT, "( awareness >= 0 )", (const char *)&queryFormat, "awareness >= 0") )
    __debugbreak();
  botData->botInfo.awareness = awareness;
}

/*
==============
Bot_SetBotPersistentMatchData
==============
*/
void Bot_SetBotPersistentMatchData(bot_data_t *botData, int firstConnect)
{
  const dvar_t *v3; 
  const dvar_t *v4; 
  bot_difficulty_t integer; 
  GameStateInfo *v6; 
  int flags; 
  int v8; 
  int v9; 
  int v10; 
  __int64 v11; 
  __int64 v12; 
  __int64 v13; 
  __int64 v14; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4725, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v3 = DVARINT_bot_DebugDifficulty;
  if ( !DVARINT_bot_DebugDifficulty && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DebugDifficulty") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v3);
  if ( v3->current.integer >= 4 )
  {
    v6 = GameStateInfo_Get();
    if ( !v6 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5045, ASSERT_TYPE_ASSERT, "( gInfo )", (const char *)&queryFormat, "gInfo") )
      __debugbreak();
    if ( !BG_BotsUsingTeamDifficulty() && v6->usingBotsDifficulty[0] != v6->usingBotsDifficulty[1] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5049, ASSERT_TYPE_ASSERT, "( BG_BotsUsingTeamDifficulty() || (gInfo->usingBotsDifficulty[0] == gInfo->usingBotsDifficulty[1]) )", (const char *)&queryFormat, "BG_BotsUsingTeamDifficulty() || (gInfo->usingBotsDifficulty[0] == gInfo->usingBotsDifficulty[1])") )
      __debugbreak();
    if ( v6->usingBotsDifficulty[0] >= 5u && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5050, ASSERT_TYPE_ASSERT, "( gInfo->usingBotsDifficulty[0] < BOT_DIFFICULTY_COUNT )", (const char *)&queryFormat, "gInfo->usingBotsDifficulty[0] < BOT_DIFFICULTY_COUNT") )
      __debugbreak();
    integer = v6->usingBotsDifficulty[0];
  }
  else
  {
    v4 = DVARINT_bot_DebugDifficulty;
    if ( !DVARINT_bot_DebugDifficulty && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DebugDifficulty") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v4);
    integer = v4->current.integer;
  }
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4842, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( (unsigned int)integer >= BOT_DIFFICULTY_COUNT )
  {
    LODWORD(v13) = 5;
    LODWORD(v11) = integer;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4843, ASSERT_TYPE_ASSERT, "(unsigned)( botDifficulty ) < (unsigned)( BOT_DIFFICULTY_COUNT )", "botDifficulty doesn't index BOT_DIFFICULTY_COUNT\n\t%i not in [0, %i)", v11, v13) )
      __debugbreak();
  }
  botData->botMatchData.difficulty = integer;
  Bot_LoadDifficultySettings(botData, integer);
  flags = botData->botMatchData.flags;
  v8 = G_rand();
  v9 = 1;
  if ( (flags & 0x20) != 0 )
    v9 = 3;
  v10 = v8 % v9;
  if ( (unsigned int)(v8 % v9) >= 3 )
  {
    LODWORD(v13) = 3;
    LODWORD(v11) = v8 % v9;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5081, ASSERT_TYPE_ASSERT, "(unsigned)( personalityChosen ) < (unsigned)( BOT_PERSONALITY_DEFAULT )", "personalityChosen doesn't index BOT_PERSONALITY_DEFAULT\n\t%i not in [0, %i)", v11, v13) )
      __debugbreak();
    LODWORD(v14) = 3;
    LODWORD(v12) = v10;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4780, ASSERT_TYPE_ASSERT, "(unsigned)( botPersonality ) < (unsigned)( BOT_PERSONALITY_DEFAULT )", "botPersonality doesn't index BOT_PERSONALITY_DEFAULT\n\t%i not in [0, %i)", v12, v14) )
      __debugbreak();
  }
  botData->botMatchData.personality = v10;
  if ( v10 )
    botData->botInfo.activeGoal.pathStyle = BOT_PATH_STYLE_DEFAULT;
  else
    botData->botInfo.activeGoal.pathStyle = 6 - (G_rand() % 2 != 0);
}

/*
==============
Bot_SetDifficulty
==============
*/
void Bot_SetDifficulty(bot_data_t *botData, bot_difficulty_t botDifficulty)
{
  __int64 v4; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4842, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( (unsigned int)botDifficulty >= BOT_DIFFICULTY_COUNT )
  {
    LODWORD(v4) = botDifficulty;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4843, ASSERT_TYPE_ASSERT, "(unsigned)( botDifficulty ) < (unsigned)( BOT_DIFFICULTY_COUNT )", "botDifficulty doesn't index BOT_DIFFICULTY_COUNT\n\t%i not in [0, %i)", v4, 5) )
      __debugbreak();
  }
  botData->botMatchData.difficulty = botDifficulty;
  Bot_LoadDifficultySettings(botData, botDifficulty);
}

/*
==============
Bot_SetDifficultySetting
==============
*/
__int64 Bot_SetDifficultySetting(bot_data_t *botData, const char *settingName, const char *settingValue)
{
  unsigned int v7; 
  bot_match_data_setting_t *matched; 
  __int64 offset; 
  int flag; 
  const char **v12; 
  bot_difficulty_t v13; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4895, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !settingName && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4896, ASSERT_TYPE_ASSERT, "( settingName )", (const char *)&queryFormat, "settingName") )
    __debugbreak();
  v7 = 0;
  matched = Bot_MatchDataSetting(settingName);
  if ( matched )
  {
    *(double *)&_XMM0 = atof(settingValue);
    offset = matched->offset;
    __asm { vcvtsd2ss xmm1, xmm0, xmm0 }
    if ( (_DWORD)offset == 3212 )
    {
      flag = matched->flag;
      if ( *(float *)&_XMM1 == 0.0 )
        botData->botMatchData.flags &= ~flag;
      else
        botData->botMatchData.flags |= flag;
    }
    else if ( (_DWORD)offset == 3416 )
    {
      v12 = BOT_BURST_FIRE_TYPE_STRINGS;
      v13 = BOT_DIFFICULTY_RECRUIT;
      while ( I_stricmp(settingValue, *v12) )
      {
        ++v13;
        if ( (__int64)++v12 >= (__int64)&BOT_BURST_FIRE_TYPE_STRINGS[3] )
          goto LABEL_18;
      }
      *(bot_difficulty_t *)((char *)&botData->botMatchData.difficulty + matched->offset) = v13;
LABEL_18:
      if ( v13 == BOT_DIFFICULTY_VETERAN && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4932, ASSERT_TYPE_ASSERT, (const char *)&queryFormat.fmt + 3, "Bot_SetDifficultySetting could not set '%s' with value '%s'.", settingName, settingValue) )
        __debugbreak();
    }
    else
    {
      *(bot_difficulty_t *)((char *)&botData->botMatchData.difficulty + offset) = _XMM1;
    }
  }
  LOBYTE(v7) = matched != NULL;
  return v7;
}

/*
==============
Bot_SetFrozenCmd
==============
*/
void Bot_SetFrozenCmd(bot_data_t *botData, usercmd_s *cmd)
{
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5516, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5517, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  botData->botInfo.lastFrozenTime = level.time;
  *(double *)cmd->angles.v = 0i64;
  cmd->angles.v[2] = 0;
  *(_WORD *)&cmd->forwardmove = 0;
}

/*
==============
Bot_SetMovementAlongNegotiation
==============
*/
void Bot_SetMovementAlongNegotiation(bot_data_t *botData, usercmd_s *cmd)
{
  playerState_s *playerState; 
  int v5; 
  unsigned __int16 nodeNegotStart; 
  BOOL v7; 
  BOOL v8; 
  pathnode_t *v9; 
  pathnode_t *v10; 
  int time; 
  float v12; 
  float v13; 
  int traversal; 
  const bitarray<224> *TeamFlag; 
  int v16; 
  nav_space_s *DefaultSpace; 
  $3396140AF3A78F7FCD1D73807E505015 *v18; 
  int traverseAvoidTime; 
  pathnode_t *v20; 
  float v21; 
  float v22; 
  float v23; 
  __int128 v24; 
  float v28; 
  float v29; 
  float NodeTraversalYaw; 
  gentity_s *ent; 
  float v32; 
  float v33; 
  __int128 v34; 
  float v38; 
  float v39; 
  int v40; 
  int v41; 
  float v42; 
  float v43; 
  __int64 usageFlags; 
  __int64 name; 
  __int64 bBadplace; 
  int byEnemy; 
  vec3_t start; 
  vec2_t forward; 
  vec2_t right; 
  vec3_t pos; 
  vec3_t dir; 
  vec3_t angles; 
  vec3_t pt; 
  vec3_t v55; 
  bitarray<224> result; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2369, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2370, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2373, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  v5 = 0;
  *(_WORD *)&cmd->forwardmove = 0;
  botData->botInfo.traversal &= ~0x1000u;
  nodeNegotStart = botData->botInfo.nodeNegotStart;
  byEnemy = 0;
  v7 = Path_NodeValid(nodeNegotStart);
  v8 = Path_NodeValid(botData->botInfo.nodeNegotEnd);
  if ( !v7 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2403, ASSERT_TYPE_ASSERT, "(negotStartValid)", "%s\n\tTraversal start node is invalid.  botInfo->traversal = %i, botInfo->nodeNegotStart = %i, botInfo->traverseJumpTime = %i", "negotStartValid", botData->botInfo.traversal, botData->botInfo.nodeNegotStart, botData->botInfo.traverseJumpTime) )
    __debugbreak();
  if ( !v8 )
  {
    LODWORD(bBadplace) = botData->botInfo.traverseJumpTime;
    LODWORD(name) = botData->botInfo.nodeNegotEnd;
    LODWORD(usageFlags) = botData->botInfo.traversal;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2405, ASSERT_TYPE_ASSERT, "(negotEndValid)", "%s\n\tTraversal end node is invalid.  botInfo->traversal = %i, botInfo->nodeNegotEnd = %i, botInfo->traverseJumpTime = %i", "negotEndValid", usageFlags, name, bBadplace) )
      __debugbreak();
  }
  if ( v7 && v8 )
  {
    if ( Path_NodeValid(botData->botInfo.nodeNegotStart) )
      v9 = Path_ConvertIndexToNode(botData->botInfo.nodeNegotStart);
    else
      v9 = NULL;
    if ( Path_NodeValid(botData->botInfo.nodeNegotEnd) )
      v10 = Path_ConvertIndexToNode(botData->botInfo.nodeNegotEnd);
    else
      v10 = NULL;
    if ( !v9 )
    {
      LODWORD(bBadplace) = botData->botInfo.traverseJumpTime;
      LODWORD(name) = botData->botInfo.nodeNegotStart;
      LODWORD(usageFlags) = botData->botInfo.traversal;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2411, ASSERT_TYPE_ASSERT, "(negotiationStartNode)", "%s\n\tNo traversal start node.  botInfo->traversal = %i, botInfo->nodeNegotStart = %i, botInfo->traverseJumpTime = %i", "negotiationStartNode", usageFlags, name, bBadplace) )
        __debugbreak();
    }
    if ( !v10 )
    {
      LODWORD(bBadplace) = botData->botInfo.traverseJumpTime;
      LODWORD(name) = botData->botInfo.nodeNegotEnd;
      LODWORD(usageFlags) = botData->botInfo.traversal;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2411, ASSERT_TYPE_ASSERT, "(negotiationEndNode)", "%s\n\tNo traversal end node.  botInfo->traversal = %i, botInfo->nodeNegotEnd = %i, botInfo->traverseJumpTime = %i", "negotiationEndNode", usageFlags, name, bBadplace) )
        __debugbreak();
    }
    pathnode_t::GetPos(v9, &pos);
    pathnode_t::GetPos(v10, &start);
    if ( (LOBYTE(botData->scriptedAgentInfo.scriptGoal.pos.y) & 1) != 0 && Bot_IsTraversalBlocked(botData, &byEnemy) )
    {
      if ( byEnemy )
      {
        if ( start.v[0] == 0.0 && start.v[1] == 0.0 && start.v[2] == 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14633, ASSERT_TYPE_ASSERT, "( Vec3NotZero( *point ) )", (const char *)&queryFormat, "Vec3NotZero( *point )") )
          __debugbreak();
        time = level.time;
        if ( botData->botInfo.lookAtType <= BOT_LOOK_CODE_SEEK || level.time >= botData->botInfo.lookAtTime )
        {
          v12 = start.v[0];
          v13 = start.v[1];
          botData->botInfo.lookAtType = BOT_LOOK_CODE_SEEK;
          botData->botInfo.lookAtTime = time + 500;
          botData->botInfo.lookAtPoint.v[0] = v12;
          botData->botInfo.lookAtPoint.v[2] = start.v[2];
          botData->botInfo.lookAtPoint.v[1] = v13;
          traversal = botData->botInfo.traversal;
          if ( (traversal & 1) != 0 )
            botData->botInfo.traversal = traversal & 0xFFFFFFFE;
        }
        TeamFlag = Com_Teams_GetTeamFlag(&result, botData->botInfo.sentient->eTeam);
        v16 = Nav_TranslateTeamFlagsToRepulsorUsageFlags(TeamFlag);
        DefaultSpace = Nav_GetDefaultSpace();
        Nav_CreateRepulsor(DefaultSpace, &pos, &vec3_origin, 10000, 128.0, 2047, v16, (const scr_string_t)0, 1);
        v5 = 1;
      }
      botData->botInfo.traversal |= 0x1000u;
      botData->botInfo.traverseWaitingTime += G_Level_GetFrameDuration();
      if ( botData->botInfo.traverseWaitingTime > 2500 || v5 )
      {
        v18 = &botData->8;
        Bot_PathClear(&botData->botInfo);
        traverseAvoidTime = level.time + 10000;
        if ( botData->botInfo.traverseAvoidTime > level.time + 10000 )
          traverseAvoidTime = botData->botInfo.traverseAvoidTime;
        botData->botInfo.traverseAvoidTime = traverseAvoidTime;
        goto LABEL_50;
      }
    }
    else
    {
      botData->botInfo.traverseWaitingTime = 0;
    }
    v18 = &botData->8;
LABEL_50:
    v20 = v9;
    botData->botInfo.sentient->bNearestNodeValid = 1;
    if ( (float)((float)((float)((float)(start.v[1] - v18->botInfo.ent->r.currentOrigin.v[1]) * (float)(start.v[1] - v18->botInfo.ent->r.currentOrigin.v[1])) + (float)((float)(start.v[0] - v18->botInfo.ent->r.currentOrigin.v[0]) * (float)(start.v[0] - v18->botInfo.ent->r.currentOrigin.v[0]))) + (float)((float)(start.v[2] - v18->botInfo.ent->r.currentOrigin.v[2]) * (float)(start.v[2] - v18->botInfo.ent->r.currentOrigin.v[2]))) <= (float)((float)((float)((float)(pos.v[1] - v18->botInfo.ent->r.currentOrigin.v[1]) * (float)(pos.v[1] - v18->botInfo.ent->r.currentOrigin.v[1])) + (float)((float)(pos.v[0] - v18->botInfo.ent->r.currentOrigin.v[0]) * (float)(pos.v[0] - v18->botInfo.ent->r.currentOrigin.v[0]))) + (float)((float)(pos.v[2] - v18->botInfo.ent->r.currentOrigin.v[2]) * (float)(pos.v[2] - v18->botInfo.ent->r.currentOrigin.v[2]))) )
      v20 = v10;
    botData->botInfo.sentient->pNearestNode = v20;
    YawVectors2D(playerState->viewangles.v[1], &forward, &right);
    if ( (LOBYTE(botData->scriptedAgentInfo.scriptGoal.pos.y) & 8) != 0 )
    {
      v21 = v18->botInfo.ent->r.currentOrigin.v[0];
      v22 = v18->botInfo.ent->r.currentOrigin.v[1];
      if ( (float)((float)((float)(v22 - pos.v[1]) * (float)(v22 - pos.v[1])) + (float)((float)(v21 - pos.v[0]) * (float)(v21 - pos.v[0]))) <= 4.0 )
      {
        if ( botData->botInfo.traverseProgressJumps > 0 && !Bot_IsOnGround(botData) )
          cmd->forwardmove = 127;
      }
      else
      {
        v23 = pos.v[0] - v21;
        v24 = LODWORD(pos.v[1]);
        *(float *)&v24 = fsqrt((float)((float)(pos.v[1] - v22) * (float)(pos.v[1] - v22)) + (float)(v23 * v23));
        _XMM2 = v24;
        __asm
        {
          vcmpless xmm0, xmm2, cs:__real@80000000
          vblendvps xmm0, xmm2, xmm1, xmm0
        }
        v28 = v23 * (float)(1.0 / *(float *)&_XMM0);
        v29 = (float)(pos.v[1] - v22) * (float)(1.0 / *(float *)&_XMM0);
        cmd->rightmove = (int)(float)((float)((float)(v29 * right.v[1]) + (float)(v28 * right.v[0])) * 32.0);
        if ( (botData->botInfo.traversal & 0x1000) == 0 )
          cmd->forwardmove = (int)(float)((float)((float)(v28 * forward.v[0]) + (float)(v29 * forward.v[1])) * 32.0);
      }
    }
    else
    {
      NodeTraversalYaw = Bot_GetNodeTraversalYaw(v9, v10, 1);
      angles.v[0] = 0.0;
      angles.v[1] = NodeTraversalYaw;
      angles.v[2] = 0.0;
      AngleVectors(&angles, &dir, NULL, NULL);
      ent = v18->botInfo.ent;
      pt.v[0] = (float)(20.0 * dir.v[0]) + v18->botInfo.ent->r.currentOrigin.v[0];
      pt.v[1] = (float)(20.0 * dir.v[1]) + ent->r.currentOrigin.v[1];
      pt.v[2] = (float)(20.0 * dir.v[2]) + ent->r.currentOrigin.v[2];
      PointOnLineClosestToPoint(&pt, &start, &dir, &v55);
      v32 = v55.v[0] - v18->botInfo.ent->r.currentOrigin.v[0];
      v34 = LODWORD(v55.v[1]);
      v33 = v55.v[1] - v18->botInfo.ent->r.currentOrigin.v[1];
      *(float *)&v34 = fsqrt((float)(v33 * v33) + (float)(v32 * v32));
      _XMM3 = v34;
      __asm
      {
        vcmpless xmm0, xmm3, cs:__real@80000000
        vblendvps xmm0, xmm3, xmm1, xmm0
      }
      v38 = v32 * (float)(1.0 / *(float *)&_XMM0);
      v39 = v33 * (float)(1.0 / *(float *)&_XMM0);
      v40 = (int)(float)((float)((float)(v38 * right.v[0]) + (float)(v39 * right.v[1])) * 127.0);
      cmd->rightmove = v40;
      v41 = botData->botInfo.traversal;
      if ( (v41 & 0x1000) == 0 )
      {
        if ( (v41 & 0x20000) == 0 && (v41 & 4) != 0 && (abs8(v40) > 0xAu || (v41 & 0x40000) != 0) )
        {
          if ( (v41 & 0x40000) != 0 )
          {
            cmd->rightmove = 0;
            cmd->forwardmove = 0;
          }
          else
          {
            cmd->forwardmove = (int)(float)((float)((float)(v39 * forward.v[1]) + (float)(v38 * forward.v[0])) * 32.0);
          }
        }
        else
        {
          v42 = v39 * forward.v[1];
          v43 = v38 * forward.v[0];
          botData->botInfo.traversal = v41 | 0x20000;
          cmd->forwardmove = (int)(float)((float)(v42 + v43) * 127.0);
          if ( (LOBYTE(botData->scriptedAgentInfo.scriptGoal.pos.y) & 4) != 0 && Bot_IsOnGround(botData) && !botData->botInfo.traverseProgressJumps && !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&playerState->pm_flags, ACTIVE, 0x19u) )
            cmd->buttons |= 2ui64;
        }
      }
    }
  }
}

/*
==============
Bot_SetPersonality
==============
*/
void Bot_SetPersonality(bot_data_t *botData, bot_personality_t botPersonality)
{
  __int64 v4; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4779, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( (unsigned int)botPersonality >= BOT_PERSONALITY_DEFAULT )
  {
    LODWORD(v4) = botPersonality;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4780, ASSERT_TYPE_ASSERT, "(unsigned)( botPersonality ) < (unsigned)( BOT_PERSONALITY_DEFAULT )", "botPersonality doesn't index BOT_PERSONALITY_DEFAULT\n\t%i not in [0, %i)", v4, 3) )
      __debugbreak();
  }
  botData->botMatchData.personality = botPersonality;
  if ( botPersonality )
    botData->botInfo.activeGoal.pathStyle = BOT_PATH_STYLE_DEFAULT;
  else
    botData->botInfo.activeGoal.pathStyle = 6 - (G_rand() % 2 != 0);
}

/*
==============
Bot_SetScriptEnemy
==============
*/
void Bot_SetScriptEnemy(bot_data_t *botData, gentity_s *enemy)
{
  gentity_s *ent; 
  AIBotInterface *m_pAI; 
  sentient_s *sentient; 
  int BoneIndex; 
  __int64 v8; 
  AIBotWrapper v9; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23365, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !enemy && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23366, ASSERT_TYPE_ASSERT, "( enemy )", (const char *)&queryFormat, "enemy") )
    __debugbreak();
  if ( !enemy->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23367, ASSERT_TYPE_ASSERT, "( enemy->sentient )", (const char *)&queryFormat, "enemy->sentient") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23368, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !botData->botInfo.ent->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23369, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent->sentient )", (const char *)&queryFormat, "botData->botInfo.ent->sentient") )
    __debugbreak();
  AICommonInterface::AICommonInterface(&v9.m_botInterface);
  v9.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v9.m_botAgentInterface);
  ent = botData->botInfo.ent;
  v9.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v9.m_pAI = NULL;
  AIBotWrapper::Setup(&v9, ent);
  m_pAI = v9.m_pAI;
  if ( !v9.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23371, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  sentient = botData->botInfo.ent->sentient;
  EntHandle::setEnt(&sentient->scriptTargetEnt, enemy);
  BoneIndex = SV_Game_DObjGetBoneIndex(enemy, scr_const.tag_eye);
  sentient->entityTargetThreat = 1.0;
  sentient->scriptTargetHasTagEye = BoneIndex >= 0;
  Sentient_SetEnemy(sentient, enemy, 1, 1);
  LOBYTE(v8) = 17;
  m_pAI->GetPerfectInfo(m_pAI, enemy->sentient, v8);
}

/*
==============
Bot_SetScriptFlag
==============
*/
void Bot_SetScriptFlag(bot_data_t *botData, int flag, int value)
{
  int v6; 
  int scriptFlags; 
  AINavigator *pNavigator; 
  int v9; 
  int v10; 
  int v11; 
  int v12; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22858, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( flag >= 25 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22859, ASSERT_TYPE_ASSERT, "( flag < BOT_SCR_FLAG_COUNT )", (const char *)&queryFormat, "flag < BOT_SCR_FLAG_COUNT") )
    __debugbreak();
  if ( flag )
  {
    if ( flag == 1 )
    {
      scriptFlags = botData->botInfo.scriptFlags;
      if ( value )
      {
        pNavigator = botData->botInfo.pNavigator;
        botData->botInfo.scriptFlags = scriptFlags | 2;
        pNavigator->ClearPath(pNavigator);
      }
      else
      {
        botData->botInfo.scriptFlags = scriptFlags & 0xFFFFFFFD;
      }
    }
    else if ( flag == 19 )
    {
      v9 = botData->botInfo.scriptFlags;
      v10 = v9 | 0x80000;
      if ( !value )
        v10 = botData->botInfo.scriptFlags & 0xFFF7FFFF;
      botData->botInfo.scriptFlags = v10;
      if ( v9 != v10 )
        Bot_CalculateLauncherCombatChance(botData);
    }
    else
    {
      v11 = 0;
      switch ( flag )
      {
        case 2:
          v11 = 4;
          break;
        case 3:
          v11 = 8;
          break;
        case 4:
          v11 = 16;
          break;
        case 5:
          v11 = 32;
          break;
        case 6:
          v11 = 64;
          break;
        case 7:
          v11 = 128;
          break;
        case 8:
          v11 = 256;
          break;
        case 9:
          v11 = 512;
          break;
        case 10:
          v11 = 1024;
          break;
        case 11:
          v11 = 2048;
          break;
        case 12:
          v11 = 4096;
          break;
        case 13:
          v11 = 0x2000;
          break;
        case 14:
          v11 = 0x4000;
          break;
        case 17:
          v11 = 0x20000;
          break;
        case 18:
          v11 = 0x40000;
          break;
        case 20:
          v11 = 0x100000;
          break;
        case 21:
          v11 = 0x200000;
          break;
        case 15:
          v11 = 0x8000;
          break;
        case 16:
          v11 = 0x10000;
          break;
        case 22:
          v11 = 0x400000;
          break;
        case 23:
          v11 = 0x800000;
          break;
        case 24:
          v11 = 0x1000000;
          break;
        default:
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22951, ASSERT_TYPE_ASSERT, "( botInfoFlag > 0 )", (const char *)&queryFormat, "botInfoFlag > 0") )
            __debugbreak();
          break;
      }
      v12 = botData->botInfo.scriptFlags;
      if ( value )
        botData->botInfo.scriptFlags = v11 | v12;
      else
        botData->botInfo.scriptFlags = v12 & ~v11;
    }
  }
  else
  {
    v6 = botData->botInfo.scriptFlags & 0xFFFFFFFE;
    if ( !value )
      v6 = botData->botInfo.scriptFlags | 1;
    botData->botInfo.scriptFlags = v6;
  }
}

/*
==============
Bot_SetScriptGoal
==============
*/
__int64 Bot_SetScriptGoal(bot_data_t *botData, const vec3_t *goal, float goalRadius, bot_scr_goal_t goalType, float *goalYaw, float objectiveRadius, int shortTermGoal)
{
  float v13; 
  float v14; 
  float v15; 
  int flags; 
  BOOL v17; 
  int v18; 
  __int64 result; 
  float v20; 
  float v21; 
  float v22; 
  pathnode_t *v23; 
  pathnode_t *v24; 
  unsigned int v25; 
  unsigned int v26; 
  int v27; 
  unsigned int v28; 
  vec3_t goala; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22996, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22997, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( goalRadius < 0.0 )
  {
    __asm { vxorpd  xmm0, xmm0, xmm0 }
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22998, ASSERT_TYPE_ASSERT, "( goalRadius ) >= ( 0.0f )", "goalRadius >= 0.0f\n\t%g, %g", goalRadius, *(double *)&_XMM0) )
      __debugbreak();
  }
  if ( !Bot_CanSetScriptGoalType(botData, goalType) )
    return 0i64;
  if ( botData->botInfo.scriptGoal.type )
  {
    Bot_GetScriptGoal(botData, &goala);
    v13 = goala.v[2];
    v14 = goala.v[1];
    v15 = goala.v[0];
  }
  else
  {
    v15 = 0.0;
    v14 = 0.0;
    v13 = 0.0;
    goala.v[0] = 0.0;
    goala.v[1] = 0.0;
    goala.v[2] = 0.0;
  }
  flags = botData->botInfo.flags;
  v17 = goalYaw && (flags & 4) == 0;
  if ( !goalYaw && (flags & 4) != 0 )
  {
    v18 = 1;
LABEL_21:
    result = 0i64;
    goto LABEL_22;
  }
  v18 = 0;
  if ( !goalYaw || botData->botInfo.scriptGoal.yaw == *goalYaw )
    goto LABEL_21;
  result = 1i64;
LABEL_22:
  if ( (float)((float)((float)((float)(goal->v[1] - v14) * (float)(goal->v[1] - v14)) + (float)((float)(goal->v[0] - v15) * (float)(goal->v[0] - v15))) + (float)((float)(goal->v[2] - v13) * (float)(goal->v[2] - v13))) > 0.0099999998 )
  {
    Bot_ClearScriptGoal(botData);
    v20 = goal->v[0];
    botData->botInfo.scriptGoal.pos.v[0] = goal->v[0];
    v21 = goal->v[1];
    botData->botInfo.scriptGoal.pos.v[1] = v21;
    v22 = goal->v[2];
    botData->botInfo.scriptGoal.pos.v[2] = v22;
    if ( v20 == 0.0 && v21 == 0.0 && v22 == 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23038, ASSERT_TYPE_ASSERT, "( Vec3NotZero( botInfo->scriptGoal.pos ) )", (const char *)&queryFormat, "Vec3NotZero( botInfo->scriptGoal.pos )") )
      __debugbreak();
    AICommonInterface::SetGoalHeight(&botData->botInfo.scriptGoal, 0.0, 1);
    botData->botInfo.scriptGoal.node = NULL;
    if ( SV_BotRequirePathnodes(botData) )
    {
      v23 = Path_NearestNode(goal, botData->botInfo.ent->clipmask, NULL);
      v24 = v23;
      if ( v23 )
        Bot_StampNodeArea(botData, v23);
      botData->botInfo.scriptGoal.nearestNode = v24;
      if ( v24 )
        pathnode_t::LocalizePosToParent(v24, &botData->botInfo.scriptGoal.pos);
    }
  }
  else if ( goalRadius == botData->botInfo.scriptGoal.radius && !v17 && !v18 && !(_DWORD)result && botData->botInfo.scriptGoal.type == (unsigned __int8)goalType )
  {
    return result;
  }
  botData->botInfo.scriptGoal.type = goalType;
  botData->botInfo.scriptGoal.objectiveRadius = objectiveRadius;
  botData->botInfo.scriptGoal.radius = goalRadius;
  if ( goalYaw )
  {
    botData->botInfo.scriptGoal.yaw = *goalYaw;
    v25 = botData->botInfo.flags | 4;
  }
  else
  {
    v25 = botData->botInfo.flags & 0xFFFFFFFB;
  }
  v26 = v25;
  v27 = v25 | 0x4000000;
  v28 = v26 & 0xFBFFFFFF;
  if ( !shortTermGoal )
    v27 = v28;
  botData->botInfo.flags = v27 & 0xFFFFFFF7;
  return 1i64;
}

/*
==============
Bot_SetScriptGoalNode
==============
*/
__int64 Bot_SetScriptGoalNode(bot_data_t *botData, unsigned __int16 pathNodeNum, float goalRadius, bot_scr_goal_t goalType, float *goalYaw, float objectiveRadius, int shortTermGoal)
{
  pathnode_t *v12; 
  int flags; 
  BOOL v14; 
  int v15; 
  __int64 result; 
  unsigned int v17; 
  unsigned int v18; 
  int v19; 
  unsigned int v20; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23158, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23159, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( goalRadius < 0.0 )
  {
    __asm { vxorpd  xmm0, xmm0, xmm0 }
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23160, ASSERT_TYPE_ASSERT, "( goalRadius ) >= ( 0 )", "goalRadius >= 0\n\t%g, %g", goalRadius, *(double *)&_XMM0) )
      __debugbreak();
  }
  if ( !Bot_CanSetScriptGoalType(botData, goalType) || !Path_NodeValid(pathNodeNum) )
    return 0i64;
  v12 = Path_ConvertIndexToNode(pathNodeNum);
  if ( !v12 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23179, ASSERT_TYPE_ASSERT, "( node )", (const char *)&queryFormat, "node") )
    __debugbreak();
  flags = botData->botInfo.flags;
  v14 = goalYaw && (flags & 4) == 0;
  if ( !goalYaw && (flags & 4) != 0 )
  {
    v15 = 1;
LABEL_22:
    result = 0i64;
    goto LABEL_23;
  }
  v15 = 0;
  if ( !goalYaw || botData->botInfo.scriptGoal.yaw == *goalYaw )
    goto LABEL_22;
  result = 1i64;
LABEL_23:
  if ( botData->botInfo.scriptGoal.node == v12 )
  {
    if ( goalRadius == botData->botInfo.scriptGoal.radius && !v14 && !v15 && !(_DWORD)result && botData->botInfo.scriptGoal.type == (unsigned __int8)goalType )
      return result;
  }
  else
  {
    Bot_ClearScriptGoal(botData);
    Bot_ForceClaimNode(&botData->botInfo, v12);
    pathnode_t::GetPos(v12, &botData->botInfo.scriptGoal.pos);
    if ( botData->botInfo.scriptGoal.pos.v[0] == 0.0 && botData->botInfo.scriptGoal.pos.v[1] == 0.0 && botData->botInfo.scriptGoal.pos.v[2] == 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23198, ASSERT_TYPE_ASSERT, "( Vec3NotZero( botInfo->scriptGoal.pos ) )", (const char *)&queryFormat, "Vec3NotZero( botInfo->scriptGoal.pos )") )
      __debugbreak();
    botData->botInfo.scriptGoal.node = v12;
    botData->botInfo.scriptGoal.nearestNode = v12;
    pathnode_t::LocalizePosToParent(v12, &botData->botInfo.scriptGoal.pos);
    if ( botData->botInfo.scriptGoal.pos.v[0] == 0.0 && botData->botInfo.scriptGoal.pos.v[1] == 0.0 && botData->botInfo.scriptGoal.pos.v[2] == 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23203, ASSERT_TYPE_ASSERT, "( Vec3NotZero( botInfo->scriptGoal.pos ) )", (const char *)&queryFormat, "Vec3NotZero( botInfo->scriptGoal.pos )") )
      __debugbreak();
    Bot_StampNodeArea(botData, botData->botInfo.scriptGoal.nearestNode);
  }
  botData->botInfo.scriptGoal.type = goalType;
  botData->botInfo.scriptGoal.objectiveRadius = objectiveRadius;
  botData->botInfo.scriptGoal.radius = goalRadius;
  if ( goalYaw )
  {
    botData->botInfo.scriptGoal.yaw = *goalYaw;
    v17 = botData->botInfo.flags | 4;
  }
  else
  {
    v17 = botData->botInfo.flags & 0xFFFFFFFB;
  }
  v18 = v17;
  v19 = v17 | 0x4000000;
  v20 = v18 & 0xFBFFFFFF;
  if ( !shortTermGoal )
    v19 = v20;
  botData->botInfo.flags = v19 & 0xFFFFFFF7;
  return 1i64;
}

/*
==============
Bot_SetScriptMove
==============
*/

void __fastcall Bot_SetScriptMove(bot_data_t *botData, double yaw, int duration, float speed, int moveRemoteControl, int moveStickSwap)
{
  float v8; 
  int v10; 

  v8 = *(float *)&yaw;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22967, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( speed < 0.0 || speed > 1.0 )
  {
    __asm { vxorpd  xmm1, xmm1, xmm1 }
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22968, ASSERT_TYPE_ASSERT, "( 0.0f ) <= ( speed ) && ( speed ) <= ( 1.0f )", "speed not in [0.0f, 1.0f]\n\t%g not in [%g, %g]", speed, *(double *)&_XMM1, DOUBLE_1_0) )
      __debugbreak();
  }
  botData->botInfo.scriptMoveYaw = v8;
  v10 = duration + level.time;
  botData->botInfo.scriptMoveRemoteControl = moveRemoteControl;
  botData->botInfo.scriptMoveSpeed = speed;
  botData->botInfo.scriptMoveTime = v10;
  botData->botInfo.scriptMoveStickSwap = moveStickSwap;
}

/*
==============
Bot_SetSightFovValues
==============
*/
void Bot_SetSightFovValues(bot_data_t *botData)
{
  double MaxFov; 

  if ( !botData )
  {
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4538, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
      __debugbreak();
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20516, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
      __debugbreak();
  }
  MaxFov = Bot_GetMaxFov(botData);
  *(float *)&MaxFov = cosf_0((float)(*(float *)&MaxFov * 0.017453292) * 0.5);
  botData->botInfo.sight.fovDot = *(float *)&MaxFov;
  botData->botInfo.sight.fovDotBusy = *(float *)&MaxFov;
  botData->botInfo.sight.fovDotZ = (float)(*(float *)&MaxFov * 0.56) + 0.44;
}

/*
==============
Bot_ShouldADS
==============
*/
_BOOL8 Bot_ShouldADS(bot_data_t *botData, const playerState_s *ps)
{
  const Weapon *ViewmodelWeapon; 
  GWeaponMap *Instance; 
  gentity_s *Enemy; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20235, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !ps && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20236, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(ps);
  if ( !GameModeFlagContainer<enum PWeaponFlagsCommon,enum PWeaponFlagsSP,enum PWeaponFlagsMP,64>::TestFlagInternal(&ps->weapCommon.weapFlags, ACTIVE, 5u) && !BG_IsUsingOffhandGestureWeapon(ps) && ((botData->botMatchData.flags & 2) != 0 || Bot_IsCamping(botData) || Bot_Weap_IsWeapClass(ps, ViewmodelWeapon, WEAPCLASS_SNIPER)) )
  {
    Instance = GWeaponMap::GetInstance();
    if ( !BG_PlayerDualWieldingWeapon(Instance, ps, ViewmodelWeapon) )
    {
      Enemy = Bot_GetEnemy(botData);
      if ( (LOBYTE(botData->scriptedAgentInfo.blackboard.m_ShootParams.m_Pos.v[0]) & 0x10) == 0 && Bot_Weap_IsADSWeapon(ps, ViewmodelWeapon) && !Bot_ShouldRushEnemy(botData) && !Bot_EnemyPreferMelee(botData) )
      {
        if ( Bot_Weap_IsADSOnlyWeapon(ps, ViewmodelWeapon) )
          return 1i64;
        if ( Bot_IsIdleAtScriptGoal(botData) )
        {
          if ( !Enemy )
            return 1i64;
        }
        else if ( !Enemy )
        {
          return Bot_IsFireFromHipRange(botData) == 0;
        }
        if ( !Bot_EnemyFacesBot(botData) )
          return 1i64;
        return Bot_IsFireFromHipRange(botData) == 0;
      }
    }
  }
  return 0i64;
}

/*
==============
Bot_ShouldAvoidTraversals
==============
*/
_BOOL8 Bot_ShouldAvoidTraversals(const bot_data_t *botData)
{
  playerState_s *playerState; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8775, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( botData == (const bot_data_t *)-8i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4363, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  if ( !botData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4364, ASSERT_TYPE_ASSERT, "( botInfo->playerState )", (const char *)&queryFormat, "botInfo->playerState") )
    __debugbreak();
  if ( (botData->botInfo.scriptFlags & 0x8000) != 0 )
    return 1i64;
  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8781, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  return Bot_ShouldFireOnEnemyInSight(botData) || playerState->damageCount || level.time <= botData->botInfo.traverseAvoidTime;
}

/*
==============
Bot_ShouldCombatMove
==============
*/
_BOOL8 Bot_ShouldCombatMove(const bot_data_t *botData)
{
  char v2; 
  const gentity_s *v3; 
  _BOOL8 result; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8290, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v2 = botData->botInfo.currentStanceFlags & 3;
  result = 1;
  if ( !Bot_EnemyPreferMelee(botData) )
  {
    if ( Bot_IsCamping(botData) )
      return 0;
    if ( !v2 )
      return 0;
    if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
    {
      v3 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
      if ( v3 )
      {
        if ( Bot_IsInRangeOfEnemy(botData) && Bot_Weap_HasWeaponWithNormalAmmo(botData) && Bot_IsHardwareEnt(v3) )
          return 0;
      }
    }
  }
  return result;
}

/*
==============
Bot_ShouldCombatMoveEvade
==============
*/
_BOOL8 Bot_ShouldCombatMoveEvade(const bot_data_t *botData)
{
  playerState_s *playerState; 
  const Weapon *ViewmodelWeapon; 
  int v4; 
  gentity_s *v5; 
  int CanFireOnEnemy; 
  int v7; 
  double MaxRangeBase; 
  double MinRange; 
  const playerState_s *EntityPlayerState; 
  const playerState_s *v11; 
  const Weapon *v12; 
  double MaxRange; 
  _BOOL8 result; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8331, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8332, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8335, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(playerState);
  v4 = 0;
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
    v5 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
  else
    v5 = NULL;
  CanFireOnEnemy = Bot_CanSeeAndCanFireOnEnemy(botData);
  v7 = Bot_EnemyFacesBot(botData);
  result = 0;
  if ( Bot_ShouldCombatMove(botData) && v5 && CanFireOnEnemy )
  {
    if ( Bot_IsReloading(botData) )
      return 1;
    if ( v7 )
    {
      MaxRangeBase = Bot_Weap_GetMaxRangeBase(playerState, ViewmodelWeapon);
      if ( (float)(*(float *)&MaxRangeBase * 0.75) >= botData->botInfo.enemyTrack.lastDist && (Bot_IsFireFromHipRange(botData) || !Bot_Weap_IsWeapClass(playerState, ViewmodelWeapon, WEAPCLASS_SNIPER)) )
      {
        MinRange = Bot_Weap_GetMinRange(playerState, ViewmodelWeapon);
        LOBYTE(v4) = (float)(*(float *)&MinRange * 1.25) > botData->botInfo.enemyTrack.lastDist;
        if ( Bot_Weap_IsDoingADS(botData) )
        {
          if ( v4 )
            return 1;
        }
        EntityPlayerState = G_GetEntityPlayerState(v5);
        v11 = EntityPlayerState;
        if ( !EntityPlayerState )
          return 1;
        v12 = Bot_Weap_GetViewmodelWeapon(EntityPlayerState);
        MaxRange = Bot_Weap_GetMaxRange(v11, v12);
        if ( *(float *)&MaxRange >= botData->botInfo.enemyTrack.lastDist )
          return 1;
      }
    }
  }
  return result;
}

/*
==============
Bot_ShouldDelayPathGen
==============
*/
_BOOL8 Bot_ShouldDelayPathGen(const bot_data_t *botData)
{
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9843, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  return level.time - botData->botInfo.noPathFoundTimeLast <= 500;
}

/*
==============
Bot_ShouldDelayScriptGoal
==============
*/
__int64 Bot_ShouldDelayScriptGoal(const bot_data_t *botData)
{
  unsigned int v2; 
  int v3; 
  gentity_s *ent; 
  AIBotInterface *m_pAI; 
  const gentity_s *v6; 
  int ShouldDelayScriptGoalForAISearch; 
  AIBotWrapper v9; 
  vec3_t goal; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24023, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24025, ASSERT_TYPE_ASSERT, "( botInfo->sentient )", (const char *)&queryFormat, "botInfo->sentient") )
    __debugbreak();
  v2 = 0;
  v3 = 0;
  AICommonInterface::AICommonInterface(&v9.m_botInterface);
  v9.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v9.m_botAgentInterface);
  ent = botData->botInfo.ent;
  v9.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v9.m_pAI = NULL;
  AIBotWrapper::Setup(&v9, ent);
  m_pAI = v9.m_pAI;
  if ( !v9.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24034, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  if ( botData->botInfo.scriptGoal.type == BOT_SCR_GOAL_NONE )
    return 0i64;
  if ( Bot_IsGoalInBadPlace(&botData->botInfo, &botData->botInfo.scriptGoal) || AICommonInterface::IsInAnyBadPlace(m_pAI) )
    return 1i64;
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
  {
    v6 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
    if ( v6 && Bot_CanReactEnemy(botData) && !Bot_FinishedSearchingForEnemy(botData, v6) )
      v3 = 1;
  }
  else
  {
    v6 = NULL;
  }
  Bot_GetScriptGoal(botData, &goal);
  if ( v6 )
  {
    if ( Bot_IsPointInRangeOfHardwareEntExplosion(v6, &goal) )
      return 1i64;
  }
  if ( Bot_GetHidingFromEntity(botData) && botData->botInfo.scriptGoal.type <= BOT_SCR_GOAL_OBJECTIVE )
    return 1i64;
  ShouldDelayScriptGoalForAISearch = Bot_ShouldDelayScriptGoalForAISearch(botData);
  if ( botData->botInfo.scriptGoal.type == BOT_SCR_GOAL_HUNT )
    goto LABEL_37;
  if ( botData->botInfo.scriptGoal.type != BOT_SCR_GOAL_GUARD )
  {
    if ( botData->botInfo.scriptGoal.type != BOT_SCR_GOAL_CAMP )
    {
      if ( botData->botInfo.scriptGoal.type != BOT_SCR_GOAL_OBJECTIVE )
        return !v6 && level.time - botData->botInfo.enemyTrack.lastEnemyTime <= m_pAI->GetThreatUpdateInterval(m_pAI);
      if ( Bot_CloseToObjectiveGoal(botData) )
        return 0i64;
    }
    if ( Bot_IsCamping(botData) && !Bot_IsFireFromHipRange(botData) )
      return 0i64;
  }
  if ( !Bot_CanSeeEnemy(botData) && !Bot_EnemyIsAttackingMe(botData, 3000) && botData->botInfo.enemyTrack.lastDist >= 500.0 )
  {
    if ( ShouldDelayScriptGoalForAISearch )
      return 1i64;
    return !v6 && level.time - botData->botInfo.enemyTrack.lastEnemyTime <= m_pAI->GetThreatUpdateInterval(m_pAI);
  }
LABEL_37:
  if ( v3 || ShouldDelayScriptGoalForAISearch )
    return 1;
  return v2;
}

/*
==============
Bot_ShouldDelayScriptGoalForAISearch
==============
*/
_BOOL8 Bot_ShouldDelayScriptGoalForAISearch(const bot_data_t *botData)
{
  _BOOL8 result; 
  vec3_t goal; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9572, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  result = 0;
  if ( botData->botInfo.currentAISearch.currentNodeCount )
  {
    if ( botData->botInfo.aiSearchScriptGoalType == botData->botInfo.scriptGoal.type )
    {
      Bot_GetScriptGoal(botData, &goal);
      if ( (float)((float)((float)((float)(botData->botInfo.aiSearchScriptGoalPos.v[1] - goal.v[1]) * (float)(botData->botInfo.aiSearchScriptGoalPos.v[1] - goal.v[1])) + (float)((float)(botData->botInfo.aiSearchScriptGoalPos.v[0] - goal.v[0]) * (float)(botData->botInfo.aiSearchScriptGoalPos.v[0] - goal.v[0]))) + (float)((float)(botData->botInfo.aiSearchScriptGoalPos.v[2] - goal.v[2]) * (float)(botData->botInfo.aiSearchScriptGoalPos.v[2] - goal.v[2]))) < 1000000.0 )
        return 1;
    }
  }
  return result;
}

/*
==============
Bot_ShouldDrawDebugForBot
==============
*/
_BOOL8 Bot_ShouldDrawDebugForBot(const bot_data_t *botData)
{
  const dvar_t *v2; 
  const dvar_t *v3; 
  const dvar_t *v4; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21656, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21657, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  v2 = DVARINT_bot_DrawDebugOnlySpectated;
  if ( !DVARINT_bot_DrawDebugOnlySpectated && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebugOnlySpectated") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v2);
  if ( v2->current.integer == 1 && botData != Bot_GetSpectatedBotData(LOCAL_CLIENT_0) )
    return 0i64;
  v3 = DVARINT_bot_DrawDebugOnlyEntityNum;
  if ( !DVARINT_bot_DrawDebugOnlyEntityNum && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebugOnlyEntityNum") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v3);
  if ( v3->current.integer >= 0 )
  {
    v4 = DVARINT_bot_DrawDebugOnlyEntityNum;
    if ( !DVARINT_bot_DrawDebugOnlyEntityNum && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebugOnlyEntityNum") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v4);
    if ( botData->botInfo.ent->s.number != v4->current.integer )
      return 0i64;
  }
  return Bot_IsCharacterActive(botData->botInfo.ent) != 0;
}

/*
==============
Bot_ShouldFireOnEnemyInSight
==============
*/
_BOOL8 Bot_ShouldFireOnEnemyInSight(const bot_data_t *botData)
{
  playerState_s *playerState; 
  gentity_s *Enemy; 
  const pathnode_t *v5; 
  double RangeMax; 
  bool v7; 
  unsigned __int16 weaponIdx; 
  bool v9; 
  bool IsOKToFireSplashDamageWeaponFrom; 
  double explosionRadius; 
  const dvar_t *v12; 
  gentity_s *ent; 
  __int64 bUsingAlternate; 
  Weapon weap; 
  vec3_t aimPoint; 
  vec3_t eyePoint; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8695, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8698, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  weap = *Bot_Weap_GetViewmodelWeapon(playerState);
  if ( Bot_Weap_IsNone(&weap) || !Bot_CanAttack(botData) || GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 0x25u) || Bot_IsSliding(botData) || !EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) || !Bot_CanSeeAndCanFireOnEnemy(botData) )
    return 0i64;
  if ( Bot_EnemyFacesBot(botData) )
  {
    if ( !Bot_Weap_CurrentWeapCanDamageEnemy(botData, 1.5) )
      return 0i64;
  }
  else if ( !Bot_IsInRangeOfEnemy(botData) )
  {
    return 0i64;
  }
  Enemy = Bot_GetEnemy(botData);
  if ( !Enemy && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8734, ASSERT_TYPE_ASSERT, "( enemy )", (const char *)&queryFormat, "enemy") )
    __debugbreak();
  if ( Bot_EntityIsConsideredDead(Enemy) || !Bot_Weap_IsWeapClass(playerState, &weap, WEAPCLASS_TURRET) && !Bot_Weap_Ammo(playerState, &weap) )
    return 0i64;
  if ( Bot_EnemyPreferMelee(botData) )
    return 0i64;
  if ( Bot_Weap_IsWeapClass(playerState, &weap, WEAPCLASS_ROCKETLAUNCHER) )
  {
    if ( !Sentient_IsAerial(Enemy->sentient) )
    {
      v5 = Sentient_NearestNode(botData->botInfo.sentient);
      if ( v5 )
      {
        RangeMax = Path_NodeExposureGetRangeMax(v5, playerState->viewangles.v[1], 4);
        if ( *(float *)&RangeMax < 500.0 )
          return 0i64;
      }
    }
  }
  v7 = BG_UsingAlternate(playerState);
  weaponIdx = weap.weaponIdx;
  v9 = v7;
  if ( weap.weaponIdx > bg_lastParsedWeaponIndex )
  {
    LODWORD(bUsingAlternate) = weap.weaponIdx;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\bgame\\bg_weapons_util.h", 1203, ASSERT_TYPE_ASSERT, "( weaponIdx ) <= ( bg_lastParsedWeaponIndex )", "weaponIdx not in [0, bg_lastParsedWeaponIndex]\n\t%u not in [0, %u]", bUsingAlternate, bg_lastParsedWeaponIndex) )
      __debugbreak();
  }
  if ( !bg_weaponDefs[weaponIdx] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\bgame\\bg_weapons_util.h", 1204, ASSERT_TYPE_ASSERT, "(bg_weaponDefs[weaponIdx])", (const char *)&queryFormat, "bg_weaponDefs[weaponIdx]") )
    __debugbreak();
  if ( bg_weaponDefs[weaponIdx]->bBulletExplosiveDamage )
  {
    explosionRadius = BG_WeaponBulletFire_GetExplRadius(&weap, v9);
    if ( *(float *)&explosionRadius > 0.0 )
    {
      if ( level.time - botData->botInfo.lastSplashDamageCheckTime >= 200 )
      {
        Bot_GetEnemyAimPoints(botData, Enemy, &aimPoint, &eyePoint);
        v12 = DVARBOOL_bot_DrawSplashDamageChecks;
        if ( !DVARBOOL_bot_DrawSplashDamageChecks && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 692, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawSplashDamageChecks") )
          __debugbreak();
        Dvar_CheckFrontendServerThread(v12);
        if ( v12->current.enabled )
          Com_Printf(18, "%d) Doing extended splash damage checks for entnum (%d)\n", (unsigned int)level.time, (unsigned int)botData->botInfo.ent->s.number);
        ent = botData->botInfo.ent;
        botData->botInfo.lastSplashDamageCheckTime = level.time;
        SV_BotUpdateEyeInfo(ent);
        IsOKToFireSplashDamageWeaponFrom = Bot_IsOKToFireSplashDamageWeaponFrom(botData, Enemy, &weap, &botData->botInfo.eyeInfo.pos, &aimPoint, v9, *(float *)&explosionRadius);
      }
      else
      {
        IsOKToFireSplashDamageWeaponFrom = botData->botInfo.lastSplashDamageCheckResult;
      }
    }
    else
    {
      IsOKToFireSplashDamageWeaponFrom = 1;
    }
  }
  else
  {
    IsOKToFireSplashDamageWeaponFrom = 1;
  }
  botData->botInfo.lastSplashDamageCheckResult = IsOKToFireSplashDamageWeaponFrom;
  return IsOKToFireSplashDamageWeaponFrom;
}

/*
==============
Bot_ShouldForceGrenadeThrow
==============
*/
int Bot_ShouldForceGrenadeThrow(const bot_data_t *botData, int enemyLookingAtMe)
{
  const dvar_t *v4; 
  int result; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19117, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v4 = DVARBOOL_bot_ForceGrenadeThrow;
  if ( !DVARBOOL_bot_ForceGrenadeThrow && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 692, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_ForceGrenadeThrow") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v4);
  if ( v4->current.enabled || (botData->botInfo.scriptFlags & 0xC0000) != 0 && !enemyLookingAtMe )
    return 1;
  result = Bot_Weap_HasOnlyUnderbarrelGL(botData);
  if ( result )
    return 1;
  return result;
}

/*
==============
Bot_ShouldForgetEnemy
==============
*/
_BOOL8 Bot_ShouldForgetEnemy(const bot_data_t *botData, const gentity_s *enemy)
{
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9481, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !enemy && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9482, ASSERT_TYPE_ASSERT, "( enemy )", (const char *)&queryFormat, "enemy") )
    __debugbreak();
  return level.time - Bot_GetLastKnownEntPosAndTime(botData, enemy, NULL) > 30000;
}

/*
==============
Bot_ShouldIgnoreEnemyLook
==============
*/
_BOOL8 Bot_ShouldIgnoreEnemyLook(const bot_data_t *botData, const vec3_t *dirToEnemy)
{
  _BOOL8 result; 
  vec3_t outLookaheadDir; 

  result = 0;
  if ( (botData->botInfo.scriptFlags & 0x20000) != 0 )
  {
    Nav_GetLookaheadDir(botData->botInfo.pNavigator, &outLookaheadDir);
    if ( (float)((float)((float)(outLookaheadDir.v[1] * dirToEnemy->v[1]) + (float)(outLookaheadDir.v[0] * dirToEnemy->v[0])) + (float)(outLookaheadDir.v[2] * dirToEnemy->v[2])) < 0.25 )
      return 1;
  }
  return result;
}

/*
==============
Bot_ShouldIgnoreSentientEvent
==============
*/
__int64 Bot_ShouldIgnoreSentientEvent(bot_data_t *botData, const sentient_s *other, vec3_t *knownPos, const pathnode_t *knownNearestNode, const tacpoint_t *knownNearestTacPoint, unsigned __int8 reason)
{
  __int64 v8; 
  int v9; 
  int v10; 
  gentity_s *v11; 
  gentity_s *ent; 
  float v13; 
  float v14; 
  int v15; 
  float hearingDeaf; 
  vec3_t *v17; 
  gentity_s *v18; 
  float v19; 
  float v20; 
  bool v21; 
  $3396140AF3A78F7FCD1D73807E505015 *v22; 
  int v24; 
  bool v25; 
  const bitarray<224> *v26; 
  __int128 v27; 
  double v28; 
  unsigned int v29; 
  unsigned int v30; 
  unsigned int v31; 
  int ClosestCharacterList; 
  float hearingBlock; 
  const sentient_s *v34; 
  vec3_t *point; 
  pathnode_t *nearestNodeToPoint; 
  tacpoint_t *nearestTPointToPoint[2]; 
  bitarray<224> result; 

  nearestTPointToPoint[0] = (tacpoint_t *)knownNearestTacPoint;
  nearestNodeToPoint = (pathnode_t *)knownNearestNode;
  point = knownPos;
  v34 = other;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24555, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !other && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24556, ASSERT_TYPE_ASSERT, "( other )", (const char *)&queryFormat, "other") )
    __debugbreak();
  v8 = 0i64;
  if ( reason <= 2u || (unsigned __int8)(reason - 11) <= 2u || reason == 6 || (v9 = 0, (unsigned __int8)(reason - 9) <= 1u) )
    v9 = 1;
  if ( reason == 6 || (v10 = 0, (unsigned __int8)(reason - 9) <= 1u) )
    v10 = 1;
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24573, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
    v11 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
  else
    v11 = NULL;
  if ( v10 )
  {
    ent = botData->botInfo.ent;
    v13 = ent->r.currentOrigin.v[1] - point->v[1];
    v14 = ent->r.currentOrigin.v[2] - point->v[2];
    if ( (float)((float)((float)(v13 * v13) + (float)((float)(ent->r.currentOrigin.v[0] - point->v[0]) * (float)(ent->r.currentOrigin.v[0] - point->v[0]))) + (float)(v14 * v14)) <= 250000.0 )
      botData->botInfo.lastAudioDistraction = level.time;
  }
  if ( reason > 2u && (unsigned __int8)(reason - 11) > 2u )
  {
    if ( reason == 6 || (v15 = 0, (unsigned __int8)(reason - 9) <= 1u) )
      v15 = 1;
    if ( !v15 )
      return 0i64;
  }
  if ( !v9 || (!Bot_GetSensesObstructed(botData, NULL, &hearingBlock) || (hearingDeaf = botData->botMatchData.hearingDeaf, hearingDeaf <= 0.0) || hearingBlock < hearingDeaf) && botData->botInfo.awareness > 0.0 )
  {
    if ( v11 && v11 == v34->ent )
      return 0i64;
    if ( botData->botInfo.awareness <= 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24592, ASSERT_TYPE_ASSERT, "( botData->botInfo.awareness > 0.0f )", (const char *)&queryFormat, "botData->botInfo.awareness > 0.0f") )
      __debugbreak();
    if ( !v9 || v10 || (float)(level.time - botData->botInfo.lastAudioDistraction) > (float)(500.0 / botData->botInfo.awareness) )
    {
      if ( !v34->ent || !v34->ent->client && !v34->ai )
        return 0i64;
      v17 = point;
      v18 = botData->botInfo.ent;
      v19 = point->v[1] - v18->r.currentOrigin.v[1];
      v20 = point->v[2] - v18->r.currentOrigin.v[2];
      if ( (float)((float)((float)(v19 * v19) + (float)((float)(point->v[0] - v18->r.currentOrigin.v[0]) * (float)(point->v[0] - v18->r.currentOrigin.v[0]))) + (float)(v20 * v20)) < 250000.0 )
        return 0i64;
      v21 = SV_BotRequirePathnodes(botData);
      v22 = &botData->8;
      if ( v21 )
      {
        if ( Bot_PredictSeePointUsingNode(&v22->botInfo, v17, nearestNodeToPoint, NULL) )
          return 0i64;
      }
      else if ( Bot_PredictSeePointUsingTacPoint(&v22->botInfo, v17, nearestTPointToPoint[0], NULL) )
      {
        return 0i64;
      }
      if ( reason > 0x1Au || (v24 = 67111424, !_bittest(&v24, reason)) || !BG_IsEMPJammed(botData->botInfo.playerState) && !Bot_GetRadarIsJammed(&botData->botInfo) )
      {
        if ( level.teammode == TEAMMODE_FFA )
        {
          v25 = Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80);
          v26 = Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) ? Com_TeamsSP_GetAllCombatTeamFlags() : Com_TeamsMP_GetAllTeamFlags();
          v27 = *(_OWORD *)v26->array;
          v28 = *(double *)&v26->array[4];
          v29 = v26->array[6] & 0xFFEFFFFF;
          *(_OWORD *)result.array = v27;
          v30 = v27;
          *(double *)&result.array[4] = v28;
          if ( v25 )
            v30 = v27 & 0xF7FFFFFF;
          v31 = v29 & 0xFF9FFFFF;
        }
        else
        {
          Com_Teams_GetEnemyTeamFlags(&result, botData->botInfo.sentient->eTeam);
          v31 = result.array[6];
          v30 = result.array[0];
        }
        result.array[1] = ~result.array[1];
        result.array[2] = ~result.array[2];
        result.array[3] = ~result.array[3];
        result.array[4] = ~result.array[4];
        result.array[5] = ~result.array[5];
        result.array[6] = ~v31;
        result.array[0] = ~v30;
        ClosestCharacterList = Bot_GetClosestCharacterList(botData->botInfo.ent, v17, 0.0, 0, 0, 0, 0, &result, (gentity_s **)nearestTPointToPoint, 2);
        if ( ClosestCharacterList > 0 )
        {
          while ( nearestTPointToPoint[v8] != (tacpoint_t *)botData->botInfo.ent )
          {
            if ( ++v8 >= ClosestCharacterList )
              return 1i64;
          }
          return 0i64;
        }
      }
    }
  }
  return 1i64;
}

/*
==============
Bot_ShouldLookAtPoint
==============
*/
_BOOL8 Bot_ShouldLookAtPoint(const bot_data_t *botData)
{
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10597, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  return botData->botInfo.lookAtType >= BOT_LOOK_CODE_FORCED || !Bot_CanSeeAndCanFireOnEnemy(botData) && !Bot_IsThrowingGrenade(botData) && !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 0x14u) && (botData->botInfo.flags & 0x200) == 0;
}

/*
==============
Bot_ShouldPressADSButton
==============
*/
_BOOL8 Bot_ShouldPressADSButton(const bot_data_t *botData)
{
  int lastADSPressTime; 
  _BOOL8 result; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8155, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  result = 0;
  if ( Bot_Weap_ADSAllowed(botData) )
  {
    lastADSPressTime = botData->botInfo.lastADSPressTime;
    if ( lastADSPressTime > 0 && level.time - lastADSPressTime <= 500 )
      return 1;
  }
  return result;
}

/*
==============
Bot_ShouldRushEnemy
==============
*/
__int64 Bot_ShouldRushEnemy(bot_data_t *botData)
{
  playerState_s *playerState; 
  const Weapon *ViewmodelWeapon; 
  gentity_s *v4; 
  unsigned int v6; 
  BOOL v7; 
  int v8; 
  gentity_s *ent; 
  float v10; 
  float v11; 
  float v12; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21401, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21402, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21406, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(playerState);
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
    v4 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
  else
    v4 = NULL;
  if ( !Bot_CanSeeEnemy(botData) || !Bot_CanMeleeReactEnemy(botData) || !Bot_AllowedToMeleeEnemy(botData) )
    return 0i64;
  if ( Bot_Weap_Ammo(playerState, ViewmodelWeapon) <= 0 )
    return 1i64;
  if ( !v4 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21431, ASSERT_TYPE_ASSERT, "( enemy )", (const char *)&queryFormat, "enemy") )
    __debugbreak();
  if ( Bot_EntityIsJuggernaut(v4) )
    return 0i64;
  v6 = 1;
  v7 = Bot_Weap_IsWeapClass(playerState, ViewmodelWeapon, WEAPCLASS_SNIPER) && Bot_IsFireFromHipRange(botData);
  v8 = Bot_EntityUsingRiotShield(v4, 0);
  ent = botData->botInfo.ent;
  if ( v8 )
    return 0;
  v10 = v4->r.currentOrigin.v[0] - ent->r.currentOrigin.v[0];
  v12 = v4->r.currentOrigin.v[1] - ent->r.currentOrigin.v[1];
  v11 = v4->r.currentOrigin.v[2] - ent->r.currentOrigin.v[2];
  if ( (float)((float)((float)(v12 * v12) + (float)(v10 * v10)) + (float)(v11 * v11)) >= (float)(botData->botMatchData.meleeChargeDist * botData->botMatchData.meleeChargeDist) && !v7 )
    return 0;
  return v6;
}

/*
==============
Bot_ShouldThrowGrenade
==============
*/
__int64 Bot_ShouldThrowGrenade(bot_data_t *botData)
{
  playerState_s *playerState; 
  int IsReloading; 
  unsigned __int64 v4; 
  __int64 v5; 
  gentity_s *ent; 
  float v8; 
  vec3_t goal; 
  vec3_t victimPosOut; 
  Weapon offHandOut; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21502, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( level.time <= botData->botInfo.weaponDelayForOffhand || !(unsigned int)Bot_GrenadesAllowed(botData) || GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 6u) || GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 5u) || (LOBYTE(botData->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) != 0 || Bot_IsUsingTurret(botData) || level.time < botData->botInfo.scriptedGrenadeStopTime )
    return 0i64;
  if ( (*((_BYTE *)&botData->scriptedAgentInfo + 28228) & 2) != 0 )
    return 1i64;
  if ( level.time < botData->botInfo.grenadeDelayTime || botData->botInfo.navigation.isInBadPlace )
    return 0i64;
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21537, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  if ( !botData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21538, ASSERT_TYPE_ASSERT, "( botInfo->playerState )", (const char *)&queryFormat, "botInfo->playerState") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  if ( !Bot_Weap_GrenadePick(&botData->botInfo, playerState, &offHandOut) )
    return 0i64;
  if ( !Bot_ShouldForceGrenadeThrow(botData, 0) )
  {
    IsReloading = Bot_IsReloading(botData);
    LODWORD(v4) = Bot_Weap_GetWeaponStateForViewWeapon(botData->botInfo.playerState);
    if ( !IsReloading )
    {
      if ( (unsigned int)v4 > 0x3B )
        return 0i64;
      v5 = 0xC01000000000001i64;
      if ( !_bittest64(&v5, v4) || Bot_Weap_IsDoingADS(botData) && !Bot_Weap_HasUnderBarrelGL(playerState) )
        return 0i64;
    }
  }
  if ( (unsigned int)Bot_GrenadeGoodEnemyCheck(botData, &offHandOut, &victimPosOut) && (unsigned int)Bot_GrenadeGoodTargetCheck(botData, &offHandOut, &victimPosOut) )
  {
    botData->botInfo.grenadeFlags |= 4u;
    return 1i64;
  }
  if ( botData->botInfo.scriptGoal.type == BOT_SCR_GOAL_NONE )
    return 0i64;
  if ( botData->botInfo.scriptGoal.type != BOT_SCR_GOAL_OBJECTIVE )
    return 0i64;
  if ( (*((_BYTE *)&botData->scriptedAgentInfo + 9016) & 0x40) == 0 )
    return 0i64;
  Bot_GetScriptGoal(botData, &goal);
  ent = botData->botInfo.ent;
  v8 = (float)((float)((float)(ent->r.currentOrigin.v[1] - goal.v[1]) * (float)(ent->r.currentOrigin.v[1] - goal.v[1])) + (float)((float)(ent->r.currentOrigin.v[0] - goal.v[0]) * (float)(ent->r.currentOrigin.v[0] - goal.v[0]))) + (float)((float)(ent->r.currentOrigin.v[2] - goal.v[2]) * (float)(ent->r.currentOrigin.v[2] - goal.v[2]));
  if ( v8 <= 250000.0 )
    return 0i64;
  if ( v8 >= 4000000.0 )
    return 0i64;
  victimPosOut = goal;
  if ( !(unsigned int)Bot_GrenadeGoodTargetCheck(botData, &offHandOut, &victimPosOut) )
    return 0i64;
  botData->botInfo.grenadeFlags &= ~4u;
  return 1i64;
}

/*
==============
Bot_SightThresholdExpiredOrNotStarted
==============
*/
_BOOL8 Bot_SightThresholdExpiredOrNotStarted(bot_sight_threshold_t *sightThreshold)
{
  if ( !sightThreshold && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16958, ASSERT_TYPE_ASSERT, "( sightThreshold )", (const char *)&queryFormat, "sightThreshold") )
    __debugbreak();
  return !sightThreshold->lastUpdateTime || level.time - sightThreshold->lastUpdateTime > 5000;
}

/*
==============
Bot_SightThresholdReached
==============
*/
__int64 Bot_SightThresholdReached(const sentient_s *botSentient, const sentient_s *enemy)
{
  bot_data_t *EntityData; 
  signed __int64 v5; 
  __int64 v6; 
  unsigned int v7; 
  AIBotInterface *m_pAI; 
  AIBotWrapper v10; 

  if ( !botSentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17273, ASSERT_TYPE_ASSERT, "( botSentient )", (const char *)&queryFormat, "botSentient") )
    __debugbreak();
  if ( !botSentient->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17274, ASSERT_TYPE_ASSERT, "( botSentient->ent )", (const char *)&queryFormat, "botSentient->ent") )
    __debugbreak();
  if ( !enemy && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17275, ASSERT_TYPE_ASSERT, "( enemy )", (const char *)&queryFormat, "enemy") )
    __debugbreak();
  if ( !enemy->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17276, ASSERT_TYPE_ASSERT, "( enemy->ent )", (const char *)&queryFormat, "enemy->ent") )
    __debugbreak();
  if ( enemy->ent->health <= 0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17277, ASSERT_TYPE_ASSERT, "( !Bot_EntityIsDead( enemy->ent ) )", (const char *)&queryFormat, "!Bot_EntityIsDead( enemy->ent )") )
    __debugbreak();
  EntityData = Bot_GetEntityData(botSentient->ent);
  if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17284, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v5 = 60 * (enemy - level.sentients);
  v6 = (__int64)&EntityData->scriptedAgentInfo + v5 + 11644;
  if ( (bot_data_t *)((char *)EntityData + v5) == (bot_data_t *)-11652i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17289, ASSERT_TYPE_ASSERT, "( botSentientInfo )", (const char *)&queryFormat, "botSentientInfo") )
    __debugbreak();
  AICommonInterface::AICommonInterface(&v10.m_botInterface);
  v10.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v10.m_botAgentInterface);
  v7 = 0;
  v10.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v10.m_pAI = NULL;
  AIBotWrapper::Setup(&v10, EntityData->botInfo.ent);
  m_pAI = v10.m_pAI;
  if ( !v10.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17291, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  if ( !*(_DWORD *)(v6 + 8) || level.time >= (int)(*(_DWORD *)(v6 + 8) + ((__int64 (__fastcall *)(AIBotInterface *))m_pAI->GetThreatUpdateInterval)(m_pAI)) )
    SV_BotUpdateSightThreshold(botSentient, enemy);
  LOBYTE(v7) = *(float *)(v6 + 16) <= *(float *)(v6 + 12);
  return v7;
}

/*
==============
Bot_StampNodeArea
==============
*/
void Bot_StampNodeArea(const bot_data_t *const botData, pathnode_t *node)
{
  const char *GameType; 
  int NodeTeam; 
  __int64 v6; 
  __int64 v7; 
  __int64 i; 
  pathlink_s *Links; 
  __int64 v10; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23242, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !node && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23243, ASSERT_TYPE_ASSERT, "( node )", (const char *)&queryFormat, "node") )
    __debugbreak();
  if ( !Com_GameMode_SupportsFeature(WEAPON_RAISING_ALTSWITCH) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23251, ASSERT_TYPE_ASSERT, "(Com_GameMode_SupportsFeature( Com_GameMode_Feature::BOTS ))", "%s\n\tAccess to pathnode_dynamic::bots", "Com_GameMode_SupportsFeature( Com_GameMode_Feature::BOTS )") )
    __debugbreak();
  if ( !BG_BotSystemEnabled() || (GameType = SV_GameMP_GetGameType(), *GameType == aBr_2[0]) && GameType[1] == aBr_2[1] && GameType[2] == aBr_2[2] )
  {
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23252, ASSERT_TYPE_ASSERT, "(!Path_MapUsesScriptedAIData())", "%s\n\tmap/mode is only set up to use scripted soldier data, should not be accessing pathnode_dynamic::bots", "!Path_MapUsesScriptedAIData()") )
      __debugbreak();
  }
  NodeTeam = Path_GetNodeTeam(botData->botInfo.sentient->eTeam);
  v6 = NodeTeam;
  if ( (unsigned int)NodeTeam >= 2 )
  {
    LODWORD(v10) = NodeTeam;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23255, ASSERT_TYPE_ASSERT, "(unsigned)( nodeTeam ) < (unsigned)( (2) )", "nodeTeam doesn't index MAX_NODE_TEAMS_MP\n\t%i not in [0, %i)", v10, 2) )
      __debugbreak();
  }
  v7 = v6;
  node->dynamic.actors.dangerousNodeTime[v6] = level.time;
  for ( i = 0i64; (unsigned int)i < node->constant.totalLinkCount; i = (unsigned int)(i + 1) )
  {
    Links = node->constant.Links;
    if ( Links[i].fDist < 166.39999 )
      Path_ConvertIndexToNode(Links[i].nodeNum)->dynamic.actors.dangerousNodeTime[v7] = level.time;
  }
}

/*
==============
Bot_StartProf
==============
*/
void Bot_StartProf(void)
{
  unsigned __int64 v0; 

  v0 = __rdtsc();
  s_botProfTimeStart = v0;
}

/*
==============
Bot_StopPursuingEnemy
==============
*/
void Bot_StopPursuingEnemy(bot_data_t *botData)
{
  gentity_s *v2; 
  const gentity_s *v3; 
  signed __int64 v4; 
  char *v5; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9495, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
  {
    v2 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
    v3 = v2;
    if ( v2 )
    {
      if ( !v2->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9501, ASSERT_TYPE_ASSERT, "( enemy->sentient )", (const char *)&queryFormat, "enemy->sentient") )
        __debugbreak();
      v4 = 60 * (v3->sentient - level.sentients);
      v5 = (char *)&botData->scriptedAgentInfo + v4 + 11644;
      if ( (bot_data_t *)((char *)botData + v4) == (bot_data_t *)-11652i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9507, ASSERT_TYPE_ASSERT, "( botTgtSentientInfo )", (const char *)&queryFormat, "botTgtSentientInfo") )
        __debugbreak();
      if ( *((_DWORD *)v5 + 9) < Bot_GetLastKnownEntPosAndTime(botData, v3, NULL) )
        GScr_Notify(botData->botInfo.ent, scr_const.search_end, 0);
      *((_DWORD *)v5 + 9) = level.time;
    }
  }
}

/*
==============
Bot_StrafeOnPath
==============
*/
void Bot_StrafeOnPath(bot_data_t *botData, usercmd_s *cmd, int speed)
{
  playerState_s *playerState; 
  $3396140AF3A78F7FCD1D73807E505015 *v7; 
  float v8; 
  __int128 v9; 
  float v10; 
  gentity_s *ent; 
  __int128 v12; 
  float v13; 
  const dvar_t *v17; 
  playerState_s *v18; 
  __int128 v19; 
  const gentity_s *v22; 
  AIBotInterface *m_pAI; 
  gentity_s *TargetEntity; 
  const dvar_t *v25; 
  gentity_s *v26; 
  bool drawAvoidance; 
  bool v28; 
  float v29; 
  __int128 v30; 
  float v34; 
  __int128 v35; 
  __int128 v36; 
  __int128 v37; 
  float v41; 
  float v42; 
  float v43; 
  const dvar_t *v44; 
  gentity_s *v45; 
  float v46; 
  float v47; 
  float v48; 
  const dvar_t *v49; 
  int pm_time; 
  float v51; 
  float v52; 
  char currentStanceFlags; 
  int FrameDuration; 
  int v55; 
  unsigned int v56; 
  int outColliderCount[2]; 
  AIBotWrapper v58; 
  AvoidingEntityInfo avoidingEntityInfo; 
  vec3_t outAvoidingVelocity; 
  vec3_t outLookaheadDir; 
  vec3_t vec; 
  vec3_t right; 
  vec3_t angles; 
  int outColliderEntNums[272]; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15040, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15043, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  v7 = &botData->8;
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15055, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  vec.v[0] = 0.0;
  vec.v[1] = 0.0;
  vec.v[2] = 0.0;
  right.v[0] = 0.0;
  right.v[1] = 0.0;
  right.v[2] = 0.0;
  v8 = playerState->viewangles.v[1];
  if ( Bot_IsThrowingGrenade(botData) )
  {
    v9 = LODWORD(botData->botInfo.grenadeThrowTarget.v[0]);
    v10 = botData->botInfo.grenadeThrowTarget.v[1];
LABEL_17:
    ent = v7->botInfo.ent;
    v12 = v9;
    vec.v[0] = *(float *)&v9 - v7->botInfo.ent->r.currentOrigin.v[0];
    v13 = v10 - ent->r.currentOrigin.v[1];
    *(float *)&v12 = fsqrt((float)(vec.v[0] * vec.v[0]) + (float)(v13 * v13));
    _XMM2 = v12;
    __asm
    {
      vcmpless xmm0, xmm2, xmm8
      vblendvps xmm0, xmm2, xmm7, xmm0
    }
    vec.v[1] = v13 * (float)(1.0 / *(float *)&_XMM0);
    vec.v[0] = vec.v[0] * (float)(1.0 / *(float *)&_XMM0);
    vectoangles(&vec, &angles);
    v8 = angles.v[1];
    goto LABEL_18;
  }
  if ( (*((_BYTE *)&botData->scriptedAgentInfo + 28228) & 2) != 0 )
  {
    v9 = LODWORD(botData->botInfo.scriptedGrenadeTarget.v[0]);
    v10 = botData->botInfo.scriptedGrenadeTarget.v[1];
    goto LABEL_17;
  }
  if ( level.time < botData->botInfo.lookAtTime && Bot_ShouldLookAtPoint(botData) )
  {
    v9 = LODWORD(botData->botInfo.lookAtPoint.v[0]);
    v10 = botData->botInfo.lookAtPoint.v[1];
    goto LABEL_17;
  }
LABEL_18:
  YawVectors(v8, &vec, &right);
  Nav_GetLookaheadDir(botData->botInfo.pNavigator, &outLookaheadDir);
  v17 = DCONST_DVARBOOL_ai_useOrca;
  if ( !DCONST_DVARBOOL_ai_useOrca && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 692, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "ai_useOrca") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v17);
  if ( v17->current.enabled && botData->botInfo.avoidance.avoidanceEnabled )
  {
    v18 = botData->botInfo.playerState;
    v19 = LODWORD(v18->velocity.v[0]);
    *(float *)&v19 = fsqrt((float)((float)(*(float *)&v19 * *(float *)&v19) + (float)(v18->velocity.v[1] * v18->velocity.v[1])) + (float)(v18->velocity.v[2] * v18->velocity.v[2]));
    _XMM0 = v19;
    __asm { vmaxss  xmm5, xmm0, xmm7 }
    avoidingEntityInfo.currentVelocity = v18->velocity;
    outAvoidingVelocity.v[2] = *(float *)&_XMM5 * outLookaheadDir.v[2];
    avoidingEntityInfo.desiredVelocity.v[2] = *(float *)&_XMM5 * outLookaheadDir.v[2];
    outAvoidingVelocity.v[0] = *(float *)&_XMM5 * outLookaheadDir.v[0];
    outAvoidingVelocity.v[1] = *(float *)&_XMM5 * outLookaheadDir.v[1];
    avoidingEntityInfo.desiredVelocity.v[0] = *(float *)&_XMM5 * outLookaheadDir.v[0];
    avoidingEntityInfo.desiredVelocity.v[1] = *(float *)&_XMM5 * outLookaheadDir.v[1];
    AICommonInterface::AICommonInterface(&v58.m_botInterface);
    v58.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
    AICommonInterface::AICommonInterface(&v58.m_botAgentInterface);
    v22 = v7->botInfo.ent;
    v58.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
    v58.m_pAI = NULL;
    AIBotWrapper::Setup(&v58, v22);
    m_pAI = v58.m_pAI;
    if ( !v58.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15128, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
      __debugbreak();
    TargetEntity = AICommonInterface::GetTargetEntity(m_pAI);
    v25 = DVARINT_ai_debugEntIndex;
    avoidingEntityInfo.ignoreEnt = TargetEntity;
    avoidingEntityInfo.drawAvoidance = 0;
    if ( !DVARINT_ai_debugEntIndex && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "ai_debugEntIndex") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v25);
    v26 = v7->botInfo.ent;
    drawAvoidance = avoidingEntityInfo.drawAvoidance;
    v28 = v25->current.integer == v7->botInfo.ent->s.number;
    avoidingEntityInfo.ent = v7->botInfo.ent;
    if ( v28 )
      drawAvoidance = 1;
    avoidingEntityInfo.drawAvoidance = drawAvoidance;
    *(_QWORD *)avoidingEntityInfo.position.v = *(_QWORD *)v26->r.currentOrigin.v;
    v29 = v26->r.currentOrigin.v[2];
    outColliderCount[0] = 0;
    avoidingEntityInfo.position.v[2] = v29;
    ORCA_DoAvoidance(&avoidingEntityInfo, &botData->botInfo.avoidance, &outAvoidingVelocity, ORCA_RateVelocity, outColliderEntNums, outColliderCount);
    v30 = LODWORD(outAvoidingVelocity.v[1]);
    *(float *)&v30 = fsqrt((float)((float)(*(float *)&v30 * *(float *)&v30) + (float)(outAvoidingVelocity.v[0] * outAvoidingVelocity.v[0])) + (float)(outAvoidingVelocity.v[2] * outAvoidingVelocity.v[2]));
    _XMM3 = v30;
    __asm
    {
      vcmpless xmm0, xmm3, xmm8
      vblendvps xmm0, xmm3, xmm7, xmm0
    }
    v34 = outAvoidingVelocity.v[0] * (float)(1.0 / *(float *)&_XMM0);
    outLookaheadDir.v[2] = outAvoidingVelocity.v[2] * (float)(1.0 / *(float *)&_XMM0);
    v36 = LODWORD(outAvoidingVelocity.v[1]);
    *(float *)&v36 = outAvoidingVelocity.v[1] * (float)(1.0 / *(float *)&_XMM0);
    v35 = v36;
  }
  else
  {
    v35 = LODWORD(outLookaheadDir.v[1]);
    v34 = outLookaheadDir.v[0];
  }
  v37 = v35;
  *(float *)&v37 = fsqrt((float)(*(float *)&v35 * *(float *)&v35) + (float)(v34 * v34));
  _XMM2 = v37;
  __asm
  {
    vcmpless xmm0, xmm2, xmm8
    vblendvps xmm0, xmm2, xmm7, xmm0
  }
  v41 = v34 * (float)(1.0 / *(float *)&_XMM0);
  v43 = *(float *)&v35 * (float)(1.0 / *(float *)&_XMM0);
  v42 = v43;
  if ( Bot_IsStuckReacting(&botData->botInfo) || Bot_StuckShouldReact(&botData->botInfo) )
  {
    v44 = DVARINT_ai_showPaths;
    if ( !DVARINT_ai_showPaths && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "ai_showPaths") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v44);
    if ( v44->current.integer > 0 && Bot_ShouldDrawDebugForBot(botData) )
    {
      v45 = v7->botInfo.ent;
      outLookaheadDir.v[0] = (float)(v41 * 50.0) + v7->botInfo.ent->r.currentOrigin.v[0];
      outLookaheadDir.v[1] = (float)(v43 * 50.0) + v45->r.currentOrigin.v[1];
      outLookaheadDir.v[2] = v45->r.currentOrigin.v[2] + 25.0;
      *(_QWORD *)outAvoidingVelocity.v = *(_QWORD *)v45->r.currentOrigin.v;
      outAvoidingVelocity.v[2] = outLookaheadDir.v[2];
      G_DebugLine(&outAvoidingVelocity, &outLookaheadDir, &colorMagenta, 0);
    }
  }
  v46 = v41 * right.v[0];
  v47 = _mm_cvtepi32_ps((__m128i)(unsigned int)speed).m128_f32[0];
  v48 = v43 * right.v[1];
  cmd->forwardmove = (int)(float)((float)((float)(v42 * vec.v[1]) + (float)(v41 * vec.v[0])) * v47);
  cmd->rightmove = (int)(float)((float)(v48 + v46) * v47);
  if ( speed > 0 )
  {
    if ( GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&playerState->pm_flags, ACTIVE, 0x13u) )
    {
      v49 = DCONST_DVARINT_jump_landSlowDownTime;
      if ( !DCONST_DVARINT_jump_landSlowDownTime && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "jump_landSlowDownTime") )
        __debugbreak();
      Dvar_CheckFrontendServerThread(v49);
      pm_time = playerState->pm_time;
      if ( pm_time > v49->current.integer || !pm_time )
        return;
    }
    else if ( GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&playerState->pm_flags, ACTIVE, 0xCu) )
    {
      return;
    }
    v52 = COERCE_FLOAT(LODWORD(v47) & _xmm) * 0.0078740157;
    v51 = v52;
    if ( Bot_Weap_IsDoingADS(botData) )
      v51 = v52 * 0.5;
    currentStanceFlags = botData->botInfo.currentStanceFlags;
    FrameDuration = G_Level_GetFrameDuration();
    v55 = FrameDuration;
    if ( (currentStanceFlags & 1) == 0 )
    {
      if ( (currentStanceFlags & 2) != 0 )
        v56 = (unsigned __int64)(1431655766i64 * FrameDuration) >> 32;
      else
        v56 = (int)((unsigned __int64)(954437177i64 * FrameDuration) >> 32) >> 1;
      v55 = (v56 >> 31) + v56;
    }
    v7->botInfo.pathProgressTime += (int)(float)((float)v55 * v51) + 1;
  }
}

/*
==============
Bot_StuckShouldReact
==============
*/
_BOOL8 Bot_StuckShouldReact(const bot_info_t *botInfo)
{
  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7786, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  return botInfo->stuckFrames >= 2u;
}

/*
==============
Bot_Think
==============
*/
void Bot_Think(SvClientMP *bot, usercmd_s *cmd)
{
  bot_data_t *ClientData; 
  bot_info_t *BotInfoFromNetBuffer; 
  int MpClientIndex; 
  playerState_s *PlayerState; 
  int v8; 
  int v9; 
  usercmd_s *lastUserCmd; 
  usercmd_s *v11; 
  __int64 v12; 
  __int128 v13; 
  const dvar_t *v14; 
  gentity_s *ent; 
  const dvar_t *v16; 
  gentity_s *v17; 
  const dvar_t *v18; 
  $3396140AF3A78F7FCD1D73807E505015 *v19; 
  char v20; 
  bool v21; 
  const gentity_s *v22; 
  const bot_data_t *EntityData; 
  sentient_s *sentient; 
  team_t eTeam; 
  unsigned __int64 buttons; 
  const Weapon *ViewmodelWeapon; 
  int v28; 
  BOOL v29; 
  int health; 
  bool v31; 
  gentity_s *v32; 
  float v33; 
  float v34; 
  float v35; 
  const playerState_s *v36; 
  GWeaponMap *Instance; 
  const Weapon *v38; 
  const playerState_s *v39; 
  double v40; 
  int v41; 
  int v42; 
  int v43; 
  BOOL v44; 
  const Weapon *v45; 
  usercmd_s *v46; 

  if ( !bot && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5552, ASSERT_TYPE_ASSERT, "( bot )", (const char *)&queryFormat, "bot") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5553, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  ClientData = Bot_GetClientData(bot);
  if ( !ClientData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5556, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  BotInfoFromNetBuffer = Bot_GetBotInfoFromNetBuffer(bot);
  if ( !BotInfoFromNetBuffer && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5558, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  MpClientIndex = SV_Client_GetMpClientIndex(bot);
  PlayerState = G_MainMP_GetPlayerState(MpClientIndex);
  if ( !PlayerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5561, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  v8 = SV_Client_GetMpClientIndex(bot);
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5486, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  v9 = 0;
  *(_QWORD *)&cmd->serverTime = 0i64;
  cmd->inputTime = 0;
  if ( BotInfoFromNetBuffer->ent )
  {
    if ( !BotInfoFromNetBuffer->lastUserCmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5576, ASSERT_TYPE_ASSERT, "( botInfo->lastUserCmd )", (const char *)&queryFormat, "botInfo->lastUserCmd") )
      __debugbreak();
    lastUserCmd = BotInfoFromNetBuffer->lastUserCmd;
    v11 = cmd;
    v12 = 2i64;
    do
    {
      v11 = (usercmd_s *)((char *)v11 + 128);
      v13 = *(_OWORD *)&lastUserCmd->buttons;
      lastUserCmd = (usercmd_s *)((char *)lastUserCmd + 128);
      *(_OWORD *)&v11[-1].offHand.attachmentVariationIndices[13] = v13;
      *(_OWORD *)&v11[-1].offHand.weaponCamo = *(_OWORD *)&lastUserCmd[-1].offHand.weaponCamo;
      *(_OWORD *)v11[-1].remoteControlMove = *(_OWORD *)lastUserCmd[-1].remoteControlMove;
      *(_OWORD *)v11[-1].vehAngles = *(_OWORD *)lastUserCmd[-1].vehAngles;
      *(_OWORD *)&v11[-1].vehOrgZ = *(_OWORD *)&lastUserCmd[-1].vehOrgZ;
      *(_OWORD *)&v11[-1].gunYOfs = *(_OWORD *)&lastUserCmd[-1].gunYOfs;
      *(_OWORD *)v11[-1].sightedClientsMask.data = *(_OWORD *)lastUserCmd[-1].sightedClientsMask.data;
      *(_OWORD *)&v11[-1].sightedClientsMask.data[4] = *(_OWORD *)&lastUserCmd[-1].sightedClientsMask.data[4];
      --v12;
    }
    while ( v12 );
    v11->buttons = lastUserCmd->buttons;
    cmd->buttons = 0i64;
    Bot_ThinkRoundRobin(ClientData);
    if ( !ClientData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3069, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
      __debugbreak();
    if ( ClientData->botDebugData.errorLocCount > 0 )
    {
      do
        Bot_DrawDebugErrorLocation(ClientData, &ClientData->botDebugData.errorLocs[v9++]);
      while ( v9 < ClientData->botDebugData.errorLocCount );
    }
    v14 = DVARBOOL_bot_GodMode;
    if ( !DVARBOOL_bot_GodMode && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 692, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_GodMode") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v14);
    ent = BotInfoFromNetBuffer->ent;
    if ( v14->current.enabled )
      ent->flags.m_flags[0] |= 1u;
    else
      ent->flags.m_flags[0] &= ~1u;
    v16 = DVARBOOL_bot_DemiGodMode;
    if ( !DVARBOOL_bot_DemiGodMode && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 692, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DemiGodMode") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v16);
    v17 = BotInfoFromNetBuffer->ent;
    if ( v16->current.enabled )
      v17->flags.m_flags[0] |= 2u;
    else
      v17->flags.m_flags[0] &= ~2u;
    v18 = DVARBOOL_bot_DisableAllAI;
    if ( !DVARBOOL_bot_DisableAllAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 692, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DisableAllAI") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v18);
    if ( v18->current.enabled || (BotInfoFromNetBuffer->scriptFlags & 0x400000) != 0 )
    {
      memset_0(cmd, 0, sizeof(usercmd_s));
      Bot_Weap_ClearCmd(cmd, BotInfoFromNetBuffer->playerState);
      v46 = BotInfoFromNetBuffer->lastUserCmd;
      *(double *)cmd->angles.v = *(double *)v46->angles.v;
      cmd->angles.v[2] = v46->angles.v[2];
    }
    else
    {
      v19 = &ClientData->8;
      if ( ClientData == (bot_data_t *)-8i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13934, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
        __debugbreak();
      v20 = ClientData->botInfo.playerState->skydivePlayerState.state[0];
      v21 = (v20 & 0xFA) == 0 && v20 != 1;
      if ( !ClientData->botInfo.traversal && v21 )
        Nav_SetPos(ClientData->botInfo.pNavigator, &v19->botInfo.ent->r.currentOrigin);
      v22 = BotInfoFromNetBuffer->ent;
      if ( !BotInfoFromNetBuffer->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5446, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
        __debugbreak();
      if ( !SV_BotIsBotEnt(v22) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5447, ASSERT_TYPE_ASSERT, "( SV_BotIsBotEnt( ent ) )", (const char *)&queryFormat, "SV_BotIsBotEnt( ent )") )
        __debugbreak();
      EntityData = Bot_GetEntityData(v22);
      if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5450, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
        __debugbreak();
      if ( Bot_IsControllingRemoteMissile(EntityData) )
        cmd->buttons |= 0x40000ui64;
      sentient = BotInfoFromNetBuffer->ent->sentient;
      if ( !sentient || (eTeam = sentient->eTeam) == TEAM_ZERO || eTeam == TEAM_SPECTATOR || sv_paused->current.integer || Com_MP_GetIsLocalServerPaused() )
      {
        Bot_SetFrozenCmd(ClientData, cmd);
      }
      else
      {
        if ( (BotInfoFromNetBuffer->ent->client->flags & 4) != 0 )
        {
          buttons = BotInfoFromNetBuffer->lastUserCmd->buttons;
          if ( (buttons & 0x80u) != 0i64 )
          {
            cmd->buttons |= 0x80ui64;
            buttons = BotInfoFromNetBuffer->lastUserCmd->buttons;
          }
          if ( (buttons & 0x40) != 0 )
          {
            cmd->buttons |= 0x40ui64;
            buttons = BotInfoFromNetBuffer->lastUserCmd->buttons;
          }
          if ( (buttons & 8) != 0 )
            cmd->buttons |= 8ui64;
          Bot_DrawDebug(ClientData);
          Bot_SetFrozenCmd(ClientData, cmd);
          ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(PlayerState);
          if ( Bot_Weap_IsNone(ViewmodelWeapon) )
            Bot_Weap_Update(ClientData, cmd);
          if ( (BotInfoFromNetBuffer->ent->client->flags & 0x400) == 0 )
            Bot_UpdateDirection(ClientData, cmd);
          goto LABEL_155;
        }
        v28 = 1;
        v29 = G_MainMP_GetClientArchiveTime(v8) != 0;
        health = BotInfoFromNetBuffer->ent->health;
        v31 = GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&PlayerState->pm_flags, ACTIVE, 0xFu);
        if ( health > 0 && !v29 && !v31 )
        {
          GStatic::SetActiveStatics();
          Bot_UpdateDebugErrorLocations(ClientData);
          if ( Dvar_GetBool_Internal_DebugName(DCONST_DVARBOOL_g_DisablePlayerNearestDataUpdates, "g_DisablePlayerNearestDataUpdates") )
            Com_PrintError(18, "Using bots when g_DisablePlayerNearestDataUpdates is true - bots will not function properly!\n");
          if ( Dvar_GetBool_Internal_DebugName(DVARBOOL_g_DisablePlayerRepulsors, "g_DisablePlayerRepulsors") )
            Com_PrintError(18, "Using bots when g_DisablePlayerRepulsors is true - bots will not function properly!\n");
          if ( SV_BotRequirePathnodes(ClientData) && !Sentient_NearestNode(BotInfoFromNetBuffer->ent->sentient) || !SV_BotRequirePathnodes(ClientData) && !Sentient_NearestTacPoint(BotInfoFromNetBuffer->ent->sentient) )
          {
            Bot_UpdateStrafe(ClientData);
            Bot_UpdateMove_OffPathGrid(ClientData, cmd);
            Bot_DrawDebug(ClientData);
            if ( BG_IsScriptedSceneAnimFlagEnabled(PlayerState) )
              Bot_Weap_Update(ClientData, cmd);
            else
              Bot_Weap_ClearCmd(cmd, BotInfoFromNetBuffer->playerState);
            GStatic::ClearActiveStatics();
            goto LABEL_155;
          }
          ClientData->botDebugData.flags &= ~2u;
          Bot_UpdateRadar(ClientData);
          Bot_UpdateXRayVision(ClientData);
          Bot_UpdateSight(ClientData, cmd);
          Bot_UpdateThreat(ClientData);
          Bot_UpdateEnemyTrack(ClientData);
          if ( !v19->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7340, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
            __debugbreak();
          if ( EntHandle::isDefined(&ClientData->botInfo.sentient->targetEnt) )
          {
            v32 = EntHandle::ent(&ClientData->botInfo.sentient->targetEnt);
            if ( v32 )
            {
              v33 = v19->botInfo.ent->r.currentOrigin.v[0] - v32->r.currentOrigin.v[0];
              v34 = v19->botInfo.ent->r.currentOrigin.v[1] - v32->r.currentOrigin.v[1];
              v35 = v19->botInfo.ent->r.currentOrigin.v[2] - v32->r.currentOrigin.v[2];
              ClientData->botInfo.enemyTrack.lastDist = fsqrt((float)((float)(v34 * v34) + (float)(v33 * v33)) + (float)(v35 * v35));
            }
          }
          Bot_UpdateRiotShieldDesired(ClientData);
          Bot_Weap_Update(ClientData, cmd);
          Bot_UpdateMovement(ClientData, cmd);
          Bot_UpdateDoors(ClientData);
          Bot_UpdateAimDownSightsDesire(ClientData, cmd);
          Bot_UpdateCombat(ClientData, cmd);
          if ( ClientData == (bot_data_t *)-8i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9308, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
            __debugbreak();
          v36 = ClientData->botInfo.playerState;
          if ( !v36 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9310, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
            __debugbreak();
          if ( !Bot_Weap_UpdateReload(ClientData, cmd) )
          {
            Instance = GWeaponMap::GetInstance();
            v38 = BG_GetViewmodelWeapon(Instance, v36);
            if ( BG_HasUnderbarrelWeapon(v38) )
            {
              GameModeFlagContainer<enum PWeaponFlagsCommon,enum PWeaponFlagsSP,enum PWeaponFlagsMP,64>::SetFlagInternal(&v36->weapCommon.weapFlags, ACTIVE, 0x11u);
              Bot_Weap_UpdateReload(ClientData, cmd);
              GameModeFlagContainer<enum PWeaponFlagsCommon,enum PWeaponFlagsSP,enum PWeaponFlagsMP,64>::ClearFlagInternal(&v36->weapCommon.weapFlags, ACTIVE, 0x11u);
            }
          }
          v39 = ClientData->botInfo.playerState;
          if ( Bot_ShouldPressADSButton(ClientData) )
          {
            cmd->buttons |= 0x200ui64;
            if ( Bot_Weap_CanHoldBreath(v39) )
            {
              if ( v39->weapCommon.fWeaponPosFrac >= 1.0 )
              {
                if ( level.time > ClientData->botInfo.nextHoldBreathCheckTime && !v39->holdBreathTimer )
                {
                  v40 = G_random();
                  ClientData->botInfo.canHoldBreath = *(float *)&v40 < ClientData->botMatchData.holdBreathChance;
                  ClientData->botInfo.nextHoldBreathCheckTime = level.time + BG_HoldBreathMaxTime(v39);
                }
                if ( ClientData->botInfo.canHoldBreath )
                  cmd->buttons |= 0x800ui64;
              }
              else
              {
                ClientData->botInfo.nextHoldBreathCheckTime = level.time + G_irand(0, 3000);
              }
            }
            else
            {
              *(_QWORD *)((char *)&ClientData->scriptedAgentInfo + 28092) = 0i64;
            }
          }
          Bot_UpdateScriptedButtons(ClientData, cmd);
          Bot_UpdateNVGState(ClientData, cmd);
          Bot_DrawDebug(ClientData);
          Bot_UpdateScreenTargets(ClientData);
          Bot_UpdateMeleeCharge(ClientData, cmd);
          if ( Bot_Weap_WeaponHasVariableZoom(ClientData) )
          {
            if ( BG_InADS(ClientData->botInfo.playerState) )
            {
              v43 = level.time - ClientData->botInfo.enemyTrack.lastFireTime;
              v44 = level.time > ClientData->botInfo.nextZoomPressTime;
              if ( !BG_IsZoomButtonPressed(ClientData->botInfo.lastUserCmd) && !BG_IsZoomButtonPressed(cmd) )
                v28 = 0;
              if ( v43 <= 500 || !v44 || v28 )
                goto LABEL_138;
              if ( !Com_GameMode_SupportsFeature(WEAPONSTATES_NUM|WEAPON_LADDER_AIM) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8046, ASSERT_TYPE_ASSERT, "(Com_GameMode_SupportsFeature( Com_GameMode_Feature::WEAPON_VARIABLE_ZOOM ))", (const char *)&queryFormat, "Com_GameMode_SupportsFeature( Com_GameMode_Feature::WEAPON_VARIABLE_ZOOM )") )
                __debugbreak();
              cmd->buttons |= 0x2000000ui64;
              v41 = 6000;
              v42 = 1000;
            }
            else
            {
              v41 = 3000;
              v42 = 0;
            }
            ClientData->botInfo.nextZoomPressTime = level.time + G_irand(v42, v41);
          }
LABEL_138:
          Bot_UpdateHybridToggle(ClientData, cmd);
          if ( !ClientData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5464, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState )", (const char *)&queryFormat, "botData->botInfo.playerState") )
            __debugbreak();
          if ( ClientData->botInfo.wantsAlternate )
          {
            v45 = Bot_Weap_GetViewmodelWeapon(ClientData->botInfo.playerState);
            if ( !Bot_Weap_IsNone(v45) && BG_ActiveUnderbarrel(v45) )
              BG_HasUnderbarrelAmmo(v45);
          }
          if ( Bot_IsFiringWeapon(ClientData, cmd) )
            ClientData->botInfo.lastAudioDistraction = level.time;
          if ( memcmp_0(&cmd->weapon, &BotInfoFromNetBuffer->lastUserCmd->weapon, 0x3Cui64) )
            BotInfoFromNetBuffer->weaponFireWaitArcCos = 0.0;
          BotInfoFromNetBuffer->flags &= 0xFFFFFF9F;
          if ( (BotInfoFromNetBuffer->flags & 8) != 0 )
            Bot_PathClear(BotInfoFromNetBuffer);
          Bot_UpdateClientMessageNotifies(ClientData, cmd);
          GStatic::ClearActiveStatics();
          goto LABEL_155;
        }
        Sentient_InvalidateNearestNode(BotInfoFromNetBuffer->sentient);
        Sentient_InvalidateNearestTacPoint(BotInfoFromNetBuffer->sentient);
        Bot_Weap_ClearCmd(cmd, BotInfoFromNetBuffer->playerState);
      }
    }
LABEL_155:
    Bot_FinalizeCmdTime(cmd);
  }
}

/*
==============
Bot_ThinkRoundRobin
==============
*/
void Bot_ThinkRoundRobin(bot_data_t *botData)
{
  __int128 v1; 
  int v3; 
  gentity_s *ent; 
  AIBotInterface *m_pAI; 
  const pathnode_t *v6; 
  bitarray_base<bitarray<224> > *v7; 
  int v8; 
  int NodeTeam; 
  int v10; 
  int flags; 
  int v12; 
  int firstInRangeTime; 
  int v14; 
  double v15; 
  double v16; 
  bitarray<224> *AllTeamFlags; 
  sentient_s *i; 
  gentity_s *v19; 
  __int16 EntityIndex; 
  const SvClientMP *MpClient; 
  BOOL IsClientConnected; 
  bitarray_base<bitarray<224> > *v23; 
  const SvClientMP *v24; 
  signed __int64 v25; 
  int v26; 
  __int64 v27; 
  gclient_s *client; 
  const char *RandomName; 
  char *name; 
  __int64 v31; 
  __int64 v32; 
  char dest[8]; 
  AIBotWrapper v34; 
  bot_zone_count_cmp_t compares; 
  vec3_t end; 
  bitarray<224> iTeamFlags; 
  vec3_t vEyePosOut; 
  char newName[36]; 
  __int128 v40; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5781, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5783, ASSERT_TYPE_ASSERT, "( botInfo->sentient )", (const char *)&queryFormat, "botInfo->sentient") )
    __debugbreak();
  if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
    __debugbreak();
  v3 = (signed int)ComCharacterLimits::ms_gameData.m_characterCount / 3;
  if ( level.framenum % v3 == G_GetEntityIndex(botData->botInfo.ent) % v3 )
  {
    v40 = v1;
    AICommonInterface::AICommonInterface(&v34.m_botInterface);
    v34.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
    AICommonInterface::AICommonInterface(&v34.m_botAgentInterface);
    ent = botData->botInfo.ent;
    v34.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
    v34.m_pAI = NULL;
    AIBotWrapper::Setup(&v34, ent);
    m_pAI = v34.m_pAI;
    if ( !v34.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5793, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
      __debugbreak();
    v6 = NULL;
    if ( SV_BotRequirePathnodes(botData) )
      v6 = Sentient_NearestNode(botData->botInfo.sentient);
    if ( Path_ZoneCount() && level.teammode != TEAMMODE_FFA && v6 )
    {
      v7 = (bitarray_base<bitarray<224> > *)(Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) ? Com_TeamsSP_GetAllCombatTeamFlags() : Com_TeamsMP_GetAllTeamFlags());
      if ( bitarray_base<bitarray<224>>::testBit(v7, botData->botInfo.sentient->eTeam) )
      {
        v8 = Path_NodeZoneFromNode(v6);
        if ( v8 != 255 )
        {
          NodeTeam = Path_GetNodeTeam(botData->botInfo.sentient->eTeam);
          *(_QWORD *)&compares.count = 3i64;
          compares.value = 0;
          v10 = Bot_ZoneNearestCount(v8, NodeTeam, 2, &compares, 1);
          flags = botData->botInfo.flags;
          if ( v10 == 255 )
            v12 = flags & 0xFFFF7FFF;
          else
            v12 = flags | 0x8000;
          botData->botInfo.flags = v12;
        }
      }
    }
    firstInRangeTime = botData->botInfo.enemyTrack.firstInRangeTime;
    v14 = level.time - firstInRangeTime;
    if ( !firstInRangeTime )
      v14 = 0;
    v15 = I_fclamp((float)((float)v14 - 2000.0) * 0.00019999999, 0.0, 1.0);
    v16 = G_flrand(0.0, 1.0 - *(float *)&v15);
    botData->botInfo.targetHeadBias = *(float *)&v16;
    if ( Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) )
      AllTeamFlags = (bitarray<224> *)Com_TeamsSP_GetAllTeamFlags();
    else
      AllTeamFlags = (bitarray<224> *)Com_TeamsMP_GetAllTeamFlags();
    iTeamFlags = *AllTeamFlags;
    for ( i = Sentient_FirstSentient(&iTeamFlags); i; i = Sentient_NextSentient(i, &iTeamFlags) )
    {
      v19 = i->ent;
      if ( i->ent )
      {
        EntityIndex = G_GetEntityIndex(i->ent);
        if ( G_IsEntityInUse(EntityIndex) )
        {
          if ( v19->sentient )
          {
            if ( v19->client )
            {
              MpClient = SV_Client_GetMpClient(v19->s.number);
              IsClientConnected = Bot_IsClientConnected(MpClient);
            }
            else
            {
              if ( !v19->agent )
                goto LABEL_42;
              IsClientConnected = v19->s.eType == ET_AGENT;
            }
            if ( IsClientConnected )
            {
LABEL_42:
              if ( v19->s.eType != ET_INVISIBLE )
              {
                v23 = (bitarray_base<bitarray<224> > *)Com_TeamsMP_GetAllTeamFlags();
                if ( bitarray_base<bitarray<224>>::testBit(v23, v19->sentient->eTeam) )
                {
                  if ( !v19->client || (v24 = SV_Client_GetMpClient(v19->s.number), Bot_IsClientActive(v24)) )
                  {
                    if ( !AI_IsAlliedSentient(botData->botInfo.sentient, i) && Bot_IsHighAerialSentient(i) )
                    {
                      Sentient_GetHeadPosition(botData->botInfo.sentient, &vEyePosOut);
                      v25 = (char *)i - (char *)level.sentients;
                      end = i->ent->r.currentOrigin;
                      v26 = 2 * AICommonInterface::SightTrace(m_pAI, &vEyePosOut, &end, i->ent->s.number, NORMAL_FOLIAGE_CHECKS);
                      v27 = v25 / 184;
                      *((_DWORD *)&botData->botInfo.botSentientInfo[v27] + 14) &= ~2u;
                      *((_DWORD *)&botData->botInfo.botSentientInfo[v27] + 14) |= v26;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5848, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
      __debugbreak();
    client = botData->botInfo.ent->client;
    if ( client )
    {
      Bot_RemoveDebugSuffixFromName(client->sess.cs.name, (char (*)[36])newName);
      if ( SV_BotPlayerNameTaken(botData, newName) )
      {
        RandomName = SV_BotGetRandomName();
        Bot_NameSet(botData, RandomName, NULL);
      }
      if ( botData->botMatchData.personality >= (unsigned int)BOT_PERSONALITY_DEFAULT )
      {
        LODWORD(v32) = botData->botMatchData.personality;
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5862, ASSERT_TYPE_ASSERT, "(unsigned)( botData->botMatchData.personality ) < (unsigned)( ( sizeof( *array_counter( BOT_STR_TBL_PERSONALITY_TAG ) ) + 0 ) - 1 )", "botData->botMatchData.personality doesn't index ARRAY_COUNT( BOT_STR_TBL_PERSONALITY_TAG ) - 1\n\t%i not in [0, %i)", v32, 3) )
          __debugbreak();
      }
      name = botData->botInfo.ent->client->sess.cs.name;
      if ( botData->botInfo.ent->client == (gclient_s *)-22188i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3473, ASSERT_TYPE_ASSERT, "( originalName )", (const char *)&queryFormat, "originalName") )
        __debugbreak();
      if ( Bot_HasDebugSuffixInName(name) )
      {
        v31 = -1i64;
        do
          ++v31;
        while ( name[v31] );
        Core_strncpy(dest, 4ui64, &name[(int)v31 - 5], 3ui64);
      }
      else
      {
        dest[0] = 0;
      }
      if ( I_stricmp(dest, BOT_STR_TBL_PERSONALITY_TAG[botData->botMatchData.personality]) )
        Bot_NameSet(botData, NULL, BOT_STR_TBL_PERSONALITY_TAG[botData->botMatchData.personality]);
    }
  }
}

/*
==============
Bot_TimeStampPath
==============
*/
void Bot_TimeStampPath(bot_info_t *botInfo, int useTime)
{
  ;
}

/*
==============
Bot_TraceBlocksTraversal
==============
*/
__int64 Bot_TraceBlocksTraversal(bot_data_t *botData, const trace_t *trace, const vec3_t *destination, int *byEnemy)
{
  unsigned __int16 EntityHitId; 
  __int64 v9; 
  gentity_s *GEntity; 
  gentity_s *ent; 
  float v12; 
  float v13; 
  float v14; 
  const sentient_s *sentient; 
  __int64 v17; 
  __int64 v18; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2207, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2208, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
    __debugbreak();
  if ( !trace && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2209, ASSERT_TYPE_ASSERT, "( trace )", (const char *)&queryFormat, "trace") )
    __debugbreak();
  if ( !byEnemy && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2210, ASSERT_TYPE_ASSERT, "( byEnemy )", (const char *)&queryFormat, "byEnemy") )
    __debugbreak();
  *byEnemy = 0;
  if ( trace->fraction >= 1.0 )
    return 0i64;
  EntityHitId = Trace_GetEntityHitId(trace);
  if ( EntityHitId == 2047 )
    return 0i64;
  v9 = EntityHitId;
  if ( (unsigned int)EntityHitId >= level.num_entities )
  {
    LODWORD(v17) = EntityHitId;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2220, ASSERT_TYPE_ASSERT, "(unsigned)( hitEntID ) < (unsigned)( level.num_entities )", "hitEntID doesn't index level.num_entities\n\t%i not in [0, %i)", v17, level.num_entities) )
      __debugbreak();
  }
  if ( (unsigned int)v9 >= 0x800 )
  {
    LODWORD(v18) = 2048;
    LODWORD(v17) = v9;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 207, ASSERT_TYPE_ASSERT, "(unsigned)( entityIndex ) < (unsigned)( ( 2048 ) )", "entityIndex doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v17, v18) )
      __debugbreak();
  }
  if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 208, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
    __debugbreak();
  if ( g_entities[v9].r.isInUse != g_entityIsInUse[v9] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 209, ASSERT_TYPE_ASSERT, "( g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex] )", (const char *)&queryFormat, "g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex]") )
    __debugbreak();
  if ( !g_entityIsInUse[v9] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2221, ASSERT_TYPE_ASSERT, "( G_IsEntityInUse( hitEntID ) )", (const char *)&queryFormat, "G_IsEntityInUse( hitEntID )") )
    __debugbreak();
  GEntity = G_GetGEntity(v9);
  ent = botData->botInfo.ent;
  v12 = destination->v[1];
  v13 = destination->v[0];
  v14 = destination->v[2];
  if ( (float)((float)((float)((float)(v12 - ent->r.currentOrigin.v[1]) * (float)(v12 - ent->r.currentOrigin.v[1])) + (float)((float)(v13 - ent->r.currentOrigin.v[0]) * (float)(v13 - ent->r.currentOrigin.v[0]))) + (float)((float)(v14 - ent->r.currentOrigin.v[2]) * (float)(v14 - ent->r.currentOrigin.v[2]))) <= (float)((float)((float)((float)(v12 - GEntity->r.currentOrigin.v[1]) * (float)(v12 - GEntity->r.currentOrigin.v[1])) + (float)((float)(v13 - GEntity->r.currentOrigin.v[0]) * (float)(v13 - GEntity->r.currentOrigin.v[0]))) + (float)((float)(v14 - GEntity->r.currentOrigin.v[2]) * (float)(v14 - GEntity->r.currentOrigin.v[2]))) )
    return 0i64;
  sentient = GEntity->sentient;
  if ( sentient )
  {
    if ( !AI_IsAlliedSentient(botData->botInfo.sentient, sentient) )
      *byEnemy = 1;
  }
  return 1i64;
}

/*
==============
Bot_TraversalClear
==============
*/
void Bot_TraversalClear(bot_info_t *botInfo)
{
  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4232, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  *(_DWORD *)&botInfo->nodeNegotStart = -1;
  botInfo->traversal = 0;
  botInfo->traverseWaitingTime = 0;
  botInfo->traverseJumpTime = 0;
}

/*
==============
Bot_TryFreezeMovement
==============
*/
void Bot_TryFreezeMovement(bot_data_t *botData)
{
  double v2; 
  float v3; 
  float v4; 
  float v5; 
  int time; 
  int traversal; 
  gentity_s *ent; 
  __int64 v9; 
  bool v10; 
  const bitarray<224> *AllCombatTeamFlags; 
  double v12; 
  unsigned int v13; 
  unsigned int v14; 
  unsigned int v15; 
  int ClosestCharacterList; 
  __int64 v17; 
  const gentity_s *v18; 
  bot_data_t *EntityData; 
  bitarray<224> result; 
  vec3_t forward; 
  vec3_t vEyePosOut; 
  gentity_s *entity[5]; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13153, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13159, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  if ( !botData->botInfo.ent->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13160, ASSERT_TYPE_ASSERT, "( botInfo->ent->sentient )", (const char *)&queryFormat, "botInfo->ent->sentient") )
    __debugbreak();
  if ( level.time < botData->botInfo.lastFrozenTime + 5000 )
    goto LABEL_40;
  if ( botData->botInfo.scriptGoal.type <= BOT_SCR_GOAL_HUNT && !EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
  {
    v2 = AngleNormalize360(botData->botInfo.ent->r.currentAngles.v[1] + 180.0);
    YawVectors(*(float *)&v2, &forward, NULL);
    Sentient_GetEyePosition(botData->botInfo.ent->sentient, &vEyePosOut);
    v3 = (float)(100.0 * forward.v[1]) + vEyePosOut.v[1];
    v4 = (float)(100.0 * forward.v[0]) + vEyePosOut.v[0];
    v5 = (float)(100.0 * forward.v[2]) + vEyePosOut.v[2];
    if ( v4 == 0.0 && v3 == 0.0 && v5 == 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14633, ASSERT_TYPE_ASSERT, "( Vec3NotZero( *point ) )", (const char *)&queryFormat, "Vec3NotZero( *point )") )
      __debugbreak();
    time = level.time;
    if ( botData->botInfo.lookAtType <= BOT_LOOK_CODE_FORCED || level.time >= botData->botInfo.lookAtTime )
    {
      botData->botInfo.lookAtType = BOT_LOOK_CODE_FORCED;
      botData->botInfo.lookAtTime = time + 1000;
      botData->botInfo.lookAtPoint.v[0] = v4;
      botData->botInfo.lookAtPoint.v[1] = v3;
      botData->botInfo.lookAtPoint.v[2] = v5;
      traversal = botData->botInfo.traversal;
      if ( (traversal & 1) != 0 )
        botData->botInfo.traversal = traversal & 0xFFFFFFFE;
    }
    ent = botData->botInfo.ent;
    botData->botInfo.anglesWhenFrozen.v[0] = ent->r.currentAngles.v[0];
    botData->botInfo.anglesWhenFrozen.v[1] = ent->r.currentAngles.v[1];
    botData->botInfo.anglesWhenFrozen.v[2] = ent->r.currentAngles.v[2];
LABEL_40:
    botData->botInfo.movementFrozenUntil = level.time + 2000;
    return;
  }
  v9 = 0i64;
  *((_QWORD *)&botData->scriptedAgentInfo + 3652) = 0i64;
  botData->botInfo.anglesWhenFrozen.v[2] = 0.0;
  if ( level.teammode == TEAMMODE_FFA )
  {
    v10 = Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80);
    if ( Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) )
      AllCombatTeamFlags = Com_TeamsSP_GetAllCombatTeamFlags();
    else
      AllCombatTeamFlags = Com_TeamsMP_GetAllTeamFlags();
    v12 = *(double *)&AllCombatTeamFlags->array[4];
    v13 = AllCombatTeamFlags->array[6] & 0xFFEFFFFF;
    *(_OWORD *)result.array = *(_OWORD *)AllCombatTeamFlags->array;
    v14 = result.array[0];
    *(double *)&result.array[4] = v12;
    if ( v10 )
      v14 = result.array[0] & 0xF7FFFFFF;
    v15 = v13 & 0xFF9FFFFF;
  }
  else
  {
    Com_Teams_GetEnemyTeamFlags(&result, botData->botInfo.ent->sentient->eTeam);
    v15 = result.array[6];
    v14 = result.array[0];
  }
  result.array[1] = ~result.array[1];
  result.array[2] = ~result.array[2];
  result.array[3] = ~result.array[3];
  result.array[4] = ~result.array[4];
  result.array[5] = ~result.array[5];
  result.array[0] = ~v14;
  result.array[6] = ~v15;
  ClosestCharacterList = Bot_GetClosestCharacterList(botData->botInfo.ent, &botData->botInfo.ent->r.currentOrigin, 400.0, 1, 0, 1, 0, &result, entity, 5);
  v17 = ClosestCharacterList;
  if ( ClosestCharacterList <= 0 )
    goto LABEL_40;
  while ( 1 )
  {
    v18 = entity[v9];
    if ( !v18 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13199, ASSERT_TYPE_ASSERT, "( currentClosestClient )", (const char *)&queryFormat, "currentClosestClient") )
      __debugbreak();
    EntityData = Bot_GetEntityData(v18);
    if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13201, ASSERT_TYPE_ASSERT, "( currentClosestClientBotData )", (const char *)&queryFormat, "currentClosestClientBotData") )
      __debugbreak();
    if ( EntityData->botInfo.movementFrozenUntil > level.time )
      break;
    if ( ++v9 >= v17 )
      goto LABEL_40;
  }
}

/*
==============
Bot_UnregisterEvents
==============
*/
void Bot_UnregisterEvents(const bot_data_t *botData)
{
  gentity_s *ent; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5121, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  ent = botData->botInfo.ent;
  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5124, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  Actor_EventListener_Remove(ent->s.number, scr_const.bulletwhizby);
  Actor_EventListener_Remove(ent->s.number, scr_const.projectile_impact);
  Actor_EventListener_Remove(ent->s.number, scr_const.gunshot);
  Actor_EventListener_Remove(ent->s.number, scr_const.gunshot_teammate);
  Actor_EventListener_Remove(ent->s.number, scr_const.silenced_shot);
  Actor_EventListener_Remove(ent->s.number, scr_const.explode);
  Actor_EventListener_Remove(ent->s.number, scr_const.enemy);
  Actor_EventListener_Remove(ent->s.number, scr_const.death);
  Actor_EventListener_Remove(ent->s.number, scr_const.grenadedanger);
  Actor_EventListener_Remove_ByEnum(ent->s.number, 2);
  Actor_EventListener_Remove_ByEnum(ent->s.number, 3);
  Actor_EventListener_Remove_ByEnum(ent->s.number, 4);
  Actor_EventListener_Remove_ByEnum(ent->s.number, 22);
  Actor_EventListener_Remove_ByEnum(ent->s.number, 25);
  Actor_EventListener_Remove_ByEnum(ent->s.number, 28);
}

/*
==============
Bot_UpdateAerialLockOnPath
==============
*/
__int64 Bot_UpdateAerialLockOnPath(bot_data_t *botData)
{
  gentity_s *v3; 
  gentity_s *v4; 
  pathnode_t *nearestNode; 
  int v6; 
  __int64 v7; 
  __int64 v8; 
  pathsort_s *p_nodes; 
  unsigned __int16 v10; 
  unsigned __int16 v11; 
  pathnode_t *v12; 
  const char *v13; 
  int nodesPicked; 
  vec3_t pos; 
  bot_score_parms_s parms; 
  bot_score_item_s objects[512]; 
  pathsort_s nodes; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9856, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( Bot_ShouldDelayPathGen(botData) )
    return 0i64;
  if ( !EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
    goto LABEL_22;
  v3 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
  v4 = v3;
  if ( !v3 )
    goto LABEL_22;
  if ( !v3->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9883, ASSERT_TYPE_ASSERT, "( enemy->sentient )", (const char *)&queryFormat, "enemy->sentient") )
    __debugbreak();
  if ( Bot_Weap_HasLauncherThatNeedsAimAtEnemy(botData) && Bot_IsHighAerialSentient(v4->sentient) )
  {
    if ( botData->botInfo.aerialEnemyLockOnNode != 0xFFFF )
    {
      nearestNode = botData->botInfo.activeGoal.nearestNode;
      if ( nearestNode )
      {
        if ( Path_ConvertNodeToIndex(nearestNode) == botData->botInfo.aerialEnemyLockOnNode )
          return 1i64;
      }
    }
    v6 = Path_NodesInRadius(&botData->botInfo.ent->r.currentOrigin, 750.0, &nodes, 512, -510656513);
    v7 = v6;
    if ( v6 > 0 )
    {
      v8 = 0i64;
      p_nodes = &nodes;
      do
      {
        v10 = Path_ConvertNodeToIndex(p_nodes->node);
        ++p_nodes;
        objects[v8++].object = v10;
      }
      while ( v8 < v7 );
    }
    Bot_Score_ScoreNodesInitParms(botData, &parms, BOT_SCORE_NODE_AERIAL_TARGET);
    if ( Bot_Score_ScoreNodesPick(botData, objects, v7, 1, &parms, 1, &nodesPicked) == 1 )
    {
      v11 = nodesPicked;
      v12 = Path_ConvertIndexToNode(nodesPicked);
      pathnode_t::GetPos(v12, &pos);
      v13 = j_va("Target %i with Lock-On", (unsigned int)v4->s.number);
      Bot_GetPathToGoalInternal(botData, &pos, 0.0, v13);
      botData->botInfo.aerialEnemyLockOnNode = v11;
      return 1i64;
    }
  }
  else
  {
LABEL_22:
    botData->botInfo.aerialEnemyLockOnNode = -1;
  }
  return 0i64;
}

/*
==============
Bot_UpdateAimDownSights
==============
*/
void Bot_UpdateAimDownSights(bot_data_t *botData, usercmd_s *cmd)
{
  playerState_s *playerState; 
  double v5; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9330, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9331, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  if ( Bot_ShouldPressADSButton(botData) )
  {
    cmd->buttons |= 0x200ui64;
    if ( Bot_Weap_CanHoldBreath(playerState) )
    {
      if ( playerState->weapCommon.fWeaponPosFrac >= 1.0 )
      {
        if ( level.time > botData->botInfo.nextHoldBreathCheckTime && !playerState->holdBreathTimer )
        {
          v5 = G_random();
          botData->botInfo.canHoldBreath = *(float *)&v5 < botData->botMatchData.holdBreathChance;
          botData->botInfo.nextHoldBreathCheckTime = level.time + BG_HoldBreathMaxTime(playerState);
        }
        if ( botData->botInfo.canHoldBreath )
          cmd->buttons |= 0x800ui64;
      }
      else
      {
        botData->botInfo.nextHoldBreathCheckTime = level.time + G_irand(0, 3000);
      }
    }
    else
    {
      *(_QWORD *)((char *)&botData->scriptedAgentInfo + 28092) = 0i64;
    }
  }
}

/*
==============
Bot_UpdateAimDownSightsDesire
==============
*/
void Bot_UpdateAimDownSightsDesire(bot_data_t *botData, usercmd_s *cmd)
{
  playerState_s *playerState; 
  const Weapon *ViewmodelWeapon; 
  const pathnode_t *v6; 
  char currentStanceFlags; 
  int IsUsingTurret; 
  char v9; 
  double RangeMax; 
  float v11; 
  float v12; 
  double MaxRangeBase; 
  double v14; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7967, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7968, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7969, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7974, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  if ( (LOBYTE(botData->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) == 0 )
  {
    ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(playerState);
    if ( !Bot_Weap_IsNone(ViewmodelWeapon) )
    {
      if ( Bot_IsIdleAtScriptGoal(botData) || Bot_IsUsingTurret(botData) )
      {
        if ( Bot_ShouldADS(botData, playerState) )
        {
          v6 = Sentient_NearestNode(botData->botInfo.sentient);
          if ( v6 )
          {
            currentStanceFlags = botData->botInfo.currentStanceFlags;
            IsUsingTurret = Bot_IsUsingTurret(botData);
            v9 = currentStanceFlags;
            if ( IsUsingTurret )
              v9 = 1;
            RangeMax = Path_NodeExposureGetRangeMax(v6, playerState->viewangles.v[1], v9);
            v11 = *(float *)&RangeMax;
            if ( Bot_IsUsingTurret(botData) )
            {
              v12 = FLOAT_1000_0;
            }
            else
            {
              MaxRangeBase = Bot_Weap_GetMaxRangeBase(playerState, ViewmodelWeapon);
              v12 = *(float *)&MaxRangeBase * 1.25;
            }
            if ( v11 > v12 )
            {
              botData->botInfo.lastADSPressTime = level.time;
              botData->botInfo.lastLongRangeTime = level.time;
            }
          }
        }
      }
      if ( Bot_CanSeeAndCanFireOnEnemy(botData) )
      {
        v14 = Bot_Weap_GetMaxRangeBase(playerState, ViewmodelWeapon);
        if ( (float)(*(float *)&v14 * 0.75) < botData->botInfo.enemyTrack.lastDist )
          botData->botInfo.lastLongRangeTime = level.time;
      }
    }
  }
}

/*
==============
Bot_UpdateAwareOfEnemy
==============
*/
void Bot_UpdateAwareOfEnemy(bot_data_t *botData)
{
  $3396140AF3A78F7FCD1D73807E505015 *v2; 
  gentity_s *v3; 
  int v4; 
  const pathnode_t *LastKnownEntNearestNode; 
  const tacpoint_t *Point; 
  const sentient_s *sentient; 
  sentient_info_t *SentientInfo; 
  int HasLOSToHighAerialEnemy; 
  float v10; 
  float v11; 
  float v12; 
  int v13; 
  unsigned int v14; 
  float v15; 
  int v16; 
  const tacpoint_t *v17; 
  int PointsInRadius_Sorted; 
  float v19; 
  float v20; 
  float v21; 
  __int64 maxNodes; 
  __int64 maxNodesa; 
  __int64 typeFlags; 
  float s; 
  float c; 
  vec3_t predictedPointOut; 
  vec3_t targetPos; 
  pathsort_s nodes[256]; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11559, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v2 = &botData->8;
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11578, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11579, ASSERT_TYPE_ASSERT, "( botInfo->sentient )", (const char *)&queryFormat, "botInfo->sentient") )
    __debugbreak();
  botData->botInfo.flags &= ~0x200u;
  if ( !EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
    return;
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
  {
    v3 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
    if ( v3 )
      goto LABEL_17;
  }
  else
  {
    v3 = NULL;
  }
  if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11587, ASSERT_TYPE_ASSERT, "( pEnemyEnt )", (const char *)&queryFormat, "pEnemyEnt") )
    __debugbreak();
LABEL_17:
  if ( !v3->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11588, ASSERT_TYPE_ASSERT, "( pEnemyEnt->sentient )", (const char *)&queryFormat, "pEnemyEnt->sentient") )
    __debugbreak();
  predictedPointOut.v[0] = 0.0;
  predictedPointOut.v[1] = 0.0;
  predictedPointOut.v[2] = 0.0;
  v4 = level.time - Bot_GetLastKnownEntPosAndTime(botData, v3, &targetPos);
  if ( SV_BotRequirePathnodes(botData) )
  {
    LastKnownEntNearestNode = Bot_GetLastKnownEntNearestNode(botData, v3);
    LOBYTE(Point) = Bot_PredictSeePointUsingNode(&botData->botInfo, &targetPos, LastKnownEntNearestNode, &predictedPointOut);
  }
  else
  {
    if ( !v2->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9430, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
      __debugbreak();
    if ( !v2->botInfo.ent->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9431, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent->sentient )", (const char *)&queryFormat, "botData->botInfo.ent->sentient") )
      __debugbreak();
    sentient = v3->sentient;
    if ( sentient )
    {
      SentientInfo = Sentient_GetSentientInfo(v2->botInfo.ent->sentient, sentient);
      if ( !SentientInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9437, ASSERT_TYPE_ASSERT, "( sentInfo )", (const char *)&queryFormat, "sentInfo") )
        __debugbreak();
      Point = tacpoint_ref_t::GetPoint(&SentientInfo->lastKnownTacPoint);
    }
    else
    {
      Point = TacGraph_FindClosestPoint(&v3->r.currentOrigin);
    }
    if ( Point || (Point = TacGraph_FindClosestPoint(&targetPos)) != NULL )
      LOBYTE(Point) = Bot_PredictSeeTacPoint(&botData->botInfo, Point, &predictedPointOut);
  }
  HasLOSToHighAerialEnemy = (unsigned __int8)Point;
  if ( Bot_IsHighAerialSentient(v3->sentient) )
  {
    HasLOSToHighAerialEnemy = Bot_HasLOSToHighAerialEnemy(botData, v3);
    predictedPointOut = targetPos;
  }
  if ( v4 < 3000 && HasLOSToHighAerialEnemy )
  {
    v10 = predictedPointOut.v[0];
    if ( predictedPointOut.v[0] == 0.0 && predictedPointOut.v[1] == 0.0 && predictedPointOut.v[2] == 0.0 )
    {
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11619, ASSERT_TYPE_ASSERT, "( Vec3NotZero( predictSeePoint ) )", (const char *)&queryFormat, "Vec3NotZero( predictSeePoint )") )
        __debugbreak();
      v10 = predictedPointOut.v[0];
    }
    v11 = fsqrt((float)((float)((float)(v2->botInfo.ent->r.currentOrigin.v[1] - predictedPointOut.v[1]) * (float)(v2->botInfo.ent->r.currentOrigin.v[1] - predictedPointOut.v[1])) + (float)((float)(v2->botInfo.ent->r.currentOrigin.v[0] - v10) * (float)(v2->botInfo.ent->r.currentOrigin.v[0] - v10))) + (float)((float)(v2->botInfo.ent->r.currentOrigin.v[2] - predictedPointOut.v[2]) * (float)(v2->botInfo.ent->r.currentOrigin.v[2] - predictedPointOut.v[2])));
    if ( v11 <= 500.0 )
    {
      v21 = predictedPointOut.v[2];
      botData->botInfo.enemyTrack.awarePoint.v[1] = predictedPointOut.v[1];
      botData->botInfo.enemyTrack.awarePoint.v[2] = v21;
      botData->botInfo.enemyTrack.awarePoint.v[0] = v10;
      goto LABEL_68;
    }
    FastSinCos(botData->botMatchData.awareViewAngle * 0.0087266462, &s, &c);
    v12 = (float)((float)(s / c) * v11) + 50.0;
    if ( fsqrt((float)((float)((float)(botData->botInfo.enemyTrack.awarePoint.v[1] - predictedPointOut.v[1]) * (float)(botData->botInfo.enemyTrack.awarePoint.v[1] - predictedPointOut.v[1])) + (float)((float)(botData->botInfo.enemyTrack.awarePoint.v[0] - predictedPointOut.v[0]) * (float)(botData->botInfo.enemyTrack.awarePoint.v[0] - predictedPointOut.v[0]))) + (float)((float)(botData->botInfo.enemyTrack.awarePoint.v[2] - predictedPointOut.v[2]) * (float)(botData->botInfo.enemyTrack.awarePoint.v[2] - predictedPointOut.v[2]))) <= v12 || level.time < botData->botInfo.enemyTrack.awarePointNext )
      goto LABEL_68;
    if ( SV_BotRequirePathnodes(botData) )
    {
      v13 = Path_NodesInCylinder(&predictedPointOut, NULL, v12, v12 * 0.5, nodes, 256, -510656513);
      v14 = v13;
      if ( v13 > 0 )
      {
        std::_Sort_unchecked<pathsort_s *,bool (*)(pathsort_s const &,pathsort_s const &)>(nodes, &nodes[v13], v13, Path_CompareNodesIncreasing);
        v15 = fsqrt((float)(G_rand() % (int)(v14 * v14)));
        v16 = (int)v15;
        if ( (int)v15 >= v14 )
        {
          LODWORD(typeFlags) = v14;
          LODWORD(maxNodesa) = (int)v15;
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11641, ASSERT_TYPE_ASSERT, "(unsigned)( nodeIndex ) < (unsigned)( nodeSetCount )", "nodeIndex doesn't index nodeSetCount\n\t%i not in [0, %i)", maxNodesa, typeFlags) )
            __debugbreak();
        }
        if ( !nodes[v16].node && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11642, ASSERT_TYPE_ASSERT, "( nodeSet[nodeIndex].node )", (const char *)&queryFormat, "nodeSet[nodeIndex].node") )
          __debugbreak();
        pathnode_t::GetPos(nodes[v16].node, &v2->botInfo.enemyTrack.awarePoint);
        goto LABEL_66;
      }
    }
    else
    {
      v17 = Sentient_NearestTacPoint(botData->botInfo.sentient);
      if ( v17 )
      {
        PointsInRadius_Sorted = TacGraph_FindPointsInRadius_Sorted(v17, &predictedPointOut, v12, (const tacpoint_t **)nodes, 512);
        if ( PointsInRadius_Sorted > 0 )
        {
          v19 = fsqrt((float)(G_rand() % (PointsInRadius_Sorted * PointsInRadius_Sorted)));
          if ( (int)v19 >= (unsigned int)PointsInRadius_Sorted )
          {
            LODWORD(maxNodes) = (int)v19;
            if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11668, ASSERT_TYPE_ASSERT, "(unsigned)( pointIndex ) < (unsigned)( pointSetCount )", "pointIndex doesn't index pointSetCount\n\t%i not in [0, %i)", maxNodes, PointsInRadius_Sorted) )
              __debugbreak();
          }
          TacGraph_GetApproxGroundPosForPoint(*((const tacpoint_t **)&nodes[0].node + (int)v19), &v2->botInfo.enemyTrack.awarePoint);
          goto LABEL_66;
        }
      }
    }
    v20 = predictedPointOut.v[1];
    v2->botInfo.enemyTrack.awarePoint.v[0] = predictedPointOut.v[0];
    v2->botInfo.enemyTrack.awarePoint.v[2] = predictedPointOut.v[2];
    v2->botInfo.enemyTrack.awarePoint.v[1] = v20;
LABEL_66:
    v2->botInfo.enemyTrack.awarePointNext = G_rand() % 100 + level.time + 300;
LABEL_68:
    v2->botInfo.enemyTrack.awareTime = level.time;
  }
}

/*
==============
Bot_UpdateBadPathLook
==============
*/
__int64 Bot_UpdateBadPathLook(bot_data_t *botData, vec3_t *viewAnglesOut)
{
  gentity_s *v4; 
  $3396140AF3A78F7FCD1D73807E505015 *v5; 
  float v6; 
  float v7; 
  float v8; 
  __int128 v9; 
  vec3_t vEyePosOut; 
  vec3_t vec; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11840, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
    v4 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
  else
    v4 = NULL;
  v5 = &botData->8;
  vEyePosOut.v[0] = 0.0;
  vEyePosOut.v[1] = 0.0;
  vEyePosOut.v[2] = 0.0;
  vec.v[0] = 0.0;
  vec.v[1] = 0.0;
  vec.v[2] = 0.0;
  if ( botData == (bot_data_t *)-8i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13725, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  if ( Bot_NavPathExists(&botData->botInfo) || !EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
    return 0i64;
  if ( !v5->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11857, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  if ( !v4 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11858, ASSERT_TYPE_ASSERT, "( enemyEnt )", (const char *)&queryFormat, "enemyEnt") )
    __debugbreak();
  Sentient_GetEyePosition(v5->botInfo.ent->sentient, &vEyePosOut);
  v6 = v4->r.currentOrigin.v[0] - vEyePosOut.v[0];
  v7 = v4->r.currentOrigin.v[2] - vEyePosOut.v[2];
  v9 = LODWORD(v4->r.currentOrigin.v[1]);
  v8 = v4->r.currentOrigin.v[1] - vEyePosOut.v[1];
  *(float *)&v9 = fsqrt((float)((float)(v8 * v8) + (float)(v6 * v6)) + (float)(v7 * v7));
  _XMM4 = v9;
  __asm
  {
    vcmpless xmm0, xmm4, cs:__real@80000000
    vblendvps xmm0, xmm4, xmm1, xmm0
  }
  vec.v[0] = v6 * (float)(1.0 / *(float *)&_XMM0);
  vec.v[2] = v7 * (float)(1.0 / *(float *)&_XMM0);
  vec.v[1] = v8 * (float)(1.0 / *(float *)&_XMM0);
  vectoangles(&vec, viewAnglesOut);
  return 1i64;
}

/*
==============
Bot_UpdateBlinded
==============
*/
__int64 Bot_UpdateBlinded(bot_data_t *botData, usercmd_s *cmd)
{
  int flags; 
  double v5; 
  __int64 result; 
  __int64 v7; 
  __int64 v8; 
  __int64 v9; 
  __int64 v10; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7582, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7583, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  if ( !Bot_IsBlinded(botData) || Bot_IsMovementLocked(botData) )
  {
    botData->botInfo.flags &= 0xFCFFFFFF;
    return 0i64;
  }
  else
  {
    flags = botData->botInfo.flags;
    if ( (flags & 0x1000000) == 0 )
    {
      botData->botInfo.flags = flags | 0x1000000;
      v5 = G_random();
      if ( *(float *)&v5 < botData->botMatchData.blindDiveChance )
        botData->botInfo.flags |= 0x2000000u;
    }
    if ( (botData->botInfo.flags & 0x2000000) != 0 )
    {
      botData->botInfo.proneEndTime = level.time + 250;
      result = 1i64;
      *(_WORD *)&cmd->forwardmove = 0;
    }
    else
    {
      if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15211, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
        __debugbreak();
      if ( level.time >= botData->botInfo.randomInputEndTime )
      {
        v7 = G_irand(0, 6);
        v8 = G_irand(0, 9);
        if ( (unsigned int)v7 >= 6 )
        {
          LODWORD(v9) = v7;
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15227, ASSERT_TYPE_ASSERT, "(unsigned)( fwdIndex ) < (unsigned)( ( sizeof( *array_counter( FORWARD_OFFSET ) ) + 0 ) )", "fwdIndex doesn't index ARRAY_COUNT( FORWARD_OFFSET )\n\t%i not in [0, %i)", v9, 6) )
            __debugbreak();
        }
        if ( (unsigned int)v8 >= 9 )
        {
          LODWORD(v10) = 9;
          LODWORD(v9) = v8;
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15228, ASSERT_TYPE_ASSERT, "(unsigned)( rightIndex ) < (unsigned)( ( sizeof( *array_counter( RIGHT_OFFSET ) ) + 0 ) )", "rightIndex doesn't index ARRAY_COUNT( RIGHT_OFFSET )\n\t%i not in [0, %i)", v9, v10) )
            __debugbreak();
        }
        cmd->forwardmove = FORWARD_OFFSET[v7];
        cmd->rightmove = RIGHT_OFFSET[v8];
        botData->botInfo.randomInputEndTime = level.time + G_irand(1500, 3000);
      }
      return 1i64;
    }
  }
  return result;
}

/*
==============
Bot_UpdateCLFinishMoveButtons
==============
*/
void Bot_UpdateCLFinishMoveButtons(bot_data_t *botData, usercmd_s *cmd)
{
  const Weapon *ViewmodelWeapon; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5463, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5464, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState )", (const char *)&queryFormat, "botData->botInfo.playerState") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5465, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  if ( botData->botInfo.wantsAlternate )
  {
    ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(botData->botInfo.playerState);
    if ( !Bot_Weap_IsNone(ViewmodelWeapon) && BG_ActiveUnderbarrel(ViewmodelWeapon) )
      BG_HasUnderbarrelAmmo(ViewmodelWeapon);
  }
}

/*
==============
Bot_UpdateClientMessageNotifies
==============
*/
void Bot_UpdateClientMessageNotifies(bot_data_t *botData, usercmd_s *cmd)
{
  unsigned __int64 buttons; 
  playerState_s *playerState; 
  unsigned __int64 v6; 
  const char *v7; 
  const char *v8; 
  const char *v9; 
  const char *v10; 
  const char *v11; 
  const char *v12; 
  GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64> *p_pm_flags; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5171, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  buttons = cmd->buttons;
  playerState = botData->botInfo.playerState;
  v6 = botData->botInfo.lastUserCmd->buttons;
  if ( (v6 & 1) != 0 )
  {
    if ( (buttons & 1) != 0 )
      goto LABEL_10;
    v7 = s_botStopAttackCmd;
  }
  else
  {
    if ( (buttons & 1) == 0 )
      goto LABEL_10;
    v7 = s_botStartAttackCmd;
  }
  Cmd_CheckNetNotifyForString(botData->botInfo.ent->s.number, v7);
LABEL_10:
  if ( (v6 & 0x20) != 0 )
  {
    if ( (buttons & 0x20) != 0 )
      goto LABEL_16;
    v8 = s_botStopUseReloadCmd;
  }
  else
  {
    if ( (buttons & 0x20) == 0 )
      goto LABEL_16;
    v8 = s_botStartUseReloadCmd;
  }
  Cmd_CheckNetNotifyForString(botData->botInfo.ent->s.number, v8);
LABEL_16:
  if ( (v6 & 8) != 0 )
  {
    if ( (buttons & 8) != 0 )
      goto LABEL_22;
    v9 = s_botStopActivateCmd;
  }
  else
  {
    if ( (buttons & 8) == 0 )
      goto LABEL_22;
    v9 = s_botStartActivateCmd;
  }
  Cmd_CheckNetNotifyForString(botData->botInfo.ent->s.number, v9);
LABEL_22:
  if ( (v6 & 0x2000) != 0 )
  {
    if ( (buttons & 0x2000) != 0 )
      goto LABEL_28;
    v10 = s_botStopSmokeCmd;
  }
  else
  {
    if ( (buttons & 0x2000) == 0 )
      goto LABEL_28;
    v10 = s_botStartSmokeCmd;
  }
  Cmd_CheckNetNotifyForString(botData->botInfo.ent->s.number, v10);
LABEL_28:
  if ( (v6 & 0x1000) != 0 )
  {
    if ( (buttons & 0x1000) != 0 )
      goto LABEL_34;
    v11 = s_botStopFragCmd;
  }
  else
  {
    if ( (buttons & 0x1000) == 0 )
      goto LABEL_34;
    v11 = s_botStartFragCmd;
  }
  Cmd_CheckNetNotifyForString(botData->botInfo.ent->s.number, v11);
LABEL_34:
  if ( (v6 & 0x802) != 0 )
  {
    if ( (buttons & 0x802) != 0 )
      goto LABEL_40;
    v12 = s_botStopBreathSprintCmd;
  }
  else
  {
    if ( (buttons & 0x802) == 0 )
      goto LABEL_40;
    v12 = s_botStartBreathSprintCmd;
  }
  Cmd_CheckNetNotifyForString(botData->botInfo.ent->s.number, v12);
LABEL_40:
  p_pm_flags = &playerState->pm_flags;
  if ( (GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(p_pm_flags, ACTIVE, 0) || GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(p_pm_flags, ACTIVE, 1u)) && (buttons & 0xC0) == 0 )
    Cmd_CheckNetNotifyForString(botData->botInfo.ent->s.number, s_botStartGoStandCmd);
  if ( !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(p_pm_flags, ACTIVE, 0) && !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(p_pm_flags, ACTIVE, 1u) && (buttons & 0x100) != 0 )
    Cmd_CheckNetNotifyForString(botData->botInfo.ent->s.number, s_botStartGoStandCmd);
  if ( !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(p_pm_flags, ACTIVE, 0) && (buttons & 0x40) != 0 || !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(p_pm_flags, ACTIVE, 1u) && (buttons & 0x80u) != 0i64 )
    Cmd_CheckNetNotifyForString(botData->botInfo.ent->s.number, s_botStartStanceCmd);
  if ( (v6 & 4) == 0 && (buttons & 4) != 0 )
    Cmd_CheckNetNotifyForString(botData->botInfo.ent->s.number, s_botMeleeZoomCmd);
}

/*
==============
Bot_UpdateCombat
==============
*/
void Bot_UpdateCombat(bot_data_t *botData, usercmd_s *cmd)
{
  playerState_s *playerState; 
  const dvar_t *v5; 
  const Weapon *ViewmodelWeapon; 
  PlayerHandIndex WeaponHandForViewWeapon; 
  unsigned __int64 v8; 
  __int64 v9; 
  double v10; 
  int grenadeThrowbackStartTime; 
  int time; 
  double v13; 
  const Weapon *v14; 

  playerState = botData->botInfo.playerState;
  if ( (LOBYTE(botData->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) != 0 )
    return;
  if ( !Bot_CanAttack(botData) )
  {
    v5 = DVARBOOL_bot_ForceGrenadeThrow;
    if ( !DVARBOOL_bot_ForceGrenadeThrow && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 692, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_ForceGrenadeThrow") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v5);
    if ( v5->current.enabled )
      Bot_CombatStateGrenade(botData, cmd);
    return;
  }
  if ( Bot_HasRemoteEyes(botData) )
    return;
  if ( Bot_IsForcedFiring(botData) )
  {
LABEL_52:
    Bot_CombatStateFire(botData, playerState, cmd);
    return;
  }
  if ( Bot_IsBlinded(botData) )
  {
    botData->botInfo.grenadeFlags &= ~1u;
    return;
  }
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18902, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18903, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  if ( (unsigned int)Bot_GrenadesAllowed(botData) && !GameModeFlagContainer<enum PWeaponFlagsCommon,enum PWeaponFlagsSP,enum PWeaponFlagsMP,64>::TestFlagInternal(&playerState->weapCommon.weapFlags, ACTIVE, 0x33u) )
  {
    if ( playerState->throwbackGrenadeTimeLeft > 0 )
    {
      grenadeThrowbackStartTime = botData->botInfo.grenadeThrowbackStartTime;
      time = level.time;
      if ( grenadeThrowbackStartTime == -1 )
      {
        botData->botInfo.grenadeThrowbackStartTime = level.time;
        time = level.time;
        grenadeThrowbackStartTime = level.time;
      }
      if ( (float)(time - grenadeThrowbackStartTime) >= botData->botMatchData.reactionTime && !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 5u) && (LOBYTE(botData->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) == 0 && level.time - botData->botInfo.grenadeThrowbackLastCheckTime >= 100 )
      {
        botData->botInfo.grenadeThrowbackLastCheckTime = level.time;
        v13 = G_random();
        if ( *(float *)&v13 < botData->botMatchData.grenadeThrowbackChance )
        {
          cmd->buttons &= 0xFFFFFFFFFFFDFFFCui64;
          cmd->buttons |= 0x1000ui64;
          botData->botInfo.grenadeFiredTime = 0;
          return;
        }
      }
    }
    else
    {
      *(_QWORD *)((char *)&botData->scriptedAgentInfo + 28236) = -1i64;
    }
  }
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18969, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(playerState);
  if ( !Bot_CanSeeAndCanFireOnEnemy(botData) || !Bot_CanMeleeReactEnemy(botData) || !Bot_AllowedToMeleeEnemy(botData) || (WeaponHandForViewWeapon = Bot_Weap_GetWeaponHandForViewWeapon(playerState), LODWORD(v8) = Bot_Weap_GetWeaponStateForViewWeapon(botData->botInfo.playerState), (unsigned int)v8 <= 0x32) && (v9 = 0x4000001C31FBEi64, _bittest64(&v9, v8)) || Bot_ActualMeleeRange(botData) <= botData->botInfo.enemyTrack.lastDist || Bot_Weap_AmmoInClip(playerState, ViewmodelWeapon, WeaponHandForViewWeapon) && (v10 = G_random(), *(float *)&v10 >= 0.75) && !Bot_EnemyPreferMelee(botData) )
  {
    cmd->buttons &= ~4ui64;
    if ( Bot_CombatStateGrenade(botData, cmd) )
      return;
    if ( !EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
      return;
    if ( (unsigned int)Bot_CombatStateOffhandFire(botData, playerState, cmd) )
      return;
    v14 = Bot_Weap_GetViewmodelWeapon(playerState);
    if ( !Bot_Weap_IsWeapClass(playerState, v14, WEAPCLASS_TURRET) && !Bot_Weap_Ammo(playerState, v14) )
      return;
    if ( (unsigned int)Bot_CombatStateCornerCombat(botData, cmd) || !Bot_ShouldFireOnEnemyInSight(botData) || Bot_CombatStateFireWait(botData, playerState, NULL) )
      return;
    goto LABEL_52;
  }
  if ( (botData->botInfo.lastUserCmd->buttons & 4) == 0 )
    cmd->buttons |= 4ui64;
}

/*
==============
Bot_UpdateDebugErrorLocations
==============
*/
void Bot_UpdateDebugErrorLocations(bot_data_t *botData)
{
  const dvar_t *v2; 
  const dvar_t *v3; 
  sentient_s *sentient; 
  sentient_s *i; 
  gentity_s *ent; 
  bitarray_base<bitarray<224> > *AllTeamFlags; 
  const SvClientMP *MpClient; 
  gentity_s *v9; 
  bitarray<224> result; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3020, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3021, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( botData->botInfo.ent->s.groundEntityNum != 2047 && (SV_BotRequirePathnodes(botData) && !Sentient_NearestNode(botData->botInfo.ent->sentient) || !SV_BotRequirePathnodes(botData) && !Sentient_NearestTacPoint(botData->botInfo.ent->sentient)) )
    Bot_DebugAddErrorLocation(botData, BOT_ERROR_LOC_NO_NODE, 30.0, &botData->botInfo.ent->r.currentOrigin, NULL, NULL, NULL);
  v2 = DVARINT_bot_DrawSeeThrough;
  if ( !DVARINT_bot_DrawSeeThrough && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawSeeThrough") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v2);
  if ( v2->current.integer )
  {
    v3 = DVARINT_bot_DrawSeeThrough;
    if ( !DVARINT_bot_DrawSeeThrough && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawSeeThrough") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v3);
    sentient = botData->botInfo.sentient;
    if ( v3->current.integer == 2 )
    {
      Sentient_EnemyTeamFlags(&result, sentient->eTeam);
      for ( i = Sentient_FirstSentient(&result); i; i = Sentient_NextSentient(i, &result) )
      {
        ent = i->ent;
        if ( Bot_IsSentientEntityConnected(i->ent) && ent->s.eType != ET_INVISIBLE )
        {
          AllTeamFlags = (bitarray_base<bitarray<224> > *)Com_TeamsMP_GetAllTeamFlags();
          if ( bitarray_base<bitarray<224>>::testBit(AllTeamFlags, ent->sentient->eTeam) )
          {
            if ( !ent->client || (MpClient = SV_Client_GetMpClient(ent->s.number), Bot_IsClientActive(MpClient)) )
            {
              if ( !i->bIgnoreMe && !GameModeFlagContainer<enum BgEntityFlagsCommon,enum BgEntityFlagsSP,enum BgEntityFlagsMP,64>::TestFlagInternal(&i->ent->flags, ACTIVE, 2u) )
                Bot_UpdateSeeThroughForEnt(botData, i->ent);
            }
          }
        }
      }
    }
    else if ( EntHandle::isDefined(&sentient->targetEnt) )
    {
      v9 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
      if ( v9 )
      {
        if ( v9->sentient )
          Bot_UpdateSeeThroughForEnt(botData, v9);
      }
    }
  }
}

/*
==============
Bot_UpdateDebugGoal
==============
*/
int Bot_UpdateDebugGoal(bot_data_t *botData)
{
  int CurrentNumDebugGoals; 
  int v4; 
  int debugPathGoalCurrent; 
  const bitarray<224> *AllTeamFlags; 
  __int128 v7; 
  double v8; 
  int v9; 
  int ClosestCharacterList; 
  gentity_s *v11; 
  const dvar_t *v12; 
  int v13; 
  gentity_s *ent; 
  __int64 excludeSelf; 
  __int64 onlyVisibleClients; 
  gentity_s *results; 
  vec3_t goal; 
  vec3_t outFinalGoal; 
  bitarray<224> teamFlags; 

  if ( Bot_GetCurrentNumDebugGoals() <= 0 )
    return 0;
  botData->botInfo.scriptFlags &= 0xFFFFFFF3;
  CurrentNumDebugGoals = Bot_GetCurrentNumDebugGoals();
  v4 = CurrentNumDebugGoals;
  if ( CurrentNumDebugGoals > 4 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10018, ASSERT_TYPE_ASSERT, "( currentNumPathGoals ) <= ( 4 )", "currentNumPathGoals <= BOT_MAX_DEBUG_PATH_GOALS\n\t%i, %i", CurrentNumDebugGoals, 4) )
    __debugbreak();
  debugPathGoalCurrent = botData->botDebugData.debugPathGoalCurrent;
  if ( debugPathGoalCurrent )
  {
    if ( debugPathGoalCurrent < v4 )
      v4 = botData->botDebugData.debugPathGoalCurrent;
    botData->botDebugData.debugPathGoalCurrent = v4;
    if ( (unsigned int)(v4 - 1) > 3 )
    {
      LODWORD(onlyVisibleClients) = 1;
      LODWORD(excludeSelf) = v4;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10045, ASSERT_TYPE_ASSERT, "( 1 ) <= ( botData->botDebugData.debugPathGoalCurrent ) && ( botData->botDebugData.debugPathGoalCurrent ) <= ( 4 )", "botData->botDebugData.debugPathGoalCurrent not in [1, BOT_MAX_DEBUG_PATH_GOALS]\n\t%i not in [%i, %i]", excludeSelf, onlyVisibleClients, 4) )
        __debugbreak();
    }
    v13 = Bot_PathExists(&botData->botInfo);
    if ( v13 )
    {
      Bot_GetPathFinalGoal(&botData->botInfo, &outFinalGoal);
      if ( Bot_IsAtPathEnd(botData, 16.0) )
        goto LABEL_31;
    }
    else
    {
      Bot_DebugGoal(botData->botDebugData.debugPathGoalCurrent, &goal);
      ent = botData->botInfo.ent;
      if ( (float)((float)((float)((float)(goal.v[1] - ent->r.currentOrigin.v[1]) * (float)(goal.v[1] - ent->r.currentOrigin.v[1])) + (float)((float)(goal.v[0] - ent->r.currentOrigin.v[0]) * (float)(goal.v[0] - ent->r.currentOrigin.v[0]))) + (float)((float)(goal.v[2] - ent->r.currentOrigin.v[2]) * (float)(goal.v[2] - ent->r.currentOrigin.v[2]))) <= 256.0 )
      {
LABEL_31:
        botData->botDebugData.debugPathGoalCurrent = Bot_GetNextDebugGoal(botData);
        botData->botInfo.flags &= ~0x100000u;
      }
    }
    Bot_DebugGoal(botData->botDebugData.debugPathGoalCurrent, &goal);
    if ( v13 && (float)((float)((float)((float)(goal.v[1] - outFinalGoal.v[1]) * (float)(goal.v[1] - outFinalGoal.v[1])) + (float)((float)(goal.v[0] - outFinalGoal.v[0]) * (float)(goal.v[0] - outFinalGoal.v[0]))) + (float)((float)(goal.v[2] - outFinalGoal.v[2]) * (float)(goal.v[2] - outFinalGoal.v[2]))) <= 256.0 )
      return 1;
    else
      return Bot_GetPathToGoalInternal(botData, &goal, 16.0, "debug");
  }
  if ( Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) )
    AllTeamFlags = Com_TeamsSP_GetAllTeamFlags();
  else
    AllTeamFlags = Com_TeamsMP_GetAllTeamFlags();
  v7 = *(_OWORD *)AllTeamFlags->array;
  v8 = *(double *)&AllTeamFlags->array[4];
  v9 = 1;
  teamFlags.array[6] = AllTeamFlags->array[6];
  *(_OWORD *)teamFlags.array = v7;
  *(double *)&teamFlags.array[4] = v8;
  if ( v4 < 1 )
    return 0;
  while ( 1 )
  {
    Bot_DebugGoal(v9, &goal);
    if ( (float)((float)((float)(goal.v[0] * goal.v[0]) + (float)(goal.v[1] * goal.v[1])) + (float)(goal.v[2] * goal.v[2])) > 0.0 )
    {
      ClosestCharacterList = Bot_GetClosestCharacterList(NULL, &goal, 0.0, 1, 1, 1, 0, &teamFlags, &results, 1);
      v11 = NULL;
      if ( ClosestCharacterList == 1 )
        v11 = results;
      if ( botData->botInfo.ent == v11 )
        break;
      v12 = DVARBOOL_bot_DebugPathGoal_AllBots;
      if ( !DVARBOOL_bot_DebugPathGoal_AllBots && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 692, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DebugPathGoal_AllBots") )
        __debugbreak();
      Dvar_CheckFrontendServerThread(v12);
      if ( v12->current.enabled )
        break;
    }
    if ( ++v9 > v4 )
      return 0;
  }
  botData->botDebugData.debugPathGoalCurrent = v9;
  return Bot_GetPathToGoalInternal(botData, &goal, 16.0, "debug");
}

/*
==============
Bot_UpdateDirection
==============
*/
void Bot_UpdateDirection(bot_data_t *botData, usercmd_s *cmd)
{
  __int128 v2; 
  __int128 v3; 
  __int128 v4; 
  playerState_s *playerState; 
  const dvar_t *v8; 
  __int16 groundRefEnt; 
  __int64 v11; 
  float v12; 
  int IsDoingADS; 
  float v14; 
  float v15; 
  float pitchSpeed; 
  float frameDuration; 
  float v18; 
  const VehicleDef *RemoteEyesVehicleDef; 
  float v20; 
  float v21; 
  double v24; 
  double updated; 
  gentity_s *RemoteEyesVehicleEnt; 
  const VehicleDef *ServerDef; 
  int flags; 
  float v29; 
  float v30; 
  float v31; 
  float v32; 
  float v33; 
  float v36; 
  int v39; 
  float v40; 
  float v42; 
  float v44; 
  vec3_t viewAnglesOut; 
  vec3_t angles; 
  vec3_t vehicleAngles; 
  tmat43_t<vec3_t> outTagMat; 
  tmat33_t<vec3_t> axis; 
  tmat33_t<vec3_t> in1; 
  tmat33_t<vec3_t> out; 
  __int128 v53; 
  __int128 v54; 
  __int128 v55; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11260, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11261, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11264, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11276, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  v8 = DVARINT_bot_DisableMovement;
  if ( !DVARINT_bot_DisableMovement && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DisableMovement") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v8);
  if ( v8->current.integer != 2 && (*((_BYTE *)&botData->scriptedAgentInfo + 9016) & 8) == 0 && !Bot_IsControllingRemoteMissile(botData) && !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 0x11u) )
  {
    v55 = v2;
    _XMM6 = 0i64;
    v54 = v3;
    v53 = v4;
    viewAnglesOut.v[0] = 0.0;
    viewAnglesOut.v[1] = 0.0;
    viewAnglesOut.v[2] = 0.0;
    Bot_UpdateViewAngles(botData, &viewAnglesOut);
    if ( !Com_GameMode_SupportsFeature(WEAPON_MELEE) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11292, ASSERT_TYPE_ASSERT, "( Com_GameMode_SupportsFeature( Com_GameMode_Feature::ENTITY_GROUND_REF ) )", (const char *)&queryFormat, "Com_GameMode_SupportsFeature( Com_GameMode_Feature::ENTITY_GROUND_REF )") )
      __debugbreak();
    groundRefEnt = playerState->groundRefEnt;
    if ( groundRefEnt != 2047 )
    {
      v11 = groundRefEnt;
      *(_QWORD *)angles.v = *(_QWORD *)g_entities[v11].r.currentAngles.v;
      v12 = g_entities[v11].r.currentAngles.v[2];
      LODWORD(angles.v[0]) ^= _xmm;
      LODWORD(angles.v[2]) = LODWORD(v12) ^ _xmm;
      LODWORD(angles.v[1]) ^= _xmm;
      AnglesToAxis(&angles, &axis);
      AnglesToAxis(&viewAnglesOut, &in1);
      MatrixMultiply(&in1, &axis, &out);
      AxisToAngles(&out, &viewAnglesOut);
    }
    IsDoingADS = Bot_Weap_IsDoingADS(botData);
    v14 = viewAnglesOut.v[0];
    v15 = playerState->viewangles.v[0];
    pitchSpeed = botData->botMatchData.pitchSpeed;
    if ( IsDoingADS )
      pitchSpeed = botData->botMatchData.pitchSpeedAds;
    if ( !level.frameDuration && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_level_locals.h", 349, ASSERT_TYPE_ASSERT, "(level.frameDuration)", "%s\n\tAccessing frame duration before it's been set", "level.frameDuration") )
      __debugbreak();
    frameDuration = (float)level.frameDuration;
    DiffTrackAngle(v14, v15, pitchSpeed, frameDuration * 0.001);
    v18 = v14;
    if ( (unsigned int)Bot_IsRemoteEyesVehicle(botData) )
    {
      RemoteEyesVehicleDef = Bot_GetRemoteEyesVehicleDef(botData);
      v20 = (unsigned int)Bot_IsThirdPersonRemoteVehicle(botData) ? RemoteEyesVehicleDef->vehCam_pitchTurnRate3P : RemoteEyesVehicleDef->vehCam_pitchTurnRate;
      v21 = (float)(frameDuration * v20) * 0.001;
      _XMM1 = 0i64;
      __asm { vroundss xmm4, xmm1, xmm3, 1 }
      if ( v21 == 0.0 )
        LODWORD(v24) = 0;
      else
        v24 = I_fclamp((float)((float)((float)(v14 - v15) * 0.0027777778) - *(float *)&_XMM4) * 360.0, COERCE_FLOAT(LODWORD(v21) ^ _xmm), v21);
      v18 = *(float *)&v24 + v15;
      if ( (unsigned int)Bot_IsThirdPersonRemoteVehicle(botData) )
        BG_Vehicle_ClampCameraAngle(*(float *)&v24 + v15, RemoteEyesVehicleDef->vehCam_pitchClamp3P);
    }
    viewAnglesOut.v[0] = v18;
    updated = Bot_UpdateYaw(botData, playerState->viewangles.v[1], viewAnglesOut.v[1], IsDoingADS);
    viewAnglesOut.v[1] = *(float *)&updated;
    viewAnglesOut.v[2] = 0.0;
    if ( Bot_IsFirstPersonRemoteVehicle(botData) )
    {
      RemoteEyesVehicleEnt = Bot_GetRemoteEyesVehicleEnt(botData);
      ServerDef = G_Vehicle_GetServerDef(RemoteEyesVehicleEnt->vehicle->defIndex);
      if ( !ServerDef && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11314, ASSERT_TYPE_ASSERT, "( vehicleDef )", (const char *)&queryFormat, "vehicleDef") )
        __debugbreak();
      if ( !G_Utils_DObjGetWorldTagMatrix(RemoteEyesVehicleEnt, scr_const.tag_player, &outTagMat) && !G_Utils_DObjGetWorldTagMatrix(RemoteEyesVehicleEnt, scr_const.tag_origin, &outTagMat) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11324, ASSERT_TYPE_ASSERT, "( foundRemoteEyesTag )", (const char *)&queryFormat, "foundRemoteEyesTag") )
        __debugbreak();
      AxisToAngles((const tmat33_t<vec3_t> *)&outTagMat, &vehicleAngles);
      flags = botData->botInfo.flags;
      if ( (flags & 0x40000) == 0 )
      {
        v29 = vehicleAngles.v[2];
        v30 = vehicleAngles.v[0];
        botData->botInfo.flags = flags | 0x40000;
        v31 = (float)(v29 + ServerDef->vehCam_anglesRoll) * 0.0027777778;
        v32 = (float)(v30 + ServerDef->vehCam_anglesPitch) * 0.0027777778;
        v33 = (float)(vehicleAngles.v[1] + ServerDef->vehCam_anglesYaw) * 0.0027777778;
        __asm
        {
          vroundss xmm2, xmm6, xmm3, 1
          vroundss xmm3, xmm6, xmm2, 1
        }
        viewAnglesOut.v[0] = (float)(v32 - *(float *)&_XMM2) * 360.0;
        v36 = (float)(v33 - *(float *)&_XMM3) * 360.0;
        __asm { vroundss xmm3, xmm6, xmm2, 1 }
        viewAnglesOut.v[1] = v36;
        viewAnglesOut.v[2] = (float)(v31 - *(float *)&_XMM3) * 360.0;
      }
      BG_Vehicle_ApplyCameraInfluence(&playerState->vehicleState, ServerDef, &viewAnglesOut, &vehicleAngles, &viewAnglesOut);
      BG_Vehicle_ClampCameraUserAnglesToVehicleSpace(&vehicleAngles, &viewAnglesOut, ServerDef, &viewAnglesOut);
    }
    else
    {
      botData->botInfo.flags &= ~0x40000u;
    }
    __asm { vroundss xmm2, xmm6, xmm1, 1 }
    v39 = MSG_PackSignedFloat((float)((float)((float)(viewAnglesOut.v[0] - playerState->delta_angles.v[0]) * 0.0027777778) - *(float *)&_XMM2) * 360.0, 180.0, 0x14u);
    v40 = viewAnglesOut.v[1];
    cmd->angles.v[0] = v39;
    __asm { vroundss xmm3, xmm6, xmm2, 1 }
    cmd->angles.v[1] = MSG_PackSignedFloat((float)((float)((float)(v40 - playerState->delta_angles.v[1]) * 0.0027777778) - *(float *)&_XMM3) * 360.0, 180.0, 0x14u);
    v42 = playerState->delta_angles.v[2];
    if ( playerState->pm_type == 1 )
    {
      __asm { vroundss xmm2, xmm6, xmm1, 1 }
      v44 = (float)(v42 * 0.0027777778) - *(float *)&_XMM2;
    }
    else
    {
      __asm { vroundss xmm4, xmm6, xmm3, 1 }
      v44 = (float)((float)(viewAnglesOut.v[2] - v42) * 0.0027777778) - *(float *)&_XMM4;
    }
    cmd->angles.v[2] = MSG_PackSignedFloat(v44 * 360.0, 180.0, 0x14u);
    Bot_ApplyKickAngles(botData, cmd);
  }
}

/*
==============
Bot_UpdateDistToEnemy
==============
*/
void Bot_UpdateDistToEnemy(bot_data_t *botData)
{
  gentity_s *v2; 
  gentity_s *ent; 
  float v4; 
  float v5; 
  float v6; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7339, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7340, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
  {
    v2 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
    if ( v2 )
    {
      ent = botData->botInfo.ent;
      v4 = ent->r.currentOrigin.v[0] - v2->r.currentOrigin.v[0];
      v5 = ent->r.currentOrigin.v[1] - v2->r.currentOrigin.v[1];
      v6 = ent->r.currentOrigin.v[2] - v2->r.currentOrigin.v[2];
      botData->botInfo.enemyTrack.lastDist = fsqrt((float)((float)(v5 * v5) + (float)(v4 * v4)) + (float)(v6 * v6));
    }
  }
}

/*
==============
Bot_UpdateDive
==============
*/
void Bot_UpdateDive(bot_data_t *botData, usercmd_s *cmd)
{
  playerState_s *playerState; 
  const Weapon *ViewmodelWeapon; 
  gentity_s *ent; 
  gentity_s *v6; 
  AIBotInterface *m_pAI; 
  int CanFireOnEnemy; 
  int v9; 
  const Weapon *RangedWeapon; 
  int v11; 
  gentity_s *v12; 
  __int16 EntityIndex; 
  double v14; 
  AIBotWrapper v15; 
  vec3_t vStart; 
  vec3_t vEyePosOut; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18151, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(playerState);
  if ( !Bot_IsMovementLocked(botData) )
  {
    if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18169, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
      __debugbreak();
    AICommonInterface::AICommonInterface(&v15.m_botInterface);
    v15.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
    AICommonInterface::AICommonInterface(&v15.m_botAgentInterface);
    ent = botData->botInfo.ent;
    v6 = NULL;
    v15.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
    v15.m_pAI = NULL;
    AIBotWrapper::Setup(&v15, ent);
    m_pAI = v15.m_pAI;
    if ( !v15.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18171, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
      __debugbreak();
    if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
      v6 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
    CanFireOnEnemy = Bot_CanSeeAndCanFireOnEnemy(botData);
    if ( botData->botInfo.proneEndTime > level.time )
    {
      if ( !CanFireOnEnemy || Bot_Weap_Ammo(playerState, ViewmodelWeapon) <= 0 )
        goto LABEL_38;
      v9 = level.time + G_irand(300, 600);
LABEL_37:
      botData->botInfo.proneEndTime = v9;
LABEL_38:
      botData->botInfo.lastDiveCheckTime = level.time;
      return;
    }
    if ( v6 && CanFireOnEnemy )
    {
      if ( !v6->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18131, ASSERT_TYPE_ASSERT, "( ent->sentient )", (const char *)&queryFormat, "ent->sentient") )
        __debugbreak();
      if ( !Sentient_IsAerial(v6->sentient) && !Bot_IsStationaryEnt(v6) )
      {
        RangedWeapon = Bot_Weap_EntityGetRangedWeapon(v6);
        if ( !Bot_Weap_IsNone(RangedWeapon) && (float)(level.time - botData->botInfo.lastDiveCheckTime) > botData->botMatchData.diveDelay )
        {
          if ( !v6->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18189, ASSERT_TYPE_ASSERT, "( enemy->sentient )", (const char *)&queryFormat, "enemy->sentient") )
            __debugbreak();
          v11 = level.time - Sentient_GetSentientInfo(botData->botInfo.ent->sentient, v6->sentient)->VisCache.iFirstVisTime;
          if ( !Bot_Weap_Ammo(playerState, ViewmodelWeapon) )
            goto LABEL_38;
          if ( !Bot_IsInRangeOfEnemy(botData) )
            goto LABEL_38;
          if ( botData->botInfo.enemyTrack.lastDist <= 200.0 )
            goto LABEL_38;
          if ( v11 >= 650 )
            goto LABEL_38;
          if ( !Bot_EnemyFacesBot(botData) )
            goto LABEL_38;
          Sentient_GetHeadPosition(v6->sentient, &vEyePosOut);
          v12 = botData->botInfo.ent;
          *(_QWORD *)vStart.v = *(_QWORD *)v12->r.currentOrigin.v;
          vStart.v[2] = v12->r.currentOrigin.v[2] + 10.0;
          EntityIndex = G_GetEntityIndex(v6);
          if ( !AICommonInterface::CanSeePointFrom(m_pAI, &vStart, &vEyePosOut, 100000000.0, EntityIndex) )
            goto LABEL_38;
          v14 = G_random();
          if ( *(float *)&v14 >= botData->botMatchData.diveChance )
            goto LABEL_38;
          v9 = level.time + 1000;
          goto LABEL_37;
        }
      }
    }
  }
}

/*
==============
Bot_UpdateDoors
==============
*/
char Bot_UpdateDoors(bot_data_t *botData)
{
  signed __int64 v1; 
  void *v2; 
  AINavigator2D *v4; 
  __int64 v5; 
  gentity_s *ent; 
  int v7; 
  AIBotInterface *m_pAI; 
  playerState_s *playerState; 
  float v10; 
  float v11; 
  float v12; 
  EffectiveStance EffectiveStance; 
  const Bounds *v14; 
  float v15; 
  gentity_s *v16; 
  unsigned __int16 i; 
  __int64 v18; 
  unsigned int useIndex; 
  const vec3_t *InstanceOrigin; 
  __m128 v21; 
  float v22; 
  float v23; 
  int Owner; 
  ScriptableInstanceContext *InstanceCommonContext; 
  double v26; 
  float v27; 
  bool v28; 
  bot_door_blocker_data_t *j; 
  int ownerId; 
  team_t eTeam; 
  GHandler *Handler; 
  unsigned int ObstacleFlagsForTeam; 
  nav_space_s *DefaultSpace; 
  unsigned int v36; 
  unsigned int v37; 
  __int64 out_stateName; 
  playerState_s *v39; 
  AIBotWrapper v40; 
  vec3_t angles; 
  vec3_t viewOrigin; 
  Bounds bounds; 
  vec3_t vEyeDir; 
  vec3_t outEndPoint; 
  vec3_t outStartPoint; 
  int v47[4]; 
  Bounds playerAbsBox; 
  UsableList list; 

  v2 = alloca(v1);
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11362, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.pNavigator && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11363, ASSERT_TYPE_ASSERT, "( botData->botInfo.pNavigator )", (const char *)&queryFormat, "botData->botInfo.pNavigator") )
    __debugbreak();
  v4 = botData->botInfo.pNavigator->Get2DNavigator(botData->botInfo.pNavigator);
  if ( !v4 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11366, ASSERT_TYPE_ASSERT, "( pNav2D )", (const char *)&queryFormat, "pNav2D") )
    __debugbreak();
  v5 = tls_index;
  if ( dword_14E931FF0 > *(_DWORD *)(*((_QWORD *)NtCurrentTeb()->Reserved1[11] + tls_index) + 1772i64) )
  {
    j__Init_thread_header(&dword_14E931FF0);
    if ( dword_14E931FF0 == -1 )
    {
      searchRadiusSq = FLOAT_4096_0;
      j__Init_thread_footer(&dword_14E931FF0);
    }
  }
  if ( dword_14E931FF8 > *(_DWORD *)(*((_QWORD *)NtCurrentTeb()->Reserved1[11] + v5) + 1772i64) )
  {
    j__Init_thread_header(&dword_14E931FF8);
    if ( dword_14E931FF8 == -1 )
    {
      interactRangeSq = FLOAT_4096_0;
      j__Init_thread_footer(&dword_14E931FF8);
    }
  }
  AICommonInterface::AICommonInterface(&v40.m_botInterface);
  v40.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v40.m_botAgentInterface);
  ent = botData->botInfo.ent;
  v7 = 0;
  v40.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v40.m_pAI = NULL;
  AIBotWrapper::Setup(&v40, ent);
  m_pAI = v40.m_pAI;
  if ( !v40.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11380, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  UsableList_Init(&list);
  if ( AINavigator2D::GetModifierLocationOnEntPath(v4, 0x10000000u, 64.0, &outStartPoint, &outEndPoint) )
  {
    playerState = botData->botInfo.playerState;
    v39 = playerState;
    v10 = (float)(outEndPoint.v[0] + outStartPoint.v[0]) * 0.5;
    v11 = (float)(outEndPoint.v[2] + outStartPoint.v[2]) * 0.5;
    v12 = (float)(outEndPoint.v[1] + outStartPoint.v[1]) * 0.5;
    if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11394, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
      __debugbreak();
    EffectiveStance = PM_GetEffectiveStance(playerState);
    v14 = BG_Suit_GetBounds(playerState->suitIndex, EffectiveStance);
    playerAbsBox.midPoint.v[0] = playerState->origin.v[0] + v14->midPoint.v[0];
    playerAbsBox.midPoint.v[1] = playerState->origin.v[1] + v14->midPoint.v[1];
    playerAbsBox.midPoint.v[2] = playerState->origin.v[2] + v14->midPoint.v[2];
    *(_QWORD *)playerAbsBox.halfSize.v = *(_QWORD *)v14->halfSize.v;
    v15 = v14->halfSize.v[2];
    v16 = botData->botInfo.ent;
    playerAbsBox.halfSize.v[2] = v15;
    viewOrigin = v16->r.currentOrigin;
    AICommonInterface::GetEyeDirection(m_pAI, &vEyeDir);
    *(float *)&out_stateName = viewOrigin.v[0];
    if ( (LODWORD(viewOrigin.v[0]) & 0x7F800000) == 2139095040 || (*(float *)&out_stateName = viewOrigin.v[1], (LODWORD(viewOrigin.v[1]) & 0x7F800000) == 2139095040) || (*(float *)&out_stateName = viewOrigin.v[2], (LODWORD(viewOrigin.v[2]) & 0x7F800000) == 2139095040) )
    {
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11401, ASSERT_TYPE_SANITY, "( !IS_NAN( ( viewOrigin )[0] ) && !IS_NAN( ( viewOrigin )[1] ) && !IS_NAN( ( viewOrigin )[2] ) )", (const char *)&queryFormat, "!IS_NAN( ( viewOrigin )[0] ) && !IS_NAN( ( viewOrigin )[1] ) && !IS_NAN( ( viewOrigin )[2] )", out_stateName) )
        __debugbreak();
    }
    *(float *)&out_stateName = vEyeDir.v[0];
    if ( (LODWORD(vEyeDir.v[0]) & 0x7F800000) == 2139095040 || (*(float *)&out_stateName = vEyeDir.v[1], (LODWORD(vEyeDir.v[1]) & 0x7F800000) == 2139095040) || (*(float *)&out_stateName = vEyeDir.v[2], (LODWORD(vEyeDir.v[2]) & 0x7F800000) == 2139095040) )
    {
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11402, ASSERT_TYPE_SANITY, "( !IS_NAN( ( viewForward )[0] ) && !IS_NAN( ( viewForward )[1] ) && !IS_NAN( ( viewForward )[2] ) )", (const char *)&queryFormat, "!IS_NAN( ( viewForward )[0] ) && !IS_NAN( ( viewForward )[1] ) && !IS_NAN( ( viewForward )[2] )", out_stateName) )
        __debugbreak();
    }
    G_PlayerUse_GetUseList_Scriptables(&list, botData->botInfo.ent, &viewOrigin, &vEyeDir, playerState, &playerAbsBox);
    for ( i = 0; i < list.itemCount; ++i )
    {
      v18 = i;
      if ( list.items[i].ref.useClass == USE_CLASS_SCRIPTABLE )
      {
        ScriptableCommon_AssertCountsInitialized();
        useIndex = list.items[i].ref.useIndex;
        if ( useIndex < g_scriptableWorldCounts.serverInstanceCount && ScriptableSv_GetInstanceInUse(useIndex) && ScriptableSv_GetInstanceCommonContext(list.items[i].ref.useIndex)->linkedObjectType == SCRIPTABLE_LINK_NONE )
        {
          InstanceOrigin = ScriptableSv_GetInstanceOrigin(list.items[i].ref.useIndex);
          v21 = (__m128)*(unsigned __int64 *)InstanceOrigin->v;
          *(float *)&InstanceOrigin = InstanceOrigin->v[2];
          v22 = _mm_shuffle_ps(v21, v21, 85).m128_f32[0];
          *(double *)angles.v = *(double *)v21.m128_u64;
          LODWORD(angles.v[2]) = (_DWORD)InstanceOrigin;
          v23 = (float)((float)((float)(v12 - v22) * (float)(v12 - v22)) + (float)((float)(v10 - v21.m128_f32[0]) * (float)(v10 - v21.m128_f32[0]))) + (float)((float)(v11 - *(float *)&InstanceOrigin) * (float)(v11 - *(float *)&InstanceOrigin));
          if ( v23 <= 4096.0 )
          {
            if ( ScriptableSv_GetPartScriptedState(list.items[i].ref.useIndex, (const scr_string_t)scr_const.door, (scr_string_t *)&out_stateName) )
            {
              Owner = G_Door_GetOwner(list.items[i].ref.useIndex);
              InstanceCommonContext = ScriptableSv_GetInstanceCommonContext(list.items[i].ref.useIndex);
              v26 = AngleDelta(InstanceCommonContext->anglesInitial.v[1], InstanceCommonContext->angles.v[1]);
              LODWORD(v27) = LODWORD(v26) & _xmm;
              v28 = Owner == playerState->clientNum;
              if ( Owner == -1 || v28 )
              {
                if ( v27 <= 55.0 && (G_Door_IsClosed(list.items[i].ref.useIndex) || Owner != -1 && !v28) )
                {
                  if ( level.time - botData->botInfo.lastDoorUseTime >= 1000 && v23 <= 4096.0 )
                  {
                    v37 = list.items[i].ref.useIndex;
                    botData->botInfo.lastDoorUseTime = level.time;
                    G_Door_Interact(botData->botInfo.ent->client, v37, 0);
                  }
                  return 1;
                }
              }
              else if ( v27 <= 55.0 )
              {
                for ( j = s_botDoorBlockerData; ; ++j )
                {
                  ownerId = j->ownerId;
                  if ( ownerId == Owner )
                    break;
                  if ( ownerId == -1 )
                  {
                    eTeam = botData->botInfo.sentient->eTeam;
                    angles.v[0] = 0.0;
                    angles.v[1] = 0.0;
                    angles.v[2] = 0.0;
                    *(_OWORD *)bounds.midPoint.v = _xmm_ff7fffff000000000000000000000000;
                    bounds.halfSize.v[1] = FLOAT_N3_4028235e38;
                    bounds.halfSize.v[2] = FLOAT_N3_4028235e38;
                    Handler = GHandler::getHandler();
                    Handler->GetScriptableDimensions(Handler, list.items[v18].ref.useIndex, (float *)&v39, (vec3_t *)v47, &bounds);
                    bounds.midPoint.v[0] = bounds.midPoint.v[0] + *(float *)v47;
                    bounds.midPoint.v[2] = bounds.midPoint.v[2] + *(float *)&v47[2];
                    bounds.midPoint.v[1] = bounds.midPoint.v[1] + *(float *)&v47[1];
                    if ( (unsigned int)(eTeam - 1) <= 1 )
                      ObstacleFlagsForTeam = Bot_GetObstacleFlagsForTeam(eTeam);
                    else
                      ObstacleFlagsForTeam = -8065;
                    DefaultSpace = Nav_GetDefaultSpace();
                    v36 = Nav_CreateObstacleByBounds(DefaultSpace, &bounds, &angles, 15.0, 1u, ObstacleFlagsForTeam);
                    j->scriptableIndex = list.items[v18].ref.useIndex;
                    j->obstacleId = v36;
                    j->ownerId = Owner;
                    break;
                  }
                  if ( (unsigned int)++v7 >= 0x20 )
                    return 0;
                }
                j->creationTime = level.time;
                Bot_BadPath(botData->botInfo.ent);
                if ( (LOBYTE(botData->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) != 0 )
                  Bot_TraversalClear(&botData->botInfo);
                return 0;
              }
              playerState = v39;
            }
          }
        }
      }
    }
  }
  return 0;
}

/*
==============
Bot_UpdateEnemyAwareLook
==============
*/
__int64 Bot_UpdateEnemyAwareLook(bot_data_t *botData, vec3_t *viewAnglesOut)
{
  gentity_s *v4; 
  const gentity_s *v5; 
  float v6; 
  float v7; 
  sentient_info_t *SentientInfo; 
  gentity_s *ent; 
  float v10; 
  float v11; 
  __int128 v12; 
  __int128 v13; 
  __int128 v14; 
  __int128 v19; 
  vec3_t v22; 
  vec3_t targetPos; 
  vec3_t eyePoint; 
  vec3_t vec; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12146, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12147, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
    __debugbreak();
  if ( !EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
    return 0i64;
  v4 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
  v5 = v4;
  if ( !v4 )
    return 0i64;
  if ( !v4->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12164, ASSERT_TYPE_ASSERT, "( enemy->sentient )", (const char *)&queryFormat, "enemy->sentient") )
    __debugbreak();
  if ( !Bot_IsAwareOfEnemy(botData) && (botData->botInfo.aerialEnemyLockOnNode == 0xFFFF || !Bot_IsAtPathEnd(botData, 0.0)) )
    return 0i64;
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12167, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  v6 = botData->botInfo.enemyTrack.awarePoint.v[1];
  if ( (float)((float)((float)(v6 - botData->botInfo.ent->r.currentOrigin.v[1]) * (float)(v6 - botData->botInfo.ent->r.currentOrigin.v[1])) + (float)((float)(botData->botInfo.enemyTrack.awarePoint.v[0] - botData->botInfo.ent->r.currentOrigin.v[0]) * (float)(botData->botInfo.enemyTrack.awarePoint.v[0] - botData->botInfo.ent->r.currentOrigin.v[0]))) <= 62500.0 )
  {
    SentientInfo = Sentient_GetSentientInfo(botData->botInfo.sentient, v5->sentient);
    if ( !SentientInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12179, ASSERT_TYPE_ASSERT, "( info )", (const char *)&queryFormat, "info") )
      __debugbreak();
    Bot_GetLastKnownEntPosAndTime(botData, v5, &targetPos);
    ent = botData->botInfo.ent;
    v10 = targetPos.v[0] - ent->r.currentOrigin.v[0];
    v11 = targetPos.v[1] - ent->r.currentOrigin.v[1];
    if ( !Bot_CanSeeEnemy(botData) && (float)((float)(v11 * v11) + (float)(v10 * v10)) <= 62500.0 && SentientInfo->VisCache.iLastVisTime >= SentientInfo->lastKnownPosTime && Bot_ReactedToSentient(botData, SentientInfo) )
      return 0i64;
    v7 = targetPos.v[2];
  }
  else
  {
    v7 = botData->botInfo.enemyTrack.awarePoint.v[2];
    targetPos.v[0] = botData->botInfo.enemyTrack.awarePoint.v[0];
    targetPos.v[1] = v6;
  }
  targetPos.v[2] = v7 + 58.0;
  Bot_GetEnemyAimPoints(botData, v5, NULL, &eyePoint);
  v13 = LODWORD(targetPos.v[0]);
  *(float *)&v13 = targetPos.v[0] - eyePoint.v[0];
  v12 = v13;
  v14 = LODWORD(targetPos.v[1]);
  *(float *)&v14 = fsqrt((float)((float)((float)(targetPos.v[1] - eyePoint.v[1]) * (float)(targetPos.v[1] - eyePoint.v[1])) + (float)(*(float *)&v12 * *(float *)&v12)) + (float)((float)(targetPos.v[2] - eyePoint.v[2]) * (float)(targetPos.v[2] - eyePoint.v[2])));
  _XMM4 = v14;
  __asm
  {
    vcmpless xmm0, xmm4, cs:__real@80000000
    vblendvps xmm0, xmm4, xmm1, xmm0
  }
  v19 = v12;
  *(float *)&v19 = *(float *)&v12 * (float)(1.0 / *(float *)&_XMM0);
  _XMM3 = v19;
  __asm { vunpcklps xmm1, xmm3, xmm2 }
  vec.v[2] = (float)(targetPos.v[2] - eyePoint.v[2]) * (float)(1.0 / *(float *)&_XMM0);
  v22.v[2] = vec.v[2];
  *(double *)vec.v = *(double *)&_XMM1;
  *(double *)v22.v = *(double *)&_XMM1;
  if ( !Bot_ShouldIgnoreEnemyLook(botData, &v22) )
  {
    vectoangles(&vec, viewAnglesOut);
    Bot_ApplyTwitchVectors(&botData->botInfo, NULL, viewAnglesOut);
    botData->botInfo.flags |= 0x200u;
    return 1i64;
  }
  return 0i64;
}

/*
==============
Bot_UpdateEnemyInSightLook
==============
*/
__int64 Bot_UpdateEnemyInSightLook(bot_data_t *botData, vec3_t *viewAnglesOut)
{
  const gentity_s *v4; 
  bool v5; 
  __int128 v6; 
  __int128 v7; 
  __int128 v8; 
  __int128 v13; 
  float v14; 
  double v17; 
  vec3_t aimPoint; 
  vec3_t eyePoint; 
  vec3_t outLookaheadDir; 
  vec3_t vec; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12223, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
    v4 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
  else
    v4 = NULL;
  if ( !Bot_CanSeeAndCanFireOnEnemy(botData) && !Bot_CanSeeEnemyThroughWall(botData) )
    return 0i64;
  Bot_GetEnemyAimPoints(botData, v4, &aimPoint, &eyePoint);
  v5 = (botData->botInfo.scriptFlags & 0x20000) == 0;
  v7 = LODWORD(aimPoint.v[0]);
  *(float *)&v7 = aimPoint.v[0] - eyePoint.v[0];
  v6 = v7;
  v8 = LODWORD(aimPoint.v[1]);
  *(float *)&v8 = fsqrt((float)((float)((float)(aimPoint.v[1] - eyePoint.v[1]) * (float)(aimPoint.v[1] - eyePoint.v[1])) + (float)(*(float *)&v6 * *(float *)&v6)) + (float)((float)(aimPoint.v[2] - eyePoint.v[2]) * (float)(aimPoint.v[2] - eyePoint.v[2])));
  _XMM4 = v8;
  __asm
  {
    vcmpless xmm0, xmm4, cs:__real@80000000
    vblendvps xmm0, xmm4, xmm1, xmm0
  }
  v13 = v6;
  *(float *)&v13 = *(float *)&v6 * (float)(1.0 / *(float *)&_XMM0);
  _XMM3 = v13;
  v14 = (float)(aimPoint.v[2] - eyePoint.v[2]) * (float)(1.0 / *(float *)&_XMM0);
  __asm { vunpcklps xmm1, xmm3, xmm2 }
  vec.v[2] = v14;
  *(double *)vec.v = *(double *)&_XMM1;
  v17 = *(double *)&_XMM1;
  if ( !v5 )
  {
    Nav_GetLookaheadDir(botData->botInfo.pNavigator, &outLookaheadDir);
    if ( (float)((float)((float)(outLookaheadDir.v[0] * *(float *)&v17) + (float)(outLookaheadDir.v[1] * *((float *)&v17 + 1))) + (float)(outLookaheadDir.v[2] * v14)) < 0.25 )
      return 0i64;
  }
  vectoangles(&vec, viewAnglesOut);
  if ( Bot_IsThrowingGrenade(botData) )
  {
    if ( Bot_GrenadeReleaseTime(botData) - level.time <= 750 )
      viewAnglesOut->v[0] = botData->botInfo.grenadePitch;
  }
  return 1i64;
}

/*
==============
Bot_UpdateEnemySearchLook
==============
*/
int Bot_UpdateEnemySearchLook(bot_data_t *botData, vec3_t *viewAnglesOut)
{
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12112, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( botData->botInfo.currentAISearch.currentNodeCount )
    return Bot_UpdatePathingLook(botData, viewAnglesOut);
  else
    return 0;
}

/*
==============
Bot_UpdateEnemyTrack
==============
*/
void Bot_UpdateEnemyTrack(bot_data_t *botData)
{
  __int128 v1; 
  __int128 v2; 
  __int128 v3; 
  __int128 v4; 
  __int128 v5; 
  playerState_s *playerState; 
  int v8; 
  int CanSeeEnemy; 
  int v10; 
  gentity_s *v11; 
  gentity_s *v12; 
  float v13; 
  __int64 v14; 
  GTurret *v15; 
  int v16; 
  const sentient_s *sentient; 
  sentient_info_t *SentientInfo; 
  float v23; 
  double v24; 
  int iLastVisTime; 
  int v26; 
  float v27; 
  float v28; 
  float v29; 
  int time; 
  float v31; 
  float v32; 
  __int128 v33; 
  float v34; 
  __int128 v35; 
  float v36; 
  __int128 v37; 
  float v41; 
  __int128 v43; 
  int v46; 
  double FrameDurationInSeconds; 
  float v48; 
  float v49; 
  int deadEnemyThreat; 
  float v51; 
  float v52; 
  float Inaccuracy; 
  float v54; 
  float v55; 
  float v56; 
  bot_track_t trackType; 
  int FrameDuration; 
  float fireFromHipDist; 
  float lastDist; 
  __int64 v61; 
  float v62; 
  float v63; 
  vec3_t vVelOut; 
  trajectory_t_secure tr; 
  __int128 v66; 
  __int128 v67; 
  __int128 v68; 
  __int128 v69; 
  __int128 v70; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16665, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16669, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16688, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16689, ASSERT_TYPE_ASSERT, "( botInfo->sentient )", (const char *)&queryFormat, "botInfo->sentient") )
    __debugbreak();
  v8 = 0;
  CanSeeEnemy = Bot_CanSeeEnemy(botData);
  if ( !Bot_CanSeeAndCanFireOnEnemy(botData) || Bot_IsReloading(botData) || (v10 = 1, Bot_IsThrowingGrenade(botData)) )
    v10 = 0;
  if ( !EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
  {
    v12 = NULL;
LABEL_22:
    botData->botInfo.flags &= 0xFFBFFF7F;
    v10 = 0;
    goto LABEL_23;
  }
  v11 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
  v12 = v11;
  if ( !v11 || v11->s.number != botData->botInfo.enemyTrack.lastEnemyEntNum )
    goto LABEL_22;
LABEL_23:
  v13 = FLOAT_2_0;
  if ( v12 )
  {
    if ( !v12->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16710, ASSERT_TYPE_ASSERT, "( enemyEnt->sentient )", (const char *)&queryFormat, "enemyEnt->sentient") )
      __debugbreak();
    if ( (unsigned int)Bot_EntityDeadWhileUsingRemote(v12) || Sentient_IsAerial(v12->sentient) && Bot_IsAerialEntityInDeathStage(v12) )
    {
      Bot_EnemyDied(botData);
      return;
    }
    if ( v12->s.number != botData->botInfo.enemyTrack.lastEnemyEntNum )
    {
      botData->botInfo.enemyTrack.deadEnemyThreat = -2147483647;
      botData->botInfo.enemyTrack.awarePointNext = 0;
      botData->botInfo.enemyTrack.lastFireTime = 0;
      *(_QWORD *)((char *)&botData->scriptedAgentInfo + 9068) = 0i64;
      *(_QWORD *)((char *)&botData->scriptedAgentInfo + 9076) = 0i64;
      botData->botInfo.enemyTrack.lastOrigin.v[2] = 0.0;
      *(_QWORD *)((char *)&botData->scriptedAgentInfo + 9028) = 0i64;
      botData->botInfo.enemyTrack.predictOrigin.v[2] = 0.0;
      botData->botInfo.flags &= ~0x10000u;
      if ( v12->s.eType == ET_TURRET )
      {
        if ( !v12->turretHandle.m_objIndex && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\bgame\\bg_object_handle.h", 36, ASSERT_TYPE_ASSERT, "(IsDefined())", "%s\n\tCan't get the index of an undefined handle", "IsDefined()") )
          __debugbreak();
        v14 = v12->turretHandle.m_objIndex - 1;
        if ( !(_BYTE)GTurret::ms_allocatedType && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_turret.h", 226, ASSERT_TYPE_ASSERT, "( ms_allocatedType != GameModeType::NONE )", (const char *)&queryFormat, "ms_allocatedType != GameModeType::NONE") )
          __debugbreak();
        if ( (unsigned int)v14 >= 0x80 )
        {
          LODWORD(v61) = v14;
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_turret.h", 227, ASSERT_TYPE_ASSERT, "(unsigned)( turretIndex ) < (unsigned)( ( sizeof( *array_counter( ms_turretArray ) ) + 0 ) )", "turretIndex doesn't index ARRAY_COUNT( ms_turretArray )\n\t%i not in [0, %i)", v61, 128) )
            __debugbreak();
        }
        if ( !GTurret::ms_turretArray[v14] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_turret.h", 228, ASSERT_TYPE_ASSERT, "( ms_turretArray[turretIndex] )", (const char *)&queryFormat, "ms_turretArray[turretIndex]") )
          __debugbreak();
        v15 = GTurret::ms_turretArray[v14];
        if ( v12 == (gentity_s *)-12i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\bgame\\bg_public.h", 2072, ASSERT_TYPE_ASSERT, "(esFlags)", (const char *)&queryFormat, "esFlags") )
          __debugbreak();
        if ( GameModeFlagContainer<enum EntityStateFlagsCommon,enum EntityStateFlagsSP,enum EntityStateFlagsMP,32>::TestFlagInternal(&v12->s.lerp.eFlags, ACTIVE, 7u) )
        {
          if ( !Com_GameMode_SupportsFeature(WEAPON_DROPPING_LADDER_CLIMB) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\bgame\\bg_public.h", 2076, ASSERT_TYPE_ASSERT, "(Com_GameMode_SupportsFeature( Com_GameMode_Feature::TURRET_REMOTE_CONTROL ))", (const char *)&queryFormat, "Com_GameMode_SupportsFeature( Com_GameMode_Feature::TURRET_REMOTE_CONTROL )") )
            __debugbreak();
          botData->botInfo.flags |= 0x10000u;
        }
        if ( (v15->m_data.flags & 4) != 0 )
          botData->botInfo.flags |= 0x10000u;
      }
      v8 = 1;
    }
    if ( Bot_IsVehicleEnt(v12) )
    {
      if ( v12->s.eType == ET_SCRIPTMOVER && (v12->sentient->sentientFlags & 2) != 0 )
        goto LABEL_65;
    }
    else if ( !Bot_EntityIsJuggernaut(v12) )
    {
      goto LABEL_65;
    }
    botData->botInfo.flags |= 0x10000u;
    v16 = Bot_EnemyFacesBot(botData);
    if ( CanSeeEnemy )
    {
      if ( v16 )
      {
        if ( level.time >= botData->botInfo.hideFromTime - 500 )
        {
          _XMM0 = (unsigned int)Bot_IsHighAerialSentient(v12->sentient);
          __asm { vpcmpeqd xmm2, xmm0, xmm1 }
          _XMM1 = LODWORD(FLOAT_800_0);
          __asm { vblendvps xmm0, xmm1, xmm6, xmm2 }
          if ( !Bot_Weap_HasLauncherThatNeedsAimAtEnemy(botData) )
            Bot_HideFromEntity(botData, v12, *(float *)&_XMM0, 2000);
        }
      }
    }
LABEL_65:
    botData->botInfo.enemyTrack.lastEnemyTime = level.time;
    botData->botInfo.enemyTrack.lastEnemyEntNum = v12->s.number;
    sentient = v12->sentient;
    if ( sentient )
    {
      SentientInfo = Sentient_GetSentientInfo(botData->botInfo.ent->sentient, v12->sentient);
      if ( !SentientInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16769, ASSERT_TYPE_ASSERT, "( pInfo )", (const char *)&queryFormat, "pInfo") )
        __debugbreak();
      if ( SentientInfo->VisCache.bVisible || Bot_CanSeeEnemyThroughWall(botData) )
      {
        if ( botData->botInfo.enemyTrack.trackType )
          v8 = 1;
        v70 = v1;
        v26 = level.time - botData->botInfo.enemyTrack.lastVisTime;
        botData->botInfo.enemyTrack.trackType = BOT_ENEMY_TRACK_VISIBLE;
        v69 = v2;
        v68 = v3;
        if ( v26 > 1000 )
          v8 = 1;
        v27 = v12->r.currentOrigin.v[0];
        v67 = v4;
        v28 = v12->r.currentOrigin.v[1];
        v66 = v5;
        v29 = v12->r.currentOrigin.v[2];
        Sentient_GetVelocity(sentient, &vVelOut);
        time = level.time;
        if ( v8 || level.time >= botData->botInfo.enemyTrack.regNext )
        {
          v34 = botData->botInfo.enemyTrack.lastVelocity.v[1];
          v35 = LODWORD(botData->botInfo.enemyTrack.lastVelocity.v[0]);
          v33 = LODWORD(vVelOut.v[0]);
          v32 = vVelOut.v[1];
          v31 = vVelOut.v[2];
          v36 = botData->botInfo.enemyTrack.lastVelocity.v[2];
          v37 = v33;
          *(float *)&v37 = fsqrt((float)((float)(*(float *)&v33 * *(float *)&v33) + (float)(v32 * v32)) + (float)(v31 * v31));
          _XMM14 = v37;
          __asm
          {
            vcmpless xmm0, xmm14, cs:__real@80000000
            vblendvps xmm0, xmm14, xmm15, xmm0
          }
          v63 = (float)(1.0 / *(float *)&_XMM0) * vVelOut.v[1];
          v62 = (float)(1.0 / *(float *)&_XMM0) * vVelOut.v[2];
          v41 = (float)(1.0 / *(float *)&_XMM0) * vVelOut.v[0];
          v43 = v35;
          *(float *)&v43 = fsqrt((float)((float)(*(float *)&v35 * *(float *)&v35) + (float)(v34 * v34)) + (float)(v36 * v36));
          _XMM2 = v43;
          __asm
          {
            vcmpless xmm0, xmm2, cs:__real@80000000
            vblendvps xmm0, xmm2, xmm1, xmm0
          }
          if ( v8 || *(float *)&v43 > 0.001 && *(float *)&_XMM14 > 0.001 && (float)((float)((float)((float)((float)(1.0 / *(float *)&_XMM0) * v34) * v63) + (float)((float)((float)(1.0 / *(float *)&_XMM0) * *(float *)&v35) * v41)) + (float)((float)((float)(1.0 / *(float *)&_XMM0) * v36) * v62)) < 0.1 )
          {
            botData->botInfo.enemyTrack.regOrigin.v[0] = v27;
            botData->botInfo.enemyTrack.regOrigin.v[1] = v28;
            botData->botInfo.enemyTrack.regOrigin.v[2] = v29;
            botData->botInfo.enemyTrack.regVelocity.v[0] = *(float *)&v33;
            botData->botInfo.enemyTrack.regVelocity.v[1] = v32;
            botData->botInfo.enemyTrack.regVelocity.v[2] = v31;
            botData->botInfo.enemyTrack.lastVelocity.v[0] = *(float *)&v33;
            botData->botInfo.enemyTrack.lastVelocity.v[1] = v32;
            botData->botInfo.enemyTrack.lastVelocity.v[2] = v31;
            v46 = G_irand((int)botData->botMatchData.minAimResponse, (int)botData->botMatchData.maxAimResponse);
            v31 = vVelOut.v[2];
            v32 = vVelOut.v[1];
            *(float *)&v33 = vVelOut.v[0];
            botData->botInfo.enemyTrack.regNext = level.time + v46;
            time = level.time;
          }
          v13 = FLOAT_2_0;
        }
        else
        {
          v31 = vVelOut.v[2];
          v32 = vVelOut.v[1];
          *(float *)&v33 = vVelOut.v[0];
        }
        if ( time >= botData->botInfo.enemyTrack.regNext )
        {
          botData->botInfo.enemyTrack.lastOrigin.v[0] = v27;
          botData->botInfo.enemyTrack.lastOrigin.v[1] = v28;
          botData->botInfo.enemyTrack.lastOrigin.v[2] = v29;
          botData->botInfo.enemyTrack.lastVelocity.v[0] = *(float *)&v33;
          botData->botInfo.enemyTrack.lastVelocity.v[1] = v32;
          botData->botInfo.enemyTrack.lastVelocity.v[2] = v31;
        }
        else
        {
          FrameDurationInSeconds = G_Level_GetFrameDurationInSeconds();
          if ( v8 )
            v48 = *(float *)&FrameDurationInSeconds * v13;
          else
            v48 = (float)(level.time - botData->botInfo.enemyTrack.lastVisTime) * 0.001;
          v49 = (float)(v48 * botData->botInfo.enemyTrack.regVelocity.v[0]) + botData->botInfo.enemyTrack.regOrigin.v[0];
          botData->botInfo.enemyTrack.regOrigin.v[0] = v49;
          botData->botInfo.enemyTrack.regOrigin.v[1] = (float)(v48 * botData->botInfo.enemyTrack.regVelocity.v[1]) + botData->botInfo.enemyTrack.regOrigin.v[1];
          botData->botInfo.enemyTrack.regOrigin.v[2] = (float)(v48 * botData->botInfo.enemyTrack.regVelocity.v[2]) + botData->botInfo.enemyTrack.regOrigin.v[2];
          botData->botInfo.enemyTrack.lastOrigin.v[0] = v49;
          botData->botInfo.enemyTrack.lastOrigin.v[1] = botData->botInfo.enemyTrack.regOrigin.v[1];
          botData->botInfo.enemyTrack.lastOrigin.v[2] = botData->botInfo.enemyTrack.regOrigin.v[2];
        }
        if ( Bot_ShouldFireOnEnemyInSight(botData) )
        {
          if ( !botData->botInfo.enemyTrack.firstInRangeTime )
            botData->botInfo.enemyTrack.firstInRangeTime = level.time;
        }
        else
        {
          botData->botInfo.enemyTrack.firstInRangeTime = 0;
        }
        v23 = FLOAT_1_0;
        botData->botInfo.enemyTrack.lastVisTime = level.time;
      }
      else
      {
        botData->botInfo.enemyTrack.firstInRangeTime = 0;
        if ( Bot_ShouldForgetEnemy(botData, v12) )
        {
          Bot_StopPursuingEnemy(botData);
          return;
        }
        v23 = FLOAT_1_0;
        if ( botData->botInfo.enemyTrack.trackType == BOT_ENEMY_TRACK_VISIBLE )
        {
          botData->botInfo.enemyTrack.trackType = BOT_ENEMY_TRACK_LASTKNOWN;
          if ( botData->botMatchData.strategyLevel >= 1.0 )
          {
            v24 = G_random();
            if ( *(float *)&v24 >= 0.75 )
            {
              if ( *(float *)&v24 < 0.89999998 )
                botData->botInfo.enemyTrack.trackType = BOT_ENEMY_TRACK_PREDICT_SHORT;
            }
            else
            {
              botData->botInfo.enemyTrack.trackType = BOT_ENEMY_TRACK_PREDICT;
            }
          }
        }
        if ( botData->botInfo.enemyTrack.lastVisTime <= 0 )
        {
          iLastVisTime = SentientInfo->VisCache.iLastVisTime;
          if ( iLastVisTime > 0 )
          {
            botData->botInfo.enemyTrack.lastVisTime = iLastVisTime;
            if ( (botData->botInfo.enemyTrack.lastOrigin.v[0] != 0.0 || botData->botInfo.enemyTrack.lastOrigin.v[1] != 0.0 || botData->botInfo.enemyTrack.lastOrigin.v[2] != 0.0) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16873, ASSERT_TYPE_ASSERT, "( !Vec3NotZero( botInfo->enemyTrack.lastOrigin ) )", (const char *)&queryFormat, "!Vec3NotZero( botInfo->enemyTrack.lastOrigin )") )
              __debugbreak();
            Bot_GetLastKnownEntPosAndTime(botData, v12, &botData->botInfo.enemyTrack.lastOrigin);
          }
        }
      }
      goto LABEL_117;
    }
    goto LABEL_116;
  }
  deadEnemyThreat = botData->botInfo.enemyTrack.deadEnemyThreat;
  botData->botInfo.enemyTrack.lastEnemyEntNum = -1;
  botData->botInfo.enemyTrack.firstInRangeTime = 0;
  if ( deadEnemyThreat > -2147483643 )
  {
    v23 = FLOAT_1_0;
    if ( playerState->damageCount )
      botData->botInfo.enemyTrack.deadEnemyThreat = -2147483647;
    else
      botData->botInfo.enemyTrack.deadEnemyThreat = deadEnemyThreat - 4;
    goto LABEL_117;
  }
LABEL_116:
  v23 = FLOAT_1_0;
LABEL_117:
  if ( CanSeeEnemy || Bot_CanSeeEnemyThroughWall(botData) )
    botData->botInfo.currentAISearch.currentNodeCount = 0;
  if ( Bot_IsThrowingGrenade(botData) )
    botData->botInfo.enemyTrack.trackType = BOT_ENEMY_TRACK_LASTKNOWN;
  if ( !botData->botInfo.enemyTrack.lastVisTime )
    goto LABEL_140;
  v51 = botData->botInfo.enemyTrack.lastOrigin.v[1];
  v52 = botData->botInfo.enemyTrack.lastOrigin.v[2];
  tr.trBase.v[0] = botData->botInfo.enemyTrack.lastOrigin.v[0];
  tr.trBase.v[1] = v51;
  tr.trBase.v[2] = v52;
  if ( ((LODWORD(tr.trBase.v[0]) & 0x7F800000) == 2139095040 || (LODWORD(v51) & 0x7F800000) == 2139095040 || (LODWORD(v52) & 0x7F800000) == 2139095040) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16906, ASSERT_TYPE_SANITY, "( !IS_NAN( ( tr.trBase )[0] ) && !IS_NAN( ( tr.trBase )[1] ) && !IS_NAN( ( tr.trBase )[2] ) )", (const char *)&queryFormat, "!IS_NAN( ( tr.trBase )[0] ) && !IS_NAN( ( tr.trBase )[1] ) && !IS_NAN( ( tr.trBase )[2] )") )
    __debugbreak();
  Inaccuracy = Bot_GetInaccuracy(botData);
  v54 = (float)(Inaccuracy * sinf_0((float)level.time)) + v23;
  v55 = v54 * botData->botInfo.enemyTrack.lastVelocity.v[1];
  v56 = v54 * botData->botInfo.enemyTrack.lastVelocity.v[2];
  tr.trDelta.v[0] = v54 * botData->botInfo.enemyTrack.lastVelocity.v[0];
  tr.trDelta.v[1] = v55;
  tr.trDelta.v[2] = v56;
  if ( ((LODWORD(tr.trDelta.v[0]) & 0x7F800000) == 2139095040 || (LODWORD(v55) & 0x7F800000) == 2139095040 || (LODWORD(v56) & 0x7F800000) == 2139095040) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16911, ASSERT_TYPE_SANITY, "( !IS_NAN( ( tr.trDelta )[0] ) && !IS_NAN( ( tr.trDelta )[1] ) && !IS_NAN( ( tr.trDelta )[2] ) )", (const char *)&queryFormat, "!IS_NAN( ( tr.trDelta )[0] ) && !IS_NAN( ( tr.trDelta )[1] ) && !IS_NAN( ( tr.trDelta )[2] )") )
    __debugbreak();
  tr.trTime = botData->botInfo.enemyTrack.lastVisTime;
  trackType = botData->botInfo.enemyTrack.trackType;
  if ( trackType == BOT_ENEMY_TRACK_VISIBLE )
    goto LABEL_136;
  if ( trackType == BOT_ENEMY_TRACK_LASTKNOWN )
  {
    tr.trType = TR_STATIONARY;
    goto LABEL_137;
  }
  if ( (unsigned int)(trackType - 2) <= 1 )
LABEL_136:
    tr.trType = TR_LINEAR;
LABEL_137:
  FrameDuration = G_Level_GetFrameDuration();
  BgTrajectory::LegacyEvaluateTrajectory(&tr, level.time + 2 * FrameDuration, &botData->botInfo.enemyTrack.predictOrigin);
  if ( botData->botInfo.enemyTrack.trackType == BOT_ENEMY_TRACK_PREDICT_SHORT && level.time - botData->botInfo.enemyTrack.lastVisTime > 250 )
  {
    botData->botInfo.enemyTrack.lastOrigin.v[0] = botData->botInfo.enemyTrack.predictOrigin.v[0];
    botData->botInfo.enemyTrack.lastOrigin.v[1] = botData->botInfo.enemyTrack.predictOrigin.v[1];
    botData->botInfo.enemyTrack.lastOrigin.v[2] = botData->botInfo.enemyTrack.predictOrigin.v[2];
    botData->botInfo.enemyTrack.trackType = BOT_ENEMY_TRACK_LASTKNOWN;
  }
LABEL_140:
  Bot_UpdateEnemyTrackAimOffset(botData, v10);
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) && EntHandle::ent(&botData->botInfo.sentient->targetEnt) )
  {
    fireFromHipDist = botData->botMatchData.fireFromHipDist;
    if ( !botData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20202, ASSERT_TYPE_ASSERT, "( botInfo->playerState )", (const char *)&queryFormat, "botInfo->playerState") )
      __debugbreak();
    if ( BG_HasPerk(&botData->botInfo.playerState->perks, 0) )
      fireFromHipDist = fireFromHipDist * v13;
    lastDist = botData->botInfo.enemyTrack.lastDist;
    if ( lastDist > 0.0 && lastDist <= fireFromHipDist )
      botData->botInfo.lastFireFromHipRangeTime = level.time;
  }
  botData->botInfo.flags &= ~0x20000u;
  if ( (botData->botInfo.scriptFlags & 0x100) != 0 && (!Bot_EnemyFacesBot(botData) || Bot_ShouldRushEnemy(botData)) )
    botData->botInfo.flags |= 0x20000u;
}

/*
==============
Bot_UpdateEnemyTrackAimOffset
==============
*/
void Bot_UpdateEnemyTrackAimOffset(bot_data_t *botData, int aimingAtEnemy)
{
  playerState_s *playerState; 
  playerState_s *EntityPlayerState; 
  gentity_s *v6; 
  float v7; 
  __int128 v8; 
  float viewHeightCurrent; 
  float v10; 
  float v11; 
  float v12; 
  float v13; 
  __int128 v15; 
  float v20; 
  float v21; 
  double v22; 
  float v23; 
  float v24; 
  float v25; 
  float v26; 
  float v27; 
  double v28; 
  vec3_t right; 
  vec3_t vEyePosOut; 
  vec3_t forward; 
  vec3_t up; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16576, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16577, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  EntityPlayerState = NULL;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16583, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  if ( !aimingAtEnemy )
  {
    botData->botInfo.enemyTrack.aimOffsetLength = Bot_GetInaccuracy(botData) * 40.0;
    *((_QWORD *)&botData->scriptedAgentInfo + 1130) = 0i64;
    botData->botInfo.enemyTrack.aimOffset.v[2] = 0.0;
  }
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
  {
    v6 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
    if ( v6 )
      EntityPlayerState = G_GetEntityPlayerState(v6);
  }
  if ( level.time >= botData->botInfo.enemyTrack.aimOffsetNext )
  {
    if ( aimingAtEnemy )
    {
      if ( EntityPlayerState )
      {
        v7 = botData->botInfo.enemyTrack.predictOrigin.v[0];
        v8 = LODWORD(botData->botInfo.enemyTrack.predictOrigin.v[1]);
        viewHeightCurrent = EntityPlayerState->viewHeightCurrent;
        v10 = botData->botInfo.enemyTrack.predictOrigin.v[2];
        Sentient_GetEyePosition(botData->botInfo.sentient, &vEyePosOut);
        AngleVectors(&playerState->viewangles, &forward, &right, &up);
        v15 = v8;
        v11 = *(float *)&v8 - vEyePosOut.v[1];
        v12 = v7 - vEyePosOut.v[0];
        v13 = (float)(viewHeightCurrent + v10) - vEyePosOut.v[2];
        *(float *)&v15 = fsqrt((float)((float)(v11 * v11) + (float)(v12 * v12)) + (float)(v13 * v13));
        _XMM7 = v15;
        __asm
        {
          vcmpless xmm0, xmm7, cs:__real@80000000
          vblendvps xmm0, xmm7, xmm1, xmm0
        }
        if ( (float)((float)((float)((float)(v11 * (float)(1.0 / *(float *)&_XMM0)) * forward.v[1]) + (float)((float)((float)(v7 - vEyePosOut.v[0]) * (float)(1.0 / *(float *)&_XMM0)) * forward.v[0])) + (float)((float)(v13 * (float)(1.0 / *(float *)&_XMM0)) * forward.v[2])) > 0.69999999 )
        {
          *(float *)&v15 = *(float *)&v15 * 0.25;
          _XMM0 = v15;
          __asm { vminss  xmm7, xmm0, dword ptr [rbx+2364h] }
          if ( Bot_IsFireFromHipRange(botData) )
            *(float *)&_XMM7 = *(float *)&_XMM7 * 0.5;
          v20 = *(float *)&_XMM7 * 0.25;
          if ( (float)((float)((float)(v12 * right.v[0]) + (float)(v11 * right.v[1])) + (float)(v13 * right.v[2])) >= 0.0 )
          {
            LODWORD(v23) = LODWORD(v20) ^ _xmm;
            v22 = G_flrand(COERCE_FLOAT(LODWORD(v20) ^ _xmm), *(float *)&_XMM7);
            LODWORD(v21) = _XMM7 ^ _xmm;
          }
          else
          {
            LODWORD(v21) = _XMM7 ^ _xmm;
            v22 = G_flrand(v20, COERCE_FLOAT(_XMM7 ^ _xmm));
            LODWORD(v23) = LODWORD(v20) ^ _xmm;
          }
          v24 = right.v[2] * *(float *)&v22;
          v25 = right.v[1] * *(float *)&v22;
          botData->botInfo.enemyTrack.aimOffset.v[0] = right.v[0] * *(float *)&v22;
          botData->botInfo.enemyTrack.aimOffset.v[1] = v25;
          botData->botInfo.enemyTrack.aimOffset.v[2] = v24;
          if ( (float)((float)((float)(v12 * up.v[0]) + (float)(v11 * up.v[1])) + (float)(v13 * up.v[2])) >= 0.0 )
          {
            v26 = *(float *)&_XMM7;
            v27 = v23;
          }
          else
          {
            v26 = v21;
            v27 = *(float *)&_XMM7 * 0.25;
          }
          v28 = G_flrand(v27, v26);
          botData->botInfo.enemyTrack.aimOffset.v[2] = *(float *)&v28 * 0.5;
          botData->botInfo.enemyTrack.aimOffsetLength = botData->botInfo.enemyTrack.aimOffsetLength * 0.80000001;
          botData->botInfo.enemyTrack.aimOffsetNext = level.time + G_irand(250, 350);
        }
      }
    }
  }
}

/*
==============
Bot_UpdateFireFromHipRange
==============
*/
void Bot_UpdateFireFromHipRange(bot_data_t *botData)
{
  float fireFromHipDist; 
  float lastDist; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20188, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) && EntHandle::ent(&botData->botInfo.sentient->targetEnt) )
  {
    fireFromHipDist = botData->botMatchData.fireFromHipDist;
    if ( !botData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20202, ASSERT_TYPE_ASSERT, "( botInfo->playerState )", (const char *)&queryFormat, "botInfo->playerState") )
      __debugbreak();
    if ( BG_HasPerk(&botData->botInfo.playerState->perks, 0) )
      fireFromHipDist = fireFromHipDist * 2.0;
    lastDist = botData->botInfo.enemyTrack.lastDist;
    if ( lastDist > 0.0 && lastDist <= fireFromHipDist )
      botData->botInfo.lastFireFromHipRangeTime = level.time;
  }
}

/*
==============
Bot_UpdateGrenadeLook
==============
*/
int Bot_UpdateGrenadeLook(bot_data_t *botData, vec3_t *viewAnglesOut)
{
  int result; 
  float v5; 
  __int128 v6; 
  float v7; 
  __int128 v8; 
  vec3_t vPos; 
  vec3_t vec; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12261, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  vPos.v[0] = 0.0;
  vPos.v[1] = 0.0;
  vPos.v[2] = 0.0;
  vec.v[0] = 0.0;
  vec.v[1] = 0.0;
  vec.v[2] = 0.0;
  result = Bot_IsThrowingGrenade(botData);
  if ( result || (*((_BYTE *)&botData->scriptedAgentInfo + 28228) & 2) != 0 )
  {
    if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12275, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
      __debugbreak();
    if ( (*((_BYTE *)&botData->scriptedAgentInfo + 28228) & 2) != 0 )
    {
      v5 = botData->botInfo.scriptedGrenadeTarget.v[0];
      v6 = LODWORD(botData->botInfo.scriptedGrenadeTarget.v[1]);
      v7 = botData->botInfo.scriptedGrenadeTarget.v[2];
    }
    else
    {
      v5 = botData->botInfo.grenadeThrowTarget.v[0];
      v6 = LODWORD(botData->botInfo.grenadeThrowTarget.v[1]);
      v7 = botData->botInfo.grenadeThrowTarget.v[2];
    }
    Bot_PredictPosition(botData->botInfo.ent, botData, &botData->botInfo.ent->r.currentOrigin, &vPos);
    v8 = v6;
    *(float *)&v8 = fsqrt((float)((float)((float)(*(float *)&v6 - vPos.v[1]) * (float)(*(float *)&v6 - vPos.v[1])) + (float)((float)(v5 - vPos.v[0]) * (float)(v5 - vPos.v[0]))) + (float)((float)(v7 - vPos.v[2]) * (float)(v7 - vPos.v[2])));
    _XMM3 = v8;
    __asm
    {
      vcmpless xmm0, xmm3, cs:__real@80000000
      vblendvps xmm0, xmm3, xmm1, xmm0
    }
    vec.v[0] = (float)(v5 - vPos.v[0]) * (float)(1.0 / *(float *)&_XMM0);
    vec.v[2] = (float)(v7 - vPos.v[2]) * (float)(1.0 / *(float *)&_XMM0);
    vec.v[1] = (float)(*(float *)&v6 - vPos.v[1]) * (float)(1.0 / *(float *)&_XMM0);
    vectoangles(&vec, viewAnglesOut);
    if ( Bot_GrenadeReleaseTime(botData) - level.time <= 750 )
      viewAnglesOut->v[0] = botData->botInfo.grenadePitch;
    return 1;
  }
  return result;
}

/*
==============
Bot_UpdateHidingGoal
==============
*/
__int64 Bot_UpdateHidingGoal(bot_data_t *botData)
{
  gentity_s *HidingFromEntity; 
  unsigned __int16 hideFromLastNode; 
  pathnode_t *v4; 
  sentient_s *sentient; 
  int v7; 
  float v8; 
  float v9; 
  int v10; 
  __int64 v11; 
  __int64 v12; 
  pathsort_s *p_nodes; 
  unsigned __int16 v14; 
  const pathnode_t *LastKnownEntNearestNode; 
  unsigned __int16 v16; 
  float hideFromRange; 
  pathnode_t *v18; 
  const char *v19; 
  int nodesPicked; 
  vec3_t targetPos; 
  vec3_t pos; 
  bot_score_parms_s parms; 
  bot_score_item_s objects[512]; 
  pathsort_s nodes; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24237, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24250, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  HidingFromEntity = Bot_GetHidingFromEntity(botData);
  if ( HidingFromEntity )
  {
    if ( !Bot_ShouldDelayPathGen(botData) )
    {
      if ( !HidingFromEntity->sentient && HidingFromEntity->s.eType != ET_MISSILE && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24272, ASSERT_TYPE_ASSERT, "( hideFromEnt->sentient || (hideFromEnt->s.eType == ET_MISSILE) )", (const char *)&queryFormat, "hideFromEnt->sentient || (hideFromEnt->s.eType == ET_MISSILE)") )
        __debugbreak();
      Bot_GetLastKnownEntPosAndTime(botData, HidingFromEntity, &targetPos);
      v7 = Bot_PathExists(&botData->botInfo);
      v8 = targetPos.v[2];
      v9 = targetPos.v[1];
      if ( v7 && (float)((float)((float)((float)(targetPos.v[1] - botData->botInfo.hideFromLastPos.v[1]) * (float)(targetPos.v[1] - botData->botInfo.hideFromLastPos.v[1])) + (float)((float)(targetPos.v[0] - botData->botInfo.hideFromLastPos.v[0]) * (float)(targetPos.v[0] - botData->botInfo.hideFromLastPos.v[0]))) + (float)((float)(targetPos.v[2] - botData->botInfo.hideFromLastPos.v[2]) * (float)(targetPos.v[2] - botData->botInfo.hideFromLastPos.v[2]))) <= 10000.0 )
        return 1i64;
      botData->botInfo.hideFromLastPos.v[0] = targetPos.v[0];
      botData->botInfo.hideFromLastPos.v[1] = v9;
      botData->botInfo.hideFromLastPos.v[2] = v8;
      v10 = Path_NodesInRadius(&botData->botInfo.ent->r.currentOrigin, botData->botInfo.hideFromRange, &nodes, 512, -510656513);
      v11 = v10;
      if ( v10 > 0 )
      {
        v12 = 0i64;
        p_nodes = &nodes;
        do
        {
          v14 = Path_ConvertNodeToIndex(p_nodes->node);
          ++p_nodes;
          objects[v12++].object = v14;
        }
        while ( v12 < v11 );
      }
      if ( (int)v11 <= 0 )
        return 1i64;
      LastKnownEntNearestNode = Bot_GetLastKnownEntNearestNode(botData, HidingFromEntity);
      if ( LastKnownEntNearestNode || (LastKnownEntNearestNode = Path_NearestNode(&targetPos, botData->botInfo.ent->clipmask, NULL)) != NULL )
      {
        Bot_Score_ScoreNodesInitParms(botData, &parms, BOT_SCORE_NODE_HIDE_FROM);
        v16 = Path_ConvertNodeToIndex(LastKnownEntNearestNode);
        hideFromRange = botData->botInfo.hideFromRange;
        parms.integer1 = v16;
        parms.integer2 = (int)hideFromRange;
        if ( hideFromRange <= 300.0 )
          parms.flags |= 0x20u;
        if ( Bot_Score_ScoreNodesPick(botData, objects, v11, 1, &parms, 1, &nodesPicked) == 1 )
        {
          v18 = Path_ConvertIndexToNode(nodesPicked);
          pathnode_t::GetPos(v18, &pos);
          if ( !Bot_PointInGoal(botData, 0.0, &pos) )
          {
            botData->botInfo.hideFromLastNode = Path_ConvertNodeToIndex(v18);
            Bot_ForceClaimNode(&botData->botInfo, v18);
            v19 = j_va("hidefrom %i %i", (unsigned int)botData->botInfo.hideFromEntNum, botData->botInfo.hideFromLastNode);
            Bot_GetPathToGoalInternal(botData, &pos, 0.0, v19);
            botData->botInfo.flags |= 0x1000u;
          }
        }
        return 1i64;
      }
    }
    return 0i64;
  }
  hideFromLastNode = botData->botInfo.hideFromLastNode;
  if ( hideFromLastNode != 0xFFFF )
  {
    v4 = Path_ConvertIndexToNode(hideFromLastNode);
    sentient = botData->botInfo.sentient;
    if ( sentient->pClaimedNode == v4 )
      Path_RelinquishNodeNow(sentient);
    botData->botInfo.hideFromLastNode = -1;
  }
  botData->botInfo.hideFromTime = 0;
  return 0i64;
}

/*
==============
Bot_UpdateHybridToggle
==============
*/
void Bot_UpdateHybridToggle(bot_data_t *botData, usercmd_s *cmd)
{
  const Weapon *ViewmodelWeapon; 
  bool v5; 
  playerState_s *playerState; 
  GWeaponMap *Instance; 
  int EquippedWeaponIndex; 
  __int64 v9; 
  char v10; 
  int time; 
  int v12; 
  int v13; 
  bool v14; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8068, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8069, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState )", (const char *)&queryFormat, "botData->botInfo.playerState") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8070, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !botData->botInfo.ent->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8071, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent->sentient )", (const char *)&queryFormat, "botData->botInfo.ent->sentient") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8072, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(botData->botInfo.playerState);
  v5 = BG_UsingAlternate(botData->botInfo.playerState);
  if ( !BG_CanHybridToggle(botData->botInfo.playerState, ViewmodelWeapon, v5) || level.time - botData->botInfo.lastFrozenTime < 500 || level.time - botData->botInfo.ent->sentient->lastSpawnTime < 500 )
    return;
  playerState = botData->botInfo.playerState;
  Instance = GWeaponMap::GetInstance();
  if ( !Instance && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\bgame\\bg_weapons.h", 1063, ASSERT_TYPE_ASSERT, "(weaponMap)", (const char *)&queryFormat, "weaponMap") )
    __debugbreak();
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\bgame\\bg_weapons.h", 1064, ASSERT_TYPE_ASSERT, "(ps)", (const char *)&queryFormat, "ps") )
    __debugbreak();
  EquippedWeaponIndex = BG_GetEquippedWeaponIndex(Instance, playerState, ViewmodelWeapon);
  if ( EquippedWeaponIndex < 0 )
  {
    v9 = 0i64;
    goto LABEL_29;
  }
  v9 = (__int64)&playerState->weapEquippedData[EquippedWeaponIndex];
  if ( !v9 )
  {
LABEL_29:
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8091, ASSERT_TYPE_ASSERT, "( state )", (const char *)&queryFormat, "state") )
      __debugbreak();
  }
  v10 = *(_BYTE *)(v9 + 9);
  if ( v10 )
  {
    if ( v10 != 1 )
      return;
    time = level.time;
    if ( level.time - botData->botInfo.lastLongRangeTime >= 500 )
      return;
  }
  else
  {
    time = level.time;
    if ( level.time - botData->botInfo.lastLongRangeTime < 500 )
      return;
  }
  v12 = time - botData->botInfo.enemyTrack.lastFireTime;
  v13 = time - botData->botInfo.lastHybridPressTime;
  v14 = (botData->botInfo.lastUserCmd->buttons & 0x200000000i64) != 0 || (cmd->buttons & 0x200000000i64) != 0;
  if ( !BG_InADS(botData->botInfo.playerState) )
    botData->botInfo.lastHybridPressTime = level.time;
  if ( BG_InADS(botData->botInfo.playerState) && v12 > 200 && v13 > 150 && !v14 )
  {
    cmd->buttons |= 0x200000000ui64;
    botData->botInfo.lastHybridPressTime = level.time;
  }
  if ( !Bot_GetEnemy(botData) || Bot_ShouldADS(botData, botData->botInfo.playerState) )
    botData->botInfo.lastADSPressTime = level.time;
}

/*
==============
Bot_UpdateIdleLook
==============
*/
__int64 Bot_UpdateIdleLook(bot_data_t *botData, vec3_t *viewAnglesOut)
{
  playerState_s *playerState; 
  playerState_s *v5; 
  const playerState_s *EntityPlayerStateConst; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12303, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12306, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  v5 = botData->botInfo.playerState;
  if ( (float)((float)((float)(v5->velocity.v[0] * v5->velocity.v[0]) + (float)(v5->velocity.v[1] * v5->velocity.v[1])) + (float)(v5->velocity.v[2] * v5->velocity.v[2])) > 0.0099999998 )
    return 0i64;
  if ( !botData->botInfo.lastUserCmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11247, ASSERT_TYPE_ASSERT, "( botData->botInfo.lastUserCmd )", (const char *)&queryFormat, "botData->botInfo.lastUserCmd") )
    __debugbreak();
  EntityPlayerStateConst = G_GetEntityPlayerStateConst(botData->botInfo.ent);
  if ( (G_PlayerUse_GetUseButtonMask(EntityPlayerStateConst) & botData->botInfo.lastUserCmd->buttons) != 0 || (LOBYTE(botData->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) != 0 || !Bot_UpdateSearchLook(botData) )
    return 0i64;
  viewAnglesOut->v[0] = playerState->viewangles.v[0];
  viewAnglesOut->v[1] = playerState->viewangles.v[1];
  viewAnglesOut->v[2] = playerState->viewangles.v[2];
  return 1i64;
}

/*
==============
Bot_UpdateJumpTraversal
==============
*/
void Bot_UpdateJumpTraversal(bot_data_t *botData, usercmd_s *cmd)
{
  int v4; 
  playerState_s *playerState; 
  int v6; 
  int v7; 
  pathnode_t *v8; 
  pathnode_t *v9; 
  gentity_s *ent; 
  float v11; 
  float v12; 
  float DeltaAngleToTraversal; 
  int traversal; 
  float v15; 
  BOOL v16; 
  double FrameDurationInSeconds; 
  float v20; 
  __int128 v21; 
  __int128 v22; 
  float v23; 
  gentity_s *v27; 
  float v28; 
  playerState_s *v29; 
  const Bounds *Bounds; 
  int v31; 
  int time; 
  __int64 v33; 
  __int64 v34; 
  __int64 v35; 
  vec3_t pos; 
  vec3_t end; 
  vec3_t start; 
  vec3_t v39; 
  trace_t results; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16012, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.lastUserCmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16013, ASSERT_TYPE_ASSERT, "( botData->botInfo.lastUserCmd )", (const char *)&queryFormat, "botData->botInfo.lastUserCmd") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16014, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  v4 = Bot_IsOnGround(botData);
  playerState = botData->botInfo.playerState;
  v6 = v4;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16027, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  if ( (LOBYTE(botData->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) == 0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16030, ASSERT_TYPE_ASSERT, "( Bot_IsDoingTraversal( botInfo ) )", (const char *)&queryFormat, "Bot_IsDoingTraversal( botInfo )") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16031, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  v7 = 1;
  if ( GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&playerState->pm_flags, ACTIVE, 0x1Au) )
  {
    Bot_TraversalClear(&botData->botInfo);
    return;
  }
  v8 = NULL;
  if ( Path_NodeValid(botData->botInfo.nodeNegotStart) )
    v9 = Path_ConvertIndexToNode(botData->botInfo.nodeNegotStart);
  else
    v9 = NULL;
  if ( Path_NodeValid(botData->botInfo.nodeNegotEnd) )
    v8 = Path_ConvertIndexToNode(botData->botInfo.nodeNegotEnd);
  if ( !v9 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16047, ASSERT_TYPE_ASSERT, "(negotiationStartNode)", "%s\n\tNo traversal start node.  botInfo->traversal = %i, botInfo->nodeNegotStart = %i, botInfo->traverseJumpTime = %i", "negotiationStartNode", botData->botInfo.traversal, botData->botInfo.nodeNegotStart, botData->botInfo.traverseJumpTime) )
    __debugbreak();
  if ( !v8 )
  {
    LODWORD(v35) = botData->botInfo.traverseJumpTime;
    LODWORD(v34) = botData->botInfo.nodeNegotEnd;
    LODWORD(v33) = botData->botInfo.traversal;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16047, ASSERT_TYPE_ASSERT, "(negotiationEndNode)", "%s\n\tNo traversal end node.  botInfo->traversal = %i, botInfo->nodeNegotEnd = %i, botInfo->traverseJumpTime = %i", "negotiationEndNode", v33, v34, v35) )
      __debugbreak();
  }
  pathnode_t::GetPos(v9, &pos);
  pathnode_t::GetPos(v8, &v39);
  ent = botData->botInfo.ent;
  v11 = pos.v[2] - ent->r.currentOrigin.v[2];
  v12 = (float)((float)(pos.v[1] - ent->r.currentOrigin.v[1]) * (float)(pos.v[1] - ent->r.currentOrigin.v[1])) + (float)((float)(pos.v[0] - ent->r.currentOrigin.v[0]) * (float)(pos.v[0] - ent->r.currentOrigin.v[0]));
  DeltaAngleToTraversal = Bot_GetDeltaAngleToTraversal(botData);
  traversal = botData->botInfo.traversal;
  v15 = DeltaAngleToTraversal;
  if ( (traversal & 8) != 0 )
  {
    if ( v6 )
    {
      if ( v12 > 4.0 || cmd->forwardmove || cmd->rightmove || (float)((float)((float)(playerState->velocity.v[0] * playerState->velocity.v[0]) + (float)(playerState->velocity.v[1] * playerState->velocity.v[1])) + (float)(playerState->velocity.v[2] * playerState->velocity.v[2])) >= 0.001 || DeltaAngleToTraversal >= 10.0 )
        goto LABEL_39;
      goto LABEL_66;
    }
  }
  else
  {
    v16 = v12 < 2500.0 && COERCE_FLOAT(LODWORD(v11) & _xmm) < 10.0;
    if ( !v6 || !v16 )
      v7 = 0;
    if ( (botData->botInfo.lastUserCmd->forwardmove < 120 || cmd->forwardmove < 120) && !botData->botInfo.stuckFrames )
      v7 = 0;
    if ( (traversal & 4) == 0 )
    {
      if ( !v7 )
        goto LABEL_39;
LABEL_66:
      if ( level.time > botData->botInfo.traverseJumpTime && !Jump_InJumpDebounce(playerState, cmd) )
      {
        cmd->buttons |= 0x100ui64;
        v31 = G_rand();
        time = level.time;
        ++botData->botInfo.traverseProgressJumps;
        botData->botInfo.traverseJumpTime = v31 % 200 + time + 200;
        return;
      }
LABEL_39:
      if ( v6 )
        return;
      goto LABEL_40;
    }
    _XMM0 = LODWORD(v39.v[2]);
    __asm { vminss  xmm1, xmm0, dword ptr [rsp+158h+pos+8] }
    if ( (float)(*(float *)&_XMM1 - botData->botInfo.ent->r.currentOrigin.v[2]) > 20.0 )
    {
      Bot_TraversalClear(&botData->botInfo);
      Bot_BadPath(botData->botInfo.ent);
      return;
    }
    if ( v15 < 10.0 )
      botData->botInfo.traversal |= 0x20000u;
    if ( v6 )
    {
      if ( level.time <= botData->botInfo.traverseJumpTime )
        goto LABEL_39;
      FrameDurationInSeconds = G_Level_GetFrameDurationInSeconds();
      v20 = playerState->velocity.v[0];
      v21 = LODWORD(playerState->velocity.v[1]);
      v22 = v21;
      *(float *)&v22 = (float)(*(float *)&v21 * *(float *)&v21) + (float)(v20 * v20);
      v23 = *(float *)&FrameDurationInSeconds;
      if ( *(float *)&v22 < 5625.0 )
      {
        *(float *)&v22 = fsqrt(*(float *)&v22);
        _XMM1 = v22;
        __asm
        {
          vcmpless xmm0, xmm1, cs:__real@80000000
          vblendvps xmm0, xmm1, xmm6, xmm0
        }
        v20 = (float)(v20 * (float)(1.0 / *(float *)&_XMM0)) * 75.0;
        *(float *)&v21 = (float)(*(float *)&v21 * (float)(1.0 / *(float *)&_XMM0)) * 75.0;
      }
      v27 = botData->botInfo.ent;
      start.v[0] = (float)(v20 * (float)(v23 * 1.25)) + v27->r.currentOrigin.v[0];
      start.v[1] = (float)(*(float *)&v21 * (float)(v23 * 1.25)) + v27->r.currentOrigin.v[1];
      v28 = v27->r.currentOrigin.v[2];
      v29 = botData->botInfo.playerState;
      start.v[2] = v28;
      end.v[2] = v28 - 5.4000001;
      end.v[0] = start.v[0];
      end.v[1] = start.v[1];
      results.fraction = FLOAT_1_0;
      Bounds = BG_Suit_GetBounds(v29->suitIndex, PM_EFF_STANCE_DEFAULT);
      G_Main_TraceCapsule(&results, &start, &end, Bounds, botData->botInfo.ent->s.number, botData->botInfo.ent->clipmask & 0xFDFFBFFF);
      if ( results.fraction < 1.0 )
        goto LABEL_39;
      goto LABEL_66;
    }
  }
LABEL_40:
  if ( level.time <= botData->botInfo.traverseJumpTime )
    cmd->buttons |= 0x100ui64;
}

/*
==============
Bot_UpdateLadder
==============
*/
__int64 Bot_UpdateLadder(bot_data_t *botData, usercmd_s *cmd)
{
  playerState_s *playerState; 
  bool v5; 
  int traversal; 
  int v7; 
  pathnode_t *v8; 
  pathnode_t *v9; 
  float v10; 
  float v11; 
  __int128 v12; 
  float v16; 
  __int128 v17; 
  int time; 
  __int64 v23; 
  __int64 v24; 
  __int64 v25; 
  vec3_t forward; 
  vec3_t v27; 
  vec3_t pos; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15488, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15491, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  v5 = GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 6u);
  traversal = botData->botInfo.traversal;
  if ( v5 )
  {
    v7 = traversal | 0x8000;
    botData->botInfo.traversal = v7;
    botData->botInfo.lastTimeOnLadder = level.time;
    if ( (v7 & 1) != 0 && (!playerState->damageCount || (LOBYTE(botData->scriptedAgentInfo.blackboard.m_ShootParams.m_Pos.v[0]) & 2) == 0) )
    {
      if ( level.time - botData->botInfo.traverseStartTime <= 750 || (v7 & 1) == 0 )
        goto LABEL_25;
      v8 = NULL;
      if ( Path_NodeValid(botData->botInfo.nodeNegotStart) )
        v9 = Path_ConvertIndexToNode(botData->botInfo.nodeNegotStart);
      else
        v9 = NULL;
      if ( Path_NodeValid(botData->botInfo.nodeNegotEnd) )
        v8 = Path_ConvertIndexToNode(botData->botInfo.nodeNegotEnd);
      if ( !v9 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15522, ASSERT_TYPE_ASSERT, "(negotiationStartNode)", "%s\n\tNo traversal start node.  botInfo->traversal = %i, botInfo->nodeNegotStart = %i, botInfo->traverseJumpTime = %i", "negotiationStartNode", botData->botInfo.traversal, botData->botInfo.nodeNegotStart, botData->botInfo.traverseJumpTime) )
        __debugbreak();
      if ( !v8 )
      {
        LODWORD(v25) = botData->botInfo.traverseJumpTime;
        LODWORD(v24) = botData->botInfo.nodeNegotEnd;
        LODWORD(v23) = botData->botInfo.traversal;
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15522, ASSERT_TYPE_ASSERT, "(negotiationEndNode)", "%s\n\tNo traversal end node.  botInfo->traversal = %i, botInfo->nodeNegotEnd = %i, botInfo->traverseJumpTime = %i", "negotiationEndNode", v23, v24, v25) )
          __debugbreak();
      }
      pathnode_t::GetPos(v9, &pos);
      pathnode_t::GetPos(v8, &v27);
      v10 = v27.v[0] - pos.v[0];
      v12 = LODWORD(v27.v[1]);
      v11 = v27.v[1] - pos.v[1];
      AngleVectors(&playerState->viewangles, &forward, NULL, NULL);
      *(float *)&v12 = fsqrt((float)(v11 * v11) + (float)(v10 * v10));
      _XMM2 = v12;
      __asm
      {
        vcmpless xmm0, xmm2, cs:__real@80000000
        vblendvps xmm0, xmm2, xmm6, xmm0
      }
      v16 = 1.0 / *(float *)&_XMM0;
      v17 = LODWORD(forward.v[0]);
      *(float *)&v17 = fsqrt((float)(*(float *)&v17 * *(float *)&v17) + (float)(forward.v[1] * forward.v[1]));
      _XMM2 = v17;
      __asm
      {
        vcmpless xmm0, xmm2, cs:__real@80000000
        vblendvps xmm0, xmm2, xmm6, xmm0
      }
      forward.v[2] = 0.0;
      forward.v[1] = forward.v[1] * (float)(1.0 / *(float *)&_XMM0);
      forward.v[0] = forward.v[0] * (float)(1.0 / *(float *)&_XMM0);
      if ( (float)((float)((float)(v11 * v16) * forward.v[1]) + (float)((float)(v10 * v16) * forward.v[0])) >= 0.5 )
      {
LABEL_25:
        Bot_SetMovementAlongNegotiation(botData, cmd);
        return 1i64;
      }
    }
    if ( !Jump_InJumpDebounce(playerState, cmd) )
    {
      Bot_PathClear(&botData->botInfo);
      Bot_TraversalClear(&botData->botInfo);
      if ( !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 0x1Au) )
        cmd->buttons |= 0x100ui64;
      *(_WORD *)&cmd->forwardmove = 129;
      botData->botInfo.stuckReactionTime = level.time + 1000;
      return 1i64;
    }
    return 1i64;
  }
  if ( (traversal & 1) != 0 )
  {
    time = level.time;
    if ( level.time - botData->botInfo.traverseStartTime > 250 )
    {
      Bot_SetMovementAlongNegotiation(botData, cmd);
      traversal = botData->botInfo.traversal;
      time = level.time;
    }
    if ( (traversal & 0x8000) != 0 )
      goto LABEL_37;
    if ( time - botData->botInfo.traverseStartTime > 500 )
    {
      Bot_TraversalClear(&botData->botInfo);
      Bot_ResumeScriptGoal(botData);
      traversal = botData->botInfo.traversal;
      time = level.time;
    }
    if ( (traversal & 0x8000) != 0 )
    {
LABEL_37:
      if ( time - botData->botInfo.lastTimeOnLadder > 750 )
      {
        Bot_TraversalClear(&botData->botInfo);
        Bot_ResumeScriptGoal(botData);
      }
    }
    return 1i64;
  }
  if ( (traversal & 0x8000) != 0 )
  {
    if ( level.time - botData->botInfo.traverseEndTime < 400 )
    {
      Bot_SetMovementAlongNegotiation(botData, cmd);
      return 1i64;
    }
    botData->botInfo.traversal = traversal & 0xFFFF7FFF;
    botData->botInfo.pNavigator->ClearPath(botData->botInfo.pNavigator);
  }
  return 0i64;
}

/*
==============
Bot_UpdateLookAtPoint
==============
*/
__int64 Bot_UpdateLookAtPoint(bot_data_t *botData, int minPriority, vec3_t *viewAnglesOut)
{
  int lookAtTime; 
  float v7; 
  float v8; 
  __int128 v9; 
  float v10; 
  vec3_t vPos; 
  vec3_t vec; 
  vec3_t vEyePosOut; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11927, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( botData->botInfo.lookAtType < minPriority )
    return 0i64;
  lookAtTime = botData->botInfo.lookAtTime;
  vPos.v[0] = 0.0;
  vPos.v[1] = 0.0;
  vPos.v[2] = 0.0;
  vec.v[0] = 0.0;
  vec.v[1] = 0.0;
  vec.v[2] = 0.0;
  if ( level.time > lookAtTime )
    return 0i64;
  if ( botData->botInfo.lookAtPoint.v[0] == 0.0 && botData->botInfo.lookAtPoint.v[1] == 0.0 && botData->botInfo.lookAtPoint.v[2] == 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11945, ASSERT_TYPE_ASSERT, "( Vec3NotZero( botInfo->lookAtPoint ) )", (const char *)&queryFormat, "Vec3NotZero( botInfo->lookAtPoint )") )
    __debugbreak();
  if ( !Bot_ShouldLookAtPoint(botData) )
    return 0i64;
  Sentient_GetEyePosition(botData->botInfo.sentient, &vEyePosOut);
  Bot_PredictPosition(botData->botInfo.ent, botData, &vEyePosOut, &vPos);
  v7 = botData->botInfo.lookAtPoint.v[0] - vPos.v[0];
  v9 = LODWORD(botData->botInfo.lookAtPoint.v[1]);
  v8 = botData->botInfo.lookAtPoint.v[1] - vPos.v[1];
  v10 = botData->botInfo.lookAtPoint.v[2] - vPos.v[2];
  *(float *)&v9 = fsqrt((float)((float)(v8 * v8) + (float)(v7 * v7)) + (float)(v10 * v10));
  _XMM4 = v9;
  __asm
  {
    vcmpless xmm0, xmm4, cs:__real@80000000
    vblendvps xmm0, xmm4, xmm1, xmm0
  }
  vec.v[0] = v7 * (float)(1.0 / *(float *)&_XMM0);
  vec.v[2] = v10 * (float)(1.0 / *(float *)&_XMM0);
  vec.v[1] = v8 * (float)(1.0 / *(float *)&_XMM0);
  vectoangles(&vec, viewAnglesOut);
  if ( botData->botInfo.lookAtType <= BOT_LOOK_SCRIPT_SEEK )
    Bot_ApplyTwitchVectors(&botData->botInfo, NULL, viewAnglesOut);
  botData->botDebugData.flags |= 2u;
  return 1i64;
}

/*
==============
Bot_UpdateLostEnemyPath
==============
*/
__int64 Bot_UpdateLostEnemyPath(bot_data_t *botData)
{
  $3396140AF3A78F7FCD1D73807E505015 *v2; 
  unsigned int v3; 
  unsigned int PathToGoalInternal; 
  gentity_s *v5; 
  int v6; 
  int v7; 
  pathnode_t *LastKnownEntNearestNode; 
  float v9; 
  float v10; 
  float v11; 
  float v12; 
  float v13; 
  gentity_s *ent; 
  bot_mem_event_t *v15; 
  BOOL v16; 
  int type; 
  bool v18; 
  const bitarray<224> *AllCombatTeamFlags; 
  double v20; 
  unsigned int v21; 
  unsigned int v22; 
  unsigned int v23; 
  int ClosestCharacterList; 
  __int64 v25; 
  const gentity_s *v26; 
  bot_data_t *EntityData; 
  bot_difficulty_t Difficulty; 
  bool v29; 
  bot_difficulty_t v30; 
  unsigned __int16 updated; 
  pathnode_t *v32; 
  bool v33; 
  const char *v34; 
  unsigned int number; 
  unsigned __int16 *i; 
  char *fmt; 
  __int64 ignoreNodesBehind; 
  __int64 mode; 
  int LastKnownEntPosAndTime; 
  vec3_t targetPos; 
  vec3_t targetDirection; 
  bitarray<224> result; 
  vec3_t pos; 
  bot_mem_iterator_t memIt; 
  gentity_s *entity[5]; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9598, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v2 = &botData->8;
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9599, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !v2->botInfo.ent->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9600, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent->sentient )", (const char *)&queryFormat, "botData->botInfo.ent->sentient") )
    __debugbreak();
  v3 = 0;
  PathToGoalInternal = 0;
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
    v5 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
  else
    v5 = NULL;
  LastKnownEntPosAndTime = 0;
  if ( (botData->botInfo.flags & 0x400000) == 0 && (botData->botInfo.scriptFlags & 0x800) != 0 || (botData->botInfo.scriptFlags & 0x200000) != 0 || !SV_BotRequirePathnodes(botData) )
    return 0i64;
  if ( !v5 )
    goto LABEL_31;
  if ( !v5->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9635, ASSERT_TYPE_ASSERT, "( enemy->sentient )", (const char *)&queryFormat, "enemy->sentient") )
    __debugbreak();
  if ( Sentient_IsAerial(v5->sentient) || Bot_IsStationaryEnt(v5) )
    return 0i64;
  LastKnownEntPosAndTime = Bot_GetLastKnownEntPosAndTime(botData, v5, &targetPos);
  if ( LastKnownEntPosAndTime <= 0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9644, ASSERT_TYPE_ASSERT, "( lastEnemyKnownTime > 0 )", (const char *)&queryFormat, "lastEnemyKnownTime > 0") )
    __debugbreak();
  if ( botData->botInfo.enemyTrack.lastEnemyEntNum != v5->s.number && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9645, ASSERT_TYPE_ASSERT, "( botInfo->enemyTrack.lastEnemyEntNum == enemy->s.number )", (const char *)&queryFormat, "botInfo->enemyTrack.lastEnemyEntNum == enemy->s.number") )
    __debugbreak();
  if ( Bot_CanSeeEnemy(botData) || (v6 = 1, Bot_CanSeeEnemyThroughWall(botData)) )
LABEL_31:
    v6 = 0;
  if ( v5 || (v7 = 1, !botData->botInfo.currentAISearch.currentNodeCount) )
    v7 = 0;
  if ( v6 )
  {
    if ( botData->botInfo.currentAISearch.currentNodeCount && botData->botInfo.currentAISearch.mode == AI_SEARCH_THOROUGH && !(unsigned int)Bot_CurrentEnemyIsHighlyThreatening(botData) )
      botData->botInfo.currentAISearch.mode = AI_SEARCH_QUICK;
  }
  else if ( !v7 )
  {
    return PathToGoalInternal;
  }
  if ( !v6 || botData->botInfo.currentAISearch.currentNodeCount && (float)((float)((float)((float)(targetPos.v[1] - botData->botInfo.currentAISearch.searchOrigin.v[1]) * (float)(targetPos.v[1] - botData->botInfo.currentAISearch.searchOrigin.v[1])) + (float)((float)(targetPos.v[0] - botData->botInfo.currentAISearch.searchOrigin.v[0]) * (float)(targetPos.v[0] - botData->botInfo.currentAISearch.searchOrigin.v[0]))) + (float)((float)(targetPos.v[2] - botData->botInfo.currentAISearch.searchOrigin.v[2]) * (float)(targetPos.v[2] - botData->botInfo.currentAISearch.searchOrigin.v[2]))) <= 65536.0 || !Bot_CanReactEnemy(botData) )
    goto LABEL_59;
  LastKnownEntNearestNode = Bot_GetLastKnownEntNearestNode(botData, v5);
  if ( !LastKnownEntNearestNode )
  {
    LastKnownEntNearestNode = Path_NearestNodeByDistanceOnly(&targetPos, 4000.0);
    if ( !LastKnownEntNearestNode )
      return 0i64;
  }
  v9 = targetPos.v[1];
  botData->botInfo.currentAISearch.searchOrigin.v[0] = targetPos.v[0];
  botData->botInfo.currentAISearch.searchOrigin.v[2] = targetPos.v[2];
  botData->botInfo.currentAISearch.searchOrigin.v[1] = v9;
  v10 = botData->botInfo.enemyTrack.lastVelocity.v[0];
  v11 = botData->botInfo.enemyTrack.lastVelocity.v[1];
  v12 = botData->botInfo.enemyTrack.lastVelocity.v[2];
  targetDirection.v[0] = v10;
  targetDirection.v[1] = v11;
  targetDirection.v[2] = v12;
  v13 = fsqrt((float)((float)(v11 * v11) + (float)(v10 * v10)) + (float)(v12 * v12));
  botData->botInfo.currentAISearch.nodeNearestSearchOrigin = LastKnownEntNearestNode;
  if ( v13 < 0.1 )
  {
    ent = v2->botInfo.ent;
    targetDirection.v[0] = targetPos.v[0] - v2->botInfo.ent->r.currentOrigin.v[0];
    targetDirection.v[1] = targetPos.v[1] - ent->r.currentOrigin.v[1];
    targetDirection.v[2] = targetPos.v[2] - ent->r.currentOrigin.v[2];
  }
  memset_0(&memIt, -1, 0xF8ui64);
  memset_0(memIt.stopIndex, -1, sizeof(memIt.stopIndex));
  v15 = Bot_MemoryIterate(botData, level.time, 0, &memIt);
  if ( !v15 )
    goto LABEL_52;
  while ( v15->type != BOT_MEM_DEATH )
  {
    v15 = Bot_MemoryIterate(botData, level.time, 0, &memIt);
    if ( !v15 )
      goto LABEL_52;
  }
  if ( (v15->flags & 1) != 0 && (float)((float)((float)((float)(targetPos.v[1] - v15->location1.v[1]) * (float)(targetPos.v[1] - v15->location1.v[1])) + (float)((float)(targetPos.v[0] - v15->location1.v[0]) * (float)(targetPos.v[0] - v15->location1.v[0]))) + (float)((float)(targetPos.v[2] - v15->location1.v[2]) * (float)(targetPos.v[2] - v15->location1.v[2]))) < 250000.0 )
    v16 = 1;
  else
LABEL_52:
    v16 = Bot_CurrentEnemyIsHighlyThreatening(botData) != 0;
  botData->botInfo.currentAISearch.highestPriorityDistScalar = 0.5;
  botData->botInfo.currentAISearch.maxSearchDistScalar = 0.75;
  AI_BuildSearchArea(&botData->botInfo.currentAISearch, &targetDirection, v13, 5000, &botData->botInfo, 1, (ai_search_type_t)v16);
  type = botData->botInfo.scriptGoal.type;
  botData->botInfo.aiSearchScriptGoalType = type;
  if ( type )
  {
    Bot_GetScriptGoal(botData, &botData->botInfo.aiSearchScriptGoalPos);
  }
  else
  {
    *(_QWORD *)((char *)&botData->scriptedAgentInfo + 29196) = 0i64;
    botData->botInfo.aiSearchScriptGoalPos.v[2] = 0.0;
  }
LABEL_59:
  if ( level.teammode == TEAMMODE_FFA )
  {
    v18 = Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80);
    if ( Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) )
      AllCombatTeamFlags = Com_TeamsSP_GetAllCombatTeamFlags();
    else
      AllCombatTeamFlags = Com_TeamsMP_GetAllTeamFlags();
    v20 = *(double *)&AllCombatTeamFlags->array[4];
    v21 = AllCombatTeamFlags->array[6] & 0xFFEFFFFF;
    *(_OWORD *)result.array = *(_OWORD *)AllCombatTeamFlags->array;
    v22 = result.array[0];
    *(double *)&result.array[4] = v20;
    if ( v18 )
      v22 = result.array[0] & 0xF7FFFFFF;
    v23 = v21 & 0xFF9FFFFF;
  }
  else
  {
    Com_Teams_GetEnemyTeamFlags(&result, v2->botInfo.ent->sentient->eTeam);
    v23 = result.array[6];
    v22 = result.array[0];
  }
  result.array[1] = ~result.array[1];
  result.array[2] = ~result.array[2];
  result.array[3] = ~result.array[3];
  result.array[4] = ~result.array[4];
  result.array[5] = ~result.array[5];
  result.array[0] = ~v22;
  result.array[6] = ~v23;
  ClosestCharacterList = Bot_GetClosestCharacterList(v2->botInfo.ent, &v2->botInfo.ent->r.currentOrigin, 500.0, 1, 0, 1, 1, &result, entity, 5);
  *(_QWORD *)pos.v = ClosestCharacterList;
  if ( ClosestCharacterList > 0 )
  {
    v25 = 0i64;
    do
    {
      v26 = entity[v25];
      if ( !v26 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9747, ASSERT_TYPE_ASSERT, "( currentClosestClient )", (const char *)&queryFormat, "currentClosestClient") )
        __debugbreak();
      EntityData = Bot_GetEntityData(v26);
      if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9749, ASSERT_TYPE_ASSERT, "( currentClosestClientBotData )", (const char *)&queryFormat, "currentClosestClientBotData") )
        __debugbreak();
      Difficulty = Bot_GetDifficulty(botData);
      AI_UpdateSearchArea(&botData->botInfo.currentAISearch, &EntityData->botInfo, 0, 0, Difficulty == BOT_DIFFICULTY_RECRUIT);
      ++v25;
    }
    while ( v25 < *(__int64 *)pos.v );
    v2 = &botData->8;
    v3 = 0;
    PathToGoalInternal = 0;
  }
  v29 = v2->botInfo.currentAISearch.mode == AI_SEARCH_THOROUGH && (!v5 || level.time - LastKnownEntPosAndTime > 5000);
  v30 = Bot_GetDifficulty(botData);
  updated = AI_UpdateSearchArea(&v2->botInfo.currentAISearch, &v2->botInfo, v29, 1, v30 == BOT_DIFFICULTY_RECRUIT);
  if ( updated == 0xFFFF )
    goto LABEL_91;
  v32 = Path_ConvertIndexToNode(updated);
  pathnode_t::GetPos(v32, &pos);
  PathToGoalInternal = 1;
  if ( Bot_PointInGoal(botData, 5.0, &pos) )
    goto LABEL_91;
  v33 = v2->botInfo.currentAISearch.mode == AI_SEARCH_THOROUGH;
  v34 = "tsearch";
  memIt.index[0] = 0;
  if ( !v33 )
    v34 = "search";
  if ( v5 )
    number = v5->s.number;
  else
    number = -1;
  LODWORD(fmt) = updated;
  j_sprintf(memIt.index, "%s %i %i", v34, number, fmt);
  PathToGoalInternal = Bot_GetPathToGoalInternal(botData, &pos, 5.0, memIt.index);
  if ( PathToGoalInternal )
  {
    GScr_Notify(v2->botInfo.ent, scr_const.path_enemy, 0);
LABEL_91:
    if ( !v2->botInfo.currentAISearch.currentNodeCount || !PathToGoalInternal )
    {
      botData->botInfo.currentAISearch.currentNodeCount = 0;
      Bot_StopPursuingEnemy(botData);
      return 0;
    }
    return PathToGoalInternal;
  }
  if ( (v2->botInfo.flags & 0x400000) == 0 )
    goto LABEL_91;
  if ( v2->botInfo.currentAISearch.currentNodeCount )
  {
    for ( i = &v2->botInfo.currentAISearch.nodes[0].nodeIndex; ; i += 3 )
    {
      if ( v3 >= 0x80 )
      {
        LODWORD(mode) = 128;
        LODWORD(ignoreNodesBehind) = v3;
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9811, ASSERT_TYPE_ASSERT, "(unsigned)( searchNodesIndex ) < (unsigned)( 128 )", "searchNodesIndex doesn't index PATH_MAX_AI_SEARCH_NODES\n\t%i not in [0, %i)", ignoreNodesBehind, mode) )
          __debugbreak();
      }
      if ( Path_ConvertIndexToNode(*i) == v32 )
        break;
      if ( (int)++v3 >= v2->botInfo.currentAISearch.currentNodeCount )
        return 1i64;
    }
    v2->botInfo.currentAISearch.nodes[v3].framesVisible = 7;
  }
  return 1i64;
}

/*
==============
Bot_UpdateMantleJump
==============
*/
void Bot_UpdateMantleJump(bot_data_t *botData, usercmd_s *cmd)
{
  playerState_s *playerState; 
  int v5; 
  BOOL v6; 
  bool hasMantleHint; 
  float v8; 
  int traverseJumpTime; 
  vec3_t forward; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16182, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16183, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState )", (const char *)&queryFormat, "botData->botInfo.playerState") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16186, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  if ( !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&playerState->pm_flags, ACTIVE, 0x1Au) )
  {
    v5 = botData->botInfo.traversal & 0x1F;
    v6 = !Bot_ShouldFireOnEnemyInSight(botData) && cmd->forwardmove > 100;
    hasMantleHint = botData->botInfo.hasMantleHint;
    if ( !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 6u) && hasMantleHint && (v5 || v6) )
    {
      AngleVectors(&playerState->viewangles, &forward, NULL, NULL);
      v8 = (float)((float)(forward.v[1] * playerState->velocity.v[1]) + (float)(forward.v[0] * playerState->velocity.v[0])) + (float)(forward.v[2] * playerState->velocity.v[2]);
      if ( v5 || v8 >= 0.0 && v8 < 5.0 && (LOBYTE(botData->scriptedAgentInfo.blackboard.m_ShootParams.m_Pos.v[0]) & 0x10) == 0 )
      {
        cmd->buttons |= 0x100ui64;
        traverseJumpTime = level.time + 500;
        if ( botData->botInfo.traverseJumpTime > level.time + 500 )
          traverseJumpTime = botData->botInfo.traverseJumpTime;
        botData->botInfo.traverseJumpTime = traverseJumpTime;
      }
    }
  }
}

/*
==============
Bot_UpdateMeleeCharge
==============
*/
void Bot_UpdateMeleeCharge(bot_data_t *botData, usercmd_s *cmd)
{
  gentity_s *ent; 
  AIBotInterface *m_pAI; 
  GHandler *Handler; 
  playerState_s *playerState; 
  __int128 v8; 
  Weapon *ViewmodelWeapon; 
  playerState_s *gameTime; 
  GWeaponMap *Instance; 
  bool IsThirdPersonMode; 
  playerState_s *v15; 
  playerState_s *v16; 
  GWeaponMap *v17; 
  GHandler *v18; 
  AIBotWrapper v19; 
  AimOutput output; 
  AimAssistSharedPlayerState aaSharedPS; 
  AimInput input; 
  WorldUpReferenceFrame refFrame; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8890, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8891, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  AICommonInterface::AICommonInterface(&v19.m_botInterface);
  v19.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v19.m_botAgentInterface);
  ent = botData->botInfo.ent;
  v19.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v19.m_pAI = NULL;
  AIBotWrapper::Setup(&v19, ent);
  m_pAI = v19.m_pAI;
  if ( !v19.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8904, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  WorldUpReferenceFrame::WorldUpReferenceFrame(&refFrame);
  Handler = GHandler::getHandler();
  WorldUpReferenceFrame::Init(&refFrame, botData->botInfo.playerState, Handler);
  input.buttons = cmd->buttons;
  input.localClientNum = LOCAL_CLIENT_INVALID;
  if ( !level.frameDuration && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_level_locals.h", 349, ASSERT_TYPE_ASSERT, "(level.frameDuration)", "%s\n\tAccessing frame duration before it's been set", "level.frameDuration") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  input.meleeChargeEnt = 2047;
  output.meleeChargeEnt = 2047;
  v8 = 0i64;
  *(float *)&v8 = (float)level.frameDuration * 0.001;
  _XMM0 = v8;
  __asm { vmaxss  xmm1, xmm0, cs:__real@3a83126f }
  input.deltaTime = *(float *)&_XMM1;
  aaSharedPS.weaponState = playerState->weapState[0].weaponState;
  aaSharedPS.meleeCount = playerState->weapState[0].meleeHitCount;
  aaSharedPS.meleeChargeEnt = playerState->meleeChargeEnt;
  ViewmodelWeapon = (Weapon *)Bot_Weap_GetViewmodelWeapon(playerState);
  gameTime = botData->botInfo.playerState;
  aaSharedPS.weapon = *ViewmodelWeapon;
  aaSharedPS.weapFlags = gameTime->weapCommon.weapFlags;
  Instance = GWeaponMap::GetInstance();
  IsThirdPersonMode = BG_IsThirdPersonMode(Instance, gameTime);
  v15 = botData->botInfo.playerState;
  aaSharedPS.isThirdPerson = IsThirdPersonMode;
  aaSharedPS.pm_flags = v15->pm_flags;
  botData->botInfo.aaSharedGlob.viewAngles.v[0] = v15->viewangles.v[0];
  botData->botInfo.aaSharedGlob.viewAngles.v[1] = v15->viewangles.v[1];
  botData->botInfo.aaSharedGlob.viewAngles.v[2] = v15->viewangles.v[2];
  m_pAI->GetEyePosition(m_pAI, &botData->botInfo.aaSharedGlob.eyeOrigin);
  LODWORD(gameTime) = level.time;
  v16 = botData->botInfo.playerState;
  v17 = GWeaponMap::GetInstance();
  v18 = GHandler::getHandler();
  BG_AimAssist_ApplyAutoMelee(v18, &input, &output, v17, v16, &botData->botInfo.aaSharedGlob, &aaSharedPS, &refFrame, (const int)gameTime);
  BG_SetMeleeChargeCmd(&output, cmd);
  botData->botInfo.aaSharedGlob.prevButtons = input.buttons;
}

/*
==============
Bot_UpdateMemoryAwareness
==============
*/
void Bot_UpdateMemoryAwareness(bot_data_t *botData)
{
  bot_mem_event_t *i; 
  __int64 entNum; 
  __int64 v4; 
  BOOL v5; 
  __int64 v6; 
  __int64 v7; 
  gentity_s *v8; 
  unsigned __int8 flags; 
  const sentient_s *sentient; 
  sentient_info_t *SentientInfo; 
  unsigned __int8 lastKnownReason; 
  const pathnode_t *v13; 
  __int64 v14; 
  __int64 v15; 
  bot_mem_iterator_t memIt; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6648, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6649, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6650, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
    __debugbreak();
  memset_0(&memIt, -1, 0xF8ui64);
  memset_0(memIt.stopIndex, -1, sizeof(memIt.stopIndex));
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6662, ASSERT_TYPE_ASSERT, "(botInfo->ent)", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  for ( i = Bot_MemoryIterate(botData, level.time, level.time - 30000, &memIt); i; i = Bot_MemoryIterate(botData, level.time, level.time - 30000, &memIt) )
  {
    entNum = i->entNum;
    v4 = entNum;
    v5 = (entNum & 0x8000u) == 0i64 && (int)entNum < level.num_entities;
    if ( i->type == BOT_MEM_DEATH && v5 )
    {
      if ( (unsigned int)v4 >= 0x800 )
      {
        LODWORD(v15) = 2048;
        LODWORD(v14) = v4;
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 188, ASSERT_TYPE_ASSERT, "(unsigned)( entityIndex ) < (unsigned)( ( 2048 ) )", "entityIndex doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v14, v15) )
          __debugbreak();
      }
      if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 189, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
        __debugbreak();
      v6 = v4;
      v7 = i->entNum;
      v8 = &g_entities[v6];
      if ( (unsigned int)v7 >= 0x800 )
      {
        LODWORD(v15) = 2048;
        LODWORD(v14) = i->entNum;
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 207, ASSERT_TYPE_ASSERT, "(unsigned)( entityIndex ) < (unsigned)( ( 2048 ) )", "entityIndex doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v14, v15) )
          __debugbreak();
      }
      if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 208, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
        __debugbreak();
      if ( g_entities[v7].r.isInUse != g_entityIsInUse[v7] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 209, ASSERT_TYPE_ASSERT, "( g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex] )", (const char *)&queryFormat, "g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex]") )
        __debugbreak();
      if ( !g_entityIsInUse[v7] || v8->health <= 0 )
        i->flags |= 6u;
      flags = i->flags;
      if ( (flags & 4) == 0 && (flags & 1) != 0 )
      {
        if ( G_IsEntityInUse(i->entNum) )
        {
          sentient = v8->sentient;
          if ( sentient )
          {
            if ( (SentientInfo = Sentient_GetSentientInfo(botData->botInfo.sentient, sentient), SentientInfo->lastKnownPosTime > i->time) && ((lastKnownReason = SentientInfo->lastKnownReason, lastKnownReason == 12) || lastKnownReason == 25) || Bot_IsFacingPosition(botData, &i->location1) && (!Path_NodeValid(i->nodeIndex) || (v13 = Path_ConvertIndexToNode(i->nodeIndex)) == NULL || Bot_CanSeeNode(botData, v13)) )
              i->flags |= 4u;
          }
        }
      }
    }
  }
}

/*
==============
Bot_UpdateMove
==============
*/
void Bot_UpdateMove(bot_data_t *botData, usercmd_s *cmd)
{
  int CanSeeEnemy; 
  int v5; 
  const gentity_s *v6; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13340, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13341, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  *(_WORD *)cmd->remoteControlAngles = 0;
  if ( !Bot_UpdateMove_Frozen(botData, cmd) && !Bot_UpdateMove_Scripted(botData, cmd) )
  {
    if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12760, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
      __debugbreak();
    if ( Bot_IsUsingTurret(botData) )
      goto LABEL_49;
    if ( Bot_UpdateMove_OffPathGrid(botData, cmd) )
      return;
    if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12780, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
      __debugbreak();
    CanSeeEnemy = Bot_CanSeeEnemy(botData);
    if ( botData == (bot_data_t *)-8i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13725, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
      __debugbreak();
    v5 = Bot_NavPathExists(&botData->botInfo);
    if ( Bot_EntIsInLastStand(botData->botInfo.ent) || !CanSeeEnemy && !v5 )
      goto LABEL_49;
    if ( Bot_Weap_HasLauncherThatNeedsAimAtEnemy(botData) && Bot_IsAwareOfEnemy(botData) )
      goto LABEL_49;
    if ( Bot_UpdateMove_HoldPathGoal(botData, cmd) || Bot_GetHidingFromEntity(botData) && (botData->botInfo.flags & 0x1000) != 0 && Bot_UpdateMove_Pathing(botData, cmd) )
      return;
    if ( (LOBYTE(botData->scriptedAgentInfo.blackboard.m_ShootParams.m_Pos.v[0]) & 0x10) != 0 && !Bot_EnemyIsAttackingMe(botData, 200) )
    {
LABEL_49:
      *(_WORD *)&cmd->forwardmove = 0;
      return;
    }
    if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
      v6 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
    else
      v6 = NULL;
    if ( v6 )
    {
      if ( !Bot_EntityIsConsideredDead(v6) )
      {
        if ( botData->botInfo.enemyTrack.lastDist < 32.0 )
        {
          *(_WORD *)&cmd->forwardmove = 129;
          return;
        }
        if ( (float)(Bot_ActualMeleeRange(botData) * 0.5) > botData->botInfo.enemyTrack.lastDist )
        {
          cmd->forwardmove = 0;
          if ( Bot_IsStationaryEnt(v6) )
            cmd->rightmove = 0;
          else
            cmd->rightmove = 127 * botData->botInfo.combatStrafeDir;
          return;
        }
      }
      if ( Bot_EnemyPreferMelee(botData) && Bot_PathExists(&botData->botInfo) && !Bot_IsAtPathEnd(botData, 0.0) )
      {
        Bot_StrafeOnPath(botData, cmd, 127);
        return;
      }
    }
    if ( !Bot_UpdateMove_CombatWeapon(botData, cmd) && !Bot_UpdateMove_Pathing(botData, cmd) )
      *(_WORD *)&cmd->forwardmove = 127;
  }
}

/*
==============
Bot_UpdateMove_CombatWeapon
==============
*/
__int64 Bot_UpdateMove_CombatWeapon(bot_data_t *botData, usercmd_s *cmd)
{
  playerState_s *playerState; 
  int CanFireOnEnemy; 
  const gentity_s *v6; 
  int v8; 
  gentity_s *Enemy; 
  int v10; 
  int v11; 
  const pathnode_t *v12; 
  bool v13; 
  const bitarray<224> *AllCombatTeamFlags; 
  double v15; 
  unsigned int v16; 
  unsigned int v17; 
  unsigned int v18; 
  gentity_s *v19; 
  gentity_s *ent; 
  float v21; 
  float v22; 
  float v23; 
  gentity_s *v24; 
  float v25; 
  float v26; 
  float v27; 
  int WeaponStateForViewWeapon; 
  int v29; 
  int v30; 
  Weapon *weapon; 
  gentity_s *results; 
  bitarray<224> result; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13004, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13005, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13008, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  weapon = (Weapon *)Bot_Weap_GetViewmodelWeapon(playerState);
  CanFireOnEnemy = Bot_CanSeeAndCanFireOnEnemy(botData);
  v30 = Bot_EnemyFacesBot(botData);
  if ( Bot_GetCurrentNumDebugGoals() > 0 )
    return 0i64;
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
  {
    v6 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
    if ( v6 )
    {
      if ( Bot_IsPointInRangeOfHardwareEntExplosion(v6, &botData->botInfo.ent->r.currentOrigin) )
      {
        cmd->forwardmove = -127;
        return 1i64;
      }
    }
  }
  if ( botData->botInfo.scriptGoal.type >= BOT_SCR_GOAL_CRITICAL || Bot_CloseToObjectiveGoal(botData) || !CanFireOnEnemy || botData->botInfo.navigation.isInBadPlace )
    return 0i64;
  v8 = Bot_PathExists(&botData->botInfo);
  Enemy = Bot_GetEnemy(botData);
  if ( !Enemy && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13040, ASSERT_TYPE_ASSERT, "( enemy )", (const char *)&queryFormat, "enemy") )
    __debugbreak();
  if ( !Enemy->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13041, ASSERT_TYPE_ASSERT, "( enemy->sentient )", (const char *)&queryFormat, "enemy->sentient") )
    __debugbreak();
  *(_WORD *)&cmd->forwardmove = 0;
  v10 = 0;
  if ( !Bot_ShouldCombatMove(botData) )
    return 1i64;
  if ( !Bot_ShouldRushEnemy(botData) )
  {
    if ( Bot_Weap_Ammo(playerState, weapon) )
    {
      if ( Bot_EntityUsingRiotShield(Enemy, 0) && Bot_IsFireFromHipRange(botData) )
      {
        cmd->forwardmove = -127;
        if ( Bot_CheckForLedgeFall(botData, cmd) )
        {
          cmd->forwardmove = 0;
          return 1i64;
        }
        return 1i64;
      }
      v11 = botData->botInfo.flags & 0x400000;
      if ( !Bot_IsInRangeOfEnemy(botData) )
      {
        if ( v8 )
        {
          Bot_StrafeOnPath(botData, cmd, 127);
          goto LABEL_40;
        }
        if ( v11 )
        {
LABEL_39:
          cmd->forwardmove = 127;
          goto LABEL_40;
        }
      }
      if ( botData->botInfo.enemyTrack.lastDist > 200.0 )
      {
        if ( level.teammode == TEAMMODE_FFA )
        {
          v13 = Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80);
          if ( Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) )
            AllCombatTeamFlags = Com_TeamsSP_GetAllCombatTeamFlags();
          else
            AllCombatTeamFlags = Com_TeamsMP_GetAllTeamFlags();
          v15 = *(double *)&AllCombatTeamFlags->array[4];
          v16 = AllCombatTeamFlags->array[6] & 0xFFEFFFFF;
          *(_OWORD *)result.array = *(_OWORD *)AllCombatTeamFlags->array;
          v17 = result.array[0];
          *(double *)&result.array[4] = v15;
          if ( v13 )
            v17 = result.array[0] & 0xF7FFFFFF;
          v18 = v16 & 0xFF9FFFFF;
        }
        else
        {
          Com_Teams_GetEnemyTeamFlags(&result, botData->botInfo.ent->sentient->eTeam);
          v18 = result.array[6];
          v17 = result.array[0];
        }
        result.array[1] = ~result.array[1];
        result.array[2] = ~result.array[2];
        result.array[3] = ~result.array[3];
        result.array[4] = ~result.array[4];
        result.array[5] = ~result.array[5];
        result.array[0] = ~v17;
        result.array[6] = ~v18;
        if ( Bot_GetClosestCharacterList(botData->botInfo.ent, &botData->botInfo.ent->r.currentOrigin, 0.0, 1, 0, 1, 0, &result, &results, 1) == 1 )
        {
          v19 = results;
          if ( results )
          {
            ent = botData->botInfo.ent;
            v21 = ent->r.currentOrigin.v[0] - results->r.currentOrigin.v[0];
            v22 = ent->r.currentOrigin.v[1] - results->r.currentOrigin.v[1];
            v23 = ent->r.currentOrigin.v[2] - results->r.currentOrigin.v[2];
            if ( (float)((float)((float)(v22 * v22) + (float)(v21 * v21)) + (float)(v23 * v23)) < 22500.0 )
            {
              v24 = Bot_GetEnemy(botData);
              v25 = v24->r.currentOrigin.v[0] - v19->r.currentOrigin.v[0];
              v26 = v24->r.currentOrigin.v[1] - v19->r.currentOrigin.v[1];
              v27 = v24->r.currentOrigin.v[2] - v19->r.currentOrigin.v[2];
              if ( (float)((float)((float)(v26 * v26) + (float)(v25 * v25)) + (float)(v27 * v27)) >= (float)(botData->botInfo.enemyTrack.lastDist * botData->botInfo.enemyTrack.lastDist) )
                goto LABEL_39;
              cmd->forwardmove = -127;
              v10 = 1;
            }
          }
        }
      }
LABEL_40:
      if ( Bot_ShouldCombatMoveEvade(botData) )
      {
        v12 = Sentient_NearestNode(botData->botInfo.sentient);
        if ( (botData->botInfo.flags & 0x2000) != 0 && v12 && Path_NodeExposedToPoint(v12, &Enemy->r.currentOrigin, 4) && Bot_PathExists(&botData->botInfo) )
        {
          Bot_StrafeOnPath(botData, cmd, 127);
        }
        else
        {
          v10 = 1;
          cmd->rightmove = 127 * botData->botInfo.combatStrafeDir;
        }
      }
      WeaponStateForViewWeapon = Bot_Weap_GetWeaponStateForViewWeapon(botData->botInfo.playerState);
      if ( v30 && Bot_IsReloading(botData) && (unsigned int)(WeaponStateForViewWeapon - 22) > 2 )
      {
        v29 = Bot_Weap_ReloadTime(playerState, weapon);
        if ( v29 < 500 )
          v29 = 500;
        if ( botData->botMatchData.strategyLevel < 1.0 || level.time - botData->botInfo.hideFromTime <= v29 + 1000 )
        {
          if ( (botData->botInfo.flags & 0x1000) == 0 )
          {
            cmd->forwardmove = -127;
            goto LABEL_71;
          }
        }
        else
        {
          Bot_HideFromEntity(botData, Enemy, 300.0, v29);
        }
      }
      if ( !v10 )
        return 1i64;
LABEL_71:
      if ( Bot_CheckForLedgeFall(botData, cmd) )
        *(_WORD *)&cmd->forwardmove = 0;
      return 1i64;
    }
    return 0i64;
  }
  if ( Bot_PathExists(&botData->botInfo) )
    Bot_StrafeOnPath(botData, cmd, 127);
  else
    cmd->forwardmove = 127;
  return 1i64;
}

/*
==============
Bot_UpdateMove_Frozen
==============
*/
__int64 Bot_UpdateMove_Frozen(bot_data_t *botData, usercmd_s *cmd)
{
  gentity_s *ent; 
  const dvar_t *v7; 
  const dvar_t *v8; 
  bool v9; 
  gentity_s *v10; 
  const vec4_t *v11; 
  vec3_t dir; 
  vec3_t center; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12544, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12545, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12549, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  if ( level.time >= botData->botInfo.movementFrozenUntil )
    return 0i64;
  *(_WORD *)&cmd->forwardmove = 0;
  if ( botData->botInfo.scriptGoal.type <= BOT_SCR_GOAL_HUNT && !EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) && (botData->botInfo.anglesWhenFrozen.v[0] != 0.0 || botData->botInfo.anglesWhenFrozen.v[1] != 0.0 || botData->botInfo.anglesWhenFrozen.v[2] != 0.0) )
  {
    ent = botData->botInfo.ent;
    _XMM1 = 0i64;
    __asm { vroundss xmm4, xmm1, xmm2, 1 }
    if ( COERCE_FLOAT(COERCE_UNSIGNED_INT((float)((float)((float)(botData->botInfo.anglesWhenFrozen.v[1] - ent->r.currentAngles.v[1]) * 0.0027777778) - *(float *)&_XMM4) * 360.0) & _xmm) > 130.0 )
    {
      Bot_BadPath(ent);
      botData->botInfo.movementFrozenUntil = level.time;
    }
  }
  v7 = DVARINT_bot_DrawDebug;
  if ( !DVARINT_bot_DrawDebug && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebug") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v7);
  if ( v7->current.integer == 1 )
    goto LABEL_36;
  v8 = DVARINT_bot_DrawDebug;
  if ( !DVARINT_bot_DrawDebug && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebug") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v8);
  if ( v8->current.integer == 2 )
  {
LABEL_36:
    if ( Bot_ShouldDrawDebugForBot(botData) )
    {
      v9 = botData->botInfo.scriptGoal.type <= BOT_SCR_GOAL_HUNT;
      v10 = botData->botInfo.ent;
      dir.v[0] = 0.0;
      dir.v[1] = 0.0;
      dir.v[2] = FLOAT_1_0;
      *(_QWORD *)center.v = *(_QWORD *)v10->r.currentOrigin.v;
      center.v[2] = v10->r.currentOrigin.v[2] + 25.0;
      if ( !v9 || EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) || (v11 = &colorOrange, fsqrt((float)((float)(botData->botInfo.anglesWhenFrozen.v[0] * botData->botInfo.anglesWhenFrozen.v[0]) + (float)(botData->botInfo.anglesWhenFrozen.v[1] * botData->botInfo.anglesWhenFrozen.v[1])) + (float)(botData->botInfo.anglesWhenFrozen.v[2] * botData->botInfo.anglesWhenFrozen.v[2])) <= 0.1) )
        v11 = &colorRed;
      G_DebugCircleEx(&center, 50.0, &dir, v11, 1, 0);
    }
  }
  return 1i64;
}

/*
==============
Bot_UpdateMove_HoldPathGoal
==============
*/
__int64 Bot_UpdateMove_HoldPathGoal(bot_data_t *botData, usercmd_s *cmd)
{
  __int128 v2; 
  $3396140AF3A78F7FCD1D73807E505015 *v5; 
  int v6; 
  int v7; 
  playerState_s *playerState; 
  gentity_s *ent; 
  float v10; 
  float v11; 
  __int128 v12; 
  float v16; 
  float v17; 
  int v18; 
  int scriptGoalIdleTime; 
  vec3_t goal; 
  vec3_t forward; 
  vec3_t right; 
  __int128 v24; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12845, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12846, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  v5 = &botData->8;
  if ( botData == (bot_data_t *)-8i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13725, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  v6 = Bot_NavPathExists(&botData->botInfo);
  v7 = Bot_IsAtPathEnd(botData, 0.0);
  if ( !v6 || !v7 )
    return 0i64;
  if ( !v5->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12861, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12863, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  YawVectors(playerState->viewangles.v[1], &forward, &right);
  *(_WORD *)&cmd->forwardmove = 0;
  if ( !Bot_AtScriptGoalNode(botData) )
    return 1i64;
  Bot_GetScriptGoal(botData, &goal);
  Bot_UpdateTwitchVectors(&botData->botInfo, &goal, NULL);
  v12 = LODWORD(goal.v[0]);
  *(float *)&v12 = goal.v[0] + botData->botInfo.twitchOffsetPos.v[0];
  ent = v5->botInfo.ent;
  goal.v[1] = goal.v[1] + botData->botInfo.twitchOffsetPos.v[1];
  goal.v[0] = *(float *)&v12;
  v10 = *(float *)&v12 - ent->r.currentOrigin.v[0];
  v11 = goal.v[1] - ent->r.currentOrigin.v[1];
  *(float *)&v12 = (float)(v10 * v10) + (float)(v11 * v11);
  if ( *(float *)&v12 > 4.0 )
  {
    *(float *)&v12 = fsqrt(*(float *)&v12);
    _XMM2 = v12;
    __asm
    {
      vcmpless xmm0, xmm2, cs:__real@80000000
      vblendvps xmm0, xmm2, xmm1, xmm0
    }
    v16 = v11 * (float)(1.0 / *(float *)&_XMM0);
    v24 = v2;
    v17 = (float)((float)(v16 * right.v[1]) + (float)((float)(v10 * (float)(1.0 / *(float *)&_XMM0)) * right.v[0])) * 32.0;
    cmd->forwardmove = (int)(float)((float)((float)(v16 * forward.v[1]) + (float)((float)(v10 * (float)(1.0 / *(float *)&_XMM0)) * forward.v[0])) * 32.0);
    cmd->rightmove = (int)v17;
  }
  v18 = level.time - botData->botInfo.scriptGoalIdleLast;
  botData->botInfo.scriptGoalIdleLast = level.time;
  if ( v18 > 100 )
  {
    botData->botInfo.scriptGoalIdleTime = 0;
    return 1i64;
  }
  scriptGoalIdleTime = botData->botInfo.scriptGoalIdleTime;
  if ( !scriptGoalIdleTime )
    botData->botInfo.searchLookNext = 0;
  botData->botInfo.scriptGoalIdleTime = v18 + scriptGoalIdleTime;
  return 1i64;
}

/*
==============
Bot_UpdateMove_OffPathGrid
==============
*/
__int64 Bot_UpdateMove_OffPathGrid(bot_data_t *botData, usercmd_s *cmd)
{
  int CanFireOnEnemy; 
  int noPathFoundTime; 
  int v6; 
  int v7; 
  int v8; 
  int IsMovementLocked; 
  playerState_s *playerState; 
  float v11; 
  float v12; 
  const dvar_t *v13; 
  vec3_t *p_currentOrigin; 
  vec3_t end; 
  vec3_t forward; 
  vec3_t right; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12707, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12708, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  CanFireOnEnemy = Bot_CanSeeAndCanFireOnEnemy(botData);
  noPathFoundTime = botData->botInfo.noPathFoundTime;
  v6 = 0;
  v7 = CanFireOnEnemy;
  if ( !noPathFoundTime || (v8 = 1, level.time - noPathFoundTime <= 750) )
    v8 = 0;
  if ( !Bot_NavPathExists(&botData->botInfo) && !Bot_IsOnGround(botData) )
    v6 = 1;
  IsMovementLocked = Bot_IsMovementLocked(botData);
  if ( v7 || IsMovementLocked || !v8 && !v6 )
    return 0i64;
  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12723, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  YawVectors(playerState->viewangles.v[1], &forward, &right);
  v11 = right.v[0];
  v12 = right.v[1];
  cmd->forwardmove = (int)(float)((float)((float)((float)(forward.v[1] * botData->botInfo.strafeDir.v[1]) + (float)(forward.v[0] * botData->botInfo.strafeDir.v[0])) + (float)(forward.v[2] * botData->botInfo.strafeDir.v[2])) * 127.0);
  cmd->rightmove = (int)(float)((float)((float)((float)(v12 * botData->botInfo.strafeDir.v[1]) + (float)(v11 * botData->botInfo.strafeDir.v[0])) + (float)(right.v[2] * botData->botInfo.strafeDir.v[2])) * 127.0);
  v13 = DVARINT_ai_showPaths;
  if ( !DVARINT_ai_showPaths && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "ai_showPaths") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v13);
  if ( v13->current.integer > 0 && Bot_ShouldDrawDebugForBot(botData) )
  {
    if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12737, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
      __debugbreak();
    p_currentOrigin = &botData->botInfo.ent->r.currentOrigin;
    *(_QWORD *)end.v = *(_QWORD *)p_currentOrigin->v;
    end.v[2] = p_currentOrigin->v[2] + 100.0;
    G_DebugLine(p_currentOrigin, &end, &colorYellow, 0);
    G_DebugStar(&end, &colorYellow);
  }
  return 1i64;
}

/*
==============
Bot_UpdateMove_Pathing
==============
*/
__int64 Bot_UpdateMove_Pathing(bot_data_t *botData, usercmd_s *cmd)
{
  $3396140AF3A78F7FCD1D73807E505015 *v4; 
  int v5; 
  int v6; 
  int v7; 
  bool v8; 
  const bitarray<224> *AllCombatTeamFlags; 
  __int128 v10; 
  double v11; 
  unsigned int v12; 
  unsigned int v13; 
  unsigned int v14; 
  __int64 v15; 
  bot_data_t *EntityData; 
  float *p_commandTime; 
  float v18; 
  __int128 v19; 
  float v20; 
  double v24; 
  gentity_s *ent; 
  bitarray<224> result; 
  vec3_t entity; 
  vec3_t center; 
  vec3_t outLookaheadDir; 
  vec3_t v31; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13223, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13224, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  v4 = &botData->8;
  if ( botData == (bot_data_t *)-8i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13725, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  v5 = Bot_NavPathExists(&botData->botInfo);
  v6 = Bot_IsAtPathEnd(botData, 0.0);
  if ( !v5 || v6 )
    return 0i64;
  v7 = 127;
  if ( (*((_BYTE *)&botData->scriptedAgentInfo + 9016) & 1) == 0 && Bot_NearbyBotExists(botData, 400.0, 1) )
  {
    if ( !v4->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13249, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
      __debugbreak();
    if ( level.teammode == TEAMMODE_FFA )
    {
      v8 = Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80);
      if ( Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) )
        AllCombatTeamFlags = Com_TeamsSP_GetAllCombatTeamFlags();
      else
        AllCombatTeamFlags = Com_TeamsMP_GetAllTeamFlags();
      v10 = *(_OWORD *)AllCombatTeamFlags->array;
      v11 = *(double *)&AllCombatTeamFlags->array[4];
      v12 = AllCombatTeamFlags->array[6] & 0xFFEFFFFF;
      *(_OWORD *)result.array = v10;
      v13 = v10;
      *(double *)&result.array[4] = v11;
      if ( v8 )
        v13 = v10 & 0xF7FFFFFF;
      v14 = v12 & 0xFF9FFFFF;
    }
    else
    {
      Com_Teams_GetEnemyTeamFlags(&result, v4->botInfo.ent->sentient->eTeam);
      v14 = result.array[6];
      v13 = result.array[0];
    }
    result.array[1] = ~result.array[1];
    result.array[2] = ~result.array[2];
    result.array[3] = ~result.array[3];
    result.array[4] = ~result.array[4];
    result.array[5] = ~result.array[5];
    result.array[6] = ~v14;
    result.array[0] = ~v13;
    if ( Bot_GetClosestCharacterList(v4->botInfo.ent, &v4->botInfo.ent->r.currentOrigin, 0.0, 1, 0, 1, 0, &result, (gentity_s **)&entity, 1) == 1 )
    {
      v15 = *(_QWORD *)entity.v;
      if ( *(_QWORD *)entity.v )
      {
        EntityData = Bot_GetEntityData(*(const gentity_s **)entity.v);
        if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13258, ASSERT_TYPE_ASSERT, "( closestBotData )", (const char *)&queryFormat, "closestBotData") )
          __debugbreak();
        if ( !EntityData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13259, ASSERT_TYPE_ASSERT, "( closestBotData->botInfo.playerState )", (const char *)&queryFormat, "closestBotData->botInfo.playerState") )
          __debugbreak();
        p_commandTime = (float *)&EntityData->botInfo.playerState->commandTime;
        if ( (float)((float)((float)(p_commandTime[15] * p_commandTime[15]) + (float)(p_commandTime[16] * p_commandTime[16])) + (float)(p_commandTime[17] * p_commandTime[17])) > 2500.0 )
        {
          v19 = *(unsigned int *)(v15 + 308);
          v18 = *(float *)(v15 + 308) - v4->botInfo.ent->r.currentOrigin.v[1];
          v20 = *(float *)(v15 + 304) - v4->botInfo.ent->r.currentOrigin.v[0];
          *(float *)&v19 = fsqrt((float)(v18 * v18) + (float)(v20 * v20));
          _XMM3 = v19;
          __asm
          {
            vcmpless xmm0, xmm3, cs:__real@80000000
            vblendvps xmm0, xmm3, xmm11, xmm0
          }
          Nav_GetLookaheadDir(botData->botInfo.pNavigator, &outLookaheadDir);
          Nav_GetLookaheadDir(EntityData->botInfo.pNavigator, &v31);
          if ( (float)((float)((float)(v18 * (float)(1.0 / *(float *)&_XMM0)) * outLookaheadDir.v[1]) + (float)((float)(v20 * (float)(1.0 / *(float *)&_XMM0)) * outLookaheadDir.v[0])) > 0.8 && (float)((float)(outLookaheadDir.v[0] * v31.v[0]) + (float)(outLookaheadDir.v[1] * v31.v[1])) > 0.7 )
          {
            if ( level.time > botData->botInfo.nextTimeCanFreezeMovement )
            {
              v24 = G_random();
              if ( *(float *)&v24 < 0.5 )
                Bot_TryFreezeMovement(botData);
              botData->botInfo.nextTimeCanFreezeMovement = level.time + 5000;
            }
            v7 = 95;
            if ( Dvar_GetInt_Internal_DebugName(DVARINT_bot_DrawDebug, "bot_DrawDebug") == 1 || Dvar_GetInt_Internal_DebugName(DVARINT_bot_DrawDebug, "bot_DrawDebug") == 2 )
            {
              if ( Bot_ShouldDrawDebugForBot(botData) )
              {
                ent = v4->botInfo.ent;
                entity.v[0] = 0.0;
                entity.v[1] = 0.0;
                entity.v[2] = FLOAT_1_0;
                *(_QWORD *)center.v = *(_QWORD *)ent->r.currentOrigin.v;
                center.v[2] = ent->r.currentOrigin.v[2] + 25.0;
                G_DebugCircleEx(&center, 400.0, &entity, &colorBlue, 1, 0);
                G_DebugLine(&v4->botInfo.ent->r.currentOrigin, (const vec3_t *)(v15 + 304), &colorBlue, 1);
              }
            }
          }
        }
      }
    }
  }
  Bot_StrafeOnPath(botData, cmd, v7);
  return 1i64;
}

/*
==============
Bot_UpdateMove_Scripted
==============
*/
__int64 Bot_UpdateMove_Scripted(bot_data_t *botData, usercmd_s *cmd)
{
  __int128 v2; 
  __int128 v3; 
  __int128 v4; 
  __int128 v5; 
  gentity_s *RemoteEyesVehicleEnt; 
  float v9; 
  float v10; 
  __int128 v11; 
  float v15; 
  __int128 v16; 
  float v20; 
  float v21; 
  float v22; 
  float v23; 
  float v24; 
  float v25; 
  float v26; 
  vec2_t v28; 
  vec3_t angles; 
  vec3_t right; 
  vec3_t forward; 
  vec3_t up; 
  __int128 v33; 
  __int128 v34; 
  __int128 v35; 
  __int128 v36; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12617, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12618, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  if ( level.time >= botData->botInfo.scriptMoveTime )
  {
    botData->botInfo.scriptMoveSpeed = 1.0;
    *((_QWORD *)&botData->scriptedAgentInfo + 1119) = 0i64;
  }
  else if ( (LOBYTE(botData->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) == 0 )
  {
    v36 = v2;
    v35 = v3;
    v34 = v4;
    v33 = v5;
    *(_WORD *)&cmd->forwardmove = 0;
    if ( (unsigned int)Bot_IsThirdPersonRemoteVehicle(botData) )
    {
      RemoteEyesVehicleEnt = Bot_GetRemoteEyesVehicleEnt(botData);
      *(_QWORD *)angles.v = *(_QWORD *)RemoteEyesVehicleEnt->r.currentAngles.v;
      v9 = RemoteEyesVehicleEnt->r.currentAngles.v[2];
    }
    else
    {
      if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12605, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
        __debugbreak();
      SV_BotUpdateEyeInfo(botData->botInfo.ent);
      v10 = botData->botInfo.eyeAngles.v[1];
      angles.v[0] = botData->botInfo.eyeAngles.v[0];
      v9 = botData->botInfo.eyeAngles.v[2];
      angles.v[1] = v10;
    }
    angles.v[2] = v9;
    AngleVectors(&angles, &forward, &right, &up);
    v11 = LODWORD(forward.v[0]);
    *(float *)&v11 = fsqrt((float)(*(float *)&v11 * *(float *)&v11) + (float)(forward.v[1] * forward.v[1]));
    _XMM5 = v11;
    __asm
    {
      vcmpless xmm0, xmm5, cs:__real@80000000
      vblendvps xmm0, xmm5, xmm4, xmm0
    }
    v15 = 1.0 / *(float *)&_XMM0;
    v16 = LODWORD(up.v[0]);
    *(float *)&v16 = fsqrt((float)(*(float *)&v16 * *(float *)&v16) + (float)(up.v[1] * up.v[1]));
    _XMM2 = v16;
    __asm
    {
      vcmpless xmm0, xmm2, cs:__real@80000000
      vblendvps xmm0, xmm2, xmm4, xmm0
    }
    v20 = (float)(1.0 / (float)(*(float *)&v16 + *(float *)&_XMM5)) * *(float *)&_XMM5;
    *(float *)&_XMM5 = (float)(1.0 / (float)(*(float *)&v16 + *(float *)&_XMM5)) * *(float *)&v16;
    v21 = (float)((float)(forward.v[0] * v15) * v20) + (float)((float)(up.v[0] * (float)(1.0 / *(float *)&_XMM0)) * *(float *)&_XMM5);
    v22 = (float)((float)(forward.v[1] * v15) * v20) + (float)((float)(up.v[1] * (float)(1.0 / *(float *)&_XMM0)) * *(float *)&_XMM5);
    YawVectors2D(botData->botInfo.scriptMoveYaw, &v28, NULL);
    if ( botData->botInfo.scriptMoveRemoteControl )
    {
      if ( botData->botInfo.scriptMoveStickSwap )
      {
        v23 = v28.v[0] * right.v[0];
        v24 = v28.v[1] * right.v[1];
        cmd->remoteControlAngles[0] = (int)(float)((float)((float)((float)(v21 * v28.v[0]) + (float)(v22 * v28.v[1])) * botData->botInfo.scriptMoveSpeed) * -127.0);
        cmd->remoteControlAngles[1] = (int)(float)((float)((float)(v23 + v24) * botData->botInfo.scriptMoveSpeed) * -127.0);
        return 1i64;
      }
      if ( !CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12676, ASSERT_TYPE_ASSERT, (const char *)&queryFormat.fmt + 3, "Unsupported Bot scripted movement with scriptMoveRemoteControl and !scriptMoveStickSwap") )
        return 1i64;
    }
    else
    {
      if ( !botData->botInfo.scriptMoveStickSwap )
      {
        v25 = v28.v[0] * right.v[0];
        v26 = v28.v[1] * right.v[1];
        cmd->forwardmove = (int)(float)((float)((float)((float)(v21 * v28.v[0]) + (float)(v22 * v28.v[1])) * botData->botInfo.scriptMoveSpeed) * 127.0);
        cmd->rightmove = (int)(float)((float)((float)(v25 + v26) * botData->botInfo.scriptMoveSpeed) * 127.0);
        return 1i64;
      }
      if ( !CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12680, ASSERT_TYPE_ASSERT, (const char *)&queryFormat.fmt + 3, "Unsupported Bot scripted movement with !scriptMoveRemoteControl and scriptMoveStickSwap") )
        return 1i64;
    }
    __debugbreak();
    return 1i64;
  }
  return 0i64;
}

/*
==============
Bot_UpdateMovement
==============
*/
void Bot_UpdateMovement(bot_data_t *botData, usercmd_s *cmd)
{
  const dvar_t *v4; 
  int Int_Internal_DebugName; 
  pathnode_t *node; 
  playerState_s *playerState; 
  pathnode_t *v8; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7648, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v4 = DVARINT_ai_showPaths;
  if ( !DVARINT_ai_showPaths && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "ai_showPaths") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v4);
  if ( v4->current.integer > 0 && Bot_ShouldDrawDebugForBot(botData) && botData->botInfo.ent->health > 0 && Nav_HasPath(botData->botInfo.pNavigator) )
  {
    Int_Internal_DebugName = Dvar_GetInt_Internal_DebugName(DVARINT_ai_showPaths, "ai_showPaths");
    Nav_DrawPath(botData->botInfo.pNavigator, Int_Internal_DebugName);
  }
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23600, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( botData->botInfo.scriptGoal.type )
  {
    node = botData->botInfo.scriptGoal.node;
    if ( node )
      Bot_StampNodeArea(botData, node);
  }
  if ( Bot_UpdateMovementTraversal(botData, cmd) )
  {
    Bot_UpdateDirection(botData, cmd);
    if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7571, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
      __debugbreak();
    Bot_UpdateStance(botData, cmd);
    Bot_UpdateMantleJump(botData, cmd);
  }
  else if ( (unsigned int)Bot_UpdateBlinded(botData, cmd) )
  {
    Bot_UpdateStance(botData, cmd);
  }
  else
  {
    Bot_UpdatePath(botData, cmd);
    if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7543, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
      __debugbreak();
    Bot_UpdatePathLookPredict(botData);
    Bot_PathStuckRecover(botData);
    Bot_UpdateDirection(botData, cmd);
    Bot_UpdateStrafe(botData);
    Bot_UpdateMove(botData, cmd);
    if ( !cmd )
    {
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7637, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
        __debugbreak();
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7622, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
        __debugbreak();
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6899, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
        __debugbreak();
    }
    if ( Bot_IsSliding(botData) || botData->botInfo.slideDesiredTime > level.time && Slide_CanSlideFromGroundConditionsMet(botData->botInfo.playerState, level.time) && Slide_CanSlideNowConditionsMet(botData->botInfo.playerState) )
    {
      cmd->buttons = cmd->buttons & 0xFFFFFFFFFFBFFF3Fui64 | 0x400000;
    }
    else
    {
      Bot_UpdateDive(botData, cmd);
      Bot_UpdateStance(botData, cmd);
    }
    Bot_UpdateSprinting(botData, cmd);
    Bot_UpdateMantleJump(botData, cmd);
    if ( (unsigned int)Bot_IsRemoteEyesVehicle(botData) && level.time >= botData->botInfo.scriptMoveTime && Bot_GetRemoteEyesVehicleEnt(botData)->s.eType == ET_HELICOPTER || Bot_IsMovementLocked(botData) )
    {
      *(_WORD *)&cmd->forwardmove = 0;
    }
    else
    {
      Bot_UpdateStuckCheck(botData);
      playerState = botData->botInfo.playerState;
      if ( (playerState->velocity.v[0] != 0.0 || playerState->velocity.v[1] != 0.0 || playerState->velocity.v[2] != 0.0) && SV_BotRequirePathnodes(botData) )
      {
        v8 = Sentient_NearestNode(botData->botInfo.sentient);
        if ( v8 )
        {
          if ( (v8->constant.spawnflags & 0x40000) != 0 )
            SV_BotBreakGlassMove(botData->botInfo.ent, &botData->botInfo.playerState->velocity, &actorBoxCrouch);
        }
      }
    }
  }
}

/*
==============
Bot_UpdateMovementTraversal
==============
*/
__int64 Bot_UpdateMovementTraversal(bot_data_t *botData, usercmd_s *cmd)
{
  int updated; 
  bool v5; 
  BOOL v6; 
  int v7; 
  const pathnode_t *NegotiationStartNode; 
  unsigned int v9; 
  __int64 v10; 
  char v11; 
  const pathnode_t *NegotiationEndNode; 
  unsigned __int16 v13; 
  gentity_s *ent; 
  double v15; 
  double v16; 
  int flags; 
  int v18; 
  int v19; 
  $3396140AF3A78F7FCD1D73807E505015 *v20; 
  playerState_s *playerState; 
  const Weapon *ViewmodelWeapon; 
  PlayerHandIndex WeaponHandForViewWeapon; 
  BOOL v24; 
  int IsWeapType; 
  int IsWeapClass; 
  int IsReloading; 
  BOOL v28; 
  int IsBlockedByBreakable; 
  int traversal; 
  int v35; 
  __int64 v37; 
  __int64 v38; 
  BOOL v39; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15870, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15876, ASSERT_TYPE_ASSERT, "( botInfo->sentient )", (const char *)&queryFormat, "botInfo->sentient") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15877, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  updated = Bot_UpdateLadder(botData, cmd);
  v5 = GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 5u);
  v6 = v5;
  v39 = v5;
  if ( v5 )
    *(_WORD *)&cmd->forwardmove = 127;
  v7 = 0;
  if ( (LOBYTE(botData->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) == 0 )
  {
    if ( Bot_PathHasNegotiation(&botData->botInfo) && Bot_IsOnGround(botData) )
    {
      NegotiationStartNode = Bot_PathGetNegotiationStartNode(&botData->botInfo);
      if ( !NegotiationStartNode )
      {
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15893, ASSERT_TYPE_ASSERT, "( negotiationStartNode )", (const char *)&queryFormat, "negotiationStartNode") )
          __debugbreak();
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3663, ASSERT_TYPE_ASSERT, "( negotiationNode )", (const char *)&queryFormat, "negotiationNode") )
          __debugbreak();
      }
      if ( !Path_IsNodeTraversalBegin(NegotiationStartNode) )
        goto LABEL_90;
      v9 = Path_ConvertNodeToIndex(NegotiationStartNode);
      v10 = v9 >> 1;
      v11 = 4 * (v9 & 1);
      if ( (unsigned int)v10 >= (unsigned int)s_botTraversalTypesCount )
      {
        LODWORD(v37) = v10;
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3675, ASSERT_TYPE_ASSERT, "(unsigned)( byteIndex ) < (unsigned)( s_botTraversalTypesCount )", "byteIndex doesn't index s_botTraversalTypesCount\n\t%i not in [0, %i)", v37, s_botTraversalTypesCount) )
          __debugbreak();
      }
      v7 = 1 << (((15 << v11) & s_botTraversalTypes[v10]) >> v11);
      if ( !v7 )
      {
LABEL_90:
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15896, ASSERT_TYPE_ASSERT, "( negotiationType )", (const char *)&queryFormat, "negotiationType") )
          __debugbreak();
      }
      if ( Bot_NegotiationPointReached(botData, BOT_TRAVERSAL_STAGE_APPROACHING_START_NODE, cmd) )
      {
        botData->botInfo.traversal |= v7;
        if ( !NegotiationStartNode && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15907, ASSERT_TYPE_ASSERT, "( negotiationStartNode )", (const char *)&queryFormat, "negotiationStartNode") )
          __debugbreak();
        botData->botInfo.nodeNegotStart = Path_ConvertNodeToIndex(NegotiationStartNode);
        NegotiationEndNode = Bot_PathGetNegotiationEndNode(&botData->botInfo);
        v13 = Path_ConvertNodeToIndex(NegotiationEndNode);
        botData->botInfo.nodeNegotEnd = v13;
        if ( !v13 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15910, ASSERT_TYPE_ASSERT, "( botInfo->nodeNegotEnd )", (const char *)&queryFormat, "botInfo->nodeNegotEnd") )
          __debugbreak();
        if ( !Path_NodeValid(botData->botInfo.nodeNegotStart) )
        {
          LODWORD(v38) = botData->botInfo.nodeNegotStart;
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15912, ASSERT_TYPE_ASSERT, "(Path_NodeValid( botData->botInfo.nodeNegotStart ))", "%s\n\tbotInfo.nodeNegotStart = %i", "Path_NodeValid( botData->botInfo.nodeNegotStart )", v38) )
            __debugbreak();
        }
        if ( !Path_NodeValid(botData->botInfo.nodeNegotEnd) )
        {
          LODWORD(v38) = botData->botInfo.nodeNegotEnd;
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15913, ASSERT_TYPE_ASSERT, "(Path_NodeValid( botData->botInfo.nodeNegotEnd ))", "%s\n\tbotInfo.nodeNegotEnd = %i", "Path_NodeValid( botData->botInfo.nodeNegotEnd )", v38) )
            __debugbreak();
        }
        ent = botData->botInfo.ent;
        botData->botInfo.traverseStartTime = level.time;
        botData->botInfo.traverseProgressTime = level.time;
        botData->botInfo.traverseProgressJumps = 0;
        botData->botInfo.traverseProgressLoc.v[0] = ent->r.currentOrigin.v[0];
        botData->botInfo.traverseProgressLoc.v[1] = ent->r.currentOrigin.v[1];
        botData->botInfo.traverseProgressLoc.v[2] = ent->r.currentOrigin.v[2];
        v15 = G_random();
        if ( *(float *)&v15 < botData->botMatchData.breakMelee )
          botData->botInfo.traversal |= 0x2000u;
        if ( v7 == 1 )
        {
          v16 = G_random();
          flags = botData->botInfo.flags;
          if ( *(float *)&v16 >= 0.5 )
            v18 = flags & 0xFFFFFFFD;
          else
            v18 = flags | 2;
          botData->botInfo.flags = v18;
        }
        if ( (NegotiationStartNode->constant.spawnflags & 4) != 0 )
          botData->botInfo.traversal |= 0x10000u;
      }
    }
    if ( (LOBYTE(botData->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) == 0 )
    {
LABEL_83:
      if ( updated )
        return 1i64;
      return v6 || (LOBYTE(botData->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) != 0;
    }
  }
  if ( updated )
    goto LABEL_58;
  if ( (LOBYTE(botData->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) == 0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15828, ASSERT_TYPE_ASSERT, "( Bot_IsDoingTraversal( &botData->botInfo ) )", (const char *)&queryFormat, "Bot_IsDoingTraversal( &botData->botInfo )") )
    __debugbreak();
  if ( !Bot_ShouldAvoidTraversals(botData) || Bot_EnemyPreferMelee(botData) || (botData->botInfo.flags & 0x4000) != 0 )
  {
LABEL_58:
    v19 = Bot_NegotiationPointReached(botData, BOT_TRAVERSAL_STAGE_BETWEEN_START_AND_END_NODE, cmd);
    if ( (LOBYTE(botData->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) == 0 )
      goto LABEL_81;
    v20 = &botData->8;
    if ( v19 )
    {
      botData->botInfo.traverseEndTime = level.time;
      Bot_TraversalClear(&v20->botInfo);
      goto LABEL_81;
    }
    if ( !Bot_PathHasNegotiation(&v20->botInfo) || updated )
    {
LABEL_81:
      if ( Bot_NeedsTraversalJump(botData, cmd) )
        Bot_UpdateJumpTraversal(botData, cmd);
      goto LABEL_83;
    }
    Bot_SetMovementAlongNegotiation(botData, cmd);
    if ( !botData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15680, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState )", (const char *)&queryFormat, "botData->botInfo.playerState") )
      __debugbreak();
    playerState = botData->botInfo.playerState;
    ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(playerState);
    WeaponHandForViewWeapon = Bot_Weap_GetWeaponHandForViewWeapon(playerState);
    v24 = Bot_Weap_AmmoInClip(playerState, ViewmodelWeapon, WeaponHandForViewWeapon) < 3;
    IsWeapType = Bot_Weap_IsWeapType(playerState, ViewmodelWeapon, WEAPTYPE_BULLET);
    IsWeapClass = Bot_Weap_IsWeapClass(playerState, ViewmodelWeapon, WEAPCLASS_SNIPER);
    IsReloading = Bot_IsReloading(botData);
    v28 = !IsWeapType || IsWeapClass || IsReloading || v24 || (botData->botInfo.traversal & 0x2000) != 0;
    _XMM0 = v28;
    __asm { vpcmpeqd xmm3, xmm0, xmm1 }
    _XMM1 = LODWORD(FLOAT_30_0);
    __asm { vblendvps xmm1, xmm1, xmm2, xmm3; range }
    IsBlockedByBreakable = Bot_IsBlockedByBreakable(botData, *(float *)&_XMM1);
    traversal = botData->botInfo.traversal;
    if ( IsBlockedByBreakable )
    {
      botData->botInfo.traversal = traversal | 0xC00;
      if ( level.time - botData->botInfo.lastBreakAttack > 100 )
      {
        v35 = 16;
        if ( !v28 )
          v35 = 2;
        botData->botInfo.scriptPress |= v35;
        botData->botInfo.lastBreakAttack = level.time;
        goto LABEL_80;
      }
    }
    else
    {
      botData->botInfo.traversal = traversal & 0xFFFFFBFF;
    }
    botData->botInfo.scriptPress &= 0xFFFFFFED;
LABEL_80:
    v6 = v39;
    goto LABEL_81;
  }
  Bot_TraversalClear(&botData->botInfo);
  Bot_PathClear(&botData->botInfo);
  return v6 || (LOBYTE(botData->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) != 0;
}

/*
==============
Bot_UpdateNVGState
==============
*/
void Bot_UpdateNVGState(bot_data_t *botData, usercmd_s *cmd)
{
  $3396140AF3A78F7FCD1D73807E505015 *v4; 
  playerState_s *playerState; 
  const Weapon *ViewmodelWeapon; 
  bool v7; 
  bool v8; 
  Gesture *Gesture; 
  Gesture *v10; 
  bool IsPlaying; 
  bool v12; 
  bool v13; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3895, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v4 = &botData->8;
  if ( botData == (bot_data_t *)-8i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3897, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3899, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(playerState);
  if ( ViewmodelWeapon->weaponIdx && !Bot_IsFiringWeapon(botData, cmd) )
  {
    v7 = BG_UsingAlternate(playerState);
    if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\bgame\\bg_weapons_util.h", 1366, ASSERT_TYPE_ASSERT, "(ps)", (const char *)&queryFormat, "ps") )
      __debugbreak();
    if ( BG_Skydive_IsSkydiving(playerState) )
    {
      v8 = 0;
    }
    else
    {
      v8 = 0;
      if ( BG_Ladder_IsDualWieldingAllowed(playerState) )
        v8 = playerState->weapCommon.lastWeaponHand == WEAPON_HAND_LEFT;
    }
    Gesture = BG_Suit_GetGesture(playerState, WEAPON_HAND_DEFAULT, ViewmodelWeapon, v7, v8, GESTUREANIMTYPE_NVG_ON);
    v10 = BG_Suit_GetGesture(playerState, WEAPON_HAND_DEFAULT, ViewmodelWeapon, v7, v8, GESTUREANIMTYPE_NVG_OFF);
    IsPlaying = BG_NightVisionGestureIsPlaying(playerState, Gesture, NULL, NULL);
    v12 = BG_NightVisionGestureIsPlaying(playerState, v10, NULL, NULL);
    if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\bgame\\bg_public.h", 2222, ASSERT_TYPE_ASSERT, "(ps)", (const char *)&queryFormat, "ps") )
      __debugbreak();
    v13 = GameModeFlagContainer<enum PWeaponFlagsCommon,enum PWeaponFlagsSP,enum PWeaponFlagsMP,64>::TestFlagInternal(&playerState->weapCommon.weapFlags, ACTIVE, 7u);
    if ( !IsPlaying && !v12 && ((v4->botInfo.scriptFlags & 0x800000) != 0) != v13 )
      cmd->buttons |= 0x10000ui64;
  }
}

/*
==============
Bot_UpdateNavigator
==============
*/
void Bot_UpdateNavigator(bot_info_t *botInfo)
{
  char v2; 
  bool v3; 

  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13934, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  v2 = botInfo->playerState->skydivePlayerState.state[0];
  v3 = (v2 & 0xFA) == 0 && v2 != 1;
  if ( !botInfo->traversal && v3 )
    Nav_SetPos(botInfo->pNavigator, &botInfo->ent->r.currentOrigin);
}

/*
==============
Bot_UpdatePath
==============
*/
void Bot_UpdatePath(bot_data_t *botData, usercmd_s *cmd)
{
  gentity_s *ent; 
  playerState_s *playerState; 
  int v6; 
  int v7; 
  gentity_s *Enemy; 
  int v9; 
  BOOL v10; 
  BOOL v11; 
  BOOL v12; 
  const Weapon *ViewmodelWeapon; 
  gentity_s *v14; 
  AIBotInterface *m_pAI; 
  AIBotWrapper v16; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10170, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10171, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10172, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  ent = botData->botInfo.ent;
  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7543, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( s_botPathTurn == ent->s.number )
  {
    Bot_NotifyBadPathOnOwnerCollide(botData);
    if ( Bot_AtScriptGoal(botData) && !botData->botInfo.scriptGoalReachedTime )
      botData->botInfo.scriptGoalReachedTime = level.time;
    if ( !Bot_IsUsingTurret(botData) && Bot_IsOnGround(botData) && !Bot_EntIsInLastStand(botData->botInfo.ent) )
    {
      playerState = botData->botInfo.playerState;
      if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14727, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
        __debugbreak();
      v6 = 1;
      if ( (!GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&playerState->pm_flags, ACTIVE, 0x13u) || playerState->pm_time) && !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 5u) )
      {
        v7 = Bot_PathExists(&botData->botInfo);
        if ( Bot_HasRemoteEyes(botData) )
        {
          if ( v7 )
            Bot_PathClear(&botData->botInfo);
          return;
        }
        Enemy = Bot_GetEnemy(botData);
        v9 = Bot_IsAtPathEnd(botData, 0.0);
        v10 = level.time < G_irand(300, 500) + botData->botInfo.lastPathCalcTime + 750;
        v11 = Enemy && Bot_CanReactEnemy(botData);
        v12 = 0;
        if ( (botData->botInfo.scriptFlags & 0x200000) == 0 )
          v12 = v11;
        if ( !Bot_UpdateDebugGoal(botData) && !Bot_Badplace_Update(botData) && !Bot_UpdateScriptGoal(botData) && !Bot_UpdateHidingGoal(botData) && !Bot_UpdateLostEnemyPath(botData) && !Bot_UpdateAerialLockOnPath(botData) )
        {
          if ( v10 )
          {
            ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(botData->botInfo.playerState);
            if ( !Bot_Weap_IsMelee(botData->botInfo.playerState, ViewmodelWeapon) )
              v6 = 0;
          }
          if ( v7 && !v9 )
          {
            if ( !v6 || (LOBYTE(botData->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) != 0 )
              return;
            if ( !Bot_StuckShouldReact(&botData->botInfo) )
            {
              if ( !v12 )
                return;
              goto LABEL_50;
            }
          }
          if ( v12 )
          {
LABEL_50:
            Bot_UpdatePathToEnemy(botData);
            return;
          }
          if ( !Bot_PathStuckRecover(botData) )
          {
            AICommonInterface::AICommonInterface(&v16.m_botInterface);
            v16.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
            AICommonInterface::AICommonInterface(&v16.m_botAgentInterface);
            v14 = botData->botInfo.ent;
            v16.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
            v16.m_pAI = NULL;
            AIBotWrapper::Setup(&v16, v14);
            m_pAI = v16.m_pAI;
            if ( !v16.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10246, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
              __debugbreak();
            if ( level.time - botData->botInfo.enemyTrack.lastEnemyTime > m_pAI->GetThreatUpdateInterval(m_pAI) )
              Bot_ResumeScriptGoal(botData);
          }
        }
      }
    }
  }
}

/*
==============
Bot_UpdatePathLookPredict
==============
*/
void Bot_UpdatePathLookPredict(bot_data_t *botData)
{
  float v2; 
  float v3; 
  float v4; 
  float v5; 
  __int128 v6; 
  float v7; 
  float v11; 
  float v12; 
  float v13; 
  vec3_t outLookaheadDir; 
  nav_posAlongPathResults_t pResults; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10625, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( Bot_ShouldLookAtPoint(botData) )
  {
    if ( botData == (bot_data_t *)-8i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13725, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
      __debugbreak();
    if ( Bot_NavPathExists(&botData->botInfo) )
    {
      bfx::AreaHandle::AreaHandle(&pResults.m_hArea);
      bfx::LinkHandle::LinkHandle(&pResults.m_hLink);
      Nav_GetPosAlongPath(botData->botInfo.pNavigator, 150.0, 1, &pResults);
      v2 = pResults.m_Pos.v[0];
      v3 = pResults.m_Pos.v[1];
      v4 = pResults.m_Pos.v[2] + 50.0;
      v6 = LODWORD(pResults.m_Pos.v[1]);
      v5 = pResults.m_Pos.v[1] - v13;
      v7 = (float)(pResults.m_Pos.v[2] + 50.0) - v13;
      *(float *)&v6 = fsqrt((float)((float)(v5 * v5) + (float)((float)(pResults.m_Pos.v[0] - v13) * (float)(pResults.m_Pos.v[0] - v13))) + (float)(v7 * v7));
      _XMM3 = v6;
      __asm
      {
        vcmpless xmm0, xmm3, cs:__real@80000000
        vblendvps xmm1, xmm3, xmm2, xmm0
      }
      v11 = (float)(pResults.m_Pos.v[0] - v13) * (float)(1.0 / *(float *)&_XMM1);
      v12 = v7 * (float)(1.0 / *(float *)&_XMM1);
      Nav_GetLookaheadDir(botData->botInfo.pNavigator, &outLookaheadDir);
      if ( (float)((float)((float)((float)(v5 * (float)(1.0 / *(float *)&_XMM1)) * outLookaheadDir.v[1]) + (float)(v11 * outLookaheadDir.v[0])) + (float)(v12 * outLookaheadDir.v[2])) > 0.69999999 )
      {
        if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14625, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
          __debugbreak();
        if ( v2 == 0.0 && v3 == 0.0 && v4 == 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14633, ASSERT_TYPE_ASSERT, "( Vec3NotZero( *point ) )", (const char *)&queryFormat, "Vec3NotZero( *point )") )
          __debugbreak();
        if ( botData->botInfo.lookAtType <= BOT_LOOK_CODE_PATH || level.time >= botData->botInfo.lookAtTime )
        {
          botData->botInfo.lookAtTime = level.time + 500;
          botData->botInfo.lookAtType = BOT_LOOK_CODE_PATH;
          botData->botInfo.lookAtPoint.v[0] = v2;
          botData->botInfo.lookAtPoint.v[1] = v3;
          botData->botInfo.lookAtPoint.v[2] = v4;
        }
      }
      bfx::LinkHandle::~LinkHandle(&pResults.m_hLink);
      bfx::AreaHandle::~AreaHandle(&pResults.m_hArea);
    }
  }
}

/*
==============
Bot_UpdatePathToEnemy
==============
*/
__int64 Bot_UpdatePathToEnemy(bot_data_t *botData)
{
  __int128 v1; 
  playerState_s *playerState; 
  const Weapon *ViewmodelWeapon; 
  int HasLOSToHighAerialEnemy; 
  gentity_s *v6; 
  pathnode_t *LastKnownEntNearestNode; 
  const pathnode_t *v8; 
  float v9; 
  float v10; 
  float v11; 
  float v12; 
  float v13; 
  float v14; 
  pathnode_t *nearestNode; 
  pathnode_t *v16; 
  int v17; 
  pathnode_t *v18; 
  unsigned int lastKnownFacingYaw; 
  float v20; 
  float v23; 
  float v25; 
  const char *v27; 
  int v28; 
  pathnode_t *CombatCoverNode; 
  __int16 EntityIndex; 
  const char *v31; 
  int PathToGoalInternal; 
  int v33; 
  pathnode_t *v34; 
  int v35; 
  double LookAheadDist; 
  float v37; 
  int time; 
  float v39; 
  float v40; 
  int traversal; 
  int CanSeeEnemy; 
  BOOL v44; 
  int ShouldRushEnemy; 
  BOOL ShouldFireOnEnemyInSight; 
  int IsWeapType; 
  BOOL v48; 
  signed __int64 v49; 
  vec3_t pos; 
  vec3_t targetPos; 
  vec3_t v52; 
  vec3_t goal; 
  vec3_t vEyePosOut; 
  __int128 v55; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10342, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10343, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(playerState);
  HasLOSToHighAerialEnemy = 0;
  v44 = Bot_Weap_Ammo(playerState, ViewmodelWeapon) > 0;
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
    v6 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
  else
    v6 = NULL;
  CanSeeEnemy = Bot_CanSeeEnemy(botData);
  if ( !v6 || (botData->botInfo.scriptFlags & 0x200000) != 0 || level.time - botData->botInfo.lastBadPath <= 500 || Bot_ShouldDelayPathGen(botData) )
    return 0i64;
  if ( !v6->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10387, ASSERT_TYPE_ASSERT, "( enemy->sentient )", (const char *)&queryFormat, "enemy->sentient") )
    __debugbreak();
  v49 = v6->sentient - level.sentients;
  LastKnownEntNearestNode = Bot_GetLastKnownEntNearestNode(botData, v6);
  v8 = LastKnownEntNearestNode;
  if ( LastKnownEntNearestNode )
  {
    pathnode_t::GetPos(LastKnownEntNearestNode, &pos);
  }
  else
  {
    pos = v6->r.currentOrigin;
    v8 = Sentient_NearestNode(v6->sentient);
  }
  IsWeapType = Bot_Weap_IsWeapType(playerState, ViewmodelWeapon, WEAPTYPE_BULLET);
  ShouldRushEnemy = Bot_ShouldRushEnemy(botData);
  v48 = Bot_EnemyPreferMelee(botData);
  ShouldFireOnEnemyInSight = Bot_ShouldFireOnEnemyInSight(botData);
  Bot_GetActiveGoal(botData, &goal);
  if ( !v44 || v48 )
  {
    v13 = Bot_ActualMeleeRange(botData);
    v9 = (float)(v13 * 0.25) * (float)(v13 * 0.25);
    Bot_GetLastKnownEntPosAndTime(botData, v6, &targetPos);
    v11 = goal.v[0] - targetPos.v[0];
    v12 = goal.v[2] - targetPos.v[2];
    v10 = goal.v[1] - targetPos.v[1];
  }
  else
  {
    v9 = FLOAT_65536_0;
    v10 = goal.v[1] - pos.v[1];
    targetPos = pos;
    v11 = goal.v[0] - pos.v[0];
    v12 = goal.v[2] - pos.v[2];
  }
  v14 = (float)((float)(v10 * v10) + (float)(v11 * v11)) + (float)(v12 * v12);
  if ( ShouldRushEnemy )
    botData->botInfo.flags &= ~0x2000u;
  if ( Bot_PathExists(&botData->botInfo) && !Bot_StuckShouldReact(&botData->botInfo) )
  {
    if ( (botData->botInfo.flags & 0x2000) != 0 && v8 )
    {
      nearestNode = botData->botInfo.activeGoal.nearestNode;
      if ( !nearestNode )
        goto LABEL_49;
      v16 = (pathnode_t *)v8;
    }
    else
    {
      v17 = 0;
      LOBYTE(v17) = v14 > v9;
      if ( v14 <= v9 )
      {
        if ( !v8 || (v18 = botData->botInfo.activeGoal.nearestNode) != NULL && Path_NodesVisibleNoPeek(v18, v8) )
        {
LABEL_43:
          if ( !botData->botInfo.botSentientInfo[v49].lastKnownFacingTime || (botData->botInfo.flags & 0x10000) == 0 )
          {
LABEL_47:
            if ( !Bot_IsAtPathEnd(botData, 0.0) || ShouldFireOnEnemyInSight )
              return 1i64;
            goto LABEL_49;
          }
          v17 = 0;
          lastKnownFacingYaw = botData->botInfo.botSentientInfo[v49].lastKnownFacingYaw;
          v20 = _mm_cvtepi32_ps((__m128i)(unsigned int)botData->botInfo.botSentientInfo[v49].lastPathFacingYaw).m128_f32[0] * 0.0027777778;
          v55 = v1;
          _XMM9 = 0i64;
          __asm { vroundss xmm2, xmm9, xmm1, 1 }
          v23 = (float)((float)(_mm_cvtepi32_ps((__m128i)lastKnownFacingYaw).m128_f32[0] * 0.0027777778) - *(float *)&_XMM2) * 360.0;
          __asm { vroundss xmm2, xmm9, xmm1, 1 }
          v25 = (float)(v23 - (float)((float)(v20 - *(float *)&_XMM2) * 360.0)) * 0.0027777778;
          __asm { vroundss xmm2, xmm9, xmm3, 1 }
          LOBYTE(v17) = COERCE_FLOAT(COERCE_UNSIGNED_INT((float)(v25 - *(float *)&_XMM2) * 360.0) & _xmm) >= 90.0;
LABEL_46:
          if ( v17 )
            goto LABEL_49;
          goto LABEL_47;
        }
        v17 = 1;
      }
      if ( !Bot_IsHighAerialSentient(v6->sentient) || !v8 )
        goto LABEL_46;
      v16 = botData->botInfo.activeGoal.nearestNode;
      if ( !v16 )
        goto LABEL_49;
      nearestNode = (pathnode_t *)v8;
    }
    if ( !Path_NodesVisibleNoPeek(nearestNode, v16) )
      goto LABEL_49;
    goto LABEL_43;
  }
LABEL_49:
  botData->botInfo.flags &= ~0x2000u;
  v27 = "pos";
  v28 = 0;
  if ( ShouldFireOnEnemyInSight )
  {
    if ( IsWeapType )
    {
      if ( v44 )
      {
        if ( !ShouldRushEnemy && !v48 )
        {
          if ( v8 )
          {
            if ( !Bot_IsHardwareEnt(v6) && SV_BotRequirePathnodes(botData) )
            {
              CombatCoverNode = Bot_GetCombatCoverNode(botData, v8);
              if ( CombatCoverNode )
              {
                v27 = "cover";
                pathnode_t::GetPos(CombatCoverNode, &targetPos);
                botData->botInfo.flags |= 0x2000u;
                v28 = 1;
              }
            }
          }
        }
      }
    }
  }
  if ( botData->botMatchData.strategyLevel >= 3.0 && !Bot_ShouldRushEnemy(botData) )
    botData->botInfo.flags |= 0x10000u;
  EntityIndex = G_GetEntityIndex(v6);
  v31 = j_va("enemy_%s %i", v27, (unsigned int)EntityIndex);
  PathToGoalInternal = Bot_GetPathToGoalInternal(botData, &targetPos, 0.0, v31);
  v33 = PathToGoalInternal;
  if ( !v28 )
  {
LABEL_66:
    if ( v33 && Bot_PointInGoal(botData, 300.0, &v6->r.currentOrigin) )
      goto LABEL_69;
    goto LABEL_68;
  }
  if ( PathToGoalInternal )
  {
    v34 = botData->botInfo.activeGoal.nearestNode;
    if ( v34 )
      Bot_ForceClaimNode(&botData->botInfo, v34);
    goto LABEL_66;
  }
LABEL_68:
  HasLOSToHighAerialEnemy = 1;
LABEL_69:
  v35 = Bot_PathExists(&botData->botInfo);
  if ( v33 )
  {
    if ( !HasLOSToHighAerialEnemy && !CanSeeEnemy )
    {
      if ( v35 )
      {
        if ( !((unsigned __int8 (__fastcall *)(AINavigator *))botData->botInfo.pNavigator->HasTraversalWithin)(botData->botInfo.pNavigator) )
        {
          LookAheadDist = Bot_GetLookAheadDist(&botData->botInfo);
          if ( *(float *)&LookAheadDist < 20.0 )
            HasLOSToHighAerialEnemy = 1;
        }
      }
    }
  }
  if ( Bot_IsHighAerialSentient(v6->sentient) )
    HasLOSToHighAerialEnemy = Bot_HasLOSToHighAerialEnemy(botData, v6);
  if ( HasLOSToHighAerialEnemy )
  {
    if ( v6->sentient )
    {
      if ( !Bot_ShouldForgetEnemy(botData, v6) )
      {
        Bot_GetLastKnownEntPosAndTime(botData, v6, &v52);
        Sentient_GetEyePosition(v6->sentient, &vEyePosOut);
        v37 = (float)(vEyePosOut.v[2] - v6->r.currentOrigin.v[2]) + v52.v[2];
        v52.v[2] = v37;
        if ( v52.v[0] == 0.0 && v52.v[1] == 0.0 && v37 == 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14633, ASSERT_TYPE_ASSERT, "( Vec3NotZero( *point ) )", (const char *)&queryFormat, "Vec3NotZero( *point )") )
          __debugbreak();
        time = level.time;
        if ( botData->botInfo.lookAtType <= BOT_LOOK_CODE_SEEK || level.time >= botData->botInfo.lookAtTime )
        {
          v39 = v52.v[0];
          v40 = v52.v[1];
          botData->botInfo.lookAtType = BOT_LOOK_CODE_SEEK;
          botData->botInfo.lookAtTime = time + 1500;
          botData->botInfo.lookAtPoint.v[0] = v39;
          botData->botInfo.lookAtPoint.v[2] = v52.v[2];
          botData->botInfo.lookAtPoint.v[1] = v40;
          traversal = botData->botInfo.traversal;
          if ( (traversal & 1) != 0 )
            botData->botInfo.traversal = traversal & 0xFFFFFFFE;
        }
      }
    }
    else
    {
      Bot_LookAtPoint(botData, &v6->r.currentOrigin, 1500, BOT_LOOK_CODE_SEEK);
    }
  }
  if ( v33 )
  {
    GScr_Notify(botData->botInfo.ent, scr_const.path_enemy, 0);
    botData->botInfo.botSentientInfo[v49].lastPathFacingYaw = botData->botInfo.botSentientInfo[v49].lastKnownFacingYaw;
    return 1i64;
  }
  if ( !CanSeeEnemy )
    Bot_StopPursuingEnemy(botData);
  botData->botInfo.flags |= 0x400000u;
  return 0i64;
}

/*
==============
Bot_UpdatePathingLook
==============
*/
__int64 Bot_UpdatePathingLook(bot_data_t *botData, vec3_t *viewAnglesOut)
{
  vec3_t outLookaheadDir; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11817, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( botData == (bot_data_t *)-8i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13725, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  if ( !Bot_NavPathExists(&botData->botInfo) || Bot_IsAtPathEnd(botData, 0.0) )
    return 0i64;
  Nav_GetLookaheadDir(botData->botInfo.pNavigator, &outLookaheadDir);
  vectoangles(&outLookaheadDir, viewAnglesOut);
  return 1i64;
}

/*
==============
Bot_UpdatePitch
==============
*/
float Bot_UpdatePitch(bot_data_t *botData, float currentPitch, float targetPitch, int forceSlow)
{
  float pitchSpeed; 
  float frameDuration; 
  double v9; 
  const VehicleDef *RemoteEyesVehicleDef; 
  float vehCam_pitchTurnRate3P; 
  float v12; 
  float v13; 
  float v16; 
  float v17; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18017, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  pitchSpeed = botData->botMatchData.pitchSpeed;
  if ( forceSlow )
    pitchSpeed = botData->botMatchData.pitchSpeedAds;
  if ( !level.frameDuration && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_level_locals.h", 349, ASSERT_TYPE_ASSERT, "(level.frameDuration)", "%s\n\tAccessing frame duration before it's been set", "level.frameDuration") )
    __debugbreak();
  frameDuration = (float)level.frameDuration;
  v9 = DiffTrackAngle(targetPitch, currentPitch, pitchSpeed, frameDuration * 0.001);
  if ( (unsigned int)Bot_IsRemoteEyesVehicle(botData) )
  {
    RemoteEyesVehicleDef = Bot_GetRemoteEyesVehicleDef(botData);
    if ( (unsigned int)Bot_IsThirdPersonRemoteVehicle(botData) )
      vehCam_pitchTurnRate3P = RemoteEyesVehicleDef->vehCam_pitchTurnRate3P;
    else
      vehCam_pitchTurnRate3P = RemoteEyesVehicleDef->vehCam_pitchTurnRate;
    v12 = (float)(frameDuration * vehCam_pitchTurnRate3P) * 0.001;
    v13 = (float)(targetPitch - currentPitch) * 0.0027777778;
    _XMM1 = 0i64;
    __asm { vroundss xmm4, xmm1, xmm3, 1 }
    v16 = (float)(v13 - *(float *)&_XMM4) * 360.0;
    LODWORD(v9) = 0;
    if ( v12 != 0.0 )
      v9 = I_fclamp(v16, COERCE_FLOAT(LODWORD(v12) ^ _xmm), v12);
    v17 = *(float *)&v9 + currentPitch;
    *(float *)&v9 = *(float *)&v9 + currentPitch;
    if ( (unsigned int)Bot_IsThirdPersonRemoteVehicle(botData) )
      v9 = BG_Vehicle_ClampCameraAngle(v17, RemoteEyesVehicleDef->vehCam_pitchClamp3P);
  }
  return *(float *)&v9;
}

/*
==============
Bot_UpdateRadar
==============
*/
void Bot_UpdateRadar(bot_data_t *botData)
{
  playerState_s *playerState; 
  $3396140AF3A78F7FCD1D73807E505015 *v3; 
  const dvar_t *v4; 
  float value; 
  const dvar_t *v6; 
  const dvar_t *v7; 
  float v8; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6282, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6285, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  v3 = &botData->8;
  if ( !v3->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6292, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  v4 = DCONST_DVARFLT_bg_compassPortableRadarRadius;
  if ( !DCONST_DVARFLT_bg_compassPortableRadarRadius && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 720, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bg_compassPortableRadarRadius") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v4);
  value = v4->current.value;
  v6 = DCONST_DVARINT_bg_compassPortableRadarSweepTime;
  if ( !DCONST_DVARINT_bg_compassPortableRadarSweepTime && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bg_compassPortableRadarSweepTime") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v6);
  if ( level.time > v3->botInfo.lastRadarPing + v6->current.integer )
  {
    if ( BG_IsEMPJammed(playerState) || Bot_GetRadarIsJammed(&v3->botInfo) )
      goto LABEL_27;
    Bot_PortableRadarPing(&v3->botInfo);
    v7 = DVARBOOL_bg_compassShowEnemies;
    if ( !DVARBOOL_bg_compassShowEnemies && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 692, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bg_compassShowEnemies") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v7);
    if ( v7->current.enabled )
    {
      v8 = FLOAT_9999_0;
    }
    else
    {
      if ( !playerState->radarEnabled )
      {
LABEL_27:
        v3->botInfo.lastRadarPing = level.time + G_irand(50, 200);
        return;
      }
      v8 = value;
    }
    Bot_AIKnownEnemiesRadial(&v3->botInfo, &v3->botInfo.ent->r.currentOrigin, v8, 0x1Au);
    goto LABEL_27;
  }
}

/*
==============
Bot_UpdateReload
==============
*/
void Bot_UpdateReload(bot_data_t *botData, usercmd_s *cmd)
{
  playerState_s *playerState; 
  GWeaponMap *Instance; 
  const Weapon *ViewmodelWeapon; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9306, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( botData == (bot_data_t *)-8i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9308, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9310, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  if ( !Bot_Weap_UpdateReload(botData, cmd) )
  {
    Instance = GWeaponMap::GetInstance();
    ViewmodelWeapon = BG_GetViewmodelWeapon(Instance, playerState);
    if ( BG_HasUnderbarrelWeapon(ViewmodelWeapon) )
    {
      GameModeFlagContainer<enum PWeaponFlagsCommon,enum PWeaponFlagsSP,enum PWeaponFlagsMP,64>::SetFlagInternal(&playerState->weapCommon.weapFlags, ACTIVE, 0x11u);
      Bot_Weap_UpdateReload(botData, cmd);
      GameModeFlagContainer<enum PWeaponFlagsCommon,enum PWeaponFlagsSP,enum PWeaponFlagsMP,64>::ClearFlagInternal(&playerState->weapCommon.weapFlags, ACTIVE, 0x11u);
    }
  }
}

/*
==============
Bot_UpdateRiotShieldDesired
==============
*/
void Bot_UpdateRiotShieldDesired(bot_data_t *botData)
{
  bot_data_t *v2; 
  GWeaponMap *Instance; 
  const playerState_s *playerState; 
  BgWeaponMap *v5; 
  int v6; 
  const gentity_s *v8; 
  const playerState_s *EntityPlayerStateConst; 
  int v10; 
  __int64 v11; 
  const Weapon *Weapon; 
  const dvar_t *v13; 
  int v14; 
  const Weapon *Launcher; 
  const playerState_s *v16; 
  const Weapon *RangedWeapon; 
  double MaxRange; 
  float lastDist; 
  __int64 v20; 
  __int64 v21; 
  int v23; 
  gentity_s *ent; 
  playerState_s *ps; 

  v2 = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18786, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  Instance = GWeaponMap::GetInstance();
  playerState = v2->botInfo.playerState;
  v5 = Instance;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18790, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  v6 = 0;
  v23 = 0;
  LODWORD(_XMM6) = 0;
  if ( !Bot_Weap_PlayerHasRiotShield(playerState) )
    return;
  if ( !Bot_CanSeeAndCanFireOnEnemy(v2) )
  {
    if ( (v2->botInfo.scriptFlags & 0x400) == 0 )
      return;
    goto LABEL_60;
  }
  if ( EntHandle::isDefined(&v2->botInfo.sentient->targetEnt) )
  {
    ent = EntHandle::ent(&v2->botInfo.sentient->targetEnt);
    v8 = ent;
    if ( ent )
      goto LABEL_15;
  }
  else
  {
    v8 = NULL;
    ent = NULL;
  }
  if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18803, ASSERT_TYPE_ASSERT, "( enemy )", (const char *)&queryFormat, "enemy") )
    __debugbreak();
LABEL_15:
  EntityPlayerStateConst = G_GetEntityPlayerStateConst(v8);
  ps = (playerState_s *)EntityPlayerStateConst;
  if ( !EntityPlayerStateConst || !Bot_Weap_PlayerHasRiotShield(EntityPlayerStateConst) || !SV_BotIsBotEnt(v8) )
  {
    v10 = 0;
    v11 = 0i64;
    do
    {
      if ( !v5 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\bgame\\bg_weapons.h", 839, ASSERT_TYPE_ASSERT, "(weaponMap)", (const char *)&queryFormat, "weaponMap") )
        __debugbreak();
      if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\bgame\\bg_weapons.h", 840, ASSERT_TYPE_ASSERT, "(ps)", (const char *)&queryFormat, "ps") )
        __debugbreak();
      if ( (unsigned int)v10 >= 0xF )
      {
        LODWORD(v21) = 15;
        LODWORD(v20) = v10;
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\bgame\\bg_weapons.h", 841, ASSERT_TYPE_ASSERT, "(unsigned)( equippedIndex ) < (unsigned)( 15 )", "equippedIndex doesn't index MAX_EQUIPPED_WEAPONS\n\t%i not in [0, %i)", v20, v21) )
          __debugbreak();
      }
      Weapon = BgWeaponMap::GetWeapon(v5, playerState->weaponsEquipped[v11]);
      if ( !Bot_Weap_IsNone(Weapon) )
      {
        if ( !v5 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\bgame\\bg_weapons.h", 1105, ASSERT_TYPE_ASSERT, "(weaponMap)", (const char *)&queryFormat, "weaponMap") )
          __debugbreak();
        if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\bgame\\bg_weapons.h", 1106, ASSERT_TYPE_ASSERT, "(ps)", (const char *)&queryFormat, "ps") )
          __debugbreak();
        v13 = DVARBOOL_bg_giveAll;
        if ( !DVARBOOL_bg_giveAll || (Dvar_CheckFrontendServerThread(DVARBOOL_bg_giveAll), !v13->current.enabled) )
        {
          if ( !BG_GetEquippedWeaponStateConst(v5, playerState, Weapon) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18816, ASSERT_TYPE_ASSERT, "( BG_PlayerHasWeapon( weaponMap, ps, weaponInInventory ) )", (const char *)&queryFormat, "BG_PlayerHasWeapon( weaponMap, ps, weaponInInventory )") )
            __debugbreak();
        }
        if ( Bot_Weap_IsRanged(playerState, Weapon) && (!Bot_Weap_WeaponUsesAmmo(playerState, Weapon) || Bot_Weap_Ammo(playerState, Weapon)) )
        {
          v6 = 1;
          v23 = 1;
          *(double *)&_XMM0 = Bot_Weap_GetMaxRange(playerState, Weapon);
          __asm { vmaxss  xmm6, xmm0, xmm6 }
        }
        else
        {
          v6 = v23;
        }
      }
      ++v10;
      ++v11;
    }
    while ( v10 < 15 );
    v14 = 0;
    if ( ps )
      LOBYTE(v14) = (unsigned int)(Bot_Weap_GetWeaponStateForViewWeapon(ps) - 18) <= 3;
    v2 = botData;
    if ( !Bot_EnemyFacesBot(botData) || v14 )
    {
      if ( v6 )
        return;
      goto LABEL_60;
    }
    if ( !v6 || botData->botInfo.ent->health <= 100 || (Launcher = Bot_Weap_EntityGetLauncher(ent), !Bot_Weap_IsNone(Launcher)) || (v16 = G_GetEntityPlayerStateConst(ent)) != NULL && (RangedWeapon = Bot_Weap_EntityGetRangedWeapon(ent), MaxRange = Bot_Weap_GetMaxRange(v16, RangedWeapon), lastDist = botData->botInfo.enemyTrack.lastDist, lastDist <= *(float *)&MaxRange) && lastDist > *(float *)&_XMM6 )
LABEL_60:
      v2->botInfo.weaponRiotShieldTime = level.time;
  }
}

/*
==============
Bot_UpdateScreenTargets
==============
*/
void Bot_UpdateScreenTargets(bot_data_t *botData)
{
  int screenTargetCount; 
  int v3; 
  int v4; 
  AimScreenTarget *screenTargets; 
  __m256i v6; 
  double v7; 
  int v8; 
  __int64 v9; 
  bitarray<224> *AllTeamFlags; 
  sentient_s *i; 
  gentity_s *ent; 
  __int16 EntityIndex; 
  unsigned int number; 
  const SvClientMP *CommonClient; 
  BOOL IsClientConnected; 
  bitarray_base<bitarray<224> > *v17; 
  unsigned int v18; 
  const SvClientMP *v19; 
  gentity_s *v20; 
  float v21; 
  float v22; 
  float v23; 
  int v24; 
  int v25; 
  __int64 v26; 
  float *p_distSqr; 
  double *v28; 
  __m256i v29; 
  double v30; 
  __m256i v31; 
  __int64 v32; 
  double v33; 
  __m256i v34; 
  __m256i v35; 
  _BYTE v36[64]; 
  double v37; 
  bitarray<224> iTeamFlags; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8801, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  screenTargetCount = botData->botInfo.aaSharedGlob.screenTargetCount;
  v3 = 0;
  v4 = 2047;
  *(_OWORD *)v34.m256i_i8 = 0x7FFui64;
  *(_OWORD *)&v34.m256i_u64[2] = 0ui64;
  memset(&v35, 0, sizeof(v35));
  if ( screenTargetCount <= 0 )
  {
LABEL_8:
    v6 = v35;
    v7 = 0.0;
  }
  else
  {
    screenTargets = botData->botInfo.aaSharedGlob.screenTargets;
    while ( screenTargets->entIndex != botData->botInfo.playerState->meleeChargeEnt )
    {
      ++v3;
      ++screenTargets;
      if ( v3 >= screenTargetCount )
        goto LABEL_8;
    }
    v9 = 9i64 * v3;
    v6 = *(__m256i *)((char *)&botData->scriptedAgentInfo + 8 * v9 + 9352);
    v7 = *((double *)&botData->scriptedAgentInfo + v9 + 1173);
    v34 = *(__m256i *)((char *)&botData->scriptedAgentInfo + 8 * v9 + 9320);
    v4 = v34.m256i_i32[0];
  }
  if ( v4 == 2047 )
  {
    v8 = 0;
  }
  else
  {
    *(__m256i *)((char *)&botData->scriptedAgentInfo + 9320) = v34;
    *(__m256i *)((char *)&botData->scriptedAgentInfo + 9352) = v6;
    *((double *)&botData->scriptedAgentInfo + 1173) = v7;
    v8 = 1;
  }
  botData->botInfo.aaSharedGlob.screenTargetCount = v8;
  if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8835, ASSERT_TYPE_ASSERT, "( botInfo->sentient )", (const char *)&queryFormat, "botInfo->sentient") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8836, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  if ( Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) )
    AllTeamFlags = (bitarray<224> *)Com_TeamsSP_GetAllTeamFlags();
  else
    AllTeamFlags = (bitarray<224> *)Com_TeamsMP_GetAllTeamFlags();
  iTeamFlags = *AllTeamFlags;
  for ( i = Sentient_FirstSentient(&iTeamFlags); i; i = Sentient_NextSentient(i, &iTeamFlags) )
  {
    if ( !i->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8840, ASSERT_TYPE_ASSERT, "( enemySentient->ent )", (const char *)&queryFormat, "enemySentient->ent") )
      __debugbreak();
    ent = i->ent;
    if ( !i->ent )
      continue;
    EntityIndex = G_GetEntityIndex(i->ent);
    if ( !G_IsEntityInUse(EntityIndex) || !ent->sentient )
      continue;
    if ( ent->client )
    {
      number = ent->s.number;
      if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
        __debugbreak();
      CommonClient = (const SvClientMP *)SvClient::GetCommonClient(number);
      IsClientConnected = Bot_IsClientConnected(CommonClient);
    }
    else
    {
      if ( !ent->agent )
        goto LABEL_37;
      IsClientConnected = ent->s.eType == ET_AGENT;
    }
    if ( IsClientConnected )
    {
LABEL_37:
      if ( ent->s.eType != ET_INVISIBLE )
      {
        v17 = (bitarray_base<bitarray<224> > *)Com_TeamsMP_GetAllTeamFlags();
        if ( bitarray_base<bitarray<224>>::testBit(v17, ent->sentient->eTeam) )
        {
          if ( !ent->client )
            goto LABEL_61;
          v18 = ent->s.number;
          if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
            __debugbreak();
          v19 = (const SvClientMP *)SvClient::GetCommonClient(v18);
          if ( Bot_IsClientActive(v19) )
          {
LABEL_61:
            if ( !AI_IsAlliedSentient(botData->botInfo.sentient, i) && i->ent->s.number != v34.m256i_i32[0] && Bot_RecentSeeSentient(botData, i, 1000) && Bot_EntityOnScreenForMelee(botData, i->ent) )
            {
              if ( botData->botInfo.aaSharedGlob.screenTargetCount == 32 )
                botData->botInfo.aaSharedGlob.screenTargetCount = 31;
              memset(&v36[16], 0, 48);
              v37 = 0.0;
              *(_OWORD *)v36 = (unsigned int)i->ent->s.number;
              v20 = botData->botInfo.ent;
              v21 = v20->r.currentOrigin.v[0] - i->ent->r.currentOrigin.v[0];
              v22 = v20->r.currentOrigin.v[1] - i->ent->r.currentOrigin.v[1];
              v23 = v20->r.currentOrigin.v[2] - i->ent->r.currentOrigin.v[2];
              v36[60] = 3;
              *(float *)&v36[52] = (float)((float)(v22 * v22) + (float)(v21 * v21)) + (float)(v23 * v23);
              Sentient_GetHeadPosition(i, (vec3_t *)&v36[20]);
              v24 = botData->botInfo.aaSharedGlob.screenTargetCount;
              v25 = 0;
              v26 = 0i64;
              if ( v24 > 0 )
              {
                p_distSqr = &botData->botInfo.aaSharedGlob.screenTargets[0].distSqr;
                do
                {
                  if ( *(float *)&v36[52] < *p_distSqr )
                    break;
                  ++v25;
                  ++v26;
                  p_distSqr += 18;
                }
                while ( v25 < v24 );
              }
              if ( v25 < v24 )
              {
                v28 = (double *)((char *)&botData->scriptedAgentInfo + 72 * v26 + 9392);
                do
                {
                  v29 = *(__m256i *)(v28 - 5);
                  *(__m256i *)v28 = *(__m256i *)(v28 - 9);
                  v30 = *(v28 - 1);
                  *((__m256i *)v28 + 1) = v29;
                  v28[8] = v30;
                  ++v25;
                  v28 += 9;
                }
                while ( v25 < botData->botInfo.aaSharedGlob.screenTargetCount );
              }
              v31 = *(__m256i *)&v36[32];
              v32 = 9 * v26;
              *(__m256i *)((char *)&botData->scriptedAgentInfo + 8 * v32 + 9320) = *(__m256i *)v36;
              v33 = v37;
              *(__m256i *)((char *)&botData->scriptedAgentInfo + 8 * v32 + 9352) = v31;
              *((double *)&botData->scriptedAgentInfo + v32 + 1173) = v33;
              ++botData->botInfo.aaSharedGlob.screenTargetCount;
            }
          }
        }
      }
    }
  }
}

/*
==============
Bot_UpdateScriptGoal
==============
*/
_BOOL8 Bot_UpdateScriptGoal(bot_data_t *botData)
{
  $3396140AF3A78F7FCD1D73807E505015 *v2; 
  pathnode_t *nearestNode; 
  int v5; 
  gentity_s *ent; 
  pathnode_t *v7; 
  float yaw; 
  gentity_s *v9; 
  vec3_t angles; 
  vec3_t v11; 
  tmat33_t<vec3_t> axis; 
  tmat33_t<vec3_t> v13; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24173, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v2 = &botData->8;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23600, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( botData->botInfo.scriptGoal.type == BOT_SCR_GOAL_NONE || Bot_ShouldDelayPathGen(botData) )
    return 0i64;
  nearestNode = botData->botInfo.scriptGoal.nearestNode;
  if ( nearestNode && nearestNode->dynamic.bInactive )
  {
    if ( Bot_ActiveGoalIsScriptGoal(botData) )
      Bot_BadPath(v2->botInfo.ent);
    Bot_ClearScriptGoal(botData);
    return 0i64;
  }
  v5 = Bot_AtScriptGoal(botData);
  ent = v2->botInfo.ent;
  if ( v5 )
  {
    if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23990, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
      __debugbreak();
    if ( (LOBYTE(botData->scriptedAgentInfo.blackboard.m_ShootParams.m_Pos.v[0]) & 4) == 0 )
      goto LABEL_49;
    yaw = botData->botInfo.scriptGoal.yaw;
    v9 = v2->botInfo.ent;
    angles.v[0] = 0.0;
    angles.v[1] = yaw;
    angles.v[2] = 0.0;
    v11.v[1] = v9->r.currentAngles.v[1];
    v11.v[0] = 0.0;
    v11.v[2] = 0.0;
    AnglesToAxis(&angles, &axis);
    AnglesToAxis(&v11, &v13);
    if ( (float)((float)((float)(v13.m[0].v[0] * axis.m[0].v[0]) + (float)(axis.m[0].v[1] * v13.m[0].v[1])) + (float)(axis.m[0].v[2] * v13.m[0].v[2])) > 0.94999999 )
    {
LABEL_49:
      if ( !botData->botInfo.scriptGoalNotified )
      {
        GScr_Notify(v2->botInfo.ent, scr_const.goal, 0);
        botData->botInfo.scriptGoalNotified = level.time;
      }
    }
  }
  else
  {
    if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6930, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
      __debugbreak();
    if ( !botData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6931, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState )", (const char *)&queryFormat, "botData->botInfo.playerState") )
      __debugbreak();
    if ( botData->botInfo.scriptGoal.type )
    {
      if ( botData == (bot_data_t *)-8i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13725, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
        __debugbreak();
      if ( Bot_NavPathExists(&botData->botInfo) )
      {
        if ( Bot_ActiveGoalIsScriptGoal(botData) )
        {
          if ( botData->botInfo.scriptGoal.type == BOT_SCR_GOAL_OBJECTIVE )
          {
            if ( Bot_IsAtPathEnd(botData, 250.0) )
            {
              if ( Bot_CanSlide(botData) )
              {
                v7 = botData->botInfo.scriptGoal.nearestNode;
                if ( v7 )
                {
                  if ( Bot_CanSeeNode(botData, v7) && Bot_IsFacingPosition(botData, &botData->botInfo.scriptGoal.pos) )
                    botData->botInfo.slideDesiredTime = level.time + 1000;
                }
              }
            }
          }
        }
      }
    }
  }
  return !Bot_ShouldDelayScriptGoal(botData) && (Bot_PathExists(&botData->botInfo) && Bot_ActiveGoalIsScriptGoal(botData) || Bot_ResumeScriptGoal(botData));
}

/*
==============
Bot_UpdateScriptGoalLook
==============
*/
__int64 Bot_UpdateScriptGoalLook(bot_data_t *botData, vec3_t *viewAnglesOut)
{
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11881, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( (LOBYTE(botData->scriptedAgentInfo.blackboard.m_ShootParams.m_Pos.v[0]) & 4) == 0 || !Bot_AtScriptGoal(botData) )
    return 0i64;
  viewAnglesOut->v[1] = botData->botInfo.scriptGoal.yaw;
  Bot_ApplyTwitchVectors(&botData->botInfo, NULL, viewAnglesOut);
  return 1i64;
}

/*
==============
Bot_UpdateScriptedButtons
==============
*/
void Bot_UpdateScriptedButtons(bot_data_t *botData, usercmd_s *cmd)
{
  int scriptPress; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22746, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22751, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  if ( (*((_BYTE *)&botData->scriptedAgentInfo + 9020) & 1) != 0 )
  {
    cmd->buttons |= 8ui64;
    if ( botData->botInfo.scriptUseButtonEndTime <= level.time )
      botData->botInfo.scriptPress &= ~1u;
  }
  if ( (*((_BYTE *)&botData->scriptedAgentInfo + 9020) & 2) != 0 )
  {
    cmd->buttons &= ~2ui64;
    if ( !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 0x25u) )
      cmd->buttons |= 1ui64;
    if ( botData->botInfo.scriptAttackButtonEndTime <= level.time )
      botData->botInfo.scriptPress &= ~2u;
  }
  scriptPress = botData->botInfo.scriptPress;
  if ( (scriptPress & 4) != 0 )
  {
    cmd->buttons &= ~2ui64;
    if ( !GameModeFlagContainer<enum PWeaponFlagsCommon,enum PWeaponFlagsSP,enum PWeaponFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->weapCommon.weapFlags, ACTIVE, 0xFu) )
      cmd->buttons |= 0x20000ui64;
    botData->botInfo.scriptPress &= ~4u;
    scriptPress = botData->botInfo.scriptPress;
  }
  if ( (scriptPress & 8) != 0 )
  {
    if ( !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 0x1Au) )
      cmd->buttons |= 0x100ui64;
    botData->botInfo.scriptPress &= ~8u;
    scriptPress = botData->botInfo.scriptPress;
  }
  if ( (scriptPress & 0x10) != 0 )
  {
    cmd->buttons &= ~2ui64;
    if ( !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 0x26u) )
      cmd->buttons |= 4ui64;
    botData->botInfo.scriptPress &= ~0x10u;
    scriptPress = botData->botInfo.scriptPress;
  }
  if ( (scriptPress & 0x20) != 0 )
  {
    if ( !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 0x19u) )
      cmd->buttons |= 2ui64;
    botData->botInfo.scriptPress &= ~0x20u;
    scriptPress = botData->botInfo.scriptPress;
  }
  if ( (scriptPress & 0x40) != 0 )
  {
    cmd->buttons |= 0x200ui64;
    if ( botData->botInfo.scriptADSButtonEndTime <= level.time )
      botData->botInfo.scriptPress &= ~0x40u;
  }
  if ( *((char *)&botData->scriptedAgentInfo + 9020) < 0 )
  {
    if ( !GameModeFlagContainer<enum PWeaponFlagsCommon,enum PWeaponFlagsSP,enum PWeaponFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->weapCommon.weapFlags, ACTIVE, 0x29u) && !GameModeFlagContainer<enum PWeaponFlagsCommon,enum PWeaponFlagsSP,enum PWeaponFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->weapCommon.weapFlags, ACTIVE, 0xFu) )
      cmd->buttons |= 0x1000ui64;
    if ( botData->botInfo.scriptLethalButtonEndTime <= level.time )
      botData->botInfo.scriptPress &= ~0x80u;
  }
  if ( (botData->botInfo.scriptPress & 0x100) != 0 )
  {
    if ( !GameModeFlagContainer<enum PWeaponFlagsCommon,enum PWeaponFlagsSP,enum PWeaponFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->weapCommon.weapFlags, ACTIVE, 0x19u) && !GameModeFlagContainer<enum PWeaponFlagsCommon,enum PWeaponFlagsSP,enum PWeaponFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->weapCommon.weapFlags, ACTIVE, 0xFu) )
      cmd->buttons |= 0x2000ui64;
    if ( botData->botInfo.scriptTacticalButtonEndTime <= level.time )
      botData->botInfo.scriptPress &= ~0x100u;
  }
  if ( (botData->botInfo.scriptPress & 0x200) != 0 )
  {
    cmd->buttons |= 0x100000000ui64;
    if ( botData->botInfo.scriptSpecialButtonEndTime <= level.time )
      botData->botInfo.scriptPress &= ~0x200u;
  }
}

/*
==============
Bot_UpdateSearchLook
==============
*/
__int64 Bot_UpdateSearchLook(bot_data_t *botData)
{
  const pathnode_t *v2; 
  pathnode_t *v3; 
  unsigned __int16 v4; 
  int v6; 
  bitarray<224> *AllTeamFlags; 
  int v8; 
  unsigned __int16 *searchLookNodes; 
  int *searchLookVisTime; 
  pathnode_t *v11; 
  gentity_s *ent; 
  float v13; 
  float v14; 
  float v15; 
  BOOL v16; 
  float v17; 
  float v18; 
  __int128 v19; 
  float v20; 
  float v24; 
  float v25; 
  float v26; 
  sentient_s *v27; 
  gentity_s *v28; 
  float v29; 
  float v30; 
  __int128 v31; 
  float v32; 
  float v36; 
  float v37; 
  vec3_t pos; 
  bitarray<224> iTeamFlags; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12351, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12364, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12365, ASSERT_TYPE_ASSERT, "( botInfo->sentient )", (const char *)&queryFormat, "botInfo->sentient") )
    __debugbreak();
  if ( !SV_BotRequirePathnodes(botData) )
    return 0i64;
  v2 = Sentient_NearestNode(botData->botInfo.sentient);
  v3 = (pathnode_t *)v2;
  if ( !v2 )
    return 0i64;
  v4 = Path_ConvertNodeToIndex(v2);
  if ( botData->botInfo.searchLookNearestNode != v4 )
  {
    botData->botInfo.searchLookNearestNode = v4;
    pathnode_t::GetPos(v3, &pos);
    botData->botInfo.searchLookNodeCount = AI_FindEntrances(&pos, botData->botInfo.searchLookNodes, 16);
    *(_QWORD *)((char *)&botData->scriptedAgentInfo + 29228) = 0i64;
    *(_QWORD *)((char *)&botData->scriptedAgentInfo + 29236) = 0i64;
  }
  if ( level.time > botData->botInfo.searchLookNext || botData->botInfo.searchLookPoint.v[0] == 0.0 && botData->botInfo.searchLookPoint.v[1] == 0.0 && botData->botInfo.searchLookPoint.v[2] == 0.0 )
  {
    v6 = -1;
    if ( Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) )
      AllTeamFlags = (bitarray<224> *)Com_TeamsSP_GetAllTeamFlags();
    else
      AllTeamFlags = (bitarray<224> *)Com_TeamsMP_GetAllTeamFlags();
    iTeamFlags = *AllTeamFlags;
    v8 = 0;
    if ( botData->botInfo.searchLookNodeCount <= 0 )
    {
LABEL_44:
      botData->botInfo.searchLookNext = level.time + G_irand(3000, 6000);
      return 1i64;
    }
    searchLookNodes = botData->botInfo.searchLookNodes;
    searchLookVisTime = botData->botInfo.searchLookVisTime;
    while ( 1 )
    {
      v11 = Path_ConvertIndexToNode(*searchLookNodes);
      pathnode_t::GetPos(v11, &pos);
      ent = botData->botInfo.ent;
      v13 = ent->r.currentOrigin.v[1];
      v14 = ent->r.currentOrigin.v[0];
      v15 = ent->r.currentOrigin.v[2];
      v16 = (float)((float)((float)((float)(v13 - pos.v[1]) * (float)(v13 - pos.v[1])) + (float)((float)(v14 - pos.v[0]) * (float)(v14 - pos.v[0]))) + (float)((float)(v15 - pos.v[2]) * (float)(v15 - pos.v[2]))) < 40000.0;
      if ( level.teammode != TEAMMODE_FFA && (float)((float)((float)((float)(v13 - pos.v[1]) * (float)(v13 - pos.v[1])) + (float)((float)(v14 - pos.v[0]) * (float)(v14 - pos.v[0]))) + (float)((float)(v15 - pos.v[2]) * (float)(v15 - pos.v[2]))) >= 40000.0 )
      {
        v17 = pos.v[0] - v14;
        v19 = LODWORD(pos.v[1]);
        v18 = pos.v[1] - v13;
        v20 = pos.v[2] - v15;
        *(float *)&v19 = fsqrt((float)((float)(v18 * v18) + (float)(v17 * v17)) + (float)(v20 * v20));
        _XMM3 = v19;
        __asm
        {
          vcmpless xmm0, xmm3, xmm12
          vblendvps xmm0, xmm3, xmm10, xmm0
        }
        v24 = (float)(1.0 / *(float *)&_XMM0) * v17;
        v25 = (float)(1.0 / *(float *)&_XMM0) * v18;
        v26 = (float)(1.0 / *(float *)&_XMM0) * v20;
        v27 = Sentient_FirstSentient(&iTeamFlags);
        do
        {
          if ( !v27 )
            break;
          if ( Bot_IsCharacterActive(v27->ent) )
          {
            if ( AI_IsAlliedSentient(botData->botInfo.sentient, v27) )
            {
              if ( v27 != botData->botInfo.sentient )
              {
                v28 = botData->botInfo.ent;
                v29 = v27->ent->r.currentOrigin.v[0] - v28->r.currentOrigin.v[0];
                v31 = LODWORD(v27->ent->r.currentOrigin.v[1]);
                v30 = v27->ent->r.currentOrigin.v[1] - v28->r.currentOrigin.v[1];
                v32 = v27->ent->r.currentOrigin.v[2] - v28->r.currentOrigin.v[2];
                *(float *)&v31 = fsqrt((float)((float)(v30 * v30) + (float)(v29 * v29)) + (float)(v32 * v32));
                _XMM1 = v31;
                __asm
                {
                  vcmpless xmm0, xmm1, xmm12
                  vblendvps xmm0, xmm1, xmm10, xmm0
                }
                if ( (float)((float)((float)((float)(v29 * (float)(1.0 / *(float *)&_XMM0)) * v24) + (float)((float)(v30 * (float)(1.0 / *(float *)&_XMM0)) * v25)) + (float)((float)(v32 * (float)(1.0 / *(float *)&_XMM0)) * v26)) > botData->botInfo.sight.fovDot )
                  v16 = 1;
              }
            }
          }
          v27 = Sentient_NextSentient(v27, &iTeamFlags);
        }
        while ( !v16 );
      }
      if ( Bot_IsFacingPosition(botData, &pos) )
        *searchLookVisTime = level.time;
      if ( v6 != -1 && *searchLookVisTime > v6 )
        goto LABEL_43;
      if ( !v16 )
        break;
      if ( v6 == -1 )
        goto LABEL_42;
LABEL_43:
      ++v8;
      ++searchLookNodes;
      ++searchLookVisTime;
      if ( v8 >= botData->botInfo.searchLookNodeCount )
        goto LABEL_44;
    }
    v6 = *searchLookVisTime;
LABEL_42:
    v36 = pos.v[1];
    botData->botInfo.searchLookPoint.v[0] = pos.v[0];
    v37 = pos.v[2] + 40.0;
    botData->botInfo.searchLookPoint.v[1] = v36;
    botData->botInfo.searchLookPoint.v[2] = v37;
    goto LABEL_43;
  }
  Bot_LookAtPoint(botData, &botData->botInfo.searchLookPoint, 100, BOT_LOOK_CODE_SEARCH);
  return 1i64;
}

/*
==============
Bot_UpdateSeeThroughForEnt
==============
*/
void Bot_UpdateSeeThroughForEnt(bot_data_t *botData, const gentity_s *ent)
{
  __int128 v2; 
  __int128 v3; 
  __int128 v4; 
  __int128 v5; 
  __int128 v6; 
  __int128 v7; 
  __int128 v8; 
  gentity_s *v11; 
  AIBotInterface *m_pAI; 
  sentient_info_t *SentientInfo; 
  const gentity_s *v14; 
  unsigned __int8 *priorityMap; 
  float fraction; 
  gentity_s *v17; 
  float v18; 
  float v19; 
  float v20; 
  __int128 v21; 
  float v25; 
  float v26; 
  float v27; 
  float v28; 
  float v29; 
  float v30; 
  const char *MapName; 
  const char *v32; 
  unsigned __int8 *WeaponPriorityMap; 
  float v34; 
  unsigned __int8 *v35; 
  float v36; 
  float v37; 
  float v38; 
  float v39; 
  __int128 v40; 
  const char *v44; 
  const char *v45; 
  const char *EntityModelName; 
  const char *skipChildren; 
  AIBotWrapper v48; 
  trace_t results; 
  vec3_t vEyePosOut; 
  vec3_t start; 
  vec3_t v; 
  vec3_t otherErrorOrigin; 
  vec3_t end; 
  float v55; 
  float v56; 
  float v57; 
  __int128 v58; 
  __int128 v59; 
  __int128 v60; 
  __int128 v61; 
  __int128 v62; 
  __int128 v63; 
  __int128 v64; 

  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2879, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( !ent->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2880, ASSERT_TYPE_ASSERT, "( ent->sentient )", (const char *)&queryFormat, "ent->sentient") )
    __debugbreak();
  AICommonInterface::AICommonInterface(&v48.m_botInterface);
  v48.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v48.m_botAgentInterface);
  v11 = botData->botInfo.ent;
  v48.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v48.m_pAI = NULL;
  AIBotWrapper::Setup(&v48, v11);
  m_pAI = v48.m_pAI;
  if ( !v48.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2881, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  SentientInfo = Sentient_GetSentientInfo(botData->botInfo.sentient, ent->sentient);
  if ( !SentientInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2887, ASSERT_TYPE_ASSERT, "( pInfo )", (const char *)&queryFormat, "pInfo") )
    __debugbreak();
  v14 = NULL;
  if ( SentientInfo->VisCache.bVisible && !Bot_EntityIsInvisible(ent) )
  {
    m_pAI->GetEyePosition(m_pAI, &start);
    Sentient_GetHeadPosition(ent->sentient, &vEyePosOut);
    if ( (start.v[0] != vEyePosOut.v[0] || start.v[1] != vEyePosOut.v[1] || start.v[2] != vEyePosOut.v[2]) && G_Main_SightTrace(&start, &vEyePosOut, botData->botInfo.ent->s.number, ent->s.number, 41965569) )
    {
      results.fraction = FLOAT_1_0;
      priorityMap = BG_GetWeaponPriorityMap(&NULL_WEAPON, 0);
      PhysicsQuery_LegacyTrace(PHYSICS_WORLD_ID_SERVER_DETAIL, &results, &start, &vEyePosOut, &bounds_origin, botData->botInfo.ent->s.number, 0, contents, 1, priorityMap, All);
      fraction = results.fraction;
      if ( results.fraction < 1.0 && (results.surfaceFlags & 0x100) == 0 )
      {
        if ( results.hitType == TRACE_HITTYPE_ENTITY )
        {
          if ( Trace_GetEntityHitId(&results) < 0x7FEu )
          {
            v17 = g_entities;
            v14 = &v17[Trace_GetEntityHitId(&results)];
            if ( v14 == ent || ((v14->s.eType - 3) & 0xFFF7) == 0 )
              return;
          }
          fraction = results.fraction;
        }
        v64 = v2;
        v63 = v3;
        v62 = v4;
        v18 = (float)((float)(vEyePosOut.v[0] - start.v[0]) * fraction) + start.v[0];
        v19 = (float)((float)(vEyePosOut.v[1] - start.v[1]) * fraction) + start.v[1];
        v20 = (float)((float)(vEyePosOut.v[2] - start.v[2]) * fraction) + start.v[2];
        v21 = LODWORD(start.v[1]);
        v61 = v5;
        *(float *)&v21 = fsqrt((float)((float)((float)(start.v[1] - vEyePosOut.v[1]) * (float)(start.v[1] - vEyePosOut.v[1])) + (float)((float)(start.v[0] - vEyePosOut.v[0]) * (float)(start.v[0] - vEyePosOut.v[0]))) + (float)((float)(start.v[2] - vEyePosOut.v[2]) * (float)(start.v[2] - vEyePosOut.v[2])));
        _XMM3 = v21;
        __asm
        {
          vcmpless xmm0, xmm3, cs:__real@80000000
          vblendvps xmm0, xmm3, xmm11, xmm0
        }
        *(float *)&_XMM3 = (float)(start.v[1] - vEyePosOut.v[1]) * (float)(1.0 / *(float *)&_XMM0);
        v25 = (float)(start.v[2] - vEyePosOut.v[2]) * (float)(1.0 / *(float *)&_XMM0);
        v26 = (float)(start.v[0] - vEyePosOut.v[0]) * (float)(1.0 / *(float *)&_XMM0);
        v60 = v6;
        v59 = v7;
        v27 = (float)(*(float *)&_XMM3 * 15.0) + v19;
        LODWORD(v28) = _XMM3 ^ _xmm;
        LODWORD(v29) = LODWORD(v25) ^ _xmm;
        v30 = (float)(COERCE_FLOAT(_XMM3 ^ _xmm) * 15.0) + v19;
        v58 = v8;
        otherErrorOrigin.v[2] = (float)(COERCE_FLOAT(LODWORD(v25) ^ _xmm) * 15.0) + v20;
        end.v[0] = v18;
        end.v[1] = v19;
        end.v[2] = v20;
        v.v[0] = (float)(v26 * 15.0) + v18;
        v.v[1] = v27;
        v.v[2] = (float)(v25 * 15.0) + v20;
        LODWORD(results.normal.v[0]) = LODWORD(v26) ^ _xmm;
        results.normal.v[1] = v28;
        LODWORD(results.normal.v[2]) = LODWORD(v25) ^ _xmm;
        otherErrorOrigin.v[0] = (float)(COERCE_FLOAT(LODWORD(v26) ^ _xmm) * 15.0) + v18;
        otherErrorOrigin.v[1] = v30;
        if ( v.v[0] == otherErrorOrigin.v[0] && v27 == v30 && (float)((float)(v25 * 15.0) + v20) == (float)((float)(COERCE_FLOAT(LODWORD(v25) ^ _xmm) * 15.0) + v20) )
        {
          MapName = SV_Game_GetMapName();
          v32 = vtos(&v);
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2963, ASSERT_TYPE_ASSERT, "(!Vec3Compare( drawPoint[0], drawPoint[1] ))", "%s\n\tBot_UpdateSeeThroughForEnt (1) somehow found duplicate origin %s in map %s", "!Vec3Compare( drawPoint[0], drawPoint[1] )", v32, MapName) )
            __debugbreak();
        }
        results.fraction = FLOAT_1_0;
        WeaponPriorityMap = BG_GetWeaponPriorityMap(&NULL_WEAPON, 0);
        PhysicsQuery_LegacyTrace(PHYSICS_WORLD_ID_SERVER_DETAIL, &results, &vEyePosOut, &end, &bounds_origin, botData->botInfo.ent->s.number, 0, contents, 1, WeaponPriorityMap, All);
        v34 = results.fraction;
        if ( results.fraction >= 1.0 || (results.surfaceFlags & 0x100) != 0 )
        {
          LODWORD(results.normal.v[0]) = LODWORD(v26) ^ _xmm;
          results.normal.v[1] = v28;
          results.normal.v[2] = v29;
        }
        else
        {
          if ( results.hitType == TRACE_HITTYPE_ENTITY && &g_entities[results.hitId] == ent )
          {
            v35 = BG_GetWeaponPriorityMap(&NULL_WEAPON, 0);
            PhysicsQuery_LegacyTrace(PHYSICS_WORLD_ID_SERVER_DETAIL, &results, &vEyePosOut, &end, &bounds_origin, ent->s.number, 0, contents, 1, v35, All);
            v34 = results.fraction;
          }
          v36 = (float)((float)(end.v[0] - vEyePosOut.v[0]) * v34) + vEyePosOut.v[0];
          v37 = (float)((float)(end.v[1] - vEyePosOut.v[1]) * v34) + vEyePosOut.v[1];
          v38 = (float)((float)(end.v[2] - vEyePosOut.v[2]) * v34) + vEyePosOut.v[2];
          v40 = LODWORD(vEyePosOut.v[1]);
          v39 = vEyePosOut.v[1] - end.v[1];
          *(float *)&v40 = fsqrt((float)((float)(v39 * v39) + (float)((float)(vEyePosOut.v[0] - end.v[0]) * (float)(vEyePosOut.v[0] - end.v[0]))) + (float)((float)(vEyePosOut.v[2] - end.v[2]) * (float)(vEyePosOut.v[2] - end.v[2])));
          _XMM3 = v40;
          __asm
          {
            vcmpless xmm0, xmm3, cs:__real@80000000
            vblendvps xmm0, xmm3, xmm11, xmm0
          }
          results.normal.v[0] = (float)(vEyePosOut.v[0] - end.v[0]) * (float)(1.0 / *(float *)&_XMM0);
          results.normal.v[1] = (float)(vEyePosOut.v[1] - end.v[1]) * (float)(1.0 / *(float *)&_XMM0);
          otherErrorOrigin.v[2] = (float)((float)((float)(vEyePosOut.v[2] - end.v[2]) * (float)(1.0 / *(float *)&_XMM0)) * 15.0) + v38;
          v55 = v36;
          v56 = v37;
          v57 = v38;
          results.normal.v[2] = (float)(vEyePosOut.v[2] - end.v[2]) * (float)(1.0 / *(float *)&_XMM0);
          otherErrorOrigin.v[0] = (float)(results.normal.v[0] * 15.0) + v36;
          otherErrorOrigin.v[1] = (float)(results.normal.v[1] * 15.0) + v37;
          if ( v.v[0] == otherErrorOrigin.v[0] && v.v[1] == (float)((float)((float)(v39 * (float)(1.0 / *(float *)&_XMM0)) * 15.0) + v37) && v.v[2] == (float)((float)((float)((float)(vEyePosOut.v[2] - end.v[2]) * (float)(1.0 / *(float *)&_XMM0)) * 15.0) + v38) )
          {
            v44 = SV_Game_GetMapName();
            v45 = vtos(&v);
            if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2984, ASSERT_TYPE_ASSERT, "(!Vec3Compare( drawPoint[0], drawPoint[1] ))", "%s\n\tBot_UpdateSeeThroughForEnt (2) somehow found duplicate origin %s in map %s", "!Vec3Compare( drawPoint[0], drawPoint[1] )", v45, v44) )
              __debugbreak();
          }
        }
        if ( (unsigned int)Bot_DebugValidNewErrorLocation(BOT_ERROR_LOC_SEE_THROUGH, &v, &otherErrorOrigin, 50.0) && (unsigned int)Bot_SeeThruBlockedByAllSurroundingGeo(&v, &otherErrorOrigin, botData->botInfo.ent->s.number, contents, 0) )
        {
          if ( v14 )
          {
            EntityModelName = G_DebugGetEntityModelName(v14);
            skipChildren = j_va("%i - %s", (unsigned int)v14->s.number, EntityModelName);
            Bot_DebugAddErrorLocation(botData, BOT_ERROR_LOC_SEE_THROUGH, 50.0, &v, &otherErrorOrigin, &v14->r.currentOrigin, skipChildren);
          }
          else
          {
            Bot_DebugAddErrorLocation(botData, BOT_ERROR_LOC_SEE_THROUGH, 50.0, &v, &otherErrorOrigin, NULL, results.debugHitName);
          }
        }
      }
    }
  }
}

/*
==============
Bot_UpdateSentientHistory
==============
*/
void Bot_UpdateSentientHistory(sentient_s *sentient)
{
  signed __int64 v2; 
  bot_sentient_history_t *v3; 
  signed __int64 v4; 
  float v5; 
  float v6; 
  float v7; 
  __int64 v8; 
  unsigned int maxSentients; 
  vec3_t vOriginOut; 

  if ( s_botSentientHistory )
  {
    if ( !sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1944, ASSERT_TYPE_ASSERT, "( sentient )", (const char *)&queryFormat, "sentient") )
      __debugbreak();
    v2 = sentient - level.sentients;
    if ( !s_botSentientHistory && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1946, ASSERT_TYPE_ASSERT, "( s_botSentientHistory )", (const char *)&queryFormat, "s_botSentientHistory") )
      __debugbreak();
    if ( (unsigned int)v2 >= level.maxSentients )
    {
      maxSentients = level.maxSentients;
      LODWORD(v8) = v2;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1947, ASSERT_TYPE_ASSERT, "(unsigned)( sentientIndex ) < (unsigned)( level.maxSentients )", "sentientIndex doesn't index level.maxSentients\n\t%i not in [0, %i)", v8, maxSentients) )
        __debugbreak();
    }
    Sentient_GetOrigin(sentient, &vOriginOut);
    v3 = s_botSentientHistory;
    v4 = v2;
    v5 = s_botSentientHistory[v4].lastCheckPosition.v[2] - vOriginOut.v[2];
    v6 = s_botSentientHistory[v4].lastCheckPosition.v[0] - vOriginOut.v[0];
    v7 = s_botSentientHistory[v4].lastCheckPosition.v[1] - vOriginOut.v[1];
    if ( (float)((float)((float)(v7 * v7) + (float)(v6 * v6)) + (float)(v5 * v5)) > 90000.0 )
    {
      s_botSentientHistory[v4].lastCheckPosition.v[0] = vOriginOut.v[0];
      v3[v4].lastCheckPosition.v[1] = vOriginOut.v[1];
      v3[v4].lastCheckPosition.v[2] = vOriginOut.v[2];
      v3[v4].lastTimeMovedPositions = level.time;
    }
  }
}

/*
==============
Bot_UpdateSight
==============
*/
void Bot_UpdateSight(bot_data_t *botData, usercmd_s *cmd)
{
  usercmd_s *v3; 
  gentity_s *ent; 
  signed int v5; 
  AIBotInterface *m_pAI; 
  double v7; 
  double v8; 
  const SvClientMP *CommonClient; 
  sentient_info_t *SentientInfo; 
  __int16 number; 
  unsigned int v12; 
  double v13; 
  gentity_s *HidingFromEntity; 
  vec3_t *p_currentOrigin; 
  float v16; 
  __int128 v17; 
  __int128 v18; 
  float v19; 
  __int128 v20; 
  float v24; 
  float v25; 
  int time; 
  int traversal; 
  __int64 v28; 
  __int64 v29; 
  __int64 v30; 
  __int64 v31; 
  AIBotWrapper v33; 
  __int128 v34; 
  double v35; 
  int v36; 
  vec3_t vEyePosOut; 

  v3 = cmd;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6535, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !v3 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6536, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  AICommonInterface::AICommonInterface(&v33.m_botInterface);
  v33.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v33.m_botAgentInterface);
  ent = botData->botInfo.ent;
  v5 = 0;
  v33.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v33.m_pAI = NULL;
  AIBotWrapper::Setup(&v33, ent);
  m_pAI = v33.m_pAI;
  if ( !v33.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6548, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  Bot_SetSightFovValues(botData);
  AICommonInterface::UpdateSight(m_pAI);
  if ( botData->botInfo.inaccuracy == 0.0 || (v7 = G_random(), *(float *)&v7 < 0.050000001) )
  {
    if ( !EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) || !EntHandle::ent(&botData->botInfo.sentient->targetEnt) )
    {
      v8 = G_flrand(botData->botMatchData.minInaccuracy, botData->botMatchData.maxInaccuracy);
      botData->botInfo.inaccuracy = *(float *)&v8;
    }
  }
  if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6564, ASSERT_TYPE_ASSERT, "( botInfo->sentient )", (const char *)&queryFormat, "botInfo->sentient") )
    __debugbreak();
  if ( !v3 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6565, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  v34 = 0ui64;
  v35 = 0.0;
  v36 = 0;
  if ( (int)SvClient::ms_clientCount > 0 )
  {
    do
    {
      if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
        __debugbreak();
      CommonClient = (const SvClientMP *)SvClient::GetCommonClient(v5);
      if ( Bot_IsClientActive(CommonClient) )
      {
        if ( !CommonClient->gentity && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6575, ASSERT_TYPE_ASSERT, "( cl->gentity )", (const char *)&queryFormat, "cl->gentity") )
          __debugbreak();
        if ( !CommonClient->gentity->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6576, ASSERT_TYPE_ASSERT, "( cl->gentity->sentient )", (const char *)&queryFormat, "cl->gentity->sentient") )
          __debugbreak();
        if ( !AI_IsAlliedSentient(botData->botInfo.sentient, CommonClient->gentity->sentient) )
        {
          SentientInfo = Sentient_GetSentientInfo(botData->botInfo.sentient, CommonClient->gentity->sentient);
          if ( !SentientInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6581, ASSERT_TYPE_ASSERT, "( sentientInfo )", (const char *)&queryFormat, "sentientInfo") )
            __debugbreak();
          number = CommonClient->gentity->s.number;
          if ( (unsigned __int16)number >= 0xF8u )
          {
            LODWORD(v29) = 248;
            LODWORD(v28) = number;
            if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6582, ASSERT_TYPE_ASSERT, "(unsigned)( cl->gentity->s.number ) < (unsigned)( ((200 + 48)) )", "cl->gentity->s.number doesn't index MAX_COMPASS_ACTORS_MP\n\t%i not in [0, %i)", v28, v29) )
              __debugbreak();
          }
          if ( SentientInfo->VisCache.bVisible )
          {
            v12 = CommonClient->gentity->s.number;
            if ( v12 >= 0xE0 )
            {
              LODWORD(v31) = 224;
              LODWORD(v30) = v12;
              if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\bitarray.h", 263, ASSERT_TYPE_ASSERT, "( pos ) < ( impl()->getBitCount() )", "%s < %s\n\t%u, %u", "pos", "impl()->getBitCount()", v30, v31) )
                __debugbreak();
            }
            *((_DWORD *)&v34 + ((unsigned __int64)v12 >> 5)) |= 0x80000000 >> (v12 & 0x1F);
          }
        }
      }
      ++v5;
    }
    while ( v5 < (int)SvClient::ms_clientCount );
    v5 = v36;
    v3 = cmd;
  }
  v13 = v35;
  *(_OWORD *)v3->sightedClientsMask.data = v34;
  *(double *)&v3->sightedClientsMask.data[4] = v13;
  v3->sightedClientsMask.data[6] = v5;
  HidingFromEntity = Bot_GetHidingFromEntity(botData);
  if ( HidingFromEntity )
  {
    if ( HidingFromEntity->s.eType == ET_MISSILE && level.time - botData->botInfo.grenadeLastInSightCheck > 450 )
    {
      p_currentOrigin = &HidingFromEntity->r.currentOrigin;
      botData->botInfo.grenadeLastInSightCheck = level.time;
      if ( Bot_CanSeePointViaNodes(botData, &HidingFromEntity->r.currentOrigin) )
      {
        Sentient_GetEyePosition(botData->botInfo.sentient, &vEyePosOut);
        LODWORD(v16) = COERCE_UNSIGNED_INT(p_currentOrigin->v[0] - vEyePosOut.v[0]) ^ _xmm;
        v17 = LODWORD(p_currentOrigin->v[1]);
        *(float *)&v17 = p_currentOrigin->v[1] - vEyePosOut.v[1];
        v18 = v17 ^ _xmm;
        v19 = vEyePosOut.v[2];
        v20 = v18;
        *(float *)&v20 = fsqrt((float)(*(float *)&v18 * *(float *)&v18) + (float)(v16 * v16));
        _XMM3 = v20;
        __asm
        {
          vcmpless xmm0, xmm3, cs:__real@80000000
          vblendvps xmm0, xmm3, xmm1, xmm0
        }
        v24 = (float)((float)(v16 * (float)(1.0 / *(float *)&_XMM0)) * 1000.0) + vEyePosOut.v[0];
        v25 = (float)((float)(*(float *)&v18 * (float)(1.0 / *(float *)&_XMM0)) * 1000.0) + vEyePosOut.v[1];
        if ( v24 == 0.0 && v25 == 0.0 && vEyePosOut.v[2] == 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14633, ASSERT_TYPE_ASSERT, "( Vec3NotZero( *point ) )", (const char *)&queryFormat, "Vec3NotZero( *point )") )
          __debugbreak();
        time = level.time;
        if ( botData->botInfo.lookAtType <= BOT_LOOK_CODE_SEEK || level.time >= botData->botInfo.lookAtTime )
        {
          botData->botInfo.lookAtType = BOT_LOOK_CODE_SEEK;
          botData->botInfo.lookAtTime = time + 550;
          botData->botInfo.lookAtPoint.v[0] = v24;
          botData->botInfo.lookAtPoint.v[1] = v25;
          botData->botInfo.lookAtPoint.v[2] = v19;
          traversal = botData->botInfo.traversal;
          if ( (traversal & 1) != 0 )
            botData->botInfo.traversal = traversal & 0xFFFFFFFE;
        }
      }
    }
  }
}

/*
==============
Bot_UpdateSprinting
==============
*/
void Bot_UpdateSprinting(bot_data_t *botData, usercmd_s *cmd)
{
  playerState_s *playerState; 
  PlayerHandIndex WeaponHandForViewWeapon; 
  int v6; 
  int v7; 
  int v8; 
  int flags; 
  int ShouldRushEnemy; 
  double LookAheadDist; 
  Weapon *weapon; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18664, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18667, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  if ( playerState == (playerState_s *)-808i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18669, ASSERT_TYPE_ASSERT, "( ss )", (const char *)&queryFormat, "ss") )
    __debugbreak();
  WeaponHandForViewWeapon = Bot_Weap_GetWeaponHandForViewWeapon(playerState);
  v6 = 1;
  weapon = (Weapon *)Bot_Weap_GetViewmodelWeapon(playerState);
  if ( !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&playerState->pm_flags, ACTIVE, 0x19u) && !Bot_IsUsingTurret(botData) && (!Bot_IsFiringWeapon(botData, cmd) || BG_HasPerk(&playerState->perks, 0x35u)) && (!Bot_IsReloading(botData) || BG_CanSprintReload(playerState)) )
  {
    if ( !Bot_Weap_HasUnderBarrelGL(playerState) || !BG_UsingAlternate(playerState) || ((v7 = Bot_Weap_AmmoInClip(playerState, weapon, WeaponHandForViewWeapon), v8 = Bot_Weap_AmmoNotInClip(playerState, weapon), v7) || v8 <= 0) && !Bot_IsThrowingGrenade(botData) )
    {
      if ( Bot_PathExists(&botData->botInfo) && (LOBYTE(botData->scriptedAgentInfo.blackboard.m_ShootParams.m_Pos.v[0]) & 0x10) == 0 && ((botData->botInfo.currentForceStance - 2) & 0xFD) != 0 && !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&playerState->pm_flags, ACTIVE, 0x21u) && !Bot_AtScriptGoal(botData) && (LOBYTE(botData->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) == 0 && (cmd->buttons & 0x80u) == 0i64 && (cmd->buttons & 0x40) == 0 && level.time >= botData->botInfo.lookAtTime && !playerState->sprintState.sprintButtonUpRequired && Bot_IsOnGround(botData) && cmd->forwardmove >= Dvar_GetInt_Internal_DebugName(DCONST_DVARINT_player_sprintForwardMinimum, "player_sprintForwardMinimum") )
      {
        if ( (*((_BYTE *)&botData->scriptedAgentInfo + 9016) & 0x10) == 0 )
        {
          if ( botData->botMatchData.intelligentSprintLevel < 1.0 || botData->botInfo.scriptGoal.type == BOT_SCR_GOAL_NONE )
            goto LABEL_44;
          if ( botData == (bot_data_t *)-8i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13725, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
            __debugbreak();
          if ( !Bot_NavPathExists(&botData->botInfo) || !Bot_ActiveGoalIsScriptGoal(botData) || !Bot_CloseToObjectiveGoal(botData) )
          {
LABEL_44:
            if ( botData->botMatchData.intelligentSprintLevel < 2.0 || (flags = botData->botInfo.flags, (flags & 0x2000) == 0) && (flags & 0x1000) == 0 )
              v6 = 0;
          }
        }
        if ( BG_HasPerk(&playerState->perks, 0x35u) || v6 || ((ShouldRushEnemy = Bot_ShouldRushEnemy(botData), !(unsigned int)Bot_IsNearEnemies(botData)) || ShouldRushEnemy) && (!Bot_CanSeeAndCanFireOnEnemy(botData) || !Bot_Weap_Ammo(playerState, weapon) || !Bot_IsInRangeOfEnemy(botData)) && (ShouldRushEnemy || Bot_Weap_IsShortRange(playerState) && !Bot_IsInRangeOfEnemy(botData) || (LookAheadDist = Bot_GetLookAheadDist(&botData->botInfo), *(float *)&LookAheadDist >= 100.0)) )
          cmd->buttons |= 2ui64;
      }
    }
  }
}

/*
==============
Bot_UpdateStance
==============
*/
void Bot_UpdateStance(bot_data_t *botData, usercmd_s *cmd)
{
  $3396140AF3A78F7FCD1D73807E505015 *v4; 
  int scriptFlags; 
  int v6; 
  int v7; 
  int v8; 
  double LookAheadDist; 
  int v10; 
  double v11; 
  int flags; 
  int v13; 
  bot_path_style_t PathingStyle; 
  int crouchEndTime; 
  ai_stance_e v16; 
  unsigned int StopGoalStance; 
  int v18; 
  int v19; 
  BOOL v20; 
  int time; 
  char currentForceStance; 
  const dvar_t *v23; 
  int integer; 
  GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64> *p_pm_flags; 
  unsigned int v26; 
  playerState_s *v27; 
  const Bounds *Bounds; 
  unsigned __int64 v29; 
  int v30; 
  playerState_s *playerState; 
  trace_t results; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18365, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18368, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  v4 = &botData->8;
  if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18383, ASSERT_TYPE_ASSERT, "( botInfo->sentient )", (const char *)&queryFormat, "botInfo->sentient") )
    __debugbreak();
  scriptFlags = botData->botInfo.scriptFlags;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  LookAheadDist = Bot_GetLookAheadDist(&botData->botInfo);
  v10 = 0;
  if ( Bot_NavPathExists(&botData->botInfo) )
  {
    if ( !Bot_IsAtPathEnd(botData, *(float *)&LookAheadDist * 1.02) )
    {
      LOBYTE(v10) = *(float *)&LookAheadDist < 32.0;
      if ( v10 )
      {
        if ( ((botData->botInfo.flags & 0x8000) != 0 || (*((_BYTE *)&botData->scriptedAgentInfo + 9016) & 0x20) != 0) && (scriptFlags & 0x10) == 0 )
        {
          if ( level.time >= botData->botInfo.nextCrouchCheckTime )
          {
            v11 = G_random();
            flags = botData->botInfo.flags;
            if ( *(float *)&v11 >= 0.5 )
              v13 = flags & 0xFFFFFFFE;
            else
              v13 = flags | 1;
            botData->botInfo.flags = v13;
            botData->botInfo.nextCrouchCheckTime = level.time + 10000;
          }
          else
          {
            v7 = botData->botInfo.flags & 1;
          }
        }
      }
    }
  }
  if ( Bot_IsReloading(botData) && botData->botMatchData.strategyLevel >= 1.0 )
    v7 = 1;
  if ( GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 5u) && (GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 1u) || (playerState->mantleState.flags & 2) != 0) )
    v8 = 1;
  if ( Bot_EntityUsingRiotShield(v4->botInfo.ent, 1) && Bot_CanSeeAndCanFireOnEnemy(botData) && Bot_EnemyFacesBot(botData) && (LOBYTE(botData->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) == 0 && Bot_EnemyIsAttackingMe(botData, 3000) )
    v8 = 1;
  if ( (botData->botInfo.traversal & 0x1F) != 0 && (botData->botInfo.traversal & 0x10000) != 0 )
    v8 = 1;
  v30 = v8;
  PathingStyle = Bot_GetPathingStyle(botData, NULL);
  if ( botData->botInfo.navigation.isInBadPlace || PathingStyle == BOT_PATH_STYLE_BEELINE || PathingStyle == BOT_PATH_STYLE_SCRIPTED || (LOBYTE(botData->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) != 0 || GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 5u) )
  {
    botData->botInfo.crouchEndTime = 0;
  }
  else if ( v7 )
  {
    crouchEndTime = botData->botInfo.crouchEndTime;
    if ( level.time < crouchEndTime || level.time - crouchEndTime > 750 )
      botData->botInfo.crouchEndTime = level.time + G_irand(1000, 2400);
  }
  v16 = botData->botInfo.pNavigator->GetAllowedStances(botData->botInfo.pNavigator);
  StopGoalStance = v16;
  v18 = abs8(cmd->forwardmove);
  if ( v18 > 32 || (v19 = 1, abs8(cmd->rightmove) > 0x20u) )
    v19 = 0;
  if ( v18 <= 0 && !abs8(cmd->rightmove) )
    v6 = 1;
  v20 = (botData->botInfo.flags & 0x4000000) == 0;
  if ( (Bot_AtScriptGoal(botData) && v6 || Bot_AtScriptGoalNode(botData) && v19) && v20 )
  {
    StopGoalStance = Bot_GetStopGoalStance(botData->botInfo.scriptGoal.node);
    goto LABEL_71;
  }
  if ( Bot_IsAtPathEnd(botData, botData->botInfo.activeGoal.radius) && v19 && (botData->botInfo.flags & 0x800) != 0 )
  {
    StopGoalStance = 6;
    goto LABEL_71;
  }
  time = level.time;
  if ( botData->botInfo.proneEndTime > level.time )
  {
    if ( !Bot_ShouldRushEnemy(botData) )
    {
      StopGoalStance = v16 & 0xFFFFFFFC;
      goto LABEL_71;
    }
    time = level.time;
  }
  if ( v30 || botData->botInfo.crouchEndTime > time && !Bot_ShouldRushEnemy(botData) )
    StopGoalStance = v16 & 0xFFFFFFFE;
LABEL_71:
  currentForceStance = botData->botInfo.currentForceStance;
  switch ( currentForceStance )
  {
    case 4:
      StopGoalStance = 4;
      break;
    case 2:
      StopGoalStance = 2;
      break;
    case 1:
      StopGoalStance = 1;
      break;
  }
  v23 = DVARINT_bot_ForceStance;
  if ( !DVARINT_bot_ForceStance && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_ForceStance") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v23);
  integer = v23->current.integer;
  switch ( integer )
  {
    case 1:
      StopGoalStance = 1;
      break;
    case 2:
      StopGoalStance = 2;
      break;
    case 3:
      StopGoalStance = 4;
      break;
  }
  p_pm_flags = &playerState->pm_flags;
  v26 = StopGoalStance;
  if ( GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&playerState->pm_flags, ACTIVE, 0x21u) )
    StopGoalStance &= ~1u;
  if ( GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(p_pm_flags, ACTIVE, 0x23u) )
    StopGoalStance &= ~4u;
  if ( GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(p_pm_flags, ACTIVE, 0x22u) )
    StopGoalStance &= ~2u;
  if ( GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 1u) && !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 5u) && (StopGoalStance & 1) != 0 )
  {
    v27 = botData->botInfo.playerState;
    results.fraction = FLOAT_1_0;
    Bounds = BG_Suit_GetBounds(v27->suitIndex, PM_EFF_STANCE_DEFAULT);
    G_Main_TraceCapsule(&results, &v4->botInfo.ent->r.currentOrigin, &v4->botInfo.ent->r.currentOrigin, Bounds, v4->botInfo.ent->s.number, v4->botInfo.ent->clipmask & 0xFDFFBFFF);
    if ( results.allsolid )
      StopGoalStance = StopGoalStance & 0xFFFFFFFC | 2;
  }
  if ( v26 && !StopGoalStance )
  {
    if ( GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(p_pm_flags, ACTIVE, 0x21u) || (v16 & 1) == 0 )
    {
      if ( GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(p_pm_flags, ACTIVE, 0x22u) || (v16 & 2) == 0 )
      {
        if ( !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(p_pm_flags, ACTIVE, 0x23u) && (v16 & 4) != 0 )
          StopGoalStance = 4;
      }
      else
      {
        StopGoalStance = 2;
      }
    }
    else
    {
      StopGoalStance = 1;
    }
  }
  if ( (StopGoalStance & 3) == 0 && Bot_EntityUsingRiotShield(v4->botInfo.ent, 0) )
    StopGoalStance |= 2u;
  if ( !StopGoalStance )
  {
    if ( v16 )
    {
      if ( v16 == STANCE_ANY )
        Com_Error_impl(ERR_DROP, (const ObfuscateErrorText)&stru_1440CD268, 5662i64);
      if ( (v16 & 2) != 0 )
      {
        LOBYTE(StopGoalStance) = 2;
      }
      else
      {
        LOBYTE(StopGoalStance) = 1;
        if ( (v16 & 4) != 0 )
          LOBYTE(StopGoalStance) = 4;
      }
    }
    else
    {
      Com_Error_impl(ERR_DROP, (const ObfuscateErrorText)&stru_1440CD220, 5661i64);
      LOBYTE(StopGoalStance) = 2;
    }
  }
  if ( (StopGoalStance & 1) == 0 )
  {
    if ( (StopGoalStance & 2) != 0 )
    {
      v29 = cmd->buttons & 0xFFFFFFFFFFFFFF3Fui64 | 0x80;
    }
    else
    {
      if ( (StopGoalStance & 4) == 0 )
        goto LABEL_128;
      v29 = cmd->buttons & 0xFFFFFFFFFFFFFF3Fui64 | 0x40;
    }
    cmd->buttons = v29;
    goto LABEL_128;
  }
  cmd->buttons &= 0xFFFFFFFFFFFFFF3Fui64;
LABEL_128:
  botData->botInfo.currentStanceFlags = StopGoalStance;
}

/*
==============
Bot_UpdateStrafe
==============
*/
void Bot_UpdateStrafe(bot_data_t *botData)
{
  __int128 v1; 
  __int128 v2; 
  playerState_s *playerState; 
  gentity_s *ent; 
  const gentity_s *v6; 
  AIBotInterface *m_pAI; 
  int CanFireOnEnemy; 
  BOOL v9; 
  double v10; 
  double v11; 
  double v12; 
  double v13; 
  float v14; 
  __int128 v15; 
  __int128 v16; 
  float v19; 
  gentity_s *v21; 
  float v22; 
  __int16 EntityIndex; 
  AIBotWrapper v24; 
  vec3_t right; 
  vec3_t vEyePosOut; 
  vec3_t vStart; 
  vec3_t vEnd; 
  __int128 v29; 
  __int128 v30; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13395, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13396, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !botData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13397, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState )", (const char *)&queryFormat, "botData->botInfo.playerState") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  AICommonInterface::AICommonInterface(&v24.m_botInterface);
  v24.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v24.m_botAgentInterface);
  ent = botData->botInfo.ent;
  v6 = NULL;
  v24.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v24.m_pAI = NULL;
  AIBotWrapper::Setup(&v24, ent);
  m_pAI = v24.m_pAI;
  if ( !v24.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13411, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  CanFireOnEnemy = Bot_CanSeeAndCanFireOnEnemy(botData);
  v9 = botData->botInfo.combatStrafeDir != 0;
  if ( !CanFireOnEnemy )
  {
    if ( level.time > botData->botInfo.strafeCheckTime )
    {
      v10 = G_random();
      v9 = 0;
      LOBYTE(v9) = *(float *)&v10 < botData->botMatchData.strafeChance;
      botData->botInfo.strafeCheckTime = level.time + 1000;
    }
    if ( botData->botInfo.noPathFoundTime )
      v9 = 1;
  }
  if ( level.time < botData->botInfo.lastTimeOnLadder + 2500 )
    v9 = 0;
  if ( Bot_IsUsingTurret(botData) || !v9 )
  {
    botData->botInfo.combatStrafeDir = 0;
  }
  else
  {
    v11 = G_random();
    if ( *(float *)&v11 <= 0.050000001 || !botData->botInfo.combatStrafeDir )
    {
      v30 = v1;
      v29 = v2;
      botData->botInfo.combatStrafeDir = 1;
      v12 = G_random();
      if ( *(float *)&v12 < 0.5 )
        botData->botInfo.combatStrafeDir = -1;
      v13 = G_flrand(-1.0, 1.0);
      v14 = *(float *)&v13;
      v15 = LODWORD(FLOAT_N1_0);
      *(double *)&v15 = G_flrand(-1.0, 1.0);
      v16 = v15;
      botData->botInfo.strafeDir.v[1] = v14;
      botData->botInfo.strafeDir.v[2] = 0.0;
      *(float *)&v16 = fsqrt((float)(*(float *)&v15 * *(float *)&v15) + (float)(v14 * v14));
      _XMM3 = v16;
      __asm { vcmpless xmm1, xmm3, cs:__real@80000000 }
      v19 = *(float *)&v15;
      __asm { vblendvps xmm0, xmm3, xmm8, xmm1 }
      botData->botInfo.strafeDir.v[0] = v19 * (float)(1.0 / *(float *)&_XMM0);
      botData->botInfo.strafeDir.v[1] = (float)(1.0 / *(float *)&_XMM0) * botData->botInfo.strafeDir.v[1];
      botData->botInfo.strafeDir.v[2] = (float)(1.0 / *(float *)&_XMM0) * botData->botInfo.strafeDir.v[2];
    }
    if ( CanFireOnEnemy && level.time - botData->botInfo.combatStrafeCheckTime > 350 )
    {
      if ( !EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) || (v21 = EntHandle::ent(&botData->botInfo.sentient->targetEnt), (v6 = v21) == NULL) || !v21->sentient )
      {
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13465, ASSERT_TYPE_ASSERT, "( enemy && enemy->sentient )", (const char *)&queryFormat, "enemy && enemy->sentient") )
          __debugbreak();
      }
      AngleVectors(&playerState->viewangles, NULL, &right, NULL);
      Sentient_GetEyePosition(botData->botInfo.ent->sentient, &vEyePosOut);
      Sentient_GetHeadPosition(v6->sentient, &vEnd);
      v22 = (float)botData->botInfo.combatStrafeDir * 16.0;
      vStart.v[0] = (float)(v22 * right.v[0]) + vEyePosOut.v[0];
      vStart.v[1] = (float)(v22 * right.v[1]) + vEyePosOut.v[1];
      vStart.v[2] = (float)(v22 * right.v[2]) + vEyePosOut.v[2];
      EntityIndex = G_GetEntityIndex(v6);
      if ( !AICommonInterface::CanSeePointFrom(m_pAI, &vStart, &vEnd, 100000000.0, EntityIndex) )
        botData->botInfo.combatStrafeDir = -botData->botInfo.combatStrafeDir;
      botData->botInfo.combatStrafeCheckTime = level.time;
    }
  }
}

/*
==============
Bot_UpdateStuckCheck
==============
*/
void Bot_UpdateStuckCheck(bot_data_t *botData)
{
  playerState_s *playerState; 
  double v3; 
  int v4; 
  float v5; 
  const dvar_t *v6; 
  const char *v7; 
  int v8; 
  gentity_s *ent; 
  AIBotInterface *m_pAI; 
  int v11; 
  int v12; 
  BOOL v13; 
  int v14; 
  int IsStuckReacting; 
  gentity_s *v16; 
  float v17; 
  float v18; 
  float v19; 
  int pathProgressTime; 
  gentity_s *v21; 
  bool v22; 
  double v23; 
  float v24; 
  int v25; 
  float v26; 
  float v27; 
  gentity_s *v28; 
  const dvar_t *v29; 
  vec3_t *p_currentOrigin; 
  AIBotWrapper v31; 
  vec3_t outFinalGoal; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7811, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7812, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( Bot_IsOnGround(botData) )
  {
    botData->botInfo.stuckCheckGroundTime = level.time;
  }
  else if ( level.time - botData->botInfo.stuckCheckGroundTime < 2000 )
  {
    return;
  }
  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\bgame\\bg_playerstate.h", 1145, ASSERT_TYPE_ASSERT, "(ps)", (const char *)&queryFormat, "ps") )
    __debugbreak();
  v3 = MSG_UnpackUnsignedFloat(playerState->moveSpeedScaleMultiplier, 5.0, 0xCu);
  v4 = 1;
  v5 = 500.0 / *(float *)&v3;
  if ( GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 0) )
  {
    v6 = DCONST_DVARMPFLT_player_proneSpeedScale;
    if ( !DCONST_DVARMPFLT_player_proneSpeedScale )
    {
      v7 = "player_proneSpeedScale";
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if ( GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 1u) )
  {
    v6 = DCONST_DVARMPFLT_player_crouchSpeedScale;
    if ( !DCONST_DVARMPFLT_player_crouchSpeedScale )
    {
      v7 = "player_crouchSpeedScale";
LABEL_19:
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 720, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", v7) )
        __debugbreak();
    }
LABEL_21:
    Dvar_CheckFrontendServerThread(v6);
    v5 = (float)(500.0 / *(float *)&v3) / v6->current.value;
  }
  v8 = 0;
  AICommonInterface::AICommonInterface(&v31.m_botInterface);
  v31.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v31.m_botAgentInterface);
  ent = botData->botInfo.ent;
  v31.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v31.m_pAI = NULL;
  AIBotWrapper::Setup(&v31, ent);
  m_pAI = v31.m_pAI;
  if ( !v31.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7366, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  if ( AICommonInterface::HasPath(m_pAI) && (LOBYTE(botData->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) == 0 )
  {
    if ( !botData->botInfo.pNavigator && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7370, ASSERT_TYPE_ASSERT, "( botInfo->pNavigator )", (const char *)&queryFormat, "botInfo->pNavigator") )
      __debugbreak();
    botData->botInfo.pNavigator->GetCurPos(botData->botInfo.pNavigator, &outFinalGoal);
    if ( (float)(outFinalGoal.v[2] - botData->botInfo.ent->r.currentOrigin.v[2]) > 128.0 )
      v8 = 1;
  }
  v11 = Bot_AtScriptGoalNode(botData);
  v12 = v11;
  v13 = (LOBYTE(botData->scriptedAgentInfo.blackboard.m_ShootParams.m_Pos.v[0]) & 0x60) != 0 && !v11;
  v14 = Bot_NavPathExists(&botData->botInfo);
  IsStuckReacting = Bot_IsStuckReacting(&botData->botInfo);
  if ( !v14 || v12 || (LOBYTE(botData->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) != 0 )
  {
    v21 = botData->botInfo.ent;
    botData->botInfo.pathProgressLast.v[0] = v21->r.currentOrigin.v[0];
    botData->botInfo.pathProgressLast.v[1] = v21->r.currentOrigin.v[1];
    botData->botInfo.pathProgressLast.v[2] = v21->r.currentOrigin.v[2];
    botData->botInfo.pathProgressTime = 0;
  }
  else
  {
    v16 = botData->botInfo.ent;
    v17 = botData->botInfo.pathProgressLast.v[1] - v16->r.currentOrigin.v[1];
    v18 = v16->r.currentOrigin.v[0];
    v19 = botData->botInfo.pathProgressLast.v[2] - v16->r.currentOrigin.v[2];
    if ( (float)((float)((float)(v17 * v17) + (float)((float)(botData->botInfo.pathProgressLast.v[0] - v18) * (float)(botData->botInfo.pathProgressLast.v[0] - v18))) + (float)(v19 * v19)) < 2500.0 )
    {
      pathProgressTime = botData->botInfo.pathProgressTime;
    }
    else
    {
      botData->botInfo.pathProgressLast.v[0] = v18;
      botData->botInfo.pathProgressLast.v[1] = v16->r.currentOrigin.v[1];
      botData->botInfo.pathProgressLast.v[2] = v16->r.currentOrigin.v[2];
      pathProgressTime = 0;
      botData->botInfo.pathProgressTime = 0;
    }
    if ( (float)pathProgressTime > v5 )
      v13 = 1;
  }
  if ( !v14 || !v13 && !v8 )
    goto LABEL_53;
  Bot_GetPathFinalGoal(&botData->botInfo, &outFinalGoal);
  ++botData->botInfo.stuckFrames;
  if ( !Bot_StuckShouldReact(&botData->botInfo) || IsStuckReacting )
    v4 = 0;
  if ( v8 )
  {
LABEL_52:
    Bot_BadPath(botData->botInfo.ent);
LABEL_53:
    botData->botInfo.stuckFrames = 0;
    return;
  }
  if ( v4 )
  {
    v22 = level.time < botData->botInfo.stuckReactionTime + 2000;
    v23 = ((double (__fastcall *)(AINavigator *))botData->botInfo.pNavigator->GetPathDistToGoal)(botData->botInfo.pNavigator);
    v24 = *(float *)&v23;
    if ( v22 && COERCE_FLOAT(COERCE_UNSIGNED_INT(botData->botInfo.stuckPathLen - *(float *)&v23) & _xmm) <= 16.0 && (float)((float)((float)((float)(botData->botInfo.stuckFinalGoal.v[1] - outFinalGoal.v[1]) * (float)(botData->botInfo.stuckFinalGoal.v[1] - outFinalGoal.v[1])) + (float)((float)(botData->botInfo.stuckFinalGoal.v[0] - outFinalGoal.v[0]) * (float)(botData->botInfo.stuckFinalGoal.v[0] - outFinalGoal.v[0]))) + (float)((float)(botData->botInfo.stuckFinalGoal.v[2] - outFinalGoal.v[2]) * (float)(botData->botInfo.stuckFinalGoal.v[2] - outFinalGoal.v[2]))) < 0.0099999998 )
      goto LABEL_52;
    v25 = G_irand(300, 400);
    v26 = outFinalGoal.v[0];
    v27 = outFinalGoal.v[1];
    botData->botInfo.stuckReactionTime = level.time + v25;
    botData->botInfo.stuckPathLen = v24;
    botData->botInfo.stuckFinalGoal.v[0] = v26;
    botData->botInfo.stuckFinalGoal.v[2] = outFinalGoal.v[2];
    botData->botInfo.stuckFinalGoal.v[1] = v27;
    v28 = botData->botInfo.ent;
    botData->botInfo.pathProgressLast.v[0] = v28->r.currentOrigin.v[0];
    botData->botInfo.pathProgressLast.v[1] = v28->r.currentOrigin.v[1];
    botData->botInfo.pathProgressLast.v[2] = v28->r.currentOrigin.v[2];
    botData->botInfo.pathProgressTime = 0;
  }
  v29 = DVARINT_ai_showPaths;
  if ( !DVARINT_ai_showPaths && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "ai_showPaths") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v29);
  if ( (v29->current.integer > 0 || Dvar_GetInt_Internal_DebugName(DVARINT_bot_DrawDebug, "bot_DrawDebug") == 1 || Dvar_GetInt_Internal_DebugName(DVARINT_bot_DrawDebug, "bot_DrawDebug") == 2) && Bot_ShouldDrawDebugForBot(botData) && botData->botInfo.stuckFrames >= 2u )
  {
    p_currentOrigin = &botData->botInfo.ent->r.currentOrigin;
    if ( (LOBYTE(botData->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) != 0 )
      G_DebugStar(p_currentOrigin, &colorCyan);
    else
      G_DebugStar(p_currentOrigin, &colorRed);
  }
}

/*
==============
Bot_UpdateThreat
==============
*/
void Bot_UpdateThreat(bot_data_t *botData)
{
  gentity_s *ent; 
  AIBotInterface *m_pAI; 
  gentity_s *v4; 
  const dvar_t *v5; 
  bool v6; 
  const dvar_t *v7; 
  int v8; 
  const dvar_t *v9; 
  gentity_s *v10; 
  gentity_s *v11; 
  sentient_s *sentient; 
  sentient_s *v13; 
  bool v14; 
  const bitarray<224> *AllCombatTeamFlags; 
  __int128 v16; 
  double v17; 
  unsigned int v18; 
  gentity_s *v19; 
  __int64 v20; 
  sentient_s *v21; 
  gentity_s *v22; 
  sentient_s *v23; 
  int number; 
  __int64 v25; 
  __int64 v26; 
  __int64 v27; 
  AIBotWrapper v28; 
  bitarray<224> result; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6983, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6989, ASSERT_TYPE_ASSERT, "( botInfo->sentient )", (const char *)&queryFormat, "botInfo->sentient") )
    __debugbreak();
  AICommonInterface::AICommonInterface(&v28.m_botInterface);
  v28.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v28.m_botAgentInterface);
  ent = botData->botInfo.ent;
  v28.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v28.m_pAI = NULL;
  AIBotWrapper::Setup(&v28, ent);
  m_pAI = v28.m_pAI;
  if ( !v28.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6991, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
  {
    v4 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
    if ( v4 )
    {
      v5 = DVARINT_bot_NoTarget;
      if ( !DVARINT_bot_NoTarget && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_NoTarget") )
        __debugbreak();
      Dvar_CheckFrontendServerThread(v5);
      v6 = v5->current.integer == 1;
      v7 = DVARINT_bot_NoTarget;
      v8 = v6;
      if ( !DVARINT_bot_NoTarget && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_NoTarget") )
        __debugbreak();
      Dvar_CheckFrontendServerThread(v7);
      if ( v7->current.integer == 2 && v4->s.eType == ET_PLAYER )
        v8 = 1;
      v9 = DVARINT_bot_NoTarget;
      if ( !DVARINT_bot_NoTarget && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_NoTarget") )
        __debugbreak();
      Dvar_CheckFrontendServerThread(v9);
      if ( v9->current.integer == 3 && v4->s.eType != ET_PLAYER || v8 )
      {
        if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7018, ASSERT_TYPE_ASSERT, "( botInfo->sentient )", (const char *)&queryFormat, "botInfo->sentient") )
          __debugbreak();
        Sentient_SetEnemy(botData->botInfo.sentient, NULL, 1, 0);
      }
    }
  }
  Bot_UpdateMemoryAwareness(botData);
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
  {
    v10 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
    v11 = v10;
    if ( v10 )
    {
      if ( !v10->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7029, ASSERT_TYPE_ASSERT, "( enemy->sentient )", (const char *)&queryFormat, "enemy->sentient") )
        __debugbreak();
      sentient = botData->botInfo.sentient;
      v13 = v11->sentient;
      if ( !sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\sentient.h", 258, ASSERT_TYPE_ASSERT, "(self)", (const char *)&queryFormat, "self") )
        __debugbreak();
      if ( !v13 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\sentient.h", 259, ASSERT_TYPE_ASSERT, "(other)", (const char *)&queryFormat, "other") )
        __debugbreak();
      if ( level.teammode == TEAMMODE_FFA )
      {
        v14 = Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80);
        if ( Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) )
          AllCombatTeamFlags = Com_TeamsSP_GetAllCombatTeamFlags();
        else
          AllCombatTeamFlags = Com_TeamsMP_GetAllTeamFlags();
        v16 = *(_OWORD *)AllCombatTeamFlags->array;
        v17 = *(double *)&AllCombatTeamFlags->array[4];
        v18 = AllCombatTeamFlags->array[6] & 0xFFEFFFFF;
        *(_OWORD *)result.array = v16;
        *(double *)&result.array[4] = v17;
        if ( v14 )
          result.array[0] &= ~0x8000000u;
        result.array[6] = v18 & 0xFF9FFFFF;
      }
      else
      {
        Com_Teams_GetEnemyTeamFlags(&result, v13->eTeam);
      }
      if ( !bitarray_base<bitarray<224>>::testBit(&result, sentient->eTeam) )
        Bot_ClearEnemy(botData);
    }
  }
  m_pAI->UpdateThreat(m_pAI);
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
  {
    v19 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
    if ( v19 )
    {
      if ( EntHandle::isDefined(&botData->botInfo.sentient->scriptTargetEnt) )
      {
        if ( EntHandle::ent(&botData->botInfo.sentient->scriptTargetEnt)->health > 0 )
        {
          if ( !v19->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7049, ASSERT_TYPE_ASSERT, "( enemy->sentient )", (const char *)&queryFormat, "enemy->sentient") )
            __debugbreak();
          v23 = botData->botInfo.sentient;
          number = v23->scriptTargetEnt.number;
          if ( (unsigned int)(number - 1) >= 0x7FF )
          {
            LODWORD(v27) = 2047;
            LODWORD(v26) = number - 1;
            if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 223, ASSERT_TYPE_ASSERT, "(unsigned)( number - 1 ) < (unsigned)( ENTITYNUM_NONE )", "number - 1 doesn't index ENTITYNUM_NONE\n\t%i not in [0, %i)", v26, v27) )
              __debugbreak();
          }
          v25 = v23->scriptTargetEnt.number;
          if ( (unsigned int)(v25 - 1) >= 0x800 )
          {
            LODWORD(v27) = 2048;
            LODWORD(v26) = v25 - 1;
            if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 207, ASSERT_TYPE_ASSERT, "(unsigned)( entityIndex ) < (unsigned)( ( 2048 ) )", "entityIndex doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v26, v27) )
              __debugbreak();
          }
          if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 208, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
            __debugbreak();
          if ( g_entities[v25 - 1].r.isInUse != g_entityIsInUse[v25 - 1] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 209, ASSERT_TYPE_ASSERT, "( g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex] )", (const char *)&queryFormat, "g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex]") )
            __debugbreak();
          if ( !g_entityIsInUse[v25 - 1] )
          {
            LODWORD(v27) = v23->scriptTargetEnt.number - 1;
            if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 224, ASSERT_TYPE_ASSERT, "( ( G_IsEntityInUse( number - 1 ) ) )", "%s\n\t( number - 1 ) = %i", "( G_IsEntityInUse( number - 1 ) )", v27) )
              __debugbreak();
          }
          if ( &g_entities[v23->scriptTargetEnt.number - 1] != v19 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7050, ASSERT_TYPE_ASSERT, "( botInfo->sentient->scriptTargetEnt.ent() == enemy )", (const char *)&queryFormat, "botInfo->sentient->scriptTargetEnt.ent() == enemy") )
            __debugbreak();
          LOBYTE(v20) = 17;
          m_pAI->GetPerfectInfo(m_pAI, v19->sentient, v20);
        }
        else
        {
          if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23393, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
            __debugbreak();
          if ( !botData->botInfo.ent->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23394, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent->sentient )", (const char *)&queryFormat, "botData->botInfo.ent->sentient") )
            __debugbreak();
          v21 = botData->botInfo.ent->sentient;
          if ( EntHandle::isDefined(&v21->scriptTargetEnt) )
          {
            v22 = EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) ? EntHandle::ent(&botData->botInfo.sentient->targetEnt) : 0i64;
            if ( v22 == EntHandle::ent(&v21->scriptTargetEnt) )
              Sentient_SetEnemy(botData->botInfo.ent->sentient, NULL, 1, 1);
          }
          EntHandle::setEnt(&v21->scriptTargetEnt, NULL);
          v21->scriptTargetHasTagEye = 0;
          v21->entityTargetThreat = 0.0;
        }
      }
      if ( Bot_CanReactEnemy(botData) && !Bot_CanSeeEnemy(botData) && !Bot_IsCamping(botData) && Bot_EnemyIsAttackingMe(botData, 500) && !Bot_IsSliding(botData) )
      {
        if ( Bot_CanSlide(botData) )
        {
          botData->botInfo.slideDesiredTime = level.time + 1000;
        }
        else if ( level.time - botData->botInfo.hideFromTime > 2000 )
        {
          if ( Bot_CanSeeSentientQuick(botData, v19->sentient) )
            Bot_HideFromEntity(botData, v19, 300.0, 700);
        }
      }
    }
  }
}

/*
==============
Bot_UpdateTraversalLook
==============
*/
__int64 Bot_UpdateTraversalLook(bot_data_t *botData, vec3_t *viewAnglesOut)
{
  pathnode_t *v4; 
  pathnode_t *v5; 
  float NodeTraversalYaw; 
  __int64 result; 
  __int64 v8; 
  __int64 v9; 
  __int64 v10; 
  vec3_t pos; 
  vec3_t v12; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11902, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11907, ASSERT_TYPE_ASSERT, "( botInfo->playerState )", (const char *)&queryFormat, "botInfo->playerState") )
    __debugbreak();
  if ( (LOBYTE(botData->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) == 0 )
    return 0i64;
  v4 = NULL;
  if ( Path_NodeValid(botData->botInfo.nodeNegotStart) )
    v5 = Path_ConvertIndexToNode(botData->botInfo.nodeNegotStart);
  else
    v5 = NULL;
  if ( Path_NodeValid(botData->botInfo.nodeNegotEnd) )
    v4 = Path_ConvertIndexToNode(botData->botInfo.nodeNegotEnd);
  if ( !v5 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11911, ASSERT_TYPE_ASSERT, "(negotiationStartNode)", "%s\n\tNo traversal start node.  botInfo->traversal = %i, botInfo->nodeNegotStart = %i, botInfo->traverseJumpTime = %i", "negotiationStartNode", botData->botInfo.traversal, botData->botInfo.nodeNegotStart, botData->botInfo.traverseJumpTime) )
    __debugbreak();
  if ( !v4 )
  {
    LODWORD(v10) = botData->botInfo.traverseJumpTime;
    LODWORD(v9) = botData->botInfo.nodeNegotEnd;
    LODWORD(v8) = botData->botInfo.traversal;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11911, ASSERT_TYPE_ASSERT, "(negotiationEndNode)", "%s\n\tNo traversal end node.  botInfo->traversal = %i, botInfo->nodeNegotEnd = %i, botInfo->traverseJumpTime = %i", "negotiationEndNode", v8, v9, v10) )
      __debugbreak();
  }
  pathnode_t::GetPos(v5, &pos);
  pathnode_t::GetPos(v4, &v12);
  NodeTraversalYaw = Bot_GetNodeTraversalYaw(v5, v4, ((unsigned int)botData->botInfo.traversal >> 2) & 1);
  result = 1i64;
  viewAnglesOut->v[1] = NodeTraversalYaw;
  return result;
}

/*
==============
Bot_UpdateTwitchVectors
==============
*/
void Bot_UpdateTwitchVectors(bot_info_t *botInfo, vec3_t *position, vec3_t *angles)
{
  double v6; 
  __int128 radius_low; 
  vec2_t *p_twitchOffsetPos; 
  double v11; 
  float v12; 
  float v13; 
  float v14; 
  gentity_s *ent; 
  float v16; 
  float v17; 
  float v18; 
  double v19; 
  double v20; 
  double v21; 
  float c; 
  vec3_t end; 
  float s; 
  trace_t results; 

  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7408, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  if ( position )
  {
    if ( level.time - botInfo->lastTwitchPosition > 500 )
    {
      v6 = G_random();
      if ( *(float *)&v6 < 0.0049999999 )
      {
        radius_low = LODWORD(botInfo->activeGoal.radius);
        *(float *)&radius_low = botInfo->activeGoal.radius * 0.5;
        _XMM1 = radius_low;
        __asm { vminss  xmm6, xmm1, cs:__real@41000000 }
        p_twitchOffsetPos = &botInfo->twitchOffsetPos;
        v11 = G_random();
        if ( &s == (float *)&botInfo->twitchOffsetPos && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_vector.h", 887, ASSERT_TYPE_SANITY, "( &in != &out )", (const char *)&queryFormat, "&in != &out") )
          __debugbreak();
        FastSinCos((float)(*(float *)&v11 * 2.0) * 3.1415927, &s, &c);
        v12 = (float)(*(float *)&_XMM6 * c) - (float)(0.0 * s);
        v13 = 0.0 * c;
        v14 = *(float *)&_XMM6 * s;
        p_twitchOffsetPos->v[0] = v12;
        botInfo->twitchOffsetPos.v[1] = v13 + v14;
        ent = botInfo->ent;
        v16 = botInfo->twitchOffsetPos.v[1];
        end.v[0] = v12 + botInfo->ent->r.currentOrigin.v[0];
        end.v[1] = v16 + ent->r.currentOrigin.v[1];
        end.v[2] = ent->r.currentOrigin.v[2];
        G_Main_TraceCapsule(&results, &ent->r.currentOrigin, &end, &actorBox, ent->s.number, 2065);
        v17 = botInfo->ent->r.currentOrigin.v[1];
        v18 = (float)(end.v[1] - v17) * (float)(results.fraction * 0.89999998);
        p_twitchOffsetPos->v[0] = (float)((float)((float)(end.v[0] - botInfo->ent->r.currentOrigin.v[0]) * (float)(results.fraction * 0.89999998)) + botInfo->ent->r.currentOrigin.v[0]) - botInfo->ent->r.currentOrigin.v[0];
        botInfo->twitchOffsetPos.v[1] = (float)(v18 + v17) - v17;
        botInfo->lastTwitchPosition = level.time;
      }
    }
  }
  if ( angles && level.time - botInfo->lastTwitchAngles > 300 )
  {
    v19 = G_random();
    if ( *(float *)&v19 < 0.02 )
    {
      v20 = G_random();
      botInfo->twitchOffsetRot.v[0] = *(float *)&v20 * 5.0;
      v21 = G_random();
      botInfo->twitchOffsetRot.v[1] = *(float *)&v21 * 5.0;
      botInfo->lastTwitchAngles = level.time;
    }
  }
}

/*
==============
Bot_UpdateVariableZoomToggle
==============
*/
void Bot_UpdateVariableZoomToggle(bot_data_t *botData, usercmd_s *cmd)
{
  int v4; 
  int v5; 
  BOOL v6; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8026, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8027, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  if ( Bot_Weap_WeaponHasVariableZoom(botData) )
  {
    if ( BG_InADS(botData->botInfo.playerState) )
    {
      v4 = level.time - botData->botInfo.enemyTrack.lastFireTime;
      v5 = 0;
      v6 = level.time > botData->botInfo.nextZoomPressTime;
      if ( BG_IsZoomButtonPressed(botData->botInfo.lastUserCmd) || BG_IsZoomButtonPressed(cmd) )
        v5 = 1;
      if ( v4 > 500 && v6 && !v5 )
      {
        if ( !Com_GameMode_SupportsFeature(WEAPONSTATES_NUM|WEAPON_LADDER_AIM) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8046, ASSERT_TYPE_ASSERT, "(Com_GameMode_SupportsFeature( Com_GameMode_Feature::WEAPON_VARIABLE_ZOOM ))", (const char *)&queryFormat, "Com_GameMode_SupportsFeature( Com_GameMode_Feature::WEAPON_VARIABLE_ZOOM )") )
          __debugbreak();
        cmd->buttons |= 0x2000000ui64;
        botData->botInfo.nextZoomPressTime = level.time + G_irand(1000, 6000);
      }
    }
    else
    {
      botData->botInfo.nextZoomPressTime = level.time + G_irand(0, 3000);
    }
  }
}

/*
==============
Bot_UpdateViewAngles
==============
*/
void Bot_UpdateViewAngles(bot_data_t *botData, vec3_t *viewAnglesOut)
{
  playerState_s *playerState; 
  const gentity_s *v5; 
  bool v6; 
  __int128 v7; 
  __int128 v8; 
  __int128 v9; 
  __int128 v14; 
  playerState_s *v16; 
  playerState_s *v17; 
  const playerState_s *EntityPlayerStateConst; 
  float v19; 
  float v20; 
  __int128 v21; 
  float v22; 
  __int128 v23; 
  __int128 v27; 
  vec3_t aimPoint; 
  vec3_t eyePoint; 
  vec3_t outLookaheadDir; 
  vec3_t vec; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11697, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11700, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  Bot_UpdateAwareOfEnemy(botData);
  if ( botData->botInfo.aaSharedGlob.autoMeleeState == AIM_MELEE_STATE_UPDATING )
  {
    viewAnglesOut->v[0] = playerState->viewangles.v[0];
    viewAnglesOut->v[1] = playerState->viewangles.v[1];
    viewAnglesOut->v[2] = playerState->viewangles.v[2];
    viewAnglesOut->v[0] = botData->botInfo.aaSharedGlob.autoMeleePitch;
    viewAnglesOut->v[1] = botData->botInfo.aaSharedGlob.autoMeleeYaw;
    return;
  }
  if ( Bot_IsBlinded(botData) )
  {
    viewAnglesOut->v[0] = playerState->viewangles.v[0];
    viewAnglesOut->v[1] = playerState->viewangles.v[1];
    viewAnglesOut->v[2] = playerState->viewangles.v[2];
    return;
  }
  if ( Bot_UpdateTraversalLook(botData, viewAnglesOut) )
    goto LABEL_59;
  if ( Bot_UpdateLookAtPoint(botData, 5, viewAnglesOut) || Bot_HasRemoteEyes(botData) )
    return;
  aimPoint.v[0] = 0.0;
  aimPoint.v[1] = 0.0;
  aimPoint.v[2] = 0.0;
  *(float *)&v27 = 0.0;
  *((float *)&v27 + 1) = 0.0;
  *((float *)&v27 + 2) = 0.0;
  if ( Bot_IsThrowingGrenade(botData) || (*((_BYTE *)&botData->scriptedAgentInfo + 28228) & 2) != 0 )
  {
    if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12275, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent", v27) )
      __debugbreak();
    if ( (*((_BYTE *)&botData->scriptedAgentInfo + 28228) & 2) != 0 )
    {
      v20 = botData->botInfo.scriptedGrenadeTarget.v[0];
      v21 = LODWORD(botData->botInfo.scriptedGrenadeTarget.v[1]);
      v22 = botData->botInfo.scriptedGrenadeTarget.v[2];
    }
    else
    {
      v20 = botData->botInfo.grenadeThrowTarget.v[0];
      v21 = LODWORD(botData->botInfo.grenadeThrowTarget.v[1]);
      v22 = botData->botInfo.grenadeThrowTarget.v[2];
    }
    Bot_PredictPosition(botData->botInfo.ent, botData, &botData->botInfo.ent->r.currentOrigin, &aimPoint);
    v23 = v21;
    *(float *)&v23 = fsqrt((float)((float)((float)(*(float *)&v21 - aimPoint.v[1]) * (float)(*(float *)&v21 - aimPoint.v[1])) + (float)((float)(v20 - aimPoint.v[0]) * (float)(v20 - aimPoint.v[0]))) + (float)((float)(v22 - aimPoint.v[2]) * (float)(v22 - aimPoint.v[2])));
    _XMM3 = v23;
    __asm
    {
      vcmpless xmm0, xmm3, cs:__real@80000000
      vblendvps xmm0, xmm3, xmm1, xmm0
    }
    *(float *)&v27 = (float)(v20 - aimPoint.v[0]) * (float)(1.0 / *(float *)&_XMM0);
    *((float *)&v27 + 2) = (float)(v22 - aimPoint.v[2]) * (float)(1.0 / *(float *)&_XMM0);
    *((float *)&v27 + 1) = (float)(*(float *)&v21 - aimPoint.v[1]) * (float)(1.0 / *(float *)&_XMM0);
    vectoangles((const vec3_t *)&v27, viewAnglesOut);
    if ( Bot_GrenadeReleaseTime(botData) - level.time <= 750 )
      viewAnglesOut->v[0] = botData->botInfo.grenadePitch;
LABEL_59:
    botData->botInfo.lookAtTime = 0;
    return;
  }
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
    v5 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
  else
    v5 = NULL;
  if ( !Bot_CanSeeAndCanFireOnEnemy(botData) && !Bot_CanSeeEnemyThroughWall(botData) )
    goto LABEL_62;
  Bot_GetEnemyAimPoints(botData, v5, &aimPoint, &eyePoint);
  v6 = (botData->botInfo.scriptFlags & 0x20000) == 0;
  v8 = LODWORD(aimPoint.v[0]);
  *(float *)&v8 = aimPoint.v[0] - eyePoint.v[0];
  v7 = v8;
  v9 = LODWORD(aimPoint.v[1]);
  *(float *)&v9 = fsqrt((float)((float)((float)(aimPoint.v[1] - eyePoint.v[1]) * (float)(aimPoint.v[1] - eyePoint.v[1])) + (float)(*(float *)&v7 * *(float *)&v7)) + (float)((float)(aimPoint.v[2] - eyePoint.v[2]) * (float)(aimPoint.v[2] - eyePoint.v[2])));
  _XMM4 = v9;
  __asm
  {
    vcmpless xmm0, xmm4, cs:__real@80000000
    vblendvps xmm0, xmm4, xmm1, xmm0
  }
  v14 = v7;
  *(float *)&v14 = *(float *)&v7 * (float)(1.0 / *(float *)&_XMM0);
  _XMM3 = v14;
  __asm { vunpcklps xmm1, xmm3, xmm2 }
  vec.v[2] = (float)(aimPoint.v[2] - eyePoint.v[2]) * (float)(1.0 / *(float *)&_XMM0);
  *(double *)vec.v = *(double *)&_XMM1;
  *(double *)&v27 = *(double *)&_XMM1;
  *((float *)&v27 + 2) = vec.v[2];
  if ( v6 || (Nav_GetLookaheadDir(botData->botInfo.pNavigator, &outLookaheadDir), (float)((float)((float)(outLookaheadDir.v[0] * *(float *)&v27) + (float)(outLookaheadDir.v[1] * *((float *)&v27 + 1))) + (float)(outLookaheadDir.v[2] * *((float *)&v27 + 2))) >= 0.25) )
  {
    vectoangles(&vec, viewAnglesOut);
    if ( Bot_IsThrowingGrenade(botData) && Bot_GrenadeReleaseTime(botData) - level.time <= 750 )
      viewAnglesOut->v[0] = botData->botInfo.grenadePitch;
  }
  else
  {
LABEL_62:
    if ( !Bot_UpdateLookAtPoint(botData, 3, viewAnglesOut) && !Bot_UpdateEnemyAwareLook(botData, viewAnglesOut) && !Bot_UpdateLookAtPoint(botData, 0, viewAnglesOut) )
    {
      botData->botInfo.lookAtTime = 0;
      if ( !botData->botInfo.currentAISearch.currentNodeCount || !Bot_UpdatePathingLook(botData, viewAnglesOut) )
      {
        if ( Bot_EntIsInLastStand(botData->botInfo.ent) )
          goto LABEL_47;
        if ( !Bot_UpdateBadPathLook(botData, viewAnglesOut) && !Bot_UpdatePathingLook(botData, viewAnglesOut) )
        {
          if ( (LOBYTE(botData->scriptedAgentInfo.blackboard.m_ShootParams.m_Pos.v[0]) & 4) != 0 && Bot_AtScriptGoal(botData) )
          {
            viewAnglesOut->v[1] = botData->botInfo.scriptGoal.yaw;
            Bot_ApplyTwitchVectors(&botData->botInfo, NULL, viewAnglesOut);
            return;
          }
          v16 = botData->botInfo.playerState;
          if ( !v16 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12306, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
            __debugbreak();
          v17 = botData->botInfo.playerState;
          if ( (float)((float)((float)(v17->velocity.v[0] * v17->velocity.v[0]) + (float)(v17->velocity.v[1] * v17->velocity.v[1])) + (float)(v17->velocity.v[2] * v17->velocity.v[2])) <= 0.0099999998 )
          {
            if ( !botData->botInfo.lastUserCmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11247, ASSERT_TYPE_ASSERT, "( botData->botInfo.lastUserCmd )", (const char *)&queryFormat, "botData->botInfo.lastUserCmd") )
              __debugbreak();
            EntityPlayerStateConst = G_GetEntityPlayerStateConst(botData->botInfo.ent);
            if ( (G_PlayerUse_GetUseButtonMask(EntityPlayerStateConst) & botData->botInfo.lastUserCmd->buttons) == 0 && (LOBYTE(botData->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) == 0 && Bot_UpdateSearchLook(botData) )
            {
              viewAnglesOut->v[0] = v16->viewangles.v[0];
              viewAnglesOut->v[1] = v16->viewangles.v[1];
              v19 = v16->viewangles.v[2];
LABEL_45:
              viewAnglesOut->v[2] = v19;
              return;
            }
          }
LABEL_47:
          viewAnglesOut->v[0] = playerState->viewangles.v[0];
          viewAnglesOut->v[1] = playerState->viewangles.v[1];
          v19 = playerState->viewangles.v[2];
          goto LABEL_45;
        }
      }
    }
  }
}

/*
==============
Bot_UpdateXRayVision
==============
*/
void Bot_UpdateXRayVision(bot_data_t *botData)
{
  gentity_s *ent; 
  AIBotInterface *m_pAI; 
  sentient_s *i; 
  __int64 v5; 
  gentity_s *v6; 
  vec3_t *p_currentOrigin; 
  __int16 number; 
  const Weapon *v9; 
  AIBotWrapper v10; 
  bitarray<224> result; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6478, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  AICommonInterface::AICommonInterface(&v10.m_botInterface);
  v10.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v10.m_botAgentInterface);
  ent = botData->botInfo.ent;
  v10.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v10.m_pAI = NULL;
  AIBotWrapper::Setup(&v10, ent);
  m_pAI = v10.m_pAI;
  if ( !v10.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6487, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  if ( level.time > botData->botInfo.lastXRayUpdate + 200 )
  {
    if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6493, ASSERT_TYPE_ASSERT, "( botInfo->sentient )", (const char *)&queryFormat, "botInfo->sentient") )
      __debugbreak();
    if ( !botData->botInfo.sentient->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6494, ASSERT_TYPE_ASSERT, "( botInfo->sentient->ent )", (const char *)&queryFormat, "botInfo->sentient->ent") )
      __debugbreak();
    Sentient_EnemyTeamFlags(&result, botData->botInfo.sentient->eTeam);
    for ( i = Sentient_FirstSentient(&result); i; i = Sentient_NextSentient(i, &result) )
    {
      if ( i->inuse )
      {
        if ( !i->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6503, ASSERT_TYPE_ASSERT, "( sentient->ent )", (const char *)&queryFormat, "sentient->ent") )
          __debugbreak();
        if ( Bot_CanSeeEntityThroughWall(botData, i->ent) )
        {
          LOBYTE(v5) = 25;
          m_pAI->GetPerfectInfo(m_pAI, i, v5);
          if ( Bot_IsHardwareEnt(i->ent) && GameModeFlagContainer<enum BgEntityFlagsCommon,enum BgEntityFlagsSP,enum BgEntityFlagsMP,64>::TestFlagStrict(&i->ent->flags, (BgEntityFlagsMP)34) && !Bot_MemoryFindEvent(botData, BOT_MEM_PATHING_AVOID_RADIUS_LOS, i->ent->s.number, &i->ent->r.currentOrigin, level.time, level.time - 10000) )
          {
            v6 = i->ent;
            p_currentOrigin = &botData->botInfo.ent->r.currentOrigin;
            number = i->ent->s.number;
            v9 = Bot_Weap_None();
            Bot_MemoryWriteEvent(botData, BOT_MEM_PATHING_AVOID_RADIUS_LOS, v9, &v6->r.currentOrigin, p_currentOrigin, number);
            botData->botInfo.pNavigator->ClearPath(botData->botInfo.pNavigator);
          }
        }
      }
    }
    botData->botInfo.lastXRayUpdate = level.time + G_irand(0, 100);
  }
}

/*
==============
Bot_UpdateYaw
==============
*/
float Bot_UpdateYaw(bot_data_t *botData, float currentYaw, float targetYaw, int forceSlow)
{
  int v9; 
  float v10; 
  float v13; 
  __int128 v15; 
  float frameDuration; 
  double v17; 
  const VehicleDef *RemoteEyesVehicleDef; 
  float vehCam_yawTurnRate3P; 
  float v20; 
  float v22; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18064, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  _XMM6 = LODWORD(botData->botMatchData.yawSpeed);
  if ( forceSlow )
    _XMM6 = LODWORD(botData->botMatchData.yawSpeedAds);
  v9 = botData->botInfo.flags | 0x10;
  v10 = (float)(targetYaw - currentYaw) * 0.0027777778;
  _XMM12 = 0i64;
  __asm { vroundss xmm2, xmm12, xmm1, 1 }
  LODWORD(v13) = COERCE_UNSIGNED_INT((float)(v10 - *(float *)&_XMM2) * 360.0) & _xmm;
  if ( v13 < 50.0 )
    v9 = botData->botInfo.flags & 0xFFFFFFEF;
  botData->botInfo.flags = v9;
  if ( v13 >= 100.0 )
  {
    v15 = _XMM6;
    *(float *)&v15 = *(float *)&_XMM6 - (float)((float)(v13 * 0.0055555557) * *(float *)&_XMM6);
    _XMM2 = v15;
    __asm { vmaxss  xmm6, xmm2, cs:__real@3f800000 }
  }
  if ( !level.frameDuration && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_level_locals.h", 349, ASSERT_TYPE_ASSERT, "(level.frameDuration)", "%s\n\tAccessing frame duration before it's been set", "level.frameDuration") )
    __debugbreak();
  frameDuration = (float)level.frameDuration;
  v17 = DiffTrackAngle(targetYaw, currentYaw, *(float *)&_XMM6, frameDuration * 0.001);
  if ( (unsigned int)Bot_IsRemoteEyesVehicle(botData) )
  {
    RemoteEyesVehicleDef = Bot_GetRemoteEyesVehicleDef(botData);
    if ( (unsigned int)Bot_IsThirdPersonRemoteVehicle(botData) )
      vehCam_yawTurnRate3P = RemoteEyesVehicleDef->vehCam_yawTurnRate3P;
    else
      vehCam_yawTurnRate3P = RemoteEyesVehicleDef->vehCam_yawTurnRate;
    v20 = (float)(frameDuration * vehCam_yawTurnRate3P) * 0.001;
    __asm { vroundss xmm3, xmm12, xmm1, 1 }
    LODWORD(v17) = 0;
    if ( v20 != 0.0 )
      v17 = I_fclamp((float)((float)((float)(targetYaw - currentYaw) * 0.0027777778) - *(float *)&_XMM3) * 360.0, COERCE_FLOAT(LODWORD(v20) ^ _xmm), v20);
    v22 = *(float *)&v17 + currentYaw;
    *(float *)&v17 = *(float *)&v17 + currentYaw;
    if ( (unsigned int)Bot_IsThirdPersonRemoteVehicle(botData) )
      v17 = BG_Vehicle_ClampCameraAngle(v22, RemoteEyesVehicleDef->vehCam_yawClamp3P);
  }
  return *(float *)&v17;
}

/*
==============
Bot_UpdateZoneObstacles
==============
*/
void Bot_UpdateZoneObstacles(bot_info_t *botInfo)
{
  ;
}

/*
==============
Bot_ValidateMatchData
==============
*/
void Bot_ValidateMatchData(const bot_data_t *botData)
{
  float minInaccuracy; 
  float maxInaccuracy; 
  float v6; 
  float v7; 
  float minAimResponse; 
  float maxAimResponse; 
  float v10; 
  float v11; 
  float minNonAutoFireDelay; 
  float maxNonAutoFireDelay; 
  float v14; 
  float v15; 
  float minBurstFireTime; 
  float maxBurstFireTime; 
  float v18; 
  float v19; 
  float minTimeBetweenBursts; 
  float maxTimeBetweenBursts; 
  float v22; 
  float v23; 
  float sniperInaccuracyScale; 
  float adsDelayFireTime; 
  float adsDelayFireTimeScoped; 
  float fireAtDeadTime; 
  float lookAtDeadTime; 
  float averageEnemySightTime; 
  float sightTurnAroundPenalty; 
  float reactionTime; 
  float meleeReactionTime; 
  float meleeDist; 
  float meleeChargeDist; 
  float fireFromHipDist; 
  float diveDelay; 
  float yawSpeed; 
  float yawSpeedAds; 
  float pitchSpeed; 
  float pitchSpeedAds; 
  float strafeChance; 
  float diveChance; 
  float slideChance; 
  float cornerFireChance; 
  float cornerJumpChance; 
  float throwKnifeChance; 
  float breakMelee; 
  float hearingDeaf; 
  float visionBlinded; 
  float blindDiveChance; 
  float seeHardwareChance; 
  float targetHardwareChance; 
  float targetVehicleChance; 
  float holdBreathChance; 
  float launcherRespawnChance; 
  float avoidSkyPercent; 
  float launcherCombatChance; 
  float grenadeThrowbackChance; 
  float grenadeCookPrecision; 
  float awareViewAngle; 
  float strategyLevel; 
  float intelligentSprintLevel; 
  __int64 v63; 
  __int64 v64; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 638, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  minInaccuracy = botData->botMatchData.minInaccuracy;
  __asm { vxorpd  xmm8, xmm8, xmm8 }
  if ( minInaccuracy < 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 643, ASSERT_TYPE_ASSERT, "( botMatchData->minInaccuracy ) >= ( 0.0f )", "botMatchData->minInaccuracy >= 0.0f\n\t%g, %g", minInaccuracy, *(double *)&_XMM8) )
    __debugbreak();
  maxInaccuracy = botData->botMatchData.maxInaccuracy;
  if ( maxInaccuracy < 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 644, ASSERT_TYPE_ASSERT, "( botMatchData->maxInaccuracy ) >= ( 0.0f )", "botMatchData->maxInaccuracy >= 0.0f\n\t%g, %g", maxInaccuracy, *(double *)&_XMM8) )
    __debugbreak();
  v6 = botData->botMatchData.minInaccuracy;
  v7 = botData->botMatchData.maxInaccuracy;
  if ( v6 > v7 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 645, ASSERT_TYPE_ASSERT, "( botMatchData->minInaccuracy ) <= ( botMatchData->maxInaccuracy )", "botMatchData->minInaccuracy <= botMatchData->maxInaccuracy\n\t%g, %g", v6, v7) )
    __debugbreak();
  minAimResponse = botData->botMatchData.minAimResponse;
  if ( minAimResponse < 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 647, ASSERT_TYPE_ASSERT, "( botMatchData->minAimResponse ) >= ( 0.0f )", "botMatchData->minAimResponse >= 0.0f\n\t%g, %g", minAimResponse, *(double *)&_XMM8) )
    __debugbreak();
  maxAimResponse = botData->botMatchData.maxAimResponse;
  if ( maxAimResponse < 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 648, ASSERT_TYPE_ASSERT, "( botMatchData->maxAimResponse ) >= ( 0.0f )", "botMatchData->maxAimResponse >= 0.0f\n\t%g, %g", maxAimResponse, *(double *)&_XMM8) )
    __debugbreak();
  v10 = botData->botMatchData.minAimResponse;
  v11 = botData->botMatchData.maxAimResponse;
  if ( v10 > v11 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 649, ASSERT_TYPE_ASSERT, "( botMatchData->minAimResponse ) <= ( botMatchData->maxAimResponse )", "botMatchData->minAimResponse <= botMatchData->maxAimResponse\n\t%g, %g", v10, v11) )
    __debugbreak();
  minNonAutoFireDelay = botData->botMatchData.minNonAutoFireDelay;
  if ( minNonAutoFireDelay < 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 651, ASSERT_TYPE_ASSERT, "( botMatchData->minNonAutoFireDelay ) >= ( 0.0f )", "botMatchData->minNonAutoFireDelay >= 0.0f\n\t%g, %g", minNonAutoFireDelay, *(double *)&_XMM8) )
    __debugbreak();
  maxNonAutoFireDelay = botData->botMatchData.maxNonAutoFireDelay;
  if ( maxNonAutoFireDelay < 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 652, ASSERT_TYPE_ASSERT, "( botMatchData->maxNonAutoFireDelay ) >= ( 0.0f )", "botMatchData->maxNonAutoFireDelay >= 0.0f\n\t%g, %g", maxNonAutoFireDelay, *(double *)&_XMM8) )
    __debugbreak();
  v14 = botData->botMatchData.minNonAutoFireDelay;
  v15 = botData->botMatchData.maxNonAutoFireDelay;
  if ( v14 > v15 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 653, ASSERT_TYPE_ASSERT, "( botMatchData->minNonAutoFireDelay ) <= ( botMatchData->maxNonAutoFireDelay )", "botMatchData->minNonAutoFireDelay <= botMatchData->maxNonAutoFireDelay\n\t%g, %g", v14, v15) )
    __debugbreak();
  minBurstFireTime = botData->botMatchData.minBurstFireTime;
  if ( minBurstFireTime <= 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 655, ASSERT_TYPE_ASSERT, "( botMatchData->minBurstFireTime ) > ( 0.0f )", "botMatchData->minBurstFireTime > 0.0f\n\t%g, %g", minBurstFireTime, *(double *)&_XMM8) )
    __debugbreak();
  maxBurstFireTime = botData->botMatchData.maxBurstFireTime;
  if ( maxBurstFireTime <= 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 656, ASSERT_TYPE_ASSERT, "( botMatchData->maxBurstFireTime ) > ( 0.0f )", "botMatchData->maxBurstFireTime > 0.0f\n\t%g, %g", maxBurstFireTime, *(double *)&_XMM8) )
    __debugbreak();
  v18 = botData->botMatchData.minBurstFireTime;
  v19 = botData->botMatchData.maxBurstFireTime;
  if ( v18 > v19 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 657, ASSERT_TYPE_ASSERT, "( botMatchData->minBurstFireTime ) <= ( botMatchData->maxBurstFireTime )", "botMatchData->minBurstFireTime <= botMatchData->maxBurstFireTime\n\t%g, %g", v18, v19) )
    __debugbreak();
  minTimeBetweenBursts = botData->botMatchData.minTimeBetweenBursts;
  if ( minTimeBetweenBursts <= 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 659, ASSERT_TYPE_ASSERT, "( botMatchData->minTimeBetweenBursts ) > ( 0.0f )", "botMatchData->minTimeBetweenBursts > 0.0f\n\t%g, %g", minTimeBetweenBursts, *(double *)&_XMM8) )
    __debugbreak();
  maxTimeBetweenBursts = botData->botMatchData.maxTimeBetweenBursts;
  if ( maxTimeBetweenBursts <= 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 660, ASSERT_TYPE_ASSERT, "( botMatchData->maxTimeBetweenBursts ) > ( 0.0f )", "botMatchData->maxTimeBetweenBursts > 0.0f\n\t%g, %g", maxTimeBetweenBursts, *(double *)&_XMM8) )
    __debugbreak();
  v22 = botData->botMatchData.minTimeBetweenBursts;
  v23 = botData->botMatchData.maxTimeBetweenBursts;
  if ( v22 > v23 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 661, ASSERT_TYPE_ASSERT, "( botMatchData->minTimeBetweenBursts ) <= ( botMatchData->maxTimeBetweenBursts )", "botMatchData->minTimeBetweenBursts <= botMatchData->maxTimeBetweenBursts\n\t%g, %g", v22, v23) )
    __debugbreak();
  sniperInaccuracyScale = botData->botMatchData.sniperInaccuracyScale;
  if ( sniperInaccuracyScale < 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 664, ASSERT_TYPE_ASSERT, "( botMatchData->sniperInaccuracyScale ) >= ( 0.0f )", "botMatchData->sniperInaccuracyScale >= 0.0f\n\t%g, %g", sniperInaccuracyScale, *(double *)&_XMM8) )
    __debugbreak();
  adsDelayFireTime = botData->botMatchData.adsDelayFireTime;
  if ( adsDelayFireTime < 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 665, ASSERT_TYPE_ASSERT, "( botMatchData->adsDelayFireTime ) >= ( 0.0f )", "botMatchData->adsDelayFireTime >= 0.0f\n\t%g, %g", adsDelayFireTime, *(double *)&_XMM8) )
    __debugbreak();
  adsDelayFireTimeScoped = botData->botMatchData.adsDelayFireTimeScoped;
  if ( adsDelayFireTimeScoped < 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 666, ASSERT_TYPE_ASSERT, "( botMatchData->adsDelayFireTimeScoped ) >= ( 0.0f )", "botMatchData->adsDelayFireTimeScoped >= 0.0f\n\t%g, %g", adsDelayFireTimeScoped, *(double *)&_XMM8) )
    __debugbreak();
  fireAtDeadTime = botData->botMatchData.fireAtDeadTime;
  if ( fireAtDeadTime < 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 667, ASSERT_TYPE_ASSERT, "( botMatchData->fireAtDeadTime ) >= ( 0.0f )", "botMatchData->fireAtDeadTime >= 0.0f\n\t%g, %g", fireAtDeadTime, *(double *)&_XMM8) )
    __debugbreak();
  lookAtDeadTime = botData->botMatchData.lookAtDeadTime;
  if ( lookAtDeadTime < 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 668, ASSERT_TYPE_ASSERT, "( botMatchData->lookAtDeadTime ) >= ( 0.0f )", "botMatchData->lookAtDeadTime >= 0.0f\n\t%g, %g", lookAtDeadTime, *(double *)&_XMM8) )
    __debugbreak();
  averageEnemySightTime = botData->botMatchData.averageEnemySightTime;
  if ( averageEnemySightTime < 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 669, ASSERT_TYPE_ASSERT, "( botMatchData->averageEnemySightTime ) >= ( 0.0f )", "botMatchData->averageEnemySightTime >= 0.0f\n\t%g, %g", averageEnemySightTime, *(double *)&_XMM8) )
    __debugbreak();
  sightTurnAroundPenalty = botData->botMatchData.sightTurnAroundPenalty;
  if ( sightTurnAroundPenalty < 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 670, ASSERT_TYPE_ASSERT, "( botMatchData->sightTurnAroundPenalty ) >= ( 0.0f )", "botMatchData->sightTurnAroundPenalty >= 0.0f\n\t%g, %g", sightTurnAroundPenalty, *(double *)&_XMM8) )
    __debugbreak();
  reactionTime = botData->botMatchData.reactionTime;
  if ( reactionTime < 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 671, ASSERT_TYPE_ASSERT, "( botMatchData->reactionTime ) >= ( 0.0f )", "botMatchData->reactionTime >= 0.0f\n\t%g, %g", reactionTime, *(double *)&_XMM8) )
    __debugbreak();
  meleeReactionTime = botData->botMatchData.meleeReactionTime;
  if ( meleeReactionTime < 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 672, ASSERT_TYPE_ASSERT, "( botMatchData->meleeReactionTime ) >= ( 0.0f )", "botMatchData->meleeReactionTime >= 0.0f\n\t%g, %g", meleeReactionTime, *(double *)&_XMM8) )
    __debugbreak();
  meleeDist = botData->botMatchData.meleeDist;
  if ( meleeDist < 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 673, ASSERT_TYPE_ASSERT, "( botMatchData->meleeDist ) >= ( 0.0f )", "botMatchData->meleeDist >= 0.0f\n\t%g, %g", meleeDist, *(double *)&_XMM8) )
    __debugbreak();
  meleeChargeDist = botData->botMatchData.meleeChargeDist;
  if ( meleeChargeDist < 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 674, ASSERT_TYPE_ASSERT, "( botMatchData->meleeChargeDist ) >= ( 0.0f )", "botMatchData->meleeChargeDist >= 0.0f\n\t%g, %g", meleeChargeDist, *(double *)&_XMM8) )
    __debugbreak();
  fireFromHipDist = botData->botMatchData.fireFromHipDist;
  if ( fireFromHipDist < 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 675, ASSERT_TYPE_ASSERT, "( botMatchData->fireFromHipDist ) >= ( 0.0f )", "botMatchData->fireFromHipDist >= 0.0f\n\t%g, %g", fireFromHipDist, *(double *)&_XMM8) )
    __debugbreak();
  diveDelay = botData->botMatchData.diveDelay;
  if ( diveDelay < 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 676, ASSERT_TYPE_ASSERT, "( botMatchData->diveDelay ) >= ( 0.0f )", "botMatchData->diveDelay >= 0.0f\n\t%g, %g", diveDelay, *(double *)&_XMM8) )
    __debugbreak();
  yawSpeed = botData->botMatchData.yawSpeed;
  if ( yawSpeed < 1.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 679, ASSERT_TYPE_ASSERT, "( botMatchData->yawSpeed ) >= ( 1.0f )", "botMatchData->yawSpeed >= 1.0f\n\t%g, %g", yawSpeed, DOUBLE_1_0) )
    __debugbreak();
  yawSpeedAds = botData->botMatchData.yawSpeedAds;
  if ( yawSpeedAds < 1.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 680, ASSERT_TYPE_ASSERT, "( botMatchData->yawSpeedAds ) >= ( 1.0f )", "botMatchData->yawSpeedAds >= 1.0f\n\t%g, %g", yawSpeedAds, DOUBLE_1_0) )
    __debugbreak();
  pitchSpeed = botData->botMatchData.pitchSpeed;
  if ( pitchSpeed < 1.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 681, ASSERT_TYPE_ASSERT, "( botMatchData->pitchSpeed ) >= ( 1.0f )", "botMatchData->pitchSpeed >= 1.0f\n\t%g, %g", pitchSpeed, DOUBLE_1_0) )
    __debugbreak();
  pitchSpeedAds = botData->botMatchData.pitchSpeedAds;
  if ( pitchSpeedAds < 1.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 682, ASSERT_TYPE_ASSERT, "( botMatchData->pitchSpeedAds ) >= ( 1.0f )", "botMatchData->pitchSpeedAds >= 1.0f\n\t%g, %g", pitchSpeedAds, DOUBLE_1_0) )
    __debugbreak();
  strafeChance = botData->botMatchData.strafeChance;
  if ( (strafeChance < 0.0 || strafeChance > 1.0) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 688, ASSERT_TYPE_ASSERT, "( 0.0f ) <= ( botMatchData->strafeChance ) && ( botMatchData->strafeChance ) <= ( 1.0f )", "botMatchData->strafeChance not in [0.0f, 1.0f]\n\t%g not in [%g, %g]", strafeChance, *(double *)&_XMM8, DOUBLE_1_0) )
    __debugbreak();
  diveChance = botData->botMatchData.diveChance;
  if ( (diveChance < 0.0 || diveChance > 1.0) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 689, ASSERT_TYPE_ASSERT, "( 0.0f ) <= ( botMatchData->diveChance ) && ( botMatchData->diveChance ) <= ( 1.0f )", "botMatchData->diveChance not in [0.0f, 1.0f]\n\t%g not in [%g, %g]", diveChance, *(double *)&_XMM8, DOUBLE_1_0) )
    __debugbreak();
  slideChance = botData->botMatchData.slideChance;
  if ( (slideChance < 0.0 || slideChance > 1.0) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 690, ASSERT_TYPE_ASSERT, "( 0.0f ) <= ( botMatchData->slideChance ) && ( botMatchData->slideChance ) <= ( 1.0f )", "botMatchData->slideChance not in [0.0f, 1.0f]\n\t%g not in [%g, %g]", slideChance, *(double *)&_XMM8, DOUBLE_1_0) )
    __debugbreak();
  cornerFireChance = botData->botMatchData.cornerFireChance;
  if ( (cornerFireChance < 0.0 || cornerFireChance > 1.0) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 691, ASSERT_TYPE_ASSERT, "( 0.0f ) <= ( botMatchData->cornerFireChance ) && ( botMatchData->cornerFireChance ) <= ( 1.0f )", "botMatchData->cornerFireChance not in [0.0f, 1.0f]\n\t%g not in [%g, %g]", cornerFireChance, *(double *)&_XMM8, DOUBLE_1_0) )
    __debugbreak();
  cornerJumpChance = botData->botMatchData.cornerJumpChance;
  if ( (cornerJumpChance < 0.0 || cornerJumpChance > 1.0) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 692, ASSERT_TYPE_ASSERT, "( 0.0f ) <= ( botMatchData->cornerJumpChance ) && ( botMatchData->cornerJumpChance ) <= ( 1.0f )", "botMatchData->cornerJumpChance not in [0.0f, 1.0f]\n\t%g not in [%g, %g]", cornerJumpChance, *(double *)&_XMM8, DOUBLE_1_0) )
    __debugbreak();
  throwKnifeChance = botData->botMatchData.throwKnifeChance;
  if ( (throwKnifeChance < 0.0 || throwKnifeChance > 1.0) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 693, ASSERT_TYPE_ASSERT, "( 0.0f ) <= ( botMatchData->throwKnifeChance ) && ( botMatchData->throwKnifeChance ) <= ( 1.0f )", "botMatchData->throwKnifeChance not in [0.0f, 1.0f]\n\t%g not in [%g, %g]", throwKnifeChance, *(double *)&_XMM8, DOUBLE_1_0) )
    __debugbreak();
  breakMelee = botData->botMatchData.breakMelee;
  if ( (breakMelee < 0.0 || breakMelee > 1.0) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 694, ASSERT_TYPE_ASSERT, "( 0.0f ) <= ( botMatchData->breakMelee ) && ( botMatchData->breakMelee ) <= ( 1.0f )", "botMatchData->breakMelee not in [0.0f, 1.0f]\n\t%g not in [%g, %g]", breakMelee, *(double *)&_XMM8, DOUBLE_1_0) )
    __debugbreak();
  hearingDeaf = botData->botMatchData.hearingDeaf;
  if ( (hearingDeaf < 0.0 || hearingDeaf > 1.0) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 695, ASSERT_TYPE_ASSERT, "( 0.0f ) <= ( botMatchData->hearingDeaf ) && ( botMatchData->hearingDeaf ) <= ( 1.0f )", "botMatchData->hearingDeaf not in [0.0f, 1.0f]\n\t%g not in [%g, %g]", hearingDeaf, *(double *)&_XMM8, DOUBLE_1_0) )
    __debugbreak();
  visionBlinded = botData->botMatchData.visionBlinded;
  if ( (visionBlinded < 0.0 || visionBlinded > 1.0) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 696, ASSERT_TYPE_ASSERT, "( 0.0f ) <= ( botMatchData->visionBlinded ) && ( botMatchData->visionBlinded ) <= ( 1.0f )", "botMatchData->visionBlinded not in [0.0f, 1.0f]\n\t%g not in [%g, %g]", visionBlinded, *(double *)&_XMM8, DOUBLE_1_0) )
    __debugbreak();
  blindDiveChance = botData->botMatchData.blindDiveChance;
  if ( (blindDiveChance < 0.0 || blindDiveChance > 1.0) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 697, ASSERT_TYPE_ASSERT, "( 0.0f ) <= ( botMatchData->blindDiveChance ) && ( botMatchData->blindDiveChance ) <= ( 1.0f )", "botMatchData->blindDiveChance not in [0.0f, 1.0f]\n\t%g not in [%g, %g]", blindDiveChance, *(double *)&_XMM8, DOUBLE_1_0) )
    __debugbreak();
  seeHardwareChance = botData->botMatchData.seeHardwareChance;
  if ( (seeHardwareChance < 0.0 || seeHardwareChance > 1.0) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 698, ASSERT_TYPE_ASSERT, "( 0.0f ) <= ( botMatchData->seeHardwareChance ) && ( botMatchData->seeHardwareChance ) <= ( 1.0f )", "botMatchData->seeHardwareChance not in [0.0f, 1.0f]\n\t%g not in [%g, %g]", seeHardwareChance, *(double *)&_XMM8, DOUBLE_1_0) )
    __debugbreak();
  targetHardwareChance = botData->botMatchData.targetHardwareChance;
  if ( (targetHardwareChance < 0.0 || targetHardwareChance > 1.0) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 699, ASSERT_TYPE_ASSERT, "( 0.0f ) <= ( botMatchData->targetHardwareChance ) && ( botMatchData->targetHardwareChance ) <= ( 1.0f )", "botMatchData->targetHardwareChance not in [0.0f, 1.0f]\n\t%g not in [%g, %g]", targetHardwareChance, *(double *)&_XMM8, DOUBLE_1_0) )
    __debugbreak();
  targetVehicleChance = botData->botMatchData.targetVehicleChance;
  if ( (targetVehicleChance < 0.0 || targetVehicleChance > 1.0) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 700, ASSERT_TYPE_ASSERT, "( 0.0f ) <= ( botMatchData->targetVehicleChance ) && ( botMatchData->targetVehicleChance ) <= ( 1.0f )", "botMatchData->targetVehicleChance not in [0.0f, 1.0f]\n\t%g not in [%g, %g]", targetVehicleChance, *(double *)&_XMM8, DOUBLE_1_0) )
    __debugbreak();
  holdBreathChance = botData->botMatchData.holdBreathChance;
  if ( (holdBreathChance < 0.0 || holdBreathChance > 1.0) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 701, ASSERT_TYPE_ASSERT, "( 0.0f ) <= ( botMatchData->holdBreathChance ) && ( botMatchData->holdBreathChance ) <= ( 1.0f )", "botMatchData->holdBreathChance not in [0.0f, 1.0f]\n\t%g not in [%g, %g]", holdBreathChance, *(double *)&_XMM8, DOUBLE_1_0) )
    __debugbreak();
  launcherRespawnChance = botData->botMatchData.launcherRespawnChance;
  if ( (launcherRespawnChance < 0.0 || launcherRespawnChance > 1.0) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 702, ASSERT_TYPE_ASSERT, "( 0.0f ) <= ( botMatchData->launcherRespawnChance ) && ( botMatchData->launcherRespawnChance ) <= ( 1.0f )", "botMatchData->launcherRespawnChance not in [0.0f, 1.0f]\n\t%g not in [%g, %g]", launcherRespawnChance, *(double *)&_XMM8, DOUBLE_1_0) )
    __debugbreak();
  avoidSkyPercent = botData->botMatchData.avoidSkyPercent;
  if ( (avoidSkyPercent < 0.0 || avoidSkyPercent > 1.0) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 703, ASSERT_TYPE_ASSERT, "( 0.0f ) <= ( botMatchData->avoidSkyPercent ) && ( botMatchData->avoidSkyPercent ) <= ( 1.0f )", "botMatchData->avoidSkyPercent not in [0.0f, 1.0f]\n\t%g not in [%g, %g]", avoidSkyPercent, *(double *)&_XMM8, DOUBLE_1_0) )
    __debugbreak();
  launcherCombatChance = botData->botMatchData.launcherCombatChance;
  if ( (launcherCombatChance < 0.0 || launcherCombatChance > 1.0) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 704, ASSERT_TYPE_ASSERT, "( 0.0f ) <= ( botMatchData->launcherCombatChance ) && ( botMatchData->launcherCombatChance ) <= ( 1.0f )", "botMatchData->launcherCombatChance not in [0.0f, 1.0f]\n\t%g not in [%g, %g]", launcherCombatChance, *(double *)&_XMM8, DOUBLE_1_0) )
    __debugbreak();
  grenadeThrowbackChance = botData->botMatchData.grenadeThrowbackChance;
  if ( (grenadeThrowbackChance < 0.0 || grenadeThrowbackChance > 1.0) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 705, ASSERT_TYPE_ASSERT, "( 0.0f ) <= ( botMatchData->grenadeThrowbackChance ) && ( botMatchData->grenadeThrowbackChance ) <= ( 1.0f )", "botMatchData->grenadeThrowbackChance not in [0.0f, 1.0f]\n\t%g not in [%g, %g]", grenadeThrowbackChance, *(double *)&_XMM8, DOUBLE_1_0) )
    __debugbreak();
  if ( botData->botMatchData.burstFireType >= (unsigned int)BOT_BURST_FIRE_TYPE_COUNT )
  {
    LODWORD(v64) = 3;
    LODWORD(v63) = botData->botMatchData.burstFireType;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 708, ASSERT_TYPE_ASSERT, "(unsigned)( botMatchData->burstFireType ) < (unsigned)( BOT_BURST_FIRE_TYPE_COUNT )", "botMatchData->burstFireType doesn't index BOT_BURST_FIRE_TYPE_COUNT\n\t%i not in [0, %i)", v63, v64) )
      __debugbreak();
  }
  grenadeCookPrecision = botData->botMatchData.grenadeCookPrecision;
  if ( grenadeCookPrecision != -1.0 && grenadeCookPrecision < 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 711, ASSERT_TYPE_ASSERT, "( (botMatchData->grenadeCookPrecision == -1) || (botMatchData->grenadeCookPrecision >= 0) )", (const char *)&queryFormat, "(botMatchData->grenadeCookPrecision == -1) || (botMatchData->grenadeCookPrecision >= 0)") )
    __debugbreak();
  awareViewAngle = botData->botMatchData.awareViewAngle;
  if ( (awareViewAngle < 0.0 || awareViewAngle > 360.0) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 712, ASSERT_TYPE_ASSERT, "( 0.0f ) <= ( botMatchData->awareViewAngle ) && ( botMatchData->awareViewAngle ) <= ( 360.0f )", "botMatchData->awareViewAngle not in [0.0f, 360.0f]\n\t%g not in [%g, %g]", awareViewAngle, *(double *)&_XMM8, DOUBLE_360_0) )
    __debugbreak();
  strategyLevel = botData->botMatchData.strategyLevel;
  if ( strategyLevel != 0.0 && strategyLevel != 1.0 && strategyLevel != 2.0 && strategyLevel != 3.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 713, ASSERT_TYPE_ASSERT, "( (botMatchData->strategyLevel == 0.0f) || (botMatchData->strategyLevel == 1.0f) || (botMatchData->strategyLevel == 2.0f) || (botMatchData->strategyLevel == 3.0f) )", (const char *)&queryFormat, "(botMatchData->strategyLevel == 0.0f) || (botMatchData->strategyLevel == 1.0f) || (botMatchData->strategyLevel == 2.0f) || (botMatchData->strategyLevel == 3.0f)") )
    __debugbreak();
  intelligentSprintLevel = botData->botMatchData.intelligentSprintLevel;
  if ( intelligentSprintLevel != 0.0 && intelligentSprintLevel != 1.0 && intelligentSprintLevel != 2.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 714, ASSERT_TYPE_ASSERT, "( (botMatchData->intelligentSprintLevel == 0) || (botMatchData->intelligentSprintLevel == 1) || (botMatchData->intelligentSprintLevel == 2) )", (const char *)&queryFormat, "(botMatchData->intelligentSprintLevel == 0) || (botMatchData->intelligentSprintLevel == 1) || (botMatchData->intelligentSprintLevel == 2)") )
    __debugbreak();
}

/*
==============
Bot_ZoneGetCount
==============
*/
__int64 Bot_ZoneGetCount(int zone, int nodeTeam, bot_zone_count_t type)
{
  __int64 v4; 
  __int64 v7; 
  __int64 v8; 
  int v9; 

  v4 = zone;
  if ( !s_botZoneData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25934, ASSERT_TYPE_ASSERT, "( s_botZoneData )", (const char *)&queryFormat, "s_botZoneData") )
    __debugbreak();
  if ( (_DWORD)v4 == 255 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25935, ASSERT_TYPE_ASSERT, "( zone != 255 )", (const char *)&queryFormat, "zone != PATH_INVALID_ZONE") )
    __debugbreak();
  if ( (unsigned int)v4 >= Path_ZoneCount() )
  {
    v9 = Path_ZoneCount();
    LODWORD(v7) = v4;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25936, ASSERT_TYPE_ASSERT, "(unsigned)( zone ) < (unsigned)( Path_ZoneCount() )", "zone doesn't index Path_ZoneCount()\n\t%i not in [0, %i)", v7, v9) )
      __debugbreak();
  }
  if ( (unsigned int)v4 >= s_botZoneDataCount )
  {
    LODWORD(v8) = s_botZoneDataCount;
    LODWORD(v7) = v4;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25937, ASSERT_TYPE_ASSERT, "(unsigned)( zone ) < (unsigned)( s_botZoneDataCount )", "zone doesn't index s_botZoneDataCount\n\t%i not in [0, %i)", v7, v8) )
      __debugbreak();
  }
  if ( (unsigned int)nodeTeam >= 2 )
  {
    LODWORD(v8) = 2;
    LODWORD(v7) = nodeTeam;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25938, ASSERT_TYPE_ASSERT, "(unsigned)( nodeTeam ) < (unsigned)( (2) )", "nodeTeam doesn't index MAX_NODE_TEAMS_MP\n\t%i not in [0, %i)", v7, v8) )
      __debugbreak();
  }
  if ( (unsigned int)type >= BOT_ZONE_COUNT_COUNT )
  {
    LODWORD(v8) = 5;
    LODWORD(v7) = type;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25939, ASSERT_TYPE_ASSERT, "(unsigned)( type ) < (unsigned)( BOT_ZONE_COUNT_COUNT )", "type doesn't index BOT_ZONE_COUNT_COUNT\n\t%i not in [0, %i)", v7, v8) )
      __debugbreak();
  }
  return s_botZoneData[v4].count[4 * nodeTeam + type + nodeTeam];
}

/*
==============
Bot_ZoneNearestCount
==============
*/
int Bot_ZoneNearestCount(int zone, int nodeTeam, int steps, const bot_zone_count_cmp_t *compares, int numCompares)
{
  int v5; 
  float fCost; 
  int v9; 
  const pathnode_t *v10; 
  int i; 
  pathnode_t *v12; 
  pathnode_t *pNextOpen; 
  int v14; 
  pathnode_t *v15; 
  int v16; 
  __int64 v17; 
  pathnode_t *v18; 
  unsigned int v19; 
  int v20; 
  const bot_zone_count_cmp_t *v21; 
  __int64 v22; 
  int v23; 
  bot_zone_count_cmp_type_t type; 
  __int64 v26; 
  __int64 v27; 

  v5 = steps;
  if ( zone == 255 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25524, ASSERT_TYPE_ASSERT, "( zone != 255 )", (const char *)&queryFormat, "zone != PATH_INVALID_ZONE") )
    __debugbreak();
  fCost = FLOAT_N1_0;
  v9 = Path_ZoneCount();
  v10 = NULL;
  if ( !v9 )
    return 255;
  for ( i = 0; i < v9; *(_QWORD *)&v12->transient.nodeCost = 0i64 )
  {
    v12 = Path_ConvertZoneIndexToZone(i++);
    *(_QWORD *)&v12->transient.iSearchFrame = 0i64;
    v12->transient.pNextOpen = NULL;
    v12->transient.pPrevOpen = NULL;
    v12->transient.pParent = NULL;
    *(_QWORD *)&v12->transient.fCost = 0i64;
  }
  pNextOpen = Path_ConvertZoneIndexToZone(zone);
  if ( !pNextOpen && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25550, ASSERT_TYPE_ASSERT, "( nodeCur )", (const char *)&queryFormat, "nodeCur") )
    __debugbreak();
  v14 = numCompares;
  pNextOpen->transient.iSearchFrame = v5;
  pNextOpen->transient.linkIndex = 1;
  v15 = pNextOpen;
  do
  {
    if ( v5 < 0 || pNextOpen->transient.iSearchFrame >= 1 )
    {
      v16 = 0;
      if ( pNextOpen->dynamic.wLinkCount > 0 )
      {
        v17 = 0i64;
        do
        {
          v18 = Path_ConvertIndexToNode(pNextOpen->constant.Links[v17].nodeNum);
          if ( !v18->transient.linkIndex )
          {
            v18->transient.fCost = pNextOpen->constant.Links[v17].fDist + pNextOpen->transient.fCost;
            v18->transient.linkIndex = 1;
            v18->transient.iSearchFrame = pNextOpen->transient.iSearchFrame - 1;
            v15->transient.pNextOpen = v18;
            v15 = v18;
          }
          ++v16;
          ++v17;
        }
        while ( v16 < pNextOpen->dynamic.wLinkCount );
      }
      v14 = numCompares;
    }
    v19 = Path_NodeZoneFromNode(pNextOpen);
    v20 = v19;
    if ( v19 >= s_botZoneDataCount )
    {
      LODWORD(v27) = s_botZoneDataCount;
      LODWORD(v26) = v19;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25490, ASSERT_TYPE_ASSERT, "(unsigned)( zone ) < (unsigned)( s_botZoneDataCount )", "zone doesn't index s_botZoneDataCount\n\t%i not in [0, %i)", v26, v27) )
        __debugbreak();
    }
    if ( v20 == 255 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25491, ASSERT_TYPE_ASSERT, "( zone != 255 )", (const char *)&queryFormat, "zone != PATH_INVALID_ZONE") )
      __debugbreak();
    v21 = compares;
    if ( !compares && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25492, ASSERT_TYPE_ASSERT, "( compares )", (const char *)&queryFormat, "compares") )
      __debugbreak();
    if ( v14 < 0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25493, ASSERT_TYPE_ASSERT, "( numCompares >= 0 )", (const char *)&queryFormat, "numCompares >= 0") )
      __debugbreak();
    v22 = 0i64;
LABEL_32:
    v23 = 1;
    while ( v22 < numCompares )
    {
      type = v21->type;
      if ( type )
      {
        if ( type == BOT_ZONE_COUNT_CMP_LESS )
        {
          if ( Bot_ZoneGetCount(v20, nodeTeam, v21->count) >= v21->value )
            goto LABEL_46;
          ++v22;
          ++v21;
          goto LABEL_32;
        }
      }
      else
      {
        if ( Bot_ZoneGetCount(v20, nodeTeam, v21->count) > v21->value )
        {
          ++v22;
          ++v21;
          goto LABEL_32;
        }
        v23 = 0;
      }
      ++v22;
      ++v21;
      if ( !v23 )
        goto LABEL_46;
    }
    if ( fCost < 0.0 || fCost >= pNextOpen->transient.fCost )
    {
      fCost = pNextOpen->transient.fCost;
      v10 = pNextOpen;
    }
LABEL_46:
    pNextOpen = pNextOpen->transient.pNextOpen;
    v14 = numCompares;
    v5 = steps;
  }
  while ( pNextOpen );
  if ( v10 )
    return Path_ConvertZoneToZoneIndex(v10);
  else
    return 255;
}

/*
==============
Bot_ZonePathAdd
==============
*/
void Bot_ZonePathAdd(const bot_info_t *botInfo, int addCount)
{
  ;
}

/*
==============
Bot_ZonePopulateObstacleData
==============
*/
void Bot_ZonePopulateObstacleData()
{
  unsigned int v0; 
  unsigned int v1; 
  unsigned __int16 v2; 
  unsigned int v3; 
  __int64 v4; 
  __int64 v5; 
  __int64 v6; 
  bot_zone_data_t *v7; 
  pathnode_t *v8; 
  pathnode_t *v9; 
  int v10; 
  __int128 v14; 
  float v15; 
  __m128 v19; 
  float v20; 
  __m128 v24; 
  vec3_t pos; 
  __int128 v34; 
  __m128 v35; 
  __m128 v36; 

  v0 = Path_NodeCount();
  v1 = Path_ZoneCount();
  if ( s_botZoneDataCount != v1 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3857, ASSERT_TYPE_ASSERT, "( s_botZoneDataCount == zoneCount )", (const char *)&queryFormat, "s_botZoneDataCount == zoneCount") )
    __debugbreak();
  v2 = 0;
  v3 = 0;
  if ( v1 )
  {
    v4 = 0i64;
    v5 = 0i64;
    v6 = 12i64;
    do
    {
      v7 = s_botZoneData;
      *(_QWORD *)((char *)s_botZoneData + v6 - 4) = 0i64;
      *(_QWORD *)v7[v4].bounds.midPoint.v = 0i64;
      *(_QWORD *)&v7[v4].bounds.midPoint.z = 0i64;
      *(_QWORD *)&v7[v4].bounds.halfSize.y = 0i64;
      v8 = Path_ConvertZoneIndexToZone(v3);
      pathnode_t::GetPos(v8, &s_botZoneData[v5].bounds.midPoint);
      ++v3;
      ++v5;
      v6 += 52i64;
      ++v4;
    }
    while ( v3 < v1 );
  }
  if ( v0 )
  {
    do
    {
      if ( !v1 )
        break;
      if ( Path_NodeValid(v2) )
      {
        v9 = Path_ConvertIndexToNode(v2);
        pathnode_t::GetPos(v9, &pos);
        v10 = Path_NodeZoneFromNode(v9);
        if ( v10 != 255 )
        {
          _RCX = v10;
          _RAX = s_botZoneData;
          HIDWORD(v34) = 0;
          v14 = v34;
          *(float *)&v14 = pos.v[0];
          _XMM5 = v14;
          v15 = s_botZoneData[_RCX].bounds.midPoint.v[0];
          __asm
          {
            vinsertps xmm5, xmm5, dword ptr [rsp+98h+pos+4], arg_8
            vinsertps xmm5, xmm5, dword ptr [rsp+98h+pos+8], arg_18
          }
          v35.m128_i32[3] = 0;
          v19 = v35;
          v19.m128_f32[0] = v15;
          _XMM4 = v19;
          v20 = s_botZoneData[_RCX].bounds.halfSize.v[0];
          __asm
          {
            vinsertps xmm4, xmm4, dword ptr [rcx+rax+14h], 10h
            vinsertps xmm4, xmm4, dword ptr [rcx+rax+18h], 20h ; ' '
          }
          v36.m128_i32[3] = 0;
          v24 = v36;
          v24.m128_f32[0] = v20;
          _XMM3 = v24;
          __asm
          {
            vinsertps xmm3, xmm3, dword ptr [rcx+rax+20h], 10h
            vinsertps xmm3, xmm3, dword ptr [rcx+rax+24h], 20h ; ' '
          }
          _XMM0 = _mm128_sub_ps(_XMM4, _XMM3);
          _XMM1 = _mm128_add_ps(_XMM4, _XMM3);
          __asm
          {
            vminps  xmm2, xmm0, xmm5
            vmaxps  xmm0, xmm1, xmm5
          }
          v36 = _XMM3;
          _XMM3 = _mm128_mul_ps(_mm128_add_ps(_XMM2, _XMM0), g_oneHalf.v);
          s_botZoneData[_RCX].bounds.midPoint.v[0] = _XMM3.m128_f32[0];
          __asm
          {
            vextractps dword ptr [rcx+rax+14h], xmm3, 1
            vextractps dword ptr [rcx+rax+18h], xmm3, 2
          }
          v35 = _XMM4;
          _XMM4 = _mm128_sub_ps(_XMM3, _XMM2);
          _RAX[_RCX].bounds.halfSize.v[0] = _XMM4.m128_f32[0];
          __asm
          {
            vextractps dword ptr [rcx+rax+20h], xmm4, 1
            vextractps dword ptr [rcx+rax+24h], xmm4, 2
          }
          v34 = _XMM5;
        }
      }
      ++v2;
    }
    while ( v2 < v0 );
  }
}

/*
==============
Bot_ZonePredictEnemyProx
==============
*/
void Bot_ZonePredictEnemyProx(int iZone, int nodeTeam, int enemyNodeTeam, int unAccountedEnemies, int predictedEnemyZone)
{
  __int64 v6; 
  int v8; 
  int v9; 
  unsigned __int16 team; 
  int i; 
  pathnode_t *v12; 
  pathnode_t *v13; 
  const pathnode_t *pNextOpen; 
  pathnode_t *v15; 
  __int16 wLinkCount; 
  int iSearchFrame; 
  int v18; 
  int v19; 
  __int64 v20; 
  pathnode_t *v21; 
  pathnode_t *v22; 
  int v23; 
  int v24; 
  int Count; 
  int v26; 
  int v27; 
  int v28; 
  int v29; 
  pathnode_t *v30; 
  int v31; 

  v6 = iZone;
  if ( iZone >= s_botZoneDataCount && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25608, ASSERT_TYPE_ASSERT, "(unsigned)( iZone ) < (unsigned)( s_botZoneDataCount )", "iZone doesn't index s_botZoneDataCount\n\t%i not in [0, %i)", iZone, s_botZoneDataCount) )
    __debugbreak();
  v8 = 0;
  v9 = predictedEnemyZone;
  v31 = 0;
  team = s_botZoneData[v6].team;
  if ( team && Path_GetNodeTeam((team_t)team) == enemyNodeTeam )
  {
    v8 = 1;
    v31 = 1;
  }
  else if ( Bot_ZoneGetCount(v6, nodeTeam, BOT_ZONE_COUNT_ENEMY_KNOWN) <= 0 && (_DWORD)v6 != predictedEnemyZone )
  {
    return;
  }
  for ( i = 0; i < Path_ZoneCount(); v12->transient.iSearchFrame = -1 )
  {
    v12 = Path_ConvertZoneIndexToZone(i++);
    *(_QWORD *)&v12->transient.iSearchFrame = 0i64;
    v12->transient.pNextOpen = NULL;
    v12->transient.pPrevOpen = NULL;
    v12->transient.pParent = NULL;
    *(_QWORD *)&v12->transient.fCost = 0i64;
    *(_QWORD *)&v12->transient.nodeCost = 0i64;
  }
  v13 = Path_ConvertZoneIndexToZone(v6);
  v30 = v13;
  pNextOpen = v13;
  v15 = v13;
  v13->transient.iSearchFrame = unAccountedEnemies;
  do
  {
    wLinkCount = pNextOpen->dynamic.wLinkCount;
    if ( wLinkCount > 0 )
    {
      iSearchFrame = pNextOpen->transient.iSearchFrame;
      if ( iSearchFrame > 0 )
      {
        v18 = iSearchFrame - wLinkCount;
        if ( v18 < 0 )
          v18 = 0;
        if ( pNextOpen == v13 && ((_DWORD)v6 == v9 || v8) && v18 < 1 )
          v18 = 1;
        v19 = 0;
        v20 = 0i64;
        do
        {
          v21 = Path_ConvertIndexToNode(pNextOpen->constant.Links[v20].nodeNum);
          v22 = v21;
          if ( v21->transient.iSearchFrame == -1 )
          {
            v23 = Path_NodeZoneFromNode(v21);
            if ( !Bot_ZoneGetCount(v23, nodeTeam, BOT_ZONE_COUNT_ALLY) )
            {
              v22->transient.iSearchFrame = v18;
              v15->transient.pNextOpen = v22;
              v15 = v22;
            }
          }
          ++v19;
          ++v20;
        }
        while ( v19 < pNextOpen->dynamic.wLinkCount );
        v9 = predictedEnemyZone;
      }
    }
    v24 = Path_NodeZoneFromNode(pNextOpen);
    Count = Bot_ZoneGetCount(v24, nodeTeam, BOT_ZONE_COUNT_ENEMY_PREDICT);
    v26 = Path_NodeZoneFromNode(pNextOpen);
    v27 = Bot_ZoneGetCount(v26, nodeTeam, BOT_ZONE_COUNT_ENEMY_KNOWN);
    v28 = pNextOpen->transient.iSearchFrame + Count;
    if ( v27 + unAccountedEnemies < v28 )
      v28 = v27 + unAccountedEnemies;
    v29 = Path_NodeZoneFromNode(pNextOpen);
    Bot_ZoneSetCount(v29, nodeTeam, BOT_ZONE_COUNT_ENEMY_PREDICT, v28);
    pNextOpen = pNextOpen->transient.pNextOpen;
    v13 = v30;
    v8 = v31;
  }
  while ( pNextOpen );
}

/*
==============
Bot_ZoneSetCount
==============
*/
void Bot_ZoneSetCount(int zone, int nodeTeam, bot_zone_count_t type, int count)
{
  __int64 v5; 
  __int64 v8; 
  __int64 v9; 
  int v10; 

  v5 = zone;
  if ( !s_botZoneData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25950, ASSERT_TYPE_ASSERT, "( s_botZoneData )", (const char *)&queryFormat, "s_botZoneData") )
    __debugbreak();
  if ( (_DWORD)v5 == 255 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25951, ASSERT_TYPE_ASSERT, "( zone != 255 )", (const char *)&queryFormat, "zone != PATH_INVALID_ZONE") )
    __debugbreak();
  if ( (unsigned int)v5 >= Path_ZoneCount() )
  {
    v10 = Path_ZoneCount();
    LODWORD(v8) = v5;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25952, ASSERT_TYPE_ASSERT, "(unsigned)( zone ) < (unsigned)( Path_ZoneCount() )", "zone doesn't index Path_ZoneCount()\n\t%i not in [0, %i)", v8, v10) )
      __debugbreak();
  }
  if ( (unsigned int)v5 >= s_botZoneDataCount )
  {
    LODWORD(v9) = s_botZoneDataCount;
    LODWORD(v8) = v5;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25953, ASSERT_TYPE_ASSERT, "(unsigned)( zone ) < (unsigned)( s_botZoneDataCount )", "zone doesn't index s_botZoneDataCount\n\t%i not in [0, %i)", v8, v9) )
      __debugbreak();
  }
  if ( (unsigned int)nodeTeam >= 2 )
  {
    LODWORD(v9) = 2;
    LODWORD(v8) = nodeTeam;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25954, ASSERT_TYPE_ASSERT, "(unsigned)( nodeTeam ) < (unsigned)( (2) )", "nodeTeam doesn't index MAX_NODE_TEAMS_MP\n\t%i not in [0, %i)", v8, v9) )
      __debugbreak();
  }
  if ( (unsigned int)type >= BOT_ZONE_COUNT_COUNT )
  {
    LODWORD(v9) = 5;
    LODWORD(v8) = type;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25955, ASSERT_TYPE_ASSERT, "(unsigned)( type ) < (unsigned)( BOT_ZONE_COUNT_COUNT )", "type doesn't index BOT_ZONE_COUNT_COUNT\n\t%i not in [0, %i)", v8, v9) )
      __debugbreak();
  }
  if ( count < 0 )
  {
    LODWORD(v8) = count;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25956, ASSERT_TYPE_ASSERT, "( count ) >= ( 0 )", "count >= 0\n\t%i, %i", v8, 0i64) )
      __debugbreak();
  }
  if ( (unsigned __int8)count != count && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25957, ASSERT_TYPE_ASSERT, "( static_cast<byte>( count ) == count )", (const char *)&queryFormat, "static_cast<byte>( count ) == count") )
    __debugbreak();
  s_botZoneData[v5].count[4 * nodeTeam + type + nodeTeam] = truncate_cast<unsigned char,int>(count);
}

/*
==============
Bot_ZoneSetTeam
==============
*/
void Bot_ZoneSetTeam(int zone, team_t team)
{
  unsigned __int16 v2; 
  __int64 v3; 

  v2 = team;
  v3 = zone;
  if ( zone >= s_botZoneDataCount && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25479, ASSERT_TYPE_ASSERT, "(unsigned)( zone ) < (unsigned)( s_botZoneDataCount )", "zone doesn't index s_botZoneDataCount\n\t%i not in [0, %i)", zone, s_botZoneDataCount) )
    __debugbreak();
  if ( (_DWORD)v3 == 255 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25480, ASSERT_TYPE_ASSERT, "( zone != 255 )", (const char *)&queryFormat, "zone != PATH_INVALID_ZONE") )
    __debugbreak();
  s_botZoneData[v3].team = v2;
}

/*
==============
Bot_ZoneUpdateCounts
==============
*/
void Bot_ZoneUpdateCounts(void)
{
  unsigned int v0; 
  __int64 v1; 
  __int64 v2; 
  unsigned __int8 *count; 
  const dvar_t *v4; 
  bitarray<224> *AllTeamFlags; 
  int v6; 
  __int64 v7; 
  gentity_s *v8; 
  __int16 EntityIndex; 
  const SvClientMP *MpClient; 
  BOOL IsClientConnected; 
  bitarray_base<bitarray<224> > *v12; 
  const SvClientMP *v13; 
  const dvar_t *v14; 
  const dvar_t *v15; 
  const pathnode_t *v16; 
  int NodeTeam; 
  __int64 v18; 
  int v19; 
  unsigned int v20; 
  pathnode_t *v21; 
  const dvar_t *v22; 
  const vec4_t *v23; 
  float v24; 
  float v25; 
  float v26; 
  float v27; 
  __int64 v28; 
  float v29; 
  bool v30; 
  float v31; 
  int v32; 
  int v33; 
  sentient_s *v34; 
  sentient_info_t *SentientInfo; 
  const pathnode_t *pLastKnownNode; 
  int v37; 
  int v38; 
  int v39; 
  int v40; 
  int v41; 
  int v42; 
  char v43; 
  gentity_s *v44; 
  team_t eTeam; 
  const vec4_t *v46; 
  unsigned int v47; 
  char v48; 
  int v49; 
  __int64 v50; 
  int v51; 
  int v52; 
  bool v53; 
  __int64 v54; 
  __int64 v55; 
  unsigned __int16 team; 
  int v57; 
  unsigned int v58; 
  bool v59; 
  __int64 *v60; 
  __int64 v61; 
  float *v62; 
  int v63; 
  int i; 
  int v65; 
  int v66; 
  int v67; 
  float v68; 
  int v69; 
  int v70; 
  float v71; 
  float v72; 
  float v73; 
  float v74; 
  pathnode_t *v75; 
  float v76; 
  int v77; 
  __int64 duration; 
  __int64 v79; 
  int v80; 
  int v81; 
  __int64 v82; 
  __int64 v83; 
  int enemyNodeTeam; 
  __int64 v85; 
  __int64 *v86; 
  int v87; 
  __int64 v88; 
  int unAccountedEnemies[2]; 
  gentity_s *ent; 
  vec3_t origin; 
  vec3_t end; 
  vec3_t pos; 
  bitarray<224> iTeamFlags; 
  __int64 v95; 
  __int64 v96[2]; 
  __int64 v97[4]; 

  v0 = Path_ZoneCount();
  v1 = v0;
  v80 = v0;
  if ( s_botZoneDataCount != v0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25721, ASSERT_TYPE_ASSERT, "( s_botZoneDataCount == static_cast<uint>( zoneCount ) )", (const char *)&queryFormat, "s_botZoneDataCount == static_cast<uint>( zoneCount )") )
    __debugbreak();
  if ( (int)v1 > 0 )
  {
    v2 = v1;
    count = s_botZoneData->count;
    do
    {
      *(_QWORD *)count = 0i64;
      *((_WORD *)count + 4) = 0;
      count += 52;
      --v2;
    }
    while ( v2 );
  }
  if ( Path_ZoneCount() && level.teammode != TEAMMODE_FFA )
  {
    v4 = DVARINT_bot_NoTarget;
    if ( !DVARINT_bot_NoTarget && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_NoTarget") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v4);
    if ( v4->current.integer != 1 )
    {
      *(_QWORD *)unAccountedEnemies = 0i64;
      v85 = 0i64;
      v95 = 0i64;
      v96[0] = 0i64;
      v96[1] = 0i64;
      v88 = 0i64;
      if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
        __debugbreak();
      if ( (int)ComCharacterLimits::ms_gameData.m_characterCount > 2048 )
      {
        if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
          __debugbreak();
        LODWORD(v79) = 2048;
        LODWORD(duration) = ComCharacterLimits::ms_gameData.m_characterCount;
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25739, ASSERT_TYPE_ASSERT, "( ComCharacterLimits::GetCharacterMaxCount() ) <= ( ( 2048 ) )", "ComCharacterLimits::GetCharacterMaxCount() <= MAX_GENTITIES\n\t%i, %i", duration, v79) )
          __debugbreak();
      }
      if ( Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) )
        AllTeamFlags = (bitarray<224> *)Com_TeamsSP_GetAllTeamFlags();
      else
        AllTeamFlags = (bitarray<224> *)Com_TeamsMP_GetAllTeamFlags();
      iTeamFlags = *AllTeamFlags;
      v6 = 0;
      v7 = 0i64;
      enemyNodeTeam = 1;
      while ( 1 )
      {
        v82 = v7;
        v81 = v6;
        if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
          __debugbreak();
        if ( v6 >= (int)ComCharacterLimits::ms_gameData.m_characterCount )
          break;
        v8 = (gentity_s *)((char *)level.gentities + v7);
        ent = (gentity_s *)((char *)level.gentities + v7);
        if ( !(gentity_s *)((char *)level.gentities + v7) )
          goto LABEL_114;
        EntityIndex = G_GetEntityIndex((const gentity_s *)((char *)level.gentities + v7));
        if ( !G_IsEntityInUse(EntityIndex) || !v8->sentient )
          goto LABEL_114;
        if ( v8->client )
        {
          MpClient = SV_Client_GetMpClient(v8->s.number);
          IsClientConnected = Bot_IsClientConnected(MpClient);
          goto LABEL_37;
        }
        if ( v8->agent )
        {
          IsClientConnected = v8->s.eType == ET_AGENT;
LABEL_37:
          if ( !IsClientConnected )
            goto LABEL_114;
        }
        if ( v8->s.eType != ET_INVISIBLE )
        {
          v12 = (bitarray_base<bitarray<224> > *)Com_TeamsMP_GetAllTeamFlags();
          if ( bitarray_base<bitarray<224>>::testBit(v12, v8->sentient->eTeam) )
          {
            if ( !v8->client || (v13 = SV_Client_GetMpClient(v8->s.number), Bot_IsClientActive(v13)) )
            {
              if ( !GameModeFlagContainer<enum BgEntityFlagsCommon,enum BgEntityFlagsSP,enum BgEntityFlagsMP,64>::TestFlagInternal(&v8->flags, ACTIVE, 2u) )
              {
                v14 = DVARINT_bot_NoTarget;
                if ( !DVARINT_bot_NoTarget && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_NoTarget") )
                  __debugbreak();
                Dvar_CheckFrontendServerThread(v14);
                if ( v14->current.integer != 2 || v8->s.eType != ET_PLAYER )
                {
                  v15 = DVARINT_bot_NoTarget;
                  if ( !DVARINT_bot_NoTarget && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_NoTarget") )
                    __debugbreak();
                  Dvar_CheckFrontendServerThread(v15);
                  if ( v15->current.integer != 3 || v8->s.eType == ET_PLAYER )
                  {
                    v16 = Sentient_NearestNode(v8->sentient);
                    if ( v16 )
                    {
                      NodeTeam = Path_GetNodeTeam(v8->sentient->eTeam);
                      v18 = NodeTeam;
                      v19 = 1 - NodeTeam;
                      v87 = 1 - NodeTeam;
                      if ( (unsigned int)(1 - NodeTeam) >= 2 )
                      {
                        LODWORD(v79) = 2;
                        LODWORD(duration) = 1 - NodeTeam;
                        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25772, ASSERT_TYPE_ASSERT, "(unsigned)( enemyNodeTeam ) < (unsigned)( (2) )", "enemyNodeTeam doesn't index MAX_NODE_TEAMS_MP\n\t%i not in [0, %i)", duration, v79) )
                          __debugbreak();
                      }
                      v20 = Path_NodeZoneFromNode(v16);
                      if ( v20 != 255 )
                      {
                        if ( v20 >= Path_ZoneCount() )
                        {
                          LODWORD(v79) = Path_ZoneCount();
                          LODWORD(duration) = v20;
                          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25776, ASSERT_TYPE_ASSERT, "(unsigned)( iZone ) < (unsigned)( Path_ZoneCount() )", "iZone doesn't index Path_ZoneCount()\n\t%i not in [0, %i)", duration, v79) )
                            __debugbreak();
                        }
                        v21 = Path_ConvertZoneIndexToZone(v20);
                        pathnode_t::GetPos(v21, &pos);
                        v22 = DVARINT_ai_showNodes;
                        if ( !DVARINT_ai_showNodes && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "ai_showNodes") )
                          __debugbreak();
                        Dvar_CheckFrontendServerThread(v22);
                        if ( v22->current.integer == 13 && v8->health > 0 )
                        {
                          v23 = &colorRed;
                          v24 = v8->r.currentOrigin.v[1];
                          v25 = v8->r.currentOrigin.v[2] + 450.0;
                          end.v[0] = v8->r.currentOrigin.v[0];
                          end.v[1] = v24;
                          end.v[2] = v25;
                          if ( (_DWORD)v18 )
                            v23 = &colorBlue;
                          G_DebugLine(&v8->r.currentOrigin, &end, v23, 0);
                        }
                        v26 = pos.v[0];
                        v27 = pos.v[1];
                        ++*((_DWORD *)&v85 + v18);
                        v28 = 3 * v18;
                        v29 = v26 + *((float *)&v96[-1] + 3 * v18);
                        ++unAccountedEnemies[v18 - 2];
                        v30 = v8->health <= 0;
                        *((float *)&v96[-1] + v28) = v29;
                        v31 = pos.v[2];
                        *((float *)&v95 + v28 + 1) = v27 + *((float *)&v95 + 3 * v18 + 1);
                        *((float *)v96 + v28) = v31 + *((float *)v96 + 3 * v18);
                        if ( !v30 )
                        {
                          v32 = Bot_ZoneGetCount(v20, v18, BOT_ZONE_COUNT_ALLY);
                          Bot_ZoneSetCount(v20, v18, BOT_ZONE_COUNT_ALLY, v32 + 1);
                          v33 = Bot_ZoneGetCount(v20, v19, BOT_ZONE_COUNT_ENEMY);
                          Bot_ZoneSetCount(v20, v19, BOT_ZONE_COUNT_ENEMY, v33 + 1);
                        }
                        memset(v97, 0, sizeof(v97));
                        v34 = Sentient_FirstSentient(&iTeamFlags);
                        if ( v34 )
                        {
                          while ( 1 )
                          {
                            if ( v34->ent )
                              goto LABEL_76;
                            if ( v34->ai )
                              break;
LABEL_96:
                            v34 = Sentient_NextSentient(v34, &iTeamFlags);
                            if ( !v34 )
                            {
                              LODWORD(v1) = v80;
                              v19 = v87;
                              goto LABEL_98;
                            }
                          }
                          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25808, ASSERT_TYPE_ASSERT, "( enemySentient->ent || !enemySentient->ai )", (const char *)&queryFormat, "enemySentient->ent || !enemySentient->ai") )
                            __debugbreak();
LABEL_76:
                          if ( v34->ai && !Bot_EntityIsInvisible(v34->ent) && !AI_IsAlliedSentient(v8->sentient, v34) )
                          {
                            SentientInfo = Sentient_GetSentientInfo(v34, v8->sentient);
                            if ( !SentientInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25812, ASSERT_TYPE_ASSERT, "( info )", (const char *)&queryFormat, "info") )
                              __debugbreak();
                            pLastKnownNode = SentientInfo->pLastKnownNode;
                            if ( pLastKnownNode )
                            {
                              v37 = Path_NodeZoneFromNode(pLastKnownNode);
                              v38 = v37;
                              if ( v37 != 255 )
                              {
                                v39 = Bot_ZoneGetCount(v37, v18, BOT_ZONE_COUNT_ALLY);
                                v40 = 10000;
                                if ( v39 > 0 )
                                  v40 = 2000;
                                if ( level.time - SentientInfo->lastKnownPosTime < v40 )
                                {
                                  v41 = v38 % 8;
                                  v42 = v38 / 8;
                                  v43 = v41;
                                  if ( (unsigned int)v42 >= 0x20 )
                                  {
                                    LODWORD(v79) = 32;
                                    LODWORD(duration) = v42;
                                    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25827, ASSERT_TYPE_ASSERT, "(unsigned)( (knownZone / 8) ) < (unsigned)( ( ( 256 ) / 8 ) )", "(knownZone / 8) doesn't index BOT_ZONE_STACK_VISIT_MAX\n\t%i not in [0, %i)", duration, v79) )
                                      __debugbreak();
                                  }
                                  *((_BYTE *)v97 + v42) |= 1 << v43;
                                  if ( Dvar_GetInt_Internal_DebugName(DVARINT_ai_showNodes, "ai_showNodes") == 13 && level.time - SentientInfo->lastKnownPosTime < 500 )
                                  {
                                    v44 = v34->ent;
                                    eTeam = v34->eTeam;
                                    *(_QWORD *)origin.v = *(_QWORD *)v34->ent->r.currentOrigin.v;
                                    origin.v[2] = v44->r.currentOrigin.v[2] + 450.0;
                                    if ( Path_GetNodeTeam(eTeam) )
                                      v46 = &colorBlue;
                                    else
                                      v46 = &colorRed;
                                    G_DebugBox(&origin, &actorBoxCrouch, 0.0, v46, 0, 0);
                                  }
                                }
                              }
                            }
                          }
                          goto LABEL_96;
                        }
LABEL_98:
                        v47 = 0;
                        if ( (int)v1 <= 0 )
                          goto LABEL_107;
                        v48 = 1;
                        v49 = 0;
                        do
                        {
                          v50 = v47 >> 3;
                          if ( (unsigned int)v50 >= 0x20 )
                          {
                            LODWORD(v79) = 32;
                            LODWORD(duration) = v47 >> 3;
                            if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25848, ASSERT_TYPE_ASSERT, "(unsigned)( (iZone / 8) ) < (unsigned)( ( ( 256 ) / 8 ) )", "(iZone / 8) doesn't index BOT_ZONE_STACK_VISIT_MAX\n\t%i not in [0, %i)", duration, v79) )
                              __debugbreak();
                          }
                          if ( ((unsigned __int8)v48 & *((_BYTE *)v97 + v50)) != 0 )
                          {
                            v49 = 1;
                            v51 = Bot_ZoneGetCount(v47, v19, BOT_ZONE_COUNT_ENEMY_KNOWN);
                            Bot_ZoneSetCount(v47, v19, BOT_ZONE_COUNT_ENEMY_KNOWN, v51 + 1);
                            v52 = Bot_ZoneGetCount(v47, v19, BOT_ZONE_COUNT_ENEMY_PREDICT);
                            Bot_ZoneSetCount(v47, v19, BOT_ZONE_COUNT_ENEMY_PREDICT, v52 + 1);
                          }
                          ++v47;
                          v48 = __ROL1__(v48, 1);
                        }
                        while ( (int)v47 < v80 );
                        v53 = v49 == 0;
                        v8 = ent;
                        if ( v53 )
LABEL_107:
                          ++unAccountedEnemies[v18];
                        if ( SV_BotIsBotEnt(v8) && !Bot_GetEntityData(v8) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25864, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
                          __debugbreak();
                        LODWORD(v1) = v80;
                      }
                      v6 = v81;
                      v7 = v82;
                    }
                  }
                }
              }
            }
          }
        }
LABEL_114:
        ++v6;
        v7 += 1456i64;
      }
      v54 = (int)v1;
      if ( (int)v1 <= 0 )
        goto LABEL_135;
      v55 = 0i64;
      while ( 1 )
      {
        team = s_botZoneData[v55].team;
        if ( team )
          break;
LABEL_133:
        ++v55;
        if ( !--v54 )
        {
          LODWORD(v1) = v80;
LABEL_135:
          v60 = &v88;
          v61 = 4i64;
          v86 = &v88;
          v62 = (float *)v96;
          v83 = 4i64;
          v63 = 0;
          while ( 2 )
          {
            for ( i = 0; i < (int)v1; ++i )
            {
              v65 = Bot_ZoneGetCount(i, v63, BOT_ZONE_COUNT_ENEMY_KNOWN);
              Bot_ZoneSetCount(i, v63, BOT_ZONE_COUNT_ENEMY_PREDICT, v65);
            }
            v66 = *(int *)((char *)unAccountedEnemies + v61);
            if ( v66 > 0 )
            {
              v67 = -1;
              if ( v66 != *(_DWORD *)((char *)&v85 + v61) || *(int *)v60 <= 0 )
                goto LABEL_147;
              v68 = (float)*(int *)v60;
              v69 = v80;
              v70 = 0;
              v71 = (float)(1.0 / v68) * *(v62 - 2);
              v72 = (float)(1.0 / v68) * *(v62 - 1);
              v73 = (float)(1.0 / v68) * *v62;
              v74 = 0.0;
              if ( v80 > 0 )
              {
                do
                {
                  v75 = Path_ConvertZoneIndexToZone(v70);
                  pathnode_t::GetPos(v75, &origin);
                  v76 = (float)((float)((float)(origin.v[1] - v72) * (float)(origin.v[1] - v72)) + (float)((float)(origin.v[0] - v71) * (float)(origin.v[0] - v71))) + (float)((float)(origin.v[2] - v73) * (float)(origin.v[2] - v73));
                  if ( Bot_ZoneGetCount(v70, v63, BOT_ZONE_COUNT_ALLY) <= 0 && v76 > v74 )
                  {
                    v67 = v70;
                    v74 = v76;
                  }
                  ++v70;
                }
                while ( v70 < v80 );
                v61 = v83;
LABEL_147:
                v69 = v80;
              }
              v77 = 0;
              if ( v69 > 0 )
              {
                do
                  Bot_ZonePredictEnemyProx(v77++, v63, enemyNodeTeam, v66, v67);
                while ( v77 < v80 );
                v61 = v83;
                v60 = v86;
              }
              LODWORD(v1) = v80;
            }
            v61 -= 4i64;
            v83 = v61;
            v60 = (__int64 *)((char *)v60 + 4);
            --enemyNodeTeam;
            ++v63;
            v86 = v60;
            v62 += 3;
            if ( enemyNodeTeam <= -1 )
              return;
            continue;
          }
        }
      }
      v57 = team - 1;
      if ( Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) )
      {
        v58 = 2;
        if ( v57 < 2 )
          v58 = v57;
        if ( v58 < 3 )
          goto LABEL_129;
        LODWORD(v79) = 3;
        LODWORD(duration) = v58;
        v59 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\pathnode.h", 205, ASSERT_TYPE_ASSERT, "(unsigned)( result ) < (unsigned)( (3) )", "result doesn't index MAX_NODE_TEAMS_SP\n\t%i not in [0, %i)", duration, v79);
      }
      else
      {
        v58 = 1;
        if ( v57 < 1 )
          v58 = v57;
        if ( v58 < 2 )
          goto LABEL_132;
        LODWORD(v79) = 2;
        LODWORD(duration) = v58;
        v59 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\pathnode.h", 210, ASSERT_TYPE_ASSERT, "(unsigned)( result ) < (unsigned)( (2) )", "result doesn't index MAX_NODE_TEAMS_MP\n\t%i not in [0, %i)", duration, v79);
      }
      if ( v59 )
        __debugbreak();
LABEL_129:
      if ( v58 >= 2 )
      {
        LODWORD(v79) = 2;
        LODWORD(duration) = v58;
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25877, ASSERT_TYPE_ASSERT, "(unsigned)( zoneNodeTeam ) < (unsigned)( (2) )", "zoneNodeTeam doesn't index MAX_NODE_TEAMS_MP\n\t%i not in [0, %i)", duration, v79) )
          __debugbreak();
      }
LABEL_132:
      ++*((_DWORD *)&v85 + (int)v58);
      goto LABEL_133;
    }
  }
}

/*
==============
SV_BadPlaceExistsToBot
==============
*/
_BOOL8 SV_BadPlaceExistsToBot(const ai_common_t *self, unsigned __int8 badPlaceType)
{
  bot_data_t *EntityData; 

  if ( !self && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11145, ASSERT_TYPE_ASSERT, "( self )", (const char *)&queryFormat, "self") )
    __debugbreak();
  if ( !Com_GameMode_SupportsFeature(WEAPON_RAISING_ALTSWITCH) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11146, ASSERT_TYPE_ASSERT, "( G_Bot_UseGlobalBadPlace() )", (const char *)&queryFormat, "G_Bot_UseGlobalBadPlace()") )
    __debugbreak();
  EntityData = Bot_GetEntityData(self->ent);
  if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11149, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  return badPlaceType != 1 || EntityData->botMatchData.strategyLevel > 0.0;
}

/*
==============
SV_BotAllocateSystemMemory
==============
*/
void SV_BotAllocateSystemMemory(HunkUser *hunkUser)
{
  __int64 zoneCount; 
  unsigned int v3; 
  unsigned __int64 v4; 
  bot_zone_data_t *v5; 
  unsigned int v6; 
  unsigned __int8 *v7; 
  bot_sentient_history_t *v8; 
  __int16 *v9; 
  __int64 i; 

  if ( BG_BotOrAgentSystemEnabled() )
  {
    if ( !hunkUser && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 785, ASSERT_TYPE_ASSERT, "( hunkUser )", (const char *)&queryFormat, "hunkUser") )
      __debugbreak();
    zoneCount = (unsigned int)pathData.zoneCount;
    v3 = pathData.nodeCount - pathData.zoneCount;
    if ( s_botZoneData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 791, ASSERT_TYPE_ASSERT, "( !s_botZoneData )", (const char *)&queryFormat, "!s_botZoneData") )
      __debugbreak();
    s_botZoneDataCount = zoneCount;
    if ( (_DWORD)zoneCount )
    {
      v4 = 52 * zoneCount;
      v5 = (bot_zone_data_t *)Mem_HunkUser_AllocInternal(hunkUser, v4, 4ui64, "SV_BotAllocateSystemMemory");
      s_botZoneData = v5;
      if ( !v5 )
      {
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 797, ASSERT_TYPE_ASSERT, "( s_botZoneData )", (const char *)&queryFormat, "s_botZoneData") )
          __debugbreak();
        v5 = s_botZoneData;
      }
      memset_0(v5, 0, v4);
    }
    if ( s_botTraversalTypes && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 801, ASSERT_TYPE_ASSERT, "( !s_botTraversalTypes )", (const char *)&queryFormat, "!s_botTraversalTypes") )
      __debugbreak();
    if ( (_DWORD)s_botTraversalTypesCount && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 802, ASSERT_TYPE_ASSERT, "( s_botTraversalTypesCount == 0 )", (const char *)&queryFormat, "s_botTraversalTypesCount == 0") )
      __debugbreak();
    if ( v3 )
    {
      v6 = v3 >> 1;
      LODWORD(s_botTraversalTypesCount) = v6 + 1;
      v7 = (unsigned __int8 *)Mem_HunkUser_AllocInternal(hunkUser, v6 + 1, 4ui64, "SV_BotAllocateSystemMemory");
      s_botTraversalTypes = v7;
      if ( !v7 )
      {
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 808, ASSERT_TYPE_ASSERT, "( s_botTraversalTypes )", (const char *)&queryFormat, "s_botTraversalTypes") )
          __debugbreak();
        v7 = s_botTraversalTypes;
      }
      memset_0(v7, 0, v6 + 1);
    }
    if ( s_botSentientHistory && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 813, ASSERT_TYPE_ASSERT, "( !s_botSentientHistory )", (const char *)&queryFormat, "!s_botSentientHistory") )
      __debugbreak();
    v8 = (bot_sentient_history_t *)Mem_HunkUser_AllocInternal(hunkUser, 0x1100ui64, 4ui64, "SV_BotAllocateSystemMemory");
    s_botSentientHistory = v8;
    if ( !v8 )
    {
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 816, ASSERT_TYPE_ASSERT, "( s_botSentientHistory )", (const char *)&queryFormat, "s_botSentientHistory") )
        __debugbreak();
      v8 = s_botSentientHistory;
    }
    memset_0(v8, 0, 0x1100ui64);
    v9 = s_botEntAffecters;
    s_botDoorBlockerData[0].ownerId = -1;
    for ( i = 64i64; i; --i )
      *v9++ = 2047;
    s_botDoorBlockerData[1].ownerId = -1;
    s_botDoorBlockerData[2].ownerId = -1;
    s_botDoorBlockerData[3].ownerId = -1;
    s_botDoorBlockerData[4].ownerId = -1;
    s_botDoorBlockerData[5].ownerId = -1;
    s_botDoorBlockerData[6].ownerId = -1;
    s_botDoorBlockerData[7].ownerId = -1;
    s_botDoorBlockerData[8].ownerId = -1;
    s_botDoorBlockerData[9].ownerId = -1;
    s_botDoorBlockerData[10].ownerId = -1;
    s_botDoorBlockerData[11].ownerId = -1;
    s_botDoorBlockerData[12].ownerId = -1;
    s_botDoorBlockerData[13].ownerId = -1;
    s_botDoorBlockerData[14].ownerId = -1;
    s_botDoorBlockerData[15].ownerId = -1;
    s_botDoorBlockerData[16].ownerId = -1;
    s_botDoorBlockerData[17].ownerId = -1;
    s_botDoorBlockerData[18].ownerId = -1;
    s_botDoorBlockerData[19].ownerId = -1;
    s_botDoorBlockerData[20].ownerId = -1;
    s_botDoorBlockerData[21].ownerId = -1;
    s_botDoorBlockerData[22].ownerId = -1;
    s_botDoorBlockerData[23].ownerId = -1;
    s_botDoorBlockerData[24].ownerId = -1;
    s_botDoorBlockerData[25].ownerId = -1;
    s_botDoorBlockerData[26].ownerId = -1;
    s_botDoorBlockerData[27].ownerId = -1;
    s_botDoorBlockerData[28].ownerId = -1;
    s_botDoorBlockerData[29].ownerId = -1;
    s_botDoorBlockerData[30].ownerId = -1;
    s_botDoorBlockerData[31].ownerId = -1;
  }
}

/*
==============
SV_BotAllowedToSeeEnt
==============
*/
int SV_BotAllowedToSeeEnt(ai_common_t *self, const gentity_s *ent)
{
  const bot_data_t *EntityData; 
  BOOL IsHardwareEnt; 
  unsigned int eType; 
  BOOL v8; 
  int v9; 
  BOOL v10; 

  if ( !self && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17783, ASSERT_TYPE_ASSERT, "( self )", (const char *)&queryFormat, "self") )
    __debugbreak();
  if ( !self->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17784, ASSERT_TYPE_ASSERT, "( self->ent )", (const char *)&queryFormat, "self->ent") )
    __debugbreak();
  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17785, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( !ent->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17786, ASSERT_TYPE_ASSERT, "( ent->sentient )", (const char *)&queryFormat, "ent->sentient") )
    __debugbreak();
  EntityData = Bot_GetEntityData(self->ent);
  if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17793, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( Bot_EntityIsInvisible(ent) || Bot_IsBlinded(EntityData) || ent->health <= 0 )
    return 0;
  if ( Bot_IsVehicleEnt(ent) )
    return !Sentient_IsAerial(ent->sentient) || !Bot_IsAerialEntityInDeathStage(ent);
  if ( SV_BotCanAlwaysSeeEnt(self, ent) || Bot_EntityVisibleThroughWalls(EntityData, ent) )
    return 1;
  IsHardwareEnt = Bot_IsHardwareEnt(ent);
  eType = (unsigned __int16)ent->s.eType;
  v8 = IsHardwareEnt;
  v10 = (unsigned __int16)eType <= 0x11u && (v9 = 133122, _bittest(&v9, eType)) || Bot_IsVehicleEnt(ent);
  if ( (!v8 || !Bot_CanSeeHardware(self, ent)) && !v10 )
    return 0;
  return Bot_SightThresholdReached(self->sentient, ent->sentient);
}

/*
==============
SV_BotBreakGlassMove
==============
*/
__int64 SV_BotBreakGlassMove(const gentity_s *ent, const vec3_t *velocity, const Bounds *bounds)
{
  float v6; 
  float v7; 
  float v8; 
  int number; 
  float v10; 
  float v11; 
  unsigned __int16 GlassHitId; 
  __int128 v13; 
  float v14; 
  __int128 v15; 
  float v16; 
  vec3_t start; 
  vec3_t end; 
  vec3_t damageDir; 
  vec3_t damagePos; 
  trace_t results; 

  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25973, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( !bounds && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25974, ASSERT_TYPE_ASSERT, "( bounds )", (const char *)&queryFormat, "bounds") )
    __debugbreak();
  if ( !level.frameDuration && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_level_locals.h", 349, ASSERT_TYPE_ASSERT, "(level.frameDuration)", "%s\n\tAccessing frame duration before it's been set", "level.frameDuration") )
    __debugbreak();
  v6 = ent->r.currentOrigin.v[1];
  v7 = ent->r.currentOrigin.v[2];
  start.v[0] = ent->r.currentOrigin.v[0];
  v8 = (float)(2 * level.frameDuration) * 0.001;
  number = ent->s.number;
  v10 = v8 * velocity->v[1];
  end.v[0] = (float)(v8 * velocity->v[0]) + start.v[0];
  v11 = v8 * velocity->v[2];
  end.v[1] = v10 + v6;
  end.v[2] = v11 + v7;
  start.v[1] = v6;
  start.v[2] = v7;
  G_Main_TraceCapsule(&results, &start, &end, bounds, number, 16);
  GlassHitId = Trace_GetGlassHitId(&results);
  if ( !GlassHitId )
    return 0i64;
  v13 = LODWORD(velocity->v[0]);
  damagePos.v[0] = (float)((float)(end.v[0] - start.v[0]) * results.fraction) + start.v[0];
  v14 = velocity->v[1];
  damagePos.v[1] = (float)((float)(end.v[1] - start.v[1]) * results.fraction) + start.v[1];
  v15 = v13;
  damagePos.v[2] = (float)((float)(end.v[2] - start.v[2]) * results.fraction) + start.v[2];
  v16 = velocity->v[2];
  *(float *)&v15 = fsqrt((float)((float)(*(float *)&v13 * *(float *)&v13) + (float)(v14 * v14)) + (float)(v16 * v16));
  _XMM3 = v15;
  __asm
  {
    vcmpless xmm0, xmm3, cs:__real@80000000
    vblendvps xmm0, xmm3, xmm1, xmm0
  }
  damageDir.v[0] = *(float *)&v13 * (float)(1.0 / *(float *)&_XMM0);
  damageDir.v[2] = v16 * (float)(1.0 / *(float *)&_XMM0);
  damageDir.v[1] = v14 * (float)(1.0 / *(float *)&_XMM0);
  G_Glass_DamagePiece(GlassHitId - 1, 100000, &damagePos, &damageDir);
  return 1i64;
}

/*
==============
SV_BotCanAlwaysSeeEnt
==============
*/
__int64 SV_BotCanAlwaysSeeEnt(const ai_common_t *self, const gentity_s *ent)
{
  bot_data_t *EntityData; 
  const gentity_s *v5; 
  const playerState_s *EntityPlayerStateConst; 
  const Weapon *ViewmodelWeapon; 
  bool v8; 
  const playerState_s *v9; 

  if ( !self && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17755, ASSERT_TYPE_ASSERT, "( self )", (const char *)&queryFormat, "self") )
    __debugbreak();
  if ( !self->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17756, ASSERT_TYPE_ASSERT, "( self->ent )", (const char *)&queryFormat, "self->ent") )
    __debugbreak();
  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17757, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  EntityData = Bot_GetEntityData(self->ent);
  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6097, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( !G_Utils_IsClientOrAgent(ent) )
    goto LABEL_27;
  v5 = EntityData->botInfo.ent;
  if ( !v5 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17726, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  EntityPlayerStateConst = G_GetEntityPlayerStateConst(v5);
  if ( !EntityPlayerStateConst && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17729, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  if ( !BG_IsEMPJammed(EntityPlayerStateConst) && (GameModeFlagContainer<enum POtherFlagsCommon,enum POtherFlagsSP,enum POtherFlagsMP,64>::TestFlagInternal(&EntityPlayerStateConst->otherFlags, ACTIVE, 3u) || EntityPlayerStateConst->weapCommon.fWeaponPosFrac > 0.0099999998 && (ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(EntityPlayerStateConst), v8 = BG_UsingAlternate(EntityPlayerStateConst), BG_HasThermalScope(EntityPlayerStateConst, ViewmodelWeapon, v8))) )
  {
    v9 = G_GetEntityPlayerStateConst(ent);
    if ( v9 && BG_HasPerk(&v9->perks, 0x24u) )
      return 0i64;
  }
  else
  {
LABEL_27:
    if ( !Bot_EntityVisibleThroughWalls(EntityData, ent) )
      return 0i64;
  }
  return 1i64;
}

/*
==============
SV_BotCanTargetSentient
==============
*/
__int64 SV_BotCanTargetSentient(const sentient_s *botSentient, const sentient_s *enemySentient, int *isAwareOfSentient)
{
  bot_data_t *EntityData; 
  signed __int64 v7; 
  __int64 v8; 
  const dvar_t *v9; 
  const dvar_t *v10; 
  const dvar_t *v11; 
  const Weapon *ViewmodelWeapon; 
  int scriptFlags; 
  int HasBestWeapForAerialEnemy; 
  int v16; 
  unsigned int v17; 
  int v18; 
  double v19; 
  float v20; 
  float v21; 
  float v22; 
  unsigned int v23; 
  int v24; 
  double v25; 
  const Weapon *RangedWeapon; 
  const Weapon *v27; 
  vec3_t goal; 

  if ( !botSentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17497, ASSERT_TYPE_ASSERT, "( botSentient )", (const char *)&queryFormat, "botSentient") )
    __debugbreak();
  if ( !botSentient->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17498, ASSERT_TYPE_ASSERT, "( botSentient->ent )", (const char *)&queryFormat, "botSentient->ent") )
    __debugbreak();
  if ( !enemySentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17499, ASSERT_TYPE_ASSERT, "( enemySentient )", (const char *)&queryFormat, "enemySentient") )
    __debugbreak();
  if ( !enemySentient->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17500, ASSERT_TYPE_ASSERT, "( enemySentient->ent )", (const char *)&queryFormat, "enemySentient->ent") )
    __debugbreak();
  if ( !isAwareOfSentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17501, ASSERT_TYPE_ASSERT, "( isAwareOfSentient )", (const char *)&queryFormat, "isAwareOfSentient") )
    __debugbreak();
  EntityData = Bot_GetEntityData(botSentient->ent);
  if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17509, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v7 = 60 * (enemySentient - level.sentients);
  v8 = (__int64)&EntityData->scriptedAgentInfo + v7 + 11644;
  if ( (bot_data_t *)((char *)EntityData + v7) == (bot_data_t *)-11652i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17513, ASSERT_TYPE_ASSERT, "( botSentientInfo )", (const char *)&queryFormat, "botSentientInfo") )
    __debugbreak();
  *isAwareOfSentient = 0;
  v9 = DVARINT_bot_NoTarget;
  if ( !DVARINT_bot_NoTarget && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_NoTarget") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v9);
  if ( v9->current.integer == 1 )
    return 0i64;
  v10 = DVARINT_bot_NoTarget;
  if ( !DVARINT_bot_NoTarget && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_NoTarget") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v10);
  if ( v10->current.integer == 2 && enemySentient->ent->s.eType == ET_PLAYER )
    return 0i64;
  v11 = DVARINT_bot_NoTarget;
  if ( !DVARINT_bot_NoTarget && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_NoTarget") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v11);
  if ( v11->current.integer == 3 && enemySentient->ent->s.eType != ET_PLAYER )
    return 0i64;
  if ( Bot_EntityIsInvisible(enemySentient->ent) )
    return 0i64;
  if ( !Bot_IsHighAerialSentient((sentient_s *)enemySentient) )
  {
    if ( Bot_IsHardwareEnt(enemySentient->ent) )
    {
      if ( EntityData->botMatchData.seeHardwareChance <= 0.0 )
        return 0i64;
      v20 = enemySentient->ent->r.currentOrigin.v[0] - botSentient->ent->r.currentOrigin.v[0];
      v21 = enemySentient->ent->r.currentOrigin.v[1] - botSentient->ent->r.currentOrigin.v[1];
      v22 = enemySentient->ent->r.currentOrigin.v[2] - botSentient->ent->r.currentOrigin.v[2];
      if ( (float)((float)((float)(v21 * v21) + (float)(v20 * v20)) + (float)(v22 * v22)) < 4096.0 && GameModeFlagContainer<enum BgEntityFlagsCommon,enum BgEntityFlagsSP,enum BgEntityFlagsMP,64>::TestFlagStrict(&enemySentient->ent->flags, (BgEntityFlagsMP)34) )
        return 0i64;
      if ( !BG_HasPerk(&EntityData->botInfo.playerState->perks, 6u) )
      {
        if ( !Bot_HasScriptGoal(EntityData) || (Bot_GetScriptGoal(EntityData, &goal), !Bot_IsPointInRangeOfHardwareEntExplosion(enemySentient->ent, &goal)) )
        {
          *isAwareOfSentient = !enemySentient->expendable;
          if ( EntityData->botInfo.scriptGoal.type >= BOT_SCR_GOAL_OBJECTIVE )
            return 0i64;
          v23 = *(_DWORD *)(v8 + 56);
          if ( (v23 & 1) == 0 )
          {
            v24 = *(_DWORD *)(v8 + 52);
            if ( !v24 || level.time - v24 > 5000 )
            {
              *(_DWORD *)(v8 + 52) = level.time;
              v25 = G_random();
              v23 = *(_DWORD *)(v8 + 56) & 0xFFFFFFFE | (*(float *)&v25 < EntityData->botMatchData.targetHardwareChance);
              *(_DWORD *)(v8 + 56) = v23;
            }
            if ( (v23 & 1) == 0 )
              return 0i64;
          }
        }
      }
    }
    goto LABEL_76;
  }
  ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(EntityData->botInfo.playerState);
  if ( Bot_Weap_IsNone(ViewmodelWeapon) )
  {
LABEL_43:
    *isAwareOfSentient = 1;
    return 0i64;
  }
  scriptFlags = EntityData->botInfo.scriptFlags;
  if ( (scriptFlags & 0x4000) != 0 )
  {
    if ( (scriptFlags & 0x2000) != 0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17574, ASSERT_TYPE_ASSERT, "( !(botData->botInfo.scriptFlags & ( 1 << 13 )) )", (const char *)&queryFormat, "!(botData->botInfo.scriptFlags & BOT_SCRIPT_FLAG_ALWAYS_ALLOW_AERIAL_TARGETING)") )
      __debugbreak();
    goto LABEL_43;
  }
  if ( Bot_IsAerialEntityInDeathStage(enemySentient->ent) )
    return 0i64;
  if ( (EntityData->botInfo.scriptFlags & 0x2000) == 0 && !Bot_HasRemoteEyes(EntityData) )
  {
    if ( !Bot_GetLastKnownEntNearestNode(EntityData, enemySentient->ent) )
      return 0i64;
    HasBestWeapForAerialEnemy = Bot_Weap_HasBestWeapForAerialEnemy(EntityData, enemySentient->ent);
    if ( Bot_Weap_AvailableWeapOfTypeOrClass(EntityData, 0, 0x1005u) )
    {
      if ( !enemySentient->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17444, ASSERT_TYPE_ASSERT, "( sentient->ent )", (const char *)&queryFormat, "sentient->ent") )
        __debugbreak();
      Bot_IsHighAerialSentient((sentient_s *)enemySentient);
      v16 = 1;
    }
    else
    {
      v16 = 0;
    }
    if ( !HasBestWeapForAerialEnemy )
    {
      *isAwareOfSentient = 1;
      if ( !v16 )
        return 0i64;
      v17 = *(_DWORD *)(v8 + 56);
      if ( (v17 & 1) == 0 )
      {
        v18 = *(_DWORD *)(v8 + 52);
        if ( !v18 || level.time - v18 > 5000 )
        {
          *(_DWORD *)(v8 + 52) = level.time;
          v19 = G_random();
          v17 = *(_DWORD *)(v8 + 56) & 0xFFFFFFFE | (*(float *)&v19 < EntityData->botMatchData.targetVehicleChance);
          *(_DWORD *)(v8 + 56) = v17;
        }
        if ( (v17 & 1) == 0 )
          return 0i64;
      }
    }
LABEL_76:
    if ( GameModeFlagContainer<enum BgEntityFlagsCommon,enum BgEntityFlagsSP,enum BgEntityFlagsMP,64>::TestFlagStrict(&enemySentient->ent->flags, (BgEntityFlagsMP)34) )
    {
      RangedWeapon = Bot_Weap_EntityGetRangedWeapon(botSentient->ent);
      if ( Bot_Weap_IsNone(RangedWeapon) )
        return 0i64;
      v27 = Bot_Weap_GetViewmodelWeapon(EntityData->botInfo.playerState);
      if ( !Bot_Weap_Ammo(EntityData->botInfo.playerState, v27) )
        return 0i64;
    }
  }
  *isAwareOfSentient = 1;
  return 1i64;
}

/*
==============
SV_BotCanUseTraversalLink
==============
*/
char SV_BotCanUseTraversalLink(const pathnode_t *startNode, const pathnode_t *endNode, const gentity_s *ent)
{
  if ( ((1 << LOBYTE(startNode->constant.type)) & 0x68010000) == 0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4378, ASSERT_TYPE_ASSERT, "( Path_IsNegotiationBegin( startNode ) )", (const char *)&queryFormat, "Path_IsNegotiationBegin( startNode )") )
    __debugbreak();
  if ( ((1 << LOBYTE(endNode->constant.type)) & 0x70020000) == 0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4379, ASSERT_TYPE_ASSERT, "( Path_IsNegotiationEnd( endNode ) )", (const char *)&queryFormat, "Path_IsNegotiationEnd( endNode )") )
    __debugbreak();
  if ( startNode->constant.target != endNode->constant.targetname && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4380, ASSERT_TYPE_ASSERT, "( startNode->constant.target == endNode->constant.targetname )", (const char *)&queryFormat, "startNode->constant.target == endNode->constant.targetname") )
    __debugbreak();
  return 1;
}

/*
==============
SV_BotCheckAvoidSentient
==============
*/
void SV_BotCheckAvoidSentient(int isAwareOfSentient, const sentient_s *botSentient, sentient_s *otherSentient)
{
  bot_data_t *EntityData; 
  gentity_s *ent; 
  int time; 
  float v9; 
  __int16 number; 
  int v11; 
  vec3_t *p_currentOrigin; 
  const Weapon *v13; 
  vec3_t location1; 

  if ( !botSentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17308, ASSERT_TYPE_ASSERT, "( botSentient )", (const char *)&queryFormat, "botSentient") )
    __debugbreak();
  if ( !botSentient->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17309, ASSERT_TYPE_ASSERT, "( botSentient->ent )", (const char *)&queryFormat, "botSentient->ent") )
    __debugbreak();
  if ( !otherSentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17310, ASSERT_TYPE_ASSERT, "( otherSentient )", (const char *)&queryFormat, "otherSentient") )
    __debugbreak();
  if ( AI_IsAlliedSentient(botSentient, otherSentient) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17311, ASSERT_TYPE_ASSERT, "( !AI_IsAlliedSentient( botSentient, otherSentient ) )", (const char *)&queryFormat, "!AI_IsAlliedSentient( botSentient, otherSentient )") )
    __debugbreak();
  if ( isAwareOfSentient )
  {
    EntityData = Bot_GetEntityData(botSentient->ent);
    ent = otherSentient->ent;
    if ( otherSentient->ent->s.eType != ET_SCRIPTMOVER || (otherSentient->sentientFlags & 2) == 0 )
    {
      time = level.time;
      v9 = ent->r.currentOrigin.v[1];
      location1.v[0] = ent->r.currentOrigin.v[0];
      number = ent->s.number;
      location1.v[2] = ent->r.currentOrigin.v[2];
      location1.v[1] = v9;
      v11 = 4 - (Sentient_IsAerial(otherSentient) != 0);
      if ( Bot_MemoryFindEvent(EntityData, (bot_mem_type_t)v11, number, NULL, time, time - 10000) )
      {
        Bot_MemoryUpdateEntityEvent(EntityData, (bot_mem_type_t)v11, number, 1, time, time - 10000);
      }
      else
      {
        p_currentOrigin = &botSentient->ent->r.currentOrigin;
        if ( p_currentOrigin->v[0] != 0.0 || botSentient->ent->r.currentOrigin.v[1] != 0.0 || botSentient->ent->r.currentOrigin.v[2] != 0.0 )
        {
          v13 = Bot_Weap_None();
          Bot_MemoryWriteEvent(EntityData, (bot_mem_type_t)v11, v13, &location1, p_currentOrigin, number);
          EntityData->botInfo.pNavigator->ClearPath(EntityData->botInfo.pNavigator);
        }
      }
      if ( !Bot_GetHidingFromEntity(EntityData) && Sentient_IsAerial(otherSentient) && (Bot_RecentSeeSentient(EntityData, otherSentient, 1000) || (unsigned int)Bot_IsEntPositionAlwaysKnown(botSentient->ai, otherSentient->ent)) && (Bot_IsHighAerialSentient(otherSentient) && (unsigned int)Bot_HasLOSToHighAerialEnemy(EntityData, otherSentient->ent) || Bot_EntityFacesBot(EntityData, otherSentient->ent)) )
        Bot_HideFromEntity(EntityData, otherSentient->ent, 500.0, 5000);
    }
  }
}

/*
==============
SV_BotClearActiveBotCount
==============
*/
void SV_BotClearActiveBotCount(void)
{
  s_botActiveBotCount = 0;
}

/*
==============
SV_BotClearBotSentientInfo
==============
*/
void SV_BotClearBotSentientInfo(sentient_s *botSentient, sentient_s *otherSentient)
{
  bot_data_t *EntityData; 
  signed __int64 v5; 
  __int64 v6; 

  if ( !botSentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24352, ASSERT_TYPE_ASSERT, "( botSentient )", (const char *)&queryFormat, "botSentient") )
    __debugbreak();
  if ( !otherSentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24353, ASSERT_TYPE_ASSERT, "( otherSentient )", (const char *)&queryFormat, "otherSentient") )
    __debugbreak();
  EntityData = Bot_GetEntityData(botSentient->ent);
  if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24359, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v5 = 60 * (otherSentient - level.sentients);
  v6 = (__int64)&EntityData->scriptedAgentInfo + v5 + 11644;
  if ( (bot_data_t *)((char *)EntityData + v5) == (bot_data_t *)-11652i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24362, ASSERT_TYPE_ASSERT, "( botSentientInfo )", (const char *)&queryFormat, "botSentientInfo") )
    __debugbreak();
  *(_QWORD *)v6 = 0i64;
  *(_QWORD *)(v6 + 8) = 0i64;
  *(_QWORD *)(v6 + 16) = 0i64;
  *(_QWORD *)(v6 + 24) = 0i64;
  *(_QWORD *)(v6 + 32) = 0i64;
  *(_QWORD *)(v6 + 40) = 0i64;
  *(_QWORD *)(v6 + 48) = 0i64;
  *(_DWORD *)(v6 + 56) = 0;
}

/*
==============
SV_BotClearGoalAndEnemy
==============
*/
void SV_BotClearGoalAndEnemy(gentity_s *bot)
{
  bot_data_t *EntityData; 
  bitarray<224> *AllTeamFlags; 
  sentient_s *i; 
  bitarray<224> iTeamFlags; 

  if ( !bot && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2056, ASSERT_TYPE_ASSERT, "( bot )", (const char *)&queryFormat, "bot") )
    __debugbreak();
  EntityData = Bot_GetEntityData(bot);
  if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2063, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  Bot_ClearEnemy(EntityData);
  Bot_ClearScriptGoal(EntityData);
  Bot_BadPath(bot);
  memset_0(&EntityData->botMatchData.botMemory, 0, sizeof(EntityData->botMatchData.botMemory));
  if ( Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) )
    AllTeamFlags = (bitarray<224> *)Com_TeamsSP_GetAllTeamFlags();
  else
    AllTeamFlags = (bitarray<224> *)Com_TeamsMP_GetAllTeamFlags();
  iTeamFlags = *AllTeamFlags;
  for ( i = Sentient_FirstSentient(&iTeamFlags); i; i = Sentient_NextSentient(i, &iTeamFlags) )
    SentientInfo_Clear(EntityData->botInfo.ent->sentient, i);
}

/*
==============
SV_BotControllingRemoteMissile
==============
*/
_BOOL8 SV_BotControllingRemoteMissile(const gentity_s *ent)
{
  const bot_data_t *EntityData; 

  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5446, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( !SV_BotIsBotEnt(ent) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5447, ASSERT_TYPE_ASSERT, "( SV_BotIsBotEnt( ent ) )", (const char *)&queryFormat, "SV_BotIsBotEnt( ent )") )
    __debugbreak();
  EntityData = Bot_GetEntityData(ent);
  if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5450, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  return Bot_IsControllingRemoteMissile(EntityData);
}

/*
==============
SV_BotDebugString
==============
*/
void SV_BotDebugString(bot_data_t *botData, const vec3_t *xyz, const vec4_t *color, float scale, const char *pszText, int duration)
{
  int time; 
  int *p_expireTime; 
  int v9; 
  int v10; 
  int v11; 
  __int64 v12; 

  G_Main_AddDebugStringWithDuration(xyz, color, scale, pszText, duration);
  if ( botData )
  {
    if ( !pszText && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22612, ASSERT_TYPE_ASSERT, "( pszText )", (const char *)&queryFormat, "pszText") )
      __debugbreak();
    time = level.time;
    p_expireTime = &botData->botDebugData.hudStrings[0].expireTime;
    v9 = -1;
    v10 = 0x7FFFFFFF;
    v11 = 0;
    while ( *p_expireTime >= time )
    {
      if ( !level.frameDuration )
      {
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_level_locals.h", 349, ASSERT_TYPE_ASSERT, "(level.frameDuration)", "%s\n\tAccessing frame duration before it's been set", "level.frameDuration") )
          __debugbreak();
        time = level.time;
      }
      if ( *p_expireTime - *(p_expireTime - 1) > level.frameDuration && *p_expireTime - time < v10 )
      {
        v9 = v11;
        v10 = *p_expireTime - time;
      }
      ++v11;
      p_expireTime += 21;
      if ( v11 >= 32 )
        goto LABEL_17;
    }
    v9 = v11;
LABEL_17:
    if ( v9 >= 0 )
    {
      v12 = v9;
      botData->botDebugData.hudStrings[v12].addedTime = time;
      if ( !level.frameDuration && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_level_locals.h", 349, ASSERT_TYPE_ASSERT, "(level.frameDuration)", "%s\n\tAccessing frame duration before it's been set", "level.frameDuration") )
        __debugbreak();
      botData->botDebugData.hudStrings[v12].expireTime = level.time + duration * level.frameDuration;
      strncpy(botData->botDebugData.hudStrings[v12].string, pszText, 0x4Bui64);
    }
    qsort(botData->botDebugData.hudStrings, 0x20ui64, 0x54ui64, (_CoreCrtNonSecureSearchSortCompareFunction)Bot_CompareHUDStrings);
  }
}

/*
==============
SV_BotDebugStringEnt
==============
*/
void SV_BotDebugStringEnt(gentity_s *ent, const vec3_t *xyz, const vec4_t *color, float scale, const char *pszText, int duration)
{
  float v6; 
  bot_data_t *EntityData; 
  vec3_t xyza; 
  vec4_t colora; 

  v6 = xyz->v[2];
  *(_QWORD *)xyza.v = *(_QWORD *)xyz->v;
  colora = *color;
  xyza.v[2] = v6;
  EntityData = Bot_GetEntityData(ent);
  SV_BotDebugString(EntityData, &xyza, &colora, scale, pszText, duration);
}

/*
==============
SV_BotDisconnectCleanup
==============
*/
void SV_BotDisconnectCleanup(const int clientIndex)
{
  SvClient *CommonClient; 

  if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
    __debugbreak();
  CommonClient = SvClient::GetCommonClient(clientIndex);
  memset_0(&CommonClient[4].lastUsercmd.vehOrgZ, 0, 0x2A008ui64);
  SV_ReleaseBotDataForClientIndex(clientIndex);
}

/*
==============
SV_BotDrawDebugClientScreen
==============
*/
void SV_BotDrawDebugClientScreen(const LocalClientNum_t localClientNum)
{
  bot_data_t *SpectatedBotData; 
  const char *string; 
  int v3; 
  const char *v4; 
  __int64 v5; 
  __int64 v6; 
  int v7; 

  if ( SvStaticGlobals::ms_svStaticGlobals.state )
  {
    if ( level.num_entities )
    {
      SpectatedBotData = Bot_GetSpectatedBotData(localClientNum);
      if ( SpectatedBotData )
      {
        string = SpectatedBotData->botDebugData.hudStrings[0].string;
        v3 = 120;
        v4 = SpectatedBotData->botDebugData.hudStrings[0].string;
        v5 = 32i64;
        v6 = 32i64;
        do
        {
          if ( !level.frameDuration && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_level_locals.h", 349, ASSERT_TYPE_ASSERT, "(level.frameDuration)", "%s\n\tAccessing frame duration before it's been set", "level.frameDuration") )
            __debugbreak();
          if ( *((_DWORD *)v4 - 1) - *((_DWORD *)v4 - 2) <= level.frameDuration )
          {
            if ( !level.frameDuration && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_level_locals.h", 349, ASSERT_TYPE_ASSERT, "(level.frameDuration)", "%s\n\tAccessing frame duration before it's been set", "level.frameDuration") )
              __debugbreak();
            if ( *((_DWORD *)v4 - 1) >= level.time - level.frameDuration && *v4 )
            {
              Bot_HudText(v3, v4);
              v3 += 14;
            }
          }
          v4 += 84;
          --v6;
        }
        while ( v6 );
        v7 = v3 + 7;
        if ( v3 <= 120 )
          v7 = v3;
        do
        {
          if ( !level.frameDuration && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_level_locals.h", 349, ASSERT_TYPE_ASSERT, "(level.frameDuration)", "%s\n\tAccessing frame duration before it's been set", "level.frameDuration") )
            __debugbreak();
          if ( *((_DWORD *)string - 1) - *((_DWORD *)string - 2) > level.frameDuration )
          {
            if ( !level.frameDuration && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_level_locals.h", 349, ASSERT_TYPE_ASSERT, "(level.frameDuration)", "%s\n\tAccessing frame duration before it's been set", "level.frameDuration") )
              __debugbreak();
            if ( *((_DWORD *)string - 1) >= level.time - level.frameDuration )
            {
              if ( *string )
              {
                Bot_HudText(v7, string);
                v7 += 14;
              }
            }
          }
          string += 84;
          --v5;
        }
        while ( v5 );
      }
    }
  }
}

/*
==============
SV_BotDrawDebugNodeScores
==============
*/
void SV_BotDrawDebugNodeScores()
{
  const dvar_t *v0; 
  float v1; 
  float v2; 
  int v3; 
  __int64 i; 
  gentity_s *v5; 
  __int16 EntityIndex; 
  const SvClientMP *MpClient; 
  BOOL IsClientConnected; 
  int number; 
  bot_data_t *EntityData; 
  const dvar_t *v11; 
  const dvar_t *v12; 
  const dvar_t *v13; 
  int debugScoresCount; 
  bot_score_item_s *p_objects; 
  __int64 v16; 
  bot_debug_score_t *debugScores; 
  int object; 
  const dvar_t *v19; 
  int debugScoresSelectCount; 
  int v21; 
  int v22; 
  int v23; 
  int v24; 
  int v25; 
  __int64 v26; 
  int *p_score; 
  int v28; 
  int v29; 
  int v30; 
  const dvar_t *v31; 
  int v32; 
  bot_debug_score_t *v33; 
  pathnode_t *v34; 
  const dvar_t *v35; 
  int v36; 
  int v37; 
  __int64 v38; 
  int v39; 
  const dvar_t *v40; 
  float v41; 
  int integer; 
  const dvar_t *v43; 
  const dvar_t *v44; 
  int score; 
  const dvar_t *v46; 
  __m128 v47; 
  int v48; 
  __m128 v49; 
  double Angle; 
  const char *v51; 
  const char *v52; 
  const dvar_t *v53; 
  int v54; 
  bot_debug_score_factor_t *factors; 
  bot_debug_score_factor_t v57; 
  float v58; 
  const char *v60; 
  __int64 nodesToPick; 
  int *nodesPicked; 
  int v63; 
  int v64; 
  int v65; 
  int v66; 
  __int64 v67; 
  __int64 v68; 
  vec3_t outPos; 
  vec3_t pos; 
  vec4_t color; 
  bot_score_item_s objects; 
  char v73[8192]; 

  v0 = DVARINT_bot_ScoreType;
  if ( !DVARINT_bot_ScoreType && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_ScoreType") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v0);
  if ( v0->current.integer )
  {
    CL_GetViewPos(LOCAL_CLIENT_0, &outPos);
    memset_0(v73, 0, 0x1FFFui64);
    v1 = outPos.v[1];
    v2 = outPos.v[0];
    v3 = 0;
    for ( i = 0i64; ; ++i )
    {
      v68 = i;
      v65 = v3;
      if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
        __debugbreak();
      if ( v3 >= (int)ComCharacterLimits::ms_gameData.m_characterCount )
        return;
      if ( (unsigned int)v3 >= 0x800 )
      {
        LODWORD(nodesPicked) = 2048;
        LODWORD(nodesToPick) = v3;
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 188, ASSERT_TYPE_ASSERT, "(unsigned)( entityIndex ) < (unsigned)( ( 2048 ) )", "entityIndex doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", nodesToPick, nodesPicked) )
          __debugbreak();
      }
      if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 189, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
        __debugbreak();
      v5 = &g_entities[i];
      if ( v5 )
      {
        EntityIndex = G_GetEntityIndex(&g_entities[i]);
        if ( G_IsEntityInUse(EntityIndex) )
        {
          if ( v5->sentient )
            break;
        }
      }
LABEL_121:
      v3 = v65 + 1;
    }
    if ( v5->client )
    {
      MpClient = SV_Client_GetMpClient(v5->s.number);
      IsClientConnected = Bot_IsClientConnected(MpClient);
    }
    else
    {
      if ( !v5->agent )
      {
LABEL_24:
        if ( SV_BotIsBotEnt(v5) )
        {
          if ( SV_BotIsBotEntClient(v5) )
            number = v5->s.number;
          else
            number = -1;
          EntityData = Bot_GetEntityData(v5);
          if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1259, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
            __debugbreak();
          v11 = DVARINT_bot_ScoreType;
          if ( !DVARINT_bot_ScoreType && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_ScoreType") )
            __debugbreak();
          Dvar_CheckFrontendServerThread(v11);
          if ( v11->current.integer == EntityData->botDebugData.debugScoresParms.scoreType )
          {
            v12 = DVARINT_bot_ScoreClient;
            if ( !DVARINT_bot_ScoreClient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_ScoreClient") )
              __debugbreak();
            Dvar_CheckFrontendServerThread(v12);
            if ( v12->current.integer == -1 )
              goto LABEL_43;
            v13 = DVARINT_bot_ScoreClient;
            if ( !DVARINT_bot_ScoreClient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_ScoreClient") )
              __debugbreak();
            Dvar_CheckFrontendServerThread(v13);
            if ( v13->current.integer == number )
            {
LABEL_43:
              debugScoresCount = EntityData->botDebugData.debugScoresCount;
              if ( debugScoresCount > 0 )
              {
                p_objects = &objects;
                v16 = (unsigned int)debugScoresCount;
                debugScores = EntityData->botDebugData.debugScores;
                do
                {
                  object = debugScores->object;
                  ++debugScores;
                  p_objects->object = object;
                  ++p_objects;
                  --v16;
                }
                while ( v16 );
              }
              v19 = DVARBOOL_bot_ScoreHold;
              if ( !DVARBOOL_bot_ScoreHold && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 692, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_ScoreHold") )
                __debugbreak();
              Dvar_CheckFrontendServerThread(v19);
              if ( v19->current.enabled && EntityData->botDebugData.debugScoresCount > 0 && EntityData->botDebugData.debugScoresParms.scoreType )
              {
                Dvar_SetBool_Internal(DVARBOOL_bot_ScoreHold, 0);
                debugScoresSelectCount = EntityData->botDebugData.debugScoresSelectCount;
                v21 = EntityData->botDebugData.debugScoresCount;
                EntityData->botDebugData.debugScoresPicked = -1;
                if ( Bot_Score_ScoreNodesPick(EntityData, &objects, v21, debugScoresSelectCount, &EntityData->botDebugData.debugScoresParms, 1, &v66) == 1 )
                  EntityData->botDebugData.debugScoresPicked = v66;
                Dvar_SetBool_Internal(DVARBOOL_bot_ScoreHold, 1);
              }
              Bot_Score_DrawDebugParms(&objects, EntityData->botDebugData.debugScoresCount, &EntityData->botDebugData.debugScoresParms);
              v22 = EntityData->botDebugData.debugScoresCount;
              v23 = 0x7FFFFFFF;
              v64 = 0x7FFFFFFF;
              v24 = 0x80000000;
              v25 = 0x7FFFFFFF;
              if ( v22 > 0 )
              {
                v26 = (unsigned int)v22;
                p_score = &EntityData->botDebugData.debugScores[0].score;
                do
                {
                  v28 = *p_score;
                  v29 = *p_score;
                  if ( *p_score <= v24 )
                    v29 = v24;
                  v24 = v29;
                  v30 = *p_score;
                  if ( v28 >= v23 )
                    v30 = v23;
                  v23 = v30;
                  if ( v28 < v25 && v28 > 0 )
                    v25 = *p_score;
                  p_score += 18;
                  --v26;
                }
                while ( v26 );
                v64 = v30;
                if ( v25 == v24 && v24 > 0 && !v30 )
                  v25 = 0;
              }
              v31 = DVARINT_bot_ScoreShowAll;
              v32 = EntityData->botDebugData.debugScoresSelectCount;
              if ( !DVARINT_bot_ScoreShowAll && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_ScoreShowAll") )
                __debugbreak();
              Dvar_CheckFrontendServerThread(v31);
              if ( v31->current.integer > 0 )
                v32 = EntityData->botDebugData.debugScoresCount;
              v63 = 0;
              v67 = v32;
              if ( v32 > 0 )
              {
                v33 = EntityData->botDebugData.debugScores;
                do
                {
                  v34 = Path_ConvertIndexToNode(v33->object);
                  if ( !v34 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1319, ASSERT_TYPE_ASSERT, "( node )", (const char *)&queryFormat, "node") )
                    __debugbreak();
                  v35 = DVARINT_bot_ScoreShowAll;
                  if ( !DVARINT_bot_ScoreShowAll && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_ScoreShowAll") )
                    __debugbreak();
                  Dvar_CheckFrontendServerThread(v35);
                  if ( v35->current.integer != 2 || !Path_IsNodeTraversalOrOverlapsTraversal(v34) )
                  {
                    v36 = v33->object;
                    v37 = v33->object & 7;
                    if ( v33->object < 0 )
                    {
                      v36 += 7;
                      LOBYTE(v37) = v37 - 8;
                    }
                    v38 = v36 >> 3;
                    v39 = (unsigned __int8)v73[v38];
                    if ( !_bittest(&v39, (unsigned __int8)v37) )
                    {
                      v73[v38] = v39 | (1 << v37);
                      pathnode_t::GetPos(v34, &pos);
                      v40 = DVARINT_bot_ScoreDist;
                      v41 = (float)((float)(pos.v[1] - v1) * (float)(pos.v[1] - v1)) + (float)((float)(pos.v[0] - v2) * (float)(pos.v[0] - v2));
                      if ( !DVARINT_bot_ScoreDist && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_ScoreDist") )
                        __debugbreak();
                      Dvar_CheckFrontendServerThread(v40);
                      integer = v40->current.integer;
                      v43 = DVARINT_bot_ScoreDist;
                      if ( !DVARINT_bot_ScoreDist && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_ScoreDist") )
                        __debugbreak();
                      Dvar_CheckFrontendServerThread(v43);
                      if ( v41 <= (float)(integer * v43->current.integer) )
                      {
                        v44 = DVARINT_bot_ScoreMinCutoff;
                        score = v33->score;
                        if ( !DVARINT_bot_ScoreMinCutoff && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_ScoreMinCutoff") )
                          __debugbreak();
                        Dvar_CheckFrontendServerThread(v44);
                        if ( score >= v44->current.integer )
                        {
                          v46 = DVARINT_bot_ScoreMaxCutoff;
                          if ( !DVARINT_bot_ScoreMaxCutoff && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_ScoreMaxCutoff") )
                            __debugbreak();
                          Dvar_CheckFrontendServerThread(v46);
                          if ( score <= v46->current.integer )
                          {
                            if ( v24 == v25 && v25 == v64 )
                            {
                              v47 = (__m128)LODWORD(FLOAT_1_0);
                            }
                            else
                            {
                              v48 = score;
                              if ( v25 > score )
                                v48 = v25;
                              v49 = 0i64;
                              v49.m128_f32[0] = (float)(v48 - v25) / (float)(v24 - v25);
                              v47 = v49;
                            }
                            color = (vec4_t)_mm128_add_ps(_mm128_mul_ps(_mm128_sub_ps((__m128)colorGreen, (__m128)colorRed), _mm_shuffle_ps(v47, v47, 0)), (__m128)colorRed);
                            if ( v63 < EntityData->botDebugData.debugScoresSelectCount )
                            {
                              Angle = pathnode_t::GetAngle(v34);
                              G_DebugBox(&pos, &nodeBox, *(float *)&Angle, &color, 1, 1);
                            }
                            v51 = "[%i]";
                            if ( v33->object != EntityData->botDebugData.debugScoresPicked )
                              v51 = "%i";
                            outPos.v[0] = pos.v[0];
                            outPos.v[1] = pos.v[1];
                            outPos.v[2] = pos.v[2] + 62.0;
                            v52 = j_va(v51, (unsigned int)score);
                            G_Main_AddDebugStringWithDuration(&outPos, &color, 0.75, v52, 0);
                            v53 = DVARBOOL_bot_ScoreShowFactors;
                            if ( !DVARBOOL_bot_ScoreShowFactors && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 692, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_ScoreShowFactors") )
                              __debugbreak();
                            Dvar_CheckFrontendServerThread(v53);
                            if ( v53->current.enabled )
                            {
                              v54 = 0;
                              if ( (int)(*((_DWORD *)v33 + 2) << 27) > 0 )
                              {
                                _XMM6 = 0i64;
                                factors = v33->factors;
                                do
                                {
                                  v57 = *factors;
                                  v58 = (float)((float)*((unsigned __int16 *)factors + 1) * 0.015259022) + 0.001;
                                  outPos.v[2] = outPos.v[2] + -5.0;
                                  __asm { vroundss xmm1, xmm6, xmm3, 1 }
                                  v60 = j_va("%u * %.2f = %i", *(_WORD *)&v57, v58, (unsigned int)(int)*(float *)&_XMM1);
                                  G_Main_AddDebugStringWithDuration(&outPos, &color, 0.5, v60, 0);
                                  ++factors;
                                  ++v54;
                                }
                                while ( v54 < (int)(*((_DWORD *)v33 + 2) << 27) >> 27 );
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  ++v63;
                  ++v33;
                  --v67;
                }
                while ( v67 );
                i = v68;
              }
            }
          }
        }
        goto LABEL_121;
      }
      IsClientConnected = v5->s.eType == ET_AGENT;
    }
    if ( !IsClientConnected )
      goto LABEL_121;
    goto LABEL_24;
  }
}

/*
==============
SV_BotDropped
==============
*/
void SV_BotDropped(const int clientIndex)
{
  SvClientMP *CommonClient; 
  bot_data_t *ClientData; 
  gentity_s *ent; 
  int state; 

  if ( SvClient::GetCommonClient(clientIndex)->state <= CS_ZOMBIE )
  {
    state = (unsigned __int8)SvClient::GetCommonClient(clientIndex)->state;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5962, ASSERT_TYPE_ASSERT, "( SvClient::GetConnectionState( clientIndex ) ) > ( SvClientConnectionState::CS_ZOMBIE )", "SvClient::GetConnectionState( clientIndex ) > SvClientConnectionState::CS_ZOMBIE\n\t%i, %i", state, 1) )
      __debugbreak();
  }
  if ( SvClient::GetCommonClient(clientIndex)->state >= CS_CLIENTLOADING )
  {
    if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
      __debugbreak();
    CommonClient = (SvClientMP *)SvClient::GetCommonClient(clientIndex);
    ClientData = Bot_GetClientData(CommonClient);
    if ( !ClientData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5968, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
      __debugbreak();
    if ( Bot_HasNavigator(&ClientData->botInfo) )
    {
      Bot_PathClear(&ClientData->botInfo);
      Bot_FreeNavigator(&ClientData->botInfo);
    }
    if ( !ClientData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5121, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
      __debugbreak();
    ent = ClientData->botInfo.ent;
    if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5124, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
      __debugbreak();
    Actor_EventListener_Remove(ent->s.number, scr_const.bulletwhizby);
    Actor_EventListener_Remove(ent->s.number, scr_const.projectile_impact);
    Actor_EventListener_Remove(ent->s.number, scr_const.gunshot);
    Actor_EventListener_Remove(ent->s.number, scr_const.gunshot_teammate);
    Actor_EventListener_Remove(ent->s.number, scr_const.silenced_shot);
    Actor_EventListener_Remove(ent->s.number, scr_const.explode);
    Actor_EventListener_Remove(ent->s.number, scr_const.enemy);
    Actor_EventListener_Remove(ent->s.number, scr_const.death);
    Actor_EventListener_Remove(ent->s.number, scr_const.grenadedanger);
    Actor_EventListener_Remove_ByEnum(ent->s.number, 2);
    Actor_EventListener_Remove_ByEnum(ent->s.number, 3);
    Actor_EventListener_Remove_ByEnum(ent->s.number, 4);
    Actor_EventListener_Remove_ByEnum(ent->s.number, 22);
    Actor_EventListener_Remove_ByEnum(ent->s.number, 25);
    Actor_EventListener_Remove_ByEnum(ent->s.number, 28);
  }
}

/*
==============
SV_BotEntInCurrentFOV
==============
*/
int SV_BotEntInCurrentFOV(ai_common_t *self, const gentity_s *ent)
{
  bot_data_t *EntityData; 
  AIBotInterface *m_pAI; 
  sentient_s *sentient; 
  AIBotWrapper v8; 
  vec3_t vEyePosOut; 

  if ( !self && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8993, ASSERT_TYPE_ASSERT, "( self )", (const char *)&queryFormat, "self") )
    __debugbreak();
  if ( !self->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8994, ASSERT_TYPE_ASSERT, "( self->ent )", (const char *)&queryFormat, "self->ent") )
    __debugbreak();
  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8995, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  EntityData = Bot_GetEntityData(self->ent);
  if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9001, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  AICommonInterface::AICommonInterface(&v8.m_botInterface);
  v8.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v8.m_botAgentInterface);
  v8.m_pAI = NULL;
  v8.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  AIBotWrapper::Setup(&v8, EntityData->botInfo.ent);
  m_pAI = v8.m_pAI;
  if ( !v8.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9002, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  sentient = ent->sentient;
  if ( sentient )
    Sentient_GetHeadPosition(sentient, &vEyePosOut);
  else
    G_Utils_EntityCentroid(ent, &vEyePosOut);
  return AICommonInterface::PointInFov(m_pAI, &vEyePosOut);
}

/*
==============
SV_BotEntityDied
==============
*/
void SV_BotEntityDied(const gentity_s *victimEnt)
{
  const playerState_s *EntityPlayerStateConst; 
  gclient_s *client; 
  int v4; 
  __int64 i; 
  gentity_s *v6; 
  __int16 EntityIndex; 
  const SvClientMP *MpClient; 
  BOOL IsClientConnected; 
  bitarray_base<bitarray<224> > *AllTeamFlags; 
  const SvClientMP *v11; 
  bot_data_t *EntityData; 
  __int64 v13; 

  if ( !victimEnt && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7269, ASSERT_TYPE_ASSERT, "( victimEnt )", (const char *)&queryFormat, "victimEnt") )
    __debugbreak();
  if ( !Bot_EntityIsConsideredDead(victimEnt) )
  {
    if ( !victimEnt && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.h", 1164, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
      __debugbreak();
    EntityPlayerStateConst = G_GetEntityPlayerStateConst(victimEnt);
    client = victimEnt->client;
    if ( (!client || !client->lastStand) && (!EntityPlayerStateConst || !GameModeFlagContainer<enum POtherFlagsCommon,enum POtherFlagsSP,enum POtherFlagsMP,64>::TestFlagInternal(&EntityPlayerStateConst->otherFlags, ACTIVE, 0xBu)) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7270, ASSERT_TYPE_ASSERT, "( Bot_EntityIsConsideredDead( victimEnt ) || Bot_EntIsInLastStand( victimEnt ) )", (const char *)&queryFormat, "Bot_EntityIsConsideredDead( victimEnt ) || Bot_EntIsInLastStand( victimEnt )") )
      __debugbreak();
  }
  if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
    __debugbreak();
  if ( (int)ComCharacterLimits::ms_gameData.m_characterCount > 2048 )
  {
    if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
      __debugbreak();
    LODWORD(v13) = ComCharacterLimits::ms_gameData.m_characterCount;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7272, ASSERT_TYPE_ASSERT, "( ComCharacterLimits::GetCharacterMaxCount() ) <= ( ( 2048 ) )", "ComCharacterLimits::GetCharacterMaxCount() <= MAX_GENTITIES\n\t%i, %i", v13, 2048) )
      __debugbreak();
  }
  v4 = 0;
  for ( i = 0i64; ; ++i )
  {
    if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
      __debugbreak();
    if ( v4 >= (int)ComCharacterLimits::ms_gameData.m_characterCount )
      break;
    v6 = &level.gentities[i];
    if ( !&level.gentities[i] )
      goto LABEL_47;
    EntityIndex = G_GetEntityIndex(&level.gentities[i]);
    if ( !G_IsEntityInUse(EntityIndex) || !v6->sentient )
      goto LABEL_47;
    if ( v6->client )
    {
      MpClient = SV_Client_GetMpClient(v6->s.number);
      IsClientConnected = Bot_IsClientConnected(MpClient);
      goto LABEL_35;
    }
    if ( v6->agent )
    {
      IsClientConnected = v6->s.eType == ET_AGENT;
LABEL_35:
      if ( !IsClientConnected )
        goto LABEL_47;
    }
    if ( v6->s.eType != ET_INVISIBLE )
    {
      AllTeamFlags = (bitarray_base<bitarray<224> > *)Com_TeamsMP_GetAllTeamFlags();
      if ( bitarray_base<bitarray<224>>::testBit(AllTeamFlags, v6->sentient->eTeam) )
      {
        if ( !v6->client || (v11 = SV_Client_GetMpClient(v6->s.number), Bot_IsClientActive(v11)) )
        {
          if ( SV_BotIsBotEnt(v6) && v6->s.number != victimEnt->s.number && v6->health > 0 )
          {
            EntityData = Bot_GetEntityData(v6);
            if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7287, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
              __debugbreak();
            Bot_EntityDiedInternal(EntityData, victimEnt);
          }
        }
      }
    }
LABEL_47:
    ++v4;
  }
}

/*
==============
SV_BotEntityStartedLastStand
==============
*/
void SV_BotEntityStartedLastStand(const gentity_s *victimEnt)
{
  const playerState_s *EntityPlayerStateConst; 
  gclient_s *client; 
  int v4; 
  __int64 i; 
  gentity_s *v6; 
  __int16 EntityIndex; 
  const SvClientMP *MpClient; 
  BOOL IsClientConnected; 
  bitarray_base<bitarray<224> > *AllTeamFlags; 
  const SvClientMP *v11; 
  bot_data_t *EntityData; 
  __int64 v13; 

  if ( !victimEnt )
  {
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7303, ASSERT_TYPE_ASSERT, "( victimEnt )", (const char *)&queryFormat, "victimEnt") )
      __debugbreak();
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.h", 1164, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
      __debugbreak();
  }
  EntityPlayerStateConst = G_GetEntityPlayerStateConst(victimEnt);
  client = victimEnt->client;
  if ( (!client || !client->lastStand) && (!EntityPlayerStateConst || !GameModeFlagContainer<enum POtherFlagsCommon,enum POtherFlagsSP,enum POtherFlagsMP,64>::TestFlagInternal(&EntityPlayerStateConst->otherFlags, ACTIVE, 0xBu)) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7304, ASSERT_TYPE_ASSERT, "( Bot_EntIsInLastStand( victimEnt ) )", (const char *)&queryFormat, "Bot_EntIsInLastStand( victimEnt )") )
    __debugbreak();
  if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
    __debugbreak();
  if ( (int)ComCharacterLimits::ms_gameData.m_characterCount > 2048 )
  {
    if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
      __debugbreak();
    LODWORD(v13) = ComCharacterLimits::ms_gameData.m_characterCount;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7306, ASSERT_TYPE_ASSERT, "( ComCharacterLimits::GetCharacterMaxCount() ) <= ( ( 2048 ) )", "ComCharacterLimits::GetCharacterMaxCount() <= MAX_GENTITIES\n\t%i, %i", v13, 2048) )
      __debugbreak();
  }
  v4 = 0;
  for ( i = 0i64; ; ++i )
  {
    if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
      __debugbreak();
    if ( v4 >= (int)ComCharacterLimits::ms_gameData.m_characterCount )
      break;
    v6 = &level.gentities[i];
    if ( !&level.gentities[i] )
      goto LABEL_49;
    EntityIndex = G_GetEntityIndex(&level.gentities[i]);
    if ( !G_IsEntityInUse(EntityIndex) || !v6->sentient )
      goto LABEL_49;
    if ( v6->client )
    {
      MpClient = SV_Client_GetMpClient(v6->s.number);
      IsClientConnected = Bot_IsClientConnected(MpClient);
      goto LABEL_33;
    }
    if ( v6->agent )
    {
      IsClientConnected = v6->s.eType == ET_AGENT;
LABEL_33:
      if ( !IsClientConnected )
        goto LABEL_49;
    }
    if ( v6->s.eType != ET_INVISIBLE )
    {
      AllTeamFlags = (bitarray_base<bitarray<224> > *)Com_TeamsMP_GetAllTeamFlags();
      if ( bitarray_base<bitarray<224>>::testBit(AllTeamFlags, v6->sentient->eTeam) )
      {
        if ( !v6->client || (v11 = SV_Client_GetMpClient(v6->s.number), Bot_IsClientActive(v11)) )
        {
          if ( SV_BotIsBotEnt(v6) && v6->s.number != victimEnt->s.number && v6->health > 0 )
          {
            EntityData = Bot_GetEntityData(v6);
            if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7321, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
              __debugbreak();
            if ( !victimEnt->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7324, ASSERT_TYPE_ASSERT, "( victimEnt->sentient )", (const char *)&queryFormat, "victimEnt->sentient") )
              __debugbreak();
            if ( Bot_RecentSeeSentient(EntityData, victimEnt->sentient, 1000) )
              Bot_EntityDiedInternal(EntityData, victimEnt);
          }
        }
      }
    }
LABEL_49:
    ++v4;
  }
}

/*
==============
SV_BotFindRandomGoal
==============
*/
char SV_BotFindRandomGoal(const bot_data_t *botData, const vec3_t *nonBotOverrideOrigin, const vec3_t *nonBotOverrideAngles, vec3_t *goalOut)
{
  unsigned __int16 NodeRandom; 
  pathnode_t *v9; 
  const tacpoint_t *ClosestPoint; 
  const tacpoint_t *RandomPointReachableFromPoint; 

  if ( !botData && (!nonBotOverrideOrigin || !nonBotOverrideAngles) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21270, ASSERT_TYPE_ASSERT, "( botData || (nonBotOverrideOrigin && nonBotOverrideAngles) )", (const char *)&queryFormat, "botData || (nonBotOverrideOrigin && nonBotOverrideAngles)") )
    __debugbreak();
  if ( SV_BotRequirePathnodes(botData) )
  {
    NodeRandom = Bot_FindNodeRandom(botData, nonBotOverrideOrigin, nonBotOverrideAngles);
    if ( NodeRandom != 0xFFFF )
    {
      v9 = Path_ConvertIndexToNode(NodeRandom);
      pathnode_t::GetPos(v9, goalOut);
      return 1;
    }
  }
  else
  {
    if ( botData )
    {
      if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21247, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
        __debugbreak();
      ClosestPoint = Sentient_NearestTacPoint(botData->botInfo.sentient);
    }
    else
    {
      ClosestPoint = TacGraph_FindClosestPoint(nonBotOverrideOrigin);
    }
    if ( ClosestPoint )
    {
      RandomPointReachableFromPoint = TacGraph_FindRandomPointReachableFromPoint(ClosestPoint, 10);
      if ( RandomPointReachableFromPoint )
      {
        TacGraph_GetApproxGroundPosForPoint(RandomPointReachableFromPoint, goalOut);
        return 1;
      }
    }
  }
  return 0;
}

/*
==============
SV_BotFovDot
==============
*/
float SV_BotFovDot(const ai_common_t *self, const gentity_s *otherEnt)
{
  float result; 

  if ( !self && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17957, ASSERT_TYPE_ASSERT, "( self )", (const char *)&queryFormat, "self") )
    __debugbreak();
  result = Bot_CheckCloseFOV(self->ent, otherEnt);
  if ( result < 0.0 )
    return self->sight.fovDot;
  return result;
}

/*
==============
SV_BotFovDotZ
==============
*/
float SV_BotFovDotZ(const ai_common_t *self, const gentity_s *otherEnt)
{
  float result; 

  if ( !self && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17974, ASSERT_TYPE_ASSERT, "( self )", (const char *)&queryFormat, "self") )
    __debugbreak();
  result = Bot_CheckCloseFOV(self->ent, otherEnt);
  if ( result < 0.0 )
    return self->sight.fovDotZ;
  return result;
}

/*
==============
SV_BotFreeSystemMemory
==============
*/
void SV_BotFreeSystemMemory(void)
{
  __int16 *v0; 
  __int64 i; 

  if ( s_botZoneData )
  {
    if ( !s_botZoneDataCount && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 857, ASSERT_TYPE_ASSERT, "(s_botZoneDataCount > 0)", (const char *)&queryFormat, "s_botZoneDataCount > 0") )
      __debugbreak();
    memset_0(s_botZoneData, 0, 52i64 * s_botZoneDataCount);
    s_botZoneData = NULL;
    s_botZoneDataCount = 0;
  }
  if ( s_botTraversalTypes )
  {
    if ( !(_DWORD)s_botTraversalTypesCount && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 865, ASSERT_TYPE_ASSERT, "(s_botTraversalTypesCount > 0)", (const char *)&queryFormat, "s_botTraversalTypesCount > 0") )
      __debugbreak();
    memset_0(s_botTraversalTypes, 0, (unsigned int)s_botTraversalTypesCount);
    s_botTraversalTypes = NULL;
    LODWORD(s_botTraversalTypesCount) = 0;
  }
  if ( s_botSentientHistory )
  {
    memset_0(s_botSentientHistory, 0, 0x1100ui64);
    s_botSentientHistory = NULL;
  }
  v0 = s_botEntAffecters;
  for ( i = 64i64; i; --i )
    *v0++ = 2047;
}

/*
==============
SV_BotGetAdjustedEnemyDistForThreat
==============
*/
float SV_BotGetAdjustedEnemyDistForThreat(const sentient_s *botSentient, sentient_s *enemy, float enemyDist)
{
  pathnode_t *v5; 
  const bot_data_t *EntityData; 
  vec3_t pos; 

  if ( !botSentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17460, ASSERT_TYPE_ASSERT, "( botSentient )", (const char *)&queryFormat, "botSentient") )
    __debugbreak();
  if ( !botSentient->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17461, ASSERT_TYPE_ASSERT, "( botSentient->ent )", (const char *)&queryFormat, "botSentient->ent") )
    __debugbreak();
  if ( !enemy && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17462, ASSERT_TYPE_ASSERT, "( enemy )", (const char *)&queryFormat, "enemy") )
    __debugbreak();
  if ( !enemy->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17463, ASSERT_TYPE_ASSERT, "( enemy->ent )", (const char *)&queryFormat, "enemy->ent") )
    __debugbreak();
  if ( Bot_IsHighAerialSentient(enemy) )
  {
    v5 = Sentient_NearestNode(enemy);
    if ( v5 )
    {
      pathnode_t::GetPos(v5, &pos);
      return fsqrt((float)((float)((float)(botSentient->ent->r.currentOrigin.v[1] - pos.v[1]) * (float)(botSentient->ent->r.currentOrigin.v[1] - pos.v[1])) + (float)((float)(botSentient->ent->r.currentOrigin.v[0] - pos.v[0]) * (float)(botSentient->ent->r.currentOrigin.v[0] - pos.v[0]))) + (float)((float)(botSentient->ent->r.currentOrigin.v[2] - pos.v[2]) * (float)(botSentient->ent->r.currentOrigin.v[2] - pos.v[2]))) + (float)(COERCE_FLOAT(COERCE_UNSIGNED_INT(enemy->ent->r.currentOrigin.v[2] - botSentient->ent->r.currentOrigin.v[2]) & _xmm) * 0.1);
    }
  }
  else
  {
    EntityData = Bot_GetEntityData(botSentient->ent);
    if ( Bot_FinishedSearchingForEnemy(EntityData, enemy->ent) )
      return FLOAT_9999_0;
  }
  return enemyDist;
}

/*
==============
SV_BotGetAllocationSize
==============
*/
int SV_BotGetAllocationSize()
{
  int result; 
  __int64 v1; 
  __int64 v2; 
  unsigned __int64 v3; 

  result = BG_BotOrAgentSystemEnabled();
  if ( result )
  {
    v1 = 52i64 * (unsigned int)pathData.zoneCount;
    v2 = ((pathData.nodeCount - pathData.zoneCount) >> 1) + 1;
    v3 = v1 + ((v2 + 3) & 0xFFFFFFFFFFFFFFFCui64) + 4352;
    if ( v3 > 0xFFFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_assert.h", 385, ASSERT_TYPE_ASSERT, (const char *)&queryFormat.fmt + 3, "%s (SmallType) %s 0x%jx == (BigType) %s 0x%jx", "unsigned int __cdecl truncate_cast_impl<unsigned int,unsigned __int64>(unsigned __int64)", "unsigned", (unsigned int)v3, "unsigned", v1 + ((v2 + 3) & 0xFFFFFFFFFFFFFFFCui64) + 4352) )
      __debugbreak();
    return (v3 + 127) & 0xFFFFFF80;
  }
  return result;
}

/*
==============
SV_BotGetPerfectInfo
==============
*/
__int64 SV_BotGetPerfectInfo(const gentity_s *self, sentient_s *other, unsigned __int8 reason)
{
  unsigned int v3; 
  sentient_info_t *SentientInfo; 
  bot_data_t *EntityData; 
  signed __int64 v8; 
  __int64 v9; 
  int v10; 
  BOOL v11; 
  const pathnode_t *v12; 
  const tacpoint_t *v14; 
  float v15; 
  __int128 v16; 
  float v17; 
  float v18; 
  double v22; 
  __int16 v23; 
  int time; 
  vec3_t vDirOut; 
  vec3_t vOriginOut; 

  v3 = reason;
  if ( !self && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24642, ASSERT_TYPE_ASSERT, "( self )", (const char *)&queryFormat, "self") )
    __debugbreak();
  if ( !self->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24643, ASSERT_TYPE_ASSERT, "( self->sentient )", (const char *)&queryFormat, "self->sentient") )
    __debugbreak();
  if ( !other && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24644, ASSERT_TYPE_ASSERT, "( other )", (const char *)&queryFormat, "other") )
    __debugbreak();
  if ( !other->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24645, ASSERT_TYPE_ASSERT, "( other->ent )", (const char *)&queryFormat, "other->ent") )
    __debugbreak();
  SentientInfo = Sentient_GetSentientInfo(self->sentient, other);
  EntityData = Bot_GetEntityData(self);
  if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24657, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !EntityData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24658, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState )", (const char *)&queryFormat, "botData->botInfo.playerState") )
    __debugbreak();
  if ( other->ent->health <= 0 )
    return 0i64;
  v8 = 60 * (other - level.sentients);
  v9 = (__int64)&EntityData->scriptedAgentInfo + v8 + 11644;
  if ( (bot_data_t *)((char *)EntityData + v8) == (bot_data_t *)-11652i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24668, ASSERT_TYPE_ASSERT, "( botSentientInfo )", (const char *)&queryFormat, "botSentientInfo") )
    __debugbreak();
  if ( (unsigned __int8)v3 <= 0x1Au )
  {
    v10 = 67111424;
    if ( _bittest(&v10, v3) )
    {
      if ( (unsigned __int8)(v3 - 11) > 2u )
      {
        v11 = (_BYTE)v3 == 6 || (unsigned __int8)(v3 - 9) <= 1u;
        if ( !v11 && (BG_IsEMPJammed(EntityData->botInfo.playerState) || Bot_GetRadarIsJammed(&EntityData->botInfo)) )
          return 0i64;
      }
    }
  }
  Sentient_GetOrigin(other, &vOriginOut);
  if ( !SV_BotRequirePathnodes(EntityData) )
  {
    v14 = Sentient_NearestTacPoint(other);
    if ( v14 && (unsigned int)Bot_ShouldIgnoreSentientEvent(EntityData, other, &vOriginOut, NULL, v14, v3) )
      return 0i64;
LABEL_40:
    if ( level.time - SentientInfo->lastKnownPosTime >= 4000 )
      *(_DWORD *)(v9 + 32) = level.time;
    if ( (Bot_RecentSeeSentient(EntityData, other, 1000) || (_BYTE)v3 == 25) && !Bot_IsVehicleEnt(other->ent) )
    {
      Sentient_GetForwardDir(other, &vDirOut);
    }
    else
    {
      if ( (_BYTE)v3 != 12 )
        return 1i64;
      v16 = LODWORD(self->r.currentOrigin.v[1]);
      v15 = self->r.currentOrigin.v[1] - other->ent->r.currentOrigin.v[1];
      v17 = self->r.currentOrigin.v[0] - other->ent->r.currentOrigin.v[0];
      v18 = self->r.currentOrigin.v[2] - other->ent->r.currentOrigin.v[2];
      *(float *)&v16 = fsqrt((float)((float)(v15 * v15) + (float)(v17 * v17)) + (float)(v18 * v18));
      _XMM4 = v16;
      __asm
      {
        vcmpless xmm0, xmm4, cs:__real@80000000
        vblendvps xmm0, xmm4, xmm1, xmm0
      }
      vDirOut.v[0] = v17 * (float)(1.0 / *(float *)&_XMM0);
      vDirOut.v[2] = v18 * (float)(1.0 / *(float *)&_XMM0);
      vDirOut.v[1] = v15 * (float)(1.0 / *(float *)&_XMM0);
    }
    v22 = vectoyaw((const vec2_t *)&vDirOut);
    v23 = truncate_cast<short,int>((int)*(float *)&v22);
    *(_WORD *)(v9 + 4) = v23;
    time = level.time;
    if ( level.time - *(_DWORD *)v9 > 10000 )
    {
      *(_WORD *)(v9 + 6) = v23 + 180;
      time = level.time;
    }
    *(_DWORD *)v9 = time;
    return 1i64;
  }
  v12 = Sentient_NearestNode(other);
  if ( !v12 || !(unsigned int)Bot_ShouldIgnoreSentientEvent(EntityData, other, &vOriginOut, v12, NULL, v3) )
    goto LABEL_40;
  return 0i64;
}

/*
==============
SV_BotGetRandomName
==============
*/
const char *SV_BotGetRandomName()
{
  int v0; 
  int v1; 
  int v2; 
  int v3; 
  const char *ColumnValueForRow; 
  const char *v5; 
  unsigned int v6; 
  const SvClientMP *CommonClient; 
  const char *name; 
  __int64 v9; 
  __int64 v10; 
  const char *v11; 
  int v12; 
  __int64 v13; 
  int v14; 
  int v15; 
  int v16; 
  __int64 v18; 
  __int64 v19; 
  StringTable *tablePtr; 
  char dest[40]; 

  if ( !s_svBotNameData.nameListInitialized && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4135, ASSERT_TYPE_ASSERT, "( s_svBotNameData.nameListInitialized )", (const char *)&queryFormat, "s_svBotNameData.nameListInitialized") )
    __debugbreak();
  if ( s_svBotNameData.buildIndexStart < 0 )
    return "BotPlayer";
  StringTable_GetAsset(SV_BOT_NAMES_TABLE, (const StringTable **)&tablePtr);
  if ( !tablePtr && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4147, ASSERT_TYPE_ASSERT, "( table )", (const char *)&queryFormat, "table") )
    __debugbreak();
  v0 = s_svBotNameData.buildIndexEnd - s_svBotNameData.buildIndexStart;
  if ( s_svBotNameData.buildIndexEnd - s_svBotNameData.buildIndexStart < 0 )
  {
    LODWORD(v18) = s_svBotNameData.buildIndexEnd - s_svBotNameData.buildIndexStart;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4150, ASSERT_TYPE_ASSERT, "( numPossibleNames ) >= ( 0 )", "numPossibleNames >= 0\n\t%i, %i", v18, 0i64) )
      __debugbreak();
  }
  v1 = 0;
LABEL_12:
  while ( 1 )
  {
    v2 = v1;
    v3 = G_irand(s_svBotNameData.buildIndexStart, s_svBotNameData.buildIndexEnd + 1);
    ColumnValueForRow = StringTable_GetColumnValueForRow(tablePtr, v3, 1);
    ++v1;
    v5 = ColumnValueForRow;
    if ( v2 >= v0 )
      return v5;
    if ( !ColumnValueForRow && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4098, ASSERT_TYPE_ASSERT, "( checkName )", (const char *)&queryFormat, "checkName") )
      __debugbreak();
    v6 = 0;
    if ( (int)SvClient::ms_clientCount <= 0 )
      return v5;
    while ( 1 )
    {
      if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
        __debugbreak();
      CommonClient = (const SvClientMP *)SvClient::GetCommonClient(v6);
      if ( Bot_IsClientActive(CommonClient) )
        break;
LABEL_52:
      if ( (int)++v6 >= (int)SvClient::ms_clientCount )
        return v5;
    }
    if ( !CommonClient->gentity && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4107, ASSERT_TYPE_ASSERT, "( cl->gentity )", (const char *)&queryFormat, "cl->gentity") )
      __debugbreak();
    if ( !CommonClient->gentity->client && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4108, ASSERT_TYPE_ASSERT, "( cl->gentity->client )", (const char *)&queryFormat, "cl->gentity->client") )
      __debugbreak();
    name = CommonClient->gentity->client->sess.cs.name;
    if ( CommonClient->gentity->client == (gclient_s *)-22188i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3452, ASSERT_TYPE_ASSERT, "( originalName )", (const char *)&queryFormat, "originalName") )
      __debugbreak();
    v9 = -1i64;
    do
      ++v9;
    while ( name[v9] );
    if ( !name && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3441, ASSERT_TYPE_ASSERT, "( name )", (const char *)&queryFormat, &stru_143C9A1A4) )
      __debugbreak();
    if ( I_strstr(name, " [") )
      LODWORD(v9) = v9 - 7;
    if ( (int)v9 + 1 > 36 )
    {
      LODWORD(v19) = 36;
      LODWORD(v18) = v9 + 1;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3462, ASSERT_TYPE_ASSERT, "( nameSize + 1 ) <= ( 36 )", "nameSize + 1 <= MAX_PLAYERNAME_LENGTH\n\t%i, %i", v18, v19) )
        __debugbreak();
    }
    Core_strncpy(dest, 0x24ui64, name, (int)v9);
    v10 = 0x7FFFFFFFi64;
    v11 = v5;
    if ( !v5 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 213, ASSERT_TYPE_SANITY, "( s1 )", (const char *)&queryFormat, "s1") )
      __debugbreak();
    while ( 1 )
    {
      v12 = (unsigned __int8)v11[dest - v5];
      v13 = v10;
      v14 = *(unsigned __int8 *)v11++;
      --v10;
      if ( !v13 )
        break;
      if ( v12 != v14 )
      {
        v15 = v12 + 32;
        if ( (unsigned int)(v12 - 65) > 0x19 )
          v15 = v12;
        v12 = v15;
        v16 = v14 + 32;
        if ( (unsigned int)(v14 - 65) > 0x19 )
          v16 = v14;
        if ( v12 != v16 )
          goto LABEL_52;
      }
      if ( !v12 )
        goto LABEL_12;
    }
  }
}

/*
==============
SV_BotGrenadePing
==============
*/
void SV_BotGrenadePing(const gentity_s *self, gentity_s *originator, const vec3_t *vOrigin)
{
  if ( !self && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24444, ASSERT_TYPE_ASSERT, "( self )", (const char *)&queryFormat, "self") )
    __debugbreak();
  if ( !originator && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24445, ASSERT_TYPE_ASSERT, "( originator )", (const char *)&queryFormat, "originator") )
    __debugbreak();
  Bot_AvoidGrenade(self, originator, vOrigin, 300.0, 500);
}

/*
==============
SV_BotHandleGunshotTeammate
==============
*/
void SV_BotHandleGunshotTeammate(const gentity_s *self, gentity_s *originator, const vec3_t *vBulletEndOrigin)
{
  bot_data_t *EntityData; 
  int time; 
  int traversal; 
  vec3_t vEyePosOut; 

  if ( !self && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24456, ASSERT_TYPE_ASSERT, "( self )", (const char *)&queryFormat, "self") )
    __debugbreak();
  if ( self->health <= 0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24457, ASSERT_TYPE_ASSERT, "( !Bot_EntityIsDead( self ) )", (const char *)&queryFormat, "!Bot_EntityIsDead( self )") )
    __debugbreak();
  if ( !originator && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24458, ASSERT_TYPE_ASSERT, "( originator )", (const char *)&queryFormat, "originator") )
    __debugbreak();
  if ( !originator->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24459, ASSERT_TYPE_ASSERT, "( originator->sentient )", (const char *)&queryFormat, "originator->sentient") )
    __debugbreak();
  EntityData = Bot_GetEntityData(self);
  if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24466, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( Bot_CanSeeSentientQuick(EntityData, originator->sentient) )
  {
    Sentient_GetEyePosition(originator->sentient, &vEyePosOut);
    if ( SV_BotEntInCurrentFOV(&EntityData->botInfo, originator) )
    {
      if ( (float)((float)((float)((float)(vBulletEndOrigin->v[1] - vEyePosOut.v[1]) * (float)(vBulletEndOrigin->v[1] - vEyePosOut.v[1])) + (float)((float)(vBulletEndOrigin->v[0] - vEyePosOut.v[0]) * (float)(vBulletEndOrigin->v[0] - vEyePosOut.v[0]))) + (float)((float)(vBulletEndOrigin->v[2] - vEyePosOut.v[2]) * (float)(vBulletEndOrigin->v[2] - vEyePosOut.v[2]))) > 0.0 )
        Bot_AIKnownEnemiesCapsule(&EntityData->botInfo, &vEyePosOut, vBulletEndOrigin, 100.0, 0xAu);
    }
    else if ( Bot_IsIdleAtScriptGoal(EntityData) && !Bot_CanSeeAndCanFireOnEnemy(EntityData) )
    {
      if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14625, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
        __debugbreak();
      if ( vEyePosOut.v[0] == 0.0 && vEyePosOut.v[1] == 0.0 && vEyePosOut.v[2] == 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14633, ASSERT_TYPE_ASSERT, "( Vec3NotZero( *point ) )", (const char *)&queryFormat, "Vec3NotZero( *point )") )
        __debugbreak();
      time = level.time;
      if ( EntityData->botInfo.lookAtType <= BOT_LOOK_CODE_FORCED || level.time >= EntityData->botInfo.lookAtTime )
      {
        EntityData->botInfo.lookAtType = BOT_LOOK_CODE_FORCED;
        EntityData->botInfo.lookAtTime = time + 1000;
        EntityData->botInfo.lookAtPoint = vEyePosOut;
        traversal = EntityData->botInfo.traversal;
        if ( (traversal & 1) != 0 )
          EntityData->botInfo.traversal = traversal & 0xFFFFFFFE;
      }
    }
  }
}

/*
==============
SV_BotIncrementActiveBotCount
==============
*/
void SV_BotIncrementActiveBotCount(void)
{
  ++s_botActiveBotCount;
}

/*
==============
SV_BotInit
==============
*/
void SV_BotInit(SvClientMP *bot, int firstConnect)
{
  unsigned int MpClientIndex; 
  __int64 v5; 

  if ( !bot && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4457, ASSERT_TYPE_ASSERT, "( bot )", (const char *)&queryFormat, "bot") )
    __debugbreak();
  if ( !bot->gentity && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4458, ASSERT_TYPE_ASSERT, "( bot->gentity )", (const char *)&queryFormat, "bot->gentity") )
    __debugbreak();
  if ( !bot->gentity->client && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4459, ASSERT_TYPE_ASSERT, "( bot->gentity->client )", (const char *)&queryFormat, "bot->gentity->client") )
    __debugbreak();
  if ( level.maxSentients > 0x110 )
  {
    LODWORD(v5) = level.maxSentients;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4464, ASSERT_TYPE_ASSERT, "( level.maxSentients ) <= ( (200 + 48 + 24) )", "level.maxSentients <= MAX_SENTIENTS_MP\n\t%i, %i", v5, 272) )
      __debugbreak();
  }
  *(_QWORD *)&bot->netBuf.reliableCommands.m_entries[2].size = &bot->netBuf.reliableCommands.m_buffer[126956];
  MpClientIndex = SV_Client_GetMpClientIndex(bot);
  Com_Printf(18, "[BOTS] (%d) Initialized botData->botInfo.sentientInfo for client %i (%s)\n", (unsigned int)level.time, MpClientIndex, bot->name);
  if ( bot == (SvClientMP *)-1368i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1127, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  *(_DWORD *)&bot->netBuf.reliableCommands.TYPE_NOT_SPECIFIED = -17973521;
  *(_DWORD *)&bot->netBuf.reliableCommands.m_buffer[126948] = -17973521;
  Bot_SetBotPersistentMatchData((bot_data_t *)&bot->netBuf, firstConnect);
  Bot_ResetBotInfo((bot_data_t *)&bot->netBuf, bot->gentity);
  Bot_ResetLife((bot_data_t *)&bot->netBuf);
}

/*
==============
SV_BotInitDataSafety
==============
*/
void SV_BotInitDataSafety(SvClientMP *bot)
{
  client_net_buffers_t *p_netBuf; 

  if ( !bot && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4442, ASSERT_TYPE_ASSERT, "( bot )", (const char *)&queryFormat, "bot") )
    __debugbreak();
  p_netBuf = &bot->netBuf;
  if ( !p_netBuf && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1127, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  *(_DWORD *)&p_netBuf->reliableCommands.TYPE_NOT_SPECIFIED = -17973521;
  *(_DWORD *)&p_netBuf->reliableCommands.m_buffer[126948] = -17973521;
}

/*
==============
SV_BotInitRound
==============
*/
void SV_BotInitRound(void)
{
  signed int i; 
  SvClient *CommonClient; 
  bot_zone_data_t *v2; 
  __int64 v3; 
  unsigned __int8 *count; 
  unsigned int maxSentients; 
  const char *GameType; 
  const char *v7; 
  unsigned int v8; 
  int v9; 
  int v10; 
  const char *ColumnValueForRow; 
  const char *v12; 
  int buildIndexStart; 
  __int64 v14; 
  __int64 v15; 
  StringTable *tablePtr; 
  StringTable *table; 

  for ( i = 0; i < (int)SvClient::ms_clientCount; ++i )
  {
    if ( SV_BotIsBot(i) )
    {
      if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
        __debugbreak();
      CommonClient = SvClient::GetCommonClient(i);
      if ( !CommonClient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20527, ASSERT_TYPE_ASSERT, "( bot )", (const char *)&queryFormat, "bot") )
        __debugbreak();
      memset_0(&CommonClient[107], 0, 0xC84ui64);
    }
  }
  v2 = s_botZoneData;
  if ( s_botZoneData )
  {
    v3 = s_botZoneDataCount;
    if ( s_botZoneDataCount )
    {
      count = s_botZoneData->count;
      do
      {
        v2->team = 0;
        *(_QWORD *)count = 0i64;
        ++v2;
        *((_WORD *)count + 4) = 0;
        count += 52;
        --v3;
      }
      while ( v3 );
    }
  }
  if ( s_botSentientHistory )
  {
    maxSentients = level.maxSentients;
    if ( level.maxSentients != 272 )
    {
      LODWORD(v14) = level.maxSentients;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4207, ASSERT_TYPE_ASSERT, "( level.maxSentients ) == ( (200 + 48 + 24) )", "level.maxSentients == MAX_SENTIENTS_MP\n\t%i, %i", v14, 272) )
        __debugbreak();
      maxSentients = level.maxSentients;
    }
    memset_0(s_botSentientHistory, 0, 16i64 * maxSentients);
  }
  StringTable_GetAsset("mp/gameTypesTable.csv", (const StringTable **)&tablePtr);
  if ( !tablePtr && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3210, ASSERT_TYPE_ASSERT, "( gameTypesTable )", (const char *)&queryFormat, "gameTypesTable") )
    __debugbreak();
  GameType = SV_GameMP_GetGameType();
  v7 = StringTable_Lookup(tablePtr, 0, GameType, 4);
  v8 = atoi(v7);
  v9 = v8;
  if ( v8 >= 2 )
  {
    LODWORD(v15) = 2;
    LODWORD(v14) = v8;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3216, ASSERT_TYPE_ASSERT, "(unsigned)( result ) < (unsigned)( 2 )", "result doesn't index 2\n\t%i not in [0, %i)", v14, v15) )
      __debugbreak();
  }
  s_botTeamSelectMode = v9;
  s_botPathTurn = 0;
  *(_QWORD *)&s_svBotNameData.buildIndexStart = -1i64;
  StringTable_GetAsset(SV_BOT_NAMES_TABLE, (const StringTable **)&table);
  v10 = 0;
  do
  {
    ColumnValueForRow = StringTable_GetColumnValueForRow(table, v10, 0);
    v12 = ColumnValueForRow;
    if ( ColumnValueForRow && !strncmp(ColumnValueForRow, "bot", 3ui64) )
    {
      buildIndexStart = s_svBotNameData.buildIndexStart;
      s_svBotNameData.buildIndexEnd = v10;
      if ( s_svBotNameData.buildIndexStart == -1 )
        buildIndexStart = v10;
      s_svBotNameData.buildIndexStart = buildIndexStart;
    }
    ++v10;
  }
  while ( v12 && *v12 );
  s_svBotNameData.nameListInitialized = 1;
  s_botNodesTested = 0;
  g_botCurrentNumDebugDrawTriggers = 0;
}

/*
==============
SV_BotIsBot
==============
*/
_BOOL8 SV_BotIsBot(const int clientNum)
{
  SvClient *CommonClient; 
  int v4; 
  unsigned int v5; 

  if ( !Com_GameMode_SupportsFeature(WEAPON_RAISING_ALTSWITCH) )
    return 0i64;
  if ( clientNum >= SvClient::ms_clientCount )
  {
    v5 = SvClient::ms_clientCount;
    v4 = clientNum;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5890, ASSERT_TYPE_ASSERT, "(unsigned)( clientNum ) < (unsigned)( SvClient::GetClientCount() )", "clientNum doesn't index SvClient::GetClientCount()\n\t%i not in [0, %i)", v4, v5) )
      __debugbreak();
  }
  if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
    __debugbreak();
  CommonClient = SvClient::GetCommonClient(clientNum);
  if ( !NetConnection::IsBot((NetConnection *)&CommonClient[642].lastUsercmd.sightedClientsMask.data[6]) && LODWORD(CommonClient[855].__vftable) == 2 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5892, ASSERT_TYPE_ASSERT, "( cl->clientConnection.IsBot() || (cl->testClient != TC_BOT) )", (const char *)&queryFormat, "cl->clientConnection.IsBot() || (cl->testClient != TC_BOT)") )
    __debugbreak();
  return LODWORD(CommonClient[855].__vftable) == 2;
}

/*
==============
SV_BotIsBotEnt
==============
*/
int SV_BotIsBotEnt(const gentity_s *ent)
{
  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5902, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( !Com_GameMode_SupportsFeature(WEAPON_RAISING_ALTSWITCH) && !Com_GameMode_SupportsFeature(WEAPON_RAISING_ALTSWITCH_ADS) )
    return 0;
  if ( ent->agent )
    return SV_Agent_IsScripted(ent->s.number) == 0;
  return SV_BotIsBotEntClient(ent);
}

/*
==============
SV_BotIsBotEntClient
==============
*/
int SV_BotIsBotEntClient(const gentity_s *ent)
{
  int number; 

  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5923, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( Com_GameMode_SupportsFeature(WEAPON_RAISING_ALTSWITCH) && (number = ent->s.number, number < (int)SvClient::ms_clientCount) )
    return SV_BotIsBot(number);
  else
    return 0;
}

/*
==============
SV_BotKilled
==============
*/
void SV_BotKilled(SvClientMP *bot)
{
  bot_data_t *ClientData; 
  unsigned int maxSentients; 
  signed __int64 v4; 
  signed __int64 v5; 
  char *v6; 
  __int64 v7; 
  __int64 v8; 
  __int64 v9; 
  __int64 v10; 

  if ( !Sys_IsServerThread() && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4494, ASSERT_TYPE_ASSERT, "( Sys_IsServerThread() )", (const char *)&queryFormat, "Sys_IsServerThread()") )
    __debugbreak();
  if ( !bot && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4495, ASSERT_TYPE_ASSERT, "( bot )", (const char *)&queryFormat, "bot") )
    __debugbreak();
  if ( !bot->gentity && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4496, ASSERT_TYPE_ASSERT, "( bot->gentity )", (const char *)&queryFormat, "bot->gentity") )
    __debugbreak();
  if ( !bot->gentity->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4497, ASSERT_TYPE_ASSERT, "( bot->gentity->sentient )", (const char *)&queryFormat, "bot->gentity->sentient") )
    __debugbreak();
  ClientData = Bot_GetClientData(bot);
  if ( !ClientData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4503, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  Actor_BroadcastTeamEvent(bot->gentity->sentient, AI_EV_DEATH);
  maxSentients = level.maxSentients;
  if ( level.maxSentients > 0x110 )
  {
    LODWORD(v8) = level.maxSentients;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4508, ASSERT_TYPE_ASSERT, "( level.maxSentients ) <= ( (200 + 48 + 24) )", "level.maxSentients <= MAX_SENTIENTS_MP\n\t%i, %i", v8, 272) )
      __debugbreak();
    maxSentients = level.maxSentients;
  }
  memcpy_0(lastBotSentientInfo, (char *)&ClientData->scriptedAgentInfo + 11644, sizeof(lastBotSentientInfo));
  memcpy_0(lastSentientInfo, ClientData->botInfo.sentientInfo, (unsigned __int64)maxSentients << 6);
  if ( !ClientData->botInfo.sentientInfo )
  {
    if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
      __debugbreak();
    v4 = ((char *)bot - (char *)SvClient::GetCommonClient(0)) / 379488;
    if ( (unsigned int)v4 >= 0xC8 )
    {
      LODWORD(v9) = 200;
      LODWORD(v8) = v4;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 1072, ASSERT_TYPE_ASSERT, "(unsigned)( index ) < (unsigned)( 200 )", "index doesn't index MAX_CLIENTS_MP\n\t%i not in [0, %i)", v8, v9) )
        __debugbreak();
    }
    LODWORD(v9) = level.time;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4512, ASSERT_TYPE_ASSERT, "(botData->botInfo.sentientInfo != nullptr)", "%s\n\t[BOTS] (%d) botData->botInfo.sentientInfo is NULL for for client %i (%s)", "botData->botInfo.sentientInfo != nullptr", v9, v4, bot->name) )
      __debugbreak();
  }
  Bot_ResetLife(ClientData);
  memcpy_0((char *)&ClientData->scriptedAgentInfo + 11644, lastBotSentientInfo, 0x3FC0ui64);
  memcpy_0(ClientData->botInfo.sentientInfo, lastSentientInfo, (unsigned __int64)level.maxSentients << 6);
  if ( !ClientData->botInfo.sentientInfo )
  {
    if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
      __debugbreak();
    v5 = ((char *)bot - (char *)SvClient::GetCommonClient(0)) / 379488;
    if ( (unsigned int)v5 >= 0xC8 )
    {
      LODWORD(v9) = 200;
      LODWORD(v8) = v5;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 1072, ASSERT_TYPE_ASSERT, "(unsigned)( index ) < (unsigned)( 200 )", "index doesn't index MAX_CLIENTS_MP\n\t%i not in [0, %i)", v8, v9) )
        __debugbreak();
    }
    LODWORD(v10) = v5;
    LODWORD(v9) = level.time;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4519, ASSERT_TYPE_ASSERT, "(botData->botInfo.sentientInfo != nullptr)", "%s\n\t[BOTS] (%d) botData->botInfo.sentientInfo is NULL for for client %i (%s)", "botData->botInfo.sentientInfo != nullptr", v9, v10, bot->name) )
      __debugbreak();
  }
  v6 = (char *)&ClientData->scriptedAgentInfo + 11688;
  v7 = 0i64;
  do
  {
    v6 += 60;
    ClientData->botInfo.sentientInfo[v7++].iLastAttackMeTime = 0;
    *((_DWORD *)v6 - 12) &= ~2u;
    *((_DWORD *)v6 - 16) = -2147483647;
    *((_DWORD *)v6 - 15) = 0;
    *((_DWORD *)v6 - 13) = 0;
  }
  while ( v7 < 272 );
}

/*
==============
SV_BotKnownEnemiesRadial
==============
*/
void SV_BotKnownEnemiesRadial(const gentity_s *self, const vec3_t *vOrigin, float radius, unsigned __int8 knownType)
{
  bot_data_t *EntityData; 

  if ( !self && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24493, ASSERT_TYPE_ASSERT, "( self )", (const char *)&queryFormat, "self") )
    __debugbreak();
  if ( !SV_BotIsBotEnt(self) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24494, ASSERT_TYPE_ASSERT, "( SV_BotIsBotEnt( self ) )", (const char *)&queryFormat, "SV_BotIsBotEnt( self )") )
    __debugbreak();
  EntityData = Bot_GetEntityData(self);
  if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24498, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  Bot_AIKnownEnemiesRadial(&EntityData->botInfo, vOrigin, radius, knownType);
}

/*
==============
SV_BotMissileFired
==============
*/
void SV_BotMissileFired(const gentity_s *self, gentity_s *missile)
{
  bot_data_t *EntityData; 
  GWeaponMap *Instance; 
  const Weapon *Weapon; 

  if ( !self && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24509, ASSERT_TYPE_ASSERT, "( self )", (const char *)&queryFormat, "self") )
    __debugbreak();
  if ( !SV_BotIsBotEnt(self) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24510, ASSERT_TYPE_ASSERT, "( SV_BotIsBotEnt( self ) )", (const char *)&queryFormat, "SV_BotIsBotEnt( self )") )
    __debugbreak();
  if ( !missile && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24511, ASSERT_TYPE_ASSERT, "( missile )", (const char *)&queryFormat, "missile") )
    __debugbreak();
  if ( missile->s.eType != ET_MISSILE && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24512, ASSERT_TYPE_ASSERT, "( missile->s.eType == ET_MISSILE )", (const char *)&queryFormat, "missile->s.eType == ET_MISSILE") )
    __debugbreak();
  EntityData = Bot_GetEntityData(self);
  if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24518, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  EntityData->botInfo.grenadeFiredTime = level.time;
  Instance = GWeaponMap::GetInstance();
  Weapon = BgWeaponMap::GetWeapon(Instance, missile->s.weaponHandle);
  if ( Bot_Weap_IsOffhandClass(EntityData->botInfo.playerState, Weapon, OFFHAND_CLASS_FLASH_GRENADE) )
  {
    Bot_HideFromEntity(EntityData, missile, 300.0, 10000);
    EntityData->botInfo.grenadeLastInSightCheck = level.time + 1000;
  }
}

/*
==============
SV_BotPathsInit
==============
*/
void SV_BotPathsInit()
{
  __int128 v0; 
  __int128 v1; 
  unsigned int fixedNodeCount; 
  int v3; 
  unsigned int v4; 
  char v5; 
  unsigned __int16 v6; 
  unsigned int v7; 
  pathnode_t *v8; 
  const char *v9; 
  __int128 v11; 
  __m128 v15; 
  __m128 v19; 
  const char *v28; 
  int v29; 
  __int64 v30; 
  char v31; 
  unsigned int v32; 
  unsigned int v33; 
  __int64 v34; 
  double IndoorPercent; 
  int v36; 
  unsigned __int16 v37; 
  int v38; 
  pathnode_t *v39; 
  unsigned int v40; 
  int *v41; 
  signed int i; 
  SvClientMP *CommonClient; 
  char *fmt; 
  __int64 v45; 
  __int64 v46; 
  __int64 v47; 
  int v48; 
  vec3_t pos; 
  __int128 v50; 
  __m128 v51; 
  __m128 v52; 
  __int128 v53; 
  __int128 v54; 

  fixedNodeCount = pathData.fixedNodeCount;
  v54 = v0;
  v53 = v1;
  v3 = Path_ZoneCount();
  *(_OWORD *)s_botWorldBounds.midPoint.v = 0i64;
  s_botWorldBounds.halfSize.v[1] = 0.0;
  s_botWorldBounds.halfSize.v[2] = 0.0;
  v4 = v3;
  v48 = v3;
  SV_BotPathsInitCornerMask();
  s_botPathTurn = 0;
  v5 = 1;
  v6 = 0;
  if ( fixedNodeCount )
  {
    v7 = 0;
    do
    {
      if ( !Path_NodeValid(v6) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3953, ASSERT_TYPE_ASSERT, "( Path_NodeValid( nodeNum ) )", (const char *)&queryFormat, "Path_NodeValid( nodeNum )") )
        __debugbreak();
      v8 = Path_ConvertIndexToNode(v6);
      if ( !v8 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3955, ASSERT_TYPE_ASSERT, "( pathnode )", (const char *)&queryFormat, "pathnode") )
        __debugbreak();
      if ( Path_IsNodeTraversalBegin(v8) )
      {
        if ( !v8->constant.animscript )
        {
          v9 = vtos(&v8->constant.vLocalOrigin);
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3956, ASSERT_TYPE_ASSERT, "(!Path_IsNodeTraversalBegin( pathnode ) || pathnode->constant.animscript != ( static_cast< scr_string_t >( 0 ) ))", "%s\n\tNegotiation node at %s has no animscript defined", "!Path_IsNodeTraversalBegin( pathnode ) || pathnode->constant.animscript != NULL_SCR_STRING", v9) )
            __debugbreak();
        }
      }
      pathnode_t::GetPos(v8, &pos);
      if ( v5 )
      {
        s_botWorldBounds.midPoint = pos;
        v5 = 0;
      }
      else
      {
        HIDWORD(v50) = 0;
        v11 = v50;
        *(float *)&v11 = pos.v[0];
        _XMM5 = v11;
        __asm
        {
          vinsertps xmm5, xmm5, dword ptr [rbp+57h+pos+4], 57h+var_48+1
          vinsertps xmm5, xmm5, dword ptr [rbp+57h+pos+8], 57h+var_38+1
        }
        v51.m128_i32[3] = 0;
        v15 = v51;
        v15.m128_f32[0] = s_botWorldBounds.midPoint.v[0];
        _XMM4 = v15;
        __asm
        {
          vinsertps xmm4, xmm4, dword ptr cs:s_botWorldBounds.midPoint+4, 10h
          vinsertps xmm4, xmm4, dword ptr cs:s_botWorldBounds.midPoint+8, 20h ; ' '
        }
        v52.m128_i32[3] = 0;
        v19 = v52;
        v19.m128_f32[0] = s_botWorldBounds.halfSize.v[0];
        _XMM3 = v19;
        __asm
        {
          vinsertps xmm3, xmm3, dword ptr cs:s_botWorldBounds.halfSize+4, 10h
          vinsertps xmm3, xmm3, dword ptr cs:s_botWorldBounds.halfSize+8, 20h ; ' '
        }
        _XMM1 = _mm128_add_ps(_XMM4, _XMM3);
        _XMM0 = _mm128_sub_ps(_XMM4, _XMM3);
        v52 = _XMM3;
        __asm
        {
          vminps  xmm3, xmm0, xmm5
          vmaxps  xmm0, xmm1, xmm5
        }
        _XMM2 = _mm128_mul_ps(_mm128_add_ps(_XMM3, _XMM0), g_oneHalf.v);
        v51 = _XMM4;
        _XMM4 = _mm128_sub_ps(_XMM2, _XMM3);
        s_botWorldBounds.halfSize.v[0] = _XMM4.m128_f32[0];
        __asm
        {
          vextractps dword ptr cs:s_botWorldBounds.halfSize+4, xmm4, 1
          vextractps dword ptr cs:s_botWorldBounds.halfSize+8, xmm4, 2
        }
        s_botWorldBounds.midPoint.v[0] = _XMM2.m128_f32[0];
        __asm
        {
          vextractps dword ptr cs:s_botWorldBounds.midPoint+4, xmm2, 1
          vextractps dword ptr cs:s_botWorldBounds.midPoint+8, xmm2, 2
        }
        v50 = _XMM5;
      }
      if ( !v8 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3799, ASSERT_TYPE_ASSERT, "( negotiationNode )", (const char *)&queryFormat, "negotiationNode") )
        __debugbreak();
      if ( Path_IsNodeTraversalBegin(v8) )
      {
        v28 = SL_ConvertToString(v8->constant.animscript);
        v29 = Bot_AnimscriptToNegotiationType(v28);
        if ( v29 )
        {
          v30 = v7 >> 1;
          v31 = 4 * (v7 & 1);
          if ( (unsigned int)v30 >= (unsigned int)s_botTraversalTypesCount )
          {
            LODWORD(v46) = s_botTraversalTypesCount;
            LODWORD(v45) = v30;
            if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3699, ASSERT_TYPE_ASSERT, "(unsigned)( byteIndex ) < (unsigned)( s_botTraversalTypesCount )", "byteIndex doesn't index s_botTraversalTypesCount\n\t%i not in [0, %i)", v45, v46) )
              __debugbreak();
          }
          if ( (unsigned int)(v29 - 1) > 0xF )
          {
            LODWORD(v47) = 16;
            LODWORD(v46) = 1;
            LODWORD(v45) = v29;
            if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3700, ASSERT_TYPE_ASSERT, "( (1 << ( 0 )) ) <= ( negotiationType ) && ( negotiationType ) <= ( (1 << ( 4 )) )", "negotiationType not in [(1 << BOT_TRAVERSAL_TYPE_FIRST_BIT), (1 << BOT_TRAVERSAL_TYPE_LAST_BIT)]\n\t%i not in [%i, %i]", v45, v46, v47) )
              __debugbreak();
          }
          v32 = 0;
          while ( !_bittest(&v29, v32) )
          {
            if ( (int)++v32 > 4 )
              goto LABEL_32;
          }
          s_botTraversalTypes[v30] = truncate_cast<unsigned char,int>((v32 << v31) | s_botTraversalTypes[v30]);
        }
      }
LABEL_32:
      v7 = ++v6;
    }
    while ( v6 < fixedNodeCount );
    v4 = v48;
  }
  if ( s_botZoneDataCount != v4 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3974, ASSERT_TYPE_ASSERT, "( s_botZoneDataCount == zoneCount )", (const char *)&queryFormat, "s_botZoneDataCount == zoneCount") )
    __debugbreak();
  v33 = 0;
  if ( v4 )
  {
    v34 = 0i64;
    do
    {
      IndoorPercent = Path_ZoneGetIndoorPercent(v33);
      v36 = 0;
      v37 = 0;
      s_botZoneData[v34].indoorPercent = *(float *)&IndoorPercent;
      if ( fixedNodeCount )
      {
        v38 = 0;
        do
        {
          if ( Path_NodeZoneFromIndex(v38) == v33 )
            ++v36;
          v38 = ++v37;
        }
        while ( v37 < fixedNodeCount );
        if ( v36 >= 150 )
        {
          v39 = Path_ConvertZoneIndexToZone(v33);
          if ( !v39 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3991, ASSERT_TYPE_ASSERT, "(zoneNode)", (const char *)&queryFormat, "zoneNode") )
            __debugbreak();
          pathnode_t::GetPos(v39, &pos);
          LODWORD(v47) = 150;
          LODWORD(v46) = v36;
          LODWORD(v45) = (int)pos.v[2];
          LODWORD(fmt) = (int)pos.v[1];
          Com_PrintWarning(18, "SV_BotPathsInit() WARNING: zone %i centered at (%i %i %i) has %i nodes in it. (typical is < BOT_MAX_REASONABLE_ZONE_NODES %i)\n", v33, (unsigned int)(int)pos.v[0], fmt, v45, v46, v47);
        }
      }
      ++v33;
      ++v34;
    }
    while ( v33 < v4 );
  }
  Bot_ZonePopulateObstacleData();
  s_botWorldEdgePlanes[0].v[3] = s_botWorldBounds.halfSize.v[0] - s_botWorldBounds.midPoint.v[0];
  s_botWorldEdgePlanes[1].v[3] = s_botWorldBounds.halfSize.v[0] + s_botWorldBounds.midPoint.v[0];
  s_botWorldEdgePlanes[2].v[3] = s_botWorldBounds.halfSize.v[1] - s_botWorldBounds.midPoint.v[1];
  s_botWorldEdgePlanes[3].v[3] = s_botWorldBounds.halfSize.v[1] + s_botWorldBounds.midPoint.v[1];
  s_botWorldEdgePlanes[0].v[0] = FLOAT_N1_0;
  s_botWorldEdgePlanes[2].v[1] = FLOAT_N1_0;
  s_botWorldEdgePlanes[1].v[0] = FLOAT_1_0;
  s_botWorldEdgePlanes[3].v[1] = FLOAT_1_0;
  s_botWorldEdgePlanes[0].v[1] = 0.0;
  s_botWorldEdgePlanes[0].v[2] = 0.0;
  s_botWorldEdgePlanes[1].v[1] = 0.0;
  s_botWorldEdgePlanes[1].v[2] = 0.0;
  s_botWorldEdgePlanes[2].v[0] = 0.0;
  s_botWorldEdgePlanes[2].v[2] = 0.0;
  s_botWorldEdgePlanes[3].v[0] = 0.0;
  s_botWorldEdgePlanes[3].v[2] = 0.0;
  if ( fsqrt((float)((float)(level.pathnodeWorldSize.v[0] * level.pathnodeWorldSize.v[0]) + (float)(level.pathnodeWorldSize.v[1] * level.pathnodeWorldSize.v[1])) + (float)(level.pathnodeWorldSize.v[2] * level.pathnodeWorldSize.v[2])) < 0.1 )
  {
    level.pathnodeWorldSize.v[2] = 2.0 * s_botWorldBounds.halfSize.v[2];
    level.pathnodeWorldSize.v[0] = s_botWorldBounds.halfSize.v[0] * 2.0;
    level.pathnodeWorldSize.v[1] = s_botWorldBounds.halfSize.v[1] * 2.0;
  }
  v40 = 0;
  *(_OWORD *)s_botDebugPathGoal[0].v = 0ui64;
  *(_QWORD *)&s_botDebugPathGoal[1].y = 0i64;
  *(_OWORD *)s_botDebugPathGoal[2].v = 0ui64;
  *(_QWORD *)&s_botDebugPathGoal[3].y = 0i64;
  v41 = &s_botDebugPathGoalGround[1];
  s_botNodesTested = 0;
  do
  {
    v40 += 4;
    *(v41 - 1) = 2047;
    *v41 = 2047;
    v41[1] = 2047;
    v41[2] = 2047;
    v41 += 4;
  }
  while ( v40 < 4 );
  for ( i = 0; i < (int)SvClient::ms_clientCount; ++i )
  {
    if ( SV_BotIsBot(i) && SvClient::GetCommonClient(i)->state > CS_CLIENTLOADING )
    {
      if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
        __debugbreak();
      CommonClient = (SvClientMP *)SvClient::GetCommonClient(i);
      Bot_GetClientData(CommonClient)->botDebugData.debugPathGoalCurrent = 0;
    }
  }
  g_botCurrentNumDebugDrawTriggers = 0;
}

/*
==============
SV_BotPathsInitCornerMask
==============
*/
char SV_BotPathsInitCornerMask()
{
  unsigned int fixedNodeCount; 
  unsigned int Traffic; 
  unsigned __int16 v2; 
  unsigned int v3; 
  const pathnode_t *v4; 
  __int128 v5; 
  unsigned int RawMax; 
  __int128 v7; 
  unsigned __int64 v8; 
  __int64 v10; 
  __int64 v11; 

  fixedNodeCount = pathData.fixedNodeCount;
  LOBYTE(Traffic) = (unsigned __int8)memset_0(s_botRandomNodeCornerMask, 0, sizeof(s_botRandomNodeCornerMask));
  if ( fixedNodeCount >= 0xFFF8 )
  {
    LOBYTE(Traffic) = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3152, ASSERT_TYPE_ASSERT, "( nodeCount ) < ( ( 65535 / 8 ) * 8 )", "nodeCount < BOT_PATH_MASK_SIZE * 8\n\t%i, %i", fixedNodeCount, 65528);
    if ( (_BYTE)Traffic )
      __debugbreak();
  }
  v2 = 0;
  if ( fixedNodeCount )
  {
    v3 = 0;
    do
    {
      v4 = Path_ConvertIndexToNode(v2);
      if ( !v4 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3157, ASSERT_TYPE_ASSERT, "( pathnode )", (const char *)&queryFormat, "pathnode") )
        __debugbreak();
      Traffic = Path_NodeExposureGetTraffic(v4);
      if ( Traffic < 0xA )
      {
        v5 = 0i64;
        while ( 1 )
        {
          RawMax = Path_NodeExposureGetRawMax(v4, *(float *)&v5, 1);
          Traffic = Path_NodeExposureGetRawMax(v4, *(float *)&v5 - 180.0, 1);
          if ( Traffic > RawMax )
            Traffic = RawMax;
          if ( Traffic >= 4 )
            break;
          v7 = v5;
          *(float *)&v7 = *(float *)&v5 + 45.0;
          v5 = v7;
          if ( *(float *)&v7 >= 180.0 )
          {
            if ( (v2 & 0xFFF8u) >= 0xFFF8 )
            {
              LODWORD(v11) = 0x1FFF;
              LODWORD(v10) = v3 >> 3;
              if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3184, ASSERT_TYPE_ASSERT, "(unsigned)( nodeNum / 8 ) < (unsigned)( sizeof( s_botRandomNodeCornerMask ) )", "nodeNum / 8 doesn't index sizeof( s_botRandomNodeCornerMask )\n\t%i not in [0, %i)", v10, v11) )
                __debugbreak();
            }
            v8 = (unsigned __int64)v2 >> 3;
            Traffic = s_botRandomNodeCornerMask[v8] | (1 << (v3 & 7));
            s_botRandomNodeCornerMask[v8] = Traffic;
            break;
          }
        }
      }
      v3 = ++v2;
    }
    while ( v2 < fixedNodeCount );
  }
  s_botRandomNodeCornerMaskInitialized = 1;
  return Traffic;
}

/*
==============
SV_BotPerfectInfoIgnored
==============
*/
void SV_BotPerfectInfoIgnored(const ai_common_t *self, sentient_s *other, unsigned __int8 reason)
{
  ;
}

/*
==============
SV_BotPlayerNameTaken
==============
*/
__int64 SV_BotPlayerNameTaken(const bot_data_t *botData, const char *checkName)
{
  unsigned int v4; 
  const SvClientMP *CommonClient; 
  const char *name; 
  __int64 v7; 
  __int64 v8; 
  const char *v9; 
  int v10; 
  __int64 v11; 
  int v12; 
  int v13; 
  int v14; 
  __int64 v16; 
  __int64 v17; 
  char dest[40]; 

  if ( !checkName && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4098, ASSERT_TYPE_ASSERT, "( checkName )", (const char *)&queryFormat, "checkName") )
    __debugbreak();
  v4 = 0;
  if ( (int)SvClient::ms_clientCount <= 0 )
    return 0i64;
  while ( 1 )
  {
    if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
      __debugbreak();
    CommonClient = (const SvClientMP *)SvClient::GetCommonClient(v4);
    if ( Bot_IsClientActive(CommonClient) )
    {
      if ( !CommonClient->gentity && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4107, ASSERT_TYPE_ASSERT, "( cl->gentity )", (const char *)&queryFormat, "cl->gentity") )
        __debugbreak();
      if ( !CommonClient->gentity->client && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4108, ASSERT_TYPE_ASSERT, "( cl->gentity->client )", (const char *)&queryFormat, "cl->gentity->client") )
        __debugbreak();
      if ( !botData || CommonClient->gentity->s.number != botData->botInfo.ent->s.number )
        break;
    }
LABEL_42:
    if ( (int)++v4 >= (int)SvClient::ms_clientCount )
      return 0i64;
  }
  name = CommonClient->gentity->client->sess.cs.name;
  if ( CommonClient->gentity->client == (gclient_s *)-22188i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3452, ASSERT_TYPE_ASSERT, "( originalName )", (const char *)&queryFormat, "originalName") )
    __debugbreak();
  v7 = -1i64;
  do
    ++v7;
  while ( name[v7] );
  if ( !name && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3441, ASSERT_TYPE_ASSERT, "( name )", (const char *)&queryFormat, &stru_143C9A1A4) )
    __debugbreak();
  if ( I_strstr(name, " [") )
    LODWORD(v7) = v7 - 7;
  if ( (int)v7 + 1 > 36 )
  {
    LODWORD(v17) = 36;
    LODWORD(v16) = v7 + 1;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3462, ASSERT_TYPE_ASSERT, "( nameSize + 1 ) <= ( 36 )", "nameSize + 1 <= MAX_PLAYERNAME_LENGTH\n\t%i, %i", v16, v17) )
      __debugbreak();
  }
  Core_strncpy(dest, 0x24ui64, name, (int)v7);
  v8 = 0x7FFFFFFFi64;
  v9 = checkName;
  if ( !checkName && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 213, ASSERT_TYPE_SANITY, "( s1 )", (const char *)&queryFormat, "s1") )
    __debugbreak();
  do
  {
    v10 = (unsigned __int8)v9[dest - checkName];
    v11 = v8;
    v12 = *(unsigned __int8 *)v9++;
    --v8;
    if ( !v11 )
      break;
    if ( v10 != v12 )
    {
      v13 = v10 + 32;
      if ( (unsigned int)(v10 - 65) > 0x19 )
        v13 = v10;
      v10 = v13;
      v14 = v12 + 32;
      if ( (unsigned int)(v12 - 65) > 0x19 )
        v14 = v12;
      if ( v10 != v14 )
        goto LABEL_42;
    }
  }
  while ( v10 );
  return 1i64;
}

/*
==============
SV_BotRecalculatePath
==============
*/
void SV_BotRecalculatePath(gentity_s *ent)
{
  ;
}

/*
==============
SV_BotReevaluatePath
==============
*/
void SV_BotReevaluatePath(const gentity_s *ent)
{
  bot_data_t *EntityData; 

  EntityData = Bot_GetEntityData(ent);
  if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4323, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( EntityData->botInfo.traversal )
    Bot_TraversalClear(&EntityData->botInfo);
  Bot_PathClear(&EntityData->botInfo);
}

/*
==============
SV_BotRegisterEntAffecter
==============
*/
__int64 SV_BotRegisterEntAffecter(const gentity_s *ent)
{
  signed __int64 v2; 
  int v3; 
  __int16 *i; 
  __int64 v5; 
  __int64 v7; 
  __int64 v8; 

  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 26004, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 196, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
    __debugbreak();
  v2 = ent - g_entities;
  if ( (unsigned int)v2 >= 0x800 )
  {
    LODWORD(v7) = ent - g_entities;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 199, ASSERT_TYPE_ASSERT, "(unsigned)( index ) < (unsigned)( ( 2048 ) )", "index doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v7, 2048) )
      __debugbreak();
  }
  v2 = (__int16)v2;
  if ( (unsigned int)(__int16)v2 >= 0x800 )
  {
    LODWORD(v8) = 2048;
    LODWORD(v7) = v2;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 207, ASSERT_TYPE_ASSERT, "(unsigned)( entityIndex ) < (unsigned)( ( 2048 ) )", "entityIndex doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v7, v8) )
      __debugbreak();
  }
  if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 208, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
    __debugbreak();
  if ( g_entities[v2].r.isInUse != g_entityIsInUse[v2] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 209, ASSERT_TYPE_ASSERT, "( g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex] )", (const char *)&queryFormat, "g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex]") )
    __debugbreak();
  if ( !g_entityIsInUse[v2] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 26005, ASSERT_TYPE_ASSERT, "( G_IsEntityInUse( G_GetEntityIndex( ent ) ) )", (const char *)&queryFormat, "G_IsEntityInUse( G_GetEntityIndex( ent ) )") )
    __debugbreak();
  if ( ent->s.number >= 0x800u )
  {
    LODWORD(v8) = 2048;
    LODWORD(v7) = ent->s.number;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 26006, ASSERT_TYPE_ASSERT, "(unsigned)( ent->s.number ) < (unsigned)( ( 2048 ) )", "ent->s.number doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v7, v8) )
      __debugbreak();
  }
  if ( ent->s.number == 2047 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 26007, ASSERT_TYPE_ASSERT, "( ent->s.number != ENTITYNUM_NONE )", (const char *)&queryFormat, "ent->s.number != ENTITYNUM_NONE") )
    __debugbreak();
  v3 = 0;
  for ( i = s_botEntAffecters; ; ++i )
  {
    LOWORD(v5) = *i;
    if ( *i == ent->s.number )
      break;
    if ( (_WORD)v5 == 2047 )
    {
      s_botEntAffecters[v3] = ent->s.number;
      return 1i64;
    }
    if ( (unsigned __int16)v5 >= 0x800u )
    {
      LODWORD(v8) = 2048;
      LODWORD(v7) = (__int16)v5;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 26021, ASSERT_TYPE_ASSERT, "(unsigned)( affecterEntIndex ) < (unsigned)( ( 2048 ) )", "affecterEntIndex doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v7, v8) )
        __debugbreak();
    }
    v5 = (__int16)v5;
    if ( (unsigned int)(__int16)v5 >= 0x800 )
    {
      LODWORD(v8) = 2048;
      LODWORD(v7) = v5;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 207, ASSERT_TYPE_ASSERT, "(unsigned)( entityIndex ) < (unsigned)( ( 2048 ) )", "entityIndex doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v7, v8) )
        __debugbreak();
    }
    if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 208, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
      __debugbreak();
    if ( g_entities[v5].r.isInUse != g_entityIsInUse[v5] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 209, ASSERT_TYPE_ASSERT, "( g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex] )", (const char *)&queryFormat, "g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex]") )
      __debugbreak();
    if ( !g_entityIsInUse[v5] )
    {
      s_botEntAffecters[v3] = ent->s.number;
      return 1i64;
    }
    if ( (unsigned int)++v3 >= 0x40 )
      return 0i64;
  }
  return 1i64;
}

/*
==============
SV_BotRequirePathnodes
==============
*/
bool SV_BotRequirePathnodes(const bot_data_t *botData)
{
  const dvar_t *v1; 

  v1 = DVARBOOL_bot_EnableNoPathnodeBehavior;
  if ( !DVARBOOL_bot_EnableNoPathnodeBehavior && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 692, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_EnableNoPathnodeBehavior") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v1);
  if ( v1->current.enabled )
    return 0;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1528, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  return (*((_BYTE *)&botData->scriptedAgentInfo + 9019) & 1) == 0;
}

/*
==============
SV_BotSetAvoidanceRadius
==============
*/
void SV_BotSetAvoidanceRadius(const gentity_s *ent, float radius)
{
  bot_data_t *EntityData; 

  EntityData = Bot_GetEntityData(ent);
  if ( EntityData )
  {
    EntityData->botInfo.avoidance.radius = radius;
  }
  else
  {
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4739, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
      __debugbreak();
    MEMORY[0x1D0] = radius;
  }
}

/*
==============
SV_BotSetFireRecoil
==============
*/
void SV_BotSetFireRecoil(const int clientNum, const vec3_t *kickAVel)
{
  const SvClientMP *CommonClient; 
  bot_info_t *BotInfoFromNetBuffer; 

  if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
    __debugbreak();
  CommonClient = (const SvClientMP *)SvClient::GetCommonClient(clientNum);
  BotInfoFromNetBuffer = Bot_GetBotInfoFromNetBuffer(CommonClient);
  if ( !BotInfoFromNetBuffer && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5991, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  if ( BotInfoFromNetBuffer->ent->health > 0 )
  {
    BotInfoFromNetBuffer->kickAVel.v[0] = kickAVel->v[0];
    BotInfoFromNetBuffer->kickAVel.v[1] = kickAVel->v[1];
    BotInfoFromNetBuffer->kickAVel.v[2] = kickAVel->v[2];
  }
}

/*
==============
SV_BotShutdownBotAI
==============
*/
void SV_BotShutdownBotAI(void)
{
  signed int i; 
  SvClientMP *CommonClient; 
  bot_data_t *ClientData; 
  const dvar_t *v3; 

  for ( i = 0; i < (int)SvClient::ms_clientCount; ++i )
  {
    if ( SvClient::GetCommonClient(i)->state == CS_ACTIVE && SV_BotIsBot(i) )
    {
      if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
        __debugbreak();
      CommonClient = (SvClientMP *)SvClient::GetCommonClient(i);
      ClientData = Bot_GetClientData(CommonClient);
      Bot_CleanupBotInfo(ClientData);
    }
  }
  v3 = DVARBOOL_bot_spawnControlledByDvar;
  if ( !DVARBOOL_bot_spawnControlledByDvar && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar_api.h", 759, ASSERT_TYPE_ASSERT, "( dvar )", "Dvar accessed after deregistration") )
    __debugbreak();
  Dvar_Reset(v3, DVAR_SOURCE_INTERNAL);
  s_botRandomNodeCornerMaskInitialized = 0;
  s_botTeamSelectMode = -1;
  DebugWipe(&s_svBotNameData, 0xCui64);
  s_svBotNameData.nameListInitialized = 0;
}

/*
==============
SV_BotStaticStateRead
==============
*/
void SV_BotStaticStateRead(SaveGame *save)
{
  unsigned int v2; 
  __int64 v3; 
  __int64 v4; 
  __int64 v5; 

  if ( !save && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 919, ASSERT_TYPE_ASSERT, "( save )", (const char *)&queryFormat, "save") )
    __debugbreak();
  if ( s_botSentientHistory )
  {
    if ( level.maxSentients != 272 )
    {
      LODWORD(v5) = level.maxSentients;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 923, ASSERT_TYPE_ASSERT, "( level.maxSentients ) == ( (200 + 48 + 24) )", "level.maxSentients == MAX_SENTIENTS_MP\n\t%i, %i", v5, 272) )
        __debugbreak();
    }
    SaveMemory_LoadRead(s_botSentientHistory, 4352, save);
  }
  if ( s_botZoneData )
  {
    v2 = Path_ZoneCount();
    v3 = v2;
    if ( s_botZoneDataCount != v2 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 931, ASSERT_TYPE_ASSERT, "( s_botZoneDataCount == zoneCount )", (const char *)&queryFormat, "s_botZoneDataCount == zoneCount") )
      __debugbreak();
    if ( (_DWORD)v3 )
    {
      v4 = 0i64;
      do
      {
        SaveMemory_LoadRead(&s_botZoneData[v4++], 2, save);
        --v3;
      }
      while ( v3 );
    }
  }
  SaveMemory_LoadRead(s_botEntAffecters, 128, save);
  SaveMemory_LoadRead(&s_svBotNameData, 12, save);
}

/*
==============
SV_BotStaticStateWrite
==============
*/
void SV_BotStaticStateWrite(MemoryFile *memFile)
{
  unsigned int v2; 
  __int64 v3; 
  __int64 v4; 
  __int64 v5; 

  if ( !memFile && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 891, ASSERT_TYPE_ASSERT, "( memFile )", (const char *)&queryFormat, "memFile") )
    __debugbreak();
  if ( s_botSentientHistory )
  {
    if ( level.maxSentients != 272 )
    {
      LODWORD(v5) = level.maxSentients;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 895, ASSERT_TYPE_ASSERT, "( level.maxSentients ) == ( (200 + 48 + 24) )", "level.maxSentients == MAX_SENTIENTS_MP\n\t%i, %i", v5, 272) )
        __debugbreak();
    }
    MemFile_WriteData(memFile, 0x1100ui64, s_botSentientHistory);
  }
  if ( s_botZoneData )
  {
    v2 = Path_ZoneCount();
    v3 = v2;
    if ( s_botZoneDataCount != v2 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 903, ASSERT_TYPE_ASSERT, "( s_botZoneDataCount == zoneCount )", (const char *)&queryFormat, "s_botZoneDataCount == zoneCount") )
      __debugbreak();
    if ( (_DWORD)v3 )
    {
      v4 = 0i64;
      do
      {
        MemFile_WriteData(memFile, 2ui64, &s_botZoneData[v4++]);
        --v3;
      }
      while ( v3 );
    }
  }
  MemFile_WriteData(memFile, 0x80ui64, s_botEntAffecters);
  MemFile_WriteData(memFile, 0xCui64, &s_svBotNameData);
}

/*
==============
SV_BotStoreSentientThreat
==============
*/
void SV_BotStoreSentientThreat(const sentient_s *botSentient, const sentient_s *otherSentient, int threat)
{
  bot_data_t *EntityData; 
  signed __int64 v7; 
  __int64 v8; 

  if ( !botSentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24373, ASSERT_TYPE_ASSERT, "( botSentient )", (const char *)&queryFormat, "botSentient") )
    __debugbreak();
  if ( !otherSentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24374, ASSERT_TYPE_ASSERT, "( otherSentient )", (const char *)&queryFormat, "otherSentient") )
    __debugbreak();
  EntityData = Bot_GetEntityData(botSentient->ent);
  if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24380, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v7 = 60 * (otherSentient - level.sentients);
  v8 = (__int64)&EntityData->scriptedAgentInfo + v7 + 11644;
  if ( (bot_data_t *)((char *)EntityData + v7) == (bot_data_t *)-11652i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24383, ASSERT_TYPE_ASSERT, "( botSentientInfo )", (const char *)&queryFormat, "botSentientInfo") )
    __debugbreak();
  *(_DWORD *)(v8 + 40) = threat;
}

/*
==============
SV_BotSupportsCommand
==============
*/
__int64 SV_BotSupportsCommand(const char *commandString)
{
  int BindingForCommand; 
  const char **v2; 

  BindingForCommand = Com_Keys_GetBindingForCommand(commandString);
  v2 = s_botSupportedCmdNotifies;
  while ( Com_Keys_GetBindingForCommand(*v2) != BindingForCommand )
  {
    if ( (__int64)++v2 >= (__int64)&s_botProfTimeStart )
      return 0i64;
  }
  return 1i64;
}

/*
==============
SV_BotSwitchWeapon
==============
*/
__int64 SV_BotSwitchWeapon(gentity_s *self, const Weapon *weapon)
{
  bot_data_t *EntityData; 
  const playerState_s *playerState; 
  GWeaponMap *Instance; 

  if ( !self && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24913, ASSERT_TYPE_ASSERT, "( self )", (const char *)&queryFormat, "self") )
    __debugbreak();
  EntityData = Bot_GetEntityData(self);
  if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24920, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  playerState = EntityData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24924, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  if ( Bot_Weap_IsNone(weapon) )
  {
    EntityData->botInfo.scriptWeapon = *Bot_Weap_None();
    return 1i64;
  }
  else
  {
    Instance = GWeaponMap::GetInstance();
    if ( BG_PlayerHasWeapon(Instance, playerState, weapon) )
    {
      *(__m256i *)((char *)&EntityData->scriptedAgentInfo + 27964) = *(__m256i *)&weapon->weaponIdx;
      *(_OWORD *)((char *)&EntityData->scriptedAgentInfo + 27996) = *(_OWORD *)&weapon->attachmentVariationIndices[5];
      *(double *)((char *)&EntityData->scriptedAgentInfo + 28012) = *(double *)&weapon->attachmentVariationIndices[21];
      *((_DWORD *)&EntityData->scriptedAgentInfo + 7005) = *(_DWORD *)&weapon->weaponCamo;
      return 1i64;
    }
    else
    {
      return 0i64;
    }
  }
}

/*
==============
SV_BotTeamLimit
==============
*/
unsigned __int8 SV_BotTeamLimit(int relativeTeam)
{
  int BotsTeamLimit; 
  const dvar_t *v3; 
  const dvar_t *v4; 
  const dvar_t *v5; 
  bool v6; 
  const dvar_t *v7; 
  int integer; 

  if ( BG_BotsUsingTeamLimits() )
  {
    BotsTeamLimit = BG_GetBotsTeamLimit(relativeTeam);
    if ( !s_botTeamSelectMode && relativeTeam == 1 )
    {
      v3 = DVARINT_bot_MaxNumEnemyBots;
      if ( !DVARINT_bot_MaxNumEnemyBots && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_MaxNumEnemyBots") )
        __debugbreak();
      Dvar_CheckFrontendServerThread(v3);
      if ( v3->current.integer < 0 && Dvar_GetInt_Internal_DebugName(DVARINT_bot_MaxNumAllyBots, "bot_MaxNumAllyBots") < 0 )
        BotsTeamLimit = 0;
      goto LABEL_19;
    }
  }
  else
  {
    BotsTeamLimit = 10;
  }
  if ( relativeTeam )
  {
    if ( relativeTeam != 1 )
      return truncate_cast<unsigned char,int>(BotsTeamLimit);
LABEL_19:
    v7 = DVARINT_bot_MaxNumEnemyBots;
    if ( !DVARINT_bot_MaxNumEnemyBots && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_MaxNumEnemyBots") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v7);
    if ( v7->current.integer >= 0 )
    {
      v5 = DVARINT_bot_MaxNumEnemyBots;
      if ( !DVARINT_bot_MaxNumEnemyBots )
      {
        v6 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_MaxNumEnemyBots");
LABEL_25:
        if ( v6 )
          __debugbreak();
        goto LABEL_27;
      }
      goto LABEL_27;
    }
    return truncate_cast<unsigned char,int>(BotsTeamLimit);
  }
  v4 = DVARINT_bot_MaxNumAllyBots;
  if ( !DVARINT_bot_MaxNumAllyBots && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_MaxNumAllyBots") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v4);
  if ( v4->current.integer >= 0 )
  {
    v5 = DVARINT_bot_MaxNumAllyBots;
    if ( !DVARINT_bot_MaxNumAllyBots )
    {
      v6 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_MaxNumAllyBots");
      goto LABEL_25;
    }
LABEL_27:
    Dvar_CheckFrontendServerThread(v5);
    integer = v5->current.integer;
    if ( BotsTeamLimit < integer )
      integer = BotsTeamLimit;
    BotsTeamLimit = integer;
  }
  return truncate_cast<unsigned char,int>(BotsTeamLimit);
}

/*
==============
SV_BotTestBadPlaces
==============
*/
void SV_BotTestBadPlaces()
{
  const dvar_t *v0; 
  signed int i; 
  const SvClientMP *CommonClient; 
  int v3; 
  const dvar_t *v4; 
  int usageFlags; 
  const dvar_t *v6; 
  nav_space_s *DefaultSpace; 
  nav_space_s *v8; 
  bitarray<224> v9; 
  vec3_t pos; 
  bitarray<224> teamFlags; 

  if ( !Com_GameMode_SupportsFeature(WEAPON_RAISING_ALTSWITCH) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1071, ASSERT_TYPE_ASSERT, "(G_Bot_UseGlobalBadPlace())", "%s\n\tThis function uses global bad places, refactor if turned off", "G_Bot_UseGlobalBadPlace()") )
    __debugbreak();
  if ( !Com_GameMode_SupportsFeature(WEAPON_RAISING_ALTSWITCH) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1072, ASSERT_TYPE_ASSERT, "(G_Bot_UseBadPlaceRestrictions())", "%s\n\tThis function uses bad place restrictions, refactor if turned off", "G_Bot_UseBadPlaceRestrictions()") )
    __debugbreak();
  v0 = DVARINT_bot_BadPlaceTest;
  if ( !DVARINT_bot_BadPlaceTest && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_BadPlaceTest") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v0);
  if ( v0->current.integer && (int)abs32(SvPersistentGlobalsMP::GetPersistentGlobalsMP()->time - lastBadPlaceTime) > 1000 )
  {
    for ( i = 0; i < (int)SvClient::ms_clientCount; ++i )
    {
      if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
        __debugbreak();
      CommonClient = (const SvClientMP *)SvClient::GetCommonClient(i);
      if ( Bot_IsClientActive(CommonClient) )
      {
        if ( !CommonClient->gentity && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1087, ASSERT_TYPE_ASSERT, "( cl->gentity )", (const char *)&queryFormat, "cl->gentity") )
          __debugbreak();
        if ( !SV_BotIsBot(i) )
        {
          pos = CommonClient->gentity->r.currentOrigin;
          memset(&teamFlags.array[1], 0, 24);
          teamFlags.array[0] = 1610612736;
          v3 = Nav_TranslateTeamFlagsToRepulsorUsageFlags(&teamFlags);
          v4 = DVARINT_bot_BadPlaceTest;
          usageFlags = v3;
          if ( !DVARINT_bot_BadPlaceTest && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_BadPlaceTest") )
            __debugbreak();
          Dvar_CheckFrontendServerThread(v4);
          if ( v4->current.integer == 3 )
          {
            v9 = teamFlags;
            Path_MakeGlobalBadPlace((scr_string_t)0, 1500, &v9, 1);
          }
          else
          {
            v6 = DVARINT_bot_BadPlaceTest;
            if ( !DVARINT_bot_BadPlaceTest && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_BadPlaceTest") )
              __debugbreak();
            Dvar_CheckFrontendServerThread(v6);
            if ( v6->current.integer == 2 )
            {
              pos.v[2] = pos.v[2] + -512.0;
              DefaultSpace = Nav_GetDefaultSpace();
              Nav_CreateRepulsor(DefaultSpace, &pos, &vec3_origin, 1500, 1000.0, 2047, usageFlags, (const scr_string_t)0, 1);
            }
            else if ( Dvar_GetInt_Internal_DebugName(DVARINT_bot_BadPlaceTest, "bot_BadPlaceTest") == 1 )
            {
              pos.v[2] = pos.v[2] + -128.0;
              v8 = Nav_GetDefaultSpace();
              Nav_CreateRepulsor(v8, &pos, &vec3_origin, 1500, 300.0, 2047, usageFlags, (const scr_string_t)0, 1);
            }
          }
        }
      }
    }
    lastBadPlaceTime = SvPersistentGlobalsMP::GetPersistentGlobalsMP()->time;
  }
}

/*
==============
SV_BotTestPathdata
==============
*/
void SV_BotTestPathdata()
{
  __int128 v0; 
  char v1; 
  char v2; 
  int v3; 
  signed int v4; 
  const SvClientMP *CommonClient; 
  const bot_data_t *EntityData; 
  const char *MapName; 
  int v8; 
  unsigned __int16 v9; 
  int v10; 
  pathnode_t *v11; 
  const char *GameType; 
  __int64 v13; 
  char v14; 
  const char *v15; 
  int v16; 
  vec3_t *p_currentOrigin; 
  scr_string_t v18; 
  const char *v19; 
  const char *v20; 
  char Str[256]; 
  char Destination[256]; 
  __int128 v23; 

  if ( !s_botNodesTested )
  {
    v1 = 0;
    v2 = 0;
    v3 = 0;
    v4 = 0;
    do
    {
      if ( v4 >= (int)SvClient::ms_clientCount )
        break;
      if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
        __debugbreak();
      CommonClient = (const SvClientMP *)SvClient::GetCommonClient(v4);
      if ( Bot_IsClientActive(CommonClient) )
      {
        if ( SV_BotIsBot(v4) )
        {
          v1 = 1;
          EntityData = Bot_GetEntityData(&g_entities[v4]);
          if ( SV_BotRequirePathnodes(EntityData) )
            v2 = 1;
        }
      }
      ++v4;
    }
    while ( !v2 );
    if ( v1 )
    {
      if ( v2 )
      {
        MapName = SV_Game_GetMapName();
        if ( Path_NodeCount() )
        {
          if ( Path_UsePathExtraData() && Nav_HasExposureData() )
          {
            if ( Path_ZoneCount() )
            {
              v8 = 10;
              v9 = 0;
              v10 = 0;
              do
              {
                if ( v10 >= Path_NodeCount() )
                  break;
                if ( Path_NodeValid(v9) )
                {
                  v11 = Path_ConvertIndexToNode(v9);
                  if ( (v11->constant.spawnflags & 1) != 0 )
                  {
                    ++v8;
                  }
                  else if ( v11->constant.totalLinkCount )
                  {
                    break;
                  }
                }
                v10 = ++v9;
              }
              while ( v9 < v8 );
              if ( v9 == v8 || v9 == Path_NodeCount() )
                Com_Error_impl(ERR_DROP, (const ObfuscateErrorText)&unk_1440C6CA0, 272i64, MapName);
            }
            else
            {
              Com_Error_impl(ERR_DROP, (const ObfuscateErrorText)&unk_1440C6BF0, 271i64, MapName);
            }
          }
          else
          {
            Com_Error_impl(ERR_DROP, (const ObfuscateErrorText)&stru_1440C6B80, 270i64, MapName);
          }
        }
        else
        {
          Com_Error_impl(ERR_DROP, (const ObfuscateErrorText)&unk_1440C6B10, 269i64, MapName);
        }
        GameType = SV_GameMP_GetGameType();
        v13 = 0i64;
        while ( 1 )
        {
          v14 = GameType[v13++];
          if ( v14 != aWar[v13 - 1] )
            break;
          if ( v13 == 4 )
          {
            v15 = "_tdm_";
            goto LABEL_36;
          }
        }
        v15 = j_va("_%s_", GameType);
LABEL_36:
        strncpy(Destination, v15, 0xFFui64);
        v16 = 0;
        Destination[255] = 0;
        if ( level.num_entities > 0 )
        {
          v23 = v0;
          p_currentOrigin = &g_entities->r.currentOrigin;
          do
          {
            v18 = LODWORD(p_currentOrigin[6].v[2]);
            if ( v18 )
            {
              v19 = SL_ConvertToString(v18);
              strncpy(Str, v19, 0xFFui64);
              Str[255] = 0;
              if ( strstr_0(Str, "mp_") == Str && strstr_0(Str, "_spawn") && strstr_0(Str, Destination) && !Path_NearestNodeByDistanceOnly(p_currentOrigin, 300.0) )
              {
                v3 = 1;
                v20 = vtos(p_currentOrigin);
                Com_Printf(16, "ERROR: Spawn point outside of path grid <%s> %s\n", Str, v20);
              }
            }
            ++v16;
            p_currentOrigin = (vec3_t *)((char *)p_currentOrigin + 1456);
          }
          while ( v16 < level.num_entities );
          if ( v3 )
            Com_Error_impl(ERR_DROP, (const ObfuscateErrorText)&stru_1440C6D60, 273i64, MapName);
        }
      }
      s_botNodesTested = 1;
    }
  }
}

/*
==============
SV_BotUnregisterEntAffecter
==============
*/
__int64 SV_BotUnregisterEntAffecter(const gentity_s *ent)
{
  signed __int64 v2; 
  __int16 *v3; 
  unsigned int v4; 
  __int64 v6; 
  __int64 v7; 

  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 26042, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 196, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
    __debugbreak();
  v2 = ent - g_entities;
  if ( (unsigned int)v2 >= 0x800 )
  {
    LODWORD(v6) = ent - g_entities;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 199, ASSERT_TYPE_ASSERT, "(unsigned)( index ) < (unsigned)( ( 2048 ) )", "index doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v6, 2048) )
      __debugbreak();
  }
  v2 = (__int16)v2;
  if ( (unsigned int)(__int16)v2 >= 0x800 )
  {
    LODWORD(v7) = 2048;
    LODWORD(v6) = v2;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 207, ASSERT_TYPE_ASSERT, "(unsigned)( entityIndex ) < (unsigned)( ( 2048 ) )", "entityIndex doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v6, v7) )
      __debugbreak();
  }
  if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 208, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
    __debugbreak();
  if ( g_entities[v2].r.isInUse != g_entityIsInUse[v2] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 209, ASSERT_TYPE_ASSERT, "( g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex] )", (const char *)&queryFormat, "g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex]") )
    __debugbreak();
  if ( !g_entityIsInUse[v2] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 26043, ASSERT_TYPE_ASSERT, "( G_IsEntityInUse( G_GetEntityIndex( ent ) ) )", (const char *)&queryFormat, "G_IsEntityInUse( G_GetEntityIndex( ent ) )") )
    __debugbreak();
  if ( ent->s.number >= 0x800u )
  {
    LODWORD(v7) = 2048;
    LODWORD(v6) = ent->s.number;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 26044, ASSERT_TYPE_ASSERT, "(unsigned)( ent->s.number ) < (unsigned)( ( 2048 ) )", "ent->s.number doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v6, v7) )
      __debugbreak();
  }
  if ( ent->s.number == 2047 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 26045, ASSERT_TYPE_ASSERT, "( ent->s.number != ENTITYNUM_NONE )", (const char *)&queryFormat, "ent->s.number != ENTITYNUM_NONE") )
    __debugbreak();
  v3 = s_botEntAffecters;
  v4 = 0;
  while ( *v3 != ent->s.number )
  {
    ++v4;
    ++v3;
    if ( v4 >= 0x40 )
      return 0i64;
  }
  s_botEntAffecters[v4] = 2047;
  return 1i64;
}

/*
==============
SV_BotUpdateBots
==============
*/
void SV_BotUpdateBots(void)
{
  int v0; 
  signed int v1; 
  signed int v2; 
  usercmd_s *v3; 
  SvClientMP *CommonClient; 
  bot_data_t *ClientData; 
  int time; 
  unsigned int *p_obstacleId; 
  __int64 v8; 
  int *p_commandTime; 
  SvClientMP *v10; 
  unsigned int MpClientIndex; 
  __int64 v12; 
  usercmd_s cmd[200]; 

  if ( !BG_BotSystemEnabled() && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3591, ASSERT_TYPE_ASSERT, "( BG_BotSystemEnabled() )", (const char *)&queryFormat, "BG_BotSystemEnabled()") )
    __debugbreak();
  if ( !SV_Loaded() && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3592, ASSERT_TYPE_ASSERT, "( SV_Loaded() )", (const char *)&queryFormat, "SV_Loaded()") )
    __debugbreak();
  if ( SvStaticGlobals::ms_svStaticGlobals.state && level.num_entities )
  {
    Profile_Begin(404);
    v0 = SvClient::ms_clientCount;
    if ( (unsigned __int64)(int)SvClient::ms_clientCount > 0xC8 )
    {
      LODWORD(v12) = SvClient::ms_clientCount;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3599, ASSERT_TYPE_ASSERT, "( SvClient::GetClientCount() ) <= ( ( sizeof( *array_counter( botcmds ) ) + 0 ) )", "SvClient::GetClientCount() <= ARRAY_COUNT( botcmds )\n\t%i, %i", v12, 200) )
        __debugbreak();
      v0 = SvClient::ms_clientCount;
    }
    v1 = 0;
    v2 = 0;
    if ( v0 > 0 )
    {
      v3 = cmd;
      while ( !SV_BotIsBot(v2) )
      {
LABEL_28:
        ++v2;
        ++v3;
        if ( v2 >= (int)SvClient::ms_clientCount )
          goto LABEL_29;
      }
      if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
        __debugbreak();
      CommonClient = (SvClientMP *)SvClient::GetCommonClient(v2);
      if ( Bot_IsClientActive(CommonClient) )
      {
        Bot_Think(CommonClient, &cmd[v2]);
        Bot_CyclePathTurn(v2);
      }
      else
      {
        if ( !Bot_IsClientSpectatorState(CommonClient) )
        {
LABEL_27:
          v3->buttons |= 0x18002000000000ui64;
          goto LABEL_28;
        }
        ClientData = Bot_GetClientData(CommonClient);
        if ( !ClientData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3574, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
          __debugbreak();
        v3->buttons = 0i64;
        time = SvPersistentGlobalsMP::GetPersistentGlobalsMP()->time;
        v3->serverTime = time;
        v3->commandTime = time;
        v3->inputTime = time;
        Bot_UpdateScriptedButtons(ClientData, v3);
      }
      ++s_botActiveBotCount;
      goto LABEL_27;
    }
LABEL_29:
    p_obstacleId = &s_botDoorBlockerData[0].obstacleId;
    v8 = 32i64;
    do
    {
      if ( p_obstacleId[1] != -1 && (int)(level.time - *(p_obstacleId - 1)) > 3000 )
      {
        Nav_DestroyObstacleByID(*p_obstacleId);
        p_obstacleId[1] = -1;
        *(_QWORD *)(p_obstacleId - 1) = 0i64;
        *(p_obstacleId - 2) = -1;
      }
      p_obstacleId += 4;
      --v8;
    }
    while ( v8 );
    Profile_EndInternal(NULL);
    if ( (int)SvClient::ms_clientCount > 0 )
    {
      p_commandTime = &cmd[0].commandTime;
      do
      {
        if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
          __debugbreak();
        v10 = (SvClientMP *)SvClient::GetCommonClient(v1);
        if ( SV_BotIsBot(v1) )
        {
          if ( Bot_IsClientConnected(v10) )
            SvClientMP::SetBotCommandsAcknowledged(v10);
          if ( Bot_IsClientActive(v10) )
          {
            if ( *(p_commandTime - 1) > v10->lastUsercmd.serverTime )
              SV_ClientMP_Think(v10, &cmd[v1]);
          }
          else if ( Bot_IsClientSpectatorState(v10) )
          {
            v10->lastUsercmd.buttons = *((_QWORD *)p_commandTime - 2);
            v10->lastUsercmd.serverTime = *(p_commandTime - 1);
            v10->lastUsercmd.commandTime = *p_commandTime;
            MpClientIndex = SV_Client_GetMpClientIndex(v10);
            if ( SvClient::GetCommonClient(MpClientIndex)->state == CS_ACTIVE )
            {
              v10->gentity->client->sess.oldcmd.buttons = v10->gentity->client->sess.cmd.buttons;
              SV_Game_GetUsercmd(MpClientIndex, &v10->gentity->client->sess.cmd);
              v10->gentity->client->oldbuttons = v10->gentity->client->buttons;
              v10->gentity->client->buttons = v10->gentity->client->sess.cmd.buttons;
              v10->gentity->client->buttonsSinceLastFrame |= v10->gentity->client->buttons & ~v10->gentity->client->oldbuttons;
            }
          }
        }
        ++v1;
        p_commandTime += 66;
      }
      while ( v1 < (int)SvClient::ms_clientCount );
    }
  }
}

/*
==============
SV_BotUpdateCommon
==============
*/
void SV_BotUpdateCommon(void)
{
  unsigned __int8 BotsConnectType; 
  const dvar_t *v1; 
  unsigned __int8 v2; 
  unsigned __int8 v3; 
  const dvar_t *v4; 
  int v5; 
  bitarray<224> *AllTeamFlags; 
  unsigned int v7; 
  sentient_s *v8; 
  signed __int64 v9; 
  bot_sentient_history_t *v10; 
  signed __int64 v11; 
  float v12; 
  float v13; 
  float v14; 
  ai_common_t *ai; 
  int v16; 
  float *p_number; 
  float v18; 
  bool v19; 
  sentient_s *v20; 
  const gentity_s **p_ent; 
  __int64 v22; 
  AICommonInterface *m_pAI; 
  __int64 v24; 
  __int64 v25; 
  unsigned int v26; 
  int v27; 
  AICommonWrapper v28; 
  vec3_t vOriginOut; 
  bitarray<224> iTeamFlags; 

  Profile_Begin(403);
  if ( !SV_Loaded() && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3298, ASSERT_TYPE_ASSERT, "( SV_Loaded() )", (const char *)&queryFormat, "SV_Loaded()") )
    __debugbreak();
  if ( SvStaticGlobals::ms_svStaticGlobals.state && level.num_entities )
  {
    BotsConnectType = BG_GetBotsConnectType();
    v1 = DVARINT_bot_SystemStatus;
    v2 = BotsConnectType;
    if ( !DVARINT_bot_SystemStatus && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_SystemStatus") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v1);
    v3 = truncate_cast<unsigned char,int>(v1->current.integer);
    if ( !v2 && v3 )
      BG_GameStateInfo_InitDefaultBotConnectType();
    SV_BotUpdateDebugPathGoal();
    SV_BotTestBadPlaces();
    Bot_DrawDebugNavmeshExposure();
    Bot_DrawDebugSpecial();
    v4 = DVARBOOL_bot_DisableAllAI;
    if ( !DVARBOOL_bot_DisableAllAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 692, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DisableAllAI") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v4);
    if ( !v4->current.enabled && (s_botActiveBotCount > 0 || BG_GetBotsConnectType()) )
    {
      GStatic::SetActiveStatics();
      s_botGetPathToGoalCalled = 0;
      if ( !s_botRandomNodeCornerMaskInitialized )
        SV_BotPathsInitCornerMask();
      SV_BotTestPathdata();
      SV_BotDrawDebugNodeScores();
      v5 = 0;
      if ( Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) )
        AllTeamFlags = (bitarray<224> *)Com_TeamsSP_GetAllTeamFlags();
      else
        AllTeamFlags = (bitarray<224> *)Com_TeamsMP_GetAllTeamFlags();
      iTeamFlags = *AllTeamFlags;
      v7 = 0;
      v26 = 0;
      if ( level.sentients )
      {
        do
        {
          if ( v7 >= level.maxSentients )
            break;
          v8 = &level.sentients[v7];
          if ( v8->inuse )
          {
            if ( !v8->ent )
            {
              if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3378, ASSERT_TYPE_ASSERT, "( sentient->ent )", (const char *)&queryFormat, "sentient->ent") )
                __debugbreak();
              if ( !v8->ent )
              {
                Com_Printf(131087, "*** Sentient found without an entity ***\n");
                Bot_PrintSentientInfo(v8);
                Com_LogFileFlush();
              }
            }
            if ( s_botSentientHistory )
            {
              v9 = v8 - level.sentients;
              if ( (unsigned int)v9 >= level.maxSentients )
              {
                LODWORD(v25) = level.maxSentients;
                LODWORD(v24) = ((int)v8 - LODWORD(level.sentients)) / 184;
                if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1947, ASSERT_TYPE_ASSERT, "(unsigned)( sentientIndex ) < (unsigned)( level.maxSentients )", "sentientIndex doesn't index level.maxSentients\n\t%i not in [0, %i)", v24, v25) )
                  __debugbreak();
              }
              Sentient_GetOrigin(v8, &vOriginOut);
              v10 = s_botSentientHistory;
              v11 = v9;
              v12 = s_botSentientHistory[v11].lastCheckPosition.v[2] - vOriginOut.v[2];
              v13 = s_botSentientHistory[v11].lastCheckPosition.v[0] - vOriginOut.v[0];
              v14 = s_botSentientHistory[v11].lastCheckPosition.v[1] - vOriginOut.v[1];
              if ( (float)((float)((float)(v14 * v14) + (float)(v13 * v13)) + (float)(v12 * v12)) > 90000.0 )
              {
                s_botSentientHistory[v11].lastCheckPosition.v[0] = vOriginOut.v[0];
                v10[v11].lastCheckPosition.v[1] = vOriginOut.v[1];
                v10[v11].lastCheckPosition.v[2] = vOriginOut.v[2];
                v10[v11].lastTimeMovedPositions = level.time;
              }
            }
            ai = v8->ai;
            v16 = v5 + 1;
            if ( !ai )
              v16 = v5;
            v5 = v16;
            v27 = v16;
            if ( !ai )
            {
              p_number = (float *)&v8->ent->s.number;
              if ( v8->ent->s.eType != ET_PLAYER )
              {
                v18 = p_number[76];
                v19 = v18 != v8->oldOrigin.v[0] || v8->oldOrigin.v[1] != p_number[77] || v8->oldOrigin.v[2] != p_number[78];
                v8->oldOrigin.v[0] = v18;
                v8->oldOrigin.v[1] = p_number[77];
                v8->oldOrigin.v[2] = p_number[78];
                Sentient_CheckAndUpdateNearestData(v8, v19);
              }
            }
            v20 = Sentient_FirstSentient(&iTeamFlags);
            if ( v20 )
            {
              do
              {
                if ( v20->ai && Bot_IsCharacterActive(v20->ent) && !AI_IsAlliedSentient(v8, v20) && (unsigned int)Bot_IsEntPositionAlwaysKnown(v20->ai, v8->ent) )
                {
                  p_ent = (const gentity_s **)&v20->ai->ent;
                  AIActorInterface::AIActorInterface(&v28.m_actorInterface);
                  AIAgentInterface::AIAgentInterface(&v28.m_newAgentInterface);
                  v28.m_newAgentInterface.__vftable = (AINewAgentInterface_vtbl *)&AINewAgentInterface::`vftable';
                  AICommonInterface::AICommonInterface(&v28.m_botInterface);
                  v28.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
                  AICommonInterface::AICommonInterface(&v28.m_botAgentInterface);
                  m_pAI = NULL;
                  v28.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
                  v28.m_pAI = NULL;
                  if ( p_ent )
                  {
                    AICommonWrapper::Setup(&v28, *p_ent);
                    m_pAI = v28.m_pAI;
                  }
                  if ( !m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3408, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
                    __debugbreak();
                  LOBYTE(v22) = 26;
                  m_pAI->GetPerfectInfo(m_pAI, v8, v22);
                }
                v20 = Sentient_NextSentient(v20, &iTeamFlags);
              }
              while ( v20 );
              v5 = v27;
              v7 = v26;
            }
          }
          v26 = ++v7;
        }
        while ( level.sentients );
        if ( v5 > 0 )
        {
          Bot_ZoneUpdateCounts();
          Bot_CyclePathTurn(-1);
        }
      }
      GStatic::ClearActiveStatics();
    }
  }
  Profile_EndInternal(NULL);
}

/*
==============
SV_BotUpdateDebugPathGoal
==============
*/
void SV_BotUpdateDebugPathGoal()
{
  __int128 v0; 
  __int128 v1; 
  __int128 v2; 
  __int128 v3; 
  __int128 v4; 
  int CurrentNumDebugGoals; 
  __int64 v6; 
  int v7; 
  signed int v8; 
  const SvClientMP *CommonClient; 
  gentity_s *gentity; 
  playerState_s *PlayerState; 
  __int64 v12; 
  __int64 v13; 
  int v14; 
  float *v15; 
  unsigned __int64 v16; 
  bool v17; 
  int v18; 
  bool v19; 
  int v20; 
  bool v21; 
  int v22; 
  bool v23; 
  __int64 v24; 
  float *v25; 
  bool v26; 
  int v27; 
  int MoverThenGroundEnt; 
  __int16 v29; 
  float v30; 
  __int64 v31; 
  __int128 v32; 
  int v35; 
  __int16 v36; 
  float v37; 
  __int64 v38; 
  __int64 v39; 
  unsigned int v40; 
  __int64 v41; 
  gentity_s *v42; 
  vec3_t *v43; 
  float v44; 
  float v45; 
  float v46; 
  float v47; 
  float v48; 
  float v49; 
  float v50; 
  float v51; 
  float v52; 
  int v53; 
  __int64 v54; 
  gentity_s *v55; 
  __int16 EntityIndex; 
  unsigned int number; 
  const SvClientMP *v58; 
  BOOL IsClientConnected; 
  bitarray_base<bitarray<224> > *AllTeamFlags; 
  unsigned int v61; 
  const SvClientMP *v62; 
  bot_data_t *EntityData; 
  __int64 contentmask; 
  __int64 v65; 
  vec3_t end; 
  vec3_t vEyePosOut; 
  vec3_t resultPoint; 
  vec3_t forward; 
  tmat33_t<vec3_t> out; 
  trace_t results; 
  tmat33_t<vec3_t> axis; 
  __int128 v73; 
  __int128 v74; 
  __int128 v75; 
  __int128 v76; 
  __int128 v77; 

  if ( Bot_GetCurrentNumDebugGoals() <= 0 )
    return;
  CurrentNumDebugGoals = Bot_GetCurrentNumDebugGoals();
  v6 = CurrentNumDebugGoals;
  v7 = 0;
  if ( CurrentNumDebugGoals > 4 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1682, ASSERT_TYPE_ASSERT, "( currentNumPathGoals ) <= ( 4 )", "currentNumPathGoals <= BOT_MAX_DEBUG_PATH_GOALS\n\t%i, %i", CurrentNumDebugGoals, 4) )
    __debugbreak();
  v8 = 0;
  if ( (int)SvClient::ms_clientCount <= 0 )
    return;
  v77 = v0;
  v76 = v1;
  v75 = v2;
  v74 = v3;
  v73 = v4;
  do
  {
    if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
      __debugbreak();
    CommonClient = (const SvClientMP *)SvClient::GetCommonClient(v8);
    if ( !Bot_IsClientActive(CommonClient) )
      goto LABEL_78;
    if ( SV_BotIsBot(v8) )
      goto LABEL_78;
    gentity = CommonClient->gentity;
    if ( !gentity || !gentity->sentient )
      goto LABEL_78;
    PlayerState = G_MainMP_GetPlayerState(v8);
    if ( !PlayerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1694, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
      __debugbreak();
    v12 = 0i64;
    v13 = (int)v6 - 1;
    v14 = 1;
    if ( v13 >= 4 )
    {
      v15 = &s_botDebugPathGoal[0].v[2];
      v16 = ((unsigned __int64)((int)v6 - 1 - 4i64) >> 2) + 1;
      v12 = 4 * v16;
      do
      {
        v17 = *(v15 - 2) != 0.0 || *(v15 - 1) != 0.0 || *v15 != 0.0;
        v18 = 0;
        if ( v17 )
          v18 = v14;
        v19 = v15[1] != 0.0 || v15[2] != 0.0 || v15[3] != 0.0;
        v20 = 0;
        if ( v19 )
          v20 = v18;
        v21 = v15[4] != 0.0 || v15[5] != 0.0 || v15[6] != 0.0;
        v22 = 0;
        if ( v21 )
          v22 = v20;
        v23 = v15[7] != 0.0 || v15[8] != 0.0 || v15[9] != 0.0;
        v14 = 0;
        if ( v23 )
          v14 = v22;
        v15 += 12;
        --v16;
      }
      while ( v16 );
    }
    if ( v12 < v13 )
    {
      v24 = v13 - v12;
      v25 = &s_botDebugPathGoal[v12].v[2];
      do
      {
        v26 = *(v25 - 2) != 0.0 || *(v25 - 1) != 0.0 || *v25 != 0.0;
        v27 = 0;
        if ( v26 )
          v27 = v14;
        v25 += 3;
        v14 = v27;
        --v24;
      }
      while ( v24 );
    }
    if ( !v14 )
      break;
    if ( GameModeFlagContainer<enum PWeaponFlagsCommon,enum PWeaponFlagsSP,enum PWeaponFlagsMP,64>::TestFlagInternal(&PlayerState->weapCommon.weapFlags, ACTIVE, 0) )
    {
      MoverThenGroundEnt = BGMovingPlatformPS::GetMoverThenGroundEnt(&PlayerState->movingPlatforms, PlayerState);
      v29 = truncate_cast<short,int>(MoverThenGroundEnt);
      if ( Bot_GetClosestNavigablePoint(&CommonClient->gentity->r.currentOrigin, 256.0, 196625, &resultPoint, v29) )
      {
        if ( resultPoint.v[0] == 0.0 && resultPoint.v[1] == 0.0 && resultPoint.v[2] == 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1716, ASSERT_TYPE_ASSERT, "( Vec3NotZero( validPoint ) )", (const char *)&queryFormat, "Vec3NotZero( validPoint )") )
          __debugbreak();
        v30 = resultPoint.v[1];
        v31 = 3 * v6;
        v7 = 1;
        *((float *)&s_svBotNameData.buildIndexStart + v31) = resultPoint.v[0];
        *(&s_BotMatchDataSettingsInit + v31) = SLODWORD(resultPoint.v[2]);
        *((float *)&s_svBotNameData.buildIndexEnd + v31) = v30;
        LODWORD(s_botDebugPathGoal[3].v[v6 + 2]) = PlayerState->groundEntityNum;
      }
    }
    else if ( GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&PlayerState->pm_flags, ACTIVE, 9u) && !GameModeFlagContainer<enum PWeaponFlagsCommon,enum PWeaponFlagsSP,enum PWeaponFlagsMP,64>::TestFlagInternal(&PlayerState->weapCommon.weapFlags, ACTIVE, 1u) )
    {
      Sentient_GetEyePosition(CommonClient->gentity->sentient, &vEyePosOut);
      AngleVectors(&PlayerState->viewangles, &forward, NULL, NULL);
      end.v[0] = (float)(5000.0 * forward.v[0]) + vEyePosOut.v[0];
      end.v[1] = (float)(5000.0 * forward.v[1]) + vEyePosOut.v[1];
      end.v[2] = (float)(5000.0 * forward.v[2]) + vEyePosOut.v[2];
      results.fraction = FLOAT_1_0;
      G_Main_TraceCapsule(&results, &vEyePosOut, &end, &bounds_origin, 2047, 196625);
      if ( results.fraction < 1.0 )
      {
        v32 = LODWORD(end.v[0]);
        *(float *)&v32 = (float)((float)((float)(end.v[0] - vEyePosOut.v[0]) * results.fraction) + vEyePosOut.v[0]) + (float)(2.0 * results.normal.v[0]);
        _XMM6 = v32;
        __asm { vunpcklps xmm0, xmm6, xmm5 }
        *(double *)end.v = *(double *)&_XMM0;
        *(double *)vEyePosOut.v = *(double *)&_XMM0;
        vEyePosOut.v[2] = (float)((float)((float)(end.v[2] - vEyePosOut.v[2]) * results.fraction) + vEyePosOut.v[2]) + (float)(2.0 * results.normal.v[2]);
        end.v[2] = vEyePosOut.v[2] - 1000.0;
        results.fraction = FLOAT_1_0;
        G_Main_TraceCapsule(&results, &vEyePosOut, &end, &bounds_origin, 2047, 196625);
        if ( results.fraction < 1.0 )
        {
          end.v[0] = (float)((float)(end.v[0] - vEyePosOut.v[0]) * results.fraction) + vEyePosOut.v[0];
          end.v[1] = (float)((float)(end.v[1] - vEyePosOut.v[1]) * results.fraction) + vEyePosOut.v[1];
          end.v[2] = (float)((float)(end.v[2] - vEyePosOut.v[2]) * results.fraction) + vEyePosOut.v[2];
          v35 = BGMovingPlatformPS::GetMoverThenGroundEnt(&PlayerState->movingPlatforms, PlayerState);
          v36 = truncate_cast<short,int>(v35);
          if ( Bot_GetClosestNavigablePoint(&end, 256.0, 196625, &resultPoint, v36) )
          {
            if ( resultPoint.v[0] == 0.0 && resultPoint.v[1] == 0.0 && resultPoint.v[2] == 0.0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1752, ASSERT_TYPE_ASSERT, "( Vec3NotZero( validPoint ) )", (const char *)&queryFormat, "Vec3NotZero( validPoint )") )
              __debugbreak();
            v37 = resultPoint.v[1];
            v38 = 3 * v6;
            *((float *)&s_svBotNameData.buildIndexStart + v38) = resultPoint.v[0];
            *(&s_BotMatchDataSettingsInit + v38) = SLODWORD(resultPoint.v[2]);
            *((float *)&s_svBotNameData.buildIndexEnd + v38) = v37;
            v7 = 1;
            LODWORD(s_botDebugPathGoal[3].v[v6 + 2]) = Trace_GetEntityHitId(&results);
          }
        }
      }
    }
LABEL_78:
    ++v8;
  }
  while ( v8 < (int)SvClient::ms_clientCount );
  if ( v7 )
  {
    v39 = (int)v6 - 1;
    v40 = s_botDebugPathGoalGround[v39];
    if ( v40 != 2047 )
    {
      if ( v40 >= 0x800 )
      {
        LODWORD(v65) = 2048;
        LODWORD(contentmask) = s_botDebugPathGoalGround[v39];
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1771, ASSERT_TYPE_ASSERT, "(unsigned)( s_botDebugPathGoalGround[currentNumPathGoals - 1] ) < (unsigned)( ( 2048 ) )", "s_botDebugPathGoalGround[currentNumPathGoals - 1] doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", contentmask, v65) )
          __debugbreak();
      }
      v41 = s_botDebugPathGoalGround[v39];
      if ( (unsigned int)v41 >= 0x800 )
      {
        LODWORD(v65) = 2048;
        LODWORD(contentmask) = s_botDebugPathGoalGround[v39];
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 207, ASSERT_TYPE_ASSERT, "(unsigned)( entityIndex ) < (unsigned)( ( 2048 ) )", "entityIndex doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", contentmask, v65) )
          __debugbreak();
      }
      if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 208, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
        __debugbreak();
      if ( g_entities[v41].r.isInUse != g_entityIsInUse[v41] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 209, ASSERT_TYPE_ASSERT, "( g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex] )", (const char *)&queryFormat, "g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex]") )
        __debugbreak();
      if ( !g_entityIsInUse[v41] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1772, ASSERT_TYPE_ASSERT, "( G_IsEntityInUse( s_botDebugPathGoalGround[currentNumPathGoals - 1] ) )", (const char *)&queryFormat, "G_IsEntityInUse( s_botDebugPathGoalGround[currentNumPathGoals - 1] )") )
        __debugbreak();
      v42 = &level.gentities[s_botDebugPathGoalGround[v39]];
      v43 = &s_botDebugPathGoal[v39];
      v44 = v43->v[0] - v42->r.currentOrigin.v[0];
      v45 = v43->v[2] - v42->r.currentOrigin.v[2];
      v46 = v43->v[1] - v42->r.currentOrigin.v[1];
      AnglesToAxis(&v42->r.currentAngles, &axis);
      MatrixInverse(&axis, &out);
      if ( &forward == v43 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_math.h", 470, ASSERT_TYPE_SANITY, "( &in1 != &out )", (const char *)&queryFormat, "&in1 != &out") )
        __debugbreak();
      v47 = v46 * out.m[1].v[1];
      v48 = v45 * out.m[2].v[1];
      v43->v[0] = (float)((float)(v46 * out.m[1].v[0]) + (float)(v44 * out.m[0].v[0])) + (float)(v45 * out.m[2].v[0]);
      v49 = v47 + (float)(v44 * out.m[0].v[1]);
      v50 = v46 * out.m[1].v[2];
      v51 = v49 + v48;
      v52 = v45 * out.m[2].v[2];
      v43->v[1] = v51;
      v43->v[2] = (float)(v50 + (float)(v44 * out.m[0].v[2])) + v52;
    }
    v53 = 0;
    v54 = 0i64;
    while ( 2 )
    {
      if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
        __debugbreak();
      if ( v53 >= (int)ComCharacterLimits::ms_gameData.m_characterCount )
        return;
      v55 = &level.gentities[v54];
      if ( &level.gentities[v54] )
      {
        EntityIndex = G_GetEntityIndex(&level.gentities[v54]);
        if ( G_IsEntityInUse(EntityIndex) )
        {
          if ( v55->sentient )
          {
            if ( v55->client )
            {
              number = v55->s.number;
              if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
                __debugbreak();
              v58 = (const SvClientMP *)SvClient::GetCommonClient(number);
              IsClientConnected = Bot_IsClientConnected(v58);
LABEL_115:
              if ( IsClientConnected )
                goto LABEL_116;
            }
            else
            {
              if ( v55->agent )
              {
                IsClientConnected = v55->s.eType == ET_AGENT;
                goto LABEL_115;
              }
LABEL_116:
              if ( v55->s.eType != ET_INVISIBLE )
              {
                AllTeamFlags = (bitarray_base<bitarray<224> > *)Com_TeamsMP_GetAllTeamFlags();
                if ( bitarray_base<bitarray<224>>::testBit(AllTeamFlags, v55->sentient->eTeam) )
                {
                  if ( !v55->client )
                    goto LABEL_131;
                  v61 = v55->s.number;
                  if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
                    __debugbreak();
                  v62 = (const SvClientMP *)SvClient::GetCommonClient(v61);
                  if ( Bot_IsClientActive(v62) )
                  {
LABEL_131:
                    if ( SV_BotIsBotEnt(v55) )
                    {
                      EntityData = Bot_GetEntityData(v55);
                      if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1795, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
                        __debugbreak();
                      EntityData->botDebugData.debugPathGoalCurrent = 0;
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v53;
      ++v54;
      continue;
    }
  }
}

/*
==============
SV_BotUpdateEyeInfo
==============
*/
void SV_BotUpdateEyeInfo(const gentity_s *self)
{
  bot_data_t *EntityData; 
  playerState_s *playerState; 
  vec3_t *p_viewangles; 
  gentity_s *RemoteEyesEnt; 
  scr_string_t v6; 
  int WorldTagMatrix; 
  vec3_t *p_eyeAngles; 
  GHandler *Handler; 
  float v10; 
  vec3_t *v11; 
  tmat43_t<vec3_t> outTagMat; 

  if ( !self && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23712, ASSERT_TYPE_ASSERT, "( self )", (const char *)&queryFormat, "self") )
    __debugbreak();
  if ( !SV_BotIsBotEnt(self) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23713, ASSERT_TYPE_ASSERT, "( SV_BotIsBotEnt( self ) )", (const char *)&queryFormat, "SV_BotIsBotEnt( self )") )
    __debugbreak();
  EntityData = Bot_GetEntityData(self);
  if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23720, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  playerState = EntityData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23725, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  if ( EntityData->botInfo.eyeInfo.time != level.time )
  {
    Profile_Begin(273);
    EntityData->botInfo.eyeInfo.time = level.time;
    if ( Bot_HasRemoteEyes(EntityData) )
    {
      if ( (unsigned int)Bot_IsThirdPersonRemoteVehicle(EntityData) )
      {
        p_viewangles = &playerState->viewangles;
        EntityData->botInfo.eyeAngles.v[0] = p_viewangles->v[0];
        EntityData->botInfo.eyeAngles.v[1] = p_viewangles->v[1];
        EntityData->botInfo.eyeAngles.v[2] = p_viewangles->v[2];
      }
      else
      {
        RemoteEyesEnt = Bot_GetRemoteEyesEnt(EntityData);
        if ( !GConfigStrings::ms_gConfigStrings && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_configstrings.h", 71, ASSERT_TYPE_ASSERT, "( ms_gConfigStrings )", (const char *)&queryFormat, "ms_gConfigStrings") )
          __debugbreak();
        v6 = GConfigStrings::ms_gConfigStrings->GetClientTagName(GConfigStrings::ms_gConfigStrings, playerState->remoteEyesTagname);
        WorldTagMatrix = G_Utils_DObjGetWorldTagMatrix(RemoteEyesEnt, v6, &outTagMat);
        if ( !WorldTagMatrix )
        {
          WorldTagMatrix = G_Utils_DObjGetWorldTagMatrix(RemoteEyesEnt, scr_const.tag_player, &outTagMat);
          if ( !WorldTagMatrix )
            WorldTagMatrix = G_Utils_DObjGetWorldTagMatrix(RemoteEyesEnt, scr_const.tag_origin, &outTagMat);
        }
        p_viewangles = &EntityData->botInfo.eyeAngles;
        p_eyeAngles = &EntityData->botInfo.eyeAngles;
        if ( WorldTagMatrix )
        {
          AxisToAngles((const tmat33_t<vec3_t> *)&outTagMat, p_eyeAngles);
        }
        else
        {
          p_viewangles = &RemoteEyesEnt->r.currentAngles;
          p_eyeAngles->v[0] = RemoteEyesEnt->r.currentAngles.v[0];
          EntityData->botInfo.eyeAngles.v[1] = RemoteEyesEnt->r.currentAngles.v[1];
          EntityData->botInfo.eyeAngles.v[2] = RemoteEyesEnt->r.currentAngles.v[2];
        }
      }
      AngleVectors(p_viewangles, &EntityData->botInfo.eyeInfo.dir, NULL, NULL);
      Sentient_GetRemoteEyePosition(self->sentient, &EntityData->botInfo.eyeInfo.pos);
    }
    else
    {
      G_Client_GetEyePosition(playerState, &EntityData->botInfo.eyeInfo.pos);
      Handler = GHandler::getHandler();
      BG_GetPlayerViewDirection(playerState, outTagMat.m, &outTagMat.m[1], &outTagMat.m[2], Handler, 0);
      v10 = outTagMat.m[0].v[1];
      EntityData->botInfo.eyeInfo.dir.v[0] = outTagMat.m[0].v[0];
      EntityData->botInfo.eyeInfo.dir.v[2] = outTagMat.m[0].v[2];
      EntityData->botInfo.eyeInfo.dir.v[1] = v10;
      if ( !Com_GameMode_SupportsFeature(WEAPON_MELEE) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23784, ASSERT_TYPE_ASSERT, "( Com_GameMode_SupportsFeature( Com_GameMode_Feature::ENTITY_GROUND_REF ) )", (const char *)&queryFormat, "Com_GameMode_SupportsFeature( Com_GameMode_Feature::ENTITY_GROUND_REF )") )
        __debugbreak();
      v11 = &EntityData->botInfo.eyeAngles;
      if ( playerState->groundRefEnt == 2047 )
      {
        v11->v[0] = playerState->viewangles.v[0];
        EntityData->botInfo.eyeAngles.v[1] = playerState->viewangles.v[1];
        EntityData->botInfo.eyeAngles.v[2] = playerState->viewangles.v[2];
      }
      else
      {
        LODWORD(outTagMat.m[1].v[0]) ^= _xmm;
        LODWORD(outTagMat.m[1].v[2]) ^= _xmm;
        LODWORD(outTagMat.m[1].v[1]) ^= _xmm;
        AxisToAngles((const tmat33_t<vec3_t> *)&outTagMat, v11);
      }
    }
    Profile_EndInternal(NULL);
  }
}

/*
==============
SV_BotUpdateSightThreshold
==============
*/
void SV_BotUpdateSightThreshold(const sentient_s *botSentient, const sentient_s *enemy)
{
  __int128 v2; 
  __int128 v3; 
  __int128 v4; 
  __int128 v5; 
  bot_data_t *EntityData; 
  signed __int64 v9; 
  __int64 v10; 
  int v11; 
  AIBotInterface *m_pAI; 
  float v13; 
  float v14; 
  float v15; 
  const playerState_s *EntityPlayerStateConst; 
  int averageEnemySightTime; 
  float v18; 
  gentity_s *ent; 
  float viewheight_crouch; 
  float ProneViewHeight; 
  playerState_s *EntityPlayerState; 
  GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64> *p_pm_flags; 
  BOOL v24; 
  const SuitDef *SuitDef; 
  gentity_s *v30; 
  __int128 v31; 
  __int128 v33; 
  __int128 v34; 
  gentity_s *v35; 
  __int128 v36; 
  __int128 v37; 
  __int128 v41; 
  __int128 v42; 
  __int128 v43; 
  __int128 v47; 
  __int128 v48; 
  float v49; 
  float v50; 
  __int128 v51; 
  float v55; 
  double v56; 
  __int128 v57; 
  double v58; 
  __int128 v59; 
  int v60; 
  float v61; 
  double v62; 
  __int128 v63; 
  unsigned int v64; 
  __int128 v66; 
  float v70; 
  float v71; 
  float v72; 
  float v73; 
  float v74; 
  gentity_s *v75; 
  int resultTime[2]; 
  sentient_s *self; 
  AIBotWrapper v78; 
  vec3_t resultPos; 
  vec3_t vPoint; 
  vec3_t vEyeDir; 
  vec3_t vEyePosOut; 
  vec3_t v83; 
  vec3_t vVelOut; 
  __int128 v85; 
  __int128 v86; 
  __int128 v87; 
  __int128 v88; 

  self = (sentient_s *)botSentient;
  if ( !botSentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16971, ASSERT_TYPE_ASSERT, "( botSentient )", (const char *)&queryFormat, "botSentient") )
    __debugbreak();
  if ( !botSentient->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16972, ASSERT_TYPE_ASSERT, "( botSentient->ent )", (const char *)&queryFormat, "botSentient->ent") )
    __debugbreak();
  if ( !enemy && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16973, ASSERT_TYPE_ASSERT, "( enemy )", (const char *)&queryFormat, "enemy") )
    __debugbreak();
  if ( !enemy->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16974, ASSERT_TYPE_ASSERT, "( enemy->ent )", (const char *)&queryFormat, "enemy->ent") )
    __debugbreak();
  if ( enemy->ent->health <= 0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16975, ASSERT_TYPE_ASSERT, "( !Bot_EntityIsDead( enemy->ent ) )", (const char *)&queryFormat, "!Bot_EntityIsDead( enemy->ent )") )
    __debugbreak();
  EntityData = Bot_GetEntityData(botSentient->ent);
  if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17019, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v9 = 60 * (enemy - level.sentients);
  v10 = (__int64)&EntityData->scriptedAgentInfo + v9 + 11644;
  if ( (bot_data_t *)((char *)EntityData + v9) == (bot_data_t *)-11652i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17025, ASSERT_TYPE_ASSERT, "( botSentientInfo )", (const char *)&queryFormat, "botSentientInfo") )
    __debugbreak();
  *(_QWORD *)resultPos.v = Sentient_GetSentientInfo(botSentient, enemy);
  if ( !*(_QWORD *)resultPos.v && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17028, ASSERT_TYPE_ASSERT, "( pInfo )", (const char *)&queryFormat, "pInfo") )
    __debugbreak();
  AICommonInterface::AICommonInterface(&v78.m_botInterface);
  v78.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v78.m_botAgentInterface);
  v11 = 0;
  v78.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v78.m_pAI = NULL;
  AIBotWrapper::Setup(&v78, EntityData->botInfo.ent);
  m_pAI = v78.m_pAI;
  if ( !v78.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17030, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  if ( !Bot_SightThresholdExpiredOrNotStarted((bot_sight_threshold_t *)(v10 + 8)) )
  {
    v13 = *(float *)(v10 + 20) - enemy->ent->r.currentOrigin.v[0];
    v14 = *(float *)(v10 + 24) - enemy->ent->r.currentOrigin.v[1];
    v15 = *(float *)(v10 + 28) - enemy->ent->r.currentOrigin.v[2];
    if ( (float)((float)((float)(v14 * v14) + (float)(v13 * v13)) + (float)(v15 * v15)) > 250000.0 )
      *(_DWORD *)(v10 + 8) = 0;
  }
  if ( Bot_SightThresholdExpiredOrNotStarted((bot_sight_threshold_t *)(v10 + 8)) )
  {
    EntityPlayerStateConst = G_GetEntityPlayerStateConst(enemy->ent);
    *(_DWORD *)(v10 + 12) = 0;
    *(_QWORD *)(v10 + 20) = 0i64;
    *(_DWORD *)(v10 + 28) = 0;
    averageEnemySightTime = (int)EntityData->botMatchData.averageEnemySightTime;
    if ( EntityPlayerStateConst && BG_HasPerk(&EntityPlayerStateConst->perks, 0x2Au) )
      averageEnemySightTime += 100;
    v18 = (float)averageEnemySightTime * 6.8499999;
    *(float *)(v10 + 16) = v18;
    v11 = 0;
  }
  else
  {
    v18 = *(float *)(v10 + 16);
  }
  if ( v18 <= *(float *)(v10 + 12) )
  {
    *(_DWORD *)(v10 + 8) = level.time;
    ent = enemy->ent;
    *(float *)(v10 + 20) = enemy->ent->r.currentOrigin.v[0];
    *(float *)(v10 + 24) = ent->r.currentOrigin.v[1];
    *(float *)(v10 + 28) = ent->r.currentOrigin.v[2];
    return;
  }
  viewheight_crouch = FLOAT_40_0;
  ProneViewHeight = FLOAT_11_0;
  EntityPlayerState = G_GetEntityPlayerState(enemy->ent);
  *(_QWORD *)resultTime = EntityPlayerState;
  if ( EntityPlayerState )
  {
    p_pm_flags = &EntityPlayerState->pm_flags;
    if ( GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&EntityPlayerState->pm_flags, ACTIVE, 0) || Bot_EntIsInLastStand(enemy->ent) )
    {
      v24 = 0;
    }
    else
    {
      v24 = !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(p_pm_flags, ACTIVE, 1u);
      v11 = 1;
    }
    SuitDef = BG_GetSuitDef(*(_DWORD *)(*(_QWORD *)resultTime + 884i64));
    if ( SuitDef )
    {
      viewheight_crouch = (float)SuitDef->viewheight_crouch;
      ProneViewHeight = (float)BG_Suit_GetProneViewHeight(SuitDef);
    }
  }
  else
  {
    v24 = 0;
    if ( enemy->ent->s.eType == ET_TURRET )
      v11 = 1;
  }
  Sentient_GetHeadPosition(enemy, &vEyePosOut);
  _XMM0 = (unsigned int)AICommonInterface::CanSeeEntityPointThroughFoliage(m_pAI, &vEyePosOut, enemy->ent);
  __asm { vpcmpeqd xmm3, xmm0, xmm1 }
  _XMM1 = LODWORD(FLOAT_0_89999998);
  __asm { vblendvps xmm0, xmm1, xmm2, xmm3 }
  resultTime[0] = _XMM0;
  if ( !v24 )
  {
    v31 = (unsigned int)resultTime[0];
    goto LABEL_54;
  }
  v30 = enemy->ent;
  *(_QWORD *)vPoint.v = *(_QWORD *)enemy->ent->r.currentOrigin.v;
  vPoint.v[2] = viewheight_crouch + v30->r.currentOrigin.v[2];
  if ( !AICommonInterface::CanSeeEntityPoint(m_pAI, &vPoint, v30) )
  {
    _XMM6 = (unsigned int)resultTime[0];
    goto LABEL_55;
  }
  v31 = (unsigned int)resultTime[0];
  if ( AICommonInterface::CanSeeEntityPointThroughFoliage(m_pAI, &vPoint, enemy->ent) )
  {
LABEL_54:
    v34 = v31;
    *(float *)&v34 = *(float *)&v31 + 1.1;
    _XMM6 = v34;
    goto LABEL_55;
  }
  v33 = (unsigned int)resultTime[0];
  *(float *)&v33 = *(float *)resultTime + 0.27500001;
  _XMM6 = v33;
LABEL_55:
  if ( !v11 )
    goto LABEL_59;
  v35 = enemy->ent;
  *(_QWORD *)vPoint.v = *(_QWORD *)enemy->ent->r.currentOrigin.v;
  vPoint.v[2] = ProneViewHeight + v35->r.currentOrigin.v[2];
  if ( !AICommonInterface::CanSeeEntityPoint(m_pAI, &vPoint, v35) )
    goto LABEL_60;
  if ( AICommonInterface::CanSeeEntityPointThroughFoliage(m_pAI, &vPoint, enemy->ent) )
  {
LABEL_59:
    v37 = _XMM6;
    *(float *)&v37 = *(float *)&_XMM6 + 1.0;
    _XMM6 = v37;
  }
  else
  {
    v36 = _XMM6;
    *(float *)&v36 = *(float *)&_XMM6 + 0.25;
    _XMM6 = v36;
  }
LABEL_60:
  if ( *(float *)&_XMM6 > 0.0 )
  {
    v88 = v2;
    v87 = v3;
    v86 = v4;
    v85 = v5;
    Sentient_GetVelocity(enemy, &vVelOut);
    _XMM15 = LODWORD(FLOAT_10_0);
    __asm
    {
      vcmpltss xmm0, xmm15, xmm2
      vblendvps xmm0, xmm6, xmm3, xmm0
    }
    resultTime[0] = _XMM0;
    Sentient_GetEyePosition(self, &v83);
    v42 = LODWORD(vEyePosOut.v[0]);
    *(float *)&v42 = vEyePosOut.v[0] - v83.v[0];
    v41 = v42;
    v43 = LODWORD(vEyePosOut.v[1]);
    *(float *)&v43 = fsqrt((float)((float)((float)(vEyePosOut.v[1] - v83.v[1]) * (float)(vEyePosOut.v[1] - v83.v[1])) + (float)(*(float *)&v41 * *(float *)&v41)) + (float)((float)(vEyePosOut.v[2] - v83.v[2]) * (float)(vEyePosOut.v[2] - v83.v[2])));
    _XMM1 = v43;
    __asm
    {
      vcmpless xmm0, xmm1, cs:__real@80000000
      vblendvps xmm0, xmm1, xmm11, xmm0
    }
    v48 = v41;
    *(float *)&v48 = *(float *)&v41 * (float)(1.0 / *(float *)&_XMM0);
    v47 = v48;
    v49 = (float)(vEyePosOut.v[1] - v83.v[1]) * (float)(1.0 / *(float *)&_XMM0);
    v50 = (float)(vEyePosOut.v[2] - v83.v[2]) * (float)(1.0 / *(float *)&_XMM0);
    AICommonInterface::GetEyeDirection(m_pAI, &vEyeDir);
    v51 = LODWORD(vEyeDir.v[0]);
    *(float *)&v51 = fsqrt((float)((float)(*(float *)&v51 * *(float *)&v51) + (float)(vEyeDir.v[1] * vEyeDir.v[1])) + (float)(vEyeDir.v[2] * vEyeDir.v[2]));
    _XMM3 = v51;
    __asm
    {
      vcmpless xmm0, xmm3, cs:__real@80000000
      vblendvps xmm0, xmm3, xmm11, xmm0
    }
    vEyeDir.v[0] = vEyeDir.v[0] * (float)(1.0 / *(float *)&_XMM0);
    vEyeDir.v[2] = vEyeDir.v[2] * (float)(1.0 / *(float *)&_XMM0);
    vEyeDir.v[1] = vEyeDir.v[1] * (float)(1.0 / *(float *)&_XMM0);
    *(double *)&_XMM0 = Bot_GetMaxFov(EntityData);
    *(float *)&v51 = (float)(*(float *)&_XMM0 * 0.25) * 0.0087266462;
    cosf_0(*(float *)&v51);
    v55 = *(float *)&v51;
    v56 = SV_BotFovDot(&EntityData->botInfo, enemy->ent);
    v57 = v47;
    *(float *)&v57 = (float)((float)(*(float *)&v47 * vEyeDir.v[0]) + (float)(v49 * vEyeDir.v[1])) + (float)(v50 * vEyeDir.v[2]);
    if ( v55 == *(float *)&v56 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17182, ASSERT_TYPE_ASSERT, "( fovDotFullSightRange != botMaxSightFov )", (const char *)&queryFormat, "fovDotFullSightRange != botMaxSightFov") )
      __debugbreak();
    v58 = I_fclamp((float)(*(float *)&v57 - *(float *)&v56) / (float)(v55 - *(float *)&v56), 0.0, 1.0);
    *(float *)&v57 = *(float *)&v58 + *(float *)resultTime;
    v59 = v57;
    v60 = *(_DWORD *)(*(_QWORD *)resultPos.v + 16i64);
    if ( v60 && level.time - v60 < 4000 )
    {
      if ( level.time - v60 >= 1000 )
      {
        *(float *)&v57 = *(float *)&v57 + 5.0;
        v59 = v57;
      }
      else
      {
        *(float *)&v57 = *(float *)&v57 + 10.0;
        v59 = v57;
      }
    }
    v61 = fsqrt((float)((float)((float)(v83.v[1] - vEyePosOut.v[1]) * (float)(v83.v[1] - vEyePosOut.v[1])) + (float)((float)(v83.v[0] - vEyePosOut.v[0]) * (float)(v83.v[0] - vEyePosOut.v[0]))) + (float)((float)(v83.v[2] - vEyePosOut.v[2]) * (float)(v83.v[2] - vEyePosOut.v[2])));
    if ( v61 > 0.0 )
    {
      v62 = I_fclamp(2.0 - (float)(v61 * 0.0016666667), 0.0, 2.0);
      v63 = v59;
      *(float *)&v63 = *(float *)&v59 + (float)(*(float *)&v62 * 2.0);
      v59 = v63;
    }
    v64 = 0;
    if ( Bot_MemoryGetMostRecentPosition(EntityData, 2, 1, &resultPos, NULL) && (float)((float)((float)((float)(resultPos.v[1] - enemy->ent->r.currentOrigin.v[1]) * (float)(resultPos.v[1] - enemy->ent->r.currentOrigin.v[1])) + (float)((float)(resultPos.v[0] - enemy->ent->r.currentOrigin.v[0]) * (float)(resultPos.v[0] - enemy->ent->r.currentOrigin.v[0]))) + (float)((float)(resultPos.v[2] - enemy->ent->r.currentOrigin.v[2]) * (float)(resultPos.v[2] - enemy->ent->r.currentOrigin.v[2]))) < 250000.0 )
    {
      v64 = 1;
    }
    else
    {
      resultTime[0] = 0;
      if ( Bot_MemoryGetMostRecentPosition(EntityData, 4, 1, &resultPos, resultTime) && level.time < resultTime[0] + 15000 && (float)((float)((float)((float)(resultPos.v[1] - enemy->ent->r.currentOrigin.v[1]) * (float)(resultPos.v[1] - enemy->ent->r.currentOrigin.v[1])) + (float)((float)(resultPos.v[0] - enemy->ent->r.currentOrigin.v[0]) * (float)(resultPos.v[0] - enemy->ent->r.currentOrigin.v[0]))) + (float)((float)(resultPos.v[2] - enemy->ent->r.currentOrigin.v[2]) * (float)(resultPos.v[2] - enemy->ent->r.currentOrigin.v[2]))) < 250000.0 )
        v64 = 1;
    }
    v66 = v59;
    *(float *)&v66 = *(float *)&v59 + 10.0;
    _XMM3 = v66;
    _XMM0 = v64;
    __asm
    {
      vpcmpeqd xmm2, xmm0, xmm1
      vblendvps xmm5, xmm3, xmm7, xmm2
    }
    resultTime[0] = _XMM5;
    v70 = *(float *)&_XMM5;
    if ( EntityData->botInfo.currentAISearch.currentNodeCount )
    {
      v71 = EntityData->botInfo.currentAISearch.searchOrigin.v[1] - enemy->ent->r.currentOrigin.v[1];
      v72 = EntityData->botInfo.currentAISearch.searchOrigin.v[0] - enemy->ent->r.currentOrigin.v[0];
      v73 = EntityData->botInfo.currentAISearch.searchOrigin.v[2] - enemy->ent->r.currentOrigin.v[2];
      if ( (float)((float)((float)(v71 * v71) + (float)(v72 * v72)) + (float)(v73 * v73)) < 250000.0 )
        v70 = *(float *)&_XMM5 + 1.0;
    }
    if ( (LOBYTE(EntityData->scriptedAgentInfo.blackboard.m_ShootParams.m_Pos.v[0]) & 0x10) != 0 )
      v70 = v70 - EntityData->botMatchData.sightTurnAroundPenalty;
    if ( Bot_GetSensesObstructed(EntityData, (float *)resultTime, NULL) )
      v70 = v70 + (float)(*(float *)resultTime * -10.0);
    if ( Bot_IsCamping(EntityData) )
      v70 = v70 * 1.5;
    v74 = v70 * EntityData->botInfo.awareness;
    *(float *)(v10 + 12) = (float)((float)m_pAI->GetThreatUpdateInterval(m_pAI) * v74) + *(float *)(v10 + 12);
    v75 = enemy->ent;
    *(float *)(v10 + 20) = enemy->ent->r.currentOrigin.v[0];
    *(float *)(v10 + 24) = v75->r.currentOrigin.v[1];
    *(float *)(v10 + 28) = v75->r.currentOrigin.v[2];
    *(_DWORD *)(v10 + 8) = level.time;
  }
}

/*
==============
SV_BotZoneGetIndoorPercent
==============
*/
float SV_BotZoneGetIndoorPercent(int zone)
{
  __int64 v1; 

  v1 = zone;
  if ( zone >= s_botZoneDataCount && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25596, ASSERT_TYPE_ASSERT, "(unsigned)( zone ) < (unsigned)( s_botZoneDataCount )", "zone doesn't index s_botZoneDataCount\n\t%i not in [0, %i)", zone, s_botZoneDataCount) )
    __debugbreak();
  if ( (_DWORD)v1 == 255 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25597, ASSERT_TYPE_ASSERT, "( zone != 255 )", (const char *)&queryFormat, "zone != PATH_INVALID_ZONE") )
    __debugbreak();
  return s_botZoneData[v1].indoorPercent;
}

/*
==============
SV_Bot_GetNavigator
==============
*/
AINavigator *SV_Bot_GetNavigator(const gentity_s *pEnt)
{
  bot_data_t *EntityData; 

  EntityData = Bot_GetEntityData(pEnt);
  if ( !EntityData || EntityData->bIsScriptedAgent )
    return 0i64;
  else
    return EntityData->botInfo.pNavigator;
}

