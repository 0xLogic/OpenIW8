/*
==============
Postload_ParticleModuleInitOrientedSprite
==============
*/

void __fastcall Postload_ParticleModuleInitOrientedSprite(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleInitOrientedSprite@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleCurveDef
==============
*/

int __fastcall Mark_ParticleCurveDef()
{
  return ?Mark_ParticleCurveDef@@YAHXZ();
}

/*
==============
Preload_ParticleSystemDefFlags
==============
*/

void __fastcall Preload_ParticleSystemDefFlags(const DBStreamStart streamStart)
{
  ?Preload_ParticleSystemDefFlags@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleImpactDirectionArray
==============
*/

void __fastcall Postload_ParticleImpactDirectionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleImpactDirectionArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleRenderOptionsArray
==============
*/

void __fastcall Preload_ParticleRenderOptionsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleRenderOptionsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_FxMarkProjectionAxis
==============
*/

void __fastcall Preload_FxMarkProjectionAxis(const DBStreamStart streamStart)
{
  ?Preload_FxMarkProjectionAxis@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_ParticleModuleTestPos
==============
*/

ParticleModuleTestPos *__fastcall AllocPostload_ParticleModuleTestPos()
{
  return ?AllocPostload_ParticleModuleTestPos@@YAPEAUParticleModuleTestPos@@XZ();
}

/*
==============
Load_FxMarkProjectionAxisArray
==============
*/

void __fastcall Load_FxMarkProjectionAxisArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_FxMarkProjectionAxisArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleUseVelocityOptions
==============
*/

int __fastcall Mark_ParticleUseVelocityOptions()
{
  return ?Mark_ParticleUseVelocityOptions@@YAHXZ();
}

/*
==============
Postload_ParticleEmitterDefFlagsArray
==============
*/

void __fastcall Postload_ParticleEmitterDefFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleEmitterDefFlagsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleSizeGraph
==============
*/

void __fastcall Preload_ParticleModuleSizeGraph(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleSizeGraph@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleModuleInitDecal
==============
*/

void __fastcall Postload_ParticleModuleInitDecal(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleInitDecal@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleModuleInitPlayerFacingArray
==============
*/

void __fastcall Load_ParticleModuleInitPlayerFacingArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitPlayerFacingArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleAxis
==============
*/

int __fastcall Mark_ParticleModuleAxis()
{
  return ?Mark_ParticleModuleAxis@@YAHXZ();
}

/*
==============
Preload_ParticleModuleInitKillWrapBoxArray
==============
*/

void __fastcall Preload_ParticleModuleInitKillWrapBoxArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitKillWrapBoxArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleSystemDefArray
==============
*/

void __fastcall Preload_ParticleSystemDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleSystemDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ParticleModuleShaderGraph
==============
*/

ParticleModuleShaderGraph *__fastcall AllocPreload_ParticleModuleShaderGraph()
{
  return ?AllocPreload_ParticleModuleShaderGraph@@YAPEAUParticleModuleShaderGraph@@XZ();
}

/*
==============
Postload_ParticleModulePositionGraphArray
==============
*/

void __fastcall Postload_ParticleModulePositionGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModulePositionGraphArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleInitVectorFieldArray
==============
*/

void __fastcall Postload_ParticleModuleInitVectorFieldArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitVectorFieldArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleTestGravityArray
==============
*/

void __fastcall Load_ParticleModuleTestGravityArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleTestGravityArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleEmissionGraph
==============
*/

void __fastcall Postload_ParticleModuleEmissionGraph(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleEmissionGraph@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleModuleTestAgeArray
==============
*/

void __fastcall Load_ParticleModuleTestAgeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleTestAgeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleStateDefFlagsArray
==============
*/

void __fastcall Preload_ParticleStateDefFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleStateDefFlagsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleInstancePoolAction
==============
*/

void __fastcall Postload_ParticleInstancePoolAction(const DBStreamStart streamStart)
{
  ?Postload_ParticleInstancePoolAction@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ParticleModuleInitAtlas
==============
*/

ParticleModuleInitAtlas *__fastcall AllocPreload_ParticleModuleInitAtlas()
{
  return ?AllocPreload_ParticleModuleInitAtlas@@YAPEAUParticleModuleInitAtlas@@XZ();
}

/*
==============
AllocPreload_ParticleModuleInitLightOmni
==============
*/

ParticleModuleInitLightOmni *__fastcall AllocPreload_ParticleModuleInitLightOmni()
{
  return ?AllocPreload_ParticleModuleInitLightOmni@@YAPEAUParticleModuleInitLightOmni@@XZ();
}

/*
==============
AllocPreload_ParticleModuleTestTimeInState
==============
*/

ParticleModuleTestTimeInState *__fastcall AllocPreload_ParticleModuleTestTimeInState()
{
  return ?AllocPreload_ParticleModuleTestTimeInState@@YAPEAUParticleModuleTestTimeInState@@XZ();
}

/*
==============
Preload_ParticleSpawnMeshAssetDefStream
==============
*/

void __fastcall Preload_ParticleSpawnMeshAssetDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleSpawnMeshAssetDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleRotationGraphArray
==============
*/

int __fastcall Mark_ParticleModuleRotationGraphArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleRotationGraphArray@@YAH_K@Z(count);
}

/*
==============
Load_ParticleModuleSizeLerp
==============
*/

void __fastcall Load_ParticleModuleSizeLerp(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleSizeLerp@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleModifier
==============
*/

int __fastcall Mark_ParticleModifier()
{
  return ?Mark_ParticleModifier@@YAHXZ();
}

/*
==============
Load_ParticleModuleInitGeoTrail
==============
*/

void __fastcall Load_ParticleModuleInitGeoTrail(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleInitGeoTrail@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleModuleRotationGraph3DArray
==============
*/

void __fastcall Load_ParticleModuleRotationGraph3DArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleRotationGraph3DArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleDef
==============
*/

void __fastcall Postload_ParticleModuleDef(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleUseScaleOptionsStream
==============
*/

void __fastcall Load_ParticleUseScaleOptionsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleUseScaleOptionsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleInitTailArray
==============
*/

void __fastcall Postload_ParticleModuleInitTailArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitTailArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleForceStream
==============
*/

void __fastcall Preload_ParticleModuleForceStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleForceStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ParticleGravityOptions
==============
*/

ParticleGravityOptions *__fastcall AllocPostload_ParticleGravityOptions()
{
  return ?AllocPostload_ParticleGravityOptions@@YAPEAW4ParticleGravityOptions@@XZ();
}

/*
==============
Preload_ParticleRelativeVelocityTypeArray
==============
*/

void __fastcall Preload_ParticleRelativeVelocityTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleRelativeVelocityTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ParticleModuleTestAge
==============
*/

ParticleModuleTestAge *__fastcall AllocLoad_ParticleModuleTestAge()
{
  return ?AllocLoad_ParticleModuleTestAge@@YAPEAUParticleModuleTestAge@@XZ();
}

/*
==============
Preload_ParticleModuleInitPlayerFacingArray
==============
*/

void __fastcall Preload_ParticleModuleInitPlayerFacingArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitPlayerFacingArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ParticleModifier
==============
*/

ParticleModifier *__fastcall AllocLoad_ParticleModifier()
{
  return ?AllocLoad_ParticleModifier@@YAPEAUParticleModifier@@XZ();
}

/*
==============
Preload_ParticleModuleParentVelocityGraphStream
==============
*/

void __fastcall Preload_ParticleModuleParentVelocityGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleParentVelocityGraphStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitSpawnArray
==============
*/

void __fastcall Load_ParticleModuleInitSpawnArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitSpawnArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitMirrorTexture
==============
*/

void Load_ProcessStructLayout_ParticleModuleInitMirrorTexture(void)
{
  ?Load_ProcessStructLayout_ParticleModuleInitMirrorTexture@@YAXXZ();
}

/*
==============
Preload_ParticleModuleInitAttributesArray
==============
*/

void __fastcall Preload_ParticleModuleInitAttributesArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitAttributesArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleRelativeVelocityType
==============
*/

int __fastcall Mark_ParticleRelativeVelocityType()
{
  return ?Mark_ParticleRelativeVelocityType@@YAHXZ();
}

/*
==============
Postload_Particle_MaterialDataStream
==============
*/

void __fastcall Postload_Particle_MaterialDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_Particle_MaterialDataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleGravityState
==============
*/

void __fastcall Load_ParticleGravityState(const DBStreamStart streamStart)
{
  ?Load_ParticleGravityState@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ParticleModuleInitParticleSim
==============
*/

ParticleModuleInitParticleSim *__fastcall AllocLoad_ParticleModuleInitParticleSim()
{
  return ?AllocLoad_ParticleModuleInitParticleSim@@YAPEAUParticleModuleInitParticleSim@@XZ();
}

/*
==============
AllocPreload_ParticleModuleForce
==============
*/

ParticleModuleForce *__fastcall AllocPreload_ParticleModuleForce()
{
  return ?AllocPreload_ParticleModuleForce@@YAPEAUParticleModuleForce@@XZ();
}

/*
==============
Postload_ParticleModulePhysicsLightStream
==============
*/

void __fastcall Postload_ParticleModulePhysicsLightStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModulePhysicsLightStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleMirrorTextureType
==============
*/

void __fastcall Preload_ParticleMirrorTextureType(const DBStreamStart streamStart)
{
  ?Preload_ParticleMirrorTextureType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ParticleEmitterDefFlags
==============
*/

unsigned int *__fastcall AllocLoad_ParticleEmitterDefFlags()
{
  return ?AllocLoad_ParticleEmitterDefFlags@@YAPEAIXZ();
}

/*
==============
Load_ParticleModuleTestImpact
==============
*/

void __fastcall Load_ParticleModuleTestImpact(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleTestImpact@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ParticleInstancePoolAction
==============
*/

ParticleInstancePoolAction *__fastcall AllocPreload_ParticleInstancePoolAction()
{
  return ?AllocPreload_ParticleInstancePoolAction@@YAPEAW4ParticleInstancePoolAction@@XZ();
}

/*
==============
Preload_ParticleCurveDefArray
==============
*/

void __fastcall Preload_ParticleCurveDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleCurveDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleGravityOptions
==============
*/

int __fastcall Mark_ParticleGravityOptions()
{
  return ?Mark_ParticleGravityOptions@@YAHXZ();
}

/*
==============
Postload_ParticleModuleInitLightSpotStream
==============
*/

void __fastcall Postload_ParticleModuleInitLightSpotStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitLightSpotStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ParticleModuleInitCameraOffset
==============
*/

ParticleModuleInitCameraOffset *__fastcall AllocPreload_ParticleModuleInitCameraOffset()
{
  return ?AllocPreload_ParticleModuleInitCameraOffset@@YAPEAUParticleModuleInitCameraOffset@@XZ();
}

/*
==============
Mark_ParticleModuleRotationGraph3D
==============
*/

int __fastcall Mark_ParticleModuleRotationGraph3D()
{
  return ?Mark_ParticleModuleRotationGraph3D@@YAHXZ();
}

/*
==============
Preload_ParticleImpactDirection
==============
*/

void __fastcall Preload_ParticleImpactDirection(const DBStreamStart streamStart)
{
  ?Preload_ParticleImpactDirection@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_ParticleSystemDefRef
==============
*/

ParticleSystemDefRef *__fastcall AllocPostload_ParticleSystemDefRef()
{
  return ?AllocPostload_ParticleSystemDefRef@@YAPEATParticleSystemDefRef@@XZ();
}

/*
==============
Preload_ParticleCurveDef
==============
*/

void __fastcall Preload_ParticleCurveDef(const DBStreamStart streamStart)
{
  ?Preload_ParticleCurveDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleMirrorTextureTypeStream
==============
*/

void __fastcall Preload_ParticleMirrorTextureTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleMirrorTextureTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleInitSpawn
==============
*/

void __fastcall Preload_ParticleModuleInitSpawn(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleInitSpawn@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleModuleEmissiveGraph
==============
*/

void __fastcall Load_ParticleModuleEmissiveGraph(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleEmissiveGraph@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ParticleLinkedAssetListDef
==============
*/

ParticleLinkedAssetListDef *__fastcall AllocPreload_ParticleLinkedAssetListDef()
{
  return ?AllocPreload_ParticleLinkedAssetListDef@@YAPEAUParticleLinkedAssetListDef@@XZ();
}

/*
==============
Load_ParticlePhaseOptionsStream
==============
*/

void __fastcall Load_ParticlePhaseOptionsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticlePhaseOptionsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleForceDragGraph
==============
*/

void Load_ProcessStructLayout_ParticleModuleForceDragGraph(void)
{
  ?Load_ProcessStructLayout_ParticleModuleForceDragGraph@@YAXXZ();
}

/*
==============
Preload_ParticlePhaseOptionsArray
==============
*/

void __fastcall Preload_ParticlePhaseOptionsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticlePhaseOptionsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ParticleGravityOptions
==============
*/

ParticleGravityOptions *__fastcall AllocLoad_ParticleGravityOptions()
{
  return ?AllocLoad_ParticleGravityOptions@@YAPEAW4ParticleGravityOptions@@XZ();
}

/*
==============
Postload_ParticleModifier
==============
*/

void __fastcall Postload_ParticleModifier(const DBStreamStart streamStart)
{
  ?Postload_ParticleModifier@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_ParticleEmitterDefFlags
==============
*/

unsigned int *__fastcall AllocPostload_ParticleEmitterDefFlags()
{
  return ?AllocPostload_ParticleEmitterDefFlags@@YAPEAIXZ();
}

/*
==============
Load_ProcessStructLayout_ParticleModuleAxesFlags
==============
*/

void Load_ProcessStructLayout_ParticleModuleAxesFlags(void)
{
  ?Load_ProcessStructLayout_ParticleModuleAxesFlags@@YAXXZ();
}

/*
==============
Postload_ParticleModuleInitRotation
==============
*/

void __fastcall Postload_ParticleModuleInitRotation(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleInitRotation@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ParticleModuleSizeLerp
==============
*/

ParticleModuleSizeLerp *__fastcall AllocPreload_ParticleModuleSizeLerp()
{
  return ?AllocPreload_ParticleModuleSizeLerp@@YAPEAUParticleModuleSizeLerp@@XZ();
}

/*
==============
Preload_ParticleModuleShaderGraph
==============
*/

void __fastcall Preload_ParticleModuleShaderGraph(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleShaderGraph@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleEmissiveCurves
==============
*/

void __fastcall Load_ParticleEmissiveCurves(const DBStreamStart streamStart)
{
  ?Load_ParticleEmissiveCurves@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleModuleTestDeathArray
==============
*/

void __fastcall Load_ParticleModuleTestDeathArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleTestDeathArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleInitAttributesArray
==============
*/

void __fastcall Postload_ParticleModuleInitAttributesArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitAttributesArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleAxisStream
==============
*/

void __fastcall Preload_ParticleModuleAxisStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleAxisStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleElementTypeArray
==============
*/

void __fastcall Postload_ParticleElementTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleElementTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleVelocityGraphArray
==============
*/

void __fastcall Postload_ParticleModuleVelocityGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleVelocityGraphArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitSpawnShapeEllipsoidArray
==============
*/

void __fastcall Load_ParticleModuleInitSpawnShapeEllipsoidArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitSpawnShapeEllipsoidArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleInitSpawnShapeSphereArray
==============
*/

void __fastcall Postload_ParticleModuleInitSpawnShapeSphereArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitSpawnShapeSphereArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleStateDefArray
==============
*/

void __fastcall Load_ParticleStateDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleStateDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleInitSpawnShapeBox
==============
*/

void __fastcall Preload_ParticleModuleInitSpawnShapeBox(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleInitSpawnShapeBox@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleModuleInitCameraOffset
==============
*/

void __fastcall Postload_ParticleModuleInitCameraOffset(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleInitCameraOffset@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleModuleGravity
==============
*/

void __fastcall Preload_ParticleModuleGravity(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleGravity@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleModuleDefArray
==============
*/

void __fastcall Postload_ParticleModuleDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleElementTypeArray
==============
*/

int __fastcall Mark_ParticleElementTypeArray(const unsigned __int64 count)
{
  return ?Mark_ParticleElementTypeArray@@YAH_K@Z(count);
}

/*
==============
Load_ParticleModuleInitMirrorTextureArray
==============
*/

void __fastcall Load_ParticleModuleInitMirrorTextureArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitMirrorTextureArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_FxMarkProjectionAxis
==============
*/

void __fastcall Postload_FxMarkProjectionAxis(const DBStreamStart streamStart)
{
  ?Postload_FxMarkProjectionAxis@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleModuleInitSpawnArray
==============
*/

int __fastcall Mark_ParticleModuleInitSpawnArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleInitSpawnArray@@YAH_K@Z(count);
}

/*
==============
Postload_ParticleModifierArray
==============
*/

void __fastcall Postload_ParticleModifierArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModifierArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleShaderGraphCurves
==============
*/

void __fastcall Load_ParticleShaderGraphCurves(const DBStreamStart streamStart)
{
  ?Load_ParticleShaderGraphCurves@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleInstancePoolActionStream
==============
*/

void __fastcall Postload_ParticleInstancePoolActionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleInstancePoolActionStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleShaderGraphCurves
==============
*/

int __fastcall Mark_ParticleShaderGraphCurves()
{
  return ?Mark_ParticleShaderGraphCurves@@YAHXZ();
}

/*
==============
Load_ParticleModuleScaleByDistanceStream
==============
*/

void __fastcall Load_ParticleModuleScaleByDistanceStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleScaleByDistanceStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleTestBirthStream
==============
*/

void __fastcall Load_ParticleModuleTestBirthStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleTestBirthStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleTestDeathArray
==============
*/

void __fastcall Postload_ParticleModuleTestDeathArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleTestDeathArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModulePhysicsRayCastArray
==============
*/

int __fastcall Mark_ParticleModulePhysicsRayCastArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModulePhysicsRayCastArray@@YAH_K@Z(count);
}

/*
==============
Mark_ParticleModuleInitOrientedSprite
==============
*/

int __fastcall Mark_ParticleModuleInitOrientedSprite()
{
  return ?Mark_ParticleModuleInitOrientedSprite@@YAHXZ();
}

/*
==============
Load_ParticleStateDef
==============
*/

void __fastcall Load_ParticleStateDef(const DBStreamStart streamStart)
{
  ?Load_ParticleStateDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleModuleTestTimeInState
==============
*/

void __fastcall Postload_ParticleModuleTestTimeInState(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleTestTimeInState@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleModuleInitGeoTrailArray
==============
*/

void __fastcall Preload_ParticleModuleInitGeoTrailArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitGeoTrailArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleInstancePoolType
==============
*/

void __fastcall Load_ParticleInstancePoolType(const DBStreamStart streamStart)
{
  ?Load_ParticleInstancePoolType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleModuleInitDismemberArray
==============
*/

int __fastcall Mark_ParticleModuleInitDismemberArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleInitDismemberArray@@YAH_K@Z(count);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitKillWrapBox
==============
*/

void Load_ProcessStructLayout_ParticleModuleInitKillWrapBox(void)
{
  ?Load_ProcessStructLayout_ParticleModuleInitKillWrapBox@@YAXXZ();
}

/*
==============
Preload_ParticleModuleAttractor
==============
*/

void __fastcall Preload_ParticleModuleAttractor(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleAttractor@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleCurveDefStream
==============
*/

void __fastcall Preload_ParticleCurveDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleCurveDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleInitGeoTrail
==============
*/

int __fastcall Mark_ParticleModuleInitGeoTrail()
{
  return ?Mark_ParticleModuleInitGeoTrail@@YAHXZ();
}

/*
==============
Postload_ParticleEmitterDef
==============
*/

void __fastcall Postload_ParticleEmitterDef(const DBStreamStart streamStart)
{
  ?Postload_ParticleEmitterDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_ParticleMarkVisuals
==============
*/

ParticleMarkVisuals *__fastcall AllocPostload_ParticleMarkVisuals()
{
  return ?AllocPostload_ParticleMarkVisuals@@YAPEAUParticleMarkVisuals@@XZ();
}

/*
==============
Postload_ParticleEmitterDefFlags
==============
*/

void __fastcall Postload_ParticleEmitterDefFlags(const DBStreamStart streamStart)
{
  ?Postload_ParticleEmitterDefFlags@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleModuleEmissiveGraphArray
==============
*/

void __fastcall Preload_ParticleModuleEmissiveGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleEmissiveGraphArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleLinkedAssetDef
==============
*/

void __fastcall Preload_ParticleLinkedAssetDef(const DBStreamStart streamStart)
{
  ?Preload_ParticleLinkedAssetDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleModuleGroupDefArray
==============
*/

void __fastcall Preload_ParticleModuleGroupDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleGroupDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleForceDragGraph
==============
*/

void __fastcall Load_ParticleModuleForceDragGraph(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleForceDragGraph@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_ParticleInstancePoolAction
==============
*/

void Load_ProcessStructLayout_ParticleInstancePoolAction(void)
{
  ?Load_ProcessStructLayout_ParticleInstancePoolAction@@YAXXZ();
}

/*
==============
Postload_ParticleModuleInitMirrorTexture
==============
*/

void __fastcall Postload_ParticleModuleInitMirrorTexture(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleInitMirrorTexture@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleModuleTestDeathStream
==============
*/

void __fastcall Preload_ParticleModuleTestDeathStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleTestDeathStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleInstancePoolActionArray
==============
*/

int __fastcall Mark_ParticleInstancePoolActionArray(const unsigned __int64 count)
{
  return ?Mark_ParticleInstancePoolActionArray@@YAH_K@Z(count);
}

/*
==============
Load_ParticleModuleInitVectorFieldStream
==============
*/

void __fastcall Load_ParticleModuleInitVectorFieldStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitVectorFieldStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleColorGraphArray
==============
*/

void __fastcall Load_ParticleModuleColorGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleColorGraphArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleInitVolumetric
==============
*/

int __fastcall Mark_ParticleModuleInitVolumetric()
{
  return ?Mark_ParticleModuleInitVolumetric@@YAHXZ();
}

/*
==============
Postload_ParticleModuleInitLightOmniStream
==============
*/

void __fastcall Postload_ParticleModuleInitLightOmniStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitLightOmniStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleInitLightSpot
==============
*/

int __fastcall Mark_ParticleModuleInitLightSpot()
{
  return ?Mark_ParticleModuleInitLightSpot@@YAHXZ();
}

/*
==============
Preload_ParticleSystemDefPtrStream
==============
*/

void __fastcall Preload_ParticleSystemDefPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleSystemDefPtrStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitLightSpot
==============
*/

void Load_ProcessStructLayout_ParticleModuleInitLightSpot(void)
{
  ?Load_ProcessStructLayout_ParticleModuleInitLightSpot@@YAXXZ();
}

/*
==============
Load_ParticleModuleSizeLerpArray
==============
*/

void __fastcall Load_ParticleModuleSizeLerpArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleSizeLerpArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ParticleModuleInitFlare
==============
*/

ParticleModuleInitFlare *__fastcall AllocPostload_ParticleModuleInitFlare()
{
  return ?AllocPostload_ParticleModuleInitFlare@@YAPEAUParticleModuleInitFlare@@XZ();
}

/*
==============
Postload_ParticleGravityStateStream
==============
*/

void __fastcall Postload_ParticleGravityStateStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleGravityStateStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleFloatRange
==============
*/

int __fastcall Mark_ParticleFloatRange()
{
  return ?Mark_ParticleFloatRange@@YAHXZ();
}

/*
==============
AllocPreload_ParticleRenderOptions
==============
*/

ParticleRenderOptions *__fastcall AllocPreload_ParticleRenderOptions()
{
  return ?AllocPreload_ParticleRenderOptions@@YAPEAW4ParticleRenderOptions@@XZ();
}

/*
==============
Mark_ParticleSpawnMeshAssetDef
==============
*/

int __fastcall Mark_ParticleSpawnMeshAssetDef()
{
  return ?Mark_ParticleSpawnMeshAssetDef@@YAHXZ();
}

/*
==============
Postload_ParticleUseVelocityOptionsStream
==============
*/

void __fastcall Postload_ParticleUseVelocityOptionsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleUseVelocityOptionsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleInitGeoTrail
==============
*/

void __fastcall Preload_ParticleModuleInitGeoTrail(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleInitGeoTrail@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ParticleUseOrientationOptions
==============
*/

ParticleUseOrientationOptions *__fastcall AllocPreload_ParticleUseOrientationOptions()
{
  return ?AllocPreload_ParticleUseOrientationOptions@@YAPEAW4ParticleUseOrientationOptions@@XZ();
}

/*
==============
Postload_ParticleModuleInitGeoTrailArray
==============
*/

void __fastcall Postload_ParticleModuleInitGeoTrailArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitGeoTrailArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleUseScaleOptions
==============
*/

int __fastcall Mark_ParticleUseScaleOptions()
{
  return ?Mark_ParticleUseScaleOptions@@YAHXZ();
}

/*
==============
Load_ParticleModuleInitAtlas
==============
*/

void __fastcall Load_ParticleModuleInitAtlas(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleInitAtlas@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleModuleTestEventHandlerData
==============
*/

int __fastcall Mark_ParticleModuleTestEventHandlerData()
{
  return ?Mark_ParticleModuleTestEventHandlerData@@YAHXZ();
}

/*
==============
Load_ProcessStructLayout_ParticleGravityState
==============
*/

void Load_ProcessStructLayout_ParticleGravityState(void)
{
  ?Load_ProcessStructLayout_ParticleGravityState@@YAXXZ();
}

/*
==============
Mark_ParticleModuleInitSpawnShapeCylinderArray
==============
*/

int __fastcall Mark_ParticleModuleInitSpawnShapeCylinderArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleInitSpawnShapeCylinderArray@@YAH_K@Z(count);
}

/*
==============
Postload_ParticleModuleInitDismember
==============
*/

void __fastcall Postload_ParticleModuleInitDismember(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleInitDismember@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleModuleInitOrientedSpriteStream
==============
*/

void __fastcall Load_ParticleModuleInitOrientedSpriteStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitOrientedSpriteStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleStateDefFlags
==============
*/

void __fastcall Load_ParticleStateDefFlags(const DBStreamStart streamStart)
{
  ?Load_ParticleStateDefFlags@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleModifier
==============
*/

void __fastcall Load_ParticleModifier(const DBStreamStart streamStart)
{
  ?Load_ParticleModifier@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_Particle_MaterialData
==============
*/

int __fastcall Mark_Particle_MaterialData()
{
  return ?Mark_Particle_MaterialData@@YAHXZ();
}

/*
==============
AllocPreload_ParticleUseVelocityOptions
==============
*/

ParticleUseVelocityOptions *__fastcall AllocPreload_ParticleUseVelocityOptions()
{
  return ?AllocPreload_ParticleUseVelocityOptions@@YAPEAW4ParticleUseVelocityOptions@@XZ();
}

/*
==============
Preload_ParticleModuleInitCloud
==============
*/

void __fastcall Preload_ParticleModuleInitCloud(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleInitCloud@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleModuleGravityArray
==============
*/

int __fastcall Mark_ParticleModuleGravityArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleGravityArray@@YAH_K@Z(count);
}

/*
==============
Preload_ParticleCurveControlPointDef
==============
*/

void __fastcall Preload_ParticleCurveControlPointDef(const DBStreamStart streamStart)
{
  ?Preload_ParticleCurveControlPointDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ParticleModuleInitRelativeVelocity
==============
*/

ParticleModuleInitRelativeVelocity *__fastcall AllocPreload_ParticleModuleInitRelativeVelocity()
{
  return ?AllocPreload_ParticleModuleInitRelativeVelocity@@YAPEAUParticleModuleInitRelativeVelocity@@XZ();
}

/*
==============
Preload_ParticleUseScaleOptions
==============
*/

void __fastcall Preload_ParticleUseScaleOptions(const DBStreamStart streamStart)
{
  ?Preload_ParticleUseScaleOptions@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitBeam
==============
*/

void Load_ProcessStructLayout_ParticleModuleInitBeam(void)
{
  ?Load_ProcessStructLayout_ParticleModuleInitBeam@@YAXXZ();
}

/*
==============
Preload_ParticleSystemDefPtr
==============
*/

void __fastcall Preload_ParticleSystemDefPtr(const DBStreamStart streamStart)
{
  ?Preload_ParticleSystemDefPtr@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleModuleParentVelocityGraph
==============
*/

int __fastcall Mark_ParticleModuleParentVelocityGraph()
{
  return ?Mark_ParticleModuleParentVelocityGraph@@YAHXZ();
}

/*
==============
Preload_Particle_MaterialDataStream
==============
*/

void __fastcall Preload_Particle_MaterialDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_Particle_MaterialDataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ParticleModuleRotationGraph
==============
*/

ParticleModuleRotationGraph *__fastcall AllocPreload_ParticleModuleRotationGraph()
{
  return ?AllocPreload_ParticleModuleRotationGraph@@YAPEAUParticleModuleRotationGraph@@XZ();
}

/*
==============
Preload_ParticlePhaseOptions
==============
*/

void __fastcall Preload_ParticlePhaseOptions(const DBStreamStart streamStart)
{
  ?Preload_ParticlePhaseOptions@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleEmitterDefFlagsStream
==============
*/

void __fastcall Postload_ParticleEmitterDefFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleEmitterDefFlagsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleCurveDef
==============
*/

void __fastcall Load_ParticleCurveDef(const DBStreamStart streamStart)
{
  ?Load_ParticleCurveDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ParticleModuleForceDragGraph
==============
*/

ParticleModuleForceDragGraph *__fastcall AllocLoad_ParticleModuleForceDragGraph()
{
  return ?AllocLoad_ParticleModuleForceDragGraph@@YAPEAUParticleModuleForceDragGraph@@XZ();
}

/*
==============
Load_ProcessStructLayout_ParticleCurveDef
==============
*/

void Load_ProcessStructLayout_ParticleCurveDef(void)
{
  ?Load_ProcessStructLayout_ParticleCurveDef@@YAXXZ();
}

/*
==============
Preload_ParticleModuleInitModelArray
==============
*/

void __fastcall Preload_ParticleModuleInitModelArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitModelArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleInitRotation3DArray
==============
*/

void __fastcall Postload_ParticleModuleInitRotation3DArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitRotation3DArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleAxesFlagsArray
==============
*/

void __fastcall Load_ParticleModuleAxesFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleAxesFlagsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleRotationGraph3DStream
==============
*/

void __fastcall Postload_ParticleModuleRotationGraph3DStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleRotationGraph3DStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleAttractorArray
==============
*/

void __fastcall Load_ParticleModuleAttractorArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleAttractorArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticlePhysicsFXDataArray
==============
*/

void __fastcall Load_ParticlePhysicsFXDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticlePhysicsFXDataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleIntRangeArray
==============
*/

void __fastcall Load_ParticleIntRangeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleIntRangeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleFlagsStream
==============
*/

void __fastcall Preload_ParticleModuleFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleFlagsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitRunnerStream
==============
*/

void __fastcall Load_ParticleModuleInitRunnerStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitRunnerStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleInitParticleSim
==============
*/

int __fastcall Mark_ParticleModuleInitParticleSim()
{
  return ?Mark_ParticleModuleInitParticleSim@@YAHXZ();
}

/*
==============
Mark_ParticleModuleInitTail
==============
*/

int __fastcall Mark_ParticleModuleInitTail()
{
  return ?Mark_ParticleModuleInitTail@@YAHXZ();
}

/*
==============
AllocPreload_ParticleModuleInitFlare
==============
*/

ParticleModuleInitFlare *__fastcall AllocPreload_ParticleModuleInitFlare()
{
  return ?AllocPreload_ParticleModuleInitFlare@@YAPEAUParticleModuleInitFlare@@XZ();
}

/*
==============
AllocPreload_ParticleModuleTestEventHandlerData
==============
*/

ParticleModuleTestEventHandlerData *__fastcall AllocPreload_ParticleModuleTestEventHandlerData()
{
  return ?AllocPreload_ParticleModuleTestEventHandlerData@@YAPEAUParticleModuleTestEventHandlerData@@XZ();
}

/*
==============
Load_ParticleModuleInitSpawnShapeSphere
==============
*/

void __fastcall Load_ParticleModuleInitSpawnShapeSphere(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleInitSpawnShapeSphere@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleIntRangeArray
==============
*/

void __fastcall Postload_ParticleIntRangeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleIntRangeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleIntensityGraphArray
==============
*/

void __fastcall Load_ParticleModuleIntensityGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleIntensityGraphArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ParticleModulePositionGraph
==============
*/

ParticleModulePositionGraph *__fastcall AllocPreload_ParticleModulePositionGraph()
{
  return ?AllocPreload_ParticleModulePositionGraph@@YAPEAUParticleModulePositionGraph@@XZ();
}

/*
==============
Preload_ParticleModuleInitRotationStream
==============
*/

void __fastcall Preload_ParticleModuleInitRotationStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitRotationStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleEmitterDefFlagsStream
==============
*/

void __fastcall Preload_ParticleEmitterDefFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleEmitterDefFlagsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ParticleModuleInitBeam
==============
*/

ParticleModuleInitBeam *__fastcall AllocPostload_ParticleModuleInitBeam()
{
  return ?AllocPostload_ParticleModuleInitBeam@@YAPEAUParticleModuleInitBeam@@XZ();
}

/*
==============
Mark_ParticlePhaseOptionsArray
==============
*/

int __fastcall Mark_ParticlePhaseOptionsArray(const unsigned __int64 count)
{
  return ?Mark_ParticlePhaseOptionsArray@@YAH_K@Z(count);
}

/*
==============
Preload_ParticleSpawnMeshAssetDef
==============
*/

void __fastcall Preload_ParticleSpawnMeshAssetDef(const DBStreamStart streamStart)
{
  ?Preload_ParticleSpawnMeshAssetDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ParticleModuleShaderGraph
==============
*/

ParticleModuleShaderGraph *__fastcall AllocLoad_ParticleModuleShaderGraph()
{
  return ?AllocLoad_ParticleModuleShaderGraph@@YAPEAUParticleModuleShaderGraph@@XZ();
}

/*
==============
Preload_ParticleModuleInitKillWrapBox
==============
*/

void __fastcall Preload_ParticleModuleInitKillWrapBox(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleInitKillWrapBox@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleSystemDefRefArray
==============
*/

void __fastcall Load_ParticleSystemDefRefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleSystemDefRefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleInitFlareStream
==============
*/

void __fastcall Preload_ParticleModuleInitFlareStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitFlareStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleInitRelativeVelocityStream
==============
*/

void __fastcall Preload_ParticleModuleInitRelativeVelocityStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitRelativeVelocityStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ParticleSystemDef
==============
*/

ParticleSystemDef *__fastcall AllocPreload_ParticleSystemDef()
{
  return ?AllocPreload_ParticleSystemDef@@YAPEAUParticleSystemDef@@XZ();
}

/*
==============
Preload_ParticleSystemDefRef
==============
*/

void __fastcall Preload_ParticleSystemDefRef(const DBStreamStart streamStart)
{
  ?Preload_ParticleSystemDefRef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ParticleSystemDefFlags
==============
*/

unsigned int *__fastcall AllocPreload_ParticleSystemDefFlags()
{
  return ?AllocPreload_ParticleSystemDefFlags@@YAPEAIXZ();
}

/*
==============
Postload_ParticleModuleTypeStream
==============
*/

void __fastcall Postload_ParticleModuleTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleDef
==============
*/

void __fastcall Preload_ParticleModuleDef(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleUseVelocityOptionsArray
==============
*/

void __fastcall Preload_ParticleUseVelocityOptionsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleUseVelocityOptionsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleInstancePoolTypeArray
==============
*/

void __fastcall Preload_ParticleInstancePoolTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleInstancePoolTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ParticleModuleTestTimeInState
==============
*/

ParticleModuleTestTimeInState *__fastcall AllocLoad_ParticleModuleTestTimeInState()
{
  return ?AllocLoad_ParticleModuleTestTimeInState@@YAPEAUParticleModuleTestTimeInState@@XZ();
}

/*
==============
Preload_ParticleModifierStream
==============
*/

void __fastcall Preload_ParticleModifierStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModifierStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleMirrorTextureTypeArray
==============
*/

int __fastcall Mark_ParticleMirrorTextureTypeArray(const unsigned __int64 count)
{
  return ?Mark_ParticleMirrorTextureTypeArray@@YAH_K@Z(count);
}

/*
==============
AllocPostload_ParticleModuleInitGeoTrail
==============
*/

ParticleModuleInitGeoTrail *__fastcall AllocPostload_ParticleModuleInitGeoTrail()
{
  return ?AllocPostload_ParticleModuleInitGeoTrail@@YAPEAUParticleModuleInitGeoTrail@@XZ();
}

/*
==============
AllocPostload_ParticleModuleInitRunner
==============
*/

ParticleModuleInitRunner *__fastcall AllocPostload_ParticleModuleInitRunner()
{
  return ?AllocPostload_ParticleModuleInitRunner@@YAPEAUParticleModuleInitRunner@@XZ();
}

/*
==============
Preload_ParticleModuleInitVectorFieldArray
==============
*/

void __fastcall Preload_ParticleModuleInitVectorFieldArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitVectorFieldArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleVelocityGraphArray
==============
*/

int __fastcall Mark_ParticleModuleVelocityGraphArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleVelocityGraphArray@@YAH_K@Z(count);
}

/*
==============
AllocLoad_ParticleModuleInitFlare
==============
*/

ParticleModuleInitFlare *__fastcall AllocLoad_ParticleModuleInitFlare()
{
  return ?AllocLoad_ParticleModuleInitFlare@@YAPEAUParticleModuleInitFlare@@XZ();
}

/*
==============
AllocPostload_ParticleModuleEmissionGraph
==============
*/

ParticleModuleEmissionGraph *__fastcall AllocPostload_ParticleModuleEmissionGraph()
{
  return ?AllocPostload_ParticleModuleEmissionGraph@@YAPEAUParticleModuleEmissionGraph@@XZ();
}

/*
==============
AllocLoad_ParticleModuleVectorFieldGraph
==============
*/

ParticleModuleVectorFieldGraph *__fastcall AllocLoad_ParticleModuleVectorFieldGraph()
{
  return ?AllocLoad_ParticleModuleVectorFieldGraph@@YAPEAUParticleModuleVectorFieldGraph@@XZ();
}

/*
==============
Mark_ParticleIntRange
==============
*/

int __fastcall Mark_ParticleIntRange()
{
  return ?Mark_ParticleIntRange@@YAHXZ();
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitCameraOffset
==============
*/

void Load_ProcessStructLayout_ParticleModuleInitCameraOffset(void)
{
  ?Load_ProcessStructLayout_ParticleModuleInitCameraOffset@@YAXXZ();
}

/*
==============
Preload_ParticleModuleSizeLerpArray
==============
*/

void __fastcall Preload_ParticleModuleSizeLerpArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleSizeLerpArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ParticleSystemDefRef
==============
*/

ParticleSystemDefRef *__fastcall AllocPreload_ParticleSystemDefRef()
{
  return ?AllocPreload_ParticleSystemDefRef@@YAPEATParticleSystemDefRef@@XZ();
}

/*
==============
Load_ProcessStructLayout_ParticleMarkVisuals
==============
*/

void Load_ProcessStructLayout_ParticleMarkVisuals(void)
{
  ?Load_ProcessStructLayout_ParticleMarkVisuals@@YAXXZ();
}

/*
==============
Preload_ParticleEmissiveVersionCurvesArray
==============
*/

void __fastcall Preload_ParticleEmissiveVersionCurvesArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleEmissiveVersionCurvesArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleGroupDefStream
==============
*/

void __fastcall Preload_ParticleModuleGroupDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleGroupDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleDataFlags
==============
*/

void __fastcall Postload_ParticleDataFlags(const DBStreamStart streamStart)
{
  ?Postload_ParticleDataFlags@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticlePhaseOptionsArray
==============
*/

void __fastcall Load_ParticlePhaseOptionsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticlePhaseOptionsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleShaderGraphCurvesArray
==============
*/

void __fastcall Postload_ParticleShaderGraphCurvesArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleShaderGraphCurvesArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitBeamArray
==============
*/

void __fastcall Load_ParticleModuleInitBeamArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitBeamArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleGravityOptionsStream
==============
*/

void __fastcall Postload_ParticleGravityOptionsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleGravityOptionsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleInitRunner
==============
*/

int __fastcall Mark_ParticleModuleInitRunner()
{
  return ?Mark_ParticleModuleInitRunner@@YAHXZ();
}

/*
==============
Load_ParticleDataFlagsStream
==============
*/

void __fastcall Load_ParticleDataFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleDataFlagsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleFlags
==============
*/

int __fastcall Mark_ParticleModuleFlags()
{
  return ?Mark_ParticleModuleFlags@@YAHXZ();
}

/*
==============
Mark_ParticleModuleInitMaterial
==============
*/

int __fastcall Mark_ParticleModuleInitMaterial()
{
  return ?Mark_ParticleModuleInitMaterial@@YAHXZ();
}

/*
==============
Preload_ParticleModulePhysicsLight
==============
*/

void __fastcall Preload_ParticleModulePhysicsLight(const DBStreamStart streamStart)
{
  ?Preload_ParticleModulePhysicsLight@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitPlayerFacing
==============
*/

void Load_ProcessStructLayout_ParticleModuleInitPlayerFacing(void)
{
  ?Load_ProcessStructLayout_ParticleModuleInitPlayerFacing@@YAXXZ();
}

/*
==============
Postload_ParticleSystemDefFlagsArray
==============
*/

void __fastcall Postload_ParticleSystemDefFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleSystemDefFlagsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleEmissiveCurvesStream
==============
*/

void __fastcall Load_ParticleEmissiveCurvesStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleEmissiveCurvesStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleSpawnFlagsArray
==============
*/

int __fastcall Mark_ParticleSpawnFlagsArray(const unsigned __int64 count)
{
  return ?Mark_ParticleSpawnFlagsArray@@YAH_K@Z(count);
}

/*
==============
Load_ParticleSpawnShapeTypeStream
==============
*/

void __fastcall Load_ParticleSpawnShapeTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleSpawnShapeTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleInitCameraOffsetArray
==============
*/

void __fastcall Postload_ParticleModuleInitCameraOffsetArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitCameraOffsetArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ParticleModuleParentVelocityGraph
==============
*/

ParticleModuleParentVelocityGraph *__fastcall AllocLoad_ParticleModuleParentVelocityGraph()
{
  return ?AllocLoad_ParticleModuleParentVelocityGraph@@YAPEAUParticleModuleParentVelocityGraph@@XZ();
}

/*
==============
Mark_ParticleModuleDef
==============
*/

int __fastcall Mark_ParticleModuleDef()
{
  return ?Mark_ParticleModuleDef@@YAHXZ();
}

/*
==============
Load_ProcessStructLayout_ParticleRelativeVelocityType
==============
*/

void Load_ProcessStructLayout_ParticleRelativeVelocityType(void)
{
  ?Load_ProcessStructLayout_ParticleRelativeVelocityType@@YAXXZ();
}

/*
==============
Preload_ParticleModuleTestBirthArray
==============
*/

void __fastcall Preload_ParticleModuleTestBirthArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleTestBirthArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleTestImpactArray
==============
*/

void __fastcall Preload_ParticleModuleTestImpactArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleTestImpactArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleTestImpact
==============
*/

void Load_ProcessStructLayout_ParticleModuleTestImpact(void)
{
  ?Load_ProcessStructLayout_ParticleModuleTestImpact@@YAXXZ();
}

/*
==============
Load_ParticleModuleAttractor
==============
*/

void __fastcall Load_ParticleModuleAttractor(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleAttractor@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleModuleInitRotation3DStream
==============
*/

void __fastcall Preload_ParticleModuleInitRotation3DStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitRotation3DStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleImpactDirection
==============
*/

void __fastcall Postload_ParticleImpactDirection(const DBStreamStart streamStart)
{
  ?Postload_ParticleImpactDirection@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ParticleModuleInitSound
==============
*/

ParticleModuleInitSound *__fastcall AllocLoad_ParticleModuleInitSound()
{
  return ?AllocLoad_ParticleModuleInitSound@@YAPEAUParticleModuleInitSound@@XZ();
}

/*
==============
Mark_ParticleUseOrientationOptionsArray
==============
*/

int __fastcall Mark_ParticleUseOrientationOptionsArray(const unsigned __int64 count)
{
  return ?Mark_ParticleUseOrientationOptionsArray@@YAH_K@Z(count);
}

/*
==============
Preload_ParticleModuleRotationGraph3D
==============
*/

void __fastcall Preload_ParticleModuleRotationGraph3D(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleRotationGraph3D@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleModuleInitBeam
==============
*/

int __fastcall Mark_ParticleModuleInitBeam()
{
  return ?Mark_ParticleModuleInitBeam@@YAHXZ();
}

/*
==============
Preload_ParticleModuleVectorFieldGraphStream
==============
*/

void __fastcall Preload_ParticleModuleVectorFieldGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleVectorFieldGraphStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ParticleElementType
==============
*/

unsigned int *__fastcall AllocLoad_ParticleElementType()
{
  return ?AllocLoad_ParticleElementType@@YAPEAIXZ();
}

/*
==============
AllocPostload_ParticleModuleColorGraph
==============
*/

ParticleModuleColorGraph *__fastcall AllocPostload_ParticleModuleColorGraph()
{
  return ?AllocPostload_ParticleModuleColorGraph@@YAPEAUParticleModuleColorGraph@@XZ();
}

/*
==============
Postload_ParticleSystemDefRefStream
==============
*/

void __fastcall Postload_ParticleSystemDefRefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleSystemDefRefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ParticleShaderGraphOptions
==============
*/

ParticleShaderGraphOptions *__fastcall AllocLoad_ParticleShaderGraphOptions()
{
  return ?AllocLoad_ParticleShaderGraphOptions@@YAPEAW4ParticleShaderGraphOptions@@XZ();
}

/*
==============
Postload_ParticlePhaseOptionsStream
==============
*/

void __fastcall Postload_ParticlePhaseOptionsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticlePhaseOptionsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleRotationGraphStream
==============
*/

void __fastcall Load_ParticleModuleRotationGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleRotationGraphStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ParticleModuleInitRotation
==============
*/

ParticleModuleInitRotation *__fastcall AllocLoad_ParticleModuleInitRotation()
{
  return ?AllocLoad_ParticleModuleInitRotation@@YAPEAUParticleModuleInitRotation@@XZ();
}

/*
==============
AllocPreload_ParticleModulePhysicsRayCast
==============
*/

ParticleModulePhysicsRayCast *__fastcall AllocPreload_ParticleModulePhysicsRayCast()
{
  return ?AllocPreload_ParticleModulePhysicsRayCast@@YAPEAUParticleModulePhysicsRayCast@@XZ();
}

/*
==============
Load_ParticleModuleColorLerpStream
==============
*/

void __fastcall Load_ParticleModuleColorLerpStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleColorLerpStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ParticleModuleInitLightOmni
==============
*/

ParticleModuleInitLightOmni *__fastcall AllocPostload_ParticleModuleInitLightOmni()
{
  return ?AllocPostload_ParticleModuleInitLightOmni@@YAPEAUParticleModuleInitLightOmni@@XZ();
}

/*
==============
AllocPreload_ParticleModuleInitTail
==============
*/

ParticleModuleInitTail *__fastcall AllocPreload_ParticleModuleInitTail()
{
  return ?AllocPreload_ParticleModuleInitTail@@YAPEAUParticleModuleInitTail@@XZ();
}

/*
==============
Preload_ParticleModuleTestEventHandlerDataStream
==============
*/

void __fastcall Preload_ParticleModuleTestEventHandlerDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleTestEventHandlerDataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_Particle_MaterialData
==============
*/

Particle_MaterialData *__fastcall AllocLoad_Particle_MaterialData()
{
  return ?AllocLoad_Particle_MaterialData@@YAPEAUParticle_MaterialData@@XZ();
}

/*
==============
AllocPostload_ParticleModuleInitAtlas
==============
*/

ParticleModuleInitAtlas *__fastcall AllocPostload_ParticleModuleInitAtlas()
{
  return ?AllocPostload_ParticleModuleInitAtlas@@YAPEAUParticleModuleInitAtlas@@XZ();
}

/*
==============
Preload_ParticleModuleInitSpawnShapeMesh
==============
*/

void __fastcall Preload_ParticleModuleInitSpawnShapeMesh(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleInitSpawnShapeMesh@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleModuleInitModel
==============
*/

void __fastcall Postload_ParticleModuleInitModel(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleInitModel@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticlePhaseOptionsStream
==============
*/

void __fastcall Preload_ParticlePhaseOptionsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticlePhaseOptionsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleTypeDefStream
==============
*/

void __fastcall Preload_ParticleModuleTypeDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleTypeDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ParticleModuleInitDismember
==============
*/

ParticleModuleInitDismember *__fastcall AllocLoad_ParticleModuleInitDismember()
{
  return ?AllocLoad_ParticleModuleInitDismember@@YAPEAUParticleModuleInitDismember@@XZ();
}

/*
==============
Postload_ParticleModuleTestAge
==============
*/

void __fastcall Postload_ParticleModuleTestAge(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleTestAge@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleModuleInitSpawnShapeEllipsoid
==============
*/

int __fastcall Mark_ParticleModuleInitSpawnShapeEllipsoid()
{
  return ?Mark_ParticleModuleInitSpawnShapeEllipsoid@@YAHXZ();
}

/*
==============
Mark_ParticleModuleInitOcclusionQuery
==============
*/

int __fastcall Mark_ParticleModuleInitOcclusionQuery()
{
  return ?Mark_ParticleModuleInitOcclusionQuery@@YAHXZ();
}

/*
==============
Load_ParticleModuleInitAtlasArray
==============
*/

void __fastcall Load_ParticleModuleInitAtlasArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitAtlasArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleTestEventHandlerData
==============
*/

void __fastcall Postload_ParticleModuleTestEventHandlerData(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleTestEventHandlerData@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleModuleTestPos
==============
*/

int __fastcall Mark_ParticleModuleTestPos()
{
  return ?Mark_ParticleModuleTestPos@@YAHXZ();
}

/*
==============
Postload_ParticleModuleInitAtlasStream
==============
*/

void __fastcall Postload_ParticleModuleInitAtlasStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitAtlasStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ParticlePhaseOptions
==============
*/

void Load_ProcessStructLayout_ParticlePhaseOptions(void)
{
  ?Load_ProcessStructLayout_ParticlePhaseOptions@@YAXXZ();
}

/*
==============
AllocLoad_ParticleModuleTypeDef
==============
*/

ParticleModuleTypeDef *__fastcall AllocLoad_ParticleModuleTypeDef()
{
  return ?AllocLoad_ParticleModuleTypeDef@@YAPEATParticleModuleTypeDef@@XZ();
}

/*
==============
Preload_ParticleModuleInitGeoTrailStream
==============
*/

void __fastcall Preload_ParticleModuleInitGeoTrailStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitGeoTrailStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleInitOcclusionQuery
==============
*/

void __fastcall Preload_ParticleModuleInitOcclusionQuery(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleInitOcclusionQuery@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleModuleInitSound
==============
*/

void __fastcall Postload_ParticleModuleInitSound(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleInitSound@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleModuleInitRunnerArray
==============
*/

void __fastcall Postload_ParticleModuleInitRunnerArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitRunnerArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleInitSpawnShapeCylinderStream
==============
*/

void __fastcall Postload_ParticleModuleInitSpawnShapeCylinderStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitSpawnShapeCylinderStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticlePhysicsFXData
==============
*/

void __fastcall Load_ParticlePhysicsFXData(const DBStreamStart streamStart)
{
  ?Load_ParticlePhysicsFXData@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleModuleInitOrientedSpriteArray
==============
*/

int __fastcall Mark_ParticleModuleInitOrientedSpriteArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleInitOrientedSpriteArray@@YAH_K@Z(count);
}

/*
==============
AllocPostload_ParticleModuleInitSpawnShapeCylinder
==============
*/

ParticleModuleInitSpawnShapeCylinder *__fastcall AllocPostload_ParticleModuleInitSpawnShapeCylinder()
{
  return ?AllocPostload_ParticleModuleInitSpawnShapeCylinder@@YAPEAUParticleModuleInitSpawnShapeCylinder@@XZ();
}

/*
==============
Mark_ParticleModuleTypeArray
==============
*/

int __fastcall Mark_ParticleModuleTypeArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleTypeArray@@YAH_K@Z(count);
}

/*
==============
Load_ParticleInstancePoolActionStream
==============
*/

void __fastcall Load_ParticleInstancePoolActionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleInstancePoolActionStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleRenderOptionsArray
==============
*/

int __fastcall Mark_ParticleRenderOptionsArray(const unsigned __int64 count)
{
  return ?Mark_ParticleRenderOptionsArray@@YAH_K@Z(count);
}

/*
==============
Load_ParticleMarkVisualsStream
==============
*/

void __fastcall Load_ParticleMarkVisualsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleMarkVisualsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleAxisStream
==============
*/

void __fastcall Postload_ParticleModuleAxisStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleAxisStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleEmissiveCurvesArray
==============
*/

void __fastcall Preload_ParticleEmissiveCurvesArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleEmissiveCurvesArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ParticleInstancePoolAction
==============
*/

ParticleInstancePoolAction *__fastcall AllocPostload_ParticleInstancePoolAction()
{
  return ?AllocPostload_ParticleInstancePoolAction@@YAPEAW4ParticleInstancePoolAction@@XZ();
}

/*
==============
AllocLoad_ParticleModuleEmissiveGraph
==============
*/

ParticleModuleEmissiveGraph *__fastcall AllocLoad_ParticleModuleEmissiveGraph()
{
  return ?AllocLoad_ParticleModuleEmissiveGraph@@YAPEAUParticleModuleEmissiveGraph@@XZ();
}

/*
==============
Postload_ParticleModuleInitFlare
==============
*/

void __fastcall Postload_ParticleModuleInitFlare(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleInitFlare@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleSystemDefRefStream
==============
*/

void __fastcall Load_ParticleSystemDefRefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleSystemDefRefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleCurveControlPointDef
==============
*/

void __fastcall Postload_ParticleCurveControlPointDef(const DBStreamStart streamStart)
{
  ?Postload_ParticleCurveControlPointDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_Particle_MaterialData
==============
*/

void __fastcall Preload_Particle_MaterialData(const DBStreamStart streamStart)
{
  ?Preload_Particle_MaterialData@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_ParticleDataFlags
==============
*/

void Load_ProcessStructLayout_ParticleDataFlags(void)
{
  ?Load_ProcessStructLayout_ParticleDataFlags@@YAXXZ();
}

/*
==============
Load_ParticleModuleInitVolumetric
==============
*/

void __fastcall Load_ParticleModuleInitVolumetric(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleInitVolumetric@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_ParticleGroupID
==============
*/

ParticleGroupID *__fastcall AllocPostload_ParticleGroupID()
{
  return ?AllocPostload_ParticleGroupID@@YAPEAW4ParticleGroupID@@XZ();
}

/*
==============
Mark_ParticleModuleSizeGraphArray
==============
*/

int __fastcall Mark_ParticleModuleSizeGraphArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleSizeGraphArray@@YAH_K@Z(count);
}

/*
==============
AllocPostload_ParticleModuleInitRotation
==============
*/

ParticleModuleInitRotation *__fastcall AllocPostload_ParticleModuleInitRotation()
{
  return ?AllocPostload_ParticleModuleInitRotation@@YAPEAUParticleModuleInitRotation@@XZ();
}

/*
==============
Postload_ParticleModuleInitBeamFlags
==============
*/

void __fastcall Postload_ParticleModuleInitBeamFlags(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleInitBeamFlags@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleModuleInitRotation3DStream
==============
*/

void __fastcall Postload_ParticleModuleInitRotation3DStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitRotation3DStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ParticleMarkVisuals
==============
*/

ParticleMarkVisuals *__fastcall AllocLoad_ParticleMarkVisuals()
{
  return ?AllocLoad_ParticleMarkVisuals@@YAPEAUParticleMarkVisuals@@XZ();
}

/*
==============
Load_ProcessStructLayout_ParticleShaderGraphOptions
==============
*/

void Load_ProcessStructLayout_ParticleShaderGraphOptions(void)
{
  ?Load_ProcessStructLayout_ParticleShaderGraphOptions@@YAXXZ();
}

/*
==============
Preload_ParticleModuleInitAtlasArray
==============
*/

void __fastcall Preload_ParticleModuleInitAtlasArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitAtlasArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ParticleRenderOptions
==============
*/

ParticleRenderOptions *__fastcall AllocPostload_ParticleRenderOptions()
{
  return ?AllocPostload_ParticleRenderOptions@@YAPEAW4ParticleRenderOptions@@XZ();
}

/*
==============
Load_ParticleModuleInitAtlasStream
==============
*/

void __fastcall Load_ParticleModuleInitAtlasStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitAtlasStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleLinkedAssetListDefArray
==============
*/

void __fastcall Preload_ParticleLinkedAssetListDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleLinkedAssetListDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleInitSpawnShapeSphere
==============
*/

void __fastcall Postload_ParticleModuleInitSpawnShapeSphere(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleInitSpawnShapeSphere@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleModuleInitBeamStream
==============
*/

void __fastcall Postload_ParticleModuleInitBeamStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitBeamStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleInitDismemberStream
==============
*/

void __fastcall Postload_ParticleModuleInitDismemberStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitDismemberStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleEmissionGraphStream
==============
*/

void __fastcall Postload_ParticleModuleEmissionGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleEmissionGraphStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ParticleMarkVisuals
==============
*/

ParticleMarkVisuals *__fastcall AllocPreload_ParticleMarkVisuals()
{
  return ?AllocPreload_ParticleMarkVisuals@@YAPEAUParticleMarkVisuals@@XZ();
}

/*
==============
Load_ParticleFloatRangeStream
==============
*/

void __fastcall Load_ParticleFloatRangeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleFloatRangeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ParticleModuleInitOcclusionQuery
==============
*/

ParticleModuleInitOcclusionQuery *__fastcall AllocPreload_ParticleModuleInitOcclusionQuery()
{
  return ?AllocPreload_ParticleModuleInitOcclusionQuery@@YAPEAUParticleModuleInitOcclusionQuery@@XZ();
}

/*
==============
Load_ParticleModuleForceArray
==============
*/

void __fastcall Load_ParticleModuleForceArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleForceArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleLinkedAssetListDef
==============
*/

void __fastcall Preload_ParticleLinkedAssetListDef(const DBStreamStart streamStart)
{
  ?Preload_ParticleLinkedAssetListDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleLinkedAssetDefArray
==============
*/

int __fastcall Mark_ParticleLinkedAssetDefArray(const unsigned __int64 count)
{
  return ?Mark_ParticleLinkedAssetDefArray@@YAH_K@Z(count);
}

/*
==============
AllocLoad_ParticleEmitterDef
==============
*/

ParticleEmitterDef *__fastcall AllocLoad_ParticleEmitterDef()
{
  return ?AllocLoad_ParticleEmitterDef@@YAPEAUParticleEmitterDef@@XZ();
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitSpawnShapeMesh
==============
*/

void Load_ProcessStructLayout_ParticleModuleInitSpawnShapeMesh(void)
{
  ?Load_ProcessStructLayout_ParticleModuleInitSpawnShapeMesh@@YAXXZ();
}

/*
==============
Postload_ParticleModuleAxisArray
==============
*/

void __fastcall Postload_ParticleModuleAxisArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleAxisArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleTestBirthStream
==============
*/

void __fastcall Preload_ParticleModuleTestBirthStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleTestBirthStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ParticleModuleAttractor
==============
*/

ParticleModuleAttractor *__fastcall AllocLoad_ParticleModuleAttractor()
{
  return ?AllocLoad_ParticleModuleAttractor@@YAPEAUParticleModuleAttractor@@XZ();
}

/*
==============
Mark_ParticleLinkedAssetListDef
==============
*/

int __fastcall Mark_ParticleLinkedAssetListDef()
{
  return ?Mark_ParticleLinkedAssetListDef@@YAHXZ();
}

/*
==============
Postload_ParticleModuleTypeArray
==============
*/

void __fastcall Postload_ParticleModuleTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleSpawnMeshAssetDef
==============
*/

void __fastcall Postload_ParticleSpawnMeshAssetDef(const DBStreamStart streamStart)
{
  ?Postload_ParticleSpawnMeshAssetDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ParticleEmitterDefFlags
==============
*/

unsigned int *__fastcall AllocPreload_ParticleEmitterDefFlags()
{
  return ?AllocPreload_ParticleEmitterDefFlags@@YAPEAIXZ();
}

/*
==============
AllocLoad_ParticleModulePhysicsLight
==============
*/

ParticleModulePhysicsLight *__fastcall AllocLoad_ParticleModulePhysicsLight()
{
  return ?AllocLoad_ParticleModulePhysicsLight@@YAPEAUParticleModulePhysicsLight@@XZ();
}

/*
==============
Postload_ParticleModuleGroupDefStream
==============
*/

void __fastcall Postload_ParticleModuleGroupDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleGroupDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleVectorFieldGraph
==============
*/

void Load_ProcessStructLayout_ParticleModuleVectorFieldGraph(void)
{
  ?Load_ProcessStructLayout_ParticleModuleVectorFieldGraph@@YAXXZ();
}

/*
==============
Preload_ParticleFloatRange
==============
*/

void __fastcall Preload_ParticleFloatRange(const DBStreamStart streamStart)
{
  ?Preload_ParticleFloatRange@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleEmissiveCurves
==============
*/

void __fastcall Preload_ParticleEmissiveCurves(const DBStreamStart streamStart)
{
  ?Preload_ParticleEmissiveCurves@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleModuleSizeGraphArray
==============
*/

void __fastcall Preload_ParticleModuleSizeGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleSizeGraphArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleCurveControlPointDefStream
==============
*/

void __fastcall Preload_ParticleCurveControlPointDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleCurveControlPointDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ParticleGravityState
==============
*/

unsigned int *__fastcall AllocLoad_ParticleGravityState()
{
  return ?AllocLoad_ParticleGravityState@@YAPEAIXZ();
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitVectorField
==============
*/

void Load_ProcessStructLayout_ParticleModuleInitVectorField(void)
{
  ?Load_ProcessStructLayout_ParticleModuleInitVectorField@@YAXXZ();
}

/*
==============
Postload_ParticleModuleInitDecalArray
==============
*/

void __fastcall Postload_ParticleModuleInitDecalArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitDecalArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleInitVolumetricArray
==============
*/

void __fastcall Preload_ParticleModuleInitVolumetricArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitVolumetricArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleImpactDirectionStream
==============
*/

void __fastcall Preload_ParticleImpactDirectionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleImpactDirectionStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ParticleModuleInitLightSpot
==============
*/

ParticleModuleInitLightSpot *__fastcall AllocLoad_ParticleModuleInitLightSpot()
{
  return ?AllocLoad_ParticleModuleInitLightSpot@@YAPEAUParticleModuleInitLightSpot@@XZ();
}

/*
==============
Postload_ParticleModuleAttractorArray
==============
*/

void __fastcall Postload_ParticleModuleAttractorArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleAttractorArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ParticleGravityOptions
==============
*/

void Load_ProcessStructLayout_ParticleGravityOptions(void)
{
  ?Load_ProcessStructLayout_ParticleGravityOptions@@YAXXZ();
}

/*
==============
Load_ParticleModifierArray
==============
*/

void __fastcall Load_ParticleModifierArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModifierArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleSystemDefRefArray
==============
*/

void __fastcall Preload_ParticleSystemDefRefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleSystemDefRefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleInitRunnerStream
==============
*/

void __fastcall Preload_ParticleModuleInitRunnerStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitRunnerStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ParticleSpawnMeshAssetDef
==============
*/

void Load_ProcessStructLayout_ParticleSpawnMeshAssetDef(void)
{
  ?Load_ProcessStructLayout_ParticleSpawnMeshAssetDef@@YAXXZ();
}

/*
==============
AllocPreload_ParticleModuleTestBirth
==============
*/

ParticleModuleTestBirth *__fastcall AllocPreload_ParticleModuleTestBirth()
{
  return ?AllocPreload_ParticleModuleTestBirth@@YAPEAUParticleModuleTestBirth@@XZ();
}

/*
==============
Preload_ParticleModuleInitVolumetricStream
==============
*/

void __fastcall Preload_ParticleModuleInitVolumetricStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitVolumetricStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleTestDeath
==============
*/

void __fastcall Postload_ParticleModuleTestDeath(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleTestDeath@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_ParticleModuleInitTail
==============
*/

ParticleModuleInitTail *__fastcall AllocPostload_ParticleModuleInitTail()
{
  return ?AllocPostload_ParticleModuleInitTail@@YAPEAUParticleModuleInitTail@@XZ();
}

/*
==============
Load_ProcessStructLayout_ParticleModuleScaleByDistance
==============
*/

void Load_ProcessStructLayout_ParticleModuleScaleByDistance(void)
{
  ?Load_ProcessStructLayout_ParticleModuleScaleByDistance@@YAXXZ();
}

/*
==============
Mark_ParticleModuleEmissionGraph
==============
*/

int __fastcall Mark_ParticleModuleEmissionGraph()
{
  return ?Mark_ParticleModuleEmissionGraph@@YAHXZ();
}

/*
==============
Mark_ParticleRenderOptions
==============
*/

int __fastcall Mark_ParticleRenderOptions()
{
  return ?Mark_ParticleRenderOptions@@YAHXZ();
}

/*
==============
Mark_ParticlePhysicsFXDataArray
==============
*/

int __fastcall Mark_ParticlePhysicsFXDataArray(const unsigned __int64 count)
{
  return ?Mark_ParticlePhysicsFXDataArray@@YAH_K@Z(count);
}

/*
==============
Postload_ParticleModuleFlags
==============
*/

void __fastcall Postload_ParticleModuleFlags(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleFlags@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleModuleInitLightSpotArray
==============
*/

int __fastcall Mark_ParticleModuleInitLightSpotArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleInitLightSpotArray@@YAH_K@Z(count);
}

/*
==============
Load_ParticleModuleTestBirth
==============
*/

void __fastcall Load_ParticleModuleTestBirth(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleTestBirth@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleModuleInitKillWrapBoxArray
==============
*/

void __fastcall Load_ParticleModuleInitKillWrapBoxArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitKillWrapBoxArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleTypeDef
==============
*/

int __fastcall Mark_ParticleModuleTypeDef()
{
  return ?Mark_ParticleModuleTypeDef@@YAHXZ();
}

/*
==============
Load_ParticleModuleInitSpawnShapeCylinder
==============
*/

void __fastcall Load_ParticleModuleInitSpawnShapeCylinder(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleInitSpawnShapeCylinder@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleModuleInitRotation3D
==============
*/

int __fastcall Mark_ParticleModuleInitRotation3D()
{
  return ?Mark_ParticleModuleInitRotation3D@@YAHXZ();
}

/*
==============
Load_ParticleModuleInitLightOmniArray
==============
*/

void __fastcall Load_ParticleModuleInitLightOmniArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitLightOmniArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleUseVelocityOptions
==============
*/

void __fastcall Preload_ParticleUseVelocityOptions(const DBStreamStart streamStart)
{
  ?Preload_ParticleUseVelocityOptions@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleModuleTestDeath
==============
*/

int __fastcall Mark_ParticleModuleTestDeath()
{
  return ?Mark_ParticleModuleTestDeath@@YAHXZ();
}

/*
==============
Preload_ParticleModuleScaleByDistanceStream
==============
*/

void __fastcall Preload_ParticleModuleScaleByDistanceStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleScaleByDistanceStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleInitSpawnShapeEllipsoid
==============
*/

void __fastcall Preload_ParticleModuleInitSpawnShapeEllipsoid(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleInitSpawnShapeEllipsoid@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleModuleParentVelocityGraphArray
==============
*/

int __fastcall Mark_ParticleModuleParentVelocityGraphArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleParentVelocityGraphArray@@YAH_K@Z(count);
}

/*
==============
Mark_ParticleModuleInitSpawnShapeCylinder
==============
*/

int __fastcall Mark_ParticleModuleInitSpawnShapeCylinder()
{
  return ?Mark_ParticleModuleInitSpawnShapeCylinder@@YAHXZ();
}

/*
==============
AllocPreload_ParticleModuleInitAttributes
==============
*/

ParticleModuleInitAttributes *__fastcall AllocPreload_ParticleModuleInitAttributes()
{
  return ?AllocPreload_ParticleModuleInitAttributes@@YAPEAUParticleModuleInitAttributes@@XZ();
}

/*
==============
AllocLoad_ParticleEmissiveCurves
==============
*/

ParticleEmissiveCurves *__fastcall AllocLoad_ParticleEmissiveCurves()
{
  return ?AllocLoad_ParticleEmissiveCurves@@YAPEAW4ParticleEmissiveCurves@@XZ();
}

/*
==============
Preload_ParticleModuleInitCameraOffsetStream
==============
*/

void __fastcall Preload_ParticleModuleInitCameraOffsetStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitCameraOffsetStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleSystemDefFlagsStream
==============
*/

void __fastcall Preload_ParticleSystemDefFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleSystemDefFlagsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleStateDefFlagsArray
==============
*/

void __fastcall Load_ParticleStateDefFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleStateDefFlagsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleShaderGraphCurvesArray
==============
*/

int __fastcall Mark_ParticleShaderGraphCurvesArray(const unsigned __int64 count)
{
  return ?Mark_ParticleShaderGraphCurvesArray@@YAH_K@Z(count);
}

/*
==============
Load_ParticleLinkedAssetListDefArray
==============
*/

void __fastcall Load_ParticleLinkedAssetListDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleLinkedAssetListDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ParticleModuleInitCameraOffset
==============
*/

ParticleModuleInitCameraOffset *__fastcall AllocPostload_ParticleModuleInitCameraOffset()
{
  return ?AllocPostload_ParticleModuleInitCameraOffset@@YAPEAUParticleModuleInitCameraOffset@@XZ();
}

/*
==============
Load_ParticleModuleTestPosArray
==============
*/

void __fastcall Load_ParticleModuleTestPosArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleTestPosArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleStateDefStream
==============
*/

void __fastcall Load_ParticleStateDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleStateDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleUseScaleOptions
==============
*/

void __fastcall Load_ParticleUseScaleOptions(const DBStreamStart streamStart)
{
  ?Load_ParticleUseScaleOptions@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleModuleInitSpawnShapeBox
==============
*/

void __fastcall Postload_ParticleModuleInitSpawnShapeBox(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleInitSpawnShapeBox@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleModuleEmissiveGraphStream
==============
*/

void __fastcall Load_ParticleModuleEmissiveGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleEmissiveGraphStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleVelocityGraph
==============
*/

void __fastcall Postload_ParticleModuleVelocityGraph(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleVelocityGraph@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleModuleTestDeathArray
==============
*/

int __fastcall Mark_ParticleModuleTestDeathArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleTestDeathArray@@YAH_K@Z(count);
}

/*
==============
AllocLoad_ParticleMirrorTextureType
==============
*/

ParticleMirrorTextureType *__fastcall AllocLoad_ParticleMirrorTextureType()
{
  return ?AllocLoad_ParticleMirrorTextureType@@YAPEAW4ParticleMirrorTextureType@@XZ();
}

/*
==============
Load_ParticleSystemDefFlags
==============
*/

void __fastcall Load_ParticleSystemDefFlags(const DBStreamStart streamStart)
{
  ?Load_ParticleSystemDefFlags@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ParticleModuleInitMaterial
==============
*/

ParticleModuleInitMaterial *__fastcall AllocPreload_ParticleModuleInitMaterial()
{
  return ?AllocPreload_ParticleModuleInitMaterial@@YAPEAUParticleModuleInitMaterial@@XZ();
}

/*
==============
Mark_ParticleModuleAxesFlagsArray
==============
*/

int __fastcall Mark_ParticleModuleAxesFlagsArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleAxesFlagsArray@@YAH_K@Z(count);
}

/*
==============
Preload_ParticleStateDef
==============
*/

void __fastcall Preload_ParticleStateDef(const DBStreamStart streamStart)
{
  ?Preload_ParticleStateDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleModuleTestGravityStream
==============
*/

void __fastcall Load_ParticleModuleTestGravityStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleTestGravityStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleAttractor
==============
*/

int __fastcall Mark_ParticleModuleAttractor()
{
  return ?Mark_ParticleModuleAttractor@@YAHXZ();
}

/*
==============
Preload_ParticleModuleColorLerpStream
==============
*/

void __fastcall Preload_ParticleModuleColorLerpStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleColorLerpStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_Particle_MaterialData
==============
*/

void __fastcall Postload_Particle_MaterialData(const DBStreamStart streamStart)
{
  ?Postload_Particle_MaterialData@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleModuleAxesFlagsArray
==============
*/

void __fastcall Preload_ParticleModuleAxesFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleAxesFlagsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleTestPosArray
==============
*/

int __fastcall Mark_ParticleModuleTestPosArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleTestPosArray@@YAH_K@Z(count);
}

/*
==============
AllocLoad_ParticleModuleAxis
==============
*/

ParticleModuleAxis *__fastcall AllocLoad_ParticleModuleAxis()
{
  return ?AllocLoad_ParticleModuleAxis@@YAPEAW4ParticleModuleAxis@@XZ();
}

/*
==============
Postload_ParticleModuleAxesFlags
==============
*/

void __fastcall Postload_ParticleModuleAxesFlags(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleAxesFlags@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ParticleModuleInitSpawnShapeCylinder
==============
*/

ParticleModuleInitSpawnShapeCylinder *__fastcall AllocPreload_ParticleModuleInitSpawnShapeCylinder()
{
  return ?AllocPreload_ParticleModuleInitSpawnShapeCylinder@@YAPEAUParticleModuleInitSpawnShapeCylinder@@XZ();
}

/*
==============
Load_ParticleModuleTestAge
==============
*/

void __fastcall Load_ParticleModuleTestAge(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleTestAge@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleCurveControlPointDef
==============
*/

int __fastcall Mark_ParticleCurveControlPointDef()
{
  return ?Mark_ParticleCurveControlPointDef@@YAHXZ();
}

/*
==============
AllocPostload_ParticleModuleTestImpact
==============
*/

ParticleModuleTestImpact *__fastcall AllocPostload_ParticleModuleTestImpact()
{
  return ?AllocPostload_ParticleModuleTestImpact@@YAPEAUParticleModuleTestImpact@@XZ();
}

/*
==============
Preload_ParticleImpactDirectionArray
==============
*/

void __fastcall Preload_ParticleImpactDirectionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleImpactDirectionArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleVelocityGraph
==============
*/

int __fastcall Mark_ParticleModuleVelocityGraph()
{
  return ?Mark_ParticleModuleVelocityGraph@@YAHXZ();
}

/*
==============
Preload_ParticleModuleInitMirrorTexture
==============
*/

void __fastcall Preload_ParticleModuleInitMirrorTexture(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleInitMirrorTexture@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleFloatRange
==============
*/

void __fastcall Load_ParticleFloatRange(const DBStreamStart streamStart)
{
  ?Load_ParticleFloatRange@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleDataFlags
==============
*/

void __fastcall Load_ParticleDataFlags(const DBStreamStart streamStart)
{
  ?Load_ParticleDataFlags@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ParticlePhysicsFXData
==============
*/

ParticlePhysicsFXData *__fastcall AllocLoad_ParticlePhysicsFXData()
{
  return ?AllocLoad_ParticlePhysicsFXData@@YAPEAUParticlePhysicsFXData@@XZ();
}

/*
==============
Preload_ParticleModuleInitLightSpotArray
==============
*/

void __fastcall Preload_ParticleModuleInitLightSpotArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitLightSpotArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleMarkVisuals
==============
*/

void __fastcall Load_ParticleMarkVisuals(const DBStreamStart streamStart)
{
  ?Load_ParticleMarkVisuals@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleUseOrientationOptionsStream
==============
*/

void __fastcall Preload_ParticleUseOrientationOptionsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleUseOrientationOptionsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleUseOrientationOptions
==============
*/

void __fastcall Preload_ParticleUseOrientationOptions(const DBStreamStart streamStart)
{
  ?Preload_ParticleUseOrientationOptions@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleRenderOptionsArray
==============
*/

void __fastcall Postload_ParticleRenderOptionsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleRenderOptionsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleInitCloudStream
==============
*/

void __fastcall Postload_ParticleModuleInitCloudStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitCloudStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleElementTypeStream
==============
*/

void __fastcall Postload_ParticleElementTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleElementTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ParticleModuleInitSound
==============
*/

ParticleModuleInitSound *__fastcall AllocPreload_ParticleModuleInitSound()
{
  return ?AllocPreload_ParticleModuleInitSound@@YAPEAUParticleModuleInitSound@@XZ();
}

/*
==============
Load_ParticleModuleInitTail
==============
*/

void __fastcall Load_ParticleModuleInitTail(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleInitTail@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleModuleColorLerp
==============
*/

void __fastcall Postload_ParticleModuleColorLerp(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleColorLerp@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleModuleScaleByDistanceStream
==============
*/

void __fastcall Postload_ParticleModuleScaleByDistanceStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleScaleByDistanceStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleInstancePoolAction
==============
*/

int __fastcall Mark_ParticleInstancePoolAction()
{
  return ?Mark_ParticleInstancePoolAction@@YAHXZ();
}

/*
==============
AllocPostload_ParticleEmissiveCurves
==============
*/

ParticleEmissiveCurves *__fastcall AllocPostload_ParticleEmissiveCurves()
{
  return ?AllocPostload_ParticleEmissiveCurves@@YAPEAW4ParticleEmissiveCurves@@XZ();
}

/*
==============
Preload_ParticleModuleForceDragGraph
==============
*/

void __fastcall Preload_ParticleModuleForceDragGraph(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleForceDragGraph@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleModuleInitSoundArray
==============
*/

void __fastcall Postload_ParticleModuleInitSoundArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitSoundArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ParticleModuleIntensityGraph
==============
*/

ParticleModuleIntensityGraph *__fastcall AllocPostload_ParticleModuleIntensityGraph()
{
  return ?AllocPostload_ParticleModuleIntensityGraph@@YAPEAUParticleModuleIntensityGraph@@XZ();
}

/*
==============
Postload_ParticleMarkVisualsArray
==============
*/

void __fastcall Postload_ParticleMarkVisualsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleMarkVisualsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleStateDefArray
==============
*/

int __fastcall Mark_ParticleStateDefArray(const unsigned __int64 count)
{
  return ?Mark_ParticleStateDefArray@@YAH_K@Z(count);
}

/*
==============
Preload_ParticlePhysicsFXDataArray
==============
*/

void __fastcall Preload_ParticlePhysicsFXDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticlePhysicsFXDataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleInitAttributes
==============
*/

void __fastcall Postload_ParticleModuleInitAttributes(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleInitAttributes@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleModulePhysicsRayCastStream
==============
*/

void __fastcall Postload_ParticleModulePhysicsRayCastStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModulePhysicsRayCastStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleTestAgeArray
==============
*/

void __fastcall Preload_ParticleModuleTestAgeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleTestAgeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleSpawnMeshAssetDefArray
==============
*/

void __fastcall Load_ParticleSpawnMeshAssetDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleSpawnMeshAssetDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ParticleModuleInitRotation3D
==============
*/

ParticleModuleInitRotation3D *__fastcall AllocPostload_ParticleModuleInitRotation3D()
{
  return ?AllocPostload_ParticleModuleInitRotation3D@@YAPEAUParticleModuleInitRotation3D@@XZ();
}

/*
==============
Mark_ParticleModuleGroupDefArray
==============
*/

int __fastcall Mark_ParticleModuleGroupDefArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleGroupDefArray@@YAH_K@Z(count);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitMaterial
==============
*/

void Load_ProcessStructLayout_ParticleModuleInitMaterial(void)
{
  ?Load_ProcessStructLayout_ParticleModuleInitMaterial@@YAXXZ();
}

/*
==============
Load_ParticleEmitterDefStream
==============
*/

void __fastcall Load_ParticleEmitterDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleEmitterDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleTestImpactArray
==============
*/

void __fastcall Load_ParticleModuleTestImpactArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleTestImpactArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleInitOrientedSpriteStream
==============
*/

void __fastcall Preload_ParticleModuleInitOrientedSpriteStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitOrientedSpriteStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleAxesFlagsArray
==============
*/

void __fastcall Postload_ParticleModuleAxesFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleAxesFlagsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ParticleModuleTestDeath
==============
*/

ParticleModuleTestDeath *__fastcall AllocLoad_ParticleModuleTestDeath()
{
  return ?AllocLoad_ParticleModuleTestDeath@@YAPEAUParticleModuleTestDeath@@XZ();
}

/*
==============
Postload_ParticleModuleTestPosArray
==============
*/

void __fastcall Postload_ParticleModuleTestPosArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleTestPosArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ParticleStateDefFlags
==============
*/

unsigned __int64 *__fastcall AllocPostload_ParticleStateDefFlags()
{
  return ?AllocPostload_ParticleStateDefFlags@@YAPEA_KXZ();
}

/*
==============
Postload_ParticleGroupIDArray
==============
*/

void __fastcall Postload_ParticleGroupIDArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleGroupIDArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleTestPos
==============
*/

void Load_ProcessStructLayout_ParticleModuleTestPos(void)
{
  ?Load_ProcessStructLayout_ParticleModuleTestPos@@YAXXZ();
}

/*
==============
Load_ParticleSpawnFlags
==============
*/

void __fastcall Load_ParticleSpawnFlags(const DBStreamStart streamStart)
{
  ?Load_ParticleSpawnFlags@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ParticleModuleTestImpact
==============
*/

ParticleModuleTestImpact *__fastcall AllocPreload_ParticleModuleTestImpact()
{
  return ?AllocPreload_ParticleModuleTestImpact@@YAPEAUParticleModuleTestImpact@@XZ();
}

/*
==============
Preload_ParticleModuleTypeArray
==============
*/

void __fastcall Preload_ParticleModuleTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ParticleEmitterDefFlags
==============
*/

void Load_ProcessStructLayout_ParticleEmitterDefFlags(void)
{
  ?Load_ProcessStructLayout_ParticleEmitterDefFlags@@YAXXZ();
}

/*
==============
Load_ProcessStructLayout_ParticleEmitterDef
==============
*/

void Load_ProcessStructLayout_ParticleEmitterDef(void)
{
  ?Load_ProcessStructLayout_ParticleEmitterDef@@YAXXZ();
}

/*
==============
Preload_ParticleModuleInitFlare
==============
*/

void __fastcall Preload_ParticleModuleInitFlare(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleInitFlare@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleModuleTestAgeStream
==============
*/

void __fastcall Load_ParticleModuleTestAgeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleTestAgeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleGroupDefArray
==============
*/

void __fastcall Load_ParticleModuleGroupDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleGroupDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitRunnerArray
==============
*/

void __fastcall Load_ParticleModuleInitRunnerArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitRunnerArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModulePhysicsRayCast
==============
*/

void __fastcall Load_ParticleModulePhysicsRayCast(const DBStreamStart streamStart)
{
  ?Load_ParticleModulePhysicsRayCast@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleEmitterDefArray
==============
*/

void __fastcall Load_ParticleEmitterDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleEmitterDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleVectorFieldGraphArray
==============
*/

void __fastcall Preload_ParticleModuleVectorFieldGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleVectorFieldGraphArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleTestImpactStream
==============
*/

void __fastcall Preload_ParticleModuleTestImpactStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleTestImpactStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleForceArray
==============
*/

void __fastcall Preload_ParticleModuleForceArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleForceArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleInitOcclusionQueryStream
==============
*/

void __fastcall Preload_ParticleModuleInitOcclusionQueryStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitOcclusionQueryStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleInitSpawnShapeEllipsoid
==============
*/

void __fastcall Postload_ParticleModuleInitSpawnShapeEllipsoid(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleInitSpawnShapeEllipsoid@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleModuleVectorFieldGraph
==============
*/

int __fastcall Mark_ParticleModuleVectorFieldGraph()
{
  return ?Mark_ParticleModuleVectorFieldGraph@@YAHXZ();
}

/*
==============
AllocPreload_ParticleModuleInitPlayerFacing
==============
*/

ParticleModuleInitPlayerFacing *__fastcall AllocPreload_ParticleModuleInitPlayerFacing()
{
  return ?AllocPreload_ParticleModuleInitPlayerFacing@@YAPEAUParticleModuleInitPlayerFacing@@XZ();
}

/*
==============
Load_ParticleModuleType
==============
*/

void __fastcall Load_ParticleModuleType(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleModuleDefStream
==============
*/

void __fastcall Preload_ParticleModuleDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ParticlePhysicsFXData
==============
*/

void Load_ProcessStructLayout_ParticlePhysicsFXData(void)
{
  ?Load_ProcessStructLayout_ParticlePhysicsFXData@@YAXXZ();
}

/*
==============
AllocPostload_ParticleModuleForce
==============
*/

ParticleModuleForce *__fastcall AllocPostload_ParticleModuleForce()
{
  return ?AllocPostload_ParticleModuleForce@@YAPEAUParticleModuleForce@@XZ();
}

/*
==============
Mark_ParticleModuleTestAge
==============
*/

int __fastcall Mark_ParticleModuleTestAge()
{
  return ?Mark_ParticleModuleTestAge@@YAHXZ();
}

/*
==============
Mark_ParticleModuleColorGraphArray
==============
*/

int __fastcall Mark_ParticleModuleColorGraphArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleColorGraphArray@@YAH_K@Z(count);
}

/*
==============
Postload_ParticleIntRangeStream
==============
*/

void __fastcall Postload_ParticleIntRangeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleIntRangeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleSizeGraph
==============
*/

void __fastcall Postload_ParticleModuleSizeGraph(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleSizeGraph@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleGravityOptionsArray
==============
*/

void __fastcall Preload_ParticleGravityOptionsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleGravityOptionsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitSpawnShapeSphereArray
==============
*/

void __fastcall Load_ParticleModuleInitSpawnShapeSphereArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitSpawnShapeSphereArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleEmissiveVersionCurvesArray
==============
*/

void __fastcall Load_ParticleEmissiveVersionCurvesArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleEmissiveVersionCurvesArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ParticleModuleEmissiveGraph
==============
*/

ParticleModuleEmissiveGraph *__fastcall AllocPostload_ParticleModuleEmissiveGraph()
{
  return ?AllocPostload_ParticleModuleEmissiveGraph@@YAPEAUParticleModuleEmissiveGraph@@XZ();
}

/*
==============
Preload_ParticleModuleInitRunner
==============
*/

void __fastcall Preload_ParticleModuleInitRunner(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleInitRunner@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleModuleTestPos
==============
*/

void __fastcall Load_ParticleModuleTestPos(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleTestPos@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ParticleStateDefFlags
==============
*/

unsigned __int64 *__fastcall AllocPreload_ParticleStateDefFlags()
{
  return ?AllocPreload_ParticleStateDefFlags@@YAPEA_KXZ();
}

/*
==============
Preload_ParticleModuleTestAge
==============
*/

void __fastcall Preload_ParticleModuleTestAge(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleTestAge@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ParticleModuleInitMirrorTexture
==============
*/

ParticleModuleInitMirrorTexture *__fastcall AllocPreload_ParticleModuleInitMirrorTexture()
{
  return ?AllocPreload_ParticleModuleInitMirrorTexture@@YAPEAUParticleModuleInitMirrorTexture@@XZ();
}

/*
==============
Mark_ParticleFloatRangeArray
==============
*/

int __fastcall Mark_ParticleFloatRangeArray(const unsigned __int64 count)
{
  return ?Mark_ParticleFloatRangeArray@@YAH_K@Z(count);
}

/*
==============
Postload_ParticleModuleInitDismemberArray
==============
*/

void __fastcall Postload_ParticleModuleInitDismemberArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitDismemberArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_Particle_MaterialDataStream
==============
*/

void __fastcall Load_Particle_MaterialDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_Particle_MaterialDataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleInitSpawnStream
==============
*/

void __fastcall Postload_ParticleModuleInitSpawnStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitSpawnStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitMaterialStream
==============
*/

void __fastcall Load_ParticleModuleInitMaterialStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitMaterialStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitMirrorTexture
==============
*/

void __fastcall Load_ParticleModuleInitMirrorTexture(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleInitMirrorTexture@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleModuleEmissiveGraph
==============
*/

int __fastcall Mark_ParticleModuleEmissiveGraph()
{
  return ?Mark_ParticleModuleEmissiveGraph@@YAHXZ();
}

/*
==============
Preload_ParticleModuleInitOrientedSpriteArray
==============
*/

void __fastcall Preload_ParticleModuleInitOrientedSpriteArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitOrientedSpriteArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleTestTimeInState
==============
*/

void __fastcall Preload_ParticleModuleTestTimeInState(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleTestTimeInState@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleModuleEmissiveGraphStream
==============
*/

void __fastcall Preload_ParticleModuleEmissiveGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleEmissiveGraphStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleInitSpawn
==============
*/

int __fastcall Mark_ParticleModuleInitSpawn()
{
  return ?Mark_ParticleModuleInitSpawn@@YAHXZ();
}

/*
==============
Preload_ParticleModuleInitLightOmni
==============
*/

void __fastcall Preload_ParticleModuleInitLightOmni(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleInitLightOmni@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleStateDefFlags
==============
*/

int __fastcall Mark_ParticleStateDefFlags()
{
  return ?Mark_ParticleStateDefFlags@@YAHXZ();
}

/*
==============
Load_ParticleModuleInitSoundStream
==============
*/

void __fastcall Load_ParticleModuleInitSoundStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitSoundStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleColorGraph
==============
*/

void __fastcall Preload_ParticleModuleColorGraph(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleColorGraph@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleModuleInitSoundStream
==============
*/

void __fastcall Preload_ParticleModuleInitSoundStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitSoundStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ParticleModulePhysicsRayCast
==============
*/

ParticleModulePhysicsRayCast *__fastcall AllocPostload_ParticleModulePhysicsRayCast()
{
  return ?AllocPostload_ParticleModulePhysicsRayCast@@YAPEAUParticleModulePhysicsRayCast@@XZ();
}

/*
==============
Load_ParticleModuleInitFlare
==============
*/

void __fastcall Load_ParticleModuleInitFlare(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleInitFlare@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleModuleInitCameraOffsetArray
==============
*/

void __fastcall Load_ParticleModuleInitCameraOffsetArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitCameraOffsetArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleSpawnMeshAssetDefStream
==============
*/

void __fastcall Postload_ParticleSpawnMeshAssetDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleSpawnMeshAssetDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleInitRelativeVelocityStream
==============
*/

void __fastcall Postload_ParticleModuleInitRelativeVelocityStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitRelativeVelocityStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleTestBirthArray
==============
*/

void __fastcall Load_ParticleModuleTestBirthArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleTestBirthArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleInitMirrorTextureArray
==============
*/

void __fastcall Preload_ParticleModuleInitMirrorTextureArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitMirrorTextureArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleSpawnFlags
==============
*/

void __fastcall Preload_ParticleSpawnFlags(const DBStreamStart streamStart)
{
  ?Preload_ParticleSpawnFlags@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleModuleScaleByDistance
==============
*/

void __fastcall Load_ParticleModuleScaleByDistance(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleScaleByDistance@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleRotationGraph3D
==============
*/

void Load_ProcessStructLayout_ParticleModuleRotationGraph3D(void)
{
  ?Load_ProcessStructLayout_ParticleModuleRotationGraph3D@@YAXXZ();
}

/*
==============
Postload_ParticleSpawnShapeType
==============
*/

void __fastcall Postload_ParticleSpawnShapeType(const DBStreamStart streamStart)
{
  ?Postload_ParticleSpawnShapeType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleModuleInitOcclusionQueryStream
==============
*/

void __fastcall Load_ParticleModuleInitOcclusionQueryStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitOcclusionQueryStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitSpawnShapeMesh
==============
*/

void __fastcall Load_ParticleModuleInitSpawnShapeMesh(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleInitSpawnShapeMesh@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleSystemDefFlagsArray
==============
*/

void __fastcall Load_ParticleSystemDefFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleSystemDefFlagsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitRunner
==============
*/

void __fastcall Load_ParticleModuleInitRunner(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleInitRunner@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleModuleInitMaterialStream
==============
*/

void __fastcall Postload_ParticleModuleInitMaterialStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitMaterialStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleTestTimeInState
==============
*/

void __fastcall Load_ParticleModuleTestTimeInState(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleTestTimeInState@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleModuleTemperatureGraph
==============
*/

void __fastcall Preload_ParticleModuleTemperatureGraph(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleTemperatureGraph@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ParticleModuleInitDecal
==============
*/

ParticleModuleInitDecal *__fastcall AllocPreload_ParticleModuleInitDecal()
{
  return ?AllocPreload_ParticleModuleInitDecal@@YAPEAUParticleModuleInitDecal@@XZ();
}

/*
==============
Load_ParticleModuleParentVelocityGraphStream
==============
*/

void __fastcall Load_ParticleModuleParentVelocityGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleParentVelocityGraphStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleInitKillWrapBoxArray
==============
*/

int __fastcall Mark_ParticleModuleInitKillWrapBoxArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleInitKillWrapBoxArray@@YAH_K@Z(count);
}

/*
==============
Load_ParticleGroupIDStream
==============
*/

void __fastcall Load_ParticleGroupIDStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleGroupIDStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleVelocityGraph
==============
*/

void __fastcall Load_ParticleModuleVelocityGraph(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleVelocityGraph@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleModuleInitLightSpotArray
==============
*/

void __fastcall Postload_ParticleModuleInitLightSpotArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitLightSpotArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_FxMarkProjectionAxis
==============
*/

FxMarkProjectionAxis *__fastcall AllocPreload_FxMarkProjectionAxis()
{
  return ?AllocPreload_FxMarkProjectionAxis@@YAPEAW4FxMarkProjectionAxis@@XZ();
}

/*
==============
AllocLoad_ParticleModuleInitSpawnShapeBox
==============
*/

ParticleModuleInitSpawnShapeBox *__fastcall AllocLoad_ParticleModuleInitSpawnShapeBox()
{
  return ?AllocLoad_ParticleModuleInitSpawnShapeBox@@YAPEAUParticleModuleInitSpawnShapeBox@@XZ();
}

/*
==============
AllocPreload_ParticleModuleVectorFieldGraph
==============
*/

ParticleModuleVectorFieldGraph *__fastcall AllocPreload_ParticleModuleVectorFieldGraph()
{
  return ?AllocPreload_ParticleModuleVectorFieldGraph@@YAPEAUParticleModuleVectorFieldGraph@@XZ();
}

/*
==============
Mark_ParticleIntRangeArray
==============
*/

int __fastcall Mark_ParticleIntRangeArray(const unsigned __int64 count)
{
  return ?Mark_ParticleIntRangeArray@@YAH_K@Z(count);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitSound
==============
*/

void Load_ProcessStructLayout_ParticleModuleInitSound(void)
{
  ?Load_ProcessStructLayout_ParticleModuleInitSound@@YAXXZ();
}

/*
==============
AllocLoad_ParticleModuleInitSpawnShapeEllipsoid
==============
*/

ParticleModuleInitSpawnShapeEllipsoid *__fastcall AllocLoad_ParticleModuleInitSpawnShapeEllipsoid()
{
  return ?AllocLoad_ParticleModuleInitSpawnShapeEllipsoid@@YAPEAUParticleModuleInitSpawnShapeEllipsoid@@XZ();
}

/*
==============
Mark_ParticleImpactDirection
==============
*/

int __fastcall Mark_ParticleImpactDirection()
{
  return ?Mark_ParticleImpactDirection@@YAHXZ();
}

/*
==============
Load_ProcessStructLayout_ParticleModuleDef
==============
*/

void Load_ProcessStructLayout_ParticleModuleDef(void)
{
  ?Load_ProcessStructLayout_ParticleModuleDef@@YAXXZ();
}

/*
==============
Mark_ParticleModuleIntensityGraph
==============
*/

int __fastcall Mark_ParticleModuleIntensityGraph()
{
  return ?Mark_ParticleModuleIntensityGraph@@YAHXZ();
}

/*
==============
Load_ParticleUseScaleOptionsArray
==============
*/

void __fastcall Load_ParticleUseScaleOptionsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleUseScaleOptionsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ParticleEmissiveVersionCurves
==============
*/

void Load_ProcessStructLayout_ParticleEmissiveVersionCurves(void)
{
  ?Load_ProcessStructLayout_ParticleEmissiveVersionCurves@@YAXXZ();
}

/*
==============
AllocLoad_ParticleModuleTestEventHandlerData
==============
*/

ParticleModuleTestEventHandlerData *__fastcall AllocLoad_ParticleModuleTestEventHandlerData()
{
  return ?AllocLoad_ParticleModuleTestEventHandlerData@@YAPEAUParticleModuleTestEventHandlerData@@XZ();
}

/*
==============
Load_ParticleModuleInitSpawnShapeEllipsoid
==============
*/

void __fastcall Load_ParticleModuleInitSpawnShapeEllipsoid(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleInitSpawnShapeEllipsoid@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_Particle_MaterialData
==============
*/

Particle_MaterialData *__fastcall AllocPostload_Particle_MaterialData()
{
  return ?AllocPostload_Particle_MaterialData@@YAPEAUParticle_MaterialData@@XZ();
}

/*
==============
Load_ParticleGravityOptions
==============
*/

void __fastcall Load_ParticleGravityOptions(const DBStreamStart streamStart)
{
  ?Load_ParticleGravityOptions@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleEmitterDef
==============
*/

void __fastcall Preload_ParticleEmitterDef(const DBStreamStart streamStart)
{
  ?Preload_ParticleEmitterDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleSystemDefPtrArray
==============
*/

void __fastcall Load_ParticleSystemDefPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleSystemDefPtrArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleRenderOptionsStream
==============
*/

void __fastcall Load_ParticleRenderOptionsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleRenderOptionsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleSizeGraph
==============
*/

int __fastcall Mark_ParticleModuleSizeGraph()
{
  return ?Mark_ParticleModuleSizeGraph@@YAHXZ();
}

/*
==============
AllocPreload_ParticleModuleColorLerp
==============
*/

ParticleModuleColorLerp *__fastcall AllocPreload_ParticleModuleColorLerp()
{
  return ?AllocPreload_ParticleModuleColorLerp@@YAPEAUParticleModuleColorLerp@@XZ();
}

/*
==============
Postload_ParticleModuleInitVectorFieldStream
==============
*/

void __fastcall Postload_ParticleModuleInitVectorFieldStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitVectorFieldStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ParticleModuleTemperatureGraph
==============
*/

ParticleModuleTemperatureGraph *__fastcall AllocPostload_ParticleModuleTemperatureGraph()
{
  return ?AllocPostload_ParticleModuleTemperatureGraph@@YAPEAUParticleModuleTemperatureGraph@@XZ();
}

/*
==============
Mark_ParticleModuleAxesFlags
==============
*/

int __fastcall Mark_ParticleModuleAxesFlags()
{
  return ?Mark_ParticleModuleAxesFlags@@YAHXZ();
}

/*
==============
Preload_ParticleModuleTestImpact
==============
*/

void __fastcall Preload_ParticleModuleTestImpact(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleTestImpact@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitSpawnShapeCylinder
==============
*/

void Load_ProcessStructLayout_ParticleModuleInitSpawnShapeCylinder(void)
{
  ?Load_ProcessStructLayout_ParticleModuleInitSpawnShapeCylinder@@YAXXZ();
}

/*
==============
Postload_ParticleModulePositionGraphStream
==============
*/

void __fastcall Postload_ParticleModulePositionGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModulePositionGraphStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleInitDecalStream
==============
*/

void __fastcall Preload_ParticleModuleInitDecalStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitDecalStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleInitCameraOffset
==============
*/

void __fastcall Preload_ParticleModuleInitCameraOffset(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleInitCameraOffset@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticlePhysicsFXDataStream
==============
*/

void __fastcall Load_ParticlePhysicsFXDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticlePhysicsFXDataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleParentVelocityGraphStream
==============
*/

void __fastcall Postload_ParticleModuleParentVelocityGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleParentVelocityGraphStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ParticleModuleSizeGraph
==============
*/

ParticleModuleSizeGraph *__fastcall AllocPostload_ParticleModuleSizeGraph()
{
  return ?AllocPostload_ParticleModuleSizeGraph@@YAPEAUParticleModuleSizeGraph@@XZ();
}

/*
==============
Load_ParticleModuleForceDragGraphStream
==============
*/

void __fastcall Load_ParticleModuleForceDragGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleForceDragGraphStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModifierStream
==============
*/

void __fastcall Postload_ParticleModifierStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModifierStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleTestBirth
==============
*/

void __fastcall Postload_ParticleModuleTestBirth(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleTestBirth@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleModuleForceDragGraphArray
==============
*/

void __fastcall Postload_ParticleModuleForceDragGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleForceDragGraphArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleShaderGraph
==============
*/

void __fastcall Load_ParticleModuleShaderGraph(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleShaderGraph@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ParticleModuleInitOrientedSprite
==============
*/

ParticleModuleInitOrientedSprite *__fastcall AllocLoad_ParticleModuleInitOrientedSprite()
{
  return ?AllocLoad_ParticleModuleInitOrientedSprite@@YAPEAUParticleModuleInitOrientedSprite@@XZ();
}

/*
==============
Postload_ParticleUseScaleOptions
==============
*/

void __fastcall Postload_ParticleUseScaleOptions(const DBStreamStart streamStart)
{
  ?Postload_ParticleUseScaleOptions@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleModuleInitSpawnShapeMeshArray
==============
*/

int __fastcall Mark_ParticleModuleInitSpawnShapeMeshArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleInitSpawnShapeMeshArray@@YAH_K@Z(count);
}

/*
==============
Preload_ParticleModuleInitOrientedSprite
==============
*/

void __fastcall Preload_ParticleModuleInitOrientedSprite(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleInitOrientedSprite@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleGravityStateArray
==============
*/

void __fastcall Postload_ParticleGravityStateArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleGravityStateArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ParticleShaderGraphCurves
==============
*/

ParticleShaderGraphCurves *__fastcall AllocPreload_ParticleShaderGraphCurves()
{
  return ?AllocPreload_ParticleShaderGraphCurves@@YAPEAW4ParticleShaderGraphCurves@@XZ();
}

/*
==============
Preload_ParticleSpawnShapeTypeArray
==============
*/

void __fastcall Preload_ParticleSpawnShapeTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleSpawnShapeTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleTestDeathArray
==============
*/

void __fastcall Preload_ParticleModuleTestDeathArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleTestDeathArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleForce
==============
*/

void __fastcall Load_ParticleModuleForce(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleForce@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ParticleModuleInitCameraOffset
==============
*/

ParticleModuleInitCameraOffset *__fastcall AllocLoad_ParticleModuleInitCameraOffset()
{
  return ?AllocLoad_ParticleModuleInitCameraOffset@@YAPEAUParticleModuleInitCameraOffset@@XZ();
}

/*
==============
Mark_ParticleModuleInitBeamFlags
==============
*/

int __fastcall Mark_ParticleModuleInitBeamFlags()
{
  return ?Mark_ParticleModuleInitBeamFlags@@YAHXZ();
}

/*
==============
Preload_ParticleModuleInitKillWrapBoxStream
==============
*/

void __fastcall Preload_ParticleModuleInitKillWrapBoxStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitKillWrapBoxStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ParticleRenderOptions
==============
*/

ParticleRenderOptions *__fastcall AllocLoad_ParticleRenderOptions()
{
  return ?AllocLoad_ParticleRenderOptions@@YAPEAW4ParticleRenderOptions@@XZ();
}

/*
==============
Mark_ParticleRelativeVelocityTypeArray
==============
*/

int __fastcall Mark_ParticleRelativeVelocityTypeArray(const unsigned __int64 count)
{
  return ?Mark_ParticleRelativeVelocityTypeArray@@YAH_K@Z(count);
}

/*
==============
Load_ParticleMarkVisualsArray
==============
*/

void __fastcall Load_ParticleMarkVisualsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleMarkVisualsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModulePhysicsRayCastArray
==============
*/

void __fastcall Preload_ParticleModulePhysicsRayCastArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModulePhysicsRayCastArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleType
==============
*/

void Load_ProcessStructLayout_ParticleModuleType(void)
{
  ?Load_ProcessStructLayout_ParticleModuleType@@YAXXZ();
}

/*
==============
Preload_ParticleModulePhysicsLightStream
==============
*/

void __fastcall Preload_ParticleModulePhysicsLightStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModulePhysicsLightStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleEmitterDefStream
==============
*/

void __fastcall Postload_ParticleEmitterDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleEmitterDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ParticleStateDef
==============
*/

ParticleStateDef *__fastcall AllocPreload_ParticleStateDef()
{
  return ?AllocPreload_ParticleStateDef@@YAPEAUParticleStateDef@@XZ();
}

/*
==============
AllocPostload_ParticleShaderGraphOptions
==============
*/

ParticleShaderGraphOptions *__fastcall AllocPostload_ParticleShaderGraphOptions()
{
  return ?AllocPostload_ParticleShaderGraphOptions@@YAPEAW4ParticleShaderGraphOptions@@XZ();
}

/*
==============
Mark_ParticleModuleForceDragGraphArray
==============
*/

int __fastcall Mark_ParticleModuleForceDragGraphArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleForceDragGraphArray@@YAH_K@Z(count);
}

/*
==============
AllocPostload_ParticleModuleInitSpawnShapeSphere
==============
*/

ParticleModuleInitSpawnShapeSphere *__fastcall AllocPostload_ParticleModuleInitSpawnShapeSphere()
{
  return ?AllocPostload_ParticleModuleInitSpawnShapeSphere@@YAPEAUParticleModuleInitSpawnShapeSphere@@XZ();
}

/*
==============
Preload_ParticleModuleEmissiveGraph
==============
*/

void __fastcall Preload_ParticleModuleEmissiveGraph(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleEmissiveGraph@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleModuleInitCameraOffsetStream
==============
*/

void __fastcall Postload_ParticleModuleInitCameraOffsetStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitCameraOffsetStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleLinkedAssetListDefArray
==============
*/

int __fastcall Mark_ParticleLinkedAssetListDefArray(const unsigned __int64 count)
{
  return ?Mark_ParticleLinkedAssetListDefArray@@YAH_K@Z(count);
}

/*
==============
Load_ParticleFloatRangeArray
==============
*/

void __fastcall Load_ParticleFloatRangeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleFloatRangeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleType
==============
*/

int __fastcall Mark_ParticleModuleType()
{
  return ?Mark_ParticleModuleType@@YAHXZ();
}

/*
==============
Preload_ParticleModuleInitSpawnShapeSphereStream
==============
*/

void __fastcall Preload_ParticleModuleInitSpawnShapeSphereStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitSpawnShapeSphereStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleLinkedAssetListDef
==============
*/

void __fastcall Load_ParticleLinkedAssetListDef(const DBStreamStart streamStart)
{
  ?Load_ParticleLinkedAssetListDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_ParticleModuleInitPlayerFacing
==============
*/

ParticleModuleInitPlayerFacing *__fastcall AllocPostload_ParticleModuleInitPlayerFacing()
{
  return ?AllocPostload_ParticleModuleInitPlayerFacing@@YAPEAUParticleModuleInitPlayerFacing@@XZ();
}

/*
==============
Mark_ParticleModuleInitSpawnShapeEllipsoidArray
==============
*/

int __fastcall Mark_ParticleModuleInitSpawnShapeEllipsoidArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleInitSpawnShapeEllipsoidArray@@YAH_K@Z(count);
}

/*
==============
Preload_ParticleIntRangeStream
==============
*/

void __fastcall Preload_ParticleIntRangeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleIntRangeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitBeam
==============
*/

void __fastcall Load_ParticleModuleInitBeam(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleInitBeam@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleModuleTestDeathStream
==============
*/

void __fastcall Load_ParticleModuleTestDeathStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleTestDeathStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleFloatRangeArray
==============
*/

void __fastcall Postload_ParticleFloatRangeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleFloatRangeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleMarkVisualsArray
==============
*/

void __fastcall Preload_ParticleMarkVisualsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleMarkVisualsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleInitRelativeVelocityArray
==============
*/

int __fastcall Mark_ParticleModuleInitRelativeVelocityArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleInitRelativeVelocityArray@@YAH_K@Z(count);
}

/*
==============
Preload_ParticleUseScaleOptionsStream
==============
*/

void __fastcall Preload_ParticleUseScaleOptionsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleUseScaleOptionsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleInitSpawnShapeEllipsoidStream
==============
*/

void __fastcall Postload_ParticleModuleInitSpawnShapeEllipsoidStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitSpawnShapeEllipsoidStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ParticleModuleInitRelativeVelocity
==============
*/

ParticleModuleInitRelativeVelocity *__fastcall AllocPostload_ParticleModuleInitRelativeVelocity()
{
  return ?AllocPostload_ParticleModuleInitRelativeVelocity@@YAPEAUParticleModuleInitRelativeVelocity@@XZ();
}

/*
==============
Postload_ParticleModulePhysicsRayCast
==============
*/

void __fastcall Postload_ParticleModulePhysicsRayCast(const DBStreamStart streamStart)
{
  ?Postload_ParticleModulePhysicsRayCast@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitSpawnShapeEllipsoid
==============
*/

void Load_ProcessStructLayout_ParticleModuleInitSpawnShapeEllipsoid(void)
{
  ?Load_ProcessStructLayout_ParticleModuleInitSpawnShapeEllipsoid@@YAXXZ();
}

/*
==============
Mark_ParticleModuleInitSpawnShapeBox
==============
*/

int __fastcall Mark_ParticleModuleInitSpawnShapeBox()
{
  return ?Mark_ParticleModuleInitSpawnShapeBox@@YAHXZ();
}

/*
==============
Postload_ParticleModuleSizeLerp
==============
*/

void __fastcall Postload_ParticleModuleSizeLerp(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleSizeLerp@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleStateDefFlagsArray
==============
*/

int __fastcall Mark_ParticleStateDefFlagsArray(const unsigned __int64 count)
{
  return ?Mark_ParticleStateDefFlagsArray@@YAH_K@Z(count);
}

/*
==============
Mark_ParticleModuleTypeDefArray
==============
*/

int __fastcall Mark_ParticleModuleTypeDefArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleTypeDefArray@@YAH_K@Z(count);
}

/*
==============
Mark_ParticleModuleInitModelArray
==============
*/

int __fastcall Mark_ParticleModuleInitModelArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleInitModelArray@@YAH_K@Z(count);
}

/*
==============
AllocPreload_ParticleMirrorTextureType
==============
*/

ParticleMirrorTextureType *__fastcall AllocPreload_ParticleMirrorTextureType()
{
  return ?AllocPreload_ParticleMirrorTextureType@@YAPEAW4ParticleMirrorTextureType@@XZ();
}

/*
==============
Load_ParticleModuleForceDragGraphArray
==============
*/

void __fastcall Load_ParticleModuleForceDragGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleForceDragGraphArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleEmitterDefFlagsStream
==============
*/

void __fastcall Load_ParticleEmitterDefFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleEmitterDefFlagsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ParticleModuleInitSpawnShapeMesh
==============
*/

ParticleModuleInitSpawnShapeMesh *__fastcall AllocPreload_ParticleModuleInitSpawnShapeMesh()
{
  return ?AllocPreload_ParticleModuleInitSpawnShapeMesh@@YAPEAUParticleModuleInitSpawnShapeMesh@@XZ();
}

/*
==============
Postload_ParticleModuleInitLightSpot
==============
*/

void __fastcall Postload_ParticleModuleInitLightSpot(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleInitLightSpot@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleSpawnFlagsArray
==============
*/

void __fastcall Load_ParticleSpawnFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleSpawnFlagsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModulePhysicsLightArray
==============
*/

void __fastcall Postload_ParticleModulePhysicsLightArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModulePhysicsLightArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleGroupID
==============
*/

void __fastcall Load_ParticleGroupID(const DBStreamStart streamStart)
{
  ?Load_ParticleGroupID@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleModuleInitRelativeVelocity
==============
*/

void __fastcall Postload_ParticleModuleInitRelativeVelocity(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleInitRelativeVelocity@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ParticleInstancePoolType
==============
*/

ParticleInstancePoolType *__fastcall AllocLoad_ParticleInstancePoolType()
{
  return ?AllocLoad_ParticleInstancePoolType@@YAPEAW4ParticleInstancePoolType@@XZ();
}

/*
==============
AllocPostload_ParticleModuleTestEventHandlerData
==============
*/

ParticleModuleTestEventHandlerData *__fastcall AllocPostload_ParticleModuleTestEventHandlerData()
{
  return ?AllocPostload_ParticleModuleTestEventHandlerData@@YAPEAUParticleModuleTestEventHandlerData@@XZ();
}

/*
==============
Postload_ParticleModuleInitMaterial
==============
*/

void __fastcall Postload_ParticleModuleInitMaterial(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleInitMaterial@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_ParticleElementType
==============
*/

unsigned int *__fastcall AllocPostload_ParticleElementType()
{
  return ?AllocPostload_ParticleElementType@@YAPEAIXZ();
}

/*
==============
Load_Particle_MaterialData
==============
*/

void __fastcall Load_Particle_MaterialData(const DBStreamStart streamStart)
{
  ?Load_Particle_MaterialData@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleParentVelocityGraph
==============
*/

void Load_ProcessStructLayout_ParticleModuleParentVelocityGraph(void)
{
  ?Load_ProcessStructLayout_ParticleModuleParentVelocityGraph@@YAXXZ();
}

/*
==============
Load_ParticleModuleInitBeamFlags
==============
*/

void __fastcall Load_ParticleModuleInitBeamFlags(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleInitBeamFlags@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_FxMarkProjectionAxisStream
==============
*/

void __fastcall Postload_FxMarkProjectionAxisStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_FxMarkProjectionAxisStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleInitSpawnShapeMeshStream
==============
*/

void __fastcall Preload_ParticleModuleInitSpawnShapeMeshStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitSpawnShapeMeshStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_Particle_MaterialDataArray
==============
*/

int __fastcall Mark_Particle_MaterialDataArray(const unsigned __int64 count)
{
  return ?Mark_Particle_MaterialDataArray@@YAH_K@Z(count);
}

/*
==============
Preload_ParticleInstancePoolTypeStream
==============
*/

void __fastcall Preload_ParticleInstancePoolTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleInstancePoolTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ParticleModuleDef
==============
*/

ParticleModuleDef *__fastcall AllocPostload_ParticleModuleDef()
{
  return ?AllocPostload_ParticleModuleDef@@YAPEAUParticleModuleDef@@XZ();
}

/*
==============
Postload_ParticleModuleInitCloudArray
==============
*/

void __fastcall Postload_ParticleModuleInitCloudArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitCloudArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleColorLerp
==============
*/

void __fastcall Load_ParticleModuleColorLerp(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleColorLerp@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleIntRangeStream
==============
*/

void __fastcall Load_ParticleIntRangeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleIntRangeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleInstancePoolActionArray
==============
*/

void __fastcall Postload_ParticleInstancePoolActionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleInstancePoolActionArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitFlare
==============
*/

void Load_ProcessStructLayout_ParticleModuleInitFlare(void)
{
  ?Load_ProcessStructLayout_ParticleModuleInitFlare@@YAXXZ();
}

/*
==============
Preload_ParticleModuleForce
==============
*/

void __fastcall Preload_ParticleModuleForce(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleForce@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleModuleInitBeamArray
==============
*/

void __fastcall Postload_ParticleModuleInitBeamArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitBeamArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitFlareArray
==============
*/

void __fastcall Load_ParticleModuleInitFlareArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitFlareArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleCurveControlPointDefArray
==============
*/

void __fastcall Postload_ParticleCurveControlPointDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleCurveControlPointDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleInitOcclusionQueryArray
==============
*/

int __fastcall Mark_ParticleModuleInitOcclusionQueryArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleInitOcclusionQueryArray@@YAH_K@Z(count);
}

/*
==============
Postload_ParticleModuleTypeDefArray
==============
*/

void __fastcall Postload_ParticleModuleTypeDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleTypeDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleVectorFieldGraphArray
==============
*/

int __fastcall Mark_ParticleModuleVectorFieldGraphArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleVectorFieldGraphArray@@YAH_K@Z(count);
}

/*
==============
Preload_ParticleModulePhysicsRayCastStream
==============
*/

void __fastcall Preload_ParticleModulePhysicsRayCastStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModulePhysicsRayCastStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModulePositionGraphArray
==============
*/

void __fastcall Preload_ParticleModulePositionGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModulePositionGraphArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleInitLightSpot
==============
*/

void __fastcall Preload_ParticleModuleInitLightSpot(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleInitLightSpot@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_ParticleGravityState
==============
*/

unsigned int *__fastcall AllocPostload_ParticleGravityState()
{
  return ?AllocPostload_ParticleGravityState@@YAPEAIXZ();
}

/*
==============
Preload_ParticleShaderGraphOptionsArray
==============
*/

void __fastcall Preload_ParticleShaderGraphOptionsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleShaderGraphOptionsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleInitGeoTrailArray
==============
*/

int __fastcall Mark_ParticleModuleInitGeoTrailArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleInitGeoTrailArray@@YAH_K@Z(count);
}

/*
==============
Postload_ParticleEmissiveCurvesStream
==============
*/

void __fastcall Postload_ParticleEmissiveCurvesStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleEmissiveCurvesStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleRenderOptions
==============
*/

void __fastcall Preload_ParticleRenderOptions(const DBStreamStart streamStart)
{
  ?Preload_ParticleRenderOptions@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ParticleModuleInitTail
==============
*/

ParticleModuleInitTail *__fastcall AllocLoad_ParticleModuleInitTail()
{
  return ?AllocLoad_ParticleModuleInitTail@@YAPEAUParticleModuleInitTail@@XZ();
}

/*
==============
AllocPostload_ParticleStateDef
==============
*/

ParticleStateDef *__fastcall AllocPostload_ParticleStateDef()
{
  return ?AllocPostload_ParticleStateDef@@YAPEAUParticleStateDef@@XZ();
}

/*
==============
Load_ParticleMirrorTextureTypeStream
==============
*/

void __fastcall Load_ParticleMirrorTextureTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleMirrorTextureTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleStateDef
==============
*/

void __fastcall Postload_ParticleStateDef(const DBStreamStart streamStart)
{
  ?Postload_ParticleStateDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleModuleInitCameraOffsetStream
==============
*/

void __fastcall Load_ParticleModuleInitCameraOffsetStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitCameraOffsetStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleInitOcclusionQuery
==============
*/

void __fastcall Postload_ParticleModuleInitOcclusionQuery(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleInitOcclusionQuery@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_ParticleShaderGraphCurves
==============
*/

ParticleShaderGraphCurves *__fastcall AllocPostload_ParticleShaderGraphCurves()
{
  return ?AllocPostload_ParticleShaderGraphCurves@@YAPEAW4ParticleShaderGraphCurves@@XZ();
}

/*
==============
Load_ParticleModuleInitDismember
==============
*/

void __fastcall Load_ParticleModuleInitDismember(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleInitDismember@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleModuleInitRotation3DArray
==============
*/

void __fastcall Load_ParticleModuleInitRotation3DArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitRotation3DArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleUseVelocityOptionsArray
==============
*/

void __fastcall Postload_ParticleUseVelocityOptionsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleUseVelocityOptionsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitSound
==============
*/

void __fastcall Load_ParticleModuleInitSound(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleInitSound@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleModuleInitSpawnShapeMeshArray
==============
*/

void __fastcall Preload_ParticleModuleInitSpawnShapeMeshArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitSpawnShapeMeshArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleFloatRangeStream
==============
*/

void __fastcall Postload_ParticleFloatRangeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleFloatRangeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleTypeDefArray
==============
*/

void __fastcall Load_ParticleModuleTypeDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleTypeDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleSystemDefFlagsStream
==============
*/

void __fastcall Load_ParticleSystemDefFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleSystemDefFlagsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleType
==============
*/

void __fastcall Postload_ParticleModuleType(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleModuleInitKillWrapBox
==============
*/

void __fastcall Postload_ParticleModuleInitKillWrapBox(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleInitKillWrapBox@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleModuleInitKillWrapBoxStream
==============
*/

void __fastcall Postload_ParticleModuleInitKillWrapBoxStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitKillWrapBoxStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleTestBirth
==============
*/

void Load_ProcessStructLayout_ParticleModuleTestBirth(void)
{
  ?Load_ProcessStructLayout_ParticleModuleTestBirth@@YAXXZ();
}

/*
==============
AllocLoad_ParticleLinkedAssetListDef
==============
*/

ParticleLinkedAssetListDef *__fastcall AllocLoad_ParticleLinkedAssetListDef()
{
  return ?AllocLoad_ParticleLinkedAssetListDef@@YAPEAUParticleLinkedAssetListDef@@XZ();
}

/*
==============
AllocPreload_ParticleModuleInitKillWrapBox
==============
*/

ParticleModuleInitKillWrapBox *__fastcall AllocPreload_ParticleModuleInitKillWrapBox()
{
  return ?AllocPreload_ParticleModuleInitKillWrapBox@@YAPEAUParticleModuleInitKillWrapBox@@XZ();
}

/*
==============
Postload_ParticleModuleInitVolumetricStream
==============
*/

void __fastcall Postload_ParticleModuleInitVolumetricStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitVolumetricStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleMarkVisuals
==============
*/

void __fastcall Postload_ParticleMarkVisuals(const DBStreamStart streamStart)
{
  ?Postload_ParticleMarkVisuals@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleModuleInitVectorField
==============
*/

void __fastcall Postload_ParticleModuleInitVectorField(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleInitVectorField@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleLinkedAssetDef
==============
*/

void __fastcall Postload_ParticleLinkedAssetDef(const DBStreamStart streamStart)
{
  ?Postload_ParticleLinkedAssetDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_ParticleModuleInitSpawnShapeBox
==============
*/

ParticleModuleInitSpawnShapeBox *__fastcall AllocPostload_ParticleModuleInitSpawnShapeBox()
{
  return ?AllocPostload_ParticleModuleInitSpawnShapeBox@@YAPEAUParticleModuleInitSpawnShapeBox@@XZ();
}

/*
==============
Load_ParticleGravityStateArray
==============
*/

void __fastcall Load_ParticleGravityStateArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleGravityStateArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleShaderGraphOptionsArray
==============
*/

int __fastcall Mark_ParticleShaderGraphOptionsArray(const unsigned __int64 count)
{
  return ?Mark_ParticleShaderGraphOptionsArray@@YAH_K@Z(count);
}

/*
==============
Load_ParticleModuleEmissiveGraphArray
==============
*/

void __fastcall Load_ParticleModuleEmissiveGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleEmissiveGraphArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleInitOrientedSpriteArray
==============
*/

void __fastcall Postload_ParticleModuleInitOrientedSpriteArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitOrientedSpriteArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleSpawnFlagsStream
==============
*/

void __fastcall Preload_ParticleSpawnFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleSpawnFlagsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitModelStream
==============
*/

void __fastcall Load_ParticleModuleInitModelStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitModelStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ParticleSystemDefPtr
==============
*/

const ParticleSystemDef **__fastcall AllocPostload_ParticleSystemDefPtr()
{
  return ?AllocPostload_ParticleSystemDefPtr@@YAPEAPEBUParticleSystemDef@@XZ();
}

/*
==============
Mark_ParticleUseVelocityOptionsArray
==============
*/

int __fastcall Mark_ParticleUseVelocityOptionsArray(const unsigned __int64 count)
{
  return ?Mark_ParticleUseVelocityOptionsArray@@YAH_K@Z(count);
}

/*
==============
AllocPostload_ParticleUseVelocityOptions
==============
*/

ParticleUseVelocityOptions *__fastcall AllocPostload_ParticleUseVelocityOptions()
{
  return ?AllocPostload_ParticleUseVelocityOptions@@YAPEAW4ParticleUseVelocityOptions@@XZ();
}

/*
==============
Mark_ParticleInstancePoolType
==============
*/

int __fastcall Mark_ParticleInstancePoolType()
{
  return ?Mark_ParticleInstancePoolType@@YAHXZ();
}

/*
==============
AllocPostload_ParticleModuleInitVolumetric
==============
*/

ParticleModuleInitVolumetric *__fastcall AllocPostload_ParticleModuleInitVolumetric()
{
  return ?AllocPostload_ParticleModuleInitVolumetric@@YAPEAUParticleModuleInitVolumetric@@XZ();
}

/*
==============
Postload_ParticleModuleTemperatureGraphArray
==============
*/

void __fastcall Postload_ParticleModuleTemperatureGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleTemperatureGraphArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleAxesFlagsStream
==============
*/

void __fastcall Preload_ParticleModuleAxesFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleAxesFlagsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleSystemDefPtr
==============
*/

void __fastcall Postload_ParticleSystemDefPtr(const DBStreamStart streamStart)
{
  ?Postload_ParticleSystemDefPtr@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleModuleInitDismemberStream
==============
*/

void __fastcall Load_ParticleModuleInitDismemberStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitDismemberStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleEmissionGraphArray
==============
*/

void __fastcall Postload_ParticleModuleEmissionGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleEmissionGraphArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ParticleLinkedAssetDef
==============
*/

ParticleLinkedAssetDef *__fastcall AllocLoad_ParticleLinkedAssetDef()
{
  return ?AllocLoad_ParticleLinkedAssetDef@@YAPEATParticleLinkedAssetDef@@XZ();
}

/*
==============
Load_ParticleSystemDefStream
==============
*/

void __fastcall Load_ParticleSystemDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleSystemDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleInitBeamFlagsArray
==============
*/

void __fastcall Preload_ParticleModuleInitBeamFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitBeamFlagsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ParticleModuleEmissiveGraph
==============
*/

ParticleModuleEmissiveGraph *__fastcall AllocPreload_ParticleModuleEmissiveGraph()
{
  return ?AllocPreload_ParticleModuleEmissiveGraph@@YAPEAUParticleModuleEmissiveGraph@@XZ();
}

/*
==============
AllocPostload_ParticleEmissiveVersionCurves
==============
*/

ParticleEmissiveVersionCurves *__fastcall AllocPostload_ParticleEmissiveVersionCurves()
{
  return ?AllocPostload_ParticleEmissiveVersionCurves@@YAPEAW4ParticleEmissiveVersionCurves@@XZ();
}

/*
==============
AllocLoad_ParticleModulePhysicsRayCast
==============
*/

ParticleModulePhysicsRayCast *__fastcall AllocLoad_ParticleModulePhysicsRayCast()
{
  return ?AllocLoad_ParticleModulePhysicsRayCast@@YAPEAUParticleModulePhysicsRayCast@@XZ();
}

/*
==============
Mark_ParticleModuleInitBeamFlagsArray
==============
*/

int __fastcall Mark_ParticleModuleInitBeamFlagsArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleInitBeamFlagsArray@@YAH_K@Z(count);
}

/*
==============
AllocPreload_ParticleModuleInitVectorField
==============
*/

ParticleModuleInitVectorField *__fastcall AllocPreload_ParticleModuleInitVectorField()
{
  return ?AllocPreload_ParticleModuleInitVectorField@@YAPEAUParticleModuleInitVectorField@@XZ();
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitSpawnShapeSphere
==============
*/

void Load_ProcessStructLayout_ParticleModuleInitSpawnShapeSphere(void)
{
  ?Load_ProcessStructLayout_ParticleModuleInitSpawnShapeSphere@@YAXXZ();
}

/*
==============
Load_ParticleModuleInitMirrorTextureStream
==============
*/

void __fastcall Load_ParticleModuleInitMirrorTextureStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitMirrorTextureStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleGravity
==============
*/

void Load_ProcessStructLayout_ParticleModuleGravity(void)
{
  ?Load_ProcessStructLayout_ParticleModuleGravity@@YAXXZ();
}

/*
==============
AllocPreload_ParticleDataFlags
==============
*/

ParticleDataFlags *__fastcall AllocPreload_ParticleDataFlags()
{
  return ?AllocPreload_ParticleDataFlags@@YAPEAW4ParticleDataFlags@@XZ();
}

/*
==============
AllocLoad_ParticleFloatRange
==============
*/

ParticleFloatRange *__fastcall AllocLoad_ParticleFloatRange()
{
  return ?AllocLoad_ParticleFloatRange@@YAPEAUParticleFloatRange@@XZ();
}

/*
==============
Mark_ParticleModuleTemperatureGraph
==============
*/

int __fastcall Mark_ParticleModuleTemperatureGraph()
{
  return ?Mark_ParticleModuleTemperatureGraph@@YAHXZ();
}

/*
==============
Postload_ParticleModuleColorGraphStream
==============
*/

void __fastcall Postload_ParticleModuleColorGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleColorGraphStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleGravity
==============
*/

int __fastcall Mark_ParticleModuleGravity()
{
  return ?Mark_ParticleModuleGravity@@YAHXZ();
}

/*
==============
AllocLoad_ParticleShaderGraphCurves
==============
*/

ParticleShaderGraphCurves *__fastcall AllocLoad_ParticleShaderGraphCurves()
{
  return ?AllocLoad_ParticleShaderGraphCurves@@YAPEAW4ParticleShaderGraphCurves@@XZ();
}

/*
==============
Preload_ParticleModuleTestEventHandlerDataArray
==============
*/

void __fastcall Preload_ParticleModuleTestEventHandlerDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleTestEventHandlerDataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleImpactDirection
==============
*/

void __fastcall Load_ParticleImpactDirection(const DBStreamStart streamStart)
{
  ?Load_ParticleImpactDirection@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ParticleModuleScaleByDistance
==============
*/

ParticleModuleScaleByDistance *__fastcall AllocPreload_ParticleModuleScaleByDistance()
{
  return ?AllocPreload_ParticleModuleScaleByDistance@@YAPEAUParticleModuleScaleByDistance@@XZ();
}

/*
==============
Postload_ParticleModuleInitTailStream
==============
*/

void __fastcall Postload_ParticleModuleInitTailStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitTailStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleShaderGraphOptionsStream
==============
*/

void __fastcall Postload_ParticleShaderGraphOptionsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleShaderGraphOptionsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ParticleModuleDef
==============
*/

ParticleModuleDef *__fastcall AllocPreload_ParticleModuleDef()
{
  return ?AllocPreload_ParticleModuleDef@@YAPEAUParticleModuleDef@@XZ();
}

/*
==============
Postload_ParticleModuleParentVelocityGraphArray
==============
*/

void __fastcall Postload_ParticleModuleParentVelocityGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleParentVelocityGraphArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ParticleDataFlags
==============
*/

ParticleDataFlags *__fastcall AllocLoad_ParticleDataFlags()
{
  return ?AllocLoad_ParticleDataFlags@@YAPEAW4ParticleDataFlags@@XZ();
}

/*
==============
Load_ParticleLinkedAssetDef
==============
*/

void __fastcall Load_ParticleLinkedAssetDef(const DBStreamStart streamStart)
{
  ?Load_ParticleLinkedAssetDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleModuleInitRotationStream
==============
*/

void __fastcall Load_ParticleModuleInitRotationStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitRotationStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ParticleSystemDefFlags
==============
*/

void Load_ProcessStructLayout_ParticleSystemDefFlags(void)
{
  ?Load_ProcessStructLayout_ParticleSystemDefFlags@@YAXXZ();
}

/*
==============
Load_ProcessStructLayout_ParticleModuleEmissionGraph
==============
*/

void Load_ProcessStructLayout_ParticleModuleEmissionGraph(void)
{
  ?Load_ProcessStructLayout_ParticleModuleEmissionGraph@@YAXXZ();
}

/*
==============
Mark_ParticleSpawnShapeTypeArray
==============
*/

int __fastcall Mark_ParticleSpawnShapeTypeArray(const unsigned __int64 count)
{
  return ?Mark_ParticleSpawnShapeTypeArray@@YAH_K@Z(count);
}

/*
==============
Postload_ParticlePhysicsFXDataStream
==============
*/

void __fastcall Postload_ParticlePhysicsFXDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticlePhysicsFXDataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ParticleSystemDefFlags
==============
*/

unsigned int *__fastcall AllocLoad_ParticleSystemDefFlags()
{
  return ?AllocLoad_ParticleSystemDefFlags@@YAPEAIXZ();
}

/*
==============
Mark_ParticleModuleScaleByDistanceArray
==============
*/

int __fastcall Mark_ParticleModuleScaleByDistanceArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleScaleByDistanceArray@@YAH_K@Z(count);
}

/*
==============
Mark_ParticleModuleInitRotationArray
==============
*/

int __fastcall Mark_ParticleModuleInitRotationArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleInitRotationArray@@YAH_K@Z(count);
}

/*
==============
Preload_ParticleModuleColorGraphStream
==============
*/

void __fastcall Preload_ParticleModuleColorGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleColorGraphStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleSizeGraphArray
==============
*/

void __fastcall Load_ParticleModuleSizeGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleSizeGraphArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleInitSpawn
==============
*/

void __fastcall Postload_ParticleModuleInitSpawn(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleInitSpawn@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleModuleEmissiveGraph
==============
*/

void __fastcall Postload_ParticleModuleEmissiveGraph(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleEmissiveGraph@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleModuleInitDismemberStream
==============
*/

void __fastcall Preload_ParticleModuleInitDismemberStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitDismemberStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleTestPos
==============
*/

void __fastcall Postload_ParticleModuleTestPos(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleTestPos@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_ParticleFloatRange
==============
*/

void Load_ProcessStructLayout_ParticleFloatRange(void)
{
  ?Load_ProcessStructLayout_ParticleFloatRange@@YAXXZ();
}

/*
==============
AllocLoad_ParticleModuleInitSpawn
==============
*/

ParticleModuleInitSpawn *__fastcall AllocLoad_ParticleModuleInitSpawn()
{
  return ?AllocLoad_ParticleModuleInitSpawn@@YAPEAUParticleModuleInitSpawn@@XZ();
}

/*
==============
Load_ParticleModuleInitVolumetricStream
==============
*/

void __fastcall Load_ParticleModuleInitVolumetricStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitVolumetricStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModulePhysicsLight
==============
*/

int __fastcall Mark_ParticleModulePhysicsLight()
{
  return ?Mark_ParticleModulePhysicsLight@@YAHXZ();
}

/*
==============
Postload_ParticleModuleInitFlareArray
==============
*/

void __fastcall Postload_ParticleModuleInitFlareArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitFlareArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleCurveControlPointDefArray
==============
*/

int __fastcall Mark_ParticleCurveControlPointDefArray(const unsigned __int64 count)
{
  return ?Mark_ParticleCurveControlPointDefArray@@YAH_K@Z(count);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitRelativeVelocity
==============
*/

void Load_ProcessStructLayout_ParticleModuleInitRelativeVelocity(void)
{
  ?Load_ProcessStructLayout_ParticleModuleInitRelativeVelocity@@YAXXZ();
}

/*
==============
Load_ParticleModuleEmissionGraph
==============
*/

void __fastcall Load_ParticleModuleEmissionGraph(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleEmissionGraph@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleMarkVisualsStream
==============
*/

void __fastcall Preload_ParticleMarkVisualsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleMarkVisualsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitDecal
==============
*/

void Load_ProcessStructLayout_ParticleModuleInitDecal(void)
{
  ?Load_ProcessStructLayout_ParticleModuleInitDecal@@YAXXZ();
}

/*
==============
AllocLoad_ParticleModuleScaleByDistance
==============
*/

ParticleModuleScaleByDistance *__fastcall AllocLoad_ParticleModuleScaleByDistance()
{
  return ?AllocLoad_ParticleModuleScaleByDistance@@YAPEAUParticleModuleScaleByDistance@@XZ();
}

/*
==============
Load_ParticleSpawnShapeType
==============
*/

void __fastcall Load_ParticleSpawnShapeType(const DBStreamStart streamStart)
{
  ?Load_ParticleSpawnShapeType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleEmissiveVersionCurvesArray
==============
*/

int __fastcall Mark_ParticleEmissiveVersionCurvesArray(const unsigned __int64 count)
{
  return ?Mark_ParticleEmissiveVersionCurvesArray@@YAH_K@Z(count);
}

/*
==============
Postload_ParticleModuleInitGeoTrail
==============
*/

void __fastcall Postload_ParticleModuleInitGeoTrail(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleInitGeoTrail@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ParticleModuleGravity
==============
*/

ParticleModuleGravity *__fastcall AllocLoad_ParticleModuleGravity()
{
  return ?AllocLoad_ParticleModuleGravity@@YAPEAUParticleModuleGravity@@XZ();
}

/*
==============
Postload_ParticleModulePhysicsRayCastArray
==============
*/

void __fastcall Postload_ParticleModulePhysicsRayCastArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModulePhysicsRayCastArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ParticleModuleColorLerp
==============
*/

ParticleModuleColorLerp *__fastcall AllocLoad_ParticleModuleColorLerp()
{
  return ?AllocLoad_ParticleModuleColorLerp@@YAPEAUParticleModuleColorLerp@@XZ();
}

/*
==============
Load_ParticleInstancePoolActionArray
==============
*/

void __fastcall Load_ParticleInstancePoolActionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleInstancePoolActionArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleInitVectorField
==============
*/

void __fastcall Preload_ParticleModuleInitVectorField(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleInitVectorField@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ParticleModuleAttractor
==============
*/

ParticleModuleAttractor *__fastcall AllocPreload_ParticleModuleAttractor()
{
  return ?AllocPreload_ParticleModuleAttractor@@YAPEAUParticleModuleAttractor@@XZ();
}

/*
==============
Mark_ParticleModuleInitFlare
==============
*/

int __fastcall Mark_ParticleModuleInitFlare()
{
  return ?Mark_ParticleModuleInitFlare@@YAHXZ();
}

/*
==============
Load_ParticleRelativeVelocityType
==============
*/

void __fastcall Load_ParticleRelativeVelocityType(const DBStreamStart streamStart)
{
  ?Load_ParticleRelativeVelocityType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleModuleInitSpawnShapeSphere
==============
*/

int __fastcall Mark_ParticleModuleInitSpawnShapeSphere()
{
  return ?Mark_ParticleModuleInitSpawnShapeSphere@@YAHXZ();
}

/*
==============
Preload_ParticleModuleTestAgeStream
==============
*/

void __fastcall Preload_ParticleModuleTestAgeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleTestAgeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleEmissiveVersionCurvesStream
==============
*/

void __fastcall Load_ParticleEmissiveVersionCurvesStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleEmissiveVersionCurvesStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleAxesFlags
==============
*/

void __fastcall Load_ParticleModuleAxesFlags(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleAxesFlags@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ParticleModuleInitRunner
==============
*/

ParticleModuleInitRunner *__fastcall AllocPreload_ParticleModuleInitRunner()
{
  return ?AllocPreload_ParticleModuleInitRunner@@YAPEAUParticleModuleInitRunner@@XZ();
}

/*
==============
Preload_ParticleModuleInitParticleSimStream
==============
*/

void __fastcall Preload_ParticleModuleInitParticleSimStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitParticleSimStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleUseOrientationOptionsArray
==============
*/

void __fastcall Postload_ParticleUseOrientationOptionsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleUseOrientationOptionsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleSpawnShapeTypeArray
==============
*/

void __fastcall Postload_ParticleSpawnShapeTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleSpawnShapeTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleUseScaleOptionsArray
==============
*/

void __fastcall Postload_ParticleUseScaleOptionsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleUseScaleOptionsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleInitDismember
==============
*/

void __fastcall Preload_ParticleModuleInitDismember(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleInitDismember@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleGravityStateStream
==============
*/

void __fastcall Load_ParticleGravityStateStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleGravityStateStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ParticleEmissiveCurves
==============
*/

ParticleEmissiveCurves *__fastcall AllocPreload_ParticleEmissiveCurves()
{
  return ?AllocPreload_ParticleEmissiveCurves@@YAPEAW4ParticleEmissiveCurves@@XZ();
}

/*
==============
Postload_ParticleCurveDefStream
==============
*/

void __fastcall Postload_ParticleCurveDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleCurveDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleInitAtlas
==============
*/

void __fastcall Postload_ParticleModuleInitAtlas(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleInitAtlas@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_ParticleEmissiveCurves
==============
*/

void Load_ProcessStructLayout_ParticleEmissiveCurves(void)
{
  ?Load_ProcessStructLayout_ParticleEmissiveCurves@@YAXXZ();
}

/*
==============
AllocPostload_ParticleSpawnShapeType
==============
*/

ParticleSpawnShapeType *__fastcall AllocPostload_ParticleSpawnShapeType()
{
  return ?AllocPostload_ParticleSpawnShapeType@@YAPEAW4ParticleSpawnShapeType@@XZ();
}

/*
==============
AllocLoad_ParticleStateDef
==============
*/

ParticleStateDef *__fastcall AllocLoad_ParticleStateDef()
{
  return ?AllocLoad_ParticleStateDef@@YAPEAUParticleStateDef@@XZ();
}

/*
==============
AllocLoad_ParticleModuleIntensityGraph
==============
*/

ParticleModuleIntensityGraph *__fastcall AllocLoad_ParticleModuleIntensityGraph()
{
  return ?AllocLoad_ParticleModuleIntensityGraph@@YAPEAUParticleModuleIntensityGraph@@XZ();
}

/*
==============
Postload_ParticleModuleTestEventHandlerDataArray
==============
*/

void __fastcall Postload_ParticleModuleTestEventHandlerDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleTestEventHandlerDataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ParticleModuleInitSpawnShapeMesh
==============
*/

ParticleModuleInitSpawnShapeMesh *__fastcall AllocPostload_ParticleModuleInitSpawnShapeMesh()
{
  return ?AllocPostload_ParticleModuleInitSpawnShapeMesh@@YAPEAUParticleModuleInitSpawnShapeMesh@@XZ();
}

/*
==============
Mark_ParticleGravityStateArray
==============
*/

int __fastcall Mark_ParticleGravityStateArray(const unsigned __int64 count)
{
  return ?Mark_ParticleGravityStateArray@@YAH_K@Z(count);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleTestDeath
==============
*/

void Load_ProcessStructLayout_ParticleModuleTestDeath(void)
{
  ?Load_ProcessStructLayout_ParticleModuleTestDeath@@YAXXZ();
}

/*
==============
AllocPreload_ParticleModuleGravity
==============
*/

ParticleModuleGravity *__fastcall AllocPreload_ParticleModuleGravity()
{
  return ?AllocPreload_ParticleModuleGravity@@YAPEAUParticleModuleGravity@@XZ();
}

/*
==============
Postload_ParticleShaderGraphCurvesStream
==============
*/

void __fastcall Postload_ParticleShaderGraphCurvesStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleShaderGraphCurvesStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ParticleInstancePoolType
==============
*/

ParticleInstancePoolType *__fastcall AllocPreload_ParticleInstancePoolType()
{
  return ?AllocPreload_ParticleInstancePoolType@@YAPEAW4ParticleInstancePoolType@@XZ();
}

/*
==============
Mark_ParticleModuleInitLightOmni
==============
*/

int __fastcall Mark_ParticleModuleInitLightOmni()
{
  return ?Mark_ParticleModuleInitLightOmni@@YAHXZ();
}

/*
==============
Load_ParticleModuleInitGeoTrailArray
==============
*/

void __fastcall Load_ParticleModuleInitGeoTrailArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitGeoTrailArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleGroupIDArray
==============
*/

int __fastcall Mark_ParticleGroupIDArray(const unsigned __int64 count)
{
  return ?Mark_ParticleGroupIDArray@@YAH_K@Z(count);
}

/*
==============
Load_ProcessStructLayout_ParticleCurveControlPointDef
==============
*/

void Load_ProcessStructLayout_ParticleCurveControlPointDef(void)
{
  ?Load_ProcessStructLayout_ParticleCurveControlPointDef@@YAXXZ();
}

/*
==============
Postload_ParticleModuleSizeGraphStream
==============
*/

void __fastcall Postload_ParticleModuleSizeGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleSizeGraphStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleRotationGraphStream
==============
*/

void __fastcall Postload_ParticleModuleRotationGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleRotationGraphStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleInitSpawnShapeSphereArray
==============
*/

int __fastcall Mark_ParticleModuleInitSpawnShapeSphereArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleInitSpawnShapeSphereArray@@YAH_K@Z(count);
}

/*
==============
Preload_ParticleInstancePoolType
==============
*/

void __fastcall Preload_ParticleInstancePoolType(const DBStreamStart streamStart)
{
  ?Preload_ParticleInstancePoolType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleModuleShaderGraphArray
==============
*/

void __fastcall Preload_ParticleModuleShaderGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleShaderGraphArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleFlagsStream
==============
*/

void __fastcall Postload_ParticleModuleFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleFlagsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleInitSpawnShapeBoxArray
==============
*/

int __fastcall Mark_ParticleModuleInitSpawnShapeBoxArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleInitSpawnShapeBoxArray@@YAH_K@Z(count);
}

/*
==============
Load_ParticleModuleRotationGraphArray
==============
*/

void __fastcall Load_ParticleModuleRotationGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleRotationGraphArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleEmissiveCurvesStream
==============
*/

void __fastcall Preload_ParticleEmissiveCurvesStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleEmissiveCurvesStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleSpawnFlags
==============
*/

int __fastcall Mark_ParticleSpawnFlags()
{
  return ?Mark_ParticleSpawnFlags@@YAHXZ();
}

/*
==============
AllocPreload_ParticleModuleParentVelocityGraph
==============
*/

ParticleModuleParentVelocityGraph *__fastcall AllocPreload_ParticleModuleParentVelocityGraph()
{
  return ?AllocPreload_ParticleModuleParentVelocityGraph@@YAPEAUParticleModuleParentVelocityGraph@@XZ();
}

/*
==============
AllocPreload_ParticleModuleType
==============
*/

ParticleModuleType *__fastcall AllocPreload_ParticleModuleType()
{
  return ?AllocPreload_ParticleModuleType@@YAPEAW4ParticleModuleType@@XZ();
}

/*
==============
AllocPostload_ParticleCurveDef
==============
*/

ParticleCurveDef *__fastcall AllocPostload_ParticleCurveDef()
{
  return ?AllocPostload_ParticleCurveDef@@YAPEAUParticleCurveDef@@XZ();
}

/*
==============
Preload_ParticleModuleTypeStream
==============
*/

void __fastcall Preload_ParticleModuleTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleInitSpawnShapeEllipsoidArray
==============
*/

void __fastcall Postload_ParticleModuleInitSpawnShapeEllipsoidArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitSpawnShapeEllipsoidArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleEmissiveGraphStream
==============
*/

void __fastcall Postload_ParticleModuleEmissiveGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleEmissiveGraphStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ParticleIntRange
==============
*/

ParticleIntRange *__fastcall AllocPreload_ParticleIntRange()
{
  return ?AllocPreload_ParticleIntRange@@YAPEAUParticleIntRange@@XZ();
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitLightOmni
==============
*/

void Load_ProcessStructLayout_ParticleModuleInitLightOmni(void)
{
  ?Load_ProcessStructLayout_ParticleModuleInitLightOmni@@YAXXZ();
}

/*
==============
Load_ParticleLinkedAssetListDefStream
==============
*/

void __fastcall Load_ParticleLinkedAssetListDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleLinkedAssetListDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleImpactDirectionStream
==============
*/

void __fastcall Load_ParticleImpactDirectionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleImpactDirectionStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitCloudStream
==============
*/

void __fastcall Load_ParticleModuleInitCloudStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitCloudStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleInitFlareArray
==============
*/

void __fastcall Preload_ParticleModuleInitFlareArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitFlareArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitSpawnShapeBox
==============
*/

void __fastcall Load_ParticleModuleInitSpawnShapeBox(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleInitSpawnShapeBox@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleModuleIntensityGraphArray
==============
*/

void __fastcall Postload_ParticleModuleIntensityGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleIntensityGraphArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleSystemDefStream
==============
*/

void __fastcall Postload_ParticleSystemDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleSystemDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModulePositionGraphStream
==============
*/

void __fastcall Preload_ParticleModulePositionGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModulePositionGraphStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleInitSound
==============
*/

void __fastcall Preload_ParticleModuleInitSound(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleInitSound@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticlePhysicsFXDataArray
==============
*/

void __fastcall Postload_ParticlePhysicsFXDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticlePhysicsFXDataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleTypeDefStream
==============
*/

void __fastcall Postload_ParticleModuleTypeDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleTypeDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleForceArray
==============
*/

void __fastcall Postload_ParticleModuleForceArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleForceArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleInitPlayerFacingStream
==============
*/

void __fastcall Preload_ParticleModuleInitPlayerFacingStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitPlayerFacingStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ParticleGroupID
==============
*/

void Load_ProcessStructLayout_ParticleGroupID(void)
{
  ?Load_ProcessStructLayout_ParticleGroupID@@YAXXZ();
}

/*
==============
Postload_ParticleModuleInitAtlasArray
==============
*/

void __fastcall Postload_ParticleModuleInitAtlasArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitAtlasArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModulePositionGraph
==============
*/

void __fastcall Load_ParticleModulePositionGraph(const DBStreamStart streamStart)
{
  ?Load_ParticleModulePositionGraph@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleStateDefFlagsArray
==============
*/

void __fastcall Postload_ParticleStateDefFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleStateDefFlagsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleScaleByDistanceArray
==============
*/

void __fastcall Preload_ParticleModuleScaleByDistanceArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleScaleByDistanceArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleUseOrientationOptions
==============
*/

int __fastcall Mark_ParticleUseOrientationOptions()
{
  return ?Mark_ParticleUseOrientationOptions@@YAHXZ();
}

/*
==============
Load_ParticleInstancePoolTypeArray
==============
*/

void __fastcall Load_ParticleInstancePoolTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleInstancePoolTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModulePositionGraphStream
==============
*/

void __fastcall Load_ParticleModulePositionGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModulePositionGraphStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleTestGravityArray
==============
*/

void __fastcall Postload_ParticleModuleTestGravityArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleTestGravityArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ParticleMirrorTextureType
==============
*/

void Load_ProcessStructLayout_ParticleMirrorTextureType(void)
{
  ?Load_ProcessStructLayout_ParticleMirrorTextureType@@YAXXZ();
}

/*
==============
Preload_ParticleModuleInitRotationArray
==============
*/

void __fastcall Preload_ParticleModuleInitRotationArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitRotationArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ParticleModuleInitAttributes
==============
*/

ParticleModuleInitAttributes *__fastcall AllocLoad_ParticleModuleInitAttributes()
{
  return ?AllocLoad_ParticleModuleInitAttributes@@YAPEAUParticleModuleInitAttributes@@XZ();
}

/*
==============
Postload_ParticleModuleInitParticleSimStream
==============
*/

void __fastcall Postload_ParticleModuleInitParticleSimStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitParticleSimStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleSizeGraphArray
==============
*/

void __fastcall Postload_ParticleModuleSizeGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleSizeGraphArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleInitCloudArray
==============
*/

int __fastcall Mark_ParticleModuleInitCloudArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleInitCloudArray@@YAH_K@Z(count);
}

/*
==============
Load_ParticleModuleInitDecalStream
==============
*/

void __fastcall Load_ParticleModuleInitDecalStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitDecalStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitAttributes
==============
*/

void Load_ProcessStructLayout_ParticleModuleInitAttributes(void)
{
  ?Load_ProcessStructLayout_ParticleModuleInitAttributes@@YAXXZ();
}

/*
==============
Preload_ParticleModuleForceDragGraphStream
==============
*/

void __fastcall Preload_ParticleModuleForceDragGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleForceDragGraphStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleInitSpawnShapeMeshStream
==============
*/

void __fastcall Postload_ParticleModuleInitSpawnShapeMeshStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitSpawnShapeMeshStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitRelativeVelocity
==============
*/

void __fastcall Load_ParticleModuleInitRelativeVelocity(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleInitRelativeVelocity@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleRenderOptionsStream
==============
*/

void __fastcall Postload_ParticleRenderOptionsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleRenderOptionsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleEmitterDefStream
==============
*/

void __fastcall Preload_ParticleEmitterDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleEmitterDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleIntensityGraph
==============
*/

void __fastcall Load_ParticleModuleIntensityGraph(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleIntensityGraph@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ParticleModuleTemperatureGraph
==============
*/

ParticleModuleTemperatureGraph *__fastcall AllocPreload_ParticleModuleTemperatureGraph()
{
  return ?AllocPreload_ParticleModuleTemperatureGraph@@YAPEAUParticleModuleTemperatureGraph@@XZ();
}

/*
==============
Load_ParticleShaderGraphOptionsArray
==============
*/

void __fastcall Load_ParticleShaderGraphOptionsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleShaderGraphOptionsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitKillWrapBoxStream
==============
*/

void __fastcall Load_ParticleModuleInitKillWrapBoxStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitKillWrapBoxStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleGravityStateArray
==============
*/

void __fastcall Preload_ParticleGravityStateArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleGravityStateArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleInitBeam
==============
*/

void __fastcall Preload_ParticleModuleInitBeam(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleInitBeam@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleSystemDefFlags
==============
*/

void __fastcall Postload_ParticleSystemDefFlags(const DBStreamStart streamStart)
{
  ?Postload_ParticleSystemDefFlags@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleModuleInitTailArray
==============
*/

void __fastcall Preload_ParticleModuleInitTailArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitTailArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleInitCameraOffset
==============
*/

int __fastcall Mark_ParticleModuleInitCameraOffset()
{
  return ?Mark_ParticleModuleInitCameraOffset@@YAHXZ();
}

/*
==============
Preload_ParticleDataFlags
==============
*/

void __fastcall Preload_ParticleDataFlags(const DBStreamStart streamStart)
{
  ?Preload_ParticleDataFlags@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleModuleInitDismemberArray
==============
*/

void __fastcall Load_ParticleModuleInitDismemberArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitDismemberArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleInitBeamFlagsStream
==============
*/

void __fastcall Postload_ParticleModuleInitBeamFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitBeamFlagsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitLightSpot
==============
*/

void __fastcall Load_ParticleModuleInitLightSpot(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleInitLightSpot@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleModuleEmissiveGraphArray
==============
*/

int __fastcall Mark_ParticleModuleEmissiveGraphArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleEmissiveGraphArray@@YAH_K@Z(count);
}

/*
==============
AllocPostload_ParticleModuleParentVelocityGraph
==============
*/

ParticleModuleParentVelocityGraph *__fastcall AllocPostload_ParticleModuleParentVelocityGraph()
{
  return ?AllocPostload_ParticleModuleParentVelocityGraph@@YAPEAUParticleModuleParentVelocityGraph@@XZ();
}

/*
==============
AllocPreload_ParticleModuleTypeDef
==============
*/

ParticleModuleTypeDef *__fastcall AllocPreload_ParticleModuleTypeDef()
{
  return ?AllocPreload_ParticleModuleTypeDef@@YAPEATParticleModuleTypeDef@@XZ();
}

/*
==============
Preload_ParticleModuleInitTailStream
==============
*/

void __fastcall Preload_ParticleModuleInitTailStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitTailStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleMirrorTextureTypeStream
==============
*/

void __fastcall Postload_ParticleMirrorTextureTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleMirrorTextureTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ParticleEmissiveVersionCurves
==============
*/

ParticleEmissiveVersionCurves *__fastcall AllocPreload_ParticleEmissiveVersionCurves()
{
  return ?AllocPreload_ParticleEmissiveVersionCurves@@YAPEAW4ParticleEmissiveVersionCurves@@XZ();
}

/*
==============
AllocPostload_ParticleModulePositionGraph
==============
*/

ParticleModulePositionGraph *__fastcall AllocPostload_ParticleModulePositionGraph()
{
  return ?AllocPostload_ParticleModulePositionGraph@@YAPEAUParticleModulePositionGraph@@XZ();
}

/*
==============
AllocPreload_ParticleModuleFlags
==============
*/

unsigned int *__fastcall AllocPreload_ParticleModuleFlags()
{
  return ?AllocPreload_ParticleModuleFlags@@YAPEAIXZ();
}

/*
==============
Mark_ParticleMarkVisuals
==============
*/

int __fastcall Mark_ParticleMarkVisuals()
{
  return ?Mark_ParticleMarkVisuals@@YAHXZ();
}

/*
==============
Load_ProcessStructLayout_ParticleModuleTestGravity
==============
*/

void Load_ProcessStructLayout_ParticleModuleTestGravity(void)
{
  ?Load_ProcessStructLayout_ParticleModuleTestGravity@@YAXXZ();
}

/*
==============
Mark_ParticleModuleColorLerp
==============
*/

int __fastcall Mark_ParticleModuleColorLerp()
{
  return ?Mark_ParticleModuleColorLerp@@YAHXZ();
}

/*
==============
Preload_ParticleEmitterDefFlags
==============
*/

void __fastcall Preload_ParticleEmitterDefFlags(const DBStreamStart streamStart)
{
  ?Preload_ParticleEmitterDefFlags@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleModuleRotationGraph3DStream
==============
*/

void __fastcall Preload_ParticleModuleRotationGraph3DStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleRotationGraph3DStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleTemperatureGraph
==============
*/

void __fastcall Postload_ParticleModuleTemperatureGraph(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleTemperatureGraph@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleModuleInitLightOmniStream
==============
*/

void __fastcall Preload_ParticleModuleInitLightOmniStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitLightOmniStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleTestAge
==============
*/

void Load_ProcessStructLayout_ParticleModuleTestAge(void)
{
  ?Load_ProcessStructLayout_ParticleModuleTestAge@@YAXXZ();
}

/*
==============
Load_ParticleModuleInitOrientedSpriteArray
==============
*/

void __fastcall Load_ParticleModuleInitOrientedSpriteArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitOrientedSpriteArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitBeamFlagsArray
==============
*/

void __fastcall Load_ParticleModuleInitBeamFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitBeamFlagsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModulePositionGraph
==============
*/

void __fastcall Preload_ParticleModulePositionGraph(const DBStreamStart streamStart)
{
  ?Preload_ParticleModulePositionGraph@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ParticleModuleInitBeamFlags
==============
*/

ParticleModuleInitBeamFlags *__fastcall AllocPreload_ParticleModuleInitBeamFlags()
{
  return ?AllocPreload_ParticleModuleInitBeamFlags@@YAPEAW4ParticleModuleInitBeamFlags@@XZ();
}

/*
==============
Postload_ParticleModuleTemperatureGraphStream
==============
*/

void __fastcall Postload_ParticleModuleTemperatureGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleTemperatureGraphStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitRelativeVelocityStream
==============
*/

void __fastcall Load_ParticleModuleInitRelativeVelocityStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitRelativeVelocityStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ParticleCurveControlPointDef
==============
*/

ParticleCurveControlPointDef *__fastcall AllocPostload_ParticleCurveControlPointDef()
{
  return ?AllocPostload_ParticleCurveControlPointDef@@YAPEAUParticleCurveControlPointDef@@XZ();
}

/*
==============
AllocPreload_ParticleModuleAxis
==============
*/

ParticleModuleAxis *__fastcall AllocPreload_ParticleModuleAxis()
{
  return ?AllocPreload_ParticleModuleAxis@@YAPEAW4ParticleModuleAxis@@XZ();
}

/*
==============
Postload_ParticleModuleInitVolumetricArray
==============
*/

void __fastcall Postload_ParticleModuleInitVolumetricArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitVolumetricArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleImpactDirectionArray
==============
*/

void __fastcall Load_ParticleImpactDirectionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleImpactDirectionArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleGravityStateStream
==============
*/

void __fastcall Preload_ParticleGravityStateStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleGravityStateStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitRotation
==============
*/

void __fastcall Load_ParticleModuleInitRotation(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleInitRotation@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ParticleStateDefFlags
==============
*/

unsigned __int64 *__fastcall AllocLoad_ParticleStateDefFlags()
{
  return ?AllocLoad_ParticleStateDefFlags@@YAPEA_KXZ();
}

/*
==============
Postload_ParticleUseScaleOptionsStream
==============
*/

void __fastcall Postload_ParticleUseScaleOptionsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleUseScaleOptionsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleFloatRangeStream
==============
*/

void __fastcall Preload_ParticleFloatRangeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleFloatRangeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitSpawnShapeBoxArray
==============
*/

void __fastcall Load_ParticleModuleInitSpawnShapeBoxArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitSpawnShapeBoxArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ParticleModuleRotationGraph3D
==============
*/

ParticleModuleRotationGraph3D *__fastcall AllocPostload_ParticleModuleRotationGraph3D()
{
  return ?AllocPostload_ParticleModuleRotationGraph3D@@YAPEAUParticleModuleRotationGraph3D@@XZ();
}

/*
==============
AllocPreload_ParticleModifier
==============
*/

ParticleModifier *__fastcall AllocPreload_ParticleModifier()
{
  return ?AllocPreload_ParticleModifier@@YAPEAUParticleModifier@@XZ();
}

/*
==============
Load_ParticleModuleInitSpawnShapeMeshStream
==============
*/

void __fastcall Load_ParticleModuleInitSpawnShapeMeshStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitSpawnShapeMeshStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ParticleModuleInitOcclusionQuery
==============
*/

ParticleModuleInitOcclusionQuery *__fastcall AllocPostload_ParticleModuleInitOcclusionQuery()
{
  return ?AllocPostload_ParticleModuleInitOcclusionQuery@@YAPEAUParticleModuleInitOcclusionQuery@@XZ();
}

/*
==============
Load_ParticleModulePhysicsLightArray
==============
*/

void __fastcall Load_ParticleModulePhysicsLightArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModulePhysicsLightArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleImpactDirectionArray
==============
*/

int __fastcall Mark_ParticleImpactDirectionArray(const unsigned __int64 count)
{
  return ?Mark_ParticleImpactDirectionArray@@YAH_K@Z(count);
}

/*
==============
Preload_ParticleModuleColorGraphArray
==============
*/

void __fastcall Preload_ParticleModuleColorGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleColorGraphArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleTestBirthArray
==============
*/

void __fastcall Postload_ParticleModuleTestBirthArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleTestBirthArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleInitRunner
==============
*/

void __fastcall Postload_ParticleModuleInitRunner(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleInitRunner@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleSpawnFlagsArray
==============
*/

void __fastcall Postload_ParticleSpawnFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleSpawnFlagsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleGroupDef
==============
*/

void __fastcall Load_ParticleModuleGroupDef(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleGroupDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitAtlas
==============
*/

void Load_ProcessStructLayout_ParticleModuleInitAtlas(void)
{
  ?Load_ProcessStructLayout_ParticleModuleInitAtlas@@YAXXZ();
}

/*
==============
Load_ParticleInstancePoolTypeStream
==============
*/

void __fastcall Load_ParticleInstancePoolTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleInstancePoolTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleTestImpactStream
==============
*/

void __fastcall Load_ParticleModuleTestImpactStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleTestImpactStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleAxis
==============
*/

void __fastcall Preload_ParticleModuleAxis(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleAxis@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitVolumetric
==============
*/

void Load_ProcessStructLayout_ParticleModuleInitVolumetric(void)
{
  ?Load_ProcessStructLayout_ParticleModuleInitVolumetric@@YAXXZ();
}

/*
==============
Preload_ParticleModuleInitRelativeVelocityArray
==============
*/

void __fastcall Preload_ParticleModuleInitRelativeVelocityArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitRelativeVelocityArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_Particle_MaterialData
==============
*/

void Load_ProcessStructLayout_Particle_MaterialData(void)
{
  ?Load_ProcessStructLayout_Particle_MaterialData@@YAXXZ();
}

/*
==============
AllocPreload_ParticleFloatRange
==============
*/

ParticleFloatRange *__fastcall AllocPreload_ParticleFloatRange()
{
  return ?AllocPreload_ParticleFloatRange@@YAPEAUParticleFloatRange@@XZ();
}

/*
==============
Preload_ParticleCurveControlPointDefArray
==============
*/

void __fastcall Preload_ParticleCurveControlPointDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleCurveControlPointDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleEmitterDefFlagsArray
==============
*/

void __fastcall Load_ParticleEmitterDefFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleEmitterDefFlagsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleEmissiveCurvesArray
==============
*/

void __fastcall Postload_ParticleEmissiveCurvesArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleEmissiveCurvesArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ParticleUseScaleOptions
==============
*/

void Load_ProcessStructLayout_ParticleUseScaleOptions(void)
{
  ?Load_ProcessStructLayout_ParticleUseScaleOptions@@YAXXZ();
}

/*
==============
Mark_ParticleModuleInitAtlas
==============
*/

int __fastcall Mark_ParticleModuleInitAtlas()
{
  return ?Mark_ParticleModuleInitAtlas@@YAHXZ();
}

/*
==============
Preload_ParticleInstancePoolActionArray
==============
*/

void __fastcall Preload_ParticleInstancePoolActionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleInstancePoolActionArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ParticleModuleForceDragGraph
==============
*/

ParticleModuleForceDragGraph *__fastcall AllocPostload_ParticleModuleForceDragGraph()
{
  return ?AllocPostload_ParticleModuleForceDragGraph@@YAPEAUParticleModuleForceDragGraph@@XZ();
}

/*
==============
Preload_ParticleEmissiveVersionCurvesStream
==============
*/

void __fastcall Preload_ParticleEmissiveVersionCurvesStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleEmissiveVersionCurvesStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleRotationGraph3DStream
==============
*/

void __fastcall Load_ParticleModuleRotationGraph3DStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleRotationGraph3DStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleAttractor
==============
*/

void __fastcall Postload_ParticleModuleAttractor(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleAttractor@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleModuleTestGravity
==============
*/

void __fastcall Load_ParticleModuleTestGravity(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleTestGravity@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleModulePositionGraphArray
==============
*/

int __fastcall Mark_ParticleModulePositionGraphArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModulePositionGraphArray@@YAH_K@Z(count);
}

/*
==============
Preload_ParticleModulePhysicsLightArray
==============
*/

void __fastcall Preload_ParticleModulePhysicsLightArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModulePhysicsLightArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ParticleModulePhysicsLight
==============
*/

void Load_ProcessStructLayout_ParticleModulePhysicsLight(void)
{
  ?Load_ProcessStructLayout_ParticleModulePhysicsLight@@YAXXZ();
}

/*
==============
Preload_ParticleModuleInitModel
==============
*/

void __fastcall Preload_ParticleModuleInitModel(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleInitModel@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleModuleFlagsArray
==============
*/

void __fastcall Load_ParticleModuleFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleFlagsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleInitMaterialArray
==============
*/

void __fastcall Postload_ParticleModuleInitMaterialArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitMaterialArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleDefStream
==============
*/

void __fastcall Postload_ParticleModuleDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleInitRelativeVelocityArray
==============
*/

void __fastcall Postload_ParticleModuleInitRelativeVelocityArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitRelativeVelocityArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleInitParticleSim
==============
*/

void __fastcall Postload_ParticleModuleInitParticleSim(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleInitParticleSim@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleElementTypeStream
==============
*/

void __fastcall Load_ParticleElementTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleElementTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ParticleModuleInitMaterial
==============
*/

ParticleModuleInitMaterial *__fastcall AllocLoad_ParticleModuleInitMaterial()
{
  return ?AllocLoad_ParticleModuleInitMaterial@@YAPEAUParticleModuleInitMaterial@@XZ();
}

/*
==============
Postload_ParticleSystemDefRefArray
==============
*/

void __fastcall Postload_ParticleSystemDefRefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleSystemDefRefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleInstancePoolTypeArray
==============
*/

void __fastcall Postload_ParticleInstancePoolTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleInstancePoolTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleSizeGraph
==============
*/

void __fastcall Load_ParticleModuleSizeGraph(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleSizeGraph@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_ParticleModuleGravity
==============
*/

ParticleModuleGravity *__fastcall AllocPostload_ParticleModuleGravity()
{
  return ?AllocPostload_ParticleModuleGravity@@YAPEAUParticleModuleGravity@@XZ();
}

/*
==============
Postload_ParticleGravityOptionsArray
==============
*/

void __fastcall Postload_ParticleGravityOptionsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleGravityOptionsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ParticleSpawnFlags
==============
*/

ParticleSpawnFlags *__fastcall AllocLoad_ParticleSpawnFlags()
{
  return ?AllocLoad_ParticleSpawnFlags@@YAPEAW4ParticleSpawnFlags@@XZ();
}

/*
==============
Load_ParticleEmitterDef
==============
*/

void __fastcall Load_ParticleEmitterDef(const DBStreamStart streamStart)
{
  ?Load_ParticleEmitterDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleModuleFlags
==============
*/

void __fastcall Load_ParticleModuleFlags(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleFlags@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticlePhysicsFXData
==============
*/

void __fastcall Postload_ParticlePhysicsFXData(const DBStreamStart streamStart)
{
  ?Postload_ParticlePhysicsFXData@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_ParticleInstancePoolType
==============
*/

ParticleInstancePoolType *__fastcall AllocPostload_ParticleInstancePoolType()
{
  return ?AllocPostload_ParticleInstancePoolType@@YAPEAW4ParticleInstancePoolType@@XZ();
}

/*
==============
Preload_ParticleGravityOptionsStream
==============
*/

void __fastcall Preload_ParticleGravityOptionsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleGravityOptionsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleStateDefFlags
==============
*/

void __fastcall Postload_ParticleStateDefFlags(const DBStreamStart streamStart)
{
  ?Postload_ParticleStateDefFlags@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleModuleForceDragGraphArray
==============
*/

void __fastcall Preload_ParticleModuleForceDragGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleForceDragGraphArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ParticleModuleVectorFieldGraph
==============
*/

ParticleModuleVectorFieldGraph *__fastcall AllocPostload_ParticleModuleVectorFieldGraph()
{
  return ?AllocPostload_ParticleModuleVectorFieldGraph@@YAPEAUParticleModuleVectorFieldGraph@@XZ();
}

/*
==============
AllocLoad_ParticleSpawnMeshAssetDef
==============
*/

ParticleSpawnMeshAssetDef *__fastcall AllocLoad_ParticleSpawnMeshAssetDef()
{
  return ?AllocLoad_ParticleSpawnMeshAssetDef@@YAPEAUParticleSpawnMeshAssetDef@@XZ();
}

/*
==============
Load_ParticleModuleTestTimeInStateStream
==============
*/

void __fastcall Load_ParticleModuleTestTimeInStateStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleTestTimeInStateStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleInitSpawnShapeBoxStream
==============
*/

void __fastcall Preload_ParticleModuleInitSpawnShapeBoxStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitSpawnShapeBoxStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModulePhysicsLightStream
==============
*/

void __fastcall Load_ParticleModulePhysicsLightStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModulePhysicsLightStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ParticleModuleRotationGraph3D
==============
*/

ParticleModuleRotationGraph3D *__fastcall AllocPreload_ParticleModuleRotationGraph3D()
{
  return ?AllocPreload_ParticleModuleRotationGraph3D@@YAPEAUParticleModuleRotationGraph3D@@XZ();
}

/*
==============
Load_ParticleShaderGraphOptionsStream
==============
*/

void __fastcall Load_ParticleShaderGraphOptionsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleShaderGraphOptionsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_FxMarkProjectionAxisArray
==============
*/

void __fastcall Postload_FxMarkProjectionAxisArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_FxMarkProjectionAxisArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleSystemDefRefArray
==============
*/

int __fastcall Mark_ParticleSystemDefRefArray(const unsigned __int64 count)
{
  return ?Mark_ParticleSystemDefRefArray@@YAH_K@Z(count);
}

/*
==============
Preload_ParticleSystemDefPtrArray
==============
*/

void __fastcall Preload_ParticleSystemDefPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleSystemDefPtrArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitPlayerFacing
==============
*/

void __fastcall Load_ParticleModuleInitPlayerFacing(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleInitPlayerFacing@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleModuleColorGraphArray
==============
*/

void __fastcall Postload_ParticleModuleColorGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleColorGraphArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleScaleByDistance
==============
*/

int __fastcall Mark_ParticleModuleScaleByDistance()
{
  return ?Mark_ParticleModuleScaleByDistance@@YAHXZ();
}

/*
==============
Preload_ParticleModuleTestGravityArray
==============
*/

void __fastcall Preload_ParticleModuleTestGravityArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleTestGravityArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleStateDefStream
==============
*/

void __fastcall Postload_ParticleStateDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleStateDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ParticleLinkedAssetDef
==============
*/

ParticleLinkedAssetDef *__fastcall AllocPreload_ParticleLinkedAssetDef()
{
  return ?AllocPreload_ParticleLinkedAssetDef@@YAPEATParticleLinkedAssetDef@@XZ();
}

/*
==============
Preload_ParticleModuleTestBirth
==============
*/

void __fastcall Preload_ParticleModuleTestBirth(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleTestBirth@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleModuleTypeArray
==============
*/

void __fastcall Load_ParticleModuleTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleInitBeamFlags
==============
*/

void __fastcall Preload_ParticleModuleInitBeamFlags(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleInitBeamFlags@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleSizeGraph
==============
*/

void Load_ProcessStructLayout_ParticleModuleSizeGraph(void)
{
  ?Load_ProcessStructLayout_ParticleModuleSizeGraph@@YAXXZ();
}

/*
==============
AllocPreload_ParticleCurveControlPointDef
==============
*/

ParticleCurveControlPointDef *__fastcall AllocPreload_ParticleCurveControlPointDef()
{
  return ?AllocPreload_ParticleCurveControlPointDef@@YAPEAUParticleCurveControlPointDef@@XZ();
}

/*
==============
AllocPostload_ParticleModuleTestGravity
==============
*/

ParticleModuleTestGravity *__fastcall AllocPostload_ParticleModuleTestGravity()
{
  return ?AllocPostload_ParticleModuleTestGravity@@YAPEAUParticleModuleTestGravity@@XZ();
}

/*
==============
Preload_ParticleModuleEmissionGraphStream
==============
*/

void __fastcall Preload_ParticleModuleEmissionGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleEmissionGraphStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitSpawnShapeBoxStream
==============
*/

void __fastcall Load_ParticleModuleInitSpawnShapeBoxStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitSpawnShapeBoxStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ParticleModifier
==============
*/

void Load_ProcessStructLayout_ParticleModifier(void)
{
  ?Load_ProcessStructLayout_ParticleModifier@@YAXXZ();
}

/*
==============
Postload_ParticleLinkedAssetListDefStream
==============
*/

void __fastcall Postload_ParticleLinkedAssetListDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleLinkedAssetListDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_FxMarkProjectionAxisStream
==============
*/

void __fastcall Preload_FxMarkProjectionAxisStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_FxMarkProjectionAxisStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitDismember
==============
*/

void Load_ProcessStructLayout_ParticleModuleInitDismember(void)
{
  ?Load_ProcessStructLayout_ParticleModuleInitDismember@@YAXXZ();
}

/*
==============
Mark_ParticleModuleInitSpawnShapeMesh
==============
*/

int __fastcall Mark_ParticleModuleInitSpawnShapeMesh()
{
  return ?Mark_ParticleModuleInitSpawnShapeMesh@@YAHXZ();
}

/*
==============
Load_ProcessStructLayout_ParticleModuleTestTimeInState
==============
*/

void Load_ProcessStructLayout_ParticleModuleTestTimeInState(void)
{
  ?Load_ProcessStructLayout_ParticleModuleTestTimeInState@@YAXXZ();
}

/*
==============
Postload_ParticleModuleInitPlayerFacingStream
==============
*/

void __fastcall Postload_ParticleModuleInitPlayerFacingStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitPlayerFacingStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleAttractor
==============
*/

void Load_ProcessStructLayout_ParticleModuleAttractor(void)
{
  ?Load_ProcessStructLayout_ParticleModuleAttractor@@YAXXZ();
}

/*
==============
AllocPostload_ParticleModuleInitCloud
==============
*/

ParticleModuleInitCloud *__fastcall AllocPostload_ParticleModuleInitCloud()
{
  return ?AllocPostload_ParticleModuleInitCloud@@YAPEAUParticleModuleInitCloud@@XZ();
}

/*
==============
Postload_ParticleModuleInitRotationArray
==============
*/

void __fastcall Postload_ParticleModuleInitRotationArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitRotationArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleInitSpawnShapeCylinder
==============
*/

void __fastcall Postload_ParticleModuleInitSpawnShapeCylinder(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleInitSpawnShapeCylinder@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ParticleRelativeVelocityType
==============
*/

ParticleRelativeVelocityType *__fastcall AllocPreload_ParticleRelativeVelocityType()
{
  return ?AllocPreload_ParticleRelativeVelocityType@@YAPEAW4ParticleRelativeVelocityType@@XZ();
}

/*
==============
Load_ParticleModuleTemperatureGraph
==============
*/

void __fastcall Load_ParticleModuleTemperatureGraph(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleTemperatureGraph@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleModuleSizeLerpStream
==============
*/

void __fastcall Load_ParticleModuleSizeLerpStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleSizeLerpStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleInitRunnerStream
==============
*/

void __fastcall Postload_ParticleModuleInitRunnerStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitRunnerStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitCloud
==============
*/

void __fastcall Load_ParticleModuleInitCloud(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleInitCloud@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_ParticleSpawnMeshAssetDef
==============
*/

ParticleSpawnMeshAssetDef *__fastcall AllocPostload_ParticleSpawnMeshAssetDef()
{
  return ?AllocPostload_ParticleSpawnMeshAssetDef@@YAPEAUParticleSpawnMeshAssetDef@@XZ();
}

/*
==============
Mark_ParticleSystemDefPtr
==============
*/

int __fastcall Mark_ParticleSystemDefPtr()
{
  return ?Mark_ParticleSystemDefPtr@@YAHXZ();
}

/*
==============
Postload_ParticleInstancePoolTypeStream
==============
*/

void __fastcall Postload_ParticleInstancePoolTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleInstancePoolTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ParticleImpactDirection
==============
*/

void Load_ProcessStructLayout_ParticleImpactDirection(void)
{
  ?Load_ProcessStructLayout_ParticleImpactDirection@@YAXXZ();
}

/*
==============
Load_ProcessStructLayout_ParticleModuleTypeDef
==============
*/

void Load_ProcessStructLayout_ParticleModuleTypeDef(void)
{
  ?Load_ProcessStructLayout_ParticleModuleTypeDef@@YAXXZ();
}

/*
==============
Mark_FxMarkProjectionAxisArray
==============
*/

int __fastcall Mark_FxMarkProjectionAxisArray(const unsigned __int64 count)
{
  return ?Mark_FxMarkProjectionAxisArray@@YAH_K@Z(count);
}

/*
==============
AllocLoad_ParticleSystemDefRef
==============
*/

ParticleSystemDefRef *__fastcall AllocLoad_ParticleSystemDefRef()
{
  return ?AllocLoad_ParticleSystemDefRef@@YAPEATParticleSystemDefRef@@XZ();
}

/*
==============
AllocLoad_ParticleModuleDef
==============
*/

ParticleModuleDef *__fastcall AllocLoad_ParticleModuleDef()
{
  return ?AllocLoad_ParticleModuleDef@@YAPEAUParticleModuleDef@@XZ();
}

/*
==============
Load_ParticleModuleInitSpawnShapeSphereStream
==============
*/

void __fastcall Load_ParticleModuleInitSpawnShapeSphereStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitSpawnShapeSphereStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleScaleByDistance
==============
*/

void __fastcall Preload_ParticleModuleScaleByDistance(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleScaleByDistance@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitParticleSim
==============
*/

void Load_ProcessStructLayout_ParticleModuleInitParticleSim(void)
{
  ?Load_ProcessStructLayout_ParticleModuleInitParticleSim@@YAXXZ();
}

/*
==============
AllocLoad_ParticleModuleInitPlayerFacing
==============
*/

ParticleModuleInitPlayerFacing *__fastcall AllocLoad_ParticleModuleInitPlayerFacing()
{
  return ?AllocLoad_ParticleModuleInitPlayerFacing@@YAPEAUParticleModuleInitPlayerFacing@@XZ();
}

/*
==============
Preload_ParticleModuleTestPosStream
==============
*/

void __fastcall Preload_ParticleModuleTestPosStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleTestPosStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ParticleModuleInitSound
==============
*/

ParticleModuleInitSound *__fastcall AllocPostload_ParticleModuleInitSound()
{
  return ?AllocPostload_ParticleModuleInitSound@@YAPEAUParticleModuleInitSound@@XZ();
}

/*
==============
AllocPreload_ParticleSpawnShapeType
==============
*/

ParticleSpawnShapeType *__fastcall AllocPreload_ParticleSpawnShapeType()
{
  return ?AllocPreload_ParticleSpawnShapeType@@YAPEAW4ParticleSpawnShapeType@@XZ();
}

/*
==============
Preload_ParticleSystemDef
==============
*/

void __fastcall Preload_ParticleSystemDef(const DBStreamStart streamStart)
{
  ?Preload_ParticleSystemDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitBeamFlags
==============
*/

void Load_ProcessStructLayout_ParticleModuleInitBeamFlags(void)
{
  ?Load_ProcessStructLayout_ParticleModuleInitBeamFlags@@YAXXZ();
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitModel
==============
*/

void Load_ProcessStructLayout_ParticleModuleInitModel(void)
{
  ?Load_ProcessStructLayout_ParticleModuleInitModel@@YAXXZ();
}

/*
==============
Postload_ParticleRenderOptions
==============
*/

void __fastcall Postload_ParticleRenderOptions(const DBStreamStart streamStart)
{
  ?Postload_ParticleRenderOptions@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleModuleInitMaterialArray
==============
*/

void __fastcall Preload_ParticleModuleInitMaterialArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitMaterialArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleColorLerpArray
==============
*/

int __fastcall Mark_ParticleModuleColorLerpArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleColorLerpArray@@YAH_K@Z(count);
}

/*
==============
Mark_ParticleEmitterDefFlagsArray
==============
*/

int __fastcall Mark_ParticleEmitterDefFlagsArray(const unsigned __int64 count)
{
  return ?Mark_ParticleEmitterDefFlagsArray@@YAH_K@Z(count);
}

/*
==============
Postload_ParticleCurveDefArray
==============
*/

void __fastcall Postload_ParticleCurveDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleCurveDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ParticleSpawnFlags
==============
*/

ParticleSpawnFlags *__fastcall AllocPreload_ParticleSpawnFlags()
{
  return ?AllocPreload_ParticleSpawnFlags@@YAPEAW4ParticleSpawnFlags@@XZ();
}

/*
==============
Load_ParticleUseVelocityOptionsArray
==============
*/

void __fastcall Load_ParticleUseVelocityOptionsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleUseVelocityOptionsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ParticleModuleIntensityGraph
==============
*/

ParticleModuleIntensityGraph *__fastcall AllocPreload_ParticleModuleIntensityGraph()
{
  return ?AllocPreload_ParticleModuleIntensityGraph@@YAPEAUParticleModuleIntensityGraph@@XZ();
}

/*
==============
Mark_ParticleModuleInitDecal
==============
*/

int __fastcall Mark_ParticleModuleInitDecal()
{
  return ?Mark_ParticleModuleInitDecal@@YAHXZ();
}

/*
==============
Postload_ParticleSpawnShapeTypeStream
==============
*/

void __fastcall Postload_ParticleSpawnShapeTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleSpawnShapeTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleSizeLerpArray
==============
*/

void __fastcall Postload_ParticleModuleSizeLerpArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleSizeLerpArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleTestDeath
==============
*/

void __fastcall Preload_ParticleModuleTestDeath(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleTestDeath@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleModuleColorLerpArray
==============
*/

void __fastcall Load_ParticleModuleColorLerpArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleColorLerpArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitRotationArray
==============
*/

void __fastcall Load_ParticleModuleInitRotationArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitRotationArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleAttractorStream
==============
*/

void __fastcall Postload_ParticleModuleAttractorStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleAttractorStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_FxMarkProjectionAxis
==============
*/

FxMarkProjectionAxis *__fastcall AllocPostload_FxMarkProjectionAxis()
{
  return ?AllocPostload_FxMarkProjectionAxis@@YAPEAW4FxMarkProjectionAxis@@XZ();
}

/*
==============
AllocPostload_ParticleModuleInitSpawn
==============
*/

ParticleModuleInitSpawn *__fastcall AllocPostload_ParticleModuleInitSpawn()
{
  return ?AllocPostload_ParticleModuleInitSpawn@@YAPEAUParticleModuleInitSpawn@@XZ();
}

/*
==============
Mark_ParticleModuleInitMirrorTextureArray
==============
*/

int __fastcall Mark_ParticleModuleInitMirrorTextureArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleInitMirrorTextureArray@@YAH_K@Z(count);
}

/*
==============
Postload_ParticleModuleColorLerpStream
==============
*/

void __fastcall Postload_ParticleModuleColorLerpStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleColorLerpStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleElementType
==============
*/

void __fastcall Preload_ParticleElementType(const DBStreamStart streamStart)
{
  ?Preload_ParticleElementType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleDataFlags
==============
*/

int __fastcall Mark_ParticleDataFlags()
{
  return ?Mark_ParticleDataFlags@@YAHXZ();
}

/*
==============
Load_ParticleModuleDefArray
==============
*/

void __fastcall Load_ParticleModuleDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleGravityOptions
==============
*/

void __fastcall Postload_ParticleGravityOptions(const DBStreamStart streamStart)
{
  ?Postload_ParticleGravityOptions@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ParticleUseOrientationOptions
==============
*/

ParticleUseOrientationOptions *__fastcall AllocLoad_ParticleUseOrientationOptions()
{
  return ?AllocLoad_ParticleUseOrientationOptions@@YAPEAW4ParticleUseOrientationOptions@@XZ();
}

/*
==============
AllocPostload_ParticleDataFlags
==============
*/

ParticleDataFlags *__fastcall AllocPostload_ParticleDataFlags()
{
  return ?AllocPostload_ParticleDataFlags@@YAPEAW4ParticleDataFlags@@XZ();
}

/*
==============
Load_ParticleModuleDef
==============
*/

void __fastcall Load_ParticleModuleDef(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleModuleInitMirrorTextureArray
==============
*/

void __fastcall Postload_ParticleModuleInitMirrorTextureArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitMirrorTextureArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleInitDecalStream
==============
*/

void __fastcall Postload_ParticleModuleInitDecalStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitDecalStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleStateDefFlagsStream
==============
*/

void __fastcall Postload_ParticleStateDefFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleStateDefFlagsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModulePhysicsRayCastArray
==============
*/

void __fastcall Load_ParticleModulePhysicsRayCastArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModulePhysicsRayCastArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleInitSpawnShapeEllipsoidArray
==============
*/

void __fastcall Preload_ParticleModuleInitSpawnShapeEllipsoidArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitSpawnShapeEllipsoidArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ParticleGravityOptions
==============
*/

ParticleGravityOptions *__fastcall AllocPreload_ParticleGravityOptions()
{
  return ?AllocPreload_ParticleGravityOptions@@YAPEAW4ParticleGravityOptions@@XZ();
}

/*
==============
AllocPostload_ParticleModuleInitDecal
==============
*/

ParticleModuleInitDecal *__fastcall AllocPostload_ParticleModuleInitDecal()
{
  return ?AllocPostload_ParticleModuleInitDecal@@YAPEAUParticleModuleInitDecal@@XZ();
}

/*
==============
Postload_ParticleModuleInitModelArray
==============
*/

void __fastcall Postload_ParticleModuleInitModelArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitModelArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleInitRunnerArray
==============
*/

void __fastcall Preload_ParticleModuleInitRunnerArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitRunnerArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleSizeLerpStream
==============
*/

void __fastcall Postload_ParticleModuleSizeLerpStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleSizeLerpStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleEmitterDefFlags
==============
*/

int __fastcall Mark_ParticleEmitterDefFlags()
{
  return ?Mark_ParticleEmitterDefFlags@@YAHXZ();
}

/*
==============
Preload_ParticleSystemDefRefStream
==============
*/

void __fastcall Preload_ParticleSystemDefRefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleSystemDefRefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleInitTailArray
==============
*/

int __fastcall Mark_ParticleModuleInitTailArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleInitTailArray@@YAH_K@Z(count);
}

/*
==============
Load_ProcessStructLayout_ParticleInstancePoolType
==============
*/

void Load_ProcessStructLayout_ParticleInstancePoolType(void)
{
  ?Load_ProcessStructLayout_ParticleInstancePoolType@@YAXXZ();
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitSpawnShapeBox
==============
*/

void Load_ProcessStructLayout_ParticleModuleInitSpawnShapeBox(void)
{
  ?Load_ProcessStructLayout_ParticleModuleInitSpawnShapeBox@@YAXXZ();
}

/*
==============
Preload_ParticleIntRange
==============
*/

void __fastcall Preload_ParticleIntRange(const DBStreamStart streamStart)
{
  ?Preload_ParticleIntRange@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleGroupID
==============
*/

void __fastcall Postload_ParticleGroupID(const DBStreamStart streamStart)
{
  ?Postload_ParticleGroupID@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleModuleTestImpact
==============
*/

void __fastcall Postload_ParticleModuleTestImpact(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleTestImpact@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_ParticleSystemDefFlags
==============
*/

unsigned int *__fastcall AllocPostload_ParticleSystemDefFlags()
{
  return ?AllocPostload_ParticleSystemDefFlags@@YAPEAIXZ();
}

/*
==============
Postload_ParticleModuleInitRotation3D
==============
*/

void __fastcall Postload_ParticleModuleInitRotation3D(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleInitRotation3D@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ParticleModuleInitGeoTrail
==============
*/

ParticleModuleInitGeoTrail *__fastcall AllocPreload_ParticleModuleInitGeoTrail()
{
  return ?AllocPreload_ParticleModuleInitGeoTrail@@YAPEAUParticleModuleInitGeoTrail@@XZ();
}

/*
==============
Preload_ParticleFloatRangeArray
==============
*/

void __fastcall Preload_ParticleFloatRangeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleFloatRangeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ParticleShaderGraphOptions
==============
*/

ParticleShaderGraphOptions *__fastcall AllocPreload_ParticleShaderGraphOptions()
{
  return ?AllocPreload_ParticleShaderGraphOptions@@YAPEAW4ParticleShaderGraphOptions@@XZ();
}

/*
==============
Load_ParticleShaderGraphCurvesStream
==============
*/

void __fastcall Load_ParticleShaderGraphCurvesStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleShaderGraphCurvesStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ParticleModuleTestBirth
==============
*/

ParticleModuleTestBirth *__fastcall AllocLoad_ParticleModuleTestBirth()
{
  return ?AllocLoad_ParticleModuleTestBirth@@YAPEAUParticleModuleTestBirth@@XZ();
}

/*
==============
Load_ParticleLinkedAssetDefArray
==============
*/

void __fastcall Load_ParticleLinkedAssetDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleLinkedAssetDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticlePhaseOptions
==============
*/

void __fastcall Load_ParticlePhaseOptions(const DBStreamStart streamStart)
{
  ?Load_ParticlePhaseOptions@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleModuleInitAttributesStream
==============
*/

void __fastcall Preload_ParticleModuleInitAttributesStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitAttributesStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleRotationGraph
==============
*/

void __fastcall Postload_ParticleModuleRotationGraph(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleRotationGraph@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleModuleInitSoundArray
==============
*/

void __fastcall Load_ParticleModuleInitSoundArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitSoundArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleStateDef
==============
*/

int __fastcall Mark_ParticleStateDef()
{
  return ?Mark_ParticleStateDef@@YAHXZ();
}

/*
==============
Mark_ParticleSystemDef
==============
*/

int __fastcall Mark_ParticleSystemDef()
{
  return ?Mark_ParticleSystemDef@@YAHXZ();
}

/*
==============
Mark_ParticleModuleInitParticleSimArray
==============
*/

int __fastcall Mark_ParticleModuleInitParticleSimArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleInitParticleSimArray@@YAH_K@Z(count);
}

/*
==============
Load_ParticleModuleInitLightOmni
==============
*/

void __fastcall Load_ParticleModuleInitLightOmni(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleInitLightOmni@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleModuleVelocityGraph
==============
*/

void __fastcall Preload_ParticleModuleVelocityGraph(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleVelocityGraph@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_ParticleStateDef
==============
*/

void Load_ProcessStructLayout_ParticleStateDef(void)
{
  ?Load_ProcessStructLayout_ParticleStateDef@@YAXXZ();
}

/*
==============
Postload_ParticleModuleRotationGraph3D
==============
*/

void __fastcall Postload_ParticleModuleRotationGraph3D(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleRotationGraph3D@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleModuleScaleByDistance
==============
*/

void __fastcall Postload_ParticleModuleScaleByDistance(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleScaleByDistance@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleModuleInitRotation3DStream
==============
*/

void __fastcall Load_ParticleModuleInitRotation3DStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitRotation3DStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleInitAtlasStream
==============
*/

void __fastcall Preload_ParticleModuleInitAtlasStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitAtlasStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ParticleModuleFlags
==============
*/

unsigned int *__fastcall AllocLoad_ParticleModuleFlags()
{
  return ?AllocLoad_ParticleModuleFlags@@YAPEAIXZ();
}

/*
==============
AllocPostload_ParticlePhaseOptions
==============
*/

ParticlePhaseOptions *__fastcall AllocPostload_ParticlePhaseOptions()
{
  return ?AllocPostload_ParticlePhaseOptions@@YAPEAW4ParticlePhaseOptions@@XZ();
}

/*
==============
Preload_ParticleModuleGroupDef
==============
*/

void __fastcall Preload_ParticleModuleGroupDef(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleGroupDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleModuleInitRotation
==============
*/

void __fastcall Preload_ParticleModuleInitRotation(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleInitRotation@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleElementType
==============
*/

int __fastcall Mark_ParticleElementType()
{
  return ?Mark_ParticleElementType@@YAHXZ();
}

/*
==============
AllocLoad_ParticleModuleTemperatureGraph
==============
*/

ParticleModuleTemperatureGraph *__fastcall AllocLoad_ParticleModuleTemperatureGraph()
{
  return ?AllocLoad_ParticleModuleTemperatureGraph@@YAPEAUParticleModuleTemperatureGraph@@XZ();
}

/*
==============
Mark_ParticleMarkVisualsArray
==============
*/

int __fastcall Mark_ParticleMarkVisualsArray(const unsigned __int64 count)
{
  return ?Mark_ParticleMarkVisualsArray@@YAH_K@Z(count);
}

/*
==============
Postload_Particle_MaterialDataArray
==============
*/

void __fastcall Postload_Particle_MaterialDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_Particle_MaterialDataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleShaderGraphOptions
==============
*/

int __fastcall Mark_ParticleShaderGraphOptions()
{
  return ?Mark_ParticleShaderGraphOptions@@YAHXZ();
}

/*
==============
Mark_ParticleModuleInitSound
==============
*/

int __fastcall Mark_ParticleModuleInitSound()
{
  return ?Mark_ParticleModuleInitSound@@YAHXZ();
}

/*
==============
AllocPostload_ParticleModuleInitLightSpot
==============
*/

ParticleModuleInitLightSpot *__fastcall AllocPostload_ParticleModuleInitLightSpot()
{
  return ?AllocPostload_ParticleModuleInitLightSpot@@YAPEAUParticleModuleInitLightSpot@@XZ();
}

/*
==============
Postload_ParticleModuleInitPlayerFacing
==============
*/

void __fastcall Postload_ParticleModuleInitPlayerFacing(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleInitPlayerFacing@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleModuleInitLightOmni
==============
*/

void __fastcall Postload_ParticleModuleInitLightOmni(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleInitLightOmni@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ParticleIntRange
==============
*/

ParticleIntRange *__fastcall AllocLoad_ParticleIntRange()
{
  return ?AllocLoad_ParticleIntRange@@YAPEAUParticleIntRange@@XZ();
}

/*
==============
Preload_ParticleModuleSizeLerp
==============
*/

void __fastcall Preload_ParticleModuleSizeLerp(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleSizeLerp@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_ParticleUseOrientationOptions
==============
*/

void Load_ProcessStructLayout_ParticleUseOrientationOptions(void)
{
  ?Load_ProcessStructLayout_ParticleUseOrientationOptions@@YAXXZ();
}

/*
==============
Postload_ParticleSystemDefPtrArray
==============
*/

void __fastcall Postload_ParticleSystemDefPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleSystemDefPtrArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModulePhysicsLight
==============
*/

void __fastcall Load_ParticleModulePhysicsLight(const DBStreamStart streamStart)
{
  ?Load_ParticleModulePhysicsLight@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleModuleInitLightOmniArray
==============
*/

int __fastcall Mark_ParticleModuleInitLightOmniArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleInitLightOmniArray@@YAH_K@Z(count);
}

/*
==============
Postload_ParticleCurveControlPointDefStream
==============
*/

void __fastcall Postload_ParticleCurveControlPointDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleCurveControlPointDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleSizeLerpArray
==============
*/

int __fastcall Mark_ParticleModuleSizeLerpArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleSizeLerpArray@@YAH_K@Z(count);
}

/*
==============
AllocPostload_ParticleLinkedAssetListDef
==============
*/

ParticleLinkedAssetListDef *__fastcall AllocPostload_ParticleLinkedAssetListDef()
{
  return ?AllocPostload_ParticleLinkedAssetListDef@@YAPEAUParticleLinkedAssetListDef@@XZ();
}

/*
==============
Preload_ParticleModuleGravityStream
==============
*/

void __fastcall Preload_ParticleModuleGravityStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleGravityStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleMarkVisuals
==============
*/

void __fastcall Preload_ParticleMarkVisuals(const DBStreamStart streamStart)
{
  ?Preload_ParticleMarkVisuals@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleModuleTestEventHandlerDataArray
==============
*/

int __fastcall Mark_ParticleModuleTestEventHandlerDataArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleTestEventHandlerDataArray@@YAH_K@Z(count);
}

/*
==============
Postload_ParticleModuleColorLerpArray
==============
*/

void __fastcall Postload_ParticleModuleColorLerpArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleColorLerpArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleInitFlareArray
==============
*/

int __fastcall Mark_ParticleModuleInitFlareArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleInitFlareArray@@YAH_K@Z(count);
}

/*
==============
Postload_ParticleModuleTestEventHandlerDataStream
==============
*/

void __fastcall Postload_ParticleModuleTestEventHandlerDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleTestEventHandlerDataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_Particle_MaterialData
==============
*/

Particle_MaterialData *__fastcall AllocPreload_Particle_MaterialData()
{
  return ?AllocPreload_Particle_MaterialData@@YAPEAUParticle_MaterialData@@XZ();
}

/*
==============
Postload_ParticleModuleForceDragGraph
==============
*/

void __fastcall Postload_ParticleModuleForceDragGraph(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleForceDragGraph@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleSystemDefRef
==============
*/

void __fastcall Load_ParticleSystemDefRef(const DBStreamStart streamStart)
{
  ?Load_ParticleSystemDefRef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleRelativeVelocityTypeArray
==============
*/

void __fastcall Load_ParticleRelativeVelocityTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleRelativeVelocityTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ParticleUseVelocityOptions
==============
*/

ParticleUseVelocityOptions *__fastcall AllocLoad_ParticleUseVelocityOptions()
{
  return ?AllocLoad_ParticleUseVelocityOptions@@YAPEAW4ParticleUseVelocityOptions@@XZ();
}

/*
==============
AllocLoad_ParticleModuleInitSpawnShapeSphere
==============
*/

ParticleModuleInitSpawnShapeSphere *__fastcall AllocLoad_ParticleModuleInitSpawnShapeSphere()
{
  return ?AllocLoad_ParticleModuleInitSpawnShapeSphere@@YAPEAUParticleModuleInitSpawnShapeSphere@@XZ();
}

/*
==============
Load_ParticleUseOrientationOptionsArray
==============
*/

void __fastcall Load_ParticleUseOrientationOptionsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleUseOrientationOptionsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModulePhysicsLightArray
==============
*/

int __fastcall Mark_ParticleModulePhysicsLightArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModulePhysicsLightArray@@YAH_K@Z(count);
}

/*
==============
Load_ParticleUseVelocityOptions
==============
*/

void __fastcall Load_ParticleUseVelocityOptions(const DBStreamStart streamStart)
{
  ?Load_ParticleUseVelocityOptions@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ParticleUseScaleOptions
==============
*/

ParticleUseScaleOptions *__fastcall AllocLoad_ParticleUseScaleOptions()
{
  return ?AllocLoad_ParticleUseScaleOptions@@YAPEAW4ParticleUseScaleOptions@@XZ();
}

/*
==============
AllocPreload_ParticleModuleInitVolumetric
==============
*/

ParticleModuleInitVolumetric *__fastcall AllocPreload_ParticleModuleInitVolumetric()
{
  return ?AllocPreload_ParticleModuleInitVolumetric@@YAPEAUParticleModuleInitVolumetric@@XZ();
}

/*
==============
Preload_ParticleUseVelocityOptionsStream
==============
*/

void __fastcall Preload_ParticleUseVelocityOptionsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleUseVelocityOptionsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ParticleModuleInitVolumetric
==============
*/

ParticleModuleInitVolumetric *__fastcall AllocLoad_ParticleModuleInitVolumetric()
{
  return ?AllocLoad_ParticleModuleInitVolumetric@@YAPEAUParticleModuleInitVolumetric@@XZ();
}

/*
==============
Load_ParticleInstancePoolAction
==============
*/

void __fastcall Load_ParticleInstancePoolAction(const DBStreamStart streamStart)
{
  ?Load_ParticleInstancePoolAction@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_FxMarkProjectionAxis
==============
*/

void __fastcall Load_FxMarkProjectionAxis(const DBStreamStart streamStart)
{
  ?Load_FxMarkProjectionAxis@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleModuleInitCloud
==============
*/

void __fastcall Postload_ParticleModuleInitCloud(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleInitCloud@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleEmissiveVersionCurves
==============
*/

int __fastcall Mark_ParticleEmissiveVersionCurves()
{
  return ?Mark_ParticleEmissiveVersionCurves@@YAHXZ();
}

/*
==============
AllocLoad_ParticleModuleInitRelativeVelocity
==============
*/

ParticleModuleInitRelativeVelocity *__fastcall AllocLoad_ParticleModuleInitRelativeVelocity()
{
  return ?AllocLoad_ParticleModuleInitRelativeVelocity@@YAPEAUParticleModuleInitRelativeVelocity@@XZ();
}

/*
==============
Mark_ParticleModuleShaderGraphArray
==============
*/

int __fastcall Mark_ParticleModuleShaderGraphArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleShaderGraphArray@@YAH_K@Z(count);
}

/*
==============
AllocPostload_ParticleUseScaleOptions
==============
*/

ParticleUseScaleOptions *__fastcall AllocPostload_ParticleUseScaleOptions()
{
  return ?AllocPostload_ParticleUseScaleOptions@@YAPEAW4ParticleUseScaleOptions@@XZ();
}

/*
==============
AllocLoad_ParticleModuleInitRunner
==============
*/

ParticleModuleInitRunner *__fastcall AllocLoad_ParticleModuleInitRunner()
{
  return ?AllocLoad_ParticleModuleInitRunner@@YAPEAUParticleModuleInitRunner@@XZ();
}

/*
==============
Mark_ParticleModuleTestBirthArray
==============
*/

int __fastcall Mark_ParticleModuleTestBirthArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleTestBirthArray@@YAH_K@Z(count);
}

/*
==============
AllocPreload_ParticleModuleTestPos
==============
*/

ParticleModuleTestPos *__fastcall AllocPreload_ParticleModuleTestPos()
{
  return ?AllocPreload_ParticleModuleTestPos@@YAPEAUParticleModuleTestPos@@XZ();
}

/*
==============
Mark_ParticleGravityOptionsArray
==============
*/

int __fastcall Mark_ParticleGravityOptionsArray(const unsigned __int64 count)
{
  return ?Mark_ParticleGravityOptionsArray@@YAH_K@Z(count);
}

/*
==============
Preload_ParticleModuleIntensityGraph
==============
*/

void __fastcall Preload_ParticleModuleIntensityGraph(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleIntensityGraph@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_ParticleModuleRotationGraph
==============
*/

ParticleModuleRotationGraph *__fastcall AllocPostload_ParticleModuleRotationGraph()
{
  return ?AllocPostload_ParticleModuleRotationGraph@@YAPEAUParticleModuleRotationGraph@@XZ();
}

/*
==============
Preload_ParticleModuleAttractorArray
==============
*/

void __fastcall Preload_ParticleModuleAttractorArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleAttractorArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleTestGravityStream
==============
*/

void __fastcall Postload_ParticleModuleTestGravityStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleTestGravityStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitOrientedSprite
==============
*/

void __fastcall Load_ParticleModuleInitOrientedSprite(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleInitOrientedSprite@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ParticleModuleInitOcclusionQuery
==============
*/

ParticleModuleInitOcclusionQuery *__fastcall AllocLoad_ParticleModuleInitOcclusionQuery()
{
  return ?AllocLoad_ParticleModuleInitOcclusionQuery@@YAPEAUParticleModuleInitOcclusionQuery@@XZ();
}

/*
==============
Preload_ParticleElementTypeStream
==============
*/

void __fastcall Preload_ParticleElementTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleElementTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleShaderGraphCurvesArray
==============
*/

void __fastcall Preload_ParticleShaderGraphCurvesArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleShaderGraphCurvesArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleInitSpawnShapeSphereStream
==============
*/

void __fastcall Postload_ParticleModuleInitSpawnShapeSphereStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitSpawnShapeSphereStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleVelocityGraphArray
==============
*/

void __fastcall Preload_ParticleModuleVelocityGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleVelocityGraphArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleUseOrientationOptions
==============
*/

void __fastcall Postload_ParticleUseOrientationOptions(const DBStreamStart streamStart)
{
  ?Postload_ParticleUseOrientationOptions@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ParticleModuleInitRotation
==============
*/

ParticleModuleInitRotation *__fastcall AllocPreload_ParticleModuleInitRotation()
{
  return ?AllocPreload_ParticleModuleInitRotation@@YAPEAUParticleModuleInitRotation@@XZ();
}

/*
==============
Postload_ParticleModuleForce
==============
*/

void __fastcall Postload_ParticleModuleForce(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleForce@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleModuleAxis
==============
*/

void __fastcall Postload_ParticleModuleAxis(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleAxis@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleModuleParentVelocityGraph
==============
*/

void __fastcall Preload_ParticleModuleParentVelocityGraph(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleParentVelocityGraph@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ParticleModuleSizeGraph
==============
*/

ParticleModuleSizeGraph *__fastcall AllocPreload_ParticleModuleSizeGraph()
{
  return ?AllocPreload_ParticleModuleSizeGraph@@YAPEAUParticleModuleSizeGraph@@XZ();
}

/*
==============
Load_ProcessStructLayout_ParticleStateDefFlags
==============
*/

void Load_ProcessStructLayout_ParticleStateDefFlags(void)
{
  ?Load_ProcessStructLayout_ParticleStateDefFlags@@YAXXZ();
}

/*
==============
Postload_ParticleModuleTestPosStream
==============
*/

void __fastcall Postload_ParticleModuleTestPosStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleTestPosStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleInitRotation3DArray
==============
*/

void __fastcall Preload_ParticleModuleInitRotation3DArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitRotation3DArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticlePhaseOptions
==============
*/

int __fastcall Mark_ParticlePhaseOptions()
{
  return ?Mark_ParticlePhaseOptions@@YAHXZ();
}

/*
==============
Preload_ParticleModuleTestPosArray
==============
*/

void __fastcall Preload_ParticleModuleTestPosArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleTestPosArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ParticleMirrorTextureType
==============
*/

ParticleMirrorTextureType *__fastcall AllocPostload_ParticleMirrorTextureType()
{
  return ?AllocPostload_ParticleMirrorTextureType@@YAPEAW4ParticleMirrorTextureType@@XZ();
}

/*
==============
AllocPreload_ParticlePhysicsFXData
==============
*/

ParticlePhysicsFXData *__fastcall AllocPreload_ParticlePhysicsFXData()
{
  return ?AllocPreload_ParticlePhysicsFXData@@YAPEAUParticlePhysicsFXData@@XZ();
}

/*
==============
Preload_ParticleModuleFlagsArray
==============
*/

void __fastcall Preload_ParticleModuleFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleFlagsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleSpawnMeshAssetDefStream
==============
*/

void __fastcall Load_ParticleSpawnMeshAssetDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleSpawnMeshAssetDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModulePositionGraphArray
==============
*/

void __fastcall Load_ParticleModulePositionGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModulePositionGraphArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleShaderGraphStream
==============
*/

void __fastcall Load_ParticleModuleShaderGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleShaderGraphStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleEmitterDefArray
==============
*/

void __fastcall Preload_ParticleEmitterDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleEmitterDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleTestPosStream
==============
*/

void __fastcall Load_ParticleModuleTestPosStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleTestPosStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleInitPlayerFacing
==============
*/

int __fastcall Mark_ParticleModuleInitPlayerFacing()
{
  return ?Mark_ParticleModuleInitPlayerFacing@@YAHXZ();
}

/*
==============
AllocPostload_ParticleModifier
==============
*/

ParticleModifier *__fastcall AllocPostload_ParticleModifier()
{
  return ?AllocPostload_ParticleModifier@@YAPEAUParticleModifier@@XZ();
}

/*
==============
AllocPostload_ParticleLinkedAssetDef
==============
*/

ParticleLinkedAssetDef *__fastcall AllocPostload_ParticleLinkedAssetDef()
{
  return ?AllocPostload_ParticleLinkedAssetDef@@YAPEATParticleLinkedAssetDef@@XZ();
}

/*
==============
Mark_ParticleModuleTemperatureGraphArray
==============
*/

int __fastcall Mark_ParticleModuleTemperatureGraphArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleTemperatureGraphArray@@YAH_K@Z(count);
}

/*
==============
Preload_ParticleGravityOptions
==============
*/

void __fastcall Preload_ParticleGravityOptions(const DBStreamStart streamStart)
{
  ?Preload_ParticleGravityOptions@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleElementTypeArray
==============
*/

void __fastcall Preload_ParticleElementTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleElementTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ParticleGravityState
==============
*/

unsigned int *__fastcall AllocPreload_ParticleGravityState()
{
  return ?AllocPreload_ParticleGravityState@@YAPEAIXZ();
}

/*
==============
Mark_ParticleModuleRotationGraph3DArray
==============
*/

int __fastcall Mark_ParticleModuleRotationGraph3DArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleRotationGraph3DArray@@YAH_K@Z(count);
}

/*
==============
AllocPreload_ParticleModuleAxesFlags
==============
*/

ParticleModuleAxesFlags *__fastcall AllocPreload_ParticleModuleAxesFlags()
{
  return ?AllocPreload_ParticleModuleAxesFlags@@YAPEAW4ParticleModuleAxesFlags@@XZ();
}

/*
==============
Postload_ParticleElementType
==============
*/

void __fastcall Postload_ParticleElementType(const DBStreamStart streamStart)
{
  ?Postload_ParticleElementType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleModuleInitRunnerArray
==============
*/

int __fastcall Mark_ParticleModuleInitRunnerArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleInitRunnerArray@@YAH_K@Z(count);
}

/*
==============
Postload_ParticleModuleInitOrientedSpriteStream
==============
*/

void __fastcall Postload_ParticleModuleInitOrientedSpriteStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitOrientedSpriteStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleInitVolumetric
==============
*/

void __fastcall Preload_ParticleModuleInitVolumetric(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleInitVolumetric@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleModuleTypeDefStream
==============
*/

void __fastcall Load_ParticleModuleTypeDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleTypeDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ParticleModuleColorLerp
==============
*/

ParticleModuleColorLerp *__fastcall AllocPostload_ParticleModuleColorLerp()
{
  return ?AllocPostload_ParticleModuleColorLerp@@YAPEAUParticleModuleColorLerp@@XZ();
}

/*
==============
Mark_ParticleCurveDefArray
==============
*/

int __fastcall Mark_ParticleCurveDefArray(const unsigned __int64 count)
{
  return ?Mark_ParticleCurveDefArray@@YAH_K@Z(count);
}

/*
==============
AllocPreload_ParticleModuleInitDismember
==============
*/

ParticleModuleInitDismember *__fastcall AllocPreload_ParticleModuleInitDismember()
{
  return ?AllocPreload_ParticleModuleInitDismember@@YAPEAUParticleModuleInitDismember@@XZ();
}

/*
==============
AllocPreload_ParticleModuleTestGravity
==============
*/

ParticleModuleTestGravity *__fastcall AllocPreload_ParticleModuleTestGravity()
{
  return ?AllocPreload_ParticleModuleTestGravity@@YAPEAUParticleModuleTestGravity@@XZ();
}

/*
==============
Preload_ParticleModuleTestEventHandlerData
==============
*/

void __fastcall Preload_ParticleModuleTestEventHandlerData(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleTestEventHandlerData@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleModuleRotationGraphArray
==============
*/

void __fastcall Postload_ParticleModuleRotationGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleRotationGraphArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleSizeLerpStream
==============
*/

void __fastcall Preload_ParticleModuleSizeLerpStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleSizeLerpStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticlePhysicsFXData
==============
*/

int __fastcall Mark_ParticlePhysicsFXData()
{
  return ?Mark_ParticlePhysicsFXData@@YAHXZ();
}

/*
==============
Load_ProcessStructLayout_ParticleModulePositionGraph
==============
*/

void Load_ProcessStructLayout_ParticleModulePositionGraph(void)
{
  ?Load_ProcessStructLayout_ParticleModulePositionGraph@@YAXXZ();
}

/*
==============
Preload_ParticleSpawnFlagsArray
==============
*/

void __fastcall Preload_ParticleSpawnFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleSpawnFlagsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleSystemDefPtr
==============
*/

void __fastcall Load_ParticleSystemDefPtr(const DBStreamStart streamStart)
{
  ?Load_ParticleSystemDefPtr@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_FxMarkProjectionAxis
==============
*/

void Load_ProcessStructLayout_FxMarkProjectionAxis(void)
{
  ?Load_ProcessStructLayout_FxMarkProjectionAxis@@YAXXZ();
}

/*
==============
AllocPostload_ParticleSystemDef
==============
*/

ParticleSystemDef *__fastcall AllocPostload_ParticleSystemDef()
{
  return ?AllocPostload_ParticleSystemDef@@YAPEAUParticleSystemDef@@XZ();
}

/*
==============
Load_ProcessStructLayout_ParticleModulePhysicsRayCast
==============
*/

void Load_ProcessStructLayout_ParticleModulePhysicsRayCast(void)
{
  ?Load_ProcessStructLayout_ParticleModulePhysicsRayCast@@YAXXZ();
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitOcclusionQuery
==============
*/

void Load_ProcessStructLayout_ParticleModuleInitOcclusionQuery(void)
{
  ?Load_ProcessStructLayout_ParticleModuleInitOcclusionQuery@@YAXXZ();
}

/*
==============
Postload_ParticlePhaseOptions
==============
*/

void __fastcall Postload_ParticlePhaseOptions(const DBStreamStart streamStart)
{
  ?Postload_ParticlePhaseOptions@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ParticleModuleEmissionGraph
==============
*/

ParticleModuleEmissionGraph *__fastcall AllocPreload_ParticleModuleEmissionGraph()
{
  return ?AllocPreload_ParticleModuleEmissionGraph@@YAPEAUParticleModuleEmissionGraph@@XZ();
}

/*
==============
Load_ParticleModuleVelocityGraphArray
==============
*/

void __fastcall Load_ParticleModuleVelocityGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleVelocityGraphArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ParticleModuleType
==============
*/

ParticleModuleType *__fastcall AllocPostload_ParticleModuleType()
{
  return ?AllocPostload_ParticleModuleType@@YAPEAW4ParticleModuleType@@XZ();
}

/*
==============
Mark_ParticleModuleDefArray
==============
*/

int __fastcall Mark_ParticleModuleDefArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleDefArray@@YAH_K@Z(count);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleAxis
==============
*/

void Load_ProcessStructLayout_ParticleModuleAxis(void)
{
  ?Load_ProcessStructLayout_ParticleModuleAxis@@YAXXZ();
}

/*
==============
Preload_ParticleModuleIntensityGraphStream
==============
*/

void __fastcall Preload_ParticleModuleIntensityGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleIntensityGraphStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleInitBeamArray
==============
*/

int __fastcall Mark_ParticleModuleInitBeamArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleInitBeamArray@@YAH_K@Z(count);
}

/*
==============
Preload_ParticleMirrorTextureTypeArray
==============
*/

void __fastcall Preload_ParticleMirrorTextureTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleMirrorTextureTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleTestImpact
==============
*/

int __fastcall Mark_ParticleModuleTestImpact()
{
  return ?Mark_ParticleModuleTestImpact@@YAHXZ();
}

/*
==============
Load_ParticleEmissiveVersionCurves
==============
*/

void __fastcall Load_ParticleEmissiveVersionCurves(const DBStreamStart streamStart)
{
  ?Load_ParticleEmissiveVersionCurves@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleModuleInitLightOmniArray
==============
*/

void __fastcall Preload_ParticleModuleInitLightOmniArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitLightOmniArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleEmissionGraph
==============
*/

void __fastcall Preload_ParticleModuleEmissionGraph(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleEmissionGraph@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleModuleColorGraphStream
==============
*/

void __fastcall Load_ParticleModuleColorGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleColorGraphStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitRotation
==============
*/

void Load_ProcessStructLayout_ParticleModuleInitRotation(void)
{
  ?Load_ProcessStructLayout_ParticleModuleInitRotation@@YAXXZ();
}

/*
==============
Postload_ParticleModuleVectorFieldGraphStream
==============
*/

void __fastcall Postload_ParticleModuleVectorFieldGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleVectorFieldGraphStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitParticleSimArray
==============
*/

void __fastcall Load_ParticleModuleInitParticleSimArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitParticleSimArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ParticleModuleInitKillWrapBox
==============
*/

ParticleModuleInitKillWrapBox *__fastcall AllocPostload_ParticleModuleInitKillWrapBox()
{
  return ?AllocPostload_ParticleModuleInitKillWrapBox@@YAPEAUParticleModuleInitKillWrapBox@@XZ();
}

/*
==============
Postload_ParticleModuleTestDeathStream
==============
*/

void __fastcall Postload_ParticleModuleTestDeathStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleTestDeathStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleInitLightOmniArray
==============
*/

void __fastcall Postload_ParticleModuleInitLightOmniArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitLightOmniArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleInitDecalArray
==============
*/

int __fastcall Mark_ParticleModuleInitDecalArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleInitDecalArray@@YAH_K@Z(count);
}

/*
==============
Postload_ParticleModuleIntensityGraphStream
==============
*/

void __fastcall Postload_ParticleModuleIntensityGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleIntensityGraphStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleElementType
==============
*/

void __fastcall Load_ParticleElementType(const DBStreamStart streamStart)
{
  ?Load_ParticleElementType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticlePhaseOptionsArray
==============
*/

void __fastcall Postload_ParticlePhaseOptionsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticlePhaseOptionsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleParentVelocityGraph
==============
*/

void __fastcall Load_ParticleModuleParentVelocityGraph(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleParentVelocityGraph@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_ParticleModuleShaderGraph
==============
*/

ParticleModuleShaderGraph *__fastcall AllocPostload_ParticleModuleShaderGraph()
{
  return ?AllocPostload_ParticleModuleShaderGraph@@YAPEAUParticleModuleShaderGraph@@XZ();
}

/*
==============
Preload_ParticleModuleInitModelStream
==============
*/

void __fastcall Preload_ParticleModuleInitModelStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitModelStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleInitAttributes
==============
*/

int __fastcall Mark_ParticleModuleInitAttributes()
{
  return ?Mark_ParticleModuleInitAttributes@@YAHXZ();
}

/*
==============
Load_ProcessStructLayout_ParticleModuleFlags
==============
*/

void Load_ProcessStructLayout_ParticleModuleFlags(void)
{
  ?Load_ProcessStructLayout_ParticleModuleFlags@@YAXXZ();
}

/*
==============
Postload_ParticleLinkedAssetDefArray
==============
*/

void __fastcall Postload_ParticleLinkedAssetDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleLinkedAssetDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleInitPlayerFacingArray
==============
*/

int __fastcall Mark_ParticleModuleInitPlayerFacingArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleInitPlayerFacingArray@@YAH_K@Z(count);
}

/*
==============
AllocLoad_ParticleModuleEmissionGraph
==============
*/

ParticleModuleEmissionGraph *__fastcall AllocLoad_ParticleModuleEmissionGraph()
{
  return ?AllocLoad_ParticleModuleEmissionGraph@@YAPEAUParticleModuleEmissionGraph@@XZ();
}

/*
==============
Preload_ParticleModuleInitRelativeVelocity
==============
*/

void __fastcall Preload_ParticleModuleInitRelativeVelocity(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleInitRelativeVelocity@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleModuleInitBeamFlagsStream
==============
*/

void __fastcall Preload_ParticleModuleInitBeamFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitBeamFlagsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ParticleUseVelocityOptions
==============
*/

void Load_ProcessStructLayout_ParticleUseVelocityOptions(void)
{
  ?Load_ProcessStructLayout_ParticleUseVelocityOptions@@YAXXZ();
}

/*
==============
Load_ParticleModuleInitParticleSim
==============
*/

void __fastcall Load_ParticleModuleInitParticleSim(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleInitParticleSim@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleModuleInitSpawnShapeMesh
==============
*/

void __fastcall Postload_ParticleModuleInitSpawnShapeMesh(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleInitSpawnShapeMesh@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleUseOrientationOptionsStream
==============
*/

void __fastcall Postload_ParticleUseOrientationOptionsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleUseOrientationOptionsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ParticleSystemDefRef
==============
*/

void Load_ProcessStructLayout_ParticleSystemDefRef(void)
{
  ?Load_ProcessStructLayout_ParticleSystemDefRef@@YAXXZ();
}

/*
==============
Preload_ParticleModuleInitMirrorTextureStream
==============
*/

void __fastcall Preload_ParticleModuleInitMirrorTextureStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitMirrorTextureStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitFlareStream
==============
*/

void __fastcall Load_ParticleModuleInitFlareStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitFlareStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ParticleModuleInitSpawnShapeBox
==============
*/

ParticleModuleInitSpawnShapeBox *__fastcall AllocPreload_ParticleModuleInitSpawnShapeBox()
{
  return ?AllocPreload_ParticleModuleInitSpawnShapeBox@@YAPEAUParticleModuleInitSpawnShapeBox@@XZ();
}

/*
==============
AllocLoad_ParticleModuleInitMirrorTexture
==============
*/

ParticleModuleInitMirrorTexture *__fastcall AllocLoad_ParticleModuleInitMirrorTexture()
{
  return ?AllocLoad_ParticleModuleInitMirrorTexture@@YAPEAUParticleModuleInitMirrorTexture@@XZ();
}

/*
==============
Preload_ParticleModuleFlags
==============
*/

void __fastcall Preload_ParticleModuleFlags(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleFlags@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleModuleInitSpawnShapeBoxStream
==============
*/

void __fastcall Postload_ParticleModuleInitSpawnShapeBoxStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitSpawnShapeBoxStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleTestImpactArray
==============
*/

int __fastcall Mark_ParticleModuleTestImpactArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleTestImpactArray@@YAH_K@Z(count);
}

/*
==============
AllocPreload_ParticleModuleInitModel
==============
*/

ParticleModuleInitModel *__fastcall AllocPreload_ParticleModuleInitModel()
{
  return ?AllocPreload_ParticleModuleInitModel@@YAPEAUParticleModuleInitModel@@XZ();
}

/*
==============
Preload_ParticleEmissiveVersionCurves
==============
*/

void __fastcall Preload_ParticleEmissiveVersionCurves(const DBStreamStart streamStart)
{
  ?Preload_ParticleEmissiveVersionCurves@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleMirrorTextureType
==============
*/

int __fastcall Mark_ParticleMirrorTextureType()
{
  return ?Mark_ParticleMirrorTextureType@@YAHXZ();
}

/*
==============
Load_ParticleRenderOptionsArray
==============
*/

void __fastcall Load_ParticleRenderOptionsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleRenderOptionsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ParticleModuleTestDeath
==============
*/

ParticleModuleTestDeath *__fastcall AllocPostload_ParticleModuleTestDeath()
{
  return ?AllocPostload_ParticleModuleTestDeath@@YAPEAUParticleModuleTestDeath@@XZ();
}

/*
==============
AllocPostload_ParticleRelativeVelocityType
==============
*/

ParticleRelativeVelocityType *__fastcall AllocPostload_ParticleRelativeVelocityType()
{
  return ?AllocPostload_ParticleRelativeVelocityType@@YAPEAW4ParticleRelativeVelocityType@@XZ();
}

/*
==============
Postload_ParticleModuleInitOcclusionQueryStream
==============
*/

void __fastcall Postload_ParticleModuleInitOcclusionQueryStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitOcclusionQueryStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticlePhysicsFXData
==============
*/

void __fastcall Preload_ParticlePhysicsFXData(const DBStreamStart streamStart)
{
  ?Preload_ParticlePhysicsFXData@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleModuleVelocityGraphStream
==============
*/

void __fastcall Postload_ParticleModuleVelocityGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleVelocityGraphStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleForceStream
==============
*/

void __fastcall Postload_ParticleModuleForceStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleForceStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleGravityOptionsArray
==============
*/

void __fastcall Load_ParticleGravityOptionsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleGravityOptionsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleTestEventHandlerDataArray
==============
*/

void __fastcall Load_ParticleModuleTestEventHandlerDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleTestEventHandlerDataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleLinkedAssetDefArray
==============
*/

void __fastcall Preload_ParticleLinkedAssetDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleLinkedAssetDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleSystemDefRef
==============
*/

int __fastcall Mark_ParticleSystemDefRef()
{
  return ?Mark_ParticleSystemDefRef@@YAHXZ();
}

/*
==============
Postload_ParticleStateDefArray
==============
*/

void __fastcall Postload_ParticleStateDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleStateDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleInitModelStream
==============
*/

void __fastcall Postload_ParticleModuleInitModelStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitModelStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleInitBeamArray
==============
*/

void __fastcall Preload_ParticleModuleInitBeamArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitBeamArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleInitCloud
==============
*/

int __fastcall Mark_ParticleModuleInitCloud()
{
  return ?Mark_ParticleModuleInitCloud@@YAHXZ();
}

/*
==============
Load_ProcessStructLayout_ParticleIntRange
==============
*/

void Load_ProcessStructLayout_ParticleIntRange(void)
{
  ?Load_ProcessStructLayout_ParticleIntRange@@YAXXZ();
}

/*
==============
AllocPostload_ParticleModuleTypeDef
==============
*/

ParticleModuleTypeDef *__fastcall AllocPostload_ParticleModuleTypeDef()
{
  return ?AllocPostload_ParticleModuleTypeDef@@YAPEATParticleModuleTypeDef@@XZ();
}

/*
==============
AllocPostload_ParticleFloatRange
==============
*/

ParticleFloatRange *__fastcall AllocPostload_ParticleFloatRange()
{
  return ?AllocPostload_ParticleFloatRange@@YAPEAUParticleFloatRange@@XZ();
}

/*
==============
Load_ParticleModuleAttractorStream
==============
*/

void __fastcall Load_ParticleModuleAttractorStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleAttractorStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitLightOmniStream
==============
*/

void __fastcall Load_ParticleModuleInitLightOmniStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitLightOmniStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleAttractorStream
==============
*/

void __fastcall Preload_ParticleModuleAttractorStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleAttractorStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleInitVolumetric
==============
*/

void __fastcall Postload_ParticleModuleInitVolumetric(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleInitVolumetric@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitGeoTrail
==============
*/

void Load_ProcessStructLayout_ParticleModuleInitGeoTrail(void)
{
  ?Load_ProcessStructLayout_ParticleModuleInitGeoTrail@@YAXXZ();
}

/*
==============
Load_ParticleModuleInitDecalArray
==============
*/

void __fastcall Load_ParticleModuleInitDecalArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitDecalArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleTypeStream
==============
*/

void __fastcall Load_ParticleModuleTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleInitSpawnShapeCylinderArray
==============
*/

void __fastcall Preload_ParticleModuleInitSpawnShapeCylinderArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitSpawnShapeCylinderArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleGravityState
==============
*/

void __fastcall Postload_ParticleGravityState(const DBStreamStart streamStart)
{
  ?Postload_ParticleGravityState@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleModuleRotationGraphArray
==============
*/

void __fastcall Preload_ParticleModuleRotationGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleRotationGraphArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleInitSpawnArray
==============
*/

void __fastcall Postload_ParticleModuleInitSpawnArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitSpawnArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleShaderGraph
==============
*/

void __fastcall Postload_ParticleModuleShaderGraph(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleShaderGraph@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleLinkedAssetDefStream
==============
*/

void __fastcall Preload_ParticleLinkedAssetDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleLinkedAssetDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleGravityStream
==============
*/

void __fastcall Load_ParticleModuleGravityStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleGravityStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleGravityState
==============
*/

void __fastcall Preload_ParticleGravityState(const DBStreamStart streamStart)
{
  ?Preload_ParticleGravityState@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleCurveControlPointDefStream
==============
*/

void __fastcall Load_ParticleCurveControlPointDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleCurveControlPointDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleFlagsArray
==============
*/

void __fastcall Postload_ParticleModuleFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleFlagsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleEmissionGraphArray
==============
*/

int __fastcall Mark_ParticleModuleEmissionGraphArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleEmissionGraphArray@@YAH_K@Z(count);
}

/*
==============
Mark_ParticleModuleInitAttributesArray
==============
*/

int __fastcall Mark_ParticleModuleInitAttributesArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleInitAttributesArray@@YAH_K@Z(count);
}

/*
==============
Mark_ParticleModuleInitRotation
==============
*/

int __fastcall Mark_ParticleModuleInitRotation()
{
  return ?Mark_ParticleModuleInitRotation@@YAHXZ();
}

/*
==============
Preload_ParticleModuleSizeGraphStream
==============
*/

void __fastcall Preload_ParticleModuleSizeGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleSizeGraphStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleInitDecal
==============
*/

void __fastcall Preload_ParticleModuleInitDecal(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleInitDecal@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleInstancePoolAction
==============
*/

void __fastcall Preload_ParticleInstancePoolAction(const DBStreamStart streamStart)
{
  ?Preload_ParticleInstancePoolAction@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleEmitterDefArray
==============
*/

void __fastcall Postload_ParticleEmitterDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleEmitterDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleInitSoundArray
==============
*/

int __fastcall Mark_ParticleModuleInitSoundArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleInitSoundArray@@YAH_K@Z(count);
}

/*
==============
Postload_ParticleEmissiveCurves
==============
*/

void __fastcall Postload_ParticleEmissiveCurves(const DBStreamStart streamStart)
{
  ?Postload_ParticleEmissiveCurves@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleColorGraph
==============
*/

void Load_ProcessStructLayout_ParticleModuleColorGraph(void)
{
  ?Load_ProcessStructLayout_ParticleModuleColorGraph@@YAXXZ();
}

/*
==============
AllocLoad_ParticleSpawnShapeType
==============
*/

ParticleSpawnShapeType *__fastcall AllocLoad_ParticleSpawnShapeType()
{
  return ?AllocLoad_ParticleSpawnShapeType@@YAPEAW4ParticleSpawnShapeType@@XZ();
}

/*
==============
Postload_ParticleSystemDefArray
==============
*/

void __fastcall Postload_ParticleSystemDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleSystemDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitVectorFieldArray
==============
*/

void __fastcall Load_ParticleModuleInitVectorFieldArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitVectorFieldArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModulePhysicsRayCast
==============
*/

void __fastcall Preload_ParticleModulePhysicsRayCast(const DBStreamStart streamStart)
{
  ?Preload_ParticleModulePhysicsRayCast@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_ParticleModuleInitDismember
==============
*/

ParticleModuleInitDismember *__fastcall AllocPostload_ParticleModuleInitDismember()
{
  return ?AllocPostload_ParticleModuleInitDismember@@YAPEAUParticleModuleInitDismember@@XZ();
}

/*
==============
AllocLoad_ParticleModuleInitKillWrapBox
==============
*/

ParticleModuleInitKillWrapBox *__fastcall AllocLoad_ParticleModuleInitKillWrapBox()
{
  return ?AllocLoad_ParticleModuleInitKillWrapBox@@YAPEAUParticleModuleInitKillWrapBox@@XZ();
}

/*
==============
Mark_ParticleModuleSizeLerp
==============
*/

int __fastcall Mark_ParticleModuleSizeLerp()
{
  return ?Mark_ParticleModuleSizeLerp@@YAHXZ();
}

/*
==============
Preload_ParticleModuleParentVelocityGraphArray
==============
*/

void __fastcall Preload_ParticleModuleParentVelocityGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleParentVelocityGraphArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleTestGravityStream
==============
*/

void __fastcall Preload_ParticleModuleTestGravityStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleTestGravityStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleInitParticleSim
==============
*/

void __fastcall Preload_ParticleModuleInitParticleSim(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleInitParticleSim@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_ParticleSpawnFlags
==============
*/

ParticleSpawnFlags *__fastcall AllocPostload_ParticleSpawnFlags()
{
  return ?AllocPostload_ParticleSpawnFlags@@YAPEAW4ParticleSpawnFlags@@XZ();
}

/*
==============
Preload_ParticleModuleInitSpawnShapeEllipsoidStream
==============
*/

void __fastcall Preload_ParticleModuleInitSpawnShapeEllipsoidStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitSpawnShapeEllipsoidStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleEmissiveCurves
==============
*/

int __fastcall Mark_ParticleEmissiveCurves()
{
  return ?Mark_ParticleEmissiveCurves@@YAHXZ();
}

/*
==============
Preload_ParticleModuleInitOcclusionQueryArray
==============
*/

void __fastcall Preload_ParticleModuleInitOcclusionQueryArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitOcclusionQueryArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleTestTimeInStateArray
==============
*/

void __fastcall Load_ParticleModuleTestTimeInStateArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleTestTimeInStateArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleAttractorArray
==============
*/

int __fastcall Mark_ParticleModuleAttractorArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleAttractorArray@@YAH_K@Z(count);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleForce
==============
*/

void Load_ProcessStructLayout_ParticleModuleForce(void)
{
  ?Load_ProcessStructLayout_ParticleModuleForce@@YAXXZ();
}

/*
==============
Mark_ParticleEmitterDefArray
==============
*/

int __fastcall Mark_ParticleEmitterDefArray(const unsigned __int64 count)
{
  return ?Mark_ParticleEmitterDefArray@@YAH_K@Z(count);
}

/*
==============
Load_ProcessStructLayout_ParticleSpawnFlags
==============
*/

void Load_ProcessStructLayout_ParticleSpawnFlags(void)
{
  ?Load_ProcessStructLayout_ParticleSpawnFlags@@YAXXZ();
}

/*
==============
Postload_ParticleModuleColorGraph
==============
*/

void __fastcall Postload_ParticleModuleColorGraph(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleColorGraph@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleModuleInitParticleSimArray
==============
*/

void __fastcall Preload_ParticleModuleInitParticleSimArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitParticleSimArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleSpawnFlagsStream
==============
*/

void __fastcall Load_ParticleSpawnFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleSpawnFlagsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleSpawnFlags
==============
*/

void __fastcall Postload_ParticleSpawnFlags(const DBStreamStart streamStart)
{
  ?Postload_ParticleSpawnFlags@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleModuleShaderGraph
==============
*/

int __fastcall Mark_ParticleModuleShaderGraph()
{
  return ?Mark_ParticleModuleShaderGraph@@YAHXZ();
}

/*
==============
Load_ParticleModuleEmissionGraphStream
==============
*/

void __fastcall Load_ParticleModuleEmissionGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleEmissionGraphStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ParticleModuleInitOrientedSprite
==============
*/

ParticleModuleInitOrientedSprite *__fastcall AllocPreload_ParticleModuleInitOrientedSprite()
{
  return ?AllocPreload_ParticleModuleInitOrientedSprite@@YAPEAUParticleModuleInitOrientedSprite@@XZ();
}

/*
==============
Mark_ParticleModuleForceDragGraph
==============
*/

int __fastcall Mark_ParticleModuleForceDragGraph()
{
  return ?Mark_ParticleModuleForceDragGraph@@YAHXZ();
}

/*
==============
AllocPreload_ParticleModuleInitLightSpot
==============
*/

ParticleModuleInitLightSpot *__fastcall AllocPreload_ParticleModuleInitLightSpot()
{
  return ?AllocPreload_ParticleModuleInitLightSpot@@YAPEAUParticleModuleInitLightSpot@@XZ();
}

/*
==============
Preload_ParticleModuleColorLerpArray
==============
*/

void __fastcall Preload_ParticleModuleColorLerpArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleColorLerpArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ParticleSystemDefPtr
==============
*/

const ParticleSystemDef **__fastcall AllocPreload_ParticleSystemDefPtr()
{
  return ?AllocPreload_ParticleSystemDefPtr@@YAPEAPEBUParticleSystemDef@@XZ();
}

/*
==============
Preload_ParticleModifierArray
==============
*/

void __fastcall Preload_ParticleModifierArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModifierArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleSpawnShapeTypeStream
==============
*/

void __fastcall Preload_ParticleSpawnShapeTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleSpawnShapeTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ParticleEmitterDef
==============
*/

ParticleEmitterDef *__fastcall AllocPostload_ParticleEmitterDef()
{
  return ?AllocPostload_ParticleEmitterDef@@YAPEAUParticleEmitterDef@@XZ();
}

/*
==============
Preload_ParticleLinkedAssetListDefStream
==============
*/

void __fastcall Preload_ParticleLinkedAssetListDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleLinkedAssetListDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitSpawnShapeCylinderStream
==============
*/

void __fastcall Load_ParticleModuleInitSpawnShapeCylinderStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitSpawnShapeCylinderStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleTestTimeInStateStream
==============
*/

void __fastcall Preload_ParticleModuleTestTimeInStateStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleTestTimeInStateStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModifierStream
==============
*/

void __fastcall Load_ParticleModifierStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModifierStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleGravityState
==============
*/

int __fastcall Mark_ParticleGravityState()
{
  return ?Mark_ParticleGravityState@@YAHXZ();
}

/*
==============
AllocLoad_ParticleModuleInitSpawnShapeMesh
==============
*/

ParticleModuleInitSpawnShapeMesh *__fastcall AllocLoad_ParticleModuleInitSpawnShapeMesh()
{
  return ?AllocLoad_ParticleModuleInitSpawnShapeMesh@@YAPEAUParticleModuleInitSpawnShapeMesh@@XZ();
}

/*
==============
AllocPostload_ParticleModuleInitOrientedSprite
==============
*/

ParticleModuleInitOrientedSprite *__fastcall AllocPostload_ParticleModuleInitOrientedSprite()
{
  return ?AllocPostload_ParticleModuleInitOrientedSprite@@YAPEAUParticleModuleInitOrientedSprite@@XZ();
}

/*
==============
Load_ParticleElementTypeArray
==============
*/

void __fastcall Load_ParticleElementTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleElementTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ParticleModulePositionGraph
==============
*/

ParticleModulePositionGraph *__fastcall AllocLoad_ParticleModulePositionGraph()
{
  return ?AllocLoad_ParticleModulePositionGraph@@YAPEAUParticleModulePositionGraph@@XZ();
}

/*
==============
Load_ProcessStructLayout_ParticleRenderOptions
==============
*/

void Load_ProcessStructLayout_ParticleRenderOptions(void)
{
  ?Load_ProcessStructLayout_ParticleRenderOptions@@YAXXZ();
}

/*
==============
Preload_ParticleModuleInitCloudStream
==============
*/

void __fastcall Preload_ParticleModuleInitCloudStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitCloudStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleVelocityGraph
==============
*/

void Load_ProcessStructLayout_ParticleModuleVelocityGraph(void)
{
  ?Load_ProcessStructLayout_ParticleModuleVelocityGraph@@YAXXZ();
}

/*
==============
Mark_ParticleModulePhysicsRayCast
==============
*/

int __fastcall Mark_ParticleModulePhysicsRayCast()
{
  return ?Mark_ParticleModulePhysicsRayCast@@YAHXZ();
}

/*
==============
Preload_ParticleDataFlagsStream
==============
*/

void __fastcall Preload_ParticleDataFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleDataFlagsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleSpawnMeshAssetDefArray
==============
*/

int __fastcall Mark_ParticleSpawnMeshAssetDefArray(const unsigned __int64 count)
{
  return ?Mark_ParticleSpawnMeshAssetDefArray@@YAH_K@Z(count);
}

/*
==============
Preload_ParticleInstancePoolActionStream
==============
*/

void __fastcall Preload_ParticleInstancePoolActionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleInstancePoolActionStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitCloud
==============
*/

void Load_ProcessStructLayout_ParticleModuleInitCloud(void)
{
  ?Load_ProcessStructLayout_ParticleModuleInitCloud@@YAXXZ();
}

/*
==============
Postload_ParticleSystemDefPtrStream
==============
*/

void __fastcall Postload_ParticleSystemDefPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleSystemDefPtrStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ParticleModuleInitVectorField
==============
*/

ParticleModuleInitVectorField *__fastcall AllocLoad_ParticleModuleInitVectorField()
{
  return ?AllocLoad_ParticleModuleInitVectorField@@YAPEAUParticleModuleInitVectorField@@XZ();
}

/*
==============
Load_ParticleModuleInitVolumetricArray
==============
*/

void __fastcall Load_ParticleModuleInitVolumetricArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitVolumetricArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleRotationGraph
==============
*/

void __fastcall Load_ParticleModuleRotationGraph(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleRotationGraph@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleModuleTestTimeInStateArray
==============
*/

void __fastcall Postload_ParticleModuleTestTimeInStateArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleTestTimeInStateArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ParticleModuleGroupDef
==============
*/

ParticleModuleGroupDef *__fastcall AllocLoad_ParticleModuleGroupDef()
{
  return ?AllocLoad_ParticleModuleGroupDef@@YAPEAUParticleModuleGroupDef@@XZ();
}

/*
==============
Mark_ParticleEmissiveCurvesArray
==============
*/

int __fastcall Mark_ParticleEmissiveCurvesArray(const unsigned __int64 count)
{
  return ?Mark_ParticleEmissiveCurvesArray@@YAH_K@Z(count);
}

/*
==============
AllocPostload_ParticleModuleGroupDef
==============
*/

ParticleModuleGroupDef *__fastcall AllocPostload_ParticleModuleGroupDef()
{
  return ?AllocPostload_ParticleModuleGroupDef@@YAPEAUParticleModuleGroupDef@@XZ();
}

/*
==============
Load_ParticleCurveDefStream
==============
*/

void __fastcall Load_ParticleCurveDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleCurveDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleShaderGraphCurvesStream
==============
*/

void __fastcall Preload_ParticleShaderGraphCurvesStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleShaderGraphCurvesStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleFlagsArray
==============
*/

int __fastcall Mark_ParticleModuleFlagsArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleFlagsArray@@YAH_K@Z(count);
}

/*
==============
Load_ParticleModuleInitDecal
==============
*/

void __fastcall Load_ParticleModuleInitDecal(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleInitDecal@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleModuleInitPlayerFacingArray
==============
*/

void __fastcall Postload_ParticleModuleInitPlayerFacingArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitPlayerFacingArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ParticleModulePhysicsLight
==============
*/

ParticleModulePhysicsLight *__fastcall AllocPostload_ParticleModulePhysicsLight()
{
  return ?AllocPostload_ParticleModulePhysicsLight@@YAPEAUParticleModulePhysicsLight@@XZ();
}

/*
==============
Load_ParticleLinkedAssetDefStream
==============
*/

void __fastcall Load_ParticleLinkedAssetDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleLinkedAssetDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ParticleModuleInitSpawn
==============
*/

ParticleModuleInitSpawn *__fastcall AllocPreload_ParticleModuleInitSpawn()
{
  return ?AllocPreload_ParticleModuleInitSpawn@@YAPEAUParticleModuleInitSpawn@@XZ();
}

/*
==============
Load_ProcessStructLayout_ParticleModuleSizeLerp
==============
*/

void Load_ProcessStructLayout_ParticleModuleSizeLerp(void)
{
  ?Load_ProcessStructLayout_ParticleModuleSizeLerp@@YAXXZ();
}

/*
==============
Load_ParticleModuleInitParticleSimStream
==============
*/

void __fastcall Load_ParticleModuleInitParticleSimStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitParticleSimStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleDefStream
==============
*/

void __fastcall Load_ParticleModuleDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleTestTimeInStateArray
==============
*/

int __fastcall Mark_ParticleModuleTestTimeInStateArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleTestTimeInStateArray@@YAH_K@Z(count);
}

/*
==============
Postload_ParticleModuleGravityArray
==============
*/

void __fastcall Postload_ParticleModuleGravityArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleGravityArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleInitMirrorTexture
==============
*/

int __fastcall Mark_ParticleModuleInitMirrorTexture()
{
  return ?Mark_ParticleModuleInitMirrorTexture@@YAHXZ();
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitRunner
==============
*/

void Load_ProcessStructLayout_ParticleModuleInitRunner(void)
{
  ?Load_ProcessStructLayout_ParticleModuleInitRunner@@YAXXZ();
}

/*
==============
Load_ParticleEmissiveCurvesArray
==============
*/

void __fastcall Load_ParticleEmissiveCurvesArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleEmissiveCurvesArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleTypeDef
==============
*/

void __fastcall Postload_ParticleModuleTypeDef(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleTypeDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ParticleCurveDef
==============
*/

ParticleCurveDef *__fastcall AllocLoad_ParticleCurveDef()
{
  return ?AllocLoad_ParticleCurveDef@@YAPEAUParticleCurveDef@@XZ();
}

/*
==============
Postload_ParticleMirrorTextureTypeArray
==============
*/

void __fastcall Postload_ParticleMirrorTextureTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleMirrorTextureTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleInitKillWrapBoxArray
==============
*/

void __fastcall Postload_ParticleModuleInitKillWrapBoxArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitKillWrapBoxArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_Particle_MaterialDataArray
==============
*/

void __fastcall Preload_Particle_MaterialDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_Particle_MaterialDataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleInitOcclusionQueryArray
==============
*/

void __fastcall Postload_ParticleModuleInitOcclusionQueryArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitOcclusionQueryArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleRelativeVelocityType
==============
*/

void __fastcall Postload_ParticleRelativeVelocityType(const DBStreamStart streamStart)
{
  ?Postload_ParticleRelativeVelocityType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleStateDefFlagsStream
==============
*/

void __fastcall Load_ParticleStateDefFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleStateDefFlagsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleInitSpawnShapeBoxArray
==============
*/

void __fastcall Preload_ParticleModuleInitSpawnShapeBoxArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitSpawnShapeBoxArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitTailArray
==============
*/

void __fastcall Load_ParticleModuleInitTailArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitTailArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleTestTimeInStateArray
==============
*/

void __fastcall Preload_ParticleModuleTestTimeInStateArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleTestTimeInStateArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleTestDeath
==============
*/

void __fastcall Load_ParticleModuleTestDeath(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleTestDeath@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleSystemDef
==============
*/

void __fastcall Load_ParticleSystemDef(const DBStreamStart streamStart)
{
  ?Load_ParticleSystemDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ParticleModulePhysicsLight
==============
*/

ParticleModulePhysicsLight *__fastcall AllocPreload_ParticleModulePhysicsLight()
{
  return ?AllocPreload_ParticleModulePhysicsLight@@YAPEAUParticleModulePhysicsLight@@XZ();
}

/*
==============
Load_ProcessStructLayout_ParticleModuleColorLerp
==============
*/

void Load_ProcessStructLayout_ParticleModuleColorLerp(void)
{
  ?Load_ProcessStructLayout_ParticleModuleColorLerp@@YAXXZ();
}

/*
==============
Load_ParticleModuleTestEventHandlerDataStream
==============
*/

void __fastcall Load_ParticleModuleTestEventHandlerDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleTestEventHandlerDataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleIntensityGraphStream
==============
*/

void __fastcall Load_ParticleModuleIntensityGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleIntensityGraphStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleInitRotation3DArray
==============
*/

int __fastcall Mark_ParticleModuleInitRotation3DArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleInitRotation3DArray@@YAH_K@Z(count);
}

/*
==============
Postload_ParticleSystemDef
==============
*/

void __fastcall Postload_ParticleSystemDef(const DBStreamStart streamStart)
{
  ?Postload_ParticleSystemDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ParticleModuleInitBeam
==============
*/

ParticleModuleInitBeam *__fastcall AllocLoad_ParticleModuleInitBeam()
{
  return ?AllocLoad_ParticleModuleInitBeam@@YAPEAUParticleModuleInitBeam@@XZ();
}

/*
==============
Load_ParticleModuleColorGraph
==============
*/

void __fastcall Load_ParticleModuleColorGraph(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleColorGraph@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_ParticlePhysicsFXData
==============
*/

ParticlePhysicsFXData *__fastcall AllocPostload_ParticlePhysicsFXData()
{
  return ?AllocPostload_ParticlePhysicsFXData@@YAPEAUParticlePhysicsFXData@@XZ();
}

/*
==============
Preload_FxMarkProjectionAxisArray
==============
*/

void __fastcall Preload_FxMarkProjectionAxisArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_FxMarkProjectionAxisArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitSpawn
==============
*/

void __fastcall Load_ParticleModuleInitSpawn(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleInitSpawn@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleModuleInitSoundArray
==============
*/

void __fastcall Preload_ParticleModuleInitSoundArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitSoundArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleStateDefFlags
==============
*/

void __fastcall Preload_ParticleStateDefFlags(const DBStreamStart streamStart)
{
  ?Preload_ParticleStateDefFlags@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleModuleInitMaterial
==============
*/

void __fastcall Preload_ParticleModuleInitMaterial(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleInitMaterial@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleModuleRotationGraph
==============
*/

int __fastcall Mark_ParticleModuleRotationGraph()
{
  return ?Mark_ParticleModuleRotationGraph@@YAHXZ();
}

/*
==============
Postload_ParticleModuleInitSpawnShapeMeshArray
==============
*/

void __fastcall Postload_ParticleModuleInitSpawnShapeMeshArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitSpawnShapeMeshArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleSpawnShapeType
==============
*/

void __fastcall Preload_ParticleSpawnShapeType(const DBStreamStart streamStart)
{
  ?Preload_ParticleSpawnShapeType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleModuleGravityArray
==============
*/

void __fastcall Load_ParticleModuleGravityArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleGravityArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleSystemDefPtrStream
==============
*/

void __fastcall Load_ParticleSystemDefPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleSystemDefPtrStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleIntensityGraph
==============
*/

void Load_ProcessStructLayout_ParticleModuleIntensityGraph(void)
{
  ?Load_ProcessStructLayout_ParticleModuleIntensityGraph@@YAXXZ();
}

/*
==============
Postload_ParticleModuleGravity
==============
*/

void __fastcall Postload_ParticleModuleGravity(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleGravity@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleShaderGraphOptions
==============
*/

void __fastcall Load_ParticleShaderGraphOptions(const DBStreamStart streamStart)
{
  ?Load_ParticleShaderGraphOptions@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleModuleTestGravity
==============
*/

void __fastcall Preload_ParticleModuleTestGravity(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleTestGravity@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ParticleModuleInitCloud
==============
*/

ParticleModuleInitCloud *__fastcall AllocPreload_ParticleModuleInitCloud()
{
  return ?AllocPreload_ParticleModuleInitCloud@@YAPEAUParticleModuleInitCloud@@XZ();
}

/*
==============
Preload_ParticleModuleRotationGraphStream
==============
*/

void __fastcall Preload_ParticleModuleRotationGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleRotationGraphStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleEmitterDef
==============
*/

int __fastcall Mark_ParticleEmitterDef()
{
  return ?Mark_ParticleEmitterDef@@YAHXZ();
}

/*
==============
AllocLoad_ParticleModuleInitLightOmni
==============
*/

ParticleModuleInitLightOmni *__fastcall AllocLoad_ParticleModuleInitLightOmni()
{
  return ?AllocLoad_ParticleModuleInitLightOmni@@YAPEAUParticleModuleInitLightOmni@@XZ();
}

/*
==============
Postload_ParticleModuleTestImpactArray
==============
*/

void __fastcall Postload_ParticleModuleTestImpactArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleTestImpactArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ParticleModuleTestAge
==============
*/

ParticleModuleTestAge *__fastcall AllocPreload_ParticleModuleTestAge()
{
  return ?AllocPreload_ParticleModuleTestAge@@YAPEAUParticleModuleTestAge@@XZ();
}

/*
==============
Preload_ParticleSystemDefStream
==============
*/

void __fastcall Preload_ParticleSystemDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleSystemDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleRenderOptionsStream
==============
*/

void __fastcall Preload_ParticleRenderOptionsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleRenderOptionsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ParticleModuleTestAge
==============
*/

ParticleModuleTestAge *__fastcall AllocPostload_ParticleModuleTestAge()
{
  return ?AllocPostload_ParticleModuleTestAge@@YAPEAUParticleModuleTestAge@@XZ();
}

/*
==============
AllocPreload_ParticleModuleTestDeath
==============
*/

ParticleModuleTestDeath *__fastcall AllocPreload_ParticleModuleTestDeath()
{
  return ?AllocPreload_ParticleModuleTestDeath@@YAPEAUParticleModuleTestDeath@@XZ();
}

/*
==============
AllocPostload_ParticleIntRange
==============
*/

ParticleIntRange *__fastcall AllocPostload_ParticleIntRange()
{
  return ?AllocPostload_ParticleIntRange@@YAPEAUParticleIntRange@@XZ();
}

/*
==============
Postload_ParticleModuleInitParticleSimArray
==============
*/

void __fastcall Postload_ParticleModuleInitParticleSimArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitParticleSimArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ParticleModuleTestBirth
==============
*/

ParticleModuleTestBirth *__fastcall AllocPostload_ParticleModuleTestBirth()
{
  return ?AllocPostload_ParticleModuleTestBirth@@YAPEAUParticleModuleTestBirth@@XZ();
}

/*
==============
Load_ParticleSpawnMeshAssetDef
==============
*/

void __fastcall Load_ParticleSpawnMeshAssetDef(const DBStreamStart streamStart)
{
  ?Load_ParticleSpawnMeshAssetDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitOrientedSprite
==============
*/

void Load_ProcessStructLayout_ParticleModuleInitOrientedSprite(void)
{
  ?Load_ProcessStructLayout_ParticleModuleInitOrientedSprite@@YAXXZ();
}

/*
==============
AllocLoad_ParticleModuleInitCloud
==============
*/

ParticleModuleInitCloud *__fastcall AllocLoad_ParticleModuleInitCloud()
{
  return ?AllocLoad_ParticleModuleInitCloud@@YAPEAUParticleModuleInitCloud@@XZ();
}

/*
==============
Postload_ParticleModuleInitGeoTrailStream
==============
*/

void __fastcall Postload_ParticleModuleInitGeoTrailStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitGeoTrailStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleIntRangeArray
==============
*/

void __fastcall Preload_ParticleIntRangeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleIntRangeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleTemperatureGraphArray
==============
*/

void __fastcall Load_ParticleModuleTemperatureGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleTemperatureGraphArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleGroupIDStream
==============
*/

void __fastcall Preload_ParticleGroupIDStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleGroupIDStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleInitDismember
==============
*/

int __fastcall Mark_ParticleModuleInitDismember()
{
  return ?Mark_ParticleModuleInitDismember@@YAHXZ();
}

/*
==============
Postload_ParticleModuleEmissiveGraphArray
==============
*/

void __fastcall Postload_ParticleModuleEmissiveGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleEmissiveGraphArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleRelativeVelocityTypeArray
==============
*/

void __fastcall Postload_ParticleRelativeVelocityTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleRelativeVelocityTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleVectorFieldGraphArray
==============
*/

void __fastcall Load_ParticleModuleVectorFieldGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleVectorFieldGraphArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleShaderGraphCurves
==============
*/

void __fastcall Postload_ParticleShaderGraphCurves(const DBStreamStart streamStart)
{
  ?Postload_ParticleShaderGraphCurves@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleModuleInitModel
==============
*/

int __fastcall Mark_ParticleModuleInitModel()
{
  return ?Mark_ParticleModuleInitModel@@YAHXZ();
}

/*
==============
Mark_ParticleInstancePoolTypeArray
==============
*/

int __fastcall Mark_ParticleInstancePoolTypeArray(const unsigned __int64 count)
{
  return ?Mark_ParticleInstancePoolTypeArray@@YAH_K@Z(count);
}

/*
==============
AllocPostload_ParticleModuleVelocityGraph
==============
*/

ParticleModuleVelocityGraph *__fastcall AllocPostload_ParticleModuleVelocityGraph()
{
  return ?AllocPostload_ParticleModuleVelocityGraph@@YAPEAUParticleModuleVelocityGraph@@XZ();
}

/*
==============
Load_ParticleCurveControlPointDefArray
==============
*/

void __fastcall Load_ParticleCurveControlPointDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleCurveControlPointDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleGroupID
==============
*/

int __fastcall Mark_ParticleGroupID()
{
  return ?Mark_ParticleGroupID@@YAHXZ();
}

/*
==============
Preload_ParticleShaderGraphOptionsStream
==============
*/

void __fastcall Preload_ParticleShaderGraphOptionsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleShaderGraphOptionsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleGroupIDArray
==============
*/

void __fastcall Preload_ParticleGroupIDArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleGroupIDArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleRelativeVelocityTypeStream
==============
*/

void __fastcall Load_ParticleRelativeVelocityTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleRelativeVelocityTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ParticleCurveControlPointDef
==============
*/

ParticleCurveControlPointDef *__fastcall AllocLoad_ParticleCurveControlPointDef()
{
  return ?AllocLoad_ParticleCurveControlPointDef@@YAPEAUParticleCurveControlPointDef@@XZ();
}

/*
==============
AllocLoad_ParticleModuleInitBeamFlags
==============
*/

ParticleModuleInitBeamFlags *__fastcall AllocLoad_ParticleModuleInitBeamFlags()
{
  return ?AllocLoad_ParticleModuleInitBeamFlags@@YAPEAW4ParticleModuleInitBeamFlags@@XZ();
}

/*
==============
Preload_ParticleModuleAxesFlags
==============
*/

void __fastcall Preload_ParticleModuleAxesFlags(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleAxesFlags@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleModuleTypeDefArray
==============
*/

void __fastcall Preload_ParticleModuleTypeDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleTypeDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleGroupDefArray
==============
*/

void __fastcall Postload_ParticleModuleGroupDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleGroupDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitCloudArray
==============
*/

void __fastcall Load_ParticleModuleInitCloudArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitCloudArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleUseScaleOptionsArray
==============
*/

int __fastcall Mark_ParticleUseScaleOptionsArray(const unsigned __int64 count)
{
  return ?Mark_ParticleUseScaleOptionsArray@@YAH_K@Z(count);
}

/*
==============
Preload_ParticleModuleInitDecalArray
==============
*/

void __fastcall Preload_ParticleModuleInitDecalArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitDecalArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleForceArray
==============
*/

int __fastcall Mark_ParticleModuleForceArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleForceArray@@YAH_K@Z(count);
}

/*
==============
Load_ParticleModuleInitModelArray
==============
*/

void __fastcall Load_ParticleModuleInitModelArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitModelArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleGroupIDStream
==============
*/

void __fastcall Postload_ParticleGroupIDStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleGroupIDStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleFloatRange
==============
*/

void __fastcall Postload_ParticleFloatRange(const DBStreamStart streamStart)
{
  ?Postload_ParticleFloatRange@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitRotation3D
==============
*/

void Load_ProcessStructLayout_ParticleModuleInitRotation3D(void)
{
  ?Load_ProcessStructLayout_ParticleModuleInitRotation3D@@YAXXZ();
}

/*
==============
Postload_ParticleModuleInitMirrorTextureStream
==============
*/

void __fastcall Postload_ParticleModuleInitMirrorTextureStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitMirrorTextureStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleInitFlareStream
==============
*/

void __fastcall Postload_ParticleModuleInitFlareStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitFlareStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleGroupDef
==============
*/

int __fastcall Mark_ParticleModuleGroupDef()
{
  return ?Mark_ParticleModuleGroupDef@@YAHXZ();
}

/*
==============
AllocLoad_ParticleModuleColorGraph
==============
*/

ParticleModuleColorGraph *__fastcall AllocLoad_ParticleModuleColorGraph()
{
  return ?AllocLoad_ParticleModuleColorGraph@@YAPEAUParticleModuleColorGraph@@XZ();
}

/*
==============
Load_ParticleModuleInitModel
==============
*/

void __fastcall Load_ParticleModuleInitModel(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleInitModel@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleModuleInitCameraOffsetArray
==============
*/

int __fastcall Mark_ParticleModuleInitCameraOffsetArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleInitCameraOffsetArray@@YAH_K@Z(count);
}

/*
==============
Mark_ParticleLinkedAssetDef
==============
*/

int __fastcall Mark_ParticleLinkedAssetDef()
{
  return ?Mark_ParticleLinkedAssetDef@@YAHXZ();
}

/*
==============
Load_ParticleModuleInitAttributesStream
==============
*/

void __fastcall Load_ParticleModuleInitAttributesStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitAttributesStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleTestTimeInStateStream
==============
*/

void __fastcall Postload_ParticleModuleTestTimeInStateStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleTestTimeInStateStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ParticleModuleTestTimeInState
==============
*/

ParticleModuleTestTimeInState *__fastcall AllocPostload_ParticleModuleTestTimeInState()
{
  return ?AllocPostload_ParticleModuleTestTimeInState@@YAPEAUParticleModuleTestTimeInState@@XZ();
}

/*
==============
Postload_ParticleEmissiveVersionCurvesStream
==============
*/

void __fastcall Postload_ParticleEmissiveVersionCurvesStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleEmissiveVersionCurvesStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleGravityStream
==============
*/

void __fastcall Postload_ParticleModuleGravityStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleGravityStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ParticleModuleForceDragGraph
==============
*/

ParticleModuleForceDragGraph *__fastcall AllocPreload_ParticleModuleForceDragGraph()
{
  return ?AllocPreload_ParticleModuleForceDragGraph@@YAPEAUParticleModuleForceDragGraph@@XZ();
}

/*
==============
Load_ParticleMirrorTextureType
==============
*/

void __fastcall Load_ParticleMirrorTextureType(const DBStreamStart streamStart)
{
  ?Load_ParticleMirrorTextureType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleModuleParentVelocityGraphArray
==============
*/

void __fastcall Load_ParticleModuleParentVelocityGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleParentVelocityGraphArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleParentVelocityGraph
==============
*/

void __fastcall Postload_ParticleModuleParentVelocityGraph(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleParentVelocityGraph@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleModuleInitAtlasArray
==============
*/

int __fastcall Mark_ParticleModuleInitAtlasArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleInitAtlasArray@@YAH_K@Z(count);
}

/*
==============
Postload_ParticleModuleTestGravity
==============
*/

void __fastcall Postload_ParticleModuleTestGravity(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleTestGravity@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_ParticleModuleAttractor
==============
*/

ParticleModuleAttractor *__fastcall AllocPostload_ParticleModuleAttractor()
{
  return ?AllocPostload_ParticleModuleAttractor@@YAPEAUParticleModuleAttractor@@XZ();
}

/*
==============
Postload_ParticleSpawnFlagsStream
==============
*/

void __fastcall Postload_ParticleSpawnFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleSpawnFlagsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleSpawnShapeTypeArray
==============
*/

void __fastcall Load_ParticleSpawnShapeTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleSpawnShapeTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleTestEventHandlerData
==============
*/

void __fastcall Load_ParticleModuleTestEventHandlerData(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleTestEventHandlerData@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleModuleGravityArray
==============
*/

void __fastcall Preload_ParticleModuleGravityArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleGravityArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ParticleSystemDef
==============
*/

void Load_ProcessStructLayout_ParticleSystemDef(void)
{
  ?Load_ProcessStructLayout_ParticleSystemDef@@YAXXZ();
}

/*
==============
Load_ParticleModuleAxesFlagsStream
==============
*/

void __fastcall Load_ParticleModuleAxesFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleAxesFlagsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleUseVelocityOptionsStream
==============
*/

void __fastcall Load_ParticleUseVelocityOptionsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleUseVelocityOptionsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleInitCameraOffsetArray
==============
*/

void __fastcall Preload_ParticleModuleInitCameraOffsetArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitCameraOffsetArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitOcclusionQueryArray
==============
*/

void __fastcall Load_ParticleModuleInitOcclusionQueryArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitOcclusionQueryArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitTailStream
==============
*/

void __fastcall Load_ParticleModuleInitTailStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitTailStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleInitPlayerFacing
==============
*/

void __fastcall Preload_ParticleModuleInitPlayerFacing(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleInitPlayerFacing@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleUseVelocityOptions
==============
*/

void __fastcall Postload_ParticleUseVelocityOptions(const DBStreamStart streamStart)
{
  ?Postload_ParticleUseVelocityOptions@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleGroupDef
==============
*/

void Load_ProcessStructLayout_ParticleModuleGroupDef(void)
{
  ?Load_ProcessStructLayout_ParticleModuleGroupDef@@YAXXZ();
}

/*
==============
Load_ParticleModuleVectorFieldGraphStream
==============
*/

void __fastcall Load_ParticleModuleVectorFieldGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleVectorFieldGraphStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleGroupID
==============
*/

void __fastcall Preload_ParticleGroupID(const DBStreamStart streamStart)
{
  ?Preload_ParticleGroupID@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleModuleInitSpawnShapeCylinderArray
==============
*/

void __fastcall Postload_ParticleModuleInitSpawnShapeCylinderArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitSpawnShapeCylinderArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleEmitterDefFlags
==============
*/

void __fastcall Load_ParticleEmitterDefFlags(const DBStreamStart streamStart)
{
  ?Load_ParticleEmitterDefFlags@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleModuleInitSpawnShapeSphere
==============
*/

void __fastcall Preload_ParticleModuleInitSpawnShapeSphere(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleInitSpawnShapeSphere@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_ParticleModuleAxis
==============
*/

ParticleModuleAxis *__fastcall AllocPostload_ParticleModuleAxis()
{
  return ?AllocPostload_ParticleModuleAxis@@YAPEAW4ParticleModuleAxis@@XZ();
}

/*
==============
Load_ProcessStructLayout_ParticleLinkedAssetDef
==============
*/

void Load_ProcessStructLayout_ParticleLinkedAssetDef(void)
{
  ?Load_ProcessStructLayout_ParticleLinkedAssetDef@@YAXXZ();
}

/*
==============
AllocPreload_ParticleElementType
==============
*/

unsigned int *__fastcall AllocPreload_ParticleElementType()
{
  return ?AllocPreload_ParticleElementType@@YAPEAIXZ();
}

/*
==============
Preload_ParticleModuleInitTail
==============
*/

void __fastcall Preload_ParticleModuleInitTail(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleInitTail@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ParticleRelativeVelocityType
==============
*/

ParticleRelativeVelocityType *__fastcall AllocLoad_ParticleRelativeVelocityType()
{
  return ?AllocLoad_ParticleRelativeVelocityType@@YAPEAW4ParticleRelativeVelocityType@@XZ();
}

/*
==============
AllocPostload_ParticleModuleInitMirrorTexture
==============
*/

ParticleModuleInitMirrorTexture *__fastcall AllocPostload_ParticleModuleInitMirrorTexture()
{
  return ?AllocPostload_ParticleModuleInitMirrorTexture@@YAPEAUParticleModuleInitMirrorTexture@@XZ();
}

/*
==============
Load_ParticleRenderOptions
==============
*/

void __fastcall Load_ParticleRenderOptions(const DBStreamStart streamStart)
{
  ?Load_ParticleRenderOptions@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_ParticleElementType
==============
*/

void Load_ProcessStructLayout_ParticleElementType(void)
{
  ?Load_ProcessStructLayout_ParticleElementType@@YAXXZ();
}

/*
==============
AllocLoad_ParticleModuleInitRotation3D
==============
*/

ParticleModuleInitRotation3D *__fastcall AllocLoad_ParticleModuleInitRotation3D()
{
  return ?AllocLoad_ParticleModuleInitRotation3D@@YAPEAUParticleModuleInitRotation3D@@XZ();
}

/*
==============
Mark_ParticleModuleInitKillWrapBox
==============
*/

int __fastcall Mark_ParticleModuleInitKillWrapBox()
{
  return ?Mark_ParticleModuleInitKillWrapBox@@YAHXZ();
}

/*
==============
Load_ParticleModuleFlagsStream
==============
*/

void __fastcall Load_ParticleModuleFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleFlagsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ParticleImpactDirection
==============
*/

unsigned int *__fastcall AllocPreload_ParticleImpactDirection()
{
  return ?AllocPreload_ParticleImpactDirection@@YAPEAIXZ();
}

/*
==============
Load_ParticleModuleInitKillWrapBox
==============
*/

void __fastcall Load_ParticleModuleInitKillWrapBox(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleInitKillWrapBox@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ParticleModuleAxesFlags
==============
*/

ParticleModuleAxesFlags *__fastcall AllocLoad_ParticleModuleAxesFlags()
{
  return ?AllocLoad_ParticleModuleAxesFlags@@YAPEAW4ParticleModuleAxesFlags@@XZ();
}

/*
==============
AllocLoad_ParticleGroupID
==============
*/

ParticleGroupID *__fastcall AllocLoad_ParticleGroupID()
{
  return ?AllocLoad_ParticleGroupID@@YAPEAW4ParticleGroupID@@XZ();
}

/*
==============
Postload_ParticleModulePositionGraph
==============
*/

void __fastcall Postload_ParticleModulePositionGraph(const DBStreamStart streamStart)
{
  ?Postload_ParticleModulePositionGraph@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_Particle_MaterialDataArray
==============
*/

void __fastcall Load_Particle_MaterialDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_Particle_MaterialDataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleTemperatureGraph
==============
*/

void Load_ProcessStructLayout_ParticleModuleTemperatureGraph(void)
{
  ?Load_ProcessStructLayout_ParticleModuleTemperatureGraph@@YAXXZ();
}

/*
==============
Mark_ParticleModuleTestGravity
==============
*/

int __fastcall Mark_ParticleModuleTestGravity()
{
  return ?Mark_ParticleModuleTestGravity@@YAHXZ();
}

/*
==============
Postload_ParticleMirrorTextureType
==============
*/

void __fastcall Postload_ParticleMirrorTextureType(const DBStreamStart streamStart)
{
  ?Postload_ParticleMirrorTextureType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleModuleDefArray
==============
*/

void __fastcall Preload_ParticleModuleDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModulePositionGraph
==============
*/

int __fastcall Mark_ParticleModulePositionGraph()
{
  return ?Mark_ParticleModulePositionGraph@@YAHXZ();
}

/*
==============
Mark_ParticleModuleInitVectorFieldArray
==============
*/

int __fastcall Mark_ParticleModuleInitVectorFieldArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleInitVectorFieldArray@@YAH_K@Z(count);
}

/*
==============
Preload_ParticleRelativeVelocityTypeStream
==============
*/

void __fastcall Preload_ParticleRelativeVelocityTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleRelativeVelocityTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleLinkedAssetListDef
==============
*/

void __fastcall Postload_ParticleLinkedAssetListDef(const DBStreamStart streamStart)
{
  ?Postload_ParticleLinkedAssetListDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleSystemDefArray
==============
*/

int __fastcall Mark_ParticleSystemDefArray(const unsigned __int64 count)
{
  return ?Mark_ParticleSystemDefArray@@YAH_K@Z(count);
}

/*
==============
AllocPostload_ParticleModuleInitSpawnShapeEllipsoid
==============
*/

ParticleModuleInitSpawnShapeEllipsoid *__fastcall AllocPostload_ParticleModuleInitSpawnShapeEllipsoid()
{
  return ?AllocPostload_ParticleModuleInitSpawnShapeEllipsoid@@YAPEAUParticleModuleInitSpawnShapeEllipsoid@@XZ();
}

/*
==============
Preload_ParticleModuleInitBeamStream
==============
*/

void __fastcall Preload_ParticleModuleInitBeamStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitBeamStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleInitBeamFlagsArray
==============
*/

void __fastcall Postload_ParticleModuleInitBeamFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitBeamFlagsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleTestAgeStream
==============
*/

void __fastcall Postload_ParticleModuleTestAgeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleTestAgeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleEmissiveVersionCurvesArray
==============
*/

void __fastcall Postload_ParticleEmissiveVersionCurvesArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleEmissiveVersionCurvesArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleShaderGraphCurves
==============
*/

void __fastcall Preload_ParticleShaderGraphCurves(const DBStreamStart streamStart)
{
  ?Preload_ParticleShaderGraphCurves@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleSystemDefRef
==============
*/

void __fastcall Postload_ParticleSystemDefRef(const DBStreamStart streamStart)
{
  ?Postload_ParticleSystemDefRef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleEmissiveGraph
==============
*/

void Load_ProcessStructLayout_ParticleModuleEmissiveGraph(void)
{
  ?Load_ProcessStructLayout_ParticleModuleEmissiveGraph@@YAXXZ();
}

/*
==============
Postload_ParticleModuleInitAttributesStream
==============
*/

void __fastcall Postload_ParticleModuleInitAttributesStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitAttributesStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ParticleShaderGraphCurves
==============
*/

void Load_ProcessStructLayout_ParticleShaderGraphCurves(void)
{
  ?Load_ProcessStructLayout_ParticleShaderGraphCurves@@YAXXZ();
}

/*
==============
Preload_ParticleModuleInitSpawnShapeSphereArray
==============
*/

void __fastcall Preload_ParticleModuleInitSpawnShapeSphereArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitSpawnShapeSphereArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ParticleModuleFlags
==============
*/

unsigned int *__fastcall AllocPostload_ParticleModuleFlags()
{
  return ?AllocPostload_ParticleModuleFlags@@YAPEAIXZ();
}

/*
==============
Load_ParticleModuleVelocityGraphStream
==============
*/

void __fastcall Load_ParticleModuleVelocityGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleVelocityGraphStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleVectorFieldGraph
==============
*/

void __fastcall Postload_ParticleModuleVectorFieldGraph(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleVectorFieldGraph@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleModuleInitRotation3D
==============
*/

void __fastcall Preload_ParticleModuleInitRotation3D(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleInitRotation3D@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ParticleModuleTestPos
==============
*/

ParticleModuleTestPos *__fastcall AllocLoad_ParticleModuleTestPos()
{
  return ?AllocLoad_ParticleModuleTestPos@@YAPEAUParticleModuleTestPos@@XZ();
}

/*
==============
Postload_ParticleModulePhysicsLight
==============
*/

void __fastcall Postload_ParticleModulePhysicsLight(const DBStreamStart streamStart)
{
  ?Postload_ParticleModulePhysicsLight@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_ParticleLinkedAssetListDef
==============
*/

void Load_ProcessStructLayout_ParticleLinkedAssetListDef(void)
{
  ?Load_ProcessStructLayout_ParticleLinkedAssetListDef@@YAXXZ();
}

/*
==============
Preload_ParticleModuleEmissionGraphArray
==============
*/

void __fastcall Preload_ParticleModuleEmissionGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleEmissionGraphArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleVelocityGraphStream
==============
*/

void __fastcall Preload_ParticleModuleVelocityGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleVelocityGraphStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleRelativeVelocityType
==============
*/

void __fastcall Preload_ParticleRelativeVelocityType(const DBStreamStart streamStart)
{
  ?Preload_ParticleRelativeVelocityType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ParticleModuleVelocityGraph
==============
*/

ParticleModuleVelocityGraph *__fastcall AllocPreload_ParticleModuleVelocityGraph()
{
  return ?AllocPreload_ParticleModuleVelocityGraph@@YAPEAUParticleModuleVelocityGraph@@XZ();
}

/*
==============
AllocLoad_ParticleModuleTestGravity
==============
*/

ParticleModuleTestGravity *__fastcall AllocLoad_ParticleModuleTestGravity()
{
  return ?AllocLoad_ParticleModuleTestGravity@@YAPEAUParticleModuleTestGravity@@XZ();
}

/*
==============
AllocPreload_ParticleModuleInitRotation3D
==============
*/

ParticleModuleInitRotation3D *__fastcall AllocPreload_ParticleModuleInitRotation3D()
{
  return ?AllocPreload_ParticleModuleInitRotation3D@@YAPEAUParticleModuleInitRotation3D@@XZ();
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitTail
==============
*/

void Load_ProcessStructLayout_ParticleModuleInitTail(void)
{
  ?Load_ProcessStructLayout_ParticleModuleInitTail@@YAXXZ();
}

/*
==============
Load_ProcessStructLayout_ParticleModuleTestEventHandlerData
==============
*/

void Load_ProcessStructLayout_ParticleModuleTestEventHandlerData(void)
{
  ?Load_ProcessStructLayout_ParticleModuleTestEventHandlerData@@YAXXZ();
}

/*
==============
Load_ParticleModuleAxisArray
==============
*/

void __fastcall Load_ParticleModuleAxisArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleAxisArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ParticleSystemDefPtr
==============
*/

void Load_ProcessStructLayout_ParticleSystemDefPtr(void)
{
  ?Load_ProcessStructLayout_ParticleSystemDefPtr@@YAXXZ();
}

/*
==============
Postload_ParticleModuleTestBirthStream
==============
*/

void __fastcall Postload_ParticleModuleTestBirthStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleTestBirthStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ParticleSpawnShapeType
==============
*/

void Load_ProcessStructLayout_ParticleSpawnShapeType(void)
{
  ?Load_ProcessStructLayout_ParticleSpawnShapeType@@YAXXZ();
}

/*
==============
Mark_ParticleModifierArray
==============
*/

int __fastcall Mark_ParticleModifierArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModifierArray@@YAH_K@Z(count);
}

/*
==============
Preload_ParticleModuleShaderGraphStream
==============
*/

void __fastcall Preload_ParticleModuleShaderGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleShaderGraphStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ParticleModuleTestImpact
==============
*/

ParticleModuleTestImpact *__fastcall AllocLoad_ParticleModuleTestImpact()
{
  return ?AllocLoad_ParticleModuleTestImpact@@YAPEAUParticleModuleTestImpact@@XZ();
}

/*
==============
AllocLoad_ParticleModuleVelocityGraph
==============
*/

ParticleModuleVelocityGraph *__fastcall AllocLoad_ParticleModuleVelocityGraph()
{
  return ?AllocLoad_ParticleModuleVelocityGraph@@YAPEAUParticleModuleVelocityGraph@@XZ();
}

/*
==============
Postload_ParticleModuleInitRotationStream
==============
*/

void __fastcall Postload_ParticleModuleInitRotationStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitRotationStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleDataFlagsArray
==============
*/

void __fastcall Postload_ParticleDataFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleDataFlagsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleSystemDefArray
==============
*/

void __fastcall Load_ParticleSystemDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleSystemDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleGroupDefStream
==============
*/

void __fastcall Load_ParticleModuleGroupDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleGroupDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleSpawnShapeType
==============
*/

int __fastcall Mark_ParticleSpawnShapeType()
{
  return ?Mark_ParticleSpawnShapeType@@YAHXZ();
}

/*
==============
Preload_ParticleSpawnMeshAssetDefArray
==============
*/

void __fastcall Preload_ParticleSpawnMeshAssetDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleSpawnMeshAssetDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleSystemDefPtrArray
==============
*/

int __fastcall Mark_ParticleSystemDefPtrArray(const unsigned __int64 count)
{
  return ?Mark_ParticleSystemDefPtrArray@@YAH_K@Z(count);
}

/*
==============
Preload_ParticleModuleTestPos
==============
*/

void __fastcall Preload_ParticleModuleTestPos(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleTestPos@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ParticlePhaseOptions
==============
*/

ParticlePhaseOptions *__fastcall AllocLoad_ParticlePhaseOptions()
{
  return ?AllocLoad_ParticlePhaseOptions@@YAPEAW4ParticlePhaseOptions@@XZ();
}

/*
==============
AllocLoad_ParticleModuleInitGeoTrail
==============
*/

ParticleModuleInitGeoTrail *__fastcall AllocLoad_ParticleModuleInitGeoTrail()
{
  return ?AllocLoad_ParticleModuleInitGeoTrail@@YAPEAUParticleModuleInitGeoTrail@@XZ();
}

/*
==============
Load_ParticleModuleInitSpawnShapeCylinderArray
==============
*/

void __fastcall Load_ParticleModuleInitSpawnShapeCylinderArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitSpawnShapeCylinderArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleVectorFieldGraph
==============
*/

void __fastcall Preload_ParticleModuleVectorFieldGraph(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleVectorFieldGraph@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleDataFlagsArray
==============
*/

int __fastcall Mark_ParticleDataFlagsArray(const unsigned __int64 count)
{
  return ?Mark_ParticleDataFlagsArray@@YAH_K@Z(count);
}

/*
==============
Postload_ParticleModuleScaleByDistanceArray
==============
*/

void __fastcall Postload_ParticleModuleScaleByDistanceArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleScaleByDistanceArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ParticleModuleInitMaterial
==============
*/

ParticleModuleInitMaterial *__fastcall AllocPostload_ParticleModuleInitMaterial()
{
  return ?AllocPostload_ParticleModuleInitMaterial@@YAPEAUParticleModuleInitMaterial@@XZ();
}

/*
==============
Preload_ParticleUseScaleOptionsArray
==============
*/

void __fastcall Preload_ParticleUseScaleOptionsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleUseScaleOptionsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleInitDismemberArray
==============
*/

void __fastcall Preload_ParticleModuleInitDismemberArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitDismemberArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleSystemDefFlagsArray
==============
*/

void __fastcall Preload_ParticleSystemDefFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleSystemDefFlagsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ParticleModuleInitAtlas
==============
*/

ParticleModuleInitAtlas *__fastcall AllocLoad_ParticleModuleInitAtlas()
{
  return ?AllocLoad_ParticleModuleInitAtlas@@YAPEAUParticleModuleInitAtlas@@XZ();
}

/*
==============
Mark_ParticleModuleInitVectorField
==============
*/

int __fastcall Mark_ParticleModuleInitVectorField()
{
  return ?Mark_ParticleModuleInitVectorField@@YAHXZ();
}

/*
==============
Preload_ParticleModuleInitLightSpotStream
==============
*/

void __fastcall Preload_ParticleModuleInitLightSpotStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitLightSpotStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ParticleCurveDef
==============
*/

ParticleCurveDef *__fastcall AllocPreload_ParticleCurveDef()
{
  return ?AllocPreload_ParticleCurveDef@@YAPEAUParticleCurveDef@@XZ();
}

/*
==============
Postload_ParticleModuleInitSoundStream
==============
*/

void __fastcall Postload_ParticleModuleInitSoundStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitSoundStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleSystemDefFlags
==============
*/

int __fastcall Mark_ParticleSystemDefFlags()
{
  return ?Mark_ParticleSystemDefFlags@@YAHXZ();
}

/*
==============
Load_ProcessStructLayout_ParticleModuleShaderGraph
==============
*/

void Load_ProcessStructLayout_ParticleModuleShaderGraph(void)
{
  ?Load_ProcessStructLayout_ParticleModuleShaderGraph@@YAXXZ();
}

/*
==============
Load_ParticleUseOrientationOptionsStream
==============
*/

void __fastcall Load_ParticleUseOrientationOptionsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleUseOrientationOptionsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticlePhysicsFXDataStream
==============
*/

void __fastcall Preload_ParticlePhysicsFXDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticlePhysicsFXDataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleInitSpawnArray
==============
*/

void __fastcall Preload_ParticleModuleInitSpawnArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitSpawnArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleInitSpawnShapeBoxArray
==============
*/

void __fastcall Postload_ParticleModuleInitSpawnShapeBoxArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleInitSpawnShapeBoxArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ParticleSystemDef
==============
*/

ParticleSystemDef *__fastcall AllocLoad_ParticleSystemDef()
{
  return ?AllocLoad_ParticleSystemDef@@YAPEAUParticleSystemDef@@XZ();
}

/*
==============
Preload_ParticleModuleType
==============
*/

void __fastcall Preload_ParticleModuleType(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleGroupIDArray
==============
*/

void __fastcall Load_ParticleGroupIDArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleGroupIDArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ParticleModuleInitSpawnShapeCylinder
==============
*/

ParticleModuleInitSpawnShapeCylinder *__fastcall AllocLoad_ParticleModuleInitSpawnShapeCylinder()
{
  return ?AllocLoad_ParticleModuleInitSpawnShapeCylinder@@YAPEAUParticleModuleInitSpawnShapeCylinder@@XZ();
}

/*
==============
AllocPreload_ParticleModuleInitParticleSim
==============
*/

ParticleModuleInitParticleSim *__fastcall AllocPreload_ParticleModuleInitParticleSim()
{
  return ?AllocPreload_ParticleModuleInitParticleSim@@YAPEAUParticleModuleInitParticleSim@@XZ();
}

/*
==============
Preload_ParticleModuleIntensityGraphArray
==============
*/

void __fastcall Preload_ParticleModuleIntensityGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleIntensityGraphArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_FxMarkProjectionAxis
==============
*/

FxMarkProjectionAxis *__fastcall AllocLoad_FxMarkProjectionAxis()
{
  return ?AllocLoad_FxMarkProjectionAxis@@YAPEAW4FxMarkProjectionAxis@@XZ();
}

/*
==============
Preload_ParticleDataFlagsArray
==============
*/

void __fastcall Preload_ParticleDataFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleDataFlagsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitGeoTrailStream
==============
*/

void __fastcall Load_ParticleModuleInitGeoTrailStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitGeoTrailStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleInitVectorFieldStream
==============
*/

void __fastcall Preload_ParticleModuleInitVectorFieldStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitVectorFieldStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleRotationGraph3DArray
==============
*/

void __fastcall Postload_ParticleModuleRotationGraph3DArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleRotationGraph3DArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleDataFlagsStream
==============
*/

void __fastcall Postload_ParticleDataFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleDataFlagsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleEmissionGraphArray
==============
*/

void __fastcall Load_ParticleModuleEmissionGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleEmissionGraphArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitOcclusionQuery
==============
*/

void __fastcall Load_ParticleModuleInitOcclusionQuery(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleInitOcclusionQuery@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleModuleInitRotation3D
==============
*/

void __fastcall Load_ParticleModuleInitRotation3D(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleInitRotation3D@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleModuleInitVolumetricArray
==============
*/

int __fastcall Mark_ParticleModuleInitVolumetricArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleInitVolumetricArray@@YAH_K@Z(count);
}

/*
==============
AllocPostload_ParticleModuleInitVectorField
==============
*/

ParticleModuleInitVectorField *__fastcall AllocPostload_ParticleModuleInitVectorField()
{
  return ?AllocPostload_ParticleModuleInitVectorField@@YAPEAUParticleModuleInitVectorField@@XZ();
}

/*
==============
AllocPreload_ParticleSpawnMeshAssetDef
==============
*/

ParticleSpawnMeshAssetDef *__fastcall AllocPreload_ParticleSpawnMeshAssetDef()
{
  return ?AllocPreload_ParticleSpawnMeshAssetDef@@YAPEAUParticleSpawnMeshAssetDef@@XZ();
}

/*
==============
Mark_ParticleModuleForce
==============
*/

int __fastcall Mark_ParticleModuleForce()
{
  return ?Mark_ParticleModuleForce@@YAHXZ();
}

/*
==============
Postload_ParticleImpactDirectionStream
==============
*/

void __fastcall Postload_ParticleImpactDirectionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleImpactDirectionStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ParticleModuleInitParticleSim
==============
*/

ParticleModuleInitParticleSim *__fastcall AllocPostload_ParticleModuleInitParticleSim()
{
  return ?AllocPostload_ParticleModuleInitParticleSim@@YAPEAUParticleModuleInitParticleSim@@XZ();
}

/*
==============
AllocLoad_ParticleModuleType
==============
*/

ParticleModuleType *__fastcall AllocLoad_ParticleModuleType()
{
  return ?AllocLoad_ParticleModuleType@@YAPEAW4ParticleModuleType@@XZ();
}

/*
==============
AllocPreload_ParticlePhaseOptions
==============
*/

ParticlePhaseOptions *__fastcall AllocPreload_ParticlePhaseOptions()
{
  return ?AllocPreload_ParticlePhaseOptions@@YAPEAW4ParticlePhaseOptions@@XZ();
}

/*
==============
Preload_ParticleModuleRotationGraph3DArray
==============
*/

void __fastcall Preload_ParticleModuleRotationGraph3DArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleRotationGraph3DArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleGroupDef
==============
*/

void __fastcall Postload_ParticleModuleGroupDef(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleGroupDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleRelativeVelocityTypeStream
==============
*/

void __fastcall Postload_ParticleRelativeVelocityTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleRelativeVelocityTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ParticleModuleRotationGraph
==============
*/

ParticleModuleRotationGraph *__fastcall AllocLoad_ParticleModuleRotationGraph()
{
  return ?AllocLoad_ParticleModuleRotationGraph@@YAPEAUParticleModuleRotationGraph@@XZ();
}

/*
==============
AllocPostload_ParticleModuleInitAttributes
==============
*/

ParticleModuleInitAttributes *__fastcall AllocPostload_ParticleModuleInitAttributes()
{
  return ?AllocPostload_ParticleModuleInitAttributes@@YAPEAUParticleModuleInitAttributes@@XZ();
}

/*
==============
Postload_ParticleSystemDefFlagsStream
==============
*/

void __fastcall Postload_ParticleSystemDefFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleSystemDefFlagsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ParticleModuleInitModel
==============
*/

ParticleModuleInitModel *__fastcall AllocLoad_ParticleModuleInitModel()
{
  return ?AllocLoad_ParticleModuleInitModel@@YAPEAUParticleModuleInitModel@@XZ();
}

/*
==============
AllocLoad_ParticleInstancePoolAction
==============
*/

ParticleInstancePoolAction *__fastcall AllocLoad_ParticleInstancePoolAction()
{
  return ?AllocLoad_ParticleInstancePoolAction@@YAPEAW4ParticleInstancePoolAction@@XZ();
}

/*
==============
Preload_ParticleEmitterDefFlagsArray
==============
*/

void __fastcall Preload_ParticleEmitterDefFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleEmitterDefFlagsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleSpawnMeshAssetDefArray
==============
*/

void __fastcall Postload_ParticleSpawnMeshAssetDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleSpawnMeshAssetDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleDataFlagsArray
==============
*/

void __fastcall Load_ParticleDataFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleDataFlagsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleShaderGraphArray
==============
*/

void __fastcall Postload_ParticleModuleShaderGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleShaderGraphArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleColorGraph
==============
*/

int __fastcall Mark_ParticleModuleColorGraph()
{
  return ?Mark_ParticleModuleColorGraph@@YAHXZ();
}

/*
==============
Postload_ParticleLinkedAssetDefStream
==============
*/

void __fastcall Postload_ParticleLinkedAssetDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleLinkedAssetDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleVectorFieldGraphArray
==============
*/

void __fastcall Postload_ParticleModuleVectorFieldGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleVectorFieldGraphArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleShaderGraphOptionsArray
==============
*/

void __fastcall Postload_ParticleShaderGraphOptionsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleShaderGraphOptionsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleAxisArray
==============
*/

void __fastcall Preload_ParticleModuleAxisArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleAxisArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ParticleEmitterDef
==============
*/

ParticleEmitterDef *__fastcall AllocPreload_ParticleEmitterDef()
{
  return ?AllocPreload_ParticleEmitterDef@@YAPEAUParticleEmitterDef@@XZ();
}

/*
==============
Load_ParticleModuleShaderGraphArray
==============
*/

void __fastcall Load_ParticleModuleShaderGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleShaderGraphArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleIntensityGraph
==============
*/

void __fastcall Postload_ParticleModuleIntensityGraph(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleIntensityGraph@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleModuleInitCloudArray
==============
*/

void __fastcall Preload_ParticleModuleInitCloudArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitCloudArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleCurveDef
==============
*/

void __fastcall Postload_ParticleCurveDef(const DBStreamStart streamStart)
{
  ?Postload_ParticleCurveDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_ParticleUseOrientationOptions
==============
*/

ParticleUseOrientationOptions *__fastcall AllocPostload_ParticleUseOrientationOptions()
{
  return ?AllocPostload_ParticleUseOrientationOptions@@YAPEAW4ParticleUseOrientationOptions@@XZ();
}

/*
==============
AllocPostload_ParticleModuleSizeLerp
==============
*/

ParticleModuleSizeLerp *__fastcall AllocPostload_ParticleModuleSizeLerp()
{
  return ?AllocPostload_ParticleModuleSizeLerp@@YAPEAUParticleModuleSizeLerp@@XZ();
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitSpawn
==============
*/

void Load_ProcessStructLayout_ParticleModuleInitSpawn(void)
{
  ?Load_ProcessStructLayout_ParticleModuleInitSpawn@@YAXXZ();
}

/*
==============
Mark_FxMarkProjectionAxis
==============
*/

int __fastcall Mark_FxMarkProjectionAxis()
{
  return ?Mark_FxMarkProjectionAxis@@YAHXZ();
}

/*
==============
Mark_ParticleModuleAxisArray
==============
*/

int __fastcall Mark_ParticleModuleAxisArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleAxisArray@@YAH_K@Z(count);
}

/*
==============
Preload_ParticleStateDefFlagsStream
==============
*/

void __fastcall Preload_ParticleStateDefFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleStateDefFlagsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitSpawnShapeEllipsoidStream
==============
*/

void __fastcall Load_ParticleModuleInitSpawnShapeEllipsoidStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitSpawnShapeEllipsoidStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleInstancePoolType
==============
*/

void __fastcall Postload_ParticleInstancePoolType(const DBStreamStart streamStart)
{
  ?Postload_ParticleInstancePoolType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleModuleTestGravityArray
==============
*/

int __fastcall Mark_ParticleModuleTestGravityArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleTestGravityArray@@YAH_K@Z(count);
}

/*
==============
Load_ParticleCurveDefArray
==============
*/

void __fastcall Load_ParticleCurveDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleCurveDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleUseOrientationOptions
==============
*/

void __fastcall Load_ParticleUseOrientationOptions(const DBStreamStart streamStart)
{
  ?Load_ParticleUseOrientationOptions@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_ParticleModuleScaleByDistance
==============
*/

ParticleModuleScaleByDistance *__fastcall AllocPostload_ParticleModuleScaleByDistance()
{
  return ?AllocPostload_ParticleModuleScaleByDistance@@YAPEAUParticleModuleScaleByDistance@@XZ();
}

/*
==============
Mark_ParticleModuleInitMaterialArray
==============
*/

int __fastcall Mark_ParticleModuleInitMaterialArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleInitMaterialArray@@YAH_K@Z(count);
}

/*
==============
Load_ParticleModuleRotationGraph3D
==============
*/

void __fastcall Load_ParticleModuleRotationGraph3D(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleRotationGraph3D@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ParticleModuleSizeGraph
==============
*/

ParticleModuleSizeGraph *__fastcall AllocLoad_ParticleModuleSizeGraph()
{
  return ?AllocLoad_ParticleModuleSizeGraph@@YAPEAUParticleModuleSizeGraph@@XZ();
}

/*
==============
Preload_ParticleStateDefStream
==============
*/

void __fastcall Preload_ParticleStateDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleStateDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleInitSpawnStream
==============
*/

void __fastcall Preload_ParticleModuleInitSpawnStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitSpawnStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitMaterial
==============
*/

void __fastcall Load_ParticleModuleInitMaterial(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleInitMaterial@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleModuleInitPlayerFacingStream
==============
*/

void __fastcall Load_ParticleModuleInitPlayerFacingStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitPlayerFacingStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleShaderGraphCurvesArray
==============
*/

void __fastcall Load_ParticleShaderGraphCurvesArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleShaderGraphCurvesArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ParticleModuleInitSpawnShapeEllipsoid
==============
*/

ParticleModuleInitSpawnShapeEllipsoid *__fastcall AllocPreload_ParticleModuleInitSpawnShapeEllipsoid()
{
  return ?AllocPreload_ParticleModuleInitSpawnShapeEllipsoid@@YAPEAUParticleModuleInitSpawnShapeEllipsoid@@XZ();
}

/*
==============
Postload_ParticleModuleAxesFlagsStream
==============
*/

void __fastcall Postload_ParticleModuleAxesFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleAxesFlagsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleInitBeam
==============
*/

void __fastcall Postload_ParticleModuleInitBeam(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleInitBeam@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleIntRange
==============
*/

void __fastcall Postload_ParticleIntRange(const DBStreamStart streamStart)
{
  ?Postload_ParticleIntRange@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleModuleTestAgeArray
==============
*/

int __fastcall Mark_ParticleModuleTestAgeArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleTestAgeArray@@YAH_K@Z(count);
}

/*
==============
Load_ParticleModuleInitRelativeVelocityArray
==============
*/

void __fastcall Load_ParticleModuleInitRelativeVelocityArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitRelativeVelocityArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleIntRange
==============
*/

void __fastcall Load_ParticleIntRange(const DBStreamStart streamStart)
{
  ?Load_ParticleIntRange@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleModuleTestImpactStream
==============
*/

void __fastcall Postload_ParticleModuleTestImpactStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleTestImpactStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleTestTimeInState
==============
*/

int __fastcall Mark_ParticleModuleTestTimeInState()
{
  return ?Mark_ParticleModuleTestTimeInState@@YAHXZ();
}

/*
==============
AllocLoad_ParticleModuleRotationGraph3D
==============
*/

ParticleModuleRotationGraph3D *__fastcall AllocLoad_ParticleModuleRotationGraph3D()
{
  return ?AllocLoad_ParticleModuleRotationGraph3D@@YAPEAUParticleModuleRotationGraph3D@@XZ();
}

/*
==============
Preload_ParticleUseOrientationOptionsArray
==============
*/

void __fastcall Preload_ParticleUseOrientationOptionsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleUseOrientationOptionsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ParticleImpactDirection
==============
*/

unsigned int *__fastcall AllocLoad_ParticleImpactDirection()
{
  return ?AllocLoad_ParticleImpactDirection@@YAPEAIXZ();
}

/*
==============
Load_ParticleModuleInitBeamFlagsStream
==============
*/

void __fastcall Load_ParticleModuleInitBeamFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitBeamFlagsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleEmissiveVersionCurves
==============
*/

void __fastcall Postload_ParticleEmissiveVersionCurves(const DBStreamStart streamStart)
{
  ?Postload_ParticleEmissiveVersionCurves@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleStateDefArray
==============
*/

void __fastcall Preload_ParticleStateDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleStateDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitCameraOffset
==============
*/

void __fastcall Load_ParticleModuleInitCameraOffset(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleInitCameraOffset@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ParticleEmissiveVersionCurves
==============
*/

ParticleEmissiveVersionCurves *__fastcall AllocLoad_ParticleEmissiveVersionCurves()
{
  return ?AllocLoad_ParticleEmissiveVersionCurves@@YAPEAW4ParticleEmissiveVersionCurves@@XZ();
}

/*
==============
AllocLoad_ParticleModuleInitDecal
==============
*/

ParticleModuleInitDecal *__fastcall AllocLoad_ParticleModuleInitDecal()
{
  return ?AllocLoad_ParticleModuleInitDecal@@YAPEAUParticleModuleInitDecal@@XZ();
}

/*
==============
Load_ParticleMirrorTextureTypeArray
==============
*/

void __fastcall Load_ParticleMirrorTextureTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleMirrorTextureTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitVectorField
==============
*/

void __fastcall Load_ParticleModuleInitVectorField(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleInitVectorField@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleModuleRotationGraph
==============
*/

void __fastcall Preload_ParticleModuleRotationGraph(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleRotationGraph@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleModuleForceStream
==============
*/

void __fastcall Load_ParticleModuleForceStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleForceStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitAttributes
==============
*/

void __fastcall Load_ParticleModuleInitAttributes(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleInitAttributes@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleModuleInitSpawnShapeMeshArray
==============
*/

void __fastcall Load_ParticleModuleInitSpawnShapeMeshArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitSpawnShapeMeshArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleInitAtlas
==============
*/

void __fastcall Preload_ParticleModuleInitAtlas(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleInitAtlas@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ParticleModuleForce
==============
*/

ParticleModuleForce *__fastcall AllocLoad_ParticleModuleForce()
{
  return ?AllocLoad_ParticleModuleForce@@YAPEAUParticleModuleForce@@XZ();
}

/*
==============
Preload_ParticleModuleTemperatureGraphStream
==============
*/

void __fastcall Preload_ParticleModuleTemperatureGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleTemperatureGraphStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleTemperatureGraphStream
==============
*/

void __fastcall Load_ParticleModuleTemperatureGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleTemperatureGraphStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleTypeDef
==============
*/

void __fastcall Preload_ParticleModuleTypeDef(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleTypeDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleModuleTemperatureGraphArray
==============
*/

void __fastcall Preload_ParticleModuleTemperatureGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleTemperatureGraphArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ParticleModuleColorGraph
==============
*/

ParticleModuleColorGraph *__fastcall AllocPreload_ParticleModuleColorGraph()
{
  return ?AllocPreload_ParticleModuleColorGraph@@YAPEAUParticleModuleColorGraph@@XZ();
}

/*
==============
Load_ParticleModuleInitLightSpotArray
==============
*/

void __fastcall Load_ParticleModuleInitLightSpotArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitLightSpotArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModulePhysicsRayCastStream
==============
*/

void __fastcall Load_ParticleModulePhysicsRayCastStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModulePhysicsRayCastStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitBeamStream
==============
*/

void __fastcall Load_ParticleModuleInitBeamStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitBeamStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleSizeGraphStream
==============
*/

void __fastcall Load_ParticleModuleSizeGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleSizeGraphStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleInitSpawnShapeCylinder
==============
*/

void __fastcall Preload_ParticleModuleInitSpawnShapeCylinder(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleInitSpawnShapeCylinder@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ParticleModuleInitRelativeVelocity
==============
*/

int __fastcall Mark_ParticleModuleInitRelativeVelocity()
{
  return ?Mark_ParticleModuleInitRelativeVelocity@@YAHXZ();
}

/*
==============
Postload_ParticleMarkVisualsStream
==============
*/

void __fastcall Postload_ParticleMarkVisualsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleMarkVisualsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ParticleModuleInitMaterialStream
==============
*/

void __fastcall Preload_ParticleModuleInitMaterialStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitMaterialStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitAttributesArray
==============
*/

void __fastcall Load_ParticleModuleInitAttributesArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitAttributesArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleScaleByDistanceArray
==============
*/

void __fastcall Load_ParticleModuleScaleByDistanceArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleScaleByDistanceArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleAxis
==============
*/

void __fastcall Load_ParticleModuleAxis(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleAxis@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleModuleInitAttributes
==============
*/

void __fastcall Preload_ParticleModuleInitAttributes(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleInitAttributes@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleModuleTypeDef
==============
*/

void __fastcall Load_ParticleModuleTypeDef(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleTypeDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ParticleShaderGraphOptions
==============
*/

void __fastcall Preload_ParticleShaderGraphOptions(const DBStreamStart streamStart)
{
  ?Preload_ParticleShaderGraphOptions@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleModuleInitLightSpotStream
==============
*/

void __fastcall Load_ParticleModuleInitLightSpotStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitLightSpotStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ParticleModuleSizeLerp
==============
*/

ParticleModuleSizeLerp *__fastcall AllocLoad_ParticleModuleSizeLerp()
{
  return ?AllocLoad_ParticleModuleSizeLerp@@YAPEAUParticleModuleSizeLerp@@XZ();
}

/*
==============
Preload_ParticleModuleInitSpawnShapeCylinderStream
==============
*/

void __fastcall Preload_ParticleModuleInitSpawnShapeCylinderStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ParticleModuleInitSpawnShapeCylinderStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleForceDragGraphStream
==============
*/

void __fastcall Postload_ParticleModuleForceDragGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleForceDragGraphStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleInitSpawnStream
==============
*/

void __fastcall Load_ParticleModuleInitSpawnStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitSpawnStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleInitTail
==============
*/

void __fastcall Postload_ParticleModuleInitTail(const DBStreamStart streamStart)
{
  ?Postload_ParticleModuleInitTail@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_ParticleModuleInitBeamFlags
==============
*/

ParticleModuleInitBeamFlags *__fastcall AllocPostload_ParticleModuleInitBeamFlags()
{
  return ?AllocPostload_ParticleModuleInitBeamFlags@@YAPEAW4ParticleModuleInitBeamFlags@@XZ();
}

/*
==============
Preload_ParticleModuleColorLerp
==============
*/

void __fastcall Preload_ParticleModuleColorLerp(const DBStreamStart streamStart)
{
  ?Preload_ParticleModuleColorLerp@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleLinkedAssetListDefArray
==============
*/

void __fastcall Postload_ParticleLinkedAssetListDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleLinkedAssetListDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ParticleModuleTestAgeArray
==============
*/

void __fastcall Postload_ParticleModuleTestAgeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleTestAgeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ParticleSystemDefPtr
==============
*/

const ParticleSystemDef **__fastcall AllocLoad_ParticleSystemDefPtr()
{
  return ?AllocLoad_ParticleSystemDefPtr@@YAPEAPEBUParticleSystemDef@@XZ();
}

/*
==============
Preload_ParticleModifier
==============
*/

void __fastcall Preload_ParticleModifier(const DBStreamStart streamStart)
{
  ?Preload_ParticleModifier@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleModuleShaderGraphStream
==============
*/

void __fastcall Postload_ParticleModuleShaderGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ParticleModuleShaderGraphStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleGravityOptionsStream
==============
*/

void __fastcall Load_ParticleGravityOptionsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleGravityOptionsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ParticleModuleGravity
==============
*/

void __fastcall Load_ParticleModuleGravity(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleGravity@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ParticleShaderGraphOptions
==============
*/

void __fastcall Postload_ParticleShaderGraphOptions(const DBStreamStart streamStart)
{
  ?Postload_ParticleShaderGraphOptions@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ParticleUseScaleOptions
==============
*/

ParticleUseScaleOptions *__fastcall AllocPreload_ParticleUseScaleOptions()
{
  return ?AllocPreload_ParticleUseScaleOptions@@YAPEAW4ParticleUseScaleOptions@@XZ();
}

/*
==============
Load_ParticleCurveControlPointDef
==============
*/

void __fastcall Load_ParticleCurveControlPointDef(const DBStreamStart streamStart)
{
  ?Load_ParticleCurveControlPointDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ParticleGroupID
==============
*/

ParticleGroupID *__fastcall AllocPreload_ParticleGroupID()
{
  return ?AllocPreload_ParticleGroupID@@YAPEAW4ParticleGroupID@@XZ();
}

/*
==============
AllocPostload_ParticleImpactDirection
==============
*/

unsigned int *__fastcall AllocPostload_ParticleImpactDirection()
{
  return ?AllocPostload_ParticleImpactDirection@@YAPEAIXZ();
}

/*
==============
Load_ParticleModuleVectorFieldGraph
==============
*/

void __fastcall Load_ParticleModuleVectorFieldGraph(const DBStreamStart streamStart)
{
  ?Load_ParticleModuleVectorFieldGraph@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ParticleModuleAxisStream
==============
*/

void __fastcall Load_ParticleModuleAxisStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleAxisStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ParticleModuleIntensityGraphArray
==============
*/

int __fastcall Mark_ParticleModuleIntensityGraphArray(const unsigned __int64 count)
{
  return ?Mark_ParticleModuleIntensityGraphArray@@YAH_K@Z(count);
}

/*
==============
AllocPostload_ParticleModuleAxesFlags
==============
*/

ParticleModuleAxesFlags *__fastcall AllocPostload_ParticleModuleAxesFlags()
{
  return ?AllocPostload_ParticleModuleAxesFlags@@YAPEAW4ParticleModuleAxesFlags@@XZ();
}

/*
==============
Mark_ParticleSystemDefFlagsArray
==============
*/

int __fastcall Mark_ParticleSystemDefFlagsArray(const unsigned __int64 count)
{
  return ?Mark_ParticleSystemDefFlagsArray@@YAH_K@Z(count);
}

/*
==============
AllocPreload_ParticleModuleInitBeam
==============
*/

ParticleModuleInitBeam *__fastcall AllocPreload_ParticleModuleInitBeam()
{
  return ?AllocPreload_ParticleModuleInitBeam@@YAPEAUParticleModuleInitBeam@@XZ();
}

/*
==============
Load_ParticleModuleInitMaterialArray
==============
*/

void __fastcall Load_ParticleModuleInitMaterialArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ParticleModuleInitMaterialArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ParticleModuleInitModel
==============
*/

ParticleModuleInitModel *__fastcall AllocPostload_ParticleModuleInitModel()
{
  return ?AllocPostload_ParticleModuleInitModel@@YAPEAUParticleModuleInitModel@@XZ();
}

/*
==============
Load_FxMarkProjectionAxisStream
==============
*/

void __fastcall Load_FxMarkProjectionAxisStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_FxMarkProjectionAxisStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleRotationGraph
==============
*/

void Load_ProcessStructLayout_ParticleModuleRotationGraph(void)
{
  ?Load_ProcessStructLayout_ParticleModuleRotationGraph@@YAXXZ();
}

/*
==============
AllocPreload_ParticleModuleGroupDef
==============
*/

ParticleModuleGroupDef *__fastcall AllocPreload_ParticleModuleGroupDef()
{
  return ?AllocPreload_ParticleModuleGroupDef@@YAPEAUParticleModuleGroupDef@@XZ();
}

/*
==============
Mark_ParticleModuleTestBirth
==============
*/

int __fastcall Mark_ParticleModuleTestBirth()
{
  return ?Mark_ParticleModuleTestBirth@@YAHXZ();
}

/*
==============
AllocPreload_ParticleModuleInitSpawnShapeSphere
==============
*/

ParticleModuleInitSpawnShapeSphere *__fastcall AllocPreload_ParticleModuleInitSpawnShapeSphere()
{
  return ?AllocPreload_ParticleModuleInitSpawnShapeSphere@@YAPEAUParticleModuleInitSpawnShapeSphere@@XZ();
}

/*
==============
AllocLoad_FxMarkProjectionAxis
==============
*/
FxMarkProjectionAxis *AllocLoad_FxMarkProjectionAxis()
{
  return (FxMarkProjectionAxis *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleCurveControlPointDef
==============
*/
ParticleCurveControlPointDef *AllocLoad_ParticleCurveControlPointDef()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleCurveDef
==============
*/
ParticleCurveDef *AllocLoad_ParticleCurveDef()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleCurveDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleDataFlags
==============
*/
ParticleDataFlags *AllocLoad_ParticleDataFlags()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleDataFlags *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleElementType
==============
*/
unsigned __int8 *AllocLoad_ParticleElementType()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleEmissiveCurves
==============
*/
ParticleEmissiveCurves *AllocLoad_ParticleEmissiveCurves()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleEmissiveCurves *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleEmissiveVersionCurves
==============
*/
ParticleEmissiveVersionCurves *AllocLoad_ParticleEmissiveVersionCurves()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleEmissiveVersionCurves *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleEmitterDef
==============
*/
ParticleEmitterDef *AllocLoad_ParticleEmitterDef()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleEmitterDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleEmitterDefFlags
==============
*/
unsigned __int8 *AllocLoad_ParticleEmitterDefFlags()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleFloatRange
==============
*/
ParticleFloatRange *AllocLoad_ParticleFloatRange()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleFloatRange *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleGravityOptions
==============
*/
ParticleGravityOptions *AllocLoad_ParticleGravityOptions()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleGravityOptions *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleGravityState
==============
*/
unsigned __int8 *AllocLoad_ParticleGravityState()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleGroupID
==============
*/
ParticleGroupID *AllocLoad_ParticleGroupID()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleGroupID *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleImpactDirection
==============
*/
unsigned __int8 *AllocLoad_ParticleImpactDirection()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleInstancePoolAction
==============
*/
ParticleInstancePoolAction *AllocLoad_ParticleInstancePoolAction()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleInstancePoolAction *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleInstancePoolType
==============
*/
ParticleInstancePoolType *AllocLoad_ParticleInstancePoolType()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleInstancePoolType *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleIntRange
==============
*/
ParticleIntRange *AllocLoad_ParticleIntRange()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleIntRange *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleLinkedAssetDef
==============
*/
ParticleLinkedAssetDef *AllocLoad_ParticleLinkedAssetDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleLinkedAssetDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleLinkedAssetListDef
==============
*/
ParticleLinkedAssetListDef *AllocLoad_ParticleLinkedAssetListDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleLinkedAssetListDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleMarkVisuals
==============
*/
ParticleMarkVisuals *AllocLoad_ParticleMarkVisuals()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleMarkVisuals *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleMirrorTextureType
==============
*/
ParticleMirrorTextureType *AllocLoad_ParticleMirrorTextureType()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleMirrorTextureType *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModifier
==============
*/
ParticleModifier *AllocLoad_ParticleModifier()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModifier *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleAttractor
==============
*/
ParticleModuleAttractor *AllocLoad_ParticleModuleAttractor()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleAttractor *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleAxesFlags
==============
*/
ParticleModuleAxesFlags *AllocLoad_ParticleModuleAxesFlags()
{
  return (ParticleModuleAxesFlags *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleAxis
==============
*/
ParticleModuleAxis *AllocLoad_ParticleModuleAxis()
{
  return (ParticleModuleAxis *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleColorGraph
==============
*/
ParticleModuleColorGraph *AllocLoad_ParticleModuleColorGraph()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleColorGraph *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleColorLerp
==============
*/
ParticleModuleColorLerp *AllocLoad_ParticleModuleColorLerp()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleColorLerp *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleDef
==============
*/
ParticleModuleDef *AllocLoad_ParticleModuleDef()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleEmissionGraph
==============
*/
ParticleModuleEmissionGraph *AllocLoad_ParticleModuleEmissionGraph()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleEmissionGraph *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleEmissiveGraph
==============
*/
ParticleModuleEmissiveGraph *AllocLoad_ParticleModuleEmissiveGraph()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleEmissiveGraph *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleFlags
==============
*/
unsigned __int8 *AllocLoad_ParticleModuleFlags()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleForce
==============
*/
ParticleModuleForce *AllocLoad_ParticleModuleForce()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleForce *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleForceDragGraph
==============
*/
ParticleModuleForceDragGraph *AllocLoad_ParticleModuleForceDragGraph()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleForceDragGraph *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleGravity
==============
*/
ParticleModuleGravity *AllocLoad_ParticleModuleGravity()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleGravity *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleGroupDef
==============
*/
ParticleModuleGroupDef *AllocLoad_ParticleModuleGroupDef()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleGroupDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleInitAtlas
==============
*/
ParticleModuleInitAtlas *AllocLoad_ParticleModuleInitAtlas()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitAtlas *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleInitAttributes
==============
*/
ParticleModuleInitAttributes *AllocLoad_ParticleModuleInitAttributes()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitAttributes *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleInitBeam
==============
*/
ParticleModuleInitBeam *AllocLoad_ParticleModuleInitBeam()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitBeam *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleInitBeamFlags
==============
*/
ParticleModuleInitBeamFlags *AllocLoad_ParticleModuleInitBeamFlags()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitBeamFlags *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleInitCameraOffset
==============
*/
ParticleModuleInitCameraOffset *AllocLoad_ParticleModuleInitCameraOffset()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitCameraOffset *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleInitCloud
==============
*/
ParticleModuleInitCloud *AllocLoad_ParticleModuleInitCloud()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitCloud *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleInitDecal
==============
*/
ParticleModuleInitDecal *AllocLoad_ParticleModuleInitDecal()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitDecal *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleInitDismember
==============
*/
ParticleModuleInitDismember *AllocLoad_ParticleModuleInitDismember()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitDismember *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleInitFlare
==============
*/
ParticleModuleInitFlare *AllocLoad_ParticleModuleInitFlare()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitFlare *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleInitGeoTrail
==============
*/
ParticleModuleInitGeoTrail *AllocLoad_ParticleModuleInitGeoTrail()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitGeoTrail *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleInitKillWrapBox
==============
*/
ParticleModuleInitKillWrapBox *AllocLoad_ParticleModuleInitKillWrapBox()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitKillWrapBox *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleInitLightOmni
==============
*/
ParticleModuleInitLightOmni *AllocLoad_ParticleModuleInitLightOmni()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitLightOmni *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleInitLightSpot
==============
*/
ParticleModuleInitLightSpot *AllocLoad_ParticleModuleInitLightSpot()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitLightSpot *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleInitMaterial
==============
*/
ParticleModuleInitMaterial *AllocLoad_ParticleModuleInitMaterial()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitMaterial *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleInitMirrorTexture
==============
*/
ParticleModuleInitMirrorTexture *AllocLoad_ParticleModuleInitMirrorTexture()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitMirrorTexture *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleInitModel
==============
*/
ParticleModuleInitModel *AllocLoad_ParticleModuleInitModel()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitModel *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleInitOcclusionQuery
==============
*/
ParticleModuleInitOcclusionQuery *AllocLoad_ParticleModuleInitOcclusionQuery()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitOcclusionQuery *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleInitOrientedSprite
==============
*/
ParticleModuleInitOrientedSprite *AllocLoad_ParticleModuleInitOrientedSprite()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitOrientedSprite *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleInitParticleSim
==============
*/
ParticleModuleInitParticleSim *AllocLoad_ParticleModuleInitParticleSim()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitParticleSim *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleInitPlayerFacing
==============
*/
ParticleModuleInitPlayerFacing *AllocLoad_ParticleModuleInitPlayerFacing()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitPlayerFacing *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleInitRelativeVelocity
==============
*/
ParticleModuleInitRelativeVelocity *AllocLoad_ParticleModuleInitRelativeVelocity()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitRelativeVelocity *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleInitRotation3D
==============
*/
ParticleModuleInitRotation3D *AllocLoad_ParticleModuleInitRotation3D()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitRotation3D *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleInitRotation
==============
*/
ParticleModuleInitRotation *AllocLoad_ParticleModuleInitRotation()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitRotation *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleInitRunner
==============
*/
ParticleModuleInitRunner *AllocLoad_ParticleModuleInitRunner()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitRunner *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleInitSound
==============
*/
ParticleModuleInitSound *AllocLoad_ParticleModuleInitSound()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitSound *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleInitSpawn
==============
*/
ParticleModuleInitSpawn *AllocLoad_ParticleModuleInitSpawn()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitSpawn *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleInitSpawnShapeBox
==============
*/
ParticleModuleInitSpawnShapeBox *AllocLoad_ParticleModuleInitSpawnShapeBox()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitSpawnShapeBox *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleInitSpawnShapeCylinder
==============
*/
ParticleModuleInitSpawnShapeCylinder *AllocLoad_ParticleModuleInitSpawnShapeCylinder()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitSpawnShapeCylinder *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleInitSpawnShapeEllipsoid
==============
*/
ParticleModuleInitSpawnShapeEllipsoid *AllocLoad_ParticleModuleInitSpawnShapeEllipsoid()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitSpawnShapeEllipsoid *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleInitSpawnShapeMesh
==============
*/
ParticleModuleInitSpawnShapeMesh *AllocLoad_ParticleModuleInitSpawnShapeMesh()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitSpawnShapeMesh *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleInitSpawnShapeSphere
==============
*/
ParticleModuleInitSpawnShapeSphere *AllocLoad_ParticleModuleInitSpawnShapeSphere()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitSpawnShapeSphere *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleInitTail
==============
*/
ParticleModuleInitTail *AllocLoad_ParticleModuleInitTail()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitTail *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleInitVectorField
==============
*/
ParticleModuleInitVectorField *AllocLoad_ParticleModuleInitVectorField()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitVectorField *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleInitVolumetric
==============
*/
ParticleModuleInitVolumetric *AllocLoad_ParticleModuleInitVolumetric()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitVolumetric *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleIntensityGraph
==============
*/
ParticleModuleIntensityGraph *AllocLoad_ParticleModuleIntensityGraph()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleIntensityGraph *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleParentVelocityGraph
==============
*/
ParticleModuleParentVelocityGraph *AllocLoad_ParticleModuleParentVelocityGraph()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleParentVelocityGraph *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModulePhysicsLight
==============
*/
ParticleModulePhysicsLight *AllocLoad_ParticleModulePhysicsLight()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModulePhysicsLight *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModulePhysicsRayCast
==============
*/
ParticleModulePhysicsRayCast *AllocLoad_ParticleModulePhysicsRayCast()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModulePhysicsRayCast *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModulePositionGraph
==============
*/
ParticleModulePositionGraph *AllocLoad_ParticleModulePositionGraph()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModulePositionGraph *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleRotationGraph3D
==============
*/
ParticleModuleRotationGraph3D *AllocLoad_ParticleModuleRotationGraph3D()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleRotationGraph3D *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleRotationGraph
==============
*/
ParticleModuleRotationGraph *AllocLoad_ParticleModuleRotationGraph()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleRotationGraph *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleScaleByDistance
==============
*/
ParticleModuleScaleByDistance *AllocLoad_ParticleModuleScaleByDistance()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleScaleByDistance *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleShaderGraph
==============
*/
ParticleModuleShaderGraph *AllocLoad_ParticleModuleShaderGraph()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleShaderGraph *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleSizeGraph
==============
*/
ParticleModuleSizeGraph *AllocLoad_ParticleModuleSizeGraph()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleSizeGraph *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleSizeLerp
==============
*/
ParticleModuleSizeLerp *AllocLoad_ParticleModuleSizeLerp()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleSizeLerp *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleTemperatureGraph
==============
*/
ParticleModuleTemperatureGraph *AllocLoad_ParticleModuleTemperatureGraph()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleTemperatureGraph *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleTestAge
==============
*/
ParticleModuleTestAge *AllocLoad_ParticleModuleTestAge()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleTestAge *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleTestBirth
==============
*/
ParticleModuleTestBirth *AllocLoad_ParticleModuleTestBirth()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleTestBirth *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleTestDeath
==============
*/
ParticleModuleTestDeath *AllocLoad_ParticleModuleTestDeath()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleTestDeath *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleTestEventHandlerData
==============
*/
ParticleModuleTestEventHandlerData *AllocLoad_ParticleModuleTestEventHandlerData()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleTestEventHandlerData *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleTestGravity
==============
*/
ParticleModuleTestGravity *AllocLoad_ParticleModuleTestGravity()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleTestGravity *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleTestImpact
==============
*/
ParticleModuleTestImpact *AllocLoad_ParticleModuleTestImpact()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleTestImpact *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleTestPos
==============
*/
ParticleModuleTestPos *AllocLoad_ParticleModuleTestPos()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleTestPos *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleTestTimeInState
==============
*/
ParticleModuleTestTimeInState *AllocLoad_ParticleModuleTestTimeInState()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleTestTimeInState *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleType
==============
*/
ParticleModuleType *AllocLoad_ParticleModuleType()
{
  DB_PatchMem_FixStreamAlignment(1ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleType *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleTypeDef
==============
*/
ParticleModuleTypeDef *AllocLoad_ParticleModuleTypeDef()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleTypeDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleVectorFieldGraph
==============
*/
ParticleModuleVectorFieldGraph *AllocLoad_ParticleModuleVectorFieldGraph()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleVectorFieldGraph *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleModuleVelocityGraph
==============
*/
ParticleModuleVelocityGraph *AllocLoad_ParticleModuleVelocityGraph()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleVelocityGraph *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticlePhaseOptions
==============
*/
ParticlePhaseOptions *AllocLoad_ParticlePhaseOptions()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticlePhaseOptions *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticlePhysicsFXData
==============
*/
ParticlePhysicsFXData *AllocLoad_ParticlePhysicsFXData()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticlePhysicsFXData *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleRelativeVelocityType
==============
*/
ParticleRelativeVelocityType *AllocLoad_ParticleRelativeVelocityType()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleRelativeVelocityType *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleRenderOptions
==============
*/
ParticleRenderOptions *AllocLoad_ParticleRenderOptions()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleRenderOptions *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleShaderGraphCurves
==============
*/
ParticleShaderGraphCurves *AllocLoad_ParticleShaderGraphCurves()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleShaderGraphCurves *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleShaderGraphOptions
==============
*/
ParticleShaderGraphOptions *AllocLoad_ParticleShaderGraphOptions()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleShaderGraphOptions *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleSpawnFlags
==============
*/
ParticleSpawnFlags *AllocLoad_ParticleSpawnFlags()
{
  return (ParticleSpawnFlags *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleSpawnMeshAssetDef
==============
*/
ParticleSpawnMeshAssetDef *AllocLoad_ParticleSpawnMeshAssetDef()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleSpawnMeshAssetDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleSpawnShapeType
==============
*/
ParticleSpawnShapeType *AllocLoad_ParticleSpawnShapeType()
{
  return (ParticleSpawnShapeType *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleStateDef
==============
*/
ParticleStateDef *AllocLoad_ParticleStateDef()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleStateDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleStateDefFlags
==============
*/
unsigned __int8 *AllocLoad_ParticleStateDefFlags()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleSystemDef
==============
*/
ParticleSystemDef *AllocLoad_ParticleSystemDef()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleSystemDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleSystemDefFlags
==============
*/
unsigned __int8 *AllocLoad_ParticleSystemDefFlags()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleSystemDefPtr
==============
*/
const ParticleSystemDef **AllocLoad_ParticleSystemDefPtr()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (const ParticleSystemDef **)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleSystemDefRef
==============
*/
ParticleSystemDefRef *AllocLoad_ParticleSystemDefRef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleSystemDefRef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleUseOrientationOptions
==============
*/
ParticleUseOrientationOptions *AllocLoad_ParticleUseOrientationOptions()
{
  return (ParticleUseOrientationOptions *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleUseScaleOptions
==============
*/
ParticleUseScaleOptions *AllocLoad_ParticleUseScaleOptions()
{
  return (ParticleUseScaleOptions *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ParticleUseVelocityOptions
==============
*/
ParticleUseVelocityOptions *AllocLoad_ParticleUseVelocityOptions()
{
  return (ParticleUseVelocityOptions *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_Particle_MaterialData
==============
*/
Particle_MaterialData *AllocLoad_Particle_MaterialData()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (Particle_MaterialData *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_FxMarkProjectionAxis
==============
*/
FxMarkProjectionAxis *AllocPostload_FxMarkProjectionAxis()
{
  return (FxMarkProjectionAxis *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleCurveControlPointDef
==============
*/
ParticleCurveControlPointDef *AllocPostload_ParticleCurveControlPointDef()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleCurveDef
==============
*/
ParticleCurveDef *AllocPostload_ParticleCurveDef()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleCurveDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleDataFlags
==============
*/
ParticleDataFlags *AllocPostload_ParticleDataFlags()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleDataFlags *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleElementType
==============
*/
unsigned __int8 *AllocPostload_ParticleElementType()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleEmissiveCurves
==============
*/
ParticleEmissiveCurves *AllocPostload_ParticleEmissiveCurves()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleEmissiveCurves *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleEmissiveVersionCurves
==============
*/
ParticleEmissiveVersionCurves *AllocPostload_ParticleEmissiveVersionCurves()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleEmissiveVersionCurves *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleEmitterDef
==============
*/
ParticleEmitterDef *AllocPostload_ParticleEmitterDef()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleEmitterDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleEmitterDefFlags
==============
*/
unsigned __int8 *AllocPostload_ParticleEmitterDefFlags()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleFloatRange
==============
*/
ParticleFloatRange *AllocPostload_ParticleFloatRange()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleFloatRange *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleGravityOptions
==============
*/
ParticleGravityOptions *AllocPostload_ParticleGravityOptions()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleGravityOptions *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleGravityState
==============
*/
unsigned __int8 *AllocPostload_ParticleGravityState()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleGroupID
==============
*/
ParticleGroupID *AllocPostload_ParticleGroupID()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleGroupID *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleImpactDirection
==============
*/
unsigned __int8 *AllocPostload_ParticleImpactDirection()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleInstancePoolAction
==============
*/
ParticleInstancePoolAction *AllocPostload_ParticleInstancePoolAction()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleInstancePoolAction *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleInstancePoolType
==============
*/
ParticleInstancePoolType *AllocPostload_ParticleInstancePoolType()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleInstancePoolType *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleIntRange
==============
*/
ParticleIntRange *AllocPostload_ParticleIntRange()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleIntRange *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleLinkedAssetDef
==============
*/
ParticleLinkedAssetDef *AllocPostload_ParticleLinkedAssetDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleLinkedAssetDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleLinkedAssetListDef
==============
*/
ParticleLinkedAssetListDef *AllocPostload_ParticleLinkedAssetListDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleLinkedAssetListDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleMarkVisuals
==============
*/
ParticleMarkVisuals *AllocPostload_ParticleMarkVisuals()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleMarkVisuals *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleMirrorTextureType
==============
*/
ParticleMirrorTextureType *AllocPostload_ParticleMirrorTextureType()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleMirrorTextureType *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModifier
==============
*/
ParticleModifier *AllocPostload_ParticleModifier()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModifier *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleAttractor
==============
*/
ParticleModuleAttractor *AllocPostload_ParticleModuleAttractor()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleAttractor *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleAxesFlags
==============
*/
ParticleModuleAxesFlags *AllocPostload_ParticleModuleAxesFlags()
{
  return (ParticleModuleAxesFlags *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleAxis
==============
*/
ParticleModuleAxis *AllocPostload_ParticleModuleAxis()
{
  return (ParticleModuleAxis *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleColorGraph
==============
*/
ParticleModuleColorGraph *AllocPostload_ParticleModuleColorGraph()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleColorGraph *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleColorLerp
==============
*/
ParticleModuleColorLerp *AllocPostload_ParticleModuleColorLerp()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleColorLerp *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleDef
==============
*/
ParticleModuleDef *AllocPostload_ParticleModuleDef()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleEmissionGraph
==============
*/
ParticleModuleEmissionGraph *AllocPostload_ParticleModuleEmissionGraph()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleEmissionGraph *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleEmissiveGraph
==============
*/
ParticleModuleEmissiveGraph *AllocPostload_ParticleModuleEmissiveGraph()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleEmissiveGraph *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleFlags
==============
*/
unsigned __int8 *AllocPostload_ParticleModuleFlags()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleForce
==============
*/
ParticleModuleForce *AllocPostload_ParticleModuleForce()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleForce *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleForceDragGraph
==============
*/
ParticleModuleForceDragGraph *AllocPostload_ParticleModuleForceDragGraph()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleForceDragGraph *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleGravity
==============
*/
ParticleModuleGravity *AllocPostload_ParticleModuleGravity()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleGravity *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleGroupDef
==============
*/
ParticleModuleGroupDef *AllocPostload_ParticleModuleGroupDef()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleGroupDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleInitAtlas
==============
*/
ParticleModuleInitAtlas *AllocPostload_ParticleModuleInitAtlas()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitAtlas *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleInitAttributes
==============
*/
ParticleModuleInitAttributes *AllocPostload_ParticleModuleInitAttributes()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitAttributes *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleInitBeam
==============
*/
ParticleModuleInitBeam *AllocPostload_ParticleModuleInitBeam()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitBeam *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleInitBeamFlags
==============
*/
ParticleModuleInitBeamFlags *AllocPostload_ParticleModuleInitBeamFlags()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitBeamFlags *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleInitCameraOffset
==============
*/
ParticleModuleInitCameraOffset *AllocPostload_ParticleModuleInitCameraOffset()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitCameraOffset *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleInitCloud
==============
*/
ParticleModuleInitCloud *AllocPostload_ParticleModuleInitCloud()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitCloud *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleInitDecal
==============
*/
ParticleModuleInitDecal *AllocPostload_ParticleModuleInitDecal()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitDecal *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleInitDismember
==============
*/
ParticleModuleInitDismember *AllocPostload_ParticleModuleInitDismember()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitDismember *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleInitFlare
==============
*/
ParticleModuleInitFlare *AllocPostload_ParticleModuleInitFlare()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitFlare *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleInitGeoTrail
==============
*/
ParticleModuleInitGeoTrail *AllocPostload_ParticleModuleInitGeoTrail()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitGeoTrail *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleInitKillWrapBox
==============
*/
ParticleModuleInitKillWrapBox *AllocPostload_ParticleModuleInitKillWrapBox()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitKillWrapBox *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleInitLightOmni
==============
*/
ParticleModuleInitLightOmni *AllocPostload_ParticleModuleInitLightOmni()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitLightOmni *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleInitLightSpot
==============
*/
ParticleModuleInitLightSpot *AllocPostload_ParticleModuleInitLightSpot()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitLightSpot *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleInitMaterial
==============
*/
ParticleModuleInitMaterial *AllocPostload_ParticleModuleInitMaterial()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitMaterial *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleInitMirrorTexture
==============
*/
ParticleModuleInitMirrorTexture *AllocPostload_ParticleModuleInitMirrorTexture()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitMirrorTexture *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleInitModel
==============
*/
ParticleModuleInitModel *AllocPostload_ParticleModuleInitModel()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitModel *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleInitOcclusionQuery
==============
*/
ParticleModuleInitOcclusionQuery *AllocPostload_ParticleModuleInitOcclusionQuery()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitOcclusionQuery *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleInitOrientedSprite
==============
*/
ParticleModuleInitOrientedSprite *AllocPostload_ParticleModuleInitOrientedSprite()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitOrientedSprite *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleInitParticleSim
==============
*/
ParticleModuleInitParticleSim *AllocPostload_ParticleModuleInitParticleSim()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitParticleSim *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleInitPlayerFacing
==============
*/
ParticleModuleInitPlayerFacing *AllocPostload_ParticleModuleInitPlayerFacing()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitPlayerFacing *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleInitRelativeVelocity
==============
*/
ParticleModuleInitRelativeVelocity *AllocPostload_ParticleModuleInitRelativeVelocity()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitRelativeVelocity *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleInitRotation3D
==============
*/
ParticleModuleInitRotation3D *AllocPostload_ParticleModuleInitRotation3D()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitRotation3D *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleInitRotation
==============
*/
ParticleModuleInitRotation *AllocPostload_ParticleModuleInitRotation()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitRotation *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleInitRunner
==============
*/
ParticleModuleInitRunner *AllocPostload_ParticleModuleInitRunner()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitRunner *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleInitSound
==============
*/
ParticleModuleInitSound *AllocPostload_ParticleModuleInitSound()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitSound *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleInitSpawn
==============
*/
ParticleModuleInitSpawn *AllocPostload_ParticleModuleInitSpawn()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitSpawn *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleInitSpawnShapeBox
==============
*/
ParticleModuleInitSpawnShapeBox *AllocPostload_ParticleModuleInitSpawnShapeBox()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitSpawnShapeBox *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleInitSpawnShapeCylinder
==============
*/
ParticleModuleInitSpawnShapeCylinder *AllocPostload_ParticleModuleInitSpawnShapeCylinder()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitSpawnShapeCylinder *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleInitSpawnShapeEllipsoid
==============
*/
ParticleModuleInitSpawnShapeEllipsoid *AllocPostload_ParticleModuleInitSpawnShapeEllipsoid()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitSpawnShapeEllipsoid *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleInitSpawnShapeMesh
==============
*/
ParticleModuleInitSpawnShapeMesh *AllocPostload_ParticleModuleInitSpawnShapeMesh()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitSpawnShapeMesh *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleInitSpawnShapeSphere
==============
*/
ParticleModuleInitSpawnShapeSphere *AllocPostload_ParticleModuleInitSpawnShapeSphere()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitSpawnShapeSphere *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleInitTail
==============
*/
ParticleModuleInitTail *AllocPostload_ParticleModuleInitTail()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitTail *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleInitVectorField
==============
*/
ParticleModuleInitVectorField *AllocPostload_ParticleModuleInitVectorField()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitVectorField *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleInitVolumetric
==============
*/
ParticleModuleInitVolumetric *AllocPostload_ParticleModuleInitVolumetric()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitVolumetric *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleIntensityGraph
==============
*/
ParticleModuleIntensityGraph *AllocPostload_ParticleModuleIntensityGraph()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleIntensityGraph *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleParentVelocityGraph
==============
*/
ParticleModuleParentVelocityGraph *AllocPostload_ParticleModuleParentVelocityGraph()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleParentVelocityGraph *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModulePhysicsLight
==============
*/
ParticleModulePhysicsLight *AllocPostload_ParticleModulePhysicsLight()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModulePhysicsLight *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModulePhysicsRayCast
==============
*/
ParticleModulePhysicsRayCast *AllocPostload_ParticleModulePhysicsRayCast()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModulePhysicsRayCast *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModulePositionGraph
==============
*/
ParticleModulePositionGraph *AllocPostload_ParticleModulePositionGraph()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModulePositionGraph *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleRotationGraph3D
==============
*/
ParticleModuleRotationGraph3D *AllocPostload_ParticleModuleRotationGraph3D()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleRotationGraph3D *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleRotationGraph
==============
*/
ParticleModuleRotationGraph *AllocPostload_ParticleModuleRotationGraph()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleRotationGraph *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleScaleByDistance
==============
*/
ParticleModuleScaleByDistance *AllocPostload_ParticleModuleScaleByDistance()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleScaleByDistance *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleShaderGraph
==============
*/
ParticleModuleShaderGraph *AllocPostload_ParticleModuleShaderGraph()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleShaderGraph *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleSizeGraph
==============
*/
ParticleModuleSizeGraph *AllocPostload_ParticleModuleSizeGraph()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleSizeGraph *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleSizeLerp
==============
*/
ParticleModuleSizeLerp *AllocPostload_ParticleModuleSizeLerp()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleSizeLerp *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleTemperatureGraph
==============
*/
ParticleModuleTemperatureGraph *AllocPostload_ParticleModuleTemperatureGraph()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleTemperatureGraph *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleTestAge
==============
*/
ParticleModuleTestAge *AllocPostload_ParticleModuleTestAge()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleTestAge *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleTestBirth
==============
*/
ParticleModuleTestBirth *AllocPostload_ParticleModuleTestBirth()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleTestBirth *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleTestDeath
==============
*/
ParticleModuleTestDeath *AllocPostload_ParticleModuleTestDeath()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleTestDeath *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleTestEventHandlerData
==============
*/
ParticleModuleTestEventHandlerData *AllocPostload_ParticleModuleTestEventHandlerData()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleTestEventHandlerData *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleTestGravity
==============
*/
ParticleModuleTestGravity *AllocPostload_ParticleModuleTestGravity()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleTestGravity *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleTestImpact
==============
*/
ParticleModuleTestImpact *AllocPostload_ParticleModuleTestImpact()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleTestImpact *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleTestPos
==============
*/
ParticleModuleTestPos *AllocPostload_ParticleModuleTestPos()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleTestPos *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleTestTimeInState
==============
*/
ParticleModuleTestTimeInState *AllocPostload_ParticleModuleTestTimeInState()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleTestTimeInState *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleType
==============
*/
ParticleModuleType *AllocPostload_ParticleModuleType()
{
  DB_PatchMem_FixStreamAlignment(1ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleType *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleTypeDef
==============
*/
ParticleModuleTypeDef *AllocPostload_ParticleModuleTypeDef()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleTypeDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleVectorFieldGraph
==============
*/
ParticleModuleVectorFieldGraph *AllocPostload_ParticleModuleVectorFieldGraph()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleVectorFieldGraph *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleModuleVelocityGraph
==============
*/
ParticleModuleVelocityGraph *AllocPostload_ParticleModuleVelocityGraph()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleVelocityGraph *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticlePhaseOptions
==============
*/
ParticlePhaseOptions *AllocPostload_ParticlePhaseOptions()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticlePhaseOptions *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticlePhysicsFXData
==============
*/
ParticlePhysicsFXData *AllocPostload_ParticlePhysicsFXData()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticlePhysicsFXData *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleRelativeVelocityType
==============
*/
ParticleRelativeVelocityType *AllocPostload_ParticleRelativeVelocityType()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleRelativeVelocityType *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleRenderOptions
==============
*/
ParticleRenderOptions *AllocPostload_ParticleRenderOptions()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleRenderOptions *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleShaderGraphCurves
==============
*/
ParticleShaderGraphCurves *AllocPostload_ParticleShaderGraphCurves()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleShaderGraphCurves *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleShaderGraphOptions
==============
*/
ParticleShaderGraphOptions *AllocPostload_ParticleShaderGraphOptions()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleShaderGraphOptions *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleSpawnFlags
==============
*/
ParticleSpawnFlags *AllocPostload_ParticleSpawnFlags()
{
  return (ParticleSpawnFlags *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleSpawnMeshAssetDef
==============
*/
ParticleSpawnMeshAssetDef *AllocPostload_ParticleSpawnMeshAssetDef()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleSpawnMeshAssetDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleSpawnShapeType
==============
*/
ParticleSpawnShapeType *AllocPostload_ParticleSpawnShapeType()
{
  return (ParticleSpawnShapeType *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleStateDef
==============
*/
ParticleStateDef *AllocPostload_ParticleStateDef()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleStateDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleStateDefFlags
==============
*/
unsigned __int8 *AllocPostload_ParticleStateDefFlags()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleSystemDef
==============
*/
ParticleSystemDef *AllocPostload_ParticleSystemDef()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleSystemDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleSystemDefFlags
==============
*/
unsigned __int8 *AllocPostload_ParticleSystemDefFlags()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleSystemDefPtr
==============
*/
const ParticleSystemDef **AllocPostload_ParticleSystemDefPtr()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (const ParticleSystemDef **)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleSystemDefRef
==============
*/
ParticleSystemDefRef *AllocPostload_ParticleSystemDefRef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleSystemDefRef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleUseOrientationOptions
==============
*/
ParticleUseOrientationOptions *AllocPostload_ParticleUseOrientationOptions()
{
  return (ParticleUseOrientationOptions *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleUseScaleOptions
==============
*/
ParticleUseScaleOptions *AllocPostload_ParticleUseScaleOptions()
{
  return (ParticleUseScaleOptions *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ParticleUseVelocityOptions
==============
*/
ParticleUseVelocityOptions *AllocPostload_ParticleUseVelocityOptions()
{
  return (ParticleUseVelocityOptions *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_Particle_MaterialData
==============
*/
Particle_MaterialData *AllocPostload_Particle_MaterialData()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (Particle_MaterialData *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_FxMarkProjectionAxis
==============
*/
FxMarkProjectionAxis *AllocPreload_FxMarkProjectionAxis()
{
  return (FxMarkProjectionAxis *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleCurveControlPointDef
==============
*/
ParticleCurveControlPointDef *AllocPreload_ParticleCurveControlPointDef()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleCurveDef
==============
*/
ParticleCurveDef *AllocPreload_ParticleCurveDef()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleCurveDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleDataFlags
==============
*/
ParticleDataFlags *AllocPreload_ParticleDataFlags()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleDataFlags *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleElementType
==============
*/
unsigned __int8 *AllocPreload_ParticleElementType()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleEmissiveCurves
==============
*/
ParticleEmissiveCurves *AllocPreload_ParticleEmissiveCurves()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleEmissiveCurves *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleEmissiveVersionCurves
==============
*/
ParticleEmissiveVersionCurves *AllocPreload_ParticleEmissiveVersionCurves()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleEmissiveVersionCurves *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleEmitterDef
==============
*/
ParticleEmitterDef *AllocPreload_ParticleEmitterDef()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleEmitterDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleEmitterDefFlags
==============
*/
unsigned __int8 *AllocPreload_ParticleEmitterDefFlags()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleFloatRange
==============
*/
ParticleFloatRange *AllocPreload_ParticleFloatRange()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleFloatRange *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleGravityOptions
==============
*/
ParticleGravityOptions *AllocPreload_ParticleGravityOptions()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleGravityOptions *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleGravityState
==============
*/
unsigned __int8 *AllocPreload_ParticleGravityState()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleGroupID
==============
*/
ParticleGroupID *AllocPreload_ParticleGroupID()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleGroupID *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleImpactDirection
==============
*/
unsigned __int8 *AllocPreload_ParticleImpactDirection()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleInstancePoolAction
==============
*/
ParticleInstancePoolAction *AllocPreload_ParticleInstancePoolAction()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleInstancePoolAction *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleInstancePoolType
==============
*/
ParticleInstancePoolType *AllocPreload_ParticleInstancePoolType()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleInstancePoolType *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleIntRange
==============
*/
ParticleIntRange *AllocPreload_ParticleIntRange()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleIntRange *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleLinkedAssetDef
==============
*/
ParticleLinkedAssetDef *AllocPreload_ParticleLinkedAssetDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleLinkedAssetDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleLinkedAssetListDef
==============
*/
ParticleLinkedAssetListDef *AllocPreload_ParticleLinkedAssetListDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleLinkedAssetListDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleMarkVisuals
==============
*/
ParticleMarkVisuals *AllocPreload_ParticleMarkVisuals()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleMarkVisuals *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleMirrorTextureType
==============
*/
ParticleMirrorTextureType *AllocPreload_ParticleMirrorTextureType()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleMirrorTextureType *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModifier
==============
*/
ParticleModifier *AllocPreload_ParticleModifier()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModifier *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleAttractor
==============
*/
ParticleModuleAttractor *AllocPreload_ParticleModuleAttractor()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleAttractor *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleAxesFlags
==============
*/
ParticleModuleAxesFlags *AllocPreload_ParticleModuleAxesFlags()
{
  return (ParticleModuleAxesFlags *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleAxis
==============
*/
ParticleModuleAxis *AllocPreload_ParticleModuleAxis()
{
  return (ParticleModuleAxis *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleColorGraph
==============
*/
ParticleModuleColorGraph *AllocPreload_ParticleModuleColorGraph()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleColorGraph *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleColorLerp
==============
*/
ParticleModuleColorLerp *AllocPreload_ParticleModuleColorLerp()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleColorLerp *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleDef
==============
*/
ParticleModuleDef *AllocPreload_ParticleModuleDef()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleEmissionGraph
==============
*/
ParticleModuleEmissionGraph *AllocPreload_ParticleModuleEmissionGraph()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleEmissionGraph *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleEmissiveGraph
==============
*/
ParticleModuleEmissiveGraph *AllocPreload_ParticleModuleEmissiveGraph()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleEmissiveGraph *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleFlags
==============
*/
unsigned __int8 *AllocPreload_ParticleModuleFlags()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleForce
==============
*/
ParticleModuleForce *AllocPreload_ParticleModuleForce()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleForce *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleForceDragGraph
==============
*/
ParticleModuleForceDragGraph *AllocPreload_ParticleModuleForceDragGraph()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleForceDragGraph *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleGravity
==============
*/
ParticleModuleGravity *AllocPreload_ParticleModuleGravity()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleGravity *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleGroupDef
==============
*/
ParticleModuleGroupDef *AllocPreload_ParticleModuleGroupDef()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleGroupDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleInitAtlas
==============
*/
ParticleModuleInitAtlas *AllocPreload_ParticleModuleInitAtlas()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitAtlas *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleInitAttributes
==============
*/
ParticleModuleInitAttributes *AllocPreload_ParticleModuleInitAttributes()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitAttributes *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleInitBeam
==============
*/
ParticleModuleInitBeam *AllocPreload_ParticleModuleInitBeam()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitBeam *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleInitBeamFlags
==============
*/
ParticleModuleInitBeamFlags *AllocPreload_ParticleModuleInitBeamFlags()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitBeamFlags *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleInitCameraOffset
==============
*/
ParticleModuleInitCameraOffset *AllocPreload_ParticleModuleInitCameraOffset()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitCameraOffset *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleInitCloud
==============
*/
ParticleModuleInitCloud *AllocPreload_ParticleModuleInitCloud()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitCloud *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleInitDecal
==============
*/
ParticleModuleInitDecal *AllocPreload_ParticleModuleInitDecal()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitDecal *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleInitDismember
==============
*/
ParticleModuleInitDismember *AllocPreload_ParticleModuleInitDismember()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitDismember *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleInitFlare
==============
*/
ParticleModuleInitFlare *AllocPreload_ParticleModuleInitFlare()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitFlare *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleInitGeoTrail
==============
*/
ParticleModuleInitGeoTrail *AllocPreload_ParticleModuleInitGeoTrail()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitGeoTrail *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleInitKillWrapBox
==============
*/
ParticleModuleInitKillWrapBox *AllocPreload_ParticleModuleInitKillWrapBox()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitKillWrapBox *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleInitLightOmni
==============
*/
ParticleModuleInitLightOmni *AllocPreload_ParticleModuleInitLightOmni()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitLightOmni *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleInitLightSpot
==============
*/
ParticleModuleInitLightSpot *AllocPreload_ParticleModuleInitLightSpot()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitLightSpot *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleInitMaterial
==============
*/
ParticleModuleInitMaterial *AllocPreload_ParticleModuleInitMaterial()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitMaterial *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleInitMirrorTexture
==============
*/
ParticleModuleInitMirrorTexture *AllocPreload_ParticleModuleInitMirrorTexture()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitMirrorTexture *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleInitModel
==============
*/
ParticleModuleInitModel *AllocPreload_ParticleModuleInitModel()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitModel *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleInitOcclusionQuery
==============
*/
ParticleModuleInitOcclusionQuery *AllocPreload_ParticleModuleInitOcclusionQuery()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitOcclusionQuery *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleInitOrientedSprite
==============
*/
ParticleModuleInitOrientedSprite *AllocPreload_ParticleModuleInitOrientedSprite()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitOrientedSprite *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleInitParticleSim
==============
*/
ParticleModuleInitParticleSim *AllocPreload_ParticleModuleInitParticleSim()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitParticleSim *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleInitPlayerFacing
==============
*/
ParticleModuleInitPlayerFacing *AllocPreload_ParticleModuleInitPlayerFacing()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitPlayerFacing *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleInitRelativeVelocity
==============
*/
ParticleModuleInitRelativeVelocity *AllocPreload_ParticleModuleInitRelativeVelocity()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitRelativeVelocity *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleInitRotation3D
==============
*/
ParticleModuleInitRotation3D *AllocPreload_ParticleModuleInitRotation3D()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitRotation3D *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleInitRotation
==============
*/
ParticleModuleInitRotation *AllocPreload_ParticleModuleInitRotation()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitRotation *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleInitRunner
==============
*/
ParticleModuleInitRunner *AllocPreload_ParticleModuleInitRunner()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitRunner *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleInitSound
==============
*/
ParticleModuleInitSound *AllocPreload_ParticleModuleInitSound()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitSound *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleInitSpawn
==============
*/
ParticleModuleInitSpawn *AllocPreload_ParticleModuleInitSpawn()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitSpawn *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleInitSpawnShapeBox
==============
*/
ParticleModuleInitSpawnShapeBox *AllocPreload_ParticleModuleInitSpawnShapeBox()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitSpawnShapeBox *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleInitSpawnShapeCylinder
==============
*/
ParticleModuleInitSpawnShapeCylinder *AllocPreload_ParticleModuleInitSpawnShapeCylinder()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitSpawnShapeCylinder *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleInitSpawnShapeEllipsoid
==============
*/
ParticleModuleInitSpawnShapeEllipsoid *AllocPreload_ParticleModuleInitSpawnShapeEllipsoid()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitSpawnShapeEllipsoid *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleInitSpawnShapeMesh
==============
*/
ParticleModuleInitSpawnShapeMesh *AllocPreload_ParticleModuleInitSpawnShapeMesh()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitSpawnShapeMesh *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleInitSpawnShapeSphere
==============
*/
ParticleModuleInitSpawnShapeSphere *AllocPreload_ParticleModuleInitSpawnShapeSphere()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitSpawnShapeSphere *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleInitTail
==============
*/
ParticleModuleInitTail *AllocPreload_ParticleModuleInitTail()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitTail *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleInitVectorField
==============
*/
ParticleModuleInitVectorField *AllocPreload_ParticleModuleInitVectorField()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitVectorField *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleInitVolumetric
==============
*/
ParticleModuleInitVolumetric *AllocPreload_ParticleModuleInitVolumetric()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleInitVolumetric *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleIntensityGraph
==============
*/
ParticleModuleIntensityGraph *AllocPreload_ParticleModuleIntensityGraph()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleIntensityGraph *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleParentVelocityGraph
==============
*/
ParticleModuleParentVelocityGraph *AllocPreload_ParticleModuleParentVelocityGraph()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleParentVelocityGraph *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModulePhysicsLight
==============
*/
ParticleModulePhysicsLight *AllocPreload_ParticleModulePhysicsLight()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModulePhysicsLight *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModulePhysicsRayCast
==============
*/
ParticleModulePhysicsRayCast *AllocPreload_ParticleModulePhysicsRayCast()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModulePhysicsRayCast *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModulePositionGraph
==============
*/
ParticleModulePositionGraph *AllocPreload_ParticleModulePositionGraph()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModulePositionGraph *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleRotationGraph3D
==============
*/
ParticleModuleRotationGraph3D *AllocPreload_ParticleModuleRotationGraph3D()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleRotationGraph3D *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleRotationGraph
==============
*/
ParticleModuleRotationGraph *AllocPreload_ParticleModuleRotationGraph()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleRotationGraph *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleScaleByDistance
==============
*/
ParticleModuleScaleByDistance *AllocPreload_ParticleModuleScaleByDistance()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleScaleByDistance *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleShaderGraph
==============
*/
ParticleModuleShaderGraph *AllocPreload_ParticleModuleShaderGraph()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleShaderGraph *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleSizeGraph
==============
*/
ParticleModuleSizeGraph *AllocPreload_ParticleModuleSizeGraph()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleSizeGraph *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleSizeLerp
==============
*/
ParticleModuleSizeLerp *AllocPreload_ParticleModuleSizeLerp()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleSizeLerp *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleTemperatureGraph
==============
*/
ParticleModuleTemperatureGraph *AllocPreload_ParticleModuleTemperatureGraph()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleTemperatureGraph *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleTestAge
==============
*/
ParticleModuleTestAge *AllocPreload_ParticleModuleTestAge()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleTestAge *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleTestBirth
==============
*/
ParticleModuleTestBirth *AllocPreload_ParticleModuleTestBirth()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleTestBirth *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleTestDeath
==============
*/
ParticleModuleTestDeath *AllocPreload_ParticleModuleTestDeath()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleTestDeath *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleTestEventHandlerData
==============
*/
ParticleModuleTestEventHandlerData *AllocPreload_ParticleModuleTestEventHandlerData()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleTestEventHandlerData *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleTestGravity
==============
*/
ParticleModuleTestGravity *AllocPreload_ParticleModuleTestGravity()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleTestGravity *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleTestImpact
==============
*/
ParticleModuleTestImpact *AllocPreload_ParticleModuleTestImpact()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleTestImpact *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleTestPos
==============
*/
ParticleModuleTestPos *AllocPreload_ParticleModuleTestPos()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleTestPos *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleTestTimeInState
==============
*/
ParticleModuleTestTimeInState *AllocPreload_ParticleModuleTestTimeInState()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleTestTimeInState *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleType
==============
*/
ParticleModuleType *AllocPreload_ParticleModuleType()
{
  DB_PatchMem_FixStreamAlignment(1ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleType *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleTypeDef
==============
*/
ParticleModuleTypeDef *AllocPreload_ParticleModuleTypeDef()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleTypeDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleVectorFieldGraph
==============
*/
ParticleModuleVectorFieldGraph *AllocPreload_ParticleModuleVectorFieldGraph()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleVectorFieldGraph *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleModuleVelocityGraph
==============
*/
ParticleModuleVelocityGraph *AllocPreload_ParticleModuleVelocityGraph()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleModuleVelocityGraph *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticlePhaseOptions
==============
*/
ParticlePhaseOptions *AllocPreload_ParticlePhaseOptions()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticlePhaseOptions *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticlePhysicsFXData
==============
*/
ParticlePhysicsFXData *AllocPreload_ParticlePhysicsFXData()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticlePhysicsFXData *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleRelativeVelocityType
==============
*/
ParticleRelativeVelocityType *AllocPreload_ParticleRelativeVelocityType()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleRelativeVelocityType *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleRenderOptions
==============
*/
ParticleRenderOptions *AllocPreload_ParticleRenderOptions()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleRenderOptions *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleShaderGraphCurves
==============
*/
ParticleShaderGraphCurves *AllocPreload_ParticleShaderGraphCurves()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleShaderGraphCurves *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleShaderGraphOptions
==============
*/
ParticleShaderGraphOptions *AllocPreload_ParticleShaderGraphOptions()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleShaderGraphOptions *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleSpawnFlags
==============
*/
ParticleSpawnFlags *AllocPreload_ParticleSpawnFlags()
{
  return (ParticleSpawnFlags *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleSpawnMeshAssetDef
==============
*/
ParticleSpawnMeshAssetDef *AllocPreload_ParticleSpawnMeshAssetDef()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleSpawnMeshAssetDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleSpawnShapeType
==============
*/
ParticleSpawnShapeType *AllocPreload_ParticleSpawnShapeType()
{
  return (ParticleSpawnShapeType *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleStateDef
==============
*/
ParticleStateDef *AllocPreload_ParticleStateDef()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleStateDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleStateDefFlags
==============
*/
unsigned __int8 *AllocPreload_ParticleStateDefFlags()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleSystemDef
==============
*/
ParticleSystemDef *AllocPreload_ParticleSystemDef()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleSystemDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleSystemDefFlags
==============
*/
unsigned __int8 *AllocPreload_ParticleSystemDefFlags()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleSystemDefPtr
==============
*/
const ParticleSystemDef **AllocPreload_ParticleSystemDefPtr()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (const ParticleSystemDef **)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleSystemDefRef
==============
*/
ParticleSystemDefRef *AllocPreload_ParticleSystemDefRef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ParticleSystemDefRef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleUseOrientationOptions
==============
*/
ParticleUseOrientationOptions *AllocPreload_ParticleUseOrientationOptions()
{
  return (ParticleUseOrientationOptions *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleUseScaleOptions
==============
*/
ParticleUseScaleOptions *AllocPreload_ParticleUseScaleOptions()
{
  return (ParticleUseScaleOptions *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ParticleUseVelocityOptions
==============
*/
ParticleUseVelocityOptions *AllocPreload_ParticleUseVelocityOptions()
{
  return (ParticleUseVelocityOptions *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_Particle_MaterialData
==============
*/
Particle_MaterialData *AllocPreload_Particle_MaterialData()
{
  DB_PatchMem_FixStreamAlignment(0xFui64);
  DB_CheckCanIncStreamPos(0i64);
  return (Particle_MaterialData *)g_streamPosGlob.pos;
}

/*
==============
Load_FxMarkProjectionAxis
==============
*/
void Load_FxMarkProjectionAxis(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varFxMarkProjectionAxis, 1ui64);
}

/*
==============
Load_FxMarkProjectionAxisArray
==============
*/
void Load_FxMarkProjectionAxisArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varFxMarkProjectionAxis, count);
}

/*
==============
Load_FxMarkProjectionAxisStream
==============
*/
void Load_FxMarkProjectionAxisStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 11460, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varFxMarkProjectionAxis;
    do
    {
      Load_Stream(AtStart, pos, 1ui64);
      pos = g_streamPosGlob.pos;
      varFxMarkProjectionAxis = (FxMarkProjectionAxis *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleCurveControlPointDef
==============
*/
void Load_ParticleCurveControlPointDef(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleCurveControlPointDef, 0x10ui64);
}

/*
==============
Load_ParticleCurveControlPointDefArray
==============
*/
void Load_ParticleCurveControlPointDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleCurveControlPointDef, 16 * count);
}

/*
==============
Load_ParticleCurveControlPointDefStream
==============
*/
void Load_ParticleCurveControlPointDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 9319, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleCurveControlPointDef;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      pos = g_streamPosGlob.pos;
      varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleCurveDef
==============
*/
void Load_ParticleCurveDef(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 
  ParticleCurveControlPointDef *v2; 

  Load_Stream(streamStart, varParticleCurveDef, 0x10ui64);
  v1 = varParticleCurveDef;
  if ( varParticleCurveDef->controlPoints )
  {
    v2 = varParticleCurveControlPointDef;
    DB_PatchMem_FixStreamAlignment(0xFui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->controlPoints = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
    varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
    varParticleCurveControlPointDef = v2;
  }
}

/*
==============
Load_ParticleCurveDefArray
==============
*/
void Load_ParticleCurveDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleCurveDef *i; 
  ParticleCurveDef *v4; 
  ParticleCurveControlPointDef *v5; 

  v2 = count;
  Load_Stream(streamStart, varParticleCurveDef, 16 * count);
  for ( i = varParticleCurveDef; v2; --v2 )
  {
    varParticleCurveDef = i;
    Load_Stream(NotAtStart, i, 0x10ui64);
    v4 = varParticleCurveDef;
    if ( varParticleCurveDef->controlPoints )
    {
      v5 = varParticleCurveControlPointDef;
      DB_PatchMem_FixStreamAlignment(0xFui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->controlPoints = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
      varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
      varParticleCurveControlPointDef = v5;
    }
    ++i;
  }
}

/*
==============
Load_ParticleCurveDefStream
==============
*/
void Load_ParticleCurveDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 
  ParticleCurveControlPointDef *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 9445, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleCurveDef;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      v4 = varParticleCurveDef;
      if ( varParticleCurveDef->controlPoints )
      {
        v5 = varParticleCurveControlPointDef;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->controlPoints = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
        varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
        varParticleCurveControlPointDef = v5;
      }
      pos = g_streamPosGlob.pos;
      varParticleCurveDef = (ParticleCurveDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleDataFlags
==============
*/
void Load_ParticleDataFlags(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleDataFlags, 4ui64);
}

/*
==============
Load_ParticleDataFlagsArray
==============
*/
void Load_ParticleDataFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleDataFlags, 4 * count);
}

/*
==============
Load_ParticleDataFlagsStream
==============
*/
void Load_ParticleDataFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 27609, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleDataFlags;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varParticleDataFlags = (ParticleDataFlags *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleElementType
==============
*/
void Load_ParticleElementType(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleElementType, 4ui64);
}

/*
==============
Load_ParticleElementTypeArray
==============
*/
void Load_ParticleElementTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleElementType, 4 * count);
}

/*
==============
Load_ParticleElementTypeStream
==============
*/
void Load_ParticleElementTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 25280, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleElementType;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varParticleElementType = (unsigned int *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleEmissiveCurves
==============
*/
void Load_ParticleEmissiveCurves(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleEmissiveCurves, 4ui64);
}

/*
==============
Load_ParticleEmissiveCurvesArray
==============
*/
void Load_ParticleEmissiveCurvesArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleEmissiveCurves, 4 * count);
}

/*
==============
Load_ParticleEmissiveCurvesStream
==============
*/
void Load_ParticleEmissiveCurvesStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 10088, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleEmissiveCurves;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varParticleEmissiveCurves = (ParticleEmissiveCurves *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleEmissiveVersionCurves
==============
*/
void Load_ParticleEmissiveVersionCurves(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleEmissiveVersionCurves, 4ui64);
}

/*
==============
Load_ParticleEmissiveVersionCurvesArray
==============
*/
void Load_ParticleEmissiveVersionCurvesArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleEmissiveVersionCurves, 4 * count);
}

/*
==============
Load_ParticleEmissiveVersionCurvesStream
==============
*/
void Load_ParticleEmissiveVersionCurvesStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 10198, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleEmissiveVersionCurves;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varParticleEmissiveVersionCurves = (ParticleEmissiveVersionCurves *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleEmitterDef
==============
*/
void Load_ParticleEmitterDef(const DBStreamStart streamStart)
{
  ParticleEmitterDef *v1; 
  ParticleStateDef *v2; 
  __int64 numStates; 
  ParticleStateDef *i; 
  ParticleCurveDef *v5; 

  Load_Stream(streamStart, varParticleEmitterDef, 0xA0ui64);
  v1 = varParticleEmitterDef;
  if ( varParticleEmitterDef->stateDefs )
  {
    v2 = varParticleStateDef;
    DB_PatchMem_FixStreamAlignment(0xFui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->stateDefs = (ParticleStateDef *)g_streamPosGlob.pos;
    varParticleStateDef = (ParticleStateDef *)g_streamPosGlob.pos;
    numStates = varParticleEmitterDef->numStates;
    Load_Stream(AtStart, g_streamPosGlob.pos, 32 * numStates);
    for ( i = varParticleStateDef; numStates; --numStates )
    {
      varParticleStateDef = i;
      Load_ParticleStateDef(NotAtStart);
      ++i;
    }
    v1 = varParticleEmitterDef;
    varParticleStateDef = v2;
  }
  v5 = varParticleCurveDef;
  varParticleCurveDef = &v1->fadeCurveDef;
  Load_ParticleCurveDef(NotAtStart);
  varParticleCurveDef = v5;
}

/*
==============
Load_ParticleEmitterDefArray
==============
*/
void Load_ParticleEmitterDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleEmitterDef *i; 
  ParticleEmitterDef *v4; 
  ParticleStateDef *v5; 
  __int64 numStates; 
  ParticleStateDef *j; 
  ParticleCurveDef *v8; 
  ParticleCurveDef *v9; 
  ParticleCurveControlPointDef *v10; 

  v2 = count;
  Load_Stream(streamStart, varParticleEmitterDef, 160 * count);
  for ( i = varParticleEmitterDef; v2; --v2 )
  {
    varParticleEmitterDef = i;
    Load_Stream(NotAtStart, i, 0xA0ui64);
    v4 = varParticleEmitterDef;
    if ( varParticleEmitterDef->stateDefs )
    {
      v5 = varParticleStateDef;
      DB_PatchMem_FixStreamAlignment(0xFui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->stateDefs = (ParticleStateDef *)g_streamPosGlob.pos;
      varParticleStateDef = (ParticleStateDef *)g_streamPosGlob.pos;
      numStates = varParticleEmitterDef->numStates;
      Load_Stream(AtStart, g_streamPosGlob.pos, 32 * numStates);
      for ( j = varParticleStateDef; numStates; --numStates )
      {
        varParticleStateDef = j;
        Load_ParticleStateDef(NotAtStart);
        ++j;
      }
      v4 = varParticleEmitterDef;
      varParticleStateDef = v5;
    }
    v8 = varParticleCurveDef;
    varParticleCurveDef = &v4->fadeCurveDef;
    Load_Stream(NotAtStart, &v4->fadeCurveDef, 0x10ui64);
    v9 = varParticleCurveDef;
    if ( varParticleCurveDef->controlPoints )
    {
      v10 = varParticleCurveControlPointDef;
      DB_PatchMem_FixStreamAlignment(0xFui64);
      DB_CheckCanIncStreamPos(0i64);
      v9->controlPoints = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
      varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
      varParticleCurveControlPointDef = v10;
    }
    ++i;
    varParticleCurveDef = v8;
  }
}

/*
==============
Load_ParticleEmitterDefFlags
==============
*/
void Load_ParticleEmitterDefFlags(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleEmitterDefFlags, 4ui64);
}

/*
==============
Load_ParticleEmitterDefFlagsArray
==============
*/
void Load_ParticleEmitterDefFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleEmitterDefFlags, 4 * count);
}

/*
==============
Load_ParticleEmitterDefFlagsStream
==============
*/
void Load_ParticleEmitterDefFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 27554, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleEmitterDefFlags;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varParticleEmitterDefFlags = (unsigned int *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleEmitterDefStream
==============
*/
void Load_ParticleEmitterDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleEmitterDef *v4; 
  ParticleStateDef *v5; 
  __int64 numStates; 
  ParticleStateDef *i; 
  ParticleCurveDef *v8; 
  ParticleCurveDef *v9; 
  ParticleCurveControlPointDef *v10; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 28352, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleEmitterDef;
    do
    {
      Load_Stream(AtStart, pos, 0xA0ui64);
      v4 = varParticleEmitterDef;
      if ( varParticleEmitterDef->stateDefs )
      {
        v5 = varParticleStateDef;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->stateDefs = (ParticleStateDef *)g_streamPosGlob.pos;
        varParticleStateDef = (ParticleStateDef *)g_streamPosGlob.pos;
        numStates = varParticleEmitterDef->numStates;
        Load_Stream(AtStart, g_streamPosGlob.pos, 32 * numStates);
        for ( i = varParticleStateDef; numStates; --numStates )
        {
          varParticleStateDef = i;
          Load_ParticleStateDef(NotAtStart);
          ++i;
        }
        v4 = varParticleEmitterDef;
        varParticleStateDef = v5;
      }
      v8 = varParticleCurveDef;
      varParticleCurveDef = &v4->fadeCurveDef;
      Load_Stream(NotAtStart, &v4->fadeCurveDef, 0x10ui64);
      v9 = varParticleCurveDef;
      if ( varParticleCurveDef->controlPoints )
      {
        v10 = varParticleCurveControlPointDef;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        v9->controlPoints = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
        varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
        varParticleCurveControlPointDef = v10;
      }
      pos = g_streamPosGlob.pos;
      varParticleEmitterDef = (ParticleEmitterDef *)g_streamPosGlob.pos;
      varParticleCurveDef = v8;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleFloatRange
==============
*/
void Load_ParticleFloatRange(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleFloatRange, 8ui64);
}

/*
==============
Load_ParticleFloatRangeArray
==============
*/
void Load_ParticleFloatRangeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleFloatRange, 8 * count);
}

/*
==============
Load_ParticleFloatRangeStream
==============
*/
void Load_ParticleFloatRangeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 9096, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleFloatRange;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      pos = g_streamPosGlob.pos;
      varParticleFloatRange = (ParticleFloatRange *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleGravityOptions
==============
*/
void Load_ParticleGravityOptions(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleGravityOptions, 4ui64);
}

/*
==============
Load_ParticleGravityOptionsArray
==============
*/
void Load_ParticleGravityOptionsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleGravityOptions, 4 * count);
}

/*
==============
Load_ParticleGravityOptionsStream
==============
*/
void Load_ParticleGravityOptionsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 27664, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleGravityOptions;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varParticleGravityOptions = (ParticleGravityOptions *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleGravityState
==============
*/
void Load_ParticleGravityState(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleGravityState, 4ui64);
}

/*
==============
Load_ParticleGravityStateArray
==============
*/
void Load_ParticleGravityStateArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleGravityState, 4 * count);
}

/*
==============
Load_ParticleGravityStateStream
==============
*/
void Load_ParticleGravityStateStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 24034, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleGravityState;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varParticleGravityState = (unsigned int *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleGroupID
==============
*/
void Load_ParticleGroupID(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleGroupID, 4ui64);
}

/*
==============
Load_ParticleGroupIDArray
==============
*/
void Load_ParticleGroupIDArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleGroupID, 4 * count);
}

/*
==============
Load_ParticleGroupIDStream
==============
*/
void Load_ParticleGroupIDStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 27741, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleGroupID;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varParticleGroupID = (ParticleGroupID *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleImpactDirection
==============
*/
void Load_ParticleImpactDirection(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleImpactDirection, 4ui64);
}

/*
==============
Load_ParticleImpactDirectionArray
==============
*/
void Load_ParticleImpactDirectionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleImpactDirection, 4 * count);
}

/*
==============
Load_ParticleImpactDirectionStream
==============
*/
void Load_ParticleImpactDirectionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 24373, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleImpactDirection;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varParticleImpactDirection = (unsigned int *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleInstancePoolAction
==============
*/
void Load_ParticleInstancePoolAction(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleInstancePoolAction, 4ui64);
}

/*
==============
Load_ParticleInstancePoolActionArray
==============
*/
void Load_ParticleInstancePoolActionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleInstancePoolAction, 4 * count);
}

/*
==============
Load_ParticleInstancePoolActionStream
==============
*/
void Load_ParticleInstancePoolActionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 13973, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleInstancePoolAction;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varParticleInstancePoolAction = (ParticleInstancePoolAction *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleInstancePoolType
==============
*/
void Load_ParticleInstancePoolType(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleInstancePoolType, 4ui64);
}

/*
==============
Load_ParticleInstancePoolTypeArray
==============
*/
void Load_ParticleInstancePoolTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleInstancePoolType, 4 * count);
}

/*
==============
Load_ParticleInstancePoolTypeStream
==============
*/
void Load_ParticleInstancePoolTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 14028, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleInstancePoolType;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varParticleInstancePoolType = (ParticleInstancePoolType *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleIntRange
==============
*/
void Load_ParticleIntRange(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleIntRange, 8ui64);
}

/*
==============
Load_ParticleIntRangeArray
==============
*/
void Load_ParticleIntRangeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleIntRange, 8 * count);
}

/*
==============
Load_ParticleIntRangeStream
==============
*/
void Load_ParticleIntRangeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 9196, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleIntRange;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      pos = g_streamPosGlob.pos;
      varParticleIntRange = (ParticleIntRange *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleLinkedAssetDef
==============
*/
void Load_ParticleLinkedAssetDef(const DBStreamStart streamStart)
{
  ParticleModuleType moduleType; 
  Material **v2; 
  ParticlePhysicsFXData *v3; 
  FxParticleSimAnimation **v4; 
  ParticleMarkVisuals *v5; 
  const char **v6; 
  VectorField **v7; 
  const ParticleSystemDef **v8; 
  GfxLightDef **v9; 
  XModel **v10; 

  moduleType = varParticleModuleDef->moduleType;
  if ( varParticleModuleDef->moduleType == PARTICLE_MODULE_INIT_MATERIAL )
  {
    v2 = varMaterialHandle;
    varMaterialHandle = &varParticleLinkedAssetDef->material;
    Load_MaterialHandle(streamStart);
    varMaterialHandle = v2;
  }
  else
  {
    switch ( moduleType )
    {
      case PARTICLE_MODULE_INIT_MODEL:
      case PARTICLE_MODULE_INIT_SPAWN_SHAPE_MESH:
        v10 = varXModelPtr;
        varXModelPtr = (XModel **)varParticleLinkedAssetDef;
        Load_XModelPtr(streamStart);
        varXModelPtr = v10;
        break;
      case PARTICLE_MODULE_PHYSICS_LIGHT:
        v3 = varParticlePhysicsFXData;
        varParticlePhysicsFXData = (ParticlePhysicsFXData *)varParticleLinkedAssetDef;
        Load_ParticlePhysicsFXData(streamStart);
        varParticlePhysicsFXData = v3;
        break;
      case PARTICLE_MODULE_INIT_PARTICLE_SIM:
        v4 = varFxParticleSimAnimationPtr;
        varFxParticleSimAnimationPtr = (FxParticleSimAnimation **)varParticleLinkedAssetDef;
        Load_FxParticleSimAnimationPtr(streamStart);
        varFxParticleSimAnimationPtr = v4;
        break;
      case PARTICLE_MODULE_INIT_DECAL:
        v5 = varParticleMarkVisuals;
        varParticleMarkVisuals = (ParticleMarkVisuals *)varParticleLinkedAssetDef;
        Load_ParticleMarkVisuals(streamStart);
        varParticleMarkVisuals = v5;
        break;
      case PARTICLE_MODULE_INIT_SOUND:
        v6 = varXString;
        varXString = (const char **)varParticleLinkedAssetDef;
        Load_XString(streamStart);
        varXString = v6;
        break;
      case PARTICLE_MODULE_INIT_VECTOR_FIELD:
        v7 = varVectorFieldPtr;
        varVectorFieldPtr = (VectorField **)varParticleLinkedAssetDef;
        Load_VectorFieldPtr(streamStart);
        varVectorFieldPtr = v7;
        break;
      default:
        if ( (unsigned __int16)(moduleType - 9) <= 1u )
        {
          v9 = varGfxLightDefPtr;
          varGfxLightDefPtr = (GfxLightDef **)varParticleLinkedAssetDef;
          Load_GfxLightDefPtr(streamStart);
          varGfxLightDefPtr = v9;
        }
        else if ( moduleType == PARTICLE_MODULE_INIT_BEAM || moduleType == PARTICLE_MODULE_INIT_RUNNER || varParticleModuleTestEventHandlerData )
        {
          v8 = varParticleSystemDefPtr;
          varParticleSystemDefPtr = (const ParticleSystemDef **)varParticleLinkedAssetDef;
          Load_ParticleSystemDefPtr(streamStart);
          varParticleSystemDefPtr = v8;
        }
        break;
    }
  }
}

/*
==============
Load_ParticleLinkedAssetDefArray
==============
*/
void Load_ParticleLinkedAssetDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleLinkedAssetDef *i; 
  ParticleModuleType moduleType; 
  Material **v5; 
  ParticlePhysicsFXData *v6; 
  FxParticleSimAnimation **v7; 
  ParticleMarkVisuals *v8; 
  const char **v9; 
  VectorField **v10; 
  const ParticleSystemDef **v11; 
  GfxLightDef **v12; 
  XModel **v13; 

  v2 = count;
  Load_Stream(streamStart, varParticleLinkedAssetDef, 32 * count);
  for ( i = varParticleLinkedAssetDef; v2; --v2 )
  {
    varParticleLinkedAssetDef = i;
    moduleType = varParticleModuleDef->moduleType;
    if ( varParticleModuleDef->moduleType == PARTICLE_MODULE_INIT_MATERIAL )
    {
      v5 = varMaterialHandle;
      varMaterialHandle = &i->material;
      Load_MaterialHandle(NotAtStart);
      varMaterialHandle = v5;
    }
    else
    {
      switch ( moduleType )
      {
        case PARTICLE_MODULE_INIT_MODEL:
        case PARTICLE_MODULE_INIT_SPAWN_SHAPE_MESH:
          v13 = varXModelPtr;
          varXModelPtr = (XModel **)i;
          Load_XModelPtr(NotAtStart);
          varXModelPtr = v13;
          break;
        case PARTICLE_MODULE_PHYSICS_LIGHT:
          v6 = varParticlePhysicsFXData;
          varParticlePhysicsFXData = (ParticlePhysicsFXData *)i;
          Load_ParticlePhysicsFXData(NotAtStart);
          varParticlePhysicsFXData = v6;
          break;
        case PARTICLE_MODULE_INIT_PARTICLE_SIM:
          v7 = varFxParticleSimAnimationPtr;
          varFxParticleSimAnimationPtr = (FxParticleSimAnimation **)i;
          Load_FxParticleSimAnimationPtr(NotAtStart);
          varFxParticleSimAnimationPtr = v7;
          break;
        case PARTICLE_MODULE_INIT_DECAL:
          v8 = varParticleMarkVisuals;
          varParticleMarkVisuals = (ParticleMarkVisuals *)i;
          Load_ParticleMarkVisuals(NotAtStart);
          varParticleMarkVisuals = v8;
          break;
        case PARTICLE_MODULE_INIT_SOUND:
          v9 = varXString;
          varXString = (const char **)i;
          Load_XString(NotAtStart);
          varXString = v9;
          break;
        case PARTICLE_MODULE_INIT_VECTOR_FIELD:
          v10 = varVectorFieldPtr;
          varVectorFieldPtr = (VectorField **)i;
          Load_VectorFieldPtr(NotAtStart);
          varVectorFieldPtr = v10;
          break;
        default:
          if ( (unsigned __int16)(moduleType - 9) <= 1u )
          {
            v12 = varGfxLightDefPtr;
            varGfxLightDefPtr = (GfxLightDef **)i;
            Load_GfxLightDefPtr(NotAtStart);
            varGfxLightDefPtr = v12;
          }
          else if ( moduleType == PARTICLE_MODULE_INIT_BEAM || moduleType == PARTICLE_MODULE_INIT_RUNNER || varParticleModuleTestEventHandlerData )
          {
            v11 = varParticleSystemDefPtr;
            varParticleSystemDefPtr = (const ParticleSystemDef **)i;
            Load_ParticleSystemDefPtr(NotAtStart);
            varParticleSystemDefPtr = v11;
          }
          break;
      }
    }
    ++i;
  }
}

/*
==============
Load_ParticleLinkedAssetDefStream
==============
*/
void Load_ParticleLinkedAssetDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleLinkedAssetDef *pos; 
  ParticleModuleType moduleType; 
  Material **v5; 
  ParticlePhysicsFXData *v6; 
  FxParticleSimAnimation **v7; 
  ParticleMarkVisuals *v8; 
  const char **v9; 
  VectorField **v10; 
  const ParticleSystemDef **v11; 
  GfxLightDef **v12; 
  XModel **v13; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 9930, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = varParticleLinkedAssetDef;
    do
    {
      moduleType = varParticleModuleDef->moduleType;
      if ( varParticleModuleDef->moduleType == PARTICLE_MODULE_INIT_MATERIAL )
      {
        v5 = varMaterialHandle;
        varMaterialHandle = &pos->material;
        Load_MaterialHandle(AtStart);
        varMaterialHandle = v5;
      }
      else
      {
        switch ( moduleType )
        {
          case PARTICLE_MODULE_INIT_MODEL:
          case PARTICLE_MODULE_INIT_SPAWN_SHAPE_MESH:
            v13 = varXModelPtr;
            varXModelPtr = (XModel **)pos;
            Load_XModelPtr(AtStart);
            varXModelPtr = v13;
            break;
          case PARTICLE_MODULE_PHYSICS_LIGHT:
            v6 = varParticlePhysicsFXData;
            varParticlePhysicsFXData = (ParticlePhysicsFXData *)pos;
            Load_ParticlePhysicsFXData(AtStart);
            varParticlePhysicsFXData = v6;
            break;
          case PARTICLE_MODULE_INIT_PARTICLE_SIM:
            v7 = varFxParticleSimAnimationPtr;
            varFxParticleSimAnimationPtr = (FxParticleSimAnimation **)pos;
            Load_FxParticleSimAnimationPtr(AtStart);
            varFxParticleSimAnimationPtr = v7;
            break;
          case PARTICLE_MODULE_INIT_DECAL:
            v8 = varParticleMarkVisuals;
            varParticleMarkVisuals = (ParticleMarkVisuals *)pos;
            Load_ParticleMarkVisuals(AtStart);
            varParticleMarkVisuals = v8;
            break;
          case PARTICLE_MODULE_INIT_SOUND:
            v9 = varXString;
            varXString = (const char **)pos;
            Load_XString(AtStart);
            varXString = v9;
            break;
          case PARTICLE_MODULE_INIT_VECTOR_FIELD:
            v10 = varVectorFieldPtr;
            varVectorFieldPtr = (VectorField **)pos;
            Load_VectorFieldPtr(AtStart);
            varVectorFieldPtr = v10;
            break;
          default:
            if ( (unsigned __int16)(moduleType - 9) <= 1u )
            {
              v12 = varGfxLightDefPtr;
              varGfxLightDefPtr = (GfxLightDef **)pos;
              Load_GfxLightDefPtr(AtStart);
              varGfxLightDefPtr = v12;
            }
            else if ( moduleType == PARTICLE_MODULE_INIT_BEAM || moduleType == PARTICLE_MODULE_INIT_RUNNER || varParticleModuleTestEventHandlerData )
            {
              v11 = varParticleSystemDefPtr;
              varParticleSystemDefPtr = (const ParticleSystemDef **)pos;
              Load_ParticleSystemDefPtr(AtStart);
              varParticleSystemDefPtr = v11;
            }
            break;
        }
      }
      pos = (ParticleLinkedAssetDef *)g_streamPosGlob.pos;
      varParticleLinkedAssetDef = (ParticleLinkedAssetDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleLinkedAssetListDef
==============
*/
void Load_ParticleLinkedAssetListDef(const DBStreamStart streamStart)
{
  ParticleLinkedAssetListDef *v1; 
  ParticleLinkedAssetDef *v2; 
  __int64 numAssets; 
  ParticleLinkedAssetDef *i; 

  Load_Stream(streamStart, varParticleLinkedAssetListDef, 0x10ui64);
  v1 = varParticleLinkedAssetListDef;
  if ( varParticleLinkedAssetListDef->assetList )
  {
    v2 = varParticleLinkedAssetDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->assetList = (ParticleLinkedAssetDef *)g_streamPosGlob.pos;
    varParticleLinkedAssetDef = (ParticleLinkedAssetDef *)g_streamPosGlob.pos;
    numAssets = varParticleLinkedAssetListDef->numAssets;
    Load_Stream(AtStart, g_streamPosGlob.pos, 32 * numAssets);
    for ( i = varParticleLinkedAssetDef; numAssets; --numAssets )
    {
      varParticleLinkedAssetDef = i;
      Load_ParticleLinkedAssetDef(NotAtStart);
      ++i;
    }
    varParticleLinkedAssetDef = v2;
  }
}

/*
==============
Load_ParticleLinkedAssetListDefArray
==============
*/
void Load_ParticleLinkedAssetListDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleLinkedAssetListDef *i; 
  ParticleLinkedAssetListDef *v4; 
  ParticleLinkedAssetDef *v5; 
  __int64 numAssets; 
  ParticleLinkedAssetDef *j; 

  v2 = count;
  Load_Stream(streamStart, varParticleLinkedAssetListDef, 16 * count);
  for ( i = varParticleLinkedAssetListDef; v2; --v2 )
  {
    varParticleLinkedAssetListDef = i;
    Load_Stream(NotAtStart, i, 0x10ui64);
    v4 = varParticleLinkedAssetListDef;
    if ( varParticleLinkedAssetListDef->assetList )
    {
      v5 = varParticleLinkedAssetDef;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->assetList = (ParticleLinkedAssetDef *)g_streamPosGlob.pos;
      varParticleLinkedAssetDef = (ParticleLinkedAssetDef *)g_streamPosGlob.pos;
      numAssets = varParticleLinkedAssetListDef->numAssets;
      Load_Stream(AtStart, g_streamPosGlob.pos, 32 * numAssets);
      for ( j = varParticleLinkedAssetDef; numAssets; --numAssets )
      {
        varParticleLinkedAssetDef = j;
        Load_ParticleLinkedAssetDef(NotAtStart);
        ++j;
      }
      varParticleLinkedAssetDef = v5;
    }
    ++i;
  }
}

/*
==============
Load_ParticleLinkedAssetListDefStream
==============
*/
void Load_ParticleLinkedAssetListDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleLinkedAssetListDef *v4; 
  ParticleLinkedAssetDef *v5; 
  __int64 numAssets; 
  ParticleLinkedAssetDef *i; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 10033, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleLinkedAssetListDef;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      v4 = varParticleLinkedAssetListDef;
      if ( varParticleLinkedAssetListDef->assetList )
      {
        v5 = varParticleLinkedAssetDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->assetList = (ParticleLinkedAssetDef *)g_streamPosGlob.pos;
        varParticleLinkedAssetDef = (ParticleLinkedAssetDef *)g_streamPosGlob.pos;
        numAssets = varParticleLinkedAssetListDef->numAssets;
        Load_Stream(AtStart, g_streamPosGlob.pos, 32 * numAssets);
        for ( i = varParticleLinkedAssetDef; numAssets; --numAssets )
        {
          varParticleLinkedAssetDef = i;
          Load_ParticleLinkedAssetDef(NotAtStart);
          ++i;
        }
        varParticleLinkedAssetDef = v5;
      }
      pos = g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = (ParticleLinkedAssetListDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleMarkVisuals
==============
*/
void Load_ParticleMarkVisuals(const DBStreamStart streamStart)
{
  Material **v1; 

  Load_Stream(streamStart, varParticleMarkVisuals, 0x18ui64);
  v1 = varMaterialHandle;
  varMaterialHandle = (Material **)varParticleMarkVisuals;
  Load_MaterialHandleArray(NotAtStart, 3ui64);
  varMaterialHandle = v1;
}

/*
==============
Load_ParticleMarkVisualsArray
==============
*/
void Load_ParticleMarkVisualsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleMarkVisuals *i; 
  Material **v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleMarkVisuals, 24 * count);
  for ( i = varParticleMarkVisuals; v2; --v2 )
  {
    varParticleMarkVisuals = i;
    Load_Stream(NotAtStart, i, 0x18ui64);
    v4 = varMaterialHandle;
    varMaterialHandle = (Material **)varParticleMarkVisuals;
    Load_MaterialHandleArray(NotAtStart, 3ui64);
    ++i;
    varMaterialHandle = v4;
  }
}

/*
==============
Load_ParticleMarkVisualsStream
==============
*/
void Load_ParticleMarkVisualsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  Material **v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 9622, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleMarkVisuals;
    do
    {
      Load_Stream(AtStart, pos, 0x18ui64);
      v4 = varMaterialHandle;
      varMaterialHandle = (Material **)varParticleMarkVisuals;
      Load_MaterialHandleArray(NotAtStart, 3ui64);
      pos = g_streamPosGlob.pos;
      varParticleMarkVisuals = (ParticleMarkVisuals *)g_streamPosGlob.pos;
      varMaterialHandle = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleMirrorTextureType
==============
*/
void Load_ParticleMirrorTextureType(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleMirrorTextureType, 4ui64);
}

/*
==============
Load_ParticleMirrorTextureTypeArray
==============
*/
void Load_ParticleMirrorTextureTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleMirrorTextureType, 4 * count);
}

/*
==============
Load_ParticleMirrorTextureTypeStream
==============
*/
void Load_ParticleMirrorTextureTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 14674, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleMirrorTextureType;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varParticleMirrorTextureType = (ParticleMirrorTextureType *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModifier
==============
*/
void Load_ParticleModifier(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModifier, 0x20ui64);
}

/*
==============
Load_ParticleModifierArray
==============
*/
void Load_ParticleModifierArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModifier, 32 * count);
}

/*
==============
Load_ParticleModifierStream
==============
*/
void Load_ParticleModifierStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleModifier *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 10298, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = varParticleModifier;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      pos = (ParticleModifier *)g_streamPosGlob.pos;
      varParticleModifier = (ParticleModifier *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleAttractor
==============
*/
void Load_ParticleModuleAttractor(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleAttractor, 0x30ui64);
}

/*
==============
Load_ParticleModuleAttractorArray
==============
*/
void Load_ParticleModuleAttractorArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleAttractor, 48 * count);
}

/*
==============
Load_ParticleModuleAttractorStream
==============
*/
void Load_ParticleModuleAttractorStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 19869, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleAttractor;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleAttractor = (ParticleModuleAttractor *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleAxesFlags
==============
*/
void Load_ParticleModuleAxesFlags(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleAxesFlags, 1ui64);
}

/*
==============
Load_ParticleModuleAxesFlagsArray
==============
*/
void Load_ParticleModuleAxesFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleAxesFlags, count);
}

/*
==============
Load_ParticleModuleAxesFlagsStream
==============
*/
void Load_ParticleModuleAxesFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 8996, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleAxesFlags;
    do
    {
      Load_Stream(AtStart, pos, 1ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleAxesFlags = (ParticleModuleAxesFlags *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleAxis
==============
*/
void Load_ParticleModuleAxis(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleAxis, 1ui64);
}

/*
==============
Load_ParticleModuleAxisArray
==============
*/
void Load_ParticleModuleAxisArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleAxis, count);
}

/*
==============
Load_ParticleModuleAxisStream
==============
*/
void Load_ParticleModuleAxisStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 17087, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleAxis;
    do
    {
      Load_Stream(AtStart, pos, 1ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleAxis = (ParticleModuleAxis *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleColorGraph
==============
*/
void Load_ParticleModuleColorGraph(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 

  Load_Stream(streamStart, varParticleModuleColorGraph, 0x90ui64);
  v1 = varParticleCurveDef;
  varParticleCurveDef = varParticleModuleColorGraph->m_curves;
  Load_ParticleCurveDefArray(NotAtStart, 8ui64);
  varParticleCurveDef = v1;
}

/*
==============
Load_ParticleModuleColorGraphArray
==============
*/
void Load_ParticleModuleColorGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleColorGraph *i; 
  ParticleCurveDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleColorGraph, 144 * count);
  for ( i = varParticleModuleColorGraph; v2; --v2 )
  {
    varParticleModuleColorGraph = i;
    Load_Stream(NotAtStart, i, 0x90ui64);
    v4 = varParticleCurveDef;
    varParticleCurveDef = varParticleModuleColorGraph->m_curves;
    Load_ParticleCurveDefArray(NotAtStart, 8ui64);
    ++i;
    varParticleCurveDef = v4;
  }
}

/*
==============
Load_ParticleModuleColorGraphStream
==============
*/
void Load_ParticleModuleColorGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 20038, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleColorGraph;
    do
    {
      Load_Stream(AtStart, pos, 0x90ui64);
      v4 = varParticleCurveDef;
      varParticleCurveDef = varParticleModuleColorGraph->m_curves;
      Load_ParticleCurveDefArray(NotAtStart, 8ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleColorGraph = (ParticleModuleColorGraph *)g_streamPosGlob.pos;
      varParticleCurveDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleColorLerp
==============
*/
void Load_ParticleModuleColorLerp(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleColorLerp, 0x30ui64);
}

/*
==============
Load_ParticleModuleColorLerpArray
==============
*/
void Load_ParticleModuleColorLerpArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleColorLerp, 48 * count);
}

/*
==============
Load_ParticleModuleColorLerpStream
==============
*/
void Load_ParticleModuleColorLerpStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 20184, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleColorLerp;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleColorLerp = (ParticleModuleColorLerp *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleDef
==============
*/
void Load_ParticleModuleDef(const DBStreamStart streamStart)
{
  ParticleModuleTypeDef *v1; 

  Load_Stream(streamStart, varParticleModuleDef, 0xF0ui64);
  v1 = varParticleModuleTypeDef;
  varParticleModuleTypeDef = &varParticleModuleDef->moduleData;
  Load_ParticleModuleTypeDef(NotAtStart);
  varParticleModuleTypeDef = v1;
}

/*
==============
Load_ParticleModuleDefArray
==============
*/
void Load_ParticleModuleDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleDef *i; 
  ParticleModuleTypeDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleDef, 240 * count);
  for ( i = varParticleModuleDef; v2; --v2 )
  {
    varParticleModuleDef = i;
    Load_Stream(NotAtStart, i, 0xF0ui64);
    v4 = varParticleModuleTypeDef;
    varParticleModuleTypeDef = &varParticleModuleDef->moduleData;
    Load_ParticleModuleTypeDef(NotAtStart);
    ++i;
    varParticleModuleTypeDef = v4;
  }
}

/*
==============
Load_ParticleModuleDefStream
==============
*/
void Load_ParticleModuleDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleModuleTypeDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 27170, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleDef;
    do
    {
      Load_Stream(AtStart, pos, 0xF0ui64);
      v4 = varParticleModuleTypeDef;
      varParticleModuleTypeDef = &varParticleModuleDef->moduleData;
      Load_ParticleModuleTypeDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleDef = (ParticleModuleDef *)g_streamPosGlob.pos;
      varParticleModuleTypeDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleEmissionGraph
==============
*/
void Load_ParticleModuleEmissionGraph(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 

  Load_Stream(streamStart, varParticleModuleEmissionGraph, 0x30ui64);
  v1 = varParticleCurveDef;
  varParticleCurveDef = varParticleModuleEmissionGraph->m_curves;
  Load_ParticleCurveDefArray(NotAtStart, 2ui64);
  varParticleCurveDef = v1;
}

/*
==============
Load_ParticleModuleEmissionGraphArray
==============
*/
void Load_ParticleModuleEmissionGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleEmissionGraph *i; 
  ParticleCurveDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleEmissionGraph, 48 * count);
  for ( i = varParticleModuleEmissionGraph; v2; --v2 )
  {
    varParticleModuleEmissionGraph = i;
    Load_Stream(NotAtStart, i, 0x30ui64);
    v4 = varParticleCurveDef;
    varParticleCurveDef = varParticleModuleEmissionGraph->m_curves;
    Load_ParticleCurveDefArray(NotAtStart, 2ui64);
    ++i;
    varParticleCurveDef = v4;
  }
}

/*
==============
Load_ParticleModuleEmissionGraphStream
==============
*/
void Load_ParticleModuleEmissionGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 20307, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleEmissionGraph;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      v4 = varParticleCurveDef;
      varParticleCurveDef = varParticleModuleEmissionGraph->m_curves;
      Load_ParticleCurveDefArray(NotAtStart, 2ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleEmissionGraph = (ParticleModuleEmissionGraph *)g_streamPosGlob.pos;
      varParticleCurveDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleEmissiveGraph
==============
*/
void Load_ParticleModuleEmissiveGraph(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 

  Load_Stream(streamStart, varParticleModuleEmissiveGraph, 0xB0ui64);
  v1 = varParticleCurveDef;
  varParticleCurveDef = varParticleModuleEmissiveGraph->m_curves;
  Load_ParticleCurveDefArray(NotAtStart, 0xAui64);
  varParticleCurveDef = v1;
}

/*
==============
Load_ParticleModuleEmissiveGraphArray
==============
*/
void Load_ParticleModuleEmissiveGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleEmissiveGraph *i; 
  ParticleCurveDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleEmissiveGraph, 176 * count);
  for ( i = varParticleModuleEmissiveGraph; v2; --v2 )
  {
    varParticleModuleEmissiveGraph = i;
    Load_Stream(NotAtStart, i, 0xB0ui64);
    v4 = varParticleCurveDef;
    varParticleCurveDef = varParticleModuleEmissiveGraph->m_curves;
    Load_ParticleCurveDefArray(NotAtStart, 0xAui64);
    ++i;
    varParticleCurveDef = v4;
  }
}

/*
==============
Load_ParticleModuleEmissiveGraphStream
==============
*/
void Load_ParticleModuleEmissiveGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 20453, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleEmissiveGraph;
    do
    {
      Load_Stream(AtStart, pos, 0xB0ui64);
      v4 = varParticleCurveDef;
      varParticleCurveDef = varParticleModuleEmissiveGraph->m_curves;
      Load_ParticleCurveDefArray(NotAtStart, 0xAui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleEmissiveGraph = (ParticleModuleEmissiveGraph *)g_streamPosGlob.pos;
      varParticleCurveDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleFlags
==============
*/
void Load_ParticleModuleFlags(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleFlags, 4ui64);
}

/*
==============
Load_ParticleModuleFlagsArray
==============
*/
void Load_ParticleModuleFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleFlags, 4 * count);
}

/*
==============
Load_ParticleModuleFlagsStream
==============
*/
void Load_ParticleModuleFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 8941, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleFlags;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleFlags = (unsigned int *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleForce
==============
*/
void Load_ParticleModuleForce(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleForce, 0x30ui64);
}

/*
==============
Load_ParticleModuleForceArray
==============
*/
void Load_ParticleModuleForceArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleForce, 48 * count);
}

/*
==============
Load_ParticleModuleForceDragGraph
==============
*/
void Load_ParticleModuleForceDragGraph(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 

  Load_Stream(streamStart, varParticleModuleForceDragGraph, 0x30ui64);
  v1 = varParticleCurveDef;
  varParticleCurveDef = varParticleModuleForceDragGraph->m_curves;
  Load_ParticleCurveDefArray(NotAtStart, 2ui64);
  varParticleCurveDef = v1;
}

/*
==============
Load_ParticleModuleForceDragGraphArray
==============
*/
void Load_ParticleModuleForceDragGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleForceDragGraph *i; 
  ParticleCurveDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleForceDragGraph, 48 * count);
  for ( i = varParticleModuleForceDragGraph; v2; --v2 )
  {
    varParticleModuleForceDragGraph = i;
    Load_Stream(NotAtStart, i, 0x30ui64);
    v4 = varParticleCurveDef;
    varParticleCurveDef = varParticleModuleForceDragGraph->m_curves;
    Load_ParticleCurveDefArray(NotAtStart, 2ui64);
    ++i;
    varParticleCurveDef = v4;
  }
}

/*
==============
Load_ParticleModuleForceDragGraphStream
==============
*/
void Load_ParticleModuleForceDragGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 20868, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleForceDragGraph;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      v4 = varParticleCurveDef;
      varParticleCurveDef = varParticleModuleForceDragGraph->m_curves;
      Load_ParticleCurveDefArray(NotAtStart, 2ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleForceDragGraph = (ParticleModuleForceDragGraph *)g_streamPosGlob.pos;
      varParticleCurveDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleForceStream
==============
*/
void Load_ParticleModuleForceStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 20745, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleForce;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleForce = (ParticleModuleForce *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleGravity
==============
*/
void Load_ParticleModuleGravity(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleGravity, 0x10ui64);
}

/*
==============
Load_ParticleModuleGravityArray
==============
*/
void Load_ParticleModuleGravityArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleGravity, 16 * count);
}

/*
==============
Load_ParticleModuleGravityStream
==============
*/
void Load_ParticleModuleGravityStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 20991, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleGravity;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleGravity = (ParticleModuleGravity *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleGroupDef
==============
*/
void Load_ParticleModuleGroupDef(const DBStreamStart streamStart)
{
  ParticleModuleGroupDef *v1; 
  ParticleModuleDef *v2; 
  __int64 numModules; 
  ParticleModuleDef *i; 
  ParticleModuleTypeDef *v5; 

  Load_Stream(streamStart, varParticleModuleGroupDef, 0x10ui64);
  v1 = varParticleModuleGroupDef;
  if ( varParticleModuleGroupDef->moduleDefs )
  {
    v2 = varParticleModuleDef;
    DB_PatchMem_FixStreamAlignment(0xFui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->moduleDefs = (ParticleModuleDef *)g_streamPosGlob.pos;
    varParticleModuleDef = (ParticleModuleDef *)g_streamPosGlob.pos;
    numModules = varParticleModuleGroupDef->numModules;
    Load_Stream(AtStart, g_streamPosGlob.pos, 240 * numModules);
    for ( i = varParticleModuleDef; numModules; --numModules )
    {
      varParticleModuleDef = i;
      Load_Stream(NotAtStart, i, 0xF0ui64);
      v5 = varParticleModuleTypeDef;
      varParticleModuleTypeDef = &varParticleModuleDef->moduleData;
      Load_ParticleModuleTypeDef(NotAtStart);
      ++i;
      varParticleModuleTypeDef = v5;
    }
    varParticleModuleDef = v2;
  }
}

/*
==============
Load_ParticleModuleGroupDefArray
==============
*/
void Load_ParticleModuleGroupDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleGroupDef *i; 
  ParticleModuleGroupDef *v4; 
  ParticleModuleDef *v5; 
  __int64 numModules; 
  ParticleModuleDef *j; 
  ParticleModuleTypeDef *v8; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleGroupDef, 16 * count);
  for ( i = varParticleModuleGroupDef; v2; --v2 )
  {
    varParticleModuleGroupDef = i;
    Load_Stream(NotAtStart, i, 0x10ui64);
    v4 = varParticleModuleGroupDef;
    if ( varParticleModuleGroupDef->moduleDefs )
    {
      v5 = varParticleModuleDef;
      DB_PatchMem_FixStreamAlignment(0xFui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->moduleDefs = (ParticleModuleDef *)g_streamPosGlob.pos;
      varParticleModuleDef = (ParticleModuleDef *)g_streamPosGlob.pos;
      numModules = varParticleModuleGroupDef->numModules;
      Load_Stream(AtStart, g_streamPosGlob.pos, 240 * numModules);
      for ( j = varParticleModuleDef; numModules; --numModules )
      {
        varParticleModuleDef = j;
        Load_Stream(NotAtStart, j, 0xF0ui64);
        v8 = varParticleModuleTypeDef;
        varParticleModuleTypeDef = &varParticleModuleDef->moduleData;
        Load_ParticleModuleTypeDef(NotAtStart);
        ++j;
        varParticleModuleTypeDef = v8;
      }
      varParticleModuleDef = v5;
    }
    ++i;
  }
}

/*
==============
Load_ParticleModuleGroupDefStream
==============
*/
void Load_ParticleModuleGroupDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleModuleGroupDef *v4; 
  ParticleModuleDef *v5; 
  __int64 numModules; 
  ParticleModuleDef *i; 
  ParticleModuleTypeDef *v8; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 27296, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleGroupDef;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      v4 = varParticleModuleGroupDef;
      if ( varParticleModuleGroupDef->moduleDefs )
      {
        v5 = varParticleModuleDef;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->moduleDefs = (ParticleModuleDef *)g_streamPosGlob.pos;
        varParticleModuleDef = (ParticleModuleDef *)g_streamPosGlob.pos;
        numModules = varParticleModuleGroupDef->numModules;
        Load_Stream(AtStart, g_streamPosGlob.pos, 240 * numModules);
        for ( i = varParticleModuleDef; numModules; --numModules )
        {
          varParticleModuleDef = i;
          Load_Stream(NotAtStart, i, 0xF0ui64);
          v8 = varParticleModuleTypeDef;
          varParticleModuleTypeDef = &varParticleModuleDef->moduleData;
          Load_ParticleModuleTypeDef(NotAtStart);
          ++i;
          varParticleModuleTypeDef = v8;
        }
        varParticleModuleDef = v5;
      }
      pos = g_streamPosGlob.pos;
      varParticleModuleGroupDef = (ParticleModuleGroupDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleInitAtlas
==============
*/
void Load_ParticleModuleInitAtlas(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 

  Load_Stream(streamStart, varParticleModuleInitAtlas, 0x40ui64);
  v1 = varParticleCurveDef;
  varParticleCurveDef = varParticleModuleInitAtlas->m_curves;
  Load_ParticleCurveDefArray(NotAtStart, 2ui64);
  varParticleCurveDef = v1;
}

/*
==============
Load_ParticleModuleInitAtlasArray
==============
*/
void Load_ParticleModuleInitAtlasArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitAtlas *i; 
  ParticleCurveDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleInitAtlas, count << 6);
  for ( i = varParticleModuleInitAtlas; v2; --v2 )
  {
    varParticleModuleInitAtlas = i;
    Load_Stream(NotAtStart, i, 0x40ui64);
    v4 = varParticleCurveDef;
    varParticleCurveDef = varParticleModuleInitAtlas->m_curves;
    Load_ParticleCurveDefArray(NotAtStart, 2ui64);
    ++i;
    varParticleCurveDef = v4;
  }
}

/*
==============
Load_ParticleModuleInitAtlasStream
==============
*/
void Load_ParticleModuleInitAtlasStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 10513, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitAtlas;
    do
    {
      Load_Stream(AtStart, pos, 0x40ui64);
      v4 = varParticleCurveDef;
      varParticleCurveDef = varParticleModuleInitAtlas->m_curves;
      Load_ParticleCurveDefArray(NotAtStart, 2ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitAtlas = (ParticleModuleInitAtlas *)g_streamPosGlob.pos;
      varParticleCurveDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleInitAttributes
==============
*/
void Load_ParticleModuleInitAttributes(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleInitAttributes, 0x70ui64);
}

/*
==============
Load_ParticleModuleInitAttributesArray
==============
*/
void Load_ParticleModuleInitAttributesArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleInitAttributes, 112 * count);
}

/*
==============
Load_ParticleModuleInitAttributesStream
==============
*/
void Load_ParticleModuleInitAttributesStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 10797, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitAttributes;
    do
    {
      Load_Stream(AtStart, pos, 0x70ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitAttributes = (ParticleModuleInitAttributes *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleInitBeam
==============
*/
void Load_ParticleModuleInitBeam(const DBStreamStart streamStart)
{
  ParticleLinkedAssetListDef *v1; 

  Load_Stream(streamStart, varParticleModuleInitBeam, 0x80ui64);
  v1 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleInitBeam->m_linkedAssetList;
  Load_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v1;
}

/*
==============
Load_ParticleModuleInitBeamArray
==============
*/
void Load_ParticleModuleInitBeamArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitBeam *i; 
  ParticleLinkedAssetListDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleInitBeam, count << 7);
  for ( i = varParticleModuleInitBeam; v2; --v2 )
  {
    varParticleModuleInitBeam = i;
    Load_Stream(NotAtStart, i, 0x80ui64);
    v4 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &varParticleModuleInitBeam->m_linkedAssetList;
    Load_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v4;
  }
}

/*
==============
Load_ParticleModuleInitBeamFlags
==============
*/
void Load_ParticleModuleInitBeamFlags(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleInitBeamFlags, 4ui64);
}

/*
==============
Load_ParticleModuleInitBeamFlagsArray
==============
*/
void Load_ParticleModuleInitBeamFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleInitBeamFlags, 4 * count);
}

/*
==============
Load_ParticleModuleInitBeamFlagsStream
==============
*/
void Load_ParticleModuleInitBeamFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 10852, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitBeamFlags;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitBeamFlags = (ParticleModuleInitBeamFlags *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleInitBeamStream
==============
*/
void Load_ParticleModuleInitBeamStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleLinkedAssetListDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 11205, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitBeam;
    do
    {
      Load_Stream(AtStart, pos, 0x80ui64);
      v4 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &varParticleModuleInitBeam->m_linkedAssetList;
      Load_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitBeam = (ParticleModuleInitBeam *)g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleInitCameraOffset
==============
*/
void Load_ParticleModuleInitCameraOffset(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleInitCameraOffset, 0x10ui64);
}

/*
==============
Load_ParticleModuleInitCameraOffsetArray
==============
*/
void Load_ParticleModuleInitCameraOffsetArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleInitCameraOffset, 16 * count);
}

/*
==============
Load_ParticleModuleInitCameraOffsetStream
==============
*/
void Load_ParticleModuleInitCameraOffsetStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 11305, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitCameraOffset;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitCameraOffset = (ParticleModuleInitCameraOffset *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleInitCloud
==============
*/
void Load_ParticleModuleInitCloud(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleInitCloud, 0x10ui64);
}

/*
==============
Load_ParticleModuleInitCloudArray
==============
*/
void Load_ParticleModuleInitCloudArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleInitCloud, 16 * count);
}

/*
==============
Load_ParticleModuleInitCloudStream
==============
*/
void Load_ParticleModuleInitCloudStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 11405, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitCloud;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitCloud = (ParticleModuleInitCloud *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleInitDecal
==============
*/
void Load_ParticleModuleInitDecal(const DBStreamStart streamStart)
{
  ParticleLinkedAssetListDef *v1; 

  Load_Stream(streamStart, varParticleModuleInitDecal, 0x40ui64);
  v1 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleInitDecal->m_linkedAssetList;
  Load_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v1;
}

/*
==============
Load_ParticleModuleInitDecalArray
==============
*/
void Load_ParticleModuleInitDecalArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitDecal *i; 
  ParticleLinkedAssetListDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleInitDecal, count << 6);
  for ( i = varParticleModuleInitDecal; v2; --v2 )
  {
    varParticleModuleInitDecal = i;
    Load_Stream(NotAtStart, i, 0x40ui64);
    v4 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &varParticleModuleInitDecal->m_linkedAssetList;
    Load_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v4;
  }
}

/*
==============
Load_ParticleModuleInitDecalStream
==============
*/
void Load_ParticleModuleInitDecalStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleLinkedAssetListDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 11790, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitDecal;
    do
    {
      Load_Stream(AtStart, pos, 0x40ui64);
      v4 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &varParticleModuleInitDecal->m_linkedAssetList;
      Load_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitDecal = (ParticleModuleInitDecal *)g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleInitDismember
==============
*/
void Load_ParticleModuleInitDismember(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleInitDismember, 0x10ui64);
}

/*
==============
Load_ParticleModuleInitDismemberArray
==============
*/
void Load_ParticleModuleInitDismemberArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleInitDismember, 16 * count);
}

/*
==============
Load_ParticleModuleInitDismemberStream
==============
*/
void Load_ParticleModuleInitDismemberStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 19677, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitDismember;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitDismember = (ParticleModuleInitDismember *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleInitFlare
==============
*/
void Load_ParticleModuleInitFlare(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 

  Load_Stream(streamStart, varParticleModuleInitFlare, 0x90ui64);
  v1 = varParticleCurveDef;
  varParticleCurveDef = varParticleModuleInitFlare->m_curves;
  Load_ParticleCurveDefArray(NotAtStart, 4ui64);
  varParticleCurveDef = v1;
}

/*
==============
Load_ParticleModuleInitFlareArray
==============
*/
void Load_ParticleModuleInitFlareArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitFlare *i; 
  ParticleCurveDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleInitFlare, 144 * count);
  for ( i = varParticleModuleInitFlare; v2; --v2 )
  {
    varParticleModuleInitFlare = i;
    Load_Stream(NotAtStart, i, 0x90ui64);
    v4 = varParticleCurveDef;
    varParticleCurveDef = varParticleModuleInitFlare->m_curves;
    Load_ParticleCurveDefArray(NotAtStart, 4ui64);
    ++i;
    varParticleCurveDef = v4;
  }
}

/*
==============
Load_ParticleModuleInitFlareStream
==============
*/
void Load_ParticleModuleInitFlareStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 12120, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitFlare;
    do
    {
      Load_Stream(AtStart, pos, 0x90ui64);
      v4 = varParticleCurveDef;
      varParticleCurveDef = varParticleModuleInitFlare->m_curves;
      Load_ParticleCurveDefArray(NotAtStart, 4ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitFlare = (ParticleModuleInitFlare *)g_streamPosGlob.pos;
      varParticleCurveDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleInitGeoTrail
==============
*/
void Load_ParticleModuleInitGeoTrail(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleInitGeoTrail, 0x40ui64);
}

/*
==============
Load_ParticleModuleInitGeoTrailArray
==============
*/
void Load_ParticleModuleInitGeoTrailArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleInitGeoTrail, count << 6);
}

/*
==============
Load_ParticleModuleInitGeoTrailStream
==============
*/
void Load_ParticleModuleInitGeoTrailStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 12565, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitGeoTrail;
    do
    {
      Load_Stream(AtStart, pos, 0x40ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitGeoTrail = (ParticleModuleInitGeoTrail *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleInitKillWrapBox
==============
*/
void Load_ParticleModuleInitKillWrapBox(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleInitKillWrapBox, 0x30ui64);
}

/*
==============
Load_ParticleModuleInitKillWrapBoxArray
==============
*/
void Load_ParticleModuleInitKillWrapBoxArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleInitKillWrapBox, 48 * count);
}

/*
==============
Load_ParticleModuleInitKillWrapBoxStream
==============
*/
void Load_ParticleModuleInitKillWrapBoxStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 12734, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitKillWrapBox;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitKillWrapBox = (ParticleModuleInitKillWrapBox *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleInitLightOmni
==============
*/
void Load_ParticleModuleInitLightOmni(const DBStreamStart streamStart)
{
  ParticleLinkedAssetListDef *v1; 

  Load_Stream(streamStart, varParticleModuleInitLightOmni, 0x50ui64);
  v1 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleInitLightOmni->m_linkedAssetList;
  Load_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v1;
}

/*
==============
Load_ParticleModuleInitLightOmniArray
==============
*/
void Load_ParticleModuleInitLightOmniArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitLightOmni *i; 
  ParticleLinkedAssetListDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleInitLightOmni, 80 * count);
  for ( i = varParticleModuleInitLightOmni; v2; --v2 )
  {
    varParticleModuleInitLightOmni = i;
    Load_Stream(NotAtStart, i, 0x50ui64);
    v4 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &varParticleModuleInitLightOmni->m_linkedAssetList;
    Load_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v4;
  }
}

/*
==============
Load_ParticleModuleInitLightOmniStream
==============
*/
void Load_ParticleModuleInitLightOmniStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleLinkedAssetListDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 13248, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitLightOmni;
    do
    {
      Load_Stream(AtStart, pos, 0x50ui64);
      v4 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &varParticleModuleInitLightOmni->m_linkedAssetList;
      Load_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitLightOmni = (ParticleModuleInitLightOmni *)g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleInitLightSpot
==============
*/
void Load_ParticleModuleInitLightSpot(const DBStreamStart streamStart)
{
  ParticleLinkedAssetListDef *v1; 

  Load_Stream(streamStart, varParticleModuleInitLightSpot, 0x60ui64);
  v1 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleInitLightSpot->m_linkedAssetList;
  Load_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v1;
}

/*
==============
Load_ParticleModuleInitLightSpotArray
==============
*/
void Load_ParticleModuleInitLightSpotArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitLightSpot *i; 
  ParticleLinkedAssetListDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleInitLightSpot, 96 * count);
  for ( i = varParticleModuleInitLightSpot; v2; --v2 )
  {
    varParticleModuleInitLightSpot = i;
    Load_Stream(NotAtStart, i, 0x60ui64);
    v4 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &varParticleModuleInitLightSpot->m_linkedAssetList;
    Load_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v4;
  }
}

/*
==============
Load_ParticleModuleInitLightSpotStream
==============
*/
void Load_ParticleModuleInitLightSpotStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleLinkedAssetListDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 13808, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitLightSpot;
    do
    {
      Load_Stream(AtStart, pos, 0x60ui64);
      v4 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &varParticleModuleInitLightSpot->m_linkedAssetList;
      Load_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitLightSpot = (ParticleModuleInitLightSpot *)g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleInitMaterial
==============
*/
void Load_ParticleModuleInitMaterial(const DBStreamStart streamStart)
{
  ParticleLinkedAssetListDef *v1; 

  Load_Stream(streamStart, varParticleModuleInitMaterial, 0xE0ui64);
  v1 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleInitMaterial->m_linkedAssetList;
  Load_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v1;
}

/*
==============
Load_ParticleModuleInitMaterialArray
==============
*/
void Load_ParticleModuleInitMaterialArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitMaterial *i; 
  ParticleLinkedAssetListDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleInitMaterial, 224 * count);
  for ( i = varParticleModuleInitMaterial; v2; --v2 )
  {
    varParticleModuleInitMaterial = i;
    Load_Stream(NotAtStart, i, 0xE0ui64);
    v4 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &varParticleModuleInitMaterial->m_linkedAssetList;
    Load_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v4;
  }
}

/*
==============
Load_ParticleModuleInitMaterialStream
==============
*/
void Load_ParticleModuleInitMaterialStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleLinkedAssetListDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 14619, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitMaterial;
    do
    {
      Load_Stream(AtStart, pos, 0xE0ui64);
      v4 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &varParticleModuleInitMaterial->m_linkedAssetList;
      Load_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitMaterial = (ParticleModuleInitMaterial *)g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleInitMirrorTexture
==============
*/
void Load_ParticleModuleInitMirrorTexture(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleInitMirrorTexture, 0x10ui64);
}

/*
==============
Load_ParticleModuleInitMirrorTextureArray
==============
*/
void Load_ParticleModuleInitMirrorTextureArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleInitMirrorTexture, 16 * count);
}

/*
==============
Load_ParticleModuleInitMirrorTextureStream
==============
*/
void Load_ParticleModuleInitMirrorTextureStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 14820, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitMirrorTexture;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitMirrorTexture = (ParticleModuleInitMirrorTexture *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleInitModel
==============
*/
void Load_ParticleModuleInitModel(const DBStreamStart streamStart)
{
  ParticleLinkedAssetListDef *v1; 

  Load_Stream(streamStart, varParticleModuleInitModel, 0x20ui64);
  v1 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleInitModel->m_linkedAssetList;
  Load_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v1;
}

/*
==============
Load_ParticleModuleInitModelArray
==============
*/
void Load_ParticleModuleInitModelArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitModel *i; 
  ParticleLinkedAssetListDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleInitModel, 32 * count);
  for ( i = varParticleModuleInitModel; v2; --v2 )
  {
    varParticleModuleInitModel = i;
    Load_Stream(NotAtStart, i, 0x20ui64);
    v4 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &varParticleModuleInitModel->m_linkedAssetList;
    Load_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v4;
  }
}

/*
==============
Load_ParticleModuleInitModelStream
==============
*/
void Load_ParticleModuleInitModelStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleLinkedAssetListDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 14989, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitModel;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      v4 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &varParticleModuleInitModel->m_linkedAssetList;
      Load_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitModel = (ParticleModuleInitModel *)g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleInitOcclusionQuery
==============
*/
void Load_ParticleModuleInitOcclusionQuery(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleInitOcclusionQuery, 0x30ui64);
}

/*
==============
Load_ParticleModuleInitOcclusionQueryArray
==============
*/
void Load_ParticleModuleInitOcclusionQueryArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleInitOcclusionQuery, 48 * count);
}

/*
==============
Load_ParticleModuleInitOcclusionQueryStream
==============
*/
void Load_ParticleModuleInitOcclusionQueryStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 15227, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitOcclusionQuery;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitOcclusionQuery = (ParticleModuleInitOcclusionQuery *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleInitOrientedSprite
==============
*/
void Load_ParticleModuleInitOrientedSprite(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleInitOrientedSprite, 0x20ui64);
}

/*
==============
Load_ParticleModuleInitOrientedSpriteArray
==============
*/
void Load_ParticleModuleInitOrientedSpriteArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleInitOrientedSprite, 32 * count);
}

/*
==============
Load_ParticleModuleInitOrientedSpriteStream
==============
*/
void Load_ParticleModuleInitOrientedSpriteStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 15350, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitOrientedSprite;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitOrientedSprite = (ParticleModuleInitOrientedSprite *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleInitParticleSim
==============
*/
void Load_ParticleModuleInitParticleSim(const DBStreamStart streamStart)
{
  ParticleLinkedAssetListDef *v1; 

  Load_Stream(streamStart, varParticleModuleInitParticleSim, 0x30ui64);
  v1 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleInitParticleSim->m_linkedAssetList;
  Load_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v1;
}

/*
==============
Load_ParticleModuleInitParticleSimArray
==============
*/
void Load_ParticleModuleInitParticleSimArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitParticleSim *i; 
  ParticleLinkedAssetListDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleInitParticleSim, 48 * count);
  for ( i = varParticleModuleInitParticleSim; v2; --v2 )
  {
    varParticleModuleInitParticleSim = i;
    Load_Stream(NotAtStart, i, 0x30ui64);
    v4 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &varParticleModuleInitParticleSim->m_linkedAssetList;
    Load_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v4;
  }
}

/*
==============
Load_ParticleModuleInitParticleSimStream
==============
*/
void Load_ParticleModuleInitParticleSimStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleLinkedAssetListDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 15519, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitParticleSim;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      v4 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &varParticleModuleInitParticleSim->m_linkedAssetList;
      Load_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitParticleSim = (ParticleModuleInitParticleSim *)g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleInitPlayerFacing
==============
*/
void Load_ParticleModuleInitPlayerFacing(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleInitPlayerFacing, 0x10ui64);
}

/*
==============
Load_ParticleModuleInitPlayerFacingArray
==============
*/
void Load_ParticleModuleInitPlayerFacingArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleInitPlayerFacing, 16 * count);
}

/*
==============
Load_ParticleModuleInitPlayerFacingStream
==============
*/
void Load_ParticleModuleInitPlayerFacingStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 15619, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitPlayerFacing;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitPlayerFacing = (ParticleModuleInitPlayerFacing *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleInitRelativeVelocity
==============
*/
void Load_ParticleModuleInitRelativeVelocity(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleInitRelativeVelocity, 0x10ui64);
}

/*
==============
Load_ParticleModuleInitRelativeVelocityArray
==============
*/
void Load_ParticleModuleInitRelativeVelocityArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleInitRelativeVelocity, 16 * count);
}

/*
==============
Load_ParticleModuleInitRelativeVelocityStream
==============
*/
void Load_ParticleModuleInitRelativeVelocityStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 15820, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitRelativeVelocity;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitRelativeVelocity = (ParticleModuleInitRelativeVelocity *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleInitRotation3D
==============
*/
void Load_ParticleModuleInitRotation3D(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleInitRotation3D, 0x50ui64);
}

/*
==============
Load_ParticleModuleInitRotation3DArray
==============
*/
void Load_ParticleModuleInitRotation3DArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleInitRotation3D, 80 * count);
}

/*
==============
Load_ParticleModuleInitRotation3DStream
==============
*/
void Load_ParticleModuleInitRotation3DStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 16158, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitRotation3D;
    do
    {
      Load_Stream(AtStart, pos, 0x50ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitRotation3D = (ParticleModuleInitRotation3D *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleInitRotation
==============
*/
void Load_ParticleModuleInitRotation(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleInitRotation, 0x20ui64);
}

/*
==============
Load_ParticleModuleInitRotationArray
==============
*/
void Load_ParticleModuleInitRotationArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleInitRotation, 32 * count);
}

/*
==============
Load_ParticleModuleInitRotationStream
==============
*/
void Load_ParticleModuleInitRotationStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 15966, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitRotation;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitRotation = (ParticleModuleInitRotation *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleInitRunner
==============
*/
void Load_ParticleModuleInitRunner(const DBStreamStart streamStart)
{
  ParticleLinkedAssetListDef *v1; 

  Load_Stream(streamStart, varParticleModuleInitRunner, 0x70ui64);
  v1 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleInitRunner->m_linkedAssetList;
  Load_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v1;
}

/*
==============
Load_ParticleModuleInitRunnerArray
==============
*/
void Load_ParticleModuleInitRunnerArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitRunner *i; 
  ParticleLinkedAssetListDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleInitRunner, 112 * count);
  for ( i = varParticleModuleInitRunner; v2; --v2 )
  {
    varParticleModuleInitRunner = i;
    Load_Stream(NotAtStart, i, 0x70ui64);
    v4 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &varParticleModuleInitRunner->m_linkedAssetList;
    Load_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v4;
  }
}

/*
==============
Load_ParticleModuleInitRunnerStream
==============
*/
void Load_ParticleModuleInitRunnerStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleLinkedAssetListDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 16676, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitRunner;
    do
    {
      Load_Stream(AtStart, pos, 0x70ui64);
      v4 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &varParticleModuleInitRunner->m_linkedAssetList;
      Load_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitRunner = (ParticleModuleInitRunner *)g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleInitSound
==============
*/
void Load_ParticleModuleInitSound(const DBStreamStart streamStart)
{
  ParticleLinkedAssetListDef *v1; 

  Load_Stream(streamStart, varParticleModuleInitSound, 0x20ui64);
  v1 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleInitSound->m_linkedAssetList;
  Load_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v1;
}

/*
==============
Load_ParticleModuleInitSoundArray
==============
*/
void Load_ParticleModuleInitSoundArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitSound *i; 
  ParticleLinkedAssetListDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleInitSound, 32 * count);
  for ( i = varParticleModuleInitSound; v2; --v2 )
  {
    varParticleModuleInitSound = i;
    Load_Stream(NotAtStart, i, 0x20ui64);
    v4 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &varParticleModuleInitSound->m_linkedAssetList;
    Load_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v4;
  }
}

/*
==============
Load_ParticleModuleInitSoundStream
==============
*/
void Load_ParticleModuleInitSoundStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleLinkedAssetListDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 16799, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitSound;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      v4 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &varParticleModuleInitSound->m_linkedAssetList;
      Load_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitSound = (ParticleModuleInitSound *)g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleInitSpawn
==============
*/
void Load_ParticleModuleInitSpawn(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 

  Load_Stream(streamStart, varParticleModuleInitSpawn, 0x20ui64);
  v1 = varParticleCurveDef;
  varParticleCurveDef = varParticleModuleInitSpawn->m_curves;
  Load_ParticleCurveDefArray(NotAtStart, 1ui64);
  varParticleCurveDef = v1;
}

/*
==============
Load_ParticleModuleInitSpawnArray
==============
*/
void Load_ParticleModuleInitSpawnArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitSpawn *i; 
  ParticleCurveDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleInitSpawn, 32 * count);
  for ( i = varParticleModuleInitSpawn; v2; --v2 )
  {
    varParticleModuleInitSpawn = i;
    Load_Stream(NotAtStart, i, 0x20ui64);
    v4 = varParticleCurveDef;
    varParticleCurveDef = varParticleModuleInitSpawn->m_curves;
    Load_ParticleCurveDefArray(NotAtStart, 1ui64);
    ++i;
    varParticleCurveDef = v4;
  }
}

/*
==============
Load_ParticleModuleInitSpawnShapeBox
==============
*/
void Load_ParticleModuleInitSpawnShapeBox(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 

  Load_Stream(streamStart, varParticleModuleInitSpawnShapeBox, 0xC0ui64);
  v1 = varParticleCurveDef;
  varParticleCurveDef = varParticleModuleInitSpawnShapeBox->m_curves;
  Load_ParticleCurveDefArray(NotAtStart, 6ui64);
  varParticleCurveDef = v1;
}

/*
==============
Load_ParticleModuleInitSpawnShapeBoxArray
==============
*/
void Load_ParticleModuleInitSpawnShapeBoxArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitSpawnShapeBox *i; 
  ParticleCurveDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleInitSpawnShapeBox, 192 * count);
  for ( i = varParticleModuleInitSpawnShapeBox; v2; --v2 )
  {
    varParticleModuleInitSpawnShapeBox = i;
    Load_Stream(NotAtStart, i, 0xC0ui64);
    v4 = varParticleCurveDef;
    varParticleCurveDef = varParticleModuleInitSpawnShapeBox->m_curves;
    Load_ParticleCurveDefArray(NotAtStart, 6ui64);
    ++i;
    varParticleCurveDef = v4;
  }
}

/*
==============
Load_ParticleModuleInitSpawnShapeBoxStream
==============
*/
void Load_ParticleModuleInitSpawnShapeBoxStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 17394, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitSpawnShapeBox;
    do
    {
      Load_Stream(AtStart, pos, 0xC0ui64);
      v4 = varParticleCurveDef;
      varParticleCurveDef = varParticleModuleInitSpawnShapeBox->m_curves;
      Load_ParticleCurveDefArray(NotAtStart, 6ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitSpawnShapeBox = (ParticleModuleInitSpawnShapeBox *)g_streamPosGlob.pos;
      varParticleCurveDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleInitSpawnShapeCylinder
==============
*/
void Load_ParticleModuleInitSpawnShapeCylinder(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 

  Load_Stream(streamStart, varParticleModuleInitSpawnShapeCylinder, 0xA0ui64);
  v1 = varParticleCurveDef;
  varParticleCurveDef = varParticleModuleInitSpawnShapeCylinder->m_curves;
  Load_ParticleCurveDefArray(NotAtStart, 5ui64);
  varParticleCurveDef = v1;
}

/*
==============
Load_ParticleModuleInitSpawnShapeCylinderArray
==============
*/
void Load_ParticleModuleInitSpawnShapeCylinderArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitSpawnShapeCylinder *i; 
  ParticleCurveDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleInitSpawnShapeCylinder, 160 * count);
  for ( i = varParticleModuleInitSpawnShapeCylinder; v2; --v2 )
  {
    varParticleModuleInitSpawnShapeCylinder = i;
    Load_Stream(NotAtStart, i, 0xA0ui64);
    v4 = varParticleCurveDef;
    varParticleCurveDef = varParticleModuleInitSpawnShapeCylinder->m_curves;
    Load_ParticleCurveDefArray(NotAtStart, 5ui64);
    ++i;
    varParticleCurveDef = v4;
  }
}

/*
==============
Load_ParticleModuleInitSpawnShapeCylinderStream
==============
*/
void Load_ParticleModuleInitSpawnShapeCylinderStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 17793, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitSpawnShapeCylinder;
    do
    {
      Load_Stream(AtStart, pos, 0xA0ui64);
      v4 = varParticleCurveDef;
      varParticleCurveDef = varParticleModuleInitSpawnShapeCylinder->m_curves;
      Load_ParticleCurveDefArray(NotAtStart, 5ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitSpawnShapeCylinder = (ParticleModuleInitSpawnShapeCylinder *)g_streamPosGlob.pos;
      varParticleCurveDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleInitSpawnShapeEllipsoid
==============
*/
void Load_ParticleModuleInitSpawnShapeEllipsoid(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 

  Load_Stream(streamStart, varParticleModuleInitSpawnShapeEllipsoid, 0xB0ui64);
  v1 = varParticleCurveDef;
  varParticleCurveDef = varParticleModuleInitSpawnShapeEllipsoid->m_curves;
  Load_ParticleCurveDefArray(NotAtStart, 6ui64);
  varParticleCurveDef = v1;
}

/*
==============
Load_ParticleModuleInitSpawnShapeEllipsoidArray
==============
*/
void Load_ParticleModuleInitSpawnShapeEllipsoidArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitSpawnShapeEllipsoid *i; 
  ParticleCurveDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleInitSpawnShapeEllipsoid, 176 * count);
  for ( i = varParticleModuleInitSpawnShapeEllipsoid; v2; --v2 )
  {
    varParticleModuleInitSpawnShapeEllipsoid = i;
    Load_Stream(NotAtStart, i, 0xB0ui64);
    v4 = varParticleCurveDef;
    varParticleCurveDef = varParticleModuleInitSpawnShapeEllipsoid->m_curves;
    Load_ParticleCurveDefArray(NotAtStart, 6ui64);
    ++i;
    varParticleCurveDef = v4;
  }
}

/*
==============
Load_ParticleModuleInitSpawnShapeEllipsoidStream
==============
*/
void Load_ParticleModuleInitSpawnShapeEllipsoidStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 18123, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitSpawnShapeEllipsoid;
    do
    {
      Load_Stream(AtStart, pos, 0xB0ui64);
      v4 = varParticleCurveDef;
      varParticleCurveDef = varParticleModuleInitSpawnShapeEllipsoid->m_curves;
      Load_ParticleCurveDefArray(NotAtStart, 6ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitSpawnShapeEllipsoid = (ParticleModuleInitSpawnShapeEllipsoid *)g_streamPosGlob.pos;
      varParticleCurveDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleInitSpawnShapeMesh
==============
*/
void Load_ParticleModuleInitSpawnShapeMesh(const DBStreamStart streamStart)
{
  ParticleLinkedAssetListDef *v1; 
  ParticleModuleInitSpawnShapeMesh *v2; 
  ParticleSpawnMeshAssetDef *v3; 
  ParticleCurveDef *v4; 

  Load_Stream(streamStart, varParticleModuleInitSpawnShapeMesh, 0x80ui64);
  v1 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleInitSpawnShapeMesh->m_linkedAssetList;
  Load_ParticleLinkedAssetListDef(NotAtStart);
  v2 = varParticleModuleInitSpawnShapeMesh;
  varParticleLinkedAssetListDef = v1;
  if ( varParticleModuleInitSpawnShapeMesh->m_meshAssetData )
  {
    v3 = varParticleSpawnMeshAssetDef;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->m_meshAssetData = (ParticleSpawnMeshAssetDef *)g_streamPosGlob.pos;
    varParticleSpawnMeshAssetDef = (ParticleSpawnMeshAssetDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleModuleDef->moduleData.initAttributes.m_colorMin.v.m128_u32[0]);
    v2 = varParticleModuleInitSpawnShapeMesh;
    varParticleSpawnMeshAssetDef = v3;
  }
  v4 = varParticleCurveDef;
  varParticleCurveDef = v2->m_curves;
  Load_ParticleCurveDefArray(NotAtStart, 3ui64);
  varParticleCurveDef = v4;
}

/*
==============
Load_ParticleModuleInitSpawnShapeMeshArray
==============
*/
void Load_ParticleModuleInitSpawnShapeMeshArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitSpawnShapeMesh *i; 
  ParticleLinkedAssetListDef *v4; 
  ParticleModuleInitSpawnShapeMesh *v5; 
  ParticleSpawnMeshAssetDef *v6; 
  ParticleCurveDef *v7; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleInitSpawnShapeMesh, count << 7);
  for ( i = varParticleModuleInitSpawnShapeMesh; v2; --v2 )
  {
    varParticleModuleInitSpawnShapeMesh = i;
    Load_Stream(NotAtStart, i, 0x80ui64);
    v4 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &varParticleModuleInitSpawnShapeMesh->m_linkedAssetList;
    Load_ParticleLinkedAssetListDef(NotAtStart);
    v5 = varParticleModuleInitSpawnShapeMesh;
    varParticleLinkedAssetListDef = v4;
    if ( varParticleModuleInitSpawnShapeMesh->m_meshAssetData )
    {
      v6 = varParticleSpawnMeshAssetDef;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      v5->m_meshAssetData = (ParticleSpawnMeshAssetDef *)g_streamPosGlob.pos;
      varParticleSpawnMeshAssetDef = (ParticleSpawnMeshAssetDef *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleModuleDef->moduleData.initAttributes.m_colorMin.v.m128_u32[0]);
      v5 = varParticleModuleInitSpawnShapeMesh;
      varParticleSpawnMeshAssetDef = v6;
    }
    v7 = varParticleCurveDef;
    varParticleCurveDef = v5->m_curves;
    Load_ParticleCurveDefArray(NotAtStart, 3ui64);
    ++i;
    varParticleCurveDef = v7;
  }
}

/*
==============
Load_ParticleModuleInitSpawnShapeMeshStream
==============
*/
void Load_ParticleModuleInitSpawnShapeMeshStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleLinkedAssetListDef *v4; 
  ParticleModuleInitSpawnShapeMesh *v5; 
  ParticleSpawnMeshAssetDef *v6; 
  ParticleCurveDef *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 18602, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitSpawnShapeMesh;
    do
    {
      Load_Stream(AtStart, pos, 0x80ui64);
      v4 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &varParticleModuleInitSpawnShapeMesh->m_linkedAssetList;
      Load_ParticleLinkedAssetListDef(NotAtStart);
      v5 = varParticleModuleInitSpawnShapeMesh;
      varParticleLinkedAssetListDef = v4;
      if ( varParticleModuleInitSpawnShapeMesh->m_meshAssetData )
      {
        v6 = varParticleSpawnMeshAssetDef;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v5->m_meshAssetData = (ParticleSpawnMeshAssetDef *)g_streamPosGlob.pos;
        varParticleSpawnMeshAssetDef = (ParticleSpawnMeshAssetDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleModuleDef->moduleData.initAttributes.m_colorMin.v.m128_u32[0]);
        v5 = varParticleModuleInitSpawnShapeMesh;
        varParticleSpawnMeshAssetDef = v6;
      }
      v7 = varParticleCurveDef;
      varParticleCurveDef = v5->m_curves;
      Load_ParticleCurveDefArray(NotAtStart, 3ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitSpawnShapeMesh = (ParticleModuleInitSpawnShapeMesh *)g_streamPosGlob.pos;
      varParticleCurveDef = v7;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleInitSpawnShapeSphere
==============
*/
void Load_ParticleModuleInitSpawnShapeSphere(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 

  Load_Stream(streamStart, varParticleModuleInitSpawnShapeSphere, 0x80ui64);
  v1 = varParticleCurveDef;
  varParticleCurveDef = varParticleModuleInitSpawnShapeSphere->m_curves;
  Load_ParticleCurveDefArray(NotAtStart, 4ui64);
  varParticleCurveDef = v1;
}

/*
==============
Load_ParticleModuleInitSpawnShapeSphereArray
==============
*/
void Load_ParticleModuleInitSpawnShapeSphereArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitSpawnShapeSphere *i; 
  ParticleCurveDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleInitSpawnShapeSphere, count << 7);
  for ( i = varParticleModuleInitSpawnShapeSphere; v2; --v2 )
  {
    varParticleModuleInitSpawnShapeSphere = i;
    Load_Stream(NotAtStart, i, 0x80ui64);
    v4 = varParticleCurveDef;
    varParticleCurveDef = varParticleModuleInitSpawnShapeSphere->m_curves;
    Load_ParticleCurveDefArray(NotAtStart, 4ui64);
    ++i;
    varParticleCurveDef = v4;
  }
}

/*
==============
Load_ParticleModuleInitSpawnShapeSphereStream
==============
*/
void Load_ParticleModuleInitSpawnShapeSphereStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 18909, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitSpawnShapeSphere;
    do
    {
      Load_Stream(AtStart, pos, 0x80ui64);
      v4 = varParticleCurveDef;
      varParticleCurveDef = varParticleModuleInitSpawnShapeSphere->m_curves;
      Load_ParticleCurveDefArray(NotAtStart, 4ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitSpawnShapeSphere = (ParticleModuleInitSpawnShapeSphere *)g_streamPosGlob.pos;
      varParticleCurveDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleInitSpawnStream
==============
*/
void Load_ParticleModuleInitSpawnStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 16922, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitSpawn;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      v4 = varParticleCurveDef;
      varParticleCurveDef = varParticleModuleInitSpawn->m_curves;
      Load_ParticleCurveDefArray(NotAtStart, 1ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitSpawn = (ParticleModuleInitSpawn *)g_streamPosGlob.pos;
      varParticleCurveDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleInitTail
==============
*/
void Load_ParticleModuleInitTail(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleInitTail, 0x10ui64);
}

/*
==============
Load_ParticleModuleInitTailArray
==============
*/
void Load_ParticleModuleInitTailArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleInitTail, 16 * count);
}

/*
==============
Load_ParticleModuleInitTailStream
==============
*/
void Load_ParticleModuleInitTailStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 19124, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitTail;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitTail = (ParticleModuleInitTail *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleInitVectorField
==============
*/
void Load_ParticleModuleInitVectorField(const DBStreamStart streamStart)
{
  ParticleLinkedAssetListDef *v1; 

  Load_Stream(streamStart, varParticleModuleInitVectorField, 0x30ui64);
  v1 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleInitVectorField->m_linkedAssetList;
  Load_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v1;
}

/*
==============
Load_ParticleModuleInitVectorFieldArray
==============
*/
void Load_ParticleModuleInitVectorFieldArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitVectorField *i; 
  ParticleLinkedAssetListDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleInitVectorField, 48 * count);
  for ( i = varParticleModuleInitVectorField; v2; --v2 )
  {
    varParticleModuleInitVectorField = i;
    Load_Stream(NotAtStart, i, 0x30ui64);
    v4 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &varParticleModuleInitVectorField->m_linkedAssetList;
    Load_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v4;
  }
}

/*
==============
Load_ParticleModuleInitVectorFieldStream
==============
*/
void Load_ParticleModuleInitVectorFieldStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleLinkedAssetListDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 19385, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitVectorField;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      v4 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &varParticleModuleInitVectorField->m_linkedAssetList;
      Load_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitVectorField = (ParticleModuleInitVectorField *)g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleInitVolumetric
==============
*/
void Load_ParticleModuleInitVolumetric(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleInitVolumetric, 0x20ui64);
}

/*
==============
Load_ParticleModuleInitVolumetricArray
==============
*/
void Load_ParticleModuleInitVolumetricArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleInitVolumetric, 32 * count);
}

/*
==============
Load_ParticleModuleInitVolumetricStream
==============
*/
void Load_ParticleModuleInitVolumetricStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 19577, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitVolumetric;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitVolumetric = (ParticleModuleInitVolumetric *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleIntensityGraph
==============
*/
void Load_ParticleModuleIntensityGraph(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 

  Load_Stream(streamStart, varParticleModuleIntensityGraph, 0x30ui64);
  v1 = varParticleCurveDef;
  varParticleCurveDef = varParticleModuleIntensityGraph->m_curves;
  Load_ParticleCurveDefArray(NotAtStart, 2ui64);
  varParticleCurveDef = v1;
}

/*
==============
Load_ParticleModuleIntensityGraphArray
==============
*/
void Load_ParticleModuleIntensityGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleIntensityGraph *i; 
  ParticleCurveDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleIntensityGraph, 48 * count);
  for ( i = varParticleModuleIntensityGraph; v2; --v2 )
  {
    varParticleModuleIntensityGraph = i;
    Load_Stream(NotAtStart, i, 0x30ui64);
    v4 = varParticleCurveDef;
    varParticleCurveDef = varParticleModuleIntensityGraph->m_curves;
    Load_ParticleCurveDefArray(NotAtStart, 2ui64);
    ++i;
    varParticleCurveDef = v4;
  }
}

/*
==============
Load_ParticleModuleIntensityGraphStream
==============
*/
void Load_ParticleModuleIntensityGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 21137, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleIntensityGraph;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      v4 = varParticleCurveDef;
      varParticleCurveDef = varParticleModuleIntensityGraph->m_curves;
      Load_ParticleCurveDefArray(NotAtStart, 2ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleIntensityGraph = (ParticleModuleIntensityGraph *)g_streamPosGlob.pos;
      varParticleCurveDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleParentVelocityGraph
==============
*/
void Load_ParticleModuleParentVelocityGraph(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 

  Load_Stream(streamStart, varParticleModuleParentVelocityGraph, 0x30ui64);
  v1 = varParticleCurveDef;
  varParticleCurveDef = varParticleModuleParentVelocityGraph->m_curves;
  Load_ParticleCurveDefArray(NotAtStart, 2ui64);
  varParticleCurveDef = v1;
}

/*
==============
Load_ParticleModuleParentVelocityGraphArray
==============
*/
void Load_ParticleModuleParentVelocityGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleParentVelocityGraph *i; 
  ParticleCurveDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleParentVelocityGraph, 48 * count);
  for ( i = varParticleModuleParentVelocityGraph; v2; --v2 )
  {
    varParticleModuleParentVelocityGraph = i;
    Load_Stream(NotAtStart, i, 0x30ui64);
    v4 = varParticleCurveDef;
    varParticleCurveDef = varParticleModuleParentVelocityGraph->m_curves;
    Load_ParticleCurveDefArray(NotAtStart, 2ui64);
    ++i;
    varParticleCurveDef = v4;
  }
}

/*
==============
Load_ParticleModuleParentVelocityGraphStream
==============
*/
void Load_ParticleModuleParentVelocityGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 21406, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleParentVelocityGraph;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      v4 = varParticleCurveDef;
      varParticleCurveDef = varParticleModuleParentVelocityGraph->m_curves;
      Load_ParticleCurveDefArray(NotAtStart, 2ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleParentVelocityGraph = (ParticleModuleParentVelocityGraph *)g_streamPosGlob.pos;
      varParticleCurveDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModulePhysicsLight
==============
*/
void Load_ParticleModulePhysicsLight(const DBStreamStart streamStart)
{
  ParticleLinkedAssetListDef *v1; 

  Load_Stream(streamStart, varParticleModulePhysicsLight, 0x20ui64);
  v1 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModulePhysicsLight->m_linkedAssetList;
  Load_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v1;
}

/*
==============
Load_ParticleModulePhysicsLightArray
==============
*/
void Load_ParticleModulePhysicsLightArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModulePhysicsLight *i; 
  ParticleLinkedAssetListDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModulePhysicsLight, 32 * count);
  for ( i = varParticleModulePhysicsLight; v2; --v2 )
  {
    varParticleModulePhysicsLight = i;
    Load_Stream(NotAtStart, i, 0x20ui64);
    v4 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &varParticleModulePhysicsLight->m_linkedAssetList;
    Load_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v4;
  }
}

/*
==============
Load_ParticleModulePhysicsLightStream
==============
*/
void Load_ParticleModulePhysicsLightStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleLinkedAssetListDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 21575, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModulePhysicsLight;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      v4 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &varParticleModulePhysicsLight->m_linkedAssetList;
      Load_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModulePhysicsLight = (ParticleModulePhysicsLight *)g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModulePhysicsRayCast
==============
*/
void Load_ParticleModulePhysicsRayCast(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModulePhysicsRayCast, 0x30ui64);
}

/*
==============
Load_ParticleModulePhysicsRayCastArray
==============
*/
void Load_ParticleModulePhysicsRayCastArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModulePhysicsRayCast, 48 * count);
}

/*
==============
Load_ParticleModulePhysicsRayCastStream
==============
*/
void Load_ParticleModulePhysicsRayCastStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 21790, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModulePhysicsRayCast;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      pos = g_streamPosGlob.pos;
      varParticleModulePhysicsRayCast = (ParticleModulePhysicsRayCast *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModulePositionGraph
==============
*/
void Load_ParticleModulePositionGraph(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 

  Load_Stream(streamStart, varParticleModulePositionGraph, 0x70ui64);
  v1 = varParticleCurveDef;
  varParticleCurveDef = varParticleModulePositionGraph->m_curves;
  Load_ParticleCurveDefArray(NotAtStart, 6ui64);
  varParticleCurveDef = v1;
}

/*
==============
Load_ParticleModulePositionGraphArray
==============
*/
void Load_ParticleModulePositionGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModulePositionGraph *i; 
  ParticleCurveDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModulePositionGraph, 112 * count);
  for ( i = varParticleModulePositionGraph; v2; --v2 )
  {
    varParticleModulePositionGraph = i;
    Load_Stream(NotAtStart, i, 0x70ui64);
    v4 = varParticleCurveDef;
    varParticleCurveDef = varParticleModulePositionGraph->m_curves;
    Load_ParticleCurveDefArray(NotAtStart, 6ui64);
    ++i;
    varParticleCurveDef = v4;
  }
}

/*
==============
Load_ParticleModulePositionGraphStream
==============
*/
void Load_ParticleModulePositionGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 21913, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModulePositionGraph;
    do
    {
      Load_Stream(AtStart, pos, 0x70ui64);
      v4 = varParticleCurveDef;
      varParticleCurveDef = varParticleModulePositionGraph->m_curves;
      Load_ParticleCurveDefArray(NotAtStart, 6ui64);
      pos = g_streamPosGlob.pos;
      varParticleModulePositionGraph = (ParticleModulePositionGraph *)g_streamPosGlob.pos;
      varParticleCurveDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleRotationGraph3D
==============
*/
void Load_ParticleModuleRotationGraph3D(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 

  Load_Stream(streamStart, varParticleModuleRotationGraph3D, 0x70ui64);
  v1 = varParticleCurveDef;
  varParticleCurveDef = varParticleModuleRotationGraph3D->m_curves;
  Load_ParticleCurveDefArray(NotAtStart, 6ui64);
  varParticleCurveDef = v1;
}

/*
==============
Load_ParticleModuleRotationGraph3DArray
==============
*/
void Load_ParticleModuleRotationGraph3DArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleRotationGraph3D *i; 
  ParticleCurveDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleRotationGraph3D, 112 * count);
  for ( i = varParticleModuleRotationGraph3D; v2; --v2 )
  {
    varParticleModuleRotationGraph3D = i;
    Load_Stream(NotAtStart, i, 0x70ui64);
    v4 = varParticleCurveDef;
    varParticleCurveDef = varParticleModuleRotationGraph3D->m_curves;
    Load_ParticleCurveDefArray(NotAtStart, 6ui64);
    ++i;
    varParticleCurveDef = v4;
  }
}

/*
==============
Load_ParticleModuleRotationGraph3DStream
==============
*/
void Load_ParticleModuleRotationGraph3DStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 22205, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleRotationGraph3D;
    do
    {
      Load_Stream(AtStart, pos, 0x70ui64);
      v4 = varParticleCurveDef;
      varParticleCurveDef = varParticleModuleRotationGraph3D->m_curves;
      Load_ParticleCurveDefArray(NotAtStart, 6ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleRotationGraph3D = (ParticleModuleRotationGraph3D *)g_streamPosGlob.pos;
      varParticleCurveDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleRotationGraph
==============
*/
void Load_ParticleModuleRotationGraph(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 

  Load_Stream(streamStart, varParticleModuleRotationGraph, 0x30ui64);
  v1 = varParticleCurveDef;
  varParticleCurveDef = varParticleModuleRotationGraph->m_curves;
  Load_ParticleCurveDefArray(NotAtStart, 2ui64);
  varParticleCurveDef = v1;
}

/*
==============
Load_ParticleModuleRotationGraphArray
==============
*/
void Load_ParticleModuleRotationGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleRotationGraph *i; 
  ParticleCurveDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleRotationGraph, 48 * count);
  for ( i = varParticleModuleRotationGraph; v2; --v2 )
  {
    varParticleModuleRotationGraph = i;
    Load_Stream(NotAtStart, i, 0x30ui64);
    v4 = varParticleCurveDef;
    varParticleCurveDef = varParticleModuleRotationGraph->m_curves;
    Load_ParticleCurveDefArray(NotAtStart, 2ui64);
    ++i;
    varParticleCurveDef = v4;
  }
}

/*
==============
Load_ParticleModuleRotationGraphStream
==============
*/
void Load_ParticleModuleRotationGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 22059, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleRotationGraph;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      v4 = varParticleCurveDef;
      varParticleCurveDef = varParticleModuleRotationGraph->m_curves;
      Load_ParticleCurveDefArray(NotAtStart, 2ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleRotationGraph = (ParticleModuleRotationGraph *)g_streamPosGlob.pos;
      varParticleCurveDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleScaleByDistance
==============
*/
void Load_ParticleModuleScaleByDistance(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 

  Load_Stream(streamStart, varParticleModuleScaleByDistance, 0x40ui64);
  v1 = varParticleCurveDef;
  varParticleCurveDef = varParticleModuleScaleByDistance->m_curves;
  Load_ParticleCurveDefArray(NotAtStart, 2ui64);
  varParticleCurveDef = v1;
}

/*
==============
Load_ParticleModuleScaleByDistanceArray
==============
*/
void Load_ParticleModuleScaleByDistanceArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleScaleByDistance *i; 
  ParticleCurveDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleScaleByDistance, count << 6);
  for ( i = varParticleModuleScaleByDistance; v2; --v2 )
  {
    varParticleModuleScaleByDistance = i;
    Load_Stream(NotAtStart, i, 0x40ui64);
    v4 = varParticleCurveDef;
    varParticleCurveDef = varParticleModuleScaleByDistance->m_curves;
    Load_ParticleCurveDefArray(NotAtStart, 2ui64);
    ++i;
    varParticleCurveDef = v4;
  }
}

/*
==============
Load_ParticleModuleScaleByDistanceStream
==============
*/
void Load_ParticleModuleScaleByDistanceStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 22397, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleScaleByDistance;
    do
    {
      Load_Stream(AtStart, pos, 0x40ui64);
      v4 = varParticleCurveDef;
      varParticleCurveDef = varParticleModuleScaleByDistance->m_curves;
      Load_ParticleCurveDefArray(NotAtStart, 2ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleScaleByDistance = (ParticleModuleScaleByDistance *)g_streamPosGlob.pos;
      varParticleCurveDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleShaderGraph
==============
*/
void Load_ParticleModuleShaderGraph(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 

  Load_Stream(streamStart, varParticleModuleShaderGraph, 0xD0ui64);
  v1 = varParticleCurveDef;
  varParticleCurveDef = varParticleModuleShaderGraph->m_curves;
  Load_ParticleCurveDefArray(NotAtStart, 0xCui64);
  varParticleCurveDef = v1;
}

/*
==============
Load_ParticleModuleShaderGraphArray
==============
*/
void Load_ParticleModuleShaderGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleShaderGraph *i; 
  ParticleCurveDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleShaderGraph, 208 * count);
  for ( i = varParticleModuleShaderGraph; v2; --v2 )
  {
    varParticleModuleShaderGraph = i;
    Load_Stream(NotAtStart, i, 0xD0ui64);
    v4 = varParticleCurveDef;
    varParticleCurveDef = varParticleModuleShaderGraph->m_curves;
    Load_ParticleCurveDefArray(NotAtStart, 0xCui64);
    ++i;
    varParticleCurveDef = v4;
  }
}

/*
==============
Load_ParticleModuleShaderGraphStream
==============
*/
void Load_ParticleModuleShaderGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 20599, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleShaderGraph;
    do
    {
      Load_Stream(AtStart, pos, 0xD0ui64);
      v4 = varParticleCurveDef;
      varParticleCurveDef = varParticleModuleShaderGraph->m_curves;
      Load_ParticleCurveDefArray(NotAtStart, 0xCui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleShaderGraph = (ParticleModuleShaderGraph *)g_streamPosGlob.pos;
      varParticleCurveDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleSizeGraph
==============
*/
void Load_ParticleModuleSizeGraph(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 

  Load_Stream(streamStart, varParticleModuleSizeGraph, 0x90ui64);
  v1 = varParticleCurveDef;
  varParticleCurveDef = varParticleModuleSizeGraph->m_curves;
  Load_ParticleCurveDefArray(NotAtStart, 6ui64);
  varParticleCurveDef = v1;
}

/*
==============
Load_ParticleModuleSizeGraphArray
==============
*/
void Load_ParticleModuleSizeGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleSizeGraph *i; 
  ParticleCurveDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleSizeGraph, 144 * count);
  for ( i = varParticleModuleSizeGraph; v2; --v2 )
  {
    varParticleModuleSizeGraph = i;
    Load_Stream(NotAtStart, i, 0x90ui64);
    v4 = varParticleCurveDef;
    varParticleCurveDef = varParticleModuleSizeGraph->m_curves;
    Load_ParticleCurveDefArray(NotAtStart, 6ui64);
    ++i;
    varParticleCurveDef = v4;
  }
}

/*
==============
Load_ParticleModuleSizeGraphStream
==============
*/
void Load_ParticleModuleSizeGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 22589, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleSizeGraph;
    do
    {
      Load_Stream(AtStart, pos, 0x90ui64);
      v4 = varParticleCurveDef;
      varParticleCurveDef = varParticleModuleSizeGraph->m_curves;
      Load_ParticleCurveDefArray(NotAtStart, 6ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleSizeGraph = (ParticleModuleSizeGraph *)g_streamPosGlob.pos;
      varParticleCurveDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleSizeLerp
==============
*/
void Load_ParticleModuleSizeLerp(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleSizeLerp, 0x30ui64);
}

/*
==============
Load_ParticleModuleSizeLerpArray
==============
*/
void Load_ParticleModuleSizeLerpArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleSizeLerp, 48 * count);
}

/*
==============
Load_ParticleModuleSizeLerpStream
==============
*/
void Load_ParticleModuleSizeLerpStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 22735, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleSizeLerp;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleSizeLerp = (ParticleModuleSizeLerp *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleTemperatureGraph
==============
*/
void Load_ParticleModuleTemperatureGraph(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 

  Load_Stream(streamStart, varParticleModuleTemperatureGraph, 0x30ui64);
  v1 = varParticleCurveDef;
  varParticleCurveDef = varParticleModuleTemperatureGraph->m_curves;
  Load_ParticleCurveDefArray(NotAtStart, 2ui64);
  varParticleCurveDef = v1;
}

/*
==============
Load_ParticleModuleTemperatureGraphArray
==============
*/
void Load_ParticleModuleTemperatureGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleTemperatureGraph *i; 
  ParticleCurveDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleTemperatureGraph, 48 * count);
  for ( i = varParticleModuleTemperatureGraph; v2; --v2 )
  {
    varParticleModuleTemperatureGraph = i;
    Load_Stream(NotAtStart, i, 0x30ui64);
    v4 = varParticleCurveDef;
    varParticleCurveDef = varParticleModuleTemperatureGraph->m_curves;
    Load_ParticleCurveDefArray(NotAtStart, 2ui64);
    ++i;
    varParticleCurveDef = v4;
  }
}

/*
==============
Load_ParticleModuleTemperatureGraphStream
==============
*/
void Load_ParticleModuleTemperatureGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 21283, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleTemperatureGraph;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      v4 = varParticleCurveDef;
      varParticleCurveDef = varParticleModuleTemperatureGraph->m_curves;
      Load_ParticleCurveDefArray(NotAtStart, 2ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleTemperatureGraph = (ParticleModuleTemperatureGraph *)g_streamPosGlob.pos;
      varParticleCurveDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleTestAge
==============
*/
void Load_ParticleModuleTestAge(const DBStreamStart streamStart)
{
  ParticleModuleTestEventHandlerData *v1; 
  ParticleLinkedAssetListDef *v2; 

  Load_Stream(streamStart, varParticleModuleTestAge, 0x80ui64);
  v1 = varParticleModuleTestEventHandlerData;
  varParticleModuleTestEventHandlerData = &varParticleModuleTestAge->m_eventHandlerData;
  Load_Stream(NotAtStart, &varParticleModuleTestAge->m_eventHandlerData, 0x20ui64);
  v2 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
  Load_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v2;
  varParticleModuleTestEventHandlerData = v1;
}

/*
==============
Load_ParticleModuleTestAgeArray
==============
*/
void Load_ParticleModuleTestAgeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleTestAge *i; 
  ParticleModuleTestEventHandlerData *v4; 
  ParticleLinkedAssetListDef *v5; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleTestAge, count << 7);
  for ( i = varParticleModuleTestAge; v2; --v2 )
  {
    varParticleModuleTestAge = i;
    Load_Stream(NotAtStart, i, 0x80ui64);
    v4 = varParticleModuleTestEventHandlerData;
    varParticleModuleTestEventHandlerData = &varParticleModuleTestAge->m_eventHandlerData;
    Load_Stream(NotAtStart, &varParticleModuleTestAge->m_eventHandlerData, 0x20ui64);
    v5 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
    Load_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v5;
    varParticleModuleTestEventHandlerData = v4;
  }
}

/*
==============
Load_ParticleModuleTestAgeStream
==============
*/
void Load_ParticleModuleTestAgeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleModuleTestEventHandlerData *v4; 
  ParticleLinkedAssetListDef *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 23457, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleTestAge;
    do
    {
      Load_Stream(AtStart, pos, 0x80ui64);
      v4 = varParticleModuleTestEventHandlerData;
      varParticleModuleTestEventHandlerData = &varParticleModuleTestAge->m_eventHandlerData;
      Load_Stream(NotAtStart, &varParticleModuleTestAge->m_eventHandlerData, 0x20ui64);
      v5 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
      Load_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleTestAge = (ParticleModuleTestAge *)g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v5;
      varParticleModuleTestEventHandlerData = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleTestBirth
==============
*/
void Load_ParticleModuleTestBirth(const DBStreamStart streamStart)
{
  ParticleModuleTestEventHandlerData *v1; 
  ParticleLinkedAssetListDef *v2; 

  Load_Stream(streamStart, varParticleModuleTestBirth, 0x70ui64);
  v1 = varParticleModuleTestEventHandlerData;
  varParticleModuleTestEventHandlerData = &varParticleModuleTestBirth->m_eventHandlerData;
  Load_Stream(NotAtStart, &varParticleModuleTestBirth->m_eventHandlerData, 0x20ui64);
  v2 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
  Load_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v2;
  varParticleModuleTestEventHandlerData = v1;
}

/*
==============
Load_ParticleModuleTestBirthArray
==============
*/
void Load_ParticleModuleTestBirthArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleTestBirth *i; 
  ParticleModuleTestEventHandlerData *v4; 
  ParticleLinkedAssetListDef *v5; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleTestBirth, 112 * count);
  for ( i = varParticleModuleTestBirth; v2; --v2 )
  {
    varParticleModuleTestBirth = i;
    Load_Stream(NotAtStart, i, 0x70ui64);
    v4 = varParticleModuleTestEventHandlerData;
    varParticleModuleTestEventHandlerData = &varParticleModuleTestBirth->m_eventHandlerData;
    Load_Stream(NotAtStart, &varParticleModuleTestBirth->m_eventHandlerData, 0x20ui64);
    v5 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
    Load_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v5;
    varParticleModuleTestEventHandlerData = v4;
  }
}

/*
==============
Load_ParticleModuleTestBirthStream
==============
*/
void Load_ParticleModuleTestBirthStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleModuleTestEventHandlerData *v4; 
  ParticleLinkedAssetListDef *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 23718, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleTestBirth;
    do
    {
      Load_Stream(AtStart, pos, 0x70ui64);
      v4 = varParticleModuleTestEventHandlerData;
      varParticleModuleTestEventHandlerData = &varParticleModuleTestBirth->m_eventHandlerData;
      Load_Stream(NotAtStart, &varParticleModuleTestBirth->m_eventHandlerData, 0x20ui64);
      v5 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
      Load_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleTestBirth = (ParticleModuleTestBirth *)g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v5;
      varParticleModuleTestEventHandlerData = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleTestDeath
==============
*/
void Load_ParticleModuleTestDeath(const DBStreamStart streamStart)
{
  ParticleModuleTestEventHandlerData *v1; 
  ParticleLinkedAssetListDef *v2; 

  Load_Stream(streamStart, varParticleModuleTestDeath, 0x70ui64);
  v1 = varParticleModuleTestEventHandlerData;
  varParticleModuleTestEventHandlerData = &varParticleModuleTestDeath->m_eventHandlerData;
  Load_Stream(NotAtStart, &varParticleModuleTestDeath->m_eventHandlerData, 0x20ui64);
  v2 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
  Load_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v2;
  varParticleModuleTestEventHandlerData = v1;
}

/*
==============
Load_ParticleModuleTestDeathArray
==============
*/
void Load_ParticleModuleTestDeathArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleTestDeath *i; 
  ParticleModuleTestEventHandlerData *v4; 
  ParticleLinkedAssetListDef *v5; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleTestDeath, 112 * count);
  for ( i = varParticleModuleTestDeath; v2; --v2 )
  {
    varParticleModuleTestDeath = i;
    Load_Stream(NotAtStart, i, 0x70ui64);
    v4 = varParticleModuleTestEventHandlerData;
    varParticleModuleTestEventHandlerData = &varParticleModuleTestDeath->m_eventHandlerData;
    Load_Stream(NotAtStart, &varParticleModuleTestDeath->m_eventHandlerData, 0x20ui64);
    v5 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
    Load_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v5;
    varParticleModuleTestEventHandlerData = v4;
  }
}

/*
==============
Load_ParticleModuleTestDeathStream
==============
*/
void Load_ParticleModuleTestDeathStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleModuleTestEventHandlerData *v4; 
  ParticleLinkedAssetListDef *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 23979, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleTestDeath;
    do
    {
      Load_Stream(AtStart, pos, 0x70ui64);
      v4 = varParticleModuleTestEventHandlerData;
      varParticleModuleTestEventHandlerData = &varParticleModuleTestDeath->m_eventHandlerData;
      Load_Stream(NotAtStart, &varParticleModuleTestDeath->m_eventHandlerData, 0x20ui64);
      v5 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
      Load_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleTestDeath = (ParticleModuleTestDeath *)g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v5;
      varParticleModuleTestEventHandlerData = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleTestEventHandlerData
==============
*/
void Load_ParticleModuleTestEventHandlerData(const DBStreamStart streamStart)
{
  ParticleLinkedAssetListDef *v1; 

  Load_Stream(streamStart, varParticleModuleTestEventHandlerData, 0x20ui64);
  v1 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
  Load_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v1;
}

/*
==============
Load_ParticleModuleTestEventHandlerDataArray
==============
*/
void Load_ParticleModuleTestEventHandlerDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleTestEventHandlerData *i; 
  ParticleLinkedAssetListDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleTestEventHandlerData, 32 * count);
  for ( i = varParticleModuleTestEventHandlerData; v2; --v2 )
  {
    varParticleModuleTestEventHandlerData = i;
    Load_Stream(NotAtStart, i, 0x20ui64);
    v4 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
    Load_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v4;
  }
}

/*
==============
Load_ParticleModuleTestEventHandlerDataStream
==============
*/
void Load_ParticleModuleTestEventHandlerDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleLinkedAssetListDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 23173, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleTestEventHandlerData;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      v4 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
      Load_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleTestEventHandlerData = (ParticleModuleTestEventHandlerData *)g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleTestGravity
==============
*/
void Load_ParticleModuleTestGravity(const DBStreamStart streamStart)
{
  ParticleModuleTestEventHandlerData *v1; 
  ParticleLinkedAssetListDef *v2; 

  Load_Stream(streamStart, varParticleModuleTestGravity, 0x80ui64);
  v1 = varParticleModuleTestEventHandlerData;
  varParticleModuleTestEventHandlerData = &varParticleModuleTestGravity->m_eventHandlerData;
  Load_Stream(NotAtStart, &varParticleModuleTestGravity->m_eventHandlerData, 0x20ui64);
  v2 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
  Load_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v2;
  varParticleModuleTestEventHandlerData = v1;
}

/*
==============
Load_ParticleModuleTestGravityArray
==============
*/
void Load_ParticleModuleTestGravityArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleTestGravity *i; 
  ParticleModuleTestEventHandlerData *v4; 
  ParticleLinkedAssetListDef *v5; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleTestGravity, count << 7);
  for ( i = varParticleModuleTestGravity; v2; --v2 )
  {
    varParticleModuleTestGravity = i;
    Load_Stream(NotAtStart, i, 0x80ui64);
    v4 = varParticleModuleTestEventHandlerData;
    varParticleModuleTestEventHandlerData = &varParticleModuleTestGravity->m_eventHandlerData;
    Load_Stream(NotAtStart, &varParticleModuleTestGravity->m_eventHandlerData, 0x20ui64);
    v5 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
    Load_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v5;
    varParticleModuleTestEventHandlerData = v4;
  }
}

/*
==============
Load_ParticleModuleTestGravityStream
==============
*/
void Load_ParticleModuleTestGravityStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleModuleTestEventHandlerData *v4; 
  ParticleLinkedAssetListDef *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 24318, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleTestGravity;
    do
    {
      Load_Stream(AtStart, pos, 0x80ui64);
      v4 = varParticleModuleTestEventHandlerData;
      varParticleModuleTestEventHandlerData = &varParticleModuleTestGravity->m_eventHandlerData;
      Load_Stream(NotAtStart, &varParticleModuleTestGravity->m_eventHandlerData, 0x20ui64);
      v5 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
      Load_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleTestGravity = (ParticleModuleTestGravity *)g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v5;
      varParticleModuleTestEventHandlerData = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleTestImpact
==============
*/
void Load_ParticleModuleTestImpact(const DBStreamStart streamStart)
{
  ParticleModuleTestEventHandlerData *v1; 
  ParticleLinkedAssetListDef *v2; 

  Load_Stream(streamStart, varParticleModuleTestImpact, 0x80ui64);
  v1 = varParticleModuleTestEventHandlerData;
  varParticleModuleTestEventHandlerData = &varParticleModuleTestImpact->m_eventHandlerData;
  Load_Stream(NotAtStart, &varParticleModuleTestImpact->m_eventHandlerData, 0x20ui64);
  v2 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
  Load_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v2;
  varParticleModuleTestEventHandlerData = v1;
}

/*
==============
Load_ParticleModuleTestImpactArray
==============
*/
void Load_ParticleModuleTestImpactArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleTestImpact *i; 
  ParticleModuleTestEventHandlerData *v4; 
  ParticleLinkedAssetListDef *v5; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleTestImpact, count << 7);
  for ( i = varParticleModuleTestImpact; v2; --v2 )
  {
    varParticleModuleTestImpact = i;
    Load_Stream(NotAtStart, i, 0x80ui64);
    v4 = varParticleModuleTestEventHandlerData;
    varParticleModuleTestEventHandlerData = &varParticleModuleTestImpact->m_eventHandlerData;
    Load_Stream(NotAtStart, &varParticleModuleTestImpact->m_eventHandlerData, 0x20ui64);
    v5 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
    Load_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v5;
    varParticleModuleTestEventHandlerData = v4;
  }
}

/*
==============
Load_ParticleModuleTestImpactStream
==============
*/
void Load_ParticleModuleTestImpactStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleModuleTestEventHandlerData *v4; 
  ParticleLinkedAssetListDef *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 24657, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleTestImpact;
    do
    {
      Load_Stream(AtStart, pos, 0x80ui64);
      v4 = varParticleModuleTestEventHandlerData;
      varParticleModuleTestEventHandlerData = &varParticleModuleTestImpact->m_eventHandlerData;
      Load_Stream(NotAtStart, &varParticleModuleTestImpact->m_eventHandlerData, 0x20ui64);
      v5 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
      Load_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleTestImpact = (ParticleModuleTestImpact *)g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v5;
      varParticleModuleTestEventHandlerData = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleTestPos
==============
*/
void Load_ParticleModuleTestPos(const DBStreamStart streamStart)
{
  ParticleModuleTestEventHandlerData *v1; 
  ParticleLinkedAssetListDef *v2; 

  Load_Stream(streamStart, varParticleModuleTestPos, 0x80ui64);
  v1 = varParticleModuleTestEventHandlerData;
  varParticleModuleTestEventHandlerData = &varParticleModuleTestPos->m_eventHandlerData;
  Load_Stream(NotAtStart, &varParticleModuleTestPos->m_eventHandlerData, 0x20ui64);
  v2 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
  Load_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v2;
  varParticleModuleTestEventHandlerData = v1;
}

/*
==============
Load_ParticleModuleTestPosArray
==============
*/
void Load_ParticleModuleTestPosArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleTestPos *i; 
  ParticleModuleTestEventHandlerData *v4; 
  ParticleLinkedAssetListDef *v5; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleTestPos, count << 7);
  for ( i = varParticleModuleTestPos; v2; --v2 )
  {
    varParticleModuleTestPos = i;
    Load_Stream(NotAtStart, i, 0x80ui64);
    v4 = varParticleModuleTestEventHandlerData;
    varParticleModuleTestEventHandlerData = &varParticleModuleTestPos->m_eventHandlerData;
    Load_Stream(NotAtStart, &varParticleModuleTestPos->m_eventHandlerData, 0x20ui64);
    v5 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
    Load_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v5;
    varParticleModuleTestEventHandlerData = v4;
  }
}

/*
==============
Load_ParticleModuleTestPosStream
==============
*/
void Load_ParticleModuleTestPosStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleModuleTestEventHandlerData *v4; 
  ParticleLinkedAssetListDef *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 24941, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleTestPos;
    do
    {
      Load_Stream(AtStart, pos, 0x80ui64);
      v4 = varParticleModuleTestEventHandlerData;
      varParticleModuleTestEventHandlerData = &varParticleModuleTestPos->m_eventHandlerData;
      Load_Stream(NotAtStart, &varParticleModuleTestPos->m_eventHandlerData, 0x20ui64);
      v5 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
      Load_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleTestPos = (ParticleModuleTestPos *)g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v5;
      varParticleModuleTestEventHandlerData = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleTestTimeInState
==============
*/
void Load_ParticleModuleTestTimeInState(const DBStreamStart streamStart)
{
  ParticleModuleTestEventHandlerData *v1; 
  ParticleLinkedAssetListDef *v2; 

  Load_Stream(streamStart, varParticleModuleTestTimeInState, 0x80ui64);
  v1 = varParticleModuleTestEventHandlerData;
  varParticleModuleTestEventHandlerData = &varParticleModuleTestTimeInState->m_eventHandlerData;
  Load_Stream(NotAtStart, &varParticleModuleTestTimeInState->m_eventHandlerData, 0x20ui64);
  v2 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
  Load_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v2;
  varParticleModuleTestEventHandlerData = v1;
}

/*
==============
Load_ParticleModuleTestTimeInStateArray
==============
*/
void Load_ParticleModuleTestTimeInStateArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleTestTimeInState *i; 
  ParticleModuleTestEventHandlerData *v4; 
  ParticleLinkedAssetListDef *v5; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleTestTimeInState, count << 7);
  for ( i = varParticleModuleTestTimeInState; v2; --v2 )
  {
    varParticleModuleTestTimeInState = i;
    Load_Stream(NotAtStart, i, 0x80ui64);
    v4 = varParticleModuleTestEventHandlerData;
    varParticleModuleTestEventHandlerData = &varParticleModuleTestTimeInState->m_eventHandlerData;
    Load_Stream(NotAtStart, &varParticleModuleTestTimeInState->m_eventHandlerData, 0x20ui64);
    v5 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
    Load_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v5;
    varParticleModuleTestEventHandlerData = v4;
  }
}

/*
==============
Load_ParticleModuleTestTimeInStateStream
==============
*/
void Load_ParticleModuleTestTimeInStateStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleModuleTestEventHandlerData *v4; 
  ParticleLinkedAssetListDef *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 25225, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleTestTimeInState;
    do
    {
      Load_Stream(AtStart, pos, 0x80ui64);
      v4 = varParticleModuleTestEventHandlerData;
      varParticleModuleTestEventHandlerData = &varParticleModuleTestTimeInState->m_eventHandlerData;
      Load_Stream(NotAtStart, &varParticleModuleTestTimeInState->m_eventHandlerData, 0x20ui64);
      v5 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
      Load_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleTestTimeInState = (ParticleModuleTestTimeInState *)g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v5;
      varParticleModuleTestEventHandlerData = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleType
==============
*/
void Load_ParticleModuleType(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleType, 2ui64);
}

/*
==============
Load_ParticleModuleTypeArray
==============
*/
void Load_ParticleModuleTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleType, 2 * count);
}

/*
==============
Load_ParticleModuleTypeDef
==============
*/
void Load_ParticleModuleTypeDef(const DBStreamStart streamStart)
{
  ParticleModuleType moduleType; 
  ParticleModuleInitAtlas *v2; 
  ParticleCurveDef *v3; 
  ParticleModuleInitAttributes *v4; 
  ParticleModuleInitBeam *v5; 
  ParticleModuleInitCameraOffset *v6; 
  ParticleModuleInitCloud *v7; 
  ParticleModuleInitDecal *v8; 
  ParticleModuleInitFlare *v9; 
  ParticleModuleInitGeoTrail *v10; 
  ParticleModuleInitKillWrapBox *v11; 
  ParticleModuleInitLightOmni *v12; 
  ParticleModuleInitLightSpot *v13; 
  ParticleModuleInitMaterial *v14; 
  ParticleModuleInitMirrorTexture *v15; 
  ParticleModuleInitModel *v16; 
  ParticleModuleInitOcclusionQuery *v17; 
  ParticleModuleInitOrientedSprite *v18; 
  ParticleModuleInitParticleSim *v19; 
  ParticleModuleInitPlayerFacing *v20; 
  ParticleModuleInitRelativeVelocity *v21; 
  ParticleModuleInitRotation *v22; 
  ParticleModuleInitRotation3D *v23; 
  ParticleModuleInitRunner *v24; 
  ParticleModuleInitSound *v25; 
  ParticleModuleInitSpawn *v26; 
  ParticleModuleInitSpawnShapeBox *v27; 
  ParticleModuleInitSpawnShapeCylinder *v28; 
  ParticleModuleInitSpawnShapeEllipsoid *v29; 
  ParticleModuleInitSpawnShapeMesh *v30; 
  ParticleModuleInitSpawnShapeSphere *v31; 
  ParticleModuleInitTail *v32; 
  ParticleModuleInitVectorField *v33; 
  ParticleModuleInitVolumetric *v34; 
  ParticleModuleInitDismember *v35; 
  ParticleModuleAttractor *v36; 
  ParticleModuleColorGraph *v37; 
  ParticleModuleColorLerp *v38; 
  ParticleModuleEmissionGraph *v39; 
  ParticleModuleEmissiveGraph *v40; 
  ParticleModuleShaderGraph *v41; 
  ParticleModuleForce *v42; 
  ParticleModuleForceDragGraph *v43; 
  ParticleModuleGravity *v44; 
  ParticleModuleIntensityGraph *v45; 
  ParticleModuleTemperatureGraph *v46; 
  ParticleModuleParentVelocityGraph *v47; 
  ParticleModulePhysicsLight *v48; 
  ParticleModulePhysicsRayCast *v49; 
  ParticleModulePositionGraph *v50; 
  ParticleModuleRotationGraph *v51; 
  ParticleModuleRotationGraph3D *v52; 
  ParticleModuleScaleByDistance *v53; 
  ParticleModuleSizeGraph *v54; 
  ParticleModuleSizeLerp *v55; 
  ParticleModuleVelocityGraph *v56; 
  ParticleModuleVectorFieldGraph *v57; 
  ParticleModuleTestAge *v58; 
  ParticleModuleTestBirth *v59; 
  ParticleModuleTestDeath *v60; 
  ParticleModuleTestGravity *v61; 
  ParticleModuleTestImpact *v62; 
  ParticleModuleTestPos *v63; 
  ParticleModuleTestTimeInState *v64; 

  moduleType = varParticleModuleDef->moduleType;
  if ( varParticleModuleDef->moduleType )
  {
    switch ( moduleType )
    {
      case PARTICLE_MODULE_INIT_ATTRIBUTES:
        if ( streamStart == AtStart )
        {
          v4 = varParticleModuleInitAttributes;
          varParticleModuleInitAttributes = (ParticleModuleInitAttributes *)varParticleModuleTypeDef;
          Load_Stream(AtStart, varParticleModuleTypeDef, 0x70ui64);
          varParticleModuleInitAttributes = v4;
        }
        break;
      case PARTICLE_MODULE_INIT_BEAM:
        v5 = varParticleModuleInitBeam;
        varParticleModuleInitBeam = (ParticleModuleInitBeam *)varParticleModuleTypeDef;
        Load_ParticleModuleInitBeam(streamStart);
        varParticleModuleInitBeam = v5;
        break;
      case PARTICLE_MODULE_INIT_CAMERA_OFFSET:
        if ( streamStart == AtStart )
        {
          v6 = varParticleModuleInitCameraOffset;
          varParticleModuleInitCameraOffset = (ParticleModuleInitCameraOffset *)varParticleModuleTypeDef;
          Load_Stream(AtStart, varParticleModuleTypeDef, 0x10ui64);
          varParticleModuleInitCameraOffset = v6;
        }
        break;
      case PARTICLE_MODULE_INIT_CLOUD:
        if ( streamStart == AtStart )
        {
          v7 = varParticleModuleInitCloud;
          varParticleModuleInitCloud = (ParticleModuleInitCloud *)varParticleModuleTypeDef;
          Load_Stream(AtStart, varParticleModuleTypeDef, 0x10ui64);
          varParticleModuleInitCloud = v7;
        }
        break;
      case PARTICLE_MODULE_INIT_DECAL:
        v8 = varParticleModuleInitDecal;
        varParticleModuleInitDecal = (ParticleModuleInitDecal *)varParticleModuleTypeDef;
        Load_ParticleModuleInitDecal(streamStart);
        varParticleModuleInitDecal = v8;
        break;
      case PARTICLE_MODULE_INIT_FLARE:
        v9 = varParticleModuleInitFlare;
        varParticleModuleInitFlare = (ParticleModuleInitFlare *)varParticleModuleTypeDef;
        Load_ParticleModuleInitFlare(streamStart);
        varParticleModuleInitFlare = v9;
        break;
      case PARTICLE_MODULE_INIT_GEO_TRAIL:
        if ( streamStart == AtStart )
        {
          v10 = varParticleModuleInitGeoTrail;
          varParticleModuleInitGeoTrail = (ParticleModuleInitGeoTrail *)varParticleModuleTypeDef;
          Load_Stream(AtStart, varParticleModuleTypeDef, 0x40ui64);
          varParticleModuleInitGeoTrail = v10;
        }
        break;
      case PARTICLE_MODULE_INIT_KILL_WRAP_BOX:
        if ( streamStart == AtStart )
        {
          v11 = varParticleModuleInitKillWrapBox;
          varParticleModuleInitKillWrapBox = (ParticleModuleInitKillWrapBox *)varParticleModuleTypeDef;
          Load_Stream(AtStart, varParticleModuleTypeDef, 0x30ui64);
          varParticleModuleInitKillWrapBox = v11;
        }
        break;
      case PARTICLE_MODULE_INIT_LIGHT_OMNI:
        v12 = varParticleModuleInitLightOmni;
        varParticleModuleInitLightOmni = (ParticleModuleInitLightOmni *)varParticleModuleTypeDef;
        Load_ParticleModuleInitLightOmni(streamStart);
        varParticleModuleInitLightOmni = v12;
        break;
      case PARTICLE_MODULE_INIT_LIGHT_SPOT:
        v13 = varParticleModuleInitLightSpot;
        varParticleModuleInitLightSpot = (ParticleModuleInitLightSpot *)varParticleModuleTypeDef;
        Load_ParticleModuleInitLightSpot(streamStart);
        varParticleModuleInitLightSpot = v13;
        break;
      case PARTICLE_MODULE_INIT_MATERIAL:
        v14 = varParticleModuleInitMaterial;
        varParticleModuleInitMaterial = (ParticleModuleInitMaterial *)varParticleModuleTypeDef;
        Load_ParticleModuleInitMaterial(streamStart);
        varParticleModuleInitMaterial = v14;
        break;
      case PARTICLE_MODULE_INIT_MIRROR_TEXTURE:
        if ( streamStart == AtStart )
        {
          v15 = varParticleModuleInitMirrorTexture;
          varParticleModuleInitMirrorTexture = (ParticleModuleInitMirrorTexture *)varParticleModuleTypeDef;
          Load_Stream(AtStart, varParticleModuleTypeDef, 0x10ui64);
          varParticleModuleInitMirrorTexture = v15;
        }
        break;
      case PARTICLE_MODULE_INIT_MODEL:
        v16 = varParticleModuleInitModel;
        varParticleModuleInitModel = (ParticleModuleInitModel *)varParticleModuleTypeDef;
        Load_ParticleModuleInitModel(streamStart);
        varParticleModuleInitModel = v16;
        break;
      case PARTICLE_MODULE_INIT_OCCLUSION_QUERY:
        if ( streamStart == AtStart )
        {
          v17 = varParticleModuleInitOcclusionQuery;
          varParticleModuleInitOcclusionQuery = (ParticleModuleInitOcclusionQuery *)varParticleModuleTypeDef;
          Load_Stream(AtStart, varParticleModuleTypeDef, 0x30ui64);
          varParticleModuleInitOcclusionQuery = v17;
        }
        break;
      case PARTICLE_MODULE_INIT_ORIENTED_SPRITE:
        if ( streamStart == AtStart )
        {
          v18 = varParticleModuleInitOrientedSprite;
          varParticleModuleInitOrientedSprite = (ParticleModuleInitOrientedSprite *)varParticleModuleTypeDef;
          Load_Stream(AtStart, varParticleModuleTypeDef, 0x20ui64);
          varParticleModuleInitOrientedSprite = v18;
        }
        break;
      case PARTICLE_MODULE_INIT_PARTICLE_SIM:
        v19 = varParticleModuleInitParticleSim;
        varParticleModuleInitParticleSim = (ParticleModuleInitParticleSim *)varParticleModuleTypeDef;
        Load_ParticleModuleInitParticleSim(streamStart);
        varParticleModuleInitParticleSim = v19;
        break;
      case PARTICLE_MODULE_INIT_PLAYER_FACING:
        if ( streamStart == AtStart )
        {
          v20 = varParticleModuleInitPlayerFacing;
          varParticleModuleInitPlayerFacing = (ParticleModuleInitPlayerFacing *)varParticleModuleTypeDef;
          Load_Stream(AtStart, varParticleModuleTypeDef, 0x10ui64);
          varParticleModuleInitPlayerFacing = v20;
        }
        break;
      case PARTICLE_MODULE_INIT_RELATIVE_VELOCITY:
        if ( streamStart == AtStart )
        {
          v21 = varParticleModuleInitRelativeVelocity;
          varParticleModuleInitRelativeVelocity = (ParticleModuleInitRelativeVelocity *)varParticleModuleTypeDef;
          Load_Stream(AtStart, varParticleModuleTypeDef, 0x10ui64);
          varParticleModuleInitRelativeVelocity = v21;
        }
        break;
      case PARTICLE_MODULE_INIT_ROTATION:
        if ( streamStart == AtStart )
        {
          v22 = varParticleModuleInitRotation;
          varParticleModuleInitRotation = (ParticleModuleInitRotation *)varParticleModuleTypeDef;
          Load_Stream(AtStart, varParticleModuleTypeDef, 0x20ui64);
          varParticleModuleInitRotation = v22;
        }
        break;
      case PARTICLE_MODULE_INIT_ROTATION_3D:
        if ( streamStart == AtStart )
        {
          v23 = varParticleModuleInitRotation3D;
          varParticleModuleInitRotation3D = (ParticleModuleInitRotation3D *)varParticleModuleTypeDef;
          Load_Stream(AtStart, varParticleModuleTypeDef, 0x50ui64);
          varParticleModuleInitRotation3D = v23;
        }
        break;
      case PARTICLE_MODULE_INIT_RUNNER:
        v24 = varParticleModuleInitRunner;
        varParticleModuleInitRunner = (ParticleModuleInitRunner *)varParticleModuleTypeDef;
        Load_ParticleModuleInitRunner(streamStart);
        varParticleModuleInitRunner = v24;
        break;
      case PARTICLE_MODULE_INIT_SOUND:
        v25 = varParticleModuleInitSound;
        varParticleModuleInitSound = (ParticleModuleInitSound *)varParticleModuleTypeDef;
        Load_ParticleModuleInitSound(streamStart);
        varParticleModuleInitSound = v25;
        break;
      case PARTICLE_MODULE_INIT_SPAWN:
        v26 = varParticleModuleInitSpawn;
        varParticleModuleInitSpawn = (ParticleModuleInitSpawn *)varParticleModuleTypeDef;
        Load_ParticleModuleInitSpawn(streamStart);
        varParticleModuleInitSpawn = v26;
        break;
      case PARTICLE_MODULE_INIT_SPAWN_SHAPE_FIRST:
        v27 = varParticleModuleInitSpawnShapeBox;
        varParticleModuleInitSpawnShapeBox = (ParticleModuleInitSpawnShapeBox *)varParticleModuleTypeDef;
        Load_ParticleModuleInitSpawnShapeBox(streamStart);
        varParticleModuleInitSpawnShapeBox = v27;
        break;
      case PARTICLE_MODULE_INIT_SPAWN_SHAPE_CYLINDER:
        v28 = varParticleModuleInitSpawnShapeCylinder;
        varParticleModuleInitSpawnShapeCylinder = (ParticleModuleInitSpawnShapeCylinder *)varParticleModuleTypeDef;
        Load_ParticleModuleInitSpawnShapeCylinder(streamStart);
        varParticleModuleInitSpawnShapeCylinder = v28;
        break;
      case PARTICLE_MODULE_INIT_SPAWN_SHAPE_ELLIPSOID:
        v29 = varParticleModuleInitSpawnShapeEllipsoid;
        varParticleModuleInitSpawnShapeEllipsoid = (ParticleModuleInitSpawnShapeEllipsoid *)varParticleModuleTypeDef;
        Load_ParticleModuleInitSpawnShapeEllipsoid(streamStart);
        varParticleModuleInitSpawnShapeEllipsoid = v29;
        break;
      case PARTICLE_MODULE_INIT_SPAWN_SHAPE_MESH:
        v30 = varParticleModuleInitSpawnShapeMesh;
        varParticleModuleInitSpawnShapeMesh = (ParticleModuleInitSpawnShapeMesh *)varParticleModuleTypeDef;
        Load_ParticleModuleInitSpawnShapeMesh(streamStart);
        varParticleModuleInitSpawnShapeMesh = v30;
        break;
      case PARTICLE_MODULE_INIT_SPAWN_SHAPE_SPHERE:
        v31 = varParticleModuleInitSpawnShapeSphere;
        varParticleModuleInitSpawnShapeSphere = (ParticleModuleInitSpawnShapeSphere *)varParticleModuleTypeDef;
        Load_ParticleModuleInitSpawnShapeSphere(streamStart);
        varParticleModuleInitSpawnShapeSphere = v31;
        break;
      case PARTICLE_MODULE_INIT_TAIL:
        if ( streamStart == AtStart )
        {
          v32 = varParticleModuleInitTail;
          varParticleModuleInitTail = (ParticleModuleInitTail *)varParticleModuleTypeDef;
          Load_Stream(AtStart, varParticleModuleTypeDef, 0x10ui64);
          varParticleModuleInitTail = v32;
        }
        break;
      case PARTICLE_MODULE_INIT_VECTOR_FIELD:
        v33 = varParticleModuleInitVectorField;
        varParticleModuleInitVectorField = (ParticleModuleInitVectorField *)varParticleModuleTypeDef;
        Load_ParticleModuleInitVectorField(streamStart);
        varParticleModuleInitVectorField = v33;
        break;
      case PARTICLE_MODULE_INIT_VOLUMETRIC:
        if ( streamStart == AtStart )
        {
          v34 = varParticleModuleInitVolumetric;
          varParticleModuleInitVolumetric = (ParticleModuleInitVolumetric *)varParticleModuleTypeDef;
          Load_Stream(AtStart, varParticleModuleTypeDef, 0x20ui64);
          varParticleModuleInitVolumetric = v34;
        }
        break;
      case PARTICLE_MODULE_INIT_DISMEMBER:
        if ( streamStart == AtStart )
        {
          v35 = varParticleModuleInitDismember;
          varParticleModuleInitDismember = (ParticleModuleInitDismember *)varParticleModuleTypeDef;
          Load_Stream(AtStart, varParticleModuleTypeDef, 0x10ui64);
          varParticleModuleInitDismember = v35;
        }
        break;
      case PARTICLE_MODULE_UPDATE_BEGIN:
        if ( streamStart == AtStart )
        {
          v36 = varParticleModuleAttractor;
          varParticleModuleAttractor = (ParticleModuleAttractor *)varParticleModuleTypeDef;
          Load_Stream(AtStart, varParticleModuleTypeDef, 0x30ui64);
          varParticleModuleAttractor = v36;
        }
        break;
      case PARTICLE_MODULE_COLOR_GRAPH:
        v37 = varParticleModuleColorGraph;
        varParticleModuleColorGraph = (ParticleModuleColorGraph *)varParticleModuleTypeDef;
        Load_ParticleModuleColorGraph(streamStart);
        varParticleModuleColorGraph = v37;
        break;
      case PARTICLE_MODULE_COLOR_LERP:
        if ( streamStart == AtStart )
        {
          v38 = varParticleModuleColorLerp;
          varParticleModuleColorLerp = (ParticleModuleColorLerp *)varParticleModuleTypeDef;
          Load_Stream(AtStart, varParticleModuleTypeDef, 0x30ui64);
          varParticleModuleColorLerp = v38;
        }
        break;
      case PARTICLE_MODULE_EMISSION_GRAPH:
        v39 = varParticleModuleEmissionGraph;
        varParticleModuleEmissionGraph = (ParticleModuleEmissionGraph *)varParticleModuleTypeDef;
        Load_ParticleModuleEmissionGraph(streamStart);
        varParticleModuleEmissionGraph = v39;
        break;
      case PARTICLE_MODULE_EMISSIVE_GRAPH:
        v40 = varParticleModuleEmissiveGraph;
        varParticleModuleEmissiveGraph = (ParticleModuleEmissiveGraph *)varParticleModuleTypeDef;
        Load_ParticleModuleEmissiveGraph(streamStart);
        varParticleModuleEmissiveGraph = v40;
        break;
      case PARTICLE_MODULE_SHADER_GRAPH:
        v41 = varParticleModuleShaderGraph;
        varParticleModuleShaderGraph = (ParticleModuleShaderGraph *)varParticleModuleTypeDef;
        Load_ParticleModuleShaderGraph(streamStart);
        varParticleModuleShaderGraph = v41;
        break;
      case PARTICLE_MODULE_FORCE:
        if ( streamStart == AtStart )
        {
          v42 = varParticleModuleForce;
          varParticleModuleForce = (ParticleModuleForce *)varParticleModuleTypeDef;
          Load_Stream(AtStart, varParticleModuleTypeDef, 0x30ui64);
          varParticleModuleForce = v42;
        }
        break;
      case PARTICLE_MODULE_FORCE_DRAG_GRAPH:
        v43 = varParticleModuleForceDragGraph;
        varParticleModuleForceDragGraph = (ParticleModuleForceDragGraph *)varParticleModuleTypeDef;
        Load_ParticleModuleForceDragGraph(streamStart);
        varParticleModuleForceDragGraph = v43;
        break;
      case PARTICLE_MODULE_GRAVITY:
        if ( streamStart == AtStart )
        {
          v44 = varParticleModuleGravity;
          varParticleModuleGravity = (ParticleModuleGravity *)varParticleModuleTypeDef;
          Load_Stream(AtStart, varParticleModuleTypeDef, 0x10ui64);
          varParticleModuleGravity = v44;
        }
        break;
      case PARTICLE_MODULE_INTENSITY_GRAPH:
        v45 = varParticleModuleIntensityGraph;
        varParticleModuleIntensityGraph = (ParticleModuleIntensityGraph *)varParticleModuleTypeDef;
        Load_ParticleModuleIntensityGraph(streamStart);
        varParticleModuleIntensityGraph = v45;
        break;
      case PARTICLE_MODULE_TEMPERATURE_GRAPH:
        v46 = varParticleModuleTemperatureGraph;
        varParticleModuleTemperatureGraph = (ParticleModuleTemperatureGraph *)varParticleModuleTypeDef;
        Load_ParticleModuleTemperatureGraph(streamStart);
        varParticleModuleTemperatureGraph = v46;
        break;
      case PARTICLE_MODULE_PARENT_VELOCITY_GRAPH:
        v47 = varParticleModuleParentVelocityGraph;
        varParticleModuleParentVelocityGraph = (ParticleModuleParentVelocityGraph *)varParticleModuleTypeDef;
        Load_ParticleModuleParentVelocityGraph(streamStart);
        varParticleModuleParentVelocityGraph = v47;
        break;
      case PARTICLE_MODULE_PHYSICS_LIGHT:
        v48 = varParticleModulePhysicsLight;
        varParticleModulePhysicsLight = (ParticleModulePhysicsLight *)varParticleModuleTypeDef;
        Load_ParticleModulePhysicsLight(streamStart);
        varParticleModulePhysicsLight = v48;
        break;
      case PARTICLE_MODULE_PHYSICS_RAY_CAST:
        if ( streamStart == AtStart )
        {
          v49 = varParticleModulePhysicsRayCast;
          varParticleModulePhysicsRayCast = (ParticleModulePhysicsRayCast *)varParticleModuleTypeDef;
          Load_Stream(AtStart, varParticleModuleTypeDef, 0x30ui64);
          varParticleModulePhysicsRayCast = v49;
        }
        break;
      case PARTICLE_MODULE_POSITION_GRAPH:
        v50 = varParticleModulePositionGraph;
        varParticleModulePositionGraph = (ParticleModulePositionGraph *)varParticleModuleTypeDef;
        Load_ParticleModulePositionGraph(streamStart);
        varParticleModulePositionGraph = v50;
        break;
      case PARTICLE_MODULE_ROTATION_GRAPH:
        v51 = varParticleModuleRotationGraph;
        varParticleModuleRotationGraph = (ParticleModuleRotationGraph *)varParticleModuleTypeDef;
        Load_ParticleModuleRotationGraph(streamStart);
        varParticleModuleRotationGraph = v51;
        break;
      case PARTICLE_MODULE_ROTATION_GRAPH_3D:
        v52 = varParticleModuleRotationGraph3D;
        varParticleModuleRotationGraph3D = (ParticleModuleRotationGraph3D *)varParticleModuleTypeDef;
        Load_ParticleModuleRotationGraph3D(streamStart);
        varParticleModuleRotationGraph3D = v52;
        break;
      case PARTICLE_MODULE_SCALE_BY_DISTANCE:
        v53 = varParticleModuleScaleByDistance;
        varParticleModuleScaleByDistance = (ParticleModuleScaleByDistance *)varParticleModuleTypeDef;
        Load_ParticleModuleScaleByDistance(streamStart);
        varParticleModuleScaleByDistance = v53;
        break;
      case PARTICLE_MODULE_SIZE_GRAPH:
        v54 = varParticleModuleSizeGraph;
        varParticleModuleSizeGraph = (ParticleModuleSizeGraph *)varParticleModuleTypeDef;
        Load_ParticleModuleSizeGraph(streamStart);
        varParticleModuleSizeGraph = v54;
        break;
      case PARTICLE_MODULE_SIZE_LERP:
        if ( streamStart == AtStart )
        {
          v55 = varParticleModuleSizeLerp;
          varParticleModuleSizeLerp = (ParticleModuleSizeLerp *)varParticleModuleTypeDef;
          Load_Stream(AtStart, varParticleModuleTypeDef, 0x30ui64);
          varParticleModuleSizeLerp = v55;
        }
        break;
      case PARTICLE_MODULE_VELOCITY_GRAPH:
        v56 = varParticleModuleVelocityGraph;
        varParticleModuleVelocityGraph = (ParticleModuleVelocityGraph *)varParticleModuleTypeDef;
        Load_ParticleModuleVelocityGraph(streamStart);
        varParticleModuleVelocityGraph = v56;
        break;
      case PARTICLE_MODULE_VECTOR_FIELD_GRAPH:
        v57 = varParticleModuleVectorFieldGraph;
        varParticleModuleVectorFieldGraph = (ParticleModuleVectorFieldGraph *)varParticleModuleTypeDef;
        Load_ParticleModuleVectorFieldGraph(streamStart);
        varParticleModuleVectorFieldGraph = v57;
        break;
      case PARTICLE_MODULE_TEST_BEGIN:
        v58 = varParticleModuleTestAge;
        varParticleModuleTestAge = (ParticleModuleTestAge *)varParticleModuleTypeDef;
        Load_ParticleModuleTestAge(streamStart);
        varParticleModuleTestAge = v58;
        break;
      case PARTICLE_MODULE_TEST_BIRTH:
        v59 = varParticleModuleTestBirth;
        varParticleModuleTestBirth = (ParticleModuleTestBirth *)varParticleModuleTypeDef;
        Load_ParticleModuleTestBirth(streamStart);
        varParticleModuleTestBirth = v59;
        break;
      case PARTICLE_MODULE_TEST_DEATH:
        v60 = varParticleModuleTestDeath;
        varParticleModuleTestDeath = (ParticleModuleTestDeath *)varParticleModuleTypeDef;
        Load_ParticleModuleTestDeath(streamStart);
        varParticleModuleTestDeath = v60;
        break;
      case PARTICLE_MODULE_TEST_GRAVITY:
        v61 = varParticleModuleTestGravity;
        varParticleModuleTestGravity = (ParticleModuleTestGravity *)varParticleModuleTypeDef;
        Load_ParticleModuleTestGravity(streamStart);
        varParticleModuleTestGravity = v61;
        break;
      case PARTICLE_MODULE_TEST_IMPACT:
        v62 = varParticleModuleTestImpact;
        varParticleModuleTestImpact = (ParticleModuleTestImpact *)varParticleModuleTypeDef;
        Load_ParticleModuleTestImpact(streamStart);
        varParticleModuleTestImpact = v62;
        break;
      case PARTICLE_MODULE_TEST_POS:
        v63 = varParticleModuleTestPos;
        varParticleModuleTestPos = (ParticleModuleTestPos *)varParticleModuleTypeDef;
        Load_ParticleModuleTestPos(streamStart);
        varParticleModuleTestPos = v63;
        break;
      case PARTICLE_MODULE_TEST_TIME_IN_STATE:
        v64 = varParticleModuleTestTimeInState;
        varParticleModuleTestTimeInState = (ParticleModuleTestTimeInState *)varParticleModuleTypeDef;
        Load_ParticleModuleTestTimeInState(streamStart);
        varParticleModuleTestTimeInState = v64;
        break;
    }
  }
  else
  {
    v2 = varParticleModuleInitAtlas;
    varParticleModuleInitAtlas = (ParticleModuleInitAtlas *)varParticleModuleTypeDef;
    Load_Stream(streamStart, varParticleModuleTypeDef, 0x40ui64);
    v3 = varParticleCurveDef;
    varParticleCurveDef = varParticleModuleInitAtlas->m_curves;
    Load_ParticleCurveDefArray(NotAtStart, 2ui64);
    varParticleModuleInitAtlas = v2;
    varParticleCurveDef = v3;
  }
}

/*
==============
Load_ParticleModuleTypeDefArray
==============
*/
void Load_ParticleModuleTypeDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleTypeDef *i; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleTypeDef, 224 * count);
  for ( i = varParticleModuleTypeDef; v2; --v2 )
  {
    varParticleModuleTypeDef = i;
    Load_ParticleModuleTypeDef(NotAtStart);
    ++i;
  }
}

/*
==============
Load_ParticleModuleTypeDefStream
==============
*/
void Load_ParticleModuleTypeDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 27070, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  for ( ; count; --count )
  {
    Load_ParticleModuleTypeDef(AtStart);
    varParticleModuleTypeDef = (ParticleModuleTypeDef *)g_streamPosGlob.pos;
  }
}

/*
==============
Load_ParticleModuleTypeStream
==============
*/
void Load_ParticleModuleTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 8886, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleType;
    do
    {
      Load_Stream(AtStart, pos, 2ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleType = (ParticleModuleType *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleVectorFieldGraph
==============
*/
void Load_ParticleModuleVectorFieldGraph(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 

  Load_Stream(streamStart, varParticleModuleVectorFieldGraph, 0x30ui64);
  v1 = varParticleCurveDef;
  varParticleCurveDef = varParticleModuleVectorFieldGraph->m_curves;
  Load_ParticleCurveDefArray(NotAtStart, 2ui64);
  varParticleCurveDef = v1;
}

/*
==============
Load_ParticleModuleVectorFieldGraphArray
==============
*/
void Load_ParticleModuleVectorFieldGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleVectorFieldGraph *i; 
  ParticleCurveDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleVectorFieldGraph, 48 * count);
  for ( i = varParticleModuleVectorFieldGraph; v2; --v2 )
  {
    varParticleModuleVectorFieldGraph = i;
    Load_Stream(NotAtStart, i, 0x30ui64);
    v4 = varParticleCurveDef;
    varParticleCurveDef = varParticleModuleVectorFieldGraph->m_curves;
    Load_ParticleCurveDefArray(NotAtStart, 2ui64);
    ++i;
    varParticleCurveDef = v4;
  }
}

/*
==============
Load_ParticleModuleVectorFieldGraphStream
==============
*/
void Load_ParticleModuleVectorFieldGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 23050, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleVectorFieldGraph;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      v4 = varParticleCurveDef;
      varParticleCurveDef = varParticleModuleVectorFieldGraph->m_curves;
      Load_ParticleCurveDefArray(NotAtStart, 2ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleVectorFieldGraph = (ParticleModuleVectorFieldGraph *)g_streamPosGlob.pos;
      varParticleCurveDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleModuleVelocityGraph
==============
*/
void Load_ParticleModuleVelocityGraph(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 

  Load_Stream(streamStart, varParticleModuleVelocityGraph, 0x90ui64);
  v1 = varParticleCurveDef;
  varParticleCurveDef = varParticleModuleVelocityGraph->m_curves;
  Load_ParticleCurveDefArray(NotAtStart, 6ui64);
  varParticleCurveDef = v1;
}

/*
==============
Load_ParticleModuleVelocityGraphArray
==============
*/
void Load_ParticleModuleVelocityGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleVelocityGraph *i; 
  ParticleCurveDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleVelocityGraph, 144 * count);
  for ( i = varParticleModuleVelocityGraph; v2; --v2 )
  {
    varParticleModuleVelocityGraph = i;
    Load_Stream(NotAtStart, i, 0x90ui64);
    v4 = varParticleCurveDef;
    varParticleCurveDef = varParticleModuleVelocityGraph->m_curves;
    Load_ParticleCurveDefArray(NotAtStart, 6ui64);
    ++i;
    varParticleCurveDef = v4;
  }
}

/*
==============
Load_ParticleModuleVelocityGraphStream
==============
*/
void Load_ParticleModuleVelocityGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 22904, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleVelocityGraph;
    do
    {
      Load_Stream(AtStart, pos, 0x90ui64);
      v4 = varParticleCurveDef;
      varParticleCurveDef = varParticleModuleVelocityGraph->m_curves;
      Load_ParticleCurveDefArray(NotAtStart, 6ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleVelocityGraph = (ParticleModuleVelocityGraph *)g_streamPosGlob.pos;
      varParticleCurveDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticlePhaseOptions
==============
*/
void Load_ParticlePhaseOptions(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticlePhaseOptions, 4ui64);
}

/*
==============
Load_ParticlePhaseOptionsArray
==============
*/
void Load_ParticlePhaseOptionsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticlePhaseOptions, 4 * count);
}

/*
==============
Load_ParticlePhaseOptionsStream
==============
*/
void Load_ParticlePhaseOptionsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 28462, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticlePhaseOptions;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varParticlePhaseOptions = (ParticlePhaseOptions *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticlePhysicsFXData
==============
*/
void Load_ParticlePhysicsFXData(const DBStreamStart streamStart)
{
  PhysicsFXPipeline **v1; 
  PhysicsFXShape **v2; 

  Load_Stream(streamStart, varParticlePhysicsFXData, 0x10ui64);
  v1 = varPhysicsFXPipelinePtr;
  varPhysicsFXPipelinePtr = &varParticlePhysicsFXData->physicsFXPipeline;
  Load_PhysicsFXPipelinePtr(NotAtStart);
  varPhysicsFXPipelinePtr = v1;
  v2 = varPhysicsFXShapePtr;
  varPhysicsFXShapePtr = &varParticlePhysicsFXData->physicsFXShape;
  Load_PhysicsFXShapePtr(NotAtStart);
  varPhysicsFXShapePtr = v2;
}

/*
==============
Load_ParticlePhysicsFXDataArray
==============
*/
void Load_ParticlePhysicsFXDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticlePhysicsFXData *i; 
  PhysicsFXPipeline **v4; 
  PhysicsFXShape **v5; 

  v2 = count;
  Load_Stream(streamStart, varParticlePhysicsFXData, 16 * count);
  for ( i = varParticlePhysicsFXData; v2; --v2 )
  {
    varParticlePhysicsFXData = i;
    Load_Stream(NotAtStart, i, 0x10ui64);
    v4 = varPhysicsFXPipelinePtr;
    varPhysicsFXPipelinePtr = &varParticlePhysicsFXData->physicsFXPipeline;
    Load_PhysicsFXPipelinePtr(NotAtStart);
    varPhysicsFXPipelinePtr = v4;
    v5 = varPhysicsFXShapePtr;
    varPhysicsFXShapePtr = &varParticlePhysicsFXData->physicsFXShape;
    Load_PhysicsFXShapePtr(NotAtStart);
    ++i;
    varPhysicsFXShapePtr = v5;
  }
}

/*
==============
Load_ParticlePhysicsFXDataStream
==============
*/
void Load_ParticlePhysicsFXDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  PhysicsFXPipeline **v4; 
  PhysicsFXShape **v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 9545, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticlePhysicsFXData;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      v4 = varPhysicsFXPipelinePtr;
      varPhysicsFXPipelinePtr = &varParticlePhysicsFXData->physicsFXPipeline;
      Load_PhysicsFXPipelinePtr(NotAtStart);
      varPhysicsFXPipelinePtr = v4;
      v5 = varPhysicsFXShapePtr;
      varPhysicsFXShapePtr = &varParticlePhysicsFXData->physicsFXShape;
      Load_PhysicsFXShapePtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticlePhysicsFXData = (ParticlePhysicsFXData *)g_streamPosGlob.pos;
      varPhysicsFXShapePtr = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleRelativeVelocityType
==============
*/
void Load_ParticleRelativeVelocityType(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleRelativeVelocityType, 4ui64);
}

/*
==============
Load_ParticleRelativeVelocityTypeArray
==============
*/
void Load_ParticleRelativeVelocityTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleRelativeVelocityType, 4 * count);
}

/*
==============
Load_ParticleRelativeVelocityTypeStream
==============
*/
void Load_ParticleRelativeVelocityTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 15674, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleRelativeVelocityType;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varParticleRelativeVelocityType = (ParticleRelativeVelocityType *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleRenderOptions
==============
*/
void Load_ParticleRenderOptions(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleRenderOptions, 4ui64);
}

/*
==============
Load_ParticleRenderOptionsArray
==============
*/
void Load_ParticleRenderOptionsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleRenderOptions, 4 * count);
}

/*
==============
Load_ParticleRenderOptionsStream
==============
*/
void Load_ParticleRenderOptionsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 13863, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleRenderOptions;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varParticleRenderOptions = (ParticleRenderOptions *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleShaderGraphCurves
==============
*/
void Load_ParticleShaderGraphCurves(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleShaderGraphCurves, 4ui64);
}

/*
==============
Load_ParticleShaderGraphCurvesArray
==============
*/
void Load_ParticleShaderGraphCurvesArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleShaderGraphCurves, 4 * count);
}

/*
==============
Load_ParticleShaderGraphCurvesStream
==============
*/
void Load_ParticleShaderGraphCurvesStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 10143, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleShaderGraphCurves;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varParticleShaderGraphCurves = (ParticleShaderGraphCurves *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleShaderGraphOptions
==============
*/
void Load_ParticleShaderGraphOptions(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleShaderGraphOptions, 4ui64);
}

/*
==============
Load_ParticleShaderGraphOptionsArray
==============
*/
void Load_ParticleShaderGraphOptionsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleShaderGraphOptions, 4 * count);
}

/*
==============
Load_ParticleShaderGraphOptionsStream
==============
*/
void Load_ParticleShaderGraphOptionsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 13918, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleShaderGraphOptions;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varParticleShaderGraphOptions = (ParticleShaderGraphOptions *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleSpawnFlags
==============
*/
void Load_ParticleSpawnFlags(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleSpawnFlags, 1ui64);
}

/*
==============
Load_ParticleSpawnFlagsArray
==============
*/
void Load_ParticleSpawnFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleSpawnFlags, count);
}

/*
==============
Load_ParticleSpawnFlagsStream
==============
*/
void Load_ParticleSpawnFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 16977, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleSpawnFlags;
    do
    {
      Load_Stream(AtStart, pos, 1ui64);
      pos = g_streamPosGlob.pos;
      varParticleSpawnFlags = (ParticleSpawnFlags *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleSpawnMeshAssetDef
==============
*/
void Load_ParticleSpawnMeshAssetDef(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleSpawnMeshAssetDef, 0x10ui64);
}

/*
==============
Load_ParticleSpawnMeshAssetDefArray
==============
*/
void Load_ParticleSpawnMeshAssetDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleSpawnMeshAssetDef, 16 * count);
}

/*
==============
Load_ParticleSpawnMeshAssetDefStream
==============
*/
void Load_ParticleSpawnMeshAssetDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 18223, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleSpawnMeshAssetDef;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      pos = g_streamPosGlob.pos;
      varParticleSpawnMeshAssetDef = (ParticleSpawnMeshAssetDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleSpawnShapeType
==============
*/
void Load_ParticleSpawnShapeType(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleSpawnShapeType, 1ui64);
}

/*
==============
Load_ParticleSpawnShapeTypeArray
==============
*/
void Load_ParticleSpawnShapeTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleSpawnShapeType, count);
}

/*
==============
Load_ParticleSpawnShapeTypeStream
==============
*/
void Load_ParticleSpawnShapeTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 17032, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleSpawnShapeType;
    do
    {
      Load_Stream(AtStart, pos, 1ui64);
      pos = g_streamPosGlob.pos;
      varParticleSpawnShapeType = (ParticleSpawnShapeType *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleStateDef
==============
*/
void Load_ParticleStateDef(const DBStreamStart streamStart)
{
  ParticleStateDef *v1; 
  ParticleModuleGroupDef *v2; 
  ParticleModuleGroupDef *v3; 
  __int64 v4; 

  Load_Stream(streamStart, varParticleStateDef, 0x20ui64);
  v1 = varParticleStateDef;
  if ( varParticleStateDef->moduleGroupDefs )
  {
    v2 = varParticleModuleGroupDef;
    DB_PatchMem_FixStreamAlignment(0xFui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->moduleGroupDefs = (ParticleModuleGroupDef *)g_streamPosGlob.pos;
    varParticleModuleGroupDef = (ParticleModuleGroupDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x30ui64);
    v3 = varParticleModuleGroupDef;
    v4 = 3i64;
    do
    {
      varParticleModuleGroupDef = v3;
      Load_ParticleModuleGroupDef(NotAtStart);
      ++v3;
      --v4;
    }
    while ( v4 );
    varParticleModuleGroupDef = v2;
  }
}

/*
==============
Load_ParticleStateDefArray
==============
*/
void Load_ParticleStateDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleStateDef *i; 
  ParticleStateDef *v4; 
  ParticleModuleGroupDef *v5; 
  ParticleModuleGroupDef *v6; 
  __int64 v7; 

  v2 = count;
  Load_Stream(streamStart, varParticleStateDef, 32 * count);
  for ( i = varParticleStateDef; v2; --v2 )
  {
    varParticleStateDef = i;
    Load_Stream(NotAtStart, i, 0x20ui64);
    v4 = varParticleStateDef;
    if ( varParticleStateDef->moduleGroupDefs )
    {
      v5 = varParticleModuleGroupDef;
      DB_PatchMem_FixStreamAlignment(0xFui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->moduleGroupDefs = (ParticleModuleGroupDef *)g_streamPosGlob.pos;
      varParticleModuleGroupDef = (ParticleModuleGroupDef *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 0x30ui64);
      v6 = varParticleModuleGroupDef;
      v7 = 3i64;
      do
      {
        varParticleModuleGroupDef = v6;
        Load_ParticleModuleGroupDef(NotAtStart);
        ++v6;
        --v7;
      }
      while ( v7 );
      varParticleModuleGroupDef = v5;
    }
    ++i;
  }
}

/*
==============
Load_ParticleStateDefFlags
==============
*/
void Load_ParticleStateDefFlags(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleStateDefFlags, 8ui64);
}

/*
==============
Load_ParticleStateDefFlagsArray
==============
*/
void Load_ParticleStateDefFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleStateDefFlags, 8 * count);
}

/*
==============
Load_ParticleStateDefFlagsStream
==============
*/
void Load_ParticleStateDefFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 27373, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleStateDefFlags;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      pos = g_streamPosGlob.pos;
      varParticleStateDefFlags = g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleStateDefStream
==============
*/
void Load_ParticleStateDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleStateDef *v4; 
  ParticleModuleGroupDef *v5; 
  ParticleModuleGroupDef *v6; 
  __int64 v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 27499, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleStateDef;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      v4 = varParticleStateDef;
      if ( varParticleStateDef->moduleGroupDefs )
      {
        v5 = varParticleModuleGroupDef;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->moduleGroupDefs = (ParticleModuleGroupDef *)g_streamPosGlob.pos;
        varParticleModuleGroupDef = (ParticleModuleGroupDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x30ui64);
        v6 = varParticleModuleGroupDef;
        v7 = 3i64;
        do
        {
          varParticleModuleGroupDef = v6;
          Load_ParticleModuleGroupDef(NotAtStart);
          ++v6;
          --v7;
        }
        while ( v7 );
        varParticleModuleGroupDef = v5;
      }
      pos = g_streamPosGlob.pos;
      varParticleStateDef = (ParticleStateDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleSystemDef
==============
*/
void Load_ParticleSystemDef(const DBStreamStart streamStart)
{
  const char **v2; 
  ParticleSystemDef *v3; 
  ParticleEmitterDef *v4; 
  __int64 numEmitters; 
  ParticleEmitterDef *i; 
  ParticleScriptedInputNodeDef *v7; 
  ParticleScriptedInputNodeDef *ParticleScriptedInputNodeDef; 

  DB_PatchMem_PushAsset(40, varParticleSystemDef);
  Load_Stream(streamStart, varParticleSystemDef, 0x80ui64);
  DB_PushStreamPos(8u);
  v2 = varXString;
  varXString = &varParticleSystemDef->name;
  Load_XString(NotAtStart);
  v3 = varParticleSystemDef;
  varXString = v2;
  if ( varParticleSystemDef->emitterDefs )
  {
    v4 = varParticleEmitterDef;
    DB_PatchMem_FixStreamAlignment(0xFui64);
    DB_CheckCanIncStreamPos(0i64);
    v3->emitterDefs = (ParticleEmitterDef *)g_streamPosGlob.pos;
    varParticleEmitterDef = (ParticleEmitterDef *)g_streamPosGlob.pos;
    numEmitters = varParticleSystemDef->numEmitters;
    Load_Stream(AtStart, g_streamPosGlob.pos, 160 * numEmitters);
    for ( i = varParticleEmitterDef; numEmitters; --numEmitters )
    {
      varParticleEmitterDef = i;
      Load_ParticleEmitterDef(NotAtStart);
      ++i;
    }
    v3 = varParticleSystemDef;
    varParticleEmitterDef = v4;
  }
  if ( v3->scriptedInputNodeDefs )
  {
    v7 = varParticleScriptedInputNodeDef;
    ParticleScriptedInputNodeDef = AllocLoad_ParticleScriptedInputNodeDef();
    v3->scriptedInputNodeDefs = ParticleScriptedInputNodeDef;
    varParticleScriptedInputNodeDef = ParticleScriptedInputNodeDef;
    Load_ParticleScriptedInputNodeDefArray(AtStart, varParticleSystemDef->numScriptedInputNodes);
    varParticleScriptedInputNodeDef = v7;
  }
  DB_PopStreamPos();
  DB_PatchMem_PopAsset();
}

/*
==============
Load_ParticleSystemDefArray
==============
*/
void Load_ParticleSystemDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleSystemDef *i; 
  const char **v4; 
  ParticleSystemDef *v5; 
  ParticleEmitterDef *v6; 
  __int64 numEmitters; 
  ParticleEmitterDef *j; 
  ParticleScriptedInputNodeDef *v9; 
  ParticleScriptedInputNodeDef *ParticleScriptedInputNodeDef; 

  v2 = count;
  Load_Stream(streamStart, varParticleSystemDef, count << 7);
  for ( i = varParticleSystemDef; v2; --v2 )
  {
    varParticleSystemDef = i;
    DB_PatchMem_PushAsset(40, i);
    Load_Stream(NotAtStart, varParticleSystemDef, 0x80ui64);
    DB_PushStreamPos(8u);
    v4 = varXString;
    varXString = &varParticleSystemDef->name;
    Load_XString(NotAtStart);
    v5 = varParticleSystemDef;
    varXString = v4;
    if ( varParticleSystemDef->emitterDefs )
    {
      v6 = varParticleEmitterDef;
      DB_PatchMem_FixStreamAlignment(0xFui64);
      DB_CheckCanIncStreamPos(0i64);
      v5->emitterDefs = (ParticleEmitterDef *)g_streamPosGlob.pos;
      varParticleEmitterDef = (ParticleEmitterDef *)g_streamPosGlob.pos;
      numEmitters = varParticleSystemDef->numEmitters;
      Load_Stream(AtStart, g_streamPosGlob.pos, 160 * numEmitters);
      for ( j = varParticleEmitterDef; numEmitters; --numEmitters )
      {
        varParticleEmitterDef = j;
        Load_ParticleEmitterDef(NotAtStart);
        ++j;
      }
      v5 = varParticleSystemDef;
      varParticleEmitterDef = v6;
    }
    if ( v5->scriptedInputNodeDefs )
    {
      v9 = varParticleScriptedInputNodeDef;
      ParticleScriptedInputNodeDef = AllocLoad_ParticleScriptedInputNodeDef();
      v5->scriptedInputNodeDefs = ParticleScriptedInputNodeDef;
      varParticleScriptedInputNodeDef = ParticleScriptedInputNodeDef;
      Load_ParticleScriptedInputNodeDefArray(AtStart, varParticleSystemDef->numScriptedInputNodes);
      varParticleScriptedInputNodeDef = v9;
    }
    DB_PopStreamPos();
    DB_PatchMem_PopAsset();
    ++i;
  }
}

/*
==============
Load_ParticleSystemDefFlags
==============
*/
void Load_ParticleSystemDefFlags(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleSystemDefFlags, 4ui64);
}

/*
==============
Load_ParticleSystemDefFlagsArray
==============
*/
void Load_ParticleSystemDefFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleSystemDefFlags, 4 * count);
}

/*
==============
Load_ParticleSystemDefFlagsStream
==============
*/
void Load_ParticleSystemDefFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 28407, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleSystemDefFlags;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varParticleSystemDefFlags = (unsigned int *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleSystemDefPtr
==============
*/
void Load_ParticleSystemDefPtr(const DBStreamStart streamStart)
{
  ParticleSystemDef **v1; 
  __int64 v2; 
  ParticleSystemDef *v3; 
  unsigned __int8 *inserted; 

  Load_Stream(streamStart, varParticleSystemDefPtr, 8ui64);
  DB_PushStreamPos(1u);
  v1 = (ParticleSystemDef **)varParticleSystemDefPtr;
  v2 = (__int64)*varParticleSystemDefPtr;
  if ( *varParticleSystemDefPtr )
  {
    if ( v2 == -1 )
    {
      DB_PushSharedData();
    }
    else if ( v2 != -2 && v2 != -3 )
    {
      DB_ConvertOffsetToAlias((unsigned __int64 *)varParticleSystemDefPtr);
      goto LABEL_6;
    }
    v3 = varParticleSystemDef;
    DB_PatchMem_FixStreamAlignment(0xFui64);
    DB_CheckCanIncStreamPos(0i64);
    inserted = NULL;
    *v1 = (ParticleSystemDef *)g_streamPosGlob.pos;
    varParticleSystemDef = (ParticleSystemDef *)g_streamPosGlob.pos;
    if ( v2 == -3 )
      inserted = DB_InsertPointer();
    Load_ParticleSystemDef(AtStart);
    Load_ParticleSystemDefAsset(v1);
    varParticleSystemDef = v3;
    if ( inserted )
      *(_QWORD *)inserted = *v1;
    if ( v2 == -1 )
      DB_PopSharedData();
  }
LABEL_6:
  DB_PopStreamPos();
}

/*
==============
Load_ParticleSystemDefPtrArray
==============
*/
void Load_ParticleSystemDefPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  const ParticleSystemDef **i; 
  ParticleSystemDef **v4; 
  __int64 v5; 
  ParticleSystemDef *v6; 
  unsigned __int8 *inserted; 

  v2 = count;
  Load_Stream(streamStart, varParticleSystemDefPtr, 8 * count);
  for ( i = varParticleSystemDefPtr; v2; --v2 )
  {
    varParticleSystemDefPtr = i;
    Load_Stream(NotAtStart, i, 8ui64);
    DB_PushStreamPos(1u);
    v4 = (ParticleSystemDef **)varParticleSystemDefPtr;
    v5 = (__int64)*varParticleSystemDefPtr;
    if ( *varParticleSystemDefPtr )
    {
      if ( v5 == -1 )
      {
        DB_PushSharedData();
LABEL_8:
        v6 = varParticleSystemDef;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        inserted = NULL;
        *v4 = (ParticleSystemDef *)g_streamPosGlob.pos;
        varParticleSystemDef = (ParticleSystemDef *)g_streamPosGlob.pos;
        if ( v5 == -3 )
          inserted = DB_InsertPointer();
        Load_ParticleSystemDef(AtStart);
        Load_ParticleSystemDefAsset(v4);
        varParticleSystemDef = v6;
        if ( inserted )
          *(_QWORD *)inserted = *v4;
        if ( v5 == -1 )
          DB_PopSharedData();
        goto LABEL_14;
      }
      if ( v5 == -2 || v5 == -3 )
        goto LABEL_8;
      DB_ConvertOffsetToAlias((unsigned __int64 *)varParticleSystemDefPtr);
    }
LABEL_14:
    DB_PopStreamPos();
    ++i;
  }
}

/*
==============
Load_ParticleSystemDefPtrStream
==============
*/
void Load_ParticleSystemDefPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleSystemDef **v4; 
  __int64 v5; 
  ParticleSystemDef *v6; 
  unsigned __int8 *inserted; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 29045, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleSystemDefPtr;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      DB_PushStreamPos(1u);
      v4 = (ParticleSystemDef **)varParticleSystemDefPtr;
      v5 = (__int64)*varParticleSystemDefPtr;
      if ( *varParticleSystemDefPtr )
      {
        if ( v5 == -1 )
        {
          DB_PushSharedData();
LABEL_12:
          v6 = varParticleSystemDef;
          DB_PatchMem_FixStreamAlignment(0xFui64);
          DB_CheckCanIncStreamPos(0i64);
          inserted = NULL;
          *v4 = (ParticleSystemDef *)g_streamPosGlob.pos;
          varParticleSystemDef = (ParticleSystemDef *)g_streamPosGlob.pos;
          if ( v5 == -3 )
            inserted = DB_InsertPointer();
          Load_ParticleSystemDef(AtStart);
          Load_ParticleSystemDefAsset(v4);
          varParticleSystemDef = v6;
          if ( inserted )
            *(_QWORD *)inserted = *v4;
          if ( v5 == -1 )
            DB_PopSharedData();
          goto LABEL_18;
        }
        if ( v5 == -2 || v5 == -3 )
          goto LABEL_12;
        DB_ConvertOffsetToAlias((unsigned __int64 *)varParticleSystemDefPtr);
      }
LABEL_18:
      DB_PopStreamPos();
      pos = g_streamPosGlob.pos;
      varParticleSystemDefPtr = (const ParticleSystemDef **)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleSystemDefRef
==============
*/
void Load_ParticleSystemDefRef(const DBStreamStart streamStart)
{
  ParticleSystemDefRef *v1; 
  const char **v2; 

  Load_Stream(streamStart, varParticleSystemDefRef, 8ui64);
  v1 = varParticleSystemDefRef;
  v2 = varXString;
  varXString = (const char **)varParticleSystemDefRef;
  Load_XString(NotAtStart);
  Load_ParticleSystemDefFromName((const char **)v1);
  varXString = v2;
}

/*
==============
Load_ParticleSystemDefRefArray
==============
*/
void Load_ParticleSystemDefRefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleSystemDefRef *i; 
  ParticleSystemDefRef *v4; 
  const char **v5; 

  v2 = count;
  Load_Stream(streamStart, varParticleSystemDefRef, 8 * count);
  for ( i = varParticleSystemDefRef; v2; --v2 )
  {
    varParticleSystemDefRef = i;
    Load_Stream(NotAtStart, i, 8ui64);
    v4 = varParticleSystemDefRef;
    v5 = varXString;
    varXString = (const char **)varParticleSystemDefRef;
    Load_XString(NotAtStart);
    Load_ParticleSystemDefFromName((const char **)v4);
    ++i;
    varXString = v5;
  }
}

/*
==============
Load_ParticleSystemDefRefStream
==============
*/
void Load_ParticleSystemDefRefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleSystemDefRef *v4; 
  const char **v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 29121, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleSystemDefRef;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      v4 = varParticleSystemDefRef;
      v5 = varXString;
      varXString = (const char **)varParticleSystemDefRef;
      Load_XString(NotAtStart);
      Load_ParticleSystemDefFromName((const char **)v4);
      pos = g_streamPosGlob.pos;
      varParticleSystemDefRef = (ParticleSystemDefRef *)g_streamPosGlob.pos;
      varXString = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleSystemDefStream
==============
*/
void Load_ParticleSystemDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  const char **v4; 
  ParticleSystemDef *v5; 
  ParticleEmitterDef *v6; 
  __int64 numEmitters; 
  ParticleEmitterDef *i; 
  ParticleScriptedInputNodeDef *v9; 
  ParticleScriptedInputNodeDef *ParticleScriptedInputNodeDef; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 28921, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleSystemDef;
    do
    {
      DB_PatchMem_PushAsset(40, pos);
      Load_Stream(AtStart, varParticleSystemDef, 0x80ui64);
      DB_PushStreamPos(8u);
      v4 = varXString;
      varXString = &varParticleSystemDef->name;
      Load_XString(NotAtStart);
      v5 = varParticleSystemDef;
      varXString = v4;
      if ( varParticleSystemDef->emitterDefs )
      {
        v6 = varParticleEmitterDef;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        v5->emitterDefs = (ParticleEmitterDef *)g_streamPosGlob.pos;
        varParticleEmitterDef = (ParticleEmitterDef *)g_streamPosGlob.pos;
        numEmitters = varParticleSystemDef->numEmitters;
        Load_Stream(AtStart, g_streamPosGlob.pos, 160 * numEmitters);
        for ( i = varParticleEmitterDef; numEmitters; --numEmitters )
        {
          varParticleEmitterDef = i;
          Load_ParticleEmitterDef(NotAtStart);
          ++i;
        }
        v5 = varParticleSystemDef;
        varParticleEmitterDef = v6;
      }
      if ( v5->scriptedInputNodeDefs )
      {
        v9 = varParticleScriptedInputNodeDef;
        ParticleScriptedInputNodeDef = AllocLoad_ParticleScriptedInputNodeDef();
        v5->scriptedInputNodeDefs = ParticleScriptedInputNodeDef;
        varParticleScriptedInputNodeDef = ParticleScriptedInputNodeDef;
        Load_ParticleScriptedInputNodeDefArray(AtStart, varParticleSystemDef->numScriptedInputNodes);
        varParticleScriptedInputNodeDef = v9;
      }
      DB_PopStreamPos();
      DB_PatchMem_PopAsset();
      pos = g_streamPosGlob.pos;
      varParticleSystemDef = (ParticleSystemDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleUseOrientationOptions
==============
*/
void Load_ParticleUseOrientationOptions(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleUseOrientationOptions, 1ui64);
}

/*
==============
Load_ParticleUseOrientationOptionsArray
==============
*/
void Load_ParticleUseOrientationOptionsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleUseOrientationOptions, count);
}

/*
==============
Load_ParticleUseOrientationOptionsStream
==============
*/
void Load_ParticleUseOrientationOptionsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 16213, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleUseOrientationOptions;
    do
    {
      Load_Stream(AtStart, pos, 1ui64);
      pos = g_streamPosGlob.pos;
      varParticleUseOrientationOptions = (ParticleUseOrientationOptions *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleUseScaleOptions
==============
*/
void Load_ParticleUseScaleOptions(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleUseScaleOptions, 1ui64);
}

/*
==============
Load_ParticleUseScaleOptionsArray
==============
*/
void Load_ParticleUseScaleOptionsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleUseScaleOptions, count);
}

/*
==============
Load_ParticleUseScaleOptionsStream
==============
*/
void Load_ParticleUseScaleOptionsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 16268, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleUseScaleOptions;
    do
    {
      Load_Stream(AtStart, pos, 1ui64);
      pos = g_streamPosGlob.pos;
      varParticleUseScaleOptions = (ParticleUseScaleOptions *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ParticleUseVelocityOptions
==============
*/
void Load_ParticleUseVelocityOptions(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleUseVelocityOptions, 1ui64);
}

/*
==============
Load_ParticleUseVelocityOptionsArray
==============
*/
void Load_ParticleUseVelocityOptionsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleUseVelocityOptions, count);
}

/*
==============
Load_ParticleUseVelocityOptionsStream
==============
*/
void Load_ParticleUseVelocityOptionsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 16323, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleUseVelocityOptions;
    do
    {
      Load_Stream(AtStart, pos, 1ui64);
      pos = g_streamPosGlob.pos;
      varParticleUseVelocityOptions = (ParticleUseVelocityOptions *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_Particle_MaterialData
==============
*/
void Load_Particle_MaterialData(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticle_MaterialData, 0xC0ui64);
}

/*
==============
Load_Particle_MaterialDataArray
==============
*/
void Load_Particle_MaterialDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticle_MaterialData, 192 * count);
}

/*
==============
Load_Particle_MaterialDataStream
==============
*/
void Load_Particle_MaterialDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 14427, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticle_MaterialData;
    do
    {
      Load_Stream(AtStart, pos, 0xC0ui64);
      pos = g_streamPosGlob.pos;
      varParticle_MaterialData = (Particle_MaterialData *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ProcessStructLayout_FxMarkProjectionAxis
==============
*/
void Load_ProcessStructLayout_FxMarkProjectionAxis(void)
{
  Load_RegisterStructSize("FxMarkProjectionAxis", 0x5A128AE5u, 1ui64, 1ui64);
}

/*
==============
Load_ProcessStructLayout_ParticleCurveControlPointDef
==============
*/
void Load_ProcessStructLayout_ParticleCurveControlPointDef(void)
{
  if ( Load_RegisterStructSize("ParticleCurveControlPointDef", 0x654D59B5u, 0x10ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleCurveControlPointDef", 0x654D59B5u, "float", 0x9B987AFE, "time", 0xCA65EA03, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleCurveControlPointDef", 0x654D59B5u, "float", 0x9B987AFE, (const char *)&stru_143CE7590, 0x2A599D4Bu, 4ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleCurveControlPointDef", 0x654D59B5u, "float", 0x9B987AFE, "invTimeDelta", 0xDFE0FCFC, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleCurveDef
==============
*/
void Load_ProcessStructLayout_ParticleCurveDef(void)
{
  if ( Load_RegisterStructSize("ParticleCurveDef", 0x1150D52Cu, 0x10ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleCurveDef", 0x1150D52Cu, "ParticleCurveControlPointDef", 0x654D59B5u, "controlPoints", 0x23264662u, 0i64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("ParticleCurveControlPointDef", 0x654D59B5u, 0x10ui64, 0x10ui64) )
    {
      Load_RegisterStructMemberSize("ParticleCurveControlPointDef", 0x654D59B5u, "float", 0x9B987AFE, "time", 0xCA65EA03, 0i64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_float();
      Load_RegisterStructMemberSize("ParticleCurveControlPointDef", 0x654D59B5u, "float", 0x9B987AFE, (const char *)&stru_143CE7590, 0x2A599D4Bu, 4ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_float();
      Load_RegisterStructMemberSize("ParticleCurveControlPointDef", 0x654D59B5u, "float", 0x9B987AFE, "invTimeDelta", 0xDFE0FCFC, 8ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_float();
    }
    Load_RegisterStructMemberSize("ParticleCurveDef", 0x1150D52Cu, "int", 0x7103F94Bu, "numControlPoints", 0x94AE02E2, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("ParticleCurveDef", 0x1150D52Cu, "float", 0x9B987AFE, "scale", 0x52FD90B6u, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleDataFlags
==============
*/
void Load_ProcessStructLayout_ParticleDataFlags(void)
{
  Load_RegisterStructSize("ParticleDataFlags", 0xCA9E2C87, 4ui64, 4ui64);
}

/*
==============
Load_ProcessStructLayout_ParticleElementType
==============
*/
void Load_ProcessStructLayout_ParticleElementType(void)
{
  Load_RegisterStructSize("ParticleElementType", 0xBEFAFC56, 4ui64, 4ui64);
}

/*
==============
Load_ProcessStructLayout_ParticleEmissiveCurves
==============
*/
void Load_ProcessStructLayout_ParticleEmissiveCurves(void)
{
  Load_RegisterStructSize("ParticleEmissiveCurves", 0x980E2ACF, 4ui64, 4ui64);
}

/*
==============
Load_ProcessStructLayout_ParticleEmissiveVersionCurves
==============
*/
void Load_ProcessStructLayout_ParticleEmissiveVersionCurves(void)
{
  Load_RegisterStructSize("ParticleEmissiveVersionCurves", 0x2345FDADu, 4ui64, 4ui64);
}

/*
==============
Load_ProcessStructLayout_ParticleEmitterDef
==============
*/
void Load_ProcessStructLayout_ParticleEmitterDef(void)
{
  if ( Load_RegisterStructSize("ParticleEmitterDef", 0x10F5E3E5u, 0xA0ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleEmitterDef", 0x10F5E3E5u, "ParticleStateDef", 0x966E173A, "stateDefs", 0x5BF3E0EFu, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ParticleStateDef();
    Load_RegisterStructMemberSize("ParticleEmitterDef", 0x10F5E3E5u, "int", 0x7103F94Bu, "numStates", 0x42810CE6u, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("ParticleEmitterDef", 0x10F5E3E5u, "ParticleFloatRange", 0x7CB512AFu, "particleSpawnRate", 0xBDE5E7E1, 0xCui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleFloatRange();
    Load_RegisterStructMemberSize("ParticleEmitterDef", 0x10F5E3E5u, "ParticleFloatRange", 0x7CB512AFu, "particleLife", 0x705B5B30u, 0x14ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleFloatRange();
    Load_RegisterStructMemberSize("ParticleEmitterDef", 0x10F5E3E5u, "ParticleFloatRange", 0x7CB512AFu, "particleDelay", 0x2D6B87EFu, 0x1Cui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleFloatRange();
    Load_RegisterStructMemberSize("ParticleEmitterDef", 0x10F5E3E5u, "uint", 0x53A932A0u, "particleCountMax", 0xEDD1E057, 0x24ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ParticleEmitterDef", 0x10F5E3E5u, "ParticleIntRange", 0xBA4A3768, "particleBurstCount", 0xDEF46C55, 0x28ui64, 8ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ParticleIntRange", 0xBA4A3768, 8ui64, 4ui64) )
    {
      Load_RegisterStructMemberSize("ParticleIntRange", 0xBA4A3768, "int", 0x7103F94Bu, "min", 0x960EC0B4, 0i64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_int();
      Load_RegisterStructMemberSize("ParticleIntRange", 0xBA4A3768, "int", 0x7103F94Bu, "max", 0x8E0EB43A, 4ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_int();
    }
    Load_RegisterStructMemberSize("ParticleEmitterDef", 0x10F5E3E5u, "ParticleFloatRange", 0x7CB512AFu, "emitterLife", 0x8A13DE44, 0x30ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleFloatRange();
    Load_RegisterStructMemberSize("ParticleEmitterDef", 0x10F5E3E5u, "ParticleFloatRange", 0x7CB512AFu, "emitterDelay", 0x7FFB863Bu, 0x38ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleFloatRange();
    Load_RegisterStructMemberSize("ParticleEmitterDef", 0x10F5E3E5u, "int", 0x7103F94Bu, "randomSeed", 0x669571DEu, 0x40ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("ParticleEmitterDef", 0x10F5E3E5u, "ParticleFloatRange", 0x7CB512AFu, "spawnRangeSq", 0x3F30B124u, 0x44ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleFloatRange();
    Load_RegisterStructMemberSize("ParticleEmitterDef", 0x10F5E3E5u, "float", 0x9B987AFE, "fadeOutMaxDistance", 0x37CE5B2Du, 0x4Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleEmitterDef", 0x10F5E3E5u, "ParticleCurveDef", 0x1150D52Cu, "fadeCurveDef", 0x7BC356C0u, 0x50ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleCurveDef();
    Load_RegisterStructMemberSize("ParticleEmitterDef", 0x10F5E3E5u, "float", 0x9B987AFE, "spawnFrustumCullRadius", 0x52438EEBu, 0x60ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleEmitterDef", 0x10F5E3E5u, "ParticleEmitterDefFlags", 0x93157DF2, "flags", 0x85A76201, 0x64ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleEmitterDefFlags", 0x93157DF2, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleEmitterDef", 0x10F5E3E5u, "ParticleGravityOptions", 0xCBF3E55A, "gravityOptions", 0xEEEB9410, 0x68ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleGravityOptions", 0xCBF3E55A, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleEmitterDef", 0x10F5E3E5u, "ParticleGroupID", 0xE9138188, "groupIDs", 0x85B570DD, 0x6Cui64, 0x10ui64, 4ui64, 0, 0);
    Load_ProcessStructLayout_ParticleGroupID();
    Load_RegisterStructMemberSize("ParticleEmitterDef", 0x10F5E3E5u, "ParticleFloatRange", 0x7CB512AFu, "emitByDistanceDensity", 0xED4F64F1, 0x7Cui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleFloatRange();
    Load_RegisterStructMemberSize("ParticleEmitterDef", 0x10F5E3E5u, "uint", 0x53A932A0u, "instancePool", 0x1152D5A3u, 0x84ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ParticleEmitterDef", 0x10F5E3E5u, "uint", 0x53A932A0u, "soloInstanceMax", 0x6FAD948Eu, 0x88ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ParticleEmitterDef", 0x10F5E3E5u, "ParticleInstancePoolAction", 0xAD8165EB, "instanceAction", 0x3FD0CB03u, 0x8Cui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleInstancePoolAction", 0xAD8165EB, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleEmitterDef", 0x10F5E3E5u, "ParticleDataFlags", 0xCA9E2C87, "m_dataFlags", 0x6E83F221u, 0x90ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleDataFlags", 0xCA9E2C87, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleEmitterDef", 0x10F5E3E5u, "ParticleFloatRange", 0x7CB512AFu, "particleSpawnShapeRange", 0x3EA189A5u, 0x94ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleFloatRange();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleEmitterDefFlags
==============
*/
void Load_ProcessStructLayout_ParticleEmitterDefFlags(void)
{
  Load_RegisterStructSize("ParticleEmitterDefFlags", 0x93157DF2, 4ui64, 4ui64);
}

/*
==============
Load_ProcessStructLayout_ParticleFloatRange
==============
*/
void Load_ProcessStructLayout_ParticleFloatRange(void)
{
  if ( Load_RegisterStructSize("ParticleFloatRange", 0x7CB512AFu, 8ui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("ParticleFloatRange", 0x7CB512AFu, "float", 0x9B987AFE, "min", 0x960EC0B4, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleFloatRange", 0x7CB512AFu, "float", 0x9B987AFE, "max", 0x8E0EB43A, 4ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleGravityOptions
==============
*/
void Load_ProcessStructLayout_ParticleGravityOptions(void)
{
  Load_RegisterStructSize("ParticleGravityOptions", 0xCBF3E55A, 4ui64, 4ui64);
}

/*
==============
Load_ProcessStructLayout_ParticleGravityState
==============
*/
void Load_ProcessStructLayout_ParticleGravityState(void)
{
  Load_RegisterStructSize("ParticleGravityState", 0x5E85D1E7u, 4ui64, 4ui64);
}

/*
==============
Load_ProcessStructLayout_ParticleGroupID
==============
*/
void Load_ProcessStructLayout_ParticleGroupID(void)
{
  if ( Load_RegisterStructSize("ParticleGroupID", 0xE9138188, 4ui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("ParticleGroupID", 0xE9138188, "ParticleStringHash", 0x69F92001u, (const char *)&queryFormat.fmt + 3, 0, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleStringHash();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleImpactDirection
==============
*/
void Load_ProcessStructLayout_ParticleImpactDirection(void)
{
  Load_RegisterStructSize("ParticleImpactDirection", 0x9697BE8B, 4ui64, 4ui64);
}

/*
==============
Load_ProcessStructLayout_ParticleInstancePoolAction
==============
*/
void Load_ProcessStructLayout_ParticleInstancePoolAction(void)
{
  Load_RegisterStructSize("ParticleInstancePoolAction", 0xAD8165EB, 4ui64, 4ui64);
}

/*
==============
Load_ProcessStructLayout_ParticleInstancePoolType
==============
*/
void Load_ProcessStructLayout_ParticleInstancePoolType(void)
{
  Load_RegisterStructSize("ParticleInstancePoolType", 0xE5F6CAB9, 4ui64, 4ui64);
}

/*
==============
Load_ProcessStructLayout_ParticleIntRange
==============
*/
void Load_ProcessStructLayout_ParticleIntRange(void)
{
  if ( Load_RegisterStructSize("ParticleIntRange", 0xBA4A3768, 8ui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("ParticleIntRange", 0xBA4A3768, "int", 0x7103F94Bu, "min", 0x960EC0B4, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("ParticleIntRange", 0xBA4A3768, "int", 0x7103F94Bu, "max", 0x8E0EB43A, 4ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleLinkedAssetDef
==============
*/
void Load_ProcessStructLayout_ParticleLinkedAssetDef(void)
{
  if ( Load_RegisterStructSize("ParticleLinkedAssetDef", 0x2E81254u, 0x20ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ParticleLinkedAssetDef", 0x2E81254u, "MaterialHandle", 0x2FCF718Du, "material", 0xB1102FC3, 0i64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_MaterialHandle();
    Load_RegisterStructMemberSize("ParticleLinkedAssetDef", 0x2E81254u, "XModelPtr", 0xC52046E3, "model", 0xEC5C307F, 0i64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XModelPtr();
    Load_RegisterStructMemberSize("ParticleLinkedAssetDef", 0x2E81254u, "ParticlePhysicsFXData", 0x99CF365F, "physicsFXData", 0x6515B0D5u, 0i64, 0x10ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ParticlePhysicsFXData", 0x99CF365F, 0x10ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("ParticlePhysicsFXData", 0x99CF365F, "PhysicsFXPipelinePtr", 0x1121F267u, "physicsFXPipeline", 0x95F30EBB, 0i64, 8ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_PhysicsFXPipelinePtr();
      Load_RegisterStructMemberSize("ParticlePhysicsFXData", 0x99CF365F, "PhysicsFXShapePtr", 0x3DBCC72Eu, "physicsFXShape", 0xD8623590, 8ui64, 8ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_PhysicsFXShapePtr();
    }
    Load_RegisterStructMemberSize("ParticleLinkedAssetDef", 0x2E81254u, "FxParticleSimAnimationPtr", 0x3E91D29u, "particleSim", 0x8C3E8C0B, 0i64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_FxParticleSimAnimationPtr();
    Load_RegisterStructMemberSize("ParticleLinkedAssetDef", 0x2E81254u, "ParticleMarkVisuals", 0x209C0B7Cu, "decal", 0x2D58F9D7u, 0i64, 0x18ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ParticleMarkVisuals", 0x209C0B7Cu, 0x18ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("ParticleMarkVisuals", 0x209C0B7Cu, "MaterialHandle", 0x2FCF718Du, "materials", 0x7F7B2F8Au, 0i64, 0x18ui64, 3ui64, 0, 0);
      Load_ProcessStructLayout_MaterialHandle();
    }
    Load_RegisterStructMemberSize("ParticleLinkedAssetDef", 0x2E81254u, "XString", 0x6231894Bu, "sound", 0xA28257F5, 0i64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("ParticleLinkedAssetDef", 0x2E81254u, "VectorFieldPtr", 0x8AC0F217, "vectorField", 0x9DEF342B, 0i64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_VectorFieldPtr();
    Load_RegisterStructMemberSize("ParticleLinkedAssetDef", 0x2E81254u, "GfxLightDefPtr", 0x76480D5Au, "lightDef", 0x727C19A9u, 0i64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxLightDefPtr();
    Load_RegisterStructMemberSize("ParticleLinkedAssetDef", 0x2E81254u, "ParticleSystemDefPtr", 0xDFEF4884, "particleSystem", 0xBFF813B1, 0i64, 8ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ParticleSystemDefPtr", 0xDFEF4884, 8ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("ParticleSystemDefPtr", 0xDFEF4884, "ParticleSystemDef", 0x124E8406u, (const char *)&queryFormat.fmt + 3, 0, 0i64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_ParticleSystemDef();
    }
  }
}

/*
==============
Load_ProcessStructLayout_ParticleLinkedAssetListDef
==============
*/
void Load_ProcessStructLayout_ParticleLinkedAssetListDef(void)
{
  if ( Load_RegisterStructSize("ParticleLinkedAssetListDef", 0x50DDFCB8u, 0x10ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ParticleLinkedAssetListDef", 0x50DDFCB8u, "ParticleLinkedAssetDef", 0x2E81254u, "assetList", 0xA4BA04E8, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ParticleLinkedAssetDef();
    Load_RegisterStructMemberSize("ParticleLinkedAssetListDef", 0x50DDFCB8u, "int", 0x7103F94Bu, "numAssets", 0x341BDA63u, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleMarkVisuals
==============
*/
void Load_ProcessStructLayout_ParticleMarkVisuals(void)
{
  if ( Load_RegisterStructSize("ParticleMarkVisuals", 0x209C0B7Cu, 0x18ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ParticleMarkVisuals", 0x209C0B7Cu, "MaterialHandle", 0x2FCF718Du, "materials", 0x7F7B2F8Au, 0i64, 0x18ui64, 3ui64, 0, 0);
    Load_ProcessStructLayout_MaterialHandle();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleMirrorTextureType
==============
*/
void Load_ProcessStructLayout_ParticleMirrorTextureType(void)
{
  Load_RegisterStructSize("ParticleMirrorTextureType", 0xBE8E742C, 4ui64, 4ui64);
}

/*
==============
Load_ProcessStructLayout_ParticleModifier
==============
*/
void Load_ProcessStructLayout_ParticleModifier(void)
{
  if ( Load_RegisterStructSize("ParticleModifier", 0x323527EDu, 0x20ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModifier", 0x323527EDu, "float4", 0xEF099DEE, "min", 0x960EC0B4, 0i64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
    Load_RegisterStructMemberSize("ParticleModifier", 0x323527EDu, "float4", 0xEF099DEE, "max", 0x8E0EB43A, 0x10ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleAttractor
==============
*/
void Load_ProcessStructLayout_ParticleModuleAttractor(void)
{
  if ( Load_RegisterStructSize("ParticleModuleAttractor", 0x751C157Eu, 0x30ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleAttractor", 0x751C157Eu, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleAttractor", 0x751C157Eu, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleAttractor", 0x751C157Eu, "bool", 0x1F095080u, "m_killWhenNear", 0xDA6A7816, 0x14ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ParticleModuleAttractor", 0x751C157Eu, "float", 0x9B987AFE, "m_forceMag", 0x687B794Eu, 0x18ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleAttractor", 0x751C157Eu, "float", 0x9B987AFE, "m_nearDistanceSq", 0x7B5F5C87u, 0x1Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleAttractor", 0x751C157Eu, "float4", 0xEF099DEE, "m_attractPoint", 0x5092F217u, 0x20ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleAxesFlags
==============
*/
void Load_ProcessStructLayout_ParticleModuleAxesFlags(void)
{
  Load_RegisterStructSize("ParticleModuleAxesFlags", 0x7DD89CE2u, 1ui64, 1ui64);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleAxis
==============
*/
void Load_ProcessStructLayout_ParticleModuleAxis(void)
{
  Load_RegisterStructSize("ParticleModuleAxis", 0x2D80E979u, 1ui64, 1ui64);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleColorGraph
==============
*/
void Load_ProcessStructLayout_ParticleModuleColorGraph(void)
{
  if ( Load_RegisterStructSize("ParticleModuleColorGraph", 0xE90EE0C9, 0x90ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleColorGraph", 0xE90EE0C9, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleColorGraph", 0xE90EE0C9, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleColorGraph", 0xE90EE0C9, "bool", 0x1F095080u, "firstCurve", 0x841AFCFB, 8ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ParticleModuleColorGraph", 0xE90EE0C9, "bool", 0x1F095080u, "m_modulateColorByAlpha", 0x7F40803Bu, 0xCui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ParticleModuleColorGraph", 0xE90EE0C9, "ParticleCurveDef", 0x1150D52Cu, "m_curves", 0x79849AF0u, 0x10ui64, 0x80ui64, 8ui64, 0, 0);
    Load_ProcessStructLayout_ParticleCurveDef();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleColorLerp
==============
*/
void Load_ProcessStructLayout_ParticleModuleColorLerp(void)
{
  if ( Load_RegisterStructSize("ParticleModuleColorLerp", 0x8CBB0F24, 0x30ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleColorLerp", 0x8CBB0F24, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleColorLerp", 0x8CBB0F24, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleColorLerp", 0x8CBB0F24, "float4", 0xEF099DEE, "m_colorBegin", 0x14DF0D30u, 0x10ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
    Load_RegisterStructMemberSize("ParticleModuleColorLerp", 0x8CBB0F24, "float4", 0xEF099DEE, "m_colorEnd", 0xDBCB7C34, 0x20ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleDef
==============
*/
void Load_ProcessStructLayout_ParticleModuleDef(void)
{
  if ( Load_RegisterStructSize("ParticleModuleDef", 0xC5FECE7F, 0xF0ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleDef", 0xC5FECE7F, "ParticleModuleType", 0xEEE1A072, "moduleType", 0x800221C0, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleDef", 0xC5FECE7F, "ParticleModuleTypeDef", 0x860D614F, "moduleData", 0xBBCE21D0, 0x10ui64, 0xE0ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModuleTypeDef();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleEmissionGraph
==============
*/
void Load_ProcessStructLayout_ParticleModuleEmissionGraph(void)
{
  if ( Load_RegisterStructSize("ParticleModuleEmissionGraph", 0x4A9A4075u, 0x30ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleEmissionGraph", 0x4A9A4075u, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleEmissionGraph", 0x4A9A4075u, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleEmissionGraph", 0x4A9A4075u, "ParticleCurveDef", 0x1150D52Cu, "m_curves", 0x79849AF0u, 0x10ui64, 0x20ui64, 2ui64, 0, 0);
    Load_ProcessStructLayout_ParticleCurveDef();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleEmissiveGraph
==============
*/
void Load_ProcessStructLayout_ParticleModuleEmissiveGraph(void)
{
  if ( Load_RegisterStructSize("ParticleModuleEmissiveGraph", 0x20382169u, 0xB0ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleEmissiveGraph", 0x20382169u, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleEmissiveGraph", 0x20382169u, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleEmissiveGraph", 0x20382169u, "bool", 0x1F095080u, "firstCurve", 0x841AFCFB, 8ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ParticleModuleEmissiveGraph", 0x20382169u, "ParticleCurveDef", 0x1150D52Cu, "m_curves", 0x79849AF0u, 0x10ui64, 0xA0ui64, 0xAui64, 0, 0);
    Load_ProcessStructLayout_ParticleCurveDef();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleFlags
==============
*/
void Load_ProcessStructLayout_ParticleModuleFlags(void)
{
  Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleForce
==============
*/
void Load_ProcessStructLayout_ParticleModuleForce(void)
{
  if ( Load_RegisterStructSize("ParticleModuleForce", 0x4806CDDFu, 0x30ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleForce", 0x4806CDDFu, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleForce", 0x4806CDDFu, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleForce", 0x4806CDDFu, "float4", 0xEF099DEE, "m_forceMin", 0x707B85AFu, 0x10ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
    Load_RegisterStructMemberSize("ParticleModuleForce", 0x4806CDDFu, "float4", 0xEF099DEE, "m_forceMax", 0x687B7951u, 0x20ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleForceDragGraph
==============
*/
void Load_ProcessStructLayout_ParticleModuleForceDragGraph(void)
{
  if ( Load_RegisterStructSize("ParticleModuleForceDragGraph", 0x1A2C8B83u, 0x30ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleForceDragGraph", 0x1A2C8B83u, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleForceDragGraph", 0x1A2C8B83u, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleForceDragGraph", 0x1A2C8B83u, "ParticleCurveDef", 0x1150D52Cu, "m_curves", 0x79849AF0u, 0x10ui64, 0x20ui64, 2ui64, 0, 0);
    Load_ProcessStructLayout_ParticleCurveDef();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleGravity
==============
*/
void Load_ProcessStructLayout_ParticleModuleGravity(void)
{
  if ( Load_RegisterStructSize("ParticleModuleGravity", 0xC9B53194, 0x10ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleGravity", 0xC9B53194, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleGravity", 0xC9B53194, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleGravity", 0xC9B53194, "ParticleFloatRange", 0x7CB512AFu, "m_gravityPercentage", 0x60F63862u, 8ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleFloatRange();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleGroupDef
==============
*/
void Load_ProcessStructLayout_ParticleModuleGroupDef(void)
{
  if ( Load_RegisterStructSize("ParticleModuleGroupDef", 0x5A49BF80u, 0x10ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleGroupDef", 0x5A49BF80u, "ParticleModuleDef", 0xC5FECE7F, "moduleDefs", 0xB9C5245C, 0i64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("ParticleModuleDef", 0xC5FECE7F, 0xF0ui64, 0x10ui64) )
    {
      Load_RegisterStructMemberSize("ParticleModuleDef", 0xC5FECE7F, "ParticleModuleType", 0xEEE1A072, "moduleType", 0x800221C0, 0i64, 2ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
      Load_RegisterStructMemberSize("ParticleModuleDef", 0xC5FECE7F, "ParticleModuleTypeDef", 0x860D614F, "moduleData", 0xBBCE21D0, 0x10ui64, 0xE0ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ParticleModuleTypeDef();
    }
    Load_RegisterStructMemberSize("ParticleModuleGroupDef", 0x5A49BF80u, "int", 0x7103F94Bu, "numModules", 0xB3718BBB, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("ParticleModuleGroupDef", 0x5A49BF80u, "bool", 0x1F095080u, "disabled", 0xBB377538, 0xCui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitAtlas
==============
*/
void Load_ProcessStructLayout_ParticleModuleInitAtlas(void)
{
  if ( Load_RegisterStructSize("ParticleModuleInitAtlas", 0xD4DC4CA9, 0x40ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleInitAtlas", 0xD4DC4CA9, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitAtlas", 0xD4DC4CA9, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitAtlas", 0xD4DC4CA9, "int", 0x7103F94Bu, "m_startFrame", 0x971DAA7B, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("ParticleModuleInitAtlas", 0xD4DC4CA9, "int", 0x7103F94Bu, "m_loopCount", 0x1FB53B77u, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("ParticleModuleInitAtlas", 0xD4DC4CA9, "bool", 0x1F095080u, "m_randomIndex", 0xB9B14077, 0x10ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ParticleModuleInitAtlas", 0xD4DC4CA9, "bool", 0x1F095080u, "m_playOverLife", 0x6CF3EF0Eu, 0x11ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ParticleModuleInitAtlas", 0xD4DC4CA9, "ParticleCurveDef", 0x1150D52Cu, "m_curves", 0x79849AF0u, 0x20ui64, 0x20ui64, 2ui64, 0, 0);
    Load_ProcessStructLayout_ParticleCurveDef();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitAttributes
==============
*/
void Load_ProcessStructLayout_ParticleModuleInitAttributes(void)
{
  if ( Load_RegisterStructSize("ParticleModuleInitAttributes", 0x795C0B6Fu, 0x70ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleInitAttributes", 0x795C0B6Fu, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitAttributes", 0x795C0B6Fu, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitAttributes", 0x795C0B6Fu, "bool", 0x1F095080u, "m_useNonUniformInterpolationForColor", 0x92C29DB6, 8ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ParticleModuleInitAttributes", 0x795C0B6Fu, "bool", 0x1F095080u, "m_useNonUniformInterpolationForSize", 0xEBA016u, 9ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ParticleModuleInitAttributes", 0x795C0B6Fu, "float4", 0xEF099DEE, "m_sizeMin", 0xE89B9571, 0x10ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
    Load_RegisterStructMemberSize("ParticleModuleInitAttributes", 0x795C0B6Fu, "float4", 0xEF099DEE, "m_sizeMax", 0xF09BA1CF, 0x20ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
    Load_RegisterStructMemberSize("ParticleModuleInitAttributes", 0x795C0B6Fu, "float4", 0xEF099DEE, "m_colorMin", 0xC2B7CD53, 0x30ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
    Load_RegisterStructMemberSize("ParticleModuleInitAttributes", 0x795C0B6Fu, "float4", 0xEF099DEE, "m_colorMax", 0xBAB7C0DD, 0x40ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
    Load_RegisterStructMemberSize("ParticleModuleInitAttributes", 0x795C0B6Fu, "float4", 0xEF099DEE, "m_velocityMin", 0xA5A356AF, 0x50ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
    Load_RegisterStructMemberSize("ParticleModuleInitAttributes", 0x795C0B6Fu, "float4", 0xEF099DEE, "m_velocityMax", 0x9DA34A51, 0x60ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitBeam
==============
*/
void Load_ProcessStructLayout_ParticleModuleInitBeam(void)
{
  if ( Load_RegisterStructSize("ParticleModuleInitBeam", 0xD47A33E9, 0x80ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleInitBeam", 0xD47A33E9, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitBeam", 0xD47A33E9, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitBeam", 0xD47A33E9, "ParticleModuleInitBeamFlags", 0x8CC61EB6, "m_beamFlags", 0x116A12AAu, 8ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleInitBeamFlags", 0x8CC61EB6, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitBeam", 0xD47A33E9, "float", 0x9B987AFE, "m_splitDistance", 0x7A0B85B1u, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitBeam", 0xD47A33E9, "float4", 0xEF099DEE, "m_startPos", 0x4BF7DC3Au, 0x10ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
    Load_RegisterStructMemberSize("ParticleModuleInitBeam", 0xD47A33E9, "float4", 0xEF099DEE, "m_endPos", 0xF11692DB, 0x20ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
    Load_RegisterStructMemberSize("ParticleModuleInitBeam", 0xD47A33E9, "float4", 0xEF099DEE, "m_offset", 0x64915B89u, 0x30ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
    Load_RegisterStructMemberSize("ParticleModuleInitBeam", 0xD47A33E9, "float4", 0xEF099DEE, "m_curvePoint1", 0x105FFD9Au, 0x40ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
    Load_RegisterStructMemberSize("ParticleModuleInitBeam", 0xD47A33E9, "float4", 0xEF099DEE, "m_curvePoint2", 0x105FFD99u, 0x50ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
    Load_RegisterStructMemberSize("ParticleModuleInitBeam", 0xD47A33E9, "ParticleLinkedAssetListDef", 0x50DDFCB8u, "m_linkedAssetList", 0x60B504E5u, 0x60ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleLinkedAssetListDef();
    Load_RegisterStructMemberSize("ParticleModuleInitBeam", 0xD47A33E9, "float", 0x9B987AFE, "m_scrollRateUV", 0xDE8FF9CC, 0x70ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitBeam", 0xD47A33E9, "float", 0x9B987AFE, "m_scrollRateSpiralGraph", 0x9E07792u, 0x74ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitBeam", 0xD47A33E9, "float", 0x9B987AFE, "m_spiralRepeatDistance", 0xF3CA4D1F, 0x78ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitBeamFlags
==============
*/
void Load_ProcessStructLayout_ParticleModuleInitBeamFlags(void)
{
  Load_RegisterStructSize("ParticleModuleInitBeamFlags", 0x8CC61EB6, 4ui64, 4ui64);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitCameraOffset
==============
*/
void Load_ProcessStructLayout_ParticleModuleInitCameraOffset(void)
{
  if ( Load_RegisterStructSize("ParticleModuleInitCameraOffset", 0xFE728398, 0x10ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleInitCameraOffset", 0xFE728398, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitCameraOffset", 0xFE728398, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitCloud
==============
*/
void Load_ProcessStructLayout_ParticleModuleInitCloud(void)
{
  if ( Load_RegisterStructSize("ParticleModuleInitCloud", 0xB0CA0FD7, 0x10ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleInitCloud", 0xB0CA0FD7, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitCloud", 0xB0CA0FD7, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitDecal
==============
*/
void Load_ProcessStructLayout_ParticleModuleInitDecal(void)
{
  if ( Load_RegisterStructSize("ParticleModuleInitDecal", 0xF96671EB, 0x40ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleInitDecal", 0xF96671EB, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitDecal", 0xF96671EB, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitDecal", 0xF96671EB, "ushort", 0xB7BE387D, "m_fadeInTime", 0x2DFD1938u, 8ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("ParticleModuleInitDecal", 0xF96671EB, "ushort", 0xB7BE387D, "m_fadeOutTime", 0x7B44FDE1u, 0xAui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("ParticleModuleInitDecal", 0xF96671EB, "ushort", 0xB7BE387D, "m_stoppableFadeOutTime", 0x15694C21u, 0xCui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("ParticleModuleInitDecal", 0xF96671EB, "ushort", 0xB7BE387D, "m_lerpWaitTime", 0x665445DFu, 0xEui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("ParticleModuleInitDecal", 0xF96671EB, "ParticleLinkedAssetListDef", 0x50DDFCB8u, "m_linkedAssetList", 0x60B504E5u, 0x10ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleLinkedAssetListDef();
    Load_RegisterStructMemberSize("ParticleModuleInitDecal", 0xF96671EB, "float4", 0xEF099DEE, "m_lerpColor", 0xE7B34ECu, 0x20ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
    Load_RegisterStructMemberSize("ParticleModuleInitDecal", 0xF96671EB, "ushort", 0xB7BE387D, "m_lerpTime", 0x797AB5C8u, 0x30ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("ParticleModuleInitDecal", 0xF96671EB, "bool", 0x1F095080u, "m_dynamicDecal", 0xE8A3CEE6, 0x32ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ParticleModuleInitDecal", 0xF96671EB, "FxMarkProjectionAxis", 0x5A128AE5u, "m_projectionAxis", 0x6FDE766Cu, 0x33ui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("FxMarkProjectionAxis", 0x5A128AE5u, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitDecal", 0xF96671EB, "bool", 0x1F095080u, "m_bypassStackingLimiter", 0xFAF050C8, 0x34ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitDismember
==============
*/
void Load_ProcessStructLayout_ParticleModuleInitDismember(void)
{
  if ( Load_RegisterStructSize("ParticleModuleInitDismember", 0x613A8586u, 0x10ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleInitDismember", 0x613A8586u, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitDismember", 0x613A8586u, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitFlare
==============
*/
void Load_ProcessStructLayout_ParticleModuleInitFlare(void)
{
  if ( Load_RegisterStructSize("ParticleModuleInitFlare", 0xDC68D3F0, 0x90ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleInitFlare", 0xDC68D3F0, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitFlare", 0xDC68D3F0, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitFlare", 0xDC68D3F0, "float", 0x9B987AFE, "m_position", 0x4865B3C9u, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitFlare", 0xDC68D3F0, "int", 0x7103F94Bu, "m_angularRotCount", 0x13E66D7Au, 0x20ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("ParticleModuleInitFlare", 0xDC68D3F0, "uint", 0x53A932A0u, "m_flareFlags", 0x343C8A95u, 0x24ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ParticleModuleInitFlare", 0xDC68D3F0, "float4", 0xEF099DEE, "m_direction", 0xA15488F3, 0x10ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
    Load_RegisterStructMemberSize("ParticleModuleInitFlare", 0xDC68D3F0, "ParticleFloatRange", 0x7CB512AFu, "m_depthScaleRange", 0x57060072u, 0x28ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleFloatRange();
    Load_RegisterStructMemberSize("ParticleModuleInitFlare", 0xDC68D3F0, "ParticleFloatRange", 0x7CB512AFu, "m_depthScaleValue", 0xC2D32DD2, 0x30ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleFloatRange();
    Load_RegisterStructMemberSize("ParticleModuleInitFlare", 0xDC68D3F0, "ParticleFloatRange", 0x7CB512AFu, "m_radialRot", 0x233B4328u, 0x38ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleFloatRange();
    Load_RegisterStructMemberSize("ParticleModuleInitFlare", 0xDC68D3F0, "ParticleFloatRange", 0x7CB512AFu, "m_radialScaleX", 0xEC515CBB, 0x40ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleFloatRange();
    Load_RegisterStructMemberSize("ParticleModuleInitFlare", 0xDC68D3F0, "ParticleFloatRange", 0x7CB512AFu, "m_radialScaleY", 0xEC515CBA, 0x48ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleFloatRange();
    Load_RegisterStructMemberSize("ParticleModuleInitFlare", 0xDC68D3F0, "ParticleCurveDef", 0x1150D52Cu, "m_curves", 0x79849AF0u, 0x50ui64, 0x40ui64, 4ui64, 0, 0);
    Load_ProcessStructLayout_ParticleCurveDef();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitGeoTrail
==============
*/
void Load_ProcessStructLayout_ParticleModuleInitGeoTrail(void)
{
  if ( Load_RegisterStructSize("ParticleModuleInitGeoTrail", 0xBBF404C5, 0x40ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleInitGeoTrail", 0xBBF404C5, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitGeoTrail", 0xBBF404C5, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitGeoTrail", 0xBBF404C5, "uint", 0x53A932A0u, "m_numPointsMax", 0x3A221FA5u, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ParticleModuleInitGeoTrail", 0xBBF404C5, "float", 0x9B987AFE, "m_splitDistance", 0x7A0B85B1u, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitGeoTrail", 0xBBF404C5, "float", 0x9B987AFE, "m_splitAngle", 0x7E76B9C9u, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitGeoTrail", 0xBBF404C5, "float", 0x9B987AFE, "m_centerOffset", 0x8CCD5F8A, 0x14ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitGeoTrail", 0xBBF404C5, "uint", 0x53A932A0u, "m_numSheets", 0x9F622E98, 0x18ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ParticleModuleInitGeoTrail", 0xBBF404C5, "float", 0x9B987AFE, "m_fadeInDistance", 0x7153AF1Au, 0x1Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitGeoTrail", 0xBBF404C5, "float", 0x9B987AFE, "m_fadeOutDistance", 0x1C669323u, 0x20ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitGeoTrail", 0xBBF404C5, "float", 0x9B987AFE, "m_tileDistance", 0xF4836BAD, 0x24ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitGeoTrail", 0xBBF404C5, "ParticleFloatRange", 0x7CB512AFu, "m_tileOffset", 0x26013C8Du, 0x28ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleFloatRange();
    Load_RegisterStructMemberSize("ParticleModuleInitGeoTrail", 0xBBF404C5, "float", 0x9B987AFE, "m_scrollTime", 0xEEC2CDD0, 0x30ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitGeoTrail", 0xBBF404C5, "bool", 0x1F095080u, "m_useLocalVelocity", 0xB6009C5B, 0x34ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ParticleModuleInitGeoTrail", 0xBBF404C5, "bool", 0x1F095080u, "m_useVerticalTexture", 0x97E9EFD4, 0x35ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ParticleModuleInitGeoTrail", 0xBBF404C5, "bool", 0x1F095080u, "m_cameraFacing", 0x87F2DC3u, 0x36ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ParticleModuleInitGeoTrail", 0xBBF404C5, "bool", 0x1F095080u, "m_fixLeadingEdge", 0xFB76C51A, 0x37ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ParticleModuleInitGeoTrail", 0xBBF404C5, "bool", 0x1F095080u, "m_clampUVs", 0x840D8D23, 0x38ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitKillWrapBox
==============
*/
void Load_ProcessStructLayout_ParticleModuleInitKillWrapBox(void)
{
  if ( Load_RegisterStructSize("ParticleModuleInitKillWrapBox", 0xE1F3692B, 0x30ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleInitKillWrapBox", 0xE1F3692B, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitKillWrapBox", 0xE1F3692B, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitKillWrapBox", 0xE1F3692B, "ParticleModuleAxesFlags", 0x7DD89CE2u, "m_planesKill", 0x6939CCD9u, 8ui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleAxesFlags", 0x7DD89CE2u, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitKillWrapBox", 0xE1F3692B, "float4", 0xEF099DEE, "m_bounds", 0x45CA923u, 0x10ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
    Load_RegisterStructMemberSize("ParticleModuleInitKillWrapBox", 0xE1F3692B, "float4", 0xEF099DEE, "m_offset", 0x64915B89u, 0x20ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitLightOmni
==============
*/
void Load_ProcessStructLayout_ParticleModuleInitLightOmni(void)
{
  if ( Load_RegisterStructSize("ParticleModuleInitLightOmni", 0xD5194893, 0x50ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleInitLightOmni", 0xD5194893, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitLightOmni", 0xD5194893, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitLightOmni", 0xD5194893, "ParticleLinkedAssetListDef", 0x50DDFCB8u, "m_linkedAssetList", 0x60B504E5u, 8ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleLinkedAssetListDef();
    Load_RegisterStructMemberSize("ParticleModuleInitLightOmni", 0xD5194893, "float", 0x9B987AFE, "m_fovOuter", 0xA2C76A8A, 0x18ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitLightOmni", 0xD5194893, "float", 0x9B987AFE, "m_fovInner", 0x6AD19AC7u, 0x1Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitLightOmni", 0xD5194893, "float", 0x9B987AFE, "m_bulbRadius", 0x8657E89F, 0x20ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitLightOmni", 0xD5194893, "float", 0x9B987AFE, "m_bulbLength", 0x525ACD45u, 0x24ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitLightOmni", 0xD5194893, "float", 0x9B987AFE, "m_distanceFalloff", 0x4A06BE4Du, 0x28ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitLightOmni", 0xD5194893, "float", 0x9B987AFE, "m_brightness", 0x3F2917C5u, 0x2Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitLightOmni", 0xD5194893, "float", 0x9B987AFE, "m_intensityUV", 0x4688B212u, 0x30ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitLightOmni", 0xD5194893, "float", 0x9B987AFE, "m_intensityIR", 0x4A88B8C2u, 0x34ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitLightOmni", 0xD5194893, "float", 0x9B987AFE, "m_intensityHeat", 0x1D65F6DDu, 0x38ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitLightOmni", 0xD5194893, "float", 0x9B987AFE, "m_shadowSoftness", 0x95BAFE8D, 0x3Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitLightOmni", 0xD5194893, "float", 0x9B987AFE, "m_shadowBias", 0x3C7BC30Bu, 0x40ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitLightOmni", 0xD5194893, "float", 0x9B987AFE, "m_shadowArea", 0xD7C8AFDF, 0x44ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitLightOmni", 0xD5194893, "float", 0x9B987AFE, "m_toneMappingScaleFactor", 0xA0BD6075, 0x48ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitLightOmni", 0xD5194893, "bool", 0x1F095080u, "m_disableVolumetric", 0x12DA78ACu, 0x4Cui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ParticleModuleInitLightOmni", 0xD5194893, "bool", 0x1F095080u, "m_disableShadowMap", 0xD0197D52, 0x4Dui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ParticleModuleInitLightOmni", 0xD5194893, "bool", 0x1F095080u, "m_disableDynamicShadows", 0xBBA29792, 0x4Eui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ParticleModuleInitLightOmni", 0xD5194893, "bool", 0x1F095080u, "m_scriptScale", 0xCFC4B051, 0x4Fui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitLightSpot
==============
*/
void Load_ProcessStructLayout_ParticleModuleInitLightSpot(void)
{
  if ( Load_RegisterStructSize("ParticleModuleInitLightSpot", 0x8A9A6D48, 0x60ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleInitLightSpot", 0x8A9A6D48, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitLightSpot", 0x8A9A6D48, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitLightSpot", 0x8A9A6D48, "ParticleLinkedAssetListDef", 0x50DDFCB8u, "m_linkedAssetList", 0x60B504E5u, 8ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleLinkedAssetListDef();
    Load_RegisterStructMemberSize("ParticleModuleInitLightSpot", 0x8A9A6D48, "float", 0x9B987AFE, "m_fovOuter", 0xA2C76A8A, 0x18ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitLightSpot", 0x8A9A6D48, "float", 0x9B987AFE, "m_fovInner", 0x6AD19AC7u, 0x1Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitLightSpot", 0x8A9A6D48, "float", 0x9B987AFE, "m_bulbRadius", 0x8657E89F, 0x20ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitLightSpot", 0x8A9A6D48, "float", 0x9B987AFE, "m_bulbLength", 0x525ACD45u, 0x24ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitLightSpot", 0x8A9A6D48, "float", 0x9B987AFE, "m_distanceFalloff", 0x4A06BE4Du, 0x28ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitLightSpot", 0x8A9A6D48, "float", 0x9B987AFE, "m_fovCollimation", 0xBD87FF60, 0x2Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitLightSpot", 0x8A9A6D48, "float", 0x9B987AFE, "m_brightness", 0x3F2917C5u, 0x30ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitLightSpot", 0x8A9A6D48, "float", 0x9B987AFE, "m_intensityUV", 0x4688B212u, 0x34ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitLightSpot", 0x8A9A6D48, "float", 0x9B987AFE, "m_intensityIR", 0x4A88B8C2u, 0x38ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitLightSpot", 0x8A9A6D48, "float", 0x9B987AFE, "m_intensityHeat", 0x1D65F6DDu, 0x3Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitLightSpot", 0x8A9A6D48, "float", 0x9B987AFE, "m_shadowSoftness", 0x95BAFE8D, 0x40ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitLightSpot", 0x8A9A6D48, "float", 0x9B987AFE, "m_shadowBias", 0x3C7BC30Bu, 0x44ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitLightSpot", 0x8A9A6D48, "float", 0x9B987AFE, "m_shadowArea", 0xD7C8AFDF, 0x48ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitLightSpot", 0x8A9A6D48, "float", 0x9B987AFE, "m_shadowNearPlane", 0xF24E99C0, 0x4Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitLightSpot", 0x8A9A6D48, "float", 0x9B987AFE, "m_toneMappingScaleFactor", 0xA0BD6075, 0x50ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitLightSpot", 0x8A9A6D48, "bool", 0x1F095080u, "m_disableVolumetric", 0x12DA78ACu, 0x54ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ParticleModuleInitLightSpot", 0x8A9A6D48, "bool", 0x1F095080u, "m_disableShadowMap", 0xD0197D52, 0x55ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ParticleModuleInitLightSpot", 0x8A9A6D48, "bool", 0x1F095080u, "m_disableDynamicShadows", 0xBBA29792, 0x56ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ParticleModuleInitLightSpot", 0x8A9A6D48, "bool", 0x1F095080u, "m_scriptScale", 0xCFC4B051, 0x57ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitMaterial
==============
*/
void Load_ProcessStructLayout_ParticleModuleInitMaterial(void)
{
  if ( Load_RegisterStructSize("ParticleModuleInitMaterial", 0x78BA75F7u, 0xE0ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleInitMaterial", 0x78BA75F7u, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitMaterial", 0x78BA75F7u, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitMaterial", 0x78BA75F7u, "ParticleRenderOptions", 0x371ECC0u, "m_renderOptions", 0xEC9F45E2, 8ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleRenderOptions", 0x371ECC0u, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitMaterial", 0x78BA75F7u, "ParticleShaderGraphOptions", 0x7EC7AE83u, "m_shaderGraphOptions", 0x3C747B5u, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleShaderGraphOptions", 0x7EC7AE83u, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitMaterial", 0x78BA75F7u, "ParticleLinkedAssetListDef", 0x50DDFCB8u, "m_linkedAssetList", 0x60B504E5u, 0x10ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleLinkedAssetListDef();
    Load_RegisterStructMemberSize("ParticleModuleInitMaterial", 0x78BA75F7u, "Particle_MaterialData", 0xB8369F62, "m_materialData", 0xADD6750B, 0x20ui64, 0xC0ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_Particle_MaterialData();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitMirrorTexture
==============
*/
void Load_ProcessStructLayout_ParticleModuleInitMirrorTexture(void)
{
  if ( Load_RegisterStructSize("ParticleModuleInitMirrorTexture", 0xC3FCCEAu, 0x10ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleInitMirrorTexture", 0xC3FCCEAu, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitMirrorTexture", 0xC3FCCEAu, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitMirrorTexture", 0xC3FCCEAu, "ParticleMirrorTextureType", 0xBE8E742C, "m_mirrorHorizontal", 0x34ACD751u, 8ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleMirrorTextureType", 0xBE8E742C, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitMirrorTexture", 0xC3FCCEAu, "ParticleMirrorTextureType", 0xBE8E742C, "m_mirrorVertical", 0x23766E1Fu, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleMirrorTextureType", 0xBE8E742C, 4ui64, 4ui64);
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitModel
==============
*/
void Load_ProcessStructLayout_ParticleModuleInitModel(void)
{
  if ( Load_RegisterStructSize("ParticleModuleInitModel", 0x61C8AC33u, 0x20ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleInitModel", 0x61C8AC33u, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitModel", 0x61C8AC33u, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitModel", 0x61C8AC33u, "bool", 0x1F095080u, "m_usePhysics", 0x75AB4BA0u, 8ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ParticleModuleInitModel", 0x61C8AC33u, "bool", 0x1F095080u, "m_motionBlurHQ", 0x8E73A0F8, 9ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ParticleModuleInitModel", 0x61C8AC33u, "ParticleLinkedAssetListDef", 0x50DDFCB8u, "m_linkedAssetList", 0x60B504E5u, 0x10ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleLinkedAssetListDef();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitOcclusionQuery
==============
*/
void Load_ProcessStructLayout_ParticleModuleInitOcclusionQuery(void)
{
  if ( Load_RegisterStructSize("ParticleModuleInitOcclusionQuery", 0x8664F901, 0x30ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleInitOcclusionQuery", 0x8664F901, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitOcclusionQuery", 0x8664F901, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitOcclusionQuery", 0x8664F901, "float", 0x9B987AFE, "m_depthBias", 0x9B4847A4, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitOcclusionQuery", 0x8664F901, "float", 0x9B987AFE, "m_fadeInTime", 0x2DFD1938u, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitOcclusionQuery", 0x8664F901, "float", 0x9B987AFE, "m_fadeOutTime", 0x7B44FDE1u, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitOcclusionQuery", 0x8664F901, "ParticleFloatRange", 0x7CB512AFu, "m_scale", 0x45858DDEu, 0x14ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleFloatRange();
    Load_RegisterStructMemberSize("ParticleModuleInitOcclusionQuery", 0x8664F901, "vec2_t", 0x3757C7B9u, "m_worldSize", 0x6BAB0667u, 0x1Cui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec2_t();
    Load_RegisterStructMemberSize("ParticleModuleInitOcclusionQuery", 0x8664F901, "bool", 0x1F095080u, "m_offscreenRaycast", 0xC724F70C, 0x24ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitOrientedSprite
==============
*/
void Load_ProcessStructLayout_ParticleModuleInitOrientedSprite(void)
{
  if ( Load_RegisterStructSize("ParticleModuleInitOrientedSprite", 0xC08D413F, 0x20ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleInitOrientedSprite", 0xC08D413F, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitOrientedSprite", 0xC08D413F, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitOrientedSprite", 0xC08D413F, "float4", 0xEF099DEE, "m_orientationQuat", 0x17B7D7ABu, 0x10ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitParticleSim
==============
*/
void Load_ProcessStructLayout_ParticleModuleInitParticleSim(void)
{
  if ( Load_RegisterStructSize("ParticleModuleInitParticleSim", 0xFEBF1887, 0x30ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleInitParticleSim", 0xFEBF1887, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitParticleSim", 0xFEBF1887, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitParticleSim", 0xFEBF1887, "ParticleLinkedAssetListDef", 0x50DDFCB8u, "m_linkedAssetList", 0x60B504E5u, 8ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleLinkedAssetListDef();
    Load_RegisterStructMemberSize("ParticleModuleInitParticleSim", 0xFEBF1887, "ParticleFloatRange", 0x7CB512AFu, "m_scaleFactor", 0x126A125Fu, 0x18ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleFloatRange();
    Load_RegisterStructMemberSize("ParticleModuleInitParticleSim", 0xFEBF1887, "bool", 0x1F095080u, "m_holdLastFrame", 0x5BBE2D9Eu, 0x20ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitPlayerFacing
==============
*/
void Load_ProcessStructLayout_ParticleModuleInitPlayerFacing(void)
{
  if ( Load_RegisterStructSize("ParticleModuleInitPlayerFacing", 0xCF27FCC1, 0x10ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleInitPlayerFacing", 0xCF27FCC1, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitPlayerFacing", 0xCF27FCC1, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitRelativeVelocity
==============
*/
void Load_ProcessStructLayout_ParticleModuleInitRelativeVelocity(void)
{
  if ( Load_RegisterStructSize("ParticleModuleInitRelativeVelocity", 0x8ADA7EDD, 0x10ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleInitRelativeVelocity", 0x8ADA7EDD, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitRelativeVelocity", 0x8ADA7EDD, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitRelativeVelocity", 0x8ADA7EDD, "ParticleRelativeVelocityType", 0x9E0EA963, "m_velocityType", 0x2A4337E1u, 8ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleRelativeVelocityType", 0x9E0EA963, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitRelativeVelocity", 0x8ADA7EDD, "bool", 0x1F095080u, "m_useBoltInfo", 0xDEAD3F60, 0xCui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitRotation3D
==============
*/
void Load_ProcessStructLayout_ParticleModuleInitRotation3D(void)
{
  if ( Load_RegisterStructSize("ParticleModuleInitRotation3D", 0x56BDD10Fu, 0x50ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleInitRotation3D", 0x56BDD10Fu, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitRotation3D", 0x56BDD10Fu, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitRotation3D", 0x56BDD10Fu, "float4", 0xEF099DEE, "m_rotationAngleMin", 0xFFABD5CD, 0x10ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
    Load_RegisterStructMemberSize("ParticleModuleInitRotation3D", 0x56BDD10Fu, "float4", 0xEF099DEE, "m_rotationAngleMax", 0x7ABE243u, 0x20ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
    Load_RegisterStructMemberSize("ParticleModuleInitRotation3D", 0x56BDD10Fu, "float4", 0xEF099DEE, "m_rotationRateMin", 0x3E489030u, 0x30ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
    Load_RegisterStructMemberSize("ParticleModuleInitRotation3D", 0x56BDD10Fu, "float4", 0xEF099DEE, "m_rotationRateMax", 0x364883BEu, 0x40ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitRotation
==============
*/
void Load_ProcessStructLayout_ParticleModuleInitRotation(void)
{
  if ( Load_RegisterStructSize("ParticleModuleInitRotation", 0xD6666A7E, 0x20ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleInitRotation", 0xD6666A7E, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitRotation", 0xD6666A7E, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitRotation", 0xD6666A7E, "ParticleFloatRange", 0x7CB512AFu, "m_rotationAngle", 0xCFED5787, 0x10ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleFloatRange();
    Load_RegisterStructMemberSize("ParticleModuleInitRotation", 0xD6666A7E, "ParticleFloatRange", 0x7CB512AFu, "m_rotationRate", 0x252239F4u, 0x18ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleFloatRange();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitRunner
==============
*/
void Load_ProcessStructLayout_ParticleModuleInitRunner(void)
{
  if ( Load_RegisterStructSize("ParticleModuleInitRunner", 0xB13A35C2, 0x70ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleInitRunner", 0xB13A35C2, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitRunner", 0xB13A35C2, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitRunner", 0xB13A35C2, "ParticleModifier", 0x323527EDu, "m_scaleModifier", 0x1E7C036Du, 0x10ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModifier();
    Load_RegisterStructMemberSize("ParticleModuleInitRunner", 0xB13A35C2, "ParticleModifier", 0x323527EDu, "m_velocityModifier", 0xC5FA5CEE, 0x30ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModifier();
    Load_RegisterStructMemberSize("ParticleModuleInitRunner", 0xB13A35C2, "ParticleLinkedAssetListDef", 0x50DDFCB8u, "m_linkedAssetList", 0x60B504E5u, 0x50ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleLinkedAssetListDef();
    Load_RegisterStructMemberSize("ParticleModuleInitRunner", 0xB13A35C2, "ParticleUseOrientationOptions", 0x4C2178ABu, "m_useOrientationOptions", 0x5933CBA9u, 0x60ui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleUseOrientationOptions", 0x4C2178ABu, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitRunner", 0xB13A35C2, "ParticleUseScaleOptions", 0x93FA0F6B, "m_useScaleOptions", 0xF2B7764D, 0x61ui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleUseScaleOptions", 0x93FA0F6B, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitRunner", 0xB13A35C2, "ParticleUseVelocityOptions", 0x148371ACu, "m_useVelocityOptions", 0xD06137D6, 0x62ui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleUseVelocityOptions", 0x148371ACu, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitRunner", 0xB13A35C2, "bool", 0x1F095080u, "m_attachToParent", 0x3E48D20Cu, 0x63ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ParticleModuleInitRunner", 0xB13A35C2, "bool", 0x1F095080u, "m_stopChildOnDeath", 0x17E40261u, 0x64ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ParticleModuleInitRunner", 0xB13A35C2, "bool", 0x1F095080u, "m_killChildOnDeath", 0x9DA9E929, 0x65ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ParticleModuleInitRunner", 0xB13A35C2, "bool", 0x1F095080u, "m_legacyOrientationVelocity", 0xE920B24u, 0x66ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ParticleModuleInitRunner", 0xB13A35C2, "bool", 0x1F095080u, "m_legacyOrientationRotation", 0x70E068B7u, 0x67ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitSound
==============
*/
void Load_ProcessStructLayout_ParticleModuleInitSound(void)
{
  if ( Load_RegisterStructSize("ParticleModuleInitSound", 0x900C991u, 0x20ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleInitSound", 0x900C991u, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitSound", 0x900C991u, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitSound", 0x900C991u, "ParticleLinkedAssetListDef", 0x50DDFCB8u, "m_linkedAssetList", 0x60B504E5u, 0x10ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleLinkedAssetListDef();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitSpawn
==============
*/
void Load_ProcessStructLayout_ParticleModuleInitSpawn(void)
{
  if ( Load_RegisterStructSize("ParticleModuleInitSpawn", 0xD1876F81, 0x20ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleInitSpawn", 0xD1876F81, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitSpawn", 0xD1876F81, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitSpawn", 0xD1876F81, "ParticleCurveDef", 0x1150D52Cu, "m_curves", 0x79849AF0u, 0x10ui64, 0x10ui64, 1ui64, 0, 0);
    Load_ProcessStructLayout_ParticleCurveDef();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitSpawnShapeBox
==============
*/
void Load_ProcessStructLayout_ParticleModuleInitSpawnShapeBox(void)
{
  if ( Load_RegisterStructSize("ParticleModuleInitSpawnShapeBox", 0xED77BA97, 0xC0ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeBox", 0xED77BA97, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeBox", 0xED77BA97, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeBox", 0xED77BA97, "ParticleModuleAxesFlags", 0x7DD89CE2u, "m_axisFlags", 0x186F2B70u, 8ui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleAxesFlags", 0x7DD89CE2u, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeBox", 0xED77BA97, "ParticleSpawnFlags", 0x78509A68u, "m_spawnFlags", 0x273C310Au, 9ui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleSpawnFlags", 0x78509A68u, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeBox", 0xED77BA97, "ParticleModuleAxis", 0x2D80E979u, "m_normalAxis", 0xEBFBD702, 0xAui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleAxis", 0x2D80E979u, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeBox", 0xED77BA97, "ParticleSpawnShapeType", 0x3314B576u, "m_spawnType", 0x911C08E5, 0xBui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleSpawnShapeType", 0x3314B576u, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeBox", 0xED77BA97, "float", 0x9B987AFE, "m_volumeCubeRoot", 0x23A649E9u, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeBox", 0xED77BA97, "float4", 0xEF099DEE, "m_calculationOffset", 0xB17A43CA, 0x10ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeBox", 0xED77BA97, "float4", 0xEF099DEE, "m_dimensionsMin", 0x6F4F93DDu, 0x40ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeBox", 0xED77BA97, "float4", 0xEF099DEE, "m_dimensionsMax", 0x774FA033u, 0x50ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeBox", 0xED77BA97, "ParticleCurveDef", 0x1150D52Cu, "m_curves", 0x79849AF0u, 0x60ui64, 0x60ui64, 6ui64, 0, 0);
    Load_ProcessStructLayout_ParticleCurveDef();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitSpawnShapeCylinder
==============
*/
void Load_ProcessStructLayout_ParticleModuleInitSpawnShapeCylinder(void)
{
  if ( Load_RegisterStructSize("ParticleModuleInitSpawnShapeCylinder", 0x6B886EEu, 0xA0ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeCylinder", 0x6B886EEu, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeCylinder", 0x6B886EEu, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeCylinder", 0x6B886EEu, "ParticleModuleAxesFlags", 0x7DD89CE2u, "m_axisFlags", 0x186F2B70u, 8ui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleAxesFlags", 0x7DD89CE2u, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeCylinder", 0x6B886EEu, "ParticleSpawnFlags", 0x78509A68u, "m_spawnFlags", 0x273C310Au, 9ui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleSpawnFlags", 0x78509A68u, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeCylinder", 0x6B886EEu, "ParticleModuleAxis", 0x2D80E979u, "m_normalAxis", 0xEBFBD702, 0xAui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleAxis", 0x2D80E979u, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeCylinder", 0x6B886EEu, "ParticleSpawnShapeType", 0x3314B576u, "m_spawnType", 0x911C08E5, 0xBui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleSpawnShapeType", 0x3314B576u, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeCylinder", 0x6B886EEu, "float", 0x9B987AFE, "m_volumeCubeRoot", 0x23A649E9u, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeCylinder", 0x6B886EEu, "float4", 0xEF099DEE, "m_calculationOffset", 0xB17A43CA, 0x10ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeCylinder", 0x6B886EEu, "bool", 0x1F095080u, "m_hasRotation", 0xCD1E88F2, 0x30ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeCylinder", 0x6B886EEu, "bool", 0x1F095080u, "m_rotateCalculatedOffset", 0x5B573F68u, 0x31ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeCylinder", 0x6B886EEu, "float", 0x9B987AFE, "m_halfHeight", 0x66F9C2A2u, 0x34ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeCylinder", 0x6B886EEu, "ParticleFloatRange", 0x7CB512AFu, "m_radius", 0xC89C811A, 0x38ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleFloatRange();
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeCylinder", 0x6B886EEu, "float4", 0xEF099DEE, "m_offset", 0x64915B89u, 0x20ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeCylinder", 0x6B886EEu, "float4", 0xEF099DEE, "m_directionQuat", 0xA567F726, 0x40ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeCylinder", 0x6B886EEu, "ParticleCurveDef", 0x1150D52Cu, "m_curves", 0x79849AF0u, 0x50ui64, 0x50ui64, 5ui64, 0, 0);
    Load_ProcessStructLayout_ParticleCurveDef();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitSpawnShapeEllipsoid
==============
*/
void Load_ProcessStructLayout_ParticleModuleInitSpawnShapeEllipsoid(void)
{
  if ( Load_RegisterStructSize("ParticleModuleInitSpawnShapeEllipsoid", 0x8807AA03, 0xB0ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeEllipsoid", 0x8807AA03, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeEllipsoid", 0x8807AA03, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeEllipsoid", 0x8807AA03, "ParticleModuleAxesFlags", 0x7DD89CE2u, "m_axisFlags", 0x186F2B70u, 8ui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleAxesFlags", 0x7DD89CE2u, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeEllipsoid", 0x8807AA03, "ParticleSpawnFlags", 0x78509A68u, "m_spawnFlags", 0x273C310Au, 9ui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleSpawnFlags", 0x78509A68u, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeEllipsoid", 0x8807AA03, "ParticleModuleAxis", 0x2D80E979u, "m_normalAxis", 0xEBFBD702, 0xAui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleAxis", 0x2D80E979u, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeEllipsoid", 0x8807AA03, "ParticleSpawnShapeType", 0x3314B576u, "m_spawnType", 0x911C08E5, 0xBui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleSpawnShapeType", 0x3314B576u, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeEllipsoid", 0x8807AA03, "float", 0x9B987AFE, "m_volumeCubeRoot", 0x23A649E9u, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeEllipsoid", 0x8807AA03, "float4", 0xEF099DEE, "m_calculationOffset", 0xB17A43CA, 0x10ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeEllipsoid", 0x8807AA03, "float4", 0xEF099DEE, "m_radiusMin", 0xB1C1ACBE, 0x30ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeEllipsoid", 0x8807AA03, "float4", 0xEF099DEE, "m_radiusMax", 0xB9C1B910, 0x40ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeEllipsoid", 0x8807AA03, "float4", 0xEF099DEE, "m_offset", 0x64915B89u, 0x20ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeEllipsoid", 0x8807AA03, "ParticleCurveDef", 0x1150D52Cu, "m_curves", 0x79849AF0u, 0x50ui64, 0x60ui64, 6ui64, 0, 0);
    Load_ProcessStructLayout_ParticleCurveDef();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitSpawnShapeMesh
==============
*/
void Load_ProcessStructLayout_ParticleModuleInitSpawnShapeMesh(void)
{
  if ( Load_RegisterStructSize("ParticleModuleInitSpawnShapeMesh", 0xCF38B2FB, 0x80ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeMesh", 0xCF38B2FB, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeMesh", 0xCF38B2FB, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeMesh", 0xCF38B2FB, "ParticleModuleAxesFlags", 0x7DD89CE2u, "m_axisFlags", 0x186F2B70u, 8ui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleAxesFlags", 0x7DD89CE2u, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeMesh", 0xCF38B2FB, "ParticleSpawnFlags", 0x78509A68u, "m_spawnFlags", 0x273C310Au, 9ui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleSpawnFlags", 0x78509A68u, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeMesh", 0xCF38B2FB, "ParticleModuleAxis", 0x2D80E979u, "m_normalAxis", 0xEBFBD702, 0xAui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleAxis", 0x2D80E979u, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeMesh", 0xCF38B2FB, "ParticleSpawnShapeType", 0x3314B576u, "m_spawnType", 0x911C08E5, 0xBui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleSpawnShapeType", 0x3314B576u, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeMesh", 0xCF38B2FB, "float", 0x9B987AFE, "m_volumeCubeRoot", 0x23A649E9u, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeMesh", 0xCF38B2FB, "float4", 0xEF099DEE, "m_calculationOffset", 0xB17A43CA, 0x10ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeMesh", 0xCF38B2FB, "ParticleLinkedAssetListDef", 0x50DDFCB8u, "m_linkedAssetList", 0x60B504E5u, 0x38ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleLinkedAssetListDef();
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeMesh", 0xCF38B2FB, "ParticleSpawnMeshAssetDef", 0x6127E705u, "m_meshAssetData", 0xB2E981B9, 0x48ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("ParticleSpawnMeshAssetDef", 0x6127E705u, 0x10ui64, 4ui64) )
    {
      Load_RegisterStructMemberSize("ParticleSpawnMeshAssetDef", 0x6127E705u, "uint", 0x53A932A0u, "m_numVertsTotal", 0x3DD11FD6u, 0i64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("ParticleSpawnMeshAssetDef", 0x6127E705u, "uint", 0x53A932A0u, "m_numTrisTotal", 0x16772A88u, 4ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
    }
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeMesh", 0xCF38B2FB, "uint", 0x53A932A0u, "m_numMeshAssets", 0xF9669290, 0x30ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeMesh", 0xCF38B2FB, "bool", 0x1F095080u, "m_useFaces", 0xB490BA11, 0x34ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeMesh", 0xCF38B2FB, "float4", 0xEF099DEE, "m_offset", 0x64915B89u, 0x20ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeMesh", 0xCF38B2FB, "ParticleCurveDef", 0x1150D52Cu, "m_curves", 0x79849AF0u, 0x50ui64, 0x30ui64, 3ui64, 0, 0);
    Load_ProcessStructLayout_ParticleCurveDef();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitSpawnShapeSphere
==============
*/
void Load_ProcessStructLayout_ParticleModuleInitSpawnShapeSphere(void)
{
  if ( Load_RegisterStructSize("ParticleModuleInitSpawnShapeSphere", 0xFCCC5E1B, 0x80ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeSphere", 0xFCCC5E1B, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeSphere", 0xFCCC5E1B, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeSphere", 0xFCCC5E1B, "ParticleModuleAxesFlags", 0x7DD89CE2u, "m_axisFlags", 0x186F2B70u, 8ui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleAxesFlags", 0x7DD89CE2u, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeSphere", 0xFCCC5E1B, "ParticleSpawnFlags", 0x78509A68u, "m_spawnFlags", 0x273C310Au, 9ui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleSpawnFlags", 0x78509A68u, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeSphere", 0xFCCC5E1B, "ParticleModuleAxis", 0x2D80E979u, "m_normalAxis", 0xEBFBD702, 0xAui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleAxis", 0x2D80E979u, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeSphere", 0xFCCC5E1B, "ParticleSpawnShapeType", 0x3314B576u, "m_spawnType", 0x911C08E5, 0xBui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleSpawnShapeType", 0x3314B576u, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeSphere", 0xFCCC5E1B, "float", 0x9B987AFE, "m_volumeCubeRoot", 0x23A649E9u, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeSphere", 0xFCCC5E1B, "float4", 0xEF099DEE, "m_calculationOffset", 0xB17A43CA, 0x10ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeSphere", 0xFCCC5E1B, "ParticleFloatRange", 0x7CB512AFu, "m_radius", 0xC89C811A, 0x38ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleFloatRange();
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeSphere", 0xFCCC5E1B, "float4", 0xEF099DEE, "m_offset", 0x64915B89u, 0x20ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
    Load_RegisterStructMemberSize("ParticleModuleInitSpawnShapeSphere", 0xFCCC5E1B, "ParticleCurveDef", 0x1150D52Cu, "m_curves", 0x79849AF0u, 0x40ui64, 0x40ui64, 4ui64, 0, 0);
    Load_ProcessStructLayout_ParticleCurveDef();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitTail
==============
*/
void Load_ProcessStructLayout_ParticleModuleInitTail(void)
{
  if ( Load_RegisterStructSize("ParticleModuleInitTail", 0x8D3A40BA, 0x10ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleInitTail", 0x8D3A40BA, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitTail", 0x8D3A40BA, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitTail", 0x8D3A40BA, "ushort", 0xB7BE387D, "m_averagePastVelocities", 0x6F144C50u, 8ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("ParticleModuleInitTail", 0x8D3A40BA, "ushort", 0xB7BE387D, "m_maxParentSpeed", 0xA5CCE353, 0xAui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("ParticleModuleInitTail", 0x8D3A40BA, "bool", 0x1F095080u, "m_tailLeading", 0x7A5354C0u, 0xCui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ParticleModuleInitTail", 0x8D3A40BA, "bool", 0x1F095080u, "m_scaleWithVelocity", 0xCC1F48B7, 0xDui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ParticleModuleInitTail", 0x8D3A40BA, "bool", 0x1F095080u, "m_rotateAroundPivot", 0x47B08C8Eu, 0xEui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitVectorField
==============
*/
void Load_ProcessStructLayout_ParticleModuleInitVectorField(void)
{
  if ( Load_RegisterStructSize("ParticleModuleInitVectorField", 0x6C222017u, 0x30ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleInitVectorField", 0x6C222017u, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitVectorField", 0x6C222017u, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitVectorField", 0x6C222017u, "ParticleLinkedAssetListDef", 0x50DDFCB8u, "m_linkedAssetList", 0x60B504E5u, 8ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleLinkedAssetListDef();
    Load_RegisterStructMemberSize("ParticleModuleInitVectorField", 0x6C222017u, "float", 0x9B987AFE, "m_areaScale", 0x7C59787u, 0x18ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitVectorField", 0x6C222017u, "float", 0x9B987AFE, "m_amplitudeScale", 0xAAFBF0BB, 0x1Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitVectorField", 0x6C222017u, "float", 0x9B987AFE, "m_frequencyScale", 0xBA4883CC, 0x20ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitVectorField", 0x6C222017u, "float", 0x9B987AFE, "m_noiseMaxRotation", 0xA5806BBE, 0x24ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitVectorField", 0x6C222017u, "float", 0x9B987AFE, "m_noiseFrequencyScale", 0x7CA91CC2u, 0x28ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitVectorField", 0x6C222017u, "float", 0x9B987AFE, "m_noiseScale", 0x81411C0u, 0x2Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleInitVolumetric
==============
*/
void Load_ProcessStructLayout_ParticleModuleInitVolumetric(void)
{
  if ( Load_RegisterStructSize("ParticleModuleInitVolumetric", 0x5745BE94u, 0x20ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleInitVolumetric", 0x5745BE94u, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitVolumetric", 0x5745BE94u, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleInitVolumetric", 0x5745BE94u, "float", 0x9B987AFE, "m_density", 0x712FB588u, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitVolumetric", 0x5745BE94u, "float", 0x9B987AFE, "m_falloff", 0x5B4FB202u, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitVolumetric", 0x5745BE94u, "float", 0x9B987AFE, "m_noiseAmplitude", 0xBFB7C161, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleInitVolumetric", 0x5745BE94u, "uint", 0x53A932A0u, "m_noiseMode", 0xA27A820B, 0x14ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleIntensityGraph
==============
*/
void Load_ProcessStructLayout_ParticleModuleIntensityGraph(void)
{
  if ( Load_RegisterStructSize("ParticleModuleIntensityGraph", 0x784B0527u, 0x30ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleIntensityGraph", 0x784B0527u, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleIntensityGraph", 0x784B0527u, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleIntensityGraph", 0x784B0527u, "bool", 0x1F095080u, "firstCurve", 0x841AFCFB, 8ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ParticleModuleIntensityGraph", 0x784B0527u, "ParticleCurveDef", 0x1150D52Cu, "m_curves", 0x79849AF0u, 0x10ui64, 0x20ui64, 2ui64, 0, 0);
    Load_ProcessStructLayout_ParticleCurveDef();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleParentVelocityGraph
==============
*/
void Load_ProcessStructLayout_ParticleModuleParentVelocityGraph(void)
{
  if ( Load_RegisterStructSize("ParticleModuleParentVelocityGraph", 0xD701614D, 0x30ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleParentVelocityGraph", 0xD701614D, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleParentVelocityGraph", 0xD701614D, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleParentVelocityGraph", 0xD701614D, "ParticleCurveDef", 0x1150D52Cu, "m_curves", 0x79849AF0u, 0x10ui64, 0x20ui64, 2ui64, 0, 0);
    Load_ProcessStructLayout_ParticleCurveDef();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModulePhysicsLight
==============
*/
void Load_ProcessStructLayout_ParticleModulePhysicsLight(void)
{
  if ( Load_RegisterStructSize("ParticleModulePhysicsLight", 0x1A5CAD83u, 0x20ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModulePhysicsLight", 0x1A5CAD83u, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModulePhysicsLight", 0x1A5CAD83u, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModulePhysicsLight", 0x1A5CAD83u, "bool", 0x1F095080u, "m_ignoreEmitterOrientation", 0x5292D7E6u, 8ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ParticleModulePhysicsLight", 0x1A5CAD83u, "bool", 0x1F095080u, "m_useSurfaceType", 0x57617BD2u, 9ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ParticleModulePhysicsLight", 0x1A5CAD83u, "ParticleLinkedAssetListDef", 0x50DDFCB8u, "m_linkedAssetList", 0x60B504E5u, 0x10ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleLinkedAssetListDef();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModulePhysicsRayCast
==============
*/
void Load_ProcessStructLayout_ParticleModulePhysicsRayCast(void)
{
  if ( Load_RegisterStructSize("ParticleModulePhysicsRayCast", 0xD2129636, 0x30ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModulePhysicsRayCast", 0xD2129636, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModulePhysicsRayCast", 0xD2129636, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModulePhysicsRayCast", 0xD2129636, "ParticleFloatRange", 0x7CB512AFu, "m_bounce", 0xB5CB430u, 8ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleFloatRange();
    Load_RegisterStructMemberSize("ParticleModulePhysicsRayCast", 0xD2129636, "bool", 0x1F095080u, "m_useItemClip", 0x504B8CEu, 0x28ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ParticleModulePhysicsRayCast", 0xD2129636, "bool", 0x1F095080u, "m_useSurfaceType", 0x57617BD2u, 0x29ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ParticleModulePhysicsRayCast", 0xD2129636, "bool", 0x1F095080u, "m_collideWithWater", 0x460AAA8Fu, 0x2Aui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ParticleModulePhysicsRayCast", 0xD2129636, "bool", 0x1F095080u, "m_ignoreContentItem", 0x35A9F21Cu, 0x2Bui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModulePositionGraph
==============
*/
void Load_ProcessStructLayout_ParticleModulePositionGraph(void)
{
  if ( Load_RegisterStructSize("ParticleModulePositionGraph", 0xECE49821, 0x70ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModulePositionGraph", 0xECE49821, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModulePositionGraph", 0xECE49821, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModulePositionGraph", 0xECE49821, "ParticleCurveDef", 0x1150D52Cu, "m_curves", 0x79849AF0u, 0x10ui64, 0x60ui64, 6ui64, 0, 0);
    Load_ProcessStructLayout_ParticleCurveDef();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleRotationGraph3D
==============
*/
void Load_ProcessStructLayout_ParticleModuleRotationGraph3D(void)
{
  if ( Load_RegisterStructSize("ParticleModuleRotationGraph3D", 0x8BEE1B4D, 0x70ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleRotationGraph3D", 0x8BEE1B4D, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleRotationGraph3D", 0x8BEE1B4D, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleRotationGraph3D", 0x8BEE1B4D, "bool", 0x1F095080u, "m_useRotationRate", 0xA87ABB5D, 8ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ParticleModuleRotationGraph3D", 0x8BEE1B4D, "ParticleCurveDef", 0x1150D52Cu, "m_curves", 0x79849AF0u, 0x10ui64, 0x60ui64, 6ui64, 0, 0);
    Load_ProcessStructLayout_ParticleCurveDef();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleRotationGraph
==============
*/
void Load_ProcessStructLayout_ParticleModuleRotationGraph(void)
{
  if ( Load_RegisterStructSize("ParticleModuleRotationGraph", 0xDD6A9CC0, 0x30ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleRotationGraph", 0xDD6A9CC0, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleRotationGraph", 0xDD6A9CC0, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleRotationGraph", 0xDD6A9CC0, "bool", 0x1F095080u, "m_useRotationRate", 0xA87ABB5D, 8ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ParticleModuleRotationGraph", 0xDD6A9CC0, "ParticleCurveDef", 0x1150D52Cu, "m_curves", 0x79849AF0u, 0x10ui64, 0x20ui64, 2ui64, 0, 0);
    Load_ProcessStructLayout_ParticleCurveDef();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleScaleByDistance
==============
*/
void Load_ProcessStructLayout_ParticleModuleScaleByDistance(void)
{
  if ( Load_RegisterStructSize("ParticleModuleScaleByDistance", 0x4B0ED07Au, 0x40ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleScaleByDistance", 0x4B0ED07Au, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleScaleByDistance", 0x4B0ED07Au, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleScaleByDistance", 0x4B0ED07Au, "ParticleCurveDef", 0x1150D52Cu, "m_curves", 0x79849AF0u, 0x10ui64, 0x20ui64, 2ui64, 0, 0);
    Load_ProcessStructLayout_ParticleCurveDef();
    Load_RegisterStructMemberSize("ParticleModuleScaleByDistance", 0x4B0ED07Au, "float", 0x9B987AFE, "m_maxDistance", 0x7BA36D2Fu, 0x30ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleScaleByDistance", 0x4B0ED07Au, "float", 0x9B987AFE, "m_scaleBegin", 0xA12B4B5u, 0x34ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleModuleScaleByDistance", 0x4B0ED07Au, "float", 0x9B987AFE, "m_scaleEnd", 0x4D34B61Du, 0x38ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleShaderGraph
==============
*/
void Load_ProcessStructLayout_ParticleModuleShaderGraph(void)
{
  if ( Load_RegisterStructSize("ParticleModuleShaderGraph", 0x8642B6Fu, 0xD0ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleShaderGraph", 0x8642B6Fu, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleShaderGraph", 0x8642B6Fu, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleShaderGraph", 0x8642B6Fu, "bool", 0x1F095080u, "firstCurve", 0x841AFCFB, 8ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ParticleModuleShaderGraph", 0x8642B6Fu, "ParticleCurveDef", 0x1150D52Cu, "m_curves", 0x79849AF0u, 0x10ui64, 0xC0ui64, 0xCui64, 0, 0);
    Load_ProcessStructLayout_ParticleCurveDef();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleSizeGraph
==============
*/
void Load_ProcessStructLayout_ParticleModuleSizeGraph(void)
{
  if ( Load_RegisterStructSize("ParticleModuleSizeGraph", 0x5CDAC737u, 0x90ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleSizeGraph", 0x5CDAC737u, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleSizeGraph", 0x5CDAC737u, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleSizeGraph", 0x5CDAC737u, "bool", 0x1F095080u, "firstCurve", 0x841AFCFB, 8ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ParticleModuleSizeGraph", 0x5CDAC737u, "ParticleCurveDef", 0x1150D52Cu, "m_curves", 0x79849AF0u, 0x10ui64, 0x60ui64, 6ui64, 0, 0);
    Load_ProcessStructLayout_ParticleCurveDef();
    Load_RegisterStructMemberSize("ParticleModuleSizeGraph", 0x5CDAC737u, "float4", 0xEF099DEE, "m_sizeBegin", 0x78A45516u, 0x70ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
    Load_RegisterStructMemberSize("ParticleModuleSizeGraph", 0x5CDAC737u, "float4", 0xEF099DEE, "m_sizeEnd", 0xE5AF187A, 0x80ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleSizeLerp
==============
*/
void Load_ProcessStructLayout_ParticleModuleSizeLerp(void)
{
  if ( Load_RegisterStructSize("ParticleModuleSizeLerp", 0x2A51FCDAu, 0x30ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleSizeLerp", 0x2A51FCDAu, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleSizeLerp", 0x2A51FCDAu, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleSizeLerp", 0x2A51FCDAu, "float4", 0xEF099DEE, "m_sizeBegin", 0x78A45516u, 0x10ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
    Load_RegisterStructMemberSize("ParticleModuleSizeLerp", 0x2A51FCDAu, "float4", 0xEF099DEE, "m_sizeEnd", 0xE5AF187A, 0x20ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleTemperatureGraph
==============
*/
void Load_ProcessStructLayout_ParticleModuleTemperatureGraph(void)
{
  if ( Load_RegisterStructSize("ParticleModuleTemperatureGraph", 0x3B70A9D0u, 0x30ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleTemperatureGraph", 0x3B70A9D0u, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleTemperatureGraph", 0x3B70A9D0u, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleTemperatureGraph", 0x3B70A9D0u, "bool", 0x1F095080u, "firstCurve", 0x841AFCFB, 8ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ParticleModuleTemperatureGraph", 0x3B70A9D0u, "ParticleCurveDef", 0x1150D52Cu, "m_curves", 0x79849AF0u, 0x10ui64, 0x20ui64, 2ui64, 0, 0);
    Load_ProcessStructLayout_ParticleCurveDef();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleTestAge
==============
*/
void Load_ProcessStructLayout_ParticleModuleTestAge(void)
{
  if ( Load_RegisterStructSize("ParticleModuleTestAge", 0x13865E8Bu, 0x80ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleTestAge", 0x13865E8Bu, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleTestAge", 0x13865E8Bu, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleTestAge", 0x13865E8Bu, "ushort", 0xB7BE387D, "m_moduleIndex", 0x4F92CEA4u, 8ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("ParticleModuleTestAge", 0x13865E8Bu, "ParticleUseOrientationOptions", 0x4C2178ABu, "m_useOrientationOptions", 0x5933CBA9u, 0xAui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleUseOrientationOptions", 0x4C2178ABu, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleTestAge", 0x13865E8Bu, "ParticleUseScaleOptions", 0x93FA0F6B, "m_useScaleOptions", 0xF2B7764D, 0xBui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleUseScaleOptions", 0x93FA0F6B, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleTestAge", 0x13865E8Bu, "ParticleUseVelocityOptions", 0x148371ACu, "m_useVelocityOptions", 0xD06137D6, 0xCui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleUseVelocityOptions", 0x148371ACu, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleTestAge", 0x13865E8Bu, "ParticleModifier", 0x323527EDu, "m_scaleModifier", 0x1E7C036Du, 0x10ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModifier();
    Load_RegisterStructMemberSize("ParticleModuleTestAge", 0x13865E8Bu, "ParticleModifier", 0x323527EDu, "m_velocityModifier", 0xC5FA5CEE, 0x30ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModifier();
    Load_RegisterStructMemberSize("ParticleModuleTestAge", 0x13865E8Bu, "ParticleModuleTestEventHandlerData", 0xB3E510C6, "m_eventHandlerData", 0xA2CB56CC, 0x50ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModuleTestEventHandlerData();
    Load_RegisterStructMemberSize("ParticleModuleTestAge", 0x13865E8Bu, "float", 0x9B987AFE, "m_age", 0xB3B28CB1, 0x70ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleTestBirth
==============
*/
void Load_ProcessStructLayout_ParticleModuleTestBirth(void)
{
  if ( Load_RegisterStructSize("ParticleModuleTestBirth", 0x78B30379u, 0x70ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleTestBirth", 0x78B30379u, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleTestBirth", 0x78B30379u, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleTestBirth", 0x78B30379u, "ushort", 0xB7BE387D, "m_moduleIndex", 0x4F92CEA4u, 8ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("ParticleModuleTestBirth", 0x78B30379u, "ParticleUseOrientationOptions", 0x4C2178ABu, "m_useOrientationOptions", 0x5933CBA9u, 0xAui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleUseOrientationOptions", 0x4C2178ABu, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleTestBirth", 0x78B30379u, "ParticleUseScaleOptions", 0x93FA0F6B, "m_useScaleOptions", 0xF2B7764D, 0xBui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleUseScaleOptions", 0x93FA0F6B, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleTestBirth", 0x78B30379u, "ParticleUseVelocityOptions", 0x148371ACu, "m_useVelocityOptions", 0xD06137D6, 0xCui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleUseVelocityOptions", 0x148371ACu, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleTestBirth", 0x78B30379u, "ParticleModifier", 0x323527EDu, "m_scaleModifier", 0x1E7C036Du, 0x10ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModifier();
    Load_RegisterStructMemberSize("ParticleModuleTestBirth", 0x78B30379u, "ParticleModifier", 0x323527EDu, "m_velocityModifier", 0xC5FA5CEE, 0x30ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModifier();
    Load_RegisterStructMemberSize("ParticleModuleTestBirth", 0x78B30379u, "ParticleModuleTestEventHandlerData", 0xB3E510C6, "m_eventHandlerData", 0xA2CB56CC, 0x50ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModuleTestEventHandlerData();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleTestDeath
==============
*/
void Load_ProcessStructLayout_ParticleModuleTestDeath(void)
{
  if ( Load_RegisterStructSize("ParticleModuleTestDeath", 0x47AC5834u, 0x70ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleTestDeath", 0x47AC5834u, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleTestDeath", 0x47AC5834u, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleTestDeath", 0x47AC5834u, "ushort", 0xB7BE387D, "m_moduleIndex", 0x4F92CEA4u, 8ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("ParticleModuleTestDeath", 0x47AC5834u, "ParticleUseOrientationOptions", 0x4C2178ABu, "m_useOrientationOptions", 0x5933CBA9u, 0xAui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleUseOrientationOptions", 0x4C2178ABu, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleTestDeath", 0x47AC5834u, "ParticleUseScaleOptions", 0x93FA0F6B, "m_useScaleOptions", 0xF2B7764D, 0xBui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleUseScaleOptions", 0x93FA0F6B, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleTestDeath", 0x47AC5834u, "ParticleUseVelocityOptions", 0x148371ACu, "m_useVelocityOptions", 0xD06137D6, 0xCui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleUseVelocityOptions", 0x148371ACu, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleTestDeath", 0x47AC5834u, "ParticleModifier", 0x323527EDu, "m_scaleModifier", 0x1E7C036Du, 0x10ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModifier();
    Load_RegisterStructMemberSize("ParticleModuleTestDeath", 0x47AC5834u, "ParticleModifier", 0x323527EDu, "m_velocityModifier", 0xC5FA5CEE, 0x30ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModifier();
    Load_RegisterStructMemberSize("ParticleModuleTestDeath", 0x47AC5834u, "ParticleModuleTestEventHandlerData", 0xB3E510C6, "m_eventHandlerData", 0xA2CB56CC, 0x50ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModuleTestEventHandlerData();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleTestEventHandlerData
==============
*/
void Load_ProcessStructLayout_ParticleModuleTestEventHandlerData(void)
{
  if ( Load_RegisterStructSize("ParticleModuleTestEventHandlerData", 0xB3E510C6, 0x20ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleTestEventHandlerData", 0xB3E510C6, "uint", 0x53A932A0u, "m_nextState", 0xA2EFAECE, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ParticleModuleTestEventHandlerData", 0xB3E510C6, "ParticleLinkedAssetListDef", 0x50DDFCB8u, "m_linkedAssetList", 0x60B504E5u, 8ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleLinkedAssetListDef();
    Load_RegisterStructMemberSize("ParticleModuleTestEventHandlerData", 0xB3E510C6, "bool", 0x1F095080u, "m_kill", 0xEBF39708, 0x18ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleTestGravity
==============
*/
void Load_ProcessStructLayout_ParticleModuleTestGravity(void)
{
  if ( Load_RegisterStructSize("ParticleModuleTestGravity", 0x1A1935FCu, 0x80ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleTestGravity", 0x1A1935FCu, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleTestGravity", 0x1A1935FCu, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleTestGravity", 0x1A1935FCu, "ushort", 0xB7BE387D, "m_moduleIndex", 0x4F92CEA4u, 8ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("ParticleModuleTestGravity", 0x1A1935FCu, "ParticleUseOrientationOptions", 0x4C2178ABu, "m_useOrientationOptions", 0x5933CBA9u, 0xAui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleUseOrientationOptions", 0x4C2178ABu, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleTestGravity", 0x1A1935FCu, "ParticleUseScaleOptions", 0x93FA0F6B, "m_useScaleOptions", 0xF2B7764D, 0xBui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleUseScaleOptions", 0x93FA0F6B, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleTestGravity", 0x1A1935FCu, "ParticleUseVelocityOptions", 0x148371ACu, "m_useVelocityOptions", 0xD06137D6, 0xCui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleUseVelocityOptions", 0x148371ACu, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleTestGravity", 0x1A1935FCu, "ParticleModifier", 0x323527EDu, "m_scaleModifier", 0x1E7C036Du, 0x10ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModifier();
    Load_RegisterStructMemberSize("ParticleModuleTestGravity", 0x1A1935FCu, "ParticleModifier", 0x323527EDu, "m_velocityModifier", 0xC5FA5CEE, 0x30ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModifier();
    Load_RegisterStructMemberSize("ParticleModuleTestGravity", 0x1A1935FCu, "ParticleModuleTestEventHandlerData", 0xB3E510C6, "m_eventHandlerData", 0xA2CB56CC, 0x50ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModuleTestEventHandlerData();
    Load_RegisterStructMemberSize("ParticleModuleTestGravity", 0x1A1935FCu, "ParticleGravityState", 0x5E85D1E7u, "m_gravityState", 0xF0544E59, 0x70ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleGravityState", 0x5E85D1E7u, 4ui64, 4ui64);
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleTestImpact
==============
*/
void Load_ProcessStructLayout_ParticleModuleTestImpact(void)
{
  if ( Load_RegisterStructSize("ParticleModuleTestImpact", 0x31CBD71Cu, 0x80ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleTestImpact", 0x31CBD71Cu, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleTestImpact", 0x31CBD71Cu, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleTestImpact", 0x31CBD71Cu, "ushort", 0xB7BE387D, "m_moduleIndex", 0x4F92CEA4u, 8ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("ParticleModuleTestImpact", 0x31CBD71Cu, "ParticleUseOrientationOptions", 0x4C2178ABu, "m_useOrientationOptions", 0x5933CBA9u, 0xAui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleUseOrientationOptions", 0x4C2178ABu, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleTestImpact", 0x31CBD71Cu, "ParticleUseScaleOptions", 0x93FA0F6B, "m_useScaleOptions", 0xF2B7764D, 0xBui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleUseScaleOptions", 0x93FA0F6B, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleTestImpact", 0x31CBD71Cu, "ParticleUseVelocityOptions", 0x148371ACu, "m_useVelocityOptions", 0xD06137D6, 0xCui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleUseVelocityOptions", 0x148371ACu, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleTestImpact", 0x31CBD71Cu, "ParticleModifier", 0x323527EDu, "m_scaleModifier", 0x1E7C036Du, 0x10ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModifier();
    Load_RegisterStructMemberSize("ParticleModuleTestImpact", 0x31CBD71Cu, "ParticleModifier", 0x323527EDu, "m_velocityModifier", 0xC5FA5CEE, 0x30ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModifier();
    Load_RegisterStructMemberSize("ParticleModuleTestImpact", 0x31CBD71Cu, "ParticleModuleTestEventHandlerData", 0xB3E510C6, "m_eventHandlerData", 0xA2CB56CC, 0x50ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModuleTestEventHandlerData();
    Load_RegisterStructMemberSize("ParticleModuleTestImpact", 0x31CBD71Cu, "ParticleImpactDirection", 0x9697BE8B, "m_impactDirection", 0xA8AB2755, 0x70ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleImpactDirection", 0x9697BE8B, 4ui64, 4ui64);
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleTestPos
==============
*/
void Load_ProcessStructLayout_ParticleModuleTestPos(void)
{
  if ( Load_RegisterStructSize("ParticleModuleTestPos", 0xBACB65Cu, 0x80ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleTestPos", 0xBACB65Cu, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleTestPos", 0xBACB65Cu, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleTestPos", 0xBACB65Cu, "ushort", 0xB7BE387D, "m_moduleIndex", 0x4F92CEA4u, 8ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("ParticleModuleTestPos", 0xBACB65Cu, "ParticleUseOrientationOptions", 0x4C2178ABu, "m_useOrientationOptions", 0x5933CBA9u, 0xAui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleUseOrientationOptions", 0x4C2178ABu, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleTestPos", 0xBACB65Cu, "ParticleUseScaleOptions", 0x93FA0F6B, "m_useScaleOptions", 0xF2B7764D, 0xBui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleUseScaleOptions", 0x93FA0F6B, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleTestPos", 0xBACB65Cu, "ParticleUseVelocityOptions", 0x148371ACu, "m_useVelocityOptions", 0xD06137D6, 0xCui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleUseVelocityOptions", 0x148371ACu, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleTestPos", 0xBACB65Cu, "ParticleModifier", 0x323527EDu, "m_scaleModifier", 0x1E7C036Du, 0x10ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModifier();
    Load_RegisterStructMemberSize("ParticleModuleTestPos", 0xBACB65Cu, "ParticleModifier", 0x323527EDu, "m_velocityModifier", 0xC5FA5CEE, 0x30ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModifier();
    Load_RegisterStructMemberSize("ParticleModuleTestPos", 0xBACB65Cu, "ParticleModuleTestEventHandlerData", 0xB3E510C6, "m_eventHandlerData", 0xA2CB56CC, 0x50ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModuleTestEventHandlerData();
    Load_RegisterStructMemberSize("ParticleModuleTestPos", 0xBACB65Cu, "float", 0x9B987AFE, "m_posZ", 0x4C7FBB68u, 0x70ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleTestTimeInState
==============
*/
void Load_ProcessStructLayout_ParticleModuleTestTimeInState(void)
{
  if ( Load_RegisterStructSize("ParticleModuleTestTimeInState", 0xA61EDEBu, 0x80ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleTestTimeInState", 0xA61EDEBu, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleTestTimeInState", 0xA61EDEBu, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleTestTimeInState", 0xA61EDEBu, "ushort", 0xB7BE387D, "m_moduleIndex", 0x4F92CEA4u, 8ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("ParticleModuleTestTimeInState", 0xA61EDEBu, "ParticleUseOrientationOptions", 0x4C2178ABu, "m_useOrientationOptions", 0x5933CBA9u, 0xAui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleUseOrientationOptions", 0x4C2178ABu, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleTestTimeInState", 0xA61EDEBu, "ParticleUseScaleOptions", 0x93FA0F6B, "m_useScaleOptions", 0xF2B7764D, 0xBui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleUseScaleOptions", 0x93FA0F6B, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleTestTimeInState", 0xA61EDEBu, "ParticleUseVelocityOptions", 0x148371ACu, "m_useVelocityOptions", 0xD06137D6, 0xCui64, 1ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleUseVelocityOptions", 0x148371ACu, 1ui64, 1ui64);
    Load_RegisterStructMemberSize("ParticleModuleTestTimeInState", 0xA61EDEBu, "ParticleModifier", 0x323527EDu, "m_scaleModifier", 0x1E7C036Du, 0x10ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModifier();
    Load_RegisterStructMemberSize("ParticleModuleTestTimeInState", 0xA61EDEBu, "ParticleModifier", 0x323527EDu, "m_velocityModifier", 0xC5FA5CEE, 0x30ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModifier();
    Load_RegisterStructMemberSize("ParticleModuleTestTimeInState", 0xA61EDEBu, "ParticleModuleTestEventHandlerData", 0xB3E510C6, "m_eventHandlerData", 0xA2CB56CC, 0x50ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModuleTestEventHandlerData();
    Load_RegisterStructMemberSize("ParticleModuleTestTimeInState", 0xA61EDEBu, "ParticleFloatRange", 0x7CB512AFu, "m_timeInState", 0x197E122Du, 0x70ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleFloatRange();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleType
==============
*/
void Load_ProcessStructLayout_ParticleModuleType(void)
{
  Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
}

/*
==============
Load_ProcessStructLayout_ParticleModuleTypeDef
==============
*/
void Load_ProcessStructLayout_ParticleModuleTypeDef(void)
{
  if ( Load_RegisterStructSize("ParticleModuleTypeDef", 0x860D614F, 0xE0ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleInitAtlas", 0xD4DC4CA9, "initAtlas", 0x3CA36773u, 0i64, 0x40ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModuleInitAtlas();
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleInitAttributes", 0x795C0B6Fu, "initAttributes", 0x324D8BDu, 0i64, 0x70ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModuleInitAttributes();
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleInitBeam", 0xD47A33E9, "initBeam", 0xA760C037, 0i64, 0x80ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModuleInitBeam();
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleInitCameraOffset", 0xFE728398, "initCameraOffset", 0x6BA6BC6Au, 0i64, 0x10ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ParticleModuleInitCameraOffset", 0xFE728398, 0x10ui64, 0x10ui64) )
    {
      Load_RegisterStructMemberSize("ParticleModuleInitCameraOffset", 0xFE728398, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
      Load_RegisterStructMemberSize("ParticleModuleInitCameraOffset", 0xFE728398, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    }
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleInitCloud", 0xB0CA0FD7, "initCloud", 0x50B10DADu, 0i64, 0x10ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ParticleModuleInitCloud", 0xB0CA0FD7, 0x10ui64, 0x10ui64) )
    {
      Load_RegisterStructMemberSize("ParticleModuleInitCloud", 0xB0CA0FD7, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
      Load_RegisterStructMemberSize("ParticleModuleInitCloud", 0xB0CA0FD7, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    }
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleInitDecal", 0xF96671EB, "initDecal", 0x1DCD73B5u, 0i64, 0x40ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModuleInitDecal();
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleInitFlare", 0xDC68D3F0, "initFlare", 0xD1594736, 0i64, 0x90ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModuleInitFlare();
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleInitGeoTrail", 0xBBF404C5, "initGeoTrail", 0x1A8BDBC3u, 0i64, 0x40ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModuleInitGeoTrail();
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleInitKillWrapBox", 0xE1F3692B, "initKillWrapBox", 0xCF9BEB55, 0i64, 0x30ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModuleInitKillWrapBox();
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleInitLightOmni", 0xD5194893, "initLightOmni", 0x57BA0D3Du, 0i64, 0x50ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModuleInitLightOmni();
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleInitLightSpot", 0x8A9A6D48, "initLightSpot", 0x545C2F52u, 0i64, 0x60ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModuleInitLightSpot();
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleInitMaterial", 0x78BA75F7u, "initMaterial", 0x93228ECD, 0i64, 0xE0ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModuleInitMaterial();
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleInitMirrorTexture", 0xC3FCCEAu, "initMirrorTexture", 0x43181ECCu, 0i64, 0x10ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ParticleModuleInitMirrorTexture", 0xC3FCCEAu, 0x10ui64, 0x10ui64) )
    {
      Load_RegisterStructMemberSize("ParticleModuleInitMirrorTexture", 0xC3FCCEAu, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
      Load_RegisterStructMemberSize("ParticleModuleInitMirrorTexture", 0xC3FCCEAu, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
      Load_RegisterStructMemberSize("ParticleModuleInitMirrorTexture", 0xC3FCCEAu, "ParticleMirrorTextureType", 0xBE8E742C, "m_mirrorHorizontal", 0x34ACD751u, 8ui64, 4ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleMirrorTextureType", 0xBE8E742C, 4ui64, 4ui64);
      Load_RegisterStructMemberSize("ParticleModuleInitMirrorTexture", 0xC3FCCEAu, "ParticleMirrorTextureType", 0xBE8E742C, "m_mirrorVertical", 0x23766E1Fu, 0xCui64, 4ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleMirrorTextureType", 0xBE8E742C, 4ui64, 4ui64);
    }
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleInitModel", 0x61C8AC33u, "initModel", 0xC6733F85, 0i64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModuleInitModel();
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleInitOcclusionQuery", 0x8664F901, "initOcclusionQuery", 0x363C22DFu, 0i64, 0x30ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModuleInitOcclusionQuery();
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleInitOrientedSprite", 0xC08D413F, "initOrientedSprite", 0x9D944C65, 0i64, 0x20ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ParticleModuleInitOrientedSprite", 0xC08D413F, 0x20ui64, 0x10ui64) )
    {
      Load_RegisterStructMemberSize("ParticleModuleInitOrientedSprite", 0xC08D413F, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
      Load_RegisterStructMemberSize("ParticleModuleInitOrientedSprite", 0xC08D413F, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
      Load_RegisterStructMemberSize("ParticleModuleInitOrientedSprite", 0xC08D413F, "float4", 0xEF099DEE, "m_orientationQuat", 0x17B7D7ABu, 0x10ui64, 0x10ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_float4();
    }
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleInitParticleSim", 0xFEBF1887, "initParticleSim", 0x9896E4B1, 0i64, 0x30ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModuleInitParticleSim();
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleInitPlayerFacing", 0xCF27FCC1, "initPlayerFacing", 0x94252C37, 0i64, 0x10ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ParticleModuleInitPlayerFacing", 0xCF27FCC1, 0x10ui64, 0x10ui64) )
    {
      Load_RegisterStructMemberSize("ParticleModuleInitPlayerFacing", 0xCF27FCC1, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
      Load_RegisterStructMemberSize("ParticleModuleInitPlayerFacing", 0xCF27FCC1, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    }
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleInitRelativeVelocity", 0x8ADA7EDD, "initRelativeVelocity", 0x5FB078E3u, 0i64, 0x10ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ParticleModuleInitRelativeVelocity", 0x8ADA7EDD, 0x10ui64, 0x10ui64) )
    {
      Load_RegisterStructMemberSize("ParticleModuleInitRelativeVelocity", 0x8ADA7EDD, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
      Load_RegisterStructMemberSize("ParticleModuleInitRelativeVelocity", 0x8ADA7EDD, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
      Load_RegisterStructMemberSize("ParticleModuleInitRelativeVelocity", 0x8ADA7EDD, "ParticleRelativeVelocityType", 0x9E0EA963, "m_velocityType", 0x2A4337E1u, 8ui64, 4ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleRelativeVelocityType", 0x9E0EA963, 4ui64, 4ui64);
      Load_RegisterStructMemberSize("ParticleModuleInitRelativeVelocity", 0x8ADA7EDD, "bool", 0x1F095080u, "m_useBoltInfo", 0xDEAD3F60, 0xCui64, 1ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_bool();
    }
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleInitRotation", 0xD6666A7E, "initRotation", 0xB9B6F490, 0i64, 0x20ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ParticleModuleInitRotation", 0xD6666A7E, 0x20ui64, 0x10ui64) )
    {
      Load_RegisterStructMemberSize("ParticleModuleInitRotation", 0xD6666A7E, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
      Load_RegisterStructMemberSize("ParticleModuleInitRotation", 0xD6666A7E, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
      Load_RegisterStructMemberSize("ParticleModuleInitRotation", 0xD6666A7E, "ParticleFloatRange", 0x7CB512AFu, "m_rotationAngle", 0xCFED5787, 0x10ui64, 8ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ParticleFloatRange();
      Load_RegisterStructMemberSize("ParticleModuleInitRotation", 0xD6666A7E, "ParticleFloatRange", 0x7CB512AFu, "m_rotationRate", 0x252239F4u, 0x18ui64, 8ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ParticleFloatRange();
    }
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleInitRotation3D", 0x56BDD10Fu, "initRotation3D", 0x78B6A87Du, 0i64, 0x50ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModuleInitRotation3D();
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleInitRunner", 0xB13A35C2, "initRunner", 0x2851E084u, 0i64, 0x70ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModuleInitRunner();
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleInitSound", 0x900C991u, "initSound", 0x2EC6E5B3u, 0i64, 0x20ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ParticleModuleInitSound", 0x900C991u, 0x20ui64, 0x10ui64) )
    {
      Load_RegisterStructMemberSize("ParticleModuleInitSound", 0x900C991u, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
      Load_RegisterStructMemberSize("ParticleModuleInitSound", 0x900C991u, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
      Load_RegisterStructMemberSize("ParticleModuleInitSound", 0x900C991u, "ParticleLinkedAssetListDef", 0x50DDFCB8u, "m_linkedAssetList", 0x60B504E5u, 0x10ui64, 0x10ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ParticleLinkedAssetListDef();
    }
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleInitSpawn", 0xD1876F81, "initSpawn", 0x3FF3C6D3u, 0i64, 0x20ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ParticleModuleInitSpawn", 0xD1876F81, 0x20ui64, 0x10ui64) )
    {
      Load_RegisterStructMemberSize("ParticleModuleInitSpawn", 0xD1876F81, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
      Load_RegisterStructMemberSize("ParticleModuleInitSpawn", 0xD1876F81, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
      Load_RegisterStructMemberSize("ParticleModuleInitSpawn", 0xD1876F81, "ParticleCurveDef", 0x1150D52Cu, "m_curves", 0x79849AF0u, 0x10ui64, 0x10ui64, 1ui64, 0, 0);
      Load_ProcessStructLayout_ParticleCurveDef();
    }
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleInitSpawnShapeBox", 0xED77BA97, "initSpawnShapeBox", 0xD13F4A7D, 0i64, 0xC0ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModuleInitSpawnShapeBox();
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleInitSpawnShapeCylinder", 0x6B886EEu, "initSpawnShapeCylinder", 0x1AF7FE5Cu, 0i64, 0xA0ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModuleInitSpawnShapeCylinder();
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleInitSpawnShapeEllipsoid", 0x8807AA03, "initSpawnShapeEllipsoid", 0xEB456171, 0i64, 0xB0ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModuleInitSpawnShapeEllipsoid();
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleInitSpawnShapeMesh", 0xCF38B2FB, "initSpawnShapeMesh", 0x685005B1u, 0i64, 0x80ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModuleInitSpawnShapeMesh();
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleInitSpawnShapeSphere", 0xFCCC5E1B, "initSpawnShapeSphere", 0x5ECCDu, 0i64, 0x80ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModuleInitSpawnShapeSphere();
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleInitTail", 0x8D3A40BA, "initTail", 0xEE8B983C, 0i64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModuleInitTail();
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleInitVectorField", 0x6C222017u, "initVectorField", 0x81044B91, 0i64, 0x30ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModuleInitVectorField();
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleInitVolumetric", 0x5745BE94u, "initVolumetric", 0xE85923BE, 0i64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModuleInitVolumetric();
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleInitDismember", 0x613A8586u, "initDismember", 0xBA3444E0, 0i64, 0x10ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ParticleModuleInitDismember", 0x613A8586u, 0x10ui64, 0x10ui64) )
    {
      Load_RegisterStructMemberSize("ParticleModuleInitDismember", 0x613A8586u, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
      Load_RegisterStructMemberSize("ParticleModuleInitDismember", 0x613A8586u, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    }
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleAttractor", 0x751C157Eu, "attractor", 0x4DB487A8u, 0i64, 0x30ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModuleAttractor();
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleColorGraph", 0xE90EE0C9, "colorGraph", 0xFBE98987, 0i64, 0x90ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModuleColorGraph();
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleColorLerp", 0x8CBB0F24, "colorLerp", 0xE360898A, 0i64, 0x30ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ParticleModuleColorLerp", 0x8CBB0F24, 0x30ui64, 0x10ui64) )
    {
      Load_RegisterStructMemberSize("ParticleModuleColorLerp", 0x8CBB0F24, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
      Load_RegisterStructMemberSize("ParticleModuleColorLerp", 0x8CBB0F24, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
      Load_RegisterStructMemberSize("ParticleModuleColorLerp", 0x8CBB0F24, "float4", 0xEF099DEE, "m_colorBegin", 0x14DF0D30u, 0x10ui64, 0x10ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_float4();
      Load_RegisterStructMemberSize("ParticleModuleColorLerp", 0x8CBB0F24, "float4", 0xEF099DEE, "m_colorEnd", 0xDBCB7C34, 0x20ui64, 0x10ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_float4();
    }
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleEmissionGraph", 0x4A9A4075u, "emissionGraph", 0xF8C51C5F, 0i64, 0x30ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ParticleModuleEmissionGraph", 0x4A9A4075u, 0x30ui64, 0x10ui64) )
    {
      Load_RegisterStructMemberSize("ParticleModuleEmissionGraph", 0x4A9A4075u, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
      Load_RegisterStructMemberSize("ParticleModuleEmissionGraph", 0x4A9A4075u, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
      Load_RegisterStructMemberSize("ParticleModuleEmissionGraph", 0x4A9A4075u, "ParticleCurveDef", 0x1150D52Cu, "m_curves", 0x79849AF0u, 0x10ui64, 0x20ui64, 2ui64, 0, 0);
      Load_ProcessStructLayout_ParticleCurveDef();
    }
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleEmissiveGraph", 0x20382169u, "emissiveGraph", 0x141C050Fu, 0i64, 0xB0ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ParticleModuleEmissiveGraph", 0x20382169u, 0xB0ui64, 0x10ui64) )
    {
      Load_RegisterStructMemberSize("ParticleModuleEmissiveGraph", 0x20382169u, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
      Load_RegisterStructMemberSize("ParticleModuleEmissiveGraph", 0x20382169u, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
      Load_RegisterStructMemberSize("ParticleModuleEmissiveGraph", 0x20382169u, "bool", 0x1F095080u, "firstCurve", 0x841AFCFB, 8ui64, 1ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_bool();
      Load_RegisterStructMemberSize("ParticleModuleEmissiveGraph", 0x20382169u, "ParticleCurveDef", 0x1150D52Cu, "m_curves", 0x79849AF0u, 0x10ui64, 0xA0ui64, 0xAui64, 0, 0);
      Load_ProcessStructLayout_ParticleCurveDef();
    }
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleShaderGraph", 0x8642B6Fu, "shaderGraph", 0x397B6251u, 0i64, 0xD0ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ParticleModuleShaderGraph", 0x8642B6Fu, 0xD0ui64, 0x10ui64) )
    {
      Load_RegisterStructMemberSize("ParticleModuleShaderGraph", 0x8642B6Fu, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
      Load_RegisterStructMemberSize("ParticleModuleShaderGraph", 0x8642B6Fu, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
      Load_RegisterStructMemberSize("ParticleModuleShaderGraph", 0x8642B6Fu, "bool", 0x1F095080u, "firstCurve", 0x841AFCFB, 8ui64, 1ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_bool();
      Load_RegisterStructMemberSize("ParticleModuleShaderGraph", 0x8642B6Fu, "ParticleCurveDef", 0x1150D52Cu, "m_curves", 0x79849AF0u, 0x10ui64, 0xC0ui64, 0xCui64, 0, 0);
      Load_ProcessStructLayout_ParticleCurveDef();
    }
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleForce", 0x4806CDDFu, "force", 0x2CE0D981u, 0i64, 0x30ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ParticleModuleForce", 0x4806CDDFu, 0x30ui64, 0x10ui64) )
    {
      Load_RegisterStructMemberSize("ParticleModuleForce", 0x4806CDDFu, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
      Load_RegisterStructMemberSize("ParticleModuleForce", 0x4806CDDFu, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
      Load_RegisterStructMemberSize("ParticleModuleForce", 0x4806CDDFu, "float4", 0xEF099DEE, "m_forceMin", 0x707B85AFu, 0x10ui64, 0x10ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_float4();
      Load_RegisterStructMemberSize("ParticleModuleForce", 0x4806CDDFu, "float4", 0xEF099DEE, "m_forceMax", 0x687B7951u, 0x20ui64, 0x10ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_float4();
    }
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleForceDragGraph", 0x1A2C8B83u, "forceDragGraph", 0xE1E18321, 0i64, 0x30ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ParticleModuleForceDragGraph", 0x1A2C8B83u, 0x30ui64, 0x10ui64) )
    {
      Load_RegisterStructMemberSize("ParticleModuleForceDragGraph", 0x1A2C8B83u, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
      Load_RegisterStructMemberSize("ParticleModuleForceDragGraph", 0x1A2C8B83u, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
      Load_RegisterStructMemberSize("ParticleModuleForceDragGraph", 0x1A2C8B83u, "ParticleCurveDef", 0x1150D52Cu, "m_curves", 0x79849AF0u, 0x10ui64, 0x20ui64, 2ui64, 0, 0);
      Load_ProcessStructLayout_ParticleCurveDef();
    }
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleGravity", 0xC9B53194, "gravity", 0x32004A6Au, 0i64, 0x10ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ParticleModuleGravity", 0xC9B53194, 0x10ui64, 0x10ui64) )
    {
      Load_RegisterStructMemberSize("ParticleModuleGravity", 0xC9B53194, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
      Load_RegisterStructMemberSize("ParticleModuleGravity", 0xC9B53194, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
      Load_RegisterStructMemberSize("ParticleModuleGravity", 0xC9B53194, "ParticleFloatRange", 0x7CB512AFu, "m_gravityPercentage", 0x60F63862u, 8ui64, 8ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ParticleFloatRange();
    }
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleIntensityGraph", 0x784B0527u, "intensityGraph", 0xAC64A8B1, 0i64, 0x30ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ParticleModuleIntensityGraph", 0x784B0527u, 0x30ui64, 0x10ui64) )
    {
      Load_RegisterStructMemberSize("ParticleModuleIntensityGraph", 0x784B0527u, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
      Load_RegisterStructMemberSize("ParticleModuleIntensityGraph", 0x784B0527u, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
      Load_RegisterStructMemberSize("ParticleModuleIntensityGraph", 0x784B0527u, "bool", 0x1F095080u, "firstCurve", 0x841AFCFB, 8ui64, 1ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_bool();
      Load_RegisterStructMemberSize("ParticleModuleIntensityGraph", 0x784B0527u, "ParticleCurveDef", 0x1150D52Cu, "m_curves", 0x79849AF0u, 0x10ui64, 0x20ui64, 2ui64, 0, 0);
      Load_ProcessStructLayout_ParticleCurveDef();
    }
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleTemperatureGraph", 0x3B70A9D0u, "temperatureGraph", 0x9FDF0CE6, 0i64, 0x30ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ParticleModuleTemperatureGraph", 0x3B70A9D0u, 0x30ui64, 0x10ui64) )
    {
      Load_RegisterStructMemberSize("ParticleModuleTemperatureGraph", 0x3B70A9D0u, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
      Load_RegisterStructMemberSize("ParticleModuleTemperatureGraph", 0x3B70A9D0u, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
      Load_RegisterStructMemberSize("ParticleModuleTemperatureGraph", 0x3B70A9D0u, "bool", 0x1F095080u, "firstCurve", 0x841AFCFB, 8ui64, 1ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_bool();
      Load_RegisterStructMemberSize("ParticleModuleTemperatureGraph", 0x3B70A9D0u, "ParticleCurveDef", 0x1150D52Cu, "m_curves", 0x79849AF0u, 0x10ui64, 0x20ui64, 2ui64, 0, 0);
      Load_ProcessStructLayout_ParticleCurveDef();
    }
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleParentVelocityGraph", 0xD701614D, "parentVelocityGraph", 0xB10B217B, 0i64, 0x30ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ParticleModuleParentVelocityGraph", 0xD701614D, 0x30ui64, 0x10ui64) )
    {
      Load_RegisterStructMemberSize("ParticleModuleParentVelocityGraph", 0xD701614D, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
      Load_RegisterStructMemberSize("ParticleModuleParentVelocityGraph", 0xD701614D, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
      Load_RegisterStructMemberSize("ParticleModuleParentVelocityGraph", 0xD701614D, "ParticleCurveDef", 0x1150D52Cu, "m_curves", 0x79849AF0u, 0x10ui64, 0x20ui64, 2ui64, 0, 0);
      Load_ProcessStructLayout_ParticleCurveDef();
    }
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModulePhysicsLight", 0x1A5CAD83u, "physicsLight", 0x8CB0E149, 0i64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModulePhysicsLight();
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModulePhysicsRayCast", 0xD2129636, "physicsRayCast", 0xBAF11224, 0i64, 0x30ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModulePhysicsRayCast();
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModulePositionGraph", 0xECE49821, "positionGraph", 0xFC808AAB, 0i64, 0x70ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ParticleModulePositionGraph", 0xECE49821, 0x70ui64, 0x10ui64) )
    {
      Load_RegisterStructMemberSize("ParticleModulePositionGraph", 0xECE49821, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
      Load_RegisterStructMemberSize("ParticleModulePositionGraph", 0xECE49821, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
      Load_RegisterStructMemberSize("ParticleModulePositionGraph", 0xECE49821, "ParticleCurveDef", 0x1150D52Cu, "m_curves", 0x79849AF0u, 0x10ui64, 0x60ui64, 6ui64, 0, 0);
      Load_ProcessStructLayout_ParticleCurveDef();
    }
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleRotationGraph", 0xDD6A9CC0, "rotationGraph", 0x291ABCBAu, 0i64, 0x30ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ParticleModuleRotationGraph", 0xDD6A9CC0, 0x30ui64, 0x10ui64) )
    {
      Load_RegisterStructMemberSize("ParticleModuleRotationGraph", 0xDD6A9CC0, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
      Load_RegisterStructMemberSize("ParticleModuleRotationGraph", 0xDD6A9CC0, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
      Load_RegisterStructMemberSize("ParticleModuleRotationGraph", 0xDD6A9CC0, "bool", 0x1F095080u, "m_useRotationRate", 0xA87ABB5D, 8ui64, 1ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_bool();
      Load_RegisterStructMemberSize("ParticleModuleRotationGraph", 0xDD6A9CC0, "ParticleCurveDef", 0x1150D52Cu, "m_curves", 0x79849AF0u, 0x10ui64, 0x20ui64, 2ui64, 0, 0);
      Load_ProcessStructLayout_ParticleCurveDef();
    }
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleRotationGraph3D", 0x8BEE1B4D, "rotationGraph3D", 0xDE5C5603, 0i64, 0x70ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ParticleModuleRotationGraph3D", 0x8BEE1B4D, 0x70ui64, 0x10ui64) )
    {
      Load_RegisterStructMemberSize("ParticleModuleRotationGraph3D", 0x8BEE1B4D, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
      Load_RegisterStructMemberSize("ParticleModuleRotationGraph3D", 0x8BEE1B4D, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
      Load_RegisterStructMemberSize("ParticleModuleRotationGraph3D", 0x8BEE1B4D, "bool", 0x1F095080u, "m_useRotationRate", 0xA87ABB5D, 8ui64, 1ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_bool();
      Load_RegisterStructMemberSize("ParticleModuleRotationGraph3D", 0x8BEE1B4D, "ParticleCurveDef", 0x1150D52Cu, "m_curves", 0x79849AF0u, 0x10ui64, 0x60ui64, 6ui64, 0, 0);
      Load_ProcessStructLayout_ParticleCurveDef();
    }
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleScaleByDistance", 0x4B0ED07Au, "scaleByDistance", 0x3CF6CB1Cu, 0i64, 0x40ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModuleScaleByDistance();
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleSizeGraph", 0x5CDAC737u, "sizeGraph", 0xB487AE61, 0i64, 0x90ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModuleSizeGraph();
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleSizeLerp", 0x2A51FCDAu, "sizeLerp", 0x35FCA8CCu, 0i64, 0x30ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ParticleModuleSizeLerp", 0x2A51FCDAu, 0x30ui64, 0x10ui64) )
    {
      Load_RegisterStructMemberSize("ParticleModuleSizeLerp", 0x2A51FCDAu, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
      Load_RegisterStructMemberSize("ParticleModuleSizeLerp", 0x2A51FCDAu, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
      Load_RegisterStructMemberSize("ParticleModuleSizeLerp", 0x2A51FCDAu, "float4", 0xEF099DEE, "m_sizeBegin", 0x78A45516u, 0x10ui64, 0x10ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_float4();
      Load_RegisterStructMemberSize("ParticleModuleSizeLerp", 0x2A51FCDAu, "float4", 0xEF099DEE, "m_sizeEnd", 0xE5AF187A, 0x20ui64, 0x10ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_float4();
    }
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleVelocityGraph", 0x59B3C72Du, "velocityGraph", 0xC08B7B9B, 0i64, 0x90ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModuleVelocityGraph();
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleVectorFieldGraph", 0x7EA6A95Fu, "vectorFieldGraph", 0xB55DF181, 0i64, 0x30ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ParticleModuleVectorFieldGraph", 0x7EA6A95Fu, 0x30ui64, 0x10ui64) )
    {
      Load_RegisterStructMemberSize("ParticleModuleVectorFieldGraph", 0x7EA6A95Fu, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
      Load_RegisterStructMemberSize("ParticleModuleVectorFieldGraph", 0x7EA6A95Fu, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
      Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
      Load_RegisterStructMemberSize("ParticleModuleVectorFieldGraph", 0x7EA6A95Fu, "bool", 0x1F095080u, "firstCurve", 0x841AFCFB, 8ui64, 1ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_bool();
      Load_RegisterStructMemberSize("ParticleModuleVectorFieldGraph", 0x7EA6A95Fu, "ParticleCurveDef", 0x1150D52Cu, "m_curves", 0x79849AF0u, 0x10ui64, 0x20ui64, 2ui64, 0, 0);
      Load_ProcessStructLayout_ParticleCurveDef();
    }
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleTestAge", 0x13865E8Bu, "testAge", 0xA12D8F0D, 0i64, 0x80ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModuleTestAge();
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleTestBirth", 0x78B30379u, "testBirth", 0xC59F3E6F, 0i64, 0x70ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModuleTestBirth();
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleTestDeath", 0x47AC5834u, "testDeath", 0x7DBD1162u, 0i64, 0x70ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModuleTestDeath();
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleTestGravity", 0x1A1935FCu, "testGravity", 0xC24D0636, 0i64, 0x80ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModuleTestGravity();
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleTestImpact", 0x31CBD71Cu, "testImpact", 0x784A75B2u, 0i64, 0x80ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModuleTestImpact();
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleTestPos", 0xBACB65Cu, "testPos", 0x995253DA, 0i64, 0x80ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModuleTestPos();
    Load_RegisterStructMemberSize("ParticleModuleTypeDef", 0x860D614F, "ParticleModuleTestTimeInState", 0xA61EDEBu, "testTimeInState", 0x322D4151u, 0i64, 0x80ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ParticleModuleTestTimeInState();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleVectorFieldGraph
==============
*/
void Load_ProcessStructLayout_ParticleModuleVectorFieldGraph(void)
{
  if ( Load_RegisterStructSize("ParticleModuleVectorFieldGraph", 0x7EA6A95Fu, 0x30ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleVectorFieldGraph", 0x7EA6A95Fu, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleVectorFieldGraph", 0x7EA6A95Fu, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleVectorFieldGraph", 0x7EA6A95Fu, "bool", 0x1F095080u, "firstCurve", 0x841AFCFB, 8ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ParticleModuleVectorFieldGraph", 0x7EA6A95Fu, "ParticleCurveDef", 0x1150D52Cu, "m_curves", 0x79849AF0u, 0x10ui64, 0x20ui64, 2ui64, 0, 0);
    Load_ProcessStructLayout_ParticleCurveDef();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleModuleVelocityGraph
==============
*/
void Load_ProcessStructLayout_ParticleModuleVelocityGraph(void)
{
  if ( Load_RegisterStructSize("ParticleModuleVelocityGraph", 0x59B3C72Du, 0x90ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleModuleVelocityGraph", 0x59B3C72Du, "ParticleModuleType", 0xEEE1A072, "m_type", 0x3FA26B0u, 0i64, 2ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
    Load_RegisterStructMemberSize("ParticleModuleVelocityGraph", 0x59B3C72Du, "ParticleModuleFlags", 0xFE179B9B, "m_flags", 0x37BD24A9u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleModuleFlags", 0xFE179B9B, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleModuleVelocityGraph", 0x59B3C72Du, "ParticleCurveDef", 0x1150D52Cu, "m_curves", 0x79849AF0u, 0x10ui64, 0x60ui64, 6ui64, 0, 0);
    Load_ProcessStructLayout_ParticleCurveDef();
    Load_RegisterStructMemberSize("ParticleModuleVelocityGraph", 0x59B3C72Du, "float4", 0xEF099DEE, "m_velocityBegin", 0x38916BB4u, 0x70ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
    Load_RegisterStructMemberSize("ParticleModuleVelocityGraph", 0x59B3C72Du, "float4", 0xEF099DEE, "m_velocityEnd", 0x86B6ADC8, 0x80ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
  }
}

/*
==============
Load_ProcessStructLayout_ParticlePhaseOptions
==============
*/
void Load_ProcessStructLayout_ParticlePhaseOptions(void)
{
  Load_RegisterStructSize("ParticlePhaseOptions", 0xFF3E8E63, 4ui64, 4ui64);
}

/*
==============
Load_ProcessStructLayout_ParticlePhysicsFXData
==============
*/
void Load_ProcessStructLayout_ParticlePhysicsFXData(void)
{
  if ( Load_RegisterStructSize("ParticlePhysicsFXData", 0x99CF365F, 0x10ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ParticlePhysicsFXData", 0x99CF365F, "PhysicsFXPipelinePtr", 0x1121F267u, "physicsFXPipeline", 0x95F30EBB, 0i64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_PhysicsFXPipelinePtr();
    Load_RegisterStructMemberSize("ParticlePhysicsFXData", 0x99CF365F, "PhysicsFXShapePtr", 0x3DBCC72Eu, "physicsFXShape", 0xD8623590, 8ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_PhysicsFXShapePtr();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleRelativeVelocityType
==============
*/
void Load_ProcessStructLayout_ParticleRelativeVelocityType(void)
{
  Load_RegisterStructSize("ParticleRelativeVelocityType", 0x9E0EA963, 4ui64, 4ui64);
}

/*
==============
Load_ProcessStructLayout_ParticleRenderOptions
==============
*/
void Load_ProcessStructLayout_ParticleRenderOptions(void)
{
  Load_RegisterStructSize("ParticleRenderOptions", 0x371ECC0u, 4ui64, 4ui64);
}

/*
==============
Load_ProcessStructLayout_ParticleShaderGraphCurves
==============
*/
void Load_ProcessStructLayout_ParticleShaderGraphCurves(void)
{
  Load_RegisterStructSize("ParticleShaderGraphCurves", 0x11739563u, 4ui64, 4ui64);
}

/*
==============
Load_ProcessStructLayout_ParticleShaderGraphOptions
==============
*/
void Load_ProcessStructLayout_ParticleShaderGraphOptions(void)
{
  Load_RegisterStructSize("ParticleShaderGraphOptions", 0x7EC7AE83u, 4ui64, 4ui64);
}

/*
==============
Load_ProcessStructLayout_ParticleSpawnFlags
==============
*/
void Load_ProcessStructLayout_ParticleSpawnFlags(void)
{
  Load_RegisterStructSize("ParticleSpawnFlags", 0x78509A68u, 1ui64, 1ui64);
}

/*
==============
Load_ProcessStructLayout_ParticleSpawnMeshAssetDef
==============
*/
void Load_ProcessStructLayout_ParticleSpawnMeshAssetDef(void)
{
  if ( Load_RegisterStructSize("ParticleSpawnMeshAssetDef", 0x6127E705u, 0x10ui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("ParticleSpawnMeshAssetDef", 0x6127E705u, "uint", 0x53A932A0u, "m_numVertsTotal", 0x3DD11FD6u, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ParticleSpawnMeshAssetDef", 0x6127E705u, "uint", 0x53A932A0u, "m_numTrisTotal", 0x16772A88u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleSpawnShapeType
==============
*/
void Load_ProcessStructLayout_ParticleSpawnShapeType(void)
{
  Load_RegisterStructSize("ParticleSpawnShapeType", 0x3314B576u, 1ui64, 1ui64);
}

/*
==============
Load_ProcessStructLayout_ParticleStateDef
==============
*/
void Load_ProcessStructLayout_ParticleStateDef(void)
{
  if ( Load_RegisterStructSize("ParticleStateDef", 0x966E173A, 0x20ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleStateDef", 0x966E173A, "ParticleModuleGroupDef", 0x5A49BF80u, "moduleGroupDefs", 0x6A70CAB9u, 0i64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("ParticleModuleGroupDef", 0x5A49BF80u, 0x10ui64, 0x10ui64) )
    {
      Load_RegisterStructMemberSize("ParticleModuleGroupDef", 0x5A49BF80u, "ParticleModuleDef", 0xC5FECE7F, "moduleDefs", 0xB9C5245C, 0i64, 8ui64, 0i64, 1, 0);
      if ( Load_RegisterStructSize("ParticleModuleDef", 0xC5FECE7F, 0xF0ui64, 0x10ui64) )
      {
        Load_RegisterStructMemberSize("ParticleModuleDef", 0xC5FECE7F, "ParticleModuleType", 0xEEE1A072, "moduleType", 0x800221C0, 0i64, 2ui64, 0i64, 0, 0);
        Load_RegisterStructSize("ParticleModuleType", 0xEEE1A072, 2ui64, 2ui64);
        Load_RegisterStructMemberSize("ParticleModuleDef", 0xC5FECE7F, "ParticleModuleTypeDef", 0x860D614F, "moduleData", 0xBBCE21D0, 0x10ui64, 0xE0ui64, 0i64, 0, 0);
        Load_ProcessStructLayout_ParticleModuleTypeDef();
      }
      Load_RegisterStructMemberSize("ParticleModuleGroupDef", 0x5A49BF80u, "int", 0x7103F94Bu, "numModules", 0xB3718BBB, 8ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_int();
      Load_RegisterStructMemberSize("ParticleModuleGroupDef", 0x5A49BF80u, "bool", 0x1F095080u, "disabled", 0xBB377538, 0xCui64, 1ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_bool();
    }
    Load_RegisterStructMemberSize("ParticleStateDef", 0x966E173A, "ParticleElementType", 0xBEFAFC56, "elementType", 0xCFFE2300, 8ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleElementType", 0xBEFAFC56, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleStateDef", 0x966E173A, "ParticleStateDefFlags", 0xFE21B93u, "flags", 0x85A76201, 0x10ui64, 8ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ParticleStateDefFlags", 0xFE21B93u, 8ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("ParticleStateDefFlags", 0xFE21B93u, "uint64_t", 0x8310C4F3, (const char *)&queryFormat.fmt + 3, 0, 0i64, 8ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint64_t();
    }
  }
}

/*
==============
Load_ProcessStructLayout_ParticleStateDefFlags
==============
*/
void Load_ProcessStructLayout_ParticleStateDefFlags(void)
{
  if ( Load_RegisterStructSize("ParticleStateDefFlags", 0xFE21B93u, 8ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ParticleStateDefFlags", 0xFE21B93u, "uint64_t", 0x8310C4F3, (const char *)&queryFormat.fmt + 3, 0, 0i64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint64_t();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleSystemDef
==============
*/
void Load_ProcessStructLayout_ParticleSystemDef(void)
{
  if ( Load_RegisterStructSize("ParticleSystemDef", 0x124E8406u, 0x80ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("ParticleSystemDef", 0x124E8406u, "XString", 0x6231894Bu, (const char *)&stru_143C9A1A4, 0x58737A51u, 0i64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("ParticleSystemDef", 0x124E8406u, "ParticleEmitterDef", 0x10F5E3E5u, "emitterDefs", 0xC12BC856, 8ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ParticleEmitterDef();
    Load_RegisterStructMemberSize("ParticleSystemDef", 0x124E8406u, "ParticleScriptedInputNodeDef", 0x5C342585u, "scriptedInputNodeDefs", 0x78E71ACAu, 0x10ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ParticleScriptedInputNodeDef();
    Load_RegisterStructMemberSize("ParticleSystemDef", 0x124E8406u, "int", 0x7103F94Bu, "version", 0x9F37E884, 0x18ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("ParticleSystemDef", 0x124E8406u, "int", 0x7103F94Bu, "numEmitters", 0x65E6F97Du, 0x1Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("ParticleSystemDef", 0x124E8406u, "int", 0x7103F94Bu, "numScriptedInputNodes", 0x15D29241u, 0x20ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("ParticleSystemDef", 0x124E8406u, "ParticleSystemDefFlags", 0x49E7EFBFu, "flags", 0x85A76201, 0x24ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticleSystemDefFlags", 0x49E7EFBFu, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleSystemDef", 0x124E8406u, "int", 0x7103F94Bu, "occlusionOverrideEmitterIndex", 0x8BF551AD, 0x28ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("ParticleSystemDef", 0x124E8406u, "ParticlePhaseOptions", 0xFF3E8E63, "phaseOptions", 0xC314D911, 0x2Cui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("ParticlePhaseOptions", 0xFF3E8E63, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ParticleSystemDef", 0x124E8406u, "float", 0x9B987AFE, "drawFrustumCullRadius", 0x3B6E8566u, 0x30ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleSystemDef", 0x124E8406u, "float", 0x9B987AFE, "updateFrustumCullRadius", 0xAB229ECD, 0x34ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleSystemDef", 0x124E8406u, "float", 0x9B987AFE, "sunDistance", 0xFCCBE3D7, 0x38ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ParticleSystemDef", 0x124E8406u, "int", 0x7103F94Bu, "preRollMSec", 0x15209946u, 0x3Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("ParticleSystemDef", 0x124E8406u, "float4", 0xEF099DEE, "editorPosition", 0xA9477D1A, 0x40ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
    Load_RegisterStructMemberSize("ParticleSystemDef", 0x124E8406u, "float4", 0xEF099DEE, "editorRotation", 0xDF3AFC59, 0x50ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
    Load_RegisterStructMemberSize("ParticleSystemDef", 0x124E8406u, "float4", 0xEF099DEE, "gameTweakPosition", 0xAA93AB1F, 0x60ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
    Load_RegisterStructMemberSize("ParticleSystemDef", 0x124E8406u, "float4", 0xEF099DEE, "gameTweakRotation", 0xDDA109C0, 0x70ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float4();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleSystemDefFlags
==============
*/
void Load_ProcessStructLayout_ParticleSystemDefFlags(void)
{
  Load_RegisterStructSize("ParticleSystemDefFlags", 0x49E7EFBFu, 4ui64, 4ui64);
}

/*
==============
Load_ProcessStructLayout_ParticleSystemDefPtr
==============
*/
void Load_ProcessStructLayout_ParticleSystemDefPtr(void)
{
  if ( Load_RegisterStructSize("ParticleSystemDefPtr", 0xDFEF4884, 8ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ParticleSystemDefPtr", 0xDFEF4884, "ParticleSystemDef", 0x124E8406u, (const char *)&queryFormat.fmt + 3, 0, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ParticleSystemDef();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleSystemDefRef
==============
*/
void Load_ProcessStructLayout_ParticleSystemDefRef(void)
{
  if ( Load_RegisterStructSize("ParticleSystemDefRef", 0xCCE91AB9, 8ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ParticleSystemDefRef", 0xCCE91AB9, "XString", 0x6231894Bu, (const char *)&stru_143C9A1A4, 0x58737A51u, 0i64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
  }
}

/*
==============
Load_ProcessStructLayout_ParticleUseOrientationOptions
==============
*/
void Load_ProcessStructLayout_ParticleUseOrientationOptions(void)
{
  Load_RegisterStructSize("ParticleUseOrientationOptions", 0x4C2178ABu, 1ui64, 1ui64);
}

/*
==============
Load_ProcessStructLayout_ParticleUseScaleOptions
==============
*/
void Load_ProcessStructLayout_ParticleUseScaleOptions(void)
{
  Load_RegisterStructSize("ParticleUseScaleOptions", 0x93FA0F6B, 1ui64, 1ui64);
}

/*
==============
Load_ProcessStructLayout_ParticleUseVelocityOptions
==============
*/
void Load_ProcessStructLayout_ParticleUseVelocityOptions(void)
{
  Load_RegisterStructSize("ParticleUseVelocityOptions", 0x148371ACu, 1ui64, 1ui64);
}

/*
==============
Load_ProcessStructLayout_Particle_MaterialData
==============
*/
void Load_ProcessStructLayout_Particle_MaterialData(void)
{
  if ( Load_RegisterStructSize("Particle_MaterialData", 0xB8369F62, 0xC0ui64, 0x10ui64) )
  {
    Load_RegisterStructMemberSize("Particle_MaterialData", 0xB8369F62, "vec4_t", 0x77673763u, "falloffParms", 0x6AFD65FFu, 0i64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec4_t();
    Load_RegisterStructMemberSize("Particle_MaterialData", 0xB8369F62, "vec4_t", 0x77673763u, "opaqueColor", 0xA4006116, 0x10ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec4_t();
    Load_RegisterStructMemberSize("Particle_MaterialData", 0xB8369F62, "vec4_t", 0x77673763u, "transparentColor", 0xA4D5F557, 0x20ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec4_t();
    Load_RegisterStructMemberSize("Particle_MaterialData", 0xB8369F62, "vec2_t", 0x3757C7B9u, "translucentShadowParams", 0x76BAE4A7u, 0x30ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec2_t();
    Load_RegisterStructMemberSize("Particle_MaterialData", 0xB8369F62, "vec2_t", 0x3757C7B9u, "beamParms", 0xBC6AF7Eu, 0x38ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec2_t();
    Load_RegisterStructMemberSize("Particle_MaterialData", 0xB8369F62, "vec4_t", 0x77673763u, "eyeOffsetParms", 0xEF4194B3, 0x40ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec4_t();
    Load_RegisterStructMemberSize("Particle_MaterialData", 0xB8369F62, "vec4_t", 0x77673763u, "alphaDissolveParms", 0x9BDD42A2, 0x50ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec4_t();
    Load_RegisterStructMemberSize("Particle_MaterialData", 0xB8369F62, "vec4_t", 0x77673763u, "featherParms0", 0xB081E8D2, 0x60ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec4_t();
    Load_RegisterStructMemberSize("Particle_MaterialData", 0xB8369F62, "vec4_t", 0x77673763u, "featherParms1", 0xB081E8D3, 0x70ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec4_t();
    Load_RegisterStructMemberSize("Particle_MaterialData", 0xB8369F62, "vec4_t", 0x77673763u, "regionHighlightParms", 0xC199767D, 0x80ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec4_t();
    Load_RegisterStructMemberSize("Particle_MaterialData", 0xB8369F62, "vec4_t", 0x77673763u, "depthScanColor", 0x822B0EA5, 0x90ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec4_t();
    Load_RegisterStructMemberSize("Particle_MaterialData", 0xB8369F62, "vec4_t", 0x77673763u, "depthScanOutlineColor", 0x999642AB, 0xA0ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec4_t();
    Load_RegisterStructMemberSize("Particle_MaterialData", 0xB8369F62, "vec2_t", 0x3757C7B9u, "thermalParams", 0x13A995BFu, 0xB0ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec2_t();
    Load_RegisterStructMemberSize("Particle_MaterialData", 0xB8369F62, "float", 0x9B987AFE, "anisotropy", 0xC3FAB50u, 0xB8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("Particle_MaterialData", 0xB8369F62, "uint", 0x53A932A0u, "featureEnabledFlags", 0x5DD9EC76u, 0xBCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
  }
}

/*
==============
Mark_FxMarkProjectionAxis
==============
*/
__int64 Mark_FxMarkProjectionAxis()
{
  return 1i64;
}

/*
==============
Mark_FxMarkProjectionAxisArray
==============
*/
__int64 Mark_FxMarkProjectionAxisArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleCurveControlPointDef
==============
*/
__int64 Mark_ParticleCurveControlPointDef()
{
  return 1i64;
}

/*
==============
Mark_ParticleCurveControlPointDefArray
==============
*/
__int64 Mark_ParticleCurveControlPointDefArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleCurveDef
==============
*/
__int64 Mark_ParticleCurveDef()
{
  return 1i64;
}

/*
==============
Mark_ParticleCurveDefArray
==============
*/
__int64 Mark_ParticleCurveDefArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleDataFlags
==============
*/
__int64 Mark_ParticleDataFlags()
{
  return 1i64;
}

/*
==============
Mark_ParticleDataFlagsArray
==============
*/
__int64 Mark_ParticleDataFlagsArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleElementType
==============
*/
__int64 Mark_ParticleElementType()
{
  return 1i64;
}

/*
==============
Mark_ParticleElementTypeArray
==============
*/
__int64 Mark_ParticleElementTypeArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleEmissiveCurves
==============
*/
__int64 Mark_ParticleEmissiveCurves()
{
  return 1i64;
}

/*
==============
Mark_ParticleEmissiveCurvesArray
==============
*/
__int64 Mark_ParticleEmissiveCurvesArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleEmissiveVersionCurves
==============
*/
__int64 Mark_ParticleEmissiveVersionCurves()
{
  return 1i64;
}

/*
==============
Mark_ParticleEmissiveVersionCurvesArray
==============
*/
__int64 Mark_ParticleEmissiveVersionCurvesArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleEmitterDef
==============
*/
__int64 Mark_ParticleEmitterDef()
{
  ParticleStateDef *stateDefs; 
  unsigned __int64 v1; 
  ParticleModuleGroupDef *v2; 
  ParticleModuleDef *v3; 
  ParticleModuleTypeDef *v4; 
  unsigned __int64 v5; 
  ParticleModuleGroupDef *moduleGroupDefs; 
  __int64 v7; 
  ParticleModuleDef *moduleDefs; 
  __int64 v9; 
  unsigned __int64 numModules; 
  int v11; 
  __int64 result; 
  unsigned __int64 numStates; 
  unsigned __int64 v14; 
  ParticleModuleGroupDef *v15; 
  ParticleStateDef *v16; 

  stateDefs = marParticleEmitterDef->stateDefs;
  if ( !marParticleEmitterDef->stateDefs )
    return 1i64;
  v16 = marParticleStateDef;
  marParticleStateDef = marParticleEmitterDef->stateDefs;
  v1 = 0i64;
  numStates = marParticleEmitterDef->numStates;
  v14 = 0i64;
  if ( !marParticleEmitterDef->numStates )
  {
LABEL_14:
    marParticleStateDef = v16;
    return 1i64;
  }
  v2 = marParticleModuleGroupDef;
  v3 = marParticleModuleDef;
  v4 = marParticleModuleTypeDef;
  v5 = marParticleEmitterDef->numStates;
  while ( 1 )
  {
    marParticleStateDef = stateDefs;
    moduleGroupDefs = stateDefs->moduleGroupDefs;
    if ( stateDefs->moduleGroupDefs )
      break;
LABEL_13:
    ++v1;
    ++stateDefs;
    v14 = v1;
    if ( v1 >= v5 )
      goto LABEL_14;
  }
  v15 = v2;
  v7 = 0i64;
  while ( 1 )
  {
    marParticleModuleGroupDef = moduleGroupDefs;
    moduleDefs = moduleGroupDefs->moduleDefs;
    if ( moduleGroupDefs->moduleDefs )
      break;
LABEL_11:
    ++moduleGroupDefs;
    if ( (unsigned __int64)++v7 >= 3 )
    {
      v2 = v15;
      v1 = v14;
      v5 = numStates;
      marParticleModuleGroupDef = v15;
      goto LABEL_13;
    }
  }
  marParticleModuleDef = moduleGroupDefs->moduleDefs;
  v9 = 0i64;
  numModules = moduleGroupDefs->numModules;
  if ( !moduleGroupDefs->numModules )
  {
LABEL_10:
    marParticleModuleDef = v3;
    goto LABEL_11;
  }
  while ( 1 )
  {
    marParticleModuleDef = moduleDefs;
    marParticleModuleTypeDef = &moduleDefs->moduleData;
    v11 = Mark_ParticleModuleTypeDef();
    marParticleModuleTypeDef = v4;
    if ( !v11 )
      break;
    ++moduleDefs;
    if ( ++v9 >= numModules )
      goto LABEL_10;
  }
  marParticleModuleGroupDef = v15;
  marParticleStateDef = v16;
  result = 0i64;
  marParticleModuleDef = v3;
  return result;
}

/*
==============
Mark_ParticleEmitterDefArray
==============
*/
__int64 Mark_ParticleEmitterDefArray(const unsigned __int64 count)
{
  ParticleEmitterDef *v1; 
  unsigned __int64 v2; 
  unsigned __int64 v3; 
  ParticleStateDef *v4; 
  ParticleModuleGroupDef *v5; 
  ParticleModuleDef *v6; 
  ParticleModuleTypeDef *v7; 
  ParticleStateDef *stateDefs; 
  unsigned __int64 v9; 
  unsigned __int64 numStates; 
  ParticleModuleGroupDef *moduleGroupDefs; 
  __int64 v12; 
  ParticleModuleDef *moduleDefs; 
  __int64 v14; 
  unsigned __int64 numModules; 
  int v16; 
  __int64 result; 
  ParticleModuleGroupDef *v18; 
  ParticleStateDef *v19; 
  unsigned __int64 v20; 
  unsigned __int64 v22; 
  ParticleEmitterDef *v23; 
  unsigned __int64 v24; 

  v1 = marParticleEmitterDef;
  v2 = 0i64;
  v23 = marParticleEmitterDef;
  v3 = count;
  v24 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marParticleStateDef;
  v5 = marParticleModuleGroupDef;
  v6 = marParticleModuleDef;
  v7 = marParticleModuleTypeDef;
LABEL_3:
  marParticleEmitterDef = v1;
  stateDefs = v1->stateDefs;
  if ( !v1->stateDefs )
    goto LABEL_17;
  v19 = v4;
  v9 = 0i64;
  marParticleStateDef = v1->stateDefs;
  numStates = v1->numStates;
  v20 = numStates;
  v22 = 0i64;
  if ( !v1->numStates )
    goto LABEL_16;
  while ( 1 )
  {
    marParticleStateDef = stateDefs;
    moduleGroupDefs = stateDefs->moduleGroupDefs;
    if ( stateDefs->moduleGroupDefs )
      break;
LABEL_14:
    ++v9;
    ++stateDefs;
    v22 = v9;
    if ( v9 >= numStates )
    {
      v1 = v23;
      v2 = v24;
      v3 = count;
LABEL_16:
      v4 = v19;
      marParticleStateDef = v19;
LABEL_17:
      ++v1;
      ++v2;
      v23 = v1;
      v24 = v2;
      if ( v2 >= v3 )
        return 1i64;
      goto LABEL_3;
    }
  }
  v18 = v5;
  v12 = 0i64;
  while ( 1 )
  {
    marParticleModuleGroupDef = moduleGroupDefs;
    moduleDefs = moduleGroupDefs->moduleDefs;
    if ( moduleGroupDefs->moduleDefs )
      break;
LABEL_12:
    ++moduleGroupDefs;
    if ( (unsigned __int64)++v12 >= 3 )
    {
      v5 = v18;
      v9 = v22;
      numStates = v20;
      marParticleModuleGroupDef = v18;
      goto LABEL_14;
    }
  }
  marParticleModuleDef = moduleGroupDefs->moduleDefs;
  v14 = 0i64;
  numModules = moduleGroupDefs->numModules;
  if ( !moduleGroupDefs->numModules )
  {
LABEL_11:
    marParticleModuleDef = v6;
    goto LABEL_12;
  }
  while ( 1 )
  {
    marParticleModuleDef = moduleDefs;
    marParticleModuleTypeDef = &moduleDefs->moduleData;
    v16 = Mark_ParticleModuleTypeDef();
    marParticleModuleTypeDef = v7;
    if ( !v16 )
      break;
    ++moduleDefs;
    if ( ++v14 >= numModules )
      goto LABEL_11;
  }
  marParticleModuleGroupDef = v18;
  marParticleStateDef = v19;
  result = 0i64;
  marParticleModuleDef = v6;
  return result;
}

/*
==============
Mark_ParticleEmitterDefFlags
==============
*/
__int64 Mark_ParticleEmitterDefFlags()
{
  return 1i64;
}

/*
==============
Mark_ParticleEmitterDefFlagsArray
==============
*/
__int64 Mark_ParticleEmitterDefFlagsArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleFloatRange
==============
*/
__int64 Mark_ParticleFloatRange()
{
  return 1i64;
}

/*
==============
Mark_ParticleFloatRangeArray
==============
*/
__int64 Mark_ParticleFloatRangeArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleGravityOptions
==============
*/
__int64 Mark_ParticleGravityOptions()
{
  return 1i64;
}

/*
==============
Mark_ParticleGravityOptionsArray
==============
*/
__int64 Mark_ParticleGravityOptionsArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleGravityState
==============
*/
__int64 Mark_ParticleGravityState()
{
  return 1i64;
}

/*
==============
Mark_ParticleGravityStateArray
==============
*/
__int64 Mark_ParticleGravityStateArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleGroupID
==============
*/
__int64 Mark_ParticleGroupID()
{
  return 1i64;
}

/*
==============
Mark_ParticleGroupIDArray
==============
*/
__int64 Mark_ParticleGroupIDArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleImpactDirection
==============
*/
__int64 Mark_ParticleImpactDirection()
{
  return 1i64;
}

/*
==============
Mark_ParticleImpactDirectionArray
==============
*/
__int64 Mark_ParticleImpactDirectionArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleInstancePoolAction
==============
*/
__int64 Mark_ParticleInstancePoolAction()
{
  return 1i64;
}

/*
==============
Mark_ParticleInstancePoolActionArray
==============
*/
__int64 Mark_ParticleInstancePoolActionArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleInstancePoolType
==============
*/
__int64 Mark_ParticleInstancePoolType()
{
  return 1i64;
}

/*
==============
Mark_ParticleInstancePoolTypeArray
==============
*/
__int64 Mark_ParticleInstancePoolTypeArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleIntRange
==============
*/
__int64 Mark_ParticleIntRange()
{
  return 1i64;
}

/*
==============
Mark_ParticleIntRangeArray
==============
*/
__int64 Mark_ParticleIntRangeArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleLinkedAssetDef
==============
*/
int Mark_ParticleLinkedAssetDef()
{
  ParticleModuleType moduleType; 
  Material **v1; 
  int result; 
  ParticlePhysicsFXData *v3; 
  FxParticleSimAnimation **v4; 
  ParticleMarkVisuals *v5; 
  VectorField **v6; 
  const ParticleSystemDef **v7; 
  GfxLightDef **v8; 
  XModel **v9; 

  moduleType = marParticleModuleDef->moduleType;
  if ( marParticleModuleDef->moduleType == PARTICLE_MODULE_INIT_MATERIAL )
  {
    v1 = marMaterialHandle;
    marMaterialHandle = &marParticleLinkedAssetDef->material;
    result = Mark_MaterialHandle();
    marMaterialHandle = v1;
    goto LABEL_21;
  }
  switch ( moduleType )
  {
    case PARTICLE_MODULE_INIT_MODEL:
    case PARTICLE_MODULE_INIT_SPAWN_SHAPE_MESH:
      v9 = marXModelPtr;
      marXModelPtr = (XModel **)marParticleLinkedAssetDef;
      result = Mark_XModelPtr();
      marXModelPtr = v9;
LABEL_21:
      if ( !result )
        return result;
      return 1;
    case PARTICLE_MODULE_PHYSICS_LIGHT:
      v3 = marParticlePhysicsFXData;
      marParticlePhysicsFXData = (ParticlePhysicsFXData *)marParticleLinkedAssetDef;
      result = Mark_ParticlePhysicsFXData();
      marParticlePhysicsFXData = v3;
      goto LABEL_21;
    case PARTICLE_MODULE_INIT_PARTICLE_SIM:
      v4 = marFxParticleSimAnimationPtr;
      marFxParticleSimAnimationPtr = (FxParticleSimAnimation **)marParticleLinkedAssetDef;
      result = Mark_FxParticleSimAnimationPtr();
      marFxParticleSimAnimationPtr = v4;
      goto LABEL_21;
    case PARTICLE_MODULE_INIT_DECAL:
      v5 = marParticleMarkVisuals;
      marParticleMarkVisuals = (ParticleMarkVisuals *)marParticleLinkedAssetDef;
      result = Mark_ParticleMarkVisuals();
      marParticleMarkVisuals = v5;
      goto LABEL_21;
    case PARTICLE_MODULE_INIT_SOUND:
      return 1;
    case PARTICLE_MODULE_INIT_VECTOR_FIELD:
      v6 = marVectorFieldPtr;
      marVectorFieldPtr = (VectorField **)marParticleLinkedAssetDef;
      result = Mark_VectorFieldPtr();
      marVectorFieldPtr = v6;
      goto LABEL_21;
  }
  if ( (unsigned __int16)(moduleType - 9) <= 1u )
  {
    v8 = marGfxLightDefPtr;
    marGfxLightDefPtr = (GfxLightDef **)marParticleLinkedAssetDef;
    result = Mark_GfxLightDefPtr();
    marGfxLightDefPtr = v8;
    goto LABEL_21;
  }
  if ( moduleType == PARTICLE_MODULE_INIT_BEAM || moduleType == PARTICLE_MODULE_INIT_RUNNER || marParticleModuleTestEventHandlerData )
  {
    v7 = marParticleSystemDefPtr;
    marParticleSystemDefPtr = (const ParticleSystemDef **)marParticleLinkedAssetDef;
    result = Mark_ParticleSystemDefPtr();
    marParticleSystemDefPtr = v7;
    goto LABEL_21;
  }
  return 1;
}

/*
==============
Mark_ParticleLinkedAssetDefArray
==============
*/
__int64 Mark_ParticleLinkedAssetDefArray(const unsigned __int64 count)
{
  ParticleLinkedAssetDef *v1; 
  __int64 v2; 
  ParticleModuleType moduleType; 
  Material **v5; 
  int v6; 
  ParticlePhysicsFXData *v7; 
  FxParticleSimAnimation **v8; 
  ParticleMarkVisuals *v9; 
  VectorField **v10; 
  const ParticleSystemDef **v11; 
  GfxLightDef **v12; 
  XModel **v13; 

  v1 = marParticleLinkedAssetDef;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  while ( 1 )
  {
    marParticleLinkedAssetDef = v1;
    moduleType = marParticleModuleDef->moduleType;
    if ( marParticleModuleDef->moduleType == PARTICLE_MODULE_INIT_MATERIAL )
    {
      v5 = marMaterialHandle;
      marMaterialHandle = &v1->material;
      v6 = Mark_MaterialHandle();
      marMaterialHandle = v5;
      goto LABEL_22;
    }
    switch ( moduleType )
    {
      case PARTICLE_MODULE_INIT_MODEL:
      case PARTICLE_MODULE_INIT_SPAWN_SHAPE_MESH:
        v13 = marXModelPtr;
        marXModelPtr = (XModel **)v1;
        v6 = Mark_XModelPtr();
        marXModelPtr = v13;
        goto LABEL_22;
      case PARTICLE_MODULE_PHYSICS_LIGHT:
        v7 = marParticlePhysicsFXData;
        marParticlePhysicsFXData = (ParticlePhysicsFXData *)v1;
        v6 = Mark_ParticlePhysicsFXData();
        marParticlePhysicsFXData = v7;
        goto LABEL_22;
      case PARTICLE_MODULE_INIT_PARTICLE_SIM:
        v8 = marFxParticleSimAnimationPtr;
        marFxParticleSimAnimationPtr = (FxParticleSimAnimation **)v1;
        v6 = Mark_FxParticleSimAnimationPtr();
        marFxParticleSimAnimationPtr = v8;
        goto LABEL_22;
      case PARTICLE_MODULE_INIT_DECAL:
        v9 = marParticleMarkVisuals;
        marParticleMarkVisuals = (ParticleMarkVisuals *)v1;
        v6 = Mark_ParticleMarkVisuals();
        marParticleMarkVisuals = v9;
        goto LABEL_22;
    }
    if ( moduleType != PARTICLE_MODULE_INIT_SOUND )
      break;
LABEL_23:
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  if ( moduleType == PARTICLE_MODULE_INIT_VECTOR_FIELD )
  {
    v10 = marVectorFieldPtr;
    marVectorFieldPtr = (VectorField **)v1;
    v6 = Mark_VectorFieldPtr();
    marVectorFieldPtr = v10;
  }
  else if ( (unsigned __int16)(moduleType - 9) <= 1u )
  {
    v12 = marGfxLightDefPtr;
    marGfxLightDefPtr = (GfxLightDef **)v1;
    v6 = Mark_GfxLightDefPtr();
    marGfxLightDefPtr = v12;
  }
  else
  {
    if ( moduleType != PARTICLE_MODULE_INIT_BEAM && moduleType != PARTICLE_MODULE_INIT_RUNNER && !marParticleModuleTestEventHandlerData )
      goto LABEL_23;
    v11 = marParticleSystemDefPtr;
    marParticleSystemDefPtr = (const ParticleSystemDef **)v1;
    v6 = Mark_ParticleSystemDefPtr();
    marParticleSystemDefPtr = v11;
  }
LABEL_22:
  if ( v6 )
    goto LABEL_23;
  return 0i64;
}

/*
==============
Mark_ParticleLinkedAssetListDef
==============
*/
__int64 Mark_ParticleLinkedAssetListDef()
{
  ParticleLinkedAssetDef *assetList; 
  ParticleLinkedAssetDef *v1; 
  __int64 v2; 
  unsigned __int64 numAssets; 
  ParticleModuleType moduleType; 
  Material **v5; 
  int v6; 
  ParticlePhysicsFXData *v7; 
  FxParticleSimAnimation **v8; 
  ParticleMarkVisuals *v9; 
  VectorField **v10; 
  const ParticleSystemDef **v11; 
  GfxLightDef **v12; 
  XModel **v13; 

  assetList = marParticleLinkedAssetListDef->assetList;
  if ( !marParticleLinkedAssetListDef->assetList )
    return 1i64;
  v1 = marParticleLinkedAssetDef;
  v2 = 0i64;
  marParticleLinkedAssetDef = marParticleLinkedAssetListDef->assetList;
  numAssets = marParticleLinkedAssetListDef->numAssets;
  if ( !marParticleLinkedAssetListDef->numAssets )
  {
LABEL_25:
    marParticleLinkedAssetDef = v1;
    return 1i64;
  }
  while ( 1 )
  {
    marParticleLinkedAssetDef = assetList;
    moduleType = marParticleModuleDef->moduleType;
    if ( marParticleModuleDef->moduleType == PARTICLE_MODULE_INIT_MATERIAL )
    {
      v5 = marMaterialHandle;
      marMaterialHandle = &assetList->material;
      v6 = Mark_MaterialHandle();
      marMaterialHandle = v5;
      goto LABEL_23;
    }
    switch ( moduleType )
    {
      case PARTICLE_MODULE_INIT_MODEL:
      case PARTICLE_MODULE_INIT_SPAWN_SHAPE_MESH:
        v13 = marXModelPtr;
        marXModelPtr = (XModel **)assetList;
        v6 = Mark_XModelPtr();
        marXModelPtr = v13;
        goto LABEL_23;
      case PARTICLE_MODULE_PHYSICS_LIGHT:
        v7 = marParticlePhysicsFXData;
        marParticlePhysicsFXData = (ParticlePhysicsFXData *)assetList;
        v6 = Mark_ParticlePhysicsFXData();
        marParticlePhysicsFXData = v7;
        goto LABEL_23;
      case PARTICLE_MODULE_INIT_PARTICLE_SIM:
        v8 = marFxParticleSimAnimationPtr;
        marFxParticleSimAnimationPtr = (FxParticleSimAnimation **)assetList;
        v6 = Mark_FxParticleSimAnimationPtr();
        marFxParticleSimAnimationPtr = v8;
        goto LABEL_23;
      case PARTICLE_MODULE_INIT_DECAL:
        v9 = marParticleMarkVisuals;
        marParticleMarkVisuals = (ParticleMarkVisuals *)assetList;
        v6 = Mark_ParticleMarkVisuals();
        marParticleMarkVisuals = v9;
        goto LABEL_23;
    }
    if ( moduleType != PARTICLE_MODULE_INIT_SOUND )
      break;
LABEL_24:
    ++assetList;
    if ( ++v2 >= numAssets )
      goto LABEL_25;
  }
  if ( moduleType == PARTICLE_MODULE_INIT_VECTOR_FIELD )
  {
    v10 = marVectorFieldPtr;
    marVectorFieldPtr = (VectorField **)assetList;
    v6 = Mark_VectorFieldPtr();
    marVectorFieldPtr = v10;
  }
  else if ( (unsigned __int16)(moduleType - 9) <= 1u )
  {
    v12 = marGfxLightDefPtr;
    marGfxLightDefPtr = (GfxLightDef **)assetList;
    v6 = Mark_GfxLightDefPtr();
    marGfxLightDefPtr = v12;
  }
  else
  {
    if ( moduleType != PARTICLE_MODULE_INIT_BEAM && moduleType != PARTICLE_MODULE_INIT_RUNNER && !marParticleModuleTestEventHandlerData )
      goto LABEL_24;
    v11 = marParticleSystemDefPtr;
    marParticleSystemDefPtr = (const ParticleSystemDef **)assetList;
    v6 = Mark_ParticleSystemDefPtr();
    marParticleSystemDefPtr = v11;
  }
LABEL_23:
  if ( v6 )
    goto LABEL_24;
  marParticleLinkedAssetDef = v1;
  return 0i64;
}

/*
==============
Mark_ParticleLinkedAssetListDefArray
==============
*/
__int64 Mark_ParticleLinkedAssetListDefArray(const unsigned __int64 count)
{
  ParticleLinkedAssetListDef *v1; 
  __int64 v2; 
  unsigned __int64 v3; 
  ParticleLinkedAssetDef *v4; 
  ParticleLinkedAssetDef *assetList; 
  __int64 v6; 
  unsigned __int64 numAssets; 
  ParticleModuleType moduleType; 
  Material **v9; 
  int v10; 
  ParticlePhysicsFXData *v11; 
  FxParticleSimAnimation **v12; 
  ParticleMarkVisuals *v13; 
  Material **v14; 
  VectorField **v15; 
  const ParticleSystemDef **v16; 
  GfxLightDef **v17; 
  XModel **v18; 

  v1 = marParticleLinkedAssetListDef;
  v2 = 0i64;
  v3 = count;
  if ( !count )
    return 1i64;
  v4 = marParticleLinkedAssetDef;
  while ( 1 )
  {
    marParticleLinkedAssetListDef = v1;
    assetList = v1->assetList;
    if ( v1->assetList )
      break;
LABEL_29:
    ++v1;
    if ( ++v2 >= v3 )
      return 1i64;
  }
  marParticleLinkedAssetDef = v1->assetList;
  v6 = 0i64;
  numAssets = v1->numAssets;
  if ( !v1->numAssets )
  {
LABEL_28:
    marParticleLinkedAssetDef = v4;
    goto LABEL_29;
  }
  while ( 1 )
  {
    marParticleLinkedAssetDef = assetList;
    moduleType = marParticleModuleDef->moduleType;
    if ( marParticleModuleDef->moduleType == PARTICLE_MODULE_INIT_MATERIAL )
    {
      v9 = marMaterialHandle;
      marMaterialHandle = &assetList->material;
      v10 = Mark_MaterialHandle();
      marMaterialHandle = v9;
      goto LABEL_25;
    }
    switch ( moduleType )
    {
      case PARTICLE_MODULE_INIT_MODEL:
      case PARTICLE_MODULE_INIT_SPAWN_SHAPE_MESH:
        v18 = marXModelPtr;
        marXModelPtr = (XModel **)assetList;
        v10 = Mark_XModelPtr();
        marXModelPtr = v18;
        goto LABEL_25;
      case PARTICLE_MODULE_PHYSICS_LIGHT:
        v11 = marParticlePhysicsFXData;
        marParticlePhysicsFXData = (ParticlePhysicsFXData *)assetList;
        v10 = Mark_ParticlePhysicsFXData();
        marParticlePhysicsFXData = v11;
        goto LABEL_25;
      case PARTICLE_MODULE_INIT_PARTICLE_SIM:
        v12 = marFxParticleSimAnimationPtr;
        marFxParticleSimAnimationPtr = (FxParticleSimAnimation **)assetList;
        v10 = Mark_FxParticleSimAnimationPtr();
        marFxParticleSimAnimationPtr = v12;
        goto LABEL_25;
      case PARTICLE_MODULE_INIT_DECAL:
        v13 = marParticleMarkVisuals;
        v14 = marMaterialHandle;
        marParticleMarkVisuals = (ParticleMarkVisuals *)assetList;
        marMaterialHandle = &assetList->material;
        v10 = Mark_MaterialHandleArray(3ui64);
        marMaterialHandle = v14;
        marParticleMarkVisuals = v13;
        goto LABEL_25;
    }
    if ( moduleType != PARTICLE_MODULE_INIT_SOUND )
      break;
LABEL_26:
    ++assetList;
    if ( ++v6 >= numAssets )
    {
      v3 = count;
      goto LABEL_28;
    }
  }
  if ( moduleType == PARTICLE_MODULE_INIT_VECTOR_FIELD )
  {
    v15 = marVectorFieldPtr;
    marVectorFieldPtr = (VectorField **)assetList;
    v10 = Mark_VectorFieldPtr();
    marVectorFieldPtr = v15;
  }
  else if ( (unsigned __int16)(moduleType - 9) <= 1u )
  {
    v17 = marGfxLightDefPtr;
    marGfxLightDefPtr = (GfxLightDef **)assetList;
    v10 = Mark_GfxLightDefPtr();
    marGfxLightDefPtr = v17;
  }
  else
  {
    if ( moduleType != PARTICLE_MODULE_INIT_BEAM && moduleType != PARTICLE_MODULE_INIT_RUNNER && !marParticleModuleTestEventHandlerData )
      goto LABEL_26;
    v16 = marParticleSystemDefPtr;
    marParticleSystemDefPtr = (const ParticleSystemDef **)assetList;
    v10 = Mark_ParticleSystemDefPtr();
    marParticleSystemDefPtr = v16;
  }
LABEL_25:
  if ( v10 )
    goto LABEL_26;
  marParticleLinkedAssetDef = v4;
  return 0i64;
}

/*
==============
Mark_ParticleMarkVisuals
==============
*/
_BOOL8 Mark_ParticleMarkVisuals()
{
  Material **v0; 
  int v1; 

  v0 = marMaterialHandle;
  marMaterialHandle = (Material **)marParticleMarkVisuals;
  v1 = Mark_MaterialHandleArray(3ui64);
  marMaterialHandle = v0;
  return v1 != 0;
}

/*
==============
Mark_ParticleMarkVisualsArray
==============
*/
__int64 Mark_ParticleMarkVisualsArray(const unsigned __int64 count)
{
  ParticleMarkVisuals *v1; 
  __int64 v2; 
  Material **v4; 
  int v5; 

  v1 = marParticleMarkVisuals;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marMaterialHandle;
  while ( 1 )
  {
    marParticleMarkVisuals = v1;
    marMaterialHandle = (Material **)v1;
    v5 = Mark_MaterialHandleArray(3ui64);
    marMaterialHandle = v4;
    if ( !v5 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ParticleMirrorTextureType
==============
*/
__int64 Mark_ParticleMirrorTextureType()
{
  return 1i64;
}

/*
==============
Mark_ParticleMirrorTextureTypeArray
==============
*/
__int64 Mark_ParticleMirrorTextureTypeArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModifier
==============
*/
__int64 Mark_ParticleModifier()
{
  return 1i64;
}

/*
==============
Mark_ParticleModifierArray
==============
*/
__int64 Mark_ParticleModifierArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleAttractor
==============
*/
__int64 Mark_ParticleModuleAttractor()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleAttractorArray
==============
*/
__int64 Mark_ParticleModuleAttractorArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleAxesFlags
==============
*/
__int64 Mark_ParticleModuleAxesFlags()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleAxesFlagsArray
==============
*/
__int64 Mark_ParticleModuleAxesFlagsArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleAxis
==============
*/
__int64 Mark_ParticleModuleAxis()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleAxisArray
==============
*/
__int64 Mark_ParticleModuleAxisArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleColorGraph
==============
*/
__int64 Mark_ParticleModuleColorGraph()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleColorGraphArray
==============
*/
__int64 Mark_ParticleModuleColorGraphArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleColorLerp
==============
*/
__int64 Mark_ParticleModuleColorLerp()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleColorLerpArray
==============
*/
__int64 Mark_ParticleModuleColorLerpArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleDef
==============
*/
_BOOL8 Mark_ParticleModuleDef()
{
  ParticleModuleTypeDef *v0; 
  int v1; 

  v0 = marParticleModuleTypeDef;
  marParticleModuleTypeDef = &marParticleModuleDef->moduleData;
  v1 = Mark_ParticleModuleTypeDef();
  marParticleModuleTypeDef = v0;
  return v1 != 0;
}

/*
==============
Mark_ParticleModuleDefArray
==============
*/
__int64 Mark_ParticleModuleDefArray(const unsigned __int64 count)
{
  ParticleModuleDef *v1; 
  __int64 v2; 
  ParticleModuleTypeDef *v4; 
  int v5; 

  v1 = marParticleModuleDef;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marParticleModuleTypeDef;
  while ( 1 )
  {
    marParticleModuleDef = v1;
    marParticleModuleTypeDef = &v1->moduleData;
    v5 = Mark_ParticleModuleTypeDef();
    marParticleModuleTypeDef = v4;
    if ( !v5 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ParticleModuleEmissionGraph
==============
*/
__int64 Mark_ParticleModuleEmissionGraph()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleEmissionGraphArray
==============
*/
__int64 Mark_ParticleModuleEmissionGraphArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleEmissiveGraph
==============
*/
__int64 Mark_ParticleModuleEmissiveGraph()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleEmissiveGraphArray
==============
*/
__int64 Mark_ParticleModuleEmissiveGraphArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleFlags
==============
*/
__int64 Mark_ParticleModuleFlags()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleFlagsArray
==============
*/
__int64 Mark_ParticleModuleFlagsArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleForce
==============
*/
__int64 Mark_ParticleModuleForce()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleForceArray
==============
*/
__int64 Mark_ParticleModuleForceArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleForceDragGraph
==============
*/
__int64 Mark_ParticleModuleForceDragGraph()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleForceDragGraphArray
==============
*/
__int64 Mark_ParticleModuleForceDragGraphArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleGravity
==============
*/
__int64 Mark_ParticleModuleGravity()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleGravityArray
==============
*/
__int64 Mark_ParticleModuleGravityArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleGroupDef
==============
*/
__int64 Mark_ParticleModuleGroupDef()
{
  ParticleModuleDef *moduleDefs; 
  ParticleModuleDef *v1; 
  __int64 v2; 
  unsigned __int64 numModules; 
  ParticleModuleTypeDef *v4; 
  int v5; 

  moduleDefs = marParticleModuleGroupDef->moduleDefs;
  if ( !marParticleModuleGroupDef->moduleDefs )
    return 1i64;
  v1 = marParticleModuleDef;
  v2 = 0i64;
  marParticleModuleDef = marParticleModuleGroupDef->moduleDefs;
  numModules = marParticleModuleGroupDef->numModules;
  if ( !marParticleModuleGroupDef->numModules )
  {
LABEL_6:
    marParticleModuleDef = v1;
    return 1i64;
  }
  v4 = marParticleModuleTypeDef;
  while ( 1 )
  {
    marParticleModuleDef = moduleDefs;
    marParticleModuleTypeDef = &moduleDefs->moduleData;
    v5 = Mark_ParticleModuleTypeDef();
    marParticleModuleTypeDef = v4;
    if ( !v5 )
      break;
    ++moduleDefs;
    if ( ++v2 >= numModules )
      goto LABEL_6;
  }
  marParticleModuleDef = v1;
  return 0i64;
}

/*
==============
Mark_ParticleModuleGroupDefArray
==============
*/
__int64 Mark_ParticleModuleGroupDefArray(const unsigned __int64 count)
{
  ParticleModuleGroupDef *v1; 
  __int64 v2; 
  ParticleModuleDef *v4; 
  ParticleModuleTypeDef *v5; 
  ParticleModuleDef *moduleDefs; 
  __int64 v7; 
  unsigned __int64 numModules; 
  int v9; 

  v1 = marParticleModuleGroupDef;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marParticleModuleDef;
  v5 = marParticleModuleTypeDef;
  while ( 1 )
  {
    marParticleModuleGroupDef = v1;
    moduleDefs = v1->moduleDefs;
    if ( v1->moduleDefs )
      break;
LABEL_8:
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  marParticleModuleDef = v1->moduleDefs;
  v7 = 0i64;
  numModules = v1->numModules;
  if ( !v1->numModules )
  {
LABEL_7:
    marParticleModuleDef = v4;
    goto LABEL_8;
  }
  while ( 1 )
  {
    marParticleModuleDef = moduleDefs;
    marParticleModuleTypeDef = &moduleDefs->moduleData;
    v9 = Mark_ParticleModuleTypeDef();
    marParticleModuleTypeDef = v5;
    if ( !v9 )
      break;
    ++moduleDefs;
    if ( ++v7 >= numModules )
      goto LABEL_7;
  }
  marParticleModuleDef = v4;
  return 0i64;
}

/*
==============
Mark_ParticleModuleInitAtlas
==============
*/
__int64 Mark_ParticleModuleInitAtlas()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitAtlasArray
==============
*/
__int64 Mark_ParticleModuleInitAtlasArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitAttributes
==============
*/
__int64 Mark_ParticleModuleInitAttributes()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitAttributesArray
==============
*/
__int64 Mark_ParticleModuleInitAttributesArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitBeam
==============
*/
_BOOL8 Mark_ParticleModuleInitBeam()
{
  ParticleLinkedAssetListDef *v0; 
  int v1; 

  v0 = marParticleLinkedAssetListDef;
  marParticleLinkedAssetListDef = &marParticleModuleInitBeam->m_linkedAssetList;
  v1 = Mark_ParticleLinkedAssetListDef();
  marParticleLinkedAssetListDef = v0;
  return v1 != 0;
}

/*
==============
Mark_ParticleModuleInitBeamArray
==============
*/
__int64 Mark_ParticleModuleInitBeamArray(const unsigned __int64 count)
{
  ParticleModuleInitBeam *v1; 
  __int64 v2; 
  ParticleLinkedAssetListDef *v4; 
  int v5; 

  v1 = marParticleModuleInitBeam;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marParticleLinkedAssetListDef;
  while ( 1 )
  {
    marParticleModuleInitBeam = v1;
    marParticleLinkedAssetListDef = &v1->m_linkedAssetList;
    v5 = Mark_ParticleLinkedAssetListDef();
    marParticleLinkedAssetListDef = v4;
    if ( !v5 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ParticleModuleInitBeamFlags
==============
*/
__int64 Mark_ParticleModuleInitBeamFlags()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitBeamFlagsArray
==============
*/
__int64 Mark_ParticleModuleInitBeamFlagsArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitCameraOffset
==============
*/
__int64 Mark_ParticleModuleInitCameraOffset()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitCameraOffsetArray
==============
*/
__int64 Mark_ParticleModuleInitCameraOffsetArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitCloud
==============
*/
__int64 Mark_ParticleModuleInitCloud()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitCloudArray
==============
*/
__int64 Mark_ParticleModuleInitCloudArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitDecal
==============
*/
_BOOL8 Mark_ParticleModuleInitDecal()
{
  ParticleLinkedAssetListDef *v0; 
  int v1; 

  v0 = marParticleLinkedAssetListDef;
  marParticleLinkedAssetListDef = &marParticleModuleInitDecal->m_linkedAssetList;
  v1 = Mark_ParticleLinkedAssetListDef();
  marParticleLinkedAssetListDef = v0;
  return v1 != 0;
}

/*
==============
Mark_ParticleModuleInitDecalArray
==============
*/
__int64 Mark_ParticleModuleInitDecalArray(const unsigned __int64 count)
{
  ParticleModuleInitDecal *v1; 
  __int64 v2; 
  ParticleLinkedAssetListDef *v4; 
  int v5; 

  v1 = marParticleModuleInitDecal;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marParticleLinkedAssetListDef;
  while ( 1 )
  {
    marParticleModuleInitDecal = v1;
    marParticleLinkedAssetListDef = &v1->m_linkedAssetList;
    v5 = Mark_ParticleLinkedAssetListDef();
    marParticleLinkedAssetListDef = v4;
    if ( !v5 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ParticleModuleInitDismember
==============
*/
__int64 Mark_ParticleModuleInitDismember()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitDismemberArray
==============
*/
__int64 Mark_ParticleModuleInitDismemberArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitFlare
==============
*/
__int64 Mark_ParticleModuleInitFlare()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitFlareArray
==============
*/
__int64 Mark_ParticleModuleInitFlareArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitGeoTrail
==============
*/
__int64 Mark_ParticleModuleInitGeoTrail()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitGeoTrailArray
==============
*/
__int64 Mark_ParticleModuleInitGeoTrailArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitKillWrapBox
==============
*/
__int64 Mark_ParticleModuleInitKillWrapBox()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitKillWrapBoxArray
==============
*/
__int64 Mark_ParticleModuleInitKillWrapBoxArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitLightOmni
==============
*/
_BOOL8 Mark_ParticleModuleInitLightOmni()
{
  ParticleLinkedAssetListDef *v0; 
  int v1; 

  v0 = marParticleLinkedAssetListDef;
  marParticleLinkedAssetListDef = &marParticleModuleInitLightOmni->m_linkedAssetList;
  v1 = Mark_ParticleLinkedAssetListDef();
  marParticleLinkedAssetListDef = v0;
  return v1 != 0;
}

/*
==============
Mark_ParticleModuleInitLightOmniArray
==============
*/
__int64 Mark_ParticleModuleInitLightOmniArray(const unsigned __int64 count)
{
  ParticleModuleInitLightOmni *v1; 
  __int64 v2; 
  ParticleLinkedAssetListDef *v4; 
  int v5; 

  v1 = marParticleModuleInitLightOmni;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marParticleLinkedAssetListDef;
  while ( 1 )
  {
    marParticleModuleInitLightOmni = v1;
    marParticleLinkedAssetListDef = &v1->m_linkedAssetList;
    v5 = Mark_ParticleLinkedAssetListDef();
    marParticleLinkedAssetListDef = v4;
    if ( !v5 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ParticleModuleInitLightSpot
==============
*/
_BOOL8 Mark_ParticleModuleInitLightSpot()
{
  ParticleLinkedAssetListDef *v0; 
  int v1; 

  v0 = marParticleLinkedAssetListDef;
  marParticleLinkedAssetListDef = &marParticleModuleInitLightSpot->m_linkedAssetList;
  v1 = Mark_ParticleLinkedAssetListDef();
  marParticleLinkedAssetListDef = v0;
  return v1 != 0;
}

/*
==============
Mark_ParticleModuleInitLightSpotArray
==============
*/
__int64 Mark_ParticleModuleInitLightSpotArray(const unsigned __int64 count)
{
  ParticleModuleInitLightSpot *v1; 
  __int64 v2; 
  ParticleLinkedAssetListDef *v4; 
  int v5; 

  v1 = marParticleModuleInitLightSpot;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marParticleLinkedAssetListDef;
  while ( 1 )
  {
    marParticleModuleInitLightSpot = v1;
    marParticleLinkedAssetListDef = &v1->m_linkedAssetList;
    v5 = Mark_ParticleLinkedAssetListDef();
    marParticleLinkedAssetListDef = v4;
    if ( !v5 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ParticleModuleInitMaterial
==============
*/
_BOOL8 Mark_ParticleModuleInitMaterial()
{
  ParticleLinkedAssetListDef *v0; 
  int v1; 

  v0 = marParticleLinkedAssetListDef;
  marParticleLinkedAssetListDef = &marParticleModuleInitMaterial->m_linkedAssetList;
  v1 = Mark_ParticleLinkedAssetListDef();
  marParticleLinkedAssetListDef = v0;
  return v1 != 0;
}

/*
==============
Mark_ParticleModuleInitMaterialArray
==============
*/
__int64 Mark_ParticleModuleInitMaterialArray(const unsigned __int64 count)
{
  ParticleModuleInitMaterial *v1; 
  __int64 v2; 
  ParticleLinkedAssetListDef *v4; 
  int v5; 

  v1 = marParticleModuleInitMaterial;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marParticleLinkedAssetListDef;
  while ( 1 )
  {
    marParticleModuleInitMaterial = v1;
    marParticleLinkedAssetListDef = &v1->m_linkedAssetList;
    v5 = Mark_ParticleLinkedAssetListDef();
    marParticleLinkedAssetListDef = v4;
    if ( !v5 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ParticleModuleInitMirrorTexture
==============
*/
__int64 Mark_ParticleModuleInitMirrorTexture()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitMirrorTextureArray
==============
*/
__int64 Mark_ParticleModuleInitMirrorTextureArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitModel
==============
*/
_BOOL8 Mark_ParticleModuleInitModel()
{
  ParticleLinkedAssetListDef *v0; 
  int v1; 

  v0 = marParticleLinkedAssetListDef;
  marParticleLinkedAssetListDef = &marParticleModuleInitModel->m_linkedAssetList;
  v1 = Mark_ParticleLinkedAssetListDef();
  marParticleLinkedAssetListDef = v0;
  return v1 != 0;
}

/*
==============
Mark_ParticleModuleInitModelArray
==============
*/
__int64 Mark_ParticleModuleInitModelArray(const unsigned __int64 count)
{
  ParticleModuleInitModel *v1; 
  __int64 v2; 
  ParticleLinkedAssetListDef *v4; 
  int v5; 

  v1 = marParticleModuleInitModel;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marParticleLinkedAssetListDef;
  while ( 1 )
  {
    marParticleModuleInitModel = v1;
    marParticleLinkedAssetListDef = &v1->m_linkedAssetList;
    v5 = Mark_ParticleLinkedAssetListDef();
    marParticleLinkedAssetListDef = v4;
    if ( !v5 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ParticleModuleInitOcclusionQuery
==============
*/
__int64 Mark_ParticleModuleInitOcclusionQuery()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitOcclusionQueryArray
==============
*/
__int64 Mark_ParticleModuleInitOcclusionQueryArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitOrientedSprite
==============
*/
__int64 Mark_ParticleModuleInitOrientedSprite()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitOrientedSpriteArray
==============
*/
__int64 Mark_ParticleModuleInitOrientedSpriteArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitParticleSim
==============
*/
_BOOL8 Mark_ParticleModuleInitParticleSim()
{
  ParticleLinkedAssetListDef *v0; 
  int v1; 

  v0 = marParticleLinkedAssetListDef;
  marParticleLinkedAssetListDef = &marParticleModuleInitParticleSim->m_linkedAssetList;
  v1 = Mark_ParticleLinkedAssetListDef();
  marParticleLinkedAssetListDef = v0;
  return v1 != 0;
}

/*
==============
Mark_ParticleModuleInitParticleSimArray
==============
*/
__int64 Mark_ParticleModuleInitParticleSimArray(const unsigned __int64 count)
{
  ParticleModuleInitParticleSim *v1; 
  __int64 v2; 
  ParticleLinkedAssetListDef *v4; 
  int v5; 

  v1 = marParticleModuleInitParticleSim;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marParticleLinkedAssetListDef;
  while ( 1 )
  {
    marParticleModuleInitParticleSim = v1;
    marParticleLinkedAssetListDef = &v1->m_linkedAssetList;
    v5 = Mark_ParticleLinkedAssetListDef();
    marParticleLinkedAssetListDef = v4;
    if ( !v5 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ParticleModuleInitPlayerFacing
==============
*/
__int64 Mark_ParticleModuleInitPlayerFacing()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitPlayerFacingArray
==============
*/
__int64 Mark_ParticleModuleInitPlayerFacingArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitRelativeVelocity
==============
*/
__int64 Mark_ParticleModuleInitRelativeVelocity()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitRelativeVelocityArray
==============
*/
__int64 Mark_ParticleModuleInitRelativeVelocityArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitRotation3D
==============
*/
__int64 Mark_ParticleModuleInitRotation3D()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitRotation3DArray
==============
*/
__int64 Mark_ParticleModuleInitRotation3DArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitRotation
==============
*/
__int64 Mark_ParticleModuleInitRotation()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitRotationArray
==============
*/
__int64 Mark_ParticleModuleInitRotationArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitRunner
==============
*/
_BOOL8 Mark_ParticleModuleInitRunner()
{
  ParticleLinkedAssetListDef *v0; 
  int v1; 

  v0 = marParticleLinkedAssetListDef;
  marParticleLinkedAssetListDef = &marParticleModuleInitRunner->m_linkedAssetList;
  v1 = Mark_ParticleLinkedAssetListDef();
  marParticleLinkedAssetListDef = v0;
  return v1 != 0;
}

/*
==============
Mark_ParticleModuleInitRunnerArray
==============
*/
__int64 Mark_ParticleModuleInitRunnerArray(const unsigned __int64 count)
{
  ParticleModuleInitRunner *v1; 
  __int64 v2; 
  ParticleLinkedAssetListDef *v4; 
  int v5; 

  v1 = marParticleModuleInitRunner;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marParticleLinkedAssetListDef;
  while ( 1 )
  {
    marParticleModuleInitRunner = v1;
    marParticleLinkedAssetListDef = &v1->m_linkedAssetList;
    v5 = Mark_ParticleLinkedAssetListDef();
    marParticleLinkedAssetListDef = v4;
    if ( !v5 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ParticleModuleInitSound
==============
*/
_BOOL8 Mark_ParticleModuleInitSound()
{
  ParticleLinkedAssetListDef *v0; 
  int v1; 

  v0 = marParticleLinkedAssetListDef;
  marParticleLinkedAssetListDef = &marParticleModuleInitSound->m_linkedAssetList;
  v1 = Mark_ParticleLinkedAssetListDef();
  marParticleLinkedAssetListDef = v0;
  return v1 != 0;
}

/*
==============
Mark_ParticleModuleInitSoundArray
==============
*/
__int64 Mark_ParticleModuleInitSoundArray(const unsigned __int64 count)
{
  ParticleModuleInitSound *v1; 
  __int64 v2; 
  ParticleLinkedAssetListDef *v4; 
  int v5; 

  v1 = marParticleModuleInitSound;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marParticleLinkedAssetListDef;
  while ( 1 )
  {
    marParticleModuleInitSound = v1;
    marParticleLinkedAssetListDef = &v1->m_linkedAssetList;
    v5 = Mark_ParticleLinkedAssetListDef();
    marParticleLinkedAssetListDef = v4;
    if ( !v5 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ParticleModuleInitSpawn
==============
*/
__int64 Mark_ParticleModuleInitSpawn()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitSpawnArray
==============
*/
__int64 Mark_ParticleModuleInitSpawnArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitSpawnShapeBox
==============
*/
__int64 Mark_ParticleModuleInitSpawnShapeBox()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitSpawnShapeBoxArray
==============
*/
__int64 Mark_ParticleModuleInitSpawnShapeBoxArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitSpawnShapeCylinder
==============
*/
__int64 Mark_ParticleModuleInitSpawnShapeCylinder()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitSpawnShapeCylinderArray
==============
*/
__int64 Mark_ParticleModuleInitSpawnShapeCylinderArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitSpawnShapeEllipsoid
==============
*/
__int64 Mark_ParticleModuleInitSpawnShapeEllipsoid()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitSpawnShapeEllipsoidArray
==============
*/
__int64 Mark_ParticleModuleInitSpawnShapeEllipsoidArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitSpawnShapeMesh
==============
*/
_BOOL8 Mark_ParticleModuleInitSpawnShapeMesh()
{
  ParticleLinkedAssetListDef *v0; 
  int v1; 

  v0 = marParticleLinkedAssetListDef;
  marParticleLinkedAssetListDef = &marParticleModuleInitSpawnShapeMesh->m_linkedAssetList;
  v1 = Mark_ParticleLinkedAssetListDef();
  marParticleLinkedAssetListDef = v0;
  return v1 != 0;
}

/*
==============
Mark_ParticleModuleInitSpawnShapeMeshArray
==============
*/
__int64 Mark_ParticleModuleInitSpawnShapeMeshArray(const unsigned __int64 count)
{
  ParticleModuleInitSpawnShapeMesh *v1; 
  __int64 v2; 
  ParticleLinkedAssetListDef *v4; 
  int v5; 

  v1 = marParticleModuleInitSpawnShapeMesh;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marParticleLinkedAssetListDef;
  while ( 1 )
  {
    marParticleModuleInitSpawnShapeMesh = v1;
    marParticleLinkedAssetListDef = &v1->m_linkedAssetList;
    v5 = Mark_ParticleLinkedAssetListDef();
    marParticleLinkedAssetListDef = v4;
    if ( !v5 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ParticleModuleInitSpawnShapeSphere
==============
*/
__int64 Mark_ParticleModuleInitSpawnShapeSphere()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitSpawnShapeSphereArray
==============
*/
__int64 Mark_ParticleModuleInitSpawnShapeSphereArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitTail
==============
*/
__int64 Mark_ParticleModuleInitTail()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitTailArray
==============
*/
__int64 Mark_ParticleModuleInitTailArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitVectorField
==============
*/
_BOOL8 Mark_ParticleModuleInitVectorField()
{
  ParticleLinkedAssetListDef *v0; 
  int v1; 

  v0 = marParticleLinkedAssetListDef;
  marParticleLinkedAssetListDef = &marParticleModuleInitVectorField->m_linkedAssetList;
  v1 = Mark_ParticleLinkedAssetListDef();
  marParticleLinkedAssetListDef = v0;
  return v1 != 0;
}

/*
==============
Mark_ParticleModuleInitVectorFieldArray
==============
*/
__int64 Mark_ParticleModuleInitVectorFieldArray(const unsigned __int64 count)
{
  ParticleModuleInitVectorField *v1; 
  __int64 v2; 
  ParticleLinkedAssetListDef *v4; 
  int v5; 

  v1 = marParticleModuleInitVectorField;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marParticleLinkedAssetListDef;
  while ( 1 )
  {
    marParticleModuleInitVectorField = v1;
    marParticleLinkedAssetListDef = &v1->m_linkedAssetList;
    v5 = Mark_ParticleLinkedAssetListDef();
    marParticleLinkedAssetListDef = v4;
    if ( !v5 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ParticleModuleInitVolumetric
==============
*/
__int64 Mark_ParticleModuleInitVolumetric()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleInitVolumetricArray
==============
*/
__int64 Mark_ParticleModuleInitVolumetricArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleIntensityGraph
==============
*/
__int64 Mark_ParticleModuleIntensityGraph()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleIntensityGraphArray
==============
*/
__int64 Mark_ParticleModuleIntensityGraphArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleParentVelocityGraph
==============
*/
__int64 Mark_ParticleModuleParentVelocityGraph()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleParentVelocityGraphArray
==============
*/
__int64 Mark_ParticleModuleParentVelocityGraphArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModulePhysicsLight
==============
*/
_BOOL8 Mark_ParticleModulePhysicsLight()
{
  ParticleLinkedAssetListDef *v0; 
  int v1; 

  v0 = marParticleLinkedAssetListDef;
  marParticleLinkedAssetListDef = &marParticleModulePhysicsLight->m_linkedAssetList;
  v1 = Mark_ParticleLinkedAssetListDef();
  marParticleLinkedAssetListDef = v0;
  return v1 != 0;
}

/*
==============
Mark_ParticleModulePhysicsLightArray
==============
*/
__int64 Mark_ParticleModulePhysicsLightArray(const unsigned __int64 count)
{
  ParticleModulePhysicsLight *v1; 
  __int64 v2; 
  ParticleLinkedAssetListDef *v4; 
  int v5; 

  v1 = marParticleModulePhysicsLight;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marParticleLinkedAssetListDef;
  while ( 1 )
  {
    marParticleModulePhysicsLight = v1;
    marParticleLinkedAssetListDef = &v1->m_linkedAssetList;
    v5 = Mark_ParticleLinkedAssetListDef();
    marParticleLinkedAssetListDef = v4;
    if ( !v5 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ParticleModulePhysicsRayCast
==============
*/
__int64 Mark_ParticleModulePhysicsRayCast()
{
  return 1i64;
}

/*
==============
Mark_ParticleModulePhysicsRayCastArray
==============
*/
__int64 Mark_ParticleModulePhysicsRayCastArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModulePositionGraph
==============
*/
__int64 Mark_ParticleModulePositionGraph()
{
  return 1i64;
}

/*
==============
Mark_ParticleModulePositionGraphArray
==============
*/
__int64 Mark_ParticleModulePositionGraphArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleRotationGraph3D
==============
*/
__int64 Mark_ParticleModuleRotationGraph3D()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleRotationGraph3DArray
==============
*/
__int64 Mark_ParticleModuleRotationGraph3DArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleRotationGraph
==============
*/
__int64 Mark_ParticleModuleRotationGraph()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleRotationGraphArray
==============
*/
__int64 Mark_ParticleModuleRotationGraphArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleScaleByDistance
==============
*/
__int64 Mark_ParticleModuleScaleByDistance()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleScaleByDistanceArray
==============
*/
__int64 Mark_ParticleModuleScaleByDistanceArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleShaderGraph
==============
*/
__int64 Mark_ParticleModuleShaderGraph()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleShaderGraphArray
==============
*/
__int64 Mark_ParticleModuleShaderGraphArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleSizeGraph
==============
*/
__int64 Mark_ParticleModuleSizeGraph()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleSizeGraphArray
==============
*/
__int64 Mark_ParticleModuleSizeGraphArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleSizeLerp
==============
*/
__int64 Mark_ParticleModuleSizeLerp()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleSizeLerpArray
==============
*/
__int64 Mark_ParticleModuleSizeLerpArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleTemperatureGraph
==============
*/
__int64 Mark_ParticleModuleTemperatureGraph()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleTemperatureGraphArray
==============
*/
__int64 Mark_ParticleModuleTemperatureGraphArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleTestAge
==============
*/
_BOOL8 Mark_ParticleModuleTestAge()
{
  ParticleModuleTestEventHandlerData *v0; 
  ParticleLinkedAssetListDef *v1; 
  int v2; 

  v0 = marParticleModuleTestEventHandlerData;
  v1 = marParticleLinkedAssetListDef;
  marParticleModuleTestEventHandlerData = &marParticleModuleTestAge->m_eventHandlerData;
  marParticleLinkedAssetListDef = &marParticleModuleTestAge->m_eventHandlerData.m_linkedAssetList;
  v2 = Mark_ParticleLinkedAssetListDef();
  marParticleLinkedAssetListDef = v1;
  marParticleModuleTestEventHandlerData = v0;
  return v2 != 0;
}

/*
==============
Mark_ParticleModuleTestAgeArray
==============
*/
__int64 Mark_ParticleModuleTestAgeArray(const unsigned __int64 count)
{
  ParticleModuleTestAge *v1; 
  __int64 v2; 
  ParticleModuleTestEventHandlerData *v4; 
  ParticleLinkedAssetListDef *v5; 
  int v6; 

  v1 = marParticleModuleTestAge;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marParticleModuleTestEventHandlerData;
  v5 = marParticleLinkedAssetListDef;
  while ( 1 )
  {
    marParticleModuleTestAge = v1;
    marParticleModuleTestEventHandlerData = &v1->m_eventHandlerData;
    marParticleLinkedAssetListDef = &v1->m_eventHandlerData.m_linkedAssetList;
    v6 = Mark_ParticleLinkedAssetListDef();
    marParticleLinkedAssetListDef = v5;
    marParticleModuleTestEventHandlerData = v4;
    if ( !v6 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ParticleModuleTestBirth
==============
*/
_BOOL8 Mark_ParticleModuleTestBirth()
{
  ParticleModuleTestEventHandlerData *v0; 
  ParticleLinkedAssetListDef *v1; 
  int v2; 

  v0 = marParticleModuleTestEventHandlerData;
  v1 = marParticleLinkedAssetListDef;
  marParticleModuleTestEventHandlerData = &marParticleModuleTestBirth->m_eventHandlerData;
  marParticleLinkedAssetListDef = &marParticleModuleTestBirth->m_eventHandlerData.m_linkedAssetList;
  v2 = Mark_ParticleLinkedAssetListDef();
  marParticleLinkedAssetListDef = v1;
  marParticleModuleTestEventHandlerData = v0;
  return v2 != 0;
}

/*
==============
Mark_ParticleModuleTestBirthArray
==============
*/
__int64 Mark_ParticleModuleTestBirthArray(const unsigned __int64 count)
{
  ParticleModuleTestBirth *v1; 
  __int64 v2; 
  ParticleModuleTestEventHandlerData *v4; 
  ParticleLinkedAssetListDef *v5; 
  int v6; 

  v1 = marParticleModuleTestBirth;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marParticleModuleTestEventHandlerData;
  v5 = marParticleLinkedAssetListDef;
  while ( 1 )
  {
    marParticleModuleTestBirth = v1;
    marParticleModuleTestEventHandlerData = &v1->m_eventHandlerData;
    marParticleLinkedAssetListDef = &v1->m_eventHandlerData.m_linkedAssetList;
    v6 = Mark_ParticleLinkedAssetListDef();
    marParticleLinkedAssetListDef = v5;
    marParticleModuleTestEventHandlerData = v4;
    if ( !v6 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ParticleModuleTestDeath
==============
*/
_BOOL8 Mark_ParticleModuleTestDeath()
{
  ParticleModuleTestEventHandlerData *v0; 
  ParticleLinkedAssetListDef *v1; 
  int v2; 

  v0 = marParticleModuleTestEventHandlerData;
  v1 = marParticleLinkedAssetListDef;
  marParticleModuleTestEventHandlerData = &marParticleModuleTestDeath->m_eventHandlerData;
  marParticleLinkedAssetListDef = &marParticleModuleTestDeath->m_eventHandlerData.m_linkedAssetList;
  v2 = Mark_ParticleLinkedAssetListDef();
  marParticleLinkedAssetListDef = v1;
  marParticleModuleTestEventHandlerData = v0;
  return v2 != 0;
}

/*
==============
Mark_ParticleModuleTestDeathArray
==============
*/
__int64 Mark_ParticleModuleTestDeathArray(const unsigned __int64 count)
{
  ParticleModuleTestDeath *v1; 
  __int64 v2; 
  ParticleModuleTestEventHandlerData *v4; 
  ParticleLinkedAssetListDef *v5; 
  int v6; 

  v1 = marParticleModuleTestDeath;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marParticleModuleTestEventHandlerData;
  v5 = marParticleLinkedAssetListDef;
  while ( 1 )
  {
    marParticleModuleTestDeath = v1;
    marParticleModuleTestEventHandlerData = &v1->m_eventHandlerData;
    marParticleLinkedAssetListDef = &v1->m_eventHandlerData.m_linkedAssetList;
    v6 = Mark_ParticleLinkedAssetListDef();
    marParticleLinkedAssetListDef = v5;
    marParticleModuleTestEventHandlerData = v4;
    if ( !v6 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ParticleModuleTestEventHandlerData
==============
*/
_BOOL8 Mark_ParticleModuleTestEventHandlerData()
{
  ParticleLinkedAssetListDef *v0; 
  int v1; 

  v0 = marParticleLinkedAssetListDef;
  marParticleLinkedAssetListDef = &marParticleModuleTestEventHandlerData->m_linkedAssetList;
  v1 = Mark_ParticleLinkedAssetListDef();
  marParticleLinkedAssetListDef = v0;
  return v1 != 0;
}

/*
==============
Mark_ParticleModuleTestEventHandlerDataArray
==============
*/
__int64 Mark_ParticleModuleTestEventHandlerDataArray(const unsigned __int64 count)
{
  ParticleModuleTestEventHandlerData *v1; 
  __int64 v2; 
  ParticleLinkedAssetListDef *v4; 
  int v5; 

  v1 = marParticleModuleTestEventHandlerData;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marParticleLinkedAssetListDef;
  while ( 1 )
  {
    marParticleModuleTestEventHandlerData = v1;
    marParticleLinkedAssetListDef = &v1->m_linkedAssetList;
    v5 = Mark_ParticleLinkedAssetListDef();
    marParticleLinkedAssetListDef = v4;
    if ( !v5 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ParticleModuleTestGravity
==============
*/
_BOOL8 Mark_ParticleModuleTestGravity()
{
  ParticleModuleTestEventHandlerData *v0; 
  ParticleLinkedAssetListDef *v1; 
  int v2; 

  v0 = marParticleModuleTestEventHandlerData;
  v1 = marParticleLinkedAssetListDef;
  marParticleModuleTestEventHandlerData = &marParticleModuleTestGravity->m_eventHandlerData;
  marParticleLinkedAssetListDef = &marParticleModuleTestGravity->m_eventHandlerData.m_linkedAssetList;
  v2 = Mark_ParticleLinkedAssetListDef();
  marParticleLinkedAssetListDef = v1;
  marParticleModuleTestEventHandlerData = v0;
  return v2 != 0;
}

/*
==============
Mark_ParticleModuleTestGravityArray
==============
*/
__int64 Mark_ParticleModuleTestGravityArray(const unsigned __int64 count)
{
  ParticleModuleTestGravity *v1; 
  __int64 v2; 
  ParticleModuleTestEventHandlerData *v4; 
  ParticleLinkedAssetListDef *v5; 
  int v6; 

  v1 = marParticleModuleTestGravity;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marParticleModuleTestEventHandlerData;
  v5 = marParticleLinkedAssetListDef;
  while ( 1 )
  {
    marParticleModuleTestGravity = v1;
    marParticleModuleTestEventHandlerData = &v1->m_eventHandlerData;
    marParticleLinkedAssetListDef = &v1->m_eventHandlerData.m_linkedAssetList;
    v6 = Mark_ParticleLinkedAssetListDef();
    marParticleLinkedAssetListDef = v5;
    marParticleModuleTestEventHandlerData = v4;
    if ( !v6 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ParticleModuleTestImpact
==============
*/
_BOOL8 Mark_ParticleModuleTestImpact()
{
  ParticleModuleTestEventHandlerData *v0; 
  ParticleLinkedAssetListDef *v1; 
  int v2; 

  v0 = marParticleModuleTestEventHandlerData;
  v1 = marParticleLinkedAssetListDef;
  marParticleModuleTestEventHandlerData = &marParticleModuleTestImpact->m_eventHandlerData;
  marParticleLinkedAssetListDef = &marParticleModuleTestImpact->m_eventHandlerData.m_linkedAssetList;
  v2 = Mark_ParticleLinkedAssetListDef();
  marParticleLinkedAssetListDef = v1;
  marParticleModuleTestEventHandlerData = v0;
  return v2 != 0;
}

/*
==============
Mark_ParticleModuleTestImpactArray
==============
*/
__int64 Mark_ParticleModuleTestImpactArray(const unsigned __int64 count)
{
  ParticleModuleTestImpact *v1; 
  __int64 v2; 
  ParticleModuleTestEventHandlerData *v4; 
  ParticleLinkedAssetListDef *v5; 
  int v6; 

  v1 = marParticleModuleTestImpact;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marParticleModuleTestEventHandlerData;
  v5 = marParticleLinkedAssetListDef;
  while ( 1 )
  {
    marParticleModuleTestImpact = v1;
    marParticleModuleTestEventHandlerData = &v1->m_eventHandlerData;
    marParticleLinkedAssetListDef = &v1->m_eventHandlerData.m_linkedAssetList;
    v6 = Mark_ParticleLinkedAssetListDef();
    marParticleLinkedAssetListDef = v5;
    marParticleModuleTestEventHandlerData = v4;
    if ( !v6 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ParticleModuleTestPos
==============
*/
_BOOL8 Mark_ParticleModuleTestPos()
{
  ParticleModuleTestEventHandlerData *v0; 
  ParticleLinkedAssetListDef *v1; 
  int v2; 

  v0 = marParticleModuleTestEventHandlerData;
  v1 = marParticleLinkedAssetListDef;
  marParticleModuleTestEventHandlerData = &marParticleModuleTestPos->m_eventHandlerData;
  marParticleLinkedAssetListDef = &marParticleModuleTestPos->m_eventHandlerData.m_linkedAssetList;
  v2 = Mark_ParticleLinkedAssetListDef();
  marParticleLinkedAssetListDef = v1;
  marParticleModuleTestEventHandlerData = v0;
  return v2 != 0;
}

/*
==============
Mark_ParticleModuleTestPosArray
==============
*/
__int64 Mark_ParticleModuleTestPosArray(const unsigned __int64 count)
{
  ParticleModuleTestPos *v1; 
  __int64 v2; 
  ParticleModuleTestEventHandlerData *v4; 
  ParticleLinkedAssetListDef *v5; 
  int v6; 

  v1 = marParticleModuleTestPos;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marParticleModuleTestEventHandlerData;
  v5 = marParticleLinkedAssetListDef;
  while ( 1 )
  {
    marParticleModuleTestPos = v1;
    marParticleModuleTestEventHandlerData = &v1->m_eventHandlerData;
    marParticleLinkedAssetListDef = &v1->m_eventHandlerData.m_linkedAssetList;
    v6 = Mark_ParticleLinkedAssetListDef();
    marParticleLinkedAssetListDef = v5;
    marParticleModuleTestEventHandlerData = v4;
    if ( !v6 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ParticleModuleTestTimeInState
==============
*/
_BOOL8 Mark_ParticleModuleTestTimeInState()
{
  ParticleModuleTestEventHandlerData *v0; 
  ParticleLinkedAssetListDef *v1; 
  int v2; 

  v0 = marParticleModuleTestEventHandlerData;
  v1 = marParticleLinkedAssetListDef;
  marParticleModuleTestEventHandlerData = &marParticleModuleTestTimeInState->m_eventHandlerData;
  marParticleLinkedAssetListDef = &marParticleModuleTestTimeInState->m_eventHandlerData.m_linkedAssetList;
  v2 = Mark_ParticleLinkedAssetListDef();
  marParticleLinkedAssetListDef = v1;
  marParticleModuleTestEventHandlerData = v0;
  return v2 != 0;
}

/*
==============
Mark_ParticleModuleTestTimeInStateArray
==============
*/
__int64 Mark_ParticleModuleTestTimeInStateArray(const unsigned __int64 count)
{
  ParticleModuleTestTimeInState *v1; 
  __int64 v2; 
  ParticleModuleTestEventHandlerData *v4; 
  ParticleLinkedAssetListDef *v5; 
  int v6; 

  v1 = marParticleModuleTestTimeInState;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marParticleModuleTestEventHandlerData;
  v5 = marParticleLinkedAssetListDef;
  while ( 1 )
  {
    marParticleModuleTestTimeInState = v1;
    marParticleModuleTestEventHandlerData = &v1->m_eventHandlerData;
    marParticleLinkedAssetListDef = &v1->m_eventHandlerData.m_linkedAssetList;
    v6 = Mark_ParticleLinkedAssetListDef();
    marParticleLinkedAssetListDef = v5;
    marParticleModuleTestEventHandlerData = v4;
    if ( !v6 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ParticleModuleType
==============
*/
__int64 Mark_ParticleModuleType()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleTypeArray
==============
*/
__int64 Mark_ParticleModuleTypeArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleTypeDef
==============
*/
int Mark_ParticleModuleTypeDef()
{
  ParticleModuleType moduleType; 
  ParticleModuleInitBeam *v1; 
  int result; 
  ParticleModuleInitDecal *v3; 
  ParticleModuleInitLightOmni *v4; 
  ParticleModuleInitLightSpot *v5; 
  ParticleModuleInitMaterial *v6; 
  ParticleModuleInitModel *v7; 
  ParticleModuleInitParticleSim *v8; 
  ParticleModuleInitRunner *v9; 
  ParticleModuleInitSound *v10; 
  ParticleModuleInitSpawnShapeMesh *v11; 
  ParticleModuleInitVectorField *v12; 
  ParticleModulePhysicsLight *v13; 
  ParticleModuleTestAge *v14; 
  ParticleModuleTestBirth *v15; 
  ParticleModuleTestDeath *v16; 
  ParticleModuleTestGravity *v17; 
  ParticleModuleTestImpact *v18; 
  ParticleModuleTestPos *v19; 
  ParticleModuleTestTimeInState *v20; 

  moduleType = marParticleModuleDef->moduleType;
  if ( marParticleModuleDef->moduleType > PARTICLE_MODULE_INIT_ATTRIBUTES )
  {
    if ( moduleType == PARTICLE_MODULE_INIT_BEAM )
    {
      v1 = marParticleModuleInitBeam;
      marParticleModuleInitBeam = (ParticleModuleInitBeam *)marParticleModuleTypeDef;
      result = Mark_ParticleModuleInitBeam();
      marParticleModuleInitBeam = v1;
      goto LABEL_49;
    }
    if ( (unsigned __int16)(moduleType - 3) > 1u )
    {
      if ( moduleType == PARTICLE_MODULE_INIT_DECAL )
      {
        v3 = marParticleModuleInitDecal;
        marParticleModuleInitDecal = (ParticleModuleInitDecal *)marParticleModuleTypeDef;
        result = Mark_ParticleModuleInitDecal();
        marParticleModuleInitDecal = v3;
        goto LABEL_49;
      }
      if ( (unsigned __int16)(moduleType - 6) > 2u )
      {
        switch ( moduleType )
        {
          case PARTICLE_MODULE_INIT_LIGHT_OMNI:
            v4 = marParticleModuleInitLightOmni;
            marParticleModuleInitLightOmni = (ParticleModuleInitLightOmni *)marParticleModuleTypeDef;
            result = Mark_ParticleModuleInitLightOmni();
            marParticleModuleInitLightOmni = v4;
            goto LABEL_49;
          case PARTICLE_MODULE_INIT_LIGHT_SPOT:
            v5 = marParticleModuleInitLightSpot;
            marParticleModuleInitLightSpot = (ParticleModuleInitLightSpot *)marParticleModuleTypeDef;
            result = Mark_ParticleModuleInitLightSpot();
            marParticleModuleInitLightSpot = v5;
            goto LABEL_49;
          case PARTICLE_MODULE_INIT_MATERIAL:
            v6 = marParticleModuleInitMaterial;
            marParticleModuleInitMaterial = (ParticleModuleInitMaterial *)marParticleModuleTypeDef;
            result = Mark_ParticleModuleInitMaterial();
            marParticleModuleInitMaterial = v6;
            goto LABEL_49;
        }
        if ( moduleType != PARTICLE_MODULE_INIT_MIRROR_TEXTURE )
        {
          if ( moduleType == PARTICLE_MODULE_INIT_MODEL )
          {
            v7 = marParticleModuleInitModel;
            marParticleModuleInitModel = (ParticleModuleInitModel *)marParticleModuleTypeDef;
            result = Mark_ParticleModuleInitModel();
            marParticleModuleInitModel = v7;
            goto LABEL_49;
          }
          if ( (unsigned __int16)(moduleType - 14) > 1u )
          {
            if ( moduleType == PARTICLE_MODULE_INIT_PARTICLE_SIM )
            {
              v8 = marParticleModuleInitParticleSim;
              marParticleModuleInitParticleSim = (ParticleModuleInitParticleSim *)marParticleModuleTypeDef;
              result = Mark_ParticleModuleInitParticleSim();
              marParticleModuleInitParticleSim = v8;
              goto LABEL_49;
            }
            if ( (unsigned __int16)(moduleType - 17) > 3u )
            {
              if ( moduleType == PARTICLE_MODULE_INIT_RUNNER )
              {
                v9 = marParticleModuleInitRunner;
                marParticleModuleInitRunner = (ParticleModuleInitRunner *)marParticleModuleTypeDef;
                result = Mark_ParticleModuleInitRunner();
                marParticleModuleInitRunner = v9;
                goto LABEL_49;
              }
              if ( moduleType == PARTICLE_MODULE_INIT_SOUND )
              {
                v10 = marParticleModuleInitSound;
                marParticleModuleInitSound = (ParticleModuleInitSound *)marParticleModuleTypeDef;
                result = Mark_ParticleModuleInitSound();
                marParticleModuleInitSound = v10;
                goto LABEL_49;
              }
              if ( (unsigned __int16)(moduleType - 23) > 3u )
              {
                if ( moduleType == PARTICLE_MODULE_INIT_SPAWN_SHAPE_MESH )
                {
                  v11 = marParticleModuleInitSpawnShapeMesh;
                  marParticleModuleInitSpawnShapeMesh = (ParticleModuleInitSpawnShapeMesh *)marParticleModuleTypeDef;
                  result = Mark_ParticleModuleInitSpawnShapeMesh();
                  marParticleModuleInitSpawnShapeMesh = v11;
                  goto LABEL_49;
                }
                if ( (unsigned __int16)(moduleType - 28) > 1u )
                {
                  if ( moduleType == PARTICLE_MODULE_INIT_VECTOR_FIELD )
                  {
                    v12 = marParticleModuleInitVectorField;
                    marParticleModuleInitVectorField = (ParticleModuleInitVectorField *)marParticleModuleTypeDef;
                    result = Mark_ParticleModuleInitVectorField();
                    marParticleModuleInitVectorField = v12;
                    goto LABEL_49;
                  }
                  if ( (unsigned __int16)(moduleType - 31) > 0xDu )
                  {
                    if ( moduleType == PARTICLE_MODULE_PHYSICS_LIGHT )
                    {
                      v13 = marParticleModulePhysicsLight;
                      marParticleModulePhysicsLight = (ParticleModulePhysicsLight *)marParticleModuleTypeDef;
                      result = Mark_ParticleModulePhysicsLight();
                      marParticleModulePhysicsLight = v13;
                      goto LABEL_49;
                    }
                    if ( (unsigned __int16)(moduleType - 46) > 8u )
                    {
                      switch ( moduleType )
                      {
                        case PARTICLE_MODULE_TEST_BEGIN:
                          v14 = marParticleModuleTestAge;
                          marParticleModuleTestAge = (ParticleModuleTestAge *)marParticleModuleTypeDef;
                          result = Mark_ParticleModuleTestAge();
                          marParticleModuleTestAge = v14;
                          goto LABEL_49;
                        case PARTICLE_MODULE_TEST_BIRTH:
                          v15 = marParticleModuleTestBirth;
                          marParticleModuleTestBirth = (ParticleModuleTestBirth *)marParticleModuleTypeDef;
                          result = Mark_ParticleModuleTestBirth();
                          marParticleModuleTestBirth = v15;
                          goto LABEL_49;
                        case PARTICLE_MODULE_TEST_DEATH:
                          v16 = marParticleModuleTestDeath;
                          marParticleModuleTestDeath = (ParticleModuleTestDeath *)marParticleModuleTypeDef;
                          result = Mark_ParticleModuleTestDeath();
                          marParticleModuleTestDeath = v16;
                          goto LABEL_49;
                        case PARTICLE_MODULE_TEST_GRAVITY:
                          v17 = marParticleModuleTestGravity;
                          marParticleModuleTestGravity = (ParticleModuleTestGravity *)marParticleModuleTypeDef;
                          result = Mark_ParticleModuleTestGravity();
                          marParticleModuleTestGravity = v17;
                          goto LABEL_49;
                        case PARTICLE_MODULE_TEST_IMPACT:
                          v18 = marParticleModuleTestImpact;
                          marParticleModuleTestImpact = (ParticleModuleTestImpact *)marParticleModuleTypeDef;
                          result = Mark_ParticleModuleTestImpact();
                          marParticleModuleTestImpact = v18;
                          goto LABEL_49;
                        case PARTICLE_MODULE_TEST_POS:
                          v19 = marParticleModuleTestPos;
                          marParticleModuleTestPos = (ParticleModuleTestPos *)marParticleModuleTypeDef;
                          result = Mark_ParticleModuleTestPos();
                          marParticleModuleTestPos = v19;
                          goto LABEL_49;
                        case PARTICLE_MODULE_TEST_TIME_IN_STATE:
                          v20 = marParticleModuleTestTimeInState;
                          marParticleModuleTestTimeInState = (ParticleModuleTestTimeInState *)marParticleModuleTypeDef;
                          result = Mark_ParticleModuleTestTimeInState();
                          marParticleModuleTestTimeInState = v20;
LABEL_49:
                          if ( !result )
                            return result;
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return 1;
}

/*
==============
Mark_ParticleModuleTypeDefArray
==============
*/
__int64 Mark_ParticleModuleTypeDefArray(const unsigned __int64 count)
{
  ParticleModuleTypeDef *v1; 
  __int64 v2; 

  v1 = marParticleModuleTypeDef;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  while ( 1 )
  {
    marParticleModuleTypeDef = v1;
    if ( !Mark_ParticleModuleTypeDef() )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ParticleModuleVectorFieldGraph
==============
*/
__int64 Mark_ParticleModuleVectorFieldGraph()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleVectorFieldGraphArray
==============
*/
__int64 Mark_ParticleModuleVectorFieldGraphArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleVelocityGraph
==============
*/
__int64 Mark_ParticleModuleVelocityGraph()
{
  return 1i64;
}

/*
==============
Mark_ParticleModuleVelocityGraphArray
==============
*/
__int64 Mark_ParticleModuleVelocityGraphArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticlePhaseOptions
==============
*/
__int64 Mark_ParticlePhaseOptions()
{
  return 1i64;
}

/*
==============
Mark_ParticlePhaseOptionsArray
==============
*/
__int64 Mark_ParticlePhaseOptionsArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticlePhysicsFXData
==============
*/
_BOOL8 Mark_ParticlePhysicsFXData()
{
  PhysicsFXPipeline **v0; 
  int v1; 
  PhysicsFXShape **v2; 
  int v3; 
  _BOOL8 result; 

  v0 = marPhysicsFXPipelinePtr;
  marPhysicsFXPipelinePtr = &marParticlePhysicsFXData->physicsFXPipeline;
  v1 = Mark_PhysicsFXPipelinePtr();
  marPhysicsFXPipelinePtr = v0;
  result = 0;
  if ( v1 )
  {
    v2 = marPhysicsFXShapePtr;
    marPhysicsFXShapePtr = &marParticlePhysicsFXData->physicsFXShape;
    v3 = Mark_PhysicsFXShapePtr();
    marPhysicsFXShapePtr = v2;
    if ( v3 )
      return 1;
  }
  return result;
}

/*
==============
Mark_ParticlePhysicsFXDataArray
==============
*/
__int64 Mark_ParticlePhysicsFXDataArray(const unsigned __int64 count)
{
  ParticlePhysicsFXData *v1; 
  __int64 v2; 
  PhysicsFXPipeline **v4; 
  int v5; 
  PhysicsFXShape **v6; 
  int v7; 

  v1 = marParticlePhysicsFXData;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  while ( 1 )
  {
    v4 = marPhysicsFXPipelinePtr;
    marPhysicsFXPipelinePtr = &v1->physicsFXPipeline;
    marParticlePhysicsFXData = v1;
    v5 = Mark_PhysicsFXPipelinePtr();
    marPhysicsFXPipelinePtr = v4;
    if ( !v5 )
      break;
    v6 = marPhysicsFXShapePtr;
    marPhysicsFXShapePtr = &marParticlePhysicsFXData->physicsFXShape;
    v7 = Mark_PhysicsFXShapePtr();
    marPhysicsFXShapePtr = v6;
    if ( !v7 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ParticleRelativeVelocityType
==============
*/
__int64 Mark_ParticleRelativeVelocityType()
{
  return 1i64;
}

/*
==============
Mark_ParticleRelativeVelocityTypeArray
==============
*/
__int64 Mark_ParticleRelativeVelocityTypeArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleRenderOptions
==============
*/
__int64 Mark_ParticleRenderOptions()
{
  return 1i64;
}

/*
==============
Mark_ParticleRenderOptionsArray
==============
*/
__int64 Mark_ParticleRenderOptionsArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleShaderGraphCurves
==============
*/
__int64 Mark_ParticleShaderGraphCurves()
{
  return 1i64;
}

/*
==============
Mark_ParticleShaderGraphCurvesArray
==============
*/
__int64 Mark_ParticleShaderGraphCurvesArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleShaderGraphOptions
==============
*/
__int64 Mark_ParticleShaderGraphOptions()
{
  return 1i64;
}

/*
==============
Mark_ParticleShaderGraphOptionsArray
==============
*/
__int64 Mark_ParticleShaderGraphOptionsArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleSpawnFlags
==============
*/
__int64 Mark_ParticleSpawnFlags()
{
  return 1i64;
}

/*
==============
Mark_ParticleSpawnFlagsArray
==============
*/
__int64 Mark_ParticleSpawnFlagsArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleSpawnMeshAssetDef
==============
*/
__int64 Mark_ParticleSpawnMeshAssetDef()
{
  return 1i64;
}

/*
==============
Mark_ParticleSpawnMeshAssetDefArray
==============
*/
__int64 Mark_ParticleSpawnMeshAssetDefArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleSpawnShapeType
==============
*/
__int64 Mark_ParticleSpawnShapeType()
{
  return 1i64;
}

/*
==============
Mark_ParticleSpawnShapeTypeArray
==============
*/
__int64 Mark_ParticleSpawnShapeTypeArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleStateDef
==============
*/
__int64 Mark_ParticleStateDef()
{
  ParticleModuleGroupDef *moduleGroupDefs; 
  ParticleModuleGroupDef *v1; 
  __int64 v2; 
  ParticleModuleDef *v3; 
  ParticleModuleTypeDef *v4; 
  ParticleModuleDef *moduleDefs; 
  __int64 v6; 
  unsigned __int64 numModules; 
  int v8; 
  __int64 result; 

  moduleGroupDefs = marParticleStateDef->moduleGroupDefs;
  if ( !marParticleStateDef->moduleGroupDefs )
    return 1i64;
  v1 = marParticleModuleGroupDef;
  v2 = 0i64;
  v3 = marParticleModuleDef;
  v4 = marParticleModuleTypeDef;
  while ( 1 )
  {
    marParticleModuleGroupDef = moduleGroupDefs;
    moduleDefs = moduleGroupDefs->moduleDefs;
    if ( moduleGroupDefs->moduleDefs )
      break;
LABEL_8:
    ++moduleGroupDefs;
    if ( (unsigned __int64)++v2 >= 3 )
    {
      marParticleModuleGroupDef = v1;
      return 1i64;
    }
  }
  marParticleModuleDef = moduleGroupDefs->moduleDefs;
  v6 = 0i64;
  numModules = moduleGroupDefs->numModules;
  if ( !moduleGroupDefs->numModules )
  {
LABEL_7:
    marParticleModuleDef = v3;
    goto LABEL_8;
  }
  while ( 1 )
  {
    marParticleModuleDef = moduleDefs;
    marParticleModuleTypeDef = &moduleDefs->moduleData;
    v8 = Mark_ParticleModuleTypeDef();
    marParticleModuleTypeDef = v4;
    if ( !v8 )
      break;
    ++moduleDefs;
    if ( ++v6 >= numModules )
      goto LABEL_7;
  }
  marParticleModuleDef = v3;
  result = 0i64;
  marParticleModuleGroupDef = v1;
  return result;
}

/*
==============
Mark_ParticleStateDefArray
==============
*/
__int64 Mark_ParticleStateDefArray(const unsigned __int64 count)
{
  ParticleStateDef *v1; 
  unsigned __int64 v2; 
  ParticleModuleGroupDef *v3; 
  ParticleModuleDef *v4; 
  ParticleModuleTypeDef *v5; 
  unsigned __int64 v6; 
  ParticleModuleGroupDef *moduleGroupDefs; 
  __int64 v8; 
  ParticleModuleDef *moduleDefs; 
  __int64 v10; 
  unsigned __int64 numModules; 
  int v12; 
  __int64 result; 
  unsigned __int64 v15; 
  ParticleModuleGroupDef *v16; 

  v1 = marParticleStateDef;
  v2 = 0i64;
  v15 = 0i64;
  if ( !count )
    return 1i64;
  v3 = marParticleModuleGroupDef;
  v4 = marParticleModuleDef;
  v5 = marParticleModuleTypeDef;
  v6 = count;
  while ( 1 )
  {
    marParticleStateDef = v1;
    moduleGroupDefs = v1->moduleGroupDefs;
    if ( v1->moduleGroupDefs )
      break;
LABEL_12:
    ++v2;
    ++v1;
    v15 = v2;
    if ( v2 >= v6 )
      return 1i64;
  }
  v16 = v3;
  v8 = 0i64;
  while ( 1 )
  {
    marParticleModuleGroupDef = moduleGroupDefs;
    moduleDefs = moduleGroupDefs->moduleDefs;
    if ( moduleGroupDefs->moduleDefs )
      break;
LABEL_10:
    ++moduleGroupDefs;
    if ( (unsigned __int64)++v8 >= 3 )
    {
      v3 = v16;
      v2 = v15;
      v6 = count;
      marParticleModuleGroupDef = v16;
      goto LABEL_12;
    }
  }
  marParticleModuleDef = moduleGroupDefs->moduleDefs;
  v10 = 0i64;
  numModules = moduleGroupDefs->numModules;
  if ( !moduleGroupDefs->numModules )
  {
LABEL_9:
    marParticleModuleDef = v4;
    goto LABEL_10;
  }
  while ( 1 )
  {
    marParticleModuleDef = moduleDefs;
    marParticleModuleTypeDef = &moduleDefs->moduleData;
    v12 = Mark_ParticleModuleTypeDef();
    marParticleModuleTypeDef = v5;
    if ( !v12 )
      break;
    ++moduleDefs;
    if ( ++v10 >= numModules )
      goto LABEL_9;
  }
  marParticleModuleGroupDef = v16;
  result = 0i64;
  marParticleModuleDef = v4;
  return result;
}

/*
==============
Mark_ParticleStateDefFlags
==============
*/
__int64 Mark_ParticleStateDefFlags()
{
  return 1i64;
}

/*
==============
Mark_ParticleStateDefFlagsArray
==============
*/
__int64 Mark_ParticleStateDefFlagsArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleSystemDef
==============
*/
__int64 Mark_ParticleSystemDef()
{
  ParticleEmitterDef *emitterDefs; 
  ParticleEmitterDef *v1; 
  unsigned __int64 v2; 
  unsigned __int64 numEmitters; 
  ParticleStateDef *v4; 
  ParticleModuleGroupDef *v5; 
  ParticleModuleDef *v6; 
  ParticleModuleTypeDef *v7; 
  ParticleStateDef *stateDefs; 
  unsigned __int64 v9; 
  unsigned __int64 numStates; 
  ParticleModuleGroupDef *moduleGroupDefs; 
  __int64 v12; 
  ParticleModuleDef *moduleDefs; 
  __int64 v14; 
  unsigned __int64 numModules; 
  int v16; 
  __int64 result; 
  ParticleStateDef *v18; 
  ParticleEmitterDef *v19; 
  unsigned __int64 v20; 
  unsigned __int64 v21; 
  unsigned __int64 v22; 
  ParticleEmitterDef *v23; 
  unsigned __int64 v24; 
  ParticleModuleGroupDef *v25; 

  emitterDefs = marParticleSystemDef->emitterDefs;
  v23 = emitterDefs;
  if ( !emitterDefs )
    return 1i64;
  v1 = marParticleEmitterDef;
  v2 = 0i64;
  marParticleEmitterDef = marParticleSystemDef->emitterDefs;
  numEmitters = marParticleSystemDef->numEmitters;
  v19 = v1;
  v21 = numEmitters;
  v24 = 0i64;
  if ( !marParticleSystemDef->numEmitters )
    goto LABEL_20;
  v4 = marParticleStateDef;
  v5 = marParticleModuleGroupDef;
  v6 = marParticleModuleDef;
  v7 = marParticleModuleTypeDef;
LABEL_4:
  marParticleEmitterDef = emitterDefs;
  stateDefs = emitterDefs->stateDefs;
  if ( !emitterDefs->stateDefs )
    goto LABEL_18;
  v18 = v4;
  v9 = 0i64;
  marParticleStateDef = emitterDefs->stateDefs;
  numStates = emitterDefs->numStates;
  v20 = numStates;
  v22 = 0i64;
  if ( !emitterDefs->numStates )
    goto LABEL_17;
  while ( 1 )
  {
    marParticleStateDef = stateDefs;
    moduleGroupDefs = stateDefs->moduleGroupDefs;
    if ( stateDefs->moduleGroupDefs )
      break;
LABEL_15:
    ++v9;
    ++stateDefs;
    v22 = v9;
    if ( v9 >= numStates )
    {
      emitterDefs = v23;
      v2 = v24;
      numEmitters = v21;
LABEL_17:
      v4 = v18;
      marParticleStateDef = v18;
LABEL_18:
      ++emitterDefs;
      ++v2;
      v23 = emitterDefs;
      v24 = v2;
      if ( v2 >= numEmitters )
      {
        v1 = v19;
LABEL_20:
        marParticleEmitterDef = v1;
        return 1i64;
      }
      goto LABEL_4;
    }
  }
  v25 = v5;
  v12 = 0i64;
  while ( 1 )
  {
    marParticleModuleGroupDef = moduleGroupDefs;
    moduleDefs = moduleGroupDefs->moduleDefs;
    if ( moduleGroupDefs->moduleDefs )
      break;
LABEL_13:
    ++moduleGroupDefs;
    if ( (unsigned __int64)++v12 >= 3 )
    {
      v5 = v25;
      v9 = v22;
      numStates = v20;
      marParticleModuleGroupDef = v25;
      goto LABEL_15;
    }
  }
  marParticleModuleDef = moduleGroupDefs->moduleDefs;
  v14 = 0i64;
  numModules = moduleGroupDefs->numModules;
  if ( !moduleGroupDefs->numModules )
  {
LABEL_12:
    marParticleModuleDef = v6;
    goto LABEL_13;
  }
  while ( 1 )
  {
    marParticleModuleDef = moduleDefs;
    marParticleModuleTypeDef = &moduleDefs->moduleData;
    v16 = Mark_ParticleModuleTypeDef();
    marParticleModuleTypeDef = v7;
    if ( !v16 )
      break;
    ++moduleDefs;
    if ( ++v14 >= numModules )
      goto LABEL_12;
  }
  marParticleModuleGroupDef = v25;
  marParticleStateDef = v18;
  marParticleEmitterDef = v19;
  result = 0i64;
  marParticleModuleDef = v6;
  return result;
}

/*
==============
Mark_ParticleSystemDefArray
==============
*/
__int64 Mark_ParticleSystemDefArray(const unsigned __int64 count)
{
  ParticleSystemDef *v1; 
  unsigned __int64 v2; 
  unsigned __int64 v3; 
  ParticleEmitterDef *v4; 
  ParticleStateDef *v5; 
  ParticleModuleGroupDef *v6; 
  ParticleModuleDef *v7; 
  ParticleModuleTypeDef *v8; 
  ParticleEmitterDef *emitterDefs; 
  unsigned __int64 v10; 
  unsigned __int64 numEmitters; 
  ParticleStateDef *stateDefs; 
  unsigned __int64 v13; 
  unsigned __int64 numStates; 
  ParticleModuleGroupDef *moduleGroupDefs; 
  __int64 v16; 
  ParticleModuleDef *moduleDefs; 
  __int64 v18; 
  unsigned __int64 numModules; 
  int v20; 
  __int64 result; 
  ParticleSystemDef *v22; 
  unsigned __int64 v23; 
  ParticleModuleGroupDef *v24; 
  ParticleStateDef *v25; 
  ParticleEmitterDef *v26; 
  unsigned __int64 v27; 
  unsigned __int64 v28; 
  unsigned __int64 v30; 
  ParticleEmitterDef *v31; 
  unsigned __int64 v32; 

  v1 = marParticleSystemDef;
  v2 = 0i64;
  v22 = marParticleSystemDef;
  v3 = count;
  v23 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marParticleEmitterDef;
  v5 = marParticleStateDef;
  v6 = marParticleModuleGroupDef;
  v7 = marParticleModuleDef;
  v8 = marParticleModuleTypeDef;
LABEL_3:
  marParticleSystemDef = v1;
  emitterDefs = v1->emitterDefs;
  v31 = emitterDefs;
  if ( !emitterDefs )
    goto LABEL_22;
  v26 = v4;
  v10 = 0i64;
  marParticleEmitterDef = v1->emitterDefs;
  numEmitters = v1->numEmitters;
  v28 = numEmitters;
  v32 = 0i64;
  if ( !v1->numEmitters )
    goto LABEL_21;
LABEL_5:
  marParticleEmitterDef = emitterDefs;
  stateDefs = emitterDefs->stateDefs;
  if ( !emitterDefs->stateDefs )
    goto LABEL_19;
  v25 = v5;
  v13 = 0i64;
  marParticleStateDef = emitterDefs->stateDefs;
  numStates = emitterDefs->numStates;
  v27 = numStates;
  v30 = 0i64;
  if ( !emitterDefs->numStates )
    goto LABEL_18;
  while ( 1 )
  {
    marParticleStateDef = stateDefs;
    moduleGroupDefs = stateDefs->moduleGroupDefs;
    if ( stateDefs->moduleGroupDefs )
      break;
LABEL_16:
    ++v13;
    ++stateDefs;
    v30 = v13;
    if ( v13 >= numStates )
    {
      emitterDefs = v31;
      v10 = v32;
      numEmitters = v28;
LABEL_18:
      v5 = v25;
      marParticleStateDef = v25;
LABEL_19:
      ++emitterDefs;
      ++v10;
      v31 = emitterDefs;
      v32 = v10;
      if ( v10 < numEmitters )
        goto LABEL_5;
      v1 = v22;
      v2 = v23;
      v3 = count;
LABEL_21:
      v4 = v26;
      marParticleEmitterDef = v26;
LABEL_22:
      ++v1;
      ++v2;
      v22 = v1;
      v23 = v2;
      if ( v2 >= v3 )
        return 1i64;
      goto LABEL_3;
    }
  }
  v24 = v6;
  v16 = 0i64;
  while ( 1 )
  {
    marParticleModuleGroupDef = moduleGroupDefs;
    moduleDefs = moduleGroupDefs->moduleDefs;
    if ( moduleGroupDefs->moduleDefs )
      break;
LABEL_14:
    ++moduleGroupDefs;
    if ( (unsigned __int64)++v16 >= 3 )
    {
      v6 = v24;
      v13 = v30;
      numStates = v27;
      marParticleModuleGroupDef = v24;
      goto LABEL_16;
    }
  }
  marParticleModuleDef = moduleGroupDefs->moduleDefs;
  v18 = 0i64;
  numModules = moduleGroupDefs->numModules;
  if ( !moduleGroupDefs->numModules )
  {
LABEL_13:
    marParticleModuleDef = v7;
    goto LABEL_14;
  }
  while ( 1 )
  {
    marParticleModuleDef = moduleDefs;
    marParticleModuleTypeDef = &moduleDefs->moduleData;
    v20 = Mark_ParticleModuleTypeDef();
    marParticleModuleTypeDef = v8;
    if ( !v20 )
      break;
    ++moduleDefs;
    if ( ++v18 >= numModules )
      goto LABEL_13;
  }
  marParticleModuleGroupDef = v24;
  marParticleStateDef = v25;
  marParticleEmitterDef = v26;
  result = 0i64;
  marParticleModuleDef = v7;
  return result;
}

/*
==============
Mark_ParticleSystemDefFlags
==============
*/
__int64 Mark_ParticleSystemDefFlags()
{
  return 1i64;
}

/*
==============
Mark_ParticleSystemDefFlagsArray
==============
*/
__int64 Mark_ParticleSystemDefFlagsArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleSystemDefPtr
==============
*/
__int64 Mark_ParticleSystemDefPtr()
{
  ParticleSystemDef *v0; 
  ParticleSystemDef *v1; 
  int v3; 

  v0 = (ParticleSystemDef *)*marParticleSystemDefPtr;
  if ( *marParticleSystemDefPtr )
  {
    v1 = marParticleSystemDef;
    marParticleSystemDef = (ParticleSystemDef *)*marParticleSystemDefPtr;
    if ( Mark_ParticleSystemDefAsset(v0, 0) )
    {
      marParticleSystemDef = v1;
      return 1i64;
    }
    if ( !Mark_ParticleSystemDef() )
    {
      marParticleSystemDef = v1;
      return 0i64;
    }
    v3 = Mark_ParticleSystemDefAsset(marParticleSystemDef, 1);
    marParticleSystemDef = v1;
    if ( !v3 )
      return 0i64;
  }
  return 1i64;
}

/*
==============
Mark_ParticleSystemDefPtrArray
==============
*/
__int64 Mark_ParticleSystemDefPtrArray(const unsigned __int64 count)
{
  const ParticleSystemDef **v1; 
  __int64 v2; 
  ParticleSystemDef *v4; 
  ParticleSystemDef *v5; 
  int v6; 

  v1 = marParticleSystemDefPtr;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marParticleSystemDef;
  while ( 1 )
  {
    marParticleSystemDefPtr = v1;
    v5 = (ParticleSystemDef *)*v1;
    if ( !*v1 )
      goto LABEL_8;
    marParticleSystemDef = (ParticleSystemDef *)*v1;
    if ( Mark_ParticleSystemDefAsset(v5, 0) )
    {
      marParticleSystemDef = v4;
      goto LABEL_8;
    }
    if ( !Mark_ParticleSystemDef() )
      break;
    v6 = Mark_ParticleSystemDefAsset(marParticleSystemDef, 1);
    marParticleSystemDef = v4;
    if ( !v6 )
      return 0i64;
LABEL_8:
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  marParticleSystemDef = v4;
  return 0i64;
}

/*
==============
Mark_ParticleSystemDefRef
==============
*/
__int64 Mark_ParticleSystemDefRef()
{
  return 1i64;
}

/*
==============
Mark_ParticleSystemDefRefArray
==============
*/
__int64 Mark_ParticleSystemDefRefArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleUseOrientationOptions
==============
*/
__int64 Mark_ParticleUseOrientationOptions()
{
  return 1i64;
}

/*
==============
Mark_ParticleUseOrientationOptionsArray
==============
*/
__int64 Mark_ParticleUseOrientationOptionsArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleUseScaleOptions
==============
*/
__int64 Mark_ParticleUseScaleOptions()
{
  return 1i64;
}

/*
==============
Mark_ParticleUseScaleOptionsArray
==============
*/
__int64 Mark_ParticleUseScaleOptionsArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ParticleUseVelocityOptions
==============
*/
__int64 Mark_ParticleUseVelocityOptions()
{
  return 1i64;
}

/*
==============
Mark_ParticleUseVelocityOptionsArray
==============
*/
__int64 Mark_ParticleUseVelocityOptionsArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_Particle_MaterialData
==============
*/
__int64 Mark_Particle_MaterialData()
{
  return 1i64;
}

/*
==============
Mark_Particle_MaterialDataArray
==============
*/
__int64 Mark_Particle_MaterialDataArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Postload_FxMarkProjectionAxis
==============
*/
void Postload_FxMarkProjectionAxis(const DBStreamStart streamStart)
{
  if ( streamStart != (varFxMarkProjectionAxis != (FxMarkProjectionAxis *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varFxMarkProjectionAxis, 1ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(1ui64);
}

/*
==============
Postload_FxMarkProjectionAxisArray
==============
*/
void Postload_FxMarkProjectionAxisArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varFxMarkProjectionAxis, count);
}

/*
==============
Postload_FxMarkProjectionAxisStream
==============
*/
void Postload_FxMarkProjectionAxisStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  FxMarkProjectionAxis *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 31729, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varFxMarkProjectionAxis;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (FxMarkProjectionAxis *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 1ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(1ui64);
      pos = g_streamPosGlob.pos + 1;
      g_streamPosGlob.pos = pos;
      v3 = (FxMarkProjectionAxis *)pos;
      varFxMarkProjectionAxis = (FxMarkProjectionAxis *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleCurveControlPointDef
==============
*/
void Postload_ParticleCurveControlPointDef(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleCurveControlPointDef != (ParticleCurveControlPointDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleCurveControlPointDef, 0x10ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x10ui64);
}

/*
==============
Postload_ParticleCurveControlPointDefArray
==============
*/
void Postload_ParticleCurveControlPointDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleCurveControlPointDef, 16 * count);
}

/*
==============
Postload_ParticleCurveControlPointDefStream
==============
*/
void Postload_ParticleCurveControlPointDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleCurveControlPointDef *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 29604, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleCurveControlPointDef;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleCurveControlPointDef *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x10ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x10ui64);
      pos = g_streamPosGlob.pos + 16;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleCurveControlPointDef *)pos;
      varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleCurveDef
==============
*/
void Postload_ParticleCurveDef(const DBStreamStart streamStart)
{
  ParticleCurveDef *v2; 
  ParticleCurveControlPointDef *v3; 
  unsigned __int64 v4; 

  if ( streamStart != (varParticleCurveDef != (ParticleCurveDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleCurveDef, 0x10ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x10ui64);
  v2 = varParticleCurveDef;
  if ( varParticleCurveDef->controlPoints )
  {
    v3 = varParticleCurveControlPointDef;
    DB_PatchMem_FixStreamAlignment(0xFui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->controlPoints = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
    varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
    v4 = 16i64 * varParticleCurveDef->numControlPoints;
    if ( v4 )
    {
      if ( v4 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v4);
    }
    varParticleCurveControlPointDef = v3;
  }
}

/*
==============
Postload_ParticleCurveDefArray
==============
*/
void Postload_ParticleCurveDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleCurveDef *i; 

  v2 = count;
  Postload_Stream(streamStart, varParticleCurveDef, 16 * count);
  for ( i = varParticleCurveDef; v2; --v2 )
  {
    varParticleCurveDef = i;
    Postload_ParticleCurveDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ParticleCurveDefStream
==============
*/
void Postload_ParticleCurveDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleCurveDef *v3; 
  unsigned __int8 *pos; 
  ParticleCurveDef *v5; 
  ParticleCurveControlPointDef *v6; 
  unsigned __int64 v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 29729, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleCurveDef;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleCurveDef *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x10ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x10ui64);
      v5 = varParticleCurveDef;
      pos = g_streamPosGlob.pos + 16;
      g_streamPosGlob.pos += 16;
      if ( varParticleCurveDef->controlPoints )
      {
        v6 = varParticleCurveControlPointDef;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        v5->controlPoints = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
        pos = g_streamPosGlob.pos;
        varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
        v7 = 16i64 * varParticleCurveDef->numControlPoints;
        if ( v7 )
        {
          if ( v7 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
            __debugbreak();
          DB_IncStreamPos(v7);
          pos = g_streamPosGlob.pos;
        }
        varParticleCurveControlPointDef = v6;
      }
      varParticleCurveDef = (ParticleCurveDef *)pos;
      v3 = (ParticleCurveDef *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleDataFlags
==============
*/
void Postload_ParticleDataFlags(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleDataFlags != (ParticleDataFlags *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleDataFlags, 4ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(4ui64);
}

/*
==============
Postload_ParticleDataFlagsArray
==============
*/
void Postload_ParticleDataFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleDataFlags, 4 * count);
}

/*
==============
Postload_ParticleDataFlagsStream
==============
*/
void Postload_ParticleDataFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleDataFlags *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 47796, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleDataFlags;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleDataFlags *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 4ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(4ui64);
      pos = g_streamPosGlob.pos + 4;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleDataFlags *)pos;
      varParticleDataFlags = (ParticleDataFlags *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleElementType
==============
*/
void Postload_ParticleElementType(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleElementType != (unsigned int *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleElementType, 4ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(4ui64);
}

/*
==============
Postload_ParticleElementTypeArray
==============
*/
void Postload_ParticleElementTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleElementType, 4 * count);
}

/*
==============
Postload_ParticleElementTypeStream
==============
*/
void Postload_ParticleElementTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned int *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 45474, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleElementType;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (unsigned int *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 4ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(4ui64);
      pos = g_streamPosGlob.pos + 4;
      g_streamPosGlob.pos = pos;
      v3 = (unsigned int *)pos;
      varParticleElementType = (unsigned int *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleEmissiveCurves
==============
*/
void Postload_ParticleEmissiveCurves(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleEmissiveCurves != (ParticleEmissiveCurves *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleEmissiveCurves, 4ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(4ui64);
}

/*
==============
Postload_ParticleEmissiveCurvesArray
==============
*/
void Postload_ParticleEmissiveCurvesArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleEmissiveCurves, 4 * count);
}

/*
==============
Postload_ParticleEmissiveCurvesStream
==============
*/
void Postload_ParticleEmissiveCurvesStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleEmissiveCurves *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 30367, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleEmissiveCurves;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleEmissiveCurves *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 4ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(4ui64);
      pos = g_streamPosGlob.pos + 4;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleEmissiveCurves *)pos;
      varParticleEmissiveCurves = (ParticleEmissiveCurves *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleEmissiveVersionCurves
==============
*/
void Postload_ParticleEmissiveVersionCurves(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleEmissiveVersionCurves != (ParticleEmissiveVersionCurves *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleEmissiveVersionCurves, 4ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(4ui64);
}

/*
==============
Postload_ParticleEmissiveVersionCurvesArray
==============
*/
void Postload_ParticleEmissiveVersionCurvesArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleEmissiveVersionCurves, 4 * count);
}

/*
==============
Postload_ParticleEmissiveVersionCurvesStream
==============
*/
void Postload_ParticleEmissiveVersionCurvesStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleEmissiveVersionCurves *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 30475, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleEmissiveVersionCurves;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleEmissiveVersionCurves *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 4ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(4ui64);
      pos = g_streamPosGlob.pos + 4;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleEmissiveVersionCurves *)pos;
      varParticleEmissiveVersionCurves = (ParticleEmissiveVersionCurves *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleEmitterDef
==============
*/
void Postload_ParticleEmitterDef(const DBStreamStart streamStart)
{
  ParticleEmitterDef *v2; 
  ParticleStateDef *v3; 
  __int64 numStates; 
  unsigned __int64 v5; 
  ParticleStateDef *i; 
  ParticleCurveDef *v7; 

  if ( streamStart != (varParticleEmitterDef != (ParticleEmitterDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleEmitterDef, 0xA0ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0xA0ui64);
  v2 = varParticleEmitterDef;
  if ( varParticleEmitterDef->stateDefs )
  {
    v3 = varParticleStateDef;
    DB_PatchMem_FixStreamAlignment(0xFui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->stateDefs = (ParticleStateDef *)g_streamPosGlob.pos;
    varParticleStateDef = (ParticleStateDef *)g_streamPosGlob.pos;
    numStates = varParticleEmitterDef->numStates;
    v5 = 32 * numStates;
    if ( 32 * numStates )
    {
      if ( v5 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v5);
    }
    for ( i = varParticleStateDef; numStates; --numStates )
    {
      varParticleStateDef = i;
      Postload_ParticleStateDef(NotAtStart);
      ++i;
    }
    varParticleStateDef = v3;
  }
  v7 = varParticleCurveDef;
  varParticleCurveDef = &varParticleEmitterDef->fadeCurveDef;
  Postload_ParticleCurveDef(NotAtStart);
  varParticleCurveDef = v7;
}

/*
==============
Postload_ParticleEmitterDefArray
==============
*/
void Postload_ParticleEmitterDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleEmitterDef *i; 

  v2 = count;
  Postload_Stream(streamStart, varParticleEmitterDef, 160 * count);
  for ( i = varParticleEmitterDef; v2; --v2 )
  {
    varParticleEmitterDef = i;
    Postload_ParticleEmitterDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ParticleEmitterDefFlags
==============
*/
void Postload_ParticleEmitterDefFlags(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleEmitterDefFlags != (unsigned int *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleEmitterDefFlags, 4ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(4ui64);
}

/*
==============
Postload_ParticleEmitterDefFlagsArray
==============
*/
void Postload_ParticleEmitterDefFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleEmitterDefFlags, 4 * count);
}

/*
==============
Postload_ParticleEmitterDefFlagsStream
==============
*/
void Postload_ParticleEmitterDefFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned int *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 47742, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleEmitterDefFlags;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (unsigned int *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 4ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(4ui64);
      pos = g_streamPosGlob.pos + 4;
      g_streamPosGlob.pos = pos;
      v3 = (unsigned int *)pos;
      varParticleEmitterDefFlags = (unsigned int *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleEmitterDefStream
==============
*/
void Postload_ParticleEmitterDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleEmitterDef *v5; 
  ParticleStateDef *v6; 
  __int64 numStates; 
  unsigned __int64 v8; 
  ParticleStateDef *i; 
  ParticleStateDef *v10; 
  ParticleModuleGroupDef *v11; 
  ParticleModuleGroupDef *v12; 
  __int64 v13; 
  ParticleCurveDef *v14; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 48536, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleEmitterDef;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0xA0ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0xA0ui64);
      v5 = varParticleEmitterDef;
      g_streamPosGlob.pos += 160;
      if ( varParticleEmitterDef->stateDefs )
      {
        v6 = varParticleStateDef;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        v5->stateDefs = (ParticleStateDef *)g_streamPosGlob.pos;
        varParticleStateDef = (ParticleStateDef *)g_streamPosGlob.pos;
        numStates = varParticleEmitterDef->numStates;
        v8 = 32 * numStates;
        if ( 32 * numStates )
        {
          if ( v8 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
            __debugbreak();
          DB_IncStreamPos(v8);
        }
        for ( i = varParticleStateDef; numStates; --numStates )
        {
          v10 = i;
          varParticleStateDef = i;
          if ( i == (ParticleStateDef *)g_streamPosGlob.pos )
          {
            DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x20ui64);
            v10 = varParticleStateDef;
          }
          if ( v10->moduleGroupDefs )
          {
            v11 = varParticleModuleGroupDef;
            DB_PatchMem_FixStreamAlignment(0xFui64);
            DB_CheckCanIncStreamPos(0i64);
            v10->moduleGroupDefs = (ParticleModuleGroupDef *)g_streamPosGlob.pos;
            varParticleModuleGroupDef = (ParticleModuleGroupDef *)g_streamPosGlob.pos;
            DB_IncStreamPos(0x30ui64);
            v12 = varParticleModuleGroupDef;
            v13 = 3i64;
            do
            {
              varParticleModuleGroupDef = v12;
              Postload_ParticleModuleGroupDef(NotAtStart);
              ++v12;
              --v13;
            }
            while ( v13 );
            varParticleModuleGroupDef = v11;
          }
          ++i;
        }
        varParticleStateDef = v6;
      }
      v14 = varParticleCurveDef;
      varParticleCurveDef = &varParticleEmitterDef->fadeCurveDef;
      Postload_ParticleCurveDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleEmitterDef = (ParticleEmitterDef *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varParticleCurveDef = v14;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleFloatRange
==============
*/
void Postload_ParticleFloatRange(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleFloatRange != (ParticleFloatRange *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleFloatRange, 8ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(8ui64);
}

/*
==============
Postload_ParticleFloatRangeArray
==============
*/
void Postload_ParticleFloatRangeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleFloatRange, 8 * count);
}

/*
==============
Postload_ParticleFloatRangeStream
==============
*/
void Postload_ParticleFloatRangeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleFloatRange *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 29383, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleFloatRange;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleFloatRange *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 8ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(8ui64);
      pos = g_streamPosGlob.pos + 8;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleFloatRange *)pos;
      varParticleFloatRange = (ParticleFloatRange *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleGravityOptions
==============
*/
void Postload_ParticleGravityOptions(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleGravityOptions != (ParticleGravityOptions *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleGravityOptions, 4ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(4ui64);
}

/*
==============
Postload_ParticleGravityOptionsArray
==============
*/
void Postload_ParticleGravityOptionsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleGravityOptions, 4 * count);
}

/*
==============
Postload_ParticleGravityOptionsStream
==============
*/
void Postload_ParticleGravityOptionsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleGravityOptions *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 47850, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleGravityOptions;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleGravityOptions *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 4ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(4ui64);
      pos = g_streamPosGlob.pos + 4;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleGravityOptions *)pos;
      varParticleGravityOptions = (ParticleGravityOptions *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleGravityState
==============
*/
void Postload_ParticleGravityState(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleGravityState != (unsigned int *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleGravityState, 4ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(4ui64);
}

/*
==============
Postload_ParticleGravityStateArray
==============
*/
void Postload_ParticleGravityStateArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleGravityState, 4 * count);
}

/*
==============
Postload_ParticleGravityStateStream
==============
*/
void Postload_ParticleGravityStateStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned int *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 44234, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleGravityState;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (unsigned int *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 4ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(4ui64);
      pos = g_streamPosGlob.pos + 4;
      g_streamPosGlob.pos = pos;
      v3 = (unsigned int *)pos;
      varParticleGravityState = (unsigned int *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleGroupID
==============
*/
void Postload_ParticleGroupID(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleGroupID != (ParticleGroupID *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleGroupID, 4ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(4ui64);
}

/*
==============
Postload_ParticleGroupIDArray
==============
*/
void Postload_ParticleGroupIDArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleGroupID, 4 * count);
}

/*
==============
Postload_ParticleGroupIDStream
==============
*/
void Postload_ParticleGroupIDStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleGroupID *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 47926, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleGroupID;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleGroupID *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 4ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(4ui64);
      pos = g_streamPosGlob.pos + 4;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleGroupID *)pos;
      varParticleGroupID = (ParticleGroupID *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleImpactDirection
==============
*/
void Postload_ParticleImpactDirection(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleImpactDirection != (unsigned int *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleImpactDirection, 4ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(4ui64);
}

/*
==============
Postload_ParticleImpactDirectionArray
==============
*/
void Postload_ParticleImpactDirectionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleImpactDirection, 4 * count);
}

/*
==============
Postload_ParticleImpactDirectionStream
==============
*/
void Postload_ParticleImpactDirectionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned int *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 44571, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleImpactDirection;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (unsigned int *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 4ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(4ui64);
      pos = g_streamPosGlob.pos + 4;
      g_streamPosGlob.pos = pos;
      v3 = (unsigned int *)pos;
      varParticleImpactDirection = (unsigned int *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleInstancePoolAction
==============
*/
void Postload_ParticleInstancePoolAction(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleInstancePoolAction != (ParticleInstancePoolAction *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleInstancePoolAction, 4ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(4ui64);
}

/*
==============
Postload_ParticleInstancePoolActionArray
==============
*/
void Postload_ParticleInstancePoolActionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleInstancePoolAction, 4 * count);
}

/*
==============
Postload_ParticleInstancePoolActionStream
==============
*/
void Postload_ParticleInstancePoolActionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleInstancePoolAction *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 34233, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleInstancePoolAction;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleInstancePoolAction *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 4ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(4ui64);
      pos = g_streamPosGlob.pos + 4;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleInstancePoolAction *)pos;
      varParticleInstancePoolAction = (ParticleInstancePoolAction *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleInstancePoolType
==============
*/
void Postload_ParticleInstancePoolType(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleInstancePoolType != (ParticleInstancePoolType *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleInstancePoolType, 4ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(4ui64);
}

/*
==============
Postload_ParticleInstancePoolTypeArray
==============
*/
void Postload_ParticleInstancePoolTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleInstancePoolType, 4 * count);
}

/*
==============
Postload_ParticleInstancePoolTypeStream
==============
*/
void Postload_ParticleInstancePoolTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleInstancePoolType *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 34287, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleInstancePoolType;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleInstancePoolType *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 4ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(4ui64);
      pos = g_streamPosGlob.pos + 4;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleInstancePoolType *)pos;
      varParticleInstancePoolType = (ParticleInstancePoolType *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleIntRange
==============
*/
void Postload_ParticleIntRange(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleIntRange != (ParticleIntRange *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleIntRange, 8ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(8ui64);
}

/*
==============
Postload_ParticleIntRangeArray
==============
*/
void Postload_ParticleIntRangeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleIntRange, 8 * count);
}

/*
==============
Postload_ParticleIntRangeStream
==============
*/
void Postload_ParticleIntRangeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleIntRange *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 29482, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleIntRange;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleIntRange *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 8ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(8ui64);
      pos = g_streamPosGlob.pos + 8;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleIntRange *)pos;
      varParticleIntRange = (ParticleIntRange *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleLinkedAssetDef
==============
*/
void Postload_ParticleLinkedAssetDef(const DBStreamStart streamStart)
{
  ParticleModuleType moduleType; 
  Material **v2; 
  ParticlePhysicsFXData *v3; 
  FxParticleSimAnimation **v4; 
  ParticleMarkVisuals *v5; 
  const char **v6; 
  VectorField **v7; 
  const ParticleSystemDef **v8; 
  GfxLightDef **v9; 
  XModel **v10; 

  moduleType = varParticleModuleDef->moduleType;
  if ( varParticleModuleDef->moduleType == PARTICLE_MODULE_INIT_MATERIAL )
  {
    v2 = varMaterialHandle;
    varMaterialHandle = &varParticleLinkedAssetDef->material;
    Postload_MaterialHandle(streamStart);
    varMaterialHandle = v2;
  }
  else
  {
    switch ( moduleType )
    {
      case PARTICLE_MODULE_INIT_MODEL:
      case PARTICLE_MODULE_INIT_SPAWN_SHAPE_MESH:
        v10 = varXModelPtr;
        varXModelPtr = (XModel **)varParticleLinkedAssetDef;
        Postload_XModelPtr(streamStart);
        varXModelPtr = v10;
        break;
      case PARTICLE_MODULE_PHYSICS_LIGHT:
        v3 = varParticlePhysicsFXData;
        varParticlePhysicsFXData = (ParticlePhysicsFXData *)varParticleLinkedAssetDef;
        Postload_ParticlePhysicsFXData(streamStart);
        varParticlePhysicsFXData = v3;
        break;
      case PARTICLE_MODULE_INIT_PARTICLE_SIM:
        v4 = varFxParticleSimAnimationPtr;
        varFxParticleSimAnimationPtr = (FxParticleSimAnimation **)varParticleLinkedAssetDef;
        Postload_FxParticleSimAnimationPtr(streamStart);
        varFxParticleSimAnimationPtr = v4;
        break;
      case PARTICLE_MODULE_INIT_DECAL:
        v5 = varParticleMarkVisuals;
        varParticleMarkVisuals = (ParticleMarkVisuals *)varParticleLinkedAssetDef;
        Postload_ParticleMarkVisuals(streamStart);
        varParticleMarkVisuals = v5;
        break;
      case PARTICLE_MODULE_INIT_SOUND:
        v6 = varXString;
        varXString = (const char **)varParticleLinkedAssetDef;
        Postload_XString(streamStart);
        varXString = v6;
        break;
      case PARTICLE_MODULE_INIT_VECTOR_FIELD:
        v7 = varVectorFieldPtr;
        varVectorFieldPtr = (VectorField **)varParticleLinkedAssetDef;
        Postload_VectorFieldPtr(streamStart);
        varVectorFieldPtr = v7;
        break;
      default:
        if ( (unsigned __int16)(moduleType - 9) <= 1u )
        {
          v9 = varGfxLightDefPtr;
          varGfxLightDefPtr = (GfxLightDef **)varParticleLinkedAssetDef;
          Postload_GfxLightDefPtr(streamStart);
          varGfxLightDefPtr = v9;
        }
        else if ( moduleType == PARTICLE_MODULE_INIT_BEAM || moduleType == PARTICLE_MODULE_INIT_RUNNER || varParticleModuleTestEventHandlerData )
        {
          v8 = varParticleSystemDefPtr;
          varParticleSystemDefPtr = (const ParticleSystemDef **)varParticleLinkedAssetDef;
          Postload_ParticleSystemDefPtr(streamStart);
          varParticleSystemDefPtr = v8;
        }
        break;
    }
  }
}

/*
==============
Postload_ParticleLinkedAssetDefArray
==============
*/
void Postload_ParticleLinkedAssetDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleLinkedAssetDef *i; 

  v2 = count;
  Postload_Stream(streamStart, varParticleLinkedAssetDef, 32 * count);
  for ( i = varParticleLinkedAssetDef; v2; --v2 )
  {
    varParticleLinkedAssetDef = i;
    Postload_ParticleLinkedAssetDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ParticleLinkedAssetDefStream
==============
*/
void Postload_ParticleLinkedAssetDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleLinkedAssetDef *pos; 
  ParticleModuleType moduleType; 
  Material **v5; 
  ParticlePhysicsFXData *v6; 
  FxParticleSimAnimation **v7; 
  ParticleMarkVisuals *v8; 
  const char **v9; 
  VectorField **v10; 
  const ParticleSystemDef **v11; 
  GfxLightDef **v12; 
  XModel **v13; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 30211, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = varParticleLinkedAssetDef;
    do
    {
      moduleType = varParticleModuleDef->moduleType;
      if ( varParticleModuleDef->moduleType == PARTICLE_MODULE_INIT_MATERIAL )
      {
        v5 = varMaterialHandle;
        varMaterialHandle = &pos->material;
        Postload_MaterialHandle(AtStart);
        varMaterialHandle = v5;
      }
      else
      {
        switch ( moduleType )
        {
          case PARTICLE_MODULE_INIT_MODEL:
          case PARTICLE_MODULE_INIT_SPAWN_SHAPE_MESH:
            v13 = varXModelPtr;
            varXModelPtr = (XModel **)pos;
            Postload_XModelPtr(AtStart);
            varXModelPtr = v13;
            break;
          case PARTICLE_MODULE_PHYSICS_LIGHT:
            v6 = varParticlePhysicsFXData;
            varParticlePhysicsFXData = (ParticlePhysicsFXData *)pos;
            Postload_ParticlePhysicsFXData(AtStart);
            varParticlePhysicsFXData = v6;
            break;
          case PARTICLE_MODULE_INIT_PARTICLE_SIM:
            v7 = varFxParticleSimAnimationPtr;
            varFxParticleSimAnimationPtr = (FxParticleSimAnimation **)pos;
            Postload_FxParticleSimAnimationPtr(AtStart);
            varFxParticleSimAnimationPtr = v7;
            break;
          case PARTICLE_MODULE_INIT_DECAL:
            v8 = varParticleMarkVisuals;
            varParticleMarkVisuals = (ParticleMarkVisuals *)pos;
            Postload_ParticleMarkVisuals(AtStart);
            varParticleMarkVisuals = v8;
            break;
          case PARTICLE_MODULE_INIT_SOUND:
            v9 = varXString;
            varXString = (const char **)pos;
            Postload_XString(AtStart);
            varXString = v9;
            break;
          case PARTICLE_MODULE_INIT_VECTOR_FIELD:
            v10 = varVectorFieldPtr;
            varVectorFieldPtr = (VectorField **)pos;
            Postload_VectorFieldPtr(AtStart);
            varVectorFieldPtr = v10;
            break;
          default:
            if ( (unsigned __int16)(moduleType - 9) <= 1u )
            {
              v12 = varGfxLightDefPtr;
              varGfxLightDefPtr = (GfxLightDef **)pos;
              Postload_GfxLightDefPtr(AtStart);
              varGfxLightDefPtr = v12;
            }
            else if ( moduleType == PARTICLE_MODULE_INIT_BEAM || moduleType == PARTICLE_MODULE_INIT_RUNNER || varParticleModuleTestEventHandlerData )
            {
              v11 = varParticleSystemDefPtr;
              varParticleSystemDefPtr = (const ParticleSystemDef **)pos;
              Postload_ParticleSystemDefPtr(AtStart);
              varParticleSystemDefPtr = v11;
            }
            break;
        }
      }
      pos = (ParticleLinkedAssetDef *)g_streamPosGlob.pos;
      varParticleLinkedAssetDef = (ParticleLinkedAssetDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleLinkedAssetListDef
==============
*/
void Postload_ParticleLinkedAssetListDef(const DBStreamStart streamStart)
{
  ParticleLinkedAssetListDef *v2; 
  ParticleLinkedAssetDef *v3; 
  __int64 numAssets; 
  unsigned __int64 v5; 
  ParticleLinkedAssetDef *i; 

  if ( streamStart != (varParticleLinkedAssetListDef != (ParticleLinkedAssetListDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleLinkedAssetListDef, 0x10ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x10ui64);
  v2 = varParticleLinkedAssetListDef;
  if ( varParticleLinkedAssetListDef->assetList )
  {
    v3 = varParticleLinkedAssetDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->assetList = (ParticleLinkedAssetDef *)g_streamPosGlob.pos;
    varParticleLinkedAssetDef = (ParticleLinkedAssetDef *)g_streamPosGlob.pos;
    numAssets = varParticleLinkedAssetListDef->numAssets;
    v5 = 32 * numAssets;
    if ( 32 * numAssets )
    {
      if ( v5 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v5);
    }
    for ( i = varParticleLinkedAssetDef; numAssets; --numAssets )
    {
      varParticleLinkedAssetDef = i;
      Postload_ParticleLinkedAssetDef(NotAtStart);
      ++i;
    }
    varParticleLinkedAssetDef = v3;
  }
}

/*
==============
Postload_ParticleLinkedAssetListDefArray
==============
*/
void Postload_ParticleLinkedAssetListDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleLinkedAssetListDef *i; 

  v2 = count;
  Postload_Stream(streamStart, varParticleLinkedAssetListDef, 16 * count);
  for ( i = varParticleLinkedAssetListDef; v2; --v2 )
  {
    varParticleLinkedAssetListDef = i;
    Postload_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ParticleLinkedAssetListDefStream
==============
*/
void Postload_ParticleLinkedAssetListDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleLinkedAssetListDef *v4; 
  ParticleLinkedAssetDef *v5; 
  __int64 numAssets; 
  unsigned __int64 v7; 
  ParticleLinkedAssetDef *i; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 30313, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleLinkedAssetListDef;
    do
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x10ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x10ui64);
      v4 = varParticleLinkedAssetListDef;
      g_streamPosGlob.pos += 16;
      if ( varParticleLinkedAssetListDef->assetList )
      {
        v5 = varParticleLinkedAssetDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->assetList = (ParticleLinkedAssetDef *)g_streamPosGlob.pos;
        varParticleLinkedAssetDef = (ParticleLinkedAssetDef *)g_streamPosGlob.pos;
        numAssets = varParticleLinkedAssetListDef->numAssets;
        v7 = 32 * numAssets;
        if ( 32 * numAssets )
        {
          if ( v7 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
            __debugbreak();
          DB_IncStreamPos(v7);
        }
        for ( i = varParticleLinkedAssetDef; numAssets; --numAssets )
        {
          varParticleLinkedAssetDef = i;
          Postload_ParticleLinkedAssetDef(NotAtStart);
          ++i;
        }
        varParticleLinkedAssetDef = v5;
      }
      pos = g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = (ParticleLinkedAssetListDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleMarkVisuals
==============
*/
void Postload_ParticleMarkVisuals(const DBStreamStart streamStart)
{
  Material **v2; 

  if ( streamStart != (varParticleMarkVisuals != (ParticleMarkVisuals *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleMarkVisuals, 0x18ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x18ui64);
  v2 = varMaterialHandle;
  varMaterialHandle = (Material **)varParticleMarkVisuals;
  Postload_MaterialHandleArray(NotAtStart, 3ui64);
  varMaterialHandle = v2;
}

/*
==============
Postload_ParticleMarkVisualsArray
==============
*/
void Postload_ParticleMarkVisualsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleMarkVisuals *i; 
  ParticleMarkVisuals *v4; 
  Material **v5; 

  v2 = count;
  Postload_Stream(streamStart, varParticleMarkVisuals, 24 * count);
  for ( i = varParticleMarkVisuals; v2; --v2 )
  {
    v4 = i;
    varParticleMarkVisuals = i;
    if ( i == (ParticleMarkVisuals *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x18ui64);
      v4 = varParticleMarkVisuals;
    }
    v5 = varMaterialHandle;
    varMaterialHandle = (Material **)v4;
    Postload_MaterialHandleArray(NotAtStart, 3ui64);
    ++i;
    varMaterialHandle = v5;
  }
}

/*
==============
Postload_ParticleMarkVisualsStream
==============
*/
void Postload_ParticleMarkVisualsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  Material **v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 29904, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleMarkVisuals;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x18ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x18ui64);
      v5 = varMaterialHandle;
      g_streamPosGlob.pos += 24;
      varMaterialHandle = (Material **)varParticleMarkVisuals;
      Postload_MaterialHandleArray(NotAtStart, 3ui64);
      pos = g_streamPosGlob.pos;
      varParticleMarkVisuals = (ParticleMarkVisuals *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varMaterialHandle = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleMirrorTextureType
==============
*/
void Postload_ParticleMirrorTextureType(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleMirrorTextureType != (ParticleMirrorTextureType *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleMirrorTextureType, 4ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(4ui64);
}

/*
==============
Postload_ParticleMirrorTextureTypeArray
==============
*/
void Postload_ParticleMirrorTextureTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleMirrorTextureType, 4 * count);
}

/*
==============
Postload_ParticleMirrorTextureTypeStream
==============
*/
void Postload_ParticleMirrorTextureTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleMirrorTextureType *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 34930, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleMirrorTextureType;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleMirrorTextureType *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 4ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(4ui64);
      pos = g_streamPosGlob.pos + 4;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleMirrorTextureType *)pos;
      varParticleMirrorTextureType = (ParticleMirrorTextureType *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModifier
==============
*/
void Postload_ParticleModifier(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleModifier != (ParticleModifier *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModifier, 0x20ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x20ui64);
}

/*
==============
Postload_ParticleModifierArray
==============
*/
void Postload_ParticleModifierArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleModifier, 32 * count);
}

/*
==============
Postload_ParticleModifierStream
==============
*/
void Postload_ParticleModifierStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleModifier *v3; 
  ParticleModifier *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 30574, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleModifier;
    pos = (ParticleModifier *)g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x20ui64);
        pos = (ParticleModifier *)g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x20ui64);
      pos = (ParticleModifier *)(g_streamPosGlob.pos + 32);
      g_streamPosGlob.pos = (unsigned __int8 *)pos;
      v3 = pos;
      varParticleModifier = pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleAttractor
==============
*/
void Postload_ParticleModuleAttractor(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleModuleAttractor != (ParticleModuleAttractor *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleAttractor, 0x30ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x30ui64);
}

/*
==============
Postload_ParticleModuleAttractorArray
==============
*/
void Postload_ParticleModuleAttractorArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleModuleAttractor, 48 * count);
}

/*
==============
Postload_ParticleModuleAttractorStream
==============
*/
void Postload_ParticleModuleAttractorStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleModuleAttractor *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 40095, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleModuleAttractor;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleModuleAttractor *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x30ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x30ui64);
      pos = g_streamPosGlob.pos + 48;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleModuleAttractor *)pos;
      varParticleModuleAttractor = (ParticleModuleAttractor *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleAxesFlags
==============
*/
void Postload_ParticleModuleAxesFlags(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleModuleAxesFlags != (ParticleModuleAxesFlags *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleAxesFlags, 1ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(1ui64);
}

/*
==============
Postload_ParticleModuleAxesFlagsArray
==============
*/
void Postload_ParticleModuleAxesFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleModuleAxesFlags, count);
}

/*
==============
Postload_ParticleModuleAxesFlagsStream
==============
*/
void Postload_ParticleModuleAxesFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleModuleAxesFlags *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 29284, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleModuleAxesFlags;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleModuleAxesFlags *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 1ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(1ui64);
      pos = g_streamPosGlob.pos + 1;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleModuleAxesFlags *)pos;
      varParticleModuleAxesFlags = (ParticleModuleAxesFlags *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleAxis
==============
*/
void Postload_ParticleModuleAxis(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleModuleAxis != (ParticleModuleAxis *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleAxis, 1ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(1ui64);
}

/*
==============
Postload_ParticleModuleAxisArray
==============
*/
void Postload_ParticleModuleAxisArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleModuleAxis, count);
}

/*
==============
Postload_ParticleModuleAxisStream
==============
*/
void Postload_ParticleModuleAxisStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleModuleAxis *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 37324, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleModuleAxis;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleModuleAxis *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 1ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(1ui64);
      pos = g_streamPosGlob.pos + 1;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleModuleAxis *)pos;
      varParticleModuleAxis = (ParticleModuleAxis *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleColorGraph
==============
*/
void Postload_ParticleModuleColorGraph(const DBStreamStart streamStart)
{
  ParticleCurveDef *v2; 
  ParticleCurveDef *m_curves; 
  __int64 v4; 

  if ( streamStart != (varParticleModuleColorGraph != (ParticleModuleColorGraph *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleColorGraph, 0x90ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x90ui64);
  v2 = varParticleCurveDef;
  m_curves = varParticleModuleColorGraph->m_curves;
  varParticleCurveDef = varParticleModuleColorGraph->m_curves;
  if ( varParticleModuleColorGraph->m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
  {
    DB_PatchMem_ValidatePostloadStream(NotAtStart, varParticleModuleColorGraph->m_curves, 0x80ui64);
    m_curves = varParticleCurveDef;
  }
  v4 = 8i64;
  do
  {
    varParticleCurveDef = m_curves;
    Postload_ParticleCurveDef(NotAtStart);
    ++m_curves;
    --v4;
  }
  while ( v4 );
  varParticleCurveDef = v2;
}

/*
==============
Postload_ParticleModuleColorGraphArray
==============
*/
void Postload_ParticleModuleColorGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleColorGraph *i; 
  unsigned __int8 *pos; 
  ParticleModuleColorGraph *v5; 
  ParticleCurveDef *v6; 
  ParticleCurveDef *m_curves; 
  __int64 v8; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModuleColorGraph, 144 * count);
  for ( i = varParticleModuleColorGraph; v2; --v2 )
  {
    pos = g_streamPosGlob.pos;
    v5 = i;
    varParticleModuleColorGraph = i;
    if ( i == (ParticleModuleColorGraph *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x90ui64);
      pos = g_streamPosGlob.pos;
      v5 = varParticleModuleColorGraph;
    }
    v6 = varParticleCurveDef;
    m_curves = v5->m_curves;
    varParticleCurveDef = m_curves;
    if ( m_curves == (ParticleCurveDef *)pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, m_curves, 0x80ui64);
      m_curves = varParticleCurveDef;
    }
    v8 = 8i64;
    do
    {
      varParticleCurveDef = m_curves;
      Postload_ParticleCurveDef(NotAtStart);
      ++m_curves;
      --v8;
    }
    while ( v8 );
    ++i;
    varParticleCurveDef = v6;
  }
}

/*
==============
Postload_ParticleModuleColorGraphStream
==============
*/
void Postload_ParticleModuleColorGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleCurveDef *v5; 
  ParticleCurveDef *m_curves; 
  __int64 v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 40263, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleModuleColorGraph;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x90ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x90ui64);
      v5 = varParticleCurveDef;
      m_curves = varParticleModuleColorGraph->m_curves;
      g_streamPosGlob.pos += 144;
      varParticleCurveDef = varParticleModuleColorGraph->m_curves;
      if ( varParticleModuleColorGraph->m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, varParticleModuleColorGraph->m_curves, 0x80ui64);
        m_curves = varParticleCurveDef;
      }
      v7 = 8i64;
      do
      {
        varParticleCurveDef = m_curves;
        Postload_ParticleCurveDef(NotAtStart);
        ++m_curves;
        --v7;
      }
      while ( v7 );
      pos = g_streamPosGlob.pos;
      varParticleModuleColorGraph = (ParticleModuleColorGraph *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varParticleCurveDef = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleColorLerp
==============
*/
void Postload_ParticleModuleColorLerp(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleModuleColorLerp != (ParticleModuleColorLerp *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleColorLerp, 0x30ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x30ui64);
}

/*
==============
Postload_ParticleModuleColorLerpArray
==============
*/
void Postload_ParticleModuleColorLerpArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleModuleColorLerp, 48 * count);
}

/*
==============
Postload_ParticleModuleColorLerpStream
==============
*/
void Postload_ParticleModuleColorLerpStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleModuleColorLerp *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 40408, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleModuleColorLerp;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleModuleColorLerp *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x30ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x30ui64);
      pos = g_streamPosGlob.pos + 48;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleModuleColorLerp *)pos;
      varParticleModuleColorLerp = (ParticleModuleColorLerp *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleDef
==============
*/
void Postload_ParticleModuleDef(const DBStreamStart streamStart)
{
  ParticleModuleTypeDef *v2; 

  if ( streamStart != (varParticleModuleDef != (ParticleModuleDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleDef, 0xF0ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0xF0ui64);
  v2 = varParticleModuleTypeDef;
  varParticleModuleTypeDef = &varParticleModuleDef->moduleData;
  Postload_ParticleModuleTypeDef(NotAtStart);
  varParticleModuleTypeDef = v2;
}

/*
==============
Postload_ParticleModuleDefArray
==============
*/
void Postload_ParticleModuleDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleDef *i; 
  ParticleModuleDef *v4; 
  ParticleModuleTypeDef *v5; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModuleDef, 240 * count);
  for ( i = varParticleModuleDef; v2; --v2 )
  {
    v4 = i;
    varParticleModuleDef = i;
    if ( i == (ParticleModuleDef *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0xF0ui64);
      v4 = varParticleModuleDef;
    }
    v5 = varParticleModuleTypeDef;
    varParticleModuleTypeDef = &v4->moduleData;
    Postload_ParticleModuleTypeDef(NotAtStart);
    ++i;
    varParticleModuleTypeDef = v5;
  }
}

/*
==============
Postload_ParticleModuleDefStream
==============
*/
void Postload_ParticleModuleDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleModuleTypeDef *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 47362, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleModuleDef;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0xF0ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0xF0ui64);
      v5 = varParticleModuleTypeDef;
      g_streamPosGlob.pos += 240;
      varParticleModuleTypeDef = &varParticleModuleDef->moduleData;
      Postload_ParticleModuleTypeDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleDef = (ParticleModuleDef *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varParticleModuleTypeDef = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleEmissionGraph
==============
*/
void Postload_ParticleModuleEmissionGraph(const DBStreamStart streamStart)
{
  ParticleCurveDef *v2; 
  ParticleCurveDef *m_curves; 
  __int64 v4; 

  if ( streamStart != (varParticleModuleEmissionGraph != (ParticleModuleEmissionGraph *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleEmissionGraph, 0x30ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x30ui64);
  v2 = varParticleCurveDef;
  m_curves = varParticleModuleEmissionGraph->m_curves;
  varParticleCurveDef = varParticleModuleEmissionGraph->m_curves;
  if ( varParticleModuleEmissionGraph->m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
  {
    DB_PatchMem_ValidatePostloadStream(NotAtStart, varParticleModuleEmissionGraph->m_curves, 0x20ui64);
    m_curves = varParticleCurveDef;
  }
  v4 = 2i64;
  do
  {
    varParticleCurveDef = m_curves;
    Postload_ParticleCurveDef(NotAtStart);
    ++m_curves;
    --v4;
  }
  while ( v4 );
  varParticleCurveDef = v2;
}

/*
==============
Postload_ParticleModuleEmissionGraphArray
==============
*/
void Postload_ParticleModuleEmissionGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleEmissionGraph *i; 
  unsigned __int8 *pos; 
  ParticleModuleEmissionGraph *v5; 
  ParticleCurveDef *v6; 
  ParticleCurveDef *m_curves; 
  __int64 v8; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModuleEmissionGraph, 48 * count);
  for ( i = varParticleModuleEmissionGraph; v2; --v2 )
  {
    pos = g_streamPosGlob.pos;
    v5 = i;
    varParticleModuleEmissionGraph = i;
    if ( i == (ParticleModuleEmissionGraph *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x30ui64);
      pos = g_streamPosGlob.pos;
      v5 = varParticleModuleEmissionGraph;
    }
    v6 = varParticleCurveDef;
    m_curves = v5->m_curves;
    varParticleCurveDef = m_curves;
    if ( m_curves == (ParticleCurveDef *)pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, m_curves, 0x20ui64);
      m_curves = varParticleCurveDef;
    }
    v8 = 2i64;
    do
    {
      varParticleCurveDef = m_curves;
      Postload_ParticleCurveDef(NotAtStart);
      ++m_curves;
      --v8;
    }
    while ( v8 );
    ++i;
    varParticleCurveDef = v6;
  }
}

/*
==============
Postload_ParticleModuleEmissionGraphStream
==============
*/
void Postload_ParticleModuleEmissionGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleCurveDef *v5; 
  ParticleCurveDef *m_curves; 
  __int64 v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 40530, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleModuleEmissionGraph;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x30ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x30ui64);
      v5 = varParticleCurveDef;
      m_curves = varParticleModuleEmissionGraph->m_curves;
      g_streamPosGlob.pos += 48;
      varParticleCurveDef = varParticleModuleEmissionGraph->m_curves;
      if ( varParticleModuleEmissionGraph->m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, varParticleModuleEmissionGraph->m_curves, 0x20ui64);
        m_curves = varParticleCurveDef;
      }
      v7 = 2i64;
      do
      {
        varParticleCurveDef = m_curves;
        Postload_ParticleCurveDef(NotAtStart);
        ++m_curves;
        --v7;
      }
      while ( v7 );
      pos = g_streamPosGlob.pos;
      varParticleModuleEmissionGraph = (ParticleModuleEmissionGraph *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varParticleCurveDef = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleEmissiveGraph
==============
*/
void Postload_ParticleModuleEmissiveGraph(const DBStreamStart streamStart)
{
  ParticleCurveDef *v2; 
  ParticleCurveDef *m_curves; 
  __int64 v4; 

  if ( streamStart != (varParticleModuleEmissiveGraph != (ParticleModuleEmissiveGraph *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleEmissiveGraph, 0xB0ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0xB0ui64);
  v2 = varParticleCurveDef;
  m_curves = varParticleModuleEmissiveGraph->m_curves;
  varParticleCurveDef = varParticleModuleEmissiveGraph->m_curves;
  if ( varParticleModuleEmissiveGraph->m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
  {
    DB_PatchMem_ValidatePostloadStream(NotAtStart, varParticleModuleEmissiveGraph->m_curves, 0xA0ui64);
    m_curves = varParticleCurveDef;
  }
  v4 = 10i64;
  do
  {
    varParticleCurveDef = m_curves;
    Postload_ParticleCurveDef(NotAtStart);
    ++m_curves;
    --v4;
  }
  while ( v4 );
  varParticleCurveDef = v2;
}

/*
==============
Postload_ParticleModuleEmissiveGraphArray
==============
*/
void Postload_ParticleModuleEmissiveGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleEmissiveGraph *i; 
  unsigned __int8 *pos; 
  ParticleModuleEmissiveGraph *v5; 
  ParticleCurveDef *v6; 
  ParticleCurveDef *m_curves; 
  __int64 v8; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModuleEmissiveGraph, 176 * count);
  for ( i = varParticleModuleEmissiveGraph; v2; --v2 )
  {
    pos = g_streamPosGlob.pos;
    v5 = i;
    varParticleModuleEmissiveGraph = i;
    if ( i == (ParticleModuleEmissiveGraph *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0xB0ui64);
      pos = g_streamPosGlob.pos;
      v5 = varParticleModuleEmissiveGraph;
    }
    v6 = varParticleCurveDef;
    m_curves = v5->m_curves;
    varParticleCurveDef = m_curves;
    if ( m_curves == (ParticleCurveDef *)pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, m_curves, 0xA0ui64);
      m_curves = varParticleCurveDef;
    }
    v8 = 10i64;
    do
    {
      varParticleCurveDef = m_curves;
      Postload_ParticleCurveDef(NotAtStart);
      ++m_curves;
      --v8;
    }
    while ( v8 );
    ++i;
    varParticleCurveDef = v6;
  }
}

/*
==============
Postload_ParticleModuleEmissiveGraphStream
==============
*/
void Postload_ParticleModuleEmissiveGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleCurveDef *v5; 
  ParticleCurveDef *m_curves; 
  __int64 v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 40675, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleModuleEmissiveGraph;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0xB0ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0xB0ui64);
      v5 = varParticleCurveDef;
      m_curves = varParticleModuleEmissiveGraph->m_curves;
      g_streamPosGlob.pos += 176;
      varParticleCurveDef = varParticleModuleEmissiveGraph->m_curves;
      if ( varParticleModuleEmissiveGraph->m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, varParticleModuleEmissiveGraph->m_curves, 0xA0ui64);
        m_curves = varParticleCurveDef;
      }
      v7 = 10i64;
      do
      {
        varParticleCurveDef = m_curves;
        Postload_ParticleCurveDef(NotAtStart);
        ++m_curves;
        --v7;
      }
      while ( v7 );
      pos = g_streamPosGlob.pos;
      varParticleModuleEmissiveGraph = (ParticleModuleEmissiveGraph *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varParticleCurveDef = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleFlags
==============
*/
void Postload_ParticleModuleFlags(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleModuleFlags != (unsigned int *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleFlags, 4ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(4ui64);
}

/*
==============
Postload_ParticleModuleFlagsArray
==============
*/
void Postload_ParticleModuleFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleModuleFlags, 4 * count);
}

/*
==============
Postload_ParticleModuleFlagsStream
==============
*/
void Postload_ParticleModuleFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned int *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 29230, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleModuleFlags;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (unsigned int *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 4ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(4ui64);
      pos = g_streamPosGlob.pos + 4;
      g_streamPosGlob.pos = pos;
      v3 = (unsigned int *)pos;
      varParticleModuleFlags = (unsigned int *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleForce
==============
*/
void Postload_ParticleModuleForce(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleModuleForce != (ParticleModuleForce *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleForce, 0x30ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x30ui64);
}

/*
==============
Postload_ParticleModuleForceArray
==============
*/
void Postload_ParticleModuleForceArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleModuleForce, 48 * count);
}

/*
==============
Postload_ParticleModuleForceDragGraph
==============
*/
void Postload_ParticleModuleForceDragGraph(const DBStreamStart streamStart)
{
  ParticleCurveDef *v2; 
  ParticleCurveDef *m_curves; 
  __int64 v4; 

  if ( streamStart != (varParticleModuleForceDragGraph != (ParticleModuleForceDragGraph *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleForceDragGraph, 0x30ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x30ui64);
  v2 = varParticleCurveDef;
  m_curves = varParticleModuleForceDragGraph->m_curves;
  varParticleCurveDef = varParticleModuleForceDragGraph->m_curves;
  if ( varParticleModuleForceDragGraph->m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
  {
    DB_PatchMem_ValidatePostloadStream(NotAtStart, varParticleModuleForceDragGraph->m_curves, 0x20ui64);
    m_curves = varParticleCurveDef;
  }
  v4 = 2i64;
  do
  {
    varParticleCurveDef = m_curves;
    Postload_ParticleCurveDef(NotAtStart);
    ++m_curves;
    --v4;
  }
  while ( v4 );
  varParticleCurveDef = v2;
}

/*
==============
Postload_ParticleModuleForceDragGraphArray
==============
*/
void Postload_ParticleModuleForceDragGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleForceDragGraph *i; 
  unsigned __int8 *pos; 
  ParticleModuleForceDragGraph *v5; 
  ParticleCurveDef *v6; 
  ParticleCurveDef *m_curves; 
  __int64 v8; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModuleForceDragGraph, 48 * count);
  for ( i = varParticleModuleForceDragGraph; v2; --v2 )
  {
    pos = g_streamPosGlob.pos;
    v5 = i;
    varParticleModuleForceDragGraph = i;
    if ( i == (ParticleModuleForceDragGraph *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x30ui64);
      pos = g_streamPosGlob.pos;
      v5 = varParticleModuleForceDragGraph;
    }
    v6 = varParticleCurveDef;
    m_curves = v5->m_curves;
    varParticleCurveDef = m_curves;
    if ( m_curves == (ParticleCurveDef *)pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, m_curves, 0x20ui64);
      m_curves = varParticleCurveDef;
    }
    v8 = 2i64;
    do
    {
      varParticleCurveDef = m_curves;
      Postload_ParticleCurveDef(NotAtStart);
      ++m_curves;
      --v8;
    }
    while ( v8 );
    ++i;
    varParticleCurveDef = v6;
  }
}

/*
==============
Postload_ParticleModuleForceDragGraphStream
==============
*/
void Postload_ParticleModuleForceDragGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleCurveDef *v5; 
  ParticleCurveDef *m_curves; 
  __int64 v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 41087, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleModuleForceDragGraph;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x30ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x30ui64);
      v5 = varParticleCurveDef;
      m_curves = varParticleModuleForceDragGraph->m_curves;
      g_streamPosGlob.pos += 48;
      varParticleCurveDef = varParticleModuleForceDragGraph->m_curves;
      if ( varParticleModuleForceDragGraph->m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, varParticleModuleForceDragGraph->m_curves, 0x20ui64);
        m_curves = varParticleCurveDef;
      }
      v7 = 2i64;
      do
      {
        varParticleCurveDef = m_curves;
        Postload_ParticleCurveDef(NotAtStart);
        ++m_curves;
        --v7;
      }
      while ( v7 );
      pos = g_streamPosGlob.pos;
      varParticleModuleForceDragGraph = (ParticleModuleForceDragGraph *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varParticleCurveDef = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleForceStream
==============
*/
void Postload_ParticleModuleForceStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleModuleForce *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 40965, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleModuleForce;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleModuleForce *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x30ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x30ui64);
      pos = g_streamPosGlob.pos + 48;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleModuleForce *)pos;
      varParticleModuleForce = (ParticleModuleForce *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleGravity
==============
*/
void Postload_ParticleModuleGravity(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleModuleGravity != (ParticleModuleGravity *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleGravity, 0x10ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x10ui64);
}

/*
==============
Postload_ParticleModuleGravityArray
==============
*/
void Postload_ParticleModuleGravityArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleModuleGravity, 16 * count);
}

/*
==============
Postload_ParticleModuleGravityStream
==============
*/
void Postload_ParticleModuleGravityStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleModuleGravity *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 41209, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleModuleGravity;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleModuleGravity *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x10ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x10ui64);
      pos = g_streamPosGlob.pos + 16;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleModuleGravity *)pos;
      varParticleModuleGravity = (ParticleModuleGravity *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleGroupDef
==============
*/
void Postload_ParticleModuleGroupDef(const DBStreamStart streamStart)
{
  ParticleModuleGroupDef *v2; 
  ParticleModuleDef *v3; 
  __int64 numModules; 
  ParticleModuleDef *i; 
  ParticleModuleDef *v6; 
  ParticleModuleTypeDef *v7; 

  if ( streamStart != (varParticleModuleGroupDef != (ParticleModuleGroupDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleGroupDef, 0x10ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x10ui64);
  v2 = varParticleModuleGroupDef;
  if ( varParticleModuleGroupDef->moduleDefs )
  {
    v3 = varParticleModuleDef;
    DB_PatchMem_FixStreamAlignment(0xFui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->moduleDefs = (ParticleModuleDef *)g_streamPosGlob.pos;
    varParticleModuleDef = (ParticleModuleDef *)g_streamPosGlob.pos;
    numModules = varParticleModuleGroupDef->numModules;
    if ( 240 * numModules )
    {
      if ( (unsigned __int64)(240 * numModules) > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(240 * numModules);
    }
    for ( i = varParticleModuleDef; numModules; --numModules )
    {
      v6 = i;
      varParticleModuleDef = i;
      if ( i == (ParticleModuleDef *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0xF0ui64);
        v6 = varParticleModuleDef;
      }
      v7 = varParticleModuleTypeDef;
      varParticleModuleTypeDef = &v6->moduleData;
      Postload_ParticleModuleTypeDef(NotAtStart);
      ++i;
      varParticleModuleTypeDef = v7;
    }
    varParticleModuleDef = v3;
  }
}

/*
==============
Postload_ParticleModuleGroupDefArray
==============
*/
void Postload_ParticleModuleGroupDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleGroupDef *i; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModuleGroupDef, 16 * count);
  for ( i = varParticleModuleGroupDef; v2; --v2 )
  {
    varParticleModuleGroupDef = i;
    Postload_ParticleModuleGroupDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ParticleModuleGroupDefStream
==============
*/
void Postload_ParticleModuleGroupDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleModuleGroupDef *v4; 
  ParticleModuleDef *v5; 
  __int64 numModules; 
  ParticleModuleDef *i; 
  ParticleModuleDef *v8; 
  ParticleModuleTypeDef *v9; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 47487, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleGroupDef;
    do
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x10ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x10ui64);
      v4 = varParticleModuleGroupDef;
      g_streamPosGlob.pos += 16;
      if ( varParticleModuleGroupDef->moduleDefs )
      {
        v5 = varParticleModuleDef;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->moduleDefs = (ParticleModuleDef *)g_streamPosGlob.pos;
        varParticleModuleDef = (ParticleModuleDef *)g_streamPosGlob.pos;
        numModules = varParticleModuleGroupDef->numModules;
        if ( 240 * numModules )
        {
          if ( (unsigned __int64)(240 * numModules) > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
            __debugbreak();
          DB_IncStreamPos(240 * numModules);
        }
        for ( i = varParticleModuleDef; numModules; --numModules )
        {
          v8 = i;
          varParticleModuleDef = i;
          if ( i == (ParticleModuleDef *)g_streamPosGlob.pos )
          {
            DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0xF0ui64);
            v8 = varParticleModuleDef;
          }
          v9 = varParticleModuleTypeDef;
          varParticleModuleTypeDef = &v8->moduleData;
          Postload_ParticleModuleTypeDef(NotAtStart);
          ++i;
          varParticleModuleTypeDef = v9;
        }
        varParticleModuleDef = v5;
      }
      pos = g_streamPosGlob.pos;
      varParticleModuleGroupDef = (ParticleModuleGroupDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleInitAtlas
==============
*/
void Postload_ParticleModuleInitAtlas(const DBStreamStart streamStart)
{
  ParticleCurveDef *v2; 
  ParticleCurveDef *m_curves; 
  __int64 v4; 

  if ( streamStart != (varParticleModuleInitAtlas != (ParticleModuleInitAtlas *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleInitAtlas, 0x40ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x40ui64);
  v2 = varParticleCurveDef;
  m_curves = varParticleModuleInitAtlas->m_curves;
  varParticleCurveDef = varParticleModuleInitAtlas->m_curves;
  if ( varParticleModuleInitAtlas->m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
  {
    DB_PatchMem_ValidatePostloadStream(NotAtStart, varParticleModuleInitAtlas->m_curves, 0x20ui64);
    m_curves = varParticleCurveDef;
  }
  v4 = 2i64;
  do
  {
    varParticleCurveDef = m_curves;
    Postload_ParticleCurveDef(NotAtStart);
    ++m_curves;
    --v4;
  }
  while ( v4 );
  varParticleCurveDef = v2;
}

/*
==============
Postload_ParticleModuleInitAtlasArray
==============
*/
void Postload_ParticleModuleInitAtlasArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitAtlas *i; 
  unsigned __int8 *pos; 
  ParticleModuleInitAtlas *v5; 
  ParticleCurveDef *v6; 
  ParticleCurveDef *m_curves; 
  __int64 v8; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModuleInitAtlas, count << 6);
  for ( i = varParticleModuleInitAtlas; v2; --v2 )
  {
    pos = g_streamPosGlob.pos;
    v5 = i;
    varParticleModuleInitAtlas = i;
    if ( i == (ParticleModuleInitAtlas *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x40ui64);
      pos = g_streamPosGlob.pos;
      v5 = varParticleModuleInitAtlas;
    }
    v6 = varParticleCurveDef;
    m_curves = v5->m_curves;
    varParticleCurveDef = m_curves;
    if ( m_curves == (ParticleCurveDef *)pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, m_curves, 0x20ui64);
      m_curves = varParticleCurveDef;
    }
    v8 = 2i64;
    do
    {
      varParticleCurveDef = m_curves;
      Postload_ParticleCurveDef(NotAtStart);
      ++m_curves;
      --v8;
    }
    while ( v8 );
    ++i;
    varParticleCurveDef = v6;
  }
}

/*
==============
Postload_ParticleModuleInitAtlasStream
==============
*/
void Postload_ParticleModuleInitAtlasStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleCurveDef *v5; 
  ParticleCurveDef *m_curves; 
  __int64 v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 30788, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleModuleInitAtlas;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x40ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x40ui64);
      v5 = varParticleCurveDef;
      m_curves = varParticleModuleInitAtlas->m_curves;
      g_streamPosGlob.pos += 64;
      varParticleCurveDef = varParticleModuleInitAtlas->m_curves;
      if ( varParticleModuleInitAtlas->m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, varParticleModuleInitAtlas->m_curves, 0x20ui64);
        m_curves = varParticleCurveDef;
      }
      v7 = 2i64;
      do
      {
        varParticleCurveDef = m_curves;
        Postload_ParticleCurveDef(NotAtStart);
        ++m_curves;
        --v7;
      }
      while ( v7 );
      pos = g_streamPosGlob.pos;
      varParticleModuleInitAtlas = (ParticleModuleInitAtlas *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varParticleCurveDef = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleInitAttributes
==============
*/
void Postload_ParticleModuleInitAttributes(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleModuleInitAttributes != (ParticleModuleInitAttributes *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleInitAttributes, 0x70ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x70ui64);
}

/*
==============
Postload_ParticleModuleInitAttributesArray
==============
*/
void Postload_ParticleModuleInitAttributesArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleModuleInitAttributes, 112 * count);
}

/*
==============
Postload_ParticleModuleInitAttributesStream
==============
*/
void Postload_ParticleModuleInitAttributesStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleModuleInitAttributes *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 31071, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleModuleInitAttributes;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleModuleInitAttributes *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x70ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x70ui64);
      pos = g_streamPosGlob.pos + 112;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleModuleInitAttributes *)pos;
      varParticleModuleInitAttributes = (ParticleModuleInitAttributes *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleInitBeam
==============
*/
void Postload_ParticleModuleInitBeam(const DBStreamStart streamStart)
{
  ParticleLinkedAssetListDef *v2; 

  if ( streamStart != (varParticleModuleInitBeam != (ParticleModuleInitBeam *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleInitBeam, 0x80ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x80ui64);
  v2 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleInitBeam->m_linkedAssetList;
  Postload_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v2;
}

/*
==============
Postload_ParticleModuleInitBeamArray
==============
*/
void Postload_ParticleModuleInitBeamArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitBeam *i; 
  ParticleModuleInitBeam *v4; 
  ParticleLinkedAssetListDef *v5; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModuleInitBeam, count << 7);
  for ( i = varParticleModuleInitBeam; v2; --v2 )
  {
    v4 = i;
    varParticleModuleInitBeam = i;
    if ( i == (ParticleModuleInitBeam *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x80ui64);
      v4 = varParticleModuleInitBeam;
    }
    v5 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &v4->m_linkedAssetList;
    Postload_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v5;
  }
}

/*
==============
Postload_ParticleModuleInitBeamFlags
==============
*/
void Postload_ParticleModuleInitBeamFlags(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleModuleInitBeamFlags != (ParticleModuleInitBeamFlags *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleInitBeamFlags, 4ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(4ui64);
}

/*
==============
Postload_ParticleModuleInitBeamFlagsArray
==============
*/
void Postload_ParticleModuleInitBeamFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleModuleInitBeamFlags, 4 * count);
}

/*
==============
Postload_ParticleModuleInitBeamFlagsStream
==============
*/
void Postload_ParticleModuleInitBeamFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleModuleInitBeamFlags *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 31125, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleModuleInitBeamFlags;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleModuleInitBeamFlags *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 4ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(4ui64);
      pos = g_streamPosGlob.pos + 4;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleModuleInitBeamFlags *)pos;
      varParticleModuleInitBeamFlags = (ParticleModuleInitBeamFlags *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleInitBeamStream
==============
*/
void Postload_ParticleModuleInitBeamStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleLinkedAssetListDef *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 31477, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleModuleInitBeam;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x80ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x80ui64);
      v5 = varParticleLinkedAssetListDef;
      g_streamPosGlob.pos += 128;
      varParticleLinkedAssetListDef = &varParticleModuleInitBeam->m_linkedAssetList;
      Postload_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitBeam = (ParticleModuleInitBeam *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleInitCameraOffset
==============
*/
void Postload_ParticleModuleInitCameraOffset(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleModuleInitCameraOffset != (ParticleModuleInitCameraOffset *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleInitCameraOffset, 0x10ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x10ui64);
}

/*
==============
Postload_ParticleModuleInitCameraOffsetArray
==============
*/
void Postload_ParticleModuleInitCameraOffsetArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleModuleInitCameraOffset, 16 * count);
}

/*
==============
Postload_ParticleModuleInitCameraOffsetStream
==============
*/
void Postload_ParticleModuleInitCameraOffsetStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleModuleInitCameraOffset *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 31576, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleModuleInitCameraOffset;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleModuleInitCameraOffset *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x10ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x10ui64);
      pos = g_streamPosGlob.pos + 16;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleModuleInitCameraOffset *)pos;
      varParticleModuleInitCameraOffset = (ParticleModuleInitCameraOffset *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleInitCloud
==============
*/
void Postload_ParticleModuleInitCloud(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleModuleInitCloud != (ParticleModuleInitCloud *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleInitCloud, 0x10ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x10ui64);
}

/*
==============
Postload_ParticleModuleInitCloudArray
==============
*/
void Postload_ParticleModuleInitCloudArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleModuleInitCloud, 16 * count);
}

/*
==============
Postload_ParticleModuleInitCloudStream
==============
*/
void Postload_ParticleModuleInitCloudStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleModuleInitCloud *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 31675, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleModuleInitCloud;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleModuleInitCloud *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x10ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x10ui64);
      pos = g_streamPosGlob.pos + 16;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleModuleInitCloud *)pos;
      varParticleModuleInitCloud = (ParticleModuleInitCloud *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleInitDecal
==============
*/
void Postload_ParticleModuleInitDecal(const DBStreamStart streamStart)
{
  ParticleLinkedAssetListDef *v2; 

  if ( streamStart != (varParticleModuleInitDecal != (ParticleModuleInitDecal *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleInitDecal, 0x40ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x40ui64);
  v2 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleInitDecal->m_linkedAssetList;
  Postload_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v2;
}

/*
==============
Postload_ParticleModuleInitDecalArray
==============
*/
void Postload_ParticleModuleInitDecalArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitDecal *i; 
  ParticleModuleInitDecal *v4; 
  ParticleLinkedAssetListDef *v5; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModuleInitDecal, count << 6);
  for ( i = varParticleModuleInitDecal; v2; --v2 )
  {
    v4 = i;
    varParticleModuleInitDecal = i;
    if ( i == (ParticleModuleInitDecal *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x40ui64);
      v4 = varParticleModuleInitDecal;
    }
    v5 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &v4->m_linkedAssetList;
    Postload_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v5;
  }
}

/*
==============
Postload_ParticleModuleInitDecalStream
==============
*/
void Postload_ParticleModuleInitDecalStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleLinkedAssetListDef *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 32058, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleModuleInitDecal;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x40ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x40ui64);
      v5 = varParticleLinkedAssetListDef;
      g_streamPosGlob.pos += 64;
      varParticleLinkedAssetListDef = &varParticleModuleInitDecal->m_linkedAssetList;
      Postload_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitDecal = (ParticleModuleInitDecal *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleInitDismember
==============
*/
void Postload_ParticleModuleInitDismember(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleModuleInitDismember != (ParticleModuleInitDismember *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleInitDismember, 0x10ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x10ui64);
}

/*
==============
Postload_ParticleModuleInitDismemberArray
==============
*/
void Postload_ParticleModuleInitDismemberArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleModuleInitDismember, 16 * count);
}

/*
==============
Postload_ParticleModuleInitDismemberStream
==============
*/
void Postload_ParticleModuleInitDismemberStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleModuleInitDismember *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 39904, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleModuleInitDismember;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleModuleInitDismember *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x10ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x10ui64);
      pos = g_streamPosGlob.pos + 16;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleModuleInitDismember *)pos;
      varParticleModuleInitDismember = (ParticleModuleInitDismember *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleInitFlare
==============
*/
void Postload_ParticleModuleInitFlare(const DBStreamStart streamStart)
{
  ParticleCurveDef *v2; 
  ParticleCurveDef *m_curves; 
  __int64 v4; 

  if ( streamStart != (varParticleModuleInitFlare != (ParticleModuleInitFlare *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleInitFlare, 0x90ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x90ui64);
  v2 = varParticleCurveDef;
  m_curves = varParticleModuleInitFlare->m_curves;
  varParticleCurveDef = varParticleModuleInitFlare->m_curves;
  if ( varParticleModuleInitFlare->m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
  {
    DB_PatchMem_ValidatePostloadStream(NotAtStart, varParticleModuleInitFlare->m_curves, 0x40ui64);
    m_curves = varParticleCurveDef;
  }
  v4 = 4i64;
  do
  {
    varParticleCurveDef = m_curves;
    Postload_ParticleCurveDef(NotAtStart);
    ++m_curves;
    --v4;
  }
  while ( v4 );
  varParticleCurveDef = v2;
}

/*
==============
Postload_ParticleModuleInitFlareArray
==============
*/
void Postload_ParticleModuleInitFlareArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitFlare *i; 
  unsigned __int8 *pos; 
  ParticleModuleInitFlare *v5; 
  ParticleCurveDef *v6; 
  ParticleCurveDef *m_curves; 
  __int64 v8; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModuleInitFlare, 144 * count);
  for ( i = varParticleModuleInitFlare; v2; --v2 )
  {
    pos = g_streamPosGlob.pos;
    v5 = i;
    varParticleModuleInitFlare = i;
    if ( i == (ParticleModuleInitFlare *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x90ui64);
      pos = g_streamPosGlob.pos;
      v5 = varParticleModuleInitFlare;
    }
    v6 = varParticleCurveDef;
    m_curves = v5->m_curves;
    varParticleCurveDef = m_curves;
    if ( m_curves == (ParticleCurveDef *)pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, m_curves, 0x40ui64);
      m_curves = varParticleCurveDef;
    }
    v8 = 4i64;
    do
    {
      varParticleCurveDef = m_curves;
      Postload_ParticleCurveDef(NotAtStart);
      ++m_curves;
      --v8;
    }
    while ( v8 );
    ++i;
    varParticleCurveDef = v6;
  }
}

/*
==============
Postload_ParticleModuleInitFlareStream
==============
*/
void Postload_ParticleModuleInitFlareStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleCurveDef *v5; 
  ParticleCurveDef *m_curves; 
  __int64 v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 32387, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleModuleInitFlare;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x90ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x90ui64);
      v5 = varParticleCurveDef;
      m_curves = varParticleModuleInitFlare->m_curves;
      g_streamPosGlob.pos += 144;
      varParticleCurveDef = varParticleModuleInitFlare->m_curves;
      if ( varParticleModuleInitFlare->m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, varParticleModuleInitFlare->m_curves, 0x40ui64);
        m_curves = varParticleCurveDef;
      }
      v7 = 4i64;
      do
      {
        varParticleCurveDef = m_curves;
        Postload_ParticleCurveDef(NotAtStart);
        ++m_curves;
        --v7;
      }
      while ( v7 );
      pos = g_streamPosGlob.pos;
      varParticleModuleInitFlare = (ParticleModuleInitFlare *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varParticleCurveDef = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleInitGeoTrail
==============
*/
void Postload_ParticleModuleInitGeoTrail(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleModuleInitGeoTrail != (ParticleModuleInitGeoTrail *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleInitGeoTrail, 0x40ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x40ui64);
}

/*
==============
Postload_ParticleModuleInitGeoTrailArray
==============
*/
void Postload_ParticleModuleInitGeoTrailArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleModuleInitGeoTrail, count << 6);
}

/*
==============
Postload_ParticleModuleInitGeoTrailStream
==============
*/
void Postload_ParticleModuleInitGeoTrailStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleModuleInitGeoTrail *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 32831, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleModuleInitGeoTrail;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleModuleInitGeoTrail *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x40ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x40ui64);
      pos = g_streamPosGlob.pos + 64;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleModuleInitGeoTrail *)pos;
      varParticleModuleInitGeoTrail = (ParticleModuleInitGeoTrail *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleInitKillWrapBox
==============
*/
void Postload_ParticleModuleInitKillWrapBox(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleModuleInitKillWrapBox != (ParticleModuleInitKillWrapBox *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleInitKillWrapBox, 0x30ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x30ui64);
}

/*
==============
Postload_ParticleModuleInitKillWrapBoxArray
==============
*/
void Postload_ParticleModuleInitKillWrapBoxArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleModuleInitKillWrapBox, 48 * count);
}

/*
==============
Postload_ParticleModuleInitKillWrapBoxStream
==============
*/
void Postload_ParticleModuleInitKillWrapBoxStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleModuleInitKillWrapBox *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 32999, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleModuleInitKillWrapBox;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleModuleInitKillWrapBox *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x30ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x30ui64);
      pos = g_streamPosGlob.pos + 48;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleModuleInitKillWrapBox *)pos;
      varParticleModuleInitKillWrapBox = (ParticleModuleInitKillWrapBox *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleInitLightOmni
==============
*/
void Postload_ParticleModuleInitLightOmni(const DBStreamStart streamStart)
{
  ParticleLinkedAssetListDef *v2; 

  if ( streamStart != (varParticleModuleInitLightOmni != (ParticleModuleInitLightOmni *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleInitLightOmni, 0x50ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x50ui64);
  v2 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleInitLightOmni->m_linkedAssetList;
  Postload_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v2;
}

/*
==============
Postload_ParticleModuleInitLightOmniArray
==============
*/
void Postload_ParticleModuleInitLightOmniArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitLightOmni *i; 
  ParticleModuleInitLightOmni *v4; 
  ParticleLinkedAssetListDef *v5; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModuleInitLightOmni, 80 * count);
  for ( i = varParticleModuleInitLightOmni; v2; --v2 )
  {
    v4 = i;
    varParticleModuleInitLightOmni = i;
    if ( i == (ParticleModuleInitLightOmni *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x50ui64);
      v4 = varParticleModuleInitLightOmni;
    }
    v5 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &v4->m_linkedAssetList;
    Postload_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v5;
  }
}

/*
==============
Postload_ParticleModuleInitLightOmniStream
==============
*/
void Postload_ParticleModuleInitLightOmniStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleLinkedAssetListDef *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 33512, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleModuleInitLightOmni;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x50ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x50ui64);
      v5 = varParticleLinkedAssetListDef;
      g_streamPosGlob.pos += 80;
      varParticleLinkedAssetListDef = &varParticleModuleInitLightOmni->m_linkedAssetList;
      Postload_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitLightOmni = (ParticleModuleInitLightOmni *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleInitLightSpot
==============
*/
void Postload_ParticleModuleInitLightSpot(const DBStreamStart streamStart)
{
  ParticleLinkedAssetListDef *v2; 

  if ( streamStart != (varParticleModuleInitLightSpot != (ParticleModuleInitLightSpot *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleInitLightSpot, 0x60ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x60ui64);
  v2 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleInitLightSpot->m_linkedAssetList;
  Postload_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v2;
}

/*
==============
Postload_ParticleModuleInitLightSpotArray
==============
*/
void Postload_ParticleModuleInitLightSpotArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitLightSpot *i; 
  ParticleModuleInitLightSpot *v4; 
  ParticleLinkedAssetListDef *v5; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModuleInitLightSpot, 96 * count);
  for ( i = varParticleModuleInitLightSpot; v2; --v2 )
  {
    v4 = i;
    varParticleModuleInitLightSpot = i;
    if ( i == (ParticleModuleInitLightSpot *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x60ui64);
      v4 = varParticleModuleInitLightSpot;
    }
    v5 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &v4->m_linkedAssetList;
    Postload_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v5;
  }
}

/*
==============
Postload_ParticleModuleInitLightSpotStream
==============
*/
void Postload_ParticleModuleInitLightSpotStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleLinkedAssetListDef *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 34071, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleModuleInitLightSpot;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x60ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x60ui64);
      v5 = varParticleLinkedAssetListDef;
      g_streamPosGlob.pos += 96;
      varParticleLinkedAssetListDef = &varParticleModuleInitLightSpot->m_linkedAssetList;
      Postload_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitLightSpot = (ParticleModuleInitLightSpot *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleInitMaterial
==============
*/
void Postload_ParticleModuleInitMaterial(const DBStreamStart streamStart)
{
  ParticleLinkedAssetListDef *v2; 

  if ( streamStart != (varParticleModuleInitMaterial != (ParticleModuleInitMaterial *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleInitMaterial, 0xE0ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0xE0ui64);
  v2 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleInitMaterial->m_linkedAssetList;
  Postload_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v2;
}

/*
==============
Postload_ParticleModuleInitMaterialArray
==============
*/
void Postload_ParticleModuleInitMaterialArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitMaterial *i; 
  ParticleModuleInitMaterial *v4; 
  ParticleLinkedAssetListDef *v5; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModuleInitMaterial, 224 * count);
  for ( i = varParticleModuleInitMaterial; v2; --v2 )
  {
    v4 = i;
    varParticleModuleInitMaterial = i;
    if ( i == (ParticleModuleInitMaterial *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0xE0ui64);
      v4 = varParticleModuleInitMaterial;
    }
    v5 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &v4->m_linkedAssetList;
    Postload_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v5;
  }
}

/*
==============
Postload_ParticleModuleInitMaterialStream
==============
*/
void Postload_ParticleModuleInitMaterialStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleLinkedAssetListDef *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 34876, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleModuleInitMaterial;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0xE0ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0xE0ui64);
      v5 = varParticleLinkedAssetListDef;
      g_streamPosGlob.pos += 224;
      varParticleLinkedAssetListDef = &varParticleModuleInitMaterial->m_linkedAssetList;
      Postload_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitMaterial = (ParticleModuleInitMaterial *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleInitMirrorTexture
==============
*/
void Postload_ParticleModuleInitMirrorTexture(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleModuleInitMirrorTexture != (ParticleModuleInitMirrorTexture *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleInitMirrorTexture, 0x10ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x10ui64);
}

/*
==============
Postload_ParticleModuleInitMirrorTextureArray
==============
*/
void Postload_ParticleModuleInitMirrorTextureArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleModuleInitMirrorTexture, 16 * count);
}

/*
==============
Postload_ParticleModuleInitMirrorTextureStream
==============
*/
void Postload_ParticleModuleInitMirrorTextureStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleModuleInitMirrorTexture *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 35075, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleModuleInitMirrorTexture;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleModuleInitMirrorTexture *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x10ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x10ui64);
      pos = g_streamPosGlob.pos + 16;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleModuleInitMirrorTexture *)pos;
      varParticleModuleInitMirrorTexture = (ParticleModuleInitMirrorTexture *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleInitModel
==============
*/
void Postload_ParticleModuleInitModel(const DBStreamStart streamStart)
{
  ParticleLinkedAssetListDef *v2; 

  if ( streamStart != (varParticleModuleInitModel != (ParticleModuleInitModel *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleInitModel, 0x20ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x20ui64);
  v2 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleInitModel->m_linkedAssetList;
  Postload_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v2;
}

/*
==============
Postload_ParticleModuleInitModelArray
==============
*/
void Postload_ParticleModuleInitModelArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitModel *i; 
  ParticleModuleInitModel *v4; 
  ParticleLinkedAssetListDef *v5; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModuleInitModel, 32 * count);
  for ( i = varParticleModuleInitModel; v2; --v2 )
  {
    v4 = i;
    varParticleModuleInitModel = i;
    if ( i == (ParticleModuleInitModel *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x20ui64);
      v4 = varParticleModuleInitModel;
    }
    v5 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &v4->m_linkedAssetList;
    Postload_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v5;
  }
}

/*
==============
Postload_ParticleModuleInitModelStream
==============
*/
void Postload_ParticleModuleInitModelStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleLinkedAssetListDef *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 35243, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleModuleInitModel;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x20ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x20ui64);
      v5 = varParticleLinkedAssetListDef;
      g_streamPosGlob.pos += 32;
      varParticleLinkedAssetListDef = &varParticleModuleInitModel->m_linkedAssetList;
      Postload_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitModel = (ParticleModuleInitModel *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleInitOcclusionQuery
==============
*/
void Postload_ParticleModuleInitOcclusionQuery(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleModuleInitOcclusionQuery != (ParticleModuleInitOcclusionQuery *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleInitOcclusionQuery, 0x30ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x30ui64);
}

/*
==============
Postload_ParticleModuleInitOcclusionQueryArray
==============
*/
void Postload_ParticleModuleInitOcclusionQueryArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleModuleInitOcclusionQuery, 48 * count);
}

/*
==============
Postload_ParticleModuleInitOcclusionQueryStream
==============
*/
void Postload_ParticleModuleInitOcclusionQueryStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleModuleInitOcclusionQuery *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 35480, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleModuleInitOcclusionQuery;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleModuleInitOcclusionQuery *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x30ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x30ui64);
      pos = g_streamPosGlob.pos + 48;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleModuleInitOcclusionQuery *)pos;
      varParticleModuleInitOcclusionQuery = (ParticleModuleInitOcclusionQuery *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleInitOrientedSprite
==============
*/
void Postload_ParticleModuleInitOrientedSprite(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleModuleInitOrientedSprite != (ParticleModuleInitOrientedSprite *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleInitOrientedSprite, 0x20ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x20ui64);
}

/*
==============
Postload_ParticleModuleInitOrientedSpriteArray
==============
*/
void Postload_ParticleModuleInitOrientedSpriteArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleModuleInitOrientedSprite, 32 * count);
}

/*
==============
Postload_ParticleModuleInitOrientedSpriteStream
==============
*/
void Postload_ParticleModuleInitOrientedSpriteStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleModuleInitOrientedSprite *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 35602, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleModuleInitOrientedSprite;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleModuleInitOrientedSprite *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x20ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x20ui64);
      pos = g_streamPosGlob.pos + 32;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleModuleInitOrientedSprite *)pos;
      varParticleModuleInitOrientedSprite = (ParticleModuleInitOrientedSprite *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleInitParticleSim
==============
*/
void Postload_ParticleModuleInitParticleSim(const DBStreamStart streamStart)
{
  ParticleLinkedAssetListDef *v2; 

  if ( streamStart != (varParticleModuleInitParticleSim != (ParticleModuleInitParticleSim *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleInitParticleSim, 0x30ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x30ui64);
  v2 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleInitParticleSim->m_linkedAssetList;
  Postload_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v2;
}

/*
==============
Postload_ParticleModuleInitParticleSimArray
==============
*/
void Postload_ParticleModuleInitParticleSimArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitParticleSim *i; 
  ParticleModuleInitParticleSim *v4; 
  ParticleLinkedAssetListDef *v5; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModuleInitParticleSim, 48 * count);
  for ( i = varParticleModuleInitParticleSim; v2; --v2 )
  {
    v4 = i;
    varParticleModuleInitParticleSim = i;
    if ( i == (ParticleModuleInitParticleSim *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x30ui64);
      v4 = varParticleModuleInitParticleSim;
    }
    v5 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &v4->m_linkedAssetList;
    Postload_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v5;
  }
}

/*
==============
Postload_ParticleModuleInitParticleSimStream
==============
*/
void Postload_ParticleModuleInitParticleSimStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleLinkedAssetListDef *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 35770, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleModuleInitParticleSim;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x30ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x30ui64);
      v5 = varParticleLinkedAssetListDef;
      g_streamPosGlob.pos += 48;
      varParticleLinkedAssetListDef = &varParticleModuleInitParticleSim->m_linkedAssetList;
      Postload_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitParticleSim = (ParticleModuleInitParticleSim *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleInitPlayerFacing
==============
*/
void Postload_ParticleModuleInitPlayerFacing(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleModuleInitPlayerFacing != (ParticleModuleInitPlayerFacing *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleInitPlayerFacing, 0x10ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x10ui64);
}

/*
==============
Postload_ParticleModuleInitPlayerFacingArray
==============
*/
void Postload_ParticleModuleInitPlayerFacingArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleModuleInitPlayerFacing, 16 * count);
}

/*
==============
Postload_ParticleModuleInitPlayerFacingStream
==============
*/
void Postload_ParticleModuleInitPlayerFacingStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleModuleInitPlayerFacing *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 35869, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleModuleInitPlayerFacing;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleModuleInitPlayerFacing *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x10ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x10ui64);
      pos = g_streamPosGlob.pos + 16;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleModuleInitPlayerFacing *)pos;
      varParticleModuleInitPlayerFacing = (ParticleModuleInitPlayerFacing *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleInitRelativeVelocity
==============
*/
void Postload_ParticleModuleInitRelativeVelocity(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleModuleInitRelativeVelocity != (ParticleModuleInitRelativeVelocity *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleInitRelativeVelocity, 0x10ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x10ui64);
}

/*
==============
Postload_ParticleModuleInitRelativeVelocityArray
==============
*/
void Postload_ParticleModuleInitRelativeVelocityArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleModuleInitRelativeVelocity, 16 * count);
}

/*
==============
Postload_ParticleModuleInitRelativeVelocityStream
==============
*/
void Postload_ParticleModuleInitRelativeVelocityStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleModuleInitRelativeVelocity *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 36068, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleModuleInitRelativeVelocity;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleModuleInitRelativeVelocity *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x10ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x10ui64);
      pos = g_streamPosGlob.pos + 16;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleModuleInitRelativeVelocity *)pos;
      varParticleModuleInitRelativeVelocity = (ParticleModuleInitRelativeVelocity *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleInitRotation3D
==============
*/
void Postload_ParticleModuleInitRotation3D(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleModuleInitRotation3D != (ParticleModuleInitRotation3D *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleInitRotation3D, 0x50ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x50ui64);
}

/*
==============
Postload_ParticleModuleInitRotation3DArray
==============
*/
void Postload_ParticleModuleInitRotation3DArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleModuleInitRotation3D, 80 * count);
}

/*
==============
Postload_ParticleModuleInitRotation3DStream
==============
*/
void Postload_ParticleModuleInitRotation3DStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleModuleInitRotation3D *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 36404, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleModuleInitRotation3D;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleModuleInitRotation3D *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x50ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x50ui64);
      pos = g_streamPosGlob.pos + 80;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleModuleInitRotation3D *)pos;
      varParticleModuleInitRotation3D = (ParticleModuleInitRotation3D *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleInitRotation
==============
*/
void Postload_ParticleModuleInitRotation(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleModuleInitRotation != (ParticleModuleInitRotation *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleInitRotation, 0x20ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x20ui64);
}

/*
==============
Postload_ParticleModuleInitRotationArray
==============
*/
void Postload_ParticleModuleInitRotationArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleModuleInitRotation, 32 * count);
}

/*
==============
Postload_ParticleModuleInitRotationStream
==============
*/
void Postload_ParticleModuleInitRotationStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleModuleInitRotation *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 36213, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleModuleInitRotation;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleModuleInitRotation *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x20ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x20ui64);
      pos = g_streamPosGlob.pos + 32;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleModuleInitRotation *)pos;
      varParticleModuleInitRotation = (ParticleModuleInitRotation *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleInitRunner
==============
*/
void Postload_ParticleModuleInitRunner(const DBStreamStart streamStart)
{
  ParticleLinkedAssetListDef *v2; 

  if ( streamStart != (varParticleModuleInitRunner != (ParticleModuleInitRunner *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleInitRunner, 0x70ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x70ui64);
  v2 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleInitRunner->m_linkedAssetList;
  Postload_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v2;
}

/*
==============
Postload_ParticleModuleInitRunnerArray
==============
*/
void Postload_ParticleModuleInitRunnerArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitRunner *i; 
  ParticleModuleInitRunner *v4; 
  ParticleLinkedAssetListDef *v5; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModuleInitRunner, 112 * count);
  for ( i = varParticleModuleInitRunner; v2; --v2 )
  {
    v4 = i;
    varParticleModuleInitRunner = i;
    if ( i == (ParticleModuleInitRunner *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x70ui64);
      v4 = varParticleModuleInitRunner;
    }
    v5 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &v4->m_linkedAssetList;
    Postload_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v5;
  }
}

/*
==============
Postload_ParticleModuleInitRunnerStream
==============
*/
void Postload_ParticleModuleInitRunnerStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleLinkedAssetListDef *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 36918, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleModuleInitRunner;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x70ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x70ui64);
      v5 = varParticleLinkedAssetListDef;
      g_streamPosGlob.pos += 112;
      varParticleLinkedAssetListDef = &varParticleModuleInitRunner->m_linkedAssetList;
      Postload_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitRunner = (ParticleModuleInitRunner *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleInitSound
==============
*/
void Postload_ParticleModuleInitSound(const DBStreamStart streamStart)
{
  ParticleLinkedAssetListDef *v2; 

  if ( streamStart != (varParticleModuleInitSound != (ParticleModuleInitSound *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleInitSound, 0x20ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x20ui64);
  v2 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleInitSound->m_linkedAssetList;
  Postload_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v2;
}

/*
==============
Postload_ParticleModuleInitSoundArray
==============
*/
void Postload_ParticleModuleInitSoundArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitSound *i; 
  ParticleModuleInitSound *v4; 
  ParticleLinkedAssetListDef *v5; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModuleInitSound, 32 * count);
  for ( i = varParticleModuleInitSound; v2; --v2 )
  {
    v4 = i;
    varParticleModuleInitSound = i;
    if ( i == (ParticleModuleInitSound *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x20ui64);
      v4 = varParticleModuleInitSound;
    }
    v5 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &v4->m_linkedAssetList;
    Postload_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v5;
  }
}

/*
==============
Postload_ParticleModuleInitSoundStream
==============
*/
void Postload_ParticleModuleInitSoundStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleLinkedAssetListDef *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 37040, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleModuleInitSound;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x20ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x20ui64);
      v5 = varParticleLinkedAssetListDef;
      g_streamPosGlob.pos += 32;
      varParticleLinkedAssetListDef = &varParticleModuleInitSound->m_linkedAssetList;
      Postload_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitSound = (ParticleModuleInitSound *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleInitSpawn
==============
*/
void Postload_ParticleModuleInitSpawn(const DBStreamStart streamStart)
{
  ParticleCurveDef *v2; 

  if ( streamStart != (varParticleModuleInitSpawn != (ParticleModuleInitSpawn *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleInitSpawn, 0x20ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x20ui64);
  v2 = varParticleCurveDef;
  varParticleCurveDef = varParticleModuleInitSpawn->m_curves;
  if ( varParticleModuleInitSpawn->m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
    DB_PatchMem_ValidatePostloadStream(NotAtStart, varParticleModuleInitSpawn->m_curves, 0x10ui64);
  Postload_ParticleCurveDef(NotAtStart);
  varParticleCurveDef = v2;
}

/*
==============
Postload_ParticleModuleInitSpawnArray
==============
*/
void Postload_ParticleModuleInitSpawnArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitSpawn *i; 
  unsigned __int8 *pos; 
  ParticleModuleInitSpawn *v5; 
  ParticleCurveDef *v6; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModuleInitSpawn, 32 * count);
  for ( i = varParticleModuleInitSpawn; v2; --v2 )
  {
    pos = g_streamPosGlob.pos;
    v5 = i;
    varParticleModuleInitSpawn = i;
    if ( i == (ParticleModuleInitSpawn *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x20ui64);
      v5 = varParticleModuleInitSpawn;
      pos = g_streamPosGlob.pos;
    }
    v6 = varParticleCurveDef;
    varParticleCurveDef = v5->m_curves;
    if ( v5->m_curves == (ParticleCurveDef *)pos )
      DB_PatchMem_ValidatePostloadStream(NotAtStart, v5->m_curves, 0x10ui64);
    Postload_ParticleCurveDef(NotAtStart);
    ++i;
    varParticleCurveDef = v6;
  }
}

/*
==============
Postload_ParticleModuleInitSpawnShapeBox
==============
*/
void Postload_ParticleModuleInitSpawnShapeBox(const DBStreamStart streamStart)
{
  ParticleCurveDef *v2; 
  ParticleCurveDef *m_curves; 
  __int64 v4; 

  if ( streamStart != (varParticleModuleInitSpawnShapeBox != (ParticleModuleInitSpawnShapeBox *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleInitSpawnShapeBox, 0xC0ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0xC0ui64);
  v2 = varParticleCurveDef;
  m_curves = varParticleModuleInitSpawnShapeBox->m_curves;
  varParticleCurveDef = varParticleModuleInitSpawnShapeBox->m_curves;
  if ( varParticleModuleInitSpawnShapeBox->m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
  {
    DB_PatchMem_ValidatePostloadStream(NotAtStart, varParticleModuleInitSpawnShapeBox->m_curves, 0x60ui64);
    m_curves = varParticleCurveDef;
  }
  v4 = 6i64;
  do
  {
    varParticleCurveDef = m_curves;
    Postload_ParticleCurveDef(NotAtStart);
    ++m_curves;
    --v4;
  }
  while ( v4 );
  varParticleCurveDef = v2;
}

/*
==============
Postload_ParticleModuleInitSpawnShapeBoxArray
==============
*/
void Postload_ParticleModuleInitSpawnShapeBoxArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitSpawnShapeBox *i; 
  unsigned __int8 *pos; 
  ParticleModuleInitSpawnShapeBox *v5; 
  ParticleCurveDef *v6; 
  ParticleCurveDef *m_curves; 
  __int64 v8; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModuleInitSpawnShapeBox, 192 * count);
  for ( i = varParticleModuleInitSpawnShapeBox; v2; --v2 )
  {
    pos = g_streamPosGlob.pos;
    v5 = i;
    varParticleModuleInitSpawnShapeBox = i;
    if ( i == (ParticleModuleInitSpawnShapeBox *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0xC0ui64);
      pos = g_streamPosGlob.pos;
      v5 = varParticleModuleInitSpawnShapeBox;
    }
    v6 = varParticleCurveDef;
    m_curves = v5->m_curves;
    varParticleCurveDef = m_curves;
    if ( m_curves == (ParticleCurveDef *)pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, m_curves, 0x60ui64);
      m_curves = varParticleCurveDef;
    }
    v8 = 6i64;
    do
    {
      varParticleCurveDef = m_curves;
      Postload_ParticleCurveDef(NotAtStart);
      ++m_curves;
      --v8;
    }
    while ( v8 );
    ++i;
    varParticleCurveDef = v6;
  }
}

/*
==============
Postload_ParticleModuleInitSpawnShapeBoxStream
==============
*/
void Postload_ParticleModuleInitSpawnShapeBoxStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleCurveDef *v5; 
  ParticleCurveDef *m_curves; 
  __int64 v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 37630, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleModuleInitSpawnShapeBox;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0xC0ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0xC0ui64);
      v5 = varParticleCurveDef;
      m_curves = varParticleModuleInitSpawnShapeBox->m_curves;
      g_streamPosGlob.pos += 192;
      varParticleCurveDef = varParticleModuleInitSpawnShapeBox->m_curves;
      if ( varParticleModuleInitSpawnShapeBox->m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, varParticleModuleInitSpawnShapeBox->m_curves, 0x60ui64);
        m_curves = varParticleCurveDef;
      }
      v7 = 6i64;
      do
      {
        varParticleCurveDef = m_curves;
        Postload_ParticleCurveDef(NotAtStart);
        ++m_curves;
        --v7;
      }
      while ( v7 );
      pos = g_streamPosGlob.pos;
      varParticleModuleInitSpawnShapeBox = (ParticleModuleInitSpawnShapeBox *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varParticleCurveDef = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleInitSpawnShapeCylinder
==============
*/
void Postload_ParticleModuleInitSpawnShapeCylinder(const DBStreamStart streamStart)
{
  ParticleCurveDef *v2; 
  ParticleCurveDef *m_curves; 
  __int64 v4; 

  if ( streamStart != (varParticleModuleInitSpawnShapeCylinder != (ParticleModuleInitSpawnShapeCylinder *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleInitSpawnShapeCylinder, 0xA0ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0xA0ui64);
  v2 = varParticleCurveDef;
  m_curves = varParticleModuleInitSpawnShapeCylinder->m_curves;
  varParticleCurveDef = varParticleModuleInitSpawnShapeCylinder->m_curves;
  if ( varParticleModuleInitSpawnShapeCylinder->m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
  {
    DB_PatchMem_ValidatePostloadStream(NotAtStart, varParticleModuleInitSpawnShapeCylinder->m_curves, 0x50ui64);
    m_curves = varParticleCurveDef;
  }
  v4 = 5i64;
  do
  {
    varParticleCurveDef = m_curves;
    Postload_ParticleCurveDef(NotAtStart);
    ++m_curves;
    --v4;
  }
  while ( v4 );
  varParticleCurveDef = v2;
}

/*
==============
Postload_ParticleModuleInitSpawnShapeCylinderArray
==============
*/
void Postload_ParticleModuleInitSpawnShapeCylinderArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitSpawnShapeCylinder *i; 
  unsigned __int8 *pos; 
  ParticleModuleInitSpawnShapeCylinder *v5; 
  ParticleCurveDef *v6; 
  ParticleCurveDef *m_curves; 
  __int64 v8; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModuleInitSpawnShapeCylinder, 160 * count);
  for ( i = varParticleModuleInitSpawnShapeCylinder; v2; --v2 )
  {
    pos = g_streamPosGlob.pos;
    v5 = i;
    varParticleModuleInitSpawnShapeCylinder = i;
    if ( i == (ParticleModuleInitSpawnShapeCylinder *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0xA0ui64);
      pos = g_streamPosGlob.pos;
      v5 = varParticleModuleInitSpawnShapeCylinder;
    }
    v6 = varParticleCurveDef;
    m_curves = v5->m_curves;
    varParticleCurveDef = m_curves;
    if ( m_curves == (ParticleCurveDef *)pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, m_curves, 0x50ui64);
      m_curves = varParticleCurveDef;
    }
    v8 = 5i64;
    do
    {
      varParticleCurveDef = m_curves;
      Postload_ParticleCurveDef(NotAtStart);
      ++m_curves;
      --v8;
    }
    while ( v8 );
    ++i;
    varParticleCurveDef = v6;
  }
}

/*
==============
Postload_ParticleModuleInitSpawnShapeCylinderStream
==============
*/
void Postload_ParticleModuleInitSpawnShapeCylinderStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleCurveDef *v5; 
  ParticleCurveDef *m_curves; 
  __int64 v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 38028, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleModuleInitSpawnShapeCylinder;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0xA0ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0xA0ui64);
      v5 = varParticleCurveDef;
      m_curves = varParticleModuleInitSpawnShapeCylinder->m_curves;
      g_streamPosGlob.pos += 160;
      varParticleCurveDef = varParticleModuleInitSpawnShapeCylinder->m_curves;
      if ( varParticleModuleInitSpawnShapeCylinder->m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, varParticleModuleInitSpawnShapeCylinder->m_curves, 0x50ui64);
        m_curves = varParticleCurveDef;
      }
      v7 = 5i64;
      do
      {
        varParticleCurveDef = m_curves;
        Postload_ParticleCurveDef(NotAtStart);
        ++m_curves;
        --v7;
      }
      while ( v7 );
      pos = g_streamPosGlob.pos;
      varParticleModuleInitSpawnShapeCylinder = (ParticleModuleInitSpawnShapeCylinder *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varParticleCurveDef = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleInitSpawnShapeEllipsoid
==============
*/
void Postload_ParticleModuleInitSpawnShapeEllipsoid(const DBStreamStart streamStart)
{
  ParticleCurveDef *v2; 
  ParticleCurveDef *m_curves; 
  __int64 v4; 

  if ( streamStart != (varParticleModuleInitSpawnShapeEllipsoid != (ParticleModuleInitSpawnShapeEllipsoid *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleInitSpawnShapeEllipsoid, 0xB0ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0xB0ui64);
  v2 = varParticleCurveDef;
  m_curves = varParticleModuleInitSpawnShapeEllipsoid->m_curves;
  varParticleCurveDef = varParticleModuleInitSpawnShapeEllipsoid->m_curves;
  if ( varParticleModuleInitSpawnShapeEllipsoid->m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
  {
    DB_PatchMem_ValidatePostloadStream(NotAtStart, varParticleModuleInitSpawnShapeEllipsoid->m_curves, 0x60ui64);
    m_curves = varParticleCurveDef;
  }
  v4 = 6i64;
  do
  {
    varParticleCurveDef = m_curves;
    Postload_ParticleCurveDef(NotAtStart);
    ++m_curves;
    --v4;
  }
  while ( v4 );
  varParticleCurveDef = v2;
}

/*
==============
Postload_ParticleModuleInitSpawnShapeEllipsoidArray
==============
*/
void Postload_ParticleModuleInitSpawnShapeEllipsoidArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitSpawnShapeEllipsoid *i; 
  unsigned __int8 *pos; 
  ParticleModuleInitSpawnShapeEllipsoid *v5; 
  ParticleCurveDef *v6; 
  ParticleCurveDef *m_curves; 
  __int64 v8; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModuleInitSpawnShapeEllipsoid, 176 * count);
  for ( i = varParticleModuleInitSpawnShapeEllipsoid; v2; --v2 )
  {
    pos = g_streamPosGlob.pos;
    v5 = i;
    varParticleModuleInitSpawnShapeEllipsoid = i;
    if ( i == (ParticleModuleInitSpawnShapeEllipsoid *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0xB0ui64);
      pos = g_streamPosGlob.pos;
      v5 = varParticleModuleInitSpawnShapeEllipsoid;
    }
    v6 = varParticleCurveDef;
    m_curves = v5->m_curves;
    varParticleCurveDef = m_curves;
    if ( m_curves == (ParticleCurveDef *)pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, m_curves, 0x60ui64);
      m_curves = varParticleCurveDef;
    }
    v8 = 6i64;
    do
    {
      varParticleCurveDef = m_curves;
      Postload_ParticleCurveDef(NotAtStart);
      ++m_curves;
      --v8;
    }
    while ( v8 );
    ++i;
    varParticleCurveDef = v6;
  }
}

/*
==============
Postload_ParticleModuleInitSpawnShapeEllipsoidStream
==============
*/
void Postload_ParticleModuleInitSpawnShapeEllipsoidStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleCurveDef *v5; 
  ParticleCurveDef *m_curves; 
  __int64 v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 38357, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleModuleInitSpawnShapeEllipsoid;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0xB0ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0xB0ui64);
      v5 = varParticleCurveDef;
      m_curves = varParticleModuleInitSpawnShapeEllipsoid->m_curves;
      g_streamPosGlob.pos += 176;
      varParticleCurveDef = varParticleModuleInitSpawnShapeEllipsoid->m_curves;
      if ( varParticleModuleInitSpawnShapeEllipsoid->m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, varParticleModuleInitSpawnShapeEllipsoid->m_curves, 0x60ui64);
        m_curves = varParticleCurveDef;
      }
      v7 = 6i64;
      do
      {
        varParticleCurveDef = m_curves;
        Postload_ParticleCurveDef(NotAtStart);
        ++m_curves;
        --v7;
      }
      while ( v7 );
      pos = g_streamPosGlob.pos;
      varParticleModuleInitSpawnShapeEllipsoid = (ParticleModuleInitSpawnShapeEllipsoid *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varParticleCurveDef = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleInitSpawnShapeMesh
==============
*/
void Postload_ParticleModuleInitSpawnShapeMesh(const DBStreamStart streamStart)
{
  ParticleLinkedAssetListDef *v2; 
  __int64 v3; 
  ParticleModuleInitSpawnShapeMesh *v4; 
  ParticleSpawnMeshAssetDef *v5; 
  unsigned __int64 v6; 
  ParticleCurveDef *v7; 
  ParticleCurveDef *m_curves; 

  if ( streamStart != (varParticleModuleInitSpawnShapeMesh != (ParticleModuleInitSpawnShapeMesh *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleInitSpawnShapeMesh, 0x80ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x80ui64);
  v2 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleInitSpawnShapeMesh->m_linkedAssetList;
  Postload_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v2;
  v3 = 3i64;
  v4 = varParticleModuleInitSpawnShapeMesh;
  if ( varParticleModuleInitSpawnShapeMesh->m_meshAssetData )
  {
    v5 = varParticleSpawnMeshAssetDef;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->m_meshAssetData = (ParticleSpawnMeshAssetDef *)g_streamPosGlob.pos;
    varParticleSpawnMeshAssetDef = (ParticleSpawnMeshAssetDef *)g_streamPosGlob.pos;
    v6 = 16i64 * varParticleModuleDef->moduleData.initAttributes.m_colorMin.v.m128_u32[0];
    if ( v6 )
    {
      if ( v6 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v6);
    }
    v4 = varParticleModuleInitSpawnShapeMesh;
    varParticleSpawnMeshAssetDef = v5;
  }
  v7 = varParticleCurveDef;
  m_curves = v4->m_curves;
  varParticleCurveDef = m_curves;
  if ( m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
  {
    DB_PatchMem_ValidatePostloadStream(NotAtStart, m_curves, 0x30ui64);
    m_curves = varParticleCurveDef;
  }
  do
  {
    varParticleCurveDef = m_curves;
    Postload_ParticleCurveDef(NotAtStart);
    ++m_curves;
    --v3;
  }
  while ( v3 );
  varParticleCurveDef = v7;
}

/*
==============
Postload_ParticleModuleInitSpawnShapeMeshArray
==============
*/
void Postload_ParticleModuleInitSpawnShapeMeshArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitSpawnShapeMesh *i; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModuleInitSpawnShapeMesh, count << 7);
  for ( i = varParticleModuleInitSpawnShapeMesh; v2; --v2 )
  {
    varParticleModuleInitSpawnShapeMesh = i;
    Postload_ParticleModuleInitSpawnShapeMesh(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ParticleModuleInitSpawnShapeMeshStream
==============
*/
void Postload_ParticleModuleInitSpawnShapeMeshStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleLinkedAssetListDef *v5; 
  ParticleModuleInitSpawnShapeMesh *v6; 
  ParticleSpawnMeshAssetDef *v7; 
  unsigned __int64 v8; 
  ParticleCurveDef *v9; 
  ParticleCurveDef *m_curves; 
  __int64 v11; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 38834, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleModuleInitSpawnShapeMesh;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x80ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x80ui64);
      v5 = varParticleLinkedAssetListDef;
      g_streamPosGlob.pos += 128;
      varParticleLinkedAssetListDef = &varParticleModuleInitSpawnShapeMesh->m_linkedAssetList;
      Postload_ParticleLinkedAssetListDef(NotAtStart);
      varParticleLinkedAssetListDef = v5;
      v6 = varParticleModuleInitSpawnShapeMesh;
      if ( varParticleModuleInitSpawnShapeMesh->m_meshAssetData )
      {
        v7 = varParticleSpawnMeshAssetDef;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v6->m_meshAssetData = (ParticleSpawnMeshAssetDef *)g_streamPosGlob.pos;
        varParticleSpawnMeshAssetDef = (ParticleSpawnMeshAssetDef *)g_streamPosGlob.pos;
        v8 = 16i64 * varParticleModuleDef->moduleData.initAttributes.m_colorMin.v.m128_u32[0];
        if ( v8 )
        {
          if ( v8 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
            __debugbreak();
          DB_IncStreamPos(v8);
        }
        v6 = varParticleModuleInitSpawnShapeMesh;
        varParticleSpawnMeshAssetDef = v7;
      }
      v9 = varParticleCurveDef;
      m_curves = v6->m_curves;
      varParticleCurveDef = m_curves;
      if ( m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, m_curves, 0x30ui64);
        m_curves = varParticleCurveDef;
      }
      v11 = 3i64;
      do
      {
        varParticleCurveDef = m_curves;
        Postload_ParticleCurveDef(NotAtStart);
        ++m_curves;
        --v11;
      }
      while ( v11 );
      pos = g_streamPosGlob.pos;
      varParticleModuleInitSpawnShapeMesh = (ParticleModuleInitSpawnShapeMesh *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varParticleCurveDef = v9;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleInitSpawnShapeSphere
==============
*/
void Postload_ParticleModuleInitSpawnShapeSphere(const DBStreamStart streamStart)
{
  ParticleCurveDef *v2; 
  ParticleCurveDef *m_curves; 
  __int64 v4; 

  if ( streamStart != (varParticleModuleInitSpawnShapeSphere != (ParticleModuleInitSpawnShapeSphere *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleInitSpawnShapeSphere, 0x80ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x80ui64);
  v2 = varParticleCurveDef;
  m_curves = varParticleModuleInitSpawnShapeSphere->m_curves;
  varParticleCurveDef = varParticleModuleInitSpawnShapeSphere->m_curves;
  if ( varParticleModuleInitSpawnShapeSphere->m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
  {
    DB_PatchMem_ValidatePostloadStream(NotAtStart, varParticleModuleInitSpawnShapeSphere->m_curves, 0x40ui64);
    m_curves = varParticleCurveDef;
  }
  v4 = 4i64;
  do
  {
    varParticleCurveDef = m_curves;
    Postload_ParticleCurveDef(NotAtStart);
    ++m_curves;
    --v4;
  }
  while ( v4 );
  varParticleCurveDef = v2;
}

/*
==============
Postload_ParticleModuleInitSpawnShapeSphereArray
==============
*/
void Postload_ParticleModuleInitSpawnShapeSphereArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitSpawnShapeSphere *i; 
  unsigned __int8 *pos; 
  ParticleModuleInitSpawnShapeSphere *v5; 
  ParticleCurveDef *v6; 
  ParticleCurveDef *m_curves; 
  __int64 v8; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModuleInitSpawnShapeSphere, count << 7);
  for ( i = varParticleModuleInitSpawnShapeSphere; v2; --v2 )
  {
    pos = g_streamPosGlob.pos;
    v5 = i;
    varParticleModuleInitSpawnShapeSphere = i;
    if ( i == (ParticleModuleInitSpawnShapeSphere *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x80ui64);
      pos = g_streamPosGlob.pos;
      v5 = varParticleModuleInitSpawnShapeSphere;
    }
    v6 = varParticleCurveDef;
    m_curves = v5->m_curves;
    varParticleCurveDef = m_curves;
    if ( m_curves == (ParticleCurveDef *)pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, m_curves, 0x40ui64);
      m_curves = varParticleCurveDef;
    }
    v8 = 4i64;
    do
    {
      varParticleCurveDef = m_curves;
      Postload_ParticleCurveDef(NotAtStart);
      ++m_curves;
      --v8;
    }
    while ( v8 );
    ++i;
    varParticleCurveDef = v6;
  }
}

/*
==============
Postload_ParticleModuleInitSpawnShapeSphereStream
==============
*/
void Postload_ParticleModuleInitSpawnShapeSphereStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleCurveDef *v5; 
  ParticleCurveDef *m_curves; 
  __int64 v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 39140, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleModuleInitSpawnShapeSphere;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x80ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x80ui64);
      v5 = varParticleCurveDef;
      m_curves = varParticleModuleInitSpawnShapeSphere->m_curves;
      g_streamPosGlob.pos += 128;
      varParticleCurveDef = varParticleModuleInitSpawnShapeSphere->m_curves;
      if ( varParticleModuleInitSpawnShapeSphere->m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, varParticleModuleInitSpawnShapeSphere->m_curves, 0x40ui64);
        m_curves = varParticleCurveDef;
      }
      v7 = 4i64;
      do
      {
        varParticleCurveDef = m_curves;
        Postload_ParticleCurveDef(NotAtStart);
        ++m_curves;
        --v7;
      }
      while ( v7 );
      pos = g_streamPosGlob.pos;
      varParticleModuleInitSpawnShapeSphere = (ParticleModuleInitSpawnShapeSphere *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varParticleCurveDef = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleInitSpawnStream
==============
*/
void Postload_ParticleModuleInitSpawnStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleCurveDef *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 37162, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleModuleInitSpawn;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x20ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x20ui64);
      v5 = varParticleCurveDef;
      g_streamPosGlob.pos += 32;
      varParticleCurveDef = varParticleModuleInitSpawn->m_curves;
      if ( varParticleModuleInitSpawn->m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(NotAtStart, varParticleModuleInitSpawn->m_curves, 0x10ui64);
      Postload_ParticleCurveDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitSpawn = (ParticleModuleInitSpawn *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varParticleCurveDef = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleInitTail
==============
*/
void Postload_ParticleModuleInitTail(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleModuleInitTail != (ParticleModuleInitTail *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleInitTail, 0x10ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x10ui64);
}

/*
==============
Postload_ParticleModuleInitTailArray
==============
*/
void Postload_ParticleModuleInitTailArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleModuleInitTail, 16 * count);
}

/*
==============
Postload_ParticleModuleInitTailStream
==============
*/
void Postload_ParticleModuleInitTailStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleModuleInitTail *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 39354, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleModuleInitTail;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleModuleInitTail *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x10ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x10ui64);
      pos = g_streamPosGlob.pos + 16;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleModuleInitTail *)pos;
      varParticleModuleInitTail = (ParticleModuleInitTail *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleInitVectorField
==============
*/
void Postload_ParticleModuleInitVectorField(const DBStreamStart streamStart)
{
  ParticleLinkedAssetListDef *v2; 

  if ( streamStart != (varParticleModuleInitVectorField != (ParticleModuleInitVectorField *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleInitVectorField, 0x30ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x30ui64);
  v2 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleInitVectorField->m_linkedAssetList;
  Postload_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v2;
}

/*
==============
Postload_ParticleModuleInitVectorFieldArray
==============
*/
void Postload_ParticleModuleInitVectorFieldArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitVectorField *i; 
  ParticleModuleInitVectorField *v4; 
  ParticleLinkedAssetListDef *v5; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModuleInitVectorField, 48 * count);
  for ( i = varParticleModuleInitVectorField; v2; --v2 )
  {
    v4 = i;
    varParticleModuleInitVectorField = i;
    if ( i == (ParticleModuleInitVectorField *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x30ui64);
      v4 = varParticleModuleInitVectorField;
    }
    v5 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &v4->m_linkedAssetList;
    Postload_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v5;
  }
}

/*
==============
Postload_ParticleModuleInitVectorFieldStream
==============
*/
void Postload_ParticleModuleInitVectorFieldStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleLinkedAssetListDef *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 39614, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleModuleInitVectorField;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x30ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x30ui64);
      v5 = varParticleLinkedAssetListDef;
      g_streamPosGlob.pos += 48;
      varParticleLinkedAssetListDef = &varParticleModuleInitVectorField->m_linkedAssetList;
      Postload_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitVectorField = (ParticleModuleInitVectorField *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleInitVolumetric
==============
*/
void Postload_ParticleModuleInitVolumetric(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleModuleInitVolumetric != (ParticleModuleInitVolumetric *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleInitVolumetric, 0x20ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x20ui64);
}

/*
==============
Postload_ParticleModuleInitVolumetricArray
==============
*/
void Postload_ParticleModuleInitVolumetricArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleModuleInitVolumetric, 32 * count);
}

/*
==============
Postload_ParticleModuleInitVolumetricStream
==============
*/
void Postload_ParticleModuleInitVolumetricStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleModuleInitVolumetric *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 39805, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleModuleInitVolumetric;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleModuleInitVolumetric *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x20ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x20ui64);
      pos = g_streamPosGlob.pos + 32;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleModuleInitVolumetric *)pos;
      varParticleModuleInitVolumetric = (ParticleModuleInitVolumetric *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleIntensityGraph
==============
*/
void Postload_ParticleModuleIntensityGraph(const DBStreamStart streamStart)
{
  ParticleCurveDef *v2; 
  ParticleCurveDef *m_curves; 
  __int64 v4; 

  if ( streamStart != (varParticleModuleIntensityGraph != (ParticleModuleIntensityGraph *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleIntensityGraph, 0x30ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x30ui64);
  v2 = varParticleCurveDef;
  m_curves = varParticleModuleIntensityGraph->m_curves;
  varParticleCurveDef = varParticleModuleIntensityGraph->m_curves;
  if ( varParticleModuleIntensityGraph->m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
  {
    DB_PatchMem_ValidatePostloadStream(NotAtStart, varParticleModuleIntensityGraph->m_curves, 0x20ui64);
    m_curves = varParticleCurveDef;
  }
  v4 = 2i64;
  do
  {
    varParticleCurveDef = m_curves;
    Postload_ParticleCurveDef(NotAtStart);
    ++m_curves;
    --v4;
  }
  while ( v4 );
  varParticleCurveDef = v2;
}

/*
==============
Postload_ParticleModuleIntensityGraphArray
==============
*/
void Postload_ParticleModuleIntensityGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleIntensityGraph *i; 
  unsigned __int8 *pos; 
  ParticleModuleIntensityGraph *v5; 
  ParticleCurveDef *v6; 
  ParticleCurveDef *m_curves; 
  __int64 v8; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModuleIntensityGraph, 48 * count);
  for ( i = varParticleModuleIntensityGraph; v2; --v2 )
  {
    pos = g_streamPosGlob.pos;
    v5 = i;
    varParticleModuleIntensityGraph = i;
    if ( i == (ParticleModuleIntensityGraph *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x30ui64);
      pos = g_streamPosGlob.pos;
      v5 = varParticleModuleIntensityGraph;
    }
    v6 = varParticleCurveDef;
    m_curves = v5->m_curves;
    varParticleCurveDef = m_curves;
    if ( m_curves == (ParticleCurveDef *)pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, m_curves, 0x20ui64);
      m_curves = varParticleCurveDef;
    }
    v8 = 2i64;
    do
    {
      varParticleCurveDef = m_curves;
      Postload_ParticleCurveDef(NotAtStart);
      ++m_curves;
      --v8;
    }
    while ( v8 );
    ++i;
    varParticleCurveDef = v6;
  }
}

/*
==============
Postload_ParticleModuleIntensityGraphStream
==============
*/
void Postload_ParticleModuleIntensityGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleCurveDef *v5; 
  ParticleCurveDef *m_curves; 
  __int64 v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 41354, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleModuleIntensityGraph;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x30ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x30ui64);
      v5 = varParticleCurveDef;
      m_curves = varParticleModuleIntensityGraph->m_curves;
      g_streamPosGlob.pos += 48;
      varParticleCurveDef = varParticleModuleIntensityGraph->m_curves;
      if ( varParticleModuleIntensityGraph->m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, varParticleModuleIntensityGraph->m_curves, 0x20ui64);
        m_curves = varParticleCurveDef;
      }
      v7 = 2i64;
      do
      {
        varParticleCurveDef = m_curves;
        Postload_ParticleCurveDef(NotAtStart);
        ++m_curves;
        --v7;
      }
      while ( v7 );
      pos = g_streamPosGlob.pos;
      varParticleModuleIntensityGraph = (ParticleModuleIntensityGraph *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varParticleCurveDef = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleParentVelocityGraph
==============
*/
void Postload_ParticleModuleParentVelocityGraph(const DBStreamStart streamStart)
{
  ParticleCurveDef *v2; 
  ParticleCurveDef *m_curves; 
  __int64 v4; 

  if ( streamStart != (varParticleModuleParentVelocityGraph != (ParticleModuleParentVelocityGraph *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleParentVelocityGraph, 0x30ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x30ui64);
  v2 = varParticleCurveDef;
  m_curves = varParticleModuleParentVelocityGraph->m_curves;
  varParticleCurveDef = varParticleModuleParentVelocityGraph->m_curves;
  if ( varParticleModuleParentVelocityGraph->m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
  {
    DB_PatchMem_ValidatePostloadStream(NotAtStart, varParticleModuleParentVelocityGraph->m_curves, 0x20ui64);
    m_curves = varParticleCurveDef;
  }
  v4 = 2i64;
  do
  {
    varParticleCurveDef = m_curves;
    Postload_ParticleCurveDef(NotAtStart);
    ++m_curves;
    --v4;
  }
  while ( v4 );
  varParticleCurveDef = v2;
}

/*
==============
Postload_ParticleModuleParentVelocityGraphArray
==============
*/
void Postload_ParticleModuleParentVelocityGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleParentVelocityGraph *i; 
  unsigned __int8 *pos; 
  ParticleModuleParentVelocityGraph *v5; 
  ParticleCurveDef *v6; 
  ParticleCurveDef *m_curves; 
  __int64 v8; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModuleParentVelocityGraph, 48 * count);
  for ( i = varParticleModuleParentVelocityGraph; v2; --v2 )
  {
    pos = g_streamPosGlob.pos;
    v5 = i;
    varParticleModuleParentVelocityGraph = i;
    if ( i == (ParticleModuleParentVelocityGraph *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x30ui64);
      pos = g_streamPosGlob.pos;
      v5 = varParticleModuleParentVelocityGraph;
    }
    v6 = varParticleCurveDef;
    m_curves = v5->m_curves;
    varParticleCurveDef = m_curves;
    if ( m_curves == (ParticleCurveDef *)pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, m_curves, 0x20ui64);
      m_curves = varParticleCurveDef;
    }
    v8 = 2i64;
    do
    {
      varParticleCurveDef = m_curves;
      Postload_ParticleCurveDef(NotAtStart);
      ++m_curves;
      --v8;
    }
    while ( v8 );
    ++i;
    varParticleCurveDef = v6;
  }
}

/*
==============
Postload_ParticleModuleParentVelocityGraphStream
==============
*/
void Postload_ParticleModuleParentVelocityGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleCurveDef *v5; 
  ParticleCurveDef *m_curves; 
  __int64 v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 41621, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleModuleParentVelocityGraph;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x30ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x30ui64);
      v5 = varParticleCurveDef;
      m_curves = varParticleModuleParentVelocityGraph->m_curves;
      g_streamPosGlob.pos += 48;
      varParticleCurveDef = varParticleModuleParentVelocityGraph->m_curves;
      if ( varParticleModuleParentVelocityGraph->m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, varParticleModuleParentVelocityGraph->m_curves, 0x20ui64);
        m_curves = varParticleCurveDef;
      }
      v7 = 2i64;
      do
      {
        varParticleCurveDef = m_curves;
        Postload_ParticleCurveDef(NotAtStart);
        ++m_curves;
        --v7;
      }
      while ( v7 );
      pos = g_streamPosGlob.pos;
      varParticleModuleParentVelocityGraph = (ParticleModuleParentVelocityGraph *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varParticleCurveDef = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModulePhysicsLight
==============
*/
void Postload_ParticleModulePhysicsLight(const DBStreamStart streamStart)
{
  ParticleLinkedAssetListDef *v2; 

  if ( streamStart != (varParticleModulePhysicsLight != (ParticleModulePhysicsLight *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModulePhysicsLight, 0x20ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x20ui64);
  v2 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModulePhysicsLight->m_linkedAssetList;
  Postload_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v2;
}

/*
==============
Postload_ParticleModulePhysicsLightArray
==============
*/
void Postload_ParticleModulePhysicsLightArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModulePhysicsLight *i; 
  ParticleModulePhysicsLight *v4; 
  ParticleLinkedAssetListDef *v5; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModulePhysicsLight, 32 * count);
  for ( i = varParticleModulePhysicsLight; v2; --v2 )
  {
    v4 = i;
    varParticleModulePhysicsLight = i;
    if ( i == (ParticleModulePhysicsLight *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x20ui64);
      v4 = varParticleModulePhysicsLight;
    }
    v5 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &v4->m_linkedAssetList;
    Postload_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v5;
  }
}

/*
==============
Postload_ParticleModulePhysicsLightStream
==============
*/
void Postload_ParticleModulePhysicsLightStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleLinkedAssetListDef *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 41789, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleModulePhysicsLight;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x20ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x20ui64);
      v5 = varParticleLinkedAssetListDef;
      g_streamPosGlob.pos += 32;
      varParticleLinkedAssetListDef = &varParticleModulePhysicsLight->m_linkedAssetList;
      Postload_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModulePhysicsLight = (ParticleModulePhysicsLight *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModulePhysicsRayCast
==============
*/
void Postload_ParticleModulePhysicsRayCast(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleModulePhysicsRayCast != (ParticleModulePhysicsRayCast *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModulePhysicsRayCast, 0x30ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x30ui64);
}

/*
==============
Postload_ParticleModulePhysicsRayCastArray
==============
*/
void Postload_ParticleModulePhysicsRayCastArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleModulePhysicsRayCast, 48 * count);
}

/*
==============
Postload_ParticleModulePhysicsRayCastStream
==============
*/
void Postload_ParticleModulePhysicsRayCastStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleModulePhysicsRayCast *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 42003, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleModulePhysicsRayCast;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleModulePhysicsRayCast *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x30ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x30ui64);
      pos = g_streamPosGlob.pos + 48;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleModulePhysicsRayCast *)pos;
      varParticleModulePhysicsRayCast = (ParticleModulePhysicsRayCast *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModulePositionGraph
==============
*/
void Postload_ParticleModulePositionGraph(const DBStreamStart streamStart)
{
  ParticleCurveDef *v2; 
  ParticleCurveDef *m_curves; 
  __int64 v4; 

  if ( streamStart != (varParticleModulePositionGraph != (ParticleModulePositionGraph *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModulePositionGraph, 0x70ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x70ui64);
  v2 = varParticleCurveDef;
  m_curves = varParticleModulePositionGraph->m_curves;
  varParticleCurveDef = varParticleModulePositionGraph->m_curves;
  if ( varParticleModulePositionGraph->m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
  {
    DB_PatchMem_ValidatePostloadStream(NotAtStart, varParticleModulePositionGraph->m_curves, 0x60ui64);
    m_curves = varParticleCurveDef;
  }
  v4 = 6i64;
  do
  {
    varParticleCurveDef = m_curves;
    Postload_ParticleCurveDef(NotAtStart);
    ++m_curves;
    --v4;
  }
  while ( v4 );
  varParticleCurveDef = v2;
}

/*
==============
Postload_ParticleModulePositionGraphArray
==============
*/
void Postload_ParticleModulePositionGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModulePositionGraph *i; 
  unsigned __int8 *pos; 
  ParticleModulePositionGraph *v5; 
  ParticleCurveDef *v6; 
  ParticleCurveDef *m_curves; 
  __int64 v8; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModulePositionGraph, 112 * count);
  for ( i = varParticleModulePositionGraph; v2; --v2 )
  {
    pos = g_streamPosGlob.pos;
    v5 = i;
    varParticleModulePositionGraph = i;
    if ( i == (ParticleModulePositionGraph *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x70ui64);
      pos = g_streamPosGlob.pos;
      v5 = varParticleModulePositionGraph;
    }
    v6 = varParticleCurveDef;
    m_curves = v5->m_curves;
    varParticleCurveDef = m_curves;
    if ( m_curves == (ParticleCurveDef *)pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, m_curves, 0x60ui64);
      m_curves = varParticleCurveDef;
    }
    v8 = 6i64;
    do
    {
      varParticleCurveDef = m_curves;
      Postload_ParticleCurveDef(NotAtStart);
      ++m_curves;
      --v8;
    }
    while ( v8 );
    ++i;
    varParticleCurveDef = v6;
  }
}

/*
==============
Postload_ParticleModulePositionGraphStream
==============
*/
void Postload_ParticleModulePositionGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleCurveDef *v5; 
  ParticleCurveDef *m_curves; 
  __int64 v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 42125, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleModulePositionGraph;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x70ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x70ui64);
      v5 = varParticleCurveDef;
      m_curves = varParticleModulePositionGraph->m_curves;
      g_streamPosGlob.pos += 112;
      varParticleCurveDef = varParticleModulePositionGraph->m_curves;
      if ( varParticleModulePositionGraph->m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, varParticleModulePositionGraph->m_curves, 0x60ui64);
        m_curves = varParticleCurveDef;
      }
      v7 = 6i64;
      do
      {
        varParticleCurveDef = m_curves;
        Postload_ParticleCurveDef(NotAtStart);
        ++m_curves;
        --v7;
      }
      while ( v7 );
      pos = g_streamPosGlob.pos;
      varParticleModulePositionGraph = (ParticleModulePositionGraph *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varParticleCurveDef = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleRotationGraph3D
==============
*/
void Postload_ParticleModuleRotationGraph3D(const DBStreamStart streamStart)
{
  ParticleCurveDef *v2; 
  ParticleCurveDef *m_curves; 
  __int64 v4; 

  if ( streamStart != (varParticleModuleRotationGraph3D != (ParticleModuleRotationGraph3D *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleRotationGraph3D, 0x70ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x70ui64);
  v2 = varParticleCurveDef;
  m_curves = varParticleModuleRotationGraph3D->m_curves;
  varParticleCurveDef = varParticleModuleRotationGraph3D->m_curves;
  if ( varParticleModuleRotationGraph3D->m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
  {
    DB_PatchMem_ValidatePostloadStream(NotAtStart, varParticleModuleRotationGraph3D->m_curves, 0x60ui64);
    m_curves = varParticleCurveDef;
  }
  v4 = 6i64;
  do
  {
    varParticleCurveDef = m_curves;
    Postload_ParticleCurveDef(NotAtStart);
    ++m_curves;
    --v4;
  }
  while ( v4 );
  varParticleCurveDef = v2;
}

/*
==============
Postload_ParticleModuleRotationGraph3DArray
==============
*/
void Postload_ParticleModuleRotationGraph3DArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleRotationGraph3D *i; 
  unsigned __int8 *pos; 
  ParticleModuleRotationGraph3D *v5; 
  ParticleCurveDef *v6; 
  ParticleCurveDef *m_curves; 
  __int64 v8; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModuleRotationGraph3D, 112 * count);
  for ( i = varParticleModuleRotationGraph3D; v2; --v2 )
  {
    pos = g_streamPosGlob.pos;
    v5 = i;
    varParticleModuleRotationGraph3D = i;
    if ( i == (ParticleModuleRotationGraph3D *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x70ui64);
      pos = g_streamPosGlob.pos;
      v5 = varParticleModuleRotationGraph3D;
    }
    v6 = varParticleCurveDef;
    m_curves = v5->m_curves;
    varParticleCurveDef = m_curves;
    if ( m_curves == (ParticleCurveDef *)pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, m_curves, 0x60ui64);
      m_curves = varParticleCurveDef;
    }
    v8 = 6i64;
    do
    {
      varParticleCurveDef = m_curves;
      Postload_ParticleCurveDef(NotAtStart);
      ++m_curves;
      --v8;
    }
    while ( v8 );
    ++i;
    varParticleCurveDef = v6;
  }
}

/*
==============
Postload_ParticleModuleRotationGraph3DStream
==============
*/
void Postload_ParticleModuleRotationGraph3DStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleCurveDef *v5; 
  ParticleCurveDef *m_curves; 
  __int64 v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 42415, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleModuleRotationGraph3D;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x70ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x70ui64);
      v5 = varParticleCurveDef;
      m_curves = varParticleModuleRotationGraph3D->m_curves;
      g_streamPosGlob.pos += 112;
      varParticleCurveDef = varParticleModuleRotationGraph3D->m_curves;
      if ( varParticleModuleRotationGraph3D->m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, varParticleModuleRotationGraph3D->m_curves, 0x60ui64);
        m_curves = varParticleCurveDef;
      }
      v7 = 6i64;
      do
      {
        varParticleCurveDef = m_curves;
        Postload_ParticleCurveDef(NotAtStart);
        ++m_curves;
        --v7;
      }
      while ( v7 );
      pos = g_streamPosGlob.pos;
      varParticleModuleRotationGraph3D = (ParticleModuleRotationGraph3D *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varParticleCurveDef = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleRotationGraph
==============
*/
void Postload_ParticleModuleRotationGraph(const DBStreamStart streamStart)
{
  ParticleCurveDef *v2; 
  ParticleCurveDef *m_curves; 
  __int64 v4; 

  if ( streamStart != (varParticleModuleRotationGraph != (ParticleModuleRotationGraph *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleRotationGraph, 0x30ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x30ui64);
  v2 = varParticleCurveDef;
  m_curves = varParticleModuleRotationGraph->m_curves;
  varParticleCurveDef = varParticleModuleRotationGraph->m_curves;
  if ( varParticleModuleRotationGraph->m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
  {
    DB_PatchMem_ValidatePostloadStream(NotAtStart, varParticleModuleRotationGraph->m_curves, 0x20ui64);
    m_curves = varParticleCurveDef;
  }
  v4 = 2i64;
  do
  {
    varParticleCurveDef = m_curves;
    Postload_ParticleCurveDef(NotAtStart);
    ++m_curves;
    --v4;
  }
  while ( v4 );
  varParticleCurveDef = v2;
}

/*
==============
Postload_ParticleModuleRotationGraphArray
==============
*/
void Postload_ParticleModuleRotationGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleRotationGraph *i; 
  unsigned __int8 *pos; 
  ParticleModuleRotationGraph *v5; 
  ParticleCurveDef *v6; 
  ParticleCurveDef *m_curves; 
  __int64 v8; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModuleRotationGraph, 48 * count);
  for ( i = varParticleModuleRotationGraph; v2; --v2 )
  {
    pos = g_streamPosGlob.pos;
    v5 = i;
    varParticleModuleRotationGraph = i;
    if ( i == (ParticleModuleRotationGraph *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x30ui64);
      pos = g_streamPosGlob.pos;
      v5 = varParticleModuleRotationGraph;
    }
    v6 = varParticleCurveDef;
    m_curves = v5->m_curves;
    varParticleCurveDef = m_curves;
    if ( m_curves == (ParticleCurveDef *)pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, m_curves, 0x20ui64);
      m_curves = varParticleCurveDef;
    }
    v8 = 2i64;
    do
    {
      varParticleCurveDef = m_curves;
      Postload_ParticleCurveDef(NotAtStart);
      ++m_curves;
      --v8;
    }
    while ( v8 );
    ++i;
    varParticleCurveDef = v6;
  }
}

/*
==============
Postload_ParticleModuleRotationGraphStream
==============
*/
void Postload_ParticleModuleRotationGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleCurveDef *v5; 
  ParticleCurveDef *m_curves; 
  __int64 v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 42270, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleModuleRotationGraph;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x30ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x30ui64);
      v5 = varParticleCurveDef;
      m_curves = varParticleModuleRotationGraph->m_curves;
      g_streamPosGlob.pos += 48;
      varParticleCurveDef = varParticleModuleRotationGraph->m_curves;
      if ( varParticleModuleRotationGraph->m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, varParticleModuleRotationGraph->m_curves, 0x20ui64);
        m_curves = varParticleCurveDef;
      }
      v7 = 2i64;
      do
      {
        varParticleCurveDef = m_curves;
        Postload_ParticleCurveDef(NotAtStart);
        ++m_curves;
        --v7;
      }
      while ( v7 );
      pos = g_streamPosGlob.pos;
      varParticleModuleRotationGraph = (ParticleModuleRotationGraph *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varParticleCurveDef = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleScaleByDistance
==============
*/
void Postload_ParticleModuleScaleByDistance(const DBStreamStart streamStart)
{
  ParticleCurveDef *v2; 
  ParticleCurveDef *m_curves; 
  __int64 v4; 

  if ( streamStart != (varParticleModuleScaleByDistance != (ParticleModuleScaleByDistance *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleScaleByDistance, 0x40ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x40ui64);
  v2 = varParticleCurveDef;
  m_curves = varParticleModuleScaleByDistance->m_curves;
  varParticleCurveDef = varParticleModuleScaleByDistance->m_curves;
  if ( varParticleModuleScaleByDistance->m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
  {
    DB_PatchMem_ValidatePostloadStream(NotAtStart, varParticleModuleScaleByDistance->m_curves, 0x20ui64);
    m_curves = varParticleCurveDef;
  }
  v4 = 2i64;
  do
  {
    varParticleCurveDef = m_curves;
    Postload_ParticleCurveDef(NotAtStart);
    ++m_curves;
    --v4;
  }
  while ( v4 );
  varParticleCurveDef = v2;
}

/*
==============
Postload_ParticleModuleScaleByDistanceArray
==============
*/
void Postload_ParticleModuleScaleByDistanceArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleScaleByDistance *i; 
  unsigned __int8 *pos; 
  ParticleModuleScaleByDistance *v5; 
  ParticleCurveDef *v6; 
  ParticleCurveDef *m_curves; 
  __int64 v8; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModuleScaleByDistance, count << 6);
  for ( i = varParticleModuleScaleByDistance; v2; --v2 )
  {
    pos = g_streamPosGlob.pos;
    v5 = i;
    varParticleModuleScaleByDistance = i;
    if ( i == (ParticleModuleScaleByDistance *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x40ui64);
      pos = g_streamPosGlob.pos;
      v5 = varParticleModuleScaleByDistance;
    }
    v6 = varParticleCurveDef;
    m_curves = v5->m_curves;
    varParticleCurveDef = m_curves;
    if ( m_curves == (ParticleCurveDef *)pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, m_curves, 0x20ui64);
      m_curves = varParticleCurveDef;
    }
    v8 = 2i64;
    do
    {
      varParticleCurveDef = m_curves;
      Postload_ParticleCurveDef(NotAtStart);
      ++m_curves;
      --v8;
    }
    while ( v8 );
    ++i;
    varParticleCurveDef = v6;
  }
}

/*
==============
Postload_ParticleModuleScaleByDistanceStream
==============
*/
void Postload_ParticleModuleScaleByDistanceStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleCurveDef *v5; 
  ParticleCurveDef *m_curves; 
  __int64 v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 42606, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleModuleScaleByDistance;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x40ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x40ui64);
      v5 = varParticleCurveDef;
      m_curves = varParticleModuleScaleByDistance->m_curves;
      g_streamPosGlob.pos += 64;
      varParticleCurveDef = varParticleModuleScaleByDistance->m_curves;
      if ( varParticleModuleScaleByDistance->m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, varParticleModuleScaleByDistance->m_curves, 0x20ui64);
        m_curves = varParticleCurveDef;
      }
      v7 = 2i64;
      do
      {
        varParticleCurveDef = m_curves;
        Postload_ParticleCurveDef(NotAtStart);
        ++m_curves;
        --v7;
      }
      while ( v7 );
      pos = g_streamPosGlob.pos;
      varParticleModuleScaleByDistance = (ParticleModuleScaleByDistance *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varParticleCurveDef = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleShaderGraph
==============
*/
void Postload_ParticleModuleShaderGraph(const DBStreamStart streamStart)
{
  ParticleCurveDef *v2; 
  ParticleCurveDef *m_curves; 
  __int64 v4; 

  if ( streamStart != (varParticleModuleShaderGraph != (ParticleModuleShaderGraph *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleShaderGraph, 0xD0ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0xD0ui64);
  v2 = varParticleCurveDef;
  m_curves = varParticleModuleShaderGraph->m_curves;
  varParticleCurveDef = varParticleModuleShaderGraph->m_curves;
  if ( varParticleModuleShaderGraph->m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
  {
    DB_PatchMem_ValidatePostloadStream(NotAtStart, varParticleModuleShaderGraph->m_curves, 0xC0ui64);
    m_curves = varParticleCurveDef;
  }
  v4 = 12i64;
  do
  {
    varParticleCurveDef = m_curves;
    Postload_ParticleCurveDef(NotAtStart);
    ++m_curves;
    --v4;
  }
  while ( v4 );
  varParticleCurveDef = v2;
}

/*
==============
Postload_ParticleModuleShaderGraphArray
==============
*/
void Postload_ParticleModuleShaderGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleShaderGraph *i; 
  unsigned __int8 *pos; 
  ParticleModuleShaderGraph *v5; 
  ParticleCurveDef *v6; 
  ParticleCurveDef *m_curves; 
  __int64 v8; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModuleShaderGraph, 208 * count);
  for ( i = varParticleModuleShaderGraph; v2; --v2 )
  {
    pos = g_streamPosGlob.pos;
    v5 = i;
    varParticleModuleShaderGraph = i;
    if ( i == (ParticleModuleShaderGraph *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0xD0ui64);
      pos = g_streamPosGlob.pos;
      v5 = varParticleModuleShaderGraph;
    }
    v6 = varParticleCurveDef;
    m_curves = v5->m_curves;
    varParticleCurveDef = m_curves;
    if ( m_curves == (ParticleCurveDef *)pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, m_curves, 0xC0ui64);
      m_curves = varParticleCurveDef;
    }
    v8 = 12i64;
    do
    {
      varParticleCurveDef = m_curves;
      Postload_ParticleCurveDef(NotAtStart);
      ++m_curves;
      --v8;
    }
    while ( v8 );
    ++i;
    varParticleCurveDef = v6;
  }
}

/*
==============
Postload_ParticleModuleShaderGraphStream
==============
*/
void Postload_ParticleModuleShaderGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleCurveDef *v5; 
  ParticleCurveDef *m_curves; 
  __int64 v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 40820, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleModuleShaderGraph;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0xD0ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0xD0ui64);
      v5 = varParticleCurveDef;
      m_curves = varParticleModuleShaderGraph->m_curves;
      g_streamPosGlob.pos += 208;
      varParticleCurveDef = varParticleModuleShaderGraph->m_curves;
      if ( varParticleModuleShaderGraph->m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, varParticleModuleShaderGraph->m_curves, 0xC0ui64);
        m_curves = varParticleCurveDef;
      }
      v7 = 12i64;
      do
      {
        varParticleCurveDef = m_curves;
        Postload_ParticleCurveDef(NotAtStart);
        ++m_curves;
        --v7;
      }
      while ( v7 );
      pos = g_streamPosGlob.pos;
      varParticleModuleShaderGraph = (ParticleModuleShaderGraph *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varParticleCurveDef = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleSizeGraph
==============
*/
void Postload_ParticleModuleSizeGraph(const DBStreamStart streamStart)
{
  ParticleCurveDef *v2; 
  ParticleCurveDef *m_curves; 
  __int64 v4; 

  if ( streamStart != (varParticleModuleSizeGraph != (ParticleModuleSizeGraph *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleSizeGraph, 0x90ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x90ui64);
  v2 = varParticleCurveDef;
  m_curves = varParticleModuleSizeGraph->m_curves;
  varParticleCurveDef = varParticleModuleSizeGraph->m_curves;
  if ( varParticleModuleSizeGraph->m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
  {
    DB_PatchMem_ValidatePostloadStream(NotAtStart, varParticleModuleSizeGraph->m_curves, 0x60ui64);
    m_curves = varParticleCurveDef;
  }
  v4 = 6i64;
  do
  {
    varParticleCurveDef = m_curves;
    Postload_ParticleCurveDef(NotAtStart);
    ++m_curves;
    --v4;
  }
  while ( v4 );
  varParticleCurveDef = v2;
}

/*
==============
Postload_ParticleModuleSizeGraphArray
==============
*/
void Postload_ParticleModuleSizeGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleSizeGraph *i; 
  unsigned __int8 *pos; 
  ParticleModuleSizeGraph *v5; 
  ParticleCurveDef *v6; 
  ParticleCurveDef *m_curves; 
  __int64 v8; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModuleSizeGraph, 144 * count);
  for ( i = varParticleModuleSizeGraph; v2; --v2 )
  {
    pos = g_streamPosGlob.pos;
    v5 = i;
    varParticleModuleSizeGraph = i;
    if ( i == (ParticleModuleSizeGraph *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x90ui64);
      pos = g_streamPosGlob.pos;
      v5 = varParticleModuleSizeGraph;
    }
    v6 = varParticleCurveDef;
    m_curves = v5->m_curves;
    varParticleCurveDef = m_curves;
    if ( m_curves == (ParticleCurveDef *)pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, m_curves, 0x60ui64);
      m_curves = varParticleCurveDef;
    }
    v8 = 6i64;
    do
    {
      varParticleCurveDef = m_curves;
      Postload_ParticleCurveDef(NotAtStart);
      ++m_curves;
      --v8;
    }
    while ( v8 );
    ++i;
    varParticleCurveDef = v6;
  }
}

/*
==============
Postload_ParticleModuleSizeGraphStream
==============
*/
void Postload_ParticleModuleSizeGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleCurveDef *v5; 
  ParticleCurveDef *m_curves; 
  __int64 v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 42797, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleModuleSizeGraph;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x90ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x90ui64);
      v5 = varParticleCurveDef;
      m_curves = varParticleModuleSizeGraph->m_curves;
      g_streamPosGlob.pos += 144;
      varParticleCurveDef = varParticleModuleSizeGraph->m_curves;
      if ( varParticleModuleSizeGraph->m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, varParticleModuleSizeGraph->m_curves, 0x60ui64);
        m_curves = varParticleCurveDef;
      }
      v7 = 6i64;
      do
      {
        varParticleCurveDef = m_curves;
        Postload_ParticleCurveDef(NotAtStart);
        ++m_curves;
        --v7;
      }
      while ( v7 );
      pos = g_streamPosGlob.pos;
      varParticleModuleSizeGraph = (ParticleModuleSizeGraph *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varParticleCurveDef = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleSizeLerp
==============
*/
void Postload_ParticleModuleSizeLerp(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleModuleSizeLerp != (ParticleModuleSizeLerp *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleSizeLerp, 0x30ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x30ui64);
}

/*
==============
Postload_ParticleModuleSizeLerpArray
==============
*/
void Postload_ParticleModuleSizeLerpArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleModuleSizeLerp, 48 * count);
}

/*
==============
Postload_ParticleModuleSizeLerpStream
==============
*/
void Postload_ParticleModuleSizeLerpStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleModuleSizeLerp *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 42942, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleModuleSizeLerp;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleModuleSizeLerp *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x30ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x30ui64);
      pos = g_streamPosGlob.pos + 48;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleModuleSizeLerp *)pos;
      varParticleModuleSizeLerp = (ParticleModuleSizeLerp *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleTemperatureGraph
==============
*/
void Postload_ParticleModuleTemperatureGraph(const DBStreamStart streamStart)
{
  ParticleCurveDef *v2; 
  ParticleCurveDef *m_curves; 
  __int64 v4; 

  if ( streamStart != (varParticleModuleTemperatureGraph != (ParticleModuleTemperatureGraph *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleTemperatureGraph, 0x30ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x30ui64);
  v2 = varParticleCurveDef;
  m_curves = varParticleModuleTemperatureGraph->m_curves;
  varParticleCurveDef = varParticleModuleTemperatureGraph->m_curves;
  if ( varParticleModuleTemperatureGraph->m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
  {
    DB_PatchMem_ValidatePostloadStream(NotAtStart, varParticleModuleTemperatureGraph->m_curves, 0x20ui64);
    m_curves = varParticleCurveDef;
  }
  v4 = 2i64;
  do
  {
    varParticleCurveDef = m_curves;
    Postload_ParticleCurveDef(NotAtStart);
    ++m_curves;
    --v4;
  }
  while ( v4 );
  varParticleCurveDef = v2;
}

/*
==============
Postload_ParticleModuleTemperatureGraphArray
==============
*/
void Postload_ParticleModuleTemperatureGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleTemperatureGraph *i; 
  unsigned __int8 *pos; 
  ParticleModuleTemperatureGraph *v5; 
  ParticleCurveDef *v6; 
  ParticleCurveDef *m_curves; 
  __int64 v8; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModuleTemperatureGraph, 48 * count);
  for ( i = varParticleModuleTemperatureGraph; v2; --v2 )
  {
    pos = g_streamPosGlob.pos;
    v5 = i;
    varParticleModuleTemperatureGraph = i;
    if ( i == (ParticleModuleTemperatureGraph *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x30ui64);
      pos = g_streamPosGlob.pos;
      v5 = varParticleModuleTemperatureGraph;
    }
    v6 = varParticleCurveDef;
    m_curves = v5->m_curves;
    varParticleCurveDef = m_curves;
    if ( m_curves == (ParticleCurveDef *)pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, m_curves, 0x20ui64);
      m_curves = varParticleCurveDef;
    }
    v8 = 2i64;
    do
    {
      varParticleCurveDef = m_curves;
      Postload_ParticleCurveDef(NotAtStart);
      ++m_curves;
      --v8;
    }
    while ( v8 );
    ++i;
    varParticleCurveDef = v6;
  }
}

/*
==============
Postload_ParticleModuleTemperatureGraphStream
==============
*/
void Postload_ParticleModuleTemperatureGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleCurveDef *v5; 
  ParticleCurveDef *m_curves; 
  __int64 v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 41499, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleModuleTemperatureGraph;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x30ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x30ui64);
      v5 = varParticleCurveDef;
      m_curves = varParticleModuleTemperatureGraph->m_curves;
      g_streamPosGlob.pos += 48;
      varParticleCurveDef = varParticleModuleTemperatureGraph->m_curves;
      if ( varParticleModuleTemperatureGraph->m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, varParticleModuleTemperatureGraph->m_curves, 0x20ui64);
        m_curves = varParticleCurveDef;
      }
      v7 = 2i64;
      do
      {
        varParticleCurveDef = m_curves;
        Postload_ParticleCurveDef(NotAtStart);
        ++m_curves;
        --v7;
      }
      while ( v7 );
      pos = g_streamPosGlob.pos;
      varParticleModuleTemperatureGraph = (ParticleModuleTemperatureGraph *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varParticleCurveDef = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleTestAge
==============
*/
void Postload_ParticleModuleTestAge(const DBStreamStart streamStart)
{
  ParticleModuleTestEventHandlerData *v2; 
  ParticleModuleTestEventHandlerData *p_m_eventHandlerData; 
  ParticleLinkedAssetListDef *v4; 

  if ( streamStart != (varParticleModuleTestAge != (ParticleModuleTestAge *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleTestAge, 0x80ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x80ui64);
  v2 = varParticleModuleTestEventHandlerData;
  p_m_eventHandlerData = &varParticleModuleTestAge->m_eventHandlerData;
  varParticleModuleTestEventHandlerData = &varParticleModuleTestAge->m_eventHandlerData;
  if ( &varParticleModuleTestAge->m_eventHandlerData == (ParticleModuleTestEventHandlerData *)g_streamPosGlob.pos )
  {
    DB_PatchMem_ValidatePostloadStream(NotAtStart, &varParticleModuleTestAge->m_eventHandlerData, 0x20ui64);
    p_m_eventHandlerData = varParticleModuleTestEventHandlerData;
  }
  v4 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &p_m_eventHandlerData->m_linkedAssetList;
  Postload_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v4;
  varParticleModuleTestEventHandlerData = v2;
}

/*
==============
Postload_ParticleModuleTestAgeArray
==============
*/
void Postload_ParticleModuleTestAgeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleTestAge *i; 
  unsigned __int8 *pos; 
  ParticleModuleTestAge *v5; 
  ParticleModuleTestEventHandlerData *v6; 
  ParticleModuleTestEventHandlerData *p_m_eventHandlerData; 
  ParticleLinkedAssetListDef *v8; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModuleTestAge, count << 7);
  for ( i = varParticleModuleTestAge; v2; --v2 )
  {
    pos = g_streamPosGlob.pos;
    v5 = i;
    varParticleModuleTestAge = i;
    if ( i == (ParticleModuleTestAge *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x80ui64);
      v5 = varParticleModuleTestAge;
      pos = g_streamPosGlob.pos;
    }
    v6 = varParticleModuleTestEventHandlerData;
    p_m_eventHandlerData = &v5->m_eventHandlerData;
    varParticleModuleTestEventHandlerData = p_m_eventHandlerData;
    if ( p_m_eventHandlerData == (ParticleModuleTestEventHandlerData *)pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, p_m_eventHandlerData, 0x20ui64);
      p_m_eventHandlerData = varParticleModuleTestEventHandlerData;
    }
    v8 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &p_m_eventHandlerData->m_linkedAssetList;
    Postload_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v8;
    varParticleModuleTestEventHandlerData = v6;
  }
}

/*
==============
Postload_ParticleModuleTestAgeStream
==============
*/
void Postload_ParticleModuleTestAgeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleModuleTestEventHandlerData *v5; 
  ParticleModuleTestEventHandlerData *p_m_eventHandlerData; 
  ParticleLinkedAssetListDef *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 43660, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleModuleTestAge;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x80ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x80ui64);
      v5 = varParticleModuleTestEventHandlerData;
      p_m_eventHandlerData = &varParticleModuleTestAge->m_eventHandlerData;
      g_streamPosGlob.pos += 128;
      varParticleModuleTestEventHandlerData = &varParticleModuleTestAge->m_eventHandlerData;
      if ( &varParticleModuleTestAge->m_eventHandlerData == (ParticleModuleTestEventHandlerData *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, &varParticleModuleTestAge->m_eventHandlerData, 0x20ui64);
        p_m_eventHandlerData = varParticleModuleTestEventHandlerData;
      }
      v7 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &p_m_eventHandlerData->m_linkedAssetList;
      Postload_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleTestAge = (ParticleModuleTestAge *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v7;
      varParticleModuleTestEventHandlerData = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleTestBirth
==============
*/
void Postload_ParticleModuleTestBirth(const DBStreamStart streamStart)
{
  ParticleModuleTestEventHandlerData *v2; 
  ParticleModuleTestEventHandlerData *p_m_eventHandlerData; 
  ParticleLinkedAssetListDef *v4; 

  if ( streamStart != (varParticleModuleTestBirth != (ParticleModuleTestBirth *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleTestBirth, 0x70ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x70ui64);
  v2 = varParticleModuleTestEventHandlerData;
  p_m_eventHandlerData = &varParticleModuleTestBirth->m_eventHandlerData;
  varParticleModuleTestEventHandlerData = &varParticleModuleTestBirth->m_eventHandlerData;
  if ( &varParticleModuleTestBirth->m_eventHandlerData == (ParticleModuleTestEventHandlerData *)g_streamPosGlob.pos )
  {
    DB_PatchMem_ValidatePostloadStream(NotAtStart, &varParticleModuleTestBirth->m_eventHandlerData, 0x20ui64);
    p_m_eventHandlerData = varParticleModuleTestEventHandlerData;
  }
  v4 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &p_m_eventHandlerData->m_linkedAssetList;
  Postload_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v4;
  varParticleModuleTestEventHandlerData = v2;
}

/*
==============
Postload_ParticleModuleTestBirthArray
==============
*/
void Postload_ParticleModuleTestBirthArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleTestBirth *i; 
  unsigned __int8 *pos; 
  ParticleModuleTestBirth *v5; 
  ParticleModuleTestEventHandlerData *v6; 
  ParticleModuleTestEventHandlerData *p_m_eventHandlerData; 
  ParticleLinkedAssetListDef *v8; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModuleTestBirth, 112 * count);
  for ( i = varParticleModuleTestBirth; v2; --v2 )
  {
    pos = g_streamPosGlob.pos;
    v5 = i;
    varParticleModuleTestBirth = i;
    if ( i == (ParticleModuleTestBirth *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x70ui64);
      v5 = varParticleModuleTestBirth;
      pos = g_streamPosGlob.pos;
    }
    v6 = varParticleModuleTestEventHandlerData;
    p_m_eventHandlerData = &v5->m_eventHandlerData;
    varParticleModuleTestEventHandlerData = p_m_eventHandlerData;
    if ( p_m_eventHandlerData == (ParticleModuleTestEventHandlerData *)pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, p_m_eventHandlerData, 0x20ui64);
      p_m_eventHandlerData = varParticleModuleTestEventHandlerData;
    }
    v8 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &p_m_eventHandlerData->m_linkedAssetList;
    Postload_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v8;
    varParticleModuleTestEventHandlerData = v6;
  }
}

/*
==============
Postload_ParticleModuleTestBirthStream
==============
*/
void Postload_ParticleModuleTestBirthStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleModuleTestEventHandlerData *v5; 
  ParticleModuleTestEventHandlerData *p_m_eventHandlerData; 
  ParticleLinkedAssetListDef *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 43920, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleModuleTestBirth;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x70ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x70ui64);
      v5 = varParticleModuleTestEventHandlerData;
      p_m_eventHandlerData = &varParticleModuleTestBirth->m_eventHandlerData;
      g_streamPosGlob.pos += 112;
      varParticleModuleTestEventHandlerData = &varParticleModuleTestBirth->m_eventHandlerData;
      if ( &varParticleModuleTestBirth->m_eventHandlerData == (ParticleModuleTestEventHandlerData *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, &varParticleModuleTestBirth->m_eventHandlerData, 0x20ui64);
        p_m_eventHandlerData = varParticleModuleTestEventHandlerData;
      }
      v7 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &p_m_eventHandlerData->m_linkedAssetList;
      Postload_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleTestBirth = (ParticleModuleTestBirth *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v7;
      varParticleModuleTestEventHandlerData = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleTestDeath
==============
*/
void Postload_ParticleModuleTestDeath(const DBStreamStart streamStart)
{
  ParticleModuleTestEventHandlerData *v2; 
  ParticleModuleTestEventHandlerData *p_m_eventHandlerData; 
  ParticleLinkedAssetListDef *v4; 

  if ( streamStart != (varParticleModuleTestDeath != (ParticleModuleTestDeath *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleTestDeath, 0x70ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x70ui64);
  v2 = varParticleModuleTestEventHandlerData;
  p_m_eventHandlerData = &varParticleModuleTestDeath->m_eventHandlerData;
  varParticleModuleTestEventHandlerData = &varParticleModuleTestDeath->m_eventHandlerData;
  if ( &varParticleModuleTestDeath->m_eventHandlerData == (ParticleModuleTestEventHandlerData *)g_streamPosGlob.pos )
  {
    DB_PatchMem_ValidatePostloadStream(NotAtStart, &varParticleModuleTestDeath->m_eventHandlerData, 0x20ui64);
    p_m_eventHandlerData = varParticleModuleTestEventHandlerData;
  }
  v4 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &p_m_eventHandlerData->m_linkedAssetList;
  Postload_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v4;
  varParticleModuleTestEventHandlerData = v2;
}

/*
==============
Postload_ParticleModuleTestDeathArray
==============
*/
void Postload_ParticleModuleTestDeathArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleTestDeath *i; 
  unsigned __int8 *pos; 
  ParticleModuleTestDeath *v5; 
  ParticleModuleTestEventHandlerData *v6; 
  ParticleModuleTestEventHandlerData *p_m_eventHandlerData; 
  ParticleLinkedAssetListDef *v8; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModuleTestDeath, 112 * count);
  for ( i = varParticleModuleTestDeath; v2; --v2 )
  {
    pos = g_streamPosGlob.pos;
    v5 = i;
    varParticleModuleTestDeath = i;
    if ( i == (ParticleModuleTestDeath *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x70ui64);
      v5 = varParticleModuleTestDeath;
      pos = g_streamPosGlob.pos;
    }
    v6 = varParticleModuleTestEventHandlerData;
    p_m_eventHandlerData = &v5->m_eventHandlerData;
    varParticleModuleTestEventHandlerData = p_m_eventHandlerData;
    if ( p_m_eventHandlerData == (ParticleModuleTestEventHandlerData *)pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, p_m_eventHandlerData, 0x20ui64);
      p_m_eventHandlerData = varParticleModuleTestEventHandlerData;
    }
    v8 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &p_m_eventHandlerData->m_linkedAssetList;
    Postload_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v8;
    varParticleModuleTestEventHandlerData = v6;
  }
}

/*
==============
Postload_ParticleModuleTestDeathStream
==============
*/
void Postload_ParticleModuleTestDeathStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleModuleTestEventHandlerData *v5; 
  ParticleModuleTestEventHandlerData *p_m_eventHandlerData; 
  ParticleLinkedAssetListDef *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 44180, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleModuleTestDeath;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x70ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x70ui64);
      v5 = varParticleModuleTestEventHandlerData;
      p_m_eventHandlerData = &varParticleModuleTestDeath->m_eventHandlerData;
      g_streamPosGlob.pos += 112;
      varParticleModuleTestEventHandlerData = &varParticleModuleTestDeath->m_eventHandlerData;
      if ( &varParticleModuleTestDeath->m_eventHandlerData == (ParticleModuleTestEventHandlerData *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, &varParticleModuleTestDeath->m_eventHandlerData, 0x20ui64);
        p_m_eventHandlerData = varParticleModuleTestEventHandlerData;
      }
      v7 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &p_m_eventHandlerData->m_linkedAssetList;
      Postload_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleTestDeath = (ParticleModuleTestDeath *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v7;
      varParticleModuleTestEventHandlerData = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleTestEventHandlerData
==============
*/
void Postload_ParticleModuleTestEventHandlerData(const DBStreamStart streamStart)
{
  ParticleLinkedAssetListDef *v2; 

  if ( streamStart != (varParticleModuleTestEventHandlerData != (ParticleModuleTestEventHandlerData *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleTestEventHandlerData, 0x20ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x20ui64);
  v2 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
  Postload_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v2;
}

/*
==============
Postload_ParticleModuleTestEventHandlerDataArray
==============
*/
void Postload_ParticleModuleTestEventHandlerDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleTestEventHandlerData *i; 
  ParticleModuleTestEventHandlerData *v4; 
  ParticleLinkedAssetListDef *v5; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModuleTestEventHandlerData, 32 * count);
  for ( i = varParticleModuleTestEventHandlerData; v2; --v2 )
  {
    v4 = i;
    varParticleModuleTestEventHandlerData = i;
    if ( i == (ParticleModuleTestEventHandlerData *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x20ui64);
      v4 = varParticleModuleTestEventHandlerData;
    }
    v5 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &v4->m_linkedAssetList;
    Postload_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v5;
  }
}

/*
==============
Postload_ParticleModuleTestEventHandlerDataStream
==============
*/
void Postload_ParticleModuleTestEventHandlerDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleLinkedAssetListDef *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 43377, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleModuleTestEventHandlerData;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x20ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x20ui64);
      v5 = varParticleLinkedAssetListDef;
      g_streamPosGlob.pos += 32;
      varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
      Postload_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleTestEventHandlerData = (ParticleModuleTestEventHandlerData *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleTestGravity
==============
*/
void Postload_ParticleModuleTestGravity(const DBStreamStart streamStart)
{
  ParticleModuleTestEventHandlerData *v2; 
  ParticleModuleTestEventHandlerData *p_m_eventHandlerData; 
  ParticleLinkedAssetListDef *v4; 

  if ( streamStart != (varParticleModuleTestGravity != (ParticleModuleTestGravity *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleTestGravity, 0x80ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x80ui64);
  v2 = varParticleModuleTestEventHandlerData;
  p_m_eventHandlerData = &varParticleModuleTestGravity->m_eventHandlerData;
  varParticleModuleTestEventHandlerData = &varParticleModuleTestGravity->m_eventHandlerData;
  if ( &varParticleModuleTestGravity->m_eventHandlerData == (ParticleModuleTestEventHandlerData *)g_streamPosGlob.pos )
  {
    DB_PatchMem_ValidatePostloadStream(NotAtStart, &varParticleModuleTestGravity->m_eventHandlerData, 0x20ui64);
    p_m_eventHandlerData = varParticleModuleTestEventHandlerData;
  }
  v4 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &p_m_eventHandlerData->m_linkedAssetList;
  Postload_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v4;
  varParticleModuleTestEventHandlerData = v2;
}

/*
==============
Postload_ParticleModuleTestGravityArray
==============
*/
void Postload_ParticleModuleTestGravityArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleTestGravity *i; 
  unsigned __int8 *pos; 
  ParticleModuleTestGravity *v5; 
  ParticleModuleTestEventHandlerData *v6; 
  ParticleModuleTestEventHandlerData *p_m_eventHandlerData; 
  ParticleLinkedAssetListDef *v8; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModuleTestGravity, count << 7);
  for ( i = varParticleModuleTestGravity; v2; --v2 )
  {
    pos = g_streamPosGlob.pos;
    v5 = i;
    varParticleModuleTestGravity = i;
    if ( i == (ParticleModuleTestGravity *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x80ui64);
      v5 = varParticleModuleTestGravity;
      pos = g_streamPosGlob.pos;
    }
    v6 = varParticleModuleTestEventHandlerData;
    p_m_eventHandlerData = &v5->m_eventHandlerData;
    varParticleModuleTestEventHandlerData = p_m_eventHandlerData;
    if ( p_m_eventHandlerData == (ParticleModuleTestEventHandlerData *)pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, p_m_eventHandlerData, 0x20ui64);
      p_m_eventHandlerData = varParticleModuleTestEventHandlerData;
    }
    v8 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &p_m_eventHandlerData->m_linkedAssetList;
    Postload_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v8;
    varParticleModuleTestEventHandlerData = v6;
  }
}

/*
==============
Postload_ParticleModuleTestGravityStream
==============
*/
void Postload_ParticleModuleTestGravityStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleModuleTestEventHandlerData *v5; 
  ParticleModuleTestEventHandlerData *p_m_eventHandlerData; 
  ParticleLinkedAssetListDef *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 44517, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleModuleTestGravity;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x80ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x80ui64);
      v5 = varParticleModuleTestEventHandlerData;
      p_m_eventHandlerData = &varParticleModuleTestGravity->m_eventHandlerData;
      g_streamPosGlob.pos += 128;
      varParticleModuleTestEventHandlerData = &varParticleModuleTestGravity->m_eventHandlerData;
      if ( &varParticleModuleTestGravity->m_eventHandlerData == (ParticleModuleTestEventHandlerData *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, &varParticleModuleTestGravity->m_eventHandlerData, 0x20ui64);
        p_m_eventHandlerData = varParticleModuleTestEventHandlerData;
      }
      v7 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &p_m_eventHandlerData->m_linkedAssetList;
      Postload_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleTestGravity = (ParticleModuleTestGravity *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v7;
      varParticleModuleTestEventHandlerData = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleTestImpact
==============
*/
void Postload_ParticleModuleTestImpact(const DBStreamStart streamStart)
{
  ParticleModuleTestEventHandlerData *v2; 
  ParticleModuleTestEventHandlerData *p_m_eventHandlerData; 
  ParticleLinkedAssetListDef *v4; 

  if ( streamStart != (varParticleModuleTestImpact != (ParticleModuleTestImpact *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleTestImpact, 0x80ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x80ui64);
  v2 = varParticleModuleTestEventHandlerData;
  p_m_eventHandlerData = &varParticleModuleTestImpact->m_eventHandlerData;
  varParticleModuleTestEventHandlerData = &varParticleModuleTestImpact->m_eventHandlerData;
  if ( &varParticleModuleTestImpact->m_eventHandlerData == (ParticleModuleTestEventHandlerData *)g_streamPosGlob.pos )
  {
    DB_PatchMem_ValidatePostloadStream(NotAtStart, &varParticleModuleTestImpact->m_eventHandlerData, 0x20ui64);
    p_m_eventHandlerData = varParticleModuleTestEventHandlerData;
  }
  v4 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &p_m_eventHandlerData->m_linkedAssetList;
  Postload_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v4;
  varParticleModuleTestEventHandlerData = v2;
}

/*
==============
Postload_ParticleModuleTestImpactArray
==============
*/
void Postload_ParticleModuleTestImpactArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleTestImpact *i; 
  unsigned __int8 *pos; 
  ParticleModuleTestImpact *v5; 
  ParticleModuleTestEventHandlerData *v6; 
  ParticleModuleTestEventHandlerData *p_m_eventHandlerData; 
  ParticleLinkedAssetListDef *v8; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModuleTestImpact, count << 7);
  for ( i = varParticleModuleTestImpact; v2; --v2 )
  {
    pos = g_streamPosGlob.pos;
    v5 = i;
    varParticleModuleTestImpact = i;
    if ( i == (ParticleModuleTestImpact *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x80ui64);
      v5 = varParticleModuleTestImpact;
      pos = g_streamPosGlob.pos;
    }
    v6 = varParticleModuleTestEventHandlerData;
    p_m_eventHandlerData = &v5->m_eventHandlerData;
    varParticleModuleTestEventHandlerData = p_m_eventHandlerData;
    if ( p_m_eventHandlerData == (ParticleModuleTestEventHandlerData *)pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, p_m_eventHandlerData, 0x20ui64);
      p_m_eventHandlerData = varParticleModuleTestEventHandlerData;
    }
    v8 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &p_m_eventHandlerData->m_linkedAssetList;
    Postload_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v8;
    varParticleModuleTestEventHandlerData = v6;
  }
}

/*
==============
Postload_ParticleModuleTestImpactStream
==============
*/
void Postload_ParticleModuleTestImpactStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleModuleTestEventHandlerData *v5; 
  ParticleModuleTestEventHandlerData *p_m_eventHandlerData; 
  ParticleLinkedAssetListDef *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 44854, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleModuleTestImpact;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x80ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x80ui64);
      v5 = varParticleModuleTestEventHandlerData;
      p_m_eventHandlerData = &varParticleModuleTestImpact->m_eventHandlerData;
      g_streamPosGlob.pos += 128;
      varParticleModuleTestEventHandlerData = &varParticleModuleTestImpact->m_eventHandlerData;
      if ( &varParticleModuleTestImpact->m_eventHandlerData == (ParticleModuleTestEventHandlerData *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, &varParticleModuleTestImpact->m_eventHandlerData, 0x20ui64);
        p_m_eventHandlerData = varParticleModuleTestEventHandlerData;
      }
      v7 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &p_m_eventHandlerData->m_linkedAssetList;
      Postload_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleTestImpact = (ParticleModuleTestImpact *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v7;
      varParticleModuleTestEventHandlerData = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleTestPos
==============
*/
void Postload_ParticleModuleTestPos(const DBStreamStart streamStart)
{
  ParticleModuleTestEventHandlerData *v2; 
  ParticleModuleTestEventHandlerData *p_m_eventHandlerData; 
  ParticleLinkedAssetListDef *v4; 

  if ( streamStart != (varParticleModuleTestPos != (ParticleModuleTestPos *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleTestPos, 0x80ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x80ui64);
  v2 = varParticleModuleTestEventHandlerData;
  p_m_eventHandlerData = &varParticleModuleTestPos->m_eventHandlerData;
  varParticleModuleTestEventHandlerData = &varParticleModuleTestPos->m_eventHandlerData;
  if ( &varParticleModuleTestPos->m_eventHandlerData == (ParticleModuleTestEventHandlerData *)g_streamPosGlob.pos )
  {
    DB_PatchMem_ValidatePostloadStream(NotAtStart, &varParticleModuleTestPos->m_eventHandlerData, 0x20ui64);
    p_m_eventHandlerData = varParticleModuleTestEventHandlerData;
  }
  v4 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &p_m_eventHandlerData->m_linkedAssetList;
  Postload_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v4;
  varParticleModuleTestEventHandlerData = v2;
}

/*
==============
Postload_ParticleModuleTestPosArray
==============
*/
void Postload_ParticleModuleTestPosArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleTestPos *i; 
  unsigned __int8 *pos; 
  ParticleModuleTestPos *v5; 
  ParticleModuleTestEventHandlerData *v6; 
  ParticleModuleTestEventHandlerData *p_m_eventHandlerData; 
  ParticleLinkedAssetListDef *v8; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModuleTestPos, count << 7);
  for ( i = varParticleModuleTestPos; v2; --v2 )
  {
    pos = g_streamPosGlob.pos;
    v5 = i;
    varParticleModuleTestPos = i;
    if ( i == (ParticleModuleTestPos *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x80ui64);
      v5 = varParticleModuleTestPos;
      pos = g_streamPosGlob.pos;
    }
    v6 = varParticleModuleTestEventHandlerData;
    p_m_eventHandlerData = &v5->m_eventHandlerData;
    varParticleModuleTestEventHandlerData = p_m_eventHandlerData;
    if ( p_m_eventHandlerData == (ParticleModuleTestEventHandlerData *)pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, p_m_eventHandlerData, 0x20ui64);
      p_m_eventHandlerData = varParticleModuleTestEventHandlerData;
    }
    v8 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &p_m_eventHandlerData->m_linkedAssetList;
    Postload_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v8;
    varParticleModuleTestEventHandlerData = v6;
  }
}

/*
==============
Postload_ParticleModuleTestPosStream
==============
*/
void Postload_ParticleModuleTestPosStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleModuleTestEventHandlerData *v5; 
  ParticleModuleTestEventHandlerData *p_m_eventHandlerData; 
  ParticleLinkedAssetListDef *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 45137, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleModuleTestPos;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x80ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x80ui64);
      v5 = varParticleModuleTestEventHandlerData;
      p_m_eventHandlerData = &varParticleModuleTestPos->m_eventHandlerData;
      g_streamPosGlob.pos += 128;
      varParticleModuleTestEventHandlerData = &varParticleModuleTestPos->m_eventHandlerData;
      if ( &varParticleModuleTestPos->m_eventHandlerData == (ParticleModuleTestEventHandlerData *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, &varParticleModuleTestPos->m_eventHandlerData, 0x20ui64);
        p_m_eventHandlerData = varParticleModuleTestEventHandlerData;
      }
      v7 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &p_m_eventHandlerData->m_linkedAssetList;
      Postload_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleTestPos = (ParticleModuleTestPos *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v7;
      varParticleModuleTestEventHandlerData = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleTestTimeInState
==============
*/
void Postload_ParticleModuleTestTimeInState(const DBStreamStart streamStart)
{
  ParticleModuleTestEventHandlerData *v2; 
  ParticleModuleTestEventHandlerData *p_m_eventHandlerData; 
  ParticleLinkedAssetListDef *v4; 

  if ( streamStart != (varParticleModuleTestTimeInState != (ParticleModuleTestTimeInState *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleTestTimeInState, 0x80ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x80ui64);
  v2 = varParticleModuleTestEventHandlerData;
  p_m_eventHandlerData = &varParticleModuleTestTimeInState->m_eventHandlerData;
  varParticleModuleTestEventHandlerData = &varParticleModuleTestTimeInState->m_eventHandlerData;
  if ( &varParticleModuleTestTimeInState->m_eventHandlerData == (ParticleModuleTestEventHandlerData *)g_streamPosGlob.pos )
  {
    DB_PatchMem_ValidatePostloadStream(NotAtStart, &varParticleModuleTestTimeInState->m_eventHandlerData, 0x20ui64);
    p_m_eventHandlerData = varParticleModuleTestEventHandlerData;
  }
  v4 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &p_m_eventHandlerData->m_linkedAssetList;
  Postload_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v4;
  varParticleModuleTestEventHandlerData = v2;
}

/*
==============
Postload_ParticleModuleTestTimeInStateArray
==============
*/
void Postload_ParticleModuleTestTimeInStateArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleTestTimeInState *i; 
  unsigned __int8 *pos; 
  ParticleModuleTestTimeInState *v5; 
  ParticleModuleTestEventHandlerData *v6; 
  ParticleModuleTestEventHandlerData *p_m_eventHandlerData; 
  ParticleLinkedAssetListDef *v8; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModuleTestTimeInState, count << 7);
  for ( i = varParticleModuleTestTimeInState; v2; --v2 )
  {
    pos = g_streamPosGlob.pos;
    v5 = i;
    varParticleModuleTestTimeInState = i;
    if ( i == (ParticleModuleTestTimeInState *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x80ui64);
      v5 = varParticleModuleTestTimeInState;
      pos = g_streamPosGlob.pos;
    }
    v6 = varParticleModuleTestEventHandlerData;
    p_m_eventHandlerData = &v5->m_eventHandlerData;
    varParticleModuleTestEventHandlerData = p_m_eventHandlerData;
    if ( p_m_eventHandlerData == (ParticleModuleTestEventHandlerData *)pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, p_m_eventHandlerData, 0x20ui64);
      p_m_eventHandlerData = varParticleModuleTestEventHandlerData;
    }
    v8 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &p_m_eventHandlerData->m_linkedAssetList;
    Postload_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v8;
    varParticleModuleTestEventHandlerData = v6;
  }
}

/*
==============
Postload_ParticleModuleTestTimeInStateStream
==============
*/
void Postload_ParticleModuleTestTimeInStateStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleModuleTestEventHandlerData *v5; 
  ParticleModuleTestEventHandlerData *p_m_eventHandlerData; 
  ParticleLinkedAssetListDef *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 45420, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleModuleTestTimeInState;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x80ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x80ui64);
      v5 = varParticleModuleTestEventHandlerData;
      p_m_eventHandlerData = &varParticleModuleTestTimeInState->m_eventHandlerData;
      g_streamPosGlob.pos += 128;
      varParticleModuleTestEventHandlerData = &varParticleModuleTestTimeInState->m_eventHandlerData;
      if ( &varParticleModuleTestTimeInState->m_eventHandlerData == (ParticleModuleTestEventHandlerData *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, &varParticleModuleTestTimeInState->m_eventHandlerData, 0x20ui64);
        p_m_eventHandlerData = varParticleModuleTestEventHandlerData;
      }
      v7 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &p_m_eventHandlerData->m_linkedAssetList;
      Postload_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleTestTimeInState = (ParticleModuleTestTimeInState *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v7;
      varParticleModuleTestEventHandlerData = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleType
==============
*/
void Postload_ParticleModuleType(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleModuleType != (ParticleModuleType *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleType, 2ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(2ui64);
}

/*
==============
Postload_ParticleModuleTypeArray
==============
*/
void Postload_ParticleModuleTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleModuleType, 2 * count);
}

/*
==============
Postload_ParticleModuleTypeDef
==============
*/
void Postload_ParticleModuleTypeDef(const DBStreamStart streamStart)
{
  ParticleModuleType moduleType; 
  ParticleModuleInitAtlas *v2; 
  ParticleModuleInitAttributes *v3; 
  ParticleModuleInitBeam *v4; 
  ParticleModuleInitCameraOffset *v5; 
  ParticleModuleInitCloud *v6; 
  ParticleModuleInitDecal *v7; 
  ParticleModuleInitFlare *v8; 
  ParticleModuleInitGeoTrail *v9; 
  ParticleModuleInitKillWrapBox *v10; 
  ParticleModuleInitLightOmni *v11; 
  ParticleModuleInitLightSpot *v12; 
  ParticleModuleInitMaterial *v13; 
  ParticleModuleInitMirrorTexture *v14; 
  ParticleModuleInitModel *v15; 
  ParticleModuleInitOcclusionQuery *v16; 
  ParticleModuleInitOrientedSprite *v17; 
  ParticleModuleInitParticleSim *v18; 
  ParticleModuleInitPlayerFacing *v19; 
  ParticleModuleInitRelativeVelocity *v20; 
  ParticleModuleInitRotation *v21; 
  ParticleModuleInitRotation3D *v22; 
  ParticleModuleInitRunner *v23; 
  ParticleModuleInitSound *v24; 
  ParticleModuleInitSpawn *v25; 
  ParticleModuleInitSpawnShapeBox *v26; 
  ParticleModuleInitSpawnShapeCylinder *v27; 
  ParticleModuleInitSpawnShapeEllipsoid *v28; 
  ParticleModuleInitSpawnShapeMesh *v29; 
  ParticleModuleInitSpawnShapeSphere *v30; 
  ParticleModuleInitTail *v31; 
  ParticleModuleInitVectorField *v32; 
  ParticleModuleInitVolumetric *v33; 
  ParticleModuleInitDismember *v34; 
  ParticleModuleAttractor *v35; 
  ParticleModuleColorGraph *v36; 
  ParticleModuleColorLerp *v37; 
  ParticleModuleEmissionGraph *v38; 
  ParticleModuleEmissiveGraph *v39; 
  ParticleModuleShaderGraph *v40; 
  ParticleModuleForce *v41; 
  ParticleModuleForceDragGraph *v42; 
  ParticleModuleGravity *v43; 
  ParticleModuleIntensityGraph *v44; 
  ParticleModuleTemperatureGraph *v45; 
  ParticleModuleParentVelocityGraph *v46; 
  ParticleModulePhysicsLight *v47; 
  ParticleModulePhysicsRayCast *v48; 
  ParticleModulePositionGraph *v49; 
  ParticleModuleRotationGraph *v50; 
  ParticleModuleRotationGraph3D *v51; 
  ParticleModuleScaleByDistance *v52; 
  ParticleModuleSizeGraph *v53; 
  ParticleModuleSizeLerp *v54; 
  ParticleModuleVelocityGraph *v55; 
  ParticleModuleVectorFieldGraph *v56; 
  ParticleModuleTestAge *v57; 
  ParticleModuleTestBirth *v58; 
  ParticleModuleTestDeath *v59; 
  ParticleModuleTestGravity *v60; 
  ParticleModuleTestImpact *v61; 
  ParticleModuleTestPos *v62; 
  ParticleModuleTestTimeInState *v63; 

  moduleType = varParticleModuleDef->moduleType;
  if ( varParticleModuleDef->moduleType )
  {
    switch ( moduleType )
    {
      case PARTICLE_MODULE_INIT_ATTRIBUTES:
        if ( streamStart == AtStart )
        {
          v3 = varParticleModuleInitAttributes;
          varParticleModuleInitAttributes = (ParticleModuleInitAttributes *)varParticleModuleTypeDef;
          Postload_ParticleModuleInitAttributes(AtStart);
          varParticleModuleInitAttributes = v3;
        }
        break;
      case PARTICLE_MODULE_INIT_BEAM:
        v4 = varParticleModuleInitBeam;
        varParticleModuleInitBeam = (ParticleModuleInitBeam *)varParticleModuleTypeDef;
        Postload_ParticleModuleInitBeam(streamStart);
        varParticleModuleInitBeam = v4;
        break;
      case PARTICLE_MODULE_INIT_CAMERA_OFFSET:
        if ( streamStart == AtStart )
        {
          v5 = varParticleModuleInitCameraOffset;
          varParticleModuleInitCameraOffset = (ParticleModuleInitCameraOffset *)varParticleModuleTypeDef;
          Postload_ParticleModuleInitCameraOffset(AtStart);
          varParticleModuleInitCameraOffset = v5;
        }
        break;
      case PARTICLE_MODULE_INIT_CLOUD:
        if ( streamStart == AtStart )
        {
          v6 = varParticleModuleInitCloud;
          varParticleModuleInitCloud = (ParticleModuleInitCloud *)varParticleModuleTypeDef;
          Postload_ParticleModuleInitCloud(AtStart);
          varParticleModuleInitCloud = v6;
        }
        break;
      case PARTICLE_MODULE_INIT_DECAL:
        v7 = varParticleModuleInitDecal;
        varParticleModuleInitDecal = (ParticleModuleInitDecal *)varParticleModuleTypeDef;
        Postload_ParticleModuleInitDecal(streamStart);
        varParticleModuleInitDecal = v7;
        break;
      case PARTICLE_MODULE_INIT_FLARE:
        v8 = varParticleModuleInitFlare;
        varParticleModuleInitFlare = (ParticleModuleInitFlare *)varParticleModuleTypeDef;
        Postload_ParticleModuleInitFlare(streamStart);
        varParticleModuleInitFlare = v8;
        break;
      case PARTICLE_MODULE_INIT_GEO_TRAIL:
        if ( streamStart == AtStart )
        {
          v9 = varParticleModuleInitGeoTrail;
          varParticleModuleInitGeoTrail = (ParticleModuleInitGeoTrail *)varParticleModuleTypeDef;
          Postload_ParticleModuleInitGeoTrail(AtStart);
          varParticleModuleInitGeoTrail = v9;
        }
        break;
      case PARTICLE_MODULE_INIT_KILL_WRAP_BOX:
        if ( streamStart == AtStart )
        {
          v10 = varParticleModuleInitKillWrapBox;
          varParticleModuleInitKillWrapBox = (ParticleModuleInitKillWrapBox *)varParticleModuleTypeDef;
          Postload_ParticleModuleInitKillWrapBox(AtStart);
          varParticleModuleInitKillWrapBox = v10;
        }
        break;
      case PARTICLE_MODULE_INIT_LIGHT_OMNI:
        v11 = varParticleModuleInitLightOmni;
        varParticleModuleInitLightOmni = (ParticleModuleInitLightOmni *)varParticleModuleTypeDef;
        Postload_ParticleModuleInitLightOmni(streamStart);
        varParticleModuleInitLightOmni = v11;
        break;
      case PARTICLE_MODULE_INIT_LIGHT_SPOT:
        v12 = varParticleModuleInitLightSpot;
        varParticleModuleInitLightSpot = (ParticleModuleInitLightSpot *)varParticleModuleTypeDef;
        Postload_ParticleModuleInitLightSpot(streamStart);
        varParticleModuleInitLightSpot = v12;
        break;
      case PARTICLE_MODULE_INIT_MATERIAL:
        v13 = varParticleModuleInitMaterial;
        varParticleModuleInitMaterial = (ParticleModuleInitMaterial *)varParticleModuleTypeDef;
        Postload_ParticleModuleInitMaterial(streamStart);
        varParticleModuleInitMaterial = v13;
        break;
      case PARTICLE_MODULE_INIT_MIRROR_TEXTURE:
        if ( streamStart == AtStart )
        {
          v14 = varParticleModuleInitMirrorTexture;
          varParticleModuleInitMirrorTexture = (ParticleModuleInitMirrorTexture *)varParticleModuleTypeDef;
          Postload_ParticleModuleInitMirrorTexture(AtStart);
          varParticleModuleInitMirrorTexture = v14;
        }
        break;
      case PARTICLE_MODULE_INIT_MODEL:
        v15 = varParticleModuleInitModel;
        varParticleModuleInitModel = (ParticleModuleInitModel *)varParticleModuleTypeDef;
        Postload_ParticleModuleInitModel(streamStart);
        varParticleModuleInitModel = v15;
        break;
      case PARTICLE_MODULE_INIT_OCCLUSION_QUERY:
        if ( streamStart == AtStart )
        {
          v16 = varParticleModuleInitOcclusionQuery;
          varParticleModuleInitOcclusionQuery = (ParticleModuleInitOcclusionQuery *)varParticleModuleTypeDef;
          Postload_ParticleModuleInitOcclusionQuery(AtStart);
          varParticleModuleInitOcclusionQuery = v16;
        }
        break;
      case PARTICLE_MODULE_INIT_ORIENTED_SPRITE:
        if ( streamStart == AtStart )
        {
          v17 = varParticleModuleInitOrientedSprite;
          varParticleModuleInitOrientedSprite = (ParticleModuleInitOrientedSprite *)varParticleModuleTypeDef;
          Postload_ParticleModuleInitOrientedSprite(AtStart);
          varParticleModuleInitOrientedSprite = v17;
        }
        break;
      case PARTICLE_MODULE_INIT_PARTICLE_SIM:
        v18 = varParticleModuleInitParticleSim;
        varParticleModuleInitParticleSim = (ParticleModuleInitParticleSim *)varParticleModuleTypeDef;
        Postload_ParticleModuleInitParticleSim(streamStart);
        varParticleModuleInitParticleSim = v18;
        break;
      case PARTICLE_MODULE_INIT_PLAYER_FACING:
        if ( streamStart == AtStart )
        {
          v19 = varParticleModuleInitPlayerFacing;
          varParticleModuleInitPlayerFacing = (ParticleModuleInitPlayerFacing *)varParticleModuleTypeDef;
          Postload_ParticleModuleInitPlayerFacing(AtStart);
          varParticleModuleInitPlayerFacing = v19;
        }
        break;
      case PARTICLE_MODULE_INIT_RELATIVE_VELOCITY:
        if ( streamStart == AtStart )
        {
          v20 = varParticleModuleInitRelativeVelocity;
          varParticleModuleInitRelativeVelocity = (ParticleModuleInitRelativeVelocity *)varParticleModuleTypeDef;
          Postload_ParticleModuleInitRelativeVelocity(AtStart);
          varParticleModuleInitRelativeVelocity = v20;
        }
        break;
      case PARTICLE_MODULE_INIT_ROTATION:
        if ( streamStart == AtStart )
        {
          v21 = varParticleModuleInitRotation;
          varParticleModuleInitRotation = (ParticleModuleInitRotation *)varParticleModuleTypeDef;
          Postload_ParticleModuleInitRotation(AtStart);
          varParticleModuleInitRotation = v21;
        }
        break;
      case PARTICLE_MODULE_INIT_ROTATION_3D:
        if ( streamStart == AtStart )
        {
          v22 = varParticleModuleInitRotation3D;
          varParticleModuleInitRotation3D = (ParticleModuleInitRotation3D *)varParticleModuleTypeDef;
          Postload_ParticleModuleInitRotation3D(AtStart);
          varParticleModuleInitRotation3D = v22;
        }
        break;
      case PARTICLE_MODULE_INIT_RUNNER:
        v23 = varParticleModuleInitRunner;
        varParticleModuleInitRunner = (ParticleModuleInitRunner *)varParticleModuleTypeDef;
        Postload_ParticleModuleInitRunner(streamStart);
        varParticleModuleInitRunner = v23;
        break;
      case PARTICLE_MODULE_INIT_SOUND:
        v24 = varParticleModuleInitSound;
        varParticleModuleInitSound = (ParticleModuleInitSound *)varParticleModuleTypeDef;
        Postload_ParticleModuleInitSound(streamStart);
        varParticleModuleInitSound = v24;
        break;
      case PARTICLE_MODULE_INIT_SPAWN:
        v25 = varParticleModuleInitSpawn;
        varParticleModuleInitSpawn = (ParticleModuleInitSpawn *)varParticleModuleTypeDef;
        Postload_ParticleModuleInitSpawn(streamStart);
        varParticleModuleInitSpawn = v25;
        break;
      case PARTICLE_MODULE_INIT_SPAWN_SHAPE_FIRST:
        v26 = varParticleModuleInitSpawnShapeBox;
        varParticleModuleInitSpawnShapeBox = (ParticleModuleInitSpawnShapeBox *)varParticleModuleTypeDef;
        Postload_ParticleModuleInitSpawnShapeBox(streamStart);
        varParticleModuleInitSpawnShapeBox = v26;
        break;
      case PARTICLE_MODULE_INIT_SPAWN_SHAPE_CYLINDER:
        v27 = varParticleModuleInitSpawnShapeCylinder;
        varParticleModuleInitSpawnShapeCylinder = (ParticleModuleInitSpawnShapeCylinder *)varParticleModuleTypeDef;
        Postload_ParticleModuleInitSpawnShapeCylinder(streamStart);
        varParticleModuleInitSpawnShapeCylinder = v27;
        break;
      case PARTICLE_MODULE_INIT_SPAWN_SHAPE_ELLIPSOID:
        v28 = varParticleModuleInitSpawnShapeEllipsoid;
        varParticleModuleInitSpawnShapeEllipsoid = (ParticleModuleInitSpawnShapeEllipsoid *)varParticleModuleTypeDef;
        Postload_ParticleModuleInitSpawnShapeEllipsoid(streamStart);
        varParticleModuleInitSpawnShapeEllipsoid = v28;
        break;
      case PARTICLE_MODULE_INIT_SPAWN_SHAPE_MESH:
        v29 = varParticleModuleInitSpawnShapeMesh;
        varParticleModuleInitSpawnShapeMesh = (ParticleModuleInitSpawnShapeMesh *)varParticleModuleTypeDef;
        Postload_ParticleModuleInitSpawnShapeMesh(streamStart);
        varParticleModuleInitSpawnShapeMesh = v29;
        break;
      case PARTICLE_MODULE_INIT_SPAWN_SHAPE_SPHERE:
        v30 = varParticleModuleInitSpawnShapeSphere;
        varParticleModuleInitSpawnShapeSphere = (ParticleModuleInitSpawnShapeSphere *)varParticleModuleTypeDef;
        Postload_ParticleModuleInitSpawnShapeSphere(streamStart);
        varParticleModuleInitSpawnShapeSphere = v30;
        break;
      case PARTICLE_MODULE_INIT_TAIL:
        if ( streamStart == AtStart )
        {
          v31 = varParticleModuleInitTail;
          varParticleModuleInitTail = (ParticleModuleInitTail *)varParticleModuleTypeDef;
          Postload_ParticleModuleInitTail(AtStart);
          varParticleModuleInitTail = v31;
        }
        break;
      case PARTICLE_MODULE_INIT_VECTOR_FIELD:
        v32 = varParticleModuleInitVectorField;
        varParticleModuleInitVectorField = (ParticleModuleInitVectorField *)varParticleModuleTypeDef;
        Postload_ParticleModuleInitVectorField(streamStart);
        varParticleModuleInitVectorField = v32;
        break;
      case PARTICLE_MODULE_INIT_VOLUMETRIC:
        if ( streamStart == AtStart )
        {
          v33 = varParticleModuleInitVolumetric;
          varParticleModuleInitVolumetric = (ParticleModuleInitVolumetric *)varParticleModuleTypeDef;
          Postload_ParticleModuleInitVolumetric(AtStart);
          varParticleModuleInitVolumetric = v33;
        }
        break;
      case PARTICLE_MODULE_INIT_DISMEMBER:
        if ( streamStart == AtStart )
        {
          v34 = varParticleModuleInitDismember;
          varParticleModuleInitDismember = (ParticleModuleInitDismember *)varParticleModuleTypeDef;
          Postload_ParticleModuleInitDismember(AtStart);
          varParticleModuleInitDismember = v34;
        }
        break;
      case PARTICLE_MODULE_UPDATE_BEGIN:
        if ( streamStart == AtStart )
        {
          v35 = varParticleModuleAttractor;
          varParticleModuleAttractor = (ParticleModuleAttractor *)varParticleModuleTypeDef;
          Postload_ParticleModuleAttractor(AtStart);
          varParticleModuleAttractor = v35;
        }
        break;
      case PARTICLE_MODULE_COLOR_GRAPH:
        v36 = varParticleModuleColorGraph;
        varParticleModuleColorGraph = (ParticleModuleColorGraph *)varParticleModuleTypeDef;
        Postload_ParticleModuleColorGraph(streamStart);
        varParticleModuleColorGraph = v36;
        break;
      case PARTICLE_MODULE_COLOR_LERP:
        if ( streamStart == AtStart )
        {
          v37 = varParticleModuleColorLerp;
          varParticleModuleColorLerp = (ParticleModuleColorLerp *)varParticleModuleTypeDef;
          Postload_ParticleModuleColorLerp(AtStart);
          varParticleModuleColorLerp = v37;
        }
        break;
      case PARTICLE_MODULE_EMISSION_GRAPH:
        v38 = varParticleModuleEmissionGraph;
        varParticleModuleEmissionGraph = (ParticleModuleEmissionGraph *)varParticleModuleTypeDef;
        Postload_ParticleModuleEmissionGraph(streamStart);
        varParticleModuleEmissionGraph = v38;
        break;
      case PARTICLE_MODULE_EMISSIVE_GRAPH:
        v39 = varParticleModuleEmissiveGraph;
        varParticleModuleEmissiveGraph = (ParticleModuleEmissiveGraph *)varParticleModuleTypeDef;
        Postload_ParticleModuleEmissiveGraph(streamStart);
        varParticleModuleEmissiveGraph = v39;
        break;
      case PARTICLE_MODULE_SHADER_GRAPH:
        v40 = varParticleModuleShaderGraph;
        varParticleModuleShaderGraph = (ParticleModuleShaderGraph *)varParticleModuleTypeDef;
        Postload_ParticleModuleShaderGraph(streamStart);
        varParticleModuleShaderGraph = v40;
        break;
      case PARTICLE_MODULE_FORCE:
        if ( streamStart == AtStart )
        {
          v41 = varParticleModuleForce;
          varParticleModuleForce = (ParticleModuleForce *)varParticleModuleTypeDef;
          Postload_ParticleModuleForce(AtStart);
          varParticleModuleForce = v41;
        }
        break;
      case PARTICLE_MODULE_FORCE_DRAG_GRAPH:
        v42 = varParticleModuleForceDragGraph;
        varParticleModuleForceDragGraph = (ParticleModuleForceDragGraph *)varParticleModuleTypeDef;
        Postload_ParticleModuleForceDragGraph(streamStart);
        varParticleModuleForceDragGraph = v42;
        break;
      case PARTICLE_MODULE_GRAVITY:
        if ( streamStart == AtStart )
        {
          v43 = varParticleModuleGravity;
          varParticleModuleGravity = (ParticleModuleGravity *)varParticleModuleTypeDef;
          Postload_ParticleModuleGravity(AtStart);
          varParticleModuleGravity = v43;
        }
        break;
      case PARTICLE_MODULE_INTENSITY_GRAPH:
        v44 = varParticleModuleIntensityGraph;
        varParticleModuleIntensityGraph = (ParticleModuleIntensityGraph *)varParticleModuleTypeDef;
        Postload_ParticleModuleIntensityGraph(streamStart);
        varParticleModuleIntensityGraph = v44;
        break;
      case PARTICLE_MODULE_TEMPERATURE_GRAPH:
        v45 = varParticleModuleTemperatureGraph;
        varParticleModuleTemperatureGraph = (ParticleModuleTemperatureGraph *)varParticleModuleTypeDef;
        Postload_ParticleModuleTemperatureGraph(streamStart);
        varParticleModuleTemperatureGraph = v45;
        break;
      case PARTICLE_MODULE_PARENT_VELOCITY_GRAPH:
        v46 = varParticleModuleParentVelocityGraph;
        varParticleModuleParentVelocityGraph = (ParticleModuleParentVelocityGraph *)varParticleModuleTypeDef;
        Postload_ParticleModuleParentVelocityGraph(streamStart);
        varParticleModuleParentVelocityGraph = v46;
        break;
      case PARTICLE_MODULE_PHYSICS_LIGHT:
        v47 = varParticleModulePhysicsLight;
        varParticleModulePhysicsLight = (ParticleModulePhysicsLight *)varParticleModuleTypeDef;
        Postload_ParticleModulePhysicsLight(streamStart);
        varParticleModulePhysicsLight = v47;
        break;
      case PARTICLE_MODULE_PHYSICS_RAY_CAST:
        if ( streamStart == AtStart )
        {
          v48 = varParticleModulePhysicsRayCast;
          varParticleModulePhysicsRayCast = (ParticleModulePhysicsRayCast *)varParticleModuleTypeDef;
          Postload_ParticleModulePhysicsRayCast(AtStart);
          varParticleModulePhysicsRayCast = v48;
        }
        break;
      case PARTICLE_MODULE_POSITION_GRAPH:
        v49 = varParticleModulePositionGraph;
        varParticleModulePositionGraph = (ParticleModulePositionGraph *)varParticleModuleTypeDef;
        Postload_ParticleModulePositionGraph(streamStart);
        varParticleModulePositionGraph = v49;
        break;
      case PARTICLE_MODULE_ROTATION_GRAPH:
        v50 = varParticleModuleRotationGraph;
        varParticleModuleRotationGraph = (ParticleModuleRotationGraph *)varParticleModuleTypeDef;
        Postload_ParticleModuleRotationGraph(streamStart);
        varParticleModuleRotationGraph = v50;
        break;
      case PARTICLE_MODULE_ROTATION_GRAPH_3D:
        v51 = varParticleModuleRotationGraph3D;
        varParticleModuleRotationGraph3D = (ParticleModuleRotationGraph3D *)varParticleModuleTypeDef;
        Postload_ParticleModuleRotationGraph3D(streamStart);
        varParticleModuleRotationGraph3D = v51;
        break;
      case PARTICLE_MODULE_SCALE_BY_DISTANCE:
        v52 = varParticleModuleScaleByDistance;
        varParticleModuleScaleByDistance = (ParticleModuleScaleByDistance *)varParticleModuleTypeDef;
        Postload_ParticleModuleScaleByDistance(streamStart);
        varParticleModuleScaleByDistance = v52;
        break;
      case PARTICLE_MODULE_SIZE_GRAPH:
        v53 = varParticleModuleSizeGraph;
        varParticleModuleSizeGraph = (ParticleModuleSizeGraph *)varParticleModuleTypeDef;
        Postload_ParticleModuleSizeGraph(streamStart);
        varParticleModuleSizeGraph = v53;
        break;
      case PARTICLE_MODULE_SIZE_LERP:
        if ( streamStart == AtStart )
        {
          v54 = varParticleModuleSizeLerp;
          varParticleModuleSizeLerp = (ParticleModuleSizeLerp *)varParticleModuleTypeDef;
          Postload_ParticleModuleSizeLerp(AtStart);
          varParticleModuleSizeLerp = v54;
        }
        break;
      case PARTICLE_MODULE_VELOCITY_GRAPH:
        v55 = varParticleModuleVelocityGraph;
        varParticleModuleVelocityGraph = (ParticleModuleVelocityGraph *)varParticleModuleTypeDef;
        Postload_ParticleModuleVelocityGraph(streamStart);
        varParticleModuleVelocityGraph = v55;
        break;
      case PARTICLE_MODULE_VECTOR_FIELD_GRAPH:
        v56 = varParticleModuleVectorFieldGraph;
        varParticleModuleVectorFieldGraph = (ParticleModuleVectorFieldGraph *)varParticleModuleTypeDef;
        Postload_ParticleModuleVectorFieldGraph(streamStart);
        varParticleModuleVectorFieldGraph = v56;
        break;
      case PARTICLE_MODULE_TEST_BEGIN:
        v57 = varParticleModuleTestAge;
        varParticleModuleTestAge = (ParticleModuleTestAge *)varParticleModuleTypeDef;
        Postload_ParticleModuleTestAge(streamStart);
        varParticleModuleTestAge = v57;
        break;
      case PARTICLE_MODULE_TEST_BIRTH:
        v58 = varParticleModuleTestBirth;
        varParticleModuleTestBirth = (ParticleModuleTestBirth *)varParticleModuleTypeDef;
        Postload_ParticleModuleTestBirth(streamStart);
        varParticleModuleTestBirth = v58;
        break;
      case PARTICLE_MODULE_TEST_DEATH:
        v59 = varParticleModuleTestDeath;
        varParticleModuleTestDeath = (ParticleModuleTestDeath *)varParticleModuleTypeDef;
        Postload_ParticleModuleTestDeath(streamStart);
        varParticleModuleTestDeath = v59;
        break;
      case PARTICLE_MODULE_TEST_GRAVITY:
        v60 = varParticleModuleTestGravity;
        varParticleModuleTestGravity = (ParticleModuleTestGravity *)varParticleModuleTypeDef;
        Postload_ParticleModuleTestGravity(streamStart);
        varParticleModuleTestGravity = v60;
        break;
      case PARTICLE_MODULE_TEST_IMPACT:
        v61 = varParticleModuleTestImpact;
        varParticleModuleTestImpact = (ParticleModuleTestImpact *)varParticleModuleTypeDef;
        Postload_ParticleModuleTestImpact(streamStart);
        varParticleModuleTestImpact = v61;
        break;
      case PARTICLE_MODULE_TEST_POS:
        v62 = varParticleModuleTestPos;
        varParticleModuleTestPos = (ParticleModuleTestPos *)varParticleModuleTypeDef;
        Postload_ParticleModuleTestPos(streamStart);
        varParticleModuleTestPos = v62;
        break;
      case PARTICLE_MODULE_TEST_TIME_IN_STATE:
        v63 = varParticleModuleTestTimeInState;
        varParticleModuleTestTimeInState = (ParticleModuleTestTimeInState *)varParticleModuleTypeDef;
        Postload_ParticleModuleTestTimeInState(streamStart);
        varParticleModuleTestTimeInState = v63;
        break;
    }
  }
  else
  {
    v2 = varParticleModuleInitAtlas;
    varParticleModuleInitAtlas = (ParticleModuleInitAtlas *)varParticleModuleTypeDef;
    Postload_ParticleModuleInitAtlas(streamStart);
    varParticleModuleInitAtlas = v2;
  }
}

/*
==============
Postload_ParticleModuleTypeDefArray
==============
*/
void Postload_ParticleModuleTypeDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleTypeDef *i; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModuleTypeDef, 224 * count);
  for ( i = varParticleModuleTypeDef; v2; --v2 )
  {
    varParticleModuleTypeDef = i;
    Postload_ParticleModuleTypeDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ParticleModuleTypeDefStream
==============
*/
void Postload_ParticleModuleTypeDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 47263, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  for ( ; count; --count )
  {
    Postload_ParticleModuleTypeDef(AtStart);
    varParticleModuleTypeDef = (ParticleModuleTypeDef *)g_streamPosGlob.pos;
  }
}

/*
==============
Postload_ParticleModuleTypeStream
==============
*/
void Postload_ParticleModuleTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleModuleType *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 29176, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleModuleType;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleModuleType *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 2ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(2ui64);
      pos = g_streamPosGlob.pos + 2;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleModuleType *)pos;
      varParticleModuleType = (ParticleModuleType *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleVectorFieldGraph
==============
*/
void Postload_ParticleModuleVectorFieldGraph(const DBStreamStart streamStart)
{
  ParticleCurveDef *v2; 
  ParticleCurveDef *m_curves; 
  __int64 v4; 

  if ( streamStart != (varParticleModuleVectorFieldGraph != (ParticleModuleVectorFieldGraph *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleVectorFieldGraph, 0x30ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x30ui64);
  v2 = varParticleCurveDef;
  m_curves = varParticleModuleVectorFieldGraph->m_curves;
  varParticleCurveDef = varParticleModuleVectorFieldGraph->m_curves;
  if ( varParticleModuleVectorFieldGraph->m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
  {
    DB_PatchMem_ValidatePostloadStream(NotAtStart, varParticleModuleVectorFieldGraph->m_curves, 0x20ui64);
    m_curves = varParticleCurveDef;
  }
  v4 = 2i64;
  do
  {
    varParticleCurveDef = m_curves;
    Postload_ParticleCurveDef(NotAtStart);
    ++m_curves;
    --v4;
  }
  while ( v4 );
  varParticleCurveDef = v2;
}

/*
==============
Postload_ParticleModuleVectorFieldGraphArray
==============
*/
void Postload_ParticleModuleVectorFieldGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleVectorFieldGraph *i; 
  unsigned __int8 *pos; 
  ParticleModuleVectorFieldGraph *v5; 
  ParticleCurveDef *v6; 
  ParticleCurveDef *m_curves; 
  __int64 v8; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModuleVectorFieldGraph, 48 * count);
  for ( i = varParticleModuleVectorFieldGraph; v2; --v2 )
  {
    pos = g_streamPosGlob.pos;
    v5 = i;
    varParticleModuleVectorFieldGraph = i;
    if ( i == (ParticleModuleVectorFieldGraph *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x30ui64);
      pos = g_streamPosGlob.pos;
      v5 = varParticleModuleVectorFieldGraph;
    }
    v6 = varParticleCurveDef;
    m_curves = v5->m_curves;
    varParticleCurveDef = m_curves;
    if ( m_curves == (ParticleCurveDef *)pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, m_curves, 0x20ui64);
      m_curves = varParticleCurveDef;
    }
    v8 = 2i64;
    do
    {
      varParticleCurveDef = m_curves;
      Postload_ParticleCurveDef(NotAtStart);
      ++m_curves;
      --v8;
    }
    while ( v8 );
    ++i;
    varParticleCurveDef = v6;
  }
}

/*
==============
Postload_ParticleModuleVectorFieldGraphStream
==============
*/
void Postload_ParticleModuleVectorFieldGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleCurveDef *v5; 
  ParticleCurveDef *m_curves; 
  __int64 v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 43255, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleModuleVectorFieldGraph;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x30ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x30ui64);
      v5 = varParticleCurveDef;
      m_curves = varParticleModuleVectorFieldGraph->m_curves;
      g_streamPosGlob.pos += 48;
      varParticleCurveDef = varParticleModuleVectorFieldGraph->m_curves;
      if ( varParticleModuleVectorFieldGraph->m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, varParticleModuleVectorFieldGraph->m_curves, 0x20ui64);
        m_curves = varParticleCurveDef;
      }
      v7 = 2i64;
      do
      {
        varParticleCurveDef = m_curves;
        Postload_ParticleCurveDef(NotAtStart);
        ++m_curves;
        --v7;
      }
      while ( v7 );
      pos = g_streamPosGlob.pos;
      varParticleModuleVectorFieldGraph = (ParticleModuleVectorFieldGraph *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varParticleCurveDef = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleModuleVelocityGraph
==============
*/
void Postload_ParticleModuleVelocityGraph(const DBStreamStart streamStart)
{
  ParticleCurveDef *v2; 
  ParticleCurveDef *m_curves; 
  __int64 v4; 

  if ( streamStart != (varParticleModuleVelocityGraph != (ParticleModuleVelocityGraph *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleModuleVelocityGraph, 0x90ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x90ui64);
  v2 = varParticleCurveDef;
  m_curves = varParticleModuleVelocityGraph->m_curves;
  varParticleCurveDef = varParticleModuleVelocityGraph->m_curves;
  if ( varParticleModuleVelocityGraph->m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
  {
    DB_PatchMem_ValidatePostloadStream(NotAtStart, varParticleModuleVelocityGraph->m_curves, 0x60ui64);
    m_curves = varParticleCurveDef;
  }
  v4 = 6i64;
  do
  {
    varParticleCurveDef = m_curves;
    Postload_ParticleCurveDef(NotAtStart);
    ++m_curves;
    --v4;
  }
  while ( v4 );
  varParticleCurveDef = v2;
}

/*
==============
Postload_ParticleModuleVelocityGraphArray
==============
*/
void Postload_ParticleModuleVelocityGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleVelocityGraph *i; 
  unsigned __int8 *pos; 
  ParticleModuleVelocityGraph *v5; 
  ParticleCurveDef *v6; 
  ParticleCurveDef *m_curves; 
  __int64 v8; 

  v2 = count;
  Postload_Stream(streamStart, varParticleModuleVelocityGraph, 144 * count);
  for ( i = varParticleModuleVelocityGraph; v2; --v2 )
  {
    pos = g_streamPosGlob.pos;
    v5 = i;
    varParticleModuleVelocityGraph = i;
    if ( i == (ParticleModuleVelocityGraph *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x90ui64);
      pos = g_streamPosGlob.pos;
      v5 = varParticleModuleVelocityGraph;
    }
    v6 = varParticleCurveDef;
    m_curves = v5->m_curves;
    varParticleCurveDef = m_curves;
    if ( m_curves == (ParticleCurveDef *)pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, m_curves, 0x60ui64);
      m_curves = varParticleCurveDef;
    }
    v8 = 6i64;
    do
    {
      varParticleCurveDef = m_curves;
      Postload_ParticleCurveDef(NotAtStart);
      ++m_curves;
      --v8;
    }
    while ( v8 );
    ++i;
    varParticleCurveDef = v6;
  }
}

/*
==============
Postload_ParticleModuleVelocityGraphStream
==============
*/
void Postload_ParticleModuleVelocityGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleCurveDef *v5; 
  ParticleCurveDef *m_curves; 
  __int64 v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 43110, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleModuleVelocityGraph;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x90ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x90ui64);
      v5 = varParticleCurveDef;
      m_curves = varParticleModuleVelocityGraph->m_curves;
      g_streamPosGlob.pos += 144;
      varParticleCurveDef = varParticleModuleVelocityGraph->m_curves;
      if ( varParticleModuleVelocityGraph->m_curves == (ParticleCurveDef *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, varParticleModuleVelocityGraph->m_curves, 0x60ui64);
        m_curves = varParticleCurveDef;
      }
      v7 = 6i64;
      do
      {
        varParticleCurveDef = m_curves;
        Postload_ParticleCurveDef(NotAtStart);
        ++m_curves;
        --v7;
      }
      while ( v7 );
      pos = g_streamPosGlob.pos;
      varParticleModuleVelocityGraph = (ParticleModuleVelocityGraph *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varParticleCurveDef = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticlePhaseOptions
==============
*/
void Postload_ParticlePhaseOptions(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticlePhaseOptions != (ParticlePhaseOptions *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticlePhaseOptions, 4ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(4ui64);
}

/*
==============
Postload_ParticlePhaseOptionsArray
==============
*/
void Postload_ParticlePhaseOptionsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticlePhaseOptions, 4 * count);
}

/*
==============
Postload_ParticlePhaseOptionsStream
==============
*/
void Postload_ParticlePhaseOptionsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticlePhaseOptions *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 48644, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticlePhaseOptions;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticlePhaseOptions *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 4ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(4ui64);
      pos = g_streamPosGlob.pos + 4;
      g_streamPosGlob.pos = pos;
      v3 = (ParticlePhaseOptions *)pos;
      varParticlePhaseOptions = (ParticlePhaseOptions *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticlePhysicsFXData
==============
*/
void Postload_ParticlePhysicsFXData(const DBStreamStart streamStart)
{
  PhysicsFXPipeline **v2; 
  PhysicsFXShape **v3; 

  if ( streamStart != (varParticlePhysicsFXData != (ParticlePhysicsFXData *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticlePhysicsFXData, 0x10ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x10ui64);
  v2 = varPhysicsFXPipelinePtr;
  varPhysicsFXPipelinePtr = &varParticlePhysicsFXData->physicsFXPipeline;
  Postload_PhysicsFXPipelinePtr(NotAtStart);
  varPhysicsFXPipelinePtr = v2;
  v3 = varPhysicsFXShapePtr;
  varPhysicsFXShapePtr = &varParticlePhysicsFXData->physicsFXShape;
  Postload_PhysicsFXShapePtr(NotAtStart);
  varPhysicsFXShapePtr = v3;
}

/*
==============
Postload_ParticlePhysicsFXDataArray
==============
*/
void Postload_ParticlePhysicsFXDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticlePhysicsFXData *i; 
  ParticlePhysicsFXData *v4; 
  PhysicsFXPipeline **v5; 
  PhysicsFXShape **v6; 

  v2 = count;
  Postload_Stream(streamStart, varParticlePhysicsFXData, 16 * count);
  for ( i = varParticlePhysicsFXData; v2; --v2 )
  {
    v4 = i;
    varParticlePhysicsFXData = i;
    if ( i == (ParticlePhysicsFXData *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x10ui64);
      v4 = varParticlePhysicsFXData;
    }
    v5 = varPhysicsFXPipelinePtr;
    varPhysicsFXPipelinePtr = &v4->physicsFXPipeline;
    Postload_PhysicsFXPipelinePtr(NotAtStart);
    varPhysicsFXPipelinePtr = v5;
    v6 = varPhysicsFXShapePtr;
    varPhysicsFXShapePtr = &varParticlePhysicsFXData->physicsFXShape;
    Postload_PhysicsFXShapePtr(NotAtStart);
    ++i;
    varPhysicsFXShapePtr = v6;
  }
}

/*
==============
Postload_ParticlePhysicsFXDataStream
==============
*/
void Postload_ParticlePhysicsFXDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  PhysicsFXPipeline **v5; 
  PhysicsFXShape **v6; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 29828, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticlePhysicsFXData;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x10ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x10ui64);
      v5 = varPhysicsFXPipelinePtr;
      g_streamPosGlob.pos += 16;
      varPhysicsFXPipelinePtr = &varParticlePhysicsFXData->physicsFXPipeline;
      Postload_PhysicsFXPipelinePtr(NotAtStart);
      varPhysicsFXPipelinePtr = v5;
      v6 = varPhysicsFXShapePtr;
      varPhysicsFXShapePtr = &varParticlePhysicsFXData->physicsFXShape;
      Postload_PhysicsFXShapePtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticlePhysicsFXData = (ParticlePhysicsFXData *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varPhysicsFXShapePtr = v6;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleRelativeVelocityType
==============
*/
void Postload_ParticleRelativeVelocityType(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleRelativeVelocityType != (ParticleRelativeVelocityType *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleRelativeVelocityType, 4ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(4ui64);
}

/*
==============
Postload_ParticleRelativeVelocityTypeArray
==============
*/
void Postload_ParticleRelativeVelocityTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleRelativeVelocityType, 4 * count);
}

/*
==============
Postload_ParticleRelativeVelocityTypeStream
==============
*/
void Postload_ParticleRelativeVelocityTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleRelativeVelocityType *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 35923, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleRelativeVelocityType;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleRelativeVelocityType *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 4ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(4ui64);
      pos = g_streamPosGlob.pos + 4;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleRelativeVelocityType *)pos;
      varParticleRelativeVelocityType = (ParticleRelativeVelocityType *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleRenderOptions
==============
*/
void Postload_ParticleRenderOptions(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleRenderOptions != (ParticleRenderOptions *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleRenderOptions, 4ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(4ui64);
}

/*
==============
Postload_ParticleRenderOptionsArray
==============
*/
void Postload_ParticleRenderOptionsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleRenderOptions, 4 * count);
}

/*
==============
Postload_ParticleRenderOptionsStream
==============
*/
void Postload_ParticleRenderOptionsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleRenderOptions *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 34125, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleRenderOptions;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleRenderOptions *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 4ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(4ui64);
      pos = g_streamPosGlob.pos + 4;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleRenderOptions *)pos;
      varParticleRenderOptions = (ParticleRenderOptions *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleShaderGraphCurves
==============
*/
void Postload_ParticleShaderGraphCurves(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleShaderGraphCurves != (ParticleShaderGraphCurves *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleShaderGraphCurves, 4ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(4ui64);
}

/*
==============
Postload_ParticleShaderGraphCurvesArray
==============
*/
void Postload_ParticleShaderGraphCurvesArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleShaderGraphCurves, 4 * count);
}

/*
==============
Postload_ParticleShaderGraphCurvesStream
==============
*/
void Postload_ParticleShaderGraphCurvesStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleShaderGraphCurves *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 30421, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleShaderGraphCurves;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleShaderGraphCurves *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 4ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(4ui64);
      pos = g_streamPosGlob.pos + 4;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleShaderGraphCurves *)pos;
      varParticleShaderGraphCurves = (ParticleShaderGraphCurves *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleShaderGraphOptions
==============
*/
void Postload_ParticleShaderGraphOptions(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleShaderGraphOptions != (ParticleShaderGraphOptions *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleShaderGraphOptions, 4ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(4ui64);
}

/*
==============
Postload_ParticleShaderGraphOptionsArray
==============
*/
void Postload_ParticleShaderGraphOptionsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleShaderGraphOptions, 4 * count);
}

/*
==============
Postload_ParticleShaderGraphOptionsStream
==============
*/
void Postload_ParticleShaderGraphOptionsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleShaderGraphOptions *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 34179, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleShaderGraphOptions;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleShaderGraphOptions *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 4ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(4ui64);
      pos = g_streamPosGlob.pos + 4;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleShaderGraphOptions *)pos;
      varParticleShaderGraphOptions = (ParticleShaderGraphOptions *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleSpawnFlags
==============
*/
void Postload_ParticleSpawnFlags(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleSpawnFlags != (ParticleSpawnFlags *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleSpawnFlags, 1ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(1ui64);
}

/*
==============
Postload_ParticleSpawnFlagsArray
==============
*/
void Postload_ParticleSpawnFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleSpawnFlags, count);
}

/*
==============
Postload_ParticleSpawnFlagsStream
==============
*/
void Postload_ParticleSpawnFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleSpawnFlags *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 37216, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleSpawnFlags;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleSpawnFlags *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 1ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(1ui64);
      pos = g_streamPosGlob.pos + 1;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleSpawnFlags *)pos;
      varParticleSpawnFlags = (ParticleSpawnFlags *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleSpawnMeshAssetDef
==============
*/
void Postload_ParticleSpawnMeshAssetDef(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleSpawnMeshAssetDef != (ParticleSpawnMeshAssetDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleSpawnMeshAssetDef, 0x10ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x10ui64);
}

/*
==============
Postload_ParticleSpawnMeshAssetDefArray
==============
*/
void Postload_ParticleSpawnMeshAssetDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleSpawnMeshAssetDef, 16 * count);
}

/*
==============
Postload_ParticleSpawnMeshAssetDefStream
==============
*/
void Postload_ParticleSpawnMeshAssetDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleSpawnMeshAssetDef *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 38456, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleSpawnMeshAssetDef;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleSpawnMeshAssetDef *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x10ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x10ui64);
      pos = g_streamPosGlob.pos + 16;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleSpawnMeshAssetDef *)pos;
      varParticleSpawnMeshAssetDef = (ParticleSpawnMeshAssetDef *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleSpawnShapeType
==============
*/
void Postload_ParticleSpawnShapeType(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleSpawnShapeType != (ParticleSpawnShapeType *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleSpawnShapeType, 1ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(1ui64);
}

/*
==============
Postload_ParticleSpawnShapeTypeArray
==============
*/
void Postload_ParticleSpawnShapeTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleSpawnShapeType, count);
}

/*
==============
Postload_ParticleSpawnShapeTypeStream
==============
*/
void Postload_ParticleSpawnShapeTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleSpawnShapeType *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 37270, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleSpawnShapeType;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleSpawnShapeType *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 1ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(1ui64);
      pos = g_streamPosGlob.pos + 1;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleSpawnShapeType *)pos;
      varParticleSpawnShapeType = (ParticleSpawnShapeType *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleStateDef
==============
*/
void Postload_ParticleStateDef(const DBStreamStart streamStart)
{
  ParticleStateDef *v2; 
  ParticleModuleGroupDef *v3; 
  ParticleModuleGroupDef *v4; 
  __int64 v5; 

  if ( streamStart != (varParticleStateDef != (ParticleStateDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleStateDef, 0x20ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x20ui64);
  v2 = varParticleStateDef;
  if ( varParticleStateDef->moduleGroupDefs )
  {
    v3 = varParticleModuleGroupDef;
    DB_PatchMem_FixStreamAlignment(0xFui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->moduleGroupDefs = (ParticleModuleGroupDef *)g_streamPosGlob.pos;
    varParticleModuleGroupDef = (ParticleModuleGroupDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x30ui64);
    v4 = varParticleModuleGroupDef;
    v5 = 3i64;
    do
    {
      varParticleModuleGroupDef = v4;
      Postload_ParticleModuleGroupDef(NotAtStart);
      ++v4;
      --v5;
    }
    while ( v5 );
    varParticleModuleGroupDef = v3;
  }
}

/*
==============
Postload_ParticleStateDefArray
==============
*/
void Postload_ParticleStateDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleStateDef *i; 

  v2 = count;
  Postload_Stream(streamStart, varParticleStateDef, 32 * count);
  for ( i = varParticleStateDef; v2; --v2 )
  {
    varParticleStateDef = i;
    Postload_ParticleStateDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ParticleStateDefFlags
==============
*/
void Postload_ParticleStateDefFlags(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleStateDefFlags != g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleStateDefFlags, 8ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(8ui64);
}

/*
==============
Postload_ParticleStateDefFlagsArray
==============
*/
void Postload_ParticleStateDefFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleStateDefFlags, 8 * count);
}

/*
==============
Postload_ParticleStateDefFlagsStream
==============
*/
void Postload_ParticleStateDefFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 47563, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleStateDefFlags;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 8ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(8ui64);
      pos = g_streamPosGlob.pos + 8;
      g_streamPosGlob.pos = pos;
      v3 = pos;
      varParticleStateDefFlags = pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleStateDefStream
==============
*/
void Postload_ParticleStateDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleStateDef *v3; 
  unsigned __int8 *pos; 
  ParticleStateDef *v5; 
  ParticleModuleGroupDef *v6; 
  ParticleModuleGroupDef *v7; 
  __int64 v8; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 47688, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleStateDef;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleStateDef *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x20ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x20ui64);
      v5 = varParticleStateDef;
      pos = g_streamPosGlob.pos + 32;
      g_streamPosGlob.pos += 32;
      if ( varParticleStateDef->moduleGroupDefs )
      {
        v6 = varParticleModuleGroupDef;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        v5->moduleGroupDefs = (ParticleModuleGroupDef *)g_streamPosGlob.pos;
        varParticleModuleGroupDef = (ParticleModuleGroupDef *)g_streamPosGlob.pos;
        DB_IncStreamPos(0x30ui64);
        v7 = varParticleModuleGroupDef;
        v8 = 3i64;
        do
        {
          varParticleModuleGroupDef = v7;
          Postload_ParticleModuleGroupDef(NotAtStart);
          ++v7;
          --v8;
        }
        while ( v8 );
        pos = g_streamPosGlob.pos;
        varParticleModuleGroupDef = v6;
      }
      varParticleStateDef = (ParticleStateDef *)pos;
      v3 = (ParticleStateDef *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleSystemDef
==============
*/
void Postload_ParticleSystemDef(const DBStreamStart streamStart)
{
  const char **v2; 
  ParticleSystemDef *v3; 
  ParticleEmitterDef *v4; 
  __int64 numEmitters; 
  ParticleEmitterDef *i; 
  ParticleSystemDef *v7; 
  ParticleScriptedInputNodeDef *v8; 
  ParticleScriptedInputNodeDef *v9; 

  DB_PatchMem_PostLoad_PushAsset(40, varParticleSystemDef);
  if ( streamStart != (varParticleSystemDef != (ParticleSystemDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleSystemDef, 0x80ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x80ui64);
  DB_PushStreamPos(8u);
  v2 = varXString;
  varXString = &varParticleSystemDef->name;
  Postload_XString(NotAtStart);
  varXString = v2;
  v3 = varParticleSystemDef;
  if ( varParticleSystemDef->emitterDefs )
  {
    v4 = varParticleEmitterDef;
    DB_PatchMem_FixStreamAlignment(0xFui64);
    DB_CheckCanIncStreamPos(0i64);
    v3->emitterDefs = (ParticleEmitterDef *)g_streamPosGlob.pos;
    varParticleEmitterDef = (ParticleEmitterDef *)g_streamPosGlob.pos;
    numEmitters = varParticleSystemDef->numEmitters;
    if ( 160 * numEmitters )
    {
      if ( (unsigned __int64)(160 * numEmitters) > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(160 * numEmitters);
    }
    for ( i = varParticleEmitterDef; numEmitters; --numEmitters )
    {
      varParticleEmitterDef = i;
      Postload_ParticleEmitterDef(NotAtStart);
      ++i;
    }
    varParticleEmitterDef = v4;
  }
  v7 = varParticleSystemDef;
  if ( varParticleSystemDef->scriptedInputNodeDefs )
  {
    v8 = varParticleScriptedInputNodeDef;
    v9 = AllocPostload_ParticleScriptedInputNodeDef();
    v7->scriptedInputNodeDefs = v9;
    varParticleScriptedInputNodeDef = v9;
    Postload_ParticleScriptedInputNodeDefArray(AtStart, varParticleSystemDef->numScriptedInputNodes);
    varParticleScriptedInputNodeDef = v8;
  }
  DB_PopStreamPos();
  DB_PatchMem_PopAsset();
}

/*
==============
Postload_ParticleSystemDefArray
==============
*/
void Postload_ParticleSystemDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleSystemDef *i; 

  v2 = count;
  Postload_Stream(streamStart, varParticleSystemDef, count << 7);
  for ( i = varParticleSystemDef; v2; --v2 )
  {
    varParticleSystemDef = i;
    Postload_ParticleSystemDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ParticleSystemDefFlags
==============
*/
void Postload_ParticleSystemDefFlags(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleSystemDefFlags != (unsigned int *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleSystemDefFlags, 4ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(4ui64);
}

/*
==============
Postload_ParticleSystemDefFlagsArray
==============
*/
void Postload_ParticleSystemDefFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleSystemDefFlags, 4 * count);
}

/*
==============
Postload_ParticleSystemDefFlagsStream
==============
*/
void Postload_ParticleSystemDefFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned int *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 48590, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleSystemDefFlags;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (unsigned int *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 4ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(4ui64);
      pos = g_streamPosGlob.pos + 4;
      g_streamPosGlob.pos = pos;
      v3 = (unsigned int *)pos;
      varParticleSystemDefFlags = (unsigned int *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleSystemDefPtr
==============
*/
void Postload_ParticleSystemDefPtr(const DBStreamStart streamStart)
{
  unsigned __int8 *inserted; 
  ParticleSystemDef **v3; 
  __int64 v4; 
  ParticleSystemDef *v5; 

  inserted = NULL;
  if ( streamStart != (varParticleSystemDefPtr != (const ParticleSystemDef **)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleSystemDefPtr, 8ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(8ui64);
  DB_PushStreamPos(2u);
  v3 = (ParticleSystemDef **)varParticleSystemDefPtr;
  v4 = (__int64)*varParticleSystemDefPtr;
  if ( *varParticleSystemDefPtr )
  {
    if ( v4 == -1 )
    {
      DB_PushSharedData();
    }
    else if ( v4 != -2 && v4 != -3 )
    {
      DB_ConvertOffsetToAlias((unsigned __int64 *)varParticleSystemDefPtr);
      goto LABEL_17;
    }
    v5 = varParticleSystemDef;
    DB_PatchMem_FixStreamAlignment(0xFui64);
    DB_CheckCanIncStreamPos(0i64);
    *v3 = (ParticleSystemDef *)g_streamPosGlob.pos;
    varParticleSystemDef = (ParticleSystemDef *)g_streamPosGlob.pos;
    if ( v4 == -3 )
      inserted = DB_InsertPointer();
    Postload_ParticleSystemDef(AtStart);
    Load_ParticleSystemDefAsset(v3);
    varParticleSystemDef = v5;
    if ( inserted )
      *(_QWORD *)inserted = *v3;
    if ( v4 == -1 )
      DB_PopSharedData();
  }
LABEL_17:
  DB_PopStreamPos();
}

/*
==============
Postload_ParticleSystemDefPtrArray
==============
*/
void Postload_ParticleSystemDefPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  const ParticleSystemDef **i; 

  v2 = count;
  Postload_Stream(streamStart, varParticleSystemDefPtr, 8 * count);
  for ( i = varParticleSystemDefPtr; v2; --v2 )
  {
    varParticleSystemDefPtr = i;
    Postload_ParticleSystemDefPtr(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ParticleSystemDefPtrStream
==============
*/
void Postload_ParticleSystemDefPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleSystemDef **v5; 
  __int64 v6; 
  ParticleSystemDef *v7; 
  unsigned __int8 *inserted; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 49229, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleSystemDefPtr;
    pos = g_streamPosGlob.pos;
    while ( 1 )
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 8ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(8ui64);
      g_streamPosGlob.pos += 8;
      DB_PushStreamPos(2u);
      v5 = (ParticleSystemDef **)varParticleSystemDefPtr;
      v6 = (__int64)*varParticleSystemDefPtr;
      if ( !*varParticleSystemDefPtr )
        goto LABEL_23;
      if ( v6 == -1 )
        break;
      if ( v6 == -2 || v6 == -3 )
        goto LABEL_17;
      DB_ConvertOffsetToAlias((unsigned __int64 *)varParticleSystemDefPtr);
LABEL_23:
      DB_PopStreamPos();
      pos = g_streamPosGlob.pos;
      varParticleSystemDefPtr = (const ParticleSystemDef **)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_17:
    v7 = varParticleSystemDef;
    DB_PatchMem_FixStreamAlignment(0xFui64);
    DB_CheckCanIncStreamPos(0i64);
    inserted = NULL;
    *v5 = (ParticleSystemDef *)g_streamPosGlob.pos;
    varParticleSystemDef = (ParticleSystemDef *)g_streamPosGlob.pos;
    if ( v6 == -3 )
      inserted = DB_InsertPointer();
    Postload_ParticleSystemDef(AtStart);
    Load_ParticleSystemDefAsset(v5);
    varParticleSystemDef = v7;
    if ( inserted )
      *(_QWORD *)inserted = *v5;
    if ( v6 == -1 )
      DB_PopSharedData();
    goto LABEL_23;
  }
}

/*
==============
Postload_ParticleSystemDefRef
==============
*/
void Postload_ParticleSystemDefRef(const DBStreamStart streamStart)
{
  ParticleSystemDefRef *v2; 
  const char **v3; 

  if ( streamStart != (varParticleSystemDefRef != (ParticleSystemDefRef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleSystemDefRef, 8ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(8ui64);
  v2 = varParticleSystemDefRef;
  v3 = varXString;
  varXString = (const char **)varParticleSystemDefRef;
  Postload_XString(NotAtStart);
  Load_ParticleSystemDefFromName((const char **)v2);
  varXString = v3;
}

/*
==============
Postload_ParticleSystemDefRefArray
==============
*/
void Postload_ParticleSystemDefRefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleSystemDefRef *i; 
  ParticleSystemDefRef *v4; 
  const char **v5; 

  v2 = count;
  Postload_Stream(streamStart, varParticleSystemDefRef, 8 * count);
  for ( i = varParticleSystemDefRef; v2; --v2 )
  {
    v4 = i;
    varParticleSystemDefRef = i;
    if ( i == (ParticleSystemDefRef *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 8ui64);
      v4 = varParticleSystemDefRef;
    }
    v5 = varXString;
    varXString = (const char **)v4;
    Postload_XString(NotAtStart);
    Load_ParticleSystemDefFromName((const char **)v4);
    ++i;
    varXString = v5;
  }
}

/*
==============
Postload_ParticleSystemDefRefStream
==============
*/
void Postload_ParticleSystemDefRefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ParticleSystemDefRef *v5; 
  const char **v6; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 49305, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleSystemDefRef;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 8ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(8ui64);
      v5 = varParticleSystemDefRef;
      v6 = varXString;
      g_streamPosGlob.pos += 8;
      varXString = (const char **)varParticleSystemDefRef;
      Postload_XString(NotAtStart);
      Load_ParticleSystemDefFromName((const char **)v5);
      pos = g_streamPosGlob.pos;
      varParticleSystemDefRef = (ParticleSystemDefRef *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varXString = v6;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleSystemDefStream
==============
*/
void Postload_ParticleSystemDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  const char **v5; 
  ParticleSystemDef *v6; 
  ParticleEmitterDef *v7; 
  __int64 numEmitters; 
  ParticleEmitterDef *i; 
  ParticleSystemDef *v10; 
  ParticleScriptedInputNodeDef *v11; 
  ParticleScriptedInputNodeDef *v12; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 49102, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varParticleSystemDef;
    do
    {
      DB_PatchMem_PostLoad_PushAsset(40, v3);
      pos = g_streamPosGlob.pos;
      if ( varParticleSystemDef != (ParticleSystemDef *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, varParticleSystemDef, 0x80ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x80ui64);
      g_streamPosGlob.pos += 128;
      DB_PushStreamPos(8u);
      v5 = varXString;
      varXString = &varParticleSystemDef->name;
      Postload_XString(NotAtStart);
      varXString = v5;
      v6 = varParticleSystemDef;
      if ( varParticleSystemDef->emitterDefs )
      {
        v7 = varParticleEmitterDef;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        v6->emitterDefs = (ParticleEmitterDef *)g_streamPosGlob.pos;
        varParticleEmitterDef = (ParticleEmitterDef *)g_streamPosGlob.pos;
        numEmitters = varParticleSystemDef->numEmitters;
        if ( 160 * numEmitters )
        {
          if ( (unsigned __int64)(160 * numEmitters) > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
            __debugbreak();
          DB_IncStreamPos(160 * numEmitters);
        }
        for ( i = varParticleEmitterDef; numEmitters; --numEmitters )
        {
          varParticleEmitterDef = i;
          Postload_ParticleEmitterDef(NotAtStart);
          ++i;
        }
        varParticleEmitterDef = v7;
      }
      v10 = varParticleSystemDef;
      if ( varParticleSystemDef->scriptedInputNodeDefs )
      {
        v11 = varParticleScriptedInputNodeDef;
        v12 = AllocPostload_ParticleScriptedInputNodeDef();
        v10->scriptedInputNodeDefs = v12;
        varParticleScriptedInputNodeDef = v12;
        Postload_ParticleScriptedInputNodeDefArray(AtStart, varParticleSystemDef->numScriptedInputNodes);
        varParticleScriptedInputNodeDef = v11;
      }
      DB_PopStreamPos();
      DB_PatchMem_PopAsset();
      v3 = g_streamPosGlob.pos;
      varParticleSystemDef = (ParticleSystemDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleUseOrientationOptions
==============
*/
void Postload_ParticleUseOrientationOptions(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleUseOrientationOptions != (ParticleUseOrientationOptions *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleUseOrientationOptions, 1ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(1ui64);
}

/*
==============
Postload_ParticleUseOrientationOptionsArray
==============
*/
void Postload_ParticleUseOrientationOptionsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleUseOrientationOptions, count);
}

/*
==============
Postload_ParticleUseOrientationOptionsStream
==============
*/
void Postload_ParticleUseOrientationOptionsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleUseOrientationOptions *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 36458, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleUseOrientationOptions;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleUseOrientationOptions *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 1ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(1ui64);
      pos = g_streamPosGlob.pos + 1;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleUseOrientationOptions *)pos;
      varParticleUseOrientationOptions = (ParticleUseOrientationOptions *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleUseScaleOptions
==============
*/
void Postload_ParticleUseScaleOptions(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleUseScaleOptions != (ParticleUseScaleOptions *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleUseScaleOptions, 1ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(1ui64);
}

/*
==============
Postload_ParticleUseScaleOptionsArray
==============
*/
void Postload_ParticleUseScaleOptionsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleUseScaleOptions, count);
}

/*
==============
Postload_ParticleUseScaleOptionsStream
==============
*/
void Postload_ParticleUseScaleOptionsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleUseScaleOptions *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 36512, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleUseScaleOptions;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleUseScaleOptions *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 1ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(1ui64);
      pos = g_streamPosGlob.pos + 1;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleUseScaleOptions *)pos;
      varParticleUseScaleOptions = (ParticleUseScaleOptions *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ParticleUseVelocityOptions
==============
*/
void Postload_ParticleUseVelocityOptions(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticleUseVelocityOptions != (ParticleUseVelocityOptions *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticleUseVelocityOptions, 1ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(1ui64);
}

/*
==============
Postload_ParticleUseVelocityOptionsArray
==============
*/
void Postload_ParticleUseVelocityOptionsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticleUseVelocityOptions, count);
}

/*
==============
Postload_ParticleUseVelocityOptionsStream
==============
*/
void Postload_ParticleUseVelocityOptionsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleUseVelocityOptions *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 36566, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticleUseVelocityOptions;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ParticleUseVelocityOptions *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 1ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(1ui64);
      pos = g_streamPosGlob.pos + 1;
      g_streamPosGlob.pos = pos;
      v3 = (ParticleUseVelocityOptions *)pos;
      varParticleUseVelocityOptions = (ParticleUseVelocityOptions *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_Particle_MaterialData
==============
*/
void Postload_Particle_MaterialData(const DBStreamStart streamStart)
{
  if ( streamStart != (varParticle_MaterialData != (Particle_MaterialData *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varParticle_MaterialData, 0xC0ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0xC0ui64);
}

/*
==============
Postload_Particle_MaterialDataArray
==============
*/
void Postload_Particle_MaterialDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream(streamStart, varParticle_MaterialData, 192 * count);
}

/*
==============
Postload_Particle_MaterialDataStream
==============
*/
void Postload_Particle_MaterialDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Particle_MaterialData *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 34685, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varParticle_MaterialData;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (Particle_MaterialData *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0xC0ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0xC0ui64);
      pos = g_streamPosGlob.pos + 192;
      g_streamPosGlob.pos = pos;
      v3 = (Particle_MaterialData *)pos;
      varParticle_MaterialData = (Particle_MaterialData *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_FxMarkProjectionAxis
==============
*/
void Preload_FxMarkProjectionAxis(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varFxMarkProjectionAxis, 1ui64);
}

/*
==============
Preload_FxMarkProjectionAxisArray
==============
*/
void Preload_FxMarkProjectionAxisArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varFxMarkProjectionAxis, count);
}

/*
==============
Preload_FxMarkProjectionAxisStream
==============
*/
void Preload_FxMarkProjectionAxisStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 51910, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varFxMarkProjectionAxis;
    do
    {
      Load_Stream(AtStart, pos, 1ui64);
      pos = g_streamPosGlob.pos;
      varFxMarkProjectionAxis = (FxMarkProjectionAxis *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleCurveControlPointDef
==============
*/
void Preload_ParticleCurveControlPointDef(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleCurveControlPointDef, 0x10ui64);
}

/*
==============
Preload_ParticleCurveControlPointDefArray
==============
*/
void Preload_ParticleCurveControlPointDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleCurveControlPointDef, 16 * count);
}

/*
==============
Preload_ParticleCurveControlPointDefStream
==============
*/
void Preload_ParticleCurveControlPointDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 49787, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleCurveControlPointDef;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      pos = g_streamPosGlob.pos;
      varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleCurveDef
==============
*/
void Preload_ParticleCurveDef(const DBStreamStart streamStart)
{
  ParticleCurveControlPointDef *v1; 

  Load_Stream(streamStart, varParticleCurveDef, 0x10ui64);
  if ( varParticleCurveDef->controlPoints )
  {
    v1 = varParticleCurveControlPointDef;
    DB_PatchMem_FixStreamAlignment(0xFui64);
    DB_CheckCanIncStreamPos(0i64);
    varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
    varParticleCurveControlPointDef = v1;
  }
}

/*
==============
Preload_ParticleCurveDefArray
==============
*/
void Preload_ParticleCurveDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleCurveDef *i; 
  ParticleCurveControlPointDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleCurveDef, 16 * count);
  for ( i = varParticleCurveDef; v2; --v2 )
  {
    varParticleCurveDef = i;
    Load_Stream(NotAtStart, i, 0x10ui64);
    if ( varParticleCurveDef->controlPoints )
    {
      v4 = varParticleCurveControlPointDef;
      DB_PatchMem_FixStreamAlignment(0xFui64);
      DB_CheckCanIncStreamPos(0i64);
      varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
      varParticleCurveControlPointDef = v4;
    }
    ++i;
  }
}

/*
==============
Preload_ParticleCurveDefStream
==============
*/
void Preload_ParticleCurveDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveControlPointDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 49911, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleCurveDef;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      if ( varParticleCurveDef->controlPoints )
      {
        v4 = varParticleCurveControlPointDef;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
        varParticleCurveControlPointDef = v4;
      }
      pos = g_streamPosGlob.pos;
      varParticleCurveDef = (ParticleCurveDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleDataFlags
==============
*/
void Preload_ParticleDataFlags(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleDataFlags, 4ui64);
}

/*
==============
Preload_ParticleDataFlagsArray
==============
*/
void Preload_ParticleDataFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleDataFlags, 4 * count);
}

/*
==============
Preload_ParticleDataFlagsStream
==============
*/
void Preload_ParticleDataFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 67974, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleDataFlags;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varParticleDataFlags = (ParticleDataFlags *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleElementType
==============
*/
void Preload_ParticleElementType(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleElementType, 4ui64);
}

/*
==============
Preload_ParticleElementTypeArray
==============
*/
void Preload_ParticleElementTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleElementType, 4 * count);
}

/*
==============
Preload_ParticleElementTypeStream
==============
*/
void Preload_ParticleElementTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 65654, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleElementType;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varParticleElementType = (unsigned int *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleEmissiveCurves
==============
*/
void Preload_ParticleEmissiveCurves(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleEmissiveCurves, 4ui64);
}

/*
==============
Preload_ParticleEmissiveCurvesArray
==============
*/
void Preload_ParticleEmissiveCurvesArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleEmissiveCurves, 4 * count);
}

/*
==============
Preload_ParticleEmissiveCurvesStream
==============
*/
void Preload_ParticleEmissiveCurvesStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 50548, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleEmissiveCurves;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varParticleEmissiveCurves = (ParticleEmissiveCurves *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleEmissiveVersionCurves
==============
*/
void Preload_ParticleEmissiveVersionCurves(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleEmissiveVersionCurves, 4ui64);
}

/*
==============
Preload_ParticleEmissiveVersionCurvesArray
==============
*/
void Preload_ParticleEmissiveVersionCurvesArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleEmissiveVersionCurves, 4 * count);
}

/*
==============
Preload_ParticleEmissiveVersionCurvesStream
==============
*/
void Preload_ParticleEmissiveVersionCurvesStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 50656, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleEmissiveVersionCurves;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varParticleEmissiveVersionCurves = (ParticleEmissiveVersionCurves *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleEmitterDef
==============
*/
void Preload_ParticleEmitterDef(const DBStreamStart streamStart)
{
  ParticleEmitterDef *v1; 
  ParticleStateDef *v2; 
  __int64 numStates; 
  ParticleStateDef *i; 
  ParticleCurveDef *v5; 

  Load_Stream(streamStart, varParticleEmitterDef, 0xA0ui64);
  v1 = varParticleEmitterDef;
  if ( varParticleEmitterDef->stateDefs )
  {
    v2 = varParticleStateDef;
    DB_PatchMem_FixStreamAlignment(0xFui64);
    DB_CheckCanIncStreamPos(0i64);
    varParticleStateDef = (ParticleStateDef *)g_streamPosGlob.pos;
    numStates = varParticleEmitterDef->numStates;
    Load_Stream(AtStart, g_streamPosGlob.pos, 32 * numStates);
    for ( i = varParticleStateDef; numStates; --numStates )
    {
      varParticleStateDef = i;
      Preload_ParticleStateDef(NotAtStart);
      ++i;
    }
    v1 = varParticleEmitterDef;
    varParticleStateDef = v2;
  }
  v5 = varParticleCurveDef;
  varParticleCurveDef = &v1->fadeCurveDef;
  Preload_ParticleCurveDef(NotAtStart);
  varParticleCurveDef = v5;
}

/*
==============
Preload_ParticleEmitterDefArray
==============
*/
void Preload_ParticleEmitterDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleEmitterDef *i; 
  ParticleEmitterDef *v4; 
  ParticleStateDef *v5; 
  __int64 numStates; 
  ParticleStateDef *j; 
  ParticleCurveDef *v8; 
  ParticleCurveControlPointDef *v9; 

  v2 = count;
  Load_Stream(streamStart, varParticleEmitterDef, 160 * count);
  for ( i = varParticleEmitterDef; v2; --v2 )
  {
    varParticleEmitterDef = i;
    Load_Stream(NotAtStart, i, 0xA0ui64);
    v4 = varParticleEmitterDef;
    if ( varParticleEmitterDef->stateDefs )
    {
      v5 = varParticleStateDef;
      DB_PatchMem_FixStreamAlignment(0xFui64);
      DB_CheckCanIncStreamPos(0i64);
      varParticleStateDef = (ParticleStateDef *)g_streamPosGlob.pos;
      numStates = varParticleEmitterDef->numStates;
      Load_Stream(AtStart, g_streamPosGlob.pos, 32 * numStates);
      for ( j = varParticleStateDef; numStates; --numStates )
      {
        varParticleStateDef = j;
        Preload_ParticleStateDef(NotAtStart);
        ++j;
      }
      v4 = varParticleEmitterDef;
      varParticleStateDef = v5;
    }
    v8 = varParticleCurveDef;
    varParticleCurveDef = &v4->fadeCurveDef;
    Load_Stream(NotAtStart, &v4->fadeCurveDef, 0x10ui64);
    if ( varParticleCurveDef->controlPoints )
    {
      v9 = varParticleCurveControlPointDef;
      DB_PatchMem_FixStreamAlignment(0xFui64);
      DB_CheckCanIncStreamPos(0i64);
      varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
      varParticleCurveControlPointDef = v9;
    }
    ++i;
    varParticleCurveDef = v8;
  }
}

/*
==============
Preload_ParticleEmitterDefFlags
==============
*/
void Preload_ParticleEmitterDefFlags(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleEmitterDefFlags, 4ui64);
}

/*
==============
Preload_ParticleEmitterDefFlagsArray
==============
*/
void Preload_ParticleEmitterDefFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleEmitterDefFlags, 4 * count);
}

/*
==============
Preload_ParticleEmitterDefFlagsStream
==============
*/
void Preload_ParticleEmitterDefFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 67920, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleEmitterDefFlags;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varParticleEmitterDefFlags = (unsigned int *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleEmitterDefStream
==============
*/
void Preload_ParticleEmitterDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleEmitterDef *v4; 
  ParticleStateDef *v5; 
  __int64 numStates; 
  ParticleStateDef *i; 
  ParticleCurveDef *v8; 
  ParticleCurveControlPointDef *v9; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 68713, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleEmitterDef;
    do
    {
      Load_Stream(AtStart, pos, 0xA0ui64);
      v4 = varParticleEmitterDef;
      if ( varParticleEmitterDef->stateDefs )
      {
        v5 = varParticleStateDef;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        varParticleStateDef = (ParticleStateDef *)g_streamPosGlob.pos;
        numStates = varParticleEmitterDef->numStates;
        Load_Stream(AtStart, g_streamPosGlob.pos, 32 * numStates);
        for ( i = varParticleStateDef; numStates; --numStates )
        {
          varParticleStateDef = i;
          Preload_ParticleStateDef(NotAtStart);
          ++i;
        }
        v4 = varParticleEmitterDef;
        varParticleStateDef = v5;
      }
      v8 = varParticleCurveDef;
      varParticleCurveDef = &v4->fadeCurveDef;
      Load_Stream(NotAtStart, &v4->fadeCurveDef, 0x10ui64);
      if ( varParticleCurveDef->controlPoints )
      {
        v9 = varParticleCurveControlPointDef;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
        varParticleCurveControlPointDef = v9;
      }
      pos = g_streamPosGlob.pos;
      varParticleEmitterDef = (ParticleEmitterDef *)g_streamPosGlob.pos;
      varParticleCurveDef = v8;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleFloatRange
==============
*/
void Preload_ParticleFloatRange(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleFloatRange, 8ui64);
}

/*
==============
Preload_ParticleFloatRangeArray
==============
*/
void Preload_ParticleFloatRangeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleFloatRange, 8 * count);
}

/*
==============
Preload_ParticleFloatRangeStream
==============
*/
void Preload_ParticleFloatRangeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 49566, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleFloatRange;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      pos = g_streamPosGlob.pos;
      varParticleFloatRange = (ParticleFloatRange *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleGravityOptions
==============
*/
void Preload_ParticleGravityOptions(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleGravityOptions, 4ui64);
}

/*
==============
Preload_ParticleGravityOptionsArray
==============
*/
void Preload_ParticleGravityOptionsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleGravityOptions, 4 * count);
}

/*
==============
Preload_ParticleGravityOptionsStream
==============
*/
void Preload_ParticleGravityOptionsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 68028, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleGravityOptions;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varParticleGravityOptions = (ParticleGravityOptions *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleGravityState
==============
*/
void Preload_ParticleGravityState(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleGravityState, 4ui64);
}

/*
==============
Preload_ParticleGravityStateArray
==============
*/
void Preload_ParticleGravityStateArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleGravityState, 4 * count);
}

/*
==============
Preload_ParticleGravityStateStream
==============
*/
void Preload_ParticleGravityStateStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 64414, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleGravityState;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varParticleGravityState = (unsigned int *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleGroupID
==============
*/
void Preload_ParticleGroupID(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleGroupID, 4ui64);
}

/*
==============
Preload_ParticleGroupIDArray
==============
*/
void Preload_ParticleGroupIDArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleGroupID, 4 * count);
}

/*
==============
Preload_ParticleGroupIDStream
==============
*/
void Preload_ParticleGroupIDStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 68104, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleGroupID;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varParticleGroupID = (ParticleGroupID *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleImpactDirection
==============
*/
void Preload_ParticleImpactDirection(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleImpactDirection, 4ui64);
}

/*
==============
Preload_ParticleImpactDirectionArray
==============
*/
void Preload_ParticleImpactDirectionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleImpactDirection, 4 * count);
}

/*
==============
Preload_ParticleImpactDirectionStream
==============
*/
void Preload_ParticleImpactDirectionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 64751, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleImpactDirection;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varParticleImpactDirection = (unsigned int *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleInstancePoolAction
==============
*/
void Preload_ParticleInstancePoolAction(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleInstancePoolAction, 4ui64);
}

/*
==============
Preload_ParticleInstancePoolActionArray
==============
*/
void Preload_ParticleInstancePoolActionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleInstancePoolAction, 4 * count);
}

/*
==============
Preload_ParticleInstancePoolActionStream
==============
*/
void Preload_ParticleInstancePoolActionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 54414, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleInstancePoolAction;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varParticleInstancePoolAction = (ParticleInstancePoolAction *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleInstancePoolType
==============
*/
void Preload_ParticleInstancePoolType(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleInstancePoolType, 4ui64);
}

/*
==============
Preload_ParticleInstancePoolTypeArray
==============
*/
void Preload_ParticleInstancePoolTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleInstancePoolType, 4 * count);
}

/*
==============
Preload_ParticleInstancePoolTypeStream
==============
*/
void Preload_ParticleInstancePoolTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 54468, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleInstancePoolType;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varParticleInstancePoolType = (ParticleInstancePoolType *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleIntRange
==============
*/
void Preload_ParticleIntRange(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleIntRange, 8ui64);
}

/*
==============
Preload_ParticleIntRangeArray
==============
*/
void Preload_ParticleIntRangeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleIntRange, 8 * count);
}

/*
==============
Preload_ParticleIntRangeStream
==============
*/
void Preload_ParticleIntRangeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 49665, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleIntRange;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      pos = g_streamPosGlob.pos;
      varParticleIntRange = (ParticleIntRange *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleLinkedAssetDef
==============
*/
void Preload_ParticleLinkedAssetDef(const DBStreamStart streamStart)
{
  ParticleModuleType moduleType; 
  Material **v2; 
  ParticlePhysicsFXData *v3; 
  FxParticleSimAnimation **v4; 
  ParticleMarkVisuals *v5; 
  const char **v6; 
  VectorField **v7; 
  const ParticleSystemDef **v8; 
  GfxLightDef **v9; 
  XModel **v10; 

  moduleType = varParticleModuleDef->moduleType;
  if ( varParticleModuleDef->moduleType == PARTICLE_MODULE_INIT_MATERIAL )
  {
    v2 = varMaterialHandle;
    varMaterialHandle = &varParticleLinkedAssetDef->material;
    Preload_MaterialHandle(streamStart);
    varMaterialHandle = v2;
  }
  else
  {
    switch ( moduleType )
    {
      case PARTICLE_MODULE_INIT_MODEL:
      case PARTICLE_MODULE_INIT_SPAWN_SHAPE_MESH:
        v10 = varXModelPtr;
        varXModelPtr = (XModel **)varParticleLinkedAssetDef;
        Preload_XModelPtr(streamStart);
        varXModelPtr = v10;
        break;
      case PARTICLE_MODULE_PHYSICS_LIGHT:
        v3 = varParticlePhysicsFXData;
        varParticlePhysicsFXData = (ParticlePhysicsFXData *)varParticleLinkedAssetDef;
        Preload_ParticlePhysicsFXData(streamStart);
        varParticlePhysicsFXData = v3;
        break;
      case PARTICLE_MODULE_INIT_PARTICLE_SIM:
        v4 = varFxParticleSimAnimationPtr;
        varFxParticleSimAnimationPtr = (FxParticleSimAnimation **)varParticleLinkedAssetDef;
        Preload_FxParticleSimAnimationPtr(streamStart);
        varFxParticleSimAnimationPtr = v4;
        break;
      case PARTICLE_MODULE_INIT_DECAL:
        v5 = varParticleMarkVisuals;
        varParticleMarkVisuals = (ParticleMarkVisuals *)varParticleLinkedAssetDef;
        Preload_ParticleMarkVisuals(streamStart);
        varParticleMarkVisuals = v5;
        break;
      case PARTICLE_MODULE_INIT_SOUND:
        v6 = varXString;
        varXString = (const char **)varParticleLinkedAssetDef;
        Preload_XString(streamStart);
        varXString = v6;
        break;
      case PARTICLE_MODULE_INIT_VECTOR_FIELD:
        v7 = varVectorFieldPtr;
        varVectorFieldPtr = (VectorField **)varParticleLinkedAssetDef;
        Preload_VectorFieldPtr(streamStart);
        varVectorFieldPtr = v7;
        break;
      default:
        if ( (unsigned __int16)(moduleType - 9) <= 1u )
        {
          v9 = varGfxLightDefPtr;
          varGfxLightDefPtr = (GfxLightDef **)varParticleLinkedAssetDef;
          Preload_GfxLightDefPtr(streamStart);
          varGfxLightDefPtr = v9;
        }
        else if ( moduleType == PARTICLE_MODULE_INIT_BEAM || moduleType == PARTICLE_MODULE_INIT_RUNNER || varParticleModuleTestEventHandlerData )
        {
          v8 = varParticleSystemDefPtr;
          varParticleSystemDefPtr = (const ParticleSystemDef **)varParticleLinkedAssetDef;
          Preload_ParticleSystemDefPtr(streamStart);
          varParticleSystemDefPtr = v8;
        }
        break;
    }
  }
}

/*
==============
Preload_ParticleLinkedAssetDefArray
==============
*/
void Preload_ParticleLinkedAssetDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleLinkedAssetDef *i; 
  ParticleModuleType moduleType; 
  Material **v5; 
  ParticlePhysicsFXData *v6; 
  FxParticleSimAnimation **v7; 
  ParticleMarkVisuals *v8; 
  const char **v9; 
  VectorField **v10; 
  const ParticleSystemDef **v11; 
  GfxLightDef **v12; 
  XModel **v13; 

  v2 = count;
  Load_Stream(streamStart, varParticleLinkedAssetDef, 32 * count);
  for ( i = varParticleLinkedAssetDef; v2; --v2 )
  {
    varParticleLinkedAssetDef = i;
    moduleType = varParticleModuleDef->moduleType;
    if ( varParticleModuleDef->moduleType == PARTICLE_MODULE_INIT_MATERIAL )
    {
      v5 = varMaterialHandle;
      varMaterialHandle = &i->material;
      Preload_MaterialHandle(NotAtStart);
      varMaterialHandle = v5;
    }
    else
    {
      switch ( moduleType )
      {
        case PARTICLE_MODULE_INIT_MODEL:
        case PARTICLE_MODULE_INIT_SPAWN_SHAPE_MESH:
          v13 = varXModelPtr;
          varXModelPtr = (XModel **)i;
          Preload_XModelPtr(NotAtStart);
          varXModelPtr = v13;
          break;
        case PARTICLE_MODULE_PHYSICS_LIGHT:
          v6 = varParticlePhysicsFXData;
          varParticlePhysicsFXData = (ParticlePhysicsFXData *)i;
          Preload_ParticlePhysicsFXData(NotAtStart);
          varParticlePhysicsFXData = v6;
          break;
        case PARTICLE_MODULE_INIT_PARTICLE_SIM:
          v7 = varFxParticleSimAnimationPtr;
          varFxParticleSimAnimationPtr = (FxParticleSimAnimation **)i;
          Preload_FxParticleSimAnimationPtr(NotAtStart);
          varFxParticleSimAnimationPtr = v7;
          break;
        case PARTICLE_MODULE_INIT_DECAL:
          v8 = varParticleMarkVisuals;
          varParticleMarkVisuals = (ParticleMarkVisuals *)i;
          Preload_ParticleMarkVisuals(NotAtStart);
          varParticleMarkVisuals = v8;
          break;
        case PARTICLE_MODULE_INIT_SOUND:
          v9 = varXString;
          varXString = (const char **)i;
          Preload_XString(NotAtStart);
          varXString = v9;
          break;
        case PARTICLE_MODULE_INIT_VECTOR_FIELD:
          v10 = varVectorFieldPtr;
          varVectorFieldPtr = (VectorField **)i;
          Preload_VectorFieldPtr(NotAtStart);
          varVectorFieldPtr = v10;
          break;
        default:
          if ( (unsigned __int16)(moduleType - 9) <= 1u )
          {
            v12 = varGfxLightDefPtr;
            varGfxLightDefPtr = (GfxLightDef **)i;
            Preload_GfxLightDefPtr(NotAtStart);
            varGfxLightDefPtr = v12;
          }
          else if ( moduleType == PARTICLE_MODULE_INIT_BEAM || moduleType == PARTICLE_MODULE_INIT_RUNNER || varParticleModuleTestEventHandlerData )
          {
            v11 = varParticleSystemDefPtr;
            varParticleSystemDefPtr = (const ParticleSystemDef **)i;
            Preload_ParticleSystemDefPtr(NotAtStart);
            varParticleSystemDefPtr = v11;
          }
          break;
      }
    }
    ++i;
  }
}

/*
==============
Preload_ParticleLinkedAssetDefStream
==============
*/
void Preload_ParticleLinkedAssetDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleLinkedAssetDef *pos; 
  ParticleModuleType moduleType; 
  Material **v5; 
  ParticlePhysicsFXData *v6; 
  FxParticleSimAnimation **v7; 
  ParticleMarkVisuals *v8; 
  const char **v9; 
  VectorField **v10; 
  const ParticleSystemDef **v11; 
  GfxLightDef **v12; 
  XModel **v13; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 50393, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = varParticleLinkedAssetDef;
    do
    {
      moduleType = varParticleModuleDef->moduleType;
      if ( varParticleModuleDef->moduleType == PARTICLE_MODULE_INIT_MATERIAL )
      {
        v5 = varMaterialHandle;
        varMaterialHandle = &pos->material;
        Preload_MaterialHandle(AtStart);
        varMaterialHandle = v5;
      }
      else
      {
        switch ( moduleType )
        {
          case PARTICLE_MODULE_INIT_MODEL:
          case PARTICLE_MODULE_INIT_SPAWN_SHAPE_MESH:
            v13 = varXModelPtr;
            varXModelPtr = (XModel **)pos;
            Preload_XModelPtr(AtStart);
            varXModelPtr = v13;
            break;
          case PARTICLE_MODULE_PHYSICS_LIGHT:
            v6 = varParticlePhysicsFXData;
            varParticlePhysicsFXData = (ParticlePhysicsFXData *)pos;
            Preload_ParticlePhysicsFXData(AtStart);
            varParticlePhysicsFXData = v6;
            break;
          case PARTICLE_MODULE_INIT_PARTICLE_SIM:
            v7 = varFxParticleSimAnimationPtr;
            varFxParticleSimAnimationPtr = (FxParticleSimAnimation **)pos;
            Preload_FxParticleSimAnimationPtr(AtStart);
            varFxParticleSimAnimationPtr = v7;
            break;
          case PARTICLE_MODULE_INIT_DECAL:
            v8 = varParticleMarkVisuals;
            varParticleMarkVisuals = (ParticleMarkVisuals *)pos;
            Preload_ParticleMarkVisuals(AtStart);
            varParticleMarkVisuals = v8;
            break;
          case PARTICLE_MODULE_INIT_SOUND:
            v9 = varXString;
            varXString = (const char **)pos;
            Preload_XString(AtStart);
            varXString = v9;
            break;
          case PARTICLE_MODULE_INIT_VECTOR_FIELD:
            v10 = varVectorFieldPtr;
            varVectorFieldPtr = (VectorField **)pos;
            Preload_VectorFieldPtr(AtStart);
            varVectorFieldPtr = v10;
            break;
          default:
            if ( (unsigned __int16)(moduleType - 9) <= 1u )
            {
              v12 = varGfxLightDefPtr;
              varGfxLightDefPtr = (GfxLightDef **)pos;
              Preload_GfxLightDefPtr(AtStart);
              varGfxLightDefPtr = v12;
            }
            else if ( moduleType == PARTICLE_MODULE_INIT_BEAM || moduleType == PARTICLE_MODULE_INIT_RUNNER || varParticleModuleTestEventHandlerData )
            {
              v11 = varParticleSystemDefPtr;
              varParticleSystemDefPtr = (const ParticleSystemDef **)pos;
              Preload_ParticleSystemDefPtr(AtStart);
              varParticleSystemDefPtr = v11;
            }
            break;
        }
      }
      pos = (ParticleLinkedAssetDef *)g_streamPosGlob.pos;
      varParticleLinkedAssetDef = (ParticleLinkedAssetDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleLinkedAssetListDef
==============
*/
void Preload_ParticleLinkedAssetListDef(const DBStreamStart streamStart)
{
  ParticleLinkedAssetDef *v1; 
  __int64 numAssets; 
  ParticleLinkedAssetDef *i; 

  Load_Stream(streamStart, varParticleLinkedAssetListDef, 0x10ui64);
  if ( varParticleLinkedAssetListDef->assetList )
  {
    v1 = varParticleLinkedAssetDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varParticleLinkedAssetDef = (ParticleLinkedAssetDef *)g_streamPosGlob.pos;
    numAssets = varParticleLinkedAssetListDef->numAssets;
    Load_Stream(AtStart, g_streamPosGlob.pos, 32 * numAssets);
    for ( i = varParticleLinkedAssetDef; numAssets; --numAssets )
    {
      varParticleLinkedAssetDef = i;
      Preload_ParticleLinkedAssetDef(NotAtStart);
      ++i;
    }
    varParticleLinkedAssetDef = v1;
  }
}

/*
==============
Preload_ParticleLinkedAssetListDefArray
==============
*/
void Preload_ParticleLinkedAssetListDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleLinkedAssetListDef *i; 
  ParticleLinkedAssetDef *v4; 
  __int64 numAssets; 
  ParticleLinkedAssetDef *j; 

  v2 = count;
  Load_Stream(streamStart, varParticleLinkedAssetListDef, 16 * count);
  for ( i = varParticleLinkedAssetListDef; v2; --v2 )
  {
    varParticleLinkedAssetListDef = i;
    Load_Stream(NotAtStart, i, 0x10ui64);
    if ( varParticleLinkedAssetListDef->assetList )
    {
      v4 = varParticleLinkedAssetDef;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      varParticleLinkedAssetDef = (ParticleLinkedAssetDef *)g_streamPosGlob.pos;
      numAssets = varParticleLinkedAssetListDef->numAssets;
      Load_Stream(AtStart, g_streamPosGlob.pos, 32 * numAssets);
      for ( j = varParticleLinkedAssetDef; numAssets; --numAssets )
      {
        varParticleLinkedAssetDef = j;
        Preload_ParticleLinkedAssetDef(NotAtStart);
        ++j;
      }
      varParticleLinkedAssetDef = v4;
    }
    ++i;
  }
}

/*
==============
Preload_ParticleLinkedAssetListDefStream
==============
*/
void Preload_ParticleLinkedAssetListDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleLinkedAssetDef *v4; 
  __int64 numAssets; 
  ParticleLinkedAssetDef *i; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 50494, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleLinkedAssetListDef;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      if ( varParticleLinkedAssetListDef->assetList )
      {
        v4 = varParticleLinkedAssetDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varParticleLinkedAssetDef = (ParticleLinkedAssetDef *)g_streamPosGlob.pos;
        numAssets = varParticleLinkedAssetListDef->numAssets;
        Load_Stream(AtStart, g_streamPosGlob.pos, 32 * numAssets);
        for ( i = varParticleLinkedAssetDef; numAssets; --numAssets )
        {
          varParticleLinkedAssetDef = i;
          Preload_ParticleLinkedAssetDef(NotAtStart);
          ++i;
        }
        varParticleLinkedAssetDef = v4;
      }
      pos = g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = (ParticleLinkedAssetListDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleMarkVisuals
==============
*/
void Preload_ParticleMarkVisuals(const DBStreamStart streamStart)
{
  Material **v1; 

  Load_Stream(streamStart, varParticleMarkVisuals, 0x18ui64);
  v1 = varMaterialHandle;
  varMaterialHandle = (Material **)varParticleMarkVisuals;
  Preload_MaterialHandleArray(NotAtStart, 3ui64);
  varMaterialHandle = v1;
}

/*
==============
Preload_ParticleMarkVisualsArray
==============
*/
void Preload_ParticleMarkVisualsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleMarkVisuals *i; 
  Material **v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleMarkVisuals, 24 * count);
  for ( i = varParticleMarkVisuals; v2; --v2 )
  {
    varParticleMarkVisuals = i;
    Load_Stream(NotAtStart, i, 0x18ui64);
    v4 = varMaterialHandle;
    varMaterialHandle = (Material **)varParticleMarkVisuals;
    Preload_MaterialHandleArray(NotAtStart, 3ui64);
    ++i;
    varMaterialHandle = v4;
  }
}

/*
==============
Preload_ParticleMarkVisualsStream
==============
*/
void Preload_ParticleMarkVisualsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  Material **v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 50086, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleMarkVisuals;
    do
    {
      Load_Stream(AtStart, pos, 0x18ui64);
      v4 = varMaterialHandle;
      varMaterialHandle = (Material **)varParticleMarkVisuals;
      Preload_MaterialHandleArray(NotAtStart, 3ui64);
      pos = g_streamPosGlob.pos;
      varParticleMarkVisuals = (ParticleMarkVisuals *)g_streamPosGlob.pos;
      varMaterialHandle = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleMirrorTextureType
==============
*/
void Preload_ParticleMirrorTextureType(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleMirrorTextureType, 4ui64);
}

/*
==============
Preload_ParticleMirrorTextureTypeArray
==============
*/
void Preload_ParticleMirrorTextureTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleMirrorTextureType, 4 * count);
}

/*
==============
Preload_ParticleMirrorTextureTypeStream
==============
*/
void Preload_ParticleMirrorTextureTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 55111, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleMirrorTextureType;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varParticleMirrorTextureType = (ParticleMirrorTextureType *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModifier
==============
*/
void Preload_ParticleModifier(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModifier, 0x20ui64);
}

/*
==============
Preload_ParticleModifierArray
==============
*/
void Preload_ParticleModifierArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModifier, 32 * count);
}

/*
==============
Preload_ParticleModifierStream
==============
*/
void Preload_ParticleModifierStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ParticleModifier *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 50755, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = varParticleModifier;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      pos = (ParticleModifier *)g_streamPosGlob.pos;
      varParticleModifier = (ParticleModifier *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleAttractor
==============
*/
void Preload_ParticleModuleAttractor(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleAttractor, 0x30ui64);
}

/*
==============
Preload_ParticleModuleAttractorArray
==============
*/
void Preload_ParticleModuleAttractorArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleAttractor, 48 * count);
}

/*
==============
Preload_ParticleModuleAttractorStream
==============
*/
void Preload_ParticleModuleAttractorStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 60275, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleAttractor;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleAttractor = (ParticleModuleAttractor *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleAxesFlags
==============
*/
void Preload_ParticleModuleAxesFlags(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleAxesFlags, 1ui64);
}

/*
==============
Preload_ParticleModuleAxesFlagsArray
==============
*/
void Preload_ParticleModuleAxesFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleAxesFlags, count);
}

/*
==============
Preload_ParticleModuleAxesFlagsStream
==============
*/
void Preload_ParticleModuleAxesFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 49467, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleAxesFlags;
    do
    {
      Load_Stream(AtStart, pos, 1ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleAxesFlags = (ParticleModuleAxesFlags *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleAxis
==============
*/
void Preload_ParticleModuleAxis(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleAxis, 1ui64);
}

/*
==============
Preload_ParticleModuleAxisArray
==============
*/
void Preload_ParticleModuleAxisArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleAxis, count);
}

/*
==============
Preload_ParticleModuleAxisStream
==============
*/
void Preload_ParticleModuleAxisStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 57505, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleAxis;
    do
    {
      Load_Stream(AtStart, pos, 1ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleAxis = (ParticleModuleAxis *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleColorGraph
==============
*/
void Preload_ParticleModuleColorGraph(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 

  Load_Stream(streamStart, varParticleModuleColorGraph, 0x90ui64);
  v1 = varParticleCurveDef;
  varParticleCurveDef = varParticleModuleColorGraph->m_curves;
  Preload_ParticleCurveDefArray(NotAtStart, 8ui64);
  varParticleCurveDef = v1;
}

/*
==============
Preload_ParticleModuleColorGraphArray
==============
*/
void Preload_ParticleModuleColorGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleColorGraph *i; 
  ParticleCurveDef *v4; 
  ParticleCurveDef *v5; 
  __int64 v6; 
  ParticleCurveControlPointDef *v7; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleColorGraph, 144 * count);
  for ( i = varParticleModuleColorGraph; v2; --v2 )
  {
    varParticleModuleColorGraph = i;
    Load_Stream(NotAtStart, i, 0x90ui64);
    v4 = varParticleCurveDef;
    varParticleCurveDef = varParticleModuleColorGraph->m_curves;
    Load_Stream(NotAtStart, varParticleModuleColorGraph->m_curves, 0x80ui64);
    v5 = varParticleCurveDef;
    v6 = 8i64;
    do
    {
      varParticleCurveDef = v5;
      Load_Stream(NotAtStart, v5, 0x10ui64);
      if ( varParticleCurveDef->controlPoints )
      {
        v7 = varParticleCurveControlPointDef;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
        varParticleCurveControlPointDef = v7;
      }
      ++v5;
      --v6;
    }
    while ( v6 );
    ++i;
    varParticleCurveDef = v4;
  }
}

/*
==============
Preload_ParticleModuleColorGraphStream
==============
*/
void Preload_ParticleModuleColorGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 
  ParticleCurveDef *v5; 
  __int64 v6; 
  ParticleCurveControlPointDef *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 60443, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleColorGraph;
    do
    {
      Load_Stream(AtStart, pos, 0x90ui64);
      v4 = varParticleCurveDef;
      varParticleCurveDef = varParticleModuleColorGraph->m_curves;
      Load_Stream(NotAtStart, varParticleModuleColorGraph->m_curves, 0x80ui64);
      v5 = varParticleCurveDef;
      v6 = 8i64;
      do
      {
        varParticleCurveDef = v5;
        Load_Stream(NotAtStart, v5, 0x10ui64);
        if ( varParticleCurveDef->controlPoints )
        {
          v7 = varParticleCurveControlPointDef;
          DB_PatchMem_FixStreamAlignment(0xFui64);
          DB_CheckCanIncStreamPos(0i64);
          varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
          varParticleCurveControlPointDef = v7;
        }
        ++v5;
        --v6;
      }
      while ( v6 );
      pos = g_streamPosGlob.pos;
      varParticleModuleColorGraph = (ParticleModuleColorGraph *)g_streamPosGlob.pos;
      varParticleCurveDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleColorLerp
==============
*/
void Preload_ParticleModuleColorLerp(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleColorLerp, 0x30ui64);
}

/*
==============
Preload_ParticleModuleColorLerpArray
==============
*/
void Preload_ParticleModuleColorLerpArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleColorLerp, 48 * count);
}

/*
==============
Preload_ParticleModuleColorLerpStream
==============
*/
void Preload_ParticleModuleColorLerpStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 60588, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleColorLerp;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleColorLerp = (ParticleModuleColorLerp *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleDef
==============
*/
void Preload_ParticleModuleDef(const DBStreamStart streamStart)
{
  ParticleModuleTypeDef *v1; 

  Load_Stream(streamStart, varParticleModuleDef, 0xF0ui64);
  v1 = varParticleModuleTypeDef;
  varParticleModuleTypeDef = &varParticleModuleDef->moduleData;
  Preload_ParticleModuleTypeDef(NotAtStart);
  varParticleModuleTypeDef = v1;
}

/*
==============
Preload_ParticleModuleDefArray
==============
*/
void Preload_ParticleModuleDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleDef *i; 
  ParticleModuleTypeDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleDef, 240 * count);
  for ( i = varParticleModuleDef; v2; --v2 )
  {
    varParticleModuleDef = i;
    Load_Stream(NotAtStart, i, 0xF0ui64);
    v4 = varParticleModuleTypeDef;
    varParticleModuleTypeDef = &varParticleModuleDef->moduleData;
    Preload_ParticleModuleTypeDef(NotAtStart);
    ++i;
    varParticleModuleTypeDef = v4;
  }
}

/*
==============
Preload_ParticleModuleDefStream
==============
*/
void Preload_ParticleModuleDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleModuleTypeDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 67542, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleDef;
    do
    {
      Load_Stream(AtStart, pos, 0xF0ui64);
      v4 = varParticleModuleTypeDef;
      varParticleModuleTypeDef = &varParticleModuleDef->moduleData;
      Preload_ParticleModuleTypeDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleDef = (ParticleModuleDef *)g_streamPosGlob.pos;
      varParticleModuleTypeDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleEmissionGraph
==============
*/
void Preload_ParticleModuleEmissionGraph(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 

  Load_Stream(streamStart, varParticleModuleEmissionGraph, 0x30ui64);
  v1 = varParticleCurveDef;
  varParticleCurveDef = varParticleModuleEmissionGraph->m_curves;
  Preload_ParticleCurveDefArray(NotAtStart, 2ui64);
  varParticleCurveDef = v1;
}

/*
==============
Preload_ParticleModuleEmissionGraphArray
==============
*/
void Preload_ParticleModuleEmissionGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleEmissionGraph *i; 
  ParticleCurveDef *v4; 
  ParticleCurveDef *v5; 
  __int64 v6; 
  ParticleCurveControlPointDef *v7; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleEmissionGraph, 48 * count);
  for ( i = varParticleModuleEmissionGraph; v2; --v2 )
  {
    varParticleModuleEmissionGraph = i;
    Load_Stream(NotAtStart, i, 0x30ui64);
    v4 = varParticleCurveDef;
    varParticleCurveDef = varParticleModuleEmissionGraph->m_curves;
    Load_Stream(NotAtStart, varParticleModuleEmissionGraph->m_curves, 0x20ui64);
    v5 = varParticleCurveDef;
    v6 = 2i64;
    do
    {
      varParticleCurveDef = v5;
      Load_Stream(NotAtStart, v5, 0x10ui64);
      if ( varParticleCurveDef->controlPoints )
      {
        v7 = varParticleCurveControlPointDef;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
        varParticleCurveControlPointDef = v7;
      }
      ++v5;
      --v6;
    }
    while ( v6 );
    ++i;
    varParticleCurveDef = v4;
  }
}

/*
==============
Preload_ParticleModuleEmissionGraphStream
==============
*/
void Preload_ParticleModuleEmissionGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 
  ParticleCurveDef *v5; 
  __int64 v6; 
  ParticleCurveControlPointDef *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 60710, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleEmissionGraph;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      v4 = varParticleCurveDef;
      varParticleCurveDef = varParticleModuleEmissionGraph->m_curves;
      Load_Stream(NotAtStart, varParticleModuleEmissionGraph->m_curves, 0x20ui64);
      v5 = varParticleCurveDef;
      v6 = 2i64;
      do
      {
        varParticleCurveDef = v5;
        Load_Stream(NotAtStart, v5, 0x10ui64);
        if ( varParticleCurveDef->controlPoints )
        {
          v7 = varParticleCurveControlPointDef;
          DB_PatchMem_FixStreamAlignment(0xFui64);
          DB_CheckCanIncStreamPos(0i64);
          varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
          varParticleCurveControlPointDef = v7;
        }
        ++v5;
        --v6;
      }
      while ( v6 );
      pos = g_streamPosGlob.pos;
      varParticleModuleEmissionGraph = (ParticleModuleEmissionGraph *)g_streamPosGlob.pos;
      varParticleCurveDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleEmissiveGraph
==============
*/
void Preload_ParticleModuleEmissiveGraph(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 

  Load_Stream(streamStart, varParticleModuleEmissiveGraph, 0xB0ui64);
  v1 = varParticleCurveDef;
  varParticleCurveDef = varParticleModuleEmissiveGraph->m_curves;
  Preload_ParticleCurveDefArray(NotAtStart, 0xAui64);
  varParticleCurveDef = v1;
}

/*
==============
Preload_ParticleModuleEmissiveGraphArray
==============
*/
void Preload_ParticleModuleEmissiveGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleEmissiveGraph *i; 
  ParticleCurveDef *v4; 
  ParticleCurveDef *v5; 
  __int64 v6; 
  ParticleCurveControlPointDef *v7; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleEmissiveGraph, 176 * count);
  for ( i = varParticleModuleEmissiveGraph; v2; --v2 )
  {
    varParticleModuleEmissiveGraph = i;
    Load_Stream(NotAtStart, i, 0xB0ui64);
    v4 = varParticleCurveDef;
    varParticleCurveDef = varParticleModuleEmissiveGraph->m_curves;
    Load_Stream(NotAtStart, varParticleModuleEmissiveGraph->m_curves, 0xA0ui64);
    v5 = varParticleCurveDef;
    v6 = 10i64;
    do
    {
      varParticleCurveDef = v5;
      Load_Stream(NotAtStart, v5, 0x10ui64);
      if ( varParticleCurveDef->controlPoints )
      {
        v7 = varParticleCurveControlPointDef;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
        varParticleCurveControlPointDef = v7;
      }
      ++v5;
      --v6;
    }
    while ( v6 );
    ++i;
    varParticleCurveDef = v4;
  }
}

/*
==============
Preload_ParticleModuleEmissiveGraphStream
==============
*/
void Preload_ParticleModuleEmissiveGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 
  ParticleCurveDef *v5; 
  __int64 v6; 
  ParticleCurveControlPointDef *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 60855, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleEmissiveGraph;
    do
    {
      Load_Stream(AtStart, pos, 0xB0ui64);
      v4 = varParticleCurveDef;
      varParticleCurveDef = varParticleModuleEmissiveGraph->m_curves;
      Load_Stream(NotAtStart, varParticleModuleEmissiveGraph->m_curves, 0xA0ui64);
      v5 = varParticleCurveDef;
      v6 = 10i64;
      do
      {
        varParticleCurveDef = v5;
        Load_Stream(NotAtStart, v5, 0x10ui64);
        if ( varParticleCurveDef->controlPoints )
        {
          v7 = varParticleCurveControlPointDef;
          DB_PatchMem_FixStreamAlignment(0xFui64);
          DB_CheckCanIncStreamPos(0i64);
          varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
          varParticleCurveControlPointDef = v7;
        }
        ++v5;
        --v6;
      }
      while ( v6 );
      pos = g_streamPosGlob.pos;
      varParticleModuleEmissiveGraph = (ParticleModuleEmissiveGraph *)g_streamPosGlob.pos;
      varParticleCurveDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleFlags
==============
*/
void Preload_ParticleModuleFlags(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleFlags, 4ui64);
}

/*
==============
Preload_ParticleModuleFlagsArray
==============
*/
void Preload_ParticleModuleFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleFlags, 4 * count);
}

/*
==============
Preload_ParticleModuleFlagsStream
==============
*/
void Preload_ParticleModuleFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 49413, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleFlags;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleFlags = (unsigned int *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleForce
==============
*/
void Preload_ParticleModuleForce(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleForce, 0x30ui64);
}

/*
==============
Preload_ParticleModuleForceArray
==============
*/
void Preload_ParticleModuleForceArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleForce, 48 * count);
}

/*
==============
Preload_ParticleModuleForceDragGraph
==============
*/
void Preload_ParticleModuleForceDragGraph(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 

  Load_Stream(streamStart, varParticleModuleForceDragGraph, 0x30ui64);
  v1 = varParticleCurveDef;
  varParticleCurveDef = varParticleModuleForceDragGraph->m_curves;
  Preload_ParticleCurveDefArray(NotAtStart, 2ui64);
  varParticleCurveDef = v1;
}

/*
==============
Preload_ParticleModuleForceDragGraphArray
==============
*/
void Preload_ParticleModuleForceDragGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleForceDragGraph *i; 
  ParticleCurveDef *v4; 
  ParticleCurveDef *v5; 
  __int64 v6; 
  ParticleCurveControlPointDef *v7; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleForceDragGraph, 48 * count);
  for ( i = varParticleModuleForceDragGraph; v2; --v2 )
  {
    varParticleModuleForceDragGraph = i;
    Load_Stream(NotAtStart, i, 0x30ui64);
    v4 = varParticleCurveDef;
    varParticleCurveDef = varParticleModuleForceDragGraph->m_curves;
    Load_Stream(NotAtStart, varParticleModuleForceDragGraph->m_curves, 0x20ui64);
    v5 = varParticleCurveDef;
    v6 = 2i64;
    do
    {
      varParticleCurveDef = v5;
      Load_Stream(NotAtStart, v5, 0x10ui64);
      if ( varParticleCurveDef->controlPoints )
      {
        v7 = varParticleCurveControlPointDef;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
        varParticleCurveControlPointDef = v7;
      }
      ++v5;
      --v6;
    }
    while ( v6 );
    ++i;
    varParticleCurveDef = v4;
  }
}

/*
==============
Preload_ParticleModuleForceDragGraphStream
==============
*/
void Preload_ParticleModuleForceDragGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 
  ParticleCurveDef *v5; 
  __int64 v6; 
  ParticleCurveControlPointDef *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 61267, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleForceDragGraph;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      v4 = varParticleCurveDef;
      varParticleCurveDef = varParticleModuleForceDragGraph->m_curves;
      Load_Stream(NotAtStart, varParticleModuleForceDragGraph->m_curves, 0x20ui64);
      v5 = varParticleCurveDef;
      v6 = 2i64;
      do
      {
        varParticleCurveDef = v5;
        Load_Stream(NotAtStart, v5, 0x10ui64);
        if ( varParticleCurveDef->controlPoints )
        {
          v7 = varParticleCurveControlPointDef;
          DB_PatchMem_FixStreamAlignment(0xFui64);
          DB_CheckCanIncStreamPos(0i64);
          varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
          varParticleCurveControlPointDef = v7;
        }
        ++v5;
        --v6;
      }
      while ( v6 );
      pos = g_streamPosGlob.pos;
      varParticleModuleForceDragGraph = (ParticleModuleForceDragGraph *)g_streamPosGlob.pos;
      varParticleCurveDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleForceStream
==============
*/
void Preload_ParticleModuleForceStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 61145, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleForce;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleForce = (ParticleModuleForce *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleGravity
==============
*/
void Preload_ParticleModuleGravity(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleGravity, 0x10ui64);
}

/*
==============
Preload_ParticleModuleGravityArray
==============
*/
void Preload_ParticleModuleGravityArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleGravity, 16 * count);
}

/*
==============
Preload_ParticleModuleGravityStream
==============
*/
void Preload_ParticleModuleGravityStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 61389, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleGravity;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleGravity = (ParticleModuleGravity *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleGroupDef
==============
*/
void Preload_ParticleModuleGroupDef(const DBStreamStart streamStart)
{
  ParticleModuleDef *v1; 
  __int64 numModules; 
  ParticleModuleDef *i; 
  ParticleModuleTypeDef *v4; 

  Load_Stream(streamStart, varParticleModuleGroupDef, 0x10ui64);
  if ( varParticleModuleGroupDef->moduleDefs )
  {
    v1 = varParticleModuleDef;
    DB_PatchMem_FixStreamAlignment(0xFui64);
    DB_CheckCanIncStreamPos(0i64);
    varParticleModuleDef = (ParticleModuleDef *)g_streamPosGlob.pos;
    numModules = varParticleModuleGroupDef->numModules;
    Load_Stream(AtStart, g_streamPosGlob.pos, 240 * numModules);
    for ( i = varParticleModuleDef; numModules; --numModules )
    {
      varParticleModuleDef = i;
      Load_Stream(NotAtStart, i, 0xF0ui64);
      v4 = varParticleModuleTypeDef;
      varParticleModuleTypeDef = &varParticleModuleDef->moduleData;
      Preload_ParticleModuleTypeDef(NotAtStart);
      ++i;
      varParticleModuleTypeDef = v4;
    }
    varParticleModuleDef = v1;
  }
}

/*
==============
Preload_ParticleModuleGroupDefArray
==============
*/
void Preload_ParticleModuleGroupDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleGroupDef *i; 
  ParticleModuleDef *v4; 
  __int64 numModules; 
  ParticleModuleDef *j; 
  ParticleModuleTypeDef *v7; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleGroupDef, 16 * count);
  for ( i = varParticleModuleGroupDef; v2; --v2 )
  {
    varParticleModuleGroupDef = i;
    Load_Stream(NotAtStart, i, 0x10ui64);
    if ( varParticleModuleGroupDef->moduleDefs )
    {
      v4 = varParticleModuleDef;
      DB_PatchMem_FixStreamAlignment(0xFui64);
      DB_CheckCanIncStreamPos(0i64);
      varParticleModuleDef = (ParticleModuleDef *)g_streamPosGlob.pos;
      numModules = varParticleModuleGroupDef->numModules;
      Load_Stream(AtStart, g_streamPosGlob.pos, 240 * numModules);
      for ( j = varParticleModuleDef; numModules; --numModules )
      {
        varParticleModuleDef = j;
        Load_Stream(NotAtStart, j, 0xF0ui64);
        v7 = varParticleModuleTypeDef;
        varParticleModuleTypeDef = &varParticleModuleDef->moduleData;
        Preload_ParticleModuleTypeDef(NotAtStart);
        ++j;
        varParticleModuleTypeDef = v7;
      }
      varParticleModuleDef = v4;
    }
    ++i;
  }
}

/*
==============
Preload_ParticleModuleGroupDefStream
==============
*/
void Preload_ParticleModuleGroupDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleModuleDef *v4; 
  __int64 numModules; 
  ParticleModuleDef *i; 
  ParticleModuleTypeDef *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 67666, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleGroupDef;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      if ( varParticleModuleGroupDef->moduleDefs )
      {
        v4 = varParticleModuleDef;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        varParticleModuleDef = (ParticleModuleDef *)g_streamPosGlob.pos;
        numModules = varParticleModuleGroupDef->numModules;
        Load_Stream(AtStart, g_streamPosGlob.pos, 240 * numModules);
        for ( i = varParticleModuleDef; numModules; --numModules )
        {
          varParticleModuleDef = i;
          Load_Stream(NotAtStart, i, 0xF0ui64);
          v7 = varParticleModuleTypeDef;
          varParticleModuleTypeDef = &varParticleModuleDef->moduleData;
          Preload_ParticleModuleTypeDef(NotAtStart);
          ++i;
          varParticleModuleTypeDef = v7;
        }
        varParticleModuleDef = v4;
      }
      pos = g_streamPosGlob.pos;
      varParticleModuleGroupDef = (ParticleModuleGroupDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleInitAtlas
==============
*/
void Preload_ParticleModuleInitAtlas(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 

  Load_Stream(streamStart, varParticleModuleInitAtlas, 0x40ui64);
  v1 = varParticleCurveDef;
  varParticleCurveDef = varParticleModuleInitAtlas->m_curves;
  Preload_ParticleCurveDefArray(NotAtStart, 2ui64);
  varParticleCurveDef = v1;
}

/*
==============
Preload_ParticleModuleInitAtlasArray
==============
*/
void Preload_ParticleModuleInitAtlasArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitAtlas *i; 
  ParticleCurveDef *v4; 
  ParticleCurveDef *v5; 
  __int64 v6; 
  ParticleCurveControlPointDef *v7; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleInitAtlas, count << 6);
  for ( i = varParticleModuleInitAtlas; v2; --v2 )
  {
    varParticleModuleInitAtlas = i;
    Load_Stream(NotAtStart, i, 0x40ui64);
    v4 = varParticleCurveDef;
    varParticleCurveDef = varParticleModuleInitAtlas->m_curves;
    Load_Stream(NotAtStart, varParticleModuleInitAtlas->m_curves, 0x20ui64);
    v5 = varParticleCurveDef;
    v6 = 2i64;
    do
    {
      varParticleCurveDef = v5;
      Load_Stream(NotAtStart, v5, 0x10ui64);
      if ( varParticleCurveDef->controlPoints )
      {
        v7 = varParticleCurveControlPointDef;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
        varParticleCurveControlPointDef = v7;
      }
      ++v5;
      --v6;
    }
    while ( v6 );
    ++i;
    varParticleCurveDef = v4;
  }
}

/*
==============
Preload_ParticleModuleInitAtlasStream
==============
*/
void Preload_ParticleModuleInitAtlasStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 
  ParticleCurveDef *v5; 
  __int64 v6; 
  ParticleCurveControlPointDef *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 50969, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitAtlas;
    do
    {
      Load_Stream(AtStart, pos, 0x40ui64);
      v4 = varParticleCurveDef;
      varParticleCurveDef = varParticleModuleInitAtlas->m_curves;
      Load_Stream(NotAtStart, varParticleModuleInitAtlas->m_curves, 0x20ui64);
      v5 = varParticleCurveDef;
      v6 = 2i64;
      do
      {
        varParticleCurveDef = v5;
        Load_Stream(NotAtStart, v5, 0x10ui64);
        if ( varParticleCurveDef->controlPoints )
        {
          v7 = varParticleCurveControlPointDef;
          DB_PatchMem_FixStreamAlignment(0xFui64);
          DB_CheckCanIncStreamPos(0i64);
          varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
          varParticleCurveControlPointDef = v7;
        }
        ++v5;
        --v6;
      }
      while ( v6 );
      pos = g_streamPosGlob.pos;
      varParticleModuleInitAtlas = (ParticleModuleInitAtlas *)g_streamPosGlob.pos;
      varParticleCurveDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleInitAttributes
==============
*/
void Preload_ParticleModuleInitAttributes(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleInitAttributes, 0x70ui64);
}

/*
==============
Preload_ParticleModuleInitAttributesArray
==============
*/
void Preload_ParticleModuleInitAttributesArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleInitAttributes, 112 * count);
}

/*
==============
Preload_ParticleModuleInitAttributesStream
==============
*/
void Preload_ParticleModuleInitAttributesStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 51252, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitAttributes;
    do
    {
      Load_Stream(AtStart, pos, 0x70ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitAttributes = (ParticleModuleInitAttributes *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleInitBeam
==============
*/
void Preload_ParticleModuleInitBeam(const DBStreamStart streamStart)
{
  ParticleLinkedAssetListDef *v1; 

  Load_Stream(streamStart, varParticleModuleInitBeam, 0x80ui64);
  v1 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleInitBeam->m_linkedAssetList;
  Preload_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v1;
}

/*
==============
Preload_ParticleModuleInitBeamArray
==============
*/
void Preload_ParticleModuleInitBeamArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitBeam *i; 
  ParticleLinkedAssetListDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleInitBeam, count << 7);
  for ( i = varParticleModuleInitBeam; v2; --v2 )
  {
    varParticleModuleInitBeam = i;
    Load_Stream(NotAtStart, i, 0x80ui64);
    v4 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &varParticleModuleInitBeam->m_linkedAssetList;
    Preload_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v4;
  }
}

/*
==============
Preload_ParticleModuleInitBeamFlags
==============
*/
void Preload_ParticleModuleInitBeamFlags(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleInitBeamFlags, 4ui64);
}

/*
==============
Preload_ParticleModuleInitBeamFlagsArray
==============
*/
void Preload_ParticleModuleInitBeamFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleInitBeamFlags, 4 * count);
}

/*
==============
Preload_ParticleModuleInitBeamFlagsStream
==============
*/
void Preload_ParticleModuleInitBeamFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 51306, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitBeamFlags;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitBeamFlags = (ParticleModuleInitBeamFlags *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleInitBeamStream
==============
*/
void Preload_ParticleModuleInitBeamStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleLinkedAssetListDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 51658, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitBeam;
    do
    {
      Load_Stream(AtStart, pos, 0x80ui64);
      v4 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &varParticleModuleInitBeam->m_linkedAssetList;
      Preload_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitBeam = (ParticleModuleInitBeam *)g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleInitCameraOffset
==============
*/
void Preload_ParticleModuleInitCameraOffset(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleInitCameraOffset, 0x10ui64);
}

/*
==============
Preload_ParticleModuleInitCameraOffsetArray
==============
*/
void Preload_ParticleModuleInitCameraOffsetArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleInitCameraOffset, 16 * count);
}

/*
==============
Preload_ParticleModuleInitCameraOffsetStream
==============
*/
void Preload_ParticleModuleInitCameraOffsetStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 51757, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitCameraOffset;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitCameraOffset = (ParticleModuleInitCameraOffset *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleInitCloud
==============
*/
void Preload_ParticleModuleInitCloud(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleInitCloud, 0x10ui64);
}

/*
==============
Preload_ParticleModuleInitCloudArray
==============
*/
void Preload_ParticleModuleInitCloudArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleInitCloud, 16 * count);
}

/*
==============
Preload_ParticleModuleInitCloudStream
==============
*/
void Preload_ParticleModuleInitCloudStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 51856, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitCloud;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitCloud = (ParticleModuleInitCloud *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleInitDecal
==============
*/
void Preload_ParticleModuleInitDecal(const DBStreamStart streamStart)
{
  ParticleLinkedAssetListDef *v1; 

  Load_Stream(streamStart, varParticleModuleInitDecal, 0x40ui64);
  v1 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleInitDecal->m_linkedAssetList;
  Preload_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v1;
}

/*
==============
Preload_ParticleModuleInitDecalArray
==============
*/
void Preload_ParticleModuleInitDecalArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitDecal *i; 
  ParticleLinkedAssetListDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleInitDecal, count << 6);
  for ( i = varParticleModuleInitDecal; v2; --v2 )
  {
    varParticleModuleInitDecal = i;
    Load_Stream(NotAtStart, i, 0x40ui64);
    v4 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &varParticleModuleInitDecal->m_linkedAssetList;
    Preload_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v4;
  }
}

/*
==============
Preload_ParticleModuleInitDecalStream
==============
*/
void Preload_ParticleModuleInitDecalStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleLinkedAssetListDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 52239, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitDecal;
    do
    {
      Load_Stream(AtStart, pos, 0x40ui64);
      v4 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &varParticleModuleInitDecal->m_linkedAssetList;
      Preload_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitDecal = (ParticleModuleInitDecal *)g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleInitDismember
==============
*/
void Preload_ParticleModuleInitDismember(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleInitDismember, 0x10ui64);
}

/*
==============
Preload_ParticleModuleInitDismemberArray
==============
*/
void Preload_ParticleModuleInitDismemberArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleInitDismember, 16 * count);
}

/*
==============
Preload_ParticleModuleInitDismemberStream
==============
*/
void Preload_ParticleModuleInitDismemberStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 60084, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitDismember;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitDismember = (ParticleModuleInitDismember *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleInitFlare
==============
*/
void Preload_ParticleModuleInitFlare(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 

  Load_Stream(streamStart, varParticleModuleInitFlare, 0x90ui64);
  v1 = varParticleCurveDef;
  varParticleCurveDef = varParticleModuleInitFlare->m_curves;
  Preload_ParticleCurveDefArray(NotAtStart, 4ui64);
  varParticleCurveDef = v1;
}

/*
==============
Preload_ParticleModuleInitFlareArray
==============
*/
void Preload_ParticleModuleInitFlareArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitFlare *i; 
  ParticleCurveDef *v4; 
  ParticleCurveDef *v5; 
  __int64 v6; 
  ParticleCurveControlPointDef *v7; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleInitFlare, 144 * count);
  for ( i = varParticleModuleInitFlare; v2; --v2 )
  {
    varParticleModuleInitFlare = i;
    Load_Stream(NotAtStart, i, 0x90ui64);
    v4 = varParticleCurveDef;
    varParticleCurveDef = varParticleModuleInitFlare->m_curves;
    Load_Stream(NotAtStart, varParticleModuleInitFlare->m_curves, 0x40ui64);
    v5 = varParticleCurveDef;
    v6 = 4i64;
    do
    {
      varParticleCurveDef = v5;
      Load_Stream(NotAtStart, v5, 0x10ui64);
      if ( varParticleCurveDef->controlPoints )
      {
        v7 = varParticleCurveControlPointDef;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
        varParticleCurveControlPointDef = v7;
      }
      ++v5;
      --v6;
    }
    while ( v6 );
    ++i;
    varParticleCurveDef = v4;
  }
}

/*
==============
Preload_ParticleModuleInitFlareStream
==============
*/
void Preload_ParticleModuleInitFlareStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 
  ParticleCurveDef *v5; 
  __int64 v6; 
  ParticleCurveControlPointDef *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 52568, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitFlare;
    do
    {
      Load_Stream(AtStart, pos, 0x90ui64);
      v4 = varParticleCurveDef;
      varParticleCurveDef = varParticleModuleInitFlare->m_curves;
      Load_Stream(NotAtStart, varParticleModuleInitFlare->m_curves, 0x40ui64);
      v5 = varParticleCurveDef;
      v6 = 4i64;
      do
      {
        varParticleCurveDef = v5;
        Load_Stream(NotAtStart, v5, 0x10ui64);
        if ( varParticleCurveDef->controlPoints )
        {
          v7 = varParticleCurveControlPointDef;
          DB_PatchMem_FixStreamAlignment(0xFui64);
          DB_CheckCanIncStreamPos(0i64);
          varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
          varParticleCurveControlPointDef = v7;
        }
        ++v5;
        --v6;
      }
      while ( v6 );
      pos = g_streamPosGlob.pos;
      varParticleModuleInitFlare = (ParticleModuleInitFlare *)g_streamPosGlob.pos;
      varParticleCurveDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleInitGeoTrail
==============
*/
void Preload_ParticleModuleInitGeoTrail(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleInitGeoTrail, 0x40ui64);
}

/*
==============
Preload_ParticleModuleInitGeoTrailArray
==============
*/
void Preload_ParticleModuleInitGeoTrailArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleInitGeoTrail, count << 6);
}

/*
==============
Preload_ParticleModuleInitGeoTrailStream
==============
*/
void Preload_ParticleModuleInitGeoTrailStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 53012, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitGeoTrail;
    do
    {
      Load_Stream(AtStart, pos, 0x40ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitGeoTrail = (ParticleModuleInitGeoTrail *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleInitKillWrapBox
==============
*/
void Preload_ParticleModuleInitKillWrapBox(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleInitKillWrapBox, 0x30ui64);
}

/*
==============
Preload_ParticleModuleInitKillWrapBoxArray
==============
*/
void Preload_ParticleModuleInitKillWrapBoxArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleInitKillWrapBox, 48 * count);
}

/*
==============
Preload_ParticleModuleInitKillWrapBoxStream
==============
*/
void Preload_ParticleModuleInitKillWrapBoxStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 53180, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitKillWrapBox;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitKillWrapBox = (ParticleModuleInitKillWrapBox *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleInitLightOmni
==============
*/
void Preload_ParticleModuleInitLightOmni(const DBStreamStart streamStart)
{
  ParticleLinkedAssetListDef *v1; 

  Load_Stream(streamStart, varParticleModuleInitLightOmni, 0x50ui64);
  v1 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleInitLightOmni->m_linkedAssetList;
  Preload_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v1;
}

/*
==============
Preload_ParticleModuleInitLightOmniArray
==============
*/
void Preload_ParticleModuleInitLightOmniArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitLightOmni *i; 
  ParticleLinkedAssetListDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleInitLightOmni, 80 * count);
  for ( i = varParticleModuleInitLightOmni; v2; --v2 )
  {
    varParticleModuleInitLightOmni = i;
    Load_Stream(NotAtStart, i, 0x50ui64);
    v4 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &varParticleModuleInitLightOmni->m_linkedAssetList;
    Preload_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v4;
  }
}

/*
==============
Preload_ParticleModuleInitLightOmniStream
==============
*/
void Preload_ParticleModuleInitLightOmniStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleLinkedAssetListDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 53693, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitLightOmni;
    do
    {
      Load_Stream(AtStart, pos, 0x50ui64);
      v4 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &varParticleModuleInitLightOmni->m_linkedAssetList;
      Preload_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitLightOmni = (ParticleModuleInitLightOmni *)g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleInitLightSpot
==============
*/
void Preload_ParticleModuleInitLightSpot(const DBStreamStart streamStart)
{
  ParticleLinkedAssetListDef *v1; 

  Load_Stream(streamStart, varParticleModuleInitLightSpot, 0x60ui64);
  v1 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleInitLightSpot->m_linkedAssetList;
  Preload_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v1;
}

/*
==============
Preload_ParticleModuleInitLightSpotArray
==============
*/
void Preload_ParticleModuleInitLightSpotArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitLightSpot *i; 
  ParticleLinkedAssetListDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleInitLightSpot, 96 * count);
  for ( i = varParticleModuleInitLightSpot; v2; --v2 )
  {
    varParticleModuleInitLightSpot = i;
    Load_Stream(NotAtStart, i, 0x60ui64);
    v4 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &varParticleModuleInitLightSpot->m_linkedAssetList;
    Preload_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v4;
  }
}

/*
==============
Preload_ParticleModuleInitLightSpotStream
==============
*/
void Preload_ParticleModuleInitLightSpotStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleLinkedAssetListDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 54252, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitLightSpot;
    do
    {
      Load_Stream(AtStart, pos, 0x60ui64);
      v4 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &varParticleModuleInitLightSpot->m_linkedAssetList;
      Preload_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitLightSpot = (ParticleModuleInitLightSpot *)g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleInitMaterial
==============
*/
void Preload_ParticleModuleInitMaterial(const DBStreamStart streamStart)
{
  ParticleLinkedAssetListDef *v1; 

  Load_Stream(streamStart, varParticleModuleInitMaterial, 0xE0ui64);
  v1 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleInitMaterial->m_linkedAssetList;
  Preload_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v1;
}

/*
==============
Preload_ParticleModuleInitMaterialArray
==============
*/
void Preload_ParticleModuleInitMaterialArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitMaterial *i; 
  ParticleLinkedAssetListDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleInitMaterial, 224 * count);
  for ( i = varParticleModuleInitMaterial; v2; --v2 )
  {
    varParticleModuleInitMaterial = i;
    Load_Stream(NotAtStart, i, 0xE0ui64);
    v4 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &varParticleModuleInitMaterial->m_linkedAssetList;
    Preload_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v4;
  }
}

/*
==============
Preload_ParticleModuleInitMaterialStream
==============
*/
void Preload_ParticleModuleInitMaterialStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleLinkedAssetListDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 55057, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitMaterial;
    do
    {
      Load_Stream(AtStart, pos, 0xE0ui64);
      v4 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &varParticleModuleInitMaterial->m_linkedAssetList;
      Preload_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitMaterial = (ParticleModuleInitMaterial *)g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleInitMirrorTexture
==============
*/
void Preload_ParticleModuleInitMirrorTexture(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleInitMirrorTexture, 0x10ui64);
}

/*
==============
Preload_ParticleModuleInitMirrorTextureArray
==============
*/
void Preload_ParticleModuleInitMirrorTextureArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleInitMirrorTexture, 16 * count);
}

/*
==============
Preload_ParticleModuleInitMirrorTextureStream
==============
*/
void Preload_ParticleModuleInitMirrorTextureStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 55256, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitMirrorTexture;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitMirrorTexture = (ParticleModuleInitMirrorTexture *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleInitModel
==============
*/
void Preload_ParticleModuleInitModel(const DBStreamStart streamStart)
{
  ParticleLinkedAssetListDef *v1; 

  Load_Stream(streamStart, varParticleModuleInitModel, 0x20ui64);
  v1 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleInitModel->m_linkedAssetList;
  Preload_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v1;
}

/*
==============
Preload_ParticleModuleInitModelArray
==============
*/
void Preload_ParticleModuleInitModelArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitModel *i; 
  ParticleLinkedAssetListDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleInitModel, 32 * count);
  for ( i = varParticleModuleInitModel; v2; --v2 )
  {
    varParticleModuleInitModel = i;
    Load_Stream(NotAtStart, i, 0x20ui64);
    v4 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &varParticleModuleInitModel->m_linkedAssetList;
    Preload_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v4;
  }
}

/*
==============
Preload_ParticleModuleInitModelStream
==============
*/
void Preload_ParticleModuleInitModelStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleLinkedAssetListDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 55424, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitModel;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      v4 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &varParticleModuleInitModel->m_linkedAssetList;
      Preload_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitModel = (ParticleModuleInitModel *)g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleInitOcclusionQuery
==============
*/
void Preload_ParticleModuleInitOcclusionQuery(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleInitOcclusionQuery, 0x30ui64);
}

/*
==============
Preload_ParticleModuleInitOcclusionQueryArray
==============
*/
void Preload_ParticleModuleInitOcclusionQueryArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleInitOcclusionQuery, 48 * count);
}

/*
==============
Preload_ParticleModuleInitOcclusionQueryStream
==============
*/
void Preload_ParticleModuleInitOcclusionQueryStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 55661, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitOcclusionQuery;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitOcclusionQuery = (ParticleModuleInitOcclusionQuery *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleInitOrientedSprite
==============
*/
void Preload_ParticleModuleInitOrientedSprite(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleInitOrientedSprite, 0x20ui64);
}

/*
==============
Preload_ParticleModuleInitOrientedSpriteArray
==============
*/
void Preload_ParticleModuleInitOrientedSpriteArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleInitOrientedSprite, 32 * count);
}

/*
==============
Preload_ParticleModuleInitOrientedSpriteStream
==============
*/
void Preload_ParticleModuleInitOrientedSpriteStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 55783, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitOrientedSprite;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitOrientedSprite = (ParticleModuleInitOrientedSprite *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleInitParticleSim
==============
*/
void Preload_ParticleModuleInitParticleSim(const DBStreamStart streamStart)
{
  ParticleLinkedAssetListDef *v1; 

  Load_Stream(streamStart, varParticleModuleInitParticleSim, 0x30ui64);
  v1 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleInitParticleSim->m_linkedAssetList;
  Preload_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v1;
}

/*
==============
Preload_ParticleModuleInitParticleSimArray
==============
*/
void Preload_ParticleModuleInitParticleSimArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitParticleSim *i; 
  ParticleLinkedAssetListDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleInitParticleSim, 48 * count);
  for ( i = varParticleModuleInitParticleSim; v2; --v2 )
  {
    varParticleModuleInitParticleSim = i;
    Load_Stream(NotAtStart, i, 0x30ui64);
    v4 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &varParticleModuleInitParticleSim->m_linkedAssetList;
    Preload_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v4;
  }
}

/*
==============
Preload_ParticleModuleInitParticleSimStream
==============
*/
void Preload_ParticleModuleInitParticleSimStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleLinkedAssetListDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 55951, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitParticleSim;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      v4 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &varParticleModuleInitParticleSim->m_linkedAssetList;
      Preload_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitParticleSim = (ParticleModuleInitParticleSim *)g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleInitPlayerFacing
==============
*/
void Preload_ParticleModuleInitPlayerFacing(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleInitPlayerFacing, 0x10ui64);
}

/*
==============
Preload_ParticleModuleInitPlayerFacingArray
==============
*/
void Preload_ParticleModuleInitPlayerFacingArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleInitPlayerFacing, 16 * count);
}

/*
==============
Preload_ParticleModuleInitPlayerFacingStream
==============
*/
void Preload_ParticleModuleInitPlayerFacingStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 56050, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitPlayerFacing;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitPlayerFacing = (ParticleModuleInitPlayerFacing *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleInitRelativeVelocity
==============
*/
void Preload_ParticleModuleInitRelativeVelocity(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleInitRelativeVelocity, 0x10ui64);
}

/*
==============
Preload_ParticleModuleInitRelativeVelocityArray
==============
*/
void Preload_ParticleModuleInitRelativeVelocityArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleInitRelativeVelocity, 16 * count);
}

/*
==============
Preload_ParticleModuleInitRelativeVelocityStream
==============
*/
void Preload_ParticleModuleInitRelativeVelocityStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 56249, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitRelativeVelocity;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitRelativeVelocity = (ParticleModuleInitRelativeVelocity *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleInitRotation3D
==============
*/
void Preload_ParticleModuleInitRotation3D(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleInitRotation3D, 0x50ui64);
}

/*
==============
Preload_ParticleModuleInitRotation3DArray
==============
*/
void Preload_ParticleModuleInitRotation3DArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleInitRotation3D, 80 * count);
}

/*
==============
Preload_ParticleModuleInitRotation3DStream
==============
*/
void Preload_ParticleModuleInitRotation3DStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 56585, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitRotation3D;
    do
    {
      Load_Stream(AtStart, pos, 0x50ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitRotation3D = (ParticleModuleInitRotation3D *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleInitRotation
==============
*/
void Preload_ParticleModuleInitRotation(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleInitRotation, 0x20ui64);
}

/*
==============
Preload_ParticleModuleInitRotationArray
==============
*/
void Preload_ParticleModuleInitRotationArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleInitRotation, 32 * count);
}

/*
==============
Preload_ParticleModuleInitRotationStream
==============
*/
void Preload_ParticleModuleInitRotationStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 56394, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitRotation;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitRotation = (ParticleModuleInitRotation *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleInitRunner
==============
*/
void Preload_ParticleModuleInitRunner(const DBStreamStart streamStart)
{
  ParticleLinkedAssetListDef *v1; 

  Load_Stream(streamStart, varParticleModuleInitRunner, 0x70ui64);
  v1 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleInitRunner->m_linkedAssetList;
  Preload_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v1;
}

/*
==============
Preload_ParticleModuleInitRunnerArray
==============
*/
void Preload_ParticleModuleInitRunnerArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitRunner *i; 
  ParticleLinkedAssetListDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleInitRunner, 112 * count);
  for ( i = varParticleModuleInitRunner; v2; --v2 )
  {
    varParticleModuleInitRunner = i;
    Load_Stream(NotAtStart, i, 0x70ui64);
    v4 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &varParticleModuleInitRunner->m_linkedAssetList;
    Preload_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v4;
  }
}

/*
==============
Preload_ParticleModuleInitRunnerStream
==============
*/
void Preload_ParticleModuleInitRunnerStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleLinkedAssetListDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 57099, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitRunner;
    do
    {
      Load_Stream(AtStart, pos, 0x70ui64);
      v4 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &varParticleModuleInitRunner->m_linkedAssetList;
      Preload_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitRunner = (ParticleModuleInitRunner *)g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleInitSound
==============
*/
void Preload_ParticleModuleInitSound(const DBStreamStart streamStart)
{
  ParticleLinkedAssetListDef *v1; 

  Load_Stream(streamStart, varParticleModuleInitSound, 0x20ui64);
  v1 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleInitSound->m_linkedAssetList;
  Preload_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v1;
}

/*
==============
Preload_ParticleModuleInitSoundArray
==============
*/
void Preload_ParticleModuleInitSoundArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitSound *i; 
  ParticleLinkedAssetListDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleInitSound, 32 * count);
  for ( i = varParticleModuleInitSound; v2; --v2 )
  {
    varParticleModuleInitSound = i;
    Load_Stream(NotAtStart, i, 0x20ui64);
    v4 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &varParticleModuleInitSound->m_linkedAssetList;
    Preload_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v4;
  }
}

/*
==============
Preload_ParticleModuleInitSoundStream
==============
*/
void Preload_ParticleModuleInitSoundStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleLinkedAssetListDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 57221, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitSound;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      v4 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &varParticleModuleInitSound->m_linkedAssetList;
      Preload_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitSound = (ParticleModuleInitSound *)g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleInitSpawn
==============
*/
void Preload_ParticleModuleInitSpawn(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 

  Load_Stream(streamStart, varParticleModuleInitSpawn, 0x20ui64);
  v1 = varParticleCurveDef;
  varParticleCurveDef = varParticleModuleInitSpawn->m_curves;
  Preload_ParticleCurveDefArray(NotAtStart, 1ui64);
  varParticleCurveDef = v1;
}

/*
==============
Preload_ParticleModuleInitSpawnArray
==============
*/
void Preload_ParticleModuleInitSpawnArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitSpawn *i; 
  ParticleCurveDef *v4; 
  ParticleCurveControlPointDef *v5; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleInitSpawn, 32 * count);
  for ( i = varParticleModuleInitSpawn; v2; --v2 )
  {
    varParticleModuleInitSpawn = i;
    Load_Stream(NotAtStart, i, 0x20ui64);
    v4 = varParticleCurveDef;
    varParticleCurveDef = varParticleModuleInitSpawn->m_curves;
    Load_Stream(NotAtStart, varParticleModuleInitSpawn->m_curves, 0x10ui64);
    Load_Stream(NotAtStart, varParticleCurveDef, 0x10ui64);
    if ( varParticleCurveDef->controlPoints )
    {
      v5 = varParticleCurveControlPointDef;
      DB_PatchMem_FixStreamAlignment(0xFui64);
      DB_CheckCanIncStreamPos(0i64);
      varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
      varParticleCurveControlPointDef = v5;
    }
    ++i;
    varParticleCurveDef = v4;
  }
}

/*
==============
Preload_ParticleModuleInitSpawnShapeBox
==============
*/
void Preload_ParticleModuleInitSpawnShapeBox(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 

  Load_Stream(streamStart, varParticleModuleInitSpawnShapeBox, 0xC0ui64);
  v1 = varParticleCurveDef;
  varParticleCurveDef = varParticleModuleInitSpawnShapeBox->m_curves;
  Preload_ParticleCurveDefArray(NotAtStart, 6ui64);
  varParticleCurveDef = v1;
}

/*
==============
Preload_ParticleModuleInitSpawnShapeBoxArray
==============
*/
void Preload_ParticleModuleInitSpawnShapeBoxArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitSpawnShapeBox *i; 
  ParticleCurveDef *v4; 
  ParticleCurveDef *v5; 
  __int64 v6; 
  ParticleCurveControlPointDef *v7; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleInitSpawnShapeBox, 192 * count);
  for ( i = varParticleModuleInitSpawnShapeBox; v2; --v2 )
  {
    varParticleModuleInitSpawnShapeBox = i;
    Load_Stream(NotAtStart, i, 0xC0ui64);
    v4 = varParticleCurveDef;
    varParticleCurveDef = varParticleModuleInitSpawnShapeBox->m_curves;
    Load_Stream(NotAtStart, varParticleModuleInitSpawnShapeBox->m_curves, 0x60ui64);
    v5 = varParticleCurveDef;
    v6 = 6i64;
    do
    {
      varParticleCurveDef = v5;
      Load_Stream(NotAtStart, v5, 0x10ui64);
      if ( varParticleCurveDef->controlPoints )
      {
        v7 = varParticleCurveControlPointDef;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
        varParticleCurveControlPointDef = v7;
      }
      ++v5;
      --v6;
    }
    while ( v6 );
    ++i;
    varParticleCurveDef = v4;
  }
}

/*
==============
Preload_ParticleModuleInitSpawnShapeBoxStream
==============
*/
void Preload_ParticleModuleInitSpawnShapeBoxStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 
  ParticleCurveDef *v5; 
  __int64 v6; 
  ParticleCurveControlPointDef *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 57811, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitSpawnShapeBox;
    do
    {
      Load_Stream(AtStart, pos, 0xC0ui64);
      v4 = varParticleCurveDef;
      varParticleCurveDef = varParticleModuleInitSpawnShapeBox->m_curves;
      Load_Stream(NotAtStart, varParticleModuleInitSpawnShapeBox->m_curves, 0x60ui64);
      v5 = varParticleCurveDef;
      v6 = 6i64;
      do
      {
        varParticleCurveDef = v5;
        Load_Stream(NotAtStart, v5, 0x10ui64);
        if ( varParticleCurveDef->controlPoints )
        {
          v7 = varParticleCurveControlPointDef;
          DB_PatchMem_FixStreamAlignment(0xFui64);
          DB_CheckCanIncStreamPos(0i64);
          varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
          varParticleCurveControlPointDef = v7;
        }
        ++v5;
        --v6;
      }
      while ( v6 );
      pos = g_streamPosGlob.pos;
      varParticleModuleInitSpawnShapeBox = (ParticleModuleInitSpawnShapeBox *)g_streamPosGlob.pos;
      varParticleCurveDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleInitSpawnShapeCylinder
==============
*/
void Preload_ParticleModuleInitSpawnShapeCylinder(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 

  Load_Stream(streamStart, varParticleModuleInitSpawnShapeCylinder, 0xA0ui64);
  v1 = varParticleCurveDef;
  varParticleCurveDef = varParticleModuleInitSpawnShapeCylinder->m_curves;
  Preload_ParticleCurveDefArray(NotAtStart, 5ui64);
  varParticleCurveDef = v1;
}

/*
==============
Preload_ParticleModuleInitSpawnShapeCylinderArray
==============
*/
void Preload_ParticleModuleInitSpawnShapeCylinderArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitSpawnShapeCylinder *i; 
  ParticleCurveDef *v4; 
  ParticleCurveDef *v5; 
  __int64 v6; 
  ParticleCurveControlPointDef *v7; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleInitSpawnShapeCylinder, 160 * count);
  for ( i = varParticleModuleInitSpawnShapeCylinder; v2; --v2 )
  {
    varParticleModuleInitSpawnShapeCylinder = i;
    Load_Stream(NotAtStart, i, 0xA0ui64);
    v4 = varParticleCurveDef;
    varParticleCurveDef = varParticleModuleInitSpawnShapeCylinder->m_curves;
    Load_Stream(NotAtStart, varParticleModuleInitSpawnShapeCylinder->m_curves, 0x50ui64);
    v5 = varParticleCurveDef;
    v6 = 5i64;
    do
    {
      varParticleCurveDef = v5;
      Load_Stream(NotAtStart, v5, 0x10ui64);
      if ( varParticleCurveDef->controlPoints )
      {
        v7 = varParticleCurveControlPointDef;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
        varParticleCurveControlPointDef = v7;
      }
      ++v5;
      --v6;
    }
    while ( v6 );
    ++i;
    varParticleCurveDef = v4;
  }
}

/*
==============
Preload_ParticleModuleInitSpawnShapeCylinderStream
==============
*/
void Preload_ParticleModuleInitSpawnShapeCylinderStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 
  ParticleCurveDef *v5; 
  __int64 v6; 
  ParticleCurveControlPointDef *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 58209, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitSpawnShapeCylinder;
    do
    {
      Load_Stream(AtStart, pos, 0xA0ui64);
      v4 = varParticleCurveDef;
      varParticleCurveDef = varParticleModuleInitSpawnShapeCylinder->m_curves;
      Load_Stream(NotAtStart, varParticleModuleInitSpawnShapeCylinder->m_curves, 0x50ui64);
      v5 = varParticleCurveDef;
      v6 = 5i64;
      do
      {
        varParticleCurveDef = v5;
        Load_Stream(NotAtStart, v5, 0x10ui64);
        if ( varParticleCurveDef->controlPoints )
        {
          v7 = varParticleCurveControlPointDef;
          DB_PatchMem_FixStreamAlignment(0xFui64);
          DB_CheckCanIncStreamPos(0i64);
          varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
          varParticleCurveControlPointDef = v7;
        }
        ++v5;
        --v6;
      }
      while ( v6 );
      pos = g_streamPosGlob.pos;
      varParticleModuleInitSpawnShapeCylinder = (ParticleModuleInitSpawnShapeCylinder *)g_streamPosGlob.pos;
      varParticleCurveDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleInitSpawnShapeEllipsoid
==============
*/
void Preload_ParticleModuleInitSpawnShapeEllipsoid(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 

  Load_Stream(streamStart, varParticleModuleInitSpawnShapeEllipsoid, 0xB0ui64);
  v1 = varParticleCurveDef;
  varParticleCurveDef = varParticleModuleInitSpawnShapeEllipsoid->m_curves;
  Preload_ParticleCurveDefArray(NotAtStart, 6ui64);
  varParticleCurveDef = v1;
}

/*
==============
Preload_ParticleModuleInitSpawnShapeEllipsoidArray
==============
*/
void Preload_ParticleModuleInitSpawnShapeEllipsoidArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitSpawnShapeEllipsoid *i; 
  ParticleCurveDef *v4; 
  ParticleCurveDef *v5; 
  __int64 v6; 
  ParticleCurveControlPointDef *v7; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleInitSpawnShapeEllipsoid, 176 * count);
  for ( i = varParticleModuleInitSpawnShapeEllipsoid; v2; --v2 )
  {
    varParticleModuleInitSpawnShapeEllipsoid = i;
    Load_Stream(NotAtStart, i, 0xB0ui64);
    v4 = varParticleCurveDef;
    varParticleCurveDef = varParticleModuleInitSpawnShapeEllipsoid->m_curves;
    Load_Stream(NotAtStart, varParticleModuleInitSpawnShapeEllipsoid->m_curves, 0x60ui64);
    v5 = varParticleCurveDef;
    v6 = 6i64;
    do
    {
      varParticleCurveDef = v5;
      Load_Stream(NotAtStart, v5, 0x10ui64);
      if ( varParticleCurveDef->controlPoints )
      {
        v7 = varParticleCurveControlPointDef;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
        varParticleCurveControlPointDef = v7;
      }
      ++v5;
      --v6;
    }
    while ( v6 );
    ++i;
    varParticleCurveDef = v4;
  }
}

/*
==============
Preload_ParticleModuleInitSpawnShapeEllipsoidStream
==============
*/
void Preload_ParticleModuleInitSpawnShapeEllipsoidStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 
  ParticleCurveDef *v5; 
  __int64 v6; 
  ParticleCurveControlPointDef *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 58538, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitSpawnShapeEllipsoid;
    do
    {
      Load_Stream(AtStart, pos, 0xB0ui64);
      v4 = varParticleCurveDef;
      varParticleCurveDef = varParticleModuleInitSpawnShapeEllipsoid->m_curves;
      Load_Stream(NotAtStart, varParticleModuleInitSpawnShapeEllipsoid->m_curves, 0x60ui64);
      v5 = varParticleCurveDef;
      v6 = 6i64;
      do
      {
        varParticleCurveDef = v5;
        Load_Stream(NotAtStart, v5, 0x10ui64);
        if ( varParticleCurveDef->controlPoints )
        {
          v7 = varParticleCurveControlPointDef;
          DB_PatchMem_FixStreamAlignment(0xFui64);
          DB_CheckCanIncStreamPos(0i64);
          varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
          varParticleCurveControlPointDef = v7;
        }
        ++v5;
        --v6;
      }
      while ( v6 );
      pos = g_streamPosGlob.pos;
      varParticleModuleInitSpawnShapeEllipsoid = (ParticleModuleInitSpawnShapeEllipsoid *)g_streamPosGlob.pos;
      varParticleCurveDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleInitSpawnShapeMesh
==============
*/
void Preload_ParticleModuleInitSpawnShapeMesh(const DBStreamStart streamStart)
{
  ParticleLinkedAssetListDef *v1; 
  ParticleModuleInitSpawnShapeMesh *v2; 
  ParticleSpawnMeshAssetDef *v3; 
  ParticleCurveDef *v4; 

  Load_Stream(streamStart, varParticleModuleInitSpawnShapeMesh, 0x80ui64);
  v1 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleInitSpawnShapeMesh->m_linkedAssetList;
  Preload_ParticleLinkedAssetListDef(NotAtStart);
  v2 = varParticleModuleInitSpawnShapeMesh;
  varParticleLinkedAssetListDef = v1;
  if ( varParticleModuleInitSpawnShapeMesh->m_meshAssetData )
  {
    v3 = varParticleSpawnMeshAssetDef;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varParticleSpawnMeshAssetDef = (ParticleSpawnMeshAssetDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleModuleDef->moduleData.initAttributes.m_colorMin.v.m128_u32[0]);
    v2 = varParticleModuleInitSpawnShapeMesh;
    varParticleSpawnMeshAssetDef = v3;
  }
  v4 = varParticleCurveDef;
  varParticleCurveDef = v2->m_curves;
  Preload_ParticleCurveDefArray(NotAtStart, 3ui64);
  varParticleCurveDef = v4;
}

/*
==============
Preload_ParticleModuleInitSpawnShapeMeshArray
==============
*/
void Preload_ParticleModuleInitSpawnShapeMeshArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitSpawnShapeMesh *i; 
  ParticleLinkedAssetListDef *v4; 
  ParticleModuleInitSpawnShapeMesh *v5; 
  ParticleSpawnMeshAssetDef *v6; 
  ParticleCurveDef *v7; 
  ParticleCurveDef *v8; 
  __int64 v9; 
  ParticleCurveControlPointDef *v10; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleInitSpawnShapeMesh, count << 7);
  for ( i = varParticleModuleInitSpawnShapeMesh; v2; --v2 )
  {
    varParticleModuleInitSpawnShapeMesh = i;
    Load_Stream(NotAtStart, i, 0x80ui64);
    v4 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &varParticleModuleInitSpawnShapeMesh->m_linkedAssetList;
    Preload_ParticleLinkedAssetListDef(NotAtStart);
    v5 = varParticleModuleInitSpawnShapeMesh;
    varParticleLinkedAssetListDef = v4;
    if ( varParticleModuleInitSpawnShapeMesh->m_meshAssetData )
    {
      v6 = varParticleSpawnMeshAssetDef;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      varParticleSpawnMeshAssetDef = (ParticleSpawnMeshAssetDef *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleModuleDef->moduleData.initAttributes.m_colorMin.v.m128_u32[0]);
      v5 = varParticleModuleInitSpawnShapeMesh;
      varParticleSpawnMeshAssetDef = v6;
    }
    v7 = varParticleCurveDef;
    varParticleCurveDef = v5->m_curves;
    Load_Stream(NotAtStart, v5->m_curves, 0x30ui64);
    v8 = varParticleCurveDef;
    v9 = 3i64;
    do
    {
      varParticleCurveDef = v8;
      Load_Stream(NotAtStart, v8, 0x10ui64);
      if ( varParticleCurveDef->controlPoints )
      {
        v10 = varParticleCurveControlPointDef;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
        varParticleCurveControlPointDef = v10;
      }
      ++v8;
      --v9;
    }
    while ( v9 );
    ++i;
    varParticleCurveDef = v7;
  }
}

/*
==============
Preload_ParticleModuleInitSpawnShapeMeshStream
==============
*/
void Preload_ParticleModuleInitSpawnShapeMeshStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleLinkedAssetListDef *v4; 
  ParticleModuleInitSpawnShapeMesh *v5; 
  ParticleSpawnMeshAssetDef *v6; 
  ParticleCurveDef *v7; 
  ParticleCurveDef *v8; 
  __int64 v9; 
  ParticleCurveControlPointDef *v10; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 59014, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitSpawnShapeMesh;
    do
    {
      Load_Stream(AtStart, pos, 0x80ui64);
      v4 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &varParticleModuleInitSpawnShapeMesh->m_linkedAssetList;
      Preload_ParticleLinkedAssetListDef(NotAtStart);
      v5 = varParticleModuleInitSpawnShapeMesh;
      varParticleLinkedAssetListDef = v4;
      if ( varParticleModuleInitSpawnShapeMesh->m_meshAssetData )
      {
        v6 = varParticleSpawnMeshAssetDef;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        varParticleSpawnMeshAssetDef = (ParticleSpawnMeshAssetDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleModuleDef->moduleData.initAttributes.m_colorMin.v.m128_u32[0]);
        v5 = varParticleModuleInitSpawnShapeMesh;
        varParticleSpawnMeshAssetDef = v6;
      }
      v7 = varParticleCurveDef;
      varParticleCurveDef = v5->m_curves;
      Load_Stream(NotAtStart, v5->m_curves, 0x30ui64);
      v8 = varParticleCurveDef;
      v9 = 3i64;
      do
      {
        varParticleCurveDef = v8;
        Load_Stream(NotAtStart, v8, 0x10ui64);
        if ( varParticleCurveDef->controlPoints )
        {
          v10 = varParticleCurveControlPointDef;
          DB_PatchMem_FixStreamAlignment(0xFui64);
          DB_CheckCanIncStreamPos(0i64);
          varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
          varParticleCurveControlPointDef = v10;
        }
        ++v8;
        --v9;
      }
      while ( v9 );
      pos = g_streamPosGlob.pos;
      varParticleModuleInitSpawnShapeMesh = (ParticleModuleInitSpawnShapeMesh *)g_streamPosGlob.pos;
      varParticleCurveDef = v7;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleInitSpawnShapeSphere
==============
*/
void Preload_ParticleModuleInitSpawnShapeSphere(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 

  Load_Stream(streamStart, varParticleModuleInitSpawnShapeSphere, 0x80ui64);
  v1 = varParticleCurveDef;
  varParticleCurveDef = varParticleModuleInitSpawnShapeSphere->m_curves;
  Preload_ParticleCurveDefArray(NotAtStart, 4ui64);
  varParticleCurveDef = v1;
}

/*
==============
Preload_ParticleModuleInitSpawnShapeSphereArray
==============
*/
void Preload_ParticleModuleInitSpawnShapeSphereArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitSpawnShapeSphere *i; 
  ParticleCurveDef *v4; 
  ParticleCurveDef *v5; 
  __int64 v6; 
  ParticleCurveControlPointDef *v7; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleInitSpawnShapeSphere, count << 7);
  for ( i = varParticleModuleInitSpawnShapeSphere; v2; --v2 )
  {
    varParticleModuleInitSpawnShapeSphere = i;
    Load_Stream(NotAtStart, i, 0x80ui64);
    v4 = varParticleCurveDef;
    varParticleCurveDef = varParticleModuleInitSpawnShapeSphere->m_curves;
    Load_Stream(NotAtStart, varParticleModuleInitSpawnShapeSphere->m_curves, 0x40ui64);
    v5 = varParticleCurveDef;
    v6 = 4i64;
    do
    {
      varParticleCurveDef = v5;
      Load_Stream(NotAtStart, v5, 0x10ui64);
      if ( varParticleCurveDef->controlPoints )
      {
        v7 = varParticleCurveControlPointDef;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
        varParticleCurveControlPointDef = v7;
      }
      ++v5;
      --v6;
    }
    while ( v6 );
    ++i;
    varParticleCurveDef = v4;
  }
}

/*
==============
Preload_ParticleModuleInitSpawnShapeSphereStream
==============
*/
void Preload_ParticleModuleInitSpawnShapeSphereStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 
  ParticleCurveDef *v5; 
  __int64 v6; 
  ParticleCurveControlPointDef *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 59320, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitSpawnShapeSphere;
    do
    {
      Load_Stream(AtStart, pos, 0x80ui64);
      v4 = varParticleCurveDef;
      varParticleCurveDef = varParticleModuleInitSpawnShapeSphere->m_curves;
      Load_Stream(NotAtStart, varParticleModuleInitSpawnShapeSphere->m_curves, 0x40ui64);
      v5 = varParticleCurveDef;
      v6 = 4i64;
      do
      {
        varParticleCurveDef = v5;
        Load_Stream(NotAtStart, v5, 0x10ui64);
        if ( varParticleCurveDef->controlPoints )
        {
          v7 = varParticleCurveControlPointDef;
          DB_PatchMem_FixStreamAlignment(0xFui64);
          DB_CheckCanIncStreamPos(0i64);
          varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
          varParticleCurveControlPointDef = v7;
        }
        ++v5;
        --v6;
      }
      while ( v6 );
      pos = g_streamPosGlob.pos;
      varParticleModuleInitSpawnShapeSphere = (ParticleModuleInitSpawnShapeSphere *)g_streamPosGlob.pos;
      varParticleCurveDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleInitSpawnStream
==============
*/
void Preload_ParticleModuleInitSpawnStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 
  ParticleCurveControlPointDef *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 57343, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitSpawn;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      v4 = varParticleCurveDef;
      varParticleCurveDef = varParticleModuleInitSpawn->m_curves;
      Load_Stream(NotAtStart, varParticleModuleInitSpawn->m_curves, 0x10ui64);
      Load_Stream(NotAtStart, varParticleCurveDef, 0x10ui64);
      if ( varParticleCurveDef->controlPoints )
      {
        v5 = varParticleCurveControlPointDef;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
        varParticleCurveControlPointDef = v5;
      }
      pos = g_streamPosGlob.pos;
      varParticleModuleInitSpawn = (ParticleModuleInitSpawn *)g_streamPosGlob.pos;
      varParticleCurveDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleInitTail
==============
*/
void Preload_ParticleModuleInitTail(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleInitTail, 0x10ui64);
}

/*
==============
Preload_ParticleModuleInitTailArray
==============
*/
void Preload_ParticleModuleInitTailArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleInitTail, 16 * count);
}

/*
==============
Preload_ParticleModuleInitTailStream
==============
*/
void Preload_ParticleModuleInitTailStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 59534, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitTail;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitTail = (ParticleModuleInitTail *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleInitVectorField
==============
*/
void Preload_ParticleModuleInitVectorField(const DBStreamStart streamStart)
{
  ParticleLinkedAssetListDef *v1; 

  Load_Stream(streamStart, varParticleModuleInitVectorField, 0x30ui64);
  v1 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleInitVectorField->m_linkedAssetList;
  Preload_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v1;
}

/*
==============
Preload_ParticleModuleInitVectorFieldArray
==============
*/
void Preload_ParticleModuleInitVectorFieldArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleInitVectorField *i; 
  ParticleLinkedAssetListDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleInitVectorField, 48 * count);
  for ( i = varParticleModuleInitVectorField; v2; --v2 )
  {
    varParticleModuleInitVectorField = i;
    Load_Stream(NotAtStart, i, 0x30ui64);
    v4 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &varParticleModuleInitVectorField->m_linkedAssetList;
    Preload_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v4;
  }
}

/*
==============
Preload_ParticleModuleInitVectorFieldStream
==============
*/
void Preload_ParticleModuleInitVectorFieldStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleLinkedAssetListDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 59794, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitVectorField;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      v4 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &varParticleModuleInitVectorField->m_linkedAssetList;
      Preload_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitVectorField = (ParticleModuleInitVectorField *)g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleInitVolumetric
==============
*/
void Preload_ParticleModuleInitVolumetric(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleInitVolumetric, 0x20ui64);
}

/*
==============
Preload_ParticleModuleInitVolumetricArray
==============
*/
void Preload_ParticleModuleInitVolumetricArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleInitVolumetric, 32 * count);
}

/*
==============
Preload_ParticleModuleInitVolumetricStream
==============
*/
void Preload_ParticleModuleInitVolumetricStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 59985, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleInitVolumetric;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleInitVolumetric = (ParticleModuleInitVolumetric *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleIntensityGraph
==============
*/
void Preload_ParticleModuleIntensityGraph(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 

  Load_Stream(streamStart, varParticleModuleIntensityGraph, 0x30ui64);
  v1 = varParticleCurveDef;
  varParticleCurveDef = varParticleModuleIntensityGraph->m_curves;
  Preload_ParticleCurveDefArray(NotAtStart, 2ui64);
  varParticleCurveDef = v1;
}

/*
==============
Preload_ParticleModuleIntensityGraphArray
==============
*/
void Preload_ParticleModuleIntensityGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleIntensityGraph *i; 
  ParticleCurveDef *v4; 
  ParticleCurveDef *v5; 
  __int64 v6; 
  ParticleCurveControlPointDef *v7; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleIntensityGraph, 48 * count);
  for ( i = varParticleModuleIntensityGraph; v2; --v2 )
  {
    varParticleModuleIntensityGraph = i;
    Load_Stream(NotAtStart, i, 0x30ui64);
    v4 = varParticleCurveDef;
    varParticleCurveDef = varParticleModuleIntensityGraph->m_curves;
    Load_Stream(NotAtStart, varParticleModuleIntensityGraph->m_curves, 0x20ui64);
    v5 = varParticleCurveDef;
    v6 = 2i64;
    do
    {
      varParticleCurveDef = v5;
      Load_Stream(NotAtStart, v5, 0x10ui64);
      if ( varParticleCurveDef->controlPoints )
      {
        v7 = varParticleCurveControlPointDef;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
        varParticleCurveControlPointDef = v7;
      }
      ++v5;
      --v6;
    }
    while ( v6 );
    ++i;
    varParticleCurveDef = v4;
  }
}

/*
==============
Preload_ParticleModuleIntensityGraphStream
==============
*/
void Preload_ParticleModuleIntensityGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 
  ParticleCurveDef *v5; 
  __int64 v6; 
  ParticleCurveControlPointDef *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 61534, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleIntensityGraph;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      v4 = varParticleCurveDef;
      varParticleCurveDef = varParticleModuleIntensityGraph->m_curves;
      Load_Stream(NotAtStart, varParticleModuleIntensityGraph->m_curves, 0x20ui64);
      v5 = varParticleCurveDef;
      v6 = 2i64;
      do
      {
        varParticleCurveDef = v5;
        Load_Stream(NotAtStart, v5, 0x10ui64);
        if ( varParticleCurveDef->controlPoints )
        {
          v7 = varParticleCurveControlPointDef;
          DB_PatchMem_FixStreamAlignment(0xFui64);
          DB_CheckCanIncStreamPos(0i64);
          varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
          varParticleCurveControlPointDef = v7;
        }
        ++v5;
        --v6;
      }
      while ( v6 );
      pos = g_streamPosGlob.pos;
      varParticleModuleIntensityGraph = (ParticleModuleIntensityGraph *)g_streamPosGlob.pos;
      varParticleCurveDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleParentVelocityGraph
==============
*/
void Preload_ParticleModuleParentVelocityGraph(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 

  Load_Stream(streamStart, varParticleModuleParentVelocityGraph, 0x30ui64);
  v1 = varParticleCurveDef;
  varParticleCurveDef = varParticleModuleParentVelocityGraph->m_curves;
  Preload_ParticleCurveDefArray(NotAtStart, 2ui64);
  varParticleCurveDef = v1;
}

/*
==============
Preload_ParticleModuleParentVelocityGraphArray
==============
*/
void Preload_ParticleModuleParentVelocityGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleParentVelocityGraph *i; 
  ParticleCurveDef *v4; 
  ParticleCurveDef *v5; 
  __int64 v6; 
  ParticleCurveControlPointDef *v7; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleParentVelocityGraph, 48 * count);
  for ( i = varParticleModuleParentVelocityGraph; v2; --v2 )
  {
    varParticleModuleParentVelocityGraph = i;
    Load_Stream(NotAtStart, i, 0x30ui64);
    v4 = varParticleCurveDef;
    varParticleCurveDef = varParticleModuleParentVelocityGraph->m_curves;
    Load_Stream(NotAtStart, varParticleModuleParentVelocityGraph->m_curves, 0x20ui64);
    v5 = varParticleCurveDef;
    v6 = 2i64;
    do
    {
      varParticleCurveDef = v5;
      Load_Stream(NotAtStart, v5, 0x10ui64);
      if ( varParticleCurveDef->controlPoints )
      {
        v7 = varParticleCurveControlPointDef;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
        varParticleCurveControlPointDef = v7;
      }
      ++v5;
      --v6;
    }
    while ( v6 );
    ++i;
    varParticleCurveDef = v4;
  }
}

/*
==============
Preload_ParticleModuleParentVelocityGraphStream
==============
*/
void Preload_ParticleModuleParentVelocityGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 
  ParticleCurveDef *v5; 
  __int64 v6; 
  ParticleCurveControlPointDef *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 61801, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleParentVelocityGraph;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      v4 = varParticleCurveDef;
      varParticleCurveDef = varParticleModuleParentVelocityGraph->m_curves;
      Load_Stream(NotAtStart, varParticleModuleParentVelocityGraph->m_curves, 0x20ui64);
      v5 = varParticleCurveDef;
      v6 = 2i64;
      do
      {
        varParticleCurveDef = v5;
        Load_Stream(NotAtStart, v5, 0x10ui64);
        if ( varParticleCurveDef->controlPoints )
        {
          v7 = varParticleCurveControlPointDef;
          DB_PatchMem_FixStreamAlignment(0xFui64);
          DB_CheckCanIncStreamPos(0i64);
          varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
          varParticleCurveControlPointDef = v7;
        }
        ++v5;
        --v6;
      }
      while ( v6 );
      pos = g_streamPosGlob.pos;
      varParticleModuleParentVelocityGraph = (ParticleModuleParentVelocityGraph *)g_streamPosGlob.pos;
      varParticleCurveDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModulePhysicsLight
==============
*/
void Preload_ParticleModulePhysicsLight(const DBStreamStart streamStart)
{
  ParticleLinkedAssetListDef *v1; 

  Load_Stream(streamStart, varParticleModulePhysicsLight, 0x20ui64);
  v1 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModulePhysicsLight->m_linkedAssetList;
  Preload_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v1;
}

/*
==============
Preload_ParticleModulePhysicsLightArray
==============
*/
void Preload_ParticleModulePhysicsLightArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModulePhysicsLight *i; 
  ParticleLinkedAssetListDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModulePhysicsLight, 32 * count);
  for ( i = varParticleModulePhysicsLight; v2; --v2 )
  {
    varParticleModulePhysicsLight = i;
    Load_Stream(NotAtStart, i, 0x20ui64);
    v4 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &varParticleModulePhysicsLight->m_linkedAssetList;
    Preload_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v4;
  }
}

/*
==============
Preload_ParticleModulePhysicsLightStream
==============
*/
void Preload_ParticleModulePhysicsLightStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleLinkedAssetListDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 61969, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModulePhysicsLight;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      v4 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &varParticleModulePhysicsLight->m_linkedAssetList;
      Preload_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModulePhysicsLight = (ParticleModulePhysicsLight *)g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModulePhysicsRayCast
==============
*/
void Preload_ParticleModulePhysicsRayCast(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModulePhysicsRayCast, 0x30ui64);
}

/*
==============
Preload_ParticleModulePhysicsRayCastArray
==============
*/
void Preload_ParticleModulePhysicsRayCastArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModulePhysicsRayCast, 48 * count);
}

/*
==============
Preload_ParticleModulePhysicsRayCastStream
==============
*/
void Preload_ParticleModulePhysicsRayCastStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 62183, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModulePhysicsRayCast;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      pos = g_streamPosGlob.pos;
      varParticleModulePhysicsRayCast = (ParticleModulePhysicsRayCast *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModulePositionGraph
==============
*/
void Preload_ParticleModulePositionGraph(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 

  Load_Stream(streamStart, varParticleModulePositionGraph, 0x70ui64);
  v1 = varParticleCurveDef;
  varParticleCurveDef = varParticleModulePositionGraph->m_curves;
  Preload_ParticleCurveDefArray(NotAtStart, 6ui64);
  varParticleCurveDef = v1;
}

/*
==============
Preload_ParticleModulePositionGraphArray
==============
*/
void Preload_ParticleModulePositionGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModulePositionGraph *i; 
  ParticleCurveDef *v4; 
  ParticleCurveDef *v5; 
  __int64 v6; 
  ParticleCurveControlPointDef *v7; 

  v2 = count;
  Load_Stream(streamStart, varParticleModulePositionGraph, 112 * count);
  for ( i = varParticleModulePositionGraph; v2; --v2 )
  {
    varParticleModulePositionGraph = i;
    Load_Stream(NotAtStart, i, 0x70ui64);
    v4 = varParticleCurveDef;
    varParticleCurveDef = varParticleModulePositionGraph->m_curves;
    Load_Stream(NotAtStart, varParticleModulePositionGraph->m_curves, 0x60ui64);
    v5 = varParticleCurveDef;
    v6 = 6i64;
    do
    {
      varParticleCurveDef = v5;
      Load_Stream(NotAtStart, v5, 0x10ui64);
      if ( varParticleCurveDef->controlPoints )
      {
        v7 = varParticleCurveControlPointDef;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
        varParticleCurveControlPointDef = v7;
      }
      ++v5;
      --v6;
    }
    while ( v6 );
    ++i;
    varParticleCurveDef = v4;
  }
}

/*
==============
Preload_ParticleModulePositionGraphStream
==============
*/
void Preload_ParticleModulePositionGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 
  ParticleCurveDef *v5; 
  __int64 v6; 
  ParticleCurveControlPointDef *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 62305, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModulePositionGraph;
    do
    {
      Load_Stream(AtStart, pos, 0x70ui64);
      v4 = varParticleCurveDef;
      varParticleCurveDef = varParticleModulePositionGraph->m_curves;
      Load_Stream(NotAtStart, varParticleModulePositionGraph->m_curves, 0x60ui64);
      v5 = varParticleCurveDef;
      v6 = 6i64;
      do
      {
        varParticleCurveDef = v5;
        Load_Stream(NotAtStart, v5, 0x10ui64);
        if ( varParticleCurveDef->controlPoints )
        {
          v7 = varParticleCurveControlPointDef;
          DB_PatchMem_FixStreamAlignment(0xFui64);
          DB_CheckCanIncStreamPos(0i64);
          varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
          varParticleCurveControlPointDef = v7;
        }
        ++v5;
        --v6;
      }
      while ( v6 );
      pos = g_streamPosGlob.pos;
      varParticleModulePositionGraph = (ParticleModulePositionGraph *)g_streamPosGlob.pos;
      varParticleCurveDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleRotationGraph3D
==============
*/
void Preload_ParticleModuleRotationGraph3D(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 

  Load_Stream(streamStart, varParticleModuleRotationGraph3D, 0x70ui64);
  v1 = varParticleCurveDef;
  varParticleCurveDef = varParticleModuleRotationGraph3D->m_curves;
  Preload_ParticleCurveDefArray(NotAtStart, 6ui64);
  varParticleCurveDef = v1;
}

/*
==============
Preload_ParticleModuleRotationGraph3DArray
==============
*/
void Preload_ParticleModuleRotationGraph3DArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleRotationGraph3D *i; 
  ParticleCurveDef *v4; 
  ParticleCurveDef *v5; 
  __int64 v6; 
  ParticleCurveControlPointDef *v7; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleRotationGraph3D, 112 * count);
  for ( i = varParticleModuleRotationGraph3D; v2; --v2 )
  {
    varParticleModuleRotationGraph3D = i;
    Load_Stream(NotAtStart, i, 0x70ui64);
    v4 = varParticleCurveDef;
    varParticleCurveDef = varParticleModuleRotationGraph3D->m_curves;
    Load_Stream(NotAtStart, varParticleModuleRotationGraph3D->m_curves, 0x60ui64);
    v5 = varParticleCurveDef;
    v6 = 6i64;
    do
    {
      varParticleCurveDef = v5;
      Load_Stream(NotAtStart, v5, 0x10ui64);
      if ( varParticleCurveDef->controlPoints )
      {
        v7 = varParticleCurveControlPointDef;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
        varParticleCurveControlPointDef = v7;
      }
      ++v5;
      --v6;
    }
    while ( v6 );
    ++i;
    varParticleCurveDef = v4;
  }
}

/*
==============
Preload_ParticleModuleRotationGraph3DStream
==============
*/
void Preload_ParticleModuleRotationGraph3DStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 
  ParticleCurveDef *v5; 
  __int64 v6; 
  ParticleCurveControlPointDef *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 62595, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleRotationGraph3D;
    do
    {
      Load_Stream(AtStart, pos, 0x70ui64);
      v4 = varParticleCurveDef;
      varParticleCurveDef = varParticleModuleRotationGraph3D->m_curves;
      Load_Stream(NotAtStart, varParticleModuleRotationGraph3D->m_curves, 0x60ui64);
      v5 = varParticleCurveDef;
      v6 = 6i64;
      do
      {
        varParticleCurveDef = v5;
        Load_Stream(NotAtStart, v5, 0x10ui64);
        if ( varParticleCurveDef->controlPoints )
        {
          v7 = varParticleCurveControlPointDef;
          DB_PatchMem_FixStreamAlignment(0xFui64);
          DB_CheckCanIncStreamPos(0i64);
          varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
          varParticleCurveControlPointDef = v7;
        }
        ++v5;
        --v6;
      }
      while ( v6 );
      pos = g_streamPosGlob.pos;
      varParticleModuleRotationGraph3D = (ParticleModuleRotationGraph3D *)g_streamPosGlob.pos;
      varParticleCurveDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleRotationGraph
==============
*/
void Preload_ParticleModuleRotationGraph(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 

  Load_Stream(streamStart, varParticleModuleRotationGraph, 0x30ui64);
  v1 = varParticleCurveDef;
  varParticleCurveDef = varParticleModuleRotationGraph->m_curves;
  Preload_ParticleCurveDefArray(NotAtStart, 2ui64);
  varParticleCurveDef = v1;
}

/*
==============
Preload_ParticleModuleRotationGraphArray
==============
*/
void Preload_ParticleModuleRotationGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleRotationGraph *i; 
  ParticleCurveDef *v4; 
  ParticleCurveDef *v5; 
  __int64 v6; 
  ParticleCurveControlPointDef *v7; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleRotationGraph, 48 * count);
  for ( i = varParticleModuleRotationGraph; v2; --v2 )
  {
    varParticleModuleRotationGraph = i;
    Load_Stream(NotAtStart, i, 0x30ui64);
    v4 = varParticleCurveDef;
    varParticleCurveDef = varParticleModuleRotationGraph->m_curves;
    Load_Stream(NotAtStart, varParticleModuleRotationGraph->m_curves, 0x20ui64);
    v5 = varParticleCurveDef;
    v6 = 2i64;
    do
    {
      varParticleCurveDef = v5;
      Load_Stream(NotAtStart, v5, 0x10ui64);
      if ( varParticleCurveDef->controlPoints )
      {
        v7 = varParticleCurveControlPointDef;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
        varParticleCurveControlPointDef = v7;
      }
      ++v5;
      --v6;
    }
    while ( v6 );
    ++i;
    varParticleCurveDef = v4;
  }
}

/*
==============
Preload_ParticleModuleRotationGraphStream
==============
*/
void Preload_ParticleModuleRotationGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 
  ParticleCurveDef *v5; 
  __int64 v6; 
  ParticleCurveControlPointDef *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 62450, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleRotationGraph;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      v4 = varParticleCurveDef;
      varParticleCurveDef = varParticleModuleRotationGraph->m_curves;
      Load_Stream(NotAtStart, varParticleModuleRotationGraph->m_curves, 0x20ui64);
      v5 = varParticleCurveDef;
      v6 = 2i64;
      do
      {
        varParticleCurveDef = v5;
        Load_Stream(NotAtStart, v5, 0x10ui64);
        if ( varParticleCurveDef->controlPoints )
        {
          v7 = varParticleCurveControlPointDef;
          DB_PatchMem_FixStreamAlignment(0xFui64);
          DB_CheckCanIncStreamPos(0i64);
          varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
          varParticleCurveControlPointDef = v7;
        }
        ++v5;
        --v6;
      }
      while ( v6 );
      pos = g_streamPosGlob.pos;
      varParticleModuleRotationGraph = (ParticleModuleRotationGraph *)g_streamPosGlob.pos;
      varParticleCurveDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleScaleByDistance
==============
*/
void Preload_ParticleModuleScaleByDistance(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 

  Load_Stream(streamStart, varParticleModuleScaleByDistance, 0x40ui64);
  v1 = varParticleCurveDef;
  varParticleCurveDef = varParticleModuleScaleByDistance->m_curves;
  Preload_ParticleCurveDefArray(NotAtStart, 2ui64);
  varParticleCurveDef = v1;
}

/*
==============
Preload_ParticleModuleScaleByDistanceArray
==============
*/
void Preload_ParticleModuleScaleByDistanceArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleScaleByDistance *i; 
  ParticleCurveDef *v4; 
  ParticleCurveDef *v5; 
  __int64 v6; 
  ParticleCurveControlPointDef *v7; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleScaleByDistance, count << 6);
  for ( i = varParticleModuleScaleByDistance; v2; --v2 )
  {
    varParticleModuleScaleByDistance = i;
    Load_Stream(NotAtStart, i, 0x40ui64);
    v4 = varParticleCurveDef;
    varParticleCurveDef = varParticleModuleScaleByDistance->m_curves;
    Load_Stream(NotAtStart, varParticleModuleScaleByDistance->m_curves, 0x20ui64);
    v5 = varParticleCurveDef;
    v6 = 2i64;
    do
    {
      varParticleCurveDef = v5;
      Load_Stream(NotAtStart, v5, 0x10ui64);
      if ( varParticleCurveDef->controlPoints )
      {
        v7 = varParticleCurveControlPointDef;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
        varParticleCurveControlPointDef = v7;
      }
      ++v5;
      --v6;
    }
    while ( v6 );
    ++i;
    varParticleCurveDef = v4;
  }
}

/*
==============
Preload_ParticleModuleScaleByDistanceStream
==============
*/
void Preload_ParticleModuleScaleByDistanceStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 
  ParticleCurveDef *v5; 
  __int64 v6; 
  ParticleCurveControlPointDef *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 62786, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleScaleByDistance;
    do
    {
      Load_Stream(AtStart, pos, 0x40ui64);
      v4 = varParticleCurveDef;
      varParticleCurveDef = varParticleModuleScaleByDistance->m_curves;
      Load_Stream(NotAtStart, varParticleModuleScaleByDistance->m_curves, 0x20ui64);
      v5 = varParticleCurveDef;
      v6 = 2i64;
      do
      {
        varParticleCurveDef = v5;
        Load_Stream(NotAtStart, v5, 0x10ui64);
        if ( varParticleCurveDef->controlPoints )
        {
          v7 = varParticleCurveControlPointDef;
          DB_PatchMem_FixStreamAlignment(0xFui64);
          DB_CheckCanIncStreamPos(0i64);
          varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
          varParticleCurveControlPointDef = v7;
        }
        ++v5;
        --v6;
      }
      while ( v6 );
      pos = g_streamPosGlob.pos;
      varParticleModuleScaleByDistance = (ParticleModuleScaleByDistance *)g_streamPosGlob.pos;
      varParticleCurveDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleShaderGraph
==============
*/
void Preload_ParticleModuleShaderGraph(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 

  Load_Stream(streamStart, varParticleModuleShaderGraph, 0xD0ui64);
  v1 = varParticleCurveDef;
  varParticleCurveDef = varParticleModuleShaderGraph->m_curves;
  Preload_ParticleCurveDefArray(NotAtStart, 0xCui64);
  varParticleCurveDef = v1;
}

/*
==============
Preload_ParticleModuleShaderGraphArray
==============
*/
void Preload_ParticleModuleShaderGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleShaderGraph *i; 
  ParticleCurveDef *v4; 
  ParticleCurveDef *v5; 
  __int64 v6; 
  ParticleCurveControlPointDef *v7; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleShaderGraph, 208 * count);
  for ( i = varParticleModuleShaderGraph; v2; --v2 )
  {
    varParticleModuleShaderGraph = i;
    Load_Stream(NotAtStart, i, 0xD0ui64);
    v4 = varParticleCurveDef;
    varParticleCurveDef = varParticleModuleShaderGraph->m_curves;
    Load_Stream(NotAtStart, varParticleModuleShaderGraph->m_curves, 0xC0ui64);
    v5 = varParticleCurveDef;
    v6 = 12i64;
    do
    {
      varParticleCurveDef = v5;
      Load_Stream(NotAtStart, v5, 0x10ui64);
      if ( varParticleCurveDef->controlPoints )
      {
        v7 = varParticleCurveControlPointDef;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
        varParticleCurveControlPointDef = v7;
      }
      ++v5;
      --v6;
    }
    while ( v6 );
    ++i;
    varParticleCurveDef = v4;
  }
}

/*
==============
Preload_ParticleModuleShaderGraphStream
==============
*/
void Preload_ParticleModuleShaderGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 
  ParticleCurveDef *v5; 
  __int64 v6; 
  ParticleCurveControlPointDef *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 61000, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleShaderGraph;
    do
    {
      Load_Stream(AtStart, pos, 0xD0ui64);
      v4 = varParticleCurveDef;
      varParticleCurveDef = varParticleModuleShaderGraph->m_curves;
      Load_Stream(NotAtStart, varParticleModuleShaderGraph->m_curves, 0xC0ui64);
      v5 = varParticleCurveDef;
      v6 = 12i64;
      do
      {
        varParticleCurveDef = v5;
        Load_Stream(NotAtStart, v5, 0x10ui64);
        if ( varParticleCurveDef->controlPoints )
        {
          v7 = varParticleCurveControlPointDef;
          DB_PatchMem_FixStreamAlignment(0xFui64);
          DB_CheckCanIncStreamPos(0i64);
          varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
          varParticleCurveControlPointDef = v7;
        }
        ++v5;
        --v6;
      }
      while ( v6 );
      pos = g_streamPosGlob.pos;
      varParticleModuleShaderGraph = (ParticleModuleShaderGraph *)g_streamPosGlob.pos;
      varParticleCurveDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleSizeGraph
==============
*/
void Preload_ParticleModuleSizeGraph(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 

  Load_Stream(streamStart, varParticleModuleSizeGraph, 0x90ui64);
  v1 = varParticleCurveDef;
  varParticleCurveDef = varParticleModuleSizeGraph->m_curves;
  Preload_ParticleCurveDefArray(NotAtStart, 6ui64);
  varParticleCurveDef = v1;
}

/*
==============
Preload_ParticleModuleSizeGraphArray
==============
*/
void Preload_ParticleModuleSizeGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleSizeGraph *i; 
  ParticleCurveDef *v4; 
  ParticleCurveDef *v5; 
  __int64 v6; 
  ParticleCurveControlPointDef *v7; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleSizeGraph, 144 * count);
  for ( i = varParticleModuleSizeGraph; v2; --v2 )
  {
    varParticleModuleSizeGraph = i;
    Load_Stream(NotAtStart, i, 0x90ui64);
    v4 = varParticleCurveDef;
    varParticleCurveDef = varParticleModuleSizeGraph->m_curves;
    Load_Stream(NotAtStart, varParticleModuleSizeGraph->m_curves, 0x60ui64);
    v5 = varParticleCurveDef;
    v6 = 6i64;
    do
    {
      varParticleCurveDef = v5;
      Load_Stream(NotAtStart, v5, 0x10ui64);
      if ( varParticleCurveDef->controlPoints )
      {
        v7 = varParticleCurveControlPointDef;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
        varParticleCurveControlPointDef = v7;
      }
      ++v5;
      --v6;
    }
    while ( v6 );
    ++i;
    varParticleCurveDef = v4;
  }
}

/*
==============
Preload_ParticleModuleSizeGraphStream
==============
*/
void Preload_ParticleModuleSizeGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 
  ParticleCurveDef *v5; 
  __int64 v6; 
  ParticleCurveControlPointDef *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 62977, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleSizeGraph;
    do
    {
      Load_Stream(AtStart, pos, 0x90ui64);
      v4 = varParticleCurveDef;
      varParticleCurveDef = varParticleModuleSizeGraph->m_curves;
      Load_Stream(NotAtStart, varParticleModuleSizeGraph->m_curves, 0x60ui64);
      v5 = varParticleCurveDef;
      v6 = 6i64;
      do
      {
        varParticleCurveDef = v5;
        Load_Stream(NotAtStart, v5, 0x10ui64);
        if ( varParticleCurveDef->controlPoints )
        {
          v7 = varParticleCurveControlPointDef;
          DB_PatchMem_FixStreamAlignment(0xFui64);
          DB_CheckCanIncStreamPos(0i64);
          varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
          varParticleCurveControlPointDef = v7;
        }
        ++v5;
        --v6;
      }
      while ( v6 );
      pos = g_streamPosGlob.pos;
      varParticleModuleSizeGraph = (ParticleModuleSizeGraph *)g_streamPosGlob.pos;
      varParticleCurveDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleSizeLerp
==============
*/
void Preload_ParticleModuleSizeLerp(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleSizeLerp, 0x30ui64);
}

/*
==============
Preload_ParticleModuleSizeLerpArray
==============
*/
void Preload_ParticleModuleSizeLerpArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleSizeLerp, 48 * count);
}

/*
==============
Preload_ParticleModuleSizeLerpStream
==============
*/
void Preload_ParticleModuleSizeLerpStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 63122, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleSizeLerp;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleSizeLerp = (ParticleModuleSizeLerp *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleTemperatureGraph
==============
*/
void Preload_ParticleModuleTemperatureGraph(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 

  Load_Stream(streamStart, varParticleModuleTemperatureGraph, 0x30ui64);
  v1 = varParticleCurveDef;
  varParticleCurveDef = varParticleModuleTemperatureGraph->m_curves;
  Preload_ParticleCurveDefArray(NotAtStart, 2ui64);
  varParticleCurveDef = v1;
}

/*
==============
Preload_ParticleModuleTemperatureGraphArray
==============
*/
void Preload_ParticleModuleTemperatureGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleTemperatureGraph *i; 
  ParticleCurveDef *v4; 
  ParticleCurveDef *v5; 
  __int64 v6; 
  ParticleCurveControlPointDef *v7; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleTemperatureGraph, 48 * count);
  for ( i = varParticleModuleTemperatureGraph; v2; --v2 )
  {
    varParticleModuleTemperatureGraph = i;
    Load_Stream(NotAtStart, i, 0x30ui64);
    v4 = varParticleCurveDef;
    varParticleCurveDef = varParticleModuleTemperatureGraph->m_curves;
    Load_Stream(NotAtStart, varParticleModuleTemperatureGraph->m_curves, 0x20ui64);
    v5 = varParticleCurveDef;
    v6 = 2i64;
    do
    {
      varParticleCurveDef = v5;
      Load_Stream(NotAtStart, v5, 0x10ui64);
      if ( varParticleCurveDef->controlPoints )
      {
        v7 = varParticleCurveControlPointDef;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
        varParticleCurveControlPointDef = v7;
      }
      ++v5;
      --v6;
    }
    while ( v6 );
    ++i;
    varParticleCurveDef = v4;
  }
}

/*
==============
Preload_ParticleModuleTemperatureGraphStream
==============
*/
void Preload_ParticleModuleTemperatureGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 
  ParticleCurveDef *v5; 
  __int64 v6; 
  ParticleCurveControlPointDef *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 61679, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleTemperatureGraph;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      v4 = varParticleCurveDef;
      varParticleCurveDef = varParticleModuleTemperatureGraph->m_curves;
      Load_Stream(NotAtStart, varParticleModuleTemperatureGraph->m_curves, 0x20ui64);
      v5 = varParticleCurveDef;
      v6 = 2i64;
      do
      {
        varParticleCurveDef = v5;
        Load_Stream(NotAtStart, v5, 0x10ui64);
        if ( varParticleCurveDef->controlPoints )
        {
          v7 = varParticleCurveControlPointDef;
          DB_PatchMem_FixStreamAlignment(0xFui64);
          DB_CheckCanIncStreamPos(0i64);
          varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
          varParticleCurveControlPointDef = v7;
        }
        ++v5;
        --v6;
      }
      while ( v6 );
      pos = g_streamPosGlob.pos;
      varParticleModuleTemperatureGraph = (ParticleModuleTemperatureGraph *)g_streamPosGlob.pos;
      varParticleCurveDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleTestAge
==============
*/
void Preload_ParticleModuleTestAge(const DBStreamStart streamStart)
{
  ParticleModuleTestEventHandlerData *v1; 
  ParticleLinkedAssetListDef *v2; 

  Load_Stream(streamStart, varParticleModuleTestAge, 0x80ui64);
  v1 = varParticleModuleTestEventHandlerData;
  varParticleModuleTestEventHandlerData = &varParticleModuleTestAge->m_eventHandlerData;
  Load_Stream(NotAtStart, &varParticleModuleTestAge->m_eventHandlerData, 0x20ui64);
  v2 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
  Preload_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v2;
  varParticleModuleTestEventHandlerData = v1;
}

/*
==============
Preload_ParticleModuleTestAgeArray
==============
*/
void Preload_ParticleModuleTestAgeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleTestAge *i; 
  ParticleModuleTestEventHandlerData *v4; 
  ParticleLinkedAssetListDef *v5; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleTestAge, count << 7);
  for ( i = varParticleModuleTestAge; v2; --v2 )
  {
    varParticleModuleTestAge = i;
    Load_Stream(NotAtStart, i, 0x80ui64);
    v4 = varParticleModuleTestEventHandlerData;
    varParticleModuleTestEventHandlerData = &varParticleModuleTestAge->m_eventHandlerData;
    Load_Stream(NotAtStart, &varParticleModuleTestAge->m_eventHandlerData, 0x20ui64);
    v5 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
    Preload_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v5;
    varParticleModuleTestEventHandlerData = v4;
  }
}

/*
==============
Preload_ParticleModuleTestAgeStream
==============
*/
void Preload_ParticleModuleTestAgeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleModuleTestEventHandlerData *v4; 
  ParticleLinkedAssetListDef *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 63840, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleTestAge;
    do
    {
      Load_Stream(AtStart, pos, 0x80ui64);
      v4 = varParticleModuleTestEventHandlerData;
      varParticleModuleTestEventHandlerData = &varParticleModuleTestAge->m_eventHandlerData;
      Load_Stream(NotAtStart, &varParticleModuleTestAge->m_eventHandlerData, 0x20ui64);
      v5 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
      Preload_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleTestAge = (ParticleModuleTestAge *)g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v5;
      varParticleModuleTestEventHandlerData = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleTestBirth
==============
*/
void Preload_ParticleModuleTestBirth(const DBStreamStart streamStart)
{
  ParticleModuleTestEventHandlerData *v1; 
  ParticleLinkedAssetListDef *v2; 

  Load_Stream(streamStart, varParticleModuleTestBirth, 0x70ui64);
  v1 = varParticleModuleTestEventHandlerData;
  varParticleModuleTestEventHandlerData = &varParticleModuleTestBirth->m_eventHandlerData;
  Load_Stream(NotAtStart, &varParticleModuleTestBirth->m_eventHandlerData, 0x20ui64);
  v2 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
  Preload_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v2;
  varParticleModuleTestEventHandlerData = v1;
}

/*
==============
Preload_ParticleModuleTestBirthArray
==============
*/
void Preload_ParticleModuleTestBirthArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleTestBirth *i; 
  ParticleModuleTestEventHandlerData *v4; 
  ParticleLinkedAssetListDef *v5; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleTestBirth, 112 * count);
  for ( i = varParticleModuleTestBirth; v2; --v2 )
  {
    varParticleModuleTestBirth = i;
    Load_Stream(NotAtStart, i, 0x70ui64);
    v4 = varParticleModuleTestEventHandlerData;
    varParticleModuleTestEventHandlerData = &varParticleModuleTestBirth->m_eventHandlerData;
    Load_Stream(NotAtStart, &varParticleModuleTestBirth->m_eventHandlerData, 0x20ui64);
    v5 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
    Preload_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v5;
    varParticleModuleTestEventHandlerData = v4;
  }
}

/*
==============
Preload_ParticleModuleTestBirthStream
==============
*/
void Preload_ParticleModuleTestBirthStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleModuleTestEventHandlerData *v4; 
  ParticleLinkedAssetListDef *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 64100, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleTestBirth;
    do
    {
      Load_Stream(AtStart, pos, 0x70ui64);
      v4 = varParticleModuleTestEventHandlerData;
      varParticleModuleTestEventHandlerData = &varParticleModuleTestBirth->m_eventHandlerData;
      Load_Stream(NotAtStart, &varParticleModuleTestBirth->m_eventHandlerData, 0x20ui64);
      v5 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
      Preload_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleTestBirth = (ParticleModuleTestBirth *)g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v5;
      varParticleModuleTestEventHandlerData = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleTestDeath
==============
*/
void Preload_ParticleModuleTestDeath(const DBStreamStart streamStart)
{
  ParticleModuleTestEventHandlerData *v1; 
  ParticleLinkedAssetListDef *v2; 

  Load_Stream(streamStart, varParticleModuleTestDeath, 0x70ui64);
  v1 = varParticleModuleTestEventHandlerData;
  varParticleModuleTestEventHandlerData = &varParticleModuleTestDeath->m_eventHandlerData;
  Load_Stream(NotAtStart, &varParticleModuleTestDeath->m_eventHandlerData, 0x20ui64);
  v2 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
  Preload_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v2;
  varParticleModuleTestEventHandlerData = v1;
}

/*
==============
Preload_ParticleModuleTestDeathArray
==============
*/
void Preload_ParticleModuleTestDeathArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleTestDeath *i; 
  ParticleModuleTestEventHandlerData *v4; 
  ParticleLinkedAssetListDef *v5; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleTestDeath, 112 * count);
  for ( i = varParticleModuleTestDeath; v2; --v2 )
  {
    varParticleModuleTestDeath = i;
    Load_Stream(NotAtStart, i, 0x70ui64);
    v4 = varParticleModuleTestEventHandlerData;
    varParticleModuleTestEventHandlerData = &varParticleModuleTestDeath->m_eventHandlerData;
    Load_Stream(NotAtStart, &varParticleModuleTestDeath->m_eventHandlerData, 0x20ui64);
    v5 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
    Preload_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v5;
    varParticleModuleTestEventHandlerData = v4;
  }
}

/*
==============
Preload_ParticleModuleTestDeathStream
==============
*/
void Preload_ParticleModuleTestDeathStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleModuleTestEventHandlerData *v4; 
  ParticleLinkedAssetListDef *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 64360, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleTestDeath;
    do
    {
      Load_Stream(AtStart, pos, 0x70ui64);
      v4 = varParticleModuleTestEventHandlerData;
      varParticleModuleTestEventHandlerData = &varParticleModuleTestDeath->m_eventHandlerData;
      Load_Stream(NotAtStart, &varParticleModuleTestDeath->m_eventHandlerData, 0x20ui64);
      v5 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
      Preload_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleTestDeath = (ParticleModuleTestDeath *)g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v5;
      varParticleModuleTestEventHandlerData = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleTestEventHandlerData
==============
*/
void Preload_ParticleModuleTestEventHandlerData(const DBStreamStart streamStart)
{
  ParticleLinkedAssetListDef *v1; 

  Load_Stream(streamStart, varParticleModuleTestEventHandlerData, 0x20ui64);
  v1 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
  Preload_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v1;
}

/*
==============
Preload_ParticleModuleTestEventHandlerDataArray
==============
*/
void Preload_ParticleModuleTestEventHandlerDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleTestEventHandlerData *i; 
  ParticleLinkedAssetListDef *v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleTestEventHandlerData, 32 * count);
  for ( i = varParticleModuleTestEventHandlerData; v2; --v2 )
  {
    varParticleModuleTestEventHandlerData = i;
    Load_Stream(NotAtStart, i, 0x20ui64);
    v4 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
    Preload_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v4;
  }
}

/*
==============
Preload_ParticleModuleTestEventHandlerDataStream
==============
*/
void Preload_ParticleModuleTestEventHandlerDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleLinkedAssetListDef *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 63557, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleTestEventHandlerData;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      v4 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
      Preload_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleTestEventHandlerData = (ParticleModuleTestEventHandlerData *)g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleTestGravity
==============
*/
void Preload_ParticleModuleTestGravity(const DBStreamStart streamStart)
{
  ParticleModuleTestEventHandlerData *v1; 
  ParticleLinkedAssetListDef *v2; 

  Load_Stream(streamStart, varParticleModuleTestGravity, 0x80ui64);
  v1 = varParticleModuleTestEventHandlerData;
  varParticleModuleTestEventHandlerData = &varParticleModuleTestGravity->m_eventHandlerData;
  Load_Stream(NotAtStart, &varParticleModuleTestGravity->m_eventHandlerData, 0x20ui64);
  v2 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
  Preload_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v2;
  varParticleModuleTestEventHandlerData = v1;
}

/*
==============
Preload_ParticleModuleTestGravityArray
==============
*/
void Preload_ParticleModuleTestGravityArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleTestGravity *i; 
  ParticleModuleTestEventHandlerData *v4; 
  ParticleLinkedAssetListDef *v5; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleTestGravity, count << 7);
  for ( i = varParticleModuleTestGravity; v2; --v2 )
  {
    varParticleModuleTestGravity = i;
    Load_Stream(NotAtStart, i, 0x80ui64);
    v4 = varParticleModuleTestEventHandlerData;
    varParticleModuleTestEventHandlerData = &varParticleModuleTestGravity->m_eventHandlerData;
    Load_Stream(NotAtStart, &varParticleModuleTestGravity->m_eventHandlerData, 0x20ui64);
    v5 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
    Preload_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v5;
    varParticleModuleTestEventHandlerData = v4;
  }
}

/*
==============
Preload_ParticleModuleTestGravityStream
==============
*/
void Preload_ParticleModuleTestGravityStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleModuleTestEventHandlerData *v4; 
  ParticleLinkedAssetListDef *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 64697, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleTestGravity;
    do
    {
      Load_Stream(AtStart, pos, 0x80ui64);
      v4 = varParticleModuleTestEventHandlerData;
      varParticleModuleTestEventHandlerData = &varParticleModuleTestGravity->m_eventHandlerData;
      Load_Stream(NotAtStart, &varParticleModuleTestGravity->m_eventHandlerData, 0x20ui64);
      v5 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
      Preload_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleTestGravity = (ParticleModuleTestGravity *)g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v5;
      varParticleModuleTestEventHandlerData = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleTestImpact
==============
*/
void Preload_ParticleModuleTestImpact(const DBStreamStart streamStart)
{
  ParticleModuleTestEventHandlerData *v1; 
  ParticleLinkedAssetListDef *v2; 

  Load_Stream(streamStart, varParticleModuleTestImpact, 0x80ui64);
  v1 = varParticleModuleTestEventHandlerData;
  varParticleModuleTestEventHandlerData = &varParticleModuleTestImpact->m_eventHandlerData;
  Load_Stream(NotAtStart, &varParticleModuleTestImpact->m_eventHandlerData, 0x20ui64);
  v2 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
  Preload_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v2;
  varParticleModuleTestEventHandlerData = v1;
}

/*
==============
Preload_ParticleModuleTestImpactArray
==============
*/
void Preload_ParticleModuleTestImpactArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleTestImpact *i; 
  ParticleModuleTestEventHandlerData *v4; 
  ParticleLinkedAssetListDef *v5; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleTestImpact, count << 7);
  for ( i = varParticleModuleTestImpact; v2; --v2 )
  {
    varParticleModuleTestImpact = i;
    Load_Stream(NotAtStart, i, 0x80ui64);
    v4 = varParticleModuleTestEventHandlerData;
    varParticleModuleTestEventHandlerData = &varParticleModuleTestImpact->m_eventHandlerData;
    Load_Stream(NotAtStart, &varParticleModuleTestImpact->m_eventHandlerData, 0x20ui64);
    v5 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
    Preload_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v5;
    varParticleModuleTestEventHandlerData = v4;
  }
}

/*
==============
Preload_ParticleModuleTestImpactStream
==============
*/
void Preload_ParticleModuleTestImpactStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleModuleTestEventHandlerData *v4; 
  ParticleLinkedAssetListDef *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 65034, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleTestImpact;
    do
    {
      Load_Stream(AtStart, pos, 0x80ui64);
      v4 = varParticleModuleTestEventHandlerData;
      varParticleModuleTestEventHandlerData = &varParticleModuleTestImpact->m_eventHandlerData;
      Load_Stream(NotAtStart, &varParticleModuleTestImpact->m_eventHandlerData, 0x20ui64);
      v5 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
      Preload_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleTestImpact = (ParticleModuleTestImpact *)g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v5;
      varParticleModuleTestEventHandlerData = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleTestPos
==============
*/
void Preload_ParticleModuleTestPos(const DBStreamStart streamStart)
{
  ParticleModuleTestEventHandlerData *v1; 
  ParticleLinkedAssetListDef *v2; 

  Load_Stream(streamStart, varParticleModuleTestPos, 0x80ui64);
  v1 = varParticleModuleTestEventHandlerData;
  varParticleModuleTestEventHandlerData = &varParticleModuleTestPos->m_eventHandlerData;
  Load_Stream(NotAtStart, &varParticleModuleTestPos->m_eventHandlerData, 0x20ui64);
  v2 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
  Preload_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v2;
  varParticleModuleTestEventHandlerData = v1;
}

/*
==============
Preload_ParticleModuleTestPosArray
==============
*/
void Preload_ParticleModuleTestPosArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleTestPos *i; 
  ParticleModuleTestEventHandlerData *v4; 
  ParticleLinkedAssetListDef *v5; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleTestPos, count << 7);
  for ( i = varParticleModuleTestPos; v2; --v2 )
  {
    varParticleModuleTestPos = i;
    Load_Stream(NotAtStart, i, 0x80ui64);
    v4 = varParticleModuleTestEventHandlerData;
    varParticleModuleTestEventHandlerData = &varParticleModuleTestPos->m_eventHandlerData;
    Load_Stream(NotAtStart, &varParticleModuleTestPos->m_eventHandlerData, 0x20ui64);
    v5 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
    Preload_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v5;
    varParticleModuleTestEventHandlerData = v4;
  }
}

/*
==============
Preload_ParticleModuleTestPosStream
==============
*/
void Preload_ParticleModuleTestPosStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleModuleTestEventHandlerData *v4; 
  ParticleLinkedAssetListDef *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 65317, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleTestPos;
    do
    {
      Load_Stream(AtStart, pos, 0x80ui64);
      v4 = varParticleModuleTestEventHandlerData;
      varParticleModuleTestEventHandlerData = &varParticleModuleTestPos->m_eventHandlerData;
      Load_Stream(NotAtStart, &varParticleModuleTestPos->m_eventHandlerData, 0x20ui64);
      v5 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
      Preload_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleTestPos = (ParticleModuleTestPos *)g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v5;
      varParticleModuleTestEventHandlerData = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleTestTimeInState
==============
*/
void Preload_ParticleModuleTestTimeInState(const DBStreamStart streamStart)
{
  ParticleModuleTestEventHandlerData *v1; 
  ParticleLinkedAssetListDef *v2; 

  Load_Stream(streamStart, varParticleModuleTestTimeInState, 0x80ui64);
  v1 = varParticleModuleTestEventHandlerData;
  varParticleModuleTestEventHandlerData = &varParticleModuleTestTimeInState->m_eventHandlerData;
  Load_Stream(NotAtStart, &varParticleModuleTestTimeInState->m_eventHandlerData, 0x20ui64);
  v2 = varParticleLinkedAssetListDef;
  varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
  Preload_ParticleLinkedAssetListDef(NotAtStart);
  varParticleLinkedAssetListDef = v2;
  varParticleModuleTestEventHandlerData = v1;
}

/*
==============
Preload_ParticleModuleTestTimeInStateArray
==============
*/
void Preload_ParticleModuleTestTimeInStateArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleTestTimeInState *i; 
  ParticleModuleTestEventHandlerData *v4; 
  ParticleLinkedAssetListDef *v5; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleTestTimeInState, count << 7);
  for ( i = varParticleModuleTestTimeInState; v2; --v2 )
  {
    varParticleModuleTestTimeInState = i;
    Load_Stream(NotAtStart, i, 0x80ui64);
    v4 = varParticleModuleTestEventHandlerData;
    varParticleModuleTestEventHandlerData = &varParticleModuleTestTimeInState->m_eventHandlerData;
    Load_Stream(NotAtStart, &varParticleModuleTestTimeInState->m_eventHandlerData, 0x20ui64);
    v5 = varParticleLinkedAssetListDef;
    varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
    Preload_ParticleLinkedAssetListDef(NotAtStart);
    ++i;
    varParticleLinkedAssetListDef = v5;
    varParticleModuleTestEventHandlerData = v4;
  }
}

/*
==============
Preload_ParticleModuleTestTimeInStateStream
==============
*/
void Preload_ParticleModuleTestTimeInStateStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleModuleTestEventHandlerData *v4; 
  ParticleLinkedAssetListDef *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 65600, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleTestTimeInState;
    do
    {
      Load_Stream(AtStart, pos, 0x80ui64);
      v4 = varParticleModuleTestEventHandlerData;
      varParticleModuleTestEventHandlerData = &varParticleModuleTestTimeInState->m_eventHandlerData;
      Load_Stream(NotAtStart, &varParticleModuleTestTimeInState->m_eventHandlerData, 0x20ui64);
      v5 = varParticleLinkedAssetListDef;
      varParticleLinkedAssetListDef = &varParticleModuleTestEventHandlerData->m_linkedAssetList;
      Preload_ParticleLinkedAssetListDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleModuleTestTimeInState = (ParticleModuleTestTimeInState *)g_streamPosGlob.pos;
      varParticleLinkedAssetListDef = v5;
      varParticleModuleTestEventHandlerData = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleType
==============
*/
void Preload_ParticleModuleType(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleModuleType, 2ui64);
}

/*
==============
Preload_ParticleModuleTypeArray
==============
*/
void Preload_ParticleModuleTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleModuleType, 2 * count);
}

/*
==============
Preload_ParticleModuleTypeDef
==============
*/
void Preload_ParticleModuleTypeDef(const DBStreamStart streamStart)
{
  ParticleModuleType moduleType; 
  ParticleModuleInitAtlas *v2; 
  ParticleCurveDef *v3; 
  ParticleModuleInitAttributes *v4; 
  ParticleModuleInitBeam *v5; 
  ParticleModuleInitCameraOffset *v6; 
  ParticleModuleInitCloud *v7; 
  ParticleModuleInitDecal *v8; 
  ParticleModuleInitFlare *v9; 
  ParticleModuleInitGeoTrail *v10; 
  ParticleModuleInitKillWrapBox *v11; 
  ParticleModuleInitLightOmni *v12; 
  ParticleModuleInitLightSpot *v13; 
  ParticleModuleInitMaterial *v14; 
  ParticleModuleInitMirrorTexture *v15; 
  ParticleModuleInitModel *v16; 
  ParticleModuleInitOcclusionQuery *v17; 
  ParticleModuleInitOrientedSprite *v18; 
  ParticleModuleInitParticleSim *v19; 
  ParticleModuleInitPlayerFacing *v20; 
  ParticleModuleInitRelativeVelocity *v21; 
  ParticleModuleInitRotation *v22; 
  ParticleModuleInitRotation3D *v23; 
  ParticleModuleInitRunner *v24; 
  ParticleModuleInitSound *v25; 
  ParticleModuleInitSpawn *v26; 
  ParticleModuleInitSpawnShapeBox *v27; 
  ParticleModuleInitSpawnShapeCylinder *v28; 
  ParticleModuleInitSpawnShapeEllipsoid *v29; 
  ParticleModuleInitSpawnShapeMesh *v30; 
  ParticleModuleInitSpawnShapeSphere *v31; 
  ParticleModuleInitTail *v32; 
  ParticleModuleInitVectorField *v33; 
  ParticleModuleInitVolumetric *v34; 
  ParticleModuleInitDismember *v35; 
  ParticleModuleAttractor *v36; 
  ParticleModuleColorGraph *v37; 
  ParticleModuleColorLerp *v38; 
  ParticleModuleEmissionGraph *v39; 
  ParticleModuleEmissiveGraph *v40; 
  ParticleModuleShaderGraph *v41; 
  ParticleModuleForce *v42; 
  ParticleModuleForceDragGraph *v43; 
  ParticleModuleGravity *v44; 
  ParticleModuleIntensityGraph *v45; 
  ParticleModuleTemperatureGraph *v46; 
  ParticleModuleParentVelocityGraph *v47; 
  ParticleModulePhysicsLight *v48; 
  ParticleModulePhysicsRayCast *v49; 
  ParticleModulePositionGraph *v50; 
  ParticleModuleRotationGraph *v51; 
  ParticleModuleRotationGraph3D *v52; 
  ParticleModuleScaleByDistance *v53; 
  ParticleModuleSizeGraph *v54; 
  ParticleModuleSizeLerp *v55; 
  ParticleModuleVelocityGraph *v56; 
  ParticleModuleVectorFieldGraph *v57; 
  ParticleModuleTestAge *v58; 
  ParticleModuleTestBirth *v59; 
  ParticleModuleTestDeath *v60; 
  ParticleModuleTestGravity *v61; 
  ParticleModuleTestImpact *v62; 
  ParticleModuleTestPos *v63; 
  ParticleModuleTestTimeInState *v64; 

  moduleType = varParticleModuleDef->moduleType;
  if ( varParticleModuleDef->moduleType )
  {
    switch ( moduleType )
    {
      case PARTICLE_MODULE_INIT_ATTRIBUTES:
        if ( streamStart == AtStart )
        {
          v4 = varParticleModuleInitAttributes;
          varParticleModuleInitAttributes = (ParticleModuleInitAttributes *)varParticleModuleTypeDef;
          Load_Stream(AtStart, varParticleModuleTypeDef, 0x70ui64);
          varParticleModuleInitAttributes = v4;
        }
        break;
      case PARTICLE_MODULE_INIT_BEAM:
        v5 = varParticleModuleInitBeam;
        varParticleModuleInitBeam = (ParticleModuleInitBeam *)varParticleModuleTypeDef;
        Preload_ParticleModuleInitBeam(streamStart);
        varParticleModuleInitBeam = v5;
        break;
      case PARTICLE_MODULE_INIT_CAMERA_OFFSET:
        if ( streamStart == AtStart )
        {
          v6 = varParticleModuleInitCameraOffset;
          varParticleModuleInitCameraOffset = (ParticleModuleInitCameraOffset *)varParticleModuleTypeDef;
          Load_Stream(AtStart, varParticleModuleTypeDef, 0x10ui64);
          varParticleModuleInitCameraOffset = v6;
        }
        break;
      case PARTICLE_MODULE_INIT_CLOUD:
        if ( streamStart == AtStart )
        {
          v7 = varParticleModuleInitCloud;
          varParticleModuleInitCloud = (ParticleModuleInitCloud *)varParticleModuleTypeDef;
          Load_Stream(AtStart, varParticleModuleTypeDef, 0x10ui64);
          varParticleModuleInitCloud = v7;
        }
        break;
      case PARTICLE_MODULE_INIT_DECAL:
        v8 = varParticleModuleInitDecal;
        varParticleModuleInitDecal = (ParticleModuleInitDecal *)varParticleModuleTypeDef;
        Preload_ParticleModuleInitDecal(streamStart);
        varParticleModuleInitDecal = v8;
        break;
      case PARTICLE_MODULE_INIT_FLARE:
        v9 = varParticleModuleInitFlare;
        varParticleModuleInitFlare = (ParticleModuleInitFlare *)varParticleModuleTypeDef;
        Preload_ParticleModuleInitFlare(streamStart);
        varParticleModuleInitFlare = v9;
        break;
      case PARTICLE_MODULE_INIT_GEO_TRAIL:
        if ( streamStart == AtStart )
        {
          v10 = varParticleModuleInitGeoTrail;
          varParticleModuleInitGeoTrail = (ParticleModuleInitGeoTrail *)varParticleModuleTypeDef;
          Load_Stream(AtStart, varParticleModuleTypeDef, 0x40ui64);
          varParticleModuleInitGeoTrail = v10;
        }
        break;
      case PARTICLE_MODULE_INIT_KILL_WRAP_BOX:
        if ( streamStart == AtStart )
        {
          v11 = varParticleModuleInitKillWrapBox;
          varParticleModuleInitKillWrapBox = (ParticleModuleInitKillWrapBox *)varParticleModuleTypeDef;
          Load_Stream(AtStart, varParticleModuleTypeDef, 0x30ui64);
          varParticleModuleInitKillWrapBox = v11;
        }
        break;
      case PARTICLE_MODULE_INIT_LIGHT_OMNI:
        v12 = varParticleModuleInitLightOmni;
        varParticleModuleInitLightOmni = (ParticleModuleInitLightOmni *)varParticleModuleTypeDef;
        Preload_ParticleModuleInitLightOmni(streamStart);
        varParticleModuleInitLightOmni = v12;
        break;
      case PARTICLE_MODULE_INIT_LIGHT_SPOT:
        v13 = varParticleModuleInitLightSpot;
        varParticleModuleInitLightSpot = (ParticleModuleInitLightSpot *)varParticleModuleTypeDef;
        Preload_ParticleModuleInitLightSpot(streamStart);
        varParticleModuleInitLightSpot = v13;
        break;
      case PARTICLE_MODULE_INIT_MATERIAL:
        v14 = varParticleModuleInitMaterial;
        varParticleModuleInitMaterial = (ParticleModuleInitMaterial *)varParticleModuleTypeDef;
        Preload_ParticleModuleInitMaterial(streamStart);
        varParticleModuleInitMaterial = v14;
        break;
      case PARTICLE_MODULE_INIT_MIRROR_TEXTURE:
        if ( streamStart == AtStart )
        {
          v15 = varParticleModuleInitMirrorTexture;
          varParticleModuleInitMirrorTexture = (ParticleModuleInitMirrorTexture *)varParticleModuleTypeDef;
          Load_Stream(AtStart, varParticleModuleTypeDef, 0x10ui64);
          varParticleModuleInitMirrorTexture = v15;
        }
        break;
      case PARTICLE_MODULE_INIT_MODEL:
        v16 = varParticleModuleInitModel;
        varParticleModuleInitModel = (ParticleModuleInitModel *)varParticleModuleTypeDef;
        Preload_ParticleModuleInitModel(streamStart);
        varParticleModuleInitModel = v16;
        break;
      case PARTICLE_MODULE_INIT_OCCLUSION_QUERY:
        if ( streamStart == AtStart )
        {
          v17 = varParticleModuleInitOcclusionQuery;
          varParticleModuleInitOcclusionQuery = (ParticleModuleInitOcclusionQuery *)varParticleModuleTypeDef;
          Load_Stream(AtStart, varParticleModuleTypeDef, 0x30ui64);
          varParticleModuleInitOcclusionQuery = v17;
        }
        break;
      case PARTICLE_MODULE_INIT_ORIENTED_SPRITE:
        if ( streamStart == AtStart )
        {
          v18 = varParticleModuleInitOrientedSprite;
          varParticleModuleInitOrientedSprite = (ParticleModuleInitOrientedSprite *)varParticleModuleTypeDef;
          Load_Stream(AtStart, varParticleModuleTypeDef, 0x20ui64);
          varParticleModuleInitOrientedSprite = v18;
        }
        break;
      case PARTICLE_MODULE_INIT_PARTICLE_SIM:
        v19 = varParticleModuleInitParticleSim;
        varParticleModuleInitParticleSim = (ParticleModuleInitParticleSim *)varParticleModuleTypeDef;
        Preload_ParticleModuleInitParticleSim(streamStart);
        varParticleModuleInitParticleSim = v19;
        break;
      case PARTICLE_MODULE_INIT_PLAYER_FACING:
        if ( streamStart == AtStart )
        {
          v20 = varParticleModuleInitPlayerFacing;
          varParticleModuleInitPlayerFacing = (ParticleModuleInitPlayerFacing *)varParticleModuleTypeDef;
          Load_Stream(AtStart, varParticleModuleTypeDef, 0x10ui64);
          varParticleModuleInitPlayerFacing = v20;
        }
        break;
      case PARTICLE_MODULE_INIT_RELATIVE_VELOCITY:
        if ( streamStart == AtStart )
        {
          v21 = varParticleModuleInitRelativeVelocity;
          varParticleModuleInitRelativeVelocity = (ParticleModuleInitRelativeVelocity *)varParticleModuleTypeDef;
          Load_Stream(AtStart, varParticleModuleTypeDef, 0x10ui64);
          varParticleModuleInitRelativeVelocity = v21;
        }
        break;
      case PARTICLE_MODULE_INIT_ROTATION:
        if ( streamStart == AtStart )
        {
          v22 = varParticleModuleInitRotation;
          varParticleModuleInitRotation = (ParticleModuleInitRotation *)varParticleModuleTypeDef;
          Load_Stream(AtStart, varParticleModuleTypeDef, 0x20ui64);
          varParticleModuleInitRotation = v22;
        }
        break;
      case PARTICLE_MODULE_INIT_ROTATION_3D:
        if ( streamStart == AtStart )
        {
          v23 = varParticleModuleInitRotation3D;
          varParticleModuleInitRotation3D = (ParticleModuleInitRotation3D *)varParticleModuleTypeDef;
          Load_Stream(AtStart, varParticleModuleTypeDef, 0x50ui64);
          varParticleModuleInitRotation3D = v23;
        }
        break;
      case PARTICLE_MODULE_INIT_RUNNER:
        v24 = varParticleModuleInitRunner;
        varParticleModuleInitRunner = (ParticleModuleInitRunner *)varParticleModuleTypeDef;
        Preload_ParticleModuleInitRunner(streamStart);
        varParticleModuleInitRunner = v24;
        break;
      case PARTICLE_MODULE_INIT_SOUND:
        v25 = varParticleModuleInitSound;
        varParticleModuleInitSound = (ParticleModuleInitSound *)varParticleModuleTypeDef;
        Preload_ParticleModuleInitSound(streamStart);
        varParticleModuleInitSound = v25;
        break;
      case PARTICLE_MODULE_INIT_SPAWN:
        v26 = varParticleModuleInitSpawn;
        varParticleModuleInitSpawn = (ParticleModuleInitSpawn *)varParticleModuleTypeDef;
        Preload_ParticleModuleInitSpawn(streamStart);
        varParticleModuleInitSpawn = v26;
        break;
      case PARTICLE_MODULE_INIT_SPAWN_SHAPE_FIRST:
        v27 = varParticleModuleInitSpawnShapeBox;
        varParticleModuleInitSpawnShapeBox = (ParticleModuleInitSpawnShapeBox *)varParticleModuleTypeDef;
        Preload_ParticleModuleInitSpawnShapeBox(streamStart);
        varParticleModuleInitSpawnShapeBox = v27;
        break;
      case PARTICLE_MODULE_INIT_SPAWN_SHAPE_CYLINDER:
        v28 = varParticleModuleInitSpawnShapeCylinder;
        varParticleModuleInitSpawnShapeCylinder = (ParticleModuleInitSpawnShapeCylinder *)varParticleModuleTypeDef;
        Preload_ParticleModuleInitSpawnShapeCylinder(streamStart);
        varParticleModuleInitSpawnShapeCylinder = v28;
        break;
      case PARTICLE_MODULE_INIT_SPAWN_SHAPE_ELLIPSOID:
        v29 = varParticleModuleInitSpawnShapeEllipsoid;
        varParticleModuleInitSpawnShapeEllipsoid = (ParticleModuleInitSpawnShapeEllipsoid *)varParticleModuleTypeDef;
        Preload_ParticleModuleInitSpawnShapeEllipsoid(streamStart);
        varParticleModuleInitSpawnShapeEllipsoid = v29;
        break;
      case PARTICLE_MODULE_INIT_SPAWN_SHAPE_MESH:
        v30 = varParticleModuleInitSpawnShapeMesh;
        varParticleModuleInitSpawnShapeMesh = (ParticleModuleInitSpawnShapeMesh *)varParticleModuleTypeDef;
        Preload_ParticleModuleInitSpawnShapeMesh(streamStart);
        varParticleModuleInitSpawnShapeMesh = v30;
        break;
      case PARTICLE_MODULE_INIT_SPAWN_SHAPE_SPHERE:
        v31 = varParticleModuleInitSpawnShapeSphere;
        varParticleModuleInitSpawnShapeSphere = (ParticleModuleInitSpawnShapeSphere *)varParticleModuleTypeDef;
        Preload_ParticleModuleInitSpawnShapeSphere(streamStart);
        varParticleModuleInitSpawnShapeSphere = v31;
        break;
      case PARTICLE_MODULE_INIT_TAIL:
        if ( streamStart == AtStart )
        {
          v32 = varParticleModuleInitTail;
          varParticleModuleInitTail = (ParticleModuleInitTail *)varParticleModuleTypeDef;
          Load_Stream(AtStart, varParticleModuleTypeDef, 0x10ui64);
          varParticleModuleInitTail = v32;
        }
        break;
      case PARTICLE_MODULE_INIT_VECTOR_FIELD:
        v33 = varParticleModuleInitVectorField;
        varParticleModuleInitVectorField = (ParticleModuleInitVectorField *)varParticleModuleTypeDef;
        Preload_ParticleModuleInitVectorField(streamStart);
        varParticleModuleInitVectorField = v33;
        break;
      case PARTICLE_MODULE_INIT_VOLUMETRIC:
        if ( streamStart == AtStart )
        {
          v34 = varParticleModuleInitVolumetric;
          varParticleModuleInitVolumetric = (ParticleModuleInitVolumetric *)varParticleModuleTypeDef;
          Load_Stream(AtStart, varParticleModuleTypeDef, 0x20ui64);
          varParticleModuleInitVolumetric = v34;
        }
        break;
      case PARTICLE_MODULE_INIT_DISMEMBER:
        if ( streamStart == AtStart )
        {
          v35 = varParticleModuleInitDismember;
          varParticleModuleInitDismember = (ParticleModuleInitDismember *)varParticleModuleTypeDef;
          Load_Stream(AtStart, varParticleModuleTypeDef, 0x10ui64);
          varParticleModuleInitDismember = v35;
        }
        break;
      case PARTICLE_MODULE_UPDATE_BEGIN:
        if ( streamStart == AtStart )
        {
          v36 = varParticleModuleAttractor;
          varParticleModuleAttractor = (ParticleModuleAttractor *)varParticleModuleTypeDef;
          Load_Stream(AtStart, varParticleModuleTypeDef, 0x30ui64);
          varParticleModuleAttractor = v36;
        }
        break;
      case PARTICLE_MODULE_COLOR_GRAPH:
        v37 = varParticleModuleColorGraph;
        varParticleModuleColorGraph = (ParticleModuleColorGraph *)varParticleModuleTypeDef;
        Preload_ParticleModuleColorGraph(streamStart);
        varParticleModuleColorGraph = v37;
        break;
      case PARTICLE_MODULE_COLOR_LERP:
        if ( streamStart == AtStart )
        {
          v38 = varParticleModuleColorLerp;
          varParticleModuleColorLerp = (ParticleModuleColorLerp *)varParticleModuleTypeDef;
          Load_Stream(AtStart, varParticleModuleTypeDef, 0x30ui64);
          varParticleModuleColorLerp = v38;
        }
        break;
      case PARTICLE_MODULE_EMISSION_GRAPH:
        v39 = varParticleModuleEmissionGraph;
        varParticleModuleEmissionGraph = (ParticleModuleEmissionGraph *)varParticleModuleTypeDef;
        Preload_ParticleModuleEmissionGraph(streamStart);
        varParticleModuleEmissionGraph = v39;
        break;
      case PARTICLE_MODULE_EMISSIVE_GRAPH:
        v40 = varParticleModuleEmissiveGraph;
        varParticleModuleEmissiveGraph = (ParticleModuleEmissiveGraph *)varParticleModuleTypeDef;
        Preload_ParticleModuleEmissiveGraph(streamStart);
        varParticleModuleEmissiveGraph = v40;
        break;
      case PARTICLE_MODULE_SHADER_GRAPH:
        v41 = varParticleModuleShaderGraph;
        varParticleModuleShaderGraph = (ParticleModuleShaderGraph *)varParticleModuleTypeDef;
        Preload_ParticleModuleShaderGraph(streamStart);
        varParticleModuleShaderGraph = v41;
        break;
      case PARTICLE_MODULE_FORCE:
        if ( streamStart == AtStart )
        {
          v42 = varParticleModuleForce;
          varParticleModuleForce = (ParticleModuleForce *)varParticleModuleTypeDef;
          Load_Stream(AtStart, varParticleModuleTypeDef, 0x30ui64);
          varParticleModuleForce = v42;
        }
        break;
      case PARTICLE_MODULE_FORCE_DRAG_GRAPH:
        v43 = varParticleModuleForceDragGraph;
        varParticleModuleForceDragGraph = (ParticleModuleForceDragGraph *)varParticleModuleTypeDef;
        Preload_ParticleModuleForceDragGraph(streamStart);
        varParticleModuleForceDragGraph = v43;
        break;
      case PARTICLE_MODULE_GRAVITY:
        if ( streamStart == AtStart )
        {
          v44 = varParticleModuleGravity;
          varParticleModuleGravity = (ParticleModuleGravity *)varParticleModuleTypeDef;
          Load_Stream(AtStart, varParticleModuleTypeDef, 0x10ui64);
          varParticleModuleGravity = v44;
        }
        break;
      case PARTICLE_MODULE_INTENSITY_GRAPH:
        v45 = varParticleModuleIntensityGraph;
        varParticleModuleIntensityGraph = (ParticleModuleIntensityGraph *)varParticleModuleTypeDef;
        Preload_ParticleModuleIntensityGraph(streamStart);
        varParticleModuleIntensityGraph = v45;
        break;
      case PARTICLE_MODULE_TEMPERATURE_GRAPH:
        v46 = varParticleModuleTemperatureGraph;
        varParticleModuleTemperatureGraph = (ParticleModuleTemperatureGraph *)varParticleModuleTypeDef;
        Preload_ParticleModuleTemperatureGraph(streamStart);
        varParticleModuleTemperatureGraph = v46;
        break;
      case PARTICLE_MODULE_PARENT_VELOCITY_GRAPH:
        v47 = varParticleModuleParentVelocityGraph;
        varParticleModuleParentVelocityGraph = (ParticleModuleParentVelocityGraph *)varParticleModuleTypeDef;
        Preload_ParticleModuleParentVelocityGraph(streamStart);
        varParticleModuleParentVelocityGraph = v47;
        break;
      case PARTICLE_MODULE_PHYSICS_LIGHT:
        v48 = varParticleModulePhysicsLight;
        varParticleModulePhysicsLight = (ParticleModulePhysicsLight *)varParticleModuleTypeDef;
        Preload_ParticleModulePhysicsLight(streamStart);
        varParticleModulePhysicsLight = v48;
        break;
      case PARTICLE_MODULE_PHYSICS_RAY_CAST:
        if ( streamStart == AtStart )
        {
          v49 = varParticleModulePhysicsRayCast;
          varParticleModulePhysicsRayCast = (ParticleModulePhysicsRayCast *)varParticleModuleTypeDef;
          Load_Stream(AtStart, varParticleModuleTypeDef, 0x30ui64);
          varParticleModulePhysicsRayCast = v49;
        }
        break;
      case PARTICLE_MODULE_POSITION_GRAPH:
        v50 = varParticleModulePositionGraph;
        varParticleModulePositionGraph = (ParticleModulePositionGraph *)varParticleModuleTypeDef;
        Preload_ParticleModulePositionGraph(streamStart);
        varParticleModulePositionGraph = v50;
        break;
      case PARTICLE_MODULE_ROTATION_GRAPH:
        v51 = varParticleModuleRotationGraph;
        varParticleModuleRotationGraph = (ParticleModuleRotationGraph *)varParticleModuleTypeDef;
        Preload_ParticleModuleRotationGraph(streamStart);
        varParticleModuleRotationGraph = v51;
        break;
      case PARTICLE_MODULE_ROTATION_GRAPH_3D:
        v52 = varParticleModuleRotationGraph3D;
        varParticleModuleRotationGraph3D = (ParticleModuleRotationGraph3D *)varParticleModuleTypeDef;
        Preload_ParticleModuleRotationGraph3D(streamStart);
        varParticleModuleRotationGraph3D = v52;
        break;
      case PARTICLE_MODULE_SCALE_BY_DISTANCE:
        v53 = varParticleModuleScaleByDistance;
        varParticleModuleScaleByDistance = (ParticleModuleScaleByDistance *)varParticleModuleTypeDef;
        Preload_ParticleModuleScaleByDistance(streamStart);
        varParticleModuleScaleByDistance = v53;
        break;
      case PARTICLE_MODULE_SIZE_GRAPH:
        v54 = varParticleModuleSizeGraph;
        varParticleModuleSizeGraph = (ParticleModuleSizeGraph *)varParticleModuleTypeDef;
        Preload_ParticleModuleSizeGraph(streamStart);
        varParticleModuleSizeGraph = v54;
        break;
      case PARTICLE_MODULE_SIZE_LERP:
        if ( streamStart == AtStart )
        {
          v55 = varParticleModuleSizeLerp;
          varParticleModuleSizeLerp = (ParticleModuleSizeLerp *)varParticleModuleTypeDef;
          Load_Stream(AtStart, varParticleModuleTypeDef, 0x30ui64);
          varParticleModuleSizeLerp = v55;
        }
        break;
      case PARTICLE_MODULE_VELOCITY_GRAPH:
        v56 = varParticleModuleVelocityGraph;
        varParticleModuleVelocityGraph = (ParticleModuleVelocityGraph *)varParticleModuleTypeDef;
        Preload_ParticleModuleVelocityGraph(streamStart);
        varParticleModuleVelocityGraph = v56;
        break;
      case PARTICLE_MODULE_VECTOR_FIELD_GRAPH:
        v57 = varParticleModuleVectorFieldGraph;
        varParticleModuleVectorFieldGraph = (ParticleModuleVectorFieldGraph *)varParticleModuleTypeDef;
        Preload_ParticleModuleVectorFieldGraph(streamStart);
        varParticleModuleVectorFieldGraph = v57;
        break;
      case PARTICLE_MODULE_TEST_BEGIN:
        v58 = varParticleModuleTestAge;
        varParticleModuleTestAge = (ParticleModuleTestAge *)varParticleModuleTypeDef;
        Preload_ParticleModuleTestAge(streamStart);
        varParticleModuleTestAge = v58;
        break;
      case PARTICLE_MODULE_TEST_BIRTH:
        v59 = varParticleModuleTestBirth;
        varParticleModuleTestBirth = (ParticleModuleTestBirth *)varParticleModuleTypeDef;
        Preload_ParticleModuleTestBirth(streamStart);
        varParticleModuleTestBirth = v59;
        break;
      case PARTICLE_MODULE_TEST_DEATH:
        v60 = varParticleModuleTestDeath;
        varParticleModuleTestDeath = (ParticleModuleTestDeath *)varParticleModuleTypeDef;
        Preload_ParticleModuleTestDeath(streamStart);
        varParticleModuleTestDeath = v60;
        break;
      case PARTICLE_MODULE_TEST_GRAVITY:
        v61 = varParticleModuleTestGravity;
        varParticleModuleTestGravity = (ParticleModuleTestGravity *)varParticleModuleTypeDef;
        Preload_ParticleModuleTestGravity(streamStart);
        varParticleModuleTestGravity = v61;
        break;
      case PARTICLE_MODULE_TEST_IMPACT:
        v62 = varParticleModuleTestImpact;
        varParticleModuleTestImpact = (ParticleModuleTestImpact *)varParticleModuleTypeDef;
        Preload_ParticleModuleTestImpact(streamStart);
        varParticleModuleTestImpact = v62;
        break;
      case PARTICLE_MODULE_TEST_POS:
        v63 = varParticleModuleTestPos;
        varParticleModuleTestPos = (ParticleModuleTestPos *)varParticleModuleTypeDef;
        Preload_ParticleModuleTestPos(streamStart);
        varParticleModuleTestPos = v63;
        break;
      case PARTICLE_MODULE_TEST_TIME_IN_STATE:
        v64 = varParticleModuleTestTimeInState;
        varParticleModuleTestTimeInState = (ParticleModuleTestTimeInState *)varParticleModuleTypeDef;
        Preload_ParticleModuleTestTimeInState(streamStart);
        varParticleModuleTestTimeInState = v64;
        break;
    }
  }
  else
  {
    v2 = varParticleModuleInitAtlas;
    varParticleModuleInitAtlas = (ParticleModuleInitAtlas *)varParticleModuleTypeDef;
    Load_Stream(streamStart, varParticleModuleTypeDef, 0x40ui64);
    v3 = varParticleCurveDef;
    varParticleCurveDef = varParticleModuleInitAtlas->m_curves;
    Preload_ParticleCurveDefArray(NotAtStart, 2ui64);
    varParticleModuleInitAtlas = v2;
    varParticleCurveDef = v3;
  }
}

/*
==============
Preload_ParticleModuleTypeDefArray
==============
*/
void Preload_ParticleModuleTypeDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleTypeDef *i; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleTypeDef, 224 * count);
  for ( i = varParticleModuleTypeDef; v2; --v2 )
  {
    varParticleModuleTypeDef = i;
    Preload_ParticleModuleTypeDef(NotAtStart);
    ++i;
  }
}

/*
==============
Preload_ParticleModuleTypeDefStream
==============
*/
void Preload_ParticleModuleTypeDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 67443, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  for ( ; count; --count )
  {
    Preload_ParticleModuleTypeDef(AtStart);
    varParticleModuleTypeDef = (ParticleModuleTypeDef *)g_streamPosGlob.pos;
  }
}

/*
==============
Preload_ParticleModuleTypeStream
==============
*/
void Preload_ParticleModuleTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 49359, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleType;
    do
    {
      Load_Stream(AtStart, pos, 2ui64);
      pos = g_streamPosGlob.pos;
      varParticleModuleType = (ParticleModuleType *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleVectorFieldGraph
==============
*/
void Preload_ParticleModuleVectorFieldGraph(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 

  Load_Stream(streamStart, varParticleModuleVectorFieldGraph, 0x30ui64);
  v1 = varParticleCurveDef;
  varParticleCurveDef = varParticleModuleVectorFieldGraph->m_curves;
  Preload_ParticleCurveDefArray(NotAtStart, 2ui64);
  varParticleCurveDef = v1;
}

/*
==============
Preload_ParticleModuleVectorFieldGraphArray
==============
*/
void Preload_ParticleModuleVectorFieldGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleVectorFieldGraph *i; 
  ParticleCurveDef *v4; 
  ParticleCurveDef *v5; 
  __int64 v6; 
  ParticleCurveControlPointDef *v7; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleVectorFieldGraph, 48 * count);
  for ( i = varParticleModuleVectorFieldGraph; v2; --v2 )
  {
    varParticleModuleVectorFieldGraph = i;
    Load_Stream(NotAtStart, i, 0x30ui64);
    v4 = varParticleCurveDef;
    varParticleCurveDef = varParticleModuleVectorFieldGraph->m_curves;
    Load_Stream(NotAtStart, varParticleModuleVectorFieldGraph->m_curves, 0x20ui64);
    v5 = varParticleCurveDef;
    v6 = 2i64;
    do
    {
      varParticleCurveDef = v5;
      Load_Stream(NotAtStart, v5, 0x10ui64);
      if ( varParticleCurveDef->controlPoints )
      {
        v7 = varParticleCurveControlPointDef;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
        varParticleCurveControlPointDef = v7;
      }
      ++v5;
      --v6;
    }
    while ( v6 );
    ++i;
    varParticleCurveDef = v4;
  }
}

/*
==============
Preload_ParticleModuleVectorFieldGraphStream
==============
*/
void Preload_ParticleModuleVectorFieldGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 
  ParticleCurveDef *v5; 
  __int64 v6; 
  ParticleCurveControlPointDef *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 63435, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleVectorFieldGraph;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      v4 = varParticleCurveDef;
      varParticleCurveDef = varParticleModuleVectorFieldGraph->m_curves;
      Load_Stream(NotAtStart, varParticleModuleVectorFieldGraph->m_curves, 0x20ui64);
      v5 = varParticleCurveDef;
      v6 = 2i64;
      do
      {
        varParticleCurveDef = v5;
        Load_Stream(NotAtStart, v5, 0x10ui64);
        if ( varParticleCurveDef->controlPoints )
        {
          v7 = varParticleCurveControlPointDef;
          DB_PatchMem_FixStreamAlignment(0xFui64);
          DB_CheckCanIncStreamPos(0i64);
          varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
          varParticleCurveControlPointDef = v7;
        }
        ++v5;
        --v6;
      }
      while ( v6 );
      pos = g_streamPosGlob.pos;
      varParticleModuleVectorFieldGraph = (ParticleModuleVectorFieldGraph *)g_streamPosGlob.pos;
      varParticleCurveDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleModuleVelocityGraph
==============
*/
void Preload_ParticleModuleVelocityGraph(const DBStreamStart streamStart)
{
  ParticleCurveDef *v1; 

  Load_Stream(streamStart, varParticleModuleVelocityGraph, 0x90ui64);
  v1 = varParticleCurveDef;
  varParticleCurveDef = varParticleModuleVelocityGraph->m_curves;
  Preload_ParticleCurveDefArray(NotAtStart, 6ui64);
  varParticleCurveDef = v1;
}

/*
==============
Preload_ParticleModuleVelocityGraphArray
==============
*/
void Preload_ParticleModuleVelocityGraphArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleModuleVelocityGraph *i; 
  ParticleCurveDef *v4; 
  ParticleCurveDef *v5; 
  __int64 v6; 
  ParticleCurveControlPointDef *v7; 

  v2 = count;
  Load_Stream(streamStart, varParticleModuleVelocityGraph, 144 * count);
  for ( i = varParticleModuleVelocityGraph; v2; --v2 )
  {
    varParticleModuleVelocityGraph = i;
    Load_Stream(NotAtStart, i, 0x90ui64);
    v4 = varParticleCurveDef;
    varParticleCurveDef = varParticleModuleVelocityGraph->m_curves;
    Load_Stream(NotAtStart, varParticleModuleVelocityGraph->m_curves, 0x60ui64);
    v5 = varParticleCurveDef;
    v6 = 6i64;
    do
    {
      varParticleCurveDef = v5;
      Load_Stream(NotAtStart, v5, 0x10ui64);
      if ( varParticleCurveDef->controlPoints )
      {
        v7 = varParticleCurveControlPointDef;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
        varParticleCurveControlPointDef = v7;
      }
      ++v5;
      --v6;
    }
    while ( v6 );
    ++i;
    varParticleCurveDef = v4;
  }
}

/*
==============
Preload_ParticleModuleVelocityGraphStream
==============
*/
void Preload_ParticleModuleVelocityGraphStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleCurveDef *v4; 
  ParticleCurveDef *v5; 
  __int64 v6; 
  ParticleCurveControlPointDef *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 63290, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleModuleVelocityGraph;
    do
    {
      Load_Stream(AtStart, pos, 0x90ui64);
      v4 = varParticleCurveDef;
      varParticleCurveDef = varParticleModuleVelocityGraph->m_curves;
      Load_Stream(NotAtStart, varParticleModuleVelocityGraph->m_curves, 0x60ui64);
      v5 = varParticleCurveDef;
      v6 = 6i64;
      do
      {
        varParticleCurveDef = v5;
        Load_Stream(NotAtStart, v5, 0x10ui64);
        if ( varParticleCurveDef->controlPoints )
        {
          v7 = varParticleCurveControlPointDef;
          DB_PatchMem_FixStreamAlignment(0xFui64);
          DB_CheckCanIncStreamPos(0i64);
          varParticleCurveControlPointDef = (ParticleCurveControlPointDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 16i64 * varParticleCurveDef->numControlPoints);
          varParticleCurveControlPointDef = v7;
        }
        ++v5;
        --v6;
      }
      while ( v6 );
      pos = g_streamPosGlob.pos;
      varParticleModuleVelocityGraph = (ParticleModuleVelocityGraph *)g_streamPosGlob.pos;
      varParticleCurveDef = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticlePhaseOptions
==============
*/
void Preload_ParticlePhaseOptions(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticlePhaseOptions, 4ui64);
}

/*
==============
Preload_ParticlePhaseOptionsArray
==============
*/
void Preload_ParticlePhaseOptionsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticlePhaseOptions, 4 * count);
}

/*
==============
Preload_ParticlePhaseOptionsStream
==============
*/
void Preload_ParticlePhaseOptionsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 68821, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticlePhaseOptions;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varParticlePhaseOptions = (ParticlePhaseOptions *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticlePhysicsFXData
==============
*/
void Preload_ParticlePhysicsFXData(const DBStreamStart streamStart)
{
  PhysicsFXPipeline **v1; 
  PhysicsFXShape **v2; 

  Load_Stream(streamStart, varParticlePhysicsFXData, 0x10ui64);
  v1 = varPhysicsFXPipelinePtr;
  varPhysicsFXPipelinePtr = &varParticlePhysicsFXData->physicsFXPipeline;
  Preload_PhysicsFXPipelinePtr(NotAtStart);
  varPhysicsFXPipelinePtr = v1;
  v2 = varPhysicsFXShapePtr;
  varPhysicsFXShapePtr = &varParticlePhysicsFXData->physicsFXShape;
  Preload_PhysicsFXShapePtr(NotAtStart);
  varPhysicsFXShapePtr = v2;
}

/*
==============
Preload_ParticlePhysicsFXDataArray
==============
*/
void Preload_ParticlePhysicsFXDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticlePhysicsFXData *i; 
  PhysicsFXPipeline **v4; 
  PhysicsFXShape **v5; 

  v2 = count;
  Load_Stream(streamStart, varParticlePhysicsFXData, 16 * count);
  for ( i = varParticlePhysicsFXData; v2; --v2 )
  {
    varParticlePhysicsFXData = i;
    Load_Stream(NotAtStart, i, 0x10ui64);
    v4 = varPhysicsFXPipelinePtr;
    varPhysicsFXPipelinePtr = &varParticlePhysicsFXData->physicsFXPipeline;
    Preload_PhysicsFXPipelinePtr(NotAtStart);
    varPhysicsFXPipelinePtr = v4;
    v5 = varPhysicsFXShapePtr;
    varPhysicsFXShapePtr = &varParticlePhysicsFXData->physicsFXShape;
    Preload_PhysicsFXShapePtr(NotAtStart);
    ++i;
    varPhysicsFXShapePtr = v5;
  }
}

/*
==============
Preload_ParticlePhysicsFXDataStream
==============
*/
void Preload_ParticlePhysicsFXDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  PhysicsFXPipeline **v4; 
  PhysicsFXShape **v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 50010, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticlePhysicsFXData;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      v4 = varPhysicsFXPipelinePtr;
      varPhysicsFXPipelinePtr = &varParticlePhysicsFXData->physicsFXPipeline;
      Preload_PhysicsFXPipelinePtr(NotAtStart);
      varPhysicsFXPipelinePtr = v4;
      v5 = varPhysicsFXShapePtr;
      varPhysicsFXShapePtr = &varParticlePhysicsFXData->physicsFXShape;
      Preload_PhysicsFXShapePtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticlePhysicsFXData = (ParticlePhysicsFXData *)g_streamPosGlob.pos;
      varPhysicsFXShapePtr = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleRelativeVelocityType
==============
*/
void Preload_ParticleRelativeVelocityType(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleRelativeVelocityType, 4ui64);
}

/*
==============
Preload_ParticleRelativeVelocityTypeArray
==============
*/
void Preload_ParticleRelativeVelocityTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleRelativeVelocityType, 4 * count);
}

/*
==============
Preload_ParticleRelativeVelocityTypeStream
==============
*/
void Preload_ParticleRelativeVelocityTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 56104, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleRelativeVelocityType;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varParticleRelativeVelocityType = (ParticleRelativeVelocityType *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleRenderOptions
==============
*/
void Preload_ParticleRenderOptions(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleRenderOptions, 4ui64);
}

/*
==============
Preload_ParticleRenderOptionsArray
==============
*/
void Preload_ParticleRenderOptionsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleRenderOptions, 4 * count);
}

/*
==============
Preload_ParticleRenderOptionsStream
==============
*/
void Preload_ParticleRenderOptionsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 54306, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleRenderOptions;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varParticleRenderOptions = (ParticleRenderOptions *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleShaderGraphCurves
==============
*/
void Preload_ParticleShaderGraphCurves(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleShaderGraphCurves, 4ui64);
}

/*
==============
Preload_ParticleShaderGraphCurvesArray
==============
*/
void Preload_ParticleShaderGraphCurvesArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleShaderGraphCurves, 4 * count);
}

/*
==============
Preload_ParticleShaderGraphCurvesStream
==============
*/
void Preload_ParticleShaderGraphCurvesStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 50602, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleShaderGraphCurves;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varParticleShaderGraphCurves = (ParticleShaderGraphCurves *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleShaderGraphOptions
==============
*/
void Preload_ParticleShaderGraphOptions(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleShaderGraphOptions, 4ui64);
}

/*
==============
Preload_ParticleShaderGraphOptionsArray
==============
*/
void Preload_ParticleShaderGraphOptionsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleShaderGraphOptions, 4 * count);
}

/*
==============
Preload_ParticleShaderGraphOptionsStream
==============
*/
void Preload_ParticleShaderGraphOptionsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 54360, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleShaderGraphOptions;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varParticleShaderGraphOptions = (ParticleShaderGraphOptions *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleSpawnFlags
==============
*/
void Preload_ParticleSpawnFlags(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleSpawnFlags, 1ui64);
}

/*
==============
Preload_ParticleSpawnFlagsArray
==============
*/
void Preload_ParticleSpawnFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleSpawnFlags, count);
}

/*
==============
Preload_ParticleSpawnFlagsStream
==============
*/
void Preload_ParticleSpawnFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 57397, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleSpawnFlags;
    do
    {
      Load_Stream(AtStart, pos, 1ui64);
      pos = g_streamPosGlob.pos;
      varParticleSpawnFlags = (ParticleSpawnFlags *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleSpawnMeshAssetDef
==============
*/
void Preload_ParticleSpawnMeshAssetDef(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleSpawnMeshAssetDef, 0x10ui64);
}

/*
==============
Preload_ParticleSpawnMeshAssetDefArray
==============
*/
void Preload_ParticleSpawnMeshAssetDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleSpawnMeshAssetDef, 16 * count);
}

/*
==============
Preload_ParticleSpawnMeshAssetDefStream
==============
*/
void Preload_ParticleSpawnMeshAssetDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 58637, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleSpawnMeshAssetDef;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      pos = g_streamPosGlob.pos;
      varParticleSpawnMeshAssetDef = (ParticleSpawnMeshAssetDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleSpawnShapeType
==============
*/
void Preload_ParticleSpawnShapeType(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleSpawnShapeType, 1ui64);
}

/*
==============
Preload_ParticleSpawnShapeTypeArray
==============
*/
void Preload_ParticleSpawnShapeTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleSpawnShapeType, count);
}

/*
==============
Preload_ParticleSpawnShapeTypeStream
==============
*/
void Preload_ParticleSpawnShapeTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 57451, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleSpawnShapeType;
    do
    {
      Load_Stream(AtStart, pos, 1ui64);
      pos = g_streamPosGlob.pos;
      varParticleSpawnShapeType = (ParticleSpawnShapeType *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleStateDef
==============
*/
void Preload_ParticleStateDef(const DBStreamStart streamStart)
{
  ParticleModuleGroupDef *v1; 
  ParticleModuleGroupDef *v2; 
  __int64 v3; 

  Load_Stream(streamStart, varParticleStateDef, 0x20ui64);
  if ( varParticleStateDef->moduleGroupDefs )
  {
    v1 = varParticleModuleGroupDef;
    DB_PatchMem_FixStreamAlignment(0xFui64);
    DB_CheckCanIncStreamPos(0i64);
    varParticleModuleGroupDef = (ParticleModuleGroupDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x30ui64);
    v2 = varParticleModuleGroupDef;
    v3 = 3i64;
    do
    {
      varParticleModuleGroupDef = v2;
      Preload_ParticleModuleGroupDef(NotAtStart);
      ++v2;
      --v3;
    }
    while ( v3 );
    varParticleModuleGroupDef = v1;
  }
}

/*
==============
Preload_ParticleStateDefArray
==============
*/
void Preload_ParticleStateDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleStateDef *i; 
  ParticleModuleGroupDef *v4; 
  ParticleModuleGroupDef *v5; 
  __int64 v6; 

  v2 = count;
  Load_Stream(streamStart, varParticleStateDef, 32 * count);
  for ( i = varParticleStateDef; v2; --v2 )
  {
    varParticleStateDef = i;
    Load_Stream(NotAtStart, i, 0x20ui64);
    if ( varParticleStateDef->moduleGroupDefs )
    {
      v4 = varParticleModuleGroupDef;
      DB_PatchMem_FixStreamAlignment(0xFui64);
      DB_CheckCanIncStreamPos(0i64);
      varParticleModuleGroupDef = (ParticleModuleGroupDef *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 0x30ui64);
      v5 = varParticleModuleGroupDef;
      v6 = 3i64;
      do
      {
        varParticleModuleGroupDef = v5;
        Preload_ParticleModuleGroupDef(NotAtStart);
        ++v5;
        --v6;
      }
      while ( v6 );
      varParticleModuleGroupDef = v4;
    }
    ++i;
  }
}

/*
==============
Preload_ParticleStateDefFlags
==============
*/
void Preload_ParticleStateDefFlags(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleStateDefFlags, 8ui64);
}

/*
==============
Preload_ParticleStateDefFlagsArray
==============
*/
void Preload_ParticleStateDefFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleStateDefFlags, 8 * count);
}

/*
==============
Preload_ParticleStateDefFlagsStream
==============
*/
void Preload_ParticleStateDefFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 67742, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleStateDefFlags;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      pos = g_streamPosGlob.pos;
      varParticleStateDefFlags = g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleStateDefStream
==============
*/
void Preload_ParticleStateDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ParticleModuleGroupDef *v4; 
  ParticleModuleGroupDef *v5; 
  __int64 v6; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 67866, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleStateDef;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      if ( varParticleStateDef->moduleGroupDefs )
      {
        v4 = varParticleModuleGroupDef;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        varParticleModuleGroupDef = (ParticleModuleGroupDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x30ui64);
        v5 = varParticleModuleGroupDef;
        v6 = 3i64;
        do
        {
          varParticleModuleGroupDef = v5;
          Preload_ParticleModuleGroupDef(NotAtStart);
          ++v5;
          --v6;
        }
        while ( v6 );
        varParticleModuleGroupDef = v4;
      }
      pos = g_streamPosGlob.pos;
      varParticleStateDef = (ParticleStateDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleSystemDef
==============
*/
void Preload_ParticleSystemDef(const DBStreamStart streamStart)
{
  const char **v2; 
  ParticleSystemDef *v3; 
  ParticleEmitterDef *v4; 
  __int64 numEmitters; 
  ParticleEmitterDef *i; 
  ParticleScriptedInputNodeDef *v7; 

  DB_PatchMem_PushAsset(40, varParticleSystemDef);
  Load_Stream(streamStart, varParticleSystemDef, 0x80ui64);
  DB_PushStreamPos(8u);
  v2 = varXString;
  varXString = &varParticleSystemDef->name;
  Preload_XString(NotAtStart);
  v3 = varParticleSystemDef;
  varXString = v2;
  if ( varParticleSystemDef->emitterDefs )
  {
    v4 = varParticleEmitterDef;
    DB_PatchMem_FixStreamAlignment(0xFui64);
    DB_CheckCanIncStreamPos(0i64);
    varParticleEmitterDef = (ParticleEmitterDef *)g_streamPosGlob.pos;
    numEmitters = varParticleSystemDef->numEmitters;
    Load_Stream(AtStart, g_streamPosGlob.pos, 160 * numEmitters);
    for ( i = varParticleEmitterDef; numEmitters; --numEmitters )
    {
      varParticleEmitterDef = i;
      Preload_ParticleEmitterDef(NotAtStart);
      ++i;
    }
    v3 = varParticleSystemDef;
    varParticleEmitterDef = v4;
  }
  if ( v3->scriptedInputNodeDefs )
  {
    v7 = varParticleScriptedInputNodeDef;
    varParticleScriptedInputNodeDef = AllocPreload_ParticleScriptedInputNodeDef();
    Preload_ParticleScriptedInputNodeDefArray(AtStart, varParticleSystemDef->numScriptedInputNodes);
    varParticleScriptedInputNodeDef = v7;
  }
  DB_PopStreamPos();
  DB_PatchMem_PopAsset();
}

/*
==============
Preload_ParticleSystemDefArray
==============
*/
void Preload_ParticleSystemDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleSystemDef *i; 
  const char **v4; 
  ParticleSystemDef *v5; 
  ParticleEmitterDef *v6; 
  __int64 numEmitters; 
  ParticleEmitterDef *j; 
  ParticleScriptedInputNodeDef *v9; 

  v2 = count;
  Load_Stream(streamStart, varParticleSystemDef, count << 7);
  for ( i = varParticleSystemDef; v2; --v2 )
  {
    varParticleSystemDef = i;
    DB_PatchMem_PushAsset(40, i);
    Load_Stream(NotAtStart, varParticleSystemDef, 0x80ui64);
    DB_PushStreamPos(8u);
    v4 = varXString;
    varXString = &varParticleSystemDef->name;
    Preload_XString(NotAtStart);
    v5 = varParticleSystemDef;
    varXString = v4;
    if ( varParticleSystemDef->emitterDefs )
    {
      v6 = varParticleEmitterDef;
      DB_PatchMem_FixStreamAlignment(0xFui64);
      DB_CheckCanIncStreamPos(0i64);
      varParticleEmitterDef = (ParticleEmitterDef *)g_streamPosGlob.pos;
      numEmitters = varParticleSystemDef->numEmitters;
      Load_Stream(AtStart, g_streamPosGlob.pos, 160 * numEmitters);
      for ( j = varParticleEmitterDef; numEmitters; --numEmitters )
      {
        varParticleEmitterDef = j;
        Preload_ParticleEmitterDef(NotAtStart);
        ++j;
      }
      v5 = varParticleSystemDef;
      varParticleEmitterDef = v6;
    }
    if ( v5->scriptedInputNodeDefs )
    {
      v9 = varParticleScriptedInputNodeDef;
      varParticleScriptedInputNodeDef = AllocPreload_ParticleScriptedInputNodeDef();
      Preload_ParticleScriptedInputNodeDefArray(AtStart, varParticleSystemDef->numScriptedInputNodes);
      varParticleScriptedInputNodeDef = v9;
    }
    DB_PopStreamPos();
    DB_PatchMem_PopAsset();
    ++i;
  }
}

/*
==============
Preload_ParticleSystemDefFlags
==============
*/
void Preload_ParticleSystemDefFlags(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleSystemDefFlags, 4ui64);
}

/*
==============
Preload_ParticleSystemDefFlagsArray
==============
*/
void Preload_ParticleSystemDefFlagsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleSystemDefFlags, 4 * count);
}

/*
==============
Preload_ParticleSystemDefFlagsStream
==============
*/
void Preload_ParticleSystemDefFlagsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 68767, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleSystemDefFlags;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varParticleSystemDefFlags = (unsigned int *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleSystemDefPtr
==============
*/
void Preload_ParticleSystemDefPtr(const DBStreamStart streamStart)
{
  __int64 v1; 
  ParticleSystemDef *v2; 

  Load_Stream(streamStart, varParticleSystemDefPtr, 8ui64);
  DB_PushStreamPos(2u);
  v1 = (__int64)*varParticleSystemDefPtr;
  if ( *varParticleSystemDefPtr )
  {
    if ( v1 == -1 )
    {
      DB_PushSharedData();
    }
    else if ( v1 != -2 && v1 != -3 )
    {
      goto LABEL_11;
    }
    v2 = varParticleSystemDef;
    DB_PatchMem_FixStreamAlignment(0xFui64);
    DB_CheckCanIncStreamPos(0i64);
    varParticleSystemDef = (ParticleSystemDef *)g_streamPosGlob.pos;
    if ( v1 == -3 )
      DB_InsertPointer();
    Preload_ParticleSystemDef(AtStart);
    varParticleSystemDef = v2;
    if ( v1 == -1 )
      DB_PopSharedData();
  }
LABEL_11:
  DB_PopStreamPos();
}

/*
==============
Preload_ParticleSystemDefPtrArray
==============
*/
void Preload_ParticleSystemDefPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  const ParticleSystemDef **i; 
  __int64 v4; 
  ParticleSystemDef *v5; 

  v2 = count;
  Load_Stream(streamStart, varParticleSystemDefPtr, 8 * count);
  for ( i = varParticleSystemDefPtr; v2; --v2 )
  {
    varParticleSystemDefPtr = i;
    Load_Stream(NotAtStart, i, 8ui64);
    DB_PushStreamPos(2u);
    v4 = (__int64)*varParticleSystemDefPtr;
    if ( *varParticleSystemDefPtr )
    {
      if ( v4 == -1 )
      {
        DB_PushSharedData();
LABEL_8:
        v5 = varParticleSystemDef;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        varParticleSystemDef = (ParticleSystemDef *)g_streamPosGlob.pos;
        if ( v4 == -3 )
          DB_InsertPointer();
        Preload_ParticleSystemDef(AtStart);
        varParticleSystemDef = v5;
        if ( v4 == -1 )
          DB_PopSharedData();
        goto LABEL_12;
      }
      if ( v4 == -2 || v4 == -3 )
        goto LABEL_8;
    }
LABEL_12:
    DB_PopStreamPos();
    ++i;
  }
}

/*
==============
Preload_ParticleSystemDefPtrStream
==============
*/
void Preload_ParticleSystemDefPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  __int64 v4; 
  ParticleSystemDef *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 69392, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleSystemDefPtr;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      DB_PushStreamPos(2u);
      v4 = (__int64)*varParticleSystemDefPtr;
      if ( *varParticleSystemDefPtr )
      {
        if ( v4 == -1 )
        {
          DB_PushSharedData();
LABEL_12:
          v5 = varParticleSystemDef;
          DB_PatchMem_FixStreamAlignment(0xFui64);
          DB_CheckCanIncStreamPos(0i64);
          varParticleSystemDef = (ParticleSystemDef *)g_streamPosGlob.pos;
          if ( v4 == -3 )
            DB_InsertPointer();
          Preload_ParticleSystemDef(AtStart);
          varParticleSystemDef = v5;
          if ( v4 == -1 )
            DB_PopSharedData();
          goto LABEL_16;
        }
        if ( v4 == -2 || v4 == -3 )
          goto LABEL_12;
      }
LABEL_16:
      DB_PopStreamPos();
      pos = g_streamPosGlob.pos;
      varParticleSystemDefPtr = (const ParticleSystemDef **)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleSystemDefRef
==============
*/
void Preload_ParticleSystemDefRef(const DBStreamStart streamStart)
{
  const char **v1; 

  Load_Stream(streamStart, varParticleSystemDefRef, 8ui64);
  v1 = varXString;
  varXString = (const char **)varParticleSystemDefRef;
  Preload_XString(NotAtStart);
  varXString = v1;
}

/*
==============
Preload_ParticleSystemDefRefArray
==============
*/
void Preload_ParticleSystemDefRefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ParticleSystemDefRef *i; 
  const char **v4; 

  v2 = count;
  Load_Stream(streamStart, varParticleSystemDefRef, 8 * count);
  for ( i = varParticleSystemDefRef; v2; --v2 )
  {
    varParticleSystemDefRef = i;
    Load_Stream(NotAtStart, i, 8ui64);
    v4 = varXString;
    varXString = (const char **)varParticleSystemDefRef;
    Preload_XString(NotAtStart);
    ++i;
    varXString = v4;
  }
}

/*
==============
Preload_ParticleSystemDefRefStream
==============
*/
void Preload_ParticleSystemDefRefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  const char **v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 69466, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleSystemDefRef;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      v4 = varXString;
      varXString = (const char **)varParticleSystemDefRef;
      Preload_XString(NotAtStart);
      pos = g_streamPosGlob.pos;
      varParticleSystemDefRef = (ParticleSystemDefRef *)g_streamPosGlob.pos;
      varXString = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleSystemDefStream
==============
*/
void Preload_ParticleSystemDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  const char **v4; 
  ParticleSystemDef *v5; 
  ParticleEmitterDef *v6; 
  __int64 numEmitters; 
  ParticleEmitterDef *i; 
  ParticleScriptedInputNodeDef *v9; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 69277, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleSystemDef;
    do
    {
      DB_PatchMem_PushAsset(40, pos);
      Load_Stream(AtStart, varParticleSystemDef, 0x80ui64);
      DB_PushStreamPos(8u);
      v4 = varXString;
      varXString = &varParticleSystemDef->name;
      Preload_XString(NotAtStart);
      v5 = varParticleSystemDef;
      varXString = v4;
      if ( varParticleSystemDef->emitterDefs )
      {
        v6 = varParticleEmitterDef;
        DB_PatchMem_FixStreamAlignment(0xFui64);
        DB_CheckCanIncStreamPos(0i64);
        varParticleEmitterDef = (ParticleEmitterDef *)g_streamPosGlob.pos;
        numEmitters = varParticleSystemDef->numEmitters;
        Load_Stream(AtStart, g_streamPosGlob.pos, 160 * numEmitters);
        for ( i = varParticleEmitterDef; numEmitters; --numEmitters )
        {
          varParticleEmitterDef = i;
          Preload_ParticleEmitterDef(NotAtStart);
          ++i;
        }
        v5 = varParticleSystemDef;
        varParticleEmitterDef = v6;
      }
      if ( v5->scriptedInputNodeDefs )
      {
        v9 = varParticleScriptedInputNodeDef;
        varParticleScriptedInputNodeDef = AllocPreload_ParticleScriptedInputNodeDef();
        Preload_ParticleScriptedInputNodeDefArray(AtStart, varParticleSystemDef->numScriptedInputNodes);
        varParticleScriptedInputNodeDef = v9;
      }
      DB_PopStreamPos();
      DB_PatchMem_PopAsset();
      pos = g_streamPosGlob.pos;
      varParticleSystemDef = (ParticleSystemDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleUseOrientationOptions
==============
*/
void Preload_ParticleUseOrientationOptions(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleUseOrientationOptions, 1ui64);
}

/*
==============
Preload_ParticleUseOrientationOptionsArray
==============
*/
void Preload_ParticleUseOrientationOptionsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleUseOrientationOptions, count);
}

/*
==============
Preload_ParticleUseOrientationOptionsStream
==============
*/
void Preload_ParticleUseOrientationOptionsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 56639, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleUseOrientationOptions;
    do
    {
      Load_Stream(AtStart, pos, 1ui64);
      pos = g_streamPosGlob.pos;
      varParticleUseOrientationOptions = (ParticleUseOrientationOptions *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleUseScaleOptions
==============
*/
void Preload_ParticleUseScaleOptions(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleUseScaleOptions, 1ui64);
}

/*
==============
Preload_ParticleUseScaleOptionsArray
==============
*/
void Preload_ParticleUseScaleOptionsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleUseScaleOptions, count);
}

/*
==============
Preload_ParticleUseScaleOptionsStream
==============
*/
void Preload_ParticleUseScaleOptionsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 56693, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleUseScaleOptions;
    do
    {
      Load_Stream(AtStart, pos, 1ui64);
      pos = g_streamPosGlob.pos;
      varParticleUseScaleOptions = (ParticleUseScaleOptions *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ParticleUseVelocityOptions
==============
*/
void Preload_ParticleUseVelocityOptions(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticleUseVelocityOptions, 1ui64);
}

/*
==============
Preload_ParticleUseVelocityOptionsArray
==============
*/
void Preload_ParticleUseVelocityOptionsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticleUseVelocityOptions, count);
}

/*
==============
Preload_ParticleUseVelocityOptionsStream
==============
*/
void Preload_ParticleUseVelocityOptionsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 56747, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticleUseVelocityOptions;
    do
    {
      Load_Stream(AtStart, pos, 1ui64);
      pos = g_streamPosGlob.pos;
      varParticleUseVelocityOptions = (ParticleUseVelocityOptions *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_Particle_MaterialData
==============
*/
void Preload_Particle_MaterialData(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varParticle_MaterialData, 0xC0ui64);
}

/*
==============
Preload_Particle_MaterialDataArray
==============
*/
void Preload_Particle_MaterialDataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varParticle_MaterialData, 192 * count);
}

/*
==============
Preload_Particle_MaterialDataStream
==============
*/
void Preload_Particle_MaterialDataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_particledb.h", 54866, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varParticle_MaterialData;
    do
    {
      Load_Stream(AtStart, pos, 0xC0ui64);
      pos = g_streamPosGlob.pos;
      varParticle_MaterialData = (Particle_MaterialData *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

