/*
==============
SV_BotUpdateBots
==============
*/

void SV_BotUpdateBots(void)
{
  ?SV_BotUpdateBots@@YAXXZ();
}

/*
==============
SV_BotIsBot
==============
*/

int __fastcall SV_BotIsBot(const int clientNum)
{
  return ?SV_BotIsBot@@YAHH@Z(clientNum);
}

/*
==============
Bot_EndProf
==============
*/

long double __fastcall Bot_EndProf()
{
  return ?Bot_EndProf@@YANXZ();
}

/*
==============
Bot_UpdateZoneObstacles
==============
*/

void __fastcall Bot_UpdateZoneObstacles(bot_info_t *botInfo)
{
  ?Bot_UpdateZoneObstacles@@YAXPEAUbot_info_t@@@Z(botInfo);
}

/*
==============
Bot_GetSpectatedBotData
==============
*/

bot_data_t *__fastcall Bot_GetSpectatedBotData(const LocalClientNum_t localClientNum)
{
  return ?Bot_GetSpectatedBotData@@YAPEAUbot_data_t@@W4LocalClientNum_t@@@Z(localClientNum);
}

/*
==============
Bot_GetLastKnownEntPosAndTime
==============
*/

int __fastcall Bot_GetLastKnownEntPosAndTime(const bot_data_t *botData, const gentity_s *entity, vec3_t *targetPos)
{
  return ?Bot_GetLastKnownEntPosAndTime@@YAHPEBUbot_data_t@@PEBUgentity_s@@PEATvec3_t@@@Z(botData, entity, targetPos);
}

/*
==============
Bot_CanUseAnyTraversals
==============
*/

bool __fastcall Bot_CanUseAnyTraversals(const bot_info_t *botInfo)
{
  return ?Bot_CanUseAnyTraversals@@YA_NPEBUbot_info_t@@@Z(botInfo);
}

/*
==============
Bot_MemoryIterateInit
==============
*/

void __fastcall Bot_MemoryIterateInit(bot_mem_iterator_t *memIt)
{
  ?Bot_MemoryIterateInit@@YAXPEAUbot_mem_iterator_t@@@Z(memIt);
}

/*
==============
Bot_IsFacingPosition
==============
*/

int __fastcall Bot_IsFacingPosition(bot_data_t *botData, const vec3_t *position)
{
  return ?Bot_IsFacingPosition@@YAHPEAUbot_data_t@@AEBTvec3_t@@@Z(botData, position);
}

/*
==============
Bot_NegotiationPointReached
==============
*/

int __fastcall Bot_NegotiationPointReached(bot_data_t *botData, bot_traversal_stage_t stage, usercmd_s *cmd)
{
  return ?Bot_NegotiationPointReached@@YAHPEAUbot_data_t@@W4bot_traversal_stage_t@@PEAUusercmd_s@@@Z(botData, stage, cmd);
}

/*
==============
Bot_UpdateDive
==============
*/

void __fastcall Bot_UpdateDive(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_UpdateDive@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_SetScriptGoalNode
==============
*/

int __fastcall Bot_SetScriptGoalNode(bot_data_t *botData, unsigned __int16 pathNodeNum, float goalRadius, bot_scr_goal_t goalType, float *goalYaw, float objectiveRadius, int shortTermGoal)
{
  return ?Bot_SetScriptGoalNode@@YAHPEAUbot_data_t@@GMW4bot_scr_goal_t@@PEAMMH@Z(botData, pathNodeNum, goalRadius, goalType, goalYaw, objectiveRadius, shortTermGoal);
}

/*
==============
SV_BotDisconnectCleanup
==============
*/

void __fastcall SV_BotDisconnectCleanup(const int clientIndex)
{
  ?SV_BotDisconnectCleanup@@YAXH@Z(clientIndex);
}

/*
==============
Bot_PathHasNegotiation
==============
*/

bool __fastcall Bot_PathHasNegotiation(const bot_info_t *botInfo)
{
  return ?Bot_PathHasNegotiation@@YA_NPEBUbot_info_t@@@Z(botInfo);
}

/*
==============
Bot_CanMoveTo
==============
*/

int __fastcall Bot_CanMoveTo(const bot_info_t *botInfo, const vec3_t *from, const vec3_t *to)
{
  return ?Bot_CanMoveTo@@YAHPEBUbot_info_t@@AEBTvec3_t@@1@Z(botInfo, from, to);
}

/*
==============
SV_BotDrawDebugClientScreen
==============
*/

void __fastcall SV_BotDrawDebugClientScreen(const LocalClientNum_t localClientNum)
{
  ?SV_BotDrawDebugClientScreen@@YAXW4LocalClientNum_t@@@Z(localClientNum);
}

/*
==============
Bot_UpdateDoors
==============
*/

bool __fastcall Bot_UpdateDoors(bot_data_t *botData)
{
  return ?Bot_UpdateDoors@@YA_NPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_MemoryWriteEvent
==============
*/

void __fastcall Bot_MemoryWriteEvent(bot_data_t *botData, bot_mem_type_t type, const Weapon *weapon, const vec3_t *location1, const vec3_t *location2, __int16 entNum)
{
  ?Bot_MemoryWriteEvent@@YAXPEAUbot_data_t@@W4bot_mem_type_t@@AEBUWeapon@@AEBTvec3_t@@3F@Z(botData, type, weapon, location1, location2, entNum);
}

/*
==============
SV_BotDropped
==============
*/

void __fastcall SV_BotDropped(const int clientIndex)
{
  ?SV_BotDropped@@YAXH@Z(clientIndex);
}

/*
==============
Bot_DebugGoal
==============
*/

void __fastcall Bot_DebugGoal(int index, vec3_t *goal)
{
  ?Bot_DebugGoal@@YAXHAEATvec3_t@@@Z(index, goal);
}

/*
==============
Bot_UpdateMeleeCharge
==============
*/

void __fastcall Bot_UpdateMeleeCharge(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_UpdateMeleeCharge@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_GetWorldCenter
==============
*/

void __fastcall Bot_GetWorldCenter(vec3_t *worldSize)
{
  ?Bot_GetWorldCenter@@YAXAEATvec3_t@@@Z(worldSize);
}

/*
==============
Bot_AtScriptGoal
==============
*/

int __fastcall Bot_AtScriptGoal(const bot_data_t *botData)
{
  return ?Bot_AtScriptGoal@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_InitializeCmdTime
==============
*/

void __fastcall Bot_InitializeCmdTime(usercmd_s *cmd)
{
  ?Bot_InitializeCmdTime@@YAXPEAUusercmd_s@@@Z(cmd);
}

/*
==============
Bot_GetScriptGoalNode
==============
*/

pathnode_t *__fastcall Bot_GetScriptGoalNode(const bot_data_t *botData)
{
  return ?Bot_GetScriptGoalNode@@YAPEAUpathnode_t@@PEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_IsStuckReacting
==============
*/

int __fastcall Bot_IsStuckReacting(const bot_info_t *botInfo)
{
  return ?Bot_IsStuckReacting@@YAHPEBUbot_info_t@@@Z(botInfo);
}

/*
==============
Bot_SetPersonality
==============
*/

void __fastcall Bot_SetPersonality(bot_data_t *botData, bot_personality_t botPersonality)
{
  ?Bot_SetPersonality@@YAXPEAUbot_data_t@@W4bot_personality_t@@@Z(botData, botPersonality);
}

/*
==============
Bot_DrawDebug
==============
*/

void __fastcall Bot_DrawDebug(bot_data_t *botData)
{
  ?Bot_DrawDebug@@YAXPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_PredictSeeTacPoint
==============
*/

bool __fastcall Bot_PredictSeeTacPoint(const bot_info_t *botInfo, const tacpoint_t *testTacPoint, vec3_t *predictedOriginOut)
{
  return ?Bot_PredictSeeTacPoint@@YA_NPEBUbot_info_t@@PEBUtacpoint_t@@PEATvec3_t@@@Z(botInfo, testTacPoint, predictedOriginOut);
}

/*
==============
Bot_ThinkRoundRobin
==============
*/

void __fastcall Bot_ThinkRoundRobin(bot_data_t *botData)
{
  ?Bot_ThinkRoundRobin@@YAXPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_GetMemEventType
==============
*/

bot_mem_type_t __fastcall Bot_GetMemEventType(const char *memEventTypeName)
{
  return ?Bot_GetMemEventType@@YA?AW4bot_mem_type_t@@PEBD@Z(memEventTypeName);
}

/*
==============
Bot_SetFrozenCmd
==============
*/

void __fastcall Bot_SetFrozenCmd(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_SetFrozenCmd@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_IsBlinded
==============
*/

int __fastcall Bot_IsBlinded(const bot_data_t *botData)
{
  return ?Bot_IsBlinded@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
SV_BotCanAlwaysSeeEnt
==============
*/

int __fastcall SV_BotCanAlwaysSeeEnt(const ai_common_t *self, const gentity_s *ent)
{
  return ?SV_BotCanAlwaysSeeEnt@@YAHPEBUai_common_t@@PEBUgentity_s@@@Z(self, ent);
}

/*
==============
Bot_UpdateLostEnemyPath
==============
*/

int __fastcall Bot_UpdateLostEnemyPath(bot_data_t *botData)
{
  return ?Bot_UpdateLostEnemyPath@@YAHPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_UpdateGrenadeLook
==============
*/

int __fastcall Bot_UpdateGrenadeLook(bot_data_t *botData, vec3_t *viewAnglesOut)
{
  return ?Bot_UpdateGrenadeLook@@YAHPEAUbot_data_t@@AEATvec3_t@@@Z(botData, viewAnglesOut);
}

/*
==============
Bot_ResumeScriptGoal
==============
*/

int __fastcall Bot_ResumeScriptGoal(bot_data_t *botData)
{
  return ?Bot_ResumeScriptGoal@@YAHPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_IsPointNearWorldEdge
==============
*/

int __fastcall Bot_IsPointNearWorldEdge(const vec3_t *point, const float tolerance)
{
  return ?Bot_IsPointNearWorldEdge@@YAHAEBTvec3_t@@M@Z(point, tolerance);
}

/*
==============
Bot_PointInGoal
==============
*/

int __fastcall Bot_PointInGoal(const bot_data_t *botData, float goalRadius, const vec3_t *point)
{
  return ?Bot_PointInGoal@@YAHPEBUbot_data_t@@MAEBTvec3_t@@@Z(botData, goalRadius, point);
}

/*
==============
SV_BotControllingRemoteMissile
==============
*/

int __fastcall SV_BotControllingRemoteMissile(const gentity_s *ent)
{
  return ?SV_BotControllingRemoteMissile@@YAHPEBUgentity_s@@@Z(ent);
}

/*
==============
Bot_PathExists
==============
*/

int __fastcall Bot_PathExists(const bot_info_t *botInfo)
{
  return ?Bot_PathExists@@YAHPEBUbot_info_t@@@Z(botInfo);
}

/*
==============
Bot_SetBotPersistentMatchData
==============
*/

void __fastcall Bot_SetBotPersistentMatchData(bot_data_t *botData, int firstConnect)
{
  ?Bot_SetBotPersistentMatchData@@YAXPEAUbot_data_t@@H@Z(botData, firstConnect);
}

/*
==============
Bot_GetClosestCharacterToOrigin
==============
*/

gentity_s *__fastcall Bot_GetClosestCharacterToOrigin(gentity_s *selfEntity, const vec3_t *origin, int onlyAI, int allowScriptedAgents, const bitarray<224> *teamFlags)
{
  return ?Bot_GetClosestCharacterToOrigin@@YAPEAUgentity_s@@PEAU1@AEBTvec3_t@@HHAEBV?$bitarray@$0OA@@@@Z(selfEntity, origin, onlyAI, allowScriptedAgents, teamFlags);
}

/*
==============
Bot_UpdateHidingGoal
==============
*/

int __fastcall Bot_UpdateHidingGoal(bot_data_t *botData)
{
  return ?Bot_UpdateHidingGoal@@YAHPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_UpdateScriptGoal
==============
*/

int __fastcall Bot_UpdateScriptGoal(bot_data_t *botData)
{
  return ?Bot_UpdateScriptGoal@@YAHPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_MemoryIterateTeams
==============
*/

bot_mem_event_t *__fastcall Bot_MemoryIterateTeams(bot_data_t *botData, const bitarray<224> *teamFlags, int timeNewest, int timeOldest, bot_mem_iterator_t *memIt)
{
  return ?Bot_MemoryIterateTeams@@YAPEAUbot_mem_event_t@@PEAUbot_data_t@@AEBV?$bitarray@$0OA@@@HHPEAUbot_mem_iterator_t@@@Z(botData, teamFlags, timeNewest, timeOldest, memIt);
}

/*
==============
Bot_UpdateLadder
==============
*/

int __fastcall Bot_UpdateLadder(bot_data_t *botData, usercmd_s *cmd)
{
  return ?Bot_UpdateLadder@@YAHPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_LookAtPoint
==============
*/

void __fastcall Bot_LookAtPoint(bot_data_t *botData, const vec3_t *point, int duration, bot_look_t type)
{
  ?Bot_LookAtPoint@@YAXPEAUbot_data_t@@PEBTvec3_t@@HW4bot_look_t@@@Z(botData, point, duration, type);
}

/*
==============
Bot_UpdateMantleJump
==============
*/

void __fastcall Bot_UpdateMantleJump(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_UpdateMantleJump@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
SV_BotUnregisterEntAffecter
==============
*/

int __fastcall SV_BotUnregisterEntAffecter(const gentity_s *ent)
{
  return ?SV_BotUnregisterEntAffecter@@YAHPEBUgentity_s@@@Z(ent);
}

/*
==============
SV_BotCanTargetSentient
==============
*/

int __fastcall SV_BotCanTargetSentient(const sentient_s *botSentient, const sentient_s *enemySentient, int *isAwareOfSentient)
{
  return ?SV_BotCanTargetSentient@@YAHPEBUsentient_s@@0PEAH@Z(botSentient, enemySentient, isAwareOfSentient);
}

/*
==============
SV_BotAllocateSystemMemory
==============
*/

void __fastcall SV_BotAllocateSystemMemory(HunkUser *hunkUser)
{
  ?SV_BotAllocateSystemMemory@@YAXPEAUHunkUser@@@Z(hunkUser);
}

/*
==============
Bot_ClearScriptGoal
==============
*/

void __fastcall Bot_ClearScriptGoal(bot_data_t *botData)
{
  ?Bot_ClearScriptGoal@@YAXPEAUbot_data_t@@@Z(botData);
}

/*
==============
SV_BotIsBotEnt
==============
*/

int __fastcall SV_BotIsBotEnt(const gentity_s *ent)
{
  return ?SV_BotIsBotEnt@@YAHPEBUgentity_s@@@Z(ent);
}

/*
==============
Bot_UpdateScriptedButtons
==============
*/

void __fastcall Bot_UpdateScriptedButtons(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_UpdateScriptedButtons@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_UpdateMovementTraversal
==============
*/

int __fastcall Bot_UpdateMovementTraversal(bot_data_t *botData, usercmd_s *cmd)
{
  return ?Bot_UpdateMovementTraversal@@YAHPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_GetBotDifficultyFromMenu
==============
*/

bot_difficulty_t __fastcall Bot_GetBotDifficultyFromMenu(const bot_data_t *botData)
{
  return ?Bot_GetBotDifficultyFromMenu@@YA?AW4bot_difficulty_t@@PEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_UpdateClientMessageNotifies
==============
*/

void __fastcall Bot_UpdateClientMessageNotifies(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_UpdateClientMessageNotifies@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_ResetBotInfo
==============
*/

void __fastcall Bot_ResetBotInfo(bot_data_t *botData, gentity_s *entity)
{
  ?Bot_ResetBotInfo@@YAXPEAUbot_data_t@@PEAUgentity_s@@@Z(botData, entity);
}

/*
==============
Bot_IsFiringWeapon
==============
*/

int __fastcall Bot_IsFiringWeapon(const bot_data_t *botData, const usercmd_s *cmd)
{
  return ?Bot_IsFiringWeapon@@YAHPEBUbot_data_t@@PEBUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_UpdateMove_OffPathGrid
==============
*/

int __fastcall Bot_UpdateMove_OffPathGrid(bot_data_t *botData, usercmd_s *cmd)
{
  return ?Bot_UpdateMove_OffPathGrid@@YAHPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
SV_BotIncrementActiveBotCount
==============
*/

void SV_BotIncrementActiveBotCount(void)
{
  ?SV_BotIncrementActiveBotCount@@YAXXZ();
}

/*
==============
Bot_UpdatePathingLook
==============
*/

int __fastcall Bot_UpdatePathingLook(bot_data_t *botData, vec3_t *viewAnglesOut)
{
  return ?Bot_UpdatePathingLook@@YAHPEAUbot_data_t@@AEATvec3_t@@@Z(botData, viewAnglesOut);
}

/*
==============
SV_BotStaticStateWrite
==============
*/

void __fastcall SV_BotStaticStateWrite(MemoryFile *memFile)
{
  ?SV_BotStaticStateWrite@@YAXPEAUMemoryFile@@@Z(memFile);
}

/*
==============
Bot_UpdatePath
==============
*/

void __fastcall Bot_UpdatePath(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_UpdatePath@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_MemoryGetMostRecentPosition
==============
*/

int __fastcall Bot_MemoryGetMostRecentPosition(bot_data_t *botData, int typeFlags, int locationNumber, vec3_t *resultPos, int *resultTime)
{
  return ?Bot_MemoryGetMostRecentPosition@@YAHPEAUbot_data_t@@HHAEATvec3_t@@PEAH@Z(botData, typeFlags, locationNumber, resultPos, resultTime);
}

/*
==============
Bot_IsOnGround
==============
*/

int __fastcall Bot_IsOnGround(const bot_data_t *botData)
{
  return ?Bot_IsOnGround@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_UpdateNavigator
==============
*/

void __fastcall Bot_UpdateNavigator(bot_info_t *botInfo)
{
  ?Bot_UpdateNavigator@@YAXPEAUbot_info_t@@@Z(botInfo);
}

/*
==============
Bot_IsAwareOfEnemy
==============
*/

int __fastcall Bot_IsAwareOfEnemy(const bot_data_t *botData)
{
  return ?Bot_IsAwareOfEnemy@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_IsDeaf
==============
*/

int __fastcall Bot_IsDeaf(const bot_data_t *botData)
{
  return ?Bot_IsDeaf@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_UpdateHybridToggle
==============
*/

void __fastcall Bot_UpdateHybridToggle(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_UpdateHybridToggle@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_NearbyBotExists
==============
*/

int __fastcall Bot_NearbyBotExists(bot_data_t *botData, const float maxDist, int onlySameTeam)
{
  return ?Bot_NearbyBotExists@@YAHPEAUbot_data_t@@MH@Z(botData, maxDist, onlySameTeam);
}

/*
==============
Bot_IsThrowingGrenade
==============
*/

int __fastcall Bot_IsThrowingGrenade(const bot_data_t *botData)
{
  return ?Bot_IsThrowingGrenade@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_IsReloading
==============
*/

int __fastcall Bot_IsReloading(const bot_data_t *botData)
{
  return ?Bot_IsReloading@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_GetLastKnownEntNearestTacPoint
==============
*/

const tacpoint_t *__fastcall Bot_GetLastKnownEntNearestTacPoint(const bot_data_t *botData, const gentity_s *entity)
{
  return ?Bot_GetLastKnownEntNearestTacPoint@@YAPEBUtacpoint_t@@PEBUbot_data_t@@PEBUgentity_s@@@Z(botData, entity);
}

/*
==============
Bot_UpdateMove
==============
*/

void __fastcall Bot_UpdateMove(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_UpdateMove@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_PreferWeaponOverLongRange
==============
*/

int __fastcall Bot_PreferWeaponOverLongRange(const bot_data_t *botData, const Weapon *weapon)
{
  return ?Bot_PreferWeaponOverLongRange@@YAHPEBUbot_data_t@@AEBUWeapon@@@Z(botData, weapon);
}

/*
==============
Bot_GetObstacleFlagsForTeam
==============
*/

unsigned int __fastcall Bot_GetObstacleFlagsForTeam(team_t team)
{
  return ?Bot_GetObstacleFlagsForTeam@@YAIW4team_t@@@Z(team);
}

/*
==============
Bot_StampNodeArea
==============
*/

void __fastcall Bot_StampNodeArea(const bot_data_t *const botData, pathnode_t *node)
{
  ?Bot_StampNodeArea@@YAXQEBUbot_data_t@@PEAUpathnode_t@@@Z(botData, node);
}

/*
==============
Bot_PursuingScriptGoal
==============
*/

int __fastcall Bot_PursuingScriptGoal(const bot_data_t *botData)
{
  return ?Bot_PursuingScriptGoal@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_IsPostedAtGoalType
==============
*/

int __fastcall Bot_IsPostedAtGoalType(const bot_data_t *botData, bot_scr_goal_t goalType)
{
  return ?Bot_IsPostedAtGoalType@@YAHPEBUbot_data_t@@W4bot_scr_goal_t@@@Z(botData, goalType);
}

/*
==============
Bot_HasNavigator
==============
*/

int __fastcall Bot_HasNavigator(const bot_info_t *botInfo)
{
  return ?Bot_HasNavigator@@YAHPEBUbot_info_t@@@Z(botInfo);
}

/*
==============
Bot_HasScriptGoal
==============
*/

int __fastcall Bot_HasScriptGoal(const bot_data_t *botData)
{
  return ?Bot_HasScriptGoal@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_UpdateEnemyTrack
==============
*/

void __fastcall Bot_UpdateEnemyTrack(bot_data_t *botData)
{
  ?Bot_UpdateEnemyTrack@@YAXPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_PredictPosition
==============
*/

void __fastcall Bot_PredictPosition(const gentity_s *ent, const bot_data_t *botData, const vec3_t *startPos, vec3_t *vPos)
{
  ?Bot_PredictPosition@@YAXPEBUgentity_s@@PEBUbot_data_t@@AEBTvec3_t@@AEAT3@@Z(ent, botData, startPos, vPos);
}

/*
==============
Bot_GetScriptButtonType
==============
*/

int __fastcall Bot_GetScriptButtonType(const char *buttonName)
{
  return ?Bot_GetScriptButtonType@@YAHPEBD@Z(buttonName);
}

/*
==============
Bot_GetGroundEnt
==============
*/

__int16 __fastcall Bot_GetGroundEnt(const playerState_s *ps)
{
  return ?Bot_GetGroundEnt@@YAFPEBUplayerState_s@@@Z(ps);
}

/*
==============
Bot_PressButton
==============
*/

void __fastcall Bot_PressButton(bot_data_t *botData, bot_scr_buttons_t button, int msec)
{
  ?Bot_PressButton@@YAXPEAUbot_data_t@@W4bot_scr_buttons_t@@H@Z(botData, button, msec);
}

/*
==============
Bot_UpdateEnemyInSightLook
==============
*/

int __fastcall Bot_UpdateEnemyInSightLook(bot_data_t *botData, vec3_t *viewAnglesOut)
{
  return ?Bot_UpdateEnemyInSightLook@@YAHPEAUbot_data_t@@AEATvec3_t@@@Z(botData, viewAnglesOut);
}

/*
==============
Bot_UpdateSprinting
==============
*/

void __fastcall Bot_UpdateSprinting(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_UpdateSprinting@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_IsAtPathEnd
==============
*/

int __fastcall Bot_IsAtPathEnd(const bot_data_t *botData, float goalRadius)
{
  return ?Bot_IsAtPathEnd@@YAHPEBUbot_data_t@@M@Z(botData, goalRadius);
}

/*
==============
SV_BotSetAvoidanceRadius
==============
*/

void __fastcall SV_BotSetAvoidanceRadius(const gentity_s *ent, float radius)
{
  ?SV_BotSetAvoidanceRadius@@YAXPEBUgentity_s@@M@Z(ent, radius);
}

/*
==============
SV_BotGetAllocationSize
==============
*/

unsigned int __fastcall SV_BotGetAllocationSize()
{
  return ?SV_BotGetAllocationSize@@YAIXZ();
}

/*
==============
Bot_EntityOccupiesLocation
==============
*/

int __fastcall Bot_EntityOccupiesLocation(const gentity_s *ent, const vec3_t *origin, float distanceScalar)
{
  return ?Bot_EntityOccupiesLocation@@YAHPEBUgentity_s@@AEBTvec3_t@@M@Z(ent, origin, distanceScalar);
}

/*
==============
Bot_UpdateDistToEnemy
==============
*/

void __fastcall Bot_UpdateDistToEnemy(bot_data_t *botData)
{
  ?Bot_UpdateDistToEnemy@@YAXPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_EnemyIsAttackingMe
==============
*/

int __fastcall Bot_EnemyIsAttackingMe(const bot_data_t *botData, int timeLimit)
{
  return ?Bot_EnemyIsAttackingMe@@YAHPEBUbot_data_t@@H@Z(botData, timeLimit);
}

/*
==============
Bot_CombatStateGrenade
==============
*/

int __fastcall Bot_CombatStateGrenade(bot_data_t *botData, usercmd_s *cmd)
{
  return ?Bot_CombatStateGrenade@@YAHPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
SV_BotMissileFired
==============
*/

void __fastcall SV_BotMissileFired(const gentity_s *self, gentity_s *missile)
{
  ?SV_BotMissileFired@@YAXPEBUgentity_s@@PEAU1@@Z(self, missile);
}

/*
==============
Bot_CanSeeEnemy
==============
*/

int __fastcall Bot_CanSeeEnemy(const bot_data_t *botData)
{
  return ?Bot_CanSeeEnemy@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_StartProf
==============
*/

void Bot_StartProf(void)
{
  ?Bot_StartProf@@YAXXZ();
}

/*
==============
Bot_ForceClaimNode
==============
*/

void __fastcall Bot_ForceClaimNode(bot_info_t *botInfo, pathnode_t *node)
{
  ?Bot_ForceClaimNode@@YAXPEAUbot_info_t@@PEAUpathnode_t@@@Z(botInfo, node);
}

/*
==============
Bot_UpdateIdleLook
==============
*/

int __fastcall Bot_UpdateIdleLook(bot_data_t *botData, vec3_t *viewAnglesOut)
{
  return ?Bot_UpdateIdleLook@@YAHPEAUbot_data_t@@AEATvec3_t@@@Z(botData, viewAnglesOut);
}

/*
==============
Bot_PredictEnemyCampSpots
==============
*/

int __fastcall Bot_PredictEnemyCampSpots(bot_data_t *botData, int humanOnly, vec3_t *spots, int maxCount)
{
  return ?Bot_PredictEnemyCampSpots@@YAHPEAUbot_data_t@@HPEATvec3_t@@H@Z(botData, humanOnly, spots, maxCount);
}

/*
==============
Bot_TimeStampPath
==============
*/

void __fastcall Bot_TimeStampPath(bot_info_t *botInfo, int useTime)
{
  ?Bot_TimeStampPath@@YAXPEAUbot_info_t@@H@Z(botInfo, useTime);
}

/*
==============
Bot_DrawDebugNavmeshExposure
==============
*/

void Bot_DrawDebugNavmeshExposure(void)
{
  ?Bot_DrawDebugNavmeshExposure@@YAXXZ();
}

/*
==============
Bot_UpdatePathToEnemy
==============
*/

int __fastcall Bot_UpdatePathToEnemy(bot_data_t *botData)
{
  return ?Bot_UpdatePathToEnemy@@YAHPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_UpdateSentientHistory
==============
*/

void __fastcall Bot_UpdateSentientHistory(sentient_s *sentient)
{
  ?Bot_UpdateSentientHistory@@YAXPEAUsentient_s@@@Z(sentient);
}

/*
==============
Bot_Think
==============
*/

void __fastcall Bot_Think(SvClientMP *bot, usercmd_s *cmd)
{
  ?Bot_Think@@YAXPEAVSvClientMP@@PEAUusercmd_s@@@Z(bot, cmd);
}

/*
==============
SV_BotGetPerfectInfo
==============
*/

int __fastcall SV_BotGetPerfectInfo(const gentity_s *self, sentient_s *other, unsigned __int8 reason)
{
  return ?SV_BotGetPerfectInfo@@YAHPEBUgentity_s@@PEAUsentient_s@@E@Z(self, other, reason);
}

/*
==============
Bot_ShouldForgetEnemy
==============
*/

int __fastcall Bot_ShouldForgetEnemy(const bot_data_t *botData, const gentity_s *enemy)
{
  return ?Bot_ShouldForgetEnemy@@YAHPEBUbot_data_t@@PEBUgentity_s@@@Z(botData, enemy);
}

/*
==============
Bot_UpdateRiotShieldDesired
==============
*/

void __fastcall Bot_UpdateRiotShieldDesired(bot_data_t *botData)
{
  ?Bot_UpdateRiotShieldDesired@@YAXPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_UpdateViewAngles
==============
*/

void __fastcall Bot_UpdateViewAngles(bot_data_t *botData, vec3_t *viewAnglesOut)
{
  ?Bot_UpdateViewAngles@@YAXPEAUbot_data_t@@AEATvec3_t@@@Z(botData, viewAnglesOut);
}

/*
==============
Bot_GetScriptGoalTypeName
==============
*/

const char *__fastcall Bot_GetScriptGoalTypeName(const bot_data_t *botData)
{
  return ?Bot_GetScriptGoalTypeName@@YAPEBDPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_UpdateTraversalLook
==============
*/

int __fastcall Bot_UpdateTraversalLook(bot_data_t *botData, vec3_t *viewAnglesOut)
{
  return ?Bot_UpdateTraversalLook@@YAHPEAUbot_data_t@@AEATvec3_t@@@Z(botData, viewAnglesOut);
}

/*
==============
Bot_ShouldRushEnemy
==============
*/

int __fastcall Bot_ShouldRushEnemy(bot_data_t *botData)
{
  return ?Bot_ShouldRushEnemy@@YAHPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_ActiveGoalIsScriptGoal
==============
*/

int __fastcall Bot_ActiveGoalIsScriptGoal(const bot_data_t *botData)
{
  return ?Bot_ActiveGoalIsScriptGoal@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_CyclePathTurn
==============
*/

void __fastcall Bot_CyclePathTurn(int postThinkEntNum)
{
  ?Bot_CyclePathTurn@@YAXH@Z(postThinkEntNum);
}

/*
==============
SV_BotSwitchWeapon
==============
*/

int __fastcall SV_BotSwitchWeapon(gentity_s *self, const Weapon *weapon)
{
  return ?SV_BotSwitchWeapon@@YAHPEAUgentity_s@@AEBUWeapon@@@Z(self, weapon);
}

/*
==============
SV_BotGrenadePing
==============
*/

void __fastcall SV_BotGrenadePing(const gentity_s *self, gentity_s *originator, const vec3_t *vOrigin)
{
  ?SV_BotGrenadePing@@YAXPEBUgentity_s@@PEAU1@AEBTvec3_t@@@Z(self, originator, vOrigin);
}

/*
==============
Bot_GetDifficultySetting
==============
*/

double __fastcall Bot_GetDifficultySetting(bot_data_t *botData, const char *settingName, int *succeeded)
{
  double result; 

  *(float *)&result = ?Bot_GetDifficultySetting@@YAMPEAUbot_data_t@@PEBDPEAH@Z(botData, settingName, succeeded);
  return result;
}

/*
==============
Bot_SetAttacker
==============
*/

void __fastcall Bot_SetAttacker(bot_data_t *botData, gentity_s *attacker)
{
  ?Bot_SetAttacker@@YAXPEAUbot_data_t@@PEAUgentity_s@@@Z(botData, attacker);
}

/*
==============
Bot_DifficultyFromString
==============
*/

bot_difficulty_t __fastcall Bot_DifficultyFromString(const char *botDifficultyString)
{
  return ?Bot_DifficultyFromString@@YA?AW4bot_difficulty_t@@PEBD@Z(botDifficultyString);
}

/*
==============
Bot_UpdateDebugErrorLocations
==============
*/

void __fastcall Bot_UpdateDebugErrorLocations(bot_data_t *botData)
{
  ?Bot_UpdateDebugErrorLocations@@YAXPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_UpdatePathLookPredict
==============
*/

void __fastcall Bot_UpdatePathLookPredict(bot_data_t *botData)
{
  ?Bot_UpdatePathLookPredict@@YAXPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_UpdateLookAtPoint
==============
*/

int __fastcall Bot_UpdateLookAtPoint(bot_data_t *botData, int minPriority, vec3_t *viewAnglesOut)
{
  return ?Bot_UpdateLookAtPoint@@YAHPEAUbot_data_t@@HAEATvec3_t@@@Z(botData, minPriority, viewAnglesOut);
}

/*
==============
Bot_MakeBotData
==============
*/

void __fastcall Bot_MakeBotData(bot_data_t *botData)
{
  ?Bot_MakeBotData@@YAXPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_IsFireFromHipRange
==============
*/

int __fastcall Bot_IsFireFromHipRange(const bot_data_t *botData)
{
  return ?Bot_IsFireFromHipRange@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
SV_BotIsBotEntClient
==============
*/

int __fastcall SV_BotIsBotEntClient(const gentity_s *ent)
{
  return ?SV_BotIsBotEntClient@@YAHPEBUgentity_s@@@Z(ent);
}

/*
==============
Bot_ShouldDrawDebugForBot
==============
*/

int __fastcall Bot_ShouldDrawDebugForBot(const bot_data_t *botData)
{
  return ?Bot_ShouldDrawDebugForBot@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
SV_BotCheckAvoidSentient
==============
*/

void __fastcall SV_BotCheckAvoidSentient(int isAwareOfSentient, const sentient_s *botSentient, sentient_s *otherSentient)
{
  ?SV_BotCheckAvoidSentient@@YAXHPEBUsentient_s@@PEAU1@@Z(isAwareOfSentient, botSentient, otherSentient);
}

/*
==============
Bot_MemoryFlagAllNear
==============
*/

void __fastcall Bot_MemoryFlagAllNear(bot_data_t *botData, int timeNewest, int timeOldest, int typeFlags, int locationNumber, const vec3_t *location, float radius, int flags)
{
  ?Bot_MemoryFlagAllNear@@YAXPEAUbot_data_t@@HHHHAEBTvec3_t@@MH@Z(botData, timeNewest, timeOldest, typeFlags, locationNumber, location, radius, flags);
}

/*
==============
Bot_SetScriptFlag
==============
*/

void __fastcall Bot_SetScriptFlag(bot_data_t *botData, int flag, int value)
{
  ?Bot_SetScriptFlag@@YAXPEAUbot_data_t@@HH@Z(botData, flag, value);
}

/*
==============
Bot_CanSeePointViaNodes
==============
*/

int __fastcall Bot_CanSeePointViaNodes(const bot_data_t *botData, const vec3_t *point)
{
  return ?Bot_CanSeePointViaNodes@@YAHPEBUbot_data_t@@AEBTvec3_t@@@Z(botData, point);
}

/*
==============
Bot_UpdateAimDownSights
==============
*/

void __fastcall Bot_UpdateAimDownSights(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_UpdateAimDownSights@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_GetNextDebugGoal
==============
*/

int __fastcall Bot_GetNextDebugGoal(const bot_data_t *botData)
{
  return ?Bot_GetNextDebugGoal@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
SV_BotGetAdjustedEnemyDistForThreat
==============
*/

double __fastcall SV_BotGetAdjustedEnemyDistForThreat(const sentient_s *botSentient, sentient_s *enemy, float enemyDist)
{
  double result; 

  *(float *)&result = ?SV_BotGetAdjustedEnemyDistForThreat@@YAMPEBUsentient_s@@PEAU1@M@Z(botSentient, enemy, enemyDist);
  return result;
}

/*
==============
Bot_IsForcedFiring
==============
*/

int __fastcall Bot_IsForcedFiring(const bot_data_t *botData)
{
  return ?Bot_IsForcedFiring@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_GetZoneCountType
==============
*/

int __fastcall Bot_GetZoneCountType(const char *string)
{
  return ?Bot_GetZoneCountType@@YAHPEBD@Z(string);
}

/*
==============
Bot_GetClientData
==============
*/

bot_data_t *__fastcall Bot_GetClientData(SvClientMP *bot)
{
  return ?Bot_GetClientData@@YAPEAUbot_data_t@@PEAVSvClientMP@@@Z(bot);
}

/*
==============
Bot_GetPathToGoalInternal
==============
*/

int __fastcall Bot_GetPathToGoalInternal(bot_data_t *botData, const vec3_t *goal, float goalRadius, const char *debugReason)
{
  return ?Bot_GetPathToGoalInternal@@YAHPEAUbot_data_t@@AEBTvec3_t@@MPEBD@Z(botData, goal, goalRadius, debugReason);
}

/*
==============
Bot_AtScriptGoalNode
==============
*/

int __fastcall Bot_AtScriptGoalNode(const bot_data_t *botData)
{
  return ?Bot_AtScriptGoalNode@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_UpdateThreat
==============
*/

void __fastcall Bot_UpdateThreat(bot_data_t *botData)
{
  ?Bot_UpdateThreat@@YAXPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_DrawDebugNavmesh
==============
*/

void Bot_DrawDebugNavmesh(void)
{
  ?Bot_DrawDebugNavmesh@@YAXXZ();
}

/*
==============
Bot_RegisterEvents
==============
*/

void __fastcall Bot_RegisterEvents(const bot_data_t *botData)
{
  ?Bot_RegisterEvents@@YAXPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_ZoneNearestCount
==============
*/

int __fastcall Bot_ZoneNearestCount(int zone, int nodeTeam, int steps, const bot_zone_count_cmp_t *compares, int numCompares)
{
  return ?Bot_ZoneNearestCount@@YAHHHHPEBUbot_zone_count_cmp_t@@H@Z(zone, nodeTeam, steps, compares, numCompares);
}

/*
==============
Bot_ShouldADS
==============
*/

int __fastcall Bot_ShouldADS(bot_data_t *botData, const playerState_s *ps)
{
  return ?Bot_ShouldADS@@YAHPEAUbot_data_t@@PEBUplayerState_s@@@Z(botData, ps);
}

/*
==============
Bot_GetStopGoalStance
==============
*/

ai_stance_e __fastcall Bot_GetStopGoalStance(const pathnode_t *node)
{
  return ?Bot_GetStopGoalStance@@YA?AW4ai_stance_e@@PEBUpathnode_t@@@Z(node);
}

/*
==============
SV_BotInitRound
==============
*/

void SV_BotInitRound(void)
{
  ?SV_BotInitRound@@YAXXZ();
}

/*
==============
Bot_UpdateAimDownSightsDesire
==============
*/

void __fastcall Bot_UpdateAimDownSightsDesire(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_UpdateAimDownSightsDesire@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_MemoryUpdateEntityEvent
==============
*/

void __fastcall Bot_MemoryUpdateEntityEvent(bot_data_t *botData, bot_mem_type_t type, __int16 entNum, int locationNum, int newestTime, int oldestTime)
{
  ?Bot_MemoryUpdateEntityEvent@@YAXPEAUbot_data_t@@W4bot_mem_type_t@@FHHH@Z(botData, type, entNum, locationNum, newestTime, oldestTime);
}

/*
==============
Bot_AnimscriptToLinkMask
==============
*/

unsigned int __fastcall Bot_AnimscriptToLinkMask(const char *animscript)
{
  return ?Bot_AnimscriptToLinkMask@@YAIPEBD@Z(animscript);
}

/*
==============
SV_BotPerfectInfoIgnored
==============
*/

void __fastcall SV_BotPerfectInfoIgnored(const ai_common_t *self, sentient_s *other, unsigned __int8 reason)
{
  ?SV_BotPerfectInfoIgnored@@YAXPEBUai_common_t@@PEAUsentient_s@@E@Z(self, other, reason);
}

/*
==============
Bot_CanSeeAndCanFireOnEnemy
==============
*/

int __fastcall Bot_CanSeeAndCanFireOnEnemy(const bot_data_t *botData)
{
  return ?Bot_CanSeeAndCanFireOnEnemy@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_EnemyFacesBot
==============
*/

int __fastcall Bot_EnemyFacesBot(const bot_data_t *botData)
{
  return ?Bot_EnemyFacesBot@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_GetDifficultyName
==============
*/

const char *__fastcall Bot_GetDifficultyName(bot_difficulty_t difficulty)
{
  return ?Bot_GetDifficultyName@@YAPEBDW4bot_difficulty_t@@@Z(difficulty);
}

/*
==============
Bot_PredictSeePointUsingTacPoint
==============
*/

bool __fastcall Bot_PredictSeePointUsingTacPoint(const bot_info_t *botInfo, const vec3_t *point, const tacpoint_t *nearestTPointToPoint, vec3_t *predictedPointOut)
{
  return ?Bot_PredictSeePointUsingTacPoint@@YA_NPEBUbot_info_t@@AEBTvec3_t@@PEBUtacpoint_t@@PEAT2@@Z(botInfo, point, nearestTPointToPoint, predictedPointOut);
}

/*
==============
Bot_UpdateFireFromHipRange
==============
*/

void __fastcall Bot_UpdateFireFromHipRange(bot_data_t *botData)
{
  ?Bot_UpdateFireFromHipRange@@YAXPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_ShouldThrowGrenade
==============
*/

int __fastcall Bot_ShouldThrowGrenade(bot_data_t *botData)
{
  return ?Bot_ShouldThrowGrenade@@YAHPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_InitNavigator
==============
*/

void __fastcall Bot_InitNavigator(bot_info_t *botInfo)
{
  ?Bot_InitNavigator@@YAXPEAUbot_info_t@@@Z(botInfo);
}

/*
==============
Bot_CanAttack
==============
*/

int __fastcall Bot_CanAttack(const bot_data_t *botData)
{
  return ?Bot_CanAttack@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_GetPersonalityName
==============
*/

const char *__fastcall Bot_GetPersonalityName(const bot_data_t *botData)
{
  return ?Bot_GetPersonalityName@@YAPEBDPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_UpdateSight
==============
*/

void __fastcall Bot_UpdateSight(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_UpdateSight@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_CheckPathRecalculate
==============
*/

int __fastcall Bot_CheckPathRecalculate(bot_data_t *botData)
{
  return ?Bot_CheckPathRecalculate@@YAHPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_UpdateDirection
==============
*/

void __fastcall Bot_UpdateDirection(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_UpdateDirection@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
SV_BotInit
==============
*/

void __fastcall SV_BotInit(SvClientMP *bot, int firstConnect)
{
  ?SV_BotInit@@YAXPEAVSvClientMP@@H@Z(bot, firstConnect);
}

/*
==============
Bot_GetMaxFovDot
==============
*/

double __fastcall Bot_GetMaxFovDot(const bot_data_t *botData)
{
  double result; 

  *(float *)&result = ?Bot_GetMaxFovDot@@YAMPEBUbot_data_t@@@Z(botData);
  return result;
}

/*
==============
Bot_EntityFacesBot
==============
*/

int __fastcall Bot_EntityFacesBot(const bot_data_t *botData, const gentity_s *ent)
{
  return ?Bot_EntityFacesBot@@YAHPEBUbot_data_t@@PEBUgentity_s@@@Z(botData, ent);
}

/*
==============
Bot_ClearEnemy
==============
*/

void __fastcall Bot_ClearEnemy(bot_data_t *botData)
{
  ?Bot_ClearEnemy@@YAXPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_FinalizeCmdTime
==============
*/

void __fastcall Bot_FinalizeCmdTime(usercmd_s *cmd)
{
  ?Bot_FinalizeCmdTime@@YAXPEAUusercmd_s@@@Z(cmd);
}

/*
==============
Bot_AtScriptGoalYaw
==============
*/

int __fastcall Bot_AtScriptGoalYaw(const bot_data_t *botData)
{
  return ?Bot_AtScriptGoalYaw@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
SV_BotHandleGunshotTeammate
==============
*/

void __fastcall SV_BotHandleGunshotTeammate(const gentity_s *self, gentity_s *originator, const vec3_t *vBulletEndOrigin)
{
  ?SV_BotHandleGunshotTeammate@@YAXPEBUgentity_s@@PEAU1@AEBTvec3_t@@@Z(self, originator, vBulletEndOrigin);
}

/*
==============
Bot_GetScriptGoalType
==============
*/

bot_scr_goal_t __fastcall Bot_GetScriptGoalType(const bot_data_t *botData)
{
  return ?Bot_GetScriptGoalType@@YA?AW4bot_scr_goal_t@@PEBUbot_data_t@@@Z(botData);
}

/*
==============
SV_BotRequirePathnodes
==============
*/

bool __fastcall SV_BotRequirePathnodes(const bot_data_t *botData)
{
  return ?SV_BotRequirePathnodes@@YA_NPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_UpdatePitch
==============
*/

double __fastcall Bot_UpdatePitch(bot_data_t *botData, float currentPitch, float targetPitch, int forceSlow)
{
  double result; 

  *(float *)&result = ?Bot_UpdatePitch@@YAMPEAUbot_data_t@@MMH@Z(botData, currentPitch, targetPitch, forceSlow);
  return result;
}

/*
==============
SV_Bot_GetNavigator
==============
*/

AINavigator *__fastcall SV_Bot_GetNavigator(const gentity_s *pEnt)
{
  return ?SV_Bot_GetNavigator@@YAPEAVAINavigator@@PEBUgentity_s@@@Z(pEnt);
}

/*
==============
SV_BotRegisterEntAffecter
==============
*/

int __fastcall SV_BotRegisterEntAffecter(const gentity_s *ent)
{
  return ?SV_BotRegisterEntAffecter@@YAHPEBUgentity_s@@@Z(ent);
}

/*
==============
Bot_EntityUsingRiotShield
==============
*/

int __fastcall Bot_EntityUsingRiotShield(const gentity_s *ent, int onlyPermanentShields)
{
  return ?Bot_EntityUsingRiotShield@@YAHPEBUgentity_s@@H@Z(ent, onlyPermanentShields);
}

/*
==============
SV_BotCanUseTraversalLink
==============
*/

bool __fastcall SV_BotCanUseTraversalLink(const pathnode_t *startNode, const pathnode_t *endNode, const gentity_s *ent)
{
  return ?SV_BotCanUseTraversalLink@@YA_NPEBUpathnode_t@@0PEBUgentity_s@@@Z(startNode, endNode, ent);
}

/*
==============
Bot_UpdateCombat
==============
*/

void __fastcall Bot_UpdateCombat(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_UpdateCombat@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_BadPath
==============
*/

void __fastcall Bot_BadPath(gentity_s *ent)
{
  ?Bot_BadPath@@YAXPEAUgentity_s@@@Z(ent);
}

/*
==============
SV_BotStoreSentientThreat
==============
*/

void __fastcall SV_BotStoreSentientThreat(const sentient_s *botSentient, const sentient_s *otherSentient, int threat)
{
  ?SV_BotStoreSentientThreat@@YAXPEBUsentient_s@@0H@Z(botSentient, otherSentient, threat);
}

/*
==============
Bot_GetPathingStyle
==============
*/

bot_path_style_t __fastcall Bot_GetPathingStyle(const bot_data_t *botData, const vec3_t *newGoal)
{
  return ?Bot_GetPathingStyle@@YA?AW4bot_path_style_t@@PEBUbot_data_t@@PEBTvec3_t@@@Z(botData, newGoal);
}

/*
==============
Bot_GetMaxFov
==============
*/

double __fastcall Bot_GetMaxFov(const bot_data_t *botData)
{
  double result; 

  *(float *)&result = ?Bot_GetMaxFov@@YAMPEBUbot_data_t@@@Z(botData);
  return result;
}

/*
==============
Bot_Badplace_Update
==============
*/

int __fastcall Bot_Badplace_Update(bot_data_t *botData)
{
  return ?Bot_Badplace_Update@@YAHPEAUbot_data_t@@@Z(botData);
}

/*
==============
SV_BotSupportsCommand
==============
*/

int __fastcall SV_BotSupportsCommand(const char *commandString)
{
  return ?SV_BotSupportsCommand@@YAHPEBD@Z(commandString);
}

/*
==============
Bot_IsCharacterActive
==============
*/

int __fastcall Bot_IsCharacterActive(const gentity_s *ent)
{
  return ?Bot_IsCharacterActive@@YAHPEBUgentity_s@@@Z(ent);
}

/*
==============
Bot_GetGoalType
==============
*/

bot_scr_goal_t __fastcall Bot_GetGoalType(const char *goalTypeName)
{
  return ?Bot_GetGoalType@@YA?AW4bot_scr_goal_t@@PEBD@Z(goalTypeName);
}

/*
==============
Bot_UpdateCLFinishMoveButtons
==============
*/

void __fastcall Bot_UpdateCLFinishMoveButtons(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_UpdateCLFinishMoveButtons@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_CombatStateFireWait
==============
*/

int __fastcall Bot_CombatStateFireWait(bot_data_t *botData, const playerState_s *ps, const vec3_t *overrideAimPoint)
{
  return ?Bot_CombatStateFireWait@@YAHPEAUbot_data_t@@PEBUplayerState_s@@PEBTvec3_t@@@Z(botData, ps, overrideAimPoint);
}

/*
==============
Bot_GrenadeReleaseTime
==============
*/

int __fastcall Bot_GrenadeReleaseTime(bot_data_t *botData)
{
  return ?Bot_GrenadeReleaseTime@@YAHPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_GetRemoteEyesVehicleDef
==============
*/

const VehicleDef *__fastcall Bot_GetRemoteEyesVehicleDef(const bot_data_t *botData)
{
  return ?Bot_GetRemoteEyesVehicleDef@@YAPEBUVehicleDef@@PEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_IsJumping
==============
*/

int __fastcall Bot_IsJumping(const bot_data_t *botData)
{
  return ?Bot_IsJumping@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_UnregisterEvents
==============
*/

void __fastcall Bot_UnregisterEvents(const bot_data_t *botData)
{
  ?Bot_UnregisterEvents@@YAXPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_AdjustEnemyAimPoint
==============
*/

void __fastcall Bot_AdjustEnemyAimPoint(const bot_data_t *botData, const gentity_s *ent, vec3_t *aimPoint)
{
  ?Bot_AdjustEnemyAimPoint@@YAXPEBUbot_data_t@@PEBUgentity_s@@AEATvec3_t@@@Z(botData, ent, aimPoint);
}

/*
==============
Bot_EntityOnScreenForMelee
==============
*/

int __fastcall Bot_EntityOnScreenForMelee(bot_data_t *botData, const gentity_s *ent)
{
  return ?Bot_EntityOnScreenForMelee@@YAHPEAUbot_data_t@@PEBUgentity_s@@@Z(botData, ent);
}

/*
==============
Bot_IsFacingEnemy
==============
*/

int __fastcall Bot_IsFacingEnemy(bot_data_t *botData)
{
  return ?Bot_IsFacingEnemy@@YAHPEAUbot_data_t@@@Z(botData);
}

/*
==============
SV_BotEntityStartedLastStand
==============
*/

void __fastcall SV_BotEntityStartedLastStand(const gentity_s *victimEnt)
{
  ?SV_BotEntityStartedLastStand@@YAXPEBUgentity_s@@@Z(victimEnt);
}

/*
==============
Bot_GetMemFlag
==============
*/

int __fastcall Bot_GetMemFlag(const char *strFlag)
{
  return ?Bot_GetMemFlag@@YAHPEBD@Z(strFlag);
}

/*
==============
SV_BotKilled
==============
*/

void __fastcall SV_BotKilled(SvClientMP *bot)
{
  ?SV_BotKilled@@YAXPEAVSvClientMP@@@Z(bot);
}

/*
==============
Bot_GetLastKnownEntFacingDir
==============
*/

int __fastcall Bot_GetLastKnownEntFacingDir(const bot_data_t *botData, const gentity_s *entity, vec3_t *facingDir)
{
  return ?Bot_GetLastKnownEntFacingDir@@YAHPEBUbot_data_t@@PEBUgentity_s@@AEATvec3_t@@@Z(botData, entity, facingDir);
}

/*
==============
Bot_PredictSeeNode
==============
*/

bool __fastcall Bot_PredictSeeNode(const bot_info_t *botInfo, const pathnode_t *node, vec3_t *predictedOriginOut)
{
  return ?Bot_PredictSeeNode@@YA_NPEBUbot_info_t@@PEBUpathnode_t@@PEATvec3_t@@@Z(botInfo, node, predictedOriginOut);
}

/*
==============
Bot_IsSliding
==============
*/

int __fastcall Bot_IsSliding(const bot_data_t *botData)
{
  return ?Bot_IsSliding@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_UpdateAerialLockOnPath
==============
*/

int __fastcall Bot_UpdateAerialLockOnPath(bot_data_t *botData)
{
  return ?Bot_UpdateAerialLockOnPath@@YAHPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_DrawDebugErrorLocations
==============
*/

void __fastcall Bot_DrawDebugErrorLocations(const bot_data_t *botData)
{
  ?Bot_DrawDebugErrorLocations@@YAXPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_GetPathingStyleFromString
==============
*/

bot_path_style_t __fastcall Bot_GetPathingStyleFromString(const char *string)
{
  return ?Bot_GetPathingStyleFromString@@YA?AW4bot_path_style_t@@PEBD@Z(string);
}

/*
==============
Bot_ClearButton
==============
*/

void __fastcall Bot_ClearButton(bot_data_t *botData, bot_scr_buttons_t button)
{
  ?Bot_ClearButton@@YAXPEAUbot_data_t@@W4bot_scr_buttons_t@@@Z(botData, button);
}

/*
==============
Bot_ZoneSetTeam
==============
*/

void __fastcall Bot_ZoneSetTeam(int zone, team_t team)
{
  ?Bot_ZoneSetTeam@@YAXHW4team_t@@@Z(zone, team);
}

/*
==============
SV_BotPathsInit
==============
*/

void SV_BotPathsInit(void)
{
  ?SV_BotPathsInit@@YAXXZ();
}

/*
==============
Bot_UpdateStuckCheck
==============
*/

void __fastcall Bot_UpdateStuckCheck(bot_data_t *botData)
{
  ?Bot_UpdateStuckCheck@@YAXPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_MemoryGetMostRecentEvent
==============
*/

bot_mem_event_t *__fastcall Bot_MemoryGetMostRecentEvent(bot_data_t *botData, int typeFlags, int flagsRequire, int flagsExclude)
{
  return ?Bot_MemoryGetMostRecentEvent@@YAPEAUbot_mem_event_t@@PEAUbot_data_t@@HHH@Z(botData, typeFlags, flagsRequire, flagsExclude);
}

/*
==============
Bot_SetScriptEnemy
==============
*/

void __fastcall Bot_SetScriptEnemy(bot_data_t *botData, gentity_s *enemy)
{
  ?Bot_SetScriptEnemy@@YAXPEAUbot_data_t@@PEAUgentity_s@@@Z(botData, enemy);
}

/*
==============
Bot_UpdateStrafe
==============
*/

void __fastcall Bot_UpdateStrafe(bot_data_t *botData)
{
  ?Bot_UpdateStrafe@@YAXPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_GetLookAheadDist
==============
*/

double __fastcall Bot_GetLookAheadDist(const bot_info_t *botInfo)
{
  double result; 

  *(float *)&result = ?Bot_GetLookAheadDist@@YAMPEBUbot_info_t@@@Z(botInfo);
  return result;
}

/*
==============
Bot_SetScriptMove
==============
*/

void __fastcall Bot_SetScriptMove(bot_data_t *botData, const float yaw, int duration, float speed, int moveRemoteControl, int moveStickSwap)
{
  ?Bot_SetScriptMove@@YAXPEAUbot_data_t@@MHMHH@Z(botData, yaw, duration, speed, moveRemoteControl, moveStickSwap);
}

/*
==============
Bot_CanSeeSentient
==============
*/

int __fastcall Bot_CanSeeSentient(const bot_data_t *botData, const sentient_s *otherSent)
{
  return ?Bot_CanSeeSentient@@YAHPEBUbot_data_t@@PEBUsentient_s@@@Z(botData, otherSent);
}

/*
==============
Bot_SetScriptGoal
==============
*/

int __fastcall Bot_SetScriptGoal(bot_data_t *botData, const vec3_t *goal, float goalRadius, bot_scr_goal_t goalType, float *goalYaw, float objectiveRadius, int shortTermGoal)
{
  return ?Bot_SetScriptGoal@@YAHPEAUbot_data_t@@AEBTvec3_t@@MW4bot_scr_goal_t@@PEAMMH@Z(botData, goal, goalRadius, goalType, goalYaw, objectiveRadius, shortTermGoal);
}

/*
==============
Bot_ZoneSetCount
==============
*/

void __fastcall Bot_ZoneSetCount(int zone, int nodeTeam, bot_zone_count_t type, int count)
{
  ?Bot_ZoneSetCount@@YAXHHW4bot_zone_count_t@@H@Z(zone, nodeTeam, type, count);
}

/*
==============
Bot_CreateZoneObstacle
==============
*/

void __fastcall Bot_CreateZoneObstacle(int zoneNum, team_t team, float obsPenalty)
{
  ?Bot_CreateZoneObstacle@@YAXHW4team_t@@M@Z(zoneNum, team, obsPenalty);
}

/*
==============
Bot_ClearScriptEnemy
==============
*/

void __fastcall Bot_ClearScriptEnemy(bot_data_t *botData)
{
  ?Bot_ClearScriptEnemy@@YAXPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_GetZoneCountCompareType
==============
*/

int __fastcall Bot_GetZoneCountCompareType(const char *string)
{
  return ?Bot_GetZoneCountCompareType@@YAHPEBD@Z(string);
}

/*
==============
Bot_CombatStateBlinded
==============
*/

int __fastcall Bot_CombatStateBlinded(bot_data_t *botData, usercmd_s *cmd)
{
  return ?Bot_CombatStateBlinded@@YAHPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_IsSentientPotentialCamper
==============
*/

int __fastcall Bot_IsSentientPotentialCamper(const sentient_s *sentient)
{
  return ?Bot_IsSentientPotentialCamper@@YAHPEBUsentient_s@@@Z(sentient);
}

/*
==============
SV_BotClearActiveBotCount
==============
*/

void SV_BotClearActiveBotCount(void)
{
  ?SV_BotClearActiveBotCount@@YAXXZ();
}

/*
==============
Bot_GetLastKnownEntNearestNode
==============
*/

pathnode_t *__fastcall Bot_GetLastKnownEntNearestNode(const bot_data_t *botData, const gentity_s *entity)
{
  return ?Bot_GetLastKnownEntNearestNode@@YAPEAUpathnode_t@@PEBUbot_data_t@@PEBUgentity_s@@@Z(botData, entity);
}

/*
==============
SV_BotSetFireRecoil
==============
*/

void __fastcall SV_BotSetFireRecoil(const int clientNum, const vec3_t *kickAVel)
{
  ?SV_BotSetFireRecoil@@YAXHAEBTvec3_t@@@Z(clientNum, kickAVel);
}

/*
==============
Bot_IsUseButtonPressed
==============
*/

bool __fastcall Bot_IsUseButtonPressed(const bot_data_t *botData)
{
  return ?Bot_IsUseButtonPressed@@YA_NPEBUbot_data_t@@@Z(botData);
}

/*
==============
SV_BotEntInCurrentFOV
==============
*/

int __fastcall SV_BotEntInCurrentFOV(ai_common_t *self, const gentity_s *ent)
{
  return ?SV_BotEntInCurrentFOV@@YAHPEAUai_common_t@@PEBUgentity_s@@@Z(self, ent);
}

/*
==============
SV_BotKnownEnemiesRadial
==============
*/

void __fastcall SV_BotKnownEnemiesRadial(const gentity_s *self, const vec3_t *vOrigin, float radius, unsigned __int8 knownType)
{
  ?SV_BotKnownEnemiesRadial@@YAXPEBUgentity_s@@AEBTvec3_t@@ME@Z(self, vOrigin, radius, knownType);
}

/*
==============
Bot_GetScriptedGrenadeType
==============
*/

int __fastcall Bot_GetScriptedGrenadeType(const char *scriptGrenadeTypeName)
{
  return ?Bot_GetScriptedGrenadeType@@YAHPEBD@Z(scriptGrenadeTypeName);
}

/*
==============
Bot_UpdateEnemySearchLook
==============
*/

int __fastcall Bot_UpdateEnemySearchLook(bot_data_t *botData, vec3_t *viewAnglesOut)
{
  return ?Bot_UpdateEnemySearchLook@@YAHPEAUbot_data_t@@AEATvec3_t@@@Z(botData, viewAnglesOut);
}

/*
==============
Bot_GetCharacterIndex
==============
*/

int __fastcall Bot_GetCharacterIndex(const bot_data_t *botData)
{
  return ?Bot_GetCharacterIndex@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
SV_BadPlaceExistsToBot
==============
*/

int __fastcall SV_BadPlaceExistsToBot(const ai_common_t *self, unsigned __int8 badPlaceType)
{
  return ?SV_BadPlaceExistsToBot@@YAHPEBUai_common_t@@E@Z(self, badPlaceType);
}

/*
==============
Bot_LocationIsScriptGoal
==============
*/

int __fastcall Bot_LocationIsScriptGoal(const bot_data_t *botData, const vec3_t *location)
{
  return ?Bot_LocationIsScriptGoal@@YAHPEBUbot_data_t@@AEBTvec3_t@@@Z(botData, location);
}

/*
==============
SV_BotAllowedToSeeEnt
==============
*/

int __fastcall SV_BotAllowedToSeeEnt(ai_common_t *self, const gentity_s *ent)
{
  return ?SV_BotAllowedToSeeEnt@@YAHPEAUai_common_t@@PEBUgentity_s@@@Z(self, ent);
}

/*
==============
Bot_NavPathExists
==============
*/

int __fastcall Bot_NavPathExists(const bot_info_t *botInfo)
{
  return ?Bot_NavPathExists@@YAHPEBUbot_info_t@@@Z(botInfo);
}

/*
==============
Bot_CanReactEnemy
==============
*/

int __fastcall Bot_CanReactEnemy(const bot_data_t *botData)
{
  return ?Bot_CanReactEnemy@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_UpdateXRayVision
==============
*/

void __fastcall Bot_UpdateXRayVision(bot_data_t *botData)
{
  ?Bot_UpdateXRayVision@@YAXPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_MemoryFindEvent
==============
*/

int __fastcall Bot_MemoryFindEvent(bot_data_t *botData, bot_mem_type_t type, __int16 entNum, const vec3_t *location1, int newestTime, int oldestTime)
{
  return ?Bot_MemoryFindEvent@@YAHPEAUbot_data_t@@W4bot_mem_type_t@@FPEBTvec3_t@@HH@Z(botData, type, entNum, location1, newestTime, oldestTime);
}

/*
==============
Bot_UpdateReload
==============
*/

void __fastcall Bot_UpdateReload(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_UpdateReload@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
SV_BotClearBotSentientInfo
==============
*/

void __fastcall SV_BotClearBotSentientInfo(sentient_s *botSentient, sentient_s *otherSentient)
{
  ?SV_BotClearBotSentientInfo@@YAXPEAUsentient_s@@0@Z(botSentient, otherSentient);
}

/*
==============
SV_BotInitDataSafety
==============
*/

void __fastcall SV_BotInitDataSafety(SvClientMP *bot)
{
  ?SV_BotInitDataSafety@@YAXPEAVSvClientMP@@@Z(bot);
}

/*
==============
Bot_ClearScriptedGrenade
==============
*/

void __fastcall Bot_ClearScriptedGrenade(bot_info_t *botInfo)
{
  ?Bot_ClearScriptedGrenade@@YAXPEAUbot_info_t@@@Z(botInfo);
}

/*
==============
Bot_CombatStateFire
==============
*/

int __fastcall Bot_CombatStateFire(bot_data_t *botData, const playerState_s *ps, usercmd_s *cmd)
{
  return ?Bot_CombatStateFire@@YAHPEAUbot_data_t@@PEBUplayerState_s@@PEAUusercmd_s@@@Z(botData, ps, cmd);
}

/*
==============
Bot_SetDifficultySetting
==============
*/

int __fastcall Bot_SetDifficultySetting(bot_data_t *botData, const char *settingName, const char *settingValue)
{
  return ?Bot_SetDifficultySetting@@YAHPEAUbot_data_t@@PEBD1@Z(botData, settingName, settingValue);
}

/*
==============
Bot_UpdateSearchLook
==============
*/

int __fastcall Bot_UpdateSearchLook(bot_data_t *botData)
{
  return ?Bot_UpdateSearchLook@@YAHPEAUbot_data_t@@@Z(botData);
}

/*
==============
SV_BotShutdownBotAI
==============
*/

void SV_BotShutdownBotAI(void)
{
  ?SV_BotShutdownBotAI@@YAXXZ();
}

/*
==============
Bot_PathGetNegotiationStartNode
==============
*/

pathnode_t *__fastcall Bot_PathGetNegotiationStartNode(const bot_info_t *botInfo)
{
  return ?Bot_PathGetNegotiationStartNode@@YAPEAUpathnode_t@@PEBUbot_info_t@@@Z(botInfo);
}

/*
==============
SV_BotTeamLimit
==============
*/

unsigned __int8 __fastcall SV_BotTeamLimit(int relativeTeam)
{
  return ?SV_BotTeamLimit@@YAEH@Z(relativeTeam);
}

/*
==============
Bot_CanSeeSentientQuick
==============
*/

int __fastcall Bot_CanSeeSentientQuick(const bot_data_t *botData, sentient_s *otherSent)
{
  return ?Bot_CanSeeSentientQuick@@YAHPEBUbot_data_t@@PEAUsentient_s@@@Z(botData, otherSent);
}

/*
==============
Bot_GetActiveGoal
==============
*/

void __fastcall Bot_GetActiveGoal(const bot_data_t *botData, vec3_t *goal)
{
  ?Bot_GetActiveGoal@@YAXPEBUbot_data_t@@AEATvec3_t@@@Z(botData, goal);
}

/*
==============
Bot_GetScriptGoal
==============
*/

void __fastcall Bot_GetScriptGoal(const bot_data_t *botData, vec3_t *goal)
{
  ?Bot_GetScriptGoal@@YAXPEBUbot_data_t@@AEATvec3_t@@@Z(botData, goal);
}

/*
==============
Bot_IsUnreachableHighAerialSentient
==============
*/

int __fastcall Bot_IsUnreachableHighAerialSentient(sentient_s *sentient)
{
  return ?Bot_IsUnreachableHighAerialSentient@@YAHPEAUsentient_s@@@Z(sentient);
}

/*
==============
SV_BotReevaluatePath
==============
*/

void __fastcall SV_BotReevaluatePath(const gentity_s *ent)
{
  ?SV_BotReevaluatePath@@YAXPEBUgentity_s@@@Z(ent);
}

/*
==============
SV_BotFovDotZ
==============
*/

double __fastcall SV_BotFovDotZ(const ai_common_t *self, const gentity_s *otherEnt)
{
  double result; 

  *(float *)&result = ?SV_BotFovDotZ@@YAMPEBUai_common_t@@PEBUgentity_s@@@Z(self, otherEnt);
  return result;
}

/*
==============
Bot_GetTargetedLookAt
==============
*/

int __fastcall Bot_GetTargetedLookAt(bot_data_t *botData, vec3_t *lookAtPosOut)
{
  return ?Bot_GetTargetedLookAt@@YAHPEAUbot_data_t@@AEATvec3_t@@@Z(botData, lookAtPosOut);
}

/*
==============
SV_BotUpdateCommon
==============
*/

void SV_BotUpdateCommon(void)
{
  ?SV_BotUpdateCommon@@YAXXZ();
}

/*
==============
Bot_IsCamping
==============
*/

int __fastcall Bot_IsCamping(const bot_data_t *botData)
{
  return ?Bot_IsCamping@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
SV_BotDebugString
==============
*/

void __fastcall SV_BotDebugString(bot_data_t *botData, const vec3_t *xyz, const vec4_t *color, float scale, const char *pszText, int duration)
{
  ?SV_BotDebugString@@YAXPEAUbot_data_t@@AEBTvec3_t@@AEBTvec4_t@@MPEBDH@Z(botData, xyz, color, scale, pszText, duration);
}

/*
==============
Bot_FreeNavigator
==============
*/

void __fastcall Bot_FreeNavigator(bot_info_t *botInfo)
{
  ?Bot_FreeNavigator@@YAXPEAUbot_info_t@@@Z(botInfo);
}

/*
==============
Bot_GetLookType
==============
*/

int __fastcall Bot_GetLookType(const char *strName)
{
  return ?Bot_GetLookType@@YAHPEBD@Z(strName);
}

/*
==============
SV_BotFovDot
==============
*/

double __fastcall SV_BotFovDot(const ai_common_t *self, const gentity_s *otherEnt)
{
  double result; 

  *(float *)&result = ?SV_BotFovDot@@YAMPEBUai_common_t@@PEBUgentity_s@@@Z(self, otherEnt);
  return result;
}

/*
==============
Bot_UpdateJumpTraversal
==============
*/

void __fastcall Bot_UpdateJumpTraversal(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_UpdateJumpTraversal@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
SV_BotFreeSystemMemory
==============
*/

void SV_BotFreeSystemMemory(void)
{
  ?SV_BotFreeSystemMemory@@YAXXZ();
}

/*
==============
Bot_GetBotPersonalityFromMenu
==============
*/

bot_personality_t __fastcall Bot_GetBotPersonalityFromMenu(const bot_data_t *botData)
{
  return ?Bot_GetBotPersonalityFromMenu@@YA?AW4bot_personality_t@@PEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_PathStuckRecover
==============
*/

int __fastcall Bot_PathStuckRecover(bot_data_t *botData)
{
  return ?Bot_PathStuckRecover@@YAHPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_GetPersonality
==============
*/

bot_personality_t __fastcall Bot_GetPersonality(const bot_data_t *botData)
{
  return ?Bot_GetPersonality@@YA?AW4bot_personality_t@@PEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_StrafeOnPath
==============
*/

void __fastcall Bot_StrafeOnPath(bot_data_t *botData, usercmd_s *cmd, int speed)
{
  ?Bot_StrafeOnPath@@YAXPEAUbot_data_t@@PEAUusercmd_s@@H@Z(botData, cmd, speed);
}

/*
==============
SV_BotRecalculatePath
==============
*/

void __fastcall SV_BotRecalculatePath(gentity_s *ent)
{
  ?SV_BotRecalculatePath@@YAXPEAUgentity_s@@@Z(ent);
}

/*
==============
Bot_ZonePathAdd
==============
*/

void __fastcall Bot_ZonePathAdd(const bot_info_t *botInfo, int addCount)
{
  ?Bot_ZonePathAdd@@YAXPEBUbot_info_t@@H@Z(botInfo, addCount);
}

/*
==============
Bot_GetEntityData
==============
*/

bot_data_t *__fastcall Bot_GetEntityData(const gentity_s *entity)
{
  return ?Bot_GetEntityData@@YAPEAUbot_data_t@@PEBUgentity_s@@@Z(entity);
}

/*
==============
Bot_PredictSeePointUsingNode
==============
*/

bool __fastcall Bot_PredictSeePointUsingNode(const bot_info_t *botInfo, const vec3_t *point, const pathnode_t *nearestNodeToPoint, vec3_t *predictedPointOut)
{
  return ?Bot_PredictSeePointUsingNode@@YA_NPEBUbot_info_t@@AEBTvec3_t@@PEBUpathnode_t@@PEAT2@@Z(botInfo, point, nearestNodeToPoint, predictedPointOut);
}

/*
==============
SV_BotUpdateEyeInfo
==============
*/

void __fastcall SV_BotUpdateEyeInfo(const gentity_s *self)
{
  ?SV_BotUpdateEyeInfo@@YAXPEBUgentity_s@@@Z(self);
}

/*
==============
Bot_CombatStateMelee
==============
*/

int __fastcall Bot_CombatStateMelee(bot_data_t *botData, const playerState_s *ps, usercmd_s *cmd)
{
  return ?Bot_CombatStateMelee@@YAHPEAUbot_data_t@@PEBUplayerState_s@@PEAUusercmd_s@@@Z(botData, ps, cmd);
}

/*
==============
Bot_ApplyKickAngles
==============
*/

void __fastcall Bot_ApplyKickAngles(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_ApplyKickAngles@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_IsHighAerialSentient
==============
*/

int __fastcall Bot_IsHighAerialSentient(sentient_s *sentient)
{
  return ?Bot_IsHighAerialSentient@@YAHPEAUsentient_s@@@Z(sentient);
}

/*
==============
SV_BotClearGoalAndEnemy
==============
*/

void __fastcall SV_BotClearGoalAndEnemy(gentity_s *bot)
{
  ?SV_BotClearGoalAndEnemy@@YAXPEAUgentity_s@@@Z(bot);
}

/*
==============
Bot_UpdateScriptGoalLook
==============
*/

int __fastcall Bot_UpdateScriptGoalLook(bot_data_t *botData, vec3_t *viewAnglesOut)
{
  return ?Bot_UpdateScriptGoalLook@@YAHPEAUbot_data_t@@AEATvec3_t@@@Z(botData, viewAnglesOut);
}

/*
==============
Bot_MemoryReadEvent
==============
*/

bot_mem_event_t *__fastcall Bot_MemoryReadEvent(bot_data_t *botData, const int index)
{
  return ?Bot_MemoryReadEvent@@YAPEAUbot_mem_event_t@@PEAUbot_data_t@@H@Z(botData, index);
}

/*
==============
Bot_GetScriptGoalYaw
==============
*/

double __fastcall Bot_GetScriptGoalYaw(const bot_data_t *botData)
{
  double result; 

  *(float *)&result = ?Bot_GetScriptGoalYaw@@YAMPEBUbot_data_t@@@Z(botData);
  return result;
}

/*
==============
Bot_ZoneUpdateCounts
==============
*/

void Bot_ZoneUpdateCounts(void)
{
  ?Bot_ZoneUpdateCounts@@YAXXZ();
}

/*
==============
Bot_IsRandomized
==============
*/

int __fastcall Bot_IsRandomized(const bot_data_t *botData)
{
  return ?Bot_IsRandomized@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_PathClear
==============
*/

void __fastcall Bot_PathClear(bot_info_t *botInfo)
{
  ?Bot_PathClear@@YAXPEAUbot_info_t@@@Z(botInfo);
}

/*
==============
Bot_SetDifficulty
==============
*/

void __fastcall Bot_SetDifficulty(bot_data_t *botData, bot_difficulty_t botDifficulty)
{
  ?Bot_SetDifficulty@@YAXPEAUbot_data_t@@W4bot_difficulty_t@@@Z(botData, botDifficulty);
}

/*
==============
Bot_GetScriptFlagType
==============
*/

int __fastcall Bot_GetScriptFlagType(const char *scriptFlagName)
{
  return ?Bot_GetScriptFlagType@@YAHPEBD@Z(scriptFlagName);
}

/*
==============
Bot_MemoryGetAllPositions
==============
*/

void __fastcall Bot_MemoryGetAllPositions(bot_data_t *botData, int timeNewest, int timeOldest, int typeFlags, int locationNumber, vec3_t *positions, int numPositionsStart, int positionsSize, int *numResults, int flagsExclude)
{
  ?Bot_MemoryGetAllPositions@@YAXPEAUbot_data_t@@HHHHPEATvec3_t@@HHPEAHH@Z(botData, timeNewest, timeOldest, typeFlags, locationNumber, positions, numPositionsStart, positionsSize, numResults, flagsExclude);
}

/*
==============
Bot_UpdateStance
==============
*/

void __fastcall Bot_UpdateStance(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_UpdateStance@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_GetCurrentNumDebugGoals
==============
*/

int __fastcall Bot_GetCurrentNumDebugGoals()
{
  return ?Bot_GetCurrentNumDebugGoals@@YAHXZ();
}

/*
==============
Bot_CleanupBotInfo
==============
*/

void __fastcall Bot_CleanupBotInfo(bot_data_t *botData)
{
  ?Bot_CleanupBotInfo@@YAXPEAUbot_data_t@@@Z(botData);
}

/*
==============
SV_BotEntityDied
==============
*/

void __fastcall SV_BotEntityDied(const gentity_s *victimEnt)
{
  ?SV_BotEntityDied@@YAXPEBUgentity_s@@@Z(victimEnt);
}

/*
==============
Bot_GetTeamDifficulty
==============
*/

bot_difficulty_t __fastcall Bot_GetTeamDifficulty(int relativeTeam)
{
  return ?Bot_GetTeamDifficulty@@YA?AW4bot_difficulty_t@@H@Z(relativeTeam);
}

/*
==============
SV_BotGetRandomName
==============
*/

const char *__fastcall SV_BotGetRandomName()
{
  return ?SV_BotGetRandomName@@YAPEBDXZ();
}

/*
==============
Bot_ZoneGetCount
==============
*/

int __fastcall Bot_ZoneGetCount(int zone, int nodeTeam, bot_zone_count_t type)
{
  return ?Bot_ZoneGetCount@@YAHHHW4bot_zone_count_t@@@Z(zone, nodeTeam, type);
}

/*
==============
Bot_GetClosestCharacterList
==============
*/

int __fastcall Bot_GetClosestCharacterList(gentity_s *entity, const vec3_t *originPoint, const float maxDist, int onlyAI, int allowScriptedAgents, int excludeSelf, int onlyVisibleClients, const bitarray<224> *teamFlags, gentity_s **results, int limit)
{
  return ?Bot_GetClosestCharacterList@@YAHPEAUgentity_s@@AEBTvec3_t@@MHHHHAEBV?$bitarray@$0OA@@@PEAPEAU1@H@Z(entity, originPoint, maxDist, onlyAI, allowScriptedAgents, excludeSelf, onlyVisibleClients, teamFlags, results, limit);
}

/*
==============
Bot_SightThresholdReached
==============
*/

int __fastcall Bot_SightThresholdReached(const sentient_s *botSentient, const sentient_s *enemy)
{
  return ?Bot_SightThresholdReached@@YAHPEBUsentient_s@@0@Z(botSentient, enemy);
}

/*
==============
Bot_GetDifficulty
==============
*/

bot_difficulty_t __fastcall Bot_GetDifficulty(const bot_data_t *botData)
{
  return ?Bot_GetDifficulty@@YA?AW4bot_difficulty_t@@PEBUbot_data_t@@@Z(botData);
}

/*
==============
SV_BotStaticStateRead
==============
*/

void __fastcall SV_BotStaticStateRead(SaveGame *save)
{
  ?SV_BotStaticStateRead@@YAXPEAUSaveGame@@@Z(save);
}

/*
==============
Bot_GetWorldSize
==============
*/

void __fastcall Bot_GetWorldSize(vec3_t *worldSize)
{
  ?Bot_GetWorldSize@@YAXAEATvec3_t@@@Z(worldSize);
}

/*
==============
Bot_UpdateMovement
==============
*/

void __fastcall Bot_UpdateMovement(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_UpdateMovement@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_UpdateScreenTargets
==============
*/

void __fastcall Bot_UpdateScreenTargets(bot_data_t *botData)
{
  ?Bot_UpdateScreenTargets@@YAXPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_IsVehicleEnt
==============
*/

int __fastcall Bot_IsVehicleEnt(const gentity_s *ent)
{
  return ?Bot_IsVehicleEnt@@YAHPEBUgentity_s@@@Z(ent);
}

/*
==============
Bot_GetScriptGoalRadius
==============
*/

double __fastcall Bot_GetScriptGoalRadius(const bot_data_t *botData)
{
  double result; 

  *(float *)&result = ?Bot_GetScriptGoalRadius@@YAMPEBUbot_data_t@@@Z(botData);
  return result;
}

/*
==============
Bot_GetLookAheadDir
==============
*/

void __fastcall Bot_GetLookAheadDir(const bot_info_t *botInfo, vec3_t *lookaheadDirOut)
{
  ?Bot_GetLookAheadDir@@YAXPEBUbot_info_t@@AEATvec3_t@@@Z(botInfo, lookaheadDirOut);
}

/*
==============
Bot_GetBotPersistentMatchData
==============
*/

bot_match_data_t *__fastcall Bot_GetBotPersistentMatchData(const SvClientMP *bot)
{
  return ?Bot_GetBotPersistentMatchData@@YAPEAUbot_match_data_t@@PEBVSvClientMP@@@Z(bot);
}

/*
==============
SV_BotZoneGetIndoorPercent
==============
*/

double __fastcall SV_BotZoneGetIndoorPercent(int zone)
{
  double result; 

  *(float *)&result = ?SV_BotZoneGetIndoorPercent@@YAMH@Z(zone);
  return result;
}

/*
==============
Bot_UpdateVariableZoomToggle
==============
*/

void __fastcall Bot_UpdateVariableZoomToggle(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_UpdateVariableZoomToggle@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_CanSeeHardware
==============
*/

int __fastcall Bot_CanSeeHardware(ai_common_t *self, const gentity_s *ent)
{
  return ?Bot_CanSeeHardware@@YAHPEAUai_common_t@@PEBUgentity_s@@@Z(self, ent);
}

/*
==============
SV_BotDebugStringEnt
==============
*/

void __fastcall SV_BotDebugStringEnt(gentity_s *ent, const vec3_t *xyz, const vec4_t *color, float scale, const char *pszText, int duration)
{
  ?SV_BotDebugStringEnt@@YAXPEAUgentity_s@@Tvec3_t@@Tvec4_t@@MPEBDH@Z(ent, xyz, color, scale, pszText, duration);
}

/*
==============
Bot_ResetLife
==============
*/

void __fastcall Bot_ResetLife(bot_data_t *botData)
{
  ?Bot_ResetLife@@YAXPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_UpdateYaw
==============
*/

double __fastcall Bot_UpdateYaw(bot_data_t *botData, float currentYaw, float targetYaw, int forceSlow)
{
  double result; 

  *(float *)&result = ?Bot_UpdateYaw@@YAMPEAUbot_data_t@@MMH@Z(botData, currentYaw, targetYaw, forceSlow);
  return result;
}

/*
==============
Bot_ValidateMatchData
==============
*/

void __fastcall Bot_ValidateMatchData(const bot_data_t *botData)
{
  ?Bot_ValidateMatchData@@YAXPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_CombatStateThrowBack
==============
*/

bool __fastcall Bot_CombatStateThrowBack(bot_data_t *botData, playerState_s *ps, usercmd_s *cmd)
{
  return ?Bot_CombatStateThrowBack@@YA_NPEAUbot_data_t@@PEAUplayerState_s@@PEAUusercmd_s@@@Z(botData, ps, cmd);
}

/*
==============
Bot_Badplace_PathEscape
==============
*/

int __fastcall Bot_Badplace_PathEscape(bot_data_t *botData)
{
  return ?Bot_Badplace_PathEscape@@YAHPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_MemoryIterate
==============
*/

bot_mem_event_t *__fastcall Bot_MemoryIterate(bot_data_t *botData, int timeNewest, int timeOldest, bot_mem_iterator_t *memIt)
{
  return ?Bot_MemoryIterate@@YAPEAUbot_mem_event_t@@PEAUbot_data_t@@HHPEAUbot_mem_iterator_t@@@Z(botData, timeNewest, timeOldest, memIt);
}

/*
==============
Bot_UpdateRadar
==============
*/

void __fastcall Bot_UpdateRadar(bot_data_t *botData)
{
  ?Bot_UpdateRadar@@YAXPEAUbot_data_t@@@Z(botData);
}

/*
==============
Bot_GetRequestedNavGoal
==============
*/

void __fastcall Bot_GetRequestedNavGoal(const bot_info_t *botInfo, vec3_t *requestedGoalOut)
{
  ?Bot_GetRequestedNavGoal@@YAXPEBUbot_info_t@@AEATvec3_t@@@Z(botInfo, requestedGoalOut);
}

/*
==============
SV_BotFindRandomGoal
==============
*/

bool __fastcall SV_BotFindRandomGoal(const bot_data_t *botData, const vec3_t *nonBotOverrideOrigin, const vec3_t *nonBotOverrideAngles, vec3_t *goalOut)
{
  return ?SV_BotFindRandomGoal@@YA_NPEBUbot_data_t@@PEBTvec3_t@@1AEAT2@@Z(botData, nonBotOverrideOrigin, nonBotOverrideAngles, goalOut);
}

/*
==============
Bot_GetSensesObstructed
==============
*/

int __fastcall Bot_GetSensesObstructed(const bot_data_t *botData, float *visionBlock, float *hearingBlock)
{
  return ?Bot_GetSensesObstructed@@YAHPEBUbot_data_t@@PEAM1@Z(botData, visionBlock, hearingBlock);
}

/*
==============
Bot_NegotiationGetType
==============
*/

int __fastcall Bot_NegotiationGetType(const pathnode_t *negotiationNode)
{
  return ?Bot_NegotiationGetType@@YAHPEBUpathnode_t@@@Z(negotiationNode);
}

/*
==============
Bot_LookAtEntity
==============
*/

void __fastcall Bot_LookAtEntity(bot_data_t *botData, gentity_s *ent, int duration, bot_look_t type)
{
  ?Bot_LookAtEntity@@YAXPEAUbot_data_t@@PEAUgentity_s@@HW4bot_look_t@@@Z(botData, ent, duration, type);
}

/*
==============
Bot_IsEnemyNearGoal
==============
*/

int __fastcall Bot_IsEnemyNearGoal(bot_data_t *botData, const gentity_s *enemy)
{
  return ?Bot_IsEnemyNearGoal@@YAHPEAUbot_data_t@@PEBUgentity_s@@@Z(botData, enemy);
}

/*
==============
Bot_SetAwareness
==============
*/

void __fastcall Bot_SetAwareness(bot_data_t *botData, float awareness)
{
  ?Bot_SetAwareness@@YAXPEAUbot_data_t@@M@Z(botData, awareness);
}

/*
==============
Bot_LoadDifficultySettings
==============
*/

void __fastcall Bot_LoadDifficultySettings(bot_data_t *botData, bot_difficulty_t botDifficulty)
{
  ?Bot_LoadDifficultySettings@@YAXPEAUbot_data_t@@W4bot_difficulty_t@@@Z(botData, botDifficulty);
}

/*
==============
Bot_UpdateEnemyAwareLook
==============
*/

int __fastcall Bot_UpdateEnemyAwareLook(bot_data_t *botData, vec3_t *viewAnglesOut)
{
  return ?Bot_UpdateEnemyAwareLook@@YAHPEAUbot_data_t@@AEATvec3_t@@@Z(botData, viewAnglesOut);
}

/*
==============
Bot_DestroyZoneObstacle
==============
*/

void __fastcall Bot_DestroyZoneObstacle(int zoneNum, team_t team)
{
  ?Bot_DestroyZoneObstacle@@YAXHW4team_t@@@Z(zoneNum, team);
}

/*
==============
Bot_HideFromEntity
==============
*/

void __fastcall Bot_HideFromEntity(bot_data_t *botData, const gentity_s *entity, float hideRange, int duration)
{
  ?Bot_HideFromEntity@@YAXPEAUbot_data_t@@PEBUgentity_s@@MH@Z(botData, entity, hideRange, duration);
}

/*
==============
Bot_DebugPathGoalEnabled
==============
*/

int __fastcall Bot_DebugPathGoalEnabled()
{
  return ?Bot_DebugPathGoalEnabled@@YAHXZ();
}

/*
==============
Bot_IsOnGroundOrNearGround
==============
*/

int __fastcall Bot_IsOnGroundOrNearGround(const bot_data_t *botData)
{
  return ?Bot_IsOnGroundOrNearGround@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_RandomInput
==============
*/

void __fastcall Bot_RandomInput(bot_data_t *botData, usercmd_s *cmd)
{
  ?Bot_RandomInput@@YAXPEAUbot_data_t@@PEAUusercmd_s@@@Z(botData, cmd);
}

/*
==============
Bot_GetHidingFromEntity
==============
*/

gentity_s *__fastcall Bot_GetHidingFromEntity(const bot_data_t *botData)
{
  return ?Bot_GetHidingFromEntity@@YAPEAUgentity_s@@PEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_UpdateBadPathLook
==============
*/

int __fastcall Bot_UpdateBadPathLook(bot_data_t *botData, vec3_t *viewAnglesOut)
{
  return ?Bot_UpdateBadPathLook@@YAHPEAUbot_data_t@@AEATvec3_t@@@Z(botData, viewAnglesOut);
}

/*
==============
Bot_IsInRangeOfEnemy
==============
*/

int __fastcall Bot_IsInRangeOfEnemy(const bot_data_t *botData)
{
  return ?Bot_IsInRangeOfEnemy@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_PersonalityFromString
==============
*/

bot_personality_t __fastcall Bot_PersonalityFromString(const char *botPersonalityString)
{
  return ?Bot_PersonalityFromString@@YA?AW4bot_personality_t@@PEBD@Z(botPersonalityString);
}

/*
==============
Bot_GetWorldClosestEdge
==============
*/

double __fastcall Bot_GetWorldClosestEdge(const bot_data_t *botData, const vec3_t *point, vec3_t *resultPoint, vec3_t *resultNormal)
{
  double result; 

  *(float *)&result = ?Bot_GetWorldClosestEdge@@YAMPEBUbot_data_t@@PEBTvec3_t@@AEAT2@PEAT2@@Z(botData, point, resultPoint, resultNormal);
  return result;
}

/*
==============
Bot_GetBotInfoFromNetBuffer
==============
*/

bot_info_t *__fastcall Bot_GetBotInfoFromNetBuffer(const SvClientMP *bot)
{
  return ?Bot_GetBotInfoFromNetBuffer@@YAPEAUbot_info_t@@PEBVSvClientMP@@@Z(bot);
}

/*
==============
Bot_GetClosestNavigablePoint
==============
*/

int __fastcall Bot_GetClosestNavigablePoint(const vec3_t *point, float maxDist, int traceMask, vec3_t *resultPoint, __int16 groundEnt)
{
  return ?Bot_GetClosestNavigablePoint@@YAHAEBTvec3_t@@MHAEAT1@F@Z(point, maxDist, traceMask, resultPoint, groundEnt);
}

/*
==============
SV_BotBreakGlassMove
==============
*/

int __fastcall SV_BotBreakGlassMove(const gentity_s *ent, const vec3_t *velocity, const Bounds *bounds)
{
  return ?SV_BotBreakGlassMove@@YAHPEBUgentity_s@@AEBTvec3_t@@PEBUBounds@@@Z(ent, velocity, bounds);
}

/*
==============
Bot_ShouldDelayScriptGoal
==============
*/

int __fastcall Bot_ShouldDelayScriptGoal(const bot_data_t *botData)
{
  return ?Bot_ShouldDelayScriptGoal@@YAHPEBUbot_data_t@@@Z(botData);
}

/*
==============
Bot_AIKnownEnemiesCapsule
==============
*/

void __fastcall Bot_AIKnownEnemiesCapsule(bot_info_t *botInfo, const vec3_t *start, const vec3_t *end, double capsuleRadius, unsigned __int8 knownType)
{
  bool v13; 
  bool v14; 
  bool v18; 
  bool v19; 
  gentity_s *ent; 
  AIBotInterface *m_pAI; 
  sentient_s *i; 
  gentity_s *v38; 
  __int16 EntityIndex; 
  const SvClientMP *MpClient; 
  int IsClientConnected; 
  bitarray_base<bitarray<224> > *AllTeamFlags; 
  const SvClientMP *v43; 
  char v44; 
  __int64 v47; 
  double v48; 
  __int64 v49; 
  double v50; 
  AIBotWrapper v51; 
  bitarray<224> iTeamFlags; 
  vec3_t vEyePosOut; 
  void *retaddr; 

  _RAX = &retaddr;
  __asm
  {
    vmovaps xmmword ptr [rax-48h], xmm6
    vmovaps xmmword ptr [rax-58h], xmm7
  }
  _R12 = end;
  __asm { vmovaps xmm6, xmm3 }
  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6063, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  v13 = botInfo->sentient == NULL;
  if ( !botInfo->sentient )
  {
    v14 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6064, ASSERT_TYPE_ASSERT, "( botInfo->sentient )", (const char *)&queryFormat, "botInfo->sentient");
    v13 = !v14;
    if ( v14 )
      __debugbreak();
  }
  __asm
  {
    vxorps  xmm7, xmm7, xmm7
    vcomiss xmm6, xmm7
  }
  if ( v13 )
  {
    __asm
    {
      vxorpd  xmm0, xmm0, xmm0
      vmovsd  [rsp+108h+var_D8], xmm0
      vcvtss2sd xmm1, xmm6, xmm6
      vmovsd  [rsp+108h+var_E0], xmm1
    }
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6065, ASSERT_TYPE_ASSERT, "( capsuleRadius ) > ( 0 )", "capsuleRadius > 0\n\t%g, %g", v48, v50) )
      __debugbreak();
  }
  v18 = knownType <= 0x1Bu;
  if ( knownType >= 0x1Bu )
  {
    LODWORD(v49) = 27;
    LODWORD(v47) = knownType;
    v19 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6066, ASSERT_TYPE_ASSERT, "(unsigned)( knownType ) < (unsigned)( NUM_AI_KNOWN )", "knownType doesn't index NUM_AI_KNOWN\n\t%i not in [0, %i)", v47, v49);
    v18 = !v19;
    if ( v19 )
      __debugbreak();
  }
  __asm
  {
    vmovss  xmm0, dword ptr [r12]
    vsubss  xmm3, xmm0, dword ptr [r15]
    vmovss  xmm1, dword ptr [r12+4]
    vmovss  xmm0, dword ptr [r12+8]
    vsubss  xmm2, xmm1, dword ptr [r15+4]
    vsubss  xmm4, xmm0, dword ptr [r15+8]
    vmulss  xmm2, xmm2, xmm2
    vmulss  xmm1, xmm3, xmm3
    vmulss  xmm0, xmm4, xmm4
    vaddss  xmm3, xmm2, xmm1
    vaddss  xmm4, xmm3, xmm0
    vcomiss xmm4, xmm7
  }
  if ( v18 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6067, ASSERT_TYPE_ASSERT, "( Vec3DistanceSq( start, end ) > 0 )", (const char *)&queryFormat, "Vec3DistanceSq( start, end ) > 0") )
    __debugbreak();
  __asm { vmulss  xmm6, xmm6, xmm6 }
  AICommonInterface::AICommonInterface(&v51.m_botInterface);
  v51.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v51.m_botAgentInterface);
  ent = botInfo->ent;
  v51.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v51.m_pAI = NULL;
  AIBotWrapper::Setup(&v51, ent);
  m_pAI = v51.m_pAI;
  if ( !v51.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6075, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  if ( Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) )
    _RAX = Com_TeamsSP_GetAllTeamFlags();
  else
    _RAX = Com_TeamsMP_GetAllTeamFlags();
  __asm
  {
    vmovups xmm0, xmmword ptr [rax]
    vmovups xmmword ptr [rsp+108h+iTeamFlags.array], xmm0
    vmovsd  xmm1, qword ptr [rax+10h]
    vmovsd  qword ptr [rsp+108h+iTeamFlags.array+10h], xmm1
  }
  iTeamFlags.array[6] = _RAX->array[6];
  for ( i = Sentient_FirstSentient(&iTeamFlags); i; i = Sentient_NextSentient(i, &iTeamFlags) )
  {
    v38 = i->ent;
    if ( i->ent )
    {
      EntityIndex = G_GetEntityIndex(i->ent);
      if ( G_IsEntityInUse(EntityIndex) )
      {
        if ( v38->sentient )
        {
          if ( v38->client )
          {
            MpClient = SV_Client_GetMpClient(v38->s.number);
            IsClientConnected = Bot_IsClientConnected(MpClient);
          }
          else
          {
            if ( !v38->agent )
              goto LABEL_31;
            IsClientConnected = v38->s.eType == ET_AGENT;
          }
          if ( IsClientConnected )
          {
LABEL_31:
            if ( v38->s.eType != ET_INVISIBLE )
            {
              AllTeamFlags = (bitarray_base<bitarray<224> > *)Com_TeamsMP_GetAllTeamFlags();
              if ( bitarray_base<bitarray<224>>::testBit(AllTeamFlags, v38->sentient->eTeam) )
              {
                if ( !v38->client || (v43 = SV_Client_GetMpClient(v38->s.number), Bot_IsClientActive(v43)) )
                {
                  if ( !AI_IsAlliedSentient(botInfo->sentient, i) )
                  {
                    Sentient_GetHeadPosition(i, &vEyePosOut);
                    *(double *)&_XMM0 = PointToLineSegmentDistSq(&vEyePosOut, start, _R12);
                    __asm { vcomiss xmm0, xmm6 }
                    if ( v44 | v13 )
                      m_pAI->GetPerfectInfo(m_pAI, i, knownType);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  __asm
  {
    vmovaps xmm6, [rsp+108h+var_48]
    vmovaps xmm7, [rsp+108h+var_58]
  }
}

/*
==============
Bot_AIKnownEnemiesRadial
==============
*/

void __fastcall Bot_AIKnownEnemiesRadial(bot_info_t *botInfo, const vec3_t *position, double radius, unsigned __int8 knownType)
{
  bool v10; 
  bool v11; 
  gentity_s *ent; 
  AIBotInterface *m_pAI; 
  sentient_s *i; 
  gentity_s *v21; 
  __int16 EntityIndex; 
  const SvClientMP *MpClient; 
  int IsClientConnected; 
  bitarray_base<bitarray<224> > *AllTeamFlags; 
  const SvClientMP *v26; 
  const playerState_s *EntityPlayerStateConst; 
  __int64 v40; 
  double v41; 
  __int64 v42; 
  double v43; 
  AIBotWrapper v44; 
  bitarray<224> iTeamFlags; 

  __asm { vmovaps [rsp+0D8h+var_38], xmm6 }
  _RBP = position;
  __asm { vmovaps xmm6, xmm2 }
  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6021, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  v10 = botInfo->sentient == NULL;
  if ( !botInfo->sentient )
  {
    v11 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6022, ASSERT_TYPE_ASSERT, "( botInfo->sentient )", (const char *)&queryFormat, "botInfo->sentient");
    v10 = !v11;
    if ( v11 )
      __debugbreak();
  }
  __asm
  {
    vxorps  xmm0, xmm0, xmm0
    vcomiss xmm6, xmm0
  }
  if ( v10 )
  {
    __asm
    {
      vmovsd  [rsp+0D8h+var_A8], xmm0
      vcvtss2sd xmm1, xmm6, xmm6
      vmovsd  [rsp+0D8h+var_B0], xmm1
    }
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6023, ASSERT_TYPE_ASSERT, "( radius ) > ( 0 )", "radius > 0\n\t%g, %g", v41, v43) )
      __debugbreak();
  }
  if ( knownType >= 0x1Bu )
  {
    LODWORD(v42) = 27;
    LODWORD(v40) = knownType;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6024, ASSERT_TYPE_ASSERT, "(unsigned)( knownType ) < (unsigned)( NUM_AI_KNOWN )", "knownType doesn't index NUM_AI_KNOWN\n\t%i not in [0, %i)", v40, v42) )
      __debugbreak();
  }
  AICommonInterface::AICommonInterface(&v44.m_botInterface);
  v44.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v44.m_botAgentInterface);
  ent = botInfo->ent;
  v44.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v44.m_pAI = NULL;
  AIBotWrapper::Setup(&v44, ent);
  m_pAI = v44.m_pAI;
  if ( !v44.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6026, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  __asm { vmulss  xmm6, xmm6, xmm6 }
  if ( Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) )
    _RAX = Com_TeamsSP_GetAllTeamFlags();
  else
    _RAX = Com_TeamsMP_GetAllTeamFlags();
  __asm
  {
    vmovups xmm0, xmmword ptr [rax]
    vmovups xmmword ptr [rsp+0D8h+iTeamFlags.array], xmm0
    vmovsd  xmm1, qword ptr [rax+10h]
    vmovsd  qword ptr [rsp+0D8h+iTeamFlags.array+10h], xmm1
  }
  iTeamFlags.array[6] = _RAX->array[6];
  for ( i = Sentient_FirstSentient(&iTeamFlags); i; i = Sentient_NextSentient(i, &iTeamFlags) )
  {
    v21 = i->ent;
    if ( i->ent )
    {
      EntityIndex = G_GetEntityIndex(i->ent);
      if ( G_IsEntityInUse(EntityIndex) )
      {
        if ( v21->sentient )
        {
          if ( v21->client )
          {
            MpClient = SV_Client_GetMpClient(v21->s.number);
            IsClientConnected = Bot_IsClientConnected(MpClient);
          }
          else
          {
            if ( !v21->agent )
              goto LABEL_28;
            IsClientConnected = v21->s.eType == ET_AGENT;
          }
          if ( IsClientConnected )
          {
LABEL_28:
            if ( v21->s.eType != ET_INVISIBLE )
            {
              AllTeamFlags = (bitarray_base<bitarray<224> > *)Com_TeamsMP_GetAllTeamFlags();
              if ( bitarray_base<bitarray<224>>::testBit(AllTeamFlags, v21->sentient->eTeam) )
              {
                if ( !v21->client || (v26 = SV_Client_GetMpClient(v21->s.number), Bot_IsClientActive(v26)) )
                {
                  if ( !AI_IsAlliedSentient(botInfo->sentient, i) )
                  {
                    __asm
                    {
                      vmovss  xmm0, dword ptr [rbp+0]
                      vmovss  xmm1, dword ptr [rbp+4]
                      vsubss  xmm3, xmm0, dword ptr [rcx+130h]
                      vsubss  xmm2, xmm1, dword ptr [rcx+134h]
                      vmovss  xmm0, dword ptr [rbp+8]
                      vsubss  xmm4, xmm0, dword ptr [rcx+138h]
                      vmulss  xmm2, xmm2, xmm2
                      vmulss  xmm1, xmm3, xmm3
                      vmulss  xmm0, xmm4, xmm4
                      vaddss  xmm3, xmm2, xmm1
                      vaddss  xmm2, xmm3, xmm0
                      vcomiss xmm2, xmm6
                    }
                    if ( knownType != 26 || (EntityPlayerStateConst = G_GetEntityPlayerStateConst(i->ent)) == NULL || !BG_HasPerk(&EntityPlayerStateConst->perks, 0x1Bu) )
                      m_pAI->GetPerfectInfo(m_pAI, i, knownType);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  __asm { vmovaps xmm6, [rsp+0D8h+var_38] }
}

/*
==============
Bot_ActiveGoalIsScriptGoal
==============
*/
int Bot_ActiveGoalIsScriptGoal(const bot_data_t *botData)
{
  vec3_t outFinalGoal; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24131, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( botData == (const bot_data_t *)-8i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13725, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  if ( !Bot_NavPathExists(&botData->botInfo) )
    return 0;
  Bot_GetPathFinalGoal(&botData->botInfo, &outFinalGoal);
  return Bot_LocationIsScriptGoal(botData, &outFinalGoal);
}

/*
==============
Bot_ActualMeleeRange
==============
*/
float Bot_ActualMeleeRange(const bot_data_t *botData)
{
  const playerState_s *playerState; 
  GWeaponMap *Instance; 

  _RBX = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10281, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  playerState = _RBX->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10285, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  Instance = GWeaponMap::GetInstance();
  BG_GetMeleeRange(Instance, playerState, 1);
  __asm
  {
    vmovss  xmm1, dword ptr [rbx+7FF8h]
    vminss  xmm0, xmm1, xmm0
  }
  return *(float *)&_XMM0;
}

/*
==============
Bot_AdjustEnemyAimPoint
==============
*/
void Bot_AdjustEnemyAimPoint(const bot_data_t *botData, const gentity_s *ent, vec3_t *aimPoint)
{
  int v14; 
  const gentity_s *v15; 
  const playerState_s *playerState; 
  const Weapon *ViewmodelWeapon; 
  int v19; 
  sentient_s *sentient; 
  char v54; 
  bool v55; 
  bool v58; 
  int BoneIndex; 
  vec3_t vEyePosOut; 

  _RSI = aimPoint;
  _RBX = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11972, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11973, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  v14 = 0;
  if ( EntHandle::isDefined(&_RBX->botInfo.sentient->targetEnt) )
    v15 = EntHandle::ent(&_RBX->botInfo.sentient->targetEnt);
  else
    v15 = NULL;
  if ( ent != v15 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11974, ASSERT_TYPE_ASSERT, "( ent == Bot_GetEnemy( botData ) )", (const char *)&queryFormat, "ent == Bot_GetEnemy( botData )") )
    __debugbreak();
  playerState = _RBX->botInfo.playerState;
  ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(playerState);
  if ( G_GetEntityPlayerStateConst(ent) )
  {
    _EBP = ((unsigned int)_RBX->botInfo.scriptFlags >> 20) & 1;
    if ( Bot_EntityUsingRiotShield(ent, 0) && !Bot_EntityUsingRiotShield(_RBX->botInfo.ent, 0) )
      v14 = 1;
    if ( !Bot_Weap_IsWeapClass(playerState, ViewmodelWeapon, WEAPCLASS_ROCKETLAUNCHER) )
      goto LABEL_20;
    *(float *)&_XMM0 = Bot_ActualMeleeRange(_RBX);
    __asm { vcomiss xmm0, dword ptr [rbx+2394h] }
    if ( v54 | v55 )
    {
      v19 = 1;
      _ER12 = 0;
    }
    else
    {
LABEL_20:
      _ER12 = 0;
      v19 = 0;
    }
    if ( _EBP || !v14 && !v19 )
    {
      sentient = ent->sentient;
      __asm
      {
        vmovaps [rsp+0F8h+var_48], xmm6
        vmovaps [rsp+0F8h+var_58], xmm7
        vmovaps [rsp+0F8h+var_68], xmm8
        vmovaps [rsp+0F8h+var_78], xmm9
        vmovaps [rsp+0F8h+var_88], xmm10
        vmovaps [rsp+0F8h+var_98], xmm11
        vmovaps [rsp+0F8h+var_A8], xmm12
      }
      Sentient_GetHeadPosition(sentient, &vEyePosOut);
      __asm
      {
        vmovss  xmm0, dword ptr [rsp+0F8h+vEyePosOut]
        vsubss  xmm6, xmm0, dword ptr [rdi+130h]
        vmovss  xmm1, dword ptr [rsp+0F8h+vEyePosOut+4]
        vsubss  xmm5, xmm1, dword ptr [rdi+134h]
        vmovss  xmm0, dword ptr [rsp+0F8h+vEyePosOut+8]
        vsubss  xmm4, xmm0, dword ptr [rdi+138h]
        vmovss  xmm7, cs:__real@3f800000
        vmulss  xmm1, xmm6, xmm6
        vmulss  xmm2, xmm5, xmm5
        vmulss  xmm0, xmm4, xmm4
        vaddss  xmm3, xmm2, xmm1
        vaddss  xmm2, xmm3, xmm0
        vsqrtss xmm9, xmm2, xmm2
        vcmpless xmm0, xmm9, cs:__real@80000000
        vblendvps xmm0, xmm9, xmm7, xmm0
        vdivss  xmm1, xmm7, xmm0
        vmulss  xmm10, xmm6, xmm1
        vxorps  xmm6, xmm6, xmm6
        vmulss  xmm11, xmm5, xmm1
        vmulss  xmm12, xmm4, xmm1
        vxorps  xmm8, xmm8, xmm8
      }
      if ( Bot_IsInRangeOfEnemy(_RBX) )
      {
        __asm { vmovss  xmm6, cs:__real@3eaaaa3b }
        if ( GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&playerState->pm_flags, ACTIVE, 1u) || GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&playerState->pm_flags, ACTIVE, 0) )
        {
          __asm
          {
            vmovss  xmm0, dword ptr [rbx+2394h]
            vcmpltss xmm2, xmm0, cs:__real@42c00000
            vmovss  xmm1, cs:__real@3f2aaa3b
            vblendvps xmm6, xmm6, xmm1, xmm2
          }
        }
      }
      __asm
      {
        vmovd   xmm1, r12d
        vmovd   xmm0, ebp
        vpcmpeqd xmm2, xmm0, xmm1
        vblendvps xmm0, xmm7, xmm6, xmm2; val
        vmovaps xmm2, xmm7; max
        vxorps  xmm1, xmm1, xmm1; min
      }
      *(double *)&_XMM0 = I_fclamp(*(float *)&_XMM0, *(float *)&_XMM1, *(float *)&_XMM2);
      __asm
      {
        vmovss  xmm1, dword ptr [rbx+23E8h]
        vcomiss xmm1, xmm8
        vmovaps xmm6, xmm0
      }
      if ( v54 )
        goto LABEL_45;
      __asm { vcomiss xmm1, xmm7 }
      if ( !(v54 | v55) )
      {
LABEL_45:
        v58 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12083, ASSERT_TYPE_ASSERT, "( botInfo->targetHeadBias >= 0.0f && botInfo->targetHeadBias <= 1.0f )", (const char *)&queryFormat, "botInfo->targetHeadBias >= 0.0f && botInfo->targetHeadBias <= 1.0f");
        v54 = 0;
        v55 = !v58;
        if ( v58 )
          __debugbreak();
      }
      __asm
      {
        vsubss  xmm0, xmm7, dword ptr [rbx+23E8h]
        vsubss  xmm1, xmm7, xmm6
        vmulss  xmm1, xmm1, xmm0
        vaddss  xmm6, xmm6, xmm1
        vcomiss xmm6, xmm8
        vmovaps xmm8, [rsp+0F8h+var_68]
        vcomiss xmm6, xmm7
      }
      if ( !(v54 | v55) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12085, ASSERT_TYPE_ASSERT, "( percentAimTowardHead >= 0.0f && percentAimTowardHead <= 1.0f )", (const char *)&queryFormat, "percentAimTowardHead >= 0.0f && percentAimTowardHead <= 1.0f") )
        __debugbreak();
      __asm
      {
        vmovaps xmm7, [rsp+0F8h+var_58]
        vmulss  xmm2, xmm9, xmm6
        vmovaps xmm9, [rsp+0F8h+var_78]
        vmovaps xmm6, [rsp+0F8h+var_48]
        vmulss  xmm0, xmm10, xmm2
        vaddss  xmm1, xmm0, dword ptr [rsi]
        vmovaps xmm10, [rsp+0F8h+var_88]
        vmulss  xmm0, xmm11, xmm2
        vmovaps xmm11, [rsp+0F8h+var_98]
        vmovss  dword ptr [rsi], xmm1
        vaddss  xmm1, xmm0, dword ptr [rsi+4]
        vmulss  xmm0, xmm12, xmm2
        vmovaps xmm12, [rsp+0F8h+var_A8]
        vmovss  dword ptr [rsi+4], xmm1
        vaddss  xmm1, xmm0, dword ptr [rsi+8]
        vmovss  dword ptr [rsi+8], xmm1
      }
    }
  }
  else
  {
    BoneIndex = SV_Game_DObjGetBoneIndex(ent, scr_const.tag_ai_aim_target);
    if ( BoneIndex < 0 )
      Sentient_GetHeadPosition(ent->sentient, _RSI);
    else
      G_Utils_DObjGetWorldBoneIndexPos(ent, BoneIndex, _RSI);
    if ( Bot_EnemyPreferMelee(_RBX) )
    {
      __asm
      {
        vmovss  xmm0, dword ptr [rbx+2354h]
        vaddss  xmm1, xmm0, dword ptr [r14+1E8h]
        vmovss  dword ptr [rsi+8], xmm1
      }
    }
  }
}

/*
==============
Bot_AllowedToMeleeEnemy
==============
*/
_BOOL8 Bot_AllowedToMeleeEnemy(const bot_data_t *botData)
{
  const gentity_s *v2; 
  _BOOL8 result; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8172, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8173, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  result = 0;
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
  {
    v2 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
    if ( v2 )
    {
      if ( !Bot_IsHardwareEnt(v2) && !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 0x26u) && !Bot_IsUsingTurret(botData) )
        return 1;
    }
  }
  return result;
}

/*
==============
Bot_AnimscriptToLinkMask
==============
*/
__int64 Bot_AnimscriptToLinkMask(const char *animscript)
{
  const char *v1; 
  __int64 v3; 
  const char *v4; 
  char v5; 
  __int64 v6; 
  char v7; 
  int v9; 
  int v10; 
  int v11; 
  int v12; 

  v1 = g_AILinkUsageNames_0[11];
  v3 = 0x7FFFFFFFi64;
  if ( !animscript && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 181, ASSERT_TYPE_SANITY, "( s0 )", (const char *)&queryFormat, "s0") )
    __debugbreak();
  if ( !v1 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 182, ASSERT_TYPE_SANITY, "( s1 )", (const char *)&queryFormat, "s1") )
    __debugbreak();
  v4 = (const char *)(animscript - v1);
  while ( 1 )
  {
    v5 = v1[(_QWORD)v4];
    v6 = v3;
    v7 = *v1++;
    --v3;
    if ( !v6 )
      return 2048i64;
    if ( v5 != v7 )
      break;
    if ( !v5 )
      return 2048i64;
  }
  v9 = Bot_AnimscriptToNegotiationType(animscript) - 1;
  if ( !v9 )
    return 512i64;
  v10 = v9 - 1;
  if ( !v10 )
    return 1024i64;
  v11 = v10 - 2;
  if ( !v11 )
    return 1024i64;
  v12 = v11 - 4;
  if ( !v12 )
    return 1024i64;
  if ( v12 == 8 )
    return 256i64;
  return 0i64;
}

/*
==============
Bot_AnimscriptToNegotiationType
==============
*/
__int64 Bot_AnimscriptToNegotiationType(const char *animscript)
{
  const char *v2; 
  const char *v3; 
  unsigned int v4; 
  unsigned int v5; 
  const char **v6; 
  unsigned int v7; 
  const char **v8; 
  int v9; 
  const char **v10; 
  int v11; 
  const char **v12; 
  char v13; 
  const char *v14; 
  char v16; 
  char v17; 

  v2 = NULL;
  v3 = animscript;
  v4 = 0;
  if ( !animscript )
    return 16i64;
  v5 = 0;
  v6 = LADDER_TYPES;
  do
  {
    if ( v5 >= 2 )
      break;
    if ( strstr_0(v3, *v6) )
      v4 = 1;
    ++v5;
    ++v6;
  }
  while ( !v4 );
  v7 = 0;
  if ( !v4 )
  {
    v8 = JUMP_TYPES;
    do
    {
      if ( v7 >= 3 )
        break;
      if ( strstr_0(v3, *v8) )
        v4 = 2;
      ++v7;
      ++v8;
    }
    while ( !v4 );
  }
  v9 = 0;
  if ( !v4 )
  {
    v10 = JUMP_ACROSS_TYPES;
    do
    {
      if ( v9 )
        break;
      if ( strstr_0(v3, *v10) )
        v4 = 4;
      v9 = 1;
      ++v10;
    }
    while ( !v4 );
  }
  v11 = 0;
  if ( !v4 )
  {
    v12 = JUMP_STANDING_TYPES;
    do
    {
      if ( v11 )
        break;
      if ( strstr_0(v3, *v12) )
        v4 = 8;
      v11 = 1;
      ++v12;
    }
    while ( !v4 );
  }
  if ( (v4 & 2) != 0 )
  {
    v13 = *v3;
    if ( *v3 )
    {
      do
      {
        v14 = ++v3;
        if ( v13 != 95 )
          v14 = v2;
        v13 = *v3;
        v2 = v14;
      }
      while ( *v3 );
      if ( v14 )
      {
        *(double *)&_XMM0 = atof(v14);
        __asm
        {
          vcvtsd2ss xmm1, xmm0, xmm0
          vcomiss xmm1, cs:__real@41900000
        }
        if ( v16 | v17 )
          return 16i64;
      }
    }
  }
  if ( !v4 )
    return 16;
  return v4;
}

/*
==============
Bot_ApplyKickAngles
==============
*/
void Bot_ApplyKickAngles(bot_data_t *botData, usercmd_s *cmd)
{
  playerState_s *playerState; 
  int frameDuration; 
  GWeaponMap *Instance; 
  char *v17; 
  char *v18; 
  char *v19; 
  base_vec3_t<int> *p_angles; 
  unsigned int v26; 
  bool v27; 
  int v43; 
  vec3_t *inOutRawKickAngles; 
  vec3_t *outKickAngles; 
  char v58; 
  void *retaddr; 
  bool inOutKickNeedsToCrossCenter; 

  _RAX = &retaddr;
  __asm
  {
    vmovaps xmmword ptr [rax-38h], xmm6
    vmovaps xmmword ptr [rax-48h], xmm7
    vmovaps xmmword ptr [rax-58h], xmm8
    vmovaps xmmword ptr [rax-68h], xmm9
    vmovaps xmmword ptr [rax-78h], xmm10
    vmovaps [rsp+0E8h+var_88], xmm11
    vmovaps [rsp+0E8h+var_98], xmm12
    vmovaps [rsp+0E8h+var_A8], xmm13
  }
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11529, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11530, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11533, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  inOutKickNeedsToCrossCenter = 0;
  if ( !level.frameDuration && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_level_locals.h", 349, ASSERT_TYPE_ASSERT, "(level.frameDuration)", "%s\n\tAccessing frame duration before it's been set", "level.frameDuration") )
    __debugbreak();
  frameDuration = level.frameDuration;
  Instance = GWeaponMap::GetInstance();
  v17 = (char *)&botData->scriptedAgentInfo + 28068;
  v18 = (char *)&botData->scriptedAgentInfo + 28080;
  v19 = (char *)&botData->scriptedAgentInfo + 28056;
  BG_KickAngles(Instance, playerState, frameDuration, &botData->botInfo.kickTimeRemaining, &botData->botInfo.kickAVel, &botData->botInfo.rawKickAngles, &botData->botInfo.kickAngles, &inOutKickNeedsToCrossCenter);
  __asm
  {
    vmovss  xmm9, cs:__real@43340000
    vmovss  xmm10, cs:__real@3b360b61
    vmovss  xmm11, cs:__real@3f000000
    vmovss  xmm12, cs:__real@3f800000
    vmovss  xmm13, cs:__real@43b40000
  }
  p_angles = &cmd->angles;
  v26 = 0;
  v27 = 1;
  __asm { vxorps  xmm8, xmm8, xmm8 }
  do
  {
    if ( !v27 )
    {
      LODWORD(outKickAngles) = 3;
      LODWORD(inOutRawKickAngles) = v26;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\com_vec_types.h", 39, ASSERT_TYPE_SANITY, "(unsigned)( idx ) < (unsigned)( ( sizeof( *array_counter( v ) ) + 0 ) )", "idx doesn't index ARRAY_COUNT( v )\n\t%i not in [0, %i)", inOutRawKickAngles, outKickAngles) )
        __debugbreak();
    }
    __asm { vmovaps xmm1, xmm9; maxAbsValueSize }
    *(double *)&_XMM0 = MSG_UnpackSignedFloat(p_angles->v[0], *(float *)&_XMM1, 0x14u);
    __asm
    {
      vmulss  xmm6, xmm0, xmm10
      vaddss  xmm2, xmm6, xmm11
      vxorps  xmm1, xmm1, xmm1
      vmovss  xmm0, xmm1, xmm2
      vroundss xmm7, xmm8, xmm0, 1
    }
    if ( v26 >= 3 )
    {
      LODWORD(outKickAngles) = 3;
      LODWORD(inOutRawKickAngles) = v26;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_vec_types.h", 53, ASSERT_TYPE_SANITY, "(unsigned)( idx ) < (unsigned)( ( sizeof( *array_counter( v ) ) + 0 ) )", "idx doesn't index ARRAY_COUNT( v )\n\t%i not in [0, %i)", inOutRawKickAngles, outKickAngles) )
        __debugbreak();
    }
    __asm
    {
      vmulss  xmm3, xmm10, dword ptr [rdi+rbp]
      vsubss  xmm1, xmm6, xmm7
      vmulss  xmm2, xmm1, xmm12
      vaddss  xmm4, xmm3, xmm2
      vaddss  xmm3, xmm4, xmm11
      vroundss xmm2, xmm8, xmm3, 1
      vsubss  xmm0, xmm4, xmm2
      vmulss  xmm0, xmm0, xmm13; value
      vmovaps xmm1, xmm9; maxAbsValueSize
    }
    v43 = MSG_PackSignedFloat(*(float *)&_XMM0, *(float *)&_XMM1, 0x14u);
    if ( v26 >= 3 )
    {
      LODWORD(outKickAngles) = 3;
      LODWORD(inOutRawKickAngles) = v26;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\com_vec_types.h", 39, ASSERT_TYPE_SANITY, "(unsigned)( idx ) < (unsigned)( ( sizeof( *array_counter( v ) ) + 0 ) )", "idx doesn't index ARRAY_COUNT( v )\n\t%i not in [0, %i)", inOutRawKickAngles, outKickAngles) )
        __debugbreak();
    }
    p_angles->v[0] = v43;
    ++v26;
    p_angles = (base_vec3_t<int> *)((char *)p_angles + 4);
    v27 = v26 < 3;
  }
  while ( (int)v26 < 3 );
  _R11 = &v58;
  __asm
  {
    vmovaps xmm6, xmmword ptr [r11-10h]
    vmovaps xmm7, xmmword ptr [r11-20h]
    vmovaps xmm8, xmmword ptr [r11-30h]
    vmovaps xmm9, xmmword ptr [r11-40h]
    vmovaps xmm10, xmmword ptr [r11-50h]
    vmovaps xmm11, xmmword ptr [r11-60h]
    vmovaps xmm12, xmmword ptr [r11-70h]
    vmovaps xmm13, xmmword ptr [r11-80h]
  }
  *(_QWORD *)v17 = 0i64;
  *((_DWORD *)v17 + 2) = 0;
  *(_QWORD *)v18 = 0i64;
  *((_DWORD *)v18 + 2) = 0;
  *(_QWORD *)v19 = 0i64;
  *((_DWORD *)v19 + 2) = 0;
}

/*
==============
Bot_ApplyTwitchVectors
==============
*/
void Bot_ApplyTwitchVectors(bot_info_t *botInfo, vec3_t *position, vec3_t *angles)
{
  _RBX = angles;
  _RSI = position;
  _RDI = botInfo;
  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7447, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  Bot_UpdateTwitchVectors(_RDI, _RSI, _RBX);
  if ( _RSI )
  {
    __asm
    {
      vmovss  xmm0, dword ptr [rdi+23CCh]
      vaddss  xmm1, xmm0, dword ptr [rsi]
      vmovss  dword ptr [rsi], xmm1
      vmovss  xmm0, dword ptr [rdi+23D0h]
      vaddss  xmm1, xmm0, dword ptr [rsi+4]
      vmovss  dword ptr [rsi+4], xmm1
    }
  }
  if ( _RBX )
  {
    __asm
    {
      vmovss  xmm0, dword ptr [rdi+23D4h]
      vaddss  xmm1, xmm0, dword ptr [rbx]
      vmovss  dword ptr [rbx], xmm1
      vmovss  xmm0, dword ptr [rdi+23D8h]
      vaddss  xmm1, xmm0, dword ptr [rbx+4]
      vmovss  dword ptr [rbx+4], xmm1
    }
  }
}

/*
==============
Bot_AtScriptGoal
==============
*/
_BOOL8 Bot_AtScriptGoal(const bot_data_t *botData)
{
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23953, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  _RDI = &botData->8;
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23954, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( botData->botInfo.scriptGoal.type == BOT_SCR_GOAL_NONE )
    return 0i64;
  if ( botData == (const bot_data_t *)-8i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13725, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  if ( !Bot_NavPathExists(&botData->botInfo) )
    return 0i64;
  if ( !Bot_ActiveGoalIsScriptGoal(botData) )
    return 0i64;
  __asm { vmovss  xmm1, dword ptr [rdi+204h]; goalRadius }
  return Bot_IsAtPathEnd(botData, *(float *)&_XMM1) != 0;
}

/*
==============
Bot_AtScriptGoalNode
==============
*/
_BOOL8 Bot_AtScriptGoalNode(const bot_data_t *botData)
{
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23979, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  return Bot_AtScriptGoal(botData) && botData->botInfo.scriptGoal.node;
}

/*
==============
Bot_AtScriptGoalYaw
==============
*/

__int64 __fastcall Bot_AtScriptGoalYaw(const bot_data_t *botData, double _XMM1_8)
{
  vec3_t angles; 
  vec3_t v17; 
  tmat33_t<vec3_t> axis; 
  tmat33_t<vec3_t> v19; 

  _RBX = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23989, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !_RBX->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23990, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( (LOBYTE(_RBX->scriptedAgentInfo.blackboard.m_ShootParams.m_Pos.v[0]) & 4) == 0 )
    return 1i64;
  __asm { vmovss  xmm0, dword ptr [rbx+228h] }
  _RAX = _RBX->botInfo.ent;
  __asm
  {
    vxorps  xmm1, xmm1, xmm1
    vmovss  dword ptr [rsp+0B8h+angles], xmm1
    vmovss  dword ptr [rsp+0B8h+angles+4], xmm0
    vmovss  dword ptr [rsp+0B8h+angles+8], xmm1
    vmovss  xmm0, dword ptr [rax+140h]
    vmovss  dword ptr [rsp+0B8h+var_78+4], xmm0
    vmovss  dword ptr [rsp+0B8h+var_78], xmm1
    vmovss  dword ptr [rsp+0B8h+var_78+8], xmm1
  }
  AnglesToAxis(&angles, &axis);
  AnglesToAxis(&v17, &v19);
  __asm
  {
    vmovss  xmm0, dword ptr [rsp+0B8h+axis]
    vmovss  xmm1, dword ptr [rsp+0B8h+axis+4]
    vmulss  xmm2, xmm1, dword ptr [rsp+0B8h+var_40+4]
    vmulss  xmm3, xmm0, dword ptr [rsp+0B8h+var_40]
    vmovss  xmm0, dword ptr [rsp+0B8h+axis+8]
    vmulss  xmm1, xmm0, dword ptr [rsp+0B8h+var_40+8]
    vaddss  xmm4, xmm3, xmm2
    vaddss  xmm2, xmm4, xmm1
    vcomiss xmm2, cs:__real@3f733333
  }
  return 0i64;
}

/*
==============
Bot_AvoidGrenade
==============
*/

void __fastcall Bot_AvoidGrenade(const gentity_s *self, gentity_s *originator, const vec3_t *vOrigin, double safeDist, int duration)
{
  gentity_s *v10; 
  gentity_s *GEntity; 
  __int16 otherEntityNum; 
  const sentient_s *v13; 
  sentient_s *sentient; 
  int v15; 
  BOOL v16; 
  sentient_s *v17; 
  const bitarray<224> *TeamFlag; 
  int usageFlags; 
  nav_space_s *DefaultSpace; 
  float fmt; 
  __int64 entNum; 
  bitarray<224> result; 

  __asm
  {
    vmovaps [rsp+0C8h+var_48], xmm6
    vmovaps xmm6, xmm3
  }
  if ( !self && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6330, ASSERT_TYPE_ASSERT, "( self )", (const char *)&queryFormat, "self") )
    __debugbreak();
  if ( !originator && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6331, ASSERT_TYPE_ASSERT, "( originator )", (const char *)&queryFormat, "originator") )
    __debugbreak();
  v10 = originator;
  if ( EntHandle::isDefined(&originator->r.ownerNum) )
  {
    GEntity = EntHandle::ent(&originator->r.ownerNum);
LABEL_17:
    v10 = GEntity;
    goto LABEL_18;
  }
  otherEntityNum = originator->s.otherEntityNum;
  if ( otherEntityNum != 2047 )
  {
    if ( (unsigned __int16)otherEntityNum >= 0x800u )
    {
      LODWORD(entNum) = otherEntityNum;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6345, ASSERT_TYPE_ASSERT, "(unsigned)( originator->s.otherEntityNum ) < (unsigned)( ( 2048 ) )", "originator->s.otherEntityNum doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", entNum, 2048) )
        __debugbreak();
    }
    if ( originator->s.otherEntityNum == 2047 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6346, ASSERT_TYPE_ASSERT, "( originator->s.otherEntityNum != ENTITYNUM_NONE )", (const char *)&queryFormat, "originator->s.otherEntityNum != ENTITYNUM_NONE") )
      __debugbreak();
    GEntity = G_GetGEntity(originator->s.otherEntityNum);
    goto LABEL_17;
  }
LABEL_18:
  if ( v10 && (v13 = v10->sentient) != NULL )
  {
    sentient = self->sentient;
    v15 = 0;
    if ( v13 == sentient && !originator->sentient && level.time - originator->birthTime > 1000 )
      v15 = 1;
    v16 = AI_IsAlliedSentient(sentient, v13) == 0;
  }
  else
  {
    v16 = 1;
    v15 = 1;
  }
  v17 = self->sentient;
  if ( v17 && (v15 || v16) )
  {
    TeamFlag = Com_Teams_GetTeamFlag(&result, v17->eTeam);
    usageFlags = Nav_TranslateTeamFlagsToRepulsorUsageFlags(TeamFlag);
    DefaultSpace = Nav_GetDefaultSpace();
    __asm { vmovss  dword ptr [rsp+0C8h+fmt], xmm6 }
    Nav_CreateRepulsor(DefaultSpace, vOrigin, &vec3_origin, duration, fmt, 2047, usageFlags, (const scr_string_t)0, 1);
  }
  __asm { vmovaps xmm6, [rsp+0C8h+var_48] }
}

/*
==============
Bot_BadPath
==============
*/
void Bot_BadPath(gentity_s *ent)
{
  bot_data_t *EntityData; 
  int time; 
  int debugPathGoalCurrent; 
  char v16; 
  int NextDebugGoal; 
  vec3_t goal; 

  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7753, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  EntityData = Bot_GetEntityData(ent);
  if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7758, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  Bot_PathClear(&EntityData->botInfo);
  GScr_Notify(ent, scr_const.bad_path, 0);
  time = level.time;
  EntityData->botDebugData.flags |= 1u;
  EntityData->botInfo.lastBadPath = time;
  if ( Bot_GetCurrentNumDebugGoals() > 0 )
  {
    debugPathGoalCurrent = EntityData->botDebugData.debugPathGoalCurrent;
    if ( debugPathGoalCurrent )
    {
      Bot_DebugGoal(debugPathGoalCurrent, &goal);
      __asm
      {
        vmovss  xmm0, dword ptr [rsp+58h+goal]
        vsubss  xmm3, xmm0, dword ptr [rbx+240h]
        vmovss  xmm1, dword ptr [rsp+58h+goal+4]
        vsubss  xmm2, xmm1, dword ptr [rbx+244h]
        vmovss  xmm0, dword ptr [rsp+58h+goal+8]
        vsubss  xmm4, xmm0, dword ptr [rbx+248h]
        vmulss  xmm2, xmm2, xmm2
        vmulss  xmm1, xmm3, xmm3
        vmulss  xmm0, xmm4, xmm4
        vaddss  xmm3, xmm2, xmm1
        vaddss  xmm2, xmm3, xmm0
        vcomiss xmm2, cs:__real@40a00000
      }
      if ( v16 )
      {
        NextDebugGoal = Bot_GetNextDebugGoal(EntityData);
        EntityData->botInfo.flags &= ~0x100000u;
        EntityData->botDebugData.debugPathGoalCurrent = NextDebugGoal;
      }
    }
  }
}

/*
==============
Bot_BadPlace_FindSafeNodeOutsideBadPlace
==============
*/

__int64 __fastcall Bot_BadPlace_FindSafeNodeOutsideBadPlace(bot_info_t *botInfo, pathsort_s *potentialNodes, double maxFleeDist)
{
  bool v10; 
  bool v11; 
  sentient_s *sentient; 
  int v14; 
  unsigned __int64 eTeam; 
  gentity_s *ent; 
  AIBotInterface *m_pAI; 
  int v22; 
  __int64 v23; 
  pathsort_s *p_nodes; 
  pathnode_t *node; 
  gentity_s *v28; 
  unsigned __int16 v29; 
  int v30; 
  int v31; 
  char v32; 
  char v33; 
  int v46; 
  int v49; 
  int AdjacentIndoorZones; 
  pathsort_s *v55; 
  bitarray<224> v57; 
  AIBotWrapper v58; 
  __int128 v59; 
  __int64 v60; 
  unsigned int v61; 
  vec3_t pos; 
  pathsort_s nodes; 
  unsigned __int8 indoorZonesMask[32]; 

  _RSI = potentialNodes;
  __asm
  {
    vmovaps [rsp+1190h+var_40], xmm6
    vmovaps [rsp+1190h+var_50], xmm7
    vmovaps xmm6, xmm2
  }
  if ( !Com_GameMode_SupportsFeature(WEAPON_RAISING_ALTSWITCH) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10823, ASSERT_TYPE_ASSERT, "(G_Bot_UseGlobalBadPlace())", "%s\n\tThis function uses global bad places, refactor if turned off", "G_Bot_UseGlobalBadPlace()") )
    __debugbreak();
  if ( !Com_GameMode_SupportsFeature(WEAPON_RAISING_ALTSWITCH) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10824, ASSERT_TYPE_ASSERT, "(G_Bot_UseBadPlaceRestrictions())", "%s\n\tThis function uses bad place restrictions, refactor if turned off", "G_Bot_UseBadPlaceRestrictions()") )
    __debugbreak();
  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10825, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  if ( !botInfo->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10826, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  if ( !botInfo->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10827, ASSERT_TYPE_ASSERT, "( botInfo->sentient )", (const char *)&queryFormat, "botInfo->sentient") )
    __debugbreak();
  v10 = _RSI == NULL;
  if ( !_RSI )
  {
    v11 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10828, ASSERT_TYPE_ASSERT, "( potentialNodes )", (const char *)&queryFormat, "potentialNodes");
    v10 = !v11;
    if ( v11 )
      __debugbreak();
  }
  __asm
  {
    vxorps  xmm0, xmm0, xmm0
    vcomiss xmm6, xmm0
  }
  if ( v10 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10829, ASSERT_TYPE_ASSERT, "( maxFleeDist > 0.0f )", (const char *)&queryFormat, "maxFleeDist > 0.0f") )
    __debugbreak();
  sentient = botInfo->sentient;
  v14 = 0;
  v59 = 0ui64;
  v60 = 0i64;
  eTeam = (unsigned int)sentient->eTeam;
  v61 = 0;
  if ( (unsigned int)eTeam >= 0xE0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\bitarray.h", 263, ASSERT_TYPE_ASSERT, "( pos ) < ( impl()->getBitCount() )", "%s < %s\n\t%u, %u", "pos", "impl()->getBitCount()", eTeam, 224) )
    __debugbreak();
  *((_DWORD *)&v59 + (eTeam >> 5)) |= 0x80000000 >> (eTeam & 0x1F);
  AICommonInterface::AICommonInterface(&v58.m_botInterface);
  v58.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v58.m_botAgentInterface);
  ent = botInfo->ent;
  v58.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v58.m_pAI = NULL;
  AIBotWrapper::Setup(&v58, ent);
  m_pAI = v58.m_pAI;
  if ( !v58.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10837, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  AdjacentIndoorZones = 0;
  __asm { vmovss  xmm7, cs:__real@3f000000 }
  if ( AICommonInterface::IsInGlobalBadplace(m_pAI, 1u) )
  {
    __asm { vmovaps xmm1, xmm7; indoorPercent }
    AdjacentIndoorZones = Bot_GetAdjacentIndoorZones(botInfo, *(float *)&_XMM1, indoorZonesMask, 32);
  }
  __asm
  {
    vmovss  xmm3, cs:__real@42a00000; maxHeight
    vmovaps xmm2, xmm6; maxDist
  }
  v22 = Path_NodesInCylinder(&botInfo->ent->r.currentOrigin, NULL, *(float *)&_XMM2, *(float *)&_XMM3, &nodes, 256, -510656514);
  v23 = v22;
  if ( v22 > 0 )
  {
    __asm
    {
      vmovsd  xmm6, [rbp+1090h+var_10B8]
      vmovaps [rsp+1190h+var_60], xmm8
    }
    p_nodes = &nodes;
    __asm { vmovups xmm8, [rbp+1090h+var_10C8] }
    v55 = _RSI;
    do
    {
      node = p_nodes->node;
      v57.array[6] = v61;
      v28 = botInfo->ent;
      __asm
      {
        vmovups [rsp+1190h+var_1120], xmm8
        vmovsd  [rbp+1090h+var_1110], xmm6
      }
      if ( !AICommonInterface::BadPlace_IsNodeInAnyBadPlace(m_pAI, node, v28->clipmask, &v57) && Path_NodeUnclaimedByOther(node, botInfo->sentient) )
      {
        v29 = Path_ConvertNodeToIndex(node);
        if ( !Path_IsNodeDisconnected(v29) && botInfo->pNavigator->IsNodeReachable(botInfo->pNavigator, node) )
        {
          if ( !AICommonInterface::IsInGlobalBadplace(m_pAI, 1u) )
            goto LABEL_43;
          v30 = Path_NodeZoneFromNode(node);
          v31 = v30;
          if ( v30 == 255 )
            goto LABEL_43;
          *(double *)&_XMM0 = SV_BotZoneGetIndoorPercent(v30);
          __asm { vcomiss xmm0, xmm7 }
          if ( !v32 )
          {
            if ( AdjacentIndoorZones <= 0 )
              goto LABEL_43;
            v33 = v31 & 7;
            if ( v31 < 0 )
            {
              v31 += 7;
              v33 -= 8;
            }
            if ( (indoorZonesMask[v31 >> 3] & (unsigned __int8)(1 << v33)) == 0 )
            {
LABEL_43:
              pathnode_t::GetPos(node, &pos);
              ++v14;
              __asm
              {
                vmovss  xmm0, dword ptr [rbp+1090h+pos]
                vmovss  xmm1, dword ptr [rbp+1090h+pos+4]
                vsubss  xmm3, xmm0, dword ptr [rax+130h]
                vsubss  xmm2, xmm1, dword ptr [rax+134h]
                vmovss  xmm0, dword ptr [rbp+1090h+pos+8]
                vsubss  xmm4, xmm0, dword ptr [rax+138h]
              }
              _RAX = v55;
              __asm
              {
                vmulss  xmm2, xmm2, xmm2
                vmulss  xmm1, xmm3, xmm3
                vmulss  xmm0, xmm4, xmm4
                vaddss  xmm3, xmm2, xmm1
                vaddss  xmm2, xmm3, xmm0
                vmovss  dword ptr [rax+8], xmm2
              }
              v55->node = node;
              ++v55;
            }
          }
        }
      }
      ++p_nodes;
      --v23;
    }
    while ( v23 );
    _RSI = potentialNodes;
    __asm { vmovaps xmm8, [rsp+1190h+var_60] }
  }
  v46 = AICommonInterface::IsInGlobalBadplace(m_pAI, 1u);
  __asm
  {
    vmovaps xmm7, [rsp+1190h+var_50]
    vmovaps xmm6, [rsp+1190h+var_40]
  }
  if ( v46 && v14 > 0 && AdjacentIndoorZones > 0 )
  {
    v49 = G_rand();
    __asm { vmovups xmm0, xmmword ptr [rsi] }
    _RCX = 2i64 * (v49 % v14);
    __asm
    {
      vmovups xmm1, xmmword ptr [rsi+rcx*8]
      vmovups xmmword ptr [rsi+rcx*8], xmm0
      vmovups xmmword ptr [rsi], xmm1
    }
  }
  else if ( v14 > 1 )
  {
    std::_Sort_unchecked<pathsort_s *,bool (*)(pathsort_s const &,pathsort_s const &)>(_RSI, &_RSI[v14], v14, Path_CompareNodesIncreasing);
  }
  return (unsigned int)v14;
}

/*
==============
Bot_BadPlace_StartEscape
==============
*/
void Bot_BadPlace_StartEscape(bot_info_t *botInfo, pathnode_t *node)
{
  gentity_s *ent; 
  AIBotInterface *m_pAI; 
  AIBotWrapper v6; 

  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10794, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  if ( !botInfo->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10795, ASSERT_TYPE_ASSERT, "( botInfo->sentient )", (const char *)&queryFormat, "botInfo->sentient") )
    __debugbreak();
  if ( !node && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10796, ASSERT_TYPE_ASSERT, "( node )", (const char *)&queryFormat, "node") )
    __debugbreak();
  Bot_ForceClaimNode(botInfo, node);
  botInfo->flags |= 0x800u;
  AICommonInterface::AICommonInterface(&v6.m_botInterface);
  v6.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v6.m_botAgentInterface);
  ent = botInfo->ent;
  v6.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v6.m_pAI = NULL;
  AIBotWrapper::Setup(&v6, ent);
  m_pAI = v6.m_pAI;
  if ( !v6.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10802, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  AICommonInterface::BadPlace_StartEscape(m_pAI, node);
}

/*
==============
Bot_Badplace_PathEscape
==============
*/
__int64 Bot_Badplace_PathEscape(bot_data_t *botData)
{
  signed __int64 v1; 
  void *v5; 
  gentity_s *ent; 
  __int64 v8; 
  AIBotInterface *m_pAI; 
  char v11; 
  int SafeNodeOutsideBadPlace; 
  __int64 v16; 
  pathsort_s *p_potentialNodes; 
  pathnode_t *node; 
  __int64 result; 
  AIBotWrapper v22; 
  vec3_t pos; 
  pathsort_s potentialNodes; 

  v5 = alloca(v1);
  __asm { vmovaps [rsp+10D8h+var_48], xmm7 }
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10971, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  AICommonInterface::AICommonInterface(&v22.m_botInterface);
  v22.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v22.m_botAgentInterface);
  ent = botData->botInfo.ent;
  v8 = 0i64;
  v22.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v22.m_pAI = NULL;
  AIBotWrapper::Setup(&v22, ent);
  m_pAI = v22.m_pAI;
  if ( !v22.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10981, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  *(double *)&_XMM0 = AI_BadPlace_GetMaximumFleeRadius();
  __asm
  {
    vxorps  xmm7, xmm7, xmm7
    vcomiss xmm0, xmm7
  }
  if ( v11 )
  {
    *(double *)&_XMM0 = Nav_GetLargestRepulsorBadplaceRadius();
    __asm { vcomiss xmm0, xmm7 }
    if ( v11 )
      goto LABEL_16;
  }
  __asm
  {
    vmovaps [rsp+10D8h+var_38], xmm6
    vaddss  xmm6, xmm0, cs:__real@43800000
  }
  AICommonInterface::IsInGlobalBadplace(m_pAI, 0);
  __asm { vmovaps xmm2, xmm6; maxFleeDist }
  SafeNodeOutsideBadPlace = Bot_BadPlace_FindSafeNodeOutsideBadPlace(&botData->botInfo, &potentialNodes, *(double *)&_XMM2);
  __asm { vmovaps xmm6, [rsp+10D8h+var_38] }
  v16 = SafeNodeOutsideBadPlace;
  if ( SafeNodeOutsideBadPlace <= 0 )
  {
LABEL_16:
    result = 0i64;
  }
  else
  {
    p_potentialNodes = &potentialNodes;
    while ( 1 )
    {
      node = p_potentialNodes->node;
      if ( !p_potentialNodes->node && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11029, ASSERT_TYPE_ASSERT, "( safeNode )", (const char *)&queryFormat, "safeNode") )
        __debugbreak();
      pathnode_t::GetPos(node, &pos);
      __asm { vmovaps xmm2, xmm7; goalRadius }
      if ( Bot_GetPathToGoalInternal(botData, &pos, *(float *)&_XMM2, "badplace away") )
        break;
      ++v8;
      ++p_potentialNodes;
      if ( v8 >= v16 )
        goto LABEL_16;
    }
    Bot_BadPlace_StartEscape(&botData->botInfo, node);
    result = 1i64;
  }
  __asm { vmovaps xmm7, [rsp+10D8h+var_48] }
  return result;
}

/*
==============
Bot_Badplace_Update
==============
*/

__int64 __fastcall Bot_Badplace_Update(bot_data_t *botData, double _XMM1_8)
{
  gentity_s *ent; 
  int v5; 
  AIBotInterface *m_pAI; 
  int v7; 
  int v8; 
  bool v9; 
  BOOL v10; 
  int v12; 
  int v13; 
  AIBotWrapper v14; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11071, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !Com_GameMode_SupportsFeature(WEAPON_RAISING_ALTSWITCH) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11072, ASSERT_TYPE_ASSERT, "(G_Bot_UseGlobalBadPlace())", "%s\n\tThis function uses global bad places, refactor if turned off", "G_Bot_UseGlobalBadPlace()") )
    __debugbreak();
  if ( !Com_GameMode_SupportsFeature(WEAPON_RAISING_ALTSWITCH) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11073, ASSERT_TYPE_ASSERT, "(G_Bot_UseBadPlaceRestrictions())", "%s\n\tThis function uses bad place restrictions, refactor if turned off", "G_Bot_UseBadPlaceRestrictions()") )
    __debugbreak();
  if ( Bot_ShouldDelayPathGen(botData) )
    return 0i64;
  AICommonInterface::AICommonInterface(&v14.m_botInterface);
  v14.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v14.m_botAgentInterface);
  ent = botData->botInfo.ent;
  v5 = 0;
  v14.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v14.m_pAI = NULL;
  AIBotWrapper::Setup(&v14, ent);
  m_pAI = v14.m_pAI;
  if ( !v14.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11087, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  v7 = AICommonInterface::BadPlaceExists(m_pAI, 1, 1u);
  v8 = v7;
  if ( botData->botInfo.navigation.isInBadPlace || v7 )
  {
    v9 = AICommonInterface::IsInAnyBadPlace(m_pAI);
    v10 = v9;
    if ( v9 || v8 )
      v5 = 1;
    __asm { vxorps  xmm1, xmm1, xmm1; goalRadius }
    v12 = Bot_PathExists(&botData->botInfo);
    v13 = Bot_IsAtPathEnd(botData, *(float *)&_XMM1);
    if ( v8 )
    {
      if ( v12 && ((botData->botInfo.flags & 0x800) != 0 || v13 && !v10) )
        return 1i64;
    }
    if ( v5 && Bot_Badplace_PathEscape(botData) )
      return 1i64;
  }
  AICommonInterface::MarkNotInBadPlace(m_pAI);
  return 0i64;
}

/*
==============
Bot_CalculateLauncherCombatChance
==============
*/
void Bot_CalculateLauncherCombatChance(bot_data_t *botData)
{
  __asm { vmovaps [rsp+48h+var_18], xmm6 }
  _RDI = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4555, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  _EBX = _RDI->botInfo.scriptFlags;
  __asm { vmovss  xmm6, dword ptr [rdi+8050h] }
  _RDI->botInfo.flags &= ~0x800000u;
  _EBX &= 0x80000u;
  *(double *)&_XMM0 = G_random();
  __asm { vaddss  xmm4, xmm6, cs:__real@3dcccccd }
  _EAX = 0;
  __asm
  {
    vmovd   xmm2, eax
    vmovd   xmm1, ebx
    vpcmpeqd xmm3, xmm1, xmm2
    vblendvps xmm2, xmm4, xmm6, xmm3
    vcomiss xmm0, xmm2
    vmovaps xmm6, [rsp+48h+var_18]
  }
}

/*
==============
Bot_CanAttack
==============
*/
_BOOL8 Bot_CanAttack(const bot_data_t *botData)
{
  const dvar_t *v2; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7521, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v2 = DVARBOOL_bot_DisableAttack;
  if ( !DVARBOOL_bot_DisableAttack && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 692, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DisableAttack") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v2);
  return !v2->current.enabled && (botData->botInfo.scriptFlags & 0x1000) == 0 && !GameModeFlagContainer<enum PWeaponFlagsCommon,enum PWeaponFlagsSP,enum PWeaponFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->weapCommon.weapFlags, ACTIVE, 0xAu);
}

/*
==============
Bot_CanMeleeReactEnemy
==============
*/
__int64 Bot_CanMeleeReactEnemy(bot_data_t *botData)
{
  gentity_s *v3; 
  const gentity_s *v4; 

  _RBX = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16459, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !_RBX->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16460, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
    __debugbreak();
  if ( SLOBYTE(_RBX->botMatchData.flags) >= 0 && !Bot_EnemyPreferMelee(_RBX) && Bot_Weap_HasWeaponWithNormalAmmo(_RBX) )
    return 0i64;
  if ( !EntHandle::isDefined(&_RBX->botInfo.sentient->targetEnt) )
    return 0i64;
  v3 = EntHandle::ent(&_RBX->botInfo.sentient->targetEnt);
  v4 = v3;
  if ( !v3 )
    return 0i64;
  if ( !v3->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16476, ASSERT_TYPE_ASSERT, "( enemy->sentient )", (const char *)&queryFormat, "enemy->sentient") )
    __debugbreak();
  if ( !Bot_RecentSeeSentient(_RBX, v4->sentient, 1000) || !Bot_EntityOnScreenForMelee(_RBX, v4) )
    return 0i64;
  if ( !Sentient_GetSentientInfo(_RBX->botInfo.sentient, v4->sentient) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16485, ASSERT_TYPE_ASSERT, "( pInfo )", (const char *)&queryFormat, "pInfo") )
    __debugbreak();
  __asm
  {
    vxorps  xmm0, xmm0, xmm0
    vcvtsi2ss xmm0, xmm0, eax
    vcomiss xmm0, dword ptr [rbx+7FD8h]
  }
  return 1i64;
}

/*
==============
Bot_CanMoveTo
==============
*/
_BOOL8 Bot_CanMoveTo(const bot_info_t *botInfo, const vec3_t *from, const vec3_t *to)
{
  AINavigator *pNavigator; 
  AINavLayer Layer; 
  bfx::PathSpec pathSpec; 

  __asm { vxorps  xmm0, xmm0, xmm0 }
  *(_QWORD *)&pathSpec.m_obstacleBlockageFlags = -1i64;
  *(_QWORD *)&pathSpec.m_areaPenaltyFlags = -1i64;
  pathSpec.m_obstacleMode = BLOCKED_IF_ANY_MATCH;
  __asm
  {
    vmovss  [rsp+0A8h+var_78.m_pathSharingPenalty], xmm0
    vmovss  [rsp+0A8h+var_78.m_maxPathSharingPenalty], xmm0
    vmovss  [rsp+0A8h+var_78.m_maxSearchDist], xmm0
  }
  pathSpec.m_usePathSharingPenalty = 0;
  bfx::PenaltyTable::PenaltyTable(&pathSpec.m_penaltyTable);
  pNavigator = botInfo->pNavigator;
  pathSpec.m_snapMode = SNAP_CLOSEST;
  Layer = Nav_GetLayer(pNavigator);
  return !Nav_Trace(botInfo->pNavigator->m_pSpace, from, to, Layer, &pathSpec);
}

/*
==============
Bot_CanReactEnemy
==============
*/
__int64 Bot_CanReactEnemy(const bot_data_t *botData)
{
  gentity_s *v3; 
  gentity_s *v4; 

  _RBX = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16404, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !_RBX->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16405, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
    __debugbreak();
  if ( !EntHandle::isDefined(&_RBX->botInfo.sentient->targetEnt) )
    return 0i64;
  v3 = EntHandle::ent(&_RBX->botInfo.sentient->targetEnt);
  v4 = v3;
  if ( !v3 )
    return 0i64;
  if ( !v3->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16412, ASSERT_TYPE_ASSERT, "( enemy->sentient )", (const char *)&queryFormat, "enemy->sentient") )
    __debugbreak();
  if ( (const bot_data_t *)((char *)_RBX + 60 * (v4->sentient - level.sentients)) == (const bot_data_t *)-11652i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16414, ASSERT_TYPE_ASSERT, "( botSentientInfo )", (const char *)&queryFormat, "botSentientInfo") )
    __debugbreak();
  __asm
  {
    vxorps  xmm0, xmm0, xmm0
    vcvtsi2ss xmm0, xmm0, eax
    vcomiss xmm0, dword ptr [rbx+7FD4h]
  }
  return 1i64;
}

/*
==============
Bot_CanSeeAndCanFireOnEnemy
==============
*/
_BOOL8 Bot_CanSeeAndCanFireOnEnemy(const bot_data_t *botData)
{
  gentity_s *v2; 
  gentity_s *v3; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16379, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16380, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
    __debugbreak();
  if ( !EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
    return 0i64;
  v2 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
  v3 = v2;
  if ( !v2 )
    return 0i64;
  if ( !v2->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16387, ASSERT_TYPE_ASSERT, "( enemyEnt->sentient )", (const char *)&queryFormat, "enemyEnt->sentient") )
    __debugbreak();
  return Bot_RecentSeeSentient(botData, v3->sentient, 1000) != 0;
}

/*
==============
Bot_CanSeeEnemy
==============
*/
int Bot_CanSeeEnemy(const bot_data_t *botData)
{
  gentity_s *v2; 
  gentity_s *v3; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16358, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16359, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
    __debugbreak();
  if ( !EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
    return 0;
  v2 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
  v3 = v2;
  if ( !v2 )
    return 0;
  if ( !v2->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16366, ASSERT_TYPE_ASSERT, "( enemyEnt->sentient )", (const char *)&queryFormat, "enemyEnt->sentient") )
    __debugbreak();
  return Bot_RecentSeeSentient(botData, v3->sentient, 1000);
}

/*
==============
Bot_CanSeeEnemyThroughWall
==============
*/
int Bot_CanSeeEnemyThroughWall(bot_data_t *botData)
{
  const gentity_s *v2; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6462, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) && (v2 = EntHandle::ent(&botData->botInfo.sentient->targetEnt)) != NULL )
    return Bot_CanSeeEntityThroughWall(botData, v2);
  else
    return 0;
}

/*
==============
Bot_CanSeeEntityOutline
==============
*/
_BOOL8 Bot_CanSeeEntityOutline(const bot_data_t *botData, const gentity_s *ent)
{
  const playerState_s *EntityPlayerStateConst; 
  signed __int64 v5; 
  unsigned int EntHudOutlineIndex; 
  const HudOutlineDef *HudOutlineDefFromPlayerState; 
  __int64 v9; 
  __int64 v10; 

  EntityPlayerStateConst = G_GetEntityPlayerStateConst(ent);
  if ( EntityPlayerStateConst && BG_HasPerk(&EntityPlayerStateConst->perks, 0x31u) )
    return 0i64;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6392, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6393, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState )", (const char *)&queryFormat, "botData->botInfo.playerState") )
    __debugbreak();
  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6394, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 196, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
    __debugbreak();
  v5 = ent - g_entities;
  if ( (unsigned int)v5 >= 0x800 )
  {
    LODWORD(v9) = ent - g_entities;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 199, ASSERT_TYPE_ASSERT, "(unsigned)( index ) < (unsigned)( ( 2048 ) )", "index doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v9, 2048) )
      __debugbreak();
  }
  v5 = (__int16)v5;
  if ( (unsigned int)(__int16)v5 >= 0x800 )
  {
    LODWORD(v10) = 2048;
    LODWORD(v9) = v5;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 207, ASSERT_TYPE_ASSERT, "(unsigned)( entityIndex ) < (unsigned)( ( 2048 ) )", "entityIndex doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v9, v10) )
      __debugbreak();
  }
  if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 208, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
    __debugbreak();
  if ( g_entities[v5].r.isInUse != g_entityIsInUse[v5] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 209, ASSERT_TYPE_ASSERT, "( g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex] )", (const char *)&queryFormat, "g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex]") )
    __debugbreak();
  if ( !g_entityIsInUse[v5] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6395, ASSERT_TYPE_ASSERT, "( G_IsEntityInUse( G_GetEntityIndex( ent ) ) )", (const char *)&queryFormat, "G_IsEntityInUse( G_GetEntityIndex( ent ) )") )
    __debugbreak();
  EntHudOutlineIndex = G_HudOutline_GetEntHudOutlineIndex(ent);
  HudOutlineDefFromPlayerState = BG_GetHudOutlineDefFromPlayerState(botData->botInfo.playerState, EntHudOutlineIndex);
  return G_HudOutline_IsEntHudOutlineEnabled(ent) && HudOutlineDefFromPlayerState && HudOutlineDefFromPlayerState->drawNonOccludedPixels && HudOutlineDefFromPlayerState->outlineColor;
}

/*
==============
Bot_CanSeeEntityThroughWall
==============
*/
_BOOL8 Bot_CanSeeEntityThroughWall(bot_data_t *botData, const gentity_s *entity)
{
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6442, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !entity && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6443, ASSERT_TYPE_ASSERT, "( entity )", (const char *)&queryFormat, "entity") )
    __debugbreak();
  return entity->sentient && Bot_EntityVisibleThroughWalls(botData, entity) && SV_BotEntInCurrentFOV(&botData->botInfo, entity);
}

/*
==============
Bot_CanSeeHardware
==============
*/
__int64 Bot_CanSeeHardware(ai_common_t *self, const gentity_s *ent)
{
  entityType_s eType; 
  signed __int64 v6; 
  __int64 v7; 
  unsigned int v9; 
  int v10; 

  _RBX = ent;
  if ( !self && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17890, ASSERT_TYPE_ASSERT, "( self )", (const char *)&queryFormat, "self") )
    __debugbreak();
  if ( !_RBX && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17891, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( !_RBX->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17892, ASSERT_TYPE_ASSERT, "( ent->sentient )", (const char *)&queryFormat, "ent->sentient") )
    __debugbreak();
  eType = _RBX->s.eType;
  if ( eType != ET_MISSILE && (eType != ET_SCRIPTMOVER || Sentient_IsAerial(_RBX->sentient)) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17893, ASSERT_TYPE_ASSERT, "( Bot_IsHardwareEnt( ent ) )", (const char *)&queryFormat, "Bot_IsHardwareEnt( ent )") )
    __debugbreak();
  _RSI = Bot_GetEntityData(self->ent);
  if ( !_RSI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17900, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v6 = 60 * (_RBX->sentient - level.sentients);
  v7 = (__int64)&_RSI->scriptedAgentInfo + v6 + 11644;
  if ( (bot_data_t *)((char *)_RSI + v6) == (bot_data_t *)-11652i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17904, ASSERT_TYPE_ASSERT, "( botSentientInfo )", (const char *)&queryFormat, "botSentientInfo") )
    __debugbreak();
  __asm
  {
    vmovss  xmm0, cs:__real@41400000
    vcomiss xmm0, dword ptr [rbx+10Ch]
    vcomiss xmm0, dword ptr [rbx+110h]
    vcomiss xmm0, dword ptr [rbx+114h]
  }
  v9 = *(_DWORD *)(v7 + 48);
  if ( (v9 & 1) == 0 )
  {
    v10 = *(_DWORD *)(v7 + 44);
    if ( !v10 || level.time - v10 > 1000 )
    {
      *(_DWORD *)(v7 + 44) = level.time;
      *(double *)&_XMM0 = G_random();
      __asm { vcomiss xmm0, dword ptr [rsi+8034h] }
      v9 = *(_DWORD *)(v7 + 48) & 0xFFFFFFFE;
      *(_DWORD *)(v7 + 48) = v9;
    }
  }
  return v9 & 1;
}

/*
==============
Bot_CanSeeNode
==============
*/
bool Bot_CanSeeNode(const bot_data_t *botData, const pathnode_t *node)
{
  const pathnode_t *v4; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6618, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6619, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
    __debugbreak();
  if ( !node && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6620, ASSERT_TYPE_ASSERT, "( node )", (const char *)&queryFormat, "node") )
    __debugbreak();
  v4 = Sentient_NearestNode(botData->botInfo.sentient);
  return v4 && Path_NodesVisibleNoPeek(v4, node);
}

/*
==============
Bot_CanSeePointViaNodes
==============
*/
_BOOL8 Bot_CanSeePointViaNodes(const bot_data_t *botData, const vec3_t *point)
{
  const pathnode_t *v4; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16524, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16525, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  v4 = Path_NearestNode(point, botData->botInfo.ent->clipmask, NULL);
  return v4 && Bot_CanSeeNode(botData, v4);
}

/*
==============
Bot_CanSeeSentient
==============
*/
int Bot_CanSeeSentient(const bot_data_t *botData, const sentient_s *otherSent)
{
  return Bot_RecentSeeSentient(botData, otherSent, 1000);
}

/*
==============
Bot_CanSeeSentientQuick
==============
*/
_BOOL8 Bot_CanSeeSentientQuick(const bot_data_t *botData, sentient_s *otherSent)
{
  const pathnode_t *v4; 
  const tacpoint_t *v6; 
  const tacpoint_t *v7; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16501, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !otherSent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16502, ASSERT_TYPE_ASSERT, "( otherSent )", (const char *)&queryFormat, "otherSent") )
    __debugbreak();
  if ( SV_BotRequirePathnodes(botData) )
  {
    v4 = Sentient_NearestNode(otherSent);
    if ( !v4 )
      return 0i64;
    return Bot_CanSeeNode(botData, v4);
  }
  else
  {
    v6 = Sentient_NearestTacPoint(otherSent);
    if ( !v6 )
      return 0i64;
    if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6633, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
      __debugbreak();
    if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6634, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
      __debugbreak();
    v7 = Sentient_NearestTacPoint(botData->botInfo.sentient);
    if ( !v7 )
      return 0i64;
    return TacVisGraph_HasVis(v7, v6);
  }
}

/*
==============
Bot_CanSetScriptGoalType
==============
*/
_BOOL8 Bot_CanSetScriptGoalType(bot_data_t *botData, bot_scr_goal_t newGoalType)
{
  if ( !botData )
  {
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22983, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
      __debugbreak();
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20741, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
      __debugbreak();
  }
  return newGoalType >= botData->botInfo.scriptGoal.type;
}

/*
==============
Bot_CanSlide
==============
*/
_BOOL8 Bot_CanSlide(const bot_data_t *botData)
{
  const playerState_s *playerState; 
  char v4; 

  _RBX = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6874, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  playerState = _RBX->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6878, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  if ( Bot_IsSliding(_RBX) )
    return 1i64;
  *(double *)&_XMM0 = G_random();
  __asm { vcomiss xmm0, dword ptr [rbx+7FE8h] }
  if ( !v4 )
    return 0i64;
  return Slide_CanSlideFromGroundConditionsMet(playerState, level.time) && Slide_CanSlideNowConditionsMet(playerState);
}

/*
==============
Bot_CanUseAnyTraversals
==============
*/
bool Bot_CanUseAnyTraversals(const bot_info_t *botInfo)
{
  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4363, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  if ( !botInfo->playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4364, ASSERT_TYPE_ASSERT, "( botInfo->playerState )", (const char *)&queryFormat, "botInfo->playerState") )
    __debugbreak();
  return (botInfo->scriptFlags & 0x8000) == 0;
}

/*
==============
Bot_CheckCloseFOV
==============
*/
float Bot_CheckCloseFOV(const gentity_s *botEnt, const gentity_s *otherEnt)
{
  _RBX = otherEnt;
  if ( !botEnt && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17932, ASSERT_TYPE_ASSERT, "( botEnt )", (const char *)&queryFormat, "botEnt") )
    __debugbreak();
  if ( _RBX )
  {
    __asm
    {
      vmovss  xmm0, dword ptr [rbx+130h]
      vsubss  xmm3, xmm0, dword ptr [rdi+130h]
      vmovss  xmm1, dword ptr [rbx+134h]
      vmovss  xmm0, dword ptr [rbx+138h]
      vsubss  xmm2, xmm1, dword ptr [rdi+134h]
      vsubss  xmm4, xmm0, dword ptr [rdi+138h]
      vmulss  xmm2, xmm2, xmm2
      vmulss  xmm1, xmm3, xmm3
      vmulss  xmm0, xmm4, xmm4
      vaddss  xmm3, xmm2, xmm1
      vaddss  xmm5, xmm3, xmm0
      vcomiss xmm5, cs:__real@461c4000
      vcomiss xmm5, cs:__real@46afc800
    }
  }
  __asm { vmovss  xmm0, cs:__real@bf800000 }
  return *(float *)&_XMM0;
}

/*
==============
Bot_CheckForLedgeFall
==============
*/

_BOOL8 __fastcall Bot_CheckForLedgeFall(bot_data_t *botData, const usercmd_s *cmd, double _XMM2_8)
{
  playerState_s *playerState; 
  int number; 
  int contentmask; 
  const Bounds *Bounds; 
  char v41; 
  vec3_t forward; 
  vec3_t right; 
  vec3_t end; 
  vec3_t start; 
  trace_t results; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12971, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !cmd->forwardmove && !cmd->rightmove )
    return 0i64;
  playerState = botData->botInfo.playerState;
  __asm
  {
    vmovaps [rsp+120h+var_10], xmm6
    vmovaps [rsp+120h+var_20], xmm7
    vmovaps [rsp+120h+var_30], xmm8
    vmovaps [rsp+120h+var_40], xmm9
  }
  AngleVectors(&playerState->viewangles, &forward, &right, NULL);
  __asm
  {
    vxorps  xmm1, xmm1, xmm1
    vcvtsi2ss xmm1, xmm1, eax
    vmulss  xmm8, xmm1, dword ptr [rsp+120h+forward]
    vmulss  xmm9, xmm1, dword ptr [rsp+120h+forward+4]
    vmulss  xmm1, xmm1, dword ptr [rsp+120h+forward+8]
    vxorps  xmm2, xmm2, xmm2
    vcvtsi2ss xmm2, xmm2, eax
    vmulss  xmm6, xmm2, dword ptr [rsp+120h+right]
    vmulss  xmm7, xmm2, dword ptr [rsp+120h+right+4]
    vmovss  dword ptr [rsp+120h+forward+8], xmm1
    vmulss  xmm1, xmm2, dword ptr [rsp+120h+right+8]
    vmovss  dword ptr [rsp+120h+right+8], xmm1
    vmovss  dword ptr [rsp+120h+forward], xmm8
    vmovss  dword ptr [rsp+120h+forward+4], xmm9
    vmovss  dword ptr [rsp+120h+right], xmm6
    vmovss  dword ptr [rsp+120h+right+4], xmm7
  }
  *(double *)&_XMM0 = G_Level_GetFrameDurationInSeconds();
  __asm { vmulss  xmm2, xmm0, cs:__real@40a00000 }
  _RAX = botData->botInfo.ent;
  __asm
  {
    vaddss  xmm0, xmm6, xmm8
    vmovss  xmm6, cs:__real@3f800000
    vmulss  xmm1, xmm0, xmm2
    vaddss  xmm3, xmm1, dword ptr [rax+130h]
    vmovss  dword ptr [rsp+120h+start], xmm3
    vaddss  xmm0, xmm7, xmm9
    vmulss  xmm1, xmm0, xmm2
    vaddss  xmm2, xmm1, dword ptr [rax+134h]
    vmovss  dword ptr [rsp+120h+start+4], xmm2
    vmovss  xmm0, dword ptr [rax+138h]
    vmovss  dword ptr [rsp+120h+start+8], xmm0
    vsubss  xmm0, xmm0, cs:__real@42580000
    vmovss  dword ptr [rsp+120h+end+8], xmm0
    vmovss  dword ptr [rsp+120h+end], xmm3
    vmovss  dword ptr [rsp+120h+end+4], xmm2
    vmovss  [rsp+120h+results.fraction], xmm6
  }
  number = _RAX->s.number;
  contentmask = _RAX->clipmask & 0xFDFFBFFF;
  Bounds = BG_Suit_GetBounds(botData->botInfo.playerState->suitIndex, PM_EFF_STANCE_DEFAULT);
  G_Main_TraceCapsule(&results, &start, &end, Bounds, number, contentmask);
  __asm
  {
    vmovss  xmm0, [rsp+120h+results.fraction]
    vmovaps xmm9, [rsp+120h+var_40]
    vmovaps xmm8, [rsp+120h+var_30]
    vmovaps xmm7, [rsp+120h+var_20]
    vcomiss xmm0, xmm6
    vmovaps xmm6, [rsp+120h+var_10]
  }
  return !v41;
}

/*
==============
Bot_CheckPathRecalculate
==============
*/
__int64 Bot_CheckPathRecalculate(bot_data_t *botData)
{
  return 0i64;
}

/*
==============
Bot_CleanupBotInfo
==============
*/
void Bot_CleanupBotInfo(bot_data_t *botData)
{
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4574, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->bIsScriptedAgent && Bot_HasNavigator(&botData->botInfo) )
  {
    Bot_PathClear(&botData->botInfo);
    Bot_FreeNavigator(&botData->botInfo);
  }
  AICommonInterface::RemoveEntRefs(&botData->botInfo);
}

/*
==============
Bot_ClearButton
==============
*/
void Bot_ClearButton(bot_data_t *botData, bot_scr_buttons_t button)
{
  int v4; 
  int time; 
  int v6; 
  int v7; 
  int v8; 
  int v9; 
  int v10; 
  int v11; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23528, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( button )
  {
    switch ( button )
    {
      case BOT_SCR_BUTTON_ATTACK:
        time = level.time;
        botData->botInfo.scriptPress &= ~2u;
        botData->botInfo.scriptAttackButtonEndTime = time;
        break;
      case BOT_SCR_BUTTON_THROW:
        botData->botInfo.scriptPress &= ~4u;
        break;
      case BOT_SCR_BUTTON_JUMP:
        botData->botInfo.scriptPress &= ~8u;
        break;
      case BOT_SCR_BUTTON_MELEE:
        botData->botInfo.scriptPress &= ~0x10u;
        break;
      case BOT_SCR_BUTTON_SPRINT:
        botData->botInfo.scriptPress &= ~0x20u;
        break;
      case BOT_SCR_BUTTON_ADS:
        v6 = level.time;
        botData->botInfo.scriptPress &= ~0x40u;
        botData->botInfo.scriptADSButtonEndTime = v6;
        break;
      case BOT_SCR_BUTTON_LETHAL:
        v7 = level.time;
        botData->botInfo.scriptPress &= ~0x80u;
        botData->botInfo.scriptLethalButtonEndTime = v7;
        break;
      case BOT_SCR_BUTTON_TACTICAL:
        v8 = level.time;
        botData->botInfo.scriptPress &= ~0x100u;
        botData->botInfo.scriptTacticalButtonEndTime = v8;
        break;
      case BOT_SCR_BUTTON_SPECIAL:
        v9 = level.time;
        botData->botInfo.scriptPress &= ~0x200u;
        botData->botInfo.scriptSpecialButtonEndTime = v9;
        break;
      case BOT_SCR_BUTTON_LEAN_LEFT:
        v10 = level.time;
        botData->botInfo.scriptPress &= ~0x400u;
        botData->botInfo.scriptLeanButtonEndTime = v10;
        break;
      case BOT_SCR_BUTTON_LEAN_RIGHT:
        v11 = level.time;
        botData->botInfo.scriptPress &= ~0x800u;
        botData->botInfo.scriptLeanButtonEndTime = v11;
        break;
      default:
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23590, ASSERT_TYPE_ASSERT, (const char *)&queryFormat.fmt + 3, "Unreachable") )
          __debugbreak();
        break;
    }
  }
  else
  {
    v4 = level.time;
    botData->botInfo.scriptPress &= ~1u;
    botData->botInfo.scriptUseButtonEndTime = v4;
  }
}

/*
==============
Bot_ClearEnemy
==============
*/
void Bot_ClearEnemy(bot_data_t *botData)
{
  gentity_s *v2; 
  gentity_s *v3; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24327, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24328, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !botData->botInfo.ent->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24329, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent->sentient )", (const char *)&queryFormat, "botData->botInfo.ent->sentient") )
    __debugbreak();
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
  {
    v2 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
    v3 = v2;
    if ( v2 )
    {
      if ( !v2->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24339, ASSERT_TYPE_ASSERT, "( enemy->sentient )", (const char *)&queryFormat, "enemy->sentient") )
        __debugbreak();
      SentientInfo_Clear(botData->botInfo.ent->sentient, v3->sentient);
    }
  }
  Sentient_SetEnemy(botData->botInfo.ent->sentient, NULL, 1, 1);
}

/*
==============
Bot_ClearScriptEnemy
==============
*/
void Bot_ClearScriptEnemy(bot_data_t *botData)
{
  sentient_s *sentient; 
  gentity_s *v3; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23392, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23393, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !botData->botInfo.ent->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23394, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent->sentient )", (const char *)&queryFormat, "botData->botInfo.ent->sentient") )
    __debugbreak();
  sentient = botData->botInfo.ent->sentient;
  if ( EntHandle::isDefined(&sentient->scriptTargetEnt) )
  {
    if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
      v3 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
    else
      v3 = NULL;
    if ( v3 == EntHandle::ent(&sentient->scriptTargetEnt) )
      Sentient_SetEnemy(botData->botInfo.ent->sentient, NULL, 1, 1);
  }
  EntHandle::setEnt(&sentient->scriptTargetEnt, NULL);
  sentient->scriptTargetHasTagEye = 0;
  sentient->entityTargetThreat = 0.0;
}

/*
==============
Bot_ClearScriptGoal
==============
*/
void Bot_ClearScriptGoal(bot_data_t *botData)
{
  pathnode_t *node; 
  sentient_s *sentient; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23330, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23331, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23332, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
    __debugbreak();
  if ( botData->botInfo.scriptGoal.type )
    GScr_Notify(botData->botInfo.ent, scr_const.script_goal_changed, 0);
  node = botData->botInfo.scriptGoal.node;
  if ( node )
  {
    sentient = botData->botInfo.sentient;
    if ( sentient->pClaimedNode == node )
      Path_RelinquishNodeNow(sentient);
  }
  if ( botData->botInfo.scriptGoal.type && Bot_ActiveGoalIsScriptGoal(botData) )
    botData->botInfo.flags |= 8u;
  *(_QWORD *)&botData->scriptedAgentInfo.blackboard.m_ShootParams.m_Pos.z = 0i64;
  *(_QWORD *)&botData->scriptedAgentInfo.blackboard.m_ShootParams.m_StartTime = 0i64;
  botData->botInfo.flags &= 0xFBEFFFFB;
  botData->botInfo.scriptGoal.type = BOT_SCR_GOAL_NONE;
  botData->botInfo.scriptGoal.node = NULL;
  *(_QWORD *)&botData->scriptedAgentInfo.scriptGoal.bMultiGoalPath = 0i64;
  botData->botInfo.scriptGoalNotified = 0;
}

/*
==============
Bot_ClearScriptedGrenade
==============
*/
void Bot_ClearScriptedGrenade(bot_info_t *botInfo)
{
  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19022, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  botInfo->grenadeFlags &= 0xFFFFFFED;
  *(_QWORD *)botInfo->scriptedGrenadeTarget.v = 0i64;
  *(_QWORD *)&botInfo->scriptedGrenadeTarget.z = 0i64;
  *(_QWORD *)&botInfo->scriptedGrenadeTime = 0i64;
  botInfo->scriptedGrenadeType = BOT_GRENADE_TYPE_NONE;
}

/*
==============
Bot_CloseToObjectiveGoal
==============
*/
_BOOL8 Bot_CloseToObjectiveGoal(const bot_data_t *botData)
{
  char v23; 
  vec3_t goal; 

  _RBX = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8128, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( _RBX->botInfo.scriptGoal.type != BOT_SCR_GOAL_OBJECTIVE )
    return 0i64;
  __asm
  {
    vmovss  xmm3, dword ptr [rbx+234h]
    vmovss  xmm1, cs:__real@43c80000
    vxorps  xmm0, xmm0, xmm0
    vcmpless xmm2, xmm3, xmm0
    vmovaps [rsp+68h+var_18], xmm6
    vblendvps xmm6, xmm3, xmm1, xmm2
  }
  Bot_GetScriptGoal(_RBX, &goal);
  _RAX = _RBX->botInfo.ent;
  __asm
  {
    vmovss  xmm0, dword ptr [rax+130h]
    vsubss  xmm3, xmm0, dword ptr [rsp+68h+goal]
    vmovss  xmm1, dword ptr [rax+134h]
    vmovss  xmm0, dword ptr [rax+138h]
    vsubss  xmm2, xmm1, dword ptr [rsp+68h+goal+4]
    vsubss  xmm4, xmm0, dword ptr [rsp+68h+goal+8]
    vmulss  xmm0, xmm4, xmm4
    vmulss  xmm2, xmm2, xmm2
    vmulss  xmm1, xmm3, xmm3
    vaddss  xmm3, xmm2, xmm1
    vaddss  xmm5, xmm3, xmm0
    vmulss  xmm0, xmm6, xmm6
    vcomiss xmm5, xmm0
    vmovaps xmm6, [rsp+68h+var_18]
  }
  return v23 != 0;
}

/*
==============
Bot_CombatStateBlinded
==============
*/
int Bot_CombatStateBlinded(bot_data_t *botData, usercmd_s *cmd)
{
  int result; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18882, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  result = Bot_IsBlinded(botData);
  if ( result )
  {
    botData->botInfo.grenadeFlags &= ~1u;
    return 1;
  }
  return result;
}

/*
==============
Bot_CombatStateCornerCombat
==============
*/
__int64 Bot_CombatStateCornerCombat(bot_data_t *botData, usercmd_s *cmd)
{
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8442, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  _RBP = &botData->botMatchData;
  if ( botData == (bot_data_t *)-29440i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8444, ASSERT_TYPE_ASSERT, "( pBotMatchData )", (const char *)&queryFormat, "pBotMatchData") )
    __debugbreak();
  __asm
  {
    vxorps  xmm0, xmm0, xmm0
    vcomiss xmm0, dword ptr [rbp+0CF0h]
    vcomiss xmm0, dword ptr [rbp+0CECh]
  }
  return 0i64;
}

/*
==============
Bot_CombatStateFire
==============
*/
__int64 Bot_CombatStateFire(bot_data_t *botData, const playerState_s *ps, usercmd_s *cmd)
{
  const Weapon *ViewmodelWeapon; 
  GWeaponMap *Instance; 
  bool v10; 
  weapFireType_t WeaponFireType; 
  int v12; 
  int v13; 
  int v14; 
  int v15; 
  bool v16; 
  weapFireType_t v17; 
  bot_burst_fire_type_t burstFireType; 
  __int32 v19; 
  int time; 
  __int64 result; 
  int weaponDelayNextFireStartTime; 
  int weaponDelayNextFireStopTime; 
  int v28; 
  int v29; 
  int v31; 
  __int64 v37; 
  int v38; 
  int v39; 
  unsigned __int64 buttons; 
  int v41; 
  bool v42; 
  int v43; 
  int WeaponStateForViewWeapon; 
  int dualWield; 
  int v47; 
  int min; 
  int ShouldPressADSButton; 
  int HasOverlay; 

  _RBP = ps;
  _RDI = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19954, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !_RBP && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19955, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19956, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(_RBP);
  if ( Bot_Weap_IsNone(ViewmodelWeapon) )
    return 0i64;
  Instance = GWeaponMap::GetInstance();
  v10 = BG_UsingAlternate(_RBP);
  WeaponFireType = BG_GetWeaponFireType(ViewmodelWeapon, v10);
  Bot_Weap_GetWeaponHandForViewWeapon(_RBP);
  WeaponStateForViewWeapon = Bot_Weap_GetWeaponStateForViewWeapon(_RDI->botInfo.playerState);
  v12 = BG_PlayerDualWieldingWeapon(Instance, _RBP, ViewmodelWeapon);
  dualWield = v12;
  v13 = 1;
  if ( WeaponFireType == WEAPON_FIRETYPE_FULLAUTO || (v47 = 0, WeaponFireType == WEAPON_FIRETYPE_BEAM) )
    v47 = 1;
  if ( v12 || Bot_Weap_IsWeapClass(_RBP, ViewmodelWeapon, WEAPCLASS_GRENADE) )
    v13 = 0;
  HasOverlay = Bot_Weap_HasOverlay(_RBP, ViewmodelWeapon);
  v14 = HasOverlay;
  if ( Bot_ShouldADS(_RDI, _RBP) )
    _RDI->botInfo.lastADSPressTime = level.time;
  ShouldPressADSButton = Bot_ShouldPressADSButton(_RDI);
  v15 = ShouldPressADSButton;
  v16 = BG_UsingAlternate(_RBP);
  v17 = BG_GetWeaponFireType(ViewmodelWeapon, v16);
  burstFireType = _RDI->botMatchData.burstFireType;
  if ( burstFireType == BOT_BURST_FIRE_TYPE_NONE )
    goto LABEL_24;
  v19 = burstFireType - 1;
  if ( v19 )
  {
    if ( v19 != 1 )
    {
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19942, ASSERT_TYPE_ASSERT, (const char *)&queryFormat.fmt + 3, "Bot_ShouldBurstFire failed to match burstFireType.") )
        __debugbreak();
      goto LABEL_24;
    }
    if ( v17 || !Bot_Weap_IsHighRecoil(_RDI, ViewmodelWeapon) )
    {
LABEL_24:
      time = level.time;
      goto LABEL_25;
    }
  }
  __asm
  {
    vcvttss2si r12d, dword ptr [rdi+7FB8h]
    vcvttss2si eax, dword ptr [rdi+7FB4h]
  }
  min = _EAX;
  __asm
  {
    vcvttss2si r13d, dword ptr [rdi+7FBCh]
    vcvttss2si r15d, dword ptr [rdi+7FC0h]
  }
  if ( (!_ER12 || !_ER15) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20031, ASSERT_TYPE_ASSERT, "(maxBurstFireTime && maxTimeBetweenBursts)", (const char *)&queryFormat, "maxBurstFireTime && maxTimeBetweenBursts") )
    __debugbreak();
  weaponDelayNextFireStartTime = _RDI->botInfo.weaponDelayNextFireStartTime;
  time = level.time;
  if ( level.time < weaponDelayNextFireStartTime )
    return 0i64;
  weaponDelayNextFireStopTime = _RDI->botInfo.weaponDelayNextFireStopTime;
  if ( level.time >= weaponDelayNextFireStopTime )
  {
    if ( level.time < _ER15 + weaponDelayNextFireStopTime )
      v28 = G_irand(_ER13, _ER15);
    else
      v28 = 0;
    v29 = G_irand(min, _ER12);
    weaponDelayNextFireStartTime = v28 + level.time;
    _RDI->botInfo.weaponDelayNextFireStartTime = v28 + level.time;
    _RDI->botInfo.weaponDelayNextFireStopTime = weaponDelayNextFireStartTime + v29;
    time = level.time;
  }
  if ( time < weaponDelayNextFireStartTime || time >= _RDI->botInfo.weaponDelayNextFireStopTime )
    return 0i64;
  v15 = ShouldPressADSButton;
  v14 = HasOverlay;
LABEL_25:
  if ( time <= _RDI->botInfo.weaponDelayForOffhand )
    return 0i64;
  if ( v47 )
  {
    if ( v13 )
      v13 = ((unsigned int)_RDI->botMatchData.flags >> 4) & 1;
  }
  else if ( time < _RDI->botInfo.weaponDelayEndTime )
  {
    return 0i64;
  }
  __asm
  {
    vmovaps [rsp+98h+var_58], xmm6
    vmovss  xmm6, cs:__real@3f800000
  }
  if ( Bot_IsForcedFiring(_RDI) )
  {
    _RDI->botInfo.weaponDelayAdsTime = 0;
    v13 = 0;
  }
  else if ( v13 )
  {
    v31 = 0;
    if ( v15 )
    {
      __asm { vcomiss xmm6, dword ptr [rbp+730h] }
      v31 = 1;
    }
    __asm
    {
      vmovss  xmm1, dword ptr [rbp+730h]
      vxorps  xmm0, xmm0, xmm0
      vcomiss xmm1, xmm0
    }
    if ( v15 )
      __asm { vcomiss xmm1, xmm6 }
    if ( v31 && (_RDI->botMatchData.flags & 4) != 0 )
      _RDI->botInfo.weaponDelayAdsTime = level.time;
  }
  if ( v14 )
    __asm { vmovss  xmm0, dword ptr [rdi+7FB0h] }
  else
    __asm { vmovss  xmm0, dword ptr [rdi+7FACh] }
  __asm { vcvttss2si r15d, xmm0 }
  if ( Bot_Weap_CanHoldBreath(_RBP) )
  {
    if ( _RDI->botInfo.forceHoldBreathCheck )
    {
      __asm { vcomiss xmm6, dword ptr [rbp+730h] }
      if ( _RDI->botInfo.forceHoldBreathCheck )
        _RDI->botInfo.forceHoldBreathCheck = 0;
    }
    else if ( BG_InADS(_RBP) )
    {
      _RDI->botInfo.forceHoldBreathCheck = 1;
      _RDI->botInfo.nextHoldBreathCheckTime = 0;
    }
  }
  __asm { vmovaps xmm6, [rsp+98h+var_58] }
  if ( v13 && level.time - _RDI->botInfo.weaponDelayAdsTime <= _ER15 )
    return 0i64;
  if ( (unsigned int)WeaponStateForViewWeapon > 0x3B || (v37 = 0xC39001C01C30001i64, !_bittest64(&v37, WeaponStateForViewWeapon)) )
  {
    if ( !Bot_IsUsingTurret(_RDI) )
      return 0i64;
  }
  if ( Bot_Weap_WeaponRequiresLockon(_RBP, ViewmodelWeapon) && !Bot_Weap_IsLockedOn(_RBP) )
    return 0i64;
  if ( !dualWield )
  {
    if ( Bot_Weap_IsWeapClass(_RBP, ViewmodelWeapon, WEAPCLASS_GRENADE) && (_RDI->botInfo.lastUserCmd->buttons & 1) != 0 )
      goto LABEL_85;
LABEL_84:
    cmd->buttons |= 1ui64;
    goto LABEL_85;
  }
  v38 = Bot_Weap_AmmoInClip(_RBP, ViewmodelWeapon, WEAPON_HAND_LEFT);
  v39 = Bot_Weap_AmmoInClip(_RBP, ViewmodelWeapon, WEAPON_HAND_DEFAULT);
  if ( !v47 )
  {
    if ( v38 )
    {
      if ( v39 )
      {
        buttons = cmd->buttons;
        if ( (_RDI->botInfo.flags & 0x200000) != 0 )
        {
          cmd->buttons = buttons | 1;
          _RDI->botInfo.flags &= ~0x200000u;
        }
        else
        {
          cmd->buttons = buttons | 0x20000;
          _RDI->botInfo.flags |= 0x200000u;
        }
      }
      else
      {
        cmd->buttons |= 0x20000ui64;
      }
      goto LABEL_85;
    }
    goto LABEL_84;
  }
  cmd->buttons |= 0x20001ui64;
LABEL_85:
  v41 = Bot_Weap_Class(_RBP, ViewmodelWeapon);
  v42 = BG_UsingAlternate(_RBP);
  v43 = BG_GetWeaponFireType(ViewmodelWeapon, v42);
  _RDI->botInfo.weaponDelayEndTime = Bot_GetNextWeaponDelayEndTime(_RDI, v43, v41, dualWield);
  result = 1i64;
  _RDI->botInfo.enemyTrack.lastFireTime = level.time;
  return result;
}

/*
==============
Bot_CombatStateFireWait
==============
*/
__int64 Bot_CombatStateFireWait(bot_data_t *botData, const playerState_s *ps, const vec3_t *overrideAimPoint)
{
  const Weapon *ViewmodelWeapon; 
  const gentity_s *v9; 
  int flags; 
  const dvar_t *v33; 
  __int64 result; 
  float dotResult[4]; 

  _RSI = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19853, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !_RSI->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19854, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  __asm { vmovaps [rsp+98h+var_48], xmm6 }
  ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(ps);
  if ( !EntHandle::isDefined(&_RSI->botInfo.sentient->targetEnt) )
    goto LABEL_24;
  v9 = EntHandle::ent(&_RSI->botInfo.sentient->targetEnt);
  if ( !v9 )
    goto LABEL_24;
  __asm
  {
    vmovss  xmm5, dword ptr [rsi+6D98h]
    vxorps  xmm6, xmm6, xmm6
    vcomiss xmm5, xmm6
  }
  flags = _RSI->botInfo.flags;
  if ( (flags & 0x80u) == 0 )
  {
    *(double *)&_XMM0 = Bot_Weap_FireWaitArcCos(ps, ViewmodelWeapon);
    __asm
    {
      vmovss  xmm1, cs:__real@3ca3d70a; max
      vmovss  dword ptr [rsi+6D98h], xmm0
      vxorps  xmm0, xmm0, xmm0; min
    }
    G_flrand(*(float *)&_XMM0, *(float *)&_XMM1);
    __asm { vmovss  xmm1, dword ptr [rsi+6D98h] }
    _RSI->botInfo.flags |= 0x180u;
    flags = _RSI->botInfo.flags;
    __asm
    {
      vsubss  xmm5, xmm1, xmm0
      vmovss  dword ptr [rsi+6D98h], xmm5
    }
  }
  if ( (flags & 0x100) == 0 )
    goto LABEL_24;
  _RAX = _RSI->botInfo.ent;
  __asm
  {
    vmovss  xmm0, dword ptr [rax+130h]
    vmovss  xmm1, dword ptr [rax+134h]
  }
  if ( overrideAimPoint )
  {
    __asm
    {
      vsubss  xmm3, xmm0, dword ptr [r14]
      vmovss  xmm0, dword ptr [rax+138h]
      vsubss  xmm4, xmm0, dword ptr [r14+8]
      vsubss  xmm2, xmm1, dword ptr [r14+4]
    }
  }
  else
  {
    __asm
    {
      vsubss  xmm3, xmm0, dword ptr [rbp+130h]
      vmovss  xmm0, dword ptr [rax+138h]
      vsubss  xmm4, xmm0, dword ptr [rbp+138h]
      vsubss  xmm2, xmm1, dword ptr [rbp+134h]
    }
  }
  __asm
  {
    vmulss  xmm2, xmm2, xmm2
    vmulss  xmm1, xmm3, xmm3
    vaddss  xmm3, xmm2, xmm1
    vsubss  xmm1, xmm5, cs:__real@3e4ccccd
    vmulss  xmm0, xmm4, xmm4
    vaddss  xmm2, xmm3, xmm0
    vcmpltss xmm0, xmm2, cs:__real@48742400
    vblendvps xmm6, xmm5, xmm1, xmm0
    vmovaps xmm2, xmm6; arcCos
    vmovss  [rsp+98h+dotResult], xmm6
  }
  if ( Bot_EntityWithinSpecificCombatFOV(_RSI, v9, *(float *)&_XMM2, overrideAimPoint, dotResult) )
  {
    _RSI->botInfo.flags &= ~0x100u;
LABEL_24:
    result = 0i64;
    goto LABEL_25;
  }
  v33 = DVARINT_bot_DrawDebug;
  if ( !DVARINT_bot_DrawDebug && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebug") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v33);
  if ( v33->current.integer == 8 )
  {
    __asm
    {
      vmovss  xmm1, [rsp+98h+dotResult]; lookOffCos
      vmovaps xmm2, xmm6; fireWaitArcCos
    }
    Bot_DrawDebugFireWait(&_RSI->botInfo, *(float *)&_XMM1, *(float *)&_XMM2);
  }
  result = 1i64;
LABEL_25:
  __asm { vmovaps xmm6, [rsp+98h+var_48] }
  return result;
}

/*
==============
Bot_CombatStateGrenade
==============
*/

__int64 __fastcall Bot_CombatStateGrenade(bot_data_t *botData, usercmd_s *cmd, double _XMM2_8)
{
  usercmd_s *v3; 
  const playerState_s *playerState; 
  int v6; 
  int HasOnlyUnderbarrelGL; 
  const gentity_s *v8; 
  int grenadeFlags; 
  int v10; 
  unsigned int v11; 
  const dvar_t *v22; 
  const dvar_t *v23; 
  int WeaponStateForViewWeapon; 
  int scriptedGrenadeStopTime; 
  int scriptedGrenadeTime; 
  int scriptedGrenadeAlignedTime; 
  bool v29; 
  __int64 result; 
  int time; 
  int v32; 
  int v33; 
  int v34; 
  __int64 v37; 
  int v38; 
  int v39; 
  int grenadeStartTime; 
  int grenadeFiredTime; 
  int grenadeHangTime; 
  int weaponDelayForOffhand; 
  int HasUnderBarrelGLAmmo; 
  vec3_t predictedPositionOut; 

  v3 = cmd;
  _R13 = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19589, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !_R13->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19590, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  playerState = _R13->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19593, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  HasUnderBarrelGLAmmo = Bot_Weap_HasUnderBarrelGLAmmo(playerState);
  v6 = HasUnderBarrelGLAmmo;
  HasOnlyUnderbarrelGL = Bot_Weap_HasOnlyUnderbarrelGL(_R13);
  if ( EntHandle::isDefined(&_R13->botInfo.sentient->targetEnt) )
    v8 = EntHandle::ent(&_R13->botInfo.sentient->targetEnt);
  else
    v8 = NULL;
  Bot_Weap_GetWeaponHandForViewWeapon(playerState);
  if ( Bot_Weap_HasUnderBarrelGL(playerState) )
    _R13->botInfo.wantsAlternate = 0;
  if ( Bot_IsThrowingGrenade(_R13) )
  {
    if ( (*((_BYTE *)&_R13->scriptedAgentInfo + 28228) & 2) != 0 || !Bot_CanSeeAndCanFireOnEnemy(_R13) )
      *(_WORD *)&v3->forwardmove = 0;
    grenadeFlags = _R13->botInfo.grenadeFlags;
    v10 = level.time + 2000;
    _R13->botInfo.flags &= ~0x10u;
    v11 = grenadeFlags & 0xFFFFFFFE;
    _R13->botInfo.grenadeDelayTime = v10;
    _R13->botInfo.grenadeFlags = v11;
    _R13->botInfo.scriptedGrenadeStopTime = level.time + 500;
    if ( v8 && (v11 & 4) != 0 && Bot_GetPredictedEntityPosition(_R13, v8, &predictedPositionOut) )
    {
      __asm
      {
        vmovss  xmm0, dword ptr [rsp+0D8h+predictedPositionOut]
        vmovss  xmm1, dword ptr [rsp+0D8h+predictedPositionOut+4]
        vsubss  xmm3, xmm0, dword ptr [rax+130h]
        vsubss  xmm2, xmm1, dword ptr [rax+134h]
        vmovss  xmm0, dword ptr [rsp+0D8h+predictedPositionOut+8]
        vsubss  xmm4, xmm0, dword ptr [rax+138h]
        vmulss  xmm2, xmm2, xmm2
        vmulss  xmm1, xmm3, xmm3
        vmulss  xmm0, xmm4, xmm4
        vaddss  xmm3, xmm2, xmm1
        vaddss  xmm2, xmm3, xmm0
        vcomiss xmm2, cs:__real@4a742400
      }
    }
    if ( Bot_Weap_GrenadeInRange(_R13, &_R13->botInfo.grenadeWeap, &_R13->botInfo.grenadePitchDesired, &_R13->botInfo.grenadeLaunchVel) )
      Bot_GrenadeTraceCalculatePitch(_R13, 0);
    else
      _R13->botInfo.grenadeStartTime = 0;
    if ( Bot_EnemyFacesBot(_R13) && !Bot_EntityUsingRiotShield(v8, 1) && !Bot_ShouldForceGrenadeThrow(_R13, 1) )
      _R13->botInfo.grenadeStartTime = 0;
    v22 = DVARINT_bot_DrawDebugSpecial;
    if ( !DVARINT_bot_DrawDebugSpecial && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebugSpecial") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v22);
    if ( v22->current.integer == 9 )
      goto LABEL_94;
    v23 = DVARINT_bot_DrawDebugSpecial;
    if ( !DVARINT_bot_DrawDebugSpecial && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebugSpecial") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v23);
    if ( v23->current.integer == 10 )
    {
LABEL_94:
      if ( Bot_ShouldDrawDebugForBot(_R13) )
      {
        __asm { vxorps  xmm2, xmm2, xmm2; yaw }
        G_DebugBox(&_R13->botInfo.grenadeThrowTarget, &actorBoxCrouch, *(float *)&_XMM2, &colorGreen, 0, 2);
        G_DebugLineWithDuration(&_R13->botInfo.ent->r.currentOrigin, &_R13->botInfo.grenadeThrowTarget, &colorGreen, 0, 2);
      }
    }
    if ( HasUnderBarrelGLAmmo )
    {
      _R13->botInfo.wantsAlternate = 1;
      if ( BG_UsingAlternate(playerState) && level.time >= _R13->botInfo.underbarrelNextFireTime )
      {
        _R13->botInfo.weaponDelayForOffhand = level.time + 1000;
        WeaponStateForViewWeapon = Bot_Weap_GetWeaponStateForViewWeapon(playerState);
        if ( !Bot_IsReloading(_R13) && (unsigned int)(WeaponStateForViewWeapon - 34) > 2 && !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&_R13->botInfo.playerState->pm_flags, ACTIVE, 0x25u) )
        {
          v3->buttons |= 1ui64;
          _R13->botInfo.underbarrelNextFireTime = _R13->botInfo.weaponDelayForOffhand + 500;
        }
      }
    }
    else if ( level.time < Bot_GrenadeReleaseTime(_R13) )
    {
      if ( Bot_Weap_IsNone(&_R13->botInfo.grenadeWeap) )
      {
        weaponDelayForOffhand = _R13->botInfo.weaponDelayForOffhand;
        grenadeHangTime = _R13->botInfo.grenadeHangTime;
        grenadeFiredTime = _R13->botInfo.grenadeFiredTime;
        grenadeStartTime = _R13->botInfo.grenadeStartTime;
        v39 = _R13->botInfo.grenadeFlags;
        v38 = Bot_GrenadeReleaseTime(_R13);
        LODWORD(v37) = level.time;
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19680, ASSERT_TYPE_ASSERT, "(!Bot_Weap_IsNone( botInfo->grenadeWeap ))", "%s\n\tlevel.time: %i, Bot_GrenadeReleaseTime(): %i, gFlags: %i, gStartTime: %i, gFiredTime: %i, gHangTime: %i, delayForOffHand :%i", "!Bot_Weap_IsNone( botInfo->grenadeWeap )", v37, v38, v39, grenadeStartTime, grenadeFiredTime, grenadeHangTime, weaponDelayForOffhand) )
          __debugbreak();
        v6 = HasUnderBarrelGLAmmo;
        v3 = cmd;
      }
      v3->buttons |= Bot_Weap_GrenadeButton(playerState, &_R13->botInfo.grenadeWeap);
    }
  }
  if ( (*((_BYTE *)&_R13->scriptedAgentInfo + 28228) & 2) != 0 && Bot_Weap_BotFacingScriptedGrenadeTarget(_R13) )
  {
    if ( !_R13->botInfo.scriptedGrenadeAlignedTime )
      _R13->botInfo.scriptedGrenadeAlignedTime = level.time;
    scriptedGrenadeStopTime = _R13->botInfo.scriptedGrenadeStopTime;
    if ( scriptedGrenadeStopTime && level.time >= scriptedGrenadeStopTime )
      goto LABEL_64;
    scriptedGrenadeTime = _R13->botInfo.scriptedGrenadeTime;
    scriptedGrenadeAlignedTime = _R13->botInfo.scriptedGrenadeAlignedTime;
    if ( scriptedGrenadeStopTime > scriptedGrenadeTime )
      scriptedGrenadeTime = _R13->botInfo.scriptedGrenadeStopTime;
    if ( scriptedGrenadeTime > scriptedGrenadeAlignedTime )
      scriptedGrenadeAlignedTime = scriptedGrenadeTime;
    if ( level.time - scriptedGrenadeAlignedTime > 500 )
LABEL_64:
      Bot_ClearScriptedGrenade(&_R13->botInfo);
  }
  if ( HasOnlyUnderbarrelGL )
    _R13->botInfo.wantsAlternate = 1;
  if ( !Bot_ShouldThrowGrenade(_R13) )
    return 0i64;
  if ( (*((_BYTE *)&_R13->scriptedAgentInfo + 28228) & 2) != 0 )
  {
    _R13->botInfo.grenadeThrowTarget.v[0] = _R13->botInfo.scriptedGrenadeTarget.v[0];
    _R13->botInfo.grenadeThrowTarget.v[1] = _R13->botInfo.scriptedGrenadeTarget.v[1];
    _R13->botInfo.grenadeThrowTarget.v[2] = _R13->botInfo.scriptedGrenadeTarget.v[2];
  }
  if ( !Bot_Weap_GrenadePick(&_R13->botInfo, playerState, &_R13->botInfo.grenadeWeap) )
  {
    v29 = (*((_BYTE *)&_R13->scriptedAgentInfo + 28228) & 2) == 0;
    _R13->botInfo.grenadeDelayTime = level.time + 2000;
    if ( v29 )
      return 0i64;
LABEL_72:
    Bot_ClearScriptedGrenade(&_R13->botInfo);
    return 0i64;
  }
  if ( !Bot_Weap_GrenadeInRange(_R13, &_R13->botInfo.grenadeWeap, &_R13->botInfo.grenadePitchDesired, &_R13->botInfo.grenadeLaunchVel) )
    return 0i64;
  if ( !Bot_GrenadeTraceCalculatePitch(_R13, 1) )
  {
    v34 = _R13->botInfo.grenadeFlags;
    if ( (v34 & 2) == 0 )
      return 0i64;
    if ( (v34 & 0x10) != 0 )
    {
      __asm
      {
        vmovss  xmm0, dword ptr [r13+232Ch]
        vaddss  xmm1, xmm0, cs:__real@41700000
        vmovss  dword ptr [r13+232Ch], xmm1
      }
      _R13->botInfo.grenadePitchLastCheck = 0;
      return 0i64;
    }
    goto LABEL_72;
  }
  if ( !v6 && !Bot_Weap_IsThrowable(playerState, &_R13->botInfo.grenadeWeap) && (*((_BYTE *)&_R13->scriptedAgentInfo + 28228) & 2) == 0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19736, ASSERT_TYPE_ASSERT, "( hasUnderbarrelGL || Bot_Weap_IsThrowable( ps, botInfo->grenadeWeap ) || (botInfo->grenadeFlags & ( 1 << 1 )) )", (const char *)&queryFormat, "hasUnderbarrelGL || Bot_Weap_IsThrowable( ps, botInfo->grenadeWeap ) || (botInfo->grenadeFlags & BOT_FLAG_GRENADE_SCRIPTED_GRENADE)") )
    __debugbreak();
  time = level.time;
  _R13->botInfo.grenadeFlags |= 1u;
  _R13->botInfo.grenadeStartTime = time;
  if ( v6 )
  {
    _R13->botInfo.wantsAlternate = 1;
    v32 = level.time;
    if ( HasOnlyUnderbarrelGL )
    {
      _R13->botInfo.underbarrelNextFireTime = level.time;
      _R13->botInfo.weaponDelayForOffhand = v32 + 500;
      result = 1i64;
      _R13->botInfo.grenadeFiredTime = 0;
    }
    else
    {
      v33 = level.time + 1000;
      _R13->botInfo.grenadeFiredTime = 0;
      _R13->botInfo.underbarrelNextFireTime = v33;
      _R13->botInfo.weaponDelayForOffhand = v33 + 500;
      return 1i64;
    }
  }
  else
  {
    if ( Bot_Weap_IsNone(&_R13->botInfo.grenadeWeap) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19752, ASSERT_TYPE_ASSERT, "( !Bot_Weap_IsNone( botInfo->grenadeWeap ) )", (const char *)&queryFormat, "!Bot_Weap_IsNone( botInfo->grenadeWeap )") )
      __debugbreak();
    v3->buttons |= Bot_Weap_GrenadeButton(playerState, &_R13->botInfo.grenadeWeap);
    result = 1i64;
    _R13->botInfo.grenadeFiredTime = 0;
  }
  return result;
}

/*
==============
Bot_CombatStateMelee
==============
*/
__int64 Bot_CombatStateMelee(bot_data_t *botData, const playerState_s *ps, usercmd_s *cmd)
{
  const Weapon *ViewmodelWeapon; 
  PlayerHandIndex WeaponHandForViewWeapon; 
  unsigned __int64 v9; 
  __int64 v10; 
  char v11; 
  char v12; 

  _RDI = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18968, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !ps && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18969, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(ps);
  if ( !Bot_CanSeeAndCanFireOnEnemy(_RDI) )
    goto LABEL_19;
  if ( !(unsigned int)Bot_CanMeleeReactEnemy(_RDI) )
    goto LABEL_19;
  if ( !Bot_AllowedToMeleeEnemy(_RDI) )
    goto LABEL_19;
  WeaponHandForViewWeapon = Bot_Weap_GetWeaponHandForViewWeapon(ps);
  LODWORD(v9) = Bot_Weap_GetWeaponStateForViewWeapon(_RDI->botInfo.playerState);
  if ( (unsigned int)v9 <= 0x32 )
  {
    v10 = 0x4000001C31FBEi64;
    if ( _bittest64(&v10, v9) )
      goto LABEL_19;
  }
  *(float *)&_XMM0 = Bot_ActualMeleeRange(_RDI);
  __asm { vcomiss xmm0, dword ptr [rdi+2394h] }
  if ( v11 | v12 )
    goto LABEL_19;
  if ( !Bot_Weap_AmmoInClip(ps, ViewmodelWeapon, WeaponHandForViewWeapon) )
    goto LABEL_16;
  *(double *)&_XMM0 = G_random();
  __asm { vcomiss xmm0, cs:__real@3f400000 }
  if ( v11 || Bot_EnemyPreferMelee(_RDI) )
  {
LABEL_16:
    if ( (_RDI->botInfo.lastUserCmd->buttons & 4) == 0 )
      cmd->buttons |= 4ui64;
    return 1i64;
  }
  else
  {
LABEL_19:
    cmd->buttons &= ~4ui64;
    return 0i64;
  }
}

/*
==============
Bot_CombatStateOffhandFire
==============
*/
__int64 Bot_CombatStateOffhandFire(bot_data_t *botData, playerState_s *ps, usercmd_s *cmd)
{
  gentity_s *v6; 
  GWeaponMap *Instance; 
  const Weapon *ViewmodelWeapon; 
  int FrameDuration; 
  int v10; 
  int v11; 
  char v14; 
  int WeaponStateForViewWeapon; 
  GWeaponMap *v17; 
  int v18; 
  Weapon offHand; 

  _RBX = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9130, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( EntHandle::isDefined(&_RBX->botInfo.sentient->targetEnt) )
    v6 = EntHandle::ent(&_RBX->botInfo.sentient->targetEnt);
  else
    v6 = NULL;
  if ( !ps && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9133, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9134, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  if ( !v6 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9135, ASSERT_TYPE_ASSERT, "( enemy )", (const char *)&queryFormat, "enemy") )
    __debugbreak();
  if ( !v6->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9136, ASSERT_TYPE_ASSERT, "( enemy->sentient )", (const char *)&queryFormat, "enemy->sentient") )
    __debugbreak();
  Instance = GWeaponMap::GetInstance();
  ViewmodelWeapon = BG_GetViewmodelWeapon(Instance, ps);
  if ( Bot_Weap_IsNone(ViewmodelWeapon) )
    return 0i64;
  if ( !Bot_GrenadesAllowed(_RBX) )
    return 0i64;
  FrameDuration = G_Level_GetFrameDuration();
  if ( !Bot_RecentSeeSentient(_RBX, v6->sentient, FrameDuration) )
    return 0i64;
  v10 = Bot_Weap_Class(ps, ViewmodelWeapon);
  if ( level.time < _RBX->botInfo.weaponDelayEndTime || Bot_EnemyPreferMelee(_RBX) && (_RBX->botInfo.scriptFlags & 0x200) == 0 )
    return 0i64;
  if ( (!Bot_Weap_FirstAvailableOfType(ps, BOT_GRENADE_TYPE_LETHAL, &offHand) || !Bot_Weap_IsOffhandClass(ps, &offHand, OFFHAND_CLASS_THROWINGKNIFE)) && (!Bot_Weap_FirstAvailableOfType(ps, BOT_GRENADE_TYPE_TACTICAL, &offHand) || !Bot_Weap_IsOffhandClass(ps, &offHand, OFFHAND_CLASS_THROWINGKNIFE)) )
    return 0i64;
  v11 = Bot_Weap_Ammo(ps, &offHand);
  if ( !v11 )
    return 0i64;
  if ( v11 > 0 )
  {
    __asm { vmovss  xmm2, cs:__real@3f75c28f; arcCos }
    if ( !Bot_EntityWithinSpecificCombatFOV(_RBX, v6, *(float *)&_XMM2, NULL, NULL) )
      return 0i64;
    __asm
    {
      vmovss  xmm0, cs:__real@43fa0000
      vcomiss xmm0, dword ptr [rbx+2394h]
    }
    if ( level.time - _RBX->botInfo.lastKnifeThrowCheck < 200 )
      return 0i64;
    _RBX->botInfo.lastKnifeThrowCheck = level.time;
    if ( Bot_Weap_IsRanged(ps, ViewmodelWeapon) )
    {
      if ( Bot_Weap_Ammo(ps, ViewmodelWeapon) )
      {
        *(double *)&_XMM0 = G_random();
        __asm { vcomiss xmm0, dword ptr [rbx+7FF4h] }
        if ( !v14 )
          return 0i64;
      }
    }
    if ( Bot_CombatStateFireWait(_RBX, ps, NULL) )
      return 0i64;
  }
  WeaponStateForViewWeapon = Bot_Weap_GetWeaponStateForViewWeapon(_RBX->botInfo.playerState);
  __asm { vcvttss2si ecx, dword ptr [rbx+7FA8h] }
  _RBX->botInfo.weaponDelayForOffhand = level.time + _ECX;
  if ( (unsigned int)(WeaponStateForViewWeapon - 16) > 1 && (unsigned int)(WeaponStateForViewWeapon - 22) > 2 && level.time >= _RBX->botInfo.weaponDelayEndTime )
  {
    if ( Bot_Weap_IsNone(&offHand) )
    {
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9215, ASSERT_TYPE_ASSERT, "( !Bot_Weap_IsNone( offHand ) )", (const char *)&queryFormat, "!Bot_Weap_IsNone( offHand )") )
        __debugbreak();
    }
    cmd->buttons |= Bot_Weap_GrenadeButton(ps, &offHand);
    v17 = GWeaponMap::GetInstance();
    v18 = BG_PlayerDualWieldingWeapon(v17, ps, ViewmodelWeapon);
    _RBX->botInfo.weaponDelayEndTime = Bot_GetNextWeaponDelayEndTime(_RBX, 1, v10, v18);
  }
  return 1i64;
}

/*
==============
Bot_CombatStateThrowBack
==============
*/
bool Bot_CombatStateThrowBack(bot_data_t *botData, playerState_s *ps, usercmd_s *cmd)
{
  bool result; 
  unsigned int grenadeThrowbackStartTime; 
  unsigned int time; 
  char v12; 

  _RBX = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18901, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !ps && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18902, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18903, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  if ( !Bot_GrenadesAllowed(_RBX) || GameModeFlagContainer<enum PWeaponFlagsCommon,enum PWeaponFlagsSP,enum PWeaponFlagsMP,64>::TestFlagInternal(&ps->weapCommon.weapFlags, ACTIVE, 0x33u) )
    return 0;
  if ( ps->throwbackGrenadeTimeLeft <= 0 )
  {
    *(_QWORD *)((char *)&_RBX->scriptedAgentInfo + 28236) = -1i64;
    return 0;
  }
  grenadeThrowbackStartTime = _RBX->botInfo.grenadeThrowbackStartTime;
  time = level.time;
  if ( grenadeThrowbackStartTime == -1 )
  {
    _RBX->botInfo.grenadeThrowbackStartTime = level.time;
    time = level.time;
    grenadeThrowbackStartTime = level.time;
  }
  __asm
  {
    vxorps  xmm0, xmm0, xmm0
    vcvtsi2ss xmm0, xmm0, eax
    vcomiss xmm0, dword ptr [rbx+7FD4h]
  }
  if ( time < grenadeThrowbackStartTime )
    return 0;
  if ( GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&_RBX->botInfo.playerState->pm_flags, ACTIVE, 5u) )
    return 0;
  if ( (LOBYTE(_RBX->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) != 0 )
    return 0;
  if ( level.time - _RBX->botInfo.grenadeThrowbackLastCheckTime < 100 )
    return 0;
  _RBX->botInfo.grenadeThrowbackLastCheckTime = level.time;
  *(double *)&_XMM0 = G_random();
  __asm { vcomiss xmm0, dword ptr [rbx+8054h] }
  if ( !v12 )
    return 0;
  cmd->buttons &= 0xFFFFFFFFFFFDFFFCui64;
  result = 1;
  cmd->buttons |= 0x1000ui64;
  _RBX->botInfo.grenadeFiredTime = 0;
  return result;
}

/*
==============
Bot_CompareHUDStrings
==============
*/
__int64 Bot_CompareHUDStrings(const void *hs0, const void *hs1)
{
  return (unsigned int)(*(_DWORD *)hs1 - *(_DWORD *)hs0);
}

/*
==============
Bot_CreateZoneObstacle
==============
*/

void __fastcall Bot_CreateZoneObstacle(int zoneNum, team_t team, double obsPenalty)
{
  __int64 v5; 
  __int64 v8; 
  char NodeTeam; 
  Bounds *p_bounds; 
  nav_space_s *DefaultSpace; 
  __int128 angles; 

  __asm { vmovaps [rsp+78h+var_28], xmm6 }
  v5 = zoneNum;
  __asm { vmovaps xmm6, xmm2 }
  v8 = 13i64 * zoneNum + Path_GetNodeTeam(team);
  if ( s_botZoneData->obstacleID[v8] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13828, ASSERT_TYPE_ASSERT, "( BOT_ZONE_OBSTACLE_NONE == s_botZoneData[zoneNum].obstacleID[nodeTeam] )", (const char *)&queryFormat, "BOT_ZONE_OBSTACLE_NONE == s_botZoneData[zoneNum].obstacleID[nodeTeam]") )
    __debugbreak();
  if ( (!Path_ZoneCount() || level.teammode == TEAMMODE_FFA) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13829, ASSERT_TYPE_ASSERT, "( Bot_TeamsZoneData() )", (const char *)&queryFormat, "Bot_TeamsZoneData()") )
    __debugbreak();
  __asm
  {
    vxorps  xmm0, xmm0, xmm0
    vmovss  dword ptr [rsp+78h+angles], xmm0
    vmovss  dword ptr [rsp+78h+angles+4], xmm0
    vmovss  dword ptr [rsp+78h+angles+8], xmm0
  }
  if ( (unsigned int)(team - 1) > 1 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13808, ASSERT_TYPE_ASSERT, "( team == TEAM_AXIS || team == TEAM_ALLIES )", (const char *)&queryFormat, "team == TEAM_AXIS || team == TEAM_ALLIES", angles) )
    __debugbreak();
  NodeTeam = Path_GetNodeTeam(team);
  p_bounds = &s_botZoneData[v5].bounds;
  DefaultSpace = Nav_GetDefaultSpace();
  __asm { vmovaps xmm3, xmm6; penalty }
  s_botZoneData->obstacleID[v8] = Nav_CreateObstacleByBounds(DefaultSpace, p_bounds, (const vec3_t *)&angles, *(float *)&_XMM3, 1u, 1 << NodeTeam);
  __asm { vmovaps xmm6, [rsp+78h+var_28] }
}

/*
==============
Bot_CurrentEnemyIsHighlyThreatening
==============
*/
__int64 Bot_CurrentEnemyIsHighlyThreatening(const bot_data_t *botData)
{
  unsigned int v2; 
  gentity_s *v3; 
  int v4; 
  unsigned int MaxThreat; 
  sentient_s *v9; 
  signed __int64 v10; 
  char *v11; 
  const EnemySelector *v12; 
  bool v13; 
  bool v14; 
  bool v15; 
  bitarray<224> iTeamFlags; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9523, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v2 = 0;
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
  {
    v3 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
    if ( v3 )
      goto LABEL_10;
  }
  else
  {
    v3 = NULL;
  }
  if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9533, ASSERT_TYPE_ASSERT, "( enemy )", (const char *)&queryFormat, "enemy") )
    __debugbreak();
LABEL_10:
  if ( !v3->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9534, ASSERT_TYPE_ASSERT, "( enemy->sentient )", (const char *)&queryFormat, "enemy->sentient") )
    __debugbreak();
  v4 = -2147483647;
  MaxThreat = -2147483647;
  if ( Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) )
    _RAX = Com_TeamsSP_GetAllTeamFlags();
  else
    _RAX = Com_TeamsMP_GetAllTeamFlags();
  __asm
  {
    vmovups xmm0, xmmword ptr [rax]
    vmovups xmmword ptr [rsp+98h+iTeamFlags.array], xmm0
    vmovsd  xmm1, qword ptr [rax+10h]
    vmovsd  qword ptr [rsp+98h+iTeamFlags.array+10h], xmm1
  }
  iTeamFlags.array[6] = _RAX->array[6];
  v9 = Sentient_FirstSentient(&iTeamFlags);
  if ( !v9 )
    goto LABEL_31;
  do
  {
    if ( v9->inuse && !AI_IsAlliedSentient(botData->botInfo.sentient, v9) )
    {
      v10 = 60 * (v9 - level.sentients);
      v11 = (char *)&botData->scriptedAgentInfo + v10 + 11644;
      if ( (const bot_data_t *)((char *)botData + v10) == (const bot_data_t *)-11652i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9545, ASSERT_TYPE_ASSERT, "( botSentientInfo )", (const char *)&queryFormat, "botSentientInfo") )
        __debugbreak();
      if ( v9 == v3->sentient )
      {
        if ( EntHandle::isDefined(&botData->botInfo.sentient->scriptTargetEnt) && EntHandle::ent(&botData->botInfo.sentient->scriptTargetEnt) == v9->ent )
        {
          v12 = EnemySelector_Get(botData->botInfo.sentient->enemySelector);
          MaxThreat = EnemySelector_GetMaxThreat(v12);
        }
        else
        {
          MaxThreat = *((_DWORD *)v11 + 10);
        }
      }
      else if ( *((_DWORD *)v11 + 10) > v4 )
      {
        v4 = *((_DWORD *)v11 + 10);
      }
    }
    v9 = Sentient_NextSentient(v9, &iTeamFlags);
  }
  while ( v9 );
  v2 = 0;
  v13 = MaxThreat < 0x80000001;
  v14 = MaxThreat == -2147483647;
  if ( MaxThreat == 0x80000000 || v14 )
  {
LABEL_31:
    v15 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9560, ASSERT_TYPE_ASSERT, "(currentEnemyThreat > AI_THREAT_MIN)", "%s\n\tBot has no threat on his current enemy. Current enemy num: %i, highestOtherThreat: %i", "currentEnemyThreat > AI_THREAT_MIN", v3->s.number, v4);
    v13 = 0;
    v14 = !v15;
    if ( v15 )
      __debugbreak();
  }
  __asm
  {
    vxorps  xmm1, xmm1, xmm1
    vxorps  xmm0, xmm0, xmm0
    vcvtsi2ss xmm1, xmm1, r14d
    vcvtsi2ss xmm0, xmm0, esi
    vsubss  xmm2, xmm1, xmm0
    vcomiss xmm2, cs:__real@453b8000
  }
  LOBYTE(v2) = !v13 && !v14;
  return v2;
}

/*
==============
Bot_CyclePathTurn
==============
*/
void Bot_CyclePathTurn(int postThinkEntNum)
{
  unsigned int v2; 
  int m_characterCount; 
  int v4; 
  int v5; 
  gentity_s *v6; 
  __int16 EntityIndex; 
  const SvClientMP *MpClient; 
  int IsClientConnected; 
  bitarray_base<bitarray<224> > *AllTeamFlags; 
  const SvClientMP *v11; 
  __int64 v12; 
  __int64 v13; 

  v2 = (unsigned int)postThinkEntNum >> 31;
  if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
    __debugbreak();
  m_characterCount = ComCharacterLimits::ms_gameData.m_characterCount;
  if ( (int)ComCharacterLimits::ms_gameData.m_characterCount >= 2048 )
  {
    LODWORD(v12) = ComCharacterLimits::ms_gameData.m_characterCount;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3092, ASSERT_TYPE_ASSERT, "( characterMaxCount ) < ( ( 2048 ) )", "characterMaxCount < MAX_GENTITIES\n\t%i, %i", v12, 2048) )
      __debugbreak();
  }
  if ( s_botPathTurn >= (unsigned int)m_characterCount )
  {
    LODWORD(v13) = m_characterCount;
    LODWORD(v12) = s_botPathTurn;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3093, ASSERT_TYPE_ASSERT, "(unsigned)( s_botPathTurn ) < (unsigned)( characterMaxCount )", "s_botPathTurn doesn't index characterMaxCount\n\t%i not in [0, %i)", v12, v13) )
      __debugbreak();
  }
  if ( postThinkEntNum < -1 )
  {
    LODWORD(v13) = -1;
    LODWORD(v12) = postThinkEntNum;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3094, ASSERT_TYPE_ASSERT, "( postThinkEntNum ) >= ( -1 )", "postThinkEntNum >= -1\n\t%i, %i", v12, v13) )
      __debugbreak();
  }
  if ( postThinkEntNum >= m_characterCount )
  {
    LODWORD(v13) = m_characterCount;
    LODWORD(v12) = postThinkEntNum;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3095, ASSERT_TYPE_ASSERT, "( postThinkEntNum ) < ( characterMaxCount )", "postThinkEntNum < characterMaxCount\n\t%i, %i", v12, v13) )
      __debugbreak();
  }
  if ( (_BYTE)v2 || !s_botGetPathToGoalCalled && s_botPathTurn == postThinkEntNum )
  {
    v4 = s_botPathTurn;
    while ( 1 )
    {
      while ( 1 )
      {
        while ( 1 )
        {
          v5 = s_botPathTurn + 1;
          s_botPathTurn = v5;
          if ( v5 >= m_characterCount )
          {
            if ( !(_BYTE)v2 )
            {
              s_botPathTurn = v5 - 1;
              return;
            }
            s_botPathTurn = 0;
            v5 = 0;
          }
          v6 = &level.gentities[v5];
          if ( v5 == v4 )
            return;
          if ( v6 )
          {
            EntityIndex = G_GetEntityIndex(&level.gentities[v5]);
            if ( G_IsEntityInUse(EntityIndex) )
            {
              if ( v6->sentient )
                break;
            }
          }
        }
        if ( !v6->client )
          break;
        MpClient = SV_Client_GetMpClient(v6->s.number);
        IsClientConnected = Bot_IsClientConnected(MpClient);
LABEL_31:
        if ( IsClientConnected )
          goto LABEL_32;
      }
      if ( v6->agent )
      {
        IsClientConnected = v6->s.eType == ET_AGENT;
        goto LABEL_31;
      }
LABEL_32:
      if ( v6->s.eType != ET_INVISIBLE )
      {
        AllTeamFlags = (bitarray_base<bitarray<224> > *)Com_TeamsMP_GetAllTeamFlags();
        if ( bitarray_base<bitarray<224>>::testBit(AllTeamFlags, v6->sentient->eTeam) )
        {
          if ( !v6->client || (v11 = SV_Client_GetMpClient(v6->s.number), Bot_IsClientActive(v11)) )
          {
            if ( SV_BotIsBotEnt(v6) )
              return;
          }
        }
      }
    }
  }
}

/*
==============
Bot_DebugAddErrorLocation
==============
*/

void __fastcall Bot_DebugAddErrorLocation(bot_data_t *botData, bot_error_loc_type_t type, double duplicateRadius, const vec3_t *errorOrigin, const vec3_t *errorOrigin2, const vec3_t *errorOrigin3, const char *string)
{
  __int64 errorLocCount; 
  __int64 v15; 
  bot_error_loc_t *v16; 
  __int64 v17; 
  usercmd_s cmd; 

  __asm
  {
    vmovaps [rsp+178h+var_28], xmm6
    vmovaps xmm6, xmm2
  }
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2602, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2603, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( (unsigned int)type >= BOT_ERROR_LOC_COUNT )
  {
    LODWORD(v17) = type;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2604, ASSERT_TYPE_ASSERT, "(unsigned)( type ) < (unsigned)( BOT_ERROR_LOC_COUNT )", "type doesn't index BOT_ERROR_LOC_COUNT\n\t%i not in [0, %i)", v17, 3) )
      __debugbreak();
  }
  __asm
  {
    vmovaps xmm3, xmm6; duplicateRadius
    vmovaps xmm6, [rsp+178h+var_28]
  }
  if ( Bot_DebugValidNewErrorLocation(type, errorOrigin, errorOrigin2, *(float *)&_XMM3) )
  {
    errorLocCount = botData->botDebugData.errorLocCount;
    if ( (int)errorLocCount < 20 )
    {
      v15 = errorLocCount;
      botData->botDebugData.errorLocCount = errorLocCount + 1;
      v16 = &botData->botDebugData.errorLocs[errorLocCount];
      memset_0(v16, 0, sizeof(bot_error_loc_t));
      botData->botDebugData.errorLocs[v15].type = type;
      v16->origin.v[0] = errorOrigin->v[0];
      v16->origin.v[1] = errorOrigin->v[1];
      v16->origin.v[2] = errorOrigin->v[2];
      if ( errorOrigin2 )
        botData->botDebugData.errorLocs[v15].origin2 = *errorOrigin2;
      if ( errorOrigin3 )
      {
        botData->botDebugData.errorLocs[v15].origin3 = *errorOrigin3;
        botData->botDebugData.errorLocs[v15].usingOrigin3 = 1;
      }
      botData->botDebugData.errorLocs[v15].yaw = botData->botInfo.ent->r.currentAngles.v[1];
      if ( type )
      {
        if ( type == BOT_ERROR_LOC_SEE_THROUGH )
        {
          if ( string )
            Core_strcpy_truncate(botData->botDebugData.errorLocs[v15].string, 0x400ui64, string);
        }
      }
      else
      {
        botData->botDebugData.errorLocs[v15].traversal = botData->botInfo.traversal;
        botData->botDebugData.errorLocs[v15].nodeStart = botData->botInfo.nodeNegotStart;
        botData->botDebugData.errorLocs[v15].nodeEnd = botData->botInfo.nodeNegotEnd;
        Bot_SetMovementAlongNegotiation(botData, &cmd);
        botData->botDebugData.errorLocs[v15].forward = cmd.forwardmove;
        botData->botDebugData.errorLocs[v15].right = cmd.rightmove;
        botData->botDebugData.errorLocs[v15].jumpCount = truncate_cast<short,int>(botData->botInfo.traverseProgressJumps);
      }
    }
  }
}

/*
==============
Bot_DebugGoal
==============
*/
void Bot_DebugGoal(int index, vec3_t *goal)
{
  unsigned int v2; 
  unsigned int v4; 
  gentity_s *GEntity; 
  __int64 v12; 
  __int64 v13; 
  vec3_t out; 
  tmat33_t<vec3_t> axis; 

  v2 = index - 1;
  _RSI = goal;
  if ( index - 1 < 0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9926, ASSERT_TYPE_ASSERT, "( indexAdjusted ) >= ( 0 )", "indexAdjusted >= 0\n\t%i, %i", index - 1, 0i64) )
    __debugbreak();
  if ( v2 >= 4 )
  {
    LODWORD(v13) = 4;
    LODWORD(v12) = v2;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9927, ASSERT_TYPE_ASSERT, "(unsigned)( indexAdjusted ) < (unsigned)( ( sizeof( *array_counter( s_botDebugPathGoal ) ) + 0 ) )", "indexAdjusted doesn't index ARRAY_COUNT( s_botDebugPathGoal )\n\t%i not in [0, %i)", v12, v13) )
      __debugbreak();
  }
  v4 = s_botDebugPathGoalGround[v2];
  if ( v4 == 2047 )
  {
    _RSI->v[0] = s_botDebugPathGoal[v2].v[0];
    _RSI->v[1] = s_botDebugPathGoal[v2].v[1];
    _RSI->v[2] = s_botDebugPathGoal[v2].v[2];
  }
  else
  {
    if ( v4 >= 0x800 )
    {
      LODWORD(v13) = 2048;
      LODWORD(v12) = s_botDebugPathGoalGround[v2];
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9935, ASSERT_TYPE_ASSERT, "(unsigned)( s_botDebugPathGoalGround[indexAdjusted] ) < (unsigned)( ( 2048 ) )", "s_botDebugPathGoalGround[indexAdjusted] doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v12, v13) )
        __debugbreak();
    }
    if ( s_botDebugPathGoalGround[v2] == 2047 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9936, ASSERT_TYPE_ASSERT, "( s_botDebugPathGoalGround[indexAdjusted] != ENTITYNUM_NONE )", (const char *)&queryFormat, "s_botDebugPathGoalGround[indexAdjusted] != ENTITYNUM_NONE") )
      __debugbreak();
    if ( G_IsEntityInUse(s_botDebugPathGoalGround[v2]) )
    {
      GEntity = G_GetGEntity(s_botDebugPathGoalGround[v2]);
      AnglesToAxis(&GEntity->r.currentAngles, &axis);
      MatrixTransformVector(&s_botDebugPathGoal[v2], &axis, &out);
      __asm
      {
        vmovss  xmm0, dword ptr [rsp+98h+out]
        vaddss  xmm1, xmm0, dword ptr [rbx+130h]
        vmovss  xmm2, dword ptr [rsp+98h+out+4]
        vmovss  dword ptr [rsi], xmm1
        vaddss  xmm0, xmm2, dword ptr [rbx+134h]
        vmovss  xmm1, dword ptr [rsp+98h+out+8]
        vmovss  dword ptr [rsi+4], xmm0
        vaddss  xmm2, xmm1, dword ptr [rbx+138h]
        vmovss  dword ptr [rsi+8], xmm2
      }
    }
  }
}

/*
==============
Bot_DebugPathGoalEnabled
==============
*/
_BOOL8 Bot_DebugPathGoalEnabled()
{
  return Bot_GetCurrentNumDebugGoals() > 0;
}

/*
==============
Bot_DebugValidNewErrorLocation
==============
*/

__int64 __fastcall Bot_DebugValidNewErrorLocation(bot_error_loc_type_t type, const vec3_t *errorOrigin, const vec3_t *otherErrorOrigin, double duplicateRadius)
{
  unsigned __int8 v15; 
  bool v17; 
  bool v18; 
  int v21; 
  __int64 i; 
  gentity_s *v23; 
  __int16 EntityIndex; 
  const SvClientMP *MpClient; 
  int IsClientConnected; 
  bot_data_t *EntityData; 
  __int64 errorLocCount; 
  __int64 v29; 
  __int64 result; 
  __int64 v84; 
  __int64 v85; 

  __asm { vmovaps [rsp+0E8h+var_38], xmm6 }
  _RDI = otherErrorOrigin;
  _RBP = errorOrigin;
  v15 = type;
  __asm { vmovaps xmm6, xmm3 }
  v17 = (unsigned int)type <= BOT_ERROR_LOC_COUNT;
  if ( (unsigned int)type >= BOT_ERROR_LOC_COUNT )
  {
    v18 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2540, ASSERT_TYPE_ASSERT, "(unsigned)( type ) < (unsigned)( BOT_ERROR_LOC_COUNT )", "type doesn't index BOT_ERROR_LOC_COUNT\n\t%i not in [0, %i)", type, 3);
    v17 = !v18;
    if ( v18 )
      __debugbreak();
  }
  __asm
  {
    vmovaps [rsp+0E8h+var_48], xmm7
    vmovaps [rsp+0E8h+var_58], xmm8
    vmovaps [rsp+0E8h+var_68], xmm9
    vmovaps [rsp+0E8h+var_78], xmm10
    vmovaps [rsp+0E8h+var_88], xmm11
    vxorps  xmm0, xmm0, xmm0
    vcomiss xmm6, xmm0
    vmovaps [rsp+0E8h+var_98], xmm12
    vmovaps [rsp+0E8h+var_A8], xmm13
  }
  if ( v17 )
  {
LABEL_42:
    result = 1i64;
    goto LABEL_43;
  }
  __asm { vmulss  xmm13, xmm6, xmm6 }
  if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
    __debugbreak();
  if ( (int)ComCharacterLimits::ms_gameData.m_characterCount > 2048 )
  {
    if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
      __debugbreak();
    LODWORD(v85) = 2048;
    LODWORD(v84) = ComCharacterLimits::ms_gameData.m_characterCount;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2549, ASSERT_TYPE_ASSERT, "( ComCharacterLimits::GetCharacterMaxCount() ) <= ( ( 2048 ) )", "ComCharacterLimits::GetCharacterMaxCount() <= MAX_GENTITIES\n\t%i, %i", v84, v85) )
      __debugbreak();
  }
  v21 = 0;
  for ( i = 0i64; ; ++i )
  {
    if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
      __debugbreak();
    if ( v21 >= (int)ComCharacterLimits::ms_gameData.m_characterCount )
      goto LABEL_42;
    v23 = &level.gentities[i];
    if ( &level.gentities[i] )
    {
      EntityIndex = G_GetEntityIndex(&level.gentities[i]);
      if ( G_IsEntityInUse(EntityIndex) )
      {
        if ( v23->sentient )
          break;
      }
    }
LABEL_40:
    ++v21;
  }
  if ( v23->client )
  {
    MpClient = SV_Client_GetMpClient(v23->s.number);
    IsClientConnected = Bot_IsClientConnected(MpClient);
  }
  else
  {
    if ( !v23->agent )
      goto LABEL_27;
    IsClientConnected = v23->s.eType == ET_AGENT;
  }
  if ( !IsClientConnected )
    goto LABEL_40;
LABEL_27:
  if ( !SV_BotIsBotEnt(v23) )
    goto LABEL_40;
  EntityData = Bot_GetEntityData(v23);
  if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2563, ASSERT_TYPE_ASSERT, "( otherBotData )", (const char *)&queryFormat, "otherBotData") )
    __debugbreak();
  errorLocCount = EntityData->botDebugData.errorLocCount;
  v29 = 0i64;
  if ( errorLocCount <= 0 )
    goto LABEL_40;
  _RAX = &EntityData->botDebugData.errorLocs[0].origin.v[2];
  while ( *((_BYTE *)_RAX + 48) != v15 )
  {
LABEL_39:
    ++v29;
    _RAX += 271;
    if ( v29 >= errorLocCount )
      goto LABEL_40;
  }
  __asm
  {
    vmovss  xmm11, dword ptr [rbp+4]
    vmovss  xmm5, dword ptr [rax-4]
    vmovss  xmm10, dword ptr [rbp+0]
    vmovss  xmm4, dword ptr [rax-8]
    vmovss  xmm12, dword ptr [rbp+8]
    vmovss  xmm6, dword ptr [rax]
    vsubss  xmm0, xmm11, xmm5
    vmulss  xmm1, xmm0, xmm0
    vsubss  xmm2, xmm10, xmm4
    vmulss  xmm0, xmm2, xmm2
    vaddss  xmm2, xmm1, xmm0
    vsubss  xmm3, xmm12, xmm6
    vmulss  xmm1, xmm3, xmm3
    vaddss  xmm2, xmm2, xmm1
    vcomiss xmm2, xmm13
  }
  if ( *((_BYTE *)_RAX + 48) > v15 )
  {
    if ( _RDI )
    {
      __asm
      {
        vmovss  xmm8, dword ptr [rdi+4]
        vmovss  xmm7, dword ptr [rdi]
        vmovss  xmm9, dword ptr [rdi+8]
        vsubss  xmm0, xmm8, xmm5
        vmulss  xmm1, xmm0, xmm0
        vsubss  xmm2, xmm7, xmm4
        vmulss  xmm0, xmm2, xmm2
        vaddss  xmm2, xmm1, xmm0
        vsubss  xmm3, xmm9, xmm6
        vmulss  xmm1, xmm3, xmm3
        vaddss  xmm2, xmm2, xmm1
        vcomiss xmm2, xmm13
        vmovss  xmm5, dword ptr [rax+8]
        vmovss  xmm4, dword ptr [rax+4]
        vmovss  xmm6, dword ptr [rax+0Ch]
        vsubss  xmm0, xmm11, xmm5
        vmulss  xmm1, xmm0, xmm0
        vsubss  xmm2, xmm10, xmm4
        vmulss  xmm0, xmm2, xmm2
        vaddss  xmm2, xmm1, xmm0
        vsubss  xmm3, xmm12, xmm6
        vmulss  xmm1, xmm3, xmm3
        vaddss  xmm2, xmm2, xmm1
        vcomiss xmm2, xmm13
        vsubss  xmm0, xmm8, xmm5
        vmulss  xmm1, xmm0, xmm0
        vsubss  xmm2, xmm7, xmm4
        vmulss  xmm0, xmm2, xmm2
        vaddss  xmm2, xmm1, xmm0
        vsubss  xmm3, xmm9, xmm6
        vmulss  xmm1, xmm3, xmm3
        vaddss  xmm2, xmm2, xmm1
        vcomiss xmm2, xmm13
      }
    }
    goto LABEL_39;
  }
  result = 0i64;
LABEL_43:
  __asm
  {
    vmovaps xmm13, [rsp+0E8h+var_A8]
    vmovaps xmm12, [rsp+0E8h+var_98]
    vmovaps xmm11, [rsp+0E8h+var_88]
    vmovaps xmm10, [rsp+0E8h+var_78]
    vmovaps xmm9, [rsp+0E8h+var_68]
    vmovaps xmm8, [rsp+0E8h+var_58]
    vmovaps xmm7, [rsp+0E8h+var_48]
    vmovaps xmm6, [rsp+0E8h+var_38]
  }
  return result;
}

/*
==============
Bot_DestroyZoneObstacle
==============
*/
void Bot_DestroyZoneObstacle(int zoneNum, team_t team)
{
  __int64 v2; 
  unsigned int v3; 

  v2 = 4 * (13i64 * zoneNum + Path_GetNodeTeam(team)) + 8;
  v3 = *(_DWORD *)((char *)&s_botZoneData->team + v2);
  if ( v3 )
  {
    Nav_DestroyObstacleByID(v3);
    *(_DWORD *)((char *)&s_botZoneData->team + v2) = 0;
  }
}

/*
==============
Bot_DifficultyFromString
==============
*/
__int64 Bot_DifficultyFromString(const char *botDifficultyString)
{
  const char *v2; 
  unsigned int v3; 
  __int64 v4; 
  __int64 v5; 
  const char *v6; 
  signed __int64 v7; 
  int v8; 
  __int64 v9; 
  int v10; 
  int v11; 
  int v12; 

  if ( !botDifficultyString && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4815, ASSERT_TYPE_ASSERT, "( botDifficultyString )", (const char *)&queryFormat, "botDifficultyString") )
    __debugbreak();
  v2 = BOT_STR_TBL_DIFFICULTY[0];
  v3 = 0;
  if ( !BOT_STR_TBL_DIFFICULTY[0] )
    return 5i64;
  v4 = 0i64;
  do
  {
    if ( !*v2 || v3 >= 6 )
      break;
    v5 = 0x7FFFFFFFi64;
    v6 = botDifficultyString;
    if ( !v2 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 212, ASSERT_TYPE_SANITY, "( s0 )", (const char *)&queryFormat, "s0") )
      __debugbreak();
    if ( !botDifficultyString && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 213, ASSERT_TYPE_SANITY, "( s1 )", (const char *)&queryFormat, "s1") )
      __debugbreak();
    v7 = v2 - botDifficultyString;
    while ( 1 )
    {
      v8 = (unsigned __int8)v6[v7];
      v9 = v5;
      v10 = *(unsigned __int8 *)v6++;
      --v5;
      if ( !v9 )
        return v3;
      if ( v8 != v10 )
      {
        v11 = v8 + 32;
        if ( (unsigned int)(v8 - 65) > 0x19 )
          v11 = v8;
        v8 = v11;
        v12 = v10 + 32;
        if ( (unsigned int)(v10 - 65) > 0x19 )
          v12 = v10;
        if ( v8 != v12 )
          break;
      }
      if ( !v8 )
        return v3;
    }
    v2 = BOT_STR_TBL_DIFFICULTY[++v4];
    ++v3;
  }
  while ( v2 );
  return 5i64;
}

/*
==============
Bot_DoGrenadeTrace
==============
*/
__int64 Bot_DoGrenadeTrace(bot_data_t *botData, const vec3_t *traceStart, const vec3_t *tracePeak, const vec3_t *traceEnd, const Bounds *grenadeBounds, int initialCheck)
{
  bool v11; 
  bool v12; 
  char v24; 
  const dvar_t *v29; 
  const dvar_t *v30; 
  unsigned int v31; 
  int v32; 
  __int64 result; 
  const dvar_t *v34; 
  const dvar_t *v35; 
  int v39; 
  int v40; 
  int v41; 
  int v42; 
  int v43; 
  int v44; 
  int v45; 
  int v46; 
  int v47; 
  trace_t v48; 
  trace_t results; 

  __asm { vmovaps [rsp+1A8h+var_58], xmm7 }
  _RSI = traceEnd;
  _RBP = tracePeak;
  _RDI = traceStart;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19382, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19383, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  v11 = grenadeBounds == NULL;
  if ( !grenadeBounds )
  {
    v12 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19384, ASSERT_TYPE_ASSERT, "( grenadeBounds )", (const char *)&queryFormat, "grenadeBounds");
    v11 = !v12;
    if ( v12 )
      __debugbreak();
  }
  __asm
  {
    vmovss  xmm0, dword ptr [rsi]
    vucomiss xmm0, dword ptr [rdi]
  }
  if ( v11 )
  {
    __asm
    {
      vmovss  xmm0, dword ptr [rsi+4]
      vucomiss xmm0, dword ptr [rdi+4]
    }
    if ( v11 )
    {
      __asm
      {
        vmovss  xmm0, dword ptr [rsi+8]
        vucomiss xmm0, dword ptr [rdi+8]
      }
      if ( v11 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19385, ASSERT_TYPE_ASSERT, "( !Vec3Compare( traceStart, traceEnd ) )", (const char *)&queryFormat, "!Vec3Compare( traceStart, traceEnd )") )
        __debugbreak();
    }
  }
  __asm
  {
    vmovss  xmm7, cs:__real@3f800000
    vmovss  xmm0, dword ptr [rdi]
    vmovss  [rsp+1A8h+var_148], xmm0
    vmovss  [rsp+1A8h+results.fraction], xmm7
    vmovss  [rsp+1A8h+var_128.fraction], xmm7
  }
  if ( (v39 & 0x7F800000) == 2139095040 )
    goto LABEL_61;
  __asm
  {
    vmovss  xmm0, dword ptr [rdi+4]
    vmovss  [rsp+1A8h+var_148], xmm0
  }
  if ( (v40 & 0x7F800000) == 2139095040 )
    goto LABEL_61;
  __asm
  {
    vmovss  xmm0, dword ptr [rdi+8]
    vmovss  [rsp+1A8h+var_148], xmm0
  }
  if ( (v41 & 0x7F800000) == 2139095040 )
  {
LABEL_61:
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19390, ASSERT_TYPE_ASSERT, "( !( IS_NAN( ( traceStart )[0] ) || IS_NAN( ( traceStart )[1] ) || IS_NAN( ( traceStart )[2] ) ) )", (const char *)&queryFormat, "!IS_NAN_VEC( traceStart )") )
      __debugbreak();
  }
  __asm
  {
    vmovss  xmm0, dword ptr [rbp+0]
    vmovss  [rsp+1A8h+var_148], xmm0
  }
  if ( (v42 & 0x7F800000) == 2139095040 )
    goto LABEL_62;
  __asm
  {
    vmovss  xmm0, dword ptr [rbp+4]
    vmovss  [rsp+1A8h+var_148], xmm0
  }
  if ( (v43 & 0x7F800000) == 2139095040 )
    goto LABEL_62;
  __asm
  {
    vmovss  xmm0, dword ptr [rbp+8]
    vmovss  [rsp+1A8h+var_148], xmm0
  }
  if ( (v44 & 0x7F800000) == 2139095040 )
  {
LABEL_62:
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19391, ASSERT_TYPE_ASSERT, "( !( IS_NAN( ( tracePeak )[0] ) || IS_NAN( ( tracePeak )[1] ) || IS_NAN( ( tracePeak )[2] ) ) )", (const char *)&queryFormat, "!IS_NAN_VEC( tracePeak )") )
      __debugbreak();
  }
  PhysicsQuery_LegacyTrace(PHYSICS_WORLD_ID_FIRST, &results, _RDI, _RBP, grenadeBounds, botData->botInfo.ent->s.number, 0, 8397185, 0, NULL, All, 0);
  __asm
  {
    vmovss  xmm0, [rsp+1A8h+results.fraction]
    vcomiss xmm0, xmm7
  }
  if ( v24 )
    goto LABEL_46;
  __asm
  {
    vmovss  xmm0, dword ptr [rsi]
    vmovss  [rsp+1A8h+var_148], xmm0
  }
  if ( (v45 & 0x7F800000) == 2139095040 )
    goto LABEL_63;
  __asm
  {
    vmovss  xmm0, dword ptr [rsi+4]
    vmovss  [rsp+1A8h+var_148], xmm0
  }
  if ( (v46 & 0x7F800000) == 2139095040 )
    goto LABEL_63;
  __asm
  {
    vmovss  xmm0, dword ptr [rsi+8]
    vmovss  [rsp+1A8h+var_148], xmm0
  }
  if ( (v47 & 0x7F800000) == 2139095040 )
  {
LABEL_63:
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19396, ASSERT_TYPE_ASSERT, "( !( IS_NAN( ( traceEnd )[0] ) || IS_NAN( ( traceEnd )[1] ) || IS_NAN( ( traceEnd )[2] ) ) )", (const char *)&queryFormat, "!IS_NAN_VEC( traceEnd )") )
      __debugbreak();
  }
  PhysicsQuery_LegacyTrace(PHYSICS_WORLD_ID_FIRST, &v48, _RBP, _RSI, grenadeBounds, botData->botInfo.ent->s.number, 0, 8397185, 0, NULL, All, 0);
  __asm
  {
    vmovss  xmm0, [rsp+1A8h+var_128.fraction]
    vcomiss xmm0, xmm7
  }
  if ( v24 )
  {
LABEL_46:
    v34 = DVARINT_bot_DrawDebugSpecial;
    if ( !DVARINT_bot_DrawDebugSpecial && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebugSpecial") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v34);
    if ( v34->current.integer == 9 )
      goto LABEL_55;
    v35 = DVARINT_bot_DrawDebugSpecial;
    if ( !DVARINT_bot_DrawDebugSpecial && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebugSpecial") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v35);
    if ( v35->current.integer == 10 )
    {
LABEL_55:
      if ( Bot_ShouldDrawDebugForBot(botData) && initialCheck )
      {
        __asm
        {
          vmovss  xmm0, [rsp+1A8h+results.fraction]
          vcomiss xmm0, xmm7
        }
        G_DebugLineWithDuration(_RDI, _RBP, &colorGreen, 0, 7);
        __asm
        {
          vmovss  xmm0, [rsp+1A8h+var_128.fraction]
          vcomiss xmm0, xmm7
        }
        G_DebugLineWithDuration(_RBP, _RSI, &colorGreen, 0, 7);
      }
    }
    result = 0i64;
  }
  else
  {
    v29 = DVARINT_bot_DrawDebugSpecial;
    if ( !DVARINT_bot_DrawDebugSpecial && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebugSpecial") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v29);
    if ( v29->current.integer == 9 )
      goto LABEL_41;
    v30 = DVARINT_bot_DrawDebugSpecial;
    if ( !DVARINT_bot_DrawDebugSpecial && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebugSpecial") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v30);
    if ( v30->current.integer == 10 )
    {
LABEL_41:
      if ( Bot_ShouldDrawDebugForBot(botData) && initialCheck )
      {
        v31 = 350;
        if ( Dvar_GetInt_Internal_DebugName(DVARINT_bot_DrawDebugSpecial, "bot_DrawDebugSpecial") == 10 )
          v31 = 4000;
        v32 = v31 / 0x32;
        G_DebugLineWithDuration(_RDI, _RBP, &colorGreen, 0, v32);
        G_DebugLineWithDuration(_RBP, _RSI, &colorGreen, 0, v32);
      }
    }
    result = 1i64;
  }
  __asm { vmovaps xmm7, [rsp+1A8h+var_58] }
  return result;
}

/*
==============
Bot_DrawDebug
==============
*/
void Bot_DrawDebug(bot_data_t *botData)
{
  unsigned int v12; 
  gentity_s *v13; 
  playerState_s *playerState; 
  const gentity_s *ent; 
  AIBotInterface *m_pAI; 
  const dvar_t *v25; 
  sentient_s *i; 
  const dvar_t *v38; 
  const dvar_t *v42; 
  pathnode_t *v43; 
  const dvar_t *v78; 
  const dvar_t *v80; 
  pathnode_t *v81; 
  const dvar_t *v90; 
  gentity_s *v92; 
  sentient_s *v97; 
  const gentity_s *v101; 
  __int16 EntityIndex; 
  const SvClientMP *MpClient; 
  int IsClientConnected; 
  bitarray_base<bitarray<224> > *AllTeamFlags; 
  const SvClientMP *v106; 
  signed __int64 v107; 
  const char *Name; 
  const dvar_t *v144; 
  const dvar_t *v147; 
  const dvar_t *v148; 
  const dvar_t *v157; 
  int CanSeeEnemy; 
  const vec4_t *v159; 
  const dvar_t *v160; 
  const dvar_t *v161; 
  const char *v162; 
  const vec3_t *p_lookAtPoint; 
  int Int_Internal_DebugName; 
  const pathnode_t *node; 
  bool v192; 
  unsigned int v199; 
  bool v200; 
  bool v201; 
  const char *v225; 
  bot_scr_goal_t ScriptGoalType; 
  const char *v228; 
  int v231; 
  PlayerHandIndex WeaponHandForViewWeapon; 
  const Weapon *ViewmodelWeapon; 
  const char *v236; 
  usercmd_s *lastUserCmd; 
  const char *v240; 
  const char *v243; 
  const char *v246; 
  unsigned int v249; 
  unsigned int v250; 
  const char *v251; 
  const char *v254; 
  bot_personality_t Personality; 
  __int64 v258; 
  double durationa; 
  __int64 duration; 
  __int64 v264; 
  double v265; 
  const char *v266; 
  playerState_s *ps; 
  AIBotWrapper v268; 
  vec3_t xyz; 
  vec3_t center; 
  vec3_t vEyePosOut; 
  vec3_t v272; 
  vec3_t start; 
  vec3_t vEyeDir; 
  Bounds color; 
  vec3_t end; 
  bitarray<224> iTeamFlags; 
  vec4_t v278; 
  bitarray<224> v279; 
  char result[256]; 

  _R15 = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21756, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v12 = 0;
  if ( EntHandle::isDefined(&_R15->botInfo.sentient->targetEnt) )
    v13 = EntHandle::ent(&_R15->botInfo.sentient->targetEnt);
  else
    v13 = NULL;
  playerState = _R15->botInfo.playerState;
  *(_QWORD *)v272.v = v13;
  ps = playerState;
  v266 = "<None>";
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21766, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  if ( !_R15->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21769, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  AICommonInterface::AICommonInterface(&v268.m_botInterface);
  v268.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v268.m_botAgentInterface);
  ent = _R15->botInfo.ent;
  v268.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v268.m_pAI = NULL;
  AIBotWrapper::Setup(&v268, ent);
  m_pAI = v268.m_pAI;
  *(_QWORD *)center.v = v268.m_pAI;
  if ( !v268.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21771, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  if ( _R15->botInfo.ent->health > 0 && Bot_ShouldDrawDebugForBot(_R15) )
  {
    _RAX = _R15->botInfo.ent;
    __asm
    {
      vmovups xmm0, xmmword ptr cs:?colorWhiteFaded@@3Tvec4_t@@B; vec4_t const colorWhiteFaded
      vmovaps [rsp+340h+var_40], xmm7
      vmovaps [rsp+340h+var_50], xmm8
      vmovaps [rsp+340h+var_60], xmm9
      vmovups xmmword ptr [rbp+240h+var_200], xmm0
      vmovss  xmm0, dword ptr [rax+130h]
      vmovaps [rsp+340h+var_80], xmm11
      vmovss  dword ptr [rbp+240h+xyz], xmm0
      vmovss  xmm1, dword ptr [rax+134h]
      vmovaps [rsp+340h+var_90], xmm12
      vmovss  dword ptr [rbp+240h+xyz+4], xmm1
      vmovss  xmm0, dword ptr [rax+138h]
      vaddss  xmm2, xmm0, cs:__real@42800000
      vmovaps [rsp+340h+var_A0], xmm13
      vmovaps [rsp+340h+var_B0], xmm14
      vmovss  dword ptr [rbp+240h+xyz+8], xmm2
      vmovaps [rsp+340h+var_C0], xmm15
      vmovss  xmm13, cs:__real@40a00000
      vmovss  xmm15, cs:__real@3e800000
    }
    if ( Bot_HasRemoteEyes(_R15) )
    {
      v25 = DVARINT_bot_DrawDebug;
      if ( !DVARINT_bot_DrawDebug && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebug") )
        __debugbreak();
      Dvar_CheckFrontendServerThread(v25);
      if ( v25->current.integer == 9 )
      {
        _RAX = Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) ? Com_TeamsSP_GetAllTeamFlags() : Com_TeamsMP_GetAllTeamFlags();
        __asm
        {
          vmovups xmm0, xmmword ptr [rax]
          vmovups xmmword ptr [rbp+240h+iTeamFlags.array], xmm0
          vmovsd  xmm1, qword ptr [rax+10h]
          vmovsd  qword ptr [rbp+240h+iTeamFlags.array+10h], xmm1
        }
        iTeamFlags.array[6] = _RAX->array[6];
        for ( i = Sentient_FirstSentient(&iTeamFlags); i; i = Sentient_NextSentient(i, &iTeamFlags) )
        {
          if ( Bot_IsCharacterActive(i->ent) && !AI_IsAlliedSentient(_R15->botInfo.sentient, i) )
          {
            AICommonInterface::GetEyeDirection(m_pAI, &vEyeDir);
            Sentient_GetEyePosition(_R15->botInfo.ent->sentient, &vEyePosOut);
            __asm
            {
              vmulss  xmm1, xmm13, dword ptr [rbp+240h+vEyeDir]
              vaddss  xmm2, xmm1, dword ptr [rbp+240h+vEyePosOut]
              vmulss  xmm1, xmm13, dword ptr [rbp+240h+vEyeDir+4]
              vmovss  dword ptr [rbp+240h+start], xmm2
              vaddss  xmm2, xmm1, dword ptr [rbp+240h+vEyePosOut+4]
              vmulss  xmm1, xmm13, dword ptr [rbp+240h+vEyeDir+8]
              vmovss  dword ptr [rbp+240h+start+4], xmm2
              vaddss  xmm2, xmm1, dword ptr [rbp+240h+vEyePosOut+8]
              vsubss  xmm3, xmm2, xmm15
              vmovss  dword ptr [rbp+240h+start+8], xmm3
            }
            if ( Bot_RecentSeeSentient(_R15, i, 1000) )
              __asm { vmovups xmm0, xmmword ptr cs:?colorRed@@3Tvec4_t@@B; vec4_t const colorRed }
            else
              __asm { vmovups xmm0, xmmword ptr cs:?colorOrange@@3Tvec4_t@@B; vec4_t const colorOrange }
            __asm { vmovups xmmword ptr [rbp+240h+color], xmm0 }
            Sentient_GetHeadPosition(i, &end);
            G_DebugLine(&start, &end, (const vec4_t *)&color, 1);
          }
        }
      }
    }
    v38 = DVARINT_bot_DrawDebug;
    if ( !DVARINT_bot_DrawDebug && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebug") )
      __debugbreak();
    __asm { vmovaps [rsp+340h+var_30], xmm6 }
    Dvar_CheckFrontendServerThread(v38);
    __asm
    {
      vmovss  xmm11, cs:__real@41700000
      vmovss  xmm12, cs:__real@42380000
      vmovss  xmm14, cs:__real@3f800000
    }
    if ( v38->current.integer == 6 )
      goto LABEL_188;
    v42 = DVARINT_bot_DrawDebug;
    if ( !DVARINT_bot_DrawDebug && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebug") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v42);
    if ( v42->current.integer == 7 )
    {
LABEL_188:
      if ( !Bot_HasScriptGoal(_R15) || Bot_ShouldDelayScriptGoalForAISearch(_R15) )
      {
        v43 = Path_ConvertIndexToNode(_R15->botInfo.currentAISearch.currentNodePicked);
        pathnode_t::GetPos(v43, &vEyeDir);
        _RCX = _R15->botInfo.ent;
        __asm
        {
          vmovups xmm0, cs:__xmm@41700000423800000000000000000000
          vmovss  xmm2, cs:__real@41f00000
          vmovups xmmword ptr [rbp+240h+color], xmm0
          vmovss  [rbp+240h+var_240], xmm11
          vmovss  [rbp+240h+var_23C], xmm12
          vmovss  xmm0, dword ptr [rcx+130h]
          vmovss  dword ptr [rbp+240h+start], xmm0
          vmovss  xmm1, dword ptr [rcx+134h]
          vmovss  xmm0, dword ptr [rbp+240h+vEyeDir]
          vmovss  dword ptr [rbp+240h+start+4], xmm1
          vmovss  xmm3, dword ptr [rcx+138h]
          vmovss  xmm1, dword ptr [rbp+240h+vEyeDir+4]
          vmovss  dword ptr [rbp+240h+vEyePosOut], xmm0
          vaddss  xmm0, xmm2, xmm3
          vaddss  xmm2, xmm2, dword ptr [rbp+240h+vEyeDir+8]
          vmovss  dword ptr [rbp+240h+vEyePosOut+8], xmm2
          vmovss  dword ptr [rbp+240h+vEyePosOut+4], xmm1
          vmovss  dword ptr [rbp+240h+start+8], xmm0
        }
        if ( _R15 == Bot_GetSpectatedBotData(LOCAL_CLIENT_0) )
        {
          __asm
          {
            vmovss  xmm0, dword ptr [rbp+240h+vEyePosOut]
            vsubss  xmm5, xmm0, dword ptr [rbp+240h+start]
            vmovss  xmm1, dword ptr [rbp+240h+vEyePosOut+4]
            vsubss  xmm6, xmm1, dword ptr [rbp+240h+start+4]
            vmovss  xmm0, dword ptr [rbp+240h+vEyePosOut+8]
            vsubss  xmm7, xmm0, dword ptr [rbp+240h+start+8]
            vmulss  xmm0, xmm7, xmm7
            vmulss  xmm2, xmm6, xmm6
            vmulss  xmm1, xmm5, xmm5
            vaddss  xmm3, xmm2, xmm1
            vaddss  xmm2, xmm3, xmm0
            vmovss  xmm3, cs:__real@41c00000
            vsqrtss xmm1, xmm2, xmm2
            vcmpless xmm0, xmm1, cs:__real@80000000
            vblendvps xmm0, xmm1, xmm14, xmm0
            vdivss  xmm4, xmm14, xmm0
            vmulss  xmm1, xmm5, xmm4
            vmulss  xmm0, xmm1, xmm3
            vaddss  xmm1, xmm0, dword ptr [rbp+240h+start]
            vmulss  xmm2, xmm6, xmm4
            vmulss  xmm0, xmm2, xmm3
            vmovss  dword ptr [rbp+240h+start], xmm1
            vaddss  xmm1, xmm0, dword ptr [rbp+240h+start+4]
            vmulss  xmm2, xmm7, xmm4
            vmulss  xmm0, xmm2, xmm3
            vmovss  dword ptr [rbp+240h+start+4], xmm1
            vaddss  xmm1, xmm0, dword ptr [rbp+240h+start+8]
            vmovaps [rsp+340h+var_70], xmm10
            vmovaps xmm10, [rsp+340h+var_70]
            vmovss  dword ptr [rbp+240h+start+8], xmm1
          }
        }
        G_DebugLine(&start, &vEyePosOut, &colorBlue, 1);
        v78 = DVARINT_bot_DrawDebug;
        if ( !DVARINT_bot_DrawDebug && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebug") )
          __debugbreak();
        Dvar_CheckFrontendServerThread(v78);
        if ( v78->current.integer == 7 )
        {
          *(double *)&_XMM0 = pathnode_t::GetAngle(v43);
          __asm { vmovaps xmm2, xmm0; yaw }
          G_DebugBox(&vEyeDir, &color, *(float *)&_XMM2, &colorBlue, 1, 0);
        }
        v80 = DVARINT_bot_DrawDebug;
        if ( !DVARINT_bot_DrawDebug && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebug") )
          __debugbreak();
        Dvar_CheckFrontendServerThread(v80);
        if ( v80->current.integer == 6 && _R15->botInfo.currentAISearch.currentNodeCount )
        {
          __asm { vmovss  xmm6, cs:__real@3a83126f }
          do
          {
            v81 = Path_ConvertIndexToNode(_R15->botInfo.currentAISearch.nodes[v12].nodeIndex);
            pathnode_t::GetPos(v81, &end);
            __asm
            {
              vmovups xmm1, xmmword ptr cs:?colorGreen@@3Tvec4_t@@B; vec4_t const colorGreen
              vsubps  xmm2, xmm1, xmmword ptr cs:?colorRed@@3Tvec4_t@@B; vec4_t const colorRed
              vxorps  xmm0, xmm0, xmm0
              vcvtsi2ss xmm0, xmm0, ecx
              vmulss  xmm0, xmm0, xmm6
              vshufps xmm0, xmm0, xmm0, 0
              vmulps  xmm0, xmm2, xmm0
              vaddps  xmm1, xmm0, xmmword ptr cs:?colorRed@@3Tvec4_t@@B; vec4_t const colorRed
              vmovups xmmword ptr [rbp+240h+color], xmm1
            }
            *(double *)&_XMM0 = pathnode_t::GetAngle(v81);
            __asm { vmovaps xmm2, xmm0; yaw }
            G_DebugBox(&end, &nodeBox_0, *(float *)&_XMM2, (const vec4_t *)&color, 1, 0);
            ++v12;
          }
          while ( v12 < _R15->botInfo.currentAISearch.currentNodeCount );
          m_pAI = *(AIBotInterface **)center.v;
        }
      }
    }
    v90 = DVARINT_bot_DrawDebug;
    if ( !DVARINT_bot_DrawDebug && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebug") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v90);
    __asm { vxorps  xmm9, xmm9, xmm9 }
    if ( v90->current.integer == 4 )
    {
      v92 = _R15->botInfo.ent;
      __asm
      {
        vmovups xmm0, cs:__xmm@41700000423800000000000000000000
        vmovss  [rbp+240h+iTeamFlags.array+10h], xmm11
        vmovss  [rbp+240h+iTeamFlags.array+14h], xmm12
        vmovups xmmword ptr [rbp+240h+iTeamFlags.array], xmm0
      }
      Sentient_GetEyePosition(v92->sentient, &end);
      _RAX = Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) ? Com_TeamsSP_GetAllTeamFlags() : Com_TeamsMP_GetAllTeamFlags();
      __asm
      {
        vmovups xmm0, xmmword ptr [rax]
        vmovups xmmword ptr [rbp+240h+var_1F0.array], xmm0
        vmovsd  xmm1, qword ptr [rax+10h]
        vmovsd  qword ptr [rbp+240h+var_1F0.array+10h], xmm1
      }
      v279.array[6] = _RAX->array[6];
      v97 = Sentient_FirstSentient(&v279);
      if ( v97 )
      {
        __asm
        {
          vmovss  xmm7, cs:__real@48742400
          vmovss  xmm8, cs:__real@42700000
          vxorpd  xmm6, xmm6, xmm6
        }
        while ( 1 )
        {
          v101 = v97->ent;
          if ( v97->ent )
          {
            EntityIndex = G_GetEntityIndex(v97->ent);
            if ( G_IsEntityInUse(EntityIndex) )
            {
              if ( v101->sentient )
              {
                if ( v101->client )
                {
                  MpClient = SV_Client_GetMpClient(v101->s.number);
                  IsClientConnected = Bot_IsClientConnected(MpClient);
                }
                else
                {
                  if ( !v101->agent )
                    goto LABEL_76;
                  IsClientConnected = v101->s.eType == ET_AGENT;
                }
                if ( IsClientConnected )
                {
LABEL_76:
                  if ( v101->s.eType != ET_INVISIBLE )
                  {
                    AllTeamFlags = (bitarray_base<bitarray<224> > *)Com_TeamsMP_GetAllTeamFlags();
                    if ( bitarray_base<bitarray<224>>::testBit(AllTeamFlags, v101->sentient->eTeam) )
                    {
                      if ( !v101->client || (v106 = SV_Client_GetMpClient(v101->s.number), Bot_IsClientActive(v106)) )
                      {
                        if ( !AI_IsAlliedSentient(_R15->botInfo.ent->sentient, v97) )
                        {
                          v107 = 60 * (v97 - level.sentients);
                          _RBX = (__int64)&_R15->scriptedAgentInfo + v107 + 11644;
                          if ( (bot_data_t *)((char *)_R15 + v107) == (bot_data_t *)-11652i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21887, ASSERT_TYPE_ASSERT, "( botSentientInfo )", (const char *)&queryFormat, "botSentientInfo") )
                            __debugbreak();
                          if ( !Bot_SightThresholdExpiredOrNotStarted((bot_sight_threshold_t *)(_RBX + 8)) )
                          {
                            __asm
                            {
                              vmovss  xmm0, dword ptr [rbx+14h]
                              vmovss  xmm1, dword ptr [rbx+18h]
                              vsubss  xmm3, xmm0, dword ptr [rax+130h]
                              vsubss  xmm2, xmm1, dword ptr [rax+134h]
                              vmovss  xmm0, dword ptr [rbx+1Ch]
                              vsubss  xmm4, xmm0, dword ptr [rax+138h]
                              vmulss  xmm2, xmm2, xmm2
                              vmulss  xmm1, xmm3, xmm3
                              vmulss  xmm0, xmm4, xmm4
                              vaddss  xmm3, xmm2, xmm1
                              vaddss  xmm2, xmm3, xmm0
                              vcomiss xmm2, xmm7
                              vmovss  xmm0, dword ptr [rbx+10h]
                              vcomiss xmm0, xmm9
                              vcvtss2sd xmm0, xmm0, xmm0
                              vmovsd  [rsp+340h+var_310], xmm6
                              vmovsd  qword ptr [rsp+340h+duration], xmm0
                            }
                            if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21894, ASSERT_TYPE_ASSERT, "( botSentientInfo->sightThreshold.nextSightThreshold ) > ( 0.0f )", "botSentientInfo->sightThreshold.nextSightThreshold > 0.0f\n\t%g, %g", durationa, v265) )
                              __debugbreak();
                            __asm
                            {
                              vmovss  xmm0, dword ptr [rbx+0Ch]
                              vdivss  xmm1, xmm0, dword ptr [rbx+10h]
                              vmovups xmm0, xmmword ptr cs:?colorRed@@3Tvec4_t@@B; vec4_t const colorRed
                              vsubps  xmm2, xmm0, xmmword ptr cs:?colorGreen@@3Tvec4_t@@B; vec4_t const colorGreen
                              vminss  xmm1, xmm1, xmm14
                              vshufps xmm1, xmm1, xmm1, 0
                              vmulps  xmm0, xmm2, xmm1
                              vaddps  xmm1, xmm0, xmmword ptr cs:?colorGreen@@3Tvec4_t@@B; vec4_t const colorGreen
                              vmovups xmmword ptr [rbp+240h+color], xmm1
                              vmovss  xmm0, dword ptr [rbx+14h]
                              vmovss  dword ptr [rbp+240h+vEyeDir], xmm0
                              vmovss  xmm1, dword ptr [rbx+18h]
                              vmovss  dword ptr [rbp+240h+vEyeDir+4], xmm1
                              vaddss  xmm2, xmm8, dword ptr [rbx+1Ch]
                              vmovss  dword ptr [rbp+240h+vEyeDir+8], xmm2
                            }
                            G_DebugLine(&end, &vEyeDir, (const vec4_t *)&color, 1);
                            __asm { vmovaps xmm2, xmm9; yaw }
                            G_DebugBox((const vec3_t *)(_RBX + 20), (const Bounds *)&iTeamFlags, *(float *)&_XMM2, (const vec4_t *)&color, 1, 0);
                            _RAX = v97->ent;
                            __asm
                            {
                              vmovss  xmm0, dword ptr [rax+130h]
                              vmovss  dword ptr [rbp+240h+vEyePosOut], xmm0
                              vmovss  xmm1, dword ptr [rax+134h]
                              vmovss  dword ptr [rbp+240h+vEyePosOut+4], xmm1
                              vaddss  xmm2, xmm8, dword ptr [rax+138h]
                              vmovss  dword ptr [rbp+240h+vEyePosOut+8], xmm2
                            }
                            G_DebugLine(&vEyeDir, &vEyePosOut, (const vec4_t *)&color, 1);
                            __asm { vmovaps xmm2, xmm9; yaw }
                            G_DebugBox(&v97->ent->r.currentOrigin, (const Bounds *)&iTeamFlags, *(float *)&_XMM2, (const vec4_t *)&color, 1, 0);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          v97 = Sentient_NextSentient(v97, &v279);
          if ( !v97 )
          {
            v13 = *(gentity_s **)v272.v;
            m_pAI = *(AIBotInterface **)center.v;
            break;
          }
        }
      }
    }
    __asm
    {
      vmovaps xmm12, [rsp+340h+var_90]
      vmovaps xmm11, [rsp+340h+var_80]
    }
    if ( v13 )
    {
      if ( v13->client )
        Name = SV_ClientMP_GetName(v13->s.number);
      else
        Name = SL_ConvertToString(v13->classname);
      __asm
      {
        vmovups xmm0, xmmword ptr cs:?colorGreen@@3Tvec4_t@@B; vec4_t const colorGreen
        vmovups xmmword ptr [rbp+240h+var_200], xmm0
      }
      v266 = Name;
    }
    v144 = DVARINT_bot_DrawDebug;
    if ( !DVARINT_bot_DrawDebug && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebug") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v144);
    __asm
    {
      vmovss  xmm7, cs:__real@3f266666
      vmovss  xmm8, cs:__real@41200000
    }
    if ( v144->current.integer == 2 )
      goto LABEL_108;
    v147 = DVARINT_bot_DrawDebug;
    if ( !DVARINT_bot_DrawDebug && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebug") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v147);
    if ( v147->current.integer == 3 )
      goto LABEL_108;
    v148 = DVARINT_bot_DrawDebug;
    if ( !DVARINT_bot_DrawDebug && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebug") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v148);
    if ( v148->current.integer == 5 )
    {
LABEL_108:
      AICommonInterface::GetEyeDirection(m_pAI, &start);
      Sentient_GetEyePosition(_R15->botInfo.ent->sentient, &center);
      if ( Bot_IsRemoteEyesVehicle(_R15) && Bot_GetRemoteVehicleType(_R15) == BOT_VEHICLE_3RD_PERSON )
      {
        __asm
        {
          vmovsd  xmm0, qword ptr [rbp+240h+center]
          vmovsd  qword ptr [rbp+240h+var_288], xmm0
        }
        v272.v[2] = center.v[2];
      }
      else
      {
        __asm
        {
          vmulss  xmm1, xmm13, dword ptr [rbp+240h+start]
          vaddss  xmm2, xmm1, dword ptr [rbp+240h+center]
          vmulss  xmm1, xmm13, dword ptr [rbp+240h+start+4]
          vmovss  dword ptr [rbp+240h+var_288], xmm2
          vaddss  xmm2, xmm1, dword ptr [rbp+240h+center+4]
          vmulss  xmm1, xmm13, dword ptr [rbp+240h+start+8]
          vmovss  dword ptr [rbp+240h+var_288+4], xmm2
          vaddss  xmm2, xmm1, dword ptr [rbp+240h+center+8]
          vsubss  xmm3, xmm2, xmm15
          vmovss  dword ptr [rbp+240h+var_288+8], xmm3
        }
      }
      v157 = DVARINT_bot_DrawDebug;
      if ( !DVARINT_bot_DrawDebug && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebug") )
        __debugbreak();
      Dvar_CheckFrontendServerThread(v157);
      if ( v157->current.integer == 2 )
      {
        CanSeeEnemy = Bot_CanSeeEnemy(_R15);
        if ( v13 )
        {
          if ( !v13->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21952, ASSERT_TYPE_ASSERT, "( pEnemy->sentient )", (const char *)&queryFormat, "pEnemy->sentient") )
            __debugbreak();
          Sentient_GetHeadPosition(v13->sentient, &vEyePosOut);
          v159 = &colorRed;
          if ( !CanSeeEnemy )
            v159 = &colorOrange;
          G_DebugLine(&v272, &vEyePosOut, v159, 1);
        }
      }
      v160 = DVARINT_bot_DrawDebug;
      if ( !DVARINT_bot_DrawDebug && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebug") )
        __debugbreak();
      Dvar_CheckFrontendServerThread(v160);
      if ( v160->current.integer == 2 )
        goto LABEL_131;
      v161 = DVARINT_bot_DrawDebug;
      if ( !DVARINT_bot_DrawDebug && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebug") )
        __debugbreak();
      Dvar_CheckFrontendServerThread(v161);
      if ( v161->current.integer == 5 )
      {
LABEL_131:
        v162 = j_va("ENEMY: %s", v266);
        __asm { vmovaps xmm3, xmm7; scale }
        SV_BotDebugString(_R15, &xyz, &v278, *(float *)&_XMM3, v162, 0);
        __asm
        {
          vaddss  xmm1, xmm8, dword ptr [rbp+240h+xyz+8]
          vmovss  dword ptr [rbp+240h+xyz+8], xmm1
        }
      }
      if ( Dvar_GetInt_Internal_DebugName(DVARINT_bot_DrawDebug, "bot_DrawDebug") == 3 )
      {
        if ( Bot_HasRemoteEyes(_R15) )
          __asm { vmovss  xmm3, cs:__real@43160000 }
        else
          __asm { vmovss  xmm3, cs:__real@42480000 }
        __asm
        {
          vmulss  xmm1, xmm3, dword ptr [rbp+240h+start]
          vaddss  xmm2, xmm1, dword ptr [rbp+240h+center]
          vmulss  xmm1, xmm3, dword ptr [rbp+240h+start+4]
          vmovss  dword ptr [rbp+240h+vEyePosOut], xmm2
          vaddss  xmm2, xmm1, dword ptr [rbp+240h+center+4]
          vmulss  xmm1, xmm3, dword ptr [rbp+240h+start+8]
          vmovss  dword ptr [rbp+240h+vEyePosOut+4], xmm2
          vaddss  xmm2, xmm1, dword ptr [rbp+240h+center+8]
          vmovss  dword ptr [rbp+240h+vEyePosOut+8], xmm2
        }
        G_DebugLine(&v272, &vEyePosOut, &colorBlue, 1);
        if ( (_R15->botInfo.flags & 0x200) != 0 )
        {
          G_DebugLine(&v272, &_R15->botInfo.enemyTrack.awarePoint, &colorRed, 1);
          __asm { vmovaps xmm3, xmm14; scale }
          SV_BotDebugString(_R15, &_R15->botInfo.enemyTrack.awarePoint, &colorRed, *(float *)&_XMM3, "aware", 0);
        }
        if ( Bot_HasRemoteEyes(_R15) )
        {
          __asm { vmovaps xmm1, xmm13; radius }
          G_DebugSphere(&center, *(float *)&_XMM1, &colorBlue, 1, 0);
        }
        if ( _R15->botInfo.lookAtTime >= level.time )
        {
          p_lookAtPoint = &_R15->botInfo.lookAtPoint;
          if ( (_R15->botDebugData.flags & 2) != 0 )
          {
            G_DebugLine(&v272, p_lookAtPoint, &colorCyan, 0);
            __asm { vmovaps xmm3, xmm14; scale }
            SV_BotDebugString(_R15, &center, &colorCyan, *(float *)&_XMM3, BOT_STR_TBL_LOOK_TYPE[_R15->botInfo.lookAtType], 0);
            __asm { vmovaps xmm3, xmm14; scale }
            SV_BotDebugString(NULL, &_R15->botInfo.lookAtPoint, &colorCyan, *(float *)&_XMM3, BOT_STR_TBL_LOOK_TYPE[_R15->botInfo.lookAtType], 0);
          }
          else
          {
            G_DebugLine(&v272, p_lookAtPoint, &colorDkCyan, 0);
            __asm { vmovaps xmm3, xmm14; scale }
            SV_BotDebugString(_R15, &center, &colorCyan, *(float *)&_XMM3, BOT_STR_TBL_LOOK_TYPE[_R15->botInfo.lookAtType], 0);
            __asm { vmovaps xmm3, xmm14; scale }
            SV_BotDebugString(NULL, &_R15->botInfo.lookAtPoint, &colorDkCyan, *(float *)&_XMM3, BOT_STR_TBL_LOOK_TYPE[_R15->botInfo.lookAtType], 0);
          }
        }
      }
    }
    Int_Internal_DebugName = Dvar_GetInt_Internal_DebugName(DVARINT_bot_DrawDebug, "bot_DrawDebug");
    __asm
    {
      vmovaps xmm15, [rsp+340h+var_C0]
      vmovaps xmm14, [rsp+340h+var_B0]
      vmovaps xmm13, [rsp+340h+var_A0]
    }
    if ( Int_Internal_DebugName != 1 && Dvar_GetInt_Internal_DebugName(DVARINT_bot_DrawDebug, "bot_DrawDebug") != 2 && Dvar_GetInt_Internal_DebugName(DVARINT_bot_DrawDebug, "bot_DrawDebug") != 5 )
      goto LABEL_177;
    if ( Bot_GetScriptGoalType(_R15) )
    {
      _RAX = _R15->botInfo.ent;
      __asm
      {
        vmovss  dword ptr [rbp+240h+vEyePosOut], xmm9
        vmovss  dword ptr [rbp+240h+vEyePosOut+4], xmm9
        vmovss  dword ptr [rbp+240h+vEyePosOut+8], xmm9
        vmovss  xmm0, dword ptr [rax+130h]
        vmovss  dword ptr [rbp+240h+var_288], xmm0
        vmovss  xmm1, dword ptr [rax+134h]
        vmovss  dword ptr [rbp+240h+var_288+4], xmm1
        vmovss  xmm0, dword ptr [rax+138h]
        vmovss  dword ptr [rbp+240h+var_288+8], xmm0
      }
      Bot_GetScriptGoal(_R15, &end);
      __asm
      {
        vmovsd  xmm0, qword ptr [rbp+240h+end]
        vmovsd  qword ptr [rbp+240h+center], xmm0
      }
      center.v[2] = end.v[2];
      if ( Bot_PathExists(&_R15->botInfo) )
      {
        if ( Bot_ActiveGoalIsScriptGoal(_R15) )
          __asm { vmovups xmm0, xmmword ptr cs:?colorWhite@@3Tvec4_t@@B; vec4_t const colorWhite }
        else
          __asm { vmovups xmm0, xmmword ptr cs:?colorMdGrey@@3Tvec4_t@@B; vec4_t const colorMdGrey }
      }
      else
      {
        __asm { vmovups xmm0, xmmword ptr cs:?colorRed@@3Tvec4_t@@B; vec4_t const colorRed }
      }
      __asm { vmovups xmmword ptr [rbp+240h+color], xmm0 }
      G_DebugLine(&v272, &center, (const vec4_t *)&color, 0);
      if ( (LOBYTE(_R15->scriptedAgentInfo.blackboard.m_ShootParams.m_Pos.v[0]) & 4) != 0 )
      {
        __asm { vmovss  xmm0, dword ptr [r15+228h]; yaw }
        YawVectors(*(float *)&_XMM0, &vEyePosOut, NULL);
      }
      node = _R15->botInfo.scriptGoal.node;
      __asm
      {
        vmovups xmm0, xmmword ptr [rbp+240h+color]
        vmovdqa xmmword ptr [rbp+240h+iTeamFlags.array], xmm0
      }
      v192 = node == NULL;
      if ( node )
      {
        _RAX = Path_DebugNodeColor(node);
        __asm
        {
          vmovss  xmm0, dword ptr [rax]
          vmovss  [rbp+240h+iTeamFlags.array], xmm0
          vmovss  xmm1, dword ptr [rax+4]
          vmovss  [rbp+240h+iTeamFlags.array+4], xmm1
          vmovss  xmm0, dword ptr [rax+8]
          vmovss  [rbp+240h+iTeamFlags.array+8], xmm0
        }
      }
      __asm
      {
        vmovss  xmm6, dword ptr [r15+20Ch]
        vucomiss xmm6, xmm9
      }
      if ( v192 )
      {
        if ( Bot_PathExists(&_R15->botInfo) )
          __asm { vmovss  xmm6, dword ptr [r15+24Ch] }
        else
          __asm { vmovss  xmm6, cs:__real@41800000 }
      }
      __asm { vmovaps xmm1, xmm6; radius }
      G_DebugCircle(&center, *(float *)&_XMM1, (const vec4_t *)&iTeamFlags, 0, 1, 1);
      v199 = Dvar_GetInt_Internal_DebugName(DVARINT_bot_DrawDebug, "bot_DrawDebug");
      v200 = v199 < 5;
      v201 = v199 == 5;
      if ( v199 == 5 )
      {
        v200 = _R15->botInfo.scriptGoal.type < (unsigned int)BOT_SCR_GOAL_OBJECTIVE;
        v201 = _R15->botInfo.scriptGoal.type == BOT_SCR_GOAL_OBJECTIVE;
        if ( _R15->botInfo.scriptGoal.type == BOT_SCR_GOAL_OBJECTIVE )
        {
          __asm
          {
            vmovss  xmm2, dword ptr [r15+234h]
            vmovss  xmm0, cs:__real@43c80000
            vcmpless xmm1, xmm2, xmm9
            vblendvps xmm1, xmm2, xmm0, xmm1; radius
          }
          G_DebugCircle(&center, *(float *)&_XMM1, &colorGreen, 0, 1, 1);
        }
      }
      __asm
      {
        vmovss  xmm2, dword ptr [rbp+240h+vEyePosOut+4]
        vmovss  xmm3, dword ptr [rbp+240h+vEyePosOut]
        vmulss  xmm1, xmm2, xmm2
        vmulss  xmm0, xmm3, xmm3
        vaddss  xmm1, xmm1, xmm0
        vcomiss xmm1, cs:__real@3c23d70a
      }
      if ( !v200 && !v201 )
      {
        __asm
        {
          vmulss  xmm0, xmm6, xmm3
          vaddss  xmm1, xmm0, dword ptr [rbp+240h+center]
          vmulss  xmm2, xmm6, xmm2
          vaddss  xmm0, xmm2, dword ptr [rbp+240h+center+4]
          vmovss  dword ptr [rbp+240h+var_288], xmm1
          vmovss  xmm1, dword ptr [rbp+240h+center+8]
          vmovss  dword ptr [rbp+240h+var_288+8], xmm1
          vmovss  dword ptr [rbp+240h+var_288+4], xmm0
        }
        G_DebugLine(&center, &v272, (const vec4_t *)&iTeamFlags, 0);
      }
      if ( (LOBYTE(_R15->scriptedAgentInfo.blackboard.m_ShootParams.m_Pos.v[0]) & 4) != 0 )
      {
        __asm
        {
          vmovsd  xmm0, qword ptr [rbp+240h+center]
          vmovsd  qword ptr [rbp+240h+var_288], xmm0
          vmovss  xmm0, dword ptr [r15+228h]
        }
        v272.v[2] = center.v[2];
        __asm
        {
          vmovss  dword ptr [rbp+240h+vEyeDir+4], xmm0
          vmovss  dword ptr [rbp+240h+vEyeDir], xmm9
          vmovss  dword ptr [rbp+240h+vEyeDir+8], xmm9
        }
        AngleVectors(&vEyeDir, &start, NULL, NULL);
        __asm
        {
          vmulss  xmm0, xmm6, dword ptr [rbp+240h+start]
          vaddss  xmm1, xmm0, dword ptr [rbp+240h+center]
          vmulss  xmm2, xmm6, dword ptr [rbp+240h+start+4]
          vaddss  xmm0, xmm2, dword ptr [rbp+240h+center+4]
          vmovss  dword ptr [rbp+240h+var_288], xmm1
          vmulss  xmm1, xmm6, dword ptr [rbp+240h+start+8]
          vaddss  xmm2, xmm1, dword ptr [rbp+240h+center+8]
          vmovss  dword ptr [rbp+240h+var_288+8], xmm2
          vmovss  dword ptr [rbp+240h+var_288+4], xmm0
        }
        G_DebugLine(&v272, &center, (const vec4_t *)&color, 0);
      }
      if ( Dvar_GetInt_Internal_DebugName(DVARINT_bot_DrawDebug, "bot_DrawDebug") != 2 && Dvar_GetInt_Internal_DebugName(DVARINT_bot_DrawDebug, "bot_DrawDebug") != 5 )
        goto LABEL_177;
      __asm { vmovaps xmm3, xmm7; scale }
      v225 = "PATH: <Script Goal and Yaw>";
      if ( (LOBYTE(_R15->scriptedAgentInfo.blackboard.m_ShootParams.m_Pos.v[0]) & 4) == 0 )
        v225 = "PATH: <Script Goal>";
      SV_BotDebugString(_R15, &xyz, &colorWhite, *(float *)&_XMM3, v225, 0);
      __asm
      {
        vaddss  xmm1, xmm8, dword ptr [rbp+240h+xyz+8]
        vmovss  dword ptr [rbp+240h+xyz+8], xmm1
      }
      ScriptGoalType = Bot_GetScriptGoalType(_R15);
      v228 = j_va("GOAL TYPE: %s", BOT_STR_TBL_GOAL_TYPE[ScriptGoalType]);
    }
    else
    {
      if ( Dvar_GetInt_Internal_DebugName(DVARINT_bot_DrawDebug, "bot_DrawDebug") == 1 )
      {
LABEL_177:
        v231 = Dvar_GetInt_Internal_DebugName(DVARINT_bot_DrawDebug, "bot_DrawDebug");
        __asm
        {
          vmovaps xmm9, [rsp+340h+var_60]
          vmovaps xmm6, [rsp+340h+var_30]
        }
        if ( v231 == 5 )
        {
          WeaponHandForViewWeapon = Bot_Weap_GetWeaponHandForViewWeapon(ps);
          ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(ps);
          v236 = j_va("FLAGS: 0x%04x BUTTONS: 0x%016zx", (unsigned int)_R15->botInfo.flags, _R15->botInfo.lastUserCmd->buttons);
          __asm { vmovaps xmm3, xmm7; scale }
          SV_BotDebugString(_R15, &xyz, &colorWhite, *(float *)&_XMM3, v236, 0);
          lastUserCmd = _R15->botInfo.lastUserCmd;
          __asm
          {
            vaddss  xmm1, xmm8, dword ptr [rbp+240h+xyz+8]
            vmovss  dword ptr [rbp+240h+xyz+8], xmm1
          }
          v240 = j_va("MOVE: ( %i, %i )", (unsigned int)lastUserCmd->forwardmove, (unsigned int)lastUserCmd->rightmove);
          __asm { vmovaps xmm3, xmm7; scale }
          SV_BotDebugString(_R15, &xyz, &colorWhite, *(float *)&_XMM3, v240, 0);
          __asm
          {
            vaddss  xmm1, xmm8, dword ptr [rbp+240h+xyz+8]
            vmovss  dword ptr [rbp+240h+xyz+8], xmm1
          }
          Bot_Weap_Name(ViewmodelWeapon, result, 256);
          v243 = j_va("WEAPON: %s", result);
          __asm { vmovaps xmm3, xmm7; scale }
          SV_BotDebugString(_R15, &xyz, &colorWhite, *(float *)&_XMM3, v243, 0);
          __asm
          {
            vaddss  xmm1, xmm8, dword ptr [rbp+240h+xyz+8]
            vmovss  dword ptr [rbp+240h+xyz+8], xmm1
          }
          v246 = j_va("WEAPON FLAGS: 0x%08x 0x%08x", ps->weapCommon.weapFlags.m_flags[0], ps->weapCommon.weapFlags.m_flags[1]);
          __asm { vmovaps xmm3, xmm7; scale }
          SV_BotDebugString(_R15, &xyz, &colorWhite, *(float *)&_XMM3, v246, 0);
          __asm
          {
            vaddss  xmm1, xmm8, dword ptr [rbp+240h+xyz+8]
            vmovss  dword ptr [rbp+240h+xyz+8], xmm1
          }
          v249 = Bot_Weap_AmmoNotInClip(ps, ViewmodelWeapon);
          v250 = Bot_Weap_AmmoInClip(ps, ViewmodelWeapon, WeaponHandForViewWeapon);
          v251 = j_va("HEALTH: %i AMMO: %i/%i", (unsigned int)_R15->botInfo.ent->health, v250, v249);
          __asm { vmovaps xmm3, xmm7; scale }
          SV_BotDebugString(_R15, &xyz, &colorWhite, *(float *)&_XMM3, v251, 0);
          __asm
          {
            vaddss  xmm1, xmm8, dword ptr [rbp+240h+xyz+8]
            vmovss  dword ptr [rbp+240h+xyz+8], xmm1
          }
        }
        if ( Dvar_GetInt_Internal_DebugName(DVARINT_bot_DrawDebug, "bot_DrawDebug") == 2 || Dvar_GetInt_Internal_DebugName(DVARINT_bot_DrawDebug, "bot_DrawDebug") == 5 )
        {
          v254 = j_va("TRAVERSAL: 0x%x", (unsigned int)_R15->botInfo.traversal);
          __asm { vmovaps xmm3, xmm7; scale }
          SV_BotDebugString(_R15, &xyz, &colorWhite, *(float *)&_XMM3, v254, 0);
          __asm
          {
            vaddss  xmm1, xmm8, dword ptr [rbp+240h+xyz+8]
            vmovss  dword ptr [rbp+240h+xyz+8], xmm1
          }
          Personality = Bot_GetPersonality(_R15);
          v258 = Personality;
          if ( (unsigned int)Personality >= BOT_PERSONALITY_DEFAULT )
          {
            LODWORD(v264) = 3;
            LODWORD(duration) = Personality;
            if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20782, ASSERT_TYPE_ASSERT, "(unsigned)( type ) < (unsigned)( BOT_PERSONALITY_DEFAULT )", "type doesn't index BOT_PERSONALITY_DEFAULT\n\t%i not in [0, %i)", duration, v264) )
              __debugbreak();
          }
          __asm { vmovaps xmm3, xmm7; scale }
          SV_BotDebugString(_R15, &xyz, &colorWhite, *(float *)&_XMM3, BOT_STR_TBL_PERSONALITY[v258], 0);
        }
        __asm
        {
          vmovaps xmm7, [rsp+340h+var_40]
          vmovaps xmm8, [rsp+340h+var_50]
        }
        return;
      }
      v228 = "PATH: <THREAT>";
      if ( !v13 )
        v228 = "PATH: <NONE>";
    }
    __asm { vmovaps xmm3, xmm7; scale }
    SV_BotDebugString(_R15, &xyz, &colorWhite, *(float *)&_XMM3, v228, 0);
    __asm
    {
      vaddss  xmm1, xmm8, dword ptr [rbp+240h+xyz+8]
      vmovss  dword ptr [rbp+240h+xyz+8], xmm1
    }
    goto LABEL_177;
  }
}

/*
==============
Bot_DrawDebugErrorLocation
==============
*/
void Bot_DrawDebugErrorLocation(const bot_data_t *botData, const bot_error_loc_t *errorLoc)
{
  bool v14; 
  const dvar_t *v23; 
  pathnode_t *v24; 
  pathnode_t *v25; 
  int traversal; 
  const char *v32; 
  __int64 right; 
  __int64 v36; 
  const char *v37; 
  __int64 jumpCount; 
  const char *v41; 
  int v43; 
  const vec4_t *v44; 
  vec3_t *p_pos; 
  vec3_t *v46; 
  char type; 
  bool v49; 
  const char *v51; 
  const dvar_t *v52; 
  char v80; 
  const char *string; 
  __int64 v94; 
  vec3_t xyz; 
  vec3_t point; 
  vec3_t forward; 
  vec3_t v117; 
  vec3_t pos; 
  vec3_t v119; 
  vec3_t start; 
  vec3_t end; 

  _RBX = errorLoc;
  if ( !errorLoc && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2770, ASSERT_TYPE_ASSERT, "( errorLoc )", (const char *)&queryFormat, "errorLoc") )
    __debugbreak();
  __asm
  {
    vmovss  xmm0, dword ptr [rbx+8]
    vmovss  xmm2, dword ptr [rbx]
    vmovss  xmm1, dword ptr [rbx+4]
    vmovss  dword ptr [rsp+130h+xyz+8], xmm0
    vaddss  xmm0, xmm0, cs:__real@42480000
    vmovss  dword ptr [rbp+30h+start+8], xmm0
    vmovss  xmm0, dword ptr [rbx+28h]; yaw
    vmovaps [rsp+130h+var_30], xmm6
    vmovss  dword ptr [rsp+130h+xyz], xmm2
    vmovss  dword ptr [rsp+130h+xyz+4], xmm1
    vmovss  dword ptr [rbp+30h+start], xmm2
    vmovss  dword ptr [rbp+30h+start+4], xmm1
    vmovaps [rsp+130h+var_40], xmm7
  }
  YawVectors(*(float *)&_XMM0, &forward, NULL);
  v14 = _RBX->type == 0;
  __asm
  {
    vmovss  xmm1, dword ptr [rsp+130h+forward]
    vxorps  xmm0, xmm0, xmm0
    vmovss  dword ptr [rsp+130h+forward+8], xmm0
    vmulss  xmm0, xmm1, cs:__real@41f00000
    vaddss  xmm2, xmm0, dword ptr [rbp+30h+start]
    vmovss  xmm1, dword ptr [rsp+130h+forward+4]
    vmulss  xmm0, xmm1, cs:__real@41f00000
    vmovss  xmm1, dword ptr [rbp+30h+start+8]
    vmovss  dword ptr [rbp+30h+end], xmm2
    vaddss  xmm2, xmm0, dword ptr [rbp+30h+start+4]
    vmovss  dword ptr [rbp+30h+end+4], xmm2
    vmovss  dword ptr [rbp+30h+end+8], xmm1
  }
  if ( v14 )
  {
    v23 = DVARINT_bot_DrawBrokenTraversals;
    if ( !DVARINT_bot_DrawBrokenTraversals && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawBrokenTraversals") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v23);
    if ( v23->current.integer > 0 )
    {
      if ( Path_NodeValid(_RBX->nodeStart) )
        v24 = Path_ConvertIndexToNode(_RBX->nodeStart);
      else
        v24 = NULL;
      if ( Path_NodeValid(_RBX->nodeEnd) )
        v25 = Path_ConvertIndexToNode(_RBX->nodeEnd);
      else
        v25 = NULL;
      if ( !v24 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2783, ASSERT_TYPE_ASSERT, "( negotiationStartNode )", (const char *)&queryFormat, "negotiationStartNode") )
        __debugbreak();
      if ( !v25 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2784, ASSERT_TYPE_ASSERT, "( negotiationEndNode )", (const char *)&queryFormat, "negotiationEndNode") )
        __debugbreak();
      __asm { vmovss  xmm2, dword ptr [rbx+28h]; yaw }
      G_DebugBox(&_RBX->origin, &actorBox, *(float *)&_XMM2, &colorRed, 0, 1);
      G_DebugLineWithDuration(&start, &end, &colorRed, 0, 1);
      __asm
      {
        vmovss  xmm6, cs:__real@3f800000
        vmovaps xmm2, xmm6; scale
      }
      G_Main_AddDebugStringWithDuration(&xyz, &colorRed, *(float *)&_XMM2, "STUCK TRAVERSAL", 1);
      __asm
      {
        vmovss  xmm7, cs:__real@41300000
        vaddss  xmm1, xmm7, dword ptr [rsp+130h+xyz+8]
      }
      traversal = _RBX->traversal;
      __asm { vmovss  dword ptr [rsp+130h+xyz+8], xmm1 }
      if ( (traversal & 1) != 0 )
      {
        v32 = "LADDER";
      }
      else if ( (traversal & 2) != 0 )
      {
        v32 = "JUMP";
      }
      else if ( (traversal & 4) != 0 )
      {
        v32 = "JUMP_ACROSS";
      }
      else if ( (traversal & 8) != 0 )
      {
        v32 = "JUMP_STANDING";
      }
      else
      {
        v32 = "MOVE_FWD";
        if ( (traversal & 0x10) == 0 )
          v32 = "???";
      }
      __asm { vmovaps xmm2, xmm6; scale }
      G_Main_AddDebugStringWithDuration(&xyz, &colorRed, *(float *)&_XMM2, v32, 1);
      __asm { vaddss  xmm1, xmm7, dword ptr [rsp+130h+xyz+8] }
      right = (unsigned int)_RBX->right;
      v36 = (unsigned int)_RBX->forward;
      __asm { vmovss  dword ptr [rsp+130h+xyz+8], xmm1 }
      v37 = j_va("fwd: %i right: %i", v36, right);
      __asm { vmovaps xmm2, xmm6; scale }
      G_Main_AddDebugStringWithDuration(&xyz, &colorRed, *(float *)&_XMM2, v37, 1);
      __asm { vaddss  xmm1, xmm7, dword ptr [rsp+130h+xyz+8] }
      jumpCount = (unsigned int)_RBX->jumpCount;
      __asm { vmovss  dword ptr [rsp+130h+xyz+8], xmm1 }
      v41 = j_va("jump attempts: %i", jumpCount);
      __asm { vmovaps xmm2, xmm6; scale }
      G_Main_AddDebugStringWithDuration(&xyz, &colorRed, *(float *)&_XMM2, v41, 1);
      pathnode_t::GetPos(v24, &pos);
      pathnode_t::GetPos(v25, &v119);
      G_DebugLineWithDuration(&pos, &_RBX->origin, &colorGreen, 0, 1);
      G_DebugLineWithDuration(&v119, &_RBX->origin, &colorBlue, 0, 1);
      v43 = 0;
      v44 = &colorCyan;
      p_pos = &pos;
      v46 = &v119;
      goto LABEL_51;
    }
  }
  type = _RBX->type;
  if ( type == 1 )
  {
    __asm { vmovss  xmm2, dword ptr [rbx+28h]; yaw }
    G_DebugBox(&_RBX->origin, &actorBox, *(float *)&_XMM2, &colorRed, 0, 1);
    G_DebugLineWithDuration(&start, &end, &colorRed, 0, 1);
    v49 = SV_BotRequirePathnodes(botData);
    __asm { vmovss  xmm2, cs:__real@3f800000; scale }
    v51 = "NO NODE";
    if ( !v49 )
      v51 = "NO TAC POINT";
    G_Main_AddDebugStringWithDuration(&xyz, &colorRed, *(float *)&_XMM2, v51, 1);
  }
  else if ( type == 2 )
  {
    v52 = DVARINT_bot_DrawSeeThrough;
    if ( !DVARINT_bot_DrawSeeThrough && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawSeeThrough") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v52);
    if ( v52->current.integer )
    {
      __asm
      {
        vmovaps [rsp+130h+var_50], xmm12
        vmovaps [rsp+130h+var_60], xmm13
        vmovaps [rsp+130h+var_70], xmm14
      }
      G_DebugLineWithDuration(&_RBX->origin, &_RBX->origin2, &colorRed, 1, 1);
      __asm
      {
        vmovss  xmm0, dword ptr [rbx+0Ch]
        vsubss  xmm6, xmm0, dword ptr [rbx]
        vmovss  xmm1, dword ptr [rbx+10h]
        vsubss  xmm5, xmm1, dword ptr [rbx+4]
        vmovss  xmm0, dword ptr [rbx+14h]
        vsubss  xmm4, xmm0, dword ptr [rbx+8]
        vmulss  xmm1, xmm6, xmm6
        vmulss  xmm0, xmm4, xmm4
        vmulss  xmm2, xmm5, xmm5
        vaddss  xmm3, xmm2, xmm1
        vmovss  xmm1, cs:__real@3f800000
        vaddss  xmm2, xmm3, xmm0
        vsqrtss xmm7, xmm2, xmm2
        vcmpless xmm0, xmm7, cs:__real@80000000
        vblendvps xmm0, xmm7, xmm1, xmm0
        vdivss  xmm2, xmm1, xmm0
        vmulss  xmm12, xmm2, xmm6
        vmovss  xmm6, cs:__real@41700000
        vmulss  xmm14, xmm2, xmm4
        vmulss  xmm13, xmm2, xmm5
        vmulss  xmm0, xmm12, xmm6
        vaddss  xmm1, xmm0, dword ptr [rbx]
        vmulss  xmm2, xmm13, xmm6
        vaddss  xmm0, xmm2, dword ptr [rbx+4]
        vmovss  dword ptr [rsp+130h+point], xmm1
        vmulss  xmm1, xmm14, xmm6
        vaddss  xmm2, xmm1, dword ptr [rbx+8]
        vmovss  dword ptr [rsp+130h+point+8], xmm2
        vmovss  xmm2, cs:__real@3e800000; size
        vmovss  dword ptr [rsp+130h+point+4], xmm0
      }
      G_DebugStarWithSize(&point, &colorRed, *(float *)&_XMM2);
      __asm { vcomiss xmm7, cs:__real@41f00000 }
      if ( !(v80 | v14) )
      {
        __asm
        {
          vmovss  xmm0, dword ptr [rbx+0Ch]
          vmovss  xmm2, cs:__real@3e800000; size
          vmulss  xmm1, xmm12, xmm6
          vsubss  xmm1, xmm0, xmm1
          vmovss  xmm0, dword ptr [rbx+10h]
          vmovss  dword ptr [rsp+130h+point], xmm1
          vmulss  xmm3, xmm13, xmm6
          vsubss  xmm1, xmm0, xmm3
          vmovss  xmm0, dword ptr [rbx+14h]
          vmulss  xmm4, xmm14, xmm6
          vmovss  dword ptr [rsp+130h+point+4], xmm1
          vsubss  xmm1, xmm0, xmm4
          vmovss  dword ptr [rsp+130h+point+8], xmm1
        }
        G_DebugStarWithSize(&point, &colorRed, *(float *)&_XMM2);
      }
      __asm { vmovaps xmm14, [rsp+130h+var_70] }
      string = _RBX->string;
      __asm { vmovaps xmm13, [rsp+130h+var_60] }
      v94 = -1i64;
      __asm { vmovaps xmm12, [rsp+130h+var_50] }
      do
        ++v94;
      while ( string[v94] );
      if ( (_DWORD)v94 )
      {
        __asm { vmovss  xmm2, cs:__real@3ecccccd; scale }
        G_Main_AddDebugStringWithDuration(&xyz, &colorRed, *(float *)&_XMM2, string, 1);
        __asm
        {
          vmovss  xmm0, dword ptr [rsp+130h+xyz+8]
          vaddss  xmm1, xmm0, cs:__real@41200000
          vmovss  dword ptr [rsp+130h+xyz+8], xmm1
        }
      }
      __asm { vmovss  xmm2, cs:__real@3f19999a; scale }
      G_Main_AddDebugStringWithDuration(&xyz, &colorRed, *(float *)&_XMM2, "SEE THRU", 1);
      __asm
      {
        vmovss  xmm0, dword ptr [rsp+130h+xyz+8]
        vaddss  xmm1, xmm0, cs:__real@41300000
        vmovss  dword ptr [rsp+130h+xyz+8], xmm1
      }
      if ( Dvar_GetInt_Internal_DebugName(DVARINT_bot_DrawSeeThrough, "bot_DrawSeeThrough") == 4 )
        Bot_SeeThruBlockedByAllSurroundingGeo(&_RBX->origin, &_RBX->origin2, 2047, 0, 1);
      if ( _RBX->usingOrigin3 )
      {
        __asm
        {
          vmovss  xmm3, cs:__real@3f000000
          vmovss  xmm0, dword ptr [rbx+0Ch]
          vaddss  xmm1, xmm0, dword ptr [rbx]
          vmovss  xmm0, dword ptr [rbx+10h]
          vaddss  xmm2, xmm0, dword ptr [rbx+4]
          vmovss  xmm0, dword ptr [rbx+14h]
          vmulss  xmm1, xmm1, xmm3
          vmovss  dword ptr [rsp+130h+var_C0], xmm1
          vmulss  xmm1, xmm2, xmm3
          vaddss  xmm2, xmm0, dword ptr [rbx+8]
          vmovss  dword ptr [rsp+130h+var_C0+4], xmm1
          vmulss  xmm1, xmm2, xmm3
          vmovss  dword ptr [rsp+130h+var_C0+8], xmm1
        }
        p_pos = &_RBX->origin3;
        v43 = 1;
        v44 = &colorBlue;
        v46 = &v117;
LABEL_51:
        G_DebugLineWithDuration(v46, p_pos, v44, v43, 1);
      }
    }
  }
  __asm
  {
    vmovaps xmm7, [rsp+130h+var_40]
    vmovaps xmm6, [rsp+130h+var_30]
  }
}

/*
==============
Bot_DrawDebugErrorLocations
==============
*/
void Bot_DrawDebugErrorLocations(const bot_data_t *botData)
{
  int i; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3069, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  for ( i = 0; i < botData->botDebugData.errorLocCount; ++i )
    Bot_DrawDebugErrorLocation(botData, &botData->botDebugData.errorLocs[i]);
}

/*
==============
Bot_DrawDebugFireWait
==============
*/

void __fastcall Bot_DrawDebugFireWait(const bot_info_t *botInfo, double lookOffCos, double fireWaitArcCos)
{
  const bot_data_t *EntityData; 
  unsigned int v20; 
  playerState_s *PlayerState; 
  SvClient *CommonClient; 
  SvClient *v30; 
  const vec4_t *v62; 
  vec3_t *p_vEyePosOut; 
  vec3_t *p_start; 
  __int64 v75; 
  vec3_t vEyePosOut; 
  vec3_t start; 
  vec3_t end; 
  vec3_t forward; 
  vec3_t right; 
  void *retaddr; 

  _RAX = &retaddr;
  __asm
  {
    vmovaps xmmword ptr [rax-38h], xmm6
    vmovaps xmmword ptr [rax-48h], xmm7
    vmovaps xmm6, xmm2
    vmovaps xmm7, xmm1
  }
  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19798, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  EntityData = Bot_GetEntityData(botInfo->ent);
  if ( Bot_ShouldDrawDebugForBot(EntityData) )
  {
    __asm { vmovaps xmm0, xmm6; X }
    *(float *)&_XMM0 = acosf_0(*(float *)&_XMM0);
    __asm
    {
      vmovss  [rsp+150h+var_120], xmm0
      vmovaps xmm0, xmm7; X
    }
    *(float *)&_XMM0 = acosf_0(*(float *)&_XMM0);
    v20 = 0;
    __asm { vmovss  [rsp+150h+var_11C], xmm0 }
    if ( (int)SvClient::ms_clientCount > 0 )
    {
      __asm
      {
        vmovaps [rsp+150h+var_58+8], xmm8
        vmovaps [rsp+150h+var_68+8], xmm9
        vmovaps [rsp+150h+var_78+8], xmm10
        vmovaps [rsp+150h+var_88+8], xmm11
        vmovss  xmm11, cs:__real@42c80000
        vmovaps [rsp+150h+var_98+8], xmm12
        vmovss  xmm12, cs:__real@41200000
        vmovaps [rsp+150h+var_A8+8], xmm13
        vmovss  xmm13, cs:__real@c0000000
        vmovaps [rsp+150h+var_B8+8], xmm14
        vmovss  xmm14, cs:__real@3f800000
        vmovaps [rsp+150h+var_C8+8], xmm15
        vmovss  xmm15, cs:__real@40000000
      }
      while ( SvClient::GetCommonClient(v20)->state != CS_ACTIVE || SV_BotIsBot(v20) )
      {
LABEL_28:
        if ( (int)++v20 >= (int)SvClient::ms_clientCount )
        {
          __asm
          {
            vmovaps xmm15, [rsp+150h+var_C8+8]
            vmovaps xmm14, [rsp+150h+var_B8+8]
            vmovaps xmm13, [rsp+150h+var_A8+8]
            vmovaps xmm12, [rsp+150h+var_98+8]
            vmovaps xmm11, [rsp+150h+var_88+8]
            vmovaps xmm10, [rsp+150h+var_78+8]
            vmovaps xmm9, [rsp+150h+var_68+8]
            vmovaps xmm8, [rsp+150h+var_58+8]
          }
          goto LABEL_30;
        }
      }
      PlayerState = G_MainMP_GetPlayerState(v20);
      if ( !PlayerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19811, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps", v75) )
        __debugbreak();
      AngleVectors(&PlayerState->viewangles, &forward, &right, NULL);
      _RBX = 0i64;
      while ( 1 )
      {
        if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
          __debugbreak();
        CommonClient = SvClient::GetCommonClient(v20);
        __asm { vmovss  xmm0, [rsp+rbx*4+150h+var_120]; X }
        v30 = CommonClient;
        *(float *)&_XMM0 = tanf_0(*(float *)&_XMM0);
        __asm { vmulss  xmm9, xmm0, xmm11 }
        if ( !v30->gentity && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19820, ASSERT_TYPE_ASSERT, "( cl->gentity )", (const char *)&queryFormat, "cl->gentity") )
          __debugbreak();
        if ( !v30->gentity->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19821, ASSERT_TYPE_ASSERT, "( cl->gentity->sentient )", (const char *)&queryFormat, "cl->gentity->sentient") )
          __debugbreak();
        Sentient_GetEyePosition(v30->gentity->sentient, &vEyePosOut);
        __asm
        {
          vaddss  xmm8, xmm14, dword ptr [rsp+150h+vEyePosOut+8]
          vmulss  xmm0, xmm11, dword ptr [rsp+150h+forward+4]
          vaddss  xmm7, xmm0, dword ptr [rsp+150h+vEyePosOut+4]
          vmulss  xmm1, xmm11, dword ptr [rsp+150h+forward]
          vaddss  xmm6, xmm1, dword ptr [rsp+150h+vEyePosOut]
          vmulss  xmm0, xmm12, dword ptr [rsp+150h+forward]
          vaddss  xmm1, xmm0, dword ptr [rsp+150h+vEyePosOut]
          vmulss  xmm2, xmm12, dword ptr [rsp+150h+forward+4]
          vaddss  xmm0, xmm2, dword ptr [rsp+150h+vEyePosOut+4]
          vmovss  xmm5, dword ptr [rsp+150h+right]
          vmovss  xmm10, dword ptr [rsp+150h+right+4]
          vmovss  xmm4, dword ptr [rbp+50h+right+8]
          vmovss  dword ptr [rsp+150h+vEyePosOut+4], xmm0
          vmovss  dword ptr [rsp+150h+vEyePosOut], xmm1
          vmulss  xmm1, xmm12, dword ptr [rsp+150h+forward+8]
          vaddss  xmm0, xmm1, xmm8
          vmulss  xmm1, xmm11, dword ptr [rsp+150h+forward+8]
          vsubss  xmm2, xmm0, xmm15
          vmulss  xmm0, xmm5, xmm9
          vaddss  xmm6, xmm0, xmm6
          vmulss  xmm0, xmm10, xmm9
          vaddss  xmm7, xmm0, xmm7
          vmovss  dword ptr [rsp+150h+vEyePosOut+8], xmm2
          vmulss  xmm0, xmm4, xmm9
          vaddss  xmm2, xmm1, xmm8
          vaddss  xmm8, xmm2, xmm0
          vmovss  dword ptr [rsp+150h+start+8], xmm8
          vmovss  dword ptr [rsp+150h+start], xmm6
          vmovss  dword ptr [rsp+150h+start+4], xmm7
        }
        if ( !_RBX )
          break;
        if ( _RBX == 1 )
        {
          v62 = &colorBlue;
          p_vEyePosOut = &vEyePosOut;
          p_start = &start;
          goto LABEL_26;
        }
LABEL_27:
        if ( ++_RBX >= 2 )
          goto LABEL_28;
      }
      __asm
      {
        vmulss  xmm3, xmm9, xmm13
        vmulss  xmm0, xmm5, xmm3
        vaddss  xmm1, xmm0, xmm6
        vmulss  xmm2, xmm10, xmm3
        vaddss  xmm0, xmm2, xmm7
        vmovss  dword ptr [rsp+150h+end], xmm1
        vmulss  xmm1, xmm4, xmm3
        vaddss  xmm2, xmm1, xmm8
        vmovss  dword ptr [rsp+150h+end+8], xmm2
        vmovss  dword ptr [rsp+150h+end+4], xmm0
      }
      G_DebugLine(&start, &end, &colorRed, 0);
      G_DebugLine(&start, &vEyePosOut, &colorRed, 0);
      v62 = &colorRed;
      p_vEyePosOut = &end;
      p_start = &vEyePosOut;
LABEL_26:
      G_DebugLine(p_start, p_vEyePosOut, v62, 0);
      goto LABEL_27;
    }
  }
LABEL_30:
  __asm
  {
    vmovaps xmm6, [rsp+150h+var_38+8]
    vmovaps xmm7, [rsp+150h+var_48+8]
  }
}

/*
==============
Bot_DrawDebugNavmesh
==============
*/

void Bot_DrawDebugNavmesh(void)
{
  Bot_DrawDebugNavmeshExposure();
}

/*
==============
Bot_DrawDebugNavmeshExposure
==============
*/
void Bot_DrawDebugNavmeshExposure()
{
  const dvar_t *v3; 
  gclient_s *client; 
  nav_space_s *DefaultSpace; 
  int ClosestAreas; 
  bfx::AreaHandle *v10; 
  __int64 v11; 
  unsigned int AreaUsageFlags; 
  float m_z; 
  const char *v18; 
  unsigned int AreaExposureValue; 
  const char *v22; 
  unsigned int v25; 
  const char *v26; 
  unsigned int v29; 
  const char *v30; 
  unsigned int v33; 
  const char *v34; 
  float fmt; 
  bfx::Vector3 pos; 
  __int64 v41; 
  bfx::Vector3 result; 
  vec3_t outPos; 
  bfx::PathSpec pathSpec; 
  bfx::AreaHandle ptr[32]; 
  char v46; 
  void *retaddr; 

  _RAX = &retaddr;
  v41 = -2i64;
  __asm
  {
    vmovaps xmmword ptr [rax-28h], xmm6
    vmovaps xmmword ptr [rax-38h], xmm7
  }
  v3 = DVARBOOL_bot_DrawNavmeshExposure;
  if ( !DVARBOOL_bot_DrawNavmeshExposure && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 692, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawNavmeshExposure") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v3);
  if ( v3->current.enabled && Com_GameMode_SupportsFeature(WEAPON_RAISING_ALTSWITCH) && Nav_HasExposureData() )
  {
    `eh vector constructor iterator'(ptr, 0x10ui64, 0x20ui64, (void (__fastcall *)(void *))bfx::AreaHandle::AreaHandle, (void (__fastcall *)(void *))bfx::AreaHandle::~AreaHandle);
    pathSpec.m_obstacleMode = BLOCKED_IF_ANY_MATCH;
    *(_QWORD *)&pathSpec.m_obstacleBlockageFlags = -1i64;
    *(_QWORD *)&pathSpec.m_areaPenaltyFlags = -1i64;
    pathSpec.m_usePathSharingPenalty = 0;
    __asm
    {
      vxorps  xmm6, xmm6, xmm6
      vmovss  [rbp+210h+pathSpec.m_pathSharingPenalty], xmm6
      vmovss  [rbp+210h+pathSpec.m_maxPathSharingPenalty], xmm6
      vmovss  [rbp+210h+pathSpec.m_maxSearchDist], xmm6
    }
    bfx::PenaltyTable::PenaltyTable(&pathSpec.m_penaltyTable);
    pathSpec.m_snapMode = SNAP_CLOSEST;
    if ( !Nav_MeshLoaded() && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21690, ASSERT_TYPE_ASSERT, "( Nav_MeshLoaded() )", (const char *)&queryFormat, "Nav_MeshLoaded()") )
      __debugbreak();
    if ( SvStaticGlobals::ms_svStaticGlobals.state == SS_GAME )
    {
      client = level.gentities->client;
      if ( client )
      {
        if ( client->sess.connected == CON_CONNECTED && cg_t::ms_allocatedCount > 0 )
        {
          __asm
          {
            vmovss  dword ptr [rsp+310h+outPos], xmm6
            vmovss  dword ptr [rsp+310h+outPos+4], xmm6
            vmovss  dword ptr [rsp+310h+outPos+8], xmm6
          }
          CL_GetViewPos(LOCAL_CLIENT_0, &outPos);
          __asm
          {
            vmovsd  xmm0, qword ptr [rsp+310h+outPos]
            vmovsd  qword ptr [rsp+310h+pos.m_x], xmm0
          }
          pos.m_z = outPos.v[2];
          DefaultSpace = Nav_GetDefaultSpace();
          __asm
          {
            vmovss  xmm0, cs:__real@457a0000
            vmovss  dword ptr [rsp+310h+fmt], xmm0
          }
          ClosestAreas = bfx::GetClosestAreas(&DefaultSpace->hSpace, &pos, 0, &pathSpec, fmt, 32, ptr);
          if ( ClosestAreas > 0 )
          {
            v10 = ptr;
            v11 = (unsigned int)ClosestAreas;
            __asm
            {
              vmovss  xmm6, cs:__real@3f000000
              vmovss  xmm7, cs:__real@40c00000
            }
            do
            {
              AreaUsageFlags = bfx::AreaHandle::GetAreaUsageFlags(v10);
              _RAX = bfx::AreaHandle::CalcCentroid(v10, &result);
              __asm { vmovsd  xmm0, qword ptr [rax] }
              m_z = _RAX->m_z;
              __asm { vmovsd  qword ptr [rsp+310h+outPos], xmm0 }
              outPos.v[2] = m_z;
              v18 = j_va("Flags:%u", AreaUsageFlags);
              __asm { vmovaps xmm2, xmm6; scale }
              G_Main_AddDebugStringWithDuration(&outPos, &colorWhite, *(float *)&_XMM2, v18, 0);
              __asm
              {
                vaddss  xmm1, xmm7, dword ptr [rsp+310h+outPos+8]
                vmovss  dword ptr [rsp+310h+outPos+8], xmm1
              }
              AreaExposureValue = Bot_GetAreaExposureValue(AREA_EXPOSURE_SKY, AreaUsageFlags);
              v22 = j_va("Sky:%u", AreaExposureValue);
              __asm { vmovaps xmm2, xmm6; scale }
              G_Main_AddDebugStringWithDuration(&outPos, &colorWhite, *(float *)&_XMM2, v22, 0);
              __asm
              {
                vaddss  xmm1, xmm7, dword ptr [rsp+310h+outPos+8]
                vmovss  dword ptr [rsp+310h+outPos+8], xmm1
              }
              v25 = Bot_GetAreaExposureValue(AREA_EXPOSURE_GENERAL, AreaUsageFlags);
              v26 = j_va("General:%u", v25);
              __asm { vmovaps xmm2, xmm6; scale }
              G_Main_AddDebugStringWithDuration(&outPos, &colorWhite, *(float *)&_XMM2, v26, 0);
              __asm
              {
                vaddss  xmm1, xmm7, dword ptr [rsp+310h+outPos+8]
                vmovss  dword ptr [rsp+310h+outPos+8], xmm1
              }
              v29 = Bot_GetAreaExposureValue(AREA_EXPOSURE_TRAFFIC, AreaUsageFlags);
              v30 = j_va("Traffic:%u", v29);
              __asm { vmovaps xmm2, xmm6; scale }
              G_Main_AddDebugStringWithDuration(&outPos, &colorWhite, *(float *)&_XMM2, v30, 0);
              __asm
              {
                vaddss  xmm1, xmm7, dword ptr [rsp+310h+outPos+8]
                vmovss  dword ptr [rsp+310h+outPos+8], xmm1
              }
              v33 = Bot_GetAreaExposureValue(AREA_EXPOSURE_LOS, AreaUsageFlags);
              v34 = j_va("LOS:%u", v33);
              __asm { vmovaps xmm2, xmm6; scale }
              G_Main_AddDebugStringWithDuration(&outPos, &colorWhite, *(float *)&_XMM2, v34, 0);
              ++v10;
              --v11;
            }
            while ( v11 );
          }
        }
      }
    }
    `eh vector destructor iterator'(ptr, 0x10ui64, 0x20ui64, (void (__fastcall *)(void *))bfx::AreaHandle::~AreaHandle);
  }
  _R11 = &v46;
  __asm
  {
    vmovaps xmm6, xmmword ptr [r11-10h]
    vmovaps xmm7, xmmword ptr [r11-20h]
  }
}

/*
==============
Bot_DrawDebugSpecial
==============
*/
void Bot_DrawDebugSpecial()
{
  unsigned int v11; 
  int v12; 
  vec4_t *p_color; 
  gentity_s *trigger; 
  unsigned __int64 v17; 
  unsigned __int64 v18; 
  int v19; 
  const dvar_t *v22; 
  unsigned __int16 i; 
  const pathnode_t *v24; 
  const dvar_t *v25; 
  const dvar_t *v26; 
  const dvar_t *v28; 
  const dvar_t *v29; 
  int integer; 
  const dvar_t *v31; 
  int v32; 
  int v37; 
  signed int v38; 
  const SvClientMP *CommonClient; 
  playerState_s *PlayerState; 
  int v50; 
  unsigned __int8 *priorityMap; 
  const vec4_t *v62; 
  const vec4_t *v70; 
  const dvar_t *v72; 
  const dvar_t *v73; 
  int v74; 
  int v75; 
  vec3_t *p_results; 
  const dvar_t *v80; 
  nav_space_s *DefaultSpace; 
  int v84; 
  bfx::PolylinePathRCPtr v85; 
  int v86; 
  trace_t *v87; 
  const vec3_t *v89; 
  nav_space_s *v91; 
  bfx::PolylinePathRCPtr v92; 
  const dvar_t *v93; 
  const dvar_t *v94; 
  int v95; 
  int v102; 
  pathnode_t *v109; 
  char v110; 
  bool v111; 
  const dvar_t *v145; 
  const dvar_t *v147; 
  const dvar_t *v153; 
  int v154; 
  float *v155; 
  const dvar_t *v156; 
  const dvar_t *v162; 
  int v164; 
  int v165; 
  const char **v166; 
  const dvar_t *v167; 
  unsigned int Count; 
  const char *v169; 
  const char *v170; 
  const vec4_t *v171; 
  const dvar_t *v174; 
  __int64 v175; 
  const char *v180; 
  unsigned int v183; 
  __int64 v184; 
  pathnode_t *v190; 
  int v191; 
  vec3_t *p_origin; 
  int v193; 
  __int64 v211; 
  pathnode_t *v212; 
  unsigned __int16 team; 
  int v226; 
  int v227; 
  unsigned int v228; 
  const char *fmt; 
  const char *v230; 
  int v231; 
  vec4_t *interiorColor; 
  __int64 contentMask; 
  __int64 skipChildren; 
  vec3_t vEyePosOut; 
  float v1[4]; 
  vec3_t origin; 
  vec3_t up; 
  vec3_t right; 
  vec4_t color; 
  Bounds box; 
  trace_t results; 
  char v263; 
  void *retaddr; 

  _RAX = &retaddr;
  __asm
  {
    vmovaps xmmword ptr [rax-28h], xmm6
    vmovaps xmmword ptr [rax-38h], xmm7
    vmovaps xmmword ptr [rax-48h], xmm8
    vmovaps xmmword ptr [rax-58h], xmm9
    vmovaps xmmword ptr [rax-68h], xmm10
    vmovaps xmmword ptr [rax-78h], xmm11
    vmovaps xmmword ptr [rax-88h], xmm12
    vmovaps xmmword ptr [rax-98h], xmm13
    vmovaps xmmword ptr [rax-0A8h], xmm14
    vmovaps xmmword ptr [rax-0B8h], xmm15
  }
  v11 = Path_NodeCount();
  v12 = 0;
  if ( g_botCurrentNumDebugDrawTriggers > 0 )
  {
    _R13 = g_botDebugDrawTriggers;
    _RDI = g_botDebugDrawTriggers;
    p_color = &g_botDebugDrawTriggers[0].color;
    do
    {
      trigger = _RDI->trigger;
      if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 196, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
        __debugbreak();
      v17 = (__int64)((unsigned __int128)(((char *)trigger - (char *)g_entities) * (__int128)0x2D02D02D02D02D03i64) >> 64) >> 8;
      v18 = (v17 >> 63) + v17;
      if ( (unsigned int)v18 >= 0x800 )
      {
        LODWORD(contentMask) = 2048;
        LODWORD(interiorColor) = v18;
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 199, ASSERT_TYPE_ASSERT, "(unsigned)( index ) < (unsigned)( ( 2048 ) )", "index doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", interiorColor, contentMask) )
          __debugbreak();
      }
      v18 = (__int16)v18;
      if ( (unsigned int)(__int16)v18 >= 0x800 )
      {
        LODWORD(contentMask) = 2048;
        LODWORD(interiorColor) = v18;
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 207, ASSERT_TYPE_ASSERT, "(unsigned)( entityIndex ) < (unsigned)( ( 2048 ) )", "entityIndex doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", interiorColor, contentMask) )
          __debugbreak();
      }
      if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 208, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
        __debugbreak();
      if ( g_entities[v18].r.isInUse != g_entityIsInUse[v18] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 209, ASSERT_TYPE_ASSERT, "( g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex] )", (const char *)&queryFormat, "g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex]") )
        __debugbreak();
      if ( g_entityIsInUse[v18] )
      {
        G_DrawTriggerGeometry(_RDI->trigger, p_color, _RDI->depthTest, 0, 0, &colorWhite);
      }
      else
      {
        v19 = g_botCurrentNumDebugDrawTriggers - 1;
        _RAX = 32i64 * (g_botCurrentNumDebugDrawTriggers - 1);
        __asm
        {
          vmovups ymm0, ymmword ptr [rax+r13]
          vmovups ymmword ptr [rdi], ymm0
        }
        g_botCurrentNumDebugDrawTriggers = v19;
        --v12;
        --_RDI;
        p_color -= 2;
      }
      ++v12;
      ++_RDI;
      p_color += 2;
    }
    while ( v12 < g_botCurrentNumDebugDrawTriggers );
  }
  v22 = DVARINT_bot_DrawDebugSpecial;
  if ( !DVARINT_bot_DrawDebugSpecial && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebugSpecial") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v22);
  if ( v22->current.integer == 12 )
  {
    for ( i = 0; i < v11; ++i )
    {
      if ( Path_NodeValid(i) )
      {
        v24 = &pathData.nodes[i];
        v25 = DVARINT_bot_DrawDebugSpecial;
        if ( !DVARINT_bot_DrawDebugSpecial && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebugSpecial") )
          __debugbreak();
        Dvar_CheckFrontendServerThread(v25);
        if ( v25->current.integer == 12 && Path_IsNodeDisconnected(i) )
          Path_DrawDebugNodeBox(v24);
      }
    }
  }
  v26 = DVARINT_bot_DrawDebugSpecial;
  if ( !DVARINT_bot_DrawDebugSpecial && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebugSpecial") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v26);
  __asm { vxorps  xmm12, xmm12, xmm12 }
  if ( v26->current.integer == 4 )
    goto LABEL_236;
  v28 = DVARINT_bot_DrawDebugSpecial;
  if ( !DVARINT_bot_DrawDebugSpecial && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebugSpecial") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v28);
  if ( v28->current.integer == 5 )
  {
LABEL_236:
    v29 = DVARINT_bot_DrawDebugSpecial;
    if ( !DVARINT_bot_DrawDebugSpecial && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebugSpecial") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v29);
    integer = v29->current.integer;
    v31 = DVARINT_bot_DrawDebugSpecial;
    if ( !DVARINT_bot_DrawDebugSpecial && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebugSpecial") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v31);
    v32 = v31->current.integer;
    if ( integer == 4 && v32 == 5 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22201, ASSERT_TYPE_ASSERT, "( !(sightTrace && bulletTrace) )", (const char *)&queryFormat, "!(sightTrace && bulletTrace)") )
      __debugbreak();
    __asm
    {
      vmovss  xmm0, dword ptr cs:?bounds_origin@@3UBounds@@B.midPoint; Bounds const bounds_origin
      vmovss  dword ptr [rsp+228h+box.midPoint], xmm0
      vmovss  xmm1, dword ptr cs:?bounds_origin@@3UBounds@@B.midPoint+4; Bounds const bounds_origin
      vmovss  dword ptr [rsp+228h+box.midPoint+4], xmm1
      vmovss  xmm0, dword ptr cs:?bounds_origin@@3UBounds@@B.midPoint+8; Bounds const bounds_origin
      vmovss  dword ptr [rsp+228h+box.midPoint+8], xmm0
      vmovss  xmm1, cs:__real@40200000
      vmovss  dword ptr [rsp+228h+box.halfSize], xmm1
      vmovss  dword ptr [rsp+228h+box.halfSize+4], xmm1
      vmovss  dword ptr [rsp+228h+box.halfSize+8], xmm1
    }
    v37 = 0;
    v38 = 0;
    if ( (int)SvClient::ms_clientCount > 0 )
    {
      __asm
      {
        vmovss  xmm10, cs:__real@42c80000
        vmovss  xmm9, cs:__real@40000000
      }
      do
      {
        if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
          __debugbreak();
        CommonClient = (const SvClientMP *)SvClient::GetCommonClient(v38);
        if ( !Bot_IsClientActive(CommonClient) )
          goto LABEL_82;
        if ( !CommonClient->gentity && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22224, ASSERT_TYPE_ASSERT, "( cl->gentity )", (const char *)&queryFormat, "cl->gentity") )
          __debugbreak();
        if ( !CommonClient->gentity->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22225, ASSERT_TYPE_ASSERT, "( cl->gentity->sentient )", (const char *)&queryFormat, "cl->gentity->sentient") )
          __debugbreak();
        if ( SV_BotIsBot(v38) )
          goto LABEL_82;
        PlayerState = G_MainMP_GetPlayerState(v38);
        Sentient_GetHeadPosition(CommonClient->gentity->sentient, &vEyePosOut);
        AngleVectors(&PlayerState->viewangles, (vec3_t *)v1, &right, &up);
        __asm
        {
          vmulss  xmm1, xmm10, [rsp+228h+v1]
          vaddss  xmm2, xmm1, dword ptr [rsp+228h+vEyePosOut]
          vmovss  dword ptr [rsp+228h+origin], xmm2
          vmulss  xmm1, xmm10, [rsp+228h+v1+4]
          vaddss  xmm2, xmm1, dword ptr [rsp+228h+vEyePosOut+4]
          vmovss  dword ptr [rsp+228h+origin+4], xmm2
          vmulss  xmm1, xmm10, [rsp+228h+v1+8]
          vaddss  xmm2, xmm1, dword ptr [rsp+228h+vEyePosOut+8]
          vmovss  dword ptr [rsp+228h+origin+8], xmm2
          vmovaps xmm2, xmm12; yaw
        }
        G_DebugBox(&origin, &box, *(float *)&_XMM2, &colorYellow, 1, 1);
        v50 = 0;
        __asm
        {
          vmovss  xmm11, cs:__real@3f800000
          vmovss  [rsp+228h+results.fraction], xmm11
        }
        if ( integer == 4 )
        {
          v50 = PhysicsQuery_LegacySightTrace(PHYSICS_WORLD_ID_FIRST, &vEyePosOut, &origin, &bounds_origin, CommonClient->gentity->s.number, 2047, 41965569);
          v37 = PhysicsQuery_LegacySightTrace(PHYSICS_WORLD_ID_FIRST, &vEyePosOut, &origin, &bounds_origin, CommonClient->gentity->s.number, 2047, 41965571);
        }
        else if ( v32 == 5 )
        {
          priorityMap = BG_GetWeaponPriorityMap(&NULL_WEAPON, 0);
          PhysicsQuery_LegacyTraceSkipEntities(PHYSICS_WORLD_ID_SERVER_DETAIL, &results, &vEyePosOut, &origin, &bounds_origin, &PlayerState->clientNum, 1, 0, 41969969, 1, priorityMap, All);
        }
        __asm
        {
          vmovss  xmm0, dword ptr [rsp+228h+vEyePosOut]
          vsubss  xmm6, xmm0, dword ptr [rsp+228h+up]
          vmovss  xmm0, dword ptr [rsp+228h+vEyePosOut+4]
          vsubss  xmm7, xmm0, dword ptr [rsp+228h+up+4]
          vmovss  xmm0, dword ptr [rsp+228h+vEyePosOut+8]
          vsubss  xmm8, xmm0, dword ptr [rsp+228h+up+8]
          vsubss  xmm0, xmm6, dword ptr [rsp+228h+right]
          vmovss  dword ptr [rsp+228h+vEyePosOut], xmm0
          vsubss  xmm1, xmm7, dword ptr [rsp+228h+right+4]
          vmovss  dword ptr [rsp+228h+vEyePosOut+4], xmm1
          vsubss  xmm0, xmm8, dword ptr [rsp+228h+right+8]
          vmovss  dword ptr [rsp+228h+vEyePosOut+8], xmm0
        }
        if ( v37 )
        {
          if ( v50 )
            goto LABEL_75;
          v62 = &colorGreen;
        }
        else
        {
          if ( v50 )
          {
LABEL_75:
            v62 = &colorRed;
            goto LABEL_76;
          }
          __asm
          {
            vmovss  xmm0, [rsp+228h+results.fraction]
            vcomiss xmm0, xmm11
          }
          v62 = &colorMdGrey;
        }
LABEL_76:
        G_DebugLine(&vEyePosOut, &origin, v62, 1);
        __asm
        {
          vmulss  xmm1, xmm9, dword ptr [rsp+228h+right]
          vaddss  xmm2, xmm1, xmm6
          vmovss  dword ptr [rsp+228h+vEyePosOut], xmm2
          vmulss  xmm1, xmm9, dword ptr [rsp+228h+right+4]
          vaddss  xmm2, xmm1, xmm7
          vmovss  dword ptr [rsp+228h+vEyePosOut+4], xmm2
          vmulss  xmm1, xmm9, dword ptr [rsp+228h+right+8]
          vaddss  xmm2, xmm1, xmm8
          vmovss  dword ptr [rsp+228h+vEyePosOut+8], xmm2
        }
        if ( v37 )
        {
          if ( v50 )
            v70 = &colorRed;
          else
            v70 = &colorGreen;
        }
        else
        {
          __asm
          {
            vmovss  xmm0, [rsp+228h+results.fraction]
            vcomiss xmm0, xmm11
          }
          v70 = &colorMdGrey;
        }
        G_DebugLine(&vEyePosOut, &origin, v70, 1);
        v37 = 0;
LABEL_82:
        ++v38;
      }
      while ( v38 < (int)SvClient::ms_clientCount );
    }
  }
  v72 = DVARINT_bot_DebugPathGoal;
  if ( !DVARINT_bot_DebugPathGoal && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DebugPathGoal") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v72);
  if ( v72->current.integer > 0 )
  {
    v73 = DVARINT_bot_DebugPathGoal;
    if ( !DVARINT_bot_DebugPathGoal && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DebugPathGoal") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v73);
    v74 = v73->current.integer;
    v75 = 1;
    __asm { vmovss  xmm6, cs:__real@3a83126f }
    if ( v74 >= 1 )
    {
      p_results = (vec3_t *)&results;
      do
      {
        if ( (unsigned int)(v75 - 1) > 3 )
        {
          LODWORD(skipChildren) = 4;
          LODWORD(contentMask) = 1;
          LODWORD(interiorColor) = v75;
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22277, ASSERT_TYPE_ASSERT, "( 1 ) <= ( pathGoalIndex ) && ( pathGoalIndex ) <= ( 4 )", "pathGoalIndex not in [1, BOT_MAX_DEBUG_PATH_GOALS]\n\t%i not in [%i, %i]", interiorColor, contentMask, skipChildren) )
            __debugbreak();
        }
        Bot_DebugGoal(v75, p_results);
        __asm
        {
          vmovss  [rsp+228h+v1], xmm12
          vmovss  [rsp+228h+v1+4], xmm12
          vmovss  [rsp+228h+v1+8], xmm12
          vmovaps xmm2, xmm6; epsilon
        }
        if ( !VecNCompareCustomEpsilon(p_results->v, v1, *(float *)&_XMM2, 3) )
        {
          __asm { vmovaps xmm2, xmm12; yaw }
          G_DebugBox(p_results, &actorBoxProne, *(float *)&_XMM2, &colorBlue, 0, 0);
        }
        ++v75;
        ++p_results;
      }
      while ( v75 <= v74 );
    }
    v80 = DVARBOOL_bot_DebugPathGoal_DrawPathsBetweenPoints;
    if ( !DVARBOOL_bot_DebugPathGoal_DrawPathsBetweenPoints && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 692, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DebugPathGoal_DrawPathsBetweenPoints") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v80);
    if ( v80->current.enabled )
    {
      if ( v74 == 2 )
      {
        __asm
        {
          vmovss  [rsp+228h+v1], xmm12
          vmovss  [rsp+228h+v1+4], xmm12
          vmovss  [rsp+228h+v1+8], xmm12
          vmovaps xmm2, xmm6; epsilon
        }
        if ( !VecNCompareCustomEpsilon(&results.fraction, v1, *(float *)&_XMM2, v74 + 1) )
        {
          __asm
          {
            vmovss  [rsp+228h+v1], xmm12
            vmovss  [rsp+228h+v1+4], xmm12
            vmovss  [rsp+228h+v1+8], xmm12
            vmovaps xmm2, xmm6; epsilon
          }
          if ( !VecNCompareCustomEpsilon(&results.position.v[2], v1, *(float *)&_XMM2, 3) )
          {
            DefaultSpace = Nav_GetDefaultSpace();
            v84 = 0;
            Nav_FindPath((bfx::PolylinePathRCPtr *)&up, DefaultSpace, (const vec3_t *)&results, (const vec3_t *)&results.position.v[2], 0);
            bfx::PolylinePathRCPtr::PolylinePathRCPtr((bfx::PolylinePathRCPtr *)&origin, (const bfx::PolylinePathRCPtr *)&up);
            Nav_DrawPolyLinePath(v85);
            bfx::PolylinePathRCPtr::~PolylinePathRCPtr((bfx::PolylinePathRCPtr *)&up);
            goto LABEL_114;
          }
        }
      }
      else if ( v74 > 2 )
      {
        v86 = 0;
        if ( v74 - 1 >= 0 )
        {
          v87 = &results;
          do
          {
            ++v86;
            __asm
            {
              vmovss  [rsp+228h+v1], xmm12
              vmovss  [rsp+228h+v1+4], xmm12
              vmovss  [rsp+228h+v1+8], xmm12
              vmovaps xmm2, xmm6; epsilon
            }
            if ( !VecNCompareCustomEpsilon(&v87->fraction, v1, *(float *)&_XMM2, 3) )
            {
              __asm
              {
                vmovss  dword ptr [rsp+228h+vEyePosOut], xmm12
                vmovss  dword ptr [rsp+228h+vEyePosOut+4], xmm12
                vmovss  dword ptr [rsp+228h+vEyePosOut+8], xmm12
              }
              v89 = (const vec3_t *)((char *)&results + 12 * (v86 % v74));
              __asm { vmovaps xmm2, xmm6; epsilon }
              if ( !VecNCompareCustomEpsilon(v89->v, vEyePosOut.v, *(float *)&_XMM2, 3) )
              {
                v91 = Nav_GetDefaultSpace();
                Nav_FindPath((bfx::PolylinePathRCPtr *)&up, v91, (const vec3_t *)v87, v89, 0);
                bfx::PolylinePathRCPtr::PolylinePathRCPtr((bfx::PolylinePathRCPtr *)&origin, (const bfx::PolylinePathRCPtr *)&up);
                Nav_DrawPolyLinePath(v92);
                bfx::PolylinePathRCPtr::~PolylinePathRCPtr((bfx::PolylinePathRCPtr *)&up);
              }
            }
            v87 = (trace_t *)((char *)v87 + 12);
          }
          while ( v86 <= v74 - 1 );
        }
      }
    }
  }
  v84 = 0;
LABEL_114:
  v93 = DVARINT_ai_showNodes;
  if ( !DVARINT_ai_showNodes && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "ai_showNodes") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v93);
  if ( v93->current.integer >= 11 )
  {
    v94 = DVARINT_ai_showNodes;
    if ( !DVARINT_ai_showNodes && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "ai_showNodes") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v94);
    if ( v94->current.integer <= 13 )
    {
      v95 = Path_ZoneCount();
      LODWORD(up.v[0]) = v95;
      _RBX = DVARFLT_ai_showNodesDist;
      if ( !DVARFLT_ai_showNodesDist && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 720, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "ai_showNodesDist") )
        __debugbreak();
      Dvar_CheckFrontendServerThread(_RBX);
      __asm { vmovss  xmm10, dword ptr [rbx+28h] }
      CL_GetViewPos(LOCAL_CLIENT_0, (vec3_t *)v1);
      _RAX = CG_GetLocalClientGlobals(LOCAL_CLIENT_0);
      __asm
      {
        vmovss  xmm0, dword ptr [rax+6944h]
        vmovss  [rsp+228h+var_1C4], xmm0
        vmovss  xmm0, dword ptr [rax+6948h]
        vmovss  [rsp+228h+var_1C8], xmm0
        vmovss  xmm0, dword ptr [rax+694Ch]
        vmovss  [rsp+228h+var_1C0], xmm0
      }
      *(_QWORD *)origin.v = 0i64;
      v102 = 0;
      __asm { vmovss  xmm11, cs:__real@3f000000 }
      if ( v95 > 0 )
      {
        __asm
        {
          vmovss  xmm13, [rsp+228h+v1+8]
          vmovss  xmm14, [rsp+228h+v1+4]
          vmovss  xmm15, [rsp+228h+v1]
          vmovss  xmm8, cs:__real@40c00000
          vmovss  xmm9, cs:__real@41100000
        }
        do
        {
          v109 = Path_ConvertZoneIndexToZone(v102);
          if ( !v109 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22343, ASSERT_TYPE_ASSERT, "( zoneNode )", (const char *)&queryFormat, "zoneNode") )
            __debugbreak();
          pathnode_t::GetPos(v109, &vEyePosOut);
          __asm
          {
            vmovss  xmm5, dword ptr [rsp+228h+vEyePosOut+8]
            vmovss  xmm4, dword ptr [rsp+228h+vEyePosOut+4]
            vmovss  xmm6, dword ptr [rsp+228h+vEyePosOut]
            vucomiss xmm10, xmm12
          }
          if ( !v111 )
          {
            __asm
            {
              vsubss  xmm2, xmm15, xmm6
              vsubss  xmm0, xmm14, xmm4
              vsubss  xmm3, xmm13, xmm5
              vmulss  xmm1, xmm0, xmm0
              vmulss  xmm0, xmm2, xmm2
              vaddss  xmm2, xmm1, xmm0
              vmulss  xmm1, xmm3, xmm3
              vaddss  xmm3, xmm2, xmm1
              vmulss  xmm0, xmm10, xmm10
              vcomiss xmm3, xmm0
            }
            if ( !(v110 | v111) )
              goto LABEL_194;
          }
          __asm
          {
            vsubss  xmm6, xmm6, xmm15
            vsubss  xmm4, xmm4, xmm14
            vsubss  xmm7, xmm5, xmm13
            vmulss  xmm1, xmm4, xmm4
            vmulss  xmm0, xmm6, xmm6
            vaddss  xmm2, xmm1, xmm0
            vmulss  xmm1, xmm7, xmm7
            vaddss  xmm2, xmm2, xmm1
            vsqrtss xmm3, xmm2, xmm2
            vcmpless xmm0, xmm3, cs:__real@80000000
            vmovss  xmm1, cs:__real@3f800000
            vblendvps xmm0, xmm3, xmm1, xmm0
            vdivss  xmm5, xmm1, xmm0
            vmulss  xmm0, xmm4, xmm5
            vmulss  xmm3, xmm0, [rsp+228h+var_1C8]
            vmulss  xmm1, xmm6, xmm5
            vmulss  xmm2, xmm1, [rsp+228h+var_1C4]
            vaddss  xmm4, xmm3, xmm2
            vmulss  xmm0, xmm7, xmm5
            vmulss  xmm1, xmm0, [rsp+228h+var_1C0]
            vaddss  xmm2, xmm4, xmm1
            vcomiss xmm2, cs:VIEW_FOV_DOT
          }
          if ( v110 )
            goto LABEL_194;
          v145 = DVARINT_ai_showNodes;
          if ( !DVARINT_ai_showNodes && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "ai_showNodes") )
            __debugbreak();
          Dvar_CheckFrontendServerThread(v145);
          if ( v145->current.integer == 12 )
          {
            if ( Path_ZoneIsTraversalIsland(v102) )
              __asm { vmovups xmm0, xmmword ptr cs:?colorRed@@3Tvec4_t@@B; vec4_t const colorRed }
            else
              __asm { vmovups xmm0, xmmword ptr cs:?colorBlue@@3Tvec4_t@@B; vec4_t const colorBlue }
          }
          else
          {
            v147 = DVARINT_ai_showNodes;
            if ( !DVARINT_ai_showNodes && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "ai_showNodes") )
              __debugbreak();
            Dvar_CheckFrontendServerThread(v147);
            if ( v147->current.integer == 11 )
            {
              _RAX = Path_ZoneColor(v102);
              __asm
              {
                vmovss  xmm0, dword ptr [rax]
                vmovss  dword ptr [rsp+228h+color], xmm0
                vmovss  xmm1, dword ptr [rax+4]
                vmovss  dword ptr [rsp+228h+color+4], xmm1
                vmovss  xmm0, dword ptr [rax+8]
                vmovss  dword ptr [rsp+228h+color+8], xmm0
                vmovss  xmm1, dword ptr [rax+0Ch]
                vmovss  dword ptr [rsp+228h+color+0Ch], xmm1
              }
              goto LABEL_151;
            }
            v153 = DVARINT_ai_showNodes;
            if ( !DVARINT_ai_showNodes && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "ai_showNodes") )
              __debugbreak();
            Dvar_CheckFrontendServerThread(v153);
            if ( v153->current.integer != 13 )
              goto LABEL_151;
            __asm { vmovups xmm0, xmmword ptr cs:?colorWhite@@3Tvec4_t@@B; vec4_t const colorWhite }
          }
          __asm { vmovups xmmword ptr [rsp+228h+color], xmm0 }
LABEL_151:
          if ( Path_ZoneCount() && level.teammode != TEAMMODE_FFA )
          {
            v154 = 1;
            v155 = &origin.v[1];
            *(_QWORD *)right.v = &origin.y;
            do
            {
              *(_DWORD *)v155 += Bot_ZoneGetCount(v102, v154, BOT_ZONE_COUNT_ENEMY);
              v156 = DVARINT_ai_showNodes;
              if ( !DVARINT_ai_showNodes && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "ai_showNodes") )
                __debugbreak();
              Dvar_CheckFrontendServerThread(v156);
              if ( v156->current.integer == 11 )
              {
                _RAX = Path_ZoneColor(v102);
                __asm
                {
                  vmovss  xmm0, dword ptr [rax]
                  vmovss  [rsp+228h+v1], xmm0
                  vmovss  xmm1, dword ptr [rax+4]
                  vmovss  [rsp+228h+v1+4], xmm1
                  vmovss  xmm0, dword ptr [rax+8]
                  vmovss  [rsp+228h+v1+8], xmm0
                  vmovss  xmm1, dword ptr [rax+0Ch]
                  vmovss  [rsp+228h+v1+0Ch], xmm1
                }
              }
              else
              {
                v162 = DVARINT_ai_showNodes;
                if ( !DVARINT_ai_showNodes && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "ai_showNodes") )
                  __debugbreak();
                Dvar_CheckFrontendServerThread(v162);
                if ( v162->current.integer == 13 )
                {
                  if ( v154 )
                    __asm { vmovups xmm0, xmmword ptr cs:?colorBlue@@3Tvec4_t@@B; vec4_t const colorBlue }
                  else
                    __asm { vmovups xmm0, xmmword ptr cs:?colorRed@@3Tvec4_t@@B; vec4_t const colorRed }
                  __asm { vmovups xmmword ptr [rsp+228h+v1], xmm0 }
                }
              }
              v164 = 0;
              v165 = 4;
              v166 = &BOT_STR_ZONE_COUNT[4];
              do
              {
                v167 = DVARINT_ai_showNodes;
                if ( !DVARINT_ai_showNodes && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "ai_showNodes") )
                  __debugbreak();
                Dvar_CheckFrontendServerThread(v167);
                if ( v167->current.integer != 12 )
                {
                  if ( (unsigned int)v165 >= 5 )
                  {
                    LODWORD(contentMask) = 5;
                    LODWORD(interiorColor) = v165;
                    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22403, ASSERT_TYPE_ASSERT, "(unsigned)( k ) < (unsigned)( BOT_ZONE_COUNT_COUNT )", "k doesn't index BOT_ZONE_COUNT_COUNT\n\t%i not in [0, %i)", interiorColor, contentMask) )
                      __debugbreak();
                  }
                  Count = Bot_ZoneGetCount(v102, v154, (bot_zone_count_t)v165);
                  v169 = *v166;
                  if ( Count )
                  {
                    v164 = 1;
                    v170 = j_va("%s %i", v169, Count);
                    v171 = (const vec4_t *)v1;
                  }
                  else
                  {
                    v170 = j_va("%s %i", v169, 0i64);
                    v171 = &colorDkGrey;
                  }
                  __asm { vmovaps xmm2, xmm11; scale }
                  G_Main_AddDebugStringWithDuration(&vEyePosOut, v171, *(float *)&_XMM2, v170, 0);
                }
                __asm
                {
                  vaddss  xmm1, xmm8, dword ptr [rsp+228h+vEyePosOut+8]
                  vmovss  dword ptr [rsp+228h+vEyePosOut+8], xmm1
                }
                --v166;
                --v165;
              }
              while ( v165 >= 0 );
              v174 = DVARINT_ai_showNodes;
              v175 = *(_QWORD *)right.v;
              if ( !DVARINT_ai_showNodes && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "ai_showNodes") )
                __debugbreak();
              Dvar_CheckFrontendServerThread(v174);
              if ( v174->current.integer == 12 )
              {
                v84 = 0;
              }
              else
              {
                if ( v164 )
                {
                  __asm
                  {
                    vmovups xmm0, xmmword ptr [rsp+228h+v1]
                    vmovdqa xmmword ptr [rsp+228h+box.midPoint], xmm0
                  }
                }
                else
                {
                  __asm
                  {
                    vmovups xmm0, xmmword ptr cs:?colorDkGrey@@3Tvec4_t@@B; vec4_t const colorDkGrey
                    vmovups xmmword ptr [rsp+228h+box.midPoint], xmm0
                  }
                }
                v84 = 0;
                __asm { vmovaps xmm2, xmm11; scale }
                if ( v154 )
                  G_Main_AddDebugStringWithDuration(&vEyePosOut, (const vec4_t *)&box, *(float *)&_XMM2, "(Team 1 (Allies))", 0);
                else
                  G_Main_AddDebugStringWithDuration(&vEyePosOut, (const vec4_t *)&box, *(float *)&_XMM2, "(Team 0 (Axis))", 0);
              }
              __asm
              {
                vaddss  xmm1, xmm9, dword ptr [rsp+228h+vEyePosOut+8]
                vmovss  dword ptr [rsp+228h+vEyePosOut+8], xmm1
              }
              v155 = (float *)(v175 - 4);
              *(_QWORD *)right.v = v155;
              --v154;
            }
            while ( v154 >= 0 );
            v95 = LODWORD(up.v[0]);
          }
          v180 = j_va("[Zone %i]", (unsigned int)v102);
          __asm { vmovaps xmm2, xmm11; scale }
          G_Main_AddDebugStringWithDuration(&vEyePosOut, &color, *(float *)&_XMM2, v180, 0);
          __asm
          {
            vaddss  xmm1, xmm9, dword ptr [rsp+228h+vEyePosOut+8]
            vmovss  dword ptr [rsp+228h+vEyePosOut+8], xmm1
          }
LABEL_194:
          ++v102;
        }
        while ( v102 < v95 );
      }
      if ( Dvar_GetInt_Internal_DebugName(DVARINT_ai_showNodes, "ai_showNodes") == 13 )
      {
        if ( Path_ZoneCount() )
        {
          if ( level.teammode != TEAMMODE_FFA )
          {
            v183 = 0;
            *(_QWORD *)right.v = v95;
            if ( v95 > 0 )
            {
              v184 = 0i64;
              __asm
              {
                vmovss  xmm7, cs:__real@42000000
                vmovss  xmm8, cs:__real@41200000
                vmovss  xmm10, cs:__real@43f28000
                vmovss  xmm9, cs:__real@41700000
              }
              do
              {
                __asm
                {
                  vmovups xmm0, cs:__xmm@42000000000000000000000000000000
                  vmovups xmmword ptr [rsp+228h+results.fraction], xmm0
                  vmovss  dword ptr [rsp+228h+results.normal], xmm7
                  vmovss  dword ptr [rsp+228h+results.normal+4], xmm7
                }
                v190 = Path_ConvertZoneIndexToZone(v183);
                if ( !v190 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22449, ASSERT_TYPE_ASSERT, "( zoneNode )", (const char *)&queryFormat, "zoneNode") )
                  __debugbreak();
                v191 = 0;
                p_origin = &origin;
                do
                {
                  v193 = Bot_ZoneGetCount(v183, v191, BOT_ZONE_COUNT_ENEMY_PREDICT);
                  pathnode_t::GetPos(v190, &vEyePosOut);
                  __asm
                  {
                    vxorps  xmm0, xmm0, xmm0
                    vcvtsi2ss xmm0, xmm0, ebx
                    vmulss  xmm1, xmm0, xmm8
                    vaddss  xmm6, xmm1, xmm7
                    vaddss  xmm0, xmm6, dword ptr [rsp+228h+vEyePosOut+8]
                    vmovss  dword ptr [rsp+228h+vEyePosOut+8], xmm0
                  }
                  if ( v193 > 0 )
                  {
                    if ( v191 )
                    {
                      __asm
                      {
                        vmovups xmm3, xmmword ptr cs:?colorRed@@3Tvec4_t@@B; vec4_t const colorRed
                        vmovups xmm5, xmmword ptr cs:?colorMagenta@@3Tvec4_t@@B; vec4_t const colorMagenta
                      }
                    }
                    else
                    {
                      __asm
                      {
                        vmovups xmm3, xmmword ptr cs:?colorBlue@@3Tvec4_t@@B; vec4_t const colorBlue
                        vmovups xmm5, xmmword ptr cs:?colorLtBlue@@3Tvec4_t@@B; vec4_t const colorLtBlue
                      }
                    }
                    __asm
                    {
                      vxorps  xmm1, xmm1, xmm1
                      vcvtsi2ss xmm1, xmm1, edi
                      vxorps  xmm0, xmm0, xmm0
                      vcvtsi2ss xmm0, xmm0, dword ptr [r15]
                      vdivss  xmm2, xmm1, xmm0
                      vsubps  xmm4, xmm3, xmm5
                      vmovaps xmm3, xmm2
                      vshufps xmm3, xmm3, xmm3, 0
                      vmulps  xmm0, xmm4, xmm3
                      vaddps  xmm1, xmm0, xmm5
                      vmovups xmmword ptr [rsp+228h+color], xmm1
                      vmovaps xmm2, xmm12; yaw
                    }
                    G_DebugBox(&vEyePosOut, (const Bounds *)&results, *(float *)&_XMM2, &color, 0, 0);
                    if ( v190->dynamic.wLinkCount > 0 )
                    {
                      v211 = 0i64;
                      do
                      {
                        v212 = Path_ConvertIndexToNode(v190->constant.Links[v211].nodeNum);
                        pathnode_t::GetPos(v212, &up);
                        __asm
                        {
                          vaddss  xmm5, xmm6, dword ptr [rsp+228h+up+8]
                          vmovss  xmm1, dword ptr [rsp+228h+vEyePosOut]
                          vsubss  xmm0, xmm1, dword ptr [rsp+228h+up]
                          vmulss  xmm2, xmm0, xmm11
                          vaddss  xmm3, xmm2, dword ptr [rsp+228h+up]
                          vmovss  dword ptr [rsp+228h+up], xmm3
                          vmovss  xmm0, dword ptr [rsp+228h+vEyePosOut+4]
                          vsubss  xmm1, xmm0, dword ptr [rsp+228h+up+4]
                          vmulss  xmm2, xmm1, xmm11
                          vaddss  xmm3, xmm2, dword ptr [rsp+228h+up+4]
                          vmovss  dword ptr [rsp+228h+up+4], xmm3
                          vmovss  xmm0, dword ptr [rsp+228h+vEyePosOut+8]
                          vsubss  xmm1, xmm0, xmm5
                          vmulss  xmm2, xmm1, xmm11
                          vaddss  xmm3, xmm2, xmm5
                          vmovss  dword ptr [rsp+228h+up+8], xmm3
                        }
                        G_DebugLine(&vEyePosOut, &up, &color, 0);
                        ++v84;
                        ++v211;
                      }
                      while ( v84 < v190->dynamic.wLinkCount );
                    }
                    v84 = 0;
                  }
                  ++v191;
                  p_origin = (vec3_t *)((char *)p_origin + 4);
                }
                while ( v191 < 2 );
                if ( v183 >= s_botZoneDataCount )
                {
                  LODWORD(contentMask) = s_botZoneDataCount;
                  LODWORD(interiorColor) = v183;
                  if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22492, ASSERT_TYPE_ASSERT, "(unsigned)( i ) < (unsigned)( s_botZoneDataCount )", "i doesn't index s_botZoneDataCount\n\t%i not in [0, %i)", interiorColor, contentMask) )
                    __debugbreak();
                }
                team = s_botZoneData[v184].team;
                if ( !team )
                  goto LABEL_232;
                v226 = team;
                v111 = !Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80);
                v227 = v226 - 1;
                if ( v111 )
                {
                  v228 = 1;
                  if ( v227 < 1 )
                    v228 = v227;
                  if ( v228 < 2 )
                    goto LABEL_228;
                  LODWORD(contentMask) = 2;
                  fmt = "result doesn't index MAX_NODE_TEAMS_MP\n\t%i not in [0, %i)";
                  v230 = "(unsigned)( result ) < (unsigned)( (2) )";
                  v231 = 210;
                }
                else
                {
                  v228 = 2;
                  if ( v227 < 2 )
                    v228 = v227;
                  if ( v228 < 3 )
                    goto LABEL_228;
                  LODWORD(contentMask) = 3;
                  fmt = "result doesn't index MAX_NODE_TEAMS_SP\n\t%i not in [0, %i)";
                  v230 = "(unsigned)( result ) < (unsigned)( (3) )";
                  v231 = 205;
                }
                LODWORD(interiorColor) = v228;
                if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\pathnode.h", v231, ASSERT_TYPE_ASSERT, v230, fmt, interiorColor, contentMask) )
                  __debugbreak();
LABEL_228:
                if ( v228 )
                  __asm { vmovups xmm0, xmmword ptr cs:?colorBlue@@3Tvec4_t@@B; vec4_t const colorBlue }
                else
                  __asm { vmovups xmm0, xmmword ptr cs:?colorRed@@3Tvec4_t@@B; vec4_t const colorRed }
                __asm
                {
                  vmovups xmmword ptr [rsp+228h+box.midPoint], xmm0
                  vmovss  xmm0, dword ptr [rsp+228h+vEyePosOut]
                  vmovss  [rsp+228h+v1], xmm0
                  vmovss  xmm1, dword ptr [rsp+228h+vEyePosOut+4]
                  vmovss  [rsp+228h+v1+4], xmm1
                  vaddss  xmm2, xmm10, dword ptr [rsp+228h+vEyePosOut+8]
                  vmovss  [rsp+228h+v1+8], xmm2
                }
                G_DebugLine(&vEyePosOut, (const vec3_t *)v1, (const vec4_t *)&box, 0);
                __asm
                {
                  vaddss  xmm1, xmm9, [rsp+228h+v1+8]
                  vmovss  [rsp+228h+v1+8], xmm1
                  vmovaps xmm1, xmm9; radius
                }
                G_DebugCircle((const vec3_t *)v1, *(float *)&_XMM1, (const vec4_t *)&box, 0, 0, 1);
LABEL_232:
                ++v183;
                ++v184;
                --*(_QWORD *)right.v;
              }
              while ( *(_QWORD *)right.v );
            }
          }
        }
      }
    }
  }
  _R11 = &v263;
  __asm
  {
    vmovaps xmm6, xmmword ptr [r11-10h]
    vmovaps xmm7, xmmword ptr [r11-20h]
    vmovaps xmm8, xmmword ptr [r11-30h]
    vmovaps xmm9, xmmword ptr [r11-40h]
    vmovaps xmm10, xmmword ptr [r11-50h]
    vmovaps xmm11, xmmword ptr [r11-60h]
    vmovaps xmm12, xmmword ptr [r11-70h]
    vmovaps xmm13, xmmword ptr [r11-80h]
    vmovaps xmm14, xmmword ptr [r11-90h]
    vmovaps xmm15, xmmword ptr [r11-0A0h]
  }
}

/*
==============
Bot_DrawFindPathDebugInfo
==============
*/
void Bot_DrawFindPathDebugInfo(bot_data_t *botData, int pathFindResult, const char *debugReason)
{
  const dvar_t *v6; 
  const dvar_t *v7; 
  const dvar_t *v8; 
  char *v18; 
  const vec4_t *v19; 
  const dvar_t *v21; 
  const char *v22; 
  vec3_t xyz; 

  _RBX = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13754, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v6 = DVARINT_ai_showPaths;
  if ( !DVARINT_ai_showPaths && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "ai_showPaths") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v6);
  if ( v6->current.integer > 0 )
    goto LABEL_17;
  v7 = DVARINT_bot_DrawDebug;
  if ( !DVARINT_bot_DrawDebug && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebug") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v7);
  if ( v7->current.integer == 1 )
    goto LABEL_17;
  v8 = DVARINT_bot_DrawDebug;
  if ( !DVARINT_bot_DrawDebug && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebug") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v8);
  if ( v8->current.integer == 2 )
  {
LABEL_17:
    if ( Bot_ShouldDrawDebugForBot(_RBX) && debugReason )
    {
      _RAX = _RBX->botInfo.ent;
      __asm
      {
        vmovss  xmm4, dword ptr [rax+130h]
        vsubss  xmm1, xmm4, dword ptr [rbx+1FFDCh]
        vmovss  dword ptr [rsp+88h+xyz], xmm4
        vmovss  xmm5, dword ptr [rax+134h]
        vsubss  xmm0, xmm5, dword ptr [rbx+1FFE0h]
        vmulss  xmm2, xmm0, xmm0
        vmulss  xmm1, xmm1, xmm1
        vaddss  xmm2, xmm2, xmm1
        vcomiss xmm2, cs:__real@451c4000
        vmovss  dword ptr [rsp+88h+xyz+4], xmm5
        vmovss  xmm3, dword ptr [rax+138h]
        vmovss  dword ptr [rsp+88h+xyz+8], xmm3
        vmovss  dword ptr [rbx+1FFDCh], xmm4
        vmovss  dword ptr [rbx+1FFE0h], xmm5
        vmovss  dword ptr [rbx+1FFE4h], xmm3
      }
      if ( pathFindResult )
      {
        if ( (_RBX->botDebugData.flags & 1) != 0 )
        {
          v18 = j_va("%s *", debugReason);
          v19 = &colorOrange;
        }
        else
        {
          v18 = (char *)debugReason;
          v19 = &colorGreen;
        }
      }
      else
      {
        v18 = j_va("%s *", debugReason);
        v19 = &colorRed;
      }
      __asm { vmovss  xmm3, cs:__real@3f800000; scale }
      SV_BotDebugString(_RBX, &xyz, v19, *(float *)&_XMM3, v18, 200);
    }
  }
  v21 = DVARINT_bot_DrawDebugSpecial;
  if ( !DVARINT_bot_DrawDebugSpecial && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebugSpecial") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v21);
  if ( v21->current.integer == 11 && Bot_ShouldDrawDebugForBot(_RBX) && debugReason )
  {
    v22 = (char *)&queryFormat.fmt + 3;
    if ( (_RBX->botDebugData.flags & 1) != 0 )
      v22 = " <after bad_path>";
    Com_Printf(18, "(%7i) Bot <%2i> path <%s>%s\n", (unsigned int)level.time, (unsigned int)_RBX->botInfo.ent->s.number, debugReason, v22);
  }
  _RBX->botDebugData.flags &= ~1u;
}

/*
==============
Bot_EndProf
==============
*/

long double __fastcall Bot_EndProf(double _XMM0_8)
{
  __rdtsc();
  __asm
  {
    vxorps  xmm0, xmm0, xmm0
    vcvtsi2sd xmm0, xmm0, rax
    vmulsd  xmm0, xmm0, cs:?msecPerRawTimerTick@@3NA; double msecPerRawTimerTick
  }
  return *(double *)&_XMM0;
}

/*
==============
Bot_EnemyDied
==============
*/
void Bot_EnemyDied(bot_data_t *botData)
{
  gentity_s *v2; 
  const gentity_s *ent; 
  AIBotInterface *m_pAI; 
  gentity_s *v6; 
  const playerState_s *EntityPlayerStateConst; 
  gclient_s *client; 
  const EnemySelector *v9; 
  AIBotWrapper v11; 

  _RBX = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7177, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !_RBX->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7178, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( EntHandle::isDefined(&_RBX->botInfo.sentient->targetEnt) )
    v2 = EntHandle::ent(&_RBX->botInfo.sentient->targetEnt);
  else
    v2 = NULL;
  AICommonInterface::AICommonInterface(&v11.m_botInterface);
  v11.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v11.m_botAgentInterface);
  ent = _RBX->botInfo.ent;
  v11.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v11.m_pAI = NULL;
  AIBotWrapper::Setup(&v11, ent);
  m_pAI = v11.m_pAI;
  if ( !v11.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7186, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  if ( v2 && !Bot_CanSeeEnemy(_RBX) )
  {
    __asm
    {
      vmovss  xmm0, cs:__real@43fa0000
      vcomiss xmm0, dword ptr [rbx+2394h]
    }
    if ( EntHandle::isDefined(&_RBX->botInfo.sentient->targetEnt) )
    {
      v6 = EntHandle::ent(&_RBX->botInfo.sentient->targetEnt);
      if ( v6 )
      {
LABEL_21:
        if ( !Bot_EntityIsConsideredDead(v6) )
        {
          if ( !v6 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.h", 1164, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
            __debugbreak();
          EntityPlayerStateConst = G_GetEntityPlayerStateConst(v6);
          client = v6->client;
          if ( (!client || !client->lastStand) && (!EntityPlayerStateConst || !GameModeFlagContainer<enum POtherFlagsCommon,enum POtherFlagsSP,enum POtherFlagsMP,64>::TestFlagInternal(&EntityPlayerStateConst->otherFlags, ACTIVE, 0xBu)) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7164, ASSERT_TYPE_ASSERT, "( Bot_EntityIsConsideredDead( enemy ) || Bot_EntIsInLastStand( enemy ) )", (const char *)&queryFormat, "Bot_EntityIsConsideredDead( enemy ) || Bot_EntIsInLastStand( enemy )") )
            __debugbreak();
        }
        if ( !Sentient_IsAerial(v6->sentient) )
        {
          v9 = EnemySelector_Get(_RBX->botInfo.sentient->enemySelector);
          __asm { vmovss  xmm2, dword ptr [rbx+2394h] }
          _RBX->botInfo.enemyTrack.deadEnemyThreat = ((__int64 (__fastcall *)(AIBotInterface *, sentient_s *, int (__fastcall *)(AICommonInterface *, sentient_s *, float, bool, const vec3_t *, const vec3_t *, int, const EnemySelector *), _QWORD, vec3_t *, vec3_t *, _DWORD, const EnemySelector *))m_pAI->UpdateSingleThreat)(m_pAI, v2->sentient, m_pAI->UpdateSingleThreat, 0i64, &vec3_origin, &vec3_origin, 0, v9);
        }
        goto LABEL_33;
      }
    }
    else
    {
      v6 = NULL;
    }
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7163, ASSERT_TYPE_ASSERT, "( enemy )", (const char *)&queryFormat, "enemy") )
      __debugbreak();
    goto LABEL_21;
  }
LABEL_33:
  Bot_ClearEnemy(_RBX);
}

/*
==============
Bot_EnemyFacesBot
==============
*/
int Bot_EnemyFacesBot(const bot_data_t *botData)
{
  const gentity_s *v2; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16281, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) && (v2 = EntHandle::ent(&botData->botInfo.sentient->targetEnt)) != NULL )
    return Bot_EntityFacesBot(botData, v2);
  else
    return 0;
}

/*
==============
Bot_EnemyIsAttackingMe
==============
*/
_BOOL8 Bot_EnemyIsAttackingMe(const bot_data_t *botData, int timeLimit)
{
  gentity_s *v4; 
  gentity_s *v5; 
  sentient_info_t *SentientInfo; 
  int iLastAttackMeTime; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18328, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18331, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  if ( !botData->botInfo.ent->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18332, ASSERT_TYPE_ASSERT, "( botInfo->ent->sentient )", (const char *)&queryFormat, "botInfo->ent->sentient") )
    __debugbreak();
  if ( !EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
    return 0i64;
  v4 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
  v5 = v4;
  if ( !v4 )
    return 0i64;
  if ( !v4->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18341, ASSERT_TYPE_ASSERT, "( enemy->sentient )", (const char *)&queryFormat, "enemy->sentient") )
    __debugbreak();
  SentientInfo = Sentient_GetSentientInfo(botData->botInfo.ent->sentient, v5->sentient);
  if ( !SentientInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18344, ASSERT_TYPE_ASSERT, "( info )", (const char *)&queryFormat, "info") )
    __debugbreak();
  iLastAttackMeTime = SentientInfo->iLastAttackMeTime;
  return iLastAttackMeTime && level.time - iLastAttackMeTime < timeLimit;
}

/*
==============
Bot_EnemyPreferMelee
==============
*/
_BOOL8 Bot_EnemyPreferMelee(const bot_data_t *botData)
{
  gentity_s *v2; 
  gentity_s *v3; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8200, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8201, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
    return 0i64;
  v2 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
  v3 = v2;
  if ( !v2 )
    return 0i64;
  if ( !v2->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8210, ASSERT_TYPE_ASSERT, "( enemy->sentient )", (const char *)&queryFormat, "enemy->sentient") )
    __debugbreak();
  return !Sentient_IsAerial(v3->sentient) && Bot_AllowedToMeleeEnemy(botData) && (Bot_EntityUsingRiotShield(botData->botInfo.ent, 0) || (botData->botInfo.flags & 0x20000) != 0);
}

/*
==============
Bot_EntityDeadWhileUsingRemote
==============
*/
const playerState_s *Bot_EntityDeadWhileUsingRemote(const gentity_s *entity)
{
  const playerState_s *result; 
  const playerState_s *v3; 
  bool HasRemoteEyes; 
  GameModeFlagContainer<enum EntityStateFlagsCommon,enum EntityStateFlagsSP,enum EntityStateFlagsMP,32> *p_eFlags; 
  BOOL v6; 
  unsigned int v7; 
  BOOL v8; 

  if ( !entity && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7083, ASSERT_TYPE_ASSERT, "( entity )", (const char *)&queryFormat, "entity") )
    __debugbreak();
  result = G_GetEntityPlayerStateConst(entity);
  v3 = result;
  if ( result )
  {
    HasRemoteEyes = Sentient_HasRemoteEyes(entity->sentient);
    p_eFlags = &v3->eFlags;
    v6 = HasRemoteEyes;
    v7 = 1;
    v8 = GameModeFlagContainer<enum EntityStateFlagsCommon,enum EntityStateFlagsSP,enum EntityStateFlagsMP,32>::TestFlagInternal(p_eFlags, ACTIVE, 0xCu);
    if ( !v6 || !v8 )
      return 0;
    return (const playerState_s *)v7;
  }
  return result;
}

/*
==============
Bot_EntityDiedInternal
==============
*/
void Bot_EntityDiedInternal(bot_data_t *botData, const gentity_s *deadEnt)
{
  const playerState_s *EntityPlayerStateConst; 
  gclient_s *client; 
  const gentity_s *ent; 
  AIBotInterface *m_pAI; 
  gentity_s *v11; 
  gentity_s *v12; 
  sentient_info_t *SentientInfo; 
  char v14; 
  int time; 
  int traversal; 
  AIBotWrapper v42; 
  vec3_t outLastKnownPos; 
  vec3_t vEyeDir; 
  vec3_t vEyePosOut; 

  _RBX = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7204, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !deadEnt && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7205, ASSERT_TYPE_ASSERT, "( deadEnt )", (const char *)&queryFormat, "deadEnt") )
    __debugbreak();
  if ( !Bot_EntityIsConsideredDead(deadEnt) )
  {
    if ( !deadEnt && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.h", 1164, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
      __debugbreak();
    EntityPlayerStateConst = G_GetEntityPlayerStateConst(deadEnt);
    client = deadEnt->client;
    if ( (!client || !client->lastStand) && (!EntityPlayerStateConst || !GameModeFlagContainer<enum POtherFlagsCommon,enum POtherFlagsSP,enum POtherFlagsMP,64>::TestFlagInternal(&EntityPlayerStateConst->otherFlags, ACTIVE, 0xBu)) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7206, ASSERT_TYPE_ASSERT, "( Bot_EntityIsConsideredDead( deadEnt ) || Bot_EntIsInLastStand( deadEnt ) )", (const char *)&queryFormat, "Bot_EntityIsConsideredDead( deadEnt ) || Bot_EntIsInLastStand( deadEnt )") )
      __debugbreak();
  }
  AICommonInterface::AICommonInterface(&v42.m_botInterface);
  v42.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v42.m_botAgentInterface);
  ent = _RBX->botInfo.ent;
  v42.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v42.m_pAI = NULL;
  AIBotWrapper::Setup(&v42, ent);
  m_pAI = v42.m_pAI;
  if ( !v42.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7213, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  if ( EntHandle::isDefined(&_RBX->botInfo.sentient->targetEnt) && (v11 = EntHandle::ent(&_RBX->botInfo.sentient->targetEnt), (v12 = v11) != NULL) && v11 == deadEnt )
  {
    if ( !v11->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7219, ASSERT_TYPE_ASSERT, "( curEnemy->sentient )", (const char *)&queryFormat, "curEnemy->sentient") )
      __debugbreak();
    SentientInfo = Sentient_GetSentientInfo(_RBX->botInfo.sentient, v12->sentient);
    if ( Bot_CanSeeAndCanFireOnEnemy(_RBX) && level.time - _RBX->botInfo.enemyTrack.lastFireTime < 500 && !Bot_Weap_WeaponDoesSplashDamage(_RBX) )
    {
      if ( !SentientInfo )
        return;
      if ( level.time - SentientInfo->VisCache.iLastVisTime < 250 )
      {
        __asm
        {
          vmovaps [rsp+0E8h+var_28], xmm6
          vmovaps [rsp+0E8h+var_38], xmm7
          vmovaps [rsp+0E8h+var_48], xmm8
        }
        AICommonInterface::GetEyeDirection(m_pAI, &vEyeDir);
        Sentient_GetEyePosition(_RBX->botInfo.sentient, &vEyePosOut);
        SentientInfo_GetLastKnownPos(SentientInfo, &outLastKnownPos);
        _RAX = _RBX->botInfo.ent;
        __asm
        {
          vcvttss2si esi, dword ptr [rbx+7FC8h]
          vmovss  xmm0, dword ptr [rax+130h]
          vsubss  xmm3, xmm0, dword ptr [rsp+0E8h+outLastKnownPos]
          vmovss  xmm1, dword ptr [rax+134h]
          vsubss  xmm2, xmm1, dword ptr [rsp+0E8h+outLastKnownPos+4]
          vmovss  xmm0, dword ptr [rax+138h]
          vsubss  xmm4, xmm0, dword ptr [rsp+0E8h+outLastKnownPos+8]
          vmulss  xmm2, xmm2, xmm2
          vmulss  xmm1, xmm3, xmm3
          vaddss  xmm3, xmm2, xmm1
          vmulss  xmm0, xmm4, xmm4
          vaddss  xmm2, xmm3, xmm0
          vsqrtss xmm5, xmm2, xmm2
          vmulss  xmm0, xmm5, dword ptr [rsp+0E8h+vEyeDir]
          vaddss  xmm8, xmm0, dword ptr [rsp+0E8h+vEyePosOut]
          vmulss  xmm1, xmm5, dword ptr [rsp+0E8h+vEyeDir+4]
          vmulss  xmm2, xmm5, dword ptr [rsp+0E8h+vEyeDir+8]
          vaddss  xmm6, xmm1, dword ptr [rsp+0E8h+vEyePosOut+4]
          vaddss  xmm7, xmm2, dword ptr [rsp+0E8h+vEyePosOut+8]
          vxorps  xmm0, xmm0, xmm0
          vucomiss xmm8, xmm0
        }
        if ( v14 )
        {
          __asm { vucomiss xmm6, xmm0 }
          if ( v14 )
          {
            __asm { vucomiss xmm7, xmm0 }
            if ( v14 )
            {
              if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14633, ASSERT_TYPE_ASSERT, "( Vec3NotZero( *point ) )", (const char *)&queryFormat, "Vec3NotZero( *point )") )
                __debugbreak();
            }
          }
        }
        time = level.time;
        if ( _RBX->botInfo.lookAtType <= BOT_LOOK_CODE_FORCED || level.time >= _RBX->botInfo.lookAtTime )
        {
          _RBX->botInfo.lookAtType = BOT_LOOK_CODE_FORCED;
          _RBX->botInfo.lookAtTime = time + _ESI;
          __asm
          {
            vmovss  dword ptr [rbx+6EC8h], xmm8
            vmovss  dword ptr [rbx+6ECCh], xmm6
            vmovss  dword ptr [rbx+6ED0h], xmm7
          }
          traversal = _RBX->botInfo.traversal;
          if ( (traversal & 1) != 0 )
            _RBX->botInfo.traversal = traversal & 0xFFFFFFFE;
          time = level.time;
        }
        __asm
        {
          vcvttss2si eax, dword ptr [rbx+7FC4h]
          vmovaps xmm8, [rsp+0E8h+var_48]
          vmovaps xmm7, [rsp+0E8h+var_38]
          vmovaps xmm6, [rsp+0E8h+var_28]
        }
        _RBX->botInfo.forceFireTime = time + _EAX;
      }
    }
    if ( SentientInfo )
      Bot_EnemyDied(_RBX);
  }
  else
  {
    if ( !deadEnt->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7250, ASSERT_TYPE_ASSERT, "( deadEnt->sentient )", (const char *)&queryFormat, "deadEnt->sentient") )
      __debugbreak();
    Sentient_GetSentientInfo(_RBX->botInfo.sentient, deadEnt->sentient)->iLastAttackMeTime = 0;
    if ( Bot_RecentSeeSentient(_RBX, deadEnt->sentient, 1000) )
      SentientInfo_Clear(_RBX->botInfo.ent->sentient, deadEnt->sentient);
  }
}

/*
==============
Bot_EntityFacesBot
==============
*/
_BOOL8 Bot_EntityFacesBot(const bot_data_t *botData, const gentity_s *ent)
{
  sentient_s *sentient; 
  int HasLOSToHighAerialEnemy; 
  gentity_s *v8; 
  playerState_s *EntityPlayerState; 
  const vec3_t *p_currentAngles; 
  char v37; 
  vec3_t forward; 

  _RBX = ent;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16228, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !_RBX && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16229, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( !_RBX->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16230, ASSERT_TYPE_ASSERT, "( ent->sentient )", (const char *)&queryFormat, "ent->sentient") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16233, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  sentient = _RBX->sentient;
  if ( sentient )
  {
    if ( Bot_IsHighAerialSentient(sentient) )
      HasLOSToHighAerialEnemy = Bot_HasLOSToHighAerialEnemy(botData, _RBX);
    else
      HasLOSToHighAerialEnemy = Bot_CanSeeSentientQuick(botData, _RBX->sentient);
  }
  else
  {
    HasLOSToHighAerialEnemy = Bot_CanSeePointViaNodes(botData, &_RBX->r.currentOrigin);
  }
  if ( !HasLOSToHighAerialEnemy )
    return 0i64;
  __asm
  {
    vmovaps [rsp+78h+var_18], xmm6
    vmovaps [rsp+78h+var_28], xmm7
  }
  if ( !Bot_IsVehicleEnt(_RBX) || !EntHandle::isDefined(&_RBX->r.ownerNum) || (v8 = EntHandle::ent(&_RBX->r.ownerNum), (EntityPlayerState = G_GetEntityPlayerState(v8)) == NULL) || (p_currentAngles = &EntityPlayerState->viewangles, EntityPlayerState->vehicleState.entity == 2047) )
    p_currentAngles = &_RBX->r.currentAngles;
  AngleVectors(p_currentAngles, &forward, NULL, NULL);
  __asm
  {
    vmovss  xmm0, dword ptr [rbx+130h]
    vmovss  xmm1, dword ptr [rbx+134h]
    vsubss  xmm7, xmm0, dword ptr [rax+130h]
    vsubss  xmm6, xmm1, dword ptr [rax+134h]
    vmovss  xmm0, dword ptr [rbx+138h]
    vsubss  xmm5, xmm0, dword ptr [rax+138h]
    vmulss  xmm2, xmm6, xmm6
    vmulss  xmm1, xmm7, xmm7
    vaddss  xmm3, xmm2, xmm1
    vmovss  xmm1, cs:__real@3f800000
    vmulss  xmm0, xmm5, xmm5
    vaddss  xmm2, xmm3, xmm0
    vsqrtss xmm4, xmm2, xmm2
    vcmpless xmm0, xmm4, cs:__real@80000000
    vblendvps xmm0, xmm4, xmm1, xmm0
    vdivss  xmm1, xmm1, xmm0
    vmulss  xmm2, xmm7, xmm1
    vmovaps xmm7, [rsp+78h+var_28]
    vmulss  xmm3, xmm6, xmm1
    vmulss  xmm0, xmm3, dword ptr [rsp+78h+forward+4]
    vmovaps xmm6, [rsp+78h+var_18]
    vmulss  xmm4, xmm5, xmm1
    vmulss  xmm1, xmm2, dword ptr [rsp+78h+forward]
    vaddss  xmm2, xmm1, xmm0
    vmulss  xmm1, xmm4, dword ptr [rsp+78h+forward+8]
    vaddss  xmm2, xmm2, xmm1
    vcomiss xmm2, cs:__real@bdcccccd
  }
  return v37 != 0;
}

/*
==============
Bot_EntityIsConsideredDead
==============
*/
bool Bot_EntityIsConsideredDead(const gentity_s *ent)
{
  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7125, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( ent->health <= 0 || (unsigned int)Bot_EntityDeadWhileUsingRemote(ent) )
    return 1;
  if ( !ent->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7137, ASSERT_TYPE_ASSERT, "( ent->sentient )", (const char *)&queryFormat, "ent->sentient") )
    __debugbreak();
  return Sentient_IsAerial(ent->sentient) && Bot_IsAerialEntityInDeathStage(ent);
}

/*
==============
Bot_EntityIsInvisible
==============
*/
_BOOL8 Bot_EntityIsInvisible(const gentity_s *ent)
{
  const playerState_s *EntityPlayerStateConst; 

  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2136, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  EntityPlayerStateConst = G_GetEntityPlayerStateConst(ent);
  return EntityPlayerStateConst && GameModeFlagContainer<enum EntityStateFlagsCommon,enum EntityStateFlagsSP,enum EntityStateFlagsMP,32>::TestFlagInternal(&EntityPlayerStateConst->eFlags, ACTIVE, 0xCu) || GameModeFlagContainer<enum EntityStateFlagsCommon,enum EntityStateFlagsSP,enum EntityStateFlagsMP,32>::TestFlagInternal(&ent->s.lerp.eFlags, ACTIVE, 0xCu) || ent->s.eType == ET_INVISIBLE;
}

/*
==============
Bot_EntityIsJuggernaut
==============
*/
_BOOL8 Bot_EntityIsJuggernaut(const gentity_s *ent)
{
  const playerState_s *EntityPlayerStateConst; 

  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2084, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  EntityPlayerStateConst = G_GetEntityPlayerStateConst(ent);
  return EntityPlayerStateConst && BG_HasPerk(&EntityPlayerStateConst->perks, 0x2Fu);
}

/*
==============
Bot_EntityOccupiesLocation
==============
*/

__int64 __fastcall Bot_EntityOccupiesLocation(const gentity_s *ent, const vec3_t *origin, double distanceScalar)
{
  bool v8; 
  bool v9; 
  __int64 result; 

  __asm { vmovaps [rsp+58h+var_28], xmm7 }
  _RDI = origin;
  _RBX = ent;
  __asm { vmovaps xmm7, xmm2 }
  v8 = ent == NULL;
  if ( !ent )
  {
    v9 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10086, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent");
    v8 = !v9;
    if ( v9 )
      __debugbreak();
  }
  __asm
  {
    vmovss  xmm0, dword ptr [rbx+138h]
    vsubss  xmm2, xmm0, dword ptr [rdi+8]
    vmovss  xmm1, dword ptr [rbx+114h]
    vandps  xmm2, xmm2, cs:__xmm@7fffffff7fffffff7fffffff7fffffff
    vmulss  xmm0, xmm1, cs:__real@40000000
    vcomiss xmm2, xmm0
  }
  if ( v8 )
  {
    __asm
    {
      vmovss  xmm0, dword ptr [rdi]
      vmovss  xmm1, dword ptr [rdi+4]
      vsubss  xmm2, xmm1, dword ptr [rbx+134h]
      vsubss  xmm4, xmm0, dword ptr [rbx+130h]
      vmulss  xmm3, xmm2, xmm2
      vmovaps [rsp+58h+var_18], xmm6
      vmovss  xmm6, dword ptr [rbx+10Ch]
      vmulss  xmm1, xmm6, cs:__real@41800000
      vmulss  xmm0, xmm4, xmm4
      vaddss  xmm5, xmm3, xmm0
      vmulss  xmm2, xmm1, xmm7
      vmulss  xmm0, xmm2, xmm6
      vmovaps xmm6, [rsp+58h+var_18]
      vmulss  xmm3, xmm0, xmm7
      vcomiss xmm5, xmm3
    }
  }
  result = 0i64;
  __asm { vmovaps xmm7, [rsp+58h+var_28] }
  return result;
}

/*
==============
Bot_EntityOnScreenForMelee
==============
*/
int Bot_EntityOnScreenForMelee(bot_data_t *botData, const gentity_s *ent)
{
  int result; 
  vec3_t overrideAimPoint; 
  vec3_t vEyePosOut; 

  _RBX = ent;
  _RDI = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16428, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !_RBX && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16429, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( !_RBX->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16430, ASSERT_TYPE_ASSERT, "( ent->sentient )", (const char *)&queryFormat, "ent->sentient") )
    __debugbreak();
  Sentient_GetEyePosition(_RBX->sentient, &vEyePosOut);
  __asm
  {
    vmovss  xmm0, dword ptr [rbx+130h]
    vmovss  xmm1, dword ptr [rbx+134h]
    vmovss  xmm2, dword ptr [rdi+0A0h]; arcCos
    vmovss  dword ptr [rsp+68h+overrideAimPoint], xmm0
    vmovss  xmm0, dword ptr [rbx+138h]
    vmovss  dword ptr [rsp+68h+overrideAimPoint+8], xmm0
    vmovss  dword ptr [rsp+68h+overrideAimPoint+4], xmm1
  }
  if ( Bot_EntityWithinSpecificCombatFOV(_RDI, _RBX, *(float *)&_XMM2, &vEyePosOut, NULL) )
    return 1;
  __asm { vmovss  xmm2, dword ptr [rdi+0A0h]; arcCos }
  result = Bot_EntityWithinSpecificCombatFOV(_RDI, _RBX, *(float *)&_XMM2, &overrideAimPoint, NULL);
  if ( result )
    return 1;
  return result;
}

/*
==============
Bot_EntityUsingRiotShield
==============
*/
_BOOL8 Bot_EntityUsingRiotShield(const gentity_s *ent, int onlyPermanentShields)
{
  const playerState_s *EntityPlayerStateConst; 
  const playerState_s *v4; 
  const Weapon *ViewmodelWeapon; 
  bool v6; 
  _BOOL8 result; 

  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16297, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( !ent->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16298, ASSERT_TYPE_ASSERT, "( ent->sentient )", (const char *)&queryFormat, "ent->sentient") )
    __debugbreak();
  EntityPlayerStateConst = G_GetEntityPlayerStateConst(ent);
  v4 = EntityPlayerStateConst;
  result = 0;
  if ( EntityPlayerStateConst )
  {
    ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(EntityPlayerStateConst);
    v6 = BG_UsingAlternate(v4);
    if ( BG_IsRiotShield(ViewmodelWeapon, v6) )
      return 1;
  }
  return result;
}

/*
==============
Bot_EntityVisibleThroughWalls
==============
*/
_BOOL8 Bot_EntityVisibleThroughWalls(const bot_data_t *botData, const gentity_s *ent)
{
  signed __int64 v4; 
  bool HasPerk; 
  bool v6; 
  unsigned int EntHudOutlineIndex; 
  const HudOutlineDef *HudOutlineDefFromPlayerState; 
  __int64 v22; 
  __int64 v23; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6413, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6414, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState )", (const char *)&queryFormat, "botData->botInfo.playerState") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6415, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6416, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 196, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
    __debugbreak();
  v4 = ent - g_entities;
  if ( (unsigned int)v4 >= 0x800 )
  {
    LODWORD(v22) = ent - g_entities;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 199, ASSERT_TYPE_ASSERT, "(unsigned)( index ) < (unsigned)( ( 2048 ) )", "index doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v22, 2048) )
      __debugbreak();
  }
  v4 = (__int16)v4;
  if ( (unsigned int)(__int16)v4 >= 0x800 )
  {
    LODWORD(v23) = 2048;
    LODWORD(v22) = v4;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 207, ASSERT_TYPE_ASSERT, "(unsigned)( entityIndex ) < (unsigned)( ( 2048 ) )", "entityIndex doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v22, v23) )
      __debugbreak();
  }
  if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 208, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
    __debugbreak();
  if ( g_entities[v4].r.isInUse != g_entityIsInUse[v4] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 209, ASSERT_TYPE_ASSERT, "( g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex] )", (const char *)&queryFormat, "g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex]") )
    __debugbreak();
  if ( !g_entityIsInUse[v4] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6417, ASSERT_TYPE_ASSERT, "( G_IsEntityInUse( G_GetEntityIndex( ent ) ) )", (const char *)&queryFormat, "G_IsEntityInUse( G_GetEntityIndex( ent ) )") )
    __debugbreak();
  if ( Bot_IsHardwareEnt(ent) )
  {
    HasPerk = BG_HasPerk(&botData->botInfo.playerState->perks, 6u);
    v6 = !HasPerk;
    if ( HasPerk )
    {
      _RAX = botData->botInfo.ent;
      __asm
      {
        vmovss  xmm0, dword ptr [rax+130h]
        vsubss  xmm3, xmm0, dword ptr [rsi+130h]
        vmovss  xmm1, dword ptr [rax+134h]
        vsubss  xmm2, xmm1, dword ptr [rsi+134h]
        vmovss  xmm0, dword ptr [rax+138h]
        vsubss  xmm4, xmm0, dword ptr [rsi+138h]
        vmulss  xmm2, xmm2, xmm2
        vmulss  xmm1, xmm3, xmm3
        vmulss  xmm0, xmm4, xmm4
        vaddss  xmm3, xmm2, xmm1
        vaddss  xmm2, xmm3, xmm0
        vcomiss xmm2, cs:__real@48fd2000
      }
      if ( v6 )
        return 1i64;
    }
  }
  EntHudOutlineIndex = G_HudOutline_GetEntHudOutlineIndex(ent);
  HudOutlineDefFromPlayerState = BG_GetHudOutlineDefFromPlayerState(botData->botInfo.playerState, EntHudOutlineIndex);
  return Bot_CanSeeEntityOutline(botData, ent) && HudOutlineDefFromPlayerState && HudOutlineDefFromPlayerState->drawOccludedPixels;
}

/*
==============
Bot_EntityWithinSpecificCombatFOV
==============
*/

__int64 __fastcall Bot_EntityWithinSpecificCombatFOV(bot_data_t *botData, const gentity_s *ent, double arcCos, const vec3_t *overrideAimPoint, float *dotResult)
{
  gentity_s *v15; 
  unsigned int v16; 
  AIBotInterface *m_pAI; 
  const gentity_s *v21; 
  sentient_s *sentient; 
  __int64 result; 
  AIBotWrapper v53; 
  vec3_t aimPoint; 
  vec3_t eyePoint; 
  vec3_t vEyeDir; 
  char v57; 
  void *retaddr; 

  _RAX = &retaddr;
  __asm
  {
    vmovaps xmmword ptr [rax-48h], xmm6
    vmovaps xmmword ptr [rax-58h], xmm7
    vmovaps xmmword ptr [rax-68h], xmm8
    vmovaps xmmword ptr [rax-78h], xmm9
  }
  _R12 = dotResult;
  _RSI = overrideAimPoint;
  __asm { vmovaps xmm9, xmm2 }
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8968, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8969, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  AICommonInterface::AICommonInterface(&v53.m_botInterface);
  v53.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v53.m_botAgentInterface);
  v15 = botData->botInfo.ent;
  v16 = 0;
  v53.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v53.m_pAI = NULL;
  AIBotWrapper::Setup(&v53, v15);
  m_pAI = v53.m_pAI;
  if ( !v53.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8971, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  AICommonInterface::GetEyeDirection(m_pAI, &vEyeDir);
  m_pAI->GetEyePosition(m_pAI, &eyePoint);
  if ( _RSI )
  {
    __asm
    {
      vmovss  xmm0, dword ptr [rsi]
      vmovss  xmm1, dword ptr [rsi+4]
      vmovss  dword ptr [rbp+4Fh+aimPoint], xmm0
      vmovss  xmm0, dword ptr [rsi+8]
      vmovss  dword ptr [rbp+4Fh+aimPoint+8], xmm0
      vmovss  dword ptr [rbp+4Fh+aimPoint+4], xmm1
    }
  }
  else
  {
    if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
      v21 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
    else
      v21 = NULL;
    if ( ent == v21 )
    {
      Bot_GetEnemyAimPoints(botData, ent, &aimPoint, &eyePoint);
    }
    else
    {
      sentient = ent->sentient;
      if ( sentient )
        Sentient_GetHeadPosition(sentient, &aimPoint);
      else
        G_Utils_EntityCentroid(ent, &aimPoint);
    }
  }
  __asm
  {
    vmovss  xmm0, dword ptr [rbp+4Fh+aimPoint]
    vsubss  xmm6, xmm0, dword ptr [rbp+4Fh+eyePoint]
    vmovss  xmm1, dword ptr [rbp+4Fh+aimPoint+4]
    vsubss  xmm7, xmm1, dword ptr [rbp+4Fh+eyePoint+4]
    vmovss  xmm0, dword ptr [rbp+4Fh+aimPoint+8]
    vsubss  xmm8, xmm0, dword ptr [rbp+4Fh+eyePoint+8]
    vmulss  xmm0, xmm8, xmm8
    vmulss  xmm2, xmm7, xmm7
    vmulss  xmm1, xmm6, xmm6
    vaddss  xmm3, xmm2, xmm1
    vmovss  xmm1, cs:__real@3f800000
    vaddss  xmm2, xmm3, xmm0
    vsqrtss xmm4, xmm2, xmm2
    vcmpless xmm0, xmm4, cs:__real@80000000
    vblendvps xmm0, xmm4, xmm1, xmm0
    vdivss  xmm5, xmm1, xmm0
    vmulss  xmm0, xmm6, xmm5
    vmulss  xmm3, xmm0, dword ptr [rbp+4Fh+vEyeDir]
    vmulss  xmm1, xmm7, xmm5
    vmulss  xmm2, xmm1, dword ptr [rbp+4Fh+vEyeDir+4]
    vmulss  xmm0, xmm8, xmm5
    vmulss  xmm1, xmm0, dword ptr [rbp+4Fh+vEyeDir+8]
    vaddss  xmm4, xmm3, xmm2
    vaddss  xmm2, xmm4, xmm1
  }
  if ( dotResult )
    __asm { vmovss  dword ptr [r12], xmm2 }
  __asm { vcomiss xmm9, xmm2 }
  LOBYTE(v16) = dotResult == NULL;
  result = v16;
  _R11 = &v57;
  __asm
  {
    vmovaps xmm6, xmmword ptr [r11-10h]
    vmovaps xmm7, xmmword ptr [r11-20h]
    vmovaps xmm8, xmmword ptr [r11-30h]
    vmovaps xmm9, xmmword ptr [r11-40h]
  }
  return result;
}

/*
==============
Bot_FinalizeCmdTime
==============
*/
void Bot_FinalizeCmdTime(usercmd_s *cmd)
{
  int time; 

  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5501, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  time = SvPersistentGlobalsMP::GetPersistentGlobalsMP()->time;
  cmd->serverTime = time;
  cmd->commandTime = time;
  cmd->inputTime = time;
}

/*
==============
Bot_FindNodeRandom
==============
*/
__int64 Bot_FindNodeRandom(const bot_data_t *botData, const vec3_t *nonBotOverrideOrigin, const vec3_t *nonBotOverrideAngles)
{
  signed __int64 v3; 
  void *v12; 
  const bot_data_t *v15; 
  const char *v16; 
  const char *v17; 
  int v18; 
  int v22; 
  __int64 v23; 
  unsigned __int16 i; 
  const vec3_t *p_viewangles; 
  int v44; 
  int v45; 
  int v46; 
  int NodeTeam; 
  int v48; 
  int Count; 
  int v50; 
  int v51; 
  int v52; 
  __int64 v53; 
  char v54; 
  team_t eTeam; 
  unsigned int v56; 
  const char *fmt; 
  const char *v58; 
  int v59; 
  int v60; 
  int v61; 
  unsigned int v62; 
  int v63; 
  int v64; 
  char *v65; 
  __int16 v68; 
  int v69; 
  unsigned __int16 v70; 
  pathnode_t *v71; 
  unsigned __int16 v72; 
  const char *MapName; 
  const char *v74; 
  char v75; 
  char v76; 
  int v87; 
  __int16 v100; 
  unsigned __int16 v101; 
  __int64 result; 
  __int64 v112; 
  __int64 v113; 
  __int16 v114; 
  int v115; 
  int v116; 
  int anyValidZones; 
  int v118; 
  int v119; 
  vec3_t forward; 
  vec3_t pos; 
  unsigned __int8 validZones[8]; 
  __int64 v124; 
  __int64 v125; 
  __int64 v126; 
  char v127[393226]; 
  char v136; 

  v12 = alloca(v3);
  __asm
  {
    vmovaps [rsp+60170h+var_40], xmm6
    vmovaps [rsp+60170h+var_50], xmm7
    vmovaps [rsp+60170h+var_60], xmm8
    vmovaps [rsp+60170h+var_70], xmm9
    vmovaps [rsp+60170h+var_80], xmm10
    vmovaps [rsp+60170h+var_90], xmm11
    vmovaps [rsp+60170h+var_A0], xmm12
    vmovaps [rsp+60170h+var_B0], xmm13
  }
  _RBX = nonBotOverrideOrigin;
  v15 = botData;
  if ( !botData )
  {
    if ( nonBotOverrideOrigin && nonBotOverrideAngles )
      goto LABEL_15;
    v16 = "botData || (nonBotOverrideOrigin && nonBotOverrideAngles)";
    v17 = "( botData || (nonBotOverrideOrigin && nonBotOverrideAngles) )";
    v18 = 21018;
    goto LABEL_13;
  }
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21023, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !v15->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21024, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
    __debugbreak();
  if ( !v15->botInfo.playerState )
  {
    v16 = "botData->botInfo.playerState";
    v17 = "( botData->botInfo.playerState )";
    v18 = 21025;
LABEL_13:
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", v18, ASSERT_TYPE_ASSERT, v17, (const char *)&queryFormat, v16) )
      __debugbreak();
  }
LABEL_15:
  __asm
  {
    vmovss  xmm0, dword ptr cs:s_botWorldBounds.halfSize
    vmaxss  xmm1, xmm0, dword ptr cs:s_botWorldBounds.halfSize+4
    vmulss  xmm13, xmm1, xmm1
  }
  v22 = Path_NodeCount();
  v115 = v22;
  Sys_ProfBeginNamedEvent(0xFFFFFFFF, "Bot_FindNodeRandom");
  v114 = -1;
  v118 = 0xFFFF;
  v23 = 0i64;
  for ( i = 0; i < v22; ++i )
    *(_WORD *)&v127[2 * i + 2] = i;
  if ( v15 )
  {
    _RAX = v15->botInfo.ent;
    __asm
    {
      vmovss  xmm9, dword ptr [rax+130h]
      vmovss  xmm10, dword ptr [rax+134h]
      vmovss  xmm11, dword ptr [rax+138h]
    }
    p_viewangles = &v15->botInfo.playerState->viewangles;
  }
  else
  {
    __asm
    {
      vmovss  xmm9, dword ptr [rbx]
      vmovss  xmm10, dword ptr [rbx+4]
      vmovss  xmm11, dword ptr [rbx+8]
    }
    p_viewangles = nonBotOverrideAngles;
  }
  AngleVectors(p_viewangles, &forward, NULL, NULL);
  __asm
  {
    vmovss  xmm4, dword ptr [rsp+60170h+forward]
    vmulss  xmm1, xmm4, xmm4
    vmovss  xmm5, dword ptr [rsp+60170h+forward+4]
    vmulss  xmm0, xmm5, xmm5
    vaddss  xmm1, xmm1, xmm0
    vsqrtss xmm2, xmm1, xmm1
    vcmpless xmm0, xmm2, cs:__real@80000000
    vmovss  xmm3, cs:__real@3f800000
    vblendvps xmm1, xmm2, xmm3, xmm0
    vmovss  [rsp+60170h+var_60120], xmm1
    vdivss  xmm1, xmm3, xmm1
    vmulss  xmm0, xmm4, xmm1
    vmovss  dword ptr [rsp+60170h+forward], xmm0
    vmulss  xmm1, xmm5, xmm1
    vmovss  dword ptr [rsp+60170h+forward+4], xmm1
    vxorps  xmm12, xmm12, xmm12
    vmovss  dword ptr [rsp+60170h+forward+8], xmm12
  }
  v44 = 0x7FFFFFFF;
  v119 = 0x7FFFFFFF;
  v45 = 0;
  *(_QWORD *)validZones = -1i64;
  v124 = -1i64;
  v125 = -1i64;
  v126 = -1i64;
  v46 = 0;
  anyValidZones = 0;
  if ( Path_ZoneCount() )
  {
    if ( level.teammode != TEAMMODE_FFA )
    {
      if ( v15 )
      {
        NodeTeam = Path_GetNodeTeam(v15->botInfo.sentient->eTeam);
        v48 = 0;
        if ( Path_ZoneCount() > 0 )
        {
          do
          {
            Count = Bot_ZoneGetCount(v48, NodeTeam, BOT_ZONE_COUNT_ALLY);
            v50 = Bot_ZoneGetCount(v48, NodeTeam, BOT_ZONE_COUNT_PATH_ALLY) + Count;
            if ( v44 < v50 )
              v50 = v44;
            v44 = v50;
            if ( Bot_ZoneGetCount(v48, NodeTeam, BOT_ZONE_COUNT_ENEMY_PREDICT) > 0 )
            {
              v51 = Bot_ZoneGetCount(v48, NodeTeam, BOT_ZONE_COUNT_ENEMY_PREDICT);
              if ( v45 > v51 )
                v51 = v45;
              v45 = v51;
            }
            ++v48;
          }
          while ( v48 < Path_ZoneCount() );
          v119 = v50;
          v46 = 0;
        }
      }
    }
  }
  v52 = 0;
  if ( Path_ZoneCount() > 0 )
  {
    while ( 1 )
    {
      if ( v52 >= s_botZoneDataCount )
      {
        LODWORD(v113) = s_botZoneDataCount;
        LODWORD(v112) = v52;
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21107, ASSERT_TYPE_ASSERT, "(unsigned)( iZone ) < (unsigned)( s_botZoneDataCount )", "iZone doesn't index s_botZoneDataCount\n\t%i not in [0, %i)", v112, v113) )
          __debugbreak();
      }
      v53 = v52 / 8;
      v54 = v52 % 8;
      if ( (unsigned int)v53 >= 0x20 )
      {
        LODWORD(v113) = 32;
        LODWORD(v112) = v52 / 8;
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21108, ASSERT_TYPE_ASSERT, "(unsigned)( (iZone / 8) ) < (unsigned)( ( ( 256 ) / 8 ) )", "(iZone / 8) doesn't index BOT_ZONE_STACK_VISIT_MAX\n\t%i not in [0, %i)", v112, v113) )
          __debugbreak();
      }
      if ( Path_ZoneCount() > 0 && Path_ZoneIsTraversalIsland(v52) )
        validZones[v53] &= ~(1 << v54);
      if ( !Path_ZoneCount() || level.teammode == TEAMMODE_FFA || !botData )
        goto LABEL_62;
      eTeam = botData->botInfo.sentient->eTeam;
      if ( Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) )
      {
        v56 = 2;
        if ( eTeam <= TEAM_TWO )
          v56 = eTeam - 1;
        if ( v56 < 3 )
          goto LABEL_56;
        LODWORD(v113) = 3;
        fmt = "result doesn't index MAX_NODE_TEAMS_SP\n\t%i not in [0, %i)";
        v58 = "(unsigned)( result ) < (unsigned)( (3) )";
        v59 = 205;
      }
      else
      {
        v56 = 1;
        if ( eTeam <= TEAM_ONE )
          v56 = eTeam - 1;
        if ( v56 < 2 )
          goto LABEL_56;
        LODWORD(v113) = 2;
        fmt = "result doesn't index MAX_NODE_TEAMS_MP\n\t%i not in [0, %i)";
        v58 = "(unsigned)( result ) < (unsigned)( (2) )";
        v59 = 210;
      }
      LODWORD(v112) = v56;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\pathnode.h", v59, ASSERT_TYPE_ASSERT, v58, fmt, v112, v113) )
        __debugbreak();
LABEL_56:
      v60 = Bot_ZoneGetCount(v52, v56, BOT_ZONE_COUNT_ALLY);
      if ( Bot_ZoneGetCount(v52, v56, BOT_ZONE_COUNT_PATH_ALLY) + v60 > v119 )
        validZones[v53] &= ~(1 << v54);
      v61 = Bot_ZoneGetCount(v52, v56, BOT_ZONE_COUNT_ENEMY_PREDICT);
      if ( v45 > 0 && v61 <= 0 )
        validZones[v53] &= ~(1 << v54);
      v46 = anyValidZones;
LABEL_62:
      if ( !v46 )
      {
        v46 = (1 << v54) & validZones[v53];
        anyValidZones = v46;
      }
      if ( ++v52 >= Path_ZoneCount() )
      {
        v23 = 0i64;
        v15 = botData;
        break;
      }
    }
  }
  v62 = 0;
  v63 = 7;
  if ( GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&v15->botInfo.playerState->pm_flags, ACTIVE, 0x21u) )
    v63 = 6;
  if ( GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&v15->botInfo.playerState->pm_flags, ACTIVE, 0x23u) )
    v63 &= ~4u;
  if ( GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&v15->botInfo.playerState->pm_flags, ACTIVE, 0x22u) )
    v63 &= ~2u;
  v64 = v115;
  v65 = &v127[2 * v115];
  __asm
  {
    vmovss  xmm7, cs:__real@491c4000
    vmovss  xmm8, cs:__real@3f000000
  }
  v68 = -1;
  do
  {
    if ( v64 <= 0 )
      break;
    v69 = G_irand(0, v64);
    v70 = *(_WORD *)&v127[2 * v69 + 2];
    *(_WORD *)&v127[2 * v69 + 2] = *(_WORD *)v65;
    v116 = --v64;
    v65 -= 2;
    if ( Path_NodeValid(v70) )
    {
      v71 = Path_ConvertIndexToNode(v70);
      if ( !v71 )
      {
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21164, ASSERT_TYPE_ASSERT, "( node )", (const char *)&queryFormat, "node") )
          __debugbreak();
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20895, ASSERT_TYPE_ASSERT, "( node )", (const char *)&queryFormat, "node") )
          __debugbreak();
      }
      v72 = Path_ConvertNodeToIndex(v71);
      if ( !Path_IsNodeDisconnected(v72) && (Path_AllowedStancesForNode(v71) & v63) != 0 && !v71->constant.parent.index )
      {
        if ( (unsigned int)v23 >= 0xFFFF )
        {
          MapName = SV_Game_GetMapName();
          Com_Error_impl(ERR_DROP, (const ObfuscateErrorText)&stru_1440CE1B0, 275i64, 0xFFFFi64, MapName);
        }
        else
        {
          *(_WORD *)&v127[2 * v23 + 262146] = v70;
          v23 = (unsigned int)(v23 + 1);
        }
        if ( !Bot_RandomNodeInvalidSelective(botData, v71, validZones, anyValidZones) )
        {
          if ( v62 >= 0xFFFF )
          {
            v74 = SV_Game_GetMapName();
            Com_Error_impl(ERR_DROP, (const ObfuscateErrorText)&stru_1440CE210, 276i64, 0xFFFFi64, v74);
          }
          else
          {
            *(_WORD *)&v127[2 * v62++ + 131074] = v70;
          }
          pathnode_t::GetPos(v71, &pos);
          __asm
          {
            vmovss  xmm5, dword ptr [rsp+60170h+pos]
            vsubss  xmm2, xmm9, xmm5
            vmovss  xmm6, dword ptr [rsp+60170h+pos+4]
            vsubss  xmm0, xmm10, xmm6
            vsubss  xmm3, xmm11, dword ptr [rbp+60070h+pos+8]
            vmulss  xmm1, xmm0, xmm0
            vmulss  xmm0, xmm2, xmm2
            vaddss  xmm2, xmm1, xmm0
            vmulss  xmm1, xmm3, xmm3
            vaddss  xmm4, xmm2, xmm1
          }
          v87 = v118;
          __asm { vcomiss xmm4, xmm13 }
          if ( !(v75 | v76) )
            LOWORD(v87) = v70;
          v118 = v87;
          __asm { vcomiss xmm4, xmm7 }
          if ( !(v75 | v76) )
          {
            __asm
            {
              vsubss  xmm3, xmm5, xmm9
              vsubss  xmm4, xmm6, xmm10
              vmulss  xmm1, xmm4, xmm4
              vmulss  xmm0, xmm3, xmm3
              vaddss  xmm2, xmm1, xmm0
              vcomiss xmm2, xmm12
            }
            if ( !(v75 | v76) )
            {
              __asm
              {
                vmovaps xmm1, xmm2
                vrsqrtss xmm2, xmm1, xmm2
                vmulss  xmm0, xmm2, xmm3
                vmulss  xmm3, xmm0, dword ptr [rsp+60170h+forward]
                vmulss  xmm1, xmm2, xmm4
                vmulss  xmm2, xmm1, dword ptr [rsp+60170h+forward+4]
                vaddss  xmm0, xmm3, xmm2
              }
              v100 = v114;
              __asm { vcomiss xmm0, xmm8 }
              if ( !(v75 | v76) )
                v100 = v70;
              v114 = v100;
            }
          }
        }
      }
      v64 = v116;
    }
    v68 = v114;
  }
  while ( v114 == -1 );
  v101 = v118;
  if ( v68 != -1 )
    v101 = v68;
  if ( v101 == 0xFFFF )
  {
    v101 = -1;
    if ( !v62 || (v101 = *(_WORD *)&v127[2 * G_irand(0, v62) + 131074], v101 == 0xFFFF) )
    {
      if ( (_DWORD)v23 )
        v101 = *(_WORD *)&v127[2 * G_irand(0, v23) + 262146];
    }
  }
  Sys_ProfEndNamedEvent();
  result = v101;
  _R11 = &v136;
  __asm
  {
    vmovaps xmm6, xmmword ptr [r11-10h]
    vmovaps xmm7, xmmword ptr [r11-20h]
    vmovaps xmm8, xmmword ptr [r11-30h]
    vmovaps xmm9, xmmword ptr [r11-40h]
    vmovaps xmm10, xmmword ptr [r11-50h]
    vmovaps xmm11, xmmword ptr [r11-60h]
    vmovaps xmm12, xmmword ptr [r11-70h]
    vmovaps xmm13, xmmword ptr [r11-80h]
  }
  return result;
}

/*
==============
Bot_FinishedSearchingForEnemy
==============
*/
bool Bot_FinishedSearchingForEnemy(const bot_data_t *botData, const gentity_s *enemy)
{
  signed __int64 v4; 
  char *v5; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17375, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !enemy && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17376, ASSERT_TYPE_ASSERT, "( enemy )", (const char *)&queryFormat, "enemy") )
    __debugbreak();
  v4 = 60 * (enemy->sentient - level.sentients);
  v5 = (char *)&botData->scriptedAgentInfo + v4 + 11644;
  if ( (const bot_data_t *)((char *)botData + v4) == (const bot_data_t *)-11652i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17379, ASSERT_TYPE_ASSERT, "( botTgtSentientInfo )", (const char *)&queryFormat, "botTgtSentientInfo") )
    __debugbreak();
  return *((_DWORD *)v5 + 9) >= Bot_GetLastKnownEntPosAndTime(botData, enemy, NULL);
}

/*
==============
Bot_ForceClaimNode
==============
*/
void Bot_ForceClaimNode(bot_info_t *botInfo, pathnode_t *node)
{
  sentient_s *sentient; 
  sentient_s *v5; 
  __int64 v6; 
  int v7; 
  int v8; 
  __int64 v9; 
  team_t eTeam; 
  unsigned int v11; 
  const char *fmt; 
  const char *v13; 
  int v14; 
  int v15; 
  pathnode_t *v16; 
  sentient_s *NodeOwner; 
  __int64 v18; 
  sentient_s *v19; 
  __int64 v20; 
  sentient_s *v21; 
  sentient_s *v22; 
  bot_data_t *EntityData; 
  __int64 v24; 
  __int64 v25; 
  sentient_s *claimer[3]; 

  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23095, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  if ( !botInfo->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23096, ASSERT_TYPE_ASSERT, "( botInfo->sentient )", (const char *)&queryFormat, "botInfo->sentient") )
    __debugbreak();
  sentient = botInfo->sentient;
  if ( sentient->pClaimedNode != node )
  {
    Sentient_SetPrevClaimNode(sentient);
    v5 = botInfo->sentient;
    if ( v5->pClaimedNode )
      Path_RelinquishNodeNow(v5);
    v6 = 0i64;
    v7 = 0;
    v8 = 0;
    v9 = 0i64;
    while ( 1 )
    {
      eTeam = botInfo->sentient->eTeam;
      if ( Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) )
      {
        v11 = 2;
        if ( eTeam <= TEAM_TWO )
          v11 = eTeam - 1;
        if ( v11 < 3 )
          goto LABEL_22;
        LODWORD(v25) = 3;
        fmt = "result doesn't index MAX_NODE_TEAMS_SP\n\t%i not in [0, %i)";
        v13 = "(unsigned)( result ) < (unsigned)( (3) )";
        v14 = 205;
      }
      else
      {
        v11 = 1;
        if ( eTeam <= TEAM_ONE )
          v11 = eTeam - 1;
        if ( v11 < 2 )
          goto LABEL_22;
        LODWORD(v25) = 2;
        fmt = "result doesn't index MAX_NODE_TEAMS_MP\n\t%i not in [0, %i)";
        v13 = "(unsigned)( result ) < (unsigned)( (2) )";
        v14 = 210;
      }
      LODWORD(v24) = v11;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\pathnode.h", v14, ASSERT_TYPE_ASSERT, v13, fmt, v24, v25) )
        __debugbreak();
LABEL_22:
      v15 = v11;
      v16 = node;
      NodeOwner = Path_GetNodeOwner(node, v8, v15);
      v18 = 0i64;
      if ( NodeOwner )
      {
        do
        {
          if ( v18 >= v9 )
            break;
          v19 = NULL;
          if ( claimer[v18] != NodeOwner )
            v19 = NodeOwner;
          ++v18;
          NodeOwner = v19;
        }
        while ( v19 );
        if ( NodeOwner )
        {
          ++v7;
          claimer[v9++] = NodeOwner;
        }
      }
      if ( ++v8 >= 3 )
      {
        if ( v7 > 0i64 )
        {
          v20 = 0i64;
          do
          {
            v21 = claimer[v20];
            if ( v21 )
            {
              if ( v21->pClaimedNode )
                Path_RelinquishNodeNow(claimer[v20]);
              Bot_BadPath(v21->ent);
            }
            ++v20;
          }
          while ( v20 < v7 );
          v16 = node;
        }
        if ( Path_CanClaimNode(v16, botInfo->sentient) )
          Path_ClaimNode(v16, botInfo->sentient);
        if ( v7 > 0i64 )
        {
          do
          {
            v22 = claimer[v6];
            if ( v22 && v22 != botInfo->sentient )
            {
              if ( !v22->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11048, ASSERT_TYPE_ASSERT, "( otherSentient->ent )", (const char *)&queryFormat, "otherSentient->ent") )
                __debugbreak();
              if ( SV_BotIsBotEnt(v22->ent) )
              {
                EntityData = Bot_GetEntityData(v22->ent);
                if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11056, ASSERT_TYPE_ASSERT, "( otherBotData )", (const char *)&queryFormat, "otherBotData") )
                  __debugbreak();
                if ( (EntityData->botInfo.flags & 0x800) != 0 )
                  Bot_Badplace_PathEscape(EntityData);
              }
            }
            ++v6;
          }
          while ( v6 < v7 );
        }
        return;
      }
    }
  }
}

/*
==============
Bot_FreeNavigator
==============
*/
void Bot_FreeNavigator(bot_info_t *botInfo)
{
  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13911, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  Nav_FreeNavigator(botInfo->pNavigator);
  botInfo->pNavigator = NULL;
}

/*
==============
Bot_GetActiveGoal
==============
*/
void Bot_GetActiveGoal(const bot_data_t *botData, vec3_t *goal)
{
  pathnode_t *nearestNode; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23661, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23662, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  goal->v[0] = botData->botInfo.activeGoal.pos.v[0];
  goal->v[1] = botData->botInfo.activeGoal.pos.v[1];
  goal->v[2] = botData->botInfo.activeGoal.pos.v[2];
  nearestNode = botData->botInfo.activeGoal.nearestNode;
  if ( nearestNode )
    pathnode_t::WorldifyPosFromParent(nearestNode, goal);
}

/*
==============
Bot_GetAdjacentIndoorZones
==============
*/

__int64 __fastcall Bot_GetAdjacentIndoorZones(bot_info_t *botInfo, double indoorPercent, unsigned __int8 *indoorZonesMask, int maskSize)
{
  size_t v7; 
  int v10; 
  const pathnode_t *v11; 
  int v12; 
  int i; 
  pathnode_t *v14; 
  unsigned int v15; 
  pathnode_t *pNextOpen; 
  pathnode_t *v17; 
  int v18; 
  char v19; 
  int v20; 
  unsigned int v21; 
  char v22; 
  int v23; 
  __int64 v24; 
  pathnode_t *v25; 
  int v26; 
  __int64 result; 
  __int64 v29; 
  __int64 v30; 

  __asm { vmovaps [rsp+78h+var_38], xmm6 }
  v7 = maskSize;
  __asm { vmovaps xmm6, xmm1 }
  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10725, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  if ( !botInfo->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10726, ASSERT_TYPE_ASSERT, "( botInfo->sentient )", (const char *)&queryFormat, "botInfo->sentient") )
    __debugbreak();
  v10 = Path_ZoneCount();
  v11 = Sentient_NearestNode(botInfo->sentient);
  if ( !v11 || (v12 = Path_NodeZoneFromNode(v11), v12 == 255) )
  {
    result = 0xFFFFFFFFi64;
  }
  else
  {
    for ( i = 0; i < v10; *(_QWORD *)&v14->transient.nodeCost = 0i64 )
    {
      v14 = Path_ConvertZoneIndexToZone(i++);
      *(_QWORD *)&v14->transient.iSearchFrame = 0i64;
      v14->transient.pNextOpen = NULL;
      v14->transient.pPrevOpen = NULL;
      v14->transient.pParent = NULL;
      *(_QWORD *)&v14->transient.fCost = 0i64;
    }
    memset_0(indoorZonesMask, 255, v7);
    v15 = 0;
    pNextOpen = Path_ConvertZoneIndexToZone(v12);
    if ( !pNextOpen && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10756, ASSERT_TYPE_ASSERT, "( nodeCur )", (const char *)&queryFormat, "nodeCur") )
      __debugbreak();
    pNextOpen->transient.linkIndex = 1;
    v17 = pNextOpen;
    do
    {
      v18 = Path_NodeZoneFromNode(pNextOpen);
      *(double *)&_XMM0 = SV_BotZoneGetIndoorPercent(v18);
      __asm { vcomiss xmm0, xmm6 }
      if ( !v19 )
      {
        v20 = v18 % 8;
        v21 = v18 / 8;
        v22 = v20;
        if ( v21 >= (unsigned int)v7 )
        {
          LODWORD(v30) = v7;
          LODWORD(v29) = v21;
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10765, ASSERT_TYPE_ASSERT, "(unsigned)( nodeCurZone / 8 ) < (unsigned)( maskSize )", "nodeCurZone / 8 doesn't index maskSize\n\t%i not in [0, %i)", v29, v30) )
            __debugbreak();
        }
        indoorZonesMask[v21] &= ~(1 << v22);
        ++v15;
      }
      v23 = 0;
      if ( pNextOpen->dynamic.wLinkCount > 0 )
      {
        v24 = 0i64;
        do
        {
          v25 = Path_ConvertIndexToNode(pNextOpen->constant.Links[v24].nodeNum);
          v26 = Path_NodeZoneFromNode(v25);
          if ( !v25->transient.linkIndex )
          {
            *(double *)&_XMM0 = SV_BotZoneGetIndoorPercent(v26);
            __asm { vcomiss xmm0, xmm6 }
            if ( !v19 )
            {
              v25->transient.linkIndex = 1;
              v17->transient.pNextOpen = v25;
              v17 = v25;
            }
          }
          ++v23;
          ++v24;
        }
        while ( v23 < pNextOpen->dynamic.wLinkCount );
      }
      pNextOpen = pNextOpen->transient.pNextOpen;
    }
    while ( pNextOpen );
    result = v15;
  }
  __asm { vmovaps xmm6, [rsp+78h+var_38] }
  return result;
}

/*
==============
Bot_GetBotDifficultyFromMenu
==============
*/
__int64 Bot_GetBotDifficultyFromMenu(const bot_data_t *botData)
{
  const dvar_t *v1; 
  const dvar_t *v2; 
  GameStateInfo *v4; 

  v1 = DVARINT_bot_DebugDifficulty;
  if ( !DVARINT_bot_DebugDifficulty && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DebugDifficulty") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v1);
  if ( v1->current.integer >= 4 )
  {
    v4 = GameStateInfo_Get();
    if ( !v4 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5045, ASSERT_TYPE_ASSERT, "( gInfo )", (const char *)&queryFormat, "gInfo") )
      __debugbreak();
    if ( !BG_BotsUsingTeamDifficulty() && v4->usingBotsDifficulty[0] != v4->usingBotsDifficulty[1] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5049, ASSERT_TYPE_ASSERT, "( BG_BotsUsingTeamDifficulty() || (gInfo->usingBotsDifficulty[0] == gInfo->usingBotsDifficulty[1]) )", (const char *)&queryFormat, "BG_BotsUsingTeamDifficulty() || (gInfo->usingBotsDifficulty[0] == gInfo->usingBotsDifficulty[1])") )
      __debugbreak();
    if ( v4->usingBotsDifficulty[0] >= 5u && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5050, ASSERT_TYPE_ASSERT, "( gInfo->usingBotsDifficulty[0] < BOT_DIFFICULTY_COUNT )", (const char *)&queryFormat, "gInfo->usingBotsDifficulty[0] < BOT_DIFFICULTY_COUNT") )
      __debugbreak();
    return v4->usingBotsDifficulty[0];
  }
  else
  {
    v2 = DVARINT_bot_DebugDifficulty;
    if ( !DVARINT_bot_DebugDifficulty && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DebugDifficulty") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v2);
    return v2->current.unsignedInt;
  }
}

/*
==============
Bot_GetBotInfoFromNetBuffer
==============
*/
bot_info_t *Bot_GetBotInfoFromNetBuffer(const SvClientMP *bot)
{
  if ( bot )
    return (bot_info_t *)&bot->netBuf.reliableCommands.m_entries[0].size;
  if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20424, ASSERT_TYPE_ASSERT, "( bot )", (const char *)&queryFormat, "bot") )
    __debugbreak();
  return (bot_info_t *)1376;
}

/*
==============
Bot_GetBotPersistentMatchData
==============
*/
bot_match_data_t *Bot_GetBotPersistentMatchData(const SvClientMP *bot)
{
  if ( bot )
    return (bot_match_data_t *)&bot->netBuf.reliableCommands.m_buffer[25340];
  if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20527, ASSERT_TYPE_ASSERT, "( bot )", (const char *)&queryFormat, "bot") )
    __debugbreak();
  return (bot_match_data_t *)30808;
}

/*
==============
Bot_GetBotPersonalityFromMenu
==============
*/
__int64 Bot_GetBotPersonalityFromMenu(const bot_data_t *botData)
{
  int flags; 
  int v3; 
  int v4; 
  unsigned int v5; 
  __int64 v7; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5062, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  flags = botData->botMatchData.flags;
  v3 = G_rand();
  v4 = 1;
  if ( (flags & 0x20) != 0 )
    v4 = 3;
  v5 = v3 % v4;
  if ( (unsigned int)(v3 % v4) >= 3 )
  {
    LODWORD(v7) = v3 % v4;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5081, ASSERT_TYPE_ASSERT, "(unsigned)( personalityChosen ) < (unsigned)( BOT_PERSONALITY_DEFAULT )", "personalityChosen doesn't index BOT_PERSONALITY_DEFAULT\n\t%i not in [0, %i)", v7, 3) )
      __debugbreak();
  }
  return v5;
}

/*
==============
Bot_GetCharacterIndex
==============
*/
__int64 Bot_GetCharacterIndex(const bot_data_t *botData)
{
  gentity_s *ent; 
  unsigned int m_clientCount; 
  unsigned int v4; 
  unsigned int v5; 
  __int64 v7; 
  __int64 v8; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1204, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1205, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !G_Utils_IsClientOrAgent(botData->botInfo.ent) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1206, ASSERT_TYPE_ASSERT, "( G_Utils_IsClientOrAgent( botData->botInfo.ent ) )", (const char *)&queryFormat, "G_Utils_IsClientOrAgent( botData->botInfo.ent )") )
    __debugbreak();
  ent = botData->botInfo.ent;
  if ( ent->client )
  {
    if ( ent->s.number >= SvClient::ms_clientCount )
    {
      LODWORD(v7) = ent->s.number;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1210, ASSERT_TYPE_ASSERT, "(unsigned)( botData->botInfo.ent->s.number ) < (unsigned)( SvClient::GetClientCount() )", "botData->botInfo.ent->s.number doesn't index SvClient::GetClientCount()\n\t%i not in [0, %i)", v7, SvClient::ms_clientCount) )
LABEL_30:
        __debugbreak();
    }
  }
  else if ( ent->agent )
  {
    if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 168, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
      __debugbreak();
    if ( (int)ComCharacterLimits::ms_gameData.m_clientCount > botData->botInfo.ent->s.number )
      goto LABEL_43;
    if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 168, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
      __debugbreak();
    m_clientCount = ComCharacterLimits::ms_gameData.m_clientCount;
    if ( botData->botInfo.ent->s.number > (int)(m_clientCount + SvPersistentGlobalsMP::GetPersistentGlobalsMP()->agentCount) )
    {
LABEL_43:
      if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 168, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
        __debugbreak();
      v4 = ComCharacterLimits::ms_gameData.m_clientCount;
      v5 = SvPersistentGlobalsMP::GetPersistentGlobalsMP()->agentCount + v4;
      if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 168, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
        __debugbreak();
      LODWORD(v7) = botData->botInfo.ent->s.number;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1212, ASSERT_TYPE_ASSERT, "( ComCharacterLimits::GetAgentEntityIndexOffset() ) <= ( botData->botInfo.ent->s.number ) && ( botData->botInfo.ent->s.number ) <= ( ComCharacterLimits::GetAgentEntityIndexOffset() + SvPersistentGlobalsMP::GetAgentCount() )", "botData->botInfo.ent->s.number not in [ComCharacterLimits::GetAgentEntityIndexOffset(), ComCharacterLimits::GetAgentEntityIndexOffset() + SvPersistentGlobalsMP::GetAgentCount()]\n\t%i not in [%i, %i]", v7, ComCharacterLimits::ms_gameData.m_clientCount, v5) )
        goto LABEL_30;
    }
  }
  if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
    __debugbreak();
  if ( botData->botInfo.ent->s.number >= ComCharacterLimits::ms_gameData.m_characterCount )
  {
    if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
      __debugbreak();
    LODWORD(v8) = ComCharacterLimits::ms_gameData.m_characterCount;
    LODWORD(v7) = botData->botInfo.ent->s.number;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1215, ASSERT_TYPE_ASSERT, "(unsigned)( botData->botInfo.ent->s.number ) < (unsigned)( ComCharacterLimits::GetCharacterMaxCount() )", "botData->botInfo.ent->s.number doesn't index ComCharacterLimits::GetCharacterMaxCount()\n\t%i not in [0, %i)", v7, v8) )
      __debugbreak();
  }
  return (unsigned int)botData->botInfo.ent->s.number;
}

/*
==============
Bot_GetClientData
==============
*/
client_net_buffers_t *Bot_GetClientData(SvClientMP *bot)
{
  signed __int64 v2; 
  __int64 v4; 
  __int64 v5; 

  if ( !bot && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1139, ASSERT_TYPE_ASSERT, "( bot )", (const char *)&queryFormat, "bot") )
    __debugbreak();
  if ( bot->state != CS_ACTIVE && bot->migrationState != CS_ACTIVE && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1145, ASSERT_TYPE_ASSERT, "( (bot->state == SvClientConnectionState::CS_ACTIVE) || (bot->migrationState == SvClientConnectionState::CS_ACTIVE) )", (const char *)&queryFormat, "(bot->state == SvClientConnectionState::CS_ACTIVE) || (bot->migrationState == SvClientConnectionState::CS_ACTIVE)") )
    __debugbreak();
  if ( !*(_QWORD *)&bot->netBuf.reliableCommands.m_entries[2].size )
  {
    if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
      __debugbreak();
    v2 = ((char *)bot - (char *)SvClient::GetCommonClient(0)) / 379488;
    if ( (unsigned int)v2 >= 0xC8 )
    {
      LODWORD(v4) = v2;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 1072, ASSERT_TYPE_ASSERT, "(unsigned)( index ) < (unsigned)( 200 )", "index doesn't index MAX_CLIENTS_MP\n\t%i not in [0, %i)", v4, 200) )
        __debugbreak();
    }
    LODWORD(v5) = level.time;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1153, ASSERT_TYPE_ASSERT, "(botData->botInfo.sentientInfo != nullptr)", "%s\n\t[BOTS] (%d) botData->botInfo.sentientInfo is NULL for for client %i (%s)", "botData->botInfo.sentientInfo != nullptr", v5, v2, bot->name) )
      __debugbreak();
  }
  if ( *(_DWORD *)&bot->netBuf.reliableCommands.TYPE_NOT_SPECIFIED != -17973521 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1156, ASSERT_TYPE_ASSERT, "( botData->botDataHeader == 0xFEEDBEEF )", (const char *)&queryFormat, "botData->botDataHeader == BOT_DATA_MAGIC_NUMBER") )
    __debugbreak();
  if ( *(_DWORD *)&bot->netBuf.reliableCommands.m_buffer[126948] != -17973521 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1157, ASSERT_TYPE_ASSERT, "( botData->botDataFooter == 0xFEEDBEEF )", (const char *)&queryFormat, "botData->botDataFooter == BOT_DATA_MAGIC_NUMBER") )
    __debugbreak();
  return &bot->netBuf;
}

/*
==============
Bot_GetClosestCharacterList
==============
*/

__int64 __fastcall Bot_GetClosestCharacterList(gentity_s *entity, const vec3_t *originPoint, double maxDist, int onlyAI, int allowScriptedAgents, int excludeSelf, int onlyVisibleClients, const bitarray<224> *teamFlags, gentity_s **results, int limit)
{
  int v16; 
  int v17; 
  __int64 i; 
  __int16 EntityIndex; 
  const SvClientMP *MpClient; 
  int IsClientConnected; 
  bitarray_base<bitarray<224> > *AllTeamFlags; 
  const SvClientMP *v25; 
  int IsAgentScripted; 
  int v27; 
  bool v28; 
  bot_data_t *EntityData; 
  int CanSeeSentientQuick; 
  bool v46; 
  bool j; 
  __int64 result; 
  __int64 v57; 
  __int64 v58; 
  char v61; 
  void *retaddr; 

  _RAX = &retaddr;
  __asm
  {
    vmovaps xmmword ptr [rax-48h], xmm6
    vmovaps xmmword ptr [rax-58h], xmm7
    vxorps  xmm7, xmm7, xmm7
    vcomiss xmm2, xmm7
    vmovaps xmm6, xmm2
  }
  if ( !results && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23839, ASSERT_TYPE_ASSERT, "( results )", (const char *)&queryFormat, "results") )
    __debugbreak();
  if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
    __debugbreak();
  if ( limit > (int)ComCharacterLimits::ms_gameData.m_characterCount )
  {
    if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
      __debugbreak();
    LODWORD(v57) = limit;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23840, ASSERT_TYPE_ASSERT, "( limit ) <= ( ComCharacterLimits::GetCharacterMaxCount() )", "limit <= ComCharacterLimits::GetCharacterMaxCount()\n\t%i, %i", v57, ComCharacterLimits::ms_gameData.m_characterCount) )
      __debugbreak();
  }
  if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
    __debugbreak();
  if ( (int)ComCharacterLimits::ms_gameData.m_characterCount > 248 )
  {
    if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
      __debugbreak();
    LODWORD(v58) = 248;
    LODWORD(v57) = ComCharacterLimits::ms_gameData.m_characterCount;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23841, ASSERT_TYPE_ASSERT, "( ComCharacterLimits::GetCharacterMaxCount() ) <= ( (200 + 48) )", "ComCharacterLimits::GetCharacterMaxCount() <= MAX_CHARACTERS_MP\n\t%i, %i", v57, v58) )
      __debugbreak();
  }
  v16 = 0;
  v17 = 0;
  _RSI = 0i64;
  for ( i = 0i64; ; ++i )
  {
    if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
      __debugbreak();
    if ( v17 >= (int)ComCharacterLimits::ms_gameData.m_characterCount )
      break;
    _RDI = &level.gentities[i];
    if ( !&level.gentities[i] )
      goto LABEL_85;
    EntityIndex = G_GetEntityIndex(&level.gentities[i]);
    if ( !G_IsEntityInUse(EntityIndex) || !_RDI->sentient )
      goto LABEL_85;
    if ( _RDI->client )
    {
      MpClient = SV_Client_GetMpClient(_RDI->s.number);
      IsClientConnected = Bot_IsClientConnected(MpClient);
      goto LABEL_34;
    }
    if ( _RDI->agent )
    {
      IsClientConnected = _RDI->s.eType == ET_AGENT;
LABEL_34:
      if ( !IsClientConnected )
        goto LABEL_85;
    }
    if ( _RDI->s.eType != ET_INVISIBLE )
    {
      AllTeamFlags = (bitarray_base<bitarray<224> > *)Com_TeamsMP_GetAllTeamFlags();
      if ( bitarray_base<bitarray<224>>::testBit(AllTeamFlags, _RDI->sentient->eTeam) )
      {
        if ( !_RDI->client || (v25 = SV_Client_GetMpClient(_RDI->s.number), Bot_IsClientActive(v25)) )
        {
          if ( !_RDI->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23863, ASSERT_TYPE_ASSERT, "( currentEnt->sentient )", (const char *)&queryFormat, "currentEnt->sentient") )
            __debugbreak();
          IsAgentScripted = SV_IsAgentScripted(_RDI);
          v27 = IsAgentScripted;
          if ( (allowScriptedAgents || !IsAgentScripted) && !Bot_EntityIsConsideredDead(_RDI) && bitarray_base<bitarray<224>>::testBit((bitarray_base<bitarray<224> > *)teamFlags, _RDI->sentient->eTeam) && (!onlyAI || SV_BotIsBotEnt(_RDI) || allowScriptedAgents && v27) && (!excludeSelf || !entity || _RDI != entity) )
          {
            v28 = onlyVisibleClients == 0;
            if ( !onlyVisibleClients )
              goto LABEL_60;
            v28 = entity == NULL;
            if ( !entity )
              goto LABEL_60;
            EntityData = Bot_GetEntityData(entity);
            if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23890, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
              __debugbreak();
            if ( SV_BotEntInCurrentFOV(&EntityData->botInfo, _RDI) )
            {
              CanSeeSentientQuick = Bot_CanSeeSentientQuick(EntityData, _RDI->sentient);
              v28 = CanSeeSentientQuick == 0;
              if ( CanSeeSentientQuick )
              {
LABEL_60:
                __asm
                {
                  vcomiss xmm6, xmm7
                  vmovss  xmm0, dword ptr [rdi+130h]
                  vmovss  xmm1, dword ptr [rdi+134h]
                  vsubss  xmm3, xmm0, dword ptr [rax]
                  vmovss  xmm0, dword ptr [rdi+138h]
                  vsubss  xmm2, xmm1, dword ptr [rax+4]
                  vsubss  xmm4, xmm0, dword ptr [rax+8]
                  vmulss  xmm2, xmm2, xmm2
                  vmulss  xmm1, xmm3, xmm3
                  vmulss  xmm0, xmm4, xmm4
                  vaddss  xmm3, xmm2, xmm1
                  vaddss  xmm5, xmm3, xmm0
                }
                if ( v28 )
                  goto LABEL_62;
                __asm
                {
                  vmulss  xmm0, xmm6, xmm6
                  vcomiss xmm5, xmm0
                }
                if ( v28 )
                {
LABEL_62:
                  if ( v16 >= limit )
                  {
                    _RCX = 0i64;
                    _RDX = -1i64;
                    __asm { vmovaps xmm0, xmm7 }
                    v46 = (unsigned __int64)_RSI < 4;
                    if ( _RSI >= 4 )
                    {
                      do
                      {
                        __asm
                        {
                          vmovss  xmm1, [rsp+rcx*4+498h+var_448]
                          vcomiss xmm5, xmm1
                        }
                        if ( v46 )
                        {
                          __asm { vcomiss xmm1, xmm0 }
                          if ( !v46 )
                          {
                            __asm { vmovaps xmm0, xmm1 }
                            _RDX = _RCX;
                          }
                        }
                        __asm
                        {
                          vmovss  xmm1, [rsp+rcx*4+498h+var_444]
                          vcomiss xmm5, xmm1
                        }
                        if ( v46 )
                        {
                          __asm { vcomiss xmm1, xmm0 }
                          if ( !v46 )
                          {
                            __asm { vmovaps xmm0, xmm1 }
                            _RDX = _RCX + 1;
                          }
                        }
                        __asm
                        {
                          vmovss  xmm1, [rsp+rcx*4+498h+var_440]
                          vcomiss xmm5, xmm1
                        }
                        if ( v46 )
                        {
                          __asm { vcomiss xmm1, xmm0 }
                          if ( !v46 )
                          {
                            __asm { vmovaps xmm0, xmm1 }
                            _RDX = _RCX + 2;
                          }
                        }
                        __asm
                        {
                          vmovss  xmm1, [rsp+rcx*4+498h+var_43C]
                          vcomiss xmm5, xmm1
                        }
                        if ( v46 )
                        {
                          __asm { vcomiss xmm1, xmm0 }
                          if ( !v46 )
                          {
                            __asm { vmovaps xmm0, xmm1 }
                            _RDX = _RCX + 3;
                          }
                        }
                        _RCX += 4i64;
                        v46 = _RCX < _RSI - 3;
                      }
                      while ( (__int64)_RCX < _RSI - 3 );
                    }
                    for ( j = _RCX < _RSI; (__int64)_RCX < _RSI; j = _RCX < _RSI )
                    {
                      __asm
                      {
                        vmovss  xmm1, [rsp+rcx*4+498h+var_448]
                        vcomiss xmm5, xmm1
                      }
                      if ( j )
                      {
                        __asm { vcomiss xmm1, xmm0 }
                        if ( !j )
                        {
                          __asm { vmovaps xmm0, xmm1 }
                          _RDX = _RCX;
                        }
                      }
                      ++_RCX;
                    }
                    if ( _RDX >= 0 )
                    {
                      __asm { vmovss  [rsp+rdx*4+498h+var_448], xmm5 }
                      results[_RDX] = _RDI;
                    }
                  }
                  else
                  {
                    ++v16;
                    results[_RSI] = _RDI;
                    __asm { vmovss  [rsp+rsi*4+498h+var_448], xmm5 }
                    ++_RSI;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_85:
    ++v17;
  }
  result = (unsigned int)v16;
  _R11 = &v61;
  __asm
  {
    vmovaps xmm6, xmmword ptr [r11-10h]
    vmovaps xmm7, xmmword ptr [r11-20h]
  }
  return result;
}

/*
==============
Bot_GetClosestCharacterToOrigin
==============
*/
gentity_s *Bot_GetClosestCharacterToOrigin(gentity_s *selfEntity, const vec3_t *origin, int onlyAI, int allowScriptedAgents, const bitarray<224> *teamFlags)
{
  __int64 v6; 
  gentity_s *results; 

  v6 = 0i64;
  __asm { vxorps  xmm2, xmm2, xmm2; maxDist }
  if ( Bot_GetClosestCharacterList(selfEntity, origin, *(const float *)&_XMM2, onlyAI, allowScriptedAgents, 1, 0, teamFlags, &results, 1) == 1 )
    return results;
  return (gentity_s *)v6;
}

/*
==============
Bot_GetClosestNavigablePoint
==============
*/
__int64 Bot_GetClosestNavigablePoint(const vec3_t *point, float maxDist, int traceMask, vec3_t *resultPoint, __int16 groundEnt)
{
  unsigned __int8 v8; 
  nav_space_s *SpaceByEntNum; 
  const tacpoint_t *ClosestPoint; 
  vec3_t outUp; 
  bfx::PathSpec pPathSpec; 

  v8 = 0;
  SpaceByEntNum = Nav_GetSpaceByEntNum(groundEnt);
  if ( SpaceByEntNum )
  {
    __asm { vxorps  xmm0, xmm0, xmm0 }
    *(_QWORD *)&pPathSpec.m_obstacleBlockageFlags = -1i64;
    pPathSpec.m_obstacleMode = BLOCKED_IF_ANY_MATCH;
    __asm
    {
      vmovss  [rsp+0C8h+var_78.m_pathSharingPenalty], xmm0
      vmovss  [rsp+0C8h+var_78.m_maxPathSharingPenalty], xmm0
      vmovss  [rsp+0C8h+var_78.m_maxSearchDist], xmm0
    }
    pPathSpec.m_usePathSharingPenalty = 0;
    *(_QWORD *)&pPathSpec.m_areaPenaltyFlags = -1i64;
    bfx::PenaltyTable::PenaltyTable(&pPathSpec.m_penaltyTable);
    pPathSpec.m_snapMode = SNAP_CLOSEST;
    Nav_GetSpaceUp(SpaceByEntNum, &outUp);
    if ( groundEnt == 2046 )
    {
      ClosestPoint = TacGraph_FindClosestPoint(point);
      if ( ClosestPoint )
        return Nav_GetClosestVerticalPosWithHint(point, &outUp, 0, &SpaceByEntNum->hSpace, &pPathSpec, resultPoint, &ClosestPoint->m_hArea, NULL);
    }
    return Nav_GetClosestVerticalPos(point, &outUp, 0, &SpaceByEntNum->hSpace, &pPathSpec, resultPoint, NULL);
  }
  return v8;
}

/*
==============
Bot_GetCombatCoverNode
==============
*/
pathnode_t *Bot_GetCombatCoverNode(bot_data_t *botData, const pathnode_t *enemyNode)
{
  int v5; 
  __int64 v6; 
  __int64 v7; 
  pathsort_s *p_nodes; 
  unsigned __int16 v9; 
  int nodesPicked; 
  bot_score_parms_s parms; 
  bot_score_item_s objects[512]; 
  pathsort_s nodes; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10303, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !enemyNode && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10304, ASSERT_TYPE_ASSERT, "( enemyNode )", (const char *)&queryFormat, "enemyNode") )
    __debugbreak();
  __asm { vmovss  xmm1, cs:__real@43960000; maxDist }
  v5 = Path_NodesInRadius(&botData->botInfo.ent->r.currentOrigin, *(float *)&_XMM1, &nodes, 512, -510656513);
  v6 = v5;
  if ( v5 > 0 )
  {
    v7 = 0i64;
    p_nodes = &nodes;
    do
    {
      v9 = Path_ConvertNodeToIndex(p_nodes->node);
      ++p_nodes;
      objects[v7++].object = v9;
    }
    while ( v7 < v6 );
  }
  if ( (int)v6 > 0 && (Bot_Score_ScoreNodesInitParms(botData, &parms, BOT_SCORE_NODE_COMBAT), parms.integer1 = Path_ConvertNodeToIndex(enemyNode), parms.integer2 = 300, Bot_Score_ScoreNodesPick(botData, objects, v6, 1, &parms, 1, &nodesPicked) == 1) )
    return Path_ConvertIndexToNode(nodesPicked);
  else
    return 0i64;
}

/*
==============
Bot_GetCurrentNumDebugGoals
==============
*/
__int64 Bot_GetCurrentNumDebugGoals()
{
  const dvar_t *v0; 

  v0 = DVARINT_bot_DebugPathGoal;
  if ( !DVARINT_bot_DebugPathGoal && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DebugPathGoal") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v0);
  return v0->current.unsignedInt;
}

/*
==============
Bot_GetDeltaAngleToTraversal
==============
*/
float Bot_GetDeltaAngleToTraversal(const bot_data_t *botData)
{
  pathnode_t *v6; 
  pathnode_t *v7; 
  __int64 v37; 
  __int64 v38; 
  __int64 v39; 
  vec3_t pos; 
  vec3_t v41; 
  char v42; 
  void *retaddr; 

  _RAX = &retaddr;
  __asm
  {
    vmovaps xmmword ptr [rax-18h], xmm6
    vmovaps xmmword ptr [rax-28h], xmm9
  }
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15805, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15806, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  v6 = NULL;
  if ( Path_NodeValid(botData->botInfo.nodeNegotStart) )
    v7 = Path_ConvertIndexToNode(botData->botInfo.nodeNegotStart);
  else
    v7 = NULL;
  if ( Path_NodeValid(botData->botInfo.nodeNegotEnd) )
    v6 = Path_ConvertIndexToNode(botData->botInfo.nodeNegotEnd);
  if ( !v7 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15812, ASSERT_TYPE_ASSERT, "(negotiationStartNode)", "%s\n\tNo traversal start node.  botInfo->traversal = %i, botInfo->nodeNegotStart = %i, botInfo->traverseJumpTime = %i", "negotiationStartNode", botData->botInfo.traversal, botData->botInfo.nodeNegotStart, botData->botInfo.traverseJumpTime) )
    __debugbreak();
  if ( !v6 )
  {
    LODWORD(v39) = botData->botInfo.traverseJumpTime;
    LODWORD(v38) = botData->botInfo.nodeNegotEnd;
    LODWORD(v37) = botData->botInfo.traversal;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15812, ASSERT_TYPE_ASSERT, "(negotiationEndNode)", "%s\n\tNo traversal end node.  botInfo->traversal = %i, botInfo->nodeNegotEnd = %i, botInfo->traverseJumpTime = %i", "negotiationEndNode", v37, v38, v39) )
      __debugbreak();
  }
  pathnode_t::GetPos(v7, &pos);
  pathnode_t::GetPos(v6, &v41);
  *(float *)&_XMM0 = Bot_GetNodeTraversalYaw(v7, v6, 1);
  __asm
  {
    vmulss  xmm3, xmm0, cs:__real@3b360b61
    vmovss  xmm5, cs:__real@43b40000
  }
  _RAX = botData->botInfo.ent;
  __asm
  {
    vxorps  xmm0, xmm0, xmm0
    vxorps  xmm9, xmm9, xmm9
    vmovss  xmm1, dword ptr [rax+140h]
    vmulss  xmm6, xmm1, cs:__real@3b360b61
    vaddss  xmm1, xmm3, cs:__real@3f000000
    vmovss  xmm1, xmm0, xmm1
    vroundss xmm2, xmm9, xmm1, 1
    vaddss  xmm1, xmm6, cs:__real@3f000000
    vsubss  xmm0, xmm3, xmm2
    vmulss  xmm4, xmm0, xmm5
    vroundss xmm2, xmm9, xmm1, 1
    vsubss  xmm0, xmm6, xmm2
    vmulss  xmm1, xmm0, xmm5
    vxorps  xmm0, xmm0, xmm0
    vsubss  xmm2, xmm4, xmm1
    vmulss  xmm4, xmm2, cs:__real@3b360b61
    vaddss  xmm3, xmm4, cs:__real@3f000000
    vmovss  xmm1, xmm0, xmm3
    vroundss xmm2, xmm9, xmm1, 1
    vsubss  xmm0, xmm4, xmm2
    vmulss  xmm0, xmm0, xmm5
    vandps  xmm0, xmm0, cs:__xmm@7fffffff7fffffff7fffffff7fffffff
  }
  _R11 = &v42;
  __asm
  {
    vmovaps xmm6, xmmword ptr [r11-10h]
    vmovaps xmm9, xmmword ptr [r11-20h]
  }
  return *(float *)&_XMM0;
}

/*
==============
Bot_GetDifficulty
==============
*/
__int64 Bot_GetDifficulty(const bot_data_t *botData)
{
  if ( botData )
    return (unsigned int)botData->botMatchData.difficulty;
  if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20793, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  return MEMORY[0x7300];
}

/*
==============
Bot_GetDifficultyName
==============
*/
const char *Bot_GetDifficultyName(bot_difficulty_t difficulty)
{
  __int64 v1; 
  int v4; 

  v1 = difficulty;
  if ( (unsigned int)difficulty >= BOT_DIFFICULTY_COUNT )
  {
    v4 = 5;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20806, ASSERT_TYPE_ASSERT, "(unsigned)( difficulty ) < (unsigned)( BOT_DIFFICULTY_COUNT )", "difficulty doesn't index BOT_DIFFICULTY_COUNT\n\t%i not in [0, %i)", difficulty, v4) )
      __debugbreak();
  }
  return BOT_STR_TBL_DIFFICULTY[v1];
}

/*
==============
Bot_GetDifficultySetting
==============
*/
float Bot_GetDifficultySetting(bot_data_t *botData, const char *settingName, int *succeeded)
{
  bot_match_data_setting_t *matched; 
  bot_match_data_setting_t *v8; 

  _RDI = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4951, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !settingName && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4952, ASSERT_TYPE_ASSERT, "( settingName )", (const char *)&queryFormat, "settingName") )
    __debugbreak();
  matched = Bot_MatchDataSetting(settingName);
  v8 = matched;
  if ( !matched )
  {
    if ( succeeded )
      *succeeded = 0;
    goto LABEL_16;
  }
  if ( succeeded )
    *succeeded = 1;
  _RAX = matched->offset;
  if ( (_DWORD)_RAX != 3212 )
  {
    __asm { vmovss  xmm0, dword ptr [rax+rdi+7300h] }
    return *(float *)&_XMM0;
  }
  if ( (_RDI->botMatchData.flags & v8->flag) == 0 )
  {
LABEL_16:
    __asm { vxorps  xmm0, xmm0, xmm0 }
    return *(float *)&_XMM0;
  }
  __asm { vmovss  xmm0, cs:__real@3f800000 }
  return *(float *)&_XMM0;
}

/*
==============
Bot_GetEnemyAimPoints
==============
*/
void Bot_GetEnemyAimPoints(const bot_data_t *botData, const gentity_s *enemyEnt, vec3_t *aimPoint, vec3_t *eyePoint)
{
  const gentity_s *v9; 
  const gentity_s *ent; 
  char v12; 

  __asm { vmovaps [rsp+58h+var_28], xmm6 }
  _RDI = eyePoint;
  _R14 = aimPoint;
  _RBX = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8530, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !_RBX->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8531, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !enemyEnt && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8532, ASSERT_TYPE_ASSERT, "( enemyEnt )", (const char *)&queryFormat, "enemyEnt") )
    __debugbreak();
  if ( !enemyEnt->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8533, ASSERT_TYPE_ASSERT, "( enemyEnt->sentient )", (const char *)&queryFormat, "enemyEnt->sentient") )
    __debugbreak();
  if ( EntHandle::isDefined(&_RBX->botInfo.sentient->targetEnt) )
    v9 = EntHandle::ent(&_RBX->botInfo.sentient->targetEnt);
  else
    v9 = NULL;
  if ( enemyEnt != v9 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8534, ASSERT_TYPE_ASSERT, "( enemyEnt == Bot_GetEnemy( botData ) )", (const char *)&queryFormat, "enemyEnt == Bot_GetEnemy( botData )") )
    __debugbreak();
  _RSI = _RBX->botInfo.playerState;
  if ( !_RSI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8537, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  ent = _RBX->botInfo.ent;
  *(_QWORD *)_RDI->v = 0i64;
  _RDI->v[2] = 0.0;
  Bot_PredictPosition(ent, _RBX, &ent->r.currentOrigin, _RDI);
  __asm
  {
    vxorps  xmm6, xmm6, xmm6
    vucomiss xmm6, dword ptr [rdi]
  }
  if ( v12 )
  {
    __asm { vucomiss xmm6, dword ptr [rdi+4] }
    if ( v12 )
    {
      __asm { vucomiss xmm6, dword ptr [rdi+8] }
      if ( v12 )
      {
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8554, ASSERT_TYPE_ASSERT, "( Vec3NotZero( eyePoint ) )", (const char *)&queryFormat, "Vec3NotZero( eyePoint )") )
          __debugbreak();
      }
    }
  }
  __asm
  {
    vmovss  xmm0, dword ptr [rsi+1E8h]
    vaddss  xmm1, xmm0, dword ptr [rdi+8]
    vmovss  dword ptr [rdi+8], xmm1
  }
  if ( _R14 )
  {
    __asm { vucomiss xmm6, dword ptr [rbx+234Ch] }
    _R14->v[0] = _RBX->botInfo.enemyTrack.predictOrigin.v[0];
    _R14->v[1] = _RBX->botInfo.enemyTrack.predictOrigin.v[1];
    _R14->v[2] = _RBX->botInfo.enemyTrack.predictOrigin.v[2];
    Bot_AdjustEnemyAimPoint(_RBX, enemyEnt, _R14);
    __asm
    {
      vmovss  xmm0, dword ptr [rbx+2358h]
      vaddss  xmm1, xmm0, dword ptr [r14]
      vmovss  dword ptr [r14], xmm1
      vmovss  xmm2, dword ptr [rbx+235Ch]
      vaddss  xmm0, xmm2, dword ptr [r14+4]
      vmovss  dword ptr [r14+4], xmm0
      vmovss  xmm1, dword ptr [rbx+2360h]
      vaddss  xmm2, xmm1, dword ptr [r14+8]
      vmovss  dword ptr [r14+8], xmm2
    }
  }
  __asm { vmovaps xmm6, [rsp+58h+var_28] }
}

/*
==============
Bot_GetEntityData
==============
*/
bot_data_t *Bot_GetEntityData(const gentity_s *entity)
{
  unsigned int number; 
  SvClientMP *CommonClient; 
  bot_data_t *ClientData; 
  bot_data_t *v5; 
  __int64 v7; 

  if ( !entity && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1169, ASSERT_TYPE_ASSERT, "( entity )", (const char *)&queryFormat, "entity") )
    __debugbreak();
  if ( SV_BotIsBotEntClient(entity) )
  {
    if ( entity->s.number >= SvClient::ms_clientCount )
    {
      LODWORD(v7) = entity->s.number;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1175, ASSERT_TYPE_ASSERT, "(unsigned)( entity->s.number ) < (unsigned)( SvClient::GetClientCount() )", "entity->s.number doesn't index SvClient::GetClientCount()\n\t%i not in [0, %i)", v7, SvClient::ms_clientCount) )
        __debugbreak();
    }
    number = entity->s.number;
    if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
      __debugbreak();
    CommonClient = (SvClientMP *)SvClient::GetCommonClient(number);
    ClientData = Bot_GetClientData(CommonClient);
  }
  else
  {
    if ( !entity->agent )
      return 0i64;
    ClientData = Agent_GetBotDataForEnt(entity);
  }
  v5 = ClientData;
  if ( ClientData )
  {
    if ( ClientData->botDataHeader != -17973521 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1190, ASSERT_TYPE_ASSERT, "( botData->botDataHeader == 0xFEEDBEEF )", (const char *)&queryFormat, "botData->botDataHeader == BOT_DATA_MAGIC_NUMBER") )
      __debugbreak();
    if ( v5->botDataFooter != -17973521 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1191, ASSERT_TYPE_ASSERT, "( botData->botDataFooter == 0xFEEDBEEF )", (const char *)&queryFormat, "botData->botDataFooter == BOT_DATA_MAGIC_NUMBER") )
      __debugbreak();
  }
  return v5;
}

/*
==============
Bot_GetGoalType
==============
*/
__int64 Bot_GetGoalType(const char *goalTypeName)
{
  const char *v1; 
  unsigned int v2; 
  __int64 v4; 
  __int64 v5; 
  const char *v6; 
  signed __int64 v7; 
  int v8; 
  __int64 v9; 
  int v10; 
  int v11; 
  int v12; 

  v1 = BOT_STR_TBL_GOAL_TYPE[0];
  v2 = 0;
  if ( BOT_STR_TBL_GOAL_TYPE[0] )
  {
    v4 = 0i64;
    do
    {
      if ( !*v1 )
        break;
      v5 = 0x7FFFFFFFi64;
      v6 = goalTypeName;
      if ( !v1 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 212, ASSERT_TYPE_SANITY, "( s0 )", (const char *)&queryFormat, "s0") )
        __debugbreak();
      if ( !goalTypeName && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 213, ASSERT_TYPE_SANITY, "( s1 )", (const char *)&queryFormat, "s1") )
        __debugbreak();
      v7 = v1 - goalTypeName;
      while ( 1 )
      {
        v8 = (unsigned __int8)v6[v7];
        v9 = v5;
        v10 = *(unsigned __int8 *)v6++;
        --v5;
        if ( !v9 )
          return v2;
        if ( v8 != v10 )
        {
          v11 = v8 + 32;
          if ( (unsigned int)(v8 - 65) > 0x19 )
            v11 = v8;
          v8 = v11;
          v12 = v10 + 32;
          if ( (unsigned int)(v10 - 65) > 0x19 )
            v12 = v10;
          if ( v8 != v12 )
            break;
        }
        if ( !v8 )
          return v2;
      }
      v1 = BOT_STR_TBL_GOAL_TYPE[++v4];
      ++v2;
    }
    while ( v1 );
  }
  return 0i64;
}

/*
==============
Bot_GetGroundEnt
==============
*/
__int16 Bot_GetGroundEnt(const playerState_s *ps)
{
  int MoverThenGroundEnt; 

  MoverThenGroundEnt = BGMovingPlatformPS::GetMoverThenGroundEnt(&ps->movingPlatforms, ps);
  return truncate_cast<short,int>(MoverThenGroundEnt);
}

/*
==============
Bot_GetHidingFromEntity
==============
*/
gentity_s *Bot_GetHidingFromEntity(const bot_data_t *botData)
{
  gentity_s *GEntity; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14777, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( level.time > botData->botInfo.hideFromTime || !G_IsEntityInUse(botData->botInfo.hideFromEntNum) )
    return 0i64;
  GEntity = G_GetGEntity(botData->botInfo.hideFromEntNum);
  if ( !GEntity && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14788, ASSERT_TYPE_ASSERT, "( entity )", (const char *)&queryFormat, "entity") )
    __debugbreak();
  if ( GEntity->s.eType == ET_MISSILE || GEntity->sentient && !Bot_EntityIsConsideredDead(GEntity) )
    return GEntity;
  else
    return 0i64;
}

/*
==============
Bot_GetInaccuracy
==============
*/
float Bot_GetInaccuracy(const bot_data_t *botData)
{
  const Weapon *ViewmodelWeapon; 

  __asm { vmovaps [rsp+48h+var_18], xmm6 }
  _RBX = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16538, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !_RBX->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16539, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState )", (const char *)&queryFormat, "botData->botInfo.playerState") )
    __debugbreak();
  ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(_RBX->botInfo.playerState);
  __asm { vmovss  xmm6, dword ptr [rbx+23D0h] }
  if ( Bot_Weap_IsWeapClass(_RBX->botInfo.playerState, ViewmodelWeapon, WEAPCLASS_SNIPER) )
  {
    __asm
    {
      vmulss  xmm0, xmm6, dword ptr [rbx+7F98h]
      vmovaps xmm6, [rsp+48h+var_18]
    }
  }
  else
  {
    __asm
    {
      vmovaps xmm0, xmm6
      vmovaps xmm6, [rsp+48h+var_18]
    }
  }
  return *(float *)&_XMM0;
}

/*
==============
Bot_GetLastKnownEntFacingDir
==============
*/
__int64 Bot_GetLastKnownEntFacingDir(const bot_data_t *botData, const gentity_s *entity, vec3_t *facingDir)
{
  sentient_s *sentient; 
  bot_sentient_info_t *v9; 
  vec3_t angles; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9453, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9454, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9455, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
    __debugbreak();
  if ( !entity && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9456, ASSERT_TYPE_ASSERT, "( entity )", (const char *)&queryFormat, "entity") )
    __debugbreak();
  sentient = entity->sentient;
  if ( !sentient )
    return 0i64;
  v9 = &botData->botInfo.botSentientInfo[sentient - level.sentients];
  if ( !v9 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9461, ASSERT_TYPE_ASSERT, "( botSentInfo )", (const char *)&queryFormat, "botSentInfo") )
    __debugbreak();
  if ( !v9->lastKnownFacingTime || !Bot_IsStationaryEnt(entity) && level.time - v9->lastKnownFacingTime >= 30000 )
    return 0i64;
  __asm
  {
    vxorps  xmm1, xmm1, xmm1
    vxorps  xmm0, xmm0, xmm0
    vcvtsi2ss xmm0, xmm0, eax
    vmovss  dword ptr [rsp+68h+angles+4], xmm0
    vmovss  dword ptr [rsp+68h+angles], xmm1
    vmovss  dword ptr [rsp+68h+angles+8], xmm1
  }
  AngleVectors(&angles, facingDir, NULL, NULL);
  return 1i64;
}

/*
==============
Bot_GetLastKnownEntNearestNode
==============
*/
pathnode_t *Bot_GetLastKnownEntNearestNode(const bot_data_t *botData, const gentity_s *entity)
{
  sentient_s *sentient; 
  sentient_info_t *SentientInfo; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9405, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9406, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !botData->botInfo.ent->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9407, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent->sentient )", (const char *)&queryFormat, "botData->botInfo.ent->sentient") )
    __debugbreak();
  if ( !entity && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9408, ASSERT_TYPE_ASSERT, "( entity )", (const char *)&queryFormat, "entity") )
    __debugbreak();
  sentient = entity->sentient;
  if ( !sentient )
    return Path_NearestNode(&entity->r.currentOrigin, entity->clipmask, NULL);
  SentientInfo = Sentient_GetSentientInfo(botData->botInfo.ent->sentient, sentient);
  if ( !SentientInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9413, ASSERT_TYPE_ASSERT, "( sentInfo )", (const char *)&queryFormat, "sentInfo") )
    __debugbreak();
  return SentientInfo->pLastKnownNode;
}

/*
==============
Bot_GetLastKnownEntNearestTacPoint
==============
*/
tacpoint_t *Bot_GetLastKnownEntNearestTacPoint(const bot_data_t *botData, const gentity_s *entity)
{
  sentient_s *sentient; 
  sentient_info_t *SentientInfo; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9429, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9430, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !botData->botInfo.ent->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9431, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent->sentient )", (const char *)&queryFormat, "botData->botInfo.ent->sentient") )
    __debugbreak();
  if ( !entity && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9432, ASSERT_TYPE_ASSERT, "( entity )", (const char *)&queryFormat, "entity") )
    __debugbreak();
  sentient = entity->sentient;
  if ( !sentient )
    return (tacpoint_t *)TacGraph_FindClosestPoint(&entity->r.currentOrigin);
  SentientInfo = Sentient_GetSentientInfo(botData->botInfo.ent->sentient, sentient);
  if ( !SentientInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9437, ASSERT_TYPE_ASSERT, "( sentInfo )", (const char *)&queryFormat, "sentInfo") )
    __debugbreak();
  return tacpoint_ref_t::GetPoint(&SentientInfo->lastKnownTacPoint);
}

/*
==============
Bot_GetLastKnownEntPosAndTime
==============
*/
__int64 Bot_GetLastKnownEntPosAndTime(const bot_data_t *botData, const gentity_s *entity, vec3_t *targetPos)
{
  sentient_s *sentient; 
  sentient_info_t *SentientInfo; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9375, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9376, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9377, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
    __debugbreak();
  if ( !entity && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9378, ASSERT_TYPE_ASSERT, "( entity )", (const char *)&queryFormat, "entity") )
    __debugbreak();
  sentient = entity->sentient;
  if ( sentient )
  {
    SentientInfo = Sentient_GetSentientInfo(botData->botInfo.sentient, sentient);
    if ( !SentientInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9385, ASSERT_TYPE_ASSERT, "( sentInfo )", (const char *)&queryFormat, "sentInfo") )
      __debugbreak();
    if ( targetPos )
      SentientInfo_GetLastKnownPos(SentientInfo, targetPos);
    return (unsigned int)SentientInfo->lastKnownPosTime;
  }
  else
  {
    if ( targetPos )
    {
      targetPos->v[0] = entity->r.currentOrigin.v[0];
      targetPos->v[1] = entity->r.currentOrigin.v[1];
      targetPos->v[2] = entity->r.currentOrigin.v[2];
    }
    return (unsigned int)level.time;
  }
}

/*
==============
Bot_GetLookAheadDir
==============
*/
void Bot_GetLookAheadDir(const bot_info_t *botInfo, vec3_t *lookaheadDirOut)
{
  Nav_GetLookaheadDir(botInfo->pNavigator, lookaheadDirOut);
}

/*
==============
Bot_GetLookAheadDist
==============
*/
double Bot_GetLookAheadDist(const bot_info_t *botInfo)
{
  if ( !botInfo )
  {
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13735, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
      __debugbreak();
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13725, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
      __debugbreak();
  }
  if ( Bot_NavPathExists(botInfo) )
    return Nav_GetDistToNextCorner(botInfo->pNavigator);
  __asm { vxorps  xmm0, xmm0, xmm0 }
  return *(double *)&_XMM0;
}

/*
==============
Bot_GetLookType
==============
*/
__int64 Bot_GetLookType(const char *strName)
{
  const char *v1; 
  unsigned int v2; 
  __int64 v4; 
  __int64 v5; 
  const char *v6; 
  signed __int64 v7; 
  int v8; 
  __int64 v9; 
  int v10; 
  int v11; 
  int v12; 

  v1 = BOT_STR_TBL_LOOK_TYPE[0];
  v2 = 0;
  if ( BOT_STR_TBL_LOOK_TYPE[0] )
  {
    v4 = 0i64;
    do
    {
      if ( !*v1 )
        break;
      v5 = 0x7FFFFFFFi64;
      v6 = strName;
      if ( !v1 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 212, ASSERT_TYPE_SANITY, "( s0 )", (const char *)&queryFormat, "s0") )
        __debugbreak();
      if ( !strName && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 213, ASSERT_TYPE_SANITY, "( s1 )", (const char *)&queryFormat, "s1") )
        __debugbreak();
      v7 = v1 - strName;
      while ( 1 )
      {
        v8 = (unsigned __int8)v6[v7];
        v9 = v5;
        v10 = *(unsigned __int8 *)v6++;
        --v5;
        if ( !v9 )
          return v2;
        if ( v8 != v10 )
        {
          v11 = v8 + 32;
          if ( (unsigned int)(v8 - 65) > 0x19 )
            v11 = v8;
          v8 = v11;
          v12 = v10 + 32;
          if ( (unsigned int)(v10 - 65) > 0x19 )
            v12 = v10;
          if ( v8 != v12 )
            break;
        }
        if ( !v8 )
          return v2;
      }
      v1 = BOT_STR_TBL_LOOK_TYPE[++v4];
      ++v2;
    }
    while ( v1 );
  }
  return 7i64;
}

/*
==============
Bot_GetMaxFov
==============
*/
float Bot_GetMaxFov(const bot_data_t *botData)
{
  const Weapon *ViewmodelWeapon; 
  GWeaponMap *Instance; 
  const dvar_t *v33; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20436, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  _RBX = botData->botInfo.playerState;
  if ( !_RBX && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20439, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  if ( Bot_IsControllingRemoteMissile(botData) )
  {
    _RBX = DVARFLT_missileRemoteFOV;
    if ( !DVARFLT_missileRemoteFOV && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 720, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "missileRemoteFOV") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(_RBX);
    __asm
    {
      vmovss  xmm3, dword ptr [rbx+28h]
      vmovss  xmm1, cs:__real@42820000
      vxorps  xmm0, xmm0, xmm0
      vcmpless xmm2, xmm3, xmm0
      vblendvps xmm0, xmm3, xmm1, xmm2
    }
  }
  else
  {
    __asm { vmovaps [rsp+78h+var_18], xmm6 }
    if ( Bot_IsFirstPersonRemoteVehicle(botData) )
    {
      _RAX = Bot_GetRemoteEyesVehicleDef(botData);
      if ( _RAX->turretWeapon )
      {
        __asm
        {
          vmovss  xmm3, dword ptr [rbx+730h]
          vmovss  xmm0, cs:__real@3f800000
          vsubss  xmm1, xmm0, xmm3
          vmulss  xmm0, xmm3, dword ptr [rax+0DBCh]
          vmulss  xmm2, xmm1, dword ptr [rax+0DB8h]
          vaddss  xmm6, xmm2, xmm0
          vmovaps xmm0, xmm6
        }
      }
      else
      {
        __asm
        {
          vmovss  xmm6, dword ptr [rax+0BE4h]
          vxorps  xmm0, xmm0, xmm0
          vucomiss xmm0, dword ptr [rbx+730h]
          vmovaps xmm0, xmm6
        }
      }
    }
    else
    {
      __asm
      {
        vmovaps [rsp+78h+var_38], xmm8
        vmovss  xmm8, cs:__real@3f800000
      }
      if ( _RBX->pm_type == 6 )
      {
        __asm { vmovss  xmm6, cs:__real@42b40000 }
      }
      else
      {
        __asm { vmovss  xmm6, cs:__real@42820000 }
        if ( Bot_Weap_IsDoingADS(botData) )
        {
          __asm { vmovaps [rsp+78h+var_28], xmm7 }
          ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(_RBX);
          *(double *)&_XMM0 = Bot_Weap_GetWeaponFOV(_RBX, ViewmodelWeapon);
          __asm { vminss  xmm7, xmm0, xmm6 }
          if ( Bot_Weap_IsWeapClass(_RBX, ViewmodelWeapon, WEAPCLASS_SNIPER) && Bot_Weap_HasOverlay(_RBX, ViewmodelWeapon) )
            __asm { vmulss  xmm7, xmm7, cs:__real@3f000000 }
          __asm
          {
            vmovss  xmm0, dword ptr [rbx+730h]
            vmulss  xmm2, xmm0, xmm7
            vmovaps xmm7, [rsp+78h+var_28]
            vsubss  xmm0, xmm8, xmm0
            vmulss  xmm1, xmm0, xmm6
            vaddss  xmm6, xmm2, xmm1
          }
        }
      }
      Instance = GWeaponMap::GetInstance();
      if ( BG_IsThirdPersonMode(Instance, _RBX) )
      {
        v33 = DCONST_DVARMPSPFLT_camera_thirdPersonFovScale;
        if ( !DCONST_DVARMPSPFLT_camera_thirdPersonFovScale && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 720, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "camera_thirdPersonFovScale") )
          __debugbreak();
        Dvar_CheckFrontendServerThread(v33);
        __asm { vmulss  xmm6, xmm6, dword ptr [rbx+28h] }
      }
      __asm { vmulss  xmm0, xmm6, cs:__real@3c0efa35; X }
      *(float *)&_XMM0 = tanf_0(*(float *)&_XMM0);
      __asm { vmulss  xmm0, xmm0, cs:__real@3fa0d97c; X }
      *(float *)&_XMM0 = atanf_0(*(float *)&_XMM0);
      __asm
      {
        vmulss  xmm0, xmm0, cs:__real@42e52ee0; val
        vmovss  xmm2, cs:__real@432a0000; max
        vmovaps xmm1, xmm8; min
      }
      *(double *)&_XMM0 = I_fclamp(*(float *)&_XMM0, *(float *)&_XMM1, *(float *)&_XMM2);
      __asm { vmovaps xmm8, [rsp+78h+var_38] }
    }
    __asm { vmovaps xmm6, [rsp+78h+var_18] }
  }
  return *(float *)&_XMM0;
}

/*
==============
Bot_GetMaxFovDot
==============
*/
double Bot_GetMaxFovDot(const bot_data_t *botData)
{
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20516, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  *(double *)&_XMM0 = Bot_GetMaxFov(botData);
  __asm
  {
    vmulss  xmm1, xmm0, cs:__real@3c8efa35
    vmulss  xmm0, xmm1, cs:__real@3f000000; X
  }
  *(float *)&_XMM0 = cosf_0(*(float *)&_XMM0);
  return *(double *)&_XMM0;
}

/*
==============
Bot_GetMemEventType
==============
*/
__int64 Bot_GetMemEventType(const char *memEventTypeName)
{
  const char *v1; 
  unsigned int v2; 
  __int64 v4; 
  __int64 v5; 
  const char *v6; 
  signed __int64 v7; 
  int v8; 
  __int64 v9; 
  int v10; 
  int v11; 
  int v12; 

  v1 = BOT_STR_TBL_MEM_EVENT[0];
  v2 = 0;
  if ( BOT_STR_TBL_MEM_EVENT[0] )
  {
    v4 = 0i64;
    do
    {
      if ( !*v1 )
        break;
      v5 = 0x7FFFFFFFi64;
      v6 = memEventTypeName;
      if ( !v1 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 212, ASSERT_TYPE_SANITY, "( s0 )", (const char *)&queryFormat, "s0") )
        __debugbreak();
      if ( !memEventTypeName && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 213, ASSERT_TYPE_SANITY, "( s1 )", (const char *)&queryFormat, "s1") )
        __debugbreak();
      v7 = v1 - memEventTypeName;
      while ( 1 )
      {
        v8 = (unsigned __int8)v6[v7];
        v9 = v5;
        v10 = *(unsigned __int8 *)v6++;
        --v5;
        if ( !v9 )
          return v2;
        if ( v8 != v10 )
        {
          v11 = v8 + 32;
          if ( (unsigned int)(v8 - 65) > 0x19 )
            v11 = v8;
          v8 = v11;
          v12 = v10 + 32;
          if ( (unsigned int)(v10 - 65) > 0x19 )
            v12 = v10;
          if ( v8 != v12 )
            break;
        }
        if ( !v8 )
          return v2;
      }
      v1 = BOT_STR_TBL_MEM_EVENT[++v4];
      ++v2;
    }
    while ( v1 );
  }
  return 5i64;
}

/*
==============
Bot_GetMemFlag
==============
*/
__int64 Bot_GetMemFlag(const char *strFlag)
{
  const char *v1; 
  char v2; 
  __int64 v4; 
  __int64 v5; 
  const char *v6; 
  signed __int64 v7; 
  int v8; 
  __int64 v9; 
  int v10; 
  int v11; 
  int v12; 

  v1 = BOT_STR_TBL_MEM_FLAG[0];
  v2 = 0;
  if ( BOT_STR_TBL_MEM_FLAG[0] )
  {
    v4 = 0i64;
    do
    {
      if ( !*v1 )
        break;
      v5 = 0x7FFFFFFFi64;
      v6 = strFlag;
      if ( !v1 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 212, ASSERT_TYPE_SANITY, "( s0 )", (const char *)&queryFormat, "s0") )
        __debugbreak();
      if ( !strFlag && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 213, ASSERT_TYPE_SANITY, "( s1 )", (const char *)&queryFormat, "s1") )
        __debugbreak();
      v7 = v1 - strFlag;
      while ( 1 )
      {
        v8 = (unsigned __int8)v6[v7];
        v9 = v5;
        v10 = *(unsigned __int8 *)v6++;
        --v5;
        if ( !v9 )
          return (unsigned int)(1 << v2);
        if ( v8 != v10 )
        {
          v11 = v8 + 32;
          if ( (unsigned int)(v8 - 65) > 0x19 )
            v11 = v8;
          v8 = v11;
          v12 = v10 + 32;
          if ( (unsigned int)(v10 - 65) > 0x19 )
            v12 = v10;
          if ( v8 != v12 )
            break;
        }
        if ( !v8 )
          return (unsigned int)(1 << v2);
      }
      ++v4;
      ++v2;
      v1 = BOT_STR_TBL_MEM_FLAG[v4];
    }
    while ( v1 );
  }
  return 0i64;
}

/*
==============
Bot_GetMinJammerDist
==============
*/
float Bot_GetMinJammerDist(const bot_info_t *botInfo)
{
  unsigned int v8; 
  __int16 *v9; 
  __int16 v10; 
  gentity_s *GEntity; 
  gentity_s *v12; 
  gclient_s *client; 
  GameModeFlagContainer<enum EntityStateFlagsCommon,enum EntityStateFlagsSP,enum EntityStateFlagsMP,32> *p_eFlags; 
  __int16 number; 
  sentient_s *sentient; 
  int IsAlliedSentient; 
  bool v18; 
  __int64 v39; 
  __int64 v40; 
  char v44; 

  __asm
  {
    vmovaps [rsp+98h+var_38], xmm6
    vmovaps [rsp+98h+var_48], xmm7
    vmovaps [rsp+98h+var_58], xmm8
  }
  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6175, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  __asm
  {
    vmovss  xmm8, cs:__real@3a83126f
    vxorps  xmm7, xmm7, xmm7
    vxorps  xmm6, xmm6, xmm6
  }
  v8 = 0;
  v9 = s_botEntAffecters;
  do
  {
    v10 = *v9;
    if ( *v9 != 2047 )
    {
      if ( (unsigned __int16)v10 >= 0x800u )
      {
        LODWORD(v40) = 2048;
        LODWORD(v39) = v10;
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6114, ASSERT_TYPE_ASSERT, "(unsigned)( affecterEntNum ) < (unsigned)( ( 2048 ) )", "affecterEntNum doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v39, v40) )
          __debugbreak();
      }
      if ( G_IsEntityInUse(v10) )
      {
        GEntity = G_GetGEntity(v10);
        v12 = GEntity;
        if ( GEntity )
        {
          client = GEntity->client;
          p_eFlags = &client->ps.eFlags;
          if ( !client )
            p_eFlags = &GEntity->s.lerp.eFlags;
          if ( GameModeFlagValues::ms_mpValue != ACTIVE && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_gamemode_flags.h", 190, ASSERT_TYPE_ASSERT, "(IsFlagActive( index ))", "%s\n\tThis function must be used in a MP-only context", "IsFlagActive( index )") )
            __debugbreak();
          if ( GameModeFlagContainer<enum EntityStateFlagsCommon,enum EntityStateFlagsSP,enum EntityStateFlagsMP,32>::TestFlagInternal(p_eFlags, ACTIVE, 0x14u) )
          {
            if ( v12->client )
              number = v12->s.number;
            else
              number = v12->s.otherEntityNum;
            if ( (unsigned int)number >= 0x800 )
            {
              LODWORD(v40) = 2048;
              LODWORD(v39) = number;
              if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 207, ASSERT_TYPE_ASSERT, "(unsigned)( entityIndex ) < (unsigned)( ( 2048 ) )", "entityIndex doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v39, v40) )
                __debugbreak();
            }
            if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 208, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
              __debugbreak();
            if ( g_entities[number].r.isInUse != g_entityIsInUse[number] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 209, ASSERT_TYPE_ASSERT, "( g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex] )", (const char *)&queryFormat, "g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex]") )
              __debugbreak();
            if ( g_entityIsInUse[number] )
            {
              if ( (unsigned __int16)number >= 0x800u )
              {
                LODWORD(v40) = 2048;
                LODWORD(v39) = number;
                if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6195, ASSERT_TYPE_ASSERT, "(unsigned)( ownerEntNum ) < (unsigned)( ( 2048 ) )", "ownerEntNum doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v39, v40) )
                  __debugbreak();
              }
              if ( number == 2047 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6196, ASSERT_TYPE_ASSERT, "( ownerEntNum != ENTITYNUM_NONE )", (const char *)&queryFormat, "ownerEntNum != ENTITYNUM_NONE") )
                __debugbreak();
              sentient = G_GetGEntity(number)->sentient;
              if ( sentient )
              {
                IsAlliedSentient = AI_IsAlliedSentient(sentient, botInfo->sentient);
                v18 = IsAlliedSentient == 0;
                if ( !IsAlliedSentient )
                {
                  __asm { vucomiss xmm6, xmm7 }
                  _RAX = botInfo->ent;
                  __asm
                  {
                    vmovss  xmm0, dword ptr [rax+130h]
                    vsubss  xmm3, xmm0, dword ptr [r14+130h]
                    vmovss  xmm1, dword ptr [rax+134h]
                    vsubss  xmm2, xmm1, dword ptr [r14+134h]
                    vmovss  xmm0, dword ptr [rax+138h]
                    vsubss  xmm4, xmm0, dword ptr [r14+138h]
                    vmulss  xmm2, xmm2, xmm2
                    vmulss  xmm1, xmm3, xmm3
                    vmulss  xmm0, xmm4, xmm4
                    vaddss  xmm3, xmm2, xmm1
                    vaddss  xmm2, xmm3, xmm0
                    vsqrtss xmm1, xmm2, xmm2
                    vaddss  xmm4, xmm1, xmm8
                  }
                  if ( v18 )
                    __asm { vmovaps xmm6, xmm4 }
                  else
                    __asm { vcomiss xmm4, xmm6 }
                }
              }
            }
          }
        }
      }
    }
    ++v8;
    ++v9;
  }
  while ( v8 < 0x40 );
  _R11 = &v44;
  __asm
  {
    vmovaps xmm8, xmmword ptr [r11-30h]
    vmovaps xmm7, [rsp+98h+var_48]
    vmovaps xmm0, xmm6
    vmovaps xmm6, [rsp+98h+var_38]
  }
  return *(float *)&_XMM0;
}

/*
==============
Bot_GetNextDebugGoal
==============
*/
__int64 Bot_GetNextDebugGoal(const bot_data_t *botData)
{
  unsigned int debugPathGoalCurrent; 
  const dvar_t *v8; 
  int v9; 
  __int64 result; 
  float v1[4]; 
  vec3_t goal; 
  char v18; 
  void *retaddr; 

  _RAX = &retaddr;
  __asm
  {
    vmovaps xmmword ptr [rax-38h], xmm6
    vmovaps xmmword ptr [rax-48h], xmm7
  }
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9959, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  debugPathGoalCurrent = botData->botDebugData.debugPathGoalCurrent;
  __asm
  {
    vmovss  xmm7, cs:__real@3a83126f
    vxorps  xmm6, xmm6, xmm6
  }
  do
  {
    v8 = DVARINT_bot_DebugPathGoal;
    v9 = debugPathGoalCurrent + 1;
    if ( !DVARINT_bot_DebugPathGoal && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DebugPathGoal") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v8);
    debugPathGoalCurrent = 1;
    if ( v9 <= v8->current.integer )
      debugPathGoalCurrent = v9;
    Bot_DebugGoal(debugPathGoalCurrent, &goal);
    __asm
    {
      vmovaps xmm2, xmm7; epsilon
      vmovss  [rsp+0B8h+v1], xmm6
      vmovss  [rsp+0B8h+var_74], xmm6
      vmovss  [rsp+0B8h+var_70], xmm6
    }
  }
  while ( VecNCompareCustomEpsilon(goal.v, v1, *(float *)&_XMM2, 3) && debugPathGoalCurrent != botData->botDebugData.debugPathGoalCurrent );
  result = debugPathGoalCurrent;
  _R11 = &v18;
  __asm
  {
    vmovaps xmm6, xmmword ptr [r11-10h]
    vmovaps xmm7, [rsp+0B8h+var_48]
  }
  return result;
}

/*
==============
Bot_GetNextWeaponDelayEndTime
==============
*/
__int64 Bot_GetNextWeaponDelayEndTime(const bot_data_t *botData, int weapFireType, int weapClass, int dualWield)
{
  int v18; 

  _RBX = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9095, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !weapFireType || weapFireType == 5 )
    return (unsigned int)_RBX->botInfo.weaponDelayEndTime;
  __asm
  {
    vcvttss2si edx, dword ptr [rbx+7FA8h]; max
    vcvttss2si ecx, dword ptr [rbx+7FA4h]; min
  }
  _ECX = G_irand(_ECX, _EDX);
  __asm { vmovss  xmm2, cs:__real@3f400000 }
  if ( weapClass == 5 )
  {
    __asm
    {
      vxorps  xmm0, xmm0, xmm0
      vcvtsi2ss xmm0, xmm0, eax
      vmulss  xmm1, xmm0, xmm2
      vcvttss2si ecx, xmm1
    }
  }
  if ( dualWield )
  {
    __asm
    {
      vxorps  xmm0, xmm0, xmm0
      vcvtsi2ss xmm0, xmm0, ecx
      vmulss  xmm1, xmm0, xmm2
      vcvttss2si ecx, xmm1
    }
  }
  v18 = 200;
  if ( _ECX > 200 )
    v18 = _ECX;
  return (unsigned int)(level.time + v18);
}

/*
==============
Bot_GetNodeTraversalYaw
==============
*/
float Bot_GetNodeTraversalYaw(const pathnode_t *nodeStart, const pathnode_t *nodeEnd, int onlyConsiderTraversalDirection)
{
  char v10; 
  vec3_t vec; 
  vec3_t v41; 
  vec3_t forward; 
  vec3_t v43; 
  vec3_t pos; 
  vec3_t angles; 
  char v46; 
  void *retaddr; 

  _RAX = &retaddr;
  __asm
  {
    vmovaps xmmword ptr [rax-28h], xmm6
    vmovaps xmmword ptr [rax-38h], xmm7
  }
  if ( !nodeStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2158, ASSERT_TYPE_ASSERT, "( nodeStart )", (const char *)&queryFormat, "nodeStart") )
    __debugbreak();
  if ( !nodeEnd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2159, ASSERT_TYPE_ASSERT, "( nodeEnd )", (const char *)&queryFormat, "nodeEnd") )
    __debugbreak();
  pathnode_t::GetPos((pathnode_t *)nodeStart, &pos);
  pathnode_t::GetPos((pathnode_t *)nodeEnd, &v43);
  *(double *)&_XMM0 = pathnode_t::GetAngle((pathnode_t *)nodeEnd);
  __asm
  {
    vmovss  xmm1, dword ptr [rsp+0D8h+var_78+4]
    vsubss  xmm3, xmm1, dword ptr [rsp+0D8h+pos+4]
    vmovaps xmm6, xmm0
    vmovss  xmm0, dword ptr [rsp+0D8h+var_78]
    vsubss  xmm4, xmm0, dword ptr [rsp+0D8h+pos]
    vxorps  xmm7, xmm7, xmm7
    vucomiss xmm4, xmm7
  }
  if ( v10 )
  {
    __asm { vucomiss xmm3, xmm7 }
    if ( v10 )
      goto LABEL_12;
  }
  __asm
  {
    vmulss  xmm1, xmm3, xmm3
    vmulss  xmm0, xmm4, xmm4
    vaddss  xmm1, xmm1, xmm0
    vsqrtss xmm2, xmm1, xmm1
    vcmpless xmm0, xmm2, cs:__real@80000000
    vmovss  xmm1, cs:__real@3f800000
    vblendvps xmm0, xmm2, xmm1, xmm0
    vdivss  xmm1, xmm1, xmm0
    vmulss  xmm0, xmm1, xmm4
    vmulss  xmm1, xmm1, xmm3
    vmovss  dword ptr [rsp+0D8h+vec+4], xmm1
    vmovss  dword ptr [rsp+0D8h+vec], xmm0
    vmovss  dword ptr [rsp+0D8h+vec+8], xmm7
  }
  vectoangles(&vec, &angles);
  __asm
  {
    vmovss  dword ptr [rsp+0D8h+var_98], xmm7
    vmovss  dword ptr [rsp+0D8h+var_98+4], xmm6
    vmovss  dword ptr [rsp+0D8h+var_98+8], xmm7
  }
  AngleVectors(&v41, &forward, NULL, NULL);
  if ( (nodeEnd->constant.spawnflags & 0x8000) == 0 )
    goto LABEL_13;
  __asm
  {
    vmovss  xmm1, dword ptr [rsp+0D8h+forward+4]
    vmovss  xmm2, dword ptr [rsp+0D8h+forward]
    vmulss  xmm3, xmm2, dword ptr [rsp+0D8h+vec]
    vmulss  xmm4, xmm1, dword ptr [rsp+0D8h+vec+4]
    vmovss  xmm1, dword ptr [rsp+0D8h+forward+8]
    vmulss  xmm2, xmm1, dword ptr [rsp+0D8h+vec+8]
    vaddss  xmm5, xmm4, xmm3
    vaddss  xmm3, xmm5, xmm2
    vcomiss xmm3, cs:__real@3f333333
  }
  if ( (nodeEnd->constant.spawnflags & 0x8000) == 0 )
    goto LABEL_13;
  if ( !onlyConsiderTraversalDirection )
LABEL_12:
    __asm { vmovaps xmm0, xmm6 }
  else
LABEL_13:
    __asm { vmovss  xmm0, dword ptr [rsp+0D8h+angles+4] }
  _R11 = &v46;
  __asm
  {
    vmovaps xmm6, xmmword ptr [r11-10h]
    vmovaps xmm7, xmmword ptr [r11-20h]
  }
  return *(float *)&_XMM0;
}

/*
==============
Bot_GetObstacleFlagsForTeam
==============
*/
__int64 Bot_GetObstacleFlagsForTeam(team_t team)
{
  if ( (unsigned int)(team - 1) > 1 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13808, ASSERT_TYPE_ASSERT, "( team == TEAM_AXIS || team == TEAM_ALLIES )", (const char *)&queryFormat, "team == TEAM_AXIS || team == TEAM_ALLIES") )
    __debugbreak();
  return (unsigned int)(1 << Path_GetNodeTeam(team));
}

/*
==============
Bot_GetPathFinalGoal
==============
*/
void Bot_GetPathFinalGoal(const bot_info_t *botInfo, vec3_t *outFinalGoal)
{
  char v5; 

  _RBX = outFinalGoal;
  if ( !botInfo )
  {
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1984, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
      __debugbreak();
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13968, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
      __debugbreak();
  }
  if ( !Nav_HasPath(botInfo->pNavigator) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1986, ASSERT_TYPE_ASSERT, "( Bot_NavPathExists( botInfo ) )", (const char *)&queryFormat, "Bot_NavPathExists( botInfo )") )
    __debugbreak();
  *(double *)&_XMM0 = ((double (__fastcall *)(AINavigator *, vec3_t *))botInfo->pNavigator->GetRequestedGoalPos)(botInfo->pNavigator, _RBX);
  __asm
  {
    vxorps  xmm0, xmm0, xmm0
    vucomiss xmm0, dword ptr [rbx]
  }
  if ( v5 )
  {
    __asm { vucomiss xmm0, dword ptr [rbx+4] }
    if ( v5 )
    {
      __asm { vucomiss xmm0, dword ptr [rbx+8] }
      if ( v5 )
      {
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1994, ASSERT_TYPE_ASSERT, "( Vec3NotZero( outFinalGoal ) )", (const char *)&queryFormat, "Vec3NotZero( outFinalGoal )") )
          __debugbreak();
      }
    }
  }
}

/*
==============
Bot_GetPathToGoalInternal
==============
*/

__int64 __fastcall Bot_GetPathToGoalInternal(bot_data_t *botData, const vec3_t *goal, double goalRadius, const char *debugReason)
{
  AINavigator *pNavigator; 
  int ShouldAvoidTraversals; 
  unsigned int v16; 
  bot_path_style_t PathingStyle; 
  bot_path_style_t v18; 
  char v25; 
  const dvar_t *v26; 
  unsigned int v34; 
  int IsScriptGoal; 
  int flags; 
  int v37; 
  scr_string_t bad_path; 
  pathnode_t *v43; 
  gentity_s *ent; 
  __int64 result; 

  _RBP = botData;
  pNavigator = botData->botInfo.pNavigator;
  botData->botInfo.lastPathCalcTime = level.time;
  __asm
  {
    vmovaps [rsp+0D8h+var_48], xmm6
    vmovaps [rsp+0D8h+var_88], xmm10
    vmovaps xmm10, xmm2
  }
  Bot_PathClear(&botData->botInfo);
  _RBP->botInfo.flags &= ~8u;
  s_botGetPathToGoalCalled = 1;
  ShouldAvoidTraversals = Bot_ShouldAvoidTraversals(_RBP);
  v16 = 0;
  if ( !ShouldAvoidTraversals )
    v16 = 1792;
  Nav_SetLinkUsageFlags(_RBP->botInfo.pNavigator, v16);
  Path_ZoneCount();
  PathingStyle = Bot_GetPathingStyle(_RBP, goal);
  v18 = PathingStyle;
  if ( (unsigned int)PathingStyle >= BOT_PATH_STYLE_COUNT && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14049, ASSERT_TYPE_ASSERT, "(unsigned)( pathStyle ) < (unsigned)( BOT_PATH_STYLE_COUNT )", "pathStyle doesn't index BOT_PATH_STYLE_COUNT\n\t%i not in [0, %i)", PathingStyle, 12) )
    __debugbreak();
  __asm { vxorps  xmm6, xmm6, xmm6 }
  if ( v18 != BOT_PATH_STYLE_SCRIPTED && Com_GameMode_SupportsFeature(WEAPON_RAISING_ALTSWITCH) && Nav_HasExposureData() )
  {
    __asm { vmovaps [rsp+0D8h+var_58], xmm7 }
    _RCX = 4 * v18;
    _RAX = PATH_WEIGHTS;
    __asm
    {
      vmovaps [rsp+0D8h+var_68], xmm8
      vmovaps [rsp+0D8h+var_78], xmm9
      vmovss  xmm9, dword ptr [rax+rcx*4]
      vmovss  xmm8, dword ptr [rax+rcx*4+4]
      vmovss  xmm7, dword ptr [rax+rcx*4+8]
    }
    Nav_SetPenaltyTableMode(pNavigator, PENALTY_MODE_DISABLED);
    Nav_ClearPenaltyTable(pNavigator);
    __asm { vucomiss xmm9, xmm6 }
    if ( !v25 )
    {
      Nav_SetPenaltyTableValue(pNavigator, 1u, 1);
      Nav_SetPenaltyTableValue(pNavigator, 2u, 2);
      Nav_SetPenaltyTableValue(pNavigator, 3u, 4);
      Nav_SetPenaltyTableValue(pNavigator, 4u, 8);
    }
    __asm { vucomiss xmm7, xmm6 }
    if ( !v25 )
    {
      Nav_SetPenaltyTableValue(pNavigator, 5u, 1);
      Nav_SetPenaltyTableValue(pNavigator, 6u, 2);
      Nav_SetPenaltyTableValue(pNavigator, 7u, 4);
      Nav_SetPenaltyTableValue(pNavigator, 8u, 8);
    }
    __asm { vucomiss xmm8, xmm6 }
    if ( !v25 )
    {
      Nav_SetPenaltyTableValue(pNavigator, 9u, 1);
      Nav_SetPenaltyTableValue(pNavigator, 0xAu, 2);
      Nav_SetPenaltyTableValue(pNavigator, 0xBu, 4);
      Nav_SetPenaltyTableValue(pNavigator, 0xCu, 8);
    }
    v26 = DVARBOOL_bot_ForcePathIndoors;
    if ( !DVARBOOL_bot_ForcePathIndoors && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 692, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_ForcePathIndoors") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v26);
    if ( (*((_BYTE *)&_RBP->scriptedAgentInfo + 9016) & 2) != 0 || v26->current.enabled )
    {
      __asm
      {
        vmovss  xmm0, dword ptr [rbp+804Ch]
        vmulss  xmm1, xmm0, cs:__real@41100000
        vcvttss2si r8d, xmm1; value
      }
      Nav_SetPenaltyTableValue(pNavigator, 0, _ER8);
    }
    else
    {
      __asm { vucomiss xmm9, xmm6 }
      if ( !v26->current.enabled )
      {
        __asm { vucomiss xmm7, xmm6 }
        if ( !v26->current.enabled )
        {
          __asm { vucomiss xmm8, xmm6 }
          if ( !v26->current.enabled )
            goto LABEL_26;
        }
      }
    }
    Nav_SetPenaltyTableMode(pNavigator, PENALTY_MODE_TOTAL);
LABEL_26:
    __asm
    {
      vmovaps xmm8, [rsp+0D8h+var_68]
      vmovaps xmm7, [rsp+0D8h+var_58]
      vmovaps xmm9, [rsp+0D8h+var_78]
    }
  }
  __asm { vxorps  xmm2, xmm2, xmm2; minDistFromCurGoal }
  v34 = Nav_SetGoalPos(pNavigator, goal, *(float *)&_XMM2);
  Bot_DrawFindPathDebugInfo(_RBP, v34, debugReason);
  IsScriptGoal = Bot_LocationIsScriptGoal(_RBP, goal);
  flags = _RBP->botInfo.flags;
  v37 = IsScriptGoal;
  if ( v34 )
  {
    __asm
    {
      vmovss  xmm0, cs:__real@41800000
      vcmpeqss xmm1, xmm10, xmm6
      vblendvps xmm2, xmm10, xmm0, xmm1; fRadius
      vxorps  xmm3, xmm3, xmm3; fHeight
    }
    _RBP->scriptedAgentInfo.scriptGoal.node = NULL;
    AICommonInterface::SetGoal(&_RBP->botInfo.activeGoal, goal, *(float *)&_XMM2, *(float *)&_XMM3, 1);
    v43 = Path_NearestNode(goal, _RBP->botInfo.ent->clipmask, NULL);
    _RBP->botInfo.activeGoal.nearestNode = v43;
    if ( v43 )
      pathnode_t::LocalizePosToParent(v43, &_RBP->botInfo.activeGoal.pos);
    _RBP->botInfo.flags &= 0xFFBFE7FF;
    if ( (_RBP->botInfo.flags & 0x4000) != 0 && v37 && (flags & 0x80000) != 0 )
    {
      bad_path = scr_const.bad_path;
      goto LABEL_38;
    }
  }
  else
  {
    if ( !_RBP->botInfo.noPathFoundTime )
      _RBP->botInfo.noPathFoundTime = level.time;
    _RBP->botInfo.noPathFoundTimeLast = level.time;
    if ( IsScriptGoal )
    {
      bad_path = scr_const.no_path;
LABEL_38:
      GScr_Notify(_RBP->botInfo.ent, bad_path, 0);
    }
  }
  ent = _RBP->botInfo.ent;
  result = v34;
  __asm
  {
    vmovaps xmm6, [rsp+0D8h+var_48]
    vmovaps xmm10, [rsp+0D8h+var_88]
  }
  _RBP->botInfo.pathProgressTime = 0;
  _RBP->botInfo.pathProgressLast.v[0] = ent->r.currentOrigin.v[0];
  _RBP->botInfo.pathProgressLast.v[1] = ent->r.currentOrigin.v[1];
  _RBP->botInfo.pathProgressLast.v[2] = ent->r.currentOrigin.v[2];
  return result;
}

/*
==============
Bot_GetPathingStyle
==============
*/
__int64 Bot_GetPathingStyle(const bot_data_t *botData, const vec3_t *newGoal)
{
  const dvar_t *v4; 
  const dvar_t *v5; 
  __int64 result; 
  bot_scr_goal_t type; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14551, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( newGoal && botData->botInfo.lastPathCalcTime != level.time && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14557, ASSERT_TYPE_ASSERT, "( !newGoal || (botInfo->lastPathCalcTime == level.time) )", (const char *)&queryFormat, "!newGoal || (botInfo->lastPathCalcTime == level.time)") )
    __debugbreak();
  v4 = DVARINT_bot_DebugPathStyle;
  if ( !DVARINT_bot_DebugPathStyle && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DebugPathStyle") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v4);
  if ( v4->current.integer )
  {
    v5 = DVARINT_bot_DebugPathStyle;
    if ( !DVARINT_bot_DebugPathStyle && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DebugPathStyle") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v5);
    return v5->current.unsignedInt;
  }
  result = (unsigned int)botData->botInfo.scriptPathStyle;
  if ( (_DWORD)result )
    return result;
  if ( !Bot_HasScriptGoal(botData) )
    return (unsigned int)botData->botInfo.activeGoal.pathStyle;
  if ( !newGoal )
  {
    if ( Bot_ActiveGoalIsScriptGoal(botData) )
      goto LABEL_22;
    return (unsigned int)botData->botInfo.activeGoal.pathStyle;
  }
  if ( !Bot_LocationIsScriptGoal(botData, newGoal) )
    return (unsigned int)botData->botInfo.activeGoal.pathStyle;
LABEL_22:
  type = botData->botInfo.scriptGoal.type;
  if ( type == BOT_SCR_GOAL_CAMP )
    return 4i64;
  if ( type != BOT_SCR_GOAL_OBJECTIVE )
    return (unsigned int)botData->botInfo.activeGoal.pathStyle;
  result = 8i64;
  if ( *((char *)&botData->scriptedAgentInfo + 9016) >= 0 )
    return (unsigned int)botData->botInfo.activeGoal.pathStyle;
  return result;
}

/*
==============
Bot_GetPathingStyleFromString
==============
*/
__int64 Bot_GetPathingStyleFromString(const char *string)
{
  const char *v1; 
  unsigned int v2; 
  __int64 v4; 
  __int64 v5; 
  const char *v6; 
  signed __int64 v7; 
  int v8; 
  __int64 v9; 
  int v10; 
  int v11; 
  int v12; 

  v1 = BOT_STR_TBL_PATH_TYPE[0];
  v2 = 0;
  if ( BOT_STR_TBL_PATH_TYPE[0] )
  {
    v4 = 0i64;
    do
    {
      if ( !*v1 )
        break;
      v5 = 0x7FFFFFFFi64;
      v6 = string;
      if ( !v1 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 212, ASSERT_TYPE_SANITY, "( s0 )", (const char *)&queryFormat, "s0") )
        __debugbreak();
      if ( !string && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 213, ASSERT_TYPE_SANITY, "( s1 )", (const char *)&queryFormat, "s1") )
        __debugbreak();
      v7 = v1 - string;
      while ( 1 )
      {
        v8 = (unsigned __int8)v6[v7];
        v9 = v5;
        v10 = *(unsigned __int8 *)v6++;
        --v5;
        if ( !v9 )
          return v2;
        if ( v8 != v10 )
        {
          v11 = v8 + 32;
          if ( (unsigned int)(v8 - 65) > 0x19 )
            v11 = v8;
          v8 = v11;
          v12 = v10 + 32;
          if ( (unsigned int)(v10 - 65) > 0x19 )
            v12 = v10;
          if ( v8 != v12 )
            break;
        }
        if ( !v8 )
          return v2;
      }
      v1 = BOT_STR_TBL_PATH_TYPE[++v4];
      ++v2;
    }
    while ( v1 );
  }
  return 12i64;
}

/*
==============
Bot_GetPersonality
==============
*/
__int64 Bot_GetPersonality(const bot_data_t *botData)
{
  __int64 result; 
  __int64 v3; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20765, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  result = (unsigned int)botData->botMatchData.personality;
  if ( (unsigned int)result >= 3 )
  {
    LODWORD(v3) = botData->botMatchData.personality;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20768, ASSERT_TYPE_ASSERT, "(unsigned)( botMatchData->personality ) < (unsigned)( BOT_PERSONALITY_DEFAULT )", "botMatchData->personality doesn't index BOT_PERSONALITY_DEFAULT\n\t%i not in [0, %i)", v3, 3) )
      __debugbreak();
    return (unsigned int)botData->botMatchData.personality;
  }
  return result;
}

/*
==============
Bot_GetPersonalityName
==============
*/
const char *Bot_GetPersonalityName(const bot_data_t *botData)
{
  bot_personality_t Personality; 
  __int64 v3; 
  __int64 v5; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20779, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  Personality = Bot_GetPersonality(botData);
  v3 = Personality;
  if ( (unsigned int)Personality >= BOT_PERSONALITY_DEFAULT )
  {
    LODWORD(v5) = Personality;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20782, ASSERT_TYPE_ASSERT, "(unsigned)( type ) < (unsigned)( BOT_PERSONALITY_DEFAULT )", "type doesn't index BOT_PERSONALITY_DEFAULT\n\t%i not in [0, %i)", v5, 3) )
      __debugbreak();
  }
  return BOT_STR_TBL_PERSONALITY[v3];
}

/*
==============
Bot_GetPredictedEntityPosition
==============
*/
__int64 Bot_GetPredictedEntityPosition(const bot_data_t *botData, const gentity_s *ent, vec3_t *predictedPositionOut)
{
  int LastKnownEntPosAndTime; 
  const gentity_s *v10; 
  pathnode_t *BestNode; 
  __int64 result; 
  int v19; 
  int v20; 
  int v21; 
  int v22; 
  int v23; 
  int v24; 
  vec3_t targetPos; 

  _RDI = predictedPositionOut;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19080, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  LastKnownEntPosAndTime = Bot_GetLastKnownEntPosAndTime(botData, ent, &targetPos);
  if ( !LastKnownEntPosAndTime || level.time - LastKnownEntPosAndTime > 2500 )
    return 0i64;
  __asm
  {
    vmovss  xmm0, dword ptr [rsp+88h+targetPos]
    vmovss  [rsp+88h+var_58], xmm0
  }
  if ( (v19 & 0x7F800000) == 2139095040 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19092, ASSERT_TYPE_ASSERT, "( !IS_NAN( position[0] ) )", (const char *)&queryFormat, "!IS_NAN( position[0] )") )
    __debugbreak();
  __asm
  {
    vmovss  xmm0, dword ptr [rsp+88h+targetPos+4]
    vmovss  [rsp+88h+var_58], xmm0
  }
  if ( (v20 & 0x7F800000) == 2139095040 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19093, ASSERT_TYPE_ASSERT, "( !IS_NAN( position[1] ) )", (const char *)&queryFormat, "!IS_NAN( position[1] )") )
    __debugbreak();
  __asm
  {
    vmovss  xmm0, dword ptr [rsp+88h+targetPos+8]
    vmovss  [rsp+88h+var_58], xmm0
  }
  if ( (v21 & 0x7F800000) == 2139095040 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19094, ASSERT_TYPE_ASSERT, "( !IS_NAN( position[2] ) )", (const char *)&queryFormat, "!IS_NAN( position[2] )") )
    __debugbreak();
  if ( botData->botInfo.currentAISearch.currentNodeCount )
  {
    v10 = EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) ? EntHandle::ent(&botData->botInfo.sentient->targetEnt) : 0i64;
    if ( v10 == ent && !Bot_CanSeeEnemy(botData) )
    {
      BestNode = AI_SearchGetBestNode(&botData->botInfo.currentAISearch);
      if ( BestNode )
        pathnode_t::GetPos(BestNode, &targetPos);
    }
  }
  __asm
  {
    vmovss  xmm0, dword ptr [rsp+88h+targetPos]
    vmovss  [rsp+88h+var_58], xmm0
  }
  if ( (v22 & 0x7F800000) == 2139095040 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19103, ASSERT_TYPE_ASSERT, "( !IS_NAN( position[0] ) )", (const char *)&queryFormat, "!IS_NAN( position[0] )") )
    __debugbreak();
  __asm
  {
    vmovss  xmm0, dword ptr [rsp+88h+targetPos+4]
    vmovss  [rsp+88h+var_58], xmm0
  }
  if ( (v23 & 0x7F800000) == 2139095040 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19104, ASSERT_TYPE_ASSERT, "( !IS_NAN( position[1] ) )", (const char *)&queryFormat, "!IS_NAN( position[1] )") )
    __debugbreak();
  __asm
  {
    vmovss  xmm0, dword ptr [rsp+88h+targetPos+8]
    vmovss  [rsp+88h+var_58], xmm0
  }
  if ( (v24 & 0x7F800000) == 2139095040 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19105, ASSERT_TYPE_ASSERT, "( !IS_NAN( position[2] ) )", (const char *)&queryFormat, "!IS_NAN( position[2] )") )
    __debugbreak();
  __asm
  {
    vmovss  xmm0, dword ptr [rsp+88h+targetPos]
    vmovss  xmm1, dword ptr [rsp+88h+targetPos+4]
  }
  result = 1i64;
  __asm
  {
    vmovss  dword ptr [rdi], xmm0
    vmovss  xmm0, dword ptr [rsp+88h+targetPos+8]
    vmovss  dword ptr [rdi+8], xmm0
    vmovss  dword ptr [rdi+4], xmm1
  }
  return result;
}

/*
==============
Bot_GetRadarIsJammed
==============
*/

_BOOL8 __fastcall Bot_GetRadarIsJammed(const bot_info_t *botInfo, double _XMM1_8)
{
  playerState_s *playerState; 
  char v5; 
  char v6; 

  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6256, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  if ( !botInfo->playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6257, ASSERT_TYPE_ASSERT, "( botInfo->playerState )", (const char *)&queryFormat, "botInfo->playerState") )
    __debugbreak();
  playerState = botInfo->playerState;
  if ( playerState->radarBlocked )
    return 1i64;
  if ( BG_HasPerk(&playerState->perks, 0x2Cu) )
    return 0i64;
  if ( botInfo->playerState->radarStrength <= 2 )
    return 1i64;
  *(float *)&_XMM0 = Bot_GetMinJammerDist(botInfo);
  __asm
  {
    vxorps  xmm1, xmm1, xmm1
    vcomiss xmm0, xmm1
  }
  if ( v5 | v6 )
    return 0i64;
  __asm { vcomiss xmm0, cs:__real@44480000 }
  return (v5 | v6) != 0;
}

/*
==============
Bot_GetRemoteEyesEnt
==============
*/
gentity_s *Bot_GetRemoteEyesEnt(const bot_data_t *botData)
{
  __int16 RemoteEyesEntNum; 
  gentity_s *v3; 
  __int64 v5; 
  __int64 v6; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5274, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !Bot_HasRemoteEyes(botData) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5275, ASSERT_TYPE_ASSERT, "( Bot_HasRemoteEyes( botData ) )", (const char *)&queryFormat, "Bot_HasRemoteEyes( botData )") )
    __debugbreak();
  RemoteEyesEntNum = Bot_GetRemoteEyesEntNum(botData);
  if ( (unsigned int)RemoteEyesEntNum >= 0x800 )
  {
    LODWORD(v5) = RemoteEyesEntNum;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5279, ASSERT_TYPE_ASSERT, "(unsigned)( remoteEyesEntNum ) < (unsigned)( ( 2048 ) )", "remoteEyesEntNum doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v5, 2048) )
      __debugbreak();
  }
  if ( RemoteEyesEntNum == 2047 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5280, ASSERT_TYPE_ASSERT, "( remoteEyesEntNum != ENTITYNUM_NONE )", (const char *)&queryFormat, "remoteEyesEntNum != ENTITYNUM_NONE") )
    __debugbreak();
  if ( (unsigned int)RemoteEyesEntNum >= 0x800 )
  {
    LODWORD(v6) = 2048;
    LODWORD(v5) = RemoteEyesEntNum;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 207, ASSERT_TYPE_ASSERT, "(unsigned)( entityIndex ) < (unsigned)( ( 2048 ) )", "entityIndex doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v5, v6) )
      __debugbreak();
  }
  if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 208, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
    __debugbreak();
  if ( g_entities[RemoteEyesEntNum].r.isInUse != g_entityIsInUse[RemoteEyesEntNum] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 209, ASSERT_TYPE_ASSERT, "( g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex] )", (const char *)&queryFormat, "g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex]") )
    __debugbreak();
  if ( !g_entityIsInUse[RemoteEyesEntNum] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5281, ASSERT_TYPE_ASSERT, "( G_IsEntityInUse( remoteEyesEntNum ) )", (const char *)&queryFormat, "G_IsEntityInUse( remoteEyesEntNum )") )
    __debugbreak();
  v3 = &g_entities[RemoteEyesEntNum];
  if ( !v3 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5284, ASSERT_TYPE_ASSERT, "( remoteEyesEnt )", (const char *)&queryFormat, "remoteEyesEnt") )
    __debugbreak();
  return v3;
}

/*
==============
Bot_GetRemoteEyesEntNum
==============
*/
__int64 Bot_GetRemoteEyesEntNum(const bot_data_t *botData)
{
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5236, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5237, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState )", (const char *)&queryFormat, "botData->botInfo.playerState") )
    __debugbreak();
  return (unsigned __int16)botData->botInfo.playerState->remoteEyesEnt;
}

/*
==============
Bot_GetRemoteEyesVehicleDef
==============
*/
const VehicleDef *Bot_GetRemoteEyesVehicleDef(const bot_data_t *botData)
{
  const gentity_s *RemoteEyesVehicleEnt; 
  const VehicleDef *result; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5339, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !Bot_IsRemoteEyesVehicle(botData) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5340, ASSERT_TYPE_ASSERT, "( Bot_IsRemoteEyesVehicle( botData ) )", (const char *)&queryFormat, "Bot_IsRemoteEyesVehicle( botData )") )
    __debugbreak();
  RemoteEyesVehicleEnt = Bot_GetRemoteEyesVehicleEnt(botData);
  result = G_Vehicle_GetServerDef(RemoteEyesVehicleEnt->vehicle->defIndex);
  if ( !result )
  {
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5344, ASSERT_TYPE_ASSERT, "( vehicleDef )", (const char *)&queryFormat, "vehicleDef") )
      __debugbreak();
    return 0i64;
  }
  return result;
}

/*
==============
Bot_GetRemoteEyesVehicleEnt
==============
*/
gentity_s *Bot_GetRemoteEyesVehicleEnt(const bot_data_t *botData)
{
  __int64 entity; 
  gentity_s *v3; 
  __int64 v5; 
  __int64 v6; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5316, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5317, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState )", (const char *)&queryFormat, "botData->botInfo.playerState") )
    __debugbreak();
  if ( !Bot_HasRemoteEyes(botData) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5318, ASSERT_TYPE_ASSERT, "( Bot_HasRemoteEyes( botData ) )", (const char *)&queryFormat, "Bot_HasRemoteEyes( botData )") )
    __debugbreak();
  if ( !Bot_IsRemoteEyesVehicle(botData) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5319, ASSERT_TYPE_ASSERT, "( Bot_IsRemoteEyesVehicle( botData ) )", (const char *)&queryFormat, "Bot_IsRemoteEyesVehicle( botData )") )
    __debugbreak();
  if ( botData->botInfo.playerState->vehicleState.entity >= 0x800u )
  {
    LODWORD(v5) = botData->botInfo.playerState->vehicleState.entity;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5321, ASSERT_TYPE_ASSERT, "(unsigned)( botData->botInfo.playerState->vehicleState.entity ) < (unsigned)( ( 2048 ) )", "botData->botInfo.playerState->vehicleState.entity doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v5, 2048) )
      __debugbreak();
  }
  if ( botData->botInfo.playerState->vehicleState.entity == 2047 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5322, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState->vehicleState.entity != ENTITYNUM_NONE )", (const char *)&queryFormat, "botData->botInfo.playerState->vehicleState.entity != ENTITYNUM_NONE") )
    __debugbreak();
  if ( botData->botInfo.playerState->vehicleState.entity != (__int16)Bot_GetRemoteEyesEntNum(botData) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5323, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState->vehicleState.entity == Bot_GetRemoteEyesEntNum( botData ) )", (const char *)&queryFormat, "botData->botInfo.playerState->vehicleState.entity == Bot_GetRemoteEyesEntNum( botData )") )
    __debugbreak();
  entity = botData->botInfo.playerState->vehicleState.entity;
  if ( (unsigned int)entity >= 0x800 )
  {
    LODWORD(v6) = 2048;
    LODWORD(v5) = botData->botInfo.playerState->vehicleState.entity;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 207, ASSERT_TYPE_ASSERT, "(unsigned)( entityIndex ) < (unsigned)( ( 2048 ) )", "entityIndex doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v5, v6) )
      __debugbreak();
  }
  if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 208, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
    __debugbreak();
  if ( g_entities[entity].r.isInUse != g_entityIsInUse[entity] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 209, ASSERT_TYPE_ASSERT, "( g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex] )", (const char *)&queryFormat, "g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex]") )
    __debugbreak();
  if ( !g_entityIsInUse[entity] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5324, ASSERT_TYPE_ASSERT, "( G_IsEntityInUse( botData->botInfo.playerState->vehicleState.entity ) )", (const char *)&queryFormat, "G_IsEntityInUse( botData->botInfo.playerState->vehicleState.entity )") )
    __debugbreak();
  v3 = &g_entities[botData->botInfo.playerState->vehicleState.entity];
  if ( !v3 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5327, ASSERT_TYPE_ASSERT, "( remoteEyesVehicleEnt )", (const char *)&queryFormat, "remoteEyesVehicleEnt") )
    __debugbreak();
  if ( !v3->vehicle && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5328, ASSERT_TYPE_ASSERT, "( remoteEyesVehicleEnt->vehicle )", (const char *)&queryFormat, "remoteEyesVehicleEnt->vehicle") )
    __debugbreak();
  return v3;
}

/*
==============
Bot_GetRemoteVehicleType
==============
*/
__int64 Bot_GetRemoteVehicleType(const bot_data_t *botData)
{
  gentity_s *RemoteEyesVehicleEnt; 
  Vehicle *vehicle; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5355, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !Bot_HasRemoteEyes(botData) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5356, ASSERT_TYPE_ASSERT, "( Bot_HasRemoteEyes( botData ) )", (const char *)&queryFormat, "Bot_HasRemoteEyes( botData )") )
    __debugbreak();
  if ( !Bot_IsRemoteEyesVehicle(botData) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5357, ASSERT_TYPE_ASSERT, "( Bot_IsRemoteEyesVehicle( botData ) )", (const char *)&queryFormat, "Bot_IsRemoteEyesVehicle( botData )") )
    __debugbreak();
  RemoteEyesVehicleEnt = Bot_GetRemoteEyesVehicleEnt(botData);
  if ( !RemoteEyesVehicleEnt && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\bgame\\bg_public.h", 1914, ASSERT_TYPE_ASSERT, "(es)", (const char *)&queryFormat, "es") )
    __debugbreak();
  if ( ((RemoteEyesVehicleEnt->s.eType - 12) & 0xFFFD) != 0 || (vehicle = RemoteEyesVehicleEnt->vehicle) == NULL )
  {
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5372, ASSERT_TYPE_ASSERT, (const char *)&queryFormat.fmt + 3, "unreachable") )
      __debugbreak();
    return 2i64;
  }
  else
  {
    _RBX = G_Vehicle_GetServerDef(vehicle->defIndex);
    if ( !_RBX && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5364, ASSERT_TYPE_ASSERT, "( vehicleDef )", (const char *)&queryFormat, "vehicleDef") )
      __debugbreak();
    if ( _RBX->camRemoteDrive )
      return 0i64;
    if ( _RBX->vehCam_zOffsetMode != VEHCAM_ZMODE_VEHICLE )
      return 0i64;
    if ( _RBX->vehCam_zOffsetMode3P != VEHCAM_ZMODE_VIEW )
      return 0i64;
    __asm
    {
      vxorps  xmm0, xmm0, xmm0
      vcomiss xmm0, dword ptr [rbx+0C54h]
    }
    return _RBX->vehCam_zOffsetMode3P < (unsigned int)VEHCAM_ZMODE_VIEW;
  }
}

/*
==============
Bot_GetRequestedNavGoal
==============
*/
void Bot_GetRequestedNavGoal(const bot_info_t *botInfo, vec3_t *requestedGoalOut)
{
  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13980, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  botInfo->pNavigator->GetRequestedGoalPos(botInfo->pNavigator, requestedGoalOut);
}

/*
==============
Bot_GetScriptButtonType
==============
*/
__int64 Bot_GetScriptButtonType(const char *buttonName)
{
  const char *v1; 
  unsigned int v2; 
  __int64 v4; 
  __int64 v5; 
  const char *v6; 
  signed __int64 v7; 
  int v8; 
  __int64 v9; 
  int v10; 
  int v11; 
  int v12; 

  v1 = BOT_STR_TBL_BUTTONS[0];
  v2 = 0;
  if ( BOT_STR_TBL_BUTTONS[0] )
  {
    v4 = 0i64;
    do
    {
      if ( !*v1 )
        break;
      v5 = 0x7FFFFFFFi64;
      v6 = buttonName;
      if ( !v1 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 212, ASSERT_TYPE_SANITY, "( s0 )", (const char *)&queryFormat, "s0") )
        __debugbreak();
      if ( !buttonName && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 213, ASSERT_TYPE_SANITY, "( s1 )", (const char *)&queryFormat, "s1") )
        __debugbreak();
      v7 = v1 - buttonName;
      while ( 1 )
      {
        v8 = (unsigned __int8)v6[v7];
        v9 = v5;
        v10 = *(unsigned __int8 *)v6++;
        --v5;
        if ( !v9 )
          return v2;
        if ( v8 != v10 )
        {
          v11 = v8 + 32;
          if ( (unsigned int)(v8 - 65) > 0x19 )
            v11 = v8;
          v8 = v11;
          v12 = v10 + 32;
          if ( (unsigned int)(v10 - 65) > 0x19 )
            v12 = v10;
          if ( v8 != v12 )
            break;
        }
        if ( !v8 )
          return v2;
      }
      v1 = BOT_STR_TBL_BUTTONS[++v4];
      ++v2;
    }
    while ( v1 );
  }
  return 12i64;
}

/*
==============
Bot_GetScriptFlagType
==============
*/
__int64 Bot_GetScriptFlagType(const char *scriptFlagName)
{
  const char *v1; 
  unsigned int v2; 
  __int64 v4; 
  __int64 v5; 
  const char *v6; 
  signed __int64 v7; 
  int v8; 
  __int64 v9; 
  int v10; 
  int v11; 
  int v12; 

  v1 = BOT_STR_TBL_FLAGS[0];
  v2 = 0;
  if ( BOT_STR_TBL_FLAGS[0] )
  {
    v4 = 0i64;
    do
    {
      if ( !*v1 )
        break;
      v5 = 0x7FFFFFFFi64;
      v6 = scriptFlagName;
      if ( !v1 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 212, ASSERT_TYPE_SANITY, "( s0 )", (const char *)&queryFormat, "s0") )
        __debugbreak();
      if ( !scriptFlagName && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 213, ASSERT_TYPE_SANITY, "( s1 )", (const char *)&queryFormat, "s1") )
        __debugbreak();
      v7 = v1 - scriptFlagName;
      while ( 1 )
      {
        v8 = (unsigned __int8)v6[v7];
        v9 = v5;
        v10 = *(unsigned __int8 *)v6++;
        --v5;
        if ( !v9 )
          return v2;
        if ( v8 != v10 )
        {
          v11 = v8 + 32;
          if ( (unsigned int)(v8 - 65) > 0x19 )
            v11 = v8;
          v8 = v11;
          v12 = v10 + 32;
          if ( (unsigned int)(v10 - 65) > 0x19 )
            v12 = v10;
          if ( v8 != v12 )
            break;
        }
        if ( !v8 )
          return v2;
      }
      v1 = BOT_STR_TBL_FLAGS[++v4];
      ++v2;
    }
    while ( v1 );
  }
  return 25i64;
}

/*
==============
Bot_GetScriptGoal
==============
*/
void Bot_GetScriptGoal(const bot_data_t *botData, vec3_t *goal)
{
  pathnode_t *nearestNode; 
  bool v7; 
  int v12; 
  int v13; 
  int v14; 

  _RBX = goal;
  _RDI = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23638, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !_RDI->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23639, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( _RDI->botInfo.scriptGoal.type == BOT_SCR_GOAL_NONE && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23642, ASSERT_TYPE_ASSERT, "( botInfo->scriptGoal.type != BOT_SCR_GOAL_NONE )", (const char *)&queryFormat, "botInfo->scriptGoal.type != BOT_SCR_GOAL_NONE") )
    __debugbreak();
  __asm
  {
    vmovss  xmm1, dword ptr [rdi+200h]
    vmovss  dword ptr [rbx], xmm1
  }
  _RBX->v[1] = _RDI->botInfo.scriptGoal.pos.v[1];
  LODWORD(_RBX->v[2]) = _RDI->scriptedAgentInfo.blackboard.m_ShootParams.m_StartTime;
  nearestNode = _RDI->botInfo.scriptGoal.nearestNode;
  v7 = nearestNode == NULL;
  if ( nearestNode )
  {
    pathnode_t::WorldifyPosFromParent(nearestNode, _RBX);
    __asm { vmovss  xmm1, dword ptr [rbx] }
  }
  __asm
  {
    vxorps  xmm0, xmm0, xmm0
    vucomiss xmm1, xmm0
  }
  if ( v7 )
  {
    __asm { vucomiss xmm0, dword ptr [rbx+4] }
    if ( v7 )
    {
      __asm { vucomiss xmm0, dword ptr [rbx+8] }
      if ( v7 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23649, ASSERT_TYPE_ASSERT, "( Vec3NotZero( goal ) )", (const char *)&queryFormat, "Vec3NotZero( goal )") )
        __debugbreak();
    }
  }
  __asm
  {
    vmovss  xmm0, dword ptr [rbx]
    vmovss  [rsp+38h+arg_0], xmm0
  }
  if ( (v12 & 0x7F800000) == 2139095040 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23650, ASSERT_TYPE_ASSERT, "( !IS_NAN( goal[0] ) )", (const char *)&queryFormat, "!IS_NAN( goal[0] )") )
    __debugbreak();
  __asm
  {
    vmovss  xmm0, dword ptr [rbx+4]
    vmovss  [rsp+38h+arg_0], xmm0
  }
  if ( (v13 & 0x7F800000) == 2139095040 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23651, ASSERT_TYPE_ASSERT, "( !IS_NAN( goal[1] ) )", (const char *)&queryFormat, "!IS_NAN( goal[1] )") )
    __debugbreak();
  __asm
  {
    vmovss  xmm0, dword ptr [rbx+8]
    vmovss  [rsp+38h+arg_0], xmm0
  }
  if ( (v14 & 0x7F800000) == 2139095040 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23652, ASSERT_TYPE_ASSERT, "( !IS_NAN( goal[2] ) )", (const char *)&queryFormat, "!IS_NAN( goal[2] )") )
    __debugbreak();
}

/*
==============
Bot_GetScriptGoalNode
==============
*/
pathnode_t *Bot_GetScriptGoalNode(const bot_data_t *botData)
{
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23678, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( botData->botInfo.scriptGoal.type == BOT_SCR_GOAL_NONE && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23679, ASSERT_TYPE_ASSERT, "( botData->botInfo.scriptGoal.type != BOT_SCR_GOAL_NONE )", (const char *)&queryFormat, "botData->botInfo.scriptGoal.type != BOT_SCR_GOAL_NONE") )
    __debugbreak();
  return botData->botInfo.scriptGoal.node;
}

/*
==============
Bot_GetScriptGoalRadius
==============
*/
float Bot_GetScriptGoalRadius(const bot_data_t *botData)
{
  _RBX = botData;
  if ( botData )
  {
    __asm { vmovss  xmm0, dword ptr [rcx+20Ch] }
  }
  else
  {
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23690, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
      __debugbreak();
    __asm { vmovss  xmm0, dword ptr [rbx+20Ch] }
  }
  return *(float *)&_XMM0;
}

/*
==============
Bot_GetScriptGoalType
==============
*/
__int64 Bot_GetScriptGoalType(const bot_data_t *botData)
{
  if ( botData )
    return (unsigned int)botData->botInfo.scriptGoal.type;
  if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20741, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  return MEMORY[0x22C];
}

/*
==============
Bot_GetScriptGoalTypeName
==============
*/
const char *Bot_GetScriptGoalTypeName(const bot_data_t *botData)
{
  if ( !botData )
  {
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20752, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
      __debugbreak();
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20741, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
      __debugbreak();
  }
  return BOT_STR_TBL_GOAL_TYPE[botData->botInfo.scriptGoal.type];
}

/*
==============
Bot_GetScriptGoalYaw
==============
*/
float Bot_GetScriptGoalYaw(const bot_data_t *botData)
{
  _RBX = botData;
  if ( botData )
  {
    __asm { vmovss  xmm0, dword ptr [rcx+228h] }
  }
  else
  {
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23701, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
      __debugbreak();
    __asm { vmovss  xmm0, dword ptr [rbx+228h] }
  }
  return *(float *)&_XMM0;
}

/*
==============
Bot_GetScriptedGrenadeType
==============
*/
__int64 Bot_GetScriptedGrenadeType(const char *scriptGrenadeTypeName)
{
  const char *v1; 
  unsigned int v2; 
  __int64 v4; 
  __int64 v5; 
  const char *v6; 
  signed __int64 v7; 
  int v8; 
  __int64 v9; 
  int v10; 
  int v11; 
  int v12; 

  v1 = BOT_STR_TBL_GRENADE_TYPES[0];
  v2 = 0;
  if ( BOT_STR_TBL_GRENADE_TYPES[0] )
  {
    v4 = 0i64;
    do
    {
      if ( !*v1 )
        break;
      v5 = 0x7FFFFFFFi64;
      v6 = scriptGrenadeTypeName;
      if ( !v1 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 212, ASSERT_TYPE_SANITY, "( s0 )", (const char *)&queryFormat, "s0") )
        __debugbreak();
      if ( !scriptGrenadeTypeName && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 213, ASSERT_TYPE_SANITY, "( s1 )", (const char *)&queryFormat, "s1") )
        __debugbreak();
      v7 = v1 - scriptGrenadeTypeName;
      while ( 1 )
      {
        v8 = (unsigned __int8)v6[v7];
        v9 = v5;
        v10 = *(unsigned __int8 *)v6++;
        --v5;
        if ( !v9 )
          return v2;
        if ( v8 != v10 )
        {
          v11 = v8 + 32;
          if ( (unsigned int)(v8 - 65) > 0x19 )
            v11 = v8;
          v8 = v11;
          v12 = v10 + 32;
          if ( (unsigned int)(v10 - 65) > 0x19 )
            v12 = v10;
          if ( v8 != v12 )
            break;
        }
        if ( !v8 )
          return v2;
      }
      v1 = BOT_STR_TBL_GRENADE_TYPES[++v4];
      ++v2;
    }
    while ( v1 );
  }
  return 3i64;
}

/*
==============
Bot_GetSensesObstructed
==============
*/
_BOOL8 Bot_GetSensesObstructed(const bot_data_t *botData, float *visionBlock, float *hearingBlock)
{
  playerState_s *playerState; 
  BOOL v12; 
  int shellshockTime; 
  int shellshockDuration; 
  int v15; 
  shellshock_parms_t *ShellshockParms; 
  ShockViewTypes type; 
  int fadeOutTime; 
  int v47; 

  _RBX = hearingBlock;
  _RDI = visionBlock;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13488, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13491, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  v12 = 0;
  if ( _RDI )
    *_RDI = 0.0;
  if ( _RBX )
    *_RBX = 0.0;
  if ( GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&playerState->pm_flags, ACTIVE, 0x15u) )
  {
    shellshockTime = playerState->shellshockTime;
    shellshockDuration = playerState->shellshockDuration;
    if ( level.time < shellshockTime + shellshockDuration )
    {
      v15 = shellshockTime + shellshockDuration - level.time;
      if ( playerState->shellshockDuration )
      {
        if ( shellshockTime > 0 && v15 > 0 )
        {
          __asm { vmovaps [rsp+88h+var_48], xmm7 }
          ShellshockParms = BG_GetShellshockParms(playerState->shellshockIndex);
          __asm { vxorps  xmm5, xmm5, xmm5 }
          type = ShellshockParms->screenBlend.type;
          _EAX = ShellshockParms->screenBlend.blurredEffectTime;
          __asm { vcvtsi2ss xmm5, xmm5, r12d }
          v12 = type == SHELLSHOCK_VIEWTYPE_FLASHED || ShellshockParms->sound.affect;
          _ECX = ShellshockParms->screenBlend.blurredFadeTime;
          if ( type == SHELLSHOCK_VIEWTYPE_BLURRED )
            v12 = 1;
          if ( v15 < _ECX )
          {
            __asm
            {
              vmovd   xmm1, eax
              vcvtdq2ps xmm1, xmm1
              vmovd   xmm0, ecx
              vcvtdq2ps xmm0, xmm0
              vdivss  xmm2, xmm5, xmm0
              vmulss  xmm2, xmm2, xmm1
              vaddss  xmm3, xmm2, cs:__real@3f000000
              vxorps  xmm1, xmm1, xmm1
              vroundss xmm2, xmm1, xmm3, 1
              vcvttss2si eax, xmm2
            }
          }
          __asm { vmovss  xmm7, cs:__real@3f800000 }
          if ( _EAX > 0 && _RDI )
          {
            if ( type )
            {
              if ( type == SHELLSHOCK_VIEWTYPE_FLASHED )
              {
                __asm
                {
                  vxorps  xmm0, xmm0, xmm0
                  vcvtsi2ss xmm0, xmm0, dword ptr [rsi+8]
                  vcomiss xmm5, xmm0
                  vxorps  xmm1, xmm1, xmm1
                  vcvtsi2ss xmm1, xmm1, dword ptr [rsi+0Ch]
                  vmovaps [rsp+88h+var_38], xmm6
                  vmovaps [rsp+88h+var_58], xmm8
                  vmovaps xmm0, xmm7; percent
                  vcomiss xmm5, xmm1
                  vmovaps xmm8, xmm7
                }
                *(double *)&_XMM0 = BG_ShellshockBlendSmooth(*(float *)&_XMM0);
                __asm
                {
                  vmovaps xmm6, xmm0
                  vmovaps xmm0, xmm8; percent
                }
                *(double *)&_XMM0 = BG_ShellshockBlendSmooth(*(float *)&_XMM0);
                __asm
                {
                  vmulss  xmm2, xmm0, cs:__real@3e800000
                  vmulss  xmm1, xmm6, cs:__real@3f400000
                  vmovaps xmm8, [rsp+88h+var_58]
                  vmovaps xmm6, [rsp+88h+var_38]
                  vaddss  xmm2, xmm2, xmm1
                  vaddss  xmm0, xmm2, dword ptr [rdi]
                  vmovss  dword ptr [rdi], xmm0
                }
              }
            }
            else
            {
              __asm
              {
                vxorps  xmm0, xmm0, xmm0
                vcvtsi2ss xmm0, xmm0, ecx
                vcomiss xmm5, xmm0
                vmovaps xmm0, xmm7
                vmulss  xmm0, xmm0, cs:__real@3e99999a
                vaddss  xmm1, xmm0, dword ptr [rdi]
                vmovss  dword ptr [rdi], xmm1
              }
            }
          }
          if ( !ShellshockParms->sound.affect || !_RBX )
            goto LABEL_36;
          fadeOutTime = ShellshockParms->sound.fadeOutTime;
          v47 = shellshockDuration + fadeOutTime + ShellshockParms->sound.modEndDelay - (level.time - shellshockTime);
          if ( level.time - shellshockTime >= ShellshockParms->sound.fadeInTime )
          {
            if ( v47 > fadeOutTime )
            {
              *_RBX = 1.0;
LABEL_36:
              __asm { vmovaps xmm7, [rsp+88h+var_48] }
              return v12;
            }
            if ( v47 < 0 || v47 >= fadeOutTime )
              goto LABEL_36;
            __asm
            {
              vxorps  xmm1, xmm1, xmm1
              vxorps  xmm0, xmm0, xmm0
              vcvtsi2ss xmm1, xmm1, eax
              vcvtsi2ss xmm0, xmm0, ecx
              vdivss  xmm1, xmm1, xmm0
            }
          }
          else
          {
            __asm
            {
              vxorps  xmm1, xmm1, xmm1
              vcvtsi2ss xmm1, xmm1, edx
              vxorps  xmm0, xmm0, xmm0
              vcvtsi2ss xmm0, xmm0, r8d
              vdivss  xmm2, xmm1, xmm0
              vsubss  xmm1, xmm7, xmm2
            }
          }
          __asm { vmovss  dword ptr [rbx], xmm1 }
          goto LABEL_36;
        }
      }
    }
  }
  return v12;
}

/*
==============
Bot_GetSpectatedBotData
==============
*/
bot_data_t *Bot_GetSpectatedBotData(const LocalClientNum_t localClientNum)
{
  const dvar_t *v2; 
  const dvar_t *v3; 
  const dvar_t *v4; 
  const dvar_t *v5; 
  const dvar_t *v6; 
  gentity_s *v7; 
  cg_t *LocalClientGlobals; 
  cg_t *v10; 
  centity_t *predictedPlayerEntity; 
  int number; 
  __int16 v13; 
  __int64 v14; 
  __int64 v15; 

  if ( !Com_IsAnyLocalServerRunning() )
    return 0i64;
  v2 = DVARINT_bot_DrawDebugHudEnt;
  if ( !DVARINT_bot_DrawDebugHudEnt && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebugHudEnt") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v2);
  if ( v2->current.integer < 0 )
  {
    LocalClientGlobals = CG_GetLocalClientGlobals(localClientNum);
    v10 = LocalClientGlobals;
    if ( !LocalClientGlobals->inKillCam )
    {
      predictedPlayerEntity = LocalClientGlobals->predictedPlayerEntity;
      if ( predictedPlayerEntity )
      {
        number = predictedPlayerEntity->nextState.number;
        if ( number < (int)SvClient::ms_clientCount && SV_BotIsBot(number) && SvClient::GetCommonClient(v10->predictedPlayerEntity->nextState.number)->state == CS_ACTIVE )
        {
          v13 = v10->predictedPlayerEntity->nextState.number;
          if ( (unsigned __int16)v13 >= 0x800u )
          {
            LODWORD(v15) = 2048;
            LODWORD(v14) = v13;
            if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22577, ASSERT_TYPE_ASSERT, "(unsigned)( cgameGlob->predictedPlayerEntity->nextState.number ) < (unsigned)( ( 2048 ) )", "cgameGlob->predictedPlayerEntity->nextState.number doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v14, v15) )
              __debugbreak();
          }
          if ( v10->predictedPlayerEntity->nextState.number == 2047 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22578, ASSERT_TYPE_ASSERT, "( cgameGlob->predictedPlayerEntity->nextState.number != ENTITYNUM_NONE )", (const char *)&queryFormat, "cgameGlob->predictedPlayerEntity->nextState.number != ENTITYNUM_NONE") )
            __debugbreak();
          if ( G_IsEntityInUse(v10->predictedPlayerEntity->nextState.number) )
            return Bot_GetEntityData(&g_entities[v10->predictedPlayerEntity->nextState.number]);
        }
      }
    }
    return 0i64;
  }
  v3 = DVARINT_bot_DrawDebugHudEnt;
  if ( !DVARINT_bot_DrawDebugHudEnt && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebugHudEnt") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v3);
  if ( v3->current.integer >= 0x800u )
  {
    v4 = DVARINT_bot_DrawDebugHudEnt;
    if ( !DVARINT_bot_DrawDebugHudEnt && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebugHudEnt") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v4);
    LODWORD(v15) = 2048;
    LODWORD(v14) = v4->current.integer;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22545, ASSERT_TYPE_ASSERT, "(unsigned)( Dvar_GetInt_Internal_DebugName( DVARINT_bot_DrawDebugHudEnt, \"bot_DrawDebugHudEnt\" ) ) < (unsigned)( ( 2048 ) )", "Dvar_GetInt( bot_DrawDebugHudEnt ) doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v14, v15) )
      __debugbreak();
  }
  v5 = DVARINT_bot_DrawDebugHudEnt;
  if ( !DVARINT_bot_DrawDebugHudEnt && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebugHudEnt") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v5);
  if ( v5->current.integer == 2047 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22546, ASSERT_TYPE_ASSERT, "( Dvar_GetInt_Internal_DebugName( DVARINT_bot_DrawDebugHudEnt, \"bot_DrawDebugHudEnt\" ) != ENTITYNUM_NONE )", (const char *)&queryFormat, "Dvar_GetInt( bot_DrawDebugHudEnt ) != ENTITYNUM_NONE") )
    __debugbreak();
  v6 = DVARINT_bot_DrawDebugHudEnt;
  v7 = g_entities;
  if ( !DVARINT_bot_DrawDebugHudEnt && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebugHudEnt") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v6);
  return Bot_GetEntityData(&v7[v6->current.integer]);
}

/*
==============
Bot_GetStopGoalStance
==============
*/
ai_stance_e Bot_GetStopGoalStance(const pathnode_t *node)
{
  ai_stance_e result; 
  unsigned __int16 type; 
  int v4; 
  unsigned __int16 v5; 

  if ( !node )
    return 6;
  result = Path_AllowedStancesForNode(node);
  if ( (result & 2) != 0 )
  {
    type = node->constant.type;
    if ( type > 0x16u || (v4 = 4195332, !_bittest(&v4, type)) )
      result &= ~1u;
  }
  v5 = node->constant.type;
  if ( v5 == 5 || v5 == 12 )
    result &= 0xFFFFFFFC;
  if ( (result & 1) != 0 )
    return result & 0xFFFFFFF9;
  if ( (result & 2) != 0 )
    return result & 0xFFFFFFFB;
  return result;
}

/*
==============
Bot_GetTargetedLookAt
==============
*/
__int64 Bot_GetTargetedLookAt(bot_data_t *botData, vec3_t *lookAtPosOut)
{
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12514, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( Bot_IsThrowingGrenade(botData) )
  {
    lookAtPosOut->v[0] = botData->botInfo.grenadeThrowTarget.v[0];
    lookAtPosOut->v[1] = botData->botInfo.grenadeThrowTarget.v[1];
    lookAtPosOut->v[2] = botData->botInfo.grenadeThrowTarget.v[2];
    return 1i64;
  }
  else if ( (*((_BYTE *)&botData->scriptedAgentInfo + 28228) & 2) != 0 )
  {
    lookAtPosOut->v[0] = botData->botInfo.scriptedGrenadeTarget.v[0];
    lookAtPosOut->v[1] = botData->botInfo.scriptedGrenadeTarget.v[1];
    lookAtPosOut->v[2] = botData->botInfo.scriptedGrenadeTarget.v[2];
    return 1i64;
  }
  else if ( level.time < botData->botInfo.lookAtTime && Bot_ShouldLookAtPoint(botData) )
  {
    lookAtPosOut->v[0] = botData->botInfo.lookAtPoint.v[0];
    lookAtPosOut->v[1] = botData->botInfo.lookAtPoint.v[1];
    lookAtPosOut->v[2] = botData->botInfo.lookAtPoint.v[2];
    return 1i64;
  }
  else
  {
    return 0i64;
  }
}

/*
==============
Bot_GetTeamDifficulty
==============
*/
bot_difficulty_t Bot_GetTeamDifficulty(int relativeTeam)
{
  if ( BG_BotsUsingTeamDifficulty() )
    return BG_GetBotsDifficulty(relativeTeam);
  else
    return BG_GetBotsDifficulty(0);
}

/*
==============
Bot_GetWorldCenter
==============
*/
void Bot_GetWorldCenter(vec3_t *worldSize)
{
  __asm
  {
    vmovss  xmm0, dword ptr cs:s_botWorldBounds.midPoint
    vmovss  dword ptr [rcx], xmm0
    vmovss  xmm1, dword ptr cs:s_botWorldBounds.midPoint+4
    vmovss  dword ptr [rcx+4], xmm1
    vmovss  xmm0, dword ptr cs:s_botWorldBounds.midPoint+8
    vmovss  dword ptr [rcx+8], xmm0
  }
}

/*
==============
Bot_GetWorldClosestEdge
==============
*/
float Bot_GetWorldClosestEdge(const bot_data_t *botData, const vec3_t *point, vec3_t *resultPoint, vec3_t *resultNormal)
{
  gentity_s *ent; 
  char v87; 
  void *retaddr; 

  _RAX = &retaddr;
  __asm { vmovaps xmmword ptr [rax-18h], xmm6 }
  _RBX = resultNormal;
  __asm { vmovaps xmmword ptr [rax-28h], xmm7 }
  _RSI = resultPoint;
  __asm { vmovaps xmmword ptr [rax-38h], xmm8 }
  _RDI = point;
  __asm
  {
    vmovaps xmmword ptr [rax-48h], xmm9
    vmovaps xmmword ptr [rax-58h], xmm10
  }
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20855, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !_RDI )
  {
    ent = botData->botInfo.ent;
    if ( !ent || (_RDI = &ent->r.currentOrigin, ent == (gentity_s *)-304i64) )
    {
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20865, ASSERT_TYPE_ASSERT, "( point )", (const char *)&queryFormat, "point") )
        __debugbreak();
    }
  }
  __asm
  {
    vmovss  xmm5, dword ptr [rdi]
    vmulss  xmm2, xmm5, dword ptr cs:s_botWorldEdgePlanes
    vmovss  xmm0, dword ptr cs:s_botWorldEdgePlanes+4
    vmulss  xmm1, xmm0, dword ptr [rdi+4]
    vmovss  xmm10, dword ptr cs:__xmm@7fffffff7fffffff7fffffff7fffffff
    vaddss  xmm3, xmm2, xmm1
    vmovss  xmm2, dword ptr cs:s_botWorldEdgePlanes+8
    vmulss  xmm0, xmm2, dword ptr [rdi+8]
    vmovss  xmm1, dword ptr cs:s_botWorldEdgePlanes+0Ch
    vaddss  xmm3, xmm3, xmm0
    vsubss  xmm6, xmm1, xmm3
    vandps  xmm6, xmm6, xmm10
    vmulss  xmm0, xmm6, dword ptr cs:s_botWorldEdgePlanes
    vaddss  xmm1, xmm0, xmm5
    vmovss  xmm5, dword ptr cs:__xmm@80000000800000008000000080000000
    vmovss  dword ptr [rsi], xmm1
    vmulss  xmm1, xmm6, dword ptr cs:s_botWorldEdgePlanes+4
    vaddss  xmm2, xmm1, dword ptr [rdi+4]
    vmovss  dword ptr [rsi+4], xmm2
    vmulss  xmm1, xmm6, dword ptr cs:s_botWorldEdgePlanes+8
    vaddss  xmm2, xmm1, dword ptr [rdi+8]
    vmovss  dword ptr [rsi+8], xmm2
  }
  if ( _RBX )
  {
    __asm
    {
      vmovss  xmm0, dword ptr cs:s_botWorldEdgePlanes
      vmovss  dword ptr [rbx], xmm0
      vmovss  xmm1, dword ptr cs:s_botWorldEdgePlanes+4
      vmovss  dword ptr [rbx+4], xmm1
      vmovss  xmm2, dword ptr cs:s_botWorldEdgePlanes+8
      vxorps  xmm0, xmm0, xmm5
      vmovss  dword ptr [rbx], xmm0
      vxorps  xmm0, xmm2, xmm5
      vxorps  xmm1, xmm1, xmm5
      vmovss  dword ptr [rbx+8], xmm0
      vmovss  dword ptr [rbx+4], xmm1
    }
  }
  __asm
  {
    vmovss  xmm0, dword ptr cs:s_botWorldEdgePlanes+14h
    vmulss  xmm1, xmm0, dword ptr [rdi+4]
    vmovss  xmm7, dword ptr [rdi]
    vmovss  xmm8, dword ptr cs:s_botWorldEdgePlanes+10h
    vmulss  xmm2, xmm7, xmm8
    vaddss  xmm3, xmm2, xmm1
    vmovss  xmm2, dword ptr cs:s_botWorldEdgePlanes+18h
    vmulss  xmm0, xmm2, dword ptr [rdi+8]
    vmovss  xmm1, dword ptr cs:s_botWorldEdgePlanes+1Ch
    vaddss  xmm3, xmm3, xmm0
    vsubss  xmm4, xmm1, xmm3
    vandps  xmm4, xmm4, xmm10
    vcomiss xmm4, xmm6
    vmovss  xmm0, dword ptr cs:s_botWorldEdgePlanes+24h
    vmulss  xmm2, xmm0, dword ptr [rdi+4]
    vmovss  xmm8, dword ptr [rdi]
    vmovss  xmm9, dword ptr cs:s_botWorldEdgePlanes+20h
    vmovss  xmm0, dword ptr cs:s_botWorldEdgePlanes+28h
    vmulss  xmm1, xmm8, xmm9
    vaddss  xmm3, xmm2, xmm1
    vmulss  xmm2, xmm0, dword ptr [rdi+8]
    vmovss  xmm1, dword ptr cs:s_botWorldEdgePlanes+2Ch
    vaddss  xmm3, xmm3, xmm2
    vsubss  xmm4, xmm1, xmm3
    vandps  xmm4, xmm4, xmm10
    vcomiss xmm4, xmm6
    vxorps  xmm7, xmm7, xmm7
    vcomiss xmm6, xmm7
    vmovss  xmm0, dword ptr cs:s_botWorldEdgePlanes+34h
    vmulss  xmm2, xmm0, dword ptr [rdi+4]
    vmovss  xmm0, dword ptr cs:s_botWorldEdgePlanes+30h
    vmovss  xmm8, dword ptr [rdi]
    vmulss  xmm1, xmm8, xmm0
    vaddss  xmm4, xmm2, xmm1
    vmovss  xmm2, dword ptr cs:s_botWorldEdgePlanes+38h
    vmulss  xmm3, xmm2, dword ptr [rdi+8]
    vmovss  xmm1, dword ptr cs:s_botWorldEdgePlanes+3Ch
    vaddss  xmm4, xmm4, xmm3
    vsubss  xmm4, xmm1, xmm4
    vandps  xmm4, xmm4, xmm10
    vcomiss xmm4, xmm6
    vcomiss xmm6, xmm7
    vmovaps xmm0, xmm6
    vmovaps xmm6, [rsp+88h+var_18]
  }
  _R11 = &v87;
  __asm
  {
    vmovaps xmm8, xmmword ptr [r11-30h]
    vmovaps xmm9, xmmword ptr [r11-40h]
    vmovaps xmm10, xmmword ptr [r11-50h]
    vmovaps xmm7, [rsp+88h+var_28]
  }
  return *(float *)&_XMM0;
}

/*
==============
Bot_GetWorldSize
==============
*/
void Bot_GetWorldSize(vec3_t *worldSize)
{
  __asm
  {
    vmovss  xmm2, cs:__real@40000000
    vmulss  xmm4, xmm2, dword ptr cs:s_botWorldBounds.halfSize
    vmulss  xmm3, xmm2, dword ptr cs:s_botWorldBounds.halfSize+4
    vmulss  xmm2, xmm2, dword ptr cs:s_botWorldBounds.halfSize+8
    vmovss  dword ptr [rcx+8], xmm2
    vmovss  dword ptr [rcx], xmm4
    vmovss  dword ptr [rcx+4], xmm3
  }
}

/*
==============
Bot_GetZoneCountCompareType
==============
*/
__int64 Bot_GetZoneCountCompareType(const char *string)
{
  const char *v1; 
  unsigned int v2; 
  __int64 v4; 
  __int64 v5; 
  const char *v6; 
  signed __int64 v7; 
  int v8; 
  __int64 v9; 
  int v10; 
  int v11; 
  int v12; 

  v1 = BOT_STR_ZONE_COUNT_CMP[0];
  v2 = 0;
  if ( BOT_STR_ZONE_COUNT_CMP[0] )
  {
    v4 = 0i64;
    do
    {
      if ( !*v1 )
        break;
      v5 = 0x7FFFFFFFi64;
      v6 = string;
      if ( !v1 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 212, ASSERT_TYPE_SANITY, "( s0 )", (const char *)&queryFormat, "s0") )
        __debugbreak();
      if ( !string && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 213, ASSERT_TYPE_SANITY, "( s1 )", (const char *)&queryFormat, "s1") )
        __debugbreak();
      v7 = v1 - string;
      while ( 1 )
      {
        v8 = (unsigned __int8)v6[v7];
        v9 = v5;
        v10 = *(unsigned __int8 *)v6++;
        --v5;
        if ( !v9 )
          return v2;
        if ( v8 != v10 )
        {
          v11 = v8 + 32;
          if ( (unsigned int)(v8 - 65) > 0x19 )
            v11 = v8;
          v8 = v11;
          v12 = v10 + 32;
          if ( (unsigned int)(v10 - 65) > 0x19 )
            v12 = v10;
          if ( v8 != v12 )
            break;
        }
        if ( !v8 )
          return v2;
      }
      v1 = BOT_STR_ZONE_COUNT_CMP[++v4];
      ++v2;
    }
    while ( v1 );
  }
  return 2i64;
}

/*
==============
Bot_GetZoneCountType
==============
*/
__int64 Bot_GetZoneCountType(const char *string)
{
  const char *v1; 
  unsigned int v2; 
  __int64 v4; 
  __int64 v5; 
  const char *v6; 
  signed __int64 v7; 
  int v8; 
  __int64 v9; 
  int v10; 
  int v11; 
  int v12; 

  v1 = BOT_STR_ZONE_COUNT[0];
  v2 = 0;
  if ( BOT_STR_ZONE_COUNT[0] )
  {
    v4 = 0i64;
    do
    {
      if ( !*v1 )
        break;
      v5 = 0x7FFFFFFFi64;
      v6 = string;
      if ( !v1 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 212, ASSERT_TYPE_SANITY, "( s0 )", (const char *)&queryFormat, "s0") )
        __debugbreak();
      if ( !string && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 213, ASSERT_TYPE_SANITY, "( s1 )", (const char *)&queryFormat, "s1") )
        __debugbreak();
      v7 = v1 - string;
      while ( 1 )
      {
        v8 = (unsigned __int8)v6[v7];
        v9 = v5;
        v10 = *(unsigned __int8 *)v6++;
        --v5;
        if ( !v9 )
          return v2;
        if ( v8 != v10 )
        {
          v11 = v8 + 32;
          if ( (unsigned int)(v8 - 65) > 0x19 )
            v11 = v8;
          v8 = v11;
          v12 = v10 + 32;
          if ( (unsigned int)(v10 - 65) > 0x19 )
            v12 = v10;
          if ( v8 != v12 )
            break;
        }
        if ( !v8 )
          return v2;
      }
      v1 = BOT_STR_ZONE_COUNT[++v4];
      ++v2;
    }
    while ( v1 );
  }
  return 5i64;
}

/*
==============
Bot_GrenadeGoodEnemyCheck
==============
*/
__int64 Bot_GrenadeGoodEnemyCheck(bot_data_t *botData, const Weapon *grenadeWeap, vec3_t *victimPosOut)
{
  gentity_s *v8; 
  playerState_s *playerState; 
  playerState_s *EntityPlayerState; 
  PlayerHandIndex WeaponHandForViewWeapon; 
  int HasUnderBarrelGLAmmo; 
  bool v14; 
  unsigned int v18; 
  unsigned int v19; 
  unsigned int v20; 
  int v33; 
  int v34; 
  __int64 v46; 
  int CanFireOnEnemy; 
  playerState_s *ps; 
  BOOL v52; 
  int v53; 
  Weapon *weapon; 
  gentity_s *results; 
  bitarray<224> result; 
  vec3_t predictedPositionOut; 

  *(_QWORD *)predictedPositionOut.v = grenadeWeap;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19147, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19148, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState )", (const char *)&queryFormat, "botData->botInfo.playerState") )
    __debugbreak();
  __asm
  {
    vmovaps [rsp+120h+var_40], xmm6
    vmovaps [rsp+120h+var_50], xmm7
    vmovaps [rsp+120h+var_60], xmm8
  }
  if ( Bot_CanReactEnemy(botData) )
  {
    v8 = EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) ? EntHandle::ent(&botData->botInfo.sentient->targetEnt) : 0i64;
    if ( v8 && !Bot_EntityIsConsideredDead(v8) )
    {
      if ( !v8->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19159, ASSERT_TYPE_ASSERT, "( enemy->sentient )", (const char *)&queryFormat, "enemy->sentient") )
        __debugbreak();
      playerState = botData->botInfo.playerState;
      ps = playerState;
      EntityPlayerState = G_GetEntityPlayerState(v8);
      WeaponHandForViewWeapon = Bot_Weap_GetWeaponHandForViewWeapon(playerState);
      weapon = (Weapon *)Bot_Weap_GetViewmodelWeapon(playerState);
      v53 = Bot_EntityUsingRiotShield(v8, 1);
      v52 = Bot_Weap_AmmoInClip(playerState, weapon, WeaponHandForViewWeapon) > 0;
      HasUnderBarrelGLAmmo = Bot_Weap_HasUnderBarrelGLAmmo(playerState);
      _RBX = NULL;
      CanFireOnEnemy = Bot_CanSeeAndCanFireOnEnemy(botData);
      if ( !Sentient_IsAerial(v8->sentient) && !Bot_IsHardwareEnt(v8) )
      {
        if ( EntityPlayerState )
        {
          if ( !v8->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19189, ASSERT_TYPE_ASSERT, "( enemy->sentient )", (const char *)&queryFormat, "enemy->sentient") )
            __debugbreak();
          if ( level.teammode == TEAMMODE_FFA )
          {
            v14 = Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80);
            if ( Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) )
              _RAX = Com_TeamsSP_GetAllCombatTeamFlags();
            else
              _RAX = Com_TeamsMP_GetAllTeamFlags();
            __asm
            {
              vmovups xmm0, xmmword ptr [rax]
              vmovsd  xmm1, qword ptr [rax+10h]
            }
            v18 = _RAX->array[6] & 0xFFEFFFFF;
            __asm { vmovups xmmword ptr [rbp+20h+result.array], xmm0 }
            v19 = result.array[0];
            __asm { vmovsd  qword ptr [rbp+20h+result.array+10h], xmm1 }
            if ( v14 )
              v19 = result.array[0] & 0xF7FFFFFF;
            v20 = v18 & 0xFF9FFFFF;
          }
          else
          {
            Com_Teams_GetEnemyTeamFlags(&result, v8->sentient->eTeam);
            v20 = result.array[6];
            v19 = result.array[0];
          }
          result.array[1] = ~result.array[1];
          result.array[2] = ~result.array[2];
          result.array[3] = ~result.array[3];
          result.array[4] = ~result.array[4];
          result.array[5] = ~result.array[5];
          result.array[6] = ~v20;
          result.array[0] = ~v19;
          __asm { vxorps  xmm2, xmm2, xmm2; maxDist }
          if ( Bot_GetClosestCharacterList(v8, &v8->r.currentOrigin, *(const float *)&_XMM2, 0, 0, 1, 0, &result, &results, 1) == 1 )
          {
            _RBX = results;
            if ( results )
            {
              __asm
              {
                vmovss  xmm0, dword ptr [rbx+130h]
                vsubss  xmm3, xmm0, dword ptr [rsi+130h]
                vmovss  xmm1, dword ptr [rbx+134h]
                vmovss  xmm0, dword ptr [rbx+138h]
                vsubss  xmm2, xmm1, dword ptr [rsi+134h]
                vsubss  xmm4, xmm0, dword ptr [rsi+138h]
                vmulss  xmm2, xmm2, xmm2
                vmulss  xmm1, xmm3, xmm3
                vmulss  xmm0, xmm4, xmm4
                vaddss  xmm3, xmm2, xmm1
                vaddss  xmm4, xmm3, xmm0
                vcomiss xmm4, cs:__real@47800000
              }
              _RBX = NULL;
            }
          }
          else
          {
            _RBX = NULL;
          }
        }
        if ( !v52 || !Bot_IsFireFromHipRange(botData) || HasUnderBarrelGLAmmo || Dvar_GetBool_Internal_DebugName(DVARBOOL_bot_ForceGrenadeThrow, "bot_ForceGrenadeThrow") )
        {
          v33 = Bot_EnemyFacesBot(botData);
          if ( _RBX )
          {
            if ( !_RBX->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19207, ASSERT_TYPE_ASSERT, "( closestAllyOfEnemy->sentient )", (const char *)&queryFormat, "closestAllyOfEnemy->sentient") )
              __debugbreak();
            v34 = Bot_RecentSeeSentient(botData, _RBX->sentient, 1000);
            v33 = v33 || v34 && Bot_EntityFacesBot(botData, _RBX);
          }
          if ( EntityPlayerState && v53 && GameModeFlagContainer<enum EntityStateFlagsCommon,enum EntityStateFlagsSP,enum EntityStateFlagsMP,32>::TestFlagInternal(&EntityPlayerState->eFlags, ACTIVE, 3u) && CanFireOnEnemy || !v33 || Bot_ShouldForceGrenadeThrow(botData, v33) || Bot_Weap_ProjectileDirectTarget(botData->botInfo.ent, ps, *(const Weapon **)predictedPositionOut.v) )
          {
            if ( (unsigned int)Bot_GetPredictedEntityPosition(botData, v8, &predictedPositionOut) )
            {
              __asm
              {
                vmovss  xmm7, dword ptr [rbp+20h+predictedPositionOut+4]
                vmovss  xmm6, dword ptr [rbp+20h+predictedPositionOut]
                vmovss  xmm8, dword ptr [rbp+20h+predictedPositionOut+8]
                vsubss  xmm0, xmm7, dword ptr [rax+134h]
                vsubss  xmm2, xmm6, dword ptr [rax+130h]
                vsubss  xmm3, xmm8, dword ptr [rax+138h]
                vmulss  xmm1, xmm0, xmm0
                vmulss  xmm0, xmm2, xmm2
                vaddss  xmm2, xmm1, xmm0
                vmulss  xmm1, xmm3, xmm3
                vaddss  xmm2, xmm2, xmm1
                vcomiss xmm2, cs:__real@4a742400
              }
            }
          }
        }
      }
    }
  }
  v46 = 0i64;
  __asm
  {
    vmovaps xmm8, [rsp+120h+var_60]
    vmovaps xmm7, [rsp+120h+var_50]
    vmovaps xmm6, [rsp+120h+var_40]
  }
  return v46;
}

/*
==============
Bot_GrenadeGoodTargetCheck
==============
*/
__int64 Bot_GrenadeGoodTargetCheck(bot_data_t *botData, const Weapon *grenadeWeap, const vec3_t *victimPos)
{
  const gentity_s *ent; 
  unsigned __int16 v13; 
  AIBotInterface *m_pAI; 
  const playerState_s *playerState; 
  const gentity_s *v16; 
  int v17; 
  int v23; 
  __int64 v24; 
  unsigned __int16 v25; 
  pathnode_t *v29; 
  AIBotInterface_vtbl *v30; 
  int CanSeePoint; 
  int nodesPicked; 
  AIBotWrapper v69; 
  vec3_t pos; 
  int v71[4]; 
  bot_score_parms_s parms; 
  bot_score_item_s objects[256]; 
  pathsort_s nodes[256]; 

  _R15 = victimPos;
  _RSI = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19314, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !_RSI->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19315, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !_RSI->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19316, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
    __debugbreak();
  AICommonInterface::AICommonInterface(&v69.m_botInterface);
  v69.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v69.m_botAgentInterface);
  ent = _RSI->botInfo.ent;
  v13 = 0;
  v69.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v69.m_pAI = NULL;
  AIBotWrapper::Setup(&v69, ent);
  m_pAI = v69.m_pAI;
  if ( !v69.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19326, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  playerState = _RSI->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19329, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  if ( level.time < _RSI->botInfo.grenadeCheckTime )
    return 0i64;
  v16 = _RSI->botInfo.ent;
  _RSI->botInfo.grenadeCheckTime = level.time + 500;
  v17 = Bot_Weap_ProjectileDirectTarget(v16, playerState, grenadeWeap);
  __asm
  {
    vmovss  xmm0, dword ptr [r15]
    vmovss  xmm1, dword ptr [r15+4]
    vmovss  xmm2, dword ptr [r15+8]
    vmovss  dword ptr [rbp+1870h+pos], xmm0
    vmovss  dword ptr [rbp+1870h+pos+4], xmm1
    vmovss  dword ptr [rbp+1870h+pos+8], xmm2
  }
  if ( !v17 )
  {
    __asm
    {
      vmovss  xmm3, cs:__real@42a00000; maxHeight
      vmovss  xmm2, cs:__real@43fa0000; maxDist
    }
    v23 = Path_NodesInCylinder(_R15, NULL, *(float *)&_XMM2, *(float *)&_XMM3, nodes, 256, -510656514);
    if ( v23 <= 0 )
      return 0i64;
    do
    {
      v24 = v13;
      v25 = Path_ConvertNodeToIndex(nodes[v13++].node);
      objects[v24].object = v25;
    }
    while ( v13 < v23 );
    Bot_Score_ScoreNodesInitParms(_RSI, &parms, BOT_SCORE_NODE_GRENADE_TARGET);
    __asm
    {
      vmovss  xmm0, dword ptr [r15]
      vmovss  xmm1, dword ptr [r15+4]
      vmovss  dword ptr [rbp+1870h+parms.vector1], xmm0
      vmovss  xmm0, dword ptr [r15+8]
      vmovss  dword ptr [rbp+1870h+parms.vector1+8], xmm0
      vmovss  dword ptr [rbp+1870h+parms.vector1+4], xmm1
    }
    if ( Bot_Score_ScoreNodesPick(_RSI, objects, v23, 1, &parms, 1, &nodesPicked) != 1 )
      return 0i64;
    v29 = Path_ConvertIndexToNode(nodesPicked);
    if ( !v29 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19065, ASSERT_TYPE_ASSERT, "( nodePicked )", (const char *)&queryFormat, "nodePicked") )
      __debugbreak();
    pathnode_t::GetPos(v29, &pos);
  }
  v30 = m_pAI->__vftable;
  __asm
  {
    vmovaps [rsp+1970h+var_40], xmm6
    vmovaps [rsp+1970h+var_50], xmm7
    vmovaps [rsp+1970h+var_60], xmm8
    vmovaps [rsp+1970h+var_70], xmm9
    vmovaps [rsp+1970h+var_80], xmm10
    vmovaps [rsp+1970h+var_90], xmm11
  }
  v30->GetEyePosition(m_pAI, (vec3_t *)v71);
  __asm
  {
    vmovss  xmm0, [rbp+1870h+var_18E0]
    vsubss  xmm6, xmm0, dword ptr [rbp+1870h+pos]
    vmovss  xmm1, [rbp+1870h+var_18DC]
    vsubss  xmm7, xmm1, dword ptr [rbp+1870h+pos+4]
    vmovss  xmm0, [rbp+1870h+var_18D8]
    vsubss  xmm8, xmm0, dword ptr [rbp+1870h+pos+8]
    vmulss  xmm0, xmm8, xmm8
    vmulss  xmm2, xmm7, xmm7
    vmulss  xmm1, xmm6, xmm6
    vaddss  xmm3, xmm2, xmm1
    vmovss  xmm1, cs:__real@3f800000
    vaddss  xmm2, xmm3, xmm0
    vmovss  xmm3, cs:__real@41f00000
    vsqrtss xmm4, xmm2, xmm2
    vcmpless xmm0, xmm4, cs:__real@80000000
    vblendvps xmm0, xmm4, xmm1, xmm0
    vdivss  xmm5, xmm1, xmm0
    vmulss  xmm1, xmm6, xmm5
    vmulss  xmm0, xmm1, xmm3
    vaddss  xmm1, xmm0, dword ptr [rbp+1870h+pos]
    vmulss  xmm2, xmm7, xmm5
    vmulss  xmm0, xmm2, xmm3
    vmovss  dword ptr [rbp+1870h+pos], xmm1
    vaddss  xmm1, xmm0, dword ptr [rbp+1870h+pos+4]
    vmulss  xmm2, xmm8, xmm5
    vmulss  xmm0, xmm2, xmm3
    vmovss  dword ptr [rbp+1870h+pos+4], xmm1
    vaddss  xmm1, xmm0, dword ptr [rbp+1870h+pos+8]
    vmovss  dword ptr [rbp+1870h+pos+8], xmm1
  }
  CanSeePoint = AICommonInterface::CanSeePoint(m_pAI, &pos);
  __asm
  {
    vmovaps xmm11, [rsp+1970h+var_90]
    vmovaps xmm10, [rsp+1970h+var_80]
    vmovaps xmm9, [rsp+1970h+var_70]
    vmovaps xmm8, [rsp+1970h+var_60]
    vmovaps xmm7, [rsp+1970h+var_50]
    vmovaps xmm6, [rsp+1970h+var_40]
  }
  if ( CanSeePoint )
  {
    __asm
    {
      vmovss  xmm0, dword ptr [rbp+1870h+pos]
      vmovss  xmm1, dword ptr [rbp+1870h+pos+4]
      vmovss  dword ptr [rsi+6DD8h], xmm0
      vmovss  xmm0, dword ptr [rbp+1870h+pos+8]
      vmovss  dword ptr [rsi+6DE0h], xmm0
      vmovss  dword ptr [rsi+6DDCh], xmm1
    }
    return 1i64;
  }
  return 0i64;
}

/*
==============
Bot_GrenadeReleaseTime
==============
*/
__int64 Bot_GrenadeReleaseTime(bot_data_t *botData)
{
  const playerState_s *playerState; 
  const gentity_s *v4; 
  int v5; 
  int time; 
  bool v7; 
  int CookingGrenadeFuseMax; 
  int grenadeStartTime; 
  int grenadeHangTime; 
  __int64 result; 

  _RBX = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21589, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  playerState = _RBX->botInfo.playerState;
  if ( !EntHandle::isDefined(&_RBX->botInfo.sentient->targetEnt) || (v4 = EntHandle::ent(&_RBX->botInfo.sentient->targetEnt)) == NULL || (v5 = 1, !Bot_EntityUsingRiotShield(v4, 1)) )
    v5 = 0;
  time = level.time;
  if ( !Bot_CanSeeEnemy(_RBX) || !Bot_EnemyFacesBot(_RBX) || v5 )
  {
    if ( Bot_IsThrowingGrenade(_RBX) )
    {
      if ( !Bot_Weap_IsNone(&_RBX->botInfo.grenadeWeap) )
      {
        if ( Bot_Weap_IsCookable(playerState, &_RBX->botInfo.grenadeWeap) )
        {
          v7 = BG_UsingAlternate(playerState);
          CookingGrenadeFuseMax = BG_GetCookingGrenadeFuseMax(&_RBX->botInfo.grenadeWeap, v7, playerState);
          grenadeStartTime = _RBX->botInfo.grenadeStartTime;
          if ( grenadeStartTime > 0 )
          {
            __asm
            {
              vmovss  xmm1, dword ptr [rbx+8014h]
              vxorps  xmm0, xmm0, xmm0
              vcomiss xmm1, xmm0
            }
            grenadeHangTime = _RBX->botInfo.grenadeHangTime;
            if ( grenadeHangTime > 0 )
            {
              __asm { vcvttss2si ecx, xmm1 }
              time = CookingGrenadeFuseMax + grenadeStartTime - _ECX - grenadeHangTime;
            }
          }
        }
      }
    }
  }
  result = (unsigned int)_RBX->botInfo.weaponDelayForOffhand;
  if ( time > (int)result )
    return (unsigned int)time;
  return result;
}

/*
==============
Bot_GrenadeTraceCalculatePitch
==============
*/
__int64 Bot_GrenadeTraceCalculatePitch(bot_data_t *botData, int initialCheck)
{
  bool v14; 
  const sentient_s *sentient; 
  __int64 v41; 
  __int64 result; 
  int v103; 
  int v104; 
  vec3_t v105; 
  vec3_t v106; 
  vec3_t v107; 
  vec3_t forward; 
  vec3_t vEyePosOut; 
  vec3_t angles; 
  vec3_t v111; 
  Bounds v112; 
  float v113; 
  float v114; 

  _RBX = botData;
  if ( Com_GameMode_SupportsFeature(WEAPON_SPRINT_RAISE) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19468, ASSERT_TYPE_ASSERT, "( !Com_GameMode_SupportsFeature( Com_GameMode_Feature::GRAVITY_CHANGE_ALLOWED ) )", (const char *)&queryFormat, "!Com_GameMode_SupportsFeature( Com_GameMode_Feature::GRAVITY_CHANGE_ALLOWED )") )
    __debugbreak();
  if ( !_RBX && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19475, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !_RBX->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19476, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !_RBX->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19477, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
    __debugbreak();
  if ( !_RBX->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19478, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState )", (const char *)&queryFormat, "botData->botInfo.playerState") )
    __debugbreak();
  v14 = (*((_BYTE *)&_RBX->scriptedAgentInfo + 28228) & 2) == 0;
  __asm
  {
    vmovaps [rsp+1A0h+var_20], xmm6
    vmovaps [rsp+1A0h+var_30], xmm7
    vmovaps [rsp+1A0h+var_40], xmm8
    vmovaps [rsp+1A0h+var_50], xmm9
    vmovaps [rsp+1A0h+var_60], xmm10
    vmovaps [rsp+1A0h+var_70], xmm11
    vmovaps [rsp+1A0h+var_80], xmm12
    vmovaps [rsp+1A0h+var_90], xmm13
    vmovaps [rsp+1A0h+var_A0], xmm14
    vmovaps [rsp+1A0h+var_B0], xmm15
  }
  if ( !v14 )
  {
    __asm
    {
      vmovss  xmm0, dword ptr [rbx+6DD8h]
      vmovss  xmm1, dword ptr [rbx+6DDCh]
      vsubss  xmm3, xmm0, dword ptr [rax+130h]
      vsubss  xmm2, xmm1, dword ptr [rax+134h]
      vmovss  xmm0, dword ptr [rbx+6DE0h]
      vsubss  xmm4, xmm0, dword ptr [rax+138h]
      vmulss  xmm2, xmm2, xmm2
      vmulss  xmm1, xmm3, xmm3
      vmulss  xmm0, xmm4, xmm4
      vaddss  xmm3, xmm2, xmm1
      vaddss  xmm4, xmm3, xmm0
      vcomiss xmm4, cs:__real@461c4000
    }
  }
  if ( !Bot_Weap_IsThrowable(_RBX->botInfo.playerState, &_RBX->botInfo.grenadeWeap) )
  {
    _RBX->botInfo.grenadeFlags |= 8u;
LABEL_31:
    _RBX->botInfo.grenadeHangTime = -1;
    _RBX->botInfo.grenadePitch = 0.0;
    goto LABEL_32;
  }
  if ( level.time - _RBX->botInfo.grenadePitchLastCheck <= 350 )
  {
LABEL_32:
    result = ((unsigned int)_RBX->botInfo.grenadeFlags >> 3) & 1;
    goto LABEL_33;
  }
  _RBX->botInfo.grenadePitchLastCheck = level.time;
  sentient = _RBX->botInfo.sentient;
  _RBX->botInfo.grenadeHangTime = -1;
  Sentient_GetEyePosition(sentient, &vEyePosOut);
  _RCX = (char *)&_RBX->scriptedAgentInfo + 28140;
  __asm
  {
    vmovss  xmm0, dword ptr [rcx]
    vmovss  xmm2, dword ptr [rcx+4]
    vmovss  xmm3, dword ptr [rcx+8]
    vmulss  xmm1, xmm0, xmm0
    vmulss  xmm0, xmm2, xmm2
    vaddss  xmm2, xmm1, xmm0
    vmulss  xmm1, xmm3, xmm3
    vaddss  xmm2, xmm2, xmm1
    vsqrtss xmm15, xmm2, xmm2
  }
  vectoangles(&_RBX->botInfo.grenadeLaunchVel, &angles);
  __asm
  {
    vmovaps xmm0, cs:__xmm@3fc000003fc000003fc000003fc00000
    vmovss  xmm9, dword ptr cs:__xmm@7fffffff7fffffff7fffffff7fffffff
    vmovss  xmm10, cs:__real@3f800000
    vxorps  xmm11, xmm11, xmm11
    vmovups [rbp+0A0h+var_E8], xmm0
    vmovss  [rbp+0A0h+var_F0], xmm11
    vmovss  [rbp+0A0h+var_EC], xmm11
  }
  v41 = 0i64;
  while ( 1 )
  {
    __asm
    {
      vmovss  xmm1, dword ptr [rbx+6E40h]
      vmulss  xmm2, xmm1, dword ptr [r15+rdi*4]
    }
    if ( v41 > 0 )
    {
      __asm
      {
        vandps  xmm0, xmm2, xmm9
        vcomiss xmm0, xmm10
      }
    }
    __asm
    {
      vmovss  xmm0, dword ptr [rbp+0A0h+angles+4]
      vaddss  xmm14, xmm1, xmm2
      vmovss  xmm1, dword ptr [rbp+0A0h+angles+8]
      vaddss  xmm2, xmm2, dword ptr [rbp+0A0h+angles]
      vmovss  dword ptr [rbp+0A0h+var_100+8], xmm1
      vmovss  dword ptr [rbp+0A0h+var_100], xmm2
      vmovss  dword ptr [rbp+0A0h+var_100+4], xmm0
    }
    AngleVectors(&v111, &forward, NULL, NULL);
    __asm
    {
      vmulss  xmm2, xmm15, dword ptr [rsp+1A0h+forward+8]
      vmulss  xmm0, xmm2, cs:__real@3aa3d70a
      vmulss  xmm1, xmm15, dword ptr [rsp+1A0h+forward]
      vmulss  xmm4, xmm15, dword ptr [rsp+1A0h+forward+4]
      vmovss  xmm8, dword ptr [rbp+0A0h+vEyePosOut]
      vmovss  xmm7, dword ptr [rbp+0A0h+vEyePosOut+4]
      vmovss  xmm13, dword ptr [rbx+6DE0h]
      vmaxss  xmm3, xmm0, xmm11
      vmovss  dword ptr [rsp+1A0h+forward], xmm1
      vmulss  xmm1, xmm1, xmm3
      vmulss  xmm0, xmm4, xmm3
      vaddss  xmm5, xmm0, xmm7
      vaddss  xmm6, xmm1, xmm8
      vmulss  xmm1, xmm2, xmm3
      vmulss  xmm0, xmm3, xmm3
      vmovss  dword ptr [rsp+1A0h+forward+8], xmm2
      vmovss  dword ptr [rsp+1A0h+forward+4], xmm4
      vmovss  xmm4, dword ptr [rbp+0A0h+vEyePosOut+8]
      vaddss  xmm2, xmm1, xmm4
      vmulss  xmm1, xmm0, cs:__real@43c80000
      vmovss  xmm0, dword ptr [rbx+6DDCh]
      vsubss  xmm2, xmm2, xmm1
      vmovss  xmm1, dword ptr [rbx+6DD8h]
      vunpcklps xmm0, xmm1, xmm0
      vmovsd  [rsp+1A0h+var_160], xmm0
      vunpcklps xmm0, xmm6, xmm5
      vsubss  xmm3, xmm2, xmm4
      vaddss  xmm12, xmm3, xmm4
      vmovsd  [rsp+1A0h+var_150], xmm0
      vunpcklps xmm0, xmm8, xmm7
      vmovss  [rbp+0A0h+var_D0], xmm13
    }
    v105.v[2] = v113;
    __asm { vmovss  [rbp+0A0h+var_C0], xmm12 }
    v106.v[2] = v114;
    v107.v[2] = vEyePosOut.v[2];
    __asm
    {
      vmovsd  qword ptr [rbp+0A0h+vEyePosOut], xmm0
      vmovsd  [rsp+1A0h+var_140], xmm0
    }
    if ( (unsigned int)Bot_DoGrenadeTrace(_RBX, &v107, &v106, &v105, &v112, initialCheck) )
      break;
    if ( ++v41 >= 5 )
    {
      _RBX->botInfo.grenadeFlags &= ~8u;
      goto LABEL_31;
    }
  }
  __asm
  {
    vmovss  xmm6, dword ptr [rsp+1A0h+forward+8]
    vmovss  xmm5, cs:__real@baa3d70a
    vmovss  xmm0, dword ptr [rbp+0A0h+vEyePosOut+8]
  }
  _RBX->botInfo.grenadeFlags |= 8u;
  __asm
  {
    vmulss  xmm3, xmm6, xmm6
    vminss  xmm1, xmm13, xmm12
    vsubss  xmm1, xmm0, xmm1
    vmulss  xmm2, xmm1, cs:__real@c4c80000
    vsubss  xmm3, xmm3, xmm2
    vsqrtss xmm4, xmm3, xmm3
    vmulss  xmm1, xmm4, xmm5
    vmulss  xmm0, xmm6, xmm5
    vsubss  xmm3, xmm1, xmm0
    vxorps  xmm1, xmm6, cs:__xmm@80000000800000008000000080000000
    vmovss  [rsp+1A0h+var_170], xmm3
    vsubss  xmm2, xmm1, xmm4
    vmovss  dword ptr [rbx+6E3Ch], xmm14
    vmulss  xmm0, xmm2, xmm5
  }
  if ( (v103 & 0x7F800000) != 2139095040 )
  {
    __asm { vmovss  [rsp+1A0h+var_170], xmm0 }
    if ( (v104 & 0x7F800000) != 2139095040 )
    {
      __asm
      {
        vmaxss  xmm0, xmm0, xmm3
        vmulss  xmm1, xmm0, cs:__real@447a0000
        vcvttss2si eax, xmm1
      }
      _RBX->botInfo.grenadeHangTime = _EAX;
    }
  }
  result = 1i64;
LABEL_33:
  __asm
  {
    vmovaps xmm15, [rsp+1A0h+var_B0]
    vmovaps xmm14, [rsp+1A0h+var_A0]
    vmovaps xmm13, [rsp+1A0h+var_90]
    vmovaps xmm12, [rsp+1A0h+var_80]
    vmovaps xmm11, [rsp+1A0h+var_70]
    vmovaps xmm10, [rsp+1A0h+var_60]
    vmovaps xmm9, [rsp+1A0h+var_50]
    vmovaps xmm8, [rsp+1A0h+var_40]
    vmovaps xmm7, [rsp+1A0h+var_30]
    vmovaps xmm6, [rsp+1A0h+var_20]
  }
  return result;
}

/*
==============
Bot_GrenadesAllowed
==============
*/
__int64 Bot_GrenadesAllowed(const bot_data_t *botData)
{
  const dvar_t *v2; 
  int v3; 
  unsigned int v4; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9062, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v2 = DVARBOOL_bot_DisableGrenadeThrow;
  v3 = botData->botMatchData.flags & 1;
  if ( !DVARBOOL_bot_DisableGrenadeThrow && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 692, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DisableGrenadeThrow") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v2);
  v4 = 0;
  if ( !v2->current.enabled )
    v4 = v3;
  if ( GameModeFlagContainer<enum PWeaponFlagsCommon,enum PWeaponFlagsSP,enum PWeaponFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->weapCommon.weapFlags, ACTIVE, 0xFu) )
  {
    v4 = 0;
  }
  else if ( v4 )
  {
    return v4;
  }
  if ( Bot_Weap_HasOnlyUnderbarrelGL(botData) )
    return 1;
  return v4;
}

/*
==============
Bot_HasDebugSuffixInName
==============
*/
_BOOL8 Bot_HasDebugSuffixInName(const char *name)
{
  if ( !name && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3441, ASSERT_TYPE_ASSERT, "( name )", (const char *)&queryFormat, &stru_143C9A1A4) )
    __debugbreak();
  return I_strstr(name, " [") != NULL;
}

/*
==============
Bot_HasLOSToHighAerialEnemy
==============
*/
__int64 Bot_HasLOSToHighAerialEnemy(const bot_data_t *botData, const gentity_s *enemy)
{
  signed __int64 v4; 
  char *v5; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10262, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !enemy && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10263, ASSERT_TYPE_ASSERT, "( enemy )", (const char *)&queryFormat, "enemy") )
    __debugbreak();
  if ( !enemy->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10264, ASSERT_TYPE_ASSERT, "( enemy->sentient )", (const char *)&queryFormat, "enemy->sentient") )
    __debugbreak();
  if ( !Bot_IsHighAerialSentient(enemy->sentient) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10265, ASSERT_TYPE_ASSERT, "( Bot_IsHighAerialSentient( enemy->sentient ) )", (const char *)&queryFormat, "Bot_IsHighAerialSentient( enemy->sentient )") )
    __debugbreak();
  v4 = 60 * (enemy->sentient - level.sentients);
  v5 = (char *)&botData->scriptedAgentInfo + v4 + 11644;
  if ( (const bot_data_t *)((char *)botData + v4) == (const bot_data_t *)-11652i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10268, ASSERT_TYPE_ASSERT, "( botSentInfo )", (const char *)&queryFormat, "botSentInfo") )
    __debugbreak();
  return (*((_DWORD *)v5 + 14) >> 1) & 1;
}

/*
==============
Bot_HasNavigator
==============
*/
_BOOL8 Bot_HasNavigator(const bot_info_t *botInfo)
{
  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13922, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  return botInfo->pNavigator != NULL;
}

/*
==============
Bot_HasRemoteEyes
==============
*/
_BOOL8 Bot_HasRemoteEyes(const bot_data_t *botData)
{
  __int16 RemoteEyesEntNum; 
  int v3; 
  __int64 v5; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5248, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !GameModeFlagContainer<enum POtherFlagsCommon,enum POtherFlagsSP,enum POtherFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->otherFlags, ACTIVE, 1u) )
    return 0i64;
  RemoteEyesEntNum = Bot_GetRemoteEyesEntNum(botData);
  if ( RemoteEyesEntNum == 2047 )
    return 0i64;
  v3 = RemoteEyesEntNum;
  if ( (unsigned int)RemoteEyesEntNum >= 0x800 )
  {
    LODWORD(v5) = RemoteEyesEntNum;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5255, ASSERT_TYPE_ASSERT, "(unsigned)( remoteEyesEntNum ) < (unsigned)( ( 2048 ) )", "remoteEyesEntNum doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v5, 2048) )
      __debugbreak();
  }
  return G_IsEntityInUse(v3) != 0;
}

/*
==============
Bot_HasScriptGoal
==============
*/
_BOOL8 Bot_HasScriptGoal(const bot_data_t *botData)
{
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23600, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  return botData->botInfo.scriptGoal.type != BOT_SCR_GOAL_NONE;
}

/*
==============
Bot_HideFromEntity
==============
*/

void __fastcall Bot_HideFromEntity(bot_data_t *botData, const gentity_s *entity, double hideRange, int duration)
{
  signed __int64 v10; 
  bool v11; 
  bool v12; 
  __int64 v16; 
  double v17; 
  __int64 v18; 
  double v19; 

  __asm { vmovaps [rsp+68h+var_28], xmm6 }
  _RBX = botData;
  __asm { vmovaps xmm6, xmm2 }
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6838, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !entity && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6839, ASSERT_TYPE_ASSERT, "( entity )", (const char *)&queryFormat, "entity") )
    __debugbreak();
  if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 196, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
    __debugbreak();
  v10 = entity - g_entities;
  if ( (unsigned int)v10 >= 0x800 )
  {
    LODWORD(v16) = entity - g_entities;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 199, ASSERT_TYPE_ASSERT, "(unsigned)( index ) < (unsigned)( ( 2048 ) )", "index doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v16, 2048) )
      __debugbreak();
  }
  v10 = (__int16)v10;
  if ( (unsigned int)(__int16)v10 >= 0x800 )
  {
    LODWORD(v18) = 2048;
    LODWORD(v16) = v10;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 207, ASSERT_TYPE_ASSERT, "(unsigned)( entityIndex ) < (unsigned)( ( 2048 ) )", "entityIndex doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v16, v18) )
      __debugbreak();
  }
  if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 208, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
    __debugbreak();
  if ( g_entities[v10].r.isInUse != g_entityIsInUse[v10] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 209, ASSERT_TYPE_ASSERT, "( g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex] )", (const char *)&queryFormat, "g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex]") )
    __debugbreak();
  v11 = g_entityIsInUse[v10] == 0;
  if ( !g_entityIsInUse[v10] )
  {
    v12 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6840, ASSERT_TYPE_ASSERT, "( G_IsEntityInUse( G_GetEntityIndex( entity ) ) )", (const char *)&queryFormat, "G_IsEntityInUse( G_GetEntityIndex( entity ) )");
    v11 = !v12;
    if ( v12 )
      __debugbreak();
  }
  __asm
  {
    vxorps  xmm0, xmm0, xmm0
    vcomiss xmm6, xmm0
  }
  if ( v11 )
  {
    __asm
    {
      vmovsd  [rsp+68h+var_38], xmm0
      vcvtss2sd xmm1, xmm6, xmm6
      vmovsd  [rsp+68h+var_40], xmm1
    }
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6841, ASSERT_TYPE_ASSERT, "( hideRange ) > ( 0 )", "hideRange > 0\n\t%g, %g", v17, v19) )
      __debugbreak();
  }
  if ( duration <= 0 )
  {
    LODWORD(v16) = duration;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6842, ASSERT_TYPE_ASSERT, "( duration ) > ( 0 )", "duration > 0\n\t%i, %i", v16, 0i64) )
      __debugbreak();
  }
  if ( SV_BotRequirePathnodes(_RBX) )
  {
    _RBX->botInfo.hideFromEntNum = entity->s.number;
    __asm { vmovss  dword ptr [rbx+2E0h], xmm6 }
    _RBX->botInfo.hideFromTime = duration + level.time;
    *(_QWORD *)&_RBX->scriptedAgentInfo.btGoals[0].pos.z = 0i64;
    _RBX->botInfo.hideFromLastPos.v[2] = 0.0;
  }
  __asm { vmovaps xmm6, [rsp+68h+var_28] }
}

/*
==============
Bot_HudText
==============
*/
void Bot_HudText(int y, const char *string)
{
  vec4_t color; 

  __asm
  {
    vmovups xmm0, cs:__xmm@3f000000000000000000000000000000
    vmovups xmmword ptr [rsp+58h+var_28], xmm0
  }
  CL_DrawRect(48, y - 4, 256, 14, &color);
  CL_DrawString(50, y, string, 0, 10);
}

/*
==============
Bot_InitNavigator
==============
*/
void Bot_InitNavigator(bot_info_t *botInfo)
{
  AINavigator *v2; 
  AINavigator2D *v3; 
  sentient_s *sentient; 
  void (__fastcall *SetObstacleBlockageFlags)(AINavigator *, unsigned int); 
  const bitarray<224> *TeamFlag; 
  unsigned int ObstacleBlockageFlagsFromTeamFlags; 
  bitarray<224> result; 

  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13897, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  v2 = Nav_Create2DNavigator(botInfo->ent, NAV_LAYER_HUMAN);
  botInfo->pNavigator = v2;
  v3 = v2->Get2DNavigator(v2);
  v3->m_MaxDeviationFromPath = 20.0;
  sentient = botInfo->sentient;
  if ( sentient )
  {
    SetObstacleBlockageFlags = v3->SetObstacleBlockageFlags;
    TeamFlag = Com_Teams_GetTeamFlag(&result, sentient->eTeam);
    ObstacleBlockageFlagsFromTeamFlags = Nav_GetObstacleBlockageFlagsFromTeamFlags(TeamFlag);
    SetObstacleBlockageFlags(v3, ObstacleBlockageFlagsFromTeamFlags);
  }
}

/*
==============
Bot_InitializeCmdTime
==============
*/
void Bot_InitializeCmdTime(usercmd_s *cmd)
{
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5486, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  *(_QWORD *)&cmd->serverTime = 0i64;
  cmd->inputTime = 0;
}

/*
==============
Bot_IsAerialEntityInDeathStage
==============
*/
_BOOL8 Bot_IsAerialEntityInDeathStage(const gentity_s *entity)
{
  Vehicle *vehicle; 

  if ( !entity && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7109, ASSERT_TYPE_ASSERT, "( entity )", (const char *)&queryFormat, "entity") )
    __debugbreak();
  if ( !entity->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7110, ASSERT_TYPE_ASSERT, "( entity->sentient )", (const char *)&queryFormat, "entity->sentient") )
    __debugbreak();
  if ( !Sentient_IsAerial(entity->sentient) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7111, ASSERT_TYPE_ASSERT, "( Sentient_IsAerial( entity->sentient ) )", (const char *)&queryFormat, "Sentient_IsAerial( entity->sentient )") )
    __debugbreak();
  vehicle = entity->vehicle;
  return vehicle && vehicle->isMultiStage && vehicle->isDeathStage;
}

/*
==============
Bot_IsAtPathEnd
==============
*/

__int64 __fastcall Bot_IsAtPathEnd(const bot_data_t *botData, double goalRadius)
{
  bool v6; 
  bool v7; 
  __int64 result; 

  __asm { vmovaps [rsp+48h+var_18], xmm6 }
  _RBX = botData;
  __asm { vmovaps xmm6, xmm1 }
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14691, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v6 = _RBX->botInfo.ent == NULL;
  if ( !_RBX->botInfo.ent )
  {
    v7 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14692, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent");
    v6 = !v7;
    if ( v7 )
      __debugbreak();
  }
  __asm
  {
    vxorps  xmm0, xmm0, xmm0
    vucomiss xmm6, xmm0
  }
  if ( v6 )
    __asm { vmovss  xmm6, dword ptr [rbx+24Ch] }
  if ( !Bot_NavPathExists(&_RBX->botInfo) )
    goto LABEL_12;
  __asm { vmovaps xmm1, xmm6; radius }
  if ( Nav_IsAtGoal(_RBX->botInfo.pNavigator, *(float *)&_XMM1) )
    result = 1i64;
  else
LABEL_12:
    result = 0i64;
  __asm { vmovaps xmm6, [rsp+48h+var_18] }
  return result;
}

/*
==============
Bot_IsAwareOfEnemy
==============
*/
_BOOL8 Bot_IsAwareOfEnemy(const bot_data_t *botData)
{
  gentity_s *v2; 
  int awareTime; 
  _BOOL8 result; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16325, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  result = 0;
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
  {
    v2 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
    if ( v2 )
    {
      if ( v2->s.number == botData->botInfo.enemyTrack.lastEnemyEntNum )
      {
        awareTime = botData->botInfo.enemyTrack.awareTime;
        if ( awareTime )
        {
          if ( level.time - awareTime <= 500 )
            return 1;
        }
      }
    }
  }
  return result;
}

/*
==============
Bot_IsBlinded
==============
*/
__int64 Bot_IsBlinded(const bot_data_t *botData)
{
  float visionBlock; 

  _RBX = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13608, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !Bot_GetSensesObstructed(_RBX, &visionBlock, NULL) )
    return 0i64;
  __asm
  {
    vmovss  xmm1, dword ptr [rbx+8020h]
    vxorps  xmm0, xmm0, xmm0
    vcomiss xmm1, xmm0
    vmovss  xmm0, [rsp+38h+visionBlock]
    vcomiss xmm0, xmm1
  }
  return 1i64;
}

/*
==============
Bot_IsBlockedByBreakable
==============
*/

__int64 __fastcall Bot_IsBlockedByBreakable(bot_data_t *botData, double range)
{
  unsigned int v5; 
  __int64 result; 
  vec3_t vEyePosOut; 
  vec3_t forward; 
  vec3_t end; 
  trace_t results; 

  __asm
  {
    vmovaps [rsp+0E8h+var_18], xmm6
    vmovaps xmm6, xmm1
  }
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15644, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15645, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15646, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  v5 = 1;
  Sentient_GetEyePosition(botData->botInfo.sentient, &vEyePosOut);
  AngleVectors(&botData->botInfo.ent->r.currentAngles, &forward, NULL, NULL);
  __asm
  {
    vmulss  xmm1, xmm6, dword ptr [rsp+0E8h+forward]
    vaddss  xmm2, xmm1, dword ptr [rsp+0E8h+vEyePosOut]
    vmulss  xmm1, xmm6, dword ptr [rsp+0E8h+forward+4]
    vmovss  dword ptr [rsp+0E8h+end], xmm2
    vaddss  xmm2, xmm1, dword ptr [rsp+0E8h+vEyePosOut+4]
    vmulss  xmm1, xmm6, dword ptr [rsp+0E8h+forward+8]
    vmovss  dword ptr [rsp+0E8h+end+4], xmm2
    vaddss  xmm2, xmm1, dword ptr [rsp+0E8h+vEyePosOut+8]
    vmovss  dword ptr [rsp+0E8h+end+8], xmm2
  }
  G_Main_TraceCapsule(&results, &vEyePosOut, &end, &bounds_origin, 2047, 16);
  if ( !Com_IsSurfaceTypeBreakableGlass(results.surfaceFlags) )
    v5 = 0;
  if ( Trace_GetEntityHitId(&results) < 0x7FEu )
    v5 = 0;
  if ( !Trace_GetGlassHitId(&results) )
    v5 = 0;
  result = v5;
  __asm { vmovaps xmm6, [rsp+0E8h+var_18] }
  return result;
}

/*
==============
Bot_IsCamping
==============
*/
int Bot_IsCamping(const bot_data_t *botData)
{
  int result; 

  if ( !botData )
  {
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11235, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
      __debugbreak();
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11220, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
      __debugbreak();
  }
  result = Bot_IsIdleAtScriptGoal(botData);
  if ( result )
    return botData->botInfo.scriptGoal.type == BOT_SCR_GOAL_CAMP;
  return result;
}

/*
==============
Bot_IsCharacterActive
==============
*/
int Bot_IsCharacterActive(const gentity_s *ent)
{
  bitarray_base<bitarray<224> > *AllTeamFlags; 
  const SvClientMP *MpClient; 

  if ( !Bot_IsSentientEntityConnected(ent) )
    return 0;
  if ( ent->s.eType == ET_INVISIBLE )
    return 0;
  AllTeamFlags = (bitarray_base<bitarray<224> > *)Com_TeamsMP_GetAllTeamFlags();
  if ( !bitarray_base<bitarray<224>>::testBit(AllTeamFlags, ent->sentient->eTeam) )
    return 0;
  if ( !ent->client )
    return 1;
  MpClient = SV_Client_GetMpClient(ent->s.number);
  return Bot_IsClientActive(MpClient);
}

/*
==============
Bot_IsClientActive
==============
*/
_BOOL8 Bot_IsClientActive(const SvClientMP *cl)
{
  gentity_s *gentity; 
  gclient_s *client; 

  if ( !cl && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 971, ASSERT_TYPE_ASSERT, "( cl )", (const char *)&queryFormat, "cl") )
    __debugbreak();
  if ( !Bot_IsClientConnected(cl) )
    return 0i64;
  gentity = cl->gentity;
  if ( !gentity && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 978, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( !gentity->client && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 979, ASSERT_TYPE_ASSERT, "( ent->client )", (const char *)&queryFormat, "ent->client") )
    __debugbreak();
  client = gentity->client;
  return client->sess.sessionState == SESS_STATE_PLAYING && client->ps.clientNum == gentity->s.number;
}

/*
==============
Bot_IsClientConnected
==============
*/
_BOOL8 Bot_IsClientConnected(const SvClientMP *cl)
{
  unsigned int MpClientIndex; 
  gentity_s *gentity; 

  if ( !cl && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 948, ASSERT_TYPE_ASSERT, "( cl )", (const char *)&queryFormat, "cl") )
    __debugbreak();
  MpClientIndex = SV_Client_GetMpClientIndex(cl);
  if ( SvClient::GetCommonClient(MpClientIndex)->state < CS_ACTIVE )
    return 0i64;
  gentity = cl->gentity;
  if ( !gentity && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 956, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( !gentity->client && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 957, ASSERT_TYPE_ASSERT, "( ent->client )", (const char *)&queryFormat, "ent->client") )
    __debugbreak();
  return gentity->client->sess.connected == CON_CONNECTED;
}

/*
==============
Bot_IsClientSpectatorState
==============
*/
_BOOL8 Bot_IsClientSpectatorState(const SvClientMP *cl)
{
  gentity_s *gentity; 

  if ( !cl && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 996, ASSERT_TYPE_ASSERT, "( cl )", (const char *)&queryFormat, "cl") )
    __debugbreak();
  if ( !Bot_IsClientConnected(cl) )
    return 0i64;
  gentity = cl->gentity;
  if ( !gentity && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1003, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( !gentity->client && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1004, ASSERT_TYPE_ASSERT, "( ent->client )", (const char *)&queryFormat, "ent->client") )
    __debugbreak();
  return gentity->client->sess.sessionState == SESS_STATE_SPECTATOR;
}

/*
==============
Bot_IsControllingRemoteMissile
==============
*/
_BOOL8 Bot_IsControllingRemoteMissile(const bot_data_t *botData)
{
  __int16 remoteControlEnt; 
  gentity_s *v3; 
  __int64 v5; 
  __int64 v6; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5421, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5422, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState )", (const char *)&queryFormat, "botData->botInfo.playerState") )
    __debugbreak();
  if ( !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 0x1Cu) )
    return 0i64;
  remoteControlEnt = botData->botInfo.playerState->remoteControlEnt;
  if ( remoteControlEnt == 2047 )
    return 0i64;
  if ( (unsigned __int16)remoteControlEnt >= 0x800u )
  {
    LODWORD(v5) = remoteControlEnt;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5427, ASSERT_TYPE_ASSERT, "(unsigned)( remoteControlEntNum ) < (unsigned)( ( 2048 ) )", "remoteControlEntNum doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v5, 2048) )
      __debugbreak();
  }
  if ( (unsigned int)remoteControlEnt >= 0x800 )
  {
    LODWORD(v6) = 2048;
    LODWORD(v5) = remoteControlEnt;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 207, ASSERT_TYPE_ASSERT, "(unsigned)( entityIndex ) < (unsigned)( ( 2048 ) )", "entityIndex doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v5, v6) )
      __debugbreak();
  }
  if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 208, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
    __debugbreak();
  if ( g_entities[remoteControlEnt].r.isInUse != g_entityIsInUse[remoteControlEnt] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 209, ASSERT_TYPE_ASSERT, "( g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex] )", (const char *)&queryFormat, "g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex]") )
    __debugbreak();
  if ( !g_entityIsInUse[remoteControlEnt] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5429, ASSERT_TYPE_ASSERT, "( G_IsEntityInUse( remoteControlEntNum ) )", (const char *)&queryFormat, "G_IsEntityInUse( remoteControlEntNum )") )
    __debugbreak();
  v3 = &g_entities[remoteControlEnt];
  if ( !v3 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5431, ASSERT_TYPE_ASSERT, "( remoteControlledEnt )", (const char *)&queryFormat, "remoteControlledEnt") )
    __debugbreak();
  return v3->s.eType == ET_MISSILE && (v3->c.item[0].weapon.attachmentVariationIndices[5] & 0x80u) != 0;
}

/*
==============
Bot_IsDeaf
==============
*/
__int64 Bot_IsDeaf(const bot_data_t *botData)
{
  float hearingBlock; 

  _RBX = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13628, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !Bot_GetSensesObstructed(_RBX, NULL, &hearingBlock) )
    return 0i64;
  __asm
  {
    vmovss  xmm1, dword ptr [rbx+801Ch]
    vxorps  xmm0, xmm0, xmm0
    vcomiss xmm1, xmm0
    vmovss  xmm0, [rsp+38h+hearingBlock]
    vcomiss xmm0, xmm1
  }
  return 1i64;
}

/*
==============
Bot_IsEnemyNearGoal
==============
*/
_BOOL8 Bot_IsEnemyNearGoal(bot_data_t *botData, const gentity_s *enemy)
{
  if ( !enemy && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11163, ASSERT_TYPE_ASSERT, "( enemy )", (const char *)&queryFormat, "enemy") )
    __debugbreak();
  __asm { vmovss  xmm1, cs:__real@43960000; goalRadius }
  return Bot_PointInGoal(botData, *(float *)&_XMM1, &enemy->r.currentOrigin) != 0;
}

/*
==============
Bot_IsEntPositionAlwaysKnown
==============
*/
__int64 Bot_IsEntPositionAlwaysKnown(const ai_common_t *ai, gentity_s *ent)
{
  const playerState_s *EntityPlayerStateConst; 
  const playerState_s *v5; 
  int number; 

  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2099, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( !ent->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2100, ASSERT_TYPE_ASSERT, "( ent->sentient )", (const char *)&queryFormat, "ent->sentient") )
    __debugbreak();
  EntityPlayerStateConst = G_GetEntityPlayerStateConst(ent);
  if ( EntityPlayerStateConst && BG_HasPerk(&EntityPlayerStateConst->perks, 0x2Eu) || Bot_EntityIsJuggernaut(ent) || Sentient_IsAerial(ent->sentient) && !Bot_IsHardwareEnt(ent) )
    return 1i64;
  if ( !ai && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2114, ASSERT_TYPE_ASSERT, "( ai )", (const char *)&queryFormat, "ai") )
    __debugbreak();
  if ( !ai->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2115, ASSERT_TYPE_ASSERT, "( ai->ent )", (const char *)&queryFormat, "ai->ent") )
    __debugbreak();
  v5 = G_GetEntityPlayerStateConst(ai->ent);
  if ( !v5 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2117, ASSERT_TYPE_ASSERT, "( psAI )", (const char *)&queryFormat, "psAI") )
    __debugbreak();
  if ( GameModeFlagContainer<enum POtherFlagsCommon,enum POtherFlagsSP,enum POtherFlagsMP,64>::TestFlagStrict(&v5->otherFlags, FIRING|0x20) && (number = ent->s.number, number < level.maxclients) && bitarray_base<bitarray<224>>::testBit(&v5->sightedEnemyPlayersMask, number) )
    return 1i64;
  else
    return 0i64;
}

/*
==============
Bot_IsFacingEnemy
==============
*/
int Bot_IsFacingEnemy(bot_data_t *botData)
{
  gentity_s *v2; 
  const sentient_s *sentient; 
  vec3_t vEyePosOut; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21343, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
    return 0;
  v2 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
  if ( !v2 )
    return 0;
  sentient = v2->sentient;
  if ( !sentient )
    return 0;
  Sentient_GetHeadPosition(sentient, &vEyePosOut);
  return Bot_IsFacingPosition(botData, &vEyePosOut);
}

/*
==============
Bot_IsFacingPosition
==============
*/
__int64 Bot_IsFacingPosition(bot_data_t *botData, const vec3_t *position)
{
  gentity_s *ent; 
  AIBotInterface *m_pAI; 
  char v56; 
  char v57; 
  __int64 result; 
  AIBotWrapper v74; 
  vec3_t vEyeDir; 
  char v76; 
  void *retaddr; 

  _RAX = &retaddr;
  __asm
  {
    vmovaps xmmword ptr [rax-18h], xmm6
    vmovaps xmmword ptr [rax-28h], xmm7
    vmovaps xmmword ptr [rax-38h], xmm8
    vmovaps xmmword ptr [rax-48h], xmm9
    vmovaps xmmword ptr [rax-58h], xmm10
    vmovaps xmmword ptr [rax-68h], xmm11
    vmovaps xmmword ptr [rax-78h], xmm12
  }
  _RSI = position;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21302, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21314, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  AICommonInterface::AICommonInterface(&v74.m_botInterface);
  v74.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v74.m_botAgentInterface);
  ent = botData->botInfo.ent;
  v74.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v74.m_pAI = NULL;
  AIBotWrapper::Setup(&v74, ent);
  m_pAI = v74.m_pAI;
  if ( !v74.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21316, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  __asm
  {
    vmovss  xmm10, cs:__real@3f800000
    vmovss  xmm0, dword ptr [rsi]
    vmovss  xmm1, dword ptr [rsi+4]
    vsubss  xmm4, xmm0, dword ptr [rax+130h]
    vsubss  xmm5, xmm1, dword ptr [rax+134h]
    vmovss  xmm0, dword ptr [rsi+8]
    vsubss  xmm6, xmm0, dword ptr [rax+138h]
    vmovss  xmm7, cs:__real@80000000
    vmulss  xmm0, xmm6, xmm6
    vmulss  xmm2, xmm5, xmm5
    vmulss  xmm1, xmm4, xmm4
    vaddss  xmm3, xmm2, xmm1
    vaddss  xmm2, xmm3, xmm0
    vsqrtss xmm1, xmm2, xmm2
    vcmpless xmm0, xmm1, xmm7
    vblendvps xmm0, xmm1, xmm10, xmm0
    vdivss  xmm1, xmm10, xmm0
    vmulss  xmm12, xmm4, xmm1
    vmulss  xmm11, xmm5, xmm1
    vmulss  xmm9, xmm6, xmm1
    vmulss  xmm1, xmm11, xmm11
    vmulss  xmm0, xmm12, xmm12
    vaddss  xmm1, xmm1, xmm0
    vsqrtss xmm2, xmm1, xmm1
    vcmpless xmm0, xmm2, xmm7
    vblendvps xmm0, xmm2, xmm10, xmm0
    vdivss  xmm8, xmm10, xmm0
  }
  AICommonInterface::GetEyeDirection(m_pAI, &vEyeDir);
  __asm
  {
    vmovss  xmm3, dword ptr [rsp+0F8h+vEyeDir]
    vmovss  xmm4, dword ptr [rsp+0F8h+vEyeDir+4]
    vmulss  xmm0, xmm3, xmm3
    vmulss  xmm1, xmm4, xmm4
    vaddss  xmm1, xmm1, xmm0
    vsqrtss xmm2, xmm1, xmm1
    vcmpless xmm0, xmm2, xmm7
    vblendvps xmm0, xmm2, xmm10, xmm0
    vdivss  xmm1, xmm10, xmm0
    vmulss  xmm2, xmm3, xmm12
    vmulss  xmm0, xmm4, xmm11
    vmulss  xmm7, xmm3, xmm1
    vaddss  xmm3, xmm2, xmm0
    vmulss  xmm2, xmm9, dword ptr [rsp+0F8h+vEyeDir+8]
    vaddss  xmm9, xmm3, xmm2
    vmulss  xmm6, xmm4, xmm1
  }
  *(double *)&_XMM0 = SV_BotFovDot(&botData->botInfo, NULL);
  __asm
  {
    vmulss  xmm1, xmm11, xmm8
    vmulss  xmm2, xmm12, xmm8
    vmulss  xmm4, xmm1, xmm6
    vmulss  xmm3, xmm2, xmm7
    vaddss  xmm1, xmm4, xmm3
    vcomiss xmm1, xmm0
  }
  if ( v56 | v57 )
    goto LABEL_13;
  __asm
  {
    vsubss  xmm0, xmm0, cs:__real@3dcccccd
    vcomiss xmm9, xmm0
  }
  if ( v56 | v57 )
LABEL_13:
    result = 0i64;
  else
    result = 1i64;
  _R11 = &v76;
  __asm
  {
    vmovaps xmm6, xmmword ptr [r11-10h]
    vmovaps xmm7, xmmword ptr [r11-20h]
    vmovaps xmm8, xmmword ptr [r11-30h]
    vmovaps xmm9, xmmword ptr [r11-40h]
    vmovaps xmm10, xmmword ptr [r11-50h]
    vmovaps xmm11, xmmword ptr [r11-60h]
    vmovaps xmm12, xmmword ptr [r11-70h]
  }
  return result;
}

/*
==============
Bot_IsFireFromHipRange
==============
*/
_BOOL8 Bot_IsFireFromHipRange(const bot_data_t *botData)
{
  int lastFireFromHipRangeTime; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20219, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  lastFireFromHipRangeTime = botData->botInfo.lastFireFromHipRangeTime;
  return lastFireFromHipRangeTime > 0 && level.time - lastFireFromHipRangeTime < 500;
}

/*
==============
Bot_IsFiringWeapon
==============
*/
_BOOL8 Bot_IsFiringWeapon(const bot_data_t *botData, const usercmd_s *cmd)
{
  const Weapon *ViewmodelWeapon; 
  playerState_s *playerState; 
  const Weapon *v6; 
  GWeaponMap *Instance; 
  _BOOL8 result; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11180, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11181, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !botData->botInfo.lastUserCmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11182, ASSERT_TYPE_ASSERT, "( botData->botInfo.lastUserCmd )", (const char *)&queryFormat, "botData->botInfo.lastUserCmd") )
    __debugbreak();
  if ( !botData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11183, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState )", (const char *)&queryFormat, "botData->botInfo.playerState") )
    __debugbreak();
  result = 1;
  if ( (botData->botInfo.lastUserCmd->buttons & 1) == 0 && (cmd->buttons & 1) == 0 )
  {
    ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(botData->botInfo.playerState);
    playerState = botData->botInfo.playerState;
    v6 = ViewmodelWeapon;
    Instance = GWeaponMap::GetInstance();
    if ( !BG_PlayerDualWieldingWeapon(Instance, playerState, v6) || (botData->botInfo.lastUserCmd->buttons & 0x20000) == 0 && (cmd->buttons & 0x20000) == 0 )
      return 0;
  }
  return result;
}

/*
==============
Bot_IsFirstPersonRemoteVehicle
==============
*/
int Bot_IsFirstPersonRemoteVehicle(const bot_data_t *botData)
{
  int result; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5396, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  result = Bot_IsRemoteEyesVehicle(botData);
  if ( result )
    return Bot_GetRemoteVehicleType(botData) == 0;
  return result;
}

/*
==============
Bot_IsForcedFiring
==============
*/
_BOOL8 Bot_IsForcedFiring(const bot_data_t *botData)
{
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11207, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  return botData->botInfo.forceFireTime > level.time;
}

/*
==============
Bot_IsGoalInBadPlace
==============
*/
_BOOL8 Bot_IsGoalInBadPlace(const bot_info_t *botInfo, const bot_goal_t *goal)
{
  pathnode_t *node; 
  unsigned __int64 eTeam; 
  int v9; 
  vec3_t pos; 
  bitarray<224> teamFlags; 

  _RBX = goal;
  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20306, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  if ( !botInfo->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20307, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  if ( !botInfo->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20308, ASSERT_TYPE_ASSERT, "( botInfo->sentient )", (const char *)&queryFormat, "botInfo->sentient") )
    __debugbreak();
  if ( !_RBX && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20309, ASSERT_TYPE_ASSERT, "( goal )", (const char *)&queryFormat, "goal") )
    __debugbreak();
  node = _RBX->node;
  if ( node || (node = _RBX->nearestNode) != NULL )
  {
    pathnode_t::GetPos(node, &pos);
  }
  else
  {
    __asm
    {
      vmovss  xmm0, dword ptr [rbx]
      vmovss  xmm1, dword ptr [rbx+4]
      vmovss  dword ptr [rsp+98h+pos], xmm0
      vmovss  xmm0, dword ptr [rbx+8]
      vmovss  dword ptr [rsp+98h+pos+8], xmm0
      vmovss  dword ptr [rsp+98h+pos+4], xmm1
    }
  }
  eTeam = (unsigned int)botInfo->sentient->eTeam;
  memset(&teamFlags, 0, sizeof(teamFlags));
  if ( (unsigned int)eTeam >= 0xE0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\bitarray.h", 263, ASSERT_TYPE_ASSERT, "( pos ) < ( impl()->getBitCount() )", "%s < %s\n\t%u, %u", "pos", "impl()->getBitCount()", eTeam, 224) )
    __debugbreak();
  teamFlags.array[eTeam >> 5] |= 0x80000000 >> (eTeam & 0x1F);
  v9 = Nav_TranslateTeamFlagsToRepulsorUsageFlags(&teamFlags);
  return Nav_IsPointInRepulsorBadplace(&pos, v9, botInfo->ent->s.number, 2047);
}

/*
==============
Bot_IsHardwareEnt
==============
*/
_BOOL8 Bot_IsHardwareEnt(const gentity_s *ent)
{
  entityType_s eType; 

  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1384, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  eType = ent->s.eType;
  return eType == ET_MISSILE || eType == ET_SCRIPTMOVER && !Sentient_IsAerial(ent->sentient);
}

/*
==============
Bot_IsHighAerialSentient
==============
*/
__int64 Bot_IsHighAerialSentient(sentient_s *sentient)
{
  pathnode_t *v2; 
  vec3_t pos; 

  if ( !sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17426, ASSERT_TYPE_ASSERT, "( sentient )", (const char *)&queryFormat, "sentient") )
    __debugbreak();
  if ( !Sentient_IsAerial(sentient) )
    return 0i64;
  if ( !sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17396, ASSERT_TYPE_ASSERT, "( sentient )", (const char *)&queryFormat, "sentient") )
    __debugbreak();
  if ( !sentient->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17397, ASSERT_TYPE_ASSERT, "( sentient->ent )", (const char *)&queryFormat, "sentient->ent") )
    __debugbreak();
  if ( !Sentient_IsAerial(sentient) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17398, ASSERT_TYPE_ASSERT, "( Sentient_IsAerial( sentient ) )", (const char *)&queryFormat, "Sentient_IsAerial( sentient )") )
    __debugbreak();
  v2 = Sentient_NearestNode(sentient);
  if ( v2 )
  {
    pathnode_t::GetPos(v2, &pos);
    _RAX = sentient->ent;
    __asm
    {
      vmovss  xmm0, dword ptr [rax+138h]
      vsubss  xmm1, xmm0, dword ptr [rsp+58h+pos+8]
      vcomiss xmm1, cs:__real@43960000
    }
  }
  return 1i64;
}

/*
==============
Bot_IsIdleAtScriptGoal
==============
*/
_BOOL8 Bot_IsIdleAtScriptGoal(const bot_data_t *botData)
{
  int scriptGoalIdleTime; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7948, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  scriptGoalIdleTime = botData->botInfo.scriptGoalIdleTime;
  return Bot_AtScriptGoal(botData) && scriptGoalIdleTime >= 1000;
}

/*
==============
Bot_IsInRangeOfEnemy
==============
*/
__int64 Bot_IsInRangeOfEnemy(const bot_data_t *botData)
{
  const playerState_s *playerState; 
  const Weapon *ViewmodelWeapon; 
  unsigned int v6; 
  gentity_s *v7; 
  char v9; 
  char v11; 

  _RBX = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21365, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  playerState = _RBX->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21369, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(playerState);
  if ( Bot_Weap_IsNone(ViewmodelWeapon) )
    return 0i64;
  v6 = 0;
  if ( EntHandle::isDefined(&_RBX->botInfo.sentient->targetEnt) )
  {
    v7 = EntHandle::ent(&_RBX->botInfo.sentient->targetEnt);
    if ( v7 )
    {
      if ( Bot_IsHighAerialSentient(v7->sentient) )
      {
        __asm { vmovss  xmm1, cs:__real@40400000; maxRangeScalar }
        return (unsigned int)Bot_Weap_CurrentWeapCanDamageEnemy(_RBX, *(float *)&_XMM1);
      }
      else if ( Bot_Weap_IsWeapClass(playerState, ViewmodelWeapon, WEAPCLASS_SPREAD) )
      {
        *(double *)&_XMM0 = Bot_Weap_GetMaxDamageRange(playerState, ViewmodelWeapon);
        __asm { vcomiss xmm0, dword ptr [rbx+2394h] }
        LOBYTE(v6) = !v9;
      }
      else
      {
        __asm { vmovss  xmm1, cs:__real@3fc00000; maxRangeScalar }
        if ( Bot_Weap_CurrentWeapCanDamageEnemy(_RBX, *(float *)&_XMM1) )
          return 1;
        *(float *)&_XMM0 = Bot_ActualMeleeRange(_RBX);
        __asm { vcomiss xmm0, dword ptr [rbx+2394h] }
        if ( !(v9 | v11) )
          return 1;
      }
    }
  }
  return v6;
}

/*
==============
Bot_IsJumping
==============
*/
_BOOL8 Bot_IsJumping(const bot_data_t *botData)
{
  playerState_s *playerState; 

  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14727, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  return GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&playerState->pm_flags, ACTIVE, 0x13u) && playerState->pm_time == 0;
}

/*
==============
Bot_IsMovementLocked
==============
*/
int Bot_IsMovementLocked(const bot_data_t *botData)
{
  const dvar_t *v2; 
  const dvar_t *v3; 
  playerState_s *playerState; 
  int result; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7468, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v2 = DVARINT_bot_DisableMovement;
  if ( !DVARINT_bot_DisableMovement && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DisableMovement") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v2);
  if ( v2->current.integer == 1 )
    return 1;
  v3 = DVARINT_bot_DisableMovement;
  if ( !DVARINT_bot_DisableMovement && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DisableMovement") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v3);
  if ( v3->current.integer == 2 )
    return 1;
  playerState = botData->botInfo.playerState;
  if ( playerState->commandTime < playerState->serverTime )
    return 1;
  if ( (*((_BYTE *)&botData->scriptedAgentInfo + 9016) & 4) != 0 )
    return 1;
  if ( GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&playerState->pm_flags, ACTIVE, 0x20u) )
    return 1;
  result = Bot_IsUsingTurret(botData);
  if ( result )
    return 1;
  return result;
}

/*
==============
Bot_IsNearEnemies
==============
*/
__int64 Bot_IsNearEnemies(const bot_data_t *botData)
{
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6007, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  return ((unsigned int)botData->botInfo.flags >> 15) & 1;
}

/*
==============
Bot_IsOKToFireSplashDamageWeaponFrom
==============
*/
bool Bot_IsOKToFireSplashDamageWeaponFrom(const bot_data_t *botData, gentity_s *enemy, const Weapon *weapon, const vec3_t *startPos, const vec3_t *enemyPos, bool bUsingAlternate, float explosionRadius)
{
  gentity_s *ent; 
  char v13; 
  const dvar_t *v15; 
  bool result; 
  char v17; 
  const vec4_t *v18; 
  const vec3_t *p_position; 
  Bounds bounds; 
  trace_t results; 
  char v39; 

  __asm { vmovaps [rsp+0E8h+var_18], xmm6 }
  ent = botData->botInfo.ent;
  __asm
  {
    vmovss  xmm1, cs:__real@40c00000
    vmovups xmm0, cs:__xmm@40c00000000000000000000000000000
    vmovss  xmm6, cs:__real@3f800000
    vmovss  dword ptr [rsp+0E8h+bounds.halfSize+4], xmm1
    vmovss  dword ptr [rsp+0E8h+bounds.halfSize+8], xmm1
    vmovss  [rsp+0E8h+results.fraction], xmm6
    vmovups xmmword ptr [rsp+0E8h+bounds.midPoint], xmm0
  }
  G_Main_TraceCapsule(&results, startPos, enemyPos, &bounds, ent->s.number, 1);
  __asm
  {
    vmovss  xmm0, [rsp+0E8h+results.fraction]
    vcomiss xmm0, cs:__real@3f000000
  }
  v15 = DVARBOOL_bot_DrawSplashDamageChecks;
  if ( v13 )
  {
    if ( !DVARBOOL_bot_DrawSplashDamageChecks && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 692, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawSplashDamageChecks") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v15);
    if ( v15->current.enabled )
      CL_AddDebugLine(startPos, &results.position, &colorRed, 0, 10, 1);
    result = 0;
    goto LABEL_25;
  }
  __asm { vcomiss xmm0, xmm6 }
  if ( v13 )
  {
    if ( !DVARBOOL_bot_DrawSplashDamageChecks && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 692, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawSplashDamageChecks") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v15);
    v17 = 0;
    if ( !v15->current.enabled )
      goto LABEL_20;
    v18 = &colorYellow;
    p_position = &results.position;
  }
  else
  {
    if ( !DVARBOOL_bot_DrawSplashDamageChecks && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 692, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawSplashDamageChecks") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v15);
    v17 = 0;
    if ( !v15->current.enabled )
      goto LABEL_20;
    v18 = &colorGreen;
    p_position = enemyPos;
  }
  CL_AddDebugLine(startPos, p_position, v18, 0, 10, 1);
LABEL_20:
  __asm
  {
    vmovss  xmm0, [rsp+0E8h+results.fraction]
    vcomiss xmm0, xmm6
  }
  if ( v17 && results.hitId == 2046 )
  {
    __asm
    {
      vmovss  xmm0, dword ptr [rsp+0E8h+results.position]
      vsubss  xmm3, xmm0, dword ptr [rdi]
      vmovss  xmm1, dword ptr [rsp+0E8h+results.position+4]
      vsubss  xmm2, xmm1, dword ptr [rdi+4]
      vmovss  xmm0, dword ptr [rsp+0E8h+results.position+8]
      vsubss  xmm4, xmm0, dword ptr [rdi+8]
      vmulss  xmm2, xmm2, xmm2
      vmulss  xmm1, xmm3, xmm3
      vaddss  xmm3, xmm2, xmm1
      vmovss  xmm1, [rsp+0E8h+explosionRadius]
      vmulss  xmm0, xmm4, xmm4
      vaddss  xmm4, xmm3, xmm0
      vmulss  xmm2, xmm1, xmm1
      vcomiss xmm4, xmm2
    }
  }
  result = 1;
LABEL_25:
  _R11 = &v39;
  __asm { vmovaps xmm6, xmmword ptr [r11-10h] }
  return result;
}

/*
==============
Bot_IsOnGround
==============
*/
_BOOL8 Bot_IsOnGround(const bot_data_t *botData)
{
  playerState_s *playerState; 

  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14746, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  return playerState->groundEntityNum != 2047;
}

/*
==============
Bot_IsOnGroundOrNearGround
==============
*/
int Bot_IsOnGroundOrNearGround(const bot_data_t *botData)
{
  int result; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14760, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  result = Bot_IsOnGround(botData);
  if ( result || (botData->botInfo.flags & 0x8000000) != 0 )
    return 1;
  return result;
}

/*
==============
Bot_IsPointInRangeOfHardwareEntExplosion
==============
*/
__int64 Bot_IsPointInRangeOfHardwareEntExplosion(const gentity_s *ent, const vec3_t *point)
{
  __int64 result; 

  _RBX = ent;
  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8257, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( !_RBX->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8258, ASSERT_TYPE_ASSERT, "( ent->sentient )", (const char *)&queryFormat, "ent->sentient") )
    __debugbreak();
  if ( !Bot_IsHardwareEnt(_RBX) || _RBX->sentient->expendable || !GameModeFlagContainer<enum BgEntityFlagsCommon,enum BgEntityFlagsSP,enum BgEntityFlagsMP,64>::TestFlagStrict(&_RBX->flags, (BgEntityFlagsMP)34) )
    return 0i64;
  __asm
  {
    vmovss  xmm0, dword ptr [rbx+130h]
    vsubss  xmm3, xmm0, dword ptr [rdi]
    vmovss  xmm1, dword ptr [rbx+134h]
    vmovss  xmm0, dword ptr [rbx+138h]
    vsubss  xmm2, xmm1, dword ptr [rdi+4]
    vsubss  xmm4, xmm0, dword ptr [rdi+8]
  }
  result = 0i64;
  __asm
  {
    vmulss  xmm2, xmm2, xmm2
    vmulss  xmm1, xmm3, xmm3
    vmulss  xmm0, xmm4, xmm4
    vaddss  xmm3, xmm2, xmm1
    vaddss  xmm4, xmm3, xmm0
    vcomiss xmm4, cs:__real@47afc800
  }
  return result;
}

/*
==============
Bot_IsPointNearWorldEdge
==============
*/

__int64 __fastcall Bot_IsPointNearWorldEdge(const vec3_t *point, double tolerance)
{
  __asm
  {
    vmovss  xmm3, dword ptr [rcx+4]
    vmulss  xmm0, xmm3, dword ptr cs:s_botWorldEdgePlanes+4
    vmovss  xmm4, dword ptr [rcx]
    vmovss  xmm5, dword ptr [rcx+8]
    vmovaps [rsp+18h+var_18], xmm6
    vxorps  xmm6, xmm1, cs:__xmm@80000000800000008000000080000000
    vmulss  xmm1, xmm4, dword ptr cs:s_botWorldEdgePlanes
    vaddss  xmm2, xmm1, xmm0
    vmulss  xmm1, xmm5, dword ptr cs:s_botWorldEdgePlanes+8
    vaddss  xmm2, xmm2, xmm1
    vsubss  xmm0, xmm2, dword ptr cs:s_botWorldEdgePlanes+0Ch
    vcomiss xmm0, xmm6
    vmovaps xmm6, [rsp+18h+var_18]
  }
  return 1i64;
}

/*
==============
Bot_IsPostedAtGoalType
==============
*/
_BOOL8 Bot_IsPostedAtGoalType(const bot_data_t *botData, bot_scr_goal_t goalType)
{
  _BOOL8 result; 
  __int64 v5; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11220, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( (unsigned int)goalType >= BOT_SCR_GOAL_COUNT )
  {
    LODWORD(v5) = goalType;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11221, ASSERT_TYPE_ASSERT, "(unsigned)( goalType ) < (unsigned)( BOT_SCR_GOAL_COUNT )", "goalType doesn't index BOT_SCR_GOAL_COUNT\n\t%i not in [0, %i)", v5, 7) )
      __debugbreak();
  }
  result = Bot_IsIdleAtScriptGoal(botData);
  if ( result )
    return botData->botInfo.scriptGoal.type == goalType;
  return result;
}

/*
==============
Bot_IsRandomized
==============
*/
__int64 Bot_IsRandomized(const bot_data_t *botData)
{
  return 1i64;
}

/*
==============
Bot_IsReloading
==============
*/
_BOOL8 Bot_IsReloading(const bot_data_t *botData)
{
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21488, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21489, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState )", (const char *)&queryFormat, "botData->botInfo.playerState") )
    __debugbreak();
  return (unsigned int)(Bot_Weap_GetWeaponStateForViewWeapon(botData->botInfo.playerState) - 18) <= 3;
}

/*
==============
Bot_IsRemoteEyesVehicle
==============
*/
__int64 Bot_IsRemoteEyesVehicle(const bot_data_t *botData)
{
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5295, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !Bot_HasRemoteEyes(botData) )
    return 0i64;
  if ( (unsigned __int16)Bot_GetRemoteEyesEntNum(botData) == 2047 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5300, ASSERT_TYPE_ASSERT, "( Bot_GetRemoteEyesEntNum( botData ) != ENTITYNUM_NONE )", (const char *)&queryFormat, "Bot_GetRemoteEyesEntNum( botData ) != ENTITYNUM_NONE") )
    __debugbreak();
  if ( botData->botInfo.playerState->vehicleState.entity == 2047 )
    return 0i64;
  if ( botData->botInfo.playerState->vehicleState.entity != (__int16)Bot_GetRemoteEyesEntNum(botData) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5303, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState->vehicleState.entity == Bot_GetRemoteEyesEntNum( botData ) )", (const char *)&queryFormat, "botData->botInfo.playerState->vehicleState.entity == Bot_GetRemoteEyesEntNum( botData )") )
    __debugbreak();
  return 1i64;
}

/*
==============
Bot_IsSentientEntityConnected
==============
*/
_BOOL8 Bot_IsSentientEntityConnected(const gentity_s *ent)
{
  __int16 EntityIndex; 
  const SvClientMP *MpClient; 

  if ( !ent )
    return 0i64;
  EntityIndex = G_GetEntityIndex(ent);
  if ( !G_IsEntityInUse(EntityIndex) || !ent->sentient )
    return 0i64;
  if ( ent->client )
  {
    MpClient = SV_Client_GetMpClient(ent->s.number);
    return Bot_IsClientConnected(MpClient);
  }
  else
  {
    return !ent->agent || ent->s.eType == ET_AGENT;
  }
}

/*
==============
Bot_IsSentientPotentialCamper
==============
*/
_BOOL8 Bot_IsSentientPotentialCamper(const sentient_s *sentient)
{
  signed __int64 v2; 
  __int64 v3; 
  __int64 v5; 

  if ( !sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1967, ASSERT_TYPE_ASSERT, "( sentient )", (const char *)&queryFormat, "sentient") )
    __debugbreak();
  v2 = (char *)sentient - (char *)level.sentients;
  v3 = v2 / 184;
  if ( !s_botSentientHistory && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1969, ASSERT_TYPE_ASSERT, "( s_botSentientHistory )", (const char *)&queryFormat, "s_botSentientHistory") )
    __debugbreak();
  if ( (unsigned int)v3 >= level.maxSentients )
  {
    LODWORD(v5) = v2 / 184;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1970, ASSERT_TYPE_ASSERT, "(unsigned)( sentientIndex ) < (unsigned)( level.maxSentients )", "sentientIndex doesn't index level.maxSentients\n\t%i not in [0, %i)", v5, level.maxSentients) )
      __debugbreak();
  }
  return level.time - s_botSentientHistory[v3].lastTimeMovedPositions > 5000;
}

/*
==============
Bot_IsSliding
==============
*/
_BOOL8 Bot_IsSliding(const bot_data_t *botData)
{
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6862, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6863, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState )", (const char *)&queryFormat, "botData->botInfo.playerState") )
    __debugbreak();
  return GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 0x1Du);
}

/*
==============
Bot_IsStationaryEnt
==============
*/
_BOOL8 Bot_IsStationaryEnt(const gentity_s *ent)
{
  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1406, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  return Bot_IsHardwareEnt(ent) && !Sentient_IsAerial(ent->sentient) || ent->s.eType == ET_TURRET;
}

/*
==============
Bot_IsStuckReacting
==============
*/
__int64 Bot_IsStuckReacting(const bot_info_t *botInfo)
{
  __int64 result; 

  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14713, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  result = 0i64;
  if ( botInfo->stuckReactionTime - level.time > 0 )
    return (unsigned int)(botInfo->stuckReactionTime - level.time);
  return result;
}

/*
==============
Bot_IsThirdPersonRemoteVehicle
==============
*/
__int64 Bot_IsThirdPersonRemoteVehicle(const bot_data_t *botData)
{
  __int64 result; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5382, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  result = Bot_IsRemoteEyesVehicle(botData);
  if ( (_DWORD)result )
    return (unsigned int)Bot_GetRemoteVehicleType(botData) == 1;
  return result;
}

/*
==============
Bot_IsThrowingGrenade
==============
*/
_BOOL8 Bot_IsThrowingGrenade(const bot_data_t *botData)
{
  const playerState_s *playerState; 
  const Weapon *ViewmodelWeapon; 
  int grenadeFiredTime; 
  int time; 

  _RBX = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21448, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !_RBX->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21449, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState )", (const char *)&queryFormat, "botData->botInfo.playerState") )
    __debugbreak();
  if ( (*((_BYTE *)&_RBX->scriptedAgentInfo + 28228) & 1) != 0 )
    return 1i64;
  playerState = _RBX->botInfo.playerState;
  ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(playerState);
  if ( (unsigned int)(Bot_Weap_GetWeaponStateForViewWeapon(_RBX->botInfo.playerState) - 26) <= 6 && Bot_Weap_IsWeapClass(_RBX->botInfo.playerState, ViewmodelWeapon, WEAPCLASS_GRENADE) )
  {
    if ( _RBX->botInfo.grenadeFiredTime < 0 || Bot_Weap_IsNone(&_RBX->botInfo.grenadeWeap) )
      return 0i64;
    grenadeFiredTime = _RBX->botInfo.grenadeFiredTime;
    if ( !grenadeFiredTime )
      return 1i64;
    time = level.time;
    __asm { vcvttss2si ecx, dword ptr [rbx+7FD4h] }
    if ( level.time - grenadeFiredTime < _ECX >> 1 )
      return 1i64;
  }
  else
  {
    time = level.time;
  }
  return time <= _RBX->botInfo.weaponDelayForOffhand && Bot_Weap_HasUnderBarrelGLAmmo(playerState);
}

/*
==============
Bot_IsTraversalBlocked
==============
*/
__int64 Bot_IsTraversalBlocked(bot_data_t *botData, int *byEnemy)
{
  pathnode_t *v6; 
  pathnode_t *v7; 
  playerState_s *playerState; 
  gentity_s *ent; 
  __int64 result; 
  __int64 v42; 
  __int64 v43; 
  __int64 v44; 
  vec3_t destination; 
  vec3_t end; 
  vec3_t pos; 
  vec3_t start; 
  trace_t results; 
  __int64 v50; 
  char v51; 

  _RBP = &v50;
  __asm { vmovaps xmmword ptr [rax-28h], xmm6 }
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2253, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v6 = NULL;
  if ( Path_NodeValid(botData->botInfo.nodeNegotStart) )
    v7 = Path_ConvertIndexToNode(botData->botInfo.nodeNegotStart);
  else
    v7 = NULL;
  if ( Path_NodeValid(botData->botInfo.nodeNegotEnd) )
    v6 = Path_ConvertIndexToNode(botData->botInfo.nodeNegotEnd);
  if ( !v7 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2257, ASSERT_TYPE_ASSERT, "(negotiationStartNode)", "%s\n\tNo traversal start node.  botInfo->traversal = %i, botInfo->nodeNegotStart = %i, botInfo->traverseJumpTime = %i", "negotiationStartNode", botData->botInfo.traversal, botData->botInfo.nodeNegotStart, botData->botInfo.traverseJumpTime) )
    __debugbreak();
  if ( !v6 )
  {
    LODWORD(v44) = botData->botInfo.traverseJumpTime;
    LODWORD(v43) = botData->botInfo.nodeNegotEnd;
    LODWORD(v42) = botData->botInfo.traversal;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2257, ASSERT_TYPE_ASSERT, "(negotiationEndNode)", "%s\n\tNo traversal end node.  botInfo->traversal = %i, botInfo->nodeNegotEnd = %i, botInfo->traverseJumpTime = %i", "negotiationEndNode", v42, v43, v44) )
      __debugbreak();
  }
  pathnode_t::GetPos(v7, &pos);
  pathnode_t::GetPos(v6, &destination);
  playerState = botData->botInfo.playerState;
  __asm
  {
    vmovss  xmm6, cs:__real@3f800000
    vmovss  [rbp+20h+results.fraction], xmm6
  }
  _RDI = BG_Suit_GetBounds(playerState->suitIndex, PM_EFF_STANCE_DEFAULT);
  _RAX = botData->botInfo.ent;
  if ( (LOBYTE(botData->scriptedAgentInfo.scriptGoal.pos.y) & 1) == 0 )
  {
    G_Main_TraceCapsule(&results, &pos, &destination, _RDI, _RAX->s.number, 33570816);
    if ( !Bot_TraceBlocksTraversal(botData, &results, &destination, byEnemy) )
      goto LABEL_20;
    goto LABEL_23;
  }
  __asm
  {
    vmovsd  xmm0, qword ptr [rsp+120h+pos]
    vmovss  xmm1, dword ptr [rsp+120h+pos]
  }
  start.v[2] = pos.v[2];
  __asm
  {
    vmovsd  qword ptr [rbp+20h+start], xmm0
    vmovss  xmm0, dword ptr [rax+138h]
    vmaxss  xmm2, xmm0, dword ptr [rsp+120h+pos+8]
    vmovss  xmm0, dword ptr [rsp+120h+pos+4]
    vmovss  dword ptr [rsp+120h+end], xmm1
    vaddss  xmm1, xmm2, cs:__real@42d20000
    vmovss  dword ptr [rbp+20h+start+8], xmm2
    vminss  xmm2, xmm1, dword ptr [rsp+120h+destination+8]
    vmovss  dword ptr [rsp+120h+end+8], xmm2
    vmovss  dword ptr [rsp+120h+end+4], xmm0
  }
  G_Main_TraceCapsule(&results, &start, &end, _RDI, _RAX->s.number, 33570816);
  if ( Bot_TraceBlocksTraversal(botData, &results, &destination, byEnemy) )
    goto LABEL_23;
  __asm
  {
    vmovss  xmm0, dword ptr [rsp+120h+end+8]
    vcomiss xmm0, dword ptr [rsp+120h+destination+8]
  }
  ent = botData->botInfo.ent;
  __asm { vmovss  [rbp+20h+results.fraction], xmm6 }
  G_Main_TraceCapsule(&results, &end, &destination, _RDI, ent->s.number, 33570816);
  if ( Bot_TraceBlocksTraversal(botData, &results, &destination, byEnemy) )
  {
    if ( !*byEnemy )
    {
      __asm
      {
        vmovss  xmm2, dword ptr [rsp+120h+end]
        vmovss  xmm4, dword ptr [rsp+120h+end+4]
        vmovss  xmm0, dword ptr [rsp+120h+destination]
        vsubss  xmm1, xmm0, xmm2
        vmulss  xmm1, xmm1, [rbp+20h+results.fraction]
        vaddss  xmm0, xmm1, xmm2
        vmovss  xmm1, dword ptr [rsp+120h+destination+4]
        vsubss  xmm5, xmm2, xmm0
        vsubss  xmm0, xmm1, xmm4
        vmulss  xmm2, xmm0, [rbp+20h+results.fraction]
        vaddss  xmm3, xmm2, xmm4
        vsubss  xmm1, xmm4, xmm3
        vmovss  xmm4, dword ptr [rdi+0Ch]
        vmulss  xmm2, xmm1, xmm1
        vmulss  xmm0, xmm5, xmm5
        vaddss  xmm3, xmm2, xmm0
        vmulss  xmm1, xmm4, xmm4
        vmulss  xmm2, xmm1, cs:__real@40440000
        vcomiss xmm3, xmm2
      }
      goto LABEL_20;
    }
LABEL_23:
    result = 1i64;
    goto LABEL_21;
  }
LABEL_20:
  result = 0i64;
LABEL_21:
  _R11 = &v51;
  __asm { vmovaps xmm6, xmmword ptr [r11-10h] }
  return result;
}

/*
==============
Bot_IsUnreachableHighAerialSentient
==============
*/
__int64 Bot_IsUnreachableHighAerialSentient(sentient_s *sentient)
{
  if ( !sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17443, ASSERT_TYPE_ASSERT, "( sentient )", (const char *)&queryFormat, "sentient") )
    __debugbreak();
  if ( !sentient->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17444, ASSERT_TYPE_ASSERT, "( sentient->ent )", (const char *)&queryFormat, "sentient->ent") )
    __debugbreak();
  Bot_IsHighAerialSentient(sentient);
  return 0i64;
}

/*
==============
Bot_IsUseButtonPressed
==============
*/
bool Bot_IsUseButtonPressed(const bot_data_t *botData)
{
  const playerState_s *EntityPlayerStateConst; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11246, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.lastUserCmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11247, ASSERT_TYPE_ASSERT, "( botData->botInfo.lastUserCmd )", (const char *)&queryFormat, "botData->botInfo.lastUserCmd") )
    __debugbreak();
  EntityPlayerStateConst = G_GetEntityPlayerStateConst(botData->botInfo.ent);
  return (G_PlayerUse_GetUseButtonMask(EntityPlayerStateConst) & botData->botInfo.lastUserCmd->buttons) != 0;
}

/*
==============
Bot_IsVehicleEnt
==============
*/
_BOOL8 Bot_IsVehicleEnt(const gentity_s *ent)
{
  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17705, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( !ent->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17706, ASSERT_TYPE_ASSERT, "( ent->sentient )", (const char *)&queryFormat, "ent->sentient") )
    __debugbreak();
  return !Bot_IsHardwareEnt(ent) && (ent->s.eType == ET_VEHICLE || Sentient_IsAerial(ent->sentient));
}

/*
==============
Bot_LoadDifficultySettings
==============
*/
void Bot_LoadDifficultySettings(bot_data_t *botData, bot_difficulty_t botDifficulty)
{
  int v6; 
  bot_difficulty_t v7; 
  const char *ColumnValueForRow; 
  const char *v10; 
  const char *v11; 
  bot_match_data_setting_t *matched; 
  bot_difficulty_t v15; 
  const char **v16; 
  const char *v17; 
  __int64 v18; 
  signed __int64 v19; 
  int v20; 
  __int64 v21; 
  int v22; 
  int v23; 
  int v24; 
  int row; 
  bot_difficulty_t v28; 
  StringTable *tablePtr; 

  __asm { vmovaps [rsp+88h+var_48], xmm6 }
  _R13 = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4991, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( (unsigned int)botDifficulty > BOT_DIFFICULTY_DEFAULT && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4992, ASSERT_TYPE_ASSERT, "( (botDifficulty >= BOT_DIFFICULTY_RECRUIT) && (botDifficulty < BOT_DIFFICULTY_COUNT) )", (const char *)&queryFormat, "(botDifficulty >= BOT_DIFFICULTY_RECRUIT) && (botDifficulty < BOT_DIFFICULTY_COUNT)") )
    __debugbreak();
  StringTable_GetAsset("mp/botDifficultyTable.csv", (const StringTable **)&tablePtr);
  if ( !tablePtr && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5000, ASSERT_TYPE_ASSERT, "( pTable )", (const char *)&queryFormat, "pTable") )
    __debugbreak();
  v6 = 0;
  _R13->botMatchData.flags = 0;
  row = 0;
  v7 = BOT_DIFFICULTY_REGULAR;
  if ( botDifficulty != BOT_DIFFICULTY_DEFAULT )
    v7 = botDifficulty;
  v28 = v7;
  __asm { vxorps  xmm6, xmm6, xmm6 }
  while ( 1 )
  {
    ColumnValueForRow = StringTable_GetColumnValueForRow(tablePtr, v6, 0);
    v10 = ColumnValueForRow;
    if ( ColumnValueForRow )
    {
      if ( *ColumnValueForRow )
        break;
    }
LABEL_40:
    v6 = ++row;
    if ( !v10 || !*v10 )
    {
      Bot_ValidateMatchData(_R13);
      goto LABEL_43;
    }
  }
  v11 = StringTable_GetColumnValueForRow(tablePtr, row, v7 + 1);
  matched = Bot_MatchDataSetting(v10);
  if ( matched )
  {
    *(double *)&_XMM0 = atof(v11);
    _RCX = matched->offset;
    __asm { vcvtsd2ss xmm1, xmm0, xmm0 }
    if ( (_DWORD)_RCX == 3212 )
    {
      __asm { vucomiss xmm1, xmm6 }
      _R13->botMatchData.flags &= ~matched->flag;
    }
    else if ( (_DWORD)_RCX == 3416 )
    {
      v15 = BOT_DIFFICULTY_RECRUIT;
      v16 = BOT_BURST_FIRE_TYPE_STRINGS;
      do
      {
        v17 = *v16;
        v18 = 0x7FFFFFFFi64;
        if ( !v11 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 212, ASSERT_TYPE_SANITY, "( s0 )", (const char *)&queryFormat, "s0") )
          __debugbreak();
        if ( !v17 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 213, ASSERT_TYPE_SANITY, "( s1 )", (const char *)&queryFormat, "s1") )
          __debugbreak();
        v19 = v11 - v17;
        while ( 1 )
        {
          v20 = (unsigned __int8)v17[v19];
          v21 = v18;
          v22 = *(unsigned __int8 *)v17++;
          --v18;
          if ( !v21 )
          {
LABEL_35:
            *(bot_difficulty_t *)((char *)&_R13->botMatchData.difficulty + matched->offset) = v15;
            goto LABEL_36;
          }
          if ( v20 != v22 )
          {
            v23 = v20 + 32;
            if ( (unsigned int)(v20 - 65) > 0x19 )
              v23 = v20;
            v20 = v23;
            v24 = v22 + 32;
            if ( (unsigned int)(v22 - 65) > 0x19 )
              v24 = v22;
            if ( v20 != v24 )
              break;
          }
          if ( !v20 )
            goto LABEL_35;
        }
        ++v15;
        ++v16;
      }
      while ( (__int64)v16 < (__int64)&BOT_BURST_FIRE_TYPE_STRINGS[3] );
LABEL_36:
      if ( v15 == BOT_DIFFICULTY_VETERAN && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4932, ASSERT_TYPE_ASSERT, (const char *)&queryFormat.fmt + 3, "Bot_SetDifficultySetting could not set '%s' with value '%s'.", v10, v11) )
        __debugbreak();
      v7 = v28;
    }
    else
    {
      __asm { vmovss  dword ptr [rcx+r13+7300h], xmm1 }
    }
    goto LABEL_40;
  }
  if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5017, ASSERT_TYPE_ASSERT, (const char *)&queryFormat.fmt + 3, "Bot_LoadDifficultySettings() invalid settingName '%s'", v10) )
    __debugbreak();
LABEL_43:
  __asm { vmovaps xmm6, [rsp+88h+var_48] }
}

/*
==============
Bot_LocationIsScriptGoal
==============
*/
__int64 Bot_LocationIsScriptGoal(const bot_data_t *botData, const vec3_t *location)
{
  vec3_t goal; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24153, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( botData->botInfo.scriptGoal.type == BOT_SCR_GOAL_NONE )
    return 0i64;
  Bot_GetScriptGoal(botData, &goal);
  __asm
  {
    vmovss  xmm0, dword ptr [rsp+58h+goal]
    vsubss  xmm3, xmm0, dword ptr [rdi]
    vmovss  xmm1, dword ptr [rsp+58h+goal+4]
    vmovss  xmm0, dword ptr [rsp+58h+goal+8]
    vsubss  xmm2, xmm1, dword ptr [rdi+4]
    vsubss  xmm4, xmm0, dword ptr [rdi+8]
    vmulss  xmm2, xmm2, xmm2
    vmulss  xmm1, xmm3, xmm3
    vmulss  xmm0, xmm4, xmm4
    vaddss  xmm3, xmm2, xmm1
    vaddss  xmm4, xmm3, xmm0
    vcomiss xmm4, cs:__real@3f800000
  }
  return 1i64;
}

/*
==============
Bot_LookAtEntity
==============
*/
void Bot_LookAtEntity(bot_data_t *botData, gentity_s *ent, int duration, bot_look_t type)
{
  bot_data_t *v8; 
  vec3_t *p_targetPos; 
  vec3_t targetPos; 
  vec3_t vEyePosOut; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14597, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14598, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  v8 = botData;
  if ( ent->sentient )
  {
    if ( Bot_ShouldForgetEnemy(botData, ent) )
      return;
    Bot_GetLastKnownEntPosAndTime(botData, ent, &targetPos);
    Sentient_GetEyePosition(ent->sentient, &vEyePosOut);
    __asm
    {
      vmovss  xmm0, dword ptr [rsp+88h+vEyePosOut+8]
      vsubss  xmm2, xmm0, dword ptr [rbx+138h]
      vaddss  xmm2, xmm2, dword ptr [rsp+88h+targetPos+8]
      vmovss  dword ptr [rsp+88h+targetPos+8], xmm2
    }
    p_targetPos = &targetPos;
    v8 = botData;
  }
  else
  {
    p_targetPos = &ent->r.currentOrigin;
  }
  Bot_LookAtPoint(v8, p_targetPos, duration, type);
}

/*
==============
Bot_LookAtPoint
==============
*/
void Bot_LookAtPoint(bot_data_t *botData, const vec3_t *point, int duration, bot_look_t type)
{
  int time; 
  int traversal; 
  __int64 v12; 

  _RDI = point;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14625, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( (unsigned int)type >= BOT_LOOK_COUNT )
  {
    LODWORD(v12) = type;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14626, ASSERT_TYPE_ASSERT, "(unsigned)( type ) < (unsigned)( BOT_LOOK_COUNT )", "type doesn't index BOT_LOOK_COUNT\n\t%i not in [0, %i)", v12, 7) )
      __debugbreak();
  }
  if ( _RDI )
  {
    __asm
    {
      vxorps  xmm0, xmm0, xmm0
      vucomiss xmm0, dword ptr [rdi]
    }
    time = level.time;
    if ( botData->botInfo.lookAtType <= type || level.time >= botData->botInfo.lookAtTime )
    {
      botData->botInfo.lookAtType = type;
      botData->botInfo.lookAtTime = duration + time;
      botData->botInfo.lookAtPoint.v[0] = _RDI->v[0];
      botData->botInfo.lookAtPoint.v[1] = _RDI->v[1];
      botData->botInfo.lookAtPoint.v[2] = _RDI->v[2];
      if ( type >= BOT_LOOK_CODE_SEEK )
      {
        traversal = botData->botInfo.traversal;
        if ( (traversal & 1) != 0 )
          botData->botInfo.traversal = traversal & 0xFFFFFFFE;
      }
    }
  }
  else
  {
    botData->botInfo.lookAtTime = level.time - 1;
    botData->botInfo.lookAtType = BOT_LOOK_CODE_PATH;
    *((_QWORD *)&botData->scriptedAgentInfo + 3544) = 0i64;
    botData->botInfo.lookAtPoint.v[2] = 0.0;
  }
}

/*
==============
Bot_MakeBotData
==============
*/
void Bot_MakeBotData(bot_data_t *botData)
{
  if ( botData )
  {
    botData->botDataHeader = -17973521;
    botData->botDataFooter = -17973521;
  }
  else
  {
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1127, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
      __debugbreak();
    MEMORY[0] = -17973521;
    MEMORY[0x1FFE8] = -17973521;
  }
}

/*
==============
Bot_MatchDataSetting
==============
*/
bot_match_data_setting_t *Bot_MatchDataSetting(const char *settingName)
{
  int v1; 
  const char *v2; 
  const char *name; 
  __int64 v4; 
  bot_match_data_setting_t *v5; 
  __int64 v6; 
  int v7; 
  const char *v8; 
  int v9; 
  __int64 v10; 
  __int64 v11; 
  __int64 v12; 
  const char *v13; 
  signed __int64 v14; 
  int v15; 
  __int64 v16; 
  int v17; 
  int v18; 
  int v19; 

  v1 = 0;
  v2 = settingName;
  if ( !s_BotMatchDataSettingsInit )
  {
    name = s_BotMatchDataSettings[0].name;
    if ( s_BotMatchDataSettings[0].name )
    {
      v4 = 0i64;
      v5 = s_BotMatchDataSettings;
      v6 = 0i64;
      do
      {
        if ( !*name )
          break;
        if ( s_BotMatchDataSettings[v6].offset < 3212 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4868, ASSERT_TYPE_ASSERT, "( s_BotMatchDataSettings[i].offset >= ( static_cast< intptr_t >( ( __builtin_offsetof(bot_match_data_t,flags) ) ) ) )", (const char *)&queryFormat, "s_BotMatchDataSettings[i].offset >= BMD_OFS( flags )") )
          __debugbreak();
        if ( s_BotMatchDataSettings[v6].offset > 0xD58u && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4869, ASSERT_TYPE_ASSERT, "( s_BotMatchDataSettings[i].offset <= (sizeof(bot_match_data_t) - sizeof(float)) )", (const char *)&queryFormat, "s_BotMatchDataSettings[i].offset <= (sizeof(bot_match_data_t) - sizeof(float))") )
          __debugbreak();
        s_BotMatchDataSettings[v6].hash = StringTable_HashString(v5->name);
        v6 = ++v4;
        name = s_BotMatchDataSettings[v4].name;
        v5 = &s_BotMatchDataSettings[v4];
      }
      while ( name );
      v2 = settingName;
    }
    s_BotMatchDataSettingsInit = 1;
  }
  v7 = StringTable_HashString(v2);
  v8 = s_BotMatchDataSettings[0].name;
  v9 = v7;
  if ( s_BotMatchDataSettings[0].name )
  {
    v10 = 0i64;
    v11 = 0i64;
    while ( *v8 )
    {
      if ( s_BotMatchDataSettings[v11].hash == v9 )
      {
        v12 = 0x7FFFFFFFi64;
        v13 = v2;
        if ( !v8 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 212, ASSERT_TYPE_SANITY, "( s0 )", (const char *)&queryFormat, "s0") )
          __debugbreak();
        if ( !v2 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 213, ASSERT_TYPE_SANITY, "( s1 )", (const char *)&queryFormat, "s1") )
          __debugbreak();
        v14 = v8 - v2;
        do
        {
          v15 = (unsigned __int8)v13[v14];
          v16 = v12;
          v17 = *(unsigned __int8 *)v13++;
          --v12;
          if ( !v16 )
            break;
          if ( v15 != v17 )
          {
            v18 = v15 + 32;
            if ( (unsigned int)(v15 - 65) > 0x19 )
              v18 = v15;
            v15 = v18;
            v19 = v17 + 32;
            if ( (unsigned int)(v17 - 65) > 0x19 )
              v19 = v17;
            if ( v15 != v19 )
              goto LABEL_34;
          }
        }
        while ( v15 );
        return &s_BotMatchDataSettings[v1];
      }
LABEL_34:
      ++v10;
      ++v1;
      v11 = v10;
      v8 = s_BotMatchDataSettings[v10].name;
      if ( !v8 )
        return 0i64;
    }
  }
  return 0i64;
}

/*
==============
Bot_MemoryFindEvent
==============
*/
__int64 Bot_MemoryFindEvent(bot_data_t *botData, bot_mem_type_t type, __int16 entNum, const vec3_t *location1, int newestTime, int oldestTime)
{
  bot_mem_event_t *v11; 
  __int64 result; 
  __int64 v16; 
  bot_mem_iterator_t memIt; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25059, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( (unsigned int)type >= BOT_MEM_TYPE_COUNT )
  {
    LODWORD(v16) = type;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25060, ASSERT_TYPE_ASSERT, "(unsigned)( type ) < (unsigned)( BOT_MEM_TYPE_COUNT )", "type doesn't index BOT_MEM_TYPE_COUNT\n\t%i not in [0, %i)", v16, 5) )
      __debugbreak();
  }
  __asm { vmovaps [rsp+278h+var_38], xmm6 }
  memset_0(&memIt, -1, 0xF8ui64);
  memset_0(memIt.stopIndex, -1, sizeof(memIt.stopIndex));
  v11 = Bot_MemoryIterate(botData, newestTime, oldestTime, &memIt);
  if ( v11 )
  {
    __asm { vmovss  xmm6, cs:__real@3a83126f }
    while ( 1 )
    {
      if ( v11->type == type && v11->entNum == entNum )
      {
        if ( !location1 )
          break;
        __asm { vmovaps xmm2, xmm6; epsilon }
        if ( VecNCompareCustomEpsilon(v11->location1.v, location1->v, *(float *)&_XMM2, 3) )
          break;
      }
      v11 = Bot_MemoryIterate(botData, newestTime, oldestTime, &memIt);
      if ( !v11 )
        goto LABEL_14;
    }
    result = 1i64;
  }
  else
  {
LABEL_14:
    result = 0i64;
  }
  __asm { vmovaps xmm6, [rsp+278h+var_38] }
  return result;
}

/*
==============
Bot_MemoryFlagAllNear
==============
*/
void Bot_MemoryFlagAllNear(bot_data_t *botData, int timeNewest, int timeOldest, int typeFlags, int locationNumber, const vec3_t *location, float radius, int flags)
{
  bot_mem_event_t *v15; 
  bool v17; 
  bot_mem_iterator_t memIt; 

  __asm { vmovaps [rsp+278h+var_48], xmm6 }
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25309, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  __asm
  {
    vmovss  xmm0, [rsp+278h+radius]
    vmulss  xmm6, xmm0, xmm0
  }
  memset_0(&memIt, -1, 0xF8ui64);
  memset_0(memIt.stopIndex, -1, sizeof(memIt.stopIndex));
  v15 = Bot_MemoryIterate(botData, timeNewest, timeOldest, &memIt);
  if ( v15 )
  {
    _RSI = location;
    do
    {
      if ( _bittest(&typeFlags, v15->type) )
      {
        v17 = (unsigned int)locationNumber <= 1;
        if ( locationNumber == 1 )
        {
          __asm
          {
            vmovss  xmm0, dword ptr [rsi]
            vsubss  xmm3, xmm0, dword ptr [rax+8]
            vmovss  xmm0, dword ptr [rsi+8]
            vmovss  xmm1, dword ptr [rsi+4]
            vsubss  xmm4, xmm0, dword ptr [rax+10h]
            vsubss  xmm2, xmm1, dword ptr [rax+0Ch]
          }
          goto LABEL_11;
        }
        v17 = (unsigned int)locationNumber <= 2;
        if ( locationNumber == 2 )
        {
          __asm
          {
            vmovss  xmm0, dword ptr [rsi]
            vsubss  xmm3, xmm0, dword ptr [rax+14h]
            vmovss  xmm0, dword ptr [rsi+8]
            vmovss  xmm1, dword ptr [rsi+4]
            vsubss  xmm4, xmm0, dword ptr [rax+1Ch]
            vsubss  xmm2, xmm1, dword ptr [rax+18h]
          }
LABEL_11:
          __asm
          {
            vmulss  xmm2, xmm2, xmm2
            vmulss  xmm1, xmm3, xmm3
            vaddss  xmm3, xmm2, xmm1
            vmulss  xmm0, xmm4, xmm4
            vaddss  xmm2, xmm3, xmm0
            vcomiss xmm2, xmm6
          }
          if ( v17 )
            v15->flags |= flags;
        }
      }
      v15 = Bot_MemoryIterate(botData, timeNewest, timeOldest, &memIt);
    }
    while ( v15 );
  }
  __asm { vmovaps xmm6, [rsp+278h+var_48] }
}

/*
==============
Bot_MemoryGetAllPositions
==============
*/
void Bot_MemoryGetAllPositions(bot_data_t *botData, int timeNewest, int timeOldest, int typeFlags, int locationNumber, vec3_t *positions, int numPositionsStart, int positionsSize, int *numResults, int flagsExclude)
{
  int v14; 
  bot_mem_event_t *v15; 
  __int64 v16; 
  float v17; 
  int v18; 
  unsigned __int64 timeOldesta; 
  bot_mem_iterator_t memIt; 

  timeOldesta = __PAIR64__(timeNewest, timeOldest);
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25338, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData", __PAIR64__(timeNewest, timeOldest)) )
    __debugbreak();
  if ( !positions && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25339, ASSERT_TYPE_ASSERT, "( positions )", (const char *)&queryFormat, "positions") )
    __debugbreak();
  if ( !numResults && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25340, ASSERT_TYPE_ASSERT, "( numResults )", (const char *)&queryFormat, "numResults") )
    __debugbreak();
  memset_0(&memIt, -1, 0xF8ui64);
  memset_0(memIt.stopIndex, -1, sizeof(memIt.stopIndex));
  v14 = *numResults;
  v15 = Bot_MemoryIterate(botData, timeNewest, timeOldest, &memIt);
  if ( v14 + numPositionsStart < positionsSize )
  {
    while ( 1 )
    {
      if ( !v15 )
        return;
      if ( _bittest(&typeFlags, v15->type) && ((unsigned __int8)flagsExclude & v15->flags) == 0 )
        break;
LABEL_20:
      v18 = *numResults;
      v15 = Bot_MemoryIterate(botData, SHIDWORD(timeOldesta), timeOldesta, &memIt);
      if ( v18 + numPositionsStart >= positionsSize )
        return;
    }
    if ( locationNumber == 1 )
    {
      v16 = numPositionsStart + *numResults;
      positions[v16].v[0] = v15->location1.v[0];
      positions[v16].v[1] = v15->location1.v[1];
      v17 = v15->location1.v[2];
    }
    else
    {
      if ( locationNumber != 2 )
      {
LABEL_19:
        ++*numResults;
        goto LABEL_20;
      }
      v16 = numPositionsStart + *numResults;
      positions[v16].v[0] = v15->location2.v[0];
      positions[v16].v[1] = v15->location2.v[1];
      v17 = v15->location2.v[2];
    }
    positions[v16].v[2] = v17;
    goto LABEL_19;
  }
}

/*
==============
Bot_MemoryGetMostRecentEvent
==============
*/
bot_mem_event_t *Bot_MemoryGetMostRecentEvent(bot_data_t *botData, int typeFlags, int flagsRequire, int flagsExclude)
{
  bot_mem_event_t *v8; 
  BOOL v9; 
  BOOL v10; 
  bot_mem_iterator_t memIt; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25373, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  memset_0(&memIt, -1, 0xF8ui64);
  memset_0(memIt.stopIndex, -1, sizeof(memIt.stopIndex));
  v8 = Bot_MemoryIterate(botData, level.time, 0, &memIt);
  if ( !v8 )
    return 0i64;
  while ( 1 )
  {
    if ( _bittest(&typeFlags, v8->type) )
    {
      v9 = !flagsRequire || (unsigned __int8)(flagsRequire & v8->flags) == flagsRequire;
      v10 = !flagsExclude || ((unsigned __int8)flagsExclude & v8->flags) == 0;
      if ( v9 && v10 )
        break;
    }
    v8 = Bot_MemoryIterate(botData, level.time, 0, &memIt);
    if ( !v8 )
      return 0i64;
  }
  return v8;
}

/*
==============
Bot_MemoryGetMostRecentPosition
==============
*/
__int64 Bot_MemoryGetMostRecentPosition(bot_data_t *botData, int typeFlags, int locationNumber, vec3_t *resultPos, int *resultTime)
{
  bot_mem_event_t *v9; 
  float v11; 
  bot_mem_iterator_t memIt; 

  if ( !botData )
  {
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25401, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
      __debugbreak();
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25373, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
      __debugbreak();
  }
  memset_0(&memIt, -1, 0xF8ui64);
  memset_0(memIt.stopIndex, -1, sizeof(memIt.stopIndex));
  v9 = Bot_MemoryIterate(botData, level.time, 0, &memIt);
  if ( !v9 )
    return 0i64;
  while ( !_bittest(&typeFlags, v9->type) )
  {
    v9 = Bot_MemoryIterate(botData, level.time, 0, &memIt);
    if ( !v9 )
      return 0i64;
  }
  if ( locationNumber == 1 )
  {
    resultPos->v[0] = v9->location1.v[0];
    resultPos->v[1] = v9->location1.v[1];
    v11 = v9->location1.v[2];
LABEL_14:
    resultPos->v[2] = v11;
    goto LABEL_15;
  }
  if ( locationNumber == 2 )
  {
    resultPos->v[0] = v9->location2.v[0];
    resultPos->v[1] = v9->location2.v[1];
    v11 = v9->location2.v[2];
    goto LABEL_14;
  }
LABEL_15:
  if ( resultTime )
    *resultTime = v9->time;
  return 1i64;
}

/*
==============
Bot_MemoryIterate
==============
*/
bot_mem_event_t *Bot_MemoryIterate(bot_data_t *botData, int timeNewest, int timeOldest, bot_mem_iterator_t *memIt)
{
  __int64 CharacterIndex; 
  char *v9; 
  char v10; 
  unsigned __int8 v11; 
  char v12; 
  char v13; 
  char v14; 
  int time; 
  __int64 v17; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25226, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !memIt && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25227, ASSERT_TYPE_ASSERT, "( memIt )", (const char *)&queryFormat, "memIt") )
    __debugbreak();
  CharacterIndex = Bot_GetCharacterIndex(botData);
  if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
    __debugbreak();
  if ( (unsigned int)CharacterIndex >= ComCharacterLimits::ms_gameData.m_characterCount )
  {
    if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
      __debugbreak();
    LODWORD(v17) = CharacterIndex;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25239, ASSERT_TYPE_ASSERT, "(unsigned)( charIndex ) < (unsigned)( ComCharacterLimits::GetCharacterMaxCount() )", "charIndex doesn't index ComCharacterLimits::GetCharacterMaxCount()\n\t%i not in [0, %i)", v17, ComCharacterLimits::ms_gameData.m_characterCount) )
      __debugbreak();
  }
  v9 = &memIt->index[CharacterIndex];
  if ( *v9 >= 0 )
  {
    v13 = *v9 - 1;
    *v9 = v13;
    if ( v13 < 0 )
    {
      *v9 = 31;
      goto LABEL_34;
    }
  }
  else
  {
    v10 = LOBYTE(botData->botMatchData.botMemory.eventNext) - 1;
    *v9 = v10;
    if ( v10 < 0 )
    {
      *v9 = 31;
      v10 = 31;
    }
    if ( timeNewest > 0 )
    {
      v11 = v10;
      while ( botData->botMatchData.botMemory.events[v11].time > timeNewest )
      {
        v10 = v11 - 1;
        *v9 = v11 - 1;
        if ( (char)(v11 - 1) == botData->botMatchData.botMemory.eventNext - 1 )
          goto LABEL_47;
        --v11;
        if ( v10 < 0 )
        {
          v11 = 31;
          *v9 = 31;
          v10 = 31;
        }
      }
    }
    v12 = v10 + 1;
    if ( (char)(v10 + 1) >= 32 )
      v12 = 0;
    v9[248] = v12;
    v13 = *v9;
  }
  if ( v13 < 0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25289, ASSERT_TYPE_ASSERT, "( *index >= 0 )", (const char *)&queryFormat, "*index >= 0") )
    __debugbreak();
  if ( *v9 >= 32 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25290, ASSERT_TYPE_ASSERT, "( *index < ( 32 ) )", (const char *)&queryFormat, "*index < BOT_MEM_MAX_EVENTS") )
    __debugbreak();
LABEL_34:
  if ( v9[248] < 0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25291, ASSERT_TYPE_ASSERT, "( *stopIndex >= 0 )", (const char *)&queryFormat, "*stopIndex >= 0") )
    __debugbreak();
  if ( v9[248] >= 32 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25292, ASSERT_TYPE_ASSERT, "( *stopIndex < ( 32 ) )", (const char *)&queryFormat, "*stopIndex < BOT_MEM_MAX_EVENTS") )
    __debugbreak();
  v14 = *v9;
  if ( *v9 != v9[248] )
  {
    time = botData->botMatchData.botMemory.events[(unsigned __int8)v14].time;
    if ( time )
    {
      if ( timeOldest <= 0 || time >= timeOldest )
        return Bot_MemoryReadEvent(botData, v14);
    }
  }
LABEL_47:
  *v9 = -1;
  return 0i64;
}

/*
==============
Bot_MemoryIterateInit
==============
*/
void Bot_MemoryIterateInit(bot_mem_iterator_t *memIt)
{
  if ( !memIt && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25104, ASSERT_TYPE_ASSERT, "( memIt )", (const char *)&queryFormat, "memIt") )
    __debugbreak();
  memset_0(memIt, -1, 0xF8ui64);
  memset_0(memIt->stopIndex, -1, sizeof(memIt->stopIndex));
}

/*
==============
Bot_MemoryIterateTeams
==============
*/
bot_mem_event_t *Bot_MemoryIterateTeams(bot_data_t *botData, const bitarray<224> *teamFlags, int timeNewest, int timeOldest, bot_mem_iterator_t *memIt)
{
  bitarray_base<bitarray<224> > *v7; 
  int v10; 
  __int64 i; 
  gentity_s *v12; 
  __int16 EntityIndex; 
  const SvClientMP *MpClient; 
  BOOL IsClientConnected; 
  bot_data_t *EntityData; 
  __int64 CharacterIndex; 
  char *v18; 
  char v19; 
  bot_mem_event_t *Event; 
  __int64 v21; 
  __int64 v22; 
  __int64 v23; 
  int time; 
  bot_data_t *botDataa; 
  bot_mem_event_t *v26; 

  time = 0;
  botDataa = NULL;
  v7 = (bitarray_base<bitarray<224> > *)teamFlags;
  v26 = NULL;
  if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
    __debugbreak();
  if ( (int)ComCharacterLimits::ms_gameData.m_characterCount > 2048 )
  {
    if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
      __debugbreak();
    LODWORD(v22) = ComCharacterLimits::ms_gameData.m_characterCount;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25132, ASSERT_TYPE_ASSERT, "( ComCharacterLimits::GetCharacterMaxCount() ) <= ( ( 2048 ) )", "ComCharacterLimits::GetCharacterMaxCount() <= MAX_GENTITIES\n\t%i, %i", v22, 2048) )
      __debugbreak();
  }
  if ( level.teammode == TEAMMODE_FFA )
  {
    if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25137, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
      __debugbreak();
    if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25138, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
      __debugbreak();
    if ( bitarray_base<bitarray<224>>::testBit(v7, botData->botInfo.sentient->eTeam) )
      return Bot_MemoryIterate(botData, timeNewest, timeOldest, memIt);
    else
      return 0i64;
  }
  v10 = 0;
  for ( i = 0i64; ; ++i )
  {
    if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
      __debugbreak();
    if ( v10 >= (int)ComCharacterLimits::ms_gameData.m_characterCount )
      break;
    v12 = &level.gentities[i];
    if ( !&level.gentities[i] )
      goto LABEL_64;
    EntityIndex = G_GetEntityIndex(&level.gentities[i]);
    if ( !G_IsEntityInUse(EntityIndex) || !v12->sentient )
      goto LABEL_64;
    if ( v12->client )
    {
      MpClient = SV_Client_GetMpClient(v12->s.number);
      IsClientConnected = Bot_IsClientConnected(MpClient);
    }
    else
    {
      if ( !v12->agent )
        goto LABEL_33;
      IsClientConnected = v12->s.eType == ET_AGENT;
    }
    if ( !IsClientConnected )
      goto LABEL_64;
LABEL_33:
    if ( SV_BotIsBotEnt(v12) )
    {
      if ( !v12->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25159, ASSERT_TYPE_ASSERT, "( ent->sentient )", (const char *)&queryFormat, "ent->sentient") )
        __debugbreak();
      if ( bitarray_base<bitarray<224>>::testBit(v7, v12->sentient->eTeam) )
      {
        EntityData = Bot_GetEntityData(v12);
        if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25163, ASSERT_TYPE_ASSERT, "( otherBotData )", (const char *)&queryFormat, "otherBotData") )
          __debugbreak();
        CharacterIndex = Bot_GetCharacterIndex(EntityData);
        if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
          __debugbreak();
        if ( (unsigned int)CharacterIndex >= ComCharacterLimits::ms_gameData.m_characterCount )
        {
          if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
            __debugbreak();
          LODWORD(v23) = ComCharacterLimits::ms_gameData.m_characterCount;
          LODWORD(v22) = CharacterIndex;
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25165, ASSERT_TYPE_ASSERT, "(unsigned)( charIndex ) < (unsigned)( ComCharacterLimits::GetCharacterMaxCount() )", "charIndex doesn't index ComCharacterLimits::GetCharacterMaxCount()\n\t%i not in [0, %i)", v22, v23) )
            __debugbreak();
        }
        v18 = &memIt->index[CharacterIndex];
        v19 = *v18;
        if ( *v18 == -2 )
          goto LABEL_63;
        if ( v19 == -1 )
        {
          Bot_MemoryIterate(EntityData, timeNewest, timeOldest, memIt);
          v19 = *v18;
        }
        if ( v19 < 0 )
        {
LABEL_62:
          *v18 = -2;
LABEL_63:
          v7 = (bitarray_base<bitarray<224> > *)teamFlags;
          goto LABEL_64;
        }
        Event = Bot_MemoryReadEvent(EntityData, v19);
        if ( !Event )
          goto LABEL_63;
        while ( (Event->flags & 8) != 0 && botData != EntityData )
        {
          Bot_MemoryIterate(EntityData, timeNewest, timeOldest, memIt);
          if ( *v18 < 0 )
            goto LABEL_62;
          Event = Bot_MemoryReadEvent(EntityData, *v18);
          if ( !Event )
            goto LABEL_63;
        }
        v7 = (bitarray_base<bitarray<224> > *)teamFlags;
        if ( Event->time >= time )
        {
          botDataa = EntityData;
          time = Event->time;
          v26 = Event;
        }
      }
    }
LABEL_64:
    ++v10;
  }
  if ( botDataa )
  {
    v21 = Bot_GetCharacterIndex(botDataa);
    if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
      __debugbreak();
    if ( (unsigned int)v21 >= ComCharacterLimits::ms_gameData.m_characterCount )
    {
      if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
        __debugbreak();
      LODWORD(v23) = ComCharacterLimits::ms_gameData.m_characterCount;
      LODWORD(v22) = v21;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25208, ASSERT_TYPE_ASSERT, "(unsigned)( charIndex ) < (unsigned)( ComCharacterLimits::GetCharacterMaxCount() )", "charIndex doesn't index ComCharacterLimits::GetCharacterMaxCount()\n\t%i not in [0, %i)", v22, v23) )
        __debugbreak();
    }
    Bot_MemoryIterate(botDataa, timeNewest, timeOldest, memIt);
    if ( memIt->index[v21] < 0 )
      memIt->index[v21] = -2;
  }
  return v26;
}

/*
==============
Bot_MemoryReadEvent
==============
*/
bot_mem_event_t *Bot_MemoryReadEvent(bot_data_t *botData, const int index)
{
  __int64 v2; 
  __int64 v5; 

  v2 = index;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25092, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( (unsigned int)v2 >= 0x20 )
  {
    LODWORD(v5) = v2;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25093, ASSERT_TYPE_ASSERT, "(unsigned)( index ) < (unsigned)( ( 32 ) )", "index doesn't index BOT_MEM_MAX_EVENTS\n\t%i not in [0, %i)", v5, 32) )
      __debugbreak();
  }
  return (bot_mem_event_t *)((char *)&botData->botMatchData.botMemory + 100 * v2);
}

/*
==============
Bot_MemoryUpdateEntityEvent
==============
*/
void Bot_MemoryUpdateEntityEvent(bot_data_t *botData, bot_mem_type_t type, __int16 entNum, int locationNum, int newestTime, int oldestTime)
{
  gentity_s *v10; 
  bot_mem_event_t *i; 
  __int64 v12; 
  bot_mem_iterator_t memIt; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25023, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( (unsigned int)type >= BOT_MEM_TYPE_COUNT )
  {
    LODWORD(v12) = type;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25024, ASSERT_TYPE_ASSERT, "(unsigned)( type ) < (unsigned)( BOT_MEM_TYPE_COUNT )", "type doesn't index BOT_MEM_TYPE_COUNT\n\t%i not in [0, %i)", v12, 5) )
      __debugbreak();
  }
  if ( (unsigned int)(locationNum - 1) > 1 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25025, ASSERT_TYPE_ASSERT, "( (locationNum == 1) || (locationNum == 2) )", (const char *)&queryFormat, "(locationNum == 1) || (locationNum == 2)") )
    __debugbreak();
  v10 = &g_entities[entNum];
  if ( !v10 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25032, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  memset_0(&memIt, -1, 0xF8ui64);
  memset_0(memIt.stopIndex, -1, sizeof(memIt.stopIndex));
  for ( i = Bot_MemoryIterate(botData, newestTime, oldestTime, &memIt); i; i = Bot_MemoryIterate(botData, newestTime, oldestTime, &memIt) )
  {
    if ( i->type == type && i->entNum == entNum )
    {
      if ( locationNum == 1 )
      {
        i->location1.v[0] = v10->r.currentOrigin.v[0];
        i->location1.v[1] = v10->r.currentOrigin.v[1];
        i->location1.v[2] = v10->r.currentOrigin.v[2];
      }
      else if ( locationNum == 2 )
      {
        i->location2.v[0] = v10->r.currentOrigin.v[0];
        i->location2.v[1] = v10->r.currentOrigin.v[1];
        i->location2.v[2] = v10->r.currentOrigin.v[2];
      }
    }
  }
}

/*
==============
Bot_MemoryWriteEvent
==============
*/
void Bot_MemoryWriteEvent(bot_data_t *botData, bot_mem_type_t type, const Weapon *weapon, const vec3_t *location1, const vec3_t *location2, __int16 entNum)
{
  bool v13; 
  bool v16; 
  bool v17; 
  bool v19; 
  __int64 p_location1; 
  bot_mem_type_t v26; 
  gentity_s *v28; 
  sentient_s *sentient; 
  signed __int64 v30; 
  const pathnode_t *v31; 
  const playerState_s *EntityPlayerStateConst; 
  __int64 v33; 
  __int64 v34; 
  __int64 v35; 

  _RBX = botData;
  _RDI = location1;
  _R15 = weapon;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24946, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( (unsigned int)type >= BOT_MEM_TYPE_COUNT )
  {
    LODWORD(v33) = type;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24947, ASSERT_TYPE_ASSERT, "(unsigned)( type ) < (unsigned)( BOT_MEM_TYPE_COUNT )", "type doesn't index BOT_MEM_TYPE_COUNT\n\t%i not in [0, %i)", v33, 5) )
      __debugbreak();
  }
  _R14 = location2;
  __asm { vmovss  xmm0, dword ptr [rdi] }
  if ( type == BOT_MEM_KNOWN_ENEMY )
  {
    __asm { vcomiss xmm0, cs:__real@7f7fffff }
    v13 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24952, ASSERT_TYPE_ASSERT, "( location1[0] < 3.402823466e+38F )", (const char *)&queryFormat, "location1[0] < FLT_MAX");
    if ( v13 )
      __debugbreak();
    __asm
    {
      vxorps  xmm0, xmm0, xmm0
      vucomiss xmm0, dword ptr [rdi]
    }
    if ( !v13 )
    {
      __asm
      {
        vucomiss xmm0, dword ptr [rdi+4]
        vucomiss xmm0, dword ptr [rdi+8]
      }
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24953, ASSERT_TYPE_ASSERT, "( Vec3NotZero( location1 ) )", (const char *)&queryFormat, "Vec3NotZero( location1 )") )
        __debugbreak();
    }
  }
  else
  {
    __asm
    {
      vmovss  xmm1, cs:__real@7f7fffff
      vcomiss xmm0, xmm1
      vmovaps [rsp+68h+var_28], xmm6
    }
    if ( (unsigned int)type < BOT_MEM_KNOWN_ENEMY )
      __asm { vcomiss xmm1, dword ptr [r14] }
    v16 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24957, ASSERT_TYPE_ASSERT, "( (location1[0] < 3.402823466e+38F) && (location2[0] < 3.402823466e+38F) )", (const char *)&queryFormat, "(location1[0] < FLT_MAX) && (location2[0] < FLT_MAX)");
    v17 = !v16;
    if ( v16 )
      __debugbreak();
    __asm
    {
      vxorps  xmm6, xmm6, xmm6
      vucomiss xmm6, dword ptr [rdi]
    }
    if ( !v16 )
    {
      __asm
      {
        vucomiss xmm6, dword ptr [rdi+4]
        vucomiss xmm6, dword ptr [rdi+8]
      }
      v19 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24958, ASSERT_TYPE_ASSERT, "( Vec3NotZero( location1 ) )", (const char *)&queryFormat, "Vec3NotZero( location1 )");
      v17 = !v19;
      if ( v19 )
        __debugbreak();
    }
    __asm { vucomiss xmm6, dword ptr [r14] }
    if ( v17 )
    {
      __asm { vucomiss xmm6, dword ptr [r14+4] }
      if ( v17 )
      {
        __asm { vucomiss xmm6, dword ptr [r14+8] }
        if ( v17 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24959, ASSERT_TYPE_ASSERT, "( Vec3NotZero( location2 ) )", (const char *)&queryFormat, "Vec3NotZero( location2 )") )
          __debugbreak();
      }
    }
    __asm { vmovaps xmm6, [rsp+68h+var_28] }
  }
  _RSI = _RBX->botMatchData.botMemory.eventNext;
  memset_0(&_RBX->botMatchData.botMemory.events[_RSI].time, 0, 0x60ui64);
  _RBX->botMatchData.botMemory.events[_RSI].type = type;
  p_location1 = (__int64)&_RBX->botMatchData.botMemory.events[_RSI].location1;
  _RBX->botMatchData.botMemory.events[_RSI].time = level.time;
  __asm
  {
    vmovups ymm0, ymmword ptr [r15]
    vmovups ymmword ptr [rsi+rbx+7328h], ymm0
    vmovups xmm1, xmmword ptr [r15+20h]
    vmovups xmmword ptr [rsi+rbx+7348h], xmm1
    vmovsd  xmm0, qword ptr [r15+30h]
    vmovsd  qword ptr [rsi+rbx+7358h], xmm0
  }
  *(_DWORD *)&_RBX->botMatchData.botMemory.events[_RSI].weapon.weaponCamo = *(_DWORD *)&_R15->weaponCamo;
  _RBX->botMatchData.botMemory.events[_RSI].entNum = entNum;
  *(float *)p_location1 = _RDI->v[0];
  *(float *)(p_location1 + 4) = _RDI->v[1];
  *(float *)(p_location1 + 8) = _RDI->v[2];
  _RBX->botMatchData.botMemory.events[_RSI].location2 = *location2;
  v26 = _RBX->botMatchData.botMemory.events[_RSI].type;
  if ( v26 == BOT_MEM_KNOWN_ENEMY )
  {
    __asm { vmovss  xmm2, cs:__real@43960000; radius }
    Bot_AIKnownEnemiesRadial(&_RBX->botInfo, (const vec3_t *)p_location1, *(double *)&_XMM2, 0xFu);
    v26 = _RBX->botMatchData.botMemory.events[_RSI].type;
  }
  if ( v26 == BOT_MEM_DEATH && entNum >= 0 && entNum < level.num_entities )
  {
    if ( G_IsEntityInUse(entNum) )
    {
      v28 = &level.gentities[entNum];
      if ( v28 )
      {
        sentient = v28->sentient;
        if ( sentient )
        {
          v30 = sentient - level.sentients;
          if ( !s_botSentientHistory && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1969, ASSERT_TYPE_ASSERT, "( s_botSentientHistory )", (const char *)&queryFormat, "s_botSentientHistory") )
            __debugbreak();
          if ( (unsigned int)v30 >= level.maxSentients )
          {
            LODWORD(v35) = level.maxSentients;
            LODWORD(v34) = v30;
            if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1970, ASSERT_TYPE_ASSERT, "(unsigned)( sentientIndex ) < (unsigned)( level.maxSentients )", "sentientIndex doesn't index level.maxSentients\n\t%i not in [0, %i)", v34, v35) )
              __debugbreak();
          }
          if ( level.time - s_botSentientHistory[v30].lastTimeMovedPositions > 5000 )
          {
            v31 = Sentient_NearestNode(v28->sentient);
            _RBX->botMatchData.botMemory.events[_RSI].flags |= 1u;
            _RBX->botMatchData.botMemory.events[_RSI].nodeIndex = -1;
            if ( v31 )
              _RBX->botMatchData.botMemory.events[_RSI].nodeIndex = Path_ConvertNodeToIndex(v31);
          }
        }
        EntityPlayerStateConst = G_GetEntityPlayerStateConst(v28);
        if ( EntityPlayerStateConst && BG_HasPerk(&EntityPlayerStateConst->perks, 0x30u) )
          _RBX->botMatchData.botMemory.events[_RSI].flags |= 8u;
      }
    }
  }
  _RBX->botMatchData.botMemory.eventNext = (_RBX->botMatchData.botMemory.eventNext + 1) % 32;
}

/*
==============
Bot_NameSet
==============
*/
void Bot_NameSet(bot_data_t *botData, const char *name, const char *debugPersonalityTag)
{
  gentity_s *ent; 
  int number; 
  gclient_s *client; 
  __int64 v10; 
  __int64 v11; 
  __int64 v12; 
  const char *v13; 
  const char *v14; 
  bot_difficulty_t Difficulty; 
  __int64 v16; 
  __int64 v17; 
  char dest[36]; 
  char v19[40]; 
  char buffer[8]; 
  char v21[8]; 

  if ( !name && !debugPersonalityTag && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3506, ASSERT_TYPE_ASSERT, "( name || debugPersonalityTag )", (const char *)&queryFormat, "name || debugPersonalityTag") )
    __debugbreak();
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3508, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3509, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !botData->botInfo.ent->client && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3510, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent->client )", (const char *)&queryFormat, "botData->botInfo.ent->client") )
    __debugbreak();
  if ( botData->botInfo.ent->s.number >= SvClient::ms_clientCount )
  {
    LODWORD(v16) = botData->botInfo.ent->s.number;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3511, ASSERT_TYPE_ASSERT, "(unsigned)( botData->botInfo.ent->s.number ) < (unsigned)( SvClient::GetClientCount() )", "botData->botInfo.ent->s.number doesn't index SvClient::GetClientCount()\n\t%i not in [0, %i)", v16, SvClient::ms_clientCount) )
      __debugbreak();
  }
  ent = botData->botInfo.ent;
  number = ent->s.number;
  client = ent->client;
  SV_ClientMP_GetUserinfo(number, buffer, 1024);
  if ( !Info_Validate(buffer) )
  {
    __asm { vmovsd  xmm0, qword ptr cs:aNameBadinfo; "\\name\\badinfo" }
    strcpy(v21, "dinfo");
    __asm { vmovsd  qword ptr [rsp+4D8h+buffer], xmm0 }
  }
  if ( name )
    Core_strcpy(dest, 0x24ui64, name);
  if ( debugPersonalityTag )
  {
    v10 = -1i64;
    v11 = -1i64;
    do
      ++v11;
    while ( debugPersonalityTag[v11] );
    if ( (_DWORD)v11 != 3 )
    {
      v12 = -1i64;
      do
        ++v12;
      while ( debugPersonalityTag[v12] );
      LODWORD(v17) = 3;
      LODWORD(v16) = v12;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3533, ASSERT_TYPE_ASSERT, "( I_strlen( debugPersonalityTag ) ) == ( BOT_NAME_SUFFIX_PERSONALITY_LENGTH )", "I_strlen( debugPersonalityTag ) == BOT_NAME_SUFFIX_PERSONALITY_LENGTH\n\t%i, %i", v16, v17) )
        __debugbreak();
    }
    if ( name )
    {
      v13 = name;
    }
    else
    {
      v14 = Info_ValueForKey(buffer, (const char *)&stru_143C9A1A4);
      if ( !v14 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3452, ASSERT_TYPE_ASSERT, "( originalName )", (const char *)&queryFormat, "originalName") )
        __debugbreak();
      do
        ++v10;
      while ( v14[v10] );
      if ( Bot_HasDebugSuffixInName(v14) )
        LODWORD(v10) = v10 - 7;
      if ( (int)v10 + 1 > 36 )
      {
        LODWORD(v17) = 36;
        LODWORD(v16) = v10 + 1;
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3462, ASSERT_TYPE_ASSERT, "( nameSize + 1 ) <= ( 36 )", "nameSize + 1 <= MAX_PLAYERNAME_LENGTH\n\t%i, %i", v16, v17) )
          __debugbreak();
      }
      Core_strncpy(v19, 0x24ui64, v14, (int)v10);
      v13 = v19;
    }
    Com_sprintf<36>((char (*)[36])dest, "%s [%s", v13, debugPersonalityTag);
    Difficulty = Bot_GetDifficulty(botData);
    Com_sprintf<36>((char (*)[36])dest, "%s%i]", dest, (unsigned int)Difficulty);
  }
  if ( dest[0] )
  {
    Info_RemoveKey(buffer, (const char *)&stru_143C9A1A4);
    Info_SetValueForKey(buffer, (const char *)&stru_143C9A1A4, dest);
    Core_strcpy(client->sess.cs.name, 0x24ui64, dest);
    Core_strcpy(client->sess.newnetname, 0x24ui64, dest);
  }
  SV_ClientMP_SetUserinfo(number, buffer);
}

/*
==============
Bot_NavPathExists
==============
*/
_BOOL8 Bot_NavPathExists(const bot_info_t *botInfo)
{
  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13968, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  return Nav_HasPath(botInfo->pNavigator);
}

/*
==============
Bot_NearbyBotExists
==============
*/

_BOOL8 __fastcall Bot_NearbyBotExists(bot_data_t *botData, double maxDist, int onlySameTeam)
{
  bool v7; 
  unsigned int v11; 
  unsigned int v12; 
  unsigned int v13; 
  gentity_s *ent; 
  _BOOL8 v19; 
  gentity_s *results; 
  bitarray<224> result; 
  bitarray<224> teamFlags; 

  __asm
  {
    vmovaps [rsp+0C0h+var_20], xmm6
    vmovaps xmm6, xmm1
  }
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23808, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23809, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( onlySameTeam )
  {
    if ( level.teammode == TEAMMODE_FFA )
    {
      v7 = Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80);
      if ( Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) )
        _RAX = Com_TeamsSP_GetAllCombatTeamFlags();
      else
        _RAX = Com_TeamsMP_GetAllTeamFlags();
      __asm
      {
        vmovups xmm0, xmmword ptr [rax]
        vmovsd  xmm1, qword ptr [rax+10h]
      }
      v11 = _RAX->array[6] & 0xFFEFFFFF;
      __asm { vmovups xmmword ptr [rbp+57h+result.array], xmm0 }
      v12 = result.array[0];
      __asm { vmovsd  qword ptr [rbp+57h+result.array+10h], xmm1 }
      if ( v7 )
        v12 = result.array[0] & 0xF7FFFFFF;
      v13 = v11 & 0xFF9FFFFF;
    }
    else
    {
      Com_Teams_GetEnemyTeamFlags(&result, botData->botInfo.ent->sentient->eTeam);
      v13 = result.array[6];
      v12 = result.array[0];
    }
    result.array[1] = ~result.array[1];
    result.array[2] = ~result.array[2];
    result.array[3] = ~result.array[3];
    *(_QWORD *)&result.array[4] = ~*(_QWORD *)&result.array[4];
    __asm { vmovsd  xmm1, qword ptr [rbp+57h+result.array+10h] }
    result.array[0] = ~v12;
    __asm { vmovups xmm0, xmmword ptr [rbp+57h+result.array] }
    teamFlags.array[6] = ~v13;
  }
  else
  {
    if ( Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) )
      _RAX = Com_TeamsSP_GetAllTeamFlags();
    else
      _RAX = Com_TeamsMP_GetAllTeamFlags();
    __asm
    {
      vmovups xmm0, xmmword ptr [rax]
      vmovsd  xmm1, qword ptr [rax+10h]
    }
    teamFlags.array[6] = _RAX->array[6];
  }
  ent = botData->botInfo.ent;
  __asm
  {
    vmovaps xmm2, xmm6; maxDist
    vmovsd  qword ptr [rbp+57h+var_48.array+10h], xmm1
    vmovups xmmword ptr [rbp+57h+var_48.array], xmm0
  }
  v19 = Bot_GetClosestCharacterList(ent, &ent->r.currentOrigin, *(const float *)&_XMM2, 1, 0, 1, 0, &teamFlags, &results, 1) > 0;
  __asm { vmovaps xmm6, [rsp+0C0h+var_20] }
  return v19;
}

/*
==============
Bot_NeedsTraversalJump
==============
*/
_BOOL8 Bot_NeedsTraversalJump(const bot_data_t *botData, const usercmd_s *cmd)
{
  int traversal; 
  pathnode_t *v4; 
  pathnode_t *v5; 
  int v6; 
  __int64 v10; 
  __int64 v11; 
  __int64 v12; 
  vec3_t v13; 
  vec3_t pos; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15610, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  traversal = botData->botInfo.traversal;
  if ( (traversal & 0x1F) == 0 || (traversal & 0xE) == 0 && level.time > botData->botInfo.traverseJumpTime )
    return 0i64;
  v4 = NULL;
  if ( Path_NodeValid(botData->botInfo.nodeNegotStart) )
    v5 = Path_ConvertIndexToNode(botData->botInfo.nodeNegotStart);
  else
    v5 = NULL;
  if ( Path_NodeValid(botData->botInfo.nodeNegotEnd) )
    v4 = Path_ConvertIndexToNode(botData->botInfo.nodeNegotEnd);
  if ( !v5 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15617, ASSERT_TYPE_ASSERT, "(negotiationStartNode)", "%s\n\tNo traversal start node.  botInfo->traversal = %i, botInfo->nodeNegotStart = %i, botInfo->traverseJumpTime = %i", "negotiationStartNode", botData->botInfo.traversal, botData->botInfo.nodeNegotStart, botData->botInfo.traverseJumpTime) )
    __debugbreak();
  if ( !v4 )
  {
    LODWORD(v12) = botData->botInfo.traverseJumpTime;
    LODWORD(v11) = botData->botInfo.nodeNegotEnd;
    LODWORD(v10) = botData->botInfo.traversal;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15617, ASSERT_TYPE_ASSERT, "(negotiationEndNode)", "%s\n\tNo traversal end node.  botInfo->traversal = %i, botInfo->nodeNegotEnd = %i, botInfo->traverseJumpTime = %i", "negotiationEndNode", v10, v11, v12) )
      __debugbreak();
  }
  pathnode_t::GetPos(v5, &pos);
  pathnode_t::GetPos(v4, &v13);
  if ( level.time <= botData->botInfo.traverseJumpTime )
    return 1i64;
  v6 = botData->botInfo.traversal;
  if ( (v6 & 4) != 0 )
    return 1i64;
  if ( (v6 & 8) != 0 )
    return 1i64;
  __asm
  {
    vmovss  xmm0, dword ptr [rsp+88h+var_38+8]
    vsubss  xmm1, xmm0, dword ptr [rsp+88h+pos+8]
    vcomiss xmm1, cs:__real@c0a00000
  }
  return (v6 & 8) != 0;
}

/*
==============
Bot_NegotiationGetType
==============
*/
__int64 Bot_NegotiationGetType(const pathnode_t *negotiationNode)
{
  unsigned int v2; 
  __int64 v3; 
  char v4; 
  __int64 v6; 

  if ( !negotiationNode && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3663, ASSERT_TYPE_ASSERT, "( negotiationNode )", (const char *)&queryFormat, "negotiationNode") )
    __debugbreak();
  if ( !Path_IsNodeTraversalBegin(negotiationNode) )
    return 0i64;
  v2 = Path_ConvertNodeToIndex(negotiationNode);
  v3 = v2 >> 1;
  v4 = 4 * (v2 & 1);
  if ( (unsigned int)v3 >= (unsigned int)s_botTraversalTypesCount )
  {
    LODWORD(v6) = v3;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3675, ASSERT_TYPE_ASSERT, "(unsigned)( byteIndex ) < (unsigned)( s_botTraversalTypesCount )", "byteIndex doesn't index s_botTraversalTypesCount\n\t%i not in [0, %i)", v6, s_botTraversalTypesCount) )
      __debugbreak();
  }
  return (unsigned int)(1 << (((15 << v4) & s_botTraversalTypes[v3]) >> v4));
}

/*
==============
Bot_NegotiationPointReached
==============
*/
__int64 Bot_NegotiationPointReached(bot_data_t *botData, bot_traversal_stage_t stage, usercmd_s *cmd)
{
  int v9; 
  pathnode_t *NegotiationStartNode; 
  pathnode_t *NegotiationEndNode; 
  bool v12; 
  __int64 result; 
  bool v20; 
  bool v35; 
  int v42; 
  int traversal; 
  bool v45; 
  int v70; 
  int v73; 
  unsigned int v74; 
  int v75; 
  int v76; 
  int v77; 
  int traverseJumpTime; 
  int v79; 
  int v80; 
  int v81; 
  gentity_s *ent; 
  int scriptPress; 
  const dvar_t *v95; 
  int traverseAvoidTime; 
  int v98; 
  char *string; 
  __int64 v101; 
  __int64 v102; 
  int v103; 
  unsigned int v104; 
  int v105; 
  vec3_t v107; 
  vec3_t pos; 

  v103 = 0;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15313, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15316, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  v9 = botData->botInfo.traversal & 8;
  v105 = v9;
  if ( (botData->botInfo.traversal & 0x1F) != 0 )
  {
    if ( Path_NodeValid(botData->botInfo.nodeNegotStart) )
      NegotiationStartNode = Path_ConvertIndexToNode(botData->botInfo.nodeNegotStart);
    else
      NegotiationStartNode = NULL;
    if ( Path_NodeValid(botData->botInfo.nodeNegotEnd) )
      NegotiationEndNode = Path_ConvertIndexToNode(botData->botInfo.nodeNegotEnd);
    else
      NegotiationEndNode = NULL;
    if ( !NegotiationStartNode && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15330, ASSERT_TYPE_ASSERT, "(negotiationStartNode)", "%s\n\tNo traversal start node.  botInfo->traversal = %i, botInfo->nodeNegotStart = %i, botInfo->traverseJumpTime = %i", "negotiationStartNode", botData->botInfo.traversal, botData->botInfo.nodeNegotStart, botData->botInfo.traverseJumpTime) )
      __debugbreak();
    if ( !NegotiationEndNode )
    {
      LODWORD(v102) = botData->botInfo.traverseJumpTime;
      LODWORD(v101) = botData->botInfo.nodeNegotEnd;
      LODWORD(string) = botData->botInfo.traversal;
      v12 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15332, ASSERT_TYPE_ASSERT, "(negotiationEndNode)", "%s\n\tNo traversal end node.  botInfo->traversal = %i, botInfo->nodeNegotEnd = %i, botInfo->traverseJumpTime = %i", "negotiationEndNode", string, v101, v102);
      goto LABEL_30;
    }
  }
  else
  {
    if ( !botData->botInfo.pNavigator && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15336, ASSERT_TYPE_ASSERT, "( Bot_HasNavigator( botInfo ) )", (const char *)&queryFormat, "Bot_HasNavigator( botInfo )") )
      __debugbreak();
    if ( !Bot_PathHasNegotiation(&botData->botInfo) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15337, ASSERT_TYPE_ASSERT, "( Bot_PathHasNegotiation( botInfo ) )", (const char *)&queryFormat, "Bot_PathHasNegotiation( botInfo )") )
      __debugbreak();
    NegotiationStartNode = Bot_PathGetNegotiationStartNode(&botData->botInfo);
    if ( !NegotiationStartNode && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15339, ASSERT_TYPE_ASSERT, "( negotiationStartNode )", (const char *)&queryFormat, "negotiationStartNode") )
      __debugbreak();
    NegotiationEndNode = Bot_PathGetNegotiationEndNode(&botData->botInfo);
    if ( !NegotiationEndNode )
    {
      v12 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15341, ASSERT_TYPE_ASSERT, "( negotiationEndNode )", (const char *)&queryFormat, "negotiationEndNode");
LABEL_30:
      if ( v12 )
        __debugbreak();
    }
  }
  if ( !NegotiationStartNode && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15344, ASSERT_TYPE_ASSERT, "( negotiationStartNode )", (const char *)&queryFormat, "negotiationStartNode") )
    __debugbreak();
  if ( !NegotiationEndNode && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15345, ASSERT_TYPE_ASSERT, "( negotiationEndNode )", (const char *)&queryFormat, "negotiationEndNode") )
    __debugbreak();
  pathnode_t::GetPos(NegotiationStartNode, &pos);
  pathnode_t::GetPos(NegotiationEndNode, &v107);
  if ( stage == BOT_TRAVERSAL_STAGE_BETWEEN_START_AND_END_NODE )
  {
    __asm
    {
      vmovss  xmm0, dword ptr [rsp+108h+var_A8]
      vmovss  xmm1, dword ptr [rsp+108h+var_A8+4]
      vmovss  xmm2, dword ptr [rsp+108h+var_A8+8]
    }
    if ( v9 && (botData->botInfo.playerState->mantleState.flags & 8) != 0 )
      return 1i64;
  }
  else if ( stage )
  {
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15373, ASSERT_TYPE_ASSERT, (const char *)&queryFormat.fmt + 3, "unreachable") )
      __debugbreak();
    __asm
    {
      vmovss  xmm2, [rsp+108h+var_B8]
      vmovss  xmm1, [rsp+108h+var_B8]
      vmovss  xmm0, [rsp+108h+var_B8]
    }
  }
  else
  {
    __asm
    {
      vmovss  xmm0, dword ptr [rsp+108h+pos]
      vmovss  xmm1, dword ptr [rsp+108h+pos+4]
      vmovss  xmm2, dword ptr [rsp+108h+pos+8]
    }
  }
  v20 = botData->botInfo.playerState == NULL;
  __asm
  {
    vmovaps [rsp+108h+var_48], xmm6
    vmovaps [rsp+108h+var_58], xmm7
    vmovaps [rsp+108h+var_68], xmm8
    vsubss  xmm6, xmm0, dword ptr [rax+130h]
    vsubss  xmm7, xmm1, dword ptr [rax+134h]
    vsubss  xmm8, xmm2, dword ptr [rax+138h]
    vmovaps [rsp+108h+var_78], xmm9
  }
  if ( v20 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15377, ASSERT_TYPE_ASSERT, "( botInfo->playerState )", (const char *)&queryFormat, "botInfo->playerState") )
    __debugbreak();
  v20 = level.frameDuration == 0;
  _RAX = botData->botInfo.playerState;
  __asm
  {
    vmovss  xmm0, dword ptr [rax+40h]
    vmovss  xmm2, dword ptr [rax+3Ch]
    vmovss  xmm3, dword ptr [rax+44h]
    vmulss  xmm1, xmm0, xmm0
    vmulss  xmm0, xmm2, xmm2
    vaddss  xmm2, xmm1, xmm0
    vmulss  xmm1, xmm3, xmm3
    vmulss  xmm3, xmm6, xmm6
    vaddss  xmm9, xmm2, xmm1
    vmulss  xmm0, xmm7, xmm7
    vaddss  xmm2, xmm3, xmm0
    vmulss  xmm1, xmm8, xmm8
    vaddss  xmm6, xmm2, xmm1
  }
  if ( !level.frameDuration )
  {
    v35 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_level_locals.h", 349, ASSERT_TYPE_ASSERT, "(level.frameDuration)", "%s\n\tAccessing frame duration before it's been set", "level.frameDuration");
    v20 = !v35;
    if ( v35 )
      __debugbreak();
  }
  __asm { vcomiss xmm6, cs:__real@43c80000 }
  if ( v20 )
    goto LABEL_56;
  __asm
  {
    vxorps  xmm0, xmm0, xmm0
    vcvtsi2ss xmm0, xmm0, eax
    vmulss  xmm0, xmm0, cs:__real@358637bd
    vmulss  xmm1, xmm0, cs:__real@40000000
    vmulss  xmm2, xmm1, xmm9
    vaddss  xmm3, xmm2, cs:__real@358637bd
    vcomiss xmm6, xmm3
  }
  if ( (unsigned __int64)(level.frameDuration * (__int64)level.frameDuration) >> 32 != 0 || v20 )
LABEL_56:
    v42 = 1;
  else
    v42 = 0;
  traversal = botData->botInfo.traversal;
  __asm { vmovaps xmm9, [rsp+108h+var_78] }
  v45 = (traversal & 0x1F) == 0;
  if ( (traversal & 0x1F) == 0 )
  {
    v45 = (unsigned int)stage <= BOT_TRAVERSAL_STAGE_BETWEEN_START_AND_END_NODE;
    if ( stage != BOT_TRAVERSAL_STAGE_BETWEEN_START_AND_END_NODE )
      goto LABEL_61;
  }
  __asm
  {
    vmovss  xmm0, dword ptr [rsp+108h+var_A8]
    vmovss  xmm1, dword ptr [rsp+108h+var_A8+4]
    vmovss  xmm8, dword ptr [rsp+108h+pos]
    vmovss  xmm4, dword ptr [rsp+108h+pos+4]
    vsubss  xmm3, xmm1, xmm4
    vsubss  xmm7, xmm0, xmm8
    vmulss  xmm2, xmm3, xmm3
    vmulss  xmm0, xmm7, xmm7
    vaddss  xmm1, xmm2, xmm0
    vcomiss xmm1, cs:__real@3c23d70a
  }
  if ( !v45 )
  {
    _RAX = botData->botInfo.ent;
    __asm
    {
      vsqrtss xmm6, xmm1, xmm1
      vmovss  xmm1, cs:__real@3f800000
      vcmpless xmm0, xmm6, cs:__real@80000000
      vblendvps xmm0, xmm6, xmm1, xmm0
      vdivss  xmm5, xmm1, xmm0
      vmovss  xmm0, dword ptr [rax+134h]
      vsubss  xmm2, xmm0, xmm4
      vmovss  xmm0, dword ptr [rax+130h]
      vmulss  xmm1, xmm3, xmm5
      vmulss  xmm4, xmm2, xmm1
      vsubss  xmm3, xmm0, xmm8
      vmulss  xmm1, xmm7, xmm5
      vmulss  xmm2, xmm3, xmm1
      vaddss  xmm0, xmm4, xmm2
      vcomiss xmm0, xmm6
    }
    v70 = 1;
  }
  else
  {
LABEL_61:
    v70 = 0;
  }
  __asm
  {
    vmovaps xmm8, [rsp+108h+var_68]
    vmovaps xmm7, [rsp+108h+var_58]
  }
  if ( v42 || (v104 = 0, v70) )
    v104 = 1;
  if ( !cmd->forwardmove && !cmd->rightmove && !v9 )
    botData->botInfo.traverseProgressTime = level.time;
  if ( !v104 && (traversal & 0x1F) != 0 )
  {
    v73 = traversal & 1;
    v74 = ((unsigned int)botData->botInfo.flags >> 5) & 1;
    v75 = Bot_IsOnGround(botData);
    v76 = botData->botInfo.traversal & 0x4800;
    if ( GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 5u) && (LOBYTE(botData->scriptedAgentInfo.scriptGoal.pos.y) & 0x10) != 0 )
      botData->botInfo.traverseProgressJumps = 0;
    v77 = v105;
    if ( !v105 && v75 && v74 && !v76 )
    {
      if ( !Jump_InJumpDebounce(botData->botInfo.playerState, cmd) )
      {
        botData->botInfo.scriptPress |= 8u;
        traverseJumpTime = level.time + 500;
        if ( botData->botInfo.traverseJumpTime > level.time + 500 )
          traverseJumpTime = botData->botInfo.traverseJumpTime;
        ++botData->botInfo.traverseProgressJumps;
        botData->botInfo.traverseJumpTime = traverseJumpTime;
      }
      v77 = 0;
    }
    v79 = 0;
    v80 = level.time - botData->botInfo.traverseProgressTime;
    if ( !v73 )
      LOBYTE(v79) = level.time - botData->botInfo.traverseStartTime > 4000;
    v81 = 500;
    if ( (botData->botInfo.traversal & 0x800) != 0 || v77 )
      v81 = 1000;
    if ( v80 > v81 || v79 )
    {
      _RAX = botData->botInfo.ent;
      __asm
      {
        vmovss  xmm0, dword ptr [rax+130h]
        vmovss  xmm1, dword ptr [rax+134h]
        vsubss  xmm3, xmm0, dword ptr [r14+6E78h]
        vsubss  xmm2, xmm1, dword ptr [r14+6E7Ch]
        vmovss  xmm0, dword ptr [rax+138h]
        vsubss  xmm4, xmm0, dword ptr [r14+6E80h]
        vmulss  xmm2, xmm2, xmm2
        vmulss  xmm1, xmm3, xmm3
        vaddss  xmm6, xmm2, xmm1
      }
      if ( v73 )
      {
        __asm
        {
          vmulss  xmm0, xmm4, xmm4
          vaddss  xmm6, xmm0, xmm6
        }
      }
      if ( !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 5u) )
        __asm { vcomiss xmm6, cs:__real@42c80000 }
      if ( botData->botInfo.traverseProgressJumps >= 2 || v79 )
      {
        if ( !v105 && v74 && v75 && (botData->botInfo.traversal & 0x4000) == 0 && !Jump_InJumpDebounce(botData->botInfo.playerState, cmd) )
        {
          scriptPress = botData->botInfo.scriptPress;
          if ( (scriptPress & 8) == 0 )
            ++botData->botInfo.traverseProgressJumps;
          botData->botInfo.traversal |= 0x4000u;
          botData->botInfo.scriptPress = scriptPress | 8;
        }
        if ( (v80 > 1000 || v79) && !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 5u) && (v75 || v73) )
        {
          v95 = DVARINT_bot_DrawBrokenTraversals;
          if ( !DVARINT_bot_DrawBrokenTraversals && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawBrokenTraversals") )
            __debugbreak();
          Dvar_CheckFrontendServerThread(v95);
          if ( v95->current.integer > 0 && (LOBYTE(botData->scriptedAgentInfo.blackboard.m_ShootParams.m_Pos.v[0]) & 0x40) == 0 && (botData->botInfo.traversal & 0x1000) == 0 )
          {
            __asm { vmovss  xmm2, cs:__real@41800000; duplicateRadius }
            Bot_DebugAddErrorLocation(botData, BOT_ERROR_LOC_TRAVERSAL, *(double *)&_XMM2, &botData->botInfo.ent->r.currentOrigin, NULL, NULL, NULL);
          }
          traverseAvoidTime = botData->botInfo.traverseAvoidTime;
          botData->botInfo.flags |= 0x80000u;
          v98 = level.time + 10000;
          if ( traverseAvoidTime > level.time + 10000 )
            v98 = traverseAvoidTime;
          botData->botInfo.traverseAvoidTime = v98;
          Bot_TraversalClear(&botData->botInfo);
          if ( (botData->botInfo.flags & 0x100000) != 0 )
          {
            Bot_BadPath(botData->botInfo.ent);
          }
          else
          {
            botData->botInfo.pNavigator->ClearPath(botData->botInfo.pNavigator);
            botData->botInfo.flags |= 0x100000u;
          }
        }
      }
      else
      {
        ent = botData->botInfo.ent;
        botData->botInfo.traverseProgressLoc.v[0] = ent->r.currentOrigin.v[0];
        botData->botInfo.traverseProgressLoc.v[1] = ent->r.currentOrigin.v[1];
        botData->botInfo.traverseProgressLoc.v[2] = ent->r.currentOrigin.v[2];
        botData->botInfo.traverseProgressTime = level.time;
      }
    }
  }
  result = v104;
  __asm { vmovaps xmm6, [rsp+108h+var_48] }
  return result;
}

/*
==============
Bot_NotifyBadPathOnOwnerCollide
==============
*/
void Bot_NotifyBadPathOnOwnerCollide(bot_data_t *botData)
{
  gentity_s *ent; 
  bool v38; 
  bool v39; 
  vec3_t forward; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10111, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10122, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  if ( EntHandle::isDefined(&botData->botInfo.ent->r.ownerNum) && level.time - botData->botInfo.lastBadPath > 1000 )
  {
    ent = botData->botInfo.ent;
    __asm { vmovaps [rsp+0C8h+var_78], xmm12 }
    _RDI = EntHandle::ent(&ent->r.ownerNum);
    if ( !_RDI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10127, ASSERT_TYPE_ASSERT, "( botOwner )", (const char *)&queryFormat, "botOwner") )
      __debugbreak();
    __asm
    {
      vmovss  xmm12, cs:__real@3f800000
      vmovaps [rsp+0C8h+var_18], xmm6
      vmovaps [rsp+0C8h+var_28], xmm7
      vmovaps [rsp+0C8h+var_38], xmm8
    }
    if ( Bot_CanSeeAndCanFireOnEnemy(botData) )
    {
      __asm { vmovss  xmm7, cs:__real@3ee66666 }
    }
    else
    {
      __asm
      {
        vmovss  xmm0, dword ptr [rdi+130h]
        vmovss  xmm1, dword ptr [rdi+134h]
        vsubss  xmm6, xmm0, dword ptr [rcx+130h]
        vsubss  xmm5, xmm1, dword ptr [rcx+134h]
        vmovss  xmm0, dword ptr [rdi+138h]
        vsubss  xmm4, xmm0, dword ptr [rcx+138h]
        vmulss  xmm1, xmm6, xmm6
        vmulss  xmm2, xmm5, xmm5
        vaddss  xmm3, xmm2, xmm1
        vmulss  xmm0, xmm4, xmm4
        vaddss  xmm2, xmm3, xmm0
        vsqrtss xmm1, xmm2, xmm2
        vcmpless xmm0, xmm1, cs:__real@80000000
        vblendvps xmm0, xmm1, xmm12, xmm0
        vdivss  xmm1, xmm12, xmm0
        vmulss  xmm7, xmm6, xmm1
        vmulss  xmm6, xmm5, xmm1
        vmulss  xmm8, xmm4, xmm1
      }
      AngleVectors(&botData->botInfo.ent->r.currentAngles, &forward, NULL, NULL);
      __asm
      {
        vmulss  xmm1, xmm7, dword ptr [rsp+0C8h+forward]
        vmulss  xmm2, xmm6, dword ptr [rsp+0C8h+forward+4]
        vmulss  xmm0, xmm8, dword ptr [rsp+0C8h+forward+8]
        vaddss  xmm3, xmm2, xmm1
        vaddss  xmm1, xmm3, xmm0
        vmovss  xmm0, cs:__real@3ee66666
        vcvtss2sd xmm3, xmm1, xmm1
        vcmpltsd xmm2, xmm3, cs:__real@bfdccccccccccccd
        vblendvps xmm7, xmm12, xmm0, xmm2
      }
    }
    _RSI = botData->botInfo.ent;
    v38 = _RDI == NULL;
    if ( !_RDI )
    {
      v39 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10086, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent");
      v38 = !v39;
      if ( v39 )
        __debugbreak();
    }
    __asm
    {
      vmovss  xmm0, dword ptr [rdi+138h]
      vsubss  xmm2, xmm0, dword ptr [rsi+138h]
      vmovss  xmm1, dword ptr [rdi+114h]
      vandps  xmm2, xmm2, cs:__xmm@7fffffff7fffffff7fffffff7fffffff
      vmulss  xmm0, xmm1, cs:__real@40000000
      vcomiss xmm2, xmm0
    }
    if ( v38 )
    {
      __asm
      {
        vmovss  xmm0, dword ptr [rsi+130h]
        vmovss  xmm1, dword ptr [rsi+134h]
        vsubss  xmm2, xmm1, dword ptr [rdi+134h]
        vmovss  xmm6, dword ptr [rdi+10Ch]
        vsubss  xmm4, xmm0, dword ptr [rdi+130h]
        vmulss  xmm1, xmm6, cs:__real@41800000
        vmulss  xmm3, xmm2, xmm2
        vmulss  xmm0, xmm4, xmm4
        vaddss  xmm5, xmm3, xmm0
        vmulss  xmm2, xmm1, xmm7
        vmulss  xmm0, xmm2, xmm6
        vmulss  xmm3, xmm0, xmm7
        vcomiss xmm5, xmm3
      }
    }
    __asm
    {
      vmovaps xmm8, [rsp+0C8h+var_38]
      vmovaps xmm7, [rsp+0C8h+var_28]
      vmovaps xmm6, [rsp+0C8h+var_18]
      vmovaps xmm12, [rsp+0C8h+var_78]
    }
  }
}

/*
==============
Bot_PathClear
==============
*/
void Bot_PathClear(bot_info_t *botInfo)
{
  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4337, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  if ( Nav_HasPath(botInfo->pNavigator) )
    Nav_ClearGoalPos(botInfo->pNavigator);
}

/*
==============
Bot_PathExists
==============
*/
int Bot_PathExists(const bot_info_t *botInfo)
{
  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13725, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  return Bot_NavPathExists(botInfo);
}

/*
==============
Bot_PathGetNegotiationEndNode
==============
*/
pathnode_t *Bot_PathGetNegotiationEndNode(const bot_info_t *botInfo)
{
  pathnode_t *EndNodeFromLink; 
  const char *v4; 
  vec3_t outStartPos; 
  nav_posAlongPathResults_t pResults; 

  bfx::AreaHandle::AreaHandle(&pResults.m_hArea);
  bfx::LinkHandle::LinkHandle(&pResults.m_hLink);
  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13701, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  __asm { vmovss  xmm1, cs:__real@43800000; dist }
  Nav_GetPosAlongPath(botInfo->pNavigator, *(float *)&_XMM1, 1, &pResults);
  if ( pResults.m_PosType != POS_ON_LINK && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13704, ASSERT_TYPE_ASSERT, "( results.m_PosType == bfx::POS_ON_LINK )", (const char *)&queryFormat, "results.m_PosType == bfx::POS_ON_LINK") )
    __debugbreak();
  if ( !bfx::LinkHandle::IsValid(&pResults.m_hLink) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13705, ASSERT_TYPE_ASSERT, "( results.m_hLink.IsValid() )", (const char *)&queryFormat, "results.m_hLink.IsValid()") )
    __debugbreak();
  EndNodeFromLink = Nav_GetEndNodeFromLink(&pResults.m_hLink);
  Nav_GetStartPosFromLink(&pResults.m_hLink, &outStartPos);
  if ( !EndNodeFromLink )
  {
    v4 = vtos(&outStartPos);
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13713, ASSERT_TYPE_ASSERT, "(negotEndNode)", "%s\n\tNo negotiation end node found for link ending at location %s", "negotEndNode", v4) )
      __debugbreak();
  }
  bfx::LinkHandle::~LinkHandle(&pResults.m_hLink);
  bfx::AreaHandle::~AreaHandle(&pResults.m_hArea);
  return EndNodeFromLink;
}

/*
==============
Bot_PathGetNegotiationStartNode
==============
*/
pathnode_t *Bot_PathGetNegotiationStartNode(const bot_info_t *botInfo)
{
  pathnode_t *StartNodeFromLink; 
  const char *v4; 
  vec3_t outStartPos; 
  nav_posAlongPathResults_t pResults; 

  bfx::AreaHandle::AreaHandle(&pResults.m_hArea);
  bfx::LinkHandle::LinkHandle(&pResults.m_hLink);
  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13674, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  __asm { vmovss  xmm1, cs:__real@43800000; dist }
  Nav_GetPosAlongPath(botInfo->pNavigator, *(float *)&_XMM1, 1, &pResults);
  if ( pResults.m_PosType != POS_ON_LINK && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13677, ASSERT_TYPE_ASSERT, "( results.m_PosType == bfx::POS_ON_LINK )", (const char *)&queryFormat, "results.m_PosType == bfx::POS_ON_LINK") )
    __debugbreak();
  if ( !bfx::LinkHandle::IsValid(&pResults.m_hLink) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13678, ASSERT_TYPE_ASSERT, "( results.m_hLink.IsValid() )", (const char *)&queryFormat, "results.m_hLink.IsValid()") )
    __debugbreak();
  StartNodeFromLink = Nav_GetStartNodeFromLink(&pResults.m_hLink);
  Nav_GetStartPosFromLink(&pResults.m_hLink, &outStartPos);
  if ( !StartNodeFromLink )
  {
    v4 = vtos(&outStartPos);
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13686, ASSERT_TYPE_ASSERT, "(negotStartNode)", "%s\n\tNo negotiation begin node found for link starting at location %s", "negotStartNode", v4) )
      __debugbreak();
  }
  bfx::LinkHandle::~LinkHandle(&pResults.m_hLink);
  bfx::AreaHandle::~AreaHandle(&pResults.m_hArea);
  return StartNodeFromLink;
}

/*
==============
Bot_PathHasNegotiation
==============
*/
char Bot_PathHasNegotiation(const bot_info_t *botInfo)
{
  nav_posAlongPathResults_t pResults; 

  if ( !botInfo )
  {
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13648, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo", -2i64) )
      __debugbreak();
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13922, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
      __debugbreak();
  }
  if ( !botInfo->pNavigator && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13650, ASSERT_TYPE_ASSERT, "( Bot_HasNavigator( botInfo ) )", (const char *)&queryFormat, "Bot_HasNavigator( botInfo )") )
    __debugbreak();
  if ( Bot_NavPathExists(botInfo) )
  {
    if ( !botInfo->pNavigator && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13653, ASSERT_TYPE_ASSERT, "( botInfo->pNavigator )", (const char *)&queryFormat, "botInfo->pNavigator") )
      __debugbreak();
    bfx::AreaHandle::AreaHandle(&pResults.m_hArea);
    bfx::LinkHandle::LinkHandle(&pResults.m_hLink);
    __asm { vmovss  xmm1, cs:__real@43800000; dist }
    Nav_GetPosAlongPath(botInfo->pNavigator, *(float *)&_XMM1, 1, &pResults);
    if ( pResults.m_PosType == POS_ON_LINK )
    {
      bfx::LinkHandle::~LinkHandle(&pResults.m_hLink);
      bfx::AreaHandle::~AreaHandle(&pResults.m_hArea);
      return 1;
    }
    bfx::LinkHandle::~LinkHandle(&pResults.m_hLink);
    bfx::AreaHandle::~AreaHandle(&pResults.m_hArea);
  }
  return 0;
}

/*
==============
Bot_PathStuckRecover
==============
*/

__int64 __fastcall Bot_PathStuckRecover(bot_data_t *botData, double _XMM1_8)
{
  unsigned int PathToGoalInternal; 
  int v5; 
  vec3_t goal; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10550, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  _RBX = &botData->8;
  PathToGoalInternal = 0;
  if ( !Bot_IsOnGround(botData) || !Bot_StuckShouldReact(&botData->botInfo) )
    return 0i64;
  v5 = Bot_PathExists(&botData->botInfo);
  if ( !Bot_IsStuckReacting(&botData->botInfo) )
  {
    if ( v5 )
    {
      __asm { vxorps  xmm1, xmm1, xmm1; goalRadius }
      if ( !Bot_IsAtPathEnd(botData, *(float *)&_XMM1) )
      {
        Bot_GetActiveGoal(botData, &goal);
        __asm { vmovss  xmm2, dword ptr [rbx+244h]; goalRadius }
        PathToGoalInternal = Bot_GetPathToGoalInternal(botData, &goal, *(float *)&_XMM2, "stuck");
        if ( PathToGoalInternal )
          botData->botInfo.lastPathCalcTime = level.time - 750;
      }
    }
  }
  if ( botData == (bot_data_t *)-8i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7797, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  if ( botData->botInfo.stuckFrames >= 0xFu )
    Bot_BadPath(_RBX->botInfo.ent);
  return PathToGoalInternal;
}

/*
==============
Bot_PersonalityFromString
==============
*/
__int64 Bot_PersonalityFromString(const char *botPersonalityString)
{
  const char *v2; 
  unsigned int v3; 
  __int64 v4; 
  __int64 v5; 
  const char *v6; 
  signed __int64 v7; 
  int v8; 
  __int64 v9; 
  int v10; 
  int v11; 
  int v12; 

  if ( !botPersonalityString && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4752, ASSERT_TYPE_ASSERT, "( botPersonalityString )", (const char *)&queryFormat, "botPersonalityString") )
    __debugbreak();
  v2 = BOT_STR_TBL_PERSONALITY[0];
  v3 = 0;
  if ( !BOT_STR_TBL_PERSONALITY[0] )
    return 3i64;
  v4 = 0i64;
  do
  {
    if ( !*v2 )
      break;
    v5 = 0x7FFFFFFFi64;
    v6 = botPersonalityString;
    if ( !v2 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 212, ASSERT_TYPE_SANITY, "( s0 )", (const char *)&queryFormat, "s0") )
      __debugbreak();
    if ( !botPersonalityString && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 213, ASSERT_TYPE_SANITY, "( s1 )", (const char *)&queryFormat, "s1") )
      __debugbreak();
    v7 = v2 - botPersonalityString;
    while ( 1 )
    {
      v8 = (unsigned __int8)v6[v7];
      v9 = v5;
      v10 = *(unsigned __int8 *)v6++;
      --v5;
      if ( !v9 )
        return v3;
      if ( v8 != v10 )
      {
        v11 = v8 + 32;
        if ( (unsigned int)(v8 - 65) > 0x19 )
          v11 = v8;
        v8 = v11;
        v12 = v10 + 32;
        if ( (unsigned int)(v10 - 65) > 0x19 )
          v12 = v10;
        if ( v8 != v12 )
          break;
      }
      if ( !v8 )
        return v3;
    }
    v2 = BOT_STR_TBL_PERSONALITY[++v4];
    ++v3;
  }
  while ( v2 );
  return 3i64;
}

/*
==============
Bot_PointInGoal
==============
*/

__int64 __fastcall Bot_PointInGoal(const bot_data_t *botData, double goalRadius, const vec3_t *point)
{
  bool v7; 
  char v22; 
  __int64 result; 
  vec3_t outFinalGoal; 

  __asm
  {
    vmovaps [rsp+68h+var_18], xmm6
    vmovaps xmm6, xmm1
  }
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14663, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v7 = &botData->8 == NULL;
  _RBX = &botData->8;
  __asm
  {
    vxorps  xmm0, xmm0, xmm0
    vucomiss xmm6, xmm0
  }
  if ( v7 )
    __asm { vmovss  xmm6, dword ptr [rbx+244h] }
  if ( !_RBX && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13725, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  if ( !Bot_NavPathExists(&_RBX->botInfo) )
    goto LABEL_12;
  Bot_GetPathFinalGoal(&_RBX->botInfo, &outFinalGoal);
  __asm
  {
    vmovss  xmm0, dword ptr [rsp+68h+outFinalGoal]
    vsubss  xmm3, xmm0, dword ptr [rdi]
    vmovss  xmm1, dword ptr [rsp+68h+outFinalGoal+4]
    vsubss  xmm2, xmm1, dword ptr [rdi+4]
    vmovss  xmm0, dword ptr [rsp+68h+outFinalGoal+8]
    vsubss  xmm4, xmm0, dword ptr [rdi+8]
    vmulss  xmm1, xmm3, xmm3
    vmulss  xmm2, xmm2, xmm2
    vaddss  xmm3, xmm2, xmm1
    vmulss  xmm0, xmm4, xmm4
    vaddss  xmm4, xmm3, xmm0
    vmulss  xmm1, xmm6, xmm6
    vcomiss xmm4, xmm1
  }
  if ( v22 )
    result = 1i64;
  else
LABEL_12:
    result = 0i64;
  __asm { vmovaps xmm6, [rsp+68h+var_18] }
  return result;
}

/*
==============
Bot_PortableRadarPing
==============
*/
void Bot_PortableRadarPing(bot_info_t *botInfo)
{
  unsigned int v2; 
  __int16 *v3; 
  __int16 v4; 
  gentity_s *GEntity; 
  gentity_s *v6; 
  gclient_s *client; 
  GameModeFlagContainer<enum EntityStateFlagsCommon,enum EntityStateFlagsSP,enum EntityStateFlagsMP,32> *p_eFlags; 
  __int16 number; 
  __int64 v12; 
  __int64 v13; 

  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6221, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  v2 = 0;
  v3 = s_botEntAffecters;
  do
  {
    v4 = *v3;
    if ( *v3 != 2047 )
    {
      if ( (unsigned __int16)v4 >= 0x800u )
      {
        LODWORD(v13) = 2048;
        LODWORD(v12) = v4;
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6114, ASSERT_TYPE_ASSERT, "(unsigned)( affecterEntNum ) < (unsigned)( ( 2048 ) )", "affecterEntNum doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v12, v13) )
          __debugbreak();
      }
      if ( G_IsEntityInUse(v4) )
      {
        GEntity = G_GetGEntity(v4);
        v6 = GEntity;
        if ( GEntity )
        {
          client = GEntity->client;
          p_eFlags = &client->ps.eFlags;
          if ( !client )
            p_eFlags = &GEntity->s.lerp.eFlags;
          if ( GameModeFlagValues::ms_mpValue != ACTIVE && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_gamemode_flags.h", 190, ASSERT_TYPE_ASSERT, "(IsFlagActive( index ))", "%s\n\tThis function must be used in a MP-only context", "IsFlagActive( index )") )
            __debugbreak();
          if ( GameModeFlagContainer<enum EntityStateFlagsCommon,enum EntityStateFlagsSP,enum EntityStateFlagsMP,32>::TestFlagInternal(p_eFlags, ACTIVE, 0x15u) )
          {
            if ( v6->client )
              number = v6->s.number;
            else
              number = v6->s.otherEntityNum;
            if ( (unsigned int)number >= 0x800 )
            {
              LODWORD(v13) = 2048;
              LODWORD(v12) = number;
              if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 207, ASSERT_TYPE_ASSERT, "(unsigned)( entityIndex ) < (unsigned)( ( 2048 ) )", "entityIndex doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v12, v13) )
                __debugbreak();
            }
            if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 208, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
              __debugbreak();
            if ( g_entities[number].r.isInUse != g_entityIsInUse[number] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 209, ASSERT_TYPE_ASSERT, "( g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex] )", (const char *)&queryFormat, "g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex]") )
              __debugbreak();
            if ( g_entityIsInUse[number] )
            {
              if ( (unsigned __int16)number >= 0x800u )
              {
                LODWORD(v13) = 2048;
                LODWORD(v12) = number;
                if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6237, ASSERT_TYPE_ASSERT, "(unsigned)( ownerEntNum ) < (unsigned)( ( 2048 ) )", "ownerEntNum doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v12, v13) )
                  __debugbreak();
              }
              if ( number == 2047 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6238, ASSERT_TYPE_ASSERT, "( ownerEntNum != ENTITYNUM_NONE )", (const char *)&queryFormat, "ownerEntNum != ENTITYNUM_NONE") )
                __debugbreak();
              if ( botInfo->ent->s.number == number )
              {
                _RBX = DCONST_DVARFLT_bg_compassPortableRadarRadius;
                if ( !DCONST_DVARFLT_bg_compassPortableRadarRadius && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 720, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bg_compassPortableRadarRadius") )
                  __debugbreak();
                Dvar_CheckFrontendServerThread(_RBX);
                __asm { vmovss  xmm2, dword ptr [rbx+28h]; radius }
                Bot_AIKnownEnemiesRadial(botInfo, &v6->r.currentOrigin, *(double *)&_XMM2, 0x1Au);
              }
            }
          }
        }
      }
    }
    ++v2;
    ++v3;
  }
  while ( v2 < 0x40 );
}

/*
==============
Bot_PredictEnemyCampSpots
==============
*/
__int64 Bot_PredictEnemyCampSpots(bot_data_t *botData, int humanOnly, vec3_t *spots, int maxCount)
{
  signed __int64 v4; 
  void *v6; 
  unsigned int v11; 
  signed int v12; 
  bool v13; 
  unsigned int v17; 
  unsigned int v18; 
  unsigned int v19; 
  __int64 v21; 
  _DWORD *v22; 
  bot_mem_event_t *v23; 
  unsigned __int8 flags; 
  __int16 entNum; 
  int v27; 
  const gentity_s *v28; 
  __int64 v29; 
  unsigned int v30; 
  _DWORD *v31; 
  __int64 v43; 
  int v44; 
  __int64 v45; 
  float *v46; 
  vec3_t *v47; 
  __int64 v48; 
  float *v49; 
  float *v50; 
  int v51; 
  __int64 v52; 
  __int64 v54; 
  bitarray<224> result; 
  bot_mem_iterator_t memIt; 
  int v59[402]; 
  _DWORD v60[598]; 

  v6 = alloca(v4);
  __asm { vmovaps [rsp+1250h+var_40], xmm6 }
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6740, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6741, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
    __debugbreak();
  if ( !spots && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6742, ASSERT_TYPE_ASSERT, "( spots )", (const char *)&queryFormat, "spots") )
    __debugbreak();
  if ( maxCount <= 0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6743, ASSERT_TYPE_ASSERT, "( maxCount > 0 )", (const char *)&queryFormat, "maxCount > 0") )
    __debugbreak();
  memset_0(&memIt, -1, 0xF8ui64);
  memset_0(memIt.stopIndex, -1, sizeof(memIt.stopIndex));
  v11 = 0;
  v12 = 0;
  if ( level.teammode == TEAMMODE_FFA )
  {
    v13 = Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80);
    if ( Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) )
      _RAX = Com_TeamsSP_GetAllCombatTeamFlags();
    else
      _RAX = Com_TeamsMP_GetAllTeamFlags();
    __asm
    {
      vmovups xmm0, xmmword ptr [rax]
      vmovsd  xmm1, qword ptr [rax+10h]
    }
    v17 = _RAX->array[6] & 0xFFEFFFFF;
    __asm { vmovups xmmword ptr [rsp+1250h+result.array], xmm0 }
    v18 = result.array[0];
    __asm { vmovsd  qword ptr [rsp+1250h+result.array+10h], xmm1 }
    if ( v13 )
      v18 = result.array[0] & 0xF7FFFFFF;
    v19 = v17 & 0xFF9FFFFF;
  }
  else
  {
    Com_Teams_GetEnemyTeamFlags(&result, botData->botInfo.sentient->eTeam);
    v19 = result.array[6];
    v18 = result.array[0];
  }
  result.array[1] = ~result.array[1];
  result.array[2] = ~result.array[2];
  result.array[3] = ~result.array[3];
  result.array[4] = ~result.array[4];
  result.array[5] = ~result.array[5];
  result.array[0] = ~v18;
  result.array[6] = ~v19;
  if ( (unsigned __int64)(int)SvClient::ms_clientCount > 0xC8 )
  {
    LODWORD(v54) = SvClient::ms_clientCount;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6751, ASSERT_TYPE_ASSERT, "( SvClient::GetClientCount() ) <= ( ( sizeof( *array_counter( potentialSpots ) ) + 0 ) )", "SvClient::GetClientCount() <= ARRAY_COUNT( potentialSpots )\n\t%i, %i", v54, 200) )
      __debugbreak();
  }
  __asm { vmovss  xmm6, cs:__real@47afc800 }
  v21 = 0i64;
  v22 = v60;
  while ( 1 )
  {
    v23 = Bot_MemoryIterateTeams(botData, &result, level.time, level.time - 30000, &memIt);
    _RBX = v23;
    if ( !v23 )
      break;
    flags = v23->flags;
    if ( (flags & 2) == 0 && (flags & 1) != 0 )
    {
      entNum = _RBX->entNum;
      if ( entNum < 0 || (v27 = 1, entNum >= level.num_entities) )
        v27 = 0;
      if ( _RBX->type == BOT_MEM_DEATH )
      {
        if ( v27 )
        {
          v28 = &level.gentities[entNum];
          if ( !humanOnly || !SV_BotIsBotEnt(v28) )
          {
            v29 = 0i64;
            if ( v21 <= 0 )
            {
LABEL_40:
              if ( v12 < (int)SvClient::ms_clientCount )
              {
                ++v12;
                *(v22 - 2) = LODWORD(_RBX->location1.v[0]);
                *(v22 - 1) = LODWORD(_RBX->location1.v[1]);
                *v22 = LODWORD(_RBX->location1.v[2]);
                v59[v21 + 200] = _RBX->entNum;
                v59[v21++] = 1;
                v22 += 3;
              }
            }
            else
            {
              v30 = _RBX->entNum;
              v31 = v60;
              while ( 1 )
              {
                if ( v59[v29 + 200] == v30 )
                {
                  __asm
                  {
                    vmovss  xmm0, dword ptr [rbx+8]
                    vsubss  xmm3, xmm0, dword ptr [rcx-8]
                    vmovss  xmm1, dword ptr [rbx+0Ch]
                    vsubss  xmm2, xmm1, dword ptr [rcx-4]
                    vmovss  xmm0, dword ptr [rbx+10h]
                    vsubss  xmm4, xmm0, dword ptr [rcx]
                    vmulss  xmm2, xmm2, xmm2
                    vmulss  xmm1, xmm3, xmm3
                    vmulss  xmm0, xmm4, xmm4
                    vaddss  xmm3, xmm2, xmm1
                    vaddss  xmm2, xmm3, xmm0
                    vcomiss xmm2, xmm6
                  }
                  if ( v59[v29 + 200] < v30 )
                    break;
                }
                ++v29;
                v31 += 3;
                if ( v29 >= v21 )
                  goto LABEL_40;
              }
              ++v59[v29];
            }
          }
        }
      }
    }
  }
  v43 = 0i64;
  if ( v21 < 4 )
  {
    v44 = maxCount;
  }
  else
  {
    v44 = maxCount;
    v45 = 0i64;
    v46 = (float *)v60;
    v47 = spots;
    do
    {
      if ( v59[v43] >= 2 && v45 < maxCount )
      {
        ++v11;
        v47->v[0] = *(v46 - 2);
        ++v45;
        v47->v[1] = *(v46 - 1);
        v47->v[2] = *v46;
        ++v47;
      }
      if ( v59[v43 + 1] >= 2 && v45 < maxCount )
      {
        ++v11;
        v47->v[0] = v46[1];
        ++v45;
        v47->v[1] = v46[2];
        v47->v[2] = v46[3];
        ++v47;
      }
      if ( v59[v43 + 2] >= 2 && v45 < maxCount )
      {
        ++v11;
        v47->v[0] = v46[4];
        ++v45;
        v47->v[1] = v46[5];
        v47->v[2] = v46[6];
        ++v47;
      }
      if ( v59[v43 + 3] >= 2 && v45 < maxCount )
      {
        ++v11;
        v47->v[0] = v46[7];
        ++v45;
        v47->v[1] = v46[8];
        v47->v[2] = v46[9];
        ++v47;
      }
      v43 += 4i64;
      v46 += 12;
    }
    while ( v43 < v21 - 3 );
  }
  if ( v43 < v21 )
  {
    v48 = (int)v11;
    v49 = &spots[v11].v[2];
    v50 = (float *)&v60[3 * v43];
    do
    {
      if ( v59[v43] >= 2 && v48 < v44 )
      {
        ++v11;
        v51 = *((_DWORD *)v50 - 2);
        ++v48;
        *(v49 - 1) = *(v50 - 1);
        *v49 = *v50;
        *((_DWORD *)v49 - 2) = v51;
        v49 += 3;
      }
      ++v43;
      v50 += 3;
    }
    while ( v43 < v21 );
  }
  v52 = v11;
  __asm { vmovaps xmm6, [rsp+1250h+var_40] }
  return v52;
}

/*
==============
Bot_PredictPosition
==============
*/
void Bot_PredictPosition(const gentity_s *ent, const bot_data_t *botData, const vec3_t *startPos, vec3_t *vPos)
{
  int v14; 
  int v15; 
  int v16; 
  int v17; 
  int v18; 
  int v19; 
  trajectory_t_secure tr; 

  _RDI = startPos;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17991, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17992, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState )", (const char *)&queryFormat, "botData->botInfo.playerState") )
    __debugbreak();
  _RBX = botData->botInfo.playerState;
  if ( !_RBX && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17995, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  __asm
  {
    vmovss  xmm0, dword ptr [rdi]
    vmovss  xmm1, dword ptr [rdi+4]
    vmovss  xmm2, dword ptr [rdi+8]
    vmovss  [rsp+78h+var_48], xmm0
    vmovss  dword ptr [rsp+78h+tr.trBase], xmm0
    vmovss  dword ptr [rsp+78h+tr.trBase+4], xmm1
    vmovss  dword ptr [rsp+78h+tr.trBase+8], xmm2
  }
  if ( (v14 & 0x7F800000) == 2139095040 )
    goto LABEL_26;
  __asm { vmovss  [rsp+78h+var_48], xmm1 }
  if ( (v15 & 0x7F800000) == 2139095040 )
    goto LABEL_26;
  __asm { vmovss  [rsp+78h+var_48], xmm2 }
  if ( (v16 & 0x7F800000) == 2139095040 )
  {
LABEL_26:
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18000, ASSERT_TYPE_SANITY, "( !IS_NAN( ( tr.trBase )[0] ) && !IS_NAN( ( tr.trBase )[1] ) && !IS_NAN( ( tr.trBase )[2] ) )", (const char *)&queryFormat, "!IS_NAN( ( tr.trBase )[0] ) && !IS_NAN( ( tr.trBase )[1] ) && !IS_NAN( ( tr.trBase )[2] )") )
      __debugbreak();
  }
  __asm
  {
    vmovss  xmm0, dword ptr [rbx+3Ch]
    vmovss  dword ptr [rsp+78h+tr.trDelta], xmm0
    vmovss  xmm1, dword ptr [rbx+40h]
    vmovss  [rsp+78h+var_48], xmm0
    vmovss  dword ptr [rsp+78h+tr.trDelta+4], xmm1
    vmovss  xmm2, dword ptr [rbx+44h]
    vmovss  dword ptr [rsp+78h+tr.trDelta+8], xmm2
  }
  if ( (v17 & 0x7F800000) == 2139095040 )
    goto LABEL_27;
  __asm { vmovss  [rsp+78h+var_48], xmm1 }
  if ( (v18 & 0x7F800000) == 2139095040 )
    goto LABEL_27;
  __asm { vmovss  [rsp+78h+var_48], xmm2 }
  if ( (v19 & 0x7F800000) == 2139095040 )
  {
LABEL_27:
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18003, ASSERT_TYPE_SANITY, "( !IS_NAN( ( tr.trDelta )[0] ) && !IS_NAN( ( tr.trDelta )[1] ) && !IS_NAN( ( tr.trDelta )[2] ) )", (const char *)&queryFormat, "!IS_NAN( ( tr.trDelta )[0] ) && !IS_NAN( ( tr.trDelta )[1] ) && !IS_NAN( ( tr.trDelta )[2] )") )
      __debugbreak();
  }
  *(_QWORD *)&tr.trType = 2i64;
  if ( !level.frameDuration && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_level_locals.h", 349, ASSERT_TYPE_ASSERT, "(level.frameDuration)", "%s\n\tAccessing frame duration before it's been set", "level.frameDuration") )
    __debugbreak();
  BgTrajectory::LegacyEvaluateTrajectory(&tr, 2 * level.frameDuration, vPos);
}

/*
==============
Bot_PredictSeeNode
==============
*/
bool Bot_PredictSeeNode(const bot_info_t *botInfo, const pathnode_t *node, vec3_t *predictedOriginOut)
{
  const pathnode_t *v6; 
  int v7; 
  const pathnode_t *v8; 
  pathlink_s *Links; 
  bool v10; 
  __int64 v11; 
  unsigned __int16 *p_nodeNum; 
  pathnode_t *v13; 

  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24834, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  if ( !botInfo->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24835, ASSERT_TYPE_ASSERT, "( botInfo->sentient )", (const char *)&queryFormat, "botInfo->sentient") )
    __debugbreak();
  v6 = Sentient_NearestNode(botInfo->sentient);
  v7 = 0;
  v8 = v6;
  if ( !node || !v6 )
    goto LABEL_19;
  v7 = Path_NodesVisibleNoPeek(v6, node);
  if ( v7 && predictedOriginOut )
    pathnode_t::GetPos((pathnode_t *)node, predictedOriginOut);
  Links = node->constant.Links;
  v10 = v7 == 0;
  if ( !v7 )
  {
    v11 = node->dynamic.wLinkCount - 1;
    p_nodeNum = &Links[v11].nodeNum;
    do
    {
      if ( v11 < 0 )
        break;
      v13 = Path_ConvertIndexToNode(*p_nodeNum);
      v7 = Path_NodesVisibleNoPeek(v8, v13);
      if ( v7 && predictedOriginOut )
        pathnode_t::GetPos(v13, predictedOriginOut);
      --v11;
      p_nodeNum -= 6;
    }
    while ( !v7 );
LABEL_19:
    v10 = v7 == 0;
  }
  return !v10;
}

/*
==============
Bot_PredictSeePointUsingNode
==============
*/
bool Bot_PredictSeePointUsingNode(const bot_info_t *botInfo, const vec3_t *point, const pathnode_t *nearestNodeToPoint, vec3_t *predictedPointOut)
{
  const pathnode_t *v8; 
  const pathnode_t *v9; 
  int v10; 
  const pathnode_t *v11; 
  pathlink_s *Links; 
  bool v13; 
  __int64 v14; 
  unsigned __int16 *p_nodeNum; 
  pathnode_t *v16; 

  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24869, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  if ( !botInfo->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24870, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  if ( nearestNodeToPoint || (v8 = Path_NearestNode(point, botInfo->ent->clipmask, NULL), (nearestNodeToPoint = v8) != NULL) )
  {
    if ( !botInfo->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24835, ASSERT_TYPE_ASSERT, "( botInfo->sentient )", (const char *)&queryFormat, "botInfo->sentient") )
      __debugbreak();
    v9 = Sentient_NearestNode(botInfo->sentient);
    v10 = 0;
    v11 = v9;
    if ( v9 )
    {
      v10 = Path_NodesVisibleNoPeek(v9, nearestNodeToPoint);
      if ( v10 && predictedPointOut )
        pathnode_t::GetPos((pathnode_t *)nearestNodeToPoint, predictedPointOut);
      Links = nearestNodeToPoint->constant.Links;
      v13 = v10 == 0;
      if ( v10 )
        goto LABEL_24;
      v14 = nearestNodeToPoint->dynamic.wLinkCount - 1;
      p_nodeNum = &Links[v14].nodeNum;
      do
      {
        if ( v14 < 0 )
          break;
        v16 = Path_ConvertIndexToNode(*p_nodeNum);
        v10 = Path_NodesVisibleNoPeek(v11, v16);
        if ( v10 && predictedPointOut )
          pathnode_t::GetPos(v16, predictedPointOut);
        --v14;
        p_nodeNum -= 6;
      }
      while ( !v10 );
    }
    v13 = v10 == 0;
LABEL_24:
    LOBYTE(v8) = !v13;
  }
  return (char)v8;
}

/*
==============
Bot_PredictSeePointUsingTacPoint
==============
*/
bool Bot_PredictSeePointUsingTacPoint(const bot_info_t *botInfo, const vec3_t *point, const tacpoint_t *nearestTPointToPoint, vec3_t *predictedPointOut)
{
  const tacpoint_t *ClosestPoint; 

  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24891, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  if ( nearestTPointToPoint || (ClosestPoint = TacGraph_FindClosestPoint(point), (nearestTPointToPoint = ClosestPoint) != NULL) )
    LOBYTE(ClosestPoint) = Bot_PredictSeeTacPoint(botInfo, nearestTPointToPoint, predictedPointOut);
  return (char)ClosestPoint;
}

/*
==============
Bot_PredictSeeTacPoint
==============
*/
bool Bot_PredictSeeTacPoint(const bot_info_t *botInfo, const tacpoint_t *testTacPoint, vec3_t *predictedOriginOut)
{
  const tacpoint_t *v9; 
  bool result; 
  __int64 PointsInRadiusWithVis_Sorted; 
  const bfx::AreaHandle *AreaForPoint; 
  AINavigator2D *v17; 
  __int64 v18; 
  __int64 v19; 
  const tacpoint_t *v20; 
  const bfx::AreaHandle *v25; 
  bfx::AreaHandle hEndArea; 
  bfx::AreaHandle hStartArea; 
  __int64 v32; 
  vec3_t endPos; 
  bfx::PathSpec pPathSpec; 
  vec3_t outPos; 
  tacpoint_t *pPoint2[128]; 
  void *retaddr; 

  _RAX = &retaddr;
  v32 = -2i64;
  __asm { vmovaps xmmword ptr [rax-48h], xmm6 }
  _RSI = predictedOriginOut;
  v9 = Sentient_NearestTacPoint(botInfo->sentient);
  if ( !botInfo->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24756, ASSERT_TYPE_ASSERT, "( botInfo->sentient )", (const char *)&queryFormat, "botInfo->sentient") )
    __debugbreak();
  if ( !botInfo->pNavigator && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24757, ASSERT_TYPE_ASSERT, "( botInfo->pNavigator )", (const char *)&queryFormat, "botInfo->pNavigator") )
    __debugbreak();
  if ( !testTacPoint && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24758, ASSERT_TYPE_ASSERT, "( testTacPoint )", (const char *)&queryFormat, "testTacPoint") )
    __debugbreak();
  if ( !v9 )
    goto LABEL_25;
  if ( TacVisGraph_HasVis(v9, testTacPoint) )
  {
    if ( _RSI )
      TacGraph_GetApproxGroundPosForPoint(testTacPoint, _RSI);
    result = 1;
    goto LABEL_26;
  }
  __asm
  {
    vmovss  xmm2, cs:__real@43800000; maxRadius
    vmovaps xmm3, xmm2; minRadiusZ
    vxorps  xmm6, xmm6, xmm6
    vxorps  xmm1, xmm1, xmm1; minRadius
  }
  PointsInRadiusWithVis_Sorted = TacGraph_FindPointsInRadiusWithVis_Sorted(&testTacPoint->m_Pos, *(float *)&_XMM1, *(float *)&_XMM2, *(float *)&_XMM3, testTacPoint, (const tacpoint_t **)pPoint2, 128);
  TacGraph_GetApproxGroundPosForPoint(testTacPoint, &outPos);
  AreaForPoint = TacGraph_GetAreaForPoint(testTacPoint);
  bfx::AreaHandle::AreaHandle(&hStartArea, AreaForPoint);
  v17 = botInfo->pNavigator->Get2DNavigator(botInfo->pNavigator);
  v18 = PointsInRadiusWithVis_Sorted;
  if ( (int)PointsInRadiusWithVis_Sorted <= 0 )
  {
LABEL_24:
    bfx::AreaHandle::~AreaHandle(&hStartArea);
LABEL_25:
    result = 0;
    goto LABEL_26;
  }
  v19 = 0i64;
  while ( 1 )
  {
    v20 = pPoint2[v19];
    if ( v20 == testTacPoint || !TacVisGraph_HasVis(v9, v20) )
      goto LABEL_23;
    pPathSpec.m_obstacleMode = BLOCKED_IF_ANY_MATCH;
    *(_QWORD *)&pPathSpec.m_obstacleBlockageFlags = -1i64;
    *(_QWORD *)&pPathSpec.m_areaPenaltyFlags = -1i64;
    pPathSpec.m_usePathSharingPenalty = 0;
    __asm
    {
      vmovss  [rbp+430h+pPathSpec.m_pathSharingPenalty], xmm6
      vmovss  [rbp+430h+pPathSpec.m_maxPathSharingPenalty], xmm6
      vmovss  [rbp+430h+pPathSpec.m_maxSearchDist], xmm6
    }
    bfx::PenaltyTable::PenaltyTable(&pPathSpec.m_penaltyTable);
    pPathSpec.m_snapMode = SNAP_CLOSEST;
    if ( v17 )
    {
      _RAX = AINavigator2D::GetPathSpec(v17);
      __asm
      {
        vmovups ymm0, ymmword ptr [rax]
        vmovups ymmword ptr [rbp+430h+pPathSpec.m_obstacleMode], ymm0
        vmovups ymm1, ymmword ptr [rax+20h]
        vmovups ymmword ptr [rbp+430h+pPathSpec.m_maxSearchDist], ymm1
        vmovups xmm0, xmmword ptr [rax+40h]
        vmovups xmmword ptr [rbp-40h], xmm0
      }
    }
    TacGraph_GetApproxGroundPosForPoint(pPoint2[v19], &endPos);
    v25 = TacGraph_GetAreaForPoint(pPoint2[v19]);
    bfx::AreaHandle::AreaHandle(&hEndArea, v25);
    if ( Nav_IsStraightLineReachable(&outPos, &hStartArea, &endPos, &hEndArea, &pPathSpec) )
      break;
    bfx::AreaHandle::~AreaHandle(&hEndArea);
LABEL_23:
    if ( ++v19 >= v18 )
      goto LABEL_24;
  }
  if ( _RSI )
  {
    __asm
    {
      vmovss  xmm0, dword ptr [rsp+530h+endPos]
      vmovss  dword ptr [rsi], xmm0
      vmovss  xmm1, dword ptr [rsp+530h+endPos+4]
      vmovss  dword ptr [rsi+4], xmm1
      vmovss  xmm0, dword ptr [rsp+530h+endPos+8]
      vmovss  dword ptr [rsi+8], xmm0
    }
  }
  bfx::AreaHandle::~AreaHandle(&hEndArea);
  bfx::AreaHandle::~AreaHandle(&hStartArea);
  result = 1;
LABEL_26:
  __asm { vmovaps xmm6, xmmword ptr [rsp+530h+var_48+8] }
  return result;
}

/*
==============
Bot_PreferWeaponOverLongRange
==============
*/
_BOOL8 Bot_PreferWeaponOverLongRange(const bot_data_t *botData, const Weapon *weapon)
{
  const playerState_s *playerState; 
  gentity_s *v6; 
  const sentient_s *sentient; 
  char v8; 

  _RBX = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1892, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  playerState = _RBX->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1896, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  if ( EntHandle::isDefined(&_RBX->botInfo.sentient->targetEnt) )
    v6 = EntHandle::ent(&_RBX->botInfo.sentient->targetEnt);
  else
    v6 = NULL;
  if ( Bot_Weap_IsNone(weapon) || !Bot_Weap_Ammo(playerState, weapon) )
    return 0i64;
  if ( Bot_IsFireFromHipRange(_RBX) )
    return 1i64;
  if ( Bot_Weap_IsWeapClass(playerState, weapon, WEAPCLASS_PISTOL) || Bot_AtScriptGoal(_RBX) && level.time - _RBX->botInfo.scriptGoalReachedTime >= 150 && (_RBX->botInfo.flags & 0x4000000) == 0 )
    return 0i64;
  if ( !v6 )
    return 1i64;
  sentient = v6->sentient;
  if ( !sentient )
    return 1i64;
  if ( !Bot_RecentSeeSentient(_RBX, sentient, 1000) )
    return 1i64;
  *(double *)&_XMM0 = Bot_Weap_GetMaxRange(playerState, weapon);
  __asm { vcomiss xmm0, dword ptr [rbx+2394h] }
  return !v8;
}

/*
==============
Bot_PressButton
==============
*/
void Bot_PressButton(bot_data_t *botData, bot_scr_buttons_t button, int msec)
{
  int v6; 
  int v7; 
  int v8; 
  int v9; 
  int v10; 
  int v11; 
  int scriptPress; 
  int v13; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23454, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( button )
  {
    switch ( button )
    {
      case BOT_SCR_BUTTON_ATTACK:
        v7 = msec + level.time;
        botData->botInfo.scriptPress |= 2u;
        botData->botInfo.scriptAttackButtonEndTime = v7;
        break;
      case BOT_SCR_BUTTON_THROW:
        botData->botInfo.scriptPress |= 4u;
        break;
      case BOT_SCR_BUTTON_JUMP:
        botData->botInfo.scriptPress |= 8u;
        break;
      case BOT_SCR_BUTTON_MELEE:
        botData->botInfo.scriptPress |= 0x10u;
        break;
      case BOT_SCR_BUTTON_SPRINT:
        botData->botInfo.scriptPress |= 0x20u;
        break;
      case BOT_SCR_BUTTON_ADS:
        v8 = msec + level.time;
        botData->botInfo.scriptPress |= 0x40u;
        botData->botInfo.scriptADSButtonEndTime = v8;
        break;
      case BOT_SCR_BUTTON_LETHAL:
        v9 = msec + level.time;
        botData->botInfo.scriptPress |= 0x80u;
        botData->botInfo.scriptLethalButtonEndTime = v9;
        break;
      case BOT_SCR_BUTTON_TACTICAL:
        v10 = msec + level.time;
        botData->botInfo.scriptPress |= 0x100u;
        botData->botInfo.scriptTacticalButtonEndTime = v10;
        break;
      case BOT_SCR_BUTTON_SPECIAL:
        v11 = msec + level.time;
        botData->botInfo.scriptPress |= 0x200u;
        botData->botInfo.scriptSpecialButtonEndTime = v11;
        break;
      case BOT_SCR_BUTTON_LEAN_LEFT:
        scriptPress = botData->botInfo.scriptPress;
        botData->botInfo.scriptLeanButtonEndTime = msec + level.time;
        botData->botInfo.scriptPress = scriptPress & 0xFFFFF3FF | 0x400;
        break;
      case BOT_SCR_BUTTON_LEAN_RIGHT:
        v13 = botData->botInfo.scriptPress;
        botData->botInfo.scriptLeanButtonEndTime = msec + level.time;
        botData->botInfo.scriptPress = v13 & 0xFFFFF3FF | 0x800;
        break;
      default:
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23518, ASSERT_TYPE_ASSERT, (const char *)&queryFormat.fmt + 3, "Unreachable") )
          __debugbreak();
        break;
    }
  }
  else
  {
    v6 = msec + level.time;
    botData->botInfo.scriptPress |= 1u;
    botData->botInfo.scriptUseButtonEndTime = v6;
  }
}

/*
==============
Bot_PrintSentientInfo
==============
*/
void Bot_PrintSentientInfo(const sentient_s *const sentient)
{
  int v4; 
  signed int v5; 
  int v7; 
  const SvClientMP *CommonClient; 
  int v9; 
  int eType; 
  __int16 v11; 
  gentity_s *v12; 
  BOOL v13; 
  __int16 EntityIndex; 
  const SvClientMP *MpClient; 
  BOOL IsClientConnected; 
  bitarray_base<bitarray<224> > *AllTeamFlags; 
  const SvClientMP *v18; 
  int IsEntityInUse; 
  int time; 
  const char *GameType; 
  const char *MapName; 
  const pathnode_t *pNearestNode; 
  int v24; 
  const pathnode_t *pPrevClaimedNode; 
  int v26; 
  const pathnode_t *pClaimedNode; 
  int v28; 
  int v33; 
  int v34; 
  char *fmt; 
  char *fmtb; 
  char *fmta; 
  __int64 v50; 
  __int64 v51; 
  __int64 v52; 
  __int64 v53; 
  __int64 v54; 
  double v55; 
  double v56; 
  double v57; 
  double v58; 
  double v59; 
  double v60; 
  double v61; 
  int bNearestNodeBad; 
  int bNearestNodeValid; 
  BOOL scriptTargetHasTagEye; 
  BOOL turretInvulnerability; 
  BOOL doDamageToAll; 
  BOOL ignoreRandomBulletDamage; 
  int v68; 
  int v69; 
  int v70; 
  int v71; 
  void *retaddr; 
  int v76; 
  int banNodeTime; 
  BOOL expendable; 
  BOOL bOnlyGoodNearestNodes; 

  _RAX = &retaddr;
  v4 = 0;
  __asm { vmovaps xmmword ptr [rax-58h], xmm6 }
  v5 = 0;
  __asm { vmovaps xmmword ptr [rax-68h], xmm7 }
  _RSI = sentient;
  v7 = 0;
  if ( (int)SvClient::ms_clientCount > 0 )
  {
    do
    {
      if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
        __debugbreak();
      CommonClient = (const SvClientMP *)SvClient::GetCommonClient(v5);
      if ( Bot_IsClientConnected(CommonClient) )
        ++v7;
      ++v5;
    }
    while ( v5 < (int)SvClient::ms_clientCount );
    _RSI = sentient;
  }
  v9 = -1;
  eType = -1;
  v11 = 0;
  while ( 1 )
  {
    if ( (unsigned int)v11 >= 0x800 )
    {
      LODWORD(v53) = 2048;
      LODWORD(v50) = v11;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 188, ASSERT_TYPE_ASSERT, "(unsigned)( entityIndex ) < (unsigned)( ( 2048 ) )", "entityIndex doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v50, v53) )
        __debugbreak();
    }
    if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 189, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
      __debugbreak();
    v12 = &g_entities[v11];
    if ( v12->sentient == _RSI )
      break;
    if ( ++v11 >= 2048 )
    {
      v13 = 0;
      goto LABEL_38;
    }
  }
  eType = v12->s.eType;
  if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
    __debugbreak();
  if ( v11 >= (int)ComCharacterLimits::ms_gameData.m_characterCount )
  {
    IsEntityInUse = G_IsEntityInUse(v11);
    goto LABEL_37;
  }
  EntityIndex = G_GetEntityIndex(v12);
  if ( G_IsEntityInUse(EntityIndex) && v12->sentient )
  {
    if ( v12->client )
    {
      MpClient = SV_Client_GetMpClient(v12->s.number);
      IsClientConnected = Bot_IsClientConnected(MpClient);
    }
    else
    {
      if ( !v12->agent )
      {
LABEL_30:
        if ( v12->s.eType != ET_INVISIBLE )
        {
          AllTeamFlags = (bitarray_base<bitarray<224> > *)Com_TeamsMP_GetAllTeamFlags();
          if ( bitarray_base<bitarray<224>>::testBit(AllTeamFlags, v12->sentient->eTeam) )
          {
            if ( v12->client )
            {
              v18 = SV_Client_GetMpClient(v12->s.number);
              IsEntityInUse = Bot_IsClientActive(v18);
            }
            else
            {
              IsEntityInUse = 1;
            }
            goto LABEL_37;
          }
        }
        goto LABEL_35;
      }
      IsClientConnected = v12->s.eType == ET_AGENT;
    }
    if ( IsClientConnected )
      goto LABEL_30;
  }
LABEL_35:
  IsEntityInUse = 0;
LABEL_37:
  v13 = IsEntityInUse != 0;
LABEL_38:
  LODWORD(v53) = v13;
  LOBYTE(v4) = _RSI->ai != NULL;
  LODWORD(v50) = v4;
  LODWORD(fmt) = eType;
  Com_Printf(131087, "*** Sentient Index:%d  Entity Index:%d  Entity Type:%d  IsAI:%d  Active:%d ***\n", (unsigned int)(((int)_RSI - LODWORD(level.sentients)) / 184), (unsigned int)v11, fmt, v50, v53);
  time = level.time;
  GameType = SV_GameMP_GetGameType();
  MapName = SV_Game_GetMapName();
  LODWORD(v51) = v7;
  LODWORD(fmtb) = time;
  Com_Printf(131087, "*** Map Name:%s  Game Type:%s  Game Time:%d  Connected Clients:%d ***\n", MapName, GameType, fmtb, v51);
  pNearestNode = _RSI->pNearestNode;
  banNodeTime = _RSI->banNodeTime;
  expendable = _RSI->expendable;
  bOnlyGoodNearestNodes = _RSI->bOnlyGoodNearestNodes;
  bNearestNodeBad = _RSI->bNearestNodeBad;
  bNearestNodeValid = _RSI->bNearestNodeValid;
  if ( pNearestNode )
    v24 = Path_ConvertNodeToIndex(pNearestNode);
  else
    v24 = -1;
  pPrevClaimedNode = _RSI->pPrevClaimedNode;
  if ( pPrevClaimedNode )
    v26 = Path_ConvertNodeToIndex(pPrevClaimedNode);
  else
    v26 = -1;
  pClaimedNode = _RSI->pClaimedNode;
  if ( pClaimedNode )
    v28 = Path_ConvertNodeToIndex(pClaimedNode);
  else
    v28 = -1;
  __asm
  {
    vmovss  xmm6, dword ptr [rsi+64h]
    vmovss  xmm7, dword ptr [rsi+50h]
  }
  scriptTargetHasTagEye = _RSI->scriptTargetHasTagEye;
  turretInvulnerability = _RSI->turretInvulnerability;
  doDamageToAll = _RSI->doDamageToAll;
  ignoreRandomBulletDamage = _RSI->ignoreRandomBulletDamage;
  v68 = _RSI->meleeAttackerSpot[3];
  v69 = _RSI->meleeAttackerSpot[2];
  v70 = _RSI->meleeAttackerSpot[1];
  v71 = _RSI->meleeAttackerSpot[0];
  __asm
  {
    vcvtss2sd xmm6, xmm6, xmm6
    vcvtss2sd xmm7, xmm7, xmm7
  }
  if ( EntHandle::isDefined(&_RSI->scriptTargetEnt) )
    v76 = EntHandle::entnum(&_RSI->scriptTargetEnt);
  else
    v76 = -1;
  if ( EntHandle::isDefined(&_RSI->targetEnt) )
    v33 = EntHandle::entnum(&_RSI->targetEnt);
  else
    v33 = -1;
  if ( EntHandle::isDefined(&_RSI->syncedMeleeEnt) )
    v34 = EntHandle::entnum(&_RSI->syncedMeleeEnt);
  else
    v34 = -1;
  if ( EntHandle::isDefined(&_RSI->lastAttacker) )
    v9 = EntHandle::entnum(&_RSI->lastAttacker);
  __asm
  {
    vmovss  xmm0, dword ptr [rsi+34h]
    vmovss  xmm1, dword ptr [rsi+30h]
    vmovss  xmm2, dword ptr [rsi+2Ch]
    vmovss  xmm3, dword ptr [rsi+28h]
    vmovss  xmm4, dword ptr [rsi+24h]
    vmovsd  [rsp+1C8h+var_100], xmm6
    vmovsd  [rsp+1C8h+var_128], xmm7
    vcvtss2sd xmm0, xmm0, xmm0
    vmovsd  [rsp+1C8h+var_160], xmm0
    vcvtss2sd xmm1, xmm1, xmm1
    vmovsd  [rsp+1C8h+var_168], xmm1
    vcvtss2sd xmm2, xmm2, xmm2
    vmovsd  [rsp+1C8h+var_170], xmm2
    vcvtss2sd xmm3, xmm3, xmm3
    vmovsd  [rsp+1C8h+var_178], xmm3
    vcvtss2sd xmm4, xmm4, xmm4
    vmovsd  [rsp+1C8h+var_180], xmm4
  }
  LODWORD(v54) = _RSI->bIgnoreMe;
  LODWORD(v52) = _RSI->iThreatBiasGroupIndex;
  LODWORD(fmta) = _RSI->iThreatBias;
  Com_Printf(131087, "*** Sentient Data *** \n inUse:%d\n eTeam:%d\n iThreatBias:%d\n iThreatBiasGroupIndex:%d\n bIgnoreMe:%d\n bIgnoreAll:%d\n originChanged:%d\n oldOrigin:%.2f,%.2f,%.2f\n maxVisibleDist:%f\n surprisedByMeDistSq:%f\n iEnemyNotifyTime:%d\n attackerCount:%d\n lastAttacker:%d\n synchedMeleeEnt:%d\n targetEnt:%d\n scriptTargetEnt:%d\n entityTargetThread:%f\n attacker[0]:%d\n attacker[1]:%d\n attacker[2]:%d\n attacker[3]:%d\n attackerAccuracy:%f\n ignoreRandomBulletDamage:%d\n doDamageToAll:%d\n turrentInvulnerability:%d\n scriptTargetHasTagEye:%d\n claimedNode:%d\n prevClaimedNode:%d\n nearestNode:%d\n bNearestNodeValid:%d\n bNearestNodeBad:%d\n bOnlyGoodNearestNodes:%d\n expendable:%d\n banNodeTime:%d\n", _RSI->inuse, (unsigned int)_RSI->eTeam, fmta, v52, v54, _RSI->bIgnoreAll, _RSI->originChanged, v55, v56, v57, v58, v59, _RSI->iEnemyNotifyTime, _RSI->attackerCount, v9, v34, v33, v76, v60, v71, v70, v69, v68, v61, ignoreRandomBulletDamage, doDamageToAll, turretInvulnerability, scriptTargetHasTagEye, v28, v26, v24, bNearestNodeValid, bNearestNodeBad, bOnlyGoodNearestNodes, expendable, banNodeTime);
  __asm
  {
    vmovaps xmm6, [rsp+1C8h+var_58]
    vmovaps xmm7, [rsp+1C8h+var_68]
  }
}

/*
==============
Bot_PursuingScriptGoal
==============
*/
_BOOL8 Bot_PursuingScriptGoal(const bot_data_t *botData)
{
  if ( !botData )
  {
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23612, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
      __debugbreak();
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23600, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
      __debugbreak();
  }
  if ( botData->botInfo.scriptGoal.type == BOT_SCR_GOAL_NONE && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23613, ASSERT_TYPE_ASSERT, "( Bot_HasScriptGoal( botData ) )", (const char *)&queryFormat, "Bot_HasScriptGoal( botData )") )
    __debugbreak();
  if ( botData == (const bot_data_t *)-8i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13725, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  return Bot_NavPathExists(&botData->botInfo) && Bot_ActiveGoalIsScriptGoal(botData);
}

/*
==============
Bot_RandomInput
==============
*/
void Bot_RandomInput(bot_data_t *botData, usercmd_s *cmd)
{
  __int64 v4; 
  __int64 v5; 
  __int64 v6; 
  __int64 v7; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15210, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15211, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  if ( level.time >= botData->botInfo.randomInputEndTime )
  {
    v4 = G_irand(0, 6);
    v5 = G_irand(0, 9);
    if ( (unsigned int)v4 >= 6 )
    {
      LODWORD(v6) = v4;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15227, ASSERT_TYPE_ASSERT, "(unsigned)( fwdIndex ) < (unsigned)( ( sizeof( *array_counter( FORWARD_OFFSET ) ) + 0 ) )", "fwdIndex doesn't index ARRAY_COUNT( FORWARD_OFFSET )\n\t%i not in [0, %i)", v6, 6) )
        __debugbreak();
    }
    if ( (unsigned int)v5 >= 9 )
    {
      LODWORD(v7) = 9;
      LODWORD(v6) = v5;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15228, ASSERT_TYPE_ASSERT, "(unsigned)( rightIndex ) < (unsigned)( ( sizeof( *array_counter( RIGHT_OFFSET ) ) + 0 ) )", "rightIndex doesn't index ARRAY_COUNT( RIGHT_OFFSET )\n\t%i not in [0, %i)", v6, v7) )
        __debugbreak();
    }
    cmd->forwardmove = FORWARD_OFFSET[v4];
    cmd->rightmove = RIGHT_OFFSET[v5];
    botData->botInfo.randomInputEndTime = level.time + G_irand(1500, 3000);
  }
}

/*
==============
Bot_RandomNodeInvalidSelective
==============
*/
bool Bot_RandomNodeInvalidSelective(const bot_data_t *botData, pathnode_t *node, const unsigned __int8 *validZones, int anyValidZones)
{
  unsigned __int16 v11; 
  int v12; 
  int v13; 
  unsigned int v14; 
  char v15; 
  char v16; 
  bool v17; 
  gentity_s *ent; 
  AIBotInterface *m_pAI; 
  gentity_s *v52; 
  bool v53; 
  __int64 v57; 
  __int64 v58; 
  bitarray<224> v59; 
  AIBotWrapper v60; 
  vec3_t pos; 
  bitarray<224> result; 

  if ( !Com_GameMode_SupportsFeature(WEAPON_RAISING_ALTSWITCH) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20927, ASSERT_TYPE_ASSERT, "(G_Bot_UseBadPlaceRestrictions())", "%s\n\tThis function uses bad place restrictions, refactor if turned off", "G_Bot_UseBadPlaceRestrictions()") )
    __debugbreak();
  if ( !node && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20928, ASSERT_TYPE_ASSERT, "( node )", (const char *)&queryFormat, "node") )
    __debugbreak();
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20929, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v17 = node->constant.type == 1;
  __asm
  {
    vmovaps [rsp+128h+var_38], xmm6
    vmovaps [rsp+128h+var_48], xmm7
    vmovaps [rsp+128h+var_58], xmm8
  }
  if ( !v17 || Path_IsNodeTraversalOrOverlapsTraversal(node) )
    goto LABEL_41;
  v11 = Path_ConvertNodeToIndex(node);
  if ( (v11 & 0xFFF8u) >= 0xFFF8 )
  {
    LODWORD(v57) = v11 >> 3;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20938, ASSERT_TYPE_ASSERT, "(unsigned)( nodeIndex / 8 ) < (unsigned)( sizeof( s_botRandomNodeCornerMask ) )", "nodeIndex / 8 doesn't index sizeof( s_botRandomNodeCornerMask )\n\t%i not in [0, %i)", v57, 0x1FFF) )
      __debugbreak();
  }
  if ( ((unsigned __int8)(1 << (v11 & 7)) & s_botRandomNodeCornerMask[(unsigned __int64)v11 >> 3]) != 0 )
    goto LABEL_41;
  if ( anyValidZones )
  {
    if ( !validZones && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20944, ASSERT_TYPE_ASSERT, "( validZones )", (const char *)&queryFormat, "validZones") )
      __debugbreak();
    v12 = Path_NodeZoneFromNode(node);
    if ( v12 == 255 )
      goto LABEL_41;
    if ( v12 >= s_botZoneDataCount )
    {
      LODWORD(v58) = s_botZoneDataCount;
      LODWORD(v57) = v12;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20950, ASSERT_TYPE_ASSERT, "(unsigned)( iZone ) < (unsigned)( s_botZoneDataCount )", "iZone doesn't index s_botZoneDataCount\n\t%i not in [0, %i)", v57, v58) )
        __debugbreak();
    }
    v13 = v12 % 8;
    v14 = v12 / 8;
    v15 = v13;
    if ( v14 >= 0x20 )
    {
      LODWORD(v58) = 32;
      LODWORD(v57) = v14;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20951, ASSERT_TYPE_ASSERT, "(unsigned)( iZone / 8 ) < (unsigned)( ( ( 256 ) / 8 ) )", "iZone / 8 doesn't index BOT_ZONE_STACK_VISIT_MAX\n\t%i not in [0, %i)", v57, v58) )
        __debugbreak();
    }
    if ( (validZones[v14] & (unsigned __int8)(1 << v15)) == 0 )
      goto LABEL_41;
  }
  pathnode_t::GetPos(node, &pos);
  __asm
  {
    vmovss  xmm5, dword ptr [rsp+128h+pos]
    vmulss  xmm2, xmm5, dword ptr cs:s_botWorldEdgePlanes
    vmovss  xmm6, dword ptr [rsp+128h+pos+4]
    vmulss  xmm0, xmm6, dword ptr cs:s_botWorldEdgePlanes+4
    vmovss  xmm7, dword ptr [rsp+128h+pos+8]
    vmovss  xmm8, cs:__real@c3000000
    vaddss  xmm3, xmm2, xmm0
    vmulss  xmm0, xmm7, dword ptr cs:s_botWorldEdgePlanes+8
    vaddss  xmm2, xmm3, xmm0
    vsubss  xmm3, xmm2, dword ptr cs:s_botWorldEdgePlanes+0Ch
    vcomiss xmm3, xmm8
  }
  if ( !(v16 | v17) )
    goto LABEL_41;
  __asm
  {
    vmulss  xmm3, xmm5, dword ptr cs:s_botWorldEdgePlanes+10h
    vmulss  xmm2, xmm6, dword ptr cs:s_botWorldEdgePlanes+14h
    vmulss  xmm1, xmm7, dword ptr cs:s_botWorldEdgePlanes+18h
    vaddss  xmm4, xmm3, xmm2
    vaddss  xmm2, xmm4, xmm1
    vsubss  xmm3, xmm2, dword ptr cs:s_botWorldEdgePlanes+1Ch
    vcomiss xmm3, xmm8
  }
  if ( !(v16 | v17) )
    goto LABEL_41;
  __asm
  {
    vmulss  xmm3, xmm5, dword ptr cs:s_botWorldEdgePlanes+20h
    vmulss  xmm2, xmm6, dword ptr cs:s_botWorldEdgePlanes+24h
    vmulss  xmm1, xmm7, dword ptr cs:s_botWorldEdgePlanes+28h
    vaddss  xmm4, xmm3, xmm2
    vaddss  xmm2, xmm4, xmm1
    vsubss  xmm3, xmm2, dword ptr cs:s_botWorldEdgePlanes+2Ch
    vcomiss xmm3, xmm8
  }
  if ( !(v16 | v17) )
    goto LABEL_41;
  __asm
  {
    vmulss  xmm3, xmm5, dword ptr cs:s_botWorldEdgePlanes+30h
    vmulss  xmm2, xmm6, dword ptr cs:s_botWorldEdgePlanes+34h
    vmulss  xmm1, xmm7, dword ptr cs:s_botWorldEdgePlanes+38h
    vaddss  xmm4, xmm3, xmm2
    vaddss  xmm2, xmm4, xmm1
    vsubss  xmm3, xmm2, dword ptr cs:s_botWorldEdgePlanes+3Ch
    vcomiss xmm3, xmm8
  }
  if ( !(v16 | v17) )
    goto LABEL_41;
  if ( !botData )
    goto LABEL_40;
  if ( Bot_GetPersonality(botData) == BOT_PERSONALITY_CQB )
  {
    if ( Path_NodeExposureGeneral(node, 1) > 0x46 )
      goto LABEL_41;
    __asm
    {
      vmovss  xmm2, cs:__real@43340000; coneAngle
      vxorps  xmm1, xmm1, xmm1; arcYaw
    }
    if ( Path_NodeExposureGetRawArcMax(node, *(float *)&_XMM1, *(float *)&_XMM2, 1) > 0xC )
      goto LABEL_41;
  }
  AICommonInterface::AICommonInterface(&v60.m_botInterface);
  v60.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v60.m_botAgentInterface);
  ent = botData->botInfo.ent;
  v60.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v60.m_pAI = NULL;
  AIBotWrapper::Setup(&v60, ent);
  m_pAI = v60.m_pAI;
  if ( !v60.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20978, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  Com_Teams_GetTeamFlag(&result, botData->botInfo.sentient->eTeam);
  __asm
  {
    vmovups xmm0, xmmword ptr [rsp+128h+result.array]
    vmovsd  xmm1, qword ptr [rsp+128h+result.array+10h]
  }
  v59.array[6] = result.array[6];
  v52 = botData->botInfo.ent;
  __asm
  {
    vmovups [rsp+128h+var_E8], xmm0
    vmovsd  [rsp+128h+var_D8], xmm1
  }
  if ( AICommonInterface::BadPlace_IsNodeInAnyBadPlace(m_pAI, node, v52->clipmask, &v59) )
LABEL_41:
    v53 = 1;
  else
LABEL_40:
    v53 = 0;
  __asm
  {
    vmovaps xmm8, [rsp+128h+var_58]
    vmovaps xmm7, [rsp+128h+var_48]
    vmovaps xmm6, [rsp+128h+var_38]
  }
  return v53;
}

/*
==============
Bot_ReactedToSentient
==============
*/
__int64 Bot_ReactedToSentient(const bot_data_t *botData, const sentient_info_t *otherSentientInfo)
{
  _RDI = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9018, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !otherSentientInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9019, ASSERT_TYPE_ASSERT, "( otherSentientInfo )", (const char *)&queryFormat, "otherSentientInfo") )
    __debugbreak();
  __asm
  {
    vxorps  xmm0, xmm0, xmm0
    vcvtsi2ss xmm0, xmm0, eax
    vcomiss xmm0, dword ptr [rdi+7FD4h]
  }
  return 1i64;
}

/*
==============
Bot_RecentSeeSentient
==============
*/
_BOOL8 Bot_RecentSeeSentient(const bot_data_t *botData, const sentient_s *otherSent, int timeLimitMs)
{
  sentient_info_t *SentientInfo; 
  int iLastVisTime; 
  int v8; 
  int v9; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9030, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9031, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
    __debugbreak();
  if ( !otherSent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9032, ASSERT_TYPE_ASSERT, "( otherSent )", (const char *)&queryFormat, "otherSent") )
    __debugbreak();
  SentientInfo = Sentient_GetSentientInfo(botData->botInfo.sentient, otherSent);
  if ( !SentientInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9040, ASSERT_TYPE_ASSERT, "( pInfo )", (const char *)&queryFormat, "pInfo") )
    __debugbreak();
  iLastVisTime = SentientInfo->VisCache.iLastVisTime;
  v8 = level.time - iLastVisTime;
  v9 = Bot_ReactedToSentient(botData, SentientInfo);
  return iLastVisTime && v8 < timeLimitMs && v9;
}

/*
==============
Bot_RegisterEvents
==============
*/
void Bot_RegisterEvents(const bot_data_t *botData)
{
  gentity_s *ent; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5092, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  ent = botData->botInfo.ent;
  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5095, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  Actor_EventListener_Add(ent->s.number, scr_const.bulletwhizby);
  Actor_EventListener_Add(ent->s.number, scr_const.projectile_impact);
  Actor_EventListener_Add(ent->s.number, scr_const.gunshot);
  Actor_EventListener_Add(ent->s.number, scr_const.gunshot_teammate);
  Actor_EventListener_Add(ent->s.number, scr_const.silenced_shot);
  Actor_EventListener_Add(ent->s.number, scr_const.explode);
  Actor_EventListener_Add(ent->s.number, scr_const.enemy);
  Actor_EventListener_Add(ent->s.number, scr_const.death);
  Actor_EventListener_Add(ent->s.number, scr_const.grenadedanger);
  Actor_EventListener_Add_ByEnum(ent->s.number, 2);
  Actor_EventListener_Add_ByEnum(ent->s.number, 3);
  Actor_EventListener_Add_ByEnum(ent->s.number, 4);
  Actor_EventListener_Add_ByEnum(ent->s.number, 22);
  Actor_EventListener_Add_ByEnum(ent->s.number, 25);
  Actor_EventListener_Add_ByEnum(ent->s.number, 28);
}

/*
==============
Bot_RemoveDebugSuffixFromName
==============
*/
void Bot_RemoveDebugSuffixFromName(const char *originalName, char (*newName)[36])
{
  __int64 v4; 
  __int64 v5; 

  if ( !originalName && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3452, ASSERT_TYPE_ASSERT, "( originalName )", (const char *)&queryFormat, "originalName") )
    __debugbreak();
  if ( !newName && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3453, ASSERT_TYPE_ASSERT, "( newName )", (const char *)&queryFormat, "newName") )
    __debugbreak();
  v4 = -1i64;
  do
    ++v4;
  while ( originalName[v4] );
  if ( Bot_HasDebugSuffixInName(originalName) )
    LODWORD(v4) = v4 - 7;
  if ( (int)v4 + 1 > 36 )
  {
    LODWORD(v5) = v4 + 1;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3462, ASSERT_TYPE_ASSERT, "( nameSize + 1 ) <= ( 36 )", "nameSize + 1 <= MAX_PLAYERNAME_LENGTH\n\t%i, %i", v5, 36) )
      __debugbreak();
  }
  Core_strncpy((char *)newName, 0x24ui64, originalName, (int)v4);
}

/*
==============
Bot_ResetBotInfo
==============
*/
void Bot_ResetBotInfo(bot_data_t *botData, gentity_s *entity)
{
  sentient_info_t *sentientInfo; 
  gentity_s *ent; 
  playerState_s *p_ps; 
  unsigned int number; 
  usercmd_s *p_lastUsercmd; 
  SvPersistentGlobalsMP *PersistentGlobalsMP; 
  gentity_s *v12; 
  agent_t *agents; 
  int v14; 
  unsigned int v15; 
  sentient_s *sentient; 
  gentity_s *v17; 
  AINavigator *v18; 
  AINavigator2D *v19; 
  sentient_s *v20; 
  void (__fastcall *SetObstacleBlockageFlags)(AINavigator *, unsigned int); 
  const bitarray<224> *TeamFlag; 
  unsigned int ObstacleBlockageFlagsFromTeamFlags; 
  __int64 v30; 
  char *v31; 
  __int64 v32; 
  __int64 v33; 
  __int64 v34; 
  bitarray<224> result; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4600, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.sentientInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4601, ASSERT_TYPE_ASSERT, "(botData->botInfo.sentientInfo != nullptr)", "%s\n\t[BOTS] (%d) botData->botInfo.sentientInfo is NULL for for client %i", "botData->botInfo.sentientInfo != nullptr", level.time, entity->s.number) )
    __debugbreak();
  if ( !entity && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4602, ASSERT_TYPE_ASSERT, "( entity )", (const char *)&queryFormat, "entity") )
    __debugbreak();
  _RDI = &botData->8;
  Bot_CleanupBotInfo(botData);
  botData->bIsScriptedAgent = 0;
  sentientInfo = botData->botInfo.sentientInfo;
  memset_0(&botData->scriptedAgentInfo.sentient, 0, 0x72F0ui64);
  botData->botInfo.ent = entity;
  botData->botInfo.sentientInfo = sentientInfo;
  if ( !botData->botInfo.sentientInfo )
  {
    LODWORD(v34) = entity->s.number;
    LODWORD(v33) = level.time;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4617, ASSERT_TYPE_ASSERT, "(botData->botInfo.sentientInfo != nullptr)", "%s\n\t[BOTS] (%d) botData->botInfo.sentientInfo is NULL for for client %i", "botData->botInfo.sentientInfo != nullptr", v33, v34) )
      __debugbreak();
  }
  if ( level.maxSentients != 272 )
  {
    LODWORD(v33) = 272;
    LODWORD(v32) = level.maxSentients;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4620, ASSERT_TYPE_ASSERT, "( level.maxSentients ) == ( (200 + 48 + 24) )", "level.maxSentients == MAX_SENTIENTS_MP\n\t%i, %i", v32, v33) )
      __debugbreak();
  }
  memset_0(botData->botInfo.sentientInfo, 0, 0x4400ui64);
  ent = _RDI->botInfo.ent;
  p_ps = &_RDI->botInfo.ent->client->ps;
  if ( p_ps )
  {
    botData->botInfo.playerState = p_ps;
    number = ent->s.number;
    if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
      __debugbreak();
    p_lastUsercmd = &SvClient::GetCommonClient(number)->lastUsercmd;
LABEL_44:
    botData->botInfo.lastUserCmd = p_lastUsercmd;
    goto LABEL_45;
  }
  if ( ent->agent )
  {
    PersistentGlobalsMP = SvPersistentGlobalsMP::GetPersistentGlobalsMP();
    v12 = _RDI->botInfo.ent;
    botData->botInfo.playerState = &_RDI->botInfo.ent->agent->playerState;
    agents = PersistentGlobalsMP->agents;
    v14 = v12->s.number;
    if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 168, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
      __debugbreak();
    if ( v14 < (int)ComCharacterLimits::ms_gameData.m_clientCount )
    {
      if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 168, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
        __debugbreak();
      LODWORD(v34) = v14;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 175, ASSERT_TYPE_ASSERT, "( entityIndex ) >= ( ComCharacterLimits::GetAgentEntityIndexOffset() )", "%s >= %s\n\t%i, %i", "entityIndex", "ComCharacterLimits::GetAgentEntityIndexOffset()", v34, ComCharacterLimits::ms_gameData.m_clientCount) )
        __debugbreak();
    }
    if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 168, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
      __debugbreak();
    v15 = v14 - ComCharacterLimits::ms_gameData.m_clientCount;
    if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 116, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
      __debugbreak();
    if ( v15 >= ComCharacterLimits::ms_gameData.m_agentCount )
    {
      if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 116, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
        __debugbreak();
      LODWORD(v33) = ComCharacterLimits::ms_gameData.m_agentCount;
      LODWORD(v32) = v15;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 178, ASSERT_TYPE_ASSERT, "(unsigned)( agentIndex ) < (unsigned)( ComCharacterLimits::GetAgentMaxCount() )", "agentIndex doesn't index ComCharacterLimits::GetAgentMaxCount()\n\t%i not in [0, %i)", v32, v33) )
        __debugbreak();
    }
    p_lastUsercmd = &agents[v15].lastUsercmd;
    goto LABEL_44;
  }
LABEL_45:
  if ( !botData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4637, ASSERT_TYPE_ASSERT, "( botInfo->playerState )", (const char *)&queryFormat, "botInfo->playerState") )
    __debugbreak();
  if ( !botData->botInfo.lastUserCmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4638, ASSERT_TYPE_ASSERT, "( botInfo->lastUserCmd )", (const char *)&queryFormat, "botInfo->lastUserCmd") )
    __debugbreak();
  botData->botInfo.playerState->serverTime = botData->botInfo.lastUserCmd->serverTime;
  botData->botInfo.playerState->commandTime = botData->botInfo.lastUserCmd->commandTime;
  sentient = _RDI->botInfo.ent->sentient;
  if ( sentient )
  {
    botData->botInfo.sentient = sentient;
    sentient->ai = &_RDI->botInfo;
    Sentient_SetEnemy(botData->botInfo.sentient, NULL, 1, 1);
    Sentient_InvalidateNearestNode(botData->botInfo.sentient);
    Sentient_InvalidateNearestTacPoint(botData->botInfo.sentient);
    EntHandle::setEnt(&botData->botInfo.sentient->scriptTargetEnt, NULL);
    botData->botInfo.sentient->scriptTargetHasTagEye = 0;
    botData->botInfo.sentient->entityTargetThreat = 0.0;
  }
  Bot_SetSightFovValues(botData);
  botData->botInfo.threat.newEnemyReactionDistSq = 262144.0;
  botData->botInfo.sight.fMaxSightDistSqrd = 268435460.0;
  botData->botInfo.sight.latency = 100;
  botData->botInfo.sight.ignoreCloseFoliage = 1;
  botData->botInfo.threat.iPacifistWait = 20000;
  botData->botInfo.threat.footstepDetectDistSq = 36864.0;
  botData->botInfo.threat.footstepDetectDistWalkSq = 9216.0;
  botData->botInfo.threat.footstepDetectDistSprintSq = 90000.0;
  *(_QWORD *)&botData->scriptedAgentInfo.navigation.fWalkDist = 0i64;
  *(_QWORD *)&botData->scriptedAgentInfo.navigation.isInBadPlace = 0i64;
  v17 = _RDI->botInfo.ent;
  botData->botInfo.navigation.badPlaceAwareness = 0.75;
  v18 = Nav_Create2DNavigator(v17, NAV_LAYER_HUMAN);
  botData->botInfo.pNavigator = v18;
  v19 = v18->Get2DNavigator(v18);
  v19->m_MaxDeviationFromPath = 20.0;
  v20 = botData->botInfo.sentient;
  if ( v20 )
  {
    SetObstacleBlockageFlags = v19->SetObstacleBlockageFlags;
    TeamFlag = Com_Teams_GetTeamFlag(&result, v20->eTeam);
    ObstacleBlockageFlagsFromTeamFlags = Nav_GetObstacleBlockageFlagsFromTeamFlags(TeamFlag);
    SetObstacleBlockageFlags(v19, ObstacleBlockageFlagsFromTeamFlags);
  }
  __asm { vmovss  xmm2, cs:__real@41700000 }
  *(_WORD *)&botData->scriptedAgentInfo.avoidance.avoidanceEnabled = 257;
  botData->botInfo.avoidance.reciprocality = 0.5;
  botData->botInfo.avoidance.othersAvoidMe = 1;
  botData->botInfo.avoidance.maxSpeed = 300.0;
  botData->botInfo.avoidance.minSpeed = 30.0;
  botData->botInfo.avoidance.radius = entity->r.box.halfSize.v[0];
  botData->botInfo.avoidance.avoidanceBoundsHalfSize.v[0] = 300.0;
  botData->botInfo.avoidance.avoidanceBoundsHalfSize.v[1] = 300.0;
  botData->botInfo.avoidance.avoidanceBoundsHalfSize.v[2] = 80.0;
  __asm
  {
    vmovss  xmm0, dword ptr [rdi+1C8h]
    vxorps  xmm1, xmm1, xmm1
    vcmpeqss xmm3, xmm0, xmm1
    vmovaps xmm1, xmm0
    vblendvps xmm0, xmm1, xmm2, xmm3
    vmovss  dword ptr [rdi+1C8h], xmm0
  }
  botData->botInfo.avoidance.lookAheadTime = 1.0;
  botData->botInfo.nextProneTime = 0x7FFFFFFF;
  botData->botInfo.nextCrouchTime = 0x7FFFFFFF;
  botData->botInfo.nextStandTime = 0x7FFFFFFF;
  botData->botInfo.currentForceStance = 7;
  botData->botInfo.enemyTrack.lastEnemyEntNum = -1;
  botData->botInfo.enemyTrack.deadEnemyThreat = -2147483647;
  if ( !botData->botInfo.sentientInfo )
  {
    LODWORD(v34) = entity->s.number;
    LODWORD(v33) = level.time;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4697, ASSERT_TYPE_ASSERT, "(botInfo->sentientInfo != nullptr)", "%s\n\t[BOTS] (%d) botData->botInfo.sentientInfo is NULL for for client %i", "botInfo->sentientInfo != nullptr", v33, v34) )
      __debugbreak();
  }
  if ( level.maxSentients != 272 )
  {
    LODWORD(v33) = 272;
    LODWORD(v32) = level.maxSentients;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4699, ASSERT_TYPE_ASSERT, "( level.maxSentients ) == ( (200 + 48 + 24) )", "level.maxSentients == MAX_SENTIENTS_MP\n\t%i, %i", v32, v33) )
      __debugbreak();
  }
  v30 = 0i64;
  v31 = (char *)&botData->scriptedAgentInfo + 11744;
  do
  {
    v31 += 240;
    botData->botInfo.sentientInfo[v30].lastKnownReason = -1;
    *((_DWORD *)v31 - 75) = -2147483647;
    botData->botInfo.sentientInfo[v30 + 1].lastKnownReason = -1;
    *((_DWORD *)v31 - 60) = -2147483647;
    botData->botInfo.sentientInfo[v30 + 2].lastKnownReason = -1;
    *((_DWORD *)v31 - 45) = -2147483647;
    botData->botInfo.sentientInfo[v30 + 3].lastKnownReason = -1;
    v30 += 4i64;
    *((_DWORD *)v31 - 30) = -2147483647;
  }
  while ( v30 < 272 );
  botData->botInfo.awareness = 1.0;
  botData->botInfo.hideFromLastNode = -1;
  botData->botInfo.aerialEnemyLockOnNode = -1;
  botData->botInfo.traversal = 0;
  botData->botInfo.traverseWaitingTime = 0;
  botData->botInfo.traverseJumpTime = 0;
  *((_DWORD *)&botData->scriptedAgentInfo + 7061) = -1;
  botData->botInfo.hideFromEntNum = 2047;
  botData->botInfo.weaponRiotShieldTime = -1000;
  botData->botInfo.grenadeFiredTime = -1;
  Bot_CalculateLauncherCombatChance(botData);
}

/*
==============
Bot_ResetLife
==============
*/
void Bot_ResetLife(bot_data_t *botData)
{
  $3396140AF3A78F7FCD1D73807E505015 *v2; 
  gentity_s *ent; 
  sentient_s *sentient; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4420, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v2 = &botData->8;
  Bot_PathClear(&botData->botInfo);
  Bot_ResetBotInfo(botData, botData->botInfo.ent);
  ent = v2->botInfo.ent;
  if ( !v2->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5095, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  Actor_EventListener_Add(ent->s.number, scr_const.bulletwhizby);
  Actor_EventListener_Add(ent->s.number, scr_const.projectile_impact);
  Actor_EventListener_Add(ent->s.number, scr_const.gunshot);
  Actor_EventListener_Add(ent->s.number, scr_const.gunshot_teammate);
  Actor_EventListener_Add(ent->s.number, scr_const.silenced_shot);
  Actor_EventListener_Add(ent->s.number, scr_const.explode);
  Actor_EventListener_Add(ent->s.number, scr_const.enemy);
  Actor_EventListener_Add(ent->s.number, scr_const.death);
  Actor_EventListener_Add(ent->s.number, scr_const.grenadedanger);
  Actor_EventListener_Add_ByEnum(ent->s.number, 2);
  Actor_EventListener_Add_ByEnum(ent->s.number, 3);
  Actor_EventListener_Add_ByEnum(ent->s.number, 4);
  Actor_EventListener_Add_ByEnum(ent->s.number, 22);
  Actor_EventListener_Add_ByEnum(ent->s.number, 25);
  Actor_EventListener_Add_ByEnum(ent->s.number, 28);
  sentient = v2->botInfo.sentient;
  if ( sentient )
  {
    if ( sentient->pClaimedNode )
      Path_RelinquishNodeNow(sentient);
  }
}

/*
==============
Bot_ResumeScriptGoal
==============
*/

__int64 __fastcall Bot_ResumeScriptGoal(bot_data_t *botData, double _XMM1_8)
{
  unsigned int PathToGoalInternal; 
  const pathnode_t *node; 
  unsigned int type; 
  const char *v7; 
  pathnode_t *v9; 
  unsigned __int16 NodeRandom; 
  pathnode_t *v12; 
  const tacpoint_t *v13; 
  const tacpoint_t *RandomPointReachableFromPoint; 
  __int64 v16; 
  vec3_t goal; 
  char _Buffer[256]; 

  _RDI = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20330, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !_RDI->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20331, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !_RDI->botInfo.ent->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20332, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent->sentient )", (const char *)&queryFormat, "botData->botInfo.ent->sentient") )
    __debugbreak();
  PathToGoalInternal = 0;
  if ( Bot_ShouldDelayPathGen(_RDI) )
    return 0i64;
  if ( _RDI->botInfo.scriptGoal.type == BOT_SCR_GOAL_NONE )
  {
    if ( Bot_PathExists(&_RDI->botInfo) )
    {
      __asm { vxorps  xmm1, xmm1, xmm1; goalRadius }
      if ( !Bot_IsAtPathEnd(_RDI, *(float *)&_XMM1) )
        return PathToGoalInternal;
    }
    if ( level.time - _RDI->botInfo.ent->birthTime <= 500 )
      return PathToGoalInternal;
    if ( SV_BotRequirePathnodes(_RDI) )
    {
      NodeRandom = Bot_FindNodeRandom(_RDI, NULL, NULL);
      if ( NodeRandom == 0xFFFF )
        return PathToGoalInternal;
      v12 = Path_ConvertIndexToNode(NodeRandom);
      pathnode_t::GetPos(v12, &goal);
    }
    else
    {
      if ( !_RDI->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21247, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
        __debugbreak();
      v13 = Sentient_NearestTacPoint(_RDI->botInfo.sentient);
      if ( !v13 )
        return PathToGoalInternal;
      RandomPointReachableFromPoint = TacGraph_FindRandomPointReachableFromPoint(v13, 10);
      if ( !RandomPointReachableFromPoint )
        return PathToGoalInternal;
      TacGraph_GetApproxGroundPosForPoint(RandomPointReachableFromPoint, &goal);
    }
    __asm { vmovss  xmm2, cs:__real@43000000; goalRadius }
    Bot_GetPathToGoalInternal(_RDI, &goal, *(float *)&_XMM2, "random");
    return PathToGoalInternal;
  }
  Bot_GetScriptGoal(_RDI, &goal);
  if ( !Bot_IsGoalInBadPlace(&_RDI->botInfo, &_RDI->botInfo.scriptGoal) )
  {
    node = _RDI->botInfo.scriptGoal.node;
    if ( !node || Path_NodeUnclaimedByOther(node, _RDI->botInfo.sentient) )
    {
      if ( Bot_PathExists(&_RDI->botInfo) && Bot_ActiveGoalIsScriptGoal(_RDI) )
        return 1;
      type = _RDI->botInfo.scriptGoal.type;
      _Buffer[0] = 0;
      if ( type >= 8 )
      {
        LODWORD(v16) = type;
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20365, ASSERT_TYPE_ASSERT, "(unsigned)( botInfo->scriptGoal.type ) < (unsigned)( ( sizeof( *array_counter( BOT_STR_TBL_GOAL_TYPE ) ) + 0 ) )", "botInfo->scriptGoal.type doesn't index ARRAY_COUNT(BOT_STR_TBL_GOAL_TYPE)\n\t%i not in [0, %i)", v16, 8) )
          __debugbreak();
      }
      if ( !*BOT_STR_TBL_GOAL_TYPE[_RDI->botInfo.scriptGoal.type] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20366, ASSERT_TYPE_ASSERT, "( BOT_STR_TBL_GOAL_TYPE[botInfo->scriptGoal.type][0] )", (const char *)&queryFormat, "BOT_STR_TBL_GOAL_TYPE[botInfo->scriptGoal.type][0]") )
        __debugbreak();
      if ( !BOT_STR_TBL_GOAL_TYPE[_RDI->botInfo.scriptGoal.type][1] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20367, ASSERT_TYPE_ASSERT, "( BOT_STR_TBL_GOAL_TYPE[botInfo->scriptGoal.type][1] )", (const char *)&queryFormat, "BOT_STR_TBL_GOAL_TYPE[botInfo->scriptGoal.type][1]") )
        __debugbreak();
      v7 = BOT_STR_TBL_GOAL_TYPE[_RDI->botInfo.scriptGoal.type];
      j_sprintf(_Buffer, "script [%c%c]", (unsigned int)*v7, (unsigned int)v7[1]);
      __asm { vmovss  xmm2, dword ptr [rdi+20Ch]; goalRadius }
      PathToGoalInternal = Bot_GetPathToGoalInternal(_RDI, &goal, *(float *)&_XMM2, _Buffer);
      if ( PathToGoalInternal )
      {
        v9 = _RDI->botInfo.scriptGoal.node;
        if ( v9 )
          Bot_ForceClaimNode(&_RDI->botInfo, v9);
        _RDI->botInfo.scriptGoal.radius = _RDI->botInfo.activeGoal.radius;
        return PathToGoalInternal;
      }
    }
    Bot_BadPath(_RDI->botInfo.ent);
  }
  return PathToGoalInternal;
}

/*
==============
Bot_SeeThruBlockedByAllSurroundingGeo
==============
*/
__int64 Bot_SeeThruBlockedByAllSurroundingGeo(const vec3_t *drawPoint0, const vec3_t *drawPoint1, const __int16 entToIgnore, const int contents, int drawInsteadOfTrace)
{
  __int16 v17; 
  int v65; 
  vec3_t *p_point; 
  int v80; 
  unsigned __int8 *priorityMap; 
  char v82; 
  const dvar_t *v83; 
  __int64 result; 
  _BYTE v127[32]; 
  int v128; 
  int contentMask; 
  vec3_t vec; 
  int v135[4]; 
  vec3_t point; 
  vec3_t dst; 
  vec3_t angles; 
  tmat33_t<vec3_t> axis; 
  trace_t results; 
  vec3_t start; 
  vec3_t end; 
  char v144; 
  void *retaddr; 

  _RAX = &retaddr;
  __asm
  {
    vmovaps xmmword ptr [rax-48h], xmm6
    vmovaps xmmword ptr [rax-68h], xmm8
    vmovaps xmmword ptr [rax-78h], xmm9
    vmovaps xmmword ptr [rax-88h], xmm10
    vmovaps xmmword ptr [rax-98h], xmm11
    vmovaps xmmword ptr [rax-0A8h], xmm12
    vmovaps xmmword ptr [rax-0B8h], xmm13
    vmovaps xmmword ptr [rax-0C8h], xmm14
    vmovaps xmmword ptr [rax-0D8h], xmm15
    vmovss  xmm0, dword ptr [rdx]
    vucomiss xmm0, dword ptr [rcx]
  }
  contentMask = contents;
  v17 = entToIgnore;
  LOWORD(v128) = entToIgnore;
  _R15 = drawPoint1;
  if ( (unsigned __int64)v127 == _security_cookie )
  {
    __asm
    {
      vmovss  xmm0, dword ptr [rdx+4]
      vucomiss xmm0, dword ptr [rcx+4]
    }
    if ( (unsigned __int64)v127 == _security_cookie )
    {
      __asm
      {
        vmovss  xmm0, dword ptr [rdx+8]
        vucomiss xmm0, dword ptr [rcx+8]
      }
      if ( (unsigned __int64)v127 == _security_cookie && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2660, ASSERT_TYPE_ASSERT, "( !Vec3Compare( drawPoint0, drawPoint1 ) )", (const char *)&queryFormat, "!Vec3Compare( drawPoint0, drawPoint1 )") )
        __debugbreak();
    }
  }
  __asm
  {
    vmovss  xmm0, dword ptr [r15]
    vsubss  xmm6, xmm0, dword ptr [r12]
    vmovss  xmm0, dword ptr [r15+4]
    vsubss  xmm5, xmm0, dword ptr [r12+4]
    vmovss  xmm0, dword ptr [r15+8]
    vsubss  xmm4, xmm0, dword ptr [r12+8]
    vmovss  xmm10, cs:__real@3f800000
    vmulss  xmm0, xmm4, xmm4
    vmulss  xmm2, xmm5, xmm5
    vmulss  xmm1, xmm6, xmm6
    vaddss  xmm3, xmm2, xmm1
    vaddss  xmm2, xmm3, xmm0
    vsqrtss xmm1, xmm2, xmm2
    vcmpless xmm0, xmm1, cs:__real@80000000
    vblendvps xmm0, xmm1, xmm10, xmm0
    vdivss  xmm2, xmm10, xmm0
    vmulss  xmm0, xmm2, xmm6
    vmovss  dword ptr [rsp+240h+vec], xmm0
    vmulss  xmm0, xmm2, xmm4
    vmulss  xmm1, xmm2, xmm5
    vmovss  dword ptr [rbp+140h+vec+8], xmm0
    vmovss  dword ptr [rsp+240h+vec+4], xmm1
  }
  vectoangles(&vec, &angles);
  AnglesToAxis(&angles, &axis);
  __asm
  {
    vmovss  xmm2, cs:__real@40200000
    vmulss  xmm0, xmm2, dword ptr [rbp+140h+axis+18h]
    vmulss  xmm1, xmm2, dword ptr [rbp+140h+axis+1Ch]
    vmovss  xmm4, cs:__real@41700000
    vmulss  xmm5, xmm4, dword ptr [rsp+240h+vec]
    vmulss  xmm3, xmm4, dword ptr [rsp+240h+vec+4]
    vaddss  xmm14, xmm5, dword ptr [r12]
    vaddss  xmm15, xmm3, dword ptr [r12+4]
    vmovss  xmm11, cs:__real@42b40000
    vmovss  xmm12, cs:__real@42340000
    vmovss  xmm13, cs:__real@42700000
    vmovss  xmm8, cs:__real@44c80000
    vmovss  [rbp+140h+var_1B8], xmm0
    vmulss  xmm0, xmm2, dword ptr [rbp+140h+axis+20h]
    vmovss  xmm2, cs:__real@40a00000
    vmovss  [rbp+140h+var_1B0], xmm0
    vmulss  xmm0, xmm2, dword ptr [rbp+140h+axis+1Ch]
    vmovss  [rbp+140h+var_1B4], xmm1
    vmulss  xmm1, xmm2, dword ptr [rbp+140h+axis+18h]
    vmovss  dword ptr [rbp+140h+point+4], xmm0
    vmovss  dword ptr [rbp+140h+point], xmm1
    vmulss  xmm1, xmm2, dword ptr [rbp+140h+axis+20h]
    vmulss  xmm2, xmm4, dword ptr [rbp+140h+vec+8]
    vaddss  xmm9, xmm2, dword ptr [r12+8]
    vmovss  dword ptr [rbp+140h+point+8], xmm1
    vmovss  xmm1, dword ptr [r15]
    vsubss  xmm0, xmm1, xmm5
    vmovss  xmm1, dword ptr [r15+8]
    vmovss  [rsp+240h+var_1D4], xmm0
    vmovss  xmm0, dword ptr [r15+4]
    vsubss  xmm0, xmm0, xmm3
    vmovss  [rsp+240h+var_1D0], xmm0
    vsubss  xmm0, xmm1, xmm2
    vmovaps xmmword ptr [rsp+240h+var_58+8], xmm7
    vmovss  [rsp+240h+var_1CC], xmm0
    vmovss  [rsp+240h+var_1DC], xmm9
  }
  v65 = 0;
  while ( 1 )
  {
    __asm { vxorps  xmm0, xmm0, xmm0 }
    if ( v65 >= 4 )
    {
      __asm
      {
        vcvtsi2ss xmm0, xmm0, eax
        vmulss  xmm3, xmm0, xmm13; degrees
      }
      p_point = &point;
    }
    else
    {
      __asm
      {
        vcvtsi2ss xmm0, xmm0, ebx
        vmulss  xmm1, xmm0, xmm11
        vaddss  xmm3, xmm1, xmm12
      }
      p_point = (vec3_t *)v135;
    }
    RotatePointAroundVector(&dst, &vec, p_point, *(float *)&_XMM3);
    __asm
    {
      vmovss  xmm4, dword ptr [rbp+140h+dst]
      vmovss  xmm3, dword ptr [rbp+140h+dst+4]
      vaddss  xmm0, xmm4, dword ptr [r12]
      vaddss  xmm1, xmm3, dword ptr [r12+4]
      vmovss  xmm2, dword ptr [rbp+140h+dst+8]
      vmovss  dword ptr [rbp+140h+start], xmm0
      vaddss  xmm0, xmm2, dword ptr [r12+8]
      vmovss  dword ptr [rbp+140h+start+4], xmm1
      vaddss  xmm1, xmm4, dword ptr [r15]
      vmovss  dword ptr [rbp+140h+start+8], xmm0
      vaddss  xmm0, xmm3, dword ptr [r15+4]
      vmovss  dword ptr [rbp+140h+end], xmm1
      vaddss  xmm1, xmm2, dword ptr [r15+8]
      vmovss  dword ptr [rbp+140h+end+4], xmm0
      vmovss  dword ptr [rbp+140h+end+8], xmm1
    }
    if ( drawInsteadOfTrace )
    {
      G_DebugLineWithDuration(&start, &end, &colorRedFaded, 1, 1);
      goto LABEL_21;
    }
    v80 = v17;
    __asm { vmovss  [rbp+140h+results.fraction], xmm10 }
    priorityMap = BG_GetWeaponPriorityMap(&NULL_WEAPON, 0);
    PhysicsQuery_LegacyTrace(PHYSICS_WORLD_ID_SERVER_DETAIL, &results, &start, &end, &bounds_origin, v17, 0, contentMask, 1, priorityMap, All);
    __asm
    {
      vmovss  xmm0, [rbp+140h+results.fraction]
      vcomiss xmm0, xmm10
    }
    if ( !v82 || (results.surfaceFlags & 0x100) != 0 )
      break;
    v83 = DVARINT_bot_DrawSeeThrough;
    if ( !DVARINT_bot_DrawSeeThrough && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawSeeThrough") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v83);
    if ( v83->current.integer != 3 )
    {
      if ( !G_Main_SightTrace(&start, &end, v80, 2047, 41965569) )
        break;
      __asm
      {
        vmovss  xmm5, [rbp+140h+results.fraction]
        vmovss  xmm0, dword ptr [rbp+140h+end]
        vsubss  xmm1, xmm0, dword ptr [rbp+140h+start]
        vmovss  xmm0, dword ptr [rbp+140h+end+4]
        vmulss  xmm1, xmm1, xmm5
        vaddss  xmm7, xmm1, dword ptr [rbp+140h+start]
        vsubss  xmm1, xmm0, dword ptr [rbp+140h+start+4]
        vmovss  xmm0, dword ptr [rbp+140h+end+8]
        vmulss  xmm2, xmm1, xmm5
        vsubss  xmm1, xmm0, dword ptr [rbp+140h+start+8]
        vaddss  xmm6, xmm2, dword ptr [rbp+140h+start+4]
        vmulss  xmm2, xmm1, xmm5
        vaddss  xmm5, xmm2, dword ptr [rbp+140h+start+8]
        vsubss  xmm4, xmm9, xmm5
        vsubss  xmm0, xmm15, xmm6
        vmulss  xmm1, xmm0, xmm0
        vsubss  xmm3, xmm14, xmm7
        vmulss  xmm0, xmm3, xmm3
        vaddss  xmm2, xmm1, xmm0
        vmovss  xmm0, [rsp+240h+var_1D4]
        vsubss  xmm3, xmm0, xmm7
        vmovss  xmm0, [rsp+240h+var_1D0]
        vmulss  xmm1, xmm4, xmm4
        vaddss  xmm9, xmm2, xmm1
        vcomiss xmm9, xmm8
        vmovss  xmm1, [rsp+240h+var_1CC]
        vsubss  xmm0, xmm0, xmm6
        vsubss  xmm4, xmm1, xmm5
        vmulss  xmm1, xmm0, xmm0
        vmulss  xmm0, xmm3, xmm3
        vaddss  xmm2, xmm1, xmm0
        vmulss  xmm1, xmm4, xmm4
        vaddss  xmm3, xmm2, xmm1
        vcomiss xmm3, xmm8
        vcomiss xmm9, xmm8
        vmovss  xmm9, [rsp+240h+var_1DC]
      }
    }
    v17 = v128;
LABEL_21:
    if ( ++v65 >= 10 )
    {
      result = 1i64;
      goto LABEL_24;
    }
  }
  result = 0i64;
LABEL_24:
  __asm { vmovaps xmm7, xmmword ptr [rsp+240h+var_58+8] }
  _R11 = &v144;
  __asm
  {
    vmovaps xmm6, xmmword ptr [r11-10h]
    vmovaps xmm8, xmmword ptr [r11-30h]
    vmovaps xmm9, xmmword ptr [r11-40h]
    vmovaps xmm10, xmmword ptr [r11-50h]
    vmovaps xmm11, xmmword ptr [r11-60h]
    vmovaps xmm12, xmmword ptr [r11-70h]
    vmovaps xmm13, xmmword ptr [r11-80h]
    vmovaps xmm14, xmmword ptr [r11-90h]
    vmovaps xmm15, xmmword ptr [r11-0A0h]
  }
  return result;
}

/*
==============
Bot_SetAttacker
==============
*/
void Bot_SetAttacker(bot_data_t *botData, gentity_s *attacker)
{
  gentity_s *ent; 
  AIBotInterface *m_pAI; 
  __int64 v6; 
  AIBotWrapper v7; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23418, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  AICommonInterface::AICommonInterface(&v7.m_botInterface);
  v7.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v7.m_botAgentInterface);
  ent = botData->botInfo.ent;
  v7.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v7.m_pAI = NULL;
  AIBotWrapper::Setup(&v7, ent);
  m_pAI = v7.m_pAI;
  if ( !v7.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23423, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  if ( attacker && (unsigned __int16)(attacker->s.number - 2046) > 1u && G_IsEntityInUse(attacker->s.number) )
  {
    if ( attacker->sentient )
    {
      EntHandle::setEnt(&botData->botInfo.ent->sentient->lastAttacker, attacker);
      AICommonInterface::WasAttackedBy(m_pAI, attacker->sentient);
      LOBYTE(v6) = 19;
      m_pAI->GetPerfectInfo(m_pAI, attacker->sentient, v6);
    }
  }
}

/*
==============
Bot_SetAwareness
==============
*/

void __fastcall Bot_SetAwareness(bot_data_t *botData, double awareness)
{
  __asm { vmovaps [rsp+48h+var_18], xmm6 }
  _RBX = botData;
  __asm { vmovaps xmm6, xmm1 }
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23440, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  __asm
  {
    vxorps  xmm0, xmm0, xmm0
    vcomiss xmm6, xmm0
    vmovss  dword ptr [rbx+23E4h], xmm6
    vmovaps xmm6, [rsp+48h+var_18]
  }
}

/*
==============
Bot_SetBotPersistentMatchData
==============
*/
void Bot_SetBotPersistentMatchData(bot_data_t *botData, int firstConnect)
{
  const dvar_t *v3; 
  const dvar_t *v4; 
  bot_difficulty_t integer; 
  GameStateInfo *v6; 
  int flags; 
  int v8; 
  int v9; 
  int v10; 
  __int64 v11; 
  __int64 v12; 
  __int64 v13; 
  __int64 v14; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4725, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v3 = DVARINT_bot_DebugDifficulty;
  if ( !DVARINT_bot_DebugDifficulty && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DebugDifficulty") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v3);
  if ( v3->current.integer >= 4 )
  {
    v6 = GameStateInfo_Get();
    if ( !v6 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5045, ASSERT_TYPE_ASSERT, "( gInfo )", (const char *)&queryFormat, "gInfo") )
      __debugbreak();
    if ( !BG_BotsUsingTeamDifficulty() && v6->usingBotsDifficulty[0] != v6->usingBotsDifficulty[1] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5049, ASSERT_TYPE_ASSERT, "( BG_BotsUsingTeamDifficulty() || (gInfo->usingBotsDifficulty[0] == gInfo->usingBotsDifficulty[1]) )", (const char *)&queryFormat, "BG_BotsUsingTeamDifficulty() || (gInfo->usingBotsDifficulty[0] == gInfo->usingBotsDifficulty[1])") )
      __debugbreak();
    if ( v6->usingBotsDifficulty[0] >= 5u && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5050, ASSERT_TYPE_ASSERT, "( gInfo->usingBotsDifficulty[0] < BOT_DIFFICULTY_COUNT )", (const char *)&queryFormat, "gInfo->usingBotsDifficulty[0] < BOT_DIFFICULTY_COUNT") )
      __debugbreak();
    integer = v6->usingBotsDifficulty[0];
  }
  else
  {
    v4 = DVARINT_bot_DebugDifficulty;
    if ( !DVARINT_bot_DebugDifficulty && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DebugDifficulty") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v4);
    integer = v4->current.integer;
  }
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4842, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( (unsigned int)integer >= BOT_DIFFICULTY_COUNT )
  {
    LODWORD(v13) = 5;
    LODWORD(v11) = integer;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4843, ASSERT_TYPE_ASSERT, "(unsigned)( botDifficulty ) < (unsigned)( BOT_DIFFICULTY_COUNT )", "botDifficulty doesn't index BOT_DIFFICULTY_COUNT\n\t%i not in [0, %i)", v11, v13) )
      __debugbreak();
  }
  botData->botMatchData.difficulty = integer;
  Bot_LoadDifficultySettings(botData, integer);
  flags = botData->botMatchData.flags;
  v8 = G_rand();
  v9 = 1;
  if ( (flags & 0x20) != 0 )
    v9 = 3;
  v10 = v8 % v9;
  if ( (unsigned int)(v8 % v9) >= 3 )
  {
    LODWORD(v13) = 3;
    LODWORD(v11) = v8 % v9;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5081, ASSERT_TYPE_ASSERT, "(unsigned)( personalityChosen ) < (unsigned)( BOT_PERSONALITY_DEFAULT )", "personalityChosen doesn't index BOT_PERSONALITY_DEFAULT\n\t%i not in [0, %i)", v11, v13) )
      __debugbreak();
    LODWORD(v14) = 3;
    LODWORD(v12) = v10;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4780, ASSERT_TYPE_ASSERT, "(unsigned)( botPersonality ) < (unsigned)( BOT_PERSONALITY_DEFAULT )", "botPersonality doesn't index BOT_PERSONALITY_DEFAULT\n\t%i not in [0, %i)", v12, v14) )
      __debugbreak();
  }
  botData->botMatchData.personality = v10;
  if ( v10 )
    botData->botInfo.activeGoal.pathStyle = BOT_PATH_STYLE_DEFAULT;
  else
    botData->botInfo.activeGoal.pathStyle = 6 - (G_rand() % 2 != 0);
}

/*
==============
Bot_SetDifficulty
==============
*/
void Bot_SetDifficulty(bot_data_t *botData, bot_difficulty_t botDifficulty)
{
  __int64 v4; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4842, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( (unsigned int)botDifficulty >= BOT_DIFFICULTY_COUNT )
  {
    LODWORD(v4) = botDifficulty;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4843, ASSERT_TYPE_ASSERT, "(unsigned)( botDifficulty ) < (unsigned)( BOT_DIFFICULTY_COUNT )", "botDifficulty doesn't index BOT_DIFFICULTY_COUNT\n\t%i not in [0, %i)", v4, 5) )
      __debugbreak();
  }
  botData->botMatchData.difficulty = botDifficulty;
  Bot_LoadDifficultySettings(botData, botDifficulty);
}

/*
==============
Bot_SetDifficultySetting
==============
*/
__int64 Bot_SetDifficultySetting(bot_data_t *botData, const char *settingName, const char *settingValue)
{
  unsigned int v7; 
  bot_match_data_setting_t *matched; 
  bool v11; 
  int flag; 
  const char **v14; 
  bot_difficulty_t v15; 

  _RSI = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4895, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !settingName && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4896, ASSERT_TYPE_ASSERT, "( settingName )", (const char *)&queryFormat, "settingName") )
    __debugbreak();
  v7 = 0;
  matched = Bot_MatchDataSetting(settingName);
  if ( matched )
  {
    *(double *)&_XMM0 = atof(settingValue);
    _RAX = matched->offset;
    __asm { vcvtsd2ss xmm1, xmm0, xmm0 }
    v11 = (_DWORD)_RAX == 3212;
    if ( (_DWORD)_RAX == 3212 )
    {
      flag = matched->flag;
      __asm
      {
        vxorps  xmm0, xmm0, xmm0
        vucomiss xmm1, xmm0
      }
      if ( v11 )
        _RSI->botMatchData.flags &= ~flag;
      else
        _RSI->botMatchData.flags |= flag;
    }
    else if ( (_DWORD)_RAX == 3416 )
    {
      v14 = BOT_BURST_FIRE_TYPE_STRINGS;
      v15 = BOT_DIFFICULTY_RECRUIT;
      while ( I_stricmp(settingValue, *v14) )
      {
        ++v15;
        if ( (__int64)++v14 >= (__int64)&BOT_BURST_FIRE_TYPE_STRINGS[3] )
          goto LABEL_18;
      }
      *(bot_difficulty_t *)((char *)&_RSI->botMatchData.difficulty + matched->offset) = v15;
LABEL_18:
      if ( v15 == BOT_DIFFICULTY_VETERAN && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4932, ASSERT_TYPE_ASSERT, (const char *)&queryFormat.fmt + 3, "Bot_SetDifficultySetting could not set '%s' with value '%s'.", settingName, settingValue) )
        __debugbreak();
    }
    else
    {
      __asm { vmovss  dword ptr [rax+rsi+7300h], xmm1 }
    }
  }
  LOBYTE(v7) = matched != NULL;
  return v7;
}

/*
==============
Bot_SetFrozenCmd
==============
*/
void Bot_SetFrozenCmd(bot_data_t *botData, usercmd_s *cmd)
{
  __int64 v5; 

  _RBX = cmd;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5516, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !_RBX && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5517, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  botData->botInfo.lastFrozenTime = level.time;
  v5 = 0i64;
  __asm
  {
    vmovsd  xmm0, [rsp+48h+var_18]
    vmovsd  qword ptr [rbx+18h], xmm0
  }
  _RBX->angles.v[2] = 0;
  *(_WORD *)&_RBX->forwardmove = 0;
}

/*
==============
Bot_SetMovementAlongNegotiation
==============
*/
void Bot_SetMovementAlongNegotiation(bot_data_t *botData, usercmd_s *cmd)
{
  int v10; 
  unsigned __int16 nodeNegotStart; 
  BOOL v12; 
  BOOL v13; 
  unsigned __int16 v14; 
  pathnode_t *v15; 
  pathnode_t *v16; 
  bool v17; 
  int IsTraversalBlocked; 
  int time; 
  int traversal; 
  const bitarray<224> *TeamFlag; 
  int v27; 
  nav_space_s *DefaultSpace; 
  $3396140AF3A78F7FCD1D73807E505015 *v30; 
  int traverseAvoidTime; 
  int v32; 
  pathnode_t *v33; 
  int v120; 
  float fmt; 
  __int64 usageFlags; 
  __int64 name; 
  __int64 bBadplace; 
  int byEnemy; 
  vec3_t start; 
  vec2_t forward; 
  vec2_t right; 
  vec3_t pos; 
  vec3_t dir; 
  vec3_t angles; 
  vec3_t pt; 
  vec3_t v145; 
  bitarray<224> result; 

  _RDI = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2369, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2370, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  _R13 = _RDI->botInfo.playerState;
  if ( !_R13 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2373, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  v10 = 0;
  *(_WORD *)&cmd->forwardmove = 0;
  _RDI->botInfo.traversal &= ~0x1000u;
  nodeNegotStart = _RDI->botInfo.nodeNegotStart;
  byEnemy = 0;
  v12 = Path_NodeValid(nodeNegotStart);
  v13 = Path_NodeValid(_RDI->botInfo.nodeNegotEnd);
  if ( !v12 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2403, ASSERT_TYPE_ASSERT, "(negotStartValid)", "%s\n\tTraversal start node is invalid.  botInfo->traversal = %i, botInfo->nodeNegotStart = %i, botInfo->traverseJumpTime = %i", "negotStartValid", _RDI->botInfo.traversal, _RDI->botInfo.nodeNegotStart, _RDI->botInfo.traverseJumpTime) )
    __debugbreak();
  if ( !v13 )
  {
    LODWORD(bBadplace) = _RDI->botInfo.traverseJumpTime;
    LODWORD(name) = _RDI->botInfo.nodeNegotEnd;
    LODWORD(usageFlags) = _RDI->botInfo.traversal;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2405, ASSERT_TYPE_ASSERT, "(negotEndValid)", "%s\n\tTraversal end node is invalid.  botInfo->traversal = %i, botInfo->nodeNegotEnd = %i, botInfo->traverseJumpTime = %i", "negotEndValid", usageFlags, name, bBadplace) )
      __debugbreak();
  }
  if ( v12 && v13 )
  {
    v14 = _RDI->botInfo.nodeNegotStart;
    __asm
    {
      vmovaps [rsp+170h+var_40], xmm6
      vmovaps [rsp+170h+var_50], xmm7
      vmovaps [rsp+170h+var_60], xmm8
      vmovaps [rsp+170h+var_70], xmm9
      vmovaps [rsp+170h+var_80], xmm10
    }
    if ( Path_NodeValid(v14) )
      v15 = Path_ConvertIndexToNode(_RDI->botInfo.nodeNegotStart);
    else
      v15 = NULL;
    if ( Path_NodeValid(_RDI->botInfo.nodeNegotEnd) )
      v16 = Path_ConvertIndexToNode(_RDI->botInfo.nodeNegotEnd);
    else
      v16 = NULL;
    if ( !v15 )
    {
      LODWORD(bBadplace) = _RDI->botInfo.traverseJumpTime;
      LODWORD(name) = _RDI->botInfo.nodeNegotStart;
      LODWORD(usageFlags) = _RDI->botInfo.traversal;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2411, ASSERT_TYPE_ASSERT, "(negotiationStartNode)", "%s\n\tNo traversal start node.  botInfo->traversal = %i, botInfo->nodeNegotStart = %i, botInfo->traverseJumpTime = %i", "negotiationStartNode", usageFlags, name, bBadplace) )
        __debugbreak();
    }
    if ( !v16 )
    {
      LODWORD(bBadplace) = _RDI->botInfo.traverseJumpTime;
      LODWORD(name) = _RDI->botInfo.nodeNegotEnd;
      LODWORD(usageFlags) = _RDI->botInfo.traversal;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2411, ASSERT_TYPE_ASSERT, "(negotiationEndNode)", "%s\n\tNo traversal end node.  botInfo->traversal = %i, botInfo->nodeNegotEnd = %i, botInfo->traverseJumpTime = %i", "negotiationEndNode", usageFlags, name, bBadplace) )
        __debugbreak();
    }
    pathnode_t::GetPos(v15, &pos);
    pathnode_t::GetPos(v16, &start);
    v17 = (LOBYTE(_RDI->scriptedAgentInfo.scriptGoal.pos.y) & 1) == 0;
    __asm { vxorps  xmm10, xmm10, xmm10 }
    if ( (LOBYTE(_RDI->scriptedAgentInfo.scriptGoal.pos.y) & 1) != 0 && (IsTraversalBlocked = Bot_IsTraversalBlocked(_RDI, &byEnemy), v17 = IsTraversalBlocked == 0, IsTraversalBlocked) )
    {
      if ( byEnemy )
      {
        __asm
        {
          vmovss  xmm0, dword ptr [rsp+170h+start]
          vucomiss xmm0, xmm10
        }
        time = level.time;
        if ( _RDI->botInfo.lookAtType <= BOT_LOOK_CODE_SEEK || level.time >= _RDI->botInfo.lookAtTime )
        {
          __asm
          {
            vmovss  xmm0, dword ptr [rsp+170h+start]
            vmovss  xmm1, dword ptr [rsp+170h+start+4]
          }
          _RDI->botInfo.lookAtType = BOT_LOOK_CODE_SEEK;
          _RDI->botInfo.lookAtTime = time + 500;
          __asm
          {
            vmovss  dword ptr [rdi+6EC8h], xmm0
            vmovss  xmm0, dword ptr [rsp+170h+start+8]
            vmovss  dword ptr [rdi+6ED0h], xmm0
            vmovss  dword ptr [rdi+6ECCh], xmm1
          }
          traversal = _RDI->botInfo.traversal;
          if ( (traversal & 1) != 0 )
            _RDI->botInfo.traversal = traversal & 0xFFFFFFFE;
        }
        TeamFlag = Com_Teams_GetTeamFlag(&result, _RDI->botInfo.sentient->eTeam);
        v27 = Nav_TranslateTeamFlagsToRepulsorUsageFlags(TeamFlag);
        DefaultSpace = Nav_GetDefaultSpace();
        __asm
        {
          vmovss  xmm0, cs:__real@43000000
          vmovss  dword ptr [rsp+170h+fmt], xmm0
        }
        Nav_CreateRepulsor(DefaultSpace, &pos, &vec3_origin, 10000, fmt, 2047, v27, (const scr_string_t)0, 1);
        v10 = 1;
      }
      _RDI->botInfo.traversal |= 0x1000u;
      _RDI->botInfo.traverseWaitingTime += G_Level_GetFrameDuration();
      if ( _RDI->botInfo.traverseWaitingTime > 2500 || (v17 = v10 == 0, v10) )
      {
        v30 = &_RDI->8;
        Bot_PathClear(&_RDI->botInfo);
        traverseAvoidTime = _RDI->botInfo.traverseAvoidTime;
        v32 = level.time + 10000;
        v17 = traverseAvoidTime <= (unsigned int)(level.time + 10000);
        if ( traverseAvoidTime > level.time + 10000 )
          v32 = _RDI->botInfo.traverseAvoidTime;
        _RDI->botInfo.traverseAvoidTime = v32;
        goto LABEL_45;
      }
    }
    else
    {
      _RDI->botInfo.traverseWaitingTime = 0;
    }
    v30 = &_RDI->8;
LABEL_45:
    v33 = v15;
    _RDI->botInfo.sentient->bNearestNodeValid = 1;
    __asm
    {
      vmovss  xmm0, dword ptr [rsp+170h+pos]
      vmovss  xmm1, dword ptr [rsp+170h+pos+4]
      vsubss  xmm5, xmm1, dword ptr [rax+134h]
      vsubss  xmm9, xmm0, dword ptr [rax+130h]
      vmovss  xmm0, dword ptr [rbp+70h+pos+8]
      vsubss  xmm7, xmm0, dword ptr [rax+138h]
      vmovss  xmm1, dword ptr [rsp+170h+start]
      vsubss  xmm8, xmm1, dword ptr [rax+130h]
      vmovss  xmm0, dword ptr [rsp+170h+start+4]
      vsubss  xmm4, xmm0, dword ptr [rax+134h]
      vmovss  xmm1, dword ptr [rsp+170h+start+8]
      vsubss  xmm6, xmm1, dword ptr [rax+138h]
      vmulss  xmm2, xmm5, xmm5
      vmulss  xmm0, xmm9, xmm9
      vaddss  xmm3, xmm2, xmm0
      vmulss  xmm1, xmm7, xmm7
      vaddss  xmm5, xmm3, xmm1
      vmulss  xmm2, xmm4, xmm4
      vmulss  xmm0, xmm8, xmm8
      vaddss  xmm3, xmm2, xmm0
      vmulss  xmm1, xmm6, xmm6
      vaddss  xmm4, xmm3, xmm1
      vcomiss xmm4, xmm5
    }
    if ( v17 )
      v33 = v16;
    _RDI->botInfo.sentient->pNearestNode = v33;
    __asm { vmovss  xmm0, dword ptr [r13+1DCh]; yaw }
    YawVectors2D(*(float *)&_XMM0, &forward, &right);
    __asm
    {
      vmovaps xmm9, [rsp+170h+var_70]
      vmovaps xmm8, [rsp+170h+var_60]
      vmovaps xmm7, [rsp+170h+var_50]
    }
    if ( (LOBYTE(_RDI->scriptedAgentInfo.scriptGoal.pos.y) & 8) != 0 )
    {
      _RAX = v30->botInfo.ent;
      __asm
      {
        vmovss  xmm4, dword ptr [rsp+170h+pos]
        vmovss  xmm6, dword ptr [rsp+170h+pos+4]
        vmovss  xmm3, dword ptr [rax+130h]
        vmovss  xmm5, dword ptr [rax+134h]
        vsubss  xmm1, xmm3, xmm4
        vsubss  xmm0, xmm5, xmm6
        vmulss  xmm2, xmm0, xmm0
        vmulss  xmm1, xmm1, xmm1
        vaddss  xmm2, xmm2, xmm1
        vcomiss xmm2, cs:__real@40800000
      }
      if ( (LOBYTE(_RDI->scriptedAgentInfo.scriptGoal.pos.y) & 8) != 0 )
      {
        __asm
        {
          vsubss  xmm3, xmm4, xmm3
          vsubss  xmm4, xmm6, xmm5
          vmovss  xmm6, cs:__real@42000000
          vmulss  xmm1, xmm4, xmm4
          vmulss  xmm0, xmm3, xmm3
          vaddss  xmm1, xmm1, xmm0
          vsqrtss xmm2, xmm1, xmm1
          vcmpless xmm0, xmm2, cs:__real@80000000
          vmovss  xmm1, cs:__real@3f800000
          vblendvps xmm0, xmm2, xmm1, xmm0
          vdivss  xmm1, xmm1, xmm0
          vmulss  xmm5, xmm3, xmm1
          vmulss  xmm0, xmm5, dword ptr [rsp+170h+right]
          vmulss  xmm4, xmm4, xmm1
          vmulss  xmm1, xmm4, dword ptr [rsp+170h+right+4]
          vaddss  xmm2, xmm1, xmm0
          vmulss  xmm1, xmm2, xmm6
          vcvttss2si eax, xmm1
        }
        cmd->rightmove = _EAX;
        if ( (_RDI->botInfo.traversal & 0x1000) == 0 )
        {
          __asm
          {
            vmulss  xmm3, xmm5, dword ptr [rsp+170h+forward]
            vmulss  xmm2, xmm4, dword ptr [rsp+170h+forward+4]
            vaddss  xmm0, xmm3, xmm2
            vmulss  xmm3, xmm0, xmm6
            vcvttss2si eax, xmm3
          }
          cmd->forwardmove = _EAX;
        }
      }
      else if ( _RDI->botInfo.traverseProgressJumps > 0 && !Bot_IsOnGround(_RDI) )
      {
        cmd->forwardmove = 127;
      }
    }
    else
    {
      *(float *)&_XMM0 = Bot_GetNodeTraversalYaw(v15, v16, 1);
      __asm
      {
        vmovss  dword ptr [rbp+70h+angles], xmm10
        vmovss  dword ptr [rbp+70h+angles+4], xmm0
        vmovss  dword ptr [rbp+70h+angles+8], xmm10
      }
      AngleVectors(&angles, &dir, NULL, NULL);
      __asm
      {
        vmovss  xmm3, cs:__real@41a00000
        vmulss  xmm1, xmm3, dword ptr [rbp+70h+dir]
        vaddss  xmm2, xmm1, dword ptr [rax+130h]
        vmulss  xmm1, xmm3, dword ptr [rbp+70h+dir+4]
        vmovss  dword ptr [rbp+70h+pt], xmm2
        vaddss  xmm2, xmm1, dword ptr [rax+134h]
        vmulss  xmm1, xmm3, dword ptr [rbp+70h+dir+8]
        vmovss  dword ptr [rbp+70h+pt+4], xmm2
        vaddss  xmm2, xmm1, dword ptr [rax+138h]
        vmovss  dword ptr [rbp+70h+pt+8], xmm2
      }
      PointOnLineClosestToPoint(&pt, &start, &dir, &v145);
      __asm
      {
        vmovss  xmm0, dword ptr [rbp+70h+var_B8]
        vmovss  xmm1, dword ptr [rbp+70h+var_B8+4]
        vmovss  xmm6, cs:__real@42fe0000
        vsubss  xmm4, xmm0, dword ptr [rax+130h]
        vsubss  xmm5, xmm1, dword ptr [rax+134h]
        vmulss  xmm0, xmm4, xmm4
        vmulss  xmm2, xmm5, xmm5
        vaddss  xmm1, xmm2, xmm0
        vsqrtss xmm3, xmm1, xmm1
        vcmpless xmm0, xmm3, cs:__real@80000000
        vmovss  xmm1, cs:__real@3f800000
        vblendvps xmm0, xmm3, xmm1, xmm0
        vdivss  xmm1, xmm1, xmm0
        vmulss  xmm4, xmm4, xmm1
        vmulss  xmm3, xmm4, dword ptr [rsp+170h+right]
        vmulss  xmm5, xmm5, xmm1
        vmulss  xmm2, xmm5, dword ptr [rsp+170h+right+4]
        vaddss  xmm0, xmm3, xmm2
        vmulss  xmm0, xmm0, xmm6
        vcvttss2si edx, xmm0
      }
      cmd->rightmove = _EDX;
      v120 = _RDI->botInfo.traversal;
      if ( (v120 & 0x1000) == 0 )
      {
        if ( (v120 & 0x20000) == 0 && (v120 & 4) != 0 && (abs8(_EDX) > 0xAu || (v120 & 0x40000) != 0) )
        {
          if ( (v120 & 0x40000) != 0 )
          {
            cmd->rightmove = 0;
            cmd->forwardmove = 0;
          }
          else
          {
            __asm
            {
              vmulss  xmm3, xmm5, dword ptr [rsp+170h+forward+4]
              vmulss  xmm2, xmm4, dword ptr [rsp+170h+forward]
              vaddss  xmm0, xmm3, xmm2
              vmulss  xmm3, xmm0, cs:__real@42000000
              vcvttss2si eax, xmm3
            }
            cmd->forwardmove = _EAX;
          }
        }
        else
        {
          __asm
          {
            vmulss  xmm3, xmm5, dword ptr [rsp+170h+forward+4]
            vmulss  xmm2, xmm4, dword ptr [rsp+170h+forward]
          }
          _RDI->botInfo.traversal = v120 | 0x20000;
          __asm
          {
            vaddss  xmm0, xmm3, xmm2
            vmulss  xmm3, xmm0, xmm6
            vcvttss2si eax, xmm3
          }
          cmd->forwardmove = _EAX;
          if ( (LOBYTE(_RDI->scriptedAgentInfo.scriptGoal.pos.y) & 4) != 0 && Bot_IsOnGround(_RDI) && !_RDI->botInfo.traverseProgressJumps && !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&_R13->pm_flags, ACTIVE, 0x19u) )
            cmd->buttons |= 2ui64;
        }
      }
    }
    __asm
    {
      vmovaps xmm6, [rsp+170h+var_40]
      vmovaps xmm10, [rsp+170h+var_80]
    }
  }
}

/*
==============
Bot_SetPersonality
==============
*/
void Bot_SetPersonality(bot_data_t *botData, bot_personality_t botPersonality)
{
  __int64 v4; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4779, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( (unsigned int)botPersonality >= BOT_PERSONALITY_DEFAULT )
  {
    LODWORD(v4) = botPersonality;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4780, ASSERT_TYPE_ASSERT, "(unsigned)( botPersonality ) < (unsigned)( BOT_PERSONALITY_DEFAULT )", "botPersonality doesn't index BOT_PERSONALITY_DEFAULT\n\t%i not in [0, %i)", v4, 3) )
      __debugbreak();
  }
  botData->botMatchData.personality = botPersonality;
  if ( botPersonality )
    botData->botInfo.activeGoal.pathStyle = BOT_PATH_STYLE_DEFAULT;
  else
    botData->botInfo.activeGoal.pathStyle = 6 - (G_rand() % 2 != 0);
}

/*
==============
Bot_SetScriptEnemy
==============
*/
void Bot_SetScriptEnemy(bot_data_t *botData, gentity_s *enemy)
{
  gentity_s *ent; 
  AIBotInterface *m_pAI; 
  sentient_s *sentient; 
  int BoneIndex; 
  __int64 v8; 
  AIBotWrapper v9; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23365, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !enemy && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23366, ASSERT_TYPE_ASSERT, "( enemy )", (const char *)&queryFormat, "enemy") )
    __debugbreak();
  if ( !enemy->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23367, ASSERT_TYPE_ASSERT, "( enemy->sentient )", (const char *)&queryFormat, "enemy->sentient") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23368, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !botData->botInfo.ent->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23369, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent->sentient )", (const char *)&queryFormat, "botData->botInfo.ent->sentient") )
    __debugbreak();
  AICommonInterface::AICommonInterface(&v9.m_botInterface);
  v9.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v9.m_botAgentInterface);
  ent = botData->botInfo.ent;
  v9.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v9.m_pAI = NULL;
  AIBotWrapper::Setup(&v9, ent);
  m_pAI = v9.m_pAI;
  if ( !v9.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23371, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  sentient = botData->botInfo.ent->sentient;
  EntHandle::setEnt(&sentient->scriptTargetEnt, enemy);
  BoneIndex = SV_Game_DObjGetBoneIndex(enemy, scr_const.tag_eye);
  sentient->entityTargetThreat = 1.0;
  sentient->scriptTargetHasTagEye = BoneIndex >= 0;
  Sentient_SetEnemy(sentient, enemy, 1, 1);
  LOBYTE(v8) = 17;
  m_pAI->GetPerfectInfo(m_pAI, enemy->sentient, v8);
}

/*
==============
Bot_SetScriptFlag
==============
*/
void Bot_SetScriptFlag(bot_data_t *botData, int flag, int value)
{
  int v6; 
  int scriptFlags; 
  AINavigator *pNavigator; 
  int v9; 
  int v10; 
  int v11; 
  int v12; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22858, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( flag >= 25 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22859, ASSERT_TYPE_ASSERT, "( flag < BOT_SCR_FLAG_COUNT )", (const char *)&queryFormat, "flag < BOT_SCR_FLAG_COUNT") )
    __debugbreak();
  if ( flag )
  {
    if ( flag == 1 )
    {
      scriptFlags = botData->botInfo.scriptFlags;
      if ( value )
      {
        pNavigator = botData->botInfo.pNavigator;
        botData->botInfo.scriptFlags = scriptFlags | 2;
        pNavigator->ClearPath(pNavigator);
      }
      else
      {
        botData->botInfo.scriptFlags = scriptFlags & 0xFFFFFFFD;
      }
    }
    else if ( flag == 19 )
    {
      v9 = botData->botInfo.scriptFlags;
      v10 = v9 | 0x80000;
      if ( !value )
        v10 = botData->botInfo.scriptFlags & 0xFFF7FFFF;
      botData->botInfo.scriptFlags = v10;
      if ( v9 != v10 )
        Bot_CalculateLauncherCombatChance(botData);
    }
    else
    {
      v11 = 0;
      switch ( flag )
      {
        case 2:
          v11 = 4;
          break;
        case 3:
          v11 = 8;
          break;
        case 4:
          v11 = 16;
          break;
        case 5:
          v11 = 32;
          break;
        case 6:
          v11 = 64;
          break;
        case 7:
          v11 = 128;
          break;
        case 8:
          v11 = 256;
          break;
        case 9:
          v11 = 512;
          break;
        case 10:
          v11 = 1024;
          break;
        case 11:
          v11 = 2048;
          break;
        case 12:
          v11 = 4096;
          break;
        case 13:
          v11 = 0x2000;
          break;
        case 14:
          v11 = 0x4000;
          break;
        case 17:
          v11 = 0x20000;
          break;
        case 18:
          v11 = 0x40000;
          break;
        case 20:
          v11 = 0x100000;
          break;
        case 21:
          v11 = 0x200000;
          break;
        case 15:
          v11 = 0x8000;
          break;
        case 16:
          v11 = 0x10000;
          break;
        case 22:
          v11 = 0x400000;
          break;
        case 23:
          v11 = 0x800000;
          break;
        case 24:
          v11 = 0x1000000;
          break;
        default:
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22951, ASSERT_TYPE_ASSERT, "( botInfoFlag > 0 )", (const char *)&queryFormat, "botInfoFlag > 0") )
            __debugbreak();
          break;
      }
      v12 = botData->botInfo.scriptFlags;
      if ( value )
        botData->botInfo.scriptFlags = v11 | v12;
      else
        botData->botInfo.scriptFlags = v12 & ~v11;
    }
  }
  else
  {
    v6 = botData->botInfo.scriptFlags & 0xFFFFFFFE;
    if ( !value )
      v6 = botData->botInfo.scriptFlags | 1;
    botData->botInfo.scriptFlags = v6;
  }
}

/*
==============
Bot_SetScriptGoal
==============
*/

__int64 __fastcall Bot_SetScriptGoal(bot_data_t *botData, const vec3_t *goal, double goalRadius, bot_scr_goal_t goalType, float *goalYaw, float objectiveRadius, int shortTermGoal)
{
  int flags; 
  BOOL v35; 
  int v36; 
  __int64 result; 
  unsigned int v42; 
  unsigned int v43; 
  int v44; 
  unsigned int v45; 
  vec3_t goala; 

  __asm
  {
    vmovaps [rsp+0A8h+var_38], xmm6
    vmovaps [rsp+0A8h+var_48], xmm7
  }
  _RDI = goal;
  _RBX = botData;
  __asm { vmovaps xmm7, xmm2 }
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22996, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !_RBX->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22997, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  __asm
  {
    vxorps  xmm6, xmm6, xmm6
    vcomiss xmm7, xmm6
  }
  if ( !Bot_CanSetScriptGoalType(_RBX, goalType) )
  {
    result = 0i64;
    goto LABEL_23;
  }
  if ( _RBX->botInfo.scriptGoal.type )
  {
    Bot_GetScriptGoal(_RBX, &goala);
    __asm
    {
      vmovss  xmm4, dword ptr [rsp+0A8h+goal+8]
      vmovss  xmm2, dword ptr [rsp+0A8h+goal+4]
      vmovss  xmm1, dword ptr [rsp+0A8h+goal]
    }
  }
  else
  {
    __asm
    {
      vxorps  xmm1, xmm1, xmm1
      vxorps  xmm2, xmm2, xmm2
      vxorps  xmm4, xmm4, xmm4
      vmovss  dword ptr [rsp+0A8h+goal], xmm1
      vmovss  dword ptr [rsp+0A8h+goal+4], xmm2
      vmovss  dword ptr [rsp+0A8h+goal+8], xmm4
    }
  }
  __asm
  {
    vmovss  xmm0, dword ptr [rdi]
    vsubss  xmm3, xmm0, xmm1
    vmovss  xmm1, dword ptr [rdi+4]
    vmovss  xmm0, dword ptr [rdi+8]
    vsubss  xmm2, xmm1, xmm2
    vsubss  xmm4, xmm0, xmm4
    vmulss  xmm2, xmm2, xmm2
    vmulss  xmm1, xmm3, xmm3
    vaddss  xmm3, xmm2, xmm1
    vmulss  xmm0, xmm4, xmm4
    vaddss  xmm4, xmm3, xmm0
    vcomiss xmm4, cs:__real@3c23d70a
    vucomiss xmm7, dword ptr [rbx+20Ch]
  }
  _RSI = goalYaw;
  flags = _RBX->botInfo.flags;
  v35 = goalYaw && (flags & 4) == 0;
  if ( goalYaw || (flags & 4) == 0 )
  {
    v36 = 0;
    if ( goalYaw )
    {
      __asm
      {
        vmovss  xmm0, dword ptr [rbx+228h]
        vucomiss xmm0, dword ptr [rsi]
      }
      result = 1i64;
      goto LABEL_19;
    }
  }
  else
  {
    v36 = 1;
  }
  result = 0i64;
LABEL_19:
  if ( v35 || v36 || (_DWORD)result || _RBX->botInfo.scriptGoal.type != (unsigned __int8)goalType )
  {
    _RBX->botInfo.scriptGoal.type = goalType;
    __asm
    {
      vmovss  xmm0, [rsp+0A8h+objectiveRadius]
      vmovss  dword ptr [rbx+234h], xmm0
      vmovss  dword ptr [rbx+20Ch], xmm7
    }
    if ( goalYaw )
    {
      _RBX->botInfo.scriptGoal.yaw = *goalYaw;
      v42 = _RBX->botInfo.flags | 4;
    }
    else
    {
      v42 = _RBX->botInfo.flags & 0xFFFFFFFB;
    }
    v43 = v42;
    v44 = v42 | 0x4000000;
    v45 = v43 & 0xFBFFFFFF;
    if ( !shortTermGoal )
      v44 = v45;
    _RBX->botInfo.flags = v44 & 0xFFFFFFF7;
    result = 1i64;
  }
LABEL_23:
  __asm
  {
    vmovaps xmm6, [rsp+0A8h+var_38]
    vmovaps xmm7, [rsp+0A8h+var_48]
  }
  return result;
}

/*
==============
Bot_SetScriptGoalNode
==============
*/

__int64 __fastcall Bot_SetScriptGoalNode(bot_data_t *botData, unsigned __int16 pathNodeNum, double goalRadius, bot_scr_goal_t goalType, float *goalYaw, float objectiveRadius, int shortTermGoal)
{
  pathnode_t *v14; 
  int flags; 
  BOOL v17; 
  int v18; 
  __int64 result; 
  char v23; 
  char v24; 
  unsigned int v26; 
  unsigned int v27; 
  int v28; 
  unsigned int v29; 

  __asm
  {
    vmovaps [rsp+88h+var_38], xmm6
    vmovaps [rsp+88h+var_48], xmm7
  }
  _RBP = botData;
  __asm { vmovaps xmm7, xmm2 }
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23158, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !_RBP->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23159, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  __asm
  {
    vxorps  xmm6, xmm6, xmm6
    vcomiss xmm7, xmm6
  }
  if ( !Bot_CanSetScriptGoalType(_RBP, goalType) || !Path_NodeValid(pathNodeNum) )
  {
    result = 0i64;
    goto LABEL_25;
  }
  v14 = Path_ConvertIndexToNode(pathNodeNum);
  if ( !v14 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23179, ASSERT_TYPE_ASSERT, "( node )", (const char *)&queryFormat, "node") )
    __debugbreak();
  __asm { vucomiss xmm7, dword ptr [rbp+20Ch] }
  _RSI = goalYaw;
  flags = _RBP->botInfo.flags;
  v17 = goalYaw && (flags & 4) == 0;
  if ( !goalYaw && (flags & 4) != 0 )
  {
    v18 = 1;
LABEL_19:
    result = 0i64;
    goto LABEL_20;
  }
  v18 = 0;
  if ( !goalYaw )
    goto LABEL_19;
  __asm
  {
    vmovss  xmm0, dword ptr [rbp+228h]
    vucomiss xmm0, dword ptr [rsi]
  }
  result = 1i64;
LABEL_20:
  if ( _RBP->botInfo.scriptGoal.node == v14 )
  {
    if ( !v17 && !v18 && !(_DWORD)result && _RBP->botInfo.scriptGoal.type == (unsigned __int8)goalType )
      goto LABEL_25;
  }
  else
  {
    Bot_ClearScriptGoal(_RBP);
    Bot_ForceClaimNode(&_RBP->botInfo, v14);
    pathnode_t::GetPos(v14, &_RBP->botInfo.scriptGoal.pos);
    __asm { vucomiss xmm6, dword ptr [rbp+200h] }
    if ( v23 )
    {
      __asm { vucomiss xmm6, dword ptr [rbp+204h] }
      if ( v23 )
      {
        __asm { vucomiss xmm6, dword ptr [rbp+208h] }
        if ( v23 )
        {
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23198, ASSERT_TYPE_ASSERT, "( Vec3NotZero( botInfo->scriptGoal.pos ) )", (const char *)&queryFormat, "Vec3NotZero( botInfo->scriptGoal.pos )") )
            __debugbreak();
        }
      }
    }
    _RBP->botInfo.scriptGoal.node = v14;
    _RBP->botInfo.scriptGoal.nearestNode = v14;
    pathnode_t::LocalizePosToParent(v14, &_RBP->botInfo.scriptGoal.pos);
    __asm { vucomiss xmm6, dword ptr [rbp+200h] }
    if ( v24 )
    {
      __asm { vucomiss xmm6, dword ptr [rbp+204h] }
      if ( v24 )
      {
        __asm { vucomiss xmm6, dword ptr [rbp+208h] }
        if ( v24 )
        {
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23203, ASSERT_TYPE_ASSERT, "( Vec3NotZero( botInfo->scriptGoal.pos ) )", (const char *)&queryFormat, "Vec3NotZero( botInfo->scriptGoal.pos )") )
            __debugbreak();
        }
      }
    }
    Bot_StampNodeArea(_RBP, _RBP->botInfo.scriptGoal.nearestNode);
  }
  _RBP->botInfo.scriptGoal.type = goalType;
  __asm
  {
    vmovss  xmm0, [rsp+88h+objectiveRadius]
    vmovss  dword ptr [rbp+234h], xmm0
    vmovss  dword ptr [rbp+20Ch], xmm7
  }
  if ( goalYaw )
  {
    _RBP->botInfo.scriptGoal.yaw = *goalYaw;
    v26 = _RBP->botInfo.flags | 4;
  }
  else
  {
    v26 = _RBP->botInfo.flags & 0xFFFFFFFB;
  }
  v27 = v26;
  v28 = v26 | 0x4000000;
  v29 = v27 & 0xFBFFFFFF;
  if ( !shortTermGoal )
    v28 = v29;
  _RBP->botInfo.flags = v28 & 0xFFFFFFF7;
  result = 1i64;
LABEL_25:
  __asm
  {
    vmovaps xmm6, [rsp+88h+var_38]
    vmovaps xmm7, [rsp+88h+var_48]
  }
  return result;
}

/*
==============
Bot_SetScriptMove
==============
*/

void __fastcall Bot_SetScriptMove(bot_data_t *botData, double yaw, int duration, double speed, int moveRemoteControl, int moveStickSwap)
{
  bool v13; 
  bool v14; 
  int v20; 
  double v22; 
  double v23; 
  double v24; 

  __asm
  {
    vmovaps [rsp+68h+var_18], xmm6
    vmovaps [rsp+68h+var_28], xmm7
  }
  _RBX = botData;
  __asm
  {
    vmovaps xmm7, xmm1
    vmovaps xmm6, xmm3
  }
  v13 = botData == NULL;
  if ( !botData )
  {
    v14 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22967, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData");
    v13 = !v14;
    if ( v14 )
      __debugbreak();
  }
  __asm
  {
    vxorps  xmm0, xmm0, xmm0
    vcomiss xmm6, xmm0
    vcomiss xmm6, cs:__real@3f800000
  }
  if ( !v13 )
  {
    __asm
    {
      vmovsd  xmm0, cs:__real@3ff0000000000000
      vmovsd  [rsp+68h+var_30], xmm0
      vxorpd  xmm1, xmm1, xmm1
      vmovsd  [rsp+68h+var_38], xmm1
      vcvtss2sd xmm2, xmm6, xmm6
      vmovsd  [rsp+68h+var_40], xmm2
    }
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22968, ASSERT_TYPE_ASSERT, "( 0.0f ) <= ( speed ) && ( speed ) <= ( 1.0f )", "speed not in [0.0f, 1.0f]\n\t%g not in [%g, %g]", v22, v23, v24) )
      __debugbreak();
  }
  __asm
  {
    vmovss  dword ptr [rbx+22F8h], xmm7
    vmovaps xmm7, [rsp+68h+var_28]
  }
  v20 = duration + level.time;
  _RBX->botInfo.scriptMoveRemoteControl = moveRemoteControl;
  __asm
  {
    vmovss  dword ptr [rbx+22FCh], xmm6
    vmovaps xmm6, [rsp+68h+var_18]
  }
  _RBX->botInfo.scriptMoveTime = v20;
  _RBX->botInfo.scriptMoveStickSwap = moveStickSwap;
}

/*
==============
Bot_SetSightFovValues
==============
*/
void Bot_SetSightFovValues(bot_data_t *botData)
{
  _RBX = botData;
  if ( !botData )
  {
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4538, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
      __debugbreak();
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20516, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
      __debugbreak();
  }
  *(double *)&_XMM0 = Bot_GetMaxFov(_RBX);
  __asm
  {
    vmulss  xmm1, xmm0, cs:__real@3c8efa35
    vmulss  xmm0, xmm1, cs:__real@3f000000; X
  }
  *(float *)&_XMM0 = cosf_0(*(float *)&_XMM0);
  __asm
  {
    vmovss  dword ptr [rbx+0A0h], xmm0
    vmovss  dword ptr [rbx+0A4h], xmm0
    vmulss  xmm0, xmm0, cs:__real@3f0f5c29
    vaddss  xmm1, xmm0, cs:__real@3ee147ae
    vmovss  dword ptr [rbx+0A8h], xmm1
  }
}

/*
==============
Bot_ShouldADS
==============
*/
_BOOL8 Bot_ShouldADS(bot_data_t *botData, const playerState_s *ps)
{
  const Weapon *ViewmodelWeapon; 
  GWeaponMap *Instance; 
  gentity_s *Enemy; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20235, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !ps && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20236, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(ps);
  if ( !GameModeFlagContainer<enum PWeaponFlagsCommon,enum PWeaponFlagsSP,enum PWeaponFlagsMP,64>::TestFlagInternal(&ps->weapCommon.weapFlags, ACTIVE, 5u) && !BG_IsUsingOffhandGestureWeapon(ps) && ((botData->botMatchData.flags & 2) != 0 || Bot_IsCamping(botData) || Bot_Weap_IsWeapClass(ps, ViewmodelWeapon, WEAPCLASS_SNIPER)) )
  {
    Instance = GWeaponMap::GetInstance();
    if ( !BG_PlayerDualWieldingWeapon(Instance, ps, ViewmodelWeapon) )
    {
      Enemy = Bot_GetEnemy(botData);
      if ( (LOBYTE(botData->scriptedAgentInfo.blackboard.m_ShootParams.m_Pos.v[0]) & 0x10) == 0 && Bot_Weap_IsADSWeapon(ps, ViewmodelWeapon) && !Bot_ShouldRushEnemy(botData) && !Bot_EnemyPreferMelee(botData) )
      {
        if ( Bot_Weap_IsADSOnlyWeapon(ps, ViewmodelWeapon) )
          return 1i64;
        if ( Bot_IsIdleAtScriptGoal(botData) )
        {
          if ( !Enemy )
            return 1i64;
        }
        else if ( !Enemy )
        {
          return Bot_IsFireFromHipRange(botData) == 0;
        }
        if ( !Bot_EnemyFacesBot(botData) )
          return 1i64;
        return Bot_IsFireFromHipRange(botData) == 0;
      }
    }
  }
  return 0i64;
}

/*
==============
Bot_ShouldAvoidTraversals
==============
*/
_BOOL8 Bot_ShouldAvoidTraversals(const bot_data_t *botData)
{
  playerState_s *playerState; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8775, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( botData == (const bot_data_t *)-8i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4363, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  if ( !botData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4364, ASSERT_TYPE_ASSERT, "( botInfo->playerState )", (const char *)&queryFormat, "botInfo->playerState") )
    __debugbreak();
  if ( (botData->botInfo.scriptFlags & 0x8000) != 0 )
    return 1i64;
  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8781, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  return Bot_ShouldFireOnEnemyInSight(botData) || playerState->damageCount || level.time <= botData->botInfo.traverseAvoidTime;
}

/*
==============
Bot_ShouldCombatMove
==============
*/
_BOOL8 Bot_ShouldCombatMove(const bot_data_t *botData)
{
  char v2; 
  const gentity_s *v3; 
  _BOOL8 result; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8290, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v2 = botData->botInfo.currentStanceFlags & 3;
  result = 1;
  if ( !Bot_EnemyPreferMelee(botData) )
  {
    if ( Bot_IsCamping(botData) )
      return 0;
    if ( !v2 )
      return 0;
    if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
    {
      v3 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
      if ( v3 )
      {
        if ( Bot_IsInRangeOfEnemy(botData) && Bot_Weap_HasWeaponWithNormalAmmo(botData) && Bot_IsHardwareEnt(v3) )
          return 0;
      }
    }
  }
  return result;
}

/*
==============
Bot_ShouldCombatMoveEvade
==============
*/
_BOOL8 Bot_ShouldCombatMoveEvade(const bot_data_t *botData)
{
  const playerState_s *playerState; 
  const Weapon *ViewmodelWeapon; 
  int v5; 
  gentity_s *v6; 
  int CanFireOnEnemy; 
  int v8; 
  char v10; 
  char v12; 
  const playerState_s *EntityPlayerState; 
  const playerState_s *v14; 
  const Weapon *v15; 

  _RBX = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8331, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !_RBX->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8332, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  playerState = _RBX->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8335, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(playerState);
  v5 = 0;
  if ( EntHandle::isDefined(&_RBX->botInfo.sentient->targetEnt) )
    v6 = EntHandle::ent(&_RBX->botInfo.sentient->targetEnt);
  else
    v6 = NULL;
  CanFireOnEnemy = Bot_CanSeeAndCanFireOnEnemy(_RBX);
  v8 = Bot_EnemyFacesBot(_RBX);
  if ( !Bot_ShouldCombatMove(_RBX) || !v6 || !CanFireOnEnemy )
    return 0i64;
  if ( Bot_IsReloading(_RBX) )
    return 1i64;
  if ( !v8 )
    return 0i64;
  *(double *)&_XMM0 = Bot_Weap_GetMaxRangeBase(playerState, ViewmodelWeapon);
  __asm
  {
    vmulss  xmm1, xmm0, cs:__real@3f400000
    vcomiss xmm1, dword ptr [rbx+2394h]
  }
  if ( v10 || !Bot_IsFireFromHipRange(_RBX) && Bot_Weap_IsWeapClass(playerState, ViewmodelWeapon, WEAPCLASS_SNIPER) )
    return 0i64;
  *(double *)&_XMM0 = Bot_Weap_GetMinRange(playerState, ViewmodelWeapon);
  __asm
  {
    vmulss  xmm1, xmm0, cs:__real@3fa00000
    vcomiss xmm1, dword ptr [rbx+2394h]
  }
  LOBYTE(v5) = !(v10 | v12);
  if ( Bot_Weap_IsDoingADS(_RBX) )
  {
    if ( v5 )
      return 1i64;
  }
  EntityPlayerState = G_GetEntityPlayerState(v6);
  v14 = EntityPlayerState;
  if ( !EntityPlayerState )
    return 1i64;
  v15 = Bot_Weap_GetViewmodelWeapon(EntityPlayerState);
  *(double *)&_XMM0 = Bot_Weap_GetMaxRange(v14, v15);
  __asm { vcomiss xmm0, dword ptr [rbx+2394h] }
  return !v10;
}

/*
==============
Bot_ShouldDelayPathGen
==============
*/
_BOOL8 Bot_ShouldDelayPathGen(const bot_data_t *botData)
{
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9843, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  return level.time - botData->botInfo.noPathFoundTimeLast <= 500;
}

/*
==============
Bot_ShouldDelayScriptGoal
==============
*/
__int64 Bot_ShouldDelayScriptGoal(const bot_data_t *botData)
{
  unsigned int v2; 
  int v3; 
  const gentity_s *ent; 
  AIBotInterface *m_pAI; 
  const gentity_s *v6; 
  int ShouldDelayScriptGoalForAISearch; 
  AIBotWrapper v10; 
  vec3_t goal; 

  _RDI = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24023, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !_RDI->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24025, ASSERT_TYPE_ASSERT, "( botInfo->sentient )", (const char *)&queryFormat, "botInfo->sentient") )
    __debugbreak();
  v2 = 0;
  v3 = 0;
  AICommonInterface::AICommonInterface(&v10.m_botInterface);
  v10.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v10.m_botAgentInterface);
  ent = _RDI->botInfo.ent;
  v10.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v10.m_pAI = NULL;
  AIBotWrapper::Setup(&v10, ent);
  m_pAI = v10.m_pAI;
  if ( !v10.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24034, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  if ( _RDI->botInfo.scriptGoal.type == BOT_SCR_GOAL_NONE )
    return 0i64;
  if ( Bot_IsGoalInBadPlace(&_RDI->botInfo, &_RDI->botInfo.scriptGoal) || AICommonInterface::IsInAnyBadPlace(m_pAI) )
    return 1i64;
  if ( EntHandle::isDefined(&_RDI->botInfo.sentient->targetEnt) )
  {
    v6 = EntHandle::ent(&_RDI->botInfo.sentient->targetEnt);
    if ( v6 && Bot_CanReactEnemy(_RDI) && !Bot_FinishedSearchingForEnemy(_RDI, v6) )
      v3 = 1;
  }
  else
  {
    v6 = NULL;
  }
  Bot_GetScriptGoal(_RDI, &goal);
  if ( v6 )
  {
    if ( (unsigned int)Bot_IsPointInRangeOfHardwareEntExplosion(v6, &goal) )
      return 1i64;
  }
  if ( Bot_GetHidingFromEntity(_RDI) && _RDI->botInfo.scriptGoal.type <= BOT_SCR_GOAL_OBJECTIVE )
    return 1i64;
  ShouldDelayScriptGoalForAISearch = Bot_ShouldDelayScriptGoalForAISearch(_RDI);
  if ( _RDI->botInfo.scriptGoal.type == BOT_SCR_GOAL_HUNT )
    goto LABEL_37;
  if ( _RDI->botInfo.scriptGoal.type != BOT_SCR_GOAL_GUARD )
  {
    if ( _RDI->botInfo.scriptGoal.type != BOT_SCR_GOAL_CAMP )
    {
      if ( _RDI->botInfo.scriptGoal.type != BOT_SCR_GOAL_OBJECTIVE )
        return !v6 && level.time - _RDI->botInfo.enemyTrack.lastEnemyTime <= m_pAI->GetThreatUpdateInterval(m_pAI);
      if ( Bot_CloseToObjectiveGoal(_RDI) )
        return 0i64;
    }
    if ( Bot_IsCamping(_RDI) && !Bot_IsFireFromHipRange(_RDI) )
      return 0i64;
  }
  if ( !Bot_CanSeeEnemy(_RDI) && !Bot_EnemyIsAttackingMe(_RDI, 3000) )
  {
    __asm
    {
      vmovss  xmm0, cs:__real@43fa0000
      vcomiss xmm0, dword ptr [rdi+2394h]
    }
    if ( ShouldDelayScriptGoalForAISearch )
      return 1i64;
    return !v6 && level.time - _RDI->botInfo.enemyTrack.lastEnemyTime <= m_pAI->GetThreatUpdateInterval(m_pAI);
  }
LABEL_37:
  if ( v3 || ShouldDelayScriptGoalForAISearch )
    return 1;
  return v2;
}

/*
==============
Bot_ShouldDelayScriptGoalForAISearch
==============
*/
_BOOL8 Bot_ShouldDelayScriptGoalForAISearch(const bot_data_t *botData)
{
  char v13; 
  vec3_t goal; 

  _RBX = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9572, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !_RBX->botInfo.currentAISearch.currentNodeCount )
    return 0i64;
  if ( _RBX->botInfo.aiSearchScriptGoalType != _RBX->botInfo.scriptGoal.type )
    return 0i64;
  Bot_GetScriptGoal(_RBX, &goal);
  __asm
  {
    vmovss  xmm0, dword ptr [rbx+7214h]
    vsubss  xmm3, xmm0, dword ptr [rsp+58h+goal]
    vmovss  xmm1, dword ptr [rbx+7218h]
    vsubss  xmm2, xmm1, dword ptr [rsp+58h+goal+4]
    vmovss  xmm0, dword ptr [rbx+721Ch]
    vsubss  xmm4, xmm0, dword ptr [rsp+58h+goal+8]
    vmulss  xmm2, xmm2, xmm2
    vmulss  xmm1, xmm3, xmm3
    vmulss  xmm0, xmm4, xmm4
    vaddss  xmm3, xmm2, xmm1
    vaddss  xmm2, xmm3, xmm0
    vcomiss xmm2, cs:__real@49742400
  }
  return v13 != 0;
}

/*
==============
Bot_ShouldDrawDebugForBot
==============
*/
_BOOL8 Bot_ShouldDrawDebugForBot(const bot_data_t *botData)
{
  const dvar_t *v2; 
  const dvar_t *v3; 
  const dvar_t *v4; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21656, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21657, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  v2 = DVARINT_bot_DrawDebugOnlySpectated;
  if ( !DVARINT_bot_DrawDebugOnlySpectated && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebugOnlySpectated") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v2);
  if ( v2->current.integer == 1 && botData != Bot_GetSpectatedBotData(LOCAL_CLIENT_0) )
    return 0i64;
  v3 = DVARINT_bot_DrawDebugOnlyEntityNum;
  if ( !DVARINT_bot_DrawDebugOnlyEntityNum && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebugOnlyEntityNum") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v3);
  if ( v3->current.integer >= 0 )
  {
    v4 = DVARINT_bot_DrawDebugOnlyEntityNum;
    if ( !DVARINT_bot_DrawDebugOnlyEntityNum && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebugOnlyEntityNum") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v4);
    if ( botData->botInfo.ent->s.number != v4->current.integer )
      return 0i64;
  }
  return Bot_IsCharacterActive(botData->botInfo.ent) != 0;
}

/*
==============
Bot_ShouldFireOnEnemyInSight
==============
*/
_BOOL8 Bot_ShouldFireOnEnemyInSight(const bot_data_t *botData)
{
  gentity_s *Enemy; 
  const pathnode_t *v10; 
  char v11; 
  bool v12; 
  unsigned __int16 weaponIdx; 
  bool v14; 
  bool IsOKToFireSplashDamageWeaponFrom; 
  char v18; 
  const dvar_t *v19; 
  gentity_s *ent; 
  __int64 bUsingAlternate; 
  float explosionRadius; 
  Weapon weap; 
  vec3_t aimPoint; 
  vec3_t eyePoint; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8695, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  _RDI = botData->botInfo.playerState;
  if ( !_RDI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8698, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  _RAX = Bot_Weap_GetViewmodelWeapon(_RDI);
  __asm
  {
    vmovups ymm0, ymmword ptr [rax]
    vmovups ymmword ptr [rsp+0D8h+weap.weaponIdx], ymm0
    vmovups xmm1, xmmword ptr [rax+20h]
    vmovups xmmword ptr [rsp+0D8h+weap.attachmentVariationIndices+5], xmm1
    vmovsd  xmm0, qword ptr [rax+30h]
    vmovsd  qword ptr [rsp+0D8h+weap.attachmentVariationIndices+15h], xmm0
  }
  *(_DWORD *)&weap.weaponCamo = *(_DWORD *)&_RAX->weaponCamo;
  if ( Bot_Weap_IsNone(&weap) || !Bot_CanAttack(botData) || GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 0x25u) || Bot_IsSliding(botData) || !EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) || !Bot_CanSeeAndCanFireOnEnemy(botData) )
    return 0i64;
  if ( Bot_EnemyFacesBot(botData) )
  {
    __asm { vmovss  xmm1, cs:__real@3fc00000; maxRangeScalar }
    if ( !Bot_Weap_CurrentWeapCanDamageEnemy(botData, *(float *)&_XMM1) )
      return 0i64;
  }
  else if ( !Bot_IsInRangeOfEnemy(botData) )
  {
    return 0i64;
  }
  Enemy = Bot_GetEnemy(botData);
  if ( !Enemy && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8734, ASSERT_TYPE_ASSERT, "( enemy )", (const char *)&queryFormat, "enemy") )
    __debugbreak();
  if ( Bot_EntityIsConsideredDead(Enemy) || !Bot_Weap_IsWeapClass(_RDI, &weap, WEAPCLASS_TURRET) && !Bot_Weap_Ammo(_RDI, &weap) )
    return 0i64;
  if ( Bot_EnemyPreferMelee(botData) )
    return 0i64;
  if ( Bot_Weap_IsWeapClass(_RDI, &weap, WEAPCLASS_ROCKETLAUNCHER) )
  {
    if ( !Sentient_IsAerial(Enemy->sentient) )
    {
      v10 = Sentient_NearestNode(botData->botInfo.sentient);
      if ( v10 )
      {
        __asm { vmovss  xmm1, dword ptr [rdi+1DCh]; yaw }
        *(double *)&_XMM0 = Path_NodeExposureGetRangeMax(v10, *(float *)&_XMM1, 4);
        __asm { vcomiss xmm0, cs:__real@43fa0000 }
        if ( v11 )
          return 0i64;
      }
    }
  }
  v12 = BG_UsingAlternate(_RDI);
  weaponIdx = weap.weaponIdx;
  v14 = v12;
  if ( weap.weaponIdx > bg_lastParsedWeaponIndex )
  {
    LODWORD(bUsingAlternate) = weap.weaponIdx;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\bgame\\bg_weapons_util.h", 1203, ASSERT_TYPE_ASSERT, "( weaponIdx ) <= ( bg_lastParsedWeaponIndex )", "weaponIdx not in [0, bg_lastParsedWeaponIndex]\n\t%u not in [0, %u]", bUsingAlternate, bg_lastParsedWeaponIndex) )
      __debugbreak();
  }
  if ( !bg_weaponDefs[weaponIdx] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\bgame\\bg_weapons_util.h", 1204, ASSERT_TYPE_ASSERT, "(bg_weaponDefs[weaponIdx])", (const char *)&queryFormat, "bg_weaponDefs[weaponIdx]") )
    __debugbreak();
  if ( bg_weaponDefs[weaponIdx]->bBulletExplosiveDamage )
  {
    __asm { vmovaps [rsp+0D8h+var_28], xmm6 }
    *(double *)&_XMM0 = BG_WeaponBulletFire_GetExplRadius(&weap, v14);
    __asm
    {
      vxorps  xmm1, xmm1, xmm1
      vcomiss xmm0, xmm1
      vmovaps xmm6, xmm0
    }
    if ( v11 | v18 )
    {
      IsOKToFireSplashDamageWeaponFrom = 1;
    }
    else if ( level.time - botData->botInfo.lastSplashDamageCheckTime >= 200 )
    {
      Bot_GetEnemyAimPoints(botData, Enemy, &aimPoint, &eyePoint);
      v19 = DVARBOOL_bot_DrawSplashDamageChecks;
      if ( !DVARBOOL_bot_DrawSplashDamageChecks && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 692, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawSplashDamageChecks") )
        __debugbreak();
      Dvar_CheckFrontendServerThread(v19);
      if ( v19->current.enabled )
        Com_Printf(18, "%d) Doing extended splash damage checks for entnum (%d)\n", (unsigned int)level.time, (unsigned int)botData->botInfo.ent->s.number);
      ent = botData->botInfo.ent;
      botData->botInfo.lastSplashDamageCheckTime = level.time;
      SV_BotUpdateEyeInfo(ent);
      __asm { vmovss  [rsp+0D8h+explosionRadius], xmm6 }
      IsOKToFireSplashDamageWeaponFrom = Bot_IsOKToFireSplashDamageWeaponFrom(botData, Enemy, &weap, &botData->botInfo.eyeInfo.pos, &aimPoint, v14, explosionRadius);
    }
    else
    {
      IsOKToFireSplashDamageWeaponFrom = botData->botInfo.lastSplashDamageCheckResult;
    }
    __asm { vmovaps xmm6, [rsp+0D8h+var_28] }
  }
  else
  {
    IsOKToFireSplashDamageWeaponFrom = 1;
  }
  botData->botInfo.lastSplashDamageCheckResult = IsOKToFireSplashDamageWeaponFrom;
  return IsOKToFireSplashDamageWeaponFrom;
}

/*
==============
Bot_ShouldForceGrenadeThrow
==============
*/
int Bot_ShouldForceGrenadeThrow(const bot_data_t *botData, int enemyLookingAtMe)
{
  const dvar_t *v4; 
  int result; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 19117, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v4 = DVARBOOL_bot_ForceGrenadeThrow;
  if ( !DVARBOOL_bot_ForceGrenadeThrow && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 692, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_ForceGrenadeThrow") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v4);
  if ( v4->current.enabled || (botData->botInfo.scriptFlags & 0xC0000) != 0 && !enemyLookingAtMe )
    return 1;
  result = Bot_Weap_HasOnlyUnderbarrelGL(botData);
  if ( result )
    return 1;
  return result;
}

/*
==============
Bot_ShouldForgetEnemy
==============
*/
_BOOL8 Bot_ShouldForgetEnemy(const bot_data_t *botData, const gentity_s *enemy)
{
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9481, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !enemy && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9482, ASSERT_TYPE_ASSERT, "( enemy )", (const char *)&queryFormat, "enemy") )
    __debugbreak();
  return level.time - Bot_GetLastKnownEntPosAndTime(botData, enemy, NULL) > 30000;
}

/*
==============
Bot_ShouldIgnoreEnemyLook
==============
*/
_BOOL8 Bot_ShouldIgnoreEnemyLook(const bot_data_t *botData, const vec3_t *dirToEnemy)
{
  char v10; 
  vec3_t outLookaheadDir; 

  if ( (botData->botInfo.scriptFlags & 0x20000) == 0 )
    return 0i64;
  Nav_GetLookaheadDir(botData->botInfo.pNavigator, &outLookaheadDir);
  __asm
  {
    vmovss  xmm0, dword ptr [rsp+48h+outLookaheadDir+4]
    vmovss  xmm1, dword ptr [rsp+48h+outLookaheadDir]
    vmulss  xmm2, xmm1, dword ptr [rbx]
    vmulss  xmm3, xmm0, dword ptr [rbx+4]
    vmovss  xmm0, dword ptr [rsp+48h+outLookaheadDir+8]
    vmulss  xmm1, xmm0, dword ptr [rbx+8]
    vaddss  xmm4, xmm3, xmm2
    vaddss  xmm2, xmm4, xmm1
    vcomiss xmm2, cs:__real@3e800000
  }
  return v10 != 0;
}

/*
==============
Bot_ShouldIgnoreSentientEvent
==============
*/
__int64 Bot_ShouldIgnoreSentientEvent(bot_data_t *botData, const sentient_s *other, vec3_t *knownPos, const pathnode_t *knownNearestNode, const tacpoint_t *knownNearestTacPoint, unsigned __int8 reason)
{
  __int64 v9; 
  int v10; 
  int v11; 
  gentity_s *v12; 
  int v25; 
  bool v29; 
  bool v42; 
  const bot_info_t *p_botInfo; 
  __int64 v44; 
  int v46; 
  bool v47; 
  unsigned int v51; 
  unsigned int v52; 
  unsigned int v53; 
  int ClosestCharacterList; 
  float hearingBlock; 
  const sentient_s *v57; 
  vec3_t *point; 
  pathnode_t *nearestNodeToPoint; 
  tacpoint_t *nearestTPointToPoint[2]; 
  bitarray<224> result; 

  nearestTPointToPoint[0] = (tacpoint_t *)knownNearestTacPoint;
  _RSI = botData;
  nearestNodeToPoint = (pathnode_t *)knownNearestNode;
  point = knownPos;
  v57 = other;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24555, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !other && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24556, ASSERT_TYPE_ASSERT, "( other )", (const char *)&queryFormat, "other") )
    __debugbreak();
  v9 = 0i64;
  if ( reason <= 2u || (unsigned __int8)(reason - 11) <= 2u || reason == 6 || (v10 = 0, (unsigned __int8)(reason - 9) <= 1u) )
    v10 = 1;
  if ( reason == 6 || (v11 = 0, (unsigned __int8)(reason - 9) <= 1u) )
    v11 = 1;
  if ( !_RSI->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24573, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( EntHandle::isDefined(&_RSI->botInfo.sentient->targetEnt) )
    v12 = EntHandle::ent(&_RSI->botInfo.sentient->targetEnt);
  else
    v12 = NULL;
  if ( v11 )
  {
    _RAX = _RSI->botInfo.ent;
    __asm
    {
      vmovss  xmm0, dword ptr [rax+130h]
      vsubss  xmm3, xmm0, dword ptr [rcx]
      vmovss  xmm1, dword ptr [rax+134h]
      vsubss  xmm2, xmm1, dword ptr [rcx+4]
      vmovss  xmm0, dword ptr [rax+138h]
      vsubss  xmm4, xmm0, dword ptr [rcx+8]
      vmulss  xmm2, xmm2, xmm2
      vmulss  xmm1, xmm3, xmm3
      vmulss  xmm0, xmm4, xmm4
      vaddss  xmm3, xmm2, xmm1
      vaddss  xmm2, xmm3, xmm0
      vcomiss xmm2, cs:__real@48742400
    }
  }
  __asm { vmovaps [rsp+0F0h+var_40], xmm6 }
  if ( reason <= 2u || (unsigned __int8)(reason - 11) <= 2u )
    goto LABEL_64;
  if ( reason == 6 || (v25 = 0, (unsigned __int8)(reason - 9) <= 1u) )
    v25 = 1;
  if ( v25 )
  {
LABEL_64:
    __asm { vxorps  xmm6, xmm6, xmm6 }
    if ( v10 )
    {
      if ( Bot_GetSensesObstructed(_RSI, NULL, &hearingBlock) )
      {
        __asm
        {
          vmovss  xmm1, dword ptr [rsi+801Ch]
          vcomiss xmm1, xmm6
          vmovss  xmm0, [rbp+47h+hearingBlock]
          vcomiss xmm0, xmm1
        }
      }
      else
      {
        __asm { vcomiss xmm6, dword ptr [rsi+23E4h] }
      }
LABEL_61:
      v44 = 1i64;
      goto LABEL_44;
    }
    v29 = 0;
    if ( !v12 || (v29 = v12 < v57->ent, v12 != v57->ent) )
    {
      __asm { vcomiss xmm6, dword ptr [rsi+23E4h] }
      if ( !v29 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24592, ASSERT_TYPE_ASSERT, "( botData->botInfo.awareness > 0.0f )", (const char *)&queryFormat, "botData->botInfo.awareness > 0.0f") )
        __debugbreak();
      if ( v57->ent && (v57->ent->client || v57->ai) )
      {
        _R15 = point;
        __asm
        {
          vmovss  xmm0, dword ptr [r15]
          vsubss  xmm3, xmm0, dword ptr [rax+130h]
          vmovss  xmm1, dword ptr [r15+4]
          vsubss  xmm2, xmm1, dword ptr [rax+134h]
          vmovss  xmm0, dword ptr [r15+8]
          vsubss  xmm4, xmm0, dword ptr [rax+138h]
          vmulss  xmm2, xmm2, xmm2
          vmulss  xmm1, xmm3, xmm3
          vmulss  xmm0, xmm4, xmm4
          vaddss  xmm3, xmm2, xmm1
          vaddss  xmm2, xmm3, xmm0
          vcomiss xmm2, cs:__real@48742400
        }
        v42 = SV_BotRequirePathnodes(_RSI);
        p_botInfo = &_RSI->botInfo;
        if ( v42 )
        {
          if ( Bot_PredictSeePointUsingNode(p_botInfo, point, nearestNodeToPoint, NULL) )
            goto LABEL_43;
        }
        else if ( Bot_PredictSeePointUsingTacPoint(p_botInfo, point, nearestTPointToPoint[0], NULL) )
        {
          goto LABEL_43;
        }
        if ( reason <= 0x1Au )
        {
          v46 = 67111424;
          if ( _bittest(&v46, reason) )
          {
            if ( BG_IsEMPJammed(_RSI->botInfo.playerState) || Bot_GetRadarIsJammed(&_RSI->botInfo, *(double *)&_XMM1) )
              goto LABEL_61;
          }
        }
        if ( level.teammode == TEAMMODE_FFA )
        {
          v47 = Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80);
          _RAX = Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) ? Com_TeamsSP_GetAllCombatTeamFlags() : Com_TeamsMP_GetAllTeamFlags();
          __asm
          {
            vmovups xmm0, xmmword ptr [rax]
            vmovsd  xmm1, qword ptr [rax+10h]
          }
          v51 = _RAX->array[6] & 0xFFEFFFFF;
          __asm { vmovups xmmword ptr [rbp+47h+result.array], xmm0 }
          v52 = result.array[0];
          __asm { vmovsd  qword ptr [rbp+47h+result.array+10h], xmm1 }
          if ( v47 )
            v52 = result.array[0] & 0xF7FFFFFF;
          v53 = v51 & 0xFF9FFFFF;
        }
        else
        {
          Com_Teams_GetEnemyTeamFlags(&result, _RSI->botInfo.sentient->eTeam);
          v53 = result.array[6];
          v52 = result.array[0];
        }
        result.array[1] = ~result.array[1];
        result.array[2] = ~result.array[2];
        result.array[3] = ~result.array[3];
        result.array[4] = ~result.array[4];
        result.array[5] = ~result.array[5];
        result.array[6] = ~v53;
        result.array[0] = ~v52;
        __asm { vxorps  xmm2, xmm2, xmm2; maxDist }
        ClosestCharacterList = Bot_GetClosestCharacterList(_RSI->botInfo.ent, point, *(const float *)&_XMM2, 0, 0, 0, 0, &result, (gentity_s **)nearestTPointToPoint, 2);
        if ( ClosestCharacterList <= 0 )
          goto LABEL_61;
        while ( nearestTPointToPoint[v9] != (tacpoint_t *)_RSI->botInfo.ent )
        {
          if ( ++v9 >= ClosestCharacterList )
            goto LABEL_61;
        }
      }
    }
  }
LABEL_43:
  v44 = 0i64;
LABEL_44:
  __asm { vmovaps xmm6, [rsp+0F0h+var_40] }
  return v44;
}

/*
==============
Bot_ShouldLookAtPoint
==============
*/
_BOOL8 Bot_ShouldLookAtPoint(const bot_data_t *botData)
{
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10597, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  return botData->botInfo.lookAtType >= BOT_LOOK_CODE_FORCED || !Bot_CanSeeAndCanFireOnEnemy(botData) && !Bot_IsThrowingGrenade(botData) && !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 0x14u) && (botData->botInfo.flags & 0x200) == 0;
}

/*
==============
Bot_ShouldPressADSButton
==============
*/
_BOOL8 Bot_ShouldPressADSButton(const bot_data_t *botData)
{
  int lastADSPressTime; 
  _BOOL8 result; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8155, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  result = 0;
  if ( Bot_Weap_ADSAllowed(botData) )
  {
    lastADSPressTime = botData->botInfo.lastADSPressTime;
    if ( lastADSPressTime > 0 && level.time - lastADSPressTime <= 500 )
      return 1;
  }
  return result;
}

/*
==============
Bot_ShouldRushEnemy
==============
*/
__int64 Bot_ShouldRushEnemy(bot_data_t *botData)
{
  const playerState_s *playerState; 
  const Weapon *ViewmodelWeapon; 
  unsigned int v6; 
  BOOL v7; 
  int v8; 

  _RBX = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21401, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !_RBX->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21402, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  playerState = _RBX->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21406, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(playerState);
  if ( EntHandle::isDefined(&_RBX->botInfo.sentient->targetEnt) )
    _RSI = EntHandle::ent(&_RBX->botInfo.sentient->targetEnt);
  else
    _RSI = NULL;
  if ( !Bot_CanSeeEnemy(_RBX) || !(unsigned int)Bot_CanMeleeReactEnemy(_RBX) || !Bot_AllowedToMeleeEnemy(_RBX) )
    return 0i64;
  if ( Bot_Weap_Ammo(playerState, ViewmodelWeapon) <= 0 )
    return 1i64;
  if ( !_RSI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21431, ASSERT_TYPE_ASSERT, "( enemy )", (const char *)&queryFormat, "enemy") )
    __debugbreak();
  if ( Bot_EntityIsJuggernaut(_RSI) )
    return 0i64;
  v6 = 1;
  v7 = Bot_Weap_IsWeapClass(playerState, ViewmodelWeapon, WEAPCLASS_SNIPER) && Bot_IsFireFromHipRange(_RBX);
  v8 = Bot_EntityUsingRiotShield(_RSI, 0);
  __asm
  {
    vmovss  xmm0, dword ptr [rsi+130h]
    vmovss  xmm1, dword ptr [rsi+134h]
    vsubss  xmm2, xmm0, dword ptr [rcx+130h]
    vmovss  xmm0, dword ptr [rsi+138h]
    vsubss  xmm5, xmm0, dword ptr [rcx+138h]
    vsubss  xmm3, xmm1, dword ptr [rcx+134h]
  }
  if ( v8 )
    return 0;
  __asm
  {
    vmovss  xmm4, dword ptr [rbx+7FFCh]
    vmulss  xmm1, xmm3, xmm3
    vmulss  xmm0, xmm2, xmm2
    vaddss  xmm2, xmm1, xmm0
    vmulss  xmm1, xmm5, xmm5
    vaddss  xmm3, xmm2, xmm1
    vmulss  xmm0, xmm4, xmm4
    vcomiss xmm3, xmm0
  }
  if ( !v7 )
    return 0;
  return v6;
}

/*
==============
Bot_ShouldThrowGrenade
==============
*/
__int64 Bot_ShouldThrowGrenade(bot_data_t *botData)
{
  playerState_s *playerState; 
  int IsReloading; 
  unsigned __int64 v4; 
  __int64 v5; 
  char v7; 
  char v20; 
  vec3_t goal; 
  vec3_t victimPosOut; 
  Weapon offHandOut; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21502, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( level.time <= botData->botInfo.weaponDelayForOffhand || !(unsigned int)Bot_GrenadesAllowed(botData) || GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 6u) || GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 5u) || (LOBYTE(botData->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) != 0 || Bot_IsUsingTurret(botData) || level.time < botData->botInfo.scriptedGrenadeStopTime )
    return 0i64;
  if ( (*((_BYTE *)&botData->scriptedAgentInfo + 28228) & 2) != 0 )
    return 1i64;
  if ( level.time < botData->botInfo.grenadeDelayTime || botData->botInfo.navigation.isInBadPlace )
    return 0i64;
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21537, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  if ( !botData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21538, ASSERT_TYPE_ASSERT, "( botInfo->playerState )", (const char *)&queryFormat, "botInfo->playerState") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  if ( !Bot_Weap_GrenadePick(&botData->botInfo, playerState, &offHandOut) )
    return 0i64;
  if ( !Bot_ShouldForceGrenadeThrow(botData, 0) )
  {
    IsReloading = Bot_IsReloading(botData);
    LODWORD(v4) = Bot_Weap_GetWeaponStateForViewWeapon(botData->botInfo.playerState);
    if ( !IsReloading )
    {
      if ( (unsigned int)v4 > 0x3B )
        return 0i64;
      v5 = 0xC01000000000001i64;
      if ( !_bittest64(&v5, v4) || Bot_Weap_IsDoingADS(botData) && !Bot_Weap_HasUnderBarrelGL(playerState) )
        return 0i64;
    }
  }
  if ( (unsigned int)Bot_GrenadeGoodEnemyCheck(botData, &offHandOut, &victimPosOut) && (unsigned int)Bot_GrenadeGoodTargetCheck(botData, &offHandOut, &victimPosOut) )
  {
    botData->botInfo.grenadeFlags |= 4u;
    return 1i64;
  }
  if ( botData->botInfo.scriptGoal.type == BOT_SCR_GOAL_NONE )
    return 0i64;
  if ( botData->botInfo.scriptGoal.type != BOT_SCR_GOAL_OBJECTIVE )
    return 0i64;
  if ( (*((_BYTE *)&botData->scriptedAgentInfo + 9016) & 0x40) == 0 )
    return 0i64;
  Bot_GetScriptGoal(botData, &goal);
  _RAX = botData->botInfo.ent;
  __asm
  {
    vmovss  xmm0, dword ptr [rax+130h]
    vsubss  xmm3, xmm0, dword ptr [rsp+0A8h+goal]
    vmovss  xmm1, dword ptr [rax+134h]
    vmovss  xmm0, dword ptr [rax+138h]
    vsubss  xmm2, xmm1, dword ptr [rsp+0A8h+goal+4]
    vsubss  xmm4, xmm0, dword ptr [rsp+0A8h+goal+8]
    vmulss  xmm2, xmm2, xmm2
    vmulss  xmm1, xmm3, xmm3
    vmulss  xmm0, xmm4, xmm4
    vaddss  xmm3, xmm2, xmm1
    vaddss  xmm5, xmm3, xmm0
    vcomiss xmm5, cs:__real@48742400
  }
  if ( v7 | v20 )
    return 0i64;
  __asm { vcomiss xmm5, cs:__real@4a742400 }
  if ( !v7 )
    return 0i64;
  __asm { vmovsd  xmm0, qword ptr [rsp+0A8h+goal] }
  victimPosOut.v[2] = goal.v[2];
  __asm { vmovsd  qword ptr [rsp+0A8h+victimPosOut], xmm0 }
  if ( !(unsigned int)Bot_GrenadeGoodTargetCheck(botData, &offHandOut, &victimPosOut) )
    return 0i64;
  botData->botInfo.grenadeFlags &= ~4u;
  return 1i64;
}

/*
==============
Bot_SightThresholdExpiredOrNotStarted
==============
*/
_BOOL8 Bot_SightThresholdExpiredOrNotStarted(bot_sight_threshold_t *sightThreshold)
{
  if ( !sightThreshold && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16958, ASSERT_TYPE_ASSERT, "( sightThreshold )", (const char *)&queryFormat, "sightThreshold") )
    __debugbreak();
  return !sightThreshold->lastUpdateTime || level.time - sightThreshold->lastUpdateTime > 5000;
}

/*
==============
Bot_SightThresholdReached
==============
*/
__int64 Bot_SightThresholdReached(const sentient_s *botSentient, const sentient_s *enemy)
{
  bot_data_t *EntityData; 
  signed __int64 v5; 
  unsigned int v7; 
  AIBotInterface *m_pAI; 
  int v9; 
  bool v10; 
  bool v11; 
  AIBotWrapper v14; 

  if ( !botSentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17273, ASSERT_TYPE_ASSERT, "( botSentient )", (const char *)&queryFormat, "botSentient") )
    __debugbreak();
  if ( !botSentient->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17274, ASSERT_TYPE_ASSERT, "( botSentient->ent )", (const char *)&queryFormat, "botSentient->ent") )
    __debugbreak();
  if ( !enemy && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17275, ASSERT_TYPE_ASSERT, "( enemy )", (const char *)&queryFormat, "enemy") )
    __debugbreak();
  if ( !enemy->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17276, ASSERT_TYPE_ASSERT, "( enemy->ent )", (const char *)&queryFormat, "enemy->ent") )
    __debugbreak();
  if ( enemy->ent->health <= 0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17277, ASSERT_TYPE_ASSERT, "( !Bot_EntityIsDead( enemy->ent ) )", (const char *)&queryFormat, "!Bot_EntityIsDead( enemy->ent )") )
    __debugbreak();
  EntityData = Bot_GetEntityData(botSentient->ent);
  if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17284, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v5 = 60 * (enemy - level.sentients);
  _RDI = (__int64)&EntityData->scriptedAgentInfo + v5 + 11644;
  if ( (bot_data_t *)((char *)EntityData + v5) == (bot_data_t *)-11652i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17289, ASSERT_TYPE_ASSERT, "( botSentientInfo )", (const char *)&queryFormat, "botSentientInfo") )
    __debugbreak();
  AICommonInterface::AICommonInterface(&v14.m_botInterface);
  v14.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v14.m_botAgentInterface);
  v7 = 0;
  v14.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v14.m_pAI = NULL;
  AIBotWrapper::Setup(&v14, EntityData->botInfo.ent);
  m_pAI = v14.m_pAI;
  if ( !v14.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17291, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  if ( !*(_DWORD *)(_RDI + 8) || (v9 = *(_DWORD *)(_RDI + 8) + ((__int64 (__fastcall *)(AIBotInterface *))m_pAI->GetThreatUpdateInterval)(m_pAI), v10 = level.time < (unsigned int)v9, v11 = level.time == v9, level.time >= v9) )
    SV_BotUpdateSightThreshold(botSentient, enemy);
  __asm
  {
    vmovss  xmm0, dword ptr [rdi+10h]
    vcomiss xmm0, dword ptr [rdi+0Ch]
  }
  LOBYTE(v7) = v10 || v11;
  return v7;
}

/*
==============
Bot_StampNodeArea
==============
*/
void Bot_StampNodeArea(const bot_data_t *const botData, pathnode_t *node)
{
  const char *GameType; 
  int NodeTeam; 
  __int64 v7; 
  __int64 v8; 
  __int64 v9; 
  bool v10; 
  unsigned int totalLinkCount; 
  __int64 v16; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23242, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !node && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23243, ASSERT_TYPE_ASSERT, "( node )", (const char *)&queryFormat, "node") )
    __debugbreak();
  if ( !Com_GameMode_SupportsFeature(WEAPON_RAISING_ALTSWITCH) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23251, ASSERT_TYPE_ASSERT, "(Com_GameMode_SupportsFeature( Com_GameMode_Feature::BOTS ))", "%s\n\tAccess to pathnode_dynamic::bots", "Com_GameMode_SupportsFeature( Com_GameMode_Feature::BOTS )") )
    __debugbreak();
  if ( !BG_BotSystemEnabled() || (GameType = SV_GameMP_GetGameType(), *GameType == aBr_2[0]) && GameType[1] == aBr_2[1] && GameType[2] == aBr_2[2] )
  {
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23252, ASSERT_TYPE_ASSERT, "(!Path_MapUsesScriptedAIData())", "%s\n\tmap/mode is only set up to use scripted soldier data, should not be accessing pathnode_dynamic::bots", "!Path_MapUsesScriptedAIData()") )
      __debugbreak();
  }
  NodeTeam = Path_GetNodeTeam(botData->botInfo.sentient->eTeam);
  v7 = NodeTeam;
  if ( (unsigned int)NodeTeam >= 2 )
  {
    LODWORD(v16) = NodeTeam;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23255, ASSERT_TYPE_ASSERT, "(unsigned)( nodeTeam ) < (unsigned)( (2) )", "nodeTeam doesn't index MAX_NODE_TEAMS_MP\n\t%i not in [0, %i)", v16, 2) )
      __debugbreak();
  }
  v8 = v7;
  node->dynamic.actors.dangerousNodeTime[v7] = level.time;
  v9 = 0i64;
  v10 = 1;
  if ( node->constant.totalLinkCount )
  {
    __asm
    {
      vmovaps [rsp+58h+var_18], xmm6
      vmovss  xmm6, cs:__real@43266666
    }
    do
    {
      _RAX = node->constant.Links;
      _RCX = 3 * v9;
      __asm { vcomiss xmm6, dword ptr [rax+rcx*4] }
      if ( !v10 )
        Path_ConvertIndexToNode(_RAX[v9].nodeNum)->dynamic.actors.dangerousNodeTime[v8] = level.time;
      totalLinkCount = node->constant.totalLinkCount;
      v9 = (unsigned int)(v9 + 1);
      v10 = (unsigned int)v9 <= totalLinkCount;
    }
    while ( (unsigned int)v9 < totalLinkCount );
    __asm { vmovaps xmm6, [rsp+58h+var_18] }
  }
}

/*
==============
Bot_StartProf
==============
*/
void Bot_StartProf(void)
{
  unsigned __int64 v0; 

  v0 = __rdtsc();
  s_botProfTimeStart = v0;
}

/*
==============
Bot_StopPursuingEnemy
==============
*/
void Bot_StopPursuingEnemy(bot_data_t *botData)
{
  gentity_s *v2; 
  const gentity_s *v3; 
  signed __int64 v4; 
  char *v5; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9495, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
  {
    v2 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
    v3 = v2;
    if ( v2 )
    {
      if ( !v2->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9501, ASSERT_TYPE_ASSERT, "( enemy->sentient )", (const char *)&queryFormat, "enemy->sentient") )
        __debugbreak();
      v4 = 60 * (v3->sentient - level.sentients);
      v5 = (char *)&botData->scriptedAgentInfo + v4 + 11644;
      if ( (bot_data_t *)((char *)botData + v4) == (bot_data_t *)-11652i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9507, ASSERT_TYPE_ASSERT, "( botTgtSentientInfo )", (const char *)&queryFormat, "botTgtSentientInfo") )
        __debugbreak();
      if ( *((_DWORD *)v5 + 9) < Bot_GetLastKnownEntPosAndTime(botData, v3, NULL) )
        GScr_Notify(botData->botInfo.ent, scr_const.search_end, 0);
      *((_DWORD *)v5 + 9) = level.time;
    }
  }
}

/*
==============
Bot_StrafeOnPath
==============
*/
void Bot_StrafeOnPath(bot_data_t *botData, usercmd_s *cmd, int speed)
{
  gentity_s **p_ent; 
  const dvar_t *v32; 
  const gentity_s *v49; 
  AIBotInterface *m_pAI; 
  gentity_s *TargetEntity; 
  const dvar_t *v52; 
  bool drawAvoidance; 
  bool v55; 
  const dvar_t *v83; 
  const dvar_t *v105; 
  int pm_time; 
  int outColliderCount[2]; 
  AIBotWrapper v119; 
  AvoidingEntityInfo avoidingEntityInfo; 
  vec3_t outAvoidingVelocity; 
  vec3_t outLookaheadDir; 
  vec3_t vec; 
  vec3_t right; 
  vec3_t angles; 
  int outColliderEntNums[272]; 
  char v127; 
  void *retaddr; 

  _RAX = &retaddr;
  __asm
  {
    vmovaps xmmword ptr [rax-48h], xmm6
    vmovaps xmmword ptr [rax-58h], xmm7
    vmovaps xmmword ptr [rax-68h], xmm8
  }
  _ER15 = speed;
  _RBX = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15040, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  _R14 = _RBX->botInfo.playerState;
  if ( !_R14 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15043, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  p_ent = &_RBX->botInfo.ent;
  if ( !_RBX->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15055, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  __asm
  {
    vxorps  xmm0, xmm0, xmm0
    vmovss  dword ptr [rbp+4D0h+vec], xmm0
    vmovss  dword ptr [rbp+4D0h+vec+4], xmm0
    vmovss  dword ptr [rbp+4D0h+vec+8], xmm0
    vmovss  dword ptr [rbp+4D0h+right], xmm0
    vmovss  dword ptr [rbp+4D0h+right+4], xmm0
    vmovss  dword ptr [rbp+4D0h+right+8], xmm0
    vmovss  xmm6, dword ptr [r14+1DCh]
    vmovss  xmm8, cs:__real@80000000
    vmovss  xmm7, cs:__real@3f800000
  }
  if ( Bot_IsThrowingGrenade(_RBX) )
  {
    __asm
    {
      vmovss  xmm0, dword ptr [rbx+6DD8h]
      vmovss  xmm1, dword ptr [rbx+6DDCh]
    }
LABEL_17:
    __asm
    {
      vsubss  xmm4, xmm0, dword ptr [rax+130h]
      vmovss  dword ptr [rbp+4D0h+vec], xmm4
      vsubss  xmm3, xmm1, dword ptr [rax+134h]
      vmulss  xmm0, xmm3, xmm3
      vmulss  xmm1, xmm4, xmm4
      vaddss  xmm1, xmm1, xmm0
      vsqrtss xmm2, xmm1, xmm1
      vcmpless xmm0, xmm2, xmm8
      vblendvps xmm0, xmm2, xmm7, xmm0
      vdivss  xmm1, xmm7, xmm0
      vmulss  xmm0, xmm4, xmm1
      vmulss  xmm1, xmm3, xmm1
      vmovss  dword ptr [rbp+4D0h+vec+4], xmm1
      vmovss  dword ptr [rbp+4D0h+vec], xmm0
    }
    vectoangles(&vec, &angles);
    __asm { vmovss  xmm6, dword ptr [rbp+4D0h+angles+4] }
    goto LABEL_18;
  }
  if ( (*((_BYTE *)&_RBX->scriptedAgentInfo + 28228) & 2) != 0 )
  {
    __asm
    {
      vmovss  xmm0, dword ptr [rbx+2324h]
      vmovss  xmm1, dword ptr [rbx+2328h]
    }
    goto LABEL_17;
  }
  if ( level.time < _RBX->botInfo.lookAtTime && Bot_ShouldLookAtPoint(_RBX) )
  {
    __asm
    {
      vmovss  xmm0, dword ptr [rbx+6EC8h]
      vmovss  xmm1, dword ptr [rbx+6ECCh]
    }
    goto LABEL_17;
  }
LABEL_18:
  __asm { vmovaps xmm0, xmm6; yaw }
  YawVectors(*(float *)&_XMM0, &vec, &right);
  Nav_GetLookaheadDir(_RBX->botInfo.pNavigator, &outLookaheadDir);
  v32 = DCONST_DVARBOOL_ai_useOrca;
  if ( !DCONST_DVARBOOL_ai_useOrca && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 692, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "ai_useOrca") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v32);
  if ( v32->current.enabled && _RBX->botInfo.avoidance.avoidanceEnabled )
  {
    _RAX = _RBX->botInfo.playerState;
    __asm
    {
      vmovss  xmm0, dword ptr [rax+40h]
      vmovss  xmm3, dword ptr [rax+44h]
      vmovss  xmm4, dword ptr [rax+3Ch]
      vmulss  xmm0, xmm0, xmm0
      vmulss  xmm1, xmm4, xmm4
      vaddss  xmm2, xmm1, xmm0
      vmulss  xmm1, xmm3, xmm3
      vaddss  xmm2, xmm2, xmm1
      vsqrtss xmm0, xmm2, xmm2
      vmaxss  xmm5, xmm0, xmm7
      vmulss  xmm3, xmm5, dword ptr [rbp+4D0h+outLookaheadDir]
      vmulss  xmm2, xmm5, dword ptr [rbp+4D0h+outLookaheadDir+4]
      vmovss  dword ptr [rbp+4D0h+avoidingEntityInfo.currentVelocity], xmm4
      vmovss  xmm1, dword ptr [rax+40h]
      vmovss  dword ptr [rbp+4D0h+avoidingEntityInfo.currentVelocity+4], xmm1
      vmovss  xmm0, dword ptr [rax+44h]
      vmovss  dword ptr [rbp+4D0h+avoidingEntityInfo.currentVelocity+8], xmm0
      vmulss  xmm0, xmm5, dword ptr [rbp+4D0h+outLookaheadDir+8]
      vmovss  dword ptr [rbp+4D0h+outAvoidingVelocity+8], xmm0
      vmovss  dword ptr [rbp+4D0h+avoidingEntityInfo.desiredVelocity+8], xmm0
      vmovss  dword ptr [rbp+4D0h+outAvoidingVelocity], xmm3
      vmovss  dword ptr [rbp+4D0h+outAvoidingVelocity+4], xmm2
      vmovss  dword ptr [rbp+4D0h+avoidingEntityInfo.desiredVelocity], xmm3
      vmovss  dword ptr [rbp+4D0h+avoidingEntityInfo.desiredVelocity+4], xmm2
    }
    AICommonInterface::AICommonInterface(&v119.m_botInterface);
    v119.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
    AICommonInterface::AICommonInterface(&v119.m_botAgentInterface);
    v49 = *p_ent;
    v119.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
    v119.m_pAI = NULL;
    AIBotWrapper::Setup(&v119, v49);
    m_pAI = v119.m_pAI;
    if ( !v119.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15128, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
      __debugbreak();
    TargetEntity = AICommonInterface::GetTargetEntity(m_pAI);
    v52 = DVARINT_ai_debugEntIndex;
    avoidingEntityInfo.ignoreEnt = TargetEntity;
    avoidingEntityInfo.drawAvoidance = 0;
    if ( !DVARINT_ai_debugEntIndex && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "ai_debugEntIndex") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v52);
    _RDX = *p_ent;
    drawAvoidance = avoidingEntityInfo.drawAvoidance;
    v55 = v52->current.integer == (*p_ent)->s.number;
    avoidingEntityInfo.ent = *p_ent;
    if ( v55 )
      drawAvoidance = 1;
    avoidingEntityInfo.drawAvoidance = drawAvoidance;
    __asm
    {
      vmovss  xmm0, dword ptr [rdx+130h]
      vmovss  dword ptr [rbp+4D0h+avoidingEntityInfo.position], xmm0
      vmovss  xmm1, dword ptr [rdx+134h]
      vmovss  dword ptr [rbp+4D0h+avoidingEntityInfo.position+4], xmm1
      vmovss  xmm0, dword ptr [rdx+138h]
    }
    outColliderCount[0] = 0;
    __asm { vmovss  dword ptr [rbp+4D0h+avoidingEntityInfo.position+8], xmm0 }
    ORCA_DoAvoidance(&avoidingEntityInfo, &_RBX->botInfo.avoidance, &outAvoidingVelocity, ORCA_RateVelocity, outColliderEntNums, outColliderCount);
    __asm
    {
      vmovss  xmm5, dword ptr [rbp+4D0h+outAvoidingVelocity]
      vmovss  xmm6, dword ptr [rbp+4D0h+outAvoidingVelocity+4]
      vmovss  xmm4, dword ptr [rbp+4D0h+outAvoidingVelocity+8]
      vmulss  xmm0, xmm5, xmm5
      vmulss  xmm1, xmm6, xmm6
      vaddss  xmm2, xmm1, xmm0
      vmulss  xmm1, xmm4, xmm4
      vaddss  xmm0, xmm2, xmm1
      vsqrtss xmm3, xmm0, xmm0
      vcmpless xmm0, xmm3, xmm8
      vblendvps xmm0, xmm3, xmm7, xmm0
      vdivss  xmm1, xmm7, xmm0
      vmulss  xmm0, xmm4, xmm1
      vmulss  xmm3, xmm5, xmm1
      vmovss  dword ptr [rbp+4D0h+outLookaheadDir+8], xmm0
      vmulss  xmm5, xmm6, xmm1
    }
  }
  else
  {
    __asm
    {
      vmovss  xmm5, dword ptr [rbp+4D0h+outLookaheadDir+4]
      vmovss  xmm3, dword ptr [rbp+4D0h+outLookaheadDir]
    }
  }
  __asm
  {
    vmulss  xmm1, xmm5, xmm5
    vmulss  xmm0, xmm3, xmm3
    vaddss  xmm1, xmm1, xmm0
    vsqrtss xmm2, xmm1, xmm1
    vcmpless xmm0, xmm2, xmm8
    vblendvps xmm0, xmm2, xmm7, xmm0
    vdivss  xmm1, xmm7, xmm0
    vmulss  xmm7, xmm3, xmm1
    vmulss  xmm8, xmm5, xmm1
  }
  if ( Bot_IsStuckReacting(&_RBX->botInfo) || Bot_StuckShouldReact(&_RBX->botInfo) )
  {
    v83 = DVARINT_ai_showPaths;
    if ( !DVARINT_ai_showPaths && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "ai_showPaths") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v83);
    if ( v83->current.integer > 0 && Bot_ShouldDrawDebugForBot(_RBX) )
    {
      _RAX = *p_ent;
      __asm
      {
        vmulss  xmm0, xmm7, cs:__real@42480000
        vmulss  xmm2, xmm8, cs:__real@42480000
        vaddss  xmm1, xmm0, dword ptr [rax+130h]
        vmovss  dword ptr [rbp+4D0h+outLookaheadDir], xmm1
        vaddss  xmm0, xmm2, dword ptr [rax+134h]
        vmovss  dword ptr [rbp+4D0h+outLookaheadDir+4], xmm0
        vmovss  xmm1, dword ptr [rax+138h]
        vaddss  xmm2, xmm1, cs:__real@41c80000
        vmovss  dword ptr [rbp+4D0h+outLookaheadDir+8], xmm2
        vmovss  xmm0, dword ptr [rax+130h]
        vmovss  dword ptr [rbp+4D0h+outAvoidingVelocity], xmm0
        vmovss  xmm1, dword ptr [rax+134h]
        vmovss  dword ptr [rbp+4D0h+outAvoidingVelocity+4], xmm1
        vmovss  dword ptr [rbp+4D0h+outAvoidingVelocity+8], xmm2
      }
      G_DebugLine(&outAvoidingVelocity, &outLookaheadDir, &colorMagenta, 0);
    }
  }
  __asm
  {
    vmulss  xmm1, xmm8, dword ptr [rbp+4D0h+vec+4]
    vmulss  xmm0, xmm7, dword ptr [rbp+4D0h+vec]
    vaddss  xmm1, xmm1, xmm0
    vmulss  xmm0, xmm7, dword ptr [rbp+4D0h+right]
    vmovd   xmm6, r15d
    vcvtdq2ps xmm6, xmm6
    vmulss  xmm2, xmm1, xmm6
    vmulss  xmm1, xmm8, dword ptr [rbp+4D0h+right+4]
    vcvttss2si eax, xmm2
  }
  cmd->forwardmove = _EAX;
  __asm
  {
    vaddss  xmm1, xmm1, xmm0
    vmulss  xmm2, xmm1, xmm6
    vcvttss2si eax, xmm2
  }
  cmd->rightmove = _EAX;
  if ( _ER15 > 0 )
  {
    if ( GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&_R14->pm_flags, ACTIVE, 0x13u) )
    {
      v105 = DCONST_DVARINT_jump_landSlowDownTime;
      if ( !DCONST_DVARINT_jump_landSlowDownTime && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "jump_landSlowDownTime") )
        __debugbreak();
      Dvar_CheckFrontendServerThread(v105);
      pm_time = _R14->pm_time;
      if ( pm_time > v105->current.integer || !pm_time )
        goto LABEL_53;
    }
    else if ( GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&_R14->pm_flags, ACTIVE, 0xCu) )
    {
      goto LABEL_53;
    }
    __asm
    {
      vandps  xmm6, xmm6, cs:__xmm@7fffffff7fffffff7fffffff7fffffff
      vmulss  xmm6, xmm6, cs:__real@3c010204
    }
    if ( Bot_Weap_IsDoingADS(_RBX) )
      __asm { vmulss  xmm6, xmm6, cs:__real@3f000000 }
    G_Level_GetFrameDuration();
    __asm
    {
      vxorps  xmm0, xmm0, xmm0
      vcvtsi2ss xmm0, xmm0, edx
      vmulss  xmm1, xmm0, xmm6
      vcvttss2si eax, xmm1
    }
    _RBX->botInfo.pathProgressTime += _EAX + 1;
  }
LABEL_53:
  _R11 = &v127;
  __asm
  {
    vmovaps xmm6, xmmword ptr [r11-10h]
    vmovaps xmm7, xmmword ptr [r11-20h]
    vmovaps xmm8, xmmword ptr [r11-30h]
  }
}

/*
==============
Bot_StuckShouldReact
==============
*/
_BOOL8 Bot_StuckShouldReact(const bot_info_t *botInfo)
{
  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7786, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  return botInfo->stuckFrames >= 2u;
}

/*
==============
Bot_Think
==============
*/
void Bot_Think(SvClientMP *bot, usercmd_s *cmd)
{
  bot_data_t *ClientData; 
  bot_info_t *BotInfoFromNetBuffer; 
  int MpClientIndex; 
  playerState_s *PlayerState; 
  int v8; 
  int v9; 
  __int64 v12; 
  const dvar_t *v21; 
  gentity_s *ent; 
  const dvar_t *v23; 
  gentity_s *v24; 
  const dvar_t *v25; 
  char v27; 
  bool v28; 
  const gentity_s *v29; 
  const bot_data_t *EntityData; 
  sentient_s *sentient; 
  team_t eTeam; 
  unsigned __int64 buttons; 
  const Weapon *ViewmodelWeapon; 
  int v35; 
  BOOL v36; 
  int health; 
  bool v38; 
  const playerState_s *v52; 
  GWeaponMap *Instance; 
  const Weapon *v54; 
  int v57; 
  int v58; 
  int v59; 
  BOOL v60; 
  const Weapon *v61; 

  _RSI = cmd;
  if ( !bot && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5552, ASSERT_TYPE_ASSERT, "( bot )", (const char *)&queryFormat, "bot") )
    __debugbreak();
  if ( !_RSI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5553, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  ClientData = Bot_GetClientData(bot);
  if ( !ClientData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5556, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  BotInfoFromNetBuffer = Bot_GetBotInfoFromNetBuffer(bot);
  if ( !BotInfoFromNetBuffer && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5558, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  MpClientIndex = SV_Client_GetMpClientIndex(bot);
  PlayerState = G_MainMP_GetPlayerState(MpClientIndex);
  if ( !PlayerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5561, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  v8 = SV_Client_GetMpClientIndex(bot);
  if ( !_RSI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5486, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  v9 = 0;
  *(_QWORD *)&_RSI->serverTime = 0i64;
  _RSI->inputTime = 0;
  if ( BotInfoFromNetBuffer->ent )
  {
    if ( !BotInfoFromNetBuffer->lastUserCmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5576, ASSERT_TYPE_ASSERT, "( botInfo->lastUserCmd )", (const char *)&queryFormat, "botInfo->lastUserCmd") )
      __debugbreak();
    _RAX = BotInfoFromNetBuffer->lastUserCmd;
    _RCX = _RSI;
    v12 = 2i64;
    do
    {
      _RCX = (usercmd_s *)((char *)_RCX + 128);
      __asm { vmovups xmm0, xmmword ptr [rax] }
      _RAX = (usercmd_s *)((char *)_RAX + 128);
      __asm
      {
        vmovups xmmword ptr [rcx-80h], xmm0
        vmovups xmm1, xmmword ptr [rax-70h]
        vmovups xmmword ptr [rcx-70h], xmm1
        vmovups xmm0, xmmword ptr [rax-60h]
        vmovups xmmword ptr [rcx-60h], xmm0
        vmovups xmm1, xmmword ptr [rax-50h]
        vmovups xmmword ptr [rcx-50h], xmm1
        vmovups xmm0, xmmword ptr [rax-40h]
        vmovups xmmword ptr [rcx-40h], xmm0
        vmovups xmm1, xmmword ptr [rax-30h]
        vmovups xmmword ptr [rcx-30h], xmm1
        vmovups xmm0, xmmword ptr [rax-20h]
        vmovups xmmword ptr [rcx-20h], xmm0
        vmovups xmm1, xmmword ptr [rax-10h]
        vmovups xmmword ptr [rcx-10h], xmm1
      }
      --v12;
    }
    while ( v12 );
    _RCX->buttons = _RAX->buttons;
    _RSI->buttons = 0i64;
    Bot_ThinkRoundRobin(ClientData);
    if ( !ClientData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3069, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
      __debugbreak();
    if ( ClientData->botDebugData.errorLocCount > 0 )
    {
      do
        Bot_DrawDebugErrorLocation(ClientData, &ClientData->botDebugData.errorLocs[v9++]);
      while ( v9 < ClientData->botDebugData.errorLocCount );
    }
    v21 = DVARBOOL_bot_GodMode;
    if ( !DVARBOOL_bot_GodMode && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 692, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_GodMode") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v21);
    ent = BotInfoFromNetBuffer->ent;
    if ( v21->current.enabled )
      ent->flags.m_flags[0] |= 1u;
    else
      ent->flags.m_flags[0] &= ~1u;
    v23 = DVARBOOL_bot_DemiGodMode;
    if ( !DVARBOOL_bot_DemiGodMode && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 692, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DemiGodMode") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v23);
    v24 = BotInfoFromNetBuffer->ent;
    if ( v23->current.enabled )
      v24->flags.m_flags[0] |= 2u;
    else
      v24->flags.m_flags[0] &= ~2u;
    v25 = DVARBOOL_bot_DisableAllAI;
    if ( !DVARBOOL_bot_DisableAllAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 692, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DisableAllAI") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v25);
    if ( v25->current.enabled || (BotInfoFromNetBuffer->scriptFlags & 0x400000) != 0 )
    {
      memset_0(_RSI, 0, sizeof(usercmd_s));
      Bot_Weap_ClearCmd(_RSI, BotInfoFromNetBuffer->playerState);
      _RAX = BotInfoFromNetBuffer->lastUserCmd;
      __asm
      {
        vmovsd  xmm0, qword ptr [rax+18h]
        vmovsd  qword ptr [rsi+18h], xmm0
      }
      _RSI->angles.v[2] = _RAX->angles.v[2];
    }
    else
    {
      _R15 = &ClientData->8;
      if ( ClientData == (bot_data_t *)-8i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13934, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
        __debugbreak();
      v27 = ClientData->botInfo.playerState->skydivePlayerState.state[0];
      v28 = (v27 & 0xFA) == 0 && v27 != 1;
      if ( !ClientData->botInfo.traversal && v28 )
        Nav_SetPos(ClientData->botInfo.pNavigator, &_R15->botInfo.ent->r.currentOrigin);
      v29 = BotInfoFromNetBuffer->ent;
      if ( !BotInfoFromNetBuffer->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5446, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
        __debugbreak();
      if ( !SV_BotIsBotEnt(v29) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5447, ASSERT_TYPE_ASSERT, "( SV_BotIsBotEnt( ent ) )", (const char *)&queryFormat, "SV_BotIsBotEnt( ent )") )
        __debugbreak();
      EntityData = Bot_GetEntityData(v29);
      if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5450, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
        __debugbreak();
      if ( Bot_IsControllingRemoteMissile(EntityData) )
        _RSI->buttons |= 0x40000ui64;
      sentient = BotInfoFromNetBuffer->ent->sentient;
      if ( !sentient || (eTeam = sentient->eTeam) == TEAM_ZERO || eTeam == TEAM_SPECTATOR || sv_paused->current.integer || Com_MP_GetIsLocalServerPaused() )
      {
        Bot_SetFrozenCmd(ClientData, _RSI);
      }
      else
      {
        if ( (BotInfoFromNetBuffer->ent->client->flags & 4) != 0 )
        {
          buttons = BotInfoFromNetBuffer->lastUserCmd->buttons;
          if ( (buttons & 0x80u) != 0i64 )
          {
            _RSI->buttons |= 0x80ui64;
            buttons = BotInfoFromNetBuffer->lastUserCmd->buttons;
          }
          if ( (buttons & 0x40) != 0 )
          {
            _RSI->buttons |= 0x40ui64;
            buttons = BotInfoFromNetBuffer->lastUserCmd->buttons;
          }
          if ( (buttons & 8) != 0 )
            _RSI->buttons |= 8ui64;
          Bot_DrawDebug(ClientData);
          Bot_SetFrozenCmd(ClientData, _RSI);
          ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(PlayerState);
          if ( Bot_Weap_IsNone(ViewmodelWeapon) )
            Bot_Weap_Update(ClientData, _RSI);
          if ( (BotInfoFromNetBuffer->ent->client->flags & 0x400) == 0 )
            Bot_UpdateDirection(ClientData, _RSI);
          goto LABEL_149;
        }
        v35 = 1;
        v36 = G_MainMP_GetClientArchiveTime(v8) != 0;
        health = BotInfoFromNetBuffer->ent->health;
        v38 = GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&PlayerState->pm_flags, ACTIVE, 0xFu);
        if ( health > 0 && !v36 && !v38 )
        {
          GStatic::SetActiveStatics();
          Bot_UpdateDebugErrorLocations(ClientData);
          if ( Dvar_GetBool_Internal_DebugName(DCONST_DVARBOOL_g_DisablePlayerNearestDataUpdates, "g_DisablePlayerNearestDataUpdates") )
            Com_PrintError(18, "Using bots when g_DisablePlayerNearestDataUpdates is true - bots will not function properly!\n");
          if ( Dvar_GetBool_Internal_DebugName(DVARBOOL_g_DisablePlayerRepulsors, "g_DisablePlayerRepulsors") )
            Com_PrintError(18, "Using bots when g_DisablePlayerRepulsors is true - bots will not function properly!\n");
          if ( SV_BotRequirePathnodes(ClientData) && !Sentient_NearestNode(BotInfoFromNetBuffer->ent->sentient) || !SV_BotRequirePathnodes(ClientData) && !Sentient_NearestTacPoint(BotInfoFromNetBuffer->ent->sentient) )
          {
            Bot_UpdateStrafe(ClientData);
            Bot_UpdateMove_OffPathGrid(ClientData, _RSI);
            Bot_DrawDebug(ClientData);
            if ( BG_IsScriptedSceneAnimFlagEnabled(PlayerState) )
              Bot_Weap_Update(ClientData, _RSI);
            else
              Bot_Weap_ClearCmd(_RSI, BotInfoFromNetBuffer->playerState);
            GStatic::ClearActiveStatics();
            goto LABEL_149;
          }
          ClientData->botDebugData.flags &= ~2u;
          Bot_UpdateRadar(ClientData);
          Bot_UpdateXRayVision(ClientData);
          Bot_UpdateSight(ClientData, _RSI);
          Bot_UpdateThreat(ClientData);
          Bot_UpdateEnemyTrack(ClientData);
          if ( !_R15->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7340, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
            __debugbreak();
          if ( EntHandle::isDefined(&ClientData->botInfo.sentient->targetEnt) && EntHandle::ent(&ClientData->botInfo.sentient->targetEnt) )
          {
            _RCX = _R15->botInfo.ent;
            __asm
            {
              vmovss  xmm0, dword ptr [rcx+130h]
              vsubss  xmm3, xmm0, dword ptr [rax+130h]
              vmovss  xmm1, dword ptr [rcx+134h]
              vsubss  xmm2, xmm1, dword ptr [rax+134h]
              vmovss  xmm0, dword ptr [rcx+138h]
              vsubss  xmm4, xmm0, dword ptr [rax+138h]
              vmulss  xmm2, xmm2, xmm2
              vmulss  xmm1, xmm3, xmm3
              vaddss  xmm3, xmm2, xmm1
              vmulss  xmm0, xmm4, xmm4
              vaddss  xmm2, xmm3, xmm0
              vsqrtss xmm1, xmm2, xmm2
              vmovss  dword ptr [r15+238Ch], xmm1
            }
          }
          Bot_UpdateRiotShieldDesired(ClientData);
          Bot_Weap_Update(ClientData, _RSI);
          Bot_UpdateMovement(ClientData, _RSI);
          Bot_UpdateDoors(ClientData);
          Bot_UpdateAimDownSightsDesire(ClientData, _RSI);
          Bot_UpdateCombat(ClientData, _RSI);
          if ( ClientData == (bot_data_t *)-8i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9308, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
            __debugbreak();
          v52 = ClientData->botInfo.playerState;
          if ( !v52 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9310, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
            __debugbreak();
          if ( !Bot_Weap_UpdateReload(ClientData, _RSI) )
          {
            Instance = GWeaponMap::GetInstance();
            v54 = BG_GetViewmodelWeapon(Instance, v52);
            if ( BG_HasUnderbarrelWeapon(v54) )
            {
              GameModeFlagContainer<enum PWeaponFlagsCommon,enum PWeaponFlagsSP,enum PWeaponFlagsMP,64>::SetFlagInternal(&v52->weapCommon.weapFlags, ACTIVE, 0x11u);
              Bot_Weap_UpdateReload(ClientData, _RSI);
              GameModeFlagContainer<enum PWeaponFlagsCommon,enum PWeaponFlagsSP,enum PWeaponFlagsMP,64>::ClearFlagInternal(&v52->weapCommon.weapFlags, ACTIVE, 0x11u);
            }
          }
          _RBX = ClientData->botInfo.playerState;
          if ( Bot_ShouldPressADSButton(ClientData) )
          {
            _RSI->buttons |= 0x200ui64;
            if ( Bot_Weap_CanHoldBreath(_RBX) )
            {
              __asm
              {
                vmovss  xmm0, cs:__real@3f800000
                vcomiss xmm0, dword ptr [rbx+730h]
              }
              ClientData->botInfo.nextHoldBreathCheckTime = level.time + G_irand(0, 3000);
            }
            else
            {
              *(_QWORD *)((char *)&ClientData->scriptedAgentInfo + 28092) = 0i64;
            }
          }
          Bot_UpdateScriptedButtons(ClientData, _RSI);
          Bot_UpdateNVGState(ClientData, _RSI);
          Bot_DrawDebug(ClientData);
          Bot_UpdateScreenTargets(ClientData);
          Bot_UpdateMeleeCharge(ClientData, _RSI);
          if ( Bot_Weap_WeaponHasVariableZoom(ClientData) )
          {
            if ( BG_InADS(ClientData->botInfo.playerState) )
            {
              v59 = level.time - ClientData->botInfo.enemyTrack.lastFireTime;
              v60 = level.time > ClientData->botInfo.nextZoomPressTime;
              if ( !BG_IsZoomButtonPressed(ClientData->botInfo.lastUserCmd) && !BG_IsZoomButtonPressed(_RSI) )
                v35 = 0;
              if ( v59 <= 500 || !v60 || v35 )
                goto LABEL_132;
              if ( !Com_GameMode_SupportsFeature(WEAPONSTATES_NUM|WEAPON_LADDER_AIM) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8046, ASSERT_TYPE_ASSERT, "(Com_GameMode_SupportsFeature( Com_GameMode_Feature::WEAPON_VARIABLE_ZOOM ))", (const char *)&queryFormat, "Com_GameMode_SupportsFeature( Com_GameMode_Feature::WEAPON_VARIABLE_ZOOM )") )
                __debugbreak();
              _RSI->buttons |= 0x2000000ui64;
              v57 = 6000;
              v58 = 1000;
            }
            else
            {
              v57 = 3000;
              v58 = 0;
            }
            ClientData->botInfo.nextZoomPressTime = level.time + G_irand(v58, v57);
          }
LABEL_132:
          Bot_UpdateHybridToggle(ClientData, _RSI);
          if ( !ClientData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5464, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState )", (const char *)&queryFormat, "botData->botInfo.playerState") )
            __debugbreak();
          if ( ClientData->botInfo.wantsAlternate )
          {
            v61 = Bot_Weap_GetViewmodelWeapon(ClientData->botInfo.playerState);
            if ( !Bot_Weap_IsNone(v61) && BG_ActiveUnderbarrel(v61) )
              BG_HasUnderbarrelAmmo(v61);
          }
          if ( Bot_IsFiringWeapon(ClientData, _RSI) )
            ClientData->botInfo.lastAudioDistraction = level.time;
          if ( memcmp_0(&_RSI->weapon, &BotInfoFromNetBuffer->lastUserCmd->weapon, 0x3Cui64) )
            BotInfoFromNetBuffer->weaponFireWaitArcCos = 0.0;
          BotInfoFromNetBuffer->flags &= 0xFFFFFF9F;
          if ( (BotInfoFromNetBuffer->flags & 8) != 0 )
            Bot_PathClear(BotInfoFromNetBuffer);
          Bot_UpdateClientMessageNotifies(ClientData, _RSI);
          GStatic::ClearActiveStatics();
          goto LABEL_149;
        }
        Sentient_InvalidateNearestNode(BotInfoFromNetBuffer->sentient);
        Sentient_InvalidateNearestTacPoint(BotInfoFromNetBuffer->sentient);
        Bot_Weap_ClearCmd(_RSI, BotInfoFromNetBuffer->playerState);
      }
    }
LABEL_149:
    Bot_FinalizeCmdTime(_RSI);
  }
}

/*
==============
Bot_ThinkRoundRobin
==============
*/
void Bot_ThinkRoundRobin(bot_data_t *botData)
{
  int v4; 
  const gentity_s *ent; 
  AIBotInterface *m_pAI; 
  const pathnode_t *v7; 
  bitarray_base<bitarray<224> > *v8; 
  int v9; 
  int NodeTeam; 
  int v11; 
  int flags; 
  unsigned int v13; 
  bool v23; 
  sentient_s *i; 
  gentity_s *v29; 
  __int16 EntityIndex; 
  const SvClientMP *MpClient; 
  BOOL IsClientConnected; 
  bitarray_base<bitarray<224> > *AllTeamFlags; 
  const SvClientMP *v34; 
  signed __int64 v36; 
  int v40; 
  __int64 v41; 
  gclient_s *client; 
  const char *RandomName; 
  const char *name; 
  __int64 v45; 
  __int64 v46; 
  char dest[8]; 
  AIBotWrapper v48; 
  bot_zone_count_cmp_t compares; 
  vec3_t end; 
  bitarray<224> iTeamFlags; 
  vec3_t vEyePosOut; 
  char newName[36]; 

  _RDI = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5781, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !_RDI->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5783, ASSERT_TYPE_ASSERT, "( botInfo->sentient )", (const char *)&queryFormat, "botInfo->sentient") )
    __debugbreak();
  if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
    __debugbreak();
  v4 = (signed int)ComCharacterLimits::ms_gameData.m_characterCount / 3;
  if ( level.framenum % v4 == G_GetEntityIndex(_RDI->botInfo.ent) % v4 )
  {
    __asm { vmovaps [rsp+130h+var_30], xmm6 }
    AICommonInterface::AICommonInterface(&v48.m_botInterface);
    v48.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
    AICommonInterface::AICommonInterface(&v48.m_botAgentInterface);
    ent = _RDI->botInfo.ent;
    v48.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
    v48.m_pAI = NULL;
    AIBotWrapper::Setup(&v48, ent);
    m_pAI = v48.m_pAI;
    if ( !v48.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5793, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
      __debugbreak();
    v7 = NULL;
    if ( SV_BotRequirePathnodes(_RDI) )
      v7 = Sentient_NearestNode(_RDI->botInfo.sentient);
    if ( Path_ZoneCount() && level.teammode != TEAMMODE_FFA && v7 )
    {
      v8 = (bitarray_base<bitarray<224> > *)(Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) ? Com_TeamsSP_GetAllCombatTeamFlags() : Com_TeamsMP_GetAllTeamFlags());
      if ( bitarray_base<bitarray<224>>::testBit(v8, _RDI->botInfo.sentient->eTeam) )
      {
        v9 = Path_NodeZoneFromNode(v7);
        if ( v9 != 255 )
        {
          NodeTeam = Path_GetNodeTeam(_RDI->botInfo.sentient->eTeam);
          *(_QWORD *)&compares.count = 3i64;
          compares.value = 0;
          v11 = Bot_ZoneNearestCount(v9, NodeTeam, 2, &compares, 1);
          flags = _RDI->botInfo.flags;
          if ( v11 == 255 )
            v13 = flags & 0xFFFF7FFF;
          else
            v13 = flags | 0x8000;
          _RDI->botInfo.flags = v13;
        }
      }
    }
    __asm
    {
      vmovss  xmm6, cs:__real@3f800000
      vxorps  xmm0, xmm0, xmm0
      vmovaps xmm2, xmm6; max
      vcvtsi2ss xmm0, xmm0, ecx
      vsubss  xmm1, xmm0, cs:__real@44fa0000
      vmulss  xmm0, xmm1, cs:__real@3951b717; val
      vxorps  xmm1, xmm1, xmm1; min
    }
    *(double *)&_XMM0 = I_fclamp(*(float *)&_XMM0, *(float *)&_XMM1, *(float *)&_XMM2);
    __asm
    {
      vsubss  xmm1, xmm6, xmm0; max
      vxorps  xmm0, xmm0, xmm0; min
    }
    *(double *)&_XMM0 = G_flrand(*(float *)&_XMM0, *(float *)&_XMM1);
    __asm { vmovss  dword ptr [rdi+23E8h], xmm0 }
    v23 = Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80);
    __asm { vmovaps xmm6, [rsp+130h+var_30] }
    if ( v23 )
      _RAX = Com_TeamsSP_GetAllTeamFlags();
    else
      _RAX = Com_TeamsMP_GetAllTeamFlags();
    __asm
    {
      vmovups xmm0, xmmword ptr [rax]
      vmovups xmmword ptr [rbp+30h+iTeamFlags.array], xmm0
      vmovsd  xmm1, qword ptr [rax+10h]
      vmovsd  qword ptr [rbp+30h+iTeamFlags.array+10h], xmm1
    }
    iTeamFlags.array[6] = _RAX->array[6];
    for ( i = Sentient_FirstSentient(&iTeamFlags); i; i = Sentient_NextSentient(i, &iTeamFlags) )
    {
      v29 = i->ent;
      if ( i->ent )
      {
        EntityIndex = G_GetEntityIndex(i->ent);
        if ( G_IsEntityInUse(EntityIndex) )
        {
          if ( v29->sentient )
          {
            if ( v29->client )
            {
              MpClient = SV_Client_GetMpClient(v29->s.number);
              IsClientConnected = Bot_IsClientConnected(MpClient);
            }
            else
            {
              if ( !v29->agent )
                goto LABEL_40;
              IsClientConnected = v29->s.eType == ET_AGENT;
            }
            if ( IsClientConnected )
            {
LABEL_40:
              if ( v29->s.eType != ET_INVISIBLE )
              {
                AllTeamFlags = (bitarray_base<bitarray<224> > *)Com_TeamsMP_GetAllTeamFlags();
                if ( bitarray_base<bitarray<224>>::testBit(AllTeamFlags, v29->sentient->eTeam) )
                {
                  if ( !v29->client || (v34 = SV_Client_GetMpClient(v29->s.number), Bot_IsClientActive(v34)) )
                  {
                    if ( !AI_IsAlliedSentient(_RDI->botInfo.sentient, i) && Bot_IsHighAerialSentient(i) )
                    {
                      Sentient_GetHeadPosition(_RDI->botInfo.sentient, &vEyePosOut);
                      _RAX = i->ent;
                      v36 = (char *)i - (char *)level.sentients;
                      __asm
                      {
                        vmovss  xmm0, dword ptr [rax+130h]
                        vmovss  dword ptr [rbp+30h+end], xmm0
                        vmovss  xmm1, dword ptr [rax+134h]
                        vmovss  dword ptr [rbp+30h+end+4], xmm1
                        vmovss  xmm0, dword ptr [rax+138h]
                        vmovss  dword ptr [rbp+30h+end+8], xmm0
                      }
                      v40 = 2 * AICommonInterface::SightTrace(m_pAI, &vEyePosOut, &end, i->ent->s.number, NORMAL_FOLIAGE_CHECKS);
                      v41 = v36 / 184;
                      *((_DWORD *)&_RDI->botInfo.botSentientInfo[v41] + 14) &= ~2u;
                      *((_DWORD *)&_RDI->botInfo.botSentientInfo[v41] + 14) |= v40;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if ( !_RDI->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5848, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
      __debugbreak();
    client = _RDI->botInfo.ent->client;
    if ( client )
    {
      Bot_RemoveDebugSuffixFromName(client->sess.cs.name, (char (*)[36])newName);
      if ( SV_BotPlayerNameTaken(_RDI, newName) )
      {
        RandomName = SV_BotGetRandomName();
        Bot_NameSet(_RDI, RandomName, NULL);
      }
      if ( _RDI->botMatchData.personality >= (unsigned int)BOT_PERSONALITY_DEFAULT )
      {
        LODWORD(v46) = _RDI->botMatchData.personality;
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5862, ASSERT_TYPE_ASSERT, "(unsigned)( botData->botMatchData.personality ) < (unsigned)( ( sizeof( *array_counter( BOT_STR_TBL_PERSONALITY_TAG ) ) + 0 ) - 1 )", "botData->botMatchData.personality doesn't index ARRAY_COUNT( BOT_STR_TBL_PERSONALITY_TAG ) - 1\n\t%i not in [0, %i)", v46, 3) )
          __debugbreak();
      }
      name = _RDI->botInfo.ent->client->sess.cs.name;
      if ( _RDI->botInfo.ent->client == (gclient_s *)-22188i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3473, ASSERT_TYPE_ASSERT, "( originalName )", (const char *)&queryFormat, "originalName") )
        __debugbreak();
      if ( Bot_HasDebugSuffixInName(name) )
      {
        v45 = -1i64;
        do
          ++v45;
        while ( name[v45] );
        Core_strncpy(dest, 4ui64, &name[(int)v45 - 5], 3ui64);
      }
      else
      {
        dest[0] = 0;
      }
      if ( I_stricmp(dest, BOT_STR_TBL_PERSONALITY_TAG[_RDI->botMatchData.personality]) )
        Bot_NameSet(_RDI, NULL, BOT_STR_TBL_PERSONALITY_TAG[_RDI->botMatchData.personality]);
    }
  }
}

/*
==============
Bot_TimeStampPath
==============
*/
void Bot_TimeStampPath(bot_info_t *botInfo, int useTime)
{
  ;
}

/*
==============
Bot_TraceBlocksTraversal
==============
*/
__int64 Bot_TraceBlocksTraversal(bot_data_t *botData, const trace_t *trace, const vec3_t *destination, int *byEnemy)
{
  bool v11; 
  bool v12; 
  unsigned __int16 EntityHitId; 
  __int64 v15; 
  gentity_s *GEntity; 
  char v39; 
  const sentient_s *sentient; 
  __int64 v42; 
  __int64 v43; 

  _R14 = destination;
  _RBX = trace;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2207, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2208, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
    __debugbreak();
  if ( !_RBX && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2209, ASSERT_TYPE_ASSERT, "( trace )", (const char *)&queryFormat, "trace") )
    __debugbreak();
  v11 = byEnemy == NULL;
  if ( !byEnemy )
  {
    v12 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2210, ASSERT_TYPE_ASSERT, "( byEnemy )", (const char *)&queryFormat, "byEnemy");
    v11 = !v12;
    if ( v12 )
      __debugbreak();
  }
  __asm { vmovss  xmm0, cs:__real@3f800000 }
  *byEnemy = 0;
  __asm { vcomiss xmm0, dword ptr [rbx] }
  if ( v11 )
    return 0i64;
  EntityHitId = Trace_GetEntityHitId(_RBX);
  if ( EntityHitId == 2047 )
    return 0i64;
  v15 = EntityHitId;
  __asm
  {
    vmovaps [rsp+98h+var_38], xmm6
    vmovaps [rsp+98h+var_48], xmm7
    vmovaps [rsp+98h+var_58], xmm8
  }
  if ( (unsigned int)EntityHitId >= level.num_entities )
  {
    LODWORD(v42) = EntityHitId;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2220, ASSERT_TYPE_ASSERT, "(unsigned)( hitEntID ) < (unsigned)( level.num_entities )", "hitEntID doesn't index level.num_entities\n\t%i not in [0, %i)", v42, level.num_entities) )
      __debugbreak();
  }
  if ( (unsigned int)v15 >= 0x800 )
  {
    LODWORD(v43) = 2048;
    LODWORD(v42) = v15;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 207, ASSERT_TYPE_ASSERT, "(unsigned)( entityIndex ) < (unsigned)( ( 2048 ) )", "entityIndex doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v42, v43) )
      __debugbreak();
  }
  if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 208, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
    __debugbreak();
  if ( g_entities[v15].r.isInUse != g_entityIsInUse[v15] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 209, ASSERT_TYPE_ASSERT, "( g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex] )", (const char *)&queryFormat, "g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex]") )
    __debugbreak();
  if ( !g_entityIsInUse[v15] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2221, ASSERT_TYPE_ASSERT, "( G_IsEntityInUse( hitEntID ) )", (const char *)&queryFormat, "G_IsEntityInUse( hitEntID )") )
    __debugbreak();
  GEntity = G_GetGEntity(v15);
  __asm
  {
    vmovss  xmm2, dword ptr [r14]
    vmovss  xmm1, dword ptr [r14+4]
    vsubss  xmm6, xmm2, dword ptr [rax+130h]
    vsubss  xmm8, xmm2, dword ptr [rcx+130h]
    vsubss  xmm3, xmm1, dword ptr [rcx+134h]
    vsubss  xmm5, xmm1, dword ptr [rax+134h]
    vmovss  xmm0, dword ptr [r14+8]
    vsubss  xmm4, xmm0, dword ptr [rcx+138h]
    vsubss  xmm7, xmm0, dword ptr [rax+138h]
    vmulss  xmm1, xmm3, xmm3
    vmulss  xmm0, xmm8, xmm8
    vmovaps xmm8, [rsp+98h+var_58]
    vaddss  xmm2, xmm1, xmm0
    vmulss  xmm1, xmm4, xmm4
    vaddss  xmm4, xmm2, xmm1
    vmulss  xmm0, xmm6, xmm6
    vmovaps xmm6, [rsp+98h+var_38]
    vmulss  xmm1, xmm7, xmm7
    vmovaps xmm7, [rsp+98h+var_48]
    vmulss  xmm3, xmm5, xmm5
    vaddss  xmm2, xmm3, xmm0
    vaddss  xmm2, xmm2, xmm1
    vcomiss xmm4, xmm2
  }
  if ( v39 | v11 )
    return 0i64;
  sentient = GEntity->sentient;
  if ( sentient )
  {
    if ( !AI_IsAlliedSentient(botData->botInfo.sentient, sentient) )
      *byEnemy = 1;
  }
  return 1i64;
}

/*
==============
Bot_TraversalClear
==============
*/
void Bot_TraversalClear(bot_info_t *botInfo)
{
  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4232, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  *(_DWORD *)&botInfo->nodeNegotStart = -1;
  botInfo->traversal = 0;
  botInfo->traverseWaitingTime = 0;
  botInfo->traverseJumpTime = 0;
}

/*
==============
Bot_TryFreezeMovement
==============
*/
void Bot_TryFreezeMovement(bot_data_t *botData)
{
  char v8; 
  int time; 
  int traversal; 
  gentity_s *ent; 
  __int64 v23; 
  bool v24; 
  unsigned int v28; 
  unsigned int v29; 
  unsigned int v30; 
  int ClosestCharacterList; 
  __int64 v33; 
  const gentity_s *v34; 
  bot_data_t *EntityData; 
  bitarray<224> result; 
  vec3_t forward; 
  vec3_t vEyePosOut; 
  gentity_s *entity[5]; 

  _RBX = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13153, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !_RBX->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13159, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  if ( !_RBX->botInfo.ent->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13160, ASSERT_TYPE_ASSERT, "( botInfo->ent->sentient )", (const char *)&queryFormat, "botInfo->ent->sentient") )
    __debugbreak();
  if ( level.time < _RBX->botInfo.lastFrozenTime + 5000 )
    goto LABEL_40;
  if ( _RBX->botInfo.scriptGoal.type <= BOT_SCR_GOAL_HUNT && !EntHandle::isDefined(&_RBX->botInfo.sentient->targetEnt) )
  {
    _RAX = _RBX->botInfo.ent;
    __asm
    {
      vmovaps [rsp+110h+var_30], xmm6
      vmovaps [rsp+110h+var_40], xmm7
      vmovaps [rsp+110h+var_50], xmm8
      vmovss  xmm0, dword ptr [rax+140h]
      vaddss  xmm0, xmm0, cs:__real@43340000; angle
    }
    *(double *)&_XMM0 = AngleNormalize360(*(const float *)&_XMM0);
    YawVectors(*(float *)&_XMM0, &forward, NULL);
    Sentient_GetEyePosition(_RBX->botInfo.ent->sentient, &vEyePosOut);
    __asm
    {
      vmovss  xmm3, cs:__real@42c80000
      vmulss  xmm0, xmm3, dword ptr [rbp+57h+forward+4]
      vmulss  xmm1, xmm3, dword ptr [rbp+57h+forward]
      vaddss  xmm6, xmm0, dword ptr [rbp+57h+vEyePosOut+4]
      vaddss  xmm8, xmm1, dword ptr [rbp+57h+vEyePosOut]
      vmulss  xmm2, xmm3, dword ptr [rbp+57h+forward+8]
      vaddss  xmm7, xmm2, dword ptr [rbp+57h+vEyePosOut+8]
      vxorps  xmm0, xmm0, xmm0
      vucomiss xmm8, xmm0
    }
    if ( v8 )
    {
      __asm { vucomiss xmm6, xmm0 }
      if ( v8 )
      {
        __asm { vucomiss xmm7, xmm0 }
        if ( v8 )
        {
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14633, ASSERT_TYPE_ASSERT, "( Vec3NotZero( *point ) )", (const char *)&queryFormat, "Vec3NotZero( *point )") )
            __debugbreak();
        }
      }
    }
    time = level.time;
    if ( _RBX->botInfo.lookAtType <= BOT_LOOK_CODE_FORCED || level.time >= _RBX->botInfo.lookAtTime )
    {
      _RBX->botInfo.lookAtType = BOT_LOOK_CODE_FORCED;
      _RBX->botInfo.lookAtTime = time + 1000;
      __asm
      {
        vmovss  dword ptr [rbx+6EC8h], xmm8
        vmovss  dword ptr [rbx+6ECCh], xmm6
        vmovss  dword ptr [rbx+6ED0h], xmm7
      }
      traversal = _RBX->botInfo.traversal;
      if ( (traversal & 1) != 0 )
        _RBX->botInfo.traversal = traversal & 0xFFFFFFFE;
    }
    ent = _RBX->botInfo.ent;
    __asm
    {
      vmovaps xmm8, [rsp+110h+var_50]
      vmovaps xmm7, [rsp+110h+var_40]
      vmovaps xmm6, [rsp+110h+var_30]
    }
    _RBX->botInfo.anglesWhenFrozen.v[0] = ent->r.currentAngles.v[0];
    _RBX->botInfo.anglesWhenFrozen.v[1] = ent->r.currentAngles.v[1];
    _RBX->botInfo.anglesWhenFrozen.v[2] = ent->r.currentAngles.v[2];
LABEL_40:
    _RBX->botInfo.movementFrozenUntil = level.time + 2000;
    return;
  }
  v23 = 0i64;
  *((_QWORD *)&_RBX->scriptedAgentInfo + 3652) = 0i64;
  _RBX->botInfo.anglesWhenFrozen.v[2] = 0.0;
  if ( level.teammode == TEAMMODE_FFA )
  {
    v24 = Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80);
    if ( Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) )
      _RAX = Com_TeamsSP_GetAllCombatTeamFlags();
    else
      _RAX = Com_TeamsMP_GetAllTeamFlags();
    __asm
    {
      vmovups xmm0, xmmword ptr [rax]
      vmovsd  xmm1, qword ptr [rax+10h]
    }
    v28 = _RAX->array[6] & 0xFFEFFFFF;
    __asm { vmovups xmmword ptr [rbp+57h+result.array], xmm0 }
    v29 = result.array[0];
    __asm { vmovsd  qword ptr [rbp+57h+result.array+10h], xmm1 }
    if ( v24 )
      v29 = result.array[0] & 0xF7FFFFFF;
    v30 = v28 & 0xFF9FFFFF;
  }
  else
  {
    Com_Teams_GetEnemyTeamFlags(&result, _RBX->botInfo.ent->sentient->eTeam);
    v30 = result.array[6];
    v29 = result.array[0];
  }
  __asm { vmovss  xmm2, cs:__real@43c80000; maxDist }
  result.array[1] = ~result.array[1];
  result.array[2] = ~result.array[2];
  result.array[3] = ~result.array[3];
  result.array[4] = ~result.array[4];
  result.array[5] = ~result.array[5];
  result.array[0] = ~v29;
  result.array[6] = ~v30;
  ClosestCharacterList = Bot_GetClosestCharacterList(_RBX->botInfo.ent, &_RBX->botInfo.ent->r.currentOrigin, *(const float *)&_XMM2, 1, 0, 1, 0, &result, entity, 5);
  v33 = ClosestCharacterList;
  if ( ClosestCharacterList <= 0 )
    goto LABEL_40;
  while ( 1 )
  {
    v34 = entity[v23];
    if ( !v34 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13199, ASSERT_TYPE_ASSERT, "( currentClosestClient )", (const char *)&queryFormat, "currentClosestClient") )
      __debugbreak();
    EntityData = Bot_GetEntityData(v34);
    if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13201, ASSERT_TYPE_ASSERT, "( currentClosestClientBotData )", (const char *)&queryFormat, "currentClosestClientBotData") )
      __debugbreak();
    if ( EntityData->botInfo.movementFrozenUntil > level.time )
      break;
    if ( ++v23 >= v33 )
      goto LABEL_40;
  }
}

/*
==============
Bot_UnregisterEvents
==============
*/
void Bot_UnregisterEvents(const bot_data_t *botData)
{
  gentity_s *ent; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5121, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  ent = botData->botInfo.ent;
  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5124, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  Actor_EventListener_Remove(ent->s.number, scr_const.bulletwhizby);
  Actor_EventListener_Remove(ent->s.number, scr_const.projectile_impact);
  Actor_EventListener_Remove(ent->s.number, scr_const.gunshot);
  Actor_EventListener_Remove(ent->s.number, scr_const.gunshot_teammate);
  Actor_EventListener_Remove(ent->s.number, scr_const.silenced_shot);
  Actor_EventListener_Remove(ent->s.number, scr_const.explode);
  Actor_EventListener_Remove(ent->s.number, scr_const.enemy);
  Actor_EventListener_Remove(ent->s.number, scr_const.death);
  Actor_EventListener_Remove(ent->s.number, scr_const.grenadedanger);
  Actor_EventListener_Remove_ByEnum(ent->s.number, 2);
  Actor_EventListener_Remove_ByEnum(ent->s.number, 3);
  Actor_EventListener_Remove_ByEnum(ent->s.number, 4);
  Actor_EventListener_Remove_ByEnum(ent->s.number, 22);
  Actor_EventListener_Remove_ByEnum(ent->s.number, 25);
  Actor_EventListener_Remove_ByEnum(ent->s.number, 28);
}

/*
==============
Bot_UpdateAerialLockOnPath
==============
*/

__int64 __fastcall Bot_UpdateAerialLockOnPath(bot_data_t *botData, __int64 a2, double _XMM2_8)
{
  gentity_s *v5; 
  gentity_s *v6; 
  pathnode_t *nearestNode; 
  int v9; 
  __int64 v10; 
  __int64 v11; 
  pathsort_s *p_nodes; 
  unsigned __int16 v13; 
  unsigned __int16 v14; 
  pathnode_t *v15; 
  const char *v16; 
  int nodesPicked; 
  vec3_t pos; 
  bot_score_parms_s parms; 
  bot_score_item_s objects[512]; 
  pathsort_s nodes; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9856, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( Bot_ShouldDelayPathGen(botData) )
    return 0i64;
  if ( !EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
    goto LABEL_22;
  v5 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
  v6 = v5;
  if ( !v5 )
    goto LABEL_22;
  if ( !v5->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9883, ASSERT_TYPE_ASSERT, "( enemy->sentient )", (const char *)&queryFormat, "enemy->sentient") )
    __debugbreak();
  if ( Bot_Weap_HasLauncherThatNeedsAimAtEnemy(botData) && Bot_IsHighAerialSentient(v6->sentient) )
  {
    if ( botData->botInfo.aerialEnemyLockOnNode != 0xFFFF )
    {
      nearestNode = botData->botInfo.activeGoal.nearestNode;
      if ( nearestNode )
      {
        if ( Path_ConvertNodeToIndex(nearestNode) == botData->botInfo.aerialEnemyLockOnNode )
          return 1i64;
      }
    }
    __asm { vmovss  xmm1, cs:__real@443b8000; maxDist }
    v9 = Path_NodesInRadius(&botData->botInfo.ent->r.currentOrigin, *(float *)&_XMM1, &nodes, 512, -510656513);
    v10 = v9;
    if ( v9 > 0 )
    {
      v11 = 0i64;
      p_nodes = &nodes;
      do
      {
        v13 = Path_ConvertNodeToIndex(p_nodes->node);
        ++p_nodes;
        objects[v11++].object = v13;
      }
      while ( v11 < v10 );
    }
    Bot_Score_ScoreNodesInitParms(botData, &parms, BOT_SCORE_NODE_AERIAL_TARGET);
    if ( Bot_Score_ScoreNodesPick(botData, objects, v10, 1, &parms, 1, &nodesPicked) == 1 )
    {
      v14 = nodesPicked;
      v15 = Path_ConvertIndexToNode(nodesPicked);
      pathnode_t::GetPos(v15, &pos);
      v16 = j_va("Target %i with Lock-On", (unsigned int)v6->s.number);
      __asm { vxorps  xmm2, xmm2, xmm2; goalRadius }
      Bot_GetPathToGoalInternal(botData, &pos, *(float *)&_XMM2, v16);
      botData->botInfo.aerialEnemyLockOnNode = v14;
      return 1i64;
    }
  }
  else
  {
LABEL_22:
    botData->botInfo.aerialEnemyLockOnNode = -1;
  }
  return 0i64;
}

/*
==============
Bot_UpdateAimDownSights
==============
*/
void Bot_UpdateAimDownSights(bot_data_t *botData, usercmd_s *cmd)
{
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9330, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9331, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  _RSI = botData->botInfo.playerState;
  if ( Bot_ShouldPressADSButton(botData) )
  {
    cmd->buttons |= 0x200ui64;
    if ( Bot_Weap_CanHoldBreath(_RSI) )
    {
      __asm
      {
        vmovss  xmm0, cs:__real@3f800000
        vcomiss xmm0, dword ptr [rsi+730h]
      }
      botData->botInfo.nextHoldBreathCheckTime = level.time + G_irand(0, 3000);
    }
    else
    {
      *(_QWORD *)((char *)&botData->scriptedAgentInfo + 28092) = 0i64;
    }
  }
}

/*
==============
Bot_UpdateAimDownSightsDesire
==============
*/
void Bot_UpdateAimDownSightsDesire(bot_data_t *botData, usercmd_s *cmd)
{
  const Weapon *ViewmodelWeapon; 
  const pathnode_t *v8; 
  char currentStanceFlags; 
  int IsUsingTurret; 
  char v12; 
  int v14; 
  char v15; 
  bool v16; 

  _RDI = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7967, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !_RDI->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7968, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7969, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  _RSI = _RDI->botInfo.playerState;
  if ( !_RSI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7974, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  if ( (LOBYTE(_RDI->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) == 0 )
  {
    ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(_RSI);
    if ( !Bot_Weap_IsNone(ViewmodelWeapon) )
    {
      if ( Bot_IsIdleAtScriptGoal(_RDI) || Bot_IsUsingTurret(_RDI) )
      {
        if ( Bot_ShouldADS(_RDI, _RSI) )
        {
          v8 = Sentient_NearestNode(_RDI->botInfo.sentient);
          if ( v8 )
          {
            currentStanceFlags = _RDI->botInfo.currentStanceFlags;
            __asm { vmovaps [rsp+48h+var_18], xmm6 }
            IsUsingTurret = Bot_IsUsingTurret(_RDI);
            __asm { vmovss  xmm1, dword ptr [rsi+1DCh]; yaw }
            v12 = currentStanceFlags;
            if ( IsUsingTurret )
              v12 = 1;
            *(double *)&_XMM0 = Path_NodeExposureGetRangeMax(v8, *(float *)&_XMM1, v12);
            __asm { vmovaps xmm6, xmm0 }
            v14 = Bot_IsUsingTurret(_RDI);
            v15 = 0;
            v16 = v14 == 0;
            if ( v14 )
            {
              __asm { vmovss  xmm1, cs:__real@447a0000 }
            }
            else
            {
              *(double *)&_XMM0 = Bot_Weap_GetMaxRangeBase(_RSI, ViewmodelWeapon);
              __asm { vmulss  xmm1, xmm0, cs:__real@3fa00000 }
            }
            __asm
            {
              vcomiss xmm6, xmm1
              vmovaps xmm6, [rsp+48h+var_18]
            }
            if ( !(v15 | v16) )
            {
              _RDI->botInfo.lastADSPressTime = level.time;
              _RDI->botInfo.lastLongRangeTime = level.time;
            }
          }
        }
      }
      if ( Bot_CanSeeAndCanFireOnEnemy(_RDI) )
      {
        *(double *)&_XMM0 = Bot_Weap_GetMaxRangeBase(_RSI, ViewmodelWeapon);
        __asm
        {
          vmulss  xmm1, xmm0, cs:__real@3f400000
          vcomiss xmm1, dword ptr [rdi+2394h]
        }
        if ( v15 )
          _RDI->botInfo.lastLongRangeTime = level.time;
      }
    }
  }
}

/*
==============
Bot_UpdateAwareOfEnemy
==============
*/
void Bot_UpdateAwareOfEnemy(bot_data_t *botData)
{
  EntHandle *p_targetEnt; 
  gentity_s *v5; 
  int v7; 
  const pathnode_t *LastKnownEntNearestNode; 
  const tacpoint_t *Point; 
  const sentient_s *sentient; 
  sentient_info_t *SentientInfo; 
  int v12; 
  int HasLOSToHighAerialEnemy; 
  char v47; 
  char v48; 
  int v51; 
  unsigned int v52; 
  const tacpoint_t *v57; 
  int PointsInRadius_Sorted; 
  __int64 maxNodes; 
  __int64 maxNodesa; 
  __int64 typeFlags; 
  float s; 
  float c; 
  vec3_t predictedPointOut; 
  vec3_t targetPos; 
  pathsort_s nodes[256]; 

  _RSI = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11559, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  _RDI = &_RSI->8;
  if ( !_RSI->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11578, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  if ( !_RSI->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11579, ASSERT_TYPE_ASSERT, "( botInfo->sentient )", (const char *)&queryFormat, "botInfo->sentient") )
    __debugbreak();
  _RSI->botInfo.flags &= ~0x200u;
  if ( EntHandle::isDefined(&_RSI->botInfo.sentient->targetEnt) )
  {
    p_targetEnt = &_RSI->botInfo.sentient->targetEnt;
    __asm { vmovaps [rsp+10B0h+var_30], xmm6 }
    if ( EntHandle::isDefined(p_targetEnt) )
    {
      v5 = EntHandle::ent(&_RSI->botInfo.sentient->targetEnt);
      if ( v5 )
        goto LABEL_17;
    }
    else
    {
      v5 = NULL;
    }
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11587, ASSERT_TYPE_ASSERT, "( pEnemyEnt )", (const char *)&queryFormat, "pEnemyEnt") )
      __debugbreak();
LABEL_17:
    if ( !v5->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11588, ASSERT_TYPE_ASSERT, "( pEnemyEnt->sentient )", (const char *)&queryFormat, "pEnemyEnt->sentient") )
      __debugbreak();
    __asm
    {
      vxorps  xmm6, xmm6, xmm6
      vmovss  dword ptr [rsp+10B0h+predictedPointOut], xmm6
      vmovss  dword ptr [rsp+10B0h+predictedPointOut+4], xmm6
      vmovss  dword ptr [rsp+10B0h+predictedPointOut+8], xmm6
    }
    v7 = level.time - Bot_GetLastKnownEntPosAndTime(_RSI, v5, &targetPos);
    if ( SV_BotRequirePathnodes(_RSI) )
    {
      LastKnownEntNearestNode = Bot_GetLastKnownEntNearestNode(_RSI, v5);
      LOBYTE(Point) = Bot_PredictSeePointUsingNode(&_RSI->botInfo, &targetPos, LastKnownEntNearestNode, &predictedPointOut);
    }
    else
    {
      if ( !_RDI->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9430, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
        __debugbreak();
      if ( !_RDI->botInfo.ent->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9431, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent->sentient )", (const char *)&queryFormat, "botData->botInfo.ent->sentient") )
        __debugbreak();
      sentient = v5->sentient;
      if ( sentient )
      {
        SentientInfo = Sentient_GetSentientInfo(_RDI->botInfo.ent->sentient, sentient);
        if ( !SentientInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9437, ASSERT_TYPE_ASSERT, "( sentInfo )", (const char *)&queryFormat, "sentInfo") )
          __debugbreak();
        Point = tacpoint_ref_t::GetPoint(&SentientInfo->lastKnownTacPoint);
      }
      else
      {
        Point = TacGraph_FindClosestPoint(&v5->r.currentOrigin);
      }
      if ( Point || (Point = TacGraph_FindClosestPoint(&targetPos)) != NULL )
        LOBYTE(Point) = Bot_PredictSeeTacPoint(&_RSI->botInfo, Point, &predictedPointOut);
    }
    v12 = (unsigned __int8)Point;
    if ( Bot_IsHighAerialSentient(v5->sentient) )
    {
      HasLOSToHighAerialEnemy = Bot_HasLOSToHighAerialEnemy(_RSI, v5);
      __asm { vmovsd  xmm0, qword ptr [rsp+10B0h+targetPos] }
      v12 = HasLOSToHighAerialEnemy;
      __asm { vmovsd  qword ptr [rsp+10B0h+predictedPointOut], xmm0 }
      predictedPointOut.v[2] = targetPos.v[2];
    }
    if ( v7 >= 3000 || !v12 )
      goto LABEL_61;
    __asm
    {
      vmovss  xmm5, dword ptr [rsp+10B0h+predictedPointOut]
      vucomiss xmm5, xmm6
    }
    _RAX = _RDI->botInfo.ent;
    __asm
    {
      vmovss  xmm0, dword ptr [rax+130h]
      vmovss  xmm1, dword ptr [rax+134h]
      vsubss  xmm2, xmm1, dword ptr [rsp+10B0h+predictedPointOut+4]
      vsubss  xmm3, xmm0, xmm5
      vmovss  xmm0, dword ptr [rax+138h]
      vsubss  xmm4, xmm0, dword ptr [rsp+10B0h+predictedPointOut+8]
      vmulss  xmm2, xmm2, xmm2
      vmulss  xmm1, xmm3, xmm3
      vmulss  xmm0, xmm4, xmm4
      vaddss  xmm3, xmm2, xmm1
      vaddss  xmm2, xmm3, xmm0
      vsqrtss xmm6, xmm2, xmm2
      vcomiss xmm6, cs:__real@43fa0000
      vmovss  xmm0, dword ptr [rsi+8028h]
      vmulss  xmm0, xmm0, cs:__real@3c0efa35; radians
    }
    FastSinCos(*(const float *)&_XMM0, &s, &c);
    __asm
    {
      vmovss  xmm0, [rsp+10B0h+s]
      vdivss  xmm1, xmm0, [rsp+10B0h+c]
      vmovss  xmm0, dword ptr [rdi+23ACh]
      vsubss  xmm3, xmm0, dword ptr [rsp+10B0h+predictedPointOut]
      vmovss  xmm0, dword ptr [rdi+23B4h]
      vsubss  xmm4, xmm0, dword ptr [rsp+10B0h+predictedPointOut+8]
      vmulss  xmm2, xmm1, xmm6
      vaddss  xmm6, xmm2, cs:__real@42480000
      vmovss  xmm1, dword ptr [rdi+23B0h]
      vsubss  xmm2, xmm1, dword ptr [rsp+10B0h+predictedPointOut+4]
      vmulss  xmm2, xmm2, xmm2
      vmulss  xmm1, xmm3, xmm3
      vaddss  xmm3, xmm2, xmm1
      vmulss  xmm0, xmm4, xmm4
      vaddss  xmm2, xmm3, xmm0
      vsqrtss xmm1, xmm2, xmm2
      vcomiss xmm1, xmm6
    }
    if ( v47 | v48 || level.time < _RSI->botInfo.enemyTrack.awarePointNext )
    {
LABEL_60:
      _RDI->botInfo.enemyTrack.awareTime = level.time;
LABEL_61:
      __asm { vmovaps xmm6, [rsp+10B0h+var_30] }
      return;
    }
    if ( SV_BotRequirePathnodes(_RSI) )
    {
      __asm
      {
        vmulss  xmm3, xmm6, cs:__real@3f000000; maxHeight
        vmovaps xmm2, xmm6; maxDist
      }
      v51 = Path_NodesInCylinder(&predictedPointOut, NULL, *(float *)&_XMM2, *(float *)&_XMM3, nodes, 256, -510656513);
      v52 = v51;
      if ( v51 > 0 )
      {
        std::_Sort_unchecked<pathsort_s *,bool (*)(pathsort_s const &,pathsort_s const &)>(nodes, &nodes[v51], v51, Path_CompareNodesIncreasing);
        G_rand();
        __asm
        {
          vxorps  xmm0, xmm0, xmm0
          vcvtsi2ss xmm0, xmm0, edx
          vsqrtss xmm1, xmm0, xmm0
          vcvttss2si r14d, xmm1
        }
        if ( _ER14 >= v52 )
        {
          LODWORD(typeFlags) = v52;
          LODWORD(maxNodesa) = _ER14;
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11641, ASSERT_TYPE_ASSERT, "(unsigned)( nodeIndex ) < (unsigned)( nodeSetCount )", "nodeIndex doesn't index nodeSetCount\n\t%i not in [0, %i)", maxNodesa, typeFlags) )
            __debugbreak();
        }
        if ( !nodes[_ER14].node && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11642, ASSERT_TYPE_ASSERT, "( nodeSet[nodeIndex].node )", (const char *)&queryFormat, "nodeSet[nodeIndex].node") )
          __debugbreak();
        pathnode_t::GetPos(nodes[_ER14].node, &_RDI->botInfo.enemyTrack.awarePoint);
        goto LABEL_59;
      }
    }
    else
    {
      v57 = Sentient_NearestTacPoint(_RSI->botInfo.sentient);
      if ( v57 )
      {
        __asm { vmovaps xmm2, xmm6; maxRadius }
        PointsInRadius_Sorted = TacGraph_FindPointsInRadius_Sorted(v57, &predictedPointOut, *(float *)&_XMM2, (const tacpoint_t **)nodes, 512);
        if ( PointsInRadius_Sorted > 0 )
        {
          G_rand();
          __asm
          {
            vxorps  xmm0, xmm0, xmm0
            vcvtsi2ss xmm0, xmm0, edx
            vsqrtss xmm1, xmm0, xmm0
            vcvttss2si r14d, xmm1
          }
          if ( _ER14 >= PointsInRadius_Sorted )
          {
            LODWORD(maxNodes) = _ER14;
            if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11668, ASSERT_TYPE_ASSERT, "(unsigned)( pointIndex ) < (unsigned)( pointSetCount )", "pointIndex doesn't index pointSetCount\n\t%i not in [0, %i)", maxNodes, PointsInRadius_Sorted) )
              __debugbreak();
          }
          TacGraph_GetApproxGroundPosForPoint(*((const tacpoint_t **)&nodes[0].node + (int)_ER14), &_RDI->botInfo.enemyTrack.awarePoint);
          goto LABEL_59;
        }
      }
    }
    __asm
    {
      vmovss  xmm0, dword ptr [rsp+10B0h+predictedPointOut]
      vmovss  xmm1, dword ptr [rsp+10B0h+predictedPointOut+4]
      vmovss  dword ptr [rdi+23ACh], xmm0
      vmovss  xmm0, dword ptr [rsp+10B0h+predictedPointOut+8]
      vmovss  dword ptr [rdi+23B4h], xmm0
      vmovss  dword ptr [rdi+23B0h], xmm1
    }
LABEL_59:
    _RDI->botInfo.enemyTrack.awarePointNext = G_rand() % 100 + level.time + 300;
    goto LABEL_60;
  }
}

/*
==============
Bot_UpdateBadPathLook
==============
*/
__int64 Bot_UpdateBadPathLook(bot_data_t *botData, vec3_t *viewAnglesOut)
{
  $3396140AF3A78F7FCD1D73807E505015 *v9; 
  bool v10; 
  __int64 result; 
  __int128 vEyePosOut; 
  __int128 vec; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11840, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
    _RSI = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
  else
    _RSI = NULL;
  __asm { vxorps  xmm0, xmm0, xmm0 }
  v9 = &botData->8;
  __asm
  {
    vmovss  dword ptr [rsp+98h+vEyePosOut], xmm0
    vmovss  dword ptr [rsp+98h+vEyePosOut+4], xmm0
    vmovss  dword ptr [rsp+98h+vEyePosOut+8], xmm0
    vmovss  dword ptr [rsp+98h+vec], xmm0
    vmovss  dword ptr [rsp+98h+vec+4], xmm0
    vmovss  dword ptr [rsp+98h+vec+8], xmm0
  }
  if ( botData == (bot_data_t *)-8i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13725, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo", vEyePosOut, vec) )
    __debugbreak();
  if ( Bot_NavPathExists(&botData->botInfo) || !EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
    return 0i64;
  v10 = v9->botInfo.ent == NULL;
  __asm
  {
    vmovaps [rsp+98h+var_28], xmm6
    vmovaps [rsp+98h+var_38], xmm7
  }
  if ( v10 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11857, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  if ( !_RSI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11858, ASSERT_TYPE_ASSERT, "( enemyEnt )", (const char *)&queryFormat, "enemyEnt") )
    __debugbreak();
  Sentient_GetEyePosition(v9->botInfo.ent->sentient, (vec3_t *)&vEyePosOut);
  __asm
  {
    vmovss  xmm0, dword ptr [rsi+130h]
    vsubss  xmm5, xmm0, dword ptr [rsp+98h+vEyePosOut]
    vmovss  xmm1, dword ptr [rsi+134h]
    vmovss  xmm0, dword ptr [rsi+138h]
    vsubss  xmm7, xmm0, dword ptr [rsp+98h+vEyePosOut+8]
    vsubss  xmm6, xmm1, dword ptr [rsp+98h+vEyePosOut+4]
    vmulss  xmm0, xmm7, xmm7
    vmulss  xmm2, xmm6, xmm6
    vmulss  xmm1, xmm5, xmm5
    vaddss  xmm3, xmm2, xmm1
    vmovss  xmm1, cs:__real@3f800000
    vaddss  xmm2, xmm3, xmm0
    vsqrtss xmm4, xmm2, xmm2
    vcmpless xmm0, xmm4, cs:__real@80000000
    vblendvps xmm0, xmm4, xmm1, xmm0
    vdivss  xmm2, xmm1, xmm0
    vmulss  xmm0, xmm5, xmm2
    vmovss  dword ptr [rsp+98h+vec], xmm0
    vmulss  xmm0, xmm7, xmm2
    vmulss  xmm1, xmm6, xmm2
    vmovss  dword ptr [rsp+98h+vec+8], xmm0
    vmovss  dword ptr [rsp+98h+vec+4], xmm1
  }
  vectoangles((const vec3_t *)&vec, viewAnglesOut);
  __asm { vmovaps xmm7, [rsp+98h+var_38] }
  result = 1i64;
  __asm { vmovaps xmm6, [rsp+98h+var_28] }
  return result;
}

/*
==============
Bot_UpdateBlinded
==============
*/
__int64 Bot_UpdateBlinded(bot_data_t *botData, usercmd_s *cmd)
{
  int flags; 
  char v6; 
  __int64 result; 
  __int64 v8; 
  __int64 v9; 
  __int64 v10; 
  __int64 v11; 

  _RBX = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7582, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7583, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  if ( !Bot_IsBlinded(_RBX) || Bot_IsMovementLocked(_RBX) )
  {
    _RBX->botInfo.flags &= 0xFCFFFFFF;
    return 0i64;
  }
  else
  {
    flags = _RBX->botInfo.flags;
    if ( (flags & 0x1000000) == 0 )
    {
      _RBX->botInfo.flags = flags | 0x1000000;
      *(double *)&_XMM0 = G_random();
      __asm { vcomiss xmm0, dword ptr [rbx+8024h] }
      if ( v6 )
        _RBX->botInfo.flags |= 0x2000000u;
    }
    if ( (_RBX->botInfo.flags & 0x2000000) != 0 )
    {
      _RBX->botInfo.proneEndTime = level.time + 250;
      result = 1i64;
      *(_WORD *)&cmd->forwardmove = 0;
    }
    else
    {
      if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15211, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
        __debugbreak();
      if ( level.time >= _RBX->botInfo.randomInputEndTime )
      {
        v8 = G_irand(0, 6);
        v9 = G_irand(0, 9);
        if ( (unsigned int)v8 >= 6 )
        {
          LODWORD(v10) = v8;
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15227, ASSERT_TYPE_ASSERT, "(unsigned)( fwdIndex ) < (unsigned)( ( sizeof( *array_counter( FORWARD_OFFSET ) ) + 0 ) )", "fwdIndex doesn't index ARRAY_COUNT( FORWARD_OFFSET )\n\t%i not in [0, %i)", v10, 6) )
            __debugbreak();
        }
        if ( (unsigned int)v9 >= 9 )
        {
          LODWORD(v11) = 9;
          LODWORD(v10) = v9;
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15228, ASSERT_TYPE_ASSERT, "(unsigned)( rightIndex ) < (unsigned)( ( sizeof( *array_counter( RIGHT_OFFSET ) ) + 0 ) )", "rightIndex doesn't index ARRAY_COUNT( RIGHT_OFFSET )\n\t%i not in [0, %i)", v10, v11) )
            __debugbreak();
        }
        cmd->forwardmove = FORWARD_OFFSET[v8];
        cmd->rightmove = RIGHT_OFFSET[v9];
        _RBX->botInfo.randomInputEndTime = level.time + G_irand(1500, 3000);
      }
      return 1i64;
    }
  }
  return result;
}

/*
==============
Bot_UpdateCLFinishMoveButtons
==============
*/
void Bot_UpdateCLFinishMoveButtons(bot_data_t *botData, usercmd_s *cmd)
{
  const Weapon *ViewmodelWeapon; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5463, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5464, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState )", (const char *)&queryFormat, "botData->botInfo.playerState") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5465, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  if ( botData->botInfo.wantsAlternate )
  {
    ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(botData->botInfo.playerState);
    if ( !Bot_Weap_IsNone(ViewmodelWeapon) && BG_ActiveUnderbarrel(ViewmodelWeapon) )
      BG_HasUnderbarrelAmmo(ViewmodelWeapon);
  }
}

/*
==============
Bot_UpdateClientMessageNotifies
==============
*/
void Bot_UpdateClientMessageNotifies(bot_data_t *botData, usercmd_s *cmd)
{
  unsigned __int64 buttons; 
  playerState_s *playerState; 
  unsigned __int64 v6; 
  const char *v7; 
  const char *v8; 
  const char *v9; 
  const char *v10; 
  const char *v11; 
  const char *v12; 
  GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64> *p_pm_flags; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5171, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  buttons = cmd->buttons;
  playerState = botData->botInfo.playerState;
  v6 = botData->botInfo.lastUserCmd->buttons;
  if ( (v6 & 1) != 0 )
  {
    if ( (buttons & 1) != 0 )
      goto LABEL_10;
    v7 = s_botStopAttackCmd;
  }
  else
  {
    if ( (buttons & 1) == 0 )
      goto LABEL_10;
    v7 = s_botStartAttackCmd;
  }
  Cmd_CheckNetNotifyForString(botData->botInfo.ent->s.number, v7);
LABEL_10:
  if ( (v6 & 0x20) != 0 )
  {
    if ( (buttons & 0x20) != 0 )
      goto LABEL_16;
    v8 = s_botStopUseReloadCmd;
  }
  else
  {
    if ( (buttons & 0x20) == 0 )
      goto LABEL_16;
    v8 = s_botStartUseReloadCmd;
  }
  Cmd_CheckNetNotifyForString(botData->botInfo.ent->s.number, v8);
LABEL_16:
  if ( (v6 & 8) != 0 )
  {
    if ( (buttons & 8) != 0 )
      goto LABEL_22;
    v9 = s_botStopActivateCmd;
  }
  else
  {
    if ( (buttons & 8) == 0 )
      goto LABEL_22;
    v9 = s_botStartActivateCmd;
  }
  Cmd_CheckNetNotifyForString(botData->botInfo.ent->s.number, v9);
LABEL_22:
  if ( (v6 & 0x2000) != 0 )
  {
    if ( (buttons & 0x2000) != 0 )
      goto LABEL_28;
    v10 = s_botStopSmokeCmd;
  }
  else
  {
    if ( (buttons & 0x2000) == 0 )
      goto LABEL_28;
    v10 = s_botStartSmokeCmd;
  }
  Cmd_CheckNetNotifyForString(botData->botInfo.ent->s.number, v10);
LABEL_28:
  if ( (v6 & 0x1000) != 0 )
  {
    if ( (buttons & 0x1000) != 0 )
      goto LABEL_34;
    v11 = s_botStopFragCmd;
  }
  else
  {
    if ( (buttons & 0x1000) == 0 )
      goto LABEL_34;
    v11 = s_botStartFragCmd;
  }
  Cmd_CheckNetNotifyForString(botData->botInfo.ent->s.number, v11);
LABEL_34:
  if ( (v6 & 0x802) != 0 )
  {
    if ( (buttons & 0x802) != 0 )
      goto LABEL_40;
    v12 = s_botStopBreathSprintCmd;
  }
  else
  {
    if ( (buttons & 0x802) == 0 )
      goto LABEL_40;
    v12 = s_botStartBreathSprintCmd;
  }
  Cmd_CheckNetNotifyForString(botData->botInfo.ent->s.number, v12);
LABEL_40:
  p_pm_flags = &playerState->pm_flags;
  if ( (GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(p_pm_flags, ACTIVE, 0) || GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(p_pm_flags, ACTIVE, 1u)) && (buttons & 0xC0) == 0 )
    Cmd_CheckNetNotifyForString(botData->botInfo.ent->s.number, s_botStartGoStandCmd);
  if ( !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(p_pm_flags, ACTIVE, 0) && !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(p_pm_flags, ACTIVE, 1u) && (buttons & 0x100) != 0 )
    Cmd_CheckNetNotifyForString(botData->botInfo.ent->s.number, s_botStartGoStandCmd);
  if ( !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(p_pm_flags, ACTIVE, 0) && (buttons & 0x40) != 0 || !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(p_pm_flags, ACTIVE, 1u) && (buttons & 0x80u) != 0i64 )
    Cmd_CheckNetNotifyForString(botData->botInfo.ent->s.number, s_botStartStanceCmd);
  if ( (v6 & 4) == 0 && (buttons & 4) != 0 )
    Cmd_CheckNetNotifyForString(botData->botInfo.ent->s.number, s_botMeleeZoomCmd);
}

/*
==============
Bot_UpdateCombat
==============
*/
void Bot_UpdateCombat(bot_data_t *botData, usercmd_s *cmd)
{
  playerState_s *playerState; 
  const dvar_t *v6; 
  const Weapon *ViewmodelWeapon; 
  PlayerHandIndex WeaponHandForViewWeapon; 
  unsigned __int64 v9; 
  __int64 v10; 
  char v11; 
  char v12; 
  unsigned int grenadeThrowbackStartTime; 
  unsigned int time; 
  const Weapon *v16; 

  playerState = botData->botInfo.playerState;
  _RBX = botData;
  if ( (LOBYTE(botData->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) != 0 )
    return;
  if ( !Bot_CanAttack(botData) )
  {
    v6 = DVARBOOL_bot_ForceGrenadeThrow;
    if ( !DVARBOOL_bot_ForceGrenadeThrow && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 692, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_ForceGrenadeThrow") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v6);
    if ( v6->current.enabled )
      Bot_CombatStateGrenade(_RBX, cmd);
    return;
  }
  if ( Bot_HasRemoteEyes(_RBX) )
    return;
  if ( Bot_IsForcedFiring(_RBX) )
  {
LABEL_52:
    Bot_CombatStateFire(_RBX, playerState, cmd);
    return;
  }
  if ( Bot_IsBlinded(_RBX) )
  {
    _RBX->botInfo.grenadeFlags &= ~1u;
    return;
  }
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18902, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18903, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  if ( (unsigned int)Bot_GrenadesAllowed(_RBX) && !GameModeFlagContainer<enum PWeaponFlagsCommon,enum PWeaponFlagsSP,enum PWeaponFlagsMP,64>::TestFlagInternal(&playerState->weapCommon.weapFlags, ACTIVE, 0x33u) )
  {
    if ( playerState->throwbackGrenadeTimeLeft > 0 )
    {
      grenadeThrowbackStartTime = _RBX->botInfo.grenadeThrowbackStartTime;
      time = level.time;
      if ( grenadeThrowbackStartTime == -1 )
      {
        _RBX->botInfo.grenadeThrowbackStartTime = level.time;
        time = level.time;
        grenadeThrowbackStartTime = level.time;
      }
      __asm
      {
        vxorps  xmm0, xmm0, xmm0
        vcvtsi2ss xmm0, xmm0, eax
        vcomiss xmm0, dword ptr [rbx+7FD4h]
      }
      if ( time >= grenadeThrowbackStartTime && !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&_RBX->botInfo.playerState->pm_flags, ACTIVE, 5u) && (LOBYTE(_RBX->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) == 0 && level.time - _RBX->botInfo.grenadeThrowbackLastCheckTime >= 100 )
      {
        _RBX->botInfo.grenadeThrowbackLastCheckTime = level.time;
        *(double *)&_XMM0 = G_random();
        __asm { vcomiss xmm0, dword ptr [rbx+8054h] }
        if ( v11 )
        {
          cmd->buttons &= 0xFFFFFFFFFFFDFFFCui64;
          cmd->buttons |= 0x1000ui64;
          _RBX->botInfo.grenadeFiredTime = 0;
          return;
        }
      }
    }
    else
    {
      *(_QWORD *)((char *)&_RBX->scriptedAgentInfo + 28236) = -1i64;
    }
  }
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18969, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(playerState);
  if ( !Bot_CanSeeAndCanFireOnEnemy(_RBX) )
    goto LABEL_44;
  if ( !(unsigned int)Bot_CanMeleeReactEnemy(_RBX) )
    goto LABEL_44;
  if ( !Bot_AllowedToMeleeEnemy(_RBX) )
    goto LABEL_44;
  WeaponHandForViewWeapon = Bot_Weap_GetWeaponHandForViewWeapon(playerState);
  LODWORD(v9) = Bot_Weap_GetWeaponStateForViewWeapon(_RBX->botInfo.playerState);
  if ( (unsigned int)v9 <= 0x32 )
  {
    v10 = 0x4000001C31FBEi64;
    if ( _bittest64(&v10, v9) )
      goto LABEL_44;
  }
  *(float *)&_XMM0 = Bot_ActualMeleeRange(_RBX);
  __asm { vcomiss xmm0, dword ptr [rbx+2394h] }
  if ( v11 | v12 )
    goto LABEL_44;
  if ( Bot_Weap_AmmoInClip(playerState, ViewmodelWeapon, WeaponHandForViewWeapon) )
  {
    *(double *)&_XMM0 = G_random();
    __asm { vcomiss xmm0, cs:__real@3f400000 }
    if ( !v11 && !Bot_EnemyPreferMelee(_RBX) )
    {
LABEL_44:
      cmd->buttons &= ~4ui64;
      if ( Bot_CombatStateGrenade(_RBX, cmd) )
        return;
      if ( !EntHandle::isDefined(&_RBX->botInfo.sentient->targetEnt) )
        return;
      if ( (unsigned int)Bot_CombatStateOffhandFire(_RBX, playerState, cmd) )
        return;
      v16 = Bot_Weap_GetViewmodelWeapon(playerState);
      if ( !Bot_Weap_IsWeapClass(playerState, v16, WEAPCLASS_TURRET) && !Bot_Weap_Ammo(playerState, v16) )
        return;
      if ( (unsigned int)Bot_CombatStateCornerCombat(_RBX, cmd) || !Bot_ShouldFireOnEnemyInSight(_RBX) || Bot_CombatStateFireWait(_RBX, playerState, NULL) )
        return;
      goto LABEL_52;
    }
  }
  if ( (_RBX->botInfo.lastUserCmd->buttons & 4) == 0 )
    cmd->buttons |= 4ui64;
}

/*
==============
Bot_UpdateDebugErrorLocations
==============
*/
void Bot_UpdateDebugErrorLocations(bot_data_t *botData)
{
  const dvar_t *v3; 
  const dvar_t *v4; 
  sentient_s *sentient; 
  sentient_s *i; 
  gentity_s *ent; 
  bitarray_base<bitarray<224> > *AllTeamFlags; 
  const SvClientMP *MpClient; 
  gentity_s *v10; 
  bitarray<224> result; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3020, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3021, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( botData->botInfo.ent->s.groundEntityNum != 2047 && (SV_BotRequirePathnodes(botData) && !Sentient_NearestNode(botData->botInfo.ent->sentient) || !SV_BotRequirePathnodes(botData) && !Sentient_NearestTacPoint(botData->botInfo.ent->sentient)) )
  {
    __asm { vmovss  xmm2, cs:__real@41f00000; duplicateRadius }
    Bot_DebugAddErrorLocation(botData, BOT_ERROR_LOC_NO_NODE, *(double *)&_XMM2, &botData->botInfo.ent->r.currentOrigin, NULL, NULL, NULL);
  }
  v3 = DVARINT_bot_DrawSeeThrough;
  if ( !DVARINT_bot_DrawSeeThrough && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawSeeThrough") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v3);
  if ( v3->current.integer )
  {
    v4 = DVARINT_bot_DrawSeeThrough;
    if ( !DVARINT_bot_DrawSeeThrough && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawSeeThrough") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v4);
    sentient = botData->botInfo.sentient;
    if ( v4->current.integer == 2 )
    {
      Sentient_EnemyTeamFlags(&result, sentient->eTeam);
      for ( i = Sentient_FirstSentient(&result); i; i = Sentient_NextSentient(i, &result) )
      {
        ent = i->ent;
        if ( Bot_IsSentientEntityConnected(i->ent) && ent->s.eType != ET_INVISIBLE )
        {
          AllTeamFlags = (bitarray_base<bitarray<224> > *)Com_TeamsMP_GetAllTeamFlags();
          if ( bitarray_base<bitarray<224>>::testBit(AllTeamFlags, ent->sentient->eTeam) )
          {
            if ( !ent->client || (MpClient = SV_Client_GetMpClient(ent->s.number), Bot_IsClientActive(MpClient)) )
            {
              if ( !i->bIgnoreMe && !GameModeFlagContainer<enum BgEntityFlagsCommon,enum BgEntityFlagsSP,enum BgEntityFlagsMP,64>::TestFlagInternal(&i->ent->flags, ACTIVE, 2u) )
                Bot_UpdateSeeThroughForEnt(botData, i->ent);
            }
          }
        }
      }
    }
    else if ( EntHandle::isDefined(&sentient->targetEnt) )
    {
      v10 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
      if ( v10 )
      {
        if ( v10->sentient )
          Bot_UpdateSeeThroughForEnt(botData, v10);
      }
    }
  }
}

/*
==============
Bot_UpdateDebugGoal
==============
*/
int Bot_UpdateDebugGoal(bot_data_t *botData)
{
  int result; 
  int CurrentNumDebugGoals; 
  int v5; 
  int debugPathGoalCurrent; 
  int v10; 
  char v20; 
  char v21; 
  int ClosestCharacterList; 
  gentity_s *v24; 
  const dvar_t *v25; 
  int v28; 
  __int64 excludeSelf; 
  __int64 onlyVisibleClients; 
  gentity_s *results; 
  vec3_t goal; 
  vec3_t outFinalGoal; 
  bitarray<224> teamFlags; 

  if ( Bot_GetCurrentNumDebugGoals() <= 0 )
    return 0;
  botData->botInfo.scriptFlags &= 0xFFFFFFF3;
  CurrentNumDebugGoals = Bot_GetCurrentNumDebugGoals();
  v5 = CurrentNumDebugGoals;
  if ( CurrentNumDebugGoals > 4 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10018, ASSERT_TYPE_ASSERT, "( currentNumPathGoals ) <= ( 4 )", "currentNumPathGoals <= BOT_MAX_DEBUG_PATH_GOALS\n\t%i, %i", CurrentNumDebugGoals, 4) )
    __debugbreak();
  debugPathGoalCurrent = botData->botDebugData.debugPathGoalCurrent;
  __asm { vmovaps [rsp+0D0h+var_30], xmm6 }
  if ( !debugPathGoalCurrent )
  {
    if ( Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) )
      _RAX = Com_TeamsSP_GetAllTeamFlags();
    else
      _RAX = Com_TeamsMP_GetAllTeamFlags();
    __asm
    {
      vmovups xmm0, xmmword ptr [rax]
      vmovsd  xmm1, qword ptr [rax+10h]
    }
    v10 = 1;
    teamFlags.array[6] = _RAX->array[6];
    __asm
    {
      vmovups xmmword ptr [rbp+57h+var_58.array], xmm0
      vmovsd  qword ptr [rbp+57h+var_58.array+10h], xmm1
    }
    if ( v5 < 1 )
    {
LABEL_21:
      result = 0;
    }
    else
    {
      __asm { vxorps  xmm6, xmm6, xmm6 }
      while ( 1 )
      {
        Bot_DebugGoal(v10, &goal);
        __asm
        {
          vmovss  xmm0, dword ptr [rbp+57h+goal]
          vmovss  xmm1, dword ptr [rbp+57h+goal+4]
          vmulss  xmm2, xmm1, xmm1
          vmulss  xmm3, xmm0, xmm0
          vmovss  xmm0, dword ptr [rbp+57h+goal+8]
          vmulss  xmm1, xmm0, xmm0
          vaddss  xmm4, xmm3, xmm2
          vaddss  xmm2, xmm4, xmm1
          vcomiss xmm2, xmm6
        }
        if ( !(v20 | v21) )
        {
          __asm { vmovaps xmm2, xmm6; maxDist }
          ClosestCharacterList = Bot_GetClosestCharacterList(NULL, &goal, *(const float *)&_XMM2, 1, 1, 1, 0, &teamFlags, &results, 1);
          v24 = NULL;
          if ( ClosestCharacterList == 1 )
            v24 = results;
          if ( botData->botInfo.ent == v24 )
            break;
          v25 = DVARBOOL_bot_DebugPathGoal_AllBots;
          if ( !DVARBOOL_bot_DebugPathGoal_AllBots && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 692, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DebugPathGoal_AllBots") )
            __debugbreak();
          Dvar_CheckFrontendServerThread(v25);
          if ( v25->current.enabled )
            break;
        }
        if ( ++v10 > v5 )
          goto LABEL_21;
      }
      __asm { vmovss  xmm2, cs:__real@41800000; goalRadius }
      botData->botDebugData.debugPathGoalCurrent = v10;
      result = Bot_GetPathToGoalInternal(botData, &goal, *(float *)&_XMM2, "debug");
    }
    goto LABEL_22;
  }
  if ( debugPathGoalCurrent < v5 )
    v5 = debugPathGoalCurrent;
  botData->botDebugData.debugPathGoalCurrent = v5;
  if ( (unsigned int)(v5 - 1) > 3 )
  {
    LODWORD(onlyVisibleClients) = 1;
    LODWORD(excludeSelf) = v5;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10045, ASSERT_TYPE_ASSERT, "( 1 ) <= ( botData->botDebugData.debugPathGoalCurrent ) && ( botData->botDebugData.debugPathGoalCurrent ) <= ( 4 )", "botData->botDebugData.debugPathGoalCurrent not in [1, BOT_MAX_DEBUG_PATH_GOALS]\n\t%i not in [%i, %i]", excludeSelf, onlyVisibleClients, 4) )
      __debugbreak();
  }
  v28 = Bot_PathExists(&botData->botInfo);
  __asm { vmovss  xmm6, cs:__real@41800000 }
  if ( v28 )
  {
    Bot_GetPathFinalGoal(&botData->botInfo, &outFinalGoal);
    __asm { vmovaps xmm1, xmm6; goalRadius }
    if ( Bot_IsAtPathEnd(botData, *(float *)&_XMM1) )
      goto LABEL_33;
  }
  else
  {
    Bot_DebugGoal(botData->botDebugData.debugPathGoalCurrent, &goal);
    __asm
    {
      vmovss  xmm0, dword ptr [rbp+57h+goal]
      vmovss  xmm1, dword ptr [rbp+57h+goal+4]
      vsubss  xmm3, xmm0, dword ptr [rax+130h]
      vsubss  xmm2, xmm1, dword ptr [rax+134h]
      vmovss  xmm0, dword ptr [rbp+57h+goal+8]
      vsubss  xmm4, xmm0, dword ptr [rax+138h]
      vmulss  xmm2, xmm2, xmm2
      vmulss  xmm1, xmm3, xmm3
      vmulss  xmm0, xmm4, xmm4
      vaddss  xmm3, xmm2, xmm1
      vaddss  xmm2, xmm3, xmm0
      vcomiss xmm2, cs:__real@43800000
    }
    if ( v20 | v21 )
    {
LABEL_33:
      botData->botDebugData.debugPathGoalCurrent = Bot_GetNextDebugGoal(botData);
      botData->botInfo.flags &= ~0x100000u;
    }
  }
  Bot_DebugGoal(botData->botDebugData.debugPathGoalCurrent, &goal);
  if ( v28 )
  {
    __asm
    {
      vmovss  xmm0, dword ptr [rbp+57h+goal]
      vsubss  xmm3, xmm0, dword ptr [rbp+57h+outFinalGoal]
      vmovss  xmm1, dword ptr [rbp+57h+goal+4]
      vsubss  xmm2, xmm1, dword ptr [rbp+57h+outFinalGoal+4]
      vmovss  xmm0, dword ptr [rbp+57h+goal+8]
      vsubss  xmm4, xmm0, dword ptr [rbp+57h+outFinalGoal+8]
      vmulss  xmm2, xmm2, xmm2
      vmulss  xmm1, xmm3, xmm3
      vmulss  xmm0, xmm4, xmm4
      vaddss  xmm3, xmm2, xmm1
      vaddss  xmm2, xmm3, xmm0
      vcomiss xmm2, cs:__real@43800000
    }
  }
  __asm { vmovaps xmm2, xmm6; goalRadius }
  result = Bot_GetPathToGoalInternal(botData, &goal, *(float *)&_XMM2, "debug");
LABEL_22:
  __asm { vmovaps xmm6, [rsp+0D0h+var_30] }
  return result;
}

/*
==============
Bot_UpdateDirection
==============
*/
void Bot_UpdateDirection(bot_data_t *botData, usercmd_s *cmd)
{
  const dvar_t *v13; 
  __int16 groundRefEnt; 
  int IsDoingADS; 
  int IsThirdPersonRemoteVehicle; 
  int IsFirstPersonRemoteVehicle; 
  gentity_s *RemoteEyesVehicleEnt; 
  const VehicleDef *ServerDef; 
  int flags; 
  int v95; 
  vec3_t viewAnglesOut; 
  vec3_t angles; 
  vec3_t vehicleAngles; 
  tmat43_t<vec3_t> outTagMat; 
  tmat33_t<vec3_t> axis; 
  tmat33_t<vec3_t> in1; 
  tmat33_t<vec3_t> out; 

  _RBX = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11260, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11261, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  _RDI = _RBX->botInfo.playerState;
  if ( !_RDI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11264, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  if ( !_RBX->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11276, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  v13 = DVARINT_bot_DisableMovement;
  if ( !DVARINT_bot_DisableMovement && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DisableMovement") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v13);
  if ( v13->current.integer != 2 && (*((_BYTE *)&_RBX->scriptedAgentInfo + 9016) & 8) == 0 && !Bot_IsControllingRemoteMissile(_RBX) && !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&_RBX->botInfo.playerState->pm_flags, ACTIVE, 0x11u) )
  {
    __asm
    {
      vmovaps [rsp+1C0h+var_30], xmm6
      vmovaps [rsp+1C0h+var_40], xmm7
      vmovaps [rsp+1C0h+var_50], xmm8
      vmovaps [rsp+1C0h+var_60], xmm9
      vmovaps [rsp+1C0h+var_70], xmm10
      vxorps  xmm6, xmm6, xmm6
      vmovaps [rsp+1C0h+var_80], xmm11
      vmovaps [rsp+1C0h+var_90], xmm12
      vmovaps [rsp+1C0h+var_A0], xmm13
      vmovss  dword ptr [rsp+1C0h+viewAnglesOut], xmm6
      vmovss  dword ptr [rsp+1C0h+viewAnglesOut+4], xmm6
      vmovss  dword ptr [rsp+1C0h+viewAnglesOut+8], xmm6
    }
    Bot_UpdateViewAngles(_RBX, &viewAnglesOut);
    if ( !Com_GameMode_SupportsFeature(WEAPON_MELEE) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11292, ASSERT_TYPE_ASSERT, "( Com_GameMode_SupportsFeature( Com_GameMode_Feature::ENTITY_GROUND_REF ) )", (const char *)&queryFormat, "Com_GameMode_SupportsFeature( Com_GameMode_Feature::ENTITY_GROUND_REF )") )
      __debugbreak();
    groundRefEnt = _RDI->groundRefEnt;
    __asm { vmovss  xmm8, dword ptr cs:__xmm@80000000800000008000000080000000 }
    if ( groundRefEnt != 2047 )
    {
      _RCX = 1456i64 * groundRefEnt;
      _RAX = g_entities;
      __asm
      {
        vmovss  xmm0, dword ptr [rcx+rax+13Ch]
        vmovss  dword ptr [rsp+1C0h+angles], xmm0
        vmovss  xmm1, dword ptr [rcx+rax+140h]
        vmovss  dword ptr [rsp+1C0h+angles+4], xmm1
        vmovss  xmm2, dword ptr [rcx+rax+144h]
        vxorps  xmm0, xmm0, xmm8
        vmovss  dword ptr [rsp+1C0h+angles], xmm0
        vxorps  xmm0, xmm2, xmm8
        vxorps  xmm1, xmm1, xmm8
        vmovss  dword ptr [rsp+1C0h+angles+8], xmm0
        vmovss  dword ptr [rsp+1C0h+angles+4], xmm1
      }
      AnglesToAxis(&angles, &axis);
      AnglesToAxis(&viewAnglesOut, &in1);
      MatrixMultiply(&in1, &axis, &out);
      AxisToAngles(&out, &viewAnglesOut);
    }
    IsDoingADS = Bot_Weap_IsDoingADS(_RBX);
    __asm
    {
      vmovss  xmm9, dword ptr [rsp+1C0h+viewAnglesOut]
      vmovss  xmm12, dword ptr [rdi+1D8h]
      vmovss  xmm7, dword ptr [rbx+800Ch]
    }
    if ( IsDoingADS )
      __asm { vmovss  xmm7, dword ptr [rbx+8010h] }
    if ( !level.frameDuration && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_level_locals.h", 349, ASSERT_TYPE_ASSERT, "(level.frameDuration)", "%s\n\tAccessing frame duration before it's been set", "level.frameDuration") )
      __debugbreak();
    __asm
    {
      vxorps  xmm11, xmm11, xmm11
      vcvtsi2ss xmm11, xmm11, cs:?level@@3Ulevel_locals_t@@A.frameDuration; level_locals_t level
      vmulss  xmm3, xmm11, cs:__real@3a83126f; deltaTime
      vmovaps xmm2, xmm7; rate
      vmovaps xmm1, xmm12; cur
      vmovaps xmm0, xmm9; tgt
    }
    *(double *)&_XMM0 = DiffTrackAngle(*(float *)&_XMM0, *(float *)&_XMM1, *(float *)&_XMM2, *(float *)&_XMM3);
    __asm
    {
      vmovaps xmm7, xmm0
      vmovss  xmm9, cs:__real@3b360b61
      vmovss  xmm10, cs:__real@3f000000
      vmovss  xmm13, cs:__real@43b40000
    }
    if ( (unsigned int)Bot_IsRemoteEyesVehicle(_RBX) )
    {
      _RSI = Bot_GetRemoteEyesVehicleDef(_RBX);
      IsThirdPersonRemoteVehicle = Bot_IsThirdPersonRemoteVehicle(_RBX);
      if ( IsThirdPersonRemoteVehicle )
        __asm { vmovss  xmm0, dword ptr [rsi+0C5Ch] }
      else
        __asm { vmovss  xmm0, dword ptr [rsi+0C28h] }
      __asm
      {
        vmulss  xmm0, xmm11, xmm0
        vmulss  xmm11, xmm0, cs:__real@3a83126f
        vucomiss xmm11, xmm6
        vxorps  xmm0, xmm0, xmm0
        vsubss  xmm1, xmm7, xmm12
        vmulss  xmm5, xmm1, xmm9
        vaddss  xmm2, xmm5, xmm10
        vmovss  xmm3, xmm0, xmm2
        vxorps  xmm1, xmm1, xmm1
        vroundss xmm4, xmm1, xmm3, 1
        vsubss  xmm0, xmm5, xmm4
        vmulss  xmm0, xmm0, xmm13; val
      }
      if ( IsThirdPersonRemoteVehicle )
      {
        __asm
        {
          vxorps  xmm1, xmm11, xmm8; min
          vmovaps xmm2, xmm11; max
        }
        *(double *)&_XMM0 = I_fclamp(*(float *)&_XMM0, *(float *)&_XMM1, *(float *)&_XMM2);
      }
      else
      {
        __asm { vxorps  xmm0, xmm0, xmm0 }
      }
      __asm { vaddss  xmm7, xmm0, xmm12 }
      if ( (unsigned int)Bot_IsThirdPersonRemoteVehicle(_RBX) )
      {
        __asm
        {
          vmovss  xmm1, dword ptr [rsi+0C60h]; clamp
          vmovaps xmm0, xmm7; angle
        }
        *(double *)&_XMM0 = BG_Vehicle_ClampCameraAngle(*(float *)&_XMM0, *(float *)&_XMM1);
        __asm { vmovaps xmm7, xmm0 }
      }
    }
    __asm
    {
      vmovss  xmm2, dword ptr [rsp+1C0h+viewAnglesOut+4]; targetYaw
      vmovss  dword ptr [rsp+1C0h+viewAnglesOut], xmm7
      vmovss  xmm1, dword ptr [rdi+1DCh]; currentYaw
    }
    *(double *)&_XMM0 = Bot_UpdateYaw(_RBX, *(float *)&_XMM1, *(float *)&_XMM2, IsDoingADS);
    __asm
    {
      vmovss  dword ptr [rsp+1C0h+viewAnglesOut+4], xmm0
      vmovss  dword ptr [rsp+1C0h+viewAnglesOut+8], xmm6
    }
    IsFirstPersonRemoteVehicle = Bot_IsFirstPersonRemoteVehicle(_RBX);
    __asm
    {
      vmovaps xmm12, [rsp+1C0h+var_90]
      vmovaps xmm11, [rsp+1C0h+var_80]
      vmovaps xmm8, [rsp+1C0h+var_50]
    }
    if ( IsFirstPersonRemoteVehicle )
    {
      RemoteEyesVehicleEnt = Bot_GetRemoteEyesVehicleEnt(_RBX);
      ServerDef = G_Vehicle_GetServerDef(RemoteEyesVehicleEnt->vehicle->defIndex);
      if ( !ServerDef && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11314, ASSERT_TYPE_ASSERT, "( vehicleDef )", (const char *)&queryFormat, "vehicleDef") )
        __debugbreak();
      if ( !G_Utils_DObjGetWorldTagMatrix(RemoteEyesVehicleEnt, scr_const.tag_player, &outTagMat) && !G_Utils_DObjGetWorldTagMatrix(RemoteEyesVehicleEnt, scr_const.tag_origin, &outTagMat) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11324, ASSERT_TYPE_ASSERT, "( foundRemoteEyesTag )", (const char *)&queryFormat, "foundRemoteEyesTag") )
        __debugbreak();
      AxisToAngles((const tmat33_t<vec3_t> *)&outTagMat, &vehicleAngles);
      flags = _RBX->botInfo.flags;
      if ( (flags & 0x40000) == 0 )
      {
        __asm
        {
          vmovss  xmm0, dword ptr [rsp+1C0h+vehicleAngles+8]
          vmovss  xmm2, dword ptr [rsp+1C0h+vehicleAngles]
        }
        _RBX->botInfo.flags = flags | 0x40000;
        __asm
        {
          vaddss  xmm1, xmm0, dword ptr [rsi+0C10h]
          vmovss  xmm0, dword ptr [rsp+1C0h+vehicleAngles+4]
          vmulss  xmm7, xmm1, xmm9
          vaddss  xmm1, xmm0, dword ptr [rsi+0C0Ch]
          vaddss  xmm0, xmm2, dword ptr [rsi+0C08h]
          vmulss  xmm4, xmm0, xmm9
          vmulss  xmm5, xmm1, xmm9
          vaddss  xmm3, xmm4, xmm10
          vroundss xmm2, xmm6, xmm3, 1
          vsubss  xmm1, xmm4, xmm2
          vmulss  xmm0, xmm1, xmm13
          vaddss  xmm2, xmm5, xmm10
          vroundss xmm3, xmm6, xmm2, 1
          vsubss  xmm1, xmm5, xmm3
          vmovss  dword ptr [rsp+1C0h+viewAnglesOut], xmm0
          vmulss  xmm0, xmm1, xmm13
          vaddss  xmm2, xmm7, xmm10
          vroundss xmm3, xmm6, xmm2, 1
          vsubss  xmm1, xmm7, xmm3
          vmovss  dword ptr [rsp+1C0h+viewAnglesOut+4], xmm0
          vmulss  xmm0, xmm1, xmm13
          vmovss  dword ptr [rsp+1C0h+viewAnglesOut+8], xmm0
        }
      }
      BG_Vehicle_ApplyCameraInfluence(&_RDI->vehicleState, ServerDef, &viewAnglesOut, &vehicleAngles, &viewAnglesOut);
      BG_Vehicle_ClampCameraUserAnglesToVehicleSpace(&vehicleAngles, &viewAnglesOut, ServerDef, &viewAnglesOut);
    }
    else
    {
      _RBX->botInfo.flags &= ~0x40000u;
    }
    __asm
    {
      vmovss  xmm0, dword ptr [rsp+1C0h+viewAnglesOut]
      vsubss  xmm1, xmm0, dword ptr [rdi+0B4h]
      vmovss  xmm7, cs:__real@43340000
      vmulss  xmm3, xmm1, xmm9
      vaddss  xmm1, xmm3, xmm10
      vroundss xmm2, xmm6, xmm1, 1
      vsubss  xmm0, xmm3, xmm2
      vmulss  xmm0, xmm0, xmm13; value
      vmovaps xmm1, xmm7; maxAbsValueSize
    }
    v95 = MSG_PackSignedFloat(*(float *)&_XMM0, *(float *)&_XMM1, 0x14u);
    __asm { vmovss  xmm0, dword ptr [rsp+1C0h+viewAnglesOut+4] }
    cmd->angles.v[0] = v95;
    __asm
    {
      vsubss  xmm1, xmm0, dword ptr [rdi+0B8h]
      vmulss  xmm4, xmm1, xmm9
      vaddss  xmm2, xmm4, xmm10
      vroundss xmm3, xmm6, xmm2, 1
      vsubss  xmm0, xmm4, xmm3
      vmulss  xmm0, xmm0, xmm13; value
      vmovaps xmm1, xmm7; maxAbsValueSize
    }
    cmd->angles.v[1] = MSG_PackSignedFloat(*(float *)&_XMM0, *(float *)&_XMM1, 0x14u);
    __asm { vmovss  xmm1, dword ptr [rdi+0BCh] }
    if ( _RDI->pm_type == 1 )
    {
      __asm
      {
        vmulss  xmm3, xmm1, xmm9
        vaddss  xmm1, xmm3, xmm10
        vroundss xmm2, xmm6, xmm1, 1
        vsubss  xmm0, xmm3, xmm2
      }
    }
    else
    {
      __asm
      {
        vmovss  xmm0, dword ptr [rsp+1C0h+viewAnglesOut+8]
        vsubss  xmm2, xmm0, xmm1
        vmulss  xmm5, xmm2, xmm9
        vaddss  xmm3, xmm5, xmm10
        vroundss xmm4, xmm6, xmm3, 1
        vsubss  xmm0, xmm5, xmm4
      }
    }
    __asm
    {
      vmulss  xmm0, xmm0, xmm13; value
      vmovaps xmm1, xmm7; maxAbsValueSize
    }
    cmd->angles.v[2] = MSG_PackSignedFloat(*(float *)&_XMM0, *(float *)&_XMM1, 0x14u);
    Bot_ApplyKickAngles(_RBX, cmd);
    __asm
    {
      vmovaps xmm13, [rsp+1C0h+var_A0]
      vmovaps xmm10, [rsp+1C0h+var_70]
      vmovaps xmm9, [rsp+1C0h+var_60]
      vmovaps xmm7, [rsp+1C0h+var_40]
      vmovaps xmm6, [rsp+1C0h+var_30]
    }
  }
}

/*
==============
Bot_UpdateDistToEnemy
==============
*/
void Bot_UpdateDistToEnemy(bot_data_t *botData)
{
  _RBX = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7339, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !_RBX->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7340, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( EntHandle::isDefined(&_RBX->botInfo.sentient->targetEnt) )
  {
    if ( EntHandle::ent(&_RBX->botInfo.sentient->targetEnt) )
    {
      _RCX = _RBX->botInfo.ent;
      __asm
      {
        vmovss  xmm0, dword ptr [rcx+130h]
        vsubss  xmm3, xmm0, dword ptr [rax+130h]
        vmovss  xmm1, dword ptr [rcx+134h]
        vsubss  xmm2, xmm1, dword ptr [rax+134h]
        vmovss  xmm0, dword ptr [rcx+138h]
        vsubss  xmm4, xmm0, dword ptr [rax+138h]
        vmulss  xmm2, xmm2, xmm2
        vmulss  xmm1, xmm3, xmm3
        vaddss  xmm3, xmm2, xmm1
        vmulss  xmm0, xmm4, xmm4
        vaddss  xmm2, xmm3, xmm0
        vsqrtss xmm1, xmm2, xmm2
        vmovss  dword ptr [rbx+2394h], xmm1
      }
    }
  }
}

/*
==============
Bot_UpdateDive
==============
*/
void Bot_UpdateDive(bot_data_t *botData, usercmd_s *cmd)
{
  const playerState_s *playerState; 
  const Weapon *ViewmodelWeapon; 
  const gentity_s *ent; 
  gentity_s *v7; 
  int CanFireOnEnemy; 
  const Weapon *RangedWeapon; 
  AIBotWrapper v13; 

  _RBX = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18151, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  playerState = _RBX->botInfo.playerState;
  ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(playerState);
  if ( !Bot_IsMovementLocked(_RBX) )
  {
    if ( !_RBX->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18169, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
      __debugbreak();
    AICommonInterface::AICommonInterface(&v13.m_botInterface);
    v13.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
    AICommonInterface::AICommonInterface(&v13.m_botAgentInterface);
    ent = _RBX->botInfo.ent;
    v7 = NULL;
    v13.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
    v13.m_pAI = NULL;
    AIBotWrapper::Setup(&v13, ent);
    if ( !v13.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18171, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
      __debugbreak();
    if ( EntHandle::isDefined(&_RBX->botInfo.sentient->targetEnt) )
      v7 = EntHandle::ent(&_RBX->botInfo.sentient->targetEnt);
    CanFireOnEnemy = Bot_CanSeeAndCanFireOnEnemy(_RBX);
    if ( _RBX->botInfo.proneEndTime > level.time )
    {
      if ( CanFireOnEnemy )
      {
        if ( Bot_Weap_Ammo(playerState, ViewmodelWeapon) > 0 )
          _RBX->botInfo.proneEndTime = level.time + G_irand(300, 600);
      }
LABEL_32:
      _RBX->botInfo.lastDiveCheckTime = level.time;
      return;
    }
    if ( v7 && CanFireOnEnemy )
    {
      if ( !v7->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18131, ASSERT_TYPE_ASSERT, "( ent->sentient )", (const char *)&queryFormat, "ent->sentient") )
        __debugbreak();
      if ( !Sentient_IsAerial(v7->sentient) && !Bot_IsStationaryEnt(v7) )
      {
        RangedWeapon = Bot_Weap_EntityGetRangedWeapon(v7);
        if ( !Bot_Weap_IsNone(RangedWeapon) )
        {
          __asm
          {
            vxorps  xmm0, xmm0, xmm0
            vcvtsi2ss xmm0, xmm0, eax
            vcomiss xmm0, dword ptr [rbx+7FE4h]
          }
          if ( level.time > (unsigned int)_RBX->botInfo.lastDiveCheckTime )
          {
            if ( !v7->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18189, ASSERT_TYPE_ASSERT, "( enemy->sentient )", (const char *)&queryFormat, "enemy->sentient") )
              __debugbreak();
            Sentient_GetSentientInfo(_RBX->botInfo.ent->sentient, v7->sentient);
            if ( Bot_Weap_Ammo(playerState, ViewmodelWeapon) && Bot_IsInRangeOfEnemy(_RBX) )
            {
              __asm
              {
                vmovss  xmm0, cs:__real@43480000
                vcomiss xmm0, dword ptr [rbx+2394h]
              }
            }
            goto LABEL_32;
          }
        }
      }
    }
  }
}

/*
==============
Bot_UpdateDoors
==============
*/
bool Bot_UpdateDoors(bot_data_t *botData)
{
  signed __int64 v1; 
  void *v9; 
  AINavigator2D *v11; 
  __int64 v12; 
  gentity_s *ent; 
  unsigned int v15; 
  AIBotInterface *m_pAI; 
  EffectiveStance EffectiveStance; 
  unsigned __int16 v48; 
  __int64 v51; 
  unsigned int useIndex; 
  int Owner; 
  char v68; 
  char v69; 
  bool v71; 
  bot_door_blocker_data_t *v72; 
  int ownerId; 
  bool result; 
  team_t eTeam; 
  GHandler *Handler; 
  unsigned int ObstacleFlagsForTeam; 
  nav_space_s *DefaultSpace; 
  unsigned int v97; 
  int v98; 
  unsigned int v99; 
  scr_string_t out_stateName; 
  playerState_s *v101; 
  AIBotWrapper v102; 
  vec3_t angles; 
  vec3_t viewOrigin; 
  Bounds bounds; 
  vec3_t vEyeDir; 
  vec3_t outEndPoint; 
  vec3_t outStartPoint; 
  int v109; 
  Bounds playerAbsBox; 
  UsableList list; 
  char v119; 

  v9 = alloca(v1);
  __asm { vmovaps [rsp+4FE0h+var_40], xmm7 }
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11362, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.pNavigator && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11363, ASSERT_TYPE_ASSERT, "( botData->botInfo.pNavigator )", (const char *)&queryFormat, "botData->botInfo.pNavigator") )
    __debugbreak();
  v11 = botData->botInfo.pNavigator->Get2DNavigator(botData->botInfo.pNavigator);
  if ( !v11 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11366, ASSERT_TYPE_ASSERT, "( pNav2D )", (const char *)&queryFormat, "pNav2D") )
    __debugbreak();
  v12 = tls_index;
  __asm { vmovss  xmm7, cs:__real@45800000 }
  if ( dword_14E931FF0 > *(_DWORD *)(*((_QWORD *)NtCurrentTeb()->Reserved1[11] + tls_index) + 1772i64) )
  {
    j__Init_thread_header(&dword_14E931FF0);
    if ( dword_14E931FF0 == -1 )
    {
      __asm { vmovss  cs:searchRadiusSq, xmm7 }
      j__Init_thread_footer(&dword_14E931FF0);
    }
  }
  if ( dword_14E931FF8 > *(_DWORD *)(*((_QWORD *)NtCurrentTeb()->Reserved1[11] + v12) + 1772i64) )
  {
    j__Init_thread_header(&dword_14E931FF8);
    if ( dword_14E931FF8 == -1 )
    {
      __asm { vmovss  cs:interactRangeSq, xmm7 }
      j__Init_thread_footer(&dword_14E931FF8);
    }
  }
  AICommonInterface::AICommonInterface(&v102.m_botInterface);
  v102.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v102.m_botAgentInterface);
  ent = botData->botInfo.ent;
  v15 = 0;
  v102.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v102.m_pAI = NULL;
  AIBotWrapper::Setup(&v102, ent);
  m_pAI = v102.m_pAI;
  if ( !v102.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11380, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  __asm
  {
    vmovaps [rsp+4FE0h+var_30], xmm6
    vmovaps [rsp+4FE0h+var_50], xmm8
    vmovaps [rsp+4FE0h+var_60], xmm9
    vmovaps [rsp+4FE0h+var_70], xmm10
    vmovaps [rsp+4FE0h+var_80], xmm11
    vmovaps [rsp+4FE0h+var_90], xmm12
  }
  UsableList_Init(&list);
  __asm { vmovss  xmm2, cs:__real@42800000; checkDist }
  if ( AINavigator2D::GetModifierLocationOnEntPath(v11, 0x10000000u, *(float *)&_XMM2, &outStartPoint, &outEndPoint) )
  {
    __asm
    {
      vmovss  xmm3, cs:__real@3f000000
      vmovss  xmm0, dword ptr [rbp+4EE0h+outEndPoint]
      vaddss  xmm1, xmm0, dword ptr [rbp+4EE0h+outStartPoint]
      vmovss  xmm0, dword ptr [rbp+4EE0h+outEndPoint+4]
    }
    _R15 = botData->botInfo.playerState;
    v101 = _R15;
    __asm
    {
      vmovss  xmm2, dword ptr [rbp+4EE0h+outEndPoint+8]
      vmulss  xmm10, xmm1, xmm3
      vaddss  xmm1, xmm0, dword ptr [rbp+4EE0h+outStartPoint+4]
      vaddss  xmm0, xmm2, dword ptr [rbp+4EE0h+outStartPoint+8]
      vmulss  xmm12, xmm0, xmm3
      vmulss  xmm11, xmm1, xmm3
    }
    if ( !_R15 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11394, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
      __debugbreak();
    EffectiveStance = PM_GetEffectiveStance(_R15);
    _RAX = BG_Suit_GetBounds(_R15->suitIndex, EffectiveStance);
    __asm
    {
      vmovss  xmm0, dword ptr [r15+30h]
      vaddss  xmm1, xmm0, dword ptr [rax]
      vmovss  dword ptr [rbp+4EE0h+var_4EF0.midPoint], xmm1
      vmovss  xmm2, dword ptr [r15+34h]
      vaddss  xmm0, xmm2, dword ptr [rax+4]
      vmovss  dword ptr [rbp+4EE0h+var_4EF0.midPoint+4], xmm0
      vmovss  xmm1, dword ptr [r15+38h]
      vaddss  xmm2, xmm1, dword ptr [rax+8]
      vmovss  dword ptr [rbp+4EE0h+var_4EF0.midPoint+8], xmm2
      vmovss  xmm0, dword ptr [rax+0Ch]
      vmovss  dword ptr [rbp+4EE0h+var_4EF0.halfSize], xmm0
      vmovss  xmm1, dword ptr [rax+10h]
      vmovss  dword ptr [rbp+4EE0h+var_4EF0.halfSize+4], xmm1
      vmovss  xmm0, dword ptr [rax+14h]
    }
    _RAX = botData->botInfo.ent;
    __asm
    {
      vmovss  dword ptr [rbp+4EE0h+var_4EF0.halfSize+8], xmm0
      vmovsd  xmm0, qword ptr [rax+130h]
      vmovsd  qword ptr [rbp+4EE0h+viewOrigin], xmm0
    }
    viewOrigin.v[2] = _RAX->r.currentOrigin.v[2];
    AICommonInterface::GetEyeDirection(m_pAI, &vEyeDir);
    __asm
    {
      vmovss  xmm0, dword ptr [rbp+4EE0h+viewOrigin]
      vmovss  [rsp+4FE0h+out_stateName], xmm0
    }
    if ( (out_stateName & 0x7F800000) == 2139095040 )
      goto LABEL_69;
    __asm
    {
      vmovss  xmm0, dword ptr [rbp+4EE0h+viewOrigin+4]
      vmovss  [rsp+4FE0h+out_stateName], xmm0
    }
    if ( (out_stateName & 0x7F800000) == 2139095040 )
      goto LABEL_69;
    __asm
    {
      vmovss  xmm0, dword ptr [rbp+4EE0h+viewOrigin+8]
      vmovss  [rsp+4FE0h+out_stateName], xmm0
    }
    if ( (out_stateName & 0x7F800000) == 2139095040 )
    {
LABEL_69:
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11401, ASSERT_TYPE_SANITY, "( !IS_NAN( ( viewOrigin )[0] ) && !IS_NAN( ( viewOrigin )[1] ) && !IS_NAN( ( viewOrigin )[2] ) )", (const char *)&queryFormat, "!IS_NAN( ( viewOrigin )[0] ) && !IS_NAN( ( viewOrigin )[1] ) && !IS_NAN( ( viewOrigin )[2] )") )
        __debugbreak();
    }
    __asm
    {
      vmovss  xmm0, dword ptr [rbp+4EE0h+vEyeDir]
      vmovss  [rsp+4FE0h+out_stateName], xmm0
    }
    if ( (out_stateName & 0x7F800000) == 2139095040 )
      goto LABEL_70;
    __asm
    {
      vmovss  xmm0, dword ptr [rbp+4EE0h+vEyeDir+4]
      vmovss  [rsp+4FE0h+out_stateName], xmm0
    }
    if ( (out_stateName & 0x7F800000) == 2139095040 )
      goto LABEL_70;
    __asm
    {
      vmovss  xmm0, dword ptr [rbp+4EE0h+vEyeDir+8]
      vmovss  [rsp+4FE0h+out_stateName], xmm0
    }
    if ( (out_stateName & 0x7F800000) == 2139095040 )
    {
LABEL_70:
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11402, ASSERT_TYPE_SANITY, "( !IS_NAN( ( viewForward )[0] ) && !IS_NAN( ( viewForward )[1] ) && !IS_NAN( ( viewForward )[2] ) )", (const char *)&queryFormat, "!IS_NAN( ( viewForward )[0] ) && !IS_NAN( ( viewForward )[1] ) && !IS_NAN( ( viewForward )[2] )") )
        __debugbreak();
    }
    G_PlayerUse_GetUseList_Scriptables(&list, botData->botInfo.ent, &viewOrigin, &vEyeDir, _R15, &playerAbsBox);
    v48 = 0;
    if ( list.itemCount )
    {
      __asm
      {
        vmovss  xmm8, dword ptr cs:__xmm@7fffffff7fffffff7fffffff7fffffff
        vmovss  xmm9, cs:__real@425c0000
      }
      do
      {
        v51 = v48;
        if ( list.items[v48].ref.useClass == USE_CLASS_SCRIPTABLE )
        {
          ScriptableCommon_AssertCountsInitialized();
          useIndex = list.items[v48].ref.useIndex;
          if ( useIndex < g_scriptableWorldCounts.serverInstanceCount && ScriptableSv_GetInstanceInUse(useIndex) && ScriptableSv_GetInstanceCommonContext(list.items[v48].ref.useIndex)->linkedObjectType == SCRIPTABLE_LINK_NONE )
          {
            _RAX = ScriptableSv_GetInstanceOrigin(list.items[v48].ref.useIndex);
            __asm { vmovsd  xmm1, qword ptr [rax] }
            *(float *)&_RAX = _RAX->v[2];
            __asm
            {
              vsubss  xmm3, xmm10, xmm1
              vshufps xmm0, xmm1, xmm1, 55h ; 'U'
              vmovsd  qword ptr [rsp+4FE0h+angles], xmm1
              vsubss  xmm1, xmm11, xmm0
              vmulss  xmm2, xmm1, xmm1
            }
            LODWORD(angles.v[2]) = (_DWORD)_RAX;
            __asm
            {
              vsubss  xmm4, xmm12, dword ptr [rbp+4EE0h+angles+8]
              vmulss  xmm0, xmm3, xmm3
              vaddss  xmm3, xmm2, xmm0
              vmulss  xmm1, xmm4, xmm4
              vaddss  xmm6, xmm3, xmm1
              vcomiss xmm6, xmm7
            }
            if ( v68 | v69 )
            {
              if ( ScriptableSv_GetPartScriptedState(list.items[v48].ref.useIndex, (const scr_string_t)scr_const.door, &out_stateName) )
              {
                Owner = G_Door_GetOwner(list.items[v48].ref.useIndex);
                _RAX = ScriptableSv_GetInstanceCommonContext(list.items[v48].ref.useIndex);
                __asm
                {
                  vmovss  xmm1, dword ptr [rax+30h]; angle2
                  vmovss  xmm0, dword ptr [rax+18h]; angle1
                }
                *(double *)&_XMM0 = AngleDelta(*(const float *)&_XMM0, *(const float *)&_XMM1);
                __asm
                {
                  vandps  xmm0, xmm0, xmm8
                  vcomiss xmm0, xmm9
                }
                v71 = Owner == _R15->clientNum;
                if ( Owner == -1 || v71 )
                {
                  if ( v68 | v69 && (G_Door_IsClosed(list.items[v48].ref.useIndex) || Owner != -1 && !v71) )
                  {
                    v98 = level.time - botData->botInfo.lastDoorUseTime;
                    if ( v98 >= 1000 )
                    {
                      __asm { vcomiss xmm6, xmm7 }
                      if ( (unsigned int)v98 <= 0x3E8 )
                      {
                        v99 = list.items[v48].ref.useIndex;
                        botData->botInfo.lastDoorUseTime = level.time;
                        G_Door_Interact(botData->botInfo.ent->client, v99, 0);
                      }
                    }
                    result = 1;
                    goto LABEL_49;
                  }
                }
                else if ( v68 | v69 )
                {
                  v72 = s_botDoorBlockerData;
                  while ( 1 )
                  {
                    ownerId = v72->ownerId;
                    if ( ownerId == Owner )
                      break;
                    if ( ownerId == -1 )
                    {
                      __asm
                      {
                        vmovss  xmm1, cs:__real@ff7fffff
                        vxorps  xmm0, xmm0, xmm0
                      }
                      eTeam = botData->botInfo.sentient->eTeam;
                      __asm
                      {
                        vmovss  dword ptr [rsp+4FE0h+angles], xmm0
                        vmovss  dword ptr [rsp+4FE0h+angles+4], xmm0
                        vmovss  dword ptr [rbp+4EE0h+angles+8], xmm0
                        vmovups xmm0, cs:__xmm@ff7fffff000000000000000000000000
                        vmovups xmmword ptr [rbp+4EE0h+bounds.midPoint], xmm0
                        vmovss  dword ptr [rbp+4EE0h+bounds.halfSize+4], xmm1
                        vmovss  dword ptr [rbp+4EE0h+bounds.halfSize+8], xmm1
                      }
                      Handler = GHandler::getHandler();
                      Handler->GetScriptableDimensions(Handler, list.items[v51].ref.useIndex, (float *)&v101, (vec3_t *)&v109, &bounds);
                      __asm
                      {
                        vmovss  xmm0, dword ptr [rbp+4EE0h+bounds.midPoint]
                        vaddss  xmm1, xmm0, [rbp+4EE0h+var_4F00]
                        vmovss  xmm2, dword ptr [rbp+4EE0h+bounds.midPoint+4]
                        vaddss  xmm0, xmm2, [rbp+4EE0h+var_4EFC]
                        vmovss  dword ptr [rbp+4EE0h+bounds.midPoint], xmm1
                        vmovss  xmm1, dword ptr [rbp+4EE0h+bounds.midPoint+8]
                        vaddss  xmm2, xmm1, [rbp+4EE0h+var_4EF8]
                        vmovss  dword ptr [rbp+4EE0h+bounds.midPoint+8], xmm2
                        vmovss  dword ptr [rbp+4EE0h+bounds.midPoint+4], xmm0
                      }
                      if ( (unsigned int)(eTeam - 1) <= 1 )
                        ObstacleFlagsForTeam = Bot_GetObstacleFlagsForTeam(eTeam);
                      else
                        ObstacleFlagsForTeam = -8065;
                      DefaultSpace = Nav_GetDefaultSpace();
                      __asm { vmovss  xmm3, cs:__real@41700000; penalty }
                      v97 = Nav_CreateObstacleByBounds(DefaultSpace, &bounds, &angles, *(float *)&_XMM3, 1u, ObstacleFlagsForTeam);
                      v72->scriptableIndex = list.items[v51].ref.useIndex;
                      v72->obstacleId = v97;
                      v72->ownerId = Owner;
                      break;
                    }
                    ++v15;
                    ++v72;
                    if ( v15 >= 0x20 )
                      goto LABEL_48;
                  }
                  v72->creationTime = level.time;
                  Bot_BadPath(botData->botInfo.ent);
                  if ( (LOBYTE(botData->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) != 0 )
                    Bot_TraversalClear(&botData->botInfo);
                  break;
                }
                _R15 = v101;
              }
            }
          }
        }
        ++v48;
      }
      while ( v48 < list.itemCount );
    }
  }
LABEL_48:
  result = 0;
LABEL_49:
  __asm
  {
    vmovaps xmm12, [rsp+4FE0h+var_90]
    vmovaps xmm11, [rsp+4FE0h+var_80]
    vmovaps xmm10, [rsp+4FE0h+var_70]
    vmovaps xmm9, [rsp+4FE0h+var_60]
    vmovaps xmm8, [rsp+4FE0h+var_50]
    vmovaps xmm6, [rsp+4FE0h+var_30]
  }
  _R11 = &v119;
  __asm { vmovaps xmm7, xmmword ptr [r11-20h] }
  return result;
}

/*
==============
Bot_UpdateEnemyAwareLook
==============
*/
__int64 Bot_UpdateEnemyAwareLook(bot_data_t *botData, vec3_t *viewAnglesOut)
{
  EntHandle *p_targetEnt; 
  gentity_s *v8; 
  const gentity_s *v9; 
  bool v11; 
  bool v12; 
  sentient_info_t *SentientInfo; 
  __int64 result; 
  vec3_t v53; 
  vec3_t targetPos; 
  vec3_t eyePoint; 
  vec3_t vec; 

  _RDI = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12146, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !_RDI->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12147, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
    __debugbreak();
  p_targetEnt = &_RDI->botInfo.sentient->targetEnt;
  __asm
  {
    vmovaps [rsp+0C8h+var_38], xmm6
    vmovaps [rsp+0C8h+var_48], xmm7
  }
  if ( !EntHandle::isDefined(p_targetEnt) )
    goto LABEL_30;
  v8 = EntHandle::ent(&_RDI->botInfo.sentient->targetEnt);
  v9 = v8;
  if ( !v8 )
    goto LABEL_30;
  if ( !v8->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12164, ASSERT_TYPE_ASSERT, "( enemy->sentient )", (const char *)&queryFormat, "enemy->sentient") )
    __debugbreak();
  if ( !Bot_IsAwareOfEnemy(_RDI) )
  {
    if ( _RDI->botInfo.aerialEnemyLockOnNode == 0xFFFF )
      goto LABEL_30;
    __asm { vxorps  xmm1, xmm1, xmm1; goalRadius }
    if ( !Bot_IsAtPathEnd(_RDI, *(float *)&_XMM1) )
      goto LABEL_30;
  }
  v11 = _RDI->botInfo.ent == NULL;
  if ( !_RDI->botInfo.ent )
  {
    v12 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12167, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent");
    v11 = !v12;
    if ( v12 )
      __debugbreak();
  }
  __asm
  {
    vmovss  xmm4, dword ptr [rdi+23B4h]
    vmovss  xmm5, dword ptr [rdi+23B8h]
    vsubss  xmm1, xmm4, dword ptr [rax+130h]
    vsubss  xmm0, xmm5, dword ptr [rax+134h]
    vmulss  xmm2, xmm0, xmm0
    vmulss  xmm1, xmm1, xmm1
    vaddss  xmm3, xmm2, xmm1
    vcomiss xmm3, cs:__real@47742400
  }
  if ( v11 )
  {
    SentientInfo = Sentient_GetSentientInfo(_RDI->botInfo.sentient, v9->sentient);
    if ( !SentientInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12179, ASSERT_TYPE_ASSERT, "( info )", (const char *)&queryFormat, "info") )
      __debugbreak();
    Bot_GetLastKnownEntPosAndTime(_RDI, v9, &targetPos);
    __asm
    {
      vmovss  xmm0, dword ptr [rsp+0C8h+targetPos]
      vmovss  xmm1, dword ptr [rsp+0C8h+targetPos+4]
      vsubss  xmm6, xmm0, dword ptr [rax+130h]
      vsubss  xmm7, xmm1, dword ptr [rax+134h]
    }
    if ( !Bot_CanSeeEnemy(_RDI) )
    {
      __asm
      {
        vmulss  xmm1, xmm7, xmm7
        vmulss  xmm0, xmm6, xmm6
        vaddss  xmm1, xmm1, xmm0
        vcomiss xmm1, cs:__real@47742400
      }
      if ( SentientInfo->VisCache.iLastVisTime >= SentientInfo->lastKnownPosTime && (unsigned int)Bot_ReactedToSentient(_RDI, SentientInfo) )
        goto LABEL_30;
    }
    __asm { vmovss  xmm0, dword ptr [rsp+0C8h+targetPos+8] }
  }
  else
  {
    __asm
    {
      vmovss  xmm0, dword ptr [rdi+23BCh]
      vmovss  dword ptr [rsp+0C8h+targetPos], xmm4
      vmovss  dword ptr [rsp+0C8h+targetPos+4], xmm5
    }
  }
  __asm
  {
    vaddss  xmm0, xmm0, cs:__real@42680000
    vmovss  dword ptr [rsp+0C8h+targetPos+8], xmm0
  }
  Bot_GetEnemyAimPoints(_RDI, v9, NULL, &eyePoint);
  __asm
  {
    vmovss  xmm0, dword ptr [rsp+0C8h+targetPos]
    vsubss  xmm7, xmm0, dword ptr [rsp+0C8h+eyePoint]
    vmovss  xmm1, dword ptr [rsp+0C8h+targetPos+4]
    vsubss  xmm6, xmm1, dword ptr [rsp+0C8h+eyePoint+4]
    vmovss  xmm0, dword ptr [rsp+0C8h+targetPos+8]
    vsubss  xmm5, xmm0, dword ptr [rsp+0C8h+eyePoint+8]
    vmulss  xmm0, xmm5, xmm5
    vmulss  xmm2, xmm6, xmm6
    vmulss  xmm1, xmm7, xmm7
    vaddss  xmm3, xmm2, xmm1
    vmovss  xmm1, cs:__real@3f800000
    vaddss  xmm2, xmm3, xmm0
    vsqrtss xmm4, xmm2, xmm2
    vcmpless xmm0, xmm4, cs:__real@80000000
    vblendvps xmm0, xmm4, xmm1, xmm0
    vdivss  xmm1, xmm1, xmm0
    vmulss  xmm0, xmm5, xmm1
    vmulss  xmm3, xmm7, xmm1
    vmulss  xmm2, xmm6, xmm1
    vunpcklps xmm1, xmm3, xmm2
    vmovss  dword ptr [rsp+0C8h+vec+8], xmm0
  }
  v53.v[2] = vec.v[2];
  __asm
  {
    vmovsd  qword ptr [rsp+0C8h+vec], xmm1
    vmovsd  [rsp+0C8h+var_98], xmm1
  }
  if ( Bot_ShouldIgnoreEnemyLook(_RDI, &v53) )
  {
LABEL_30:
    result = 0i64;
    goto LABEL_31;
  }
  vectoangles(&vec, viewAnglesOut);
  Bot_ApplyTwitchVectors(&_RDI->botInfo, NULL, viewAnglesOut);
  _RDI->botInfo.flags |= 0x200u;
  result = 1i64;
LABEL_31:
  __asm
  {
    vmovaps xmm7, [rsp+0C8h+var_48]
    vmovaps xmm6, [rsp+0C8h+var_38]
  }
  return result;
}

/*
==============
Bot_UpdateEnemyInSightLook
==============
*/
__int64 Bot_UpdateEnemyInSightLook(bot_data_t *botData, vec3_t *viewAnglesOut)
{
  const gentity_s *v6; 
  bool v7; 
  char v38; 
  vec3_t aimPoint; 
  vec3_t eyePoint; 
  vec3_t outLookaheadDir; 
  vec3_t vec; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12223, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
    v6 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
  else
    v6 = NULL;
  if ( !Bot_CanSeeAndCanFireOnEnemy(botData) && !Bot_CanSeeEnemyThroughWall(botData) )
    return 0i64;
  __asm
  {
    vmovaps [rsp+0B8h+var_18], xmm6
    vmovaps [rsp+0B8h+var_28], xmm7
  }
  Bot_GetEnemyAimPoints(botData, v6, &aimPoint, &eyePoint);
  v7 = (botData->botInfo.scriptFlags & 0x20000) == 0;
  __asm
  {
    vmovss  xmm0, dword ptr [rsp+0B8h+aimPoint]
    vsubss  xmm7, xmm0, dword ptr [rsp+0B8h+eyePoint]
    vmovss  xmm1, dword ptr [rsp+0B8h+aimPoint+4]
    vsubss  xmm6, xmm1, dword ptr [rsp+0B8h+eyePoint+4]
    vmovss  xmm0, dword ptr [rsp+0B8h+aimPoint+8]
    vsubss  xmm5, xmm0, dword ptr [rsp+0B8h+eyePoint+8]
    vmulss  xmm2, xmm6, xmm6
    vmulss  xmm1, xmm7, xmm7
    vaddss  xmm3, xmm2, xmm1
    vmovss  xmm1, cs:__real@3f800000
    vmulss  xmm0, xmm5, xmm5
    vaddss  xmm2, xmm3, xmm0
    vsqrtss xmm4, xmm2, xmm2
    vcmpless xmm0, xmm4, cs:__real@80000000
    vblendvps xmm0, xmm4, xmm1, xmm0
    vdivss  xmm1, xmm1, xmm0
    vmulss  xmm3, xmm7, xmm1
    vmovaps xmm7, [rsp+0B8h+var_28]
    vmulss  xmm2, xmm6, xmm1
    vmovaps xmm6, [rsp+0B8h+var_18]
    vmulss  xmm0, xmm5, xmm1
    vunpcklps xmm1, xmm3, xmm2
    vmovss  dword ptr [rsp+0B8h+vec+8], xmm0
    vmovsd  qword ptr [rsp+0B8h+vec], xmm1
    vmovsd  [rsp+0B8h+var_88], xmm1
  }
  if ( !v7 )
  {
    Nav_GetLookaheadDir(botData->botInfo.pNavigator, &outLookaheadDir);
    __asm
    {
      vmovss  xmm0, dword ptr [rsp+0B8h+outLookaheadDir]
      vmovss  xmm1, dword ptr [rsp+0B8h+outLookaheadDir+4]
      vmulss  xmm2, xmm1, dword ptr [rsp+0B8h+var_88+4]
      vmulss  xmm3, xmm0, dword ptr [rsp+0B8h+var_88]
      vmovss  xmm0, dword ptr [rsp+0B8h+outLookaheadDir+8]
      vmulss  xmm1, xmm0, [rsp+0B8h+var_80]
      vaddss  xmm4, xmm3, xmm2
      vaddss  xmm2, xmm4, xmm1
      vcomiss xmm2, cs:__real@3e800000
    }
    if ( v38 )
      return 0i64;
  }
  vectoangles(&vec, viewAnglesOut);
  if ( Bot_IsThrowingGrenade(botData) )
  {
    if ( Bot_GrenadeReleaseTime(botData) - level.time <= 750 )
      viewAnglesOut->v[0] = botData->botInfo.grenadePitch;
  }
  return 1i64;
}

/*
==============
Bot_UpdateEnemySearchLook
==============
*/
int Bot_UpdateEnemySearchLook(bot_data_t *botData, vec3_t *viewAnglesOut)
{
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12112, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( botData->botInfo.currentAISearch.currentNodeCount )
    return Bot_UpdatePathingLook(botData, viewAnglesOut);
  else
    return 0;
}

/*
==============
Bot_UpdateEnemyTrack
==============
*/
void Bot_UpdateEnemyTrack(bot_data_t *botData)
{
  playerState_s *playerState; 
  int v14; 
  int CanSeeEnemy; 
  int v16; 
  gentity_s *v17; 
  __int64 v20; 
  GTurret *v21; 
  int v22; 
  const sentient_s *sentient; 
  sentient_info_t *SentientInfo; 
  bool v33; 
  char v34; 
  int iLastVisTime; 
  int v37; 
  int time; 
  int v75; 
  BOOL ShouldFireOnEnemyInSight; 
  int deadEnemyThreat; 
  bot_track_t trackType; 
  int FrameDuration; 
  bool HasPerk; 
  __int64 v117; 
  int v119; 
  int v120; 
  int v121; 
  int v122; 
  int v123; 
  int v124; 
  vec3_t vVelOut; 
  trajectory_t_secure tr; 
  char v138; 

  __asm { vmovaps [rsp+148h+var_A8], xmm14 }
  _RBX = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16665, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  playerState = _RBX->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16669, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  if ( !_RBX->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16688, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  if ( !_RBX->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16689, ASSERT_TYPE_ASSERT, "( botInfo->sentient )", (const char *)&queryFormat, "botInfo->sentient") )
    __debugbreak();
  _ER13 = 0;
  v14 = 0;
  CanSeeEnemy = Bot_CanSeeEnemy(_RBX);
  if ( !Bot_CanSeeAndCanFireOnEnemy(_RBX) || Bot_IsReloading(_RBX) || (v16 = 1, Bot_IsThrowingGrenade(_RBX)) )
    v16 = 0;
  if ( !EntHandle::isDefined(&_RBX->botInfo.sentient->targetEnt) )
  {
    _RDI = NULL;
LABEL_22:
    _RBX->botInfo.flags &= 0xFFBFFF7F;
    v16 = 0;
    goto LABEL_23;
  }
  v17 = EntHandle::ent(&_RBX->botInfo.sentient->targetEnt);
  _RDI = v17;
  if ( !v17 || v17->s.number != _RBX->botInfo.enemyTrack.lastEnemyEntNum )
    goto LABEL_22;
LABEL_23:
  __asm
  {
    vmovaps [rsp+148h+var_38], xmm6
    vmovaps [rsp+148h+var_48], xmm7
    vmovaps [rsp+148h+var_B8], xmm15
    vmovss  xmm14, cs:__real@40000000
  }
  if ( !_RDI )
  {
    deadEnemyThreat = _RBX->botInfo.enemyTrack.deadEnemyThreat;
    _RBX->botInfo.enemyTrack.lastEnemyEntNum = -1;
    _RBX->botInfo.enemyTrack.firstInRangeTime = 0;
    if ( deadEnemyThreat > -2147483643 )
    {
      __asm
      {
        vmovss  xmm15, cs:__real@3f800000
        vxorps  xmm7, xmm7, xmm7
      }
      if ( playerState->damageCount )
        _RBX->botInfo.enemyTrack.deadEnemyThreat = -2147483647;
      else
        _RBX->botInfo.enemyTrack.deadEnemyThreat = deadEnemyThreat - 4;
      goto LABEL_113;
    }
    goto LABEL_111;
  }
  if ( !_RDI->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16710, ASSERT_TYPE_ASSERT, "( enemyEnt->sentient )", (const char *)&queryFormat, "enemyEnt->sentient") )
    __debugbreak();
  if ( (unsigned int)Bot_EntityDeadWhileUsingRemote(_RDI) || Sentient_IsAerial(_RDI->sentient) && Bot_IsAerialEntityInDeathStage(_RDI) )
  {
    Bot_EnemyDied(_RBX);
    goto LABEL_149;
  }
  if ( _RDI->s.number != _RBX->botInfo.enemyTrack.lastEnemyEntNum )
  {
    _RBX->botInfo.enemyTrack.deadEnemyThreat = -2147483647;
    _RBX->botInfo.enemyTrack.awarePointNext = 0;
    _RBX->botInfo.enemyTrack.lastFireTime = 0;
    *(_QWORD *)((char *)&_RBX->scriptedAgentInfo + 9068) = 0i64;
    *(_QWORD *)((char *)&_RBX->scriptedAgentInfo + 9076) = 0i64;
    _RBX->botInfo.enemyTrack.lastOrigin.v[2] = 0.0;
    *(_QWORD *)((char *)&_RBX->scriptedAgentInfo + 9028) = 0i64;
    _RBX->botInfo.enemyTrack.predictOrigin.v[2] = 0.0;
    _RBX->botInfo.flags &= ~0x10000u;
    if ( _RDI->s.eType == ET_TURRET )
    {
      if ( !_RDI->turretHandle.m_objIndex && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\bgame\\bg_object_handle.h", 36, ASSERT_TYPE_ASSERT, "(IsDefined())", "%s\n\tCan't get the index of an undefined handle", "IsDefined()") )
        __debugbreak();
      v20 = _RDI->turretHandle.m_objIndex - 1;
      if ( !(_BYTE)GTurret::ms_allocatedType && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_turret.h", 226, ASSERT_TYPE_ASSERT, "( ms_allocatedType != GameModeType::NONE )", (const char *)&queryFormat, "ms_allocatedType != GameModeType::NONE") )
        __debugbreak();
      if ( (unsigned int)v20 >= 0x80 )
      {
        LODWORD(v117) = v20;
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_turret.h", 227, ASSERT_TYPE_ASSERT, "(unsigned)( turretIndex ) < (unsigned)( ( sizeof( *array_counter( ms_turretArray ) ) + 0 ) )", "turretIndex doesn't index ARRAY_COUNT( ms_turretArray )\n\t%i not in [0, %i)", v117, 128) )
          __debugbreak();
      }
      if ( !GTurret::ms_turretArray[v20] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_turret.h", 228, ASSERT_TYPE_ASSERT, "( ms_turretArray[turretIndex] )", (const char *)&queryFormat, "ms_turretArray[turretIndex]") )
        __debugbreak();
      v21 = GTurret::ms_turretArray[v20];
      if ( _RDI == (const gentity_s *)-12i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\bgame\\bg_public.h", 2072, ASSERT_TYPE_ASSERT, "(esFlags)", (const char *)&queryFormat, "esFlags") )
        __debugbreak();
      if ( GameModeFlagContainer<enum EntityStateFlagsCommon,enum EntityStateFlagsSP,enum EntityStateFlagsMP,32>::TestFlagInternal(&_RDI->s.lerp.eFlags, ACTIVE, 7u) )
      {
        if ( !Com_GameMode_SupportsFeature(WEAPON_DROPPING_LADDER_CLIMB) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\bgame\\bg_public.h", 2076, ASSERT_TYPE_ASSERT, "(Com_GameMode_SupportsFeature( Com_GameMode_Feature::TURRET_REMOTE_CONTROL ))", (const char *)&queryFormat, "Com_GameMode_SupportsFeature( Com_GameMode_Feature::TURRET_REMOTE_CONTROL )") )
          __debugbreak();
        _RBX->botInfo.flags |= 0x10000u;
      }
      if ( (v21->m_data.flags & 4) != 0 )
        _RBX->botInfo.flags |= 0x10000u;
    }
    v14 = 1;
  }
  if ( Bot_IsVehicleEnt(_RDI) )
  {
    if ( _RDI->s.eType == ET_SCRIPTMOVER && (_RDI->sentient->sentientFlags & 2) != 0 )
      goto LABEL_65;
  }
  else if ( !Bot_EntityIsJuggernaut(_RDI) )
  {
    goto LABEL_65;
  }
  _RBX->botInfo.flags |= 0x10000u;
  v22 = Bot_EnemyFacesBot(_RBX);
  if ( CanSeeEnemy )
  {
    if ( v22 )
    {
      if ( level.time >= _RBX->botInfo.hideFromTime - 500 )
      {
        __asm { vmovss  xmm6, cs:__real@43c80000 }
        _EAX = Bot_IsHighAerialSentient(_RDI->sentient);
        __asm
        {
          vmovd   xmm1, r13d
          vmovd   xmm0, eax
          vpcmpeqd xmm2, xmm0, xmm1
          vmovss  xmm1, cs:__real@44480000
          vblendvps xmm0, xmm1, xmm6, xmm2
          vmovss  [rsp+148h+var_104], xmm0
        }
        if ( !Bot_Weap_HasLauncherThatNeedsAimAtEnemy(_RBX) )
        {
          __asm { vmovss  xmm2, [rsp+148h+var_104]; hideRange }
          Bot_HideFromEntity(_RBX, _RDI, *(float *)&_XMM2, 2000);
        }
      }
    }
  }
LABEL_65:
  _RBX->botInfo.enemyTrack.lastEnemyTime = level.time;
  _RBX->botInfo.enemyTrack.lastEnemyEntNum = _RDI->s.number;
  sentient = _RDI->sentient;
  if ( sentient )
  {
    SentientInfo = Sentient_GetSentientInfo(_RBX->botInfo.ent->sentient, _RDI->sentient);
    if ( !SentientInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16769, ASSERT_TYPE_ASSERT, "( pInfo )", (const char *)&queryFormat, "pInfo") )
      __debugbreak();
    if ( SentientInfo->VisCache.bVisible || Bot_CanSeeEnemyThroughWall(_RBX) )
    {
      if ( _RBX->botInfo.enemyTrack.trackType )
        v14 = 1;
      __asm { vmovaps [rsp+148h+var_58], xmm8 }
      v37 = level.time - _RBX->botInfo.enemyTrack.lastVisTime;
      _RBX->botInfo.enemyTrack.trackType = BOT_ENEMY_TRACK_VISIBLE;
      __asm
      {
        vmovaps [rsp+148h+var_68], xmm9
        vmovaps [rsp+148h+var_78], xmm11
      }
      if ( v37 > 1000 )
        v14 = 1;
      __asm
      {
        vmovss  xmm11, dword ptr [rdi+130h]
        vmovaps [rsp+148h+var_88], xmm12
        vmovss  xmm12, dword ptr [rdi+134h]
        vmovaps [rsp+148h+var_98], xmm13
        vmovss  xmm13, dword ptr [rdi+138h]
      }
      Sentient_GetVelocity(sentient, &vVelOut);
      time = level.time;
      if ( v14 || level.time >= _RBX->botInfo.enemyTrack.regNext )
      {
        __asm
        {
          vmovss  xmm15, cs:__real@3f800000
          vmovss  xmm5, dword ptr [rbx+238Ch]
          vmovss  xmm3, dword ptr [rbx+2388h]
          vmovss  xmm9, dword ptr [rsp+148h+vVelOut]
          vmovss  xmm8, dword ptr [rsp+148h+vVelOut+4]
          vmovss  xmm7, dword ptr [rsp+148h+vVelOut+8]
          vmovss  xmm4, dword ptr [rbx+2390h]
          vmulss  xmm1, xmm9, xmm9
          vmulss  xmm0, xmm8, xmm8
          vaddss  xmm2, xmm1, xmm0
          vmulss  xmm1, xmm7, xmm7
          vaddss  xmm0, xmm2, xmm1
          vsqrtss xmm14, xmm0, xmm0
          vcmpless xmm0, xmm14, cs:__real@80000000
          vblendvps xmm0, xmm14, xmm15, xmm0
          vdivss  xmm1, xmm15, xmm0
          vmulss  xmm0, xmm1, xmm8
          vmovss  [rsp+148h+var_104], xmm0
          vmulss  xmm0, xmm1, xmm7
          vmovss  [rsp+148h+var_108], xmm0
          vmulss  xmm15, xmm1, xmm9
          vmulss  xmm0, xmm5, xmm5
          vmulss  xmm1, xmm3, xmm3
          vaddss  xmm2, xmm1, xmm0
          vmulss  xmm1, xmm4, xmm4
          vaddss  xmm2, xmm2, xmm1
          vmovss  xmm1, cs:__real@3f800000
          vsqrtss xmm2, xmm2, xmm2
          vcmpless xmm0, xmm2, cs:__real@80000000
          vblendvps xmm0, xmm2, xmm1, xmm0
          vdivss  xmm1, xmm1, xmm0
          vmulss  xmm0, xmm1, xmm3
          vmulss  xmm3, xmm1, xmm5
          vmulss  xmm5, xmm1, xmm4
        }
        if ( v14 )
        {
          __asm
          {
            vmovss  dword ptr [rbx+2398h], xmm11
            vmovss  dword ptr [rbx+239Ch], xmm12
            vmovss  dword ptr [rbx+23A0h], xmm13
            vmovss  dword ptr [rbx+23A4h], xmm9
            vmovss  dword ptr [rbx+23A8h], xmm8
            vmovss  dword ptr [rbx+23ACh], xmm7
            vmovss  dword ptr [rbx+2388h], xmm9
            vmovss  dword ptr [rbx+238Ch], xmm8
            vmovss  dword ptr [rbx+2390h], xmm7
            vcvttss2si edx, dword ptr [rbx+7FA0h]; max
            vcvttss2si ecx, dword ptr [rbx+7F9Ch]; min
          }
          v75 = G_irand(_ECX, _EDX);
          __asm
          {
            vmovss  xmm7, dword ptr [rsp+148h+vVelOut+8]
            vmovss  xmm8, dword ptr [rsp+148h+vVelOut+4]
            vmovss  xmm9, dword ptr [rsp+148h+vVelOut]
          }
          _RBX->botInfo.enemyTrack.regNext = level.time + v75;
          time = level.time;
        }
        else
        {
          __asm { vcomiss xmm2, cs:__real@3a83126f }
        }
        __asm { vmovss  xmm14, cs:__real@40000000 }
      }
      else
      {
        __asm
        {
          vmovss  xmm7, dword ptr [rsp+148h+vVelOut+8]
          vmovss  xmm8, dword ptr [rsp+148h+vVelOut+4]
          vmovss  xmm9, dword ptr [rsp+148h+vVelOut]
        }
      }
      if ( time >= _RBX->botInfo.enemyTrack.regNext )
      {
        __asm
        {
          vmovss  dword ptr [rbx+237Ch], xmm11
          vmovss  dword ptr [rbx+2380h], xmm12
          vmovss  dword ptr [rbx+2384h], xmm13
          vmovss  dword ptr [rbx+2388h], xmm9
          vmovss  dword ptr [rbx+238Ch], xmm8
          vmovss  dword ptr [rbx+2390h], xmm7
        }
      }
      else
      {
        *(double *)&_XMM0 = G_Level_GetFrameDurationInSeconds();
        if ( v14 )
        {
          __asm { vmulss  xmm3, xmm0, xmm14 }
        }
        else
        {
          __asm
          {
            vxorps  xmm0, xmm0, xmm0
            vcvtsi2ss xmm0, xmm0, eax
            vmulss  xmm3, xmm0, cs:__real@3a83126f
          }
        }
        __asm
        {
          vmulss  xmm0, xmm3, dword ptr [rbx+23A4h]
          vaddss  xmm2, xmm0, dword ptr [rbx+2398h]
          vmovss  dword ptr [rbx+2398h], xmm2
          vmulss  xmm0, xmm3, dword ptr [rbx+23A8h]
          vaddss  xmm1, xmm0, dword ptr [rbx+239Ch]
          vmovss  dword ptr [rbx+239Ch], xmm1
          vmulss  xmm0, xmm3, dword ptr [rbx+23ACh]
          vaddss  xmm1, xmm0, dword ptr [rbx+23A0h]
          vmovss  dword ptr [rbx+23A0h], xmm1
          vmovss  dword ptr [rbx+237Ch], xmm2
        }
        _RBX->botInfo.enemyTrack.lastOrigin.v[1] = _RBX->botInfo.enemyTrack.regOrigin.v[1];
        _RBX->botInfo.enemyTrack.lastOrigin.v[2] = _RBX->botInfo.enemyTrack.regOrigin.v[2];
      }
      ShouldFireOnEnemyInSight = Bot_ShouldFireOnEnemyInSight(_RBX);
      __asm
      {
        vmovaps xmm13, [rsp+148h+var_98]
        vmovaps xmm12, [rsp+148h+var_88]
        vmovaps xmm11, [rsp+148h+var_78]
        vmovaps xmm9, [rsp+148h+var_68]
        vmovaps xmm8, [rsp+148h+var_58]
      }
      if ( ShouldFireOnEnemyInSight )
      {
        if ( !_RBX->botInfo.enemyTrack.firstInRangeTime )
          _RBX->botInfo.enemyTrack.firstInRangeTime = level.time;
      }
      else
      {
        _RBX->botInfo.enemyTrack.firstInRangeTime = 0;
      }
      __asm { vmovss  xmm15, cs:__real@3f800000 }
      _RBX->botInfo.enemyTrack.lastVisTime = level.time;
      __asm { vxorps  xmm7, xmm7, xmm7 }
      goto LABEL_113;
    }
    _RBX->botInfo.enemyTrack.firstInRangeTime = 0;
    if ( Bot_ShouldForgetEnemy(_RBX, _RDI) )
    {
      Bot_StopPursuingEnemy(_RBX);
      goto LABEL_149;
    }
    __asm { vmovss  xmm15, cs:__real@3f800000 }
    v33 = _RBX->botInfo.enemyTrack.trackType == BOT_ENEMY_TRACK_VISIBLE;
    if ( _RBX->botInfo.enemyTrack.trackType == BOT_ENEMY_TRACK_VISIBLE )
    {
      _RBX->botInfo.enemyTrack.trackType = BOT_ENEMY_TRACK_LASTKNOWN;
      __asm { vcomiss xmm15, dword ptr [rbx+802Ch] }
      if ( v33 )
      {
        *(double *)&_XMM0 = G_random();
        __asm { vcomiss xmm0, cs:__real@3f400000 }
        if ( v34 )
        {
          _RBX->botInfo.enemyTrack.trackType = BOT_ENEMY_TRACK_PREDICT;
        }
        else
        {
          __asm { vcomiss xmm0, cs:__real@3f666666 }
          if ( v34 )
            _RBX->botInfo.enemyTrack.trackType = BOT_ENEMY_TRACK_PREDICT_SHORT;
        }
      }
    }
    if ( _RBX->botInfo.enemyTrack.lastVisTime <= 0 )
    {
      iLastVisTime = SentientInfo->VisCache.iLastVisTime;
      __asm { vxorps  xmm7, xmm7, xmm7 }
      if ( iLastVisTime > 0 )
      {
        _RBX->botInfo.enemyTrack.lastVisTime = iLastVisTime;
        __asm { vucomiss xmm7, dword ptr [rbx+237Ch] }
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16873, ASSERT_TYPE_ASSERT, "( !Vec3NotZero( botInfo->enemyTrack.lastOrigin ) )", (const char *)&queryFormat, "!Vec3NotZero( botInfo->enemyTrack.lastOrigin )") )
          __debugbreak();
        Bot_GetLastKnownEntPosAndTime(_RBX, _RDI, &_RBX->botInfo.enemyTrack.lastOrigin);
      }
      goto LABEL_113;
    }
    goto LABEL_112;
  }
LABEL_111:
  __asm { vmovss  xmm15, cs:__real@3f800000 }
LABEL_112:
  __asm { vxorps  xmm7, xmm7, xmm7 }
LABEL_113:
  if ( CanSeeEnemy || Bot_CanSeeEnemyThroughWall(_RBX) )
    _RBX->botInfo.currentAISearch.currentNodeCount = 0;
  if ( Bot_IsThrowingGrenade(_RBX) )
    _RBX->botInfo.enemyTrack.trackType = BOT_ENEMY_TRACK_LASTKNOWN;
  if ( !_RBX->botInfo.enemyTrack.lastVisTime )
    goto LABEL_136;
  __asm
  {
    vmovss  xmm0, dword ptr [rbx+237Ch]
    vmovss  xmm1, dword ptr [rbx+2380h]
    vmovss  xmm2, dword ptr [rbx+2384h]
    vmovss  [rsp+148h+var_108], xmm0
    vmovss  dword ptr [rsp+148h+tr.trBase], xmm0
    vmovss  dword ptr [rsp+148h+tr.trBase+4], xmm1
    vmovss  dword ptr [rsp+148h+tr.trBase+8], xmm2
  }
  if ( (v119 & 0x7F800000) == 2139095040 )
    goto LABEL_155;
  __asm { vmovss  [rsp+148h+var_108], xmm1 }
  if ( (v120 & 0x7F800000) == 2139095040 )
    goto LABEL_155;
  __asm { vmovss  [rsp+148h+var_108], xmm2 }
  if ( (v121 & 0x7F800000) == 2139095040 )
  {
LABEL_155:
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16906, ASSERT_TYPE_SANITY, "( !IS_NAN( ( tr.trBase )[0] ) && !IS_NAN( ( tr.trBase )[1] ) && !IS_NAN( ( tr.trBase )[2] ) )", (const char *)&queryFormat, "!IS_NAN( ( tr.trBase )[0] ) && !IS_NAN( ( tr.trBase )[1] ) && !IS_NAN( ( tr.trBase )[2] )") )
      __debugbreak();
  }
  *(float *)&_XMM0 = Bot_GetInaccuracy(_RBX);
  __asm
  {
    vmovaps xmm6, xmm0
    vxorps  xmm0, xmm0, xmm0
    vcvtsi2ss xmm0, xmm0, cs:?level@@3Ulevel_locals_t@@A.time; X
  }
  sinf_0(*(float *)&_XMM0);
  __asm
  {
    vmulss  xmm1, xmm6, xmm0
    vaddss  xmm2, xmm1, xmm15
    vmulss  xmm0, xmm2, dword ptr [rbx+2388h]
    vmulss  xmm1, xmm2, dword ptr [rbx+238Ch]
    vmulss  xmm3, xmm2, dword ptr [rbx+2390h]
    vmovss  [rsp+148h+var_108], xmm0
    vmovss  dword ptr [rsp+148h+tr.trDelta], xmm0
    vmovss  dword ptr [rsp+148h+tr.trDelta+4], xmm1
    vmovss  dword ptr [rsp+148h+tr.trDelta+8], xmm3
  }
  if ( (v122 & 0x7F800000) == 2139095040 )
    goto LABEL_156;
  __asm { vmovss  [rsp+148h+var_108], xmm1 }
  if ( (v123 & 0x7F800000) == 2139095040 )
    goto LABEL_156;
  __asm { vmovss  [rsp+148h+var_108], xmm3 }
  if ( (v124 & 0x7F800000) == 2139095040 )
  {
LABEL_156:
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16911, ASSERT_TYPE_SANITY, "( !IS_NAN( ( tr.trDelta )[0] ) && !IS_NAN( ( tr.trDelta )[1] ) && !IS_NAN( ( tr.trDelta )[2] ) )", (const char *)&queryFormat, "!IS_NAN( ( tr.trDelta )[0] ) && !IS_NAN( ( tr.trDelta )[1] ) && !IS_NAN( ( tr.trDelta )[2] )") )
      __debugbreak();
  }
  tr.trTime = _RBX->botInfo.enemyTrack.lastVisTime;
  trackType = _RBX->botInfo.enemyTrack.trackType;
  if ( trackType == BOT_ENEMY_TRACK_VISIBLE )
    goto LABEL_132;
  if ( trackType == BOT_ENEMY_TRACK_LASTKNOWN )
  {
    tr.trType = TR_STATIONARY;
    goto LABEL_133;
  }
  if ( (unsigned int)(trackType - 2) <= 1 )
LABEL_132:
    tr.trType = TR_LINEAR;
LABEL_133:
  FrameDuration = G_Level_GetFrameDuration();
  BgTrajectory::LegacyEvaluateTrajectory(&tr, level.time + 2 * FrameDuration, &_RBX->botInfo.enemyTrack.predictOrigin);
  if ( _RBX->botInfo.enemyTrack.trackType == BOT_ENEMY_TRACK_PREDICT_SHORT && level.time - _RBX->botInfo.enemyTrack.lastVisTime > 250 )
  {
    _RBX->botInfo.enemyTrack.lastOrigin.v[0] = _RBX->botInfo.enemyTrack.predictOrigin.v[0];
    _RBX->botInfo.enemyTrack.lastOrigin.v[1] = _RBX->botInfo.enemyTrack.predictOrigin.v[1];
    _RBX->botInfo.enemyTrack.lastOrigin.v[2] = _RBX->botInfo.enemyTrack.predictOrigin.v[2];
    _RBX->botInfo.enemyTrack.trackType = BOT_ENEMY_TRACK_LASTKNOWN;
  }
LABEL_136:
  Bot_UpdateEnemyTrackAimOffset(_RBX, v16);
  if ( EntHandle::isDefined(&_RBX->botInfo.sentient->targetEnt) && EntHandle::ent(&_RBX->botInfo.sentient->targetEnt) )
  {
    __asm { vmovss  xmm6, dword ptr [rbx+8000h] }
    if ( !_RBX->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20202, ASSERT_TYPE_ASSERT, "( botInfo->playerState )", (const char *)&queryFormat, "botInfo->playerState") )
      __debugbreak();
    HasPerk = BG_HasPerk(&_RBX->botInfo.playerState->perks, 0);
    if ( HasPerk )
      __asm { vmulss  xmm6, xmm6, xmm14 }
    __asm
    {
      vmovss  xmm0, dword ptr [rbx+2394h]
      vcomiss xmm0, xmm7
    }
    if ( HasPerk )
      __asm { vcomiss xmm0, xmm6 }
  }
  _RBX->botInfo.flags &= ~0x20000u;
  if ( (_RBX->botInfo.scriptFlags & 0x100) != 0 && (!Bot_EnemyFacesBot(_RBX) || Bot_ShouldRushEnemy(_RBX)) )
    _RBX->botInfo.flags |= 0x20000u;
LABEL_149:
  __asm
  {
    vmovaps xmm15, [rsp+148h+var_B8]
    vmovaps xmm7, [rsp+148h+var_48]
    vmovaps xmm6, [rsp+148h+var_38]
  }
  _R11 = &v138;
  __asm { vmovaps xmm14, xmmword ptr [r11-80h] }
}

/*
==============
Bot_UpdateEnemyTrackAimOffset
==============
*/
void Bot_UpdateEnemyTrackAimOffset(bot_data_t *botData, int aimingAtEnemy)
{
  playerState_s *playerState; 
  gentity_s *v18; 
  const sentient_s *sentient; 
  char v46; 
  char v47; 
  int v80; 
  vec3_t right; 
  vec3_t vEyePosOut; 
  vec3_t forward; 
  vec3_t up; 

  _RBX = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16576, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !_RBX->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16577, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
    __debugbreak();
  playerState = _RBX->botInfo.playerState;
  _RDI = NULL;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16583, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  if ( !aimingAtEnemy )
  {
    *(float *)&_XMM0 = Bot_GetInaccuracy(_RBX);
    __asm
    {
      vmulss  xmm1, xmm0, cs:__real@42200000
      vmovss  dword ptr [rbx+2364h], xmm1
    }
    *((_QWORD *)&_RBX->scriptedAgentInfo + 1130) = 0i64;
    _RBX->botInfo.enemyTrack.aimOffset.v[2] = 0.0;
  }
  if ( EntHandle::isDefined(&_RBX->botInfo.sentient->targetEnt) )
  {
    v18 = EntHandle::ent(&_RBX->botInfo.sentient->targetEnt);
    if ( v18 )
      _RDI = G_GetEntityPlayerState(v18);
  }
  if ( level.time >= _RBX->botInfo.enemyTrack.aimOffsetNext && aimingAtEnemy && _RDI )
  {
    sentient = _RBX->botInfo.sentient;
    __asm
    {
      vmovaps [rsp+138h+var_28], xmm6
      vmovss  xmm6, dword ptr [rbx+234Ch]
      vmovaps [rsp+138h+var_38], xmm7
      vmovss  xmm7, dword ptr [rbx+2350h]
      vmovaps [rsp+138h+var_48], xmm8
      vmovss  xmm8, dword ptr [rdi+1E8h]
      vmovaps [rsp+138h+var_58], xmm9
      vmovss  xmm9, dword ptr [rbx+2354h]
      vmovaps [rsp+138h+var_98], xmm13
      vmovaps [rsp+138h+var_A8], xmm14
      vmovaps [rsp+138h+var_B8], xmm15
    }
    Sentient_GetEyePosition(sentient, &vEyePosOut);
    AngleVectors(&playerState->viewangles, &forward, &right, &up);
    __asm
    {
      vsubss  xmm14, xmm7, dword ptr [rsp+138h+vEyePosOut+4]
      vsubss  xmm13, xmm6, dword ptr [rsp+138h+vEyePosOut]
      vaddss  xmm0, xmm8, xmm9
      vsubss  xmm15, xmm0, dword ptr [rsp+138h+vEyePosOut+8]
      vmulss  xmm0, xmm13, xmm13
      vmulss  xmm1, xmm14, xmm14
      vaddss  xmm2, xmm1, xmm0
      vmulss  xmm1, xmm15, xmm15
      vaddss  xmm2, xmm2, xmm1
      vmovss  xmm1, cs:__real@3f800000
      vsqrtss xmm7, xmm2, xmm2
      vcmpless xmm0, xmm7, cs:__real@80000000
      vblendvps xmm0, xmm7, xmm1, xmm0
      vdivss  xmm1, xmm1, xmm0
      vmulss  xmm2, xmm14, xmm1
      vmulss  xmm3, xmm2, dword ptr [rsp+138h+forward+4]
      vmulss  xmm4, xmm13, xmm1
      vmulss  xmm2, xmm4, dword ptr [rsp+138h+forward]
      vmulss  xmm5, xmm15, xmm1
      vmulss  xmm1, xmm5, dword ptr [rsp+138h+forward+8]
      vaddss  xmm4, xmm3, xmm2
      vaddss  xmm2, xmm4, xmm1
      vcomiss xmm2, cs:__real@3f333333
    }
    if ( !(v46 | v47) )
    {
      __asm
      {
        vmovss  xmm6, cs:__real@3e800000
        vmulss  xmm0, xmm7, xmm6
        vminss  xmm7, xmm0, dword ptr [rbx+2364h]
        vmovaps [rsp+138h+var_88], xmm12
        vmovss  xmm9, cs:__real@3f000000
      }
      if ( Bot_IsFireFromHipRange(_RBX) )
        __asm { vmulss  xmm7, xmm7, xmm9 }
      __asm
      {
        vmulss  xmm2, xmm13, dword ptr [rsp+138h+right]
        vmulss  xmm1, xmm14, dword ptr [rsp+138h+right+4]
        vmulss  xmm0, xmm15, dword ptr [rsp+138h+right+8]
        vaddss  xmm3, xmm2, xmm1
        vaddss  xmm4, xmm3, xmm0
        vxorps  xmm12, xmm12, xmm12
        vcomiss xmm4, xmm12
        vmovaps [rsp+138h+var_68], xmm10
        vmovaps [rsp+138h+var_78], xmm11
        vmulss  xmm8, xmm7, xmm6
        vxorps  xmm11, xmm8, cs:__xmm@80000000800000008000000080000000
        vmovaps xmm0, xmm11; min
        vmovaps xmm1, xmm7; max
      }
      G_flrand(*(float *)&_XMM0, *(float *)&_XMM1);
      __asm
      {
        vxorps  xmm10, xmm7, cs:__xmm@80000000800000008000000080000000
        vmovss  xmm1, dword ptr [rsp+138h+right+8]
        vmovss  xmm2, dword ptr [rsp+138h+right+4]
        vmulss  xmm3, xmm1, xmm0
        vmovss  xmm1, dword ptr [rsp+138h+right]
        vmulss  xmm4, xmm2, xmm0
        vmulss  xmm5, xmm1, xmm0
        vmovss  dword ptr [rbx+2358h], xmm5
        vmovss  dword ptr [rbx+235Ch], xmm4
        vmovss  dword ptr [rbx+2360h], xmm3
        vmulss  xmm3, xmm14, dword ptr [rsp+138h+up+4]
        vmulss  xmm4, xmm13, dword ptr [rsp+138h+up]
        vmulss  xmm2, xmm15, dword ptr [rsp+138h+up+8]
        vaddss  xmm5, xmm4, xmm3
        vaddss  xmm3, xmm5, xmm2
        vcomiss xmm3, xmm12
        vmovaps xmm12, [rsp+138h+var_88]
      }
      if ( v46 )
      {
        __asm
        {
          vmovaps xmm1, xmm10
          vmovaps xmm0, xmm8
        }
      }
      else
      {
        __asm
        {
          vmovaps xmm1, xmm7; max
          vmovaps xmm0, xmm11; min
        }
      }
      *(double *)&_XMM0 = G_flrand(*(float *)&_XMM0, *(float *)&_XMM1);
      __asm
      {
        vmulss  xmm1, xmm0, xmm9
        vmovss  dword ptr [rbx+2360h], xmm1
        vmovss  xmm0, dword ptr [rbx+2364h]
        vmulss  xmm1, xmm0, cs:__real@3f4ccccd
        vmovss  dword ptr [rbx+2364h], xmm1
      }
      v80 = G_irand(250, 350);
      __asm
      {
        vmovaps xmm11, [rsp+138h+var_78]
        vmovaps xmm10, [rsp+138h+var_68]
      }
      _RBX->botInfo.enemyTrack.aimOffsetNext = level.time + v80;
    }
    __asm
    {
      vmovaps xmm14, [rsp+138h+var_A8]
      vmovaps xmm13, [rsp+138h+var_98]
      vmovaps xmm9, [rsp+138h+var_58]
      vmovaps xmm8, [rsp+138h+var_48]
      vmovaps xmm7, [rsp+138h+var_38]
      vmovaps xmm6, [rsp+138h+var_28]
      vmovaps xmm15, [rsp+138h+var_B8]
    }
  }
}

/*
==============
Bot_UpdateFireFromHipRange
==============
*/
void Bot_UpdateFireFromHipRange(bot_data_t *botData)
{
  bool HasPerk; 

  _RBX = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20188, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( EntHandle::isDefined(&_RBX->botInfo.sentient->targetEnt) && EntHandle::ent(&_RBX->botInfo.sentient->targetEnt) )
  {
    __asm
    {
      vmovaps [rsp+48h+var_18], xmm6
      vmovss  xmm6, dword ptr [rbx+8000h]
    }
    if ( !_RBX->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20202, ASSERT_TYPE_ASSERT, "( botInfo->playerState )", (const char *)&queryFormat, "botInfo->playerState") )
      __debugbreak();
    HasPerk = BG_HasPerk(&_RBX->botInfo.playerState->perks, 0);
    if ( HasPerk )
      __asm { vmulss  xmm6, xmm6, cs:__real@40000000 }
    __asm
    {
      vmovss  xmm1, dword ptr [rbx+2394h]
      vxorps  xmm0, xmm0, xmm0
      vcomiss xmm1, xmm0
    }
    if ( HasPerk )
      __asm { vcomiss xmm1, xmm6 }
    __asm { vmovaps xmm6, [rsp+48h+var_18] }
  }
}

/*
==============
Bot_UpdateGrenadeLook
==============
*/
int Bot_UpdateGrenadeLook(bot_data_t *botData, vec3_t *viewAnglesOut)
{
  int result; 
  bool v10; 
  int v30; 
  __int128 vPos; 
  __int128 vec; 

  _RBX = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12261, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  __asm
  {
    vxorps  xmm0, xmm0, xmm0
    vmovss  dword ptr [rsp+98h+vPos], xmm0
    vmovss  dword ptr [rsp+98h+vPos+4], xmm0
    vmovss  dword ptr [rsp+98h+vPos+8], xmm0
    vmovss  dword ptr [rsp+98h+vec], xmm0
    vmovss  dword ptr [rsp+98h+vec+4], xmm0
    vmovss  dword ptr [rsp+98h+vec+8], xmm0
  }
  result = Bot_IsThrowingGrenade(_RBX);
  if ( result || (*((_BYTE *)&_RBX->scriptedAgentInfo + 28228) & 2) != 0 )
  {
    v10 = _RBX->botInfo.ent == NULL;
    __asm
    {
      vmovaps [rsp+98h+var_18], xmm6
      vmovaps [rsp+98h+var_28], xmm7
      vmovaps [rsp+98h+var_38], xmm8
    }
    if ( v10 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12275, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent", vPos, vec) )
      __debugbreak();
    if ( (*((_BYTE *)&_RBX->scriptedAgentInfo + 28228) & 2) != 0 )
    {
      __asm
      {
        vmovss  xmm6, dword ptr [rbx+2324h]
        vmovss  xmm7, dword ptr [rbx+2328h]
        vmovss  xmm8, dword ptr [rbx+232Ch]
      }
    }
    else
    {
      __asm
      {
        vmovss  xmm6, dword ptr [rbx+6DD8h]
        vmovss  xmm7, dword ptr [rbx+6DDCh]
        vmovss  xmm8, dword ptr [rbx+6DE0h]
      }
    }
    Bot_PredictPosition(_RBX->botInfo.ent, _RBX, &_RBX->botInfo.ent->r.currentOrigin, (vec3_t *)&vPos);
    __asm
    {
      vsubss  xmm4, xmm6, dword ptr [rsp+98h+vPos]
      vsubss  xmm5, xmm7, dword ptr [rsp+98h+vPos+4]
      vsubss  xmm6, xmm8, dword ptr [rsp+98h+vPos+8]
      vmulss  xmm0, xmm4, xmm4
      vmulss  xmm1, xmm5, xmm5
      vaddss  xmm2, xmm1, xmm0
      vmulss  xmm1, xmm6, xmm6
      vaddss  xmm2, xmm2, xmm1
      vmovss  xmm1, cs:__real@3f800000
      vsqrtss xmm3, xmm2, xmm2
      vcmpless xmm0, xmm3, cs:__real@80000000
      vblendvps xmm0, xmm3, xmm1, xmm0
      vdivss  xmm2, xmm1, xmm0
      vmulss  xmm0, xmm4, xmm2
      vmovss  dword ptr [rsp+98h+vec], xmm0
      vmulss  xmm0, xmm6, xmm2
      vmulss  xmm1, xmm5, xmm2
      vmovss  dword ptr [rsp+98h+vec+8], xmm0
      vmovss  dword ptr [rsp+98h+vec+4], xmm1
    }
    vectoangles((const vec3_t *)&vec, viewAnglesOut);
    v30 = Bot_GrenadeReleaseTime(_RBX);
    __asm
    {
      vmovaps xmm8, [rsp+98h+var_38]
      vmovaps xmm7, [rsp+98h+var_28]
      vmovaps xmm6, [rsp+98h+var_18]
    }
    if ( v30 - level.time <= 750 )
      viewAnglesOut->v[0] = _RBX->botInfo.grenadePitch;
    return 1;
  }
  return result;
}

/*
==============
Bot_UpdateHidingGoal
==============
*/

__int64 __fastcall Bot_UpdateHidingGoal(bot_data_t *botData, __int64 a2, double _XMM2_8)
{
  gentity_s *HidingFromEntity; 
  unsigned __int16 hideFromLastNode; 
  pathnode_t *v7; 
  sentient_s *sentient; 
  __int64 result; 
  int v10; 
  int v22; 
  __int64 v23; 
  __int64 v24; 
  pathsort_s *p_nodes; 
  unsigned __int16 v26; 
  const pathnode_t *LastKnownEntNearestNode; 
  unsigned __int16 v28; 
  char v31; 
  char v32; 
  pathnode_t *v33; 
  const char *v35; 
  int nodesPicked; 
  vec3_t targetPos; 
  vec3_t pos; 
  bot_score_parms_s parms; 
  bot_score_item_s objects[512]; 
  pathsort_s nodes; 

  _RBP = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24237, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !_RBP->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24250, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  HidingFromEntity = Bot_GetHidingFromEntity(_RBP);
  if ( HidingFromEntity )
  {
    __asm { vmovaps [rsp+30E8h+var_38], xmm6 }
    if ( !Bot_ShouldDelayPathGen(_RBP) )
    {
      if ( !HidingFromEntity->sentient && HidingFromEntity->s.eType != ET_MISSILE && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24272, ASSERT_TYPE_ASSERT, "( hideFromEnt->sentient || (hideFromEnt->s.eType == ET_MISSILE) )", (const char *)&queryFormat, "hideFromEnt->sentient || (hideFromEnt->s.eType == ET_MISSILE)") )
        __debugbreak();
      Bot_GetLastKnownEntPosAndTime(_RBP, HidingFromEntity, &targetPos);
      v10 = Bot_PathExists(&_RBP->botInfo);
      __asm
      {
        vmovss  xmm4, dword ptr [rsp+30E8h+targetPos+8]
        vmovss  xmm5, dword ptr [rsp+30E8h+targetPos+4]
        vmovss  xmm6, dword ptr [rsp+30E8h+targetPos]
      }
      if ( v10 )
      {
        __asm
        {
          vsubss  xmm0, xmm5, dword ptr [rbp+2D4h]
          vsubss  xmm2, xmm6, dword ptr [rbp+2D0h]
          vsubss  xmm3, xmm4, dword ptr [rbp+2D8h]
          vmulss  xmm1, xmm0, xmm0
          vmulss  xmm0, xmm2, xmm2
          vaddss  xmm2, xmm1, xmm0
          vmulss  xmm1, xmm3, xmm3
          vaddss  xmm2, xmm2, xmm1
          vcomiss xmm2, cs:__real@461c4000
        }
      }
      __asm
      {
        vmovss  dword ptr [rbp+2D0h], xmm6
        vmovss  dword ptr [rbp+2D4h], xmm5
        vmovss  dword ptr [rbp+2D8h], xmm4
        vmovss  xmm1, dword ptr [rbp+2E0h]; maxDist
      }
      v22 = Path_NodesInRadius(&_RBP->botInfo.ent->r.currentOrigin, *(float *)&_XMM1, &nodes, 512, -510656513);
      v23 = v22;
      if ( v22 > 0 )
      {
        v24 = 0i64;
        p_nodes = &nodes;
        do
        {
          v26 = Path_ConvertNodeToIndex(p_nodes->node);
          ++p_nodes;
          objects[v24++].object = v26;
        }
        while ( v24 < v23 );
      }
      if ( (int)v23 <= 0 )
        goto LABEL_31;
      LastKnownEntNearestNode = Bot_GetLastKnownEntNearestNode(_RBP, HidingFromEntity);
      if ( LastKnownEntNearestNode || (LastKnownEntNearestNode = Path_NearestNode(&targetPos, _RBP->botInfo.ent->clipmask, NULL)) != NULL )
      {
        Bot_Score_ScoreNodesInitParms(_RBP, &parms, BOT_SCORE_NODE_HIDE_FROM);
        v28 = Path_ConvertNodeToIndex(LastKnownEntNearestNode);
        __asm
        {
          vmovss  xmm0, dword ptr [rbp+2E0h]
          vcomiss xmm0, cs:__real@43960000
        }
        parms.integer1 = v28;
        __asm { vcvttss2si eax, xmm0 }
        parms.integer2 = _EAX;
        if ( v31 | v32 )
          parms.flags |= 0x20u;
        if ( Bot_Score_ScoreNodesPick(_RBP, objects, v23, 1, &parms, 1, &nodesPicked) == 1 )
        {
          v33 = Path_ConvertIndexToNode(nodesPicked);
          pathnode_t::GetPos(v33, &pos);
          __asm { vxorps  xmm1, xmm1, xmm1; goalRadius }
          if ( !Bot_PointInGoal(_RBP, *(float *)&_XMM1, &pos) )
          {
            _RBP->botInfo.hideFromLastNode = Path_ConvertNodeToIndex(v33);
            Bot_ForceClaimNode(&_RBP->botInfo, v33);
            v35 = j_va("hidefrom %i %i", (unsigned int)_RBP->botInfo.hideFromEntNum, _RBP->botInfo.hideFromLastNode);
            __asm { vxorps  xmm2, xmm2, xmm2; goalRadius }
            Bot_GetPathToGoalInternal(_RBP, &pos, *(float *)&_XMM2, v35);
            _RBP->botInfo.flags |= 0x1000u;
          }
        }
LABEL_31:
        result = 1i64;
LABEL_33:
        __asm { vmovaps xmm6, [rsp+30E8h+var_38] }
        return result;
      }
    }
    result = 0i64;
    goto LABEL_33;
  }
  hideFromLastNode = _RBP->botInfo.hideFromLastNode;
  if ( hideFromLastNode != 0xFFFF )
  {
    v7 = Path_ConvertIndexToNode(hideFromLastNode);
    sentient = _RBP->botInfo.sentient;
    if ( sentient->pClaimedNode == v7 )
      Path_RelinquishNodeNow(sentient);
    _RBP->botInfo.hideFromLastNode = -1;
  }
  _RBP->botInfo.hideFromTime = 0;
  return 0i64;
}

/*
==============
Bot_UpdateHybridToggle
==============
*/
void Bot_UpdateHybridToggle(bot_data_t *botData, usercmd_s *cmd)
{
  const Weapon *ViewmodelWeapon; 
  bool v5; 
  playerState_s *playerState; 
  GWeaponMap *Instance; 
  int EquippedWeaponIndex; 
  __int64 v9; 
  char v10; 
  int time; 
  int v12; 
  int v13; 
  bool v14; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8068, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8069, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState )", (const char *)&queryFormat, "botData->botInfo.playerState") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8070, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !botData->botInfo.ent->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8071, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent->sentient )", (const char *)&queryFormat, "botData->botInfo.ent->sentient") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8072, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(botData->botInfo.playerState);
  v5 = BG_UsingAlternate(botData->botInfo.playerState);
  if ( !BG_CanHybridToggle(botData->botInfo.playerState, ViewmodelWeapon, v5) || level.time - botData->botInfo.lastFrozenTime < 500 || level.time - botData->botInfo.ent->sentient->lastSpawnTime < 500 )
    return;
  playerState = botData->botInfo.playerState;
  Instance = GWeaponMap::GetInstance();
  if ( !Instance && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\bgame\\bg_weapons.h", 1063, ASSERT_TYPE_ASSERT, "(weaponMap)", (const char *)&queryFormat, "weaponMap") )
    __debugbreak();
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\bgame\\bg_weapons.h", 1064, ASSERT_TYPE_ASSERT, "(ps)", (const char *)&queryFormat, "ps") )
    __debugbreak();
  EquippedWeaponIndex = BG_GetEquippedWeaponIndex(Instance, playerState, ViewmodelWeapon);
  if ( EquippedWeaponIndex < 0 )
  {
    v9 = 0i64;
    goto LABEL_29;
  }
  v9 = (__int64)&playerState->weapEquippedData[EquippedWeaponIndex];
  if ( !v9 )
  {
LABEL_29:
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8091, ASSERT_TYPE_ASSERT, "( state )", (const char *)&queryFormat, "state") )
      __debugbreak();
  }
  v10 = *(_BYTE *)(v9 + 9);
  if ( v10 )
  {
    if ( v10 != 1 )
      return;
    time = level.time;
    if ( level.time - botData->botInfo.lastLongRangeTime >= 500 )
      return;
  }
  else
  {
    time = level.time;
    if ( level.time - botData->botInfo.lastLongRangeTime < 500 )
      return;
  }
  v12 = time - botData->botInfo.enemyTrack.lastFireTime;
  v13 = time - botData->botInfo.lastHybridPressTime;
  v14 = (botData->botInfo.lastUserCmd->buttons & 0x200000000i64) != 0 || (cmd->buttons & 0x200000000i64) != 0;
  if ( !BG_InADS(botData->botInfo.playerState) )
    botData->botInfo.lastHybridPressTime = level.time;
  if ( BG_InADS(botData->botInfo.playerState) && v12 > 200 && v13 > 150 && !v14 )
  {
    cmd->buttons |= 0x200000000ui64;
    botData->botInfo.lastHybridPressTime = level.time;
  }
  if ( !Bot_GetEnemy(botData) || Bot_ShouldADS(botData, botData->botInfo.playerState) )
    botData->botInfo.lastADSPressTime = level.time;
}

/*
==============
Bot_UpdateIdleLook
==============
*/
__int64 Bot_UpdateIdleLook(bot_data_t *botData, vec3_t *viewAnglesOut)
{
  playerState_s *playerState; 
  bool v5; 
  bool v6; 
  const playerState_s *EntityPlayerStateConst; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12303, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  v5 = playerState == NULL;
  if ( !playerState )
  {
    v6 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12306, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps");
    v5 = !v6;
    if ( v6 )
      __debugbreak();
  }
  _RAX = botData->botInfo.playerState;
  __asm
  {
    vmovss  xmm0, dword ptr [rax+3Ch]
    vmovss  xmm2, dword ptr [rax+40h]
    vmovss  xmm3, dword ptr [rax+44h]
    vmulss  xmm1, xmm0, xmm0
    vmulss  xmm0, xmm2, xmm2
    vaddss  xmm2, xmm1, xmm0
    vmulss  xmm1, xmm3, xmm3
    vaddss  xmm2, xmm2, xmm1
    vcomiss xmm2, cs:__real@3c23d70a
  }
  if ( !v5 )
    return 0i64;
  if ( !botData->botInfo.lastUserCmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11247, ASSERT_TYPE_ASSERT, "( botData->botInfo.lastUserCmd )", (const char *)&queryFormat, "botData->botInfo.lastUserCmd") )
    __debugbreak();
  EntityPlayerStateConst = G_GetEntityPlayerStateConst(botData->botInfo.ent);
  if ( (G_PlayerUse_GetUseButtonMask(EntityPlayerStateConst) & botData->botInfo.lastUserCmd->buttons) != 0 || (LOBYTE(botData->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) != 0 || !Bot_UpdateSearchLook(botData) )
    return 0i64;
  viewAnglesOut->v[0] = playerState->viewangles.v[0];
  viewAnglesOut->v[1] = playerState->viewangles.v[1];
  viewAnglesOut->v[2] = playerState->viewangles.v[2];
  return 1i64;
}

/*
==============
Bot_UpdateJumpTraversal
==============
*/
void Bot_UpdateJumpTraversal(bot_data_t *botData, usercmd_s *cmd)
{
  int v6; 
  int v8; 
  unsigned __int16 nodeNegotStart; 
  pathnode_t *v10; 
  pathnode_t *v11; 
  int traversal; 
  char v36; 
  playerState_s *playerState; 
  const Bounds *Bounds; 
  int v54; 
  int time; 
  __int64 v56; 
  __int64 v57; 
  __int64 v58; 
  vec3_t pos; 
  vec3_t end; 
  vec3_t start; 
  vec3_t v62; 
  trace_t results; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16012, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.lastUserCmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16013, ASSERT_TYPE_ASSERT, "( botData->botInfo.lastUserCmd )", (const char *)&queryFormat, "botData->botInfo.lastUserCmd") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16014, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  v6 = Bot_IsOnGround(botData);
  _R14 = botData->botInfo.playerState;
  v8 = v6;
  if ( !_R14 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16027, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  if ( (LOBYTE(botData->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) == 0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16030, ASSERT_TYPE_ASSERT, "( Bot_IsDoingTraversal( botInfo ) )", (const char *)&queryFormat, "Bot_IsDoingTraversal( botInfo )") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16031, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  if ( GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&_R14->pm_flags, ACTIVE, 0x1Au) )
  {
    Bot_TraversalClear(&botData->botInfo);
    return;
  }
  nodeNegotStart = botData->botInfo.nodeNegotStart;
  __asm
  {
    vmovaps [rsp+158h+var_48], xmm6
    vmovaps [rsp+158h+var_58], xmm7
  }
  v10 = NULL;
  if ( Path_NodeValid(nodeNegotStart) )
    v11 = Path_ConvertIndexToNode(botData->botInfo.nodeNegotStart);
  else
    v11 = NULL;
  if ( Path_NodeValid(botData->botInfo.nodeNegotEnd) )
    v10 = Path_ConvertIndexToNode(botData->botInfo.nodeNegotEnd);
  if ( !v11 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16047, ASSERT_TYPE_ASSERT, "(negotiationStartNode)", "%s\n\tNo traversal start node.  botInfo->traversal = %i, botInfo->nodeNegotStart = %i, botInfo->traverseJumpTime = %i", "negotiationStartNode", botData->botInfo.traversal, botData->botInfo.nodeNegotStart, botData->botInfo.traverseJumpTime) )
    __debugbreak();
  if ( !v10 )
  {
    LODWORD(v58) = botData->botInfo.traverseJumpTime;
    LODWORD(v57) = botData->botInfo.nodeNegotEnd;
    LODWORD(v56) = botData->botInfo.traversal;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16047, ASSERT_TYPE_ASSERT, "(negotiationEndNode)", "%s\n\tNo traversal end node.  botInfo->traversal = %i, botInfo->nodeNegotEnd = %i, botInfo->traverseJumpTime = %i", "negotiationEndNode", v56, v57, v58) )
      __debugbreak();
  }
  pathnode_t::GetPos(v11, &pos);
  pathnode_t::GetPos(v10, &v62);
  __asm
  {
    vmovss  xmm0, dword ptr [rsp+158h+pos]
    vmovss  xmm1, dword ptr [rsp+158h+pos+4]
    vsubss  xmm3, xmm0, dword ptr [rax+130h]
    vsubss  xmm2, xmm1, dword ptr [rax+134h]
    vmovss  xmm0, dword ptr [rsp+158h+pos+8]
    vsubss  xmm6, xmm0, dword ptr [rax+138h]
    vmulss  xmm2, xmm2, xmm2
    vmulss  xmm1, xmm3, xmm3
    vaddss  xmm7, xmm2, xmm1
  }
  *(float *)&_XMM0 = Bot_GetDeltaAngleToTraversal(botData);
  traversal = botData->botInfo.traversal;
  __asm { vmovaps xmm4, xmm0 }
  if ( (traversal & 8) != 0 )
  {
    if ( !v8 )
      goto LABEL_36;
    __asm { vcomiss xmm7, cs:__real@40800000 }
  }
  else
  {
    __asm
    {
      vcomiss xmm7, cs:__real@451c4000
      vmovss  xmm2, cs:__real@41200000
    }
    if ( (traversal & 4) != 0 )
    {
      __asm
      {
        vmovss  xmm0, dword ptr [rsp+158h+var_D8+8]
        vminss  xmm1, xmm0, dword ptr [rsp+158h+pos+8]
        vsubss  xmm1, xmm1, dword ptr [rax+138h]
        vcomiss xmm1, cs:__real@41a00000
      }
      if ( (traversal & 4) != 0 )
      {
        Bot_TraversalClear(&botData->botInfo);
        Bot_BadPath(botData->botInfo.ent);
        goto LABEL_38;
      }
      __asm { vcomiss xmm4, xmm2 }
      if ( !v8 )
      {
LABEL_36:
        if ( level.time <= botData->botInfo.traverseJumpTime )
          cmd->buttons |= 0x100ui64;
        goto LABEL_38;
      }
      if ( level.time > botData->botInfo.traverseJumpTime )
      {
        *(double *)&_XMM0 = G_Level_GetFrameDurationInSeconds();
        __asm
        {
          vmovss  xmm5, dword ptr [r14+3Ch]
          vmovss  xmm4, dword ptr [r14+40h]
          vmovss  xmm6, cs:__real@3f800000
          vmulss  xmm2, xmm4, xmm4
          vmulss  xmm1, xmm5, xmm5
          vaddss  xmm3, xmm2, xmm1
          vcomiss xmm3, cs:__real@45afc800
          vmovaps xmm7, xmm0
        }
        if ( v36 )
        {
          __asm
          {
            vsqrtss xmm1, xmm3, xmm3
            vcmpless xmm0, xmm1, cs:__real@80000000
            vblendvps xmm0, xmm1, xmm6, xmm0
            vdivss  xmm3, xmm6, xmm0
            vmulss  xmm1, xmm5, xmm3
            vmulss  xmm5, xmm1, cs:__real@42960000
            vmulss  xmm0, xmm4, xmm3
            vmulss  xmm4, xmm0, cs:__real@42960000
          }
        }
        _RAX = botData->botInfo.ent;
        __asm
        {
          vmulss  xmm1, xmm7, cs:__real@3fa00000
          vmulss  xmm0, xmm5, xmm1
          vaddss  xmm2, xmm0, dword ptr [rax+130h]
          vmovss  dword ptr [rsp+158h+start], xmm2
          vmulss  xmm0, xmm4, xmm1
          vaddss  xmm1, xmm0, dword ptr [rax+134h]
          vmovss  dword ptr [rsp+158h+start+4], xmm1
          vmovss  xmm0, dword ptr [rax+138h]
        }
        playerState = botData->botInfo.playerState;
        __asm
        {
          vmovss  dword ptr [rsp+158h+start+8], xmm0
          vsubss  xmm0, xmm0, cs:__real@40accccd
          vmovss  dword ptr [rsp+158h+end+8], xmm0
          vmovss  dword ptr [rsp+158h+end], xmm2
          vmovss  dword ptr [rsp+158h+end+4], xmm1
          vmovss  [rsp+158h+results.fraction], xmm6
        }
        Bounds = BG_Suit_GetBounds(playerState->suitIndex, PM_EFF_STANCE_DEFAULT);
        G_Main_TraceCapsule(&results, &start, &end, Bounds, botData->botInfo.ent->s.number, botData->botInfo.ent->clipmask & 0xFDFFBFFF);
        __asm
        {
          vmovss  xmm0, [rsp+158h+results.fraction]
          vcomiss xmm0, xmm6
        }
        if ( !v36 && level.time > botData->botInfo.traverseJumpTime && !Jump_InJumpDebounce(_R14, cmd) )
        {
          cmd->buttons |= 0x100ui64;
          v54 = G_rand();
          time = level.time;
          ++botData->botInfo.traverseProgressJumps;
          botData->botInfo.traverseJumpTime = v54 % 200 + time + 200;
          goto LABEL_38;
        }
      }
    }
  }
  if ( !v8 )
    goto LABEL_36;
LABEL_38:
  __asm
  {
    vmovaps xmm6, [rsp+158h+var_48]
    vmovaps xmm7, [rsp+158h+var_58]
  }
}

/*
==============
Bot_UpdateLadder
==============
*/
__int64 Bot_UpdateLadder(bot_data_t *botData, usercmd_s *cmd)
{
  playerState_s *playerState; 
  bool v9; 
  int traversal; 
  int v11; 
  unsigned __int16 nodeNegotStart; 
  pathnode_t *v13; 
  pathnode_t *v14; 
  char v48; 
  int time; 
  __int64 v51; 
  __int64 v52; 
  __int64 v53; 
  vec3_t forward; 
  vec3_t v55; 
  vec3_t pos; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15488, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15491, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  v9 = GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 6u);
  traversal = botData->botInfo.traversal;
  if ( v9 )
  {
    v11 = traversal | 0x8000;
    botData->botInfo.traversal = v11;
    botData->botInfo.lastTimeOnLadder = level.time;
    if ( (v11 & 1) != 0 && (!playerState->damageCount || (LOBYTE(botData->scriptedAgentInfo.blackboard.m_ShootParams.m_Pos.v[0]) & 2) == 0) )
    {
      if ( level.time - botData->botInfo.traverseStartTime <= 750 || (v11 & 1) == 0 )
        goto LABEL_25;
      nodeNegotStart = botData->botInfo.nodeNegotStart;
      __asm
      {
        vmovaps [rsp+0F8h+var_38], xmm6
        vmovaps [rsp+0F8h+var_48], xmm7
        vmovaps [rsp+0F8h+var_58], xmm8
        vmovaps [rsp+0F8h+var_68], xmm9
      }
      v13 = NULL;
      if ( Path_NodeValid(nodeNegotStart) )
        v14 = Path_ConvertIndexToNode(botData->botInfo.nodeNegotStart);
      else
        v14 = NULL;
      if ( Path_NodeValid(botData->botInfo.nodeNegotEnd) )
        v13 = Path_ConvertIndexToNode(botData->botInfo.nodeNegotEnd);
      if ( !v14 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15522, ASSERT_TYPE_ASSERT, "(negotiationStartNode)", "%s\n\tNo traversal start node.  botInfo->traversal = %i, botInfo->nodeNegotStart = %i, botInfo->traverseJumpTime = %i", "negotiationStartNode", botData->botInfo.traversal, botData->botInfo.nodeNegotStart, botData->botInfo.traverseJumpTime) )
        __debugbreak();
      if ( !v13 )
      {
        LODWORD(v53) = botData->botInfo.traverseJumpTime;
        LODWORD(v52) = botData->botInfo.nodeNegotEnd;
        LODWORD(v51) = botData->botInfo.traversal;
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15522, ASSERT_TYPE_ASSERT, "(negotiationEndNode)", "%s\n\tNo traversal end node.  botInfo->traversal = %i, botInfo->nodeNegotEnd = %i, botInfo->traverseJumpTime = %i", "negotiationEndNode", v51, v52, v53) )
          __debugbreak();
      }
      pathnode_t::GetPos(v14, &pos);
      pathnode_t::GetPos(v13, &v55);
      __asm
      {
        vmovss  xmm0, dword ptr [rsp+0F8h+var_98]
        vmovss  xmm1, dword ptr [rsp+0F8h+var_98+4]
        vsubss  xmm9, xmm0, dword ptr [rsp+0F8h+pos]
        vsubss  xmm8, xmm1, dword ptr [rsp+0F8h+pos+4]
      }
      AngleVectors(&playerState->viewangles, &forward, NULL, NULL);
      __asm
      {
        vmovss  xmm6, cs:__real@3f800000
        vmovss  xmm3, dword ptr [rsp+0F8h+forward]
        vmovss  xmm5, dword ptr [rsp+0F8h+forward+4]
        vmulss  xmm1, xmm8, xmm8
        vmulss  xmm0, xmm9, xmm9
        vaddss  xmm1, xmm1, xmm0
        vsqrtss xmm2, xmm1, xmm1
        vcmpless xmm0, xmm2, cs:__real@80000000
        vblendvps xmm0, xmm2, xmm6, xmm0
        vdivss  xmm7, xmm6, xmm0
        vmulss  xmm1, xmm3, xmm3
        vmulss  xmm0, xmm5, xmm5
        vaddss  xmm1, xmm1, xmm0
        vsqrtss xmm2, xmm1, xmm1
        vcmpless xmm0, xmm2, cs:__real@80000000
        vblendvps xmm0, xmm2, xmm6, xmm0
        vdivss  xmm1, xmm6, xmm0
        vmovaps xmm6, [rsp+0F8h+var_38]
        vmulss  xmm4, xmm3, xmm1
        vmulss  xmm2, xmm5, xmm1
        vmulss  xmm1, xmm8, xmm7
        vmovaps xmm8, [rsp+0F8h+var_58]
        vxorps  xmm0, xmm0, xmm0
        vmulss  xmm3, xmm1, xmm2
        vmovss  dword ptr [rsp+0F8h+forward+8], xmm0
        vmulss  xmm0, xmm9, xmm7
        vmovaps xmm9, [rsp+0F8h+var_68]
        vmovaps xmm7, [rsp+0F8h+var_48]
        vmovss  dword ptr [rsp+0F8h+forward+4], xmm2
        vmulss  xmm2, xmm0, xmm4
        vaddss  xmm1, xmm3, xmm2
        vcomiss xmm1, cs:__real@3f000000
        vmovss  dword ptr [rsp+0F8h+forward], xmm4
      }
      if ( !v48 )
      {
LABEL_25:
        Bot_SetMovementAlongNegotiation(botData, cmd);
        return 1i64;
      }
    }
    if ( !Jump_InJumpDebounce(playerState, cmd) )
    {
      Bot_PathClear(&botData->botInfo);
      Bot_TraversalClear(&botData->botInfo);
      if ( !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 0x1Au) )
        cmd->buttons |= 0x100ui64;
      *(_WORD *)&cmd->forwardmove = 129;
      botData->botInfo.stuckReactionTime = level.time + 1000;
      return 1i64;
    }
    return 1i64;
  }
  if ( (traversal & 1) != 0 )
  {
    time = level.time;
    if ( level.time - botData->botInfo.traverseStartTime > 250 )
    {
      Bot_SetMovementAlongNegotiation(botData, cmd);
      traversal = botData->botInfo.traversal;
      time = level.time;
    }
    if ( (traversal & 0x8000) != 0 )
      goto LABEL_37;
    if ( time - botData->botInfo.traverseStartTime > 500 )
    {
      Bot_TraversalClear(&botData->botInfo);
      Bot_ResumeScriptGoal(botData);
      traversal = botData->botInfo.traversal;
      time = level.time;
    }
    if ( (traversal & 0x8000) != 0 )
    {
LABEL_37:
      if ( time - botData->botInfo.lastTimeOnLadder > 750 )
      {
        Bot_TraversalClear(&botData->botInfo);
        Bot_ResumeScriptGoal(botData);
      }
    }
    return 1i64;
  }
  if ( (traversal & 0x8000) != 0 )
  {
    if ( level.time - botData->botInfo.traverseEndTime < 400 )
    {
      Bot_SetMovementAlongNegotiation(botData, cmd);
      return 1i64;
    }
    botData->botInfo.traversal = traversal & 0xFFFF7FFF;
    botData->botInfo.pNavigator->ClearPath(botData->botInfo.pNavigator);
  }
  return 0i64;
}

/*
==============
Bot_UpdateLookAtPoint
==============
*/
__int64 Bot_UpdateLookAtPoint(bot_data_t *botData, int minPriority, vec3_t *viewAnglesOut)
{
  int lookAtTime; 
  const sentient_s *sentient; 
  __int128 vPos; 
  __int128 vec; 
  vec3_t vEyePosOut; 

  _RDI = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11927, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( _RDI->botInfo.lookAtType < minPriority )
    return 0i64;
  lookAtTime = _RDI->botInfo.lookAtTime;
  __asm
  {
    vxorps  xmm0, xmm0, xmm0
    vmovss  dword ptr [rsp+0A8h+vPos], xmm0
    vmovss  dword ptr [rsp+0A8h+vPos+4], xmm0
    vmovss  dword ptr [rsp+0A8h+vPos+8], xmm0
    vmovss  dword ptr [rsp+0A8h+vec], xmm0
    vmovss  dword ptr [rsp+0A8h+vec+4], xmm0
    vmovss  dword ptr [rsp+0A8h+vec+8], xmm0
  }
  if ( level.time > lookAtTime )
    return 0i64;
  __asm { vucomiss xmm0, dword ptr [rdi+6EC8h] }
  if ( level.time == lookAtTime )
  {
    __asm { vucomiss xmm0, dword ptr [rdi+6ECCh] }
    if ( level.time == lookAtTime )
    {
      __asm { vucomiss xmm0, dword ptr [rdi+6ED0h] }
      if ( level.time == lookAtTime && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11945, ASSERT_TYPE_ASSERT, "( Vec3NotZero( botInfo->lookAtPoint ) )", (const char *)&queryFormat, "Vec3NotZero( botInfo->lookAtPoint )", vPos, vec) )
        __debugbreak();
    }
  }
  if ( !Bot_ShouldLookAtPoint(_RDI) )
    return 0i64;
  sentient = _RDI->botInfo.sentient;
  __asm
  {
    vmovaps [rsp+0A8h+var_28], xmm6
    vmovaps [rsp+0A8h+var_38], xmm7
  }
  Sentient_GetEyePosition(sentient, &vEyePosOut);
  Bot_PredictPosition(_RDI->botInfo.ent, _RDI, &vEyePosOut, (vec3_t *)&vPos);
  __asm
  {
    vmovss  xmm0, dword ptr [rdi+6EC8h]
    vsubss  xmm5, xmm0, dword ptr [rsp+0A8h+vPos]
    vmovss  xmm1, dword ptr [rdi+6ECCh]
    vsubss  xmm6, xmm1, dword ptr [rsp+0A8h+vPos+4]
    vmovss  xmm0, dword ptr [rdi+6ED0h]
    vsubss  xmm7, xmm0, dword ptr [rsp+0A8h+vPos+8]
    vmulss  xmm0, xmm7, xmm7
    vmulss  xmm2, xmm6, xmm6
    vmulss  xmm1, xmm5, xmm5
    vaddss  xmm3, xmm2, xmm1
    vmovss  xmm1, cs:__real@3f800000
    vaddss  xmm2, xmm3, xmm0
    vsqrtss xmm4, xmm2, xmm2
    vcmpless xmm0, xmm4, cs:__real@80000000
    vblendvps xmm0, xmm4, xmm1, xmm0
    vdivss  xmm2, xmm1, xmm0
    vmulss  xmm0, xmm5, xmm2
    vmovss  dword ptr [rsp+0A8h+vec], xmm0
    vmulss  xmm0, xmm7, xmm2
    vmulss  xmm1, xmm6, xmm2
    vmovss  dword ptr [rsp+0A8h+vec+8], xmm0
    vmovss  dword ptr [rsp+0A8h+vec+4], xmm1
  }
  vectoangles((const vec3_t *)&vec, viewAnglesOut);
  __asm
  {
    vmovaps xmm7, [rsp+0A8h+var_38]
    vmovaps xmm6, [rsp+0A8h+var_28]
  }
  if ( _RDI->botInfo.lookAtType <= BOT_LOOK_SCRIPT_SEEK )
    Bot_ApplyTwitchVectors(&_RDI->botInfo, NULL, viewAnglesOut);
  _RDI->botDebugData.flags |= 2u;
  return 1i64;
}

/*
==============
Bot_UpdateLostEnemyPath
==============
*/
__int64 Bot_UpdateLostEnemyPath(bot_data_t *botData)
{
  int v4; 
  unsigned int PathToGoalInternal; 
  gentity_s *v6; 
  bool v7; 
  int v8; 
  int v9; 
  pathnode_t *LastKnownEntNearestNode; 
  bot_mem_event_t *v35; 
  BOOL v36; 
  int type; 
  bool v50; 
  unsigned int v54; 
  unsigned int v55; 
  unsigned int v56; 
  int ClosestCharacterList; 
  __int64 v59; 
  const gentity_s *v60; 
  bot_data_t *EntityData; 
  bot_difficulty_t Difficulty; 
  bool v63; 
  bot_difficulty_t v64; 
  unsigned __int16 updated; 
  pathnode_t *v66; 
  const char *v69; 
  unsigned int number; 
  __int64 v72; 
  unsigned __int16 *p_nodeIndex; 
  char *fmt; 
  __int64 ignoreNodesBehind; 
  __int64 mode; 
  int LastKnownEntPosAndTime; 
  vec3_t targetPos; 
  vec3_t targetDirection; 
  bitarray<224> result; 
  vec3_t pos; 
  bot_mem_iterator_t memIt; 
  gentity_s *entity[5]; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9598, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  _RBX = &botData->8;
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9599, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !_RBX->botInfo.ent->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9600, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent->sentient )", (const char *)&queryFormat, "botData->botInfo.ent->sentient") )
    __debugbreak();
  v4 = 0;
  PathToGoalInternal = 0;
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
    v6 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
  else
    v6 = NULL;
  v7 = (botData->botInfo.flags & 0x400000) == 0;
  __asm { vmovaps [rsp+300h+var_30], xmm6 }
  LastKnownEntPosAndTime = 0;
  if ( v7 && (botData->botInfo.scriptFlags & 0x800) != 0 || (botData->botInfo.scriptFlags & 0x200000) != 0 || !SV_BotRequirePathnodes(botData) )
    goto LABEL_102;
  if ( !v6 )
    goto LABEL_31;
  if ( !v6->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9635, ASSERT_TYPE_ASSERT, "( enemy->sentient )", (const char *)&queryFormat, "enemy->sentient") )
    __debugbreak();
  if ( Sentient_IsAerial(v6->sentient) || Bot_IsStationaryEnt(v6) )
    goto LABEL_102;
  LastKnownEntPosAndTime = Bot_GetLastKnownEntPosAndTime(botData, v6, &targetPos);
  if ( LastKnownEntPosAndTime <= 0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9644, ASSERT_TYPE_ASSERT, "( lastEnemyKnownTime > 0 )", (const char *)&queryFormat, "lastEnemyKnownTime > 0") )
    __debugbreak();
  if ( botData->botInfo.enemyTrack.lastEnemyEntNum != v6->s.number && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9645, ASSERT_TYPE_ASSERT, "( botInfo->enemyTrack.lastEnemyEntNum == enemy->s.number )", (const char *)&queryFormat, "botInfo->enemyTrack.lastEnemyEntNum == enemy->s.number") )
    __debugbreak();
  if ( Bot_CanSeeEnemy(botData) || (v8 = 1, Bot_CanSeeEnemyThroughWall(botData)) )
LABEL_31:
    v8 = 0;
  if ( v6 || (v9 = 1, !botData->botInfo.currentAISearch.currentNodeCount) )
    v9 = 0;
  if ( v8 )
  {
    if ( botData->botInfo.currentAISearch.currentNodeCount && botData->botInfo.currentAISearch.mode == AI_SEARCH_THOROUGH && !(unsigned int)Bot_CurrentEnemyIsHighlyThreatening(botData) )
      botData->botInfo.currentAISearch.mode = AI_SEARCH_QUICK;
  }
  else if ( !v9 )
  {
LABEL_90:
    v72 = PathToGoalInternal;
    goto LABEL_103;
  }
  if ( v8 )
  {
    if ( !botData->botInfo.currentAISearch.currentNodeCount )
      goto LABEL_106;
    __asm
    {
      vmovss  xmm0, dword ptr [rsp+300h+targetPos]
      vsubss  xmm3, xmm0, dword ptr [rbx+6ED8h]
      vmovss  xmm1, dword ptr [rsp+300h+targetPos+4]
      vsubss  xmm2, xmm1, dword ptr [rbx+6EDCh]
      vmovss  xmm0, dword ptr [rsp+300h+targetPos+8]
      vsubss  xmm4, xmm0, dword ptr [rbx+6EE0h]
      vmulss  xmm2, xmm2, xmm2
      vmulss  xmm1, xmm3, xmm3
      vmulss  xmm0, xmm4, xmm4
      vaddss  xmm3, xmm2, xmm1
      vaddss  xmm2, xmm3, xmm0
      vcomiss xmm2, cs:__real@47800000
    }
    if ( botData->botInfo.currentAISearch.currentNodeCount )
    {
LABEL_106:
      if ( Bot_CanReactEnemy(botData) )
      {
        LastKnownEntNearestNode = Bot_GetLastKnownEntNearestNode(botData, v6);
        if ( LastKnownEntNearestNode )
          goto LABEL_47;
        __asm { vmovss  xmm1, cs:__real@457a0000; fMaxDist }
        LastKnownEntNearestNode = Path_NearestNodeByDistanceOnly(&targetPos, *(float *)&_XMM1);
        if ( LastKnownEntNearestNode )
        {
LABEL_47:
          __asm
          {
            vmovss  xmm0, dword ptr [rsp+300h+targetPos]
            vmovss  xmm1, dword ptr [rsp+300h+targetPos+4]
            vmovss  dword ptr [rbx+6ED8h], xmm0
            vmovss  xmm0, dword ptr [rsp+300h+targetPos+8]
            vmovss  dword ptr [rbx+6EE0h], xmm0
            vmovss  dword ptr [rbx+6EDCh], xmm1
            vmovss  xmm2, dword ptr [rbx+2380h]
            vmovss  xmm0, dword ptr [rbx+2384h]
            vmovss  xmm3, dword ptr [rbx+2388h]
            vmovss  dword ptr [rsp+300h+targetDirection], xmm2
            vmovss  dword ptr [rsp+300h+targetDirection+4], xmm0
            vmovss  dword ptr [rsp+300h+targetDirection+8], xmm3
            vmulss  xmm1, xmm0, xmm0
            vmulss  xmm0, xmm2, xmm2
            vaddss  xmm2, xmm1, xmm0
            vmulss  xmm1, xmm3, xmm3
            vaddss  xmm2, xmm2, xmm1
            vsqrtss xmm6, xmm2, xmm2
            vcomiss xmm6, cs:__real@3dcccccd
          }
          botData->botInfo.currentAISearch.nodeNearestSearchOrigin = LastKnownEntNearestNode;
          memset_0(&memIt, -1, 0xF8ui64);
          memset_0(memIt.stopIndex, -1, sizeof(memIt.stopIndex));
          v35 = Bot_MemoryIterate(botData, level.time, 0, &memIt);
          if ( v35 )
          {
            while ( v35->type != BOT_MEM_DEATH )
            {
              v35 = Bot_MemoryIterate(botData, level.time, 0, &memIt);
              if ( !v35 )
                goto LABEL_50;
            }
            if ( (v35->flags & 1) != 0 )
            {
              __asm
              {
                vmovss  xmm0, dword ptr [rsp+300h+targetPos]
                vsubss  xmm3, xmm0, dword ptr [rax+8]
                vmovss  xmm1, dword ptr [rsp+300h+targetPos+4]
                vsubss  xmm2, xmm1, dword ptr [rax+0Ch]
                vmovss  xmm0, dword ptr [rsp+300h+targetPos+8]
                vsubss  xmm4, xmm0, dword ptr [rax+10h]
                vmulss  xmm2, xmm2, xmm2
                vmulss  xmm1, xmm3, xmm3
                vmulss  xmm0, xmm4, xmm4
                vaddss  xmm3, xmm2, xmm1
                vaddss  xmm2, xmm3, xmm0
                vcomiss xmm2, cs:__real@48742400
              }
            }
          }
LABEL_50:
          v36 = Bot_CurrentEnemyIsHighlyThreatening(botData) != 0;
          __asm { vmovaps xmm2, xmm6; targetVelocity }
          botData->botInfo.currentAISearch.highestPriorityDistScalar = 0.5;
          botData->botInfo.currentAISearch.maxSearchDistScalar = 0.75;
          AI_BuildSearchArea(&botData->botInfo.currentAISearch, &targetDirection, *(float *)&_XMM2, 5000, &botData->botInfo, 1, (ai_search_type_t)v36);
          type = botData->botInfo.scriptGoal.type;
          botData->botInfo.aiSearchScriptGoalType = type;
          if ( type )
          {
            Bot_GetScriptGoal(botData, &botData->botInfo.aiSearchScriptGoalPos);
          }
          else
          {
            *(_QWORD *)((char *)&botData->scriptedAgentInfo + 29196) = 0i64;
            botData->botInfo.aiSearchScriptGoalPos.v[2] = 0.0;
          }
          goto LABEL_55;
        }
LABEL_102:
        v72 = 0i64;
        goto LABEL_103;
      }
    }
  }
LABEL_55:
  if ( level.teammode == TEAMMODE_FFA )
  {
    v50 = Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80);
    if ( Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) )
      _RAX = Com_TeamsSP_GetAllCombatTeamFlags();
    else
      _RAX = Com_TeamsMP_GetAllTeamFlags();
    __asm
    {
      vmovups xmm0, xmmword ptr [rax]
      vmovsd  xmm1, qword ptr [rax+10h]
    }
    v54 = _RAX->array[6] & 0xFFEFFFFF;
    __asm { vmovups xmmword ptr [rbp+200h+result.array], xmm0 }
    v55 = result.array[0];
    __asm { vmovsd  qword ptr [rbp+200h+result.array+10h], xmm1 }
    if ( v50 )
      v55 = result.array[0] & 0xF7FFFFFF;
    v56 = v54 & 0xFF9FFFFF;
  }
  else
  {
    Com_Teams_GetEnemyTeamFlags(&result, _RBX->botInfo.ent->sentient->eTeam);
    v56 = result.array[6];
    v55 = result.array[0];
  }
  __asm { vmovss  xmm2, cs:__real@43fa0000; maxDist }
  result.array[1] = ~result.array[1];
  result.array[2] = ~result.array[2];
  result.array[3] = ~result.array[3];
  result.array[4] = ~result.array[4];
  result.array[5] = ~result.array[5];
  result.array[0] = ~v55;
  result.array[6] = ~v56;
  ClosestCharacterList = Bot_GetClosestCharacterList(_RBX->botInfo.ent, &_RBX->botInfo.ent->r.currentOrigin, *(const float *)&_XMM2, 1, 0, 1, 1, &result, entity, 5);
  *(_QWORD *)pos.v = ClosestCharacterList;
  if ( ClosestCharacterList > 0 )
  {
    v59 = 0i64;
    do
    {
      v60 = entity[v59];
      if ( !v60 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9747, ASSERT_TYPE_ASSERT, "( currentClosestClient )", (const char *)&queryFormat, "currentClosestClient") )
        __debugbreak();
      EntityData = Bot_GetEntityData(v60);
      if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9749, ASSERT_TYPE_ASSERT, "( currentClosestClientBotData )", (const char *)&queryFormat, "currentClosestClientBotData") )
        __debugbreak();
      Difficulty = Bot_GetDifficulty(botData);
      AI_UpdateSearchArea(&botData->botInfo.currentAISearch, &EntityData->botInfo, 0, 0, Difficulty == BOT_DIFFICULTY_RECRUIT);
      ++v59;
    }
    while ( v59 < *(__int64 *)pos.v );
    _RBX = &botData->8;
    v4 = 0;
    PathToGoalInternal = 0;
  }
  v63 = _RBX->botInfo.currentAISearch.mode == AI_SEARCH_THOROUGH && (!v6 || level.time - LastKnownEntPosAndTime > 5000);
  v64 = Bot_GetDifficulty(botData);
  updated = AI_UpdateSearchArea(&_RBX->botInfo.currentAISearch, &_RBX->botInfo, v63, 1, v64 == BOT_DIFFICULTY_RECRUIT);
  if ( updated == 0xFFFF )
    goto LABEL_87;
  v66 = Path_ConvertIndexToNode(updated);
  pathnode_t::GetPos(v66, &pos);
  __asm
  {
    vmovss  xmm6, cs:__real@40a00000
    vmovaps xmm1, xmm6; goalRadius
  }
  PathToGoalInternal = 1;
  if ( Bot_PointInGoal(botData, *(float *)&_XMM1, &pos) )
    goto LABEL_87;
  v7 = _RBX->botInfo.currentAISearch.mode == AI_SEARCH_THOROUGH;
  v69 = "tsearch";
  memIt.index[0] = 0;
  if ( !v7 )
    v69 = "search";
  if ( v6 )
    number = v6->s.number;
  else
    number = -1;
  LODWORD(fmt) = updated;
  j_sprintf(memIt.index, "%s %i %i", v69, number, fmt);
  __asm { vmovaps xmm2, xmm6; goalRadius }
  PathToGoalInternal = Bot_GetPathToGoalInternal(botData, &pos, *(float *)&_XMM2, memIt.index);
  if ( PathToGoalInternal )
  {
    GScr_Notify(_RBX->botInfo.ent, scr_const.path_enemy, 0);
LABEL_87:
    if ( !_RBX->botInfo.currentAISearch.currentNodeCount || !PathToGoalInternal )
    {
      botData->botInfo.currentAISearch.currentNodeCount = 0;
      Bot_StopPursuingEnemy(botData);
      PathToGoalInternal = 0;
    }
    goto LABEL_90;
  }
  if ( (_RBX->botInfo.flags & 0x400000) == 0 )
    goto LABEL_87;
  if ( _RBX->botInfo.currentAISearch.currentNodeCount )
  {
    p_nodeIndex = &_RBX->botInfo.currentAISearch.nodes[0].nodeIndex;
    while ( 1 )
    {
      if ( (unsigned int)v4 >= 0x80 )
      {
        LODWORD(mode) = 128;
        LODWORD(ignoreNodesBehind) = v4;
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9811, ASSERT_TYPE_ASSERT, "(unsigned)( searchNodesIndex ) < (unsigned)( 128 )", "searchNodesIndex doesn't index PATH_MAX_AI_SEARCH_NODES\n\t%i not in [0, %i)", ignoreNodesBehind, mode) )
          __debugbreak();
      }
      if ( Path_ConvertIndexToNode(*p_nodeIndex) == v66 )
        break;
      ++v4;
      p_nodeIndex += 3;
      if ( v4 >= _RBX->botInfo.currentAISearch.currentNodeCount )
      {
        v72 = 1i64;
        goto LABEL_103;
      }
    }
    _RBX->botInfo.currentAISearch.nodes[v4].framesVisible = 7;
  }
  v72 = 1i64;
LABEL_103:
  __asm { vmovaps xmm6, [rsp+300h+var_30] }
  return v72;
}

/*
==============
Bot_UpdateMantleJump
==============
*/
void Bot_UpdateMantleJump(bot_data_t *botData, usercmd_s *cmd)
{
  playerState_s *playerState; 
  int v5; 
  BOOL v6; 
  bool hasMantleHint; 
  int traverseJumpTime; 
  vec3_t forward; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16182, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16183, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState )", (const char *)&queryFormat, "botData->botInfo.playerState") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16186, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  if ( !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&playerState->pm_flags, ACTIVE, 0x1Au) )
  {
    v5 = botData->botInfo.traversal & 0x1F;
    v6 = !Bot_ShouldFireOnEnemyInSight(botData) && cmd->forwardmove > 100;
    hasMantleHint = botData->botInfo.hasMantleHint;
    if ( !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 6u) && hasMantleHint && (v5 || v6) )
    {
      AngleVectors(&playerState->viewangles, &forward, NULL, NULL);
      __asm
      {
        vmovss  xmm0, dword ptr [rsp+78h+forward+4]
        vmovss  xmm1, dword ptr [rsp+78h+forward]
        vmulss  xmm2, xmm1, dword ptr [rsi+3Ch]
        vmulss  xmm3, xmm0, dword ptr [rsi+40h]
        vmovss  xmm0, dword ptr [rsp+78h+forward+8]
        vmulss  xmm1, xmm0, dword ptr [rsi+44h]
        vaddss  xmm4, xmm3, xmm2
        vaddss  xmm2, xmm4, xmm1
      }
      if ( v5 )
      {
        cmd->buttons |= 0x100ui64;
        traverseJumpTime = level.time + 500;
        if ( botData->botInfo.traverseJumpTime > level.time + 500 )
          traverseJumpTime = botData->botInfo.traverseJumpTime;
        botData->botInfo.traverseJumpTime = traverseJumpTime;
      }
      else
      {
        __asm
        {
          vxorps  xmm0, xmm0, xmm0
          vcomiss xmm2, xmm0
          vcomiss xmm2, cs:__real@40a00000
        }
      }
    }
  }
}

/*
==============
Bot_UpdateMeleeCharge
==============
*/
void Bot_UpdateMeleeCharge(bot_data_t *botData, usercmd_s *cmd)
{
  gentity_s *ent; 
  AIBotInterface *m_pAI; 
  GHandler *Handler; 
  playerState_s *playerState; 
  playerState_s *gameTime; 
  GWeaponMap *Instance; 
  bool IsThirdPersonMode; 
  playerState_s *v20; 
  playerState_s *v21; 
  GWeaponMap *v22; 
  GHandler *v23; 
  AIBotWrapper v24; 
  AimOutput output; 
  AimAssistSharedPlayerState aaSharedPS; 
  AimInput input; 
  WorldUpReferenceFrame refFrame; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8890, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8891, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  AICommonInterface::AICommonInterface(&v24.m_botInterface);
  v24.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v24.m_botAgentInterface);
  ent = botData->botInfo.ent;
  v24.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v24.m_pAI = NULL;
  AIBotWrapper::Setup(&v24, ent);
  m_pAI = v24.m_pAI;
  if ( !v24.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8904, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  WorldUpReferenceFrame::WorldUpReferenceFrame(&refFrame);
  Handler = GHandler::getHandler();
  WorldUpReferenceFrame::Init(&refFrame, botData->botInfo.playerState, Handler);
  input.buttons = cmd->buttons;
  input.localClientNum = LOCAL_CLIENT_INVALID;
  if ( !level.frameDuration && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_level_locals.h", 349, ASSERT_TYPE_ASSERT, "(level.frameDuration)", "%s\n\tAccessing frame duration before it's been set", "level.frameDuration") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  input.meleeChargeEnt = 2047;
  output.meleeChargeEnt = 2047;
  __asm
  {
    vxorps  xmm0, xmm0, xmm0
    vcvtsi2ss xmm0, xmm0, cs:?level@@3Ulevel_locals_t@@A.frameDuration; level_locals_t level
    vmulss  xmm0, xmm0, cs:__real@3a83126f
    vmaxss  xmm1, xmm0, cs:__real@3a83126f
    vmovss  [rbp+90h+input.deltaTime], xmm1
  }
  aaSharedPS.weaponState = playerState->weapState[0].weaponState;
  aaSharedPS.meleeCount = playerState->weapState[0].meleeHitCount;
  aaSharedPS.meleeChargeEnt = playerState->meleeChargeEnt;
  _RAX = Bot_Weap_GetViewmodelWeapon(playerState);
  gameTime = botData->botInfo.playerState;
  __asm
  {
    vmovups ymm0, ymmword ptr [rax]
    vmovups ymmword ptr [rbp+90h+var_F0.weapon.weaponIdx], ymm0
    vmovups xmm1, xmmword ptr [rax+20h]
    vmovups xmmword ptr [rbp+90h+var_F0.weapon.attachmentVariationIndices+5], xmm1
    vmovsd  xmm0, qword ptr [rax+30h]
    vmovsd  qword ptr [rbp+90h+var_F0.weapon.attachmentVariationIndices+15h], xmm0
  }
  *(_DWORD *)&aaSharedPS.weapon.weaponCamo = *(_DWORD *)&_RAX->weaponCamo;
  aaSharedPS.weapFlags = gameTime->weapCommon.weapFlags;
  Instance = GWeaponMap::GetInstance();
  IsThirdPersonMode = BG_IsThirdPersonMode(Instance, gameTime);
  v20 = botData->botInfo.playerState;
  aaSharedPS.isThirdPerson = IsThirdPersonMode;
  aaSharedPS.pm_flags = v20->pm_flags;
  botData->botInfo.aaSharedGlob.viewAngles.v[0] = v20->viewangles.v[0];
  botData->botInfo.aaSharedGlob.viewAngles.v[1] = v20->viewangles.v[1];
  botData->botInfo.aaSharedGlob.viewAngles.v[2] = v20->viewangles.v[2];
  m_pAI->GetEyePosition(m_pAI, &botData->botInfo.aaSharedGlob.eyeOrigin);
  LODWORD(gameTime) = level.time;
  v21 = botData->botInfo.playerState;
  v22 = GWeaponMap::GetInstance();
  v23 = GHandler::getHandler();
  BG_AimAssist_ApplyAutoMelee(v23, &input, &output, v22, v21, &botData->botInfo.aaSharedGlob, &aaSharedPS, &refFrame, (const int)gameTime);
  BG_SetMeleeChargeCmd(&output, cmd);
  botData->botInfo.aaSharedGlob.prevButtons = input.buttons;
}

/*
==============
Bot_UpdateMemoryAwareness
==============
*/
void Bot_UpdateMemoryAwareness(bot_data_t *botData)
{
  bot_mem_event_t *i; 
  __int64 entNum; 
  __int64 v4; 
  BOOL v5; 
  __int64 v6; 
  __int64 v7; 
  gentity_s *v8; 
  unsigned __int8 flags; 
  const sentient_s *sentient; 
  sentient_info_t *SentientInfo; 
  unsigned __int8 lastKnownReason; 
  const pathnode_t *v13; 
  __int64 v14; 
  __int64 v15; 
  bot_mem_iterator_t memIt; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6648, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6649, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6650, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
    __debugbreak();
  memset_0(&memIt, -1, 0xF8ui64);
  memset_0(memIt.stopIndex, -1, sizeof(memIt.stopIndex));
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6662, ASSERT_TYPE_ASSERT, "(botInfo->ent)", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  for ( i = Bot_MemoryIterate(botData, level.time, level.time - 30000, &memIt); i; i = Bot_MemoryIterate(botData, level.time, level.time - 30000, &memIt) )
  {
    entNum = i->entNum;
    v4 = entNum;
    v5 = (entNum & 0x8000u) == 0i64 && (int)entNum < level.num_entities;
    if ( i->type == BOT_MEM_DEATH && v5 )
    {
      if ( (unsigned int)v4 >= 0x800 )
      {
        LODWORD(v15) = 2048;
        LODWORD(v14) = v4;
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 188, ASSERT_TYPE_ASSERT, "(unsigned)( entityIndex ) < (unsigned)( ( 2048 ) )", "entityIndex doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v14, v15) )
          __debugbreak();
      }
      if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 189, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
        __debugbreak();
      v6 = v4;
      v7 = i->entNum;
      v8 = &g_entities[v6];
      if ( (unsigned int)v7 >= 0x800 )
      {
        LODWORD(v15) = 2048;
        LODWORD(v14) = i->entNum;
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 207, ASSERT_TYPE_ASSERT, "(unsigned)( entityIndex ) < (unsigned)( ( 2048 ) )", "entityIndex doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v14, v15) )
          __debugbreak();
      }
      if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 208, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
        __debugbreak();
      if ( g_entities[v7].r.isInUse != g_entityIsInUse[v7] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 209, ASSERT_TYPE_ASSERT, "( g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex] )", (const char *)&queryFormat, "g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex]") )
        __debugbreak();
      if ( !g_entityIsInUse[v7] || v8->health <= 0 )
        i->flags |= 6u;
      flags = i->flags;
      if ( (flags & 4) == 0 && (flags & 1) != 0 )
      {
        if ( G_IsEntityInUse(i->entNum) )
        {
          sentient = v8->sentient;
          if ( sentient )
          {
            if ( (SentientInfo = Sentient_GetSentientInfo(botData->botInfo.sentient, sentient), SentientInfo->lastKnownPosTime > i->time) && ((lastKnownReason = SentientInfo->lastKnownReason, lastKnownReason == 12) || lastKnownReason == 25) || Bot_IsFacingPosition(botData, &i->location1) && (!Path_NodeValid(i->nodeIndex) || (v13 = Path_ConvertIndexToNode(i->nodeIndex)) == NULL || Bot_CanSeeNode(botData, v13)) )
              i->flags |= 4u;
          }
        }
      }
    }
  }
}

/*
==============
Bot_UpdateMove
==============
*/
void Bot_UpdateMove(bot_data_t *botData, usercmd_s *cmd)
{
  int CanSeeEnemy; 
  int v7; 
  const gentity_s *v8; 
  char v10; 
  char v11; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13340, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13341, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  *(_WORD *)cmd->remoteControlAngles = 0;
  if ( !Bot_UpdateMove_Frozen(botData, cmd) && !Bot_UpdateMove_Scripted(botData, cmd) )
  {
    if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12760, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
      __debugbreak();
    if ( Bot_IsUsingTurret(botData) )
      goto LABEL_47;
    if ( Bot_UpdateMove_OffPathGrid(botData, cmd) )
      return;
    if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12780, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
      __debugbreak();
    _RSI = &botData->8;
    CanSeeEnemy = Bot_CanSeeEnemy(botData);
    if ( botData == (bot_data_t *)-8i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13725, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
      __debugbreak();
    v7 = Bot_NavPathExists(&botData->botInfo);
    if ( Bot_EntIsInLastStand(_RSI->botInfo.ent) || !CanSeeEnemy && !v7 )
      goto LABEL_47;
    if ( Bot_Weap_HasLauncherThatNeedsAimAtEnemy(botData) && Bot_IsAwareOfEnemy(botData) )
      goto LABEL_47;
    if ( Bot_UpdateMove_HoldPathGoal(botData, cmd) || Bot_GetHidingFromEntity(botData) && (botData->botInfo.flags & 0x1000) != 0 && Bot_UpdateMove_Pathing(botData, cmd) )
      return;
    if ( (LOBYTE(botData->scriptedAgentInfo.blackboard.m_ShootParams.m_Pos.v[0]) & 0x10) != 0 && !Bot_EnemyIsAttackingMe(botData, 200) )
    {
LABEL_47:
      *(_WORD *)&cmd->forwardmove = 0;
      return;
    }
    if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
      v8 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
    else
      v8 = NULL;
    if ( v8 )
    {
      if ( !Bot_EntityIsConsideredDead(v8) )
      {
        __asm
        {
          vmovss  xmm0, cs:__real@42000000
          vcomiss xmm0, dword ptr [rsi+238Ch]
        }
        *(float *)&_XMM0 = Bot_ActualMeleeRange(botData);
        __asm
        {
          vmulss  xmm1, xmm0, cs:__real@3f000000
          vcomiss xmm1, dword ptr [rsi+238Ch]
        }
        if ( !(v10 | v11) )
        {
          cmd->forwardmove = 0;
          if ( Bot_IsStationaryEnt(v8) )
            cmd->rightmove = 0;
          else
            cmd->rightmove = 127 * botData->botInfo.combatStrafeDir;
          return;
        }
      }
      if ( Bot_EnemyPreferMelee(botData) )
      {
        if ( Bot_PathExists(&botData->botInfo) )
        {
          __asm { vxorps  xmm1, xmm1, xmm1; goalRadius }
          if ( !Bot_IsAtPathEnd(botData, *(float *)&_XMM1) )
          {
            Bot_StrafeOnPath(botData, cmd, 127);
            return;
          }
        }
      }
    }
    if ( !Bot_UpdateMove_CombatWeapon(botData, cmd) && !Bot_UpdateMove_Pathing(botData, cmd) )
      *(_WORD *)&cmd->forwardmove = 127;
  }
}

/*
==============
Bot_UpdateMove_CombatWeapon
==============
*/

__int64 __fastcall Bot_UpdateMove_CombatWeapon(bot_data_t *botData, usercmd_s *cmd, double _XMM2_8)
{
  const playerState_s *playerState; 
  int CanFireOnEnemy; 
  const gentity_s *v7; 
  int v9; 
  gentity_s *Enemy; 
  int v11; 
  int v12; 
  const pathnode_t *v13; 
  int WeaponStateForViewWeapon; 
  int v17; 
  bool v18; 
  int v19; 
  Weapon *weapon; 

  _RDI = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13004, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13005, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  playerState = _RDI->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13008, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  weapon = (Weapon *)Bot_Weap_GetViewmodelWeapon(playerState);
  CanFireOnEnemy = Bot_CanSeeAndCanFireOnEnemy(_RDI);
  v19 = Bot_EnemyFacesBot(_RDI);
  if ( Bot_GetCurrentNumDebugGoals() > 0 )
    return 0i64;
  if ( EntHandle::isDefined(&_RDI->botInfo.sentient->targetEnt) )
  {
    v7 = EntHandle::ent(&_RDI->botInfo.sentient->targetEnt);
    if ( v7 )
    {
      if ( (unsigned int)Bot_IsPointInRangeOfHardwareEntExplosion(v7, &_RDI->botInfo.ent->r.currentOrigin) )
      {
        cmd->forwardmove = -127;
        return 1i64;
      }
    }
  }
  if ( _RDI->botInfo.scriptGoal.type >= BOT_SCR_GOAL_CRITICAL || Bot_CloseToObjectiveGoal(_RDI) || !CanFireOnEnemy || _RDI->botInfo.navigation.isInBadPlace )
    return 0i64;
  v9 = Bot_PathExists(&_RDI->botInfo);
  Enemy = Bot_GetEnemy(_RDI);
  if ( !Enemy && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13040, ASSERT_TYPE_ASSERT, "( enemy )", (const char *)&queryFormat, "enemy") )
    __debugbreak();
  if ( !Enemy->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13041, ASSERT_TYPE_ASSERT, "( enemy->sentient )", (const char *)&queryFormat, "enemy->sentient") )
    __debugbreak();
  *(_WORD *)&cmd->forwardmove = 0;
  v11 = 0;
  if ( !Bot_ShouldCombatMove(_RDI) )
    return 1i64;
  if ( !Bot_ShouldRushEnemy(_RDI) )
  {
    if ( Bot_Weap_Ammo(playerState, weapon) )
    {
      if ( Bot_EntityUsingRiotShield(Enemy, 0) && Bot_IsFireFromHipRange(_RDI) )
      {
        cmd->forwardmove = -127;
        if ( Bot_CheckForLedgeFall(_RDI, cmd, _XMM2_8) )
        {
          cmd->forwardmove = 0;
          return 1i64;
        }
        return 1i64;
      }
      v12 = _RDI->botInfo.flags & 0x400000;
      if ( !Bot_IsInRangeOfEnemy(_RDI) )
      {
        if ( v9 )
        {
          Bot_StrafeOnPath(_RDI, cmd, 127);
          goto LABEL_40;
        }
        if ( v12 )
        {
          cmd->forwardmove = 127;
          goto LABEL_40;
        }
      }
      __asm
      {
        vmovss  xmm0, cs:__real@43480000
        vcomiss xmm0, dword ptr [rdi+2394h]
      }
LABEL_40:
      if ( Bot_ShouldCombatMoveEvade(_RDI) )
      {
        v13 = Sentient_NearestNode(_RDI->botInfo.sentient);
        if ( (_RDI->botInfo.flags & 0x2000) != 0 && v13 && Path_NodeExposedToPoint(v13, &Enemy->r.currentOrigin, 4) && Bot_PathExists(&_RDI->botInfo) )
        {
          Bot_StrafeOnPath(_RDI, cmd, 127);
        }
        else
        {
          v11 = 1;
          cmd->rightmove = 127 * _RDI->botInfo.combatStrafeDir;
        }
      }
      WeaponStateForViewWeapon = Bot_Weap_GetWeaponStateForViewWeapon(_RDI->botInfo.playerState);
      if ( v19 && Bot_IsReloading(_RDI) && (unsigned int)(WeaponStateForViewWeapon - 22) > 2 )
      {
        __asm { vmovss  xmm0, cs:__real@3f800000 }
        v17 = Bot_Weap_ReloadTime(playerState, weapon);
        v18 = (unsigned int)v17 <= 0x1F4;
        if ( v17 < 500 )
          v17 = 500;
        __asm { vcomiss xmm0, dword ptr [rdi+802Ch] }
        if ( v18 && level.time - _RDI->botInfo.hideFromTime > v17 + 1000 )
        {
          __asm { vmovss  xmm2, cs:__real@43960000; hideRange }
          Bot_HideFromEntity(_RDI, Enemy, *(float *)&_XMM2_8, v17);
        }
        else if ( (_RDI->botInfo.flags & 0x1000) == 0 )
        {
          cmd->forwardmove = -127;
          goto LABEL_58;
        }
      }
      if ( !v11 )
        return 1i64;
LABEL_58:
      if ( Bot_CheckForLedgeFall(_RDI, cmd, _XMM2_8) )
        *(_WORD *)&cmd->forwardmove = 0;
      return 1i64;
    }
    return 0i64;
  }
  if ( Bot_PathExists(&_RDI->botInfo) )
    Bot_StrafeOnPath(_RDI, cmd, 127);
  else
    cmd->forwardmove = 127;
  return 1i64;
}

/*
==============
Bot_UpdateMove_Frozen
==============
*/
__int64 Bot_UpdateMove_Frozen(bot_data_t *botData, usercmd_s *cmd)
{
  bool v5; 
  const dvar_t *v8; 
  const dvar_t *v9; 
  vec3_t dir; 
  vec3_t center; 

  _RBX = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12544, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12545, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  if ( !_RBX->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12549, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  if ( level.time >= _RBX->botInfo.movementFrozenUntil )
    return 0i64;
  *(_WORD *)&cmd->forwardmove = 0;
  v5 = _RBX->botInfo.scriptGoal.type <= BOT_SCR_GOAL_HUNT;
  __asm
  {
    vmovaps [rsp+98h+var_28], xmm6
    vxorps  xmm6, xmm6, xmm6
  }
  if ( v5 && !EntHandle::isDefined(&_RBX->botInfo.sentient->targetEnt) )
  {
    __asm
    {
      vucomiss xmm6, dword ptr [rbx+7228h]
      vucomiss xmm6, dword ptr [rbx+722Ch]
      vucomiss xmm6, dword ptr [rbx+7230h]
    }
  }
  v8 = DVARINT_bot_DrawDebug;
  if ( !DVARINT_bot_DrawDebug && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebug") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v8);
  if ( v8->current.integer == 1 )
    goto LABEL_31;
  v9 = DVARINT_bot_DrawDebug;
  if ( !DVARINT_bot_DrawDebug && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DrawDebug") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v9);
  if ( v9->current.integer == 2 )
  {
LABEL_31:
    if ( Bot_ShouldDrawDebugForBot(_RBX) )
    {
      v5 = _RBX->botInfo.scriptGoal.type <= BOT_SCR_GOAL_HUNT;
      _RAX = _RBX->botInfo.ent;
      __asm
      {
        vmovss  xmm0, cs:__real@3f800000
        vmovss  dword ptr [rsp+98h+dir], xmm6
        vmovss  dword ptr [rsp+98h+dir+4], xmm6
        vmovss  dword ptr [rsp+98h+dir+8], xmm0
        vmovss  xmm0, dword ptr [rax+130h]
        vmovss  dword ptr [rsp+98h+center], xmm0
        vmovss  xmm1, dword ptr [rax+134h]
        vmovss  dword ptr [rsp+98h+center+4], xmm1
        vmovss  xmm0, dword ptr [rax+138h]
        vaddss  xmm2, xmm0, cs:__real@41c80000
        vmovss  dword ptr [rsp+98h+center+8], xmm2
      }
      if ( v5 && !EntHandle::isDefined(&_RBX->botInfo.sentient->targetEnt) )
      {
        __asm
        {
          vmovss  xmm0, dword ptr [rbx+7228h]
          vmovss  xmm2, dword ptr [rbx+722Ch]
          vmovss  xmm3, dword ptr [rbx+7230h]
          vmulss  xmm1, xmm0, xmm0
          vmulss  xmm0, xmm2, xmm2
          vaddss  xmm2, xmm1, xmm0
          vmulss  xmm1, xmm3, xmm3
          vaddss  xmm2, xmm2, xmm1
          vsqrtss xmm0, xmm2, xmm2
          vcomiss xmm0, cs:__real@3dcccccd
        }
      }
      __asm { vmovss  xmm1, cs:__real@42480000; radius }
      G_DebugCircleEx(&center, *(float *)&_XMM1, &dir, &colorRed, 1, 0);
    }
  }
  __asm { vmovaps xmm6, [rsp+98h+var_28] }
  return 1i64;
}

/*
==============
Bot_UpdateMove_HoldPathGoal
==============
*/
__int64 Bot_UpdateMove_HoldPathGoal(bot_data_t *botData, usercmd_s *cmd)
{
  int v7; 
  int v8; 
  char v20; 
  char v21; 
  int v40; 
  int scriptGoalIdleTime; 
  vec3_t goal; 
  vec3_t forward; 
  vec3_t right; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12845, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12846, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  if ( botData == (bot_data_t *)-8i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13725, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  __asm { vxorps  xmm1, xmm1, xmm1; goalRadius }
  v7 = Bot_NavPathExists(&botData->botInfo);
  v8 = Bot_IsAtPathEnd(botData, *(float *)&_XMM1);
  if ( !v7 || !v8 )
    return 0i64;
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12861, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  _RBX = botData->botInfo.playerState;
  if ( !_RBX && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12863, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  __asm { vmovss  xmm0, dword ptr [rbx+1DCh]; yaw }
  YawVectors(*(float *)&_XMM0, &forward, &right);
  *(_WORD *)&cmd->forwardmove = 0;
  if ( !Bot_AtScriptGoalNode(botData) )
    return 1i64;
  Bot_GetScriptGoal(botData, &goal);
  Bot_UpdateTwitchVectors(&botData->botInfo, &goal, NULL);
  __asm
  {
    vmovss  xmm0, dword ptr [rsp+98h+goal]
    vaddss  xmm2, xmm0, dword ptr [rdi+23CCh]
    vmovss  xmm0, dword ptr [rsp+98h+goal+4]
    vaddss  xmm1, xmm0, dword ptr [rdi+23D0h]
    vmovss  dword ptr [rsp+98h+goal+4], xmm1
    vmovss  dword ptr [rsp+98h+goal], xmm2
    vsubss  xmm3, xmm2, dword ptr [rax+130h]
    vsubss  xmm4, xmm1, dword ptr [rax+134h]
    vmulss  xmm1, xmm3, xmm3
    vmulss  xmm0, xmm4, xmm4
    vaddss  xmm2, xmm1, xmm0
    vcomiss xmm2, cs:__real@40800000
  }
  if ( !(v20 | v21) )
  {
    __asm
    {
      vmovss  xmm1, cs:__real@3f800000
      vsqrtss xmm2, xmm2, xmm2
      vcmpless xmm0, xmm2, cs:__real@80000000
      vblendvps xmm0, xmm2, xmm1, xmm0
      vdivss  xmm1, xmm1, xmm0
      vmulss  xmm5, xmm4, xmm1
      vmovaps [rsp+98h+var_28], xmm6
      vmulss  xmm6, xmm3, xmm1
      vmulss  xmm2, xmm6, dword ptr [rsp+98h+forward]
      vmulss  xmm3, xmm5, dword ptr [rsp+98h+forward+4]
      vaddss  xmm0, xmm3, xmm2
      vmulss  xmm3, xmm5, dword ptr [rsp+98h+right+4]
      vmulss  xmm2, xmm6, dword ptr [rsp+98h+right]
      vmulss  xmm0, xmm0, cs:__real@42000000
      vmovaps xmm6, [rsp+98h+var_28]
      vcvttss2si eax, xmm0
      vaddss  xmm1, xmm3, xmm2
      vmulss  xmm3, xmm1, cs:__real@42000000
    }
    cmd->forwardmove = _EAX;
    __asm { vcvttss2si eax, xmm3 }
    cmd->rightmove = _EAX;
  }
  v40 = level.time - botData->botInfo.scriptGoalIdleLast;
  botData->botInfo.scriptGoalIdleLast = level.time;
  if ( v40 > 100 )
  {
    botData->botInfo.scriptGoalIdleTime = 0;
    return 1i64;
  }
  scriptGoalIdleTime = botData->botInfo.scriptGoalIdleTime;
  if ( !scriptGoalIdleTime )
    botData->botInfo.searchLookNext = 0;
  botData->botInfo.scriptGoalIdleTime = v40 + scriptGoalIdleTime;
  return 1i64;
}

/*
==============
Bot_UpdateMove_OffPathGrid
==============
*/
__int64 Bot_UpdateMove_OffPathGrid(bot_data_t *botData, usercmd_s *cmd)
{
  int CanFireOnEnemy; 
  int noPathFoundTime; 
  int v6; 
  int v7; 
  int v8; 
  int IsMovementLocked; 
  const dvar_t *v32; 
  vec3_t end; 
  vec3_t forward; 
  vec3_t right; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12707, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12708, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  CanFireOnEnemy = Bot_CanSeeAndCanFireOnEnemy(botData);
  noPathFoundTime = botData->botInfo.noPathFoundTime;
  v6 = 0;
  v7 = CanFireOnEnemy;
  if ( !noPathFoundTime || (v8 = 1, level.time - noPathFoundTime <= 750) )
    v8 = 0;
  if ( !Bot_NavPathExists(&botData->botInfo) && !Bot_IsOnGround(botData) )
    v6 = 1;
  IsMovementLocked = Bot_IsMovementLocked(botData);
  if ( v7 || IsMovementLocked || !v8 && !v6 )
    return 0i64;
  _RSI = botData->botInfo.playerState;
  if ( !_RSI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12723, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  __asm { vmovss  xmm0, dword ptr [rsi+1DCh]; yaw }
  YawVectors(*(float *)&_XMM0, &forward, &right);
  __asm
  {
    vmovss  xmm0, dword ptr [rsp+0A8h+forward+4]
    vmulss  xmm3, xmm0, dword ptr [rbx+6E94h]
    vmovss  xmm1, dword ptr [rsp+0A8h+forward]
    vmulss  xmm2, xmm1, dword ptr [rbx+6E90h]
    vmovss  xmm0, dword ptr [rsp+0A8h+forward+8]
    vmulss  xmm1, xmm0, dword ptr [rbx+6E98h]
    vaddss  xmm4, xmm3, xmm2
    vaddss  xmm2, xmm4, xmm1
    vmulss  xmm0, xmm2, cs:__real@42fe0000
    vmovss  xmm1, dword ptr [rsp+0A8h+right]
    vcvttss2si eax, xmm0
    vmovss  xmm0, dword ptr [rsp+0A8h+right+4]
  }
  cmd->forwardmove = _EAX;
  __asm
  {
    vmulss  xmm3, xmm0, dword ptr [rbx+6E94h]
    vmulss  xmm2, xmm1, dword ptr [rbx+6E90h]
    vmovss  xmm0, dword ptr [rsp+0A8h+right+8]
    vmulss  xmm1, xmm0, dword ptr [rbx+6E98h]
    vaddss  xmm4, xmm3, xmm2
    vaddss  xmm2, xmm4, xmm1
    vmulss  xmm3, xmm2, cs:__real@42fe0000
    vcvttss2si eax, xmm3
  }
  cmd->rightmove = _EAX;
  v32 = DVARINT_ai_showPaths;
  if ( !DVARINT_ai_showPaths && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "ai_showPaths") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v32);
  if ( v32->current.integer > 0 && Bot_ShouldDrawDebugForBot(botData) )
  {
    if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12737, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
      __debugbreak();
    _RCX = &botData->botInfo.ent->r.currentOrigin;
    __asm
    {
      vmovss  xmm0, dword ptr [rcx]
      vmovss  dword ptr [rsp+0A8h+end], xmm0
      vmovss  xmm1, dword ptr [rcx+4]
      vmovss  dword ptr [rsp+0A8h+end+4], xmm1
      vmovss  xmm0, dword ptr [rcx+8]
      vaddss  xmm2, xmm0, cs:__real@42c80000
      vmovss  dword ptr [rsp+0A8h+end+8], xmm2
    }
    G_DebugLine(_RCX, &end, &colorYellow, 0);
    G_DebugStar(&end, &colorYellow);
  }
  return 1i64;
}

/*
==============
Bot_UpdateMove_Pathing
==============
*/

__int64 __fastcall Bot_UpdateMove_Pathing(bot_data_t *botData, usercmd_s *cmd, double _XMM2_8)
{
  $3396140AF3A78F7FCD1D73807E505015 *v11; 
  int v13; 
  int v15; 
  int v16; 
  bool v18; 
  unsigned int v22; 
  unsigned int v23; 
  unsigned int v24; 
  bot_data_t *EntityData; 
  bool v28; 
  bool v29; 
  AINavigator *pNavigator; 
  char v52; 
  char v53; 
  __int64 v76; 
  bitarray<224> result; 
  vec3_t entity; 
  vec3_t center; 
  vec3_t outLookaheadDir; 
  vec3_t v82; 

  __asm { vmovaps [rsp+140h+var_70], xmm9 }
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13223, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13224, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  v11 = &botData->8;
  if ( botData == (bot_data_t *)-8i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13725, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  __asm { vxorps  xmm1, xmm1, xmm1; goalRadius }
  v13 = Bot_NavPathExists(&botData->botInfo);
  __asm { vxorps  xmm9, xmm9, xmm9 }
  v15 = Bot_IsAtPathEnd(botData, *(float *)&_XMM1);
  if ( !v13 || v15 )
  {
    v76 = 0i64;
  }
  else
  {
    v16 = 127;
    if ( (*((_BYTE *)&botData->scriptedAgentInfo + 9016) & 1) == 0 )
    {
      __asm { vmovss  xmm1, cs:__real@43c80000; maxDist }
      if ( Bot_NearbyBotExists(botData, *(const float *)&_XMM1, 1) )
      {
        if ( !v11->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13249, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
          __debugbreak();
        if ( level.teammode == TEAMMODE_FFA )
        {
          v18 = Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80);
          if ( Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) )
            _RAX = Com_TeamsSP_GetAllCombatTeamFlags();
          else
            _RAX = Com_TeamsMP_GetAllTeamFlags();
          __asm
          {
            vmovups xmm0, xmmword ptr [rax]
            vmovsd  xmm1, qword ptr [rax+10h]
          }
          v22 = _RAX->array[6] & 0xFFEFFFFF;
          __asm { vmovups xmmword ptr [rsp+140h+result.array], xmm0 }
          v23 = result.array[0];
          __asm { vmovsd  qword ptr [rsp+140h+result.array+10h], xmm1 }
          if ( v18 )
            v23 = result.array[0] & 0xF7FFFFFF;
          v24 = v22 & 0xFF9FFFFF;
        }
        else
        {
          Com_Teams_GetEnemyTeamFlags(&result, v11->botInfo.ent->sentient->eTeam);
          v24 = result.array[6];
          v23 = result.array[0];
        }
        result.array[1] = ~result.array[1];
        result.array[2] = ~result.array[2];
        result.array[3] = ~result.array[3];
        result.array[4] = ~result.array[4];
        result.array[5] = ~result.array[5];
        result.array[6] = ~v24;
        result.array[0] = ~v23;
        __asm { vxorps  xmm2, xmm2, xmm2; maxDist }
        if ( Bot_GetClosestCharacterList(v11->botInfo.ent, &v11->botInfo.ent->r.currentOrigin, *(const float *)&_XMM2, 1, 0, 1, 0, &result, (gentity_s **)&entity, 1) == 1 )
        {
          _R14 = *(_QWORD *)entity.v;
          if ( *(_QWORD *)entity.v )
          {
            EntityData = Bot_GetEntityData(*(const gentity_s **)entity.v);
            if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13258, ASSERT_TYPE_ASSERT, "( closestBotData )", (const char *)&queryFormat, "closestBotData") )
              __debugbreak();
            v28 = EntityData->botInfo.playerState == NULL;
            if ( !EntityData->botInfo.playerState )
            {
              v29 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13259, ASSERT_TYPE_ASSERT, "( closestBotData->botInfo.playerState )", (const char *)&queryFormat, "closestBotData->botInfo.playerState");
              v28 = !v29;
              if ( v29 )
                __debugbreak();
            }
            _RAX = EntityData->botInfo.playerState;
            __asm
            {
              vmovss  xmm0, dword ptr [rax+3Ch]
              vmovss  xmm2, dword ptr [rax+40h]
              vmovss  xmm3, dword ptr [rax+44h]
              vmulss  xmm1, xmm0, xmm0
              vmulss  xmm0, xmm2, xmm2
              vaddss  xmm2, xmm1, xmm0
              vmulss  xmm1, xmm3, xmm3
              vaddss  xmm2, xmm2, xmm1
              vcomiss xmm2, cs:__real@451c4000
            }
            if ( !v28 )
            {
              __asm
              {
                vmovss  xmm0, dword ptr [r14+130h]
                vmovss  xmm1, dword ptr [r14+134h]
              }
              pNavigator = botData->botInfo.pNavigator;
              __asm
              {
                vmovaps [rsp+140h+var_40], xmm6
                vmovaps [rsp+140h+var_50], xmm7
                vsubss  xmm7, xmm1, dword ptr [rax+134h]
                vmovaps [rsp+140h+var_60], xmm8
                vsubss  xmm8, xmm0, dword ptr [rax+130h]
                vmulss  xmm0, xmm8, xmm8
                vmulss  xmm2, xmm7, xmm7
                vaddss  xmm1, xmm2, xmm0
                vsqrtss xmm3, xmm1, xmm1
                vcmpless xmm0, xmm3, cs:__real@80000000
                vmovaps [rsp+140h+var_80], xmm11
                vmovss  xmm11, cs:__real@3f800000
                vblendvps xmm0, xmm3, xmm11, xmm0
                vdivss  xmm6, xmm11, xmm0
              }
              Nav_GetLookaheadDir(pNavigator, &outLookaheadDir);
              Nav_GetLookaheadDir(EntityData->botInfo.pNavigator, &v82);
              __asm
              {
                vmovss  xmm4, dword ptr [rbp+40h+outLookaheadDir+4]
                vmovss  xmm3, dword ptr [rbp+40h+outLookaheadDir]
                vmulss  xmm0, xmm7, xmm6
                vmovaps xmm7, [rsp+140h+var_50]
                vmulss  xmm1, xmm8, xmm6
                vmovaps xmm8, [rsp+140h+var_60]
                vmovaps xmm6, [rsp+140h+var_40]
                vmulss  xmm2, xmm0, xmm4
                vmulss  xmm0, xmm1, xmm3
                vaddss  xmm1, xmm2, xmm0
                vcvtss2sd xmm2, xmm1, xmm1
                vcomisd xmm2, cs:__real@3fe999999999999a
              }
              if ( !(v52 | v53) )
              {
                __asm
                {
                  vmulss  xmm3, xmm3, dword ptr [rbp+40h+var_A0]
                  vmulss  xmm2, xmm4, dword ptr [rbp+40h+var_A0+4]
                  vaddss  xmm0, xmm3, xmm2
                  vcvtss2sd xmm3, xmm0, xmm0
                  vcomisd xmm3, cs:__real@3fe6666666666666
                }
                if ( !(v52 | v53) )
                {
                  if ( level.time > botData->botInfo.nextTimeCanFreezeMovement )
                  {
                    *(double *)&_XMM0 = G_random();
                    __asm { vcomiss xmm0, cs:__real@3f000000 }
                    if ( v52 )
                      Bot_TryFreezeMovement(botData);
                    botData->botInfo.nextTimeCanFreezeMovement = level.time + 5000;
                  }
                  v16 = 95;
                  if ( Dvar_GetInt_Internal_DebugName(DVARINT_bot_DrawDebug, "bot_DrawDebug") == 1 || Dvar_GetInt_Internal_DebugName(DVARINT_bot_DrawDebug, "bot_DrawDebug") == 2 )
                  {
                    if ( Bot_ShouldDrawDebugForBot(botData) )
                    {
                      _RAX = v11->botInfo.ent;
                      __asm
                      {
                        vmovss  xmm1, cs:__real@43c80000; radius
                        vmovss  dword ptr [rsp+140h+entity], xmm9
                        vmovss  dword ptr [rsp+140h+entity+4], xmm9
                        vmovss  [rsp+140h+var_C8], xmm11
                        vmovss  xmm0, dword ptr [rax+130h]
                        vmovss  dword ptr [rbp+40h+center], xmm0
                        vmovss  xmm2, dword ptr [rax+134h]
                        vmovss  dword ptr [rbp+40h+center+4], xmm2
                        vmovss  xmm0, dword ptr [rax+138h]
                        vaddss  xmm3, xmm0, cs:__real@41c80000
                        vmovss  dword ptr [rbp+40h+center+8], xmm3
                      }
                      G_DebugCircleEx(&center, *(float *)&_XMM1, &entity, &colorBlue, 1, 0);
                      G_DebugLine(&v11->botInfo.ent->r.currentOrigin, (const vec3_t *)(_R14 + 304), &colorBlue, 1);
                    }
                  }
                }
              }
              __asm { vmovaps xmm11, [rsp+140h+var_80] }
            }
          }
        }
      }
    }
    Bot_StrafeOnPath(botData, cmd, v16);
    v76 = 1i64;
  }
  __asm { vmovaps xmm9, [rsp+140h+var_70] }
  return v76;
}

/*
==============
Bot_UpdateMove_Scripted
==============
*/
__int64 Bot_UpdateMove_Scripted(bot_data_t *botData, usercmd_s *cmd)
{
  __int64 result; 
  vec2_t v85; 
  vec3_t angles; 
  vec3_t right; 
  vec3_t forward; 
  vec3_t up; 

  _RBX = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12617, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12618, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  if ( level.time >= _RBX->botInfo.scriptMoveTime )
  {
    _RBX->botInfo.scriptMoveSpeed = 1.0;
    *((_QWORD *)&_RBX->scriptedAgentInfo + 1119) = 0i64;
  }
  else if ( (LOBYTE(_RBX->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) == 0 )
  {
    __asm
    {
      vmovaps [rsp+0E8h+var_18], xmm6
      vmovaps [rsp+0E8h+var_28], xmm7
      vmovaps [rsp+0E8h+var_38], xmm8
      vmovaps [rsp+0E8h+var_48], xmm9
      vmovaps [rsp+0E8h+var_58], xmm10
      vmovaps [rsp+0E8h+var_68], xmm11
    }
    *(_WORD *)&cmd->forwardmove = 0;
    if ( (unsigned int)Bot_IsThirdPersonRemoteVehicle(_RBX) )
    {
      _RAX = Bot_GetRemoteEyesVehicleEnt(_RBX);
      __asm
      {
        vmovss  xmm0, dword ptr [rax+13Ch]
        vmovss  dword ptr [rsp+0E8h+angles], xmm0
        vmovss  xmm1, dword ptr [rax+140h]
        vmovss  dword ptr [rsp+0E8h+angles+4], xmm1
        vmovss  xmm0, dword ptr [rax+144h]
      }
    }
    else
    {
      if ( !_RBX->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12605, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
        __debugbreak();
      SV_BotUpdateEyeInfo(_RBX->botInfo.ent);
      __asm
      {
        vmovss  xmm0, dword ptr [rbx+2D78h]
        vmovss  xmm1, dword ptr [rbx+2D7Ch]
        vmovss  dword ptr [rsp+0E8h+angles], xmm0
        vmovss  xmm0, dword ptr [rbx+2D80h]
        vmovss  dword ptr [rsp+0E8h+angles+4], xmm1
      }
    }
    __asm { vmovss  dword ptr [rsp+0E8h+angles+8], xmm0 }
    AngleVectors(&angles, &forward, &right, &up);
    __asm
    {
      vmovss  xmm4, cs:__real@3f800000
      vmovss  xmm7, dword ptr [rsp+0E8h+up]
      vmovss  xmm10, dword ptr [rsp+0E8h+forward]
      vmovss  xmm11, dword ptr [rsp+0E8h+forward+4]
      vmovss  xmm8, dword ptr [rsp+0E8h+up+4]
      vmulss  xmm1, xmm10, xmm10
      vmulss  xmm0, xmm11, xmm11
      vaddss  xmm1, xmm1, xmm0
      vsqrtss xmm5, xmm1, xmm1
      vcmpless xmm0, xmm5, cs:__real@80000000
      vblendvps xmm0, xmm5, xmm4, xmm0
      vdivss  xmm9, xmm4, xmm0
      vmulss  xmm1, xmm7, xmm7
      vmulss  xmm0, xmm8, xmm8
      vaddss  xmm1, xmm1, xmm0
      vsqrtss xmm2, xmm1, xmm1
      vcmpless xmm0, xmm2, cs:__real@80000000
      vblendvps xmm0, xmm2, xmm4, xmm0
      vdivss  xmm6, xmm4, xmm0
      vaddss  xmm1, xmm2, xmm5
      vdivss  xmm0, xmm4, xmm1
      vmulss  xmm4, xmm0, xmm5
      vmulss  xmm5, xmm0, xmm2
      vmulss  xmm1, xmm7, xmm6
      vmulss  xmm2, xmm1, xmm5
      vmulss  xmm0, xmm10, xmm9
      vmulss  xmm3, xmm0, xmm4
      vmulss  xmm0, xmm11, xmm9
      vmulss  xmm1, xmm8, xmm6
      vmulss  xmm4, xmm0, xmm4
      vmovss  xmm0, dword ptr [rbx+22F8h]; yaw
      vaddss  xmm7, xmm3, xmm2
      vmulss  xmm2, xmm1, xmm5
      vaddss  xmm6, xmm4, xmm2
    }
    YawVectors2D(*(float *)&_XMM0, &v85, NULL);
    __asm
    {
      vmovaps xmm11, [rsp+0E8h+var_68]
      vmovaps xmm10, [rsp+0E8h+var_58]
      vmovaps xmm9, [rsp+0E8h+var_48]
      vmovaps xmm8, [rsp+0E8h+var_38]
    }
    if ( _RBX->botInfo.scriptMoveRemoteControl )
    {
      if ( _RBX->botInfo.scriptMoveStickSwap )
      {
        __asm
        {
          vmovss  xmm5, dword ptr [rsp+0E8h+var_B8]
          vmovss  xmm4, dword ptr [rsp+0E8h+var_B8+4]
          vmulss  xmm1, xmm7, xmm5
          vmulss  xmm0, xmm6, xmm4
          vaddss  xmm1, xmm1, xmm0
          vmulss  xmm2, xmm1, dword ptr [rbx+22FCh]
          vmulss  xmm0, xmm2, cs:__real@c2fe0000
          vmulss  xmm1, xmm5, dword ptr [rsp+0E8h+right]
          vcvttss2si eax, xmm0
          vmulss  xmm0, xmm4, dword ptr [rsp+0E8h+right+4]
        }
        cmd->remoteControlAngles[0] = _EAX;
        __asm
        {
          vaddss  xmm1, xmm1, xmm0
          vmulss  xmm2, xmm1, dword ptr [rbx+22FCh]
          vmulss  xmm3, xmm2, cs:__real@c2fe0000
          vcvttss2si eax, xmm3
        }
        cmd->remoteControlAngles[1] = _EAX;
        goto LABEL_24;
      }
      if ( !CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12676, ASSERT_TYPE_ASSERT, (const char *)&queryFormat.fmt + 3, "Unsupported Bot scripted movement with scriptMoveRemoteControl and !scriptMoveStickSwap") )
        goto LABEL_24;
    }
    else
    {
      if ( !_RBX->botInfo.scriptMoveStickSwap )
      {
        __asm
        {
          vmovss  xmm5, dword ptr [rsp+0E8h+var_B8]
          vmovss  xmm4, dword ptr [rsp+0E8h+var_B8+4]
          vmulss  xmm1, xmm7, xmm5
          vmulss  xmm0, xmm6, xmm4
          vaddss  xmm1, xmm1, xmm0
          vmulss  xmm2, xmm1, dword ptr [rbx+22FCh]
          vmulss  xmm0, xmm2, cs:__real@42fe0000
          vmulss  xmm1, xmm5, dword ptr [rsp+0E8h+right]
          vcvttss2si eax, xmm0
          vmulss  xmm0, xmm4, dword ptr [rsp+0E8h+right+4]
        }
        cmd->forwardmove = _EAX;
        __asm
        {
          vaddss  xmm1, xmm1, xmm0
          vmulss  xmm2, xmm1, dword ptr [rbx+22FCh]
          vmulss  xmm3, xmm2, cs:__real@42fe0000
          vcvttss2si eax, xmm3
        }
        cmd->rightmove = _EAX;
        goto LABEL_24;
      }
      if ( !CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12680, ASSERT_TYPE_ASSERT, (const char *)&queryFormat.fmt + 3, "Unsupported Bot scripted movement with !scriptMoveRemoteControl and scriptMoveStickSwap") )
      {
LABEL_24:
        __asm { vmovaps xmm7, [rsp+0E8h+var_28] }
        result = 1i64;
        __asm { vmovaps xmm6, [rsp+0E8h+var_18] }
        return result;
      }
    }
    __debugbreak();
    goto LABEL_24;
  }
  return 0i64;
}

/*
==============
Bot_UpdateMovement
==============
*/
void Bot_UpdateMovement(bot_data_t *botData, usercmd_s *cmd)
{
  const dvar_t *v5; 
  int Int_Internal_DebugName; 
  pathnode_t *node; 
  char v8; 
  pathnode_t *v11; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7648, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v5 = DVARINT_ai_showPaths;
  if ( !DVARINT_ai_showPaths && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "ai_showPaths") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v5);
  if ( v5->current.integer > 0 && Bot_ShouldDrawDebugForBot(botData) && botData->botInfo.ent->health > 0 && Nav_HasPath(botData->botInfo.pNavigator) )
  {
    Int_Internal_DebugName = Dvar_GetInt_Internal_DebugName(DVARINT_ai_showPaths, "ai_showPaths");
    Nav_DrawPath(botData->botInfo.pNavigator, Int_Internal_DebugName);
  }
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23600, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( botData->botInfo.scriptGoal.type )
  {
    node = botData->botInfo.scriptGoal.node;
    if ( node )
      Bot_StampNodeArea(botData, node);
  }
  if ( Bot_UpdateMovementTraversal(botData, cmd) )
  {
    Bot_UpdateDirection(botData, cmd);
    if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7571, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
      __debugbreak();
    Bot_UpdateStance(botData, cmd);
    Bot_UpdateMantleJump(botData, cmd);
  }
  else if ( (unsigned int)Bot_UpdateBlinded(botData, cmd) )
  {
    Bot_UpdateStance(botData, cmd);
  }
  else
  {
    Bot_UpdatePath(botData, cmd);
    if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7543, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
      __debugbreak();
    Bot_UpdatePathLookPredict(botData);
    Bot_PathStuckRecover(botData);
    Bot_UpdateDirection(botData, cmd);
    Bot_UpdateStrafe(botData);
    Bot_UpdateMove(botData, cmd);
    if ( !cmd )
    {
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7637, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
        __debugbreak();
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7622, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
        __debugbreak();
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6899, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
        __debugbreak();
    }
    if ( Bot_IsSliding(botData) || botData->botInfo.slideDesiredTime > level.time && Slide_CanSlideFromGroundConditionsMet(botData->botInfo.playerState, level.time) && Slide_CanSlideNowConditionsMet(botData->botInfo.playerState) )
    {
      cmd->buttons = cmd->buttons & 0xFFFFFFFFFFBFFF3Fui64 | 0x400000;
    }
    else
    {
      Bot_UpdateDive(botData, cmd);
      Bot_UpdateStance(botData, cmd);
    }
    Bot_UpdateSprinting(botData, cmd);
    Bot_UpdateMantleJump(botData, cmd);
    if ( (unsigned int)Bot_IsRemoteEyesVehicle(botData) && level.time >= botData->botInfo.scriptMoveTime && Bot_GetRemoteEyesVehicleEnt(botData)->s.eType == ET_HELICOPTER || Bot_IsMovementLocked(botData) )
    {
      *(_WORD *)&cmd->forwardmove = 0;
    }
    else
    {
      Bot_UpdateStuckCheck(botData);
      _RAX = botData->botInfo.playerState;
      __asm
      {
        vxorps  xmm0, xmm0, xmm0
        vucomiss xmm0, dword ptr [rax+3Ch]
      }
      if ( !v8 )
        goto LABEL_51;
      __asm { vucomiss xmm0, dword ptr [rax+40h] }
      if ( !v8 )
        goto LABEL_51;
      __asm { vucomiss xmm0, dword ptr [rax+44h] }
      if ( !v8 )
      {
LABEL_51:
        if ( SV_BotRequirePathnodes(botData) )
        {
          v11 = Sentient_NearestNode(botData->botInfo.sentient);
          if ( v11 )
          {
            if ( (v11->constant.spawnflags & 0x40000) != 0 )
              SV_BotBreakGlassMove(botData->botInfo.ent, &botData->botInfo.playerState->velocity, &actorBoxCrouch);
          }
        }
      }
    }
  }
}

/*
==============
Bot_UpdateMovementTraversal
==============
*/
__int64 Bot_UpdateMovementTraversal(bot_data_t *botData, usercmd_s *cmd)
{
  int updated; 
  bool v6; 
  BOOL v7; 
  int v8; 
  const pathnode_t *NegotiationStartNode; 
  unsigned int v10; 
  __int64 v11; 
  char v12; 
  const pathnode_t *NegotiationEndNode; 
  unsigned __int16 v14; 
  gentity_s *ent; 
  char v16; 
  int flags; 
  unsigned int v18; 
  int v19; 
  bot_info_t *p_botInfo; 
  const playerState_s *playerState; 
  const Weapon *ViewmodelWeapon; 
  PlayerHandIndex WeaponHandForViewWeapon; 
  BOOL v24; 
  int IsWeapType; 
  int IsWeapClass; 
  int IsBlockedByBreakable; 
  int traversal; 
  int v37; 
  __int64 v39; 
  __int64 v40; 
  BOOL v41; 

  _RBP = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15870, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !_RBP->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15876, ASSERT_TYPE_ASSERT, "( botInfo->sentient )", (const char *)&queryFormat, "botInfo->sentient") )
    __debugbreak();
  if ( !_RBP->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15877, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  updated = Bot_UpdateLadder(_RBP, cmd);
  v6 = GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&_RBP->botInfo.playerState->pm_flags, ACTIVE, 5u);
  v7 = v6;
  v41 = v6;
  if ( v6 )
    *(_WORD *)&cmd->forwardmove = 127;
  v8 = 0;
  if ( (LOBYTE(_RBP->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) == 0 )
  {
    if ( Bot_PathHasNegotiation(&_RBP->botInfo) && Bot_IsOnGround(_RBP) )
    {
      NegotiationStartNode = Bot_PathGetNegotiationStartNode(&_RBP->botInfo);
      if ( !NegotiationStartNode )
      {
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15893, ASSERT_TYPE_ASSERT, "( negotiationStartNode )", (const char *)&queryFormat, "negotiationStartNode") )
          __debugbreak();
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3663, ASSERT_TYPE_ASSERT, "( negotiationNode )", (const char *)&queryFormat, "negotiationNode") )
          __debugbreak();
      }
      if ( !Path_IsNodeTraversalBegin(NegotiationStartNode) )
        goto LABEL_90;
      v10 = Path_ConvertNodeToIndex(NegotiationStartNode);
      v11 = v10 >> 1;
      v12 = 4 * (v10 & 1);
      if ( (unsigned int)v11 >= (unsigned int)s_botTraversalTypesCount )
      {
        LODWORD(v39) = v11;
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3675, ASSERT_TYPE_ASSERT, "(unsigned)( byteIndex ) < (unsigned)( s_botTraversalTypesCount )", "byteIndex doesn't index s_botTraversalTypesCount\n\t%i not in [0, %i)", v39, s_botTraversalTypesCount) )
          __debugbreak();
      }
      v8 = 1 << (((15 << v12) & s_botTraversalTypes[v11]) >> v12);
      if ( !v8 )
      {
LABEL_90:
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15896, ASSERT_TYPE_ASSERT, "( negotiationType )", (const char *)&queryFormat, "negotiationType") )
          __debugbreak();
      }
      if ( Bot_NegotiationPointReached(_RBP, BOT_TRAVERSAL_STAGE_APPROACHING_START_NODE, cmd) )
      {
        _RBP->botInfo.traversal |= v8;
        if ( !NegotiationStartNode && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15907, ASSERT_TYPE_ASSERT, "( negotiationStartNode )", (const char *)&queryFormat, "negotiationStartNode") )
          __debugbreak();
        _RBP->botInfo.nodeNegotStart = Path_ConvertNodeToIndex(NegotiationStartNode);
        NegotiationEndNode = Bot_PathGetNegotiationEndNode(&_RBP->botInfo);
        v14 = Path_ConvertNodeToIndex(NegotiationEndNode);
        _RBP->botInfo.nodeNegotEnd = v14;
        if ( !v14 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15910, ASSERT_TYPE_ASSERT, "( botInfo->nodeNegotEnd )", (const char *)&queryFormat, "botInfo->nodeNegotEnd") )
          __debugbreak();
        if ( !Path_NodeValid(_RBP->botInfo.nodeNegotStart) )
        {
          LODWORD(v40) = _RBP->botInfo.nodeNegotStart;
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15912, ASSERT_TYPE_ASSERT, "(Path_NodeValid( botData->botInfo.nodeNegotStart ))", "%s\n\tbotInfo.nodeNegotStart = %i", "Path_NodeValid( botData->botInfo.nodeNegotStart )", v40) )
            __debugbreak();
        }
        if ( !Path_NodeValid(_RBP->botInfo.nodeNegotEnd) )
        {
          LODWORD(v40) = _RBP->botInfo.nodeNegotEnd;
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15913, ASSERT_TYPE_ASSERT, "(Path_NodeValid( botData->botInfo.nodeNegotEnd ))", "%s\n\tbotInfo.nodeNegotEnd = %i", "Path_NodeValid( botData->botInfo.nodeNegotEnd )", v40) )
            __debugbreak();
        }
        ent = _RBP->botInfo.ent;
        _RBP->botInfo.traverseStartTime = level.time;
        _RBP->botInfo.traverseProgressTime = level.time;
        _RBP->botInfo.traverseProgressJumps = 0;
        _RBP->botInfo.traverseProgressLoc.v[0] = ent->r.currentOrigin.v[0];
        _RBP->botInfo.traverseProgressLoc.v[1] = ent->r.currentOrigin.v[1];
        _RBP->botInfo.traverseProgressLoc.v[2] = ent->r.currentOrigin.v[2];
        *(double *)&_XMM0 = G_random();
        __asm { vcomiss xmm0, dword ptr [rbp+8018h] }
        if ( v16 )
          _RBP->botInfo.traversal |= 0x2000u;
        if ( v8 == 1 )
        {
          *(double *)&_XMM0 = G_random();
          __asm { vcomiss xmm0, cs:__real@3f000000 }
          flags = _RBP->botInfo.flags;
          if ( v16 )
            v18 = flags | 2;
          else
            v18 = flags & 0xFFFFFFFD;
          _RBP->botInfo.flags = v18;
        }
        if ( (NegotiationStartNode->constant.spawnflags & 4) != 0 )
          _RBP->botInfo.traversal |= 0x10000u;
      }
    }
    if ( (LOBYTE(_RBP->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) == 0 )
    {
LABEL_83:
      if ( updated )
        return 1i64;
      return v7 || (LOBYTE(_RBP->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) != 0;
    }
  }
  if ( updated )
    goto LABEL_58;
  if ( (LOBYTE(_RBP->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) == 0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15828, ASSERT_TYPE_ASSERT, "( Bot_IsDoingTraversal( &botData->botInfo ) )", (const char *)&queryFormat, "Bot_IsDoingTraversal( &botData->botInfo )") )
    __debugbreak();
  if ( !Bot_ShouldAvoidTraversals(_RBP) || Bot_EnemyPreferMelee(_RBP) || (_RBP->botInfo.flags & 0x4000) != 0 )
  {
LABEL_58:
    v19 = Bot_NegotiationPointReached(_RBP, BOT_TRAVERSAL_STAGE_BETWEEN_START_AND_END_NODE, cmd);
    if ( (LOBYTE(_RBP->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) == 0 )
      goto LABEL_81;
    p_botInfo = &_RBP->botInfo;
    if ( v19 )
    {
      _RBP->botInfo.traverseEndTime = level.time;
      Bot_TraversalClear(p_botInfo);
      goto LABEL_81;
    }
    if ( !Bot_PathHasNegotiation(p_botInfo) || updated )
    {
LABEL_81:
      if ( Bot_NeedsTraversalJump(_RBP, cmd) )
        Bot_UpdateJumpTraversal(_RBP, cmd);
      goto LABEL_83;
    }
    Bot_SetMovementAlongNegotiation(_RBP, cmd);
    if ( !_RBP->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 15680, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState )", (const char *)&queryFormat, "botData->botInfo.playerState") )
      __debugbreak();
    playerState = _RBP->botInfo.playerState;
    ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(playerState);
    WeaponHandForViewWeapon = Bot_Weap_GetWeaponHandForViewWeapon(playerState);
    v24 = Bot_Weap_AmmoInClip(playerState, ViewmodelWeapon, WeaponHandForViewWeapon) < 3;
    IsWeapType = Bot_Weap_IsWeapType(playerState, ViewmodelWeapon, WEAPTYPE_BULLET);
    IsWeapClass = Bot_Weap_IsWeapClass(playerState, ViewmodelWeapon, WEAPCLASS_SNIPER);
    _EAX = Bot_IsReloading(_RBP);
    if ( !IsWeapType || IsWeapClass || _EAX || v24 || (_RBP->botInfo.traversal & 0x2000) != 0 )
    {
      _EBX = 1;
      _EAX = 0;
    }
    else
    {
      _EBX = 0;
    }
    __asm
    {
      vmovss  xmm2, cs:__real@42c80000
      vmovd   xmm1, eax
      vmovd   xmm0, ebx
      vpcmpeqd xmm3, xmm0, xmm1
      vmovss  xmm1, cs:__real@41f00000
      vblendvps xmm1, xmm1, xmm2, xmm3; range
    }
    IsBlockedByBreakable = Bot_IsBlockedByBreakable(_RBP, *(double *)&_XMM1);
    traversal = _RBP->botInfo.traversal;
    if ( IsBlockedByBreakable )
    {
      _RBP->botInfo.traversal = traversal | 0xC00;
      if ( level.time - _RBP->botInfo.lastBreakAttack > 100 )
      {
        v37 = 16;
        if ( !_EBX )
          v37 = 2;
        _RBP->botInfo.scriptPress |= v37;
        _RBP->botInfo.lastBreakAttack = level.time;
        goto LABEL_80;
      }
    }
    else
    {
      _RBP->botInfo.traversal = traversal & 0xFFFFFBFF;
    }
    _RBP->botInfo.scriptPress &= 0xFFFFFFED;
LABEL_80:
    v7 = v41;
    goto LABEL_81;
  }
  Bot_TraversalClear(&_RBP->botInfo);
  Bot_PathClear(&_RBP->botInfo);
  return v7 || (LOBYTE(_RBP->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) != 0;
}

/*
==============
Bot_UpdateNVGState
==============
*/
void Bot_UpdateNVGState(bot_data_t *botData, usercmd_s *cmd)
{
  $3396140AF3A78F7FCD1D73807E505015 *v4; 
  playerState_s *playerState; 
  const Weapon *ViewmodelWeapon; 
  bool v7; 
  bool v8; 
  Gesture *Gesture; 
  Gesture *v10; 
  bool IsPlaying; 
  bool v12; 
  bool v13; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3895, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v4 = &botData->8;
  if ( botData == (bot_data_t *)-8i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3897, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3899, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(playerState);
  if ( ViewmodelWeapon->weaponIdx && !Bot_IsFiringWeapon(botData, cmd) )
  {
    v7 = BG_UsingAlternate(playerState);
    if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\bgame\\bg_weapons_util.h", 1366, ASSERT_TYPE_ASSERT, "(ps)", (const char *)&queryFormat, "ps") )
      __debugbreak();
    if ( BG_Skydive_IsSkydiving(playerState) )
    {
      v8 = 0;
    }
    else
    {
      v8 = 0;
      if ( BG_Ladder_IsDualWieldingAllowed(playerState) )
        v8 = playerState->weapCommon.lastWeaponHand == WEAPON_HAND_LEFT;
    }
    Gesture = BG_Suit_GetGesture(playerState, WEAPON_HAND_DEFAULT, ViewmodelWeapon, v7, v8, GESTUREANIMTYPE_NVG_ON);
    v10 = BG_Suit_GetGesture(playerState, WEAPON_HAND_DEFAULT, ViewmodelWeapon, v7, v8, GESTUREANIMTYPE_NVG_OFF);
    IsPlaying = BG_NightVisionGestureIsPlaying(playerState, Gesture, NULL, NULL);
    v12 = BG_NightVisionGestureIsPlaying(playerState, v10, NULL, NULL);
    if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\bgame\\bg_public.h", 2222, ASSERT_TYPE_ASSERT, "(ps)", (const char *)&queryFormat, "ps") )
      __debugbreak();
    v13 = GameModeFlagContainer<enum PWeaponFlagsCommon,enum PWeaponFlagsSP,enum PWeaponFlagsMP,64>::TestFlagInternal(&playerState->weapCommon.weapFlags, ACTIVE, 7u);
    if ( !IsPlaying && !v12 && ((v4->botInfo.scriptFlags & 0x800000) != 0) != v13 )
      cmd->buttons |= 0x10000ui64;
  }
}

/*
==============
Bot_UpdateNavigator
==============
*/
void Bot_UpdateNavigator(bot_info_t *botInfo)
{
  char v2; 
  bool v3; 

  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13934, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  v2 = botInfo->playerState->skydivePlayerState.state[0];
  v3 = (v2 & 0xFA) == 0 && v2 != 1;
  if ( !botInfo->traversal && v3 )
    Nav_SetPos(botInfo->pNavigator, &botInfo->ent->r.currentOrigin);
}

/*
==============
Bot_UpdatePath
==============
*/
void Bot_UpdatePath(bot_data_t *botData, usercmd_s *cmd)
{
  gentity_s *ent; 
  playerState_s *playerState; 
  int v7; 
  int v8; 
  gentity_s *Enemy; 
  int v11; 
  BOOL v12; 
  BOOL v13; 
  BOOL v14; 
  const Weapon *ViewmodelWeapon; 
  gentity_s *v16; 
  AIBotInterface *m_pAI; 
  AIBotWrapper v18; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10170, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10171, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10172, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  ent = botData->botInfo.ent;
  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7543, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( s_botPathTurn == ent->s.number )
  {
    Bot_NotifyBadPathOnOwnerCollide(botData);
    if ( Bot_AtScriptGoal(botData) && !botData->botInfo.scriptGoalReachedTime )
      botData->botInfo.scriptGoalReachedTime = level.time;
    if ( !Bot_IsUsingTurret(botData) && Bot_IsOnGround(botData) && !Bot_EntIsInLastStand(botData->botInfo.ent) )
    {
      playerState = botData->botInfo.playerState;
      if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14727, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
        __debugbreak();
      v7 = 1;
      if ( (!GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&playerState->pm_flags, ACTIVE, 0x13u) || playerState->pm_time) && !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 5u) )
      {
        v8 = Bot_PathExists(&botData->botInfo);
        if ( Bot_HasRemoteEyes(botData) )
        {
          if ( v8 )
            Bot_PathClear(&botData->botInfo);
          return;
        }
        __asm { vxorps  xmm1, xmm1, xmm1; goalRadius }
        Enemy = Bot_GetEnemy(botData);
        v11 = Bot_IsAtPathEnd(botData, *(float *)&_XMM1);
        v12 = level.time < G_irand(300, 500) + botData->botInfo.lastPathCalcTime + 750;
        v13 = Enemy && Bot_CanReactEnemy(botData);
        v14 = 0;
        if ( (botData->botInfo.scriptFlags & 0x200000) == 0 )
          v14 = v13;
        if ( !Bot_UpdateDebugGoal(botData) && !Bot_Badplace_Update(botData) && !Bot_UpdateScriptGoal(botData) && !Bot_UpdateHidingGoal(botData) && !Bot_UpdateLostEnemyPath(botData) && !Bot_UpdateAerialLockOnPath(botData) )
        {
          if ( v12 )
          {
            ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(botData->botInfo.playerState);
            if ( !Bot_Weap_IsMelee(botData->botInfo.playerState, ViewmodelWeapon) )
              v7 = 0;
          }
          if ( v8 && !v11 )
          {
            if ( !v7 || (LOBYTE(botData->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) != 0 )
              return;
            if ( !Bot_StuckShouldReact(&botData->botInfo) )
            {
              if ( !v14 )
                return;
              goto LABEL_50;
            }
          }
          if ( v14 )
          {
LABEL_50:
            Bot_UpdatePathToEnemy(botData);
            return;
          }
          if ( !Bot_PathStuckRecover(botData) )
          {
            AICommonInterface::AICommonInterface(&v18.m_botInterface);
            v18.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
            AICommonInterface::AICommonInterface(&v18.m_botAgentInterface);
            v16 = botData->botInfo.ent;
            v18.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
            v18.m_pAI = NULL;
            AIBotWrapper::Setup(&v18, v16);
            m_pAI = v18.m_pAI;
            if ( !v18.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10246, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
              __debugbreak();
            if ( level.time - botData->botInfo.enemyTrack.lastEnemyTime > m_pAI->GetThreatUpdateInterval(m_pAI) )
              Bot_ResumeScriptGoal(botData);
          }
        }
      }
    }
  }
}

/*
==============
Bot_UpdatePathLookPredict
==============
*/
void Bot_UpdatePathLookPredict(bot_data_t *botData)
{
  char v36; 
  bool v37; 
  bool v38; 
  vec3_t outLookaheadDir; 
  nav_posAlongPathResults_t pResults; 
  char v50; 
  void *retaddr; 

  _RAX = &retaddr;
  __asm
  {
    vmovaps xmmword ptr [rax-18h], xmm6
    vmovaps xmmword ptr [rax-28h], xmm7
    vmovaps xmmword ptr [rax-38h], xmm8
    vmovaps xmmword ptr [rax-48h], xmm9
    vmovaps xmmword ptr [rax-58h], xmm10
    vmovaps xmmword ptr [rax-68h], xmm11
    vmovaps xmmword ptr [rax-78h], xmm12
  }
  _RBX = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10625, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( Bot_ShouldLookAtPoint(_RBX) )
  {
    if ( _RBX == (bot_data_t *)-8i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13725, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
      __debugbreak();
    if ( Bot_NavPathExists(&_RBX->botInfo) )
    {
      bfx::AreaHandle::AreaHandle(&pResults.m_hArea);
      bfx::LinkHandle::LinkHandle(&pResults.m_hLink);
      __asm { vmovss  xmm1, cs:__real@43160000; dist }
      Nav_GetPosAlongPath(_RBX->botInfo.pNavigator, *(float *)&_XMM1, 1, &pResults);
      __asm
      {
        vmovss  xmm10, dword ptr [rsp+118h+pResults.m_Pos]
        vmovss  xmm11, dword ptr [rsp+118h+pResults.m_Pos+4]
        vmovss  xmm0, dword ptr [rsp+118h+pResults.m_Pos+8]
        vaddss  xmm12, xmm0, cs:__real@42480000
        vsubss  xmm5, xmm10, [rsp+118h+var_E8]
        vsubss  xmm9, xmm11, [rsp+118h+var_E8]
        vsubss  xmm4, xmm12, [rsp+118h+var_E8]
        vmulss  xmm1, xmm9, xmm9
        vmulss  xmm0, xmm5, xmm5
        vaddss  xmm2, xmm1, xmm0
        vmulss  xmm1, xmm4, xmm4
        vaddss  xmm2, xmm2, xmm1
        vsqrtss xmm3, xmm2, xmm2
        vcmpless xmm0, xmm3, cs:__real@80000000
        vmovss  xmm2, cs:__real@3f800000
        vblendvps xmm1, xmm3, xmm2, xmm0
        vdivss  xmm6, xmm2, xmm1
        vmulss  xmm7, xmm5, xmm6
        vmulss  xmm8, xmm4, xmm6
      }
      Nav_GetLookaheadDir(_RBX->botInfo.pNavigator, &outLookaheadDir);
      __asm
      {
        vmulss  xmm0, xmm9, xmm6
        vmulss  xmm3, xmm0, dword ptr [rsp+118h+outLookaheadDir+4]
        vmulss  xmm2, xmm7, dword ptr [rsp+118h+outLookaheadDir]
        vaddss  xmm4, xmm3, xmm2
        vmulss  xmm1, xmm8, dword ptr [rsp+118h+outLookaheadDir+8]
        vaddss  xmm2, xmm4, xmm1
        vcomiss xmm2, cs:__real@3f333333
      }
      if ( !(v36 | v37) )
      {
        v37 = _RBX == NULL;
        if ( !_RBX )
        {
          v38 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14625, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData");
          v37 = !v38;
          if ( v38 )
            __debugbreak();
        }
        __asm
        {
          vxorps  xmm0, xmm0, xmm0
          vucomiss xmm10, xmm0
        }
        if ( v37 )
        {
          __asm { vucomiss xmm11, xmm0 }
          if ( v37 )
          {
            __asm { vucomiss xmm12, xmm0 }
            if ( v37 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14633, ASSERT_TYPE_ASSERT, "( Vec3NotZero( *point ) )", (const char *)&queryFormat, "Vec3NotZero( *point )") )
              __debugbreak();
          }
        }
        if ( _RBX->botInfo.lookAtType <= BOT_LOOK_CODE_PATH || level.time >= _RBX->botInfo.lookAtTime )
        {
          _RBX->botInfo.lookAtTime = level.time + 500;
          _RBX->botInfo.lookAtType = BOT_LOOK_CODE_PATH;
          __asm
          {
            vmovss  dword ptr [rbx+6EC8h], xmm10
            vmovss  dword ptr [rbx+6ECCh], xmm11
            vmovss  dword ptr [rbx+6ED0h], xmm12
          }
        }
      }
      bfx::LinkHandle::~LinkHandle(&pResults.m_hLink);
      bfx::AreaHandle::~AreaHandle(&pResults.m_hArea);
    }
  }
  _R11 = &v50;
  __asm
  {
    vmovaps xmm6, xmmword ptr [r11-10h]
    vmovaps xmm7, xmmword ptr [r11-20h]
    vmovaps xmm8, xmmword ptr [r11-30h]
    vmovaps xmm9, xmmword ptr [r11-40h]
    vmovaps xmm10, xmmword ptr [r11-50h]
    vmovaps xmm11, xmmword ptr [r11-60h]
    vmovaps xmm12, xmmword ptr [r11-70h]
  }
}

/*
==============
Bot_UpdatePathToEnemy
==============
*/
__int64 Bot_UpdatePathToEnemy(bot_data_t *botData)
{
  const playerState_s *playerState; 
  const Weapon *ViewmodelWeapon; 
  int HasLOSToHighAerialEnemy; 
  pathnode_t *LastKnownEntNearestNode; 
  const pathnode_t *v12; 
  bool v33; 
  const pathnode_t *nearestNode; 
  const pathnode_t *v35; 
  BOOL v36; 
  const pathnode_t *v37; 
  const char *v64; 
  int v65; 
  bool v66; 
  BOOL IsHardwareEnt; 
  bool v68; 
  pathnode_t *CombatCoverNode; 
  __int16 EntityIndex; 
  const char *v72; 
  int PathToGoalInternal; 
  int v75; 
  pathnode_t *v76; 
  int v78; 
  char v81; 
  char v82; 
  int time; 
  int traversal; 
  __int64 result; 
  int CanSeeEnemy; 
  BOOL v98; 
  int ShouldRushEnemy; 
  BOOL ShouldFireOnEnemyInSight; 
  int IsWeapType; 
  BOOL v102; 
  signed __int64 v103; 
  vec3_t pos; 
  vec3_t targetPos; 
  vec3_t v106; 
  vec3_t goal; 
  vec3_t vEyePosOut; 

  _RBX = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10342, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !_RBX->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10343, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  playerState = _RBX->botInfo.playerState;
  ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(playerState);
  HasLOSToHighAerialEnemy = 0;
  v98 = Bot_Weap_Ammo(playerState, ViewmodelWeapon) > 0;
  if ( EntHandle::isDefined(&_RBX->botInfo.sentient->targetEnt) )
    _RSI = EntHandle::ent(&_RBX->botInfo.sentient->targetEnt);
  else
    _RSI = NULL;
  CanSeeEnemy = Bot_CanSeeEnemy(_RBX);
  if ( _RSI && (_RBX->botInfo.scriptFlags & 0x200000) == 0 && level.time - _RBX->botInfo.lastBadPath > 500 && !Bot_ShouldDelayPathGen(_RBX) )
  {
    __asm { vmovaps [rsp+110h+var_60], xmm10 }
    if ( !_RSI->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 10387, ASSERT_TYPE_ASSERT, "( enemy->sentient )", (const char *)&queryFormat, "enemy->sentient") )
      __debugbreak();
    v103 = _RSI->sentient - level.sentients;
    LastKnownEntNearestNode = Bot_GetLastKnownEntNearestNode(_RBX, _RSI);
    v12 = LastKnownEntNearestNode;
    if ( LastKnownEntNearestNode )
    {
      pathnode_t::GetPos(LastKnownEntNearestNode, &pos);
    }
    else
    {
      __asm
      {
        vmovss  xmm0, dword ptr [rsi+130h]
        vmovss  dword ptr [rbp+57h+pos], xmm0
        vmovss  xmm1, dword ptr [rsi+134h]
        vmovss  dword ptr [rbp+57h+pos+4], xmm1
        vmovss  xmm0, dword ptr [rsi+138h]
        vmovss  dword ptr [rbp+57h+pos+8], xmm0
      }
      v12 = Sentient_NearestNode(_RSI->sentient);
    }
    __asm
    {
      vmovaps [rsp+110h+var_30], xmm6
      vmovaps [rsp+110h+var_40], xmm7
    }
    IsWeapType = Bot_Weap_IsWeapType(playerState, ViewmodelWeapon, WEAPTYPE_BULLET);
    ShouldRushEnemy = Bot_ShouldRushEnemy(_RBX);
    v102 = Bot_EnemyPreferMelee(_RBX);
    ShouldFireOnEnemyInSight = Bot_ShouldFireOnEnemyInSight(_RBX);
    Bot_GetActiveGoal(_RBX, &goal);
    if ( !v98 || v102 )
    {
      *(float *)&_XMM0 = Bot_ActualMeleeRange(_RBX);
      __asm
      {
        vmulss  xmm1, xmm0, cs:__real@3e800000
        vmulss  xmm6, xmm1, xmm1
      }
      Bot_GetLastKnownEntPosAndTime(_RBX, _RSI, &targetPos);
      __asm
      {
        vmovss  xmm0, dword ptr [rbp+57h+goal]
        vsubss  xmm3, xmm0, dword ptr [rbp+57h+targetPos]
        vmovss  xmm0, dword ptr [rbp+57h+goal+8]
        vmovss  xmm1, dword ptr [rbp+57h+goal+4]
        vsubss  xmm4, xmm0, dword ptr [rbp+57h+targetPos+8]
        vsubss  xmm2, xmm1, dword ptr [rbp+57h+targetPos+4]
      }
    }
    else
    {
      __asm
      {
        vmovsd  xmm0, qword ptr [rbp+57h+pos]
        vmovss  xmm1, dword ptr [rbp+57h+goal+4]
        vmovss  xmm6, cs:__real@47800000
        vsubss  xmm2, xmm1, dword ptr [rbp+57h+pos+4]
        vmovsd  qword ptr [rbp+57h+targetPos], xmm0
        vmovss  xmm0, dword ptr [rbp+57h+goal]
        vsubss  xmm3, xmm0, dword ptr [rbp+57h+pos]
        vmovss  xmm0, dword ptr [rbp+57h+goal+8]
        vsubss  xmm4, xmm0, dword ptr [rbp+57h+pos+8]
      }
      targetPos.v[2] = pos.v[2];
    }
    __asm
    {
      vmulss  xmm1, xmm3, xmm3
      vmulss  xmm2, xmm2, xmm2
      vaddss  xmm3, xmm2, xmm1
      vmulss  xmm0, xmm4, xmm4
      vaddss  xmm7, xmm3, xmm0
    }
    if ( ShouldRushEnemy )
      _RBX->botInfo.flags &= ~0x2000u;
    __asm { vxorps  xmm10, xmm10, xmm10 }
    if ( !Bot_PathExists(&_RBX->botInfo) || Bot_StuckShouldReact(&_RBX->botInfo) )
      goto LABEL_49;
    v33 = (_RBX->botInfo.flags & 0x2000) == 0;
    if ( (_RBX->botInfo.flags & 0x2000) != 0 && (v33 = v12 == NULL, v12) )
    {
      nearestNode = _RBX->botInfo.activeGoal.nearestNode;
      if ( !nearestNode )
        goto LABEL_49;
      v35 = v12;
    }
    else
    {
      __asm { vcomiss xmm7, xmm6 }
      v36 = !v33;
      if ( v33 )
      {
        if ( !v12 || (v37 = _RBX->botInfo.activeGoal.nearestNode) != NULL && Path_NodesVisibleNoPeek(v37, v12) )
        {
LABEL_43:
          if ( !_RBX->botInfo.botSentientInfo[v103].lastKnownFacingTime || (_RBX->botInfo.flags & 0x10000) == 0 )
          {
LABEL_47:
            __asm { vxorps  xmm1, xmm1, xmm1; goalRadius }
            if ( !Bot_IsAtPathEnd(_RBX, *(float *)&_XMM1) || ShouldFireOnEnemyInSight )
              goto LABEL_93;
LABEL_49:
            _RBX->botInfo.flags &= ~0x2000u;
            v64 = "pos";
            v65 = 0;
            v66 = !ShouldFireOnEnemyInSight;
            if ( ShouldFireOnEnemyInSight )
            {
              v66 = IsWeapType == 0;
              if ( IsWeapType )
              {
                v66 = !v98;
                if ( v98 )
                {
                  v66 = ShouldRushEnemy == 0;
                  if ( !ShouldRushEnemy )
                  {
                    v66 = !v102;
                    if ( !v102 )
                    {
                      v66 = v12 == NULL;
                      if ( v12 )
                      {
                        IsHardwareEnt = Bot_IsHardwareEnt(_RSI);
                        v66 = !IsHardwareEnt;
                        if ( !IsHardwareEnt )
                        {
                          v68 = SV_BotRequirePathnodes(_RBX);
                          v66 = !v68;
                          if ( v68 )
                          {
                            CombatCoverNode = Bot_GetCombatCoverNode(_RBX, v12);
                            v66 = CombatCoverNode == NULL;
                            if ( CombatCoverNode )
                            {
                              v64 = "cover";
                              pathnode_t::GetPos(CombatCoverNode, &targetPos);
                              v66 = 0;
                              _RBX->botInfo.flags |= 0x2000u;
                              v65 = 1;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            __asm
            {
              vmovss  xmm0, cs:__real@40400000
              vcomiss xmm0, dword ptr [rbx+802Ch]
            }
            if ( v66 && !Bot_ShouldRushEnemy(_RBX) )
              _RBX->botInfo.flags |= 0x10000u;
            EntityIndex = G_GetEntityIndex(_RSI);
            v72 = j_va("enemy_%s %i", v64, (unsigned int)EntityIndex);
            __asm { vxorps  xmm2, xmm2, xmm2; goalRadius }
            PathToGoalInternal = Bot_GetPathToGoalInternal(_RBX, &targetPos, *(float *)&_XMM2, v72);
            v75 = PathToGoalInternal;
            if ( v65 )
            {
              if ( !PathToGoalInternal )
              {
LABEL_68:
                HasLOSToHighAerialEnemy = 1;
LABEL_69:
                v78 = Bot_PathExists(&_RBX->botInfo);
                if ( v75 )
                {
                  if ( !HasLOSToHighAerialEnemy && !CanSeeEnemy )
                  {
                    if ( v78 )
                    {
                      __asm
                      {
                        vmovss  xmm6, cs:__real@41a00000
                        vmovaps xmm1, xmm6
                      }
                      if ( !((unsigned __int8 (__fastcall *)(AINavigator *))_RBX->botInfo.pNavigator->HasTraversalWithin)(_RBX->botInfo.pNavigator) )
                      {
                        *(double *)&_XMM0 = Bot_GetLookAheadDist(&_RBX->botInfo);
                        __asm { vcomiss xmm0, xmm6 }
                        if ( v81 )
                          HasLOSToHighAerialEnemy = 1;
                      }
                    }
                  }
                }
                if ( Bot_IsHighAerialSentient(_RSI->sentient) )
                  HasLOSToHighAerialEnemy = Bot_HasLOSToHighAerialEnemy(_RBX, _RSI);
                if ( HasLOSToHighAerialEnemy )
                {
                  if ( _RSI->sentient )
                  {
                    if ( !Bot_ShouldForgetEnemy(_RBX, _RSI) )
                    {
                      Bot_GetLastKnownEntPosAndTime(_RBX, _RSI, &v106);
                      Sentient_GetEyePosition(_RSI->sentient, &vEyePosOut);
                      __asm
                      {
                        vmovss  xmm0, dword ptr [rbp+57h+vEyePosOut+8]
                        vsubss  xmm1, xmm0, dword ptr [rsi+138h]
                        vmovss  xmm0, dword ptr [rbp+57h+var_A0]
                        vucomiss xmm0, xmm10
                        vaddss  xmm2, xmm1, dword ptr [rbp+57h+var_A0+8]
                        vmovss  dword ptr [rbp+57h+var_A0+8], xmm2
                      }
                      if ( v82 )
                      {
                        __asm
                        {
                          vmovss  xmm0, dword ptr [rbp+57h+var_A0+4]
                          vucomiss xmm0, xmm10
                        }
                        if ( v82 )
                        {
                          __asm { vucomiss xmm2, xmm10 }
                          if ( v82 )
                          {
                            if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14633, ASSERT_TYPE_ASSERT, "( Vec3NotZero( *point ) )", (const char *)&queryFormat, "Vec3NotZero( *point )") )
                              __debugbreak();
                          }
                        }
                      }
                      time = level.time;
                      if ( _RBX->botInfo.lookAtType <= BOT_LOOK_CODE_SEEK || level.time >= _RBX->botInfo.lookAtTime )
                      {
                        __asm
                        {
                          vmovss  xmm0, dword ptr [rbp+57h+var_A0]
                          vmovss  xmm1, dword ptr [rbp+57h+var_A0+4]
                        }
                        _RBX->botInfo.lookAtType = BOT_LOOK_CODE_SEEK;
                        _RBX->botInfo.lookAtTime = time + 1500;
                        __asm
                        {
                          vmovss  dword ptr [rbx+6EC8h], xmm0
                          vmovss  xmm0, dword ptr [rbp+57h+var_A0+8]
                          vmovss  dword ptr [rbx+6ED0h], xmm0
                          vmovss  dword ptr [rbx+6ECCh], xmm1
                        }
                        traversal = _RBX->botInfo.traversal;
                        if ( (traversal & 1) != 0 )
                          _RBX->botInfo.traversal = traversal & 0xFFFFFFFE;
                      }
                    }
                  }
                  else
                  {
                    Bot_LookAtPoint(_RBX, &_RSI->r.currentOrigin, 1500, BOT_LOOK_CODE_SEEK);
                  }
                }
                if ( !v75 )
                {
                  if ( !CanSeeEnemy )
                    Bot_StopPursuingEnemy(_RBX);
                  _RBX->botInfo.flags |= 0x400000u;
                  result = 0i64;
                  goto LABEL_94;
                }
                GScr_Notify(_RBX->botInfo.ent, scr_const.path_enemy, 0);
                _RBX->botInfo.botSentientInfo[v103].lastPathFacingYaw = _RBX->botInfo.botSentientInfo[v103].lastKnownFacingYaw;
LABEL_93:
                result = 1i64;
LABEL_94:
                __asm
                {
                  vmovaps xmm7, [rsp+110h+var_40]
                  vmovaps xmm6, [rsp+110h+var_30]
                  vmovaps xmm10, [rsp+110h+var_60]
                }
                return result;
              }
              v76 = _RBX->botInfo.activeGoal.nearestNode;
              if ( v76 )
                Bot_ForceClaimNode(&_RBX->botInfo, v76);
            }
            if ( v75 )
            {
              __asm { vmovss  xmm1, cs:__real@43960000; goalRadius }
              if ( Bot_PointInGoal(_RBX, *(float *)&_XMM1, &_RSI->r.currentOrigin) )
                goto LABEL_69;
            }
            goto LABEL_68;
          }
          __asm
          {
            vmovss  xmm6, cs:__real@3f000000
            vmovss  xmm5, cs:__real@43b40000
          }
          _EAX = _RBX->botInfo.botSentientInfo[v103].lastPathFacingYaw;
          v36 = 1;
          __asm { vmovd   xmm0, eax }
          _EAX = _RBX->botInfo.botSentientInfo[v103].lastKnownFacingYaw;
          __asm
          {
            vcvtdq2ps xmm0, xmm0
            vmulss  xmm7, xmm0, cs:__real@3b360b61
            vmovaps [rsp+110h+var_50], xmm9
            vxorps  xmm9, xmm9, xmm9
            vmovd   xmm0, eax
            vcvtdq2ps xmm0, xmm0
            vmulss  xmm3, xmm0, cs:__real@3b360b61
            vaddss  xmm1, xmm3, xmm6
            vroundss xmm2, xmm9, xmm1, 1
            vsubss  xmm0, xmm3, xmm2
            vmulss  xmm4, xmm0, xmm5
            vaddss  xmm1, xmm7, xmm6
            vroundss xmm2, xmm9, xmm1, 1
            vsubss  xmm0, xmm7, xmm2
            vmulss  xmm1, xmm0, xmm5
            vsubss  xmm2, xmm4, xmm1
            vmulss  xmm4, xmm2, cs:__real@3b360b61
            vaddss  xmm3, xmm4, xmm6
            vroundss xmm2, xmm9, xmm3, 1
            vmovaps xmm9, [rsp+110h+var_50]
            vsubss  xmm0, xmm4, xmm2
            vmulss  xmm1, xmm0, xmm5
            vandps  xmm1, xmm1, cs:__xmm@7fffffff7fffffff7fffffff7fffffff
            vcomiss xmm1, cs:__real@42b40000
          }
LABEL_46:
          if ( v36 )
            goto LABEL_49;
          goto LABEL_47;
        }
        v36 = 1;
      }
      if ( !Bot_IsHighAerialSentient(_RSI->sentient) || !v12 )
        goto LABEL_46;
      v35 = _RBX->botInfo.activeGoal.nearestNode;
      if ( !v35 )
        goto LABEL_49;
      nearestNode = v12;
    }
    if ( !Path_NodesVisibleNoPeek(nearestNode, v35) )
      goto LABEL_49;
    goto LABEL_43;
  }
  return 0i64;
}

/*
==============
Bot_UpdatePathingLook
==============
*/
__int64 Bot_UpdatePathingLook(bot_data_t *botData, vec3_t *viewAnglesOut)
{
  vec3_t outLookaheadDir; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11817, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( botData == (bot_data_t *)-8i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13725, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  if ( !Bot_NavPathExists(&botData->botInfo) )
    return 0i64;
  __asm { vxorps  xmm1, xmm1, xmm1; goalRadius }
  if ( Bot_IsAtPathEnd(botData, *(float *)&_XMM1) )
    return 0i64;
  Nav_GetLookaheadDir(botData->botInfo.pNavigator, &outLookaheadDir);
  vectoangles(&outLookaheadDir, viewAnglesOut);
  return 1i64;
}

/*
==============
Bot_UpdatePitch
==============
*/

float __fastcall Bot_UpdatePitch(bot_data_t *botData, double currentPitch, double targetPitch, int forceSlow)
{
  int IsThirdPersonRemoteVehicle; 

  __asm
  {
    vmovaps [rsp+78h+var_18], xmm6
    vmovaps [rsp+78h+var_28], xmm7
  }
  _RBX = botData;
  __asm
  {
    vmovaps [rsp+78h+var_38], xmm8
    vmovaps [rsp+78h+var_48], xmm9
    vmovaps xmm8, xmm2
    vmovaps xmm7, xmm1
  }
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18017, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  __asm { vmovss  xmm6, dword ptr [rbx+800Ch] }
  if ( forceSlow )
    __asm { vmovss  xmm6, dword ptr [rbx+8010h] }
  if ( !level.frameDuration && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_level_locals.h", 349, ASSERT_TYPE_ASSERT, "(level.frameDuration)", "%s\n\tAccessing frame duration before it's been set", "level.frameDuration") )
    __debugbreak();
  __asm
  {
    vxorps  xmm9, xmm9, xmm9
    vcvtsi2ss xmm9, xmm9, cs:?level@@3Ulevel_locals_t@@A.frameDuration; level_locals_t level
    vmulss  xmm3, xmm9, cs:__real@3a83126f; deltaTime
    vmovaps xmm2, xmm6; rate
    vmovaps xmm1, xmm7; cur
    vmovaps xmm0, xmm8; tgt
  }
  *(double *)&_XMM0 = DiffTrackAngle(*(float *)&_XMM0, *(float *)&_XMM1, *(float *)&_XMM2, *(float *)&_XMM3);
  __asm { vmovaps xmm8, xmm0 }
  if ( (unsigned int)Bot_IsRemoteEyesVehicle(_RBX) )
  {
    _RDI = Bot_GetRemoteEyesVehicleDef(_RBX);
    IsThirdPersonRemoteVehicle = Bot_IsThirdPersonRemoteVehicle(_RBX);
    if ( IsThirdPersonRemoteVehicle )
      __asm { vmovss  xmm0, dword ptr [rdi+0C5Ch] }
    else
      __asm { vmovss  xmm0, dword ptr [rdi+0C28h] }
    __asm
    {
      vmulss  xmm0, xmm9, xmm0
      vmulss  xmm6, xmm0, cs:__real@3a83126f
      vxorps  xmm0, xmm0, xmm0
      vsubss  xmm1, xmm8, xmm7
      vmulss  xmm5, xmm1, cs:__real@3b360b61
      vaddss  xmm2, xmm5, cs:__real@3f000000
      vmovss  xmm3, xmm0, xmm2
      vxorps  xmm1, xmm1, xmm1
      vroundss xmm4, xmm1, xmm3, 1
      vsubss  xmm0, xmm5, xmm4
      vmulss  xmm3, xmm0, cs:__real@43b40000
      vxorps  xmm0, xmm0, xmm0
      vucomiss xmm6, xmm0
    }
    if ( IsThirdPersonRemoteVehicle )
    {
      __asm
      {
        vxorps  xmm1, xmm6, cs:__xmm@80000000800000008000000080000000; min
        vmovaps xmm2, xmm6; max
        vmovaps xmm0, xmm3; val
      }
      *(double *)&_XMM0 = I_fclamp(*(float *)&_XMM0, *(float *)&_XMM1, *(float *)&_XMM2);
    }
    __asm
    {
      vaddss  xmm6, xmm0, xmm7
      vmovaps xmm0, xmm6; angle
    }
    if ( (unsigned int)Bot_IsThirdPersonRemoteVehicle(_RBX) )
    {
      __asm { vmovss  xmm1, dword ptr [rdi+0C60h]; clamp }
      *(double *)&_XMM0 = BG_Vehicle_ClampCameraAngle(*(float *)&_XMM0, *(float *)&_XMM1);
    }
  }
  else
  {
    __asm { vmovaps xmm0, xmm8 }
  }
  __asm
  {
    vmovaps xmm6, [rsp+78h+var_18]
    vmovaps xmm7, [rsp+78h+var_28]
    vmovaps xmm8, [rsp+78h+var_38]
    vmovaps xmm9, [rsp+78h+var_48]
  }
  return *(float *)&_XMM0;
}

/*
==============
Bot_UpdateRadar
==============
*/
void Bot_UpdateRadar(bot_data_t *botData, double a2)
{
  playerState_s *playerState; 
  $3396140AF3A78F7FCD1D73807E505015 *v5; 
  const dvar_t *v8; 
  const dvar_t *v9; 

  __asm { vmovaps [rsp+58h+var_18], xmm6 }
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6282, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6285, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  v5 = &botData->8;
  if ( !v5->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6292, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  _RDI = DCONST_DVARFLT_bg_compassPortableRadarRadius;
  if ( !DCONST_DVARFLT_bg_compassPortableRadarRadius && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 720, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bg_compassPortableRadarRadius") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(_RDI);
  __asm { vmovss  xmm6, dword ptr [rdi+28h] }
  v8 = DCONST_DVARINT_bg_compassPortableRadarSweepTime;
  if ( !DCONST_DVARINT_bg_compassPortableRadarSweepTime && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bg_compassPortableRadarSweepTime") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v8);
  if ( level.time > v5->botInfo.lastRadarPing + v8->current.integer )
  {
    if ( BG_IsEMPJammed(playerState) || Bot_GetRadarIsJammed(&v5->botInfo, a2) )
      goto LABEL_27;
    Bot_PortableRadarPing(&v5->botInfo);
    v9 = DVARBOOL_bg_compassShowEnemies;
    if ( !DVARBOOL_bg_compassShowEnemies && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 692, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bg_compassShowEnemies") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v9);
    if ( v9->current.enabled )
    {
      __asm { vmovss  xmm2, cs:__real@461c3c00 }
    }
    else
    {
      if ( !playerState->radarEnabled )
      {
LABEL_27:
        v5->botInfo.lastRadarPing = level.time + G_irand(50, 200);
        goto LABEL_28;
      }
      __asm { vmovaps xmm2, xmm6; radius }
    }
    Bot_AIKnownEnemiesRadial(&v5->botInfo, &v5->botInfo.ent->r.currentOrigin, *(double *)&_XMM2, 0x1Au);
    goto LABEL_27;
  }
LABEL_28:
  __asm { vmovaps xmm6, [rsp+58h+var_18] }
}

/*
==============
Bot_UpdateReload
==============
*/
void Bot_UpdateReload(bot_data_t *botData, usercmd_s *cmd)
{
  playerState_s *playerState; 
  GWeaponMap *Instance; 
  const Weapon *ViewmodelWeapon; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9306, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( botData == (bot_data_t *)-8i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9308, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  playerState = botData->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9310, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  if ( !Bot_Weap_UpdateReload(botData, cmd) )
  {
    Instance = GWeaponMap::GetInstance();
    ViewmodelWeapon = BG_GetViewmodelWeapon(Instance, playerState);
    if ( BG_HasUnderbarrelWeapon(ViewmodelWeapon) )
    {
      GameModeFlagContainer<enum PWeaponFlagsCommon,enum PWeaponFlagsSP,enum PWeaponFlagsMP,64>::SetFlagInternal(&playerState->weapCommon.weapFlags, ACTIVE, 0x11u);
      Bot_Weap_UpdateReload(botData, cmd);
      GameModeFlagContainer<enum PWeaponFlagsCommon,enum PWeaponFlagsSP,enum PWeaponFlagsMP,64>::ClearFlagInternal(&playerState->weapCommon.weapFlags, ACTIVE, 0x11u);
    }
  }
}

/*
==============
Bot_UpdateRiotShieldDesired
==============
*/
void Bot_UpdateRiotShieldDesired(bot_data_t *botData)
{
  GWeaponMap *Instance; 
  const playerState_s *playerState; 
  BgWeaponMap *v6; 
  int v7; 
  const gentity_s *v9; 
  const playerState_s *EntityPlayerStateConst; 
  int v11; 
  __int64 v12; 
  const Weapon *Weapon; 
  const dvar_t *v14; 
  int v15; 
  const Weapon *Launcher; 
  const playerState_s *v17; 
  const Weapon *RangedWeapon; 
  char v19; 
  char v20; 
  __int64 v23; 
  __int64 v24; 
  int v27; 
  gentity_s *ent; 
  playerState_s *ps; 

  __asm { vmovaps [rsp+98h+var_58], xmm6 }
  _RBP = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18786, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  Instance = GWeaponMap::GetInstance();
  playerState = _RBP->botInfo.playerState;
  v6 = Instance;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18790, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  v7 = 0;
  v27 = 0;
  __asm { vxorps  xmm6, xmm6, xmm6 }
  if ( !Bot_Weap_PlayerHasRiotShield(playerState) )
    goto LABEL_61;
  if ( !Bot_CanSeeAndCanFireOnEnemy(_RBP) )
  {
    if ( (_RBP->botInfo.scriptFlags & 0x400) == 0 )
      goto LABEL_61;
    goto LABEL_60;
  }
  if ( EntHandle::isDefined(&_RBP->botInfo.sentient->targetEnt) )
  {
    ent = EntHandle::ent(&_RBP->botInfo.sentient->targetEnt);
    v9 = ent;
    if ( ent )
      goto LABEL_15;
  }
  else
  {
    v9 = NULL;
    ent = NULL;
  }
  if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18803, ASSERT_TYPE_ASSERT, "( enemy )", (const char *)&queryFormat, "enemy") )
    __debugbreak();
LABEL_15:
  EntityPlayerStateConst = G_GetEntityPlayerStateConst(v9);
  ps = (playerState_s *)EntityPlayerStateConst;
  if ( EntityPlayerStateConst && Bot_Weap_PlayerHasRiotShield(EntityPlayerStateConst) && SV_BotIsBotEnt(v9) )
    goto LABEL_61;
  v11 = 0;
  v12 = 0i64;
  do
  {
    if ( !v6 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\bgame\\bg_weapons.h", 839, ASSERT_TYPE_ASSERT, "(weaponMap)", (const char *)&queryFormat, "weaponMap") )
      __debugbreak();
    if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\bgame\\bg_weapons.h", 840, ASSERT_TYPE_ASSERT, "(ps)", (const char *)&queryFormat, "ps") )
      __debugbreak();
    if ( (unsigned int)v11 >= 0xF )
    {
      LODWORD(v24) = 15;
      LODWORD(v23) = v11;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\bgame\\bg_weapons.h", 841, ASSERT_TYPE_ASSERT, "(unsigned)( equippedIndex ) < (unsigned)( 15 )", "equippedIndex doesn't index MAX_EQUIPPED_WEAPONS\n\t%i not in [0, %i)", v23, v24) )
        __debugbreak();
    }
    Weapon = BgWeaponMap::GetWeapon(v6, playerState->weaponsEquipped[v12]);
    if ( !Bot_Weap_IsNone(Weapon) )
    {
      if ( !v6 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\bgame\\bg_weapons.h", 1105, ASSERT_TYPE_ASSERT, "(weaponMap)", (const char *)&queryFormat, "weaponMap") )
        __debugbreak();
      if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\bgame\\bg_weapons.h", 1106, ASSERT_TYPE_ASSERT, "(ps)", (const char *)&queryFormat, "ps") )
        __debugbreak();
      v14 = DVARBOOL_bg_giveAll;
      if ( !DVARBOOL_bg_giveAll || (Dvar_CheckFrontendServerThread(DVARBOOL_bg_giveAll), !v14->current.enabled) )
      {
        if ( !BG_GetEquippedWeaponStateConst(v6, playerState, Weapon) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18816, ASSERT_TYPE_ASSERT, "( BG_PlayerHasWeapon( weaponMap, ps, weaponInInventory ) )", (const char *)&queryFormat, "BG_PlayerHasWeapon( weaponMap, ps, weaponInInventory )") )
          __debugbreak();
      }
      if ( Bot_Weap_IsRanged(playerState, Weapon) && (!Bot_Weap_WeaponUsesAmmo(playerState, Weapon) || Bot_Weap_Ammo(playerState, Weapon)) )
      {
        v7 = 1;
        v27 = 1;
        *(double *)&_XMM0 = Bot_Weap_GetMaxRange(playerState, Weapon);
        __asm { vmaxss  xmm6, xmm0, xmm6 }
      }
      else
      {
        v7 = v27;
      }
    }
    ++v11;
    ++v12;
  }
  while ( v11 < 15 );
  v15 = 0;
  if ( ps )
    LOBYTE(v15) = (unsigned int)(Bot_Weap_GetWeaponStateForViewWeapon(ps) - 18) <= 3;
  _RBP = botData;
  if ( !Bot_EnemyFacesBot(botData) || v15 )
  {
    if ( v7 )
      goto LABEL_61;
LABEL_60:
    _RBP->botInfo.weaponRiotShieldTime = level.time;
    goto LABEL_61;
  }
  if ( !v7 )
    goto LABEL_60;
  if ( botData->botInfo.ent->health <= 100 )
    goto LABEL_60;
  Launcher = Bot_Weap_EntityGetLauncher(ent);
  if ( !Bot_Weap_IsNone(Launcher) )
    goto LABEL_60;
  v17 = G_GetEntityPlayerStateConst(ent);
  if ( v17 )
  {
    RangedWeapon = Bot_Weap_EntityGetRangedWeapon(ent);
    *(double *)&_XMM0 = Bot_Weap_GetMaxRange(v17, RangedWeapon);
    __asm
    {
      vmovss  xmm1, dword ptr [rbp+2394h]
      vcomiss xmm1, xmm0
    }
    if ( v19 | v20 )
    {
      __asm { vcomiss xmm1, xmm6 }
      if ( !(v19 | v20) )
        goto LABEL_60;
    }
  }
LABEL_61:
  __asm { vmovaps xmm6, [rsp+98h+var_58] }
}

/*
==============
Bot_UpdateScreenTargets
==============
*/
void Bot_UpdateScreenTargets(bot_data_t *botData)
{
  int screenTargetCount; 
  int v3; 
  int v4; 
  AimScreenTarget *screenTargets; 
  int v9; 
  sentient_s *i; 
  gentity_s *ent; 
  __int16 EntityIndex; 
  unsigned int number; 
  const SvClientMP *CommonClient; 
  BOOL IsClientConnected; 
  bitarray_base<bitarray<224> > *AllTeamFlags; 
  unsigned int v22; 
  const SvClientMP *v23; 
  int v36; 
  int v37; 
  __int64 v38; 
  bool v39; 
  __m256i v50; 
  _BYTE v51[32]; 
  __int64 v52; 
  _BYTE v53[64]; 
  __int64 v54; 
  bitarray<224> iTeamFlags; 

  _RBX = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8801, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  screenTargetCount = _RBX->botInfo.aaSharedGlob.screenTargetCount;
  v3 = 0;
  v4 = 2047;
  *(_OWORD *)v50.m256i_i8 = 0x7FFui64;
  *(_OWORD *)&v50.m256i_u64[2] = 0ui64;
  memset(v51, 0, sizeof(v51));
  v52 = 0i64;
  if ( screenTargetCount <= 0 )
  {
LABEL_8:
    __asm
    {
      vmovups ymm2, [rsp+120h+var_D0]
      vmovsd  xmm1, [rsp+120h+var_B0]
    }
  }
  else
  {
    screenTargets = _RBX->botInfo.aaSharedGlob.screenTargets;
    while ( screenTargets->entIndex != _RBX->botInfo.playerState->meleeChargeEnt )
    {
      ++v3;
      ++screenTargets;
      if ( v3 >= screenTargetCount )
        goto LABEL_8;
    }
    _RCX = 9i64 * v3;
    __asm
    {
      vmovups ymm0, ymmword ptr [rbx+rcx*8+2470h]
      vmovups ymm2, ymmword ptr [rbx+rcx*8+2490h]
      vmovsd  xmm1, qword ptr [rbx+rcx*8+24B0h]
      vmovups [rsp+120h+var_F0], ymm0
    }
    v4 = v50.m256i_i32[0];
  }
  if ( v4 == 2047 )
  {
    v9 = 0;
  }
  else
  {
    __asm
    {
      vmovups ymm0, [rsp+120h+var_F0]
      vmovups ymmword ptr [rbx+2470h], ymm0
      vmovups ymmword ptr [rbx+2490h], ymm2
      vmovsd  qword ptr [rbx+24B0h], xmm1
    }
    v9 = 1;
  }
  _RBX->botInfo.aaSharedGlob.screenTargetCount = v9;
  if ( !_RBX->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8835, ASSERT_TYPE_ASSERT, "( botInfo->sentient )", (const char *)&queryFormat, "botInfo->sentient") )
    __debugbreak();
  if ( !_RBX->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8836, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  if ( Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) )
    _RAX = Com_TeamsSP_GetAllTeamFlags();
  else
    _RAX = Com_TeamsMP_GetAllTeamFlags();
  __asm
  {
    vmovups xmm0, xmmword ptr [rax]
    vmovups xmmword ptr [rbp+20h+iTeamFlags.array], xmm0
    vmovsd  xmm1, qword ptr [rax+10h]
    vmovsd  qword ptr [rbp+20h+iTeamFlags.array+10h], xmm1
  }
  iTeamFlags.array[6] = _RAX->array[6];
  for ( i = Sentient_FirstSentient(&iTeamFlags); i; i = Sentient_NextSentient(i, &iTeamFlags) )
  {
    if ( !i->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8840, ASSERT_TYPE_ASSERT, "( enemySentient->ent )", (const char *)&queryFormat, "enemySentient->ent") )
      __debugbreak();
    ent = i->ent;
    if ( !i->ent )
      continue;
    EntityIndex = G_GetEntityIndex(i->ent);
    if ( !G_IsEntityInUse(EntityIndex) || !ent->sentient )
      continue;
    if ( ent->client )
    {
      number = ent->s.number;
      if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
        __debugbreak();
      CommonClient = (const SvClientMP *)SvClient::GetCommonClient(number);
      IsClientConnected = Bot_IsClientConnected(CommonClient);
    }
    else
    {
      if ( !ent->agent )
        goto LABEL_37;
      IsClientConnected = ent->s.eType == ET_AGENT;
    }
    if ( IsClientConnected )
    {
LABEL_37:
      if ( ent->s.eType != ET_INVISIBLE )
      {
        AllTeamFlags = (bitarray_base<bitarray<224> > *)Com_TeamsMP_GetAllTeamFlags();
        if ( bitarray_base<bitarray<224>>::testBit(AllTeamFlags, ent->sentient->eTeam) )
        {
          if ( !ent->client )
            goto LABEL_61;
          v22 = ent->s.number;
          if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
            __debugbreak();
          v23 = (const SvClientMP *)SvClient::GetCommonClient(v22);
          if ( Bot_IsClientActive(v23) )
          {
LABEL_61:
            if ( !AI_IsAlliedSentient(_RBX->botInfo.sentient, i) && i->ent->s.number != v50.m256i_i32[0] && Bot_RecentSeeSentient(_RBX, i, 1000) && Bot_EntityOnScreenForMelee(_RBX, i->ent) )
            {
              if ( _RBX->botInfo.aaSharedGlob.screenTargetCount == 32 )
                _RBX->botInfo.aaSharedGlob.screenTargetCount = 31;
              memset(&v53[16], 0, 48);
              v54 = 0i64;
              *(_OWORD *)v53 = (unsigned int)i->ent->s.number;
              _RCX = _RBX->botInfo.ent;
              __asm
              {
                vmovss  xmm0, dword ptr [rcx+130h]
                vsubss  xmm3, xmm0, dword ptr [rax+130h]
                vmovss  xmm1, dword ptr [rcx+134h]
                vmovss  xmm0, dword ptr [rcx+138h]
                vsubss  xmm2, xmm1, dword ptr [rax+134h]
                vsubss  xmm4, xmm0, dword ptr [rax+138h]
                vmulss  xmm2, xmm2, xmm2
                vmulss  xmm1, xmm3, xmm3
                vmulss  xmm0, xmm4, xmm4
                vaddss  xmm3, xmm2, xmm1
                vaddss  xmm2, xmm3, xmm0
              }
              v53[60] = 3;
              __asm { vmovss  dword ptr [rbp+20h+var_80+14h], xmm2 }
              Sentient_GetHeadPosition(i, (vec3_t *)&v53[20]);
              v36 = _RBX->botInfo.aaSharedGlob.screenTargetCount;
              v37 = 0;
              v38 = 0i64;
              v39 = 0;
              if ( v36 > 0 )
              {
                __asm { vmovss  xmm0, dword ptr [rbp+20h+var_80+14h] }
                _RAX = (char *)&_RBX->scriptedAgentInfo + 9372;
                do
                {
                  __asm { vcomiss xmm0, dword ptr [rax] }
                  if ( v39 )
                    break;
                  ++v37;
                  ++v38;
                  _RAX += 72;
                  v39 = v37 < (unsigned int)v36;
                }
                while ( v37 < v36 );
              }
              if ( v37 < v36 )
              {
                _RCX = (__int64)&_RBX->scriptedAgentInfo + 72 * v38 + 9392;
                do
                {
                  __asm
                  {
                    vmovups ymm0, ymmword ptr [rcx-48h]
                    vmovups ymm1, ymmword ptr [rcx-28h]
                    vmovups ymmword ptr [rcx], ymm0
                    vmovsd  xmm0, qword ptr [rcx-8]
                    vmovups ymmword ptr [rcx+20h], ymm1
                    vmovsd  qword ptr [rcx+40h], xmm0
                  }
                  ++v37;
                  _RCX += 72i64;
                }
                while ( v37 < _RBX->botInfo.aaSharedGlob.screenTargetCount );
              }
              __asm
              {
                vmovups ymm0, [rbp+20h+var_A0]
                vmovups ymm1, [rbp+20h+var_80]
              }
              _RAX = 9 * v38;
              __asm
              {
                vmovups ymmword ptr [rbx+rax*8+2470h], ymm0
                vmovsd  xmm0, [rbp+20h+var_60]
                vmovups ymmword ptr [rbx+rax*8+2490h], ymm1
                vmovsd  qword ptr [rbx+rax*8+24B0h], xmm0
              }
              ++_RBX->botInfo.aaSharedGlob.screenTargetCount;
            }
          }
        }
      }
    }
  }
}

/*
==============
Bot_UpdateScriptGoal
==============
*/

_BOOL8 __fastcall Bot_UpdateScriptGoal(bot_data_t *botData, double _XMM1_8)
{
  pathnode_t *nearestNode; 
  int v6; 
  gentity_s *ent; 
  pathnode_t *v9; 
  vec3_t angles; 
  vec3_t v23; 
  tmat33_t<vec3_t> axis; 
  tmat33_t<vec3_t> v25; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24173, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  _RDI = &botData->8;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23600, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( botData->botInfo.scriptGoal.type == BOT_SCR_GOAL_NONE || Bot_ShouldDelayPathGen(botData) )
    return 0i64;
  nearestNode = botData->botInfo.scriptGoal.nearestNode;
  if ( nearestNode && nearestNode->dynamic.bInactive )
  {
    if ( Bot_ActiveGoalIsScriptGoal(botData) )
      Bot_BadPath(_RDI->botInfo.ent);
    Bot_ClearScriptGoal(botData);
    return 0i64;
  }
  v6 = Bot_AtScriptGoal(botData);
  ent = _RDI->botInfo.ent;
  if ( v6 )
  {
    if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23990, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
      __debugbreak();
    if ( (LOBYTE(botData->scriptedAgentInfo.blackboard.m_ShootParams.m_Pos.v[0]) & 4) != 0 )
    {
      __asm { vmovss  xmm0, dword ptr [rdi+220h] }
      _RAX = _RDI->botInfo.ent;
      __asm
      {
        vxorps  xmm1, xmm1, xmm1
        vmovss  dword ptr [rsp+0B8h+angles], xmm1
        vmovss  dword ptr [rsp+0B8h+angles+4], xmm0
        vmovss  dword ptr [rsp+0B8h+angles+8], xmm1
        vmovss  xmm0, dword ptr [rax+140h]
        vmovss  dword ptr [rsp+0B8h+var_78+4], xmm0
        vmovss  dword ptr [rsp+0B8h+var_78], xmm1
        vmovss  dword ptr [rsp+0B8h+var_78+8], xmm1
      }
      AnglesToAxis(&angles, &axis);
      AnglesToAxis(&v23, &v25);
      __asm
      {
        vmovss  xmm0, dword ptr [rsp+0B8h+var_40]
        vmovss  xmm1, dword ptr [rsp+0B8h+axis+4]
        vmulss  xmm2, xmm1, dword ptr [rsp+0B8h+var_40+4]
        vmulss  xmm3, xmm0, dword ptr [rsp+0B8h+axis]
        vmovss  xmm0, dword ptr [rsp+0B8h+axis+8]
        vmulss  xmm1, xmm0, dword ptr [rsp+0B8h+var_40+8]
        vaddss  xmm4, xmm3, xmm2
        vaddss  xmm2, xmm4, xmm1
        vcomiss xmm2, cs:__real@3f733333
      }
    }
    else if ( !botData->botInfo.scriptGoalNotified )
    {
      GScr_Notify(_RDI->botInfo.ent, scr_const.goal, 0);
      botData->botInfo.scriptGoalNotified = level.time;
    }
  }
  else
  {
    if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6930, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
      __debugbreak();
    if ( !botData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6931, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState )", (const char *)&queryFormat, "botData->botInfo.playerState") )
      __debugbreak();
    if ( botData->botInfo.scriptGoal.type )
    {
      if ( botData == (bot_data_t *)-8i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13725, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
        __debugbreak();
      if ( Bot_NavPathExists(&botData->botInfo) )
      {
        if ( Bot_ActiveGoalIsScriptGoal(botData) )
        {
          if ( botData->botInfo.scriptGoal.type == BOT_SCR_GOAL_OBJECTIVE )
          {
            __asm { vmovss  xmm1, cs:__real@437a0000; goalRadius }
            if ( Bot_IsAtPathEnd(botData, *(float *)&_XMM1) )
            {
              if ( Bot_CanSlide(botData) )
              {
                v9 = botData->botInfo.scriptGoal.nearestNode;
                if ( v9 )
                {
                  if ( Bot_CanSeeNode(botData, v9) && Bot_IsFacingPosition(botData, &botData->botInfo.scriptGoal.pos) )
                    botData->botInfo.slideDesiredTime = level.time + 1000;
                }
              }
            }
          }
        }
      }
    }
  }
  return !Bot_ShouldDelayScriptGoal(botData) && (Bot_PathExists(&botData->botInfo) && Bot_ActiveGoalIsScriptGoal(botData) || Bot_ResumeScriptGoal(botData));
}

/*
==============
Bot_UpdateScriptGoalLook
==============
*/
__int64 Bot_UpdateScriptGoalLook(bot_data_t *botData, vec3_t *viewAnglesOut)
{
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11881, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( (LOBYTE(botData->scriptedAgentInfo.blackboard.m_ShootParams.m_Pos.v[0]) & 4) == 0 || !Bot_AtScriptGoal(botData) )
    return 0i64;
  viewAnglesOut->v[1] = botData->botInfo.scriptGoal.yaw;
  Bot_ApplyTwitchVectors(&botData->botInfo, NULL, viewAnglesOut);
  return 1i64;
}

/*
==============
Bot_UpdateScriptedButtons
==============
*/
void Bot_UpdateScriptedButtons(bot_data_t *botData, usercmd_s *cmd)
{
  int scriptPress; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22746, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22751, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  if ( (*((_BYTE *)&botData->scriptedAgentInfo + 9020) & 1) != 0 )
  {
    cmd->buttons |= 8ui64;
    if ( botData->botInfo.scriptUseButtonEndTime <= level.time )
      botData->botInfo.scriptPress &= ~1u;
  }
  if ( (*((_BYTE *)&botData->scriptedAgentInfo + 9020) & 2) != 0 )
  {
    cmd->buttons &= ~2ui64;
    if ( !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 0x25u) )
      cmd->buttons |= 1ui64;
    if ( botData->botInfo.scriptAttackButtonEndTime <= level.time )
      botData->botInfo.scriptPress &= ~2u;
  }
  scriptPress = botData->botInfo.scriptPress;
  if ( (scriptPress & 4) != 0 )
  {
    cmd->buttons &= ~2ui64;
    if ( !GameModeFlagContainer<enum PWeaponFlagsCommon,enum PWeaponFlagsSP,enum PWeaponFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->weapCommon.weapFlags, ACTIVE, 0xFu) )
      cmd->buttons |= 0x20000ui64;
    botData->botInfo.scriptPress &= ~4u;
    scriptPress = botData->botInfo.scriptPress;
  }
  if ( (scriptPress & 8) != 0 )
  {
    if ( !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 0x1Au) )
      cmd->buttons |= 0x100ui64;
    botData->botInfo.scriptPress &= ~8u;
    scriptPress = botData->botInfo.scriptPress;
  }
  if ( (scriptPress & 0x10) != 0 )
  {
    cmd->buttons &= ~2ui64;
    if ( !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 0x26u) )
      cmd->buttons |= 4ui64;
    botData->botInfo.scriptPress &= ~0x10u;
    scriptPress = botData->botInfo.scriptPress;
  }
  if ( (scriptPress & 0x20) != 0 )
  {
    if ( !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->pm_flags, ACTIVE, 0x19u) )
      cmd->buttons |= 2ui64;
    botData->botInfo.scriptPress &= ~0x20u;
    scriptPress = botData->botInfo.scriptPress;
  }
  if ( (scriptPress & 0x40) != 0 )
  {
    cmd->buttons |= 0x200ui64;
    if ( botData->botInfo.scriptADSButtonEndTime <= level.time )
      botData->botInfo.scriptPress &= ~0x40u;
  }
  if ( *((char *)&botData->scriptedAgentInfo + 9020) < 0 )
  {
    if ( !GameModeFlagContainer<enum PWeaponFlagsCommon,enum PWeaponFlagsSP,enum PWeaponFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->weapCommon.weapFlags, ACTIVE, 0x29u) && !GameModeFlagContainer<enum PWeaponFlagsCommon,enum PWeaponFlagsSP,enum PWeaponFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->weapCommon.weapFlags, ACTIVE, 0xFu) )
      cmd->buttons |= 0x1000ui64;
    if ( botData->botInfo.scriptLethalButtonEndTime <= level.time )
      botData->botInfo.scriptPress &= ~0x80u;
  }
  if ( (botData->botInfo.scriptPress & 0x100) != 0 )
  {
    if ( !GameModeFlagContainer<enum PWeaponFlagsCommon,enum PWeaponFlagsSP,enum PWeaponFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->weapCommon.weapFlags, ACTIVE, 0x19u) && !GameModeFlagContainer<enum PWeaponFlagsCommon,enum PWeaponFlagsSP,enum PWeaponFlagsMP,64>::TestFlagInternal(&botData->botInfo.playerState->weapCommon.weapFlags, ACTIVE, 0xFu) )
      cmd->buttons |= 0x2000ui64;
    if ( botData->botInfo.scriptTacticalButtonEndTime <= level.time )
      botData->botInfo.scriptPress &= ~0x100u;
  }
  if ( (botData->botInfo.scriptPress & 0x200) != 0 )
  {
    cmd->buttons |= 0x100000000ui64;
    if ( botData->botInfo.scriptSpecialButtonEndTime <= level.time )
      botData->botInfo.scriptPress &= ~0x200u;
  }
}

/*
==============
Bot_UpdateSearchLook
==============
*/
__int64 Bot_UpdateSearchLook(bot_data_t *botData)
{
  const pathnode_t *v12; 
  pathnode_t *v13; 
  unsigned __int16 v14; 
  int searchLookNext; 
  int v19; 
  int v23; 
  unsigned __int16 *searchLookNodes; 
  int *searchLookVisTime; 
  pathnode_t *v30; 
  int v32; 
  sentient_s *v62; 
  vec3_t pos; 
  bitarray<224> iTeamFlags; 

  _RDI = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12351, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !_RDI->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12364, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent") )
    __debugbreak();
  if ( !_RDI->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12365, ASSERT_TYPE_ASSERT, "( botInfo->sentient )", (const char *)&queryFormat, "botInfo->sentient") )
    __debugbreak();
  if ( !SV_BotRequirePathnodes(_RDI) )
    return 0i64;
  v12 = Sentient_NearestNode(_RDI->botInfo.sentient);
  v13 = (pathnode_t *)v12;
  if ( !v12 )
    return 0i64;
  v14 = Path_ConvertNodeToIndex(v12);
  if ( _RDI->botInfo.searchLookNearestNode != v14 )
  {
    _RDI->botInfo.searchLookNearestNode = v14;
    pathnode_t::GetPos(v13, &pos);
    _RDI->botInfo.searchLookNodeCount = AI_FindEntrances(&pos, _RDI->botInfo.searchLookNodes, 16);
    *(_QWORD *)((char *)&_RDI->scriptedAgentInfo + 29228) = 0i64;
    *(_QWORD *)((char *)&_RDI->scriptedAgentInfo + 29236) = 0i64;
  }
  searchLookNext = _RDI->botInfo.searchLookNext;
  if ( level.time > searchLookNext )
    goto LABEL_20;
  _RDX = &_RDI->botInfo.searchLookPoint;
  __asm
  {
    vxorps  xmm0, xmm0, xmm0
    vucomiss xmm0, dword ptr [rdx]
  }
  if ( level.time == searchLookNext )
  {
    __asm { vucomiss xmm0, dword ptr [rdx+4] }
    if ( level.time == searchLookNext )
    {
      __asm { vucomiss xmm0, dword ptr [rdx+8] }
      if ( level.time == searchLookNext )
      {
LABEL_20:
        v19 = -1;
        if ( Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) )
          _RAX = Com_TeamsSP_GetAllTeamFlags();
        else
          _RAX = Com_TeamsMP_GetAllTeamFlags();
        __asm
        {
          vmovups xmm0, xmmword ptr [rax]
          vmovups xmmword ptr [rsp+128h+iTeamFlags.array], xmm0
          vmovsd  xmm1, qword ptr [rax+10h]
        }
        v23 = 0;
        __asm { vmovsd  qword ptr [rsp+128h+iTeamFlags.array+10h], xmm1 }
        iTeamFlags.array[6] = _RAX->array[6];
        if ( _RDI->botInfo.searchLookNodeCount <= 0 )
        {
LABEL_44:
          _RDI->botInfo.searchLookNext = level.time + G_irand(3000, 6000);
          return 1i64;
        }
        searchLookNodes = _RDI->botInfo.searchLookNodes;
        searchLookVisTime = _RDI->botInfo.searchLookVisTime;
        __asm
        {
          vmovaps [rsp+128h+var_38], xmm6
          vmovaps [rsp+128h+var_48], xmm7
          vmovaps [rsp+128h+var_58], xmm8
          vmovaps [rsp+128h+var_68], xmm9
          vmovaps [rsp+128h+var_78], xmm10
          vmovss  xmm10, cs:__real@3f800000
          vmovaps [rsp+128h+var_88], xmm11
          vmovaps [rsp+128h+var_98], xmm12
          vmovss  xmm12, cs:__real@80000000
          vmovaps [rsp+128h+var_A8], xmm13
          vmovss  xmm13, cs:__real@42200000
          vmovaps [rsp+128h+var_B8], xmm14
          vmovss  xmm14, cs:__real@471c4000
        }
        while ( 1 )
        {
          v30 = Path_ConvertIndexToNode(*searchLookNodes);
          pathnode_t::GetPos(v30, &pos);
          _RAX = _RDI->botInfo.ent;
          v32 = 0;
          __asm
          {
            vmovss  xmm7, dword ptr [rsp+128h+pos+4]
            vmovss  xmm5, dword ptr [rsp+128h+pos]
            vmovss  xmm9, dword ptr [rsp+128h+pos+8]
            vmovss  xmm6, dword ptr [rax+134h]
            vmovss  xmm4, dword ptr [rax+130h]
            vmovss  xmm8, dword ptr [rax+138h]
            vsubss  xmm0, xmm6, xmm7
            vmulss  xmm1, xmm0, xmm0
            vsubss  xmm2, xmm4, xmm5
            vsubss  xmm3, xmm8, xmm9
            vmulss  xmm0, xmm2, xmm2
            vaddss  xmm2, xmm1, xmm0
            vmulss  xmm1, xmm3, xmm3
            vaddss  xmm3, xmm2, xmm1
            vcomiss xmm3, xmm14
          }
          if ( level.teammode != TEAMMODE_FFA )
          {
            __asm
            {
              vsubss  xmm4, xmm5, xmm4
              vsubss  xmm5, xmm7, xmm6
              vsubss  xmm6, xmm9, xmm8
              vmulss  xmm1, xmm5, xmm5
              vmulss  xmm0, xmm4, xmm4
              vaddss  xmm2, xmm1, xmm0
              vmulss  xmm1, xmm6, xmm6
              vaddss  xmm2, xmm2, xmm1
              vsqrtss xmm3, xmm2, xmm2
              vcmpless xmm0, xmm3, xmm12
              vblendvps xmm0, xmm3, xmm10, xmm0
              vdivss  xmm1, xmm10, xmm0
              vmulss  xmm8, xmm1, xmm4
              vmulss  xmm9, xmm1, xmm5
              vmulss  xmm11, xmm1, xmm6
            }
            v62 = Sentient_FirstSentient(&iTeamFlags);
            do
            {
              if ( !v62 )
                break;
              if ( Bot_IsCharacterActive(v62->ent) )
              {
                if ( AI_IsAlliedSentient(_RDI->botInfo.sentient, v62) )
                {
                  if ( v62 != _RDI->botInfo.sentient )
                  {
                    _RAX = v62->ent;
                    __asm
                    {
                      vmovss  xmm0, dword ptr [rax+130h]
                      vsubss  xmm4, xmm0, dword ptr [rcx+130h]
                      vmovss  xmm1, dword ptr [rax+134h]
                      vsubss  xmm6, xmm1, dword ptr [rcx+134h]
                      vmovss  xmm0, dword ptr [rax+138h]
                      vsubss  xmm7, xmm0, dword ptr [rcx+138h]
                      vmulss  xmm1, xmm4, xmm4
                      vmulss  xmm0, xmm7, xmm7
                      vmulss  xmm2, xmm6, xmm6
                      vaddss  xmm3, xmm2, xmm1
                      vaddss  xmm2, xmm3, xmm0
                      vsqrtss xmm1, xmm2, xmm2
                      vcmpless xmm0, xmm1, xmm12
                      vblendvps xmm0, xmm1, xmm10, xmm0
                      vdivss  xmm5, xmm10, xmm0
                      vmulss  xmm0, xmm4, xmm5
                      vmulss  xmm1, xmm6, xmm5
                      vmulss  xmm2, xmm1, xmm9
                      vmulss  xmm3, xmm0, xmm8
                      vmulss  xmm0, xmm7, xmm5
                      vmulss  xmm1, xmm0, xmm11
                      vaddss  xmm4, xmm3, xmm2
                      vaddss  xmm2, xmm4, xmm1
                      vcomiss xmm2, dword ptr [rdi+0A0h]
                    }
                    if ( v62 > _RDI->botInfo.sentient )
                      v32 = 1;
                  }
                }
              }
              v62 = Sentient_NextSentient(v62, &iTeamFlags);
            }
            while ( !v32 );
          }
          if ( Bot_IsFacingPosition(_RDI, &pos) )
            *searchLookVisTime = level.time;
          if ( v19 != -1 && *searchLookVisTime > v19 )
            goto LABEL_42;
          if ( !v32 )
            break;
          if ( v19 == -1 )
            goto LABEL_41;
LABEL_42:
          ++v23;
          ++searchLookNodes;
          ++searchLookVisTime;
          if ( v23 >= _RDI->botInfo.searchLookNodeCount )
          {
            __asm
            {
              vmovaps xmm14, [rsp+128h+var_B8]
              vmovaps xmm13, [rsp+128h+var_A8]
              vmovaps xmm12, [rsp+128h+var_98]
              vmovaps xmm11, [rsp+128h+var_88]
              vmovaps xmm10, [rsp+128h+var_78]
              vmovaps xmm9, [rsp+128h+var_68]
              vmovaps xmm8, [rsp+128h+var_58]
              vmovaps xmm7, [rsp+128h+var_48]
              vmovaps xmm6, [rsp+128h+var_38]
            }
            goto LABEL_44;
          }
        }
        v19 = *searchLookVisTime;
LABEL_41:
        __asm
        {
          vmovss  xmm0, dword ptr [rsp+128h+pos]
          vmovss  xmm1, dword ptr [rsp+128h+pos+4]
          vmovss  dword ptr [rdi+7238h], xmm0
          vaddss  xmm0, xmm13, dword ptr [rsp+128h+pos+8]
          vmovss  dword ptr [rdi+723Ch], xmm1
          vmovss  dword ptr [rdi+7240h], xmm0
        }
        goto LABEL_42;
      }
    }
  }
  Bot_LookAtPoint(_RDI, _RDX, 100, BOT_LOOK_CODE_SEARCH);
  return 1i64;
}

/*
==============
Bot_UpdateSeeThroughForEnt
==============
*/
void Bot_UpdateSeeThroughForEnt(bot_data_t *botData, const gentity_s *ent)
{
  gentity_s *v14; 
  AIBotInterface *m_pAI; 
  sentient_info_t *SentientInfo; 
  const gentity_s *v17; 
  char v18; 
  unsigned __int8 *priorityMap; 
  char v25; 
  bool v26; 
  unsigned __int16 EntityHitId; 
  gentity_s *v28; 
  __int16 v29; 
  const char *MapName; 
  const char *v79; 
  unsigned __int8 *WeaponPriorityMap; 
  bool v84; 
  gentity_s *v85; 
  unsigned __int8 *v86; 
  const char *v127; 
  const char *v128; 
  int valid; 
  const char *EntityModelName; 
  const vec3_t *skipEntity; 
  char *skipChildren; 
  AIBotWrapper v144; 
  trace_t results; 
  vec3_t vEyePosOut; 
  vec3_t start; 
  vec3_t v; 
  vec3_t otherErrorOrigin; 
  vec3_t end; 

  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2879, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( !ent->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2880, ASSERT_TYPE_ASSERT, "( ent->sentient )", (const char *)&queryFormat, "ent->sentient") )
    __debugbreak();
  AICommonInterface::AICommonInterface(&v144.m_botInterface);
  v144.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v144.m_botAgentInterface);
  v14 = botData->botInfo.ent;
  v144.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v144.m_pAI = NULL;
  AIBotWrapper::Setup(&v144, v14);
  m_pAI = v144.m_pAI;
  if ( !v144.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2881, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  SentientInfo = Sentient_GetSentientInfo(botData->botInfo.sentient, ent->sentient);
  if ( !SentientInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2887, ASSERT_TYPE_ASSERT, "( pInfo )", (const char *)&queryFormat, "pInfo") )
    __debugbreak();
  v17 = NULL;
  if ( SentientInfo->VisCache.bVisible && !Bot_EntityIsInvisible(ent) )
  {
    m_pAI->GetEyePosition(m_pAI, &start);
    Sentient_GetHeadPosition(ent->sentient, &vEyePosOut);
    __asm
    {
      vmovss  xmm0, dword ptr [rbp+130h+start]
      vucomiss xmm0, dword ptr [rbp+130h+vEyePosOut]
    }
    if ( !v18 )
      goto LABEL_52;
    __asm
    {
      vmovss  xmm0, dword ptr [rbp+130h+start+4]
      vucomiss xmm0, dword ptr [rbp+130h+vEyePosOut+4]
    }
    if ( !v18 )
      goto LABEL_52;
    __asm
    {
      vmovss  xmm0, dword ptr [rbp+130h+start+8]
      vucomiss xmm0, dword ptr [rbp+130h+vEyePosOut+8]
    }
    if ( !v18 )
    {
LABEL_52:
      if ( G_Main_SightTrace(&start, &vEyePosOut, botData->botInfo.ent->s.number, ent->s.number, 41965569) )
      {
        __asm
        {
          vmovaps [rsp+230h+var_60], xmm8
          vmovaps [rsp+230h+var_90], xmm11
          vmovss  xmm11, cs:__real@3f800000
          vmovss  [rbp+130h+results.fraction], xmm11
        }
        priorityMap = BG_GetWeaponPriorityMap(&NULL_WEAPON, 0);
        PhysicsQuery_LegacyTrace(PHYSICS_WORLD_ID_SERVER_DETAIL, &results, &start, &vEyePosOut, &bounds_origin, botData->botInfo.ent->s.number, 0, contents, 1, priorityMap, All);
        __asm
        {
          vmovss  xmm8, [rbp+130h+results.fraction]
          vcomiss xmm8, xmm11
        }
        if ( v25 && (results.surfaceFlags & 0x100) == 0 )
        {
          v26 = results.hitType == TRACE_HITTYPE_ENTITY;
          if ( results.hitType != TRACE_HITTYPE_ENTITY )
            goto LABEL_26;
          EntityHitId = Trace_GetEntityHitId(&results);
          v26 = EntityHitId == 2046;
          if ( EntityHitId >= 0x7FEu || (v28 = g_entities, v17 = &v28[Trace_GetEntityHitId(&results)], v17 != ent) && (v29 = v17->s.eType - 3, v26 = (v29 & 0xFFF7) == 0, (v29 & 0xFFF7) != 0) )
          {
            __asm { vmovss  xmm8, [rbp+130h+results.fraction] }
LABEL_26:
            __asm
            {
              vmovss  xmm4, dword ptr [rbp+130h+start+4]
              vmovss  xmm2, dword ptr [rbp+130h+start+8]
              vmovss  xmm5, dword ptr [rbp+130h+vEyePosOut+4]
              vmovss  xmm3, dword ptr [rbp+130h+vEyePosOut+8]
              vmovaps [rsp+230h+var_40], xmm6
              vmovss  xmm6, dword ptr [rbp+130h+start]
              vmovaps [rsp+230h+var_50], xmm7
              vmovss  xmm7, dword ptr [rbp+130h+vEyePosOut]
              vmovaps [rsp+230h+var_70], xmm9
              vsubss  xmm0, xmm7, xmm6
              vmulss  xmm1, xmm0, xmm8
              vsubss  xmm0, xmm5, xmm4
              vmovaps [rsp+230h+var_80], xmm10
              vaddss  xmm10, xmm1, xmm6
              vmulss  xmm1, xmm0, xmm8
              vaddss  xmm9, xmm1, xmm4
              vsubss  xmm0, xmm3, xmm2
              vmulss  xmm1, xmm0, xmm8
              vaddss  xmm8, xmm1, xmm2
              vsubss  xmm4, xmm4, xmm5
              vsubss  xmm5, xmm2, xmm3
              vsubss  xmm6, xmm6, xmm7
              vmulss  xmm0, xmm6, xmm6
              vmovaps [rsp+230h+var_A0], xmm12
              vmovss  xmm12, cs:__real@41700000
              vmulss  xmm1, xmm4, xmm4
              vaddss  xmm2, xmm1, xmm0
              vmulss  xmm1, xmm5, xmm5
              vaddss  xmm2, xmm2, xmm1
              vsqrtss xmm3, xmm2, xmm2
              vcmpless xmm0, xmm3, cs:__real@80000000
              vblendvps xmm0, xmm3, xmm11, xmm0
              vdivss  xmm1, xmm11, xmm0
              vmulss  xmm3, xmm4, xmm1
              vmulss  xmm4, xmm5, xmm1
              vmulss  xmm2, xmm6, xmm1
              vmulss  xmm1, xmm3, xmm12
              vmovaps [rsp+230h+var_B0], xmm13
              vmulss  xmm0, xmm2, xmm12
              vaddss  xmm5, xmm0, xmm10
              vmovaps [rsp+230h+var_C0], xmm14
              vaddss  xmm14, xmm1, xmm9
              vmovss  xmm1, dword ptr cs:__xmm@80000000800000008000000080000000
              vxorps  xmm6, xmm2, xmm1
              vxorps  xmm7, xmm3, xmm1
              vxorps  xmm13, xmm4, xmm1
              vmulss  xmm0, xmm4, xmm12
              vmulss  xmm1, xmm7, xmm12
              vaddss  xmm3, xmm1, xmm9
              vmovaps [rsp+230h+var_D0], xmm15
              vaddss  xmm15, xmm0, xmm8
              vmulss  xmm0, xmm6, xmm12
              vaddss  xmm2, xmm0, xmm10
              vucomiss xmm5, xmm2
              vmulss  xmm0, xmm13, xmm12
              vaddss  xmm1, xmm0, xmm8
              vmovss  dword ptr [rbp+130h+otherErrorOrigin+8], xmm1
              vmovss  dword ptr [rbp+130h+end], xmm10
              vmovss  dword ptr [rbp+130h+end+4], xmm9
              vmovss  dword ptr [rbp+130h+end+8], xmm8
              vmovss  dword ptr [rbp+130h+v], xmm5
              vmovss  dword ptr [rbp+130h+v+4], xmm14
              vmovss  dword ptr [rbp+130h+v+8], xmm15
              vmovss  dword ptr [rbp+130h+results.normal], xmm6
              vmovss  dword ptr [rbp+130h+results.normal+4], xmm7
              vmovss  dword ptr [rbp+130h+results.normal+8], xmm13
              vmovss  dword ptr [rbp+130h+otherErrorOrigin], xmm2
              vmovss  dword ptr [rbp+130h+otherErrorOrigin+4], xmm3
            }
            if ( v26 )
            {
              __asm { vucomiss xmm14, xmm3 }
              if ( v26 )
              {
                __asm { vucomiss xmm15, xmm1 }
                if ( v26 )
                {
                  MapName = SV_Game_GetMapName();
                  v79 = vtos(&v);
                  if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2963, ASSERT_TYPE_ASSERT, "(!Vec3Compare( drawPoint[0], drawPoint[1] ))", "%s\n\tBot_UpdateSeeThroughForEnt (1) somehow found duplicate origin %s in map %s", "!Vec3Compare( drawPoint[0], drawPoint[1] )", v79, MapName) )
                    __debugbreak();
                }
              }
            }
            __asm { vmovss  [rbp+130h+results.fraction], xmm11 }
            WeaponPriorityMap = BG_GetWeaponPriorityMap(&NULL_WEAPON, 0);
            PhysicsQuery_LegacyTrace(PHYSICS_WORLD_ID_SERVER_DETAIL, &results, &vEyePosOut, &end, &bounds_origin, botData->botInfo.ent->s.number, 0, contents, 1, WeaponPriorityMap, All);
            __asm
            {
              vmovss  xmm8, [rbp+130h+results.fraction]
              vcomiss xmm8, xmm11
              vmovaps xmm15, [rsp+230h+var_D0]
              vmovaps xmm14, [rsp+230h+var_C0]
            }
            if ( !v25 || (results.surfaceFlags & 0x100) != 0 )
            {
              __asm
              {
                vmovss  dword ptr [rbp+130h+results.normal], xmm6
                vmovss  dword ptr [rbp+130h+results.normal+4], xmm7
                vmovss  dword ptr [rbp+130h+results.normal+8], xmm13
              }
            }
            else
            {
              v84 = results.hitType == TRACE_HITTYPE_ENTITY;
              if ( results.hitType == TRACE_HITTYPE_ENTITY )
              {
                v85 = &g_entities[results.hitId];
                v84 = v85 == ent;
                if ( v85 == ent )
                {
                  v86 = BG_GetWeaponPriorityMap(&NULL_WEAPON, 0);
                  PhysicsQuery_LegacyTrace(PHYSICS_WORLD_ID_SERVER_DETAIL, &results, &vEyePosOut, &end, &bounds_origin, ent->s.number, 0, contents, 1, v86, All);
                  __asm { vmovss  xmm8, [rbp+130h+results.fraction] }
                }
              }
              __asm
              {
                vmovss  xmm4, dword ptr [rbp+130h+vEyePosOut+4]
                vmovss  xmm2, dword ptr [rbp+130h+vEyePosOut+8]
                vmovss  xmm6, dword ptr [rbp+130h+vEyePosOut]
                vmovss  xmm5, dword ptr [rbp+130h+end+4]
                vmovss  xmm3, dword ptr [rbp+130h+end+8]
                vmovss  xmm7, dword ptr [rbp+130h+end]
                vsubss  xmm0, xmm7, xmm6
                vmulss  xmm1, xmm0, xmm8
                vaddss  xmm10, xmm1, xmm6
                vsubss  xmm0, xmm5, xmm4
                vmulss  xmm1, xmm0, xmm8
                vaddss  xmm9, xmm1, xmm4
                vsubss  xmm0, xmm3, xmm2
                vmulss  xmm1, xmm0, xmm8
                vaddss  xmm8, xmm1, xmm2
                vsubss  xmm4, xmm4, xmm5
                vsubss  xmm5, xmm2, xmm3
                vmulss  xmm1, xmm4, xmm4
                vsubss  xmm6, xmm6, xmm7
                vmulss  xmm0, xmm6, xmm6
                vaddss  xmm2, xmm1, xmm0
                vmulss  xmm1, xmm5, xmm5
                vaddss  xmm2, xmm2, xmm1
                vsqrtss xmm3, xmm2, xmm2
                vcmpless xmm0, xmm3, cs:__real@80000000
                vblendvps xmm0, xmm3, xmm11, xmm0
                vdivss  xmm1, xmm11, xmm0
                vmulss  xmm2, xmm6, xmm1
                vmulss  xmm3, xmm4, xmm1
                vmulss  xmm4, xmm5, xmm1
                vmulss  xmm0, xmm2, xmm12
                vmulss  xmm1, xmm3, xmm12
                vaddss  xmm5, xmm0, xmm10
                vmovss  dword ptr [rbp+130h+results.normal], xmm2
                vaddss  xmm2, xmm1, xmm9
                vmovss  xmm1, dword ptr [rbp+130h+v]
                vucomiss xmm1, xmm5
                vmulss  xmm0, xmm4, xmm12
                vmovss  dword ptr [rbp+130h+results.normal+4], xmm3
                vaddss  xmm3, xmm0, xmm8
                vmovss  dword ptr [rbp+130h+otherErrorOrigin+8], xmm3
                vmovss  [rbp+130h+var_EC], xmm10
                vmovss  [rbp+130h+var_E8], xmm9
                vmovss  [rbp+130h+var_E4], xmm8
                vmovss  dword ptr [rbp+130h+results.normal+8], xmm4
                vmovss  dword ptr [rbp+130h+otherErrorOrigin], xmm5
                vmovss  dword ptr [rbp+130h+otherErrorOrigin+4], xmm2
              }
              if ( v84 )
              {
                __asm
                {
                  vmovss  xmm0, dword ptr [rbp+130h+v+4]
                  vucomiss xmm0, xmm2
                }
                if ( v84 )
                {
                  __asm
                  {
                    vmovss  xmm0, dword ptr [rbp+130h+v+8]
                    vucomiss xmm0, xmm3
                  }
                  if ( v84 )
                  {
                    v127 = SV_Game_GetMapName();
                    v128 = vtos(&v);
                    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2984, ASSERT_TYPE_ASSERT, "(!Vec3Compare( drawPoint[0], drawPoint[1] ))", "%s\n\tBot_UpdateSeeThroughForEnt (2) somehow found duplicate origin %s in map %s", "!Vec3Compare( drawPoint[0], drawPoint[1] )", v128, v127) )
                      __debugbreak();
                  }
                }
              }
            }
            __asm
            {
              vmovss  xmm6, cs:__real@42480000
              vmovaps xmm3, xmm6; duplicateRadius
            }
            valid = Bot_DebugValidNewErrorLocation(BOT_ERROR_LOC_SEE_THROUGH, &v, &otherErrorOrigin, *(double *)&_XMM3);
            __asm
            {
              vmovaps xmm13, [rsp+230h+var_B0]
              vmovaps xmm12, [rsp+230h+var_A0]
              vmovaps xmm10, [rsp+230h+var_80]
              vmovaps xmm9, [rsp+230h+var_70]
              vmovaps xmm7, [rsp+230h+var_50]
            }
            if ( valid && (unsigned int)Bot_SeeThruBlockedByAllSurroundingGeo(&v, &otherErrorOrigin, botData->botInfo.ent->s.number, contents, 0) )
            {
              if ( v17 )
              {
                EntityModelName = G_DebugGetEntityModelName(v17);
                skipChildren = j_va("%i - %s", (unsigned int)v17->s.number, EntityModelName);
                skipEntity = &v17->r.currentOrigin;
              }
              else
              {
                skipChildren = (char *)results.debugHitName;
                skipEntity = NULL;
              }
              __asm { vmovaps xmm2, xmm6; duplicateRadius }
              Bot_DebugAddErrorLocation(botData, BOT_ERROR_LOC_SEE_THROUGH, *(double *)&_XMM2, &v, &otherErrorOrigin, skipEntity, skipChildren);
            }
            __asm { vmovaps xmm6, [rsp+230h+var_40] }
          }
        }
        __asm
        {
          vmovaps xmm8, [rsp+230h+var_60]
          vmovaps xmm11, [rsp+230h+var_90]
        }
      }
    }
  }
}

/*
==============
Bot_UpdateSentientHistory
==============
*/
void Bot_UpdateSentientHistory(sentient_s *sentient)
{
  signed __int64 v2; 
  bool v4; 
  __int64 v20; 
  unsigned int maxSentients; 
  vec3_t vOriginOut; 

  if ( s_botSentientHistory )
  {
    if ( !sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1944, ASSERT_TYPE_ASSERT, "( sentient )", (const char *)&queryFormat, "sentient") )
      __debugbreak();
    v2 = sentient - level.sentients;
    if ( !s_botSentientHistory && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1946, ASSERT_TYPE_ASSERT, "( s_botSentientHistory )", (const char *)&queryFormat, "s_botSentientHistory") )
      __debugbreak();
    if ( (unsigned int)v2 >= level.maxSentients )
    {
      maxSentients = level.maxSentients;
      LODWORD(v20) = v2;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1947, ASSERT_TYPE_ASSERT, "(unsigned)( sentientIndex ) < (unsigned)( level.maxSentients )", "sentientIndex doesn't index level.maxSentients\n\t%i not in [0, %i)", v20, maxSentients) )
        __debugbreak();
    }
    Sentient_GetOrigin(sentient, &vOriginOut);
    _RCX = s_botSentientHistory;
    v4 = __CFADD__(v2, v2) || 2 * v2 == 0;
    _RBX = v2;
    __asm
    {
      vmovss  xmm5, dword ptr [rsp+68h+vOriginOut]
      vmovss  xmm0, dword ptr [rcx+rbx*8+4]
      vmovss  xmm1, dword ptr [rcx+rbx*8+0Ch]
      vsubss  xmm4, xmm1, dword ptr [rsp+68h+vOriginOut+8]
      vsubss  xmm3, xmm0, xmm5
      vmovss  xmm0, dword ptr [rcx+rbx*8+8]
      vsubss  xmm2, xmm0, dword ptr [rsp+68h+vOriginOut+4]
      vmulss  xmm2, xmm2, xmm2
      vmulss  xmm0, xmm3, xmm3
      vaddss  xmm3, xmm2, xmm0
      vmulss  xmm1, xmm4, xmm4
      vaddss  xmm2, xmm3, xmm1
      vcomiss xmm2, cs:__real@47afc800
    }
    if ( !v4 )
    {
      __asm
      {
        vmovss  dword ptr [rcx+rbx*8+4], xmm5
        vmovss  xmm0, dword ptr [rsp+68h+vOriginOut+4]
        vmovss  dword ptr [rcx+rbx*8+8], xmm0
        vmovss  xmm1, dword ptr [rsp+68h+vOriginOut+8]
        vmovss  dword ptr [rcx+rbx*8+0Ch], xmm1
      }
      _RCX[_RBX].lastTimeMovedPositions = level.time;
    }
  }
}

/*
==============
Bot_UpdateSight
==============
*/
void Bot_UpdateSight(bot_data_t *botData, usercmd_s *cmd)
{
  const gentity_s *ent; 
  signed int v11; 
  AIBotInterface *m_pAI; 
  char v14; 
  const SvClientMP *CommonClient; 
  sentient_info_t *SentientInfo; 
  __int16 number; 
  unsigned int v20; 
  gentity_s *HidingFromEntity; 
  const sentient_s *sentient; 
  char v26; 
  int time; 
  int traversal; 
  __int64 v54; 
  __int64 v55; 
  __int64 v56; 
  __int64 v57; 
  AIBotWrapper v59; 
  __int128 v60; 
  __int64 v61; 
  int v62; 
  vec3_t vEyePosOut; 
  void *retaddr; 

  _R11 = &retaddr;
  __asm { vmovaps xmmword ptr [r11-78h], xmm9 }
  _RBX = botData;
  _R14 = cmd;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6535, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !_R14 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6536, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  AICommonInterface::AICommonInterface(&v59.m_botInterface);
  v59.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v59.m_botAgentInterface);
  ent = _RBX->botInfo.ent;
  v11 = 0;
  v59.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v59.m_pAI = NULL;
  AIBotWrapper::Setup(&v59, ent);
  m_pAI = v59.m_pAI;
  if ( !v59.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6548, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  Bot_SetSightFovValues(_RBX);
  AICommonInterface::UpdateSight(m_pAI);
  __asm
  {
    vxorps  xmm9, xmm9, xmm9
    vucomiss xmm9, dword ptr [rbx+23D0h]
  }
  if ( v26 )
    goto LABEL_63;
  *(double *)&_XMM0 = G_random();
  __asm { vcomiss xmm0, cs:__real@3d4ccccd }
  if ( v14 )
  {
LABEL_63:
    if ( !EntHandle::isDefined(&_RBX->botInfo.sentient->targetEnt) || !EntHandle::ent(&_RBX->botInfo.sentient->targetEnt) )
    {
      __asm
      {
        vmovss  xmm1, dword ptr [rbx+7F94h]; max
        vmovss  xmm0, dword ptr [rbx+7F90h]; min
      }
      *(double *)&_XMM0 = G_flrand(*(float *)&_XMM0, *(float *)&_XMM1);
      __asm { vmovss  dword ptr [rbx+23D0h], xmm0 }
    }
  }
  if ( !_RBX->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6564, ASSERT_TYPE_ASSERT, "( botInfo->sentient )", (const char *)&queryFormat, "botInfo->sentient") )
    __debugbreak();
  if ( !_R14 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6565, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  v60 = 0ui64;
  v61 = 0i64;
  v62 = 0;
  if ( (int)SvClient::ms_clientCount > 0 )
  {
    do
    {
      if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
        __debugbreak();
      CommonClient = (const SvClientMP *)SvClient::GetCommonClient(v11);
      if ( Bot_IsClientActive(CommonClient) )
      {
        if ( !CommonClient->gentity && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6575, ASSERT_TYPE_ASSERT, "( cl->gentity )", (const char *)&queryFormat, "cl->gentity") )
          __debugbreak();
        if ( !CommonClient->gentity->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6576, ASSERT_TYPE_ASSERT, "( cl->gentity->sentient )", (const char *)&queryFormat, "cl->gentity->sentient") )
          __debugbreak();
        if ( !AI_IsAlliedSentient(_RBX->botInfo.sentient, CommonClient->gentity->sentient) )
        {
          SentientInfo = Sentient_GetSentientInfo(_RBX->botInfo.sentient, CommonClient->gentity->sentient);
          if ( !SentientInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6581, ASSERT_TYPE_ASSERT, "( sentientInfo )", (const char *)&queryFormat, "sentientInfo") )
            __debugbreak();
          number = CommonClient->gentity->s.number;
          if ( (unsigned __int16)number >= 0xF8u )
          {
            LODWORD(v55) = 248;
            LODWORD(v54) = number;
            if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6582, ASSERT_TYPE_ASSERT, "(unsigned)( cl->gentity->s.number ) < (unsigned)( ((200 + 48)) )", "cl->gentity->s.number doesn't index MAX_COMPASS_ACTORS_MP\n\t%i not in [0, %i)", v54, v55) )
              __debugbreak();
          }
          if ( SentientInfo->VisCache.bVisible )
          {
            v20 = CommonClient->gentity->s.number;
            if ( v20 >= 0xE0 )
            {
              LODWORD(v57) = 224;
              LODWORD(v56) = v20;
              if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\bitarray.h", 263, ASSERT_TYPE_ASSERT, "( pos ) < ( impl()->getBitCount() )", "%s < %s\n\t%u, %u", "pos", "impl()->getBitCount()", v56, v57) )
                __debugbreak();
            }
            *((_DWORD *)&v60 + ((unsigned __int64)v20 >> 5)) |= 0x80000000 >> (v20 & 0x1F);
          }
        }
      }
      ++v11;
    }
    while ( v11 < (int)SvClient::ms_clientCount );
    v11 = v62;
    _R14 = cmd;
  }
  __asm
  {
    vmovups xmm0, [rsp+148h+var_B8]
    vmovsd  xmm1, [rsp+148h+var_A8]
    vmovups xmmword ptr [r14+0E8h], xmm0
    vmovsd  qword ptr [r14+0F8h], xmm1
  }
  _R14->sightedClientsMask.data[6] = v11;
  HidingFromEntity = Bot_GetHidingFromEntity(_RBX);
  if ( HidingFromEntity )
  {
    if ( HidingFromEntity->s.eType == ET_MISSILE && level.time - _RBX->botInfo.grenadeLastInSightCheck > 450 )
    {
      _RDI = &HidingFromEntity->r.currentOrigin;
      _RBX->botInfo.grenadeLastInSightCheck = level.time;
      if ( Bot_CanSeePointViaNodes(_RBX, &HidingFromEntity->r.currentOrigin) )
      {
        sentient = _RBX->botInfo.sentient;
        __asm
        {
          vmovaps [rsp+148h+var_48], xmm6
          vmovaps [rsp+148h+var_58], xmm7
          vmovaps [rsp+148h+var_68], xmm8
        }
        Sentient_GetEyePosition(sentient, &vEyePosOut);
        __asm
        {
          vmovss  xmm0, dword ptr [rdi]
          vsubss  xmm1, xmm0, dword ptr [rsp+148h+vEyePosOut]
          vxorps  xmm4, xmm1, cs:__xmm@80000000800000008000000080000000
          vmovss  xmm0, dword ptr [rdi+4]
          vsubss  xmm0, xmm0, dword ptr [rsp+148h+vEyePosOut+4]
          vxorps  xmm5, xmm0, cs:__xmm@80000000800000008000000080000000
          vmovss  xmm7, dword ptr [rsp+148h+vEyePosOut+8]
          vmulss  xmm2, xmm5, xmm5
          vmulss  xmm1, xmm4, xmm4
          vaddss  xmm0, xmm2, xmm1
          vmovss  xmm1, cs:__real@3f800000
          vsqrtss xmm3, xmm0, xmm0
          vcmpless xmm0, xmm3, cs:__real@80000000
          vblendvps xmm0, xmm3, xmm1, xmm0
          vdivss  xmm3, xmm1, xmm0
          vmulss  xmm1, xmm4, xmm3
          vmulss  xmm0, xmm1, cs:__real@447a0000
          vaddss  xmm8, xmm0, dword ptr [rsp+148h+vEyePosOut]
          vucomiss xmm8, xmm9
          vmulss  xmm1, xmm5, xmm3
          vmulss  xmm2, xmm1, cs:__real@447a0000
          vaddss  xmm6, xmm2, dword ptr [rsp+148h+vEyePosOut+4]
        }
        if ( v26 )
        {
          __asm { vucomiss xmm6, xmm9 }
          if ( v26 )
          {
            __asm { vucomiss xmm7, xmm9 }
            if ( v26 )
            {
              if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14633, ASSERT_TYPE_ASSERT, "( Vec3NotZero( *point ) )", (const char *)&queryFormat, "Vec3NotZero( *point )") )
                __debugbreak();
            }
          }
        }
        time = level.time;
        if ( _RBX->botInfo.lookAtType <= BOT_LOOK_CODE_SEEK || level.time >= _RBX->botInfo.lookAtTime )
        {
          _RBX->botInfo.lookAtType = BOT_LOOK_CODE_SEEK;
          _RBX->botInfo.lookAtTime = time + 550;
          __asm
          {
            vmovss  dword ptr [rbx+6EC8h], xmm8
            vmovss  dword ptr [rbx+6ECCh], xmm6
            vmovss  dword ptr [rbx+6ED0h], xmm7
          }
          traversal = _RBX->botInfo.traversal;
          if ( (traversal & 1) != 0 )
            _RBX->botInfo.traversal = traversal & 0xFFFFFFFE;
        }
        __asm
        {
          vmovaps xmm7, [rsp+148h+var_58]
          vmovaps xmm6, [rsp+148h+var_48]
          vmovaps xmm8, [rsp+148h+var_68]
        }
      }
    }
  }
  __asm { vmovaps xmm9, [rsp+148h+var_78] }
}

/*
==============
Bot_UpdateSprinting
==============
*/
void Bot_UpdateSprinting(bot_data_t *botData, usercmd_s *cmd)
{
  const playerState_s *playerState; 
  PlayerHandIndex WeaponHandForViewWeapon; 
  int v7; 
  int v8; 
  int v9; 
  bool v10; 
  int v11; 
  int IsScriptGoal; 
  BOOL v13; 
  int flags; 
  int ShouldRushEnemy; 
  char v16; 
  Weapon *weapon; 

  _RDI = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18664, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  playerState = _RDI->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18667, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  if ( playerState == (const playerState_s *)-808i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18669, ASSERT_TYPE_ASSERT, "( ss )", (const char *)&queryFormat, "ss") )
    __debugbreak();
  WeaponHandForViewWeapon = Bot_Weap_GetWeaponHandForViewWeapon(playerState);
  v7 = 1;
  weapon = (Weapon *)Bot_Weap_GetViewmodelWeapon(playerState);
  if ( !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&playerState->pm_flags, ACTIVE, 0x19u) && !Bot_IsUsingTurret(_RDI) && (!Bot_IsFiringWeapon(_RDI, cmd) || BG_HasPerk(&playerState->perks, 0x35u)) && (!Bot_IsReloading(_RDI) || BG_CanSprintReload(playerState)) )
  {
    if ( !Bot_Weap_HasUnderBarrelGL(playerState) || !BG_UsingAlternate(playerState) || ((v8 = Bot_Weap_AmmoInClip(playerState, weapon, WeaponHandForViewWeapon), v9 = Bot_Weap_AmmoNotInClip(playerState, weapon), v8) || v9 <= 0) && !Bot_IsThrowingGrenade(_RDI) )
    {
      if ( Bot_PathExists(&_RDI->botInfo) && (LOBYTE(_RDI->scriptedAgentInfo.blackboard.m_ShootParams.m_Pos.v[0]) & 0x10) == 0 && ((_RDI->botInfo.currentForceStance - 2) & 0xFD) != 0 && !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&playerState->pm_flags, ACTIVE, 0x21u) && !Bot_AtScriptGoal(_RDI) && (LOBYTE(_RDI->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) == 0 && (cmd->buttons & 0x80u) == 0i64 && (cmd->buttons & 0x40) == 0 && level.time >= _RDI->botInfo.lookAtTime && !playerState->sprintState.sprintButtonUpRequired && Bot_IsOnGround(_RDI) && cmd->forwardmove >= Dvar_GetInt_Internal_DebugName(DCONST_DVARINT_player_sprintForwardMinimum, "player_sprintForwardMinimum") )
      {
        v10 = (*((_BYTE *)&_RDI->scriptedAgentInfo + 9016) & 0x10) == 0;
        if ( (*((_BYTE *)&_RDI->scriptedAgentInfo + 9016) & 0x10) == 0 )
        {
          __asm
          {
            vmovss  xmm0, cs:__real@3f800000
            vcomiss xmm0, dword ptr [rdi+8030h]
          }
          if ( (*((_BYTE *)&_RDI->scriptedAgentInfo + 9016) & 0x10) != 0 )
            goto LABEL_42;
          v10 = _RDI->botInfo.scriptGoal.type == BOT_SCR_GOAL_NONE;
          if ( _RDI->botInfo.scriptGoal.type == BOT_SCR_GOAL_NONE )
            goto LABEL_42;
          if ( _RDI == (bot_data_t *)-8i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13725, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
            __debugbreak();
          v11 = Bot_NavPathExists(&_RDI->botInfo);
          v10 = v11 == 0;
          if ( !v11 || (IsScriptGoal = Bot_ActiveGoalIsScriptGoal(_RDI), v10 = IsScriptGoal == 0, !IsScriptGoal) || (v13 = Bot_CloseToObjectiveGoal(_RDI), v10 = !v13) )
          {
LABEL_42:
            __asm
            {
              vmovss  xmm0, cs:__real@40000000
              vcomiss xmm0, dword ptr [rdi+8030h]
            }
            if ( !v10 || (flags = _RDI->botInfo.flags, (flags & 0x2000) == 0) && (flags & 0x1000) == 0 )
              v7 = 0;
          }
        }
        if ( BG_HasPerk(&playerState->perks, 0x35u) || v7 )
          goto LABEL_57;
        ShouldRushEnemy = Bot_ShouldRushEnemy(_RDI);
        if ( (!(unsigned int)Bot_IsNearEnemies(_RDI) || ShouldRushEnemy) && (!Bot_CanSeeAndCanFireOnEnemy(_RDI) || !Bot_Weap_Ammo(playerState, weapon) || !Bot_IsInRangeOfEnemy(_RDI)) )
        {
          if ( ShouldRushEnemy || Bot_Weap_IsShortRange(playerState) && !Bot_IsInRangeOfEnemy(_RDI) )
            goto LABEL_57;
          *(double *)&_XMM0 = Bot_GetLookAheadDist(&_RDI->botInfo);
          __asm { vcomiss xmm0, cs:__real@42c80000 }
          if ( !v16 )
LABEL_57:
            cmd->buttons |= 2ui64;
        }
      }
    }
  }
}

/*
==============
Bot_UpdateStance
==============
*/
void Bot_UpdateStance(bot_data_t *botData, usercmd_s *cmd)
{
  int scriptFlags; 
  int v8; 
  int v9; 
  int v10; 
  char v11; 
  int v12; 
  int flags; 
  unsigned int v16; 
  bot_path_style_t PathingStyle; 
  int crouchEndTime; 
  unsigned int v20; 
  unsigned int StopGoalStance; 
  int v22; 
  int v23; 
  BOOL v24; 
  int time; 
  char currentForceStance; 
  const dvar_t *v28; 
  int integer; 
  GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64> *p_pm_flags; 
  unsigned int v31; 
  playerState_s *v32; 
  const Bounds *Bounds; 
  unsigned __int64 v34; 
  int v36; 
  playerState_s *playerState; 
  trace_t results; 

  __asm { vmovaps [rsp+108h+var_48], xmm6 }
  _RSI = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18365, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  playerState = _RSI->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18368, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  _RDI = (const gentity_s **)&_RSI->botInfo.ent;
  if ( !_RSI->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18383, ASSERT_TYPE_ASSERT, "( botInfo->sentient )", (const char *)&queryFormat, "botInfo->sentient") )
    __debugbreak();
  scriptFlags = _RSI->botInfo.scriptFlags;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  *(double *)&_XMM0 = Bot_GetLookAheadDist(&_RSI->botInfo);
  __asm { vcomiss xmm0, cs:__real@42000000 }
  v12 = v11;
  __asm { vmovaps xmm6, xmm0 }
  if ( Bot_NavPathExists(&_RSI->botInfo) )
  {
    __asm { vmulss  xmm1, xmm6, cs:__real@3f828f5c; goalRadius }
    if ( !Bot_IsAtPathEnd(_RSI, *(float *)&_XMM1) && v12 && ((_RSI->botInfo.flags & 0x8000) != 0 || (*((_BYTE *)&_RSI->scriptedAgentInfo + 9016) & 0x20) != 0) && (scriptFlags & 0x10) == 0 )
    {
      if ( level.time >= _RSI->botInfo.nextCrouchCheckTime )
      {
        *(double *)&_XMM0 = G_random();
        __asm { vcomiss xmm0, cs:__real@3f000000 }
        flags = _RSI->botInfo.flags;
        if ( v11 )
          v16 = flags | 1;
        else
          v16 = flags & 0xFFFFFFFE;
        _RSI->botInfo.flags = v16;
        _RSI->botInfo.nextCrouchCheckTime = level.time + 10000;
      }
      else
      {
        v9 = _RSI->botInfo.flags & 1;
      }
    }
  }
  __asm { vmovss  xmm6, cs:__real@3f800000 }
  if ( Bot_IsReloading(_RSI) )
    __asm { vcomiss xmm6, dword ptr [rsi+802Ch] }
  if ( GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&_RSI->botInfo.playerState->pm_flags, ACTIVE, 5u) && (GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&_RSI->botInfo.playerState->pm_flags, ACTIVE, 1u) || (playerState->mantleState.flags & 2) != 0) )
    v10 = 1;
  if ( Bot_EntityUsingRiotShield(*_RDI, 1) && Bot_CanSeeAndCanFireOnEnemy(_RSI) && Bot_EnemyFacesBot(_RSI) && (LOBYTE(_RSI->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) == 0 && Bot_EnemyIsAttackingMe(_RSI, 3000) )
    v10 = 1;
  if ( (_RSI->botInfo.traversal & 0x1F) != 0 && (_RSI->botInfo.traversal & 0x10000) != 0 )
    v10 = 1;
  v36 = v10;
  PathingStyle = Bot_GetPathingStyle(_RSI, NULL);
  if ( _RSI->botInfo.navigation.isInBadPlace || PathingStyle == BOT_PATH_STYLE_BEELINE || PathingStyle == BOT_PATH_STYLE_SCRIPTED || (LOBYTE(_RSI->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) != 0 || GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&_RSI->botInfo.playerState->pm_flags, ACTIVE, 5u) )
  {
    _RSI->botInfo.crouchEndTime = 0;
  }
  else if ( v9 )
  {
    crouchEndTime = _RSI->botInfo.crouchEndTime;
    if ( level.time < crouchEndTime || level.time - crouchEndTime > 750 )
      _RSI->botInfo.crouchEndTime = level.time + G_irand(1000, 2400);
  }
  v20 = _RSI->botInfo.pNavigator->GetAllowedStances(_RSI->botInfo.pNavigator);
  StopGoalStance = v20;
  v22 = abs8(cmd->forwardmove);
  if ( v22 > 32 || (v23 = 1, abs8(cmd->rightmove) > 0x20u) )
    v23 = 0;
  if ( v22 <= 0 && !abs8(cmd->rightmove) )
    v8 = 1;
  v24 = (_RSI->botInfo.flags & 0x4000000) == 0;
  if ( (Bot_AtScriptGoal(_RSI) && v8 || Bot_AtScriptGoalNode(_RSI) && v23) && v24 )
  {
    StopGoalStance = Bot_GetStopGoalStance(_RSI->botInfo.scriptGoal.node);
    goto LABEL_70;
  }
  __asm { vmovss  xmm1, dword ptr [rdi+244h]; goalRadius }
  if ( Bot_IsAtPathEnd(_RSI, *(float *)&_XMM1) && v23 && (_RSI->botInfo.flags & 0x800) != 0 )
  {
    StopGoalStance = 6;
    goto LABEL_70;
  }
  time = level.time;
  if ( _RSI->botInfo.proneEndTime > level.time )
  {
    if ( !Bot_ShouldRushEnemy(_RSI) )
    {
      StopGoalStance = v20 & 0xFFFFFFFC;
      goto LABEL_70;
    }
    time = level.time;
  }
  if ( v36 || _RSI->botInfo.crouchEndTime > time && !Bot_ShouldRushEnemy(_RSI) )
    StopGoalStance = v20 & 0xFFFFFFFE;
LABEL_70:
  currentForceStance = _RSI->botInfo.currentForceStance;
  switch ( currentForceStance )
  {
    case 4:
      StopGoalStance = 4;
      break;
    case 2:
      StopGoalStance = 2;
      break;
    case 1:
      StopGoalStance = 1;
      break;
  }
  v28 = DVARINT_bot_ForceStance;
  if ( !DVARINT_bot_ForceStance && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_ForceStance") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v28);
  integer = v28->current.integer;
  switch ( integer )
  {
    case 1:
      StopGoalStance = 1;
      break;
    case 2:
      StopGoalStance = 2;
      break;
    case 3:
      StopGoalStance = 4;
      break;
  }
  p_pm_flags = &playerState->pm_flags;
  v31 = StopGoalStance;
  if ( GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&playerState->pm_flags, ACTIVE, 0x21u) )
    StopGoalStance &= ~1u;
  if ( GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(p_pm_flags, ACTIVE, 0x23u) )
    StopGoalStance &= ~4u;
  if ( GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(p_pm_flags, ACTIVE, 0x22u) )
    StopGoalStance &= ~2u;
  if ( GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&_RSI->botInfo.playerState->pm_flags, ACTIVE, 1u) && !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&_RSI->botInfo.playerState->pm_flags, ACTIVE, 5u) && (StopGoalStance & 1) != 0 )
  {
    v32 = _RSI->botInfo.playerState;
    __asm { vmovss  [rsp+108h+results.fraction], xmm6 }
    Bounds = BG_Suit_GetBounds(v32->suitIndex, PM_EFF_STANCE_DEFAULT);
    G_Main_TraceCapsule(&results, &(*_RDI)->r.currentOrigin, &(*_RDI)->r.currentOrigin, Bounds, (*_RDI)->s.number, (*_RDI)->clipmask & 0xFDFFBFFF);
    if ( results.allsolid )
      StopGoalStance = StopGoalStance & 0xFFFFFFFC | 2;
  }
  if ( v31 && !StopGoalStance )
  {
    if ( GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(p_pm_flags, ACTIVE, 0x21u) || (v20 & 1) == 0 )
    {
      if ( GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(p_pm_flags, ACTIVE, 0x22u) || (v20 & 2) == 0 )
      {
        if ( !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(p_pm_flags, ACTIVE, 0x23u) && (v20 & 4) != 0 )
          StopGoalStance = 4;
      }
      else
      {
        StopGoalStance = 2;
      }
    }
    else
    {
      StopGoalStance = 1;
    }
  }
  if ( (StopGoalStance & 3) == 0 && Bot_EntityUsingRiotShield(*_RDI, 0) )
    StopGoalStance |= 2u;
  if ( !StopGoalStance )
  {
    if ( v20 )
    {
      if ( v20 == 7 )
        Com_Error_impl(ERR_DROP, (const ObfuscateErrorText)&stru_1440CD268, 5662i64);
      if ( (v20 & 2) != 0 )
      {
        LOBYTE(StopGoalStance) = 2;
      }
      else
      {
        LOBYTE(StopGoalStance) = 1;
        if ( (v20 & 4) != 0 )
          LOBYTE(StopGoalStance) = 4;
      }
    }
    else
    {
      Com_Error_impl(ERR_DROP, (const ObfuscateErrorText)&stru_1440CD220, 5661i64);
      LOBYTE(StopGoalStance) = 2;
    }
  }
  if ( (StopGoalStance & 1) == 0 )
  {
    if ( (StopGoalStance & 2) != 0 )
    {
      v34 = cmd->buttons & 0xFFFFFFFFFFFFFF3Fui64 | 0x80;
    }
    else
    {
      if ( (StopGoalStance & 4) == 0 )
        goto LABEL_127;
      v34 = cmd->buttons & 0xFFFFFFFFFFFFFF3Fui64 | 0x40;
    }
    cmd->buttons = v34;
    goto LABEL_127;
  }
  cmd->buttons &= 0xFFFFFFFFFFFFFF3Fui64;
LABEL_127:
  _RSI->botInfo.currentStanceFlags = StopGoalStance;
  __asm { vmovaps xmm6, [rsp+108h+var_48] }
}

/*
==============
Bot_UpdateStrafe
==============
*/
void Bot_UpdateStrafe(bot_data_t *botData)
{
  playerState_s *playerState; 
  const gentity_s *ent; 
  const gentity_s *v7; 
  AIBotInterface *m_pAI; 
  int CanFireOnEnemy; 
  BOOL v10; 
  bool v11; 
  char v12; 
  gentity_s *v31; 
  __int16 EntityIndex; 
  AIBotWrapper v43; 
  vec3_t right; 
  vec3_t vEyePosOut; 
  vec3_t vStart; 
  vec3_t vEnd; 

  _RBX = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13395, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !_RBX->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13396, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( !_RBX->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13397, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState )", (const char *)&queryFormat, "botData->botInfo.playerState") )
    __debugbreak();
  playerState = _RBX->botInfo.playerState;
  AICommonInterface::AICommonInterface(&v43.m_botInterface);
  v43.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v43.m_botAgentInterface);
  ent = _RBX->botInfo.ent;
  v7 = NULL;
  v43.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v43.m_pAI = NULL;
  AIBotWrapper::Setup(&v43, ent);
  m_pAI = v43.m_pAI;
  if ( !v43.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13411, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  CanFireOnEnemy = Bot_CanSeeAndCanFireOnEnemy(_RBX);
  v10 = _RBX->botInfo.combatStrafeDir != 0;
  if ( !CanFireOnEnemy )
  {
    if ( level.time > _RBX->botInfo.strafeCheckTime )
    {
      *(double *)&_XMM0 = G_random();
      __asm { vcomiss xmm0, dword ptr [rbx+7FDCh] }
      v10 = v11;
      _RBX->botInfo.strafeCheckTime = level.time + 1000;
    }
    if ( _RBX->botInfo.noPathFoundTime )
      v10 = 1;
  }
  if ( level.time < _RBX->botInfo.lastTimeOnLadder + 2500 )
    v10 = 0;
  if ( Bot_IsUsingTurret(_RBX) || !v10 )
  {
    _RBX->botInfo.combatStrafeDir = 0;
  }
  else
  {
    *(double *)&_XMM0 = G_random();
    __asm { vcomiss xmm0, cs:__real@3d4ccccd }
    if ( v11 | v12 || !_RBX->botInfo.combatStrafeDir )
    {
      __asm
      {
        vmovaps [rsp+0F8h+var_38], xmm7
        vmovaps [rsp+0F8h+var_48], xmm8
      }
      _RBX->botInfo.combatStrafeDir = 1;
      *(double *)&_XMM0 = G_random();
      __asm { vcomiss xmm0, cs:__real@3f000000 }
      if ( v11 )
        _RBX->botInfo.combatStrafeDir = -1;
      __asm
      {
        vmovss  xmm8, cs:__real@3f800000
        vmovss  xmm0, cs:__real@bf800000; min
        vmovaps xmm1, xmm8; max
      }
      *(double *)&_XMM0 = G_flrand(*(float *)&_XMM0, *(float *)&_XMM1);
      __asm
      {
        vmovaps xmm7, xmm0
        vmovss  xmm0, cs:__real@bf800000; min
        vmovaps xmm1, xmm8; max
      }
      *(double *)&_XMM0 = G_flrand(*(float *)&_XMM0, *(float *)&_XMM1);
      __asm
      {
        vmulss  xmm2, xmm0, xmm0
        vmovss  dword ptr [rbx+6E94h], xmm7
      }
      _RBX->botInfo.strafeDir.v[2] = 0.0;
      __asm
      {
        vmulss  xmm1, xmm7, xmm7
        vmovaps xmm7, [rsp+0F8h+var_38]
        vaddss  xmm2, xmm2, xmm1
        vsqrtss xmm3, xmm2, xmm2
        vcmpless xmm1, xmm3, cs:__real@80000000
        vmovaps xmm4, xmm0
        vblendvps xmm0, xmm3, xmm8, xmm1
        vdivss  xmm2, xmm8, xmm0
        vmovaps xmm8, [rsp+0F8h+var_48]
        vmulss  xmm0, xmm4, xmm2
        vmovss  dword ptr [rbx+6E90h], xmm0
        vmulss  xmm1, xmm2, dword ptr [rbx+6E94h]
        vmovss  dword ptr [rbx+6E94h], xmm1
        vmulss  xmm0, xmm2, dword ptr [rbx+6E98h]
        vmovss  dword ptr [rbx+6E98h], xmm0
      }
    }
    if ( CanFireOnEnemy && level.time - _RBX->botInfo.combatStrafeCheckTime > 350 )
    {
      if ( !EntHandle::isDefined(&_RBX->botInfo.sentient->targetEnt) || (v31 = EntHandle::ent(&_RBX->botInfo.sentient->targetEnt), (v7 = v31) == NULL) || !v31->sentient )
      {
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 13465, ASSERT_TYPE_ASSERT, "( enemy && enemy->sentient )", (const char *)&queryFormat, "enemy && enemy->sentient") )
          __debugbreak();
      }
      AngleVectors(&playerState->viewangles, NULL, &right, NULL);
      Sentient_GetEyePosition(_RBX->botInfo.ent->sentient, &vEyePosOut);
      Sentient_GetHeadPosition(v7->sentient, &vEnd);
      __asm
      {
        vxorps  xmm0, xmm0, xmm0
        vcvtsi2ss xmm0, xmm0, eax
        vmulss  xmm3, xmm0, cs:__real@41800000
        vmulss  xmm2, xmm3, dword ptr [rsp+0F8h+right]
        vaddss  xmm0, xmm2, dword ptr [rsp+0F8h+vEyePosOut]
        vmulss  xmm2, xmm3, dword ptr [rsp+0F8h+right+4]
        vmovss  dword ptr [rsp+0F8h+vStart], xmm0
        vaddss  xmm0, xmm2, dword ptr [rsp+0F8h+vEyePosOut+4]
        vmulss  xmm2, xmm3, dword ptr [rsp+0F8h+right+8]
        vmovss  dword ptr [rsp+0F8h+vStart+4], xmm0
        vaddss  xmm0, xmm2, dword ptr [rsp+0F8h+vEyePosOut+8]
        vmovss  dword ptr [rsp+0F8h+vStart+8], xmm0
      }
      EntityIndex = G_GetEntityIndex(v7);
      __asm { vmovss  xmm3, cs:__real@4cbebc20; fMaxDistSqrd }
      if ( !AICommonInterface::CanSeePointFrom(m_pAI, &vStart, &vEnd, *(float *)&_XMM3, EntityIndex) )
        _RBX->botInfo.combatStrafeDir = -_RBX->botInfo.combatStrafeDir;
      _RBX->botInfo.combatStrafeCheckTime = level.time;
    }
  }
}

/*
==============
Bot_UpdateStuckCheck
==============
*/
void Bot_UpdateStuckCheck(bot_data_t *botData)
{
  playerState_s *playerState; 
  int v6; 
  const dvar_t *v9; 
  const char *v10; 
  int v11; 
  const gentity_s *ent; 
  AIBotInterface *m_pAI; 
  char v15; 
  char v16; 
  int v17; 
  int v18; 
  BOOL v19; 
  int v20; 
  int IsStuckReacting; 
  gentity_s *v36; 
  bool v38; 
  int v49; 
  gentity_s *v53; 
  const dvar_t *v54; 
  const vec3_t *p_currentOrigin; 
  AIBotWrapper v56; 
  vec3_t outFinalGoal; 

  _R15 = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7811, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !_R15->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7812, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
    __debugbreak();
  if ( Bot_IsOnGround(_R15) )
  {
    _R15->botInfo.stuckCheckGroundTime = level.time;
  }
  else if ( level.time - _R15->botInfo.stuckCheckGroundTime < 2000 )
  {
    return;
  }
  playerState = _R15->botInfo.playerState;
  __asm { vmovaps [rsp+0C8h+var_38], xmm6 }
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\bgame\\bg_playerstate.h", 1145, ASSERT_TYPE_ASSERT, "(ps)", (const char *)&queryFormat, "ps") )
    __debugbreak();
  __asm { vmovss  xmm1, cs:__real@40a00000; maxAbsValueSize }
  MSG_UnpackUnsignedFloat(playerState->moveSpeedScaleMultiplier, *(float *)&_XMM1, 0xCu);
  v6 = 1;
  __asm
  {
    vmovss  xmm1, cs:__real@43fa0000
    vdivss  xmm6, xmm1, xmm0
  }
  if ( GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&_R15->botInfo.playerState->pm_flags, ACTIVE, 0) )
  {
    v9 = DCONST_DVARMPFLT_player_proneSpeedScale;
    if ( !DCONST_DVARMPFLT_player_proneSpeedScale )
    {
      v10 = "player_proneSpeedScale";
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if ( GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&_R15->botInfo.playerState->pm_flags, ACTIVE, 1u) )
  {
    v9 = DCONST_DVARMPFLT_player_crouchSpeedScale;
    if ( !DCONST_DVARMPFLT_player_crouchSpeedScale )
    {
      v10 = "player_crouchSpeedScale";
LABEL_19:
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 720, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", v10) )
        __debugbreak();
    }
LABEL_21:
    Dvar_CheckFrontendServerThread(v9);
    __asm { vdivss  xmm6, xmm6, dword ptr [rbx+28h] }
  }
  v11 = 0;
  AICommonInterface::AICommonInterface(&v56.m_botInterface);
  v56.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v56.m_botAgentInterface);
  ent = _R15->botInfo.ent;
  v56.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v56.m_pAI = NULL;
  AIBotWrapper::Setup(&v56, ent);
  m_pAI = v56.m_pAI;
  if ( !v56.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7366, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  if ( AICommonInterface::HasPath(m_pAI) && (LOBYTE(_R15->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) == 0 )
  {
    if ( !_R15->botInfo.pNavigator && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7370, ASSERT_TYPE_ASSERT, "( botInfo->pNavigator )", (const char *)&queryFormat, "botInfo->pNavigator") )
      __debugbreak();
    _R15->botInfo.pNavigator->GetCurPos(_R15->botInfo.pNavigator, &outFinalGoal);
    __asm
    {
      vmovss  xmm0, dword ptr [rsp+0C8h+outFinalGoal+8]
      vsubss  xmm1, xmm0, dword ptr [rax+138h]
      vcomiss xmm1, cs:__real@43000000
    }
    if ( !(v15 | v16) )
      v11 = 1;
  }
  v17 = Bot_AtScriptGoalNode(_R15);
  v18 = v17;
  v19 = (LOBYTE(_R15->scriptedAgentInfo.blackboard.m_ShootParams.m_Pos.v[0]) & 0x60) != 0 && !v17;
  v20 = Bot_NavPathExists(&_R15->botInfo);
  IsStuckReacting = Bot_IsStuckReacting(&_R15->botInfo);
  if ( !v20 || v18 || (LOBYTE(_R15->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) != 0 )
  {
    v36 = _R15->botInfo.ent;
    _R15->botInfo.pathProgressLast.v[0] = v36->r.currentOrigin.v[0];
    _R15->botInfo.pathProgressLast.v[1] = v36->r.currentOrigin.v[1];
    _R15->botInfo.pathProgressLast.v[2] = v36->r.currentOrigin.v[2];
    _R15->botInfo.pathProgressTime = 0;
  }
  else
  {
    _RCX = _R15->botInfo.ent;
    __asm
    {
      vmovss  xmm0, dword ptr [r15+2C0h]
      vmovss  xmm1, dword ptr [r15+2C4h]
      vsubss  xmm2, xmm1, dword ptr [rcx+134h]
      vmovss  xmm5, dword ptr [rcx+130h]
      vmulss  xmm1, xmm2, xmm2
      vsubss  xmm4, xmm0, xmm5
      vmovss  xmm0, dword ptr [r15+2C8h]
      vsubss  xmm3, xmm0, dword ptr [rcx+138h]
      vmulss  xmm0, xmm4, xmm4
      vaddss  xmm2, xmm1, xmm0
      vmulss  xmm1, xmm3, xmm3
      vaddss  xmm2, xmm2, xmm1
      vcomiss xmm2, cs:__real@451c4000
      vmovss  dword ptr [r15+2C0h], xmm5
    }
    _R15->botInfo.pathProgressLast.v[1] = _RCX->r.currentOrigin.v[1];
    _R15->botInfo.pathProgressLast.v[2] = _RCX->r.currentOrigin.v[2];
    _R15->botInfo.pathProgressTime = 0;
    __asm
    {
      vxorps  xmm0, xmm0, xmm0
      vcvtsi2ss xmm0, xmm0, eax
      vcomiss xmm0, xmm6
    }
  }
  if ( v20 && (v19 || v11) )
  {
    Bot_GetPathFinalGoal(&_R15->botInfo, &outFinalGoal);
    ++_R15->botInfo.stuckFrames;
    if ( !Bot_StuckShouldReact(&_R15->botInfo) || IsStuckReacting )
      v6 = 0;
    if ( !v11 )
    {
      if ( v6 )
      {
        v38 = level.time < _R15->botInfo.stuckReactionTime + 2000;
        *(double *)&_XMM0 = ((double (__fastcall *)(AINavigator *))_R15->botInfo.pNavigator->GetPathDistToGoal)(_R15->botInfo.pNavigator);
        __asm
        {
          vmovss  xmm1, dword ptr [r15+298h]
          vsubss  xmm3, xmm1, dword ptr [rsp+0C8h+outFinalGoal]
          vmovss  xmm1, dword ptr [r15+2A0h]
          vmovss  xmm2, dword ptr [r15+29Ch]
          vsubss  xmm5, xmm1, dword ptr [rsp+0C8h+outFinalGoal+8]
          vsubss  xmm4, xmm2, dword ptr [rsp+0C8h+outFinalGoal+4]
          vmovaps xmm6, xmm0
        }
        if ( v38 )
        {
          __asm
          {
            vmovss  xmm1, dword ptr [r15+28Ch]
            vsubss  xmm2, xmm1, xmm0
            vandps  xmm2, xmm2, cs:__xmm@7fffffff7fffffff7fffffff7fffffff
            vcomiss xmm2, cs:__real@41800000
          }
        }
        v49 = G_irand(300, 400);
        __asm
        {
          vmovss  xmm0, dword ptr [rsp+0C8h+outFinalGoal]
          vmovss  xmm1, dword ptr [rsp+0C8h+outFinalGoal+4]
        }
        _R15->botInfo.stuckReactionTime = level.time + v49;
        __asm
        {
          vmovss  dword ptr [r15+28Ch], xmm6
          vmovss  dword ptr [r15+298h], xmm0
          vmovss  xmm0, dword ptr [rsp+0C8h+outFinalGoal+8]
          vmovss  dword ptr [r15+2A0h], xmm0
          vmovss  dword ptr [r15+29Ch], xmm1
        }
        v53 = _R15->botInfo.ent;
        _R15->botInfo.pathProgressLast.v[0] = v53->r.currentOrigin.v[0];
        _R15->botInfo.pathProgressLast.v[1] = v53->r.currentOrigin.v[1];
        _R15->botInfo.pathProgressLast.v[2] = v53->r.currentOrigin.v[2];
        _R15->botInfo.pathProgressTime = 0;
      }
      v54 = DVARINT_ai_showPaths;
      if ( !DVARINT_ai_showPaths && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "ai_showPaths") )
        __debugbreak();
      Dvar_CheckFrontendServerThread(v54);
      if ( (v54->current.integer > 0 || Dvar_GetInt_Internal_DebugName(DVARINT_bot_DrawDebug, "bot_DrawDebug") == 1 || Dvar_GetInt_Internal_DebugName(DVARINT_bot_DrawDebug, "bot_DrawDebug") == 2) && Bot_ShouldDrawDebugForBot(_R15) && _R15->botInfo.stuckFrames >= 2u )
      {
        p_currentOrigin = &_R15->botInfo.ent->r.currentOrigin;
        if ( (LOBYTE(_R15->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) != 0 )
          G_DebugStar(p_currentOrigin, &colorCyan);
        else
          G_DebugStar(p_currentOrigin, &colorRed);
      }
      goto LABEL_50;
    }
    Bot_BadPath(_R15->botInfo.ent);
  }
  _R15->botInfo.stuckFrames = 0;
LABEL_50:
  __asm { vmovaps xmm6, [rsp+0C8h+var_38] }
}

/*
==============
Bot_UpdateThreat
==============
*/
void Bot_UpdateThreat(bot_data_t *botData)
{
  gentity_s *ent; 
  AIBotInterface *m_pAI; 
  gentity_s *v4; 
  const dvar_t *v5; 
  bool v6; 
  const dvar_t *v7; 
  int v8; 
  const dvar_t *v9; 
  gentity_s *v10; 
  gentity_s *v11; 
  sentient_s *sentient; 
  sentient_s *v13; 
  bool v14; 
  unsigned int v18; 
  gentity_s *v19; 
  __int64 v20; 
  sentient_s *v21; 
  gentity_s *v22; 
  sentient_s *v23; 
  int number; 
  __int64 v25; 
  __int64 v27; 
  __int64 v28; 
  AIBotWrapper v29; 
  bitarray<224> result; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6983, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6989, ASSERT_TYPE_ASSERT, "( botInfo->sentient )", (const char *)&queryFormat, "botInfo->sentient") )
    __debugbreak();
  AICommonInterface::AICommonInterface(&v29.m_botInterface);
  v29.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v29.m_botAgentInterface);
  ent = botData->botInfo.ent;
  v29.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v29.m_pAI = NULL;
  AIBotWrapper::Setup(&v29, ent);
  m_pAI = v29.m_pAI;
  if ( !v29.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6991, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
  {
    v4 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
    if ( v4 )
    {
      v5 = DVARINT_bot_NoTarget;
      if ( !DVARINT_bot_NoTarget && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_NoTarget") )
        __debugbreak();
      Dvar_CheckFrontendServerThread(v5);
      v6 = v5->current.integer == 1;
      v7 = DVARINT_bot_NoTarget;
      v8 = v6;
      if ( !DVARINT_bot_NoTarget && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_NoTarget") )
        __debugbreak();
      Dvar_CheckFrontendServerThread(v7);
      if ( v7->current.integer == 2 && v4->s.eType == ET_PLAYER )
        v8 = 1;
      v9 = DVARINT_bot_NoTarget;
      if ( !DVARINT_bot_NoTarget && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_NoTarget") )
        __debugbreak();
      Dvar_CheckFrontendServerThread(v9);
      if ( v9->current.integer == 3 && v4->s.eType != ET_PLAYER || v8 )
      {
        if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7018, ASSERT_TYPE_ASSERT, "( botInfo->sentient )", (const char *)&queryFormat, "botInfo->sentient") )
          __debugbreak();
        Sentient_SetEnemy(botData->botInfo.sentient, NULL, 1, 0);
      }
    }
  }
  Bot_UpdateMemoryAwareness(botData);
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
  {
    v10 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
    v11 = v10;
    if ( v10 )
    {
      if ( !v10->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7029, ASSERT_TYPE_ASSERT, "( enemy->sentient )", (const char *)&queryFormat, "enemy->sentient") )
        __debugbreak();
      sentient = botData->botInfo.sentient;
      v13 = v11->sentient;
      if ( !sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\sentient.h", 258, ASSERT_TYPE_ASSERT, "(self)", (const char *)&queryFormat, "self") )
        __debugbreak();
      if ( !v13 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\sentient.h", 259, ASSERT_TYPE_ASSERT, "(other)", (const char *)&queryFormat, "other") )
        __debugbreak();
      if ( level.teammode == TEAMMODE_FFA )
      {
        v14 = Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80);
        if ( Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) )
          _RAX = Com_TeamsSP_GetAllCombatTeamFlags();
        else
          _RAX = Com_TeamsMP_GetAllTeamFlags();
        __asm
        {
          vmovups xmm0, xmmword ptr [rax]
          vmovsd  xmm1, qword ptr [rax+10h]
        }
        v18 = _RAX->array[6] & 0xFFEFFFFF;
        __asm
        {
          vmovups xmmword ptr [rsp+0C8h+result.array], xmm0
          vmovsd  qword ptr [rsp+0C8h+result.array+10h], xmm1
        }
        if ( v14 )
          result.array[0] &= ~0x8000000u;
        result.array[6] = v18 & 0xFF9FFFFF;
      }
      else
      {
        Com_Teams_GetEnemyTeamFlags(&result, v13->eTeam);
      }
      if ( !bitarray_base<bitarray<224>>::testBit(&result, sentient->eTeam) )
        Bot_ClearEnemy(botData);
    }
  }
  m_pAI->UpdateThreat(m_pAI);
  if ( EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) )
  {
    v19 = EntHandle::ent(&botData->botInfo.sentient->targetEnt);
    if ( v19 )
    {
      if ( EntHandle::isDefined(&botData->botInfo.sentient->scriptTargetEnt) )
      {
        if ( EntHandle::ent(&botData->botInfo.sentient->scriptTargetEnt)->health > 0 )
        {
          if ( !v19->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7049, ASSERT_TYPE_ASSERT, "( enemy->sentient )", (const char *)&queryFormat, "enemy->sentient") )
            __debugbreak();
          v23 = botData->botInfo.sentient;
          number = v23->scriptTargetEnt.number;
          if ( (unsigned int)(number - 1) >= 0x7FF )
          {
            LODWORD(v28) = 2047;
            LODWORD(v27) = number - 1;
            if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 223, ASSERT_TYPE_ASSERT, "(unsigned)( number - 1 ) < (unsigned)( ENTITYNUM_NONE )", "number - 1 doesn't index ENTITYNUM_NONE\n\t%i not in [0, %i)", v27, v28) )
              __debugbreak();
          }
          v25 = v23->scriptTargetEnt.number;
          if ( (unsigned int)(v25 - 1) >= 0x800 )
          {
            LODWORD(v28) = 2048;
            LODWORD(v27) = v25 - 1;
            if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 207, ASSERT_TYPE_ASSERT, "(unsigned)( entityIndex ) < (unsigned)( ( 2048 ) )", "entityIndex doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v27, v28) )
              __debugbreak();
          }
          if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 208, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
            __debugbreak();
          if ( g_entities[v25 - 1].r.isInUse != g_entityIsInUse[v25 - 1] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 209, ASSERT_TYPE_ASSERT, "( g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex] )", (const char *)&queryFormat, "g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex]") )
            __debugbreak();
          if ( !g_entityIsInUse[v25 - 1] )
          {
            LODWORD(v28) = v23->scriptTargetEnt.number - 1;
            if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 224, ASSERT_TYPE_ASSERT, "( ( G_IsEntityInUse( number - 1 ) ) )", "%s\n\t( number - 1 ) = %i", "( G_IsEntityInUse( number - 1 ) )", v28) )
              __debugbreak();
          }
          if ( &g_entities[v23->scriptTargetEnt.number - 1] != v19 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7050, ASSERT_TYPE_ASSERT, "( botInfo->sentient->scriptTargetEnt.ent() == enemy )", (const char *)&queryFormat, "botInfo->sentient->scriptTargetEnt.ent() == enemy") )
            __debugbreak();
          LOBYTE(v20) = 17;
          m_pAI->GetPerfectInfo(m_pAI, v19->sentient, v20);
        }
        else
        {
          if ( !botData->botInfo.ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23393, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent )", (const char *)&queryFormat, "botData->botInfo.ent") )
            __debugbreak();
          if ( !botData->botInfo.ent->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23394, ASSERT_TYPE_ASSERT, "( botData->botInfo.ent->sentient )", (const char *)&queryFormat, "botData->botInfo.ent->sentient") )
            __debugbreak();
          v21 = botData->botInfo.ent->sentient;
          if ( EntHandle::isDefined(&v21->scriptTargetEnt) )
          {
            v22 = EntHandle::isDefined(&botData->botInfo.sentient->targetEnt) ? EntHandle::ent(&botData->botInfo.sentient->targetEnt) : 0i64;
            if ( v22 == EntHandle::ent(&v21->scriptTargetEnt) )
              Sentient_SetEnemy(botData->botInfo.ent->sentient, NULL, 1, 1);
          }
          EntHandle::setEnt(&v21->scriptTargetEnt, NULL);
          v21->scriptTargetHasTagEye = 0;
          v21->entityTargetThreat = 0.0;
        }
      }
      if ( Bot_CanReactEnemy(botData) && !Bot_CanSeeEnemy(botData) && !Bot_IsCamping(botData) && Bot_EnemyIsAttackingMe(botData, 500) && !Bot_IsSliding(botData) )
      {
        if ( Bot_CanSlide(botData) )
        {
          botData->botInfo.slideDesiredTime = level.time + 1000;
        }
        else if ( level.time - botData->botInfo.hideFromTime > 2000 )
        {
          if ( Bot_CanSeeSentientQuick(botData, v19->sentient) )
          {
            __asm { vmovss  xmm2, cs:__real@43960000; hideRange }
            Bot_HideFromEntity(botData, v19, *(float *)&_XMM2, 700);
          }
        }
      }
    }
  }
}

/*
==============
Bot_UpdateTraversalLook
==============
*/
__int64 Bot_UpdateTraversalLook(bot_data_t *botData, vec3_t *viewAnglesOut)
{
  pathnode_t *v5; 
  pathnode_t *v6; 
  __int64 result; 
  __int64 v8; 
  __int64 v9; 
  __int64 v10; 
  vec3_t pos; 
  vec3_t v12; 

  _RBP = viewAnglesOut;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11902, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !botData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11907, ASSERT_TYPE_ASSERT, "( botInfo->playerState )", (const char *)&queryFormat, "botInfo->playerState") )
    __debugbreak();
  if ( (LOBYTE(botData->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) == 0 )
    return 0i64;
  v5 = NULL;
  if ( Path_NodeValid(botData->botInfo.nodeNegotStart) )
    v6 = Path_ConvertIndexToNode(botData->botInfo.nodeNegotStart);
  else
    v6 = NULL;
  if ( Path_NodeValid(botData->botInfo.nodeNegotEnd) )
    v5 = Path_ConvertIndexToNode(botData->botInfo.nodeNegotEnd);
  if ( !v6 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11911, ASSERT_TYPE_ASSERT, "(negotiationStartNode)", "%s\n\tNo traversal start node.  botInfo->traversal = %i, botInfo->nodeNegotStart = %i, botInfo->traverseJumpTime = %i", "negotiationStartNode", botData->botInfo.traversal, botData->botInfo.nodeNegotStart, botData->botInfo.traverseJumpTime) )
    __debugbreak();
  if ( !v5 )
  {
    LODWORD(v10) = botData->botInfo.traverseJumpTime;
    LODWORD(v9) = botData->botInfo.nodeNegotEnd;
    LODWORD(v8) = botData->botInfo.traversal;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11911, ASSERT_TYPE_ASSERT, "(negotiationEndNode)", "%s\n\tNo traversal end node.  botInfo->traversal = %i, botInfo->nodeNegotEnd = %i, botInfo->traverseJumpTime = %i", "negotiationEndNode", v8, v9, v10) )
      __debugbreak();
  }
  pathnode_t::GetPos(v6, &pos);
  pathnode_t::GetPos(v5, &v12);
  *(float *)&_XMM0 = Bot_GetNodeTraversalYaw(v6, v5, ((unsigned int)botData->botInfo.traversal >> 2) & 1);
  result = 1i64;
  __asm { vmovss  dword ptr [rbp+4], xmm0 }
  return result;
}

/*
==============
Bot_UpdateTwitchVectors
==============
*/
void Bot_UpdateTwitchVectors(bot_info_t *botInfo, vec3_t *position, vec3_t *angles)
{
  char v10; 
  gentity_s *ent; 
  float c; 
  vec3_t end; 
  float s; 
  trace_t results; 

  _RBX = botInfo;
  if ( !botInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7408, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  __asm { vmovaps [rsp+0F8h+var_18], xmm6 }
  if ( position )
  {
    if ( level.time - _RBX->lastTwitchPosition > 500 )
    {
      *(double *)&_XMM0 = G_random();
      __asm { vcomiss xmm0, cs:__real@3ba3d70a }
      if ( v10 )
      {
        __asm
        {
          vmovss  xmm0, dword ptr [rbx+244h]
          vmulss  xmm1, xmm0, cs:__real@3f000000
          vminss  xmm6, xmm1, cs:__real@41000000
          vmovaps [rsp+0F8h+var_28], xmm7
        }
        _RDI = &_RBX->twitchOffsetPos;
        __asm
        {
          vmovaps [rsp+0F8h+var_38], xmm8
          vxorps  xmm7, xmm7, xmm7
        }
        *(double *)&_XMM0 = G_random();
        __asm
        {
          vmulss  xmm1, xmm0, cs:__real@40000000
          vmulss  xmm8, xmm1, cs:__real@40490fdb
        }
        if ( &s == (float *)&_RBX->twitchOffsetPos && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_vector.h", 887, ASSERT_TYPE_SANITY, "( &in != &out )", (const char *)&queryFormat, "&in != &out") )
          __debugbreak();
        __asm { vmovaps xmm0, xmm8; radians }
        FastSinCos(*(const float *)&_XMM0, &s, &c);
        __asm
        {
          vmulss  xmm1, xmm6, [rsp+0F8h+c]
          vmulss  xmm0, xmm7, [rsp+0F8h+s]
          vsubss  xmm4, xmm1, xmm0
          vmulss  xmm1, xmm7, [rsp+0F8h+c]
          vmulss  xmm0, xmm6, [rsp+0F8h+s]
          vmovss  dword ptr [rdi], xmm4
          vaddss  xmm1, xmm1, xmm0
          vmovss  dword ptr [rdi+4], xmm1
        }
        ent = _RBX->ent;
        __asm { vmovss  xmm1, dword ptr [rbx+23D0h] }
        _RDX = &_RBX->ent->r.currentOrigin;
        __asm
        {
          vaddss  xmm0, xmm4, dword ptr [rdx]
          vmovss  dword ptr [rsp+0F8h+end], xmm0
          vaddss  xmm2, xmm1, dword ptr [rdx+4]
          vmovss  dword ptr [rsp+0F8h+end+4], xmm2
          vmovss  xmm0, dword ptr [rdx+8]
          vmovss  dword ptr [rsp+0F8h+end+8], xmm0
        }
        G_Main_TraceCapsule(&results, _RDX, &end, &actorBox, ent->s.number, 2065);
        _RAX = _RBX->ent;
        __asm
        {
          vmovss  xmm0, [rsp+0F8h+results.fraction]
          vmulss  xmm7, xmm0, cs:__real@3f666666
          vmovss  xmm0, dword ptr [rsp+0F8h+end]
          vmovss  xmm4, dword ptr [rax+130h]
          vmovss  xmm6, dword ptr [rax+134h]
          vmovaps xmm8, [rsp+0F8h+var_38]
          vsubss  xmm1, xmm0, xmm4
          vmovss  xmm0, dword ptr [rsp+0F8h+end+4]
          vmulss  xmm2, xmm1, xmm7
          vaddss  xmm3, xmm2, xmm4
          vsubss  xmm1, xmm0, xmm6
          vmulss  xmm2, xmm1, xmm7
          vmovaps xmm7, [rsp+0F8h+var_28]
          vsubss  xmm5, xmm3, xmm4
          vmovss  dword ptr [rdi], xmm5
          vaddss  xmm3, xmm2, xmm6
          vsubss  xmm0, xmm3, xmm6
          vmovss  dword ptr [rdi+4], xmm0
        }
        _RBX->lastTwitchPosition = level.time;
      }
    }
  }
  if ( angles )
  {
    if ( level.time - _RBX->lastTwitchAngles > 300 )
    {
      *(double *)&_XMM0 = G_random();
      __asm { vcomiss xmm0, cs:__real@3ca3d70a }
      if ( v10 )
      {
        *(double *)&_XMM0 = G_random();
        __asm
        {
          vmulss  xmm0, xmm0, cs:__real@40a00000
          vmovss  dword ptr [rbx+23D4h], xmm0
        }
        *(double *)&_XMM0 = G_random();
        __asm
        {
          vmulss  xmm1, xmm0, cs:__real@40a00000
          vmovss  dword ptr [rbx+23D8h], xmm1
        }
        _RBX->lastTwitchAngles = level.time;
      }
    }
  }
  __asm { vmovaps xmm6, [rsp+0F8h+var_18] }
}

/*
==============
Bot_UpdateVariableZoomToggle
==============
*/
void Bot_UpdateVariableZoomToggle(bot_data_t *botData, usercmd_s *cmd)
{
  int v4; 
  int v5; 
  BOOL v6; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8026, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !cmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8027, ASSERT_TYPE_ASSERT, "( cmd )", (const char *)&queryFormat, "cmd") )
    __debugbreak();
  if ( Bot_Weap_WeaponHasVariableZoom(botData) )
  {
    if ( BG_InADS(botData->botInfo.playerState) )
    {
      v4 = level.time - botData->botInfo.enemyTrack.lastFireTime;
      v5 = 0;
      v6 = level.time > botData->botInfo.nextZoomPressTime;
      if ( BG_IsZoomButtonPressed(botData->botInfo.lastUserCmd) || BG_IsZoomButtonPressed(cmd) )
        v5 = 1;
      if ( v4 > 500 && v6 && !v5 )
      {
        if ( !Com_GameMode_SupportsFeature(WEAPONSTATES_NUM|WEAPON_LADDER_AIM) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8046, ASSERT_TYPE_ASSERT, "(Com_GameMode_SupportsFeature( Com_GameMode_Feature::WEAPON_VARIABLE_ZOOM ))", (const char *)&queryFormat, "Com_GameMode_SupportsFeature( Com_GameMode_Feature::WEAPON_VARIABLE_ZOOM )") )
          __debugbreak();
        cmd->buttons |= 0x2000000ui64;
        botData->botInfo.nextZoomPressTime = level.time + G_irand(1000, 6000);
      }
    }
    else
    {
      botData->botInfo.nextZoomPressTime = level.time + G_irand(0, 3000);
    }
  }
}

/*
==============
Bot_UpdateViewAngles
==============
*/
void Bot_UpdateViewAngles(bot_data_t *botData, vec3_t *viewAnglesOut)
{
  float *p_commandTime; 
  const gentity_s *v10; 
  char v39; 
  playerState_s *playerState; 
  bool v41; 
  bool v42; 
  const playerState_s *EntityPlayerStateConst; 
  float v53; 
  int v75; 
  __int128 v77; 
  vec3_t aimPoint; 
  vec3_t eyePoint; 
  vec3_t outLookaheadDir; 
  vec3_t vec; 

  _RBX = botData;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11697, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  p_commandTime = (float *)&_RBX->botInfo.playerState->commandTime;
  if ( !p_commandTime && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11700, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  Bot_UpdateAwareOfEnemy(_RBX);
  if ( _RBX->botInfo.aaSharedGlob.autoMeleeState == AIM_MELEE_STATE_UPDATING )
  {
    viewAnglesOut->v[0] = p_commandTime[118];
    viewAnglesOut->v[1] = p_commandTime[119];
    viewAnglesOut->v[2] = p_commandTime[120];
    viewAnglesOut->v[0] = _RBX->botInfo.aaSharedGlob.autoMeleePitch;
    viewAnglesOut->v[1] = _RBX->botInfo.aaSharedGlob.autoMeleeYaw;
    return;
  }
  if ( Bot_IsBlinded(_RBX) )
  {
    viewAnglesOut->v[0] = p_commandTime[118];
    viewAnglesOut->v[1] = p_commandTime[119];
    viewAnglesOut->v[2] = p_commandTime[120];
    return;
  }
  __asm
  {
    vmovaps [rsp+0F0h+var_40], xmm6
    vmovaps [rsp+0F0h+var_50], xmm7
  }
  if ( Bot_UpdateTraversalLook(_RBX, viewAnglesOut) )
    goto LABEL_59;
  if ( Bot_UpdateLookAtPoint(_RBX, 5, viewAnglesOut) || Bot_HasRemoteEyes(_RBX) )
    goto LABEL_46;
  __asm
  {
    vxorps  xmm0, xmm0, xmm0
    vmovss  dword ptr [rbp+57h+aimPoint], xmm0
    vmovss  dword ptr [rbp+57h+aimPoint+4], xmm0
    vmovss  dword ptr [rbp+57h+aimPoint+8], xmm0
    vmovss  dword ptr [rbp+57h+var_C0], xmm0
    vmovss  dword ptr [rbp+57h+var_C0+4], xmm0
    vmovss  dword ptr [rbp+57h+var_C0+8], xmm0
  }
  if ( Bot_IsThrowingGrenade(_RBX) || (*((_BYTE *)&_RBX->scriptedAgentInfo + 28228) & 2) != 0 )
  {
    v41 = _RBX->botInfo.ent == NULL;
    __asm { vmovaps [rsp+0F0h+var_60], xmm8 }
    if ( v41 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12275, ASSERT_TYPE_ASSERT, "( botInfo->ent )", (const char *)&queryFormat, "botInfo->ent", v77) )
      __debugbreak();
    if ( (*((_BYTE *)&_RBX->scriptedAgentInfo + 28228) & 2) != 0 )
    {
      __asm
      {
        vmovss  xmm6, dword ptr [rbx+2324h]
        vmovss  xmm7, dword ptr [rbx+2328h]
        vmovss  xmm8, dword ptr [rbx+232Ch]
      }
    }
    else
    {
      __asm
      {
        vmovss  xmm6, dword ptr [rbx+6DD8h]
        vmovss  xmm7, dword ptr [rbx+6DDCh]
        vmovss  xmm8, dword ptr [rbx+6DE0h]
      }
    }
    Bot_PredictPosition(_RBX->botInfo.ent, _RBX, &_RBX->botInfo.ent->r.currentOrigin, &aimPoint);
    __asm
    {
      vsubss  xmm4, xmm6, dword ptr [rbp+57h+aimPoint]
      vsubss  xmm5, xmm7, dword ptr [rbp+57h+aimPoint+4]
      vsubss  xmm6, xmm8, dword ptr [rbp+57h+aimPoint+8]
      vmulss  xmm0, xmm4, xmm4
      vmulss  xmm1, xmm5, xmm5
      vaddss  xmm2, xmm1, xmm0
      vmulss  xmm1, xmm6, xmm6
      vaddss  xmm2, xmm2, xmm1
      vmovss  xmm1, cs:__real@3f800000
      vsqrtss xmm3, xmm2, xmm2
      vcmpless xmm0, xmm3, cs:__real@80000000
      vblendvps xmm0, xmm3, xmm1, xmm0
      vdivss  xmm2, xmm1, xmm0
      vmulss  xmm0, xmm4, xmm2
      vmovss  dword ptr [rbp+57h+var_C0], xmm0
      vmulss  xmm0, xmm6, xmm2
      vmulss  xmm1, xmm5, xmm2
      vmovss  dword ptr [rbp+57h+var_C0+8], xmm0
      vmovss  dword ptr [rbp+57h+var_C0+4], xmm1
    }
    vectoangles((const vec3_t *)&v77, viewAnglesOut);
    v75 = Bot_GrenadeReleaseTime(_RBX);
    __asm { vmovaps xmm8, [rsp+0F0h+var_60] }
    if ( v75 - level.time <= 750 )
      viewAnglesOut->v[0] = _RBX->botInfo.grenadePitch;
LABEL_59:
    _RBX->botInfo.lookAtTime = 0;
    goto LABEL_46;
  }
  if ( EntHandle::isDefined(&_RBX->botInfo.sentient->targetEnt) )
    v10 = EntHandle::ent(&_RBX->botInfo.sentient->targetEnt);
  else
    v10 = NULL;
  if ( Bot_CanSeeAndCanFireOnEnemy(_RBX) || Bot_CanSeeEnemyThroughWall(_RBX) )
  {
    Bot_GetEnemyAimPoints(_RBX, v10, &aimPoint, &eyePoint);
    v41 = (_RBX->botInfo.scriptFlags & 0x20000) == 0;
    __asm
    {
      vmovss  xmm0, dword ptr [rbp+57h+aimPoint]
      vsubss  xmm7, xmm0, dword ptr [rbp+57h+eyePoint]
      vmovss  xmm1, dword ptr [rbp+57h+aimPoint+4]
      vsubss  xmm6, xmm1, dword ptr [rbp+57h+eyePoint+4]
      vmovss  xmm0, dword ptr [rbp+57h+aimPoint+8]
      vsubss  xmm5, xmm0, dword ptr [rbp+57h+eyePoint+8]
      vmulss  xmm0, xmm5, xmm5
      vmulss  xmm2, xmm6, xmm6
      vmulss  xmm1, xmm7, xmm7
      vaddss  xmm3, xmm2, xmm1
      vmovss  xmm1, cs:__real@3f800000
      vaddss  xmm2, xmm3, xmm0
      vsqrtss xmm4, xmm2, xmm2
      vcmpless xmm0, xmm4, cs:__real@80000000
      vblendvps xmm0, xmm4, xmm1, xmm0
      vdivss  xmm1, xmm1, xmm0
      vmulss  xmm0, xmm5, xmm1
      vmulss  xmm3, xmm7, xmm1
      vmulss  xmm2, xmm6, xmm1
      vunpcklps xmm1, xmm3, xmm2
      vmovss  dword ptr [rbp+57h+vec+8], xmm0
      vmovsd  qword ptr [rbp+57h+vec], xmm1
      vmovsd  qword ptr [rbp+57h+var_C0], xmm1
    }
    DWORD2(v77) = LODWORD(vec.v[2]);
    if ( v41 )
      goto LABEL_48;
    Nav_GetLookaheadDir(_RBX->botInfo.pNavigator, &outLookaheadDir);
    __asm
    {
      vmovss  xmm0, dword ptr [rbp+57h+outLookaheadDir]
      vmovss  xmm1, dword ptr [rbp+57h+outLookaheadDir+4]
      vmulss  xmm2, xmm1, dword ptr [rbp+57h+var_C0+4]
      vmulss  xmm3, xmm0, dword ptr [rbp+57h+var_C0]
      vmovss  xmm0, dword ptr [rbp+57h+outLookaheadDir+8]
      vmulss  xmm1, xmm0, dword ptr [rbp+57h+var_C0+8]
      vaddss  xmm4, xmm3, xmm2
      vaddss  xmm2, xmm4, xmm1
      vcomiss xmm2, cs:__real@3e800000
    }
    if ( !v39 )
    {
LABEL_48:
      vectoangles(&vec, viewAnglesOut);
      if ( Bot_IsThrowingGrenade(_RBX) && Bot_GrenadeReleaseTime(_RBX) - level.time <= 750 )
        viewAnglesOut->v[0] = _RBX->botInfo.grenadePitch;
      goto LABEL_46;
    }
  }
  if ( !Bot_UpdateLookAtPoint(_RBX, 3, viewAnglesOut) && !Bot_UpdateEnemyAwareLook(_RBX, viewAnglesOut) && !Bot_UpdateLookAtPoint(_RBX, 0, viewAnglesOut) )
  {
    _RBX->botInfo.lookAtTime = 0;
    if ( !_RBX->botInfo.currentAISearch.currentNodeCount || !Bot_UpdatePathingLook(_RBX, viewAnglesOut) )
    {
      if ( Bot_EntIsInLastStand(_RBX->botInfo.ent) )
        goto LABEL_47;
      if ( Bot_UpdateBadPathLook(_RBX, viewAnglesOut) || Bot_UpdatePathingLook(_RBX, viewAnglesOut) )
        goto LABEL_46;
      if ( (LOBYTE(_RBX->scriptedAgentInfo.blackboard.m_ShootParams.m_Pos.v[0]) & 4) != 0 && Bot_AtScriptGoal(_RBX) )
      {
        viewAnglesOut->v[1] = _RBX->botInfo.scriptGoal.yaw;
        Bot_ApplyTwitchVectors(&_RBX->botInfo, NULL, viewAnglesOut);
        goto LABEL_46;
      }
      playerState = _RBX->botInfo.playerState;
      v41 = playerState == NULL;
      if ( !playerState )
      {
        v42 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 12306, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps", v77);
        v41 = !v42;
        if ( v42 )
          __debugbreak();
      }
      _RAX = _RBX->botInfo.playerState;
      __asm
      {
        vmovss  xmm0, dword ptr [rax+3Ch]
        vmovss  xmm2, dword ptr [rax+40h]
        vmovss  xmm3, dword ptr [rax+44h]
        vmulss  xmm1, xmm0, xmm0
        vmulss  xmm0, xmm2, xmm2
        vaddss  xmm2, xmm1, xmm0
        vmulss  xmm1, xmm3, xmm3
        vaddss  xmm2, xmm2, xmm1
        vcomiss xmm2, cs:__real@3c23d70a
      }
      if ( !v41 )
        goto LABEL_47;
      if ( !_RBX->botInfo.lastUserCmd && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11247, ASSERT_TYPE_ASSERT, "( botData->botInfo.lastUserCmd )", (const char *)&queryFormat, "botData->botInfo.lastUserCmd") )
        __debugbreak();
      EntityPlayerStateConst = G_GetEntityPlayerStateConst(_RBX->botInfo.ent);
      if ( (G_PlayerUse_GetUseButtonMask(EntityPlayerStateConst) & _RBX->botInfo.lastUserCmd->buttons) != 0 || (LOBYTE(_RBX->scriptedAgentInfo.scriptGoal.pos.y) & 0x1F) != 0 || !Bot_UpdateSearchLook(_RBX) )
      {
LABEL_47:
        viewAnglesOut->v[0] = p_commandTime[118];
        viewAnglesOut->v[1] = p_commandTime[119];
        v53 = p_commandTime[120];
      }
      else
      {
        viewAnglesOut->v[0] = playerState->viewangles.v[0];
        viewAnglesOut->v[1] = playerState->viewangles.v[1];
        v53 = playerState->viewangles.v[2];
      }
      viewAnglesOut->v[2] = v53;
    }
  }
LABEL_46:
  __asm
  {
    vmovaps xmm6, [rsp+0F0h+var_40]
    vmovaps xmm7, [rsp+0F0h+var_50]
  }
}

/*
==============
Bot_UpdateXRayVision
==============
*/
void Bot_UpdateXRayVision(bot_data_t *botData)
{
  gentity_s *ent; 
  AIBotInterface *m_pAI; 
  sentient_s *i; 
  __int64 v5; 
  gentity_s *v6; 
  vec3_t *p_currentOrigin; 
  __int16 number; 
  const Weapon *v9; 
  AIBotWrapper v10; 
  bitarray<224> result; 

  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6478, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  AICommonInterface::AICommonInterface(&v10.m_botInterface);
  v10.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v10.m_botAgentInterface);
  ent = botData->botInfo.ent;
  v10.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v10.m_pAI = NULL;
  AIBotWrapper::Setup(&v10, ent);
  m_pAI = v10.m_pAI;
  if ( !v10.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6487, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  if ( level.time > botData->botInfo.lastXRayUpdate + 200 )
  {
    if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6493, ASSERT_TYPE_ASSERT, "( botInfo->sentient )", (const char *)&queryFormat, "botInfo->sentient") )
      __debugbreak();
    if ( !botData->botInfo.sentient->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6494, ASSERT_TYPE_ASSERT, "( botInfo->sentient->ent )", (const char *)&queryFormat, "botInfo->sentient->ent") )
      __debugbreak();
    Sentient_EnemyTeamFlags(&result, botData->botInfo.sentient->eTeam);
    for ( i = Sentient_FirstSentient(&result); i; i = Sentient_NextSentient(i, &result) )
    {
      if ( i->inuse )
      {
        if ( !i->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6503, ASSERT_TYPE_ASSERT, "( sentient->ent )", (const char *)&queryFormat, "sentient->ent") )
          __debugbreak();
        if ( Bot_CanSeeEntityThroughWall(botData, i->ent) )
        {
          LOBYTE(v5) = 25;
          m_pAI->GetPerfectInfo(m_pAI, i, v5);
          if ( Bot_IsHardwareEnt(i->ent) && GameModeFlagContainer<enum BgEntityFlagsCommon,enum BgEntityFlagsSP,enum BgEntityFlagsMP,64>::TestFlagStrict(&i->ent->flags, (BgEntityFlagsMP)34) && !Bot_MemoryFindEvent(botData, BOT_MEM_PATHING_AVOID_RADIUS_LOS, i->ent->s.number, &i->ent->r.currentOrigin, level.time, level.time - 10000) )
          {
            v6 = i->ent;
            p_currentOrigin = &botData->botInfo.ent->r.currentOrigin;
            number = i->ent->s.number;
            v9 = Bot_Weap_None();
            Bot_MemoryWriteEvent(botData, BOT_MEM_PATHING_AVOID_RADIUS_LOS, v9, &v6->r.currentOrigin, p_currentOrigin, number);
            botData->botInfo.pNavigator->ClearPath(botData->botInfo.pNavigator);
          }
        }
      }
    }
    botData->botInfo.lastXRayUpdate = level.time + G_irand(0, 100);
  }
}

/*
==============
Bot_UpdateYaw
==============
*/

float __fastcall Bot_UpdateYaw(bot_data_t *botData, double currentYaw, double targetYaw, int forceSlow)
{
  int IsThirdPersonRemoteVehicle; 

  __asm
  {
    vmovaps [rsp+88h+var_18], xmm6
    vmovaps [rsp+88h+var_28], xmm7
  }
  _RBX = botData;
  __asm
  {
    vmovaps [rsp+88h+var_38], xmm8
    vmovaps [rsp+88h+var_48], xmm9
    vmovaps [rsp+88h+var_58], xmm12
    vmovaps xmm8, xmm2
    vmovaps xmm7, xmm1
  }
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 18064, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  __asm { vmovss  xmm6, dword ptr [rbx+8004h] }
  if ( forceSlow )
    __asm { vmovss  xmm6, dword ptr [rbx+8008h] }
  __asm
  {
    vsubss  xmm0, xmm8, xmm7
    vmulss  xmm3, xmm0, cs:__real@3b360b61
    vaddss  xmm1, xmm3, cs:__real@3f000000
    vxorps  xmm0, xmm0, xmm0
    vmovss  xmm1, xmm0, xmm1
    vxorps  xmm12, xmm12, xmm12
    vroundss xmm2, xmm12, xmm1, 1
    vsubss  xmm0, xmm3, xmm2
    vmulss  xmm1, xmm0, cs:__real@43b40000
    vandps  xmm1, xmm1, cs:__xmm@7fffffff7fffffff7fffffff7fffffff
    vcomiss xmm1, cs:__real@42480000
    vcomiss xmm1, cs:__real@42c80000
  }
  _RBX->botInfo.flags |= 0x10u;
  __asm
  {
    vmulss  xmm0, xmm1, cs:__real@3bb60b61
    vmulss  xmm1, xmm0, xmm6
    vsubss  xmm2, xmm6, xmm1
    vmaxss  xmm6, xmm2, cs:__real@3f800000
  }
  if ( !level.frameDuration && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_level_locals.h", 349, ASSERT_TYPE_ASSERT, "(level.frameDuration)", "%s\n\tAccessing frame duration before it's been set", "level.frameDuration") )
    __debugbreak();
  __asm
  {
    vxorps  xmm9, xmm9, xmm9
    vcvtsi2ss xmm9, xmm9, cs:?level@@3Ulevel_locals_t@@A.frameDuration; level_locals_t level
    vmulss  xmm3, xmm9, cs:__real@3a83126f; deltaTime
    vmovaps xmm2, xmm6; rate
    vmovaps xmm1, xmm7; cur
    vmovaps xmm0, xmm8; tgt
  }
  *(double *)&_XMM0 = DiffTrackAngle(*(float *)&_XMM0, *(float *)&_XMM1, *(float *)&_XMM2, *(float *)&_XMM3);
  __asm { vmovaps xmm6, xmm0 }
  if ( (unsigned int)Bot_IsRemoteEyesVehicle(_RBX) )
  {
    _RDI = Bot_GetRemoteEyesVehicleDef(_RBX);
    IsThirdPersonRemoteVehicle = Bot_IsThirdPersonRemoteVehicle(_RBX);
    if ( IsThirdPersonRemoteVehicle )
      __asm { vmovss  xmm0, dword ptr [rdi+0C64h] }
    else
      __asm { vmovss  xmm0, dword ptr [rdi+0C30h] }
    __asm
    {
      vmulss  xmm0, xmm9, xmm0
      vmulss  xmm5, xmm0, cs:__real@3a83126f
      vxorps  xmm0, xmm0, xmm0
      vsubss  xmm1, xmm6, xmm7
      vmulss  xmm4, xmm1, cs:__real@3b360b61
      vaddss  xmm2, xmm4, cs:__real@3f000000
      vmovss  xmm1, xmm0, xmm2
      vroundss xmm3, xmm12, xmm1, 1
      vsubss  xmm0, xmm4, xmm3
      vmulss  xmm3, xmm0, cs:__real@43b40000
      vxorps  xmm0, xmm0, xmm0
      vucomiss xmm5, xmm0
    }
    if ( IsThirdPersonRemoteVehicle )
    {
      __asm
      {
        vxorps  xmm1, xmm5, cs:__xmm@80000000800000008000000080000000; min
        vmovaps xmm2, xmm5; max
        vmovaps xmm0, xmm3; val
      }
      *(double *)&_XMM0 = I_fclamp(*(float *)&_XMM0, *(float *)&_XMM1, *(float *)&_XMM2);
    }
    __asm
    {
      vaddss  xmm6, xmm0, xmm7
      vmovaps xmm0, xmm6; angle
    }
    if ( (unsigned int)Bot_IsThirdPersonRemoteVehicle(_RBX) )
    {
      __asm { vmovss  xmm1, dword ptr [rdi+0C68h]; clamp }
      *(double *)&_XMM0 = BG_Vehicle_ClampCameraAngle(*(float *)&_XMM0, *(float *)&_XMM1);
    }
  }
  else
  {
    __asm { vmovaps xmm0, xmm6 }
  }
  __asm
  {
    vmovaps xmm6, [rsp+88h+var_18]
    vmovaps xmm7, [rsp+88h+var_28]
    vmovaps xmm8, [rsp+88h+var_38]
    vmovaps xmm9, [rsp+88h+var_48]
    vmovaps xmm12, [rsp+88h+var_58]
  }
  return *(float *)&_XMM0;
}

/*
==============
Bot_UpdateZoneObstacles
==============
*/
void Bot_UpdateZoneObstacles(bot_info_t *botInfo)
{
  ;
}

/*
==============
Bot_ValidateMatchData
==============
*/
void Bot_ValidateMatchData(const bot_data_t *botData)
{
  bool v6; 
  bool v7; 
  bool v16; 
  bool v23; 
  bool v30; 
  bool v33; 
  bool v36; 
  bool v41; 
  bool v44; 
  bool v47; 
  bool v52; 
  bool v74; 
  bool v77; 
  bool v80; 
  bool v83; 
  bool v86; 
  bool v89; 
  bool v92; 
  bool v95; 
  bool v98; 
  bool v101; 
  bool v104; 
  bool v107; 
  bool v110; 
  bool v113; 
  bool v116; 
  bool v119; 
  bool v122; 
  unsigned int burstFireType; 
  bool v126; 
  bool v127; 
  bool v128; 
  bool v129; 
  bool v131; 
  bool v135; 
  bool v138; 
  __int64 v144; 
  double v145; 
  double v146; 
  double v147; 
  double v148; 
  double v149; 
  double v150; 
  double v151; 
  double v152; 
  double v153; 
  double v154; 
  double v155; 
  double v156; 
  double v157; 
  double v158; 
  double v159; 
  double v160; 
  double v161; 
  double v162; 
  double v163; 
  double v164; 
  double v165; 
  double v166; 
  double v167; 
  double v168; 
  double v169; 
  double v170; 
  double v171; 
  double v172; 
  __int64 v173; 
  double v174; 
  double v175; 
  double v176; 
  double v177; 
  double v178; 
  double v179; 
  double v180; 
  double v181; 
  double v182; 
  double v183; 
  double v184; 
  double v185; 
  double v186; 
  double v187; 
  double v188; 
  double v189; 
  double v190; 
  double v191; 
  double v192; 
  double v193; 
  double v194; 
  double v195; 
  double v196; 
  double v197; 
  double v198; 
  double v199; 
  double v200; 
  double v201; 
  double v202; 
  double v203; 
  double v204; 
  double v205; 
  double v206; 
  double v207; 
  double v208; 
  double v209; 
  double v210; 
  double v211; 
  double v212; 
  double v213; 
  double v214; 
  double v215; 
  double v216; 
  double v217; 
  double v218; 
  double v219; 
  double v220; 

  __asm { vmovaps [rsp+88h+var_18], xmm6 }
  _RBX = botData;
  __asm
  {
    vmovaps [rsp+88h+var_28], xmm7
    vmovaps [rsp+88h+var_38], xmm8
    vmovaps [rsp+88h+var_48], xmm9
  }
  v6 = botData == NULL;
  if ( !botData )
  {
    v7 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 638, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData");
    v6 = !v7;
    if ( v7 )
      __debugbreak();
  }
  __asm
  {
    vmovss  xmm0, dword ptr [rbx+7F90h]
    vxorps  xmm6, xmm6, xmm6
    vcomiss xmm0, xmm6
    vxorpd  xmm8, xmm8, xmm8
    vmovss  xmm0, dword ptr [rbx+7F94h]
    vcomiss xmm0, xmm6
    vmovss  xmm1, dword ptr [rbx+7F90h]
    vmovss  xmm0, dword ptr [rbx+7F94h]
    vcomiss xmm1, xmm0
  }
  if ( !v6 )
  {
    __asm
    {
      vcvtss2sd xmm0, xmm0, xmm0
      vmovsd  [rsp+88h+var_58], xmm0
      vcvtss2sd xmm1, xmm1, xmm1
      vmovsd  [rsp+88h+var_60], xmm1
    }
    v16 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 645, ASSERT_TYPE_ASSERT, "( botMatchData->minInaccuracy ) <= ( botMatchData->maxInaccuracy )", "botMatchData->minInaccuracy <= botMatchData->maxInaccuracy\n\t%g, %g", v145, v174);
    v6 = !v16;
    if ( v16 )
      __debugbreak();
  }
  __asm
  {
    vmovss  xmm0, dword ptr [rbx+7F9Ch]
    vcomiss xmm0, xmm6
    vmovss  xmm0, dword ptr [rbx+7FA0h]
    vcomiss xmm0, xmm6
    vmovss  xmm1, dword ptr [rbx+7F9Ch]
    vmovss  xmm0, dword ptr [rbx+7FA0h]
    vcomiss xmm1, xmm0
  }
  if ( !v6 )
  {
    __asm
    {
      vcvtss2sd xmm0, xmm0, xmm0
      vmovsd  [rsp+88h+var_58], xmm0
      vcvtss2sd xmm1, xmm1, xmm1
      vmovsd  [rsp+88h+var_60], xmm1
    }
    v23 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 649, ASSERT_TYPE_ASSERT, "( botMatchData->minAimResponse ) <= ( botMatchData->maxAimResponse )", "botMatchData->minAimResponse <= botMatchData->maxAimResponse\n\t%g, %g", v146, v175);
    v6 = !v23;
    if ( v23 )
      __debugbreak();
  }
  __asm
  {
    vmovss  xmm0, dword ptr [rbx+7FA4h]
    vcomiss xmm0, xmm6
    vmovss  xmm0, dword ptr [rbx+7FA8h]
    vcomiss xmm0, xmm6
    vmovss  xmm1, dword ptr [rbx+7FA4h]
    vmovss  xmm0, dword ptr [rbx+7FA8h]
    vcomiss xmm1, xmm0
  }
  if ( !v6 )
  {
    __asm
    {
      vcvtss2sd xmm0, xmm0, xmm0
      vmovsd  [rsp+88h+var_58], xmm0
      vcvtss2sd xmm1, xmm1, xmm1
      vmovsd  [rsp+88h+var_60], xmm1
    }
    v30 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 653, ASSERT_TYPE_ASSERT, "( botMatchData->minNonAutoFireDelay ) <= ( botMatchData->maxNonAutoFireDelay )", "botMatchData->minNonAutoFireDelay <= botMatchData->maxNonAutoFireDelay\n\t%g, %g", v147, v176);
    v6 = !v30;
    if ( v30 )
      __debugbreak();
  }
  __asm
  {
    vmovss  xmm0, dword ptr [rbx+7FB4h]
    vcomiss xmm0, xmm6
  }
  if ( v6 )
  {
    __asm
    {
      vcvtss2sd xmm0, xmm0, xmm0
      vmovsd  [rsp+88h+var_58], xmm8
      vmovsd  [rsp+88h+var_60], xmm0
    }
    v33 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 655, ASSERT_TYPE_ASSERT, "( botMatchData->minBurstFireTime ) > ( 0.0f )", "botMatchData->minBurstFireTime > 0.0f\n\t%g, %g", v148, v177);
    v6 = !v33;
    if ( v33 )
      __debugbreak();
  }
  __asm
  {
    vmovss  xmm0, dword ptr [rbx+7FB8h]
    vcomiss xmm0, xmm6
  }
  if ( v6 )
  {
    __asm
    {
      vcvtss2sd xmm0, xmm0, xmm0
      vmovsd  [rsp+88h+var_58], xmm8
      vmovsd  [rsp+88h+var_60], xmm0
    }
    v36 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 656, ASSERT_TYPE_ASSERT, "( botMatchData->maxBurstFireTime ) > ( 0.0f )", "botMatchData->maxBurstFireTime > 0.0f\n\t%g, %g", v149, v178);
    v6 = !v36;
    if ( v36 )
      __debugbreak();
  }
  __asm
  {
    vmovss  xmm1, dword ptr [rbx+7FB4h]
    vmovss  xmm0, dword ptr [rbx+7FB8h]
    vcomiss xmm1, xmm0
  }
  if ( !v6 )
  {
    __asm
    {
      vcvtss2sd xmm0, xmm0, xmm0
      vmovsd  [rsp+88h+var_58], xmm0
      vcvtss2sd xmm1, xmm1, xmm1
      vmovsd  [rsp+88h+var_60], xmm1
    }
    v41 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 657, ASSERT_TYPE_ASSERT, "( botMatchData->minBurstFireTime ) <= ( botMatchData->maxBurstFireTime )", "botMatchData->minBurstFireTime <= botMatchData->maxBurstFireTime\n\t%g, %g", v150, v179);
    v6 = !v41;
    if ( v41 )
      __debugbreak();
  }
  __asm
  {
    vmovss  xmm0, dword ptr [rbx+7FBCh]
    vcomiss xmm0, xmm6
  }
  if ( v6 )
  {
    __asm
    {
      vcvtss2sd xmm0, xmm0, xmm0
      vmovsd  [rsp+88h+var_58], xmm8
      vmovsd  [rsp+88h+var_60], xmm0
    }
    v44 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 659, ASSERT_TYPE_ASSERT, "( botMatchData->minTimeBetweenBursts ) > ( 0.0f )", "botMatchData->minTimeBetweenBursts > 0.0f\n\t%g, %g", v151, v180);
    v6 = !v44;
    if ( v44 )
      __debugbreak();
  }
  __asm
  {
    vmovss  xmm0, dword ptr [rbx+7FC0h]
    vcomiss xmm0, xmm6
  }
  if ( v6 )
  {
    __asm
    {
      vcvtss2sd xmm0, xmm0, xmm0
      vmovsd  [rsp+88h+var_58], xmm8
      vmovsd  [rsp+88h+var_60], xmm0
    }
    v47 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 660, ASSERT_TYPE_ASSERT, "( botMatchData->maxTimeBetweenBursts ) > ( 0.0f )", "botMatchData->maxTimeBetweenBursts > 0.0f\n\t%g, %g", v152, v181);
    v6 = !v47;
    if ( v47 )
      __debugbreak();
  }
  __asm
  {
    vmovss  xmm1, dword ptr [rbx+7FBCh]
    vmovss  xmm0, dword ptr [rbx+7FC0h]
    vcomiss xmm1, xmm0
  }
  if ( !v6 )
  {
    __asm
    {
      vcvtss2sd xmm0, xmm0, xmm0
      vmovsd  [rsp+88h+var_58], xmm0
      vcvtss2sd xmm1, xmm1, xmm1
      vmovsd  [rsp+88h+var_60], xmm1
    }
    v52 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 661, ASSERT_TYPE_ASSERT, "( botMatchData->minTimeBetweenBursts ) <= ( botMatchData->maxTimeBetweenBursts )", "botMatchData->minTimeBetweenBursts <= botMatchData->maxTimeBetweenBursts\n\t%g, %g", v153, v182);
    v6 = !v52;
    if ( v52 )
      __debugbreak();
  }
  __asm
  {
    vmovss  xmm0, dword ptr [rbx+7F98h]
    vcomiss xmm0, xmm6
    vmovss  xmm0, dword ptr [rbx+7FACh]
    vcomiss xmm0, xmm6
    vmovss  xmm0, dword ptr [rbx+7FB0h]
    vcomiss xmm0, xmm6
    vmovss  xmm0, dword ptr [rbx+7FC4h]
    vcomiss xmm0, xmm6
    vmovss  xmm0, dword ptr [rbx+7FC8h]
    vcomiss xmm0, xmm6
    vmovss  xmm0, dword ptr [rbx+7FCCh]
    vcomiss xmm0, xmm6
    vmovss  xmm0, dword ptr [rbx+7FD0h]
    vcomiss xmm0, xmm6
    vmovss  xmm0, dword ptr [rbx+7FD4h]
    vcomiss xmm0, xmm6
    vmovss  xmm0, dword ptr [rbx+7FD8h]
    vcomiss xmm0, xmm6
    vmovss  xmm0, dword ptr [rbx+7FF8h]
    vcomiss xmm0, xmm6
    vmovss  xmm0, dword ptr [rbx+7FFCh]
    vcomiss xmm0, xmm6
    vmovss  xmm0, dword ptr [rbx+8000h]
    vcomiss xmm0, xmm6
    vmovss  xmm0, dword ptr [rbx+7FE4h]
    vcomiss xmm0, xmm6
    vmovss  xmm0, dword ptr [rbx+8004h]
    vmovss  xmm7, cs:__real@3f800000
    vcomiss xmm0, xmm7
    vmovsd  xmm9, cs:__real@3ff0000000000000
    vmovss  xmm0, dword ptr [rbx+8008h]
    vcomiss xmm0, xmm7
    vmovss  xmm0, dword ptr [rbx+800Ch]
    vcomiss xmm0, xmm7
    vmovss  xmm0, dword ptr [rbx+8010h]
    vcomiss xmm0, xmm7
    vmovss  xmm0, dword ptr [rbx+7FDCh]
    vcomiss xmm0, xmm6
    vcomiss xmm0, xmm7
  }
  if ( !v6 )
  {
    __asm
    {
      vmovsd  [rsp+88h+var_50], xmm9
      vcvtss2sd xmm0, xmm0, xmm0
      vmovsd  [rsp+88h+var_58], xmm8
      vmovsd  [rsp+88h+var_60], xmm0
    }
    v74 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 688, ASSERT_TYPE_ASSERT, "( 0.0f ) <= ( botMatchData->strafeChance ) && ( botMatchData->strafeChance ) <= ( 1.0f )", "botMatchData->strafeChance not in [0.0f, 1.0f]\n\t%g not in [%g, %g]", v154, v183, v202);
    v6 = !v74;
    if ( v74 )
      __debugbreak();
  }
  __asm
  {
    vmovss  xmm0, dword ptr [rbx+7FE0h]
    vcomiss xmm0, xmm6
    vcomiss xmm0, xmm7
  }
  if ( !v6 )
  {
    __asm
    {
      vmovsd  [rsp+88h+var_50], xmm9
      vcvtss2sd xmm0, xmm0, xmm0
      vmovsd  [rsp+88h+var_58], xmm8
      vmovsd  [rsp+88h+var_60], xmm0
    }
    v77 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 689, ASSERT_TYPE_ASSERT, "( 0.0f ) <= ( botMatchData->diveChance ) && ( botMatchData->diveChance ) <= ( 1.0f )", "botMatchData->diveChance not in [0.0f, 1.0f]\n\t%g not in [%g, %g]", v155, v184, v203);
    v6 = !v77;
    if ( v77 )
      __debugbreak();
  }
  __asm
  {
    vmovss  xmm0, dword ptr [rbx+7FE8h]
    vcomiss xmm0, xmm6
    vcomiss xmm0, xmm7
  }
  if ( !v6 )
  {
    __asm
    {
      vmovsd  [rsp+88h+var_50], xmm9
      vcvtss2sd xmm0, xmm0, xmm0
      vmovsd  [rsp+88h+var_58], xmm8
      vmovsd  [rsp+88h+var_60], xmm0
    }
    v80 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 690, ASSERT_TYPE_ASSERT, "( 0.0f ) <= ( botMatchData->slideChance ) && ( botMatchData->slideChance ) <= ( 1.0f )", "botMatchData->slideChance not in [0.0f, 1.0f]\n\t%g not in [%g, %g]", v156, v185, v204);
    v6 = !v80;
    if ( v80 )
      __debugbreak();
  }
  __asm
  {
    vmovss  xmm0, dword ptr [rbx+7FECh]
    vcomiss xmm0, xmm6
    vcomiss xmm0, xmm7
  }
  if ( !v6 )
  {
    __asm
    {
      vmovsd  [rsp+88h+var_50], xmm9
      vcvtss2sd xmm0, xmm0, xmm0
      vmovsd  [rsp+88h+var_58], xmm8
      vmovsd  [rsp+88h+var_60], xmm0
    }
    v83 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 691, ASSERT_TYPE_ASSERT, "( 0.0f ) <= ( botMatchData->cornerFireChance ) && ( botMatchData->cornerFireChance ) <= ( 1.0f )", "botMatchData->cornerFireChance not in [0.0f, 1.0f]\n\t%g not in [%g, %g]", v157, v186, v205);
    v6 = !v83;
    if ( v83 )
      __debugbreak();
  }
  __asm
  {
    vmovss  xmm0, dword ptr [rbx+7FF0h]
    vcomiss xmm0, xmm6
    vcomiss xmm0, xmm7
  }
  if ( !v6 )
  {
    __asm
    {
      vmovsd  [rsp+88h+var_50], xmm9
      vcvtss2sd xmm0, xmm0, xmm0
      vmovsd  [rsp+88h+var_58], xmm8
      vmovsd  [rsp+88h+var_60], xmm0
    }
    v86 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 692, ASSERT_TYPE_ASSERT, "( 0.0f ) <= ( botMatchData->cornerJumpChance ) && ( botMatchData->cornerJumpChance ) <= ( 1.0f )", "botMatchData->cornerJumpChance not in [0.0f, 1.0f]\n\t%g not in [%g, %g]", v158, v187, v206);
    v6 = !v86;
    if ( v86 )
      __debugbreak();
  }
  __asm
  {
    vmovss  xmm0, dword ptr [rbx+7FF4h]
    vcomiss xmm0, xmm6
    vcomiss xmm0, xmm7
  }
  if ( !v6 )
  {
    __asm
    {
      vmovsd  [rsp+88h+var_50], xmm9
      vcvtss2sd xmm0, xmm0, xmm0
      vmovsd  [rsp+88h+var_58], xmm8
      vmovsd  [rsp+88h+var_60], xmm0
    }
    v89 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 693, ASSERT_TYPE_ASSERT, "( 0.0f ) <= ( botMatchData->throwKnifeChance ) && ( botMatchData->throwKnifeChance ) <= ( 1.0f )", "botMatchData->throwKnifeChance not in [0.0f, 1.0f]\n\t%g not in [%g, %g]", v159, v188, v207);
    v6 = !v89;
    if ( v89 )
      __debugbreak();
  }
  __asm
  {
    vmovss  xmm0, dword ptr [rbx+8018h]
    vcomiss xmm0, xmm6
    vcomiss xmm0, xmm7
  }
  if ( !v6 )
  {
    __asm
    {
      vmovsd  [rsp+88h+var_50], xmm9
      vcvtss2sd xmm0, xmm0, xmm0
      vmovsd  [rsp+88h+var_58], xmm8
      vmovsd  [rsp+88h+var_60], xmm0
    }
    v92 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 694, ASSERT_TYPE_ASSERT, "( 0.0f ) <= ( botMatchData->breakMelee ) && ( botMatchData->breakMelee ) <= ( 1.0f )", "botMatchData->breakMelee not in [0.0f, 1.0f]\n\t%g not in [%g, %g]", v160, v189, v208);
    v6 = !v92;
    if ( v92 )
      __debugbreak();
  }
  __asm
  {
    vmovss  xmm0, dword ptr [rbx+801Ch]
    vcomiss xmm0, xmm6
    vcomiss xmm0, xmm7
  }
  if ( !v6 )
  {
    __asm
    {
      vmovsd  [rsp+88h+var_50], xmm9
      vcvtss2sd xmm0, xmm0, xmm0
      vmovsd  [rsp+88h+var_58], xmm8
      vmovsd  [rsp+88h+var_60], xmm0
    }
    v95 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 695, ASSERT_TYPE_ASSERT, "( 0.0f ) <= ( botMatchData->hearingDeaf ) && ( botMatchData->hearingDeaf ) <= ( 1.0f )", "botMatchData->hearingDeaf not in [0.0f, 1.0f]\n\t%g not in [%g, %g]", v161, v190, v209);
    v6 = !v95;
    if ( v95 )
      __debugbreak();
  }
  __asm
  {
    vmovss  xmm0, dword ptr [rbx+8020h]
    vcomiss xmm0, xmm6
    vcomiss xmm0, xmm7
  }
  if ( !v6 )
  {
    __asm
    {
      vmovsd  [rsp+88h+var_50], xmm9
      vcvtss2sd xmm0, xmm0, xmm0
      vmovsd  [rsp+88h+var_58], xmm8
      vmovsd  [rsp+88h+var_60], xmm0
    }
    v98 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 696, ASSERT_TYPE_ASSERT, "( 0.0f ) <= ( botMatchData->visionBlinded ) && ( botMatchData->visionBlinded ) <= ( 1.0f )", "botMatchData->visionBlinded not in [0.0f, 1.0f]\n\t%g not in [%g, %g]", v162, v191, v210);
    v6 = !v98;
    if ( v98 )
      __debugbreak();
  }
  __asm
  {
    vmovss  xmm0, dword ptr [rbx+8024h]
    vcomiss xmm0, xmm6
    vcomiss xmm0, xmm7
  }
  if ( !v6 )
  {
    __asm
    {
      vmovsd  [rsp+88h+var_50], xmm9
      vcvtss2sd xmm0, xmm0, xmm0
      vmovsd  [rsp+88h+var_58], xmm8
      vmovsd  [rsp+88h+var_60], xmm0
    }
    v101 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 697, ASSERT_TYPE_ASSERT, "( 0.0f ) <= ( botMatchData->blindDiveChance ) && ( botMatchData->blindDiveChance ) <= ( 1.0f )", "botMatchData->blindDiveChance not in [0.0f, 1.0f]\n\t%g not in [%g, %g]", v163, v192, v211);
    v6 = !v101;
    if ( v101 )
      __debugbreak();
  }
  __asm
  {
    vmovss  xmm0, dword ptr [rbx+8034h]
    vcomiss xmm0, xmm6
    vcomiss xmm0, xmm7
  }
  if ( !v6 )
  {
    __asm
    {
      vmovsd  [rsp+88h+var_50], xmm9
      vcvtss2sd xmm0, xmm0, xmm0
      vmovsd  [rsp+88h+var_58], xmm8
      vmovsd  [rsp+88h+var_60], xmm0
    }
    v104 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 698, ASSERT_TYPE_ASSERT, "( 0.0f ) <= ( botMatchData->seeHardwareChance ) && ( botMatchData->seeHardwareChance ) <= ( 1.0f )", "botMatchData->seeHardwareChance not in [0.0f, 1.0f]\n\t%g not in [%g, %g]", v164, v193, v212);
    v6 = !v104;
    if ( v104 )
      __debugbreak();
  }
  __asm
  {
    vmovss  xmm0, dword ptr [rbx+8038h]
    vcomiss xmm0, xmm6
    vcomiss xmm0, xmm7
  }
  if ( !v6 )
  {
    __asm
    {
      vmovsd  [rsp+88h+var_50], xmm9
      vcvtss2sd xmm0, xmm0, xmm0
      vmovsd  [rsp+88h+var_58], xmm8
      vmovsd  [rsp+88h+var_60], xmm0
    }
    v107 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 699, ASSERT_TYPE_ASSERT, "( 0.0f ) <= ( botMatchData->targetHardwareChance ) && ( botMatchData->targetHardwareChance ) <= ( 1.0f )", "botMatchData->targetHardwareChance not in [0.0f, 1.0f]\n\t%g not in [%g, %g]", v165, v194, v213);
    v6 = !v107;
    if ( v107 )
      __debugbreak();
  }
  __asm
  {
    vmovss  xmm0, dword ptr [rbx+803Ch]
    vcomiss xmm0, xmm6
    vcomiss xmm0, xmm7
  }
  if ( !v6 )
  {
    __asm
    {
      vmovsd  [rsp+88h+var_50], xmm9
      vcvtss2sd xmm0, xmm0, xmm0
      vmovsd  [rsp+88h+var_58], xmm8
      vmovsd  [rsp+88h+var_60], xmm0
    }
    v110 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 700, ASSERT_TYPE_ASSERT, "( 0.0f ) <= ( botMatchData->targetVehicleChance ) && ( botMatchData->targetVehicleChance ) <= ( 1.0f )", "botMatchData->targetVehicleChance not in [0.0f, 1.0f]\n\t%g not in [%g, %g]", v166, v195, v214);
    v6 = !v110;
    if ( v110 )
      __debugbreak();
  }
  __asm
  {
    vmovss  xmm0, dword ptr [rbx+8040h]
    vcomiss xmm0, xmm6
    vcomiss xmm0, xmm7
  }
  if ( !v6 )
  {
    __asm
    {
      vmovsd  [rsp+88h+var_50], xmm9
      vcvtss2sd xmm0, xmm0, xmm0
      vmovsd  [rsp+88h+var_58], xmm8
      vmovsd  [rsp+88h+var_60], xmm0
    }
    v113 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 701, ASSERT_TYPE_ASSERT, "( 0.0f ) <= ( botMatchData->holdBreathChance ) && ( botMatchData->holdBreathChance ) <= ( 1.0f )", "botMatchData->holdBreathChance not in [0.0f, 1.0f]\n\t%g not in [%g, %g]", v167, v196, v215);
    v6 = !v113;
    if ( v113 )
      __debugbreak();
  }
  __asm
  {
    vmovss  xmm0, dword ptr [rbx+8044h]
    vcomiss xmm0, xmm6
    vcomiss xmm0, xmm7
  }
  if ( !v6 )
  {
    __asm
    {
      vmovsd  [rsp+88h+var_50], xmm9
      vcvtss2sd xmm0, xmm0, xmm0
      vmovsd  [rsp+88h+var_58], xmm8
      vmovsd  [rsp+88h+var_60], xmm0
    }
    v116 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 702, ASSERT_TYPE_ASSERT, "( 0.0f ) <= ( botMatchData->launcherRespawnChance ) && ( botMatchData->launcherRespawnChance ) <= ( 1.0f )", "botMatchData->launcherRespawnChance not in [0.0f, 1.0f]\n\t%g not in [%g, %g]", v168, v197, v216);
    v6 = !v116;
    if ( v116 )
      __debugbreak();
  }
  __asm
  {
    vmovss  xmm0, dword ptr [rbx+804Ch]
    vcomiss xmm0, xmm6
    vcomiss xmm0, xmm7
  }
  if ( !v6 )
  {
    __asm
    {
      vmovsd  [rsp+88h+var_50], xmm9
      vcvtss2sd xmm0, xmm0, xmm0
      vmovsd  [rsp+88h+var_58], xmm8
      vmovsd  [rsp+88h+var_60], xmm0
    }
    v119 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 703, ASSERT_TYPE_ASSERT, "( 0.0f ) <= ( botMatchData->avoidSkyPercent ) && ( botMatchData->avoidSkyPercent ) <= ( 1.0f )", "botMatchData->avoidSkyPercent not in [0.0f, 1.0f]\n\t%g not in [%g, %g]", v169, v198, v217);
    v6 = !v119;
    if ( v119 )
      __debugbreak();
  }
  __asm
  {
    vmovss  xmm0, dword ptr [rbx+8050h]
    vcomiss xmm0, xmm6
    vcomiss xmm0, xmm7
  }
  if ( !v6 )
  {
    __asm
    {
      vmovsd  [rsp+88h+var_50], xmm9
      vcvtss2sd xmm0, xmm0, xmm0
      vmovsd  [rsp+88h+var_58], xmm8
      vmovsd  [rsp+88h+var_60], xmm0
    }
    v122 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 704, ASSERT_TYPE_ASSERT, "( 0.0f ) <= ( botMatchData->launcherCombatChance ) && ( botMatchData->launcherCombatChance ) <= ( 1.0f )", "botMatchData->launcherCombatChance not in [0.0f, 1.0f]\n\t%g not in [%g, %g]", v170, v199, v218);
    v6 = !v122;
    if ( v122 )
      __debugbreak();
  }
  __asm
  {
    vmovss  xmm0, dword ptr [rbx+8054h]
    vcomiss xmm0, xmm6
    vcomiss xmm0, xmm7
  }
  if ( !v6 )
  {
    __asm
    {
      vmovsd  [rsp+88h+var_50], xmm9
      vcvtss2sd xmm0, xmm0, xmm0
      vmovsd  [rsp+88h+var_58], xmm8
      vmovsd  [rsp+88h+var_60], xmm0
    }
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 705, ASSERT_TYPE_ASSERT, "( 0.0f ) <= ( botMatchData->grenadeThrowbackChance ) && ( botMatchData->grenadeThrowbackChance ) <= ( 1.0f )", "botMatchData->grenadeThrowbackChance not in [0.0f, 1.0f]\n\t%g not in [%g, %g]", v171, v200, v219) )
      __debugbreak();
  }
  burstFireType = _RBX->botMatchData.burstFireType;
  v126 = burstFireType < 3;
  v127 = burstFireType == 3;
  v128 = burstFireType <= 3;
  if ( burstFireType >= 3 )
  {
    LODWORD(v173) = 3;
    LODWORD(v144) = _RBX->botMatchData.burstFireType;
    v129 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 708, ASSERT_TYPE_ASSERT, "(unsigned)( botMatchData->burstFireType ) < (unsigned)( BOT_BURST_FIRE_TYPE_COUNT )", "botMatchData->burstFireType doesn't index BOT_BURST_FIRE_TYPE_COUNT\n\t%i not in [0, %i)", v144, v173);
    v126 = 0;
    v127 = !v129;
    v128 = !v129;
    if ( v129 )
      __debugbreak();
  }
  __asm
  {
    vmovss  xmm0, dword ptr [rbx+8014h]
    vucomiss xmm0, cs:__real@bf800000
  }
  if ( !v127 )
  {
    __asm { vcomiss xmm0, xmm6 }
    if ( v126 )
    {
      v131 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 711, ASSERT_TYPE_ASSERT, "( (botMatchData->grenadeCookPrecision == -1) || (botMatchData->grenadeCookPrecision >= 0) )", (const char *)&queryFormat, "(botMatchData->grenadeCookPrecision == -1) || (botMatchData->grenadeCookPrecision >= 0)");
      v126 = 0;
      v127 = !v131;
      v128 = !v131;
      if ( v131 )
        __debugbreak();
    }
  }
  __asm
  {
    vmovss  xmm0, dword ptr [rbx+8028h]
    vcomiss xmm0, xmm6
  }
  if ( v126 )
    goto LABEL_110;
  __asm { vcomiss xmm0, cs:__real@43b40000 }
  if ( !v128 )
  {
LABEL_110:
    __asm
    {
      vcvtss2sd xmm1, xmm0, xmm0
      vmovsd  xmm0, cs:__real@4076800000000000
      vmovsd  [rsp+88h+var_50], xmm0
      vmovsd  [rsp+88h+var_58], xmm8
      vmovsd  [rsp+88h+var_60], xmm1
    }
    v135 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 712, ASSERT_TYPE_ASSERT, "( 0.0f ) <= ( botMatchData->awareViewAngle ) && ( botMatchData->awareViewAngle ) <= ( 360.0f )", "botMatchData->awareViewAngle not in [0.0f, 360.0f]\n\t%g not in [%g, %g]", v172, v201, v220);
    v127 = !v135;
    if ( v135 )
      __debugbreak();
  }
  __asm
  {
    vmovss  xmm0, dword ptr [rbx+802Ch]
    vucomiss xmm0, xmm6
    vmovss  xmm8, cs:__real@40000000
  }
  if ( !v127 )
  {
    __asm
    {
      vucomiss xmm0, xmm7
      vucomiss xmm0, xmm8
      vucomiss xmm0, cs:__real@40400000
    }
    v138 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 713, ASSERT_TYPE_ASSERT, "( (botMatchData->strategyLevel == 0.0f) || (botMatchData->strategyLevel == 1.0f) || (botMatchData->strategyLevel == 2.0f) || (botMatchData->strategyLevel == 3.0f) )", (const char *)&queryFormat, "(botMatchData->strategyLevel == 0.0f) || (botMatchData->strategyLevel == 1.0f) || (botMatchData->strategyLevel == 2.0f) || (botMatchData->strategyLevel == 3.0f)");
    v127 = !v138;
    if ( v138 )
      __debugbreak();
  }
  __asm
  {
    vmovss  xmm0, dword ptr [rbx+8030h]
    vucomiss xmm0, xmm6
  }
  if ( !v127 )
  {
    __asm
    {
      vucomiss xmm0, xmm7
      vucomiss xmm0, xmm8
    }
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 714, ASSERT_TYPE_ASSERT, "( (botMatchData->intelligentSprintLevel == 0) || (botMatchData->intelligentSprintLevel == 1) || (botMatchData->intelligentSprintLevel == 2) )", (const char *)&queryFormat, "(botMatchData->intelligentSprintLevel == 0) || (botMatchData->intelligentSprintLevel == 1) || (botMatchData->intelligentSprintLevel == 2)") )
      __debugbreak();
  }
  __asm
  {
    vmovaps xmm6, [rsp+88h+var_18]
    vmovaps xmm7, [rsp+88h+var_28]
    vmovaps xmm8, [rsp+88h+var_38]
    vmovaps xmm9, [rsp+88h+var_48]
  }
}

/*
==============
Bot_ZoneGetCount
==============
*/
__int64 Bot_ZoneGetCount(int zone, int nodeTeam, bot_zone_count_t type)
{
  __int64 v4; 
  __int64 v7; 
  __int64 v8; 
  int v9; 

  v4 = zone;
  if ( !s_botZoneData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25934, ASSERT_TYPE_ASSERT, "( s_botZoneData )", (const char *)&queryFormat, "s_botZoneData") )
    __debugbreak();
  if ( (_DWORD)v4 == 255 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25935, ASSERT_TYPE_ASSERT, "( zone != 255 )", (const char *)&queryFormat, "zone != PATH_INVALID_ZONE") )
    __debugbreak();
  if ( (unsigned int)v4 >= Path_ZoneCount() )
  {
    v9 = Path_ZoneCount();
    LODWORD(v7) = v4;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25936, ASSERT_TYPE_ASSERT, "(unsigned)( zone ) < (unsigned)( Path_ZoneCount() )", "zone doesn't index Path_ZoneCount()\n\t%i not in [0, %i)", v7, v9) )
      __debugbreak();
  }
  if ( (unsigned int)v4 >= s_botZoneDataCount )
  {
    LODWORD(v8) = s_botZoneDataCount;
    LODWORD(v7) = v4;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25937, ASSERT_TYPE_ASSERT, "(unsigned)( zone ) < (unsigned)( s_botZoneDataCount )", "zone doesn't index s_botZoneDataCount\n\t%i not in [0, %i)", v7, v8) )
      __debugbreak();
  }
  if ( (unsigned int)nodeTeam >= 2 )
  {
    LODWORD(v8) = 2;
    LODWORD(v7) = nodeTeam;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25938, ASSERT_TYPE_ASSERT, "(unsigned)( nodeTeam ) < (unsigned)( (2) )", "nodeTeam doesn't index MAX_NODE_TEAMS_MP\n\t%i not in [0, %i)", v7, v8) )
      __debugbreak();
  }
  if ( (unsigned int)type >= BOT_ZONE_COUNT_COUNT )
  {
    LODWORD(v8) = 5;
    LODWORD(v7) = type;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25939, ASSERT_TYPE_ASSERT, "(unsigned)( type ) < (unsigned)( BOT_ZONE_COUNT_COUNT )", "type doesn't index BOT_ZONE_COUNT_COUNT\n\t%i not in [0, %i)", v7, v8) )
      __debugbreak();
  }
  return s_botZoneData[v4].count[4 * nodeTeam + type + nodeTeam];
}

/*
==============
Bot_ZoneNearestCount
==============
*/
int Bot_ZoneNearestCount(int zone, int nodeTeam, int steps, const bot_zone_count_cmp_t *compares, int numCompares)
{
  int v7; 
  int v11; 
  const pathnode_t *v12; 
  int v13; 
  pathnode_t *v14; 
  int v16; 
  pathnode_t *v17; 
  int v19; 
  unsigned int v25; 
  int v26; 
  const bot_zone_count_cmp_t *v27; 
  __int64 v28; 
  int v29; 
  bot_zone_count_cmp_type_t type; 
  int result; 
  __int64 v34; 
  __int64 v35; 

  __asm { vmovaps [rsp+98h+var_48], xmm6 }
  v7 = steps;
  if ( zone == 255 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25524, ASSERT_TYPE_ASSERT, "( zone != 255 )", (const char *)&queryFormat, "zone != PATH_INVALID_ZONE") )
    __debugbreak();
  __asm { vmovss  xmm6, cs:__real@bf800000 }
  v11 = Path_ZoneCount();
  v12 = NULL;
  if ( !v11 )
    goto LABEL_47;
  v13 = 0;
  __asm { vmovaps [rsp+98h+var_58], xmm7 }
  if ( v11 > 0 )
  {
    do
    {
      v14 = Path_ConvertZoneIndexToZone(v13++);
      *(_QWORD *)&v14->transient.iSearchFrame = 0i64;
      v14->transient.pNextOpen = NULL;
      v14->transient.pPrevOpen = NULL;
      v14->transient.pParent = NULL;
      *(_QWORD *)&v14->transient.fCost = 0i64;
      *(_QWORD *)&v14->transient.nodeCost = 0i64;
    }
    while ( v13 < v11 );
  }
  _RSI = Path_ConvertZoneIndexToZone(zone);
  if ( !_RSI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25550, ASSERT_TYPE_ASSERT, "( nodeCur )", (const char *)&queryFormat, "nodeCur") )
    __debugbreak();
  v16 = numCompares;
  _RSI->transient.iSearchFrame = v7;
  _RSI->transient.linkIndex = 1;
  v17 = _RSI;
  __asm { vxorps  xmm7, xmm7, xmm7 }
  do
  {
    if ( v7 < 0 || _RSI->transient.iSearchFrame >= 1 )
    {
      v19 = 0;
      if ( _RSI->dynamic.wLinkCount > 0 )
      {
        _RBX = 0i64;
        do
        {
          _RAX = Path_ConvertIndexToNode(_RSI->constant.Links[_RBX].nodeNum);
          if ( !_RAX->transient.linkIndex )
          {
            _RCX = _RSI->constant.Links;
            __asm
            {
              vmovss  xmm0, dword ptr [rbx+rcx]
              vaddss  xmm1, xmm0, dword ptr [rsi+0B0h]
              vmovss  dword ptr [rax+0B0h], xmm1
            }
            _RAX->transient.linkIndex = 1;
            _RAX->transient.iSearchFrame = _RSI->transient.iSearchFrame - 1;
            v17->transient.pNextOpen = _RAX;
            v17 = _RAX;
          }
          ++v19;
          ++_RBX;
        }
        while ( v19 < _RSI->dynamic.wLinkCount );
      }
      v16 = numCompares;
    }
    v25 = Path_NodeZoneFromNode(_RSI);
    v26 = v25;
    if ( v25 >= s_botZoneDataCount )
    {
      LODWORD(v35) = s_botZoneDataCount;
      LODWORD(v34) = v25;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25490, ASSERT_TYPE_ASSERT, "(unsigned)( zone ) < (unsigned)( s_botZoneDataCount )", "zone doesn't index s_botZoneDataCount\n\t%i not in [0, %i)", v34, v35) )
        __debugbreak();
    }
    if ( v26 == 255 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25491, ASSERT_TYPE_ASSERT, "( zone != 255 )", (const char *)&queryFormat, "zone != PATH_INVALID_ZONE") )
      __debugbreak();
    v27 = compares;
    if ( !compares && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25492, ASSERT_TYPE_ASSERT, "( compares )", (const char *)&queryFormat, "compares") )
      __debugbreak();
    if ( v16 < 0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25493, ASSERT_TYPE_ASSERT, "( numCompares >= 0 )", (const char *)&queryFormat, "numCompares >= 0") )
      __debugbreak();
    v28 = 0i64;
LABEL_32:
    v29 = 1;
    while ( v28 < numCompares )
    {
      type = v27->type;
      if ( type )
      {
        if ( type == BOT_ZONE_COUNT_CMP_LESS )
        {
          if ( Bot_ZoneGetCount(v26, nodeTeam, v27->count) >= v27->value )
            goto LABEL_44;
          ++v28;
          ++v27;
          goto LABEL_32;
        }
      }
      else
      {
        if ( Bot_ZoneGetCount(v26, nodeTeam, v27->count) > v27->value )
        {
          ++v28;
          ++v27;
          goto LABEL_32;
        }
        v29 = 0;
      }
      ++v28;
      ++v27;
      if ( !v29 )
        goto LABEL_44;
    }
    __asm
    {
      vcomiss xmm6, xmm7
      vcomiss xmm6, dword ptr [rsi+0B0h]
      vmovss  xmm6, dword ptr [rsi+0B0h]
    }
    v12 = _RSI;
LABEL_44:
    _RSI = _RSI->transient.pNextOpen;
    v16 = numCompares;
    v7 = steps;
  }
  while ( _RSI );
  __asm { vmovaps xmm7, [rsp+98h+var_58] }
  if ( v12 )
    result = Path_ConvertZoneToZoneIndex(v12);
  else
LABEL_47:
    result = 255;
  __asm { vmovaps xmm6, [rsp+98h+var_48] }
  return result;
}

/*
==============
Bot_ZonePathAdd
==============
*/
void Bot_ZonePathAdd(const bot_info_t *botInfo, int addCount)
{
  ;
}

/*
==============
Bot_ZonePopulateObstacleData
==============
*/
void Bot_ZonePopulateObstacleData()
{
  unsigned int v0; 
  unsigned int v1; 
  unsigned __int16 v2; 
  unsigned int v3; 
  __int64 v4; 
  __int64 v5; 
  __int64 v6; 
  bot_zone_data_t *v7; 
  pathnode_t *v8; 
  pathnode_t *v9; 
  int v10; 
  vec3_t pos; 
  __int128 v36; 
  __int128 v37; 
  __int128 v38; 

  v0 = Path_NodeCount();
  v1 = Path_ZoneCount();
  if ( s_botZoneDataCount != v1 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3857, ASSERT_TYPE_ASSERT, "( s_botZoneDataCount == zoneCount )", (const char *)&queryFormat, "s_botZoneDataCount == zoneCount") )
    __debugbreak();
  v2 = 0;
  v3 = 0;
  if ( v1 )
  {
    v4 = 0i64;
    v5 = 0i64;
    v6 = 12i64;
    do
    {
      v7 = s_botZoneData;
      *(_QWORD *)((char *)s_botZoneData + v6 - 4) = 0i64;
      *(_QWORD *)v7[v4].bounds.midPoint.v = 0i64;
      *(_QWORD *)&v7[v4].bounds.midPoint.z = 0i64;
      *(_QWORD *)&v7[v4].bounds.halfSize.y = 0i64;
      v8 = Path_ConvertZoneIndexToZone(v3);
      pathnode_t::GetPos(v8, &s_botZoneData[v5].bounds.midPoint);
      ++v3;
      ++v5;
      v6 += 52i64;
      ++v4;
    }
    while ( v3 < v1 );
  }
  if ( v0 )
  {
    do
    {
      if ( !v1 )
        break;
      if ( Path_NodeValid(v2) )
      {
        v9 = Path_ConvertIndexToNode(v2);
        pathnode_t::GetPos(v9, &pos);
        v10 = Path_NodeZoneFromNode(v9);
        if ( v10 != 255 )
        {
          __asm { vmovss  xmm0, dword ptr [rsp+98h+pos] }
          _RCX = 52i64 * v10;
          _RAX = s_botZoneData;
          HIDWORD(v36) = 0;
          __asm
          {
            vmovups xmm5, xmmword ptr [rsp+40h]
            vmovss  xmm5, xmm5, xmm0
            vmovss  xmm0, dword ptr [rcx+rax+10h]
            vinsertps xmm5, xmm5, dword ptr [rsp+98h+pos+4], arg_8
            vinsertps xmm5, xmm5, dword ptr [rsp+98h+pos+8], arg_18
          }
          HIDWORD(v37) = 0;
          __asm
          {
            vmovups xmm4, xmmword ptr [rsp+50h]
            vmovss  xmm4, xmm4, xmm0
            vmovss  xmm0, dword ptr [rcx+rax+1Ch]
            vinsertps xmm4, xmm4, dword ptr [rcx+rax+14h], 10h
            vinsertps xmm4, xmm4, dword ptr [rcx+rax+18h], 20h ; ' '
          }
          HIDWORD(v38) = 0;
          __asm
          {
            vmovups xmm3, xmmword ptr [rsp+60h]
            vmovss  xmm3, xmm3, xmm0
            vinsertps xmm3, xmm3, dword ptr [rcx+rax+20h], 10h
            vinsertps xmm3, xmm3, dword ptr [rcx+rax+24h], 20h ; ' '
            vsubps  xmm0, xmm4, xmm3
            vaddps  xmm1, xmm4, xmm3
            vminps  xmm2, xmm0, xmm5
            vmaxps  xmm0, xmm1, xmm5
            vaddps  xmm1, xmm2, xmm0
            vmovups xmmword ptr [rsp+60h], xmm3
            vmulps  xmm3, xmm1, xmmword ptr cs:?g_oneHalf@@3Ufloat4@@B.v; float4 const g_oneHalf
            vmovss  dword ptr [rcx+rax+10h], xmm3
            vextractps dword ptr [rcx+rax+14h], xmm3, 1
            vextractps dword ptr [rcx+rax+18h], xmm3, 2
            vmovups xmmword ptr [rsp+50h], xmm4
            vsubps  xmm4, xmm3, xmm2
            vmovss  dword ptr [rcx+rax+1Ch], xmm4
            vextractps dword ptr [rcx+rax+20h], xmm4, 1
            vextractps dword ptr [rcx+rax+24h], xmm4, 2
            vmovups xmmword ptr [rsp+40h], xmm5
          }
        }
      }
      ++v2;
    }
    while ( v2 < v0 );
  }
}

/*
==============
Bot_ZonePredictEnemyProx
==============
*/
void Bot_ZonePredictEnemyProx(int iZone, int nodeTeam, int enemyNodeTeam, int unAccountedEnemies, int predictedEnemyZone)
{
  __int64 v6; 
  int v8; 
  int v9; 
  unsigned __int16 team; 
  int i; 
  pathnode_t *v12; 
  pathnode_t *v13; 
  const pathnode_t *pNextOpen; 
  pathnode_t *v15; 
  __int16 wLinkCount; 
  int iSearchFrame; 
  int v18; 
  int v19; 
  __int64 v20; 
  pathnode_t *v21; 
  pathnode_t *v22; 
  int v23; 
  int v24; 
  int Count; 
  int v26; 
  int v27; 
  int v28; 
  int v29; 
  pathnode_t *v30; 
  int v31; 

  v6 = iZone;
  if ( iZone >= s_botZoneDataCount && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25608, ASSERT_TYPE_ASSERT, "(unsigned)( iZone ) < (unsigned)( s_botZoneDataCount )", "iZone doesn't index s_botZoneDataCount\n\t%i not in [0, %i)", iZone, s_botZoneDataCount) )
    __debugbreak();
  v8 = 0;
  v9 = predictedEnemyZone;
  v31 = 0;
  team = s_botZoneData[v6].team;
  if ( team && Path_GetNodeTeam((team_t)team) == enemyNodeTeam )
  {
    v8 = 1;
    v31 = 1;
  }
  else if ( Bot_ZoneGetCount(v6, nodeTeam, BOT_ZONE_COUNT_ENEMY_KNOWN) <= 0 && (_DWORD)v6 != predictedEnemyZone )
  {
    return;
  }
  for ( i = 0; i < Path_ZoneCount(); v12->transient.iSearchFrame = -1 )
  {
    v12 = Path_ConvertZoneIndexToZone(i++);
    *(_QWORD *)&v12->transient.iSearchFrame = 0i64;
    v12->transient.pNextOpen = NULL;
    v12->transient.pPrevOpen = NULL;
    v12->transient.pParent = NULL;
    *(_QWORD *)&v12->transient.fCost = 0i64;
    *(_QWORD *)&v12->transient.nodeCost = 0i64;
  }
  v13 = Path_ConvertZoneIndexToZone(v6);
  v30 = v13;
  pNextOpen = v13;
  v15 = v13;
  v13->transient.iSearchFrame = unAccountedEnemies;
  do
  {
    wLinkCount = pNextOpen->dynamic.wLinkCount;
    if ( wLinkCount > 0 )
    {
      iSearchFrame = pNextOpen->transient.iSearchFrame;
      if ( iSearchFrame > 0 )
      {
        v18 = iSearchFrame - wLinkCount;
        if ( v18 < 0 )
          v18 = 0;
        if ( pNextOpen == v13 && ((_DWORD)v6 == v9 || v8) && v18 < 1 )
          v18 = 1;
        v19 = 0;
        v20 = 0i64;
        do
        {
          v21 = Path_ConvertIndexToNode(pNextOpen->constant.Links[v20].nodeNum);
          v22 = v21;
          if ( v21->transient.iSearchFrame == -1 )
          {
            v23 = Path_NodeZoneFromNode(v21);
            if ( !Bot_ZoneGetCount(v23, nodeTeam, BOT_ZONE_COUNT_ALLY) )
            {
              v22->transient.iSearchFrame = v18;
              v15->transient.pNextOpen = v22;
              v15 = v22;
            }
          }
          ++v19;
          ++v20;
        }
        while ( v19 < pNextOpen->dynamic.wLinkCount );
        v9 = predictedEnemyZone;
      }
    }
    v24 = Path_NodeZoneFromNode(pNextOpen);
    Count = Bot_ZoneGetCount(v24, nodeTeam, BOT_ZONE_COUNT_ENEMY_PREDICT);
    v26 = Path_NodeZoneFromNode(pNextOpen);
    v27 = Bot_ZoneGetCount(v26, nodeTeam, BOT_ZONE_COUNT_ENEMY_KNOWN);
    v28 = pNextOpen->transient.iSearchFrame + Count;
    if ( v27 + unAccountedEnemies < v28 )
      v28 = v27 + unAccountedEnemies;
    v29 = Path_NodeZoneFromNode(pNextOpen);
    Bot_ZoneSetCount(v29, nodeTeam, BOT_ZONE_COUNT_ENEMY_PREDICT, v28);
    pNextOpen = pNextOpen->transient.pNextOpen;
    v13 = v30;
    v8 = v31;
  }
  while ( pNextOpen );
}

/*
==============
Bot_ZoneSetCount
==============
*/
void Bot_ZoneSetCount(int zone, int nodeTeam, bot_zone_count_t type, int count)
{
  __int64 v5; 
  __int64 v8; 
  __int64 v9; 
  int v10; 

  v5 = zone;
  if ( !s_botZoneData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25950, ASSERT_TYPE_ASSERT, "( s_botZoneData )", (const char *)&queryFormat, "s_botZoneData") )
    __debugbreak();
  if ( (_DWORD)v5 == 255 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25951, ASSERT_TYPE_ASSERT, "( zone != 255 )", (const char *)&queryFormat, "zone != PATH_INVALID_ZONE") )
    __debugbreak();
  if ( (unsigned int)v5 >= Path_ZoneCount() )
  {
    v10 = Path_ZoneCount();
    LODWORD(v8) = v5;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25952, ASSERT_TYPE_ASSERT, "(unsigned)( zone ) < (unsigned)( Path_ZoneCount() )", "zone doesn't index Path_ZoneCount()\n\t%i not in [0, %i)", v8, v10) )
      __debugbreak();
  }
  if ( (unsigned int)v5 >= s_botZoneDataCount )
  {
    LODWORD(v9) = s_botZoneDataCount;
    LODWORD(v8) = v5;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25953, ASSERT_TYPE_ASSERT, "(unsigned)( zone ) < (unsigned)( s_botZoneDataCount )", "zone doesn't index s_botZoneDataCount\n\t%i not in [0, %i)", v8, v9) )
      __debugbreak();
  }
  if ( (unsigned int)nodeTeam >= 2 )
  {
    LODWORD(v9) = 2;
    LODWORD(v8) = nodeTeam;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25954, ASSERT_TYPE_ASSERT, "(unsigned)( nodeTeam ) < (unsigned)( (2) )", "nodeTeam doesn't index MAX_NODE_TEAMS_MP\n\t%i not in [0, %i)", v8, v9) )
      __debugbreak();
  }
  if ( (unsigned int)type >= BOT_ZONE_COUNT_COUNT )
  {
    LODWORD(v9) = 5;
    LODWORD(v8) = type;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25955, ASSERT_TYPE_ASSERT, "(unsigned)( type ) < (unsigned)( BOT_ZONE_COUNT_COUNT )", "type doesn't index BOT_ZONE_COUNT_COUNT\n\t%i not in [0, %i)", v8, v9) )
      __debugbreak();
  }
  if ( count < 0 )
  {
    LODWORD(v8) = count;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25956, ASSERT_TYPE_ASSERT, "( count ) >= ( 0 )", "count >= 0\n\t%i, %i", v8, 0i64) )
      __debugbreak();
  }
  if ( (unsigned __int8)count != count && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25957, ASSERT_TYPE_ASSERT, "( static_cast<byte>( count ) == count )", (const char *)&queryFormat, "static_cast<byte>( count ) == count") )
    __debugbreak();
  s_botZoneData[v5].count[4 * nodeTeam + type + nodeTeam] = truncate_cast<unsigned char,int>(count);
}

/*
==============
Bot_ZoneSetTeam
==============
*/
void Bot_ZoneSetTeam(int zone, team_t team)
{
  unsigned __int16 v2; 
  __int64 v3; 

  v2 = team;
  v3 = zone;
  if ( zone >= s_botZoneDataCount && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25479, ASSERT_TYPE_ASSERT, "(unsigned)( zone ) < (unsigned)( s_botZoneDataCount )", "zone doesn't index s_botZoneDataCount\n\t%i not in [0, %i)", zone, s_botZoneDataCount) )
    __debugbreak();
  if ( (_DWORD)v3 == 255 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25480, ASSERT_TYPE_ASSERT, "( zone != 255 )", (const char *)&queryFormat, "zone != PATH_INVALID_ZONE") )
    __debugbreak();
  s_botZoneData[v3].team = v2;
}

/*
==============
Bot_ZoneUpdateCounts
==============
*/
void Bot_ZoneUpdateCounts()
{
  unsigned int v6; 
  __int64 v7; 
  __int64 v8; 
  unsigned __int8 *count; 
  const dvar_t *v10; 
  int v15; 
  __int64 v16; 
  gentity_s *v17; 
  __int16 EntityIndex; 
  const SvClientMP *MpClient; 
  BOOL IsClientConnected; 
  bitarray_base<bitarray<224> > *AllTeamFlags; 
  const SvClientMP *v22; 
  const dvar_t *v23; 
  const dvar_t *v24; 
  const pathnode_t *v25; 
  int NodeTeam; 
  __int64 v27; 
  int v28; 
  unsigned int v29; 
  pathnode_t *v30; 
  const dvar_t *v31; 
  const vec4_t *v33; 
  bool v41; 
  int v44; 
  int v45; 
  sentient_s *v46; 
  sentient_info_t *SentientInfo; 
  const pathnode_t *pLastKnownNode; 
  int v49; 
  int v50; 
  int v51; 
  int v52; 
  int v53; 
  int v54; 
  char v55; 
  team_t eTeam; 
  const vec4_t *v61; 
  unsigned int v62; 
  char v63; 
  int v64; 
  __int64 v65; 
  int v66; 
  int v67; 
  bool v68; 
  __int64 v69; 
  __int64 v70; 
  unsigned __int16 team; 
  int v72; 
  unsigned int v73; 
  bool v74; 
  __int64 *v76; 
  __int64 v77; 
  __int64 *v78; 
  int v79; 
  int i; 
  int v81; 
  int v82; 
  int v83; 
  int v85; 
  int v86; 
  pathnode_t *v91; 
  int v102; 
  int v103; 
  __int64 duration; 
  __int64 v111; 
  int v112; 
  int v113; 
  __int64 v114; 
  __int64 v115; 
  int enemyNodeTeam; 
  __int64 v117; 
  __int64 *v118; 
  int v119; 
  __int64 v120; 
  int unAccountedEnemies[2]; 
  gentity_s *ent; 
  vec3_t origin; 
  vec3_t end; 
  vec3_t pos; 
  bitarray<224> iTeamFlags; 
  __int64 v127; 
  __int64 v128[2]; 
  __int64 v129[4]; 

  v6 = Path_ZoneCount();
  v7 = v6;
  v112 = v6;
  if ( s_botZoneDataCount != v6 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25721, ASSERT_TYPE_ASSERT, "( s_botZoneDataCount == static_cast<uint>( zoneCount ) )", (const char *)&queryFormat, "s_botZoneDataCount == static_cast<uint>( zoneCount )") )
    __debugbreak();
  if ( (int)v7 > 0 )
  {
    v8 = v7;
    count = s_botZoneData->count;
    do
    {
      *(_QWORD *)count = 0i64;
      *((_WORD *)count + 4) = 0;
      count += 52;
      --v8;
    }
    while ( v8 );
  }
  if ( Path_ZoneCount() && level.teammode != TEAMMODE_FFA )
  {
    v10 = DVARINT_bot_NoTarget;
    if ( !DVARINT_bot_NoTarget && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_NoTarget") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v10);
    if ( v10->current.integer != 1 )
    {
      __asm
      {
        vmovaps [rsp+1A0h+var_30], xmm6
        vmovaps [rsp+1A0h+var_40], xmm7
        vmovaps [rsp+1A0h+var_50], xmm8
        vmovaps [rsp+1A0h+var_60], xmm9
        vmovaps [rsp+1A0h+var_70], xmm10
        vmovaps [rsp+1A0h+var_80], xmm11
      }
      *(_QWORD *)unAccountedEnemies = 0i64;
      v117 = 0i64;
      v127 = 0i64;
      v128[0] = 0i64;
      v128[1] = 0i64;
      v120 = 0i64;
      if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
        __debugbreak();
      if ( (int)ComCharacterLimits::ms_gameData.m_characterCount > 2048 )
      {
        if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
          __debugbreak();
        LODWORD(v111) = 2048;
        LODWORD(duration) = ComCharacterLimits::ms_gameData.m_characterCount;
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25739, ASSERT_TYPE_ASSERT, "( ComCharacterLimits::GetCharacterMaxCount() ) <= ( ( 2048 ) )", "ComCharacterLimits::GetCharacterMaxCount() <= MAX_GENTITIES\n\t%i, %i", duration, v111) )
          __debugbreak();
      }
      if ( Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) )
        _RAX = Com_TeamsSP_GetAllTeamFlags();
      else
        _RAX = Com_TeamsMP_GetAllTeamFlags();
      __asm
      {
        vmovups xmm0, xmmword ptr [rax]
        vmovss  xmm6, cs:__real@43e10000
        vmovups xmmword ptr [rbp+0A0h+iTeamFlags.array], xmm0
        vmovsd  xmm1, qword ptr [rax+10h]
        vmovsd  qword ptr [rbp+0A0h+iTeamFlags.array+10h], xmm1
      }
      v15 = 0;
      iTeamFlags.array[6] = _RAX->array[6];
      v16 = 0i64;
      enemyNodeTeam = 1;
      while ( 1 )
      {
        v114 = v16;
        v113 = v15;
        if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
          __debugbreak();
        if ( v15 >= (int)ComCharacterLimits::ms_gameData.m_characterCount )
          break;
        v17 = (gentity_s *)((char *)level.gentities + v16);
        ent = (gentity_s *)((char *)level.gentities + v16);
        if ( !(gentity_s *)((char *)level.gentities + v16) )
          goto LABEL_114;
        EntityIndex = G_GetEntityIndex((const gentity_s *)((char *)level.gentities + v16));
        if ( !G_IsEntityInUse(EntityIndex) || !v17->sentient )
          goto LABEL_114;
        if ( v17->client )
        {
          MpClient = SV_Client_GetMpClient(v17->s.number);
          IsClientConnected = Bot_IsClientConnected(MpClient);
          goto LABEL_37;
        }
        if ( v17->agent )
        {
          IsClientConnected = v17->s.eType == ET_AGENT;
LABEL_37:
          if ( !IsClientConnected )
            goto LABEL_114;
        }
        if ( v17->s.eType != ET_INVISIBLE )
        {
          AllTeamFlags = (bitarray_base<bitarray<224> > *)Com_TeamsMP_GetAllTeamFlags();
          if ( bitarray_base<bitarray<224>>::testBit(AllTeamFlags, v17->sentient->eTeam) )
          {
            if ( !v17->client || (v22 = SV_Client_GetMpClient(v17->s.number), Bot_IsClientActive(v22)) )
            {
              if ( !GameModeFlagContainer<enum BgEntityFlagsCommon,enum BgEntityFlagsSP,enum BgEntityFlagsMP,64>::TestFlagInternal(&v17->flags, ACTIVE, 2u) )
              {
                v23 = DVARINT_bot_NoTarget;
                if ( !DVARINT_bot_NoTarget && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_NoTarget") )
                  __debugbreak();
                Dvar_CheckFrontendServerThread(v23);
                if ( v23->current.integer != 2 || v17->s.eType != ET_PLAYER )
                {
                  v24 = DVARINT_bot_NoTarget;
                  if ( !DVARINT_bot_NoTarget && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_NoTarget") )
                    __debugbreak();
                  Dvar_CheckFrontendServerThread(v24);
                  if ( v24->current.integer != 3 || v17->s.eType == ET_PLAYER )
                  {
                    v25 = Sentient_NearestNode(v17->sentient);
                    if ( v25 )
                    {
                      NodeTeam = Path_GetNodeTeam(v17->sentient->eTeam);
                      v27 = NodeTeam;
                      v28 = 1 - NodeTeam;
                      v119 = 1 - NodeTeam;
                      if ( (unsigned int)(1 - NodeTeam) >= 2 )
                      {
                        LODWORD(v111) = 2;
                        LODWORD(duration) = 1 - NodeTeam;
                        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25772, ASSERT_TYPE_ASSERT, "(unsigned)( enemyNodeTeam ) < (unsigned)( (2) )", "enemyNodeTeam doesn't index MAX_NODE_TEAMS_MP\n\t%i not in [0, %i)", duration, v111) )
                          __debugbreak();
                      }
                      v29 = Path_NodeZoneFromNode(v25);
                      if ( v29 != 255 )
                      {
                        if ( v29 >= Path_ZoneCount() )
                        {
                          LODWORD(v111) = Path_ZoneCount();
                          LODWORD(duration) = v29;
                          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25776, ASSERT_TYPE_ASSERT, "(unsigned)( iZone ) < (unsigned)( Path_ZoneCount() )", "iZone doesn't index Path_ZoneCount()\n\t%i not in [0, %i)", duration, v111) )
                            __debugbreak();
                        }
                        v30 = Path_ConvertZoneIndexToZone(v29);
                        pathnode_t::GetPos(v30, &pos);
                        v31 = DVARINT_ai_showNodes;
                        if ( !DVARINT_ai_showNodes && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "ai_showNodes") )
                          __debugbreak();
                        Dvar_CheckFrontendServerThread(v31);
                        if ( v31->current.integer == 13 && v17->health > 0 )
                        {
                          _RCX = &v17->r.currentOrigin;
                          v33 = &colorRed;
                          __asm
                          {
                            vmovss  xmm0, dword ptr [rcx]
                            vmovss  xmm1, dword ptr [rcx+4]
                            vaddss  xmm2, xmm6, dword ptr [rcx+8]
                            vmovss  dword ptr [rbp+0A0h+end], xmm0
                            vmovss  dword ptr [rbp+0A0h+end+4], xmm1
                            vmovss  dword ptr [rbp+0A0h+end+8], xmm2
                          }
                          if ( (_DWORD)v27 )
                            v33 = &colorBlue;
                          G_DebugLine(_RCX, &end, v33, 0);
                        }
                        __asm
                        {
                          vmovss  xmm0, dword ptr [rbp+0A0h+pos]
                          vmovss  xmm2, dword ptr [rbp+0A0h+pos+4]
                        }
                        ++*((_DWORD *)&v117 + v27);
                        _RAX = 3 * v27;
                        __asm { vaddss  xmm1, xmm0, dword ptr [rbp+rax*4+0A0h+var_C0] }
                        ++unAccountedEnemies[v27 - 2];
                        v41 = v17->health <= 0;
                        __asm
                        {
                          vmovss  dword ptr [rbp+rax*4+0A0h+var_C0], xmm1
                          vaddss  xmm0, xmm2, dword ptr [rbp+rax*4+0A0h+var_C0+4]
                          vmovss  xmm1, dword ptr [rbp+0A0h+pos+8]
                          vmovss  dword ptr [rbp+rax*4+0A0h+var_C0+4], xmm0
                          vaddss  xmm2, xmm1, dword ptr [rbp+rax*4+0A0h+var_B8]
                          vmovss  dword ptr [rbp+rax*4+0A0h+var_B8], xmm2
                        }
                        if ( !v41 )
                        {
                          v44 = Bot_ZoneGetCount(v29, v27, BOT_ZONE_COUNT_ALLY);
                          Bot_ZoneSetCount(v29, v27, BOT_ZONE_COUNT_ALLY, v44 + 1);
                          v45 = Bot_ZoneGetCount(v29, v28, BOT_ZONE_COUNT_ENEMY);
                          Bot_ZoneSetCount(v29, v28, BOT_ZONE_COUNT_ENEMY, v45 + 1);
                        }
                        memset(v129, 0, sizeof(v129));
                        v46 = Sentient_FirstSentient(&iTeamFlags);
                        if ( v46 )
                        {
                          while ( 1 )
                          {
                            if ( v46->ent )
                              goto LABEL_76;
                            if ( v46->ai )
                              break;
LABEL_96:
                            v46 = Sentient_NextSentient(v46, &iTeamFlags);
                            if ( !v46 )
                            {
                              LODWORD(v7) = v112;
                              v28 = v119;
                              goto LABEL_98;
                            }
                          }
                          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25808, ASSERT_TYPE_ASSERT, "( enemySentient->ent || !enemySentient->ai )", (const char *)&queryFormat, "enemySentient->ent || !enemySentient->ai") )
                            __debugbreak();
LABEL_76:
                          if ( v46->ai && !Bot_EntityIsInvisible(v46->ent) && !AI_IsAlliedSentient(v17->sentient, v46) )
                          {
                            SentientInfo = Sentient_GetSentientInfo(v46, v17->sentient);
                            if ( !SentientInfo && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25812, ASSERT_TYPE_ASSERT, "( info )", (const char *)&queryFormat, "info") )
                              __debugbreak();
                            pLastKnownNode = SentientInfo->pLastKnownNode;
                            if ( pLastKnownNode )
                            {
                              v49 = Path_NodeZoneFromNode(pLastKnownNode);
                              v50 = v49;
                              if ( v49 != 255 )
                              {
                                v51 = Bot_ZoneGetCount(v49, v27, BOT_ZONE_COUNT_ALLY);
                                v52 = 10000;
                                if ( v51 > 0 )
                                  v52 = 2000;
                                if ( level.time - SentientInfo->lastKnownPosTime < v52 )
                                {
                                  v53 = v50 % 8;
                                  v54 = v50 / 8;
                                  v55 = v53;
                                  if ( (unsigned int)v54 >= 0x20 )
                                  {
                                    LODWORD(v111) = 32;
                                    LODWORD(duration) = v54;
                                    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25827, ASSERT_TYPE_ASSERT, "(unsigned)( (knownZone / 8) ) < (unsigned)( ( ( 256 ) / 8 ) )", "(knownZone / 8) doesn't index BOT_ZONE_STACK_VISIT_MAX\n\t%i not in [0, %i)", duration, v111) )
                                      __debugbreak();
                                  }
                                  *((_BYTE *)v129 + v54) |= 1 << v55;
                                  if ( Dvar_GetInt_Internal_DebugName(DVARINT_ai_showNodes, "ai_showNodes") == 13 && level.time - SentientInfo->lastKnownPosTime < 500 )
                                  {
                                    _RAX = v46->ent;
                                    eTeam = v46->eTeam;
                                    __asm
                                    {
                                      vmovss  xmm0, dword ptr [rax+130h]
                                      vmovss  dword ptr [rbp+0A0h+origin], xmm0
                                      vmovss  xmm1, dword ptr [rax+134h]
                                      vmovss  dword ptr [rbp+0A0h+origin+4], xmm1
                                      vaddss  xmm2, xmm6, dword ptr [rax+138h]
                                      vmovss  dword ptr [rbp+0A0h+origin+8], xmm2
                                      vxorps  xmm2, xmm2, xmm2; yaw
                                    }
                                    if ( Path_GetNodeTeam(eTeam) )
                                      v61 = &colorBlue;
                                    else
                                      v61 = &colorRed;
                                    G_DebugBox(&origin, &actorBoxCrouch, *(float *)&_XMM2, v61, 0, 0);
                                  }
                                }
                              }
                            }
                          }
                          goto LABEL_96;
                        }
LABEL_98:
                        v62 = 0;
                        if ( (int)v7 <= 0 )
                          goto LABEL_107;
                        v63 = 1;
                        v64 = 0;
                        do
                        {
                          v65 = v62 >> 3;
                          if ( (unsigned int)v65 >= 0x20 )
                          {
                            LODWORD(v111) = 32;
                            LODWORD(duration) = v62 >> 3;
                            if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25848, ASSERT_TYPE_ASSERT, "(unsigned)( (iZone / 8) ) < (unsigned)( ( ( 256 ) / 8 ) )", "(iZone / 8) doesn't index BOT_ZONE_STACK_VISIT_MAX\n\t%i not in [0, %i)", duration, v111) )
                              __debugbreak();
                          }
                          if ( ((unsigned __int8)v63 & *((_BYTE *)v129 + v65)) != 0 )
                          {
                            v64 = 1;
                            v66 = Bot_ZoneGetCount(v62, v28, BOT_ZONE_COUNT_ENEMY_KNOWN);
                            Bot_ZoneSetCount(v62, v28, BOT_ZONE_COUNT_ENEMY_KNOWN, v66 + 1);
                            v67 = Bot_ZoneGetCount(v62, v28, BOT_ZONE_COUNT_ENEMY_PREDICT);
                            Bot_ZoneSetCount(v62, v28, BOT_ZONE_COUNT_ENEMY_PREDICT, v67 + 1);
                          }
                          ++v62;
                          v63 = __ROL1__(v63, 1);
                        }
                        while ( (int)v62 < v112 );
                        v68 = v64 == 0;
                        v17 = ent;
                        if ( v68 )
LABEL_107:
                          ++unAccountedEnemies[v27];
                        if ( SV_BotIsBotEnt(v17) && !Bot_GetEntityData(v17) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25864, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
                          __debugbreak();
                        LODWORD(v7) = v112;
                      }
                      v15 = v113;
                      v16 = v114;
                    }
                  }
                }
              }
            }
          }
        }
LABEL_114:
        ++v15;
        v16 += 1456i64;
      }
      v69 = (int)v7;
      if ( (int)v7 <= 0 )
        goto LABEL_135;
      v70 = 0i64;
      while ( 1 )
      {
        team = s_botZoneData[v70].team;
        if ( team )
          break;
LABEL_133:
        ++v70;
        if ( !--v69 )
        {
          LODWORD(v7) = v112;
LABEL_135:
          __asm { vmovss  xmm11, cs:__real@3f800000 }
          v76 = &v120;
          v77 = 4i64;
          v118 = &v120;
          v78 = v128;
          v115 = 4i64;
          v79 = 0;
          while ( 2 )
          {
            for ( i = 0; i < (int)v7; ++i )
            {
              v81 = Bot_ZoneGetCount(i, v79, BOT_ZONE_COUNT_ENEMY_KNOWN);
              Bot_ZoneSetCount(i, v79, BOT_ZONE_COUNT_ENEMY_PREDICT, v81);
            }
            v82 = *(int *)((char *)unAccountedEnemies + v77);
            if ( v82 > 0 )
            {
              v83 = -1;
              if ( v82 != *(_DWORD *)((char *)&v117 + v77) || *(int *)v76 <= 0 )
                goto LABEL_147;
              __asm
              {
                vxorps  xmm0, xmm0, xmm0
                vcvtsi2ss xmm0, xmm0, eax
              }
              v85 = v112;
              v86 = 0;
              __asm
              {
                vdivss  xmm1, xmm11, xmm0
                vmulss  xmm8, xmm1, dword ptr [r15-8]
                vmulss  xmm9, xmm1, dword ptr [r15-4]
                vmulss  xmm10, xmm1, dword ptr [r15]
                vxorps  xmm7, xmm7, xmm7
              }
              if ( v112 > 0 )
              {
                do
                {
                  v91 = Path_ConvertZoneIndexToZone(v86);
                  pathnode_t::GetPos(v91, &origin);
                  __asm
                  {
                    vmovss  xmm0, dword ptr [rbp+0A0h+origin]
                    vmovss  xmm1, dword ptr [rbp+0A0h+origin+4]
                    vsubss  xmm3, xmm0, xmm8
                    vmovss  xmm0, dword ptr [rbp+0A0h+origin+8]
                    vsubss  xmm2, xmm1, xmm9
                    vsubss  xmm4, xmm0, xmm10
                    vmulss  xmm2, xmm2, xmm2
                    vmulss  xmm1, xmm3, xmm3
                    vmulss  xmm0, xmm4, xmm4
                    vaddss  xmm3, xmm2, xmm1
                    vaddss  xmm6, xmm3, xmm0
                  }
                  v102 = Bot_ZoneGetCount(v86, v79, BOT_ZONE_COUNT_ALLY);
                  if ( v102 <= 0 )
                  {
                    __asm { vcomiss xmm6, xmm7 }
                    if ( v102 )
                    {
                      v83 = v86;
                      __asm { vmovaps xmm7, xmm6 }
                    }
                  }
                  ++v86;
                }
                while ( v86 < v112 );
                v77 = v115;
LABEL_147:
                v85 = v112;
              }
              v103 = 0;
              if ( v85 > 0 )
              {
                do
                  Bot_ZonePredictEnemyProx(v103++, v79, enemyNodeTeam, v82, v83);
                while ( v103 < v112 );
                v77 = v115;
                v76 = v118;
              }
              LODWORD(v7) = v112;
            }
            v77 -= 4i64;
            v115 = v77;
            v76 = (__int64 *)((char *)v76 + 4);
            --enemyNodeTeam;
            ++v79;
            v118 = v76;
            v78 = (__int64 *)((char *)v78 + 12);
            if ( enemyNodeTeam <= -1 )
            {
              __asm
              {
                vmovaps xmm11, [rsp+1A0h+var_80]
                vmovaps xmm10, [rsp+1A0h+var_70]
                vmovaps xmm9, [rsp+1A0h+var_60]
                vmovaps xmm8, [rsp+1A0h+var_50]
                vmovaps xmm7, [rsp+1A0h+var_40]
                vmovaps xmm6, [rsp+1A0h+var_30]
              }
              return;
            }
            continue;
          }
        }
      }
      v72 = team - 1;
      if ( Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) )
      {
        v73 = 2;
        if ( v72 < 2 )
          v73 = v72;
        if ( v73 < 3 )
          goto LABEL_129;
        LODWORD(v111) = 3;
        LODWORD(duration) = v73;
        v74 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\pathnode.h", 205, ASSERT_TYPE_ASSERT, "(unsigned)( result ) < (unsigned)( (3) )", "result doesn't index MAX_NODE_TEAMS_SP\n\t%i not in [0, %i)", duration, v111);
      }
      else
      {
        v73 = 1;
        if ( v72 < 1 )
          v73 = v72;
        if ( v73 < 2 )
          goto LABEL_132;
        LODWORD(v111) = 2;
        LODWORD(duration) = v73;
        v74 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\pathnode.h", 210, ASSERT_TYPE_ASSERT, "(unsigned)( result ) < (unsigned)( (2) )", "result doesn't index MAX_NODE_TEAMS_MP\n\t%i not in [0, %i)", duration, v111);
      }
      if ( v74 )
        __debugbreak();
LABEL_129:
      if ( v73 >= 2 )
      {
        LODWORD(v111) = 2;
        LODWORD(duration) = v73;
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25877, ASSERT_TYPE_ASSERT, "(unsigned)( zoneNodeTeam ) < (unsigned)( (2) )", "zoneNodeTeam doesn't index MAX_NODE_TEAMS_MP\n\t%i not in [0, %i)", duration, v111) )
          __debugbreak();
      }
LABEL_132:
      ++*((_DWORD *)&v117 + (int)v73);
      goto LABEL_133;
    }
  }
}

/*
==============
SV_BadPlaceExistsToBot
==============
*/
__int64 SV_BadPlaceExistsToBot(const ai_common_t *self, unsigned __int8 badPlaceType)
{
  if ( !self && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11145, ASSERT_TYPE_ASSERT, "( self )", (const char *)&queryFormat, "self") )
    __debugbreak();
  if ( !Com_GameMode_SupportsFeature(WEAPON_RAISING_ALTSWITCH) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11146, ASSERT_TYPE_ASSERT, "( G_Bot_UseGlobalBadPlace() )", (const char *)&queryFormat, "G_Bot_UseGlobalBadPlace()") )
    __debugbreak();
  _RBX = Bot_GetEntityData(self->ent);
  if ( !_RBX && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 11149, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( badPlaceType != 1 )
    return 1i64;
  __asm
  {
    vxorps  xmm0, xmm0, xmm0
    vcomiss xmm0, dword ptr [rbx+802Ch]
  }
  return 0i64;
}

/*
==============
SV_BotAllocateSystemMemory
==============
*/
void SV_BotAllocateSystemMemory(HunkUser *hunkUser)
{
  __int64 zoneCount; 
  unsigned int v3; 
  unsigned __int64 v4; 
  bot_zone_data_t *v5; 
  unsigned int v6; 
  unsigned __int8 *v7; 
  bot_sentient_history_t *v8; 
  __int16 *v9; 
  __int64 i; 

  if ( BG_BotOrAgentSystemEnabled() )
  {
    if ( !hunkUser && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 785, ASSERT_TYPE_ASSERT, "( hunkUser )", (const char *)&queryFormat, "hunkUser") )
      __debugbreak();
    zoneCount = (unsigned int)pathData.zoneCount;
    v3 = pathData.nodeCount - pathData.zoneCount;
    if ( s_botZoneData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 791, ASSERT_TYPE_ASSERT, "( !s_botZoneData )", (const char *)&queryFormat, "!s_botZoneData") )
      __debugbreak();
    s_botZoneDataCount = zoneCount;
    if ( (_DWORD)zoneCount )
    {
      v4 = 52 * zoneCount;
      v5 = (bot_zone_data_t *)Mem_HunkUser_AllocInternal(hunkUser, v4, 4ui64, "SV_BotAllocateSystemMemory");
      s_botZoneData = v5;
      if ( !v5 )
      {
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 797, ASSERT_TYPE_ASSERT, "( s_botZoneData )", (const char *)&queryFormat, "s_botZoneData") )
          __debugbreak();
        v5 = s_botZoneData;
      }
      memset_0(v5, 0, v4);
    }
    if ( s_botTraversalTypes && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 801, ASSERT_TYPE_ASSERT, "( !s_botTraversalTypes )", (const char *)&queryFormat, "!s_botTraversalTypes") )
      __debugbreak();
    if ( (_DWORD)s_botTraversalTypesCount && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 802, ASSERT_TYPE_ASSERT, "( s_botTraversalTypesCount == 0 )", (const char *)&queryFormat, "s_botTraversalTypesCount == 0") )
      __debugbreak();
    if ( v3 )
    {
      v6 = v3 >> 1;
      LODWORD(s_botTraversalTypesCount) = v6 + 1;
      v7 = (unsigned __int8 *)Mem_HunkUser_AllocInternal(hunkUser, v6 + 1, 4ui64, "SV_BotAllocateSystemMemory");
      s_botTraversalTypes = v7;
      if ( !v7 )
      {
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 808, ASSERT_TYPE_ASSERT, "( s_botTraversalTypes )", (const char *)&queryFormat, "s_botTraversalTypes") )
          __debugbreak();
        v7 = s_botTraversalTypes;
      }
      memset_0(v7, 0, v6 + 1);
    }
    if ( s_botSentientHistory && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 813, ASSERT_TYPE_ASSERT, "( !s_botSentientHistory )", (const char *)&queryFormat, "!s_botSentientHistory") )
      __debugbreak();
    v8 = (bot_sentient_history_t *)Mem_HunkUser_AllocInternal(hunkUser, 0x1100ui64, 4ui64, "SV_BotAllocateSystemMemory");
    s_botSentientHistory = v8;
    if ( !v8 )
    {
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 816, ASSERT_TYPE_ASSERT, "( s_botSentientHistory )", (const char *)&queryFormat, "s_botSentientHistory") )
        __debugbreak();
      v8 = s_botSentientHistory;
    }
    memset_0(v8, 0, 0x1100ui64);
    v9 = s_botEntAffecters;
    s_botDoorBlockerData[0].ownerId = -1;
    for ( i = 64i64; i; --i )
      *v9++ = 2047;
    s_botDoorBlockerData[1].ownerId = -1;
    s_botDoorBlockerData[2].ownerId = -1;
    s_botDoorBlockerData[3].ownerId = -1;
    s_botDoorBlockerData[4].ownerId = -1;
    s_botDoorBlockerData[5].ownerId = -1;
    s_botDoorBlockerData[6].ownerId = -1;
    s_botDoorBlockerData[7].ownerId = -1;
    s_botDoorBlockerData[8].ownerId = -1;
    s_botDoorBlockerData[9].ownerId = -1;
    s_botDoorBlockerData[10].ownerId = -1;
    s_botDoorBlockerData[11].ownerId = -1;
    s_botDoorBlockerData[12].ownerId = -1;
    s_botDoorBlockerData[13].ownerId = -1;
    s_botDoorBlockerData[14].ownerId = -1;
    s_botDoorBlockerData[15].ownerId = -1;
    s_botDoorBlockerData[16].ownerId = -1;
    s_botDoorBlockerData[17].ownerId = -1;
    s_botDoorBlockerData[18].ownerId = -1;
    s_botDoorBlockerData[19].ownerId = -1;
    s_botDoorBlockerData[20].ownerId = -1;
    s_botDoorBlockerData[21].ownerId = -1;
    s_botDoorBlockerData[22].ownerId = -1;
    s_botDoorBlockerData[23].ownerId = -1;
    s_botDoorBlockerData[24].ownerId = -1;
    s_botDoorBlockerData[25].ownerId = -1;
    s_botDoorBlockerData[26].ownerId = -1;
    s_botDoorBlockerData[27].ownerId = -1;
    s_botDoorBlockerData[28].ownerId = -1;
    s_botDoorBlockerData[29].ownerId = -1;
    s_botDoorBlockerData[30].ownerId = -1;
    s_botDoorBlockerData[31].ownerId = -1;
  }
}

/*
==============
SV_BotAllowedToSeeEnt
==============
*/
int SV_BotAllowedToSeeEnt(ai_common_t *self, const gentity_s *ent)
{
  const bot_data_t *EntityData; 
  BOOL IsHardwareEnt; 
  unsigned int eType; 
  BOOL v8; 
  int v9; 
  BOOL v10; 

  if ( !self && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17783, ASSERT_TYPE_ASSERT, "( self )", (const char *)&queryFormat, "self") )
    __debugbreak();
  if ( !self->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17784, ASSERT_TYPE_ASSERT, "( self->ent )", (const char *)&queryFormat, "self->ent") )
    __debugbreak();
  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17785, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( !ent->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17786, ASSERT_TYPE_ASSERT, "( ent->sentient )", (const char *)&queryFormat, "ent->sentient") )
    __debugbreak();
  EntityData = Bot_GetEntityData(self->ent);
  if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17793, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( Bot_EntityIsInvisible(ent) || Bot_IsBlinded(EntityData) || ent->health <= 0 )
    return 0;
  if ( Bot_IsVehicleEnt(ent) )
    return !Sentient_IsAerial(ent->sentient) || !Bot_IsAerialEntityInDeathStage(ent);
  if ( SV_BotCanAlwaysSeeEnt(self, ent) || Bot_EntityVisibleThroughWalls(EntityData, ent) )
    return 1;
  IsHardwareEnt = Bot_IsHardwareEnt(ent);
  eType = (unsigned __int16)ent->s.eType;
  v8 = IsHardwareEnt;
  v10 = (unsigned __int16)eType <= 0x11u && (v9 = 133122, _bittest(&v9, eType)) || Bot_IsVehicleEnt(ent);
  if ( (!v8 || !Bot_CanSeeHardware(self, ent)) && !v10 )
    return 0;
  return Bot_SightThresholdReached(self->sentient, ent->sentient);
}

/*
==============
SV_BotBreakGlassMove
==============
*/
__int64 SV_BotBreakGlassMove(const gentity_s *ent, const vec3_t *velocity, const Bounds *bounds)
{
  int number; 
  unsigned __int16 GlassHitId; 
  vec3_t start; 
  vec3_t end; 
  vec3_t damageDir; 
  vec3_t damagePos; 
  trace_t results; 

  _RDI = velocity;
  _RBX = ent;
  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25973, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( !bounds && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25974, ASSERT_TYPE_ASSERT, "( bounds )", (const char *)&queryFormat, "bounds") )
    __debugbreak();
  if ( !level.frameDuration && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_level_locals.h", 349, ASSERT_TYPE_ASSERT, "(level.frameDuration)", "%s\n\tAccessing frame duration before it's been set", "level.frameDuration") )
    __debugbreak();
  __asm
  {
    vmovss  xmm1, dword ptr [rbx+130h]
    vmovss  xmm2, dword ptr [rbx+134h]
    vmovss  xmm3, dword ptr [rbx+138h]
    vxorps  xmm0, xmm0, xmm0
    vmovss  dword ptr [rbp+57h+start], xmm1
    vcvtsi2ss xmm0, xmm0, eax
    vmulss  xmm4, xmm0, cs:__real@3a83126f
    vmulss  xmm0, xmm4, dword ptr [rdi]
  }
  number = _RBX->s.number;
  __asm
  {
    vaddss  xmm1, xmm0, xmm1
    vmulss  xmm0, xmm4, dword ptr [rdi+4]
    vmovss  dword ptr [rbp+57h+end], xmm1
    vaddss  xmm1, xmm0, xmm2
    vmulss  xmm0, xmm4, dword ptr [rdi+8]
    vmovss  dword ptr [rbp+57h+end+4], xmm1
    vaddss  xmm1, xmm0, xmm3
    vmovss  dword ptr [rbp+57h+end+8], xmm1
    vmovss  dword ptr [rbp+57h+start+4], xmm2
    vmovss  dword ptr [rbp+57h+start+8], xmm3
  }
  G_Main_TraceCapsule(&results, &start, &end, bounds, number, 16);
  GlassHitId = Trace_GetGlassHitId(&results);
  if ( !GlassHitId )
    return 0i64;
  __asm
  {
    vmovss  xmm5, [rbp+57h+results.fraction]
    vmovss  xmm0, dword ptr [rbp+57h+end]
    vsubss  xmm1, xmm0, dword ptr [rbp+57h+start]
    vmovss  xmm4, dword ptr [rdi]
    vmulss  xmm1, xmm1, xmm5
    vaddss  xmm0, xmm1, dword ptr [rbp+57h+start]
    vmovss  xmm1, dword ptr [rbp+57h+end+4]
    vmovss  dword ptr [rbp+57h+damagePos], xmm0
    vsubss  xmm0, xmm1, dword ptr [rbp+57h+start+4]
    vmulss  xmm2, xmm0, xmm5
    vaddss  xmm3, xmm2, dword ptr [rbp+57h+start+4]
    vmovss  xmm0, dword ptr [rbp+57h+end+8]
    vsubss  xmm1, xmm0, dword ptr [rbp+57h+start+8]
    vmulss  xmm2, xmm1, xmm5
    vmovss  xmm5, dword ptr [rdi+4]
    vmulss  xmm0, xmm5, xmm5
    vmovss  dword ptr [rbp+57h+damagePos+4], xmm3
    vaddss  xmm3, xmm2, dword ptr [rbp+57h+start+8]
    vmulss  xmm1, xmm4, xmm4
    vaddss  xmm2, xmm1, xmm0
    vmovss  dword ptr [rbp+57h+damagePos+8], xmm3
    vmovaps [rsp+100h+var_28+8], xmm6
    vmovss  xmm6, dword ptr [rdi+8]
    vmulss  xmm1, xmm6, xmm6
    vaddss  xmm2, xmm2, xmm1
    vmovss  xmm1, cs:__real@3f800000
    vsqrtss xmm3, xmm2, xmm2
    vcmpless xmm0, xmm3, cs:__real@80000000
    vblendvps xmm0, xmm3, xmm1, xmm0
    vdivss  xmm2, xmm1, xmm0
    vmulss  xmm0, xmm4, xmm2
    vmovss  dword ptr [rbp+57h+damageDir], xmm0
    vmulss  xmm0, xmm6, xmm2
    vmulss  xmm1, xmm5, xmm2
    vmovss  dword ptr [rbp+57h+damageDir+8], xmm0
    vmovss  dword ptr [rbp+57h+damageDir+4], xmm1
  }
  G_Glass_DamagePiece(GlassHitId - 1, 100000, &damagePos, &damageDir);
  __asm { vmovaps xmm6, [rsp+100h+var_28+8] }
  return 1i64;
}

/*
==============
SV_BotCanAlwaysSeeEnt
==============
*/
_BOOL8 SV_BotCanAlwaysSeeEnt(const ai_common_t *self, const gentity_s *ent)
{
  bot_data_t *EntityData; 
  const gentity_s *v5; 
  const playerState_s *EntityPlayerStateConst; 

  if ( !self && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17755, ASSERT_TYPE_ASSERT, "( self )", (const char *)&queryFormat, "self") )
    __debugbreak();
  if ( !self->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17756, ASSERT_TYPE_ASSERT, "( self->ent )", (const char *)&queryFormat, "self->ent") )
    __debugbreak();
  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17757, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  EntityData = Bot_GetEntityData(self->ent);
  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 6097, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( G_Utils_IsClientOrAgent(ent) )
  {
    v5 = EntityData->botInfo.ent;
    if ( !v5 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17726, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
      __debugbreak();
    _RDI = G_GetEntityPlayerStateConst(v5);
    if ( !_RDI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17729, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
      __debugbreak();
    if ( !BG_IsEMPJammed(_RDI) )
    {
      if ( GameModeFlagContainer<enum POtherFlagsCommon,enum POtherFlagsSP,enum POtherFlagsMP,64>::TestFlagInternal(&_RDI->otherFlags, ACTIVE, 3u) )
      {
        EntityPlayerStateConst = G_GetEntityPlayerStateConst(ent);
        return !EntityPlayerStateConst || !BG_HasPerk(&EntityPlayerStateConst->perks, 0x24u);
      }
      __asm
      {
        vmovss  xmm0, cs:__real@3c23d70a
        vcomiss xmm0, dword ptr [rdi+730h]
      }
    }
  }
  return Bot_EntityVisibleThroughWalls(EntityData, ent);
}

/*
==============
SV_BotCanTargetSentient
==============
*/
__int64 SV_BotCanTargetSentient(const sentient_s *botSentient, const sentient_s *enemySentient, int *isAwareOfSentient)
{
  signed __int64 v8; 
  __int64 v9; 
  const dvar_t *v10; 
  const dvar_t *v11; 
  const dvar_t *v12; 
  const Weapon *ViewmodelWeapon; 
  int scriptFlags; 
  int HasBestWeapForAerialEnemy; 
  int v17; 
  unsigned int v18; 
  int v19; 
  const Weapon *RangedWeapon; 
  const Weapon *v22; 

  if ( !botSentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17497, ASSERT_TYPE_ASSERT, "( botSentient )", (const char *)&queryFormat, "botSentient") )
    __debugbreak();
  if ( !botSentient->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17498, ASSERT_TYPE_ASSERT, "( botSentient->ent )", (const char *)&queryFormat, "botSentient->ent") )
    __debugbreak();
  if ( !enemySentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17499, ASSERT_TYPE_ASSERT, "( enemySentient )", (const char *)&queryFormat, "enemySentient") )
    __debugbreak();
  if ( !enemySentient->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17500, ASSERT_TYPE_ASSERT, "( enemySentient->ent )", (const char *)&queryFormat, "enemySentient->ent") )
    __debugbreak();
  if ( !isAwareOfSentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17501, ASSERT_TYPE_ASSERT, "( isAwareOfSentient )", (const char *)&queryFormat, "isAwareOfSentient") )
    __debugbreak();
  _RBX = Bot_GetEntityData(botSentient->ent);
  if ( !_RBX && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17509, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v8 = 60 * (enemySentient - level.sentients);
  v9 = (__int64)&_RBX->scriptedAgentInfo + v8 + 11644;
  if ( (bot_data_t *)((char *)_RBX + v8) == (bot_data_t *)-11652i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17513, ASSERT_TYPE_ASSERT, "( botSentientInfo )", (const char *)&queryFormat, "botSentientInfo") )
    __debugbreak();
  *isAwareOfSentient = 0;
  v10 = DVARINT_bot_NoTarget;
  if ( !DVARINT_bot_NoTarget && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_NoTarget") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v10);
  if ( v10->current.integer == 1 )
    return 0i64;
  v11 = DVARINT_bot_NoTarget;
  if ( !DVARINT_bot_NoTarget && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_NoTarget") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v11);
  if ( v11->current.integer == 2 && enemySentient->ent->s.eType == ET_PLAYER )
    return 0i64;
  v12 = DVARINT_bot_NoTarget;
  if ( !DVARINT_bot_NoTarget && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_NoTarget") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v12);
  if ( v12->current.integer == 3 && enemySentient->ent->s.eType != ET_PLAYER )
    return 0i64;
  if ( Bot_EntityIsInvisible(enemySentient->ent) )
    return 0i64;
  if ( !Bot_IsHighAerialSentient((sentient_s *)enemySentient) )
  {
    if ( Bot_IsHardwareEnt(enemySentient->ent) )
    {
      __asm
      {
        vxorps  xmm0, xmm0, xmm0
        vcomiss xmm0, dword ptr [rbx+8034h]
      }
      return 0i64;
    }
    goto LABEL_65;
  }
  ViewmodelWeapon = Bot_Weap_GetViewmodelWeapon(_RBX->botInfo.playerState);
  if ( Bot_Weap_IsNone(ViewmodelWeapon) )
  {
LABEL_43:
    *isAwareOfSentient = 1;
    return 0i64;
  }
  scriptFlags = _RBX->botInfo.scriptFlags;
  if ( (scriptFlags & 0x4000) != 0 )
  {
    if ( (scriptFlags & 0x2000) != 0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17574, ASSERT_TYPE_ASSERT, "( !(botData->botInfo.scriptFlags & ( 1 << 13 )) )", (const char *)&queryFormat, "!(botData->botInfo.scriptFlags & BOT_SCRIPT_FLAG_ALWAYS_ALLOW_AERIAL_TARGETING)") )
      __debugbreak();
    goto LABEL_43;
  }
  if ( Bot_IsAerialEntityInDeathStage(enemySentient->ent) )
    return 0i64;
  if ( (_RBX->botInfo.scriptFlags & 0x2000) == 0 && !Bot_HasRemoteEyes(_RBX) )
  {
    if ( !Bot_GetLastKnownEntNearestNode(_RBX, enemySentient->ent) )
      return 0i64;
    HasBestWeapForAerialEnemy = Bot_Weap_HasBestWeapForAerialEnemy(_RBX, enemySentient->ent);
    if ( Bot_Weap_AvailableWeapOfTypeOrClass(_RBX, 0, 0x1005u) )
    {
      if ( !enemySentient->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17444, ASSERT_TYPE_ASSERT, "( sentient->ent )", (const char *)&queryFormat, "sentient->ent") )
        __debugbreak();
      Bot_IsHighAerialSentient((sentient_s *)enemySentient);
      v17 = 1;
    }
    else
    {
      v17 = 0;
    }
    if ( !HasBestWeapForAerialEnemy )
    {
      *isAwareOfSentient = 1;
      if ( !v17 )
        return 0i64;
      v18 = *(_DWORD *)(v9 + 56);
      if ( (v18 & 1) == 0 )
      {
        v19 = *(_DWORD *)(v9 + 52);
        if ( !v19 || level.time - v19 > 5000 )
        {
          *(_DWORD *)(v9 + 52) = level.time;
          *(double *)&_XMM0 = G_random();
          __asm { vcomiss xmm0, dword ptr [rbx+803Ch] }
          v18 = *(_DWORD *)(v9 + 56) & 0xFFFFFFFE;
          *(_DWORD *)(v9 + 56) = v18;
        }
        if ( (v18 & 1) == 0 )
          return 0i64;
      }
    }
LABEL_65:
    if ( GameModeFlagContainer<enum BgEntityFlagsCommon,enum BgEntityFlagsSP,enum BgEntityFlagsMP,64>::TestFlagStrict(&enemySentient->ent->flags, (BgEntityFlagsMP)34) )
    {
      RangedWeapon = Bot_Weap_EntityGetRangedWeapon(botSentient->ent);
      if ( Bot_Weap_IsNone(RangedWeapon) )
        return 0i64;
      v22 = Bot_Weap_GetViewmodelWeapon(_RBX->botInfo.playerState);
      if ( !Bot_Weap_Ammo(_RBX->botInfo.playerState, v22) )
        return 0i64;
    }
  }
  *isAwareOfSentient = 1;
  return 1i64;
}

/*
==============
SV_BotCanUseTraversalLink
==============
*/
char SV_BotCanUseTraversalLink(const pathnode_t *startNode, const pathnode_t *endNode, const gentity_s *ent)
{
  if ( ((1 << LOBYTE(startNode->constant.type)) & 0x68010000) == 0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4378, ASSERT_TYPE_ASSERT, "( Path_IsNegotiationBegin( startNode ) )", (const char *)&queryFormat, "Path_IsNegotiationBegin( startNode )") )
    __debugbreak();
  if ( ((1 << LOBYTE(endNode->constant.type)) & 0x70020000) == 0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4379, ASSERT_TYPE_ASSERT, "( Path_IsNegotiationEnd( endNode ) )", (const char *)&queryFormat, "Path_IsNegotiationEnd( endNode )") )
    __debugbreak();
  if ( startNode->constant.target != endNode->constant.targetname && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4380, ASSERT_TYPE_ASSERT, "( startNode->constant.target == endNode->constant.targetname )", (const char *)&queryFormat, "startNode->constant.target == endNode->constant.targetname") )
    __debugbreak();
  return 1;
}

/*
==============
SV_BotCheckAvoidSentient
==============
*/
void SV_BotCheckAvoidSentient(int isAwareOfSentient, const sentient_s *botSentient, sentient_s *otherSentient)
{
  bot_data_t *EntityData; 
  int time; 
  __int16 number; 
  int v13; 
  const Weapon *v16; 
  vec3_t location1; 

  if ( !botSentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17308, ASSERT_TYPE_ASSERT, "( botSentient )", (const char *)&queryFormat, "botSentient") )
    __debugbreak();
  if ( !botSentient->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17309, ASSERT_TYPE_ASSERT, "( botSentient->ent )", (const char *)&queryFormat, "botSentient->ent") )
    __debugbreak();
  if ( !otherSentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17310, ASSERT_TYPE_ASSERT, "( otherSentient )", (const char *)&queryFormat, "otherSentient") )
    __debugbreak();
  if ( AI_IsAlliedSentient(botSentient, otherSentient) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17311, ASSERT_TYPE_ASSERT, "( !AI_IsAlliedSentient( botSentient, otherSentient ) )", (const char *)&queryFormat, "!AI_IsAlliedSentient( botSentient, otherSentient )") )
    __debugbreak();
  if ( isAwareOfSentient )
  {
    EntityData = Bot_GetEntityData(botSentient->ent);
    _RAX = otherSentient->ent;
    if ( otherSentient->ent->s.eType != ET_SCRIPTMOVER || (otherSentient->sentientFlags & 2) == 0 )
    {
      __asm { vmovss  xmm0, dword ptr [rax+130h] }
      time = level.time;
      __asm
      {
        vmovss  xmm1, dword ptr [rax+134h]
        vmovss  dword ptr [rsp+78h+location1], xmm0
        vmovss  xmm0, dword ptr [rax+138h]
      }
      number = _RAX->s.number;
      __asm
      {
        vmovss  dword ptr [rsp+78h+location1+8], xmm0
        vmovss  dword ptr [rsp+78h+location1+4], xmm1
      }
      v13 = 4 - (Sentient_IsAerial(otherSentient) != 0);
      if ( Bot_MemoryFindEvent(EntityData, (bot_mem_type_t)v13, number, NULL, time, time - 10000) )
      {
        Bot_MemoryUpdateEntityEvent(EntityData, (bot_mem_type_t)v13, number, 1, time, time - 10000);
      }
      else
      {
        _RBP = &botSentient->ent->r.currentOrigin;
        __asm
        {
          vxorps  xmm0, xmm0, xmm0
          vucomiss xmm0, dword ptr [rbp+0]
        }
        if ( botSentient->ent != (gentity_s *)-304i64 )
          goto LABEL_21;
        __asm { vucomiss xmm0, dword ptr [rbp+4] }
        if ( botSentient->ent != (gentity_s *)-304i64 )
          goto LABEL_21;
        __asm { vucomiss xmm0, dword ptr [rbp+8] }
        if ( botSentient->ent != (gentity_s *)-304i64 )
        {
LABEL_21:
          v16 = Bot_Weap_None();
          Bot_MemoryWriteEvent(EntityData, (bot_mem_type_t)v13, v16, &location1, _RBP, number);
          EntityData->botInfo.pNavigator->ClearPath(EntityData->botInfo.pNavigator);
        }
      }
      if ( !Bot_GetHidingFromEntity(EntityData) && Sentient_IsAerial(otherSentient) && (Bot_RecentSeeSentient(EntityData, otherSentient, 1000) || (unsigned int)Bot_IsEntPositionAlwaysKnown(botSentient->ai, otherSentient->ent)) && (Bot_IsHighAerialSentient(otherSentient) && (unsigned int)Bot_HasLOSToHighAerialEnemy(EntityData, otherSentient->ent) || Bot_EntityFacesBot(EntityData, otherSentient->ent)) )
      {
        __asm { vmovss  xmm2, cs:__real@43fa0000; hideRange }
        Bot_HideFromEntity(EntityData, otherSentient->ent, *(float *)&_XMM2, 5000);
      }
    }
  }
}

/*
==============
SV_BotClearActiveBotCount
==============
*/
void SV_BotClearActiveBotCount(void)
{
  s_botActiveBotCount = 0;
}

/*
==============
SV_BotClearBotSentientInfo
==============
*/
void SV_BotClearBotSentientInfo(sentient_s *botSentient, sentient_s *otherSentient)
{
  bot_data_t *EntityData; 
  signed __int64 v5; 
  __int64 v6; 

  if ( !botSentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24352, ASSERT_TYPE_ASSERT, "( botSentient )", (const char *)&queryFormat, "botSentient") )
    __debugbreak();
  if ( !otherSentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24353, ASSERT_TYPE_ASSERT, "( otherSentient )", (const char *)&queryFormat, "otherSentient") )
    __debugbreak();
  EntityData = Bot_GetEntityData(botSentient->ent);
  if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24359, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v5 = 60 * (otherSentient - level.sentients);
  v6 = (__int64)&EntityData->scriptedAgentInfo + v5 + 11644;
  if ( (bot_data_t *)((char *)EntityData + v5) == (bot_data_t *)-11652i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24362, ASSERT_TYPE_ASSERT, "( botSentientInfo )", (const char *)&queryFormat, "botSentientInfo") )
    __debugbreak();
  *(_QWORD *)v6 = 0i64;
  *(_QWORD *)(v6 + 8) = 0i64;
  *(_QWORD *)(v6 + 16) = 0i64;
  *(_QWORD *)(v6 + 24) = 0i64;
  *(_QWORD *)(v6 + 32) = 0i64;
  *(_QWORD *)(v6 + 40) = 0i64;
  *(_QWORD *)(v6 + 48) = 0i64;
  *(_DWORD *)(v6 + 56) = 0;
}

/*
==============
SV_BotClearGoalAndEnemy
==============
*/
void SV_BotClearGoalAndEnemy(gentity_s *bot)
{
  bot_data_t *EntityData; 
  sentient_s *i; 
  bitarray<224> iTeamFlags; 

  if ( !bot && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2056, ASSERT_TYPE_ASSERT, "( bot )", (const char *)&queryFormat, "bot") )
    __debugbreak();
  EntityData = Bot_GetEntityData(bot);
  if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 2063, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  Bot_ClearEnemy(EntityData);
  Bot_ClearScriptGoal(EntityData);
  Bot_BadPath(bot);
  memset_0(&EntityData->botMatchData.botMemory, 0, sizeof(EntityData->botMatchData.botMemory));
  if ( Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) )
    _RAX = Com_TeamsSP_GetAllTeamFlags();
  else
    _RAX = Com_TeamsMP_GetAllTeamFlags();
  __asm
  {
    vmovups xmm0, xmmword ptr [rax]
    vmovups xmmword ptr [rsp+68h+iTeamFlags.array], xmm0
    vmovsd  xmm1, qword ptr [rax+10h]
    vmovsd  qword ptr [rsp+68h+iTeamFlags.array+10h], xmm1
  }
  iTeamFlags.array[6] = _RAX->array[6];
  for ( i = Sentient_FirstSentient(&iTeamFlags); i; i = Sentient_NextSentient(i, &iTeamFlags) )
    SentientInfo_Clear(EntityData->botInfo.ent->sentient, i);
}

/*
==============
SV_BotControllingRemoteMissile
==============
*/
_BOOL8 SV_BotControllingRemoteMissile(const gentity_s *ent)
{
  const bot_data_t *EntityData; 

  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5446, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( !SV_BotIsBotEnt(ent) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5447, ASSERT_TYPE_ASSERT, "( SV_BotIsBotEnt( ent ) )", (const char *)&queryFormat, "SV_BotIsBotEnt( ent )") )
    __debugbreak();
  EntityData = Bot_GetEntityData(ent);
  if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5450, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  return Bot_IsControllingRemoteMissile(EntityData);
}

/*
==============
SV_BotDebugString
==============
*/

void __fastcall SV_BotDebugString(bot_data_t *botData, const vec3_t *xyz, const vec4_t *color, double scale, const char *pszText, int duration)
{
  int time; 
  int *p_expireTime; 
  int v10; 
  int v11; 
  int v12; 
  __int64 v13; 

  __asm { vmovaps xmm2, xmm3; scale }
  G_Main_AddDebugStringWithDuration(xyz, color, *(float *)&_XMM2, pszText, duration);
  if ( botData )
  {
    if ( !pszText && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 22612, ASSERT_TYPE_ASSERT, "( pszText )", (const char *)&queryFormat, "pszText") )
      __debugbreak();
    time = level.time;
    p_expireTime = &botData->botDebugData.hudStrings[0].expireTime;
    v10 = -1;
    v11 = 0x7FFFFFFF;
    v12 = 0;
    while ( *p_expireTime >= time )
    {
      if ( !level.frameDuration )
      {
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_level_locals.h", 349, ASSERT_TYPE_ASSERT, "(level.frameDuration)", "%s\n\tAccessing frame duration before it's been set", "level.frameDuration") )
          __debugbreak();
        time = level.time;
      }
      if ( *p_expireTime - *(p_expireTime - 1) > level.frameDuration && *p_expireTime - time < v11 )
      {
        v10 = v12;
        v11 = *p_expireTime - time;
      }
      ++v12;
      p_expireTime += 21;
      if ( v12 >= 32 )
        goto LABEL_17;
    }
    v10 = v12;
LABEL_17:
    if ( v10 >= 0 )
    {
      v13 = v10;
      botData->botDebugData.hudStrings[v13].addedTime = time;
      if ( !level.frameDuration && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_level_locals.h", 349, ASSERT_TYPE_ASSERT, "(level.frameDuration)", "%s\n\tAccessing frame duration before it's been set", "level.frameDuration") )
        __debugbreak();
      botData->botDebugData.hudStrings[v13].expireTime = level.time + duration * level.frameDuration;
      strncpy(botData->botDebugData.hudStrings[v13].string, pszText, 0x4Bui64);
    }
    qsort(botData->botDebugData.hudStrings, 0x20ui64, 0x54ui64, (_CoreCrtNonSecureSearchSortCompareFunction)Bot_CompareHUDStrings);
  }
}

/*
==============
SV_BotDebugStringEnt
==============
*/

void __fastcall SV_BotDebugStringEnt(gentity_s *ent, const vec3_t *xyz, const vec4_t *color, double scale, const char *pszText, int duration)
{
  float v8; 
  bot_data_t *EntityData; 
  vec3_t xyza; 
  vec4_t colora; 

  __asm
  {
    vmovaps [rsp+78h+var_18], xmm6
    vmovsd  xmm0, qword ptr [rdx]
  }
  v8 = xyz->v[2];
  __asm
  {
    vmovsd  qword ptr [rsp+78h+xyz], xmm0
    vmovups xmm0, xmmword ptr [r8]
    vmovups xmmword ptr [rsp+78h+color], xmm0
    vmovaps xmm6, xmm3
  }
  xyza.v[2] = v8;
  EntityData = Bot_GetEntityData(ent);
  __asm { vmovaps xmm3, xmm6; scale }
  SV_BotDebugString(EntityData, &xyza, &colora, *(float *)&_XMM3, pszText, duration);
  __asm { vmovaps xmm6, [rsp+78h+var_18] }
}

/*
==============
SV_BotDisconnectCleanup
==============
*/
void SV_BotDisconnectCleanup(const int clientIndex)
{
  SvClient *CommonClient; 

  if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
    __debugbreak();
  CommonClient = SvClient::GetCommonClient(clientIndex);
  memset_0(&CommonClient[4].lastUsercmd.vehOrgZ, 0, 0x2A008ui64);
  SV_ReleaseBotDataForClientIndex(clientIndex);
}

/*
==============
SV_BotDrawDebugClientScreen
==============
*/
void SV_BotDrawDebugClientScreen(const LocalClientNum_t localClientNum)
{
  bot_data_t *SpectatedBotData; 
  const char *string; 
  int v3; 
  const char *v4; 
  __int64 v5; 
  __int64 v6; 
  int v7; 

  if ( SvStaticGlobals::ms_svStaticGlobals.state )
  {
    if ( level.num_entities )
    {
      SpectatedBotData = Bot_GetSpectatedBotData(localClientNum);
      if ( SpectatedBotData )
      {
        string = SpectatedBotData->botDebugData.hudStrings[0].string;
        v3 = 120;
        v4 = SpectatedBotData->botDebugData.hudStrings[0].string;
        v5 = 32i64;
        v6 = 32i64;
        do
        {
          if ( !level.frameDuration && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_level_locals.h", 349, ASSERT_TYPE_ASSERT, "(level.frameDuration)", "%s\n\tAccessing frame duration before it's been set", "level.frameDuration") )
            __debugbreak();
          if ( *((_DWORD *)v4 - 1) - *((_DWORD *)v4 - 2) <= level.frameDuration )
          {
            if ( !level.frameDuration && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_level_locals.h", 349, ASSERT_TYPE_ASSERT, "(level.frameDuration)", "%s\n\tAccessing frame duration before it's been set", "level.frameDuration") )
              __debugbreak();
            if ( *((_DWORD *)v4 - 1) >= level.time - level.frameDuration && *v4 )
            {
              Bot_HudText(v3, v4);
              v3 += 14;
            }
          }
          v4 += 84;
          --v6;
        }
        while ( v6 );
        v7 = v3 + 7;
        if ( v3 <= 120 )
          v7 = v3;
        do
        {
          if ( !level.frameDuration && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_level_locals.h", 349, ASSERT_TYPE_ASSERT, "(level.frameDuration)", "%s\n\tAccessing frame duration before it's been set", "level.frameDuration") )
            __debugbreak();
          if ( *((_DWORD *)string - 1) - *((_DWORD *)string - 2) > level.frameDuration )
          {
            if ( !level.frameDuration && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_level_locals.h", 349, ASSERT_TYPE_ASSERT, "(level.frameDuration)", "%s\n\tAccessing frame duration before it's been set", "level.frameDuration") )
              __debugbreak();
            if ( *((_DWORD *)string - 1) >= level.time - level.frameDuration )
            {
              if ( *string )
              {
                Bot_HudText(v7, string);
                v7 += 14;
              }
            }
          }
          string += 84;
          --v5;
        }
        while ( v5 );
      }
    }
  }
}

/*
==============
SV_BotDrawDebugNodeScores
==============
*/
void SV_BotDrawDebugNodeScores()
{
  const dvar_t *v10; 
  int v20; 
  __int64 i; 
  gentity_s *v22; 
  __int16 EntityIndex; 
  const SvClientMP *MpClient; 
  BOOL IsClientConnected; 
  int number; 
  bot_data_t *EntityData; 
  const dvar_t *v28; 
  const dvar_t *v29; 
  const dvar_t *v30; 
  int debugScoresCount; 
  bot_score_item_s *p_objects; 
  __int64 v33; 
  bot_debug_score_t *debugScores; 
  int object; 
  const dvar_t *v36; 
  int debugScoresSelectCount; 
  int v38; 
  int v39; 
  int v40; 
  int v41; 
  int v42; 
  __int64 v43; 
  int *p_score; 
  int v45; 
  int v46; 
  int v47; 
  const dvar_t *v48; 
  int v49; 
  bot_debug_score_t *v50; 
  pathnode_t *v51; 
  const dvar_t *v52; 
  int v53; 
  int v54; 
  __int64 v55; 
  int v56; 
  const dvar_t *v59; 
  int integer; 
  const dvar_t *v66; 
  char v67; 
  const dvar_t *v70; 
  int score; 
  const dvar_t *v72; 
  const char *v84; 
  const char *v88; 
  const dvar_t *v90; 
  int v92; 
  int *factors; 
  int v97; 
  const char *v107; 
  __int64 nodesToPick; 
  int *nodesPicked; 
  int v121; 
  int v122; 
  int v123; 
  int v124; 
  __int64 v125; 
  __int64 v126; 
  vec3_t outPos; 
  vec3_t pos; 
  vec4_t color; 
  bot_score_item_s objects; 
  char v131[8192]; 

  v10 = DVARINT_bot_ScoreType;
  if ( !DVARINT_bot_ScoreType && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_ScoreType") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v10);
  if ( v10->current.integer )
  {
    __asm
    {
      vmovaps [rsp+4160h+var_30], xmm6
      vmovaps [rsp+4160h+var_40], xmm7
      vmovaps [rsp+4160h+var_50], xmm8
      vmovaps [rsp+4160h+var_60], xmm9
      vmovaps [rsp+4160h+var_70], xmm10
      vmovaps [rsp+4160h+var_80], xmm11
      vmovaps [rsp+4160h+var_90], xmm12
      vmovaps [rsp+4160h+var_A0], xmm13
      vmovaps [rsp+4160h+var_B0], xmm14
      vmovaps [rsp+4160h+var_C0], xmm15
    }
    CL_GetViewPos(LOCAL_CLIENT_0, &outPos);
    memset_0(v131, 0, 0x1FFFui64);
    __asm
    {
      vmovss  xmm12, dword ptr [rsp+4160h+outPos+4]
      vmovss  xmm13, dword ptr [rsp+4160h+outPos]
      vmovss  xmm11, cs:__real@3f800000
      vmovss  xmm14, cs:__real@42780000
      vmovss  xmm15, cs:__real@3f400000
      vmovss  xmm8, cs:__real@3c7a00fa
      vmovss  xmm9, cs:__real@3a83126f
      vmovss  xmm10, cs:__real@c0a00000
      vmovss  xmm7, cs:__real@3f000000
    }
    v20 = 0;
    for ( i = 0i64; ; ++i )
    {
      v126 = i;
      v123 = v20;
      if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
        __debugbreak();
      if ( v20 >= (int)ComCharacterLimits::ms_gameData.m_characterCount )
      {
        __asm
        {
          vmovaps xmm14, [rsp+4160h+var_B0]
          vmovaps xmm13, [rsp+4160h+var_A0]
          vmovaps xmm12, [rsp+4160h+var_90]
          vmovaps xmm11, [rsp+4160h+var_80]
          vmovaps xmm10, [rsp+4160h+var_70]
          vmovaps xmm9, [rsp+4160h+var_60]
          vmovaps xmm8, [rsp+4160h+var_50]
          vmovaps xmm7, [rsp+4160h+var_40]
          vmovaps xmm6, [rsp+4160h+var_30]
          vmovaps xmm15, [rsp+4160h+var_C0]
        }
        return;
      }
      if ( (unsigned int)v20 >= 0x800 )
      {
        LODWORD(nodesPicked) = 2048;
        LODWORD(nodesToPick) = v20;
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 188, ASSERT_TYPE_ASSERT, "(unsigned)( entityIndex ) < (unsigned)( ( 2048 ) )", "entityIndex doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", nodesToPick, nodesPicked) )
          __debugbreak();
      }
      if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 189, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
        __debugbreak();
      v22 = &g_entities[i];
      if ( v22 )
      {
        EntityIndex = G_GetEntityIndex(&g_entities[i]);
        if ( G_IsEntityInUse(EntityIndex) )
        {
          if ( v22->sentient )
            break;
        }
      }
LABEL_119:
      v20 = v123 + 1;
    }
    if ( v22->client )
    {
      MpClient = SV_Client_GetMpClient(v22->s.number);
      IsClientConnected = Bot_IsClientConnected(MpClient);
    }
    else
    {
      if ( !v22->agent )
      {
LABEL_24:
        if ( SV_BotIsBotEnt(v22) )
        {
          if ( SV_BotIsBotEntClient(v22) )
            number = v22->s.number;
          else
            number = -1;
          EntityData = Bot_GetEntityData(v22);
          if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1259, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
            __debugbreak();
          v28 = DVARINT_bot_ScoreType;
          if ( !DVARINT_bot_ScoreType && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_ScoreType") )
            __debugbreak();
          Dvar_CheckFrontendServerThread(v28);
          if ( v28->current.integer == EntityData->botDebugData.debugScoresParms.scoreType )
          {
            v29 = DVARINT_bot_ScoreClient;
            if ( !DVARINT_bot_ScoreClient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_ScoreClient") )
              __debugbreak();
            Dvar_CheckFrontendServerThread(v29);
            if ( v29->current.integer == -1 )
              goto LABEL_43;
            v30 = DVARINT_bot_ScoreClient;
            if ( !DVARINT_bot_ScoreClient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_ScoreClient") )
              __debugbreak();
            Dvar_CheckFrontendServerThread(v30);
            if ( v30->current.integer == number )
            {
LABEL_43:
              debugScoresCount = EntityData->botDebugData.debugScoresCount;
              if ( debugScoresCount > 0 )
              {
                p_objects = &objects;
                v33 = (unsigned int)debugScoresCount;
                debugScores = EntityData->botDebugData.debugScores;
                do
                {
                  object = debugScores->object;
                  ++debugScores;
                  p_objects->object = object;
                  ++p_objects;
                  --v33;
                }
                while ( v33 );
              }
              v36 = DVARBOOL_bot_ScoreHold;
              if ( !DVARBOOL_bot_ScoreHold && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 692, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_ScoreHold") )
                __debugbreak();
              Dvar_CheckFrontendServerThread(v36);
              if ( v36->current.enabled && EntityData->botDebugData.debugScoresCount > 0 && EntityData->botDebugData.debugScoresParms.scoreType )
              {
                Dvar_SetBool_Internal(DVARBOOL_bot_ScoreHold, 0);
                debugScoresSelectCount = EntityData->botDebugData.debugScoresSelectCount;
                v38 = EntityData->botDebugData.debugScoresCount;
                EntityData->botDebugData.debugScoresPicked = -1;
                if ( Bot_Score_ScoreNodesPick(EntityData, &objects, v38, debugScoresSelectCount, &EntityData->botDebugData.debugScoresParms, 1, &v124) == 1 )
                  EntityData->botDebugData.debugScoresPicked = v124;
                Dvar_SetBool_Internal(DVARBOOL_bot_ScoreHold, 1);
              }
              Bot_Score_DrawDebugParms(&objects, EntityData->botDebugData.debugScoresCount, &EntityData->botDebugData.debugScoresParms);
              v39 = EntityData->botDebugData.debugScoresCount;
              v40 = 0x7FFFFFFF;
              v122 = 0x7FFFFFFF;
              v41 = 0x80000000;
              v42 = 0x7FFFFFFF;
              if ( v39 > 0 )
              {
                v43 = (unsigned int)v39;
                p_score = &EntityData->botDebugData.debugScores[0].score;
                do
                {
                  v45 = *p_score;
                  v46 = *p_score;
                  if ( *p_score <= v41 )
                    v46 = v41;
                  v41 = v46;
                  v47 = *p_score;
                  if ( v45 >= v40 )
                    v47 = v40;
                  v40 = v47;
                  if ( v45 < v42 && v45 > 0 )
                    v42 = *p_score;
                  p_score += 18;
                  --v43;
                }
                while ( v43 );
                v122 = v47;
                if ( v42 == v41 && v41 > 0 && !v47 )
                  v42 = 0;
              }
              v48 = DVARINT_bot_ScoreShowAll;
              v49 = EntityData->botDebugData.debugScoresSelectCount;
              if ( !DVARINT_bot_ScoreShowAll && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_ScoreShowAll") )
                __debugbreak();
              Dvar_CheckFrontendServerThread(v48);
              if ( v48->current.integer > 0 )
                v49 = EntityData->botDebugData.debugScoresCount;
              v121 = 0;
              v125 = v49;
              if ( v49 > 0 )
              {
                v50 = EntityData->botDebugData.debugScores;
                do
                {
                  v51 = Path_ConvertIndexToNode(v50->object);
                  if ( !v51 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1319, ASSERT_TYPE_ASSERT, "( node )", (const char *)&queryFormat, "node") )
                    __debugbreak();
                  v52 = DVARINT_bot_ScoreShowAll;
                  if ( !DVARINT_bot_ScoreShowAll && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_ScoreShowAll") )
                    __debugbreak();
                  Dvar_CheckFrontendServerThread(v52);
                  if ( v52->current.integer != 2 || !Path_IsNodeTraversalOrOverlapsTraversal(v51) )
                  {
                    v53 = v50->object;
                    v54 = v50->object & 7;
                    if ( v50->object < 0 )
                    {
                      v53 += 7;
                      LOBYTE(v54) = v54 - 8;
                    }
                    v55 = v53 >> 3;
                    v56 = (unsigned __int8)v131[v55];
                    if ( !_bittest(&v56, (unsigned __int8)v54) )
                    {
                      v131[v55] = v56 | (1 << v54);
                      pathnode_t::GetPos(v51, &pos);
                      __asm
                      {
                        vmovss  xmm0, dword ptr [rsp+4160h+pos]
                        vmovss  xmm1, dword ptr [rsp+4160h+pos+4]
                      }
                      v59 = DVARINT_bot_ScoreDist;
                      __asm
                      {
                        vsubss  xmm4, xmm0, xmm13
                        vsubss  xmm2, xmm1, xmm12
                        vmulss  xmm3, xmm2, xmm2
                        vmulss  xmm0, xmm4, xmm4
                        vaddss  xmm6, xmm3, xmm0
                      }
                      if ( !DVARINT_bot_ScoreDist && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_ScoreDist") )
                        __debugbreak();
                      Dvar_CheckFrontendServerThread(v59);
                      integer = v59->current.integer;
                      v66 = DVARINT_bot_ScoreDist;
                      if ( !DVARINT_bot_ScoreDist && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_ScoreDist") )
                        __debugbreak();
                      Dvar_CheckFrontendServerThread(v66);
                      __asm
                      {
                        vxorps  xmm0, xmm0, xmm0
                        vcvtsi2ss xmm0, xmm0, eax
                        vcomiss xmm6, xmm0
                      }
                      if ( ((unsigned __int64)(integer * (__int64)v66->current.integer) >> 32 != 0) | v67 )
                      {
                        v70 = DVARINT_bot_ScoreMinCutoff;
                        score = v50->score;
                        if ( !DVARINT_bot_ScoreMinCutoff && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_ScoreMinCutoff") )
                          __debugbreak();
                        Dvar_CheckFrontendServerThread(v70);
                        if ( score >= v70->current.integer )
                        {
                          v72 = DVARINT_bot_ScoreMaxCutoff;
                          if ( !DVARINT_bot_ScoreMaxCutoff && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_ScoreMaxCutoff") )
                            __debugbreak();
                          Dvar_CheckFrontendServerThread(v72);
                          if ( score <= v72->current.integer )
                          {
                            if ( v41 == v42 && v42 == v122 )
                            {
                              __asm { vmovaps xmm1, xmm11 }
                            }
                            else
                            {
                              __asm
                              {
                                vxorps  xmm1, xmm1, xmm1
                                vcvtsi2ss xmm1, xmm1, eax
                                vxorps  xmm0, xmm0, xmm0
                                vcvtsi2ss xmm0, xmm0, eax
                                vdivss  xmm1, xmm1, xmm0
                              }
                            }
                            __asm
                            {
                              vmovups xmm0, xmmword ptr cs:?colorGreen@@3Tvec4_t@@B; vec4_t const colorGreen
                              vsubps  xmm2, xmm0, xmmword ptr cs:?colorRed@@3Tvec4_t@@B; vec4_t const colorRed
                              vshufps xmm1, xmm1, xmm1, 0
                              vmulps  xmm0, xmm2, xmm1
                              vaddps  xmm1, xmm0, xmmword ptr cs:?colorRed@@3Tvec4_t@@B; vec4_t const colorRed
                              vmovups xmmword ptr [rbp+4060h+color], xmm1
                            }
                            if ( v121 < EntityData->botDebugData.debugScoresSelectCount )
                            {
                              *(double *)&_XMM0 = pathnode_t::GetAngle(v51);
                              __asm { vmovaps xmm2, xmm0; yaw }
                              G_DebugBox(&pos, &nodeBox, *(float *)&_XMM2, &color, 1, 1);
                            }
                            v84 = "[%i]";
                            __asm
                            {
                              vmovss  xmm0, dword ptr [rsp+4160h+pos]
                              vmovss  xmm1, dword ptr [rsp+4160h+pos+4]
                              vaddss  xmm2, xmm14, dword ptr [rsp+4160h+pos+8]
                            }
                            if ( v50->object != EntityData->botDebugData.debugScoresPicked )
                              v84 = "%i";
                            __asm
                            {
                              vmovss  dword ptr [rsp+4160h+outPos], xmm0
                              vmovss  dword ptr [rsp+4160h+outPos+4], xmm1
                              vmovss  dword ptr [rsp+4160h+outPos+8], xmm2
                            }
                            v88 = j_va(v84, (unsigned int)score);
                            __asm { vmovaps xmm2, xmm15; scale }
                            G_Main_AddDebugStringWithDuration(&outPos, &color, *(float *)&_XMM2, v88, 0);
                            v90 = DVARBOOL_bot_ScoreShowFactors;
                            if ( !DVARBOOL_bot_ScoreShowFactors && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 692, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_ScoreShowFactors") )
                              __debugbreak();
                            Dvar_CheckFrontendServerThread(v90);
                            if ( v90->current.enabled )
                            {
                              v92 = 0;
                              if ( (int)(*((_DWORD *)v50 + 2) << 27) > 0 )
                              {
                                __asm { vxorps  xmm6, xmm6, xmm6 }
                                factors = (int *)v50->factors;
                                do
                                {
                                  __asm
                                  {
                                    vxorps  xmm0, xmm0, xmm0
                                    vcvtsi2ss xmm0, xmm0, eax
                                  }
                                  v97 = *factors;
                                  __asm
                                  {
                                    vmulss  xmm1, xmm0, xmm8
                                    vaddss  xmm0, xmm10, dword ptr [rsp+4160h+outPos+8]
                                    vaddss  xmm4, xmm1, xmm9
                                    vmovss  dword ptr [rsp+4160h+outPos+8], xmm0
                                    vxorps  xmm0, xmm0, xmm0
                                    vcvtsi2ss xmm0, xmm0, rax
                                    vmulss  xmm1, xmm0, xmm4
                                    vaddss  xmm3, xmm1, xmm7
                                    vroundss xmm1, xmm6, xmm3, 1
                                    vcvtss2sd xmm2, xmm4, xmm4
                                    vcvttss2si r9d, xmm1
                                    vmovq   r8, xmm2
                                  }
                                  v107 = j_va("%u * %.2f = %i", (unsigned __int16)v97, _R8, _R9);
                                  __asm { vmovaps xmm2, xmm7; scale }
                                  G_Main_AddDebugStringWithDuration(&outPos, &color, *(float *)&_XMM2, v107, 0);
                                  ++factors;
                                  ++v92;
                                }
                                while ( v92 < (int)(*((_DWORD *)v50 + 2) << 27) >> 27 );
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  ++v121;
                  ++v50;
                  --v125;
                }
                while ( v125 );
                i = v126;
              }
            }
          }
        }
        goto LABEL_119;
      }
      IsClientConnected = v22->s.eType == ET_AGENT;
    }
    if ( !IsClientConnected )
      goto LABEL_119;
    goto LABEL_24;
  }
}

/*
==============
SV_BotDropped
==============
*/
void SV_BotDropped(const int clientIndex)
{
  SvClientMP *CommonClient; 
  bot_data_t *ClientData; 
  gentity_s *ent; 
  int state; 

  if ( SvClient::GetCommonClient(clientIndex)->state <= CS_ZOMBIE )
  {
    state = (unsigned __int8)SvClient::GetCommonClient(clientIndex)->state;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5962, ASSERT_TYPE_ASSERT, "( SvClient::GetConnectionState( clientIndex ) ) > ( SvClientConnectionState::CS_ZOMBIE )", "SvClient::GetConnectionState( clientIndex ) > SvClientConnectionState::CS_ZOMBIE\n\t%i, %i", state, 1) )
      __debugbreak();
  }
  if ( SvClient::GetCommonClient(clientIndex)->state >= CS_CLIENTLOADING )
  {
    if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
      __debugbreak();
    CommonClient = (SvClientMP *)SvClient::GetCommonClient(clientIndex);
    ClientData = Bot_GetClientData(CommonClient);
    if ( !ClientData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5968, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
      __debugbreak();
    if ( Bot_HasNavigator(&ClientData->botInfo) )
    {
      Bot_PathClear(&ClientData->botInfo);
      Bot_FreeNavigator(&ClientData->botInfo);
    }
    if ( !ClientData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5121, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
      __debugbreak();
    ent = ClientData->botInfo.ent;
    if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5124, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
      __debugbreak();
    Actor_EventListener_Remove(ent->s.number, scr_const.bulletwhizby);
    Actor_EventListener_Remove(ent->s.number, scr_const.projectile_impact);
    Actor_EventListener_Remove(ent->s.number, scr_const.gunshot);
    Actor_EventListener_Remove(ent->s.number, scr_const.gunshot_teammate);
    Actor_EventListener_Remove(ent->s.number, scr_const.silenced_shot);
    Actor_EventListener_Remove(ent->s.number, scr_const.explode);
    Actor_EventListener_Remove(ent->s.number, scr_const.enemy);
    Actor_EventListener_Remove(ent->s.number, scr_const.death);
    Actor_EventListener_Remove(ent->s.number, scr_const.grenadedanger);
    Actor_EventListener_Remove_ByEnum(ent->s.number, 2);
    Actor_EventListener_Remove_ByEnum(ent->s.number, 3);
    Actor_EventListener_Remove_ByEnum(ent->s.number, 4);
    Actor_EventListener_Remove_ByEnum(ent->s.number, 22);
    Actor_EventListener_Remove_ByEnum(ent->s.number, 25);
    Actor_EventListener_Remove_ByEnum(ent->s.number, 28);
  }
}

/*
==============
SV_BotEntInCurrentFOV
==============
*/
int SV_BotEntInCurrentFOV(ai_common_t *self, const gentity_s *ent)
{
  bot_data_t *EntityData; 
  AIBotInterface *m_pAI; 
  sentient_s *sentient; 
  AIBotWrapper v8; 
  vec3_t vEyePosOut; 

  if ( !self && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8993, ASSERT_TYPE_ASSERT, "( self )", (const char *)&queryFormat, "self") )
    __debugbreak();
  if ( !self->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8994, ASSERT_TYPE_ASSERT, "( self->ent )", (const char *)&queryFormat, "self->ent") )
    __debugbreak();
  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 8995, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  EntityData = Bot_GetEntityData(self->ent);
  if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9001, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  AICommonInterface::AICommonInterface(&v8.m_botInterface);
  v8.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v8.m_botAgentInterface);
  v8.m_pAI = NULL;
  v8.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  AIBotWrapper::Setup(&v8, EntityData->botInfo.ent);
  m_pAI = v8.m_pAI;
  if ( !v8.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 9002, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  sentient = ent->sentient;
  if ( sentient )
    Sentient_GetHeadPosition(sentient, &vEyePosOut);
  else
    G_Utils_EntityCentroid(ent, &vEyePosOut);
  return AICommonInterface::PointInFov(m_pAI, &vEyePosOut);
}

/*
==============
SV_BotEntityDied
==============
*/
void SV_BotEntityDied(const gentity_s *victimEnt)
{
  const playerState_s *EntityPlayerStateConst; 
  gclient_s *client; 
  int v4; 
  __int64 i; 
  gentity_s *v6; 
  __int16 EntityIndex; 
  const SvClientMP *MpClient; 
  BOOL IsClientConnected; 
  bitarray_base<bitarray<224> > *AllTeamFlags; 
  const SvClientMP *v11; 
  bot_data_t *EntityData; 
  __int64 v13; 

  if ( !victimEnt && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7269, ASSERT_TYPE_ASSERT, "( victimEnt )", (const char *)&queryFormat, "victimEnt") )
    __debugbreak();
  if ( !Bot_EntityIsConsideredDead(victimEnt) )
  {
    if ( !victimEnt && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.h", 1164, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
      __debugbreak();
    EntityPlayerStateConst = G_GetEntityPlayerStateConst(victimEnt);
    client = victimEnt->client;
    if ( (!client || !client->lastStand) && (!EntityPlayerStateConst || !GameModeFlagContainer<enum POtherFlagsCommon,enum POtherFlagsSP,enum POtherFlagsMP,64>::TestFlagInternal(&EntityPlayerStateConst->otherFlags, ACTIVE, 0xBu)) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7270, ASSERT_TYPE_ASSERT, "( Bot_EntityIsConsideredDead( victimEnt ) || Bot_EntIsInLastStand( victimEnt ) )", (const char *)&queryFormat, "Bot_EntityIsConsideredDead( victimEnt ) || Bot_EntIsInLastStand( victimEnt )") )
      __debugbreak();
  }
  if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
    __debugbreak();
  if ( (int)ComCharacterLimits::ms_gameData.m_characterCount > 2048 )
  {
    if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
      __debugbreak();
    LODWORD(v13) = ComCharacterLimits::ms_gameData.m_characterCount;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7272, ASSERT_TYPE_ASSERT, "( ComCharacterLimits::GetCharacterMaxCount() ) <= ( ( 2048 ) )", "ComCharacterLimits::GetCharacterMaxCount() <= MAX_GENTITIES\n\t%i, %i", v13, 2048) )
      __debugbreak();
  }
  v4 = 0;
  for ( i = 0i64; ; ++i )
  {
    if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
      __debugbreak();
    if ( v4 >= (int)ComCharacterLimits::ms_gameData.m_characterCount )
      break;
    v6 = &level.gentities[i];
    if ( !&level.gentities[i] )
      goto LABEL_47;
    EntityIndex = G_GetEntityIndex(&level.gentities[i]);
    if ( !G_IsEntityInUse(EntityIndex) || !v6->sentient )
      goto LABEL_47;
    if ( v6->client )
    {
      MpClient = SV_Client_GetMpClient(v6->s.number);
      IsClientConnected = Bot_IsClientConnected(MpClient);
      goto LABEL_35;
    }
    if ( v6->agent )
    {
      IsClientConnected = v6->s.eType == ET_AGENT;
LABEL_35:
      if ( !IsClientConnected )
        goto LABEL_47;
    }
    if ( v6->s.eType != ET_INVISIBLE )
    {
      AllTeamFlags = (bitarray_base<bitarray<224> > *)Com_TeamsMP_GetAllTeamFlags();
      if ( bitarray_base<bitarray<224>>::testBit(AllTeamFlags, v6->sentient->eTeam) )
      {
        if ( !v6->client || (v11 = SV_Client_GetMpClient(v6->s.number), Bot_IsClientActive(v11)) )
        {
          if ( SV_BotIsBotEnt(v6) && v6->s.number != victimEnt->s.number && v6->health > 0 )
          {
            EntityData = Bot_GetEntityData(v6);
            if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7287, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
              __debugbreak();
            Bot_EntityDiedInternal(EntityData, victimEnt);
          }
        }
      }
    }
LABEL_47:
    ++v4;
  }
}

/*
==============
SV_BotEntityStartedLastStand
==============
*/
void SV_BotEntityStartedLastStand(const gentity_s *victimEnt)
{
  const playerState_s *EntityPlayerStateConst; 
  gclient_s *client; 
  int v4; 
  __int64 i; 
  gentity_s *v6; 
  __int16 EntityIndex; 
  const SvClientMP *MpClient; 
  BOOL IsClientConnected; 
  bitarray_base<bitarray<224> > *AllTeamFlags; 
  const SvClientMP *v11; 
  bot_data_t *EntityData; 
  __int64 v13; 

  if ( !victimEnt )
  {
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7303, ASSERT_TYPE_ASSERT, "( victimEnt )", (const char *)&queryFormat, "victimEnt") )
      __debugbreak();
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.h", 1164, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
      __debugbreak();
  }
  EntityPlayerStateConst = G_GetEntityPlayerStateConst(victimEnt);
  client = victimEnt->client;
  if ( (!client || !client->lastStand) && (!EntityPlayerStateConst || !GameModeFlagContainer<enum POtherFlagsCommon,enum POtherFlagsSP,enum POtherFlagsMP,64>::TestFlagInternal(&EntityPlayerStateConst->otherFlags, ACTIVE, 0xBu)) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7304, ASSERT_TYPE_ASSERT, "( Bot_EntIsInLastStand( victimEnt ) )", (const char *)&queryFormat, "Bot_EntIsInLastStand( victimEnt )") )
    __debugbreak();
  if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
    __debugbreak();
  if ( (int)ComCharacterLimits::ms_gameData.m_characterCount > 2048 )
  {
    if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
      __debugbreak();
    LODWORD(v13) = ComCharacterLimits::ms_gameData.m_characterCount;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7306, ASSERT_TYPE_ASSERT, "( ComCharacterLimits::GetCharacterMaxCount() ) <= ( ( 2048 ) )", "ComCharacterLimits::GetCharacterMaxCount() <= MAX_GENTITIES\n\t%i, %i", v13, 2048) )
      __debugbreak();
  }
  v4 = 0;
  for ( i = 0i64; ; ++i )
  {
    if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
      __debugbreak();
    if ( v4 >= (int)ComCharacterLimits::ms_gameData.m_characterCount )
      break;
    v6 = &level.gentities[i];
    if ( !&level.gentities[i] )
      goto LABEL_49;
    EntityIndex = G_GetEntityIndex(&level.gentities[i]);
    if ( !G_IsEntityInUse(EntityIndex) || !v6->sentient )
      goto LABEL_49;
    if ( v6->client )
    {
      MpClient = SV_Client_GetMpClient(v6->s.number);
      IsClientConnected = Bot_IsClientConnected(MpClient);
      goto LABEL_33;
    }
    if ( v6->agent )
    {
      IsClientConnected = v6->s.eType == ET_AGENT;
LABEL_33:
      if ( !IsClientConnected )
        goto LABEL_49;
    }
    if ( v6->s.eType != ET_INVISIBLE )
    {
      AllTeamFlags = (bitarray_base<bitarray<224> > *)Com_TeamsMP_GetAllTeamFlags();
      if ( bitarray_base<bitarray<224>>::testBit(AllTeamFlags, v6->sentient->eTeam) )
      {
        if ( !v6->client || (v11 = SV_Client_GetMpClient(v6->s.number), Bot_IsClientActive(v11)) )
        {
          if ( SV_BotIsBotEnt(v6) && v6->s.number != victimEnt->s.number && v6->health > 0 )
          {
            EntityData = Bot_GetEntityData(v6);
            if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7321, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
              __debugbreak();
            if ( !victimEnt->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 7324, ASSERT_TYPE_ASSERT, "( victimEnt->sentient )", (const char *)&queryFormat, "victimEnt->sentient") )
              __debugbreak();
            if ( Bot_RecentSeeSentient(EntityData, victimEnt->sentient, 1000) )
              Bot_EntityDiedInternal(EntityData, victimEnt);
          }
        }
      }
    }
LABEL_49:
    ++v4;
  }
}

/*
==============
SV_BotFindRandomGoal
==============
*/
char SV_BotFindRandomGoal(const bot_data_t *botData, const vec3_t *nonBotOverrideOrigin, const vec3_t *nonBotOverrideAngles, vec3_t *goalOut)
{
  unsigned __int16 NodeRandom; 
  pathnode_t *v9; 
  const tacpoint_t *ClosestPoint; 
  const tacpoint_t *RandomPointReachableFromPoint; 

  if ( !botData && (!nonBotOverrideOrigin || !nonBotOverrideAngles) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21270, ASSERT_TYPE_ASSERT, "( botData || (nonBotOverrideOrigin && nonBotOverrideAngles) )", (const char *)&queryFormat, "botData || (nonBotOverrideOrigin && nonBotOverrideAngles)") )
    __debugbreak();
  if ( SV_BotRequirePathnodes(botData) )
  {
    NodeRandom = Bot_FindNodeRandom(botData, nonBotOverrideOrigin, nonBotOverrideAngles);
    if ( NodeRandom != 0xFFFF )
    {
      v9 = Path_ConvertIndexToNode(NodeRandom);
      pathnode_t::GetPos(v9, goalOut);
      return 1;
    }
  }
  else
  {
    if ( botData )
    {
      if ( !botData->botInfo.sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 21247, ASSERT_TYPE_ASSERT, "( botData->botInfo.sentient )", (const char *)&queryFormat, "botData->botInfo.sentient") )
        __debugbreak();
      ClosestPoint = Sentient_NearestTacPoint(botData->botInfo.sentient);
    }
    else
    {
      ClosestPoint = TacGraph_FindClosestPoint(nonBotOverrideOrigin);
    }
    if ( ClosestPoint )
    {
      RandomPointReachableFromPoint = TacGraph_FindRandomPointReachableFromPoint(ClosestPoint, 10);
      if ( RandomPointReachableFromPoint )
      {
        TacGraph_GetApproxGroundPosForPoint(RandomPointReachableFromPoint, goalOut);
        return 1;
      }
    }
  }
  return 0;
}

/*
==============
SV_BotFovDot
==============
*/
float SV_BotFovDot(const ai_common_t *self, const gentity_s *otherEnt)
{
  char v7; 

  _RBX = self;
  if ( !self && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17957, ASSERT_TYPE_ASSERT, "( self )", (const char *)&queryFormat, "self") )
    __debugbreak();
  *(float *)&_XMM0 = Bot_CheckCloseFOV(_RBX->ent, otherEnt);
  __asm
  {
    vxorps  xmm1, xmm1, xmm1
    vcomiss xmm0, xmm1
  }
  if ( v7 )
    __asm { vmovss  xmm0, dword ptr [rbx+98h] }
  return *(float *)&_XMM0;
}

/*
==============
SV_BotFovDotZ
==============
*/
float SV_BotFovDotZ(const ai_common_t *self, const gentity_s *otherEnt)
{
  char v7; 

  _RBX = self;
  if ( !self && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17974, ASSERT_TYPE_ASSERT, "( self )", (const char *)&queryFormat, "self") )
    __debugbreak();
  *(float *)&_XMM0 = Bot_CheckCloseFOV(_RBX->ent, otherEnt);
  __asm
  {
    vxorps  xmm1, xmm1, xmm1
    vcomiss xmm0, xmm1
  }
  if ( v7 )
    __asm { vmovss  xmm0, dword ptr [rbx+0A0h] }
  return *(float *)&_XMM0;
}

/*
==============
SV_BotFreeSystemMemory
==============
*/
void SV_BotFreeSystemMemory(void)
{
  __int16 *v0; 
  __int64 i; 

  if ( s_botZoneData )
  {
    if ( !s_botZoneDataCount && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 857, ASSERT_TYPE_ASSERT, "(s_botZoneDataCount > 0)", (const char *)&queryFormat, "s_botZoneDataCount > 0") )
      __debugbreak();
    memset_0(s_botZoneData, 0, 52i64 * s_botZoneDataCount);
    s_botZoneData = NULL;
    s_botZoneDataCount = 0;
  }
  if ( s_botTraversalTypes )
  {
    if ( !(_DWORD)s_botTraversalTypesCount && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 865, ASSERT_TYPE_ASSERT, "(s_botTraversalTypesCount > 0)", (const char *)&queryFormat, "s_botTraversalTypesCount > 0") )
      __debugbreak();
    memset_0(s_botTraversalTypes, 0, (unsigned int)s_botTraversalTypesCount);
    s_botTraversalTypes = NULL;
    LODWORD(s_botTraversalTypesCount) = 0;
  }
  if ( s_botSentientHistory )
  {
    memset_0(s_botSentientHistory, 0, 0x1100ui64);
    s_botSentientHistory = NULL;
  }
  v0 = s_botEntAffecters;
  for ( i = 64i64; i; --i )
    *v0++ = 2047;
}

/*
==============
SV_BotGetAdjustedEnemyDistForThreat
==============
*/

float __fastcall SV_BotGetAdjustedEnemyDistForThreat(const sentient_s *botSentient, sentient_s *enemy, double enemyDist)
{
  pathnode_t *v7; 
  const bot_data_t *EntityData; 
  vec3_t pos; 

  __asm
  {
    vmovaps [rsp+68h+var_18], xmm6
    vmovaps xmm6, xmm2
  }
  if ( !botSentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17460, ASSERT_TYPE_ASSERT, "( botSentient )", (const char *)&queryFormat, "botSentient") )
    __debugbreak();
  if ( !botSentient->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17461, ASSERT_TYPE_ASSERT, "( botSentient->ent )", (const char *)&queryFormat, "botSentient->ent") )
    __debugbreak();
  if ( !enemy && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17462, ASSERT_TYPE_ASSERT, "( enemy )", (const char *)&queryFormat, "enemy") )
    __debugbreak();
  if ( !enemy->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17463, ASSERT_TYPE_ASSERT, "( enemy->ent )", (const char *)&queryFormat, "enemy->ent") )
    __debugbreak();
  if ( !Bot_IsHighAerialSentient(enemy) )
  {
    EntityData = Bot_GetEntityData(botSentient->ent);
    if ( Bot_FinishedSearchingForEnemy(EntityData, enemy->ent) )
    {
      __asm { vmovss  xmm0, cs:__real@461c3c00 }
      goto LABEL_19;
    }
LABEL_18:
    __asm { vmovaps xmm0, xmm6 }
    goto LABEL_19;
  }
  v7 = Sentient_NearestNode(enemy);
  if ( !v7 )
    goto LABEL_18;
  pathnode_t::GetPos(v7, &pos);
  _RCX = botSentient->ent;
  _RAX = enemy->ent;
  __asm
  {
    vmovss  xmm0, dword ptr [rcx+130h]
    vsubss  xmm3, xmm0, dword ptr [rsp+68h+pos]
    vmovss  xmm1, dword ptr [rcx+134h]
    vsubss  xmm2, xmm1, dword ptr [rsp+68h+pos+4]
    vmovss  xmm0, dword ptr [rcx+138h]
    vsubss  xmm4, xmm0, dword ptr [rsp+68h+pos+8]
    vmulss  xmm2, xmm2, xmm2
    vmulss  xmm1, xmm3, xmm3
    vaddss  xmm3, xmm2, xmm1
    vmulss  xmm0, xmm4, xmm4
    vaddss  xmm2, xmm3, xmm0
    vmovss  xmm0, dword ptr [rax+138h]
    vsubss  xmm1, xmm0, dword ptr [rcx+138h]
    vandps  xmm1, xmm1, cs:__xmm@7fffffff7fffffff7fffffff7fffffff
    vmulss  xmm1, xmm1, cs:__real@3dcccccd
    vsqrtss xmm5, xmm2, xmm2
    vaddss  xmm0, xmm5, xmm1
  }
LABEL_19:
  __asm { vmovaps xmm6, [rsp+68h+var_18] }
  return *(float *)&_XMM0;
}

/*
==============
SV_BotGetAllocationSize
==============
*/
int SV_BotGetAllocationSize()
{
  int result; 
  __int64 v1; 
  __int64 v2; 
  unsigned __int64 v3; 

  result = BG_BotOrAgentSystemEnabled();
  if ( result )
  {
    v1 = 52i64 * (unsigned int)pathData.zoneCount;
    v2 = ((pathData.nodeCount - pathData.zoneCount) >> 1) + 1;
    v3 = v1 + ((v2 + 3) & 0xFFFFFFFFFFFFFFFCui64) + 4352;
    if ( v3 > 0xFFFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_assert.h", 385, ASSERT_TYPE_ASSERT, (const char *)&queryFormat.fmt + 3, "%s (SmallType) %s 0x%jx == (BigType) %s 0x%jx", "unsigned int __cdecl truncate_cast_impl<unsigned int,unsigned __int64>(unsigned __int64)", "unsigned", (unsigned int)v3, "unsigned", v1 + ((v2 + 3) & 0xFFFFFFFFFFFFFFFCui64) + 4352) )
      __debugbreak();
    return (v3 + 127) & 0xFFFFFF80;
  }
  return result;
}

/*
==============
SV_BotGetPerfectInfo
==============
*/
__int64 SV_BotGetPerfectInfo(const gentity_s *self, sentient_s *other, unsigned __int8 reason)
{
  double v4; 
  unsigned int v7; 
  sentient_info_t *SentientInfo; 
  bot_data_t *EntityData; 
  signed __int64 v12; 
  __int64 v13; 
  int v14; 
  BOOL v15; 
  const pathnode_t *v16; 
  const tacpoint_t *v18; 
  __int16 v40; 
  int time; 
  vec3_t vDirOut; 
  vec3_t vOriginOut; 

  v7 = reason;
  _RBP = self;
  if ( !self && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24642, ASSERT_TYPE_ASSERT, "( self )", (const char *)&queryFormat, "self") )
    __debugbreak();
  if ( !_RBP->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24643, ASSERT_TYPE_ASSERT, "( self->sentient )", (const char *)&queryFormat, "self->sentient") )
    __debugbreak();
  if ( !other && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24644, ASSERT_TYPE_ASSERT, "( other )", (const char *)&queryFormat, "other") )
    __debugbreak();
  if ( !other->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24645, ASSERT_TYPE_ASSERT, "( other->ent )", (const char *)&queryFormat, "other->ent") )
    __debugbreak();
  SentientInfo = Sentient_GetSentientInfo(_RBP->sentient, other);
  EntityData = Bot_GetEntityData(_RBP);
  if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24657, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( !EntityData->botInfo.playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24658, ASSERT_TYPE_ASSERT, "( botData->botInfo.playerState )", (const char *)&queryFormat, "botData->botInfo.playerState") )
    __debugbreak();
  if ( other->ent->health <= 0 )
    return 0i64;
  v12 = 60 * (other - level.sentients);
  v13 = (__int64)&EntityData->scriptedAgentInfo + v12 + 11644;
  if ( (bot_data_t *)((char *)EntityData + v12) == (bot_data_t *)-11652i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24668, ASSERT_TYPE_ASSERT, "( botSentientInfo )", (const char *)&queryFormat, "botSentientInfo") )
    __debugbreak();
  if ( (unsigned __int8)v7 <= 0x1Au )
  {
    v14 = 67111424;
    if ( _bittest(&v14, v7) )
    {
      if ( (unsigned __int8)(v7 - 11) > 2u )
      {
        v15 = (_BYTE)v7 == 6 || (unsigned __int8)(v7 - 9) <= 1u;
        if ( !v15 && (BG_IsEMPJammed(EntityData->botInfo.playerState) || Bot_GetRadarIsJammed(&EntityData->botInfo, v4)) )
          return 0i64;
      }
    }
  }
  Sentient_GetOrigin(other, &vOriginOut);
  if ( !SV_BotRequirePathnodes(EntityData) )
  {
    v18 = Sentient_NearestTacPoint(other);
    if ( v18 && (unsigned int)Bot_ShouldIgnoreSentientEvent(EntityData, other, &vOriginOut, NULL, v18, v7) )
      return 0i64;
LABEL_40:
    if ( level.time - SentientInfo->lastKnownPosTime >= 4000 )
      *(_DWORD *)(v13 + 32) = level.time;
    if ( (Bot_RecentSeeSentient(EntityData, other, 1000) || (_BYTE)v7 == 25) && !Bot_IsVehicleEnt(other->ent) )
    {
      Sentient_GetForwardDir(other, &vDirOut);
    }
    else
    {
      if ( (_BYTE)v7 != 12 )
        return 1i64;
      __asm
      {
        vmovss  xmm0, dword ptr [rbp+130h]
        vmovss  xmm1, dword ptr [rbp+134h]
        vmovaps [rsp+0A8h+var_38], xmm6
        vsubss  xmm6, xmm1, dword ptr [rax+134h]
        vmovaps [rsp+0A8h+var_48], xmm7
        vsubss  xmm7, xmm0, dword ptr [rax+130h]
        vmovss  xmm0, dword ptr [rbp+138h]
        vsubss  xmm5, xmm0, dword ptr [rax+138h]
        vmulss  xmm2, xmm6, xmm6
        vmulss  xmm1, xmm7, xmm7
        vaddss  xmm3, xmm2, xmm1
        vmovss  xmm1, cs:__real@3f800000
        vmulss  xmm0, xmm5, xmm5
        vaddss  xmm2, xmm3, xmm0
        vsqrtss xmm4, xmm2, xmm2
        vcmpless xmm0, xmm4, cs:__real@80000000
        vblendvps xmm0, xmm4, xmm1, xmm0
        vdivss  xmm2, xmm1, xmm0
        vmulss  xmm0, xmm7, xmm2
        vmovaps xmm7, [rsp+0A8h+var_48]
        vmulss  xmm1, xmm6, xmm2
        vmovaps xmm6, [rsp+0A8h+var_38]
        vmovss  dword ptr [rsp+0A8h+vDirOut], xmm0
        vmulss  xmm0, xmm5, xmm2
        vmovss  dword ptr [rsp+0A8h+vDirOut+8], xmm0
        vmovss  dword ptr [rsp+0A8h+vDirOut+4], xmm1
      }
    }
    *(double *)&_XMM0 = vectoyaw((const vec2_t *)&vDirOut);
    __asm { vcvttss2si ecx, xmm0; val }
    v40 = truncate_cast<short,int>(_ECX);
    *(_WORD *)(v13 + 4) = v40;
    time = level.time;
    if ( level.time - *(_DWORD *)v13 > 10000 )
    {
      *(_WORD *)(v13 + 6) = v40 + 180;
      time = level.time;
    }
    *(_DWORD *)v13 = time;
    return 1i64;
  }
  v16 = Sentient_NearestNode(other);
  if ( !v16 || !(unsigned int)Bot_ShouldIgnoreSentientEvent(EntityData, other, &vOriginOut, v16, NULL, v7) )
    goto LABEL_40;
  return 0i64;
}

/*
==============
SV_BotGetRandomName
==============
*/
const char *SV_BotGetRandomName()
{
  int v0; 
  int v1; 
  int v2; 
  int v3; 
  const char *ColumnValueForRow; 
  const char *v5; 
  unsigned int v6; 
  const SvClientMP *CommonClient; 
  const char *name; 
  __int64 v9; 
  __int64 v10; 
  const char *v11; 
  int v12; 
  __int64 v13; 
  int v14; 
  int v15; 
  int v16; 
  __int64 v18; 
  __int64 v19; 
  StringTable *tablePtr; 
  char dest[40]; 

  if ( !s_svBotNameData.nameListInitialized && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4135, ASSERT_TYPE_ASSERT, "( s_svBotNameData.nameListInitialized )", (const char *)&queryFormat, "s_svBotNameData.nameListInitialized") )
    __debugbreak();
  if ( s_svBotNameData.buildIndexStart < 0 )
    return "BotPlayer";
  StringTable_GetAsset(SV_BOT_NAMES_TABLE, (const StringTable **)&tablePtr);
  if ( !tablePtr && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4147, ASSERT_TYPE_ASSERT, "( table )", (const char *)&queryFormat, "table") )
    __debugbreak();
  v0 = s_svBotNameData.buildIndexEnd - s_svBotNameData.buildIndexStart;
  if ( s_svBotNameData.buildIndexEnd - s_svBotNameData.buildIndexStart < 0 )
  {
    LODWORD(v18) = s_svBotNameData.buildIndexEnd - s_svBotNameData.buildIndexStart;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4150, ASSERT_TYPE_ASSERT, "( numPossibleNames ) >= ( 0 )", "numPossibleNames >= 0\n\t%i, %i", v18, 0i64) )
      __debugbreak();
  }
  v1 = 0;
LABEL_12:
  while ( 1 )
  {
    v2 = v1;
    v3 = G_irand(s_svBotNameData.buildIndexStart, s_svBotNameData.buildIndexEnd + 1);
    ColumnValueForRow = StringTable_GetColumnValueForRow(tablePtr, v3, 1);
    ++v1;
    v5 = ColumnValueForRow;
    if ( v2 >= v0 )
      return v5;
    if ( !ColumnValueForRow && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4098, ASSERT_TYPE_ASSERT, "( checkName )", (const char *)&queryFormat, "checkName") )
      __debugbreak();
    v6 = 0;
    if ( (int)SvClient::ms_clientCount <= 0 )
      return v5;
    while ( 1 )
    {
      if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
        __debugbreak();
      CommonClient = (const SvClientMP *)SvClient::GetCommonClient(v6);
      if ( Bot_IsClientActive(CommonClient) )
        break;
LABEL_52:
      if ( (int)++v6 >= (int)SvClient::ms_clientCount )
        return v5;
    }
    if ( !CommonClient->gentity && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4107, ASSERT_TYPE_ASSERT, "( cl->gentity )", (const char *)&queryFormat, "cl->gentity") )
      __debugbreak();
    if ( !CommonClient->gentity->client && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4108, ASSERT_TYPE_ASSERT, "( cl->gentity->client )", (const char *)&queryFormat, "cl->gentity->client") )
      __debugbreak();
    name = CommonClient->gentity->client->sess.cs.name;
    if ( CommonClient->gentity->client == (gclient_s *)-22188i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3452, ASSERT_TYPE_ASSERT, "( originalName )", (const char *)&queryFormat, "originalName") )
      __debugbreak();
    v9 = -1i64;
    do
      ++v9;
    while ( name[v9] );
    if ( !name && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3441, ASSERT_TYPE_ASSERT, "( name )", (const char *)&queryFormat, &stru_143C9A1A4) )
      __debugbreak();
    if ( I_strstr(name, " [") )
      LODWORD(v9) = v9 - 7;
    if ( (int)v9 + 1 > 36 )
    {
      LODWORD(v19) = 36;
      LODWORD(v18) = v9 + 1;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3462, ASSERT_TYPE_ASSERT, "( nameSize + 1 ) <= ( 36 )", "nameSize + 1 <= MAX_PLAYERNAME_LENGTH\n\t%i, %i", v18, v19) )
        __debugbreak();
    }
    Core_strncpy(dest, 0x24ui64, name, (int)v9);
    v10 = 0x7FFFFFFFi64;
    v11 = v5;
    if ( !v5 && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 213, ASSERT_TYPE_SANITY, "( s1 )", (const char *)&queryFormat, "s1") )
      __debugbreak();
    while ( 1 )
    {
      v12 = (unsigned __int8)v11[dest - v5];
      v13 = v10;
      v14 = *(unsigned __int8 *)v11++;
      --v10;
      if ( !v13 )
        break;
      if ( v12 != v14 )
      {
        v15 = v12 + 32;
        if ( (unsigned int)(v12 - 65) > 0x19 )
          v15 = v12;
        v12 = v15;
        v16 = v14 + 32;
        if ( (unsigned int)(v14 - 65) > 0x19 )
          v16 = v14;
        if ( v12 != v16 )
          goto LABEL_52;
      }
      if ( !v12 )
        goto LABEL_12;
    }
  }
}

/*
==============
SV_BotGrenadePing
==============
*/
void SV_BotGrenadePing(const gentity_s *self, gentity_s *originator, const vec3_t *vOrigin)
{
  if ( !self && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24444, ASSERT_TYPE_ASSERT, "( self )", (const char *)&queryFormat, "self") )
    __debugbreak();
  if ( !originator && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24445, ASSERT_TYPE_ASSERT, "( originator )", (const char *)&queryFormat, "originator") )
    __debugbreak();
  __asm { vmovss  xmm3, cs:__real@43960000; safeDist }
  Bot_AvoidGrenade(self, originator, vOrigin, *(double *)&_XMM3, 500);
}

/*
==============
SV_BotHandleGunshotTeammate
==============
*/
void SV_BotHandleGunshotTeammate(const gentity_s *self, gentity_s *originator, const vec3_t *vBulletEndOrigin)
{
  bool v21; 
  bool v22; 
  int time; 
  int traversal; 
  vec3_t vEyePosOut; 

  _RBP = vBulletEndOrigin;
  if ( !self && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24456, ASSERT_TYPE_ASSERT, "( self )", (const char *)&queryFormat, "self") )
    __debugbreak();
  if ( self->health <= 0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24457, ASSERT_TYPE_ASSERT, "( !Bot_EntityIsDead( self ) )", (const char *)&queryFormat, "!Bot_EntityIsDead( self )") )
    __debugbreak();
  if ( !originator && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24458, ASSERT_TYPE_ASSERT, "( originator )", (const char *)&queryFormat, "originator") )
    __debugbreak();
  if ( !originator->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24459, ASSERT_TYPE_ASSERT, "( originator->sentient )", (const char *)&queryFormat, "originator->sentient") )
    __debugbreak();
  _RBX = Bot_GetEntityData(self);
  if ( !_RBX && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24466, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( Bot_CanSeeSentientQuick(_RBX, originator->sentient) )
  {
    Sentient_GetEyePosition(originator->sentient, &vEyePosOut);
    if ( SV_BotEntInCurrentFOV(&_RBX->botInfo, originator) )
    {
      __asm
      {
        vmovss  xmm0, dword ptr [rbp+0]
        vsubss  xmm3, xmm0, dword ptr [rsp+78h+vEyePosOut]
        vmovss  xmm1, dword ptr [rbp+4]
        vsubss  xmm2, xmm1, dword ptr [rsp+78h+vEyePosOut+4]
        vmovss  xmm0, dword ptr [rbp+8]
        vsubss  xmm4, xmm0, dword ptr [rsp+78h+vEyePosOut+8]
        vmulss  xmm1, xmm3, xmm3
        vmulss  xmm2, xmm2, xmm2
        vaddss  xmm3, xmm2, xmm1
        vmulss  xmm0, xmm4, xmm4
        vaddss  xmm4, xmm3, xmm0
        vxorps  xmm1, xmm1, xmm1
        vcomiss xmm4, xmm1
        vmovss  xmm3, cs:__real@42c80000; capsuleRadius
      }
      Bot_AIKnownEnemiesCapsule(&_RBX->botInfo, &vEyePosOut, _RBP, *(double *)&_XMM3, 0xAu);
    }
    else if ( Bot_IsIdleAtScriptGoal(_RBX) && !Bot_CanSeeAndCanFireOnEnemy(_RBX) )
    {
      v21 = _RBX == NULL;
      if ( !_RBX )
      {
        v22 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14625, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData");
        v21 = !v22;
        if ( v22 )
          __debugbreak();
      }
      __asm
      {
        vmovss  xmm0, dword ptr [rsp+78h+vEyePosOut]
        vxorps  xmm1, xmm1, xmm1
        vucomiss xmm0, xmm1
      }
      if ( v21 )
      {
        __asm
        {
          vmovss  xmm0, dword ptr [rsp+78h+vEyePosOut+4]
          vucomiss xmm0, xmm1
        }
        if ( v21 )
        {
          __asm
          {
            vmovss  xmm0, dword ptr [rsp+78h+vEyePosOut+8]
            vucomiss xmm0, xmm1
          }
          if ( v21 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 14633, ASSERT_TYPE_ASSERT, "( Vec3NotZero( *point ) )", (const char *)&queryFormat, "Vec3NotZero( *point )") )
            __debugbreak();
        }
      }
      time = level.time;
      if ( _RBX->botInfo.lookAtType <= BOT_LOOK_CODE_FORCED || level.time >= _RBX->botInfo.lookAtTime )
      {
        _RBX->botInfo.lookAtType = BOT_LOOK_CODE_FORCED;
        _RBX->botInfo.lookAtTime = time + 1000;
        __asm
        {
          vmovss  xmm0, dword ptr [rsp+78h+vEyePosOut]
          vmovss  dword ptr [rbx+6EC8h], xmm0
          vmovss  xmm1, dword ptr [rsp+78h+vEyePosOut+4]
          vmovss  dword ptr [rbx+6ECCh], xmm1
          vmovss  xmm0, dword ptr [rsp+78h+vEyePosOut+8]
          vmovss  dword ptr [rbx+6ED0h], xmm0
        }
        traversal = _RBX->botInfo.traversal;
        if ( (traversal & 1) != 0 )
          _RBX->botInfo.traversal = traversal & 0xFFFFFFFE;
      }
    }
  }
}

/*
==============
SV_BotIncrementActiveBotCount
==============
*/
void SV_BotIncrementActiveBotCount(void)
{
  ++s_botActiveBotCount;
}

/*
==============
SV_BotInit
==============
*/
void SV_BotInit(SvClientMP *bot, int firstConnect)
{
  unsigned int MpClientIndex; 
  __int64 v5; 

  if ( !bot && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4457, ASSERT_TYPE_ASSERT, "( bot )", (const char *)&queryFormat, "bot") )
    __debugbreak();
  if ( !bot->gentity && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4458, ASSERT_TYPE_ASSERT, "( bot->gentity )", (const char *)&queryFormat, "bot->gentity") )
    __debugbreak();
  if ( !bot->gentity->client && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4459, ASSERT_TYPE_ASSERT, "( bot->gentity->client )", (const char *)&queryFormat, "bot->gentity->client") )
    __debugbreak();
  if ( level.maxSentients > 0x110 )
  {
    LODWORD(v5) = level.maxSentients;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4464, ASSERT_TYPE_ASSERT, "( level.maxSentients ) <= ( (200 + 48 + 24) )", "level.maxSentients <= MAX_SENTIENTS_MP\n\t%i, %i", v5, 272) )
      __debugbreak();
  }
  *(_QWORD *)&bot->netBuf.reliableCommands.m_entries[2].size = &bot->netBuf.reliableCommands.m_buffer[126956];
  MpClientIndex = SV_Client_GetMpClientIndex(bot);
  Com_Printf(18, "[BOTS] (%d) Initialized botData->botInfo.sentientInfo for client %i (%s)\n", (unsigned int)level.time, MpClientIndex, bot->name);
  if ( bot == (SvClientMP *)-1368i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1127, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  *(_DWORD *)&bot->netBuf.reliableCommands.TYPE_NOT_SPECIFIED = -17973521;
  *(_DWORD *)&bot->netBuf.reliableCommands.m_buffer[126948] = -17973521;
  Bot_SetBotPersistentMatchData((bot_data_t *)&bot->netBuf, firstConnect);
  Bot_ResetBotInfo((bot_data_t *)&bot->netBuf, bot->gentity);
  Bot_ResetLife((bot_data_t *)&bot->netBuf);
}

/*
==============
SV_BotInitDataSafety
==============
*/
void SV_BotInitDataSafety(SvClientMP *bot)
{
  client_net_buffers_t *p_netBuf; 

  if ( !bot && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4442, ASSERT_TYPE_ASSERT, "( bot )", (const char *)&queryFormat, "bot") )
    __debugbreak();
  p_netBuf = &bot->netBuf;
  if ( !p_netBuf && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1127, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  *(_DWORD *)&p_netBuf->reliableCommands.TYPE_NOT_SPECIFIED = -17973521;
  *(_DWORD *)&p_netBuf->reliableCommands.m_buffer[126948] = -17973521;
}

/*
==============
SV_BotInitRound
==============
*/
void SV_BotInitRound(void)
{
  signed int i; 
  SvClient *CommonClient; 
  bot_zone_data_t *v2; 
  __int64 v3; 
  unsigned __int8 *count; 
  unsigned int maxSentients; 
  const char *GameType; 
  const char *v7; 
  unsigned int v8; 
  int v9; 
  int v10; 
  const char *ColumnValueForRow; 
  const char *v12; 
  int buildIndexStart; 
  __int64 v14; 
  __int64 v15; 
  StringTable *tablePtr; 
  StringTable *table; 

  for ( i = 0; i < (int)SvClient::ms_clientCount; ++i )
  {
    if ( SV_BotIsBot(i) )
    {
      if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
        __debugbreak();
      CommonClient = SvClient::GetCommonClient(i);
      if ( !CommonClient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 20527, ASSERT_TYPE_ASSERT, "( bot )", (const char *)&queryFormat, "bot") )
        __debugbreak();
      memset_0(&CommonClient[107], 0, 0xC84ui64);
    }
  }
  v2 = s_botZoneData;
  if ( s_botZoneData )
  {
    v3 = s_botZoneDataCount;
    if ( s_botZoneDataCount )
    {
      count = s_botZoneData->count;
      do
      {
        v2->team = 0;
        *(_QWORD *)count = 0i64;
        ++v2;
        *((_WORD *)count + 4) = 0;
        count += 52;
        --v3;
      }
      while ( v3 );
    }
  }
  if ( s_botSentientHistory )
  {
    maxSentients = level.maxSentients;
    if ( level.maxSentients != 272 )
    {
      LODWORD(v14) = level.maxSentients;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4207, ASSERT_TYPE_ASSERT, "( level.maxSentients ) == ( (200 + 48 + 24) )", "level.maxSentients == MAX_SENTIENTS_MP\n\t%i, %i", v14, 272) )
        __debugbreak();
      maxSentients = level.maxSentients;
    }
    memset_0(s_botSentientHistory, 0, 16i64 * maxSentients);
  }
  StringTable_GetAsset("mp/gameTypesTable.csv", (const StringTable **)&tablePtr);
  if ( !tablePtr && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3210, ASSERT_TYPE_ASSERT, "( gameTypesTable )", (const char *)&queryFormat, "gameTypesTable") )
    __debugbreak();
  GameType = SV_GameMP_GetGameType();
  v7 = StringTable_Lookup(tablePtr, 0, GameType, 4);
  v8 = atoi(v7);
  v9 = v8;
  if ( v8 >= 2 )
  {
    LODWORD(v15) = 2;
    LODWORD(v14) = v8;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3216, ASSERT_TYPE_ASSERT, "(unsigned)( result ) < (unsigned)( 2 )", "result doesn't index 2\n\t%i not in [0, %i)", v14, v15) )
      __debugbreak();
  }
  s_botTeamSelectMode = v9;
  s_botPathTurn = 0;
  *(_QWORD *)&s_svBotNameData.buildIndexStart = -1i64;
  StringTable_GetAsset(SV_BOT_NAMES_TABLE, (const StringTable **)&table);
  v10 = 0;
  do
  {
    ColumnValueForRow = StringTable_GetColumnValueForRow(table, v10, 0);
    v12 = ColumnValueForRow;
    if ( ColumnValueForRow && !strncmp(ColumnValueForRow, "bot", 3ui64) )
    {
      buildIndexStart = s_svBotNameData.buildIndexStart;
      s_svBotNameData.buildIndexEnd = v10;
      if ( s_svBotNameData.buildIndexStart == -1 )
        buildIndexStart = v10;
      s_svBotNameData.buildIndexStart = buildIndexStart;
    }
    ++v10;
  }
  while ( v12 && *v12 );
  s_svBotNameData.nameListInitialized = 1;
  s_botNodesTested = 0;
  g_botCurrentNumDebugDrawTriggers = 0;
}

/*
==============
SV_BotIsBot
==============
*/
_BOOL8 SV_BotIsBot(const int clientNum)
{
  SvClient *CommonClient; 
  int v4; 
  unsigned int v5; 

  if ( !Com_GameMode_SupportsFeature(WEAPON_RAISING_ALTSWITCH) )
    return 0i64;
  if ( clientNum >= SvClient::ms_clientCount )
  {
    v5 = SvClient::ms_clientCount;
    v4 = clientNum;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5890, ASSERT_TYPE_ASSERT, "(unsigned)( clientNum ) < (unsigned)( SvClient::GetClientCount() )", "clientNum doesn't index SvClient::GetClientCount()\n\t%i not in [0, %i)", v4, v5) )
      __debugbreak();
  }
  if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
    __debugbreak();
  CommonClient = SvClient::GetCommonClient(clientNum);
  if ( !NetConnection::IsBot((NetConnection *)&CommonClient[642].lastUsercmd.sightedClientsMask.data[6]) && LODWORD(CommonClient[855].__vftable) == 2 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5892, ASSERT_TYPE_ASSERT, "( cl->clientConnection.IsBot() || (cl->testClient != TC_BOT) )", (const char *)&queryFormat, "cl->clientConnection.IsBot() || (cl->testClient != TC_BOT)") )
    __debugbreak();
  return LODWORD(CommonClient[855].__vftable) == 2;
}

/*
==============
SV_BotIsBotEnt
==============
*/
int SV_BotIsBotEnt(const gentity_s *ent)
{
  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5902, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( !Com_GameMode_SupportsFeature(WEAPON_RAISING_ALTSWITCH) && !Com_GameMode_SupportsFeature(WEAPON_RAISING_ALTSWITCH_ADS) )
    return 0;
  if ( ent->agent )
    return SV_Agent_IsScripted(ent->s.number) == 0;
  return SV_BotIsBotEntClient(ent);
}

/*
==============
SV_BotIsBotEntClient
==============
*/
int SV_BotIsBotEntClient(const gentity_s *ent)
{
  int number; 

  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5923, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( Com_GameMode_SupportsFeature(WEAPON_RAISING_ALTSWITCH) && (number = ent->s.number, number < (int)SvClient::ms_clientCount) )
    return SV_BotIsBot(number);
  else
    return 0;
}

/*
==============
SV_BotKilled
==============
*/
void SV_BotKilled(SvClientMP *bot)
{
  bot_data_t *ClientData; 
  unsigned int maxSentients; 
  signed __int64 v4; 
  signed __int64 v5; 
  char *v6; 
  __int64 v7; 
  __int64 v8; 
  __int64 v9; 
  __int64 v10; 

  if ( !Sys_IsServerThread() && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4494, ASSERT_TYPE_ASSERT, "( Sys_IsServerThread() )", (const char *)&queryFormat, "Sys_IsServerThread()") )
    __debugbreak();
  if ( !bot && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4495, ASSERT_TYPE_ASSERT, "( bot )", (const char *)&queryFormat, "bot") )
    __debugbreak();
  if ( !bot->gentity && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4496, ASSERT_TYPE_ASSERT, "( bot->gentity )", (const char *)&queryFormat, "bot->gentity") )
    __debugbreak();
  if ( !bot->gentity->sentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4497, ASSERT_TYPE_ASSERT, "( bot->gentity->sentient )", (const char *)&queryFormat, "bot->gentity->sentient") )
    __debugbreak();
  ClientData = Bot_GetClientData(bot);
  if ( !ClientData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4503, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  Actor_BroadcastTeamEvent(bot->gentity->sentient, AI_EV_DEATH);
  maxSentients = level.maxSentients;
  if ( level.maxSentients > 0x110 )
  {
    LODWORD(v8) = level.maxSentients;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4508, ASSERT_TYPE_ASSERT, "( level.maxSentients ) <= ( (200 + 48 + 24) )", "level.maxSentients <= MAX_SENTIENTS_MP\n\t%i, %i", v8, 272) )
      __debugbreak();
    maxSentients = level.maxSentients;
  }
  memcpy_0(lastBotSentientInfo, (char *)&ClientData->scriptedAgentInfo + 11644, sizeof(lastBotSentientInfo));
  memcpy_0(lastSentientInfo, ClientData->botInfo.sentientInfo, (unsigned __int64)maxSentients << 6);
  if ( !ClientData->botInfo.sentientInfo )
  {
    if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
      __debugbreak();
    v4 = ((char *)bot - (char *)SvClient::GetCommonClient(0)) / 379488;
    if ( (unsigned int)v4 >= 0xC8 )
    {
      LODWORD(v9) = 200;
      LODWORD(v8) = v4;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 1072, ASSERT_TYPE_ASSERT, "(unsigned)( index ) < (unsigned)( 200 )", "index doesn't index MAX_CLIENTS_MP\n\t%i not in [0, %i)", v8, v9) )
        __debugbreak();
    }
    LODWORD(v9) = level.time;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4512, ASSERT_TYPE_ASSERT, "(botData->botInfo.sentientInfo != nullptr)", "%s\n\t[BOTS] (%d) botData->botInfo.sentientInfo is NULL for for client %i (%s)", "botData->botInfo.sentientInfo != nullptr", v9, v4, bot->name) )
      __debugbreak();
  }
  Bot_ResetLife(ClientData);
  memcpy_0((char *)&ClientData->scriptedAgentInfo + 11644, lastBotSentientInfo, 0x3FC0ui64);
  memcpy_0(ClientData->botInfo.sentientInfo, lastSentientInfo, (unsigned __int64)level.maxSentients << 6);
  if ( !ClientData->botInfo.sentientInfo )
  {
    if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
      __debugbreak();
    v5 = ((char *)bot - (char *)SvClient::GetCommonClient(0)) / 379488;
    if ( (unsigned int)v5 >= 0xC8 )
    {
      LODWORD(v9) = 200;
      LODWORD(v8) = v5;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 1072, ASSERT_TYPE_ASSERT, "(unsigned)( index ) < (unsigned)( 200 )", "index doesn't index MAX_CLIENTS_MP\n\t%i not in [0, %i)", v8, v9) )
        __debugbreak();
    }
    LODWORD(v10) = v5;
    LODWORD(v9) = level.time;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4519, ASSERT_TYPE_ASSERT, "(botData->botInfo.sentientInfo != nullptr)", "%s\n\t[BOTS] (%d) botData->botInfo.sentientInfo is NULL for for client %i (%s)", "botData->botInfo.sentientInfo != nullptr", v9, v10, bot->name) )
      __debugbreak();
  }
  v6 = (char *)&ClientData->scriptedAgentInfo + 11688;
  v7 = 0i64;
  do
  {
    v6 += 60;
    ClientData->botInfo.sentientInfo[v7++].iLastAttackMeTime = 0;
    *((_DWORD *)v6 - 12) &= ~2u;
    *((_DWORD *)v6 - 16) = -2147483647;
    *((_DWORD *)v6 - 15) = 0;
    *((_DWORD *)v6 - 13) = 0;
  }
  while ( v7 < 272 );
}

/*
==============
SV_BotKnownEnemiesRadial
==============
*/

void __fastcall SV_BotKnownEnemiesRadial(const gentity_s *self, const vec3_t *vOrigin, double radius, unsigned __int8 knownType)
{
  bot_data_t *EntityData; 

  __asm
  {
    vmovaps [rsp+48h+var_18], xmm6
    vmovaps xmm6, xmm2
  }
  if ( !self && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24493, ASSERT_TYPE_ASSERT, "( self )", (const char *)&queryFormat, "self") )
    __debugbreak();
  if ( !SV_BotIsBotEnt(self) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24494, ASSERT_TYPE_ASSERT, "( SV_BotIsBotEnt( self ) )", (const char *)&queryFormat, "SV_BotIsBotEnt( self )") )
    __debugbreak();
  EntityData = Bot_GetEntityData(self);
  if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24498, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  __asm
  {
    vmovaps xmm2, xmm6
    vmovaps xmm6, [rsp+48h+var_18]
  }
  Bot_AIKnownEnemiesRadial(&EntityData->botInfo, vOrigin, *(double *)&_XMM2, knownType);
}

/*
==============
SV_BotMissileFired
==============
*/
void SV_BotMissileFired(const gentity_s *self, gentity_s *missile)
{
  bot_data_t *EntityData; 
  GWeaponMap *Instance; 
  const Weapon *Weapon; 

  if ( !self && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24509, ASSERT_TYPE_ASSERT, "( self )", (const char *)&queryFormat, "self") )
    __debugbreak();
  if ( !SV_BotIsBotEnt(self) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24510, ASSERT_TYPE_ASSERT, "( SV_BotIsBotEnt( self ) )", (const char *)&queryFormat, "SV_BotIsBotEnt( self )") )
    __debugbreak();
  if ( !missile && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24511, ASSERT_TYPE_ASSERT, "( missile )", (const char *)&queryFormat, "missile") )
    __debugbreak();
  if ( missile->s.eType != ET_MISSILE && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24512, ASSERT_TYPE_ASSERT, "( missile->s.eType == ET_MISSILE )", (const char *)&queryFormat, "missile->s.eType == ET_MISSILE") )
    __debugbreak();
  EntityData = Bot_GetEntityData(self);
  if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24518, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  EntityData->botInfo.grenadeFiredTime = level.time;
  Instance = GWeaponMap::GetInstance();
  Weapon = BgWeaponMap::GetWeapon(Instance, missile->s.weaponHandle);
  if ( Bot_Weap_IsOffhandClass(EntityData->botInfo.playerState, Weapon, OFFHAND_CLASS_FLASH_GRENADE) )
  {
    __asm { vmovss  xmm2, cs:__real@43960000; hideRange }
    Bot_HideFromEntity(EntityData, missile, *(float *)&_XMM2, 10000);
    EntityData->botInfo.grenadeLastInSightCheck = level.time + 1000;
  }
}

/*
==============
SV_BotPathsInit
==============
*/

void __fastcall SV_BotPathsInit(double _XMM0_8)
{
  unsigned int fixedNodeCount; 
  int v5; 
  unsigned int v8; 
  char v9; 
  unsigned __int16 v10; 
  unsigned int v11; 
  pathnode_t *v12; 
  const char *v13; 
  const char *v36; 
  int v37; 
  __int64 v38; 
  char v39; 
  unsigned int v40; 
  unsigned int v41; 
  int v44; 
  unsigned __int16 v45; 
  int v46; 
  pathnode_t *v47; 
  char v69; 
  unsigned int v75; 
  int *v76; 
  signed int i; 
  SvClientMP *CommonClient; 
  char *fmt; 
  __int64 v80; 
  __int64 v81; 
  __int64 v82; 
  int v83; 
  vec3_t pos; 
  __int128 v85; 
  __int128 v86; 
  __int128 v87; 
  void *retaddr; 

  _R11 = &retaddr;
  fixedNodeCount = pathData.fixedNodeCount;
  __asm
  {
    vmovaps xmmword ptr [r11-38h], xmm6
    vmovaps xmmword ptr [r11-48h], xmm7
  }
  v5 = Path_ZoneCount();
  __asm
  {
    vxorps  xmm0, xmm0, xmm0
    vxorps  xmm7, xmm7, xmm7
    vmovups xmmword ptr cs:s_botWorldBounds.midPoint, xmm0
    vmovss  dword ptr cs:s_botWorldBounds.halfSize+4, xmm7
    vmovss  dword ptr cs:s_botWorldBounds.halfSize+8, xmm7
  }
  v8 = v5;
  v83 = v5;
  SV_BotPathsInitCornerMask();
  s_botPathTurn = 0;
  v9 = 1;
  v10 = 0;
  if ( fixedNodeCount )
  {
    v11 = 0;
    do
    {
      if ( !Path_NodeValid(v10) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3953, ASSERT_TYPE_ASSERT, "( Path_NodeValid( nodeNum ) )", (const char *)&queryFormat, "Path_NodeValid( nodeNum )") )
        __debugbreak();
      v12 = Path_ConvertIndexToNode(v10);
      if ( !v12 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3955, ASSERT_TYPE_ASSERT, "( pathnode )", (const char *)&queryFormat, "pathnode") )
        __debugbreak();
      if ( Path_IsNodeTraversalBegin(v12) )
      {
        if ( !v12->constant.animscript )
        {
          v13 = vtos(&v12->constant.vLocalOrigin);
          if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3956, ASSERT_TYPE_ASSERT, "(!Path_IsNodeTraversalBegin( pathnode ) || pathnode->constant.animscript != ( static_cast< scr_string_t >( 0 ) ))", "%s\n\tNegotiation node at %s has no animscript defined", "!Path_IsNodeTraversalBegin( pathnode ) || pathnode->constant.animscript != NULL_SCR_STRING", v13) )
            __debugbreak();
        }
      }
      pathnode_t::GetPos(v12, &pos);
      __asm { vmovss  xmm0, dword ptr [rbp+57h+pos] }
      if ( v9 )
      {
        __asm
        {
          vmovss  xmm1, dword ptr [rbp+57h+pos+4]
          vmovss  dword ptr cs:s_botWorldBounds.midPoint, xmm0
          vmovss  xmm0, dword ptr [rbp+57h+pos+8]
          vmovss  dword ptr cs:s_botWorldBounds.midPoint+8, xmm0
          vmovss  dword ptr cs:s_botWorldBounds.midPoint+4, xmm1
        }
        v9 = 0;
      }
      else
      {
        HIDWORD(v85) = 0;
        __asm
        {
          vmovups xmm5, xmmword ptr [rbp-29h]
          vmovss  xmm5, xmm5, xmm0
          vmovss  xmm0, dword ptr cs:s_botWorldBounds.midPoint
          vinsertps xmm5, xmm5, dword ptr [rbp+57h+pos+4], 57h+var_48+1
          vinsertps xmm5, xmm5, dword ptr [rbp+57h+pos+8], 57h+var_38+1
        }
        HIDWORD(v86) = 0;
        __asm
        {
          vmovups xmm4, xmmword ptr [rbp-19h]
          vmovss  xmm4, xmm4, xmm0
          vmovss  xmm0, dword ptr cs:s_botWorldBounds.halfSize
          vinsertps xmm4, xmm4, dword ptr cs:s_botWorldBounds.midPoint+4, 10h
          vinsertps xmm4, xmm4, dword ptr cs:s_botWorldBounds.midPoint+8, 20h ; ' '
        }
        HIDWORD(v87) = 0;
        __asm
        {
          vmovups xmm3, xmmword ptr [rbp-9]
          vmovss  xmm3, xmm3, xmm0
          vinsertps xmm3, xmm3, dword ptr cs:s_botWorldBounds.halfSize+4, 10h
          vinsertps xmm3, xmm3, dword ptr cs:s_botWorldBounds.halfSize+8, 20h ; ' '
          vaddps  xmm1, xmm4, xmm3
          vsubps  xmm0, xmm4, xmm3
          vmovups xmmword ptr [rbp-9], xmm3
          vminps  xmm3, xmm0, xmm5
          vmaxps  xmm0, xmm1, xmm5
          vaddps  xmm1, xmm3, xmm0
          vmulps  xmm2, xmm1, xmmword ptr cs:?g_oneHalf@@3Ufloat4@@B.v; float4 const g_oneHalf
          vmovups xmmword ptr [rbp-19h], xmm4
          vsubps  xmm4, xmm2, xmm3
          vmovss  dword ptr cs:s_botWorldBounds.halfSize, xmm4
          vextractps dword ptr cs:s_botWorldBounds.halfSize+4, xmm4, 1
          vextractps dword ptr cs:s_botWorldBounds.halfSize+8, xmm4, 2
          vmovss  dword ptr cs:s_botWorldBounds.midPoint, xmm2
          vextractps dword ptr cs:s_botWorldBounds.midPoint+4, xmm2, 1
          vextractps dword ptr cs:s_botWorldBounds.midPoint+8, xmm2, 2
          vmovups xmmword ptr [rbp-29h], xmm5
        }
      }
      if ( !v12 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3799, ASSERT_TYPE_ASSERT, "( negotiationNode )", (const char *)&queryFormat, "negotiationNode") )
        __debugbreak();
      if ( Path_IsNodeTraversalBegin(v12) )
      {
        v36 = SL_ConvertToString(v12->constant.animscript);
        v37 = Bot_AnimscriptToNegotiationType(v36);
        if ( v37 )
        {
          v38 = v11 >> 1;
          v39 = 4 * (v11 & 1);
          if ( (unsigned int)v38 >= (unsigned int)s_botTraversalTypesCount )
          {
            LODWORD(v81) = s_botTraversalTypesCount;
            LODWORD(v80) = v38;
            if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3699, ASSERT_TYPE_ASSERT, "(unsigned)( byteIndex ) < (unsigned)( s_botTraversalTypesCount )", "byteIndex doesn't index s_botTraversalTypesCount\n\t%i not in [0, %i)", v80, v81) )
              __debugbreak();
          }
          if ( (unsigned int)(v37 - 1) > 0xF )
          {
            LODWORD(v82) = 16;
            LODWORD(v81) = 1;
            LODWORD(v80) = v37;
            if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3700, ASSERT_TYPE_ASSERT, "( (1 << ( 0 )) ) <= ( negotiationType ) && ( negotiationType ) <= ( (1 << ( 4 )) )", "negotiationType not in [(1 << BOT_TRAVERSAL_TYPE_FIRST_BIT), (1 << BOT_TRAVERSAL_TYPE_LAST_BIT)]\n\t%i not in [%i, %i]", v80, v81, v82) )
              __debugbreak();
          }
          v40 = 0;
          while ( !_bittest(&v37, v40) )
          {
            if ( (int)++v40 > 4 )
              goto LABEL_32;
          }
          s_botTraversalTypes[v38] = truncate_cast<unsigned char,int>((v40 << v39) | s_botTraversalTypes[v38]);
        }
      }
LABEL_32:
      v11 = ++v10;
    }
    while ( v10 < fixedNodeCount );
    v8 = v83;
  }
  if ( s_botZoneDataCount != v8 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3974, ASSERT_TYPE_ASSERT, "( s_botZoneDataCount == zoneCount )", (const char *)&queryFormat, "s_botZoneDataCount == zoneCount") )
    __debugbreak();
  v41 = 0;
  if ( v8 )
  {
    _R15 = 0i64;
    do
    {
      *(double *)&_XMM0 = Path_ZoneGetIndoorPercent(v41);
      _RAX = s_botZoneData;
      v44 = 0;
      v45 = 0;
      __asm { vmovss  dword ptr [r15+rax+4], xmm0 }
      if ( fixedNodeCount )
      {
        v46 = 0;
        do
        {
          if ( Path_NodeZoneFromIndex(v46) == v41 )
            ++v44;
          v46 = ++v45;
        }
        while ( v45 < fixedNodeCount );
        if ( v44 >= 150 )
        {
          v47 = Path_ConvertZoneIndexToZone(v41);
          if ( !v47 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3991, ASSERT_TYPE_ASSERT, "(zoneNode)", (const char *)&queryFormat, "zoneNode") )
            __debugbreak();
          pathnode_t::GetPos(v47, &pos);
          __asm
          {
            vcvttss2si ecx, dword ptr [rbp+57h+pos+4]
            vcvttss2si eax, dword ptr [rbp+57h+pos+8]
            vcvttss2si r9d, dword ptr [rbp+57h+pos]
          }
          LODWORD(v82) = 150;
          LODWORD(v81) = v44;
          LODWORD(v80) = _EAX;
          LODWORD(fmt) = _ECX;
          Com_PrintWarning(18, "SV_BotPathsInit() WARNING: zone %i centered at (%i %i %i) has %i nodes in it. (typical is < BOT_MAX_REASONABLE_ZONE_NODES %i)\n", v41, _R9, fmt, v80, v81, v82);
        }
      }
      ++v41;
      _R15 += 52i64;
    }
    while ( v41 < v8 );
  }
  Bot_ZonePopulateObstacleData();
  __asm
  {
    vmovss  xmm3, cs:__real@bf800000
    vmovss  xmm2, cs:__real@3f800000
    vmovss  xmm5, dword ptr cs:s_botWorldBounds.halfSize
    vsubss  xmm0, xmm5, dword ptr cs:s_botWorldBounds.midPoint
    vmovss  xmm6, dword ptr cs:s_botWorldBounds.halfSize+4
    vmovss  xmm1, dword ptr cs:?level@@3Ulevel_locals_t@@A.pathnodeWorldSize; level_locals_t level
    vmovss  dword ptr cs:s_botWorldEdgePlanes+0Ch, xmm0
    vaddss  xmm0, xmm5, dword ptr cs:s_botWorldBounds.midPoint
    vmovss  dword ptr cs:s_botWorldEdgePlanes+1Ch, xmm0
    vsubss  xmm0, xmm6, dword ptr cs:s_botWorldBounds.midPoint+4
    vmovss  dword ptr cs:s_botWorldEdgePlanes+2Ch, xmm0
    vaddss  xmm0, xmm6, dword ptr cs:s_botWorldBounds.midPoint+4
    vmovss  dword ptr cs:s_botWorldEdgePlanes+3Ch, xmm0
    vmovss  xmm0, dword ptr cs:?level@@3Ulevel_locals_t@@A.pathnodeWorldSize+4; level_locals_t level
    vmovss  dword ptr cs:s_botWorldEdgePlanes, xmm3
    vmovss  dword ptr cs:s_botWorldEdgePlanes+24h, xmm3
    vmulss  xmm3, xmm1, xmm1
    vmovss  xmm1, dword ptr cs:?level@@3Ulevel_locals_t@@A.pathnodeWorldSize+8; level_locals_t level
    vmovss  dword ptr cs:s_botWorldEdgePlanes+10h, xmm2
    vmovss  dword ptr cs:s_botWorldEdgePlanes+34h, xmm2
    vmulss  xmm2, xmm0, xmm0
    vaddss  xmm4, xmm3, xmm2
    vmulss  xmm0, xmm1, xmm1
    vaddss  xmm2, xmm4, xmm0
    vsqrtss xmm3, xmm2, xmm2
    vcomiss xmm3, cs:__real@3dcccccd
    vmovss  dword ptr cs:s_botWorldEdgePlanes+4, xmm7
    vmovss  dword ptr cs:s_botWorldEdgePlanes+8, xmm7
    vmovss  dword ptr cs:s_botWorldEdgePlanes+14h, xmm7
    vmovss  dword ptr cs:s_botWorldEdgePlanes+18h, xmm7
    vmovss  dword ptr cs:s_botWorldEdgePlanes+20h, xmm7
    vmovss  dword ptr cs:s_botWorldEdgePlanes+28h, xmm7
    vmovss  dword ptr cs:s_botWorldEdgePlanes+30h, xmm7
    vmovss  dword ptr cs:s_botWorldEdgePlanes+38h, xmm7
    vmovaps xmm7, [rsp+0E0h+var_48+8]
  }
  if ( v69 )
  {
    __asm
    {
      vmovss  xmm2, cs:__real@40000000
      vmulss  xmm0, xmm5, xmm2
      vmulss  xmm1, xmm6, xmm2
      vmulss  xmm2, xmm2, dword ptr cs:s_botWorldBounds.halfSize+8
      vmovss  dword ptr cs:?level@@3Ulevel_locals_t@@A.pathnodeWorldSize+8, xmm2; level_locals_t level
      vmovss  dword ptr cs:?level@@3Ulevel_locals_t@@A.pathnodeWorldSize, xmm0; level_locals_t level
      vmovss  dword ptr cs:?level@@3Ulevel_locals_t@@A.pathnodeWorldSize+4, xmm1; level_locals_t level
    }
  }
  __asm { vmovaps xmm6, [rsp+0E0h+var_38+8] }
  v75 = 0;
  *(_OWORD *)s_botDebugPathGoal[0].v = 0ui64;
  *(_QWORD *)&s_botDebugPathGoal[1].y = 0i64;
  *(_OWORD *)s_botDebugPathGoal[2].v = 0ui64;
  *(_QWORD *)&s_botDebugPathGoal[3].y = 0i64;
  v76 = &s_botDebugPathGoalGround[1];
  s_botNodesTested = 0;
  do
  {
    v75 += 4;
    *(v76 - 1) = 2047;
    *v76 = 2047;
    v76[1] = 2047;
    v76[2] = 2047;
    v76 += 4;
  }
  while ( v75 < 4 );
  for ( i = 0; i < (int)SvClient::ms_clientCount; ++i )
  {
    if ( SV_BotIsBot(i) && SvClient::GetCommonClient(i)->state > CS_CLIENTLOADING )
    {
      if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
        __debugbreak();
      CommonClient = (SvClientMP *)SvClient::GetCommonClient(i);
      Bot_GetClientData(CommonClient)->botDebugData.debugPathGoalCurrent = 0;
    }
  }
  g_botCurrentNumDebugDrawTriggers = 0;
}

/*
==============
SV_BotPathsInitCornerMask
==============
*/
char SV_BotPathsInitCornerMask()
{
  unsigned int fixedNodeCount; 
  unsigned int Traffic; 
  unsigned __int16 v5; 
  const pathnode_t *v8; 
  unsigned int RawMax; 
  unsigned int v12; 

  fixedNodeCount = pathData.fixedNodeCount;
  LOBYTE(Traffic) = (unsigned __int8)memset_0(s_botRandomNodeCornerMask, 0, sizeof(s_botRandomNodeCornerMask));
  if ( fixedNodeCount >= 0xFFF8 )
  {
    LOBYTE(Traffic) = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3152, ASSERT_TYPE_ASSERT, "( nodeCount ) < ( ( 65535 / 8 ) * 8 )", "nodeCount < BOT_PATH_MASK_SIZE * 8\n\t%i, %i", fixedNodeCount, 65528);
    if ( (_BYTE)Traffic )
      __debugbreak();
  }
  v5 = 0;
  if ( fixedNodeCount )
  {
    __asm
    {
      vmovaps [rsp+98h+var_38], xmm6
      vmovaps [rsp+98h+var_48], xmm7
      vmovss  xmm7, cs:__real@43340000
      vmovaps [rsp+98h+var_58], xmm8
      vmovss  xmm8, cs:__real@42340000
    }
    do
    {
      v8 = Path_ConvertIndexToNode(v5);
      if ( !v8 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3157, ASSERT_TYPE_ASSERT, "( pathnode )", (const char *)&queryFormat, "pathnode") )
        __debugbreak();
      Traffic = Path_NodeExposureGetTraffic(v8);
      if ( Traffic < 0xA )
      {
        __asm { vxorps  xmm6, xmm6, xmm6 }
        while ( 1 )
        {
          __asm { vmovaps xmm1, xmm6; yaw }
          RawMax = Path_NodeExposureGetRawMax(v8, *(float *)&_XMM1, 1);
          __asm { vsubss  xmm1, xmm6, xmm7; yaw }
          v12 = RawMax;
          Traffic = Path_NodeExposureGetRawMax(v8, *(float *)&_XMM1, 1);
          if ( Traffic > v12 )
            Traffic = v12;
          if ( Traffic >= 4 )
            break;
          __asm
          {
            vaddss  xmm6, xmm6, xmm8
            vcomiss xmm6, xmm7
          }
        }
      }
      ++v5;
    }
    while ( v5 < fixedNodeCount );
    __asm
    {
      vmovaps xmm8, [rsp+98h+var_58]
      vmovaps xmm7, [rsp+98h+var_48]
      vmovaps xmm6, [rsp+98h+var_38]
    }
  }
  s_botRandomNodeCornerMaskInitialized = 1;
  return Traffic;
}

/*
==============
SV_BotPerfectInfoIgnored
==============
*/
void SV_BotPerfectInfoIgnored(const ai_common_t *self, sentient_s *other, unsigned __int8 reason)
{
  ;
}

/*
==============
SV_BotPlayerNameTaken
==============
*/
__int64 SV_BotPlayerNameTaken(const bot_data_t *botData, const char *checkName)
{
  unsigned int v4; 
  const SvClientMP *CommonClient; 
  const char *name; 
  __int64 v7; 
  __int64 v8; 
  const char *v9; 
  int v10; 
  __int64 v11; 
  int v12; 
  int v13; 
  int v14; 
  __int64 v16; 
  __int64 v17; 
  char dest[40]; 

  if ( !checkName && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4098, ASSERT_TYPE_ASSERT, "( checkName )", (const char *)&queryFormat, "checkName") )
    __debugbreak();
  v4 = 0;
  if ( (int)SvClient::ms_clientCount <= 0 )
    return 0i64;
  while ( 1 )
  {
    if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
      __debugbreak();
    CommonClient = (const SvClientMP *)SvClient::GetCommonClient(v4);
    if ( Bot_IsClientActive(CommonClient) )
    {
      if ( !CommonClient->gentity && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4107, ASSERT_TYPE_ASSERT, "( cl->gentity )", (const char *)&queryFormat, "cl->gentity") )
        __debugbreak();
      if ( !CommonClient->gentity->client && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4108, ASSERT_TYPE_ASSERT, "( cl->gentity->client )", (const char *)&queryFormat, "cl->gentity->client") )
        __debugbreak();
      if ( !botData || CommonClient->gentity->s.number != botData->botInfo.ent->s.number )
        break;
    }
LABEL_42:
    if ( (int)++v4 >= (int)SvClient::ms_clientCount )
      return 0i64;
  }
  name = CommonClient->gentity->client->sess.cs.name;
  if ( CommonClient->gentity->client == (gclient_s *)-22188i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3452, ASSERT_TYPE_ASSERT, "( originalName )", (const char *)&queryFormat, "originalName") )
    __debugbreak();
  v7 = -1i64;
  do
    ++v7;
  while ( name[v7] );
  if ( !name && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3441, ASSERT_TYPE_ASSERT, "( name )", (const char *)&queryFormat, &stru_143C9A1A4) )
    __debugbreak();
  if ( I_strstr(name, " [") )
    LODWORD(v7) = v7 - 7;
  if ( (int)v7 + 1 > 36 )
  {
    LODWORD(v17) = 36;
    LODWORD(v16) = v7 + 1;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3462, ASSERT_TYPE_ASSERT, "( nameSize + 1 ) <= ( 36 )", "nameSize + 1 <= MAX_PLAYERNAME_LENGTH\n\t%i, %i", v16, v17) )
      __debugbreak();
  }
  Core_strncpy(dest, 0x24ui64, name, (int)v7);
  v8 = 0x7FFFFFFFi64;
  v9 = checkName;
  if ( !checkName && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_string.h", 213, ASSERT_TYPE_SANITY, "( s1 )", (const char *)&queryFormat, "s1") )
    __debugbreak();
  do
  {
    v10 = (unsigned __int8)v9[dest - checkName];
    v11 = v8;
    v12 = *(unsigned __int8 *)v9++;
    --v8;
    if ( !v11 )
      break;
    if ( v10 != v12 )
    {
      v13 = v10 + 32;
      if ( (unsigned int)(v10 - 65) > 0x19 )
        v13 = v10;
      v10 = v13;
      v14 = v12 + 32;
      if ( (unsigned int)(v12 - 65) > 0x19 )
        v14 = v12;
      if ( v10 != v14 )
        goto LABEL_42;
    }
  }
  while ( v10 );
  return 1i64;
}

/*
==============
SV_BotRecalculatePath
==============
*/
void SV_BotRecalculatePath(gentity_s *ent)
{
  ;
}

/*
==============
SV_BotReevaluatePath
==============
*/
void SV_BotReevaluatePath(const gentity_s *ent)
{
  bot_data_t *EntityData; 

  EntityData = Bot_GetEntityData(ent);
  if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4323, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  if ( EntityData->botInfo.traversal )
    Bot_TraversalClear(&EntityData->botInfo);
  Bot_PathClear(&EntityData->botInfo);
}

/*
==============
SV_BotRegisterEntAffecter
==============
*/
__int64 SV_BotRegisterEntAffecter(const gentity_s *ent)
{
  signed __int64 v2; 
  int v3; 
  __int16 *i; 
  __int64 v5; 
  __int64 v7; 
  __int64 v8; 

  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 26004, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 196, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
    __debugbreak();
  v2 = ent - g_entities;
  if ( (unsigned int)v2 >= 0x800 )
  {
    LODWORD(v7) = ent - g_entities;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 199, ASSERT_TYPE_ASSERT, "(unsigned)( index ) < (unsigned)( ( 2048 ) )", "index doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v7, 2048) )
      __debugbreak();
  }
  v2 = (__int16)v2;
  if ( (unsigned int)(__int16)v2 >= 0x800 )
  {
    LODWORD(v8) = 2048;
    LODWORD(v7) = v2;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 207, ASSERT_TYPE_ASSERT, "(unsigned)( entityIndex ) < (unsigned)( ( 2048 ) )", "entityIndex doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v7, v8) )
      __debugbreak();
  }
  if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 208, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
    __debugbreak();
  if ( g_entities[v2].r.isInUse != g_entityIsInUse[v2] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 209, ASSERT_TYPE_ASSERT, "( g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex] )", (const char *)&queryFormat, "g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex]") )
    __debugbreak();
  if ( !g_entityIsInUse[v2] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 26005, ASSERT_TYPE_ASSERT, "( G_IsEntityInUse( G_GetEntityIndex( ent ) ) )", (const char *)&queryFormat, "G_IsEntityInUse( G_GetEntityIndex( ent ) )") )
    __debugbreak();
  if ( ent->s.number >= 0x800u )
  {
    LODWORD(v8) = 2048;
    LODWORD(v7) = ent->s.number;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 26006, ASSERT_TYPE_ASSERT, "(unsigned)( ent->s.number ) < (unsigned)( ( 2048 ) )", "ent->s.number doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v7, v8) )
      __debugbreak();
  }
  if ( ent->s.number == 2047 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 26007, ASSERT_TYPE_ASSERT, "( ent->s.number != ENTITYNUM_NONE )", (const char *)&queryFormat, "ent->s.number != ENTITYNUM_NONE") )
    __debugbreak();
  v3 = 0;
  for ( i = s_botEntAffecters; ; ++i )
  {
    LOWORD(v5) = *i;
    if ( *i == ent->s.number )
      break;
    if ( (_WORD)v5 == 2047 )
    {
      s_botEntAffecters[v3] = ent->s.number;
      return 1i64;
    }
    if ( (unsigned __int16)v5 >= 0x800u )
    {
      LODWORD(v8) = 2048;
      LODWORD(v7) = (__int16)v5;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 26021, ASSERT_TYPE_ASSERT, "(unsigned)( affecterEntIndex ) < (unsigned)( ( 2048 ) )", "affecterEntIndex doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v7, v8) )
        __debugbreak();
    }
    v5 = (__int16)v5;
    if ( (unsigned int)(__int16)v5 >= 0x800 )
    {
      LODWORD(v8) = 2048;
      LODWORD(v7) = v5;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 207, ASSERT_TYPE_ASSERT, "(unsigned)( entityIndex ) < (unsigned)( ( 2048 ) )", "entityIndex doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v7, v8) )
        __debugbreak();
    }
    if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 208, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
      __debugbreak();
    if ( g_entities[v5].r.isInUse != g_entityIsInUse[v5] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 209, ASSERT_TYPE_ASSERT, "( g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex] )", (const char *)&queryFormat, "g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex]") )
      __debugbreak();
    if ( !g_entityIsInUse[v5] )
    {
      s_botEntAffecters[v3] = ent->s.number;
      return 1i64;
    }
    if ( (unsigned int)++v3 >= 0x40 )
      return 0i64;
  }
  return 1i64;
}

/*
==============
SV_BotRequirePathnodes
==============
*/
bool SV_BotRequirePathnodes(const bot_data_t *botData)
{
  const dvar_t *v1; 

  v1 = DVARBOOL_bot_EnableNoPathnodeBehavior;
  if ( !DVARBOOL_bot_EnableNoPathnodeBehavior && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 692, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_EnableNoPathnodeBehavior") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v1);
  if ( v1->current.enabled )
    return 0;
  if ( !botData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1528, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  return (*((_BYTE *)&botData->scriptedAgentInfo + 9019) & 1) == 0;
}

/*
==============
SV_BotSetAvoidanceRadius
==============
*/

void __fastcall SV_BotSetAvoidanceRadius(const gentity_s *ent, double radius)
{
  __asm
  {
    vmovaps [rsp+48h+var_18], xmm6
    vmovaps xmm6, xmm1
  }
  _RAX = Bot_GetEntityData(ent);
  _RBX = _RAX;
  if ( _RAX )
  {
    __asm
    {
      vmovss  dword ptr [rax+1D0h], xmm6
      vmovaps xmm6, [rsp+48h+var_18]
    }
  }
  else
  {
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 4739, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
      __debugbreak();
    __asm
    {
      vmovss  dword ptr [rbx+1D0h], xmm6
      vmovaps xmm6, [rsp+48h+var_18]
    }
  }
}

/*
==============
SV_BotSetFireRecoil
==============
*/
void SV_BotSetFireRecoil(const int clientNum, const vec3_t *kickAVel)
{
  const SvClientMP *CommonClient; 
  bot_info_t *BotInfoFromNetBuffer; 

  if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
    __debugbreak();
  CommonClient = (const SvClientMP *)SvClient::GetCommonClient(clientNum);
  BotInfoFromNetBuffer = Bot_GetBotInfoFromNetBuffer(CommonClient);
  if ( !BotInfoFromNetBuffer && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 5991, ASSERT_TYPE_ASSERT, "( botInfo )", (const char *)&queryFormat, "botInfo") )
    __debugbreak();
  if ( BotInfoFromNetBuffer->ent->health > 0 )
  {
    BotInfoFromNetBuffer->kickAVel.v[0] = kickAVel->v[0];
    BotInfoFromNetBuffer->kickAVel.v[1] = kickAVel->v[1];
    BotInfoFromNetBuffer->kickAVel.v[2] = kickAVel->v[2];
  }
}

/*
==============
SV_BotShutdownBotAI
==============
*/
void SV_BotShutdownBotAI(void)
{
  signed int i; 
  SvClientMP *CommonClient; 
  bot_data_t *ClientData; 
  const dvar_t *v3; 

  for ( i = 0; i < (int)SvClient::ms_clientCount; ++i )
  {
    if ( SvClient::GetCommonClient(i)->state == CS_ACTIVE && SV_BotIsBot(i) )
    {
      if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
        __debugbreak();
      CommonClient = (SvClientMP *)SvClient::GetCommonClient(i);
      ClientData = Bot_GetClientData(CommonClient);
      Bot_CleanupBotInfo(ClientData);
    }
  }
  v3 = DVARBOOL_bot_spawnControlledByDvar;
  if ( !DVARBOOL_bot_spawnControlledByDvar && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar_api.h", 759, ASSERT_TYPE_ASSERT, "( dvar )", "Dvar accessed after deregistration") )
    __debugbreak();
  Dvar_Reset(v3, DVAR_SOURCE_INTERNAL);
  s_botRandomNodeCornerMaskInitialized = 0;
  s_botTeamSelectMode = -1;
  DebugWipe(&s_svBotNameData, 0xCui64);
  s_svBotNameData.nameListInitialized = 0;
}

/*
==============
SV_BotStaticStateRead
==============
*/
void SV_BotStaticStateRead(SaveGame *save)
{
  unsigned int v2; 
  __int64 v3; 
  __int64 v4; 
  __int64 v5; 

  if ( !save && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 919, ASSERT_TYPE_ASSERT, "( save )", (const char *)&queryFormat, "save") )
    __debugbreak();
  if ( s_botSentientHistory )
  {
    if ( level.maxSentients != 272 )
    {
      LODWORD(v5) = level.maxSentients;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 923, ASSERT_TYPE_ASSERT, "( level.maxSentients ) == ( (200 + 48 + 24) )", "level.maxSentients == MAX_SENTIENTS_MP\n\t%i, %i", v5, 272) )
        __debugbreak();
    }
    SaveMemory_LoadRead(s_botSentientHistory, 4352, save);
  }
  if ( s_botZoneData )
  {
    v2 = Path_ZoneCount();
    v3 = v2;
    if ( s_botZoneDataCount != v2 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 931, ASSERT_TYPE_ASSERT, "( s_botZoneDataCount == zoneCount )", (const char *)&queryFormat, "s_botZoneDataCount == zoneCount") )
      __debugbreak();
    if ( (_DWORD)v3 )
    {
      v4 = 0i64;
      do
      {
        SaveMemory_LoadRead(&s_botZoneData[v4++], 2, save);
        --v3;
      }
      while ( v3 );
    }
  }
  SaveMemory_LoadRead(s_botEntAffecters, 128, save);
  SaveMemory_LoadRead(&s_svBotNameData, 12, save);
}

/*
==============
SV_BotStaticStateWrite
==============
*/
void SV_BotStaticStateWrite(MemoryFile *memFile)
{
  unsigned int v2; 
  __int64 v3; 
  __int64 v4; 
  __int64 v5; 

  if ( !memFile && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 891, ASSERT_TYPE_ASSERT, "( memFile )", (const char *)&queryFormat, "memFile") )
    __debugbreak();
  if ( s_botSentientHistory )
  {
    if ( level.maxSentients != 272 )
    {
      LODWORD(v5) = level.maxSentients;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 895, ASSERT_TYPE_ASSERT, "( level.maxSentients ) == ( (200 + 48 + 24) )", "level.maxSentients == MAX_SENTIENTS_MP\n\t%i, %i", v5, 272) )
        __debugbreak();
    }
    MemFile_WriteData(memFile, 0x1100ui64, s_botSentientHistory);
  }
  if ( s_botZoneData )
  {
    v2 = Path_ZoneCount();
    v3 = v2;
    if ( s_botZoneDataCount != v2 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 903, ASSERT_TYPE_ASSERT, "( s_botZoneDataCount == zoneCount )", (const char *)&queryFormat, "s_botZoneDataCount == zoneCount") )
      __debugbreak();
    if ( (_DWORD)v3 )
    {
      v4 = 0i64;
      do
      {
        MemFile_WriteData(memFile, 2ui64, &s_botZoneData[v4++]);
        --v3;
      }
      while ( v3 );
    }
  }
  MemFile_WriteData(memFile, 0x80ui64, s_botEntAffecters);
  MemFile_WriteData(memFile, 0xCui64, &s_svBotNameData);
}

/*
==============
SV_BotStoreSentientThreat
==============
*/
void SV_BotStoreSentientThreat(const sentient_s *botSentient, const sentient_s *otherSentient, int threat)
{
  bot_data_t *EntityData; 
  signed __int64 v7; 
  __int64 v8; 

  if ( !botSentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24373, ASSERT_TYPE_ASSERT, "( botSentient )", (const char *)&queryFormat, "botSentient") )
    __debugbreak();
  if ( !otherSentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24374, ASSERT_TYPE_ASSERT, "( otherSentient )", (const char *)&queryFormat, "otherSentient") )
    __debugbreak();
  EntityData = Bot_GetEntityData(botSentient->ent);
  if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24380, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v7 = 60 * (otherSentient - level.sentients);
  v8 = (__int64)&EntityData->scriptedAgentInfo + v7 + 11644;
  if ( (bot_data_t *)((char *)EntityData + v7) == (bot_data_t *)-11652i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24383, ASSERT_TYPE_ASSERT, "( botSentientInfo )", (const char *)&queryFormat, "botSentientInfo") )
    __debugbreak();
  *(_DWORD *)(v8 + 40) = threat;
}

/*
==============
SV_BotSupportsCommand
==============
*/
__int64 SV_BotSupportsCommand(const char *commandString)
{
  int BindingForCommand; 
  const char **v2; 

  BindingForCommand = Com_Keys_GetBindingForCommand(commandString);
  v2 = s_botSupportedCmdNotifies;
  while ( Com_Keys_GetBindingForCommand(*v2) != BindingForCommand )
  {
    if ( (__int64)++v2 >= (__int64)&s_botProfTimeStart )
      return 0i64;
  }
  return 1i64;
}

/*
==============
SV_BotSwitchWeapon
==============
*/
__int64 SV_BotSwitchWeapon(gentity_s *self, const Weapon *weapon)
{
  const playerState_s *playerState; 
  GWeaponMap *Instance; 

  _RDI = weapon;
  if ( !self && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24913, ASSERT_TYPE_ASSERT, "( self )", (const char *)&queryFormat, "self") )
    __debugbreak();
  _RBX = Bot_GetEntityData(self);
  if ( !_RBX && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24920, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  playerState = _RBX->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 24924, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  if ( Bot_Weap_IsNone(_RDI) )
  {
    _RAX = Bot_Weap_None();
    __asm
    {
      vmovups ymm0, ymmword ptr [rax]
      vmovups ymmword ptr [rbx+6D44h], ymm0
      vmovups xmm1, xmmword ptr [rax+20h]
      vmovups xmmword ptr [rbx+6D64h], xmm1
      vmovsd  xmm0, qword ptr [rax+30h]
      vmovsd  qword ptr [rbx+6D74h], xmm0
    }
    *((_DWORD *)&_RBX->scriptedAgentInfo + 7005) = *(_DWORD *)&_RAX->weaponCamo;
    return 1i64;
  }
  else
  {
    Instance = GWeaponMap::GetInstance();
    if ( BG_PlayerHasWeapon(Instance, playerState, _RDI) )
    {
      __asm
      {
        vmovups ymm0, ymmword ptr [rdi]
        vmovups ymmword ptr [rbx+6D44h], ymm0
        vmovups xmm1, xmmword ptr [rdi+20h]
        vmovups xmmword ptr [rbx+6D64h], xmm1
        vmovsd  xmm0, qword ptr [rdi+30h]
        vmovsd  qword ptr [rbx+6D74h], xmm0
      }
      *((_DWORD *)&_RBX->scriptedAgentInfo + 7005) = *(_DWORD *)&_RDI->weaponCamo;
      return 1i64;
    }
    else
    {
      return 0i64;
    }
  }
}

/*
==============
SV_BotTeamLimit
==============
*/
unsigned __int8 SV_BotTeamLimit(int relativeTeam)
{
  int BotsTeamLimit; 
  const dvar_t *v3; 
  const dvar_t *v4; 
  const dvar_t *v5; 
  bool v6; 
  const dvar_t *v7; 
  int integer; 

  if ( BG_BotsUsingTeamLimits() )
  {
    BotsTeamLimit = BG_GetBotsTeamLimit(relativeTeam);
    if ( !s_botTeamSelectMode && relativeTeam == 1 )
    {
      v3 = DVARINT_bot_MaxNumEnemyBots;
      if ( !DVARINT_bot_MaxNumEnemyBots && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_MaxNumEnemyBots") )
        __debugbreak();
      Dvar_CheckFrontendServerThread(v3);
      if ( v3->current.integer < 0 && Dvar_GetInt_Internal_DebugName(DVARINT_bot_MaxNumAllyBots, "bot_MaxNumAllyBots") < 0 )
        BotsTeamLimit = 0;
      goto LABEL_19;
    }
  }
  else
  {
    BotsTeamLimit = 10;
  }
  if ( relativeTeam )
  {
    if ( relativeTeam != 1 )
      return truncate_cast<unsigned char,int>(BotsTeamLimit);
LABEL_19:
    v7 = DVARINT_bot_MaxNumEnemyBots;
    if ( !DVARINT_bot_MaxNumEnemyBots && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_MaxNumEnemyBots") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v7);
    if ( v7->current.integer >= 0 )
    {
      v5 = DVARINT_bot_MaxNumEnemyBots;
      if ( !DVARINT_bot_MaxNumEnemyBots )
      {
        v6 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_MaxNumEnemyBots");
LABEL_25:
        if ( v6 )
          __debugbreak();
        goto LABEL_27;
      }
      goto LABEL_27;
    }
    return truncate_cast<unsigned char,int>(BotsTeamLimit);
  }
  v4 = DVARINT_bot_MaxNumAllyBots;
  if ( !DVARINT_bot_MaxNumAllyBots && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_MaxNumAllyBots") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v4);
  if ( v4->current.integer >= 0 )
  {
    v5 = DVARINT_bot_MaxNumAllyBots;
    if ( !DVARINT_bot_MaxNumAllyBots )
    {
      v6 = CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_MaxNumAllyBots");
      goto LABEL_25;
    }
LABEL_27:
    Dvar_CheckFrontendServerThread(v5);
    integer = v5->current.integer;
    if ( BotsTeamLimit < integer )
      integer = BotsTeamLimit;
    BotsTeamLimit = integer;
  }
  return truncate_cast<unsigned char,int>(BotsTeamLimit);
}

/*
==============
SV_BotTestBadPlaces
==============
*/
void SV_BotTestBadPlaces()
{
  const dvar_t *v4; 
  signed int v5; 
  const SvClientMP *CommonClient; 
  int v15; 
  const dvar_t *v16; 
  int usageFlags; 
  const dvar_t *v20; 
  nav_space_s *DefaultSpace; 
  nav_space_s *v24; 
  float fmt; 
  float fmta; 
  bitarray<224> v31; 
  vec3_t pos; 
  bitarray<224> teamFlags; 

  if ( !Com_GameMode_SupportsFeature(WEAPON_RAISING_ALTSWITCH) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1071, ASSERT_TYPE_ASSERT, "(G_Bot_UseGlobalBadPlace())", "%s\n\tThis function uses global bad places, refactor if turned off", "G_Bot_UseGlobalBadPlace()") )
    __debugbreak();
  if ( !Com_GameMode_SupportsFeature(WEAPON_RAISING_ALTSWITCH) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1072, ASSERT_TYPE_ASSERT, "(G_Bot_UseBadPlaceRestrictions())", "%s\n\tThis function uses bad place restrictions, refactor if turned off", "G_Bot_UseBadPlaceRestrictions()") )
    __debugbreak();
  v4 = DVARINT_bot_BadPlaceTest;
  if ( !DVARINT_bot_BadPlaceTest && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_BadPlaceTest") )
    __debugbreak();
  Dvar_CheckFrontendServerThread(v4);
  if ( v4->current.integer && (int)abs32(SvPersistentGlobalsMP::GetPersistentGlobalsMP()->time - lastBadPlaceTime) > 1000 )
  {
    v5 = 0;
    if ( (int)SvClient::ms_clientCount > 0 )
    {
      __asm
      {
        vmovaps [rsp+110h+var_30], xmm6
        vmovss  xmm6, cs:__real@c4000000
        vmovaps [rsp+110h+var_40], xmm7
        vmovss  xmm7, cs:__real@447a0000
        vmovaps [rsp+110h+var_50], xmm8
        vmovss  xmm8, cs:__real@c3000000
        vmovaps [rsp+110h+var_60], xmm9
        vmovss  xmm9, cs:__real@43960000
      }
      do
      {
        if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
          __debugbreak();
        CommonClient = (const SvClientMP *)SvClient::GetCommonClient(v5);
        if ( Bot_IsClientActive(CommonClient) )
        {
          if ( !CommonClient->gentity && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1087, ASSERT_TYPE_ASSERT, "( cl->gentity )", (const char *)&queryFormat, "cl->gentity") )
            __debugbreak();
          if ( !SV_BotIsBot(v5) )
          {
            _RAX = CommonClient->gentity;
            __asm
            {
              vmovss  xmm0, dword ptr [rax+130h]
              vmovss  dword ptr [rbp+57h+pos], xmm0
              vmovss  xmm1, dword ptr [rax+134h]
              vmovss  dword ptr [rbp+57h+pos+4], xmm1
              vmovss  xmm0, dword ptr [rax+138h]
              vmovss  dword ptr [rbp+57h+pos+8], xmm0
            }
            memset(&teamFlags.array[1], 0, 24);
            teamFlags.array[0] = 1610612736;
            v15 = Nav_TranslateTeamFlagsToRepulsorUsageFlags(&teamFlags);
            v16 = DVARINT_bot_BadPlaceTest;
            usageFlags = v15;
            if ( !DVARINT_bot_BadPlaceTest && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_BadPlaceTest") )
              __debugbreak();
            Dvar_CheckFrontendServerThread(v16);
            if ( v16->current.integer == 3 )
            {
              __asm
              {
                vmovups xmm0, xmmword ptr [rbp+57h+teamFlags.array]
                vmovsd  xmm1, qword ptr [rbp-29h]
              }
              v31.array[6] = teamFlags.array[6];
              __asm
              {
                vmovups [rbp+57h+var_C0], xmm0
                vmovsd  [rbp+57h+var_B0], xmm1
              }
              Path_MakeGlobalBadPlace((scr_string_t)0, 1500, &v31, 1);
            }
            else
            {
              v20 = DVARINT_bot_BadPlaceTest;
              if ( !DVARINT_bot_BadPlaceTest && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_BadPlaceTest") )
                __debugbreak();
              Dvar_CheckFrontendServerThread(v20);
              if ( v20->current.integer == 2 )
              {
                __asm
                {
                  vaddss  xmm1, xmm6, dword ptr [rbp+57h+pos+8]
                  vmovss  dword ptr [rbp+57h+pos+8], xmm1
                }
                DefaultSpace = Nav_GetDefaultSpace();
                __asm { vmovss  dword ptr [rsp+110h+fmt], xmm7 }
                Nav_CreateRepulsor(DefaultSpace, &pos, &vec3_origin, 1500, fmt, 2047, usageFlags, (const scr_string_t)0, 1);
              }
              else if ( Dvar_GetInt_Internal_DebugName(DVARINT_bot_BadPlaceTest, "bot_BadPlaceTest") == 1 )
              {
                __asm
                {
                  vaddss  xmm1, xmm8, dword ptr [rbp+57h+pos+8]
                  vmovss  dword ptr [rbp+57h+pos+8], xmm1
                }
                v24 = Nav_GetDefaultSpace();
                __asm { vmovss  dword ptr [rsp+110h+fmt], xmm9 }
                Nav_CreateRepulsor(v24, &pos, &vec3_origin, 1500, fmta, 2047, usageFlags, (const scr_string_t)0, 1);
              }
            }
          }
        }
        ++v5;
      }
      while ( v5 < (int)SvClient::ms_clientCount );
      __asm
      {
        vmovaps xmm9, [rsp+110h+var_60]
        vmovaps xmm8, [rsp+110h+var_50]
        vmovaps xmm7, [rsp+110h+var_40]
        vmovaps xmm6, [rsp+110h+var_30]
      }
    }
    lastBadPlaceTime = SvPersistentGlobalsMP::GetPersistentGlobalsMP()->time;
  }
}

/*
==============
SV_BotTestPathdata
==============
*/
void SV_BotTestPathdata()
{
  char v1; 
  char v2; 
  int v3; 
  signed int v4; 
  const SvClientMP *CommonClient; 
  const bot_data_t *EntityData; 
  const char *MapName; 
  int v8; 
  unsigned __int16 v9; 
  int v10; 
  pathnode_t *v11; 
  const char *GameType; 
  __int64 v13; 
  char v14; 
  const char *v15; 
  int v16; 
  vec3_t *p_currentOrigin; 
  scr_string_t v19; 
  const char *v20; 
  const char *v22; 
  char Str[256]; 
  char Destination[256]; 

  if ( !s_botNodesTested )
  {
    v1 = 0;
    v2 = 0;
    v3 = 0;
    v4 = 0;
    do
    {
      if ( v4 >= (int)SvClient::ms_clientCount )
        break;
      if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
        __debugbreak();
      CommonClient = (const SvClientMP *)SvClient::GetCommonClient(v4);
      if ( Bot_IsClientActive(CommonClient) )
      {
        if ( SV_BotIsBot(v4) )
        {
          v1 = 1;
          EntityData = Bot_GetEntityData(&g_entities[v4]);
          if ( SV_BotRequirePathnodes(EntityData) )
            v2 = 1;
        }
      }
      ++v4;
    }
    while ( !v2 );
    if ( v1 )
    {
      if ( v2 )
      {
        MapName = SV_Game_GetMapName();
        if ( Path_NodeCount() )
        {
          if ( Path_UsePathExtraData() && Nav_HasExposureData() )
          {
            if ( Path_ZoneCount() )
            {
              v8 = 10;
              v9 = 0;
              v10 = 0;
              do
              {
                if ( v10 >= Path_NodeCount() )
                  break;
                if ( Path_NodeValid(v9) )
                {
                  v11 = Path_ConvertIndexToNode(v9);
                  if ( (v11->constant.spawnflags & 1) != 0 )
                  {
                    ++v8;
                  }
                  else if ( v11->constant.totalLinkCount )
                  {
                    break;
                  }
                }
                v10 = ++v9;
              }
              while ( v9 < v8 );
              if ( v9 == v8 || v9 == Path_NodeCount() )
                Com_Error_impl(ERR_DROP, (const ObfuscateErrorText)&unk_1440C6CA0, 272i64, MapName);
            }
            else
            {
              Com_Error_impl(ERR_DROP, (const ObfuscateErrorText)&unk_1440C6BF0, 271i64, MapName);
            }
          }
          else
          {
            Com_Error_impl(ERR_DROP, (const ObfuscateErrorText)&stru_1440C6B80, 270i64, MapName);
          }
        }
        else
        {
          Com_Error_impl(ERR_DROP, (const ObfuscateErrorText)&unk_1440C6B10, 269i64, MapName);
        }
        GameType = SV_GameMP_GetGameType();
        v13 = 0i64;
        while ( 1 )
        {
          v14 = GameType[v13++];
          if ( v14 != aWar[v13 - 1] )
            break;
          if ( v13 == 4 )
          {
            v15 = "_tdm_";
            goto LABEL_36;
          }
        }
        v15 = j_va("_%s_", GameType);
LABEL_36:
        strncpy(Destination, v15, 0xFFui64);
        v16 = 0;
        Destination[255] = 0;
        if ( level.num_entities > 0 )
        {
          __asm { vmovaps [rsp+268h+var_28], xmm6 }
          p_currentOrigin = &g_entities->r.currentOrigin;
          __asm { vmovss  xmm6, cs:__real@43960000 }
          do
          {
            v19 = LODWORD(p_currentOrigin[6].v[2]);
            if ( v19 )
            {
              v20 = SL_ConvertToString(v19);
              strncpy(Str, v20, 0xFFui64);
              Str[255] = 0;
              if ( strstr_0(Str, "mp_") == Str )
              {
                if ( strstr_0(Str, "_spawn") )
                {
                  if ( strstr_0(Str, Destination) )
                  {
                    __asm { vmovaps xmm1, xmm6; fMaxDist }
                    if ( !Path_NearestNodeByDistanceOnly(p_currentOrigin, *(float *)&_XMM1) )
                    {
                      v3 = 1;
                      v22 = vtos(p_currentOrigin);
                      Com_Printf(16, "ERROR: Spawn point outside of path grid <%s> %s\n", Str, v22);
                    }
                  }
                }
              }
            }
            ++v16;
            p_currentOrigin = (vec3_t *)((char *)p_currentOrigin + 1456);
          }
          while ( v16 < level.num_entities );
          __asm { vmovaps xmm6, [rsp+268h+var_28] }
          if ( v3 )
            Com_Error_impl(ERR_DROP, (const ObfuscateErrorText)&stru_1440C6D60, 273i64, MapName);
        }
      }
      s_botNodesTested = 1;
    }
  }
}

/*
==============
SV_BotUnregisterEntAffecter
==============
*/
__int64 SV_BotUnregisterEntAffecter(const gentity_s *ent)
{
  signed __int64 v2; 
  __int16 *v3; 
  unsigned int v4; 
  __int64 v6; 
  __int64 v7; 

  if ( !ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 26042, ASSERT_TYPE_ASSERT, "( ent )", (const char *)&queryFormat, "ent") )
    __debugbreak();
  if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 196, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
    __debugbreak();
  v2 = ent - g_entities;
  if ( (unsigned int)v2 >= 0x800 )
  {
    LODWORD(v6) = ent - g_entities;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 199, ASSERT_TYPE_ASSERT, "(unsigned)( index ) < (unsigned)( ( 2048 ) )", "index doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v6, 2048) )
      __debugbreak();
  }
  v2 = (__int16)v2;
  if ( (unsigned int)(__int16)v2 >= 0x800 )
  {
    LODWORD(v7) = 2048;
    LODWORD(v6) = v2;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 207, ASSERT_TYPE_ASSERT, "(unsigned)( entityIndex ) < (unsigned)( ( 2048 ) )", "entityIndex doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v6, v7) )
      __debugbreak();
  }
  if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 208, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
    __debugbreak();
  if ( g_entities[v2].r.isInUse != g_entityIsInUse[v2] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 209, ASSERT_TYPE_ASSERT, "( g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex] )", (const char *)&queryFormat, "g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex]") )
    __debugbreak();
  if ( !g_entityIsInUse[v2] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 26043, ASSERT_TYPE_ASSERT, "( G_IsEntityInUse( G_GetEntityIndex( ent ) ) )", (const char *)&queryFormat, "G_IsEntityInUse( G_GetEntityIndex( ent ) )") )
    __debugbreak();
  if ( ent->s.number >= 0x800u )
  {
    LODWORD(v7) = 2048;
    LODWORD(v6) = ent->s.number;
    if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 26044, ASSERT_TYPE_ASSERT, "(unsigned)( ent->s.number ) < (unsigned)( ( 2048 ) )", "ent->s.number doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", v6, v7) )
      __debugbreak();
  }
  if ( ent->s.number == 2047 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 26045, ASSERT_TYPE_ASSERT, "( ent->s.number != ENTITYNUM_NONE )", (const char *)&queryFormat, "ent->s.number != ENTITYNUM_NONE") )
    __debugbreak();
  v3 = s_botEntAffecters;
  v4 = 0;
  while ( *v3 != ent->s.number )
  {
    ++v4;
    ++v3;
    if ( v4 >= 0x40 )
      return 0i64;
  }
  s_botEntAffecters[v4] = 2047;
  return 1i64;
}

/*
==============
SV_BotUpdateBots
==============
*/
void SV_BotUpdateBots(void)
{
  int v0; 
  signed int v1; 
  signed int v2; 
  usercmd_s *v3; 
  SvClientMP *CommonClient; 
  bot_data_t *ClientData; 
  int time; 
  unsigned int *p_obstacleId; 
  __int64 v8; 
  int *p_commandTime; 
  SvClientMP *v10; 
  unsigned int MpClientIndex; 
  __int64 v12; 
  usercmd_s cmd[200]; 

  if ( !BG_BotSystemEnabled() && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3591, ASSERT_TYPE_ASSERT, "( BG_BotSystemEnabled() )", (const char *)&queryFormat, "BG_BotSystemEnabled()") )
    __debugbreak();
  if ( !SV_Loaded() && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3592, ASSERT_TYPE_ASSERT, "( SV_Loaded() )", (const char *)&queryFormat, "SV_Loaded()") )
    __debugbreak();
  if ( SvStaticGlobals::ms_svStaticGlobals.state && level.num_entities )
  {
    Profile_Begin(404);
    v0 = SvClient::ms_clientCount;
    if ( (unsigned __int64)(int)SvClient::ms_clientCount > 0xC8 )
    {
      LODWORD(v12) = SvClient::ms_clientCount;
      if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3599, ASSERT_TYPE_ASSERT, "( SvClient::GetClientCount() ) <= ( ( sizeof( *array_counter( botcmds ) ) + 0 ) )", "SvClient::GetClientCount() <= ARRAY_COUNT( botcmds )\n\t%i, %i", v12, 200) )
        __debugbreak();
      v0 = SvClient::ms_clientCount;
    }
    v1 = 0;
    v2 = 0;
    if ( v0 > 0 )
    {
      v3 = cmd;
      while ( !SV_BotIsBot(v2) )
      {
LABEL_28:
        ++v2;
        ++v3;
        if ( v2 >= (int)SvClient::ms_clientCount )
          goto LABEL_29;
      }
      if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
        __debugbreak();
      CommonClient = (SvClientMP *)SvClient::GetCommonClient(v2);
      if ( Bot_IsClientActive(CommonClient) )
      {
        Bot_Think(CommonClient, &cmd[v2]);
        Bot_CyclePathTurn(v2);
      }
      else
      {
        if ( !Bot_IsClientSpectatorState(CommonClient) )
        {
LABEL_27:
          v3->buttons |= 0x18002000000000ui64;
          goto LABEL_28;
        }
        ClientData = Bot_GetClientData(CommonClient);
        if ( !ClientData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3574, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
          __debugbreak();
        v3->buttons = 0i64;
        time = SvPersistentGlobalsMP::GetPersistentGlobalsMP()->time;
        v3->serverTime = time;
        v3->commandTime = time;
        v3->inputTime = time;
        Bot_UpdateScriptedButtons(ClientData, v3);
      }
      ++s_botActiveBotCount;
      goto LABEL_27;
    }
LABEL_29:
    p_obstacleId = &s_botDoorBlockerData[0].obstacleId;
    v8 = 32i64;
    do
    {
      if ( p_obstacleId[1] != -1 && (int)(level.time - *(p_obstacleId - 1)) > 3000 )
      {
        Nav_DestroyObstacleByID(*p_obstacleId);
        p_obstacleId[1] = -1;
        *(_QWORD *)(p_obstacleId - 1) = 0i64;
        *(p_obstacleId - 2) = -1;
      }
      p_obstacleId += 4;
      --v8;
    }
    while ( v8 );
    Profile_EndInternal(NULL);
    if ( (int)SvClient::ms_clientCount > 0 )
    {
      p_commandTime = &cmd[0].commandTime;
      do
      {
        if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
          __debugbreak();
        v10 = (SvClientMP *)SvClient::GetCommonClient(v1);
        if ( SV_BotIsBot(v1) )
        {
          if ( Bot_IsClientConnected(v10) )
            SvClientMP::SetBotCommandsAcknowledged(v10);
          if ( Bot_IsClientActive(v10) )
          {
            if ( *(p_commandTime - 1) > v10->lastUsercmd.serverTime )
              SV_ClientMP_Think(v10, &cmd[v1]);
          }
          else if ( Bot_IsClientSpectatorState(v10) )
          {
            v10->lastUsercmd.buttons = *((_QWORD *)p_commandTime - 2);
            v10->lastUsercmd.serverTime = *(p_commandTime - 1);
            v10->lastUsercmd.commandTime = *p_commandTime;
            MpClientIndex = SV_Client_GetMpClientIndex(v10);
            if ( SvClient::GetCommonClient(MpClientIndex)->state == CS_ACTIVE )
            {
              v10->gentity->client->sess.oldcmd.buttons = v10->gentity->client->sess.cmd.buttons;
              SV_Game_GetUsercmd(MpClientIndex, &v10->gentity->client->sess.cmd);
              v10->gentity->client->oldbuttons = v10->gentity->client->buttons;
              v10->gentity->client->buttons = v10->gentity->client->sess.cmd.buttons;
              v10->gentity->client->buttonsSinceLastFrame |= v10->gentity->client->buttons & ~v10->gentity->client->oldbuttons;
            }
          }
        }
        ++v1;
        p_commandTime += 66;
      }
      while ( v1 < (int)SvClient::ms_clientCount );
    }
  }
}

/*
==============
SV_BotUpdateCommon
==============
*/
void SV_BotUpdateCommon()
{
  unsigned __int8 BotsConnectType; 
  const dvar_t *v2; 
  unsigned __int8 v3; 
  unsigned __int8 v4; 
  const dvar_t *v5; 
  int v6; 
  unsigned int v10; 
  signed __int64 v13; 
  bool v15; 
  ai_common_t *ai; 
  int v32; 
  bool v37; 
  sentient_s *v38; 
  const gentity_s **p_ent; 
  __int64 v40; 
  AICommonInterface *m_pAI; 
  __int64 v43; 
  __int64 v44; 
  unsigned int v45; 
  int v46; 
  AICommonWrapper v47; 
  vec3_t vOriginOut; 
  bitarray<224> iTeamFlags; 

  Profile_Begin(403);
  if ( !SV_Loaded() && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3298, ASSERT_TYPE_ASSERT, "( SV_Loaded() )", (const char *)&queryFormat, "SV_Loaded()") )
    __debugbreak();
  if ( SvStaticGlobals::ms_svStaticGlobals.state && level.num_entities )
  {
    BotsConnectType = BG_GetBotsConnectType();
    v2 = DVARINT_bot_SystemStatus;
    v3 = BotsConnectType;
    if ( !DVARINT_bot_SystemStatus && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 699, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_SystemStatus") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v2);
    v4 = truncate_cast<unsigned char,int>(v2->current.integer);
    if ( !v3 && v4 )
      BG_GameStateInfo_InitDefaultBotConnectType();
    SV_BotUpdateDebugPathGoal();
    SV_BotTestBadPlaces();
    Bot_DrawDebugNavmeshExposure();
    Bot_DrawDebugSpecial();
    v5 = DVARBOOL_bot_DisableAllAI;
    if ( !DVARBOOL_bot_DisableAllAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\universal\\dvar.h", 692, ASSERT_TYPE_ASSERT, "(dvar)", "%s\n\tDvar %s accessed after deregistration", "dvar", "bot_DisableAllAI") )
      __debugbreak();
    Dvar_CheckFrontendServerThread(v5);
    if ( !v5->current.enabled && (s_botActiveBotCount > 0 || BG_GetBotsConnectType()) )
    {
      GStatic::SetActiveStatics();
      s_botGetPathToGoalCalled = 0;
      if ( !s_botRandomNodeCornerMaskInitialized )
        SV_BotPathsInitCornerMask();
      SV_BotTestPathdata();
      SV_BotDrawDebugNodeScores();
      v6 = 0;
      if ( Com_GameMode_SupportsFeature(WEAPON_SKYDIVE_WEAPON_DROP|0x80) )
        _RAX = Com_TeamsSP_GetAllTeamFlags();
      else
        _RAX = Com_TeamsMP_GetAllTeamFlags();
      __asm
      {
        vmovups xmm0, xmmword ptr [rax]
        vmovups xmmword ptr [rsp+148h+iTeamFlags.array], xmm0
        vmovsd  xmm1, qword ptr [rax+10h]
      }
      v10 = 0;
      __asm { vmovsd  qword ptr [rsp+148h+iTeamFlags.array+10h], xmm1 }
      iTeamFlags.array[6] = _RAX->array[6];
      v45 = 0;
      if ( level.sentients )
      {
        __asm
        {
          vmovaps [rsp+148h+var_38], xmm6
          vmovss  xmm6, cs:__real@47afc800
        }
        do
        {
          if ( v10 >= level.maxSentients )
            break;
          _RSI = &level.sentients[v10];
          if ( _RSI->inuse )
          {
            if ( !_RSI->ent )
            {
              if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3378, ASSERT_TYPE_ASSERT, "( sentient->ent )", (const char *)&queryFormat, "sentient->ent") )
                __debugbreak();
              if ( !_RSI->ent )
              {
                Com_Printf(131087, "*** Sentient found without an entity ***\n");
                Bot_PrintSentientInfo(_RSI);
                Com_LogFileFlush();
              }
            }
            if ( s_botSentientHistory )
            {
              v13 = _RSI - level.sentients;
              if ( (unsigned int)v13 >= level.maxSentients )
              {
                LODWORD(v44) = level.maxSentients;
                LODWORD(v43) = ((int)_RSI - LODWORD(level.sentients)) / 184;
                if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1947, ASSERT_TYPE_ASSERT, "(unsigned)( sentientIndex ) < (unsigned)( level.maxSentients )", "sentientIndex doesn't index level.maxSentients\n\t%i not in [0, %i)", v43, v44) )
                  __debugbreak();
              }
              Sentient_GetOrigin(_RSI, &vOriginOut);
              _RCX = s_botSentientHistory;
              v15 = __CFADD__(v13, v13) || 2 * v13 == 0;
              _RBX = v13;
              __asm
              {
                vmovss  xmm5, dword ptr [rsp+148h+vOriginOut]
                vmovss  xmm0, dword ptr [rcx+rbx*8+4]
                vmovss  xmm1, dword ptr [rcx+rbx*8+0Ch]
                vsubss  xmm4, xmm1, dword ptr [rsp+148h+vOriginOut+8]
                vsubss  xmm3, xmm0, xmm5
                vmovss  xmm0, dword ptr [rcx+rbx*8+8]
                vsubss  xmm2, xmm0, dword ptr [rsp+148h+vOriginOut+4]
                vmulss  xmm2, xmm2, xmm2
                vmulss  xmm0, xmm3, xmm3
                vaddss  xmm3, xmm2, xmm0
                vmulss  xmm1, xmm4, xmm4
                vaddss  xmm2, xmm3, xmm1
                vcomiss xmm2, xmm6
              }
              if ( !v15 )
              {
                __asm
                {
                  vmovss  dword ptr [rcx+rbx*8+4], xmm5
                  vmovss  xmm0, dword ptr [rsp+148h+vOriginOut+4]
                  vmovss  dword ptr [rcx+rbx*8+8], xmm0
                  vmovss  xmm1, dword ptr [rsp+148h+vOriginOut+8]
                  vmovss  dword ptr [rcx+rbx*8+0Ch], xmm1
                }
                _RCX[_RBX].lastTimeMovedPositions = level.time;
              }
            }
            ai = _RSI->ai;
            v32 = v6 + 1;
            if ( !ai )
              v32 = v6;
            v6 = v32;
            v46 = v32;
            if ( !ai )
            {
              _RCX = _RSI->ent;
              if ( _RSI->ent->s.eType != ET_PLAYER )
              {
                __asm
                {
                  vmovss  xmm1, dword ptr [rcx+130h]
                  vucomiss xmm1, dword ptr [rsi+24h]
                }
                if ( _RSI->ent->s.eType != ET_PLAYER )
                  goto LABEL_46;
                __asm
                {
                  vmovss  xmm0, dword ptr [rsi+28h]
                  vucomiss xmm0, dword ptr [rcx+134h]
                }
                if ( _RSI->ent->s.eType != ET_PLAYER )
                  goto LABEL_46;
                __asm
                {
                  vmovss  xmm0, dword ptr [rsi+2Ch]
                  vucomiss xmm0, dword ptr [rcx+138h]
                }
                if ( _RSI->ent->s.eType == ET_PLAYER )
                  v37 = 0;
                else
LABEL_46:
                  v37 = 1;
                __asm { vmovss  dword ptr [rsi+24h], xmm1 }
                _RSI->oldOrigin.v[1] = _RCX->r.currentOrigin.v[1];
                _RSI->oldOrigin.v[2] = _RCX->r.currentOrigin.v[2];
                Sentient_CheckAndUpdateNearestData(_RSI, v37);
              }
            }
            v38 = Sentient_FirstSentient(&iTeamFlags);
            if ( v38 )
            {
              do
              {
                if ( v38->ai && Bot_IsCharacterActive(v38->ent) && !AI_IsAlliedSentient(_RSI, v38) && (unsigned int)Bot_IsEntPositionAlwaysKnown(v38->ai, _RSI->ent) )
                {
                  p_ent = (const gentity_s **)&v38->ai->ent;
                  AIActorInterface::AIActorInterface(&v47.m_actorInterface);
                  AIAgentInterface::AIAgentInterface(&v47.m_newAgentInterface);
                  v47.m_newAgentInterface.__vftable = (AINewAgentInterface_vtbl *)&AINewAgentInterface::`vftable';
                  AICommonInterface::AICommonInterface(&v47.m_botInterface);
                  v47.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
                  AICommonInterface::AICommonInterface(&v47.m_botAgentInterface);
                  m_pAI = NULL;
                  v47.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
                  v47.m_pAI = NULL;
                  if ( p_ent )
                  {
                    AICommonWrapper::Setup(&v47, *p_ent);
                    m_pAI = v47.m_pAI;
                  }
                  if ( !m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 3408, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
                    __debugbreak();
                  LOBYTE(v40) = 26;
                  m_pAI->GetPerfectInfo(m_pAI, _RSI, v40);
                }
                v38 = Sentient_NextSentient(v38, &iTeamFlags);
              }
              while ( v38 );
              v6 = v46;
              v10 = v45;
            }
          }
          v45 = ++v10;
        }
        while ( level.sentients );
        __asm { vmovaps xmm6, [rsp+148h+var_38] }
        if ( v6 > 0 )
        {
          Bot_ZoneUpdateCounts();
          Bot_CyclePathTurn(-1);
        }
      }
      GStatic::ClearActiveStatics();
    }
  }
  Profile_EndInternal(NULL);
}

/*
==============
SV_BotUpdateDebugPathGoal
==============
*/
void SV_BotUpdateDebugPathGoal()
{
  int CurrentNumDebugGoals; 
  __int64 v9; 
  int v10; 
  signed int v11; 
  const SvClientMP *CommonClient; 
  gentity_s *gentity; 
  playerState_s *PlayerState; 
  __int64 v21; 
  __int64 v22; 
  int v23; 
  bool v25; 
  unsigned __int64 v26; 
  char v27; 
  int v28; 
  char v29; 
  int v30; 
  char v31; 
  int v32; 
  char v33; 
  bool v34; 
  __int64 v35; 
  char v37; 
  int v38; 
  int MoverThenGroundEnt; 
  __int16 v40; 
  char v55; 
  int v89; 
  __int16 v90; 
  __int64 v103; 
  unsigned int v104; 
  __int64 v105; 
  gentity_s *v106; 
  int v129; 
  __int64 v130; 
  gentity_s *v131; 
  __int16 EntityIndex; 
  unsigned int number; 
  const SvClientMP *v134; 
  BOOL IsClientConnected; 
  bitarray_base<bitarray<224> > *AllTeamFlags; 
  unsigned int v137; 
  const SvClientMP *v138; 
  bot_data_t *EntityData; 
  __int64 contentmask; 
  __int64 v144; 
  vec3_t end; 
  vec3_t vEyePosOut; 
  vec3_t resultPoint; 
  vec3_t forward; 
  tmat33_t<vec3_t> out; 
  trace_t results; 
  tmat33_t<vec3_t> axis; 

  if ( Bot_GetCurrentNumDebugGoals() <= 0 )
    return;
  CurrentNumDebugGoals = Bot_GetCurrentNumDebugGoals();
  v9 = CurrentNumDebugGoals;
  v10 = 0;
  if ( CurrentNumDebugGoals > 4 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1682, ASSERT_TYPE_ASSERT, "( currentNumPathGoals ) <= ( 4 )", "currentNumPathGoals <= BOT_MAX_DEBUG_PATH_GOALS\n\t%i, %i", CurrentNumDebugGoals, 4) )
    __debugbreak();
  v11 = 0;
  if ( (int)SvClient::ms_clientCount <= 0 )
    return;
  __asm
  {
    vmovaps [rsp+1E0h+var_30], xmm6
    vmovaps [rsp+1E0h+var_40], xmm7
    vmovaps [rsp+1E0h+var_50], xmm8
    vmovaps [rsp+1E0h+var_60], xmm9
    vmovss  xmm9, cs:__real@459c4000
    vmovaps [rsp+1E0h+var_70], xmm10
    vmovss  xmm10, cs:__real@3f800000
    vmovaps [rsp+1E0h+var_80], xmm11
    vmovss  xmm11, cs:__real@43800000
    vmovaps [rsp+1E0h+var_90], xmm12
    vmovss  xmm12, cs:__real@40000000
    vmovaps [rsp+1E0h+var_A0], xmm13
    vmovss  xmm13, cs:__real@447a0000
    vxorps  xmm7, xmm7, xmm7
  }
  do
  {
    if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
      __debugbreak();
    CommonClient = (const SvClientMP *)SvClient::GetCommonClient(v11);
    if ( !Bot_IsClientActive(CommonClient) )
      goto LABEL_62;
    if ( SV_BotIsBot(v11) )
      goto LABEL_62;
    gentity = CommonClient->gentity;
    if ( !gentity || !gentity->sentient )
      goto LABEL_62;
    PlayerState = G_MainMP_GetPlayerState(v11);
    if ( !PlayerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1694, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
      __debugbreak();
    v21 = 0i64;
    v22 = (int)v9 - 1;
    v23 = 1;
    if ( v22 >= 4 )
    {
      _RAX = &s_botDebugPathGoal[0].v[2];
      v26 = ((unsigned __int64)((int)v9 - 1 - 4i64) >> 2) + 1;
      v25 = v26 == 0;
      v21 = 4 * v26;
      do
      {
        __asm { vucomiss xmm7, dword ptr [rax-8] }
        if ( !v25 )
          goto LABEL_23;
        __asm { vucomiss xmm7, dword ptr [rax-4] }
        if ( !v25 )
          goto LABEL_23;
        __asm { vucomiss xmm7, dword ptr [rax] }
        if ( v25 )
          v27 = 0;
        else
LABEL_23:
          v27 = 1;
        v28 = 0;
        if ( v27 )
          v28 = v23;
        __asm { vucomiss xmm7, dword ptr [rax+4] }
        if ( v27 )
        {
          v29 = 1;
        }
        else
        {
          __asm
          {
            vucomiss xmm7, dword ptr [rax+8]
            vucomiss xmm7, dword ptr [rax+0Ch]
          }
          v29 = 0;
        }
        v30 = 0;
        if ( v29 )
          v30 = v28;
        __asm { vucomiss xmm7, dword ptr [rax+10h] }
        if ( v29 )
        {
          v31 = 1;
        }
        else
        {
          __asm
          {
            vucomiss xmm7, dword ptr [rax+14h]
            vucomiss xmm7, dword ptr [rax+18h]
          }
          v31 = 0;
        }
        v32 = 0;
        if ( v31 )
          v32 = v30;
        __asm { vucomiss xmm7, dword ptr [rax+1Ch] }
        if ( v31 )
        {
          v33 = 1;
        }
        else
        {
          __asm
          {
            vucomiss xmm7, dword ptr [rax+20h]
            vucomiss xmm7, dword ptr [rax+24h]
          }
          v33 = 0;
        }
        v23 = 0;
        if ( v33 )
          v23 = v32;
        _RAX += 12;
        v25 = --v26 == 0;
      }
      while ( v26 );
    }
    if ( v21 < v22 )
    {
      v35 = v22 - v21;
      v34 = v35 == 0;
      _RDX = &s_botDebugPathGoal[v21].v[2];
      do
      {
        __asm { vucomiss xmm7, dword ptr [rdx-8] }
        if ( !v34 )
          goto LABEL_48;
        __asm { vucomiss xmm7, dword ptr [rdx-4] }
        if ( !v34 )
          goto LABEL_48;
        __asm { vucomiss xmm7, dword ptr [rdx] }
        if ( v34 )
          v37 = 0;
        else
LABEL_48:
          v37 = 1;
        v38 = 0;
        if ( v37 )
          v38 = v23;
        _RDX += 3;
        v23 = v38;
        v34 = --v35 == 0;
      }
      while ( v35 );
    }
    if ( !v23 )
      break;
    if ( GameModeFlagContainer<enum PWeaponFlagsCommon,enum PWeaponFlagsSP,enum PWeaponFlagsMP,64>::TestFlagInternal(&PlayerState->weapCommon.weapFlags, ACTIVE, 0) )
    {
      MoverThenGroundEnt = BGMovingPlatformPS::GetMoverThenGroundEnt(&PlayerState->movingPlatforms, PlayerState);
      v40 = truncate_cast<short,int>(MoverThenGroundEnt);
      __asm { vmovaps xmm1, xmm11; maxDist }
      if ( Bot_GetClosestNavigablePoint(&CommonClient->gentity->r.currentOrigin, *(float *)&_XMM1, 196625, &resultPoint, v40) )
      {
        __asm
        {
          vmovss  xmm0, dword ptr [rsp+1E0h+resultPoint]
          vucomiss xmm0, xmm7
          vmovss  xmm0, dword ptr [rsp+1E0h+resultPoint]
          vmovss  xmm1, dword ptr [rsp+1E0h+resultPoint+4]
        }
        _RAX = 3 * v9;
        v10 = 1;
        _RBX = 0x140000000ui64;
        __asm
        {
          vmovss  rva s_svBotNameData.buildIndexStart[rbx+rax*4], xmm0
          vmovss  xmm0, dword ptr [rsp+1E0h+resultPoint+8]
          vmovss  rva s_BotMatchDataSettingsInit[rbx+rax*4], xmm0
          vmovss  rva s_svBotNameData.buildIndexEnd[rbx+rax*4], xmm1
        }
        LODWORD(s_botDebugPathGoal[3].v[v9 + 2]) = PlayerState->groundEntityNum;
      }
    }
    else if ( GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&PlayerState->pm_flags, ACTIVE, 9u) && !GameModeFlagContainer<enum PWeaponFlagsCommon,enum PWeaponFlagsSP,enum PWeaponFlagsMP,64>::TestFlagInternal(&PlayerState->weapCommon.weapFlags, ACTIVE, 1u) )
    {
      Sentient_GetEyePosition(CommonClient->gentity->sentient, &vEyePosOut);
      AngleVectors(&PlayerState->viewangles, &forward, NULL, NULL);
      __asm
      {
        vmulss  xmm1, xmm9, dword ptr [rsp+1E0h+forward]
        vaddss  xmm2, xmm1, dword ptr [rsp+1E0h+vEyePosOut]
        vmulss  xmm1, xmm9, dword ptr [rsp+1E0h+forward+4]
        vmovss  dword ptr [rsp+1E0h+end], xmm2
        vaddss  xmm2, xmm1, dword ptr [rsp+1E0h+vEyePosOut+4]
        vmulss  xmm1, xmm9, dword ptr [rsp+1E0h+forward+8]
        vmovss  dword ptr [rsp+1E0h+end+4], xmm2
        vaddss  xmm2, xmm1, dword ptr [rsp+1E0h+vEyePosOut+8]
        vmovss  dword ptr [rsp+1E0h+end+8], xmm2
        vmovss  [rbp+0E0h+results.fraction], xmm10
      }
      G_Main_TraceCapsule(&results, &vEyePosOut, &end, &bounds_origin, 2047, 196625);
      __asm
      {
        vmovss  xmm8, [rbp+0E0h+results.fraction]
        vcomiss xmm8, xmm10
      }
      if ( v55 )
      {
        __asm
        {
          vmovss  xmm0, dword ptr [rsp+1E0h+end]
          vsubss  xmm1, xmm0, dword ptr [rsp+1E0h+vEyePosOut]
          vmovss  xmm0, dword ptr [rsp+1E0h+end+4]
          vmulss  xmm2, xmm1, xmm8
          vaddss  xmm3, xmm2, dword ptr [rsp+1E0h+vEyePosOut]
          vmulss  xmm1, xmm12, dword ptr [rbp+0E0h+results.normal]
          vaddss  xmm6, xmm3, xmm1
          vsubss  xmm1, xmm0, dword ptr [rsp+1E0h+vEyePosOut+4]
          vmovss  xmm0, dword ptr [rsp+1E0h+end+8]
          vmulss  xmm2, xmm1, xmm8
          vaddss  xmm3, xmm2, dword ptr [rsp+1E0h+vEyePosOut+4]
          vmulss  xmm1, xmm12, dword ptr [rbp+0E0h+results.normal+4]
          vaddss  xmm5, xmm3, xmm1
          vsubss  xmm1, xmm0, dword ptr [rsp+1E0h+vEyePosOut+8]
          vmulss  xmm2, xmm1, xmm8
          vaddss  xmm3, xmm2, dword ptr [rsp+1E0h+vEyePosOut+8]
          vmulss  xmm1, xmm12, dword ptr [rbp+0E0h+results.normal+8]
          vunpcklps xmm0, xmm6, xmm5
          vaddss  xmm2, xmm3, xmm1
          vmovss  dword ptr [rsp+1E0h+end+8], xmm2
          vmovsd  qword ptr [rsp+1E0h+end], xmm0
          vmovsd  qword ptr [rsp+1E0h+vEyePosOut], xmm0
          vsubss  xmm0, xmm2, xmm13
        }
        vEyePosOut.v[2] = end.v[2];
        __asm
        {
          vmovss  dword ptr [rsp+1E0h+end+8], xmm0
          vmovss  [rbp+0E0h+results.fraction], xmm10
        }
        G_Main_TraceCapsule(&results, &vEyePosOut, &end, &bounds_origin, 2047, 196625);
        __asm
        {
          vmovss  xmm6, [rbp+0E0h+results.fraction]
          vcomiss xmm6, xmm10
        }
        if ( v55 )
        {
          __asm
          {
            vmovss  xmm0, dword ptr [rsp+1E0h+end]
            vsubss  xmm1, xmm0, dword ptr [rsp+1E0h+vEyePosOut]
            vmovss  xmm0, dword ptr [rsp+1E0h+end+4]
            vmulss  xmm2, xmm1, xmm6
            vaddss  xmm3, xmm2, dword ptr [rsp+1E0h+vEyePosOut]
            vsubss  xmm1, xmm0, dword ptr [rsp+1E0h+vEyePosOut+4]
            vmovss  xmm0, dword ptr [rsp+1E0h+end+8]
            vmulss  xmm2, xmm1, xmm6
            vsubss  xmm1, xmm0, dword ptr [rsp+1E0h+vEyePosOut+8]
            vmovss  dword ptr [rsp+1E0h+end], xmm3
            vaddss  xmm3, xmm2, dword ptr [rsp+1E0h+vEyePosOut+4]
            vmulss  xmm2, xmm1, xmm6
            vmovss  dword ptr [rsp+1E0h+end+4], xmm3
            vaddss  xmm3, xmm2, dword ptr [rsp+1E0h+vEyePosOut+8]
            vmovss  dword ptr [rsp+1E0h+end+8], xmm3
          }
          v89 = BGMovingPlatformPS::GetMoverThenGroundEnt(&PlayerState->movingPlatforms, PlayerState);
          v90 = truncate_cast<short,int>(v89);
          __asm { vmovaps xmm1, xmm11; maxDist }
          if ( Bot_GetClosestNavigablePoint(&end, *(float *)&_XMM1, 196625, &resultPoint, v90) )
          {
            __asm
            {
              vmovss  xmm0, dword ptr [rsp+1E0h+resultPoint]
              vucomiss xmm0, xmm7
              vmovss  xmm0, dword ptr [rsp+1E0h+resultPoint]
              vmovss  xmm1, dword ptr [rsp+1E0h+resultPoint+4]
            }
            _RAX = 3 * v9;
            _RBX = 0x140000000ui64;
            __asm
            {
              vmovss  rva s_svBotNameData.buildIndexStart[rbx+rax*4], xmm0
              vmovss  xmm0, dword ptr [rsp+1E0h+resultPoint+8]
              vmovss  rva s_BotMatchDataSettingsInit[rbx+rax*4], xmm0
              vmovss  rva s_svBotNameData.buildIndexEnd[rbx+rax*4], xmm1
            }
            v10 = 1;
            LODWORD(s_botDebugPathGoal[3].v[v9 + 2]) = Trace_GetEntityHitId(&results);
          }
        }
      }
    }
LABEL_62:
    ++v11;
  }
  while ( v11 < (int)SvClient::ms_clientCount );
  __asm
  {
    vmovaps xmm13, [rsp+1E0h+var_A0]
    vmovaps xmm12, [rsp+1E0h+var_90]
    vmovaps xmm11, [rsp+1E0h+var_80]
    vmovaps xmm10, [rsp+1E0h+var_70]
    vmovaps xmm9, [rsp+1E0h+var_60]
  }
  if ( v10 )
  {
    v103 = (int)v9 - 1;
    v104 = s_botDebugPathGoalGround[v103];
    if ( v104 != 2047 )
    {
      if ( v104 >= 0x800 )
      {
        LODWORD(v144) = 2048;
        LODWORD(contentmask) = s_botDebugPathGoalGround[v103];
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1771, ASSERT_TYPE_ASSERT, "(unsigned)( s_botDebugPathGoalGround[currentNumPathGoals - 1] ) < (unsigned)( ( 2048 ) )", "s_botDebugPathGoalGround[currentNumPathGoals - 1] doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", contentmask, v144) )
          __debugbreak();
      }
      v105 = s_botDebugPathGoalGround[v103];
      if ( (unsigned int)v105 >= 0x800 )
      {
        LODWORD(v144) = 2048;
        LODWORD(contentmask) = s_botDebugPathGoalGround[v103];
        if ( CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 207, ASSERT_TYPE_ASSERT, "(unsigned)( entityIndex ) < (unsigned)( ( 2048 ) )", "entityIndex doesn't index MAX_GENTITIES\n\t%i not in [0, %i)", contentmask, v144) )
          __debugbreak();
      }
      if ( !g_entities && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 208, ASSERT_TYPE_ASSERT, "( g_entities != nullptr )", (const char *)&queryFormat, "g_entities != nullptr") )
        __debugbreak();
      if ( g_entities[v105].r.isInUse != g_entityIsInUse[v105] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_public.h", 209, ASSERT_TYPE_ASSERT, "( g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex] )", (const char *)&queryFormat, "g_entities[entityIndex].r.isInUse == g_entityIsInUse[entityIndex]") )
        __debugbreak();
      if ( !g_entityIsInUse[v105] && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1772, ASSERT_TYPE_ASSERT, "( G_IsEntityInUse( s_botDebugPathGoalGround[currentNumPathGoals - 1] ) )", (const char *)&queryFormat, "G_IsEntityInUse( s_botDebugPathGoalGround[currentNumPathGoals - 1] )") )
        __debugbreak();
      v106 = &level.gentities[s_botDebugPathGoalGround[v103]];
      _RBX = &s_botDebugPathGoal[v103];
      __asm
      {
        vmovss  xmm0, dword ptr [rbx]
        vmovss  xmm1, dword ptr [rbx+4]
        vsubss  xmm6, xmm0, dword ptr [rcx+130h]
        vmovss  xmm0, dword ptr [rbx+8]
        vsubss  xmm8, xmm0, dword ptr [rcx+138h]
        vsubss  xmm7, xmm1, dword ptr [rcx+134h]
      }
      AnglesToAxis(&v106->r.currentAngles, &axis);
      MatrixInverse(&axis, &out);
      if ( &forward == _RBX && CoreAssert_Handler("c:\\workspace\\iw8\\shared\\codware\\core\\core_math.h", 470, ASSERT_TYPE_SANITY, "( &in1 != &out )", (const char *)&queryFormat, "&in1 != &out") )
        __debugbreak();
      __asm
      {
        vmulss  xmm3, xmm7, dword ptr [rbp+0E0h+out+0Ch]
        vmulss  xmm2, xmm6, dword ptr [rbp+0E0h+out]
        vmulss  xmm1, xmm8, dword ptr [rbp+0E0h+out+18h]
        vaddss  xmm4, xmm3, xmm2
        vmulss  xmm3, xmm7, dword ptr [rbp+0E0h+out+10h]
        vaddss  xmm2, xmm4, xmm1
        vmulss  xmm1, xmm8, dword ptr [rbp+0E0h+out+1Ch]
        vmovss  dword ptr [rbx], xmm2
        vmulss  xmm2, xmm6, dword ptr [rbp+0E0h+out+4]
        vaddss  xmm4, xmm3, xmm2
        vmulss  xmm3, xmm7, dword ptr [rbp+0E0h+out+14h]
        vaddss  xmm2, xmm4, xmm1
        vmulss  xmm1, xmm8, dword ptr [rbp+0E0h+out+20h]
        vmovss  dword ptr [rbx+4], xmm2
        vmulss  xmm2, xmm6, dword ptr [rbp+0E0h+out+8]
        vaddss  xmm4, xmm3, xmm2
        vaddss  xmm2, xmm4, xmm1
        vmovss  dword ptr [rbx+8], xmm2
      }
    }
    v129 = 0;
    v130 = 0i64;
    while ( 2 )
    {
      if ( !ComCharacterLimits::ms_isGameDataValid && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\qcommon\\com_character_limits.h", 123, ASSERT_TYPE_ASSERT, "(ms_isGameDataValid)", (const char *)&queryFormat, "ms_isGameDataValid") )
        __debugbreak();
      if ( v129 >= (int)ComCharacterLimits::ms_gameData.m_characterCount )
        break;
      v131 = &level.gentities[v130];
      if ( &level.gentities[v130] )
      {
        EntityIndex = G_GetEntityIndex(&level.gentities[v130]);
        if ( G_IsEntityInUse(EntityIndex) )
        {
          if ( v131->sentient )
          {
            if ( v131->client )
            {
              number = v131->s.number;
              if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
                __debugbreak();
              v134 = (const SvClientMP *)SvClient::GetCommonClient(number);
              IsClientConnected = Bot_IsClientConnected(v134);
LABEL_99:
              if ( IsClientConnected )
                goto LABEL_100;
            }
            else
            {
              if ( v131->agent )
              {
                IsClientConnected = v131->s.eType == ET_AGENT;
                goto LABEL_99;
              }
LABEL_100:
              if ( v131->s.eType != ET_INVISIBLE )
              {
                AllTeamFlags = (bitarray_base<bitarray<224> > *)Com_TeamsMP_GetAllTeamFlags();
                if ( bitarray_base<bitarray<224>>::testBit(AllTeamFlags, v131->sentient->eTeam) )
                {
                  if ( !v131->client )
                    goto LABEL_116;
                  v137 = v131->s.number;
                  if ( (_BYTE)SvClient::ms_allocatedType != HALF_HALF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_client_mp.h", 957, ASSERT_TYPE_ASSERT, "( ms_allocatedType == ALLOCATION_TYPE )", (const char *)&queryFormat, "ms_allocatedType == ALLOCATION_TYPE") )
                    __debugbreak();
                  v138 = (const SvClientMP *)SvClient::GetCommonClient(v137);
                  if ( Bot_IsClientActive(v138) )
                  {
LABEL_116:
                    if ( SV_BotIsBotEnt(v131) )
                    {
                      EntityData = Bot_GetEntityData(v131);
                      if ( !EntityData && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 1795, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
                        __debugbreak();
                      EntityData->botDebugData.debugPathGoalCurrent = 0;
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v129;
      ++v130;
      continue;
    }
  }
  __asm
  {
    vmovaps xmm7, [rsp+1E0h+var_40]
    vmovaps xmm6, [rsp+1E0h+var_30]
    vmovaps xmm8, [rsp+1E0h+var_50]
  }
}

/*
==============
SV_BotUpdateEyeInfo
==============
*/
void SV_BotUpdateEyeInfo(const gentity_s *self)
{
  playerState_s *playerState; 
  vec3_t *p_viewangles; 
  gentity_s *RemoteEyesEnt; 
  scr_string_t v6; 
  int WorldTagMatrix; 
  vec3_t *p_eyeAngles; 
  GHandler *Handler; 
  vec3_t *v13; 
  tmat43_t<vec3_t> outTagMat; 

  if ( !self && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23712, ASSERT_TYPE_ASSERT, "( self )", (const char *)&queryFormat, "self") )
    __debugbreak();
  if ( !SV_BotIsBotEnt(self) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23713, ASSERT_TYPE_ASSERT, "( SV_BotIsBotEnt( self ) )", (const char *)&queryFormat, "SV_BotIsBotEnt( self )") )
    __debugbreak();
  _RBX = Bot_GetEntityData(self);
  if ( !_RBX && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23720, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  playerState = _RBX->botInfo.playerState;
  if ( !playerState && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23725, ASSERT_TYPE_ASSERT, "( ps )", (const char *)&queryFormat, "ps") )
    __debugbreak();
  if ( _RBX->botInfo.eyeInfo.time != level.time )
  {
    Profile_Begin(273);
    _RBX->botInfo.eyeInfo.time = level.time;
    if ( Bot_HasRemoteEyes(_RBX) )
    {
      if ( (unsigned int)Bot_IsThirdPersonRemoteVehicle(_RBX) )
      {
        p_viewangles = &playerState->viewangles;
        _RBX->botInfo.eyeAngles.v[0] = p_viewangles->v[0];
        _RBX->botInfo.eyeAngles.v[1] = p_viewangles->v[1];
        _RBX->botInfo.eyeAngles.v[2] = p_viewangles->v[2];
      }
      else
      {
        RemoteEyesEnt = Bot_GetRemoteEyesEnt(_RBX);
        if ( !GConfigStrings::ms_gConfigStrings && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\game\\g_configstrings.h", 71, ASSERT_TYPE_ASSERT, "( ms_gConfigStrings )", (const char *)&queryFormat, "ms_gConfigStrings") )
          __debugbreak();
        v6 = GConfigStrings::ms_gConfigStrings->GetClientTagName(GConfigStrings::ms_gConfigStrings, playerState->remoteEyesTagname);
        WorldTagMatrix = G_Utils_DObjGetWorldTagMatrix(RemoteEyesEnt, v6, &outTagMat);
        if ( !WorldTagMatrix )
        {
          WorldTagMatrix = G_Utils_DObjGetWorldTagMatrix(RemoteEyesEnt, scr_const.tag_player, &outTagMat);
          if ( !WorldTagMatrix )
            WorldTagMatrix = G_Utils_DObjGetWorldTagMatrix(RemoteEyesEnt, scr_const.tag_origin, &outTagMat);
        }
        p_viewangles = &_RBX->botInfo.eyeAngles;
        p_eyeAngles = &_RBX->botInfo.eyeAngles;
        if ( WorldTagMatrix )
        {
          AxisToAngles((const tmat33_t<vec3_t> *)&outTagMat, p_eyeAngles);
        }
        else
        {
          p_viewangles = &RemoteEyesEnt->r.currentAngles;
          p_eyeAngles->v[0] = RemoteEyesEnt->r.currentAngles.v[0];
          _RBX->botInfo.eyeAngles.v[1] = RemoteEyesEnt->r.currentAngles.v[1];
          _RBX->botInfo.eyeAngles.v[2] = RemoteEyesEnt->r.currentAngles.v[2];
        }
      }
      AngleVectors(p_viewangles, &_RBX->botInfo.eyeInfo.dir, NULL, NULL);
      Sentient_GetRemoteEyePosition(self->sentient, &_RBX->botInfo.eyeInfo.pos);
    }
    else
    {
      G_Client_GetEyePosition(playerState, &_RBX->botInfo.eyeInfo.pos);
      Handler = GHandler::getHandler();
      BG_GetPlayerViewDirection(playerState, outTagMat.m, &outTagMat.m[1], &outTagMat.m[2], Handler, 0);
      __asm
      {
        vmovss  xmm0, dword ptr [rsp+88h+outTagMat]
        vmovss  xmm1, dword ptr [rsp+88h+outTagMat+4]
        vmovss  dword ptr [rbx+130h], xmm0
        vmovss  xmm0, dword ptr [rsp+88h+outTagMat+8]
        vmovss  dword ptr [rbx+138h], xmm0
        vmovss  dword ptr [rbx+134h], xmm1
      }
      if ( !Com_GameMode_SupportsFeature(WEAPON_MELEE) && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 23784, ASSERT_TYPE_ASSERT, "( Com_GameMode_SupportsFeature( Com_GameMode_Feature::ENTITY_GROUND_REF ) )", (const char *)&queryFormat, "Com_GameMode_SupportsFeature( Com_GameMode_Feature::ENTITY_GROUND_REF )") )
        __debugbreak();
      v13 = &_RBX->botInfo.eyeAngles;
      if ( playerState->groundRefEnt == 2047 )
      {
        v13->v[0] = playerState->viewangles.v[0];
        _RBX->botInfo.eyeAngles.v[1] = playerState->viewangles.v[1];
        _RBX->botInfo.eyeAngles.v[2] = playerState->viewangles.v[2];
      }
      else
      {
        __asm
        {
          vmovss  xmm3, dword ptr cs:__xmm@80000000800000008000000080000000
          vmovss  xmm0, dword ptr [rsp+88h+outTagMat+0Ch]
          vmovss  xmm2, dword ptr [rsp+88h+outTagMat+10h]
          vxorps  xmm1, xmm0, xmm3
          vxorps  xmm0, xmm2, xmm3
          vmovss  dword ptr [rsp+88h+outTagMat+0Ch], xmm1
          vmovss  xmm1, dword ptr [rsp+88h+outTagMat+14h]
          vxorps  xmm2, xmm1, xmm3
          vmovss  dword ptr [rsp+88h+outTagMat+14h], xmm2
          vmovss  dword ptr [rsp+88h+outTagMat+10h], xmm0
        }
        AxisToAngles((const tmat33_t<vec3_t> *)&outTagMat, v13);
      }
    }
    Profile_EndInternal(NULL);
  }
}

/*
==============
SV_BotUpdateSightThreshold
==============
*/
void SV_BotUpdateSightThreshold(const sentient_s *botSentient, const sentient_s *enemy)
{
  signed __int64 v15; 
  int v17; 
  AIBotInterface *m_pAI; 
  BOOL v30; 
  bool v31; 
  const playerState_s *EntityPlayerStateConst; 
  gentity_s *ent; 
  gentity_s *v38; 
  playerState_s *EntityPlayerState; 
  GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64> *p_pm_flags; 
  BOOL v43; 
  const SuitDef *SuitDef; 
  bool v62; 
  int CanSeeEntityPoint; 
  int CanSeeEntityPointThroughFoliage; 
  int v133; 
  bool v134; 
  int v135; 
  gentity_s *v201; 
  int resultTime[2]; 
  sentient_s *self; 
  AIBotWrapper v210; 
  vec3_t resultPos; 
  vec3_t vPoint; 
  vec3_t vEyeDir; 
  vec3_t vEyePosOut; 
  vec3_t v215; 
  vec3_t vVelOut; 
  char v226; 

  __asm { vmovaps [rsp+1A0h+var_B0], xmm13 }
  self = (sentient_s *)botSentient;
  if ( !botSentient && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16971, ASSERT_TYPE_ASSERT, "( botSentient )", (const char *)&queryFormat, "botSentient") )
    __debugbreak();
  if ( !botSentient->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16972, ASSERT_TYPE_ASSERT, "( botSentient->ent )", (const char *)&queryFormat, "botSentient->ent") )
    __debugbreak();
  if ( !enemy && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16973, ASSERT_TYPE_ASSERT, "( enemy )", (const char *)&queryFormat, "enemy") )
    __debugbreak();
  if ( !enemy->ent && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16974, ASSERT_TYPE_ASSERT, "( enemy->ent )", (const char *)&queryFormat, "enemy->ent") )
    __debugbreak();
  if ( enemy->ent->health <= 0 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 16975, ASSERT_TYPE_ASSERT, "( !Bot_EntityIsDead( enemy->ent ) )", (const char *)&queryFormat, "!Bot_EntityIsDead( enemy->ent )") )
    __debugbreak();
  _RSI = Bot_GetEntityData(botSentient->ent);
  if ( !_RSI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17019, ASSERT_TYPE_ASSERT, "( botData )", (const char *)&queryFormat, "botData") )
    __debugbreak();
  v15 = 60 * (enemy - level.sentients);
  _RDI = (__int64)&_RSI->scriptedAgentInfo + v15 + 11644;
  if ( (bot_data_t *)((char *)_RSI + v15) == (bot_data_t *)-11652i64 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17025, ASSERT_TYPE_ASSERT, "( botSentientInfo )", (const char *)&queryFormat, "botSentientInfo") )
    __debugbreak();
  *(_QWORD *)resultPos.v = Sentient_GetSentientInfo(botSentient, enemy);
  if ( !*(_QWORD *)resultPos.v && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17028, ASSERT_TYPE_ASSERT, "( pInfo )", (const char *)&queryFormat, "pInfo") )
    __debugbreak();
  AICommonInterface::AICommonInterface(&v210.m_botInterface);
  v210.m_botInterface.__vftable = (AIBotInterface_vtbl *)&AIBotInterface::`vftable';
  AICommonInterface::AICommonInterface(&v210.m_botAgentInterface);
  v17 = 0;
  v210.m_botAgentInterface.__vftable = (AIBotAgentInterface_vtbl *)&AIBotAgentInterface::`vftable';
  v210.m_pAI = NULL;
  AIBotWrapper::Setup(&v210, _RSI->botInfo.ent);
  m_pAI = v210.m_pAI;
  if ( !v210.m_pAI && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17030, ASSERT_TYPE_ASSERT, "(pAI)", (const char *)&queryFormat, "pAI") )
    __debugbreak();
  __asm { vmovss  xmm13, cs:__real@48742400 }
  if ( !Bot_SightThresholdExpiredOrNotStarted((bot_sight_threshold_t *)(_RDI + 8)) )
  {
    __asm
    {
      vmovss  xmm0, dword ptr [rdi+14h]
      vmovss  xmm1, dword ptr [rdi+18h]
      vsubss  xmm3, xmm0, dword ptr [rax+130h]
      vsubss  xmm2, xmm1, dword ptr [rax+134h]
      vmovss  xmm0, dword ptr [rdi+1Ch]
      vsubss  xmm4, xmm0, dword ptr [rax+138h]
      vmulss  xmm2, xmm2, xmm2
      vmulss  xmm1, xmm3, xmm3
      vmulss  xmm0, xmm4, xmm4
      vaddss  xmm3, xmm2, xmm1
      vaddss  xmm2, xmm3, xmm0
      vcomiss xmm2, xmm13
    }
  }
  v30 = Bot_SightThresholdExpiredOrNotStarted((bot_sight_threshold_t *)(_RDI + 8));
  v31 = !v30;
  if ( v30 )
  {
    EntityPlayerStateConst = G_GetEntityPlayerStateConst(enemy->ent);
    *(_DWORD *)(_RDI + 12) = 0;
    *(_QWORD *)(_RDI + 20) = 0i64;
    *(_DWORD *)(_RDI + 28) = 0;
    __asm { vcvttss2si r13d, dword ptr [rsi+7FCCh] }
    if ( EntityPlayerStateConst )
      BG_HasPerk(&EntityPlayerStateConst->perks, 0x2Au);
    __asm
    {
      vxorps  xmm0, xmm0, xmm0
      vcvtsi2ss xmm0, xmm0, r13d
      vmulss  xmm1, xmm0, cs:__real@40db3333
      vmovss  dword ptr [rdi+10h], xmm1
    }
    v31 = 1;
    v17 = 0;
  }
  else
  {
    __asm { vmovss  xmm1, dword ptr [rdi+10h] }
  }
  __asm { vcomiss xmm1, dword ptr [rdi+0Ch] }
  if ( v31 )
  {
    *(_DWORD *)(_RDI + 8) = level.time;
    ent = enemy->ent;
    *(float *)(_RDI + 20) = enemy->ent->r.currentOrigin.v[0];
    *(float *)(_RDI + 24) = ent->r.currentOrigin.v[1];
    *(float *)(_RDI + 28) = ent->r.currentOrigin.v[2];
    goto LABEL_85;
  }
  v38 = enemy->ent;
  __asm
  {
    vmovaps [rsp+1A0h+var_40], xmm6
    vmovss  xmm6, cs:__real@42200000
    vmovaps [rsp+1A0h+var_50], xmm7
    vmovss  xmm7, cs:__real@41300000
    vmovaps [rsp+1A0h+var_90], xmm11
    vmovaps [rsp+1A0h+var_A0], xmm12
  }
  EntityPlayerState = G_GetEntityPlayerState(v38);
  *(_QWORD *)resultTime = EntityPlayerState;
  if ( EntityPlayerState )
  {
    p_pm_flags = &EntityPlayerState->pm_flags;
    if ( GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(&EntityPlayerState->pm_flags, ACTIVE, 0) || Bot_EntIsInLastStand(enemy->ent) )
    {
      v43 = 0;
    }
    else
    {
      v43 = !GameModeFlagContainer<enum PMoveFlagsCommon,enum PMoveFlagsSP,enum PMoveFlagsMP,64>::TestFlagInternal(p_pm_flags, ACTIVE, 1u);
      v17 = 1;
    }
    SuitDef = BG_GetSuitDef(*(_DWORD *)(*(_QWORD *)resultTime + 884i64));
    if ( SuitDef )
    {
      __asm
      {
        vxorps  xmm6, xmm6, xmm6
        vcvtsi2ss xmm6, xmm6, dword ptr [rax+204h]
      }
      BG_Suit_GetProneViewHeight(SuitDef);
      __asm
      {
        vxorps  xmm7, xmm7, xmm7
        vcvtsi2ss xmm7, xmm7, eax
      }
    }
  }
  else
  {
    v43 = 0;
    if ( enemy->ent->s.eType == ET_TURRET )
      v17 = 1;
  }
  Sentient_GetHeadPosition(enemy, &vEyePosOut);
  _EAX = AICommonInterface::CanSeeEntityPointThroughFoliage(m_pAI, &vEyePosOut, enemy->ent);
  __asm { vmovss  xmm2, cs:__real@3e666666 }
  _ECX = 0;
  __asm
  {
    vmovd   xmm1, ecx
    vmovd   xmm0, eax
    vpcmpeqd xmm3, xmm0, xmm1
    vmovss  xmm1, cs:__real@3f666666
    vblendvps xmm0, xmm1, xmm2, xmm3
    vmovss  [rsp+1A0h+resultTime], xmm0
  }
  if ( v43 )
  {
    _R8 = enemy->ent;
    __asm
    {
      vmovss  xmm0, dword ptr [r8+130h]
      vmovss  dword ptr [rbp+0A0h+vPoint], xmm0
      vmovss  xmm1, dword ptr [r8+134h]
      vmovss  dword ptr [rbp+0A0h+vPoint+4], xmm1
      vaddss  xmm0, xmm6, dword ptr [r8+138h]
      vmovss  dword ptr [rbp+0A0h+vPoint+8], xmm0
    }
    if ( !AICommonInterface::CanSeeEntityPoint(m_pAI, &vPoint, _R8) )
    {
      __asm { vmovss  xmm6, [rsp+1A0h+resultTime] }
      goto LABEL_53;
    }
    __asm { vmovss  xmm0, [rsp+1A0h+resultTime] }
    if ( !AICommonInterface::CanSeeEntityPointThroughFoliage(m_pAI, &vPoint, enemy->ent) )
    {
      __asm { vaddss  xmm6, xmm0, cs:__real@3e8ccccd }
      goto LABEL_53;
    }
  }
  else
  {
    __asm { vmovss  xmm0, [rsp+1A0h+resultTime] }
  }
  __asm { vaddss  xmm6, xmm0, cs:__real@3f8ccccd }
LABEL_53:
  __asm { vmovss  xmm11, cs:__real@3f800000 }
  v62 = v17 == 0;
  if ( !v17 )
    goto LABEL_57;
  _R8 = enemy->ent;
  __asm
  {
    vmovss  xmm0, dword ptr [r8+130h]
    vmovss  dword ptr [rbp+0A0h+vPoint], xmm0
    vmovss  xmm1, dword ptr [r8+134h]
    vmovss  dword ptr [rbp+0A0h+vPoint+4], xmm1
    vaddss  xmm0, xmm7, dword ptr [r8+138h]
    vmovss  dword ptr [rbp+0A0h+vPoint+8], xmm0
  }
  CanSeeEntityPoint = AICommonInterface::CanSeeEntityPoint(m_pAI, &vPoint, _R8);
  v62 = CanSeeEntityPoint == 0;
  if ( CanSeeEntityPoint )
  {
    CanSeeEntityPointThroughFoliage = AICommonInterface::CanSeeEntityPointThroughFoliage(m_pAI, &vPoint, enemy->ent);
    v62 = CanSeeEntityPointThroughFoliage == 0;
    if ( !CanSeeEntityPointThroughFoliage )
    {
      __asm { vaddss  xmm6, xmm6, cs:__real@3e800000 }
      goto LABEL_58;
    }
LABEL_57:
    __asm { vaddss  xmm6, xmm6, xmm11 }
  }
LABEL_58:
  __asm
  {
    vxorps  xmm12, xmm12, xmm12
    vcomiss xmm6, xmm12
  }
  if ( !v62 )
  {
    __asm
    {
      vmovaps [rsp+1A0h+var_60], xmm8
      vmovaps [rsp+1A0h+var_70], xmm9
      vmovaps [rsp+1A0h+var_80], xmm10
      vmovaps [rsp+1A0h+var_C0], xmm15
    }
    Sentient_GetVelocity(enemy, &vVelOut);
    __asm
    {
      vmovss  xmm0, dword ptr [rbp+0A0h+vVelOut]
      vmovss  xmm1, dword ptr [rbp+0A0h+vVelOut+4]
      vmovss  xmm15, cs:__real@41200000
      vmulss  xmm3, xmm0, xmm0
      vmovss  xmm0, dword ptr [rbp+0A0h+vVelOut+8]
      vmulss  xmm2, xmm1, xmm1
      vmulss  xmm1, xmm0, xmm0
      vaddss  xmm4, xmm3, xmm2
      vaddss  xmm3, xmm6, cs:__real@3f59999a
      vaddss  xmm2, xmm4, xmm1
      vcmpltss xmm0, xmm15, xmm2
      vblendvps xmm0, xmm6, xmm3, xmm0
      vmovss  [rsp+1A0h+resultTime], xmm0
    }
    Sentient_GetEyePosition(self, &v215);
    __asm
    {
      vmovss  xmm0, dword ptr [rbp+0A0h+vEyePosOut]
      vsubss  xmm6, xmm0, dword ptr [rbp+0A0h+var_E8]
      vmovss  xmm1, dword ptr [rbp+0A0h+vEyePosOut+4]
      vsubss  xmm5, xmm1, dword ptr [rbp+0A0h+var_E8+4]
      vmovss  xmm0, dword ptr [rbp+0A0h+vEyePosOut+8]
      vsubss  xmm4, xmm0, dword ptr [rbp+0A0h+var_E8+8]
      vmulss  xmm2, xmm5, xmm5
      vmulss  xmm1, xmm6, xmm6
      vaddss  xmm3, xmm2, xmm1
      vmulss  xmm0, xmm4, xmm4
      vaddss  xmm2, xmm3, xmm0
      vsqrtss xmm1, xmm2, xmm2
      vcmpless xmm0, xmm1, cs:__real@80000000
      vblendvps xmm0, xmm1, xmm11, xmm0
      vdivss  xmm1, xmm11, xmm0
      vmulss  xmm8, xmm6, xmm1
      vmulss  xmm9, xmm5, xmm1
      vmulss  xmm10, xmm4, xmm1
    }
    AICommonInterface::GetEyeDirection(m_pAI, &vEyeDir);
    __asm
    {
      vmovss  xmm5, dword ptr [rbp+0A0h+vEyeDir]
      vmovss  xmm6, dword ptr [rbp+0A0h+vEyeDir+4]
      vmovss  xmm4, dword ptr [rbp+0A0h+vEyeDir+8]
      vmulss  xmm1, xmm5, xmm5
      vmulss  xmm0, xmm6, xmm6
      vaddss  xmm2, xmm1, xmm0
      vmulss  xmm1, xmm4, xmm4
      vaddss  xmm0, xmm2, xmm1
      vsqrtss xmm3, xmm0, xmm0
      vcmpless xmm0, xmm3, cs:__real@80000000
      vblendvps xmm0, xmm3, xmm11, xmm0
      vdivss  xmm2, xmm11, xmm0
      vmulss  xmm0, xmm5, xmm2
      vmovss  dword ptr [rbp+0A0h+vEyeDir], xmm0
      vmulss  xmm0, xmm4, xmm2
      vmulss  xmm1, xmm6, xmm2
      vmovss  dword ptr [rbp+0A0h+vEyeDir+8], xmm0
      vmovss  dword ptr [rbp+0A0h+vEyeDir+4], xmm1
    }
    *(double *)&_XMM0 = Bot_GetMaxFov(_RSI);
    __asm
    {
      vmulss  xmm1, xmm0, cs:__real@3e800000
      vmulss  xmm0, xmm1, cs:__real@3c0efa35; X
    }
    *(float *)&_XMM0 = cosf_0(*(float *)&_XMM0);
    __asm { vmovaps xmm7, xmm0 }
    *(double *)&_XMM0 = SV_BotFovDot(&_RSI->botInfo, enemy->ent);
    __asm
    {
      vucomiss xmm7, xmm0
      vmulss  xmm4, xmm8, dword ptr [rbp+0A0h+vEyeDir]
      vmulss  xmm3, xmm9, dword ptr [rbp+0A0h+vEyeDir+4]
      vmulss  xmm2, xmm10, dword ptr [rbp+0A0h+vEyeDir+8]
      vmovaps xmm10, [rsp+1A0h+var_80]
      vmovaps xmm9, [rsp+1A0h+var_70]
      vaddss  xmm5, xmm4, xmm3
      vaddss  xmm8, xmm5, xmm2
      vmovaps xmm6, xmm0
    }
    if ( v31 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 17182, ASSERT_TYPE_ASSERT, "( fovDotFullSightRange != botMaxSightFov )", (const char *)&queryFormat, "fovDotFullSightRange != botMaxSightFov", *(_QWORD *)resultTime) )
      __debugbreak();
    __asm
    {
      vsubss  xmm1, xmm8, xmm6
      vsubss  xmm0, xmm7, xmm6
      vdivss  xmm0, xmm1, xmm0; val
      vxorps  xmm1, xmm1, xmm1; min
      vmovaps xmm2, xmm11; max
    }
    *(double *)&_XMM0 = I_fclamp(*(float *)&_XMM0, *(float *)&_XMM1, *(float *)&_XMM2);
    __asm
    {
      vaddss  xmm7, xmm0, [rsp+1A0h+resultTime]
      vmovaps xmm8, [rsp+1A0h+var_60]
    }
    v133 = *(_DWORD *)(*(_QWORD *)resultPos.v + 16i64);
    v134 = v133 == 0;
    if ( v133 )
    {
      v135 = level.time - v133;
      v134 = (unsigned int)(level.time - v133) <= 0xFA0;
      if ( level.time - v133 < 4000 )
      {
        v134 = (unsigned int)v135 <= 0x3E8;
        if ( v135 >= 1000 )
          __asm { vaddss  xmm7, xmm7, cs:__real@40a00000 }
        else
          __asm { vaddss  xmm7, xmm7, xmm15 }
      }
    }
    __asm
    {
      vmovss  xmm0, dword ptr [rbp+0A0h+var_E8]
      vsubss  xmm4, xmm0, dword ptr [rbp+0A0h+vEyePosOut]
      vmovss  xmm1, dword ptr [rbp+0A0h+var_E8+4]
      vsubss  xmm2, xmm1, dword ptr [rbp+0A0h+vEyePosOut+4]
      vmovss  xmm0, dword ptr [rbp+0A0h+var_E8+8]
      vsubss  xmm5, xmm0, dword ptr [rbp+0A0h+vEyePosOut+8]
      vmulss  xmm3, xmm2, xmm2
      vmulss  xmm2, xmm4, xmm4
      vaddss  xmm4, xmm3, xmm2
      vmulss  xmm0, xmm5, xmm5
      vaddss  xmm3, xmm4, xmm0
      vsqrtss xmm1, xmm3, xmm3
      vcomiss xmm1, xmm12
    }
    if ( !v134 )
    {
      __asm
      {
        vmulss  xmm0, xmm1, cs:__real@3ada740e
        vmovss  xmm6, cs:__real@40000000
        vsubss  xmm0, xmm6, xmm0; val
        vmovaps xmm2, xmm6; max
        vxorps  xmm1, xmm1, xmm1; min
      }
      *(double *)&_XMM0 = I_fclamp(*(float *)&_XMM0, *(float *)&_XMM1, *(float *)&_XMM2);
      __asm
      {
        vmulss  xmm1, xmm0, xmm6
        vaddss  xmm7, xmm7, xmm1
      }
    }
    _ER13 = 0;
    _ER15 = 0;
    if ( Bot_MemoryGetMostRecentPosition(_RSI, 2, 1, &resultPos, NULL) )
    {
      __asm
      {
        vmovss  xmm0, dword ptr [rsp+1A0h+resultPos]
        vmovss  xmm1, dword ptr [rsp+1A0h+resultPos+4]
        vsubss  xmm3, xmm0, dword ptr [rax+130h]
        vsubss  xmm2, xmm1, dword ptr [rax+134h]
        vmovss  xmm0, dword ptr [rbp+0A0h+resultPos+8]
        vsubss  xmm4, xmm0, dword ptr [rax+138h]
        vmulss  xmm2, xmm2, xmm2
        vmulss  xmm1, xmm3, xmm3
        vmulss  xmm0, xmm4, xmm4
        vaddss  xmm3, xmm2, xmm1
        vaddss  xmm2, xmm3, xmm0
        vcomiss xmm2, xmm13
      }
    }
    resultTime[0] = 0;
    if ( Bot_MemoryGetMostRecentPosition(_RSI, 4, 1, &resultPos, resultTime) )
    {
      if ( level.time < resultTime[0] + 15000 )
      {
        __asm
        {
          vmovss  xmm0, dword ptr [rsp+1A0h+resultPos]
          vmovss  xmm1, dword ptr [rsp+1A0h+resultPos+4]
          vsubss  xmm3, xmm0, dword ptr [rax+130h]
          vsubss  xmm2, xmm1, dword ptr [rax+134h]
          vmovss  xmm0, dword ptr [rbp+0A0h+resultPos+8]
          vsubss  xmm4, xmm0, dword ptr [rax+138h]
          vmulss  xmm2, xmm2, xmm2
          vmulss  xmm1, xmm3, xmm3
          vmulss  xmm0, xmm4, xmm4
          vaddss  xmm3, xmm2, xmm1
          vaddss  xmm4, xmm3, xmm0
          vcomiss xmm4, xmm13
        }
        if ( level.time < (unsigned int)(resultTime[0] + 15000) )
          _ER15 = 1;
      }
    }
    __asm
    {
      vaddss  xmm3, xmm7, xmm15
      vmovaps xmm15, [rsp+1A0h+var_C0]
      vmovd   xmm1, r13d
      vmovd   xmm0, r15d
      vpcmpeqd xmm2, xmm0, xmm1
      vblendvps xmm5, xmm3, xmm7, xmm2
      vmovss  [rsp+1A0h+resultTime], xmm5
      vmovaps xmm6, xmm5
    }
    if ( _RSI->botInfo.currentAISearch.currentNodeCount )
    {
      __asm
      {
        vmovss  xmm0, dword ptr [rsi+6EE0h]
        vmovss  xmm1, dword ptr [rsi+6EE4h]
        vsubss  xmm2, xmm1, dword ptr [rax+134h]
        vsubss  xmm4, xmm0, dword ptr [rax+130h]
        vmovss  xmm0, dword ptr [rsi+6EE8h]
        vsubss  xmm3, xmm0, dword ptr [rax+138h]
        vmulss  xmm1, xmm2, xmm2
        vmulss  xmm0, xmm4, xmm4
        vaddss  xmm2, xmm1, xmm0
        vmulss  xmm1, xmm3, xmm3
        vaddss  xmm2, xmm2, xmm1
        vcomiss xmm2, xmm13
      }
    }
    if ( (LOBYTE(_RSI->scriptedAgentInfo.blackboard.m_ShootParams.m_Pos.v[0]) & 0x10) != 0 )
      __asm { vsubss  xmm6, xmm6, dword ptr [rsi+7FD0h] }
    if ( Bot_GetSensesObstructed(_RSI, (float *)resultTime, NULL) )
    {
      __asm
      {
        vmovss  xmm0, [rsp+1A0h+resultTime]
        vmulss  xmm1, xmm0, cs:__real@c1200000
        vaddss  xmm6, xmm6, xmm1
      }
    }
    if ( Bot_IsCamping(_RSI) )
      __asm { vmulss  xmm6, xmm6, cs:__real@3fc00000 }
    __asm { vmulss  xmm6, xmm6, dword ptr [rsi+23E4h] }
    *(double *)&_XMM0 = ((double (__fastcall *)(AIBotInterface *))m_pAI->GetThreatUpdateInterval)(m_pAI);
    __asm
    {
      vxorps  xmm0, xmm0, xmm0
      vcvtsi2ss xmm0, xmm0, eax
      vmulss  xmm1, xmm0, xmm6
      vaddss  xmm1, xmm1, dword ptr [rdi+0Ch]
      vmovss  dword ptr [rdi+0Ch], xmm1
    }
    v201 = enemy->ent;
    *(float *)(_RDI + 20) = enemy->ent->r.currentOrigin.v[0];
    *(float *)(_RDI + 24) = v201->r.currentOrigin.v[1];
    *(float *)(_RDI + 28) = v201->r.currentOrigin.v[2];
    *(_DWORD *)(_RDI + 8) = level.time;
  }
  __asm
  {
    vmovaps xmm11, [rsp+1A0h+var_90]
    vmovaps xmm7, [rsp+1A0h+var_50]
    vmovaps xmm6, [rsp+1A0h+var_40]
    vmovaps xmm12, [rsp+1A0h+var_A0]
  }
LABEL_85:
  _R11 = &v226;
  __asm { vmovaps xmm13, xmmword ptr [r11-80h] }
}

/*
==============
SV_BotZoneGetIndoorPercent
==============
*/
float SV_BotZoneGetIndoorPercent(int zone)
{
  __int64 v1; 

  v1 = zone;
  if ( zone >= s_botZoneDataCount && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25596, ASSERT_TYPE_ASSERT, "(unsigned)( zone ) < (unsigned)( s_botZoneDataCount )", "zone doesn't index s_botZoneDataCount\n\t%i not in [0, %i)", zone, s_botZoneDataCount) )
    __debugbreak();
  if ( (_DWORD)v1 == 255 && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\server_mp\\sv_bot_mp.cpp", 25597, ASSERT_TYPE_ASSERT, "( zone != 255 )", (const char *)&queryFormat, "zone != PATH_INVALID_ZONE") )
    __debugbreak();
  _RAX = s_botZoneData;
  _RCX = 52 * v1;
  __asm { vmovss  xmm0, dword ptr [rcx+rax+4] }
  return *(float *)&_XMM0;
}

/*
==============
SV_Bot_GetNavigator
==============
*/
AINavigator *SV_Bot_GetNavigator(const gentity_s *pEnt)
{
  bot_data_t *EntityData; 

  EntityData = Bot_GetEntityData(pEnt);
  if ( !EntityData || EntityData->bIsScriptedAgent )
    return 0i64;
  else
    return EntityData->botInfo.pNavigator;
}

