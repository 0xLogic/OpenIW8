/*
==============
AllocPostload_ScriptableDef
==============
*/

ScriptableDef *__fastcall AllocPostload_ScriptableDef()
{
  return ?AllocPostload_ScriptableDef@@YAPEAUScriptableDef@@XZ();
}

/*
==============
Load_ScriptableEventScreenshakeDefArray
==============
*/

void __fastcall Load_ScriptableEventScreenshakeDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventScreenshakeDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ScriptableEventTeamSelectorDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventTeamSelectorDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventTeamSelectorDef@@YAXXZ();
}

/*
==============
Load_Scriptable_EventSun_DataArray
==============
*/

void __fastcall Load_Scriptable_EventSun_DataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_Scriptable_EventSun_DataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ScriptableEventPartDamageDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventPartDamageDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventPartDamageDef@@YAXXZ();
}

/*
==============
Load_ProcessStructLayout_ScriptableEventAnonymousDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventAnonymousDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventAnonymousDef@@YAXXZ();
}

/*
==============
Mark_ScriptableEventApplyConstantForceDef
==============
*/

int __fastcall Mark_ScriptableEventApplyConstantForceDef()
{
  return ?Mark_ScriptableEventApplyConstantForceDef@@YAHXZ();
}

/*
==============
Preload_ScriptablePartDefStream
==============
*/

void __fastcall Preload_ScriptablePartDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptablePartDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_Scriptable_MaterialOverrideTypeArray
==============
*/

void __fastcall Load_Scriptable_MaterialOverrideTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_Scriptable_MaterialOverrideTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_Scriptable_EventTypeArray
==============
*/

void __fastcall Postload_Scriptable_EventTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_Scriptable_EventTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableEventSetMayhemDef
==============
*/

int __fastcall Mark_ScriptableEventSetMayhemDef()
{
  return ?Mark_ScriptableEventSetMayhemDef@@YAHXZ();
}

/*
==============
Postload_ScriptableStateScriptedDefArray
==============
*/

void __fastcall Postload_ScriptableStateScriptedDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableStateScriptedDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventClientViewSelectorDef
==============
*/

void __fastcall Postload_ScriptableEventClientViewSelectorDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventClientViewSelectorDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ScriptableEventSoundDef
==============
*/

int __fastcall Mark_ScriptableEventSoundDef()
{
  return ?Mark_ScriptableEventSoundDef@@YAHXZ();
}

/*
==============
Preload_ScriptableEventApplyForceDef
==============
*/

void __fastcall Preload_ScriptableEventApplyForceDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventApplyForceDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ScriptableEventHideShowBoneDefStream
==============
*/

void __fastcall Load_ScriptableEventHideShowBoneDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventHideShowBoneDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventObjectiveDefArray
==============
*/

void __fastcall Preload_ScriptableEventObjectiveDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventObjectiveDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventSoundDefStream
==============
*/

void __fastcall Preload_ScriptableEventSoundDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventSoundDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventPlayMayhemDefStream
==============
*/

void __fastcall Load_ScriptableEventPlayMayhemDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventPlayMayhemDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventVehicleBlowUpTireDefArray
==============
*/

void __fastcall Load_ScriptableEventVehicleBlowUpTireDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventVehicleBlowUpTireDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ScriptableNoteTrackDef
==============
*/

ScriptableNoteTrackDef *__fastcall AllocPostload_ScriptableNoteTrackDef()
{
  return ?AllocPostload_ScriptableNoteTrackDef@@YAPEAUScriptableNoteTrackDef@@XZ();
}

/*
==============
AllocPostload_ScriptableEventDefUnion
==============
*/

ScriptableEventDefUnion *__fastcall AllocPostload_ScriptableEventDefUnion()
{
  return ?AllocPostload_ScriptableEventDefUnion@@YAPEATScriptableEventDefUnion@@XZ();
}

/*
==============
AllocLoad_ScriptableEventBaseDef
==============
*/

ScriptableEventBaseDef *__fastcall AllocLoad_ScriptableEventBaseDef()
{
  return ?AllocLoad_ScriptableEventBaseDef@@YAPEAUScriptableEventBaseDef@@XZ();
}

/*
==============
Load_ScriptableEventMoveDefArray
==============
*/

void __fastcall Load_ScriptableEventMoveDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventMoveDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableMapEntsStream
==============
*/

void __fastcall Preload_ScriptableMapEntsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableMapEntsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventApplyConstantForceDefStream
==============
*/

void __fastcall Preload_ScriptableEventApplyConstantForceDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventApplyConstantForceDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ScriptableEventCompassIconDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventCompassIconDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventCompassIconDef@@YAXXZ();
}

/*
==============
Postload_ScriptableNoteTrackDef
==============
*/

void __fastcall Postload_ScriptableNoteTrackDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableNoteTrackDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ScriptableEventSoundDefArray
==============
*/

int __fastcall Mark_ScriptableEventSoundDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventSoundDefArray@@YAH_K@Z(count);
}

/*
==============
Load_ScriptableStateSimpleDefArray
==============
*/

void __fastcall Load_ScriptableStateSimpleDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableStateSimpleDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ScriptableEventRandomDef
==============
*/

ScriptableEventRandomDef *__fastcall AllocPostload_ScriptableEventRandomDef()
{
  return ?AllocPostload_ScriptableEventRandomDef@@YAPEAUScriptableEventRandomDef@@XZ();
}

/*
==============
Load_ScriptablePhysicsLimits
==============
*/

void __fastcall Load_ScriptablePhysicsLimits(const DBStreamStart streamStart)
{
  ?Load_ScriptablePhysicsLimits@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ScriptableEventNoteTrackDefArray
==============
*/

void __fastcall Load_ScriptableEventNoteTrackDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventNoteTrackDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_Scriptable_StateTypeArray
==============
*/

void __fastcall Preload_Scriptable_StateTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_Scriptable_StateTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_Scriptable_AttackersStream
==============
*/

void __fastcall Preload_Scriptable_AttackersStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_Scriptable_AttackersStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_Scriptable_DamageCauseArray
==============
*/

void __fastcall Postload_Scriptable_DamageCauseArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_Scriptable_DamageCauseArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ScriptableEventSunDef
==============
*/

ScriptableEventSunDef *__fastcall AllocLoad_ScriptableEventSunDef()
{
  return ?AllocLoad_ScriptableEventSunDef@@YAPEAUScriptableEventSunDef@@XZ();
}

/*
==============
Preload_ScriptableStateDefUnionArray
==============
*/

void __fastcall Preload_ScriptableStateDefUnionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableStateDefUnionArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventViewmodelShaderParamDefArray
==============
*/

void __fastcall Load_ScriptableEventViewmodelShaderParamDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventViewmodelShaderParamDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ScriptableEventBaseDef
==============
*/

ScriptableEventBaseDef *__fastcall AllocPreload_ScriptableEventBaseDef()
{
  return ?AllocPreload_ScriptableEventBaseDef@@YAPEAUScriptableEventBaseDef@@XZ();
}

/*
==============
Postload_ScriptableStateDefUnionStream
==============
*/

void __fastcall Postload_ScriptableStateDefUnionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableStateDefUnionStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ScriptableEventApplyAngularForceDef
==============
*/

ScriptableEventApplyAngularForceDef *__fastcall AllocPreload_ScriptableEventApplyAngularForceDef()
{
  return ?AllocPreload_ScriptableEventApplyAngularForceDef@@YAPEAUScriptableEventApplyAngularForceDef@@XZ();
}

/*
==============
AllocPostload_ScriptableDamageTagOverride
==============
*/

ScriptableDamageTagOverride *__fastcall AllocPostload_ScriptableDamageTagOverride()
{
  return ?AllocPostload_ScriptableDamageTagOverride@@YAPEAUScriptableDamageTagOverride@@XZ();
}

/*
==============
Load_ScriptableDamageTagOverrideStream
==============
*/

void __fastcall Load_ScriptableDamageTagOverrideStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableDamageTagOverrideStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ScriptableEventScreenshakeDef
==============
*/

ScriptableEventScreenshakeDef *__fastcall AllocPreload_ScriptableEventScreenshakeDef()
{
  return ?AllocPreload_ScriptableEventScreenshakeDef@@YAPEAUScriptableEventScreenshakeDef@@XZ();
}

/*
==============
AllocPostload_ScriptableDataType
==============
*/

ScriptableDataType *__fastcall AllocPostload_ScriptableDataType()
{
  return ?AllocPostload_ScriptableDataType@@YAPEAW4ScriptableDataType@@XZ();
}

/*
==============
AllocPreload_ScriptableEventScriptDamageDef
==============
*/

ScriptableEventScriptDamageDef *__fastcall AllocPreload_ScriptableEventScriptDamageDef()
{
  return ?AllocPreload_ScriptableEventScriptDamageDef@@YAPEAUScriptableEventScriptDamageDef@@XZ();
}

/*
==============
AllocLoad_ScriptablePartDef
==============
*/

ScriptablePartDef *__fastcall AllocLoad_ScriptablePartDef()
{
  return ?AllocLoad_ScriptablePartDef@@YAPEAUScriptablePartDef@@XZ();
}

/*
==============
Preload_ScriptableInstance
==============
*/

void __fastcall Preload_ScriptableInstance(const DBStreamStart streamStart)
{
  ?Preload_ScriptableInstance@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ScriptableReservedDynents
==============
*/

int __fastcall Mark_ScriptableReservedDynents()
{
  return ?Mark_ScriptableReservedDynents@@YAHXZ();
}

/*
==============
Preload_ScriptableEventSoundDef
==============
*/

void __fastcall Preload_ScriptableEventSoundDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventSoundDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ScriptableDef
==============
*/

void __fastcall Load_ScriptableDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_ScriptableEventViewmodelShaderParamDef
==============
*/

ScriptableEventViewmodelShaderParamDef *__fastcall AllocPostload_ScriptableEventViewmodelShaderParamDef()
{
  return ?AllocPostload_ScriptableEventViewmodelShaderParamDef@@YAPEAUScriptableEventViewmodelShaderParamDef@@XZ();
}

/*
==============
Mark_ScriptableEventSpatialDisableDef
==============
*/

int __fastcall Mark_ScriptableEventSpatialDisableDef()
{
  return ?Mark_ScriptableEventSpatialDisableDef@@YAHXZ();
}

/*
==============
Preload_ScriptableEventApplyAngularForceDefArray
==============
*/

void __fastcall Preload_ScriptableEventApplyAngularForceDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventApplyAngularForceDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventHoverDefStream
==============
*/

void __fastcall Load_ScriptableEventHoverDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventHoverDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptablePartReferenceStream
==============
*/

void __fastcall Postload_ScriptablePartReferenceStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptablePartReferenceStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_Scriptable_StateType
==============
*/

Scriptable_StateType *__fastcall AllocPreload_Scriptable_StateType()
{
  return ?AllocPreload_Scriptable_StateType@@YAPEAW4Scriptable_StateType@@XZ();
}

/*
==============
Load_ProcessStructLayout_Scriptable_MaterialOverrideType
==============
*/

void Load_ProcessStructLayout_Scriptable_MaterialOverrideType(void)
{
  ?Load_ProcessStructLayout_Scriptable_MaterialOverrideType@@YAXXZ();
}

/*
==============
Preload_ScriptableEventSpatialDisableDefStream
==============
*/

void __fastcall Preload_ScriptableEventSpatialDisableDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventSpatialDisableDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableEventApplyForceDefArray
==============
*/

int __fastcall Mark_ScriptableEventApplyForceDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventApplyForceDefArray@@YAH_K@Z(count);
}

/*
==============
Postload_Scriptable_TeamFilter
==============
*/

void __fastcall Postload_Scriptable_TeamFilter(const DBStreamStart streamStart)
{
  ?Postload_Scriptable_TeamFilter@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ScriptableEventViewmodelShaderParamDefStream
==============
*/

void __fastcall Load_ScriptableEventViewmodelShaderParamDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventViewmodelShaderParamDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventApplyConstantAngularForceDef
==============
*/

void __fastcall Preload_ScriptableEventApplyConstantAngularForceDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventApplyConstantAngularForceDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ScriptableEventStateChangeDefArray
==============
*/

void __fastcall Preload_ScriptableEventStateChangeDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventStateChangeDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventVehicleBlowUpTireDefArray
==============
*/

void __fastcall Postload_ScriptableEventVehicleBlowUpTireDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventVehicleBlowUpTireDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptablePartDefStream
==============
*/

void __fastcall Load_ScriptablePartDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptablePartDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventDefStream
==============
*/

void __fastcall Postload_ScriptableEventDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventLightDefArray
==============
*/

void __fastcall Load_ScriptableEventLightDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventLightDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ScriptableStateHealthDef
==============
*/

ScriptableStateHealthDef *__fastcall AllocPostload_ScriptableStateHealthDef()
{
  return ?AllocPostload_ScriptableStateHealthDef@@YAPEAUScriptableStateHealthDef@@XZ();
}

/*
==============
Preload_ScriptableEventDynamicBoneNoiseCurveDefArray
==============
*/

void __fastcall Preload_ScriptableEventDynamicBoneNoiseCurveDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventDynamicBoneNoiseCurveDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventObjectiveDefStream
==============
*/

void __fastcall Postload_ScriptableEventObjectiveDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventObjectiveDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_Scriptable_EventSun_DataStream
==============
*/

void __fastcall Preload_Scriptable_EventSun_DataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_Scriptable_EventSun_DataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventAnonymousDefStream
==============
*/

void __fastcall Preload_ScriptableEventAnonymousDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventAnonymousDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ScriptableDefPtr
==============
*/

ScriptableDef **__fastcall AllocPostload_ScriptableDefPtr()
{
  return ?AllocPostload_ScriptableDefPtr@@YAPEAPEAUScriptableDef@@XZ();
}

/*
==============
AllocPreload_ScriptableEventGravityArcDef
==============
*/

ScriptableEventGravityArcDef *__fastcall AllocPreload_ScriptableEventGravityArcDef()
{
  return ?AllocPreload_ScriptableEventGravityArcDef@@YAPEAUScriptableEventGravityArcDef@@XZ();
}

/*
==============
Load_ProcessStructLayout_ScriptableDamageTagOverride
==============
*/

void Load_ProcessStructLayout_ScriptableDamageTagOverride(void)
{
  ?Load_ProcessStructLayout_ScriptableDamageTagOverride@@YAXXZ();
}

/*
==============
Postload_ScriptableEventPFXDefStream
==============
*/

void __fastcall Postload_ScriptableEventPFXDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventPFXDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ScriptableEventViewTriggerDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventViewTriggerDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventViewTriggerDef@@YAXXZ();
}

/*
==============
AllocPreload_ScriptableStateUsableDef
==============
*/

ScriptableStateUsableDef *__fastcall AllocPreload_ScriptableStateUsableDef()
{
  return ?AllocPreload_ScriptableStateUsableDef@@YAPEAUScriptableStateUsableDef@@XZ();
}

/*
==============
Load_ScriptableEventRumbleDefStream
==============
*/

void __fastcall Load_ScriptableEventRumbleDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventRumbleDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptablePhysicsLimitsStream
==============
*/

void __fastcall Load_ScriptablePhysicsLimitsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptablePhysicsLimitsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventWaitDefStream
==============
*/

void __fastcall Postload_ScriptableEventWaitDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventWaitDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ScriptableStateDefUnion
==============
*/

ScriptableStateDefUnion *__fastcall AllocPreload_ScriptableStateDefUnion()
{
  return ?AllocPreload_ScriptableStateDefUnion@@YAPEATScriptableStateDefUnion@@XZ();
}

/*
==============
Postload_ScriptableEventViewTriggerDefStream
==============
*/

void __fastcall Postload_ScriptableEventViewTriggerDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventViewTriggerDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_Scriptable_MayhemActionArray
==============
*/

void __fastcall Postload_Scriptable_MayhemActionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_Scriptable_MayhemActionArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ScriptableEventDef
==============
*/

ScriptableEventDef *__fastcall AllocPostload_ScriptableEventDef()
{
  return ?AllocPostload_ScriptableEventDef@@YAPEAUScriptableEventDef@@XZ();
}

/*
==============
Load_Scriptable_StateType
==============
*/

void __fastcall Load_Scriptable_StateType(const DBStreamStart streamStart)
{
  ?Load_Scriptable_StateType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_Scriptable_ShaderParamTypeArray
==============
*/

void __fastcall Postload_Scriptable_ShaderParamTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_Scriptable_ShaderParamTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_Scriptable_Attackers
==============
*/

void __fastcall Preload_Scriptable_Attackers(const DBStreamStart streamStart)
{
  ?Preload_Scriptable_Attackers@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_Scriptable_ShaderParamType
==============
*/

Scriptable_ShaderParamType *__fastcall AllocPreload_Scriptable_ShaderParamType()
{
  return ?AllocPreload_Scriptable_ShaderParamType@@YAPEAW4Scriptable_ShaderParamType@@XZ();
}

/*
==============
Preload_ScriptableReservedDynents
==============
*/

void __fastcall Preload_ScriptableReservedDynents(const DBStreamStart streamStart)
{
  ?Preload_ScriptableReservedDynents@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_ScriptableStateScriptedDef
==============
*/

void Load_ProcessStructLayout_ScriptableStateScriptedDef(void)
{
  ?Load_ProcessStructLayout_ScriptableStateScriptedDef@@YAXXZ();
}

/*
==============
Load_ProcessStructLayout_ScriptableReservedDynents
==============
*/

void Load_ProcessStructLayout_ScriptableReservedDynents(void)
{
  ?Load_ProcessStructLayout_ScriptableReservedDynents@@YAXXZ();
}

/*
==============
Postload_ScriptableReservedDynent
==============
*/

void __fastcall Postload_ScriptableReservedDynent(const DBStreamStart streamStart)
{
  ?Postload_ScriptableReservedDynent@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ScriptableMapEntsArray
==============
*/

void __fastcall Postload_ScriptableMapEntsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableMapEntsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableStateUsableDef
==============
*/

int __fastcall Mark_ScriptableStateUsableDef()
{
  return ?Mark_ScriptableStateUsableDef@@YAHXZ();
}

/*
==============
AllocLoad_ScriptableEventPlayMayhemDef
==============
*/

ScriptableEventPlayMayhemDef *__fastcall AllocLoad_ScriptableEventPlayMayhemDef()
{
  return ?AllocLoad_ScriptableEventPlayMayhemDef@@YAPEAUScriptableEventPlayMayhemDef@@XZ();
}

/*
==============
Load_ScriptableEventNoteTrackDef
==============
*/

void __fastcall Load_ScriptableEventNoteTrackDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventNoteTrackDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ScriptableEventClientViewSelectorDef
==============
*/

ScriptableEventClientViewSelectorDef *__fastcall AllocPreload_ScriptableEventClientViewSelectorDef()
{
  return ?AllocPreload_ScriptableEventClientViewSelectorDef@@YAPEAUScriptableEventClientViewSelectorDef@@XZ();
}

/*
==============
AllocPreload_ScriptableStateBaseDef
==============
*/

ScriptableStateBaseDef *__fastcall AllocPreload_ScriptableStateBaseDef()
{
  return ?AllocPreload_ScriptableStateBaseDef@@YAPEAUScriptableStateBaseDef@@XZ();
}

/*
==============
Load_Scriptable_EventTypeStream
==============
*/

void __fastcall Load_Scriptable_EventTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_Scriptable_EventTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableStateSimpleDefStream
==============
*/

void __fastcall Postload_ScriptableStateSimpleDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableStateSimpleDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventApplyConstantAngularForceDefArray
==============
*/

void __fastcall Load_ScriptableEventApplyConstantAngularForceDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventApplyConstantAngularForceDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableDefPtrStream
==============
*/

void __fastcall Preload_ScriptableDefPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableDefPtrStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ScriptableEventViewmodelChangeImageDef
==============
*/

ScriptableEventViewmodelChangeImageDef *__fastcall AllocLoad_ScriptableEventViewmodelChangeImageDef()
{
  return ?AllocLoad_ScriptableEventViewmodelChangeImageDef@@YAPEAUScriptableEventViewmodelChangeImageDef@@XZ();
}

/*
==============
AllocPreload_ScriptableModelUnion
==============
*/

ScriptableModelUnion *__fastcall AllocPreload_ScriptableModelUnion()
{
  return ?AllocPreload_ScriptableModelUnion@@YAPEATScriptableModelUnion@@XZ();
}

/*
==============
AllocPostload_ScriptableEventFootstepDef
==============
*/

ScriptableEventFootstepDef *__fastcall AllocPostload_ScriptableEventFootstepDef()
{
  return ?AllocPostload_ScriptableEventFootstepDef@@YAPEAUScriptableEventFootstepDef@@XZ();
}

/*
==============
Load_ProcessStructLayout_Scriptable_DamageCause
==============
*/

void Load_ProcessStructLayout_Scriptable_DamageCause(void)
{
  ?Load_ProcessStructLayout_Scriptable_DamageCause@@YAXXZ();
}

/*
==============
AllocPostload_ScriptableEventViewTriggerDef
==============
*/

ScriptableEventViewTriggerDef *__fastcall AllocPostload_ScriptableEventViewTriggerDef()
{
  return ?AllocPostload_ScriptableEventViewTriggerDef@@YAPEAUScriptableEventViewTriggerDef@@XZ();
}

/*
==============
Load_ScriptableEventLightDef
==============
*/

void __fastcall Load_ScriptableEventLightDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventLightDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ScriptableModelUnionStream
==============
*/

void __fastcall Load_ScriptableModelUnionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableModelUnionStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventBaseDefStream
==============
*/

void __fastcall Postload_ScriptableEventBaseDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventBaseDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ScriptableEventApplyForceDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventApplyForceDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventApplyForceDef@@YAXXZ();
}

/*
==============
AllocPreload_ScriptableEventNoteTrackDef
==============
*/

ScriptableEventNoteTrackDef *__fastcall AllocPreload_ScriptableEventNoteTrackDef()
{
  return ?AllocPreload_ScriptableEventNoteTrackDef@@YAPEAUScriptableEventNoteTrackDef@@XZ();
}

/*
==============
Postload_ScriptableDefPtrStream
==============
*/

void __fastcall Postload_ScriptableDefPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableDefPtrStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_Scriptable_ShaderParamType
==============
*/

int __fastcall Mark_Scriptable_ShaderParamType()
{
  return ?Mark_Scriptable_ShaderParamType@@YAHXZ();
}

/*
==============
Load_ProcessStructLayout_ScriptableEventRumbleDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventRumbleDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventRumbleDef@@YAXXZ();
}

/*
==============
Preload_ScriptableEventExplosionDef
==============
*/

void __fastcall Preload_ScriptableEventExplosionDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventExplosionDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ScriptableEventAnimationDef
==============
*/

void __fastcall Postload_ScriptableEventAnimationDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventAnimationDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_ScriptableInstance
==============
*/

ScriptableInstance *__fastcall AllocPostload_ScriptableInstance()
{
  return ?AllocPostload_ScriptableInstance@@YAPEAUScriptableInstance@@XZ();
}

/*
==============
Mark_ScriptableEventExplosionDefArray
==============
*/

int __fastcall Mark_ScriptableEventExplosionDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventExplosionDefArray@@YAH_K@Z(count);
}

/*
==============
Postload_ScriptablePhysicsLimitsStream
==============
*/

void __fastcall Postload_ScriptablePhysicsLimitsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptablePhysicsLimitsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableEventDisablePhysicsSubShapeDefArray
==============
*/

int __fastcall Mark_ScriptableEventDisablePhysicsSubShapeDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventDisablePhysicsSubShapeDefArray@@YAH_K@Z(count);
}

/*
==============
Mark_ScriptablePartDef
==============
*/

int __fastcall Mark_ScriptablePartDef()
{
  return ?Mark_ScriptablePartDef@@YAHXZ();
}

/*
==============
AllocPreload_ScriptableStateSimpleDef
==============
*/

ScriptableStateSimpleDef *__fastcall AllocPreload_ScriptableStateSimpleDef()
{
  return ?AllocPreload_ScriptableStateSimpleDef@@YAPEAUScriptableStateSimpleDef@@XZ();
}

/*
==============
Postload_ScriptableDataTypeStream
==============
*/

void __fastcall Postload_ScriptableDataTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableDataTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableEventPartDamageDefArray
==============
*/

int __fastcall Mark_ScriptableEventPartDamageDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventPartDamageDefArray@@YAH_K@Z(count);
}

/*
==============
Mark_Scriptable_StateTypeArray
==============
*/

int __fastcall Mark_Scriptable_StateTypeArray(const unsigned __int64 count)
{
  return ?Mark_Scriptable_StateTypeArray@@YAH_K@Z(count);
}

/*
==============
Load_ScriptableInstanceArray
==============
*/

void __fastcall Load_ScriptableInstanceArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableInstanceArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ScriptableEventHoverDef
==============
*/

ScriptableEventHoverDef *__fastcall AllocLoad_ScriptableEventHoverDef()
{
  return ?AllocLoad_ScriptableEventHoverDef@@YAPEAUScriptableEventHoverDef@@XZ();
}

/*
==============
Preload_ScriptablePhysicsLimitsArray
==============
*/

void __fastcall Preload_ScriptablePhysicsLimitsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptablePhysicsLimitsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableReservedDynentsStream
==============
*/

void __fastcall Load_ScriptableReservedDynentsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableReservedDynentsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableDamageTagOverride
==============
*/

void __fastcall Preload_ScriptableDamageTagOverride(const DBStreamStart streamStart)
{
  ?Preload_ScriptableDamageTagOverride@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ScriptableEventClientViewSelectorDefArray
==============
*/

void __fastcall Preload_ScriptableEventClientViewSelectorDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventClientViewSelectorDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableEventScriptDefArray
==============
*/

int __fastcall Mark_ScriptableEventScriptDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventScriptDefArray@@YAH_K@Z(count);
}

/*
==============
AllocPostload_ScriptablePartDef
==============
*/

ScriptablePartDef *__fastcall AllocPostload_ScriptablePartDef()
{
  return ?AllocPostload_ScriptablePartDef@@YAPEAUScriptablePartDef@@XZ();
}

/*
==============
Load_ScriptableEventAddModelDefArray
==============
*/

void __fastcall Load_ScriptableEventAddModelDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventAddModelDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableStateSimpleDef
==============
*/

int __fastcall Mark_ScriptableStateSimpleDef()
{
  return ?Mark_ScriptableStateSimpleDef@@YAHXZ();
}

/*
==============
Load_ScriptableEventDisablePhysicsSubShapeDefStream
==============
*/

void __fastcall Load_ScriptableEventDisablePhysicsSubShapeDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventDisablePhysicsSubShapeDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventApplyForceDefStream
==============
*/

void __fastcall Preload_ScriptableEventApplyForceDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventApplyForceDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableStateSimpleDefStream
==============
*/

void __fastcall Load_ScriptableStateSimpleDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableStateSimpleDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptablePartDefArray
==============
*/

void __fastcall Preload_ScriptablePartDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptablePartDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventTeamSelectorDef
==============
*/

void __fastcall Postload_ScriptableEventTeamSelectorDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventTeamSelectorDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ScriptableEventGravityArcDef
==============
*/

ScriptableEventGravityArcDef *__fastcall AllocLoad_ScriptableEventGravityArcDef()
{
  return ?AllocLoad_ScriptableEventGravityArcDef@@YAPEAUScriptableEventGravityArcDef@@XZ();
}

/*
==============
Postload_ScriptableEventApplyConstantForceDefStream
==============
*/

void __fastcall Postload_ScriptableEventApplyConstantForceDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventApplyConstantForceDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ScriptableEventDef
==============
*/

ScriptableEventDef *__fastcall AllocPreload_ScriptableEventDef()
{
  return ?AllocPreload_ScriptableEventDef@@YAPEAUScriptableEventDef@@XZ();
}

/*
==============
AllocPreload_ScriptableEventPartDamageDef
==============
*/

ScriptableEventPartDamageDef *__fastcall AllocPreload_ScriptableEventPartDamageDef()
{
  return ?AllocPreload_ScriptableEventPartDamageDef@@YAPEAUScriptableEventPartDamageDef@@XZ();
}

/*
==============
Postload_ScriptableEventHoverDef
==============
*/

void __fastcall Postload_ScriptableEventHoverDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventHoverDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ScriptableDamageTagOverrideStream
==============
*/

void __fastcall Postload_ScriptableDamageTagOverrideStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableDamageTagOverrideStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventDefStream
==============
*/

void __fastcall Load_ScriptableEventDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_Scriptable_MayhemAction
==============
*/

Scriptable_MayhemAction *__fastcall AllocLoad_Scriptable_MayhemAction()
{
  return ?AllocLoad_Scriptable_MayhemAction@@YAPEAW4Scriptable_MayhemAction@@XZ();
}

/*
==============
AllocLoad_ScriptableEventDefUnion
==============
*/

ScriptableEventDefUnion *__fastcall AllocLoad_ScriptableEventDefUnion()
{
  return ?AllocLoad_ScriptableEventDefUnion@@YAPEATScriptableEventDefUnion@@XZ();
}

/*
==============
Mark_ScriptableEventPartDamageDef
==============
*/

int __fastcall Mark_ScriptableEventPartDamageDef()
{
  return ?Mark_ScriptableEventPartDamageDef@@YAHXZ();
}

/*
==============
Load_ScriptableNoteTrackDefArray
==============
*/

void __fastcall Load_ScriptableNoteTrackDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableNoteTrackDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventObjectiveDefArray
==============
*/

void __fastcall Load_ScriptableEventObjectiveDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventObjectiveDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableDamageTagOverrideArray
==============
*/

void __fastcall Postload_ScriptableDamageTagOverrideArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableDamageTagOverrideArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventApplyAngularForceDef
==============
*/

void __fastcall Preload_ScriptableEventApplyAngularForceDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventApplyAngularForceDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ScriptableEventViewTriggerDefArray
==============
*/

int __fastcall Mark_ScriptableEventViewTriggerDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventViewTriggerDefArray@@YAH_K@Z(count);
}

/*
==============
Load_ProcessStructLayout_ScriptableEventAnimationDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventAnimationDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventAnimationDef@@YAXXZ();
}

/*
==============
Postload_ScriptableEventGravityArcDefStream
==============
*/

void __fastcall Postload_ScriptableEventGravityArcDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventGravityArcDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventSetMayhemDefStream
==============
*/

void __fastcall Postload_ScriptableEventSetMayhemDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventSetMayhemDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_Scriptable_ShaderParamType
==============
*/

Scriptable_ShaderParamType *__fastcall AllocPostload_Scriptable_ShaderParamType()
{
  return ?AllocPostload_Scriptable_ShaderParamType@@YAPEAW4Scriptable_ShaderParamType@@XZ();
}

/*
==============
Postload_ScriptableInstanceStream
==============
*/

void __fastcall Postload_ScriptableInstanceStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableInstanceStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableDef
==============
*/

int __fastcall Mark_ScriptableDef()
{
  return ?Mark_ScriptableDef@@YAHXZ();
}

/*
==============
Load_ScriptableStateDefUnion
==============
*/

void __fastcall Load_ScriptableStateDefUnion(const DBStreamStart streamStart)
{
  ?Load_ScriptableStateDefUnion@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_ScriptableEventSunDef
==============
*/

ScriptableEventSunDef *__fastcall AllocPostload_ScriptableEventSunDef()
{
  return ?AllocPostload_ScriptableEventSunDef@@YAPEAUScriptableEventSunDef@@XZ();
}

/*
==============
Mark_ScriptableStateHealthDefArray
==============
*/

int __fastcall Mark_ScriptableStateHealthDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableStateHealthDefArray@@YAH_K@Z(count);
}

/*
==============
Preload_ScriptableEventViewTriggerDefArray
==============
*/

void __fastcall Preload_ScriptableEventViewTriggerDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventViewTriggerDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ScriptableEventDisablePhysicsSubShapeDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventDisablePhysicsSubShapeDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventDisablePhysicsSubShapeDef@@YAXXZ();
}

/*
==============
Postload_ScriptableEventSunDefArray
==============
*/

void __fastcall Postload_ScriptableEventSunDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventSunDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventCollisionDef
==============
*/

void __fastcall Postload_ScriptableEventCollisionDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventCollisionDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ScriptableEventDefUnionStream
==============
*/

void __fastcall Postload_ScriptableEventDefUnionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventDefUnionStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventWaitDef
==============
*/

void __fastcall Load_ScriptableEventWaitDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventWaitDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ScriptableEventWaitDef
==============
*/

int __fastcall Mark_ScriptableEventWaitDef()
{
  return ?Mark_ScriptableEventWaitDef@@YAHXZ();
}

/*
==============
Load_ProcessStructLayout_ScriptableStateDefUnion
==============
*/

void Load_ProcessStructLayout_ScriptableStateDefUnion(void)
{
  ?Load_ProcessStructLayout_ScriptableStateDefUnion@@YAXXZ();
}

/*
==============
Postload_ScriptableEventMoveDef
==============
*/

void __fastcall Postload_ScriptableEventMoveDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventMoveDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ScriptableEventNoteTrackDefArray
==============
*/

void __fastcall Preload_ScriptableEventNoteTrackDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventNoteTrackDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ScriptableEventDisablePhysicsSubShapeDef
==============
*/

ScriptableEventDisablePhysicsSubShapeDef *__fastcall AllocLoad_ScriptableEventDisablePhysicsSubShapeDef()
{
  return ?AllocLoad_ScriptableEventDisablePhysicsSubShapeDef@@YAPEAUScriptableEventDisablePhysicsSubShapeDef@@XZ();
}

/*
==============
Load_ScriptableMapEnts
==============
*/

void __fastcall Load_ScriptableMapEnts(const DBStreamStart streamStart)
{
  ?Load_ScriptableMapEnts@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_Scriptable_Attackers
==============
*/

Scriptable_Attackers *__fastcall AllocPreload_Scriptable_Attackers()
{
  return ?AllocPreload_Scriptable_Attackers@@YAPEAW4Scriptable_Attackers@@XZ();
}

/*
==============
Mark_ScriptableStateDef
==============
*/

int __fastcall Mark_ScriptableStateDef()
{
  return ?Mark_ScriptableStateDef@@YAHXZ();
}

/*
==============
Postload_ScriptableEventPartDamageDefArray
==============
*/

void __fastcall Postload_ScriptableEventPartDamageDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventPartDamageDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventFootstepDefStream
==============
*/

void __fastcall Preload_ScriptableEventFootstepDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventFootstepDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableStateScriptedDef
==============
*/

int __fastcall Mark_ScriptableStateScriptedDef()
{
  return ?Mark_ScriptableStateScriptedDef@@YAHXZ();
}

/*
==============
Preload_ScriptableEventPartDamageDefArray
==============
*/

void __fastcall Preload_ScriptableEventPartDamageDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventPartDamageDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_Scriptable_EventType
==============
*/

Scriptable_EventType *__fastcall AllocPreload_Scriptable_EventType()
{
  return ?AllocPreload_Scriptable_EventType@@YAPEAW4Scriptable_EventType@@XZ();
}

/*
==============
AllocPostload_ScriptableEventScriptDamageDef
==============
*/

ScriptableEventScriptDamageDef *__fastcall AllocPostload_ScriptableEventScriptDamageDef()
{
  return ?AllocPostload_ScriptableEventScriptDamageDef@@YAPEAUScriptableEventScriptDamageDef@@XZ();
}

/*
==============
Load_ScriptableEventRandomDef
==============
*/

void __fastcall Load_ScriptableEventRandomDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventRandomDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ScriptableInstance
==============
*/

void __fastcall Postload_ScriptableInstance(const DBStreamStart streamStart)
{
  ?Postload_ScriptableInstance@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ScriptableEventChunkDynentDefStream
==============
*/

void __fastcall Preload_ScriptableEventChunkDynentDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventChunkDynentDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ScriptableEventClientViewSelectorDef
==============
*/

ScriptableEventClientViewSelectorDef *__fastcall AllocLoad_ScriptableEventClientViewSelectorDef()
{
  return ?AllocLoad_ScriptableEventClientViewSelectorDef@@YAPEAUScriptableEventClientViewSelectorDef@@XZ();
}

/*
==============
Load_ScriptableEventApplyAngularForceDef
==============
*/

void __fastcall Load_ScriptableEventApplyAngularForceDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventApplyAngularForceDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_Scriptable_DamageCause
==============
*/

Scriptable_DamageCause *__fastcall AllocPreload_Scriptable_DamageCause()
{
  return ?AllocPreload_Scriptable_DamageCause@@YAPEAW4Scriptable_DamageCause@@XZ();
}

/*
==============
Postload_ScriptableDefPtrArray
==============
*/

void __fastcall Postload_ScriptableDefPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableDefPtrArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_Scriptable_ImageId
==============
*/

Scriptable_ImageId *__fastcall AllocPostload_Scriptable_ImageId()
{
  return ?AllocPostload_Scriptable_ImageId@@YAPEAW4Scriptable_ImageId@@XZ();
}

/*
==============
Mark_ScriptableEventSpawnDynentDef
==============
*/

int __fastcall Mark_ScriptableEventSpawnDynentDef()
{
  return ?Mark_ScriptableEventSpawnDynentDef@@YAHXZ();
}

/*
==============
Load_ScriptableEventVehicleBlowUpTireDef
==============
*/

void __fastcall Load_ScriptableEventVehicleBlowUpTireDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventVehicleBlowUpTireDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ScriptableEventPlayMayhemDef
==============
*/

void __fastcall Postload_ScriptableEventPlayMayhemDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventPlayMayhemDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_Scriptable_MaterialOverrideTypeArray
==============
*/

void __fastcall Preload_Scriptable_MaterialOverrideTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_Scriptable_MaterialOverrideTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_Scriptable_ImageId
==============
*/

void __fastcall Postload_Scriptable_ImageId(const DBStreamStart streamStart)
{
  ?Postload_Scriptable_ImageId@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ScriptableEventSpatialDisableDef
==============
*/

ScriptableEventSpatialDisableDef *__fastcall AllocPreload_ScriptableEventSpatialDisableDef()
{
  return ?AllocPreload_ScriptableEventSpatialDisableDef@@YAPEAUScriptableEventSpatialDisableDef@@XZ();
}

/*
==============
Postload_ScriptableEventApplyConstantAngularForceDefArray
==============
*/

void __fastcall Postload_ScriptableEventApplyConstantAngularForceDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventApplyConstantAngularForceDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableEventAnimationDef
==============
*/

int __fastcall Mark_ScriptableEventAnimationDef()
{
  return ?Mark_ScriptableEventAnimationDef@@YAHXZ();
}

/*
==============
Postload_ScriptableEventCompassIconDef
==============
*/

void __fastcall Postload_ScriptableEventCompassIconDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventCompassIconDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ScriptableEventAddModelDef
==============
*/

ScriptableEventAddModelDef *__fastcall AllocLoad_ScriptableEventAddModelDef()
{
  return ?AllocLoad_ScriptableEventAddModelDef@@YAPEAUScriptableEventAddModelDef@@XZ();
}

/*
==============
Postload_ScriptableDefArray
==============
*/

void __fastcall Postload_ScriptableDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ScriptableEventViewmodelChangeImageDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventViewmodelChangeImageDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventViewmodelChangeImageDef@@YAXXZ();
}

/*
==============
Load_ScriptableEventCompassIconDefArray
==============
*/

void __fastcall Load_ScriptableEventCompassIconDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventCompassIconDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventAnonymousDefArray
==============
*/

void __fastcall Preload_ScriptableEventAnonymousDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventAnonymousDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventDisablePhysicsSubShapeDef
==============
*/

void __fastcall Postload_ScriptableEventDisablePhysicsSubShapeDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventDisablePhysicsSubShapeDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ScriptableEventScriptDefStream
==============
*/

void __fastcall Preload_ScriptableEventScriptDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventScriptDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ScriptableEventObjectiveDef
==============
*/

ScriptableEventObjectiveDef *__fastcall AllocPreload_ScriptableEventObjectiveDef()
{
  return ?AllocPreload_ScriptableEventObjectiveDef@@YAPEAUScriptableEventObjectiveDef@@XZ();
}

/*
==============
Load_ScriptableReservedDynentArray
==============
*/

void __fastcall Load_ScriptableReservedDynentArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableReservedDynentArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventExplosionDefStream
==============
*/

void __fastcall Load_ScriptableEventExplosionDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventExplosionDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventSpatialDisableDefArray
==============
*/

void __fastcall Postload_ScriptableEventSpatialDisableDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventSpatialDisableDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ScriptableStateScriptedDef
==============
*/

ScriptableStateScriptedDef *__fastcall AllocPreload_ScriptableStateScriptedDef()
{
  return ?AllocPreload_ScriptableStateScriptedDef@@YAPEAUScriptableStateScriptedDef@@XZ();
}

/*
==============
Mark_ScriptableDamageTagOverride
==============
*/

int __fastcall Mark_ScriptableDamageTagOverride()
{
  return ?Mark_ScriptableDamageTagOverride@@YAHXZ();
}

/*
==============
Postload_ScriptableEventChunkDynentDef
==============
*/

void __fastcall Postload_ScriptableEventChunkDynentDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventChunkDynentDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_ScriptableEventChunkDynentDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventChunkDynentDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventChunkDynentDef@@YAXXZ();
}

/*
==============
Mark_ScriptableEventRumbleDefArray
==============
*/

int __fastcall Mark_ScriptableEventRumbleDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventRumbleDefArray@@YAH_K@Z(count);
}

/*
==============
AllocPostload_ScriptableEventMaterialOverrideDef
==============
*/

ScriptableEventMaterialOverrideDef *__fastcall AllocPostload_ScriptableEventMaterialOverrideDef()
{
  return ?AllocPostload_ScriptableEventMaterialOverrideDef@@YAPEAUScriptableEventMaterialOverrideDef@@XZ();
}

/*
==============
Mark_Scriptable_TeamFilterArray
==============
*/

int __fastcall Mark_Scriptable_TeamFilterArray(const unsigned __int64 count)
{
  return ?Mark_Scriptable_TeamFilterArray@@YAH_K@Z(count);
}

/*
==============
Preload_ScriptableStateBaseDef
==============
*/

void __fastcall Preload_ScriptableStateBaseDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableStateBaseDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ScriptableEventViewmodelShaderParamDefArray
==============
*/

void __fastcall Postload_ScriptableEventViewmodelShaderParamDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventViewmodelShaderParamDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_Scriptable_EventType
==============
*/

void __fastcall Preload_Scriptable_EventType(const DBStreamStart streamStart)
{
  ?Preload_Scriptable_EventType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ScriptableDataTypeArray
==============
*/

void __fastcall Load_ScriptableDataTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableDataTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ScriptableEventExplosionDef
==============
*/

ScriptableEventExplosionDef *__fastcall AllocPostload_ScriptableEventExplosionDef()
{
  return ?AllocPostload_ScriptableEventExplosionDef@@YAPEAUScriptableEventExplosionDef@@XZ();
}

/*
==============
Preload_ScriptableEventDefStream
==============
*/

void __fastcall Preload_ScriptableEventDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventClientViewSelectorDef
==============
*/

void __fastcall Load_ScriptableEventClientViewSelectorDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventClientViewSelectorDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ScriptableEventLightDef
==============
*/

void __fastcall Preload_ScriptableEventLightDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventLightDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ScriptableEventLightDef
==============
*/

int __fastcall Mark_ScriptableEventLightDef()
{
  return ?Mark_ScriptableEventLightDef@@YAHXZ();
}

/*
==============
Postload_ScriptableEventNoteTrackDef
==============
*/

void __fastcall Postload_ScriptableEventNoteTrackDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventNoteTrackDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ScriptableEventApplyForceDefArray
==============
*/

void __fastcall Preload_ScriptableEventApplyForceDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventApplyForceDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_Scriptable_EventSun_DataArray
==============
*/

int __fastcall Mark_Scriptable_EventSun_DataArray(const unsigned __int64 count)
{
  return ?Mark_Scriptable_EventSun_DataArray@@YAH_K@Z(count);
}

/*
==============
Preload_Scriptable_MaterialOverrideType
==============
*/

void __fastcall Preload_Scriptable_MaterialOverrideType(const DBStreamStart streamStart)
{
  ?Preload_Scriptable_MaterialOverrideType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_ScriptableEventMaterialOverrideDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventMaterialOverrideDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventMaterialOverrideDef@@YAXXZ();
}

/*
==============
Mark_ScriptableEventBaseDefArray
==============
*/

int __fastcall Mark_ScriptableEventBaseDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventBaseDefArray@@YAH_K@Z(count);
}

/*
==============
Mark_ScriptableStateUsableDefArray
==============
*/

int __fastcall Mark_ScriptableStateUsableDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableStateUsableDefArray@@YAH_K@Z(count);
}

/*
==============
Mark_ScriptableEventClientViewSelectorDef
==============
*/

int __fastcall Mark_ScriptableEventClientViewSelectorDef()
{
  return ?Mark_ScriptableEventClientViewSelectorDef@@YAHXZ();
}

/*
==============
Preload_ScriptableEventFootstepDef
==============
*/

void __fastcall Preload_ScriptableEventFootstepDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventFootstepDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_ScriptableEventLightDef
==============
*/

ScriptableEventLightDef *__fastcall AllocPostload_ScriptableEventLightDef()
{
  return ?AllocPostload_ScriptableEventLightDef@@YAPEAUScriptableEventLightDef@@XZ();
}

/*
==============
Mark_ScriptableReservedDynent
==============
*/

int __fastcall Mark_ScriptableReservedDynent()
{
  return ?Mark_ScriptableReservedDynent@@YAHXZ();
}

/*
==============
Postload_ScriptableDataTypeArray
==============
*/

void __fastcall Postload_ScriptableDataTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableDataTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventDlc1DefStream
==============
*/

void __fastcall Preload_ScriptableEventDlc1DefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventDlc1DefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventApplyConstantForceDefStream
==============
*/

void __fastcall Load_ScriptableEventApplyConstantForceDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventApplyConstantForceDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_Scriptable_MayhemAction
==============
*/

int __fastcall Mark_Scriptable_MayhemAction()
{
  return ?Mark_Scriptable_MayhemAction@@YAHXZ();
}

/*
==============
Load_Scriptable_DamageCauseArray
==============
*/

void __fastcall Load_Scriptable_DamageCauseArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_Scriptable_DamageCauseArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventDefUnionArray
==============
*/

void __fastcall Load_ScriptableEventDefUnionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventDefUnionArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_Scriptable_EventSun_Data
==============
*/

void __fastcall Load_Scriptable_EventSun_Data(const DBStreamStart streamStart)
{
  ?Load_Scriptable_EventSun_Data@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ScriptableEventSetMayhemDefArray
==============
*/

void __fastcall Load_ScriptableEventSetMayhemDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventSetMayhemDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ScriptableEventApplyAngularForceDef
==============
*/

ScriptableEventApplyAngularForceDef *__fastcall AllocPostload_ScriptableEventApplyAngularForceDef()
{
  return ?AllocPostload_ScriptableEventApplyAngularForceDef@@YAPEAUScriptableEventApplyAngularForceDef@@XZ();
}

/*
==============
Mark_ScriptableEventFootstepDef
==============
*/

int __fastcall Mark_ScriptableEventFootstepDef()
{
  return ?Mark_ScriptableEventFootstepDef@@YAHXZ();
}

/*
==============
AllocLoad_ScriptableStateDefUnion
==============
*/

ScriptableStateDefUnion *__fastcall AllocLoad_ScriptableStateDefUnion()
{
  return ?AllocLoad_ScriptableStateDefUnion@@YAPEATScriptableStateDefUnion@@XZ();
}

/*
==============
Preload_ScriptableEventMoveDefStream
==============
*/

void __fastcall Preload_ScriptableEventMoveDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventMoveDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_Scriptable_Attackers
==============
*/

void __fastcall Load_Scriptable_Attackers(const DBStreamStart streamStart)
{
  ?Load_Scriptable_Attackers@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ScriptableEventStateChangeDefStream
==============
*/

void __fastcall Load_ScriptableEventStateChangeDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventStateChangeDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventViewmodelChangeImageDef
==============
*/

void __fastcall Preload_ScriptableEventViewmodelChangeImageDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventViewmodelChangeImageDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ScriptableEventTeamSelectorDef
==============
*/

ScriptableEventTeamSelectorDef *__fastcall AllocLoad_ScriptableEventTeamSelectorDef()
{
  return ?AllocLoad_ScriptableEventTeamSelectorDef@@YAPEAUScriptableEventTeamSelectorDef@@XZ();
}

/*
==============
AllocLoad_ScriptableEventExplosionDef
==============
*/

ScriptableEventExplosionDef *__fastcall AllocLoad_ScriptableEventExplosionDef()
{
  return ?AllocLoad_ScriptableEventExplosionDef@@YAPEAUScriptableEventExplosionDef@@XZ();
}

/*
==============
Load_ScriptableEventRandomDefStream
==============
*/

void __fastcall Load_ScriptableEventRandomDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventRandomDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_Scriptable_TeamFilterStream
==============
*/

void __fastcall Postload_Scriptable_TeamFilterStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_Scriptable_TeamFilterStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableStateScriptedDefStream
==============
*/

void __fastcall Load_ScriptableStateScriptedDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableStateScriptedDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventRumbleDefStream
==============
*/

void __fastcall Postload_ScriptableEventRumbleDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventRumbleDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableDefPtr
==============
*/

void __fastcall Preload_ScriptableDefPtr(const DBStreamStart streamStart)
{
  ?Preload_ScriptableDefPtr@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ScriptableEventClientViewSelectorDefArray
==============
*/

int __fastcall Mark_ScriptableEventClientViewSelectorDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventClientViewSelectorDefArray@@YAH_K@Z(count);
}

/*
==============
Postload_ScriptableEventRumbleDefArray
==============
*/

void __fastcall Postload_ScriptableEventRumbleDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventRumbleDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_Scriptable_ImageId
==============
*/

Scriptable_ImageId *__fastcall AllocLoad_Scriptable_ImageId()
{
  return ?AllocLoad_Scriptable_ImageId@@YAPEAW4Scriptable_ImageId@@XZ();
}

/*
==============
Preload_ScriptableDataTypeStream
==============
*/

void __fastcall Preload_ScriptableDataTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableDataTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventDefUnionArray
==============
*/

void __fastcall Postload_ScriptableEventDefUnionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventDefUnionArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableDefStream
==============
*/

void __fastcall Preload_ScriptableDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableInstanceArray
==============
*/

int __fastcall Mark_ScriptableInstanceArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableInstanceArray@@YAH_K@Z(count);
}

/*
==============
Load_ProcessStructLayout_ScriptableEventStateChangeDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventStateChangeDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventStateChangeDef@@YAXXZ();
}

/*
==============
AllocPreload_ScriptablePhysicsLimits
==============
*/

ScriptablePhysicsLimits *__fastcall AllocPreload_ScriptablePhysicsLimits()
{
  return ?AllocPreload_ScriptablePhysicsLimits@@YAPEAUScriptablePhysicsLimits@@XZ();
}

/*
==============
AllocPostload_ScriptableEventScriptDef
==============
*/

ScriptableEventScriptDef *__fastcall AllocPostload_ScriptableEventScriptDef()
{
  return ?AllocPostload_ScriptableEventScriptDef@@YAPEAUScriptableEventScriptDef@@XZ();
}

/*
==============
Postload_ScriptableStateUsableDefStream
==============
*/

void __fastcall Postload_ScriptableStateUsableDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableStateUsableDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableStateSimpleDefArray
==============
*/

void __fastcall Postload_ScriptableStateSimpleDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableStateSimpleDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_Scriptable_EventSun_DataArray
==============
*/

void __fastcall Postload_Scriptable_EventSun_DataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_Scriptable_EventSun_DataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventScreenshakeDef
==============
*/

void __fastcall Preload_ScriptableEventScreenshakeDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventScreenshakeDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_Scriptable_TeamFilterArray
==============
*/

void __fastcall Preload_Scriptable_TeamFilterArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_Scriptable_TeamFilterArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ScriptableEventScreenshakeDef
==============
*/

ScriptableEventScreenshakeDef *__fastcall AllocPostload_ScriptableEventScreenshakeDef()
{
  return ?AllocPostload_ScriptableEventScreenshakeDef@@YAPEAUScriptableEventScreenshakeDef@@XZ();
}

/*
==============
Postload_ScriptableNoteTrackDefArray
==============
*/

void __fastcall Postload_ScriptableNoteTrackDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableNoteTrackDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_Scriptable_DamageCause
==============
*/

int __fastcall Mark_Scriptable_DamageCause()
{
  return ?Mark_Scriptable_DamageCause@@YAHXZ();
}

/*
==============
Load_ProcessStructLayout_Scriptable_ShaderParamType
==============
*/

void Load_ProcessStructLayout_Scriptable_ShaderParamType(void)
{
  ?Load_ProcessStructLayout_Scriptable_ShaderParamType@@YAXXZ();
}

/*
==============
Preload_ScriptableEventViewTriggerDefStream
==============
*/

void __fastcall Preload_ScriptableEventViewTriggerDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventViewTriggerDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventAddModelDefStream
==============
*/

void __fastcall Load_ScriptableEventAddModelDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventAddModelDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_Scriptable_MaterialOverrideType
==============
*/

Scriptable_MaterialOverrideType *__fastcall AllocPostload_Scriptable_MaterialOverrideType()
{
  return ?AllocPostload_Scriptable_MaterialOverrideType@@YAPEAW4Scriptable_MaterialOverrideType@@XZ();
}

/*
==============
Postload_ScriptableEventClientViewSelectorDefArray
==============
*/

void __fastcall Postload_ScriptableEventClientViewSelectorDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventClientViewSelectorDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventChunkDynentDefStream
==============
*/

void __fastcall Postload_ScriptableEventChunkDynentDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventChunkDynentDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ScriptableStateDef
==============
*/

ScriptableStateDef *__fastcall AllocPostload_ScriptableStateDef()
{
  return ?AllocPostload_ScriptableStateDef@@YAPEAUScriptableStateDef@@XZ();
}

/*
==============
Load_ScriptableStateHealthDefArray
==============
*/

void __fastcall Load_ScriptableStateHealthDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableStateHealthDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableModelUnion
==============
*/

void __fastcall Load_ScriptableModelUnion(const DBStreamStart streamStart)
{
  ?Load_ScriptableModelUnion@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_ScriptableEventDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventDef@@YAXXZ();
}

/*
==============
Load_Scriptable_TeamFilter
==============
*/

void __fastcall Load_Scriptable_TeamFilter(const DBStreamStart streamStart)
{
  ?Load_Scriptable_TeamFilter@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_ScriptablePartDef
==============
*/

void Load_ProcessStructLayout_ScriptablePartDef(void)
{
  ?Load_ProcessStructLayout_ScriptablePartDef@@YAXXZ();
}

/*
==============
Mark_ScriptableEventViewmodelShaderParamDefArray
==============
*/

int __fastcall Mark_ScriptableEventViewmodelShaderParamDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventViewmodelShaderParamDefArray@@YAH_K@Z(count);
}

/*
==============
AllocLoad_ScriptableEventScriptDamageDef
==============
*/

ScriptableEventScriptDamageDef *__fastcall AllocLoad_ScriptableEventScriptDamageDef()
{
  return ?AllocLoad_ScriptableEventScriptDamageDef@@YAPEAUScriptableEventScriptDamageDef@@XZ();
}

/*
==============
AllocLoad_Scriptable_EventType
==============
*/

Scriptable_EventType *__fastcall AllocLoad_Scriptable_EventType()
{
  return ?AllocLoad_Scriptable_EventType@@YAPEAW4Scriptable_EventType@@XZ();
}

/*
==============
Postload_ScriptablePhysicsLimitsArray
==============
*/

void __fastcall Postload_ScriptablePhysicsLimitsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptablePhysicsLimitsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableReservedDynentsArray
==============
*/

int __fastcall Mark_ScriptableReservedDynentsArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableReservedDynentsArray@@YAH_K@Z(count);
}

/*
==============
Preload_Scriptable_ShaderParamTypeStream
==============
*/

void __fastcall Preload_Scriptable_ShaderParamTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_Scriptable_ShaderParamTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ScriptableReservedDynent
==============
*/

ScriptableReservedDynent *__fastcall AllocPostload_ScriptableReservedDynent()
{
  return ?AllocPostload_ScriptableReservedDynent@@YAPEAUScriptableReservedDynent@@XZ();
}

/*
==============
Load_ScriptableEventSpatialDisableDefArray
==============
*/

void __fastcall Load_ScriptableEventSpatialDisableDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventSpatialDisableDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventSunDefArray
==============
*/

void __fastcall Load_ScriptableEventSunDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventSunDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventApplyForceDefStream
==============
*/

void __fastcall Postload_ScriptableEventApplyForceDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventApplyForceDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableStateDefUnionArray
==============
*/

int __fastcall Mark_ScriptableStateDefUnionArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableStateDefUnionArray@@YAH_K@Z(count);
}

/*
==============
AllocPreload_ScriptableEventPFXDef
==============
*/

ScriptableEventPFXDef *__fastcall AllocPreload_ScriptableEventPFXDef()
{
  return ?AllocPreload_ScriptableEventPFXDef@@YAPEAUScriptableEventPFXDef@@XZ();
}

/*
==============
Mark_ScriptablePhysicsLimitsArray
==============
*/

int __fastcall Mark_ScriptablePhysicsLimitsArray(const unsigned __int64 count)
{
  return ?Mark_ScriptablePhysicsLimitsArray@@YAH_K@Z(count);
}

/*
==============
Load_ScriptableEventExplosionDef
==============
*/

void __fastcall Load_ScriptableEventExplosionDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventExplosionDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ScriptableEventHideShowBoneDefArray
==============
*/

void __fastcall Load_ScriptableEventHideShowBoneDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventHideShowBoneDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventObjectiveDefStream
==============
*/

void __fastcall Load_ScriptableEventObjectiveDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventObjectiveDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ScriptableEventExplosionDef
==============
*/

ScriptableEventExplosionDef *__fastcall AllocPreload_ScriptableEventExplosionDef()
{
  return ?AllocPreload_ScriptableEventExplosionDef@@YAPEAUScriptableEventExplosionDef@@XZ();
}

/*
==============
Preload_ScriptableEventMoveDefArray
==============
*/

void __fastcall Preload_ScriptableEventMoveDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventMoveDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ScriptableDefPtr
==============
*/

ScriptableDef **__fastcall AllocPreload_ScriptableDefPtr()
{
  return ?AllocPreload_ScriptableDefPtr@@YAPEAPEAUScriptableDef@@XZ();
}

/*
==============
Mark_ScriptableEventViewmodelShaderParamDef
==============
*/

int __fastcall Mark_ScriptableEventViewmodelShaderParamDef()
{
  return ?Mark_ScriptableEventViewmodelShaderParamDef@@YAHXZ();
}

/*
==============
Postload_ScriptableEventAnimationDefStream
==============
*/

void __fastcall Postload_ScriptableEventAnimationDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventAnimationDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ScriptableEventObjectiveDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventObjectiveDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventObjectiveDef@@YAXXZ();
}

/*
==============
AllocPreload_ScriptableEventSoundDef
==============
*/

ScriptableEventSoundDef *__fastcall AllocPreload_ScriptableEventSoundDef()
{
  return ?AllocPreload_ScriptableEventSoundDef@@YAPEAUScriptableEventSoundDef@@XZ();
}

/*
==============
Preload_ScriptableEventScriptDefArray
==============
*/

void __fastcall Preload_ScriptableEventScriptDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventScriptDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventExplosionDefArray
==============
*/

void __fastcall Load_ScriptableEventExplosionDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventExplosionDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventScreenshakeDefStream
==============
*/

void __fastcall Preload_ScriptableEventScreenshakeDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventScreenshakeDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ScriptableStateDef
==============
*/

void Load_ProcessStructLayout_ScriptableStateDef(void)
{
  ?Load_ProcessStructLayout_ScriptableStateDef@@YAXXZ();
}

/*
==============
Load_ScriptableStateDefStream
==============
*/

void __fastcall Load_ScriptableStateDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableStateDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableStateHealthDefArray
==============
*/

void __fastcall Preload_ScriptableStateHealthDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableStateHealthDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_Scriptable_ShaderParamTypeStream
==============
*/

void __fastcall Postload_Scriptable_ShaderParamTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_Scriptable_ShaderParamTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableMapEntsStream
==============
*/

void __fastcall Load_ScriptableMapEntsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableMapEntsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ScriptableDefPtr
==============
*/

ScriptableDef **__fastcall AllocLoad_ScriptableDefPtr()
{
  return ?AllocLoad_ScriptableDefPtr@@YAPEAPEAUScriptableDef@@XZ();
}

/*
==============
AllocLoad_ScriptableEventStateChangeDef
==============
*/

ScriptableEventStateChangeDef *__fastcall AllocLoad_ScriptableEventStateChangeDef()
{
  return ?AllocLoad_ScriptableEventStateChangeDef@@YAPEAUScriptableEventStateChangeDef@@XZ();
}

/*
==============
Load_ScriptableEventPlayMayhemDefArray
==============
*/

void __fastcall Load_ScriptableEventPlayMayhemDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventPlayMayhemDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptablePartReferenceArray
==============
*/

int __fastcall Mark_ScriptablePartReferenceArray(const unsigned __int64 count)
{
  return ?Mark_ScriptablePartReferenceArray@@YAH_K@Z(count);
}

/*
==============
Mark_ScriptableEventMoveDefArray
==============
*/

int __fastcall Mark_ScriptableEventMoveDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventMoveDefArray@@YAH_K@Z(count);
}

/*
==============
AllocPostload_ScriptableEventSpawnDynentDef
==============
*/

ScriptableEventSpawnDynentDef *__fastcall AllocPostload_ScriptableEventSpawnDynentDef()
{
  return ?AllocPostload_ScriptableEventSpawnDynentDef@@YAPEAUScriptableEventSpawnDynentDef@@XZ();
}

/*
==============
AllocPostload_ScriptableEventWaitDef
==============
*/

ScriptableEventWaitDef *__fastcall AllocPostload_ScriptableEventWaitDef()
{
  return ?AllocPostload_ScriptableEventWaitDef@@YAPEAUScriptableEventWaitDef@@XZ();
}

/*
==============
Preload_ScriptableDamageTagOverrideStream
==============
*/

void __fastcall Preload_ScriptableDamageTagOverrideStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableDamageTagOverrideStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventRandomDefStream
==============
*/

void __fastcall Postload_ScriptableEventRandomDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventRandomDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventObjectiveDef
==============
*/

void __fastcall Load_ScriptableEventObjectiveDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventObjectiveDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ScriptableEventApplyConstantAngularForceDef
==============
*/

void __fastcall Load_ScriptableEventApplyConstantAngularForceDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventApplyConstantAngularForceDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_Scriptable_EventType
==============
*/

int __fastcall Mark_Scriptable_EventType()
{
  return ?Mark_Scriptable_EventType@@YAHXZ();
}

/*
==============
Load_ScriptableEventDefArray
==============
*/

void __fastcall Load_ScriptableEventDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableDefStream
==============
*/

void __fastcall Load_ScriptableDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ScriptableEventHideShowBoneDef
==============
*/

ScriptableEventHideShowBoneDef *__fastcall AllocPostload_ScriptableEventHideShowBoneDef()
{
  return ?AllocPostload_ScriptableEventHideShowBoneDef@@YAPEAUScriptableEventHideShowBoneDef@@XZ();
}

/*
==============
AllocPreload_ScriptableEventTeamSelectorDef
==============
*/

ScriptableEventTeamSelectorDef *__fastcall AllocPreload_ScriptableEventTeamSelectorDef()
{
  return ?AllocPreload_ScriptableEventTeamSelectorDef@@YAPEAUScriptableEventTeamSelectorDef@@XZ();
}

/*
==============
Load_ScriptableEventTeamSelectorDefArray
==============
*/

void __fastcall Load_ScriptableEventTeamSelectorDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventTeamSelectorDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventDlc1DefStream
==============
*/

void __fastcall Postload_ScriptableEventDlc1DefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventDlc1DefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableModelUnion
==============
*/

void __fastcall Postload_ScriptableModelUnion(const DBStreamStart streamStart)
{
  ?Postload_ScriptableModelUnion@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ScriptableEventApplyAngularForceDefStream
==============
*/

void __fastcall Postload_ScriptableEventApplyAngularForceDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventApplyAngularForceDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventPartDamageDef
==============
*/

void __fastcall Load_ScriptableEventPartDamageDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventPartDamageDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ScriptableStateUsableDef
==============
*/

void __fastcall Preload_ScriptableStateUsableDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableStateUsableDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ScriptableEventApplyConstantAngularForceDef
==============
*/

ScriptableEventApplyConstantAngularForceDef *__fastcall AllocLoad_ScriptableEventApplyConstantAngularForceDef()
{
  return ?AllocLoad_ScriptableEventApplyConstantAngularForceDef@@YAPEAUScriptableEventApplyConstantAngularForceDef@@XZ();
}

/*
==============
Postload_ScriptableEventSpatialDisableDef
==============
*/

void __fastcall Postload_ScriptableEventSpatialDisableDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventSpatialDisableDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ScriptableEventExplosionDef
==============
*/

void __fastcall Postload_ScriptableEventExplosionDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventExplosionDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ScriptableEventSoundDef
==============
*/

ScriptableEventSoundDef *__fastcall AllocLoad_ScriptableEventSoundDef()
{
  return ?AllocLoad_ScriptableEventSoundDef@@YAPEAUScriptableEventSoundDef@@XZ();
}

/*
==============
Postload_ScriptableEventPartDamageDef
==============
*/

void __fastcall Postload_ScriptableEventPartDamageDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventPartDamageDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_ScriptableEventSetMayhemDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventSetMayhemDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventSetMayhemDef@@YAXXZ();
}

/*
==============
Preload_Scriptable_EventTypeStream
==============
*/

void __fastcall Preload_Scriptable_EventTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_Scriptable_EventTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_Scriptable_EventSun_Data
==============
*/

void Load_ProcessStructLayout_Scriptable_EventSun_Data(void)
{
  ?Load_ProcessStructLayout_Scriptable_EventSun_Data@@YAXXZ();
}

/*
==============
Load_ScriptableEventPartDamageDefArray
==============
*/

void __fastcall Load_ScriptableEventPartDamageDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventPartDamageDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ScriptableStateScriptedDef
==============
*/

ScriptableStateScriptedDef *__fastcall AllocLoad_ScriptableStateScriptedDef()
{
  return ?AllocLoad_ScriptableStateScriptedDef@@YAPEAUScriptableStateScriptedDef@@XZ();
}

/*
==============
Preload_ScriptableEventDisablePhysicsSubShapeDefStream
==============
*/

void __fastcall Preload_ScriptableEventDisablePhysicsSubShapeDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventDisablePhysicsSubShapeDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_Scriptable_AttackersArray
==============
*/

void __fastcall Load_Scriptable_AttackersArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_Scriptable_AttackersArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableEventDisablePhysicsSubShapeDef
==============
*/

int __fastcall Mark_ScriptableEventDisablePhysicsSubShapeDef()
{
  return ?Mark_ScriptableEventDisablePhysicsSubShapeDef@@YAHXZ();
}

/*
==============
Preload_ScriptableEventExplosionDefStream
==============
*/

void __fastcall Preload_ScriptableEventExplosionDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventExplosionDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableEventSunDefArray
==============
*/

int __fastcall Mark_ScriptableEventSunDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventSunDefArray@@YAH_K@Z(count);
}

/*
==============
Mark_ScriptableEventMaterialOverrideDefArray
==============
*/

int __fastcall Mark_ScriptableEventMaterialOverrideDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventMaterialOverrideDefArray@@YAH_K@Z(count);
}

/*
==============
AllocPostload_ScriptableEventSpatialDisableDef
==============
*/

ScriptableEventSpatialDisableDef *__fastcall AllocPostload_ScriptableEventSpatialDisableDef()
{
  return ?AllocPostload_ScriptableEventSpatialDisableDef@@YAPEAUScriptableEventSpatialDisableDef@@XZ();
}

/*
==============
Preload_ScriptableEventGravityArcDefArray
==============
*/

void __fastcall Preload_ScriptableEventGravityArcDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventGravityArcDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ScriptableEventSetMayhemDef
==============
*/

ScriptableEventSetMayhemDef *__fastcall AllocPreload_ScriptableEventSetMayhemDef()
{
  return ?AllocPreload_ScriptableEventSetMayhemDef@@YAPEAUScriptableEventSetMayhemDef@@XZ();
}

/*
==============
AllocPostload_ScriptableStateScriptedDef
==============
*/

ScriptableStateScriptedDef *__fastcall AllocPostload_ScriptableStateScriptedDef()
{
  return ?AllocPostload_ScriptableStateScriptedDef@@YAPEAUScriptableStateScriptedDef@@XZ();
}

/*
==============
AllocPreload_ScriptableEventChunkDynentDef
==============
*/

ScriptableEventChunkDynentDef *__fastcall AllocPreload_ScriptableEventChunkDynentDef()
{
  return ?AllocPreload_ScriptableEventChunkDynentDef@@YAPEAUScriptableEventChunkDynentDef@@XZ();
}

/*
==============
Preload_ScriptableEventChunkDynentDef
==============
*/

void __fastcall Preload_ScriptableEventChunkDynentDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventChunkDynentDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ScriptableEventAnonymousDefStream
==============
*/

void __fastcall Postload_ScriptableEventAnonymousDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventAnonymousDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventViewmodelChangeImageDefArray
==============
*/

void __fastcall Preload_ScriptableEventViewmodelChangeImageDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventViewmodelChangeImageDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventChunkDynentDef
==============
*/

void __fastcall Load_ScriptableEventChunkDynentDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventChunkDynentDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ScriptableEventModelDef
==============
*/

void __fastcall Load_ScriptableEventModelDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventModelDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_Scriptable_DamageCause
==============
*/

Scriptable_DamageCause *__fastcall AllocPostload_Scriptable_DamageCause()
{
  return ?AllocPostload_Scriptable_DamageCause@@YAPEAW4Scriptable_DamageCause@@XZ();
}

/*
==============
AllocPostload_ScriptableEventObjectiveDef
==============
*/

ScriptableEventObjectiveDef *__fastcall AllocPostload_ScriptableEventObjectiveDef()
{
  return ?AllocPostload_ScriptableEventObjectiveDef@@YAPEAUScriptableEventObjectiveDef@@XZ();
}

/*
==============
Load_ScriptableEventModelDefStream
==============
*/

void __fastcall Load_ScriptableEventModelDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventModelDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventDlc1DefArray
==============
*/

void __fastcall Preload_ScriptableEventDlc1DefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventDlc1DefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventAddModelDefArray
==============
*/

void __fastcall Preload_ScriptableEventAddModelDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventAddModelDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventPFXDef
==============
*/

void __fastcall Load_ScriptableEventPFXDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventPFXDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_Scriptable_MayhemActionArray
==============
*/

int __fastcall Mark_Scriptable_MayhemActionArray(const unsigned __int64 count)
{
  return ?Mark_Scriptable_MayhemActionArray@@YAH_K@Z(count);
}

/*
==============
Preload_ScriptableReservedDynentsStream
==============
*/

void __fastcall Preload_ScriptableReservedDynentsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableReservedDynentsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventScreenshakeDefArray
==============
*/

void __fastcall Postload_ScriptableEventScreenshakeDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventScreenshakeDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ScriptableEventRumbleDef
==============
*/

ScriptableEventRumbleDef *__fastcall AllocLoad_ScriptableEventRumbleDef()
{
  return ?AllocLoad_ScriptableEventRumbleDef@@YAPEAUScriptableEventRumbleDef@@XZ();
}

/*
==============
Postload_ScriptableEventAddModelDefArray
==============
*/

void __fastcall Postload_ScriptableEventAddModelDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventAddModelDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableMapEnts
==============
*/

void __fastcall Preload_ScriptableMapEnts(const DBStreamStart streamStart)
{
  ?Preload_ScriptableMapEnts@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ScriptableEventStateChangeDef
==============
*/

void __fastcall Load_ScriptableEventStateChangeDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventStateChangeDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ScriptableEventRandomDef
==============
*/

ScriptableEventRandomDef *__fastcall AllocLoad_ScriptableEventRandomDef()
{
  return ?AllocLoad_ScriptableEventRandomDef@@YAPEAUScriptableEventRandomDef@@XZ();
}

/*
==============
Postload_Scriptable_DamageCause
==============
*/

void __fastcall Postload_Scriptable_DamageCause(const DBStreamStart streamStart)
{
  ?Postload_Scriptable_DamageCause@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ScriptablePhysicsLimits
==============
*/

int __fastcall Mark_ScriptablePhysicsLimits()
{
  return ?Mark_ScriptablePhysicsLimits@@YAHXZ();
}

/*
==============
AllocPreload_ScriptableEventFootstepDef
==============
*/

ScriptableEventFootstepDef *__fastcall AllocPreload_ScriptableEventFootstepDef()
{
  return ?AllocPreload_ScriptableEventFootstepDef@@YAPEAUScriptableEventFootstepDef@@XZ();
}

/*
==============
Preload_Scriptable_ShaderParamType
==============
*/

void __fastcall Preload_Scriptable_ShaderParamType(const DBStreamStart streamStart)
{
  ?Preload_Scriptable_ShaderParamType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ScriptableEventTeamSelectorDefStream
==============
*/

void __fastcall Load_ScriptableEventTeamSelectorDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventTeamSelectorDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_Scriptable_StateTypeStream
==============
*/

void __fastcall Postload_Scriptable_StateTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_Scriptable_StateTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableReservedDynentStream
==============
*/

void __fastcall Preload_ScriptableReservedDynentStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableReservedDynentStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventSunDefStream
==============
*/

void __fastcall Postload_ScriptableEventSunDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventSunDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableEventHoverDefArray
==============
*/

int __fastcall Mark_ScriptableEventHoverDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventHoverDefArray@@YAH_K@Z(count);
}

/*
==============
Postload_Scriptable_StateTypeArray
==============
*/

void __fastcall Postload_Scriptable_StateTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_Scriptable_StateTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableEventScreenshakeDef
==============
*/

int __fastcall Mark_ScriptableEventScreenshakeDef()
{
  return ?Mark_ScriptableEventScreenshakeDef@@YAHXZ();
}

/*
==============
Postload_ScriptableEventStateChangeDef
==============
*/

void __fastcall Postload_ScriptableEventStateChangeDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventStateChangeDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_Scriptable_ShaderParamTypeArray
==============
*/

int __fastcall Mark_Scriptable_ShaderParamTypeArray(const unsigned __int64 count)
{
  return ?Mark_Scriptable_ShaderParamTypeArray@@YAH_K@Z(count);
}

/*
==============
Postload_ScriptableEventChunkDynentDefArray
==============
*/

void __fastcall Postload_ScriptableEventChunkDynentDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventChunkDynentDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventDefUnion
==============
*/

void __fastcall Preload_ScriptableEventDefUnion(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventDefUnion@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ScriptableEventMoveDef
==============
*/

ScriptableEventMoveDef *__fastcall AllocLoad_ScriptableEventMoveDef()
{
  return ?AllocLoad_ScriptableEventMoveDef@@YAPEAUScriptableEventMoveDef@@XZ();
}

/*
==============
Load_Scriptable_TeamFilterArray
==============
*/

void __fastcall Load_Scriptable_TeamFilterArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_Scriptable_TeamFilterArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventGravityArcDefStream
==============
*/

void __fastcall Preload_ScriptableEventGravityArcDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventGravityArcDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableDataTypeArray
==============
*/

int __fastcall Mark_ScriptableDataTypeArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableDataTypeArray@@YAH_K@Z(count);
}

/*
==============
Preload_ScriptableEventWaitDefArray
==============
*/

void __fastcall Preload_ScriptableEventWaitDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventWaitDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableInstanceArray
==============
*/

void __fastcall Postload_ScriptableInstanceArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableInstanceArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventFootstepDefStream
==============
*/

void __fastcall Load_ScriptableEventFootstepDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventFootstepDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ScriptableEventTeamSelectorDef
==============
*/

ScriptableEventTeamSelectorDef *__fastcall AllocPostload_ScriptableEventTeamSelectorDef()
{
  return ?AllocPostload_ScriptableEventTeamSelectorDef@@YAPEAUScriptableEventTeamSelectorDef@@XZ();
}

/*
==============
Preload_ScriptableEventSpatialDisableDef
==============
*/

void __fastcall Preload_ScriptableEventSpatialDisableDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventSpatialDisableDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ScriptableEventFootstepDefArray
==============
*/

void __fastcall Preload_ScriptableEventFootstepDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventFootstepDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ScriptableEventDlc1Def
==============
*/

ScriptableEventDlc1Def *__fastcall AllocPreload_ScriptableEventDlc1Def()
{
  return ?AllocPreload_ScriptableEventDlc1Def@@YAPEAUScriptableEventDlc1Def@@XZ();
}

/*
==============
Load_ScriptableDefPtrArray
==============
*/

void __fastcall Load_ScriptableDefPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableDefPtrArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_Scriptable_EventTypeArray
==============
*/

void __fastcall Load_Scriptable_EventTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_Scriptable_EventTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ScriptableEventDef
==============
*/

ScriptableEventDef *__fastcall AllocLoad_ScriptableEventDef()
{
  return ?AllocLoad_ScriptableEventDef@@YAPEAUScriptableEventDef@@XZ();
}

/*
==============
Postload_ScriptableNoteTrackDefStream
==============
*/

void __fastcall Postload_ScriptableNoteTrackDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableNoteTrackDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventScriptDefStream
==============
*/

void __fastcall Load_ScriptableEventScriptDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventScriptDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_Scriptable_AttackersStream
==============
*/

void __fastcall Load_Scriptable_AttackersStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_Scriptable_AttackersStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ScriptablePartDef
==============
*/

ScriptablePartDef *__fastcall AllocPreload_ScriptablePartDef()
{
  return ?AllocPreload_ScriptablePartDef@@YAPEAUScriptablePartDef@@XZ();
}

/*
==============
AllocLoad_ScriptableEventViewmodelShaderParamDef
==============
*/

ScriptableEventViewmodelShaderParamDef *__fastcall AllocLoad_ScriptableEventViewmodelShaderParamDef()
{
  return ?AllocLoad_ScriptableEventViewmodelShaderParamDef@@YAPEAUScriptableEventViewmodelShaderParamDef@@XZ();
}

/*
==============
Mark_ScriptableEventApplyAngularForceDef
==============
*/

int __fastcall Mark_ScriptableEventApplyAngularForceDef()
{
  return ?Mark_ScriptableEventApplyAngularForceDef@@YAHXZ();
}

/*
==============
Load_ScriptableEventHoverDef
==============
*/

void __fastcall Load_ScriptableEventHoverDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventHoverDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_ScriptableEventAnonymousDef
==============
*/

ScriptableEventAnonymousDef *__fastcall AllocPostload_ScriptableEventAnonymousDef()
{
  return ?AllocPostload_ScriptableEventAnonymousDef@@YAPEAUScriptableEventAnonymousDef@@XZ();
}

/*
==============
Mark_ScriptableEventApplyForceDef
==============
*/

int __fastcall Mark_ScriptableEventApplyForceDef()
{
  return ?Mark_ScriptableEventApplyForceDef@@YAHXZ();
}

/*
==============
AllocPostload_ScriptableMapEnts
==============
*/

ScriptableMapEnts *__fastcall AllocPostload_ScriptableMapEnts()
{
  return ?AllocPostload_ScriptableMapEnts@@YAPEAUScriptableMapEnts@@XZ();
}

/*
==============
Postload_ScriptableDefPtr
==============
*/

void __fastcall Postload_ScriptableDefPtr(const DBStreamStart streamStart)
{
  ?Postload_ScriptableDefPtr@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ScriptableDefArray
==============
*/

void __fastcall Load_ScriptableDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventApplyForceDefArray
==============
*/

void __fastcall Load_ScriptableEventApplyForceDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventApplyForceDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableReservedDynentsArray
==============
*/

void __fastcall Preload_ScriptableReservedDynentsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableReservedDynentsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableModelUnionStream
==============
*/

void __fastcall Postload_ScriptableModelUnionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableModelUnionStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventBaseDef
==============
*/

void __fastcall Preload_ScriptableEventBaseDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventBaseDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ScriptableNoteTrackDef
==============
*/

void __fastcall Load_ScriptableNoteTrackDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableNoteTrackDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_ScriptableEventDefUnion
==============
*/

void Load_ProcessStructLayout_ScriptableEventDefUnion(void)
{
  ?Load_ProcessStructLayout_ScriptableEventDefUnion@@YAXXZ();
}

/*
==============
Load_ProcessStructLayout_ScriptableInstance
==============
*/

void Load_ProcessStructLayout_ScriptableInstance(void)
{
  ?Load_ProcessStructLayout_ScriptableInstance@@YAXXZ();
}

/*
==============
Preload_ScriptableDef
==============
*/

void __fastcall Preload_ScriptableDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ScriptableReservedDynent
==============
*/

ScriptableReservedDynent *__fastcall AllocPreload_ScriptableReservedDynent()
{
  return ?AllocPreload_ScriptableReservedDynent@@YAPEAUScriptableReservedDynent@@XZ();
}

/*
==============
Preload_ScriptableEventCompassIconDefArray
==============
*/

void __fastcall Preload_ScriptableEventCompassIconDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventCompassIconDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableDamageTagOverrideArray
==============
*/

void __fastcall Load_ScriptableDamageTagOverrideArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableDamageTagOverrideArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ScriptableStateUsableDef
==============
*/

ScriptableStateUsableDef *__fastcall AllocLoad_ScriptableStateUsableDef()
{
  return ?AllocLoad_ScriptableStateUsableDef@@YAPEAUScriptableStateUsableDef@@XZ();
}

/*
==============
Preload_ScriptableEventExplosionDefArray
==============
*/

void __fastcall Preload_ScriptableEventExplosionDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventExplosionDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventSpawnDynentDefArray
==============
*/

void __fastcall Preload_ScriptableEventSpawnDynentDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventSpawnDynentDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableStateHealthDef
==============
*/

void __fastcall Load_ScriptableStateHealthDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableStateHealthDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ScriptableModelUnionArray
==============
*/

void __fastcall Load_ScriptableModelUnionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableModelUnionArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableReservedDynentStream
==============
*/

void __fastcall Postload_ScriptableReservedDynentStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableReservedDynentStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_Scriptable_ImageId
==============
*/

void __fastcall Preload_Scriptable_ImageId(const DBStreamStart streamStart)
{
  ?Preload_Scriptable_ImageId@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ScriptableEventModelDefStream
==============
*/

void __fastcall Preload_ScriptableEventModelDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventModelDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventSunDef
==============
*/

void __fastcall Load_ScriptableEventSunDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventSunDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ScriptableEventVehicleBlowUpTireDef
==============
*/

ScriptableEventVehicleBlowUpTireDef *__fastcall AllocPreload_ScriptableEventVehicleBlowUpTireDef()
{
  return ?AllocPreload_ScriptableEventVehicleBlowUpTireDef@@YAPEAUScriptableEventVehicleBlowUpTireDef@@XZ();
}

/*
==============
AllocLoad_ScriptableEventCompassIconDef
==============
*/

ScriptableEventCompassIconDef *__fastcall AllocLoad_ScriptableEventCompassIconDef()
{
  return ?AllocLoad_ScriptableEventCompassIconDef@@YAPEAUScriptableEventCompassIconDef@@XZ();
}

/*
==============
AllocLoad_ScriptableEventLightDef
==============
*/

ScriptableEventLightDef *__fastcall AllocLoad_ScriptableEventLightDef()
{
  return ?AllocLoad_ScriptableEventLightDef@@YAPEAUScriptableEventLightDef@@XZ();
}

/*
==============
Postload_ScriptableEventDefUnion
==============
*/

void __fastcall Postload_ScriptableEventDefUnion(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventDefUnion@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ScriptableEventGravityArcDef
==============
*/

void __fastcall Postload_ScriptableEventGravityArcDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventGravityArcDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ScriptableStateSimpleDef
==============
*/

ScriptableStateSimpleDef *__fastcall AllocLoad_ScriptableStateSimpleDef()
{
  return ?AllocLoad_ScriptableStateSimpleDef@@YAPEAUScriptableStateSimpleDef@@XZ();
}

/*
==============
Postload_ScriptableEventModelDef
==============
*/

void __fastcall Postload_ScriptableEventModelDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventModelDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_Scriptable_StateType
==============
*/

void Load_ProcessStructLayout_Scriptable_StateType(void)
{
  ?Load_ProcessStructLayout_Scriptable_StateType@@YAXXZ();
}

/*
==============
Load_ScriptableEventViewmodelChangeImageDefStream
==============
*/

void __fastcall Load_ScriptableEventViewmodelChangeImageDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventViewmodelChangeImageDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventObjectiveDefArray
==============
*/

void __fastcall Postload_ScriptableEventObjectiveDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventObjectiveDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableStateBaseDefArray
==============
*/

void __fastcall Preload_ScriptableStateBaseDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableStateBaseDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_Scriptable_MayhemAction
==============
*/

void __fastcall Preload_Scriptable_MayhemAction(const DBStreamStart streamStart)
{
  ?Preload_Scriptable_MayhemAction@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ScriptableEventScriptDef
==============
*/

ScriptableEventScriptDef *__fastcall AllocPreload_ScriptableEventScriptDef()
{
  return ?AllocPreload_ScriptableEventScriptDef@@YAPEAUScriptableEventScriptDef@@XZ();
}

/*
==============
AllocPostload_ScriptableEventHoverDef
==============
*/

ScriptableEventHoverDef *__fastcall AllocPostload_ScriptableEventHoverDef()
{
  return ?AllocPostload_ScriptableEventHoverDef@@YAPEAUScriptableEventHoverDef@@XZ();
}

/*
==============
Load_ProcessStructLayout_ScriptableDefPtr
==============
*/

void Load_ProcessStructLayout_ScriptableDefPtr(void)
{
  ?Load_ProcessStructLayout_ScriptableDefPtr@@YAXXZ();
}

/*
==============
Load_ProcessStructLayout_Scriptable_MayhemAction
==============
*/

void Load_ProcessStructLayout_Scriptable_MayhemAction(void)
{
  ?Load_ProcessStructLayout_Scriptable_MayhemAction@@YAXXZ();
}

/*
==============
Preload_ScriptableEventMaterialOverrideDefStream
==============
*/

void __fastcall Preload_ScriptableEventMaterialOverrideDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventMaterialOverrideDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableEventDefUnionArray
==============
*/

int __fastcall Mark_ScriptableEventDefUnionArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventDefUnionArray@@YAH_K@Z(count);
}

/*
==============
Postload_ScriptableEventStateChangeDefArray
==============
*/

void __fastcall Postload_ScriptableEventStateChangeDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventStateChangeDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventSoundDef
==============
*/

void __fastcall Postload_ScriptableEventSoundDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventSoundDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ScriptableEventGravityArcDef
==============
*/

void __fastcall Preload_ScriptableEventGravityArcDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventGravityArcDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_Scriptable_StateTypeStream
==============
*/

void __fastcall Preload_Scriptable_StateTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_Scriptable_StateTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventPFXDef
==============
*/

void __fastcall Postload_ScriptableEventPFXDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventPFXDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ScriptableEventFootstepDefArray
==============
*/

int __fastcall Mark_ScriptableEventFootstepDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventFootstepDefArray@@YAH_K@Z(count);
}

/*
==============
Mark_ScriptableEventWaitDefArray
==============
*/

int __fastcall Mark_ScriptableEventWaitDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventWaitDefArray@@YAH_K@Z(count);
}

/*
==============
Load_ScriptablePartReferenceArray
==============
*/

void __fastcall Load_ScriptablePartReferenceArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptablePartReferenceArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventRumbleDef
==============
*/

void __fastcall Postload_ScriptableEventRumbleDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventRumbleDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ScriptableEventChunkDynentDef
==============
*/

ScriptableEventChunkDynentDef *__fastcall AllocLoad_ScriptableEventChunkDynentDef()
{
  return ?AllocLoad_ScriptableEventChunkDynentDef@@YAPEAUScriptableEventChunkDynentDef@@XZ();
}

/*
==============
Postload_ScriptableEventNoteTrackDefStream
==============
*/

void __fastcall Postload_ScriptableEventNoteTrackDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventNoteTrackDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ScriptableModelUnion
==============
*/

ScriptableModelUnion *__fastcall AllocLoad_ScriptableModelUnion()
{
  return ?AllocLoad_ScriptableModelUnion@@YAPEATScriptableModelUnion@@XZ();
}

/*
==============
AllocLoad_ScriptablePhysicsLimits
==============
*/

ScriptablePhysicsLimits *__fastcall AllocLoad_ScriptablePhysicsLimits()
{
  return ?AllocLoad_ScriptablePhysicsLimits@@YAPEAUScriptablePhysicsLimits@@XZ();
}

/*
==============
Postload_ScriptableReservedDynentArray
==============
*/

void __fastcall Postload_ScriptableReservedDynentArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableReservedDynentArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_Scriptable_Attackers
==============
*/

void __fastcall Postload_Scriptable_Attackers(const DBStreamStart streamStart)
{
  ?Postload_Scriptable_Attackers@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ScriptableEventDynamicBoneNoiseCurveDef
==============
*/

ScriptableEventDynamicBoneNoiseCurveDef *__fastcall AllocPreload_ScriptableEventDynamicBoneNoiseCurveDef()
{
  return ?AllocPreload_ScriptableEventDynamicBoneNoiseCurveDef@@YAPEAUScriptableEventDynamicBoneNoiseCurveDef@@XZ();
}

/*
==============
Postload_ScriptableEventLightDefStream
==============
*/

void __fastcall Postload_ScriptableEventLightDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventLightDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ScriptableEventMaterialOverrideDef
==============
*/

ScriptableEventMaterialOverrideDef *__fastcall AllocLoad_ScriptableEventMaterialOverrideDef()
{
  return ?AllocLoad_ScriptableEventMaterialOverrideDef@@YAPEAUScriptableEventMaterialOverrideDef@@XZ();
}

/*
==============
Preload_ScriptableEventAddModelDef
==============
*/

void __fastcall Preload_ScriptableEventAddModelDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventAddModelDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ScriptablePartDefStream
==============
*/

void __fastcall Postload_ScriptablePartDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptablePartDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ScriptableEventPFXDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventPFXDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventPFXDef@@YAXXZ();
}

/*
==============
AllocPostload_Scriptable_Attackers
==============
*/

Scriptable_Attackers *__fastcall AllocPostload_Scriptable_Attackers()
{
  return ?AllocPostload_Scriptable_Attackers@@YAPEAW4Scriptable_Attackers@@XZ();
}

/*
==============
Load_ScriptableEventChunkDynentDefStream
==============
*/

void __fastcall Load_ScriptableEventChunkDynentDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventChunkDynentDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventAnonymousDef
==============
*/

void __fastcall Postload_ScriptableEventAnonymousDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventAnonymousDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ScriptableEventMoveDef
==============
*/

void __fastcall Preload_ScriptableEventMoveDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventMoveDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ScriptableEventAnimationDef
==============
*/

ScriptableEventAnimationDef *__fastcall AllocPreload_ScriptableEventAnimationDef()
{
  return ?AllocPreload_ScriptableEventAnimationDef@@YAPEAUScriptableEventAnimationDef@@XZ();
}

/*
==============
Preload_Scriptable_ImageIdStream
==============
*/

void __fastcall Preload_Scriptable_ImageIdStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_Scriptable_ImageIdStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_Scriptable_MaterialOverrideTypeStream
==============
*/

void __fastcall Postload_Scriptable_MaterialOverrideTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_Scriptable_MaterialOverrideTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ScriptableEventSoundDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventSoundDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventSoundDef@@YAXXZ();
}

/*
==============
Preload_ScriptableEventCompassIconDef
==============
*/

void __fastcall Preload_ScriptableEventCompassIconDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventCompassIconDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ScriptableEventObjectiveDef
==============
*/

int __fastcall Mark_ScriptableEventObjectiveDef()
{
  return ?Mark_ScriptableEventObjectiveDef@@YAHXZ();
}

/*
==============
Load_ScriptableEventCompassIconDef
==============
*/

void __fastcall Load_ScriptableEventCompassIconDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventCompassIconDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_Scriptable_TeamFilter
==============
*/

void Load_ProcessStructLayout_Scriptable_TeamFilter(void)
{
  ?Load_ProcessStructLayout_Scriptable_TeamFilter@@YAXXZ();
}

/*
==============
Preload_ScriptableEventSetMayhemDefStream
==============
*/

void __fastcall Preload_ScriptableEventSetMayhemDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventSetMayhemDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventHoverDefArray
==============
*/

void __fastcall Load_ScriptableEventHoverDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventHoverDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventViewmodelShaderParamDef
==============
*/

void __fastcall Load_ScriptableEventViewmodelShaderParamDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventViewmodelShaderParamDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ScriptableNoteTrackDef
==============
*/

int __fastcall Mark_ScriptableNoteTrackDef()
{
  return ?Mark_ScriptableNoteTrackDef@@YAHXZ();
}

/*
==============
Preload_ScriptableEventSetMayhemDef
==============
*/

void __fastcall Preload_ScriptableEventSetMayhemDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventSetMayhemDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_ScriptableEventRandomDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventRandomDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventRandomDef@@YAXXZ();
}

/*
==============
Postload_ScriptableEventSetMayhemDefArray
==============
*/

void __fastcall Postload_ScriptableEventSetMayhemDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventSetMayhemDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ScriptableEventApplyForceDef
==============
*/

ScriptableEventApplyForceDef *__fastcall AllocLoad_ScriptableEventApplyForceDef()
{
  return ?AllocLoad_ScriptableEventApplyForceDef@@YAPEAUScriptableEventApplyForceDef@@XZ();
}

/*
==============
AllocLoad_ScriptableEventCollisionDef
==============
*/

ScriptableEventCollisionDef *__fastcall AllocLoad_ScriptableEventCollisionDef()
{
  return ?AllocLoad_ScriptableEventCollisionDef@@YAPEAUScriptableEventCollisionDef@@XZ();
}

/*
==============
Mark_ScriptableEventSetMayhemDefArray
==============
*/

int __fastcall Mark_ScriptableEventSetMayhemDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventSetMayhemDefArray@@YAH_K@Z(count);
}

/*
==============
Preload_ScriptableEventObjectiveDef
==============
*/

void __fastcall Preload_ScriptableEventObjectiveDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventObjectiveDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ScriptableEventHoverDefStream
==============
*/

void __fastcall Postload_ScriptableEventHoverDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventHoverDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventScreenshakeDefStream
==============
*/

void __fastcall Postload_ScriptableEventScreenshakeDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventScreenshakeDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventPartDamageDefStream
==============
*/

void __fastcall Postload_ScriptableEventPartDamageDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventPartDamageDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_Scriptable_TeamFilter
==============
*/

Scriptable_TeamFilter *__fastcall AllocPreload_Scriptable_TeamFilter()
{
  return ?AllocPreload_Scriptable_TeamFilter@@YAPEAW4Scriptable_TeamFilter@@XZ();
}

/*
==============
Postload_ScriptableEventSetMayhemDef
==============
*/

void __fastcall Postload_ScriptableEventSetMayhemDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventSetMayhemDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ScriptableEventRumbleDefStream
==============
*/

void __fastcall Preload_ScriptableEventRumbleDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventRumbleDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ScriptableEventScreenshakeDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventScreenshakeDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventScreenshakeDef@@YAXXZ();
}

/*
==============
Load_ScriptableEventApplyConstantAngularForceDefStream
==============
*/

void __fastcall Load_ScriptableEventApplyConstantAngularForceDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventApplyConstantAngularForceDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventScriptDamageDefStream
==============
*/

void __fastcall Preload_ScriptableEventScriptDamageDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventScriptDamageDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_Scriptable_Attackers
==============
*/

void Load_ProcessStructLayout_Scriptable_Attackers(void)
{
  ?Load_ProcessStructLayout_Scriptable_Attackers@@YAXXZ();
}

/*
==============
Postload_Scriptable_AttackersStream
==============
*/

void __fastcall Postload_Scriptable_AttackersStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_Scriptable_AttackersStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableEventChunkDynentDefArray
==============
*/

int __fastcall Mark_ScriptableEventChunkDynentDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventChunkDynentDefArray@@YAH_K@Z(count);
}

/*
==============
Postload_ScriptableEventExplosionDefArray
==============
*/

void __fastcall Postload_ScriptableEventExplosionDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventExplosionDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableStateUsableDef
==============
*/

void __fastcall Load_ScriptableStateUsableDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableStateUsableDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ScriptableEventApplyAngularForceDef
==============
*/

void __fastcall Postload_ScriptableEventApplyAngularForceDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventApplyAngularForceDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ScriptableDamageTagOverride
==============
*/

ScriptableDamageTagOverride *__fastcall AllocPreload_ScriptableDamageTagOverride()
{
  return ?AllocPreload_ScriptableDamageTagOverride@@YAPEAUScriptableDamageTagOverride@@XZ();
}

/*
==============
Load_ScriptableEventAnonymousDef
==============
*/

void __fastcall Load_ScriptableEventAnonymousDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventAnonymousDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ScriptableEventRandomDef
==============
*/

int __fastcall Mark_ScriptableEventRandomDef()
{
  return ?Mark_ScriptableEventRandomDef@@YAHXZ();
}

/*
==============
AllocPostload_ScriptableStateSimpleDef
==============
*/

ScriptableStateSimpleDef *__fastcall AllocPostload_ScriptableStateSimpleDef()
{
  return ?AllocPostload_ScriptableStateSimpleDef@@YAPEAUScriptableStateSimpleDef@@XZ();
}

/*
==============
AllocPostload_ScriptableEventGravityArcDef
==============
*/

ScriptableEventGravityArcDef *__fastcall AllocPostload_ScriptableEventGravityArcDef()
{
  return ?AllocPostload_ScriptableEventGravityArcDef@@YAPEAUScriptableEventGravityArcDef@@XZ();
}

/*
==============
AllocLoad_Scriptable_EventSun_Data
==============
*/

Scriptable_EventSun_Data *__fastcall AllocLoad_Scriptable_EventSun_Data()
{
  return ?AllocLoad_Scriptable_EventSun_Data@@YAPEAUScriptable_EventSun_Data@@XZ();
}

/*
==============
Load_ScriptableDefPtrStream
==============
*/

void __fastcall Load_ScriptableDefPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableDefPtrStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableStateSimpleDefArray
==============
*/

void __fastcall Preload_ScriptableStateSimpleDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableStateSimpleDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventMaterialOverrideDefArray
==============
*/

void __fastcall Load_ScriptableEventMaterialOverrideDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventMaterialOverrideDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableStateScriptedDef
==============
*/

void __fastcall Load_ScriptableStateScriptedDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableStateScriptedDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_Scriptable_EventType
==============
*/

Scriptable_EventType *__fastcall AllocPostload_Scriptable_EventType()
{
  return ?AllocPostload_Scriptable_EventType@@YAPEAW4Scriptable_EventType@@XZ();
}

/*
==============
AllocLoad_ScriptableEventApplyAngularForceDef
==============
*/

ScriptableEventApplyAngularForceDef *__fastcall AllocLoad_ScriptableEventApplyAngularForceDef()
{
  return ?AllocLoad_ScriptableEventApplyAngularForceDef@@YAPEAUScriptableEventApplyAngularForceDef@@XZ();
}

/*
==============
Load_ScriptableStateSimpleDef
==============
*/

void __fastcall Load_ScriptableStateSimpleDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableStateSimpleDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ScriptableEventSpatialDisableDefArray
==============
*/

int __fastcall Mark_ScriptableEventSpatialDisableDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventSpatialDisableDefArray@@YAH_K@Z(count);
}

/*
==============
Mark_ScriptableDamageTagOverrideArray
==============
*/

int __fastcall Mark_ScriptableDamageTagOverrideArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableDamageTagOverrideArray@@YAH_K@Z(count);
}

/*
==============
Postload_ScriptableEventAddModelDefStream
==============
*/

void __fastcall Postload_ScriptableEventAddModelDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventAddModelDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventMoveDef
==============
*/

void __fastcall Load_ScriptableEventMoveDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventMoveDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ScriptableStateHealthDef
==============
*/

ScriptableStateHealthDef *__fastcall AllocLoad_ScriptableStateHealthDef()
{
  return ?AllocLoad_ScriptableStateHealthDef@@YAPEAUScriptableStateHealthDef@@XZ();
}

/*
==============
Load_ScriptableEventRumbleDefArray
==============
*/

void __fastcall Load_ScriptableEventRumbleDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventRumbleDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventViewmodelShaderParamDef
==============
*/

void __fastcall Postload_ScriptableEventViewmodelShaderParamDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventViewmodelShaderParamDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ScriptableEventApplyConstantAngularForceDefArray
==============
*/

int __fastcall Mark_ScriptableEventApplyConstantAngularForceDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventApplyConstantAngularForceDefArray@@YAH_K@Z(count);
}

/*
==============
Postload_ScriptableEventWaitDefArray
==============
*/

void __fastcall Postload_ScriptableEventWaitDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventWaitDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_Scriptable_ImageIdArray
==============
*/

void __fastcall Postload_Scriptable_ImageIdArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_Scriptable_ImageIdArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableDefPtr
==============
*/

int __fastcall Mark_ScriptableDefPtr()
{
  return ?Mark_ScriptableDefPtr@@YAHXZ();
}

/*
==============
Preload_ScriptableEventCollisionDefStream
==============
*/

void __fastcall Preload_ScriptableEventCollisionDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventCollisionDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_Scriptable_EventSun_Data
==============
*/

void __fastcall Preload_Scriptable_EventSun_Data(const DBStreamStart streamStart)
{
  ?Preload_Scriptable_EventSun_Data@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ScriptableStateScriptedDefArray
==============
*/

int __fastcall Mark_ScriptableStateScriptedDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableStateScriptedDefArray@@YAH_K@Z(count);
}

/*
==============
AllocPostload_ScriptableEventCompassIconDef
==============
*/

ScriptableEventCompassIconDef *__fastcall AllocPostload_ScriptableEventCompassIconDef()
{
  return ?AllocPostload_ScriptableEventCompassIconDef@@YAPEAUScriptableEventCompassIconDef@@XZ();
}

/*
==============
Preload_ScriptableEventLightDefArray
==============
*/

void __fastcall Preload_ScriptableEventLightDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventLightDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableReservedDynentsArray
==============
*/

void __fastcall Load_ScriptableReservedDynentsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableReservedDynentsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventTeamSelectorDefArray
==============
*/

void __fastcall Preload_ScriptableEventTeamSelectorDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventTeamSelectorDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventSetMayhemDefArray
==============
*/

void __fastcall Preload_ScriptableEventSetMayhemDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventSetMayhemDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableInstanceStream
==============
*/

void __fastcall Load_ScriptableInstanceStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableInstanceStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ScriptableDef
==============
*/

ScriptableDef *__fastcall AllocPreload_ScriptableDef()
{
  return ?AllocPreload_ScriptableDef@@YAPEAUScriptableDef@@XZ();
}

/*
==============
AllocPreload_Scriptable_EventSun_Data
==============
*/

Scriptable_EventSun_Data *__fastcall AllocPreload_Scriptable_EventSun_Data()
{
  return ?AllocPreload_Scriptable_EventSun_Data@@YAPEAUScriptable_EventSun_Data@@XZ();
}

/*
==============
Preload_ScriptableEventCompassIconDefStream
==============
*/

void __fastcall Preload_ScriptableEventCompassIconDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventCompassIconDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableEventCollisionDefArray
==============
*/

int __fastcall Mark_ScriptableEventCollisionDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventCollisionDefArray@@YAH_K@Z(count);
}

/*
==============
Mark_Scriptable_DamageCauseArray
==============
*/

int __fastcall Mark_Scriptable_DamageCauseArray(const unsigned __int64 count)
{
  return ?Mark_Scriptable_DamageCauseArray@@YAH_K@Z(count);
}

/*
==============
Preload_ScriptableEventRumbleDef
==============
*/

void __fastcall Preload_ScriptableEventRumbleDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventRumbleDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ScriptableEventLightDefStream
==============
*/

void __fastcall Preload_ScriptableEventLightDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventLightDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_Scriptable_MaterialOverrideTypeStream
==============
*/

void __fastcall Preload_Scriptable_MaterialOverrideTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_Scriptable_MaterialOverrideTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventDynamicBoneNoiseCurveDefArray
==============
*/

void __fastcall Load_ScriptableEventDynamicBoneNoiseCurveDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventDynamicBoneNoiseCurveDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventChunkDynentDefArray
==============
*/

void __fastcall Load_ScriptableEventChunkDynentDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventChunkDynentDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventWaitDef
==============
*/

void __fastcall Preload_ScriptableEventWaitDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventWaitDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_Scriptable_MayhemActionArray
==============
*/

void __fastcall Load_Scriptable_MayhemActionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_Scriptable_MayhemActionArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ScriptableEventVehicleBlowUpTireDef
==============
*/

ScriptableEventVehicleBlowUpTireDef *__fastcall AllocLoad_ScriptableEventVehicleBlowUpTireDef()
{
  return ?AllocLoad_ScriptableEventVehicleBlowUpTireDef@@YAPEAUScriptableEventVehicleBlowUpTireDef@@XZ();
}

/*
==============
Load_ProcessStructLayout_ScriptableEventSpatialDisableDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventSpatialDisableDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventSpatialDisableDef@@YAXXZ();
}

/*
==============
Postload_ScriptableStateDefStream
==============
*/

void __fastcall Postload_ScriptableStateDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableStateDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventStateChangeDef
==============
*/

void __fastcall Preload_ScriptableEventStateChangeDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventStateChangeDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ScriptableEventPFXDef
==============
*/

int __fastcall Mark_ScriptableEventPFXDef()
{
  return ?Mark_ScriptableEventPFXDef@@YAHXZ();
}

/*
==============
AllocLoad_ScriptableDataType
==============
*/

ScriptableDataType *__fastcall AllocLoad_ScriptableDataType()
{
  return ?AllocLoad_ScriptableDataType@@YAPEAW4ScriptableDataType@@XZ();
}

/*
==============
Postload_ScriptableStateUsableDef
==============
*/

void __fastcall Postload_ScriptableStateUsableDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableStateUsableDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_Scriptable_TeamFilter
==============
*/

Scriptable_TeamFilter *__fastcall AllocLoad_Scriptable_TeamFilter()
{
  return ?AllocLoad_Scriptable_TeamFilter@@YAPEAW4Scriptable_TeamFilter@@XZ();
}

/*
==============
Preload_ScriptableEventClientViewSelectorDef
==============
*/

void __fastcall Preload_ScriptableEventClientViewSelectorDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventClientViewSelectorDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_ScriptableEventAddModelDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventAddModelDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventAddModelDef@@YAXXZ();
}

/*
==============
Postload_ScriptableEventApplyConstantForceDefArray
==============
*/

void __fastcall Postload_ScriptableEventApplyConstantForceDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventApplyConstantForceDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventVehicleBlowUpTireDef
==============
*/

void __fastcall Postload_ScriptableEventVehicleBlowUpTireDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventVehicleBlowUpTireDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ScriptableEventCollisionDefArray
==============
*/

void __fastcall Preload_ScriptableEventCollisionDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventCollisionDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableEventScriptDamageDefArray
==============
*/

int __fastcall Mark_ScriptableEventScriptDamageDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventScriptDamageDefArray@@YAH_K@Z(count);
}

/*
==============
Postload_ScriptableEventViewmodelShaderParamDefStream
==============
*/

void __fastcall Postload_ScriptableEventViewmodelShaderParamDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventViewmodelShaderParamDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventApplyConstantAngularForceDefStream
==============
*/

void __fastcall Postload_ScriptableEventApplyConstantAngularForceDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventApplyConstantAngularForceDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableStateScriptedDefArray
==============
*/

void __fastcall Preload_ScriptableStateScriptedDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableStateScriptedDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_Scriptable_EventType
==============
*/

void __fastcall Load_Scriptable_EventType(const DBStreamStart streamStart)
{
  ?Load_Scriptable_EventType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ScriptableEventAnimationDef
==============
*/

ScriptableEventAnimationDef *__fastcall AllocLoad_ScriptableEventAnimationDef()
{
  return ?AllocLoad_ScriptableEventAnimationDef@@YAPEAUScriptableEventAnimationDef@@XZ();
}

/*
==============
AllocPreload_ScriptableEventCompassIconDef
==============
*/

ScriptableEventCompassIconDef *__fastcall AllocPreload_ScriptableEventCompassIconDef()
{
  return ?AllocPreload_ScriptableEventCompassIconDef@@YAPEAUScriptableEventCompassIconDef@@XZ();
}

/*
==============
Postload_ScriptableEventFootstepDefArray
==============
*/

void __fastcall Postload_ScriptableEventFootstepDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventFootstepDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_Scriptable_MaterialOverrideType
==============
*/

Scriptable_MaterialOverrideType *__fastcall AllocPreload_Scriptable_MaterialOverrideType()
{
  return ?AllocPreload_Scriptable_MaterialOverrideType@@YAPEAW4Scriptable_MaterialOverrideType@@XZ();
}

/*
==============
Mark_ScriptableEventChunkDynentDef
==============
*/

int __fastcall Mark_ScriptableEventChunkDynentDef()
{
  return ?Mark_ScriptableEventChunkDynentDef@@YAHXZ();
}

/*
==============
Load_ProcessStructLayout_ScriptableEventFootstepDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventFootstepDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventFootstepDef@@YAXXZ();
}

/*
==============
Preload_ScriptableEventRumbleDefArray
==============
*/

void __fastcall Preload_ScriptableEventRumbleDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventRumbleDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventVehicleBlowUpTireDefStream
==============
*/

void __fastcall Preload_ScriptableEventVehicleBlowUpTireDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventVehicleBlowUpTireDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_Scriptable_EventTypeArray
==============
*/

void __fastcall Preload_Scriptable_EventTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_Scriptable_EventTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableModelUnion
==============
*/

int __fastcall Mark_ScriptableModelUnion()
{
  return ?Mark_ScriptableModelUnion@@YAHXZ();
}

/*
==============
Preload_Scriptable_MayhemActionStream
==============
*/

void __fastcall Preload_Scriptable_MayhemActionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_Scriptable_MayhemActionStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_Scriptable_EventTypeStream
==============
*/

void __fastcall Postload_Scriptable_EventTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_Scriptable_EventTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventAnimationDef
==============
*/

void __fastcall Preload_ScriptableEventAnimationDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventAnimationDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ScriptableDataType
==============
*/

void __fastcall Postload_ScriptableDataType(const DBStreamStart streamStart)
{
  ?Postload_ScriptableDataType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_ScriptableEventClientViewSelectorDef
==============
*/

ScriptableEventClientViewSelectorDef *__fastcall AllocPostload_ScriptableEventClientViewSelectorDef()
{
  return ?AllocPostload_ScriptableEventClientViewSelectorDef@@YAPEAUScriptableEventClientViewSelectorDef@@XZ();
}

/*
==============
Postload_ScriptableEventScriptDef
==============
*/

void __fastcall Postload_ScriptableEventScriptDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventScriptDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ScriptableMapEntsArray
==============
*/

int __fastcall Mark_ScriptableMapEntsArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableMapEntsArray@@YAH_K@Z(count);
}

/*
==============
Postload_ScriptableEventPlayMayhemDefArray
==============
*/

void __fastcall Postload_ScriptableEventPlayMayhemDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventPlayMayhemDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventModelDefArray
==============
*/

void __fastcall Load_ScriptableEventModelDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventModelDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventViewmodelChangeImageDefArray
==============
*/

void __fastcall Postload_ScriptableEventViewmodelChangeImageDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventViewmodelChangeImageDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventClientViewSelectorDefArray
==============
*/

void __fastcall Load_ScriptableEventClientViewSelectorDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventClientViewSelectorDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventDynamicBoneNoiseCurveDefArray
==============
*/

void __fastcall Postload_ScriptableEventDynamicBoneNoiseCurveDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventDynamicBoneNoiseCurveDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventSpawnDynentDef
==============
*/

void __fastcall Load_ScriptableEventSpawnDynentDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventSpawnDynentDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ScriptableStateScriptedDef
==============
*/

void __fastcall Postload_ScriptableStateScriptedDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableStateScriptedDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ScriptableEventHoverDef
==============
*/

void __fastcall Preload_ScriptableEventHoverDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventHoverDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ScriptableEventMaterialOverrideDef
==============
*/

int __fastcall Mark_ScriptableEventMaterialOverrideDef()
{
  return ?Mark_ScriptableEventMaterialOverrideDef@@YAHXZ();
}

/*
==============
Preload_ScriptableEventSunDef
==============
*/

void __fastcall Preload_ScriptableEventSunDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventSunDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_Scriptable_TeamFilter
==============
*/

Scriptable_TeamFilter *__fastcall AllocPostload_Scriptable_TeamFilter()
{
  return ?AllocPostload_Scriptable_TeamFilter@@YAPEAW4Scriptable_TeamFilter@@XZ();
}

/*
==============
AllocPreload_ScriptableNoteTrackDef
==============
*/

ScriptableNoteTrackDef *__fastcall AllocPreload_ScriptableNoteTrackDef()
{
  return ?AllocPreload_ScriptableNoteTrackDef@@YAPEAUScriptableNoteTrackDef@@XZ();
}

/*
==============
Postload_ScriptableReservedDynentsArray
==============
*/

void __fastcall Postload_ScriptableReservedDynentsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableReservedDynentsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableStateDef
==============
*/

void __fastcall Load_ScriptableStateDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableStateDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ScriptableEventMoveDefStream
==============
*/

void __fastcall Load_ScriptableEventMoveDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventMoveDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ScriptablePartReference
==============
*/

ScriptablePartReference *__fastcall AllocPreload_ScriptablePartReference()
{
  return ?AllocPreload_ScriptablePartReference@@YAPEATScriptablePartReference@@XZ();
}

/*
==============
Load_ScriptableStateUsableDefStream
==============
*/

void __fastcall Load_ScriptableStateUsableDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableStateUsableDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventViewmodelChangeImageDef
==============
*/

void __fastcall Load_ScriptableEventViewmodelChangeImageDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventViewmodelChangeImageDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ScriptableEventPFXDefArray
==============
*/

void __fastcall Load_ScriptableEventPFXDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventPFXDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventMaterialOverrideDef
==============
*/

void __fastcall Load_ScriptableEventMaterialOverrideDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventMaterialOverrideDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ScriptableModelUnionArray
==============
*/

void __fastcall Preload_ScriptableModelUnionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableModelUnionArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ScriptableEventNoteTrackDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventNoteTrackDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventNoteTrackDef@@YAXXZ();
}

/*
==============
Load_ProcessStructLayout_ScriptableEventGravityArcDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventGravityArcDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventGravityArcDef@@YAXXZ();
}

/*
==============
Load_ScriptablePartReferenceStream
==============
*/

void __fastcall Load_ScriptablePartReferenceStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptablePartReferenceStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_Scriptable_MayhemActionStream
==============
*/

void __fastcall Load_Scriptable_MayhemActionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_Scriptable_MayhemActionStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventSpatialDisableDefStream
==============
*/

void __fastcall Load_ScriptableEventSpatialDisableDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventSpatialDisableDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventDefUnionArray
==============
*/

void __fastcall Preload_ScriptableEventDefUnionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventDefUnionArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventCollisionDef
==============
*/

void __fastcall Preload_ScriptableEventCollisionDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventCollisionDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_Scriptable_EventType
==============
*/

void __fastcall Postload_Scriptable_EventType(const DBStreamStart streamStart)
{
  ?Postload_Scriptable_EventType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ScriptableStateUsableDefArray
==============
*/

void __fastcall Preload_ScriptableStateUsableDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableStateUsableDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ScriptableMapEnts
==============
*/

ScriptableMapEnts *__fastcall AllocPreload_ScriptableMapEnts()
{
  return ?AllocPreload_ScriptableMapEnts@@YAPEAUScriptableMapEnts@@XZ();
}

/*
==============
Postload_ScriptableEventClientViewSelectorDefStream
==============
*/

void __fastcall Postload_ScriptableEventClientViewSelectorDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventClientViewSelectorDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventScriptDefArray
==============
*/

void __fastcall Load_ScriptableEventScriptDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventScriptDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventDefUnionStream
==============
*/

void __fastcall Preload_ScriptableEventDefUnionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventDefUnionStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableDefStream
==============
*/

void __fastcall Postload_ScriptableDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableStateDefStream
==============
*/

void __fastcall Preload_ScriptableStateDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableStateDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableStateUsableDefArray
==============
*/

void __fastcall Postload_ScriptableStateUsableDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableStateUsableDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableEventDef
==============
*/

int __fastcall Mark_ScriptableEventDef()
{
  return ?Mark_ScriptableEventDef@@YAHXZ();
}

/*
==============
AllocLoad_ScriptableEventScriptDef
==============
*/

ScriptableEventScriptDef *__fastcall AllocLoad_ScriptableEventScriptDef()
{
  return ?AllocLoad_ScriptableEventScriptDef@@YAPEAUScriptableEventScriptDef@@XZ();
}

/*
==============
Load_ScriptableEventRandomDefArray
==============
*/

void __fastcall Load_ScriptableEventRandomDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventRandomDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventAnimationDefArray
==============
*/

void __fastcall Load_ScriptableEventAnimationDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventAnimationDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ScriptableEventBaseDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventBaseDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventBaseDef@@YAXXZ();
}

/*
==============
Load_ScriptableEventFootstepDef
==============
*/

void __fastcall Load_ScriptableEventFootstepDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventFootstepDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ScriptableEventSoundDef
==============
*/

void __fastcall Load_ScriptableEventSoundDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventSoundDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ScriptableEventSpawnDynentDef
==============
*/

ScriptableEventSpawnDynentDef *__fastcall AllocLoad_ScriptableEventSpawnDynentDef()
{
  return ?AllocLoad_ScriptableEventSpawnDynentDef@@YAPEAUScriptableEventSpawnDynentDef@@XZ();
}

/*
==============
Mark_ScriptableEventStateChangeDef
==============
*/

int __fastcall Mark_ScriptableEventStateChangeDef()
{
  return ?Mark_ScriptableEventStateChangeDef@@YAHXZ();
}

/*
==============
Preload_ScriptableEventApplyConstantForceDef
==============
*/

void __fastcall Preload_ScriptableEventApplyConstantForceDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventApplyConstantForceDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ScriptableEventRandomDefArray
==============
*/

void __fastcall Postload_ScriptableEventRandomDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventRandomDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableStateBaseDefStream
==============
*/

void __fastcall Preload_ScriptableStateBaseDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableStateBaseDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventViewmodelChangeImageDef
==============
*/

void __fastcall Postload_ScriptableEventViewmodelChangeImageDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventViewmodelChangeImageDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ScriptableNoteTrackDefStream
==============
*/

void __fastcall Load_ScriptableNoteTrackDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableNoteTrackDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventMaterialOverrideDefStream
==============
*/

void __fastcall Postload_ScriptableEventMaterialOverrideDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventMaterialOverrideDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_Scriptable_EventSun_Data
==============
*/

void __fastcall Postload_Scriptable_EventSun_Data(const DBStreamStart streamStart)
{
  ?Postload_Scriptable_EventSun_Data@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_Scriptable_AttackersArray
==============
*/

int __fastcall Mark_Scriptable_AttackersArray(const unsigned __int64 count)
{
  return ?Mark_Scriptable_AttackersArray@@YAH_K@Z(count);
}

/*
==============
Mark_ScriptableEventRumbleDef
==============
*/

int __fastcall Mark_ScriptableEventRumbleDef()
{
  return ?Mark_ScriptableEventRumbleDef@@YAHXZ();
}

/*
==============
AllocPreload_ScriptableEventAnonymousDef
==============
*/

ScriptableEventAnonymousDef *__fastcall AllocPreload_ScriptableEventAnonymousDef()
{
  return ?AllocPreload_ScriptableEventAnonymousDef@@YAPEAUScriptableEventAnonymousDef@@XZ();
}

/*
==============
Postload_ScriptableEventFootstepDefStream
==============
*/

void __fastcall Postload_ScriptableEventFootstepDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventFootstepDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_Scriptable_EventTypeArray
==============
*/

int __fastcall Mark_Scriptable_EventTypeArray(const unsigned __int64 count)
{
  return ?Mark_Scriptable_EventTypeArray@@YAH_K@Z(count);
}

/*
==============
Preload_ScriptableEventPartDamageDef
==============
*/

void __fastcall Preload_ScriptableEventPartDamageDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventPartDamageDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_Scriptable_ImageIdArray
==============
*/

void __fastcall Preload_Scriptable_ImageIdArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_Scriptable_ImageIdArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventApplyAngularForceDefArray
==============
*/

void __fastcall Postload_ScriptableEventApplyAngularForceDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventApplyAngularForceDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventCompassIconDefArray
==============
*/

void __fastcall Postload_ScriptableEventCompassIconDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventCompassIconDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableReservedDynent
==============
*/

void __fastcall Load_ScriptableReservedDynent(const DBStreamStart streamStart)
{
  ?Load_ScriptableReservedDynent@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_ScriptableEventDlc1Def
==============
*/

ScriptableEventDlc1Def *__fastcall AllocPostload_ScriptableEventDlc1Def()
{
  return ?AllocPostload_ScriptableEventDlc1Def@@YAPEAUScriptableEventDlc1Def@@XZ();
}

/*
==============
Postload_ScriptableModelUnionArray
==============
*/

void __fastcall Postload_ScriptableModelUnionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableModelUnionArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventScreenshakeDef
==============
*/

void __fastcall Postload_ScriptableEventScreenshakeDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventScreenshakeDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ScriptableEventAnonymousDef
==============
*/

int __fastcall Mark_ScriptableEventAnonymousDef()
{
  return ?Mark_ScriptableEventAnonymousDef@@YAHXZ();
}

/*
==============
Preload_ScriptableEventHideShowBoneDef
==============
*/

void __fastcall Preload_ScriptableEventHideShowBoneDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventHideShowBoneDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ScriptableEventVehicleBlowUpTireDefStream
==============
*/

void __fastcall Postload_ScriptableEventVehicleBlowUpTireDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventVehicleBlowUpTireDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ScriptableEventObjectiveDef
==============
*/

ScriptableEventObjectiveDef *__fastcall AllocLoad_ScriptableEventObjectiveDef()
{
  return ?AllocLoad_ScriptableEventObjectiveDef@@YAPEAUScriptableEventObjectiveDef@@XZ();
}

/*
==============
Postload_ScriptableEventHideShowBoneDefStream
==============
*/

void __fastcall Postload_ScriptableEventHideShowBoneDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventHideShowBoneDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptablePhysicsLimits
==============
*/

void __fastcall Postload_ScriptablePhysicsLimits(const DBStreamStart streamStart)
{
  ?Postload_ScriptablePhysicsLimits@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ScriptableEventSoundDefArray
==============
*/

void __fastcall Preload_ScriptableEventSoundDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventSoundDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventDynamicBoneNoiseCurveDef
==============
*/

void __fastcall Preload_ScriptableEventDynamicBoneNoiseCurveDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventDynamicBoneNoiseCurveDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ScriptableEventPartDamageDef
==============
*/

ScriptableEventPartDamageDef *__fastcall AllocLoad_ScriptableEventPartDamageDef()
{
  return ?AllocLoad_ScriptableEventPartDamageDef@@YAPEAUScriptableEventPartDamageDef@@XZ();
}

/*
==============
Postload_ScriptableEventAddModelDef
==============
*/

void __fastcall Postload_ScriptableEventAddModelDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventAddModelDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ScriptableEventTeamSelectorDefStream
==============
*/

void __fastcall Postload_ScriptableEventTeamSelectorDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventTeamSelectorDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventCompassIconDefStream
==============
*/

void __fastcall Load_ScriptableEventCompassIconDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventCompassIconDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventAnimationDefStream
==============
*/

void __fastcall Preload_ScriptableEventAnimationDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventAnimationDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventTeamSelectorDefArray
==============
*/

void __fastcall Postload_ScriptableEventTeamSelectorDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventTeamSelectorDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventMaterialOverrideDefArray
==============
*/

void __fastcall Preload_ScriptableEventMaterialOverrideDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventMaterialOverrideDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ScriptableEventPlayMayhemDef
==============
*/

ScriptableEventPlayMayhemDef *__fastcall AllocPostload_ScriptableEventPlayMayhemDef()
{
  return ?AllocPostload_ScriptableEventPlayMayhemDef@@YAPEAUScriptableEventPlayMayhemDef@@XZ();
}

/*
==============
Load_ProcessStructLayout_Scriptable_ImageId
==============
*/

void Load_ProcessStructLayout_Scriptable_ImageId(void)
{
  ?Load_ProcessStructLayout_Scriptable_ImageId@@YAXXZ();
}

/*
==============
Mark_ScriptableEventHoverDef
==============
*/

int __fastcall Mark_ScriptableEventHoverDef()
{
  return ?Mark_ScriptableEventHoverDef@@YAHXZ();
}

/*
==============
Preload_ScriptableStateHealthDefStream
==============
*/

void __fastcall Preload_ScriptableStateHealthDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableStateHealthDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_Scriptable_TeamFilterStream
==============
*/

void __fastcall Preload_Scriptable_TeamFilterStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_Scriptable_TeamFilterStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ScriptableEventApplyConstantAngularForceDef
==============
*/

ScriptableEventApplyConstantAngularForceDef *__fastcall AllocPreload_ScriptableEventApplyConstantAngularForceDef()
{
  return ?AllocPreload_ScriptableEventApplyConstantAngularForceDef@@YAPEAUScriptableEventApplyConstantAngularForceDef@@XZ();
}

/*
==============
Preload_ScriptableEventPartDamageDefStream
==============
*/

void __fastcall Preload_ScriptableEventPartDamageDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventPartDamageDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableStateBaseDef
==============
*/

void __fastcall Load_ScriptableStateBaseDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableStateBaseDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_Scriptable_StateType
==============
*/

void __fastcall Postload_Scriptable_StateType(const DBStreamStart streamStart)
{
  ?Postload_Scriptable_StateType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ScriptableEventDisablePhysicsSubShapeDefArray
==============
*/

void __fastcall Postload_ScriptableEventDisablePhysicsSubShapeDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventDisablePhysicsSubShapeDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_Scriptable_Attackers
==============
*/

Scriptable_Attackers *__fastcall AllocLoad_Scriptable_Attackers()
{
  return ?AllocLoad_Scriptable_Attackers@@YAPEAW4Scriptable_Attackers@@XZ();
}

/*
==============
Postload_Scriptable_MaterialOverrideTypeArray
==============
*/

void __fastcall Postload_Scriptable_MaterialOverrideTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_Scriptable_MaterialOverrideTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ScriptablePartReference
==============
*/

ScriptablePartReference *__fastcall AllocLoad_ScriptablePartReference()
{
  return ?AllocLoad_ScriptablePartReference@@YAPEATScriptablePartReference@@XZ();
}

/*
==============
Load_ScriptableStateUsableDefArray
==============
*/

void __fastcall Load_ScriptableStateUsableDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableStateUsableDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ScriptableEventHideShowBoneDef
==============
*/

ScriptableEventHideShowBoneDef *__fastcall AllocLoad_ScriptableEventHideShowBoneDef()
{
  return ?AllocLoad_ScriptableEventHideShowBoneDef@@YAPEAUScriptableEventHideShowBoneDef@@XZ();
}

/*
==============
Mark_Scriptable_ImageId
==============
*/

int __fastcall Mark_Scriptable_ImageId()
{
  return ?Mark_Scriptable_ImageId@@YAHXZ();
}

/*
==============
Load_ScriptableDataType
==============
*/

void __fastcall Load_ScriptableDataType(const DBStreamStart streamStart)
{
  ?Load_ScriptableDataType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ScriptablePartDef
==============
*/

void __fastcall Load_ScriptablePartDef(const DBStreamStart streamStart)
{
  ?Load_ScriptablePartDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ScriptableEventDisablePhysicsSubShapeDef
==============
*/

ScriptableEventDisablePhysicsSubShapeDef *__fastcall AllocPreload_ScriptableEventDisablePhysicsSubShapeDef()
{
  return ?AllocPreload_ScriptableEventDisablePhysicsSubShapeDef@@YAPEAUScriptableEventDisablePhysicsSubShapeDef@@XZ();
}

/*
==============
Load_ScriptableEventScriptDamageDefArray
==============
*/

void __fastcall Load_ScriptableEventScriptDamageDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventScriptDamageDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ScriptableEventDisablePhysicsSubShapeDef
==============
*/

ScriptableEventDisablePhysicsSubShapeDef *__fastcall AllocPostload_ScriptableEventDisablePhysicsSubShapeDef()
{
  return ?AllocPostload_ScriptableEventDisablePhysicsSubShapeDef@@YAPEAUScriptableEventDisablePhysicsSubShapeDef@@XZ();
}

/*
==============
Preload_ScriptableEventHideShowBoneDefStream
==============
*/

void __fastcall Preload_ScriptableEventHideShowBoneDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventHideShowBoneDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventWaitDef
==============
*/

void __fastcall Postload_ScriptableEventWaitDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventWaitDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_Scriptable_ImageId
==============
*/

void __fastcall Load_Scriptable_ImageId(const DBStreamStart streamStart)
{
  ?Load_Scriptable_ImageId@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ScriptableEventWaitDef
==============
*/

ScriptableEventWaitDef *__fastcall AllocPreload_ScriptableEventWaitDef()
{
  return ?AllocPreload_ScriptableEventWaitDef@@YAPEAUScriptableEventWaitDef@@XZ();
}

/*
==============
AllocPreload_ScriptableEventApplyForceDef
==============
*/

ScriptableEventApplyForceDef *__fastcall AllocPreload_ScriptableEventApplyForceDef()
{
  return ?AllocPreload_ScriptableEventApplyForceDef@@YAPEAUScriptableEventApplyForceDef@@XZ();
}

/*
==============
Preload_ScriptableEventDynamicBoneNoiseCurveDefStream
==============
*/

void __fastcall Preload_ScriptableEventDynamicBoneNoiseCurveDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventDynamicBoneNoiseCurveDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventTeamSelectorDef
==============
*/

void __fastcall Preload_ScriptableEventTeamSelectorDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventTeamSelectorDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ScriptableEventDef
==============
*/

void __fastcall Postload_ScriptableEventDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ScriptableEventViewTriggerDef
==============
*/

void __fastcall Postload_ScriptableEventViewTriggerDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventViewTriggerDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ScriptableReservedDynents
==============
*/

void __fastcall Postload_ScriptableReservedDynents(const DBStreamStart streamStart)
{
  ?Postload_ScriptableReservedDynents@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_ScriptableEventModelDef
==============
*/

ScriptableEventModelDef *__fastcall AllocPostload_ScriptableEventModelDef()
{
  return ?AllocPostload_ScriptableEventModelDef@@YAPEAUScriptableEventModelDef@@XZ();
}

/*
==============
Preload_ScriptableEventApplyAngularForceDefStream
==============
*/

void __fastcall Preload_ScriptableEventApplyAngularForceDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventApplyAngularForceDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ScriptableEventCollisionDef
==============
*/

ScriptableEventCollisionDef *__fastcall AllocPreload_ScriptableEventCollisionDef()
{
  return ?AllocPreload_ScriptableEventCollisionDef@@YAPEAUScriptableEventCollisionDef@@XZ();
}

/*
==============
AllocLoad_ScriptableEventWaitDef
==============
*/

ScriptableEventWaitDef *__fastcall AllocLoad_ScriptableEventWaitDef()
{
  return ?AllocLoad_ScriptableEventWaitDef@@YAPEAUScriptableEventWaitDef@@XZ();
}

/*
==============
Postload_ScriptableEventDlc1DefArray
==============
*/

void __fastcall Postload_ScriptableEventDlc1DefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventDlc1DefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventHoverDefArray
==============
*/

void __fastcall Postload_ScriptableEventHoverDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventHoverDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventMoveDefArray
==============
*/

void __fastcall Postload_ScriptableEventMoveDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventMoveDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventBaseDefStream
==============
*/

void __fastcall Load_ScriptableEventBaseDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventBaseDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableStateSimpleDef
==============
*/

void __fastcall Postload_ScriptableStateSimpleDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableStateSimpleDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ScriptableEventDefUnionStream
==============
*/

void __fastcall Load_ScriptableEventDefUnionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventDefUnionStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableEventVehicleBlowUpTireDef
==============
*/

int __fastcall Mark_ScriptableEventVehicleBlowUpTireDef()
{
  return ?Mark_ScriptableEventVehicleBlowUpTireDef@@YAHXZ();
}

/*
==============
Mark_ScriptableEventNoteTrackDef
==============
*/

int __fastcall Mark_ScriptableEventNoteTrackDef()
{
  return ?Mark_ScriptableEventNoteTrackDef@@YAHXZ();
}

/*
==============
Preload_ScriptableEventSunDefArray
==============
*/

void __fastcall Preload_ScriptableEventSunDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventSunDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ScriptableEventPlayMayhemDef
==============
*/

ScriptableEventPlayMayhemDef *__fastcall AllocPreload_ScriptableEventPlayMayhemDef()
{
  return ?AllocPreload_ScriptableEventPlayMayhemDef@@YAPEAUScriptableEventPlayMayhemDef@@XZ();
}

/*
==============
Preload_ScriptableEventSpatialDisableDefArray
==============
*/

void __fastcall Preload_ScriptableEventSpatialDisableDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventSpatialDisableDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventApplyConstantAngularForceDefStream
==============
*/

void __fastcall Preload_ScriptableEventApplyConstantAngularForceDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventApplyConstantAngularForceDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventSpawnDynentDef
==============
*/

void __fastcall Preload_ScriptableEventSpawnDynentDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventSpawnDynentDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ScriptableModelUnion
==============
*/

void __fastcall Preload_ScriptableModelUnion(const DBStreamStart streamStart)
{
  ?Preload_ScriptableModelUnion@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ScriptableEventCollisionDef
==============
*/

void __fastcall Load_ScriptableEventCollisionDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventCollisionDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ScriptableEventPlayMayhemDef
==============
*/

void __fastcall Load_ScriptableEventPlayMayhemDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventPlayMayhemDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ScriptableReservedDynent
==============
*/

ScriptableReservedDynent *__fastcall AllocLoad_ScriptableReservedDynent()
{
  return ?AllocLoad_ScriptableReservedDynent@@YAPEAUScriptableReservedDynent@@XZ();
}

/*
==============
Load_ScriptableEventBaseDef
==============
*/

void __fastcall Load_ScriptableEventBaseDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventBaseDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ScriptableEventMaterialOverrideDefStream
==============
*/

void __fastcall Load_ScriptableEventMaterialOverrideDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventMaterialOverrideDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventDisablePhysicsSubShapeDefArray
==============
*/

void __fastcall Preload_ScriptableEventDisablePhysicsSubShapeDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventDisablePhysicsSubShapeDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventDef
==============
*/

void __fastcall Load_ScriptableEventDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ScriptableEventCollisionDef
==============
*/

int __fastcall Mark_ScriptableEventCollisionDef()
{
  return ?Mark_ScriptableEventCollisionDef@@YAHXZ();
}

/*
==============
Mark_ScriptableEventLightDefArray
==============
*/

int __fastcall Mark_ScriptableEventLightDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventLightDefArray@@YAH_K@Z(count);
}

/*
==============
AllocPreload_Scriptable_MayhemAction
==============
*/

Scriptable_MayhemAction *__fastcall AllocPreload_Scriptable_MayhemAction()
{
  return ?AllocPreload_Scriptable_MayhemAction@@YAPEAW4Scriptable_MayhemAction@@XZ();
}

/*
==============
Postload_ScriptableEventDynamicBoneNoiseCurveDef
==============
*/

void __fastcall Postload_ScriptableEventDynamicBoneNoiseCurveDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventDynamicBoneNoiseCurveDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ScriptableDamageTagOverride
==============
*/

ScriptableDamageTagOverride *__fastcall AllocLoad_ScriptableDamageTagOverride()
{
  return ?AllocLoad_ScriptableDamageTagOverride@@YAPEAUScriptableDamageTagOverride@@XZ();
}

/*
==============
Mark_ScriptableStateHealthDef
==============
*/

int __fastcall Mark_ScriptableStateHealthDef()
{
  return ?Mark_ScriptableStateHealthDef@@YAHXZ();
}

/*
==============
Preload_ScriptableEventViewTriggerDef
==============
*/

void __fastcall Preload_ScriptableEventViewTriggerDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventViewTriggerDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_ScriptableEventCollisionDef
==============
*/

ScriptableEventCollisionDef *__fastcall AllocPostload_ScriptableEventCollisionDef()
{
  return ?AllocPostload_ScriptableEventCollisionDef@@YAPEAUScriptableEventCollisionDef@@XZ();
}

/*
==============
Load_ScriptableEventCollisionDefArray
==============
*/

void __fastcall Load_ScriptableEventCollisionDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventCollisionDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ScriptablePartReference
==============
*/

ScriptablePartReference *__fastcall AllocPostload_ScriptablePartReference()
{
  return ?AllocPostload_ScriptablePartReference@@YAPEATScriptablePartReference@@XZ();
}

/*
==============
Preload_ScriptableEventDef
==============
*/

void __fastcall Preload_ScriptableEventDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_CheckArrayMemberScriptableMapEnts477
==============
*/

void Load_CheckArrayMemberScriptableMapEnts477(void)
{
  ?Load_CheckArrayMemberScriptableMapEnts477@@YAXXZ();
}

/*
==============
Postload_ScriptableEventCompassIconDefStream
==============
*/

void __fastcall Postload_ScriptableEventCompassIconDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventCompassIconDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventModelDefArray
==============
*/

void __fastcall Postload_ScriptableEventModelDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventModelDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableReservedDynents
==============
*/

void __fastcall Load_ScriptableReservedDynents(const DBStreamStart streamStart)
{
  ?Load_ScriptableReservedDynents@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ScriptableEventDynamicBoneNoiseCurveDefStream
==============
*/

void __fastcall Postload_ScriptableEventDynamicBoneNoiseCurveDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventDynamicBoneNoiseCurveDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventBaseDefArray
==============
*/

void __fastcall Preload_ScriptableEventBaseDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventBaseDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventViewmodelChangeImageDefStream
==============
*/

void __fastcall Postload_ScriptableEventViewmodelChangeImageDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventViewmodelChangeImageDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventClientViewSelectorDefStream
==============
*/

void __fastcall Load_ScriptableEventClientViewSelectorDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventClientViewSelectorDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableEventGravityArcDef
==============
*/

int __fastcall Mark_ScriptableEventGravityArcDef()
{
  return ?Mark_ScriptableEventGravityArcDef@@YAHXZ();
}

/*
==============
Preload_ScriptableMapEntsArray
==============
*/

void __fastcall Preload_ScriptableMapEntsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableMapEntsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableEventTeamSelectorDefArray
==============
*/

int __fastcall Mark_ScriptableEventTeamSelectorDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventTeamSelectorDefArray@@YAH_K@Z(count);
}

/*
==============
Load_ScriptableEventAnonymousDefStream
==============
*/

void __fastcall Load_ScriptableEventAnonymousDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventAnonymousDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ScriptableNoteTrackDef
==============
*/

void Load_ProcessStructLayout_ScriptableNoteTrackDef(void)
{
  ?Load_ProcessStructLayout_ScriptableNoteTrackDef@@YAXXZ();
}

/*
==============
AllocPostload_Scriptable_MayhemAction
==============
*/

Scriptable_MayhemAction *__fastcall AllocPostload_Scriptable_MayhemAction()
{
  return ?AllocPostload_Scriptable_MayhemAction@@YAPEAW4Scriptable_MayhemAction@@XZ();
}

/*
==============
Load_ScriptableInstance
==============
*/

void __fastcall Load_ScriptableInstance(const DBStreamStart streamStart)
{
  ?Load_ScriptableInstance@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ScriptableEventStateChangeDefStream
==============
*/

void __fastcall Preload_ScriptableEventStateChangeDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventStateChangeDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventSunDef
==============
*/

void __fastcall Postload_ScriptableEventSunDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventSunDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_CheckArrayMemberScriptableMapEnts471
==============
*/

void Load_CheckArrayMemberScriptableMapEnts471(void)
{
  ?Load_CheckArrayMemberScriptableMapEnts471@@YAXXZ();
}

/*
==============
Preload_ScriptableNoteTrackDefArray
==============
*/

void __fastcall Preload_ScriptableNoteTrackDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableNoteTrackDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ScriptableEventNoteTrackDef
==============
*/

ScriptableEventNoteTrackDef *__fastcall AllocPostload_ScriptableEventNoteTrackDef()
{
  return ?AllocPostload_ScriptableEventNoteTrackDef@@YAPEAUScriptableEventNoteTrackDef@@XZ();
}

/*
==============
Load_ProcessStructLayout_ScriptableStateHealthDef
==============
*/

void Load_ProcessStructLayout_ScriptableStateHealthDef(void)
{
  ?Load_ProcessStructLayout_ScriptableStateHealthDef@@YAXXZ();
}

/*
==============
Load_ProcessStructLayout_ScriptableDataType
==============
*/

void Load_ProcessStructLayout_ScriptableDataType(void)
{
  ?Load_ProcessStructLayout_ScriptableDataType@@YAXXZ();
}

/*
==============
Load_ScriptableEventApplyAngularForceDefStream
==============
*/

void __fastcall Load_ScriptableEventApplyAngularForceDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventApplyAngularForceDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ScriptableEventMoveDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventMoveDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventMoveDef@@YAXXZ();
}

/*
==============
Mark_ScriptableEventGravityArcDefArray
==============
*/

int __fastcall Mark_ScriptableEventGravityArcDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventGravityArcDefArray@@YAH_K@Z(count);
}

/*
==============
Preload_ScriptableReservedDynent
==============
*/

void __fastcall Preload_ScriptableReservedDynent(const DBStreamStart streamStart)
{
  ?Preload_ScriptableReservedDynent@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ScriptableReservedDynents
==============
*/

ScriptableReservedDynents *__fastcall AllocLoad_ScriptableReservedDynents()
{
  return ?AllocLoad_ScriptableReservedDynents@@YAPEAUScriptableReservedDynents@@XZ();
}

/*
==============
Load_ScriptableEventLightDefStream
==============
*/

void __fastcall Load_ScriptableEventLightDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventLightDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_Scriptable_StateTypeArray
==============
*/

void __fastcall Load_Scriptable_StateTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_Scriptable_StateTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ScriptableEventAddModelDef
==============
*/

ScriptableEventAddModelDef *__fastcall AllocPreload_ScriptableEventAddModelDef()
{
  return ?AllocPreload_ScriptableEventAddModelDef@@YAPEAUScriptableEventAddModelDef@@XZ();
}

/*
==============
AllocLoad_ScriptableMapEnts
==============
*/

ScriptableMapEnts *__fastcall AllocLoad_ScriptableMapEnts()
{
  return ?AllocLoad_ScriptableMapEnts@@YAPEAUScriptableMapEnts@@XZ();
}

/*
==============
Load_ScriptablePartReference
==============
*/

void __fastcall Load_ScriptablePartReference(const DBStreamStart streamStart)
{
  ?Load_ScriptablePartReference@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ScriptableEventSoundDefStream
==============
*/

void __fastcall Postload_ScriptableEventSoundDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventSoundDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ScriptableEventLightDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventLightDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventLightDef@@YAXXZ();
}

/*
==============
Preload_ScriptableStateDefUnion
==============
*/

void __fastcall Preload_ScriptableStateDefUnion(const DBStreamStart streamStart)
{
  ?Preload_ScriptableStateDefUnion@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ScriptableModelUnionStream
==============
*/

void __fastcall Preload_ScriptableModelUnionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableModelUnionStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ScriptableEventClientViewSelectorDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventClientViewSelectorDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventClientViewSelectorDef@@YAXXZ();
}

/*
==============
Load_ScriptableEventRumbleDef
==============
*/

void __fastcall Load_ScriptableEventRumbleDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventRumbleDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ScriptableEventTeamSelectorDef
==============
*/

int __fastcall Mark_ScriptableEventTeamSelectorDef()
{
  return ?Mark_ScriptableEventTeamSelectorDef@@YAHXZ();
}

/*
==============
Preload_ScriptableEventHideShowBoneDefArray
==============
*/

void __fastcall Preload_ScriptableEventHideShowBoneDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventHideShowBoneDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventViewmodelShaderParamDef
==============
*/

void __fastcall Preload_ScriptableEventViewmodelShaderParamDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventViewmodelShaderParamDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ScriptableReservedDynents
==============
*/

ScriptableReservedDynents *__fastcall AllocPreload_ScriptableReservedDynents()
{
  return ?AllocPreload_ScriptableReservedDynents@@YAPEAUScriptableReservedDynents@@XZ();
}

/*
==============
AllocPostload_ScriptableStateDefUnion
==============
*/

ScriptableStateDefUnion *__fastcall AllocPostload_ScriptableStateDefUnion()
{
  return ?AllocPostload_ScriptableStateDefUnion@@YAPEATScriptableStateDefUnion@@XZ();
}

/*
==============
Load_ScriptableEventScreenshakeDefStream
==============
*/

void __fastcall Load_ScriptableEventScreenshakeDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventScreenshakeDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ScriptableEventStateChangeDef
==============
*/

ScriptableEventStateChangeDef *__fastcall AllocPostload_ScriptableEventStateChangeDef()
{
  return ?AllocPostload_ScriptableEventStateChangeDef@@YAPEAUScriptableEventStateChangeDef@@XZ();
}

/*
==============
Mark_ScriptableEventPlayMayhemDef
==============
*/

int __fastcall Mark_ScriptableEventPlayMayhemDef()
{
  return ?Mark_ScriptableEventPlayMayhemDef@@YAHXZ();
}

/*
==============
Load_ScriptableMapEntsArray
==============
*/

void __fastcall Load_ScriptableMapEntsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableMapEntsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventViewmodelShaderParamDefArray
==============
*/

void __fastcall Preload_ScriptableEventViewmodelShaderParamDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventViewmodelShaderParamDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventAddModelDef
==============
*/

void __fastcall Load_ScriptableEventAddModelDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventAddModelDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_Scriptable_MaterialOverrideType
==============
*/

void __fastcall Load_Scriptable_MaterialOverrideType(const DBStreamStart streamStart)
{
  ?Load_Scriptable_MaterialOverrideType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ScriptableEventScriptDamageDefStream
==============
*/

void __fastcall Load_ScriptableEventScriptDamageDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventScriptDamageDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ScriptableInstance
==============
*/

ScriptableInstance *__fastcall AllocPreload_ScriptableInstance()
{
  return ?AllocPreload_ScriptableInstance@@YAPEAUScriptableInstance@@XZ();
}

/*
==============
Postload_ScriptablePartReference
==============
*/

void __fastcall Postload_ScriptablePartReference(const DBStreamStart streamStart)
{
  ?Postload_ScriptablePartReference@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ScriptableEventMoveDef
==============
*/

ScriptableEventMoveDef *__fastcall AllocPreload_ScriptableEventMoveDef()
{
  return ?AllocPreload_ScriptableEventMoveDef@@YAPEAUScriptableEventMoveDef@@XZ();
}

/*
==============
Preload_ScriptablePhysicsLimits
==============
*/

void __fastcall Preload_ScriptablePhysicsLimits(const DBStreamStart streamStart)
{
  ?Preload_ScriptablePhysicsLimits@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ScriptableEventSpatialDisableDef
==============
*/

ScriptableEventSpatialDisableDef *__fastcall AllocLoad_ScriptableEventSpatialDisableDef()
{
  return ?AllocLoad_ScriptableEventSpatialDisableDef@@YAPEAUScriptableEventSpatialDisableDef@@XZ();
}

/*
==============
Mark_Scriptable_StateType
==============
*/

int __fastcall Mark_Scriptable_StateType()
{
  return ?Mark_Scriptable_StateType@@YAHXZ();
}

/*
==============
AllocPostload_ScriptableEventPartDamageDef
==============
*/

ScriptableEventPartDamageDef *__fastcall AllocPostload_ScriptableEventPartDamageDef()
{
  return ?AllocPostload_ScriptableEventPartDamageDef@@YAPEAUScriptableEventPartDamageDef@@XZ();
}

/*
==============
Mark_ScriptableMapEnts
==============
*/

int __fastcall Mark_ScriptableMapEnts()
{
  return ?Mark_ScriptableMapEnts@@YAHXZ();
}

/*
==============
Mark_ScriptableStateDefUnion
==============
*/

int __fastcall Mark_ScriptableStateDefUnion()
{
  return ?Mark_ScriptableStateDefUnion@@YAHXZ();
}

/*
==============
Load_Scriptable_TeamFilterStream
==============
*/

void __fastcall Load_Scriptable_TeamFilterStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_Scriptable_TeamFilterStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableStateBaseDefStream
==============
*/

void __fastcall Postload_ScriptableStateBaseDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableStateBaseDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventGravityArcDefStream
==============
*/

void __fastcall Load_ScriptableEventGravityArcDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventGravityArcDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_Scriptable_ShaderParamTypeArray
==============
*/

void __fastcall Preload_Scriptable_ShaderParamTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_Scriptable_ShaderParamTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableNoteTrackDefStream
==============
*/

void __fastcall Preload_ScriptableNoteTrackDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableNoteTrackDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventApplyForceDefStream
==============
*/

void __fastcall Load_ScriptableEventApplyForceDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventApplyForceDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableEventPlayMayhemDefArray
==============
*/

int __fastcall Mark_ScriptableEventPlayMayhemDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventPlayMayhemDefArray@@YAH_K@Z(count);
}

/*
==============
AllocPostload_ScriptableEventSoundDef
==============
*/

ScriptableEventSoundDef *__fastcall AllocPostload_ScriptableEventSoundDef()
{
  return ?AllocPostload_ScriptableEventSoundDef@@YAPEAUScriptableEventSoundDef@@XZ();
}

/*
==============
Load_Scriptable_DamageCause
==============
*/

void __fastcall Load_Scriptable_DamageCause(const DBStreamStart streamStart)
{
  ?Load_Scriptable_DamageCause@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ScriptableEventScriptDamageDef
==============
*/

void __fastcall Load_ScriptableEventScriptDamageDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventScriptDamageDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ScriptableEventSpawnDynentDefArray
==============
*/

void __fastcall Load_ScriptableEventSpawnDynentDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventSpawnDynentDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventScriptDamageDefStream
==============
*/

void __fastcall Postload_ScriptableEventScriptDamageDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventScriptDamageDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ScriptableStateSimpleDef
==============
*/

void Load_ProcessStructLayout_ScriptableStateSimpleDef(void)
{
  ?Load_ProcessStructLayout_ScriptableStateSimpleDef@@YAXXZ();
}

/*
==============
Preload_ScriptableInstanceStream
==============
*/

void __fastcall Preload_ScriptableInstanceStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableInstanceStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableEventSpawnDynentDefArray
==============
*/

int __fastcall Mark_ScriptableEventSpawnDynentDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventSpawnDynentDefArray@@YAH_K@Z(count);
}

/*
==============
Postload_ScriptablePartDefArray
==============
*/

void __fastcall Postload_ScriptablePartDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptablePartDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventSoundDefStream
==============
*/

void __fastcall Load_ScriptableEventSoundDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventSoundDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventScriptDefArray
==============
*/

void __fastcall Postload_ScriptableEventScriptDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventScriptDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_Scriptable_ShaderParamTypeArray
==============
*/

void __fastcall Load_Scriptable_ShaderParamTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_Scriptable_ShaderParamTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableStateDef
==============
*/

void __fastcall Preload_ScriptableStateDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableStateDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ScriptableStateDef
==============
*/

void __fastcall Postload_ScriptableStateDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableStateDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ScriptableDef
==============
*/

ScriptableDef *__fastcall AllocLoad_ScriptableDef()
{
  return ?AllocLoad_ScriptableDef@@YAPEAUScriptableDef@@XZ();
}

/*
==============
Postload_ScriptableEventModelDefStream
==============
*/

void __fastcall Postload_ScriptableEventModelDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventModelDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_Scriptable_DamageCause
==============
*/

void __fastcall Preload_Scriptable_DamageCause(const DBStreamStart streamStart)
{
  ?Preload_Scriptable_DamageCause@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_ScriptableEventVehicleBlowUpTireDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventVehicleBlowUpTireDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventVehicleBlowUpTireDef@@YAXXZ();
}

/*
==============
Load_ProcessStructLayout_ScriptableEventScriptDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventScriptDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventScriptDef@@YAXXZ();
}

/*
==============
Preload_ScriptableStateSimpleDefStream
==============
*/

void __fastcall Preload_ScriptableStateSimpleDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableStateSimpleDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ScriptableStateBaseDef
==============
*/

void Load_ProcessStructLayout_ScriptableStateBaseDef(void)
{
  ?Load_ProcessStructLayout_ScriptableStateBaseDef@@YAXXZ();
}

/*
==============
Postload_ScriptablePartReferenceArray
==============
*/

void __fastcall Postload_ScriptablePartReferenceArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptablePartReferenceArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventRandomDef
==============
*/

void __fastcall Preload_ScriptableEventRandomDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventRandomDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ScriptableEventDlc1Def
==============
*/

void __fastcall Load_ScriptableEventDlc1Def(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventDlc1Def@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ScriptableDataType
==============
*/

int __fastcall Mark_ScriptableDataType()
{
  return ?Mark_ScriptableDataType@@YAHXZ();
}

/*
==============
Preload_ScriptableEventPFXDef
==============
*/

void __fastcall Preload_ScriptableEventPFXDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventPFXDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ScriptableEventModelDef
==============
*/

void __fastcall Preload_ScriptableEventModelDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventModelDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ScriptableEventApplyConstantForceDef
==============
*/

void __fastcall Load_ScriptableEventApplyConstantForceDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventApplyConstantForceDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ScriptableEventSunDef
==============
*/

ScriptableEventSunDef *__fastcall AllocPreload_ScriptableEventSunDef()
{
  return ?AllocPreload_ScriptableEventSunDef@@YAPEAUScriptableEventSunDef@@XZ();
}

/*
==============
Postload_ScriptableEventSoundDefArray
==============
*/

void __fastcall Postload_ScriptableEventSoundDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventSoundDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventDlc1DefArray
==============
*/

void __fastcall Load_ScriptableEventDlc1DefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventDlc1DefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventCollisionDefArray
==============
*/

void __fastcall Postload_ScriptableEventCollisionDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventCollisionDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventWaitDefArray
==============
*/

void __fastcall Load_ScriptableEventWaitDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventWaitDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ScriptablePhysicsLimits
==============
*/

void Load_ProcessStructLayout_ScriptablePhysicsLimits(void)
{
  ?Load_ProcessStructLayout_ScriptablePhysicsLimits@@YAXXZ();
}

/*
==============
Preload_ScriptableEventDisablePhysicsSubShapeDef
==============
*/

void __fastcall Preload_ScriptableEventDisablePhysicsSubShapeDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventDisablePhysicsSubShapeDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ScriptableStateHealthDef
==============
*/

ScriptableStateHealthDef *__fastcall AllocPreload_ScriptableStateHealthDef()
{
  return ?AllocPreload_ScriptableStateHealthDef@@YAPEAUScriptableStateHealthDef@@XZ();
}

/*
==============
Load_ScriptableEventSetMayhemDefStream
==============
*/

void __fastcall Load_ScriptableEventSetMayhemDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventSetMayhemDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventTeamSelectorDefStream
==============
*/

void __fastcall Preload_ScriptableEventTeamSelectorDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventTeamSelectorDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ScriptableEventApplyConstantAngularForceDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventApplyConstantAngularForceDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventApplyConstantAngularForceDef@@YAXXZ();
}

/*
==============
Load_ProcessStructLayout_ScriptableStateUsableDef
==============
*/

void Load_ProcessStructLayout_ScriptableStateUsableDef(void)
{
  ?Load_ProcessStructLayout_ScriptableStateUsableDef@@YAXXZ();
}

/*
==============
AllocLoad_Scriptable_StateType
==============
*/

Scriptable_StateType *__fastcall AllocLoad_Scriptable_StateType()
{
  return ?AllocLoad_Scriptable_StateType@@YAPEAW4Scriptable_StateType@@XZ();
}

/*
==============
AllocLoad_ScriptableEventPFXDef
==============
*/

ScriptableEventPFXDef *__fastcall AllocLoad_ScriptableEventPFXDef()
{
  return ?AllocLoad_ScriptableEventPFXDef@@YAPEAUScriptableEventPFXDef@@XZ();
}

/*
==============
AllocPreload_ScriptableEventApplyConstantForceDef
==============
*/

ScriptableEventApplyConstantForceDef *__fastcall AllocPreload_ScriptableEventApplyConstantForceDef()
{
  return ?AllocPreload_ScriptableEventApplyConstantForceDef@@YAPEAUScriptableEventApplyConstantForceDef@@XZ();
}

/*
==============
Preload_ScriptableEventDlc1Def
==============
*/

void __fastcall Preload_ScriptableEventDlc1Def(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventDlc1Def@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ScriptableEventCollisionDefStream
==============
*/

void __fastcall Load_ScriptableEventCollisionDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventCollisionDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventGravityArcDefArray
==============
*/

void __fastcall Postload_ScriptableEventGravityArcDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventGravityArcDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableStateBaseDef
==============
*/

void __fastcall Postload_ScriptableStateBaseDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableStateBaseDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_Scriptable_Attackers
==============
*/

int __fastcall Mark_Scriptable_Attackers()
{
  return ?Mark_Scriptable_Attackers@@YAHXZ();
}

/*
==============
AllocPreload_ScriptableDataType
==============
*/

ScriptableDataType *__fastcall AllocPreload_ScriptableDataType()
{
  return ?AllocPreload_ScriptableDataType@@YAPEAW4ScriptableDataType@@XZ();
}

/*
==============
AllocLoad_ScriptableEventViewTriggerDef
==============
*/

ScriptableEventViewTriggerDef *__fastcall AllocLoad_ScriptableEventViewTriggerDef()
{
  return ?AllocLoad_ScriptableEventViewTriggerDef@@YAPEAUScriptableEventViewTriggerDef@@XZ();
}

/*
==============
Preload_ScriptableEventPlayMayhemDef
==============
*/

void __fastcall Preload_ScriptableEventPlayMayhemDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventPlayMayhemDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ScriptableEventViewTriggerDefStream
==============
*/

void __fastcall Load_ScriptableEventViewTriggerDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventViewTriggerDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableEventSunDef
==============
*/

int __fastcall Mark_ScriptableEventSunDef()
{
  return ?Mark_ScriptableEventSunDef@@YAHXZ();
}

/*
==============
Postload_ScriptableStateDefUnion
==============
*/

void __fastcall Postload_ScriptableStateDefUnion(const DBStreamStart streamStart)
{
  ?Postload_ScriptableStateDefUnion@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ScriptableEventStateChangeDef
==============
*/

ScriptableEventStateChangeDef *__fastcall AllocPreload_ScriptableEventStateChangeDef()
{
  return ?AllocPreload_ScriptableEventStateChangeDef@@YAPEAUScriptableEventStateChangeDef@@XZ();
}

/*
==============
Mark_ScriptableReservedDynentArray
==============
*/

int __fastcall Mark_ScriptableReservedDynentArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableReservedDynentArray@@YAH_K@Z(count);
}

/*
==============
Load_ScriptableStateScriptedDefArray
==============
*/

void __fastcall Load_ScriptableStateScriptedDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableStateScriptedDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ScriptableEventVehicleBlowUpTireDef
==============
*/

ScriptableEventVehicleBlowUpTireDef *__fastcall AllocPostload_ScriptableEventVehicleBlowUpTireDef()
{
  return ?AllocPostload_ScriptableEventVehicleBlowUpTireDef@@YAPEAUScriptableEventVehicleBlowUpTireDef@@XZ();
}

/*
==============
Preload_ScriptableStateDefUnionStream
==============
*/

void __fastcall Preload_ScriptableStateDefUnionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableStateDefUnionStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventHoverDefArray
==============
*/

void __fastcall Preload_ScriptableEventHoverDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventHoverDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_Scriptable_StateType
==============
*/

void __fastcall Preload_Scriptable_StateType(const DBStreamStart streamStart)
{
  ?Preload_Scriptable_StateType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ScriptableStateDefUnionArray
==============
*/

void __fastcall Load_ScriptableStateDefUnionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableStateDefUnionArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventDefUnion
==============
*/

void __fastcall Load_ScriptableEventDefUnion(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventDefUnion@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_ScriptableEventApplyConstantForceDef
==============
*/

ScriptableEventApplyConstantForceDef *__fastcall AllocPostload_ScriptableEventApplyConstantForceDef()
{
  return ?AllocPostload_ScriptableEventApplyConstantForceDef@@YAPEAUScriptableEventApplyConstantForceDef@@XZ();
}

/*
==============
Postload_ScriptableMapEnts
==============
*/

void __fastcall Postload_ScriptableMapEnts(const DBStreamStart streamStart)
{
  ?Postload_ScriptableMapEnts@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_Scriptable_ImageIdStream
==============
*/

void __fastcall Postload_Scriptable_ImageIdStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_Scriptable_ImageIdStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableEventScreenshakeDefArray
==============
*/

int __fastcall Mark_ScriptableEventScreenshakeDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventScreenshakeDefArray@@YAH_K@Z(count);
}

/*
==============
Postload_ScriptableEventSpatialDisableDefStream
==============
*/

void __fastcall Postload_ScriptableEventSpatialDisableDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventSpatialDisableDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventNoteTrackDefArray
==============
*/

void __fastcall Postload_ScriptableEventNoteTrackDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventNoteTrackDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ScriptableEventModelDef
==============
*/

ScriptableEventModelDef *__fastcall AllocPreload_ScriptableEventModelDef()
{
  return ?AllocPreload_ScriptableEventModelDef@@YAPEAUScriptableEventModelDef@@XZ();
}

/*
==============
AllocPostload_ScriptableReservedDynents
==============
*/

ScriptableReservedDynents *__fastcall AllocPostload_ScriptableReservedDynents()
{
  return ?AllocPostload_ScriptableReservedDynents@@YAPEAUScriptableReservedDynents@@XZ();
}

/*
==============
Load_ScriptableEventFootstepDefArray
==============
*/

void __fastcall Load_ScriptableEventFootstepDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventFootstepDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventClientViewSelectorDefStream
==============
*/

void __fastcall Preload_ScriptableEventClientViewSelectorDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventClientViewSelectorDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventDisablePhysicsSubShapeDef
==============
*/

void __fastcall Load_ScriptableEventDisablePhysicsSubShapeDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventDisablePhysicsSubShapeDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ScriptableStateHealthDefStream
==============
*/

void __fastcall Postload_ScriptableStateHealthDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableStateHealthDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableEventBaseDef
==============
*/

int __fastcall Mark_ScriptableEventBaseDef()
{
  return ?Mark_ScriptableEventBaseDef@@YAHXZ();
}

/*
==============
Load_ProcessStructLayout_ScriptableEventSunDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventSunDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventSunDef@@YAXXZ();
}

/*
==============
Postload_ScriptableEventDefArray
==============
*/

void __fastcall Postload_ScriptableEventDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventWaitDefStream
==============
*/

void __fastcall Load_ScriptableEventWaitDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventWaitDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ScriptableEventAddModelDef
==============
*/

ScriptableEventAddModelDef *__fastcall AllocPostload_ScriptableEventAddModelDef()
{
  return ?AllocPostload_ScriptableEventAddModelDef@@YAPEAUScriptableEventAddModelDef@@XZ();
}

/*
==============
Postload_ScriptableEventStateChangeDefStream
==============
*/

void __fastcall Postload_ScriptableEventStateChangeDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventStateChangeDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableDamageTagOverrideArray
==============
*/

void __fastcall Preload_ScriptableDamageTagOverrideArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableDamageTagOverrideArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableStateSimpleDefArray
==============
*/

int __fastcall Mark_ScriptableStateSimpleDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableStateSimpleDefArray@@YAH_K@Z(count);
}

/*
==============
Postload_ScriptableReservedDynentsStream
==============
*/

void __fastcall Postload_ScriptableReservedDynentsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableReservedDynentsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_Scriptable_AttackersArray
==============
*/

void __fastcall Postload_Scriptable_AttackersArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_Scriptable_AttackersArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableEventExplosionDef
==============
*/

int __fastcall Mark_ScriptableEventExplosionDef()
{
  return ?Mark_ScriptableEventExplosionDef@@YAHXZ();
}

/*
==============
Postload_ScriptableEventDisablePhysicsSubShapeDefStream
==============
*/

void __fastcall Postload_ScriptableEventDisablePhysicsSubShapeDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventDisablePhysicsSubShapeDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventHideShowBoneDef
==============
*/

void __fastcall Postload_ScriptableEventHideShowBoneDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventHideShowBoneDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ScriptableEventModelDef
==============
*/

int __fastcall Mark_ScriptableEventModelDef()
{
  return ?Mark_ScriptableEventModelDef@@YAHXZ();
}

/*
==============
Mark_ScriptableEventMoveDef
==============
*/

int __fastcall Mark_ScriptableEventMoveDef()
{
  return ?Mark_ScriptableEventMoveDef@@YAHXZ();
}

/*
==============
Postload_ScriptableEventMaterialOverrideDefArray
==============
*/

void __fastcall Postload_ScriptableEventMaterialOverrideDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventMaterialOverrideDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventGravityArcDef
==============
*/

void __fastcall Load_ScriptableEventGravityArcDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventGravityArcDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ScriptableEventModelDef
==============
*/

ScriptableEventModelDef *__fastcall AllocLoad_ScriptableEventModelDef()
{
  return ?AllocLoad_ScriptableEventModelDef@@YAPEAUScriptableEventModelDef@@XZ();
}

/*
==============
Load_ScriptableEventSetMayhemDef
==============
*/

void __fastcall Load_ScriptableEventSetMayhemDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventSetMayhemDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ScriptableEventPlayMayhemDefStream
==============
*/

void __fastcall Preload_ScriptableEventPlayMayhemDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventPlayMayhemDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableDefPtr
==============
*/

void __fastcall Load_ScriptableDefPtr(const DBStreamStart streamStart)
{
  ?Load_ScriptableDefPtr@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ScriptableEventRumbleDef
==============
*/

ScriptableEventRumbleDef *__fastcall AllocPreload_ScriptableEventRumbleDef()
{
  return ?AllocPreload_ScriptableEventRumbleDef@@YAPEAUScriptableEventRumbleDef@@XZ();
}

/*
==============
Postload_ScriptableDamageTagOverride
==============
*/

void __fastcall Postload_ScriptableDamageTagOverride(const DBStreamStart streamStart)
{
  ?Postload_ScriptableDamageTagOverride@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ScriptableStateDefArray
==============
*/

void __fastcall Load_ScriptableStateDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableStateDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ScriptableEventViewmodelShaderParamDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventViewmodelShaderParamDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventViewmodelShaderParamDef@@YAXXZ();
}

/*
==============
Preload_ScriptableEventPFXDefStream
==============
*/

void __fastcall Preload_ScriptableEventPFXDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventPFXDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableEventViewmodelChangeImageDef
==============
*/

int __fastcall Mark_ScriptableEventViewmodelChangeImageDef()
{
  return ?Mark_ScriptableEventViewmodelChangeImageDef@@YAHXZ();
}

/*
==============
Preload_ScriptableEventScriptDamageDefArray
==============
*/

void __fastcall Preload_ScriptableEventScriptDamageDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventScriptDamageDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventScriptDamageDefArray
==============
*/

void __fastcall Postload_ScriptableEventScriptDamageDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventScriptDamageDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventObjectiveDefStream
==============
*/

void __fastcall Preload_ScriptableEventObjectiveDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventObjectiveDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventPFXDefArray
==============
*/

void __fastcall Postload_ScriptableEventPFXDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventPFXDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptablePartReferenceStream
==============
*/

void __fastcall Preload_ScriptablePartReferenceStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptablePartReferenceStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventPlayMayhemDefArray
==============
*/

void __fastcall Preload_ScriptableEventPlayMayhemDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventPlayMayhemDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventNoteTrackDefStream
==============
*/

void __fastcall Load_ScriptableEventNoteTrackDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventNoteTrackDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableDefArray
==============
*/

void __fastcall Preload_ScriptableDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableStateHealthDefStream
==============
*/

void __fastcall Load_ScriptableStateHealthDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableStateHealthDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_Scriptable_TeamFilter
==============
*/

void __fastcall Preload_Scriptable_TeamFilter(const DBStreamStart streamStart)
{
  ?Preload_Scriptable_TeamFilter@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ScriptableEventPlayMayhemDefStream
==============
*/

void __fastcall Postload_ScriptableEventPlayMayhemDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventPlayMayhemDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventChunkDynentDefArray
==============
*/

void __fastcall Preload_ScriptableEventChunkDynentDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventChunkDynentDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ScriptableEventCollisionDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventCollisionDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventCollisionDef@@YAXXZ();
}

/*
==============
Postload_Scriptable_EventSun_DataStream
==============
*/

void __fastcall Postload_Scriptable_EventSun_DataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_Scriptable_EventSun_DataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableReservedDynentStream
==============
*/

void __fastcall Load_ScriptableReservedDynentStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableReservedDynentStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableStateDefArray
==============
*/

void __fastcall Postload_ScriptableStateDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableStateDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventApplyForceDefArray
==============
*/

void __fastcall Postload_ScriptableEventApplyForceDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventApplyForceDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_Scriptable_EventType
==============
*/

void Load_ProcessStructLayout_Scriptable_EventType(void)
{
  ?Load_ProcessStructLayout_Scriptable_EventType@@YAXXZ();
}

/*
==============
AllocPreload_ScriptableEventDefUnion
==============
*/

ScriptableEventDefUnion *__fastcall AllocPreload_ScriptableEventDefUnion()
{
  return ?AllocPreload_ScriptableEventDefUnion@@YAPEATScriptableEventDefUnion@@XZ();
}

/*
==============
Mark_ScriptableNoteTrackDefArray
==============
*/

int __fastcall Mark_ScriptableNoteTrackDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableNoteTrackDefArray@@YAH_K@Z(count);
}

/*
==============
AllocPreload_ScriptableEventMaterialOverrideDef
==============
*/

ScriptableEventMaterialOverrideDef *__fastcall AllocPreload_ScriptableEventMaterialOverrideDef()
{
  return ?AllocPreload_ScriptableEventMaterialOverrideDef@@YAPEAUScriptableEventMaterialOverrideDef@@XZ();
}

/*
==============
Preload_ScriptableDefPtrArray
==============
*/

void __fastcall Preload_ScriptableDefPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableDefPtrArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventBaseDefArray
==============
*/

void __fastcall Postload_ScriptableEventBaseDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventBaseDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptablePartDefArray
==============
*/

int __fastcall Mark_ScriptablePartDefArray(unsigned __int64 count)
{
  return ?Mark_ScriptablePartDefArray@@YAH_K@Z(count);
}

/*
==============
Postload_Scriptable_TeamFilterArray
==============
*/

void __fastcall Postload_Scriptable_TeamFilterArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_Scriptable_TeamFilterArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventGravityArcDefArray
==============
*/

void __fastcall Load_ScriptableEventGravityArcDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventGravityArcDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventSpawnDynentDefArray
==============
*/

void __fastcall Postload_ScriptableEventSpawnDynentDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventSpawnDynentDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ScriptableEventDynamicBoneNoiseCurveDef
==============
*/

ScriptableEventDynamicBoneNoiseCurveDef *__fastcall AllocPostload_ScriptableEventDynamicBoneNoiseCurveDef()
{
  return ?AllocPostload_ScriptableEventDynamicBoneNoiseCurveDef@@YAPEAUScriptableEventDynamicBoneNoiseCurveDef@@XZ();
}

/*
==============
Load_Scriptable_MaterialOverrideTypeStream
==============
*/

void __fastcall Load_Scriptable_MaterialOverrideTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_Scriptable_MaterialOverrideTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableEventScriptDef
==============
*/

int __fastcall Mark_ScriptableEventScriptDef()
{
  return ?Mark_ScriptableEventScriptDef@@YAHXZ();
}

/*
==============
Preload_ScriptableDataTypeArray
==============
*/

void __fastcall Preload_ScriptableDataTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableDataTypeArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableEventPFXDefArray
==============
*/

int __fastcall Mark_ScriptableEventPFXDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventPFXDefArray@@YAH_K@Z(count);
}

/*
==============
Mark_ScriptableEventCompassIconDef
==============
*/

int __fastcall Mark_ScriptableEventCompassIconDef()
{
  return ?Mark_ScriptableEventCompassIconDef@@YAHXZ();
}

/*
==============
AllocPreload_ScriptableEventViewTriggerDef
==============
*/

ScriptableEventViewTriggerDef *__fastcall AllocPreload_ScriptableEventViewTriggerDef()
{
  return ?AllocPreload_ScriptableEventViewTriggerDef@@YAPEAUScriptableEventViewTriggerDef@@XZ();
}

/*
==============
Mark_Scriptable_EventSun_Data
==============
*/

int __fastcall Mark_Scriptable_EventSun_Data()
{
  return ?Mark_Scriptable_EventSun_Data@@YAHXZ();
}

/*
==============
Postload_Scriptable_DamageCauseStream
==============
*/

void __fastcall Postload_Scriptable_DamageCauseStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_Scriptable_DamageCauseStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventAnimationDefArray
==============
*/

void __fastcall Postload_ScriptableEventAnimationDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventAnimationDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventPFXDefArray
==============
*/

void __fastcall Preload_ScriptableEventPFXDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventPFXDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ScriptableEventRumbleDef
==============
*/

ScriptableEventRumbleDef *__fastcall AllocPostload_ScriptableEventRumbleDef()
{
  return ?AllocPostload_ScriptableEventRumbleDef@@YAPEAUScriptableEventRumbleDef@@XZ();
}

/*
==============
Load_ScriptableEventViewmodelChangeImageDefArray
==============
*/

void __fastcall Load_ScriptableEventViewmodelChangeImageDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventViewmodelChangeImageDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ScriptableModelUnion
==============
*/

void Load_ProcessStructLayout_ScriptableModelUnion(void)
{
  ?Load_ProcessStructLayout_ScriptableModelUnion@@YAXXZ();
}

/*
==============
AllocLoad_ScriptableEventSetMayhemDef
==============
*/

ScriptableEventSetMayhemDef *__fastcall AllocLoad_ScriptableEventSetMayhemDef()
{
  return ?AllocLoad_ScriptableEventSetMayhemDef@@YAPEAUScriptableEventSetMayhemDef@@XZ();
}

/*
==============
Load_ScriptableStateDefUnionStream
==============
*/

void __fastcall Load_ScriptableStateDefUnionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableStateDefUnionStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableEventModelDefArray
==============
*/

int __fastcall Mark_ScriptableEventModelDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventModelDefArray@@YAH_K@Z(count);
}

/*
==============
Load_ScriptableEventDynamicBoneNoiseCurveDefStream
==============
*/

void __fastcall Load_ScriptableEventDynamicBoneNoiseCurveDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventDynamicBoneNoiseCurveDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ScriptableEventDynamicBoneNoiseCurveDef
==============
*/

ScriptableEventDynamicBoneNoiseCurveDef *__fastcall AllocLoad_ScriptableEventDynamicBoneNoiseCurveDef()
{
  return ?AllocLoad_ScriptableEventDynamicBoneNoiseCurveDef@@YAPEAUScriptableEventDynamicBoneNoiseCurveDef@@XZ();
}

/*
==============
Preload_ScriptableEventModelDefArray
==============
*/

void __fastcall Preload_ScriptableEventModelDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventModelDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableStateDefArray
==============
*/

void __fastcall Preload_ScriptableStateDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableStateDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_CheckArrayMemberScriptableMapEnts465
==============
*/

void Load_CheckArrayMemberScriptableMapEnts465(void)
{
  ?Load_CheckArrayMemberScriptableMapEnts465@@YAXXZ();
}

/*
==============
Preload_ScriptableEventAnimationDefArray
==============
*/

void __fastcall Preload_ScriptableEventAnimationDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventAnimationDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ScriptableEventHoverDef
==============
*/

ScriptableEventHoverDef *__fastcall AllocPreload_ScriptableEventHoverDef()
{
  return ?AllocPreload_ScriptableEventHoverDef@@YAPEAUScriptableEventHoverDef@@XZ();
}

/*
==============
Postload_ScriptableStateHealthDef
==============
*/

void __fastcall Postload_ScriptableStateHealthDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableStateHealthDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_Scriptable_DamageCauseStream
==============
*/

void __fastcall Preload_Scriptable_DamageCauseStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_Scriptable_DamageCauseStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableEventScriptDamageDef
==============
*/

int __fastcall Mark_ScriptableEventScriptDamageDef()
{
  return ?Mark_ScriptableEventScriptDamageDef@@YAHXZ();
}

/*
==============
Load_Scriptable_EventSun_DataStream
==============
*/

void __fastcall Load_Scriptable_EventSun_DataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_Scriptable_EventSun_DataStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableEventApplyAngularForceDefArray
==============
*/

int __fastcall Mark_ScriptableEventApplyAngularForceDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventApplyAngularForceDefArray@@YAH_K@Z(count);
}

/*
==============
Load_ProcessStructLayout_ScriptableDef
==============
*/

void Load_ProcessStructLayout_ScriptableDef(void)
{
  ?Load_ProcessStructLayout_ScriptableDef@@YAXXZ();
}

/*
==============
Load_ProcessStructLayout_ScriptableMapEnts
==============
*/

void Load_ProcessStructLayout_ScriptableMapEnts(void)
{
  ?Load_ProcessStructLayout_ScriptableMapEnts@@YAXXZ();
}

/*
==============
Mark_Scriptable_MaterialOverrideTypeArray
==============
*/

int __fastcall Mark_Scriptable_MaterialOverrideTypeArray(const unsigned __int64 count)
{
  return ?Mark_Scriptable_MaterialOverrideTypeArray@@YAH_K@Z(count);
}

/*
==============
Postload_ScriptableStateDefUnionArray
==============
*/

void __fastcall Postload_ScriptableStateDefUnionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableStateDefUnionArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ScriptableEventViewmodelChangeImageDef
==============
*/

ScriptableEventViewmodelChangeImageDef *__fastcall AllocPostload_ScriptableEventViewmodelChangeImageDef()
{
  return ?AllocPostload_ScriptableEventViewmodelChangeImageDef@@YAPEAUScriptableEventViewmodelChangeImageDef@@XZ();
}

/*
==============
AllocPostload_ScriptablePhysicsLimits
==============
*/

ScriptablePhysicsLimits *__fastcall AllocPostload_ScriptablePhysicsLimits()
{
  return ?AllocPostload_ScriptablePhysicsLimits@@YAPEAUScriptablePhysicsLimits@@XZ();
}

/*
==============
AllocLoad_Scriptable_ShaderParamType
==============
*/

Scriptable_ShaderParamType *__fastcall AllocLoad_Scriptable_ShaderParamType()
{
  return ?AllocLoad_Scriptable_ShaderParamType@@YAPEAW4Scriptable_ShaderParamType@@XZ();
}

/*
==============
Load_Scriptable_ShaderParamTypeStream
==============
*/

void __fastcall Load_Scriptable_ShaderParamTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_Scriptable_ShaderParamTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventViewmodelChangeImageDefStream
==============
*/

void __fastcall Preload_ScriptableEventViewmodelChangeImageDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventViewmodelChangeImageDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableEventDynamicBoneNoiseCurveDefArray
==============
*/

int __fastcall Mark_ScriptableEventDynamicBoneNoiseCurveDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventDynamicBoneNoiseCurveDefArray@@YAH_K@Z(count);
}

/*
==============
Postload_Scriptable_MayhemAction
==============
*/

void __fastcall Postload_Scriptable_MayhemAction(const DBStreamStart streamStart)
{
  ?Postload_Scriptable_MayhemAction@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ScriptableEventDynamicBoneNoiseCurveDef
==============
*/

void __fastcall Load_ScriptableEventDynamicBoneNoiseCurveDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventDynamicBoneNoiseCurveDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ScriptableEventApplyForceDef
==============
*/

void __fastcall Postload_ScriptableEventApplyForceDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventApplyForceDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_ScriptableEventExplosionDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventExplosionDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventExplosionDef@@YAXXZ();
}

/*
==============
AllocLoad_ScriptableEventApplyConstantForceDef
==============
*/

ScriptableEventApplyConstantForceDef *__fastcall AllocLoad_ScriptableEventApplyConstantForceDef()
{
  return ?AllocLoad_ScriptableEventApplyConstantForceDef@@YAPEAUScriptableEventApplyConstantForceDef@@XZ();
}

/*
==============
Postload_ScriptableEventDlc1Def
==============
*/

void __fastcall Postload_ScriptableEventDlc1Def(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventDlc1Def@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_ScriptableModelUnion
==============
*/

ScriptableModelUnion *__fastcall AllocPostload_ScriptableModelUnion()
{
  return ?AllocPostload_ScriptableModelUnion@@YAPEATScriptableModelUnion@@XZ();
}

/*
==============
AllocPostload_ScriptableEventChunkDynentDef
==============
*/

ScriptableEventChunkDynentDef *__fastcall AllocPostload_ScriptableEventChunkDynentDef()
{
  return ?AllocPostload_ScriptableEventChunkDynentDef@@YAPEAUScriptableEventChunkDynentDef@@XZ();
}

/*
==============
Preload_ScriptableStateScriptedDef
==============
*/

void __fastcall Preload_ScriptableStateScriptedDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableStateScriptedDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ScriptableEventLightDefArray
==============
*/

void __fastcall Postload_ScriptableEventLightDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventLightDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ScriptableEventSetMayhemDef
==============
*/

ScriptableEventSetMayhemDef *__fastcall AllocPostload_ScriptableEventSetMayhemDef()
{
  return ?AllocPostload_ScriptableEventSetMayhemDef@@YAPEAUScriptableEventSetMayhemDef@@XZ();
}

/*
==============
AllocLoad_Scriptable_MaterialOverrideType
==============
*/

Scriptable_MaterialOverrideType *__fastcall AllocLoad_Scriptable_MaterialOverrideType()
{
  return ?AllocLoad_Scriptable_MaterialOverrideType@@YAPEAW4Scriptable_MaterialOverrideType@@XZ();
}

/*
==============
AllocPostload_ScriptableEventApplyForceDef
==============
*/

ScriptableEventApplyForceDef *__fastcall AllocPostload_ScriptableEventApplyForceDef()
{
  return ?AllocPostload_ScriptableEventApplyForceDef@@YAPEAUScriptableEventApplyForceDef@@XZ();
}

/*
==============
Mark_ScriptableEventVehicleBlowUpTireDefArray
==============
*/

int __fastcall Mark_ScriptableEventVehicleBlowUpTireDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventVehicleBlowUpTireDefArray@@YAH_K@Z(count);
}

/*
==============
Postload_ScriptableEventMaterialOverrideDef
==============
*/

void __fastcall Postload_ScriptableEventMaterialOverrideDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventMaterialOverrideDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ScriptableEventSunDefStream
==============
*/

void __fastcall Load_ScriptableEventSunDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventSunDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ScriptableEventHoverDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventHoverDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventHoverDef@@YAXXZ();
}

/*
==============
Load_ScriptableEventPFXDefStream
==============
*/

void __fastcall Load_ScriptableEventPFXDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventPFXDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_Scriptable_DamageCause
==============
*/

Scriptable_DamageCause *__fastcall AllocLoad_Scriptable_DamageCause()
{
  return ?AllocLoad_Scriptable_DamageCause@@YAPEAW4Scriptable_DamageCause@@XZ();
}

/*
==============
Preload_ScriptableEventVehicleBlowUpTireDef
==============
*/

void __fastcall Preload_ScriptableEventVehicleBlowUpTireDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventVehicleBlowUpTireDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ScriptableStateDef
==============
*/

ScriptableStateDef *__fastcall AllocPreload_ScriptableStateDef()
{
  return ?AllocPreload_ScriptableStateDef@@YAPEAUScriptableStateDef@@XZ();
}

/*
==============
Load_ScriptableEventSpawnDynentDefStream
==============
*/

void __fastcall Load_ScriptableEventSpawnDynentDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventSpawnDynentDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableEventObjectiveDefArray
==============
*/

int __fastcall Mark_ScriptableEventObjectiveDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventObjectiveDefArray@@YAH_K@Z(count);
}

/*
==============
Postload_ScriptableEventViewTriggerDefArray
==============
*/

void __fastcall Postload_ScriptableEventViewTriggerDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventViewTriggerDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptablePartDef
==============
*/

void __fastcall Preload_ScriptablePartDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptablePartDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_Scriptable_ShaderParamType
==============
*/

void __fastcall Load_Scriptable_ShaderParamType(const DBStreamStart streamStart)
{
  ?Load_Scriptable_ShaderParamType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ScriptableEventViewmodelChangeImageDef
==============
*/

ScriptableEventViewmodelChangeImageDef *__fastcall AllocPreload_ScriptableEventViewmodelChangeImageDef()
{
  return ?AllocPreload_ScriptableEventViewmodelChangeImageDef@@YAPEAUScriptableEventViewmodelChangeImageDef@@XZ();
}

/*
==============
Preload_ScriptableInstanceArray
==============
*/

void __fastcall Preload_ScriptableInstanceArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableInstanceArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventStateChangeDefArray
==============
*/

void __fastcall Load_ScriptableEventStateChangeDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventStateChangeDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ScriptableEventDlc1Def
==============
*/

ScriptableEventDlc1Def *__fastcall AllocLoad_ScriptableEventDlc1Def()
{
  return ?AllocLoad_ScriptableEventDlc1Def@@YAPEAUScriptableEventDlc1Def@@XZ();
}

/*
==============
Load_Scriptable_ImageIdStream
==============
*/

void __fastcall Load_Scriptable_ImageIdStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_Scriptable_ImageIdStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableEventDefUnion
==============
*/

int __fastcall Mark_ScriptableEventDefUnion()
{
  return ?Mark_ScriptableEventDefUnion@@YAHXZ();
}

/*
==============
AllocPostload_ScriptableEventBaseDef
==============
*/

ScriptableEventBaseDef *__fastcall AllocPostload_ScriptableEventBaseDef()
{
  return ?AllocPostload_ScriptableEventBaseDef@@YAPEAUScriptableEventBaseDef@@XZ();
}

/*
==============
Mark_ScriptableEventStateChangeDefArray
==============
*/

int __fastcall Mark_ScriptableEventStateChangeDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventStateChangeDefArray@@YAH_K@Z(count);
}

/*
==============
Mark_ScriptableStateDefArray
==============
*/

int __fastcall Mark_ScriptableStateDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableStateDefArray@@YAH_K@Z(count);
}

/*
==============
Postload_ScriptableEventApplyConstantForceDef
==============
*/

void __fastcall Postload_ScriptableEventApplyConstantForceDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventApplyConstantForceDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ScriptableEventLightDef
==============
*/

void __fastcall Postload_ScriptableEventLightDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventLightDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ScriptableEventViewTriggerDef
==============
*/

void __fastcall Load_ScriptableEventViewTriggerDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventViewTriggerDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ScriptableEventApplyForceDef
==============
*/

void __fastcall Load_ScriptableEventApplyForceDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventApplyForceDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ScriptableStateBaseDefArray
==============
*/

int __fastcall Mark_ScriptableStateBaseDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableStateBaseDefArray@@YAH_K@Z(count);
}

/*
==============
Load_ScriptableEventHideShowBoneDef
==============
*/

void __fastcall Load_ScriptableEventHideShowBoneDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventHideShowBoneDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ScriptableEventLightDef
==============
*/

ScriptableEventLightDef *__fastcall AllocPreload_ScriptableEventLightDef()
{
  return ?AllocPreload_ScriptableEventLightDef@@YAPEAUScriptableEventLightDef@@XZ();
}

/*
==============
Postload_ScriptableStateHealthDefArray
==============
*/

void __fastcall Postload_ScriptableStateHealthDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableStateHealthDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ScriptableEventApplyConstantForceDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventApplyConstantForceDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventApplyConstantForceDef@@YAXXZ();
}

/*
==============
AllocLoad_ScriptableStateBaseDef
==============
*/

ScriptableStateBaseDef *__fastcall AllocLoad_ScriptableStateBaseDef()
{
  return ?AllocLoad_ScriptableStateBaseDef@@YAPEAUScriptableStateBaseDef@@XZ();
}

/*
==============
Mark_ScriptableEventDlc1DefArray
==============
*/

int __fastcall Mark_ScriptableEventDlc1DefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventDlc1DefArray@@YAH_K@Z(count);
}

/*
==============
Postload_ScriptableStateScriptedDefStream
==============
*/

void __fastcall Postload_ScriptableStateScriptedDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableStateScriptedDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableDataType
==============
*/

void __fastcall Preload_ScriptableDataType(const DBStreamStart streamStart)
{
  ?Preload_ScriptableDataType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ScriptableEventAnonymousDef
==============
*/

ScriptableEventAnonymousDef *__fastcall AllocLoad_ScriptableEventAnonymousDef()
{
  return ?AllocLoad_ScriptableEventAnonymousDef@@YAPEAUScriptableEventAnonymousDef@@XZ();
}

/*
==============
Preload_ScriptableEventRandomDefStream
==============
*/

void __fastcall Preload_ScriptableEventRandomDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventRandomDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptablePartReference
==============
*/

void __fastcall Preload_ScriptablePartReference(const DBStreamStart streamStart)
{
  ?Preload_ScriptablePartReference@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ScriptableEventAnonymousDef
==============
*/

void __fastcall Preload_ScriptableEventAnonymousDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventAnonymousDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ScriptableInstance
==============
*/

int __fastcall Mark_ScriptableInstance()
{
  return ?Mark_ScriptableInstance@@YAHXZ();
}

/*
==============
Load_ProcessStructLayout_ScriptableEventWaitDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventWaitDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventWaitDef@@YAXXZ();
}

/*
==============
Preload_ScriptableStateUsableDefStream
==============
*/

void __fastcall Preload_ScriptableStateUsableDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableStateUsableDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ScriptableNoteTrackDef
==============
*/

ScriptableNoteTrackDef *__fastcall AllocLoad_ScriptableNoteTrackDef()
{
  return ?AllocLoad_ScriptableNoteTrackDef@@YAPEAUScriptableNoteTrackDef@@XZ();
}

/*
==============
Mark_ScriptableEventDlc1Def
==============
*/

int __fastcall Mark_ScriptableEventDlc1Def()
{
  return ?Mark_ScriptableEventDlc1Def@@YAHXZ();
}

/*
==============
Postload_ScriptableEventFootstepDef
==============
*/

void __fastcall Postload_ScriptableEventFootstepDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventFootstepDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ScriptableEventSpawnDynentDef
==============
*/

void __fastcall Postload_ScriptableEventSpawnDynentDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventSpawnDynentDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_ScriptableEventAnimationDef
==============
*/

ScriptableEventAnimationDef *__fastcall AllocPostload_ScriptableEventAnimationDef()
{
  return ?AllocPostload_ScriptableEventAnimationDef@@YAPEAUScriptableEventAnimationDef@@XZ();
}

/*
==============
Load_ProcessStructLayout_ScriptableEventSpawnDynentDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventSpawnDynentDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventSpawnDynentDef@@YAXXZ();
}

/*
==============
Mark_ScriptableEventDefArray
==============
*/

int __fastcall Mark_ScriptableEventDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventDefArray@@YAH_K@Z(count);
}

/*
==============
Preload_ScriptableEventRandomDefArray
==============
*/

void __fastcall Preload_ScriptableEventRandomDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventRandomDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventApplyConstantForceDefArray
==============
*/

void __fastcall Preload_ScriptableEventApplyConstantForceDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventApplyConstantForceDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ScriptableReservedDynent
==============
*/

void Load_ProcessStructLayout_ScriptableReservedDynent(void)
{
  ?Load_ProcessStructLayout_ScriptableReservedDynent@@YAXXZ();
}

/*
==============
Preload_ScriptableEventViewmodelShaderParamDefStream
==============
*/

void __fastcall Preload_ScriptableEventViewmodelShaderParamDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventViewmodelShaderParamDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventExplosionDefStream
==============
*/

void __fastcall Postload_ScriptableEventExplosionDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventExplosionDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableNoteTrackDef
==============
*/

void __fastcall Preload_ScriptableNoteTrackDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableNoteTrackDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ScriptableEventHideShowBoneDefArray
==============
*/

void __fastcall Postload_ScriptableEventHideShowBoneDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventHideShowBoneDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventTeamSelectorDef
==============
*/

void __fastcall Load_ScriptableEventTeamSelectorDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventTeamSelectorDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ScriptableStateBaseDefArray
==============
*/

void __fastcall Load_ScriptableStateBaseDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableStateBaseDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ScriptableEventScreenshakeDef
==============
*/

ScriptableEventScreenshakeDef *__fastcall AllocLoad_ScriptableEventScreenshakeDef()
{
  return ?AllocLoad_ScriptableEventScreenshakeDef@@YAPEAUScriptableEventScreenshakeDef@@XZ();
}

/*
==============
Load_CheckArrayMemberScriptableMapEnts459
==============
*/

void Load_CheckArrayMemberScriptableMapEnts459(void)
{
  ?Load_CheckArrayMemberScriptableMapEnts459@@YAXXZ();
}

/*
==============
AllocPreload_ScriptableEventRandomDef
==============
*/

ScriptableEventRandomDef *__fastcall AllocPreload_ScriptableEventRandomDef()
{
  return ?AllocPreload_ScriptableEventRandomDef@@YAPEAUScriptableEventRandomDef@@XZ();
}

/*
==============
Preload_ScriptableEventDefArray
==============
*/

void __fastcall Preload_ScriptableEventDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_Scriptable_ImageIdArray
==============
*/

int __fastcall Mark_Scriptable_ImageIdArray(const unsigned __int64 count)
{
  return ?Mark_Scriptable_ImageIdArray@@YAH_K@Z(count);
}

/*
==============
AllocLoad_ScriptableStateDef
==============
*/

ScriptableStateDef *__fastcall AllocLoad_ScriptableStateDef()
{
  return ?AllocLoad_ScriptableStateDef@@YAPEAUScriptableStateDef@@XZ();
}

/*
==============
Postload_Scriptable_ShaderParamType
==============
*/

void __fastcall Postload_Scriptable_ShaderParamType(const DBStreamStart streamStart)
{
  ?Postload_Scriptable_ShaderParamType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ScriptableEventSpawnDynentDefStream
==============
*/

void __fastcall Postload_ScriptableEventSpawnDynentDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventSpawnDynentDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_Scriptable_MaterialOverrideType
==============
*/

void __fastcall Postload_Scriptable_MaterialOverrideType(const DBStreamStart streamStart)
{
  ?Postload_Scriptable_MaterialOverrideType@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_ScriptableEventPFXDef
==============
*/

ScriptableEventPFXDef *__fastcall AllocPostload_ScriptableEventPFXDef()
{
  return ?AllocPostload_ScriptableEventPFXDef@@YAPEAUScriptableEventPFXDef@@XZ();
}

/*
==============
AllocPreload_ScriptableEventViewmodelShaderParamDef
==============
*/

ScriptableEventViewmodelShaderParamDef *__fastcall AllocPreload_ScriptableEventViewmodelShaderParamDef()
{
  return ?AllocPreload_ScriptableEventViewmodelShaderParamDef@@YAPEAUScriptableEventViewmodelShaderParamDef@@XZ();
}

/*
==============
Mark_ScriptableEventDynamicBoneNoiseCurveDef
==============
*/

int __fastcall Mark_ScriptableEventDynamicBoneNoiseCurveDef()
{
  return ?Mark_ScriptableEventDynamicBoneNoiseCurveDef@@YAHXZ();
}

/*
==============
Preload_ScriptableEventSpawnDynentDefStream
==============
*/

void __fastcall Preload_ScriptableEventSpawnDynentDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventSpawnDynentDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ScriptableEventApplyAngularForceDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventApplyAngularForceDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventApplyAngularForceDef@@YAXXZ();
}

/*
==============
Preload_ScriptableEventAddModelDefStream
==============
*/

void __fastcall Preload_ScriptableEventAddModelDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventAddModelDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableReservedDynentArray
==============
*/

void __fastcall Preload_ScriptableReservedDynentArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableReservedDynentArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ScriptableStateBaseDef
==============
*/

ScriptableStateBaseDef *__fastcall AllocPostload_ScriptableStateBaseDef()
{
  return ?AllocPostload_ScriptableStateBaseDef@@YAPEAUScriptableStateBaseDef@@XZ();
}

/*
==============
Load_ScriptableEventPartDamageDefStream
==============
*/

void __fastcall Load_ScriptableEventPartDamageDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventPartDamageDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableEventNoteTrackDefArray
==============
*/

int __fastcall Mark_ScriptableEventNoteTrackDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventNoteTrackDefArray@@YAH_K@Z(count);
}

/*
==============
Preload_ScriptableEventBaseDefStream
==============
*/

void __fastcall Preload_ScriptableEventBaseDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventBaseDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventCollisionDefStream
==============
*/

void __fastcall Postload_ScriptableEventCollisionDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventCollisionDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableEventHideShowBoneDefArray
==============
*/

int __fastcall Mark_ScriptableEventHideShowBoneDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventHideShowBoneDefArray@@YAH_K@Z(count);
}

/*
==============
Postload_ScriptableEventScriptDefStream
==============
*/

void __fastcall Postload_ScriptableEventScriptDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventScriptDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventApplyAngularForceDefArray
==============
*/

void __fastcall Load_ScriptableEventApplyAngularForceDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventApplyAngularForceDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptablePartReferenceArray
==============
*/

void __fastcall Preload_ScriptablePartReferenceArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptablePartReferenceArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_Scriptable_EventSun_Data
==============
*/

Scriptable_EventSun_Data *__fastcall AllocPostload_Scriptable_EventSun_Data()
{
  return ?AllocPostload_Scriptable_EventSun_Data@@YAPEAUScriptable_EventSun_Data@@XZ();
}

/*
==============
Postload_ScriptableEventObjectiveDef
==============
*/

void __fastcall Postload_ScriptableEventObjectiveDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventObjectiveDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_ScriptableEventMoveDef
==============
*/

ScriptableEventMoveDef *__fastcall AllocPostload_ScriptableEventMoveDef()
{
  return ?AllocPostload_ScriptableEventMoveDef@@YAPEAUScriptableEventMoveDef@@XZ();
}

/*
==============
Load_ScriptableEventViewTriggerDefArray
==============
*/

void __fastcall Load_ScriptableEventViewTriggerDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventViewTriggerDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventAnonymousDefArray
==============
*/

void __fastcall Load_ScriptableEventAnonymousDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventAnonymousDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_Scriptable_MayhemAction
==============
*/

void __fastcall Load_Scriptable_MayhemAction(const DBStreamStart streamStart)
{
  ?Load_Scriptable_MayhemAction@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ScriptableEventSoundDefArray
==============
*/

void __fastcall Load_ScriptableEventSoundDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventSoundDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventScriptDamageDef
==============
*/

void __fastcall Preload_ScriptableEventScriptDamageDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventScriptDamageDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ScriptableEventNoteTrackDefStream
==============
*/

void __fastcall Preload_ScriptableEventNoteTrackDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventNoteTrackDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPreload_ScriptableEventSpawnDynentDef
==============
*/

ScriptableEventSpawnDynentDef *__fastcall AllocPreload_ScriptableEventSpawnDynentDef()
{
  return ?AllocPreload_ScriptableEventSpawnDynentDef@@YAPEAUScriptableEventSpawnDynentDef@@XZ();
}

/*
==============
Mark_ScriptableEventApplyConstantForceDefArray
==============
*/

int __fastcall Mark_ScriptableEventApplyConstantForceDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventApplyConstantForceDefArray@@YAH_K@Z(count);
}

/*
==============
Load_ScriptablePhysicsLimitsArray
==============
*/

void __fastcall Load_ScriptablePhysicsLimitsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptablePhysicsLimitsArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_Scriptable_EventSun_DataArray
==============
*/

void __fastcall Preload_Scriptable_EventSun_DataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_Scriptable_EventSun_DataArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocLoad_ScriptableEventFootstepDef
==============
*/

ScriptableEventFootstepDef *__fastcall AllocLoad_ScriptableEventFootstepDef()
{
  return ?AllocLoad_ScriptableEventFootstepDef@@YAPEAUScriptableEventFootstepDef@@XZ();
}

/*
==============
Mark_ScriptableModelUnionArray
==============
*/

int __fastcall Mark_ScriptableModelUnionArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableModelUnionArray@@YAH_K@Z(count);
}

/*
==============
AllocPreload_Scriptable_ImageId
==============
*/

Scriptable_ImageId *__fastcall AllocPreload_Scriptable_ImageId()
{
  return ?AllocPreload_Scriptable_ImageId@@YAPEAW4Scriptable_ImageId@@XZ();
}

/*
==============
Preload_ScriptableEventVehicleBlowUpTireDefArray
==============
*/

void __fastcall Preload_ScriptableEventVehicleBlowUpTireDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventVehicleBlowUpTireDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableEventRandomDefArray
==============
*/

int __fastcall Mark_ScriptableEventRandomDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventRandomDefArray@@YAH_K@Z(count);
}

/*
==============
Mark_ScriptableEventCompassIconDefArray
==============
*/

int __fastcall Mark_ScriptableEventCompassIconDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventCompassIconDefArray@@YAH_K@Z(count);
}

/*
==============
Load_ScriptableEventSpatialDisableDef
==============
*/

void __fastcall Load_ScriptableEventSpatialDisableDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventSpatialDisableDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_ScriptableEventPlayMayhemDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventPlayMayhemDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventPlayMayhemDef@@YAXXZ();
}

/*
==============
Load_ScriptableEventApplyConstantForceDefArray
==============
*/

void __fastcall Load_ScriptableEventApplyConstantForceDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventApplyConstantForceDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptablePartDef
==============
*/

void __fastcall Postload_ScriptablePartDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptablePartDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPostload_ScriptableStateUsableDef
==============
*/

ScriptableStateUsableDef *__fastcall AllocPostload_ScriptableStateUsableDef()
{
  return ?AllocPostload_ScriptableStateUsableDef@@YAPEAUScriptableStateUsableDef@@XZ();
}

/*
==============
Load_ProcessStructLayout_ScriptableEventDlc1Def
==============
*/

void Load_ProcessStructLayout_ScriptableEventDlc1Def(void)
{
  ?Load_ProcessStructLayout_ScriptableEventDlc1Def@@YAXXZ();
}

/*
==============
Load_ScriptableEventScreenshakeDef
==============
*/

void __fastcall Load_ScriptableEventScreenshakeDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventScreenshakeDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_ScriptableEventModelDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventModelDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventModelDef@@YAXXZ();
}

/*
==============
Preload_Scriptable_AttackersArray
==============
*/

void __fastcall Preload_Scriptable_AttackersArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_Scriptable_AttackersArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventBaseDefArray
==============
*/

void __fastcall Load_ScriptableEventBaseDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventBaseDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ScriptableEventDynamicBoneNoiseCurveDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventDynamicBoneNoiseCurveDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventDynamicBoneNoiseCurveDef@@YAXXZ();
}

/*
==============
Mark_ScriptableStateBaseDef
==============
*/

int __fastcall Mark_ScriptableStateBaseDef()
{
  return ?Mark_ScriptableStateBaseDef@@YAHXZ();
}

/*
==============
Load_ScriptableDataTypeStream
==============
*/

void __fastcall Load_ScriptableDataTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableDataTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableStateHealthDef
==============
*/

void __fastcall Preload_ScriptableStateHealthDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableStateHealthDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ScriptableStateBaseDefArray
==============
*/

void __fastcall Postload_ScriptableStateBaseDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableStateBaseDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
AllocPostload_ScriptableEventApplyConstantAngularForceDef
==============
*/

ScriptableEventApplyConstantAngularForceDef *__fastcall AllocPostload_ScriptableEventApplyConstantAngularForceDef()
{
  return ?AllocPostload_ScriptableEventApplyConstantAngularForceDef@@YAPEAUScriptableEventApplyConstantAngularForceDef@@XZ();
}

/*
==============
Load_ScriptableEventAnimationDef
==============
*/

void __fastcall Load_ScriptableEventAnimationDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventAnimationDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ScriptableEventNoteTrackDef
==============
*/

void __fastcall Preload_ScriptableEventNoteTrackDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventNoteTrackDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocPreload_ScriptableEventHideShowBoneDef
==============
*/

ScriptableEventHideShowBoneDef *__fastcall AllocPreload_ScriptableEventHideShowBoneDef()
{
  return ?AllocPreload_ScriptableEventHideShowBoneDef@@YAPEAUScriptableEventHideShowBoneDef@@XZ();
}

/*
==============
AllocLoad_ScriptableEventNoteTrackDef
==============
*/

ScriptableEventNoteTrackDef *__fastcall AllocLoad_ScriptableEventNoteTrackDef()
{
  return ?AllocLoad_ScriptableEventNoteTrackDef@@YAPEAUScriptableEventNoteTrackDef@@XZ();
}

/*
==============
Mark_ScriptableDefArray
==============
*/

int __fastcall Mark_ScriptableDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableDefArray@@YAH_K@Z(count);
}

/*
==============
Load_ScriptableEventVehicleBlowUpTireDefStream
==============
*/

void __fastcall Load_ScriptableEventVehicleBlowUpTireDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventVehicleBlowUpTireDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableStateScriptedDefStream
==============
*/

void __fastcall Preload_ScriptableStateScriptedDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableStateScriptedDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableEventAnonymousDefArray
==============
*/

int __fastcall Mark_ScriptableEventAnonymousDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventAnonymousDefArray@@YAH_K@Z(count);
}

/*
==============
Postload_ScriptableEventAnonymousDefArray
==============
*/

void __fastcall Postload_ScriptableEventAnonymousDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventAnonymousDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableEventViewmodelChangeImageDefArray
==============
*/

int __fastcall Mark_ScriptableEventViewmodelChangeImageDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventViewmodelChangeImageDefArray@@YAH_K@Z(count);
}

/*
==============
Load_Scriptable_ImageIdArray
==============
*/

void __fastcall Load_Scriptable_ImageIdArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_Scriptable_ImageIdArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventDisablePhysicsSubShapeDefArray
==============
*/

void __fastcall Load_ScriptableEventDisablePhysicsSubShapeDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventDisablePhysicsSubShapeDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventRandomDef
==============
*/

void __fastcall Postload_ScriptableEventRandomDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventRandomDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_Scriptable_DamageCauseArray
==============
*/

void __fastcall Preload_Scriptable_DamageCauseArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_Scriptable_DamageCauseArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventScriptDef
==============
*/

void __fastcall Preload_ScriptableEventScriptDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventScriptDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
AllocLoad_ScriptableInstance
==============
*/

ScriptableInstance *__fastcall AllocLoad_ScriptableInstance()
{
  return ?AllocLoad_ScriptableInstance@@YAPEAUScriptableInstance@@XZ();
}

/*
==============
Mark_Scriptable_TeamFilter
==============
*/

int __fastcall Mark_Scriptable_TeamFilter()
{
  return ?Mark_Scriptable_TeamFilter@@YAHXZ();
}

/*
==============
Mark_ScriptableEventAnimationDefArray
==============
*/

int __fastcall Mark_ScriptableEventAnimationDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventAnimationDefArray@@YAH_K@Z(count);
}

/*
==============
Preload_ScriptableEventScreenshakeDefArray
==============
*/

void __fastcall Preload_ScriptableEventScreenshakeDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventScreenshakeDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableEventAddModelDefArray
==============
*/

int __fastcall Mark_ScriptableEventAddModelDefArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableEventAddModelDefArray@@YAH_K@Z(count);
}

/*
==============
Load_ScriptableEventDlc1DefStream
==============
*/

void __fastcall Load_ScriptableEventDlc1DefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventDlc1DefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_Scriptable_DamageCauseStream
==============
*/

void __fastcall Load_Scriptable_DamageCauseStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_Scriptable_DamageCauseStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_ScriptableEventViewTriggerDef
==============
*/

int __fastcall Mark_ScriptableEventViewTriggerDef()
{
  return ?Mark_ScriptableEventViewTriggerDef@@YAHXZ();
}

/*
==============
Mark_ScriptableEventHideShowBoneDef
==============
*/

int __fastcall Mark_ScriptableEventHideShowBoneDef()
{
  return ?Mark_ScriptableEventHideShowBoneDef@@YAHXZ();
}

/*
==============
Preload_ScriptableStateSimpleDef
==============
*/

void __fastcall Preload_ScriptableStateSimpleDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableStateSimpleDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_Scriptable_MayhemActionArray
==============
*/

void __fastcall Preload_Scriptable_MayhemActionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_Scriptable_MayhemActionArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_Scriptable_MayhemActionStream
==============
*/

void __fastcall Postload_Scriptable_MayhemActionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_Scriptable_MayhemActionStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventWaitDefStream
==============
*/

void __fastcall Preload_ScriptableEventWaitDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventWaitDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableEventAnimationDefStream
==============
*/

void __fastcall Load_ScriptableEventAnimationDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableEventAnimationDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptablePartDefArray
==============
*/

void __fastcall Load_ScriptablePartDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptablePartDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventMoveDefStream
==============
*/

void __fastcall Postload_ScriptableEventMoveDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableEventMoveDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventBaseDef
==============
*/

void __fastcall Postload_ScriptableEventBaseDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventBaseDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ScriptableEventSunDefStream
==============
*/

void __fastcall Preload_ScriptableEventSunDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventSunDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptablePhysicsLimitsStream
==============
*/

void __fastcall Preload_ScriptablePhysicsLimitsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptablePhysicsLimitsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableEventScriptDamageDef
==============
*/

void __fastcall Postload_ScriptableEventScriptDamageDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventScriptDamageDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Postload_ScriptableEventApplyConstantAngularForceDef
==============
*/

void __fastcall Postload_ScriptableEventApplyConstantAngularForceDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableEventApplyConstantAngularForceDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Load_ProcessStructLayout_ScriptablePartReference
==============
*/

void Load_ProcessStructLayout_ScriptablePartReference(void)
{
  ?Load_ProcessStructLayout_ScriptablePartReference@@YAXXZ();
}

/*
==============
Load_ScriptableEventScriptDef
==============
*/

void __fastcall Load_ScriptableEventScriptDef(const DBStreamStart streamStart)
{
  ?Load_ScriptableEventScriptDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ScriptablePartReference
==============
*/

int __fastcall Mark_ScriptablePartReference()
{
  return ?Mark_ScriptablePartReference@@YAHXZ();
}

/*
==============
Load_ProcessStructLayout_ScriptableEventScriptDamageDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventScriptDamageDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventScriptDamageDef@@YAXXZ();
}

/*
==============
Mark_ScriptableEventApplyConstantAngularForceDef
==============
*/

int __fastcall Mark_ScriptableEventApplyConstantAngularForceDef()
{
  return ?Mark_ScriptableEventApplyConstantAngularForceDef@@YAHXZ();
}

/*
==============
Load_Scriptable_StateTypeStream
==============
*/

void __fastcall Load_Scriptable_StateTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_Scriptable_StateTypeStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Postload_ScriptableDef
==============
*/

void __fastcall Postload_ScriptableDef(const DBStreamStart streamStart)
{
  ?Postload_ScriptableDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ScriptableEventAddModelDef
==============
*/

int __fastcall Mark_ScriptableEventAddModelDef()
{
  return ?Mark_ScriptableEventAddModelDef@@YAHXZ();
}

/*
==============
Load_ScriptableStateBaseDefStream
==============
*/

void __fastcall Load_ScriptableStateBaseDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Load_ScriptableStateBaseDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Preload_ScriptableEventMaterialOverrideDef
==============
*/

void __fastcall Preload_ScriptableEventMaterialOverrideDef(const DBStreamStart streamStart)
{
  ?Preload_ScriptableEventMaterialOverrideDef@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Mark_ScriptableDefPtrArray
==============
*/

int __fastcall Mark_ScriptableDefPtrArray(const unsigned __int64 count)
{
  return ?Mark_ScriptableDefPtrArray@@YAH_K@Z(count);
}

/*
==============
Postload_ScriptableMapEntsStream
==============
*/

void __fastcall Postload_ScriptableMapEntsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Postload_ScriptableMapEntsStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Mark_Scriptable_MaterialOverrideType
==============
*/

int __fastcall Mark_Scriptable_MaterialOverrideType()
{
  return ?Mark_Scriptable_MaterialOverrideType@@YAHXZ();
}

/*
==============
Preload_ScriptableEventApplyConstantAngularForceDefArray
==============
*/

void __fastcall Preload_ScriptableEventApplyConstantAngularForceDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventApplyConstantAngularForceDefArray@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ScriptableDamageTagOverride
==============
*/

void __fastcall Load_ScriptableDamageTagOverride(const DBStreamStart streamStart)
{
  ?Load_ScriptableDamageTagOverride@@YAXW4DBStreamStart@@@Z(streamStart);
}

/*
==============
Preload_ScriptableEventHoverDefStream
==============
*/

void __fastcall Preload_ScriptableEventHoverDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ?Preload_ScriptableEventHoverDefStream@@YAXW4DBStreamStart@@_K@Z(streamStart, count);
}

/*
==============
Load_ProcessStructLayout_ScriptableEventHideShowBoneDef
==============
*/

void Load_ProcessStructLayout_ScriptableEventHideShowBoneDef(void)
{
  ?Load_ProcessStructLayout_ScriptableEventHideShowBoneDef@@YAXXZ();
}

/*
==============
AllocPostload_Scriptable_StateType
==============
*/

Scriptable_StateType *__fastcall AllocPostload_Scriptable_StateType()
{
  return ?AllocPostload_Scriptable_StateType@@YAPEAW4Scriptable_StateType@@XZ();
}

/*
==============
AllocLoad_ScriptableDamageTagOverride
==============
*/
ScriptableDamageTagOverride *AllocLoad_ScriptableDamageTagOverride()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableDamageTagOverride *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableDataType
==============
*/
ScriptableDataType *AllocLoad_ScriptableDataType()
{
  return (ScriptableDataType *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableDef
==============
*/
ScriptableDef *AllocLoad_ScriptableDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableDefPtr
==============
*/
ScriptableDef **AllocLoad_ScriptableDefPtr()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableDef **)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventAddModelDef
==============
*/
ScriptableEventAddModelDef *AllocLoad_ScriptableEventAddModelDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventAddModelDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventAnimationDef
==============
*/
ScriptableEventAnimationDef *AllocLoad_ScriptableEventAnimationDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventAnimationDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventAnonymousDef
==============
*/
ScriptableEventAnonymousDef *AllocLoad_ScriptableEventAnonymousDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventAnonymousDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventApplyAngularForceDef
==============
*/
ScriptableEventApplyAngularForceDef *AllocLoad_ScriptableEventApplyAngularForceDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventApplyAngularForceDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventApplyConstantAngularForceDef
==============
*/
ScriptableEventApplyConstantAngularForceDef *AllocLoad_ScriptableEventApplyConstantAngularForceDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventApplyConstantAngularForceDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventApplyConstantForceDef
==============
*/
ScriptableEventApplyConstantForceDef *AllocLoad_ScriptableEventApplyConstantForceDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventApplyConstantForceDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventApplyForceDef
==============
*/
ScriptableEventApplyForceDef *AllocLoad_ScriptableEventApplyForceDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventApplyForceDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventBaseDef
==============
*/
ScriptableEventBaseDef *AllocLoad_ScriptableEventBaseDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventBaseDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventChunkDynentDef
==============
*/
ScriptableEventChunkDynentDef *AllocLoad_ScriptableEventChunkDynentDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventChunkDynentDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventClientViewSelectorDef
==============
*/
ScriptableEventClientViewSelectorDef *AllocLoad_ScriptableEventClientViewSelectorDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventClientViewSelectorDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventCollisionDef
==============
*/
ScriptableEventCollisionDef *AllocLoad_ScriptableEventCollisionDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventCollisionDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventCompassIconDef
==============
*/
ScriptableEventCompassIconDef *AllocLoad_ScriptableEventCompassIconDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventCompassIconDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventDef
==============
*/
ScriptableEventDef *AllocLoad_ScriptableEventDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventDefUnion
==============
*/
ScriptableEventDefUnion *AllocLoad_ScriptableEventDefUnion()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventDefUnion *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventDisablePhysicsSubShapeDef
==============
*/
ScriptableEventDisablePhysicsSubShapeDef *AllocLoad_ScriptableEventDisablePhysicsSubShapeDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventDisablePhysicsSubShapeDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventDlc1Def
==============
*/
ScriptableEventDlc1Def *AllocLoad_ScriptableEventDlc1Def()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventDlc1Def *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventDynamicBoneNoiseCurveDef
==============
*/
ScriptableEventDynamicBoneNoiseCurveDef *AllocLoad_ScriptableEventDynamicBoneNoiseCurveDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventDynamicBoneNoiseCurveDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventExplosionDef
==============
*/
ScriptableEventExplosionDef *AllocLoad_ScriptableEventExplosionDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventExplosionDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventFootstepDef
==============
*/
ScriptableEventFootstepDef *AllocLoad_ScriptableEventFootstepDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventFootstepDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventGravityArcDef
==============
*/
ScriptableEventGravityArcDef *AllocLoad_ScriptableEventGravityArcDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventGravityArcDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventHideShowBoneDef
==============
*/
ScriptableEventHideShowBoneDef *AllocLoad_ScriptableEventHideShowBoneDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventHideShowBoneDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventHoverDef
==============
*/
ScriptableEventHoverDef *AllocLoad_ScriptableEventHoverDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventHoverDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventLightDef
==============
*/
ScriptableEventLightDef *AllocLoad_ScriptableEventLightDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventLightDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventMaterialOverrideDef
==============
*/
ScriptableEventMaterialOverrideDef *AllocLoad_ScriptableEventMaterialOverrideDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventMaterialOverrideDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventModelDef
==============
*/
ScriptableEventModelDef *AllocLoad_ScriptableEventModelDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventModelDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventMoveDef
==============
*/
ScriptableEventMoveDef *AllocLoad_ScriptableEventMoveDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventMoveDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventNoteTrackDef
==============
*/
ScriptableEventNoteTrackDef *AllocLoad_ScriptableEventNoteTrackDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventNoteTrackDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventObjectiveDef
==============
*/
ScriptableEventObjectiveDef *AllocLoad_ScriptableEventObjectiveDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventObjectiveDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventPFXDef
==============
*/
ScriptableEventPFXDef *AllocLoad_ScriptableEventPFXDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventPFXDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventPartDamageDef
==============
*/
ScriptableEventPartDamageDef *AllocLoad_ScriptableEventPartDamageDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventPartDamageDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventPlayMayhemDef
==============
*/
ScriptableEventPlayMayhemDef *AllocLoad_ScriptableEventPlayMayhemDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventPlayMayhemDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventRandomDef
==============
*/
ScriptableEventRandomDef *AllocLoad_ScriptableEventRandomDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventRandomDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventRumbleDef
==============
*/
ScriptableEventRumbleDef *AllocLoad_ScriptableEventRumbleDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventRumbleDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventScreenshakeDef
==============
*/
ScriptableEventScreenshakeDef *AllocLoad_ScriptableEventScreenshakeDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventScreenshakeDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventScriptDamageDef
==============
*/
ScriptableEventScriptDamageDef *AllocLoad_ScriptableEventScriptDamageDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventScriptDamageDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventScriptDef
==============
*/
ScriptableEventScriptDef *AllocLoad_ScriptableEventScriptDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventScriptDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventSetMayhemDef
==============
*/
ScriptableEventSetMayhemDef *AllocLoad_ScriptableEventSetMayhemDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventSetMayhemDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventSoundDef
==============
*/
ScriptableEventSoundDef *AllocLoad_ScriptableEventSoundDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventSoundDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventSpatialDisableDef
==============
*/
ScriptableEventSpatialDisableDef *AllocLoad_ScriptableEventSpatialDisableDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventSpatialDisableDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventSpawnDynentDef
==============
*/
ScriptableEventSpawnDynentDef *AllocLoad_ScriptableEventSpawnDynentDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventSpawnDynentDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventStateChangeDef
==============
*/
ScriptableEventStateChangeDef *AllocLoad_ScriptableEventStateChangeDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventStateChangeDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventSunDef
==============
*/
ScriptableEventSunDef *AllocLoad_ScriptableEventSunDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventSunDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventTeamSelectorDef
==============
*/
ScriptableEventTeamSelectorDef *AllocLoad_ScriptableEventTeamSelectorDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventTeamSelectorDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventVehicleBlowUpTireDef
==============
*/
ScriptableEventVehicleBlowUpTireDef *AllocLoad_ScriptableEventVehicleBlowUpTireDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventVehicleBlowUpTireDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventViewTriggerDef
==============
*/
ScriptableEventViewTriggerDef *AllocLoad_ScriptableEventViewTriggerDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventViewTriggerDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventViewmodelChangeImageDef
==============
*/
ScriptableEventViewmodelChangeImageDef *AllocLoad_ScriptableEventViewmodelChangeImageDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventViewmodelChangeImageDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventViewmodelShaderParamDef
==============
*/
ScriptableEventViewmodelShaderParamDef *AllocLoad_ScriptableEventViewmodelShaderParamDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventViewmodelShaderParamDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableEventWaitDef
==============
*/
ScriptableEventWaitDef *AllocLoad_ScriptableEventWaitDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventWaitDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableInstance
==============
*/
ScriptableInstance *AllocLoad_ScriptableInstance()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableInstance *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableMapEnts
==============
*/
ScriptableMapEnts *AllocLoad_ScriptableMapEnts()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableMapEnts *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableModelUnion
==============
*/
ScriptableModelUnion *AllocLoad_ScriptableModelUnion()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableModelUnion *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableNoteTrackDef
==============
*/
ScriptableNoteTrackDef *AllocLoad_ScriptableNoteTrackDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableNoteTrackDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptablePartDef
==============
*/
ScriptablePartDef *AllocLoad_ScriptablePartDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptablePartDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptablePartReference
==============
*/
ScriptablePartReference *AllocLoad_ScriptablePartReference()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptablePartReference *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptablePhysicsLimits
==============
*/
ScriptablePhysicsLimits *AllocLoad_ScriptablePhysicsLimits()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptablePhysicsLimits *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableReservedDynent
==============
*/
ScriptableReservedDynent *AllocLoad_ScriptableReservedDynent()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableReservedDynent *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableReservedDynents
==============
*/
ScriptableReservedDynents *AllocLoad_ScriptableReservedDynents()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableReservedDynents *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableStateBaseDef
==============
*/
ScriptableStateBaseDef *AllocLoad_ScriptableStateBaseDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableStateBaseDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableStateDef
==============
*/
ScriptableStateDef *AllocLoad_ScriptableStateDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableStateDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableStateDefUnion
==============
*/
ScriptableStateDefUnion *AllocLoad_ScriptableStateDefUnion()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableStateDefUnion *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableStateHealthDef
==============
*/
ScriptableStateHealthDef *AllocLoad_ScriptableStateHealthDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableStateHealthDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableStateScriptedDef
==============
*/
ScriptableStateScriptedDef *AllocLoad_ScriptableStateScriptedDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableStateScriptedDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableStateSimpleDef
==============
*/
ScriptableStateSimpleDef *AllocLoad_ScriptableStateSimpleDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableStateSimpleDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_ScriptableStateUsableDef
==============
*/
ScriptableStateUsableDef *AllocLoad_ScriptableStateUsableDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableStateUsableDef *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_Scriptable_Attackers
==============
*/
Scriptable_Attackers *AllocLoad_Scriptable_Attackers()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (Scriptable_Attackers *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_Scriptable_DamageCause
==============
*/
Scriptable_DamageCause *AllocLoad_Scriptable_DamageCause()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (Scriptable_DamageCause *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_Scriptable_EventSun_Data
==============
*/
Scriptable_EventSun_Data *AllocLoad_Scriptable_EventSun_Data()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (Scriptable_EventSun_Data *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_Scriptable_EventType
==============
*/
Scriptable_EventType *AllocLoad_Scriptable_EventType()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (Scriptable_EventType *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_Scriptable_ImageId
==============
*/
Scriptable_ImageId *AllocLoad_Scriptable_ImageId()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (Scriptable_ImageId *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_Scriptable_MaterialOverrideType
==============
*/
Scriptable_MaterialOverrideType *AllocLoad_Scriptable_MaterialOverrideType()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (Scriptable_MaterialOverrideType *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_Scriptable_MayhemAction
==============
*/
Scriptable_MayhemAction *AllocLoad_Scriptable_MayhemAction()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (Scriptable_MayhemAction *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_Scriptable_ShaderParamType
==============
*/
Scriptable_ShaderParamType *AllocLoad_Scriptable_ShaderParamType()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (Scriptable_ShaderParamType *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_Scriptable_StateType
==============
*/
Scriptable_StateType *AllocLoad_Scriptable_StateType()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (Scriptable_StateType *)g_streamPosGlob.pos;
}

/*
==============
AllocLoad_Scriptable_TeamFilter
==============
*/
Scriptable_TeamFilter *AllocLoad_Scriptable_TeamFilter()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (Scriptable_TeamFilter *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableDamageTagOverride
==============
*/
ScriptableDamageTagOverride *AllocPostload_ScriptableDamageTagOverride()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableDamageTagOverride *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableDataType
==============
*/
ScriptableDataType *AllocPostload_ScriptableDataType()
{
  return (ScriptableDataType *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableDef
==============
*/
ScriptableDef *AllocPostload_ScriptableDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableDefPtr
==============
*/
ScriptableDef **AllocPostload_ScriptableDefPtr()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableDef **)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventAddModelDef
==============
*/
ScriptableEventAddModelDef *AllocPostload_ScriptableEventAddModelDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventAddModelDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventAnimationDef
==============
*/
ScriptableEventAnimationDef *AllocPostload_ScriptableEventAnimationDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventAnimationDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventAnonymousDef
==============
*/
ScriptableEventAnonymousDef *AllocPostload_ScriptableEventAnonymousDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventAnonymousDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventApplyAngularForceDef
==============
*/
ScriptableEventApplyAngularForceDef *AllocPostload_ScriptableEventApplyAngularForceDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventApplyAngularForceDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventApplyConstantAngularForceDef
==============
*/
ScriptableEventApplyConstantAngularForceDef *AllocPostload_ScriptableEventApplyConstantAngularForceDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventApplyConstantAngularForceDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventApplyConstantForceDef
==============
*/
ScriptableEventApplyConstantForceDef *AllocPostload_ScriptableEventApplyConstantForceDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventApplyConstantForceDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventApplyForceDef
==============
*/
ScriptableEventApplyForceDef *AllocPostload_ScriptableEventApplyForceDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventApplyForceDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventBaseDef
==============
*/
ScriptableEventBaseDef *AllocPostload_ScriptableEventBaseDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventBaseDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventChunkDynentDef
==============
*/
ScriptableEventChunkDynentDef *AllocPostload_ScriptableEventChunkDynentDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventChunkDynentDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventClientViewSelectorDef
==============
*/
ScriptableEventClientViewSelectorDef *AllocPostload_ScriptableEventClientViewSelectorDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventClientViewSelectorDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventCollisionDef
==============
*/
ScriptableEventCollisionDef *AllocPostload_ScriptableEventCollisionDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventCollisionDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventCompassIconDef
==============
*/
ScriptableEventCompassIconDef *AllocPostload_ScriptableEventCompassIconDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventCompassIconDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventDef
==============
*/
ScriptableEventDef *AllocPostload_ScriptableEventDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventDefUnion
==============
*/
ScriptableEventDefUnion *AllocPostload_ScriptableEventDefUnion()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventDefUnion *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventDisablePhysicsSubShapeDef
==============
*/
ScriptableEventDisablePhysicsSubShapeDef *AllocPostload_ScriptableEventDisablePhysicsSubShapeDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventDisablePhysicsSubShapeDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventDlc1Def
==============
*/
ScriptableEventDlc1Def *AllocPostload_ScriptableEventDlc1Def()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventDlc1Def *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventDynamicBoneNoiseCurveDef
==============
*/
ScriptableEventDynamicBoneNoiseCurveDef *AllocPostload_ScriptableEventDynamicBoneNoiseCurveDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventDynamicBoneNoiseCurveDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventExplosionDef
==============
*/
ScriptableEventExplosionDef *AllocPostload_ScriptableEventExplosionDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventExplosionDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventFootstepDef
==============
*/
ScriptableEventFootstepDef *AllocPostload_ScriptableEventFootstepDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventFootstepDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventGravityArcDef
==============
*/
ScriptableEventGravityArcDef *AllocPostload_ScriptableEventGravityArcDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventGravityArcDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventHideShowBoneDef
==============
*/
ScriptableEventHideShowBoneDef *AllocPostload_ScriptableEventHideShowBoneDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventHideShowBoneDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventHoverDef
==============
*/
ScriptableEventHoverDef *AllocPostload_ScriptableEventHoverDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventHoverDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventLightDef
==============
*/
ScriptableEventLightDef *AllocPostload_ScriptableEventLightDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventLightDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventMaterialOverrideDef
==============
*/
ScriptableEventMaterialOverrideDef *AllocPostload_ScriptableEventMaterialOverrideDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventMaterialOverrideDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventModelDef
==============
*/
ScriptableEventModelDef *AllocPostload_ScriptableEventModelDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventModelDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventMoveDef
==============
*/
ScriptableEventMoveDef *AllocPostload_ScriptableEventMoveDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventMoveDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventNoteTrackDef
==============
*/
ScriptableEventNoteTrackDef *AllocPostload_ScriptableEventNoteTrackDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventNoteTrackDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventObjectiveDef
==============
*/
ScriptableEventObjectiveDef *AllocPostload_ScriptableEventObjectiveDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventObjectiveDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventPFXDef
==============
*/
ScriptableEventPFXDef *AllocPostload_ScriptableEventPFXDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventPFXDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventPartDamageDef
==============
*/
ScriptableEventPartDamageDef *AllocPostload_ScriptableEventPartDamageDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventPartDamageDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventPlayMayhemDef
==============
*/
ScriptableEventPlayMayhemDef *AllocPostload_ScriptableEventPlayMayhemDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventPlayMayhemDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventRandomDef
==============
*/
ScriptableEventRandomDef *AllocPostload_ScriptableEventRandomDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventRandomDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventRumbleDef
==============
*/
ScriptableEventRumbleDef *AllocPostload_ScriptableEventRumbleDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventRumbleDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventScreenshakeDef
==============
*/
ScriptableEventScreenshakeDef *AllocPostload_ScriptableEventScreenshakeDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventScreenshakeDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventScriptDamageDef
==============
*/
ScriptableEventScriptDamageDef *AllocPostload_ScriptableEventScriptDamageDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventScriptDamageDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventScriptDef
==============
*/
ScriptableEventScriptDef *AllocPostload_ScriptableEventScriptDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventScriptDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventSetMayhemDef
==============
*/
ScriptableEventSetMayhemDef *AllocPostload_ScriptableEventSetMayhemDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventSetMayhemDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventSoundDef
==============
*/
ScriptableEventSoundDef *AllocPostload_ScriptableEventSoundDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventSoundDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventSpatialDisableDef
==============
*/
ScriptableEventSpatialDisableDef *AllocPostload_ScriptableEventSpatialDisableDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventSpatialDisableDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventSpawnDynentDef
==============
*/
ScriptableEventSpawnDynentDef *AllocPostload_ScriptableEventSpawnDynentDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventSpawnDynentDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventStateChangeDef
==============
*/
ScriptableEventStateChangeDef *AllocPostload_ScriptableEventStateChangeDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventStateChangeDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventSunDef
==============
*/
ScriptableEventSunDef *AllocPostload_ScriptableEventSunDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventSunDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventTeamSelectorDef
==============
*/
ScriptableEventTeamSelectorDef *AllocPostload_ScriptableEventTeamSelectorDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventTeamSelectorDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventVehicleBlowUpTireDef
==============
*/
ScriptableEventVehicleBlowUpTireDef *AllocPostload_ScriptableEventVehicleBlowUpTireDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventVehicleBlowUpTireDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventViewTriggerDef
==============
*/
ScriptableEventViewTriggerDef *AllocPostload_ScriptableEventViewTriggerDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventViewTriggerDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventViewmodelChangeImageDef
==============
*/
ScriptableEventViewmodelChangeImageDef *AllocPostload_ScriptableEventViewmodelChangeImageDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventViewmodelChangeImageDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventViewmodelShaderParamDef
==============
*/
ScriptableEventViewmodelShaderParamDef *AllocPostload_ScriptableEventViewmodelShaderParamDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventViewmodelShaderParamDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableEventWaitDef
==============
*/
ScriptableEventWaitDef *AllocPostload_ScriptableEventWaitDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventWaitDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableInstance
==============
*/
ScriptableInstance *AllocPostload_ScriptableInstance()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableInstance *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableMapEnts
==============
*/
ScriptableMapEnts *AllocPostload_ScriptableMapEnts()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableMapEnts *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableModelUnion
==============
*/
ScriptableModelUnion *AllocPostload_ScriptableModelUnion()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableModelUnion *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableNoteTrackDef
==============
*/
ScriptableNoteTrackDef *AllocPostload_ScriptableNoteTrackDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableNoteTrackDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptablePartDef
==============
*/
ScriptablePartDef *AllocPostload_ScriptablePartDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptablePartDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptablePartReference
==============
*/
ScriptablePartReference *AllocPostload_ScriptablePartReference()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptablePartReference *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptablePhysicsLimits
==============
*/
ScriptablePhysicsLimits *AllocPostload_ScriptablePhysicsLimits()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptablePhysicsLimits *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableReservedDynent
==============
*/
ScriptableReservedDynent *AllocPostload_ScriptableReservedDynent()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableReservedDynent *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableReservedDynents
==============
*/
ScriptableReservedDynents *AllocPostload_ScriptableReservedDynents()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableReservedDynents *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableStateBaseDef
==============
*/
ScriptableStateBaseDef *AllocPostload_ScriptableStateBaseDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableStateBaseDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableStateDef
==============
*/
ScriptableStateDef *AllocPostload_ScriptableStateDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableStateDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableStateDefUnion
==============
*/
ScriptableStateDefUnion *AllocPostload_ScriptableStateDefUnion()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableStateDefUnion *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableStateHealthDef
==============
*/
ScriptableStateHealthDef *AllocPostload_ScriptableStateHealthDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableStateHealthDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableStateScriptedDef
==============
*/
ScriptableStateScriptedDef *AllocPostload_ScriptableStateScriptedDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableStateScriptedDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableStateSimpleDef
==============
*/
ScriptableStateSimpleDef *AllocPostload_ScriptableStateSimpleDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableStateSimpleDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_ScriptableStateUsableDef
==============
*/
ScriptableStateUsableDef *AllocPostload_ScriptableStateUsableDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableStateUsableDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_Scriptable_Attackers
==============
*/
Scriptable_Attackers *AllocPostload_Scriptable_Attackers()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (Scriptable_Attackers *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_Scriptable_DamageCause
==============
*/
Scriptable_DamageCause *AllocPostload_Scriptable_DamageCause()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (Scriptable_DamageCause *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_Scriptable_EventSun_Data
==============
*/
Scriptable_EventSun_Data *AllocPostload_Scriptable_EventSun_Data()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (Scriptable_EventSun_Data *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_Scriptable_EventType
==============
*/
Scriptable_EventType *AllocPostload_Scriptable_EventType()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (Scriptable_EventType *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_Scriptable_ImageId
==============
*/
Scriptable_ImageId *AllocPostload_Scriptable_ImageId()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (Scriptable_ImageId *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_Scriptable_MaterialOverrideType
==============
*/
Scriptable_MaterialOverrideType *AllocPostload_Scriptable_MaterialOverrideType()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (Scriptable_MaterialOverrideType *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_Scriptable_MayhemAction
==============
*/
Scriptable_MayhemAction *AllocPostload_Scriptable_MayhemAction()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (Scriptable_MayhemAction *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_Scriptable_ShaderParamType
==============
*/
Scriptable_ShaderParamType *AllocPostload_Scriptable_ShaderParamType()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (Scriptable_ShaderParamType *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_Scriptable_StateType
==============
*/
Scriptable_StateType *AllocPostload_Scriptable_StateType()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (Scriptable_StateType *)g_streamPosGlob.pos;
}

/*
==============
AllocPostload_Scriptable_TeamFilter
==============
*/
Scriptable_TeamFilter *AllocPostload_Scriptable_TeamFilter()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (Scriptable_TeamFilter *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableDamageTagOverride
==============
*/
ScriptableDamageTagOverride *AllocPreload_ScriptableDamageTagOverride()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableDamageTagOverride *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableDataType
==============
*/
ScriptableDataType *AllocPreload_ScriptableDataType()
{
  return (ScriptableDataType *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableDef
==============
*/
ScriptableDef *AllocPreload_ScriptableDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableDefPtr
==============
*/
ScriptableDef **AllocPreload_ScriptableDefPtr()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableDef **)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventAddModelDef
==============
*/
ScriptableEventAddModelDef *AllocPreload_ScriptableEventAddModelDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventAddModelDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventAnimationDef
==============
*/
ScriptableEventAnimationDef *AllocPreload_ScriptableEventAnimationDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventAnimationDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventAnonymousDef
==============
*/
ScriptableEventAnonymousDef *AllocPreload_ScriptableEventAnonymousDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventAnonymousDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventApplyAngularForceDef
==============
*/
ScriptableEventApplyAngularForceDef *AllocPreload_ScriptableEventApplyAngularForceDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventApplyAngularForceDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventApplyConstantAngularForceDef
==============
*/
ScriptableEventApplyConstantAngularForceDef *AllocPreload_ScriptableEventApplyConstantAngularForceDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventApplyConstantAngularForceDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventApplyConstantForceDef
==============
*/
ScriptableEventApplyConstantForceDef *AllocPreload_ScriptableEventApplyConstantForceDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventApplyConstantForceDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventApplyForceDef
==============
*/
ScriptableEventApplyForceDef *AllocPreload_ScriptableEventApplyForceDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventApplyForceDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventBaseDef
==============
*/
ScriptableEventBaseDef *AllocPreload_ScriptableEventBaseDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventBaseDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventChunkDynentDef
==============
*/
ScriptableEventChunkDynentDef *AllocPreload_ScriptableEventChunkDynentDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventChunkDynentDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventClientViewSelectorDef
==============
*/
ScriptableEventClientViewSelectorDef *AllocPreload_ScriptableEventClientViewSelectorDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventClientViewSelectorDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventCollisionDef
==============
*/
ScriptableEventCollisionDef *AllocPreload_ScriptableEventCollisionDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventCollisionDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventCompassIconDef
==============
*/
ScriptableEventCompassIconDef *AllocPreload_ScriptableEventCompassIconDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventCompassIconDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventDef
==============
*/
ScriptableEventDef *AllocPreload_ScriptableEventDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventDefUnion
==============
*/
ScriptableEventDefUnion *AllocPreload_ScriptableEventDefUnion()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventDefUnion *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventDisablePhysicsSubShapeDef
==============
*/
ScriptableEventDisablePhysicsSubShapeDef *AllocPreload_ScriptableEventDisablePhysicsSubShapeDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventDisablePhysicsSubShapeDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventDlc1Def
==============
*/
ScriptableEventDlc1Def *AllocPreload_ScriptableEventDlc1Def()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventDlc1Def *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventDynamicBoneNoiseCurveDef
==============
*/
ScriptableEventDynamicBoneNoiseCurveDef *AllocPreload_ScriptableEventDynamicBoneNoiseCurveDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventDynamicBoneNoiseCurveDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventExplosionDef
==============
*/
ScriptableEventExplosionDef *AllocPreload_ScriptableEventExplosionDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventExplosionDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventFootstepDef
==============
*/
ScriptableEventFootstepDef *AllocPreload_ScriptableEventFootstepDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventFootstepDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventGravityArcDef
==============
*/
ScriptableEventGravityArcDef *AllocPreload_ScriptableEventGravityArcDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventGravityArcDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventHideShowBoneDef
==============
*/
ScriptableEventHideShowBoneDef *AllocPreload_ScriptableEventHideShowBoneDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventHideShowBoneDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventHoverDef
==============
*/
ScriptableEventHoverDef *AllocPreload_ScriptableEventHoverDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventHoverDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventLightDef
==============
*/
ScriptableEventLightDef *AllocPreload_ScriptableEventLightDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventLightDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventMaterialOverrideDef
==============
*/
ScriptableEventMaterialOverrideDef *AllocPreload_ScriptableEventMaterialOverrideDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventMaterialOverrideDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventModelDef
==============
*/
ScriptableEventModelDef *AllocPreload_ScriptableEventModelDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventModelDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventMoveDef
==============
*/
ScriptableEventMoveDef *AllocPreload_ScriptableEventMoveDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventMoveDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventNoteTrackDef
==============
*/
ScriptableEventNoteTrackDef *AllocPreload_ScriptableEventNoteTrackDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventNoteTrackDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventObjectiveDef
==============
*/
ScriptableEventObjectiveDef *AllocPreload_ScriptableEventObjectiveDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventObjectiveDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventPFXDef
==============
*/
ScriptableEventPFXDef *AllocPreload_ScriptableEventPFXDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventPFXDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventPartDamageDef
==============
*/
ScriptableEventPartDamageDef *AllocPreload_ScriptableEventPartDamageDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventPartDamageDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventPlayMayhemDef
==============
*/
ScriptableEventPlayMayhemDef *AllocPreload_ScriptableEventPlayMayhemDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventPlayMayhemDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventRandomDef
==============
*/
ScriptableEventRandomDef *AllocPreload_ScriptableEventRandomDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventRandomDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventRumbleDef
==============
*/
ScriptableEventRumbleDef *AllocPreload_ScriptableEventRumbleDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventRumbleDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventScreenshakeDef
==============
*/
ScriptableEventScreenshakeDef *AllocPreload_ScriptableEventScreenshakeDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventScreenshakeDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventScriptDamageDef
==============
*/
ScriptableEventScriptDamageDef *AllocPreload_ScriptableEventScriptDamageDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventScriptDamageDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventScriptDef
==============
*/
ScriptableEventScriptDef *AllocPreload_ScriptableEventScriptDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventScriptDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventSetMayhemDef
==============
*/
ScriptableEventSetMayhemDef *AllocPreload_ScriptableEventSetMayhemDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventSetMayhemDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventSoundDef
==============
*/
ScriptableEventSoundDef *AllocPreload_ScriptableEventSoundDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventSoundDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventSpatialDisableDef
==============
*/
ScriptableEventSpatialDisableDef *AllocPreload_ScriptableEventSpatialDisableDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventSpatialDisableDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventSpawnDynentDef
==============
*/
ScriptableEventSpawnDynentDef *AllocPreload_ScriptableEventSpawnDynentDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventSpawnDynentDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventStateChangeDef
==============
*/
ScriptableEventStateChangeDef *AllocPreload_ScriptableEventStateChangeDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventStateChangeDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventSunDef
==============
*/
ScriptableEventSunDef *AllocPreload_ScriptableEventSunDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventSunDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventTeamSelectorDef
==============
*/
ScriptableEventTeamSelectorDef *AllocPreload_ScriptableEventTeamSelectorDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventTeamSelectorDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventVehicleBlowUpTireDef
==============
*/
ScriptableEventVehicleBlowUpTireDef *AllocPreload_ScriptableEventVehicleBlowUpTireDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventVehicleBlowUpTireDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventViewTriggerDef
==============
*/
ScriptableEventViewTriggerDef *AllocPreload_ScriptableEventViewTriggerDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventViewTriggerDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventViewmodelChangeImageDef
==============
*/
ScriptableEventViewmodelChangeImageDef *AllocPreload_ScriptableEventViewmodelChangeImageDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventViewmodelChangeImageDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventViewmodelShaderParamDef
==============
*/
ScriptableEventViewmodelShaderParamDef *AllocPreload_ScriptableEventViewmodelShaderParamDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventViewmodelShaderParamDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableEventWaitDef
==============
*/
ScriptableEventWaitDef *AllocPreload_ScriptableEventWaitDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableEventWaitDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableInstance
==============
*/
ScriptableInstance *AllocPreload_ScriptableInstance()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableInstance *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableMapEnts
==============
*/
ScriptableMapEnts *AllocPreload_ScriptableMapEnts()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableMapEnts *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableModelUnion
==============
*/
ScriptableModelUnion *AllocPreload_ScriptableModelUnion()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableModelUnion *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableNoteTrackDef
==============
*/
ScriptableNoteTrackDef *AllocPreload_ScriptableNoteTrackDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableNoteTrackDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptablePartDef
==============
*/
ScriptablePartDef *AllocPreload_ScriptablePartDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptablePartDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptablePartReference
==============
*/
ScriptablePartReference *AllocPreload_ScriptablePartReference()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptablePartReference *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptablePhysicsLimits
==============
*/
ScriptablePhysicsLimits *AllocPreload_ScriptablePhysicsLimits()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptablePhysicsLimits *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableReservedDynent
==============
*/
ScriptableReservedDynent *AllocPreload_ScriptableReservedDynent()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableReservedDynent *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableReservedDynents
==============
*/
ScriptableReservedDynents *AllocPreload_ScriptableReservedDynents()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableReservedDynents *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableStateBaseDef
==============
*/
ScriptableStateBaseDef *AllocPreload_ScriptableStateBaseDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableStateBaseDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableStateDef
==============
*/
ScriptableStateDef *AllocPreload_ScriptableStateDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableStateDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableStateDefUnion
==============
*/
ScriptableStateDefUnion *AllocPreload_ScriptableStateDefUnion()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableStateDefUnion *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableStateHealthDef
==============
*/
ScriptableStateHealthDef *AllocPreload_ScriptableStateHealthDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableStateHealthDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableStateScriptedDef
==============
*/
ScriptableStateScriptedDef *AllocPreload_ScriptableStateScriptedDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableStateScriptedDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableStateSimpleDef
==============
*/
ScriptableStateSimpleDef *AllocPreload_ScriptableStateSimpleDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableStateSimpleDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_ScriptableStateUsableDef
==============
*/
ScriptableStateUsableDef *AllocPreload_ScriptableStateUsableDef()
{
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (ScriptableStateUsableDef *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_Scriptable_Attackers
==============
*/
Scriptable_Attackers *AllocPreload_Scriptable_Attackers()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (Scriptable_Attackers *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_Scriptable_DamageCause
==============
*/
Scriptable_DamageCause *AllocPreload_Scriptable_DamageCause()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (Scriptable_DamageCause *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_Scriptable_EventSun_Data
==============
*/
Scriptable_EventSun_Data *AllocPreload_Scriptable_EventSun_Data()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (Scriptable_EventSun_Data *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_Scriptable_EventType
==============
*/
Scriptable_EventType *AllocPreload_Scriptable_EventType()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (Scriptable_EventType *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_Scriptable_ImageId
==============
*/
Scriptable_ImageId *AllocPreload_Scriptable_ImageId()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (Scriptable_ImageId *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_Scriptable_MaterialOverrideType
==============
*/
Scriptable_MaterialOverrideType *AllocPreload_Scriptable_MaterialOverrideType()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (Scriptable_MaterialOverrideType *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_Scriptable_MayhemAction
==============
*/
Scriptable_MayhemAction *AllocPreload_Scriptable_MayhemAction()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (Scriptable_MayhemAction *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_Scriptable_ShaderParamType
==============
*/
Scriptable_ShaderParamType *AllocPreload_Scriptable_ShaderParamType()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (Scriptable_ShaderParamType *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_Scriptable_StateType
==============
*/
Scriptable_StateType *AllocPreload_Scriptable_StateType()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (Scriptable_StateType *)g_streamPosGlob.pos;
}

/*
==============
AllocPreload_Scriptable_TeamFilter
==============
*/
Scriptable_TeamFilter *AllocPreload_Scriptable_TeamFilter()
{
  DB_PatchMem_FixStreamAlignment(3ui64);
  DB_CheckCanIncStreamPos(0i64);
  return (Scriptable_TeamFilter *)g_streamPosGlob.pos;
}

/*
==============
Load_CheckArrayMemberScriptableMapEnts459
==============
*/
void Load_CheckArrayMemberScriptableMapEnts459(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberScriptableMapEnts465
==============
*/
void Load_CheckArrayMemberScriptableMapEnts465(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberScriptableMapEnts471
==============
*/
void Load_CheckArrayMemberScriptableMapEnts471(void)
{
  ;
}

/*
==============
Load_CheckArrayMemberScriptableMapEnts477
==============
*/
void Load_CheckArrayMemberScriptableMapEnts477(void)
{
  ;
}

/*
==============
Load_ProcessStructLayout_ScriptableDamageTagOverride
==============
*/
void Load_ProcessStructLayout_ScriptableDamageTagOverride(void)
{
  if ( Load_RegisterStructSize("ScriptableDamageTagOverride", 0x49A52AFAu, 0x10ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableDamageTagOverride", 0x49A52AFAu, "XString", 0x6231894Bu, "tag", 0x9A201020, 0i64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("ScriptableDamageTagOverride", 0x49A52AFAu, "scr_string_t", 0x3FD8616Du, "scrTag", 0x3D597464u, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableDataType
==============
*/
void Load_ProcessStructLayout_ScriptableDataType(void)
{
  if ( Load_RegisterStructSize("ScriptableDataType", 0xC89A885u, 1ui64, 1ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableDataType", 0xC89A885u, "byte", 0x363F8F7Eu, (const char *)&queryFormat.fmt + 3, 0, 0i64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_byte();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableDef
==============
*/
void Load_ProcessStructLayout_ScriptableDef(void)
{
  if ( Load_RegisterStructSize("ScriptableDef", 0xAD0D48CA, 0x78ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableDef", 0xAD0D48CA, "XString", 0x6231894Bu, (const char *)&stru_143C9A1A4, 0x58737A51u, 0i64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("ScriptableDef", 0xAD0D48CA, "ScriptableDefPtr", 0x217ED8C8u, "nextScriptableDef", 0x73595C43u, 8ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ScriptableDefPtr();
    Load_RegisterStructMemberSize("ScriptableDef", 0xAD0D48CA, "int", 0x7103F94Bu, "flags", 0x85A76201, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("ScriptableDef", 0xAD0D48CA, "uint", 0x53A932A0u, "numParts", 0x5B0D4326u, 0x14ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptableDef", 0xAD0D48CA, "ScriptablePartDef", 0x91C49A43, "parts", 0xBDDE96A6, 0x18ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptablePartDef();
    Load_RegisterStructMemberSize("ScriptableDef", 0xAD0D48CA, "uint", 0x53A932A0u, "maxNumDynEntsRequired", 0x7C7181D6u, 0x20ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptableDef", 0xAD0D48CA, "uint", 0x53A932A0u, "partCount", 0xF979B66C, 0x24ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptableDef", 0xAD0D48CA, "uint", 0x53A932A0u, "serverInstancedPartCount", 0x524B8798u, 0x28ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptableDef", 0xAD0D48CA, "uint", 0x53A932A0u, "serverControlledPartCount", 0xE4B078FD, 0x2Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptableDef", 0xAD0D48CA, "uint", 0x53A932A0u, "maxNumDynEntPartsBase", 0x40647733u, 0x30ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptableDef", 0xAD0D48CA, "uint", 0x53A932A0u, "maxNumDynEntPartsForSpawning", 0x7E951A5Eu, 0x34ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptableDef", 0xAD0D48CA, "uint16_t", 0x6328C0E4u, "eventStreamSizeRequiredServer", 0xFA527ACD, 0x38ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint16_t();
    Load_RegisterStructMemberSize("ScriptableDef", 0xAD0D48CA, "uint16_t", 0x6328C0E4u, "eventStreamSizeRequiredClient", 0xE6BC2D1u, 0x3Aui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint16_t();
    Load_RegisterStructMemberSize("ScriptableDef", 0xAD0D48CA, "uint", 0x53A932A0u, "usablePartCount", 0xA33DEA30, 0x3Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptableDef", 0xAD0D48CA, "uint", 0x53A932A0u, "ffMemCost", 0x440CB530u, 0x40ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptableDef", 0xAD0D48CA, "scr_string_t", 0x3FD8616Du, "animationTreeName", 0xC3E457C3, 0x44ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("ScriptableDef", 0xAD0D48CA, "float", 0x9B987AFE, "viewRadius", 0xCFF1D1F5, 0x58ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableDef", 0xAD0D48CA, "bool", 0x1F095080u, "networkLODRangeOverride", 0xAD583B8E, 0x5Cui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableDef", 0xAD0D48CA, "float", 0x9B987AFE, "networkLODRangeOverrideDistance", 0xFE2FA44B, 0x60ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableDef", 0xAD0D48CA, "uint", 0x53A932A0u, "numXModels", 0xBAF06766, 0x64ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptableDef", 0xAD0D48CA, "XModelPtr", 0xC52046E3, "models", 0x9420579E, 0x68ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_XModelPtr();
    Load_RegisterStructMemberSize("ScriptableDef", 0xAD0D48CA, "DynEntitySpatialActivationMode", 0xB44ADE75, "spatialActivationMode", 0xFBADC341, 0x70ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_DynEntitySpatialActivationMode();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableDefPtr
==============
*/
void Load_ProcessStructLayout_ScriptableDefPtr(void)
{
  if ( Load_RegisterStructSize("ScriptableDefPtr", 0x217ED8C8u, 8ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableDefPtr", 0x217ED8C8u, "ScriptableDef", 0xAD0D48CA, (const char *)&queryFormat.fmt + 3, 0, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableDef();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventAddModelDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventAddModelDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventAddModelDef", 0xC176AAF0, 0x20ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventAddModelDef", 0xC176AAF0, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventAddModelDef", 0xC176AAF0, "XString", 0x6231894Bu, "tagName", 0x6C9E5F11u, 8ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("ScriptableEventAddModelDef", 0xC176AAF0, "scr_string_t", 0x3FD8616Du, "scrTagName", 0xB3061BBD, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("ScriptableEventAddModelDef", 0xC176AAF0, "XModelPtr", 0xC52046E3, "model", 0xEC5C307F, 0x18ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XModelPtr();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventAnimationDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventAnimationDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventAnimationDef", 0xA92F4984, 0x50ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventAnimationDef", 0xA92F4984, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventAnimationDef", 0xA92F4984, "XAnimPartsPtr", 0x5DBC1B5Bu, "animation", 0x4578D4DAu, 8ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XAnimPartsPtr();
    Load_RegisterStructMemberSize("ScriptableEventAnimationDef", 0xA92F4984, "bool", 0x1F095080u, "stateful", 0xBBB6C958, 0x10ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventAnimationDef", 0xA92F4984, "bool", 0x1F095080u, "overrideAnimation", 0xB84A970A, 0x11ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventAnimationDef", 0xA92F4984, "bool", 0x1F095080u, "pauseOnExit", 0x9A60359u, 0x12ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventAnimationDef", 0xA92F4984, "bool", 0x1F095080u, "clientOnlyInMP", 0x102CCFBDu, 0x13ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventAnimationDef", 0xA92F4984, "float", 0x9B987AFE, "startTimeMin", 0xC0998C35, 0x14ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventAnimationDef", 0xA92F4984, "float", 0x9B987AFE, "startTimeMax", 0xB8997FBB, 0x18ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventAnimationDef", 0xA92F4984, "bool", 0x1F095080u, "startTimeNormalized", 0x6AF50530u, 0x1Cui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventAnimationDef", 0xA92F4984, "float", 0x9B987AFE, "playbackRateMin", 0x5D1CFE07u, 0x20ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventAnimationDef", 0xA92F4984, "float", 0x9B987AFE, "playbackRateMax", 0x651D0B79u, 0x24ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventAnimationDef", 0xA92F4984, "float", 0x9B987AFE, "blendTime", 0x6316E766u, 0x28ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventAnimationDef", 0xA92F4984, "uint", 0x53A932A0u, "eventAtEndCount", 0xC9F6DA43, 0x2Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptableEventAnimationDef", 0xA92F4984, "ScriptableEventDef", 0xB2D953Cu, "eventsAtEnd", 0xDBEBC6EB, 0x30ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventDef();
    Load_RegisterStructMemberSize("ScriptableEventAnimationDef", 0xA92F4984, "uint16_t", 0x6328C0E4u, "eventStreamBufferOffsetClient", 0x4A5AD9DAu, 0x38ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint16_t();
    Load_RegisterStructMemberSize("ScriptableEventAnimationDef", 0xA92F4984, "uint16_t", 0x6328C0E4u, "eventStreamBufferOffsetServer", 0xF7CCABB6, 0x3Aui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint16_t();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventAnonymousDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventAnonymousDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventAnonymousDef", 0x75FF4D8Fu, 0x98ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventAnonymousDef", 0x75FF4D8Fu, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventAnonymousDef", 0x75FF4D8Fu, "byte", 0x363F8F7Eu, "buffer", 0x8B60541E, 8ui64, 0x90ui64, 0x90ui64, 0, 0);
    Load_ProcessStructLayout_byte();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventApplyAngularForceDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventApplyAngularForceDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventApplyAngularForceDef", 0x5EAAAD1Bu, 0x28ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventApplyAngularForceDef", 0x5EAAAD1Bu, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventApplyAngularForceDef", 0x5EAAAD1Bu, "bool", 0x1F095080u, "worldSpace", 0x58EA7FDEu, 8ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventApplyAngularForceDef", 0x5EAAAD1Bu, "bool", 0x1F095080u, "randomRange", 0x95175874, 9ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventApplyAngularForceDef", 0x5EAAAD1Bu, "vec3_t", 0x375A0610u, "forceVector", 0x96231DF0, 0xCui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("ScriptableEventApplyAngularForceDef", 0x5EAAAD1Bu, "vec3_t", 0x375A0610u, "forceVector2", 0x494820E2u, 0x18ui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventApplyConstantAngularForceDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventApplyConstantAngularForceDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventApplyConstantAngularForceDef", 0xA229537F, 0x28ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventApplyConstantAngularForceDef", 0xA229537F, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventApplyConstantAngularForceDef", 0xA229537F, "bool", 0x1F095080u, "worldSpace", 0x58EA7FDEu, 8ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventApplyConstantAngularForceDef", 0xA229537F, "bool", 0x1F095080u, "randomRange", 0x95175874, 9ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventApplyConstantAngularForceDef", 0xA229537F, "vec3_t", 0x375A0610u, "forceVector", 0x96231DF0, 0xCui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("ScriptableEventApplyConstantAngularForceDef", 0xA229537F, "vec3_t", 0x375A0610u, "forceVector2", 0x494820E2u, 0x18ui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("ScriptableEventApplyConstantAngularForceDef", 0xA229537F, "uint16_t", 0x6328C0E4u, "eventStreamBufferOffsetServer", 0xF7CCABB6, 0x24ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint16_t();
    Load_RegisterStructMemberSize("ScriptableEventApplyConstantAngularForceDef", 0xA229537F, "uint16_t", 0x6328C0E4u, "eventStreamBufferOffsetClient", 0x4A5AD9DAu, 0x26ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint16_t();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventApplyConstantForceDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventApplyConstantForceDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventApplyConstantForceDef", 0xB596BE63, 0x40ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventApplyConstantForceDef", 0xB596BE63, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventApplyConstantForceDef", 0xB596BE63, "bool", 0x1F095080u, "worldSpace", 0x58EA7FDEu, 8ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventApplyConstantForceDef", 0xB596BE63, "bool", 0x1F095080u, "randomRange", 0x95175874, 9ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventApplyConstantForceDef", 0xB596BE63, "vec3_t", 0x375A0610u, "forcePos", 0xC35143D1, 0xCui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("ScriptableEventApplyConstantForceDef", 0xB596BE63, "vec3_t", 0x375A0610u, "forceVector", 0x96231DF0, 0x18ui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("ScriptableEventApplyConstantForceDef", 0xB596BE63, "vec3_t", 0x375A0610u, "forcePos2", 0x49EDC231u, 0x24ui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("ScriptableEventApplyConstantForceDef", 0xB596BE63, "vec3_t", 0x375A0610u, "forceVector2", 0x494820E2u, 0x30ui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("ScriptableEventApplyConstantForceDef", 0xB596BE63, "uint16_t", 0x6328C0E4u, "eventStreamBufferOffsetServer", 0xF7CCABB6, 0x3Cui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint16_t();
    Load_RegisterStructMemberSize("ScriptableEventApplyConstantForceDef", 0xB596BE63, "uint16_t", 0x6328C0E4u, "eventStreamBufferOffsetClient", 0x4A5AD9DAu, 0x3Eui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint16_t();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventApplyForceDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventApplyForceDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventApplyForceDef", 0x46BA62C7u, 0x40ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventApplyForceDef", 0x46BA62C7u, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventApplyForceDef", 0x46BA62C7u, "bool", 0x1F095080u, "worldSpace", 0x58EA7FDEu, 8ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventApplyForceDef", 0x46BA62C7u, "bool", 0x1F095080u, "randomRange", 0x95175874, 9ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventApplyForceDef", 0x46BA62C7u, "vec3_t", 0x375A0610u, "forcePos", 0xC35143D1, 0xCui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("ScriptableEventApplyForceDef", 0x46BA62C7u, "vec3_t", 0x375A0610u, "forceVector", 0x96231DF0, 0x18ui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("ScriptableEventApplyForceDef", 0x46BA62C7u, "vec3_t", 0x375A0610u, "forcePos2", 0x49EDC231u, 0x24ui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("ScriptableEventApplyForceDef", 0x46BA62C7u, "vec3_t", 0x375A0610u, "forceVector2", 0x494820E2u, 0x30ui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventBaseDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventBaseDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventBaseDef", 0xB2D7DE7D, 0x10ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventBaseDef", 0xB2D7DE7D, "XString", 0x6231894Bu, (const char *)&stru_143C9A1A4, 0x58737A51u, 0i64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("ScriptableEventBaseDef", 0xB2D7DE7D, "int", 0x7103F94Bu, "flags", 0x85A76201, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventChunkDynentDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventChunkDynentDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventChunkDynentDef", 0xD58FE91B, 0x30ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventChunkDynentDef", 0xD58FE91B, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventChunkDynentDef", 0xD58FE91B, "ScriptablePartReference", 0x6FB99DDu, "partReference", 0x96D296Eu, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ScriptablePartReference();
    Load_RegisterStructMemberSize("ScriptableEventChunkDynentDef", 0xD58FE91B, "bool", 0x1F095080u, "stateful", 0xBBB6C958, 0xCui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventChunkDynentDef", 0xD58FE91B, "bool", 0x1F095080u, "allowCauseVelocity", 0xAD009E6D, 0xDui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventChunkDynentDef", 0xD58FE91B, "vec3_t", 0x375A0610u, "launchLinVel", 0xC1A1DA03, 0x10ui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("ScriptableEventChunkDynentDef", 0xD58FE91B, "vec3_t", 0x375A0610u, "launchAngVel", 0x20173670u, 0x1Cui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventClientViewSelectorDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventClientViewSelectorDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventClientViewSelectorDef", 0x67EFD0A7u, 0x30ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventClientViewSelectorDef", 0x67EFD0A7u, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventClientViewSelectorDef", 0x67EFD0A7u, "uint", 0x53A932A0u, "event1pCount", 0x74B67D98u, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptableEventClientViewSelectorDef", 0x67EFD0A7u, "ScriptableEventDef", 0xB2D953Cu, "events1p", 0xEA1E88C0, 0x10ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventDef();
    Load_RegisterStructMemberSize("ScriptableEventClientViewSelectorDef", 0x67EFD0A7u, "uint", 0x53A932A0u, "event3pCount", 0xDFD005F6, 0x18ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptableEventClientViewSelectorDef", 0x67EFD0A7u, "ScriptableEventDef", 0xB2D953Cu, "events3p", 0xEC1E8BA6, 0x20ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventDef();
    Load_RegisterStructMemberSize("ScriptableEventClientViewSelectorDef", 0x67EFD0A7u, "uint16_t", 0x6328C0E4u, "eventStreamBufferOffsetClient", 0x4A5AD9DAu, 0x28ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint16_t();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventCollisionDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventCollisionDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventCollisionDef", 0xB8104D52, 0x28ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventCollisionDef", 0xB8104D52, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventCollisionDef", 0xB8104D52, "XString", 0x6231894Bu, "collmapName", 0x31C70CDu, 8ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("ScriptableEventCollisionDef", 0xB8104D52, "bool", 0x1F095080u, "aiObstacle", 0xA11F0015, 0x10ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventCollisionDef", 0xB8104D52, "int", 0x7103F94Bu, "clipmapCModelIndex", 0x3FEA53E6u, 0x14ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("ScriptableEventCollisionDef", 0xB8104D52, "bool", 0x1F095080u, "neverMoves", 0x81174BD4, 0x18ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventCollisionDef", 0xB8104D52, "bool", 0x1F095080u, "canPush", 0xC8F079A6, 0x19ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventCollisionDef", 0xB8104D52, "bool", 0x1F095080u, "canTouch", 0x91BE4CA7, 0x1Aui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventCollisionDef", 0xB8104D52, "bool", 0x1F095080u, "destroyOnExit", 0xD02A1131, 0x1Bui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventCollisionDef", 0xB8104D52, "XModelPtr", 0xC52046E3, "model", 0xEC5C307F, 0x20ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XModelPtr();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventCompassIconDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventCompassIconDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventCompassIconDef", 0xCCF9548F, 0x98ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventCompassIconDef", 0xCCF9548F, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventCompassIconDef", 0xCCF9548F, "bool", 0x1F095080u, "stateful", 0xBBB6C958, 8ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventCompassIconDef", 0xCCF9548F, "bool", 0x1F095080u, "friendlyCompassIconAlwaysVisible", 0x8A6D857B, 9ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventCompassIconDef", 0xCCF9548F, "bool", 0x1F095080u, "enemyCompassIconAlwaysVisible", 0x3797BE02u, 0xAui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventCompassIconDef", 0xCCF9548F, "MaterialHandle", 0x2FCF718Du, "friendlyArrow", 0xEFE40234, 0x10ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_MaterialHandle();
    Load_RegisterStructMemberSize("ScriptableEventCompassIconDef", 0xCCF9548F, "MaterialHandle", 0x2FCF718Du, "friendlyFiring", 0xC04A37C4, 0x18ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_MaterialHandle();
    Load_RegisterStructMemberSize("ScriptableEventCompassIconDef", 0xCCF9548F, "MaterialHandle", 0x2FCF718Du, "friendlyChatting", 0xC765AFF3, 0x20ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_MaterialHandle();
    Load_RegisterStructMemberSize("ScriptableEventCompassIconDef", 0xCCF9548F, "MaterialHandle", 0x2FCF718Du, "friendlyYelling", 0xF61C2B29, 0x28ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_MaterialHandle();
    Load_RegisterStructMemberSize("ScriptableEventCompassIconDef", 0xCCF9548F, "MaterialHandle", 0x2FCF718Du, "partyArrow", 0x4F1C2107u, 0x30ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_MaterialHandle();
    Load_RegisterStructMemberSize("ScriptableEventCompassIconDef", 0xCCF9548F, "MaterialHandle", 0x2FCF718Du, "partyFiring", 0x19790731u, 0x38ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_MaterialHandle();
    Load_RegisterStructMemberSize("ScriptableEventCompassIconDef", 0xCCF9548F, "MaterialHandle", 0x2FCF718Du, "partyChatting", 0x6BAE096Au, 0x40ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_MaterialHandle();
    Load_RegisterStructMemberSize("ScriptableEventCompassIconDef", 0xCCF9548F, "MaterialHandle", 0x2FCF718Du, "partyYelling", 0x682E3B5Eu, 0x48ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_MaterialHandle();
    Load_RegisterStructMemberSize("ScriptableEventCompassIconDef", 0xCCF9548F, "MaterialHandle", 0x2FCF718Du, "squadArrow", 0xCCC54A95, 0x50ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_MaterialHandle();
    Load_RegisterStructMemberSize("ScriptableEventCompassIconDef", 0xCCF9548F, "MaterialHandle", 0x2FCF718Du, "squadFiring", 0xB184F03B, 0x58ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_MaterialHandle();
    Load_RegisterStructMemberSize("ScriptableEventCompassIconDef", 0xCCF9548F, "MaterialHandle", 0x2FCF718Du, "enemyCompassIconQuiet", 0xAC3E3AED, 0x60ui64, 0x18ui64, 3ui64, 0, 0);
    Load_ProcessStructLayout_MaterialHandle();
    Load_RegisterStructMemberSize("ScriptableEventCompassIconDef", 0xCCF9548F, "MaterialHandle", 0x2FCF718Du, "enemyCompassIconFiring", 0x7734684Eu, 0x78ui64, 0x18ui64, 3ui64, 0, 0);
    Load_ProcessStructLayout_MaterialHandle();
    Load_RegisterStructMemberSize("ScriptableEventCompassIconDef", 0xCCF9548F, "MaterialHandle", 0x2FCF718Du, "enemyCompassIconDirectional", 0x1678C93Du, 0x90ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_MaterialHandle();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventDef", 0xB2D953Cu, 0xB0ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventDef", 0xB2D953Cu, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventDef", 0xB2D953Cu, "Scriptable_EventType", 0xF68FD60u, "type", 0xE73D75F8, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("Scriptable_EventType", 0xF68FD60u, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ScriptableEventDef", 0xB2D953Cu, "ScriptableEventDefUnion", 0x6FC80ED1u, "data", 0x331E5D8u, 0x18ui64, 0x98ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ScriptableEventDefUnion();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventDefUnion
==============
*/
void Load_ProcessStructLayout_ScriptableEventDefUnion(void)
{
  if ( Load_RegisterStructSize("ScriptableEventDefUnion", 0x6FC80ED1u, 0x98ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventDefUnion", 0x6FC80ED1u, "ScriptableEventStateChangeDef", 0x1F1D769Bu, "stateChange", 0x5B7D3C7Fu, 0i64, 0x18ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ScriptableEventStateChangeDef", 0x1F1D769Bu, 0x18ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("ScriptableEventStateChangeDef", 0x1F1D769Bu, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_ScriptableEventBaseDef();
      Load_RegisterStructMemberSize("ScriptableEventStateChangeDef", 0x1F1D769Bu, "ScriptablePartReference", 0x6FB99DDu, "partReference", 0x96D296Eu, 8ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ScriptablePartReference();
      Load_RegisterStructMemberSize("ScriptableEventStateChangeDef", 0x1F1D769Bu, "uint", 0x53A932A0u, "stateIdx", 0xBA7CDC68, 0xCui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
    }
    Load_RegisterStructMemberSize("ScriptableEventDefUnion", 0x6FC80ED1u, "ScriptableEventWaitDef", 0x9BAB9035, "wait", 0x2FEB529Bu, 0i64, 0x18ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ScriptableEventWaitDef", 0x9BAB9035, 0x18ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("ScriptableEventWaitDef", 0x9BAB9035, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_ScriptableEventBaseDef();
      Load_RegisterStructMemberSize("ScriptableEventWaitDef", 0x9BAB9035, "float", 0x9B987AFE, "delayMin", 0xDE54AB3u, 8ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_float();
      Load_RegisterStructMemberSize("ScriptableEventWaitDef", 0x9BAB9035, "float", 0x9B987AFE, "delayMax", 0x5E53E3Du, 0xCui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_float();
      Load_RegisterStructMemberSize("ScriptableEventWaitDef", 0x9BAB9035, "uint16_t", 0x6328C0E4u, "eventStreamBufferOffsetServer", 0xF7CCABB6, 0x10ui64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint16_t();
      Load_RegisterStructMemberSize("ScriptableEventWaitDef", 0x9BAB9035, "uint16_t", 0x6328C0E4u, "eventStreamBufferOffsetClient", 0x4A5AD9DAu, 0x12ui64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint16_t();
    }
    Load_RegisterStructMemberSize("ScriptableEventDefUnion", 0x6FC80ED1u, "ScriptableEventRandomDef", 0x934D98BB, "random", 0xF50BE19D, 0i64, 0x30ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ScriptableEventRandomDef();
    Load_RegisterStructMemberSize("ScriptableEventDefUnion", 0x6FC80ED1u, "ScriptableEventScriptDef", 0xE0EC1623, "script", 0x3AA0D211u, 0i64, 0x20ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ScriptableEventScriptDef", 0xE0EC1623, 0x20ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("ScriptableEventScriptDef", 0xE0EC1623, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_ScriptableEventBaseDef();
      Load_RegisterStructMemberSize("ScriptableEventScriptDef", 0xE0EC1623, "XString", 0x6231894Bu, "notification", 0x82155165, 8ui64, 8ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_XString();
      Load_RegisterStructMemberSize("ScriptableEventScriptDef", 0xE0EC1623, "scr_string_t", 0x3FD8616Du, "scrNotification", 0x7F51A539u, 0x10ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_scr_string_t();
      Load_RegisterStructMemberSize("ScriptableEventScriptDef", 0xE0EC1623, "int", 0x7103F94Bu, "param", 0xA8DE75AB, 0x14ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_int();
      Load_RegisterStructMemberSize("ScriptableEventScriptDef", 0xE0EC1623, "bool", 0x1F095080u, "doNotifyCallback", 0x2514C599u, 0x18ui64, 1ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_bool();
    }
    Load_RegisterStructMemberSize("ScriptableEventDefUnion", 0x6FC80ED1u, "ScriptableEventModelDef", 0xDEE25B03, "model", 0xEC5C307F, 0i64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ScriptableEventModelDef();
    Load_RegisterStructMemberSize("ScriptableEventDefUnion", 0x6FC80ED1u, "ScriptableEventCollisionDef", 0xB8104D52, "collision", 0xB68442A8, 0i64, 0x28ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ScriptableEventCollisionDef();
    Load_RegisterStructMemberSize("ScriptableEventDefUnion", 0x6FC80ED1u, "ScriptableEventAnimationDef", 0xA92F4984, "animation", 0x4578D4DAu, 0i64, 0x50ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ScriptableEventAnimationDef();
    Load_RegisterStructMemberSize("ScriptableEventDefUnion", 0x6FC80ED1u, "ScriptableEventHideShowBoneDef", 0x154B4C13u, "hideShowBone", 0xF96DAD09, 0i64, 0x18ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ScriptableEventHideShowBoneDef", 0x154B4C13u, 0x18ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("ScriptableEventHideShowBoneDef", 0x154B4C13u, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_ScriptableEventBaseDef();
      Load_RegisterStructMemberSize("ScriptableEventHideShowBoneDef", 0x154B4C13u, "XString", 0x6231894Bu, "tagName", 0x6C9E5F11u, 8ui64, 8ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_XString();
      Load_RegisterStructMemberSize("ScriptableEventHideShowBoneDef", 0x154B4C13u, "scr_string_t", 0x3FD8616Du, "scrTagName", 0xB3061BBD, 0x10ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_scr_string_t();
      Load_RegisterStructMemberSize("ScriptableEventHideShowBoneDef", 0x154B4C13u, "bool", 0x1F095080u, "hide", 0xA7F76840, 0x14ui64, 1ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_bool();
      Load_RegisterStructMemberSize("ScriptableEventHideShowBoneDef", 0x154B4C13u, "bool", 0x1F095080u, "allowMissingTag", 0x7C2020B3u, 0x15ui64, 1ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_bool();
      Load_RegisterStructMemberSize("ScriptableEventHideShowBoneDef", 0x154B4C13u, "bool", 0x1F095080u, "hideShowChildren", 0x8674982u, 0x16ui64, 1ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_bool();
    }
    Load_RegisterStructMemberSize("ScriptableEventDefUnion", 0x6FC80ED1u, "ScriptableEventDisablePhysicsSubShapeDef", 0x3E0C7DAAu, "disablePhysicsSubShape", 0x814E0A82, 0i64, 0x20ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ScriptableEventDisablePhysicsSubShapeDef", 0x3E0C7DAAu, 0x20ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("ScriptableEventDisablePhysicsSubShapeDef", 0x3E0C7DAAu, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_ScriptableEventBaseDef();
      Load_RegisterStructMemberSize("ScriptableEventDisablePhysicsSubShapeDef", 0x3E0C7DAAu, "XString", 0x6231894Bu, "mutableShapeName", 0xB08B1A5C, 8ui64, 8ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_XString();
      Load_RegisterStructMemberSize("ScriptableEventDisablePhysicsSubShapeDef", 0x3E0C7DAAu, "uint64_t", 0x8310C4F3, "mutableShapeHash", 0x47F37D5Du, 0x10ui64, 8ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint64_t();
      Load_RegisterStructMemberSize("ScriptableEventDisablePhysicsSubShapeDef", 0x3E0C7DAAu, "bool", 0x1F095080u, "allowMissingShape", 0xDE0A582C, 0x18ui64, 1ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_bool();
    }
    Load_RegisterStructMemberSize("ScriptableEventDefUnion", 0x6FC80ED1u, "ScriptableEventNoteTrackDef", 0x9F0B9541, "noteTrack", 0xD544DF41, 0i64, 0x18ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ScriptableEventNoteTrackDef();
    Load_RegisterStructMemberSize("ScriptableEventDefUnion", 0x6FC80ED1u, "ScriptableEventChunkDynentDef", 0xD58FE91B, "chunkDynent", 0x51DDE91Fu, 0i64, 0x30ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ScriptableEventChunkDynentDef", 0xD58FE91B, 0x30ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("ScriptableEventChunkDynentDef", 0xD58FE91B, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_ScriptableEventBaseDef();
      Load_RegisterStructMemberSize("ScriptableEventChunkDynentDef", 0xD58FE91B, "ScriptablePartReference", 0x6FB99DDu, "partReference", 0x96D296Eu, 8ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ScriptablePartReference();
      Load_RegisterStructMemberSize("ScriptableEventChunkDynentDef", 0xD58FE91B, "bool", 0x1F095080u, "stateful", 0xBBB6C958, 0xCui64, 1ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_bool();
      Load_RegisterStructMemberSize("ScriptableEventChunkDynentDef", 0xD58FE91B, "bool", 0x1F095080u, "allowCauseVelocity", 0xAD009E6D, 0xDui64, 1ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_bool();
      Load_RegisterStructMemberSize("ScriptableEventChunkDynentDef", 0xD58FE91B, "vec3_t", 0x375A0610u, "launchLinVel", 0xC1A1DA03, 0x10ui64, 0xCui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec3_t();
      Load_RegisterStructMemberSize("ScriptableEventChunkDynentDef", 0xD58FE91B, "vec3_t", 0x375A0610u, "launchAngVel", 0x20173670u, 0x1Cui64, 0xCui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec3_t();
    }
    Load_RegisterStructMemberSize("ScriptableEventDefUnion", 0x6FC80ED1u, "ScriptableEventSpawnDynentDef", 0x30C993EDu, "spawnDynent", 0x57B09A65u, 0i64, 0x70ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ScriptableEventSpawnDynentDef();
    Load_RegisterStructMemberSize("ScriptableEventDefUnion", 0x6FC80ED1u, "ScriptableEventPFXDef", 0x5816AEC8u, "particleFX", 0x465237CCu, 0i64, 0x58ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ScriptableEventPFXDef();
    Load_RegisterStructMemberSize("ScriptableEventDefUnion", 0x6FC80ED1u, "ScriptableEventSoundDef", 0xE0B65211, "sound", 0xA28257F5, 0i64, 0x58ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ScriptableEventSoundDef();
    Load_RegisterStructMemberSize("ScriptableEventDefUnion", 0x6FC80ED1u, "ScriptableEventExplosionDef", 0x6B7A2315u, "explosion", 0xE3528B4D, 0i64, 0x30ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ScriptableEventExplosionDef();
    Load_RegisterStructMemberSize("ScriptableEventDefUnion", 0x6FC80ED1u, "ScriptableEventLightDef", 0xDFB4BF52, "light", 0xBE268DDC, 0i64, 0x40ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ScriptableEventLightDef();
    Load_RegisterStructMemberSize("ScriptableEventDefUnion", 0x6FC80ED1u, "ScriptableEventSunDef", 0x7EB0C7A0u, "sun", 0x861DB25A, 0i64, 0x48ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ScriptableEventSunDef();
    Load_RegisterStructMemberSize("ScriptableEventDefUnion", 0x6FC80ED1u, "ScriptableEventRumbleDef", 0x656A4EE1u, "rumble", 0xBD462DC7, 0i64, 0x38ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ScriptableEventRumbleDef();
    Load_RegisterStructMemberSize("ScriptableEventDefUnion", 0x6FC80ED1u, "ScriptableEventScreenshakeDef", 0xAFC68250, "screenshake", 0x3E2187Eu, 0i64, 0x50ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ScriptableEventScreenshakeDef();
    Load_RegisterStructMemberSize("ScriptableEventDefUnion", 0x6FC80ED1u, "ScriptableEventPartDamageDef", 0xC586F4AC, "partDamage", 0x76465E10u, 0i64, 0x28ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ScriptableEventPartDamageDef();
    Load_RegisterStructMemberSize("ScriptableEventDefUnion", 0x6FC80ED1u, "ScriptableEventSetMayhemDef", 0xC6BF907u, "setMayhem", 0x7E964FD7u, 0i64, 0x18ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ScriptableEventSetMayhemDef", 0xC6BF907u, 0x18ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("ScriptableEventSetMayhemDef", 0xC6BF907u, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_ScriptableEventBaseDef();
      Load_RegisterStructMemberSize("ScriptableEventSetMayhemDef", 0xC6BF907u, "MayhemDataPtr", 0xF75B3C93, "mayhem", 0x2F7C3127u, 8ui64, 8ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_MayhemDataPtr();
      Load_RegisterStructMemberSize("ScriptableEventSetMayhemDef", 0xC6BF907u, "uint16_t", 0x6328C0E4u, "eventStreamBufferOffsetClient", 0x4A5AD9DAu, 0x10ui64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint16_t();
    }
    Load_RegisterStructMemberSize("ScriptableEventDefUnion", 0x6FC80ED1u, "ScriptableEventPlayMayhemDef", 0x33267397u, "playMayhem", 0x7C258D55u, 0i64, 0x10ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ScriptableEventPlayMayhemDef", 0x33267397u, 0x10ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("ScriptableEventPlayMayhemDef", 0x33267397u, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_ScriptableEventBaseDef();
      Load_RegisterStructMemberSize("ScriptableEventPlayMayhemDef", 0x33267397u, "Scriptable_MayhemAction", 0x3E50A945u, "action", 0x97B1269E, 8ui64, 4ui64, 0i64, 0, 0);
      Load_RegisterStructSize("Scriptable_MayhemAction", 0x3E50A945u, 4ui64, 4ui64);
      Load_RegisterStructMemberSize("ScriptableEventPlayMayhemDef", 0x33267397u, "uint16_t", 0x6328C0E4u, "eventStreamBufferOffsetClient", 0x4A5AD9DAu, 0xCui64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint16_t();
    }
    Load_RegisterStructMemberSize("ScriptableEventDefUnion", 0x6FC80ED1u, "ScriptableEventViewmodelShaderParamDef", 0x9F0D2E98, "viewmodelShaderParam", 0x2744F254u, 0i64, 0x28ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ScriptableEventViewmodelShaderParamDef();
    Load_RegisterStructMemberSize("ScriptableEventDefUnion", 0x6FC80ED1u, "ScriptableEventViewmodelChangeImageDef", 0xE652326B, "viewmodelChangeImage", 0xA3FD628D, 0i64, 0x10ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ScriptableEventViewmodelChangeImageDef", 0xE652326B, 0x10ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("ScriptableEventViewmodelChangeImageDef", 0xE652326B, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_ScriptableEventBaseDef();
      Load_RegisterStructMemberSize("ScriptableEventViewmodelChangeImageDef", 0xE652326B, "Scriptable_ImageId", 0x602B51B8u, "imageId", 0xA5839D58, 8ui64, 4ui64, 0i64, 0, 0);
      Load_RegisterStructSize("Scriptable_ImageId", 0x602B51B8u, 4ui64, 4ui64);
      Load_RegisterStructMemberSize("ScriptableEventViewmodelChangeImageDef", 0xE652326B, "int", 0x7103F94Bu, "imageValue", 0x6B4410F6u, 0xCui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_int();
    }
    Load_RegisterStructMemberSize("ScriptableEventDefUnion", 0x6FC80ED1u, "ScriptableEventClientViewSelectorDef", 0x67EFD0A7u, "clientViewSelector", 0xEF3DB1E5, 0i64, 0x30ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ScriptableEventClientViewSelectorDef", 0x67EFD0A7u, 0x30ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("ScriptableEventClientViewSelectorDef", 0x67EFD0A7u, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_ScriptableEventBaseDef();
      Load_RegisterStructMemberSize("ScriptableEventClientViewSelectorDef", 0x67EFD0A7u, "uint", 0x53A932A0u, "event1pCount", 0x74B67D98u, 8ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("ScriptableEventClientViewSelectorDef", 0x67EFD0A7u, "ScriptableEventDef", 0xB2D953Cu, "events1p", 0xEA1E88C0, 0x10ui64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_ScriptableEventDef();
      Load_RegisterStructMemberSize("ScriptableEventClientViewSelectorDef", 0x67EFD0A7u, "uint", 0x53A932A0u, "event3pCount", 0xDFD005F6, 0x18ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("ScriptableEventClientViewSelectorDef", 0x67EFD0A7u, "ScriptableEventDef", 0xB2D953Cu, "events3p", 0xEC1E8BA6, 0x20ui64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_ScriptableEventDef();
      Load_RegisterStructMemberSize("ScriptableEventClientViewSelectorDef", 0x67EFD0A7u, "uint16_t", 0x6328C0E4u, "eventStreamBufferOffsetClient", 0x4A5AD9DAu, 0x28ui64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint16_t();
    }
    Load_RegisterStructMemberSize("ScriptableEventDefUnion", 0x6FC80ED1u, "ScriptableEventTeamSelectorDef", 0xC163A438, "teamSelector", 0x99EAB658, 0i64, 0x38ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ScriptableEventTeamSelectorDef();
    Load_RegisterStructMemberSize("ScriptableEventDefUnion", 0x6FC80ED1u, "ScriptableEventAddModelDef", 0xC176AAF0, "addModel", 0x3F88980u, 0i64, 0x20ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ScriptableEventAddModelDef", 0xC176AAF0, 0x20ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("ScriptableEventAddModelDef", 0xC176AAF0, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_ScriptableEventBaseDef();
      Load_RegisterStructMemberSize("ScriptableEventAddModelDef", 0xC176AAF0, "XString", 0x6231894Bu, "tagName", 0x6C9E5F11u, 8ui64, 8ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_XString();
      Load_RegisterStructMemberSize("ScriptableEventAddModelDef", 0xC176AAF0, "scr_string_t", 0x3FD8616Du, "scrTagName", 0xB3061BBD, 0x10ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_scr_string_t();
      Load_RegisterStructMemberSize("ScriptableEventAddModelDef", 0xC176AAF0, "XModelPtr", 0xC52046E3, "model", 0xEC5C307F, 0x18ui64, 8ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_XModelPtr();
    }
    Load_RegisterStructMemberSize("ScriptableEventDefUnion", 0x6FC80ED1u, "ScriptableEventApplyForceDef", 0x46BA62C7u, "applyForce", 0xAB74F1Du, 0i64, 0x40ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ScriptableEventApplyForceDef", 0x46BA62C7u, 0x40ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("ScriptableEventApplyForceDef", 0x46BA62C7u, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_ScriptableEventBaseDef();
      Load_RegisterStructMemberSize("ScriptableEventApplyForceDef", 0x46BA62C7u, "bool", 0x1F095080u, "worldSpace", 0x58EA7FDEu, 8ui64, 1ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_bool();
      Load_RegisterStructMemberSize("ScriptableEventApplyForceDef", 0x46BA62C7u, "bool", 0x1F095080u, "randomRange", 0x95175874, 9ui64, 1ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_bool();
      Load_RegisterStructMemberSize("ScriptableEventApplyForceDef", 0x46BA62C7u, "vec3_t", 0x375A0610u, "forcePos", 0xC35143D1, 0xCui64, 0xCui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec3_t();
      Load_RegisterStructMemberSize("ScriptableEventApplyForceDef", 0x46BA62C7u, "vec3_t", 0x375A0610u, "forceVector", 0x96231DF0, 0x18ui64, 0xCui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec3_t();
      Load_RegisterStructMemberSize("ScriptableEventApplyForceDef", 0x46BA62C7u, "vec3_t", 0x375A0610u, "forcePos2", 0x49EDC231u, 0x24ui64, 0xCui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec3_t();
      Load_RegisterStructMemberSize("ScriptableEventApplyForceDef", 0x46BA62C7u, "vec3_t", 0x375A0610u, "forceVector2", 0x494820E2u, 0x30ui64, 0xCui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec3_t();
    }
    Load_RegisterStructMemberSize("ScriptableEventDefUnion", 0x6FC80ED1u, "ScriptableEventApplyAngularForceDef", 0x5EAAAD1Bu, "applyAngularForce", 0xC4B6CDDB, 0i64, 0x28ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ScriptableEventApplyAngularForceDef", 0x5EAAAD1Bu, 0x28ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("ScriptableEventApplyAngularForceDef", 0x5EAAAD1Bu, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_ScriptableEventBaseDef();
      Load_RegisterStructMemberSize("ScriptableEventApplyAngularForceDef", 0x5EAAAD1Bu, "bool", 0x1F095080u, "worldSpace", 0x58EA7FDEu, 8ui64, 1ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_bool();
      Load_RegisterStructMemberSize("ScriptableEventApplyAngularForceDef", 0x5EAAAD1Bu, "bool", 0x1F095080u, "randomRange", 0x95175874, 9ui64, 1ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_bool();
      Load_RegisterStructMemberSize("ScriptableEventApplyAngularForceDef", 0x5EAAAD1Bu, "vec3_t", 0x375A0610u, "forceVector", 0x96231DF0, 0xCui64, 0xCui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec3_t();
      Load_RegisterStructMemberSize("ScriptableEventApplyAngularForceDef", 0x5EAAAD1Bu, "vec3_t", 0x375A0610u, "forceVector2", 0x494820E2u, 0x18ui64, 0xCui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec3_t();
    }
    Load_RegisterStructMemberSize("ScriptableEventDefUnion", 0x6FC80ED1u, "ScriptableEventApplyConstantForceDef", 0xB596BE63, "applyConstantForce", 0xC8132081, 0i64, 0x40ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ScriptableEventApplyConstantForceDef();
    Load_RegisterStructMemberSize("ScriptableEventDefUnion", 0x6FC80ED1u, "ScriptableEventApplyConstantAngularForceDef", 0xA229537F, "applyConstantAngularForce", 0xDC5E6097, 0i64, 0x28ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ScriptableEventApplyConstantAngularForceDef", 0xA229537F, 0x28ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("ScriptableEventApplyConstantAngularForceDef", 0xA229537F, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_ScriptableEventBaseDef();
      Load_RegisterStructMemberSize("ScriptableEventApplyConstantAngularForceDef", 0xA229537F, "bool", 0x1F095080u, "worldSpace", 0x58EA7FDEu, 8ui64, 1ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_bool();
      Load_RegisterStructMemberSize("ScriptableEventApplyConstantAngularForceDef", 0xA229537F, "bool", 0x1F095080u, "randomRange", 0x95175874, 9ui64, 1ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_bool();
      Load_RegisterStructMemberSize("ScriptableEventApplyConstantAngularForceDef", 0xA229537F, "vec3_t", 0x375A0610u, "forceVector", 0x96231DF0, 0xCui64, 0xCui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec3_t();
      Load_RegisterStructMemberSize("ScriptableEventApplyConstantAngularForceDef", 0xA229537F, "vec3_t", 0x375A0610u, "forceVector2", 0x494820E2u, 0x18ui64, 0xCui64, 0i64, 0, 0);
      Load_ProcessStructLayout_vec3_t();
      Load_RegisterStructMemberSize("ScriptableEventApplyConstantAngularForceDef", 0xA229537F, "uint16_t", 0x6328C0E4u, "eventStreamBufferOffsetServer", 0xF7CCABB6, 0x24ui64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint16_t();
      Load_RegisterStructMemberSize("ScriptableEventApplyConstantAngularForceDef", 0xA229537F, "uint16_t", 0x6328C0E4u, "eventStreamBufferOffsetClient", 0x4A5AD9DAu, 0x26ui64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint16_t();
    }
    Load_RegisterStructMemberSize("ScriptableEventDefUnion", 0x6FC80ED1u, "ScriptableEventCompassIconDef", 0xCCF9548F, "compassIcon", 0x553942EBu, 0i64, 0x98ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ScriptableEventCompassIconDef();
    Load_RegisterStructMemberSize("ScriptableEventDefUnion", 0x6FC80ED1u, "ScriptableEventMaterialOverrideDef", 0x15501CC5u, "materialOverride", 0x3BFFCC33u, 0i64, 0x18ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ScriptableEventMaterialOverrideDef", 0x15501CC5u, 0x18ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("ScriptableEventMaterialOverrideDef", 0x15501CC5u, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_ScriptableEventBaseDef();
      Load_RegisterStructMemberSize("ScriptableEventMaterialOverrideDef", 0x15501CC5u, "Scriptable_MaterialOverrideType", 0x4C70DE7Bu, "materialOverrideType", 0xE2E1E7DB, 8ui64, 4ui64, 0i64, 0, 0);
      Load_RegisterStructSize("Scriptable_MaterialOverrideType", 0x4C70DE7Bu, 4ui64, 4ui64);
      Load_RegisterStructMemberSize("ScriptableEventMaterialOverrideDef", 0x15501CC5u, "int", 0x7103F94Bu, "transitionTime", 0xCA25A9DE, 0xCui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_int();
      Load_RegisterStructMemberSize("ScriptableEventMaterialOverrideDef", 0x15501CC5u, "uint8_t", 0x2BA45D81u, "finalValue", 0xD359B9E3, 0x10ui64, 1ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint8_t();
      Load_RegisterStructMemberSize("ScriptableEventMaterialOverrideDef", 0x15501CC5u, "uint16_t", 0x6328C0E4u, "eventStreamBufferOffsetClient", 0x4A5AD9DAu, 0x12ui64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint16_t();
    }
    Load_RegisterStructMemberSize("ScriptableEventDefUnion", 0x6FC80ED1u, "ScriptableEventDynamicBoneNoiseCurveDef", 0x1E1BC814u, "dynamicBoneNoiseCurve", 0xBA98F04A, 0i64, 0x28ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ScriptableEventDynamicBoneNoiseCurveDef", 0x1E1BC814u, 0x28ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("ScriptableEventDynamicBoneNoiseCurveDef", 0x1E1BC814u, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_ScriptableEventBaseDef();
      Load_RegisterStructMemberSize("ScriptableEventDynamicBoneNoiseCurveDef", 0x1E1BC814u, "bool", 0x1F095080u, "stateful", 0xBBB6C958, 8ui64, 1ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_bool();
      Load_RegisterStructMemberSize("ScriptableEventDynamicBoneNoiseCurveDef", 0x1E1BC814u, "XAnimCurvePtr", 0x9D2D70E2, "curve", 0x506CE179u, 0x10ui64, 8ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_XAnimCurvePtr();
      Load_RegisterStructMemberSize("ScriptableEventDynamicBoneNoiseCurveDef", 0x1E1BC814u, "float", 0x9B987AFE, "strengthMultiplier", 0x9EF9ABE6, 0x18ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_float();
      Load_RegisterStructMemberSize("ScriptableEventDynamicBoneNoiseCurveDef", 0x1E1BC814u, "float", 0x9B987AFE, "rateMultiplier", 0xF338F6D7, 0x1Cui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_float();
      Load_RegisterStructMemberSize("ScriptableEventDynamicBoneNoiseCurveDef", 0x1E1BC814u, "bool", 0x1F095080u, "isViewmodel", 0x7893EE8Au, 0x20ui64, 1ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_bool();
    }
    Load_RegisterStructMemberSize("ScriptableEventDefUnion", 0x6FC80ED1u, "ScriptableEventMoveDef", 0x4086DA1u, "move", 0xE52A445F, 0i64, 0x30ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ScriptableEventMoveDef();
    Load_RegisterStructMemberSize("ScriptableEventDefUnion", 0x6FC80ED1u, "ScriptableEventFootstepDef", 0xE72DC57E, "footstep", 0xB0BF0772, 0i64, 0x38ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ScriptableEventFootstepDef();
    Load_RegisterStructMemberSize("ScriptableEventDefUnion", 0x6FC80ED1u, "ScriptableEventGravityArcDef", 0xA2B45616, "gravityArc", 0xF8BDB54E, 0i64, 0x38ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ScriptableEventGravityArcDef();
    Load_RegisterStructMemberSize("ScriptableEventDefUnion", 0x6FC80ED1u, "ScriptableEventViewTriggerDef", 0xFE85D7B1, "viewTrigger", 0xEC4F06ED, 0i64, 0x18ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ScriptableEventViewTriggerDef", 0xFE85D7B1, 0x18ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("ScriptableEventViewTriggerDef", 0xFE85D7B1, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_ScriptableEventBaseDef();
      Load_RegisterStructMemberSize("ScriptableEventViewTriggerDef", 0xFE85D7B1, "float", 0x9B987AFE, "triggerDistanceSq", 0x27B884CDu, 8ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_float();
      Load_RegisterStructMemberSize("ScriptableEventViewTriggerDef", 0xFE85D7B1, "float", 0x9B987AFE, "triggerFOVCosHalfAngle", 0xC02472D6, 0xCui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_float();
      Load_RegisterStructMemberSize("ScriptableEventViewTriggerDef", 0xFE85D7B1, "uint16_t", 0x6328C0E4u, "eventStreamBufferOffsetClient", 0x4A5AD9DAu, 0x10ui64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint16_t();
    }
    Load_RegisterStructMemberSize("ScriptableEventDefUnion", 0x6FC80ED1u, "ScriptableEventObjectiveDef", 0x6854157Du, "objective", 0x461AFF21u, 0i64, 0x40ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ScriptableEventObjectiveDef", 0x6854157Du, 0x40ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("ScriptableEventObjectiveDef", 0x6854157Du, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_ScriptableEventBaseDef();
      Load_RegisterStructMemberSize("ScriptableEventObjectiveDef", 0x6854157Du, "ObjectiveSettings", 0x936918Au, "settings", 0x10E13BBFu, 8ui64, 0x18ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ObjectiveSettings();
      Load_RegisterStructMemberSize("ScriptableEventObjectiveDef", 0x6854157Du, "XString", 0x6231894Bu, "description", 0xFE25B2AE, 0x20ui64, 8ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_XString();
      Load_RegisterStructMemberSize("ScriptableEventObjectiveDef", 0x6854157Du, "XString", 0x6231894Bu, "icon", 0x394834DBu, 0x28ui64, 8ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_XString();
      Load_RegisterStructMemberSize("ScriptableEventObjectiveDef", 0x6854157Du, "XString", 0x6231894Bu, "label", 0x3621D88Au, 0x30ui64, 8ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_XString();
      Load_RegisterStructMemberSize("ScriptableEventObjectiveDef", 0x6854157Du, "GfxImagePtr", 0x4A325366u, "iconImage", 0x82C7BC32, 0x38ui64, 8ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_GfxImagePtr();
    }
    Load_RegisterStructMemberSize("ScriptableEventDefUnion", 0x6FC80ED1u, "ScriptableEventSpatialDisableDef", 0xE4BEFA7C, "spatialDisable", 0x98245594, 0i64, 0x10ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ScriptableEventSpatialDisableDef", 0xE4BEFA7C, 0x10ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("ScriptableEventSpatialDisableDef", 0xE4BEFA7C, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_ScriptableEventBaseDef();
      Load_RegisterStructMemberSize("ScriptableEventSpatialDisableDef", 0xE4BEFA7C, "bool", 0x1F095080u, "disabled", 0xBB377538, 8ui64, 1ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_bool();
    }
    Load_RegisterStructMemberSize("ScriptableEventDefUnion", 0x6FC80ED1u, "ScriptableEventHoverDef", 0x7C7FB774u, "hover", 0x65CF0926u, 0i64, 0x18ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ScriptableEventHoverDef", 0x7C7FB774u, 0x18ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("ScriptableEventHoverDef", 0x7C7FB774u, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_ScriptableEventBaseDef();
      Load_RegisterStructMemberSize("ScriptableEventHoverDef", 0x7C7FB774u, "float", 0x9B987AFE, "amplitudeUpDown", 0x1846ED8Cu, 8ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_float();
      Load_RegisterStructMemberSize("ScriptableEventHoverDef", 0x7C7FB774u, "float", 0x9B987AFE, "frequencyUpDown", 0x8CC63915, 0xCui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_float();
      Load_RegisterStructMemberSize("ScriptableEventHoverDef", 0x7C7FB774u, "float", 0x9B987AFE, "frequencyPitch", 0xD35EF9B4, 0x10ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_float();
      Load_RegisterStructMemberSize("ScriptableEventHoverDef", 0x7C7FB774u, "float", 0x9B987AFE, "frequencyYaw", 0xC80E691B, 0x14ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_float();
    }
    Load_RegisterStructMemberSize("ScriptableEventDefUnion", 0x6FC80ED1u, "ScriptableEventVehicleBlowUpTireDef", 0x6F61BCA1u, "vehicleBlowUpTire", 0x2DCF84D5u, 0i64, 0x10ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ScriptableEventVehicleBlowUpTireDef", 0x6F61BCA1u, 0x10ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("ScriptableEventVehicleBlowUpTireDef", 0x6F61BCA1u, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_ScriptableEventBaseDef();
      Load_RegisterStructMemberSize("ScriptableEventVehicleBlowUpTireDef", 0x6F61BCA1u, "int", 0x7103F94Bu, "tireIndex", 0xB10A72EE, 8ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_int();
    }
    Load_RegisterStructMemberSize("ScriptableEventDefUnion", 0x6FC80ED1u, "ScriptableEventDlc1Def", 0xD9E47930, "dlc1", 0xEC1300E8, 0i64, 0x18ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ScriptableEventDlc1Def", 0xD9E47930, 0x18ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("ScriptableEventDlc1Def", 0xD9E47930, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_ScriptableEventBaseDef();
      Load_RegisterStructMemberSize("ScriptableEventDlc1Def", 0xD9E47930, "float", 0x9B987AFE, "dlcFloat0", 0x644D73F1u, 8ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_float();
      Load_RegisterStructMemberSize("ScriptableEventDlc1Def", 0xD9E47930, "float", 0x9B987AFE, "dlcFloat1", 0x644D73F0u, 0xCui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_float();
      Load_RegisterStructMemberSize("ScriptableEventDlc1Def", 0xD9E47930, "float", 0x9B987AFE, "dlcFloat2", 0x644D73F3u, 0x10ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_float();
      Load_RegisterStructMemberSize("ScriptableEventDlc1Def", 0xD9E47930, "float", 0x9B987AFE, "dlcFloat3", 0x644D73F2u, 0x14ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_float();
    }
    Load_RegisterStructMemberSize("ScriptableEventDefUnion", 0x6FC80ED1u, "ScriptableEventScriptDamageDef", 0x8645796A, "scriptDamage", 0x49742CA6u, 0i64, 0x18ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ScriptableEventScriptDamageDef", 0x8645796A, 0x18ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("ScriptableEventScriptDamageDef", 0x8645796A, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_ScriptableEventBaseDef();
      Load_RegisterStructMemberSize("ScriptableEventScriptDamageDef", 0x8645796A, "XString", 0x6231894Bu, "notification", 0x82155165, 8ui64, 8ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_XString();
      Load_RegisterStructMemberSize("ScriptableEventScriptDamageDef", 0x8645796A, "scr_string_t", 0x3FD8616Du, "scrNotification", 0x7F51A539u, 0x10ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_scr_string_t();
      Load_RegisterStructMemberSize("ScriptableEventScriptDamageDef", 0x8645796A, "int", 0x7103F94Bu, "param", 0xA8DE75AB, 0x14ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_int();
    }
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventDisablePhysicsSubShapeDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventDisablePhysicsSubShapeDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventDisablePhysicsSubShapeDef", 0x3E0C7DAAu, 0x20ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventDisablePhysicsSubShapeDef", 0x3E0C7DAAu, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventDisablePhysicsSubShapeDef", 0x3E0C7DAAu, "XString", 0x6231894Bu, "mutableShapeName", 0xB08B1A5C, 8ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("ScriptableEventDisablePhysicsSubShapeDef", 0x3E0C7DAAu, "uint64_t", 0x8310C4F3, "mutableShapeHash", 0x47F37D5Du, 0x10ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint64_t();
    Load_RegisterStructMemberSize("ScriptableEventDisablePhysicsSubShapeDef", 0x3E0C7DAAu, "bool", 0x1F095080u, "allowMissingShape", 0xDE0A582C, 0x18ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventDlc1Def
==============
*/
void Load_ProcessStructLayout_ScriptableEventDlc1Def(void)
{
  if ( Load_RegisterStructSize("ScriptableEventDlc1Def", 0xD9E47930, 0x18ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventDlc1Def", 0xD9E47930, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventDlc1Def", 0xD9E47930, "float", 0x9B987AFE, "dlcFloat0", 0x644D73F1u, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventDlc1Def", 0xD9E47930, "float", 0x9B987AFE, "dlcFloat1", 0x644D73F0u, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventDlc1Def", 0xD9E47930, "float", 0x9B987AFE, "dlcFloat2", 0x644D73F3u, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventDlc1Def", 0xD9E47930, "float", 0x9B987AFE, "dlcFloat3", 0x644D73F2u, 0x14ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventDynamicBoneNoiseCurveDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventDynamicBoneNoiseCurveDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventDynamicBoneNoiseCurveDef", 0x1E1BC814u, 0x28ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventDynamicBoneNoiseCurveDef", 0x1E1BC814u, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventDynamicBoneNoiseCurveDef", 0x1E1BC814u, "bool", 0x1F095080u, "stateful", 0xBBB6C958, 8ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventDynamicBoneNoiseCurveDef", 0x1E1BC814u, "XAnimCurvePtr", 0x9D2D70E2, "curve", 0x506CE179u, 0x10ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XAnimCurvePtr();
    Load_RegisterStructMemberSize("ScriptableEventDynamicBoneNoiseCurveDef", 0x1E1BC814u, "float", 0x9B987AFE, "strengthMultiplier", 0x9EF9ABE6, 0x18ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventDynamicBoneNoiseCurveDef", 0x1E1BC814u, "float", 0x9B987AFE, "rateMultiplier", 0xF338F6D7, 0x1Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventDynamicBoneNoiseCurveDef", 0x1E1BC814u, "bool", 0x1F095080u, "isViewmodel", 0x7893EE8Au, 0x20ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventExplosionDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventExplosionDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventExplosionDef", 0x6B7A2315u, 0x30ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventExplosionDef", 0x6B7A2315u, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventExplosionDef", 0x6B7A2315u, "XString", 0x6231894Bu, "tagName", 0x6C9E5F11u, 8ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("ScriptableEventExplosionDef", 0x6B7A2315u, "scr_string_t", 0x3FD8616Du, "scrTagName", 0xB3061BBD, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("ScriptableEventExplosionDef", 0x6B7A2315u, "WeaponCompleteDefPtr", 0xFBCFD64C, "weapon", 0xD300509C, 0x18ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_WeaponCompleteDefPtr();
    Load_RegisterStructMemberSize("ScriptableEventExplosionDef", 0x6B7A2315u, "float", 0x9B987AFE, "radius", 0xAF4D19C2, 0x20ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventExplosionDef", 0x6B7A2315u, "float", 0x9B987AFE, "dmgOuter", 0x6CC1B5ADu, 0x24ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventExplosionDef", 0x6B7A2315u, "float", 0x9B987AFE, "dmgInner", 0xA15CBC14, 0x28ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventExplosionDef", 0x6B7A2315u, "bool", 0x1F095080u, "stateful", 0xBBB6C958, 0x2Cui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventExplosionDef", 0x6B7A2315u, "bool", 0x1F095080u, "allowMissingTag", 0x7C2020B3u, 0x2Dui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventExplosionDef", 0x6B7A2315u, "bool", 0x1F095080u, "useRootOnMissingTag", 0x6F0FD70Au, 0x2Eui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventFootstepDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventFootstepDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventFootstepDef", 0xE72DC57E, 0x38ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventFootstepDef", 0xE72DC57E, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventFootstepDef", 0xE72DC57E, "XString", 0x6231894Bu, "tagName", 0x6C9E5F11u, 8ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("ScriptableEventFootstepDef", 0xE72DC57E, "scr_string_t", 0x3FD8616Du, "scrTagName", 0xB3061BBD, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("ScriptableEventFootstepDef", 0xE72DC57E, "XString", 0x6231894Bu, "soundAlias", 0xE0057A93, 0x18ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("ScriptableEventFootstepDef", 0xE72DC57E, "bool", 0x1F095080u, "allowMissingTag", 0x7C2020B3u, 0x20ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventFootstepDef", 0xE72DC57E, "bool", 0x1F095080u, "useRootOnMissingTag", 0x6F0FD70Au, 0x21ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventFootstepDef", 0xE72DC57E, "uint8_t", 0x2BA45D81u, "flags", 0x85A76201, 0x22ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint8_t();
    Load_RegisterStructMemberSize("ScriptableEventFootstepDef", 0xE72DC57E, "FootstepVFXPtr", 0x231DA868u, "rightFootstepVFX", 0x62D834B4u, 0x28ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_FootstepVFXPtr();
    Load_RegisterStructMemberSize("ScriptableEventFootstepDef", 0xE72DC57E, "FootstepVFXPtr", 0x231DA868u, "leftFootstepVFX", 0x5F570A6Fu, 0x30ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_FootstepVFXPtr();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventGravityArcDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventGravityArcDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventGravityArcDef", 0xA2B45616, 0x38ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventGravityArcDef", 0xA2B45616, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventGravityArcDef", 0xA2B45616, "vec3_t", 0x375A0610u, "angleOffset", 0x8AFEDD40, 8ui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("ScriptableEventGravityArcDef", 0xA2B45616, "float", 0x9B987AFE, "gravityScale", 0x9DF9674u, 0x14ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventGravityArcDef", 0xA2B45616, "float", 0x9B987AFE, "upwardVelocity", 0xB8D00EA4, 0x18ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventGravityArcDef", 0xA2B45616, "float", 0x9B987AFE, "yawOffsetForXYDirection", 0xF58E833F, 0x1Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventGravityArcDef", 0xA2B45616, "bool", 0x1F095080u, "endAtInitialPose", 0xBF90FA3u, 0x20ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventGravityArcDef", 0xA2B45616, "bool", 0x1F095080u, "randomSpin", 0x3E767279u, 0x21ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventGravityArcDef", 0xA2B45616, "bool", 0x1F095080u, "playLootTrailFX", 0x4D602DDAu, 0x22ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventGravityArcDef", 0xA2B45616, "uint", 0x53A932A0u, "eventAtEndCount", 0xC9F6DA43, 0x24ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptableEventGravityArcDef", 0xA2B45616, "ScriptableEventDef", 0xB2D953Cu, "eventsAtEnd", 0xDBEBC6EB, 0x28ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventDef();
    Load_RegisterStructMemberSize("ScriptableEventGravityArcDef", 0xA2B45616, "uint16_t", 0x6328C0E4u, "eventStreamBufferOffsetServer", 0xF7CCABB6, 0x30ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint16_t();
    Load_RegisterStructMemberSize("ScriptableEventGravityArcDef", 0xA2B45616, "uint16_t", 0x6328C0E4u, "eventStreamBufferOffsetClient", 0x4A5AD9DAu, 0x32ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint16_t();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventHideShowBoneDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventHideShowBoneDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventHideShowBoneDef", 0x154B4C13u, 0x18ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventHideShowBoneDef", 0x154B4C13u, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventHideShowBoneDef", 0x154B4C13u, "XString", 0x6231894Bu, "tagName", 0x6C9E5F11u, 8ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("ScriptableEventHideShowBoneDef", 0x154B4C13u, "scr_string_t", 0x3FD8616Du, "scrTagName", 0xB3061BBD, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("ScriptableEventHideShowBoneDef", 0x154B4C13u, "bool", 0x1F095080u, "hide", 0xA7F76840, 0x14ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventHideShowBoneDef", 0x154B4C13u, "bool", 0x1F095080u, "allowMissingTag", 0x7C2020B3u, 0x15ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventHideShowBoneDef", 0x154B4C13u, "bool", 0x1F095080u, "hideShowChildren", 0x8674982u, 0x16ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventHoverDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventHoverDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventHoverDef", 0x7C7FB774u, 0x18ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventHoverDef", 0x7C7FB774u, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventHoverDef", 0x7C7FB774u, "float", 0x9B987AFE, "amplitudeUpDown", 0x1846ED8Cu, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventHoverDef", 0x7C7FB774u, "float", 0x9B987AFE, "frequencyUpDown", 0x8CC63915, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventHoverDef", 0x7C7FB774u, "float", 0x9B987AFE, "frequencyPitch", 0xD35EF9B4, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventHoverDef", 0x7C7FB774u, "float", 0x9B987AFE, "frequencyYaw", 0xC80E691B, 0x14ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventLightDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventLightDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventLightDef", 0xDFB4BF52, 0x40ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventLightDef", 0xDFB4BF52, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventLightDef", 0xDFB4BF52, "float", 0x9B987AFE, "intensityScaleMin", 0x5CC1B97Du, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventLightDef", 0xDFB4BF52, "float", 0x9B987AFE, "intensityScaleMax", 0x64C1C5D3u, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventLightDef", 0xDFB4BF52, "float", 0x9B987AFE, "radiusMin", 0xC9533966, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventLightDef", 0xDFB4BF52, "float", 0x9B987AFE, "radiusMax", 0xC1532C08, 0x14ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventLightDef", 0xDFB4BF52, "bool", 0x1F095080u, "useColor", 0xE4BA6E56, 0x18ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventLightDef", 0xDFB4BF52, "vec4_t", 0x77673763u, "colorLinearSrgb", 0x7EC656F6u, 0x1Cui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec4_t();
    Load_RegisterStructMemberSize("ScriptableEventLightDef", 0xDFB4BF52, "bool", 0x1F095080u, "useStateTransitionTime", 0xF1CF68EA, 0x2Cui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventLightDef", 0xDFB4BF52, "float", 0x9B987AFE, "transitionMin", 0x66C17137u, 0x30ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventLightDef", 0xDFB4BF52, "float", 0x9B987AFE, "transitionMax", 0x6EC17D89u, 0x34ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventLightDef", 0xDFB4BF52, "uint16_t", 0x6328C0E4u, "eventStreamBufferOffsetClient", 0x4A5AD9DAu, 0x38ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint16_t();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventMaterialOverrideDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventMaterialOverrideDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventMaterialOverrideDef", 0x15501CC5u, 0x18ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventMaterialOverrideDef", 0x15501CC5u, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventMaterialOverrideDef", 0x15501CC5u, "Scriptable_MaterialOverrideType", 0x4C70DE7Bu, "materialOverrideType", 0xE2E1E7DB, 8ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("Scriptable_MaterialOverrideType", 0x4C70DE7Bu, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ScriptableEventMaterialOverrideDef", 0x15501CC5u, "int", 0x7103F94Bu, "transitionTime", 0xCA25A9DE, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("ScriptableEventMaterialOverrideDef", 0x15501CC5u, "uint8_t", 0x2BA45D81u, "finalValue", 0xD359B9E3, 0x10ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint8_t();
    Load_RegisterStructMemberSize("ScriptableEventMaterialOverrideDef", 0x15501CC5u, "uint16_t", 0x6328C0E4u, "eventStreamBufferOffsetClient", 0x4A5AD9DAu, 0x12ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint16_t();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventModelDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventModelDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventModelDef", 0xDEE25B03, 0x20ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventModelDef", 0xDEE25B03, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventModelDef", 0xDEE25B03, "ScriptableDataType", 0xC89A885u, "dataType", 0x28524E00u, 8ui64, 1ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ScriptableDataType", 0xC89A885u, 1ui64, 1ui64) )
    {
      Load_RegisterStructMemberSize("ScriptableDataType", 0xC89A885u, "byte", 0x363F8F7Eu, (const char *)&queryFormat.fmt + 3, 0, 0i64, 1ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_byte();
    }
    Load_RegisterStructMemberSize("ScriptableEventModelDef", 0xDEE25B03, "ScriptableModelUnion", 0xDAAD33D9, "data", 0x331E5D8u, 0x10ui64, 8ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ScriptableModelUnion", 0xDAAD33D9, 8ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("ScriptableModelUnion", 0xDAAD33D9, "XCompositeModelDefPtr", 0x2D67BC89u, "compositeModel", 0x9F313FF0, 0i64, 8ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_XCompositeModelDefPtr();
      Load_RegisterStructMemberSize("ScriptableModelUnion", 0xDAAD33D9, "XModelPtr", 0xC52046E3, "model", 0xEC5C307F, 0i64, 8ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_XModelPtr();
    }
    Load_RegisterStructMemberSize("ScriptableEventModelDef", 0xDEE25B03, "byte", 0x363F8F7Eu, "hudOutlineColor", 0x4F5FB7A4u, 0x18ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_byte();
    Load_RegisterStructMemberSize("ScriptableEventModelDef", 0xDEE25B03, "bool", 0x1F095080u, "hudOutlineActive", 0xA79D9789, 0x19ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventModelDef", 0xDEE25B03, "bool", 0x1F095080u, "hudOutlineFill", 0xB5B05FCu, 0x1Aui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventModelDef", 0xDEE25B03, "bool", 0x1F095080u, "neverMoves", 0x81174BD4, 0x1Bui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventModelDef", 0xDEE25B03, "bool", 0x1F095080u, "dynamicSimulation", 0x8DB05C96, 0x1Cui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventModelDef", 0xDEE25B03, "bool", 0x1F095080u, "activatePhysics", 0x96BE50C2, 0x1Dui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventMoveDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventMoveDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventMoveDef", 0x4086DA1u, 0x30ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventMoveDef", 0x4086DA1u, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventMoveDef", 0x4086DA1u, "vec3_t", 0x375A0610u, "originOffset", 0x71C824A7u, 8ui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("ScriptableEventMoveDef", 0x4086DA1u, "vec3_t", 0x375A0610u, "angleOffset", 0x8AFEDD40, 0x14ui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("ScriptableEventMoveDef", 0x4086DA1u, "float", 0x9B987AFE, "seconds", 0x94B3124F, 0x20ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventMoveDef", 0x4086DA1u, "float", 0x9B987AFE, "secondsAccel", 0x3CB2FA49u, 0x24ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventMoveDef", 0x4086DA1u, "float", 0x9B987AFE, "secondsDecel", 0xCC0BA5D6, 0x28ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventMoveDef", 0x4086DA1u, "uint16_t", 0x6328C0E4u, "eventStreamBufferOffsetServer", 0xF7CCABB6, 0x2Cui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint16_t();
    Load_RegisterStructMemberSize("ScriptableEventMoveDef", 0x4086DA1u, "uint16_t", 0x6328C0E4u, "eventStreamBufferOffsetClient", 0x4A5AD9DAu, 0x2Eui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint16_t();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventNoteTrackDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventNoteTrackDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventNoteTrackDef", 0x9F0B9541, 0x18ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventNoteTrackDef", 0x9F0B9541, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventNoteTrackDef", 0x9F0B9541, "uint", 0x53A932A0u, "noteTrackCount", 0x8970E06u, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptableEventNoteTrackDef", 0x9F0B9541, "ScriptableNoteTrackDef", 0xEB896257, "noteTracks", 0xFC6B7320, 0x10ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("ScriptableNoteTrackDef", 0xEB896257, 0x20ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("ScriptableNoteTrackDef", 0xEB896257, "int", 0x7103F94Bu, "flags", 0x85A76201, 0i64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_int();
      Load_RegisterStructMemberSize("ScriptableNoteTrackDef", 0xEB896257, "XString", 0x6231894Bu, "noteTrackName", 0x4E531A68u, 8ui64, 8ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_XString();
      Load_RegisterStructMemberSize("ScriptableNoteTrackDef", 0xEB896257, "scr_string_t", 0x3FD8616Du, "scrNoteTrackName", 0x4529C6DCu, 0x10ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_scr_string_t();
      Load_RegisterStructMemberSize("ScriptableNoteTrackDef", 0xEB896257, "uint", 0x53A932A0u, "numEvents", 0xFD4068FB, 0x14ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("ScriptableNoteTrackDef", 0xEB896257, "ScriptableEventDef", 0xB2D953Cu, "events", 0xCC6DB7Bu, 0x18ui64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_ScriptableEventDef();
    }
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventObjectiveDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventObjectiveDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventObjectiveDef", 0x6854157Du, 0x40ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventObjectiveDef", 0x6854157Du, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventObjectiveDef", 0x6854157Du, "ObjectiveSettings", 0x936918Au, "settings", 0x10E13BBFu, 8ui64, 0x18ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ObjectiveSettings();
    Load_RegisterStructMemberSize("ScriptableEventObjectiveDef", 0x6854157Du, "XString", 0x6231894Bu, "description", 0xFE25B2AE, 0x20ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("ScriptableEventObjectiveDef", 0x6854157Du, "XString", 0x6231894Bu, "icon", 0x394834DBu, 0x28ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("ScriptableEventObjectiveDef", 0x6854157Du, "XString", 0x6231894Bu, "label", 0x3621D88Au, 0x30ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("ScriptableEventObjectiveDef", 0x6854157Du, "GfxImagePtr", 0x4A325366u, "iconImage", 0x82C7BC32, 0x38ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxImagePtr();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventPFXDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventPFXDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventPFXDef", 0x5816AEC8u, 0x58ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventPFXDef", 0x5816AEC8u, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventPFXDef", 0x5816AEC8u, "bool", 0x1F095080u, "stateful", 0xBBB6C958, 8ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventPFXDef", 0x5816AEC8u, "scr_string_t", 0x3FD8616Du, "scrTagNames", 0x8F9DAAF4, 0x10ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("ScriptableEventPFXDef", 0x5816AEC8u, "uint", 0x53A932A0u, "scrTagCount", 0x36319DA1u, 0x18ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptableEventPFXDef", 0x5816AEC8u, "scr_string_t", 0x3FD8616Du, "scrEndTagNames", 0xF08DC90F, 0x20ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("ScriptableEventPFXDef", 0x5816AEC8u, "uint", 0x53A932A0u, "scrEndTagCount", 0xD3888BE2, 0x28ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptableEventPFXDef", 0x5816AEC8u, "bool", 0x1F095080u, "useTagAngles", 0x802FC5FF, 0x2Cui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventPFXDef", 0x5816AEC8u, "XString", 0x6231894Bu, "effectAlias", 0xA9774A21, 0x30ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("ScriptableEventPFXDef", 0x5816AEC8u, "FxCombinedDef", 0xFDB4AEAC, "effectDef", 0x198F7F78u, 0x38ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_FxCombinedDef();
    Load_RegisterStructMemberSize("ScriptableEventPFXDef", 0x5816AEC8u, "float", 0x9B987AFE, "loopRate", 0xEF7E74u, 0x40ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventPFXDef", 0x5816AEC8u, "bool", 0x1F095080u, "oneshotLooping", 0x1CD184C2u, 0x44ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventPFXDef", 0x5816AEC8u, "uint16_t", 0x6328C0E4u, "eventStreamBufferOffsetClient", 0x4A5AD9DAu, 0x46ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint16_t();
    Load_RegisterStructMemberSize("ScriptableEventPFXDef", 0x5816AEC8u, "bool", 0x1F095080u, "allowMissingTag", 0x7C2020B3u, 0x48ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventPFXDef", 0x5816AEC8u, "bool", 0x1F095080u, "useRootOnMissingTag", 0x6F0FD70Au, 0x49ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventPFXDef", 0x5816AEC8u, "bool", 0x1F095080u, "allowNearestVehicleVelocity", 0x4D6F5698u, 0x4Aui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventPFXDef", 0x5816AEC8u, "bool", 0x1F095080u, "isViewmodel", 0x7893EE8Au, 0x4Bui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventPFXDef", 0x5816AEC8u, "bool", 0x1F095080u, "killOnExit", 0xE608E273, 0x4Cui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventPFXDef", 0x5816AEC8u, "bool", 0x1F095080u, "useDynamicScriptedBeamLength", 0x681FA26Fu, 0x4Dui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventPFXDef", 0x5816AEC8u, "int", 0x7103F94Bu, "beamBoneAxis", 0xBDC108FC, 0x50ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("ScriptableEventPFXDef", 0x5816AEC8u, "float", 0x9B987AFE, "beamLength", 0xEF64A555, 0x54ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventPartDamageDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventPartDamageDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventPartDamageDef", 0xC586F4AC, 0x28ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventPartDamageDef", 0xC586F4AC, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventPartDamageDef", 0xC586F4AC, "ScriptablePartReference", 0x6FB99DDu, "partReference", 0x96D296Eu, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ScriptablePartReference();
    Load_RegisterStructMemberSize("ScriptableEventPartDamageDef", 0xC586F4AC, "float", 0x9B987AFE, "amount", 0xA0D5B754, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventPartDamageDef", 0xC586F4AC, "bool", 0x1F095080u, "destroy", 0xAE614F9E, 0x10ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventPartDamageDef", 0xC586F4AC, "float", 0x9B987AFE, "amountDoT", 0x22D889D1u, 0x14ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventPartDamageDef", 0xC586F4AC, "float", 0x9B987AFE, "intervalDoT", 0x57A26AACu, 0x18ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventPartDamageDef", 0xC586F4AC, "uint16_t", 0x6328C0E4u, "eventStreamBufferOffsetServer", 0xF7CCABB6, 0x1Cui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint16_t();
    Load_RegisterStructMemberSize("ScriptableEventPartDamageDef", 0xC586F4AC, "uint16_t", 0x6328C0E4u, "eventStreamBufferOffsetClient", 0x4A5AD9DAu, 0x1Eui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint16_t();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventPlayMayhemDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventPlayMayhemDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventPlayMayhemDef", 0x33267397u, 0x10ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventPlayMayhemDef", 0x33267397u, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventPlayMayhemDef", 0x33267397u, "Scriptable_MayhemAction", 0x3E50A945u, "action", 0x97B1269E, 8ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("Scriptable_MayhemAction", 0x3E50A945u, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ScriptableEventPlayMayhemDef", 0x33267397u, "uint16_t", 0x6328C0E4u, "eventStreamBufferOffsetClient", 0x4A5AD9DAu, 0xCui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint16_t();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventRandomDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventRandomDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventRandomDef", 0x934D98BB, 0x30ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventRandomDef", 0x934D98BB, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventRandomDef", 0x934D98BB, "float", 0x9B987AFE, "threshold", 0xDFAB92E1, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventRandomDef", 0x934D98BB, "uint", 0x53A932A0u, "eventACount", 0xA405FC9E, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptableEventRandomDef", 0x934D98BB, "ScriptableEventDef", 0xB2D953Cu, "eventsA", 0x980B82E0, 0x10ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventDef();
    Load_RegisterStructMemberSize("ScriptableEventRandomDef", 0x934D98BB, "uint", 0x53A932A0u, "eventBCount", 0xE5F2BBEF, 0x18ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptableEventRandomDef", 0x934D98BB, "ScriptableEventDef", 0xB2D953Cu, "eventsB", 0x980B82E3, 0x20ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventDef();
    Load_RegisterStructMemberSize("ScriptableEventRandomDef", 0x934D98BB, "uint16_t", 0x6328C0E4u, "eventStreamBufferOffsetServer", 0xF7CCABB6, 0x28ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint16_t();
    Load_RegisterStructMemberSize("ScriptableEventRandomDef", 0x934D98BB, "uint16_t", 0x6328C0E4u, "eventStreamBufferOffsetClient", 0x4A5AD9DAu, 0x2Aui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint16_t();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventRumbleDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventRumbleDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventRumbleDef", 0x656A4EE1u, 0x38ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventRumbleDef", 0x656A4EE1u, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventRumbleDef", 0x656A4EE1u, "bool", 0x1F095080u, "stateful", 0xBBB6C958, 8ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventRumbleDef", 0x656A4EE1u, "XString", 0x6231894Bu, "tagName", 0x6C9E5F11u, 0x10ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("ScriptableEventRumbleDef", 0x656A4EE1u, "scr_string_t", 0x3FD8616Du, "scrTagName", 0xB3061BBD, 0x18ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("ScriptableEventRumbleDef", 0x656A4EE1u, "XString", 0x6231894Bu, "rumble", 0xBD462DC7, 0x20ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("ScriptableEventRumbleDef", 0x656A4EE1u, "RumbleInfoPtr", 0x48D5B893u, "rumbleAsset", 0x487DD039u, 0x28ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_RumbleInfoPtr();
    Load_RegisterStructMemberSize("ScriptableEventRumbleDef", 0x656A4EE1u, "bool", 0x1F095080u, "allowMissingTag", 0x7C2020B3u, 0x30ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventRumbleDef", 0x656A4EE1u, "bool", 0x1F095080u, "useRootOnMissingTag", 0x6F0FD70Au, 0x31ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventScreenshakeDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventScreenshakeDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventScreenshakeDef", 0xAFC68250, 0x50ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventScreenshakeDef", 0xAFC68250, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventScreenshakeDef", 0xAFC68250, "bool", 0x1F095080u, "stateful", 0xBBB6C958, 8ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventScreenshakeDef", 0xAFC68250, "bool", 0x1F095080u, "isEarthquake", 0xBC68081F, 9ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventScreenshakeDef", 0xAFC68250, "bool", 0x1F095080u, "isScreenShake", 0xD38F23D6, 0xAui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventScreenshakeDef", 0xAFC68250, "XString", 0x6231894Bu, "tagName", 0x6C9E5F11u, 0x10ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("ScriptableEventScreenshakeDef", 0xAFC68250, "scr_string_t", 0x3FD8616Du, "scrTagName", 0xB3061BBD, 0x18ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("ScriptableEventScreenshakeDef", 0xAFC68250, "float", 0x9B987AFE, "duration", 0xEA384820, 0x1Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventScreenshakeDef", 0xAFC68250, "float", 0x9B987AFE, "durationFadeUp", 0xA71C1B29, 0x20ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventScreenshakeDef", 0xAFC68250, "float", 0x9B987AFE, "durationFadeDown", 0xDDF60AAu, 0x24ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventScreenshakeDef", 0xAFC68250, "int", 0x7103F94Bu, "radius", 0xAF4D19C2, 0x28ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("ScriptableEventScreenshakeDef", 0xAFC68250, "float", 0x9B987AFE, "scaleEarthquake", 0xFE5AECCD, 0x2Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventScreenshakeDef", 0xAFC68250, "int", 0x7103F94Bu, "scalePitch", 0xF3A49240, 0x30ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("ScriptableEventScreenshakeDef", 0xAFC68250, "int", 0x7103F94Bu, "scaleYaw", 0xC9D90197, 0x34ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("ScriptableEventScreenshakeDef", 0xAFC68250, "int", 0x7103F94Bu, "scaleRoll", 0xA03D061F, 0x38ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("ScriptableEventScreenshakeDef", 0xAFC68250, "int", 0x7103F94Bu, "frequencyPitch", 0xD35EF9B4, 0x3Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("ScriptableEventScreenshakeDef", 0xAFC68250, "int", 0x7103F94Bu, "frequencyYaw", 0xC80E691B, 0x40ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("ScriptableEventScreenshakeDef", 0xAFC68250, "int", 0x7103F94Bu, "frequencyRoll", 0x2F695AEBu, 0x44ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("ScriptableEventScreenshakeDef", 0xAFC68250, "bool", 0x1F095080u, "allowMissingTag", 0x7C2020B3u, 0x48ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventScreenshakeDef", 0xAFC68250, "bool", 0x1F095080u, "useRootOnMissingTag", 0x6F0FD70Au, 0x49ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventScriptDamageDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventScriptDamageDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventScriptDamageDef", 0x8645796A, 0x18ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventScriptDamageDef", 0x8645796A, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventScriptDamageDef", 0x8645796A, "XString", 0x6231894Bu, "notification", 0x82155165, 8ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("ScriptableEventScriptDamageDef", 0x8645796A, "scr_string_t", 0x3FD8616Du, "scrNotification", 0x7F51A539u, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("ScriptableEventScriptDamageDef", 0x8645796A, "int", 0x7103F94Bu, "param", 0xA8DE75AB, 0x14ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventScriptDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventScriptDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventScriptDef", 0xE0EC1623, 0x20ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventScriptDef", 0xE0EC1623, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventScriptDef", 0xE0EC1623, "XString", 0x6231894Bu, "notification", 0x82155165, 8ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("ScriptableEventScriptDef", 0xE0EC1623, "scr_string_t", 0x3FD8616Du, "scrNotification", 0x7F51A539u, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("ScriptableEventScriptDef", 0xE0EC1623, "int", 0x7103F94Bu, "param", 0xA8DE75AB, 0x14ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("ScriptableEventScriptDef", 0xE0EC1623, "bool", 0x1F095080u, "doNotifyCallback", 0x2514C599u, 0x18ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventSetMayhemDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventSetMayhemDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventSetMayhemDef", 0xC6BF907u, 0x18ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventSetMayhemDef", 0xC6BF907u, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventSetMayhemDef", 0xC6BF907u, "MayhemDataPtr", 0xF75B3C93, "mayhem", 0x2F7C3127u, 8ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_MayhemDataPtr();
    Load_RegisterStructMemberSize("ScriptableEventSetMayhemDef", 0xC6BF907u, "uint16_t", 0x6328C0E4u, "eventStreamBufferOffsetClient", 0x4A5AD9DAu, 0x10ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint16_t();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventSoundDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventSoundDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventSoundDef", 0xE0B65211, 0x58ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventSoundDef", 0xE0B65211, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventSoundDef", 0xE0B65211, "bool", 0x1F095080u, "stateful", 0xBBB6C958, 8ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventSoundDef", 0xE0B65211, "XString", 0x6231894Bu, "tagName", 0x6C9E5F11u, 0x10ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("ScriptableEventSoundDef", 0xE0B65211, "scr_string_t", 0x3FD8616Du, "scrTagName", 0xB3061BBD, 0x18ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("ScriptableEventSoundDef", 0xE0B65211, "XString", 0x6231894Bu, "soundAlias", 0xE0057A93, 0x20ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("ScriptableEventSoundDef", 0xE0B65211, "bool", 0x1F095080u, "looping", 0xACA63A26, 0x28ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventSoundDef", 0xE0B65211, "bool", 0x1F095080u, "externalPlay", 0x9BC00EF7, 0x29ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventSoundDef", 0xE0B65211, "bool", 0x1F095080u, "allowMissingTag", 0x7C2020B3u, 0x2Aui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventSoundDef", 0xE0B65211, "bool", 0x1F095080u, "useRootOnMissingTag", 0x6F0FD70Au, 0x2Bui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventSoundDef", 0xE0B65211, "XString", 0x6231894Bu, "explosionReflClass", 0x4EBF048Cu, 0x30ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("ScriptableEventSoundDef", 0xE0B65211, "bool", 0x1F095080u, "doGroundTrace", 0x6BFEB92Du, 0x38ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventSoundDef", 0xE0B65211, "float", 0x9B987AFE, "groundTraceLength", 0x5367A824u, 0x3Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventSoundDef", 0xE0B65211, "vec3_t", 0x375A0610u, "worldOffset", 0x8910C05u, 0x40ui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventSpatialDisableDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventSpatialDisableDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventSpatialDisableDef", 0xE4BEFA7C, 0x10ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventSpatialDisableDef", 0xE4BEFA7C, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventSpatialDisableDef", 0xE4BEFA7C, "bool", 0x1F095080u, "disabled", 0xBB377538, 8ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventSpawnDynentDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventSpawnDynentDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventSpawnDynentDef", 0x30C993EDu, 0x70ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventSpawnDynentDef", 0x30C993EDu, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventSpawnDynentDef", 0x30C993EDu, "bool", 0x1F095080u, "stateful", 0xBBB6C958, 8ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventSpawnDynentDef", 0x30C993EDu, "XModelPtr", 0xC52046E3, "model", 0xEC5C307F, 0x10ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XModelPtr();
    Load_RegisterStructMemberSize("ScriptableEventSpawnDynentDef", 0x30C993EDu, "XString", 0x6231894Bu, "tagName", 0x6C9E5F11u, 0x18ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("ScriptableEventSpawnDynentDef", 0x30C993EDu, "scr_string_t", 0x3FD8616Du, "scrTagName", 0xB3061BBD, 0x20ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("ScriptableEventSpawnDynentDef", 0x30C993EDu, "bool", 0x1F095080u, "allowCauseVelocity", 0xAD009E6D, 0x24ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventSpawnDynentDef", 0x30C993EDu, "bool", 0x1F095080u, "allowNearestVehicleVelocity", 0x4D6F5698u, 0x25ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventSpawnDynentDef", 0x30C993EDu, "bool", 0x1F095080u, "worldSpaceLinVel", 0xA881A400, 0x26ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventSpawnDynentDef", 0x30C993EDu, "bool", 0x1F095080u, "worldSpaceAngVel", 0xE45BD87B, 0x27ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventSpawnDynentDef", 0x30C993EDu, "bool", 0x1F095080u, "randomRangeLinVel", 0xFBBDE116, 0x28ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventSpawnDynentDef", 0x30C993EDu, "bool", 0x1F095080u, "randomRangeAngVel", 0xE648D185, 0x29ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventSpawnDynentDef", 0x30C993EDu, "vec3_t", 0x375A0610u, "launchLinVel", 0xC1A1DA03, 0x2Cui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("ScriptableEventSpawnDynentDef", 0x30C993EDu, "vec3_t", 0x375A0610u, "launchAngVel", 0x20173670u, 0x38ui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("ScriptableEventSpawnDynentDef", 0x30C993EDu, "vec3_t", 0x375A0610u, "launchLinVel2", 0xD4CA328B, 0x44ui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("ScriptableEventSpawnDynentDef", 0x30C993EDu, "vec3_t", 0x375A0610u, "launchAngVel2", 0xF48AB262, 0x50ui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("ScriptableEventSpawnDynentDef", 0x30C993EDu, "uint16_t", 0x6328C0E4u, "eventStreamBufferOffsetClient", 0x4A5AD9DAu, 0x5Cui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint16_t();
    Load_RegisterStructMemberSize("ScriptableEventSpawnDynentDef", 0x30C993EDu, "bool", 0x1F095080u, "allowMissingTag", 0x7C2020B3u, 0x5Eui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventSpawnDynentDef", 0x30C993EDu, "bool", 0x1F095080u, "useRootOnMissingTag", 0x6F0FD70Au, 0x5Fui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventSpawnDynentDef", 0x30C993EDu, "XString", 0x6231894Bu, "effectAlias", 0xA9774A21, 0x60ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("ScriptableEventSpawnDynentDef", 0x30C993EDu, "FxCombinedDef", 0xFDB4AEAC, "effectDef", 0x198F7F78u, 0x68ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_FxCombinedDef();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventStateChangeDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventStateChangeDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventStateChangeDef", 0x1F1D769Bu, 0x18ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventStateChangeDef", 0x1F1D769Bu, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventStateChangeDef", 0x1F1D769Bu, "ScriptablePartReference", 0x6FB99DDu, "partReference", 0x96D296Eu, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ScriptablePartReference();
    Load_RegisterStructMemberSize("ScriptableEventStateChangeDef", 0x1F1D769Bu, "uint", 0x53A932A0u, "stateIdx", 0xBA7CDC68, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventSunDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventSunDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventSunDef", 0x7EB0C7A0u, 0x48ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventSunDef", 0x7EB0C7A0u, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventSunDef", 0x7EB0C7A0u, "bool", 0x1F095080u, "useIntensity", 0x5CDEDC20u, 8ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventSunDef", 0x7EB0C7A0u, "float", 0x9B987AFE, "intensityOverrideMin", 0xFA124D29, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventSunDef", 0x7EB0C7A0u, "float", 0x9B987AFE, "intensityOverrideMax", 0xF21240D7, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventSunDef", 0x7EB0C7A0u, "bool", 0x1F095080u, "useColor", 0xE4BA6E56, 0x14ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventSunDef", 0x7EB0C7A0u, "vec4_t", 0x77673763u, "colorLinearSrgb", 0x7EC656F6u, 0x18ui64, 0x10ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec4_t();
    Load_RegisterStructMemberSize("ScriptableEventSunDef", 0x7EB0C7A0u, "bool", 0x1F095080u, "useStateTransitionTime", 0xF1CF68EA, 0x28ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventSunDef", 0x7EB0C7A0u, "float", 0x9B987AFE, "transitionMin", 0x66C17137u, 0x2Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventSunDef", 0x7EB0C7A0u, "float", 0x9B987AFE, "transitionMax", 0x6EC17D89u, 0x30ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventSunDef", 0x7EB0C7A0u, "float", 0x9B987AFE, "pitchMin", 0x8D103E76, 0x34ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventSunDef", 0x7EB0C7A0u, "float", 0x9B987AFE, "pitchMax", 0x851031F8, 0x38ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventSunDef", 0x7EB0C7A0u, "float", 0x9B987AFE, "headingMin", 0x277DEC4Eu, 0x3Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventSunDef", 0x7EB0C7A0u, "float", 0x9B987AFE, "headingMax", 0x2F7DF8C0u, 0x40ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventSunDef", 0x7EB0C7A0u, "bool", 0x1F095080u, "useDirection", 0x2C762124u, 0x44ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventTeamSelectorDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventTeamSelectorDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventTeamSelectorDef", 0xC163A438, 0x38ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventTeamSelectorDef", 0xC163A438, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventTeamSelectorDef", 0xC163A438, "Scriptable_TeamFilter", 0x57BFD289u, "teamFilter", 0xA9441A29, 8ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("Scriptable_TeamFilter", 0x57BFD289u, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ScriptableEventTeamSelectorDef", 0xC163A438, "bool", 0x1F095080u, "testLocalPlayer", 0x5E17EC1Au, 0xCui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableEventTeamSelectorDef", 0xC163A438, "uint", 0x53A932A0u, "eventPassCount", 0x3C926348u, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptableEventTeamSelectorDef", 0xC163A438, "ScriptableEventDef", 0xB2D953Cu, "eventsPass", 0x6283C7BCu, 0x18ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventDef();
    Load_RegisterStructMemberSize("ScriptableEventTeamSelectorDef", 0xC163A438, "uint", 0x53A932A0u, "eventFailCount", 0xC4FCBF21, 0x20ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptableEventTeamSelectorDef", 0xC163A438, "ScriptableEventDef", 0xB2D953Cu, "eventsFail", 0x18BE3D13u, 0x28ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventDef();
    Load_RegisterStructMemberSize("ScriptableEventTeamSelectorDef", 0xC163A438, "uint16_t", 0x6328C0E4u, "eventStreamBufferOffsetClient", 0x4A5AD9DAu, 0x30ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint16_t();
    Load_RegisterStructMemberSize("ScriptableEventTeamSelectorDef", 0xC163A438, "uint16_t", 0x6328C0E4u, "eventStreamBufferOffsetServer", 0xF7CCABB6, 0x32ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint16_t();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventVehicleBlowUpTireDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventVehicleBlowUpTireDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventVehicleBlowUpTireDef", 0x6F61BCA1u, 0x10ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventVehicleBlowUpTireDef", 0x6F61BCA1u, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventVehicleBlowUpTireDef", 0x6F61BCA1u, "int", 0x7103F94Bu, "tireIndex", 0xB10A72EE, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventViewTriggerDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventViewTriggerDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventViewTriggerDef", 0xFE85D7B1, 0x18ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventViewTriggerDef", 0xFE85D7B1, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventViewTriggerDef", 0xFE85D7B1, "float", 0x9B987AFE, "triggerDistanceSq", 0x27B884CDu, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventViewTriggerDef", 0xFE85D7B1, "float", 0x9B987AFE, "triggerFOVCosHalfAngle", 0xC02472D6, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventViewTriggerDef", 0xFE85D7B1, "uint16_t", 0x6328C0E4u, "eventStreamBufferOffsetClient", 0x4A5AD9DAu, 0x10ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint16_t();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventViewmodelChangeImageDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventViewmodelChangeImageDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventViewmodelChangeImageDef", 0xE652326B, 0x10ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventViewmodelChangeImageDef", 0xE652326B, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventViewmodelChangeImageDef", 0xE652326B, "Scriptable_ImageId", 0x602B51B8u, "imageId", 0xA5839D58, 8ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("Scriptable_ImageId", 0x602B51B8u, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ScriptableEventViewmodelChangeImageDef", 0xE652326B, "int", 0x7103F94Bu, "imageValue", 0x6B4410F6u, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventViewmodelShaderParamDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventViewmodelShaderParamDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventViewmodelShaderParamDef", 0x9F0D2E98, 0x28ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventViewmodelShaderParamDef", 0x9F0D2E98, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventViewmodelShaderParamDef", 0x9F0D2E98, "Scriptable_ShaderParamType", 0x7EA62BAAu, "shaderParam", 0xD18189EA, 8ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("Scriptable_ShaderParamType", 0x7EA62BAAu, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ScriptableEventViewmodelShaderParamDef", 0x9F0D2E98, "float", 0x9B987AFE, "floatValue", 0x246F4291u, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventViewmodelShaderParamDef", 0x9F0D2E98, "float", 0x9B987AFE, "placeHolderValue1", 0x634DA4Bu, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventViewmodelShaderParamDef", 0x9F0D2E98, "float", 0x9B987AFE, "placeHolderValue2", 0x634DA48u, 0x14ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventViewmodelShaderParamDef", 0x9F0D2E98, "float", 0x9B987AFE, "placeHolderValue3", 0x634DA49u, 0x18ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventViewmodelShaderParamDef", 0x9F0D2E98, "float", 0x9B987AFE, "placeHolderValue4", 0x634DA4Eu, 0x1Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventViewmodelShaderParamDef", 0x9F0D2E98, "float", 0x9B987AFE, "transitionTime", 0xCA25A9DE, 0x20ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventViewmodelShaderParamDef", 0x9F0D2E98, "uint16_t", 0x6328C0E4u, "eventStreamBufferOffsetClient", 0x4A5AD9DAu, 0x24ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint16_t();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableEventWaitDef
==============
*/
void Load_ProcessStructLayout_ScriptableEventWaitDef(void)
{
  if ( Load_RegisterStructSize("ScriptableEventWaitDef", 0x9BAB9035, 0x18ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableEventWaitDef", 0x9BAB9035, "ScriptableEventBaseDef", 0xB2D7DE7D, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventBaseDef();
    Load_RegisterStructMemberSize("ScriptableEventWaitDef", 0x9BAB9035, "float", 0x9B987AFE, "delayMin", 0xDE54AB3u, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventWaitDef", 0x9BAB9035, "float", 0x9B987AFE, "delayMax", 0x5E53E3Du, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableEventWaitDef", 0x9BAB9035, "uint16_t", 0x6328C0E4u, "eventStreamBufferOffsetServer", 0xF7CCABB6, 0x10ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint16_t();
    Load_RegisterStructMemberSize("ScriptableEventWaitDef", 0x9BAB9035, "uint16_t", 0x6328C0E4u, "eventStreamBufferOffsetClient", 0x4A5AD9DAu, 0x12ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint16_t();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableInstance
==============
*/
void Load_ProcessStructLayout_ScriptableInstance(void)
{
  if ( Load_RegisterStructSize("ScriptableInstance", 0x91052794, 0x48ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableInstance", 0x91052794, "ScriptableDefPtr", 0x217ED8C8u, "initialDef", 0x810C049u, 0i64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ScriptableDefPtr();
    Load_RegisterStructMemberSize("ScriptableInstance", 0x91052794, "vec3_t", 0x375A0610u, "initialOrigin", 0xBF231B4A, 8ui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("ScriptableInstance", 0x91052794, "vec3_t", 0x375A0610u, "initialAngles", 0x9F89859C, 0x14ui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("ScriptableInstance", 0x91052794, "scr_string_t", 0x3FD8616Du, "classname", 0x9C251C79, 0x20ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("ScriptableInstance", 0x91052794, "scr_string_t", 0x3FD8616Du, "target", 0x12592D33u, 0x24ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("ScriptableInstance", 0x91052794, "scr_string_t", 0x3FD8616Du, "targetname", 0xF23B1796, 0x28ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("ScriptableInstance", 0x91052794, "scr_string_t", 0x3FD8616Du, "script_linkname", 0x9E02C5E5, 0x2Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("ScriptableInstance", 0x91052794, "scr_string_t", 0x3FD8616Du, "script_linkto", 0x568628FFu, 0x30ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("ScriptableInstance", 0x91052794, "scr_string_t", 0x3FD8616Du, "script_noteworthy", 0x99A1E761, 0x34ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("ScriptableInstance", 0x91052794, "ushort", 0xB7BE387D, "lightIndices", 0x1F08646Bu, 0x38ui64, 0xAui64, 5ui64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("ScriptableInstance", 0x91052794, "ushort", 0xB7BE387D, "ffMemCost", 0x440CB530u, 0x42ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("ScriptableInstance", 0x91052794, "ushort", 0xB7BE387D, "mapEntLookup", 0x651493CFu, 0x44ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ushort();
    Load_RegisterStructMemberSize("ScriptableInstance", 0x91052794, "byte", 0x363F8F7Eu, "flags", 0x85A76201, 0x46ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_byte();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableMapEnts
==============
*/
void Load_ProcessStructLayout_ScriptableMapEnts(void)
{
  if ( Load_RegisterStructSize("ScriptableMapEnts", 0xBF4EC84F, 0xD8ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableMapEnts", 0xBF4EC84F, "uint", 0x53A932A0u, "totalInstanceCount", 0x2BCC26FCu, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptableMapEnts", 0xBF4EC84F, "uint", 0x53A932A0u, "mapInstanceCount", 0xB030D7B8, 4ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptableMapEnts", 0xBF4EC84F, "uint", 0x53A932A0u, "reservedInstanceCount", 0x10978B82u, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptableMapEnts", 0xBF4EC84F, "uint", 0x53A932A0u, "lootInstanceCount", 0x65FDFB6Cu, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptableMapEnts", 0xBF4EC84F, "uint", 0x53A932A0u, "serverInstanceCount", 0xBDCE788D, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptableMapEnts", 0xBF4EC84F, "uint", 0x53A932A0u, "serverFixedPartCount", 0x5F1AF54Bu, 0x14ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptableMapEnts", 0xBF4EC84F, "uint", 0x53A932A0u, "serverUsablePartCount", 0xAD7746BB, 0x18ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptableMapEnts", 0xBF4EC84F, "ScriptablePhysicsLimits", 0xDE1DBB2C, "physicsLimits", 0x2407F7B3u, 0x1Cui64, 0x18ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ScriptablePhysicsLimits", 0xDE1DBB2C, 0x18ui64, 4ui64) )
    {
      Load_RegisterStructMemberSize("ScriptablePhysicsLimits", 0xDE1DBB2C, "uint", 0x53A932A0u, "clientStandaloneMainRigidBodyCount", 0x4B812DC5u, 0i64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("ScriptablePhysicsLimits", 0xDE1DBB2C, "uint", 0x53A932A0u, "clientStandaloneDetailedRigidBodyCount", 0x4A547216u, 4ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("ScriptablePhysicsLimits", 0xDE1DBB2C, "uint", 0x53A932A0u, "clientStandaloneMotionCount", 0xE2DDB443, 8ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("ScriptablePhysicsLimits", 0xDE1DBB2C, "uint", 0x53A932A0u, "serverStandaloneMainRigidBodyCount", 0x71FFCCD1u, 0xCui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("ScriptablePhysicsLimits", 0xDE1DBB2C, "uint", 0x53A932A0u, "serverStandaloneDetailedRigidBodyCount", 0xAC078DA2, 0x10ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("ScriptablePhysicsLimits", 0xDE1DBB2C, "uint", 0x53A932A0u, "serverStandaloneMotionCount", 0x35F7880Fu, 0x14ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
    }
    Load_RegisterStructMemberSize("ScriptableMapEnts", 0xBF4EC84F, "ScriptableInstance", 0x91052794, "mapInstances", 0x6C6671C2u, 0x38ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableInstance();
    Load_RegisterStructMemberSize("ScriptableMapEnts", 0xBF4EC84F, "Scriptable_EventSun_Data", 0xFBAFB181, "sunClientDatas[0]", 0x10330B24u, 0x40ui64, 0x68ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_Scriptable_EventSun_Data();
    Load_RegisterStructMemberSize("ScriptableMapEnts", 0xBF4EC84F, "Scriptable_EventSun_Data", 0xFBAFB181, "sunClientDatas[1]", 0xF3309BBu, 0x40ui64, 0x68ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_Scriptable_EventSun_Data();
    Load_RegisterStructMemberSize("ScriptableMapEnts", 0xBF4EC84F, "ScriptableReservedDynents", 0x834D7FB4, "reservedDynents[0]", 0x3733B3CBu, 0xA8ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ScriptableReservedDynents();
    Load_RegisterStructMemberSize("ScriptableMapEnts", 0xBF4EC84F, "ScriptableReservedDynents", 0x834D7FB4, "reservedDynents[1]", 0x3833B574u, 0xA8ui64, 0x20ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ScriptableReservedDynents();
    Load_RegisterStructMemberSize("ScriptableMapEnts", 0xBF4EC84F, "SpatialPartition_Population_Tree", 0xC8B246BB, "spatialPopulationTree", 0x606812B1u, 0xC8ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_SpatialPartition_Population_Tree();
    Load_RegisterStructMemberSize("ScriptableMapEnts", 0xBF4EC84F, "uint", 0x53A932A0u, "ffMemCost", 0x440CB530u, 0xD0ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableModelUnion
==============
*/
void Load_ProcessStructLayout_ScriptableModelUnion(void)
{
  if ( Load_RegisterStructSize("ScriptableModelUnion", 0xDAAD33D9, 8ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableModelUnion", 0xDAAD33D9, "XCompositeModelDefPtr", 0x2D67BC89u, "compositeModel", 0x9F313FF0, 0i64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XCompositeModelDefPtr();
    Load_RegisterStructMemberSize("ScriptableModelUnion", 0xDAAD33D9, "XModelPtr", 0xC52046E3, "model", 0xEC5C307F, 0i64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XModelPtr();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableNoteTrackDef
==============
*/
void Load_ProcessStructLayout_ScriptableNoteTrackDef(void)
{
  if ( Load_RegisterStructSize("ScriptableNoteTrackDef", 0xEB896257, 0x20ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableNoteTrackDef", 0xEB896257, "int", 0x7103F94Bu, "flags", 0x85A76201, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("ScriptableNoteTrackDef", 0xEB896257, "XString", 0x6231894Bu, "noteTrackName", 0x4E531A68u, 8ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("ScriptableNoteTrackDef", 0xEB896257, "scr_string_t", 0x3FD8616Du, "scrNoteTrackName", 0x4529C6DCu, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("ScriptableNoteTrackDef", 0xEB896257, "uint", 0x53A932A0u, "numEvents", 0xFD4068FB, 0x14ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptableNoteTrackDef", 0xEB896257, "ScriptableEventDef", 0xB2D953Cu, "events", 0xCC6DB7Bu, 0x18ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventDef();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptablePartDef
==============
*/
void Load_ProcessStructLayout_ScriptablePartDef(void)
{
  if ( Load_RegisterStructSize("ScriptablePartDef", 0x91C49A43, 0x68ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptablePartDef", 0x91C49A43, "XString", 0x6231894Bu, (const char *)&stru_143C9A1A4, 0x58737A51u, 0i64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("ScriptablePartDef", 0x91C49A43, "scr_string_t", 0x3FD8616Du, "scrName", 0x7069EFC5u, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("ScriptablePartDef", 0x91C49A43, "int", 0x7103F94Bu, "flags", 0x85A76201, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("ScriptablePartDef", 0x91C49A43, "uint", 0x53A932A0u, "flatId", 0x49A57C56u, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptablePartDef", 0x91C49A43, "uint", 0x53A932A0u, "serverInstanceFlatId", 0xBEAE0DDE, 0x14ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptablePartDef", 0x91C49A43, "uint", 0x53A932A0u, "serverControlledFlatId", 0xD5EE53E1, 0x18ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptablePartDef", 0x91C49A43, "XString", 0x6231894Bu, "tagName", 0x6C9E5F11u, 0x20ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("ScriptablePartDef", 0x91C49A43, "scr_string_t", 0x3FD8616Du, "scrTagName", 0xB3061BBD, 0x28ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("ScriptablePartDef", 0x91C49A43, "uint", 0x53A932A0u, "numStates", 0x42810CE6u, 0x2Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptablePartDef", 0x91C49A43, "ScriptableStateDef", 0xEA432B3D, "states", 0x52077F66u, 0x30ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("ScriptableStateDef", 0xEA432B3D, 0xA0ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("ScriptableStateDef", 0xEA432B3D, "ScriptableStateBaseDef", 0xBEE46534, "base", 0x2B0353C7u, 0i64, 0x18ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ScriptableStateBaseDef();
      Load_RegisterStructMemberSize("ScriptableStateDef", 0xEA432B3D, "Scriptable_StateType", 0x204EF9AFu, "type", 0xE73D75F8, 0x18ui64, 4ui64, 0i64, 0, 0);
      Load_RegisterStructSize("Scriptable_StateType", 0x204EF9AFu, 4ui64, 4ui64);
      Load_RegisterStructMemberSize("ScriptableStateDef", 0xEA432B3D, "ScriptableStateDefUnion", 0xA43B5C5A, "data", 0x331E5D8u, 0x20ui64, 0x80ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_ScriptableStateDefUnion();
    }
    Load_RegisterStructMemberSize("ScriptablePartDef", 0x91C49A43, "uint", 0x53A932A0u, "numChildParts", 0xFD7B33Cu, 0x40ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptablePartDef", 0x91C49A43, "ScriptablePartDef", 0x91C49A43, "childParts", 0xDBF2CDBC, 0x48ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptablePartDef();
    Load_RegisterStructMemberSize("ScriptablePartDef", 0x91C49A43, "uint", 0x53A932A0u, "numDamageTagOverrides", 0x18141364u, 0x50ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptablePartDef", 0x91C49A43, "ScriptableDamageTagOverride", 0x49A52AFAu, "damageTagOverrides", 0xE7FDE4u, 0x58ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("ScriptableDamageTagOverride", 0x49A52AFAu, 0x10ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("ScriptableDamageTagOverride", 0x49A52AFAu, "XString", 0x6231894Bu, "tag", 0x9A201020, 0i64, 8ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_XString();
      Load_RegisterStructMemberSize("ScriptableDamageTagOverride", 0x49A52AFAu, "scr_string_t", 0x3FD8616Du, "scrTag", 0x3D597464u, 8ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_scr_string_t();
    }
    Load_RegisterStructMemberSize("ScriptablePartDef", 0x91C49A43, "uint16_t", 0x6328C0E4u, "eventStreamBufferOffsetServer", 0xF7CCABB6, 0x60ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint16_t();
    Load_RegisterStructMemberSize("ScriptablePartDef", 0x91C49A43, "uint16_t", 0x6328C0E4u, "eventStreamBufferOffsetClient", 0x4A5AD9DAu, 0x62ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint16_t();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptablePartReference
==============
*/
void Load_ProcessStructLayout_ScriptablePartReference(void)
{
  if ( Load_RegisterStructSize("ScriptablePartReference", 0x6FB99DDu, 4ui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("ScriptablePartReference", 0x6FB99DDu, "uint", 0x53A932A0u, "flatId", 0x49A57C56u, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptablePhysicsLimits
==============
*/
void Load_ProcessStructLayout_ScriptablePhysicsLimits(void)
{
  if ( Load_RegisterStructSize("ScriptablePhysicsLimits", 0xDE1DBB2C, 0x18ui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("ScriptablePhysicsLimits", 0xDE1DBB2C, "uint", 0x53A932A0u, "clientStandaloneMainRigidBodyCount", 0x4B812DC5u, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptablePhysicsLimits", 0xDE1DBB2C, "uint", 0x53A932A0u, "clientStandaloneDetailedRigidBodyCount", 0x4A547216u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptablePhysicsLimits", 0xDE1DBB2C, "uint", 0x53A932A0u, "clientStandaloneMotionCount", 0xE2DDB443, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptablePhysicsLimits", 0xDE1DBB2C, "uint", 0x53A932A0u, "serverStandaloneMainRigidBodyCount", 0x71FFCCD1u, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptablePhysicsLimits", 0xDE1DBB2C, "uint", 0x53A932A0u, "serverStandaloneDetailedRigidBodyCount", 0xAC078DA2, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptablePhysicsLimits", 0xDE1DBB2C, "uint", 0x53A932A0u, "serverStandaloneMotionCount", 0x35F7880Fu, 0x14ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableReservedDynent
==============
*/
void Load_ProcessStructLayout_ScriptableReservedDynent(void)
{
  if ( Load_RegisterStructSize("ScriptableReservedDynent", 0x2621397Du, 8ui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableReservedDynent", 0x2621397Du, "uint", 0x53A932A0u, "dynentId", 0xF672B51F, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptableReservedDynent", 0x2621397Du, "short", 0x8B9348A6, "next", 0x4D7C634Bu, 4ui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_short();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableReservedDynents
==============
*/
void Load_ProcessStructLayout_ScriptableReservedDynents(void)
{
  if ( Load_RegisterStructSize("ScriptableReservedDynents", 0x834D7FB4, 0x10ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableReservedDynents", 0x834D7FB4, "short", 0x8B9348A6, "freeHead", 0x51EEB498u, 0i64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_short();
    Load_RegisterStructMemberSize("ScriptableReservedDynents", 0x834D7FB4, "uint", 0x53A932A0u, "numReservedDynents", 0x2552E4DFu, 4ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptableReservedDynents", 0x834D7FB4, "ScriptableReservedDynent", 0x2621397Du, "reservedDynents", 0x6BD1945Fu, 8ui64, 8ui64, 0i64, 1, 0);
    if ( Load_RegisterStructSize("ScriptableReservedDynent", 0x2621397Du, 8ui64, 4ui64) )
    {
      Load_RegisterStructMemberSize("ScriptableReservedDynent", 0x2621397Du, "uint", 0x53A932A0u, "dynentId", 0xF672B51F, 0i64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_uint();
      Load_RegisterStructMemberSize("ScriptableReservedDynent", 0x2621397Du, "short", 0x8B9348A6, "next", 0x4D7C634Bu, 4ui64, 2ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_short();
    }
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableStateBaseDef
==============
*/
void Load_ProcessStructLayout_ScriptableStateBaseDef(void)
{
  if ( Load_RegisterStructSize("ScriptableStateBaseDef", 0xBEE46534, 0x18ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableStateBaseDef", 0xBEE46534, "XString", 0x6231894Bu, (const char *)&stru_143C9A1A4, 0x58737A51u, 0i64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("ScriptableStateBaseDef", 0xBEE46534, "int", 0x7103F94Bu, "flags", 0x85A76201, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("ScriptableStateBaseDef", 0xBEE46534, "uint", 0x53A932A0u, "numEvents", 0xFD4068FB, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptableStateBaseDef", 0xBEE46534, "ScriptableEventDef", 0xB2D953Cu, "events", 0xCC6DB7Bu, 0x10ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableEventDef();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableStateDef
==============
*/
void Load_ProcessStructLayout_ScriptableStateDef(void)
{
  if ( Load_RegisterStructSize("ScriptableStateDef", 0xEA432B3D, 0xA0ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableStateDef", 0xEA432B3D, "ScriptableStateBaseDef", 0xBEE46534, "base", 0x2B0353C7u, 0i64, 0x18ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ScriptableStateBaseDef();
    Load_RegisterStructMemberSize("ScriptableStateDef", 0xEA432B3D, "Scriptable_StateType", 0x204EF9AFu, "type", 0xE73D75F8, 0x18ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("Scriptable_StateType", 0x204EF9AFu, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ScriptableStateDef", 0xEA432B3D, "ScriptableStateDefUnion", 0xA43B5C5A, "data", 0x331E5D8u, 0x20ui64, 0x80ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ScriptableStateDefUnion();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableStateDefUnion
==============
*/
void Load_ProcessStructLayout_ScriptableStateDefUnion(void)
{
  if ( Load_RegisterStructSize("ScriptableStateDefUnion", 0xA43B5C5A, 0x80ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableStateDefUnion", 0xA43B5C5A, "ScriptableStateSimpleDef", 0x9DB500AB, "simple", 0x4EE3AA6Eu, 0i64, 8ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ScriptableStateSimpleDef", 0x9DB500AB, 8ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("ScriptableStateSimpleDef", 0x9DB500AB, "ScriptableStateBaseDef", 0xBEE46534, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_ScriptableStateBaseDef();
    }
    Load_RegisterStructMemberSize("ScriptableStateDefUnion", 0xA43B5C5A, "ScriptableStateHealthDef", 0x980128AF, "health", 0x10204A22u, 0i64, 0x60ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ScriptableStateHealthDef();
    Load_RegisterStructMemberSize("ScriptableStateDefUnion", 0xA43B5C5A, "ScriptableStateScriptedDef", 0xBA367F03, "scripted", 0xBD341536, 0i64, 0x18ui64, 0i64, 0, 0);
    if ( Load_RegisterStructSize("ScriptableStateScriptedDef", 0xBA367F03, 0x18ui64, 8ui64) )
    {
      Load_RegisterStructMemberSize("ScriptableStateScriptedDef", 0xBA367F03, "ScriptableStateBaseDef", 0xBEE46534, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
      Load_ProcessStructLayout_ScriptableStateBaseDef();
      Load_RegisterStructMemberSize("ScriptableStateScriptedDef", 0xBA367F03, "XString", 0x6231894Bu, "script_id", 0x17E56D23u, 8ui64, 8ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_XString();
      Load_RegisterStructMemberSize("ScriptableStateScriptedDef", 0xBA367F03, "scr_string_t", 0x3FD8616Du, "scrScript_id", 0x516FB02Fu, 0x10ui64, 4ui64, 0i64, 0, 0);
      Load_ProcessStructLayout_scr_string_t();
    }
    Load_RegisterStructMemberSize("ScriptableStateDefUnion", 0xA43B5C5A, "ScriptableStateUsableDef", 0x902D8E31, "usable", 0xDB57BF64, 0i64, 0x80ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_ScriptableStateUsableDef();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableStateHealthDef
==============
*/
void Load_ProcessStructLayout_ScriptableStateHealthDef(void)
{
  if ( Load_RegisterStructSize("ScriptableStateHealthDef", 0x980128AF, 0x60ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableStateHealthDef", 0x980128AF, "ScriptableStateBaseDef", 0xBEE46534, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableStateBaseDef();
    Load_RegisterStructMemberSize("ScriptableStateHealthDef", 0x980128AF, "int", 0x7103F94Bu, "health", 0x10204A22u, 8ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("ScriptableStateHealthDef", 0x980128AF, "Scriptable_DamageCause", 0xEC2D514C, "validDamageCause", 0x1B9C2332u, 0xCui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("Scriptable_DamageCause", 0xEC2D514C, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ScriptableStateHealthDef", 0x980128AF, "Scriptable_Attackers", 0xCC02C3B8, "validAttackers", 0x72165D4Au, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("Scriptable_Attackers", 0xCC02C3B8, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ScriptableStateHealthDef", 0x980128AF, "Scriptable_TeamFilter", 0x57BFD289u, "validAttackerTeams", 0x974C8D7B, 0x14ui64, 4ui64, 0i64, 0, 0);
    Load_RegisterStructSize("Scriptable_TeamFilter", 0x57BFD289u, 4ui64, 4ui64);
    Load_RegisterStructMemberSize("ScriptableStateHealthDef", 0x980128AF, "uint", 0x53A932A0u, "numWeaponClasses", 0x93059908, 0x18ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptableStateHealthDef", 0x980128AF, "weapClass_t", 0xD4946E10, "weaponClasses", 0x217DDC88u, 0x20ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_weapClass_t();
    Load_RegisterStructMemberSize("ScriptableStateHealthDef", 0x980128AF, "uint", 0x53A932A0u, "numWeapons", 0xD4D8A667, 0x28ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptableStateHealthDef", 0x980128AF, "WeaponCompleteDefPtr", 0xFBCFD64C, "weapons", 0xC57EE5E7, 0x30ui64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_WeaponCompleteDefPtr();
    Load_RegisterStructMemberSize("ScriptableStateHealthDef", 0x980128AF, "int", 0x7103F94Bu, "minimumDamage", 0x41A1361Fu, 0x38ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("ScriptableStateHealthDef", 0x980128AF, "float", 0x9B987AFE, "damagePropagationToParent", 0x706DE0ECu, 0x3Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableStateHealthDef", 0x980128AF, "float", 0x9B987AFE, "damagePropagationToChild", 0x753A2CDEu, 0x40ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableStateHealthDef", 0x980128AF, "float", 0x9B987AFE, "damagePropagationFromParent", 0x1EF7797u, 0x44ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableStateHealthDef", 0x980128AF, "float", 0x9B987AFE, "damagePropagationFromChild", 0x6DE0A047u, 0x48ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableStateHealthDef", 0x980128AF, "XString", 0x6231894Bu, "script_id", 0x17E56D23u, 0x50ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("ScriptableStateHealthDef", 0x980128AF, "scr_string_t", 0x3FD8616Du, "scrScript_id", 0x516FB02Fu, 0x58ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("ScriptableStateHealthDef", 0x980128AF, "bool", 0x1F095080u, "localizeSplashDamage", 0x1C1E2587u, 0x5Cui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableStateScriptedDef
==============
*/
void Load_ProcessStructLayout_ScriptableStateScriptedDef(void)
{
  if ( Load_RegisterStructSize("ScriptableStateScriptedDef", 0xBA367F03, 0x18ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableStateScriptedDef", 0xBA367F03, "ScriptableStateBaseDef", 0xBEE46534, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableStateBaseDef();
    Load_RegisterStructMemberSize("ScriptableStateScriptedDef", 0xBA367F03, "XString", 0x6231894Bu, "script_id", 0x17E56D23u, 8ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("ScriptableStateScriptedDef", 0xBA367F03, "scr_string_t", 0x3FD8616Du, "scrScript_id", 0x516FB02Fu, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableStateSimpleDef
==============
*/
void Load_ProcessStructLayout_ScriptableStateSimpleDef(void)
{
  if ( Load_RegisterStructSize("ScriptableStateSimpleDef", 0x9DB500AB, 8ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableStateSimpleDef", 0x9DB500AB, "ScriptableStateBaseDef", 0xBEE46534, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableStateBaseDef();
  }
}

/*
==============
Load_ProcessStructLayout_ScriptableStateUsableDef
==============
*/
void Load_ProcessStructLayout_ScriptableStateUsableDef(void)
{
  if ( Load_RegisterStructSize("ScriptableStateUsableDef", 0x902D8E31, 0x80ui64, 8ui64) )
  {
    Load_RegisterStructMemberSize("ScriptableStateUsableDef", 0x902D8E31, "ScriptableStateBaseDef", 0xBEE46534, "base", 0x2B0353C7u, 0i64, 8ui64, 0i64, 1, 0);
    Load_ProcessStructLayout_ScriptableStateBaseDef();
    Load_RegisterStructMemberSize("ScriptableStateUsableDef", 0x902D8E31, "XString", 0x6231894Bu, "script_id", 0x17E56D23u, 8ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("ScriptableStateUsableDef", 0x902D8E31, "scr_string_t", 0x3FD8616Du, "scrScript_id", 0x516FB02Fu, 0x10ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("ScriptableStateUsableDef", 0x902D8E31, "float", 0x9B987AFE, "faceFOV", 0x3F4C47C8u, 0x14ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableStateUsableDef", 0x902D8E31, "float", 0x9B987AFE, "useFOV", 0x465371C6u, 0x18ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableStateUsableDef", 0x902D8E31, "float", 0x9B987AFE, "useRadius", 0xC8595BCB, 0x1Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableStateUsableDef", 0x902D8E31, "float", 0x9B987AFE, "useRadiusAuto", 0xE626B15E, 0x20ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableStateUsableDef", 0x902D8E31, "float", 0x9B987AFE, "useRadiusDisplay", 0x22EB0013u, 0x24ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("ScriptableStateUsableDef", 0x902D8E31, "bool", 0x1F095080u, "useRadiusMinimized", 0xB9C68A4D, 0x28ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableStateUsableDef", 0x902D8E31, "bool", 0x1F095080u, "gotoNextStateOnUse", 0x7E6E405Fu, 0x29ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableStateUsableDef", 0x902D8E31, "bool", 0x1F095080u, "allowMissingTag", 0x7C2020B3u, 0x2Aui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableStateUsableDef", 0x902D8E31, "bool", 0x1F095080u, "usableWhenObstructed", 0x6199CF77u, 0x2Bui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableStateUsableDef", 0x902D8E31, "vec3_t", 0x375A0610u, "useOffset", 0xD4B58890, 0x2Cui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("ScriptableStateUsableDef", 0x902D8E31, "vec3_t", 0x375A0610u, "angleOffset", 0x8AFEDD40, 0x38ui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("ScriptableStateUsableDef", 0x902D8E31, "uint", 0x53A932A0u, "hintHoldDuration", 0xD36E4114, 0x44ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_uint();
    Load_RegisterStructMemberSize("ScriptableStateUsableDef", 0x902D8E31, "int8_t", 0xE01766C8, "priority", 0xC76EC948, 0x48ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int8_t();
    Load_RegisterStructMemberSize("ScriptableStateUsableDef", 0x902D8E31, "bool", 0x1F095080u, "use2DFOV", 0x2DAC0D54u, 0x49ui64, 1ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_bool();
    Load_RegisterStructMemberSize("ScriptableStateUsableDef", 0x902D8E31, "int16_t", 0xD2EC8273, "hintBinding", 0x8D5175Au, 0x4Aui64, 2ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int16_t();
    Load_RegisterStructMemberSize("ScriptableStateUsableDef", 0x902D8E31, "scr_string_t", 0x3FD8616Du, "hintTag", 0x9E5526C5, 0x4Cui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_scr_string_t();
    Load_RegisterStructMemberSize("ScriptableStateUsableDef", 0x902D8E31, "XString", 0x6231894Bu, "hintString", 0xE1CE953C, 0x50ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("ScriptableStateUsableDef", 0x902D8E31, "XString", 0x6231894Bu, "hintStringDisabled", 0x4749E1B4u, 0x58ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("ScriptableStateUsableDef", 0x902D8E31, "XString", 0x6231894Bu, "hintIcon", 0x550736DCu, 0x60ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_XString();
    Load_RegisterStructMemberSize("ScriptableStateUsableDef", 0x902D8E31, "GfxImagePtr", 0x4A325366u, "hintIconImage", 0xD857207B, 0x68ui64, 8ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_GfxImagePtr();
  }
}

/*
==============
Load_ProcessStructLayout_Scriptable_Attackers
==============
*/
void Load_ProcessStructLayout_Scriptable_Attackers(void)
{
  Load_RegisterStructSize("Scriptable_Attackers", 0xCC02C3B8, 4ui64, 4ui64);
}

/*
==============
Load_ProcessStructLayout_Scriptable_DamageCause
==============
*/
void Load_ProcessStructLayout_Scriptable_DamageCause(void)
{
  Load_RegisterStructSize("Scriptable_DamageCause", 0xEC2D514C, 4ui64, 4ui64);
}

/*
==============
Load_ProcessStructLayout_Scriptable_EventSun_Data
==============
*/
void Load_ProcessStructLayout_Scriptable_EventSun_Data(void)
{
  if ( Load_RegisterStructSize("Scriptable_EventSun_Data", 0xFBAFB181, 0x34ui64, 4ui64) )
  {
    Load_RegisterStructMemberSize("Scriptable_EventSun_Data", 0xFBAFB181, "int", 0x7103F94Bu, "startTime", 0x84D5F30F, 0i64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("Scriptable_EventSun_Data", 0xFBAFB181, "int", 0x7103F94Bu, "transTime", 0x50DEFA19u, 4ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_int();
    Load_RegisterStructMemberSize("Scriptable_EventSun_Data", 0xFBAFB181, "vec3_t", 0x375A0610u, "startColorLinearSrgb", 0x4884422Au, 8ui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("Scriptable_EventSun_Data", 0xFBAFB181, "float", 0x9B987AFE, "startIntensity", 0xF9A3AE1F, 0x14ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("Scriptable_EventSun_Data", 0xFBAFB181, "float", 0x9B987AFE, "targetIntensity", 0xD72A0ACA, 0x18ui64, 4ui64, 0i64, 0, 0);
    Load_ProcessStructLayout_float();
    Load_RegisterStructMemberSize("Scriptable_EventSun_Data", 0xFBAFB181, "vec3_t", 0x375A0610u, "startAngles", 0xDAC2CE54, 0x1Cui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
    Load_RegisterStructMemberSize("Scriptable_EventSun_Data", 0xFBAFB181, "vec3_t", 0x375A0610u, "targetAngles", 0x941D9357, 0x28ui64, 0xCui64, 0i64, 0, 0);
    Load_ProcessStructLayout_vec3_t();
  }
}

/*
==============
Load_ProcessStructLayout_Scriptable_EventType
==============
*/
void Load_ProcessStructLayout_Scriptable_EventType(void)
{
  Load_RegisterStructSize("Scriptable_EventType", 0xF68FD60u, 4ui64, 4ui64);
}

/*
==============
Load_ProcessStructLayout_Scriptable_ImageId
==============
*/
void Load_ProcessStructLayout_Scriptable_ImageId(void)
{
  Load_RegisterStructSize("Scriptable_ImageId", 0x602B51B8u, 4ui64, 4ui64);
}

/*
==============
Load_ProcessStructLayout_Scriptable_MaterialOverrideType
==============
*/
void Load_ProcessStructLayout_Scriptable_MaterialOverrideType(void)
{
  Load_RegisterStructSize("Scriptable_MaterialOverrideType", 0x4C70DE7Bu, 4ui64, 4ui64);
}

/*
==============
Load_ProcessStructLayout_Scriptable_MayhemAction
==============
*/
void Load_ProcessStructLayout_Scriptable_MayhemAction(void)
{
  Load_RegisterStructSize("Scriptable_MayhemAction", 0x3E50A945u, 4ui64, 4ui64);
}

/*
==============
Load_ProcessStructLayout_Scriptable_ShaderParamType
==============
*/
void Load_ProcessStructLayout_Scriptable_ShaderParamType(void)
{
  Load_RegisterStructSize("Scriptable_ShaderParamType", 0x7EA62BAAu, 4ui64, 4ui64);
}

/*
==============
Load_ProcessStructLayout_Scriptable_StateType
==============
*/
void Load_ProcessStructLayout_Scriptable_StateType(void)
{
  Load_RegisterStructSize("Scriptable_StateType", 0x204EF9AFu, 4ui64, 4ui64);
}

/*
==============
Load_ProcessStructLayout_Scriptable_TeamFilter
==============
*/
void Load_ProcessStructLayout_Scriptable_TeamFilter(void)
{
  Load_RegisterStructSize("Scriptable_TeamFilter", 0x57BFD289u, 4ui64, 4ui64);
}

/*
==============
Load_ScriptableDamageTagOverride
==============
*/
void Load_ScriptableDamageTagOverride(const DBStreamStart streamStart)
{
  const char **v1; 
  scr_string_t *v2; 

  Load_Stream(streamStart, varScriptableDamageTagOverride, 0x10ui64);
  v1 = varXString;
  varXString = &varScriptableDamageTagOverride->tag;
  Load_XString(NotAtStart);
  varXString = v1;
  v2 = varscr_string_t;
  varscr_string_t = &varScriptableDamageTagOverride->scrTag;
  Load_scr_string_t(NotAtStart);
  varscr_string_t = v2;
}

/*
==============
Load_ScriptableDamageTagOverrideArray
==============
*/
void Load_ScriptableDamageTagOverrideArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableDamageTagOverride *i; 
  const char **v4; 
  scr_string_t *v5; 

  v2 = count;
  Load_Stream(streamStart, varScriptableDamageTagOverride, 16 * count);
  for ( i = varScriptableDamageTagOverride; v2; --v2 )
  {
    varScriptableDamageTagOverride = i;
    Load_Stream(NotAtStart, i, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableDamageTagOverride->tag;
    Load_XString(NotAtStart);
    varXString = v4;
    v5 = varscr_string_t;
    varscr_string_t = &varScriptableDamageTagOverride->scrTag;
    Load_scr_string_t(NotAtStart);
    ++i;
    varscr_string_t = v5;
  }
}

/*
==============
Load_ScriptableDamageTagOverrideStream
==============
*/
void Load_ScriptableDamageTagOverrideStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  const char **v4; 
  scr_string_t *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 24323, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableDamageTagOverride;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      v4 = varXString;
      varXString = &varScriptableDamageTagOverride->tag;
      Load_XString(NotAtStart);
      varXString = v4;
      v5 = varscr_string_t;
      varscr_string_t = &varScriptableDamageTagOverride->scrTag;
      Load_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableDamageTagOverride = (ScriptableDamageTagOverride *)g_streamPosGlob.pos;
      varscr_string_t = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableDataType
==============
*/
void Load_ScriptableDataType(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varScriptableDataType, 1ui64);
}

/*
==============
Load_ScriptableDataTypeArray
==============
*/
void Load_ScriptableDataTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varScriptableDataType, count);
}

/*
==============
Load_ScriptableDataTypeStream
==============
*/
void Load_ScriptableDataTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 9632, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableDataType;
    do
    {
      Load_Stream(AtStart, pos, 1ui64);
      pos = g_streamPosGlob.pos;
      varScriptableDataType = (ScriptableDataType *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableDef
==============
*/
void Load_ScriptableDef(const DBStreamStart streamStart)
{
  const char **v2; 
  ScriptableDef **v3; 
  ScriptableDef *v4; 
  ScriptablePartDef *parts; 
  ScriptablePartDef *v6; 
  __int64 numParts; 
  ScriptablePartDef *i; 
  scr_string_t *v9; 
  ScriptableDef *v10; 
  XModel **models; 
  XModel **v12; 
  XModel **XModelPtr; 

  DB_PatchMem_PushAsset(59, varScriptableDef);
  Load_Stream(streamStart, varScriptableDef, 0x78ui64);
  DB_PushStreamPos(8u);
  v2 = varXString;
  varXString = &varScriptableDef->name;
  Load_XString(NotAtStart);
  varXString = v2;
  v3 = varScriptableDefPtr;
  varScriptableDefPtr = &varScriptableDef->nextScriptableDef;
  Load_ScriptableDefPtr(NotAtStart);
  varScriptableDefPtr = v3;
  v4 = varScriptableDef;
  parts = varScriptableDef->parts;
  if ( parts )
  {
    if ( parts == (ScriptablePartDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( parts != (ScriptablePartDef *)-2i64 )
    {
      v4->parts = (ScriptablePartDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableDef->parts);
      goto LABEL_10;
    }
    v6 = varScriptablePartDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->parts = (ScriptablePartDef *)g_streamPosGlob.pos;
    varScriptablePartDef = (ScriptablePartDef *)g_streamPosGlob.pos;
    numParts = varScriptableDef->numParts;
    Load_Stream(AtStart, g_streamPosGlob.pos, 104 * numParts);
    for ( i = varScriptablePartDef; numParts; --numParts )
    {
      varScriptablePartDef = i;
      Load_ScriptablePartDef(NotAtStart);
      ++i;
    }
    varScriptablePartDef = v6;
    if ( parts == (ScriptablePartDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_10:
  v9 = varscr_string_t;
  varscr_string_t = &varScriptableDef->animationTreeName;
  Load_scr_string_t(NotAtStart);
  v10 = varScriptableDef;
  varscr_string_t = v9;
  models = varScriptableDef->models;
  if ( models )
  {
    if ( models == (XModel **)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( models != (XModel **)-2i64 )
    {
      v10->models = (XModel **)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableDef->models);
      goto LABEL_17;
    }
    v12 = varXModelPtr;
    XModelPtr = AllocLoad_XModelPtr();
    v10->models = XModelPtr;
    varXModelPtr = XModelPtr;
    Load_XModelPtrArray(AtStart, varScriptableDef->numXModels);
    varXModelPtr = v12;
    if ( models == (XModel **)-1i64 )
      DB_PopSharedData();
  }
LABEL_17:
  DB_PopStreamPos();
  DB_PatchMem_PopAsset();
}

/*
==============
Load_ScriptableDefArray
==============
*/
void Load_ScriptableDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableDef *i; 
  const char **v4; 
  ScriptableDef **v5; 
  ScriptableDef *v6; 
  ScriptablePartDef *parts; 
  ScriptablePartDef *v8; 
  __int64 numParts; 
  ScriptablePartDef *j; 
  scr_string_t *v11; 
  ScriptableDef *v12; 
  XModel **models; 
  XModel **v14; 
  XModel **XModelPtr; 

  v2 = count;
  Load_Stream(streamStart, varScriptableDef, 120 * count);
  for ( i = varScriptableDef; v2; --v2 )
  {
    varScriptableDef = i;
    DB_PatchMem_PushAsset(59, i);
    Load_Stream(NotAtStart, varScriptableDef, 0x78ui64);
    DB_PushStreamPos(8u);
    v4 = varXString;
    varXString = &varScriptableDef->name;
    Load_XString(NotAtStart);
    varXString = v4;
    v5 = varScriptableDefPtr;
    varScriptableDefPtr = &varScriptableDef->nextScriptableDef;
    Load_ScriptableDefPtr(NotAtStart);
    varScriptableDefPtr = v5;
    v6 = varScriptableDef;
    parts = varScriptableDef->parts;
    if ( !parts )
      goto LABEL_11;
    if ( parts == (ScriptablePartDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( parts != (ScriptablePartDef *)-2i64 )
    {
      v6->parts = (ScriptablePartDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableDef->parts);
      goto LABEL_11;
    }
    v8 = varScriptablePartDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v6->parts = (ScriptablePartDef *)g_streamPosGlob.pos;
    varScriptablePartDef = (ScriptablePartDef *)g_streamPosGlob.pos;
    numParts = varScriptableDef->numParts;
    Load_Stream(AtStart, g_streamPosGlob.pos, 104 * numParts);
    for ( j = varScriptablePartDef; numParts; --numParts )
    {
      varScriptablePartDef = j;
      Load_ScriptablePartDef(NotAtStart);
      ++j;
    }
    varScriptablePartDef = v8;
    if ( parts == (ScriptablePartDef *)-1i64 )
      DB_PopSharedData();
LABEL_11:
    v11 = varscr_string_t;
    varscr_string_t = &varScriptableDef->animationTreeName;
    Load_scr_string_t(NotAtStart);
    v12 = varScriptableDef;
    varscr_string_t = v11;
    models = varScriptableDef->models;
    if ( models )
    {
      if ( models == (XModel **)-1i64 )
      {
        DB_PushSharedData();
LABEL_16:
        v14 = varXModelPtr;
        XModelPtr = AllocLoad_XModelPtr();
        v12->models = XModelPtr;
        varXModelPtr = XModelPtr;
        Load_XModelPtrArray(AtStart, varScriptableDef->numXModels);
        varXModelPtr = v14;
        if ( models == (XModel **)-1i64 )
          DB_PopSharedData();
        goto LABEL_18;
      }
      if ( models == (XModel **)-2i64 )
        goto LABEL_16;
      v12->models = (XModel **)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableDef->models);
    }
LABEL_18:
    DB_PopStreamPos();
    DB_PatchMem_PopAsset();
    ++i;
  }
}

/*
==============
Load_ScriptableDefPtr
==============
*/
void Load_ScriptableDefPtr(const DBStreamStart streamStart)
{
  ScriptableDef **v1; 
  __int64 v2; 
  ScriptableDef *v3; 
  unsigned __int8 *inserted; 

  Load_Stream(streamStart, varScriptableDefPtr, 8ui64);
  DB_PushStreamPos(1u);
  v1 = varScriptableDefPtr;
  v2 = (__int64)*varScriptableDefPtr;
  if ( *varScriptableDefPtr )
  {
    if ( v2 == -1 )
    {
      DB_PushSharedData();
    }
    else if ( v2 != -2 && v2 != -3 )
    {
      DB_ConvertOffsetToAlias((unsigned __int64 *)varScriptableDefPtr);
      goto LABEL_6;
    }
    v3 = varScriptableDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    inserted = NULL;
    *v1 = (ScriptableDef *)g_streamPosGlob.pos;
    varScriptableDef = (ScriptableDef *)g_streamPosGlob.pos;
    if ( v2 == -3 )
      inserted = DB_InsertPointer();
    Load_ScriptableDef(AtStart);
    Load_ScriptableDefAsset(v1);
    varScriptableDef = v3;
    if ( inserted )
      *(_QWORD *)inserted = *v1;
    if ( v2 == -1 )
      DB_PopSharedData();
  }
LABEL_6:
  DB_PopStreamPos();
}

/*
==============
Load_ScriptableDefPtrArray
==============
*/
void Load_ScriptableDefPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableDef **i; 
  ScriptableDef **v4; 
  __int64 v5; 
  ScriptableDef *v6; 
  unsigned __int8 *inserted; 

  v2 = count;
  Load_Stream(streamStart, varScriptableDefPtr, 8 * count);
  for ( i = varScriptableDefPtr; v2; --v2 )
  {
    varScriptableDefPtr = i;
    Load_Stream(NotAtStart, i, 8ui64);
    DB_PushStreamPos(1u);
    v4 = varScriptableDefPtr;
    v5 = (__int64)*varScriptableDefPtr;
    if ( *varScriptableDefPtr )
    {
      if ( v5 == -1 )
      {
        DB_PushSharedData();
LABEL_8:
        v6 = varScriptableDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        inserted = NULL;
        *v4 = (ScriptableDef *)g_streamPosGlob.pos;
        varScriptableDef = (ScriptableDef *)g_streamPosGlob.pos;
        if ( v5 == -3 )
          inserted = DB_InsertPointer();
        Load_ScriptableDef(AtStart);
        Load_ScriptableDefAsset(v4);
        varScriptableDef = v6;
        if ( inserted )
          *(_QWORD *)inserted = *v4;
        if ( v5 == -1 )
          DB_PopSharedData();
        goto LABEL_14;
      }
      if ( v5 == -2 || v5 == -3 )
        goto LABEL_8;
      DB_ConvertOffsetToAlias((unsigned __int64 *)varScriptableDefPtr);
    }
LABEL_14:
    DB_PopStreamPos();
    ++i;
  }
}

/*
==============
Load_ScriptableDefPtrStream
==============
*/
void Load_ScriptableDefPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableDef **v4; 
  __int64 v5; 
  ScriptableDef *v6; 
  unsigned __int8 *inserted; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 25541, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableDefPtr;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      DB_PushStreamPos(1u);
      v4 = varScriptableDefPtr;
      v5 = (__int64)*varScriptableDefPtr;
      if ( *varScriptableDefPtr )
      {
        if ( v5 == -1 )
        {
          DB_PushSharedData();
LABEL_12:
          v6 = varScriptableDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          inserted = NULL;
          *v4 = (ScriptableDef *)g_streamPosGlob.pos;
          varScriptableDef = (ScriptableDef *)g_streamPosGlob.pos;
          if ( v5 == -3 )
            inserted = DB_InsertPointer();
          Load_ScriptableDef(AtStart);
          Load_ScriptableDefAsset(v4);
          varScriptableDef = v6;
          if ( inserted )
            *(_QWORD *)inserted = *v4;
          if ( v5 == -1 )
            DB_PopSharedData();
          goto LABEL_18;
        }
        if ( v5 == -2 || v5 == -3 )
          goto LABEL_12;
        DB_ConvertOffsetToAlias((unsigned __int64 *)varScriptableDefPtr);
      }
LABEL_18:
      DB_PopStreamPos();
      pos = g_streamPosGlob.pos;
      varScriptableDefPtr = (ScriptableDef **)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableDefStream
==============
*/
void Load_ScriptableDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  const char **v4; 
  ScriptableDef **v5; 
  ScriptableDef *v6; 
  ScriptablePartDef *parts; 
  ScriptablePartDef *v8; 
  __int64 numParts; 
  ScriptablePartDef *i; 
  scr_string_t *v11; 
  ScriptableDef *v12; 
  XModel **models; 
  XModel **v14; 
  XModel **XModelPtr; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 25417, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableDef;
    do
    {
      DB_PatchMem_PushAsset(59, pos);
      Load_Stream(AtStart, varScriptableDef, 0x78ui64);
      DB_PushStreamPos(8u);
      v4 = varXString;
      varXString = &varScriptableDef->name;
      Load_XString(NotAtStart);
      varXString = v4;
      v5 = varScriptableDefPtr;
      varScriptableDefPtr = &varScriptableDef->nextScriptableDef;
      Load_ScriptableDefPtr(NotAtStart);
      varScriptableDefPtr = v5;
      v6 = varScriptableDef;
      parts = varScriptableDef->parts;
      if ( !parts )
        goto LABEL_15;
      if ( parts == (ScriptablePartDef *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( parts != (ScriptablePartDef *)-2i64 )
      {
        v6->parts = (ScriptablePartDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableDef->parts);
        goto LABEL_15;
      }
      v8 = varScriptablePartDef;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      v6->parts = (ScriptablePartDef *)g_streamPosGlob.pos;
      varScriptablePartDef = (ScriptablePartDef *)g_streamPosGlob.pos;
      numParts = varScriptableDef->numParts;
      Load_Stream(AtStart, g_streamPosGlob.pos, 104 * numParts);
      for ( i = varScriptablePartDef; numParts; --numParts )
      {
        varScriptablePartDef = i;
        Load_ScriptablePartDef(NotAtStart);
        ++i;
      }
      varScriptablePartDef = v8;
      if ( parts == (ScriptablePartDef *)-1i64 )
        DB_PopSharedData();
LABEL_15:
      v11 = varscr_string_t;
      varscr_string_t = &varScriptableDef->animationTreeName;
      Load_scr_string_t(NotAtStart);
      v12 = varScriptableDef;
      varscr_string_t = v11;
      models = varScriptableDef->models;
      if ( models )
      {
        if ( models == (XModel **)-1i64 )
        {
          DB_PushSharedData();
LABEL_20:
          v14 = varXModelPtr;
          XModelPtr = AllocLoad_XModelPtr();
          v12->models = XModelPtr;
          varXModelPtr = XModelPtr;
          Load_XModelPtrArray(AtStart, varScriptableDef->numXModels);
          varXModelPtr = v14;
          if ( models == (XModel **)-1i64 )
            DB_PopSharedData();
          goto LABEL_22;
        }
        if ( models == (XModel **)-2i64 )
          goto LABEL_20;
        v12->models = (XModel **)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableDef->models);
      }
LABEL_22:
      DB_PopStreamPos();
      DB_PatchMem_PopAsset();
      pos = g_streamPosGlob.pos;
      varScriptableDef = (ScriptableDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventAddModelDef
==============
*/
void Load_ScriptableEventAddModelDef(const DBStreamStart streamStart)
{
  ScriptableEventAddModelDef *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 
  const char **v5; 
  scr_string_t *v6; 
  XModel **v7; 

  Load_Stream(streamStart, varScriptableEventAddModelDef, 0x20ui64);
  v1 = varScriptableEventAddModelDef;
  base = varScriptableEventAddModelDef->base;
  if ( varScriptableEventAddModelDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventAddModelDef->base);
      goto LABEL_8;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varScriptableEventBaseDef = v3;
    varXString = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v5 = varXString;
  varXString = &varScriptableEventAddModelDef->tagName;
  Load_XString(NotAtStart);
  varXString = v5;
  v6 = varscr_string_t;
  varscr_string_t = &varScriptableEventAddModelDef->scrTagName;
  Load_scr_string_t(NotAtStart);
  varscr_string_t = v6;
  v7 = varXModelPtr;
  varXModelPtr = &varScriptableEventAddModelDef->model;
  Load_XModelPtr(NotAtStart);
  varXModelPtr = v7;
}

/*
==============
Load_ScriptableEventAddModelDefArray
==============
*/
void Load_ScriptableEventAddModelDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventAddModelDef *i; 
  ScriptableEventAddModelDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  const char **v8; 
  scr_string_t *v9; 
  XModel **v10; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventAddModelDef, 32 * count);
  for ( i = varScriptableEventAddModelDef; v2; --v2 )
  {
    varScriptableEventAddModelDef = i;
    Load_Stream(NotAtStart, i, 0x20ui64);
    v4 = varScriptableEventAddModelDef;
    base = varScriptableEventAddModelDef->base;
    if ( varScriptableEventAddModelDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v7 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Load_XString(NotAtStart);
        varXString = v7;
        varScriptableEventBaseDef = v6;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventAddModelDef->base);
    }
LABEL_9:
    v8 = varXString;
    varXString = &varScriptableEventAddModelDef->tagName;
    Load_XString(NotAtStart);
    varXString = v8;
    v9 = varscr_string_t;
    varscr_string_t = &varScriptableEventAddModelDef->scrTagName;
    Load_scr_string_t(NotAtStart);
    varscr_string_t = v9;
    v10 = varXModelPtr;
    varXModelPtr = &varScriptableEventAddModelDef->model;
    Load_XModelPtr(NotAtStart);
    ++i;
    varXModelPtr = v10;
  }
}

/*
==============
Load_ScriptableEventAddModelDefStream
==============
*/
void Load_ScriptableEventAddModelDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventAddModelDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  const char **v8; 
  scr_string_t *v9; 
  XModel **v10; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 17730, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventAddModelDef;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      v4 = varScriptableEventAddModelDef;
      base = varScriptableEventAddModelDef->base;
      if ( varScriptableEventAddModelDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v7 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Load_XString(NotAtStart);
          varXString = v7;
          varScriptableEventBaseDef = v6;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
        v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventAddModelDef->base);
      }
LABEL_13:
      v8 = varXString;
      varXString = &varScriptableEventAddModelDef->tagName;
      Load_XString(NotAtStart);
      varXString = v8;
      v9 = varscr_string_t;
      varscr_string_t = &varScriptableEventAddModelDef->scrTagName;
      Load_scr_string_t(NotAtStart);
      varscr_string_t = v9;
      v10 = varXModelPtr;
      varXModelPtr = &varScriptableEventAddModelDef->model;
      Load_XModelPtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventAddModelDef = (ScriptableEventAddModelDef *)g_streamPosGlob.pos;
      varXModelPtr = v10;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventAnimationDef
==============
*/
void Load_ScriptableEventAnimationDef(const DBStreamStart streamStart)
{
  ScriptableEventAnimationDef *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 
  XAnimParts **v5; 
  ScriptableEventAnimationDef *v6; 
  ScriptableEventDef *eventsAtEnd; 
  ScriptableEventDef *v8; 

  Load_Stream(streamStart, varScriptableEventAnimationDef, 0x50ui64);
  v1 = varScriptableEventAnimationDef;
  base = varScriptableEventAnimationDef->base;
  if ( varScriptableEventAnimationDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventAnimationDef->base);
      goto LABEL_8;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varXString = v4;
    varScriptableEventBaseDef = v3;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v5 = varXAnimPartsPtr;
  varXAnimPartsPtr = &varScriptableEventAnimationDef->animation;
  Load_XAnimPartsPtr(NotAtStart);
  v6 = varScriptableEventAnimationDef;
  varXAnimPartsPtr = v5;
  eventsAtEnd = varScriptableEventAnimationDef->eventsAtEnd;
  if ( !eventsAtEnd )
    return;
  if ( eventsAtEnd == (ScriptableEventDef *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( eventsAtEnd != (ScriptableEventDef *)-2i64 )
  {
    v6->eventsAtEnd = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventAnimationDef->eventsAtEnd);
    return;
  }
  v8 = varScriptableEventDef;
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  v6->eventsAtEnd = (ScriptableEventDef *)g_streamPosGlob.pos;
  varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
  Load_ScriptableEventDefArray(AtStart, varScriptableEventAnimationDef->eventAtEndCount);
  varScriptableEventDef = v8;
  if ( eventsAtEnd == (ScriptableEventDef *)-1i64 )
    DB_PopSharedData();
}

/*
==============
Load_ScriptableEventAnimationDefArray
==============
*/
void Load_ScriptableEventAnimationDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventAnimationDef *i; 
  ScriptableEventAnimationDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  XAnimParts **v8; 
  ScriptableEventAnimationDef *v9; 
  ScriptableEventDef *eventsAtEnd; 
  ScriptableEventDef *v11; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventAnimationDef, 80 * count);
  for ( i = varScriptableEventAnimationDef; v2; --v2 )
  {
    varScriptableEventAnimationDef = i;
    Load_Stream(NotAtStart, i, 0x50ui64);
    v4 = varScriptableEventAnimationDef;
    base = varScriptableEventAnimationDef->base;
    if ( !varScriptableEventAnimationDef->base )
      goto LABEL_9;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventAnimationDef->base);
      goto LABEL_9;
    }
    v6 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v7 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varXString = v7;
    varScriptableEventBaseDef = v6;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
LABEL_9:
    v8 = varXAnimPartsPtr;
    varXAnimPartsPtr = &varScriptableEventAnimationDef->animation;
    Load_XAnimPartsPtr(NotAtStart);
    v9 = varScriptableEventAnimationDef;
    varXAnimPartsPtr = v8;
    eventsAtEnd = varScriptableEventAnimationDef->eventsAtEnd;
    if ( eventsAtEnd )
    {
      if ( eventsAtEnd == (ScriptableEventDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_14:
        v11 = varScriptableEventDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v9->eventsAtEnd = (ScriptableEventDef *)g_streamPosGlob.pos;
        varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
        Load_ScriptableEventDefArray(AtStart, varScriptableEventAnimationDef->eventAtEndCount);
        varScriptableEventDef = v11;
        if ( eventsAtEnd == (ScriptableEventDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_16;
      }
      if ( eventsAtEnd == (ScriptableEventDef *)-2i64 )
        goto LABEL_14;
      v9->eventsAtEnd = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventAnimationDef->eventsAtEnd);
    }
LABEL_16:
    ++i;
  }
}

/*
==============
Load_ScriptableEventAnimationDefStream
==============
*/
void Load_ScriptableEventAnimationDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventAnimationDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  XAnimParts **v8; 
  ScriptableEventAnimationDef *v9; 
  ScriptableEventDef *eventsAtEnd; 
  ScriptableEventDef *v11; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 10704, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventAnimationDef;
    do
    {
      Load_Stream(AtStart, pos, 0x50ui64);
      v4 = varScriptableEventAnimationDef;
      base = varScriptableEventAnimationDef->base;
      if ( !varScriptableEventAnimationDef->base )
        goto LABEL_13;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( base != (ScriptableEventBaseDef *)-2i64 )
      {
        v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventAnimationDef->base);
        goto LABEL_13;
      }
      v6 = varScriptableEventBaseDef;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
      varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
      v7 = varXString;
      varXString = &varScriptableEventBaseDef->name;
      Load_XString(NotAtStart);
      varXString = v7;
      varScriptableEventBaseDef = v6;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        DB_PopSharedData();
LABEL_13:
      v8 = varXAnimPartsPtr;
      varXAnimPartsPtr = &varScriptableEventAnimationDef->animation;
      Load_XAnimPartsPtr(NotAtStart);
      v9 = varScriptableEventAnimationDef;
      varXAnimPartsPtr = v8;
      eventsAtEnd = varScriptableEventAnimationDef->eventsAtEnd;
      if ( eventsAtEnd )
      {
        if ( eventsAtEnd == (ScriptableEventDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_18:
          v11 = varScriptableEventDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v9->eventsAtEnd = (ScriptableEventDef *)g_streamPosGlob.pos;
          varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
          Load_ScriptableEventDefArray(AtStart, varScriptableEventAnimationDef->eventAtEndCount);
          varScriptableEventDef = v11;
          if ( eventsAtEnd == (ScriptableEventDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_20;
        }
        if ( eventsAtEnd == (ScriptableEventDef *)-2i64 )
          goto LABEL_18;
        v9->eventsAtEnd = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventAnimationDef->eventsAtEnd);
      }
LABEL_20:
      pos = g_streamPosGlob.pos;
      varScriptableEventAnimationDef = (ScriptableEventAnimationDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventAnonymousDef
==============
*/
void Load_ScriptableEventAnonymousDef(const DBStreamStart streamStart)
{
  ScriptableEventAnonymousDef *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 

  Load_Stream(streamStart, varScriptableEventAnonymousDef, 0x98ui64);
  v1 = varScriptableEventAnonymousDef;
  base = varScriptableEventAnonymousDef->base;
  if ( varScriptableEventAnonymousDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventAnonymousDef->base);
      return;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varScriptableEventBaseDef = v3;
    varXString = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Load_ScriptableEventAnonymousDefArray
==============
*/
void Load_ScriptableEventAnonymousDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventAnonymousDef *i; 
  ScriptableEventAnonymousDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventAnonymousDef, 152 * count);
  for ( i = varScriptableEventAnonymousDef; v2; --v2 )
  {
    varScriptableEventAnonymousDef = i;
    Load_Stream(NotAtStart, i, 0x98ui64);
    v4 = varScriptableEventAnonymousDef;
    base = varScriptableEventAnonymousDef->base;
    if ( varScriptableEventAnonymousDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v7 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Load_XString(NotAtStart);
        varXString = v7;
        varScriptableEventBaseDef = v6;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventAnonymousDef->base);
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Load_ScriptableEventAnonymousDefStream
==============
*/
void Load_ScriptableEventAnonymousDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventAnonymousDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 8554, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventAnonymousDef;
    do
    {
      Load_Stream(AtStart, pos, 0x98ui64);
      v4 = varScriptableEventAnonymousDef;
      base = varScriptableEventAnonymousDef->base;
      if ( varScriptableEventAnonymousDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v7 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Load_XString(NotAtStart);
          varXString = v7;
          varScriptableEventBaseDef = v6;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
        v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventAnonymousDef->base);
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableEventAnonymousDef = (ScriptableEventAnonymousDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventApplyAngularForceDef
==============
*/
void Load_ScriptableEventApplyAngularForceDef(const DBStreamStart streamStart)
{
  ScriptableEventApplyAngularForceDef *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 

  Load_Stream(streamStart, varScriptableEventApplyAngularForceDef, 0x28ui64);
  v1 = varScriptableEventApplyAngularForceDef;
  base = varScriptableEventApplyAngularForceDef->base;
  if ( varScriptableEventApplyAngularForceDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventApplyAngularForceDef->base);
      return;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varScriptableEventBaseDef = v3;
    varXString = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Load_ScriptableEventApplyAngularForceDefArray
==============
*/
void Load_ScriptableEventApplyAngularForceDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventApplyAngularForceDef *i; 
  ScriptableEventApplyAngularForceDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventApplyAngularForceDef, 40 * count);
  for ( i = varScriptableEventApplyAngularForceDef; v2; --v2 )
  {
    varScriptableEventApplyAngularForceDef = i;
    Load_Stream(NotAtStart, i, 0x28ui64);
    v4 = varScriptableEventApplyAngularForceDef;
    base = varScriptableEventApplyAngularForceDef->base;
    if ( varScriptableEventApplyAngularForceDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v7 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Load_XString(NotAtStart);
        varXString = v7;
        varScriptableEventBaseDef = v6;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventApplyAngularForceDef->base);
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Load_ScriptableEventApplyAngularForceDefStream
==============
*/
void Load_ScriptableEventApplyAngularForceDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventApplyAngularForceDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 18178, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventApplyAngularForceDef;
    do
    {
      Load_Stream(AtStart, pos, 0x28ui64);
      v4 = varScriptableEventApplyAngularForceDef;
      base = varScriptableEventApplyAngularForceDef->base;
      if ( varScriptableEventApplyAngularForceDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v7 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Load_XString(NotAtStart);
          varXString = v7;
          varScriptableEventBaseDef = v6;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
        v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventApplyAngularForceDef->base);
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableEventApplyAngularForceDef = (ScriptableEventApplyAngularForceDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventApplyConstantAngularForceDef
==============
*/
void Load_ScriptableEventApplyConstantAngularForceDef(const DBStreamStart streamStart)
{
  ScriptableEventApplyConstantAngularForceDef *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 

  Load_Stream(streamStart, varScriptableEventApplyConstantAngularForceDef, 0x28ui64);
  v1 = varScriptableEventApplyConstantAngularForceDef;
  base = varScriptableEventApplyConstantAngularForceDef->base;
  if ( varScriptableEventApplyConstantAngularForceDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventApplyConstantAngularForceDef->base);
      return;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varScriptableEventBaseDef = v3;
    varXString = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Load_ScriptableEventApplyConstantAngularForceDefArray
==============
*/
void Load_ScriptableEventApplyConstantAngularForceDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventApplyConstantAngularForceDef *i; 
  ScriptableEventApplyConstantAngularForceDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventApplyConstantAngularForceDef, 40 * count);
  for ( i = varScriptableEventApplyConstantAngularForceDef; v2; --v2 )
  {
    varScriptableEventApplyConstantAngularForceDef = i;
    Load_Stream(NotAtStart, i, 0x28ui64);
    v4 = varScriptableEventApplyConstantAngularForceDef;
    base = varScriptableEventApplyConstantAngularForceDef->base;
    if ( varScriptableEventApplyConstantAngularForceDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v7 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Load_XString(NotAtStart);
        varXString = v7;
        varScriptableEventBaseDef = v6;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventApplyConstantAngularForceDef->base);
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Load_ScriptableEventApplyConstantAngularForceDefStream
==============
*/
void Load_ScriptableEventApplyConstantAngularForceDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventApplyConstantAngularForceDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 18718, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventApplyConstantAngularForceDef;
    do
    {
      Load_Stream(AtStart, pos, 0x28ui64);
      v4 = varScriptableEventApplyConstantAngularForceDef;
      base = varScriptableEventApplyConstantAngularForceDef->base;
      if ( varScriptableEventApplyConstantAngularForceDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v7 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Load_XString(NotAtStart);
          varXString = v7;
          varScriptableEventBaseDef = v6;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
        v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventApplyConstantAngularForceDef->base);
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableEventApplyConstantAngularForceDef = (ScriptableEventApplyConstantAngularForceDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventApplyConstantForceDef
==============
*/
void Load_ScriptableEventApplyConstantForceDef(const DBStreamStart streamStart)
{
  ScriptableEventApplyConstantForceDef *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 

  Load_Stream(streamStart, varScriptableEventApplyConstantForceDef, 0x40ui64);
  v1 = varScriptableEventApplyConstantForceDef;
  base = varScriptableEventApplyConstantForceDef->base;
  if ( varScriptableEventApplyConstantForceDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventApplyConstantForceDef->base);
      return;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varScriptableEventBaseDef = v3;
    varXString = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Load_ScriptableEventApplyConstantForceDefArray
==============
*/
void Load_ScriptableEventApplyConstantForceDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventApplyConstantForceDef *i; 
  ScriptableEventApplyConstantForceDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventApplyConstantForceDef, count << 6);
  for ( i = varScriptableEventApplyConstantForceDef; v2; --v2 )
  {
    varScriptableEventApplyConstantForceDef = i;
    Load_Stream(NotAtStart, i, 0x40ui64);
    v4 = varScriptableEventApplyConstantForceDef;
    base = varScriptableEventApplyConstantForceDef->base;
    if ( varScriptableEventApplyConstantForceDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v7 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Load_XString(NotAtStart);
        varXString = v7;
        varScriptableEventBaseDef = v6;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventApplyConstantForceDef->base);
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Load_ScriptableEventApplyConstantForceDefStream
==============
*/
void Load_ScriptableEventApplyConstantForceDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventApplyConstantForceDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 18471, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventApplyConstantForceDef;
    do
    {
      Load_Stream(AtStart, pos, 0x40ui64);
      v4 = varScriptableEventApplyConstantForceDef;
      base = varScriptableEventApplyConstantForceDef->base;
      if ( varScriptableEventApplyConstantForceDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v7 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Load_XString(NotAtStart);
          varXString = v7;
          varScriptableEventBaseDef = v6;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
        v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventApplyConstantForceDef->base);
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableEventApplyConstantForceDef = (ScriptableEventApplyConstantForceDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventApplyForceDef
==============
*/
void Load_ScriptableEventApplyForceDef(const DBStreamStart streamStart)
{
  ScriptableEventApplyForceDef *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 

  Load_Stream(streamStart, varScriptableEventApplyForceDef, 0x40ui64);
  v1 = varScriptableEventApplyForceDef;
  base = varScriptableEventApplyForceDef->base;
  if ( varScriptableEventApplyForceDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventApplyForceDef->base);
      return;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varScriptableEventBaseDef = v3;
    varXString = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Load_ScriptableEventApplyForceDefArray
==============
*/
void Load_ScriptableEventApplyForceDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventApplyForceDef *i; 
  ScriptableEventApplyForceDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventApplyForceDef, count << 6);
  for ( i = varScriptableEventApplyForceDef; v2; --v2 )
  {
    varScriptableEventApplyForceDef = i;
    Load_Stream(NotAtStart, i, 0x40ui64);
    v4 = varScriptableEventApplyForceDef;
    base = varScriptableEventApplyForceDef->base;
    if ( varScriptableEventApplyForceDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v7 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Load_XString(NotAtStart);
        varXString = v7;
        varScriptableEventBaseDef = v6;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventApplyForceDef->base);
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Load_ScriptableEventApplyForceDefStream
==============
*/
void Load_ScriptableEventApplyForceDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventApplyForceDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 17977, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventApplyForceDef;
    do
    {
      Load_Stream(AtStart, pos, 0x40ui64);
      v4 = varScriptableEventApplyForceDef;
      base = varScriptableEventApplyForceDef->base;
      if ( varScriptableEventApplyForceDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v7 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Load_XString(NotAtStart);
          varXString = v7;
          varScriptableEventBaseDef = v6;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
        v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventApplyForceDef->base);
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableEventApplyForceDef = (ScriptableEventApplyForceDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventBaseDef
==============
*/
void Load_ScriptableEventBaseDef(const DBStreamStart streamStart)
{
  const char **v1; 

  Load_Stream(streamStart, varScriptableEventBaseDef, 0x10ui64);
  v1 = varXString;
  varXString = &varScriptableEventBaseDef->name;
  Load_XString(NotAtStart);
  varXString = v1;
}

/*
==============
Load_ScriptableEventBaseDefArray
==============
*/
void Load_ScriptableEventBaseDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventBaseDef *i; 
  const char **v4; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventBaseDef, 16 * count);
  for ( i = varScriptableEventBaseDef; v2; --v2 )
  {
    varScriptableEventBaseDef = i;
    Load_Stream(NotAtStart, i, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    ++i;
    varXString = v4;
  }
}

/*
==============
Load_ScriptableEventBaseDefStream
==============
*/
void Load_ScriptableEventBaseDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  const char **v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 8422, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventBaseDef;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      v4 = varXString;
      varXString = &varScriptableEventBaseDef->name;
      Load_XString(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
      varXString = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventChunkDynentDef
==============
*/
void Load_ScriptableEventChunkDynentDef(const DBStreamStart streamStart)
{
  ScriptableEventChunkDynentDef *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 

  Load_Stream(streamStart, varScriptableEventChunkDynentDef, 0x30ui64);
  v1 = varScriptableEventChunkDynentDef;
  base = varScriptableEventChunkDynentDef->base;
  if ( varScriptableEventChunkDynentDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventChunkDynentDef->base);
      return;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varScriptableEventBaseDef = v3;
    varXString = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Load_ScriptableEventChunkDynentDefArray
==============
*/
void Load_ScriptableEventChunkDynentDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventChunkDynentDef *i; 
  ScriptableEventChunkDynentDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventChunkDynentDef, 48 * count);
  for ( i = varScriptableEventChunkDynentDef; v2; --v2 )
  {
    varScriptableEventChunkDynentDef = i;
    Load_Stream(NotAtStart, i, 0x30ui64);
    v4 = varScriptableEventChunkDynentDef;
    base = varScriptableEventChunkDynentDef->base;
    if ( varScriptableEventChunkDynentDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v7 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Load_XString(NotAtStart);
        varXString = v7;
        varScriptableEventBaseDef = v6;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventChunkDynentDef->base);
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Load_ScriptableEventChunkDynentDefStream
==============
*/
void Load_ScriptableEventChunkDynentDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventChunkDynentDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 11517, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventChunkDynentDef;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      v4 = varScriptableEventChunkDynentDef;
      base = varScriptableEventChunkDynentDef->base;
      if ( varScriptableEventChunkDynentDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v7 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Load_XString(NotAtStart);
          varXString = v7;
          varScriptableEventBaseDef = v6;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
        v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventChunkDynentDef->base);
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableEventChunkDynentDef = (ScriptableEventChunkDynentDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventClientViewSelectorDef
==============
*/
void Load_ScriptableEventClientViewSelectorDef(const DBStreamStart streamStart)
{
  ScriptableEventClientViewSelectorDef *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 
  ScriptableEventClientViewSelectorDef *v5; 
  ScriptableEventDef *events1p; 
  ScriptableEventDef *v7; 
  ScriptableEventClientViewSelectorDef *v8; 
  ScriptableEventDef *events3p; 
  ScriptableEventDef *v10; 

  Load_Stream(streamStart, varScriptableEventClientViewSelectorDef, 0x30ui64);
  v1 = varScriptableEventClientViewSelectorDef;
  base = varScriptableEventClientViewSelectorDef->base;
  if ( varScriptableEventClientViewSelectorDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventClientViewSelectorDef->base);
      goto LABEL_8;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varXString = v4;
    varScriptableEventBaseDef = v3;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v5 = varScriptableEventClientViewSelectorDef;
  events1p = varScriptableEventClientViewSelectorDef->events1p;
  if ( !events1p )
    goto LABEL_15;
  if ( events1p == (ScriptableEventDef *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( events1p != (ScriptableEventDef *)-2i64 )
  {
    v5->events1p = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventClientViewSelectorDef->events1p);
    goto LABEL_15;
  }
  v7 = varScriptableEventDef;
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  v5->events1p = (ScriptableEventDef *)g_streamPosGlob.pos;
  varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
  Load_ScriptableEventDefArray(AtStart, varScriptableEventClientViewSelectorDef->event1pCount);
  varScriptableEventDef = v7;
  if ( events1p == (ScriptableEventDef *)-1i64 )
    DB_PopSharedData();
LABEL_15:
  v8 = varScriptableEventClientViewSelectorDef;
  events3p = varScriptableEventClientViewSelectorDef->events3p;
  if ( !events3p )
    return;
  if ( events3p == (ScriptableEventDef *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( events3p != (ScriptableEventDef *)-2i64 )
  {
    v8->events3p = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventClientViewSelectorDef->events3p);
    return;
  }
  v10 = varScriptableEventDef;
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  v8->events3p = (ScriptableEventDef *)g_streamPosGlob.pos;
  varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
  Load_ScriptableEventDefArray(AtStart, varScriptableEventClientViewSelectorDef->event3pCount);
  varScriptableEventDef = v10;
  if ( events3p == (ScriptableEventDef *)-1i64 )
    DB_PopSharedData();
}

/*
==============
Load_ScriptableEventClientViewSelectorDefArray
==============
*/
void Load_ScriptableEventClientViewSelectorDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventClientViewSelectorDef *i; 
  ScriptableEventClientViewSelectorDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  ScriptableEventClientViewSelectorDef *v8; 
  ScriptableEventDef *events1p; 
  ScriptableEventDef *v10; 
  ScriptableEventClientViewSelectorDef *v11; 
  ScriptableEventDef *events3p; 
  ScriptableEventDef *v13; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventClientViewSelectorDef, 48 * count);
  for ( i = varScriptableEventClientViewSelectorDef; v2; --v2 )
  {
    varScriptableEventClientViewSelectorDef = i;
    Load_Stream(NotAtStart, i, 0x30ui64);
    v4 = varScriptableEventClientViewSelectorDef;
    base = varScriptableEventClientViewSelectorDef->base;
    if ( !varScriptableEventClientViewSelectorDef->base )
      goto LABEL_9;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventClientViewSelectorDef->base);
      goto LABEL_9;
    }
    v6 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v7 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varXString = v7;
    varScriptableEventBaseDef = v6;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
LABEL_9:
    v8 = varScriptableEventClientViewSelectorDef;
    events1p = varScriptableEventClientViewSelectorDef->events1p;
    if ( !events1p )
      goto LABEL_16;
    if ( events1p == (ScriptableEventDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( events1p != (ScriptableEventDef *)-2i64 )
    {
      v8->events1p = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventClientViewSelectorDef->events1p);
      goto LABEL_16;
    }
    v10 = varScriptableEventDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v8->events1p = (ScriptableEventDef *)g_streamPosGlob.pos;
    varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
    Load_ScriptableEventDefArray(AtStart, varScriptableEventClientViewSelectorDef->event1pCount);
    varScriptableEventDef = v10;
    if ( events1p == (ScriptableEventDef *)-1i64 )
      DB_PopSharedData();
LABEL_16:
    v11 = varScriptableEventClientViewSelectorDef;
    events3p = varScriptableEventClientViewSelectorDef->events3p;
    if ( events3p )
    {
      if ( events3p == (ScriptableEventDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_21:
        v13 = varScriptableEventDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v11->events3p = (ScriptableEventDef *)g_streamPosGlob.pos;
        varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
        Load_ScriptableEventDefArray(AtStart, varScriptableEventClientViewSelectorDef->event3pCount);
        varScriptableEventDef = v13;
        if ( events3p == (ScriptableEventDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_23;
      }
      if ( events3p == (ScriptableEventDef *)-2i64 )
        goto LABEL_21;
      v11->events3p = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventClientViewSelectorDef->events3p);
    }
LABEL_23:
    ++i;
  }
}

/*
==============
Load_ScriptableEventClientViewSelectorDefStream
==============
*/
void Load_ScriptableEventClientViewSelectorDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventClientViewSelectorDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  ScriptableEventClientViewSelectorDef *v8; 
  ScriptableEventDef *events1p; 
  ScriptableEventDef *v10; 
  ScriptableEventClientViewSelectorDef *v11; 
  ScriptableEventDef *events3p; 
  ScriptableEventDef *v13; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 17195, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventClientViewSelectorDef;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      v4 = varScriptableEventClientViewSelectorDef;
      base = varScriptableEventClientViewSelectorDef->base;
      if ( !varScriptableEventClientViewSelectorDef->base )
        goto LABEL_13;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( base != (ScriptableEventBaseDef *)-2i64 )
      {
        v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventClientViewSelectorDef->base);
        goto LABEL_13;
      }
      v6 = varScriptableEventBaseDef;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
      varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
      v7 = varXString;
      varXString = &varScriptableEventBaseDef->name;
      Load_XString(NotAtStart);
      varXString = v7;
      varScriptableEventBaseDef = v6;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        DB_PopSharedData();
LABEL_13:
      v8 = varScriptableEventClientViewSelectorDef;
      events1p = varScriptableEventClientViewSelectorDef->events1p;
      if ( !events1p )
        goto LABEL_20;
      if ( events1p == (ScriptableEventDef *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( events1p != (ScriptableEventDef *)-2i64 )
      {
        v8->events1p = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventClientViewSelectorDef->events1p);
        goto LABEL_20;
      }
      v10 = varScriptableEventDef;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      v8->events1p = (ScriptableEventDef *)g_streamPosGlob.pos;
      varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
      Load_ScriptableEventDefArray(AtStart, varScriptableEventClientViewSelectorDef->event1pCount);
      varScriptableEventDef = v10;
      if ( events1p == (ScriptableEventDef *)-1i64 )
        DB_PopSharedData();
LABEL_20:
      v11 = varScriptableEventClientViewSelectorDef;
      events3p = varScriptableEventClientViewSelectorDef->events3p;
      if ( events3p )
      {
        if ( events3p == (ScriptableEventDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_25:
          v13 = varScriptableEventDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v11->events3p = (ScriptableEventDef *)g_streamPosGlob.pos;
          varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
          Load_ScriptableEventDefArray(AtStart, varScriptableEventClientViewSelectorDef->event3pCount);
          varScriptableEventDef = v13;
          if ( events3p == (ScriptableEventDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_27;
        }
        if ( events3p == (ScriptableEventDef *)-2i64 )
          goto LABEL_25;
        v11->events3p = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventClientViewSelectorDef->events3p);
      }
LABEL_27:
      pos = g_streamPosGlob.pos;
      varScriptableEventClientViewSelectorDef = (ScriptableEventClientViewSelectorDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventCollisionDef
==============
*/
void Load_ScriptableEventCollisionDef(const DBStreamStart streamStart)
{
  ScriptableEventCollisionDef *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 
  const char **v5; 
  XModel **v6; 

  Load_Stream(streamStart, varScriptableEventCollisionDef, 0x28ui64);
  v1 = varScriptableEventCollisionDef;
  base = varScriptableEventCollisionDef->base;
  if ( varScriptableEventCollisionDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventCollisionDef->base);
      goto LABEL_8;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varScriptableEventBaseDef = v3;
    varXString = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v5 = varXString;
  varXString = &varScriptableEventCollisionDef->collmapName;
  Load_XString(NotAtStart);
  varXString = v5;
  v6 = varXModelPtr;
  varXModelPtr = &varScriptableEventCollisionDef->model;
  Load_XModelPtr(NotAtStart);
  varXModelPtr = v6;
}

/*
==============
Load_ScriptableEventCollisionDefArray
==============
*/
void Load_ScriptableEventCollisionDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventCollisionDef *i; 
  ScriptableEventCollisionDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  const char **v8; 
  XModel **v9; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventCollisionDef, 40 * count);
  for ( i = varScriptableEventCollisionDef; v2; --v2 )
  {
    varScriptableEventCollisionDef = i;
    Load_Stream(NotAtStart, i, 0x28ui64);
    v4 = varScriptableEventCollisionDef;
    base = varScriptableEventCollisionDef->base;
    if ( varScriptableEventCollisionDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v7 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Load_XString(NotAtStart);
        varXString = v7;
        varScriptableEventBaseDef = v6;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventCollisionDef->base);
    }
LABEL_9:
    v8 = varXString;
    varXString = &varScriptableEventCollisionDef->collmapName;
    Load_XString(NotAtStart);
    varXString = v8;
    v9 = varXModelPtr;
    varXModelPtr = &varScriptableEventCollisionDef->model;
    Load_XModelPtr(NotAtStart);
    ++i;
    varXModelPtr = v9;
  }
}

/*
==============
Load_ScriptableEventCollisionDefStream
==============
*/
void Load_ScriptableEventCollisionDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventCollisionDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  const char **v8; 
  XModel **v9; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 10218, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventCollisionDef;
    do
    {
      Load_Stream(AtStart, pos, 0x28ui64);
      v4 = varScriptableEventCollisionDef;
      base = varScriptableEventCollisionDef->base;
      if ( varScriptableEventCollisionDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v7 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Load_XString(NotAtStart);
          varXString = v7;
          varScriptableEventBaseDef = v6;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
        v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventCollisionDef->base);
      }
LABEL_13:
      v8 = varXString;
      varXString = &varScriptableEventCollisionDef->collmapName;
      Load_XString(NotAtStart);
      varXString = v8;
      v9 = varXModelPtr;
      varXModelPtr = &varScriptableEventCollisionDef->model;
      Load_XModelPtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventCollisionDef = (ScriptableEventCollisionDef *)g_streamPosGlob.pos;
      varXModelPtr = v9;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventCompassIconDef
==============
*/
void Load_ScriptableEventCompassIconDef(const DBStreamStart streamStart)
{
  ScriptableEventCompassIconDef *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 
  Material **v5; 

  Load_Stream(streamStart, varScriptableEventCompassIconDef, 0x98ui64);
  v1 = varScriptableEventCompassIconDef;
  base = varScriptableEventCompassIconDef->base;
  if ( varScriptableEventCompassIconDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventCompassIconDef->base);
      goto LABEL_8;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varScriptableEventBaseDef = v3;
    varXString = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v5 = varMaterialHandle;
  varMaterialHandle = &varScriptableEventCompassIconDef->friendlyArrow;
  Load_MaterialHandle(NotAtStart);
  varMaterialHandle = &varScriptableEventCompassIconDef->friendlyFiring;
  Load_MaterialHandle(NotAtStart);
  varMaterialHandle = &varScriptableEventCompassIconDef->friendlyChatting;
  Load_MaterialHandle(NotAtStart);
  varMaterialHandle = &varScriptableEventCompassIconDef->friendlyYelling;
  Load_MaterialHandle(NotAtStart);
  varMaterialHandle = &varScriptableEventCompassIconDef->partyArrow;
  Load_MaterialHandle(NotAtStart);
  varMaterialHandle = &varScriptableEventCompassIconDef->partyFiring;
  Load_MaterialHandle(NotAtStart);
  varMaterialHandle = &varScriptableEventCompassIconDef->partyChatting;
  Load_MaterialHandle(NotAtStart);
  varMaterialHandle = &varScriptableEventCompassIconDef->partyYelling;
  Load_MaterialHandle(NotAtStart);
  varMaterialHandle = &varScriptableEventCompassIconDef->squadArrow;
  Load_MaterialHandle(NotAtStart);
  varMaterialHandle = &varScriptableEventCompassIconDef->squadFiring;
  Load_MaterialHandle(NotAtStart);
  varMaterialHandle = varScriptableEventCompassIconDef->enemyCompassIconQuiet;
  Load_MaterialHandleArray(NotAtStart, 3ui64);
  varMaterialHandle = varScriptableEventCompassIconDef->enemyCompassIconFiring;
  Load_MaterialHandleArray(NotAtStart, 3ui64);
  varMaterialHandle = &varScriptableEventCompassIconDef->enemyCompassIconDirectional;
  Load_MaterialHandle(NotAtStart);
  varMaterialHandle = v5;
}

/*
==============
Load_ScriptableEventCompassIconDefArray
==============
*/
void Load_ScriptableEventCompassIconDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventCompassIconDef *i; 
  ScriptableEventCompassIconDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  Material **v8; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventCompassIconDef, 152 * count);
  for ( i = varScriptableEventCompassIconDef; v2; --v2 )
  {
    varScriptableEventCompassIconDef = i;
    Load_Stream(NotAtStart, i, 0x98ui64);
    v4 = varScriptableEventCompassIconDef;
    base = varScriptableEventCompassIconDef->base;
    if ( varScriptableEventCompassIconDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v7 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Load_XString(NotAtStart);
        varXString = v7;
        varScriptableEventBaseDef = v6;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventCompassIconDef->base);
    }
LABEL_9:
    v8 = varMaterialHandle;
    varMaterialHandle = &varScriptableEventCompassIconDef->friendlyArrow;
    Load_MaterialHandle(NotAtStart);
    varMaterialHandle = &varScriptableEventCompassIconDef->friendlyFiring;
    Load_MaterialHandle(NotAtStart);
    varMaterialHandle = &varScriptableEventCompassIconDef->friendlyChatting;
    Load_MaterialHandle(NotAtStart);
    varMaterialHandle = &varScriptableEventCompassIconDef->friendlyYelling;
    Load_MaterialHandle(NotAtStart);
    varMaterialHandle = &varScriptableEventCompassIconDef->partyArrow;
    Load_MaterialHandle(NotAtStart);
    varMaterialHandle = &varScriptableEventCompassIconDef->partyFiring;
    Load_MaterialHandle(NotAtStart);
    varMaterialHandle = &varScriptableEventCompassIconDef->partyChatting;
    Load_MaterialHandle(NotAtStart);
    varMaterialHandle = &varScriptableEventCompassIconDef->partyYelling;
    Load_MaterialHandle(NotAtStart);
    varMaterialHandle = &varScriptableEventCompassIconDef->squadArrow;
    Load_MaterialHandle(NotAtStart);
    varMaterialHandle = &varScriptableEventCompassIconDef->squadFiring;
    Load_MaterialHandle(NotAtStart);
    varMaterialHandle = varScriptableEventCompassIconDef->enemyCompassIconQuiet;
    Load_MaterialHandleArray(NotAtStart, 3ui64);
    varMaterialHandle = varScriptableEventCompassIconDef->enemyCompassIconFiring;
    Load_MaterialHandleArray(NotAtStart, 3ui64);
    varMaterialHandle = &varScriptableEventCompassIconDef->enemyCompassIconDirectional;
    Load_MaterialHandle(NotAtStart);
    ++i;
    varMaterialHandle = v8;
  }
}

/*
==============
Load_ScriptableEventCompassIconDefStream
==============
*/
void Load_ScriptableEventCompassIconDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventCompassIconDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  Material **v8; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 13412, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventCompassIconDef;
    do
    {
      Load_Stream(AtStart, pos, 0x98ui64);
      v4 = varScriptableEventCompassIconDef;
      base = varScriptableEventCompassIconDef->base;
      if ( varScriptableEventCompassIconDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v7 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Load_XString(NotAtStart);
          varXString = v7;
          varScriptableEventBaseDef = v6;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
        v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventCompassIconDef->base);
      }
LABEL_13:
      v8 = varMaterialHandle;
      varMaterialHandle = &varScriptableEventCompassIconDef->friendlyArrow;
      Load_MaterialHandle(NotAtStart);
      varMaterialHandle = &varScriptableEventCompassIconDef->friendlyFiring;
      Load_MaterialHandle(NotAtStart);
      varMaterialHandle = &varScriptableEventCompassIconDef->friendlyChatting;
      Load_MaterialHandle(NotAtStart);
      varMaterialHandle = &varScriptableEventCompassIconDef->friendlyYelling;
      Load_MaterialHandle(NotAtStart);
      varMaterialHandle = &varScriptableEventCompassIconDef->partyArrow;
      Load_MaterialHandle(NotAtStart);
      varMaterialHandle = &varScriptableEventCompassIconDef->partyFiring;
      Load_MaterialHandle(NotAtStart);
      varMaterialHandle = &varScriptableEventCompassIconDef->partyChatting;
      Load_MaterialHandle(NotAtStart);
      varMaterialHandle = &varScriptableEventCompassIconDef->partyYelling;
      Load_MaterialHandle(NotAtStart);
      varMaterialHandle = &varScriptableEventCompassIconDef->squadArrow;
      Load_MaterialHandle(NotAtStart);
      varMaterialHandle = &varScriptableEventCompassIconDef->squadFiring;
      Load_MaterialHandle(NotAtStart);
      varMaterialHandle = varScriptableEventCompassIconDef->enemyCompassIconQuiet;
      Load_MaterialHandleArray(NotAtStart, 3ui64);
      varMaterialHandle = varScriptableEventCompassIconDef->enemyCompassIconFiring;
      Load_MaterialHandleArray(NotAtStart, 3ui64);
      varMaterialHandle = &varScriptableEventCompassIconDef->enemyCompassIconDirectional;
      Load_MaterialHandle(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventCompassIconDef = (ScriptableEventCompassIconDef *)g_streamPosGlob.pos;
      varMaterialHandle = v8;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventDef
==============
*/
void Load_ScriptableEventDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *v1; 
  const char **v2; 
  ScriptableEventDefUnion *v3; 

  Load_Stream(streamStart, varScriptableEventDef, 0xB0ui64);
  v1 = varScriptableEventBaseDef;
  varScriptableEventBaseDef = &varScriptableEventDef->base;
  Load_Stream(NotAtStart, varScriptableEventDef, 0x10ui64);
  v2 = varXString;
  varXString = &varScriptableEventBaseDef->name;
  Load_XString(NotAtStart);
  varXString = v2;
  v3 = varScriptableEventDefUnion;
  varScriptableEventDefUnion = &varScriptableEventDef->data;
  varScriptableEventBaseDef = v1;
  Load_ScriptableEventDefUnion(NotAtStart);
  varScriptableEventDefUnion = v3;
}

/*
==============
Load_ScriptableEventDefArray
==============
*/
void Load_ScriptableEventDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventDef *i; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 
  ScriptableEventDefUnion *v6; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventDef, 176 * count);
  for ( i = varScriptableEventDef; v2; --v2 )
  {
    varScriptableEventDef = i;
    Load_Stream(NotAtStart, i, 0xB0ui64);
    v4 = varScriptableEventBaseDef;
    varScriptableEventBaseDef = &varScriptableEventDef->base;
    Load_Stream(NotAtStart, varScriptableEventDef, 0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varXString = v5;
    v6 = varScriptableEventDefUnion;
    varScriptableEventDefUnion = &varScriptableEventDef->data;
    varScriptableEventBaseDef = v4;
    Load_ScriptableEventDefUnion(NotAtStart);
    ++i;
    varScriptableEventDefUnion = v6;
  }
}

/*
==============
Load_ScriptableEventDefStream
==============
*/
void Load_ScriptableEventDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 
  ScriptableEventDefUnion *v6; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 22334, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventDef;
    do
    {
      Load_Stream(AtStart, pos, 0xB0ui64);
      v4 = varScriptableEventBaseDef;
      varScriptableEventBaseDef = &varScriptableEventDef->base;
      Load_Stream(NotAtStart, varScriptableEventDef, 0x10ui64);
      v5 = varXString;
      varXString = &varScriptableEventBaseDef->name;
      Load_XString(NotAtStart);
      varXString = v5;
      v6 = varScriptableEventDefUnion;
      varScriptableEventDefUnion = &varScriptableEventDef->data;
      varScriptableEventBaseDef = v4;
      Load_ScriptableEventDefUnion(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
      varScriptableEventDefUnion = v6;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventDefUnion
==============
*/
void Load_ScriptableEventDefUnion(const DBStreamStart streamStart)
{
  Scriptable_EventType type; 
  ScriptableEventStateChangeDef *v2; 
  ScriptableEventWaitDef *v3; 
  ScriptableEventRandomDef *v4; 
  ScriptableEventScriptDef *v5; 
  ScriptableEventModelDef *v6; 
  ScriptableEventCollisionDef *v7; 
  ScriptableEventAnimationDef *v8; 
  ScriptableEventHideShowBoneDef *v9; 
  ScriptableEventDisablePhysicsSubShapeDef *v10; 
  ScriptableEventNoteTrackDef *v11; 
  ScriptableEventChunkDynentDef *v12; 
  ScriptableEventSpawnDynentDef *v13; 
  ScriptableEventPFXDef *v14; 
  ScriptableEventSoundDef *v15; 
  ScriptableEventExplosionDef *v16; 
  ScriptableEventLightDef *v17; 
  ScriptableEventSunDef *v18; 
  ScriptableEventRumbleDef *v19; 
  ScriptableEventScreenshakeDef *v20; 
  ScriptableEventPartDamageDef *v21; 
  ScriptableEventSetMayhemDef *v22; 
  ScriptableEventPlayMayhemDef *v23; 
  ScriptableEventViewmodelShaderParamDef *v24; 
  ScriptableEventViewmodelChangeImageDef *v25; 
  ScriptableEventClientViewSelectorDef *v26; 
  ScriptableEventTeamSelectorDef *v27; 
  ScriptableEventAddModelDef *v28; 
  ScriptableEventApplyForceDef *v29; 
  ScriptableEventApplyAngularForceDef *v30; 
  ScriptableEventApplyConstantForceDef *v31; 
  ScriptableEventApplyConstantAngularForceDef *v32; 
  ScriptableEventCompassIconDef *v33; 
  ScriptableEventMaterialOverrideDef *v34; 
  ScriptableEventDynamicBoneNoiseCurveDef *v35; 
  ScriptableEventMoveDef *v36; 
  ScriptableEventFootstepDef *v37; 
  ScriptableEventGravityArcDef *v38; 
  ScriptableEventViewTriggerDef *v39; 
  ScriptableEventObjectiveDef *v40; 
  ScriptableEventSpatialDisableDef *v41; 
  ScriptableEventHoverDef *v42; 
  ScriptableEventVehicleBlowUpTireDef *v43; 
  ScriptableEventDlc1Def *v44; 
  ScriptableEventScriptDamageDef *v45; 

  type = varScriptableEventDef->type;
  if ( type )
  {
    switch ( type )
    {
      case Scriptable_EventType_Wait:
        v3 = varScriptableEventWaitDef;
        varScriptableEventWaitDef = (ScriptableEventWaitDef *)varScriptableEventDefUnion;
        Load_ScriptableEventWaitDef(streamStart);
        varScriptableEventWaitDef = v3;
        break;
      case Scriptable_EventType_Random:
        v4 = varScriptableEventRandomDef;
        varScriptableEventRandomDef = (ScriptableEventRandomDef *)varScriptableEventDefUnion;
        Load_ScriptableEventRandomDef(streamStart);
        varScriptableEventRandomDef = v4;
        break;
      case Scriptable_EventType_Script:
        v5 = varScriptableEventScriptDef;
        varScriptableEventScriptDef = (ScriptableEventScriptDef *)varScriptableEventDefUnion;
        Load_ScriptableEventScriptDef(streamStart);
        varScriptableEventScriptDef = v5;
        break;
      case Scriptable_EventType_Model:
        v6 = varScriptableEventModelDef;
        varScriptableEventModelDef = (ScriptableEventModelDef *)varScriptableEventDefUnion;
        Load_ScriptableEventModelDef(streamStart);
        varScriptableEventModelDef = v6;
        break;
      case Scriptable_EventType_Collision:
        v7 = varScriptableEventCollisionDef;
        varScriptableEventCollisionDef = (ScriptableEventCollisionDef *)varScriptableEventDefUnion;
        Load_ScriptableEventCollisionDef(streamStart);
        varScriptableEventCollisionDef = v7;
        break;
      case Scriptable_EventType_Animation:
        v8 = varScriptableEventAnimationDef;
        varScriptableEventAnimationDef = (ScriptableEventAnimationDef *)varScriptableEventDefUnion;
        Load_ScriptableEventAnimationDef(streamStart);
        varScriptableEventAnimationDef = v8;
        break;
      case Scriptable_EventType_HideShowBone:
        v9 = varScriptableEventHideShowBoneDef;
        varScriptableEventHideShowBoneDef = (ScriptableEventHideShowBoneDef *)varScriptableEventDefUnion;
        Load_ScriptableEventHideShowBoneDef(streamStart);
        varScriptableEventHideShowBoneDef = v9;
        break;
      case Scriptable_EventType_DisablePhysicsSubShape:
        v10 = varScriptableEventDisablePhysicsSubShapeDef;
        varScriptableEventDisablePhysicsSubShapeDef = (ScriptableEventDisablePhysicsSubShapeDef *)varScriptableEventDefUnion;
        Load_ScriptableEventDisablePhysicsSubShapeDef(streamStart);
        varScriptableEventDisablePhysicsSubShapeDef = v10;
        break;
      case Scriptable_EventType_NoteTrack:
        v11 = varScriptableEventNoteTrackDef;
        varScriptableEventNoteTrackDef = (ScriptableEventNoteTrackDef *)varScriptableEventDefUnion;
        Load_ScriptableEventNoteTrackDef(streamStart);
        varScriptableEventNoteTrackDef = v11;
        break;
      case Scriptable_EventType_ChunkDynent:
        v12 = varScriptableEventChunkDynentDef;
        varScriptableEventChunkDynentDef = (ScriptableEventChunkDynentDef *)varScriptableEventDefUnion;
        Load_ScriptableEventChunkDynentDef(streamStart);
        varScriptableEventChunkDynentDef = v12;
        break;
      case Scriptable_EventType_SpawnDynent:
        v13 = varScriptableEventSpawnDynentDef;
        varScriptableEventSpawnDynentDef = (ScriptableEventSpawnDynentDef *)varScriptableEventDefUnion;
        Load_ScriptableEventSpawnDynentDef(streamStart);
        varScriptableEventSpawnDynentDef = v13;
        break;
      case Scriptable_EventType_PFX:
        v14 = varScriptableEventPFXDef;
        varScriptableEventPFXDef = (ScriptableEventPFXDef *)varScriptableEventDefUnion;
        Load_ScriptableEventPFXDef(streamStart);
        varScriptableEventPFXDef = v14;
        break;
      case Scriptable_EventType_Sound:
        v15 = varScriptableEventSoundDef;
        varScriptableEventSoundDef = (ScriptableEventSoundDef *)varScriptableEventDefUnion;
        Load_ScriptableEventSoundDef(streamStart);
        varScriptableEventSoundDef = v15;
        break;
      case Scriptable_EventType_Explosion:
        v16 = varScriptableEventExplosionDef;
        varScriptableEventExplosionDef = (ScriptableEventExplosionDef *)varScriptableEventDefUnion;
        Load_ScriptableEventExplosionDef(streamStart);
        varScriptableEventExplosionDef = v16;
        break;
      case Scriptable_EventType_Light:
        v17 = varScriptableEventLightDef;
        varScriptableEventLightDef = (ScriptableEventLightDef *)varScriptableEventDefUnion;
        Load_ScriptableEventLightDef(streamStart);
        varScriptableEventLightDef = v17;
        break;
      case Scriptable_EventType_Sun:
        v18 = varScriptableEventSunDef;
        varScriptableEventSunDef = (ScriptableEventSunDef *)varScriptableEventDefUnion;
        Load_ScriptableEventSunDef(streamStart);
        varScriptableEventSunDef = v18;
        break;
      case Scriptable_EventType_Rumble:
        v19 = varScriptableEventRumbleDef;
        varScriptableEventRumbleDef = (ScriptableEventRumbleDef *)varScriptableEventDefUnion;
        Load_ScriptableEventRumbleDef(streamStart);
        varScriptableEventRumbleDef = v19;
        break;
      case Scriptable_EventType_Screenshake:
        v20 = varScriptableEventScreenshakeDef;
        varScriptableEventScreenshakeDef = (ScriptableEventScreenshakeDef *)varScriptableEventDefUnion;
        Load_ScriptableEventScreenshakeDef(streamStart);
        varScriptableEventScreenshakeDef = v20;
        break;
      case Scriptable_EventType_PartDamage:
        v21 = varScriptableEventPartDamageDef;
        varScriptableEventPartDamageDef = (ScriptableEventPartDamageDef *)varScriptableEventDefUnion;
        Load_ScriptableEventPartDamageDef(streamStart);
        varScriptableEventPartDamageDef = v21;
        break;
      case Scriptable_EventType_SetMayhem:
        v22 = varScriptableEventSetMayhemDef;
        varScriptableEventSetMayhemDef = (ScriptableEventSetMayhemDef *)varScriptableEventDefUnion;
        Load_ScriptableEventSetMayhemDef(streamStart);
        varScriptableEventSetMayhemDef = v22;
        break;
      case Scriptable_EventType_PlayMayhem:
        v23 = varScriptableEventPlayMayhemDef;
        varScriptableEventPlayMayhemDef = (ScriptableEventPlayMayhemDef *)varScriptableEventDefUnion;
        Load_ScriptableEventPlayMayhemDef(streamStart);
        varScriptableEventPlayMayhemDef = v23;
        break;
      case Scriptable_EventType_ViewmodelShaderParam:
        v24 = varScriptableEventViewmodelShaderParamDef;
        varScriptableEventViewmodelShaderParamDef = (ScriptableEventViewmodelShaderParamDef *)varScriptableEventDefUnion;
        Load_ScriptableEventViewmodelShaderParamDef(streamStart);
        varScriptableEventViewmodelShaderParamDef = v24;
        break;
      case Scriptable_EventType_ViewmodelChangeImage:
        v25 = varScriptableEventViewmodelChangeImageDef;
        varScriptableEventViewmodelChangeImageDef = (ScriptableEventViewmodelChangeImageDef *)varScriptableEventDefUnion;
        Load_ScriptableEventViewmodelChangeImageDef(streamStart);
        varScriptableEventViewmodelChangeImageDef = v25;
        break;
      case Scriptable_EventType_ClientViewSelector:
        v26 = varScriptableEventClientViewSelectorDef;
        varScriptableEventClientViewSelectorDef = (ScriptableEventClientViewSelectorDef *)varScriptableEventDefUnion;
        Load_ScriptableEventClientViewSelectorDef(streamStart);
        varScriptableEventClientViewSelectorDef = v26;
        break;
      case Scriptable_EventType_TeamSelector:
        v27 = varScriptableEventTeamSelectorDef;
        varScriptableEventTeamSelectorDef = (ScriptableEventTeamSelectorDef *)varScriptableEventDefUnion;
        Load_ScriptableEventTeamSelectorDef(streamStart);
        varScriptableEventTeamSelectorDef = v27;
        break;
      case Scriptable_EventType_AddModel:
        v28 = varScriptableEventAddModelDef;
        varScriptableEventAddModelDef = (ScriptableEventAddModelDef *)varScriptableEventDefUnion;
        Load_ScriptableEventAddModelDef(streamStart);
        varScriptableEventAddModelDef = v28;
        break;
      case Scriptable_EventType_ApplyForce:
        v29 = varScriptableEventApplyForceDef;
        varScriptableEventApplyForceDef = (ScriptableEventApplyForceDef *)varScriptableEventDefUnion;
        Load_ScriptableEventApplyForceDef(streamStart);
        varScriptableEventApplyForceDef = v29;
        break;
      case Scriptable_EventType_ApplyAngularForce:
        v30 = varScriptableEventApplyAngularForceDef;
        varScriptableEventApplyAngularForceDef = (ScriptableEventApplyAngularForceDef *)varScriptableEventDefUnion;
        Load_ScriptableEventApplyAngularForceDef(streamStart);
        varScriptableEventApplyAngularForceDef = v30;
        break;
      case Scriptable_EventType_ApplyConstantForce:
        v31 = varScriptableEventApplyConstantForceDef;
        varScriptableEventApplyConstantForceDef = (ScriptableEventApplyConstantForceDef *)varScriptableEventDefUnion;
        Load_ScriptableEventApplyConstantForceDef(streamStart);
        varScriptableEventApplyConstantForceDef = v31;
        break;
      case Scriptable_EventType_ApplyConstantAngularForce:
        v32 = varScriptableEventApplyConstantAngularForceDef;
        varScriptableEventApplyConstantAngularForceDef = (ScriptableEventApplyConstantAngularForceDef *)varScriptableEventDefUnion;
        Load_ScriptableEventApplyConstantAngularForceDef(streamStart);
        varScriptableEventApplyConstantAngularForceDef = v32;
        break;
      case Scriptable_EventType_CompassIcon:
        v33 = varScriptableEventCompassIconDef;
        varScriptableEventCompassIconDef = (ScriptableEventCompassIconDef *)varScriptableEventDefUnion;
        Load_ScriptableEventCompassIconDef(streamStart);
        varScriptableEventCompassIconDef = v33;
        break;
      case Scriptable_EventType_MaterialOverride:
        v34 = varScriptableEventMaterialOverrideDef;
        varScriptableEventMaterialOverrideDef = (ScriptableEventMaterialOverrideDef *)varScriptableEventDefUnion;
        Load_ScriptableEventMaterialOverrideDef(streamStart);
        varScriptableEventMaterialOverrideDef = v34;
        break;
      case Scriptable_EventType_DynamicBoneNoiseCurve:
        v35 = varScriptableEventDynamicBoneNoiseCurveDef;
        varScriptableEventDynamicBoneNoiseCurveDef = (ScriptableEventDynamicBoneNoiseCurveDef *)varScriptableEventDefUnion;
        Load_ScriptableEventDynamicBoneNoiseCurveDef(streamStart);
        varScriptableEventDynamicBoneNoiseCurveDef = v35;
        break;
      case Scriptable_EventType_Move:
        v36 = varScriptableEventMoveDef;
        varScriptableEventMoveDef = (ScriptableEventMoveDef *)varScriptableEventDefUnion;
        Load_ScriptableEventMoveDef(streamStart);
        varScriptableEventMoveDef = v36;
        break;
      case Scriptable_EventType_Footstep:
        v37 = varScriptableEventFootstepDef;
        varScriptableEventFootstepDef = (ScriptableEventFootstepDef *)varScriptableEventDefUnion;
        Load_ScriptableEventFootstepDef(streamStart);
        varScriptableEventFootstepDef = v37;
        break;
      case Scriptable_EventType_GravityArc:
        v38 = varScriptableEventGravityArcDef;
        varScriptableEventGravityArcDef = (ScriptableEventGravityArcDef *)varScriptableEventDefUnion;
        Load_ScriptableEventGravityArcDef(streamStart);
        varScriptableEventGravityArcDef = v38;
        break;
      case Scriptable_EventType_ViewTrigger:
        v39 = varScriptableEventViewTriggerDef;
        varScriptableEventViewTriggerDef = (ScriptableEventViewTriggerDef *)varScriptableEventDefUnion;
        Load_ScriptableEventViewTriggerDef(streamStart);
        varScriptableEventViewTriggerDef = v39;
        break;
      case Scriptable_EventType_Objective:
        v40 = varScriptableEventObjectiveDef;
        varScriptableEventObjectiveDef = (ScriptableEventObjectiveDef *)varScriptableEventDefUnion;
        Load_ScriptableEventObjectiveDef(streamStart);
        varScriptableEventObjectiveDef = v40;
        break;
      case Scriptable_EventType_SpatialDisable:
        v41 = varScriptableEventSpatialDisableDef;
        varScriptableEventSpatialDisableDef = (ScriptableEventSpatialDisableDef *)varScriptableEventDefUnion;
        Load_ScriptableEventSpatialDisableDef(streamStart);
        varScriptableEventSpatialDisableDef = v41;
        break;
      case Scriptable_EventType_Hover:
        v42 = varScriptableEventHoverDef;
        varScriptableEventHoverDef = (ScriptableEventHoverDef *)varScriptableEventDefUnion;
        Load_ScriptableEventHoverDef(streamStart);
        varScriptableEventHoverDef = v42;
        break;
      case Scriptable_EventType_VehicleBlowUpTire:
        v43 = varScriptableEventVehicleBlowUpTireDef;
        varScriptableEventVehicleBlowUpTireDef = (ScriptableEventVehicleBlowUpTireDef *)varScriptableEventDefUnion;
        Load_ScriptableEventVehicleBlowUpTireDef(streamStart);
        varScriptableEventVehicleBlowUpTireDef = v43;
        break;
      case Scriptable_EventType_Dlc1:
        v44 = varScriptableEventDlc1Def;
        varScriptableEventDlc1Def = (ScriptableEventDlc1Def *)varScriptableEventDefUnion;
        Load_ScriptableEventDlc1Def(streamStart);
        varScriptableEventDlc1Def = v44;
        break;
      case Scriptable_EventType_ScriptDamage:
        v45 = varScriptableEventScriptDamageDef;
        varScriptableEventScriptDamageDef = (ScriptableEventScriptDamageDef *)varScriptableEventDefUnion;
        Load_ScriptableEventScriptDamageDef(streamStart);
        varScriptableEventScriptDamageDef = v45;
        break;
    }
  }
  else
  {
    v2 = varScriptableEventStateChangeDef;
    varScriptableEventStateChangeDef = (ScriptableEventStateChangeDef *)varScriptableEventDefUnion;
    Load_ScriptableEventStateChangeDef(streamStart);
    varScriptableEventStateChangeDef = v2;
  }
}

/*
==============
Load_ScriptableEventDefUnionArray
==============
*/
void Load_ScriptableEventDefUnionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventDefUnion *i; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventDefUnion, 152 * count);
  for ( i = varScriptableEventDefUnion; v2; --v2 )
  {
    varScriptableEventDefUnion = i;
    Load_ScriptableEventDefUnion(NotAtStart);
    ++i;
  }
}

/*
==============
Load_ScriptableEventDefUnionStream
==============
*/
void Load_ScriptableEventDefUnionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 22211, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  for ( ; count; --count )
  {
    Load_ScriptableEventDefUnion(AtStart);
    varScriptableEventDefUnion = (ScriptableEventDefUnion *)g_streamPosGlob.pos;
  }
}

/*
==============
Load_ScriptableEventDisablePhysicsSubShapeDef
==============
*/
void Load_ScriptableEventDisablePhysicsSubShapeDef(const DBStreamStart streamStart)
{
  ScriptableEventDisablePhysicsSubShapeDef *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 
  const char **v5; 

  Load_Stream(streamStart, varScriptableEventDisablePhysicsSubShapeDef, 0x20ui64);
  v1 = varScriptableEventDisablePhysicsSubShapeDef;
  base = varScriptableEventDisablePhysicsSubShapeDef->base;
  if ( varScriptableEventDisablePhysicsSubShapeDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventDisablePhysicsSubShapeDef->base);
      goto LABEL_8;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varScriptableEventBaseDef = v3;
    varXString = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v5 = varXString;
  varXString = &varScriptableEventDisablePhysicsSubShapeDef->mutableShapeName;
  Load_XString(NotAtStart);
  varXString = v5;
}

/*
==============
Load_ScriptableEventDisablePhysicsSubShapeDefArray
==============
*/
void Load_ScriptableEventDisablePhysicsSubShapeDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventDisablePhysicsSubShapeDef *i; 
  ScriptableEventDisablePhysicsSubShapeDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  const char **v8; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventDisablePhysicsSubShapeDef, 32 * count);
  for ( i = varScriptableEventDisablePhysicsSubShapeDef; v2; --v2 )
  {
    varScriptableEventDisablePhysicsSubShapeDef = i;
    Load_Stream(NotAtStart, i, 0x20ui64);
    v4 = varScriptableEventDisablePhysicsSubShapeDef;
    base = varScriptableEventDisablePhysicsSubShapeDef->base;
    if ( varScriptableEventDisablePhysicsSubShapeDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v7 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Load_XString(NotAtStart);
        varXString = v7;
        varScriptableEventBaseDef = v6;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventDisablePhysicsSubShapeDef->base);
    }
LABEL_9:
    v8 = varXString;
    varXString = &varScriptableEventDisablePhysicsSubShapeDef->mutableShapeName;
    Load_XString(NotAtStart);
    ++i;
    varXString = v8;
  }
}

/*
==============
Load_ScriptableEventDisablePhysicsSubShapeDefStream
==============
*/
void Load_ScriptableEventDisablePhysicsSubShapeDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventDisablePhysicsSubShapeDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  const char **v8; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 11106, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventDisablePhysicsSubShapeDef;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      v4 = varScriptableEventDisablePhysicsSubShapeDef;
      base = varScriptableEventDisablePhysicsSubShapeDef->base;
      if ( varScriptableEventDisablePhysicsSubShapeDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v7 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Load_XString(NotAtStart);
          varXString = v7;
          varScriptableEventBaseDef = v6;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
        v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventDisablePhysicsSubShapeDef->base);
      }
LABEL_13:
      v8 = varXString;
      varXString = &varScriptableEventDisablePhysicsSubShapeDef->mutableShapeName;
      Load_XString(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventDisablePhysicsSubShapeDef = (ScriptableEventDisablePhysicsSubShapeDef *)g_streamPosGlob.pos;
      varXString = v8;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventDlc1Def
==============
*/
void Load_ScriptableEventDlc1Def(const DBStreamStart streamStart)
{
  ScriptableEventDlc1Def *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 

  Load_Stream(streamStart, varScriptableEventDlc1Def, 0x18ui64);
  v1 = varScriptableEventDlc1Def;
  base = varScriptableEventDlc1Def->base;
  if ( varScriptableEventDlc1Def->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventDlc1Def->base);
      return;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varScriptableEventBaseDef = v3;
    varXString = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Load_ScriptableEventDlc1DefArray
==============
*/
void Load_ScriptableEventDlc1DefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventDlc1Def *i; 
  ScriptableEventDlc1Def *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventDlc1Def, 24 * count);
  for ( i = varScriptableEventDlc1Def; v2; --v2 )
  {
    varScriptableEventDlc1Def = i;
    Load_Stream(NotAtStart, i, 0x18ui64);
    v4 = varScriptableEventDlc1Def;
    base = varScriptableEventDlc1Def->base;
    if ( varScriptableEventDlc1Def->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v7 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Load_XString(NotAtStart);
        varXString = v7;
        varScriptableEventBaseDef = v6;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventDlc1Def->base);
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Load_ScriptableEventDlc1DefStream
==============
*/
void Load_ScriptableEventDlc1DefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventDlc1Def *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 20747, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventDlc1Def;
    do
    {
      Load_Stream(AtStart, pos, 0x18ui64);
      v4 = varScriptableEventDlc1Def;
      base = varScriptableEventDlc1Def->base;
      if ( varScriptableEventDlc1Def->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v7 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Load_XString(NotAtStart);
          varXString = v7;
          varScriptableEventBaseDef = v6;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
        v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventDlc1Def->base);
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableEventDlc1Def = (ScriptableEventDlc1Def *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventDynamicBoneNoiseCurveDef
==============
*/
void Load_ScriptableEventDynamicBoneNoiseCurveDef(const DBStreamStart streamStart)
{
  ScriptableEventDynamicBoneNoiseCurveDef *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 
  XAnimCurve **v5; 

  Load_Stream(streamStart, varScriptableEventDynamicBoneNoiseCurveDef, 0x28ui64);
  v1 = varScriptableEventDynamicBoneNoiseCurveDef;
  base = varScriptableEventDynamicBoneNoiseCurveDef->base;
  if ( varScriptableEventDynamicBoneNoiseCurveDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventDynamicBoneNoiseCurveDef->base);
      goto LABEL_8;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varScriptableEventBaseDef = v3;
    varXString = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v5 = varXAnimCurvePtr;
  varXAnimCurvePtr = &varScriptableEventDynamicBoneNoiseCurveDef->curve;
  Load_XAnimCurvePtr(NotAtStart);
  varXAnimCurvePtr = v5;
}

/*
==============
Load_ScriptableEventDynamicBoneNoiseCurveDefArray
==============
*/
void Load_ScriptableEventDynamicBoneNoiseCurveDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventDynamicBoneNoiseCurveDef *i; 
  ScriptableEventDynamicBoneNoiseCurveDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  XAnimCurve **v8; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventDynamicBoneNoiseCurveDef, 40 * count);
  for ( i = varScriptableEventDynamicBoneNoiseCurveDef; v2; --v2 )
  {
    varScriptableEventDynamicBoneNoiseCurveDef = i;
    Load_Stream(NotAtStart, i, 0x28ui64);
    v4 = varScriptableEventDynamicBoneNoiseCurveDef;
    base = varScriptableEventDynamicBoneNoiseCurveDef->base;
    if ( varScriptableEventDynamicBoneNoiseCurveDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v7 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Load_XString(NotAtStart);
        varXString = v7;
        varScriptableEventBaseDef = v6;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventDynamicBoneNoiseCurveDef->base);
    }
LABEL_9:
    v8 = varXAnimCurvePtr;
    varXAnimCurvePtr = &varScriptableEventDynamicBoneNoiseCurveDef->curve;
    Load_XAnimCurvePtr(NotAtStart);
    ++i;
    varXAnimCurvePtr = v8;
  }
}

/*
==============
Load_ScriptableEventDynamicBoneNoiseCurveDefStream
==============
*/
void Load_ScriptableEventDynamicBoneNoiseCurveDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventDynamicBoneNoiseCurveDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  XAnimCurve **v8; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 14021, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventDynamicBoneNoiseCurveDef;
    do
    {
      Load_Stream(AtStart, pos, 0x28ui64);
      v4 = varScriptableEventDynamicBoneNoiseCurveDef;
      base = varScriptableEventDynamicBoneNoiseCurveDef->base;
      if ( varScriptableEventDynamicBoneNoiseCurveDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v7 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Load_XString(NotAtStart);
          varXString = v7;
          varScriptableEventBaseDef = v6;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
        v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventDynamicBoneNoiseCurveDef->base);
      }
LABEL_13:
      v8 = varXAnimCurvePtr;
      varXAnimCurvePtr = &varScriptableEventDynamicBoneNoiseCurveDef->curve;
      Load_XAnimCurvePtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventDynamicBoneNoiseCurveDef = (ScriptableEventDynamicBoneNoiseCurveDef *)g_streamPosGlob.pos;
      varXAnimCurvePtr = v8;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventExplosionDef
==============
*/
void Load_ScriptableEventExplosionDef(const DBStreamStart streamStart)
{
  ScriptableEventExplosionDef *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 
  const char **v5; 
  scr_string_t *v6; 
  WeaponCompleteDef **v7; 

  Load_Stream(streamStart, varScriptableEventExplosionDef, 0x30ui64);
  v1 = varScriptableEventExplosionDef;
  base = varScriptableEventExplosionDef->base;
  if ( varScriptableEventExplosionDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventExplosionDef->base);
      goto LABEL_8;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varScriptableEventBaseDef = v3;
    varXString = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v5 = varXString;
  varXString = &varScriptableEventExplosionDef->tagName;
  Load_XString(NotAtStart);
  varXString = v5;
  v6 = varscr_string_t;
  varscr_string_t = &varScriptableEventExplosionDef->scrTagName;
  Load_scr_string_t(NotAtStart);
  varscr_string_t = v6;
  v7 = varWeaponCompleteDefPtr;
  varWeaponCompleteDefPtr = &varScriptableEventExplosionDef->weapon;
  Load_WeaponCompleteDefPtr(NotAtStart);
  varWeaponCompleteDefPtr = v7;
}

/*
==============
Load_ScriptableEventExplosionDefArray
==============
*/
void Load_ScriptableEventExplosionDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventExplosionDef *i; 
  ScriptableEventExplosionDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  const char **v8; 
  scr_string_t *v9; 
  WeaponCompleteDef **v10; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventExplosionDef, 48 * count);
  for ( i = varScriptableEventExplosionDef; v2; --v2 )
  {
    varScriptableEventExplosionDef = i;
    Load_Stream(NotAtStart, i, 0x30ui64);
    v4 = varScriptableEventExplosionDef;
    base = varScriptableEventExplosionDef->base;
    if ( varScriptableEventExplosionDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v7 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Load_XString(NotAtStart);
        varXString = v7;
        varScriptableEventBaseDef = v6;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventExplosionDef->base);
    }
LABEL_9:
    v8 = varXString;
    varXString = &varScriptableEventExplosionDef->tagName;
    Load_XString(NotAtStart);
    varXString = v8;
    v9 = varscr_string_t;
    varscr_string_t = &varScriptableEventExplosionDef->scrTagName;
    Load_scr_string_t(NotAtStart);
    varscr_string_t = v9;
    v10 = varWeaponCompleteDefPtr;
    varWeaponCompleteDefPtr = &varScriptableEventExplosionDef->weapon;
    Load_WeaponCompleteDefPtr(NotAtStart);
    ++i;
    varWeaponCompleteDefPtr = v10;
  }
}

/*
==============
Load_ScriptableEventExplosionDefStream
==============
*/
void Load_ScriptableEventExplosionDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventExplosionDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  const char **v8; 
  scr_string_t *v9; 
  WeaponCompleteDef **v10; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 14337, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventExplosionDef;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      v4 = varScriptableEventExplosionDef;
      base = varScriptableEventExplosionDef->base;
      if ( varScriptableEventExplosionDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v7 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Load_XString(NotAtStart);
          varXString = v7;
          varScriptableEventBaseDef = v6;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
        v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventExplosionDef->base);
      }
LABEL_13:
      v8 = varXString;
      varXString = &varScriptableEventExplosionDef->tagName;
      Load_XString(NotAtStart);
      varXString = v8;
      v9 = varscr_string_t;
      varscr_string_t = &varScriptableEventExplosionDef->scrTagName;
      Load_scr_string_t(NotAtStart);
      varscr_string_t = v9;
      v10 = varWeaponCompleteDefPtr;
      varWeaponCompleteDefPtr = &varScriptableEventExplosionDef->weapon;
      Load_WeaponCompleteDefPtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventExplosionDef = (ScriptableEventExplosionDef *)g_streamPosGlob.pos;
      varWeaponCompleteDefPtr = v10;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventFootstepDef
==============
*/
void Load_ScriptableEventFootstepDef(const DBStreamStart streamStart)
{
  ScriptableEventFootstepDef *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 
  const char **v5; 
  scr_string_t *v6; 
  const char **v7; 
  FootstepVFX **v8; 

  Load_Stream(streamStart, varScriptableEventFootstepDef, 0x38ui64);
  v1 = varScriptableEventFootstepDef;
  base = varScriptableEventFootstepDef->base;
  if ( varScriptableEventFootstepDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventFootstepDef->base);
      goto LABEL_8;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varScriptableEventBaseDef = v3;
    varXString = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v5 = varXString;
  varXString = &varScriptableEventFootstepDef->tagName;
  Load_XString(NotAtStart);
  varXString = v5;
  v6 = varscr_string_t;
  varscr_string_t = &varScriptableEventFootstepDef->scrTagName;
  Load_scr_string_t(NotAtStart);
  varscr_string_t = v6;
  v7 = varXString;
  varXString = &varScriptableEventFootstepDef->soundAlias;
  Load_XString(NotAtStart);
  varXString = v7;
  v8 = varFootstepVFXPtr;
  varFootstepVFXPtr = &varScriptableEventFootstepDef->rightFootstepVFX;
  Load_FootstepVFXPtr(NotAtStart);
  varFootstepVFXPtr = &varScriptableEventFootstepDef->leftFootstepVFX;
  Load_FootstepVFXPtr(NotAtStart);
  varFootstepVFXPtr = v8;
}

/*
==============
Load_ScriptableEventFootstepDefArray
==============
*/
void Load_ScriptableEventFootstepDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventFootstepDef *i; 
  ScriptableEventFootstepDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  const char **v8; 
  scr_string_t *v9; 
  const char **v10; 
  FootstepVFX **v11; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventFootstepDef, 56 * count);
  for ( i = varScriptableEventFootstepDef; v2; --v2 )
  {
    varScriptableEventFootstepDef = i;
    Load_Stream(NotAtStart, i, 0x38ui64);
    v4 = varScriptableEventFootstepDef;
    base = varScriptableEventFootstepDef->base;
    if ( varScriptableEventFootstepDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v7 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Load_XString(NotAtStart);
        varXString = v7;
        varScriptableEventBaseDef = v6;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventFootstepDef->base);
    }
LABEL_9:
    v8 = varXString;
    varXString = &varScriptableEventFootstepDef->tagName;
    Load_XString(NotAtStart);
    varXString = v8;
    v9 = varscr_string_t;
    varscr_string_t = &varScriptableEventFootstepDef->scrTagName;
    Load_scr_string_t(NotAtStart);
    varscr_string_t = v9;
    v10 = varXString;
    varXString = &varScriptableEventFootstepDef->soundAlias;
    Load_XString(NotAtStart);
    varXString = v10;
    v11 = varFootstepVFXPtr;
    varFootstepVFXPtr = &varScriptableEventFootstepDef->rightFootstepVFX;
    Load_FootstepVFXPtr(NotAtStart);
    varFootstepVFXPtr = &varScriptableEventFootstepDef->leftFootstepVFX;
    Load_FootstepVFXPtr(NotAtStart);
    ++i;
    varFootstepVFXPtr = v11;
  }
}

/*
==============
Load_ScriptableEventFootstepDefStream
==============
*/
void Load_ScriptableEventFootstepDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventFootstepDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  const char **v8; 
  scr_string_t *v9; 
  const char **v10; 
  FootstepVFX **v11; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 19677, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventFootstepDef;
    do
    {
      Load_Stream(AtStart, pos, 0x38ui64);
      v4 = varScriptableEventFootstepDef;
      base = varScriptableEventFootstepDef->base;
      if ( varScriptableEventFootstepDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v7 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Load_XString(NotAtStart);
          varXString = v7;
          varScriptableEventBaseDef = v6;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
        v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventFootstepDef->base);
      }
LABEL_13:
      v8 = varXString;
      varXString = &varScriptableEventFootstepDef->tagName;
      Load_XString(NotAtStart);
      varXString = v8;
      v9 = varscr_string_t;
      varscr_string_t = &varScriptableEventFootstepDef->scrTagName;
      Load_scr_string_t(NotAtStart);
      varscr_string_t = v9;
      v10 = varXString;
      varXString = &varScriptableEventFootstepDef->soundAlias;
      Load_XString(NotAtStart);
      varXString = v10;
      v11 = varFootstepVFXPtr;
      varFootstepVFXPtr = &varScriptableEventFootstepDef->rightFootstepVFX;
      Load_FootstepVFXPtr(NotAtStart);
      varFootstepVFXPtr = &varScriptableEventFootstepDef->leftFootstepVFX;
      Load_FootstepVFXPtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventFootstepDef = (ScriptableEventFootstepDef *)g_streamPosGlob.pos;
      varFootstepVFXPtr = v11;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventGravityArcDef
==============
*/
void Load_ScriptableEventGravityArcDef(const DBStreamStart streamStart)
{
  ScriptableEventGravityArcDef *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 
  ScriptableEventGravityArcDef *v5; 
  ScriptableEventDef *eventsAtEnd; 
  ScriptableEventDef *v7; 

  Load_Stream(streamStart, varScriptableEventGravityArcDef, 0x38ui64);
  v1 = varScriptableEventGravityArcDef;
  base = varScriptableEventGravityArcDef->base;
  if ( varScriptableEventGravityArcDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventGravityArcDef->base);
      goto LABEL_8;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varXString = v4;
    varScriptableEventBaseDef = v3;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v5 = varScriptableEventGravityArcDef;
  eventsAtEnd = varScriptableEventGravityArcDef->eventsAtEnd;
  if ( !eventsAtEnd )
    return;
  if ( eventsAtEnd == (ScriptableEventDef *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( eventsAtEnd != (ScriptableEventDef *)-2i64 )
  {
    v5->eventsAtEnd = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventGravityArcDef->eventsAtEnd);
    return;
  }
  v7 = varScriptableEventDef;
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  v5->eventsAtEnd = (ScriptableEventDef *)g_streamPosGlob.pos;
  varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
  Load_ScriptableEventDefArray(AtStart, varScriptableEventGravityArcDef->eventAtEndCount);
  varScriptableEventDef = v7;
  if ( eventsAtEnd == (ScriptableEventDef *)-1i64 )
    DB_PopSharedData();
}

/*
==============
Load_ScriptableEventGravityArcDefArray
==============
*/
void Load_ScriptableEventGravityArcDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventGravityArcDef *i; 
  ScriptableEventGravityArcDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  ScriptableEventGravityArcDef *v8; 
  ScriptableEventDef *eventsAtEnd; 
  ScriptableEventDef *v10; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventGravityArcDef, 56 * count);
  for ( i = varScriptableEventGravityArcDef; v2; --v2 )
  {
    varScriptableEventGravityArcDef = i;
    Load_Stream(NotAtStart, i, 0x38ui64);
    v4 = varScriptableEventGravityArcDef;
    base = varScriptableEventGravityArcDef->base;
    if ( !varScriptableEventGravityArcDef->base )
      goto LABEL_9;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventGravityArcDef->base);
      goto LABEL_9;
    }
    v6 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v7 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varXString = v7;
    varScriptableEventBaseDef = v6;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
LABEL_9:
    v8 = varScriptableEventGravityArcDef;
    eventsAtEnd = varScriptableEventGravityArcDef->eventsAtEnd;
    if ( eventsAtEnd )
    {
      if ( eventsAtEnd == (ScriptableEventDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_14:
        v10 = varScriptableEventDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v8->eventsAtEnd = (ScriptableEventDef *)g_streamPosGlob.pos;
        varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
        Load_ScriptableEventDefArray(AtStart, varScriptableEventGravityArcDef->eventAtEndCount);
        varScriptableEventDef = v10;
        if ( eventsAtEnd == (ScriptableEventDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_16;
      }
      if ( eventsAtEnd == (ScriptableEventDef *)-2i64 )
        goto LABEL_14;
      v8->eventsAtEnd = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventGravityArcDef->eventsAtEnd);
    }
LABEL_16:
    ++i;
  }
}

/*
==============
Load_ScriptableEventGravityArcDefStream
==============
*/
void Load_ScriptableEventGravityArcDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventGravityArcDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  ScriptableEventGravityArcDef *v8; 
  ScriptableEventDef *eventsAtEnd; 
  ScriptableEventDef *v10; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 19382, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventGravityArcDef;
    do
    {
      Load_Stream(AtStart, pos, 0x38ui64);
      v4 = varScriptableEventGravityArcDef;
      base = varScriptableEventGravityArcDef->base;
      if ( !varScriptableEventGravityArcDef->base )
        goto LABEL_13;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( base != (ScriptableEventBaseDef *)-2i64 )
      {
        v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventGravityArcDef->base);
        goto LABEL_13;
      }
      v6 = varScriptableEventBaseDef;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
      varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
      v7 = varXString;
      varXString = &varScriptableEventBaseDef->name;
      Load_XString(NotAtStart);
      varXString = v7;
      varScriptableEventBaseDef = v6;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        DB_PopSharedData();
LABEL_13:
      v8 = varScriptableEventGravityArcDef;
      eventsAtEnd = varScriptableEventGravityArcDef->eventsAtEnd;
      if ( eventsAtEnd )
      {
        if ( eventsAtEnd == (ScriptableEventDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_18:
          v10 = varScriptableEventDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v8->eventsAtEnd = (ScriptableEventDef *)g_streamPosGlob.pos;
          varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
          Load_ScriptableEventDefArray(AtStart, varScriptableEventGravityArcDef->eventAtEndCount);
          varScriptableEventDef = v10;
          if ( eventsAtEnd == (ScriptableEventDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_20;
        }
        if ( eventsAtEnd == (ScriptableEventDef *)-2i64 )
          goto LABEL_18;
        v8->eventsAtEnd = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventGravityArcDef->eventsAtEnd);
      }
LABEL_20:
      pos = g_streamPosGlob.pos;
      varScriptableEventGravityArcDef = (ScriptableEventGravityArcDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventHideShowBoneDef
==============
*/
void Load_ScriptableEventHideShowBoneDef(const DBStreamStart streamStart)
{
  ScriptableEventHideShowBoneDef *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 
  const char **v5; 
  scr_string_t *v6; 

  Load_Stream(streamStart, varScriptableEventHideShowBoneDef, 0x18ui64);
  v1 = varScriptableEventHideShowBoneDef;
  base = varScriptableEventHideShowBoneDef->base;
  if ( varScriptableEventHideShowBoneDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventHideShowBoneDef->base);
      goto LABEL_8;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varScriptableEventBaseDef = v3;
    varXString = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v5 = varXString;
  varXString = &varScriptableEventHideShowBoneDef->tagName;
  Load_XString(NotAtStart);
  varXString = v5;
  v6 = varscr_string_t;
  varscr_string_t = &varScriptableEventHideShowBoneDef->scrTagName;
  Load_scr_string_t(NotAtStart);
  varscr_string_t = v6;
}

/*
==============
Load_ScriptableEventHideShowBoneDefArray
==============
*/
void Load_ScriptableEventHideShowBoneDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventHideShowBoneDef *i; 
  ScriptableEventHideShowBoneDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  const char **v8; 
  scr_string_t *v9; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventHideShowBoneDef, 24 * count);
  for ( i = varScriptableEventHideShowBoneDef; v2; --v2 )
  {
    varScriptableEventHideShowBoneDef = i;
    Load_Stream(NotAtStart, i, 0x18ui64);
    v4 = varScriptableEventHideShowBoneDef;
    base = varScriptableEventHideShowBoneDef->base;
    if ( varScriptableEventHideShowBoneDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v7 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Load_XString(NotAtStart);
        varXString = v7;
        varScriptableEventBaseDef = v6;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventHideShowBoneDef->base);
    }
LABEL_9:
    v8 = varXString;
    varXString = &varScriptableEventHideShowBoneDef->tagName;
    Load_XString(NotAtStart);
    varXString = v8;
    v9 = varscr_string_t;
    varscr_string_t = &varScriptableEventHideShowBoneDef->scrTagName;
    Load_scr_string_t(NotAtStart);
    ++i;
    varscr_string_t = v9;
  }
}

/*
==============
Load_ScriptableEventHideShowBoneDefStream
==============
*/
void Load_ScriptableEventHideShowBoneDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventHideShowBoneDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  const char **v8; 
  scr_string_t *v9; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 10928, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventHideShowBoneDef;
    do
    {
      Load_Stream(AtStart, pos, 0x18ui64);
      v4 = varScriptableEventHideShowBoneDef;
      base = varScriptableEventHideShowBoneDef->base;
      if ( varScriptableEventHideShowBoneDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v7 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Load_XString(NotAtStart);
          varXString = v7;
          varScriptableEventBaseDef = v6;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
        v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventHideShowBoneDef->base);
      }
LABEL_13:
      v8 = varXString;
      varXString = &varScriptableEventHideShowBoneDef->tagName;
      Load_XString(NotAtStart);
      varXString = v8;
      v9 = varscr_string_t;
      varscr_string_t = &varScriptableEventHideShowBoneDef->scrTagName;
      Load_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventHideShowBoneDef = (ScriptableEventHideShowBoneDef *)g_streamPosGlob.pos;
      varscr_string_t = v9;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventHoverDef
==============
*/
void Load_ScriptableEventHoverDef(const DBStreamStart streamStart)
{
  ScriptableEventHoverDef *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 

  Load_Stream(streamStart, varScriptableEventHoverDef, 0x18ui64);
  v1 = varScriptableEventHoverDef;
  base = varScriptableEventHoverDef->base;
  if ( varScriptableEventHoverDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventHoverDef->base);
      return;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varScriptableEventBaseDef = v3;
    varXString = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Load_ScriptableEventHoverDefArray
==============
*/
void Load_ScriptableEventHoverDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventHoverDef *i; 
  ScriptableEventHoverDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventHoverDef, 24 * count);
  for ( i = varScriptableEventHoverDef; v2; --v2 )
  {
    varScriptableEventHoverDef = i;
    Load_Stream(NotAtStart, i, 0x18ui64);
    v4 = varScriptableEventHoverDef;
    base = varScriptableEventHoverDef->base;
    if ( varScriptableEventHoverDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v7 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Load_XString(NotAtStart);
        varXString = v7;
        varScriptableEventBaseDef = v6;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventHoverDef->base);
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Load_ScriptableEventHoverDefStream
==============
*/
void Load_ScriptableEventHoverDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventHoverDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 20414, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventHoverDef;
    do
    {
      Load_Stream(AtStart, pos, 0x18ui64);
      v4 = varScriptableEventHoverDef;
      base = varScriptableEventHoverDef->base;
      if ( varScriptableEventHoverDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v7 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Load_XString(NotAtStart);
          varXString = v7;
          varScriptableEventBaseDef = v6;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
        v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventHoverDef->base);
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableEventHoverDef = (ScriptableEventHoverDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventLightDef
==============
*/
void Load_ScriptableEventLightDef(const DBStreamStart streamStart)
{
  ScriptableEventLightDef *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 

  Load_Stream(streamStart, varScriptableEventLightDef, 0x40ui64);
  v1 = varScriptableEventLightDef;
  base = varScriptableEventLightDef->base;
  if ( varScriptableEventLightDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventLightDef->base);
      return;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varScriptableEventBaseDef = v3;
    varXString = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Load_ScriptableEventLightDefArray
==============
*/
void Load_ScriptableEventLightDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventLightDef *i; 
  ScriptableEventLightDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventLightDef, count << 6);
  for ( i = varScriptableEventLightDef; v2; --v2 )
  {
    varScriptableEventLightDef = i;
    Load_Stream(NotAtStart, i, 0x40ui64);
    v4 = varScriptableEventLightDef;
    base = varScriptableEventLightDef->base;
    if ( varScriptableEventLightDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v7 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Load_XString(NotAtStart);
        varXString = v7;
        varScriptableEventBaseDef = v6;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventLightDef->base);
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Load_ScriptableEventLightDefStream
==============
*/
void Load_ScriptableEventLightDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventLightDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 14676, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventLightDef;
    do
    {
      Load_Stream(AtStart, pos, 0x40ui64);
      v4 = varScriptableEventLightDef;
      base = varScriptableEventLightDef->base;
      if ( varScriptableEventLightDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v7 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Load_XString(NotAtStart);
          varXString = v7;
          varScriptableEventBaseDef = v6;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
        v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventLightDef->base);
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableEventLightDef = (ScriptableEventLightDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventMaterialOverrideDef
==============
*/
void Load_ScriptableEventMaterialOverrideDef(const DBStreamStart streamStart)
{
  ScriptableEventMaterialOverrideDef *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 

  Load_Stream(streamStart, varScriptableEventMaterialOverrideDef, 0x18ui64);
  v1 = varScriptableEventMaterialOverrideDef;
  base = varScriptableEventMaterialOverrideDef->base;
  if ( varScriptableEventMaterialOverrideDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventMaterialOverrideDef->base);
      return;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varScriptableEventBaseDef = v3;
    varXString = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Load_ScriptableEventMaterialOverrideDefArray
==============
*/
void Load_ScriptableEventMaterialOverrideDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventMaterialOverrideDef *i; 
  ScriptableEventMaterialOverrideDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventMaterialOverrideDef, 24 * count);
  for ( i = varScriptableEventMaterialOverrideDef; v2; --v2 )
  {
    varScriptableEventMaterialOverrideDef = i;
    Load_Stream(NotAtStart, i, 0x18ui64);
    v4 = varScriptableEventMaterialOverrideDef;
    base = varScriptableEventMaterialOverrideDef->base;
    if ( varScriptableEventMaterialOverrideDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v7 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Load_XString(NotAtStart);
        varXString = v7;
        varScriptableEventBaseDef = v6;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventMaterialOverrideDef->base);
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Load_ScriptableEventMaterialOverrideDefStream
==============
*/
void Load_ScriptableEventMaterialOverrideDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventMaterialOverrideDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 12933, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventMaterialOverrideDef;
    do
    {
      Load_Stream(AtStart, pos, 0x18ui64);
      v4 = varScriptableEventMaterialOverrideDef;
      base = varScriptableEventMaterialOverrideDef->base;
      if ( varScriptableEventMaterialOverrideDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v7 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Load_XString(NotAtStart);
          varXString = v7;
          varScriptableEventBaseDef = v6;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
        v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventMaterialOverrideDef->base);
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableEventMaterialOverrideDef = (ScriptableEventMaterialOverrideDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventModelDef
==============
*/
void Load_ScriptableEventModelDef(const DBStreamStart streamStart)
{
  ScriptableEventModelDef *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 
  ScriptableModelUnion *v5; 

  Load_Stream(streamStart, varScriptableEventModelDef, 0x20ui64);
  v1 = varScriptableEventModelDef;
  base = varScriptableEventModelDef->base;
  if ( varScriptableEventModelDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventModelDef->base);
      goto LABEL_8;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varScriptableEventBaseDef = v3;
    varXString = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v5 = varScriptableModelUnion;
  varScriptableModelUnion = &varScriptableEventModelDef->data;
  Load_ScriptableModelUnion(NotAtStart);
  varScriptableModelUnion = v5;
}

/*
==============
Load_ScriptableEventModelDefArray
==============
*/
void Load_ScriptableEventModelDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventModelDef *v3; 
  ScriptableEventModelDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  ScriptableModelUnion *v8; 
  XCompositeModelDef **p_compositeModel; 
  ScriptableDataType dataType; 
  XCompositeModelDef **v11; 
  XModel **v12; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventModelDef, 32 * count);
  v3 = varScriptableEventModelDef;
  if ( v2 )
  {
    while ( 1 )
    {
      varScriptableEventModelDef = v3;
      Load_Stream(NotAtStart, v3, 0x20ui64);
      v4 = varScriptableEventModelDef;
      base = varScriptableEventModelDef->base;
      if ( varScriptableEventModelDef->base )
        break;
LABEL_10:
      v8 = varScriptableModelUnion;
      p_compositeModel = &v4->data.compositeModel;
      varScriptableModelUnion = &v4->data;
      dataType = v4->dataType;
      if ( dataType == SCRIPTABLE_DATA_TYPE_XCOMPOSITEMODEL )
      {
        v11 = varXCompositeModelDefPtr;
        varXCompositeModelDefPtr = p_compositeModel;
        Load_XCompositeModelDefPtr(NotAtStart);
        varXCompositeModelDefPtr = v11;
      }
      else if ( dataType == SCRIPTABLE_DATA_TYPE_XMODEL )
      {
        v12 = varXModelPtr;
        varXModelPtr = (XModel **)p_compositeModel;
        Load_XModelPtr(NotAtStart);
        varXModelPtr = v12;
      }
      ++v3;
      varScriptableModelUnion = v8;
      if ( !--v2 )
        return;
    }
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventModelDef->base);
LABEL_9:
      v4 = varScriptableEventModelDef;
      goto LABEL_10;
    }
    v6 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v7 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varXString = v7;
    varScriptableEventBaseDef = v6;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_9;
  }
}

/*
==============
Load_ScriptableEventModelDefStream
==============
*/
void Load_ScriptableEventModelDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventModelDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  ScriptableModelUnion *v8; 
  XCompositeModelDef **p_compositeModel; 
  ScriptableDataType dataType; 
  XCompositeModelDef **v11; 
  XModel **v12; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 9925, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventModelDef;
    while ( 1 )
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      v4 = varScriptableEventModelDef;
      base = varScriptableEventModelDef->base;
      if ( varScriptableEventModelDef->base )
        break;
LABEL_14:
      v8 = varScriptableModelUnion;
      p_compositeModel = &v4->data.compositeModel;
      varScriptableModelUnion = &v4->data;
      dataType = v4->dataType;
      if ( dataType == SCRIPTABLE_DATA_TYPE_XCOMPOSITEMODEL )
      {
        v11 = varXCompositeModelDefPtr;
        varXCompositeModelDefPtr = p_compositeModel;
        Load_XCompositeModelDefPtr(NotAtStart);
        varXCompositeModelDefPtr = v11;
      }
      else if ( dataType == SCRIPTABLE_DATA_TYPE_XMODEL )
      {
        v12 = varXModelPtr;
        varXModelPtr = (XModel **)p_compositeModel;
        Load_XModelPtr(NotAtStart);
        varXModelPtr = v12;
      }
      pos = g_streamPosGlob.pos;
      varScriptableEventModelDef = (ScriptableEventModelDef *)g_streamPosGlob.pos;
      varScriptableModelUnion = v8;
      if ( !--count )
        return;
    }
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventModelDef->base);
LABEL_13:
      v4 = varScriptableEventModelDef;
      goto LABEL_14;
    }
    v6 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v7 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varXString = v7;
    varScriptableEventBaseDef = v6;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_13;
  }
}

/*
==============
Load_ScriptableEventMoveDef
==============
*/
void Load_ScriptableEventMoveDef(const DBStreamStart streamStart)
{
  ScriptableEventMoveDef *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 

  Load_Stream(streamStart, varScriptableEventMoveDef, 0x30ui64);
  v1 = varScriptableEventMoveDef;
  base = varScriptableEventMoveDef->base;
  if ( varScriptableEventMoveDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventMoveDef->base);
      return;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varScriptableEventBaseDef = v3;
    varXString = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Load_ScriptableEventMoveDefArray
==============
*/
void Load_ScriptableEventMoveDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventMoveDef *i; 
  ScriptableEventMoveDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventMoveDef, 48 * count);
  for ( i = varScriptableEventMoveDef; v2; --v2 )
  {
    varScriptableEventMoveDef = i;
    Load_Stream(NotAtStart, i, 0x30ui64);
    v4 = varScriptableEventMoveDef;
    base = varScriptableEventMoveDef->base;
    if ( varScriptableEventMoveDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v7 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Load_XString(NotAtStart);
        varXString = v7;
        varScriptableEventBaseDef = v6;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventMoveDef->base);
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Load_ScriptableEventMoveDefStream
==============
*/
void Load_ScriptableEventMoveDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventMoveDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 18988, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventMoveDef;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      v4 = varScriptableEventMoveDef;
      base = varScriptableEventMoveDef->base;
      if ( varScriptableEventMoveDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v7 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Load_XString(NotAtStart);
          varXString = v7;
          varScriptableEventBaseDef = v6;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
        v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventMoveDef->base);
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableEventMoveDef = (ScriptableEventMoveDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventNoteTrackDef
==============
*/
void Load_ScriptableEventNoteTrackDef(const DBStreamStart streamStart)
{
  ScriptableEventNoteTrackDef *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 
  ScriptableEventNoteTrackDef *v5; 
  ScriptableNoteTrackDef *noteTracks; 
  ScriptableNoteTrackDef *v7; 
  __int64 noteTrackCount; 
  ScriptableNoteTrackDef *i; 

  Load_Stream(streamStart, varScriptableEventNoteTrackDef, 0x18ui64);
  v1 = varScriptableEventNoteTrackDef;
  base = varScriptableEventNoteTrackDef->base;
  if ( varScriptableEventNoteTrackDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventNoteTrackDef->base);
      goto LABEL_8;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varXString = v4;
    varScriptableEventBaseDef = v3;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v5 = varScriptableEventNoteTrackDef;
  noteTracks = varScriptableEventNoteTrackDef->noteTracks;
  if ( !noteTracks )
    return;
  if ( noteTracks == (ScriptableNoteTrackDef *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( noteTracks != (ScriptableNoteTrackDef *)-2i64 )
  {
    v5->noteTracks = (ScriptableNoteTrackDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventNoteTrackDef->noteTracks);
    return;
  }
  v7 = varScriptableNoteTrackDef;
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  v5->noteTracks = (ScriptableNoteTrackDef *)g_streamPosGlob.pos;
  varScriptableNoteTrackDef = (ScriptableNoteTrackDef *)g_streamPosGlob.pos;
  noteTrackCount = varScriptableEventNoteTrackDef->noteTrackCount;
  Load_Stream(AtStart, g_streamPosGlob.pos, 32 * noteTrackCount);
  for ( i = varScriptableNoteTrackDef; noteTrackCount; --noteTrackCount )
  {
    varScriptableNoteTrackDef = i;
    Load_ScriptableNoteTrackDef(NotAtStart);
    ++i;
  }
  varScriptableNoteTrackDef = v7;
  if ( noteTracks == (ScriptableNoteTrackDef *)-1i64 )
    DB_PopSharedData();
}

/*
==============
Load_ScriptableEventNoteTrackDefArray
==============
*/
void Load_ScriptableEventNoteTrackDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventNoteTrackDef *i; 
  ScriptableEventNoteTrackDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  ScriptableEventNoteTrackDef *v8; 
  ScriptableNoteTrackDef *noteTracks; 
  ScriptableNoteTrackDef *v10; 
  __int64 noteTrackCount; 
  ScriptableNoteTrackDef *j; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventNoteTrackDef, 24 * count);
  for ( i = varScriptableEventNoteTrackDef; v2; --v2 )
  {
    varScriptableEventNoteTrackDef = i;
    Load_Stream(NotAtStart, i, 0x18ui64);
    v4 = varScriptableEventNoteTrackDef;
    base = varScriptableEventNoteTrackDef->base;
    if ( !varScriptableEventNoteTrackDef->base )
      goto LABEL_9;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventNoteTrackDef->base);
      goto LABEL_9;
    }
    v6 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v7 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varXString = v7;
    varScriptableEventBaseDef = v6;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
LABEL_9:
    v8 = varScriptableEventNoteTrackDef;
    noteTracks = varScriptableEventNoteTrackDef->noteTracks;
    if ( noteTracks )
    {
      if ( noteTracks == (ScriptableNoteTrackDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_14:
        v10 = varScriptableNoteTrackDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v8->noteTracks = (ScriptableNoteTrackDef *)g_streamPosGlob.pos;
        varScriptableNoteTrackDef = (ScriptableNoteTrackDef *)g_streamPosGlob.pos;
        noteTrackCount = varScriptableEventNoteTrackDef->noteTrackCount;
        Load_Stream(AtStart, g_streamPosGlob.pos, 32 * noteTrackCount);
        for ( j = varScriptableNoteTrackDef; noteTrackCount; --noteTrackCount )
        {
          varScriptableNoteTrackDef = j;
          Load_ScriptableNoteTrackDef(NotAtStart);
          ++j;
        }
        varScriptableNoteTrackDef = v10;
        if ( noteTracks == (ScriptableNoteTrackDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_18;
      }
      if ( noteTracks == (ScriptableNoteTrackDef *)-2i64 )
        goto LABEL_14;
      v8->noteTracks = (ScriptableNoteTrackDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventNoteTrackDef->noteTracks);
    }
LABEL_18:
    ++i;
  }
}

/*
==============
Load_ScriptableEventNoteTrackDefStream
==============
*/
void Load_ScriptableEventNoteTrackDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventNoteTrackDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  ScriptableEventNoteTrackDef *v8; 
  ScriptableNoteTrackDef *noteTracks; 
  ScriptableNoteTrackDef *v10; 
  __int64 noteTrackCount; 
  ScriptableNoteTrackDef *i; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 11293, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventNoteTrackDef;
    do
    {
      Load_Stream(AtStart, pos, 0x18ui64);
      v4 = varScriptableEventNoteTrackDef;
      base = varScriptableEventNoteTrackDef->base;
      if ( !varScriptableEventNoteTrackDef->base )
        goto LABEL_13;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( base != (ScriptableEventBaseDef *)-2i64 )
      {
        v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventNoteTrackDef->base);
        goto LABEL_13;
      }
      v6 = varScriptableEventBaseDef;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
      varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
      v7 = varXString;
      varXString = &varScriptableEventBaseDef->name;
      Load_XString(NotAtStart);
      varXString = v7;
      varScriptableEventBaseDef = v6;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        DB_PopSharedData();
LABEL_13:
      v8 = varScriptableEventNoteTrackDef;
      noteTracks = varScriptableEventNoteTrackDef->noteTracks;
      if ( noteTracks )
      {
        if ( noteTracks == (ScriptableNoteTrackDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_18:
          v10 = varScriptableNoteTrackDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v8->noteTracks = (ScriptableNoteTrackDef *)g_streamPosGlob.pos;
          varScriptableNoteTrackDef = (ScriptableNoteTrackDef *)g_streamPosGlob.pos;
          noteTrackCount = varScriptableEventNoteTrackDef->noteTrackCount;
          Load_Stream(AtStart, g_streamPosGlob.pos, 32 * noteTrackCount);
          for ( i = varScriptableNoteTrackDef; noteTrackCount; --noteTrackCount )
          {
            varScriptableNoteTrackDef = i;
            Load_ScriptableNoteTrackDef(NotAtStart);
            ++i;
          }
          varScriptableNoteTrackDef = v10;
          if ( noteTracks == (ScriptableNoteTrackDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_22;
        }
        if ( noteTracks == (ScriptableNoteTrackDef *)-2i64 )
          goto LABEL_18;
        v8->noteTracks = (ScriptableNoteTrackDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventNoteTrackDef->noteTracks);
      }
LABEL_22:
      pos = g_streamPosGlob.pos;
      varScriptableEventNoteTrackDef = (ScriptableEventNoteTrackDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventObjectiveDef
==============
*/
void Load_ScriptableEventObjectiveDef(const DBStreamStart streamStart)
{
  ScriptableEventObjectiveDef *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 
  const char **v5; 
  GfxImage **v6; 

  Load_Stream(streamStart, varScriptableEventObjectiveDef, 0x40ui64);
  v1 = varScriptableEventObjectiveDef;
  base = varScriptableEventObjectiveDef->base;
  if ( varScriptableEventObjectiveDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventObjectiveDef->base);
      goto LABEL_8;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varScriptableEventBaseDef = v3;
    varXString = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v5 = varXString;
  varXString = &varScriptableEventObjectiveDef->description;
  Load_XString(NotAtStart);
  varXString = &varScriptableEventObjectiveDef->icon;
  Load_XString(NotAtStart);
  varXString = &varScriptableEventObjectiveDef->label;
  Load_XString(NotAtStart);
  varXString = v5;
  v6 = varGfxImagePtr;
  varGfxImagePtr = &varScriptableEventObjectiveDef->iconImage;
  Load_GfxImagePtr(NotAtStart);
  varGfxImagePtr = v6;
}

/*
==============
Load_ScriptableEventObjectiveDefArray
==============
*/
void Load_ScriptableEventObjectiveDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventObjectiveDef *i; 
  ScriptableEventObjectiveDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  const char **v8; 
  GfxImage **v9; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventObjectiveDef, count << 6);
  for ( i = varScriptableEventObjectiveDef; v2; --v2 )
  {
    varScriptableEventObjectiveDef = i;
    Load_Stream(NotAtStart, i, 0x40ui64);
    v4 = varScriptableEventObjectiveDef;
    base = varScriptableEventObjectiveDef->base;
    if ( varScriptableEventObjectiveDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v7 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Load_XString(NotAtStart);
        varXString = v7;
        varScriptableEventBaseDef = v6;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventObjectiveDef->base);
    }
LABEL_9:
    v8 = varXString;
    varXString = &varScriptableEventObjectiveDef->description;
    Load_XString(NotAtStart);
    varXString = &varScriptableEventObjectiveDef->icon;
    Load_XString(NotAtStart);
    varXString = &varScriptableEventObjectiveDef->label;
    Load_XString(NotAtStart);
    varXString = v8;
    v9 = varGfxImagePtr;
    varGfxImagePtr = &varScriptableEventObjectiveDef->iconImage;
    Load_GfxImagePtr(NotAtStart);
    ++i;
    varGfxImagePtr = v9;
  }
}

/*
==============
Load_ScriptableEventObjectiveDefStream
==============
*/
void Load_ScriptableEventObjectiveDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventObjectiveDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  const char **v8; 
  GfxImage **v9; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 20081, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventObjectiveDef;
    do
    {
      Load_Stream(AtStart, pos, 0x40ui64);
      v4 = varScriptableEventObjectiveDef;
      base = varScriptableEventObjectiveDef->base;
      if ( varScriptableEventObjectiveDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v7 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Load_XString(NotAtStart);
          varXString = v7;
          varScriptableEventBaseDef = v6;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
        v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventObjectiveDef->base);
      }
LABEL_13:
      v8 = varXString;
      varXString = &varScriptableEventObjectiveDef->description;
      Load_XString(NotAtStart);
      varXString = &varScriptableEventObjectiveDef->icon;
      Load_XString(NotAtStart);
      varXString = &varScriptableEventObjectiveDef->label;
      Load_XString(NotAtStart);
      varXString = v8;
      v9 = varGfxImagePtr;
      varGfxImagePtr = &varScriptableEventObjectiveDef->iconImage;
      Load_GfxImagePtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventObjectiveDef = (ScriptableEventObjectiveDef *)g_streamPosGlob.pos;
      varGfxImagePtr = v9;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventPFXDef
==============
*/
void Load_ScriptableEventPFXDef(const DBStreamStart streamStart)
{
  ScriptableEventPFXDef *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 
  ScriptableEventPFXDef *v5; 
  scr_string_t *scrTagNames; 
  scr_string_t *v7; 
  scr_string_t *scr_string_t; 
  ScriptableEventPFXDef *v9; 
  scr_string_t *scrEndTagNames; 
  scr_string_t *v11; 
  scr_string_t *v12; 
  const char **v13; 
  FxCombinedDef *v14; 

  Load_Stream(streamStart, varScriptableEventPFXDef, 0x58ui64);
  v1 = varScriptableEventPFXDef;
  base = varScriptableEventPFXDef->base;
  if ( varScriptableEventPFXDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventPFXDef->base);
      goto LABEL_8;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varXString = v4;
    varScriptableEventBaseDef = v3;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v5 = varScriptableEventPFXDef;
  scrTagNames = varScriptableEventPFXDef->scrTagNames;
  if ( !scrTagNames )
    goto LABEL_15;
  if ( scrTagNames == (scr_string_t *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( scrTagNames != (scr_string_t *)-2i64 )
  {
    v5->scrTagNames = (scr_string_t *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventPFXDef->scrTagNames);
    goto LABEL_15;
  }
  v7 = varscr_string_t;
  scr_string_t = AllocLoad_scr_string_t();
  v5->scrTagNames = scr_string_t;
  varscr_string_t = scr_string_t;
  Load_scr_string_tArray(AtStart, varScriptableEventPFXDef->scrTagCount);
  varscr_string_t = v7;
  if ( scrTagNames == (scr_string_t *)-1i64 )
    DB_PopSharedData();
LABEL_15:
  v9 = varScriptableEventPFXDef;
  scrEndTagNames = varScriptableEventPFXDef->scrEndTagNames;
  if ( scrEndTagNames )
  {
    if ( scrEndTagNames == (scr_string_t *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( scrEndTagNames != (scr_string_t *)-2i64 )
    {
      v9->scrEndTagNames = (scr_string_t *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventPFXDef->scrEndTagNames);
      goto LABEL_22;
    }
    v11 = varscr_string_t;
    v12 = AllocLoad_scr_string_t();
    v9->scrEndTagNames = v12;
    varscr_string_t = v12;
    Load_scr_string_tArray(AtStart, varScriptableEventPFXDef->scrEndTagCount);
    varscr_string_t = v11;
    if ( scrEndTagNames == (scr_string_t *)-1i64 )
      DB_PopSharedData();
  }
LABEL_22:
  v13 = varXString;
  varXString = &varScriptableEventPFXDef->effectAlias;
  Load_XString(NotAtStart);
  varXString = v13;
  v14 = varFxCombinedDef;
  varFxCombinedDef = &varScriptableEventPFXDef->effectDef;
  Load_FxCombinedDef(NotAtStart);
  varFxCombinedDef = v14;
}

/*
==============
Load_ScriptableEventPFXDefArray
==============
*/
void Load_ScriptableEventPFXDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventPFXDef *i; 
  ScriptableEventPFXDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  ScriptableEventPFXDef *v8; 
  scr_string_t *scrTagNames; 
  scr_string_t *v10; 
  scr_string_t *scr_string_t; 
  ScriptableEventPFXDef *v12; 
  scr_string_t *scrEndTagNames; 
  scr_string_t *v14; 
  scr_string_t *v15; 
  const char **v16; 
  FxCombinedDef *v17; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventPFXDef, 88 * count);
  for ( i = varScriptableEventPFXDef; v2; --v2 )
  {
    varScriptableEventPFXDef = i;
    Load_Stream(NotAtStart, i, 0x58ui64);
    v4 = varScriptableEventPFXDef;
    base = varScriptableEventPFXDef->base;
    if ( !varScriptableEventPFXDef->base )
      goto LABEL_9;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventPFXDef->base);
      goto LABEL_9;
    }
    v6 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v7 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varXString = v7;
    varScriptableEventBaseDef = v6;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
LABEL_9:
    v8 = varScriptableEventPFXDef;
    scrTagNames = varScriptableEventPFXDef->scrTagNames;
    if ( !scrTagNames )
      goto LABEL_16;
    if ( scrTagNames == (scr_string_t *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( scrTagNames != (scr_string_t *)-2i64 )
    {
      v8->scrTagNames = (scr_string_t *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventPFXDef->scrTagNames);
      goto LABEL_16;
    }
    v10 = varscr_string_t;
    scr_string_t = AllocLoad_scr_string_t();
    v8->scrTagNames = scr_string_t;
    varscr_string_t = scr_string_t;
    Load_scr_string_tArray(AtStart, varScriptableEventPFXDef->scrTagCount);
    varscr_string_t = v10;
    if ( scrTagNames == (scr_string_t *)-1i64 )
      DB_PopSharedData();
LABEL_16:
    v12 = varScriptableEventPFXDef;
    scrEndTagNames = varScriptableEventPFXDef->scrEndTagNames;
    if ( scrEndTagNames )
    {
      if ( scrEndTagNames == (scr_string_t *)-1i64 )
      {
        DB_PushSharedData();
LABEL_21:
        v14 = varscr_string_t;
        v15 = AllocLoad_scr_string_t();
        v12->scrEndTagNames = v15;
        varscr_string_t = v15;
        Load_scr_string_tArray(AtStart, varScriptableEventPFXDef->scrEndTagCount);
        varscr_string_t = v14;
        if ( scrEndTagNames == (scr_string_t *)-1i64 )
          DB_PopSharedData();
        goto LABEL_23;
      }
      if ( scrEndTagNames == (scr_string_t *)-2i64 )
        goto LABEL_21;
      v12->scrEndTagNames = (scr_string_t *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventPFXDef->scrEndTagNames);
    }
LABEL_23:
    v16 = varXString;
    varXString = &varScriptableEventPFXDef->effectAlias;
    Load_XString(NotAtStart);
    varXString = v16;
    v17 = varFxCombinedDef;
    varFxCombinedDef = &varScriptableEventPFXDef->effectDef;
    Load_FxCombinedDef(NotAtStart);
    ++i;
    varFxCombinedDef = v17;
  }
}

/*
==============
Load_ScriptableEventPFXDefStream
==============
*/
void Load_ScriptableEventPFXDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventPFXDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  ScriptableEventPFXDef *v8; 
  scr_string_t *scrTagNames; 
  scr_string_t *v10; 
  scr_string_t *scr_string_t; 
  ScriptableEventPFXDef *v12; 
  scr_string_t *scrEndTagNames; 
  scr_string_t *v14; 
  scr_string_t *v15; 
  const char **v16; 
  FxCombinedDef *v17; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 12677, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventPFXDef;
    do
    {
      Load_Stream(AtStart, pos, 0x58ui64);
      v4 = varScriptableEventPFXDef;
      base = varScriptableEventPFXDef->base;
      if ( !varScriptableEventPFXDef->base )
        goto LABEL_13;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( base != (ScriptableEventBaseDef *)-2i64 )
      {
        v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventPFXDef->base);
        goto LABEL_13;
      }
      v6 = varScriptableEventBaseDef;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
      varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
      v7 = varXString;
      varXString = &varScriptableEventBaseDef->name;
      Load_XString(NotAtStart);
      varXString = v7;
      varScriptableEventBaseDef = v6;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        DB_PopSharedData();
LABEL_13:
      v8 = varScriptableEventPFXDef;
      scrTagNames = varScriptableEventPFXDef->scrTagNames;
      if ( !scrTagNames )
        goto LABEL_20;
      if ( scrTagNames == (scr_string_t *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( scrTagNames != (scr_string_t *)-2i64 )
      {
        v8->scrTagNames = (scr_string_t *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventPFXDef->scrTagNames);
        goto LABEL_20;
      }
      v10 = varscr_string_t;
      scr_string_t = AllocLoad_scr_string_t();
      v8->scrTagNames = scr_string_t;
      varscr_string_t = scr_string_t;
      Load_scr_string_tArray(AtStart, varScriptableEventPFXDef->scrTagCount);
      varscr_string_t = v10;
      if ( scrTagNames == (scr_string_t *)-1i64 )
        DB_PopSharedData();
LABEL_20:
      v12 = varScriptableEventPFXDef;
      scrEndTagNames = varScriptableEventPFXDef->scrEndTagNames;
      if ( scrEndTagNames )
      {
        if ( scrEndTagNames == (scr_string_t *)-1i64 )
        {
          DB_PushSharedData();
LABEL_25:
          v14 = varscr_string_t;
          v15 = AllocLoad_scr_string_t();
          v12->scrEndTagNames = v15;
          varscr_string_t = v15;
          Load_scr_string_tArray(AtStart, varScriptableEventPFXDef->scrEndTagCount);
          varscr_string_t = v14;
          if ( scrEndTagNames == (scr_string_t *)-1i64 )
            DB_PopSharedData();
          goto LABEL_27;
        }
        if ( scrEndTagNames == (scr_string_t *)-2i64 )
          goto LABEL_25;
        v12->scrEndTagNames = (scr_string_t *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventPFXDef->scrEndTagNames);
      }
LABEL_27:
      v16 = varXString;
      varXString = &varScriptableEventPFXDef->effectAlias;
      Load_XString(NotAtStart);
      varXString = v16;
      v17 = varFxCombinedDef;
      varFxCombinedDef = &varScriptableEventPFXDef->effectDef;
      Load_FxCombinedDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventPFXDef = (ScriptableEventPFXDef *)g_streamPosGlob.pos;
      varFxCombinedDef = v17;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventPartDamageDef
==============
*/
void Load_ScriptableEventPartDamageDef(const DBStreamStart streamStart)
{
  ScriptableEventPartDamageDef *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 

  Load_Stream(streamStart, varScriptableEventPartDamageDef, 0x28ui64);
  v1 = varScriptableEventPartDamageDef;
  base = varScriptableEventPartDamageDef->base;
  if ( varScriptableEventPartDamageDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventPartDamageDef->base);
      return;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varScriptableEventBaseDef = v3;
    varXString = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Load_ScriptableEventPartDamageDefArray
==============
*/
void Load_ScriptableEventPartDamageDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventPartDamageDef *i; 
  ScriptableEventPartDamageDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventPartDamageDef, 40 * count);
  for ( i = varScriptableEventPartDamageDef; v2; --v2 )
  {
    varScriptableEventPartDamageDef = i;
    Load_Stream(NotAtStart, i, 0x28ui64);
    v4 = varScriptableEventPartDamageDef;
    base = varScriptableEventPartDamageDef->base;
    if ( varScriptableEventPartDamageDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v7 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Load_XString(NotAtStart);
        varXString = v7;
        varScriptableEventBaseDef = v6;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventPartDamageDef->base);
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Load_ScriptableEventPartDamageDefStream
==============
*/
void Load_ScriptableEventPartDamageDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventPartDamageDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 16147, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventPartDamageDef;
    do
    {
      Load_Stream(AtStart, pos, 0x28ui64);
      v4 = varScriptableEventPartDamageDef;
      base = varScriptableEventPartDamageDef->base;
      if ( varScriptableEventPartDamageDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v7 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Load_XString(NotAtStart);
          varXString = v7;
          varScriptableEventBaseDef = v6;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
        v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventPartDamageDef->base);
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableEventPartDamageDef = (ScriptableEventPartDamageDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventPlayMayhemDef
==============
*/
void Load_ScriptableEventPlayMayhemDef(const DBStreamStart streamStart)
{
  ScriptableEventPlayMayhemDef *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 

  Load_Stream(streamStart, varScriptableEventPlayMayhemDef, 0x10ui64);
  v1 = varScriptableEventPlayMayhemDef;
  base = varScriptableEventPlayMayhemDef->base;
  if ( varScriptableEventPlayMayhemDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventPlayMayhemDef->base);
      return;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varScriptableEventBaseDef = v3;
    varXString = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Load_ScriptableEventPlayMayhemDefArray
==============
*/
void Load_ScriptableEventPlayMayhemDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventPlayMayhemDef *i; 
  ScriptableEventPlayMayhemDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventPlayMayhemDef, 16 * count);
  for ( i = varScriptableEventPlayMayhemDef; v2; --v2 )
  {
    varScriptableEventPlayMayhemDef = i;
    Load_Stream(NotAtStart, i, 0x10ui64);
    v4 = varScriptableEventPlayMayhemDef;
    base = varScriptableEventPlayMayhemDef->base;
    if ( varScriptableEventPlayMayhemDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v7 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Load_XString(NotAtStart);
        varXString = v7;
        varScriptableEventBaseDef = v6;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventPlayMayhemDef->base);
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Load_ScriptableEventPlayMayhemDefStream
==============
*/
void Load_ScriptableEventPlayMayhemDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventPlayMayhemDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 16459, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventPlayMayhemDef;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      v4 = varScriptableEventPlayMayhemDef;
      base = varScriptableEventPlayMayhemDef->base;
      if ( varScriptableEventPlayMayhemDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v7 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Load_XString(NotAtStart);
          varXString = v7;
          varScriptableEventBaseDef = v6;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
        v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventPlayMayhemDef->base);
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableEventPlayMayhemDef = (ScriptableEventPlayMayhemDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventRandomDef
==============
*/
void Load_ScriptableEventRandomDef(const DBStreamStart streamStart)
{
  ScriptableEventRandomDef *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 
  ScriptableEventRandomDef *v5; 
  ScriptableEventDef *eventsA; 
  ScriptableEventDef *v7; 
  ScriptableEventRandomDef *v8; 
  ScriptableEventDef *eventsB; 
  ScriptableEventDef *v10; 

  Load_Stream(streamStart, varScriptableEventRandomDef, 0x30ui64);
  v1 = varScriptableEventRandomDef;
  base = varScriptableEventRandomDef->base;
  if ( varScriptableEventRandomDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventRandomDef->base);
      goto LABEL_8;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varXString = v4;
    varScriptableEventBaseDef = v3;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v5 = varScriptableEventRandomDef;
  eventsA = varScriptableEventRandomDef->eventsA;
  if ( !eventsA )
    goto LABEL_15;
  if ( eventsA == (ScriptableEventDef *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( eventsA != (ScriptableEventDef *)-2i64 )
  {
    v5->eventsA = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventRandomDef->eventsA);
    goto LABEL_15;
  }
  v7 = varScriptableEventDef;
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  v5->eventsA = (ScriptableEventDef *)g_streamPosGlob.pos;
  varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
  Load_ScriptableEventDefArray(AtStart, varScriptableEventRandomDef->eventACount);
  varScriptableEventDef = v7;
  if ( eventsA == (ScriptableEventDef *)-1i64 )
    DB_PopSharedData();
LABEL_15:
  v8 = varScriptableEventRandomDef;
  eventsB = varScriptableEventRandomDef->eventsB;
  if ( !eventsB )
    return;
  if ( eventsB == (ScriptableEventDef *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( eventsB != (ScriptableEventDef *)-2i64 )
  {
    v8->eventsB = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventRandomDef->eventsB);
    return;
  }
  v10 = varScriptableEventDef;
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  v8->eventsB = (ScriptableEventDef *)g_streamPosGlob.pos;
  varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
  Load_ScriptableEventDefArray(AtStart, varScriptableEventRandomDef->eventBCount);
  varScriptableEventDef = v10;
  if ( eventsB == (ScriptableEventDef *)-1i64 )
    DB_PopSharedData();
}

/*
==============
Load_ScriptableEventRandomDefArray
==============
*/
void Load_ScriptableEventRandomDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventRandomDef *i; 
  ScriptableEventRandomDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  ScriptableEventRandomDef *v8; 
  ScriptableEventDef *eventsA; 
  ScriptableEventDef *v10; 
  ScriptableEventRandomDef *v11; 
  ScriptableEventDef *eventsB; 
  ScriptableEventDef *v13; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventRandomDef, 48 * count);
  for ( i = varScriptableEventRandomDef; v2; --v2 )
  {
    varScriptableEventRandomDef = i;
    Load_Stream(NotAtStart, i, 0x30ui64);
    v4 = varScriptableEventRandomDef;
    base = varScriptableEventRandomDef->base;
    if ( !varScriptableEventRandomDef->base )
      goto LABEL_9;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventRandomDef->base);
      goto LABEL_9;
    }
    v6 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v7 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varXString = v7;
    varScriptableEventBaseDef = v6;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
LABEL_9:
    v8 = varScriptableEventRandomDef;
    eventsA = varScriptableEventRandomDef->eventsA;
    if ( !eventsA )
      goto LABEL_16;
    if ( eventsA == (ScriptableEventDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( eventsA != (ScriptableEventDef *)-2i64 )
    {
      v8->eventsA = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventRandomDef->eventsA);
      goto LABEL_16;
    }
    v10 = varScriptableEventDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v8->eventsA = (ScriptableEventDef *)g_streamPosGlob.pos;
    varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
    Load_ScriptableEventDefArray(AtStart, varScriptableEventRandomDef->eventACount);
    varScriptableEventDef = v10;
    if ( eventsA == (ScriptableEventDef *)-1i64 )
      DB_PopSharedData();
LABEL_16:
    v11 = varScriptableEventRandomDef;
    eventsB = varScriptableEventRandomDef->eventsB;
    if ( eventsB )
    {
      if ( eventsB == (ScriptableEventDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_21:
        v13 = varScriptableEventDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v11->eventsB = (ScriptableEventDef *)g_streamPosGlob.pos;
        varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
        Load_ScriptableEventDefArray(AtStart, varScriptableEventRandomDef->eventBCount);
        varScriptableEventDef = v13;
        if ( eventsB == (ScriptableEventDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_23;
      }
      if ( eventsB == (ScriptableEventDef *)-2i64 )
        goto LABEL_21;
      v11->eventsB = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventRandomDef->eventsB);
    }
LABEL_23:
    ++i;
  }
}

/*
==============
Load_ScriptableEventRandomDefStream
==============
*/
void Load_ScriptableEventRandomDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventRandomDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  ScriptableEventRandomDef *v8; 
  ScriptableEventDef *eventsA; 
  ScriptableEventDef *v10; 
  ScriptableEventRandomDef *v11; 
  ScriptableEventDef *eventsB; 
  ScriptableEventDef *v13; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 9244, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventRandomDef;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      v4 = varScriptableEventRandomDef;
      base = varScriptableEventRandomDef->base;
      if ( !varScriptableEventRandomDef->base )
        goto LABEL_13;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( base != (ScriptableEventBaseDef *)-2i64 )
      {
        v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventRandomDef->base);
        goto LABEL_13;
      }
      v6 = varScriptableEventBaseDef;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
      varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
      v7 = varXString;
      varXString = &varScriptableEventBaseDef->name;
      Load_XString(NotAtStart);
      varXString = v7;
      varScriptableEventBaseDef = v6;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        DB_PopSharedData();
LABEL_13:
      v8 = varScriptableEventRandomDef;
      eventsA = varScriptableEventRandomDef->eventsA;
      if ( !eventsA )
        goto LABEL_20;
      if ( eventsA == (ScriptableEventDef *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( eventsA != (ScriptableEventDef *)-2i64 )
      {
        v8->eventsA = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventRandomDef->eventsA);
        goto LABEL_20;
      }
      v10 = varScriptableEventDef;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      v8->eventsA = (ScriptableEventDef *)g_streamPosGlob.pos;
      varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
      Load_ScriptableEventDefArray(AtStart, varScriptableEventRandomDef->eventACount);
      varScriptableEventDef = v10;
      if ( eventsA == (ScriptableEventDef *)-1i64 )
        DB_PopSharedData();
LABEL_20:
      v11 = varScriptableEventRandomDef;
      eventsB = varScriptableEventRandomDef->eventsB;
      if ( eventsB )
      {
        if ( eventsB == (ScriptableEventDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_25:
          v13 = varScriptableEventDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v11->eventsB = (ScriptableEventDef *)g_streamPosGlob.pos;
          varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
          Load_ScriptableEventDefArray(AtStart, varScriptableEventRandomDef->eventBCount);
          varScriptableEventDef = v13;
          if ( eventsB == (ScriptableEventDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_27;
        }
        if ( eventsB == (ScriptableEventDef *)-2i64 )
          goto LABEL_25;
        v11->eventsB = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventRandomDef->eventsB);
      }
LABEL_27:
      pos = g_streamPosGlob.pos;
      varScriptableEventRandomDef = (ScriptableEventRandomDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventRumbleDef
==============
*/
void Load_ScriptableEventRumbleDef(const DBStreamStart streamStart)
{
  ScriptableEventRumbleDef *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 
  const char **v5; 
  scr_string_t *v6; 
  const char **v7; 
  RumbleInfo **v8; 

  Load_Stream(streamStart, varScriptableEventRumbleDef, 0x38ui64);
  v1 = varScriptableEventRumbleDef;
  base = varScriptableEventRumbleDef->base;
  if ( varScriptableEventRumbleDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventRumbleDef->base);
      goto LABEL_8;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varScriptableEventBaseDef = v3;
    varXString = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v5 = varXString;
  varXString = &varScriptableEventRumbleDef->tagName;
  Load_XString(NotAtStart);
  varXString = v5;
  v6 = varscr_string_t;
  varscr_string_t = &varScriptableEventRumbleDef->scrTagName;
  Load_scr_string_t(NotAtStart);
  varscr_string_t = v6;
  v7 = varXString;
  varXString = &varScriptableEventRumbleDef->rumble;
  Load_XString(NotAtStart);
  varXString = v7;
  v8 = varRumbleInfoPtr;
  varRumbleInfoPtr = &varScriptableEventRumbleDef->rumbleAsset;
  Load_RumbleInfoPtr(NotAtStart);
  varRumbleInfoPtr = v8;
}

/*
==============
Load_ScriptableEventRumbleDefArray
==============
*/
void Load_ScriptableEventRumbleDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventRumbleDef *i; 
  ScriptableEventRumbleDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  const char **v8; 
  scr_string_t *v9; 
  const char **v10; 
  RumbleInfo **v11; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventRumbleDef, 56 * count);
  for ( i = varScriptableEventRumbleDef; v2; --v2 )
  {
    varScriptableEventRumbleDef = i;
    Load_Stream(NotAtStart, i, 0x38ui64);
    v4 = varScriptableEventRumbleDef;
    base = varScriptableEventRumbleDef->base;
    if ( varScriptableEventRumbleDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v7 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Load_XString(NotAtStart);
        varXString = v7;
        varScriptableEventBaseDef = v6;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventRumbleDef->base);
    }
LABEL_9:
    v8 = varXString;
    varXString = &varScriptableEventRumbleDef->tagName;
    Load_XString(NotAtStart);
    varXString = v8;
    v9 = varscr_string_t;
    varscr_string_t = &varScriptableEventRumbleDef->scrTagName;
    Load_scr_string_t(NotAtStart);
    varscr_string_t = v9;
    v10 = varXString;
    varXString = &varScriptableEventRumbleDef->rumble;
    Load_XString(NotAtStart);
    varXString = v10;
    v11 = varRumbleInfoPtr;
    varRumbleInfoPtr = &varScriptableEventRumbleDef->rumbleAsset;
    Load_RumbleInfoPtr(NotAtStart);
    ++i;
    varRumbleInfoPtr = v11;
  }
}

/*
==============
Load_ScriptableEventRumbleDefStream
==============
*/
void Load_ScriptableEventRumbleDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventRumbleDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  const char **v8; 
  scr_string_t *v9; 
  const char **v10; 
  RumbleInfo **v11; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 15354, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventRumbleDef;
    do
    {
      Load_Stream(AtStart, pos, 0x38ui64);
      v4 = varScriptableEventRumbleDef;
      base = varScriptableEventRumbleDef->base;
      if ( varScriptableEventRumbleDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v7 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Load_XString(NotAtStart);
          varXString = v7;
          varScriptableEventBaseDef = v6;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
        v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventRumbleDef->base);
      }
LABEL_13:
      v8 = varXString;
      varXString = &varScriptableEventRumbleDef->tagName;
      Load_XString(NotAtStart);
      varXString = v8;
      v9 = varscr_string_t;
      varscr_string_t = &varScriptableEventRumbleDef->scrTagName;
      Load_scr_string_t(NotAtStart);
      varscr_string_t = v9;
      v10 = varXString;
      varXString = &varScriptableEventRumbleDef->rumble;
      Load_XString(NotAtStart);
      varXString = v10;
      v11 = varRumbleInfoPtr;
      varRumbleInfoPtr = &varScriptableEventRumbleDef->rumbleAsset;
      Load_RumbleInfoPtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventRumbleDef = (ScriptableEventRumbleDef *)g_streamPosGlob.pos;
      varRumbleInfoPtr = v11;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventScreenshakeDef
==============
*/
void Load_ScriptableEventScreenshakeDef(const DBStreamStart streamStart)
{
  ScriptableEventScreenshakeDef *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 
  const char **v5; 
  scr_string_t *v6; 

  Load_Stream(streamStart, varScriptableEventScreenshakeDef, 0x50ui64);
  v1 = varScriptableEventScreenshakeDef;
  base = varScriptableEventScreenshakeDef->base;
  if ( varScriptableEventScreenshakeDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventScreenshakeDef->base);
      goto LABEL_8;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varScriptableEventBaseDef = v3;
    varXString = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v5 = varXString;
  varXString = &varScriptableEventScreenshakeDef->tagName;
  Load_XString(NotAtStart);
  varXString = v5;
  v6 = varscr_string_t;
  varscr_string_t = &varScriptableEventScreenshakeDef->scrTagName;
  Load_scr_string_t(NotAtStart);
  varscr_string_t = v6;
}

/*
==============
Load_ScriptableEventScreenshakeDefArray
==============
*/
void Load_ScriptableEventScreenshakeDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventScreenshakeDef *i; 
  ScriptableEventScreenshakeDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  const char **v8; 
  scr_string_t *v9; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventScreenshakeDef, 80 * count);
  for ( i = varScriptableEventScreenshakeDef; v2; --v2 )
  {
    varScriptableEventScreenshakeDef = i;
    Load_Stream(NotAtStart, i, 0x50ui64);
    v4 = varScriptableEventScreenshakeDef;
    base = varScriptableEventScreenshakeDef->base;
    if ( varScriptableEventScreenshakeDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v7 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Load_XString(NotAtStart);
        varXString = v7;
        varScriptableEventBaseDef = v6;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventScreenshakeDef->base);
    }
LABEL_9:
    v8 = varXString;
    varXString = &varScriptableEventScreenshakeDef->tagName;
    Load_XString(NotAtStart);
    varXString = v8;
    v9 = varscr_string_t;
    varscr_string_t = &varScriptableEventScreenshakeDef->scrTagName;
    Load_scr_string_t(NotAtStart);
    ++i;
    varscr_string_t = v9;
  }
}

/*
==============
Load_ScriptableEventScreenshakeDefStream
==============
*/
void Load_ScriptableEventScreenshakeDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventScreenshakeDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  const char **v8; 
  scr_string_t *v9; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 15877, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventScreenshakeDef;
    do
    {
      Load_Stream(AtStart, pos, 0x50ui64);
      v4 = varScriptableEventScreenshakeDef;
      base = varScriptableEventScreenshakeDef->base;
      if ( varScriptableEventScreenshakeDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v7 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Load_XString(NotAtStart);
          varXString = v7;
          varScriptableEventBaseDef = v6;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
        v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventScreenshakeDef->base);
      }
LABEL_13:
      v8 = varXString;
      varXString = &varScriptableEventScreenshakeDef->tagName;
      Load_XString(NotAtStart);
      varXString = v8;
      v9 = varscr_string_t;
      varscr_string_t = &varScriptableEventScreenshakeDef->scrTagName;
      Load_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventScreenshakeDef = (ScriptableEventScreenshakeDef *)g_streamPosGlob.pos;
      varscr_string_t = v9;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventScriptDamageDef
==============
*/
void Load_ScriptableEventScriptDamageDef(const DBStreamStart streamStart)
{
  ScriptableEventScriptDamageDef *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 
  const char **v5; 
  scr_string_t *v6; 

  Load_Stream(streamStart, varScriptableEventScriptDamageDef, 0x18ui64);
  v1 = varScriptableEventScriptDamageDef;
  base = varScriptableEventScriptDamageDef->base;
  if ( varScriptableEventScriptDamageDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventScriptDamageDef->base);
      goto LABEL_8;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varScriptableEventBaseDef = v3;
    varXString = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v5 = varXString;
  varXString = &varScriptableEventScriptDamageDef->notification;
  Load_XString(NotAtStart);
  varXString = v5;
  v6 = varscr_string_t;
  varscr_string_t = &varScriptableEventScriptDamageDef->scrNotification;
  Load_scr_string_t(NotAtStart);
  varscr_string_t = v6;
}

/*
==============
Load_ScriptableEventScriptDamageDefArray
==============
*/
void Load_ScriptableEventScriptDamageDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventScriptDamageDef *i; 
  ScriptableEventScriptDamageDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  const char **v8; 
  scr_string_t *v9; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventScriptDamageDef, 24 * count);
  for ( i = varScriptableEventScriptDamageDef; v2; --v2 )
  {
    varScriptableEventScriptDamageDef = i;
    Load_Stream(NotAtStart, i, 0x18ui64);
    v4 = varScriptableEventScriptDamageDef;
    base = varScriptableEventScriptDamageDef->base;
    if ( varScriptableEventScriptDamageDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v7 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Load_XString(NotAtStart);
        varXString = v7;
        varScriptableEventBaseDef = v6;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventScriptDamageDef->base);
    }
LABEL_9:
    v8 = varXString;
    varXString = &varScriptableEventScriptDamageDef->notification;
    Load_XString(NotAtStart);
    varXString = v8;
    v9 = varscr_string_t;
    varscr_string_t = &varScriptableEventScriptDamageDef->scrNotification;
    Load_scr_string_t(NotAtStart);
    ++i;
    varscr_string_t = v9;
  }
}

/*
==============
Load_ScriptableEventScriptDamageDefStream
==============
*/
void Load_ScriptableEventScriptDamageDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventScriptDamageDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  const char **v8; 
  scr_string_t *v9; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 20925, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventScriptDamageDef;
    do
    {
      Load_Stream(AtStart, pos, 0x18ui64);
      v4 = varScriptableEventScriptDamageDef;
      base = varScriptableEventScriptDamageDef->base;
      if ( varScriptableEventScriptDamageDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v7 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Load_XString(NotAtStart);
          varXString = v7;
          varScriptableEventBaseDef = v6;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
        v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventScriptDamageDef->base);
      }
LABEL_13:
      v8 = varXString;
      varXString = &varScriptableEventScriptDamageDef->notification;
      Load_XString(NotAtStart);
      varXString = v8;
      v9 = varscr_string_t;
      varscr_string_t = &varScriptableEventScriptDamageDef->scrNotification;
      Load_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventScriptDamageDef = (ScriptableEventScriptDamageDef *)g_streamPosGlob.pos;
      varscr_string_t = v9;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventScriptDef
==============
*/
void Load_ScriptableEventScriptDef(const DBStreamStart streamStart)
{
  ScriptableEventScriptDef *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 
  const char **v5; 
  scr_string_t *v6; 

  Load_Stream(streamStart, varScriptableEventScriptDef, 0x20ui64);
  v1 = varScriptableEventScriptDef;
  base = varScriptableEventScriptDef->base;
  if ( varScriptableEventScriptDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventScriptDef->base);
      goto LABEL_8;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varScriptableEventBaseDef = v3;
    varXString = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v5 = varXString;
  varXString = &varScriptableEventScriptDef->notification;
  Load_XString(NotAtStart);
  varXString = v5;
  v6 = varscr_string_t;
  varscr_string_t = &varScriptableEventScriptDef->scrNotification;
  Load_scr_string_t(NotAtStart);
  varscr_string_t = v6;
}

/*
==============
Load_ScriptableEventScriptDefArray
==============
*/
void Load_ScriptableEventScriptDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventScriptDef *i; 
  ScriptableEventScriptDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  const char **v8; 
  scr_string_t *v9; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventScriptDef, 32 * count);
  for ( i = varScriptableEventScriptDef; v2; --v2 )
  {
    varScriptableEventScriptDef = i;
    Load_Stream(NotAtStart, i, 0x20ui64);
    v4 = varScriptableEventScriptDef;
    base = varScriptableEventScriptDef->base;
    if ( varScriptableEventScriptDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v7 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Load_XString(NotAtStart);
        varXString = v7;
        varScriptableEventBaseDef = v6;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventScriptDef->base);
    }
LABEL_9:
    v8 = varXString;
    varXString = &varScriptableEventScriptDef->notification;
    Load_XString(NotAtStart);
    varXString = v8;
    v9 = varscr_string_t;
    varscr_string_t = &varScriptableEventScriptDef->scrNotification;
    Load_scr_string_t(NotAtStart);
    ++i;
    varscr_string_t = v9;
  }
}

/*
==============
Load_ScriptableEventScriptDefStream
==============
*/
void Load_ScriptableEventScriptDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventScriptDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  const char **v8; 
  scr_string_t *v9; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 9445, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventScriptDef;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      v4 = varScriptableEventScriptDef;
      base = varScriptableEventScriptDef->base;
      if ( varScriptableEventScriptDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v7 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Load_XString(NotAtStart);
          varXString = v7;
          varScriptableEventBaseDef = v6;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
        v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventScriptDef->base);
      }
LABEL_13:
      v8 = varXString;
      varXString = &varScriptableEventScriptDef->notification;
      Load_XString(NotAtStart);
      varXString = v8;
      v9 = varscr_string_t;
      varscr_string_t = &varScriptableEventScriptDef->scrNotification;
      Load_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventScriptDef = (ScriptableEventScriptDef *)g_streamPosGlob.pos;
      varscr_string_t = v9;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventSetMayhemDef
==============
*/
void Load_ScriptableEventSetMayhemDef(const DBStreamStart streamStart)
{
  ScriptableEventSetMayhemDef *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 
  MayhemData **v5; 

  Load_Stream(streamStart, varScriptableEventSetMayhemDef, 0x18ui64);
  v1 = varScriptableEventSetMayhemDef;
  base = varScriptableEventSetMayhemDef->base;
  if ( varScriptableEventSetMayhemDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventSetMayhemDef->base);
      goto LABEL_8;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varScriptableEventBaseDef = v3;
    varXString = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v5 = varMayhemDataPtr;
  varMayhemDataPtr = &varScriptableEventSetMayhemDef->mayhem;
  Load_MayhemDataPtr(NotAtStart);
  varMayhemDataPtr = v5;
}

/*
==============
Load_ScriptableEventSetMayhemDefArray
==============
*/
void Load_ScriptableEventSetMayhemDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventSetMayhemDef *i; 
  ScriptableEventSetMayhemDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  MayhemData **v8; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventSetMayhemDef, 24 * count);
  for ( i = varScriptableEventSetMayhemDef; v2; --v2 )
  {
    varScriptableEventSetMayhemDef = i;
    Load_Stream(NotAtStart, i, 0x18ui64);
    v4 = varScriptableEventSetMayhemDef;
    base = varScriptableEventSetMayhemDef->base;
    if ( varScriptableEventSetMayhemDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v7 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Load_XString(NotAtStart);
        varXString = v7;
        varScriptableEventBaseDef = v6;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventSetMayhemDef->base);
    }
LABEL_9:
    v8 = varMayhemDataPtr;
    varMayhemDataPtr = &varScriptableEventSetMayhemDef->mayhem;
    Load_MayhemDataPtr(NotAtStart);
    ++i;
    varMayhemDataPtr = v8;
  }
}

/*
==============
Load_ScriptableEventSetMayhemDefStream
==============
*/
void Load_ScriptableEventSetMayhemDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventSetMayhemDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  MayhemData **v8; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 16304, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventSetMayhemDef;
    do
    {
      Load_Stream(AtStart, pos, 0x18ui64);
      v4 = varScriptableEventSetMayhemDef;
      base = varScriptableEventSetMayhemDef->base;
      if ( varScriptableEventSetMayhemDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v7 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Load_XString(NotAtStart);
          varXString = v7;
          varScriptableEventBaseDef = v6;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
        v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventSetMayhemDef->base);
      }
LABEL_13:
      v8 = varMayhemDataPtr;
      varMayhemDataPtr = &varScriptableEventSetMayhemDef->mayhem;
      Load_MayhemDataPtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventSetMayhemDef = (ScriptableEventSetMayhemDef *)g_streamPosGlob.pos;
      varMayhemDataPtr = v8;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventSoundDef
==============
*/
void Load_ScriptableEventSoundDef(const DBStreamStart streamStart)
{
  ScriptableEventSoundDef *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 
  const char **v5; 
  scr_string_t *v6; 
  const char **v7; 

  Load_Stream(streamStart, varScriptableEventSoundDef, 0x58ui64);
  v1 = varScriptableEventSoundDef;
  base = varScriptableEventSoundDef->base;
  if ( varScriptableEventSoundDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventSoundDef->base);
      goto LABEL_8;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varScriptableEventBaseDef = v3;
    varXString = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v5 = varXString;
  varXString = &varScriptableEventSoundDef->tagName;
  Load_XString(NotAtStart);
  varXString = v5;
  v6 = varscr_string_t;
  varscr_string_t = &varScriptableEventSoundDef->scrTagName;
  Load_scr_string_t(NotAtStart);
  varscr_string_t = v6;
  v7 = varXString;
  varXString = &varScriptableEventSoundDef->soundAlias;
  Load_XString(NotAtStart);
  varXString = &varScriptableEventSoundDef->explosionReflClass;
  Load_XString(NotAtStart);
  varXString = v7;
}

/*
==============
Load_ScriptableEventSoundDefArray
==============
*/
void Load_ScriptableEventSoundDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventSoundDef *i; 
  ScriptableEventSoundDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  const char **v8; 
  scr_string_t *v9; 
  const char **v10; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventSoundDef, 88 * count);
  for ( i = varScriptableEventSoundDef; v2; --v2 )
  {
    varScriptableEventSoundDef = i;
    Load_Stream(NotAtStart, i, 0x58ui64);
    v4 = varScriptableEventSoundDef;
    base = varScriptableEventSoundDef->base;
    if ( varScriptableEventSoundDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v7 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Load_XString(NotAtStart);
        varXString = v7;
        varScriptableEventBaseDef = v6;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventSoundDef->base);
    }
LABEL_9:
    v8 = varXString;
    varXString = &varScriptableEventSoundDef->tagName;
    Load_XString(NotAtStart);
    varXString = v8;
    v9 = varscr_string_t;
    varscr_string_t = &varScriptableEventSoundDef->scrTagName;
    Load_scr_string_t(NotAtStart);
    varscr_string_t = v9;
    v10 = varXString;
    varXString = &varScriptableEventSoundDef->soundAlias;
    Load_XString(NotAtStart);
    varXString = &varScriptableEventSoundDef->explosionReflClass;
    Load_XString(NotAtStart);
    ++i;
    varXString = v10;
  }
}

/*
==============
Load_ScriptableEventSoundDefStream
==============
*/
void Load_ScriptableEventSoundDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventSoundDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  const char **v8; 
  scr_string_t *v9; 
  const char **v10; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 13797, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventSoundDef;
    do
    {
      Load_Stream(AtStart, pos, 0x58ui64);
      v4 = varScriptableEventSoundDef;
      base = varScriptableEventSoundDef->base;
      if ( varScriptableEventSoundDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v7 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Load_XString(NotAtStart);
          varXString = v7;
          varScriptableEventBaseDef = v6;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
        v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventSoundDef->base);
      }
LABEL_13:
      v8 = varXString;
      varXString = &varScriptableEventSoundDef->tagName;
      Load_XString(NotAtStart);
      varXString = v8;
      v9 = varscr_string_t;
      varscr_string_t = &varScriptableEventSoundDef->scrTagName;
      Load_scr_string_t(NotAtStart);
      varscr_string_t = v9;
      v10 = varXString;
      varXString = &varScriptableEventSoundDef->soundAlias;
      Load_XString(NotAtStart);
      varXString = &varScriptableEventSoundDef->explosionReflClass;
      Load_XString(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventSoundDef = (ScriptableEventSoundDef *)g_streamPosGlob.pos;
      varXString = v10;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventSpatialDisableDef
==============
*/
void Load_ScriptableEventSpatialDisableDef(const DBStreamStart streamStart)
{
  ScriptableEventSpatialDisableDef *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 

  Load_Stream(streamStart, varScriptableEventSpatialDisableDef, 0x10ui64);
  v1 = varScriptableEventSpatialDisableDef;
  base = varScriptableEventSpatialDisableDef->base;
  if ( varScriptableEventSpatialDisableDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventSpatialDisableDef->base);
      return;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varScriptableEventBaseDef = v3;
    varXString = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Load_ScriptableEventSpatialDisableDefArray
==============
*/
void Load_ScriptableEventSpatialDisableDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventSpatialDisableDef *i; 
  ScriptableEventSpatialDisableDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventSpatialDisableDef, 16 * count);
  for ( i = varScriptableEventSpatialDisableDef; v2; --v2 )
  {
    varScriptableEventSpatialDisableDef = i;
    Load_Stream(NotAtStart, i, 0x10ui64);
    v4 = varScriptableEventSpatialDisableDef;
    base = varScriptableEventSpatialDisableDef->base;
    if ( varScriptableEventSpatialDisableDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v7 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Load_XString(NotAtStart);
        varXString = v7;
        varScriptableEventBaseDef = v6;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventSpatialDisableDef->base);
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Load_ScriptableEventSpatialDisableDefStream
==============
*/
void Load_ScriptableEventSpatialDisableDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventSpatialDisableDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 20213, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventSpatialDisableDef;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      v4 = varScriptableEventSpatialDisableDef;
      base = varScriptableEventSpatialDisableDef->base;
      if ( varScriptableEventSpatialDisableDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v7 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Load_XString(NotAtStart);
          varXString = v7;
          varScriptableEventBaseDef = v6;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
        v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventSpatialDisableDef->base);
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableEventSpatialDisableDef = (ScriptableEventSpatialDisableDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventSpawnDynentDef
==============
*/
void Load_ScriptableEventSpawnDynentDef(const DBStreamStart streamStart)
{
  ScriptableEventSpawnDynentDef *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 
  XModel **v5; 
  const char **v6; 
  scr_string_t *v7; 
  const char **v8; 
  FxCombinedDef *v9; 

  Load_Stream(streamStart, varScriptableEventSpawnDynentDef, 0x70ui64);
  v1 = varScriptableEventSpawnDynentDef;
  base = varScriptableEventSpawnDynentDef->base;
  if ( varScriptableEventSpawnDynentDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventSpawnDynentDef->base);
      goto LABEL_8;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varScriptableEventBaseDef = v3;
    varXString = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v5 = varXModelPtr;
  varXModelPtr = &varScriptableEventSpawnDynentDef->model;
  Load_XModelPtr(NotAtStart);
  varXModelPtr = v5;
  v6 = varXString;
  varXString = &varScriptableEventSpawnDynentDef->tagName;
  Load_XString(NotAtStart);
  varXString = v6;
  v7 = varscr_string_t;
  varscr_string_t = &varScriptableEventSpawnDynentDef->scrTagName;
  Load_scr_string_t(NotAtStart);
  varscr_string_t = v7;
  v8 = varXString;
  varXString = &varScriptableEventSpawnDynentDef->effectAlias;
  Load_XString(NotAtStart);
  varXString = v8;
  v9 = varFxCombinedDef;
  varFxCombinedDef = &varScriptableEventSpawnDynentDef->effectDef;
  Load_FxCombinedDef(NotAtStart);
  varFxCombinedDef = v9;
}

/*
==============
Load_ScriptableEventSpawnDynentDefArray
==============
*/
void Load_ScriptableEventSpawnDynentDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventSpawnDynentDef *i; 
  ScriptableEventSpawnDynentDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  XModel **v8; 
  const char **v9; 
  scr_string_t *v10; 
  const char **v11; 
  FxCombinedDef *v12; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventSpawnDynentDef, 112 * count);
  for ( i = varScriptableEventSpawnDynentDef; v2; --v2 )
  {
    varScriptableEventSpawnDynentDef = i;
    Load_Stream(NotAtStart, i, 0x70ui64);
    v4 = varScriptableEventSpawnDynentDef;
    base = varScriptableEventSpawnDynentDef->base;
    if ( varScriptableEventSpawnDynentDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v7 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Load_XString(NotAtStart);
        varXString = v7;
        varScriptableEventBaseDef = v6;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventSpawnDynentDef->base);
    }
LABEL_9:
    v8 = varXModelPtr;
    varXModelPtr = &varScriptableEventSpawnDynentDef->model;
    Load_XModelPtr(NotAtStart);
    varXModelPtr = v8;
    v9 = varXString;
    varXString = &varScriptableEventSpawnDynentDef->tagName;
    Load_XString(NotAtStart);
    varXString = v9;
    v10 = varscr_string_t;
    varscr_string_t = &varScriptableEventSpawnDynentDef->scrTagName;
    Load_scr_string_t(NotAtStart);
    varscr_string_t = v10;
    v11 = varXString;
    varXString = &varScriptableEventSpawnDynentDef->effectAlias;
    Load_XString(NotAtStart);
    varXString = v11;
    v12 = varFxCombinedDef;
    varFxCombinedDef = &varScriptableEventSpawnDynentDef->effectDef;
    Load_FxCombinedDef(NotAtStart);
    ++i;
    varFxCombinedDef = v12;
  }
}

/*
==============
Load_ScriptableEventSpawnDynentDefStream
==============
*/
void Load_ScriptableEventSpawnDynentDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventSpawnDynentDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  XModel **v8; 
  const char **v9; 
  scr_string_t *v10; 
  const char **v11; 
  FxCombinedDef *v12; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 12065, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventSpawnDynentDef;
    do
    {
      Load_Stream(AtStart, pos, 0x70ui64);
      v4 = varScriptableEventSpawnDynentDef;
      base = varScriptableEventSpawnDynentDef->base;
      if ( varScriptableEventSpawnDynentDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v7 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Load_XString(NotAtStart);
          varXString = v7;
          varScriptableEventBaseDef = v6;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
        v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventSpawnDynentDef->base);
      }
LABEL_13:
      v8 = varXModelPtr;
      varXModelPtr = &varScriptableEventSpawnDynentDef->model;
      Load_XModelPtr(NotAtStart);
      varXModelPtr = v8;
      v9 = varXString;
      varXString = &varScriptableEventSpawnDynentDef->tagName;
      Load_XString(NotAtStart);
      varXString = v9;
      v10 = varscr_string_t;
      varscr_string_t = &varScriptableEventSpawnDynentDef->scrTagName;
      Load_scr_string_t(NotAtStart);
      varscr_string_t = v10;
      v11 = varXString;
      varXString = &varScriptableEventSpawnDynentDef->effectAlias;
      Load_XString(NotAtStart);
      varXString = v11;
      v12 = varFxCombinedDef;
      varFxCombinedDef = &varScriptableEventSpawnDynentDef->effectDef;
      Load_FxCombinedDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventSpawnDynentDef = (ScriptableEventSpawnDynentDef *)g_streamPosGlob.pos;
      varFxCombinedDef = v12;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventStateChangeDef
==============
*/
void Load_ScriptableEventStateChangeDef(const DBStreamStart streamStart)
{
  ScriptableEventStateChangeDef *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 

  Load_Stream(streamStart, varScriptableEventStateChangeDef, 0x18ui64);
  v1 = varScriptableEventStateChangeDef;
  base = varScriptableEventStateChangeDef->base;
  if ( varScriptableEventStateChangeDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventStateChangeDef->base);
      return;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varScriptableEventBaseDef = v3;
    varXString = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Load_ScriptableEventStateChangeDefArray
==============
*/
void Load_ScriptableEventStateChangeDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventStateChangeDef *i; 
  ScriptableEventStateChangeDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventStateChangeDef, 24 * count);
  for ( i = varScriptableEventStateChangeDef; v2; --v2 )
  {
    varScriptableEventStateChangeDef = i;
    Load_Stream(NotAtStart, i, 0x18ui64);
    v4 = varScriptableEventStateChangeDef;
    base = varScriptableEventStateChangeDef->base;
    if ( varScriptableEventStateChangeDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v7 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Load_XString(NotAtStart);
        varXString = v7;
        varScriptableEventBaseDef = v6;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventStateChangeDef->base);
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Load_ScriptableEventStateChangeDefStream
==============
*/
void Load_ScriptableEventStateChangeDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventStateChangeDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 8709, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventStateChangeDef;
    do
    {
      Load_Stream(AtStart, pos, 0x18ui64);
      v4 = varScriptableEventStateChangeDef;
      base = varScriptableEventStateChangeDef->base;
      if ( varScriptableEventStateChangeDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v7 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Load_XString(NotAtStart);
          varXString = v7;
          varScriptableEventBaseDef = v6;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
        v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventStateChangeDef->base);
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableEventStateChangeDef = (ScriptableEventStateChangeDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventSunDef
==============
*/
void Load_ScriptableEventSunDef(const DBStreamStart streamStart)
{
  ScriptableEventSunDef *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 

  Load_Stream(streamStart, varScriptableEventSunDef, 0x48ui64);
  v1 = varScriptableEventSunDef;
  base = varScriptableEventSunDef->base;
  if ( varScriptableEventSunDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventSunDef->base);
      return;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varScriptableEventBaseDef = v3;
    varXString = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Load_ScriptableEventSunDefArray
==============
*/
void Load_ScriptableEventSunDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventSunDef *i; 
  ScriptableEventSunDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventSunDef, 72 * count);
  for ( i = varScriptableEventSunDef; v2; --v2 )
  {
    varScriptableEventSunDef = i;
    Load_Stream(NotAtStart, i, 0x48ui64);
    v4 = varScriptableEventSunDef;
    base = varScriptableEventSunDef->base;
    if ( varScriptableEventSunDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v7 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Load_XString(NotAtStart);
        varXString = v7;
        varScriptableEventBaseDef = v6;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventSunDef->base);
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Load_ScriptableEventSunDefStream
==============
*/
void Load_ScriptableEventSunDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventSunDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 15084, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventSunDef;
    do
    {
      Load_Stream(AtStart, pos, 0x48ui64);
      v4 = varScriptableEventSunDef;
      base = varScriptableEventSunDef->base;
      if ( varScriptableEventSunDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v7 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Load_XString(NotAtStart);
          varXString = v7;
          varScriptableEventBaseDef = v6;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
        v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventSunDef->base);
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableEventSunDef = (ScriptableEventSunDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventTeamSelectorDef
==============
*/
void Load_ScriptableEventTeamSelectorDef(const DBStreamStart streamStart)
{
  ScriptableEventTeamSelectorDef *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 
  ScriptableEventTeamSelectorDef *v5; 
  ScriptableEventDef *eventsPass; 
  ScriptableEventDef *v7; 
  ScriptableEventTeamSelectorDef *v8; 
  ScriptableEventDef *eventsFail; 
  ScriptableEventDef *v10; 

  Load_Stream(streamStart, varScriptableEventTeamSelectorDef, 0x38ui64);
  v1 = varScriptableEventTeamSelectorDef;
  base = varScriptableEventTeamSelectorDef->base;
  if ( varScriptableEventTeamSelectorDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventTeamSelectorDef->base);
      goto LABEL_8;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varXString = v4;
    varScriptableEventBaseDef = v3;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v5 = varScriptableEventTeamSelectorDef;
  eventsPass = varScriptableEventTeamSelectorDef->eventsPass;
  if ( !eventsPass )
    goto LABEL_15;
  if ( eventsPass == (ScriptableEventDef *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( eventsPass != (ScriptableEventDef *)-2i64 )
  {
    v5->eventsPass = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventTeamSelectorDef->eventsPass);
    goto LABEL_15;
  }
  v7 = varScriptableEventDef;
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  v5->eventsPass = (ScriptableEventDef *)g_streamPosGlob.pos;
  varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
  Load_ScriptableEventDefArray(AtStart, varScriptableEventTeamSelectorDef->eventPassCount);
  varScriptableEventDef = v7;
  if ( eventsPass == (ScriptableEventDef *)-1i64 )
    DB_PopSharedData();
LABEL_15:
  v8 = varScriptableEventTeamSelectorDef;
  eventsFail = varScriptableEventTeamSelectorDef->eventsFail;
  if ( !eventsFail )
    return;
  if ( eventsFail == (ScriptableEventDef *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( eventsFail != (ScriptableEventDef *)-2i64 )
  {
    v8->eventsFail = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventTeamSelectorDef->eventsFail);
    return;
  }
  v10 = varScriptableEventDef;
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  v8->eventsFail = (ScriptableEventDef *)g_streamPosGlob.pos;
  varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
  Load_ScriptableEventDefArray(AtStart, varScriptableEventTeamSelectorDef->eventFailCount);
  varScriptableEventDef = v10;
  if ( eventsFail == (ScriptableEventDef *)-1i64 )
    DB_PopSharedData();
}

/*
==============
Load_ScriptableEventTeamSelectorDefArray
==============
*/
void Load_ScriptableEventTeamSelectorDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventTeamSelectorDef *i; 
  ScriptableEventTeamSelectorDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  ScriptableEventTeamSelectorDef *v8; 
  ScriptableEventDef *eventsPass; 
  ScriptableEventDef *v10; 
  ScriptableEventTeamSelectorDef *v11; 
  ScriptableEventDef *eventsFail; 
  ScriptableEventDef *v13; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventTeamSelectorDef, 56 * count);
  for ( i = varScriptableEventTeamSelectorDef; v2; --v2 )
  {
    varScriptableEventTeamSelectorDef = i;
    Load_Stream(NotAtStart, i, 0x38ui64);
    v4 = varScriptableEventTeamSelectorDef;
    base = varScriptableEventTeamSelectorDef->base;
    if ( !varScriptableEventTeamSelectorDef->base )
      goto LABEL_9;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventTeamSelectorDef->base);
      goto LABEL_9;
    }
    v6 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v7 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varXString = v7;
    varScriptableEventBaseDef = v6;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
LABEL_9:
    v8 = varScriptableEventTeamSelectorDef;
    eventsPass = varScriptableEventTeamSelectorDef->eventsPass;
    if ( !eventsPass )
      goto LABEL_16;
    if ( eventsPass == (ScriptableEventDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( eventsPass != (ScriptableEventDef *)-2i64 )
    {
      v8->eventsPass = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventTeamSelectorDef->eventsPass);
      goto LABEL_16;
    }
    v10 = varScriptableEventDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v8->eventsPass = (ScriptableEventDef *)g_streamPosGlob.pos;
    varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
    Load_ScriptableEventDefArray(AtStart, varScriptableEventTeamSelectorDef->eventPassCount);
    varScriptableEventDef = v10;
    if ( eventsPass == (ScriptableEventDef *)-1i64 )
      DB_PopSharedData();
LABEL_16:
    v11 = varScriptableEventTeamSelectorDef;
    eventsFail = varScriptableEventTeamSelectorDef->eventsFail;
    if ( eventsFail )
    {
      if ( eventsFail == (ScriptableEventDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_21:
        v13 = varScriptableEventDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v11->eventsFail = (ScriptableEventDef *)g_streamPosGlob.pos;
        varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
        Load_ScriptableEventDefArray(AtStart, varScriptableEventTeamSelectorDef->eventFailCount);
        varScriptableEventDef = v13;
        if ( eventsFail == (ScriptableEventDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_23;
      }
      if ( eventsFail == (ScriptableEventDef *)-2i64 )
        goto LABEL_21;
      v11->eventsFail = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventTeamSelectorDef->eventsFail);
    }
LABEL_23:
    ++i;
  }
}

/*
==============
Load_ScriptableEventTeamSelectorDefStream
==============
*/
void Load_ScriptableEventTeamSelectorDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventTeamSelectorDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  ScriptableEventTeamSelectorDef *v8; 
  ScriptableEventDef *eventsPass; 
  ScriptableEventDef *v10; 
  ScriptableEventTeamSelectorDef *v11; 
  ScriptableEventDef *eventsFail; 
  ScriptableEventDef *v13; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 17552, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventTeamSelectorDef;
    do
    {
      Load_Stream(AtStart, pos, 0x38ui64);
      v4 = varScriptableEventTeamSelectorDef;
      base = varScriptableEventTeamSelectorDef->base;
      if ( !varScriptableEventTeamSelectorDef->base )
        goto LABEL_13;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( base != (ScriptableEventBaseDef *)-2i64 )
      {
        v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventTeamSelectorDef->base);
        goto LABEL_13;
      }
      v6 = varScriptableEventBaseDef;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
      varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
      v7 = varXString;
      varXString = &varScriptableEventBaseDef->name;
      Load_XString(NotAtStart);
      varXString = v7;
      varScriptableEventBaseDef = v6;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        DB_PopSharedData();
LABEL_13:
      v8 = varScriptableEventTeamSelectorDef;
      eventsPass = varScriptableEventTeamSelectorDef->eventsPass;
      if ( !eventsPass )
        goto LABEL_20;
      if ( eventsPass == (ScriptableEventDef *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( eventsPass != (ScriptableEventDef *)-2i64 )
      {
        v8->eventsPass = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventTeamSelectorDef->eventsPass);
        goto LABEL_20;
      }
      v10 = varScriptableEventDef;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      v8->eventsPass = (ScriptableEventDef *)g_streamPosGlob.pos;
      varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
      Load_ScriptableEventDefArray(AtStart, varScriptableEventTeamSelectorDef->eventPassCount);
      varScriptableEventDef = v10;
      if ( eventsPass == (ScriptableEventDef *)-1i64 )
        DB_PopSharedData();
LABEL_20:
      v11 = varScriptableEventTeamSelectorDef;
      eventsFail = varScriptableEventTeamSelectorDef->eventsFail;
      if ( eventsFail )
      {
        if ( eventsFail == (ScriptableEventDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_25:
          v13 = varScriptableEventDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v11->eventsFail = (ScriptableEventDef *)g_streamPosGlob.pos;
          varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
          Load_ScriptableEventDefArray(AtStart, varScriptableEventTeamSelectorDef->eventFailCount);
          varScriptableEventDef = v13;
          if ( eventsFail == (ScriptableEventDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_27;
        }
        if ( eventsFail == (ScriptableEventDef *)-2i64 )
          goto LABEL_25;
        v11->eventsFail = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventTeamSelectorDef->eventsFail);
      }
LABEL_27:
      pos = g_streamPosGlob.pos;
      varScriptableEventTeamSelectorDef = (ScriptableEventTeamSelectorDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventVehicleBlowUpTireDef
==============
*/
void Load_ScriptableEventVehicleBlowUpTireDef(const DBStreamStart streamStart)
{
  ScriptableEventVehicleBlowUpTireDef *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 

  Load_Stream(streamStart, varScriptableEventVehicleBlowUpTireDef, 0x10ui64);
  v1 = varScriptableEventVehicleBlowUpTireDef;
  base = varScriptableEventVehicleBlowUpTireDef->base;
  if ( varScriptableEventVehicleBlowUpTireDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventVehicleBlowUpTireDef->base);
      return;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varScriptableEventBaseDef = v3;
    varXString = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Load_ScriptableEventVehicleBlowUpTireDefArray
==============
*/
void Load_ScriptableEventVehicleBlowUpTireDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventVehicleBlowUpTireDef *i; 
  ScriptableEventVehicleBlowUpTireDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventVehicleBlowUpTireDef, 16 * count);
  for ( i = varScriptableEventVehicleBlowUpTireDef; v2; --v2 )
  {
    varScriptableEventVehicleBlowUpTireDef = i;
    Load_Stream(NotAtStart, i, 0x10ui64);
    v4 = varScriptableEventVehicleBlowUpTireDef;
    base = varScriptableEventVehicleBlowUpTireDef->base;
    if ( varScriptableEventVehicleBlowUpTireDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v7 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Load_XString(NotAtStart);
        varXString = v7;
        varScriptableEventBaseDef = v6;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventVehicleBlowUpTireDef->base);
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Load_ScriptableEventVehicleBlowUpTireDefStream
==============
*/
void Load_ScriptableEventVehicleBlowUpTireDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventVehicleBlowUpTireDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 20546, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventVehicleBlowUpTireDef;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      v4 = varScriptableEventVehicleBlowUpTireDef;
      base = varScriptableEventVehicleBlowUpTireDef->base;
      if ( varScriptableEventVehicleBlowUpTireDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v7 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Load_XString(NotAtStart);
          varXString = v7;
          varScriptableEventBaseDef = v6;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
        v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventVehicleBlowUpTireDef->base);
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableEventVehicleBlowUpTireDef = (ScriptableEventVehicleBlowUpTireDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventViewTriggerDef
==============
*/
void Load_ScriptableEventViewTriggerDef(const DBStreamStart streamStart)
{
  ScriptableEventViewTriggerDef *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 

  Load_Stream(streamStart, varScriptableEventViewTriggerDef, 0x18ui64);
  v1 = varScriptableEventViewTriggerDef;
  base = varScriptableEventViewTriggerDef->base;
  if ( varScriptableEventViewTriggerDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventViewTriggerDef->base);
      return;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varScriptableEventBaseDef = v3;
    varXString = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Load_ScriptableEventViewTriggerDefArray
==============
*/
void Load_ScriptableEventViewTriggerDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventViewTriggerDef *i; 
  ScriptableEventViewTriggerDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventViewTriggerDef, 24 * count);
  for ( i = varScriptableEventViewTriggerDef; v2; --v2 )
  {
    varScriptableEventViewTriggerDef = i;
    Load_Stream(NotAtStart, i, 0x18ui64);
    v4 = varScriptableEventViewTriggerDef;
    base = varScriptableEventViewTriggerDef->base;
    if ( varScriptableEventViewTriggerDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v7 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Load_XString(NotAtStart);
        varXString = v7;
        varScriptableEventBaseDef = v6;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventViewTriggerDef->base);
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Load_ScriptableEventViewTriggerDefStream
==============
*/
void Load_ScriptableEventViewTriggerDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventViewTriggerDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 19855, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventViewTriggerDef;
    do
    {
      Load_Stream(AtStart, pos, 0x18ui64);
      v4 = varScriptableEventViewTriggerDef;
      base = varScriptableEventViewTriggerDef->base;
      if ( varScriptableEventViewTriggerDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v7 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Load_XString(NotAtStart);
          varXString = v7;
          varScriptableEventBaseDef = v6;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
        v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventViewTriggerDef->base);
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableEventViewTriggerDef = (ScriptableEventViewTriggerDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventViewmodelChangeImageDef
==============
*/
void Load_ScriptableEventViewmodelChangeImageDef(const DBStreamStart streamStart)
{
  ScriptableEventViewmodelChangeImageDef *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 

  Load_Stream(streamStart, varScriptableEventViewmodelChangeImageDef, 0x10ui64);
  v1 = varScriptableEventViewmodelChangeImageDef;
  base = varScriptableEventViewmodelChangeImageDef->base;
  if ( varScriptableEventViewmodelChangeImageDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventViewmodelChangeImageDef->base);
      return;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varScriptableEventBaseDef = v3;
    varXString = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Load_ScriptableEventViewmodelChangeImageDefArray
==============
*/
void Load_ScriptableEventViewmodelChangeImageDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventViewmodelChangeImageDef *i; 
  ScriptableEventViewmodelChangeImageDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventViewmodelChangeImageDef, 16 * count);
  for ( i = varScriptableEventViewmodelChangeImageDef; v2; --v2 )
  {
    varScriptableEventViewmodelChangeImageDef = i;
    Load_Stream(NotAtStart, i, 0x10ui64);
    v4 = varScriptableEventViewmodelChangeImageDef;
    base = varScriptableEventViewmodelChangeImageDef->base;
    if ( varScriptableEventViewmodelChangeImageDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v7 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Load_XString(NotAtStart);
        varXString = v7;
        varScriptableEventBaseDef = v6;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventViewmodelChangeImageDef->base);
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Load_ScriptableEventViewmodelChangeImageDefStream
==============
*/
void Load_ScriptableEventViewmodelChangeImageDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventViewmodelChangeImageDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 16907, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventViewmodelChangeImageDef;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      v4 = varScriptableEventViewmodelChangeImageDef;
      base = varScriptableEventViewmodelChangeImageDef->base;
      if ( varScriptableEventViewmodelChangeImageDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v7 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Load_XString(NotAtStart);
          varXString = v7;
          varScriptableEventBaseDef = v6;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
        v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventViewmodelChangeImageDef->base);
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableEventViewmodelChangeImageDef = (ScriptableEventViewmodelChangeImageDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventViewmodelShaderParamDef
==============
*/
void Load_ScriptableEventViewmodelShaderParamDef(const DBStreamStart streamStart)
{
  ScriptableEventViewmodelShaderParamDef *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 

  Load_Stream(streamStart, varScriptableEventViewmodelShaderParamDef, 0x28ui64);
  v1 = varScriptableEventViewmodelShaderParamDef;
  base = varScriptableEventViewmodelShaderParamDef->base;
  if ( varScriptableEventViewmodelShaderParamDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventViewmodelShaderParamDef->base);
      return;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varScriptableEventBaseDef = v3;
    varXString = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Load_ScriptableEventViewmodelShaderParamDefArray
==============
*/
void Load_ScriptableEventViewmodelShaderParamDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventViewmodelShaderParamDef *i; 
  ScriptableEventViewmodelShaderParamDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventViewmodelShaderParamDef, 40 * count);
  for ( i = varScriptableEventViewmodelShaderParamDef; v2; --v2 )
  {
    varScriptableEventViewmodelShaderParamDef = i;
    Load_Stream(NotAtStart, i, 0x28ui64);
    v4 = varScriptableEventViewmodelShaderParamDef;
    base = varScriptableEventViewmodelShaderParamDef->base;
    if ( varScriptableEventViewmodelShaderParamDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v7 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Load_XString(NotAtStart);
        varXString = v7;
        varScriptableEventBaseDef = v6;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventViewmodelShaderParamDef->base);
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Load_ScriptableEventViewmodelShaderParamDefStream
==============
*/
void Load_ScriptableEventViewmodelShaderParamDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventViewmodelShaderParamDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 16752, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventViewmodelShaderParamDef;
    do
    {
      Load_Stream(AtStart, pos, 0x28ui64);
      v4 = varScriptableEventViewmodelShaderParamDef;
      base = varScriptableEventViewmodelShaderParamDef->base;
      if ( varScriptableEventViewmodelShaderParamDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v7 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Load_XString(NotAtStart);
          varXString = v7;
          varScriptableEventBaseDef = v6;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
        v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventViewmodelShaderParamDef->base);
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableEventViewmodelShaderParamDef = (ScriptableEventViewmodelShaderParamDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableEventWaitDef
==============
*/
void Load_ScriptableEventWaitDef(const DBStreamStart streamStart)
{
  ScriptableEventWaitDef *v1; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 

  Load_Stream(streamStart, varScriptableEventWaitDef, 0x18ui64);
  v1 = varScriptableEventWaitDef;
  base = varScriptableEventWaitDef->base;
  if ( varScriptableEventWaitDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v1->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventWaitDef->base);
      return;
    }
    v3 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Load_XString(NotAtStart);
    varScriptableEventBaseDef = v3;
    varXString = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Load_ScriptableEventWaitDefArray
==============
*/
void Load_ScriptableEventWaitDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventWaitDef *i; 
  ScriptableEventWaitDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventWaitDef, 24 * count);
  for ( i = varScriptableEventWaitDef; v2; --v2 )
  {
    varScriptableEventWaitDef = i;
    Load_Stream(NotAtStart, i, 0x18ui64);
    v4 = varScriptableEventWaitDef;
    base = varScriptableEventWaitDef->base;
    if ( varScriptableEventWaitDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v7 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Load_XString(NotAtStart);
        varXString = v7;
        varScriptableEventBaseDef = v6;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventWaitDef->base);
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Load_ScriptableEventWaitDefStream
==============
*/
void Load_ScriptableEventWaitDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventWaitDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 8910, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventWaitDef;
    do
    {
      Load_Stream(AtStart, pos, 0x18ui64);
      v4 = varScriptableEventWaitDef;
      base = varScriptableEventWaitDef->base;
      if ( varScriptableEventWaitDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v7 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Load_XString(NotAtStart);
          varXString = v7;
          varScriptableEventBaseDef = v6;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
        v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventWaitDef->base);
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableEventWaitDef = (ScriptableEventWaitDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableInstance
==============
*/
void Load_ScriptableInstance(const DBStreamStart streamStart)
{
  ScriptableDef **v1; 
  scr_string_t *v2; 

  Load_Stream(streamStart, varScriptableInstance, 0x48ui64);
  v1 = varScriptableDefPtr;
  varScriptableDefPtr = (ScriptableDef **)varScriptableInstance;
  Load_ScriptableDefPtr(NotAtStart);
  varScriptableDefPtr = v1;
  v2 = varscr_string_t;
  varscr_string_t = &varScriptableInstance->classname;
  Load_scr_string_t(NotAtStart);
  varscr_string_t = &varScriptableInstance->target;
  Load_scr_string_t(NotAtStart);
  varscr_string_t = &varScriptableInstance->targetname;
  Load_scr_string_t(NotAtStart);
  varscr_string_t = &varScriptableInstance->script_linkname;
  Load_scr_string_t(NotAtStart);
  varscr_string_t = &varScriptableInstance->script_linkto;
  Load_scr_string_t(NotAtStart);
  varscr_string_t = &varScriptableInstance->script_noteworthy;
  Load_scr_string_t(NotAtStart);
  varscr_string_t = v2;
}

/*
==============
Load_ScriptableInstanceArray
==============
*/
void Load_ScriptableInstanceArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableInstance *i; 
  ScriptableDef **v4; 
  scr_string_t *v5; 

  v2 = count;
  Load_Stream(streamStart, varScriptableInstance, 72 * count);
  for ( i = varScriptableInstance; v2; --v2 )
  {
    varScriptableInstance = i;
    Load_Stream(NotAtStart, i, 0x48ui64);
    v4 = varScriptableDefPtr;
    varScriptableDefPtr = (ScriptableDef **)varScriptableInstance;
    Load_ScriptableDefPtr(NotAtStart);
    varScriptableDefPtr = v4;
    v5 = varscr_string_t;
    varscr_string_t = &varScriptableInstance->classname;
    Load_scr_string_t(NotAtStart);
    varscr_string_t = &varScriptableInstance->target;
    Load_scr_string_t(NotAtStart);
    varscr_string_t = &varScriptableInstance->targetname;
    Load_scr_string_t(NotAtStart);
    varscr_string_t = &varScriptableInstance->script_linkname;
    Load_scr_string_t(NotAtStart);
    varscr_string_t = &varScriptableInstance->script_linkto;
    Load_scr_string_t(NotAtStart);
    varscr_string_t = &varScriptableInstance->script_noteworthy;
    Load_scr_string_t(NotAtStart);
    ++i;
    varscr_string_t = v5;
  }
}

/*
==============
Load_ScriptableInstanceStream
==============
*/
void Load_ScriptableInstanceStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableDef **v4; 
  scr_string_t *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 25894, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableInstance;
    do
    {
      Load_Stream(AtStart, pos, 0x48ui64);
      v4 = varScriptableDefPtr;
      varScriptableDefPtr = (ScriptableDef **)varScriptableInstance;
      Load_ScriptableDefPtr(NotAtStart);
      varScriptableDefPtr = v4;
      v5 = varscr_string_t;
      varscr_string_t = &varScriptableInstance->classname;
      Load_scr_string_t(NotAtStart);
      varscr_string_t = &varScriptableInstance->target;
      Load_scr_string_t(NotAtStart);
      varscr_string_t = &varScriptableInstance->targetname;
      Load_scr_string_t(NotAtStart);
      varscr_string_t = &varScriptableInstance->script_linkname;
      Load_scr_string_t(NotAtStart);
      varscr_string_t = &varScriptableInstance->script_linkto;
      Load_scr_string_t(NotAtStart);
      varscr_string_t = &varScriptableInstance->script_noteworthy;
      Load_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableInstance = (ScriptableInstance *)g_streamPosGlob.pos;
      varscr_string_t = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableMapEnts
==============
*/
void Load_ScriptableMapEnts(const DBStreamStart streamStart)
{
  ScriptableMapEnts *v1; 
  ScriptableInstance *v2; 
  __int64 mapInstanceCount; 
  ScriptableInstance *i; 
  ScriptableReservedDynents *v5; 
  ScriptableMapEnts *v6; 
  SpatialPartition_Population_Tree *v7; 
  SpatialPartition_Population_Tree *SpatialPartition_Population_Tree; 

  Load_Stream(streamStart, varScriptableMapEnts, 0xD8ui64);
  v1 = varScriptableMapEnts;
  if ( varScriptableMapEnts->mapInstances )
  {
    v2 = varScriptableInstance;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->mapInstances = (ScriptableInstance *)g_streamPosGlob.pos;
    varScriptableInstance = (ScriptableInstance *)g_streamPosGlob.pos;
    mapInstanceCount = varScriptableMapEnts->mapInstanceCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 72 * mapInstanceCount);
    for ( i = varScriptableInstance; mapInstanceCount; --mapInstanceCount )
    {
      varScriptableInstance = i;
      Load_ScriptableInstance(NotAtStart);
      ++i;
    }
    v1 = varScriptableMapEnts;
    varScriptableInstance = v2;
  }
  v5 = varScriptableReservedDynents;
  varScriptableReservedDynents = v1->reservedDynents;
  Load_ScriptableReservedDynents(NotAtStart);
  varScriptableReservedDynents = &varScriptableMapEnts->reservedDynents[1];
  Load_ScriptableReservedDynents(NotAtStart);
  v6 = varScriptableMapEnts;
  varScriptableReservedDynents = v5;
  if ( varScriptableMapEnts->spatialPopulationTree )
  {
    v7 = varSpatialPartition_Population_Tree;
    SpatialPartition_Population_Tree = AllocLoad_SpatialPartition_Population_Tree();
    v6->spatialPopulationTree = SpatialPartition_Population_Tree;
    varSpatialPartition_Population_Tree = SpatialPartition_Population_Tree;
    Load_SpatialPartition_Population_Tree(AtStart);
    varSpatialPartition_Population_Tree = v7;
  }
}

/*
==============
Load_ScriptableMapEntsArray
==============
*/
void Load_ScriptableMapEntsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableMapEnts *i; 
  ScriptableMapEnts *v4; 
  ScriptableInstance *v5; 
  __int64 mapInstanceCount; 
  ScriptableInstance *j; 
  ScriptableReservedDynents *v8; 
  ScriptableReservedDynents *v9; 
  ScriptableReservedDynent *v10; 
  ScriptableReservedDynents *v11; 
  ScriptableReservedDynent *v12; 
  ScriptableMapEnts *v13; 
  SpatialPartition_Population_Tree *v14; 
  SpatialPartition_Population_Tree *SpatialPartition_Population_Tree; 

  v2 = count;
  Load_Stream(streamStart, varScriptableMapEnts, 216 * count);
  for ( i = varScriptableMapEnts; v2; --v2 )
  {
    varScriptableMapEnts = i;
    Load_Stream(NotAtStart, i, 0xD8ui64);
    v4 = varScriptableMapEnts;
    if ( varScriptableMapEnts->mapInstances )
    {
      v5 = varScriptableInstance;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->mapInstances = (ScriptableInstance *)g_streamPosGlob.pos;
      varScriptableInstance = (ScriptableInstance *)g_streamPosGlob.pos;
      mapInstanceCount = varScriptableMapEnts->mapInstanceCount;
      Load_Stream(AtStart, g_streamPosGlob.pos, 72 * mapInstanceCount);
      for ( j = varScriptableInstance; mapInstanceCount; --mapInstanceCount )
      {
        varScriptableInstance = j;
        Load_ScriptableInstance(NotAtStart);
        ++j;
      }
      v4 = varScriptableMapEnts;
      varScriptableInstance = v5;
    }
    v8 = varScriptableReservedDynents;
    varScriptableReservedDynents = v4->reservedDynents;
    Load_Stream(NotAtStart, v4->reservedDynents, 0x10ui64);
    v9 = varScriptableReservedDynents;
    if ( varScriptableReservedDynents->reservedDynents )
    {
      v10 = varScriptableReservedDynent;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      v9->reservedDynents = (ScriptableReservedDynent *)g_streamPosGlob.pos;
      varScriptableReservedDynent = (ScriptableReservedDynent *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 8i64 * varScriptableReservedDynents->numReservedDynents);
      varScriptableReservedDynent = v10;
    }
    varScriptableReservedDynents = &varScriptableMapEnts->reservedDynents[1];
    Load_Stream(NotAtStart, &varScriptableMapEnts->reservedDynents[1], 0x10ui64);
    v11 = varScriptableReservedDynents;
    if ( varScriptableReservedDynents->reservedDynents )
    {
      v12 = varScriptableReservedDynent;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      v11->reservedDynents = (ScriptableReservedDynent *)g_streamPosGlob.pos;
      varScriptableReservedDynent = (ScriptableReservedDynent *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 8i64 * varScriptableReservedDynents->numReservedDynents);
      varScriptableReservedDynent = v12;
    }
    v13 = varScriptableMapEnts;
    varScriptableReservedDynents = v8;
    if ( varScriptableMapEnts->spatialPopulationTree )
    {
      v14 = varSpatialPartition_Population_Tree;
      SpatialPartition_Population_Tree = AllocLoad_SpatialPartition_Population_Tree();
      v13->spatialPopulationTree = SpatialPartition_Population_Tree;
      varSpatialPartition_Population_Tree = SpatialPartition_Population_Tree;
      Load_SpatialPartition_Population_Tree(AtStart);
      varSpatialPartition_Population_Tree = v14;
    }
    ++i;
  }
}

/*
==============
Load_ScriptableMapEntsStream
==============
*/
void Load_ScriptableMapEntsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableMapEnts *v4; 
  ScriptableInstance *v5; 
  __int64 mapInstanceCount; 
  ScriptableInstance *i; 
  ScriptableReservedDynents *v8; 
  ScriptableReservedDynents *v9; 
  ScriptableReservedDynent *v10; 
  ScriptableReservedDynents *v11; 
  ScriptableReservedDynent *v12; 
  ScriptableMapEnts *v13; 
  SpatialPartition_Population_Tree *v14; 
  SpatialPartition_Population_Tree *SpatialPartition_Population_Tree; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 26932, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableMapEnts;
    do
    {
      Load_Stream(AtStart, pos, 0xD8ui64);
      v4 = varScriptableMapEnts;
      if ( varScriptableMapEnts->mapInstances )
      {
        v5 = varScriptableInstance;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->mapInstances = (ScriptableInstance *)g_streamPosGlob.pos;
        varScriptableInstance = (ScriptableInstance *)g_streamPosGlob.pos;
        mapInstanceCount = varScriptableMapEnts->mapInstanceCount;
        Load_Stream(AtStart, g_streamPosGlob.pos, 72 * mapInstanceCount);
        for ( i = varScriptableInstance; mapInstanceCount; --mapInstanceCount )
        {
          varScriptableInstance = i;
          Load_ScriptableInstance(NotAtStart);
          ++i;
        }
        v4 = varScriptableMapEnts;
        varScriptableInstance = v5;
      }
      v8 = varScriptableReservedDynents;
      varScriptableReservedDynents = v4->reservedDynents;
      Load_Stream(NotAtStart, v4->reservedDynents, 0x10ui64);
      v9 = varScriptableReservedDynents;
      if ( varScriptableReservedDynents->reservedDynents )
      {
        v10 = varScriptableReservedDynent;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v9->reservedDynents = (ScriptableReservedDynent *)g_streamPosGlob.pos;
        varScriptableReservedDynent = (ScriptableReservedDynent *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 8i64 * varScriptableReservedDynents->numReservedDynents);
        varScriptableReservedDynent = v10;
      }
      varScriptableReservedDynents = &varScriptableMapEnts->reservedDynents[1];
      Load_Stream(NotAtStart, &varScriptableMapEnts->reservedDynents[1], 0x10ui64);
      v11 = varScriptableReservedDynents;
      if ( varScriptableReservedDynents->reservedDynents )
      {
        v12 = varScriptableReservedDynent;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v11->reservedDynents = (ScriptableReservedDynent *)g_streamPosGlob.pos;
        varScriptableReservedDynent = (ScriptableReservedDynent *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 8i64 * varScriptableReservedDynents->numReservedDynents);
        varScriptableReservedDynent = v12;
      }
      v13 = varScriptableMapEnts;
      varScriptableReservedDynents = v8;
      if ( varScriptableMapEnts->spatialPopulationTree )
      {
        v14 = varSpatialPartition_Population_Tree;
        SpatialPartition_Population_Tree = AllocLoad_SpatialPartition_Population_Tree();
        v13->spatialPopulationTree = SpatialPartition_Population_Tree;
        varSpatialPartition_Population_Tree = SpatialPartition_Population_Tree;
        Load_SpatialPartition_Population_Tree(AtStart);
        varSpatialPartition_Population_Tree = v14;
      }
      pos = g_streamPosGlob.pos;
      varScriptableMapEnts = (ScriptableMapEnts *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableModelUnion
==============
*/
void Load_ScriptableModelUnion(const DBStreamStart streamStart)
{
  ScriptableDataType dataType; 
  XCompositeModelDef **v2; 
  XModel **v3; 

  dataType = varScriptableEventModelDef->dataType;
  if ( dataType == SCRIPTABLE_DATA_TYPE_XCOMPOSITEMODEL )
  {
    v2 = varXCompositeModelDefPtr;
    varXCompositeModelDefPtr = &varScriptableModelUnion->compositeModel;
    Load_XCompositeModelDefPtr(streamStart);
    varXCompositeModelDefPtr = v2;
  }
  else if ( dataType == SCRIPTABLE_DATA_TYPE_XMODEL )
  {
    v3 = varXModelPtr;
    varXModelPtr = (XModel **)varScriptableModelUnion;
    Load_XModelPtr(streamStart);
    varXModelPtr = v3;
  }
}

/*
==============
Load_ScriptableModelUnionArray
==============
*/
void Load_ScriptableModelUnionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableModelUnion *i; 
  ScriptableDataType dataType; 
  XCompositeModelDef **v5; 
  XModel **v6; 

  v2 = count;
  Load_Stream(streamStart, varScriptableModelUnion, 8 * count);
  for ( i = varScriptableModelUnion; v2; --v2 )
  {
    varScriptableModelUnion = i;
    dataType = varScriptableEventModelDef->dataType;
    if ( dataType == SCRIPTABLE_DATA_TYPE_XCOMPOSITEMODEL )
    {
      v5 = varXCompositeModelDefPtr;
      varXCompositeModelDefPtr = &i->compositeModel;
      Load_XCompositeModelDefPtr(NotAtStart);
      varXCompositeModelDefPtr = v5;
    }
    else if ( dataType == SCRIPTABLE_DATA_TYPE_XMODEL )
    {
      v6 = varXModelPtr;
      varXModelPtr = (XModel **)i;
      Load_XModelPtr(NotAtStart);
      varXModelPtr = v6;
    }
    ++i;
  }
}

/*
==============
Load_ScriptableModelUnionStream
==============
*/
void Load_ScriptableModelUnionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ScriptableModelUnion *pos; 
  ScriptableDataType dataType; 
  XCompositeModelDef **v5; 
  XModel **v6; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 9555, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = varScriptableModelUnion;
    do
    {
      dataType = varScriptableEventModelDef->dataType;
      if ( dataType == SCRIPTABLE_DATA_TYPE_XCOMPOSITEMODEL )
      {
        v5 = varXCompositeModelDefPtr;
        varXCompositeModelDefPtr = &pos->compositeModel;
        Load_XCompositeModelDefPtr(AtStart);
        varXCompositeModelDefPtr = v5;
      }
      else if ( dataType == SCRIPTABLE_DATA_TYPE_XMODEL )
      {
        v6 = varXModelPtr;
        varXModelPtr = (XModel **)pos;
        Load_XModelPtr(AtStart);
        varXModelPtr = v6;
      }
      pos = (ScriptableModelUnion *)g_streamPosGlob.pos;
      varScriptableModelUnion = (ScriptableModelUnion *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableNoteTrackDef
==============
*/
void Load_ScriptableNoteTrackDef(const DBStreamStart streamStart)
{
  const char **v1; 
  scr_string_t *v2; 
  ScriptableNoteTrackDef *v3; 
  ScriptableEventDef *events; 
  ScriptableEventDef *v5; 

  Load_Stream(streamStart, varScriptableNoteTrackDef, 0x20ui64);
  v1 = varXString;
  varXString = &varScriptableNoteTrackDef->noteTrackName;
  Load_XString(NotAtStart);
  varXString = v1;
  v2 = varscr_string_t;
  varscr_string_t = &varScriptableNoteTrackDef->scrNoteTrackName;
  Load_scr_string_t(NotAtStart);
  v3 = varScriptableNoteTrackDef;
  varscr_string_t = v2;
  events = varScriptableNoteTrackDef->events;
  if ( events )
  {
    if ( events == (ScriptableEventDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( events != (ScriptableEventDef *)-2i64 )
    {
      v3->events = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableNoteTrackDef->events);
      return;
    }
    v5 = varScriptableEventDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v3->events = (ScriptableEventDef *)g_streamPosGlob.pos;
    varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
    Load_ScriptableEventDefArray(AtStart, varScriptableNoteTrackDef->numEvents);
    varScriptableEventDef = v5;
    if ( events == (ScriptableEventDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Load_ScriptableNoteTrackDefArray
==============
*/
void Load_ScriptableNoteTrackDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableNoteTrackDef *i; 
  const char **v4; 
  scr_string_t *v5; 
  ScriptableNoteTrackDef *v6; 
  ScriptableEventDef *events; 
  ScriptableEventDef *v8; 

  v2 = count;
  Load_Stream(streamStart, varScriptableNoteTrackDef, 32 * count);
  for ( i = varScriptableNoteTrackDef; v2; --v2 )
  {
    varScriptableNoteTrackDef = i;
    Load_Stream(NotAtStart, i, 0x20ui64);
    v4 = varXString;
    varXString = &varScriptableNoteTrackDef->noteTrackName;
    Load_XString(NotAtStart);
    varXString = v4;
    v5 = varscr_string_t;
    varscr_string_t = &varScriptableNoteTrackDef->scrNoteTrackName;
    Load_scr_string_t(NotAtStart);
    v6 = varScriptableNoteTrackDef;
    varscr_string_t = v5;
    events = varScriptableNoteTrackDef->events;
    if ( events )
    {
      if ( events == (ScriptableEventDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v8 = varScriptableEventDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v6->events = (ScriptableEventDef *)g_streamPosGlob.pos;
        varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
        Load_ScriptableEventDefArray(AtStart, varScriptableNoteTrackDef->numEvents);
        varScriptableEventDef = v8;
        if ( events == (ScriptableEventDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( events == (ScriptableEventDef *)-2i64 )
        goto LABEL_7;
      v6->events = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableNoteTrackDef->events);
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Load_ScriptableNoteTrackDefStream
==============
*/
void Load_ScriptableNoteTrackDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  const char **v4; 
  scr_string_t *v5; 
  ScriptableNoteTrackDef *v6; 
  ScriptableEventDef *events; 
  ScriptableEventDef *v8; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 8322, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableNoteTrackDef;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      v4 = varXString;
      varXString = &varScriptableNoteTrackDef->noteTrackName;
      Load_XString(NotAtStart);
      varXString = v4;
      v5 = varscr_string_t;
      varscr_string_t = &varScriptableNoteTrackDef->scrNoteTrackName;
      Load_scr_string_t(NotAtStart);
      v6 = varScriptableNoteTrackDef;
      varscr_string_t = v5;
      events = varScriptableNoteTrackDef->events;
      if ( events )
      {
        if ( events == (ScriptableEventDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v8 = varScriptableEventDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v6->events = (ScriptableEventDef *)g_streamPosGlob.pos;
          varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
          Load_ScriptableEventDefArray(AtStart, varScriptableNoteTrackDef->numEvents);
          varScriptableEventDef = v8;
          if ( events == (ScriptableEventDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( events == (ScriptableEventDef *)-2i64 )
          goto LABEL_11;
        v6->events = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableNoteTrackDef->events);
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableNoteTrackDef = (ScriptableNoteTrackDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptablePartDef
==============
*/
void Load_ScriptablePartDef(const DBStreamStart streamStart)
{
  const char **v1; 
  scr_string_t *v2; 
  const char **v3; 
  scr_string_t *v4; 
  ScriptablePartDef *v5; 
  ScriptableStateDef *states; 
  ScriptableStateDef *v7; 
  __int64 numStates; 
  ScriptableStateDef *i; 
  ScriptableStateBaseDef *v10; 
  ScriptableStateDefUnion *v11; 
  __int64 numChildParts; 
  ScriptablePartDef *j; 
  ScriptableDamageTagOverride *v14; 
  __int64 numDamageTagOverrides; 
  ScriptableDamageTagOverride *k; 
  const char **v17; 
  scr_string_t *v18; 

  Load_Stream(streamStart, varScriptablePartDef, 0x68ui64);
  v1 = varXString;
  varXString = &varScriptablePartDef->name;
  Load_XString(NotAtStart);
  varXString = v1;
  v2 = varscr_string_t;
  varscr_string_t = &varScriptablePartDef->scrName;
  Load_scr_string_t(NotAtStart);
  varscr_string_t = v2;
  v3 = varXString;
  varXString = &varScriptablePartDef->tagName;
  Load_XString(NotAtStart);
  varXString = v3;
  v4 = varscr_string_t;
  varscr_string_t = &varScriptablePartDef->scrTagName;
  Load_scr_string_t(NotAtStart);
  v5 = varScriptablePartDef;
  varscr_string_t = v4;
  states = varScriptablePartDef->states;
  if ( states )
  {
    if ( states == (ScriptableStateDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( states != (ScriptableStateDef *)-2i64 )
    {
      v5->states = (ScriptableStateDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptablePartDef->states);
LABEL_10:
      v5 = varScriptablePartDef;
      goto LABEL_11;
    }
    v7 = varScriptableStateDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v5->states = (ScriptableStateDef *)g_streamPosGlob.pos;
    varScriptableStateDef = (ScriptableStateDef *)g_streamPosGlob.pos;
    numStates = varScriptablePartDef->numStates;
    Load_Stream(AtStart, g_streamPosGlob.pos, 160 * numStates);
    for ( i = varScriptableStateDef; numStates; --numStates )
    {
      varScriptableStateDef = i;
      Load_Stream(NotAtStart, i, 0xA0ui64);
      v10 = varScriptableStateBaseDef;
      varScriptableStateBaseDef = &varScriptableStateDef->base;
      Load_ScriptableStateBaseDef(NotAtStart);
      varScriptableStateBaseDef = v10;
      v11 = varScriptableStateDefUnion;
      varScriptableStateDefUnion = &varScriptableStateDef->data;
      Load_ScriptableStateDefUnion(NotAtStart);
      ++i;
      varScriptableStateDefUnion = v11;
    }
    varScriptableStateDef = v7;
    if ( states == (ScriptableStateDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_10;
  }
LABEL_11:
  if ( v5->childParts )
  {
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v5->childParts = (ScriptablePartDef *)g_streamPosGlob.pos;
    varScriptablePartDef = (ScriptablePartDef *)g_streamPosGlob.pos;
    numChildParts = v5->numChildParts;
    Load_Stream(AtStart, g_streamPosGlob.pos, 104 * numChildParts);
    for ( j = varScriptablePartDef; numChildParts; --numChildParts )
    {
      varScriptablePartDef = j;
      Load_ScriptablePartDef(NotAtStart);
      ++j;
    }
    varScriptablePartDef = v5;
  }
  if ( v5->damageTagOverrides )
  {
    v14 = varScriptableDamageTagOverride;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v5->damageTagOverrides = (ScriptableDamageTagOverride *)g_streamPosGlob.pos;
    varScriptableDamageTagOverride = (ScriptableDamageTagOverride *)g_streamPosGlob.pos;
    numDamageTagOverrides = varScriptablePartDef->numDamageTagOverrides;
    Load_Stream(AtStart, g_streamPosGlob.pos, 16 * numDamageTagOverrides);
    for ( k = varScriptableDamageTagOverride; numDamageTagOverrides; --numDamageTagOverrides )
    {
      varScriptableDamageTagOverride = k;
      Load_Stream(NotAtStart, k, 0x10ui64);
      v17 = varXString;
      varXString = &varScriptableDamageTagOverride->tag;
      Load_XString(NotAtStart);
      varXString = v17;
      v18 = varscr_string_t;
      varscr_string_t = &varScriptableDamageTagOverride->scrTag;
      Load_scr_string_t(NotAtStart);
      ++k;
      varscr_string_t = v18;
    }
    varScriptableDamageTagOverride = v14;
  }
}

/*
==============
Load_ScriptablePartDefArray
==============
*/
void Load_ScriptablePartDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptablePartDef *i; 

  v2 = count;
  Load_Stream(streamStart, varScriptablePartDef, 104 * count);
  for ( i = varScriptablePartDef; v2; --v2 )
  {
    varScriptablePartDef = i;
    Load_ScriptablePartDef(NotAtStart);
    ++i;
  }
}

/*
==============
Load_ScriptablePartDefStream
==============
*/
void Load_ScriptablePartDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  const char **v4; 
  scr_string_t *v5; 
  const char **v6; 
  scr_string_t *v7; 
  ScriptablePartDef *v8; 
  ScriptableStateDef *states; 
  ScriptableStateDef *v10; 
  __int64 numStates; 
  ScriptableStateDef *k; 
  ScriptableStateBaseDef *v13; 
  ScriptableStateDefUnion *v14; 
  __int64 numChildParts; 
  ScriptablePartDef *i; 
  ScriptableDamageTagOverride *v17; 
  __int64 numDamageTagOverrides; 
  ScriptableDamageTagOverride *j; 
  const char **v20; 
  scr_string_t *v21; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 24783, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptablePartDef;
    while ( 1 )
    {
      Load_Stream(AtStart, pos, 0x68ui64);
      v4 = varXString;
      varXString = &varScriptablePartDef->name;
      Load_XString(NotAtStart);
      varXString = v4;
      v5 = varscr_string_t;
      varscr_string_t = &varScriptablePartDef->scrName;
      Load_scr_string_t(NotAtStart);
      varscr_string_t = v5;
      v6 = varXString;
      varXString = &varScriptablePartDef->tagName;
      Load_XString(NotAtStart);
      varXString = v6;
      v7 = varscr_string_t;
      varscr_string_t = &varScriptablePartDef->scrTagName;
      Load_scr_string_t(NotAtStart);
      v8 = varScriptablePartDef;
      varscr_string_t = v7;
      states = varScriptablePartDef->states;
      if ( states )
        break;
LABEL_16:
      if ( v8->childParts )
      {
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v8->childParts = (ScriptablePartDef *)g_streamPosGlob.pos;
        varScriptablePartDef = (ScriptablePartDef *)g_streamPosGlob.pos;
        numChildParts = v8->numChildParts;
        Load_Stream(AtStart, g_streamPosGlob.pos, 104 * numChildParts);
        for ( i = varScriptablePartDef; numChildParts; --numChildParts )
        {
          varScriptablePartDef = i;
          Load_ScriptablePartDef(NotAtStart);
          ++i;
        }
        varScriptablePartDef = v8;
      }
      if ( v8->damageTagOverrides )
      {
        v17 = varScriptableDamageTagOverride;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v8->damageTagOverrides = (ScriptableDamageTagOverride *)g_streamPosGlob.pos;
        varScriptableDamageTagOverride = (ScriptableDamageTagOverride *)g_streamPosGlob.pos;
        numDamageTagOverrides = varScriptablePartDef->numDamageTagOverrides;
        Load_Stream(AtStart, g_streamPosGlob.pos, 16 * numDamageTagOverrides);
        for ( j = varScriptableDamageTagOverride; numDamageTagOverrides; --numDamageTagOverrides )
        {
          varScriptableDamageTagOverride = j;
          Load_Stream(NotAtStart, j, 0x10ui64);
          v20 = varXString;
          varXString = &varScriptableDamageTagOverride->tag;
          Load_XString(NotAtStart);
          varXString = v20;
          v21 = varscr_string_t;
          varscr_string_t = &varScriptableDamageTagOverride->scrTag;
          Load_scr_string_t(NotAtStart);
          ++j;
          varscr_string_t = v21;
        }
        varScriptableDamageTagOverride = v17;
      }
      pos = g_streamPosGlob.pos;
      varScriptablePartDef = (ScriptablePartDef *)g_streamPosGlob.pos;
      if ( !--count )
        return;
    }
    if ( states == (ScriptableStateDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( states != (ScriptableStateDef *)-2i64 )
    {
      v8->states = (ScriptableStateDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptablePartDef->states);
LABEL_15:
      v8 = varScriptablePartDef;
      goto LABEL_16;
    }
    v10 = varScriptableStateDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v8->states = (ScriptableStateDef *)g_streamPosGlob.pos;
    varScriptableStateDef = (ScriptableStateDef *)g_streamPosGlob.pos;
    numStates = varScriptablePartDef->numStates;
    Load_Stream(AtStart, g_streamPosGlob.pos, 160 * numStates);
    for ( k = varScriptableStateDef; numStates; --numStates )
    {
      varScriptableStateDef = k;
      Load_Stream(NotAtStart, k, 0xA0ui64);
      v13 = varScriptableStateBaseDef;
      varScriptableStateBaseDef = &varScriptableStateDef->base;
      Load_ScriptableStateBaseDef(NotAtStart);
      varScriptableStateBaseDef = v13;
      v14 = varScriptableStateDefUnion;
      varScriptableStateDefUnion = &varScriptableStateDef->data;
      Load_ScriptableStateDefUnion(NotAtStart);
      ++k;
      varScriptableStateDefUnion = v14;
    }
    varScriptableStateDef = v10;
    if ( states == (ScriptableStateDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_15;
  }
}

/*
==============
Load_ScriptablePartReference
==============
*/
void Load_ScriptablePartReference(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varScriptablePartReference, 4ui64);
}

/*
==============
Load_ScriptablePartReferenceArray
==============
*/
void Load_ScriptablePartReferenceArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varScriptablePartReference, 4 * count);
}

/*
==============
Load_ScriptablePartReferenceStream
==============
*/
void Load_ScriptablePartReferenceStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 8121, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptablePartReference;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varScriptablePartReference = (ScriptablePartReference *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptablePhysicsLimits
==============
*/
void Load_ScriptablePhysicsLimits(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varScriptablePhysicsLimits, 0x18ui64);
}

/*
==============
Load_ScriptablePhysicsLimitsArray
==============
*/
void Load_ScriptablePhysicsLimitsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varScriptablePhysicsLimits, 24 * count);
}

/*
==============
Load_ScriptablePhysicsLimitsStream
==============
*/
void Load_ScriptablePhysicsLimitsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 26527, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptablePhysicsLimits;
    do
    {
      Load_Stream(AtStart, pos, 0x18ui64);
      pos = g_streamPosGlob.pos;
      varScriptablePhysicsLimits = (ScriptablePhysicsLimits *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableReservedDynent
==============
*/
void Load_ScriptableReservedDynent(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varScriptableReservedDynent, 8ui64);
}

/*
==============
Load_ScriptableReservedDynentArray
==============
*/
void Load_ScriptableReservedDynentArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varScriptableReservedDynent, 8 * count);
}

/*
==============
Load_ScriptableReservedDynentStream
==============
*/
void Load_ScriptableReservedDynentStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 26209, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableReservedDynent;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      pos = g_streamPosGlob.pos;
      varScriptableReservedDynent = (ScriptableReservedDynent *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableReservedDynents
==============
*/
void Load_ScriptableReservedDynents(const DBStreamStart streamStart)
{
  ScriptableReservedDynents *v1; 
  ScriptableReservedDynent *v2; 

  Load_Stream(streamStart, varScriptableReservedDynents, 0x10ui64);
  v1 = varScriptableReservedDynents;
  if ( varScriptableReservedDynents->reservedDynents )
  {
    v2 = varScriptableReservedDynent;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->reservedDynents = (ScriptableReservedDynent *)g_streamPosGlob.pos;
    varScriptableReservedDynent = (ScriptableReservedDynent *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 8i64 * varScriptableReservedDynents->numReservedDynents);
    varScriptableReservedDynent = v2;
  }
}

/*
==============
Load_ScriptableReservedDynentsArray
==============
*/
void Load_ScriptableReservedDynentsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableReservedDynents *i; 
  ScriptableReservedDynents *v4; 
  ScriptableReservedDynent *v5; 

  v2 = count;
  Load_Stream(streamStart, varScriptableReservedDynents, 16 * count);
  for ( i = varScriptableReservedDynents; v2; --v2 )
  {
    varScriptableReservedDynents = i;
    Load_Stream(NotAtStart, i, 0x10ui64);
    v4 = varScriptableReservedDynents;
    if ( varScriptableReservedDynents->reservedDynents )
    {
      v5 = varScriptableReservedDynent;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->reservedDynents = (ScriptableReservedDynent *)g_streamPosGlob.pos;
      varScriptableReservedDynent = (ScriptableReservedDynent *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 8i64 * varScriptableReservedDynents->numReservedDynents);
      varScriptableReservedDynent = v5;
    }
    ++i;
  }
}

/*
==============
Load_ScriptableReservedDynentsStream
==============
*/
void Load_ScriptableReservedDynentsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableReservedDynents *v4; 
  ScriptableReservedDynent *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 26335, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableReservedDynents;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      v4 = varScriptableReservedDynents;
      if ( varScriptableReservedDynents->reservedDynents )
      {
        v5 = varScriptableReservedDynent;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->reservedDynents = (ScriptableReservedDynent *)g_streamPosGlob.pos;
        varScriptableReservedDynent = (ScriptableReservedDynent *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 8i64 * varScriptableReservedDynents->numReservedDynents);
        varScriptableReservedDynent = v5;
      }
      pos = g_streamPosGlob.pos;
      varScriptableReservedDynents = (ScriptableReservedDynents *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableStateBaseDef
==============
*/
void Load_ScriptableStateBaseDef(const DBStreamStart streamStart)
{
  const char **v1; 
  ScriptableStateBaseDef *v2; 
  ScriptableEventDef *events; 
  ScriptableEventDef *v4; 

  Load_Stream(streamStart, varScriptableStateBaseDef, 0x18ui64);
  v1 = varXString;
  varXString = &varScriptableStateBaseDef->name;
  Load_XString(NotAtStart);
  v2 = varScriptableStateBaseDef;
  varXString = v1;
  events = varScriptableStateBaseDef->events;
  if ( events )
  {
    if ( events == (ScriptableEventDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( events != (ScriptableEventDef *)-2i64 )
    {
      v2->events = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableStateBaseDef->events);
      return;
    }
    v4 = varScriptableEventDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->events = (ScriptableEventDef *)g_streamPosGlob.pos;
    varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
    Load_ScriptableEventDefArray(AtStart, varScriptableStateBaseDef->numEvents);
    varScriptableEventDef = v4;
    if ( events == (ScriptableEventDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Load_ScriptableStateBaseDefArray
==============
*/
void Load_ScriptableStateBaseDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableStateBaseDef *i; 
  const char **v4; 
  ScriptableStateBaseDef *v5; 
  ScriptableEventDef *events; 
  ScriptableEventDef *v7; 

  v2 = count;
  Load_Stream(streamStart, varScriptableStateBaseDef, 24 * count);
  for ( i = varScriptableStateBaseDef; v2; --v2 )
  {
    varScriptableStateBaseDef = i;
    Load_Stream(NotAtStart, i, 0x18ui64);
    v4 = varXString;
    varXString = &varScriptableStateBaseDef->name;
    Load_XString(NotAtStart);
    v5 = varScriptableStateBaseDef;
    varXString = v4;
    events = varScriptableStateBaseDef->events;
    if ( events )
    {
      if ( events == (ScriptableEventDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v7 = varScriptableEventDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v5->events = (ScriptableEventDef *)g_streamPosGlob.pos;
        varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
        Load_ScriptableEventDefArray(AtStart, varScriptableStateBaseDef->numEvents);
        varScriptableEventDef = v7;
        if ( events == (ScriptableEventDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( events == (ScriptableEventDef *)-2i64 )
        goto LABEL_7;
      v5->events = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableStateBaseDef->events);
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Load_ScriptableStateBaseDefStream
==============
*/
void Load_ScriptableStateBaseDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  const char **v4; 
  ScriptableStateBaseDef *v5; 
  ScriptableEventDef *events; 
  ScriptableEventDef *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 22512, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableStateBaseDef;
    do
    {
      Load_Stream(AtStart, pos, 0x18ui64);
      v4 = varXString;
      varXString = &varScriptableStateBaseDef->name;
      Load_XString(NotAtStart);
      v5 = varScriptableStateBaseDef;
      varXString = v4;
      events = varScriptableStateBaseDef->events;
      if ( events )
      {
        if ( events == (ScriptableEventDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v7 = varScriptableEventDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v5->events = (ScriptableEventDef *)g_streamPosGlob.pos;
          varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
          Load_ScriptableEventDefArray(AtStart, varScriptableStateBaseDef->numEvents);
          varScriptableEventDef = v7;
          if ( events == (ScriptableEventDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( events == (ScriptableEventDef *)-2i64 )
          goto LABEL_11;
        v5->events = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableStateBaseDef->events);
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableStateBaseDef = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableStateDef
==============
*/
void Load_ScriptableStateDef(const DBStreamStart streamStart)
{
  ScriptableStateBaseDef *v1; 
  ScriptableStateDefUnion *v2; 

  Load_Stream(streamStart, varScriptableStateDef, 0xA0ui64);
  v1 = varScriptableStateBaseDef;
  varScriptableStateBaseDef = &varScriptableStateDef->base;
  Load_ScriptableStateBaseDef(NotAtStart);
  varScriptableStateBaseDef = v1;
  v2 = varScriptableStateDefUnion;
  varScriptableStateDefUnion = &varScriptableStateDef->data;
  Load_ScriptableStateDefUnion(NotAtStart);
  varScriptableStateDefUnion = v2;
}

/*
==============
Load_ScriptableStateDefArray
==============
*/
void Load_ScriptableStateDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableStateDef *i; 
  ScriptableStateBaseDef *v4; 
  ScriptableStateDefUnion *v5; 

  v2 = count;
  Load_Stream(streamStart, varScriptableStateDef, 160 * count);
  for ( i = varScriptableStateDef; v2; --v2 )
  {
    varScriptableStateDef = i;
    Load_Stream(NotAtStart, i, 0xA0ui64);
    v4 = varScriptableStateBaseDef;
    varScriptableStateBaseDef = &varScriptableStateDef->base;
    Load_ScriptableStateBaseDef(NotAtStart);
    varScriptableStateBaseDef = v4;
    v5 = varScriptableStateDefUnion;
    varScriptableStateDefUnion = &varScriptableStateDef->data;
    Load_ScriptableStateDefUnion(NotAtStart);
    ++i;
    varScriptableStateDefUnion = v5;
  }
}

/*
==============
Load_ScriptableStateDefStream
==============
*/
void Load_ScriptableStateDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableStateBaseDef *v4; 
  ScriptableStateDefUnion *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 24223, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableStateDef;
    do
    {
      Load_Stream(AtStart, pos, 0xA0ui64);
      v4 = varScriptableStateBaseDef;
      varScriptableStateBaseDef = &varScriptableStateDef->base;
      Load_ScriptableStateBaseDef(NotAtStart);
      varScriptableStateBaseDef = v4;
      v5 = varScriptableStateDefUnion;
      varScriptableStateDefUnion = &varScriptableStateDef->data;
      Load_ScriptableStateDefUnion(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableStateDef = (ScriptableStateDef *)g_streamPosGlob.pos;
      varScriptableStateDefUnion = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableStateDefUnion
==============
*/
void Load_ScriptableStateDefUnion(const DBStreamStart streamStart)
{
  Scriptable_StateType type; 
  ScriptableStateSimpleDef *v2; 
  ScriptableStateHealthDef *v3; 
  ScriptableStateScriptedDef *v4; 
  ScriptableStateUsableDef *v5; 

  type = varScriptableStateDef->type;
  if ( type )
  {
    switch ( type )
    {
      case Scriptable_StateType_Health:
        v3 = varScriptableStateHealthDef;
        varScriptableStateHealthDef = (ScriptableStateHealthDef *)varScriptableStateDefUnion;
        Load_ScriptableStateHealthDef(streamStart);
        varScriptableStateHealthDef = v3;
        break;
      case Scriptable_StateType_Scripted:
        v4 = varScriptableStateScriptedDef;
        varScriptableStateScriptedDef = (ScriptableStateScriptedDef *)varScriptableStateDefUnion;
        Load_ScriptableStateScriptedDef(streamStart);
        varScriptableStateScriptedDef = v4;
        break;
      case Scriptable_StateType_Usable:
        v5 = varScriptableStateUsableDef;
        varScriptableStateUsableDef = (ScriptableStateUsableDef *)varScriptableStateDefUnion;
        Load_ScriptableStateUsableDef(streamStart);
        varScriptableStateUsableDef = v5;
        break;
    }
  }
  else
  {
    v2 = varScriptableStateSimpleDef;
    varScriptableStateSimpleDef = &varScriptableStateDefUnion->simple;
    Load_ScriptableStateSimpleDef(streamStart);
    varScriptableStateSimpleDef = v2;
  }
}

/*
==============
Load_ScriptableStateDefUnionArray
==============
*/
void Load_ScriptableStateDefUnionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableStateDefUnion *i; 
  Scriptable_StateType type; 
  ScriptableStateSimpleDef *v5; 
  ScriptableStateHealthDef *v6; 
  ScriptableStateScriptedDef *v7; 
  ScriptableStateUsableDef *v8; 

  v2 = count;
  Load_Stream(streamStart, varScriptableStateDefUnion, count << 7);
  for ( i = varScriptableStateDefUnion; v2; --v2 )
  {
    varScriptableStateDefUnion = i;
    type = varScriptableStateDef->type;
    if ( type )
    {
      switch ( type )
      {
        case Scriptable_StateType_Health:
          v6 = varScriptableStateHealthDef;
          varScriptableStateHealthDef = (ScriptableStateHealthDef *)i;
          Load_ScriptableStateHealthDef(NotAtStart);
          varScriptableStateHealthDef = v6;
          break;
        case Scriptable_StateType_Scripted:
          v7 = varScriptableStateScriptedDef;
          varScriptableStateScriptedDef = (ScriptableStateScriptedDef *)i;
          Load_ScriptableStateScriptedDef(NotAtStart);
          varScriptableStateScriptedDef = v7;
          break;
        case Scriptable_StateType_Usable:
          v8 = varScriptableStateUsableDef;
          varScriptableStateUsableDef = (ScriptableStateUsableDef *)i;
          Load_ScriptableStateUsableDef(NotAtStart);
          varScriptableStateUsableDef = v8;
          break;
      }
    }
    else
    {
      v5 = varScriptableStateSimpleDef;
      varScriptableStateSimpleDef = &i->simple;
      Load_ScriptableStateSimpleDef(NotAtStart);
      varScriptableStateSimpleDef = v5;
    }
    ++i;
  }
}

/*
==============
Load_ScriptableStateDefUnionStream
==============
*/
void Load_ScriptableStateDefUnionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ScriptableStateDefUnion *pos; 
  Scriptable_StateType type; 
  ScriptableStateSimpleDef *v5; 
  ScriptableStateHealthDef *v6; 
  ScriptableStateScriptedDef *v7; 
  ScriptableStateUsableDef *v8; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 24100, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = varScriptableStateDefUnion;
    do
    {
      type = varScriptableStateDef->type;
      if ( type )
      {
        switch ( type )
        {
          case Scriptable_StateType_Health:
            v6 = varScriptableStateHealthDef;
            varScriptableStateHealthDef = (ScriptableStateHealthDef *)pos;
            Load_ScriptableStateHealthDef(AtStart);
            varScriptableStateHealthDef = v6;
            break;
          case Scriptable_StateType_Scripted:
            v7 = varScriptableStateScriptedDef;
            varScriptableStateScriptedDef = (ScriptableStateScriptedDef *)pos;
            Load_ScriptableStateScriptedDef(AtStart);
            varScriptableStateScriptedDef = v7;
            break;
          case Scriptable_StateType_Usable:
            v8 = varScriptableStateUsableDef;
            varScriptableStateUsableDef = (ScriptableStateUsableDef *)pos;
            Load_ScriptableStateUsableDef(AtStart);
            varScriptableStateUsableDef = v8;
            break;
        }
      }
      else
      {
        v5 = varScriptableStateSimpleDef;
        varScriptableStateSimpleDef = &pos->simple;
        Load_ScriptableStateSimpleDef(AtStart);
        varScriptableStateSimpleDef = v5;
      }
      pos = (ScriptableStateDefUnion *)g_streamPosGlob.pos;
      varScriptableStateDefUnion = (ScriptableStateDefUnion *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableStateHealthDef
==============
*/
void Load_ScriptableStateHealthDef(const DBStreamStart streamStart)
{
  ScriptableStateHealthDef *v1; 
  ScriptableStateBaseDef *base; 
  ScriptableStateBaseDef *v3; 
  ScriptableStateHealthDef *v4; 
  weapClass_t *weaponClasses; 
  weapClass_t *v6; 
  weapClass_t *weapClass_t; 
  ScriptableStateHealthDef *v8; 
  WeaponCompleteDef **weapons; 
  WeaponCompleteDef **v10; 
  WeaponCompleteDef **WeaponCompleteDefPtr; 
  const char **v12; 
  scr_string_t *v13; 

  Load_Stream(streamStart, varScriptableStateHealthDef, 0x60ui64);
  v1 = varScriptableStateHealthDef;
  base = varScriptableStateHealthDef->base;
  if ( varScriptableStateHealthDef->base )
  {
    if ( base == (ScriptableStateBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableStateBaseDef *)-2i64 )
    {
      v1->base = (ScriptableStateBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableStateHealthDef->base);
      goto LABEL_8;
    }
    v3 = varScriptableStateBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
    varScriptableStateBaseDef = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
    Load_ScriptableStateBaseDef(AtStart);
    varScriptableStateBaseDef = v3;
    if ( base == (ScriptableStateBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v4 = varScriptableStateHealthDef;
  weaponClasses = varScriptableStateHealthDef->weaponClasses;
  if ( !weaponClasses )
    goto LABEL_15;
  if ( weaponClasses == (weapClass_t *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( weaponClasses != (weapClass_t *)-2i64 )
  {
    v4->weaponClasses = (weapClass_t *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableStateHealthDef->weaponClasses);
    goto LABEL_15;
  }
  v6 = varweapClass_t;
  weapClass_t = AllocLoad_weapClass_t();
  v4->weaponClasses = weapClass_t;
  varweapClass_t = weapClass_t;
  Load_weapClass_tArray(AtStart, varScriptableStateHealthDef->numWeaponClasses);
  varweapClass_t = v6;
  if ( weaponClasses == (weapClass_t *)-1i64 )
    DB_PopSharedData();
LABEL_15:
  v8 = varScriptableStateHealthDef;
  weapons = varScriptableStateHealthDef->weapons;
  if ( weapons )
  {
    if ( weapons == (WeaponCompleteDef **)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( weapons != (WeaponCompleteDef **)-2i64 )
    {
      v8->weapons = (WeaponCompleteDef **)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableStateHealthDef->weapons);
      goto LABEL_22;
    }
    v10 = varWeaponCompleteDefPtr;
    WeaponCompleteDefPtr = AllocLoad_WeaponCompleteDefPtr();
    v8->weapons = WeaponCompleteDefPtr;
    varWeaponCompleteDefPtr = WeaponCompleteDefPtr;
    Load_WeaponCompleteDefPtrArray(AtStart, varScriptableStateHealthDef->numWeapons);
    varWeaponCompleteDefPtr = v10;
    if ( weapons == (WeaponCompleteDef **)-1i64 )
      DB_PopSharedData();
  }
LABEL_22:
  v12 = varXString;
  varXString = &varScriptableStateHealthDef->script_id;
  Load_XString(NotAtStart);
  varXString = v12;
  v13 = varscr_string_t;
  varscr_string_t = &varScriptableStateHealthDef->scrScript_id;
  Load_scr_string_t(NotAtStart);
  varscr_string_t = v13;
}

/*
==============
Load_ScriptableStateHealthDefArray
==============
*/
void Load_ScriptableStateHealthDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableStateHealthDef *i; 
  ScriptableStateHealthDef *v4; 
  ScriptableStateBaseDef *base; 
  ScriptableStateBaseDef *v6; 
  ScriptableStateHealthDef *v7; 
  weapClass_t *weaponClasses; 
  weapClass_t *v9; 
  weapClass_t *weapClass_t; 
  ScriptableStateHealthDef *v11; 
  WeaponCompleteDef **weapons; 
  WeaponCompleteDef **v13; 
  WeaponCompleteDef **WeaponCompleteDefPtr; 
  const char **v15; 
  scr_string_t *v16; 

  v2 = count;
  Load_Stream(streamStart, varScriptableStateHealthDef, 96 * count);
  for ( i = varScriptableStateHealthDef; v2; --v2 )
  {
    varScriptableStateHealthDef = i;
    Load_Stream(NotAtStart, i, 0x60ui64);
    v4 = varScriptableStateHealthDef;
    base = varScriptableStateHealthDef->base;
    if ( !varScriptableStateHealthDef->base )
      goto LABEL_9;
    if ( base == (ScriptableStateBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableStateBaseDef *)-2i64 )
    {
      v4->base = (ScriptableStateBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableStateHealthDef->base);
      goto LABEL_9;
    }
    v6 = varScriptableStateBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->base = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
    varScriptableStateBaseDef = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
    Load_ScriptableStateBaseDef(AtStart);
    varScriptableStateBaseDef = v6;
    if ( base == (ScriptableStateBaseDef *)-1i64 )
      DB_PopSharedData();
LABEL_9:
    v7 = varScriptableStateHealthDef;
    weaponClasses = varScriptableStateHealthDef->weaponClasses;
    if ( !weaponClasses )
      goto LABEL_16;
    if ( weaponClasses == (weapClass_t *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( weaponClasses != (weapClass_t *)-2i64 )
    {
      v7->weaponClasses = (weapClass_t *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableStateHealthDef->weaponClasses);
      goto LABEL_16;
    }
    v9 = varweapClass_t;
    weapClass_t = AllocLoad_weapClass_t();
    v7->weaponClasses = weapClass_t;
    varweapClass_t = weapClass_t;
    Load_weapClass_tArray(AtStart, varScriptableStateHealthDef->numWeaponClasses);
    varweapClass_t = v9;
    if ( weaponClasses == (weapClass_t *)-1i64 )
      DB_PopSharedData();
LABEL_16:
    v11 = varScriptableStateHealthDef;
    weapons = varScriptableStateHealthDef->weapons;
    if ( weapons )
    {
      if ( weapons == (WeaponCompleteDef **)-1i64 )
      {
        DB_PushSharedData();
LABEL_21:
        v13 = varWeaponCompleteDefPtr;
        WeaponCompleteDefPtr = AllocLoad_WeaponCompleteDefPtr();
        v11->weapons = WeaponCompleteDefPtr;
        varWeaponCompleteDefPtr = WeaponCompleteDefPtr;
        Load_WeaponCompleteDefPtrArray(AtStart, varScriptableStateHealthDef->numWeapons);
        varWeaponCompleteDefPtr = v13;
        if ( weapons == (WeaponCompleteDef **)-1i64 )
          DB_PopSharedData();
        goto LABEL_23;
      }
      if ( weapons == (WeaponCompleteDef **)-2i64 )
        goto LABEL_21;
      v11->weapons = (WeaponCompleteDef **)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableStateHealthDef->weapons);
    }
LABEL_23:
    v15 = varXString;
    varXString = &varScriptableStateHealthDef->script_id;
    Load_XString(NotAtStart);
    varXString = v15;
    v16 = varscr_string_t;
    varscr_string_t = &varScriptableStateHealthDef->scrScript_id;
    Load_scr_string_t(NotAtStart);
    ++i;
    varscr_string_t = v16;
  }
}

/*
==============
Load_ScriptableStateHealthDefStream
==============
*/
void Load_ScriptableStateHealthDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableStateHealthDef *v4; 
  ScriptableStateBaseDef *base; 
  ScriptableStateBaseDef *v6; 
  ScriptableStateHealthDef *v7; 
  weapClass_t *weaponClasses; 
  weapClass_t *v9; 
  weapClass_t *weapClass_t; 
  ScriptableStateHealthDef *v11; 
  WeaponCompleteDef **weapons; 
  WeaponCompleteDef **v13; 
  WeaponCompleteDef **WeaponCompleteDefPtr; 
  const char **v15; 
  scr_string_t *v16; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 23162, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableStateHealthDef;
    do
    {
      Load_Stream(AtStart, pos, 0x60ui64);
      v4 = varScriptableStateHealthDef;
      base = varScriptableStateHealthDef->base;
      if ( !varScriptableStateHealthDef->base )
        goto LABEL_13;
      if ( base == (ScriptableStateBaseDef *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( base != (ScriptableStateBaseDef *)-2i64 )
      {
        v4->base = (ScriptableStateBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableStateHealthDef->base);
        goto LABEL_13;
      }
      v6 = varScriptableStateBaseDef;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      v4->base = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
      varScriptableStateBaseDef = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
      Load_ScriptableStateBaseDef(AtStart);
      varScriptableStateBaseDef = v6;
      if ( base == (ScriptableStateBaseDef *)-1i64 )
        DB_PopSharedData();
LABEL_13:
      v7 = varScriptableStateHealthDef;
      weaponClasses = varScriptableStateHealthDef->weaponClasses;
      if ( !weaponClasses )
        goto LABEL_20;
      if ( weaponClasses == (weapClass_t *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( weaponClasses != (weapClass_t *)-2i64 )
      {
        v7->weaponClasses = (weapClass_t *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableStateHealthDef->weaponClasses);
        goto LABEL_20;
      }
      v9 = varweapClass_t;
      weapClass_t = AllocLoad_weapClass_t();
      v7->weaponClasses = weapClass_t;
      varweapClass_t = weapClass_t;
      Load_weapClass_tArray(AtStart, varScriptableStateHealthDef->numWeaponClasses);
      varweapClass_t = v9;
      if ( weaponClasses == (weapClass_t *)-1i64 )
        DB_PopSharedData();
LABEL_20:
      v11 = varScriptableStateHealthDef;
      weapons = varScriptableStateHealthDef->weapons;
      if ( weapons )
      {
        if ( weapons == (WeaponCompleteDef **)-1i64 )
        {
          DB_PushSharedData();
LABEL_25:
          v13 = varWeaponCompleteDefPtr;
          WeaponCompleteDefPtr = AllocLoad_WeaponCompleteDefPtr();
          v11->weapons = WeaponCompleteDefPtr;
          varWeaponCompleteDefPtr = WeaponCompleteDefPtr;
          Load_WeaponCompleteDefPtrArray(AtStart, varScriptableStateHealthDef->numWeapons);
          varWeaponCompleteDefPtr = v13;
          if ( weapons == (WeaponCompleteDef **)-1i64 )
            DB_PopSharedData();
          goto LABEL_27;
        }
        if ( weapons == (WeaponCompleteDef **)-2i64 )
          goto LABEL_25;
        v11->weapons = (WeaponCompleteDef **)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableStateHealthDef->weapons);
      }
LABEL_27:
      v15 = varXString;
      varXString = &varScriptableStateHealthDef->script_id;
      Load_XString(NotAtStart);
      varXString = v15;
      v16 = varscr_string_t;
      varscr_string_t = &varScriptableStateHealthDef->scrScript_id;
      Load_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableStateHealthDef = (ScriptableStateHealthDef *)g_streamPosGlob.pos;
      varscr_string_t = v16;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableStateScriptedDef
==============
*/
void Load_ScriptableStateScriptedDef(const DBStreamStart streamStart)
{
  ScriptableStateScriptedDef *v1; 
  ScriptableStateBaseDef *base; 
  ScriptableStateBaseDef *v3; 
  const char **v4; 
  scr_string_t *v5; 

  Load_Stream(streamStart, varScriptableStateScriptedDef, 0x18ui64);
  v1 = varScriptableStateScriptedDef;
  base = varScriptableStateScriptedDef->base;
  if ( varScriptableStateScriptedDef->base )
  {
    if ( base == (ScriptableStateBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableStateBaseDef *)-2i64 )
    {
      v1->base = (ScriptableStateBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableStateScriptedDef->base);
      goto LABEL_8;
    }
    v3 = varScriptableStateBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
    varScriptableStateBaseDef = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
    Load_ScriptableStateBaseDef(AtStart);
    varScriptableStateBaseDef = v3;
    if ( base == (ScriptableStateBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v4 = varXString;
  varXString = &varScriptableStateScriptedDef->script_id;
  Load_XString(NotAtStart);
  varXString = v4;
  v5 = varscr_string_t;
  varscr_string_t = &varScriptableStateScriptedDef->scrScript_id;
  Load_scr_string_t(NotAtStart);
  varscr_string_t = v5;
}

/*
==============
Load_ScriptableStateScriptedDefArray
==============
*/
void Load_ScriptableStateScriptedDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableStateScriptedDef *i; 
  ScriptableStateScriptedDef *v4; 
  ScriptableStateBaseDef *base; 
  ScriptableStateBaseDef *v6; 
  const char **v7; 
  scr_string_t *v8; 

  v2 = count;
  Load_Stream(streamStart, varScriptableStateScriptedDef, 24 * count);
  for ( i = varScriptableStateScriptedDef; v2; --v2 )
  {
    varScriptableStateScriptedDef = i;
    Load_Stream(NotAtStart, i, 0x18ui64);
    v4 = varScriptableStateScriptedDef;
    base = varScriptableStateScriptedDef->base;
    if ( varScriptableStateScriptedDef->base )
    {
      if ( base == (ScriptableStateBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varScriptableStateBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
        varScriptableStateBaseDef = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
        Load_ScriptableStateBaseDef(AtStart);
        varScriptableStateBaseDef = v6;
        if ( base == (ScriptableStateBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableStateBaseDef *)-2i64 )
        goto LABEL_7;
      v4->base = (ScriptableStateBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableStateScriptedDef->base);
    }
LABEL_9:
    v7 = varXString;
    varXString = &varScriptableStateScriptedDef->script_id;
    Load_XString(NotAtStart);
    varXString = v7;
    v8 = varscr_string_t;
    varscr_string_t = &varScriptableStateScriptedDef->scrScript_id;
    Load_scr_string_t(NotAtStart);
    ++i;
    varscr_string_t = v8;
  }
}

/*
==============
Load_ScriptableStateScriptedDefStream
==============
*/
void Load_ScriptableStateScriptedDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableStateScriptedDef *v4; 
  ScriptableStateBaseDef *base; 
  ScriptableStateBaseDef *v6; 
  const char **v7; 
  scr_string_t *v8; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 23317, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableStateScriptedDef;
    do
    {
      Load_Stream(AtStart, pos, 0x18ui64);
      v4 = varScriptableStateScriptedDef;
      base = varScriptableStateScriptedDef->base;
      if ( varScriptableStateScriptedDef->base )
      {
        if ( base == (ScriptableStateBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varScriptableStateBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v4->base = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
          varScriptableStateBaseDef = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
          Load_ScriptableStateBaseDef(AtStart);
          varScriptableStateBaseDef = v6;
          if ( base == (ScriptableStateBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableStateBaseDef *)-2i64 )
          goto LABEL_11;
        v4->base = (ScriptableStateBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableStateScriptedDef->base);
      }
LABEL_13:
      v7 = varXString;
      varXString = &varScriptableStateScriptedDef->script_id;
      Load_XString(NotAtStart);
      varXString = v7;
      v8 = varscr_string_t;
      varscr_string_t = &varScriptableStateScriptedDef->scrScript_id;
      Load_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableStateScriptedDef = (ScriptableStateScriptedDef *)g_streamPosGlob.pos;
      varscr_string_t = v8;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableStateSimpleDef
==============
*/
void Load_ScriptableStateSimpleDef(const DBStreamStart streamStart)
{
  ScriptableStateSimpleDef *v1; 
  ScriptableStateBaseDef *base; 
  ScriptableStateBaseDef *v3; 

  Load_Stream(streamStart, varScriptableStateSimpleDef, 8ui64);
  v1 = varScriptableStateSimpleDef;
  base = varScriptableStateSimpleDef->base;
  if ( varScriptableStateSimpleDef->base )
  {
    if ( base == (ScriptableStateBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableStateBaseDef *)-2i64 )
    {
      v1->base = (ScriptableStateBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableStateSimpleDef->base);
      return;
    }
    v3 = varScriptableStateBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
    varScriptableStateBaseDef = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
    Load_ScriptableStateBaseDef(AtStart);
    varScriptableStateBaseDef = v3;
    if ( base == (ScriptableStateBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Load_ScriptableStateSimpleDefArray
==============
*/
void Load_ScriptableStateSimpleDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableStateSimpleDef *i; 
  ScriptableStateSimpleDef *v4; 
  ScriptableStateBaseDef *base; 
  ScriptableStateBaseDef *v6; 

  v2 = count;
  Load_Stream(streamStart, varScriptableStateSimpleDef, 8 * count);
  for ( i = varScriptableStateSimpleDef; v2; --v2 )
  {
    varScriptableStateSimpleDef = i;
    Load_Stream(NotAtStart, i, 8ui64);
    v4 = varScriptableStateSimpleDef;
    base = varScriptableStateSimpleDef->base;
    if ( varScriptableStateSimpleDef->base )
    {
      if ( base == (ScriptableStateBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varScriptableStateBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
        varScriptableStateBaseDef = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
        Load_ScriptableStateBaseDef(AtStart);
        varScriptableStateBaseDef = v6;
        if ( base == (ScriptableStateBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableStateBaseDef *)-2i64 )
        goto LABEL_7;
      v4->base = (ScriptableStateBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableStateSimpleDef->base);
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Load_ScriptableStateSimpleDefStream
==============
*/
void Load_ScriptableStateSimpleDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableStateSimpleDef *v4; 
  ScriptableStateBaseDef *base; 
  ScriptableStateBaseDef *v6; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 22621, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableStateSimpleDef;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      v4 = varScriptableStateSimpleDef;
      base = varScriptableStateSimpleDef->base;
      if ( varScriptableStateSimpleDef->base )
      {
        if ( base == (ScriptableStateBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varScriptableStateBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v4->base = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
          varScriptableStateBaseDef = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
          Load_ScriptableStateBaseDef(AtStart);
          varScriptableStateBaseDef = v6;
          if ( base == (ScriptableStateBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableStateBaseDef *)-2i64 )
          goto LABEL_11;
        v4->base = (ScriptableStateBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableStateSimpleDef->base);
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableStateSimpleDef = (ScriptableStateSimpleDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_ScriptableStateUsableDef
==============
*/
void Load_ScriptableStateUsableDef(const DBStreamStart streamStart)
{
  ScriptableStateUsableDef *v1; 
  ScriptableStateBaseDef *base; 
  ScriptableStateBaseDef *v3; 
  const char **v4; 
  scr_string_t *v5; 
  const char **v6; 
  GfxImage **v7; 

  Load_Stream(streamStart, varScriptableStateUsableDef, 0x80ui64);
  v1 = varScriptableStateUsableDef;
  base = varScriptableStateUsableDef->base;
  if ( varScriptableStateUsableDef->base )
  {
    if ( base == (ScriptableStateBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableStateBaseDef *)-2i64 )
    {
      v1->base = (ScriptableStateBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableStateUsableDef->base);
      goto LABEL_8;
    }
    v3 = varScriptableStateBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v1->base = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
    varScriptableStateBaseDef = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
    Load_ScriptableStateBaseDef(AtStart);
    varScriptableStateBaseDef = v3;
    if ( base == (ScriptableStateBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v4 = varXString;
  varXString = &varScriptableStateUsableDef->script_id;
  Load_XString(NotAtStart);
  varXString = v4;
  v5 = varscr_string_t;
  varscr_string_t = &varScriptableStateUsableDef->scrScript_id;
  Load_scr_string_t(NotAtStart);
  varscr_string_t = &varScriptableStateUsableDef->hintTag;
  Load_scr_string_t(NotAtStart);
  varscr_string_t = v5;
  v6 = varXString;
  varXString = &varScriptableStateUsableDef->hintString;
  Load_XString(NotAtStart);
  varXString = &varScriptableStateUsableDef->hintStringDisabled;
  Load_XString(NotAtStart);
  varXString = &varScriptableStateUsableDef->hintIcon;
  Load_XString(NotAtStart);
  varXString = v6;
  v7 = varGfxImagePtr;
  varGfxImagePtr = &varScriptableStateUsableDef->hintIconImage;
  Load_GfxImagePtr(NotAtStart);
  varGfxImagePtr = v7;
}

/*
==============
Load_ScriptableStateUsableDefArray
==============
*/
void Load_ScriptableStateUsableDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableStateUsableDef *i; 
  ScriptableStateUsableDef *v4; 
  ScriptableStateBaseDef *base; 
  ScriptableStateBaseDef *v6; 
  const char **v7; 
  scr_string_t *v8; 
  const char **v9; 
  GfxImage **v10; 

  v2 = count;
  Load_Stream(streamStart, varScriptableStateUsableDef, count << 7);
  for ( i = varScriptableStateUsableDef; v2; --v2 )
  {
    varScriptableStateUsableDef = i;
    Load_Stream(NotAtStart, i, 0x80ui64);
    v4 = varScriptableStateUsableDef;
    base = varScriptableStateUsableDef->base;
    if ( varScriptableStateUsableDef->base )
    {
      if ( base == (ScriptableStateBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varScriptableStateBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
        varScriptableStateBaseDef = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
        Load_ScriptableStateBaseDef(AtStart);
        varScriptableStateBaseDef = v6;
        if ( base == (ScriptableStateBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableStateBaseDef *)-2i64 )
        goto LABEL_7;
      v4->base = (ScriptableStateBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableStateUsableDef->base);
    }
LABEL_9:
    v7 = varXString;
    varXString = &varScriptableStateUsableDef->script_id;
    Load_XString(NotAtStart);
    varXString = v7;
    v8 = varscr_string_t;
    varscr_string_t = &varScriptableStateUsableDef->scrScript_id;
    Load_scr_string_t(NotAtStart);
    varscr_string_t = &varScriptableStateUsableDef->hintTag;
    Load_scr_string_t(NotAtStart);
    varscr_string_t = v8;
    v9 = varXString;
    varXString = &varScriptableStateUsableDef->hintString;
    Load_XString(NotAtStart);
    varXString = &varScriptableStateUsableDef->hintStringDisabled;
    Load_XString(NotAtStart);
    varXString = &varScriptableStateUsableDef->hintIcon;
    Load_XString(NotAtStart);
    varXString = v9;
    v10 = varGfxImagePtr;
    varGfxImagePtr = &varScriptableStateUsableDef->hintIconImage;
    Load_GfxImagePtr(NotAtStart);
    ++i;
    varGfxImagePtr = v10;
  }
}

/*
==============
Load_ScriptableStateUsableDefStream
==============
*/
void Load_ScriptableStateUsableDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableStateUsableDef *v4; 
  ScriptableStateBaseDef *base; 
  ScriptableStateBaseDef *v6; 
  const char **v7; 
  scr_string_t *v8; 
  const char **v9; 
  GfxImage **v10; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 23934, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableStateUsableDef;
    do
    {
      Load_Stream(AtStart, pos, 0x80ui64);
      v4 = varScriptableStateUsableDef;
      base = varScriptableStateUsableDef->base;
      if ( varScriptableStateUsableDef->base )
      {
        if ( base == (ScriptableStateBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varScriptableStateBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v4->base = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
          varScriptableStateBaseDef = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
          Load_ScriptableStateBaseDef(AtStart);
          varScriptableStateBaseDef = v6;
          if ( base == (ScriptableStateBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableStateBaseDef *)-2i64 )
          goto LABEL_11;
        v4->base = (ScriptableStateBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableStateUsableDef->base);
      }
LABEL_13:
      v7 = varXString;
      varXString = &varScriptableStateUsableDef->script_id;
      Load_XString(NotAtStart);
      varXString = v7;
      v8 = varscr_string_t;
      varscr_string_t = &varScriptableStateUsableDef->scrScript_id;
      Load_scr_string_t(NotAtStart);
      varscr_string_t = &varScriptableStateUsableDef->hintTag;
      Load_scr_string_t(NotAtStart);
      varscr_string_t = v8;
      v9 = varXString;
      varXString = &varScriptableStateUsableDef->hintString;
      Load_XString(NotAtStart);
      varXString = &varScriptableStateUsableDef->hintStringDisabled;
      Load_XString(NotAtStart);
      varXString = &varScriptableStateUsableDef->hintIcon;
      Load_XString(NotAtStart);
      varXString = v9;
      v10 = varGfxImagePtr;
      varGfxImagePtr = &varScriptableStateUsableDef->hintIconImage;
      Load_GfxImagePtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableStateUsableDef = (ScriptableStateUsableDef *)g_streamPosGlob.pos;
      varGfxImagePtr = v10;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_Scriptable_Attackers
==============
*/
void Load_Scriptable_Attackers(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varScriptable_Attackers, 4ui64);
}

/*
==============
Load_Scriptable_AttackersArray
==============
*/
void Load_Scriptable_AttackersArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varScriptable_Attackers, 4 * count);
}

/*
==============
Load_Scriptable_AttackersStream
==============
*/
void Load_Scriptable_AttackersStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 8044, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptable_Attackers;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varScriptable_Attackers = (Scriptable_Attackers *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_Scriptable_DamageCause
==============
*/
void Load_Scriptable_DamageCause(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varScriptable_DamageCause, 4ui64);
}

/*
==============
Load_Scriptable_DamageCauseArray
==============
*/
void Load_Scriptable_DamageCauseArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varScriptable_DamageCause, 4 * count);
}

/*
==============
Load_Scriptable_DamageCauseStream
==============
*/
void Load_Scriptable_DamageCauseStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 7989, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptable_DamageCause;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varScriptable_DamageCause = (Scriptable_DamageCause *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_Scriptable_EventSun_Data
==============
*/
void Load_Scriptable_EventSun_Data(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varScriptable_EventSun_Data, 0x34ui64);
}

/*
==============
Load_Scriptable_EventSun_DataArray
==============
*/
void Load_Scriptable_EventSun_DataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varScriptable_EventSun_Data, 52 * count);
}

/*
==============
Load_Scriptable_EventSun_DataStream
==============
*/
void Load_Scriptable_EventSun_DataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 26109, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptable_EventSun_Data;
    do
    {
      Load_Stream(AtStart, pos, 0x34ui64);
      pos = g_streamPosGlob.pos;
      varScriptable_EventSun_Data = (Scriptable_EventSun_Data *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_Scriptable_EventType
==============
*/
void Load_Scriptable_EventType(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varScriptable_EventType, 4ui64);
}

/*
==============
Load_Scriptable_EventTypeArray
==============
*/
void Load_Scriptable_EventTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varScriptable_EventType, 4 * count);
}

/*
==============
Load_Scriptable_EventTypeStream
==============
*/
void Load_Scriptable_EventTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 7659, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptable_EventType;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varScriptable_EventType = (Scriptable_EventType *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_Scriptable_ImageId
==============
*/
void Load_Scriptable_ImageId(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varScriptable_ImageId, 4ui64);
}

/*
==============
Load_Scriptable_ImageIdArray
==============
*/
void Load_Scriptable_ImageIdArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varScriptable_ImageId, 4 * count);
}

/*
==============
Load_Scriptable_ImageIdStream
==============
*/
void Load_Scriptable_ImageIdStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 7824, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptable_ImageId;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varScriptable_ImageId = (Scriptable_ImageId *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_Scriptable_MaterialOverrideType
==============
*/
void Load_Scriptable_MaterialOverrideType(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varScriptable_MaterialOverrideType, 4ui64);
}

/*
==============
Load_Scriptable_MaterialOverrideTypeArray
==============
*/
void Load_Scriptable_MaterialOverrideTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varScriptable_MaterialOverrideType, 4 * count);
}

/*
==============
Load_Scriptable_MaterialOverrideTypeStream
==============
*/
void Load_Scriptable_MaterialOverrideTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 12732, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptable_MaterialOverrideType;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varScriptable_MaterialOverrideType = (Scriptable_MaterialOverrideType *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_Scriptable_MayhemAction
==============
*/
void Load_Scriptable_MayhemAction(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varScriptable_MayhemAction, 4ui64);
}

/*
==============
Load_Scriptable_MayhemActionArray
==============
*/
void Load_Scriptable_MayhemActionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varScriptable_MayhemAction, 4 * count);
}

/*
==============
Load_Scriptable_MayhemActionStream
==============
*/
void Load_Scriptable_MayhemActionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 7714, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptable_MayhemAction;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varScriptable_MayhemAction = (Scriptable_MayhemAction *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_Scriptable_ShaderParamType
==============
*/
void Load_Scriptable_ShaderParamType(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varScriptable_ShaderParamType, 4ui64);
}

/*
==============
Load_Scriptable_ShaderParamTypeArray
==============
*/
void Load_Scriptable_ShaderParamTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varScriptable_ShaderParamType, 4 * count);
}

/*
==============
Load_Scriptable_ShaderParamTypeStream
==============
*/
void Load_Scriptable_ShaderParamTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 7769, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptable_ShaderParamType;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varScriptable_ShaderParamType = (Scriptable_ShaderParamType *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_Scriptable_StateType
==============
*/
void Load_Scriptable_StateType(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varScriptable_StateType, 4ui64);
}

/*
==============
Load_Scriptable_StateTypeArray
==============
*/
void Load_Scriptable_StateTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varScriptable_StateType, 4 * count);
}

/*
==============
Load_Scriptable_StateTypeStream
==============
*/
void Load_Scriptable_StateTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 7934, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptable_StateType;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varScriptable_StateType = (Scriptable_StateType *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Load_Scriptable_TeamFilter
==============
*/
void Load_Scriptable_TeamFilter(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varScriptable_TeamFilter, 4ui64);
}

/*
==============
Load_Scriptable_TeamFilterArray
==============
*/
void Load_Scriptable_TeamFilterArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varScriptable_TeamFilter, 4 * count);
}

/*
==============
Load_Scriptable_TeamFilterStream
==============
*/
void Load_Scriptable_TeamFilterStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 7879, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptable_TeamFilter;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varScriptable_TeamFilter = (Scriptable_TeamFilter *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Mark_ScriptableDamageTagOverride
==============
*/
_BOOL8 Mark_ScriptableDamageTagOverride()
{
  scr_string_t *v0; 
  int v1; 

  v0 = marscr_string_t;
  marscr_string_t = &marScriptableDamageTagOverride->scrTag;
  v1 = Mark_scr_string_t();
  marscr_string_t = v0;
  return v1 != 0;
}

/*
==============
Mark_ScriptableDamageTagOverrideArray
==============
*/
__int64 Mark_ScriptableDamageTagOverrideArray(const unsigned __int64 count)
{
  ScriptableDamageTagOverride *v1; 
  __int64 v2; 
  scr_string_t *v4; 
  int v5; 

  v1 = marScriptableDamageTagOverride;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marscr_string_t;
  while ( 1 )
  {
    marScriptableDamageTagOverride = v1;
    marscr_string_t = &v1->scrTag;
    v5 = Mark_scr_string_t();
    marscr_string_t = v4;
    if ( !v5 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ScriptableDataType
==============
*/
__int64 Mark_ScriptableDataType()
{
  return 1i64;
}

/*
==============
Mark_ScriptableDataTypeArray
==============
*/
__int64 Mark_ScriptableDataTypeArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ScriptableDef
==============
*/
__int64 Mark_ScriptableDef()
{
  ScriptableDef **v0; 
  int v1; 
  ScriptableDef *v2; 
  ScriptablePartDef *v3; 
  int v4; 
  scr_string_t *v5; 
  int v6; 
  XModel **v7; 
  int v8; 

  v0 = marScriptableDefPtr;
  marScriptableDefPtr = &marScriptableDef->nextScriptableDef;
  v1 = Mark_ScriptableDefPtr();
  marScriptableDefPtr = v0;
  if ( !v1 )
    return 0i64;
  v2 = marScriptableDef;
  if ( marScriptableDef->parts )
  {
    v3 = marScriptablePartDef;
    marScriptablePartDef = marScriptableDef->parts;
    v4 = Mark_ScriptablePartDefArray(marScriptableDef->numParts);
    marScriptablePartDef = v3;
    if ( !v4 )
      return 0i64;
    v2 = marScriptableDef;
  }
  v5 = marscr_string_t;
  marscr_string_t = &v2->animationTreeName;
  v6 = Mark_scr_string_t();
  marscr_string_t = v5;
  if ( v6 )
  {
    if ( !marScriptableDef->models )
      return 1i64;
    v7 = marXModelPtr;
    marXModelPtr = marScriptableDef->models;
    v8 = Mark_XModelPtrArray(marScriptableDef->numXModels);
    marXModelPtr = v7;
    if ( v8 )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ScriptableDefArray
==============
*/
__int64 Mark_ScriptableDefArray(const unsigned __int64 count)
{
  ScriptableDef *v1; 
  __int64 v2; 
  ScriptableDef **v4; 
  int v5; 
  ScriptableDef *v6; 
  ScriptablePartDef *v7; 
  int v8; 
  scr_string_t *v9; 
  int v10; 
  XModel **v11; 
  int v12; 

  v1 = marScriptableDef;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  while ( 1 )
  {
    v4 = marScriptableDefPtr;
    marScriptableDefPtr = &v1->nextScriptableDef;
    marScriptableDef = v1;
    v5 = Mark_ScriptableDefPtr();
    marScriptableDefPtr = v4;
    if ( !v5 )
      break;
    v6 = marScriptableDef;
    if ( marScriptableDef->parts )
    {
      v7 = marScriptablePartDef;
      marScriptablePartDef = marScriptableDef->parts;
      v8 = Mark_ScriptablePartDefArray(marScriptableDef->numParts);
      marScriptablePartDef = v7;
      if ( !v8 )
        return 0i64;
      v6 = marScriptableDef;
    }
    v9 = marscr_string_t;
    marscr_string_t = &v6->animationTreeName;
    v10 = Mark_scr_string_t();
    marscr_string_t = v9;
    if ( !v10 )
      break;
    if ( marScriptableDef->models )
    {
      v11 = marXModelPtr;
      marXModelPtr = marScriptableDef->models;
      v12 = Mark_XModelPtrArray(marScriptableDef->numXModels);
      marXModelPtr = v11;
      if ( !v12 )
        break;
    }
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ScriptableDefPtr
==============
*/
__int64 Mark_ScriptableDefPtr()
{
  ScriptableDef *v0; 
  ScriptableDef *v1; 
  int v3; 

  v0 = *marScriptableDefPtr;
  if ( *marScriptableDefPtr )
  {
    v1 = marScriptableDef;
    marScriptableDef = *marScriptableDefPtr;
    if ( Mark_ScriptableDefAsset(v0, 0) )
    {
      marScriptableDef = v1;
      return 1i64;
    }
    if ( !Mark_ScriptableDef() )
    {
      marScriptableDef = v1;
      return 0i64;
    }
    v3 = Mark_ScriptableDefAsset(marScriptableDef, 1);
    marScriptableDef = v1;
    if ( !v3 )
      return 0i64;
  }
  return 1i64;
}

/*
==============
Mark_ScriptableDefPtrArray
==============
*/
__int64 Mark_ScriptableDefPtrArray(const unsigned __int64 count)
{
  ScriptableDef **v1; 
  __int64 v2; 
  ScriptableDef *v4; 
  ScriptableDef *v5; 
  int v6; 

  v1 = marScriptableDefPtr;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marScriptableDef;
  while ( 1 )
  {
    marScriptableDefPtr = v1;
    v5 = *v1;
    if ( !*v1 )
      goto LABEL_8;
    marScriptableDef = *v1;
    if ( Mark_ScriptableDefAsset(v5, 0) )
    {
      marScriptableDef = v4;
      goto LABEL_8;
    }
    if ( !Mark_ScriptableDef() )
      break;
    v6 = Mark_ScriptableDefAsset(marScriptableDef, 1);
    marScriptableDef = v4;
    if ( !v6 )
      return 0i64;
LABEL_8:
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  marScriptableDef = v4;
  return 0i64;
}

/*
==============
Mark_ScriptableEventAddModelDef
==============
*/
_BOOL8 Mark_ScriptableEventAddModelDef()
{
  scr_string_t *v0; 
  int v1; 
  XModel **v2; 
  int v3; 
  _BOOL8 result; 

  v0 = marscr_string_t;
  marscr_string_t = &marScriptableEventAddModelDef->scrTagName;
  v1 = Mark_scr_string_t();
  marscr_string_t = v0;
  result = 0;
  if ( v1 )
  {
    v2 = marXModelPtr;
    marXModelPtr = &marScriptableEventAddModelDef->model;
    v3 = Mark_XModelPtr();
    marXModelPtr = v2;
    if ( v3 )
      return 1;
  }
  return result;
}

/*
==============
Mark_ScriptableEventAddModelDefArray
==============
*/
__int64 Mark_ScriptableEventAddModelDefArray(const unsigned __int64 count)
{
  ScriptableEventAddModelDef *v1; 
  __int64 v2; 
  scr_string_t *v4; 
  int v5; 
  XModel **v6; 
  int v7; 

  v1 = marScriptableEventAddModelDef;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  while ( 1 )
  {
    v4 = marscr_string_t;
    marscr_string_t = &v1->scrTagName;
    marScriptableEventAddModelDef = v1;
    v5 = Mark_scr_string_t();
    marscr_string_t = v4;
    if ( !v5 )
      break;
    v6 = marXModelPtr;
    marXModelPtr = &marScriptableEventAddModelDef->model;
    v7 = Mark_XModelPtr();
    marXModelPtr = v6;
    if ( !v7 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ScriptableEventAnimationDef
==============
*/
_BOOL8 Mark_ScriptableEventAnimationDef()
{
  XAnimParts **v0; 
  int v1; 
  ScriptableEventDef *v2; 
  int v3; 
  _BOOL8 result; 

  v0 = marXAnimPartsPtr;
  marXAnimPartsPtr = &marScriptableEventAnimationDef->animation;
  v1 = Mark_XAnimPartsPtr();
  marXAnimPartsPtr = v0;
  result = 0;
  if ( v1 )
  {
    if ( !marScriptableEventAnimationDef->eventsAtEnd )
      return 1;
    v2 = marScriptableEventDef;
    marScriptableEventDef = marScriptableEventAnimationDef->eventsAtEnd;
    v3 = Mark_ScriptableEventDefArray(marScriptableEventAnimationDef->eventAtEndCount);
    marScriptableEventDef = v2;
    if ( v3 )
      return 1;
  }
  return result;
}

/*
==============
Mark_ScriptableEventAnimationDefArray
==============
*/
__int64 Mark_ScriptableEventAnimationDefArray(const unsigned __int64 count)
{
  ScriptableEventAnimationDef *v1; 
  __int64 v2; 
  XAnimParts **v4; 
  int v5; 
  ScriptableEventDef *v6; 
  int v7; 

  v1 = marScriptableEventAnimationDef;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  while ( 1 )
  {
    v4 = marXAnimPartsPtr;
    marXAnimPartsPtr = &v1->animation;
    marScriptableEventAnimationDef = v1;
    v5 = Mark_XAnimPartsPtr();
    marXAnimPartsPtr = v4;
    if ( !v5 )
      break;
    if ( marScriptableEventAnimationDef->eventsAtEnd )
    {
      v6 = marScriptableEventDef;
      marScriptableEventDef = marScriptableEventAnimationDef->eventsAtEnd;
      v7 = Mark_ScriptableEventDefArray(marScriptableEventAnimationDef->eventAtEndCount);
      marScriptableEventDef = v6;
      if ( !v7 )
        break;
    }
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ScriptableEventAnonymousDef
==============
*/
__int64 Mark_ScriptableEventAnonymousDef()
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventAnonymousDefArray
==============
*/
__int64 Mark_ScriptableEventAnonymousDefArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventApplyAngularForceDef
==============
*/
__int64 Mark_ScriptableEventApplyAngularForceDef()
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventApplyAngularForceDefArray
==============
*/
__int64 Mark_ScriptableEventApplyAngularForceDefArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventApplyConstantAngularForceDef
==============
*/
__int64 Mark_ScriptableEventApplyConstantAngularForceDef()
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventApplyConstantAngularForceDefArray
==============
*/
__int64 Mark_ScriptableEventApplyConstantAngularForceDefArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventApplyConstantForceDef
==============
*/
__int64 Mark_ScriptableEventApplyConstantForceDef()
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventApplyConstantForceDefArray
==============
*/
__int64 Mark_ScriptableEventApplyConstantForceDefArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventApplyForceDef
==============
*/
__int64 Mark_ScriptableEventApplyForceDef()
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventApplyForceDefArray
==============
*/
__int64 Mark_ScriptableEventApplyForceDefArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventBaseDef
==============
*/
__int64 Mark_ScriptableEventBaseDef()
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventBaseDefArray
==============
*/
__int64 Mark_ScriptableEventBaseDefArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventChunkDynentDef
==============
*/
__int64 Mark_ScriptableEventChunkDynentDef()
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventChunkDynentDefArray
==============
*/
__int64 Mark_ScriptableEventChunkDynentDefArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventClientViewSelectorDef
==============
*/
__int64 Mark_ScriptableEventClientViewSelectorDef()
{
  ScriptableEventClientViewSelectorDef *v0; 
  ScriptableEventDef *v1; 
  int v2; 
  int v3; 

  v0 = marScriptableEventClientViewSelectorDef;
  v1 = marScriptableEventDef;
  if ( marScriptableEventClientViewSelectorDef->events1p )
  {
    marScriptableEventDef = marScriptableEventClientViewSelectorDef->events1p;
    v2 = Mark_ScriptableEventDefArray(marScriptableEventClientViewSelectorDef->event1pCount);
    marScriptableEventDef = v1;
    if ( !v2 )
      return 0i64;
    v0 = marScriptableEventClientViewSelectorDef;
  }
  if ( v0->events3p )
  {
    marScriptableEventDef = v0->events3p;
    v3 = Mark_ScriptableEventDefArray(v0->event3pCount);
    marScriptableEventDef = v1;
    if ( !v3 )
      return 0i64;
  }
  return 1i64;
}

/*
==============
Mark_ScriptableEventClientViewSelectorDefArray
==============
*/
__int64 Mark_ScriptableEventClientViewSelectorDefArray(const unsigned __int64 count)
{
  ScriptableEventClientViewSelectorDef *v1; 
  __int64 v2; 
  ScriptableEventDef *v4; 
  ScriptableEventClientViewSelectorDef *v5; 
  int v6; 
  int v7; 

  v1 = marScriptableEventClientViewSelectorDef;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marScriptableEventDef;
  while ( 1 )
  {
    marScriptableEventClientViewSelectorDef = v1;
    v5 = v1;
    if ( v1->events1p )
    {
      marScriptableEventDef = v1->events1p;
      v6 = Mark_ScriptableEventDefArray(v1->event1pCount);
      marScriptableEventDef = v4;
      if ( !v6 )
        return 0i64;
      v5 = marScriptableEventClientViewSelectorDef;
    }
    if ( v5->events3p )
    {
      marScriptableEventDef = v5->events3p;
      v7 = Mark_ScriptableEventDefArray(v5->event3pCount);
      marScriptableEventDef = v4;
      if ( !v7 )
        break;
    }
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ScriptableEventCollisionDef
==============
*/
_BOOL8 Mark_ScriptableEventCollisionDef()
{
  XModel **v0; 
  int v1; 

  v0 = marXModelPtr;
  marXModelPtr = &marScriptableEventCollisionDef->model;
  v1 = Mark_XModelPtr();
  marXModelPtr = v0;
  return v1 != 0;
}

/*
==============
Mark_ScriptableEventCollisionDefArray
==============
*/
__int64 Mark_ScriptableEventCollisionDefArray(const unsigned __int64 count)
{
  ScriptableEventCollisionDef *v1; 
  __int64 v2; 
  XModel **v4; 
  int v5; 

  v1 = marScriptableEventCollisionDef;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marXModelPtr;
  while ( 1 )
  {
    marScriptableEventCollisionDef = v1;
    marXModelPtr = &v1->model;
    v5 = Mark_XModelPtr();
    marXModelPtr = v4;
    if ( !v5 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ScriptableEventCompassIconDef
==============
*/
_BOOL8 Mark_ScriptableEventCompassIconDef()
{
  Material **v0; 
  int v1; 
  _BOOL8 result; 

  v0 = marMaterialHandle;
  marMaterialHandle = &marScriptableEventCompassIconDef->friendlyArrow;
  if ( !Mark_MaterialHandle() )
    goto LABEL_14;
  marMaterialHandle = &marScriptableEventCompassIconDef->friendlyFiring;
  if ( !Mark_MaterialHandle() )
    goto LABEL_14;
  marMaterialHandle = &marScriptableEventCompassIconDef->friendlyChatting;
  if ( !Mark_MaterialHandle() )
    goto LABEL_14;
  marMaterialHandle = &marScriptableEventCompassIconDef->friendlyYelling;
  if ( !Mark_MaterialHandle() )
    goto LABEL_14;
  marMaterialHandle = &marScriptableEventCompassIconDef->partyArrow;
  if ( !Mark_MaterialHandle() )
    goto LABEL_14;
  marMaterialHandle = &marScriptableEventCompassIconDef->partyFiring;
  if ( Mark_MaterialHandle() && (marMaterialHandle = &marScriptableEventCompassIconDef->partyChatting, Mark_MaterialHandle()) && (marMaterialHandle = &marScriptableEventCompassIconDef->partyYelling, Mark_MaterialHandle()) && (marMaterialHandle = &marScriptableEventCompassIconDef->squadArrow, Mark_MaterialHandle()) && (marMaterialHandle = &marScriptableEventCompassIconDef->squadFiring, Mark_MaterialHandle()) && (marMaterialHandle = marScriptableEventCompassIconDef->enemyCompassIconQuiet, Mark_MaterialHandleArray(3ui64)) && (marMaterialHandle = marScriptableEventCompassIconDef->enemyCompassIconFiring, Mark_MaterialHandleArray(3ui64)) )
  {
    marMaterialHandle = &marScriptableEventCompassIconDef->enemyCompassIconDirectional;
    v1 = Mark_MaterialHandle();
    marMaterialHandle = v0;
    return v1 != 0;
  }
  else
  {
LABEL_14:
    result = 0i64;
    marMaterialHandle = v0;
  }
  return result;
}

/*
==============
Mark_ScriptableEventCompassIconDefArray
==============
*/
__int64 Mark_ScriptableEventCompassIconDefArray(const unsigned __int64 count)
{
  ScriptableEventCompassIconDef *v1; 
  __int64 v2; 
  Material **v4; 

  v1 = marScriptableEventCompassIconDef;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marMaterialHandle;
  while ( 1 )
  {
    marScriptableEventCompassIconDef = v1;
    marMaterialHandle = &v1->friendlyArrow;
    if ( !Mark_MaterialHandle() )
      break;
    marMaterialHandle = &marScriptableEventCompassIconDef->friendlyFiring;
    if ( !Mark_MaterialHandle() )
      break;
    marMaterialHandle = &marScriptableEventCompassIconDef->friendlyChatting;
    if ( !Mark_MaterialHandle() )
      break;
    marMaterialHandle = &marScriptableEventCompassIconDef->friendlyYelling;
    if ( !Mark_MaterialHandle() )
      break;
    marMaterialHandle = &marScriptableEventCompassIconDef->partyArrow;
    if ( !Mark_MaterialHandle() )
      break;
    marMaterialHandle = &marScriptableEventCompassIconDef->partyFiring;
    if ( !Mark_MaterialHandle() )
      break;
    marMaterialHandle = &marScriptableEventCompassIconDef->partyChatting;
    if ( !Mark_MaterialHandle() )
      break;
    marMaterialHandle = &marScriptableEventCompassIconDef->partyYelling;
    if ( !Mark_MaterialHandle() )
      break;
    marMaterialHandle = &marScriptableEventCompassIconDef->squadArrow;
    if ( !Mark_MaterialHandle() )
      break;
    marMaterialHandle = &marScriptableEventCompassIconDef->squadFiring;
    if ( !Mark_MaterialHandle() )
      break;
    marMaterialHandle = marScriptableEventCompassIconDef->enemyCompassIconQuiet;
    if ( !Mark_MaterialHandleArray(3ui64) )
      break;
    marMaterialHandle = marScriptableEventCompassIconDef->enemyCompassIconFiring;
    if ( !Mark_MaterialHandleArray(3ui64) )
      break;
    marMaterialHandle = &marScriptableEventCompassIconDef->enemyCompassIconDirectional;
    if ( !Mark_MaterialHandle() )
      break;
    ++v1;
    marMaterialHandle = v4;
    if ( ++v2 >= count )
      return 1i64;
  }
  marMaterialHandle = v4;
  return 0i64;
}

/*
==============
Mark_ScriptableEventDef
==============
*/
_BOOL8 Mark_ScriptableEventDef()
{
  ScriptableEventDefUnion *v0; 
  int v1; 

  v0 = marScriptableEventDefUnion;
  marScriptableEventDefUnion = &marScriptableEventDef->data;
  v1 = Mark_ScriptableEventDefUnion();
  marScriptableEventDefUnion = v0;
  return v1 != 0;
}

/*
==============
Mark_ScriptableEventDefArray
==============
*/
__int64 Mark_ScriptableEventDefArray(const unsigned __int64 count)
{
  ScriptableEventDef *v1; 
  __int64 v2; 
  ScriptableEventDefUnion *v4; 
  int v5; 

  v1 = marScriptableEventDef;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marScriptableEventDefUnion;
  while ( 1 )
  {
    marScriptableEventDef = v1;
    marScriptableEventDefUnion = &v1->data;
    v5 = Mark_ScriptableEventDefUnion();
    marScriptableEventDefUnion = v4;
    if ( !v5 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ScriptableEventDefUnion
==============
*/
int Mark_ScriptableEventDefUnion()
{
  Scriptable_EventType type; 
  ScriptableEventRandomDef *v1; 
  int result; 
  ScriptableEventScriptDef *v3; 
  ScriptableEventModelDef *v4; 
  ScriptableEventCollisionDef *v5; 
  ScriptableEventAnimationDef *v6; 
  ScriptableEventHideShowBoneDef *v7; 
  ScriptableEventNoteTrackDef *v8; 
  ScriptableEventSpawnDynentDef *v9; 
  ScriptableEventPFXDef *v10; 
  ScriptableEventSoundDef *v11; 
  ScriptableEventExplosionDef *v12; 
  ScriptableEventRumbleDef *v13; 
  ScriptableEventScreenshakeDef *v14; 
  ScriptableEventSetMayhemDef *v15; 
  ScriptableEventClientViewSelectorDef *v16; 
  ScriptableEventTeamSelectorDef *v17; 
  ScriptableEventAddModelDef *v18; 
  ScriptableEventCompassIconDef *v19; 
  ScriptableEventDynamicBoneNoiseCurveDef *v20; 
  ScriptableEventFootstepDef *v21; 
  ScriptableEventGravityArcDef *v22; 
  ScriptableEventObjectiveDef *v23; 
  ScriptableEventScriptDamageDef *v24; 

  type = marScriptableEventDef->type;
  if ( (unsigned int)type > Scriptable_EventType_Wait )
  {
    switch ( type )
    {
      case Scriptable_EventType_Random:
        v1 = marScriptableEventRandomDef;
        marScriptableEventRandomDef = (ScriptableEventRandomDef *)marScriptableEventDefUnion;
        result = Mark_ScriptableEventRandomDef();
        marScriptableEventRandomDef = v1;
        goto LABEL_57;
      case Scriptable_EventType_Script:
        v3 = marScriptableEventScriptDef;
        marScriptableEventScriptDef = (ScriptableEventScriptDef *)marScriptableEventDefUnion;
        result = Mark_ScriptableEventScriptDef();
        marScriptableEventScriptDef = v3;
        goto LABEL_57;
      case Scriptable_EventType_Model:
        v4 = marScriptableEventModelDef;
        marScriptableEventModelDef = (ScriptableEventModelDef *)marScriptableEventDefUnion;
        result = Mark_ScriptableEventModelDef();
        marScriptableEventModelDef = v4;
        goto LABEL_57;
      case Scriptable_EventType_Collision:
        v5 = marScriptableEventCollisionDef;
        marScriptableEventCollisionDef = (ScriptableEventCollisionDef *)marScriptableEventDefUnion;
        result = Mark_ScriptableEventCollisionDef();
        marScriptableEventCollisionDef = v5;
        goto LABEL_57;
      case Scriptable_EventType_Animation:
        v6 = marScriptableEventAnimationDef;
        marScriptableEventAnimationDef = (ScriptableEventAnimationDef *)marScriptableEventDefUnion;
        result = Mark_ScriptableEventAnimationDef();
        marScriptableEventAnimationDef = v6;
        goto LABEL_57;
      case Scriptable_EventType_HideShowBone:
        v7 = marScriptableEventHideShowBoneDef;
        marScriptableEventHideShowBoneDef = (ScriptableEventHideShowBoneDef *)marScriptableEventDefUnion;
        result = Mark_ScriptableEventHideShowBoneDef();
        marScriptableEventHideShowBoneDef = v7;
        goto LABEL_57;
    }
    if ( type != Scriptable_EventType_DisablePhysicsSubShape )
    {
      if ( type == Scriptable_EventType_NoteTrack )
      {
        v8 = marScriptableEventNoteTrackDef;
        marScriptableEventNoteTrackDef = (ScriptableEventNoteTrackDef *)marScriptableEventDefUnion;
        result = Mark_ScriptableEventNoteTrackDef();
        marScriptableEventNoteTrackDef = v8;
        goto LABEL_57;
      }
      if ( type != Scriptable_EventType_ChunkDynent )
      {
        switch ( type )
        {
          case Scriptable_EventType_SpawnDynent:
            v9 = marScriptableEventSpawnDynentDef;
            marScriptableEventSpawnDynentDef = (ScriptableEventSpawnDynentDef *)marScriptableEventDefUnion;
            result = Mark_ScriptableEventSpawnDynentDef();
            marScriptableEventSpawnDynentDef = v9;
            goto LABEL_57;
          case Scriptable_EventType_PFX:
            v10 = marScriptableEventPFXDef;
            marScriptableEventPFXDef = (ScriptableEventPFXDef *)marScriptableEventDefUnion;
            result = Mark_ScriptableEventPFXDef();
            marScriptableEventPFXDef = v10;
            goto LABEL_57;
          case Scriptable_EventType_Sound:
            v11 = marScriptableEventSoundDef;
            marScriptableEventSoundDef = (ScriptableEventSoundDef *)marScriptableEventDefUnion;
            result = Mark_ScriptableEventSoundDef();
            marScriptableEventSoundDef = v11;
            goto LABEL_57;
          case Scriptable_EventType_Explosion:
            v12 = marScriptableEventExplosionDef;
            marScriptableEventExplosionDef = (ScriptableEventExplosionDef *)marScriptableEventDefUnion;
            result = Mark_ScriptableEventExplosionDef();
            marScriptableEventExplosionDef = v12;
            goto LABEL_57;
        }
        if ( (unsigned int)(type - 15) > 1 )
        {
          if ( type == Scriptable_EventType_Rumble )
          {
            v13 = marScriptableEventRumbleDef;
            marScriptableEventRumbleDef = (ScriptableEventRumbleDef *)marScriptableEventDefUnion;
            result = Mark_ScriptableEventRumbleDef();
            marScriptableEventRumbleDef = v13;
            goto LABEL_57;
          }
          if ( type == Scriptable_EventType_Screenshake )
          {
            v14 = marScriptableEventScreenshakeDef;
            marScriptableEventScreenshakeDef = (ScriptableEventScreenshakeDef *)marScriptableEventDefUnion;
            result = Mark_ScriptableEventScreenshakeDef();
            marScriptableEventScreenshakeDef = v14;
            goto LABEL_57;
          }
          if ( type != Scriptable_EventType_PartDamage )
          {
            if ( type == Scriptable_EventType_SetMayhem )
            {
              v15 = marScriptableEventSetMayhemDef;
              marScriptableEventSetMayhemDef = (ScriptableEventSetMayhemDef *)marScriptableEventDefUnion;
              result = Mark_ScriptableEventSetMayhemDef();
              marScriptableEventSetMayhemDef = v15;
              goto LABEL_57;
            }
            if ( (unsigned int)(type - 21) > 2 )
            {
              switch ( type )
              {
                case Scriptable_EventType_ClientViewSelector:
                  v16 = marScriptableEventClientViewSelectorDef;
                  marScriptableEventClientViewSelectorDef = (ScriptableEventClientViewSelectorDef *)marScriptableEventDefUnion;
                  result = Mark_ScriptableEventClientViewSelectorDef();
                  marScriptableEventClientViewSelectorDef = v16;
                  goto LABEL_57;
                case Scriptable_EventType_TeamSelector:
                  v17 = marScriptableEventTeamSelectorDef;
                  marScriptableEventTeamSelectorDef = (ScriptableEventTeamSelectorDef *)marScriptableEventDefUnion;
                  result = Mark_ScriptableEventTeamSelectorDef();
                  marScriptableEventTeamSelectorDef = v17;
                  goto LABEL_57;
                case Scriptable_EventType_AddModel:
                  v18 = marScriptableEventAddModelDef;
                  marScriptableEventAddModelDef = (ScriptableEventAddModelDef *)marScriptableEventDefUnion;
                  result = Mark_ScriptableEventAddModelDef();
                  marScriptableEventAddModelDef = v18;
                  goto LABEL_57;
              }
              if ( (unsigned int)(type - 27) > 3 )
              {
                if ( type == Scriptable_EventType_CompassIcon )
                {
                  v19 = marScriptableEventCompassIconDef;
                  marScriptableEventCompassIconDef = (ScriptableEventCompassIconDef *)marScriptableEventDefUnion;
                  result = Mark_ScriptableEventCompassIconDef();
                  marScriptableEventCompassIconDef = v19;
                  goto LABEL_57;
                }
                if ( type != Scriptable_EventType_MaterialOverride )
                {
                  if ( type == Scriptable_EventType_DynamicBoneNoiseCurve )
                  {
                    v20 = marScriptableEventDynamicBoneNoiseCurveDef;
                    marScriptableEventDynamicBoneNoiseCurveDef = (ScriptableEventDynamicBoneNoiseCurveDef *)marScriptableEventDefUnion;
                    result = Mark_ScriptableEventDynamicBoneNoiseCurveDef();
                    marScriptableEventDynamicBoneNoiseCurveDef = v20;
                    goto LABEL_57;
                  }
                  if ( type != Scriptable_EventType_Move )
                  {
                    if ( type == Scriptable_EventType_Footstep )
                    {
                      v21 = marScriptableEventFootstepDef;
                      marScriptableEventFootstepDef = (ScriptableEventFootstepDef *)marScriptableEventDefUnion;
                      result = Mark_ScriptableEventFootstepDef();
                      marScriptableEventFootstepDef = v21;
                      goto LABEL_57;
                    }
                    if ( type == Scriptable_EventType_GravityArc )
                    {
                      v22 = marScriptableEventGravityArcDef;
                      marScriptableEventGravityArcDef = (ScriptableEventGravityArcDef *)marScriptableEventDefUnion;
                      result = Mark_ScriptableEventGravityArcDef();
                      marScriptableEventGravityArcDef = v22;
                      goto LABEL_57;
                    }
                    if ( type != Scriptable_EventType_ViewTrigger )
                    {
                      if ( type == Scriptable_EventType_Objective )
                      {
                        v23 = marScriptableEventObjectiveDef;
                        marScriptableEventObjectiveDef = (ScriptableEventObjectiveDef *)marScriptableEventDefUnion;
                        result = Mark_ScriptableEventObjectiveDef();
                        marScriptableEventObjectiveDef = v23;
                        goto LABEL_57;
                      }
                      if ( type == Scriptable_EventType_ScriptDamage )
                      {
                        v24 = marScriptableEventScriptDamageDef;
                        marScriptableEventScriptDamageDef = (ScriptableEventScriptDamageDef *)marScriptableEventDefUnion;
                        result = Mark_ScriptableEventScriptDamageDef();
                        marScriptableEventScriptDamageDef = v24;
LABEL_57:
                        if ( !result )
                          return result;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return 1;
}

/*
==============
Mark_ScriptableEventDefUnionArray
==============
*/
__int64 Mark_ScriptableEventDefUnionArray(const unsigned __int64 count)
{
  ScriptableEventDefUnion *v1; 
  __int64 v2; 

  v1 = marScriptableEventDefUnion;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  while ( 1 )
  {
    marScriptableEventDefUnion = v1;
    if ( !Mark_ScriptableEventDefUnion() )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ScriptableEventDisablePhysicsSubShapeDef
==============
*/
__int64 Mark_ScriptableEventDisablePhysicsSubShapeDef()
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventDisablePhysicsSubShapeDefArray
==============
*/
__int64 Mark_ScriptableEventDisablePhysicsSubShapeDefArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventDlc1Def
==============
*/
__int64 Mark_ScriptableEventDlc1Def()
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventDlc1DefArray
==============
*/
__int64 Mark_ScriptableEventDlc1DefArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventDynamicBoneNoiseCurveDef
==============
*/
_BOOL8 Mark_ScriptableEventDynamicBoneNoiseCurveDef()
{
  XAnimCurve **v0; 
  int v1; 

  v0 = marXAnimCurvePtr;
  marXAnimCurvePtr = &marScriptableEventDynamicBoneNoiseCurveDef->curve;
  v1 = Mark_XAnimCurvePtr();
  marXAnimCurvePtr = v0;
  return v1 != 0;
}

/*
==============
Mark_ScriptableEventDynamicBoneNoiseCurveDefArray
==============
*/
__int64 Mark_ScriptableEventDynamicBoneNoiseCurveDefArray(const unsigned __int64 count)
{
  ScriptableEventDynamicBoneNoiseCurveDef *v1; 
  __int64 v2; 
  XAnimCurve **v4; 
  int v5; 

  v1 = marScriptableEventDynamicBoneNoiseCurveDef;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marXAnimCurvePtr;
  while ( 1 )
  {
    marScriptableEventDynamicBoneNoiseCurveDef = v1;
    marXAnimCurvePtr = &v1->curve;
    v5 = Mark_XAnimCurvePtr();
    marXAnimCurvePtr = v4;
    if ( !v5 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ScriptableEventExplosionDef
==============
*/
_BOOL8 Mark_ScriptableEventExplosionDef()
{
  scr_string_t *v0; 
  int v1; 
  WeaponCompleteDef **v2; 
  int v3; 
  _BOOL8 result; 

  v0 = marscr_string_t;
  marscr_string_t = &marScriptableEventExplosionDef->scrTagName;
  v1 = Mark_scr_string_t();
  marscr_string_t = v0;
  result = 0;
  if ( v1 )
  {
    v2 = marWeaponCompleteDefPtr;
    marWeaponCompleteDefPtr = &marScriptableEventExplosionDef->weapon;
    v3 = Mark_WeaponCompleteDefPtr();
    marWeaponCompleteDefPtr = v2;
    if ( v3 )
      return 1;
  }
  return result;
}

/*
==============
Mark_ScriptableEventExplosionDefArray
==============
*/
__int64 Mark_ScriptableEventExplosionDefArray(const unsigned __int64 count)
{
  ScriptableEventExplosionDef *v1; 
  __int64 v2; 
  scr_string_t *v4; 
  int v5; 
  WeaponCompleteDef **v6; 
  int v7; 

  v1 = marScriptableEventExplosionDef;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  while ( 1 )
  {
    v4 = marscr_string_t;
    marscr_string_t = &v1->scrTagName;
    marScriptableEventExplosionDef = v1;
    v5 = Mark_scr_string_t();
    marscr_string_t = v4;
    if ( !v5 )
      break;
    v6 = marWeaponCompleteDefPtr;
    marWeaponCompleteDefPtr = &marScriptableEventExplosionDef->weapon;
    v7 = Mark_WeaponCompleteDefPtr();
    marWeaponCompleteDefPtr = v6;
    if ( !v7 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ScriptableEventFootstepDef
==============
*/
_BOOL8 Mark_ScriptableEventFootstepDef()
{
  scr_string_t *v0; 
  int v1; 
  FootstepVFX **v2; 
  int v4; 

  v0 = marscr_string_t;
  marscr_string_t = &marScriptableEventFootstepDef->scrTagName;
  v1 = Mark_scr_string_t();
  marscr_string_t = v0;
  if ( !v1 )
    return 0i64;
  v2 = marFootstepVFXPtr;
  marFootstepVFXPtr = &marScriptableEventFootstepDef->rightFootstepVFX;
  if ( !Mark_FootstepVFXPtr() )
  {
    marFootstepVFXPtr = v2;
    return 0i64;
  }
  marFootstepVFXPtr = &marScriptableEventFootstepDef->leftFootstepVFX;
  v4 = Mark_FootstepVFXPtr();
  marFootstepVFXPtr = v2;
  return v4 != 0;
}

/*
==============
Mark_ScriptableEventFootstepDefArray
==============
*/
__int64 Mark_ScriptableEventFootstepDefArray(const unsigned __int64 count)
{
  ScriptableEventFootstepDef *v1; 
  __int64 v2; 
  scr_string_t *v4; 
  int v5; 
  FootstepVFX **v6; 
  int v7; 

  v1 = marScriptableEventFootstepDef;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  while ( 1 )
  {
    v4 = marscr_string_t;
    marscr_string_t = &v1->scrTagName;
    marScriptableEventFootstepDef = v1;
    v5 = Mark_scr_string_t();
    marscr_string_t = v4;
    if ( !v5 )
      break;
    v6 = marFootstepVFXPtr;
    marFootstepVFXPtr = &marScriptableEventFootstepDef->rightFootstepVFX;
    if ( !Mark_FootstepVFXPtr() )
    {
      marFootstepVFXPtr = v6;
      return 0i64;
    }
    marFootstepVFXPtr = &marScriptableEventFootstepDef->leftFootstepVFX;
    v7 = Mark_FootstepVFXPtr();
    marFootstepVFXPtr = v6;
    if ( !v7 )
      return 0i64;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ScriptableEventGravityArcDef
==============
*/
int Mark_ScriptableEventGravityArcDef()
{
  ScriptableEventDef *v0; 
  int result; 

  if ( !marScriptableEventGravityArcDef->eventsAtEnd )
    return 1;
  v0 = marScriptableEventDef;
  marScriptableEventDef = marScriptableEventGravityArcDef->eventsAtEnd;
  result = Mark_ScriptableEventDefArray(marScriptableEventGravityArcDef->eventAtEndCount);
  marScriptableEventDef = v0;
  if ( result )
    return 1;
  return result;
}

/*
==============
Mark_ScriptableEventGravityArcDefArray
==============
*/
__int64 Mark_ScriptableEventGravityArcDefArray(const unsigned __int64 count)
{
  ScriptableEventGravityArcDef *v1; 
  __int64 v2; 
  ScriptableEventDef *v4; 
  int v5; 

  v1 = marScriptableEventGravityArcDef;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marScriptableEventDef;
  while ( 1 )
  {
    marScriptableEventGravityArcDef = v1;
    if ( v1->eventsAtEnd )
    {
      marScriptableEventDef = v1->eventsAtEnd;
      v5 = Mark_ScriptableEventDefArray(v1->eventAtEndCount);
      marScriptableEventDef = v4;
      if ( !v5 )
        break;
    }
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ScriptableEventHideShowBoneDef
==============
*/
_BOOL8 Mark_ScriptableEventHideShowBoneDef()
{
  scr_string_t *v0; 
  int v1; 

  v0 = marscr_string_t;
  marscr_string_t = &marScriptableEventHideShowBoneDef->scrTagName;
  v1 = Mark_scr_string_t();
  marscr_string_t = v0;
  return v1 != 0;
}

/*
==============
Mark_ScriptableEventHideShowBoneDefArray
==============
*/
__int64 Mark_ScriptableEventHideShowBoneDefArray(const unsigned __int64 count)
{
  ScriptableEventHideShowBoneDef *v1; 
  __int64 v2; 
  scr_string_t *v4; 
  int v5; 

  v1 = marScriptableEventHideShowBoneDef;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marscr_string_t;
  while ( 1 )
  {
    marScriptableEventHideShowBoneDef = v1;
    marscr_string_t = &v1->scrTagName;
    v5 = Mark_scr_string_t();
    marscr_string_t = v4;
    if ( !v5 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ScriptableEventHoverDef
==============
*/
__int64 Mark_ScriptableEventHoverDef()
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventHoverDefArray
==============
*/
__int64 Mark_ScriptableEventHoverDefArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventLightDef
==============
*/
__int64 Mark_ScriptableEventLightDef()
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventLightDefArray
==============
*/
__int64 Mark_ScriptableEventLightDefArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventMaterialOverrideDef
==============
*/
__int64 Mark_ScriptableEventMaterialOverrideDef()
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventMaterialOverrideDefArray
==============
*/
__int64 Mark_ScriptableEventMaterialOverrideDefArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventModelDef
==============
*/
_BOOL8 Mark_ScriptableEventModelDef()
{
  ScriptableModelUnion *v0; 
  int v1; 

  v0 = marScriptableModelUnion;
  marScriptableModelUnion = &marScriptableEventModelDef->data;
  v1 = Mark_ScriptableModelUnion();
  marScriptableModelUnion = v0;
  return v1 != 0;
}

/*
==============
Mark_ScriptableEventModelDefArray
==============
*/
__int64 Mark_ScriptableEventModelDefArray(const unsigned __int64 count)
{
  ScriptableEventModelDef *v1; 
  __int64 v2; 
  ScriptableModelUnion *v4; 
  ScriptableModelUnion *i; 
  char compositeModel; 
  XCompositeModelDef **v7; 
  int v8; 
  XModel **v9; 

  v1 = marScriptableEventModelDef;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marScriptableModelUnion;
  for ( i = &marScriptableEventModelDef->data; ; i += 4 )
  {
    marScriptableEventModelDef = v1;
    marScriptableModelUnion = i;
    compositeModel = (char)i[-1].compositeModel;
    if ( compositeModel == 2 )
    {
      v7 = marXCompositeModelDefPtr;
      marXCompositeModelDefPtr = &i->compositeModel;
      v8 = Mark_XCompositeModelDefPtr();
      marXCompositeModelDefPtr = v7;
      goto LABEL_7;
    }
    if ( compositeModel == 1 )
      break;
LABEL_8:
    ++v1;
    marScriptableModelUnion = v4;
    if ( ++v2 >= count )
      return 1i64;
  }
  v9 = marXModelPtr;
  marXModelPtr = (XModel **)i;
  v8 = Mark_XModelPtr();
  marXModelPtr = v9;
LABEL_7:
  if ( v8 )
    goto LABEL_8;
  marScriptableModelUnion = v4;
  return 0i64;
}

/*
==============
Mark_ScriptableEventMoveDef
==============
*/
__int64 Mark_ScriptableEventMoveDef()
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventMoveDefArray
==============
*/
__int64 Mark_ScriptableEventMoveDefArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventNoteTrackDef
==============
*/
__int64 Mark_ScriptableEventNoteTrackDef()
{
  ScriptableNoteTrackDef *noteTracks; 
  ScriptableNoteTrackDef *v1; 
  __int64 v2; 
  unsigned __int64 noteTrackCount; 
  scr_string_t *v4; 
  int v5; 
  ScriptableEventDef *v6; 
  int v7; 

  noteTracks = marScriptableEventNoteTrackDef->noteTracks;
  if ( !noteTracks )
    return 1i64;
  v1 = marScriptableNoteTrackDef;
  v2 = 0i64;
  marScriptableNoteTrackDef = marScriptableEventNoteTrackDef->noteTracks;
  noteTrackCount = marScriptableEventNoteTrackDef->noteTrackCount;
  if ( !marScriptableEventNoteTrackDef->noteTrackCount )
  {
LABEL_7:
    marScriptableNoteTrackDef = v1;
    return 1i64;
  }
  while ( 1 )
  {
    v4 = marscr_string_t;
    marscr_string_t = &noteTracks->scrNoteTrackName;
    marScriptableNoteTrackDef = noteTracks;
    v5 = Mark_scr_string_t();
    marscr_string_t = v4;
    if ( !v5 )
      break;
    if ( marScriptableNoteTrackDef->events )
    {
      v6 = marScriptableEventDef;
      marScriptableEventDef = marScriptableNoteTrackDef->events;
      v7 = Mark_ScriptableEventDefArray(marScriptableNoteTrackDef->numEvents);
      marScriptableEventDef = v6;
      if ( !v7 )
        break;
    }
    ++noteTracks;
    if ( ++v2 >= noteTrackCount )
      goto LABEL_7;
  }
  marScriptableNoteTrackDef = v1;
  return 0i64;
}

/*
==============
Mark_ScriptableEventNoteTrackDefArray
==============
*/
__int64 Mark_ScriptableEventNoteTrackDefArray(const unsigned __int64 count)
{
  ScriptableEventNoteTrackDef *v1; 
  __int64 v2; 
  ScriptableNoteTrackDef *v4; 
  ScriptableNoteTrackDef *noteTracks; 
  __int64 v6; 
  unsigned __int64 noteTrackCount; 
  scr_string_t *v8; 
  int v9; 
  ScriptableEventDef *v10; 
  int v11; 

  v1 = marScriptableEventNoteTrackDef;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marScriptableNoteTrackDef;
  while ( 1 )
  {
    marScriptableEventNoteTrackDef = v1;
    noteTracks = v1->noteTracks;
    if ( noteTracks )
      break;
LABEL_10:
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  marScriptableNoteTrackDef = v1->noteTracks;
  v6 = 0i64;
  noteTrackCount = v1->noteTrackCount;
  if ( !v1->noteTrackCount )
  {
LABEL_9:
    marScriptableNoteTrackDef = v4;
    goto LABEL_10;
  }
  while ( 1 )
  {
    v8 = marscr_string_t;
    marscr_string_t = &noteTracks->scrNoteTrackName;
    marScriptableNoteTrackDef = noteTracks;
    v9 = Mark_scr_string_t();
    marscr_string_t = v8;
    if ( !v9 )
      break;
    if ( marScriptableNoteTrackDef->events )
    {
      v10 = marScriptableEventDef;
      marScriptableEventDef = marScriptableNoteTrackDef->events;
      v11 = Mark_ScriptableEventDefArray(marScriptableNoteTrackDef->numEvents);
      marScriptableEventDef = v10;
      if ( !v11 )
        break;
    }
    ++noteTracks;
    if ( ++v6 >= noteTrackCount )
      goto LABEL_9;
  }
  marScriptableNoteTrackDef = v4;
  return 0i64;
}

/*
==============
Mark_ScriptableEventObjectiveDef
==============
*/
_BOOL8 Mark_ScriptableEventObjectiveDef()
{
  GfxImage **v0; 
  int v1; 

  v0 = marGfxImagePtr;
  marGfxImagePtr = &marScriptableEventObjectiveDef->iconImage;
  v1 = Mark_GfxImagePtr();
  marGfxImagePtr = v0;
  return v1 != 0;
}

/*
==============
Mark_ScriptableEventObjectiveDefArray
==============
*/
__int64 Mark_ScriptableEventObjectiveDefArray(const unsigned __int64 count)
{
  ScriptableEventObjectiveDef *v1; 
  __int64 v2; 
  GfxImage **v4; 
  int v5; 

  v1 = marScriptableEventObjectiveDef;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marGfxImagePtr;
  while ( 1 )
  {
    marScriptableEventObjectiveDef = v1;
    marGfxImagePtr = &v1->iconImage;
    v5 = Mark_GfxImagePtr();
    marGfxImagePtr = v4;
    if ( !v5 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ScriptableEventPFXDef
==============
*/
_BOOL8 Mark_ScriptableEventPFXDef()
{
  ScriptableEventPFXDef *v0; 
  scr_string_t *v1; 
  int v2; 
  int v3; 
  FxCombinedDef *v4; 
  int v5; 

  v0 = marScriptableEventPFXDef;
  v1 = marscr_string_t;
  if ( marScriptableEventPFXDef->scrTagNames )
  {
    marscr_string_t = marScriptableEventPFXDef->scrTagNames;
    v2 = Mark_scr_string_tArray(marScriptableEventPFXDef->scrTagCount);
    marscr_string_t = v1;
    if ( !v2 )
      return 0i64;
    v0 = marScriptableEventPFXDef;
  }
  if ( !v0->scrEndTagNames )
    goto LABEL_7;
  marscr_string_t = v0->scrEndTagNames;
  v3 = Mark_scr_string_tArray(v0->scrEndTagCount);
  marscr_string_t = v1;
  if ( !v3 )
    return 0i64;
  v0 = marScriptableEventPFXDef;
LABEL_7:
  v4 = marFxCombinedDef;
  marFxCombinedDef = &v0->effectDef;
  v5 = Mark_FxCombinedDef();
  marFxCombinedDef = v4;
  return v5 != 0;
}

/*
==============
Mark_ScriptableEventPFXDefArray
==============
*/
__int64 Mark_ScriptableEventPFXDefArray(const unsigned __int64 count)
{
  ScriptableEventPFXDef *v1; 
  __int64 v2; 
  scr_string_t *v4; 
  ScriptableEventPFXDef *v5; 
  int v6; 
  int v7; 
  FxCombinedDef *v8; 
  int v9; 

  v1 = marScriptableEventPFXDef;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  while ( 1 )
  {
    v4 = marscr_string_t;
    v5 = v1;
    marScriptableEventPFXDef = v1;
    if ( v1->scrTagNames )
    {
      marscr_string_t = v1->scrTagNames;
      v6 = Mark_scr_string_tArray(v1->scrTagCount);
      marscr_string_t = v4;
      if ( !v6 )
        return 0i64;
      v5 = marScriptableEventPFXDef;
    }
    if ( v5->scrEndTagNames )
    {
      marscr_string_t = v5->scrEndTagNames;
      v7 = Mark_scr_string_tArray(v5->scrEndTagCount);
      marscr_string_t = v4;
      if ( !v7 )
        return 0i64;
      v5 = marScriptableEventPFXDef;
    }
    v8 = marFxCombinedDef;
    marFxCombinedDef = &v5->effectDef;
    v9 = Mark_FxCombinedDef();
    marFxCombinedDef = v8;
    if ( !v9 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ScriptableEventPartDamageDef
==============
*/
__int64 Mark_ScriptableEventPartDamageDef()
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventPartDamageDefArray
==============
*/
__int64 Mark_ScriptableEventPartDamageDefArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventPlayMayhemDef
==============
*/
__int64 Mark_ScriptableEventPlayMayhemDef()
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventPlayMayhemDefArray
==============
*/
__int64 Mark_ScriptableEventPlayMayhemDefArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventRandomDef
==============
*/
__int64 Mark_ScriptableEventRandomDef()
{
  ScriptableEventRandomDef *v0; 
  ScriptableEventDef *v1; 
  int v2; 
  int v3; 

  v0 = marScriptableEventRandomDef;
  v1 = marScriptableEventDef;
  if ( marScriptableEventRandomDef->eventsA )
  {
    marScriptableEventDef = marScriptableEventRandomDef->eventsA;
    v2 = Mark_ScriptableEventDefArray(marScriptableEventRandomDef->eventACount);
    marScriptableEventDef = v1;
    if ( !v2 )
      return 0i64;
    v0 = marScriptableEventRandomDef;
  }
  if ( v0->eventsB )
  {
    marScriptableEventDef = v0->eventsB;
    v3 = Mark_ScriptableEventDefArray(v0->eventBCount);
    marScriptableEventDef = v1;
    if ( !v3 )
      return 0i64;
  }
  return 1i64;
}

/*
==============
Mark_ScriptableEventRandomDefArray
==============
*/
__int64 Mark_ScriptableEventRandomDefArray(const unsigned __int64 count)
{
  ScriptableEventRandomDef *v1; 
  __int64 v2; 
  ScriptableEventDef *v4; 
  ScriptableEventRandomDef *v5; 
  int v6; 
  int v7; 

  v1 = marScriptableEventRandomDef;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marScriptableEventDef;
  while ( 1 )
  {
    marScriptableEventRandomDef = v1;
    v5 = v1;
    if ( v1->eventsA )
    {
      marScriptableEventDef = v1->eventsA;
      v6 = Mark_ScriptableEventDefArray(v1->eventACount);
      marScriptableEventDef = v4;
      if ( !v6 )
        return 0i64;
      v5 = marScriptableEventRandomDef;
    }
    if ( v5->eventsB )
    {
      marScriptableEventDef = v5->eventsB;
      v7 = Mark_ScriptableEventDefArray(v5->eventBCount);
      marScriptableEventDef = v4;
      if ( !v7 )
        break;
    }
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ScriptableEventRumbleDef
==============
*/
_BOOL8 Mark_ScriptableEventRumbleDef()
{
  scr_string_t *v0; 
  int v1; 
  RumbleInfo **v2; 
  int v3; 
  _BOOL8 result; 

  v0 = marscr_string_t;
  marscr_string_t = &marScriptableEventRumbleDef->scrTagName;
  v1 = Mark_scr_string_t();
  marscr_string_t = v0;
  result = 0;
  if ( v1 )
  {
    v2 = marRumbleInfoPtr;
    marRumbleInfoPtr = &marScriptableEventRumbleDef->rumbleAsset;
    v3 = Mark_RumbleInfoPtr();
    marRumbleInfoPtr = v2;
    if ( v3 )
      return 1;
  }
  return result;
}

/*
==============
Mark_ScriptableEventRumbleDefArray
==============
*/
__int64 Mark_ScriptableEventRumbleDefArray(const unsigned __int64 count)
{
  ScriptableEventRumbleDef *v1; 
  __int64 v2; 
  scr_string_t *v4; 
  int v5; 
  RumbleInfo **v6; 
  int v7; 

  v1 = marScriptableEventRumbleDef;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  while ( 1 )
  {
    v4 = marscr_string_t;
    marscr_string_t = &v1->scrTagName;
    marScriptableEventRumbleDef = v1;
    v5 = Mark_scr_string_t();
    marscr_string_t = v4;
    if ( !v5 )
      break;
    v6 = marRumbleInfoPtr;
    marRumbleInfoPtr = &marScriptableEventRumbleDef->rumbleAsset;
    v7 = Mark_RumbleInfoPtr();
    marRumbleInfoPtr = v6;
    if ( !v7 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ScriptableEventScreenshakeDef
==============
*/
_BOOL8 Mark_ScriptableEventScreenshakeDef()
{
  scr_string_t *v0; 
  int v1; 

  v0 = marscr_string_t;
  marscr_string_t = &marScriptableEventScreenshakeDef->scrTagName;
  v1 = Mark_scr_string_t();
  marscr_string_t = v0;
  return v1 != 0;
}

/*
==============
Mark_ScriptableEventScreenshakeDefArray
==============
*/
__int64 Mark_ScriptableEventScreenshakeDefArray(const unsigned __int64 count)
{
  ScriptableEventScreenshakeDef *v1; 
  __int64 v2; 
  scr_string_t *v4; 
  int v5; 

  v1 = marScriptableEventScreenshakeDef;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marscr_string_t;
  while ( 1 )
  {
    marScriptableEventScreenshakeDef = v1;
    marscr_string_t = &v1->scrTagName;
    v5 = Mark_scr_string_t();
    marscr_string_t = v4;
    if ( !v5 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ScriptableEventScriptDamageDef
==============
*/
_BOOL8 Mark_ScriptableEventScriptDamageDef()
{
  scr_string_t *v0; 
  int v1; 

  v0 = marscr_string_t;
  marscr_string_t = &marScriptableEventScriptDamageDef->scrNotification;
  v1 = Mark_scr_string_t();
  marscr_string_t = v0;
  return v1 != 0;
}

/*
==============
Mark_ScriptableEventScriptDamageDefArray
==============
*/
__int64 Mark_ScriptableEventScriptDamageDefArray(const unsigned __int64 count)
{
  ScriptableEventScriptDamageDef *v1; 
  __int64 v2; 
  scr_string_t *v4; 
  int v5; 

  v1 = marScriptableEventScriptDamageDef;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marscr_string_t;
  while ( 1 )
  {
    marScriptableEventScriptDamageDef = v1;
    marscr_string_t = &v1->scrNotification;
    v5 = Mark_scr_string_t();
    marscr_string_t = v4;
    if ( !v5 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ScriptableEventScriptDef
==============
*/
_BOOL8 Mark_ScriptableEventScriptDef()
{
  scr_string_t *v0; 
  int v1; 

  v0 = marscr_string_t;
  marscr_string_t = &marScriptableEventScriptDef->scrNotification;
  v1 = Mark_scr_string_t();
  marscr_string_t = v0;
  return v1 != 0;
}

/*
==============
Mark_ScriptableEventScriptDefArray
==============
*/
__int64 Mark_ScriptableEventScriptDefArray(const unsigned __int64 count)
{
  ScriptableEventScriptDef *v1; 
  __int64 v2; 
  scr_string_t *v4; 
  int v5; 

  v1 = marScriptableEventScriptDef;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marscr_string_t;
  while ( 1 )
  {
    marScriptableEventScriptDef = v1;
    marscr_string_t = &v1->scrNotification;
    v5 = Mark_scr_string_t();
    marscr_string_t = v4;
    if ( !v5 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ScriptableEventSetMayhemDef
==============
*/
_BOOL8 Mark_ScriptableEventSetMayhemDef()
{
  MayhemData **v0; 
  int v1; 

  v0 = marMayhemDataPtr;
  marMayhemDataPtr = &marScriptableEventSetMayhemDef->mayhem;
  v1 = Mark_MayhemDataPtr();
  marMayhemDataPtr = v0;
  return v1 != 0;
}

/*
==============
Mark_ScriptableEventSetMayhemDefArray
==============
*/
__int64 Mark_ScriptableEventSetMayhemDefArray(const unsigned __int64 count)
{
  ScriptableEventSetMayhemDef *v1; 
  __int64 v2; 
  MayhemData **v4; 
  int v5; 

  v1 = marScriptableEventSetMayhemDef;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marMayhemDataPtr;
  while ( 1 )
  {
    marScriptableEventSetMayhemDef = v1;
    marMayhemDataPtr = &v1->mayhem;
    v5 = Mark_MayhemDataPtr();
    marMayhemDataPtr = v4;
    if ( !v5 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ScriptableEventSoundDef
==============
*/
_BOOL8 Mark_ScriptableEventSoundDef()
{
  scr_string_t *v0; 
  int v1; 

  v0 = marscr_string_t;
  marscr_string_t = &marScriptableEventSoundDef->scrTagName;
  v1 = Mark_scr_string_t();
  marscr_string_t = v0;
  return v1 != 0;
}

/*
==============
Mark_ScriptableEventSoundDefArray
==============
*/
__int64 Mark_ScriptableEventSoundDefArray(const unsigned __int64 count)
{
  ScriptableEventSoundDef *v1; 
  __int64 v2; 
  scr_string_t *v4; 
  int v5; 

  v1 = marScriptableEventSoundDef;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marscr_string_t;
  while ( 1 )
  {
    marScriptableEventSoundDef = v1;
    marscr_string_t = &v1->scrTagName;
    v5 = Mark_scr_string_t();
    marscr_string_t = v4;
    if ( !v5 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ScriptableEventSpatialDisableDef
==============
*/
__int64 Mark_ScriptableEventSpatialDisableDef()
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventSpatialDisableDefArray
==============
*/
__int64 Mark_ScriptableEventSpatialDisableDefArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventSpawnDynentDef
==============
*/
_BOOL8 Mark_ScriptableEventSpawnDynentDef()
{
  XModel **v0; 
  int v1; 
  scr_string_t *v2; 
  int v3; 
  FxCombinedDef *v4; 
  int v5; 

  v0 = marXModelPtr;
  marXModelPtr = &marScriptableEventSpawnDynentDef->model;
  v1 = Mark_XModelPtr();
  marXModelPtr = v0;
  if ( !v1 )
    return 0i64;
  v2 = marscr_string_t;
  marscr_string_t = &marScriptableEventSpawnDynentDef->scrTagName;
  v3 = Mark_scr_string_t();
  marscr_string_t = v2;
  if ( !v3 )
    return 0i64;
  v4 = marFxCombinedDef;
  marFxCombinedDef = &marScriptableEventSpawnDynentDef->effectDef;
  v5 = Mark_FxCombinedDef();
  marFxCombinedDef = v4;
  return v5 != 0;
}

/*
==============
Mark_ScriptableEventSpawnDynentDefArray
==============
*/
__int64 Mark_ScriptableEventSpawnDynentDefArray(const unsigned __int64 count)
{
  ScriptableEventSpawnDynentDef *v1; 
  __int64 v2; 
  XModel **v4; 
  int v5; 
  scr_string_t *v6; 
  int v7; 
  FxCombinedDef *v8; 
  int v9; 

  v1 = marScriptableEventSpawnDynentDef;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  while ( 1 )
  {
    v4 = marXModelPtr;
    marXModelPtr = &v1->model;
    marScriptableEventSpawnDynentDef = v1;
    v5 = Mark_XModelPtr();
    marXModelPtr = v4;
    if ( !v5 )
      break;
    v6 = marscr_string_t;
    marscr_string_t = &marScriptableEventSpawnDynentDef->scrTagName;
    v7 = Mark_scr_string_t();
    marscr_string_t = v6;
    if ( !v7 )
      break;
    v8 = marFxCombinedDef;
    marFxCombinedDef = &marScriptableEventSpawnDynentDef->effectDef;
    v9 = Mark_FxCombinedDef();
    marFxCombinedDef = v8;
    if ( !v9 )
      break;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ScriptableEventStateChangeDef
==============
*/
__int64 Mark_ScriptableEventStateChangeDef()
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventStateChangeDefArray
==============
*/
__int64 Mark_ScriptableEventStateChangeDefArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventSunDef
==============
*/
__int64 Mark_ScriptableEventSunDef()
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventSunDefArray
==============
*/
__int64 Mark_ScriptableEventSunDefArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventTeamSelectorDef
==============
*/
__int64 Mark_ScriptableEventTeamSelectorDef()
{
  ScriptableEventTeamSelectorDef *v0; 
  ScriptableEventDef *v1; 
  int v2; 
  int v3; 

  v0 = marScriptableEventTeamSelectorDef;
  v1 = marScriptableEventDef;
  if ( marScriptableEventTeamSelectorDef->eventsPass )
  {
    marScriptableEventDef = marScriptableEventTeamSelectorDef->eventsPass;
    v2 = Mark_ScriptableEventDefArray(marScriptableEventTeamSelectorDef->eventPassCount);
    marScriptableEventDef = v1;
    if ( !v2 )
      return 0i64;
    v0 = marScriptableEventTeamSelectorDef;
  }
  if ( v0->eventsFail )
  {
    marScriptableEventDef = v0->eventsFail;
    v3 = Mark_ScriptableEventDefArray(v0->eventFailCount);
    marScriptableEventDef = v1;
    if ( !v3 )
      return 0i64;
  }
  return 1i64;
}

/*
==============
Mark_ScriptableEventTeamSelectorDefArray
==============
*/
__int64 Mark_ScriptableEventTeamSelectorDefArray(const unsigned __int64 count)
{
  ScriptableEventTeamSelectorDef *v1; 
  __int64 v2; 
  ScriptableEventDef *v4; 
  ScriptableEventTeamSelectorDef *v5; 
  int v6; 
  int v7; 

  v1 = marScriptableEventTeamSelectorDef;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marScriptableEventDef;
  while ( 1 )
  {
    marScriptableEventTeamSelectorDef = v1;
    v5 = v1;
    if ( v1->eventsPass )
    {
      marScriptableEventDef = v1->eventsPass;
      v6 = Mark_ScriptableEventDefArray(v1->eventPassCount);
      marScriptableEventDef = v4;
      if ( !v6 )
        return 0i64;
      v5 = marScriptableEventTeamSelectorDef;
    }
    if ( v5->eventsFail )
    {
      marScriptableEventDef = v5->eventsFail;
      v7 = Mark_ScriptableEventDefArray(v5->eventFailCount);
      marScriptableEventDef = v4;
      if ( !v7 )
        break;
    }
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ScriptableEventVehicleBlowUpTireDef
==============
*/
__int64 Mark_ScriptableEventVehicleBlowUpTireDef()
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventVehicleBlowUpTireDefArray
==============
*/
__int64 Mark_ScriptableEventVehicleBlowUpTireDefArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventViewTriggerDef
==============
*/
__int64 Mark_ScriptableEventViewTriggerDef()
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventViewTriggerDefArray
==============
*/
__int64 Mark_ScriptableEventViewTriggerDefArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventViewmodelChangeImageDef
==============
*/
__int64 Mark_ScriptableEventViewmodelChangeImageDef()
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventViewmodelChangeImageDefArray
==============
*/
__int64 Mark_ScriptableEventViewmodelChangeImageDefArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventViewmodelShaderParamDef
==============
*/
__int64 Mark_ScriptableEventViewmodelShaderParamDef()
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventViewmodelShaderParamDefArray
==============
*/
__int64 Mark_ScriptableEventViewmodelShaderParamDefArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventWaitDef
==============
*/
__int64 Mark_ScriptableEventWaitDef()
{
  return 1i64;
}

/*
==============
Mark_ScriptableEventWaitDefArray
==============
*/
__int64 Mark_ScriptableEventWaitDefArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ScriptableInstance
==============
*/
__int64 Mark_ScriptableInstance()
{
  ScriptableDef **v0; 
  int v1; 
  scr_string_t *v2; 
  int v3; 

  v0 = marScriptableDefPtr;
  marScriptableDefPtr = (ScriptableDef **)marScriptableInstance;
  v1 = Mark_ScriptableDefPtr();
  marScriptableDefPtr = v0;
  if ( v1 )
  {
    v2 = marscr_string_t;
    marscr_string_t = &marScriptableInstance->classname;
    if ( Mark_scr_string_t() && (marscr_string_t = &marScriptableInstance->target, Mark_scr_string_t()) && (marscr_string_t = &marScriptableInstance->targetname, Mark_scr_string_t()) && (marscr_string_t = &marScriptableInstance->script_linkname, Mark_scr_string_t()) && (marscr_string_t = &marScriptableInstance->script_linkto, Mark_scr_string_t()) )
    {
      marscr_string_t = &marScriptableInstance->script_noteworthy;
      v3 = Mark_scr_string_t();
      marscr_string_t = v2;
      if ( v3 )
        return 1i64;
    }
    else
    {
      marscr_string_t = v2;
    }
  }
  return 0i64;
}

/*
==============
Mark_ScriptableInstanceArray
==============
*/
__int64 Mark_ScriptableInstanceArray(const unsigned __int64 count)
{
  ScriptableInstance *v1; 
  __int64 v2; 
  ScriptableDef **v4; 
  ScriptableDef *initialDef; 
  ScriptableDef *v6; 
  int v7; 
  scr_string_t *v8; 
  int v9; 

  v1 = marScriptableInstance;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  while ( 1 )
  {
    v4 = marScriptableDefPtr;
    marScriptableDefPtr = (ScriptableDef **)v1;
    marScriptableInstance = v1;
    initialDef = (ScriptableDef *)v1->initialDef;
    if ( v1->initialDef )
    {
      v6 = marScriptableDef;
      marScriptableDef = (ScriptableDef *)v1->initialDef;
      if ( Mark_ScriptableDefAsset(initialDef, 0) )
      {
        marScriptableDef = v6;
      }
      else
      {
        if ( !Mark_ScriptableDef() )
        {
          marScriptableDef = v6;
LABEL_16:
          marScriptableDefPtr = v4;
          return 0i64;
        }
        v7 = Mark_ScriptableDefAsset(marScriptableDef, 1);
        marScriptableDef = v6;
        if ( !v7 )
          goto LABEL_16;
      }
    }
    v8 = marscr_string_t;
    marscr_string_t = &marScriptableInstance->classname;
    marScriptableDefPtr = v4;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marScriptableInstance->target;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marScriptableInstance->targetname;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marScriptableInstance->script_linkname;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marScriptableInstance->script_linkto;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marScriptableInstance->script_noteworthy;
    v9 = Mark_scr_string_t();
    marscr_string_t = v8;
    if ( !v9 )
      return 0i64;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  marscr_string_t = v8;
  return 0i64;
}

/*
==============
Mark_ScriptableMapEnts
==============
*/
__int64 Mark_ScriptableMapEnts()
{
  ScriptableInstance *mapInstances; 
  ScriptableInstance *v1; 
  __int64 v2; 
  unsigned __int64 mapInstanceCount; 
  ScriptableDef **v4; 
  ScriptableDef *initialDef; 
  ScriptableDef *v6; 
  int v7; 
  scr_string_t *v8; 
  int v9; 
  __int64 result; 

  mapInstances = marScriptableMapEnts->mapInstances;
  if ( !mapInstances )
    return 1i64;
  v1 = marScriptableInstance;
  v2 = 0i64;
  marScriptableInstance = marScriptableMapEnts->mapInstances;
  mapInstanceCount = marScriptableMapEnts->mapInstanceCount;
  if ( !marScriptableMapEnts->mapInstanceCount )
  {
LABEL_15:
    marScriptableInstance = v1;
    return 1i64;
  }
  while ( 1 )
  {
    v4 = marScriptableDefPtr;
    marScriptableDefPtr = (ScriptableDef **)mapInstances;
    marScriptableInstance = mapInstances;
    initialDef = (ScriptableDef *)mapInstances->initialDef;
    if ( mapInstances->initialDef )
    {
      v6 = marScriptableDef;
      marScriptableDef = (ScriptableDef *)mapInstances->initialDef;
      if ( Mark_ScriptableDefAsset(initialDef, 0) )
      {
        marScriptableDef = v6;
      }
      else
      {
        if ( !Mark_ScriptableDef() )
        {
          marScriptableDef = v6;
LABEL_18:
          marScriptableDefPtr = v4;
          result = 0i64;
          marScriptableInstance = v1;
          return result;
        }
        v7 = Mark_ScriptableDefAsset(marScriptableDef, 1);
        marScriptableDef = v6;
        if ( !v7 )
          goto LABEL_18;
      }
    }
    v8 = marscr_string_t;
    marscr_string_t = &marScriptableInstance->classname;
    marScriptableDefPtr = v4;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marScriptableInstance->target;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marScriptableInstance->targetname;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marScriptableInstance->script_linkname;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marScriptableInstance->script_linkto;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marScriptableInstance->script_noteworthy;
    v9 = Mark_scr_string_t();
    marscr_string_t = v8;
    if ( !v9 )
      goto LABEL_20;
    ++mapInstances;
    if ( ++v2 >= mapInstanceCount )
      goto LABEL_15;
  }
  marscr_string_t = v8;
LABEL_20:
  marScriptableInstance = v1;
  return 0i64;
}

/*
==============
Mark_ScriptableMapEntsArray
==============
*/
__int64 Mark_ScriptableMapEntsArray(const unsigned __int64 count)
{
  ScriptableMapEnts *v1; 
  __int64 v2; 
  unsigned __int64 v3; 
  ScriptableInstance *v4; 
  ScriptableInstance *mapInstances; 
  __int64 v6; 
  unsigned __int64 mapInstanceCount; 
  ScriptableDef **v8; 
  ScriptableDef *initialDef; 
  ScriptableDef *v10; 
  int v11; 
  scr_string_t *v12; 
  int v13; 
  __int64 result; 

  v1 = marScriptableMapEnts;
  v2 = 0i64;
  v3 = count;
  if ( !count )
    return 1i64;
  v4 = marScriptableInstance;
  while ( 1 )
  {
    marScriptableMapEnts = v1;
    mapInstances = v1->mapInstances;
    if ( mapInstances )
      break;
LABEL_19:
    ++v1;
    if ( ++v2 >= v3 )
      return 1i64;
  }
  marScriptableInstance = v1->mapInstances;
  v6 = 0i64;
  mapInstanceCount = v1->mapInstanceCount;
  if ( !v1->mapInstanceCount )
  {
LABEL_18:
    marScriptableInstance = v4;
    goto LABEL_19;
  }
  while ( 1 )
  {
    v8 = marScriptableDefPtr;
    marScriptableDefPtr = (ScriptableDef **)mapInstances;
    marScriptableInstance = mapInstances;
    initialDef = (ScriptableDef *)mapInstances->initialDef;
    if ( mapInstances->initialDef )
    {
      v10 = marScriptableDef;
      marScriptableDef = (ScriptableDef *)mapInstances->initialDef;
      if ( Mark_ScriptableDefAsset(initialDef, 0) )
      {
        marScriptableDef = v10;
      }
      else
      {
        if ( !Mark_ScriptableDef() )
        {
          marScriptableDef = v10;
LABEL_22:
          marScriptableDefPtr = v8;
          result = 0i64;
          marScriptableInstance = v4;
          return result;
        }
        v11 = Mark_ScriptableDefAsset(marScriptableDef, 1);
        marScriptableDef = v10;
        if ( !v11 )
          goto LABEL_22;
      }
    }
    v12 = marscr_string_t;
    marscr_string_t = &marScriptableInstance->classname;
    marScriptableDefPtr = v8;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marScriptableInstance->target;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marScriptableInstance->targetname;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marScriptableInstance->script_linkname;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marScriptableInstance->script_linkto;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marScriptableInstance->script_noteworthy;
    v13 = Mark_scr_string_t();
    marscr_string_t = v12;
    if ( !v13 )
      goto LABEL_24;
    ++mapInstances;
    if ( ++v6 >= mapInstanceCount )
    {
      v3 = count;
      goto LABEL_18;
    }
  }
  marscr_string_t = v12;
LABEL_24:
  marScriptableInstance = v4;
  return 0i64;
}

/*
==============
Mark_ScriptableModelUnion
==============
*/
int Mark_ScriptableModelUnion()
{
  ScriptableDataType dataType; 
  XCompositeModelDef **v1; 
  int result; 
  XModel **v3; 

  dataType = marScriptableEventModelDef->dataType;
  if ( dataType == SCRIPTABLE_DATA_TYPE_XCOMPOSITEMODEL )
  {
    v1 = marXCompositeModelDefPtr;
    marXCompositeModelDefPtr = &marScriptableModelUnion->compositeModel;
    result = Mark_XCompositeModelDefPtr();
    marXCompositeModelDefPtr = v1;
    goto LABEL_5;
  }
  if ( dataType == SCRIPTABLE_DATA_TYPE_XMODEL )
  {
    v3 = marXModelPtr;
    marXModelPtr = (XModel **)marScriptableModelUnion;
    result = Mark_XModelPtr();
    marXModelPtr = v3;
LABEL_5:
    if ( !result )
      return result;
  }
  return 1;
}

/*
==============
Mark_ScriptableModelUnionArray
==============
*/
__int64 Mark_ScriptableModelUnionArray(const unsigned __int64 count)
{
  ScriptableModelUnion *v1; 
  __int64 v2; 
  ScriptableDataType dataType; 
  XCompositeModelDef **v5; 
  int v6; 
  XModel **v7; 

  v1 = marScriptableModelUnion;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  while ( 1 )
  {
    marScriptableModelUnion = v1;
    dataType = marScriptableEventModelDef->dataType;
    if ( dataType == SCRIPTABLE_DATA_TYPE_XCOMPOSITEMODEL )
    {
      v5 = marXCompositeModelDefPtr;
      marXCompositeModelDefPtr = &v1->compositeModel;
      v6 = Mark_XCompositeModelDefPtr();
      marXCompositeModelDefPtr = v5;
      goto LABEL_6;
    }
    if ( dataType == SCRIPTABLE_DATA_TYPE_XMODEL )
      break;
LABEL_7:
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  v7 = marXModelPtr;
  marXModelPtr = (XModel **)v1;
  v6 = Mark_XModelPtr();
  marXModelPtr = v7;
LABEL_6:
  if ( v6 )
    goto LABEL_7;
  return 0i64;
}

/*
==============
Mark_ScriptableNoteTrackDef
==============
*/
_BOOL8 Mark_ScriptableNoteTrackDef()
{
  scr_string_t *v0; 
  int v1; 
  ScriptableEventDef *v2; 
  int v3; 
  _BOOL8 result; 

  v0 = marscr_string_t;
  marscr_string_t = &marScriptableNoteTrackDef->scrNoteTrackName;
  v1 = Mark_scr_string_t();
  marscr_string_t = v0;
  result = 0;
  if ( v1 )
  {
    if ( !marScriptableNoteTrackDef->events )
      return 1;
    v2 = marScriptableEventDef;
    marScriptableEventDef = marScriptableNoteTrackDef->events;
    v3 = Mark_ScriptableEventDefArray(marScriptableNoteTrackDef->numEvents);
    marScriptableEventDef = v2;
    if ( v3 )
      return 1;
  }
  return result;
}

/*
==============
Mark_ScriptableNoteTrackDefArray
==============
*/
__int64 Mark_ScriptableNoteTrackDefArray(const unsigned __int64 count)
{
  ScriptableNoteTrackDef *v1; 
  __int64 v2; 
  scr_string_t *v4; 
  int v5; 
  ScriptableEventDef *v6; 
  int v7; 

  v1 = marScriptableNoteTrackDef;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  while ( 1 )
  {
    v4 = marscr_string_t;
    marscr_string_t = &v1->scrNoteTrackName;
    marScriptableNoteTrackDef = v1;
    v5 = Mark_scr_string_t();
    marscr_string_t = v4;
    if ( !v5 )
      break;
    if ( marScriptableNoteTrackDef->events )
    {
      v6 = marScriptableEventDef;
      marScriptableEventDef = marScriptableNoteTrackDef->events;
      v7 = Mark_ScriptableEventDefArray(marScriptableNoteTrackDef->numEvents);
      marScriptableEventDef = v6;
      if ( !v7 )
        break;
    }
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ScriptablePartDef
==============
*/
int Mark_ScriptablePartDef()
{
  scr_string_t *v0; 
  int result; 
  int v2; 
  ScriptablePartDef *v3; 
  __int64 v4; 
  ScriptableStateDef *states; 
  ScriptableStateDef *v6; 
  __int64 v7; 
  unsigned __int64 numStates; 
  ScriptableStateBaseDef *v9; 
  ScriptableStateDef *v10; 
  ScriptableEventDef *v11; 
  int v12; 
  ScriptableStateDefUnion *v13; 
  int v14; 
  ScriptablePartDef *childParts; 
  __int64 v16; 
  unsigned __int64 numChildParts; 
  ScriptableDamageTagOverride *damageTagOverrides; 
  ScriptableDamageTagOverride *v19; 
  unsigned __int64 numDamageTagOverrides; 
  int v21; 

  v0 = marscr_string_t;
  marscr_string_t = &marScriptablePartDef->scrName;
  result = Mark_scr_string_t();
  if ( !result )
  {
    marscr_string_t = v0;
    return result;
  }
  marscr_string_t = &marScriptablePartDef->scrTagName;
  v2 = Mark_scr_string_t();
  marscr_string_t = v0;
  if ( !v2 )
    return 0;
  v3 = marScriptablePartDef;
  v4 = 0i64;
  states = marScriptablePartDef->states;
  if ( states )
  {
    v6 = marScriptableStateDef;
    v7 = 0i64;
    marScriptableStateDef = marScriptablePartDef->states;
    numStates = marScriptablePartDef->numStates;
    if ( marScriptablePartDef->numStates )
    {
      while ( 1 )
      {
        v9 = marScriptableStateBaseDef;
        v10 = states;
        marScriptableStateDef = states;
        marScriptableStateBaseDef = &states->base;
        if ( states->base.events )
        {
          v11 = marScriptableEventDef;
          marScriptableEventDef = states->base.events;
          v12 = Mark_ScriptableEventDefArray(states->base.numEvents);
          marScriptableEventDef = v11;
          if ( !v12 )
          {
            marScriptableStateBaseDef = v9;
LABEL_26:
            marScriptableStateDef = v6;
            return 0;
          }
          v10 = marScriptableStateDef;
        }
        v13 = marScriptableStateDefUnion;
        marScriptableStateDefUnion = &v10->data;
        marScriptableStateBaseDef = v9;
        v14 = Mark_ScriptableStateDefUnion();
        marScriptableStateDefUnion = v13;
        if ( !v14 )
          goto LABEL_26;
        ++states;
        if ( ++v7 >= numStates )
        {
          v0 = marscr_string_t;
          v3 = marScriptablePartDef;
          break;
        }
      }
    }
    marScriptableStateDef = v6;
  }
  childParts = v3->childParts;
  if ( childParts )
  {
    marScriptablePartDef = v3->childParts;
    v16 = 0i64;
    numChildParts = v3->numChildParts;
    if ( v3->numChildParts )
    {
      while ( 1 )
      {
        marScriptablePartDef = childParts;
        if ( !Mark_ScriptablePartDef() )
          break;
        ++childParts;
        if ( ++v16 >= numChildParts )
        {
          v0 = marscr_string_t;
          goto LABEL_18;
        }
      }
      marScriptablePartDef = v3;
      return 0;
    }
LABEL_18:
    marScriptablePartDef = v3;
  }
  damageTagOverrides = v3->damageTagOverrides;
  if ( damageTagOverrides )
  {
    v19 = marScriptableDamageTagOverride;
    marScriptableDamageTagOverride = v3->damageTagOverrides;
    numDamageTagOverrides = v3->numDamageTagOverrides;
    if ( v3->numDamageTagOverrides )
    {
      while ( 1 )
      {
        marScriptableDamageTagOverride = damageTagOverrides;
        marscr_string_t = &damageTagOverrides->scrTag;
        v21 = Mark_scr_string_t();
        marscr_string_t = v0;
        if ( !v21 )
          break;
        ++damageTagOverrides;
        if ( ++v4 >= numDamageTagOverrides )
          goto LABEL_23;
      }
      marScriptableDamageTagOverride = v19;
      return 0;
    }
LABEL_23:
    marScriptableDamageTagOverride = v19;
  }
  return 1;
}

/*
==============
Mark_ScriptablePartDefArray
==============
*/
__int64 Mark_ScriptablePartDefArray(unsigned __int64 count)
{
  ScriptablePartDef *v1; 
  __int64 v2; 
  unsigned __int64 v3; 
  scr_string_t *v4; 
  int v5; 
  ScriptablePartDef *v6; 
  ScriptableStateDef *states; 
  ScriptableStateDef *v8; 
  __int64 v9; 
  unsigned __int64 numStates; 
  ScriptableStateBaseDef *v11; 
  ScriptableStateDef *v12; 
  ScriptableEventDef *v13; 
  int v14; 
  ScriptableStateDefUnion *v15; 
  int v16; 
  int v17; 
  ScriptableDamageTagOverride *damageTagOverrides; 
  ScriptableDamageTagOverride *v19; 
  unsigned __int64 numDamageTagOverrides; 
  __int64 v21; 
  int v22; 

  v1 = marScriptablePartDef;
  v2 = 0i64;
  v3 = count;
  if ( !count )
    return 1i64;
  v4 = marscr_string_t;
  while ( 1 )
  {
    marScriptablePartDef = v1;
    marscr_string_t = &v1->scrName;
    if ( !Mark_scr_string_t() )
    {
      marscr_string_t = v4;
      return 0i64;
    }
    marscr_string_t = &marScriptablePartDef->scrTagName;
    v5 = Mark_scr_string_t();
    marscr_string_t = v4;
    if ( !v5 )
      return 0i64;
    v6 = marScriptablePartDef;
    states = marScriptablePartDef->states;
    if ( !states )
      goto LABEL_14;
    v8 = marScriptableStateDef;
    v9 = 0i64;
    marScriptableStateDef = marScriptablePartDef->states;
    numStates = marScriptablePartDef->numStates;
    if ( marScriptablePartDef->numStates )
      break;
LABEL_13:
    marScriptableStateDef = v8;
    v3 = count;
LABEL_14:
    if ( v6->childParts )
    {
      marScriptablePartDef = v6->childParts;
      v17 = Mark_ScriptablePartDefArray(v6->numChildParts);
      marScriptablePartDef = v6;
      if ( !v17 )
        return 0i64;
      v4 = marscr_string_t;
    }
    damageTagOverrides = v6->damageTagOverrides;
    if ( damageTagOverrides )
    {
      v19 = marScriptableDamageTagOverride;
      marScriptableDamageTagOverride = v6->damageTagOverrides;
      numDamageTagOverrides = v6->numDamageTagOverrides;
      v21 = 0i64;
      if ( numDamageTagOverrides )
      {
        while ( 1 )
        {
          marScriptableDamageTagOverride = damageTagOverrides;
          marscr_string_t = &damageTagOverrides->scrTag;
          v22 = Mark_scr_string_t();
          marscr_string_t = v4;
          if ( !v22 )
            break;
          ++damageTagOverrides;
          if ( ++v21 >= numDamageTagOverrides )
            goto LABEL_21;
        }
        marScriptableDamageTagOverride = v19;
        return 0i64;
      }
LABEL_21:
      marScriptableDamageTagOverride = v19;
    }
    ++v1;
    if ( ++v2 >= v3 )
      return 1i64;
  }
  while ( 1 )
  {
    v11 = marScriptableStateBaseDef;
    v12 = states;
    marScriptableStateBaseDef = &states->base;
    marScriptableStateDef = states;
    if ( !states->base.events )
      goto LABEL_10;
    v13 = marScriptableEventDef;
    marScriptableEventDef = states->base.events;
    v14 = Mark_ScriptableEventDefArray(states->base.numEvents);
    marScriptableEventDef = v13;
    if ( !v14 )
      break;
    v12 = marScriptableStateDef;
LABEL_10:
    v15 = marScriptableStateDefUnion;
    marScriptableStateDefUnion = &v12->data;
    marScriptableStateBaseDef = v11;
    v16 = Mark_ScriptableStateDefUnion();
    marScriptableStateDefUnion = v15;
    if ( !v16 )
      goto LABEL_25;
    ++states;
    if ( ++v9 >= numStates )
    {
      v6 = marScriptablePartDef;
      v4 = marscr_string_t;
      goto LABEL_13;
    }
  }
  marScriptableStateBaseDef = v11;
LABEL_25:
  marScriptableStateDef = v8;
  return 0i64;
}

/*
==============
Mark_ScriptablePartReference
==============
*/
__int64 Mark_ScriptablePartReference()
{
  return 1i64;
}

/*
==============
Mark_ScriptablePartReferenceArray
==============
*/
__int64 Mark_ScriptablePartReferenceArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ScriptablePhysicsLimits
==============
*/
__int64 Mark_ScriptablePhysicsLimits()
{
  return 1i64;
}

/*
==============
Mark_ScriptablePhysicsLimitsArray
==============
*/
__int64 Mark_ScriptablePhysicsLimitsArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ScriptableReservedDynent
==============
*/
__int64 Mark_ScriptableReservedDynent()
{
  return 1i64;
}

/*
==============
Mark_ScriptableReservedDynentArray
==============
*/
__int64 Mark_ScriptableReservedDynentArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ScriptableReservedDynents
==============
*/
__int64 Mark_ScriptableReservedDynents()
{
  return 1i64;
}

/*
==============
Mark_ScriptableReservedDynentsArray
==============
*/
__int64 Mark_ScriptableReservedDynentsArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_ScriptableStateBaseDef
==============
*/
int Mark_ScriptableStateBaseDef()
{
  ScriptableEventDef *v0; 
  int result; 

  if ( !marScriptableStateBaseDef->events )
    return 1;
  v0 = marScriptableEventDef;
  marScriptableEventDef = marScriptableStateBaseDef->events;
  result = Mark_ScriptableEventDefArray(marScriptableStateBaseDef->numEvents);
  marScriptableEventDef = v0;
  if ( result )
    return 1;
  return result;
}

/*
==============
Mark_ScriptableStateBaseDefArray
==============
*/
__int64 Mark_ScriptableStateBaseDefArray(const unsigned __int64 count)
{
  ScriptableStateBaseDef *v1; 
  __int64 v2; 
  ScriptableEventDef *v4; 
  int v5; 

  v1 = marScriptableStateBaseDef;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marScriptableEventDef;
  while ( 1 )
  {
    marScriptableStateBaseDef = v1;
    if ( v1->events )
    {
      marScriptableEventDef = v1->events;
      v5 = Mark_ScriptableEventDefArray(v1->numEvents);
      marScriptableEventDef = v4;
      if ( !v5 )
        break;
    }
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  return 0i64;
}

/*
==============
Mark_ScriptableStateDef
==============
*/
int Mark_ScriptableStateDef()
{
  ScriptableStateDef *v0; 
  ScriptableStateBaseDef *v1; 
  ScriptableEventDef *v2; 
  int result; 
  ScriptableStateDefUnion *v4; 
  int v5; 

  v0 = marScriptableStateDef;
  v1 = marScriptableStateBaseDef;
  marScriptableStateBaseDef = &marScriptableStateDef->base;
  if ( marScriptableStateDef->base.events )
  {
    v2 = marScriptableEventDef;
    marScriptableEventDef = marScriptableStateDef->base.events;
    result = Mark_ScriptableEventDefArray(marScriptableStateDef->base.numEvents);
    marScriptableEventDef = v2;
    if ( !result )
    {
      marScriptableStateBaseDef = v1;
      return result;
    }
    v0 = marScriptableStateDef;
  }
  v4 = marScriptableStateDefUnion;
  marScriptableStateDefUnion = &v0->data;
  marScriptableStateBaseDef = v1;
  v5 = Mark_ScriptableStateDefUnion();
  marScriptableStateDefUnion = v4;
  return v5 != 0;
}

/*
==============
Mark_ScriptableStateDefArray
==============
*/
__int64 Mark_ScriptableStateDefArray(const unsigned __int64 count)
{
  ScriptableStateDef *v1; 
  __int64 v2; 
  ScriptableStateBaseDef *v4; 
  ScriptableStateDef *v5; 
  ScriptableEventDef *v6; 
  int v7; 
  ScriptableStateDefUnion *v8; 
  int v9; 

  v1 = marScriptableStateDef;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  while ( 1 )
  {
    v4 = marScriptableStateBaseDef;
    v5 = v1;
    marScriptableStateBaseDef = &v1->base;
    marScriptableStateDef = v1;
    if ( !v1->base.events )
      goto LABEL_5;
    v6 = marScriptableEventDef;
    marScriptableEventDef = v1->base.events;
    v7 = Mark_ScriptableEventDefArray(v1->base.numEvents);
    marScriptableEventDef = v6;
    if ( !v7 )
      break;
    v5 = marScriptableStateDef;
LABEL_5:
    v8 = marScriptableStateDefUnion;
    marScriptableStateDefUnion = &v5->data;
    marScriptableStateBaseDef = v4;
    v9 = Mark_ScriptableStateDefUnion();
    marScriptableStateDefUnion = v8;
    if ( !v9 )
      return 0i64;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  marScriptableStateBaseDef = v4;
  return 0i64;
}

/*
==============
Mark_ScriptableStateDefUnion
==============
*/
int Mark_ScriptableStateDefUnion()
{
  Scriptable_StateType type; 
  ScriptableStateSimpleDef *v1; 
  int result; 
  ScriptableStateHealthDef *v3; 
  ScriptableStateScriptedDef *v4; 
  ScriptableStateUsableDef *v5; 

  type = marScriptableStateDef->type;
  switch ( type )
  {
    case Scriptable_StateType_Simple:
      v1 = marScriptableStateSimpleDef;
      marScriptableStateSimpleDef = &marScriptableStateDefUnion->simple;
      result = Mark_ScriptableStateSimpleDef();
      marScriptableStateSimpleDef = v1;
      goto LABEL_9;
    case Scriptable_StateType_Health:
      v3 = marScriptableStateHealthDef;
      marScriptableStateHealthDef = (ScriptableStateHealthDef *)marScriptableStateDefUnion;
      result = Mark_ScriptableStateHealthDef();
      marScriptableStateHealthDef = v3;
      goto LABEL_9;
    case Scriptable_StateType_Scripted:
      v4 = marScriptableStateScriptedDef;
      marScriptableStateScriptedDef = (ScriptableStateScriptedDef *)marScriptableStateDefUnion;
      result = Mark_ScriptableStateScriptedDef();
      marScriptableStateScriptedDef = v4;
      goto LABEL_9;
    case Scriptable_StateType_Usable:
      v5 = marScriptableStateUsableDef;
      marScriptableStateUsableDef = (ScriptableStateUsableDef *)marScriptableStateDefUnion;
      result = Mark_ScriptableStateUsableDef();
      marScriptableStateUsableDef = v5;
LABEL_9:
      if ( !result )
        return result;
      break;
  }
  return 1;
}

/*
==============
Mark_ScriptableStateDefUnionArray
==============
*/
__int64 Mark_ScriptableStateDefUnionArray(const unsigned __int64 count)
{
  ScriptableStateDefUnion *v1; 
  __int64 v2; 
  Scriptable_StateType type; 
  ScriptableStateSimpleDef *v5; 
  ScriptableStateBaseDef *base; 
  ScriptableStateBaseDef *v7; 
  ScriptableEventDef *v8; 
  int v9; 
  ScriptableStateHealthDef *v10; 
  int v11; 
  ScriptableStateScriptedDef *v12; 
  ScriptableStateUsableDef *v13; 

  v1 = marScriptableStateDefUnion;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  while ( 1 )
  {
    marScriptableStateDefUnion = v1;
    type = marScriptableStateDef->type;
    if ( type == Scriptable_StateType_Simple )
      break;
    switch ( type )
    {
      case Scriptable_StateType_Health:
        v10 = marScriptableStateHealthDef;
        marScriptableStateHealthDef = (ScriptableStateHealthDef *)v1;
        v11 = Mark_ScriptableStateHealthDef();
        marScriptableStateHealthDef = v10;
        break;
      case Scriptable_StateType_Scripted:
        v12 = marScriptableStateScriptedDef;
        marScriptableStateScriptedDef = (ScriptableStateScriptedDef *)v1;
        v11 = Mark_ScriptableStateScriptedDef();
        marScriptableStateScriptedDef = v12;
        break;
      case Scriptable_StateType_Usable:
        v13 = marScriptableStateUsableDef;
        marScriptableStateUsableDef = (ScriptableStateUsableDef *)v1;
        v11 = Mark_ScriptableStateUsableDef();
        marScriptableStateUsableDef = v13;
        break;
      default:
        goto LABEL_15;
    }
    if ( !v11 )
      return 0i64;
LABEL_15:
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  v5 = marScriptableStateSimpleDef;
  marScriptableStateSimpleDef = &v1->simple;
  base = v1->simple.base;
  if ( !v1->simple.base )
  {
LABEL_7:
    marScriptableStateSimpleDef = v5;
    goto LABEL_15;
  }
  v7 = marScriptableStateBaseDef;
  marScriptableStateBaseDef = v1->simple.base;
  if ( !base->events || (v8 = marScriptableEventDef, marScriptableEventDef = base->events, v9 = Mark_ScriptableEventDefArray(base->numEvents), marScriptableEventDef = v8, v9) )
  {
    marScriptableStateBaseDef = v7;
    goto LABEL_7;
  }
  marScriptableStateBaseDef = v7;
  marScriptableStateSimpleDef = v5;
  return 0i64;
}

/*
==============
Mark_ScriptableStateHealthDef
==============
*/
int Mark_ScriptableStateHealthDef()
{
  ScriptableStateHealthDef *v0; 
  ScriptableStateBaseDef *base; 
  ScriptableStateBaseDef *v2; 
  ScriptableEventDef *v3; 
  int result; 
  WeaponCompleteDef **v5; 
  int v6; 
  scr_string_t *v7; 
  int v8; 

  v0 = marScriptableStateHealthDef;
  base = marScriptableStateHealthDef->base;
  if ( marScriptableStateHealthDef->base )
  {
    v2 = marScriptableStateBaseDef;
    marScriptableStateBaseDef = marScriptableStateHealthDef->base;
    if ( base->events )
    {
      v3 = marScriptableEventDef;
      marScriptableEventDef = base->events;
      result = Mark_ScriptableEventDefArray(base->numEvents);
      marScriptableEventDef = v3;
      if ( !result )
      {
        marScriptableStateBaseDef = v2;
        return result;
      }
      v0 = marScriptableStateHealthDef;
    }
    marScriptableStateBaseDef = v2;
  }
  if ( v0->weapons )
  {
    v5 = marWeaponCompleteDefPtr;
    marWeaponCompleteDefPtr = v0->weapons;
    v6 = Mark_WeaponCompleteDefPtrArray(v0->numWeapons);
    marWeaponCompleteDefPtr = v5;
    if ( !v6 )
      return 0;
    v0 = marScriptableStateHealthDef;
  }
  v7 = marscr_string_t;
  marscr_string_t = &v0->scrScript_id;
  v8 = Mark_scr_string_t();
  marscr_string_t = v7;
  return v8 != 0;
}

/*
==============
Mark_ScriptableStateHealthDefArray
==============
*/
__int64 Mark_ScriptableStateHealthDefArray(const unsigned __int64 count)
{
  ScriptableStateHealthDef *v1; 
  __int64 v2; 
  ScriptableStateHealthDef *v4; 
  ScriptableStateBaseDef *base; 
  ScriptableStateBaseDef *v6; 
  ScriptableEventDef *v7; 
  int v8; 
  WeaponCompleteDef **v9; 
  int v10; 
  scr_string_t *v11; 
  int v12; 

  v1 = marScriptableStateHealthDef;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  while ( 1 )
  {
    v4 = v1;
    marScriptableStateHealthDef = v1;
    base = v1->base;
    if ( !v1->base )
      goto LABEL_7;
    v6 = marScriptableStateBaseDef;
    marScriptableStateBaseDef = v1->base;
    if ( base->events )
      break;
LABEL_6:
    marScriptableStateBaseDef = v6;
LABEL_7:
    if ( v4->weapons )
    {
      v9 = marWeaponCompleteDefPtr;
      marWeaponCompleteDefPtr = v4->weapons;
      v10 = Mark_WeaponCompleteDefPtrArray(v4->numWeapons);
      marWeaponCompleteDefPtr = v9;
      if ( !v10 )
        return 0i64;
      v4 = marScriptableStateHealthDef;
    }
    v11 = marscr_string_t;
    marscr_string_t = &v4->scrScript_id;
    v12 = Mark_scr_string_t();
    marscr_string_t = v11;
    if ( !v12 )
      return 0i64;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  v7 = marScriptableEventDef;
  marScriptableEventDef = base->events;
  v8 = Mark_ScriptableEventDefArray(base->numEvents);
  marScriptableEventDef = v7;
  if ( v8 )
  {
    v4 = marScriptableStateHealthDef;
    goto LABEL_6;
  }
  marScriptableStateBaseDef = v6;
  return 0i64;
}

/*
==============
Mark_ScriptableStateScriptedDef
==============
*/
int Mark_ScriptableStateScriptedDef()
{
  ScriptableStateScriptedDef *v0; 
  ScriptableStateBaseDef *base; 
  ScriptableStateBaseDef *v2; 
  ScriptableEventDef *v3; 
  int result; 
  scr_string_t *v5; 
  int v6; 

  v0 = marScriptableStateScriptedDef;
  base = marScriptableStateScriptedDef->base;
  if ( marScriptableStateScriptedDef->base )
  {
    v2 = marScriptableStateBaseDef;
    marScriptableStateBaseDef = marScriptableStateScriptedDef->base;
    if ( base->events )
    {
      v3 = marScriptableEventDef;
      marScriptableEventDef = base->events;
      result = Mark_ScriptableEventDefArray(base->numEvents);
      marScriptableEventDef = v3;
      if ( !result )
      {
        marScriptableStateBaseDef = v2;
        return result;
      }
      v0 = marScriptableStateScriptedDef;
    }
    marScriptableStateBaseDef = v2;
  }
  v5 = marscr_string_t;
  marscr_string_t = &v0->scrScript_id;
  v6 = Mark_scr_string_t();
  marscr_string_t = v5;
  return v6 != 0;
}

/*
==============
Mark_ScriptableStateScriptedDefArray
==============
*/
__int64 Mark_ScriptableStateScriptedDefArray(const unsigned __int64 count)
{
  ScriptableStateScriptedDef *v1; 
  __int64 v2; 
  ScriptableStateScriptedDef *v4; 
  ScriptableStateBaseDef *base; 
  ScriptableStateBaseDef *v6; 
  ScriptableEventDef *v7; 
  int v8; 
  scr_string_t *v9; 
  int v10; 

  v1 = marScriptableStateScriptedDef;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  while ( 1 )
  {
    marScriptableStateScriptedDef = v1;
    v4 = v1;
    base = v1->base;
    if ( !v1->base )
      goto LABEL_7;
    v6 = marScriptableStateBaseDef;
    marScriptableStateBaseDef = v1->base;
    if ( base->events )
      break;
LABEL_6:
    marScriptableStateBaseDef = v6;
LABEL_7:
    v9 = marscr_string_t;
    marscr_string_t = &v4->scrScript_id;
    v10 = Mark_scr_string_t();
    marscr_string_t = v9;
    if ( !v10 )
      return 0i64;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  v7 = marScriptableEventDef;
  marScriptableEventDef = base->events;
  v8 = Mark_ScriptableEventDefArray(base->numEvents);
  marScriptableEventDef = v7;
  if ( v8 )
  {
    v4 = marScriptableStateScriptedDef;
    goto LABEL_6;
  }
  marScriptableStateBaseDef = v6;
  return 0i64;
}

/*
==============
Mark_ScriptableStateSimpleDef
==============
*/
int Mark_ScriptableStateSimpleDef()
{
  ScriptableStateBaseDef *base; 
  ScriptableStateBaseDef *v1; 
  ScriptableEventDef *v2; 
  int result; 

  base = marScriptableStateSimpleDef->base;
  if ( marScriptableStateSimpleDef->base )
  {
    v1 = marScriptableStateBaseDef;
    marScriptableStateBaseDef = marScriptableStateSimpleDef->base;
    if ( base->events )
    {
      v2 = marScriptableEventDef;
      marScriptableEventDef = base->events;
      result = Mark_ScriptableEventDefArray(base->numEvents);
      marScriptableEventDef = v2;
      if ( !result )
      {
        marScriptableStateBaseDef = v1;
        return result;
      }
    }
    marScriptableStateBaseDef = v1;
  }
  return 1;
}

/*
==============
Mark_ScriptableStateSimpleDefArray
==============
*/
__int64 Mark_ScriptableStateSimpleDefArray(const unsigned __int64 count)
{
  ScriptableStateSimpleDef *v1; 
  __int64 v2; 
  ScriptableStateBaseDef *v4; 
  ScriptableEventDef *v5; 
  ScriptableStateSimpleDef v6; 
  int v7; 

  v1 = marScriptableStateSimpleDef;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  v4 = marScriptableStateBaseDef;
  v5 = marScriptableEventDef;
  while ( 1 )
  {
    marScriptableStateSimpleDef = v1;
    v6.base = v1->base;
    if ( v1->base )
      break;
LABEL_7:
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  marScriptableStateBaseDef = v1->base;
  if ( !v6.base->events || (marScriptableEventDef = v6.base->events, v7 = Mark_ScriptableEventDefArray(v6.base->numEvents), marScriptableEventDef = v5, v7) )
  {
    marScriptableStateBaseDef = v4;
    goto LABEL_7;
  }
  marScriptableStateBaseDef = v4;
  return 0i64;
}

/*
==============
Mark_ScriptableStateUsableDef
==============
*/
int Mark_ScriptableStateUsableDef()
{
  ScriptableStateUsableDef *v0; 
  ScriptableStateBaseDef *base; 
  ScriptableStateBaseDef *v2; 
  ScriptableEventDef *v3; 
  int v4; 
  int result; 
  scr_string_t *v6; 
  int v7; 
  GfxImage **v8; 
  int v9; 

  v0 = marScriptableStateUsableDef;
  base = marScriptableStateUsableDef->base;
  if ( marScriptableStateUsableDef->base )
  {
    v2 = marScriptableStateBaseDef;
    marScriptableStateBaseDef = marScriptableStateUsableDef->base;
    if ( base->events )
    {
      v3 = marScriptableEventDef;
      marScriptableEventDef = base->events;
      v4 = Mark_ScriptableEventDefArray(base->numEvents);
      marScriptableEventDef = v3;
      if ( !v4 )
      {
        marScriptableStateBaseDef = v2;
        return 0;
      }
      v0 = marScriptableStateUsableDef;
    }
    marScriptableStateBaseDef = v2;
  }
  v6 = marscr_string_t;
  marscr_string_t = &v0->scrScript_id;
  result = Mark_scr_string_t();
  if ( result )
  {
    marscr_string_t = &marScriptableStateUsableDef->hintTag;
    v7 = Mark_scr_string_t();
    marscr_string_t = v6;
    if ( !v7 )
      return 0;
    v8 = marGfxImagePtr;
    marGfxImagePtr = &marScriptableStateUsableDef->hintIconImage;
    v9 = Mark_GfxImagePtr();
    marGfxImagePtr = v8;
    return v9 != 0;
  }
  else
  {
    marscr_string_t = v6;
  }
  return result;
}

/*
==============
Mark_ScriptableStateUsableDefArray
==============
*/
__int64 Mark_ScriptableStateUsableDefArray(const unsigned __int64 count)
{
  ScriptableStateUsableDef *v1; 
  __int64 v2; 
  ScriptableStateUsableDef *v4; 
  ScriptableStateBaseDef *base; 
  ScriptableStateBaseDef *v6; 
  ScriptableEventDef *v7; 
  int v8; 
  scr_string_t *v9; 
  int v10; 
  GfxImage **v11; 
  int v12; 

  v1 = marScriptableStateUsableDef;
  v2 = 0i64;
  if ( !count )
    return 1i64;
  while ( 1 )
  {
    v4 = v1;
    marScriptableStateUsableDef = v1;
    base = v1->base;
    if ( v1->base )
    {
      v6 = marScriptableStateBaseDef;
      marScriptableStateBaseDef = v1->base;
      if ( base->events )
      {
        v7 = marScriptableEventDef;
        marScriptableEventDef = base->events;
        v8 = Mark_ScriptableEventDefArray(base->numEvents);
        marScriptableEventDef = v7;
        if ( !v8 )
        {
          marScriptableStateBaseDef = v6;
          return 0i64;
        }
        v4 = marScriptableStateUsableDef;
      }
      marScriptableStateBaseDef = v6;
    }
    v9 = marscr_string_t;
    marscr_string_t = &v4->scrScript_id;
    if ( !Mark_scr_string_t() )
      break;
    marscr_string_t = &marScriptableStateUsableDef->hintTag;
    v10 = Mark_scr_string_t();
    marscr_string_t = v9;
    if ( !v10 )
      return 0i64;
    v11 = marGfxImagePtr;
    marGfxImagePtr = &marScriptableStateUsableDef->hintIconImage;
    v12 = Mark_GfxImagePtr();
    marGfxImagePtr = v11;
    if ( !v12 )
      return 0i64;
    ++v1;
    if ( ++v2 >= count )
      return 1i64;
  }
  marscr_string_t = v9;
  return 0i64;
}

/*
==============
Mark_Scriptable_Attackers
==============
*/
__int64 Mark_Scriptable_Attackers()
{
  return 1i64;
}

/*
==============
Mark_Scriptable_AttackersArray
==============
*/
__int64 Mark_Scriptable_AttackersArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_Scriptable_DamageCause
==============
*/
__int64 Mark_Scriptable_DamageCause()
{
  return 1i64;
}

/*
==============
Mark_Scriptable_DamageCauseArray
==============
*/
__int64 Mark_Scriptable_DamageCauseArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_Scriptable_EventSun_Data
==============
*/
__int64 Mark_Scriptable_EventSun_Data()
{
  return 1i64;
}

/*
==============
Mark_Scriptable_EventSun_DataArray
==============
*/
__int64 Mark_Scriptable_EventSun_DataArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_Scriptable_EventType
==============
*/
__int64 Mark_Scriptable_EventType()
{
  return 1i64;
}

/*
==============
Mark_Scriptable_EventTypeArray
==============
*/
__int64 Mark_Scriptable_EventTypeArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_Scriptable_ImageId
==============
*/
__int64 Mark_Scriptable_ImageId()
{
  return 1i64;
}

/*
==============
Mark_Scriptable_ImageIdArray
==============
*/
__int64 Mark_Scriptable_ImageIdArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_Scriptable_MaterialOverrideType
==============
*/
__int64 Mark_Scriptable_MaterialOverrideType()
{
  return 1i64;
}

/*
==============
Mark_Scriptable_MaterialOverrideTypeArray
==============
*/
__int64 Mark_Scriptable_MaterialOverrideTypeArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_Scriptable_MayhemAction
==============
*/
__int64 Mark_Scriptable_MayhemAction()
{
  return 1i64;
}

/*
==============
Mark_Scriptable_MayhemActionArray
==============
*/
__int64 Mark_Scriptable_MayhemActionArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_Scriptable_ShaderParamType
==============
*/
__int64 Mark_Scriptable_ShaderParamType()
{
  return 1i64;
}

/*
==============
Mark_Scriptable_ShaderParamTypeArray
==============
*/
__int64 Mark_Scriptable_ShaderParamTypeArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_Scriptable_StateType
==============
*/
__int64 Mark_Scriptable_StateType()
{
  return 1i64;
}

/*
==============
Mark_Scriptable_StateTypeArray
==============
*/
__int64 Mark_Scriptable_StateTypeArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Mark_Scriptable_TeamFilter
==============
*/
__int64 Mark_Scriptable_TeamFilter()
{
  return 1i64;
}

/*
==============
Mark_Scriptable_TeamFilterArray
==============
*/
__int64 Mark_Scriptable_TeamFilterArray(const unsigned __int64 count)
{
  return 1i64;
}

/*
==============
Postload_ScriptableDamageTagOverride
==============
*/
void Postload_ScriptableDamageTagOverride(const DBStreamStart streamStart)
{
  const char **v2; 
  scr_string_t *v3; 

  if ( streamStart != (varScriptableDamageTagOverride != (ScriptableDamageTagOverride *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableDamageTagOverride, 0x10ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x10ui64);
  v2 = varXString;
  varXString = &varScriptableDamageTagOverride->tag;
  Postload_XString(NotAtStart);
  varXString = v2;
  v3 = varscr_string_t;
  varscr_string_t = &varScriptableDamageTagOverride->scrTag;
  Postload_scr_string_t(NotAtStart);
  varscr_string_t = v3;
}

/*
==============
Postload_ScriptableDamageTagOverrideArray
==============
*/
void Postload_ScriptableDamageTagOverrideArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableDamageTagOverride *i; 
  ScriptableDamageTagOverride *v4; 
  const char **v5; 
  scr_string_t *v6; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableDamageTagOverride, 16 * count);
  for ( i = varScriptableDamageTagOverride; v2; --v2 )
  {
    v4 = i;
    varScriptableDamageTagOverride = i;
    if ( i == (ScriptableDamageTagOverride *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x10ui64);
      v4 = varScriptableDamageTagOverride;
    }
    v5 = varXString;
    varXString = &v4->tag;
    Postload_XString(NotAtStart);
    varXString = v5;
    v6 = varscr_string_t;
    varscr_string_t = &varScriptableDamageTagOverride->scrTag;
    Postload_scr_string_t(NotAtStart);
    ++i;
    varscr_string_t = v6;
  }
}

/*
==============
Postload_ScriptableDamageTagOverrideStream
==============
*/
void Postload_ScriptableDamageTagOverrideStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  const char **v5; 
  scr_string_t *v6; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 43685, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varScriptableDamageTagOverride;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x10ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x10ui64);
      v5 = varXString;
      g_streamPosGlob.pos += 16;
      varXString = &varScriptableDamageTagOverride->tag;
      Postload_XString(NotAtStart);
      varXString = v5;
      v6 = varscr_string_t;
      varscr_string_t = &varScriptableDamageTagOverride->scrTag;
      Postload_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableDamageTagOverride = (ScriptableDamageTagOverride *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varscr_string_t = v6;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ScriptableDataType
==============
*/
void Postload_ScriptableDataType(const DBStreamStart streamStart)
{
  if ( streamStart != (varScriptableDataType != (ScriptableDataType *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableDataType, 1ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(1ui64);
}

/*
==============
Postload_ScriptableDataTypeArray
==============
*/
void Postload_ScriptableDataTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream_0(streamStart, varScriptableDataType, count);
}

/*
==============
Postload_ScriptableDataTypeStream
==============
*/
void Postload_ScriptableDataTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ScriptableDataType *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 28955, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varScriptableDataType;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ScriptableDataType *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 1ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(1ui64);
      pos = g_streamPosGlob.pos + 1;
      g_streamPosGlob.pos = pos;
      v3 = (ScriptableDataType *)pos;
      varScriptableDataType = (ScriptableDataType *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ScriptableDef
==============
*/
void Postload_ScriptableDef(const DBStreamStart streamStart)
{
  const char **v2; 
  ScriptableDef **v3; 
  ScriptableDef *v4; 
  ScriptablePartDef *parts; 
  ScriptablePartDef *v6; 
  __int64 numParts; 
  ScriptablePartDef *i; 
  scr_string_t *v9; 
  ScriptableDef *v10; 
  XModel **models; 
  XModel **v12; 
  XModel **v13; 

  DB_PatchMem_PostLoad_PushAsset(59, varScriptableDef);
  if ( streamStart != (varScriptableDef != (ScriptableDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableDef, 0x78ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x78ui64);
  DB_PushStreamPos(8u);
  v2 = varXString;
  varXString = &varScriptableDef->name;
  Postload_XString(NotAtStart);
  varXString = v2;
  v3 = varScriptableDefPtr;
  varScriptableDefPtr = &varScriptableDef->nextScriptableDef;
  Postload_ScriptableDefPtr(NotAtStart);
  varScriptableDefPtr = v3;
  v4 = varScriptableDef;
  parts = varScriptableDef->parts;
  if ( parts )
  {
    if ( parts == (ScriptablePartDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( parts != (ScriptablePartDef *)-2i64 )
    {
      v4->parts = (ScriptablePartDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableDef->parts);
      goto LABEL_19;
    }
    v6 = varScriptablePartDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->parts = (ScriptablePartDef *)g_streamPosGlob.pos;
    varScriptablePartDef = (ScriptablePartDef *)g_streamPosGlob.pos;
    numParts = varScriptableDef->numParts;
    if ( 104 * numParts )
    {
      if ( (unsigned __int64)(104 * numParts) > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(104 * numParts);
    }
    for ( i = varScriptablePartDef; numParts; --numParts )
    {
      varScriptablePartDef = i;
      Postload_ScriptablePartDef(NotAtStart);
      ++i;
    }
    varScriptablePartDef = v6;
    if ( parts == (ScriptablePartDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_19:
  v9 = varscr_string_t;
  varscr_string_t = &varScriptableDef->animationTreeName;
  Postload_scr_string_t(NotAtStart);
  v10 = varScriptableDef;
  varscr_string_t = v9;
  models = varScriptableDef->models;
  if ( models )
  {
    if ( models == (XModel **)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( models != (XModel **)-2i64 )
    {
      v10->models = (XModel **)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableDef->models);
      goto LABEL_26;
    }
    v12 = varXModelPtr;
    v13 = AllocPostload_XModelPtr();
    v10->models = v13;
    varXModelPtr = v13;
    Postload_XModelPtrArray(AtStart, varScriptableDef->numXModels);
    varXModelPtr = v12;
    if ( models == (XModel **)-1i64 )
      DB_PopSharedData();
  }
LABEL_26:
  DB_PopStreamPos();
  DB_PatchMem_PopAsset();
}

/*
==============
Postload_ScriptableDefArray
==============
*/
void Postload_ScriptableDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableDef, 120 * count);
  for ( i = varScriptableDef; v2; --v2 )
  {
    varScriptableDef = i;
    Postload_ScriptableDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableDefPtr
==============
*/
void Postload_ScriptableDefPtr(const DBStreamStart streamStart)
{
  unsigned __int8 *inserted; 
  ScriptableDef **v3; 
  __int64 v4; 
  ScriptableDef *v5; 

  inserted = NULL;
  if ( streamStart != (varScriptableDefPtr != (ScriptableDef **)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableDefPtr, 8ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(8ui64);
  DB_PushStreamPos(2u);
  v3 = varScriptableDefPtr;
  v4 = (__int64)*varScriptableDefPtr;
  if ( *varScriptableDefPtr )
  {
    if ( v4 == -1 )
    {
      DB_PushSharedData();
    }
    else if ( v4 != -2 && v4 != -3 )
    {
      DB_ConvertOffsetToAlias((unsigned __int64 *)varScriptableDefPtr);
      goto LABEL_17;
    }
    v5 = varScriptableDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    *v3 = (ScriptableDef *)g_streamPosGlob.pos;
    varScriptableDef = (ScriptableDef *)g_streamPosGlob.pos;
    if ( v4 == -3 )
      inserted = DB_InsertPointer();
    Postload_ScriptableDef(AtStart);
    Load_ScriptableDefAsset(v3);
    varScriptableDef = v5;
    if ( inserted )
      *(_QWORD *)inserted = *v3;
    if ( v4 == -1 )
      DB_PopSharedData();
  }
LABEL_17:
  DB_PopStreamPos();
}

/*
==============
Postload_ScriptableDefPtrArray
==============
*/
void Postload_ScriptableDefPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableDef **i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableDefPtr, 8 * count);
  for ( i = varScriptableDefPtr; v2; --v2 )
  {
    varScriptableDefPtr = i;
    Postload_ScriptableDefPtr(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableDefPtrStream
==============
*/
void Postload_ScriptableDefPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ScriptableDef **v5; 
  __int64 v6; 
  ScriptableDef *v7; 
  unsigned __int8 *inserted; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 44908, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varScriptableDefPtr;
    pos = g_streamPosGlob.pos;
    while ( 1 )
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 8ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(8ui64);
      g_streamPosGlob.pos += 8;
      DB_PushStreamPos(2u);
      v5 = varScriptableDefPtr;
      v6 = (__int64)*varScriptableDefPtr;
      if ( !*varScriptableDefPtr )
        goto LABEL_23;
      if ( v6 == -1 )
        break;
      if ( v6 == -2 || v6 == -3 )
        goto LABEL_17;
      DB_ConvertOffsetToAlias((unsigned __int64 *)varScriptableDefPtr);
LABEL_23:
      DB_PopStreamPos();
      pos = g_streamPosGlob.pos;
      varScriptableDefPtr = (ScriptableDef **)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_17:
    v7 = varScriptableDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    inserted = NULL;
    *v5 = (ScriptableDef *)g_streamPosGlob.pos;
    varScriptableDef = (ScriptableDef *)g_streamPosGlob.pos;
    if ( v6 == -3 )
      inserted = DB_InsertPointer();
    Postload_ScriptableDef(AtStart);
    Load_ScriptableDefAsset(v5);
    varScriptableDef = v7;
    if ( inserted )
      *(_QWORD *)inserted = *v5;
    if ( v6 == -1 )
      DB_PopSharedData();
    goto LABEL_23;
  }
}

/*
==============
Postload_ScriptableDefStream
==============
*/
void Postload_ScriptableDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  const char **v5; 
  ScriptableDef **v6; 
  ScriptableDef *v7; 
  ScriptablePartDef *parts; 
  ScriptablePartDef *v9; 
  __int64 numParts; 
  ScriptablePartDef *i; 
  scr_string_t *v12; 
  ScriptableDef *v13; 
  XModel **models; 
  XModel **v15; 
  XModel **v16; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 44781, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varScriptableDef;
    do
    {
      DB_PatchMem_PostLoad_PushAsset(59, v3);
      pos = g_streamPosGlob.pos;
      if ( varScriptableDef != (ScriptableDef *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, varScriptableDef, 0x78ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x78ui64);
      g_streamPosGlob.pos += 120;
      DB_PushStreamPos(8u);
      v5 = varXString;
      varXString = &varScriptableDef->name;
      Postload_XString(NotAtStart);
      varXString = v5;
      v6 = varScriptableDefPtr;
      varScriptableDefPtr = &varScriptableDef->nextScriptableDef;
      Postload_ScriptableDefPtr(NotAtStart);
      varScriptableDefPtr = v6;
      v7 = varScriptableDef;
      parts = varScriptableDef->parts;
      if ( parts )
      {
        if ( parts == (ScriptablePartDef *)-1i64 )
        {
          DB_PushSharedData();
        }
        else if ( parts != (ScriptablePartDef *)-2i64 )
        {
          v7->parts = (ScriptablePartDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableDef->parts);
          goto LABEL_25;
        }
        v9 = varScriptablePartDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v7->parts = (ScriptablePartDef *)g_streamPosGlob.pos;
        varScriptablePartDef = (ScriptablePartDef *)g_streamPosGlob.pos;
        numParts = varScriptableDef->numParts;
        if ( 104 * numParts )
        {
          if ( (unsigned __int64)(104 * numParts) > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
            __debugbreak();
          DB_IncStreamPos(104 * numParts);
        }
        for ( i = varScriptablePartDef; numParts; --numParts )
        {
          varScriptablePartDef = i;
          Postload_ScriptablePartDef(NotAtStart);
          ++i;
        }
        varScriptablePartDef = v9;
        if ( parts == (ScriptablePartDef *)-1i64 )
          DB_PopSharedData();
      }
LABEL_25:
      v12 = varscr_string_t;
      varscr_string_t = &varScriptableDef->animationTreeName;
      Postload_scr_string_t(NotAtStart);
      v13 = varScriptableDef;
      varscr_string_t = v12;
      models = varScriptableDef->models;
      if ( models )
      {
        if ( models == (XModel **)-1i64 )
        {
          DB_PushSharedData();
LABEL_30:
          v15 = varXModelPtr;
          v16 = AllocPostload_XModelPtr();
          v13->models = v16;
          varXModelPtr = v16;
          Postload_XModelPtrArray(AtStart, varScriptableDef->numXModels);
          varXModelPtr = v15;
          if ( models == (XModel **)-1i64 )
            DB_PopSharedData();
          goto LABEL_32;
        }
        if ( models == (XModel **)-2i64 )
          goto LABEL_30;
        v13->models = (XModel **)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableDef->models);
      }
LABEL_32:
      DB_PopStreamPos();
      DB_PatchMem_PopAsset();
      v3 = g_streamPosGlob.pos;
      varScriptableDef = (ScriptableDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ScriptableEventAddModelDef
==============
*/
void Postload_ScriptableEventAddModelDef(const DBStreamStart streamStart)
{
  ScriptableEventAddModelDef *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 
  const char **v6; 
  scr_string_t *v7; 
  XModel **v8; 

  if ( streamStart != (varScriptableEventAddModelDef != (ScriptableEventAddModelDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventAddModelDef, 0x20ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x20ui64);
  v2 = varScriptableEventAddModelDef;
  base = varScriptableEventAddModelDef->base;
  if ( varScriptableEventAddModelDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventAddModelDef->base);
      goto LABEL_12;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varScriptableEventBaseDef = v4;
    varXString = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_12:
  v6 = varXString;
  varXString = &varScriptableEventAddModelDef->tagName;
  Postload_XString(NotAtStart);
  varXString = v6;
  v7 = varscr_string_t;
  varscr_string_t = &varScriptableEventAddModelDef->scrTagName;
  Postload_scr_string_t(NotAtStart);
  varscr_string_t = v7;
  v8 = varXModelPtr;
  varXModelPtr = &varScriptableEventAddModelDef->model;
  Postload_XModelPtr(NotAtStart);
  varXModelPtr = v8;
}

/*
==============
Postload_ScriptableEventAddModelDefArray
==============
*/
void Postload_ScriptableEventAddModelDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventAddModelDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventAddModelDef, 32 * count);
  for ( i = varScriptableEventAddModelDef; v2; --v2 )
  {
    varScriptableEventAddModelDef = i;
    Postload_ScriptableEventAddModelDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventAddModelDefStream
==============
*/
void Postload_ScriptableEventAddModelDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ScriptableEventAddModelDef *v5; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v7; 
  const char **v8; 
  const char **v9; 
  scr_string_t *v10; 
  XModel **v11; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 37078, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varScriptableEventAddModelDef;
    pos = g_streamPosGlob.pos;
    while ( 1 )
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x20ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x20ui64);
      g_streamPosGlob.pos += 32;
      v5 = varScriptableEventAddModelDef;
      base = varScriptableEventAddModelDef->base;
      if ( !varScriptableEventAddModelDef->base )
        goto LABEL_18;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        break;
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_16;
      v5->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventAddModelDef->base);
LABEL_18:
      v9 = varXString;
      varXString = &varScriptableEventAddModelDef->tagName;
      Postload_XString(NotAtStart);
      varXString = v9;
      v10 = varscr_string_t;
      varscr_string_t = &varScriptableEventAddModelDef->scrTagName;
      Postload_scr_string_t(NotAtStart);
      varscr_string_t = v10;
      v11 = varXModelPtr;
      varXModelPtr = &varScriptableEventAddModelDef->model;
      Postload_XModelPtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventAddModelDef = (ScriptableEventAddModelDef *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varXModelPtr = v11;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v7 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v5->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v8 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v8;
    varScriptableEventBaseDef = v7;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_18;
  }
}

/*
==============
Postload_ScriptableEventAnimationDef
==============
*/
void Postload_ScriptableEventAnimationDef(const DBStreamStart streamStart)
{
  ScriptableEventAnimationDef *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 
  XAnimParts **v6; 
  ScriptableEventAnimationDef *v7; 
  ScriptableEventDef *eventsAtEnd; 
  ScriptableEventDef *v9; 

  if ( streamStart != (varScriptableEventAnimationDef != (ScriptableEventAnimationDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventAnimationDef, 0x50ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x50ui64);
  v2 = varScriptableEventAnimationDef;
  base = varScriptableEventAnimationDef->base;
  if ( varScriptableEventAnimationDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventAnimationDef->base);
      goto LABEL_12;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v5;
    varScriptableEventBaseDef = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_12:
  v6 = varXAnimPartsPtr;
  varXAnimPartsPtr = &varScriptableEventAnimationDef->animation;
  Postload_XAnimPartsPtr(NotAtStart);
  v7 = varScriptableEventAnimationDef;
  varXAnimPartsPtr = v6;
  eventsAtEnd = varScriptableEventAnimationDef->eventsAtEnd;
  if ( !eventsAtEnd )
    return;
  if ( eventsAtEnd == (ScriptableEventDef *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( eventsAtEnd != (ScriptableEventDef *)-2i64 )
  {
    v7->eventsAtEnd = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventAnimationDef->eventsAtEnd);
    return;
  }
  v9 = varScriptableEventDef;
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  v7->eventsAtEnd = (ScriptableEventDef *)g_streamPosGlob.pos;
  varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
  Postload_ScriptableEventDefArray(AtStart, varScriptableEventAnimationDef->eventAtEndCount);
  varScriptableEventDef = v9;
  if ( eventsAtEnd == (ScriptableEventDef *)-1i64 )
    DB_PopSharedData();
}

/*
==============
Postload_ScriptableEventAnimationDefArray
==============
*/
void Postload_ScriptableEventAnimationDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventAnimationDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventAnimationDef, 80 * count);
  for ( i = varScriptableEventAnimationDef; v2; --v2 )
  {
    varScriptableEventAnimationDef = i;
    Postload_ScriptableEventAnimationDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventAnimationDefStream
==============
*/
void Postload_ScriptableEventAnimationDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ScriptableEventAnimationDef *v5; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v7; 
  const char **v8; 
  XAnimParts **v9; 
  ScriptableEventAnimationDef *v10; 
  ScriptableEventDef *eventsAtEnd; 
  ScriptableEventDef *v12; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 30030, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varScriptableEventAnimationDef;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x50ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x50ui64);
      g_streamPosGlob.pos += 80;
      v5 = varScriptableEventAnimationDef;
      base = varScriptableEventAnimationDef->base;
      if ( varScriptableEventAnimationDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
        }
        else if ( base != (ScriptableEventBaseDef *)-2i64 )
        {
          v5->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventAnimationDef->base);
          goto LABEL_18;
        }
        v7 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v5->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        DB_IncStreamPos(0x10ui64);
        v8 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Postload_XString(NotAtStart);
        varXString = v8;
        varScriptableEventBaseDef = v7;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
      }
LABEL_18:
      v9 = varXAnimPartsPtr;
      varXAnimPartsPtr = &varScriptableEventAnimationDef->animation;
      Postload_XAnimPartsPtr(NotAtStart);
      v10 = varScriptableEventAnimationDef;
      varXAnimPartsPtr = v9;
      eventsAtEnd = varScriptableEventAnimationDef->eventsAtEnd;
      if ( eventsAtEnd )
      {
        if ( eventsAtEnd == (ScriptableEventDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_23:
          v12 = varScriptableEventDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v10->eventsAtEnd = (ScriptableEventDef *)g_streamPosGlob.pos;
          varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
          Postload_ScriptableEventDefArray(AtStart, varScriptableEventAnimationDef->eventAtEndCount);
          varScriptableEventDef = v12;
          if ( eventsAtEnd == (ScriptableEventDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_25;
        }
        if ( eventsAtEnd == (ScriptableEventDef *)-2i64 )
          goto LABEL_23;
        v10->eventsAtEnd = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventAnimationDef->eventsAtEnd);
      }
LABEL_25:
      pos = g_streamPosGlob.pos;
      varScriptableEventAnimationDef = (ScriptableEventAnimationDef *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ScriptableEventAnonymousDef
==============
*/
void Postload_ScriptableEventAnonymousDef(const DBStreamStart streamStart)
{
  ScriptableEventAnonymousDef *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 

  if ( streamStart != (varScriptableEventAnonymousDef != (ScriptableEventAnonymousDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventAnonymousDef, 0x98ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x98ui64);
  v2 = varScriptableEventAnonymousDef;
  base = varScriptableEventAnonymousDef->base;
  if ( varScriptableEventAnonymousDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventAnonymousDef->base);
      return;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varScriptableEventBaseDef = v4;
    varXString = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Postload_ScriptableEventAnonymousDefArray
==============
*/
void Postload_ScriptableEventAnonymousDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventAnonymousDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventAnonymousDef, 152 * count);
  for ( i = varScriptableEventAnonymousDef; v2; --v2 )
  {
    varScriptableEventAnonymousDef = i;
    Postload_ScriptableEventAnonymousDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventAnonymousDefStream
==============
*/
void Postload_ScriptableEventAnonymousDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventAnonymousDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 27875, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventAnonymousDef;
    while ( 1 )
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x98ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x98ui64);
      g_streamPosGlob.pos += 152;
      v4 = varScriptableEventAnonymousDef;
      base = varScriptableEventAnonymousDef->base;
      if ( !varScriptableEventAnonymousDef->base )
        goto LABEL_18;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        break;
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_16;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventAnonymousDef->base);
LABEL_18:
      pos = g_streamPosGlob.pos;
      varScriptableEventAnonymousDef = (ScriptableEventAnonymousDef *)g_streamPosGlob.pos;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v6 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v7 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v7;
    varScriptableEventBaseDef = v6;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_18;
  }
}

/*
==============
Postload_ScriptableEventApplyAngularForceDef
==============
*/
void Postload_ScriptableEventApplyAngularForceDef(const DBStreamStart streamStart)
{
  ScriptableEventApplyAngularForceDef *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 

  if ( streamStart != (varScriptableEventApplyAngularForceDef != (ScriptableEventApplyAngularForceDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventApplyAngularForceDef, 0x28ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x28ui64);
  v2 = varScriptableEventApplyAngularForceDef;
  base = varScriptableEventApplyAngularForceDef->base;
  if ( varScriptableEventApplyAngularForceDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventApplyAngularForceDef->base);
      return;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varScriptableEventBaseDef = v4;
    varXString = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Postload_ScriptableEventApplyAngularForceDefArray
==============
*/
void Postload_ScriptableEventApplyAngularForceDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventApplyAngularForceDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventApplyAngularForceDef, 40 * count);
  for ( i = varScriptableEventApplyAngularForceDef; v2; --v2 )
  {
    varScriptableEventApplyAngularForceDef = i;
    Postload_ScriptableEventApplyAngularForceDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventApplyAngularForceDefStream
==============
*/
void Postload_ScriptableEventApplyAngularForceDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventApplyAngularForceDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 37528, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventApplyAngularForceDef;
    while ( 1 )
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x28ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x28ui64);
      g_streamPosGlob.pos += 40;
      v4 = varScriptableEventApplyAngularForceDef;
      base = varScriptableEventApplyAngularForceDef->base;
      if ( !varScriptableEventApplyAngularForceDef->base )
        goto LABEL_18;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        break;
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_16;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventApplyAngularForceDef->base);
LABEL_18:
      pos = g_streamPosGlob.pos;
      varScriptableEventApplyAngularForceDef = (ScriptableEventApplyAngularForceDef *)g_streamPosGlob.pos;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v6 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v7 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v7;
    varScriptableEventBaseDef = v6;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_18;
  }
}

/*
==============
Postload_ScriptableEventApplyConstantAngularForceDef
==============
*/
void Postload_ScriptableEventApplyConstantAngularForceDef(const DBStreamStart streamStart)
{
  ScriptableEventApplyConstantAngularForceDef *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 

  if ( streamStart != (varScriptableEventApplyConstantAngularForceDef != (ScriptableEventApplyConstantAngularForceDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventApplyConstantAngularForceDef, 0x28ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x28ui64);
  v2 = varScriptableEventApplyConstantAngularForceDef;
  base = varScriptableEventApplyConstantAngularForceDef->base;
  if ( varScriptableEventApplyConstantAngularForceDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventApplyConstantAngularForceDef->base);
      return;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varScriptableEventBaseDef = v4;
    varXString = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Postload_ScriptableEventApplyConstantAngularForceDefArray
==============
*/
void Postload_ScriptableEventApplyConstantAngularForceDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventApplyConstantAngularForceDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventApplyConstantAngularForceDef, 40 * count);
  for ( i = varScriptableEventApplyConstantAngularForceDef; v2; --v2 )
  {
    varScriptableEventApplyConstantAngularForceDef = i;
    Postload_ScriptableEventApplyConstantAngularForceDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventApplyConstantAngularForceDefStream
==============
*/
void Postload_ScriptableEventApplyConstantAngularForceDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventApplyConstantAngularForceDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 38070, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventApplyConstantAngularForceDef;
    while ( 1 )
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x28ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x28ui64);
      g_streamPosGlob.pos += 40;
      v4 = varScriptableEventApplyConstantAngularForceDef;
      base = varScriptableEventApplyConstantAngularForceDef->base;
      if ( !varScriptableEventApplyConstantAngularForceDef->base )
        goto LABEL_18;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        break;
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_16;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventApplyConstantAngularForceDef->base);
LABEL_18:
      pos = g_streamPosGlob.pos;
      varScriptableEventApplyConstantAngularForceDef = (ScriptableEventApplyConstantAngularForceDef *)g_streamPosGlob.pos;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v6 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v7 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v7;
    varScriptableEventBaseDef = v6;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_18;
  }
}

/*
==============
Postload_ScriptableEventApplyConstantForceDef
==============
*/
void Postload_ScriptableEventApplyConstantForceDef(const DBStreamStart streamStart)
{
  ScriptableEventApplyConstantForceDef *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 

  if ( streamStart != (varScriptableEventApplyConstantForceDef != (ScriptableEventApplyConstantForceDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventApplyConstantForceDef, 0x40ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x40ui64);
  v2 = varScriptableEventApplyConstantForceDef;
  base = varScriptableEventApplyConstantForceDef->base;
  if ( varScriptableEventApplyConstantForceDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventApplyConstantForceDef->base);
      return;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varScriptableEventBaseDef = v4;
    varXString = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Postload_ScriptableEventApplyConstantForceDefArray
==============
*/
void Postload_ScriptableEventApplyConstantForceDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventApplyConstantForceDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventApplyConstantForceDef, count << 6);
  for ( i = varScriptableEventApplyConstantForceDef; v2; --v2 )
  {
    varScriptableEventApplyConstantForceDef = i;
    Postload_ScriptableEventApplyConstantForceDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventApplyConstantForceDefStream
==============
*/
void Postload_ScriptableEventApplyConstantForceDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventApplyConstantForceDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 37822, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventApplyConstantForceDef;
    while ( 1 )
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x40ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x40ui64);
      g_streamPosGlob.pos += 64;
      v4 = varScriptableEventApplyConstantForceDef;
      base = varScriptableEventApplyConstantForceDef->base;
      if ( !varScriptableEventApplyConstantForceDef->base )
        goto LABEL_18;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        break;
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_16;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventApplyConstantForceDef->base);
LABEL_18:
      pos = g_streamPosGlob.pos;
      varScriptableEventApplyConstantForceDef = (ScriptableEventApplyConstantForceDef *)g_streamPosGlob.pos;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v6 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v7 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v7;
    varScriptableEventBaseDef = v6;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_18;
  }
}

/*
==============
Postload_ScriptableEventApplyForceDef
==============
*/
void Postload_ScriptableEventApplyForceDef(const DBStreamStart streamStart)
{
  ScriptableEventApplyForceDef *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 

  if ( streamStart != (varScriptableEventApplyForceDef != (ScriptableEventApplyForceDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventApplyForceDef, 0x40ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x40ui64);
  v2 = varScriptableEventApplyForceDef;
  base = varScriptableEventApplyForceDef->base;
  if ( varScriptableEventApplyForceDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventApplyForceDef->base);
      return;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varScriptableEventBaseDef = v4;
    varXString = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Postload_ScriptableEventApplyForceDefArray
==============
*/
void Postload_ScriptableEventApplyForceDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventApplyForceDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventApplyForceDef, count << 6);
  for ( i = varScriptableEventApplyForceDef; v2; --v2 )
  {
    varScriptableEventApplyForceDef = i;
    Postload_ScriptableEventApplyForceDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventApplyForceDefStream
==============
*/
void Postload_ScriptableEventApplyForceDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventApplyForceDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 37326, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventApplyForceDef;
    while ( 1 )
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x40ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x40ui64);
      g_streamPosGlob.pos += 64;
      v4 = varScriptableEventApplyForceDef;
      base = varScriptableEventApplyForceDef->base;
      if ( !varScriptableEventApplyForceDef->base )
        goto LABEL_18;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        break;
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_16;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventApplyForceDef->base);
LABEL_18:
      pos = g_streamPosGlob.pos;
      varScriptableEventApplyForceDef = (ScriptableEventApplyForceDef *)g_streamPosGlob.pos;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v6 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v7 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v7;
    varScriptableEventBaseDef = v6;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_18;
  }
}

/*
==============
Postload_ScriptableEventBaseDef
==============
*/
void Postload_ScriptableEventBaseDef(const DBStreamStart streamStart)
{
  const char **v2; 

  if ( streamStart != (varScriptableEventBaseDef != (ScriptableEventBaseDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventBaseDef, 0x10ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x10ui64);
  v2 = varXString;
  varXString = &varScriptableEventBaseDef->name;
  Postload_XString(NotAtStart);
  varXString = v2;
}

/*
==============
Postload_ScriptableEventBaseDefArray
==============
*/
void Postload_ScriptableEventBaseDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventBaseDef *i; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventBaseDef, 16 * count);
  for ( i = varScriptableEventBaseDef; v2; --v2 )
  {
    v4 = i;
    varScriptableEventBaseDef = i;
    if ( i == (ScriptableEventBaseDef *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0x10ui64);
      v4 = varScriptableEventBaseDef;
    }
    v5 = varXString;
    varXString = &v4->name;
    Postload_XString(NotAtStart);
    ++i;
    varXString = v5;
  }
}

/*
==============
Postload_ScriptableEventBaseDefStream
==============
*/
void Postload_ScriptableEventBaseDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  const char **v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 27742, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varScriptableEventBaseDef;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x10ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x10ui64);
      v5 = varXString;
      g_streamPosGlob.pos += 16;
      varXString = &varScriptableEventBaseDef->name;
      Postload_XString(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varXString = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ScriptableEventChunkDynentDef
==============
*/
void Postload_ScriptableEventChunkDynentDef(const DBStreamStart streamStart)
{
  ScriptableEventChunkDynentDef *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 

  if ( streamStart != (varScriptableEventChunkDynentDef != (ScriptableEventChunkDynentDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventChunkDynentDef, 0x30ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x30ui64);
  v2 = varScriptableEventChunkDynentDef;
  base = varScriptableEventChunkDynentDef->base;
  if ( varScriptableEventChunkDynentDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventChunkDynentDef->base);
      return;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varScriptableEventBaseDef = v4;
    varXString = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Postload_ScriptableEventChunkDynentDefArray
==============
*/
void Postload_ScriptableEventChunkDynentDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventChunkDynentDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventChunkDynentDef, 48 * count);
  for ( i = varScriptableEventChunkDynentDef; v2; --v2 )
  {
    varScriptableEventChunkDynentDef = i;
    Postload_ScriptableEventChunkDynentDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventChunkDynentDefStream
==============
*/
void Postload_ScriptableEventChunkDynentDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventChunkDynentDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 30847, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventChunkDynentDef;
    while ( 1 )
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x30ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x30ui64);
      g_streamPosGlob.pos += 48;
      v4 = varScriptableEventChunkDynentDef;
      base = varScriptableEventChunkDynentDef->base;
      if ( !varScriptableEventChunkDynentDef->base )
        goto LABEL_18;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        break;
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_16;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventChunkDynentDef->base);
LABEL_18:
      pos = g_streamPosGlob.pos;
      varScriptableEventChunkDynentDef = (ScriptableEventChunkDynentDef *)g_streamPosGlob.pos;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v6 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v7 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v7;
    varScriptableEventBaseDef = v6;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_18;
  }
}

/*
==============
Postload_ScriptableEventClientViewSelectorDef
==============
*/
void Postload_ScriptableEventClientViewSelectorDef(const DBStreamStart streamStart)
{
  ScriptableEventClientViewSelectorDef *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 
  ScriptableEventClientViewSelectorDef *v6; 
  ScriptableEventDef *events1p; 
  ScriptableEventDef *v8; 
  ScriptableEventClientViewSelectorDef *v9; 
  ScriptableEventDef *events3p; 
  ScriptableEventDef *v11; 

  if ( streamStart != (varScriptableEventClientViewSelectorDef != (ScriptableEventClientViewSelectorDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventClientViewSelectorDef, 0x30ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x30ui64);
  v2 = varScriptableEventClientViewSelectorDef;
  base = varScriptableEventClientViewSelectorDef->base;
  if ( varScriptableEventClientViewSelectorDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventClientViewSelectorDef->base);
      goto LABEL_12;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v5;
    varScriptableEventBaseDef = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_12:
  v6 = varScriptableEventClientViewSelectorDef;
  events1p = varScriptableEventClientViewSelectorDef->events1p;
  if ( !events1p )
    goto LABEL_19;
  if ( events1p == (ScriptableEventDef *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( events1p != (ScriptableEventDef *)-2i64 )
  {
    v6->events1p = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventClientViewSelectorDef->events1p);
    goto LABEL_19;
  }
  v8 = varScriptableEventDef;
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  v6->events1p = (ScriptableEventDef *)g_streamPosGlob.pos;
  varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
  Postload_ScriptableEventDefArray(AtStart, varScriptableEventClientViewSelectorDef->event1pCount);
  varScriptableEventDef = v8;
  if ( events1p == (ScriptableEventDef *)-1i64 )
    DB_PopSharedData();
LABEL_19:
  v9 = varScriptableEventClientViewSelectorDef;
  events3p = varScriptableEventClientViewSelectorDef->events3p;
  if ( !events3p )
    return;
  if ( events3p == (ScriptableEventDef *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( events3p != (ScriptableEventDef *)-2i64 )
  {
    v9->events3p = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventClientViewSelectorDef->events3p);
    return;
  }
  v11 = varScriptableEventDef;
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  v9->events3p = (ScriptableEventDef *)g_streamPosGlob.pos;
  varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
  Postload_ScriptableEventDefArray(AtStart, varScriptableEventClientViewSelectorDef->event3pCount);
  varScriptableEventDef = v11;
  if ( events3p == (ScriptableEventDef *)-1i64 )
    DB_PopSharedData();
}

/*
==============
Postload_ScriptableEventClientViewSelectorDefArray
==============
*/
void Postload_ScriptableEventClientViewSelectorDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventClientViewSelectorDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventClientViewSelectorDef, 48 * count);
  for ( i = varScriptableEventClientViewSelectorDef; v2; --v2 )
  {
    varScriptableEventClientViewSelectorDef = i;
    Postload_ScriptableEventClientViewSelectorDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventClientViewSelectorDefStream
==============
*/
void Postload_ScriptableEventClientViewSelectorDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventClientViewSelectorDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  ScriptableEventClientViewSelectorDef *v8; 
  ScriptableEventDef *events1p; 
  ScriptableEventDef *v10; 
  ScriptableEventClientViewSelectorDef *v11; 
  ScriptableEventDef *events3p; 
  ScriptableEventDef *v13; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 36541, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventClientViewSelectorDef;
    do
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x30ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x30ui64);
      g_streamPosGlob.pos += 48;
      v4 = varScriptableEventClientViewSelectorDef;
      base = varScriptableEventClientViewSelectorDef->base;
      if ( varScriptableEventClientViewSelectorDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
        }
        else if ( base != (ScriptableEventBaseDef *)-2i64 )
        {
          v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventClientViewSelectorDef->base);
          goto LABEL_18;
        }
        v6 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        DB_IncStreamPos(0x10ui64);
        v7 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Postload_XString(NotAtStart);
        varXString = v7;
        varScriptableEventBaseDef = v6;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
      }
LABEL_18:
      v8 = varScriptableEventClientViewSelectorDef;
      events1p = varScriptableEventClientViewSelectorDef->events1p;
      if ( !events1p )
        goto LABEL_25;
      if ( events1p == (ScriptableEventDef *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( events1p != (ScriptableEventDef *)-2i64 )
      {
        v8->events1p = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventClientViewSelectorDef->events1p);
        goto LABEL_25;
      }
      v10 = varScriptableEventDef;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      v8->events1p = (ScriptableEventDef *)g_streamPosGlob.pos;
      varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
      Postload_ScriptableEventDefArray(AtStart, varScriptableEventClientViewSelectorDef->event1pCount);
      varScriptableEventDef = v10;
      if ( events1p == (ScriptableEventDef *)-1i64 )
        DB_PopSharedData();
LABEL_25:
      v11 = varScriptableEventClientViewSelectorDef;
      events3p = varScriptableEventClientViewSelectorDef->events3p;
      if ( events3p )
      {
        if ( events3p == (ScriptableEventDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_30:
          v13 = varScriptableEventDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v11->events3p = (ScriptableEventDef *)g_streamPosGlob.pos;
          varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
          Postload_ScriptableEventDefArray(AtStart, varScriptableEventClientViewSelectorDef->event3pCount);
          varScriptableEventDef = v13;
          if ( events3p == (ScriptableEventDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_32;
        }
        if ( events3p == (ScriptableEventDef *)-2i64 )
          goto LABEL_30;
        v11->events3p = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventClientViewSelectorDef->events3p);
      }
LABEL_32:
      pos = g_streamPosGlob.pos;
      varScriptableEventClientViewSelectorDef = (ScriptableEventClientViewSelectorDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ScriptableEventCollisionDef
==============
*/
void Postload_ScriptableEventCollisionDef(const DBStreamStart streamStart)
{
  ScriptableEventCollisionDef *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 
  const char **v6; 
  XModel **v7; 

  if ( streamStart != (varScriptableEventCollisionDef != (ScriptableEventCollisionDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventCollisionDef, 0x28ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x28ui64);
  v2 = varScriptableEventCollisionDef;
  base = varScriptableEventCollisionDef->base;
  if ( varScriptableEventCollisionDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventCollisionDef->base);
      goto LABEL_12;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varScriptableEventBaseDef = v4;
    varXString = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_12:
  v6 = varXString;
  varXString = &varScriptableEventCollisionDef->collmapName;
  Postload_XString(NotAtStart);
  varXString = v6;
  v7 = varXModelPtr;
  varXModelPtr = &varScriptableEventCollisionDef->model;
  Postload_XModelPtr(NotAtStart);
  varXModelPtr = v7;
}

/*
==============
Postload_ScriptableEventCollisionDefArray
==============
*/
void Postload_ScriptableEventCollisionDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventCollisionDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventCollisionDef, 40 * count);
  for ( i = varScriptableEventCollisionDef; v2; --v2 )
  {
    varScriptableEventCollisionDef = i;
    Postload_ScriptableEventCollisionDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventCollisionDefStream
==============
*/
void Postload_ScriptableEventCollisionDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ScriptableEventCollisionDef *v5; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v7; 
  const char **v8; 
  const char **v9; 
  XModel **v10; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 29543, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varScriptableEventCollisionDef;
    pos = g_streamPosGlob.pos;
    while ( 1 )
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x28ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x28ui64);
      g_streamPosGlob.pos += 40;
      v5 = varScriptableEventCollisionDef;
      base = varScriptableEventCollisionDef->base;
      if ( !varScriptableEventCollisionDef->base )
        goto LABEL_18;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        break;
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_16;
      v5->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventCollisionDef->base);
LABEL_18:
      v9 = varXString;
      varXString = &varScriptableEventCollisionDef->collmapName;
      Postload_XString(NotAtStart);
      varXString = v9;
      v10 = varXModelPtr;
      varXModelPtr = &varScriptableEventCollisionDef->model;
      Postload_XModelPtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventCollisionDef = (ScriptableEventCollisionDef *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varXModelPtr = v10;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v7 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v5->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v8 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v8;
    varScriptableEventBaseDef = v7;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_18;
  }
}

/*
==============
Postload_ScriptableEventCompassIconDef
==============
*/
void Postload_ScriptableEventCompassIconDef(const DBStreamStart streamStart)
{
  ScriptableEventCompassIconDef *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 
  Material **v6; 

  if ( streamStart != (varScriptableEventCompassIconDef != (ScriptableEventCompassIconDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventCompassIconDef, 0x98ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x98ui64);
  v2 = varScriptableEventCompassIconDef;
  base = varScriptableEventCompassIconDef->base;
  if ( varScriptableEventCompassIconDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventCompassIconDef->base);
      goto LABEL_12;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varScriptableEventBaseDef = v4;
    varXString = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_12:
  v6 = varMaterialHandle;
  varMaterialHandle = &varScriptableEventCompassIconDef->friendlyArrow;
  Postload_MaterialHandle(NotAtStart);
  varMaterialHandle = &varScriptableEventCompassIconDef->friendlyFiring;
  Postload_MaterialHandle(NotAtStart);
  varMaterialHandle = &varScriptableEventCompassIconDef->friendlyChatting;
  Postload_MaterialHandle(NotAtStart);
  varMaterialHandle = &varScriptableEventCompassIconDef->friendlyYelling;
  Postload_MaterialHandle(NotAtStart);
  varMaterialHandle = &varScriptableEventCompassIconDef->partyArrow;
  Postload_MaterialHandle(NotAtStart);
  varMaterialHandle = &varScriptableEventCompassIconDef->partyFiring;
  Postload_MaterialHandle(NotAtStart);
  varMaterialHandle = &varScriptableEventCompassIconDef->partyChatting;
  Postload_MaterialHandle(NotAtStart);
  varMaterialHandle = &varScriptableEventCompassIconDef->partyYelling;
  Postload_MaterialHandle(NotAtStart);
  varMaterialHandle = &varScriptableEventCompassIconDef->squadArrow;
  Postload_MaterialHandle(NotAtStart);
  varMaterialHandle = &varScriptableEventCompassIconDef->squadFiring;
  Postload_MaterialHandle(NotAtStart);
  varMaterialHandle = varScriptableEventCompassIconDef->enemyCompassIconQuiet;
  Postload_MaterialHandleArray(NotAtStart, 3ui64);
  varMaterialHandle = varScriptableEventCompassIconDef->enemyCompassIconFiring;
  Postload_MaterialHandleArray(NotAtStart, 3ui64);
  varMaterialHandle = &varScriptableEventCompassIconDef->enemyCompassIconDirectional;
  Postload_MaterialHandle(NotAtStart);
  varMaterialHandle = v6;
}

/*
==============
Postload_ScriptableEventCompassIconDefArray
==============
*/
void Postload_ScriptableEventCompassIconDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventCompassIconDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventCompassIconDef, 152 * count);
  for ( i = varScriptableEventCompassIconDef; v2; --v2 )
  {
    varScriptableEventCompassIconDef = i;
    Postload_ScriptableEventCompassIconDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventCompassIconDefStream
==============
*/
void Postload_ScriptableEventCompassIconDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ScriptableEventCompassIconDef *v5; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v7; 
  const char **v8; 
  Material **v9; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 32745, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varScriptableEventCompassIconDef;
    pos = g_streamPosGlob.pos;
    while ( 1 )
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x98ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x98ui64);
      g_streamPosGlob.pos += 152;
      v5 = varScriptableEventCompassIconDef;
      base = varScriptableEventCompassIconDef->base;
      if ( !varScriptableEventCompassIconDef->base )
        goto LABEL_18;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        break;
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_16;
      v5->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventCompassIconDef->base);
LABEL_18:
      v9 = varMaterialHandle;
      varMaterialHandle = &varScriptableEventCompassIconDef->friendlyArrow;
      Postload_MaterialHandle(NotAtStart);
      varMaterialHandle = &varScriptableEventCompassIconDef->friendlyFiring;
      Postload_MaterialHandle(NotAtStart);
      varMaterialHandle = &varScriptableEventCompassIconDef->friendlyChatting;
      Postload_MaterialHandle(NotAtStart);
      varMaterialHandle = &varScriptableEventCompassIconDef->friendlyYelling;
      Postload_MaterialHandle(NotAtStart);
      varMaterialHandle = &varScriptableEventCompassIconDef->partyArrow;
      Postload_MaterialHandle(NotAtStart);
      varMaterialHandle = &varScriptableEventCompassIconDef->partyFiring;
      Postload_MaterialHandle(NotAtStart);
      varMaterialHandle = &varScriptableEventCompassIconDef->partyChatting;
      Postload_MaterialHandle(NotAtStart);
      varMaterialHandle = &varScriptableEventCompassIconDef->partyYelling;
      Postload_MaterialHandle(NotAtStart);
      varMaterialHandle = &varScriptableEventCompassIconDef->squadArrow;
      Postload_MaterialHandle(NotAtStart);
      varMaterialHandle = &varScriptableEventCompassIconDef->squadFiring;
      Postload_MaterialHandle(NotAtStart);
      varMaterialHandle = varScriptableEventCompassIconDef->enemyCompassIconQuiet;
      Postload_MaterialHandleArray(NotAtStart, 3ui64);
      varMaterialHandle = varScriptableEventCompassIconDef->enemyCompassIconFiring;
      Postload_MaterialHandleArray(NotAtStart, 3ui64);
      varMaterialHandle = &varScriptableEventCompassIconDef->enemyCompassIconDirectional;
      Postload_MaterialHandle(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventCompassIconDef = (ScriptableEventCompassIconDef *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varMaterialHandle = v9;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v7 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v5->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v8 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v8;
    varScriptableEventBaseDef = v7;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_18;
  }
}

/*
==============
Postload_ScriptableEventDef
==============
*/
void Postload_ScriptableEventDef(const DBStreamStart streamStart)
{
  ScriptableEventDef *v1; 
  ScriptableEventBaseDef *v3; 
  const char **v4; 
  ScriptableEventDefUnion *v5; 

  v1 = varScriptableEventDef;
  if ( streamStart != (varScriptableEventDef != (ScriptableEventDef *)g_streamPosGlob.pos) )
  {
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventDef, 0xB0ui64);
    v1 = varScriptableEventDef;
  }
  if ( streamStart != NotAtStart )
  {
    DB_IncStreamPos(0xB0ui64);
    v1 = varScriptableEventDef;
  }
  v3 = varScriptableEventBaseDef;
  varScriptableEventBaseDef = &v1->base;
  if ( v1 == (ScriptableEventDef *)g_streamPosGlob.pos )
  {
    DB_PatchMem_ValidatePostloadStream(NotAtStart, v1, 0x10ui64);
    v1 = (ScriptableEventDef *)varScriptableEventBaseDef;
  }
  v4 = varXString;
  varXString = &v1->base.name;
  Postload_XString(NotAtStart);
  varXString = v4;
  v5 = varScriptableEventDefUnion;
  varScriptableEventDefUnion = &varScriptableEventDef->data;
  varScriptableEventBaseDef = v3;
  Postload_ScriptableEventDefUnion(NotAtStart);
  varScriptableEventDefUnion = v5;
}

/*
==============
Postload_ScriptableEventDefArray
==============
*/
void Postload_ScriptableEventDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventDef, 176 * count);
  for ( i = varScriptableEventDef; v2; --v2 )
  {
    varScriptableEventDef = i;
    Postload_ScriptableEventDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventDefStream
==============
*/
void Postload_ScriptableEventDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ScriptableEventDef *v5; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  ScriptableEventDefUnion *v8; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 41694, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varScriptableEventDef;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0xB0ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0xB0ui64);
      v5 = varScriptableEventDef;
      v6 = varScriptableEventBaseDef;
      g_streamPosGlob.pos += 176;
      varScriptableEventBaseDef = &varScriptableEventDef->base;
      if ( varScriptableEventDef == (ScriptableEventDef *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, varScriptableEventDef, 0x10ui64);
        v5 = (ScriptableEventDef *)varScriptableEventBaseDef;
      }
      v7 = varXString;
      varXString = &v5->base.name;
      Postload_XString(NotAtStart);
      varXString = v7;
      v8 = varScriptableEventDefUnion;
      varScriptableEventDefUnion = &varScriptableEventDef->data;
      varScriptableEventBaseDef = v6;
      Postload_ScriptableEventDefUnion(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varScriptableEventDefUnion = v8;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ScriptableEventDefUnion
==============
*/
void Postload_ScriptableEventDefUnion(const DBStreamStart streamStart)
{
  Scriptable_EventType type; 
  ScriptableEventStateChangeDef *v2; 
  ScriptableEventWaitDef *v3; 
  ScriptableEventRandomDef *v4; 
  ScriptableEventScriptDef *v5; 
  ScriptableEventModelDef *v6; 
  ScriptableEventCollisionDef *v7; 
  ScriptableEventAnimationDef *v8; 
  ScriptableEventHideShowBoneDef *v9; 
  ScriptableEventDisablePhysicsSubShapeDef *v10; 
  ScriptableEventNoteTrackDef *v11; 
  ScriptableEventChunkDynentDef *v12; 
  ScriptableEventSpawnDynentDef *v13; 
  ScriptableEventPFXDef *v14; 
  ScriptableEventSoundDef *v15; 
  ScriptableEventExplosionDef *v16; 
  ScriptableEventLightDef *v17; 
  ScriptableEventSunDef *v18; 
  ScriptableEventRumbleDef *v19; 
  ScriptableEventScreenshakeDef *v20; 
  ScriptableEventPartDamageDef *v21; 
  ScriptableEventSetMayhemDef *v22; 
  ScriptableEventPlayMayhemDef *v23; 
  ScriptableEventViewmodelShaderParamDef *v24; 
  ScriptableEventViewmodelChangeImageDef *v25; 
  ScriptableEventClientViewSelectorDef *v26; 
  ScriptableEventTeamSelectorDef *v27; 
  ScriptableEventAddModelDef *v28; 
  ScriptableEventApplyForceDef *v29; 
  ScriptableEventApplyAngularForceDef *v30; 
  ScriptableEventApplyConstantForceDef *v31; 
  ScriptableEventApplyConstantAngularForceDef *v32; 
  ScriptableEventCompassIconDef *v33; 
  ScriptableEventMaterialOverrideDef *v34; 
  ScriptableEventDynamicBoneNoiseCurveDef *v35; 
  ScriptableEventMoveDef *v36; 
  ScriptableEventFootstepDef *v37; 
  ScriptableEventGravityArcDef *v38; 
  ScriptableEventViewTriggerDef *v39; 
  ScriptableEventObjectiveDef *v40; 
  ScriptableEventSpatialDisableDef *v41; 
  ScriptableEventHoverDef *v42; 
  ScriptableEventVehicleBlowUpTireDef *v43; 
  ScriptableEventDlc1Def *v44; 
  ScriptableEventScriptDamageDef *v45; 

  type = varScriptableEventDef->type;
  if ( type )
  {
    switch ( type )
    {
      case Scriptable_EventType_Wait:
        v3 = varScriptableEventWaitDef;
        varScriptableEventWaitDef = (ScriptableEventWaitDef *)varScriptableEventDefUnion;
        Postload_ScriptableEventWaitDef(streamStart);
        varScriptableEventWaitDef = v3;
        break;
      case Scriptable_EventType_Random:
        v4 = varScriptableEventRandomDef;
        varScriptableEventRandomDef = (ScriptableEventRandomDef *)varScriptableEventDefUnion;
        Postload_ScriptableEventRandomDef(streamStart);
        varScriptableEventRandomDef = v4;
        break;
      case Scriptable_EventType_Script:
        v5 = varScriptableEventScriptDef;
        varScriptableEventScriptDef = (ScriptableEventScriptDef *)varScriptableEventDefUnion;
        Postload_ScriptableEventScriptDef(streamStart);
        varScriptableEventScriptDef = v5;
        break;
      case Scriptable_EventType_Model:
        v6 = varScriptableEventModelDef;
        varScriptableEventModelDef = (ScriptableEventModelDef *)varScriptableEventDefUnion;
        Postload_ScriptableEventModelDef(streamStart);
        varScriptableEventModelDef = v6;
        break;
      case Scriptable_EventType_Collision:
        v7 = varScriptableEventCollisionDef;
        varScriptableEventCollisionDef = (ScriptableEventCollisionDef *)varScriptableEventDefUnion;
        Postload_ScriptableEventCollisionDef(streamStart);
        varScriptableEventCollisionDef = v7;
        break;
      case Scriptable_EventType_Animation:
        v8 = varScriptableEventAnimationDef;
        varScriptableEventAnimationDef = (ScriptableEventAnimationDef *)varScriptableEventDefUnion;
        Postload_ScriptableEventAnimationDef(streamStart);
        varScriptableEventAnimationDef = v8;
        break;
      case Scriptable_EventType_HideShowBone:
        v9 = varScriptableEventHideShowBoneDef;
        varScriptableEventHideShowBoneDef = (ScriptableEventHideShowBoneDef *)varScriptableEventDefUnion;
        Postload_ScriptableEventHideShowBoneDef(streamStart);
        varScriptableEventHideShowBoneDef = v9;
        break;
      case Scriptable_EventType_DisablePhysicsSubShape:
        v10 = varScriptableEventDisablePhysicsSubShapeDef;
        varScriptableEventDisablePhysicsSubShapeDef = (ScriptableEventDisablePhysicsSubShapeDef *)varScriptableEventDefUnion;
        Postload_ScriptableEventDisablePhysicsSubShapeDef(streamStart);
        varScriptableEventDisablePhysicsSubShapeDef = v10;
        break;
      case Scriptable_EventType_NoteTrack:
        v11 = varScriptableEventNoteTrackDef;
        varScriptableEventNoteTrackDef = (ScriptableEventNoteTrackDef *)varScriptableEventDefUnion;
        Postload_ScriptableEventNoteTrackDef(streamStart);
        varScriptableEventNoteTrackDef = v11;
        break;
      case Scriptable_EventType_ChunkDynent:
        v12 = varScriptableEventChunkDynentDef;
        varScriptableEventChunkDynentDef = (ScriptableEventChunkDynentDef *)varScriptableEventDefUnion;
        Postload_ScriptableEventChunkDynentDef(streamStart);
        varScriptableEventChunkDynentDef = v12;
        break;
      case Scriptable_EventType_SpawnDynent:
        v13 = varScriptableEventSpawnDynentDef;
        varScriptableEventSpawnDynentDef = (ScriptableEventSpawnDynentDef *)varScriptableEventDefUnion;
        Postload_ScriptableEventSpawnDynentDef(streamStart);
        varScriptableEventSpawnDynentDef = v13;
        break;
      case Scriptable_EventType_PFX:
        v14 = varScriptableEventPFXDef;
        varScriptableEventPFXDef = (ScriptableEventPFXDef *)varScriptableEventDefUnion;
        Postload_ScriptableEventPFXDef(streamStart);
        varScriptableEventPFXDef = v14;
        break;
      case Scriptable_EventType_Sound:
        v15 = varScriptableEventSoundDef;
        varScriptableEventSoundDef = (ScriptableEventSoundDef *)varScriptableEventDefUnion;
        Postload_ScriptableEventSoundDef(streamStart);
        varScriptableEventSoundDef = v15;
        break;
      case Scriptable_EventType_Explosion:
        v16 = varScriptableEventExplosionDef;
        varScriptableEventExplosionDef = (ScriptableEventExplosionDef *)varScriptableEventDefUnion;
        Postload_ScriptableEventExplosionDef(streamStart);
        varScriptableEventExplosionDef = v16;
        break;
      case Scriptable_EventType_Light:
        v17 = varScriptableEventLightDef;
        varScriptableEventLightDef = (ScriptableEventLightDef *)varScriptableEventDefUnion;
        Postload_ScriptableEventLightDef(streamStart);
        varScriptableEventLightDef = v17;
        break;
      case Scriptable_EventType_Sun:
        v18 = varScriptableEventSunDef;
        varScriptableEventSunDef = (ScriptableEventSunDef *)varScriptableEventDefUnion;
        Postload_ScriptableEventSunDef(streamStart);
        varScriptableEventSunDef = v18;
        break;
      case Scriptable_EventType_Rumble:
        v19 = varScriptableEventRumbleDef;
        varScriptableEventRumbleDef = (ScriptableEventRumbleDef *)varScriptableEventDefUnion;
        Postload_ScriptableEventRumbleDef(streamStart);
        varScriptableEventRumbleDef = v19;
        break;
      case Scriptable_EventType_Screenshake:
        v20 = varScriptableEventScreenshakeDef;
        varScriptableEventScreenshakeDef = (ScriptableEventScreenshakeDef *)varScriptableEventDefUnion;
        Postload_ScriptableEventScreenshakeDef(streamStart);
        varScriptableEventScreenshakeDef = v20;
        break;
      case Scriptable_EventType_PartDamage:
        v21 = varScriptableEventPartDamageDef;
        varScriptableEventPartDamageDef = (ScriptableEventPartDamageDef *)varScriptableEventDefUnion;
        Postload_ScriptableEventPartDamageDef(streamStart);
        varScriptableEventPartDamageDef = v21;
        break;
      case Scriptable_EventType_SetMayhem:
        v22 = varScriptableEventSetMayhemDef;
        varScriptableEventSetMayhemDef = (ScriptableEventSetMayhemDef *)varScriptableEventDefUnion;
        Postload_ScriptableEventSetMayhemDef(streamStart);
        varScriptableEventSetMayhemDef = v22;
        break;
      case Scriptable_EventType_PlayMayhem:
        v23 = varScriptableEventPlayMayhemDef;
        varScriptableEventPlayMayhemDef = (ScriptableEventPlayMayhemDef *)varScriptableEventDefUnion;
        Postload_ScriptableEventPlayMayhemDef(streamStart);
        varScriptableEventPlayMayhemDef = v23;
        break;
      case Scriptable_EventType_ViewmodelShaderParam:
        v24 = varScriptableEventViewmodelShaderParamDef;
        varScriptableEventViewmodelShaderParamDef = (ScriptableEventViewmodelShaderParamDef *)varScriptableEventDefUnion;
        Postload_ScriptableEventViewmodelShaderParamDef(streamStart);
        varScriptableEventViewmodelShaderParamDef = v24;
        break;
      case Scriptable_EventType_ViewmodelChangeImage:
        v25 = varScriptableEventViewmodelChangeImageDef;
        varScriptableEventViewmodelChangeImageDef = (ScriptableEventViewmodelChangeImageDef *)varScriptableEventDefUnion;
        Postload_ScriptableEventViewmodelChangeImageDef(streamStart);
        varScriptableEventViewmodelChangeImageDef = v25;
        break;
      case Scriptable_EventType_ClientViewSelector:
        v26 = varScriptableEventClientViewSelectorDef;
        varScriptableEventClientViewSelectorDef = (ScriptableEventClientViewSelectorDef *)varScriptableEventDefUnion;
        Postload_ScriptableEventClientViewSelectorDef(streamStart);
        varScriptableEventClientViewSelectorDef = v26;
        break;
      case Scriptable_EventType_TeamSelector:
        v27 = varScriptableEventTeamSelectorDef;
        varScriptableEventTeamSelectorDef = (ScriptableEventTeamSelectorDef *)varScriptableEventDefUnion;
        Postload_ScriptableEventTeamSelectorDef(streamStart);
        varScriptableEventTeamSelectorDef = v27;
        break;
      case Scriptable_EventType_AddModel:
        v28 = varScriptableEventAddModelDef;
        varScriptableEventAddModelDef = (ScriptableEventAddModelDef *)varScriptableEventDefUnion;
        Postload_ScriptableEventAddModelDef(streamStart);
        varScriptableEventAddModelDef = v28;
        break;
      case Scriptable_EventType_ApplyForce:
        v29 = varScriptableEventApplyForceDef;
        varScriptableEventApplyForceDef = (ScriptableEventApplyForceDef *)varScriptableEventDefUnion;
        Postload_ScriptableEventApplyForceDef(streamStart);
        varScriptableEventApplyForceDef = v29;
        break;
      case Scriptable_EventType_ApplyAngularForce:
        v30 = varScriptableEventApplyAngularForceDef;
        varScriptableEventApplyAngularForceDef = (ScriptableEventApplyAngularForceDef *)varScriptableEventDefUnion;
        Postload_ScriptableEventApplyAngularForceDef(streamStart);
        varScriptableEventApplyAngularForceDef = v30;
        break;
      case Scriptable_EventType_ApplyConstantForce:
        v31 = varScriptableEventApplyConstantForceDef;
        varScriptableEventApplyConstantForceDef = (ScriptableEventApplyConstantForceDef *)varScriptableEventDefUnion;
        Postload_ScriptableEventApplyConstantForceDef(streamStart);
        varScriptableEventApplyConstantForceDef = v31;
        break;
      case Scriptable_EventType_ApplyConstantAngularForce:
        v32 = varScriptableEventApplyConstantAngularForceDef;
        varScriptableEventApplyConstantAngularForceDef = (ScriptableEventApplyConstantAngularForceDef *)varScriptableEventDefUnion;
        Postload_ScriptableEventApplyConstantAngularForceDef(streamStart);
        varScriptableEventApplyConstantAngularForceDef = v32;
        break;
      case Scriptable_EventType_CompassIcon:
        v33 = varScriptableEventCompassIconDef;
        varScriptableEventCompassIconDef = (ScriptableEventCompassIconDef *)varScriptableEventDefUnion;
        Postload_ScriptableEventCompassIconDef(streamStart);
        varScriptableEventCompassIconDef = v33;
        break;
      case Scriptable_EventType_MaterialOverride:
        v34 = varScriptableEventMaterialOverrideDef;
        varScriptableEventMaterialOverrideDef = (ScriptableEventMaterialOverrideDef *)varScriptableEventDefUnion;
        Postload_ScriptableEventMaterialOverrideDef(streamStart);
        varScriptableEventMaterialOverrideDef = v34;
        break;
      case Scriptable_EventType_DynamicBoneNoiseCurve:
        v35 = varScriptableEventDynamicBoneNoiseCurveDef;
        varScriptableEventDynamicBoneNoiseCurveDef = (ScriptableEventDynamicBoneNoiseCurveDef *)varScriptableEventDefUnion;
        Postload_ScriptableEventDynamicBoneNoiseCurveDef(streamStart);
        varScriptableEventDynamicBoneNoiseCurveDef = v35;
        break;
      case Scriptable_EventType_Move:
        v36 = varScriptableEventMoveDef;
        varScriptableEventMoveDef = (ScriptableEventMoveDef *)varScriptableEventDefUnion;
        Postload_ScriptableEventMoveDef(streamStart);
        varScriptableEventMoveDef = v36;
        break;
      case Scriptable_EventType_Footstep:
        v37 = varScriptableEventFootstepDef;
        varScriptableEventFootstepDef = (ScriptableEventFootstepDef *)varScriptableEventDefUnion;
        Postload_ScriptableEventFootstepDef(streamStart);
        varScriptableEventFootstepDef = v37;
        break;
      case Scriptable_EventType_GravityArc:
        v38 = varScriptableEventGravityArcDef;
        varScriptableEventGravityArcDef = (ScriptableEventGravityArcDef *)varScriptableEventDefUnion;
        Postload_ScriptableEventGravityArcDef(streamStart);
        varScriptableEventGravityArcDef = v38;
        break;
      case Scriptable_EventType_ViewTrigger:
        v39 = varScriptableEventViewTriggerDef;
        varScriptableEventViewTriggerDef = (ScriptableEventViewTriggerDef *)varScriptableEventDefUnion;
        Postload_ScriptableEventViewTriggerDef(streamStart);
        varScriptableEventViewTriggerDef = v39;
        break;
      case Scriptable_EventType_Objective:
        v40 = varScriptableEventObjectiveDef;
        varScriptableEventObjectiveDef = (ScriptableEventObjectiveDef *)varScriptableEventDefUnion;
        Postload_ScriptableEventObjectiveDef(streamStart);
        varScriptableEventObjectiveDef = v40;
        break;
      case Scriptable_EventType_SpatialDisable:
        v41 = varScriptableEventSpatialDisableDef;
        varScriptableEventSpatialDisableDef = (ScriptableEventSpatialDisableDef *)varScriptableEventDefUnion;
        Postload_ScriptableEventSpatialDisableDef(streamStart);
        varScriptableEventSpatialDisableDef = v41;
        break;
      case Scriptable_EventType_Hover:
        v42 = varScriptableEventHoverDef;
        varScriptableEventHoverDef = (ScriptableEventHoverDef *)varScriptableEventDefUnion;
        Postload_ScriptableEventHoverDef(streamStart);
        varScriptableEventHoverDef = v42;
        break;
      case Scriptable_EventType_VehicleBlowUpTire:
        v43 = varScriptableEventVehicleBlowUpTireDef;
        varScriptableEventVehicleBlowUpTireDef = (ScriptableEventVehicleBlowUpTireDef *)varScriptableEventDefUnion;
        Postload_ScriptableEventVehicleBlowUpTireDef(streamStart);
        varScriptableEventVehicleBlowUpTireDef = v43;
        break;
      case Scriptable_EventType_Dlc1:
        v44 = varScriptableEventDlc1Def;
        varScriptableEventDlc1Def = (ScriptableEventDlc1Def *)varScriptableEventDefUnion;
        Postload_ScriptableEventDlc1Def(streamStart);
        varScriptableEventDlc1Def = v44;
        break;
      case Scriptable_EventType_ScriptDamage:
        v45 = varScriptableEventScriptDamageDef;
        varScriptableEventScriptDamageDef = (ScriptableEventScriptDamageDef *)varScriptableEventDefUnion;
        Postload_ScriptableEventScriptDamageDef(streamStart);
        varScriptableEventScriptDamageDef = v45;
        break;
    }
  }
  else
  {
    v2 = varScriptableEventStateChangeDef;
    varScriptableEventStateChangeDef = (ScriptableEventStateChangeDef *)varScriptableEventDefUnion;
    Postload_ScriptableEventStateChangeDef(streamStart);
    varScriptableEventStateChangeDef = v2;
  }
}

/*
==============
Postload_ScriptableEventDefUnionArray
==============
*/
void Postload_ScriptableEventDefUnionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventDefUnion *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventDefUnion, 152 * count);
  for ( i = varScriptableEventDefUnion; v2; --v2 )
  {
    varScriptableEventDefUnion = i;
    Postload_ScriptableEventDefUnion(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventDefUnionStream
==============
*/
void Postload_ScriptableEventDefUnionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 41572, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  for ( ; count; --count )
  {
    Postload_ScriptableEventDefUnion(AtStart);
    varScriptableEventDefUnion = (ScriptableEventDefUnion *)g_streamPosGlob.pos;
  }
}

/*
==============
Postload_ScriptableEventDisablePhysicsSubShapeDef
==============
*/
void Postload_ScriptableEventDisablePhysicsSubShapeDef(const DBStreamStart streamStart)
{
  ScriptableEventDisablePhysicsSubShapeDef *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 
  const char **v6; 

  if ( streamStart != (varScriptableEventDisablePhysicsSubShapeDef != (ScriptableEventDisablePhysicsSubShapeDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventDisablePhysicsSubShapeDef, 0x20ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x20ui64);
  v2 = varScriptableEventDisablePhysicsSubShapeDef;
  base = varScriptableEventDisablePhysicsSubShapeDef->base;
  if ( varScriptableEventDisablePhysicsSubShapeDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventDisablePhysicsSubShapeDef->base);
      goto LABEL_12;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varScriptableEventBaseDef = v4;
    varXString = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_12:
  v6 = varXString;
  varXString = &varScriptableEventDisablePhysicsSubShapeDef->mutableShapeName;
  Postload_XString(NotAtStart);
  varXString = v6;
}

/*
==============
Postload_ScriptableEventDisablePhysicsSubShapeDefArray
==============
*/
void Postload_ScriptableEventDisablePhysicsSubShapeDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventDisablePhysicsSubShapeDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventDisablePhysicsSubShapeDef, 32 * count);
  for ( i = varScriptableEventDisablePhysicsSubShapeDef; v2; --v2 )
  {
    varScriptableEventDisablePhysicsSubShapeDef = i;
    Postload_ScriptableEventDisablePhysicsSubShapeDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventDisablePhysicsSubShapeDefStream
==============
*/
void Postload_ScriptableEventDisablePhysicsSubShapeDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ScriptableEventDisablePhysicsSubShapeDef *v5; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v7; 
  const char **v8; 
  const char **v9; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 30434, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varScriptableEventDisablePhysicsSubShapeDef;
    pos = g_streamPosGlob.pos;
    while ( 1 )
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x20ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x20ui64);
      g_streamPosGlob.pos += 32;
      v5 = varScriptableEventDisablePhysicsSubShapeDef;
      base = varScriptableEventDisablePhysicsSubShapeDef->base;
      if ( !varScriptableEventDisablePhysicsSubShapeDef->base )
        goto LABEL_18;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        break;
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_16;
      v5->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventDisablePhysicsSubShapeDef->base);
LABEL_18:
      v9 = varXString;
      varXString = &varScriptableEventDisablePhysicsSubShapeDef->mutableShapeName;
      Postload_XString(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventDisablePhysicsSubShapeDef = (ScriptableEventDisablePhysicsSubShapeDef *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varXString = v9;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v7 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v5->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v8 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v8;
    varScriptableEventBaseDef = v7;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_18;
  }
}

/*
==============
Postload_ScriptableEventDlc1Def
==============
*/
void Postload_ScriptableEventDlc1Def(const DBStreamStart streamStart)
{
  ScriptableEventDlc1Def *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 

  if ( streamStart != (varScriptableEventDlc1Def != (ScriptableEventDlc1Def *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventDlc1Def, 0x18ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x18ui64);
  v2 = varScriptableEventDlc1Def;
  base = varScriptableEventDlc1Def->base;
  if ( varScriptableEventDlc1Def->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventDlc1Def->base);
      return;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varScriptableEventBaseDef = v4;
    varXString = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Postload_ScriptableEventDlc1DefArray
==============
*/
void Postload_ScriptableEventDlc1DefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventDlc1Def *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventDlc1Def, 24 * count);
  for ( i = varScriptableEventDlc1Def; v2; --v2 )
  {
    varScriptableEventDlc1Def = i;
    Postload_ScriptableEventDlc1Def(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventDlc1DefStream
==============
*/
void Postload_ScriptableEventDlc1DefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventDlc1Def *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 40108, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventDlc1Def;
    while ( 1 )
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x18ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x18ui64);
      g_streamPosGlob.pos += 24;
      v4 = varScriptableEventDlc1Def;
      base = varScriptableEventDlc1Def->base;
      if ( !varScriptableEventDlc1Def->base )
        goto LABEL_18;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        break;
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_16;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventDlc1Def->base);
LABEL_18:
      pos = g_streamPosGlob.pos;
      varScriptableEventDlc1Def = (ScriptableEventDlc1Def *)g_streamPosGlob.pos;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v6 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v7 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v7;
    varScriptableEventBaseDef = v6;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_18;
  }
}

/*
==============
Postload_ScriptableEventDynamicBoneNoiseCurveDef
==============
*/
void Postload_ScriptableEventDynamicBoneNoiseCurveDef(const DBStreamStart streamStart)
{
  ScriptableEventDynamicBoneNoiseCurveDef *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 
  XAnimCurve **v6; 

  if ( streamStart != (varScriptableEventDynamicBoneNoiseCurveDef != (ScriptableEventDynamicBoneNoiseCurveDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventDynamicBoneNoiseCurveDef, 0x28ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x28ui64);
  v2 = varScriptableEventDynamicBoneNoiseCurveDef;
  base = varScriptableEventDynamicBoneNoiseCurveDef->base;
  if ( varScriptableEventDynamicBoneNoiseCurveDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventDynamicBoneNoiseCurveDef->base);
      goto LABEL_12;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varScriptableEventBaseDef = v4;
    varXString = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_12:
  v6 = varXAnimCurvePtr;
  varXAnimCurvePtr = &varScriptableEventDynamicBoneNoiseCurveDef->curve;
  Postload_XAnimCurvePtr(NotAtStart);
  varXAnimCurvePtr = v6;
}

/*
==============
Postload_ScriptableEventDynamicBoneNoiseCurveDefArray
==============
*/
void Postload_ScriptableEventDynamicBoneNoiseCurveDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventDynamicBoneNoiseCurveDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventDynamicBoneNoiseCurveDef, 40 * count);
  for ( i = varScriptableEventDynamicBoneNoiseCurveDef; v2; --v2 )
  {
    varScriptableEventDynamicBoneNoiseCurveDef = i;
    Postload_ScriptableEventDynamicBoneNoiseCurveDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventDynamicBoneNoiseCurveDefStream
==============
*/
void Postload_ScriptableEventDynamicBoneNoiseCurveDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ScriptableEventDynamicBoneNoiseCurveDef *v5; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v7; 
  const char **v8; 
  XAnimCurve **v9; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 33356, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varScriptableEventDynamicBoneNoiseCurveDef;
    pos = g_streamPosGlob.pos;
    while ( 1 )
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x28ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x28ui64);
      g_streamPosGlob.pos += 40;
      v5 = varScriptableEventDynamicBoneNoiseCurveDef;
      base = varScriptableEventDynamicBoneNoiseCurveDef->base;
      if ( !varScriptableEventDynamicBoneNoiseCurveDef->base )
        goto LABEL_18;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        break;
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_16;
      v5->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventDynamicBoneNoiseCurveDef->base);
LABEL_18:
      v9 = varXAnimCurvePtr;
      varXAnimCurvePtr = &varScriptableEventDynamicBoneNoiseCurveDef->curve;
      Postload_XAnimCurvePtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventDynamicBoneNoiseCurveDef = (ScriptableEventDynamicBoneNoiseCurveDef *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varXAnimCurvePtr = v9;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v7 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v5->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v8 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v8;
    varScriptableEventBaseDef = v7;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_18;
  }
}

/*
==============
Postload_ScriptableEventExplosionDef
==============
*/
void Postload_ScriptableEventExplosionDef(const DBStreamStart streamStart)
{
  ScriptableEventExplosionDef *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 
  const char **v6; 
  scr_string_t *v7; 
  WeaponCompleteDef **v8; 

  if ( streamStart != (varScriptableEventExplosionDef != (ScriptableEventExplosionDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventExplosionDef, 0x30ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x30ui64);
  v2 = varScriptableEventExplosionDef;
  base = varScriptableEventExplosionDef->base;
  if ( varScriptableEventExplosionDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventExplosionDef->base);
      goto LABEL_12;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varScriptableEventBaseDef = v4;
    varXString = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_12:
  v6 = varXString;
  varXString = &varScriptableEventExplosionDef->tagName;
  Postload_XString(NotAtStart);
  varXString = v6;
  v7 = varscr_string_t;
  varscr_string_t = &varScriptableEventExplosionDef->scrTagName;
  Postload_scr_string_t(NotAtStart);
  varscr_string_t = v7;
  v8 = varWeaponCompleteDefPtr;
  varWeaponCompleteDefPtr = &varScriptableEventExplosionDef->weapon;
  Postload_WeaponCompleteDefPtr(NotAtStart);
  varWeaponCompleteDefPtr = v8;
}

/*
==============
Postload_ScriptableEventExplosionDefArray
==============
*/
void Postload_ScriptableEventExplosionDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventExplosionDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventExplosionDef, 48 * count);
  for ( i = varScriptableEventExplosionDef; v2; --v2 )
  {
    varScriptableEventExplosionDef = i;
    Postload_ScriptableEventExplosionDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventExplosionDefStream
==============
*/
void Postload_ScriptableEventExplosionDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ScriptableEventExplosionDef *v5; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v7; 
  const char **v8; 
  const char **v9; 
  scr_string_t *v10; 
  WeaponCompleteDef **v11; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 33673, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varScriptableEventExplosionDef;
    pos = g_streamPosGlob.pos;
    while ( 1 )
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x30ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x30ui64);
      g_streamPosGlob.pos += 48;
      v5 = varScriptableEventExplosionDef;
      base = varScriptableEventExplosionDef->base;
      if ( !varScriptableEventExplosionDef->base )
        goto LABEL_18;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        break;
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_16;
      v5->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventExplosionDef->base);
LABEL_18:
      v9 = varXString;
      varXString = &varScriptableEventExplosionDef->tagName;
      Postload_XString(NotAtStart);
      varXString = v9;
      v10 = varscr_string_t;
      varscr_string_t = &varScriptableEventExplosionDef->scrTagName;
      Postload_scr_string_t(NotAtStart);
      varscr_string_t = v10;
      v11 = varWeaponCompleteDefPtr;
      varWeaponCompleteDefPtr = &varScriptableEventExplosionDef->weapon;
      Postload_WeaponCompleteDefPtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventExplosionDef = (ScriptableEventExplosionDef *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varWeaponCompleteDefPtr = v11;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v7 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v5->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v8 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v8;
    varScriptableEventBaseDef = v7;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_18;
  }
}

/*
==============
Postload_ScriptableEventFootstepDef
==============
*/
void Postload_ScriptableEventFootstepDef(const DBStreamStart streamStart)
{
  ScriptableEventFootstepDef *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 
  const char **v6; 
  scr_string_t *v7; 
  const char **v8; 
  FootstepVFX **v9; 

  if ( streamStart != (varScriptableEventFootstepDef != (ScriptableEventFootstepDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventFootstepDef, 0x38ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x38ui64);
  v2 = varScriptableEventFootstepDef;
  base = varScriptableEventFootstepDef->base;
  if ( varScriptableEventFootstepDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventFootstepDef->base);
      goto LABEL_12;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varScriptableEventBaseDef = v4;
    varXString = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_12:
  v6 = varXString;
  varXString = &varScriptableEventFootstepDef->tagName;
  Postload_XString(NotAtStart);
  varXString = v6;
  v7 = varscr_string_t;
  varscr_string_t = &varScriptableEventFootstepDef->scrTagName;
  Postload_scr_string_t(NotAtStart);
  varscr_string_t = v7;
  v8 = varXString;
  varXString = &varScriptableEventFootstepDef->soundAlias;
  Postload_XString(NotAtStart);
  varXString = v8;
  v9 = varFootstepVFXPtr;
  varFootstepVFXPtr = &varScriptableEventFootstepDef->rightFootstepVFX;
  Postload_FootstepVFXPtr(NotAtStart);
  varFootstepVFXPtr = &varScriptableEventFootstepDef->leftFootstepVFX;
  Postload_FootstepVFXPtr(NotAtStart);
  varFootstepVFXPtr = v9;
}

/*
==============
Postload_ScriptableEventFootstepDefArray
==============
*/
void Postload_ScriptableEventFootstepDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventFootstepDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventFootstepDef, 56 * count);
  for ( i = varScriptableEventFootstepDef; v2; --v2 )
  {
    varScriptableEventFootstepDef = i;
    Postload_ScriptableEventFootstepDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventFootstepDefStream
==============
*/
void Postload_ScriptableEventFootstepDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ScriptableEventFootstepDef *v5; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v7; 
  const char **v8; 
  const char **v9; 
  scr_string_t *v10; 
  const char **v11; 
  FootstepVFX **v12; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 39032, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varScriptableEventFootstepDef;
    pos = g_streamPosGlob.pos;
    while ( 1 )
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x38ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x38ui64);
      g_streamPosGlob.pos += 56;
      v5 = varScriptableEventFootstepDef;
      base = varScriptableEventFootstepDef->base;
      if ( !varScriptableEventFootstepDef->base )
        goto LABEL_18;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        break;
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_16;
      v5->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventFootstepDef->base);
LABEL_18:
      v9 = varXString;
      varXString = &varScriptableEventFootstepDef->tagName;
      Postload_XString(NotAtStart);
      varXString = v9;
      v10 = varscr_string_t;
      varscr_string_t = &varScriptableEventFootstepDef->scrTagName;
      Postload_scr_string_t(NotAtStart);
      varscr_string_t = v10;
      v11 = varXString;
      varXString = &varScriptableEventFootstepDef->soundAlias;
      Postload_XString(NotAtStart);
      varXString = v11;
      v12 = varFootstepVFXPtr;
      varFootstepVFXPtr = &varScriptableEventFootstepDef->rightFootstepVFX;
      Postload_FootstepVFXPtr(NotAtStart);
      varFootstepVFXPtr = &varScriptableEventFootstepDef->leftFootstepVFX;
      Postload_FootstepVFXPtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventFootstepDef = (ScriptableEventFootstepDef *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varFootstepVFXPtr = v12;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v7 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v5->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v8 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v8;
    varScriptableEventBaseDef = v7;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_18;
  }
}

/*
==============
Postload_ScriptableEventGravityArcDef
==============
*/
void Postload_ScriptableEventGravityArcDef(const DBStreamStart streamStart)
{
  ScriptableEventGravityArcDef *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 
  ScriptableEventGravityArcDef *v6; 
  ScriptableEventDef *eventsAtEnd; 
  ScriptableEventDef *v8; 

  if ( streamStart != (varScriptableEventGravityArcDef != (ScriptableEventGravityArcDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventGravityArcDef, 0x38ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x38ui64);
  v2 = varScriptableEventGravityArcDef;
  base = varScriptableEventGravityArcDef->base;
  if ( varScriptableEventGravityArcDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventGravityArcDef->base);
      goto LABEL_12;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v5;
    varScriptableEventBaseDef = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_12:
  v6 = varScriptableEventGravityArcDef;
  eventsAtEnd = varScriptableEventGravityArcDef->eventsAtEnd;
  if ( !eventsAtEnd )
    return;
  if ( eventsAtEnd == (ScriptableEventDef *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( eventsAtEnd != (ScriptableEventDef *)-2i64 )
  {
    v6->eventsAtEnd = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventGravityArcDef->eventsAtEnd);
    return;
  }
  v8 = varScriptableEventDef;
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  v6->eventsAtEnd = (ScriptableEventDef *)g_streamPosGlob.pos;
  varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
  Postload_ScriptableEventDefArray(AtStart, varScriptableEventGravityArcDef->eventAtEndCount);
  varScriptableEventDef = v8;
  if ( eventsAtEnd == (ScriptableEventDef *)-1i64 )
    DB_PopSharedData();
}

/*
==============
Postload_ScriptableEventGravityArcDefArray
==============
*/
void Postload_ScriptableEventGravityArcDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventGravityArcDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventGravityArcDef, 56 * count);
  for ( i = varScriptableEventGravityArcDef; v2; --v2 )
  {
    varScriptableEventGravityArcDef = i;
    Postload_ScriptableEventGravityArcDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventGravityArcDefStream
==============
*/
void Postload_ScriptableEventGravityArcDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventGravityArcDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  ScriptableEventGravityArcDef *v8; 
  ScriptableEventDef *eventsAtEnd; 
  ScriptableEventDef *v10; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 38736, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventGravityArcDef;
    do
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x38ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x38ui64);
      g_streamPosGlob.pos += 56;
      v4 = varScriptableEventGravityArcDef;
      base = varScriptableEventGravityArcDef->base;
      if ( varScriptableEventGravityArcDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
        }
        else if ( base != (ScriptableEventBaseDef *)-2i64 )
        {
          v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventGravityArcDef->base);
          goto LABEL_18;
        }
        v6 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        DB_IncStreamPos(0x10ui64);
        v7 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Postload_XString(NotAtStart);
        varXString = v7;
        varScriptableEventBaseDef = v6;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
      }
LABEL_18:
      v8 = varScriptableEventGravityArcDef;
      eventsAtEnd = varScriptableEventGravityArcDef->eventsAtEnd;
      if ( eventsAtEnd )
      {
        if ( eventsAtEnd == (ScriptableEventDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_23:
          v10 = varScriptableEventDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v8->eventsAtEnd = (ScriptableEventDef *)g_streamPosGlob.pos;
          varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
          Postload_ScriptableEventDefArray(AtStart, varScriptableEventGravityArcDef->eventAtEndCount);
          varScriptableEventDef = v10;
          if ( eventsAtEnd == (ScriptableEventDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_25;
        }
        if ( eventsAtEnd == (ScriptableEventDef *)-2i64 )
          goto LABEL_23;
        v8->eventsAtEnd = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventGravityArcDef->eventsAtEnd);
      }
LABEL_25:
      pos = g_streamPosGlob.pos;
      varScriptableEventGravityArcDef = (ScriptableEventGravityArcDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ScriptableEventHideShowBoneDef
==============
*/
void Postload_ScriptableEventHideShowBoneDef(const DBStreamStart streamStart)
{
  ScriptableEventHideShowBoneDef *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 
  const char **v6; 
  scr_string_t *v7; 

  if ( streamStart != (varScriptableEventHideShowBoneDef != (ScriptableEventHideShowBoneDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventHideShowBoneDef, 0x18ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x18ui64);
  v2 = varScriptableEventHideShowBoneDef;
  base = varScriptableEventHideShowBoneDef->base;
  if ( varScriptableEventHideShowBoneDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventHideShowBoneDef->base);
      goto LABEL_12;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varScriptableEventBaseDef = v4;
    varXString = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_12:
  v6 = varXString;
  varXString = &varScriptableEventHideShowBoneDef->tagName;
  Postload_XString(NotAtStart);
  varXString = v6;
  v7 = varscr_string_t;
  varscr_string_t = &varScriptableEventHideShowBoneDef->scrTagName;
  Postload_scr_string_t(NotAtStart);
  varscr_string_t = v7;
}

/*
==============
Postload_ScriptableEventHideShowBoneDefArray
==============
*/
void Postload_ScriptableEventHideShowBoneDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventHideShowBoneDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventHideShowBoneDef, 24 * count);
  for ( i = varScriptableEventHideShowBoneDef; v2; --v2 )
  {
    varScriptableEventHideShowBoneDef = i;
    Postload_ScriptableEventHideShowBoneDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventHideShowBoneDefStream
==============
*/
void Postload_ScriptableEventHideShowBoneDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ScriptableEventHideShowBoneDef *v5; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v7; 
  const char **v8; 
  const char **v9; 
  scr_string_t *v10; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 30255, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varScriptableEventHideShowBoneDef;
    pos = g_streamPosGlob.pos;
    while ( 1 )
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x18ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x18ui64);
      g_streamPosGlob.pos += 24;
      v5 = varScriptableEventHideShowBoneDef;
      base = varScriptableEventHideShowBoneDef->base;
      if ( !varScriptableEventHideShowBoneDef->base )
        goto LABEL_18;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        break;
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_16;
      v5->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventHideShowBoneDef->base);
LABEL_18:
      v9 = varXString;
      varXString = &varScriptableEventHideShowBoneDef->tagName;
      Postload_XString(NotAtStart);
      varXString = v9;
      v10 = varscr_string_t;
      varscr_string_t = &varScriptableEventHideShowBoneDef->scrTagName;
      Postload_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventHideShowBoneDef = (ScriptableEventHideShowBoneDef *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varscr_string_t = v10;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v7 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v5->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v8 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v8;
    varScriptableEventBaseDef = v7;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_18;
  }
}

/*
==============
Postload_ScriptableEventHoverDef
==============
*/
void Postload_ScriptableEventHoverDef(const DBStreamStart streamStart)
{
  ScriptableEventHoverDef *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 

  if ( streamStart != (varScriptableEventHoverDef != (ScriptableEventHoverDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventHoverDef, 0x18ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x18ui64);
  v2 = varScriptableEventHoverDef;
  base = varScriptableEventHoverDef->base;
  if ( varScriptableEventHoverDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventHoverDef->base);
      return;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varScriptableEventBaseDef = v4;
    varXString = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Postload_ScriptableEventHoverDefArray
==============
*/
void Postload_ScriptableEventHoverDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventHoverDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventHoverDef, 24 * count);
  for ( i = varScriptableEventHoverDef; v2; --v2 )
  {
    varScriptableEventHoverDef = i;
    Postload_ScriptableEventHoverDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventHoverDefStream
==============
*/
void Postload_ScriptableEventHoverDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventHoverDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 39773, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventHoverDef;
    while ( 1 )
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x18ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x18ui64);
      g_streamPosGlob.pos += 24;
      v4 = varScriptableEventHoverDef;
      base = varScriptableEventHoverDef->base;
      if ( !varScriptableEventHoverDef->base )
        goto LABEL_18;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        break;
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_16;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventHoverDef->base);
LABEL_18:
      pos = g_streamPosGlob.pos;
      varScriptableEventHoverDef = (ScriptableEventHoverDef *)g_streamPosGlob.pos;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v6 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v7 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v7;
    varScriptableEventBaseDef = v6;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_18;
  }
}

/*
==============
Postload_ScriptableEventLightDef
==============
*/
void Postload_ScriptableEventLightDef(const DBStreamStart streamStart)
{
  ScriptableEventLightDef *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 

  if ( streamStart != (varScriptableEventLightDef != (ScriptableEventLightDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventLightDef, 0x40ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x40ui64);
  v2 = varScriptableEventLightDef;
  base = varScriptableEventLightDef->base;
  if ( varScriptableEventLightDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventLightDef->base);
      return;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varScriptableEventBaseDef = v4;
    varXString = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Postload_ScriptableEventLightDefArray
==============
*/
void Postload_ScriptableEventLightDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventLightDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventLightDef, count << 6);
  for ( i = varScriptableEventLightDef; v2; --v2 )
  {
    varScriptableEventLightDef = i;
    Postload_ScriptableEventLightDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventLightDefStream
==============
*/
void Postload_ScriptableEventLightDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventLightDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 34013, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventLightDef;
    while ( 1 )
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x40ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x40ui64);
      g_streamPosGlob.pos += 64;
      v4 = varScriptableEventLightDef;
      base = varScriptableEventLightDef->base;
      if ( !varScriptableEventLightDef->base )
        goto LABEL_18;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        break;
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_16;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventLightDef->base);
LABEL_18:
      pos = g_streamPosGlob.pos;
      varScriptableEventLightDef = (ScriptableEventLightDef *)g_streamPosGlob.pos;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v6 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v7 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v7;
    varScriptableEventBaseDef = v6;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_18;
  }
}

/*
==============
Postload_ScriptableEventMaterialOverrideDef
==============
*/
void Postload_ScriptableEventMaterialOverrideDef(const DBStreamStart streamStart)
{
  ScriptableEventMaterialOverrideDef *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 

  if ( streamStart != (varScriptableEventMaterialOverrideDef != (ScriptableEventMaterialOverrideDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventMaterialOverrideDef, 0x18ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x18ui64);
  v2 = varScriptableEventMaterialOverrideDef;
  base = varScriptableEventMaterialOverrideDef->base;
  if ( varScriptableEventMaterialOverrideDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventMaterialOverrideDef->base);
      return;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varScriptableEventBaseDef = v4;
    varXString = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Postload_ScriptableEventMaterialOverrideDefArray
==============
*/
void Postload_ScriptableEventMaterialOverrideDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventMaterialOverrideDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventMaterialOverrideDef, 24 * count);
  for ( i = varScriptableEventMaterialOverrideDef; v2; --v2 )
  {
    varScriptableEventMaterialOverrideDef = i;
    Postload_ScriptableEventMaterialOverrideDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventMaterialOverrideDefStream
==============
*/
void Postload_ScriptableEventMaterialOverrideDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventMaterialOverrideDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 32265, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventMaterialOverrideDef;
    while ( 1 )
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x18ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x18ui64);
      g_streamPosGlob.pos += 24;
      v4 = varScriptableEventMaterialOverrideDef;
      base = varScriptableEventMaterialOverrideDef->base;
      if ( !varScriptableEventMaterialOverrideDef->base )
        goto LABEL_18;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        break;
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_16;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventMaterialOverrideDef->base);
LABEL_18:
      pos = g_streamPosGlob.pos;
      varScriptableEventMaterialOverrideDef = (ScriptableEventMaterialOverrideDef *)g_streamPosGlob.pos;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v6 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v7 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v7;
    varScriptableEventBaseDef = v6;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_18;
  }
}

/*
==============
Postload_ScriptableEventModelDef
==============
*/
void Postload_ScriptableEventModelDef(const DBStreamStart streamStart)
{
  ScriptableEventModelDef *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 
  ScriptableModelUnion *v6; 

  if ( streamStart != (varScriptableEventModelDef != (ScriptableEventModelDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventModelDef, 0x20ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x20ui64);
  v2 = varScriptableEventModelDef;
  base = varScriptableEventModelDef->base;
  if ( varScriptableEventModelDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventModelDef->base);
      goto LABEL_12;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varScriptableEventBaseDef = v4;
    varXString = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_12:
  v6 = varScriptableModelUnion;
  varScriptableModelUnion = &varScriptableEventModelDef->data;
  Postload_ScriptableModelUnion(NotAtStart);
  varScriptableModelUnion = v6;
}

/*
==============
Postload_ScriptableEventModelDefArray
==============
*/
void Postload_ScriptableEventModelDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventModelDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventModelDef, 32 * count);
  for ( i = varScriptableEventModelDef; v2; --v2 )
  {
    varScriptableEventModelDef = i;
    Postload_ScriptableEventModelDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventModelDefStream
==============
*/
void Postload_ScriptableEventModelDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventModelDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  ScriptableModelUnion *v8; 
  XCompositeModelDef **p_compositeModel; 
  ScriptableDataType dataType; 
  XCompositeModelDef **v11; 
  XModel **v12; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 29249, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventModelDef;
    while ( 1 )
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x20ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x20ui64);
      g_streamPosGlob.pos += 32;
      v4 = varScriptableEventModelDef;
      base = varScriptableEventModelDef->base;
      if ( !varScriptableEventModelDef->base )
        goto LABEL_19;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        break;
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_16;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventModelDef->base);
LABEL_18:
      v4 = varScriptableEventModelDef;
LABEL_19:
      v8 = varScriptableModelUnion;
      p_compositeModel = &v4->data.compositeModel;
      varScriptableModelUnion = &v4->data;
      dataType = v4->dataType;
      if ( dataType == SCRIPTABLE_DATA_TYPE_XCOMPOSITEMODEL )
      {
        v11 = varXCompositeModelDefPtr;
        varXCompositeModelDefPtr = p_compositeModel;
        Postload_XCompositeModelDefPtr(NotAtStart);
        varXCompositeModelDefPtr = v11;
      }
      else if ( dataType == SCRIPTABLE_DATA_TYPE_XMODEL )
      {
        v12 = varXModelPtr;
        varXModelPtr = (XModel **)p_compositeModel;
        Postload_XModelPtr(NotAtStart);
        varXModelPtr = v12;
      }
      pos = g_streamPosGlob.pos;
      varScriptableEventModelDef = (ScriptableEventModelDef *)g_streamPosGlob.pos;
      varScriptableModelUnion = v8;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v6 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v7 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v7;
    varScriptableEventBaseDef = v6;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_18;
  }
}

/*
==============
Postload_ScriptableEventMoveDef
==============
*/
void Postload_ScriptableEventMoveDef(const DBStreamStart streamStart)
{
  ScriptableEventMoveDef *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 

  if ( streamStart != (varScriptableEventMoveDef != (ScriptableEventMoveDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventMoveDef, 0x30ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x30ui64);
  v2 = varScriptableEventMoveDef;
  base = varScriptableEventMoveDef->base;
  if ( varScriptableEventMoveDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventMoveDef->base);
      return;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varScriptableEventBaseDef = v4;
    varXString = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Postload_ScriptableEventMoveDefArray
==============
*/
void Postload_ScriptableEventMoveDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventMoveDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventMoveDef, 48 * count);
  for ( i = varScriptableEventMoveDef; v2; --v2 )
  {
    varScriptableEventMoveDef = i;
    Postload_ScriptableEventMoveDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventMoveDefStream
==============
*/
void Postload_ScriptableEventMoveDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventMoveDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 38341, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventMoveDef;
    while ( 1 )
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x30ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x30ui64);
      g_streamPosGlob.pos += 48;
      v4 = varScriptableEventMoveDef;
      base = varScriptableEventMoveDef->base;
      if ( !varScriptableEventMoveDef->base )
        goto LABEL_18;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        break;
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_16;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventMoveDef->base);
LABEL_18:
      pos = g_streamPosGlob.pos;
      varScriptableEventMoveDef = (ScriptableEventMoveDef *)g_streamPosGlob.pos;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v6 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v7 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v7;
    varScriptableEventBaseDef = v6;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_18;
  }
}

/*
==============
Postload_ScriptableEventNoteTrackDef
==============
*/
void Postload_ScriptableEventNoteTrackDef(const DBStreamStart streamStart)
{
  ScriptableEventNoteTrackDef *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 
  ScriptableEventNoteTrackDef *v6; 
  ScriptableNoteTrackDef *noteTracks; 
  ScriptableNoteTrackDef *v8; 
  __int64 noteTrackCount; 
  unsigned __int64 v10; 
  ScriptableNoteTrackDef *i; 

  if ( streamStart != (varScriptableEventNoteTrackDef != (ScriptableEventNoteTrackDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventNoteTrackDef, 0x18ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x18ui64);
  v2 = varScriptableEventNoteTrackDef;
  base = varScriptableEventNoteTrackDef->base;
  if ( varScriptableEventNoteTrackDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventNoteTrackDef->base);
      goto LABEL_12;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v5;
    varScriptableEventBaseDef = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_12:
  v6 = varScriptableEventNoteTrackDef;
  noteTracks = varScriptableEventNoteTrackDef->noteTracks;
  if ( !noteTracks )
    return;
  if ( noteTracks == (ScriptableNoteTrackDef *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( noteTracks != (ScriptableNoteTrackDef *)-2i64 )
  {
    v6->noteTracks = (ScriptableNoteTrackDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventNoteTrackDef->noteTracks);
    return;
  }
  v8 = varScriptableNoteTrackDef;
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  v6->noteTracks = (ScriptableNoteTrackDef *)g_streamPosGlob.pos;
  varScriptableNoteTrackDef = (ScriptableNoteTrackDef *)g_streamPosGlob.pos;
  noteTrackCount = varScriptableEventNoteTrackDef->noteTrackCount;
  v10 = 32 * noteTrackCount;
  if ( 32 * noteTrackCount )
  {
    if ( v10 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
      __debugbreak();
    DB_IncStreamPos(v10);
  }
  for ( i = varScriptableNoteTrackDef; noteTrackCount; --noteTrackCount )
  {
    varScriptableNoteTrackDef = i;
    Postload_ScriptableNoteTrackDef(NotAtStart);
    ++i;
  }
  varScriptableNoteTrackDef = v8;
  if ( noteTracks == (ScriptableNoteTrackDef *)-1i64 )
    DB_PopSharedData();
}

/*
==============
Postload_ScriptableEventNoteTrackDefArray
==============
*/
void Postload_ScriptableEventNoteTrackDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventNoteTrackDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventNoteTrackDef, 24 * count);
  for ( i = varScriptableEventNoteTrackDef; v2; --v2 )
  {
    varScriptableEventNoteTrackDef = i;
    Postload_ScriptableEventNoteTrackDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventNoteTrackDefStream
==============
*/
void Postload_ScriptableEventNoteTrackDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventNoteTrackDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  ScriptableEventNoteTrackDef *v8; 
  ScriptableNoteTrackDef *noteTracks; 
  ScriptableNoteTrackDef *v10; 
  __int64 noteTrackCount; 
  unsigned __int64 v12; 
  ScriptableNoteTrackDef *i; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 30622, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventNoteTrackDef;
    do
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x18ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x18ui64);
      g_streamPosGlob.pos += 24;
      v4 = varScriptableEventNoteTrackDef;
      base = varScriptableEventNoteTrackDef->base;
      if ( varScriptableEventNoteTrackDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
        }
        else if ( base != (ScriptableEventBaseDef *)-2i64 )
        {
          v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventNoteTrackDef->base);
          goto LABEL_18;
        }
        v6 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        DB_IncStreamPos(0x10ui64);
        v7 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Postload_XString(NotAtStart);
        varXString = v7;
        varScriptableEventBaseDef = v6;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
      }
LABEL_18:
      v8 = varScriptableEventNoteTrackDef;
      noteTracks = varScriptableEventNoteTrackDef->noteTracks;
      if ( noteTracks )
      {
        if ( noteTracks == (ScriptableNoteTrackDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_23:
          v10 = varScriptableNoteTrackDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v8->noteTracks = (ScriptableNoteTrackDef *)g_streamPosGlob.pos;
          varScriptableNoteTrackDef = (ScriptableNoteTrackDef *)g_streamPosGlob.pos;
          noteTrackCount = varScriptableEventNoteTrackDef->noteTrackCount;
          v12 = 32 * noteTrackCount;
          if ( 32 * noteTrackCount )
          {
            if ( v12 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
              __debugbreak();
            DB_IncStreamPos(v12);
          }
          for ( i = varScriptableNoteTrackDef; noteTrackCount; --noteTrackCount )
          {
            varScriptableNoteTrackDef = i;
            Postload_ScriptableNoteTrackDef(NotAtStart);
            ++i;
          }
          varScriptableNoteTrackDef = v10;
          if ( noteTracks == (ScriptableNoteTrackDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_32;
        }
        if ( noteTracks == (ScriptableNoteTrackDef *)-2i64 )
          goto LABEL_23;
        v8->noteTracks = (ScriptableNoteTrackDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventNoteTrackDef->noteTracks);
      }
LABEL_32:
      pos = g_streamPosGlob.pos;
      varScriptableEventNoteTrackDef = (ScriptableEventNoteTrackDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ScriptableEventObjectiveDef
==============
*/
void Postload_ScriptableEventObjectiveDef(const DBStreamStart streamStart)
{
  ScriptableEventObjectiveDef *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 
  const char **v6; 
  GfxImage **v7; 

  if ( streamStart != (varScriptableEventObjectiveDef != (ScriptableEventObjectiveDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventObjectiveDef, 0x40ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x40ui64);
  v2 = varScriptableEventObjectiveDef;
  base = varScriptableEventObjectiveDef->base;
  if ( varScriptableEventObjectiveDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventObjectiveDef->base);
      goto LABEL_12;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varScriptableEventBaseDef = v4;
    varXString = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_12:
  v6 = varXString;
  varXString = &varScriptableEventObjectiveDef->description;
  Postload_XString(NotAtStart);
  varXString = &varScriptableEventObjectiveDef->icon;
  Postload_XString(NotAtStart);
  varXString = &varScriptableEventObjectiveDef->label;
  Postload_XString(NotAtStart);
  varXString = v6;
  v7 = varGfxImagePtr;
  varGfxImagePtr = &varScriptableEventObjectiveDef->iconImage;
  Postload_GfxImagePtr(NotAtStart);
  varGfxImagePtr = v7;
}

/*
==============
Postload_ScriptableEventObjectiveDefArray
==============
*/
void Postload_ScriptableEventObjectiveDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventObjectiveDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventObjectiveDef, count << 6);
  for ( i = varScriptableEventObjectiveDef; v2; --v2 )
  {
    varScriptableEventObjectiveDef = i;
    Postload_ScriptableEventObjectiveDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventObjectiveDefStream
==============
*/
void Postload_ScriptableEventObjectiveDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ScriptableEventObjectiveDef *v5; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v7; 
  const char **v8; 
  const char **v9; 
  GfxImage **v10; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 39438, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varScriptableEventObjectiveDef;
    pos = g_streamPosGlob.pos;
    while ( 1 )
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x40ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x40ui64);
      g_streamPosGlob.pos += 64;
      v5 = varScriptableEventObjectiveDef;
      base = varScriptableEventObjectiveDef->base;
      if ( !varScriptableEventObjectiveDef->base )
        goto LABEL_18;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        break;
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_16;
      v5->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventObjectiveDef->base);
LABEL_18:
      v9 = varXString;
      varXString = &varScriptableEventObjectiveDef->description;
      Postload_XString(NotAtStart);
      varXString = &varScriptableEventObjectiveDef->icon;
      Postload_XString(NotAtStart);
      varXString = &varScriptableEventObjectiveDef->label;
      Postload_XString(NotAtStart);
      varXString = v9;
      v10 = varGfxImagePtr;
      varGfxImagePtr = &varScriptableEventObjectiveDef->iconImage;
      Postload_GfxImagePtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventObjectiveDef = (ScriptableEventObjectiveDef *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varGfxImagePtr = v10;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v7 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v5->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v8 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v8;
    varScriptableEventBaseDef = v7;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_18;
  }
}

/*
==============
Postload_ScriptableEventPFXDef
==============
*/
void Postload_ScriptableEventPFXDef(const DBStreamStart streamStart)
{
  ScriptableEventPFXDef *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 
  ScriptableEventPFXDef *v6; 
  scr_string_t *scrTagNames; 
  scr_string_t *v8; 
  scr_string_t *v9; 
  ScriptableEventPFXDef *v10; 
  scr_string_t *scrEndTagNames; 
  scr_string_t *v12; 
  scr_string_t *v13; 
  const char **v14; 
  FxCombinedDef *v15; 

  if ( streamStart != (varScriptableEventPFXDef != (ScriptableEventPFXDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventPFXDef, 0x58ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x58ui64);
  v2 = varScriptableEventPFXDef;
  base = varScriptableEventPFXDef->base;
  if ( varScriptableEventPFXDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventPFXDef->base);
      goto LABEL_12;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v5;
    varScriptableEventBaseDef = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_12:
  v6 = varScriptableEventPFXDef;
  scrTagNames = varScriptableEventPFXDef->scrTagNames;
  if ( !scrTagNames )
    goto LABEL_19;
  if ( scrTagNames == (scr_string_t *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( scrTagNames != (scr_string_t *)-2i64 )
  {
    v6->scrTagNames = (scr_string_t *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventPFXDef->scrTagNames);
    goto LABEL_19;
  }
  v8 = varscr_string_t;
  v9 = AllocPostload_scr_string_t();
  v6->scrTagNames = v9;
  varscr_string_t = v9;
  Postload_scr_string_tArray(AtStart, varScriptableEventPFXDef->scrTagCount);
  varscr_string_t = v8;
  if ( scrTagNames == (scr_string_t *)-1i64 )
    DB_PopSharedData();
LABEL_19:
  v10 = varScriptableEventPFXDef;
  scrEndTagNames = varScriptableEventPFXDef->scrEndTagNames;
  if ( scrEndTagNames )
  {
    if ( scrEndTagNames == (scr_string_t *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( scrEndTagNames != (scr_string_t *)-2i64 )
    {
      v10->scrEndTagNames = (scr_string_t *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventPFXDef->scrEndTagNames);
      goto LABEL_26;
    }
    v12 = varscr_string_t;
    v13 = AllocPostload_scr_string_t();
    v10->scrEndTagNames = v13;
    varscr_string_t = v13;
    Postload_scr_string_tArray(AtStart, varScriptableEventPFXDef->scrEndTagCount);
    varscr_string_t = v12;
    if ( scrEndTagNames == (scr_string_t *)-1i64 )
      DB_PopSharedData();
  }
LABEL_26:
  v14 = varXString;
  varXString = &varScriptableEventPFXDef->effectAlias;
  Postload_XString(NotAtStart);
  varXString = v14;
  v15 = varFxCombinedDef;
  varFxCombinedDef = &varScriptableEventPFXDef->effectDef;
  Postload_FxCombinedDef(NotAtStart);
  varFxCombinedDef = v15;
}

/*
==============
Postload_ScriptableEventPFXDefArray
==============
*/
void Postload_ScriptableEventPFXDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventPFXDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventPFXDef, 88 * count);
  for ( i = varScriptableEventPFXDef; v2; --v2 )
  {
    varScriptableEventPFXDef = i;
    Postload_ScriptableEventPFXDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventPFXDefStream
==============
*/
void Postload_ScriptableEventPFXDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ScriptableEventPFXDef *v5; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v7; 
  const char **v8; 
  ScriptableEventPFXDef *v9; 
  scr_string_t *scrTagNames; 
  scr_string_t *v11; 
  scr_string_t *v12; 
  ScriptableEventPFXDef *v13; 
  scr_string_t *scrEndTagNames; 
  scr_string_t *v15; 
  scr_string_t *v16; 
  const char **v17; 
  FxCombinedDef *v18; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 32009, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varScriptableEventPFXDef;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x58ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x58ui64);
      g_streamPosGlob.pos += 88;
      v5 = varScriptableEventPFXDef;
      base = varScriptableEventPFXDef->base;
      if ( varScriptableEventPFXDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
        }
        else if ( base != (ScriptableEventBaseDef *)-2i64 )
        {
          v5->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventPFXDef->base);
          goto LABEL_18;
        }
        v7 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v5->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        DB_IncStreamPos(0x10ui64);
        v8 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Postload_XString(NotAtStart);
        varXString = v8;
        varScriptableEventBaseDef = v7;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
      }
LABEL_18:
      v9 = varScriptableEventPFXDef;
      scrTagNames = varScriptableEventPFXDef->scrTagNames;
      if ( !scrTagNames )
        goto LABEL_25;
      if ( scrTagNames == (scr_string_t *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( scrTagNames != (scr_string_t *)-2i64 )
      {
        v9->scrTagNames = (scr_string_t *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventPFXDef->scrTagNames);
        goto LABEL_25;
      }
      v11 = varscr_string_t;
      v12 = AllocPostload_scr_string_t();
      v9->scrTagNames = v12;
      varscr_string_t = v12;
      Postload_scr_string_tArray(AtStart, varScriptableEventPFXDef->scrTagCount);
      varscr_string_t = v11;
      if ( scrTagNames == (scr_string_t *)-1i64 )
        DB_PopSharedData();
LABEL_25:
      v13 = varScriptableEventPFXDef;
      scrEndTagNames = varScriptableEventPFXDef->scrEndTagNames;
      if ( scrEndTagNames )
      {
        if ( scrEndTagNames == (scr_string_t *)-1i64 )
        {
          DB_PushSharedData();
LABEL_30:
          v15 = varscr_string_t;
          v16 = AllocPostload_scr_string_t();
          v13->scrEndTagNames = v16;
          varscr_string_t = v16;
          Postload_scr_string_tArray(AtStart, varScriptableEventPFXDef->scrEndTagCount);
          varscr_string_t = v15;
          if ( scrEndTagNames == (scr_string_t *)-1i64 )
            DB_PopSharedData();
          goto LABEL_32;
        }
        if ( scrEndTagNames == (scr_string_t *)-2i64 )
          goto LABEL_30;
        v13->scrEndTagNames = (scr_string_t *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventPFXDef->scrEndTagNames);
      }
LABEL_32:
      v17 = varXString;
      varXString = &varScriptableEventPFXDef->effectAlias;
      Postload_XString(NotAtStart);
      varXString = v17;
      v18 = varFxCombinedDef;
      varFxCombinedDef = &varScriptableEventPFXDef->effectDef;
      Postload_FxCombinedDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventPFXDef = (ScriptableEventPFXDef *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varFxCombinedDef = v18;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ScriptableEventPartDamageDef
==============
*/
void Postload_ScriptableEventPartDamageDef(const DBStreamStart streamStart)
{
  ScriptableEventPartDamageDef *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 

  if ( streamStart != (varScriptableEventPartDamageDef != (ScriptableEventPartDamageDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventPartDamageDef, 0x28ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x28ui64);
  v2 = varScriptableEventPartDamageDef;
  base = varScriptableEventPartDamageDef->base;
  if ( varScriptableEventPartDamageDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventPartDamageDef->base);
      return;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varScriptableEventBaseDef = v4;
    varXString = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Postload_ScriptableEventPartDamageDefArray
==============
*/
void Postload_ScriptableEventPartDamageDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventPartDamageDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventPartDamageDef, 40 * count);
  for ( i = varScriptableEventPartDamageDef; v2; --v2 )
  {
    varScriptableEventPartDamageDef = i;
    Postload_ScriptableEventPartDamageDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventPartDamageDefStream
==============
*/
void Postload_ScriptableEventPartDamageDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventPartDamageDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 35488, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventPartDamageDef;
    while ( 1 )
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x28ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x28ui64);
      g_streamPosGlob.pos += 40;
      v4 = varScriptableEventPartDamageDef;
      base = varScriptableEventPartDamageDef->base;
      if ( !varScriptableEventPartDamageDef->base )
        goto LABEL_18;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        break;
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_16;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventPartDamageDef->base);
LABEL_18:
      pos = g_streamPosGlob.pos;
      varScriptableEventPartDamageDef = (ScriptableEventPartDamageDef *)g_streamPosGlob.pos;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v6 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v7 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v7;
    varScriptableEventBaseDef = v6;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_18;
  }
}

/*
==============
Postload_ScriptableEventPlayMayhemDef
==============
*/
void Postload_ScriptableEventPlayMayhemDef(const DBStreamStart streamStart)
{
  ScriptableEventPlayMayhemDef *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 

  if ( streamStart != (varScriptableEventPlayMayhemDef != (ScriptableEventPlayMayhemDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventPlayMayhemDef, 0x10ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x10ui64);
  v2 = varScriptableEventPlayMayhemDef;
  base = varScriptableEventPlayMayhemDef->base;
  if ( varScriptableEventPlayMayhemDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventPlayMayhemDef->base);
      return;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varScriptableEventBaseDef = v4;
    varXString = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Postload_ScriptableEventPlayMayhemDefArray
==============
*/
void Postload_ScriptableEventPlayMayhemDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventPlayMayhemDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventPlayMayhemDef, 16 * count);
  for ( i = varScriptableEventPlayMayhemDef; v2; --v2 )
  {
    varScriptableEventPlayMayhemDef = i;
    Postload_ScriptableEventPlayMayhemDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventPlayMayhemDefStream
==============
*/
void Postload_ScriptableEventPlayMayhemDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventPlayMayhemDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 35802, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventPlayMayhemDef;
    while ( 1 )
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x10ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x10ui64);
      g_streamPosGlob.pos += 16;
      v4 = varScriptableEventPlayMayhemDef;
      base = varScriptableEventPlayMayhemDef->base;
      if ( !varScriptableEventPlayMayhemDef->base )
        goto LABEL_18;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        break;
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_16;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventPlayMayhemDef->base);
LABEL_18:
      pos = g_streamPosGlob.pos;
      varScriptableEventPlayMayhemDef = (ScriptableEventPlayMayhemDef *)g_streamPosGlob.pos;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v6 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v7 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v7;
    varScriptableEventBaseDef = v6;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_18;
  }
}

/*
==============
Postload_ScriptableEventRandomDef
==============
*/
void Postload_ScriptableEventRandomDef(const DBStreamStart streamStart)
{
  ScriptableEventRandomDef *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 
  ScriptableEventRandomDef *v6; 
  ScriptableEventDef *eventsA; 
  ScriptableEventDef *v8; 
  __int64 eventACount; 
  ScriptableEventDef *i; 
  ScriptableEventRandomDef *v11; 
  ScriptableEventDef *eventsB; 
  ScriptableEventDef *v13; 
  __int64 eventBCount; 
  ScriptableEventDef *j; 

  if ( streamStart != (varScriptableEventRandomDef != (ScriptableEventRandomDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventRandomDef, 0x30ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x30ui64);
  v2 = varScriptableEventRandomDef;
  base = varScriptableEventRandomDef->base;
  if ( varScriptableEventRandomDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventRandomDef->base);
      goto LABEL_12;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v5;
    varScriptableEventBaseDef = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_12:
  v6 = varScriptableEventRandomDef;
  eventsA = varScriptableEventRandomDef->eventsA;
  if ( !eventsA )
    goto LABEL_26;
  if ( eventsA == (ScriptableEventDef *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( eventsA != (ScriptableEventDef *)-2i64 )
  {
    v6->eventsA = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventRandomDef->eventsA);
    goto LABEL_26;
  }
  v8 = varScriptableEventDef;
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  v6->eventsA = (ScriptableEventDef *)g_streamPosGlob.pos;
  varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
  eventACount = varScriptableEventRandomDef->eventACount;
  if ( 176 * eventACount )
  {
    if ( (unsigned __int64)(176 * eventACount) > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
      __debugbreak();
    DB_IncStreamPos(176 * eventACount);
  }
  for ( i = varScriptableEventDef; eventACount; --eventACount )
  {
    varScriptableEventDef = i;
    Postload_ScriptableEventDef(NotAtStart);
    ++i;
  }
  varScriptableEventDef = v8;
  if ( eventsA == (ScriptableEventDef *)-1i64 )
    DB_PopSharedData();
LABEL_26:
  v11 = varScriptableEventRandomDef;
  eventsB = varScriptableEventRandomDef->eventsB;
  if ( !eventsB )
    return;
  if ( eventsB == (ScriptableEventDef *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( eventsB != (ScriptableEventDef *)-2i64 )
  {
    v11->eventsB = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventRandomDef->eventsB);
    return;
  }
  v13 = varScriptableEventDef;
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  v11->eventsB = (ScriptableEventDef *)g_streamPosGlob.pos;
  varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
  eventBCount = varScriptableEventRandomDef->eventBCount;
  if ( 176 * eventBCount )
  {
    if ( (unsigned __int64)(176 * eventBCount) > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
      __debugbreak();
    DB_IncStreamPos(176 * eventBCount);
  }
  for ( j = varScriptableEventDef; eventBCount; --eventBCount )
  {
    varScriptableEventDef = j;
    Postload_ScriptableEventDef(NotAtStart);
    ++j;
  }
  varScriptableEventDef = v13;
  if ( eventsB == (ScriptableEventDef *)-1i64 )
    DB_PopSharedData();
}

/*
==============
Postload_ScriptableEventRandomDefArray
==============
*/
void Postload_ScriptableEventRandomDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventRandomDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventRandomDef, 48 * count);
  for ( i = varScriptableEventRandomDef; v2; --v2 )
  {
    varScriptableEventRandomDef = i;
    Postload_ScriptableEventRandomDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventRandomDefStream
==============
*/
void Postload_ScriptableEventRandomDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventRandomDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  ScriptableEventRandomDef *v8; 
  ScriptableEventDef *eventsA; 
  ScriptableEventDef *v10; 
  __int64 eventACount; 
  ScriptableEventDef *i; 
  ScriptableEventRandomDef *v13; 
  ScriptableEventDef *eventsB; 
  ScriptableEventDef *v15; 
  __int64 eventBCount; 
  ScriptableEventDef *j; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 28568, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventRandomDef;
    do
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x30ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x30ui64);
      g_streamPosGlob.pos += 48;
      v4 = varScriptableEventRandomDef;
      base = varScriptableEventRandomDef->base;
      if ( varScriptableEventRandomDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
        }
        else if ( base != (ScriptableEventBaseDef *)-2i64 )
        {
          v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventRandomDef->base);
          goto LABEL_18;
        }
        v6 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        DB_IncStreamPos(0x10ui64);
        v7 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Postload_XString(NotAtStart);
        varXString = v7;
        varScriptableEventBaseDef = v6;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
      }
LABEL_18:
      v8 = varScriptableEventRandomDef;
      eventsA = varScriptableEventRandomDef->eventsA;
      if ( !eventsA )
        goto LABEL_32;
      if ( eventsA == (ScriptableEventDef *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( eventsA != (ScriptableEventDef *)-2i64 )
      {
        v8->eventsA = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventRandomDef->eventsA);
        goto LABEL_32;
      }
      v10 = varScriptableEventDef;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      v8->eventsA = (ScriptableEventDef *)g_streamPosGlob.pos;
      varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
      eventACount = varScriptableEventRandomDef->eventACount;
      if ( 176 * eventACount )
      {
        if ( (unsigned __int64)(176 * eventACount) > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
          __debugbreak();
        DB_IncStreamPos(176 * eventACount);
      }
      for ( i = varScriptableEventDef; eventACount; --eventACount )
      {
        varScriptableEventDef = i;
        Postload_ScriptableEventDef(NotAtStart);
        ++i;
      }
      varScriptableEventDef = v10;
      if ( eventsA == (ScriptableEventDef *)-1i64 )
        DB_PopSharedData();
LABEL_32:
      v13 = varScriptableEventRandomDef;
      eventsB = varScriptableEventRandomDef->eventsB;
      if ( eventsB )
      {
        if ( eventsB == (ScriptableEventDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_37:
          v15 = varScriptableEventDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v13->eventsB = (ScriptableEventDef *)g_streamPosGlob.pos;
          varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
          eventBCount = varScriptableEventRandomDef->eventBCount;
          if ( 176 * eventBCount )
          {
            if ( (unsigned __int64)(176 * eventBCount) > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
              __debugbreak();
            DB_IncStreamPos(176 * eventBCount);
          }
          for ( j = varScriptableEventDef; eventBCount; --eventBCount )
          {
            varScriptableEventDef = j;
            Postload_ScriptableEventDef(NotAtStart);
            ++j;
          }
          varScriptableEventDef = v15;
          if ( eventsB == (ScriptableEventDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_46;
        }
        if ( eventsB == (ScriptableEventDef *)-2i64 )
          goto LABEL_37;
        v13->eventsB = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventRandomDef->eventsB);
      }
LABEL_46:
      pos = g_streamPosGlob.pos;
      varScriptableEventRandomDef = (ScriptableEventRandomDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ScriptableEventRumbleDef
==============
*/
void Postload_ScriptableEventRumbleDef(const DBStreamStart streamStart)
{
  ScriptableEventRumbleDef *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 
  const char **v6; 
  scr_string_t *v7; 
  const char **v8; 
  RumbleInfo **v9; 

  if ( streamStart != (varScriptableEventRumbleDef != (ScriptableEventRumbleDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventRumbleDef, 0x38ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x38ui64);
  v2 = varScriptableEventRumbleDef;
  base = varScriptableEventRumbleDef->base;
  if ( varScriptableEventRumbleDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventRumbleDef->base);
      goto LABEL_12;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varScriptableEventBaseDef = v4;
    varXString = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_12:
  v6 = varXString;
  varXString = &varScriptableEventRumbleDef->tagName;
  Postload_XString(NotAtStart);
  varXString = v6;
  v7 = varscr_string_t;
  varscr_string_t = &varScriptableEventRumbleDef->scrTagName;
  Postload_scr_string_t(NotAtStart);
  varscr_string_t = v7;
  v8 = varXString;
  varXString = &varScriptableEventRumbleDef->rumble;
  Postload_XString(NotAtStart);
  varXString = v8;
  v9 = varRumbleInfoPtr;
  varRumbleInfoPtr = &varScriptableEventRumbleDef->rumbleAsset;
  Postload_RumbleInfoPtr(NotAtStart);
  varRumbleInfoPtr = v9;
}

/*
==============
Postload_ScriptableEventRumbleDefArray
==============
*/
void Postload_ScriptableEventRumbleDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventRumbleDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventRumbleDef, 56 * count);
  for ( i = varScriptableEventRumbleDef; v2; --v2 )
  {
    varScriptableEventRumbleDef = i;
    Postload_ScriptableEventRumbleDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventRumbleDefStream
==============
*/
void Postload_ScriptableEventRumbleDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ScriptableEventRumbleDef *v5; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v7; 
  const char **v8; 
  const char **v9; 
  scr_string_t *v10; 
  const char **v11; 
  RumbleInfo **v12; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 34693, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varScriptableEventRumbleDef;
    pos = g_streamPosGlob.pos;
    while ( 1 )
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x38ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x38ui64);
      g_streamPosGlob.pos += 56;
      v5 = varScriptableEventRumbleDef;
      base = varScriptableEventRumbleDef->base;
      if ( !varScriptableEventRumbleDef->base )
        goto LABEL_18;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        break;
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_16;
      v5->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventRumbleDef->base);
LABEL_18:
      v9 = varXString;
      varXString = &varScriptableEventRumbleDef->tagName;
      Postload_XString(NotAtStart);
      varXString = v9;
      v10 = varscr_string_t;
      varscr_string_t = &varScriptableEventRumbleDef->scrTagName;
      Postload_scr_string_t(NotAtStart);
      varscr_string_t = v10;
      v11 = varXString;
      varXString = &varScriptableEventRumbleDef->rumble;
      Postload_XString(NotAtStart);
      varXString = v11;
      v12 = varRumbleInfoPtr;
      varRumbleInfoPtr = &varScriptableEventRumbleDef->rumbleAsset;
      Postload_RumbleInfoPtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventRumbleDef = (ScriptableEventRumbleDef *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varRumbleInfoPtr = v12;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v7 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v5->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v8 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v8;
    varScriptableEventBaseDef = v7;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_18;
  }
}

/*
==============
Postload_ScriptableEventScreenshakeDef
==============
*/
void Postload_ScriptableEventScreenshakeDef(const DBStreamStart streamStart)
{
  ScriptableEventScreenshakeDef *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 
  const char **v6; 
  scr_string_t *v7; 

  if ( streamStart != (varScriptableEventScreenshakeDef != (ScriptableEventScreenshakeDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventScreenshakeDef, 0x50ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x50ui64);
  v2 = varScriptableEventScreenshakeDef;
  base = varScriptableEventScreenshakeDef->base;
  if ( varScriptableEventScreenshakeDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventScreenshakeDef->base);
      goto LABEL_12;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varScriptableEventBaseDef = v4;
    varXString = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_12:
  v6 = varXString;
  varXString = &varScriptableEventScreenshakeDef->tagName;
  Postload_XString(NotAtStart);
  varXString = v6;
  v7 = varscr_string_t;
  varscr_string_t = &varScriptableEventScreenshakeDef->scrTagName;
  Postload_scr_string_t(NotAtStart);
  varscr_string_t = v7;
}

/*
==============
Postload_ScriptableEventScreenshakeDefArray
==============
*/
void Postload_ScriptableEventScreenshakeDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventScreenshakeDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventScreenshakeDef, 80 * count);
  for ( i = varScriptableEventScreenshakeDef; v2; --v2 )
  {
    varScriptableEventScreenshakeDef = i;
    Postload_ScriptableEventScreenshakeDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventScreenshakeDefStream
==============
*/
void Postload_ScriptableEventScreenshakeDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ScriptableEventScreenshakeDef *v5; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v7; 
  const char **v8; 
  const char **v9; 
  scr_string_t *v10; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 35217, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varScriptableEventScreenshakeDef;
    pos = g_streamPosGlob.pos;
    while ( 1 )
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x50ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x50ui64);
      g_streamPosGlob.pos += 80;
      v5 = varScriptableEventScreenshakeDef;
      base = varScriptableEventScreenshakeDef->base;
      if ( !varScriptableEventScreenshakeDef->base )
        goto LABEL_18;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        break;
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_16;
      v5->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventScreenshakeDef->base);
LABEL_18:
      v9 = varXString;
      varXString = &varScriptableEventScreenshakeDef->tagName;
      Postload_XString(NotAtStart);
      varXString = v9;
      v10 = varscr_string_t;
      varscr_string_t = &varScriptableEventScreenshakeDef->scrTagName;
      Postload_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventScreenshakeDef = (ScriptableEventScreenshakeDef *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varscr_string_t = v10;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v7 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v5->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v8 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v8;
    varScriptableEventBaseDef = v7;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_18;
  }
}

/*
==============
Postload_ScriptableEventScriptDamageDef
==============
*/
void Postload_ScriptableEventScriptDamageDef(const DBStreamStart streamStart)
{
  ScriptableEventScriptDamageDef *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 
  const char **v6; 
  scr_string_t *v7; 

  if ( streamStart != (varScriptableEventScriptDamageDef != (ScriptableEventScriptDamageDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventScriptDamageDef, 0x18ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x18ui64);
  v2 = varScriptableEventScriptDamageDef;
  base = varScriptableEventScriptDamageDef->base;
  if ( varScriptableEventScriptDamageDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventScriptDamageDef->base);
      goto LABEL_12;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varScriptableEventBaseDef = v4;
    varXString = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_12:
  v6 = varXString;
  varXString = &varScriptableEventScriptDamageDef->notification;
  Postload_XString(NotAtStart);
  varXString = v6;
  v7 = varscr_string_t;
  varscr_string_t = &varScriptableEventScriptDamageDef->scrNotification;
  Postload_scr_string_t(NotAtStart);
  varscr_string_t = v7;
}

/*
==============
Postload_ScriptableEventScriptDamageDefArray
==============
*/
void Postload_ScriptableEventScriptDamageDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventScriptDamageDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventScriptDamageDef, 24 * count);
  for ( i = varScriptableEventScriptDamageDef; v2; --v2 )
  {
    varScriptableEventScriptDamageDef = i;
    Postload_ScriptableEventScriptDamageDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventScriptDamageDefStream
==============
*/
void Postload_ScriptableEventScriptDamageDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ScriptableEventScriptDamageDef *v5; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v7; 
  const char **v8; 
  const char **v9; 
  scr_string_t *v10; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 40287, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varScriptableEventScriptDamageDef;
    pos = g_streamPosGlob.pos;
    while ( 1 )
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x18ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x18ui64);
      g_streamPosGlob.pos += 24;
      v5 = varScriptableEventScriptDamageDef;
      base = varScriptableEventScriptDamageDef->base;
      if ( !varScriptableEventScriptDamageDef->base )
        goto LABEL_18;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        break;
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_16;
      v5->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventScriptDamageDef->base);
LABEL_18:
      v9 = varXString;
      varXString = &varScriptableEventScriptDamageDef->notification;
      Postload_XString(NotAtStart);
      varXString = v9;
      v10 = varscr_string_t;
      varscr_string_t = &varScriptableEventScriptDamageDef->scrNotification;
      Postload_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventScriptDamageDef = (ScriptableEventScriptDamageDef *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varscr_string_t = v10;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v7 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v5->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v8 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v8;
    varScriptableEventBaseDef = v7;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_18;
  }
}

/*
==============
Postload_ScriptableEventScriptDef
==============
*/
void Postload_ScriptableEventScriptDef(const DBStreamStart streamStart)
{
  ScriptableEventScriptDef *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 
  const char **v6; 
  scr_string_t *v7; 

  if ( streamStart != (varScriptableEventScriptDef != (ScriptableEventScriptDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventScriptDef, 0x20ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x20ui64);
  v2 = varScriptableEventScriptDef;
  base = varScriptableEventScriptDef->base;
  if ( varScriptableEventScriptDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventScriptDef->base);
      goto LABEL_12;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varScriptableEventBaseDef = v4;
    varXString = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_12:
  v6 = varXString;
  varXString = &varScriptableEventScriptDef->notification;
  Postload_XString(NotAtStart);
  varXString = v6;
  v7 = varscr_string_t;
  varscr_string_t = &varScriptableEventScriptDef->scrNotification;
  Postload_scr_string_t(NotAtStart);
  varscr_string_t = v7;
}

/*
==============
Postload_ScriptableEventScriptDefArray
==============
*/
void Postload_ScriptableEventScriptDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventScriptDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventScriptDef, 32 * count);
  for ( i = varScriptableEventScriptDef; v2; --v2 )
  {
    varScriptableEventScriptDef = i;
    Postload_ScriptableEventScriptDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventScriptDefStream
==============
*/
void Postload_ScriptableEventScriptDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ScriptableEventScriptDef *v5; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v7; 
  const char **v8; 
  const char **v9; 
  scr_string_t *v10; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 28770, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varScriptableEventScriptDef;
    pos = g_streamPosGlob.pos;
    while ( 1 )
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x20ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x20ui64);
      g_streamPosGlob.pos += 32;
      v5 = varScriptableEventScriptDef;
      base = varScriptableEventScriptDef->base;
      if ( !varScriptableEventScriptDef->base )
        goto LABEL_18;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        break;
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_16;
      v5->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventScriptDef->base);
LABEL_18:
      v9 = varXString;
      varXString = &varScriptableEventScriptDef->notification;
      Postload_XString(NotAtStart);
      varXString = v9;
      v10 = varscr_string_t;
      varscr_string_t = &varScriptableEventScriptDef->scrNotification;
      Postload_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventScriptDef = (ScriptableEventScriptDef *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varscr_string_t = v10;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v7 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v5->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v8 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v8;
    varScriptableEventBaseDef = v7;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_18;
  }
}

/*
==============
Postload_ScriptableEventSetMayhemDef
==============
*/
void Postload_ScriptableEventSetMayhemDef(const DBStreamStart streamStart)
{
  ScriptableEventSetMayhemDef *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 
  MayhemData **v6; 

  if ( streamStart != (varScriptableEventSetMayhemDef != (ScriptableEventSetMayhemDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventSetMayhemDef, 0x18ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x18ui64);
  v2 = varScriptableEventSetMayhemDef;
  base = varScriptableEventSetMayhemDef->base;
  if ( varScriptableEventSetMayhemDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventSetMayhemDef->base);
      goto LABEL_12;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varScriptableEventBaseDef = v4;
    varXString = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_12:
  v6 = varMayhemDataPtr;
  varMayhemDataPtr = &varScriptableEventSetMayhemDef->mayhem;
  Postload_MayhemDataPtr(NotAtStart);
  varMayhemDataPtr = v6;
}

/*
==============
Postload_ScriptableEventSetMayhemDefArray
==============
*/
void Postload_ScriptableEventSetMayhemDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventSetMayhemDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventSetMayhemDef, 24 * count);
  for ( i = varScriptableEventSetMayhemDef; v2; --v2 )
  {
    varScriptableEventSetMayhemDef = i;
    Postload_ScriptableEventSetMayhemDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventSetMayhemDefStream
==============
*/
void Postload_ScriptableEventSetMayhemDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ScriptableEventSetMayhemDef *v5; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v7; 
  const char **v8; 
  MayhemData **v9; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 35646, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varScriptableEventSetMayhemDef;
    pos = g_streamPosGlob.pos;
    while ( 1 )
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x18ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x18ui64);
      g_streamPosGlob.pos += 24;
      v5 = varScriptableEventSetMayhemDef;
      base = varScriptableEventSetMayhemDef->base;
      if ( !varScriptableEventSetMayhemDef->base )
        goto LABEL_18;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        break;
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_16;
      v5->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventSetMayhemDef->base);
LABEL_18:
      v9 = varMayhemDataPtr;
      varMayhemDataPtr = &varScriptableEventSetMayhemDef->mayhem;
      Postload_MayhemDataPtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventSetMayhemDef = (ScriptableEventSetMayhemDef *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varMayhemDataPtr = v9;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v7 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v5->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v8 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v8;
    varScriptableEventBaseDef = v7;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_18;
  }
}

/*
==============
Postload_ScriptableEventSoundDef
==============
*/
void Postload_ScriptableEventSoundDef(const DBStreamStart streamStart)
{
  ScriptableEventSoundDef *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 
  const char **v6; 
  scr_string_t *v7; 
  const char **v8; 

  if ( streamStart != (varScriptableEventSoundDef != (ScriptableEventSoundDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventSoundDef, 0x58ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x58ui64);
  v2 = varScriptableEventSoundDef;
  base = varScriptableEventSoundDef->base;
  if ( varScriptableEventSoundDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventSoundDef->base);
      goto LABEL_12;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varScriptableEventBaseDef = v4;
    varXString = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_12:
  v6 = varXString;
  varXString = &varScriptableEventSoundDef->tagName;
  Postload_XString(NotAtStart);
  varXString = v6;
  v7 = varscr_string_t;
  varscr_string_t = &varScriptableEventSoundDef->scrTagName;
  Postload_scr_string_t(NotAtStart);
  varscr_string_t = v7;
  v8 = varXString;
  varXString = &varScriptableEventSoundDef->soundAlias;
  Postload_XString(NotAtStart);
  varXString = &varScriptableEventSoundDef->explosionReflClass;
  Postload_XString(NotAtStart);
  varXString = v8;
}

/*
==============
Postload_ScriptableEventSoundDefArray
==============
*/
void Postload_ScriptableEventSoundDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventSoundDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventSoundDef, 88 * count);
  for ( i = varScriptableEventSoundDef; v2; --v2 )
  {
    varScriptableEventSoundDef = i;
    Postload_ScriptableEventSoundDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventSoundDefStream
==============
*/
void Postload_ScriptableEventSoundDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ScriptableEventSoundDef *v5; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v7; 
  const char **v8; 
  const char **v9; 
  scr_string_t *v10; 
  const char **v11; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 33131, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varScriptableEventSoundDef;
    pos = g_streamPosGlob.pos;
    while ( 1 )
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x58ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x58ui64);
      g_streamPosGlob.pos += 88;
      v5 = varScriptableEventSoundDef;
      base = varScriptableEventSoundDef->base;
      if ( !varScriptableEventSoundDef->base )
        goto LABEL_18;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        break;
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_16;
      v5->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventSoundDef->base);
LABEL_18:
      v9 = varXString;
      varXString = &varScriptableEventSoundDef->tagName;
      Postload_XString(NotAtStart);
      varXString = v9;
      v10 = varscr_string_t;
      varscr_string_t = &varScriptableEventSoundDef->scrTagName;
      Postload_scr_string_t(NotAtStart);
      varscr_string_t = v10;
      v11 = varXString;
      varXString = &varScriptableEventSoundDef->soundAlias;
      Postload_XString(NotAtStart);
      varXString = &varScriptableEventSoundDef->explosionReflClass;
      Postload_XString(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventSoundDef = (ScriptableEventSoundDef *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varXString = v11;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v7 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v5->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v8 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v8;
    varScriptableEventBaseDef = v7;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_18;
  }
}

/*
==============
Postload_ScriptableEventSpatialDisableDef
==============
*/
void Postload_ScriptableEventSpatialDisableDef(const DBStreamStart streamStart)
{
  ScriptableEventSpatialDisableDef *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 

  if ( streamStart != (varScriptableEventSpatialDisableDef != (ScriptableEventSpatialDisableDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventSpatialDisableDef, 0x10ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x10ui64);
  v2 = varScriptableEventSpatialDisableDef;
  base = varScriptableEventSpatialDisableDef->base;
  if ( varScriptableEventSpatialDisableDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventSpatialDisableDef->base);
      return;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varScriptableEventBaseDef = v4;
    varXString = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Postload_ScriptableEventSpatialDisableDefArray
==============
*/
void Postload_ScriptableEventSpatialDisableDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventSpatialDisableDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventSpatialDisableDef, 16 * count);
  for ( i = varScriptableEventSpatialDisableDef; v2; --v2 )
  {
    varScriptableEventSpatialDisableDef = i;
    Postload_ScriptableEventSpatialDisableDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventSpatialDisableDefStream
==============
*/
void Postload_ScriptableEventSpatialDisableDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventSpatialDisableDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 39571, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventSpatialDisableDef;
    while ( 1 )
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x10ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x10ui64);
      g_streamPosGlob.pos += 16;
      v4 = varScriptableEventSpatialDisableDef;
      base = varScriptableEventSpatialDisableDef->base;
      if ( !varScriptableEventSpatialDisableDef->base )
        goto LABEL_18;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        break;
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_16;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventSpatialDisableDef->base);
LABEL_18:
      pos = g_streamPosGlob.pos;
      varScriptableEventSpatialDisableDef = (ScriptableEventSpatialDisableDef *)g_streamPosGlob.pos;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v6 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v7 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v7;
    varScriptableEventBaseDef = v6;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_18;
  }
}

/*
==============
Postload_ScriptableEventSpawnDynentDef
==============
*/
void Postload_ScriptableEventSpawnDynentDef(const DBStreamStart streamStart)
{
  ScriptableEventSpawnDynentDef *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 
  XModel **v6; 
  const char **v7; 
  scr_string_t *v8; 
  const char **v9; 
  FxCombinedDef *v10; 

  if ( streamStart != (varScriptableEventSpawnDynentDef != (ScriptableEventSpawnDynentDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventSpawnDynentDef, 0x70ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x70ui64);
  v2 = varScriptableEventSpawnDynentDef;
  base = varScriptableEventSpawnDynentDef->base;
  if ( varScriptableEventSpawnDynentDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventSpawnDynentDef->base);
      goto LABEL_12;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varScriptableEventBaseDef = v4;
    varXString = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_12:
  v6 = varXModelPtr;
  varXModelPtr = &varScriptableEventSpawnDynentDef->model;
  Postload_XModelPtr(NotAtStart);
  varXModelPtr = v6;
  v7 = varXString;
  varXString = &varScriptableEventSpawnDynentDef->tagName;
  Postload_XString(NotAtStart);
  varXString = v7;
  v8 = varscr_string_t;
  varscr_string_t = &varScriptableEventSpawnDynentDef->scrTagName;
  Postload_scr_string_t(NotAtStart);
  varscr_string_t = v8;
  v9 = varXString;
  varXString = &varScriptableEventSpawnDynentDef->effectAlias;
  Postload_XString(NotAtStart);
  varXString = v9;
  v10 = varFxCombinedDef;
  varFxCombinedDef = &varScriptableEventSpawnDynentDef->effectDef;
  Postload_FxCombinedDef(NotAtStart);
  varFxCombinedDef = v10;
}

/*
==============
Postload_ScriptableEventSpawnDynentDefArray
==============
*/
void Postload_ScriptableEventSpawnDynentDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventSpawnDynentDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventSpawnDynentDef, 112 * count);
  for ( i = varScriptableEventSpawnDynentDef; v2; --v2 )
  {
    varScriptableEventSpawnDynentDef = i;
    Postload_ScriptableEventSpawnDynentDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventSpawnDynentDefStream
==============
*/
void Postload_ScriptableEventSpawnDynentDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ScriptableEventSpawnDynentDef *v5; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v7; 
  const char **v8; 
  XModel **v9; 
  const char **v10; 
  scr_string_t *v11; 
  const char **v12; 
  FxCombinedDef *v13; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 31396, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varScriptableEventSpawnDynentDef;
    pos = g_streamPosGlob.pos;
    while ( 1 )
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x70ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x70ui64);
      g_streamPosGlob.pos += 112;
      v5 = varScriptableEventSpawnDynentDef;
      base = varScriptableEventSpawnDynentDef->base;
      if ( !varScriptableEventSpawnDynentDef->base )
        goto LABEL_18;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        break;
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_16;
      v5->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventSpawnDynentDef->base);
LABEL_18:
      v9 = varXModelPtr;
      varXModelPtr = &varScriptableEventSpawnDynentDef->model;
      Postload_XModelPtr(NotAtStart);
      varXModelPtr = v9;
      v10 = varXString;
      varXString = &varScriptableEventSpawnDynentDef->tagName;
      Postload_XString(NotAtStart);
      varXString = v10;
      v11 = varscr_string_t;
      varscr_string_t = &varScriptableEventSpawnDynentDef->scrTagName;
      Postload_scr_string_t(NotAtStart);
      varscr_string_t = v11;
      v12 = varXString;
      varXString = &varScriptableEventSpawnDynentDef->effectAlias;
      Postload_XString(NotAtStart);
      varXString = v12;
      v13 = varFxCombinedDef;
      varFxCombinedDef = &varScriptableEventSpawnDynentDef->effectDef;
      Postload_FxCombinedDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventSpawnDynentDef = (ScriptableEventSpawnDynentDef *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varFxCombinedDef = v13;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v7 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v5->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v8 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v8;
    varScriptableEventBaseDef = v7;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_18;
  }
}

/*
==============
Postload_ScriptableEventStateChangeDef
==============
*/
void Postload_ScriptableEventStateChangeDef(const DBStreamStart streamStart)
{
  ScriptableEventStateChangeDef *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 

  if ( streamStart != (varScriptableEventStateChangeDef != (ScriptableEventStateChangeDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventStateChangeDef, 0x18ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x18ui64);
  v2 = varScriptableEventStateChangeDef;
  base = varScriptableEventStateChangeDef->base;
  if ( varScriptableEventStateChangeDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventStateChangeDef->base);
      return;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varScriptableEventBaseDef = v4;
    varXString = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Postload_ScriptableEventStateChangeDefArray
==============
*/
void Postload_ScriptableEventStateChangeDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventStateChangeDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventStateChangeDef, 24 * count);
  for ( i = varScriptableEventStateChangeDef; v2; --v2 )
  {
    varScriptableEventStateChangeDef = i;
    Postload_ScriptableEventStateChangeDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventStateChangeDefStream
==============
*/
void Postload_ScriptableEventStateChangeDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventStateChangeDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 28031, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventStateChangeDef;
    while ( 1 )
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x18ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x18ui64);
      g_streamPosGlob.pos += 24;
      v4 = varScriptableEventStateChangeDef;
      base = varScriptableEventStateChangeDef->base;
      if ( !varScriptableEventStateChangeDef->base )
        goto LABEL_18;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        break;
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_16;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventStateChangeDef->base);
LABEL_18:
      pos = g_streamPosGlob.pos;
      varScriptableEventStateChangeDef = (ScriptableEventStateChangeDef *)g_streamPosGlob.pos;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v6 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v7 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v7;
    varScriptableEventBaseDef = v6;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_18;
  }
}

/*
==============
Postload_ScriptableEventSunDef
==============
*/
void Postload_ScriptableEventSunDef(const DBStreamStart streamStart)
{
  ScriptableEventSunDef *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 

  if ( streamStart != (varScriptableEventSunDef != (ScriptableEventSunDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventSunDef, 0x48ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x48ui64);
  v2 = varScriptableEventSunDef;
  base = varScriptableEventSunDef->base;
  if ( varScriptableEventSunDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventSunDef->base);
      return;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varScriptableEventBaseDef = v4;
    varXString = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Postload_ScriptableEventSunDefArray
==============
*/
void Postload_ScriptableEventSunDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventSunDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventSunDef, 72 * count);
  for ( i = varScriptableEventSunDef; v2; --v2 )
  {
    varScriptableEventSunDef = i;
    Postload_ScriptableEventSunDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventSunDefStream
==============
*/
void Postload_ScriptableEventSunDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventSunDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 34422, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventSunDef;
    while ( 1 )
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x48ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x48ui64);
      g_streamPosGlob.pos += 72;
      v4 = varScriptableEventSunDef;
      base = varScriptableEventSunDef->base;
      if ( !varScriptableEventSunDef->base )
        goto LABEL_18;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        break;
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_16;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventSunDef->base);
LABEL_18:
      pos = g_streamPosGlob.pos;
      varScriptableEventSunDef = (ScriptableEventSunDef *)g_streamPosGlob.pos;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v6 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v7 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v7;
    varScriptableEventBaseDef = v6;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_18;
  }
}

/*
==============
Postload_ScriptableEventTeamSelectorDef
==============
*/
void Postload_ScriptableEventTeamSelectorDef(const DBStreamStart streamStart)
{
  ScriptableEventTeamSelectorDef *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 
  ScriptableEventTeamSelectorDef *v6; 
  ScriptableEventDef *eventsPass; 
  ScriptableEventDef *v8; 
  ScriptableEventTeamSelectorDef *v9; 
  ScriptableEventDef *eventsFail; 
  ScriptableEventDef *v11; 

  if ( streamStart != (varScriptableEventTeamSelectorDef != (ScriptableEventTeamSelectorDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventTeamSelectorDef, 0x38ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x38ui64);
  v2 = varScriptableEventTeamSelectorDef;
  base = varScriptableEventTeamSelectorDef->base;
  if ( varScriptableEventTeamSelectorDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventTeamSelectorDef->base);
      goto LABEL_12;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v5;
    varScriptableEventBaseDef = v4;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_12:
  v6 = varScriptableEventTeamSelectorDef;
  eventsPass = varScriptableEventTeamSelectorDef->eventsPass;
  if ( !eventsPass )
    goto LABEL_19;
  if ( eventsPass == (ScriptableEventDef *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( eventsPass != (ScriptableEventDef *)-2i64 )
  {
    v6->eventsPass = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventTeamSelectorDef->eventsPass);
    goto LABEL_19;
  }
  v8 = varScriptableEventDef;
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  v6->eventsPass = (ScriptableEventDef *)g_streamPosGlob.pos;
  varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
  Postload_ScriptableEventDefArray(AtStart, varScriptableEventTeamSelectorDef->eventPassCount);
  varScriptableEventDef = v8;
  if ( eventsPass == (ScriptableEventDef *)-1i64 )
    DB_PopSharedData();
LABEL_19:
  v9 = varScriptableEventTeamSelectorDef;
  eventsFail = varScriptableEventTeamSelectorDef->eventsFail;
  if ( !eventsFail )
    return;
  if ( eventsFail == (ScriptableEventDef *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( eventsFail != (ScriptableEventDef *)-2i64 )
  {
    v9->eventsFail = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventTeamSelectorDef->eventsFail);
    return;
  }
  v11 = varScriptableEventDef;
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  v9->eventsFail = (ScriptableEventDef *)g_streamPosGlob.pos;
  varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
  Postload_ScriptableEventDefArray(AtStart, varScriptableEventTeamSelectorDef->eventFailCount);
  varScriptableEventDef = v11;
  if ( eventsFail == (ScriptableEventDef *)-1i64 )
    DB_PopSharedData();
}

/*
==============
Postload_ScriptableEventTeamSelectorDefArray
==============
*/
void Postload_ScriptableEventTeamSelectorDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventTeamSelectorDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventTeamSelectorDef, 56 * count);
  for ( i = varScriptableEventTeamSelectorDef; v2; --v2 )
  {
    varScriptableEventTeamSelectorDef = i;
    Postload_ScriptableEventTeamSelectorDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventTeamSelectorDefStream
==============
*/
void Postload_ScriptableEventTeamSelectorDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventTeamSelectorDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  ScriptableEventTeamSelectorDef *v8; 
  ScriptableEventDef *eventsPass; 
  ScriptableEventDef *v10; 
  ScriptableEventTeamSelectorDef *v11; 
  ScriptableEventDef *eventsFail; 
  ScriptableEventDef *v13; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 36899, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventTeamSelectorDef;
    do
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x38ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x38ui64);
      g_streamPosGlob.pos += 56;
      v4 = varScriptableEventTeamSelectorDef;
      base = varScriptableEventTeamSelectorDef->base;
      if ( varScriptableEventTeamSelectorDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
        }
        else if ( base != (ScriptableEventBaseDef *)-2i64 )
        {
          v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventTeamSelectorDef->base);
          goto LABEL_18;
        }
        v6 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        DB_IncStreamPos(0x10ui64);
        v7 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Postload_XString(NotAtStart);
        varXString = v7;
        varScriptableEventBaseDef = v6;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
      }
LABEL_18:
      v8 = varScriptableEventTeamSelectorDef;
      eventsPass = varScriptableEventTeamSelectorDef->eventsPass;
      if ( !eventsPass )
        goto LABEL_25;
      if ( eventsPass == (ScriptableEventDef *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( eventsPass != (ScriptableEventDef *)-2i64 )
      {
        v8->eventsPass = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventTeamSelectorDef->eventsPass);
        goto LABEL_25;
      }
      v10 = varScriptableEventDef;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      v8->eventsPass = (ScriptableEventDef *)g_streamPosGlob.pos;
      varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
      Postload_ScriptableEventDefArray(AtStart, varScriptableEventTeamSelectorDef->eventPassCount);
      varScriptableEventDef = v10;
      if ( eventsPass == (ScriptableEventDef *)-1i64 )
        DB_PopSharedData();
LABEL_25:
      v11 = varScriptableEventTeamSelectorDef;
      eventsFail = varScriptableEventTeamSelectorDef->eventsFail;
      if ( eventsFail )
      {
        if ( eventsFail == (ScriptableEventDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_30:
          v13 = varScriptableEventDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          v11->eventsFail = (ScriptableEventDef *)g_streamPosGlob.pos;
          varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
          Postload_ScriptableEventDefArray(AtStart, varScriptableEventTeamSelectorDef->eventFailCount);
          varScriptableEventDef = v13;
          if ( eventsFail == (ScriptableEventDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_32;
        }
        if ( eventsFail == (ScriptableEventDef *)-2i64 )
          goto LABEL_30;
        v11->eventsFail = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventTeamSelectorDef->eventsFail);
      }
LABEL_32:
      pos = g_streamPosGlob.pos;
      varScriptableEventTeamSelectorDef = (ScriptableEventTeamSelectorDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ScriptableEventVehicleBlowUpTireDef
==============
*/
void Postload_ScriptableEventVehicleBlowUpTireDef(const DBStreamStart streamStart)
{
  ScriptableEventVehicleBlowUpTireDef *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 

  if ( streamStart != (varScriptableEventVehicleBlowUpTireDef != (ScriptableEventVehicleBlowUpTireDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventVehicleBlowUpTireDef, 0x10ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x10ui64);
  v2 = varScriptableEventVehicleBlowUpTireDef;
  base = varScriptableEventVehicleBlowUpTireDef->base;
  if ( varScriptableEventVehicleBlowUpTireDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventVehicleBlowUpTireDef->base);
      return;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varScriptableEventBaseDef = v4;
    varXString = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Postload_ScriptableEventVehicleBlowUpTireDefArray
==============
*/
void Postload_ScriptableEventVehicleBlowUpTireDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventVehicleBlowUpTireDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventVehicleBlowUpTireDef, 16 * count);
  for ( i = varScriptableEventVehicleBlowUpTireDef; v2; --v2 )
  {
    varScriptableEventVehicleBlowUpTireDef = i;
    Postload_ScriptableEventVehicleBlowUpTireDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventVehicleBlowUpTireDefStream
==============
*/
void Postload_ScriptableEventVehicleBlowUpTireDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventVehicleBlowUpTireDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 39906, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventVehicleBlowUpTireDef;
    while ( 1 )
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x10ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x10ui64);
      g_streamPosGlob.pos += 16;
      v4 = varScriptableEventVehicleBlowUpTireDef;
      base = varScriptableEventVehicleBlowUpTireDef->base;
      if ( !varScriptableEventVehicleBlowUpTireDef->base )
        goto LABEL_18;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        break;
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_16;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventVehicleBlowUpTireDef->base);
LABEL_18:
      pos = g_streamPosGlob.pos;
      varScriptableEventVehicleBlowUpTireDef = (ScriptableEventVehicleBlowUpTireDef *)g_streamPosGlob.pos;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v6 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v7 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v7;
    varScriptableEventBaseDef = v6;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_18;
  }
}

/*
==============
Postload_ScriptableEventViewTriggerDef
==============
*/
void Postload_ScriptableEventViewTriggerDef(const DBStreamStart streamStart)
{
  ScriptableEventViewTriggerDef *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 

  if ( streamStart != (varScriptableEventViewTriggerDef != (ScriptableEventViewTriggerDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventViewTriggerDef, 0x18ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x18ui64);
  v2 = varScriptableEventViewTriggerDef;
  base = varScriptableEventViewTriggerDef->base;
  if ( varScriptableEventViewTriggerDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventViewTriggerDef->base);
      return;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varScriptableEventBaseDef = v4;
    varXString = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Postload_ScriptableEventViewTriggerDefArray
==============
*/
void Postload_ScriptableEventViewTriggerDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventViewTriggerDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventViewTriggerDef, 24 * count);
  for ( i = varScriptableEventViewTriggerDef; v2; --v2 )
  {
    varScriptableEventViewTriggerDef = i;
    Postload_ScriptableEventViewTriggerDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventViewTriggerDefStream
==============
*/
void Postload_ScriptableEventViewTriggerDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventViewTriggerDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 39211, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventViewTriggerDef;
    while ( 1 )
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x18ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x18ui64);
      g_streamPosGlob.pos += 24;
      v4 = varScriptableEventViewTriggerDef;
      base = varScriptableEventViewTriggerDef->base;
      if ( !varScriptableEventViewTriggerDef->base )
        goto LABEL_18;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        break;
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_16;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventViewTriggerDef->base);
LABEL_18:
      pos = g_streamPosGlob.pos;
      varScriptableEventViewTriggerDef = (ScriptableEventViewTriggerDef *)g_streamPosGlob.pos;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v6 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v7 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v7;
    varScriptableEventBaseDef = v6;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_18;
  }
}

/*
==============
Postload_ScriptableEventViewmodelChangeImageDef
==============
*/
void Postload_ScriptableEventViewmodelChangeImageDef(const DBStreamStart streamStart)
{
  ScriptableEventViewmodelChangeImageDef *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 

  if ( streamStart != (varScriptableEventViewmodelChangeImageDef != (ScriptableEventViewmodelChangeImageDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventViewmodelChangeImageDef, 0x10ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x10ui64);
  v2 = varScriptableEventViewmodelChangeImageDef;
  base = varScriptableEventViewmodelChangeImageDef->base;
  if ( varScriptableEventViewmodelChangeImageDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventViewmodelChangeImageDef->base);
      return;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varScriptableEventBaseDef = v4;
    varXString = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Postload_ScriptableEventViewmodelChangeImageDefArray
==============
*/
void Postload_ScriptableEventViewmodelChangeImageDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventViewmodelChangeImageDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventViewmodelChangeImageDef, 16 * count);
  for ( i = varScriptableEventViewmodelChangeImageDef; v2; --v2 )
  {
    varScriptableEventViewmodelChangeImageDef = i;
    Postload_ScriptableEventViewmodelChangeImageDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventViewmodelChangeImageDefStream
==============
*/
void Postload_ScriptableEventViewmodelChangeImageDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventViewmodelChangeImageDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 36252, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventViewmodelChangeImageDef;
    while ( 1 )
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x10ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x10ui64);
      g_streamPosGlob.pos += 16;
      v4 = varScriptableEventViewmodelChangeImageDef;
      base = varScriptableEventViewmodelChangeImageDef->base;
      if ( !varScriptableEventViewmodelChangeImageDef->base )
        goto LABEL_18;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        break;
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_16;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventViewmodelChangeImageDef->base);
LABEL_18:
      pos = g_streamPosGlob.pos;
      varScriptableEventViewmodelChangeImageDef = (ScriptableEventViewmodelChangeImageDef *)g_streamPosGlob.pos;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v6 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v7 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v7;
    varScriptableEventBaseDef = v6;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_18;
  }
}

/*
==============
Postload_ScriptableEventViewmodelShaderParamDef
==============
*/
void Postload_ScriptableEventViewmodelShaderParamDef(const DBStreamStart streamStart)
{
  ScriptableEventViewmodelShaderParamDef *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 

  if ( streamStart != (varScriptableEventViewmodelShaderParamDef != (ScriptableEventViewmodelShaderParamDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventViewmodelShaderParamDef, 0x28ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x28ui64);
  v2 = varScriptableEventViewmodelShaderParamDef;
  base = varScriptableEventViewmodelShaderParamDef->base;
  if ( varScriptableEventViewmodelShaderParamDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventViewmodelShaderParamDef->base);
      return;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varScriptableEventBaseDef = v4;
    varXString = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Postload_ScriptableEventViewmodelShaderParamDefArray
==============
*/
void Postload_ScriptableEventViewmodelShaderParamDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventViewmodelShaderParamDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventViewmodelShaderParamDef, 40 * count);
  for ( i = varScriptableEventViewmodelShaderParamDef; v2; --v2 )
  {
    varScriptableEventViewmodelShaderParamDef = i;
    Postload_ScriptableEventViewmodelShaderParamDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventViewmodelShaderParamDefStream
==============
*/
void Postload_ScriptableEventViewmodelShaderParamDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventViewmodelShaderParamDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 36096, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventViewmodelShaderParamDef;
    while ( 1 )
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x28ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x28ui64);
      g_streamPosGlob.pos += 40;
      v4 = varScriptableEventViewmodelShaderParamDef;
      base = varScriptableEventViewmodelShaderParamDef->base;
      if ( !varScriptableEventViewmodelShaderParamDef->base )
        goto LABEL_18;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        break;
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_16;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventViewmodelShaderParamDef->base);
LABEL_18:
      pos = g_streamPosGlob.pos;
      varScriptableEventViewmodelShaderParamDef = (ScriptableEventViewmodelShaderParamDef *)g_streamPosGlob.pos;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v6 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v7 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v7;
    varScriptableEventBaseDef = v6;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_18;
  }
}

/*
==============
Postload_ScriptableEventWaitDef
==============
*/
void Postload_ScriptableEventWaitDef(const DBStreamStart streamStart)
{
  ScriptableEventWaitDef *v2; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 

  if ( streamStart != (varScriptableEventWaitDef != (ScriptableEventWaitDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableEventWaitDef, 0x18ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x18ui64);
  v2 = varScriptableEventWaitDef;
  base = varScriptableEventWaitDef->base;
  if ( varScriptableEventWaitDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      v2->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventWaitDef->base);
      return;
    }
    v4 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varScriptableEventBaseDef = v4;
    varXString = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Postload_ScriptableEventWaitDefArray
==============
*/
void Postload_ScriptableEventWaitDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventWaitDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableEventWaitDef, 24 * count);
  for ( i = varScriptableEventWaitDef; v2; --v2 )
  {
    varScriptableEventWaitDef = i;
    Postload_ScriptableEventWaitDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableEventWaitDefStream
==============
*/
void Postload_ScriptableEventWaitDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventWaitDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 28233, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventWaitDef;
    while ( 1 )
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x18ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x18ui64);
      g_streamPosGlob.pos += 24;
      v4 = varScriptableEventWaitDef;
      base = varScriptableEventWaitDef->base;
      if ( !varScriptableEventWaitDef->base )
        goto LABEL_18;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        break;
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_16;
      v4->base = (ScriptableEventBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableEventWaitDef->base);
LABEL_18:
      pos = g_streamPosGlob.pos;
      varScriptableEventWaitDef = (ScriptableEventWaitDef *)g_streamPosGlob.pos;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v6 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->base = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    DB_IncStreamPos(0x10ui64);
    v7 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Postload_XString(NotAtStart);
    varXString = v7;
    varScriptableEventBaseDef = v6;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_18;
  }
}

/*
==============
Postload_ScriptableInstance
==============
*/
void Postload_ScriptableInstance(const DBStreamStart streamStart)
{
  ScriptableDef **v2; 
  scr_string_t *v3; 

  if ( streamStart != (varScriptableInstance != (ScriptableInstance *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableInstance, 0x48ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x48ui64);
  v2 = varScriptableDefPtr;
  varScriptableDefPtr = (ScriptableDef **)varScriptableInstance;
  Postload_ScriptableDefPtr(NotAtStart);
  varScriptableDefPtr = v2;
  v3 = varscr_string_t;
  varscr_string_t = &varScriptableInstance->classname;
  Postload_scr_string_t(NotAtStart);
  varscr_string_t = &varScriptableInstance->target;
  Postload_scr_string_t(NotAtStart);
  varscr_string_t = &varScriptableInstance->targetname;
  Postload_scr_string_t(NotAtStart);
  varscr_string_t = &varScriptableInstance->script_linkname;
  Postload_scr_string_t(NotAtStart);
  varscr_string_t = &varScriptableInstance->script_linkto;
  Postload_scr_string_t(NotAtStart);
  varscr_string_t = &varScriptableInstance->script_noteworthy;
  Postload_scr_string_t(NotAtStart);
  varscr_string_t = v3;
}

/*
==============
Postload_ScriptableInstanceArray
==============
*/
void Postload_ScriptableInstanceArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableInstance *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableInstance, 72 * count);
  for ( i = varScriptableInstance; v2; --v2 )
  {
    varScriptableInstance = i;
    Postload_ScriptableInstance(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableInstanceStream
==============
*/
void Postload_ScriptableInstanceStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ScriptableDef **v5; 
  scr_string_t *v6; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 45260, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varScriptableInstance;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x48ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x48ui64);
      v5 = varScriptableDefPtr;
      g_streamPosGlob.pos += 72;
      varScriptableDefPtr = (ScriptableDef **)varScriptableInstance;
      Postload_ScriptableDefPtr(NotAtStart);
      varScriptableDefPtr = v5;
      v6 = varscr_string_t;
      varscr_string_t = &varScriptableInstance->classname;
      Postload_scr_string_t(NotAtStart);
      varscr_string_t = &varScriptableInstance->target;
      Postload_scr_string_t(NotAtStart);
      varscr_string_t = &varScriptableInstance->targetname;
      Postload_scr_string_t(NotAtStart);
      varscr_string_t = &varScriptableInstance->script_linkname;
      Postload_scr_string_t(NotAtStart);
      varscr_string_t = &varScriptableInstance->script_linkto;
      Postload_scr_string_t(NotAtStart);
      varscr_string_t = &varScriptableInstance->script_noteworthy;
      Postload_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableInstance = (ScriptableInstance *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varscr_string_t = v6;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ScriptableMapEnts
==============
*/
void Postload_ScriptableMapEnts(const DBStreamStart streamStart)
{
  ScriptableMapEnts *v2; 
  ScriptableInstance *v3; 
  __int64 mapInstanceCount; 
  ScriptableInstance *i; 
  ScriptableReservedDynents *v6; 
  ScriptableMapEnts *v7; 
  SpatialPartition_Population_Tree *v8; 
  SpatialPartition_Population_Tree *v9; 

  if ( streamStart != (varScriptableMapEnts != (ScriptableMapEnts *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableMapEnts, 0xD8ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0xD8ui64);
  v2 = varScriptableMapEnts;
  if ( varScriptableMapEnts->mapInstances )
  {
    v3 = varScriptableInstance;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->mapInstances = (ScriptableInstance *)g_streamPosGlob.pos;
    varScriptableInstance = (ScriptableInstance *)g_streamPosGlob.pos;
    mapInstanceCount = varScriptableMapEnts->mapInstanceCount;
    if ( 72 * mapInstanceCount )
    {
      if ( (unsigned __int64)(72 * mapInstanceCount) > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(72 * mapInstanceCount);
    }
    for ( i = varScriptableInstance; mapInstanceCount; --mapInstanceCount )
    {
      varScriptableInstance = i;
      Postload_ScriptableInstance(NotAtStart);
      ++i;
    }
    varScriptableInstance = v3;
  }
  v6 = varScriptableReservedDynents;
  varScriptableReservedDynents = varScriptableMapEnts->reservedDynents;
  Postload_ScriptableReservedDynents(NotAtStart);
  varScriptableReservedDynents = &varScriptableMapEnts->reservedDynents[1];
  Postload_ScriptableReservedDynents(NotAtStart);
  v7 = varScriptableMapEnts;
  varScriptableReservedDynents = v6;
  if ( varScriptableMapEnts->spatialPopulationTree )
  {
    v8 = varSpatialPartition_Population_Tree;
    v9 = AllocPostload_SpatialPartition_Population_Tree();
    v7->spatialPopulationTree = v9;
    varSpatialPartition_Population_Tree = v9;
    Postload_SpatialPartition_Population_Tree(AtStart);
    varSpatialPartition_Population_Tree = v8;
  }
}

/*
==============
Postload_ScriptableMapEntsArray
==============
*/
void Postload_ScriptableMapEntsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableMapEnts *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableMapEnts, 216 * count);
  for ( i = varScriptableMapEnts; v2; --v2 )
  {
    varScriptableMapEnts = i;
    Postload_ScriptableMapEnts(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableMapEntsStream
==============
*/
void Postload_ScriptableMapEntsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ScriptableMapEnts *v5; 
  ScriptableInstance *v6; 
  __int64 mapInstanceCount; 
  ScriptableInstance *i; 
  ScriptableReservedDynents *v9; 
  ScriptableMapEnts *v10; 
  SpatialPartition_Population_Tree *v11; 
  SpatialPartition_Population_Tree *v12; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 46293, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varScriptableMapEnts;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0xD8ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0xD8ui64);
      v5 = varScriptableMapEnts;
      g_streamPosGlob.pos += 216;
      if ( varScriptableMapEnts->mapInstances )
      {
        v6 = varScriptableInstance;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v5->mapInstances = (ScriptableInstance *)g_streamPosGlob.pos;
        varScriptableInstance = (ScriptableInstance *)g_streamPosGlob.pos;
        mapInstanceCount = varScriptableMapEnts->mapInstanceCount;
        if ( 72 * mapInstanceCount )
        {
          if ( (unsigned __int64)(72 * mapInstanceCount) > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
            __debugbreak();
          DB_IncStreamPos(72 * mapInstanceCount);
        }
        for ( i = varScriptableInstance; mapInstanceCount; --mapInstanceCount )
        {
          varScriptableInstance = i;
          Postload_ScriptableInstance(NotAtStart);
          ++i;
        }
        varScriptableInstance = v6;
      }
      v9 = varScriptableReservedDynents;
      varScriptableReservedDynents = varScriptableMapEnts->reservedDynents;
      Postload_ScriptableReservedDynents(NotAtStart);
      varScriptableReservedDynents = &varScriptableMapEnts->reservedDynents[1];
      Postload_ScriptableReservedDynents(NotAtStart);
      v10 = varScriptableMapEnts;
      varScriptableReservedDynents = v9;
      if ( varScriptableMapEnts->spatialPopulationTree )
      {
        v11 = varSpatialPartition_Population_Tree;
        v12 = AllocPostload_SpatialPartition_Population_Tree();
        v10->spatialPopulationTree = v12;
        varSpatialPartition_Population_Tree = v12;
        Postload_SpatialPartition_Population_Tree(AtStart);
        varSpatialPartition_Population_Tree = v11;
      }
      pos = g_streamPosGlob.pos;
      varScriptableMapEnts = (ScriptableMapEnts *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ScriptableModelUnion
==============
*/
void Postload_ScriptableModelUnion(const DBStreamStart streamStart)
{
  ScriptableDataType dataType; 
  XCompositeModelDef **v2; 
  XModel **v3; 

  dataType = varScriptableEventModelDef->dataType;
  if ( dataType == SCRIPTABLE_DATA_TYPE_XCOMPOSITEMODEL )
  {
    v2 = varXCompositeModelDefPtr;
    varXCompositeModelDefPtr = &varScriptableModelUnion->compositeModel;
    Postload_XCompositeModelDefPtr(streamStart);
    varXCompositeModelDefPtr = v2;
  }
  else if ( dataType == SCRIPTABLE_DATA_TYPE_XMODEL )
  {
    v3 = varXModelPtr;
    varXModelPtr = (XModel **)varScriptableModelUnion;
    Postload_XModelPtr(streamStart);
    varXModelPtr = v3;
  }
}

/*
==============
Postload_ScriptableModelUnionArray
==============
*/
void Postload_ScriptableModelUnionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableModelUnion *i; 
  ScriptableDataType dataType; 
  XCompositeModelDef **v5; 
  XModel **v6; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableModelUnion, 8 * count);
  for ( i = varScriptableModelUnion; v2; --v2 )
  {
    varScriptableModelUnion = i;
    dataType = varScriptableEventModelDef->dataType;
    if ( dataType == SCRIPTABLE_DATA_TYPE_XCOMPOSITEMODEL )
    {
      v5 = varXCompositeModelDefPtr;
      varXCompositeModelDefPtr = &i->compositeModel;
      Postload_XCompositeModelDefPtr(NotAtStart);
      varXCompositeModelDefPtr = v5;
    }
    else if ( dataType == SCRIPTABLE_DATA_TYPE_XMODEL )
    {
      v6 = varXModelPtr;
      varXModelPtr = (XModel **)i;
      Postload_XModelPtr(NotAtStart);
      varXModelPtr = v6;
    }
    ++i;
  }
}

/*
==============
Postload_ScriptableModelUnionStream
==============
*/
void Postload_ScriptableModelUnionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ScriptableModelUnion *pos; 
  ScriptableDataType dataType; 
  XCompositeModelDef **v5; 
  XModel **v6; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 28879, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = varScriptableModelUnion;
    do
    {
      dataType = varScriptableEventModelDef->dataType;
      if ( dataType == SCRIPTABLE_DATA_TYPE_XCOMPOSITEMODEL )
      {
        v5 = varXCompositeModelDefPtr;
        varXCompositeModelDefPtr = &pos->compositeModel;
        Postload_XCompositeModelDefPtr(AtStart);
        varXCompositeModelDefPtr = v5;
      }
      else if ( dataType == SCRIPTABLE_DATA_TYPE_XMODEL )
      {
        v6 = varXModelPtr;
        varXModelPtr = (XModel **)pos;
        Postload_XModelPtr(AtStart);
        varXModelPtr = v6;
      }
      pos = (ScriptableModelUnion *)g_streamPosGlob.pos;
      varScriptableModelUnion = (ScriptableModelUnion *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ScriptableNoteTrackDef
==============
*/
void Postload_ScriptableNoteTrackDef(const DBStreamStart streamStart)
{
  const char **v2; 
  scr_string_t *v3; 
  ScriptableNoteTrackDef *v4; 
  ScriptableEventDef *events; 
  ScriptableEventDef *v6; 

  if ( streamStart != (varScriptableNoteTrackDef != (ScriptableNoteTrackDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableNoteTrackDef, 0x20ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x20ui64);
  v2 = varXString;
  varXString = &varScriptableNoteTrackDef->noteTrackName;
  Postload_XString(NotAtStart);
  varXString = v2;
  v3 = varscr_string_t;
  varscr_string_t = &varScriptableNoteTrackDef->scrNoteTrackName;
  Postload_scr_string_t(NotAtStart);
  v4 = varScriptableNoteTrackDef;
  varscr_string_t = v3;
  events = varScriptableNoteTrackDef->events;
  if ( events )
  {
    if ( events == (ScriptableEventDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( events != (ScriptableEventDef *)-2i64 )
    {
      v4->events = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableNoteTrackDef->events);
      return;
    }
    v6 = varScriptableEventDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->events = (ScriptableEventDef *)g_streamPosGlob.pos;
    varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
    Postload_ScriptableEventDefArray(AtStart, varScriptableNoteTrackDef->numEvents);
    varScriptableEventDef = v6;
    if ( events == (ScriptableEventDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Postload_ScriptableNoteTrackDefArray
==============
*/
void Postload_ScriptableNoteTrackDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableNoteTrackDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableNoteTrackDef, 32 * count);
  for ( i = varScriptableNoteTrackDef; v2; --v2 )
  {
    varScriptableNoteTrackDef = i;
    Postload_ScriptableNoteTrackDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableNoteTrackDefStream
==============
*/
void Postload_ScriptableNoteTrackDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  const char **v5; 
  scr_string_t *v6; 
  ScriptableNoteTrackDef *v7; 
  ScriptableEventDef *events; 
  ScriptableEventDef *v9; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 27643, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varScriptableNoteTrackDef;
    pos = g_streamPosGlob.pos;
    while ( 1 )
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x20ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x20ui64);
      v5 = varXString;
      g_streamPosGlob.pos += 32;
      varXString = &varScriptableNoteTrackDef->noteTrackName;
      Postload_XString(NotAtStart);
      varXString = v5;
      v6 = varscr_string_t;
      varscr_string_t = &varScriptableNoteTrackDef->scrNoteTrackName;
      Postload_scr_string_t(NotAtStart);
      v7 = varScriptableNoteTrackDef;
      varscr_string_t = v6;
      events = varScriptableNoteTrackDef->events;
      if ( !events )
        goto LABEL_18;
      if ( events == (ScriptableEventDef *)-1i64 )
        break;
      if ( events == (ScriptableEventDef *)-2i64 )
        goto LABEL_16;
      v7->events = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableNoteTrackDef->events);
LABEL_18:
      pos = g_streamPosGlob.pos;
      varScriptableNoteTrackDef = (ScriptableNoteTrackDef *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v9 = varScriptableEventDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v7->events = (ScriptableEventDef *)g_streamPosGlob.pos;
    varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
    Postload_ScriptableEventDefArray(AtStart, varScriptableNoteTrackDef->numEvents);
    varScriptableEventDef = v9;
    if ( events == (ScriptableEventDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_18;
  }
}

/*
==============
Postload_ScriptablePartDef
==============
*/
void Postload_ScriptablePartDef(const DBStreamStart streamStart)
{
  const char **v2; 
  scr_string_t *v3; 
  const char **v4; 
  scr_string_t *v5; 
  ScriptablePartDef *v6; 
  ScriptableStateDef *states; 
  ScriptableStateDef *v8; 
  __int64 numStates; 
  ScriptableStateDef *i; 
  ScriptableStateDef *v11; 
  ScriptableStateBaseDef *v12; 
  ScriptableStateDefUnion *v13; 
  ScriptablePartDef *v14; 
  __int64 numChildParts; 
  ScriptablePartDef *j; 
  ScriptablePartDef *v17; 
  ScriptableDamageTagOverride *v18; 
  __int64 numDamageTagOverrides; 
  unsigned __int64 v20; 
  ScriptableDamageTagOverride *k; 
  ScriptableDamageTagOverride *v22; 
  const char **v23; 
  scr_string_t *v24; 

  if ( streamStart != (varScriptablePartDef != (ScriptablePartDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptablePartDef, 0x68ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x68ui64);
  v2 = varXString;
  varXString = &varScriptablePartDef->name;
  Postload_XString(NotAtStart);
  varXString = v2;
  v3 = varscr_string_t;
  varscr_string_t = &varScriptablePartDef->scrName;
  Postload_scr_string_t(NotAtStart);
  varscr_string_t = v3;
  v4 = varXString;
  varXString = &varScriptablePartDef->tagName;
  Postload_XString(NotAtStart);
  varXString = v4;
  v5 = varscr_string_t;
  varscr_string_t = &varScriptablePartDef->scrTagName;
  Postload_scr_string_t(NotAtStart);
  varscr_string_t = v5;
  v6 = varScriptablePartDef;
  states = varScriptablePartDef->states;
  if ( states )
  {
    if ( states == (ScriptableStateDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( states != (ScriptableStateDef *)-2i64 )
    {
      v6->states = (ScriptableStateDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptablePartDef->states);
      goto LABEL_21;
    }
    v8 = varScriptableStateDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v6->states = (ScriptableStateDef *)g_streamPosGlob.pos;
    varScriptableStateDef = (ScriptableStateDef *)g_streamPosGlob.pos;
    numStates = varScriptablePartDef->numStates;
    if ( 160 * numStates )
    {
      if ( (unsigned __int64)(160 * numStates) > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(160 * numStates);
    }
    for ( i = varScriptableStateDef; numStates; --numStates )
    {
      v11 = i;
      varScriptableStateDef = i;
      if ( i == (ScriptableStateDef *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0xA0ui64);
        v11 = varScriptableStateDef;
      }
      v12 = varScriptableStateBaseDef;
      varScriptableStateBaseDef = &v11->base;
      Postload_ScriptableStateBaseDef(NotAtStart);
      varScriptableStateBaseDef = v12;
      v13 = varScriptableStateDefUnion;
      varScriptableStateDefUnion = &varScriptableStateDef->data;
      Postload_ScriptableStateDefUnion(NotAtStart);
      ++i;
      varScriptableStateDefUnion = v13;
    }
    varScriptableStateDef = v8;
    if ( states == (ScriptableStateDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_21:
  v14 = varScriptablePartDef;
  if ( varScriptablePartDef->childParts )
  {
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v14->childParts = (ScriptablePartDef *)g_streamPosGlob.pos;
    varScriptablePartDef = (ScriptablePartDef *)g_streamPosGlob.pos;
    numChildParts = v14->numChildParts;
    if ( 104 * numChildParts )
    {
      if ( (unsigned __int64)(104 * numChildParts) > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(104 * numChildParts);
    }
    for ( j = varScriptablePartDef; numChildParts; --numChildParts )
    {
      varScriptablePartDef = j;
      Postload_ScriptablePartDef(NotAtStart);
      ++j;
    }
    varScriptablePartDef = v14;
  }
  v17 = varScriptablePartDef;
  if ( varScriptablePartDef->damageTagOverrides )
  {
    v18 = varScriptableDamageTagOverride;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v17->damageTagOverrides = (ScriptableDamageTagOverride *)g_streamPosGlob.pos;
    varScriptableDamageTagOverride = (ScriptableDamageTagOverride *)g_streamPosGlob.pos;
    numDamageTagOverrides = varScriptablePartDef->numDamageTagOverrides;
    v20 = 16 * numDamageTagOverrides;
    if ( 16 * numDamageTagOverrides )
    {
      if ( v20 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v20);
    }
    for ( k = varScriptableDamageTagOverride; numDamageTagOverrides; --numDamageTagOverrides )
    {
      v22 = k;
      varScriptableDamageTagOverride = k;
      if ( k == (ScriptableDamageTagOverride *)g_streamPosGlob.pos )
      {
        DB_PatchMem_ValidatePostloadStream(NotAtStart, k, 0x10ui64);
        v22 = varScriptableDamageTagOverride;
      }
      v23 = varXString;
      varXString = &v22->tag;
      Postload_XString(NotAtStart);
      varXString = v23;
      v24 = varscr_string_t;
      varscr_string_t = &varScriptableDamageTagOverride->scrTag;
      Postload_scr_string_t(NotAtStart);
      ++k;
      varscr_string_t = v24;
    }
    varScriptableDamageTagOverride = v18;
  }
}

/*
==============
Postload_ScriptablePartDefArray
==============
*/
void Postload_ScriptablePartDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptablePartDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptablePartDef, 104 * count);
  for ( i = varScriptablePartDef; v2; --v2 )
  {
    varScriptablePartDef = i;
    Postload_ScriptablePartDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptablePartDefStream
==============
*/
void Postload_ScriptablePartDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 44146, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  for ( ; count; --count )
  {
    Postload_ScriptablePartDef(AtStart);
    varScriptablePartDef = (ScriptablePartDef *)g_streamPosGlob.pos;
  }
}

/*
==============
Postload_ScriptablePartReference
==============
*/
void Postload_ScriptablePartReference(const DBStreamStart streamStart)
{
  if ( streamStart != (varScriptablePartReference != (ScriptablePartReference *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptablePartReference, 4ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(4ui64);
}

/*
==============
Postload_ScriptablePartReferenceArray
==============
*/
void Postload_ScriptablePartReferenceArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream_0(streamStart, varScriptablePartReference, 4 * count);
}

/*
==============
Postload_ScriptablePartReferenceStream
==============
*/
void Postload_ScriptablePartReferenceStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ScriptablePartReference *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 27441, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varScriptablePartReference;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ScriptablePartReference *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 4ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(4ui64);
      pos = g_streamPosGlob.pos + 4;
      g_streamPosGlob.pos = pos;
      v3 = (ScriptablePartReference *)pos;
      varScriptablePartReference = (ScriptablePartReference *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ScriptablePhysicsLimits
==============
*/
void Postload_ScriptablePhysicsLimits(const DBStreamStart streamStart)
{
  if ( streamStart != (varScriptablePhysicsLimits != (ScriptablePhysicsLimits *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptablePhysicsLimits, 0x18ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x18ui64);
}

/*
==============
Postload_ScriptablePhysicsLimitsArray
==============
*/
void Postload_ScriptablePhysicsLimitsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream_0(streamStart, varScriptablePhysicsLimits, 24 * count);
}

/*
==============
Postload_ScriptablePhysicsLimitsStream
==============
*/
void Postload_ScriptablePhysicsLimitsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ScriptablePhysicsLimits *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 45889, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varScriptablePhysicsLimits;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ScriptablePhysicsLimits *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x18ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x18ui64);
      pos = g_streamPosGlob.pos + 24;
      g_streamPosGlob.pos = pos;
      v3 = (ScriptablePhysicsLimits *)pos;
      varScriptablePhysicsLimits = (ScriptablePhysicsLimits *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ScriptableReservedDynent
==============
*/
void Postload_ScriptableReservedDynent(const DBStreamStart streamStart)
{
  if ( streamStart != (varScriptableReservedDynent != (ScriptableReservedDynent *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableReservedDynent, 8ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(8ui64);
}

/*
==============
Postload_ScriptableReservedDynentArray
==============
*/
void Postload_ScriptableReservedDynentArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream_0(streamStart, varScriptableReservedDynent, 8 * count);
}

/*
==============
Postload_ScriptableReservedDynentStream
==============
*/
void Postload_ScriptableReservedDynentStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ScriptableReservedDynent *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 45573, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varScriptableReservedDynent;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ScriptableReservedDynent *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 8ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(8ui64);
      pos = g_streamPosGlob.pos + 8;
      g_streamPosGlob.pos = pos;
      v3 = (ScriptableReservedDynent *)pos;
      varScriptableReservedDynent = (ScriptableReservedDynent *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ScriptableReservedDynents
==============
*/
void Postload_ScriptableReservedDynents(const DBStreamStart streamStart)
{
  ScriptableReservedDynents *v2; 
  ScriptableReservedDynent *v3; 
  unsigned __int64 v4; 

  if ( streamStart != (varScriptableReservedDynents != (ScriptableReservedDynents *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableReservedDynents, 0x10ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x10ui64);
  v2 = varScriptableReservedDynents;
  if ( varScriptableReservedDynents->reservedDynents )
  {
    v3 = varScriptableReservedDynent;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->reservedDynents = (ScriptableReservedDynent *)g_streamPosGlob.pos;
    varScriptableReservedDynent = (ScriptableReservedDynent *)g_streamPosGlob.pos;
    v4 = 8i64 * varScriptableReservedDynents->numReservedDynents;
    if ( v4 )
    {
      if ( v4 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(v4);
    }
    varScriptableReservedDynent = v3;
  }
}

/*
==============
Postload_ScriptableReservedDynentsArray
==============
*/
void Postload_ScriptableReservedDynentsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableReservedDynents *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableReservedDynents, 16 * count);
  for ( i = varScriptableReservedDynents; v2; --v2 )
  {
    varScriptableReservedDynents = i;
    Postload_ScriptableReservedDynents(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableReservedDynentsStream
==============
*/
void Postload_ScriptableReservedDynentsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ScriptableReservedDynents *v3; 
  unsigned __int8 *pos; 
  ScriptableReservedDynents *v5; 
  ScriptableReservedDynent *v6; 
  unsigned __int64 v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 45698, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varScriptableReservedDynents;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (ScriptableReservedDynents *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x10ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x10ui64);
      v5 = varScriptableReservedDynents;
      pos = g_streamPosGlob.pos + 16;
      g_streamPosGlob.pos += 16;
      if ( varScriptableReservedDynents->reservedDynents )
      {
        v6 = varScriptableReservedDynent;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        v5->reservedDynents = (ScriptableReservedDynent *)g_streamPosGlob.pos;
        pos = g_streamPosGlob.pos;
        varScriptableReservedDynent = (ScriptableReservedDynent *)g_streamPosGlob.pos;
        v7 = 8i64 * varScriptableReservedDynents->numReservedDynents;
        if ( v7 )
        {
          if ( v7 > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
            __debugbreak();
          DB_IncStreamPos(v7);
          pos = g_streamPosGlob.pos;
        }
        varScriptableReservedDynent = v6;
      }
      varScriptableReservedDynents = (ScriptableReservedDynents *)pos;
      v3 = (ScriptableReservedDynents *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ScriptableStateBaseDef
==============
*/
void Postload_ScriptableStateBaseDef(const DBStreamStart streamStart)
{
  const char **v2; 
  ScriptableStateBaseDef *v3; 
  ScriptableEventDef *events; 
  ScriptableEventDef *v5; 
  __int64 numEvents; 
  ScriptableEventDef *i; 

  if ( streamStart != (varScriptableStateBaseDef != (ScriptableStateBaseDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableStateBaseDef, 0x18ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x18ui64);
  v2 = varXString;
  varXString = &varScriptableStateBaseDef->name;
  Postload_XString(NotAtStart);
  varXString = v2;
  v3 = varScriptableStateBaseDef;
  events = varScriptableStateBaseDef->events;
  if ( events )
  {
    if ( events == (ScriptableEventDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( events != (ScriptableEventDef *)-2i64 )
    {
      v3->events = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableStateBaseDef->events);
      return;
    }
    v5 = varScriptableEventDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v3->events = (ScriptableEventDef *)g_streamPosGlob.pos;
    varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
    numEvents = varScriptableStateBaseDef->numEvents;
    if ( 176 * numEvents )
    {
      if ( (unsigned __int64)(176 * numEvents) > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(176 * numEvents);
    }
    for ( i = varScriptableEventDef; numEvents; --numEvents )
    {
      varScriptableEventDef = i;
      Postload_ScriptableEventDef(NotAtStart);
      ++i;
    }
    varScriptableEventDef = v5;
    if ( events == (ScriptableEventDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Postload_ScriptableStateBaseDefArray
==============
*/
void Postload_ScriptableStateBaseDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableStateBaseDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableStateBaseDef, 24 * count);
  for ( i = varScriptableStateBaseDef; v2; --v2 )
  {
    varScriptableStateBaseDef = i;
    Postload_ScriptableStateBaseDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableStateBaseDefStream
==============
*/
void Postload_ScriptableStateBaseDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  const char **v4; 
  ScriptableStateBaseDef *v5; 
  ScriptableEventDef *events; 
  ScriptableEventDef *v7; 
  __int64 numEvents; 
  ScriptableEventDef *i; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 41873, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableStateBaseDef;
    while ( 1 )
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 0x18ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x18ui64);
      v4 = varXString;
      g_streamPosGlob.pos += 24;
      varXString = &varScriptableStateBaseDef->name;
      Postload_XString(NotAtStart);
      varXString = v4;
      v5 = varScriptableStateBaseDef;
      events = varScriptableStateBaseDef->events;
      if ( !events )
        goto LABEL_25;
      if ( events == (ScriptableEventDef *)-1i64 )
        break;
      if ( events == (ScriptableEventDef *)-2i64 )
        goto LABEL_16;
      v5->events = (ScriptableEventDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableStateBaseDef->events);
LABEL_25:
      pos = g_streamPosGlob.pos;
      varScriptableStateBaseDef = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v7 = varScriptableEventDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v5->events = (ScriptableEventDef *)g_streamPosGlob.pos;
    varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
    numEvents = varScriptableStateBaseDef->numEvents;
    if ( 176 * numEvents )
    {
      if ( (unsigned __int64)(176 * numEvents) > 0x7FFFFFFF && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_preload_inline.h", 98, ASSERT_TYPE_ASSERT, "(size <= 2147483647i32)", (const char *)&queryFormat, "size <= INT32_MAX") )
        __debugbreak();
      DB_IncStreamPos(176 * numEvents);
    }
    for ( i = varScriptableEventDef; numEvents; --numEvents )
    {
      varScriptableEventDef = i;
      Postload_ScriptableEventDef(NotAtStart);
      ++i;
    }
    varScriptableEventDef = v7;
    if ( events == (ScriptableEventDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_25;
  }
}

/*
==============
Postload_ScriptableStateDef
==============
*/
void Postload_ScriptableStateDef(const DBStreamStart streamStart)
{
  ScriptableStateBaseDef *v2; 
  ScriptableStateDefUnion *v3; 

  if ( streamStart != (varScriptableStateDef != (ScriptableStateDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableStateDef, 0xA0ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0xA0ui64);
  v2 = varScriptableStateBaseDef;
  varScriptableStateBaseDef = &varScriptableStateDef->base;
  Postload_ScriptableStateBaseDef(NotAtStart);
  varScriptableStateBaseDef = v2;
  v3 = varScriptableStateDefUnion;
  varScriptableStateDefUnion = &varScriptableStateDef->data;
  Postload_ScriptableStateDefUnion(NotAtStart);
  varScriptableStateDefUnion = v3;
}

/*
==============
Postload_ScriptableStateDefArray
==============
*/
void Postload_ScriptableStateDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableStateDef *i; 
  ScriptableStateDef *v4; 
  ScriptableStateBaseDef *v5; 
  ScriptableStateDefUnion *v6; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableStateDef, 160 * count);
  for ( i = varScriptableStateDef; v2; --v2 )
  {
    v4 = i;
    varScriptableStateDef = i;
    if ( i == (ScriptableStateDef *)g_streamPosGlob.pos )
    {
      DB_PatchMem_ValidatePostloadStream(NotAtStart, i, 0xA0ui64);
      v4 = varScriptableStateDef;
    }
    v5 = varScriptableStateBaseDef;
    varScriptableStateBaseDef = &v4->base;
    Postload_ScriptableStateBaseDef(NotAtStart);
    varScriptableStateBaseDef = v5;
    v6 = varScriptableStateDefUnion;
    varScriptableStateDefUnion = &varScriptableStateDef->data;
    Postload_ScriptableStateDefUnion(NotAtStart);
    ++i;
    varScriptableStateDefUnion = v6;
  }
}

/*
==============
Postload_ScriptableStateDefStream
==============
*/
void Postload_ScriptableStateDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ScriptableStateBaseDef *v5; 
  ScriptableStateDefUnion *v6; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 43586, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varScriptableStateDef;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0xA0ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0xA0ui64);
      v5 = varScriptableStateBaseDef;
      g_streamPosGlob.pos += 160;
      varScriptableStateBaseDef = &varScriptableStateDef->base;
      Postload_ScriptableStateBaseDef(NotAtStart);
      varScriptableStateBaseDef = v5;
      v6 = varScriptableStateDefUnion;
      varScriptableStateDefUnion = &varScriptableStateDef->data;
      Postload_ScriptableStateDefUnion(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableStateDef = (ScriptableStateDef *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varScriptableStateDefUnion = v6;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ScriptableStateDefUnion
==============
*/
void Postload_ScriptableStateDefUnion(const DBStreamStart streamStart)
{
  Scriptable_StateType type; 
  ScriptableStateSimpleDef *v2; 
  ScriptableStateHealthDef *v3; 
  ScriptableStateScriptedDef *v4; 
  ScriptableStateUsableDef *v5; 

  type = varScriptableStateDef->type;
  if ( type )
  {
    switch ( type )
    {
      case Scriptable_StateType_Health:
        v3 = varScriptableStateHealthDef;
        varScriptableStateHealthDef = (ScriptableStateHealthDef *)varScriptableStateDefUnion;
        Postload_ScriptableStateHealthDef(streamStart);
        varScriptableStateHealthDef = v3;
        break;
      case Scriptable_StateType_Scripted:
        v4 = varScriptableStateScriptedDef;
        varScriptableStateScriptedDef = (ScriptableStateScriptedDef *)varScriptableStateDefUnion;
        Postload_ScriptableStateScriptedDef(streamStart);
        varScriptableStateScriptedDef = v4;
        break;
      case Scriptable_StateType_Usable:
        v5 = varScriptableStateUsableDef;
        varScriptableStateUsableDef = (ScriptableStateUsableDef *)varScriptableStateDefUnion;
        Postload_ScriptableStateUsableDef(streamStart);
        varScriptableStateUsableDef = v5;
        break;
    }
  }
  else
  {
    v2 = varScriptableStateSimpleDef;
    varScriptableStateSimpleDef = &varScriptableStateDefUnion->simple;
    Postload_ScriptableStateSimpleDef(streamStart);
    varScriptableStateSimpleDef = v2;
  }
}

/*
==============
Postload_ScriptableStateDefUnionArray
==============
*/
void Postload_ScriptableStateDefUnionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableStateDefUnion *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableStateDefUnion, count << 7);
  for ( i = varScriptableStateDefUnion; v2; --v2 )
  {
    varScriptableStateDefUnion = i;
    Postload_ScriptableStateDefUnion(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableStateDefUnionStream
==============
*/
void Postload_ScriptableStateDefUnionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ScriptableStateDefUnion *pos; 
  Scriptable_StateType type; 
  ScriptableStateSimpleDef *v5; 
  ScriptableStateHealthDef *v6; 
  ScriptableStateScriptedDef *v7; 
  ScriptableStateUsableDef *v8; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 43464, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = varScriptableStateDefUnion;
    do
    {
      type = varScriptableStateDef->type;
      if ( type )
      {
        switch ( type )
        {
          case Scriptable_StateType_Health:
            v6 = varScriptableStateHealthDef;
            varScriptableStateHealthDef = (ScriptableStateHealthDef *)pos;
            Postload_ScriptableStateHealthDef(AtStart);
            varScriptableStateHealthDef = v6;
            break;
          case Scriptable_StateType_Scripted:
            v7 = varScriptableStateScriptedDef;
            varScriptableStateScriptedDef = (ScriptableStateScriptedDef *)pos;
            Postload_ScriptableStateScriptedDef(AtStart);
            varScriptableStateScriptedDef = v7;
            break;
          case Scriptable_StateType_Usable:
            v8 = varScriptableStateUsableDef;
            varScriptableStateUsableDef = (ScriptableStateUsableDef *)pos;
            Postload_ScriptableStateUsableDef(AtStart);
            varScriptableStateUsableDef = v8;
            break;
        }
      }
      else
      {
        v5 = varScriptableStateSimpleDef;
        varScriptableStateSimpleDef = &pos->simple;
        Postload_ScriptableStateSimpleDef(AtStart);
        varScriptableStateSimpleDef = v5;
      }
      pos = (ScriptableStateDefUnion *)g_streamPosGlob.pos;
      varScriptableStateDefUnion = (ScriptableStateDefUnion *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ScriptableStateHealthDef
==============
*/
void Postload_ScriptableStateHealthDef(const DBStreamStart streamStart)
{
  ScriptableStateHealthDef *v2; 
  ScriptableStateBaseDef *base; 
  ScriptableStateBaseDef *v4; 
  ScriptableStateHealthDef *v5; 
  weapClass_t *weaponClasses; 
  weapClass_t *v7; 
  weapClass_t *v8; 
  ScriptableStateHealthDef *v9; 
  WeaponCompleteDef **weapons; 
  WeaponCompleteDef **v11; 
  WeaponCompleteDef **v12; 
  const char **v13; 
  scr_string_t *v14; 

  if ( streamStart != (varScriptableStateHealthDef != (ScriptableStateHealthDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableStateHealthDef, 0x60ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x60ui64);
  v2 = varScriptableStateHealthDef;
  base = varScriptableStateHealthDef->base;
  if ( varScriptableStateHealthDef->base )
  {
    if ( base == (ScriptableStateBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableStateBaseDef *)-2i64 )
    {
      v2->base = (ScriptableStateBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableStateHealthDef->base);
      goto LABEL_12;
    }
    v4 = varScriptableStateBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
    varScriptableStateBaseDef = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
    Postload_ScriptableStateBaseDef(AtStart);
    varScriptableStateBaseDef = v4;
    if ( base == (ScriptableStateBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_12:
  v5 = varScriptableStateHealthDef;
  weaponClasses = varScriptableStateHealthDef->weaponClasses;
  if ( !weaponClasses )
    goto LABEL_19;
  if ( weaponClasses == (weapClass_t *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( weaponClasses != (weapClass_t *)-2i64 )
  {
    v5->weaponClasses = (weapClass_t *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableStateHealthDef->weaponClasses);
    goto LABEL_19;
  }
  v7 = varweapClass_t;
  v8 = AllocPostload_weapClass_t();
  v5->weaponClasses = v8;
  varweapClass_t = v8;
  Postload_weapClass_tArray(AtStart, varScriptableStateHealthDef->numWeaponClasses);
  varweapClass_t = v7;
  if ( weaponClasses == (weapClass_t *)-1i64 )
    DB_PopSharedData();
LABEL_19:
  v9 = varScriptableStateHealthDef;
  weapons = varScriptableStateHealthDef->weapons;
  if ( weapons )
  {
    if ( weapons == (WeaponCompleteDef **)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( weapons != (WeaponCompleteDef **)-2i64 )
    {
      v9->weapons = (WeaponCompleteDef **)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableStateHealthDef->weapons);
      goto LABEL_26;
    }
    v11 = varWeaponCompleteDefPtr;
    v12 = AllocPostload_WeaponCompleteDefPtr();
    v9->weapons = v12;
    varWeaponCompleteDefPtr = v12;
    Postload_WeaponCompleteDefPtrArray(AtStart, varScriptableStateHealthDef->numWeapons);
    varWeaponCompleteDefPtr = v11;
    if ( weapons == (WeaponCompleteDef **)-1i64 )
      DB_PopSharedData();
  }
LABEL_26:
  v13 = varXString;
  varXString = &varScriptableStateHealthDef->script_id;
  Postload_XString(NotAtStart);
  varXString = v13;
  v14 = varscr_string_t;
  varscr_string_t = &varScriptableStateHealthDef->scrScript_id;
  Postload_scr_string_t(NotAtStart);
  varscr_string_t = v14;
}

/*
==============
Postload_ScriptableStateHealthDefArray
==============
*/
void Postload_ScriptableStateHealthDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableStateHealthDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableStateHealthDef, 96 * count);
  for ( i = varScriptableStateHealthDef; v2; --v2 )
  {
    varScriptableStateHealthDef = i;
    Postload_ScriptableStateHealthDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableStateHealthDefStream
==============
*/
void Postload_ScriptableStateHealthDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ScriptableStateHealthDef *v5; 
  ScriptableStateBaseDef *base; 
  ScriptableStateBaseDef *v7; 
  ScriptableStateHealthDef *v8; 
  weapClass_t *weaponClasses; 
  weapClass_t *v10; 
  weapClass_t *v11; 
  ScriptableStateHealthDef *v12; 
  WeaponCompleteDef **weapons; 
  WeaponCompleteDef **v14; 
  WeaponCompleteDef **v15; 
  const char **v16; 
  scr_string_t *v17; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 42525, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varScriptableStateHealthDef;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x60ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x60ui64);
      g_streamPosGlob.pos += 96;
      v5 = varScriptableStateHealthDef;
      base = varScriptableStateHealthDef->base;
      if ( varScriptableStateHealthDef->base )
      {
        if ( base == (ScriptableStateBaseDef *)-1i64 )
        {
          DB_PushSharedData();
        }
        else if ( base != (ScriptableStateBaseDef *)-2i64 )
        {
          v5->base = (ScriptableStateBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableStateHealthDef->base);
          goto LABEL_18;
        }
        v7 = varScriptableStateBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        v5->base = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
        varScriptableStateBaseDef = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
        Postload_ScriptableStateBaseDef(AtStart);
        varScriptableStateBaseDef = v7;
        if ( base == (ScriptableStateBaseDef *)-1i64 )
          DB_PopSharedData();
      }
LABEL_18:
      v8 = varScriptableStateHealthDef;
      weaponClasses = varScriptableStateHealthDef->weaponClasses;
      if ( !weaponClasses )
        goto LABEL_25;
      if ( weaponClasses == (weapClass_t *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( weaponClasses != (weapClass_t *)-2i64 )
      {
        v8->weaponClasses = (weapClass_t *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableStateHealthDef->weaponClasses);
        goto LABEL_25;
      }
      v10 = varweapClass_t;
      v11 = AllocPostload_weapClass_t();
      v8->weaponClasses = v11;
      varweapClass_t = v11;
      Postload_weapClass_tArray(AtStart, varScriptableStateHealthDef->numWeaponClasses);
      varweapClass_t = v10;
      if ( weaponClasses == (weapClass_t *)-1i64 )
        DB_PopSharedData();
LABEL_25:
      v12 = varScriptableStateHealthDef;
      weapons = varScriptableStateHealthDef->weapons;
      if ( weapons )
      {
        if ( weapons == (WeaponCompleteDef **)-1i64 )
        {
          DB_PushSharedData();
LABEL_30:
          v14 = varWeaponCompleteDefPtr;
          v15 = AllocPostload_WeaponCompleteDefPtr();
          v12->weapons = v15;
          varWeaponCompleteDefPtr = v15;
          Postload_WeaponCompleteDefPtrArray(AtStart, varScriptableStateHealthDef->numWeapons);
          varWeaponCompleteDefPtr = v14;
          if ( weapons == (WeaponCompleteDef **)-1i64 )
            DB_PopSharedData();
          goto LABEL_32;
        }
        if ( weapons == (WeaponCompleteDef **)-2i64 )
          goto LABEL_30;
        v12->weapons = (WeaponCompleteDef **)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableStateHealthDef->weapons);
      }
LABEL_32:
      v16 = varXString;
      varXString = &varScriptableStateHealthDef->script_id;
      Postload_XString(NotAtStart);
      varXString = v16;
      v17 = varscr_string_t;
      varscr_string_t = &varScriptableStateHealthDef->scrScript_id;
      Postload_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableStateHealthDef = (ScriptableStateHealthDef *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varscr_string_t = v17;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_ScriptableStateScriptedDef
==============
*/
void Postload_ScriptableStateScriptedDef(const DBStreamStart streamStart)
{
  ScriptableStateScriptedDef *v2; 
  ScriptableStateBaseDef *base; 
  ScriptableStateBaseDef *v4; 
  const char **v5; 
  scr_string_t *v6; 

  if ( streamStart != (varScriptableStateScriptedDef != (ScriptableStateScriptedDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableStateScriptedDef, 0x18ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x18ui64);
  v2 = varScriptableStateScriptedDef;
  base = varScriptableStateScriptedDef->base;
  if ( varScriptableStateScriptedDef->base )
  {
    if ( base == (ScriptableStateBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableStateBaseDef *)-2i64 )
    {
      v2->base = (ScriptableStateBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableStateScriptedDef->base);
      goto LABEL_12;
    }
    v4 = varScriptableStateBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
    varScriptableStateBaseDef = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
    Postload_ScriptableStateBaseDef(AtStart);
    varScriptableStateBaseDef = v4;
    if ( base == (ScriptableStateBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_12:
  v5 = varXString;
  varXString = &varScriptableStateScriptedDef->script_id;
  Postload_XString(NotAtStart);
  varXString = v5;
  v6 = varscr_string_t;
  varscr_string_t = &varScriptableStateScriptedDef->scrScript_id;
  Postload_scr_string_t(NotAtStart);
  varscr_string_t = v6;
}

/*
==============
Postload_ScriptableStateScriptedDefArray
==============
*/
void Postload_ScriptableStateScriptedDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableStateScriptedDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableStateScriptedDef, 24 * count);
  for ( i = varScriptableStateScriptedDef; v2; --v2 )
  {
    varScriptableStateScriptedDef = i;
    Postload_ScriptableStateScriptedDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableStateScriptedDefStream
==============
*/
void Postload_ScriptableStateScriptedDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ScriptableStateScriptedDef *v5; 
  ScriptableStateBaseDef *base; 
  ScriptableStateBaseDef *v7; 
  const char **v8; 
  scr_string_t *v9; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 42681, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varScriptableStateScriptedDef;
    pos = g_streamPosGlob.pos;
    while ( 1 )
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x18ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x18ui64);
      g_streamPosGlob.pos += 24;
      v5 = varScriptableStateScriptedDef;
      base = varScriptableStateScriptedDef->base;
      if ( !varScriptableStateScriptedDef->base )
        goto LABEL_18;
      if ( base == (ScriptableStateBaseDef *)-1i64 )
        break;
      if ( base == (ScriptableStateBaseDef *)-2i64 )
        goto LABEL_16;
      v5->base = (ScriptableStateBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableStateScriptedDef->base);
LABEL_18:
      v8 = varXString;
      varXString = &varScriptableStateScriptedDef->script_id;
      Postload_XString(NotAtStart);
      varXString = v8;
      v9 = varscr_string_t;
      varscr_string_t = &varScriptableStateScriptedDef->scrScript_id;
      Postload_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableStateScriptedDef = (ScriptableStateScriptedDef *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varscr_string_t = v9;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v7 = varScriptableStateBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v5->base = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
    varScriptableStateBaseDef = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
    Postload_ScriptableStateBaseDef(AtStart);
    varScriptableStateBaseDef = v7;
    if ( base == (ScriptableStateBaseDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_18;
  }
}

/*
==============
Postload_ScriptableStateSimpleDef
==============
*/
void Postload_ScriptableStateSimpleDef(const DBStreamStart streamStart)
{
  ScriptableStateSimpleDef *v2; 
  ScriptableStateBaseDef *base; 
  ScriptableStateBaseDef *v4; 

  if ( streamStart != (varScriptableStateSimpleDef != (ScriptableStateSimpleDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableStateSimpleDef, 8ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(8ui64);
  v2 = varScriptableStateSimpleDef;
  base = varScriptableStateSimpleDef->base;
  if ( varScriptableStateSimpleDef->base )
  {
    if ( base == (ScriptableStateBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableStateBaseDef *)-2i64 )
    {
      v2->base = (ScriptableStateBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableStateSimpleDef->base);
      return;
    }
    v4 = varScriptableStateBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
    varScriptableStateBaseDef = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
    Postload_ScriptableStateBaseDef(AtStart);
    varScriptableStateBaseDef = v4;
    if ( base == (ScriptableStateBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Postload_ScriptableStateSimpleDefArray
==============
*/
void Postload_ScriptableStateSimpleDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableStateSimpleDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableStateSimpleDef, 8 * count);
  for ( i = varScriptableStateSimpleDef; v2; --v2 )
  {
    varScriptableStateSimpleDef = i;
    Postload_ScriptableStateSimpleDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableStateSimpleDefStream
==============
*/
void Postload_ScriptableStateSimpleDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableStateSimpleDef *v4; 
  ScriptableStateBaseDef *base; 
  ScriptableStateBaseDef *v6; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 41983, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableStateSimpleDef;
    while ( 1 )
    {
      if ( pos != g_streamPosGlob.pos )
        DB_PatchMem_ValidatePostloadStream(AtStart, pos, 8ui64);
      if ( !g_streamPosGlob.pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(8ui64);
      g_streamPosGlob.pos += 8;
      v4 = varScriptableStateSimpleDef;
      base = varScriptableStateSimpleDef->base;
      if ( !varScriptableStateSimpleDef->base )
        goto LABEL_18;
      if ( base == (ScriptableStateBaseDef *)-1i64 )
        break;
      if ( base == (ScriptableStateBaseDef *)-2i64 )
        goto LABEL_16;
      v4->base = (ScriptableStateBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableStateSimpleDef->base);
LABEL_18:
      pos = g_streamPosGlob.pos;
      varScriptableStateSimpleDef = (ScriptableStateSimpleDef *)g_streamPosGlob.pos;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v6 = varScriptableStateBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v4->base = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
    varScriptableStateBaseDef = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
    Postload_ScriptableStateBaseDef(AtStart);
    varScriptableStateBaseDef = v6;
    if ( base == (ScriptableStateBaseDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_18;
  }
}

/*
==============
Postload_ScriptableStateUsableDef
==============
*/
void Postload_ScriptableStateUsableDef(const DBStreamStart streamStart)
{
  ScriptableStateUsableDef *v2; 
  ScriptableStateBaseDef *base; 
  ScriptableStateBaseDef *v4; 
  const char **v5; 
  scr_string_t *v6; 
  const char **v7; 
  GfxImage **v8; 

  if ( streamStart != (varScriptableStateUsableDef != (ScriptableStateUsableDef *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptableStateUsableDef, 0x80ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x80ui64);
  v2 = varScriptableStateUsableDef;
  base = varScriptableStateUsableDef->base;
  if ( varScriptableStateUsableDef->base )
  {
    if ( base == (ScriptableStateBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableStateBaseDef *)-2i64 )
    {
      v2->base = (ScriptableStateBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableStateUsableDef->base);
      goto LABEL_12;
    }
    v4 = varScriptableStateBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v2->base = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
    varScriptableStateBaseDef = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
    Postload_ScriptableStateBaseDef(AtStart);
    varScriptableStateBaseDef = v4;
    if ( base == (ScriptableStateBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_12:
  v5 = varXString;
  varXString = &varScriptableStateUsableDef->script_id;
  Postload_XString(NotAtStart);
  varXString = v5;
  v6 = varscr_string_t;
  varscr_string_t = &varScriptableStateUsableDef->scrScript_id;
  Postload_scr_string_t(NotAtStart);
  varscr_string_t = &varScriptableStateUsableDef->hintTag;
  Postload_scr_string_t(NotAtStart);
  varscr_string_t = v6;
  v7 = varXString;
  varXString = &varScriptableStateUsableDef->hintString;
  Postload_XString(NotAtStart);
  varXString = &varScriptableStateUsableDef->hintStringDisabled;
  Postload_XString(NotAtStart);
  varXString = &varScriptableStateUsableDef->hintIcon;
  Postload_XString(NotAtStart);
  varXString = v7;
  v8 = varGfxImagePtr;
  varGfxImagePtr = &varScriptableStateUsableDef->hintIconImage;
  Postload_GfxImagePtr(NotAtStart);
  varGfxImagePtr = v8;
}

/*
==============
Postload_ScriptableStateUsableDefArray
==============
*/
void Postload_ScriptableStateUsableDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableStateUsableDef *i; 

  v2 = count;
  Postload_Stream_0(streamStart, varScriptableStateUsableDef, count << 7);
  for ( i = varScriptableStateUsableDef; v2; --v2 )
  {
    varScriptableStateUsableDef = i;
    Postload_ScriptableStateUsableDef(NotAtStart);
    ++i;
  }
}

/*
==============
Postload_ScriptableStateUsableDefStream
==============
*/
void Postload_ScriptableStateUsableDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *v3; 
  unsigned __int8 *pos; 
  ScriptableStateUsableDef *v5; 
  ScriptableStateBaseDef *base; 
  ScriptableStateBaseDef *v7; 
  const char **v8; 
  scr_string_t *v9; 
  const char **v10; 
  GfxImage **v11; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 43299, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = (unsigned __int8 *)varScriptableStateUsableDef;
    pos = g_streamPosGlob.pos;
    while ( 1 )
    {
      if ( v3 != pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x80ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x80ui64);
      g_streamPosGlob.pos += 128;
      v5 = varScriptableStateUsableDef;
      base = varScriptableStateUsableDef->base;
      if ( !varScriptableStateUsableDef->base )
        goto LABEL_18;
      if ( base == (ScriptableStateBaseDef *)-1i64 )
        break;
      if ( base == (ScriptableStateBaseDef *)-2i64 )
        goto LABEL_16;
      v5->base = (ScriptableStateBaseDef *)DB_ResolvePackedOffsetAddress((const unsigned __int64)varScriptableStateUsableDef->base);
LABEL_18:
      v8 = varXString;
      varXString = &varScriptableStateUsableDef->script_id;
      Postload_XString(NotAtStart);
      varXString = v8;
      v9 = varscr_string_t;
      varscr_string_t = &varScriptableStateUsableDef->scrScript_id;
      Postload_scr_string_t(NotAtStart);
      varscr_string_t = &varScriptableStateUsableDef->hintTag;
      Postload_scr_string_t(NotAtStart);
      varscr_string_t = v9;
      v10 = varXString;
      varXString = &varScriptableStateUsableDef->hintString;
      Postload_XString(NotAtStart);
      varXString = &varScriptableStateUsableDef->hintStringDisabled;
      Postload_XString(NotAtStart);
      varXString = &varScriptableStateUsableDef->hintIcon;
      Postload_XString(NotAtStart);
      varXString = v10;
      v11 = varGfxImagePtr;
      varGfxImagePtr = &varScriptableStateUsableDef->hintIconImage;
      Postload_GfxImagePtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableStateUsableDef = (ScriptableStateUsableDef *)g_streamPosGlob.pos;
      v3 = g_streamPosGlob.pos;
      varGfxImagePtr = v11;
      if ( !--count )
        return;
    }
    DB_PushSharedData();
LABEL_16:
    v7 = varScriptableStateBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    v5->base = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
    varScriptableStateBaseDef = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
    Postload_ScriptableStateBaseDef(AtStart);
    varScriptableStateBaseDef = v7;
    if ( base == (ScriptableStateBaseDef *)-1i64 )
      DB_PopSharedData();
    goto LABEL_18;
  }
}

/*
==============
Postload_Scriptable_Attackers
==============
*/
void Postload_Scriptable_Attackers(const DBStreamStart streamStart)
{
  if ( streamStart != (varScriptable_Attackers != (Scriptable_Attackers *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptable_Attackers, 4ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(4ui64);
}

/*
==============
Postload_Scriptable_AttackersArray
==============
*/
void Postload_Scriptable_AttackersArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream_0(streamStart, varScriptable_Attackers, 4 * count);
}

/*
==============
Postload_Scriptable_AttackersStream
==============
*/
void Postload_Scriptable_AttackersStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Scriptable_Attackers *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 27365, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varScriptable_Attackers;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (Scriptable_Attackers *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 4ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(4ui64);
      pos = g_streamPosGlob.pos + 4;
      g_streamPosGlob.pos = pos;
      v3 = (Scriptable_Attackers *)pos;
      varScriptable_Attackers = (Scriptable_Attackers *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_Scriptable_DamageCause
==============
*/
void Postload_Scriptable_DamageCause(const DBStreamStart streamStart)
{
  if ( streamStart != (varScriptable_DamageCause != (Scriptable_DamageCause *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptable_DamageCause, 4ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(4ui64);
}

/*
==============
Postload_Scriptable_DamageCauseArray
==============
*/
void Postload_Scriptable_DamageCauseArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream_0(streamStart, varScriptable_DamageCause, 4 * count);
}

/*
==============
Postload_Scriptable_DamageCauseStream
==============
*/
void Postload_Scriptable_DamageCauseStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Scriptable_DamageCause *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 27311, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varScriptable_DamageCause;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (Scriptable_DamageCause *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 4ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(4ui64);
      pos = g_streamPosGlob.pos + 4;
      g_streamPosGlob.pos = pos;
      v3 = (Scriptable_DamageCause *)pos;
      varScriptable_DamageCause = (Scriptable_DamageCause *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_Scriptable_EventSun_Data
==============
*/
void Postload_Scriptable_EventSun_Data(const DBStreamStart streamStart)
{
  if ( streamStart != (varScriptable_EventSun_Data != (Scriptable_EventSun_Data *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptable_EventSun_Data, 0x34ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(0x34ui64);
}

/*
==============
Postload_Scriptable_EventSun_DataArray
==============
*/
void Postload_Scriptable_EventSun_DataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream_0(streamStart, varScriptable_EventSun_Data, 52 * count);
}

/*
==============
Postload_Scriptable_EventSun_DataStream
==============
*/
void Postload_Scriptable_EventSun_DataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Scriptable_EventSun_Data *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 45474, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varScriptable_EventSun_Data;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (Scriptable_EventSun_Data *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 0x34ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(0x34ui64);
      pos = g_streamPosGlob.pos + 52;
      g_streamPosGlob.pos = pos;
      v3 = (Scriptable_EventSun_Data *)pos;
      varScriptable_EventSun_Data = (Scriptable_EventSun_Data *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_Scriptable_EventType
==============
*/
void Postload_Scriptable_EventType(const DBStreamStart streamStart)
{
  if ( streamStart != (varScriptable_EventType != (Scriptable_EventType *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptable_EventType, 4ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(4ui64);
}

/*
==============
Postload_Scriptable_EventTypeArray
==============
*/
void Postload_Scriptable_EventTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream_0(streamStart, varScriptable_EventType, 4 * count);
}

/*
==============
Postload_Scriptable_EventTypeStream
==============
*/
void Postload_Scriptable_EventTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Scriptable_EventType *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 26987, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varScriptable_EventType;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (Scriptable_EventType *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 4ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(4ui64);
      pos = g_streamPosGlob.pos + 4;
      g_streamPosGlob.pos = pos;
      v3 = (Scriptable_EventType *)pos;
      varScriptable_EventType = (Scriptable_EventType *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_Scriptable_ImageId
==============
*/
void Postload_Scriptable_ImageId(const DBStreamStart streamStart)
{
  if ( streamStart != (varScriptable_ImageId != (Scriptable_ImageId *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptable_ImageId, 4ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(4ui64);
}

/*
==============
Postload_Scriptable_ImageIdArray
==============
*/
void Postload_Scriptable_ImageIdArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream_0(streamStart, varScriptable_ImageId, 4 * count);
}

/*
==============
Postload_Scriptable_ImageIdStream
==============
*/
void Postload_Scriptable_ImageIdStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Scriptable_ImageId *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 27149, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varScriptable_ImageId;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (Scriptable_ImageId *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 4ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(4ui64);
      pos = g_streamPosGlob.pos + 4;
      g_streamPosGlob.pos = pos;
      v3 = (Scriptable_ImageId *)pos;
      varScriptable_ImageId = (Scriptable_ImageId *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_Scriptable_MaterialOverrideType
==============
*/
void Postload_Scriptable_MaterialOverrideType(const DBStreamStart streamStart)
{
  if ( streamStart != (varScriptable_MaterialOverrideType != (Scriptable_MaterialOverrideType *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptable_MaterialOverrideType, 4ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(4ui64);
}

/*
==============
Postload_Scriptable_MaterialOverrideTypeArray
==============
*/
void Postload_Scriptable_MaterialOverrideTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream_0(streamStart, varScriptable_MaterialOverrideType, 4 * count);
}

/*
==============
Postload_Scriptable_MaterialOverrideTypeStream
==============
*/
void Postload_Scriptable_MaterialOverrideTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Scriptable_MaterialOverrideType *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 32063, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varScriptable_MaterialOverrideType;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (Scriptable_MaterialOverrideType *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 4ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(4ui64);
      pos = g_streamPosGlob.pos + 4;
      g_streamPosGlob.pos = pos;
      v3 = (Scriptable_MaterialOverrideType *)pos;
      varScriptable_MaterialOverrideType = (Scriptable_MaterialOverrideType *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_Scriptable_MayhemAction
==============
*/
void Postload_Scriptable_MayhemAction(const DBStreamStart streamStart)
{
  if ( streamStart != (varScriptable_MayhemAction != (Scriptable_MayhemAction *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptable_MayhemAction, 4ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(4ui64);
}

/*
==============
Postload_Scriptable_MayhemActionArray
==============
*/
void Postload_Scriptable_MayhemActionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream_0(streamStart, varScriptable_MayhemAction, 4 * count);
}

/*
==============
Postload_Scriptable_MayhemActionStream
==============
*/
void Postload_Scriptable_MayhemActionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Scriptable_MayhemAction *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 27041, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varScriptable_MayhemAction;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (Scriptable_MayhemAction *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 4ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(4ui64);
      pos = g_streamPosGlob.pos + 4;
      g_streamPosGlob.pos = pos;
      v3 = (Scriptable_MayhemAction *)pos;
      varScriptable_MayhemAction = (Scriptable_MayhemAction *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_Scriptable_ShaderParamType
==============
*/
void Postload_Scriptable_ShaderParamType(const DBStreamStart streamStart)
{
  if ( streamStart != (varScriptable_ShaderParamType != (Scriptable_ShaderParamType *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptable_ShaderParamType, 4ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(4ui64);
}

/*
==============
Postload_Scriptable_ShaderParamTypeArray
==============
*/
void Postload_Scriptable_ShaderParamTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream_0(streamStart, varScriptable_ShaderParamType, 4 * count);
}

/*
==============
Postload_Scriptable_ShaderParamTypeStream
==============
*/
void Postload_Scriptable_ShaderParamTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Scriptable_ShaderParamType *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 27095, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varScriptable_ShaderParamType;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (Scriptable_ShaderParamType *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 4ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(4ui64);
      pos = g_streamPosGlob.pos + 4;
      g_streamPosGlob.pos = pos;
      v3 = (Scriptable_ShaderParamType *)pos;
      varScriptable_ShaderParamType = (Scriptable_ShaderParamType *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_Scriptable_StateType
==============
*/
void Postload_Scriptable_StateType(const DBStreamStart streamStart)
{
  if ( streamStart != (varScriptable_StateType != (Scriptable_StateType *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptable_StateType, 4ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(4ui64);
}

/*
==============
Postload_Scriptable_StateTypeArray
==============
*/
void Postload_Scriptable_StateTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream_0(streamStart, varScriptable_StateType, 4 * count);
}

/*
==============
Postload_Scriptable_StateTypeStream
==============
*/
void Postload_Scriptable_StateTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Scriptable_StateType *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 27257, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varScriptable_StateType;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (Scriptable_StateType *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 4ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(4ui64);
      pos = g_streamPosGlob.pos + 4;
      g_streamPosGlob.pos = pos;
      v3 = (Scriptable_StateType *)pos;
      varScriptable_StateType = (Scriptable_StateType *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Postload_Scriptable_TeamFilter
==============
*/
void Postload_Scriptable_TeamFilter(const DBStreamStart streamStart)
{
  if ( streamStart != (varScriptable_TeamFilter != (Scriptable_TeamFilter *)g_streamPosGlob.pos) )
    DB_PatchMem_ValidatePostloadStream(streamStart, varScriptable_TeamFilter, 4ui64);
  if ( streamStart != NotAtStart )
    DB_IncStreamPos(4ui64);
}

/*
==============
Postload_Scriptable_TeamFilterArray
==============
*/
void Postload_Scriptable_TeamFilterArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Postload_Stream_0(streamStart, varScriptable_TeamFilter, 4 * count);
}

/*
==============
Postload_Scriptable_TeamFilterStream
==============
*/
void Postload_Scriptable_TeamFilterStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Scriptable_TeamFilter *v3; 
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 27203, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    v3 = varScriptable_TeamFilter;
    pos = g_streamPosGlob.pos;
    do
    {
      if ( v3 != (Scriptable_TeamFilter *)pos )
      {
        DB_PatchMem_ValidatePostloadStream(AtStart, v3, 4ui64);
        pos = g_streamPosGlob.pos;
      }
      if ( !pos && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\database\\db_stream.h", 181, ASSERT_TYPE_ASSERT, "(g_streamPosGlob.pos)", (const char *)&queryFormat, "g_streamPosGlob.pos") )
        __debugbreak();
      DB_CheckCanIncStreamPos(4ui64);
      pos = g_streamPosGlob.pos + 4;
      g_streamPosGlob.pos = pos;
      v3 = (Scriptable_TeamFilter *)pos;
      varScriptable_TeamFilter = (Scriptable_TeamFilter *)pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableDamageTagOverride
==============
*/
void Preload_ScriptableDamageTagOverride(const DBStreamStart streamStart)
{
  const char **v1; 
  scr_string_t *v2; 

  Load_Stream(streamStart, varScriptableDamageTagOverride, 0x10ui64);
  v1 = varXString;
  varXString = &varScriptableDamageTagOverride->tag;
  Preload_XString(NotAtStart);
  varXString = v1;
  v2 = varscr_string_t;
  varscr_string_t = &varScriptableDamageTagOverride->scrTag;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = v2;
}

/*
==============
Preload_ScriptableDamageTagOverrideArray
==============
*/
void Preload_ScriptableDamageTagOverrideArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableDamageTagOverride *i; 
  const char **v4; 
  scr_string_t *v5; 

  v2 = count;
  Load_Stream(streamStart, varScriptableDamageTagOverride, 16 * count);
  for ( i = varScriptableDamageTagOverride; v2; --v2 )
  {
    varScriptableDamageTagOverride = i;
    Load_Stream(NotAtStart, i, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableDamageTagOverride->tag;
    Preload_XString(NotAtStart);
    varXString = v4;
    v5 = varscr_string_t;
    varscr_string_t = &varScriptableDamageTagOverride->scrTag;
    Preload_scr_string_t(NotAtStart);
    ++i;
    varscr_string_t = v5;
  }
}

/*
==============
Preload_ScriptableDamageTagOverrideStream
==============
*/
void Preload_ScriptableDamageTagOverrideStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  const char **v4; 
  scr_string_t *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 62725, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableDamageTagOverride;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      v4 = varXString;
      varXString = &varScriptableDamageTagOverride->tag;
      Preload_XString(NotAtStart);
      varXString = v4;
      v5 = varscr_string_t;
      varscr_string_t = &varScriptableDamageTagOverride->scrTag;
      Preload_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableDamageTagOverride = (ScriptableDamageTagOverride *)g_streamPosGlob.pos;
      varscr_string_t = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableDataType
==============
*/
void Preload_ScriptableDataType(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varScriptableDataType, 1ui64);
}

/*
==============
Preload_ScriptableDataTypeArray
==============
*/
void Preload_ScriptableDataTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varScriptableDataType, count);
}

/*
==============
Preload_ScriptableDataTypeStream
==============
*/
void Preload_ScriptableDataTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 48275, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableDataType;
    do
    {
      Load_Stream(AtStart, pos, 1ui64);
      pos = g_streamPosGlob.pos;
      varScriptableDataType = (ScriptableDataType *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableDef
==============
*/
void Preload_ScriptableDef(const DBStreamStart streamStart)
{
  const char **v2; 
  ScriptableDef **v3; 
  ScriptablePartDef *parts; 
  ScriptablePartDef *v5; 
  __int64 numParts; 
  ScriptablePartDef *i; 
  scr_string_t *v8; 
  XModel **models; 
  XModel **v10; 

  DB_PatchMem_PushAsset(59, varScriptableDef);
  Load_Stream(streamStart, varScriptableDef, 0x78ui64);
  DB_PushStreamPos(8u);
  v2 = varXString;
  varXString = &varScriptableDef->name;
  Preload_XString(NotAtStart);
  varXString = v2;
  v3 = varScriptableDefPtr;
  varScriptableDefPtr = &varScriptableDef->nextScriptableDef;
  Preload_ScriptableDefPtr(NotAtStart);
  varScriptableDefPtr = v3;
  parts = varScriptableDef->parts;
  if ( parts )
  {
    if ( parts == (ScriptablePartDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( parts != (ScriptablePartDef *)-2i64 )
    {
      goto LABEL_10;
    }
    v5 = varScriptablePartDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptablePartDef = (ScriptablePartDef *)g_streamPosGlob.pos;
    numParts = varScriptableDef->numParts;
    Load_Stream(AtStart, g_streamPosGlob.pos, 104 * numParts);
    for ( i = varScriptablePartDef; numParts; --numParts )
    {
      varScriptablePartDef = i;
      Preload_ScriptablePartDef(NotAtStart);
      ++i;
    }
    varScriptablePartDef = v5;
    if ( parts == (ScriptablePartDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_10:
  v8 = varscr_string_t;
  varscr_string_t = &varScriptableDef->animationTreeName;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = v8;
  models = varScriptableDef->models;
  if ( models )
  {
    if ( models == (XModel **)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( models != (XModel **)-2i64 )
    {
      goto LABEL_17;
    }
    v10 = varXModelPtr;
    varXModelPtr = AllocPreload_XModelPtr();
    Preload_XModelPtrArray(AtStart, varScriptableDef->numXModels);
    varXModelPtr = v10;
    if ( models == (XModel **)-1i64 )
      DB_PopSharedData();
  }
LABEL_17:
  DB_PopStreamPos();
  DB_PatchMem_PopAsset();
}

/*
==============
Preload_ScriptableDefArray
==============
*/
void Preload_ScriptableDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableDef *i; 
  const char **v4; 
  ScriptableDef **v5; 
  ScriptablePartDef *parts; 
  ScriptablePartDef *v7; 
  __int64 numParts; 
  ScriptablePartDef *j; 
  scr_string_t *v10; 
  XModel **models; 
  XModel **v12; 

  v2 = count;
  Load_Stream(streamStart, varScriptableDef, 120 * count);
  for ( i = varScriptableDef; v2; --v2 )
  {
    varScriptableDef = i;
    DB_PatchMem_PushAsset(59, i);
    Load_Stream(NotAtStart, varScriptableDef, 0x78ui64);
    DB_PushStreamPos(8u);
    v4 = varXString;
    varXString = &varScriptableDef->name;
    Preload_XString(NotAtStart);
    varXString = v4;
    v5 = varScriptableDefPtr;
    varScriptableDefPtr = &varScriptableDef->nextScriptableDef;
    Preload_ScriptableDefPtr(NotAtStart);
    varScriptableDefPtr = v5;
    parts = varScriptableDef->parts;
    if ( !parts )
      goto LABEL_11;
    if ( parts == (ScriptablePartDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( parts != (ScriptablePartDef *)-2i64 )
    {
      goto LABEL_11;
    }
    v7 = varScriptablePartDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptablePartDef = (ScriptablePartDef *)g_streamPosGlob.pos;
    numParts = varScriptableDef->numParts;
    Load_Stream(AtStart, g_streamPosGlob.pos, 104 * numParts);
    for ( j = varScriptablePartDef; numParts; --numParts )
    {
      varScriptablePartDef = j;
      Preload_ScriptablePartDef(NotAtStart);
      ++j;
    }
    varScriptablePartDef = v7;
    if ( parts == (ScriptablePartDef *)-1i64 )
      DB_PopSharedData();
LABEL_11:
    v10 = varscr_string_t;
    varscr_string_t = &varScriptableDef->animationTreeName;
    Preload_scr_string_t(NotAtStart);
    varscr_string_t = v10;
    models = varScriptableDef->models;
    if ( models )
    {
      if ( models == (XModel **)-1i64 )
      {
        DB_PushSharedData();
LABEL_16:
        v12 = varXModelPtr;
        varXModelPtr = AllocPreload_XModelPtr();
        Preload_XModelPtrArray(AtStart, varScriptableDef->numXModels);
        varXModelPtr = v12;
        if ( models == (XModel **)-1i64 )
          DB_PopSharedData();
        goto LABEL_18;
      }
      if ( models == (XModel **)-2i64 )
        goto LABEL_16;
    }
LABEL_18:
    DB_PopStreamPos();
    DB_PatchMem_PopAsset();
    ++i;
  }
}

/*
==============
Preload_ScriptableDefPtr
==============
*/
void Preload_ScriptableDefPtr(const DBStreamStart streamStart)
{
  __int64 v1; 
  ScriptableDef *v2; 

  Load_Stream(streamStart, varScriptableDefPtr, 8ui64);
  DB_PushStreamPos(2u);
  v1 = (__int64)*varScriptableDefPtr;
  if ( *varScriptableDefPtr )
  {
    if ( v1 == -1 )
    {
      DB_PushSharedData();
    }
    else if ( v1 != -2 && v1 != -3 )
    {
      goto LABEL_11;
    }
    v2 = varScriptableDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableDef = (ScriptableDef *)g_streamPosGlob.pos;
    if ( v1 == -3 )
      DB_InsertPointer();
    Preload_ScriptableDef(AtStart);
    varScriptableDef = v2;
    if ( v1 == -1 )
      DB_PopSharedData();
  }
LABEL_11:
  DB_PopStreamPos();
}

/*
==============
Preload_ScriptableDefPtrArray
==============
*/
void Preload_ScriptableDefPtrArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableDef **i; 
  __int64 v4; 
  ScriptableDef *v5; 

  v2 = count;
  Load_Stream(streamStart, varScriptableDefPtr, 8 * count);
  for ( i = varScriptableDefPtr; v2; --v2 )
  {
    varScriptableDefPtr = i;
    Load_Stream(NotAtStart, i, 8ui64);
    DB_PushStreamPos(2u);
    v4 = (__int64)*varScriptableDefPtr;
    if ( *varScriptableDefPtr )
    {
      if ( v4 == -1 )
      {
        DB_PushSharedData();
LABEL_8:
        v5 = varScriptableDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableDef = (ScriptableDef *)g_streamPosGlob.pos;
        if ( v4 == -3 )
          DB_InsertPointer();
        Preload_ScriptableDef(AtStart);
        varScriptableDef = v5;
        if ( v4 == -1 )
          DB_PopSharedData();
        goto LABEL_12;
      }
      if ( v4 == -2 || v4 == -3 )
        goto LABEL_8;
    }
LABEL_12:
    DB_PopStreamPos();
    ++i;
  }
}

/*
==============
Preload_ScriptableDefPtrStream
==============
*/
void Preload_ScriptableDefPtrStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  __int64 v4; 
  ScriptableDef *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 63919, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableDefPtr;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      DB_PushStreamPos(2u);
      v4 = (__int64)*varScriptableDefPtr;
      if ( *varScriptableDefPtr )
      {
        if ( v4 == -1 )
        {
          DB_PushSharedData();
LABEL_12:
          v5 = varScriptableDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableDef = (ScriptableDef *)g_streamPosGlob.pos;
          if ( v4 == -3 )
            DB_InsertPointer();
          Preload_ScriptableDef(AtStart);
          varScriptableDef = v5;
          if ( v4 == -1 )
            DB_PopSharedData();
          goto LABEL_16;
        }
        if ( v4 == -2 || v4 == -3 )
          goto LABEL_12;
      }
LABEL_16:
      DB_PopStreamPos();
      pos = g_streamPosGlob.pos;
      varScriptableDefPtr = (ScriptableDef **)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableDefStream
==============
*/
void Preload_ScriptableDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  const char **v4; 
  ScriptableDef **v5; 
  ScriptablePartDef *parts; 
  ScriptablePartDef *v7; 
  __int64 numParts; 
  ScriptablePartDef *i; 
  scr_string_t *v10; 
  XModel **models; 
  XModel **v12; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 63804, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableDef;
    do
    {
      DB_PatchMem_PushAsset(59, pos);
      Load_Stream(AtStart, varScriptableDef, 0x78ui64);
      DB_PushStreamPos(8u);
      v4 = varXString;
      varXString = &varScriptableDef->name;
      Preload_XString(NotAtStart);
      varXString = v4;
      v5 = varScriptableDefPtr;
      varScriptableDefPtr = &varScriptableDef->nextScriptableDef;
      Preload_ScriptableDefPtr(NotAtStart);
      varScriptableDefPtr = v5;
      parts = varScriptableDef->parts;
      if ( !parts )
        goto LABEL_15;
      if ( parts == (ScriptablePartDef *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( parts != (ScriptablePartDef *)-2i64 )
      {
        goto LABEL_15;
      }
      v7 = varScriptablePartDef;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      varScriptablePartDef = (ScriptablePartDef *)g_streamPosGlob.pos;
      numParts = varScriptableDef->numParts;
      Load_Stream(AtStart, g_streamPosGlob.pos, 104 * numParts);
      for ( i = varScriptablePartDef; numParts; --numParts )
      {
        varScriptablePartDef = i;
        Preload_ScriptablePartDef(NotAtStart);
        ++i;
      }
      varScriptablePartDef = v7;
      if ( parts == (ScriptablePartDef *)-1i64 )
        DB_PopSharedData();
LABEL_15:
      v10 = varscr_string_t;
      varscr_string_t = &varScriptableDef->animationTreeName;
      Preload_scr_string_t(NotAtStart);
      varscr_string_t = v10;
      models = varScriptableDef->models;
      if ( models )
      {
        if ( models == (XModel **)-1i64 )
        {
          DB_PushSharedData();
LABEL_20:
          v12 = varXModelPtr;
          varXModelPtr = AllocPreload_XModelPtr();
          Preload_XModelPtrArray(AtStart, varScriptableDef->numXModels);
          varXModelPtr = v12;
          if ( models == (XModel **)-1i64 )
            DB_PopSharedData();
          goto LABEL_22;
        }
        if ( models == (XModel **)-2i64 )
          goto LABEL_20;
      }
LABEL_22:
      DB_PopStreamPos();
      DB_PatchMem_PopAsset();
      pos = g_streamPosGlob.pos;
      varScriptableDef = (ScriptableDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventAddModelDef
==============
*/
void Preload_ScriptableEventAddModelDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 
  const char **v4; 
  scr_string_t *v5; 
  XModel **v6; 

  Load_Stream(streamStart, varScriptableEventAddModelDef, 0x20ui64);
  base = varScriptableEventAddModelDef->base;
  if ( varScriptableEventAddModelDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      goto LABEL_8;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varScriptableEventBaseDef = v2;
    varXString = v3;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v4 = varXString;
  varXString = &varScriptableEventAddModelDef->tagName;
  Preload_XString(NotAtStart);
  varXString = v4;
  v5 = varscr_string_t;
  varscr_string_t = &varScriptableEventAddModelDef->scrTagName;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = v5;
  v6 = varXModelPtr;
  varXModelPtr = &varScriptableEventAddModelDef->model;
  Preload_XModelPtr(NotAtStart);
  varXModelPtr = v6;
}

/*
==============
Preload_ScriptableEventAddModelDefArray
==============
*/
void Preload_ScriptableEventAddModelDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventAddModelDef *i; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  const char **v7; 
  scr_string_t *v8; 
  XModel **v9; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventAddModelDef, 32 * count);
  for ( i = varScriptableEventAddModelDef; v2; --v2 )
  {
    varScriptableEventAddModelDef = i;
    Load_Stream(NotAtStart, i, 0x20ui64);
    base = varScriptableEventAddModelDef->base;
    if ( varScriptableEventAddModelDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v5 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v6 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Preload_XString(NotAtStart);
        varXString = v6;
        varScriptableEventBaseDef = v5;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
    }
LABEL_9:
    v7 = varXString;
    varXString = &varScriptableEventAddModelDef->tagName;
    Preload_XString(NotAtStart);
    varXString = v7;
    v8 = varscr_string_t;
    varscr_string_t = &varScriptableEventAddModelDef->scrTagName;
    Preload_scr_string_t(NotAtStart);
    varscr_string_t = v8;
    v9 = varXModelPtr;
    varXModelPtr = &varScriptableEventAddModelDef->model;
    Preload_XModelPtr(NotAtStart);
    ++i;
    varXModelPtr = v9;
  }
}

/*
==============
Preload_ScriptableEventAddModelDefStream
==============
*/
void Preload_ScriptableEventAddModelDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  const char **v7; 
  scr_string_t *v8; 
  XModel **v9; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 56228, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventAddModelDef;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      base = varScriptableEventAddModelDef->base;
      if ( varScriptableEventAddModelDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v5 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v6 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Preload_XString(NotAtStart);
          varXString = v6;
          varScriptableEventBaseDef = v5;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
      }
LABEL_13:
      v7 = varXString;
      varXString = &varScriptableEventAddModelDef->tagName;
      Preload_XString(NotAtStart);
      varXString = v7;
      v8 = varscr_string_t;
      varscr_string_t = &varScriptableEventAddModelDef->scrTagName;
      Preload_scr_string_t(NotAtStart);
      varscr_string_t = v8;
      v9 = varXModelPtr;
      varXModelPtr = &varScriptableEventAddModelDef->model;
      Preload_XModelPtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventAddModelDef = (ScriptableEventAddModelDef *)g_streamPosGlob.pos;
      varXModelPtr = v9;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventAnimationDef
==============
*/
void Preload_ScriptableEventAnimationDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 
  XAnimParts **v4; 
  ScriptableEventDef *eventsAtEnd; 
  ScriptableEventDef *v6; 

  Load_Stream(streamStart, varScriptableEventAnimationDef, 0x50ui64);
  base = varScriptableEventAnimationDef->base;
  if ( varScriptableEventAnimationDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      goto LABEL_8;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varXString = v3;
    varScriptableEventBaseDef = v2;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v4 = varXAnimPartsPtr;
  varXAnimPartsPtr = &varScriptableEventAnimationDef->animation;
  Preload_XAnimPartsPtr(NotAtStart);
  varXAnimPartsPtr = v4;
  eventsAtEnd = varScriptableEventAnimationDef->eventsAtEnd;
  if ( !eventsAtEnd )
    return;
  if ( eventsAtEnd == (ScriptableEventDef *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( eventsAtEnd != (ScriptableEventDef *)-2i64 )
  {
    return;
  }
  v6 = varScriptableEventDef;
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
  Preload_ScriptableEventDefArray(AtStart, varScriptableEventAnimationDef->eventAtEndCount);
  varScriptableEventDef = v6;
  if ( eventsAtEnd == (ScriptableEventDef *)-1i64 )
    DB_PopSharedData();
}

/*
==============
Preload_ScriptableEventAnimationDefArray
==============
*/
void Preload_ScriptableEventAnimationDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventAnimationDef *i; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  XAnimParts **v7; 
  ScriptableEventDef *eventsAtEnd; 
  ScriptableEventDef *v9; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventAnimationDef, 80 * count);
  for ( i = varScriptableEventAnimationDef; v2; --v2 )
  {
    varScriptableEventAnimationDef = i;
    Load_Stream(NotAtStart, i, 0x50ui64);
    base = varScriptableEventAnimationDef->base;
    if ( !varScriptableEventAnimationDef->base )
      goto LABEL_9;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      goto LABEL_9;
    }
    v5 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v6 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varXString = v6;
    varScriptableEventBaseDef = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
LABEL_9:
    v7 = varXAnimPartsPtr;
    varXAnimPartsPtr = &varScriptableEventAnimationDef->animation;
    Preload_XAnimPartsPtr(NotAtStart);
    varXAnimPartsPtr = v7;
    eventsAtEnd = varScriptableEventAnimationDef->eventsAtEnd;
    if ( eventsAtEnd )
    {
      if ( eventsAtEnd == (ScriptableEventDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_14:
        v9 = varScriptableEventDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
        Preload_ScriptableEventDefArray(AtStart, varScriptableEventAnimationDef->eventAtEndCount);
        varScriptableEventDef = v9;
        if ( eventsAtEnd == (ScriptableEventDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_16;
      }
      if ( eventsAtEnd == (ScriptableEventDef *)-2i64 )
        goto LABEL_14;
    }
LABEL_16:
    ++i;
  }
}

/*
==============
Preload_ScriptableEventAnimationDefStream
==============
*/
void Preload_ScriptableEventAnimationDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  XAnimParts **v7; 
  ScriptableEventDef *eventsAtEnd; 
  ScriptableEventDef *v9; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 49330, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventAnimationDef;
    do
    {
      Load_Stream(AtStart, pos, 0x50ui64);
      base = varScriptableEventAnimationDef->base;
      if ( !varScriptableEventAnimationDef->base )
        goto LABEL_13;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( base != (ScriptableEventBaseDef *)-2i64 )
      {
        goto LABEL_13;
      }
      v5 = varScriptableEventBaseDef;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
      v6 = varXString;
      varXString = &varScriptableEventBaseDef->name;
      Preload_XString(NotAtStart);
      varXString = v6;
      varScriptableEventBaseDef = v5;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        DB_PopSharedData();
LABEL_13:
      v7 = varXAnimPartsPtr;
      varXAnimPartsPtr = &varScriptableEventAnimationDef->animation;
      Preload_XAnimPartsPtr(NotAtStart);
      varXAnimPartsPtr = v7;
      eventsAtEnd = varScriptableEventAnimationDef->eventsAtEnd;
      if ( eventsAtEnd )
      {
        if ( eventsAtEnd == (ScriptableEventDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_18:
          v9 = varScriptableEventDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
          Preload_ScriptableEventDefArray(AtStart, varScriptableEventAnimationDef->eventAtEndCount);
          varScriptableEventDef = v9;
          if ( eventsAtEnd == (ScriptableEventDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_20;
        }
        if ( eventsAtEnd == (ScriptableEventDef *)-2i64 )
          goto LABEL_18;
      }
LABEL_20:
      pos = g_streamPosGlob.pos;
      varScriptableEventAnimationDef = (ScriptableEventAnimationDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventAnonymousDef
==============
*/
void Preload_ScriptableEventAnonymousDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 

  Load_Stream(streamStart, varScriptableEventAnonymousDef, 0x98ui64);
  base = varScriptableEventAnonymousDef->base;
  if ( varScriptableEventAnonymousDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      return;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varXString = v3;
    varScriptableEventBaseDef = v2;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Preload_ScriptableEventAnonymousDefArray
==============
*/
void Preload_ScriptableEventAnonymousDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventAnonymousDef *i; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventAnonymousDef, 152 * count);
  for ( i = varScriptableEventAnonymousDef; v2; --v2 )
  {
    varScriptableEventAnonymousDef = i;
    Load_Stream(NotAtStart, i, 0x98ui64);
    base = varScriptableEventAnonymousDef->base;
    if ( varScriptableEventAnonymousDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v5 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v6 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Preload_XString(NotAtStart);
        varXString = v6;
        varScriptableEventBaseDef = v5;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Preload_ScriptableEventAnonymousDefStream
==============
*/
void Preload_ScriptableEventAnonymousDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 47225, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventAnonymousDef;
    do
    {
      Load_Stream(AtStart, pos, 0x98ui64);
      base = varScriptableEventAnonymousDef->base;
      if ( varScriptableEventAnonymousDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v5 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v6 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Preload_XString(NotAtStart);
          varXString = v6;
          varScriptableEventBaseDef = v5;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableEventAnonymousDef = (ScriptableEventAnonymousDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventApplyAngularForceDef
==============
*/
void Preload_ScriptableEventApplyAngularForceDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 

  Load_Stream(streamStart, varScriptableEventApplyAngularForceDef, 0x28ui64);
  base = varScriptableEventApplyAngularForceDef->base;
  if ( varScriptableEventApplyAngularForceDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      return;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varXString = v3;
    varScriptableEventBaseDef = v2;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Preload_ScriptableEventApplyAngularForceDefArray
==============
*/
void Preload_ScriptableEventApplyAngularForceDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventApplyAngularForceDef *i; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventApplyAngularForceDef, 40 * count);
  for ( i = varScriptableEventApplyAngularForceDef; v2; --v2 )
  {
    varScriptableEventApplyAngularForceDef = i;
    Load_Stream(NotAtStart, i, 0x28ui64);
    base = varScriptableEventApplyAngularForceDef->base;
    if ( varScriptableEventApplyAngularForceDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v5 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v6 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Preload_XString(NotAtStart);
        varXString = v6;
        varScriptableEventBaseDef = v5;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Preload_ScriptableEventApplyAngularForceDefStream
==============
*/
void Preload_ScriptableEventApplyAngularForceDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 56668, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventApplyAngularForceDef;
    do
    {
      Load_Stream(AtStart, pos, 0x28ui64);
      base = varScriptableEventApplyAngularForceDef->base;
      if ( varScriptableEventApplyAngularForceDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v5 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v6 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Preload_XString(NotAtStart);
          varXString = v6;
          varScriptableEventBaseDef = v5;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableEventApplyAngularForceDef = (ScriptableEventApplyAngularForceDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventApplyConstantAngularForceDef
==============
*/
void Preload_ScriptableEventApplyConstantAngularForceDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 

  Load_Stream(streamStart, varScriptableEventApplyConstantAngularForceDef, 0x28ui64);
  base = varScriptableEventApplyConstantAngularForceDef->base;
  if ( varScriptableEventApplyConstantAngularForceDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      return;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varXString = v3;
    varScriptableEventBaseDef = v2;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Preload_ScriptableEventApplyConstantAngularForceDefArray
==============
*/
void Preload_ScriptableEventApplyConstantAngularForceDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventApplyConstantAngularForceDef *i; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventApplyConstantAngularForceDef, 40 * count);
  for ( i = varScriptableEventApplyConstantAngularForceDef; v2; --v2 )
  {
    varScriptableEventApplyConstantAngularForceDef = i;
    Load_Stream(NotAtStart, i, 0x28ui64);
    base = varScriptableEventApplyConstantAngularForceDef->base;
    if ( varScriptableEventApplyConstantAngularForceDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v5 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v6 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Preload_XString(NotAtStart);
        varXString = v6;
        varScriptableEventBaseDef = v5;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Preload_ScriptableEventApplyConstantAngularForceDefStream
==============
*/
void Preload_ScriptableEventApplyConstantAngularForceDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 57200, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventApplyConstantAngularForceDef;
    do
    {
      Load_Stream(AtStart, pos, 0x28ui64);
      base = varScriptableEventApplyConstantAngularForceDef->base;
      if ( varScriptableEventApplyConstantAngularForceDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v5 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v6 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Preload_XString(NotAtStart);
          varXString = v6;
          varScriptableEventBaseDef = v5;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableEventApplyConstantAngularForceDef = (ScriptableEventApplyConstantAngularForceDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventApplyConstantForceDef
==============
*/
void Preload_ScriptableEventApplyConstantForceDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 

  Load_Stream(streamStart, varScriptableEventApplyConstantForceDef, 0x40ui64);
  base = varScriptableEventApplyConstantForceDef->base;
  if ( varScriptableEventApplyConstantForceDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      return;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varXString = v3;
    varScriptableEventBaseDef = v2;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Preload_ScriptableEventApplyConstantForceDefArray
==============
*/
void Preload_ScriptableEventApplyConstantForceDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventApplyConstantForceDef *i; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventApplyConstantForceDef, count << 6);
  for ( i = varScriptableEventApplyConstantForceDef; v2; --v2 )
  {
    varScriptableEventApplyConstantForceDef = i;
    Load_Stream(NotAtStart, i, 0x40ui64);
    base = varScriptableEventApplyConstantForceDef->base;
    if ( varScriptableEventApplyConstantForceDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v5 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v6 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Preload_XString(NotAtStart);
        varXString = v6;
        varScriptableEventBaseDef = v5;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Preload_ScriptableEventApplyConstantForceDefStream
==============
*/
void Preload_ScriptableEventApplyConstantForceDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 56957, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventApplyConstantForceDef;
    do
    {
      Load_Stream(AtStart, pos, 0x40ui64);
      base = varScriptableEventApplyConstantForceDef->base;
      if ( varScriptableEventApplyConstantForceDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v5 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v6 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Preload_XString(NotAtStart);
          varXString = v6;
          varScriptableEventBaseDef = v5;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableEventApplyConstantForceDef = (ScriptableEventApplyConstantForceDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventApplyForceDef
==============
*/
void Preload_ScriptableEventApplyForceDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 

  Load_Stream(streamStart, varScriptableEventApplyForceDef, 0x40ui64);
  base = varScriptableEventApplyForceDef->base;
  if ( varScriptableEventApplyForceDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      return;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varXString = v3;
    varScriptableEventBaseDef = v2;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Preload_ScriptableEventApplyForceDefArray
==============
*/
void Preload_ScriptableEventApplyForceDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventApplyForceDef *i; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventApplyForceDef, count << 6);
  for ( i = varScriptableEventApplyForceDef; v2; --v2 )
  {
    varScriptableEventApplyForceDef = i;
    Load_Stream(NotAtStart, i, 0x40ui64);
    base = varScriptableEventApplyForceDef->base;
    if ( varScriptableEventApplyForceDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v5 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v6 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Preload_XString(NotAtStart);
        varXString = v6;
        varScriptableEventBaseDef = v5;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Preload_ScriptableEventApplyForceDefStream
==============
*/
void Preload_ScriptableEventApplyForceDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 56471, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventApplyForceDef;
    do
    {
      Load_Stream(AtStart, pos, 0x40ui64);
      base = varScriptableEventApplyForceDef->base;
      if ( varScriptableEventApplyForceDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v5 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v6 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Preload_XString(NotAtStart);
          varXString = v6;
          varScriptableEventBaseDef = v5;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableEventApplyForceDef = (ScriptableEventApplyForceDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventBaseDef
==============
*/
void Preload_ScriptableEventBaseDef(const DBStreamStart streamStart)
{
  const char **v1; 

  Load_Stream(streamStart, varScriptableEventBaseDef, 0x10ui64);
  v1 = varXString;
  varXString = &varScriptableEventBaseDef->name;
  Preload_XString(NotAtStart);
  varXString = v1;
}

/*
==============
Preload_ScriptableEventBaseDefArray
==============
*/
void Preload_ScriptableEventBaseDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventBaseDef *i; 
  const char **v4; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventBaseDef, 16 * count);
  for ( i = varScriptableEventBaseDef; v2; --v2 )
  {
    varScriptableEventBaseDef = i;
    Load_Stream(NotAtStart, i, 0x10ui64);
    v4 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    ++i;
    varXString = v4;
  }
}

/*
==============
Preload_ScriptableEventBaseDefStream
==============
*/
void Preload_ScriptableEventBaseDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  const char **v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 47097, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventBaseDef;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      v4 = varXString;
      varXString = &varScriptableEventBaseDef->name;
      Preload_XString(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
      varXString = v4;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventChunkDynentDef
==============
*/
void Preload_ScriptableEventChunkDynentDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 

  Load_Stream(streamStart, varScriptableEventChunkDynentDef, 0x30ui64);
  base = varScriptableEventChunkDynentDef->base;
  if ( varScriptableEventChunkDynentDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      return;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varXString = v3;
    varScriptableEventBaseDef = v2;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Preload_ScriptableEventChunkDynentDefArray
==============
*/
void Preload_ScriptableEventChunkDynentDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventChunkDynentDef *i; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventChunkDynentDef, 48 * count);
  for ( i = varScriptableEventChunkDynentDef; v2; --v2 )
  {
    varScriptableEventChunkDynentDef = i;
    Load_Stream(NotAtStart, i, 0x30ui64);
    base = varScriptableEventChunkDynentDef->base;
    if ( varScriptableEventChunkDynentDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v5 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v6 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Preload_XString(NotAtStart);
        varXString = v6;
        varScriptableEventBaseDef = v5;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Preload_ScriptableEventChunkDynentDefStream
==============
*/
void Preload_ScriptableEventChunkDynentDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 50122, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventChunkDynentDef;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      base = varScriptableEventChunkDynentDef->base;
      if ( varScriptableEventChunkDynentDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v5 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v6 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Preload_XString(NotAtStart);
          varXString = v6;
          varScriptableEventBaseDef = v5;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableEventChunkDynentDef = (ScriptableEventChunkDynentDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventClientViewSelectorDef
==============
*/
void Preload_ScriptableEventClientViewSelectorDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 
  ScriptableEventDef *events1p; 
  ScriptableEventDef *v5; 
  ScriptableEventDef *events3p; 
  ScriptableEventDef *v7; 

  Load_Stream(streamStart, varScriptableEventClientViewSelectorDef, 0x30ui64);
  base = varScriptableEventClientViewSelectorDef->base;
  if ( varScriptableEventClientViewSelectorDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      goto LABEL_8;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varXString = v3;
    varScriptableEventBaseDef = v2;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  events1p = varScriptableEventClientViewSelectorDef->events1p;
  if ( !events1p )
    goto LABEL_15;
  if ( events1p == (ScriptableEventDef *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( events1p != (ScriptableEventDef *)-2i64 )
  {
    goto LABEL_15;
  }
  v5 = varScriptableEventDef;
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
  Preload_ScriptableEventDefArray(AtStart, varScriptableEventClientViewSelectorDef->event1pCount);
  varScriptableEventDef = v5;
  if ( events1p == (ScriptableEventDef *)-1i64 )
    DB_PopSharedData();
LABEL_15:
  events3p = varScriptableEventClientViewSelectorDef->events3p;
  if ( !events3p )
    return;
  if ( events3p == (ScriptableEventDef *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( events3p != (ScriptableEventDef *)-2i64 )
  {
    return;
  }
  v7 = varScriptableEventDef;
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
  Preload_ScriptableEventDefArray(AtStart, varScriptableEventClientViewSelectorDef->event3pCount);
  varScriptableEventDef = v7;
  if ( events3p == (ScriptableEventDef *)-1i64 )
    DB_PopSharedData();
}

/*
==============
Preload_ScriptableEventClientViewSelectorDefArray
==============
*/
void Preload_ScriptableEventClientViewSelectorDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventClientViewSelectorDef *i; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  ScriptableEventDef *events1p; 
  ScriptableEventDef *v8; 
  ScriptableEventDef *events3p; 
  ScriptableEventDef *v10; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventClientViewSelectorDef, 48 * count);
  for ( i = varScriptableEventClientViewSelectorDef; v2; --v2 )
  {
    varScriptableEventClientViewSelectorDef = i;
    Load_Stream(NotAtStart, i, 0x30ui64);
    base = varScriptableEventClientViewSelectorDef->base;
    if ( !varScriptableEventClientViewSelectorDef->base )
      goto LABEL_9;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      goto LABEL_9;
    }
    v5 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v6 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varXString = v6;
    varScriptableEventBaseDef = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
LABEL_9:
    events1p = varScriptableEventClientViewSelectorDef->events1p;
    if ( !events1p )
      goto LABEL_16;
    if ( events1p == (ScriptableEventDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( events1p != (ScriptableEventDef *)-2i64 )
    {
      goto LABEL_16;
    }
    v8 = varScriptableEventDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
    Preload_ScriptableEventDefArray(AtStart, varScriptableEventClientViewSelectorDef->event1pCount);
    varScriptableEventDef = v8;
    if ( events1p == (ScriptableEventDef *)-1i64 )
      DB_PopSharedData();
LABEL_16:
    events3p = varScriptableEventClientViewSelectorDef->events3p;
    if ( events3p )
    {
      if ( events3p == (ScriptableEventDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_21:
        v10 = varScriptableEventDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
        Preload_ScriptableEventDefArray(AtStart, varScriptableEventClientViewSelectorDef->event3pCount);
        varScriptableEventDef = v10;
        if ( events3p == (ScriptableEventDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_23;
      }
      if ( events3p == (ScriptableEventDef *)-2i64 )
        goto LABEL_21;
    }
LABEL_23:
    ++i;
  }
}

/*
==============
Preload_ScriptableEventClientViewSelectorDefStream
==============
*/
void Preload_ScriptableEventClientViewSelectorDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  ScriptableEventDef *events1p; 
  ScriptableEventDef *v8; 
  ScriptableEventDef *events3p; 
  ScriptableEventDef *v10; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 55711, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventClientViewSelectorDef;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      base = varScriptableEventClientViewSelectorDef->base;
      if ( !varScriptableEventClientViewSelectorDef->base )
        goto LABEL_13;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( base != (ScriptableEventBaseDef *)-2i64 )
      {
        goto LABEL_13;
      }
      v5 = varScriptableEventBaseDef;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
      v6 = varXString;
      varXString = &varScriptableEventBaseDef->name;
      Preload_XString(NotAtStart);
      varXString = v6;
      varScriptableEventBaseDef = v5;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        DB_PopSharedData();
LABEL_13:
      events1p = varScriptableEventClientViewSelectorDef->events1p;
      if ( !events1p )
        goto LABEL_20;
      if ( events1p == (ScriptableEventDef *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( events1p != (ScriptableEventDef *)-2i64 )
      {
        goto LABEL_20;
      }
      v8 = varScriptableEventDef;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
      Preload_ScriptableEventDefArray(AtStart, varScriptableEventClientViewSelectorDef->event1pCount);
      varScriptableEventDef = v8;
      if ( events1p == (ScriptableEventDef *)-1i64 )
        DB_PopSharedData();
LABEL_20:
      events3p = varScriptableEventClientViewSelectorDef->events3p;
      if ( events3p )
      {
        if ( events3p == (ScriptableEventDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_25:
          v10 = varScriptableEventDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
          Preload_ScriptableEventDefArray(AtStart, varScriptableEventClientViewSelectorDef->event3pCount);
          varScriptableEventDef = v10;
          if ( events3p == (ScriptableEventDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_27;
        }
        if ( events3p == (ScriptableEventDef *)-2i64 )
          goto LABEL_25;
      }
LABEL_27:
      pos = g_streamPosGlob.pos;
      varScriptableEventClientViewSelectorDef = (ScriptableEventClientViewSelectorDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventCollisionDef
==============
*/
void Preload_ScriptableEventCollisionDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 
  const char **v4; 
  XModel **v5; 

  Load_Stream(streamStart, varScriptableEventCollisionDef, 0x28ui64);
  base = varScriptableEventCollisionDef->base;
  if ( varScriptableEventCollisionDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      goto LABEL_8;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varScriptableEventBaseDef = v2;
    varXString = v3;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v4 = varXString;
  varXString = &varScriptableEventCollisionDef->collmapName;
  Preload_XString(NotAtStart);
  varXString = v4;
  v5 = varXModelPtr;
  varXModelPtr = &varScriptableEventCollisionDef->model;
  Preload_XModelPtr(NotAtStart);
  varXModelPtr = v5;
}

/*
==============
Preload_ScriptableEventCollisionDefArray
==============
*/
void Preload_ScriptableEventCollisionDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventCollisionDef *i; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  const char **v7; 
  XModel **v8; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventCollisionDef, 40 * count);
  for ( i = varScriptableEventCollisionDef; v2; --v2 )
  {
    varScriptableEventCollisionDef = i;
    Load_Stream(NotAtStart, i, 0x28ui64);
    base = varScriptableEventCollisionDef->base;
    if ( varScriptableEventCollisionDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v5 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v6 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Preload_XString(NotAtStart);
        varXString = v6;
        varScriptableEventBaseDef = v5;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
    }
LABEL_9:
    v7 = varXString;
    varXString = &varScriptableEventCollisionDef->collmapName;
    Preload_XString(NotAtStart);
    varXString = v7;
    v8 = varXModelPtr;
    varXModelPtr = &varScriptableEventCollisionDef->model;
    Preload_XModelPtr(NotAtStart);
    ++i;
    varXModelPtr = v8;
  }
}

/*
==============
Preload_ScriptableEventCollisionDefStream
==============
*/
void Preload_ScriptableEventCollisionDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  const char **v7; 
  XModel **v8; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 48853, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventCollisionDef;
    do
    {
      Load_Stream(AtStart, pos, 0x28ui64);
      base = varScriptableEventCollisionDef->base;
      if ( varScriptableEventCollisionDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v5 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v6 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Preload_XString(NotAtStart);
          varXString = v6;
          varScriptableEventBaseDef = v5;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
      }
LABEL_13:
      v7 = varXString;
      varXString = &varScriptableEventCollisionDef->collmapName;
      Preload_XString(NotAtStart);
      varXString = v7;
      v8 = varXModelPtr;
      varXModelPtr = &varScriptableEventCollisionDef->model;
      Preload_XModelPtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventCollisionDef = (ScriptableEventCollisionDef *)g_streamPosGlob.pos;
      varXModelPtr = v8;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventCompassIconDef
==============
*/
void Preload_ScriptableEventCompassIconDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 
  Material **v4; 

  Load_Stream(streamStart, varScriptableEventCompassIconDef, 0x98ui64);
  base = varScriptableEventCompassIconDef->base;
  if ( varScriptableEventCompassIconDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      goto LABEL_8;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varScriptableEventBaseDef = v2;
    varXString = v3;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v4 = varMaterialHandle;
  varMaterialHandle = &varScriptableEventCompassIconDef->friendlyArrow;
  Preload_MaterialHandle(NotAtStart);
  varMaterialHandle = &varScriptableEventCompassIconDef->friendlyFiring;
  Preload_MaterialHandle(NotAtStart);
  varMaterialHandle = &varScriptableEventCompassIconDef->friendlyChatting;
  Preload_MaterialHandle(NotAtStart);
  varMaterialHandle = &varScriptableEventCompassIconDef->friendlyYelling;
  Preload_MaterialHandle(NotAtStart);
  varMaterialHandle = &varScriptableEventCompassIconDef->partyArrow;
  Preload_MaterialHandle(NotAtStart);
  varMaterialHandle = &varScriptableEventCompassIconDef->partyFiring;
  Preload_MaterialHandle(NotAtStart);
  varMaterialHandle = &varScriptableEventCompassIconDef->partyChatting;
  Preload_MaterialHandle(NotAtStart);
  varMaterialHandle = &varScriptableEventCompassIconDef->partyYelling;
  Preload_MaterialHandle(NotAtStart);
  varMaterialHandle = &varScriptableEventCompassIconDef->squadArrow;
  Preload_MaterialHandle(NotAtStart);
  varMaterialHandle = &varScriptableEventCompassIconDef->squadFiring;
  Preload_MaterialHandle(NotAtStart);
  varMaterialHandle = varScriptableEventCompassIconDef->enemyCompassIconQuiet;
  Preload_MaterialHandleArray(NotAtStart, 3ui64);
  varMaterialHandle = varScriptableEventCompassIconDef->enemyCompassIconFiring;
  Preload_MaterialHandleArray(NotAtStart, 3ui64);
  varMaterialHandle = &varScriptableEventCompassIconDef->enemyCompassIconDirectional;
  Preload_MaterialHandle(NotAtStart);
  varMaterialHandle = v4;
}

/*
==============
Preload_ScriptableEventCompassIconDefArray
==============
*/
void Preload_ScriptableEventCompassIconDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventCompassIconDef *i; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  Material **v7; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventCompassIconDef, 152 * count);
  for ( i = varScriptableEventCompassIconDef; v2; --v2 )
  {
    varScriptableEventCompassIconDef = i;
    Load_Stream(NotAtStart, i, 0x98ui64);
    base = varScriptableEventCompassIconDef->base;
    if ( varScriptableEventCompassIconDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v5 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v6 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Preload_XString(NotAtStart);
        varXString = v6;
        varScriptableEventBaseDef = v5;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
    }
LABEL_9:
    v7 = varMaterialHandle;
    varMaterialHandle = &varScriptableEventCompassIconDef->friendlyArrow;
    Preload_MaterialHandle(NotAtStart);
    varMaterialHandle = &varScriptableEventCompassIconDef->friendlyFiring;
    Preload_MaterialHandle(NotAtStart);
    varMaterialHandle = &varScriptableEventCompassIconDef->friendlyChatting;
    Preload_MaterialHandle(NotAtStart);
    varMaterialHandle = &varScriptableEventCompassIconDef->friendlyYelling;
    Preload_MaterialHandle(NotAtStart);
    varMaterialHandle = &varScriptableEventCompassIconDef->partyArrow;
    Preload_MaterialHandle(NotAtStart);
    varMaterialHandle = &varScriptableEventCompassIconDef->partyFiring;
    Preload_MaterialHandle(NotAtStart);
    varMaterialHandle = &varScriptableEventCompassIconDef->partyChatting;
    Preload_MaterialHandle(NotAtStart);
    varMaterialHandle = &varScriptableEventCompassIconDef->partyYelling;
    Preload_MaterialHandle(NotAtStart);
    varMaterialHandle = &varScriptableEventCompassIconDef->squadArrow;
    Preload_MaterialHandle(NotAtStart);
    varMaterialHandle = &varScriptableEventCompassIconDef->squadFiring;
    Preload_MaterialHandle(NotAtStart);
    varMaterialHandle = varScriptableEventCompassIconDef->enemyCompassIconQuiet;
    Preload_MaterialHandleArray(NotAtStart, 3ui64);
    varMaterialHandle = varScriptableEventCompassIconDef->enemyCompassIconFiring;
    Preload_MaterialHandleArray(NotAtStart, 3ui64);
    varMaterialHandle = &varScriptableEventCompassIconDef->enemyCompassIconDirectional;
    Preload_MaterialHandle(NotAtStart);
    ++i;
    varMaterialHandle = v7;
  }
}

/*
==============
Preload_ScriptableEventCompassIconDefStream
==============
*/
void Preload_ScriptableEventCompassIconDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  Material **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 51990, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventCompassIconDef;
    do
    {
      Load_Stream(AtStart, pos, 0x98ui64);
      base = varScriptableEventCompassIconDef->base;
      if ( varScriptableEventCompassIconDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v5 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v6 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Preload_XString(NotAtStart);
          varXString = v6;
          varScriptableEventBaseDef = v5;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
      }
LABEL_13:
      v7 = varMaterialHandle;
      varMaterialHandle = &varScriptableEventCompassIconDef->friendlyArrow;
      Preload_MaterialHandle(NotAtStart);
      varMaterialHandle = &varScriptableEventCompassIconDef->friendlyFiring;
      Preload_MaterialHandle(NotAtStart);
      varMaterialHandle = &varScriptableEventCompassIconDef->friendlyChatting;
      Preload_MaterialHandle(NotAtStart);
      varMaterialHandle = &varScriptableEventCompassIconDef->friendlyYelling;
      Preload_MaterialHandle(NotAtStart);
      varMaterialHandle = &varScriptableEventCompassIconDef->partyArrow;
      Preload_MaterialHandle(NotAtStart);
      varMaterialHandle = &varScriptableEventCompassIconDef->partyFiring;
      Preload_MaterialHandle(NotAtStart);
      varMaterialHandle = &varScriptableEventCompassIconDef->partyChatting;
      Preload_MaterialHandle(NotAtStart);
      varMaterialHandle = &varScriptableEventCompassIconDef->partyYelling;
      Preload_MaterialHandle(NotAtStart);
      varMaterialHandle = &varScriptableEventCompassIconDef->squadArrow;
      Preload_MaterialHandle(NotAtStart);
      varMaterialHandle = &varScriptableEventCompassIconDef->squadFiring;
      Preload_MaterialHandle(NotAtStart);
      varMaterialHandle = varScriptableEventCompassIconDef->enemyCompassIconQuiet;
      Preload_MaterialHandleArray(NotAtStart, 3ui64);
      varMaterialHandle = varScriptableEventCompassIconDef->enemyCompassIconFiring;
      Preload_MaterialHandleArray(NotAtStart, 3ui64);
      varMaterialHandle = &varScriptableEventCompassIconDef->enemyCompassIconDirectional;
      Preload_MaterialHandle(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventCompassIconDef = (ScriptableEventCompassIconDef *)g_streamPosGlob.pos;
      varMaterialHandle = v7;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventDef
==============
*/
void Preload_ScriptableEventDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *v1; 
  const char **v2; 
  ScriptableEventDefUnion *v3; 

  Load_Stream(streamStart, varScriptableEventDef, 0xB0ui64);
  v1 = varScriptableEventBaseDef;
  varScriptableEventBaseDef = &varScriptableEventDef->base;
  Load_Stream(NotAtStart, varScriptableEventDef, 0x10ui64);
  v2 = varXString;
  varXString = &varScriptableEventBaseDef->name;
  Preload_XString(NotAtStart);
  varXString = v2;
  v3 = varScriptableEventDefUnion;
  varScriptableEventDefUnion = &varScriptableEventDef->data;
  varScriptableEventBaseDef = v1;
  Preload_ScriptableEventDefUnion(NotAtStart);
  varScriptableEventDefUnion = v3;
}

/*
==============
Preload_ScriptableEventDefArray
==============
*/
void Preload_ScriptableEventDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventDef *i; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 
  ScriptableEventDefUnion *v6; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventDef, 176 * count);
  for ( i = varScriptableEventDef; v2; --v2 )
  {
    varScriptableEventDef = i;
    Load_Stream(NotAtStart, i, 0xB0ui64);
    v4 = varScriptableEventBaseDef;
    varScriptableEventBaseDef = &varScriptableEventDef->base;
    Load_Stream(NotAtStart, varScriptableEventDef, 0x10ui64);
    v5 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varXString = v5;
    v6 = varScriptableEventDefUnion;
    varScriptableEventDefUnion = &varScriptableEventDef->data;
    varScriptableEventBaseDef = v4;
    Preload_ScriptableEventDefUnion(NotAtStart);
    ++i;
    varScriptableEventDefUnion = v6;
  }
}

/*
==============
Preload_ScriptableEventDefStream
==============
*/
void Preload_ScriptableEventDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *v4; 
  const char **v5; 
  ScriptableEventDefUnion *v6; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 60769, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventDef;
    do
    {
      Load_Stream(AtStart, pos, 0xB0ui64);
      v4 = varScriptableEventBaseDef;
      varScriptableEventBaseDef = &varScriptableEventDef->base;
      Load_Stream(NotAtStart, varScriptableEventDef, 0x10ui64);
      v5 = varXString;
      varXString = &varScriptableEventBaseDef->name;
      Preload_XString(NotAtStart);
      varXString = v5;
      v6 = varScriptableEventDefUnion;
      varScriptableEventDefUnion = &varScriptableEventDef->data;
      varScriptableEventBaseDef = v4;
      Preload_ScriptableEventDefUnion(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
      varScriptableEventDefUnion = v6;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventDefUnion
==============
*/
void Preload_ScriptableEventDefUnion(const DBStreamStart streamStart)
{
  Scriptable_EventType type; 
  ScriptableEventStateChangeDef *v2; 
  ScriptableEventWaitDef *v3; 
  ScriptableEventRandomDef *v4; 
  ScriptableEventScriptDef *v5; 
  ScriptableEventModelDef *v6; 
  ScriptableEventCollisionDef *v7; 
  ScriptableEventAnimationDef *v8; 
  ScriptableEventHideShowBoneDef *v9; 
  ScriptableEventDisablePhysicsSubShapeDef *v10; 
  ScriptableEventNoteTrackDef *v11; 
  ScriptableEventChunkDynentDef *v12; 
  ScriptableEventSpawnDynentDef *v13; 
  ScriptableEventPFXDef *v14; 
  ScriptableEventSoundDef *v15; 
  ScriptableEventExplosionDef *v16; 
  ScriptableEventLightDef *v17; 
  ScriptableEventSunDef *v18; 
  ScriptableEventRumbleDef *v19; 
  ScriptableEventScreenshakeDef *v20; 
  ScriptableEventPartDamageDef *v21; 
  ScriptableEventSetMayhemDef *v22; 
  ScriptableEventPlayMayhemDef *v23; 
  ScriptableEventViewmodelShaderParamDef *v24; 
  ScriptableEventViewmodelChangeImageDef *v25; 
  ScriptableEventClientViewSelectorDef *v26; 
  ScriptableEventTeamSelectorDef *v27; 
  ScriptableEventAddModelDef *v28; 
  ScriptableEventApplyForceDef *v29; 
  ScriptableEventApplyAngularForceDef *v30; 
  ScriptableEventApplyConstantForceDef *v31; 
  ScriptableEventApplyConstantAngularForceDef *v32; 
  ScriptableEventCompassIconDef *v33; 
  ScriptableEventMaterialOverrideDef *v34; 
  ScriptableEventDynamicBoneNoiseCurveDef *v35; 
  ScriptableEventMoveDef *v36; 
  ScriptableEventFootstepDef *v37; 
  ScriptableEventGravityArcDef *v38; 
  ScriptableEventViewTriggerDef *v39; 
  ScriptableEventObjectiveDef *v40; 
  ScriptableEventSpatialDisableDef *v41; 
  ScriptableEventHoverDef *v42; 
  ScriptableEventVehicleBlowUpTireDef *v43; 
  ScriptableEventDlc1Def *v44; 
  ScriptableEventScriptDamageDef *v45; 

  type = varScriptableEventDef->type;
  if ( type )
  {
    switch ( type )
    {
      case Scriptable_EventType_Wait:
        v3 = varScriptableEventWaitDef;
        varScriptableEventWaitDef = (ScriptableEventWaitDef *)varScriptableEventDefUnion;
        Preload_ScriptableEventWaitDef(streamStart);
        varScriptableEventWaitDef = v3;
        break;
      case Scriptable_EventType_Random:
        v4 = varScriptableEventRandomDef;
        varScriptableEventRandomDef = (ScriptableEventRandomDef *)varScriptableEventDefUnion;
        Preload_ScriptableEventRandomDef(streamStart);
        varScriptableEventRandomDef = v4;
        break;
      case Scriptable_EventType_Script:
        v5 = varScriptableEventScriptDef;
        varScriptableEventScriptDef = (ScriptableEventScriptDef *)varScriptableEventDefUnion;
        Preload_ScriptableEventScriptDef(streamStart);
        varScriptableEventScriptDef = v5;
        break;
      case Scriptable_EventType_Model:
        v6 = varScriptableEventModelDef;
        varScriptableEventModelDef = (ScriptableEventModelDef *)varScriptableEventDefUnion;
        Preload_ScriptableEventModelDef(streamStart);
        varScriptableEventModelDef = v6;
        break;
      case Scriptable_EventType_Collision:
        v7 = varScriptableEventCollisionDef;
        varScriptableEventCollisionDef = (ScriptableEventCollisionDef *)varScriptableEventDefUnion;
        Preload_ScriptableEventCollisionDef(streamStart);
        varScriptableEventCollisionDef = v7;
        break;
      case Scriptable_EventType_Animation:
        v8 = varScriptableEventAnimationDef;
        varScriptableEventAnimationDef = (ScriptableEventAnimationDef *)varScriptableEventDefUnion;
        Preload_ScriptableEventAnimationDef(streamStart);
        varScriptableEventAnimationDef = v8;
        break;
      case Scriptable_EventType_HideShowBone:
        v9 = varScriptableEventHideShowBoneDef;
        varScriptableEventHideShowBoneDef = (ScriptableEventHideShowBoneDef *)varScriptableEventDefUnion;
        Preload_ScriptableEventHideShowBoneDef(streamStart);
        varScriptableEventHideShowBoneDef = v9;
        break;
      case Scriptable_EventType_DisablePhysicsSubShape:
        v10 = varScriptableEventDisablePhysicsSubShapeDef;
        varScriptableEventDisablePhysicsSubShapeDef = (ScriptableEventDisablePhysicsSubShapeDef *)varScriptableEventDefUnion;
        Preload_ScriptableEventDisablePhysicsSubShapeDef(streamStart);
        varScriptableEventDisablePhysicsSubShapeDef = v10;
        break;
      case Scriptable_EventType_NoteTrack:
        v11 = varScriptableEventNoteTrackDef;
        varScriptableEventNoteTrackDef = (ScriptableEventNoteTrackDef *)varScriptableEventDefUnion;
        Preload_ScriptableEventNoteTrackDef(streamStart);
        varScriptableEventNoteTrackDef = v11;
        break;
      case Scriptable_EventType_ChunkDynent:
        v12 = varScriptableEventChunkDynentDef;
        varScriptableEventChunkDynentDef = (ScriptableEventChunkDynentDef *)varScriptableEventDefUnion;
        Preload_ScriptableEventChunkDynentDef(streamStart);
        varScriptableEventChunkDynentDef = v12;
        break;
      case Scriptable_EventType_SpawnDynent:
        v13 = varScriptableEventSpawnDynentDef;
        varScriptableEventSpawnDynentDef = (ScriptableEventSpawnDynentDef *)varScriptableEventDefUnion;
        Preload_ScriptableEventSpawnDynentDef(streamStart);
        varScriptableEventSpawnDynentDef = v13;
        break;
      case Scriptable_EventType_PFX:
        v14 = varScriptableEventPFXDef;
        varScriptableEventPFXDef = (ScriptableEventPFXDef *)varScriptableEventDefUnion;
        Preload_ScriptableEventPFXDef(streamStart);
        varScriptableEventPFXDef = v14;
        break;
      case Scriptable_EventType_Sound:
        v15 = varScriptableEventSoundDef;
        varScriptableEventSoundDef = (ScriptableEventSoundDef *)varScriptableEventDefUnion;
        Preload_ScriptableEventSoundDef(streamStart);
        varScriptableEventSoundDef = v15;
        break;
      case Scriptable_EventType_Explosion:
        v16 = varScriptableEventExplosionDef;
        varScriptableEventExplosionDef = (ScriptableEventExplosionDef *)varScriptableEventDefUnion;
        Preload_ScriptableEventExplosionDef(streamStart);
        varScriptableEventExplosionDef = v16;
        break;
      case Scriptable_EventType_Light:
        v17 = varScriptableEventLightDef;
        varScriptableEventLightDef = (ScriptableEventLightDef *)varScriptableEventDefUnion;
        Preload_ScriptableEventLightDef(streamStart);
        varScriptableEventLightDef = v17;
        break;
      case Scriptable_EventType_Sun:
        v18 = varScriptableEventSunDef;
        varScriptableEventSunDef = (ScriptableEventSunDef *)varScriptableEventDefUnion;
        Preload_ScriptableEventSunDef(streamStart);
        varScriptableEventSunDef = v18;
        break;
      case Scriptable_EventType_Rumble:
        v19 = varScriptableEventRumbleDef;
        varScriptableEventRumbleDef = (ScriptableEventRumbleDef *)varScriptableEventDefUnion;
        Preload_ScriptableEventRumbleDef(streamStart);
        varScriptableEventRumbleDef = v19;
        break;
      case Scriptable_EventType_Screenshake:
        v20 = varScriptableEventScreenshakeDef;
        varScriptableEventScreenshakeDef = (ScriptableEventScreenshakeDef *)varScriptableEventDefUnion;
        Preload_ScriptableEventScreenshakeDef(streamStart);
        varScriptableEventScreenshakeDef = v20;
        break;
      case Scriptable_EventType_PartDamage:
        v21 = varScriptableEventPartDamageDef;
        varScriptableEventPartDamageDef = (ScriptableEventPartDamageDef *)varScriptableEventDefUnion;
        Preload_ScriptableEventPartDamageDef(streamStart);
        varScriptableEventPartDamageDef = v21;
        break;
      case Scriptable_EventType_SetMayhem:
        v22 = varScriptableEventSetMayhemDef;
        varScriptableEventSetMayhemDef = (ScriptableEventSetMayhemDef *)varScriptableEventDefUnion;
        Preload_ScriptableEventSetMayhemDef(streamStart);
        varScriptableEventSetMayhemDef = v22;
        break;
      case Scriptable_EventType_PlayMayhem:
        v23 = varScriptableEventPlayMayhemDef;
        varScriptableEventPlayMayhemDef = (ScriptableEventPlayMayhemDef *)varScriptableEventDefUnion;
        Preload_ScriptableEventPlayMayhemDef(streamStart);
        varScriptableEventPlayMayhemDef = v23;
        break;
      case Scriptable_EventType_ViewmodelShaderParam:
        v24 = varScriptableEventViewmodelShaderParamDef;
        varScriptableEventViewmodelShaderParamDef = (ScriptableEventViewmodelShaderParamDef *)varScriptableEventDefUnion;
        Preload_ScriptableEventViewmodelShaderParamDef(streamStart);
        varScriptableEventViewmodelShaderParamDef = v24;
        break;
      case Scriptable_EventType_ViewmodelChangeImage:
        v25 = varScriptableEventViewmodelChangeImageDef;
        varScriptableEventViewmodelChangeImageDef = (ScriptableEventViewmodelChangeImageDef *)varScriptableEventDefUnion;
        Preload_ScriptableEventViewmodelChangeImageDef(streamStart);
        varScriptableEventViewmodelChangeImageDef = v25;
        break;
      case Scriptable_EventType_ClientViewSelector:
        v26 = varScriptableEventClientViewSelectorDef;
        varScriptableEventClientViewSelectorDef = (ScriptableEventClientViewSelectorDef *)varScriptableEventDefUnion;
        Preload_ScriptableEventClientViewSelectorDef(streamStart);
        varScriptableEventClientViewSelectorDef = v26;
        break;
      case Scriptable_EventType_TeamSelector:
        v27 = varScriptableEventTeamSelectorDef;
        varScriptableEventTeamSelectorDef = (ScriptableEventTeamSelectorDef *)varScriptableEventDefUnion;
        Preload_ScriptableEventTeamSelectorDef(streamStart);
        varScriptableEventTeamSelectorDef = v27;
        break;
      case Scriptable_EventType_AddModel:
        v28 = varScriptableEventAddModelDef;
        varScriptableEventAddModelDef = (ScriptableEventAddModelDef *)varScriptableEventDefUnion;
        Preload_ScriptableEventAddModelDef(streamStart);
        varScriptableEventAddModelDef = v28;
        break;
      case Scriptable_EventType_ApplyForce:
        v29 = varScriptableEventApplyForceDef;
        varScriptableEventApplyForceDef = (ScriptableEventApplyForceDef *)varScriptableEventDefUnion;
        Preload_ScriptableEventApplyForceDef(streamStart);
        varScriptableEventApplyForceDef = v29;
        break;
      case Scriptable_EventType_ApplyAngularForce:
        v30 = varScriptableEventApplyAngularForceDef;
        varScriptableEventApplyAngularForceDef = (ScriptableEventApplyAngularForceDef *)varScriptableEventDefUnion;
        Preload_ScriptableEventApplyAngularForceDef(streamStart);
        varScriptableEventApplyAngularForceDef = v30;
        break;
      case Scriptable_EventType_ApplyConstantForce:
        v31 = varScriptableEventApplyConstantForceDef;
        varScriptableEventApplyConstantForceDef = (ScriptableEventApplyConstantForceDef *)varScriptableEventDefUnion;
        Preload_ScriptableEventApplyConstantForceDef(streamStart);
        varScriptableEventApplyConstantForceDef = v31;
        break;
      case Scriptable_EventType_ApplyConstantAngularForce:
        v32 = varScriptableEventApplyConstantAngularForceDef;
        varScriptableEventApplyConstantAngularForceDef = (ScriptableEventApplyConstantAngularForceDef *)varScriptableEventDefUnion;
        Preload_ScriptableEventApplyConstantAngularForceDef(streamStart);
        varScriptableEventApplyConstantAngularForceDef = v32;
        break;
      case Scriptable_EventType_CompassIcon:
        v33 = varScriptableEventCompassIconDef;
        varScriptableEventCompassIconDef = (ScriptableEventCompassIconDef *)varScriptableEventDefUnion;
        Preload_ScriptableEventCompassIconDef(streamStart);
        varScriptableEventCompassIconDef = v33;
        break;
      case Scriptable_EventType_MaterialOverride:
        v34 = varScriptableEventMaterialOverrideDef;
        varScriptableEventMaterialOverrideDef = (ScriptableEventMaterialOverrideDef *)varScriptableEventDefUnion;
        Preload_ScriptableEventMaterialOverrideDef(streamStart);
        varScriptableEventMaterialOverrideDef = v34;
        break;
      case Scriptable_EventType_DynamicBoneNoiseCurve:
        v35 = varScriptableEventDynamicBoneNoiseCurveDef;
        varScriptableEventDynamicBoneNoiseCurveDef = (ScriptableEventDynamicBoneNoiseCurveDef *)varScriptableEventDefUnion;
        Preload_ScriptableEventDynamicBoneNoiseCurveDef(streamStart);
        varScriptableEventDynamicBoneNoiseCurveDef = v35;
        break;
      case Scriptable_EventType_Move:
        v36 = varScriptableEventMoveDef;
        varScriptableEventMoveDef = (ScriptableEventMoveDef *)varScriptableEventDefUnion;
        Preload_ScriptableEventMoveDef(streamStart);
        varScriptableEventMoveDef = v36;
        break;
      case Scriptable_EventType_Footstep:
        v37 = varScriptableEventFootstepDef;
        varScriptableEventFootstepDef = (ScriptableEventFootstepDef *)varScriptableEventDefUnion;
        Preload_ScriptableEventFootstepDef(streamStart);
        varScriptableEventFootstepDef = v37;
        break;
      case Scriptable_EventType_GravityArc:
        v38 = varScriptableEventGravityArcDef;
        varScriptableEventGravityArcDef = (ScriptableEventGravityArcDef *)varScriptableEventDefUnion;
        Preload_ScriptableEventGravityArcDef(streamStart);
        varScriptableEventGravityArcDef = v38;
        break;
      case Scriptable_EventType_ViewTrigger:
        v39 = varScriptableEventViewTriggerDef;
        varScriptableEventViewTriggerDef = (ScriptableEventViewTriggerDef *)varScriptableEventDefUnion;
        Preload_ScriptableEventViewTriggerDef(streamStart);
        varScriptableEventViewTriggerDef = v39;
        break;
      case Scriptable_EventType_Objective:
        v40 = varScriptableEventObjectiveDef;
        varScriptableEventObjectiveDef = (ScriptableEventObjectiveDef *)varScriptableEventDefUnion;
        Preload_ScriptableEventObjectiveDef(streamStart);
        varScriptableEventObjectiveDef = v40;
        break;
      case Scriptable_EventType_SpatialDisable:
        v41 = varScriptableEventSpatialDisableDef;
        varScriptableEventSpatialDisableDef = (ScriptableEventSpatialDisableDef *)varScriptableEventDefUnion;
        Preload_ScriptableEventSpatialDisableDef(streamStart);
        varScriptableEventSpatialDisableDef = v41;
        break;
      case Scriptable_EventType_Hover:
        v42 = varScriptableEventHoverDef;
        varScriptableEventHoverDef = (ScriptableEventHoverDef *)varScriptableEventDefUnion;
        Preload_ScriptableEventHoverDef(streamStart);
        varScriptableEventHoverDef = v42;
        break;
      case Scriptable_EventType_VehicleBlowUpTire:
        v43 = varScriptableEventVehicleBlowUpTireDef;
        varScriptableEventVehicleBlowUpTireDef = (ScriptableEventVehicleBlowUpTireDef *)varScriptableEventDefUnion;
        Preload_ScriptableEventVehicleBlowUpTireDef(streamStart);
        varScriptableEventVehicleBlowUpTireDef = v43;
        break;
      case Scriptable_EventType_Dlc1:
        v44 = varScriptableEventDlc1Def;
        varScriptableEventDlc1Def = (ScriptableEventDlc1Def *)varScriptableEventDefUnion;
        Preload_ScriptableEventDlc1Def(streamStart);
        varScriptableEventDlc1Def = v44;
        break;
      case Scriptable_EventType_ScriptDamage:
        v45 = varScriptableEventScriptDamageDef;
        varScriptableEventScriptDamageDef = (ScriptableEventScriptDamageDef *)varScriptableEventDefUnion;
        Preload_ScriptableEventScriptDamageDef(streamStart);
        varScriptableEventScriptDamageDef = v45;
        break;
    }
  }
  else
  {
    v2 = varScriptableEventStateChangeDef;
    varScriptableEventStateChangeDef = (ScriptableEventStateChangeDef *)varScriptableEventDefUnion;
    Preload_ScriptableEventStateChangeDef(streamStart);
    varScriptableEventStateChangeDef = v2;
  }
}

/*
==============
Preload_ScriptableEventDefUnionArray
==============
*/
void Preload_ScriptableEventDefUnionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventDefUnion *i; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventDefUnion, 152 * count);
  for ( i = varScriptableEventDefUnion; v2; --v2 )
  {
    varScriptableEventDefUnion = i;
    Preload_ScriptableEventDefUnion(NotAtStart);
    ++i;
  }
}

/*
==============
Preload_ScriptableEventDefUnionStream
==============
*/
void Preload_ScriptableEventDefUnionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 60647, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  for ( ; count; --count )
  {
    Preload_ScriptableEventDefUnion(AtStart);
    varScriptableEventDefUnion = (ScriptableEventDefUnion *)g_streamPosGlob.pos;
  }
}

/*
==============
Preload_ScriptableEventDisablePhysicsSubShapeDef
==============
*/
void Preload_ScriptableEventDisablePhysicsSubShapeDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 
  const char **v4; 

  Load_Stream(streamStart, varScriptableEventDisablePhysicsSubShapeDef, 0x20ui64);
  base = varScriptableEventDisablePhysicsSubShapeDef->base;
  if ( varScriptableEventDisablePhysicsSubShapeDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      goto LABEL_8;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varScriptableEventBaseDef = v2;
    varXString = v3;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v4 = varXString;
  varXString = &varScriptableEventDisablePhysicsSubShapeDef->mutableShapeName;
  Preload_XString(NotAtStart);
  varXString = v4;
}

/*
==============
Preload_ScriptableEventDisablePhysicsSubShapeDefArray
==============
*/
void Preload_ScriptableEventDisablePhysicsSubShapeDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventDisablePhysicsSubShapeDef *i; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  const char **v7; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventDisablePhysicsSubShapeDef, 32 * count);
  for ( i = varScriptableEventDisablePhysicsSubShapeDef; v2; --v2 )
  {
    varScriptableEventDisablePhysicsSubShapeDef = i;
    Load_Stream(NotAtStart, i, 0x20ui64);
    base = varScriptableEventDisablePhysicsSubShapeDef->base;
    if ( varScriptableEventDisablePhysicsSubShapeDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v5 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v6 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Preload_XString(NotAtStart);
        varXString = v6;
        varScriptableEventBaseDef = v5;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
    }
LABEL_9:
    v7 = varXString;
    varXString = &varScriptableEventDisablePhysicsSubShapeDef->mutableShapeName;
    Preload_XString(NotAtStart);
    ++i;
    varXString = v7;
  }
}

/*
==============
Preload_ScriptableEventDisablePhysicsSubShapeDefStream
==============
*/
void Preload_ScriptableEventDisablePhysicsSubShapeDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  const char **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 49724, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventDisablePhysicsSubShapeDef;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      base = varScriptableEventDisablePhysicsSubShapeDef->base;
      if ( varScriptableEventDisablePhysicsSubShapeDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v5 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v6 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Preload_XString(NotAtStart);
          varXString = v6;
          varScriptableEventBaseDef = v5;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
      }
LABEL_13:
      v7 = varXString;
      varXString = &varScriptableEventDisablePhysicsSubShapeDef->mutableShapeName;
      Preload_XString(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventDisablePhysicsSubShapeDef = (ScriptableEventDisablePhysicsSubShapeDef *)g_streamPosGlob.pos;
      varXString = v7;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventDlc1Def
==============
*/
void Preload_ScriptableEventDlc1Def(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 

  Load_Stream(streamStart, varScriptableEventDlc1Def, 0x18ui64);
  base = varScriptableEventDlc1Def->base;
  if ( varScriptableEventDlc1Def->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      return;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varXString = v3;
    varScriptableEventBaseDef = v2;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Preload_ScriptableEventDlc1DefArray
==============
*/
void Preload_ScriptableEventDlc1DefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventDlc1Def *i; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventDlc1Def, 24 * count);
  for ( i = varScriptableEventDlc1Def; v2; --v2 )
  {
    varScriptableEventDlc1Def = i;
    Load_Stream(NotAtStart, i, 0x18ui64);
    base = varScriptableEventDlc1Def->base;
    if ( varScriptableEventDlc1Def->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v5 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v6 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Preload_XString(NotAtStart);
        varXString = v6;
        varScriptableEventBaseDef = v5;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Preload_ScriptableEventDlc1DefStream
==============
*/
void Preload_ScriptableEventDlc1DefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 59188, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventDlc1Def;
    do
    {
      Load_Stream(AtStart, pos, 0x18ui64);
      base = varScriptableEventDlc1Def->base;
      if ( varScriptableEventDlc1Def->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v5 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v6 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Preload_XString(NotAtStart);
          varXString = v6;
          varScriptableEventBaseDef = v5;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableEventDlc1Def = (ScriptableEventDlc1Def *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventDynamicBoneNoiseCurveDef
==============
*/
void Preload_ScriptableEventDynamicBoneNoiseCurveDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 
  XAnimCurve **v4; 

  Load_Stream(streamStart, varScriptableEventDynamicBoneNoiseCurveDef, 0x28ui64);
  base = varScriptableEventDynamicBoneNoiseCurveDef->base;
  if ( varScriptableEventDynamicBoneNoiseCurveDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      goto LABEL_8;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varScriptableEventBaseDef = v2;
    varXString = v3;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v4 = varXAnimCurvePtr;
  varXAnimCurvePtr = &varScriptableEventDynamicBoneNoiseCurveDef->curve;
  Preload_XAnimCurvePtr(NotAtStart);
  varXAnimCurvePtr = v4;
}

/*
==============
Preload_ScriptableEventDynamicBoneNoiseCurveDefArray
==============
*/
void Preload_ScriptableEventDynamicBoneNoiseCurveDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventDynamicBoneNoiseCurveDef *i; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  XAnimCurve **v7; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventDynamicBoneNoiseCurveDef, 40 * count);
  for ( i = varScriptableEventDynamicBoneNoiseCurveDef; v2; --v2 )
  {
    varScriptableEventDynamicBoneNoiseCurveDef = i;
    Load_Stream(NotAtStart, i, 0x28ui64);
    base = varScriptableEventDynamicBoneNoiseCurveDef->base;
    if ( varScriptableEventDynamicBoneNoiseCurveDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v5 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v6 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Preload_XString(NotAtStart);
        varXString = v6;
        varScriptableEventBaseDef = v5;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
    }
LABEL_9:
    v7 = varXAnimCurvePtr;
    varXAnimCurvePtr = &varScriptableEventDynamicBoneNoiseCurveDef->curve;
    Preload_XAnimCurvePtr(NotAtStart);
    ++i;
    varXAnimCurvePtr = v7;
  }
}

/*
==============
Preload_ScriptableEventDynamicBoneNoiseCurveDefStream
==============
*/
void Preload_ScriptableEventDynamicBoneNoiseCurveDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  XAnimCurve **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 52591, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventDynamicBoneNoiseCurveDef;
    do
    {
      Load_Stream(AtStart, pos, 0x28ui64);
      base = varScriptableEventDynamicBoneNoiseCurveDef->base;
      if ( varScriptableEventDynamicBoneNoiseCurveDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v5 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v6 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Preload_XString(NotAtStart);
          varXString = v6;
          varScriptableEventBaseDef = v5;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
      }
LABEL_13:
      v7 = varXAnimCurvePtr;
      varXAnimCurvePtr = &varScriptableEventDynamicBoneNoiseCurveDef->curve;
      Preload_XAnimCurvePtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventDynamicBoneNoiseCurveDef = (ScriptableEventDynamicBoneNoiseCurveDef *)g_streamPosGlob.pos;
      varXAnimCurvePtr = v7;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventExplosionDef
==============
*/
void Preload_ScriptableEventExplosionDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 
  const char **v4; 
  scr_string_t *v5; 
  WeaponCompleteDef **v6; 

  Load_Stream(streamStart, varScriptableEventExplosionDef, 0x30ui64);
  base = varScriptableEventExplosionDef->base;
  if ( varScriptableEventExplosionDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      goto LABEL_8;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varScriptableEventBaseDef = v2;
    varXString = v3;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v4 = varXString;
  varXString = &varScriptableEventExplosionDef->tagName;
  Preload_XString(NotAtStart);
  varXString = v4;
  v5 = varscr_string_t;
  varscr_string_t = &varScriptableEventExplosionDef->scrTagName;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = v5;
  v6 = varWeaponCompleteDefPtr;
  varWeaponCompleteDefPtr = &varScriptableEventExplosionDef->weapon;
  Preload_WeaponCompleteDefPtr(NotAtStart);
  varWeaponCompleteDefPtr = v6;
}

/*
==============
Preload_ScriptableEventExplosionDefArray
==============
*/
void Preload_ScriptableEventExplosionDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventExplosionDef *i; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  const char **v7; 
  scr_string_t *v8; 
  WeaponCompleteDef **v9; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventExplosionDef, 48 * count);
  for ( i = varScriptableEventExplosionDef; v2; --v2 )
  {
    varScriptableEventExplosionDef = i;
    Load_Stream(NotAtStart, i, 0x30ui64);
    base = varScriptableEventExplosionDef->base;
    if ( varScriptableEventExplosionDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v5 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v6 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Preload_XString(NotAtStart);
        varXString = v6;
        varScriptableEventBaseDef = v5;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
    }
LABEL_9:
    v7 = varXString;
    varXString = &varScriptableEventExplosionDef->tagName;
    Preload_XString(NotAtStart);
    varXString = v7;
    v8 = varscr_string_t;
    varscr_string_t = &varScriptableEventExplosionDef->scrTagName;
    Preload_scr_string_t(NotAtStart);
    varscr_string_t = v8;
    v9 = varWeaponCompleteDefPtr;
    varWeaponCompleteDefPtr = &varScriptableEventExplosionDef->weapon;
    Preload_WeaponCompleteDefPtr(NotAtStart);
    ++i;
    varWeaponCompleteDefPtr = v9;
  }
}

/*
==============
Preload_ScriptableEventExplosionDefStream
==============
*/
void Preload_ScriptableEventExplosionDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  const char **v7; 
  scr_string_t *v8; 
  WeaponCompleteDef **v9; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 52903, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventExplosionDef;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      base = varScriptableEventExplosionDef->base;
      if ( varScriptableEventExplosionDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v5 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v6 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Preload_XString(NotAtStart);
          varXString = v6;
          varScriptableEventBaseDef = v5;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
      }
LABEL_13:
      v7 = varXString;
      varXString = &varScriptableEventExplosionDef->tagName;
      Preload_XString(NotAtStart);
      varXString = v7;
      v8 = varscr_string_t;
      varscr_string_t = &varScriptableEventExplosionDef->scrTagName;
      Preload_scr_string_t(NotAtStart);
      varscr_string_t = v8;
      v9 = varWeaponCompleteDefPtr;
      varWeaponCompleteDefPtr = &varScriptableEventExplosionDef->weapon;
      Preload_WeaponCompleteDefPtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventExplosionDef = (ScriptableEventExplosionDef *)g_streamPosGlob.pos;
      varWeaponCompleteDefPtr = v9;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventFootstepDef
==============
*/
void Preload_ScriptableEventFootstepDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 
  const char **v4; 
  scr_string_t *v5; 
  const char **v6; 
  FootstepVFX **v7; 

  Load_Stream(streamStart, varScriptableEventFootstepDef, 0x38ui64);
  base = varScriptableEventFootstepDef->base;
  if ( varScriptableEventFootstepDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      goto LABEL_8;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varScriptableEventBaseDef = v2;
    varXString = v3;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v4 = varXString;
  varXString = &varScriptableEventFootstepDef->tagName;
  Preload_XString(NotAtStart);
  varXString = v4;
  v5 = varscr_string_t;
  varscr_string_t = &varScriptableEventFootstepDef->scrTagName;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = v5;
  v6 = varXString;
  varXString = &varScriptableEventFootstepDef->soundAlias;
  Preload_XString(NotAtStart);
  varXString = v6;
  v7 = varFootstepVFXPtr;
  varFootstepVFXPtr = &varScriptableEventFootstepDef->rightFootstepVFX;
  Preload_FootstepVFXPtr(NotAtStart);
  varFootstepVFXPtr = &varScriptableEventFootstepDef->leftFootstepVFX;
  Preload_FootstepVFXPtr(NotAtStart);
  varFootstepVFXPtr = v7;
}

/*
==============
Preload_ScriptableEventFootstepDefArray
==============
*/
void Preload_ScriptableEventFootstepDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventFootstepDef *i; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  const char **v7; 
  scr_string_t *v8; 
  const char **v9; 
  FootstepVFX **v10; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventFootstepDef, 56 * count);
  for ( i = varScriptableEventFootstepDef; v2; --v2 )
  {
    varScriptableEventFootstepDef = i;
    Load_Stream(NotAtStart, i, 0x38ui64);
    base = varScriptableEventFootstepDef->base;
    if ( varScriptableEventFootstepDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v5 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v6 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Preload_XString(NotAtStart);
        varXString = v6;
        varScriptableEventBaseDef = v5;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
    }
LABEL_9:
    v7 = varXString;
    varXString = &varScriptableEventFootstepDef->tagName;
    Preload_XString(NotAtStart);
    varXString = v7;
    v8 = varscr_string_t;
    varscr_string_t = &varScriptableEventFootstepDef->scrTagName;
    Preload_scr_string_t(NotAtStart);
    varscr_string_t = v8;
    v9 = varXString;
    varXString = &varScriptableEventFootstepDef->soundAlias;
    Preload_XString(NotAtStart);
    varXString = v9;
    v10 = varFootstepVFXPtr;
    varFootstepVFXPtr = &varScriptableEventFootstepDef->rightFootstepVFX;
    Preload_FootstepVFXPtr(NotAtStart);
    varFootstepVFXPtr = &varScriptableEventFootstepDef->leftFootstepVFX;
    Preload_FootstepVFXPtr(NotAtStart);
    ++i;
    varFootstepVFXPtr = v10;
  }
}

/*
==============
Preload_ScriptableEventFootstepDefStream
==============
*/
void Preload_ScriptableEventFootstepDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  const char **v7; 
  scr_string_t *v8; 
  const char **v9; 
  FootstepVFX **v10; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 58142, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventFootstepDef;
    do
    {
      Load_Stream(AtStart, pos, 0x38ui64);
      base = varScriptableEventFootstepDef->base;
      if ( varScriptableEventFootstepDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v5 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v6 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Preload_XString(NotAtStart);
          varXString = v6;
          varScriptableEventBaseDef = v5;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
      }
LABEL_13:
      v7 = varXString;
      varXString = &varScriptableEventFootstepDef->tagName;
      Preload_XString(NotAtStart);
      varXString = v7;
      v8 = varscr_string_t;
      varscr_string_t = &varScriptableEventFootstepDef->scrTagName;
      Preload_scr_string_t(NotAtStart);
      varscr_string_t = v8;
      v9 = varXString;
      varXString = &varScriptableEventFootstepDef->soundAlias;
      Preload_XString(NotAtStart);
      varXString = v9;
      v10 = varFootstepVFXPtr;
      varFootstepVFXPtr = &varScriptableEventFootstepDef->rightFootstepVFX;
      Preload_FootstepVFXPtr(NotAtStart);
      varFootstepVFXPtr = &varScriptableEventFootstepDef->leftFootstepVFX;
      Preload_FootstepVFXPtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventFootstepDef = (ScriptableEventFootstepDef *)g_streamPosGlob.pos;
      varFootstepVFXPtr = v10;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventGravityArcDef
==============
*/
void Preload_ScriptableEventGravityArcDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 
  ScriptableEventDef *eventsAtEnd; 
  ScriptableEventDef *v5; 

  Load_Stream(streamStart, varScriptableEventGravityArcDef, 0x38ui64);
  base = varScriptableEventGravityArcDef->base;
  if ( varScriptableEventGravityArcDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      goto LABEL_8;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varXString = v3;
    varScriptableEventBaseDef = v2;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  eventsAtEnd = varScriptableEventGravityArcDef->eventsAtEnd;
  if ( !eventsAtEnd )
    return;
  if ( eventsAtEnd == (ScriptableEventDef *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( eventsAtEnd != (ScriptableEventDef *)-2i64 )
  {
    return;
  }
  v5 = varScriptableEventDef;
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
  Preload_ScriptableEventDefArray(AtStart, varScriptableEventGravityArcDef->eventAtEndCount);
  varScriptableEventDef = v5;
  if ( eventsAtEnd == (ScriptableEventDef *)-1i64 )
    DB_PopSharedData();
}

/*
==============
Preload_ScriptableEventGravityArcDefArray
==============
*/
void Preload_ScriptableEventGravityArcDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventGravityArcDef *i; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  ScriptableEventDef *eventsAtEnd; 
  ScriptableEventDef *v8; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventGravityArcDef, 56 * count);
  for ( i = varScriptableEventGravityArcDef; v2; --v2 )
  {
    varScriptableEventGravityArcDef = i;
    Load_Stream(NotAtStart, i, 0x38ui64);
    base = varScriptableEventGravityArcDef->base;
    if ( !varScriptableEventGravityArcDef->base )
      goto LABEL_9;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      goto LABEL_9;
    }
    v5 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v6 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varXString = v6;
    varScriptableEventBaseDef = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
LABEL_9:
    eventsAtEnd = varScriptableEventGravityArcDef->eventsAtEnd;
    if ( eventsAtEnd )
    {
      if ( eventsAtEnd == (ScriptableEventDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_14:
        v8 = varScriptableEventDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
        Preload_ScriptableEventDefArray(AtStart, varScriptableEventGravityArcDef->eventAtEndCount);
        varScriptableEventDef = v8;
        if ( eventsAtEnd == (ScriptableEventDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_16;
      }
      if ( eventsAtEnd == (ScriptableEventDef *)-2i64 )
        goto LABEL_14;
    }
LABEL_16:
    ++i;
  }
}

/*
==============
Preload_ScriptableEventGravityArcDefStream
==============
*/
void Preload_ScriptableEventGravityArcDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  ScriptableEventDef *eventsAtEnd; 
  ScriptableEventDef *v8; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 57851, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventGravityArcDef;
    do
    {
      Load_Stream(AtStart, pos, 0x38ui64);
      base = varScriptableEventGravityArcDef->base;
      if ( !varScriptableEventGravityArcDef->base )
        goto LABEL_13;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( base != (ScriptableEventBaseDef *)-2i64 )
      {
        goto LABEL_13;
      }
      v5 = varScriptableEventBaseDef;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
      v6 = varXString;
      varXString = &varScriptableEventBaseDef->name;
      Preload_XString(NotAtStart);
      varXString = v6;
      varScriptableEventBaseDef = v5;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        DB_PopSharedData();
LABEL_13:
      eventsAtEnd = varScriptableEventGravityArcDef->eventsAtEnd;
      if ( eventsAtEnd )
      {
        if ( eventsAtEnd == (ScriptableEventDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_18:
          v8 = varScriptableEventDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
          Preload_ScriptableEventDefArray(AtStart, varScriptableEventGravityArcDef->eventAtEndCount);
          varScriptableEventDef = v8;
          if ( eventsAtEnd == (ScriptableEventDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_20;
        }
        if ( eventsAtEnd == (ScriptableEventDef *)-2i64 )
          goto LABEL_18;
      }
LABEL_20:
      pos = g_streamPosGlob.pos;
      varScriptableEventGravityArcDef = (ScriptableEventGravityArcDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventHideShowBoneDef
==============
*/
void Preload_ScriptableEventHideShowBoneDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 
  const char **v4; 
  scr_string_t *v5; 

  Load_Stream(streamStart, varScriptableEventHideShowBoneDef, 0x18ui64);
  base = varScriptableEventHideShowBoneDef->base;
  if ( varScriptableEventHideShowBoneDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      goto LABEL_8;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varScriptableEventBaseDef = v2;
    varXString = v3;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v4 = varXString;
  varXString = &varScriptableEventHideShowBoneDef->tagName;
  Preload_XString(NotAtStart);
  varXString = v4;
  v5 = varscr_string_t;
  varscr_string_t = &varScriptableEventHideShowBoneDef->scrTagName;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = v5;
}

/*
==============
Preload_ScriptableEventHideShowBoneDefArray
==============
*/
void Preload_ScriptableEventHideShowBoneDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventHideShowBoneDef *i; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  const char **v7; 
  scr_string_t *v8; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventHideShowBoneDef, 24 * count);
  for ( i = varScriptableEventHideShowBoneDef; v2; --v2 )
  {
    varScriptableEventHideShowBoneDef = i;
    Load_Stream(NotAtStart, i, 0x18ui64);
    base = varScriptableEventHideShowBoneDef->base;
    if ( varScriptableEventHideShowBoneDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v5 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v6 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Preload_XString(NotAtStart);
        varXString = v6;
        varScriptableEventBaseDef = v5;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
    }
LABEL_9:
    v7 = varXString;
    varXString = &varScriptableEventHideShowBoneDef->tagName;
    Preload_XString(NotAtStart);
    varXString = v7;
    v8 = varscr_string_t;
    varscr_string_t = &varScriptableEventHideShowBoneDef->scrTagName;
    Preload_scr_string_t(NotAtStart);
    ++i;
    varscr_string_t = v8;
  }
}

/*
==============
Preload_ScriptableEventHideShowBoneDefStream
==============
*/
void Preload_ScriptableEventHideShowBoneDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  const char **v7; 
  scr_string_t *v8; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 49550, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventHideShowBoneDef;
    do
    {
      Load_Stream(AtStart, pos, 0x18ui64);
      base = varScriptableEventHideShowBoneDef->base;
      if ( varScriptableEventHideShowBoneDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v5 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v6 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Preload_XString(NotAtStart);
          varXString = v6;
          varScriptableEventBaseDef = v5;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
      }
LABEL_13:
      v7 = varXString;
      varXString = &varScriptableEventHideShowBoneDef->tagName;
      Preload_XString(NotAtStart);
      varXString = v7;
      v8 = varscr_string_t;
      varscr_string_t = &varScriptableEventHideShowBoneDef->scrTagName;
      Preload_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventHideShowBoneDef = (ScriptableEventHideShowBoneDef *)g_streamPosGlob.pos;
      varscr_string_t = v8;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventHoverDef
==============
*/
void Preload_ScriptableEventHoverDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 

  Load_Stream(streamStart, varScriptableEventHoverDef, 0x18ui64);
  base = varScriptableEventHoverDef->base;
  if ( varScriptableEventHoverDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      return;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varXString = v3;
    varScriptableEventBaseDef = v2;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Preload_ScriptableEventHoverDefArray
==============
*/
void Preload_ScriptableEventHoverDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventHoverDef *i; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventHoverDef, 24 * count);
  for ( i = varScriptableEventHoverDef; v2; --v2 )
  {
    varScriptableEventHoverDef = i;
    Load_Stream(NotAtStart, i, 0x18ui64);
    base = varScriptableEventHoverDef->base;
    if ( varScriptableEventHoverDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v5 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v6 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Preload_XString(NotAtStart);
        varXString = v6;
        varScriptableEventBaseDef = v5;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Preload_ScriptableEventHoverDefStream
==============
*/
void Preload_ScriptableEventHoverDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 58863, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventHoverDef;
    do
    {
      Load_Stream(AtStart, pos, 0x18ui64);
      base = varScriptableEventHoverDef->base;
      if ( varScriptableEventHoverDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v5 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v6 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Preload_XString(NotAtStart);
          varXString = v6;
          varScriptableEventBaseDef = v5;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableEventHoverDef = (ScriptableEventHoverDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventLightDef
==============
*/
void Preload_ScriptableEventLightDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 

  Load_Stream(streamStart, varScriptableEventLightDef, 0x40ui64);
  base = varScriptableEventLightDef->base;
  if ( varScriptableEventLightDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      return;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varXString = v3;
    varScriptableEventBaseDef = v2;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Preload_ScriptableEventLightDefArray
==============
*/
void Preload_ScriptableEventLightDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventLightDef *i; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventLightDef, count << 6);
  for ( i = varScriptableEventLightDef; v2; --v2 )
  {
    varScriptableEventLightDef = i;
    Load_Stream(NotAtStart, i, 0x40ui64);
    base = varScriptableEventLightDef->base;
    if ( varScriptableEventLightDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v5 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v6 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Preload_XString(NotAtStart);
        varXString = v6;
        varScriptableEventBaseDef = v5;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Preload_ScriptableEventLightDefStream
==============
*/
void Preload_ScriptableEventLightDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 53238, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventLightDef;
    do
    {
      Load_Stream(AtStart, pos, 0x40ui64);
      base = varScriptableEventLightDef->base;
      if ( varScriptableEventLightDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v5 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v6 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Preload_XString(NotAtStart);
          varXString = v6;
          varScriptableEventBaseDef = v5;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableEventLightDef = (ScriptableEventLightDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventMaterialOverrideDef
==============
*/
void Preload_ScriptableEventMaterialOverrideDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 

  Load_Stream(streamStart, varScriptableEventMaterialOverrideDef, 0x18ui64);
  base = varScriptableEventMaterialOverrideDef->base;
  if ( varScriptableEventMaterialOverrideDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      return;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varXString = v3;
    varScriptableEventBaseDef = v2;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Preload_ScriptableEventMaterialOverrideDefArray
==============
*/
void Preload_ScriptableEventMaterialOverrideDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventMaterialOverrideDef *i; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventMaterialOverrideDef, 24 * count);
  for ( i = varScriptableEventMaterialOverrideDef; v2; --v2 )
  {
    varScriptableEventMaterialOverrideDef = i;
    Load_Stream(NotAtStart, i, 0x18ui64);
    base = varScriptableEventMaterialOverrideDef->base;
    if ( varScriptableEventMaterialOverrideDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v5 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v6 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Preload_XString(NotAtStart);
        varXString = v6;
        varScriptableEventBaseDef = v5;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Preload_ScriptableEventMaterialOverrideDefStream
==============
*/
void Preload_ScriptableEventMaterialOverrideDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 51515, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventMaterialOverrideDef;
    do
    {
      Load_Stream(AtStart, pos, 0x18ui64);
      base = varScriptableEventMaterialOverrideDef->base;
      if ( varScriptableEventMaterialOverrideDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v5 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v6 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Preload_XString(NotAtStart);
          varXString = v6;
          varScriptableEventBaseDef = v5;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableEventMaterialOverrideDef = (ScriptableEventMaterialOverrideDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventModelDef
==============
*/
void Preload_ScriptableEventModelDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 
  ScriptableModelUnion *v4; 

  Load_Stream(streamStart, varScriptableEventModelDef, 0x20ui64);
  base = varScriptableEventModelDef->base;
  if ( varScriptableEventModelDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      goto LABEL_8;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varScriptableEventBaseDef = v2;
    varXString = v3;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v4 = varScriptableModelUnion;
  varScriptableModelUnion = &varScriptableEventModelDef->data;
  Preload_ScriptableModelUnion(NotAtStart);
  varScriptableModelUnion = v4;
}

/*
==============
Preload_ScriptableEventModelDefArray
==============
*/
void Preload_ScriptableEventModelDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventModelDef *i; 
  ScriptableEventModelDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  ScriptableModelUnion *v8; 
  ScriptableDataType dataType; 
  XCompositeModelDef **v10; 
  XModel **v11; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventModelDef, 32 * count);
  for ( i = varScriptableEventModelDef; v2; --v2 )
  {
    varScriptableEventModelDef = i;
    Load_Stream(NotAtStart, i, 0x20ui64);
    v4 = varScriptableEventModelDef;
    base = varScriptableEventModelDef->base;
    if ( varScriptableEventModelDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v7 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Preload_XString(NotAtStart);
        varXString = v7;
        varScriptableEventBaseDef = v6;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        v4 = varScriptableEventModelDef;
        goto LABEL_10;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
    }
LABEL_10:
    v8 = varScriptableModelUnion;
    varScriptableModelUnion = &v4->data;
    dataType = v4->dataType;
    if ( dataType == SCRIPTABLE_DATA_TYPE_XCOMPOSITEMODEL )
    {
      v10 = varXCompositeModelDefPtr;
      varXCompositeModelDefPtr = &v4->data.compositeModel;
      Preload_XCompositeModelDefPtr(NotAtStart);
      varXCompositeModelDefPtr = v10;
    }
    else if ( dataType == SCRIPTABLE_DATA_TYPE_XMODEL )
    {
      v11 = varXModelPtr;
      varXModelPtr = (XModel **)&v4->data;
      Preload_XModelPtr(NotAtStart);
      varXModelPtr = v11;
    }
    ++i;
    varScriptableModelUnion = v8;
  }
}

/*
==============
Preload_ScriptableEventModelDefStream
==============
*/
void Preload_ScriptableEventModelDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventModelDef *v4; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v6; 
  const char **v7; 
  ScriptableModelUnion *v8; 
  ScriptableDataType dataType; 
  XCompositeModelDef **v10; 
  XModel **v11; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 48564, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventModelDef;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      v4 = varScriptableEventModelDef;
      base = varScriptableEventModelDef->base;
      if ( varScriptableEventModelDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v7 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Preload_XString(NotAtStart);
          varXString = v7;
          varScriptableEventBaseDef = v6;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          v4 = varScriptableEventModelDef;
          goto LABEL_14;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
      }
LABEL_14:
      v8 = varScriptableModelUnion;
      varScriptableModelUnion = &v4->data;
      dataType = v4->dataType;
      if ( dataType == SCRIPTABLE_DATA_TYPE_XCOMPOSITEMODEL )
      {
        v10 = varXCompositeModelDefPtr;
        varXCompositeModelDefPtr = &v4->data.compositeModel;
        Preload_XCompositeModelDefPtr(NotAtStart);
        varXCompositeModelDefPtr = v10;
      }
      else if ( dataType == SCRIPTABLE_DATA_TYPE_XMODEL )
      {
        v11 = varXModelPtr;
        varXModelPtr = (XModel **)&v4->data;
        Preload_XModelPtr(NotAtStart);
        varXModelPtr = v11;
      }
      pos = g_streamPosGlob.pos;
      varScriptableEventModelDef = (ScriptableEventModelDef *)g_streamPosGlob.pos;
      varScriptableModelUnion = v8;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventMoveDef
==============
*/
void Preload_ScriptableEventMoveDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 

  Load_Stream(streamStart, varScriptableEventMoveDef, 0x30ui64);
  base = varScriptableEventMoveDef->base;
  if ( varScriptableEventMoveDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      return;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varXString = v3;
    varScriptableEventBaseDef = v2;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Preload_ScriptableEventMoveDefArray
==============
*/
void Preload_ScriptableEventMoveDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventMoveDef *i; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventMoveDef, 48 * count);
  for ( i = varScriptableEventMoveDef; v2; --v2 )
  {
    varScriptableEventMoveDef = i;
    Load_Stream(NotAtStart, i, 0x30ui64);
    base = varScriptableEventMoveDef->base;
    if ( varScriptableEventMoveDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v5 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v6 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Preload_XString(NotAtStart);
        varXString = v6;
        varScriptableEventBaseDef = v5;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Preload_ScriptableEventMoveDefStream
==============
*/
void Preload_ScriptableEventMoveDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 57466, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventMoveDef;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      base = varScriptableEventMoveDef->base;
      if ( varScriptableEventMoveDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v5 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v6 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Preload_XString(NotAtStart);
          varXString = v6;
          varScriptableEventBaseDef = v5;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableEventMoveDef = (ScriptableEventMoveDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventNoteTrackDef
==============
*/
void Preload_ScriptableEventNoteTrackDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 
  ScriptableNoteTrackDef *noteTracks; 
  ScriptableNoteTrackDef *v5; 
  __int64 noteTrackCount; 
  ScriptableNoteTrackDef *i; 

  Load_Stream(streamStart, varScriptableEventNoteTrackDef, 0x18ui64);
  base = varScriptableEventNoteTrackDef->base;
  if ( varScriptableEventNoteTrackDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      goto LABEL_8;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varXString = v3;
    varScriptableEventBaseDef = v2;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  noteTracks = varScriptableEventNoteTrackDef->noteTracks;
  if ( !noteTracks )
    return;
  if ( noteTracks == (ScriptableNoteTrackDef *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( noteTracks != (ScriptableNoteTrackDef *)-2i64 )
  {
    return;
  }
  v5 = varScriptableNoteTrackDef;
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  varScriptableNoteTrackDef = (ScriptableNoteTrackDef *)g_streamPosGlob.pos;
  noteTrackCount = varScriptableEventNoteTrackDef->noteTrackCount;
  Load_Stream(AtStart, g_streamPosGlob.pos, 32 * noteTrackCount);
  for ( i = varScriptableNoteTrackDef; noteTrackCount; --noteTrackCount )
  {
    varScriptableNoteTrackDef = i;
    Preload_ScriptableNoteTrackDef(NotAtStart);
    ++i;
  }
  varScriptableNoteTrackDef = v5;
  if ( noteTracks == (ScriptableNoteTrackDef *)-1i64 )
    DB_PopSharedData();
}

/*
==============
Preload_ScriptableEventNoteTrackDefArray
==============
*/
void Preload_ScriptableEventNoteTrackDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventNoteTrackDef *i; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  ScriptableNoteTrackDef *noteTracks; 
  ScriptableNoteTrackDef *v8; 
  __int64 noteTrackCount; 
  ScriptableNoteTrackDef *j; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventNoteTrackDef, 24 * count);
  for ( i = varScriptableEventNoteTrackDef; v2; --v2 )
  {
    varScriptableEventNoteTrackDef = i;
    Load_Stream(NotAtStart, i, 0x18ui64);
    base = varScriptableEventNoteTrackDef->base;
    if ( !varScriptableEventNoteTrackDef->base )
      goto LABEL_9;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      goto LABEL_9;
    }
    v5 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v6 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varXString = v6;
    varScriptableEventBaseDef = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
LABEL_9:
    noteTracks = varScriptableEventNoteTrackDef->noteTracks;
    if ( noteTracks )
    {
      if ( noteTracks == (ScriptableNoteTrackDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_14:
        v8 = varScriptableNoteTrackDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableNoteTrackDef = (ScriptableNoteTrackDef *)g_streamPosGlob.pos;
        noteTrackCount = varScriptableEventNoteTrackDef->noteTrackCount;
        Load_Stream(AtStart, g_streamPosGlob.pos, 32 * noteTrackCount);
        for ( j = varScriptableNoteTrackDef; noteTrackCount; --noteTrackCount )
        {
          varScriptableNoteTrackDef = j;
          Preload_ScriptableNoteTrackDef(NotAtStart);
          ++j;
        }
        varScriptableNoteTrackDef = v8;
        if ( noteTracks == (ScriptableNoteTrackDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_18;
      }
      if ( noteTracks == (ScriptableNoteTrackDef *)-2i64 )
        goto LABEL_14;
    }
LABEL_18:
    ++i;
  }
}

/*
==============
Preload_ScriptableEventNoteTrackDefStream
==============
*/
void Preload_ScriptableEventNoteTrackDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  ScriptableNoteTrackDef *noteTracks; 
  ScriptableNoteTrackDef *v8; 
  __int64 noteTrackCount; 
  ScriptableNoteTrackDef *i; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 49902, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventNoteTrackDef;
    do
    {
      Load_Stream(AtStart, pos, 0x18ui64);
      base = varScriptableEventNoteTrackDef->base;
      if ( !varScriptableEventNoteTrackDef->base )
        goto LABEL_13;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( base != (ScriptableEventBaseDef *)-2i64 )
      {
        goto LABEL_13;
      }
      v5 = varScriptableEventBaseDef;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
      v6 = varXString;
      varXString = &varScriptableEventBaseDef->name;
      Preload_XString(NotAtStart);
      varXString = v6;
      varScriptableEventBaseDef = v5;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        DB_PopSharedData();
LABEL_13:
      noteTracks = varScriptableEventNoteTrackDef->noteTracks;
      if ( noteTracks )
      {
        if ( noteTracks == (ScriptableNoteTrackDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_18:
          v8 = varScriptableNoteTrackDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableNoteTrackDef = (ScriptableNoteTrackDef *)g_streamPosGlob.pos;
          noteTrackCount = varScriptableEventNoteTrackDef->noteTrackCount;
          Load_Stream(AtStart, g_streamPosGlob.pos, 32 * noteTrackCount);
          for ( i = varScriptableNoteTrackDef; noteTrackCount; --noteTrackCount )
          {
            varScriptableNoteTrackDef = i;
            Preload_ScriptableNoteTrackDef(NotAtStart);
            ++i;
          }
          varScriptableNoteTrackDef = v8;
          if ( noteTracks == (ScriptableNoteTrackDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_22;
        }
        if ( noteTracks == (ScriptableNoteTrackDef *)-2i64 )
          goto LABEL_18;
      }
LABEL_22:
      pos = g_streamPosGlob.pos;
      varScriptableEventNoteTrackDef = (ScriptableEventNoteTrackDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventObjectiveDef
==============
*/
void Preload_ScriptableEventObjectiveDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 
  const char **v4; 
  GfxImage **v5; 

  Load_Stream(streamStart, varScriptableEventObjectiveDef, 0x40ui64);
  base = varScriptableEventObjectiveDef->base;
  if ( varScriptableEventObjectiveDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      goto LABEL_8;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varScriptableEventBaseDef = v2;
    varXString = v3;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v4 = varXString;
  varXString = &varScriptableEventObjectiveDef->description;
  Preload_XString(NotAtStart);
  varXString = &varScriptableEventObjectiveDef->icon;
  Preload_XString(NotAtStart);
  varXString = &varScriptableEventObjectiveDef->label;
  Preload_XString(NotAtStart);
  varXString = v4;
  v5 = varGfxImagePtr;
  varGfxImagePtr = &varScriptableEventObjectiveDef->iconImage;
  Preload_GfxImagePtr(NotAtStart);
  varGfxImagePtr = v5;
}

/*
==============
Preload_ScriptableEventObjectiveDefArray
==============
*/
void Preload_ScriptableEventObjectiveDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventObjectiveDef *i; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  const char **v7; 
  GfxImage **v8; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventObjectiveDef, count << 6);
  for ( i = varScriptableEventObjectiveDef; v2; --v2 )
  {
    varScriptableEventObjectiveDef = i;
    Load_Stream(NotAtStart, i, 0x40ui64);
    base = varScriptableEventObjectiveDef->base;
    if ( varScriptableEventObjectiveDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v5 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v6 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Preload_XString(NotAtStart);
        varXString = v6;
        varScriptableEventBaseDef = v5;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
    }
LABEL_9:
    v7 = varXString;
    varXString = &varScriptableEventObjectiveDef->description;
    Preload_XString(NotAtStart);
    varXString = &varScriptableEventObjectiveDef->icon;
    Preload_XString(NotAtStart);
    varXString = &varScriptableEventObjectiveDef->label;
    Preload_XString(NotAtStart);
    varXString = v7;
    v8 = varGfxImagePtr;
    varGfxImagePtr = &varScriptableEventObjectiveDef->iconImage;
    Preload_GfxImagePtr(NotAtStart);
    ++i;
    varGfxImagePtr = v8;
  }
}

/*
==============
Preload_ScriptableEventObjectiveDefStream
==============
*/
void Preload_ScriptableEventObjectiveDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  const char **v7; 
  GfxImage **v8; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 58538, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventObjectiveDef;
    do
    {
      Load_Stream(AtStart, pos, 0x40ui64);
      base = varScriptableEventObjectiveDef->base;
      if ( varScriptableEventObjectiveDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v5 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v6 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Preload_XString(NotAtStart);
          varXString = v6;
          varScriptableEventBaseDef = v5;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
      }
LABEL_13:
      v7 = varXString;
      varXString = &varScriptableEventObjectiveDef->description;
      Preload_XString(NotAtStart);
      varXString = &varScriptableEventObjectiveDef->icon;
      Preload_XString(NotAtStart);
      varXString = &varScriptableEventObjectiveDef->label;
      Preload_XString(NotAtStart);
      varXString = v7;
      v8 = varGfxImagePtr;
      varGfxImagePtr = &varScriptableEventObjectiveDef->iconImage;
      Preload_GfxImagePtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventObjectiveDef = (ScriptableEventObjectiveDef *)g_streamPosGlob.pos;
      varGfxImagePtr = v8;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventPFXDef
==============
*/
void Preload_ScriptableEventPFXDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 
  scr_string_t *scrTagNames; 
  scr_string_t *v5; 
  scr_string_t *scrEndTagNames; 
  scr_string_t *v7; 
  const char **v8; 
  FxCombinedDef *v9; 

  Load_Stream(streamStart, varScriptableEventPFXDef, 0x58ui64);
  base = varScriptableEventPFXDef->base;
  if ( varScriptableEventPFXDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      goto LABEL_8;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varXString = v3;
    varScriptableEventBaseDef = v2;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  scrTagNames = varScriptableEventPFXDef->scrTagNames;
  if ( !scrTagNames )
    goto LABEL_15;
  if ( scrTagNames == (scr_string_t *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( scrTagNames != (scr_string_t *)-2i64 )
  {
    goto LABEL_15;
  }
  v5 = varscr_string_t;
  varscr_string_t = AllocPreload_scr_string_t();
  Preload_scr_string_tArray(AtStart, varScriptableEventPFXDef->scrTagCount);
  varscr_string_t = v5;
  if ( scrTagNames == (scr_string_t *)-1i64 )
    DB_PopSharedData();
LABEL_15:
  scrEndTagNames = varScriptableEventPFXDef->scrEndTagNames;
  if ( scrEndTagNames )
  {
    if ( scrEndTagNames == (scr_string_t *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( scrEndTagNames != (scr_string_t *)-2i64 )
    {
      goto LABEL_22;
    }
    v7 = varscr_string_t;
    varscr_string_t = AllocPreload_scr_string_t();
    Preload_scr_string_tArray(AtStart, varScriptableEventPFXDef->scrEndTagCount);
    varscr_string_t = v7;
    if ( scrEndTagNames == (scr_string_t *)-1i64 )
      DB_PopSharedData();
  }
LABEL_22:
  v8 = varXString;
  varXString = &varScriptableEventPFXDef->effectAlias;
  Preload_XString(NotAtStart);
  varXString = v8;
  v9 = varFxCombinedDef;
  varFxCombinedDef = &varScriptableEventPFXDef->effectDef;
  Preload_FxCombinedDef(NotAtStart);
  varFxCombinedDef = v9;
}

/*
==============
Preload_ScriptableEventPFXDefArray
==============
*/
void Preload_ScriptableEventPFXDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventPFXDef *i; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  scr_string_t *scrTagNames; 
  scr_string_t *v8; 
  scr_string_t *scrEndTagNames; 
  scr_string_t *v10; 
  const char **v11; 
  FxCombinedDef *v12; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventPFXDef, 88 * count);
  for ( i = varScriptableEventPFXDef; v2; --v2 )
  {
    varScriptableEventPFXDef = i;
    Load_Stream(NotAtStart, i, 0x58ui64);
    base = varScriptableEventPFXDef->base;
    if ( !varScriptableEventPFXDef->base )
      goto LABEL_9;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      goto LABEL_9;
    }
    v5 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v6 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varXString = v6;
    varScriptableEventBaseDef = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
LABEL_9:
    scrTagNames = varScriptableEventPFXDef->scrTagNames;
    if ( !scrTagNames )
      goto LABEL_16;
    if ( scrTagNames == (scr_string_t *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( scrTagNames != (scr_string_t *)-2i64 )
    {
      goto LABEL_16;
    }
    v8 = varscr_string_t;
    varscr_string_t = AllocPreload_scr_string_t();
    Preload_scr_string_tArray(AtStart, varScriptableEventPFXDef->scrTagCount);
    varscr_string_t = v8;
    if ( scrTagNames == (scr_string_t *)-1i64 )
      DB_PopSharedData();
LABEL_16:
    scrEndTagNames = varScriptableEventPFXDef->scrEndTagNames;
    if ( scrEndTagNames )
    {
      if ( scrEndTagNames == (scr_string_t *)-1i64 )
      {
        DB_PushSharedData();
LABEL_21:
        v10 = varscr_string_t;
        varscr_string_t = AllocPreload_scr_string_t();
        Preload_scr_string_tArray(AtStart, varScriptableEventPFXDef->scrEndTagCount);
        varscr_string_t = v10;
        if ( scrEndTagNames == (scr_string_t *)-1i64 )
          DB_PopSharedData();
        goto LABEL_23;
      }
      if ( scrEndTagNames == (scr_string_t *)-2i64 )
        goto LABEL_21;
    }
LABEL_23:
    v11 = varXString;
    varXString = &varScriptableEventPFXDef->effectAlias;
    Preload_XString(NotAtStart);
    varXString = v11;
    v12 = varFxCombinedDef;
    varFxCombinedDef = &varScriptableEventPFXDef->effectDef;
    Preload_FxCombinedDef(NotAtStart);
    ++i;
    varFxCombinedDef = v12;
  }
}

/*
==============
Preload_ScriptableEventPFXDefStream
==============
*/
void Preload_ScriptableEventPFXDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  scr_string_t *scrTagNames; 
  scr_string_t *v8; 
  scr_string_t *scrEndTagNames; 
  scr_string_t *v10; 
  const char **v11; 
  FxCombinedDef *v12; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 51264, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventPFXDef;
    do
    {
      Load_Stream(AtStart, pos, 0x58ui64);
      base = varScriptableEventPFXDef->base;
      if ( !varScriptableEventPFXDef->base )
        goto LABEL_13;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( base != (ScriptableEventBaseDef *)-2i64 )
      {
        goto LABEL_13;
      }
      v5 = varScriptableEventBaseDef;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
      v6 = varXString;
      varXString = &varScriptableEventBaseDef->name;
      Preload_XString(NotAtStart);
      varXString = v6;
      varScriptableEventBaseDef = v5;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        DB_PopSharedData();
LABEL_13:
      scrTagNames = varScriptableEventPFXDef->scrTagNames;
      if ( !scrTagNames )
        goto LABEL_20;
      if ( scrTagNames == (scr_string_t *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( scrTagNames != (scr_string_t *)-2i64 )
      {
        goto LABEL_20;
      }
      v8 = varscr_string_t;
      varscr_string_t = AllocPreload_scr_string_t();
      Preload_scr_string_tArray(AtStart, varScriptableEventPFXDef->scrTagCount);
      varscr_string_t = v8;
      if ( scrTagNames == (scr_string_t *)-1i64 )
        DB_PopSharedData();
LABEL_20:
      scrEndTagNames = varScriptableEventPFXDef->scrEndTagNames;
      if ( scrEndTagNames )
      {
        if ( scrEndTagNames == (scr_string_t *)-1i64 )
        {
          DB_PushSharedData();
LABEL_25:
          v10 = varscr_string_t;
          varscr_string_t = AllocPreload_scr_string_t();
          Preload_scr_string_tArray(AtStart, varScriptableEventPFXDef->scrEndTagCount);
          varscr_string_t = v10;
          if ( scrEndTagNames == (scr_string_t *)-1i64 )
            DB_PopSharedData();
          goto LABEL_27;
        }
        if ( scrEndTagNames == (scr_string_t *)-2i64 )
          goto LABEL_25;
      }
LABEL_27:
      v11 = varXString;
      varXString = &varScriptableEventPFXDef->effectAlias;
      Preload_XString(NotAtStart);
      varXString = v11;
      v12 = varFxCombinedDef;
      varFxCombinedDef = &varScriptableEventPFXDef->effectDef;
      Preload_FxCombinedDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventPFXDef = (ScriptableEventPFXDef *)g_streamPosGlob.pos;
      varFxCombinedDef = v12;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventPartDamageDef
==============
*/
void Preload_ScriptableEventPartDamageDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 

  Load_Stream(streamStart, varScriptableEventPartDamageDef, 0x28ui64);
  base = varScriptableEventPartDamageDef->base;
  if ( varScriptableEventPartDamageDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      return;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varXString = v3;
    varScriptableEventBaseDef = v2;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Preload_ScriptableEventPartDamageDefArray
==============
*/
void Preload_ScriptableEventPartDamageDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventPartDamageDef *i; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventPartDamageDef, 40 * count);
  for ( i = varScriptableEventPartDamageDef; v2; --v2 )
  {
    varScriptableEventPartDamageDef = i;
    Load_Stream(NotAtStart, i, 0x28ui64);
    base = varScriptableEventPartDamageDef->base;
    if ( varScriptableEventPartDamageDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v5 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v6 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Preload_XString(NotAtStart);
        varXString = v6;
        varScriptableEventBaseDef = v5;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Preload_ScriptableEventPartDamageDefStream
==============
*/
void Preload_ScriptableEventPartDamageDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 54693, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventPartDamageDef;
    do
    {
      Load_Stream(AtStart, pos, 0x28ui64);
      base = varScriptableEventPartDamageDef->base;
      if ( varScriptableEventPartDamageDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v5 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v6 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Preload_XString(NotAtStart);
          varXString = v6;
          varScriptableEventBaseDef = v5;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableEventPartDamageDef = (ScriptableEventPartDamageDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventPlayMayhemDef
==============
*/
void Preload_ScriptableEventPlayMayhemDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 

  Load_Stream(streamStart, varScriptableEventPlayMayhemDef, 0x10ui64);
  base = varScriptableEventPlayMayhemDef->base;
  if ( varScriptableEventPlayMayhemDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      return;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varXString = v3;
    varScriptableEventBaseDef = v2;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Preload_ScriptableEventPlayMayhemDefArray
==============
*/
void Preload_ScriptableEventPlayMayhemDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventPlayMayhemDef *i; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventPlayMayhemDef, 16 * count);
  for ( i = varScriptableEventPlayMayhemDef; v2; --v2 )
  {
    varScriptableEventPlayMayhemDef = i;
    Load_Stream(NotAtStart, i, 0x10ui64);
    base = varScriptableEventPlayMayhemDef->base;
    if ( varScriptableEventPlayMayhemDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v5 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v6 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Preload_XString(NotAtStart);
        varXString = v6;
        varScriptableEventBaseDef = v5;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Preload_ScriptableEventPlayMayhemDefStream
==============
*/
void Preload_ScriptableEventPlayMayhemDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 54997, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventPlayMayhemDef;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      base = varScriptableEventPlayMayhemDef->base;
      if ( varScriptableEventPlayMayhemDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v5 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v6 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Preload_XString(NotAtStart);
          varXString = v6;
          varScriptableEventBaseDef = v5;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableEventPlayMayhemDef = (ScriptableEventPlayMayhemDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventRandomDef
==============
*/
void Preload_ScriptableEventRandomDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 
  ScriptableEventDef *eventsA; 
  ScriptableEventDef *v5; 
  ScriptableEventDef *eventsB; 
  ScriptableEventDef *v7; 

  Load_Stream(streamStart, varScriptableEventRandomDef, 0x30ui64);
  base = varScriptableEventRandomDef->base;
  if ( varScriptableEventRandomDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      goto LABEL_8;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varXString = v3;
    varScriptableEventBaseDef = v2;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  eventsA = varScriptableEventRandomDef->eventsA;
  if ( !eventsA )
    goto LABEL_15;
  if ( eventsA == (ScriptableEventDef *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( eventsA != (ScriptableEventDef *)-2i64 )
  {
    goto LABEL_15;
  }
  v5 = varScriptableEventDef;
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
  Preload_ScriptableEventDefArray(AtStart, varScriptableEventRandomDef->eventACount);
  varScriptableEventDef = v5;
  if ( eventsA == (ScriptableEventDef *)-1i64 )
    DB_PopSharedData();
LABEL_15:
  eventsB = varScriptableEventRandomDef->eventsB;
  if ( !eventsB )
    return;
  if ( eventsB == (ScriptableEventDef *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( eventsB != (ScriptableEventDef *)-2i64 )
  {
    return;
  }
  v7 = varScriptableEventDef;
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
  Preload_ScriptableEventDefArray(AtStart, varScriptableEventRandomDef->eventBCount);
  varScriptableEventDef = v7;
  if ( eventsB == (ScriptableEventDef *)-1i64 )
    DB_PopSharedData();
}

/*
==============
Preload_ScriptableEventRandomDefArray
==============
*/
void Preload_ScriptableEventRandomDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventRandomDef *i; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  ScriptableEventDef *eventsA; 
  ScriptableEventDef *v8; 
  ScriptableEventDef *eventsB; 
  ScriptableEventDef *v10; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventRandomDef, 48 * count);
  for ( i = varScriptableEventRandomDef; v2; --v2 )
  {
    varScriptableEventRandomDef = i;
    Load_Stream(NotAtStart, i, 0x30ui64);
    base = varScriptableEventRandomDef->base;
    if ( !varScriptableEventRandomDef->base )
      goto LABEL_9;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      goto LABEL_9;
    }
    v5 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v6 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varXString = v6;
    varScriptableEventBaseDef = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
LABEL_9:
    eventsA = varScriptableEventRandomDef->eventsA;
    if ( !eventsA )
      goto LABEL_16;
    if ( eventsA == (ScriptableEventDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( eventsA != (ScriptableEventDef *)-2i64 )
    {
      goto LABEL_16;
    }
    v8 = varScriptableEventDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
    Preload_ScriptableEventDefArray(AtStart, varScriptableEventRandomDef->eventACount);
    varScriptableEventDef = v8;
    if ( eventsA == (ScriptableEventDef *)-1i64 )
      DB_PopSharedData();
LABEL_16:
    eventsB = varScriptableEventRandomDef->eventsB;
    if ( eventsB )
    {
      if ( eventsB == (ScriptableEventDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_21:
        v10 = varScriptableEventDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
        Preload_ScriptableEventDefArray(AtStart, varScriptableEventRandomDef->eventBCount);
        varScriptableEventDef = v10;
        if ( eventsB == (ScriptableEventDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_23;
      }
      if ( eventsB == (ScriptableEventDef *)-2i64 )
        goto LABEL_21;
    }
LABEL_23:
    ++i;
  }
}

/*
==============
Preload_ScriptableEventRandomDefStream
==============
*/
void Preload_ScriptableEventRandomDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  ScriptableEventDef *eventsA; 
  ScriptableEventDef *v8; 
  ScriptableEventDef *eventsB; 
  ScriptableEventDef *v10; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 47893, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventRandomDef;
    do
    {
      Load_Stream(AtStart, pos, 0x30ui64);
      base = varScriptableEventRandomDef->base;
      if ( !varScriptableEventRandomDef->base )
        goto LABEL_13;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( base != (ScriptableEventBaseDef *)-2i64 )
      {
        goto LABEL_13;
      }
      v5 = varScriptableEventBaseDef;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
      v6 = varXString;
      varXString = &varScriptableEventBaseDef->name;
      Preload_XString(NotAtStart);
      varXString = v6;
      varScriptableEventBaseDef = v5;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        DB_PopSharedData();
LABEL_13:
      eventsA = varScriptableEventRandomDef->eventsA;
      if ( !eventsA )
        goto LABEL_20;
      if ( eventsA == (ScriptableEventDef *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( eventsA != (ScriptableEventDef *)-2i64 )
      {
        goto LABEL_20;
      }
      v8 = varScriptableEventDef;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
      Preload_ScriptableEventDefArray(AtStart, varScriptableEventRandomDef->eventACount);
      varScriptableEventDef = v8;
      if ( eventsA == (ScriptableEventDef *)-1i64 )
        DB_PopSharedData();
LABEL_20:
      eventsB = varScriptableEventRandomDef->eventsB;
      if ( eventsB )
      {
        if ( eventsB == (ScriptableEventDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_25:
          v10 = varScriptableEventDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
          Preload_ScriptableEventDefArray(AtStart, varScriptableEventRandomDef->eventBCount);
          varScriptableEventDef = v10;
          if ( eventsB == (ScriptableEventDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_27;
        }
        if ( eventsB == (ScriptableEventDef *)-2i64 )
          goto LABEL_25;
      }
LABEL_27:
      pos = g_streamPosGlob.pos;
      varScriptableEventRandomDef = (ScriptableEventRandomDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventRumbleDef
==============
*/
void Preload_ScriptableEventRumbleDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 
  const char **v4; 
  scr_string_t *v5; 
  const char **v6; 
  RumbleInfo **v7; 

  Load_Stream(streamStart, varScriptableEventRumbleDef, 0x38ui64);
  base = varScriptableEventRumbleDef->base;
  if ( varScriptableEventRumbleDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      goto LABEL_8;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varScriptableEventBaseDef = v2;
    varXString = v3;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v4 = varXString;
  varXString = &varScriptableEventRumbleDef->tagName;
  Preload_XString(NotAtStart);
  varXString = v4;
  v5 = varscr_string_t;
  varscr_string_t = &varScriptableEventRumbleDef->scrTagName;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = v5;
  v6 = varXString;
  varXString = &varScriptableEventRumbleDef->rumble;
  Preload_XString(NotAtStart);
  varXString = v6;
  v7 = varRumbleInfoPtr;
  varRumbleInfoPtr = &varScriptableEventRumbleDef->rumbleAsset;
  Preload_RumbleInfoPtr(NotAtStart);
  varRumbleInfoPtr = v7;
}

/*
==============
Preload_ScriptableEventRumbleDefArray
==============
*/
void Preload_ScriptableEventRumbleDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventRumbleDef *i; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  const char **v7; 
  scr_string_t *v8; 
  const char **v9; 
  RumbleInfo **v10; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventRumbleDef, 56 * count);
  for ( i = varScriptableEventRumbleDef; v2; --v2 )
  {
    varScriptableEventRumbleDef = i;
    Load_Stream(NotAtStart, i, 0x38ui64);
    base = varScriptableEventRumbleDef->base;
    if ( varScriptableEventRumbleDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v5 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v6 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Preload_XString(NotAtStart);
        varXString = v6;
        varScriptableEventBaseDef = v5;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
    }
LABEL_9:
    v7 = varXString;
    varXString = &varScriptableEventRumbleDef->tagName;
    Preload_XString(NotAtStart);
    varXString = v7;
    v8 = varscr_string_t;
    varscr_string_t = &varScriptableEventRumbleDef->scrTagName;
    Preload_scr_string_t(NotAtStart);
    varscr_string_t = v8;
    v9 = varXString;
    varXString = &varScriptableEventRumbleDef->rumble;
    Preload_XString(NotAtStart);
    varXString = v9;
    v10 = varRumbleInfoPtr;
    varRumbleInfoPtr = &varScriptableEventRumbleDef->rumbleAsset;
    Preload_RumbleInfoPtr(NotAtStart);
    ++i;
    varRumbleInfoPtr = v10;
  }
}

/*
==============
Preload_ScriptableEventRumbleDefStream
==============
*/
void Preload_ScriptableEventRumbleDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  const char **v7; 
  scr_string_t *v8; 
  const char **v9; 
  RumbleInfo **v10; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 53908, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventRumbleDef;
    do
    {
      Load_Stream(AtStart, pos, 0x38ui64);
      base = varScriptableEventRumbleDef->base;
      if ( varScriptableEventRumbleDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v5 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v6 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Preload_XString(NotAtStart);
          varXString = v6;
          varScriptableEventBaseDef = v5;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
      }
LABEL_13:
      v7 = varXString;
      varXString = &varScriptableEventRumbleDef->tagName;
      Preload_XString(NotAtStart);
      varXString = v7;
      v8 = varscr_string_t;
      varscr_string_t = &varScriptableEventRumbleDef->scrTagName;
      Preload_scr_string_t(NotAtStart);
      varscr_string_t = v8;
      v9 = varXString;
      varXString = &varScriptableEventRumbleDef->rumble;
      Preload_XString(NotAtStart);
      varXString = v9;
      v10 = varRumbleInfoPtr;
      varRumbleInfoPtr = &varScriptableEventRumbleDef->rumbleAsset;
      Preload_RumbleInfoPtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventRumbleDef = (ScriptableEventRumbleDef *)g_streamPosGlob.pos;
      varRumbleInfoPtr = v10;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventScreenshakeDef
==============
*/
void Preload_ScriptableEventScreenshakeDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 
  const char **v4; 
  scr_string_t *v5; 

  Load_Stream(streamStart, varScriptableEventScreenshakeDef, 0x50ui64);
  base = varScriptableEventScreenshakeDef->base;
  if ( varScriptableEventScreenshakeDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      goto LABEL_8;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varScriptableEventBaseDef = v2;
    varXString = v3;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v4 = varXString;
  varXString = &varScriptableEventScreenshakeDef->tagName;
  Preload_XString(NotAtStart);
  varXString = v4;
  v5 = varscr_string_t;
  varscr_string_t = &varScriptableEventScreenshakeDef->scrTagName;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = v5;
}

/*
==============
Preload_ScriptableEventScreenshakeDefArray
==============
*/
void Preload_ScriptableEventScreenshakeDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventScreenshakeDef *i; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  const char **v7; 
  scr_string_t *v8; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventScreenshakeDef, 80 * count);
  for ( i = varScriptableEventScreenshakeDef; v2; --v2 )
  {
    varScriptableEventScreenshakeDef = i;
    Load_Stream(NotAtStart, i, 0x50ui64);
    base = varScriptableEventScreenshakeDef->base;
    if ( varScriptableEventScreenshakeDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v5 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v6 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Preload_XString(NotAtStart);
        varXString = v6;
        varScriptableEventBaseDef = v5;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
    }
LABEL_9:
    v7 = varXString;
    varXString = &varScriptableEventScreenshakeDef->tagName;
    Preload_XString(NotAtStart);
    varXString = v7;
    v8 = varscr_string_t;
    varscr_string_t = &varScriptableEventScreenshakeDef->scrTagName;
    Preload_scr_string_t(NotAtStart);
    ++i;
    varscr_string_t = v8;
  }
}

/*
==============
Preload_ScriptableEventScreenshakeDefStream
==============
*/
void Preload_ScriptableEventScreenshakeDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  const char **v7; 
  scr_string_t *v8; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 54427, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventScreenshakeDef;
    do
    {
      Load_Stream(AtStart, pos, 0x50ui64);
      base = varScriptableEventScreenshakeDef->base;
      if ( varScriptableEventScreenshakeDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v5 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v6 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Preload_XString(NotAtStart);
          varXString = v6;
          varScriptableEventBaseDef = v5;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
      }
LABEL_13:
      v7 = varXString;
      varXString = &varScriptableEventScreenshakeDef->tagName;
      Preload_XString(NotAtStart);
      varXString = v7;
      v8 = varscr_string_t;
      varscr_string_t = &varScriptableEventScreenshakeDef->scrTagName;
      Preload_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventScreenshakeDef = (ScriptableEventScreenshakeDef *)g_streamPosGlob.pos;
      varscr_string_t = v8;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventScriptDamageDef
==============
*/
void Preload_ScriptableEventScriptDamageDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 
  const char **v4; 
  scr_string_t *v5; 

  Load_Stream(streamStart, varScriptableEventScriptDamageDef, 0x18ui64);
  base = varScriptableEventScriptDamageDef->base;
  if ( varScriptableEventScriptDamageDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      goto LABEL_8;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varScriptableEventBaseDef = v2;
    varXString = v3;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v4 = varXString;
  varXString = &varScriptableEventScriptDamageDef->notification;
  Preload_XString(NotAtStart);
  varXString = v4;
  v5 = varscr_string_t;
  varscr_string_t = &varScriptableEventScriptDamageDef->scrNotification;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = v5;
}

/*
==============
Preload_ScriptableEventScriptDamageDefArray
==============
*/
void Preload_ScriptableEventScriptDamageDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventScriptDamageDef *i; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  const char **v7; 
  scr_string_t *v8; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventScriptDamageDef, 24 * count);
  for ( i = varScriptableEventScriptDamageDef; v2; --v2 )
  {
    varScriptableEventScriptDamageDef = i;
    Load_Stream(NotAtStart, i, 0x18ui64);
    base = varScriptableEventScriptDamageDef->base;
    if ( varScriptableEventScriptDamageDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v5 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v6 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Preload_XString(NotAtStart);
        varXString = v6;
        varScriptableEventBaseDef = v5;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
    }
LABEL_9:
    v7 = varXString;
    varXString = &varScriptableEventScriptDamageDef->notification;
    Preload_XString(NotAtStart);
    varXString = v7;
    v8 = varscr_string_t;
    varscr_string_t = &varScriptableEventScriptDamageDef->scrNotification;
    Preload_scr_string_t(NotAtStart);
    ++i;
    varscr_string_t = v8;
  }
}

/*
==============
Preload_ScriptableEventScriptDamageDefStream
==============
*/
void Preload_ScriptableEventScriptDamageDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  const char **v7; 
  scr_string_t *v8; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 59362, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventScriptDamageDef;
    do
    {
      Load_Stream(AtStart, pos, 0x18ui64);
      base = varScriptableEventScriptDamageDef->base;
      if ( varScriptableEventScriptDamageDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v5 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v6 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Preload_XString(NotAtStart);
          varXString = v6;
          varScriptableEventBaseDef = v5;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
      }
LABEL_13:
      v7 = varXString;
      varXString = &varScriptableEventScriptDamageDef->notification;
      Preload_XString(NotAtStart);
      varXString = v7;
      v8 = varscr_string_t;
      varscr_string_t = &varScriptableEventScriptDamageDef->scrNotification;
      Preload_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventScriptDamageDef = (ScriptableEventScriptDamageDef *)g_streamPosGlob.pos;
      varscr_string_t = v8;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventScriptDef
==============
*/
void Preload_ScriptableEventScriptDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 
  const char **v4; 
  scr_string_t *v5; 

  Load_Stream(streamStart, varScriptableEventScriptDef, 0x20ui64);
  base = varScriptableEventScriptDef->base;
  if ( varScriptableEventScriptDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      goto LABEL_8;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varScriptableEventBaseDef = v2;
    varXString = v3;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v4 = varXString;
  varXString = &varScriptableEventScriptDef->notification;
  Preload_XString(NotAtStart);
  varXString = v4;
  v5 = varscr_string_t;
  varscr_string_t = &varScriptableEventScriptDef->scrNotification;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = v5;
}

/*
==============
Preload_ScriptableEventScriptDefArray
==============
*/
void Preload_ScriptableEventScriptDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventScriptDef *i; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  const char **v7; 
  scr_string_t *v8; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventScriptDef, 32 * count);
  for ( i = varScriptableEventScriptDef; v2; --v2 )
  {
    varScriptableEventScriptDef = i;
    Load_Stream(NotAtStart, i, 0x20ui64);
    base = varScriptableEventScriptDef->base;
    if ( varScriptableEventScriptDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v5 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v6 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Preload_XString(NotAtStart);
        varXString = v6;
        varScriptableEventBaseDef = v5;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
    }
LABEL_9:
    v7 = varXString;
    varXString = &varScriptableEventScriptDef->notification;
    Preload_XString(NotAtStart);
    varXString = v7;
    v8 = varscr_string_t;
    varscr_string_t = &varScriptableEventScriptDef->scrNotification;
    Preload_scr_string_t(NotAtStart);
    ++i;
    varscr_string_t = v8;
  }
}

/*
==============
Preload_ScriptableEventScriptDefStream
==============
*/
void Preload_ScriptableEventScriptDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  const char **v7; 
  scr_string_t *v8; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 48090, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventScriptDef;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      base = varScriptableEventScriptDef->base;
      if ( varScriptableEventScriptDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v5 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v6 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Preload_XString(NotAtStart);
          varXString = v6;
          varScriptableEventBaseDef = v5;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
      }
LABEL_13:
      v7 = varXString;
      varXString = &varScriptableEventScriptDef->notification;
      Preload_XString(NotAtStart);
      varXString = v7;
      v8 = varscr_string_t;
      varscr_string_t = &varScriptableEventScriptDef->scrNotification;
      Preload_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventScriptDef = (ScriptableEventScriptDef *)g_streamPosGlob.pos;
      varscr_string_t = v8;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventSetMayhemDef
==============
*/
void Preload_ScriptableEventSetMayhemDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 
  MayhemData **v4; 

  Load_Stream(streamStart, varScriptableEventSetMayhemDef, 0x18ui64);
  base = varScriptableEventSetMayhemDef->base;
  if ( varScriptableEventSetMayhemDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      goto LABEL_8;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varScriptableEventBaseDef = v2;
    varXString = v3;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v4 = varMayhemDataPtr;
  varMayhemDataPtr = &varScriptableEventSetMayhemDef->mayhem;
  Preload_MayhemDataPtr(NotAtStart);
  varMayhemDataPtr = v4;
}

/*
==============
Preload_ScriptableEventSetMayhemDefArray
==============
*/
void Preload_ScriptableEventSetMayhemDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventSetMayhemDef *i; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  MayhemData **v7; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventSetMayhemDef, 24 * count);
  for ( i = varScriptableEventSetMayhemDef; v2; --v2 )
  {
    varScriptableEventSetMayhemDef = i;
    Load_Stream(NotAtStart, i, 0x18ui64);
    base = varScriptableEventSetMayhemDef->base;
    if ( varScriptableEventSetMayhemDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v5 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v6 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Preload_XString(NotAtStart);
        varXString = v6;
        varScriptableEventBaseDef = v5;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
    }
LABEL_9:
    v7 = varMayhemDataPtr;
    varMayhemDataPtr = &varScriptableEventSetMayhemDef->mayhem;
    Preload_MayhemDataPtr(NotAtStart);
    ++i;
    varMayhemDataPtr = v7;
  }
}

/*
==============
Preload_ScriptableEventSetMayhemDefStream
==============
*/
void Preload_ScriptableEventSetMayhemDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  MayhemData **v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 54846, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventSetMayhemDef;
    do
    {
      Load_Stream(AtStart, pos, 0x18ui64);
      base = varScriptableEventSetMayhemDef->base;
      if ( varScriptableEventSetMayhemDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v5 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v6 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Preload_XString(NotAtStart);
          varXString = v6;
          varScriptableEventBaseDef = v5;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
      }
LABEL_13:
      v7 = varMayhemDataPtr;
      varMayhemDataPtr = &varScriptableEventSetMayhemDef->mayhem;
      Preload_MayhemDataPtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventSetMayhemDef = (ScriptableEventSetMayhemDef *)g_streamPosGlob.pos;
      varMayhemDataPtr = v7;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventSoundDef
==============
*/
void Preload_ScriptableEventSoundDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 
  const char **v4; 
  scr_string_t *v5; 
  const char **v6; 

  Load_Stream(streamStart, varScriptableEventSoundDef, 0x58ui64);
  base = varScriptableEventSoundDef->base;
  if ( varScriptableEventSoundDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      goto LABEL_8;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varScriptableEventBaseDef = v2;
    varXString = v3;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v4 = varXString;
  varXString = &varScriptableEventSoundDef->tagName;
  Preload_XString(NotAtStart);
  varXString = v4;
  v5 = varscr_string_t;
  varscr_string_t = &varScriptableEventSoundDef->scrTagName;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = v5;
  v6 = varXString;
  varXString = &varScriptableEventSoundDef->soundAlias;
  Preload_XString(NotAtStart);
  varXString = &varScriptableEventSoundDef->explosionReflClass;
  Preload_XString(NotAtStart);
  varXString = v6;
}

/*
==============
Preload_ScriptableEventSoundDefArray
==============
*/
void Preload_ScriptableEventSoundDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventSoundDef *i; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  const char **v7; 
  scr_string_t *v8; 
  const char **v9; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventSoundDef, 88 * count);
  for ( i = varScriptableEventSoundDef; v2; --v2 )
  {
    varScriptableEventSoundDef = i;
    Load_Stream(NotAtStart, i, 0x58ui64);
    base = varScriptableEventSoundDef->base;
    if ( varScriptableEventSoundDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v5 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v6 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Preload_XString(NotAtStart);
        varXString = v6;
        varScriptableEventBaseDef = v5;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
    }
LABEL_9:
    v7 = varXString;
    varXString = &varScriptableEventSoundDef->tagName;
    Preload_XString(NotAtStart);
    varXString = v7;
    v8 = varscr_string_t;
    varscr_string_t = &varScriptableEventSoundDef->scrTagName;
    Preload_scr_string_t(NotAtStart);
    varscr_string_t = v8;
    v9 = varXString;
    varXString = &varScriptableEventSoundDef->soundAlias;
    Preload_XString(NotAtStart);
    varXString = &varScriptableEventSoundDef->explosionReflClass;
    Preload_XString(NotAtStart);
    ++i;
    varXString = v9;
  }
}

/*
==============
Preload_ScriptableEventSoundDefStream
==============
*/
void Preload_ScriptableEventSoundDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  const char **v7; 
  scr_string_t *v8; 
  const char **v9; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 52371, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventSoundDef;
    do
    {
      Load_Stream(AtStart, pos, 0x58ui64);
      base = varScriptableEventSoundDef->base;
      if ( varScriptableEventSoundDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v5 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v6 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Preload_XString(NotAtStart);
          varXString = v6;
          varScriptableEventBaseDef = v5;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
      }
LABEL_13:
      v7 = varXString;
      varXString = &varScriptableEventSoundDef->tagName;
      Preload_XString(NotAtStart);
      varXString = v7;
      v8 = varscr_string_t;
      varscr_string_t = &varScriptableEventSoundDef->scrTagName;
      Preload_scr_string_t(NotAtStart);
      varscr_string_t = v8;
      v9 = varXString;
      varXString = &varScriptableEventSoundDef->soundAlias;
      Preload_XString(NotAtStart);
      varXString = &varScriptableEventSoundDef->explosionReflClass;
      Preload_XString(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventSoundDef = (ScriptableEventSoundDef *)g_streamPosGlob.pos;
      varXString = v9;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventSpatialDisableDef
==============
*/
void Preload_ScriptableEventSpatialDisableDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 

  Load_Stream(streamStart, varScriptableEventSpatialDisableDef, 0x10ui64);
  base = varScriptableEventSpatialDisableDef->base;
  if ( varScriptableEventSpatialDisableDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      return;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varXString = v3;
    varScriptableEventBaseDef = v2;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Preload_ScriptableEventSpatialDisableDefArray
==============
*/
void Preload_ScriptableEventSpatialDisableDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventSpatialDisableDef *i; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventSpatialDisableDef, 16 * count);
  for ( i = varScriptableEventSpatialDisableDef; v2; --v2 )
  {
    varScriptableEventSpatialDisableDef = i;
    Load_Stream(NotAtStart, i, 0x10ui64);
    base = varScriptableEventSpatialDisableDef->base;
    if ( varScriptableEventSpatialDisableDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v5 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v6 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Preload_XString(NotAtStart);
        varXString = v6;
        varScriptableEventBaseDef = v5;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Preload_ScriptableEventSpatialDisableDefStream
==============
*/
void Preload_ScriptableEventSpatialDisableDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 58666, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventSpatialDisableDef;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      base = varScriptableEventSpatialDisableDef->base;
      if ( varScriptableEventSpatialDisableDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v5 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v6 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Preload_XString(NotAtStart);
          varXString = v6;
          varScriptableEventBaseDef = v5;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableEventSpatialDisableDef = (ScriptableEventSpatialDisableDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventSpawnDynentDef
==============
*/
void Preload_ScriptableEventSpawnDynentDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 
  XModel **v4; 
  const char **v5; 
  scr_string_t *v6; 
  const char **v7; 
  FxCombinedDef *v8; 

  Load_Stream(streamStart, varScriptableEventSpawnDynentDef, 0x70ui64);
  base = varScriptableEventSpawnDynentDef->base;
  if ( varScriptableEventSpawnDynentDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      goto LABEL_8;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varScriptableEventBaseDef = v2;
    varXString = v3;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v4 = varXModelPtr;
  varXModelPtr = &varScriptableEventSpawnDynentDef->model;
  Preload_XModelPtr(NotAtStart);
  varXModelPtr = v4;
  v5 = varXString;
  varXString = &varScriptableEventSpawnDynentDef->tagName;
  Preload_XString(NotAtStart);
  varXString = v5;
  v6 = varscr_string_t;
  varscr_string_t = &varScriptableEventSpawnDynentDef->scrTagName;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = v6;
  v7 = varXString;
  varXString = &varScriptableEventSpawnDynentDef->effectAlias;
  Preload_XString(NotAtStart);
  varXString = v7;
  v8 = varFxCombinedDef;
  varFxCombinedDef = &varScriptableEventSpawnDynentDef->effectDef;
  Preload_FxCombinedDef(NotAtStart);
  varFxCombinedDef = v8;
}

/*
==============
Preload_ScriptableEventSpawnDynentDefArray
==============
*/
void Preload_ScriptableEventSpawnDynentDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventSpawnDynentDef *i; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  XModel **v7; 
  const char **v8; 
  scr_string_t *v9; 
  const char **v10; 
  FxCombinedDef *v11; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventSpawnDynentDef, 112 * count);
  for ( i = varScriptableEventSpawnDynentDef; v2; --v2 )
  {
    varScriptableEventSpawnDynentDef = i;
    Load_Stream(NotAtStart, i, 0x70ui64);
    base = varScriptableEventSpawnDynentDef->base;
    if ( varScriptableEventSpawnDynentDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v5 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v6 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Preload_XString(NotAtStart);
        varXString = v6;
        varScriptableEventBaseDef = v5;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
    }
LABEL_9:
    v7 = varXModelPtr;
    varXModelPtr = &varScriptableEventSpawnDynentDef->model;
    Preload_XModelPtr(NotAtStart);
    varXModelPtr = v7;
    v8 = varXString;
    varXString = &varScriptableEventSpawnDynentDef->tagName;
    Preload_XString(NotAtStart);
    varXString = v8;
    v9 = varscr_string_t;
    varscr_string_t = &varScriptableEventSpawnDynentDef->scrTagName;
    Preload_scr_string_t(NotAtStart);
    varscr_string_t = v9;
    v10 = varXString;
    varXString = &varScriptableEventSpawnDynentDef->effectAlias;
    Preload_XString(NotAtStart);
    varXString = v10;
    v11 = varFxCombinedDef;
    varFxCombinedDef = &varScriptableEventSpawnDynentDef->effectDef;
    Preload_FxCombinedDef(NotAtStart);
    ++i;
    varFxCombinedDef = v11;
  }
}

/*
==============
Preload_ScriptableEventSpawnDynentDefStream
==============
*/
void Preload_ScriptableEventSpawnDynentDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  XModel **v7; 
  const char **v8; 
  scr_string_t *v9; 
  const char **v10; 
  FxCombinedDef *v11; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 50666, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventSpawnDynentDef;
    do
    {
      Load_Stream(AtStart, pos, 0x70ui64);
      base = varScriptableEventSpawnDynentDef->base;
      if ( varScriptableEventSpawnDynentDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v5 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v6 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Preload_XString(NotAtStart);
          varXString = v6;
          varScriptableEventBaseDef = v5;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
      }
LABEL_13:
      v7 = varXModelPtr;
      varXModelPtr = &varScriptableEventSpawnDynentDef->model;
      Preload_XModelPtr(NotAtStart);
      varXModelPtr = v7;
      v8 = varXString;
      varXString = &varScriptableEventSpawnDynentDef->tagName;
      Preload_XString(NotAtStart);
      varXString = v8;
      v9 = varscr_string_t;
      varscr_string_t = &varScriptableEventSpawnDynentDef->scrTagName;
      Preload_scr_string_t(NotAtStart);
      varscr_string_t = v9;
      v10 = varXString;
      varXString = &varScriptableEventSpawnDynentDef->effectAlias;
      Preload_XString(NotAtStart);
      varXString = v10;
      v11 = varFxCombinedDef;
      varFxCombinedDef = &varScriptableEventSpawnDynentDef->effectDef;
      Preload_FxCombinedDef(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableEventSpawnDynentDef = (ScriptableEventSpawnDynentDef *)g_streamPosGlob.pos;
      varFxCombinedDef = v11;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventStateChangeDef
==============
*/
void Preload_ScriptableEventStateChangeDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 

  Load_Stream(streamStart, varScriptableEventStateChangeDef, 0x18ui64);
  base = varScriptableEventStateChangeDef->base;
  if ( varScriptableEventStateChangeDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      return;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varXString = v3;
    varScriptableEventBaseDef = v2;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Preload_ScriptableEventStateChangeDefArray
==============
*/
void Preload_ScriptableEventStateChangeDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventStateChangeDef *i; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventStateChangeDef, 24 * count);
  for ( i = varScriptableEventStateChangeDef; v2; --v2 )
  {
    varScriptableEventStateChangeDef = i;
    Load_Stream(NotAtStart, i, 0x18ui64);
    base = varScriptableEventStateChangeDef->base;
    if ( varScriptableEventStateChangeDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v5 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v6 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Preload_XString(NotAtStart);
        varXString = v6;
        varScriptableEventBaseDef = v5;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Preload_ScriptableEventStateChangeDefStream
==============
*/
void Preload_ScriptableEventStateChangeDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 47376, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventStateChangeDef;
    do
    {
      Load_Stream(AtStart, pos, 0x18ui64);
      base = varScriptableEventStateChangeDef->base;
      if ( varScriptableEventStateChangeDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v5 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v6 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Preload_XString(NotAtStart);
          varXString = v6;
          varScriptableEventBaseDef = v5;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableEventStateChangeDef = (ScriptableEventStateChangeDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventSunDef
==============
*/
void Preload_ScriptableEventSunDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 

  Load_Stream(streamStart, varScriptableEventSunDef, 0x48ui64);
  base = varScriptableEventSunDef->base;
  if ( varScriptableEventSunDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      return;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varXString = v3;
    varScriptableEventBaseDef = v2;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Preload_ScriptableEventSunDefArray
==============
*/
void Preload_ScriptableEventSunDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventSunDef *i; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventSunDef, 72 * count);
  for ( i = varScriptableEventSunDef; v2; --v2 )
  {
    varScriptableEventSunDef = i;
    Load_Stream(NotAtStart, i, 0x48ui64);
    base = varScriptableEventSunDef->base;
    if ( varScriptableEventSunDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v5 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v6 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Preload_XString(NotAtStart);
        varXString = v6;
        varScriptableEventBaseDef = v5;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Preload_ScriptableEventSunDefStream
==============
*/
void Preload_ScriptableEventSunDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 53642, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventSunDef;
    do
    {
      Load_Stream(AtStart, pos, 0x48ui64);
      base = varScriptableEventSunDef->base;
      if ( varScriptableEventSunDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v5 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v6 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Preload_XString(NotAtStart);
          varXString = v6;
          varScriptableEventBaseDef = v5;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableEventSunDef = (ScriptableEventSunDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventTeamSelectorDef
==============
*/
void Preload_ScriptableEventTeamSelectorDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 
  ScriptableEventDef *eventsPass; 
  ScriptableEventDef *v5; 
  ScriptableEventDef *eventsFail; 
  ScriptableEventDef *v7; 

  Load_Stream(streamStart, varScriptableEventTeamSelectorDef, 0x38ui64);
  base = varScriptableEventTeamSelectorDef->base;
  if ( varScriptableEventTeamSelectorDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      goto LABEL_8;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varXString = v3;
    varScriptableEventBaseDef = v2;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  eventsPass = varScriptableEventTeamSelectorDef->eventsPass;
  if ( !eventsPass )
    goto LABEL_15;
  if ( eventsPass == (ScriptableEventDef *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( eventsPass != (ScriptableEventDef *)-2i64 )
  {
    goto LABEL_15;
  }
  v5 = varScriptableEventDef;
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
  Preload_ScriptableEventDefArray(AtStart, varScriptableEventTeamSelectorDef->eventPassCount);
  varScriptableEventDef = v5;
  if ( eventsPass == (ScriptableEventDef *)-1i64 )
    DB_PopSharedData();
LABEL_15:
  eventsFail = varScriptableEventTeamSelectorDef->eventsFail;
  if ( !eventsFail )
    return;
  if ( eventsFail == (ScriptableEventDef *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( eventsFail != (ScriptableEventDef *)-2i64 )
  {
    return;
  }
  v7 = varScriptableEventDef;
  DB_PatchMem_FixStreamAlignment(7ui64);
  DB_CheckCanIncStreamPos(0i64);
  varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
  Preload_ScriptableEventDefArray(AtStart, varScriptableEventTeamSelectorDef->eventFailCount);
  varScriptableEventDef = v7;
  if ( eventsFail == (ScriptableEventDef *)-1i64 )
    DB_PopSharedData();
}

/*
==============
Preload_ScriptableEventTeamSelectorDefArray
==============
*/
void Preload_ScriptableEventTeamSelectorDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventTeamSelectorDef *i; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  ScriptableEventDef *eventsPass; 
  ScriptableEventDef *v8; 
  ScriptableEventDef *eventsFail; 
  ScriptableEventDef *v10; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventTeamSelectorDef, 56 * count);
  for ( i = varScriptableEventTeamSelectorDef; v2; --v2 )
  {
    varScriptableEventTeamSelectorDef = i;
    Load_Stream(NotAtStart, i, 0x38ui64);
    base = varScriptableEventTeamSelectorDef->base;
    if ( !varScriptableEventTeamSelectorDef->base )
      goto LABEL_9;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      goto LABEL_9;
    }
    v5 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v6 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varXString = v6;
    varScriptableEventBaseDef = v5;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
LABEL_9:
    eventsPass = varScriptableEventTeamSelectorDef->eventsPass;
    if ( !eventsPass )
      goto LABEL_16;
    if ( eventsPass == (ScriptableEventDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( eventsPass != (ScriptableEventDef *)-2i64 )
    {
      goto LABEL_16;
    }
    v8 = varScriptableEventDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
    Preload_ScriptableEventDefArray(AtStart, varScriptableEventTeamSelectorDef->eventPassCount);
    varScriptableEventDef = v8;
    if ( eventsPass == (ScriptableEventDef *)-1i64 )
      DB_PopSharedData();
LABEL_16:
    eventsFail = varScriptableEventTeamSelectorDef->eventsFail;
    if ( eventsFail )
    {
      if ( eventsFail == (ScriptableEventDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_21:
        v10 = varScriptableEventDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
        Preload_ScriptableEventDefArray(AtStart, varScriptableEventTeamSelectorDef->eventFailCount);
        varScriptableEventDef = v10;
        if ( eventsFail == (ScriptableEventDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_23;
      }
      if ( eventsFail == (ScriptableEventDef *)-2i64 )
        goto LABEL_21;
    }
LABEL_23:
    ++i;
  }
}

/*
==============
Preload_ScriptableEventTeamSelectorDefStream
==============
*/
void Preload_ScriptableEventTeamSelectorDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 
  ScriptableEventDef *eventsPass; 
  ScriptableEventDef *v8; 
  ScriptableEventDef *eventsFail; 
  ScriptableEventDef *v10; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 56054, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventTeamSelectorDef;
    do
    {
      Load_Stream(AtStart, pos, 0x38ui64);
      base = varScriptableEventTeamSelectorDef->base;
      if ( !varScriptableEventTeamSelectorDef->base )
        goto LABEL_13;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( base != (ScriptableEventBaseDef *)-2i64 )
      {
        goto LABEL_13;
      }
      v5 = varScriptableEventBaseDef;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
      v6 = varXString;
      varXString = &varScriptableEventBaseDef->name;
      Preload_XString(NotAtStart);
      varXString = v6;
      varScriptableEventBaseDef = v5;
      if ( base == (ScriptableEventBaseDef *)-1i64 )
        DB_PopSharedData();
LABEL_13:
      eventsPass = varScriptableEventTeamSelectorDef->eventsPass;
      if ( !eventsPass )
        goto LABEL_20;
      if ( eventsPass == (ScriptableEventDef *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( eventsPass != (ScriptableEventDef *)-2i64 )
      {
        goto LABEL_20;
      }
      v8 = varScriptableEventDef;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
      Preload_ScriptableEventDefArray(AtStart, varScriptableEventTeamSelectorDef->eventPassCount);
      varScriptableEventDef = v8;
      if ( eventsPass == (ScriptableEventDef *)-1i64 )
        DB_PopSharedData();
LABEL_20:
      eventsFail = varScriptableEventTeamSelectorDef->eventsFail;
      if ( eventsFail )
      {
        if ( eventsFail == (ScriptableEventDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_25:
          v10 = varScriptableEventDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
          Preload_ScriptableEventDefArray(AtStart, varScriptableEventTeamSelectorDef->eventFailCount);
          varScriptableEventDef = v10;
          if ( eventsFail == (ScriptableEventDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_27;
        }
        if ( eventsFail == (ScriptableEventDef *)-2i64 )
          goto LABEL_25;
      }
LABEL_27:
      pos = g_streamPosGlob.pos;
      varScriptableEventTeamSelectorDef = (ScriptableEventTeamSelectorDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventVehicleBlowUpTireDef
==============
*/
void Preload_ScriptableEventVehicleBlowUpTireDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 

  Load_Stream(streamStart, varScriptableEventVehicleBlowUpTireDef, 0x10ui64);
  base = varScriptableEventVehicleBlowUpTireDef->base;
  if ( varScriptableEventVehicleBlowUpTireDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      return;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varXString = v3;
    varScriptableEventBaseDef = v2;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Preload_ScriptableEventVehicleBlowUpTireDefArray
==============
*/
void Preload_ScriptableEventVehicleBlowUpTireDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventVehicleBlowUpTireDef *i; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventVehicleBlowUpTireDef, 16 * count);
  for ( i = varScriptableEventVehicleBlowUpTireDef; v2; --v2 )
  {
    varScriptableEventVehicleBlowUpTireDef = i;
    Load_Stream(NotAtStart, i, 0x10ui64);
    base = varScriptableEventVehicleBlowUpTireDef->base;
    if ( varScriptableEventVehicleBlowUpTireDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v5 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v6 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Preload_XString(NotAtStart);
        varXString = v6;
        varScriptableEventBaseDef = v5;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Preload_ScriptableEventVehicleBlowUpTireDefStream
==============
*/
void Preload_ScriptableEventVehicleBlowUpTireDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 58991, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventVehicleBlowUpTireDef;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      base = varScriptableEventVehicleBlowUpTireDef->base;
      if ( varScriptableEventVehicleBlowUpTireDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v5 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v6 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Preload_XString(NotAtStart);
          varXString = v6;
          varScriptableEventBaseDef = v5;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableEventVehicleBlowUpTireDef = (ScriptableEventVehicleBlowUpTireDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventViewTriggerDef
==============
*/
void Preload_ScriptableEventViewTriggerDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 

  Load_Stream(streamStart, varScriptableEventViewTriggerDef, 0x18ui64);
  base = varScriptableEventViewTriggerDef->base;
  if ( varScriptableEventViewTriggerDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      return;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varXString = v3;
    varScriptableEventBaseDef = v2;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Preload_ScriptableEventViewTriggerDefArray
==============
*/
void Preload_ScriptableEventViewTriggerDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventViewTriggerDef *i; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventViewTriggerDef, 24 * count);
  for ( i = varScriptableEventViewTriggerDef; v2; --v2 )
  {
    varScriptableEventViewTriggerDef = i;
    Load_Stream(NotAtStart, i, 0x18ui64);
    base = varScriptableEventViewTriggerDef->base;
    if ( varScriptableEventViewTriggerDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v5 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v6 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Preload_XString(NotAtStart);
        varXString = v6;
        varScriptableEventBaseDef = v5;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Preload_ScriptableEventViewTriggerDefStream
==============
*/
void Preload_ScriptableEventViewTriggerDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 58316, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventViewTriggerDef;
    do
    {
      Load_Stream(AtStart, pos, 0x18ui64);
      base = varScriptableEventViewTriggerDef->base;
      if ( varScriptableEventViewTriggerDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v5 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v6 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Preload_XString(NotAtStart);
          varXString = v6;
          varScriptableEventBaseDef = v5;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableEventViewTriggerDef = (ScriptableEventViewTriggerDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventViewmodelChangeImageDef
==============
*/
void Preload_ScriptableEventViewmodelChangeImageDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 

  Load_Stream(streamStart, varScriptableEventViewmodelChangeImageDef, 0x10ui64);
  base = varScriptableEventViewmodelChangeImageDef->base;
  if ( varScriptableEventViewmodelChangeImageDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      return;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varXString = v3;
    varScriptableEventBaseDef = v2;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Preload_ScriptableEventViewmodelChangeImageDefArray
==============
*/
void Preload_ScriptableEventViewmodelChangeImageDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventViewmodelChangeImageDef *i; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventViewmodelChangeImageDef, 16 * count);
  for ( i = varScriptableEventViewmodelChangeImageDef; v2; --v2 )
  {
    varScriptableEventViewmodelChangeImageDef = i;
    Load_Stream(NotAtStart, i, 0x10ui64);
    base = varScriptableEventViewmodelChangeImageDef->base;
    if ( varScriptableEventViewmodelChangeImageDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v5 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v6 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Preload_XString(NotAtStart);
        varXString = v6;
        varScriptableEventBaseDef = v5;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Preload_ScriptableEventViewmodelChangeImageDefStream
==============
*/
void Preload_ScriptableEventViewmodelChangeImageDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 55437, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventViewmodelChangeImageDef;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      base = varScriptableEventViewmodelChangeImageDef->base;
      if ( varScriptableEventViewmodelChangeImageDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v5 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v6 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Preload_XString(NotAtStart);
          varXString = v6;
          varScriptableEventBaseDef = v5;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableEventViewmodelChangeImageDef = (ScriptableEventViewmodelChangeImageDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventViewmodelShaderParamDef
==============
*/
void Preload_ScriptableEventViewmodelShaderParamDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 

  Load_Stream(streamStart, varScriptableEventViewmodelShaderParamDef, 0x28ui64);
  base = varScriptableEventViewmodelShaderParamDef->base;
  if ( varScriptableEventViewmodelShaderParamDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      return;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varXString = v3;
    varScriptableEventBaseDef = v2;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Preload_ScriptableEventViewmodelShaderParamDefArray
==============
*/
void Preload_ScriptableEventViewmodelShaderParamDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventViewmodelShaderParamDef *i; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventViewmodelShaderParamDef, 40 * count);
  for ( i = varScriptableEventViewmodelShaderParamDef; v2; --v2 )
  {
    varScriptableEventViewmodelShaderParamDef = i;
    Load_Stream(NotAtStart, i, 0x28ui64);
    base = varScriptableEventViewmodelShaderParamDef->base;
    if ( varScriptableEventViewmodelShaderParamDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v5 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v6 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Preload_XString(NotAtStart);
        varXString = v6;
        varScriptableEventBaseDef = v5;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Preload_ScriptableEventViewmodelShaderParamDefStream
==============
*/
void Preload_ScriptableEventViewmodelShaderParamDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 55286, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventViewmodelShaderParamDef;
    do
    {
      Load_Stream(AtStart, pos, 0x28ui64);
      base = varScriptableEventViewmodelShaderParamDef->base;
      if ( varScriptableEventViewmodelShaderParamDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v5 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v6 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Preload_XString(NotAtStart);
          varXString = v6;
          varScriptableEventBaseDef = v5;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableEventViewmodelShaderParamDef = (ScriptableEventViewmodelShaderParamDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableEventWaitDef
==============
*/
void Preload_ScriptableEventWaitDef(const DBStreamStart streamStart)
{
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v2; 
  const char **v3; 

  Load_Stream(streamStart, varScriptableEventWaitDef, 0x18ui64);
  base = varScriptableEventWaitDef->base;
  if ( varScriptableEventWaitDef->base )
  {
    if ( base == (ScriptableEventBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableEventBaseDef *)-2i64 )
    {
      return;
    }
    v2 = varScriptableEventBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
    v3 = varXString;
    varXString = &varScriptableEventBaseDef->name;
    Preload_XString(NotAtStart);
    varXString = v3;
    varScriptableEventBaseDef = v2;
    if ( base == (ScriptableEventBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Preload_ScriptableEventWaitDefArray
==============
*/
void Preload_ScriptableEventWaitDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableEventWaitDef *i; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 

  v2 = count;
  Load_Stream(streamStart, varScriptableEventWaitDef, 24 * count);
  for ( i = varScriptableEventWaitDef; v2; --v2 )
  {
    varScriptableEventWaitDef = i;
    Load_Stream(NotAtStart, i, 0x18ui64);
    base = varScriptableEventWaitDef->base;
    if ( varScriptableEventWaitDef->base )
    {
      if ( base == (ScriptableEventBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v5 = varScriptableEventBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
        v6 = varXString;
        varXString = &varScriptableEventBaseDef->name;
        Preload_XString(NotAtStart);
        varXString = v6;
        varScriptableEventBaseDef = v5;
        if ( base == (ScriptableEventBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableEventBaseDef *)-2i64 )
        goto LABEL_7;
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Preload_ScriptableEventWaitDefStream
==============
*/
void Preload_ScriptableEventWaitDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableEventBaseDef *base; 
  ScriptableEventBaseDef *v5; 
  const char **v6; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 47573, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableEventWaitDef;
    do
    {
      Load_Stream(AtStart, pos, 0x18ui64);
      base = varScriptableEventWaitDef->base;
      if ( varScriptableEventWaitDef->base )
      {
        if ( base == (ScriptableEventBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v5 = varScriptableEventBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventBaseDef = (ScriptableEventBaseDef *)g_streamPosGlob.pos;
          Load_Stream(AtStart, g_streamPosGlob.pos, 0x10ui64);
          v6 = varXString;
          varXString = &varScriptableEventBaseDef->name;
          Preload_XString(NotAtStart);
          varXString = v6;
          varScriptableEventBaseDef = v5;
          if ( base == (ScriptableEventBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableEventBaseDef *)-2i64 )
          goto LABEL_11;
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableEventWaitDef = (ScriptableEventWaitDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableInstance
==============
*/
void Preload_ScriptableInstance(const DBStreamStart streamStart)
{
  ScriptableDef **v1; 
  scr_string_t *v2; 

  Load_Stream(streamStart, varScriptableInstance, 0x48ui64);
  v1 = varScriptableDefPtr;
  varScriptableDefPtr = (ScriptableDef **)varScriptableInstance;
  Preload_ScriptableDefPtr(NotAtStart);
  varScriptableDefPtr = v1;
  v2 = varscr_string_t;
  varscr_string_t = &varScriptableInstance->classname;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = &varScriptableInstance->target;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = &varScriptableInstance->targetname;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = &varScriptableInstance->script_linkname;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = &varScriptableInstance->script_linkto;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = &varScriptableInstance->script_noteworthy;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = v2;
}

/*
==============
Preload_ScriptableInstanceArray
==============
*/
void Preload_ScriptableInstanceArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableInstance *i; 
  ScriptableDef **v4; 
  scr_string_t *v5; 

  v2 = count;
  Load_Stream(streamStart, varScriptableInstance, 72 * count);
  for ( i = varScriptableInstance; v2; --v2 )
  {
    varScriptableInstance = i;
    Load_Stream(NotAtStart, i, 0x48ui64);
    v4 = varScriptableDefPtr;
    varScriptableDefPtr = (ScriptableDef **)varScriptableInstance;
    Preload_ScriptableDefPtr(NotAtStart);
    varScriptableDefPtr = v4;
    v5 = varscr_string_t;
    varscr_string_t = &varScriptableInstance->classname;
    Preload_scr_string_t(NotAtStart);
    varscr_string_t = &varScriptableInstance->target;
    Preload_scr_string_t(NotAtStart);
    varscr_string_t = &varScriptableInstance->targetname;
    Preload_scr_string_t(NotAtStart);
    varscr_string_t = &varScriptableInstance->script_linkname;
    Preload_scr_string_t(NotAtStart);
    varscr_string_t = &varScriptableInstance->script_linkto;
    Preload_scr_string_t(NotAtStart);
    varscr_string_t = &varScriptableInstance->script_noteworthy;
    Preload_scr_string_t(NotAtStart);
    ++i;
    varscr_string_t = v5;
  }
}

/*
==============
Preload_ScriptableInstanceStream
==============
*/
void Preload_ScriptableInstanceStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableDef **v4; 
  scr_string_t *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 64271, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableInstance;
    do
    {
      Load_Stream(AtStart, pos, 0x48ui64);
      v4 = varScriptableDefPtr;
      varScriptableDefPtr = (ScriptableDef **)varScriptableInstance;
      Preload_ScriptableDefPtr(NotAtStart);
      varScriptableDefPtr = v4;
      v5 = varscr_string_t;
      varscr_string_t = &varScriptableInstance->classname;
      Preload_scr_string_t(NotAtStart);
      varscr_string_t = &varScriptableInstance->target;
      Preload_scr_string_t(NotAtStart);
      varscr_string_t = &varScriptableInstance->targetname;
      Preload_scr_string_t(NotAtStart);
      varscr_string_t = &varScriptableInstance->script_linkname;
      Preload_scr_string_t(NotAtStart);
      varscr_string_t = &varScriptableInstance->script_linkto;
      Preload_scr_string_t(NotAtStart);
      varscr_string_t = &varScriptableInstance->script_noteworthy;
      Preload_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableInstance = (ScriptableInstance *)g_streamPosGlob.pos;
      varscr_string_t = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableMapEnts
==============
*/
void Preload_ScriptableMapEnts(const DBStreamStart streamStart)
{
  ScriptableMapEnts *v1; 
  ScriptableInstance *v2; 
  __int64 mapInstanceCount; 
  ScriptableInstance *i; 
  ScriptableReservedDynents *v5; 
  SpatialPartition_Population_Tree *v6; 

  Load_Stream(streamStart, varScriptableMapEnts, 0xD8ui64);
  v1 = varScriptableMapEnts;
  if ( varScriptableMapEnts->mapInstances )
  {
    v2 = varScriptableInstance;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableInstance = (ScriptableInstance *)g_streamPosGlob.pos;
    mapInstanceCount = varScriptableMapEnts->mapInstanceCount;
    Load_Stream(AtStart, g_streamPosGlob.pos, 72 * mapInstanceCount);
    for ( i = varScriptableInstance; mapInstanceCount; --mapInstanceCount )
    {
      varScriptableInstance = i;
      Preload_ScriptableInstance(NotAtStart);
      ++i;
    }
    v1 = varScriptableMapEnts;
    varScriptableInstance = v2;
  }
  v5 = varScriptableReservedDynents;
  varScriptableReservedDynents = v1->reservedDynents;
  Preload_ScriptableReservedDynents(NotAtStart);
  varScriptableReservedDynents = &varScriptableMapEnts->reservedDynents[1];
  Preload_ScriptableReservedDynents(NotAtStart);
  varScriptableReservedDynents = v5;
  if ( varScriptableMapEnts->spatialPopulationTree )
  {
    v6 = varSpatialPartition_Population_Tree;
    varSpatialPartition_Population_Tree = AllocPreload_SpatialPartition_Population_Tree();
    Preload_SpatialPartition_Population_Tree(AtStart);
    varSpatialPartition_Population_Tree = v6;
  }
}

/*
==============
Preload_ScriptableMapEntsArray
==============
*/
void Preload_ScriptableMapEntsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableMapEnts *i; 
  ScriptableMapEnts *v4; 
  ScriptableInstance *v5; 
  __int64 mapInstanceCount; 
  ScriptableInstance *j; 
  ScriptableReservedDynents *v8; 
  ScriptableReservedDynent *v9; 
  ScriptableReservedDynent *v10; 
  SpatialPartition_Population_Tree *v11; 

  v2 = count;
  Load_Stream(streamStart, varScriptableMapEnts, 216 * count);
  for ( i = varScriptableMapEnts; v2; --v2 )
  {
    varScriptableMapEnts = i;
    Load_Stream(NotAtStart, i, 0xD8ui64);
    v4 = varScriptableMapEnts;
    if ( varScriptableMapEnts->mapInstances )
    {
      v5 = varScriptableInstance;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      varScriptableInstance = (ScriptableInstance *)g_streamPosGlob.pos;
      mapInstanceCount = varScriptableMapEnts->mapInstanceCount;
      Load_Stream(AtStart, g_streamPosGlob.pos, 72 * mapInstanceCount);
      for ( j = varScriptableInstance; mapInstanceCount; --mapInstanceCount )
      {
        varScriptableInstance = j;
        Preload_ScriptableInstance(NotAtStart);
        ++j;
      }
      v4 = varScriptableMapEnts;
      varScriptableInstance = v5;
    }
    v8 = varScriptableReservedDynents;
    varScriptableReservedDynents = v4->reservedDynents;
    Load_Stream(NotAtStart, v4->reservedDynents, 0x10ui64);
    if ( varScriptableReservedDynents->reservedDynents )
    {
      v9 = varScriptableReservedDynent;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      varScriptableReservedDynent = (ScriptableReservedDynent *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 8i64 * varScriptableReservedDynents->numReservedDynents);
      varScriptableReservedDynent = v9;
    }
    varScriptableReservedDynents = &varScriptableMapEnts->reservedDynents[1];
    Load_Stream(NotAtStart, &varScriptableMapEnts->reservedDynents[1], 0x10ui64);
    if ( varScriptableReservedDynents->reservedDynents )
    {
      v10 = varScriptableReservedDynent;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      varScriptableReservedDynent = (ScriptableReservedDynent *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 8i64 * varScriptableReservedDynents->numReservedDynents);
      varScriptableReservedDynent = v10;
    }
    varScriptableReservedDynents = v8;
    if ( varScriptableMapEnts->spatialPopulationTree )
    {
      v11 = varSpatialPartition_Population_Tree;
      varSpatialPartition_Population_Tree = AllocPreload_SpatialPartition_Population_Tree();
      Preload_SpatialPartition_Population_Tree(AtStart);
      varSpatialPartition_Population_Tree = v11;
    }
    ++i;
  }
}

/*
==============
Preload_ScriptableMapEntsStream
==============
*/
void Preload_ScriptableMapEntsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableMapEnts *v4; 
  ScriptableInstance *v5; 
  __int64 mapInstanceCount; 
  ScriptableInstance *i; 
  ScriptableReservedDynents *v8; 
  ScriptableReservedDynent *v9; 
  ScriptableReservedDynent *v10; 
  SpatialPartition_Population_Tree *v11; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 65301, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableMapEnts;
    do
    {
      Load_Stream(AtStart, pos, 0xD8ui64);
      v4 = varScriptableMapEnts;
      if ( varScriptableMapEnts->mapInstances )
      {
        v5 = varScriptableInstance;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableInstance = (ScriptableInstance *)g_streamPosGlob.pos;
        mapInstanceCount = varScriptableMapEnts->mapInstanceCount;
        Load_Stream(AtStart, g_streamPosGlob.pos, 72 * mapInstanceCount);
        for ( i = varScriptableInstance; mapInstanceCount; --mapInstanceCount )
        {
          varScriptableInstance = i;
          Preload_ScriptableInstance(NotAtStart);
          ++i;
        }
        v4 = varScriptableMapEnts;
        varScriptableInstance = v5;
      }
      v8 = varScriptableReservedDynents;
      varScriptableReservedDynents = v4->reservedDynents;
      Load_Stream(NotAtStart, v4->reservedDynents, 0x10ui64);
      if ( varScriptableReservedDynents->reservedDynents )
      {
        v9 = varScriptableReservedDynent;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableReservedDynent = (ScriptableReservedDynent *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 8i64 * varScriptableReservedDynents->numReservedDynents);
        varScriptableReservedDynent = v9;
      }
      varScriptableReservedDynents = &varScriptableMapEnts->reservedDynents[1];
      Load_Stream(NotAtStart, &varScriptableMapEnts->reservedDynents[1], 0x10ui64);
      if ( varScriptableReservedDynents->reservedDynents )
      {
        v10 = varScriptableReservedDynent;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableReservedDynent = (ScriptableReservedDynent *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 8i64 * varScriptableReservedDynents->numReservedDynents);
        varScriptableReservedDynent = v10;
      }
      varScriptableReservedDynents = v8;
      if ( varScriptableMapEnts->spatialPopulationTree )
      {
        v11 = varSpatialPartition_Population_Tree;
        varSpatialPartition_Population_Tree = AllocPreload_SpatialPartition_Population_Tree();
        Preload_SpatialPartition_Population_Tree(AtStart);
        varSpatialPartition_Population_Tree = v11;
      }
      pos = g_streamPosGlob.pos;
      varScriptableMapEnts = (ScriptableMapEnts *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableModelUnion
==============
*/
void Preload_ScriptableModelUnion(const DBStreamStart streamStart)
{
  ScriptableDataType dataType; 
  XCompositeModelDef **v2; 
  XModel **v3; 

  dataType = varScriptableEventModelDef->dataType;
  if ( dataType == SCRIPTABLE_DATA_TYPE_XCOMPOSITEMODEL )
  {
    v2 = varXCompositeModelDefPtr;
    varXCompositeModelDefPtr = &varScriptableModelUnion->compositeModel;
    Preload_XCompositeModelDefPtr(streamStart);
    varXCompositeModelDefPtr = v2;
  }
  else if ( dataType == SCRIPTABLE_DATA_TYPE_XMODEL )
  {
    v3 = varXModelPtr;
    varXModelPtr = (XModel **)varScriptableModelUnion;
    Preload_XModelPtr(streamStart);
    varXModelPtr = v3;
  }
}

/*
==============
Preload_ScriptableModelUnionArray
==============
*/
void Preload_ScriptableModelUnionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableModelUnion *i; 
  ScriptableDataType dataType; 
  XCompositeModelDef **v5; 
  XModel **v6; 

  v2 = count;
  Load_Stream(streamStart, varScriptableModelUnion, 8 * count);
  for ( i = varScriptableModelUnion; v2; --v2 )
  {
    varScriptableModelUnion = i;
    dataType = varScriptableEventModelDef->dataType;
    if ( dataType == SCRIPTABLE_DATA_TYPE_XCOMPOSITEMODEL )
    {
      v5 = varXCompositeModelDefPtr;
      varXCompositeModelDefPtr = &i->compositeModel;
      Preload_XCompositeModelDefPtr(NotAtStart);
      varXCompositeModelDefPtr = v5;
    }
    else if ( dataType == SCRIPTABLE_DATA_TYPE_XMODEL )
    {
      v6 = varXModelPtr;
      varXModelPtr = (XModel **)i;
      Preload_XModelPtr(NotAtStart);
      varXModelPtr = v6;
    }
    ++i;
  }
}

/*
==============
Preload_ScriptableModelUnionStream
==============
*/
void Preload_ScriptableModelUnionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ScriptableModelUnion *pos; 
  ScriptableDataType dataType; 
  XCompositeModelDef **v5; 
  XModel **v6; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 48199, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = varScriptableModelUnion;
    do
    {
      dataType = varScriptableEventModelDef->dataType;
      if ( dataType == SCRIPTABLE_DATA_TYPE_XCOMPOSITEMODEL )
      {
        v5 = varXCompositeModelDefPtr;
        varXCompositeModelDefPtr = &pos->compositeModel;
        Preload_XCompositeModelDefPtr(AtStart);
        varXCompositeModelDefPtr = v5;
      }
      else if ( dataType == SCRIPTABLE_DATA_TYPE_XMODEL )
      {
        v6 = varXModelPtr;
        varXModelPtr = (XModel **)pos;
        Preload_XModelPtr(AtStart);
        varXModelPtr = v6;
      }
      pos = (ScriptableModelUnion *)g_streamPosGlob.pos;
      varScriptableModelUnion = (ScriptableModelUnion *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableNoteTrackDef
==============
*/
void Preload_ScriptableNoteTrackDef(const DBStreamStart streamStart)
{
  const char **v1; 
  scr_string_t *v2; 
  ScriptableEventDef *events; 
  ScriptableEventDef *v4; 

  Load_Stream(streamStart, varScriptableNoteTrackDef, 0x20ui64);
  v1 = varXString;
  varXString = &varScriptableNoteTrackDef->noteTrackName;
  Preload_XString(NotAtStart);
  varXString = v1;
  v2 = varscr_string_t;
  varscr_string_t = &varScriptableNoteTrackDef->scrNoteTrackName;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = v2;
  events = varScriptableNoteTrackDef->events;
  if ( events )
  {
    if ( events == (ScriptableEventDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( events != (ScriptableEventDef *)-2i64 )
    {
      return;
    }
    v4 = varScriptableEventDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
    Preload_ScriptableEventDefArray(AtStart, varScriptableNoteTrackDef->numEvents);
    varScriptableEventDef = v4;
    if ( events == (ScriptableEventDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Preload_ScriptableNoteTrackDefArray
==============
*/
void Preload_ScriptableNoteTrackDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableNoteTrackDef *i; 
  const char **v4; 
  scr_string_t *v5; 
  ScriptableEventDef *events; 
  ScriptableEventDef *v7; 

  v2 = count;
  Load_Stream(streamStart, varScriptableNoteTrackDef, 32 * count);
  for ( i = varScriptableNoteTrackDef; v2; --v2 )
  {
    varScriptableNoteTrackDef = i;
    Load_Stream(NotAtStart, i, 0x20ui64);
    v4 = varXString;
    varXString = &varScriptableNoteTrackDef->noteTrackName;
    Preload_XString(NotAtStart);
    varXString = v4;
    v5 = varscr_string_t;
    varscr_string_t = &varScriptableNoteTrackDef->scrNoteTrackName;
    Preload_scr_string_t(NotAtStart);
    varscr_string_t = v5;
    events = varScriptableNoteTrackDef->events;
    if ( events )
    {
      if ( events == (ScriptableEventDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v7 = varScriptableEventDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
        Preload_ScriptableEventDefArray(AtStart, varScriptableNoteTrackDef->numEvents);
        varScriptableEventDef = v7;
        if ( events == (ScriptableEventDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( events == (ScriptableEventDef *)-2i64 )
        goto LABEL_7;
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Preload_ScriptableNoteTrackDefStream
==============
*/
void Preload_ScriptableNoteTrackDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  const char **v4; 
  scr_string_t *v5; 
  ScriptableEventDef *events; 
  ScriptableEventDef *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 46998, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableNoteTrackDef;
    do
    {
      Load_Stream(AtStart, pos, 0x20ui64);
      v4 = varXString;
      varXString = &varScriptableNoteTrackDef->noteTrackName;
      Preload_XString(NotAtStart);
      varXString = v4;
      v5 = varscr_string_t;
      varscr_string_t = &varScriptableNoteTrackDef->scrNoteTrackName;
      Preload_scr_string_t(NotAtStart);
      varscr_string_t = v5;
      events = varScriptableNoteTrackDef->events;
      if ( events )
      {
        if ( events == (ScriptableEventDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v7 = varScriptableEventDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
          Preload_ScriptableEventDefArray(AtStart, varScriptableNoteTrackDef->numEvents);
          varScriptableEventDef = v7;
          if ( events == (ScriptableEventDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( events == (ScriptableEventDef *)-2i64 )
          goto LABEL_11;
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableNoteTrackDef = (ScriptableNoteTrackDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptablePartDef
==============
*/
void Preload_ScriptablePartDef(const DBStreamStart streamStart)
{
  const char **v1; 
  scr_string_t *v2; 
  const char **v3; 
  scr_string_t *v4; 
  ScriptablePartDef *v5; 
  ScriptableStateDef *states; 
  ScriptableStateDef *v7; 
  __int64 numStates; 
  ScriptableStateDef *i; 
  ScriptableStateBaseDef *v10; 
  ScriptableStateDefUnion *v11; 
  __int64 numChildParts; 
  ScriptablePartDef *j; 
  ScriptableDamageTagOverride *v14; 
  __int64 numDamageTagOverrides; 
  ScriptableDamageTagOverride *k; 
  const char **v17; 
  scr_string_t *v18; 

  Load_Stream(streamStart, varScriptablePartDef, 0x68ui64);
  v1 = varXString;
  varXString = &varScriptablePartDef->name;
  Preload_XString(NotAtStart);
  varXString = v1;
  v2 = varscr_string_t;
  varscr_string_t = &varScriptablePartDef->scrName;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = v2;
  v3 = varXString;
  varXString = &varScriptablePartDef->tagName;
  Preload_XString(NotAtStart);
  varXString = v3;
  v4 = varscr_string_t;
  varscr_string_t = &varScriptablePartDef->scrTagName;
  Preload_scr_string_t(NotAtStart);
  v5 = varScriptablePartDef;
  varscr_string_t = v4;
  states = varScriptablePartDef->states;
  if ( states )
  {
    if ( states == (ScriptableStateDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( states != (ScriptableStateDef *)-2i64 )
    {
      goto LABEL_11;
    }
    v7 = varScriptableStateDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableStateDef = (ScriptableStateDef *)g_streamPosGlob.pos;
    numStates = varScriptablePartDef->numStates;
    Load_Stream(AtStart, g_streamPosGlob.pos, 160 * numStates);
    for ( i = varScriptableStateDef; numStates; --numStates )
    {
      varScriptableStateDef = i;
      Load_Stream(NotAtStart, i, 0xA0ui64);
      v10 = varScriptableStateBaseDef;
      varScriptableStateBaseDef = &varScriptableStateDef->base;
      Preload_ScriptableStateBaseDef(NotAtStart);
      varScriptableStateBaseDef = v10;
      v11 = varScriptableStateDefUnion;
      varScriptableStateDefUnion = &varScriptableStateDef->data;
      Preload_ScriptableStateDefUnion(NotAtStart);
      ++i;
      varScriptableStateDefUnion = v11;
    }
    varScriptableStateDef = v7;
    if ( states == (ScriptableStateDef *)-1i64 )
      DB_PopSharedData();
    v5 = varScriptablePartDef;
  }
LABEL_11:
  if ( v5->childParts )
  {
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptablePartDef = (ScriptablePartDef *)g_streamPosGlob.pos;
    numChildParts = v5->numChildParts;
    Load_Stream(AtStart, g_streamPosGlob.pos, 104 * numChildParts);
    for ( j = varScriptablePartDef; numChildParts; --numChildParts )
    {
      varScriptablePartDef = j;
      Preload_ScriptablePartDef(NotAtStart);
      ++j;
    }
    varScriptablePartDef = v5;
  }
  if ( v5->damageTagOverrides )
  {
    v14 = varScriptableDamageTagOverride;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableDamageTagOverride = (ScriptableDamageTagOverride *)g_streamPosGlob.pos;
    numDamageTagOverrides = varScriptablePartDef->numDamageTagOverrides;
    Load_Stream(AtStart, g_streamPosGlob.pos, 16 * numDamageTagOverrides);
    for ( k = varScriptableDamageTagOverride; numDamageTagOverrides; --numDamageTagOverrides )
    {
      varScriptableDamageTagOverride = k;
      Load_Stream(NotAtStart, k, 0x10ui64);
      v17 = varXString;
      varXString = &varScriptableDamageTagOverride->tag;
      Preload_XString(NotAtStart);
      varXString = v17;
      v18 = varscr_string_t;
      varscr_string_t = &varScriptableDamageTagOverride->scrTag;
      Preload_scr_string_t(NotAtStart);
      ++k;
      varscr_string_t = v18;
    }
    varScriptableDamageTagOverride = v14;
  }
}

/*
==============
Preload_ScriptablePartDefArray
==============
*/
void Preload_ScriptablePartDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptablePartDef *i; 

  v2 = count;
  Load_Stream(streamStart, varScriptablePartDef, 104 * count);
  for ( i = varScriptablePartDef; v2; --v2 )
  {
    varScriptablePartDef = i;
    Preload_ScriptablePartDef(NotAtStart);
    ++i;
  }
}

/*
==============
Preload_ScriptablePartDefStream
==============
*/
void Preload_ScriptablePartDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  const char **v4; 
  scr_string_t *v5; 
  const char **v6; 
  scr_string_t *v7; 
  ScriptablePartDef *v8; 
  ScriptableStateDef *states; 
  ScriptableStateDef *v10; 
  __int64 numStates; 
  ScriptableStateDef *i; 
  ScriptableStateBaseDef *v13; 
  ScriptableStateDefUnion *v14; 
  __int64 numChildParts; 
  ScriptablePartDef *j; 
  ScriptableDamageTagOverride *v17; 
  __int64 numDamageTagOverrides; 
  ScriptableDamageTagOverride *k; 
  const char **v20; 
  scr_string_t *v21; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 63179, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptablePartDef;
    do
    {
      Load_Stream(AtStart, pos, 0x68ui64);
      v4 = varXString;
      varXString = &varScriptablePartDef->name;
      Preload_XString(NotAtStart);
      varXString = v4;
      v5 = varscr_string_t;
      varscr_string_t = &varScriptablePartDef->scrName;
      Preload_scr_string_t(NotAtStart);
      varscr_string_t = v5;
      v6 = varXString;
      varXString = &varScriptablePartDef->tagName;
      Preload_XString(NotAtStart);
      varXString = v6;
      v7 = varscr_string_t;
      varscr_string_t = &varScriptablePartDef->scrTagName;
      Preload_scr_string_t(NotAtStart);
      v8 = varScriptablePartDef;
      varscr_string_t = v7;
      states = varScriptablePartDef->states;
      if ( states )
      {
        if ( states == (ScriptableStateDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v10 = varScriptableStateDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableStateDef = (ScriptableStateDef *)g_streamPosGlob.pos;
          numStates = varScriptablePartDef->numStates;
          Load_Stream(AtStart, g_streamPosGlob.pos, 160 * numStates);
          for ( i = varScriptableStateDef; numStates; --numStates )
          {
            varScriptableStateDef = i;
            Load_Stream(NotAtStart, i, 0xA0ui64);
            v13 = varScriptableStateBaseDef;
            varScriptableStateBaseDef = &varScriptableStateDef->base;
            Preload_ScriptableStateBaseDef(NotAtStart);
            varScriptableStateBaseDef = v13;
            v14 = varScriptableStateDefUnion;
            varScriptableStateDefUnion = &varScriptableStateDef->data;
            Preload_ScriptableStateDefUnion(NotAtStart);
            ++i;
            varScriptableStateDefUnion = v14;
          }
          varScriptableStateDef = v10;
          if ( states == (ScriptableStateDef *)-1i64 )
            DB_PopSharedData();
          v8 = varScriptablePartDef;
          goto LABEL_16;
        }
        if ( states == (ScriptableStateDef *)-2i64 )
          goto LABEL_11;
      }
LABEL_16:
      if ( v8->childParts )
      {
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptablePartDef = (ScriptablePartDef *)g_streamPosGlob.pos;
        numChildParts = v8->numChildParts;
        Load_Stream(AtStart, g_streamPosGlob.pos, 104 * numChildParts);
        for ( j = varScriptablePartDef; numChildParts; --numChildParts )
        {
          varScriptablePartDef = j;
          Preload_ScriptablePartDef(NotAtStart);
          ++j;
        }
        varScriptablePartDef = v8;
      }
      if ( v8->damageTagOverrides )
      {
        v17 = varScriptableDamageTagOverride;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableDamageTagOverride = (ScriptableDamageTagOverride *)g_streamPosGlob.pos;
        numDamageTagOverrides = varScriptablePartDef->numDamageTagOverrides;
        Load_Stream(AtStart, g_streamPosGlob.pos, 16 * numDamageTagOverrides);
        for ( k = varScriptableDamageTagOverride; numDamageTagOverrides; --numDamageTagOverrides )
        {
          varScriptableDamageTagOverride = k;
          Load_Stream(NotAtStart, k, 0x10ui64);
          v20 = varXString;
          varXString = &varScriptableDamageTagOverride->tag;
          Preload_XString(NotAtStart);
          varXString = v20;
          v21 = varscr_string_t;
          varscr_string_t = &varScriptableDamageTagOverride->scrTag;
          Preload_scr_string_t(NotAtStart);
          ++k;
          varscr_string_t = v21;
        }
        varScriptableDamageTagOverride = v17;
      }
      pos = g_streamPosGlob.pos;
      varScriptablePartDef = (ScriptablePartDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptablePartReference
==============
*/
void Preload_ScriptablePartReference(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varScriptablePartReference, 4ui64);
}

/*
==============
Preload_ScriptablePartReferenceArray
==============
*/
void Preload_ScriptablePartReferenceArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varScriptablePartReference, 4 * count);
}

/*
==============
Preload_ScriptablePartReferenceStream
==============
*/
void Preload_ScriptablePartReferenceStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 46801, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptablePartReference;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varScriptablePartReference = (ScriptablePartReference *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptablePhysicsLimits
==============
*/
void Preload_ScriptablePhysicsLimits(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varScriptablePhysicsLimits, 0x18ui64);
}

/*
==============
Preload_ScriptablePhysicsLimitsArray
==============
*/
void Preload_ScriptablePhysicsLimitsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varScriptablePhysicsLimits, 24 * count);
}

/*
==============
Preload_ScriptablePhysicsLimitsStream
==============
*/
void Preload_ScriptablePhysicsLimitsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 64899, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptablePhysicsLimits;
    do
    {
      Load_Stream(AtStart, pos, 0x18ui64);
      pos = g_streamPosGlob.pos;
      varScriptablePhysicsLimits = (ScriptablePhysicsLimits *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableReservedDynent
==============
*/
void Preload_ScriptableReservedDynent(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varScriptableReservedDynent, 8ui64);
}

/*
==============
Preload_ScriptableReservedDynentArray
==============
*/
void Preload_ScriptableReservedDynentArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varScriptableReservedDynent, 8 * count);
}

/*
==============
Preload_ScriptableReservedDynentStream
==============
*/
void Preload_ScriptableReservedDynentStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 64584, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableReservedDynent;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      pos = g_streamPosGlob.pos;
      varScriptableReservedDynent = (ScriptableReservedDynent *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableReservedDynents
==============
*/
void Preload_ScriptableReservedDynents(const DBStreamStart streamStart)
{
  ScriptableReservedDynent *v1; 

  Load_Stream(streamStart, varScriptableReservedDynents, 0x10ui64);
  if ( varScriptableReservedDynents->reservedDynents )
  {
    v1 = varScriptableReservedDynent;
    DB_PatchMem_FixStreamAlignment(3ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableReservedDynent = (ScriptableReservedDynent *)g_streamPosGlob.pos;
    Load_Stream(AtStart, g_streamPosGlob.pos, 8i64 * varScriptableReservedDynents->numReservedDynents);
    varScriptableReservedDynent = v1;
  }
}

/*
==============
Preload_ScriptableReservedDynentsArray
==============
*/
void Preload_ScriptableReservedDynentsArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableReservedDynents *i; 
  ScriptableReservedDynent *v4; 

  v2 = count;
  Load_Stream(streamStart, varScriptableReservedDynents, 16 * count);
  for ( i = varScriptableReservedDynents; v2; --v2 )
  {
    varScriptableReservedDynents = i;
    Load_Stream(NotAtStart, i, 0x10ui64);
    if ( varScriptableReservedDynents->reservedDynents )
    {
      v4 = varScriptableReservedDynent;
      DB_PatchMem_FixStreamAlignment(3ui64);
      DB_CheckCanIncStreamPos(0i64);
      varScriptableReservedDynent = (ScriptableReservedDynent *)g_streamPosGlob.pos;
      Load_Stream(AtStart, g_streamPosGlob.pos, 8i64 * varScriptableReservedDynents->numReservedDynents);
      varScriptableReservedDynent = v4;
    }
    ++i;
  }
}

/*
==============
Preload_ScriptableReservedDynentsStream
==============
*/
void Preload_ScriptableReservedDynentsStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableReservedDynent *v4; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 64708, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableReservedDynents;
    do
    {
      Load_Stream(AtStart, pos, 0x10ui64);
      if ( varScriptableReservedDynents->reservedDynents )
      {
        v4 = varScriptableReservedDynent;
        DB_PatchMem_FixStreamAlignment(3ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableReservedDynent = (ScriptableReservedDynent *)g_streamPosGlob.pos;
        Load_Stream(AtStart, g_streamPosGlob.pos, 8i64 * varScriptableReservedDynents->numReservedDynents);
        varScriptableReservedDynent = v4;
      }
      pos = g_streamPosGlob.pos;
      varScriptableReservedDynents = (ScriptableReservedDynents *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableStateBaseDef
==============
*/
void Preload_ScriptableStateBaseDef(const DBStreamStart streamStart)
{
  const char **v1; 
  ScriptableEventDef *events; 
  ScriptableEventDef *v3; 

  Load_Stream(streamStart, varScriptableStateBaseDef, 0x18ui64);
  v1 = varXString;
  varXString = &varScriptableStateBaseDef->name;
  Preload_XString(NotAtStart);
  varXString = v1;
  events = varScriptableStateBaseDef->events;
  if ( events )
  {
    if ( events == (ScriptableEventDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( events != (ScriptableEventDef *)-2i64 )
    {
      return;
    }
    v3 = varScriptableEventDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
    Preload_ScriptableEventDefArray(AtStart, varScriptableStateBaseDef->numEvents);
    varScriptableEventDef = v3;
    if ( events == (ScriptableEventDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Preload_ScriptableStateBaseDefArray
==============
*/
void Preload_ScriptableStateBaseDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableStateBaseDef *i; 
  const char **v4; 
  ScriptableEventDef *events; 
  ScriptableEventDef *v6; 

  v2 = count;
  Load_Stream(streamStart, varScriptableStateBaseDef, 24 * count);
  for ( i = varScriptableStateBaseDef; v2; --v2 )
  {
    varScriptableStateBaseDef = i;
    Load_Stream(NotAtStart, i, 0x18ui64);
    v4 = varXString;
    varXString = &varScriptableStateBaseDef->name;
    Preload_XString(NotAtStart);
    varXString = v4;
    events = varScriptableStateBaseDef->events;
    if ( events )
    {
      if ( events == (ScriptableEventDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v6 = varScriptableEventDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
        Preload_ScriptableEventDefArray(AtStart, varScriptableStateBaseDef->numEvents);
        varScriptableEventDef = v6;
        if ( events == (ScriptableEventDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( events == (ScriptableEventDef *)-2i64 )
        goto LABEL_7;
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Preload_ScriptableStateBaseDefStream
==============
*/
void Preload_ScriptableStateBaseDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  const char **v4; 
  ScriptableEventDef *events; 
  ScriptableEventDef *v6; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 60943, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableStateBaseDef;
    do
    {
      Load_Stream(AtStart, pos, 0x18ui64);
      v4 = varXString;
      varXString = &varScriptableStateBaseDef->name;
      Preload_XString(NotAtStart);
      varXString = v4;
      events = varScriptableStateBaseDef->events;
      if ( events )
      {
        if ( events == (ScriptableEventDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v6 = varScriptableEventDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableEventDef = (ScriptableEventDef *)g_streamPosGlob.pos;
          Preload_ScriptableEventDefArray(AtStart, varScriptableStateBaseDef->numEvents);
          varScriptableEventDef = v6;
          if ( events == (ScriptableEventDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( events == (ScriptableEventDef *)-2i64 )
          goto LABEL_11;
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableStateBaseDef = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableStateDef
==============
*/
void Preload_ScriptableStateDef(const DBStreamStart streamStart)
{
  ScriptableStateBaseDef *v1; 
  ScriptableStateDefUnion *v2; 

  Load_Stream(streamStart, varScriptableStateDef, 0xA0ui64);
  v1 = varScriptableStateBaseDef;
  varScriptableStateBaseDef = &varScriptableStateDef->base;
  Preload_ScriptableStateBaseDef(NotAtStart);
  varScriptableStateBaseDef = v1;
  v2 = varScriptableStateDefUnion;
  varScriptableStateDefUnion = &varScriptableStateDef->data;
  Preload_ScriptableStateDefUnion(NotAtStart);
  varScriptableStateDefUnion = v2;
}

/*
==============
Preload_ScriptableStateDefArray
==============
*/
void Preload_ScriptableStateDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableStateDef *i; 
  ScriptableStateBaseDef *v4; 
  ScriptableStateDefUnion *v5; 

  v2 = count;
  Load_Stream(streamStart, varScriptableStateDef, 160 * count);
  for ( i = varScriptableStateDef; v2; --v2 )
  {
    varScriptableStateDef = i;
    Load_Stream(NotAtStart, i, 0xA0ui64);
    v4 = varScriptableStateBaseDef;
    varScriptableStateBaseDef = &varScriptableStateDef->base;
    Preload_ScriptableStateBaseDef(NotAtStart);
    varScriptableStateBaseDef = v4;
    v5 = varScriptableStateDefUnion;
    varScriptableStateDefUnion = &varScriptableStateDef->data;
    Preload_ScriptableStateDefUnion(NotAtStart);
    ++i;
    varScriptableStateDefUnion = v5;
  }
}

/*
==============
Preload_ScriptableStateDefStream
==============
*/
void Preload_ScriptableStateDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableStateBaseDef *v4; 
  ScriptableStateDefUnion *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 62626, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableStateDef;
    do
    {
      Load_Stream(AtStart, pos, 0xA0ui64);
      v4 = varScriptableStateBaseDef;
      varScriptableStateBaseDef = &varScriptableStateDef->base;
      Preload_ScriptableStateBaseDef(NotAtStart);
      varScriptableStateBaseDef = v4;
      v5 = varScriptableStateDefUnion;
      varScriptableStateDefUnion = &varScriptableStateDef->data;
      Preload_ScriptableStateDefUnion(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableStateDef = (ScriptableStateDef *)g_streamPosGlob.pos;
      varScriptableStateDefUnion = v5;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableStateDefUnion
==============
*/
void Preload_ScriptableStateDefUnion(const DBStreamStart streamStart)
{
  Scriptable_StateType type; 
  ScriptableStateSimpleDef *v2; 
  ScriptableStateHealthDef *v3; 
  ScriptableStateScriptedDef *v4; 
  ScriptableStateUsableDef *v5; 

  type = varScriptableStateDef->type;
  if ( type )
  {
    switch ( type )
    {
      case Scriptable_StateType_Health:
        v3 = varScriptableStateHealthDef;
        varScriptableStateHealthDef = (ScriptableStateHealthDef *)varScriptableStateDefUnion;
        Preload_ScriptableStateHealthDef(streamStart);
        varScriptableStateHealthDef = v3;
        break;
      case Scriptable_StateType_Scripted:
        v4 = varScriptableStateScriptedDef;
        varScriptableStateScriptedDef = (ScriptableStateScriptedDef *)varScriptableStateDefUnion;
        Preload_ScriptableStateScriptedDef(streamStart);
        varScriptableStateScriptedDef = v4;
        break;
      case Scriptable_StateType_Usable:
        v5 = varScriptableStateUsableDef;
        varScriptableStateUsableDef = (ScriptableStateUsableDef *)varScriptableStateDefUnion;
        Preload_ScriptableStateUsableDef(streamStart);
        varScriptableStateUsableDef = v5;
        break;
    }
  }
  else
  {
    v2 = varScriptableStateSimpleDef;
    varScriptableStateSimpleDef = &varScriptableStateDefUnion->simple;
    Preload_ScriptableStateSimpleDef(streamStart);
    varScriptableStateSimpleDef = v2;
  }
}

/*
==============
Preload_ScriptableStateDefUnionArray
==============
*/
void Preload_ScriptableStateDefUnionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableStateDefUnion *i; 
  Scriptable_StateType type; 
  ScriptableStateSimpleDef *v5; 
  ScriptableStateHealthDef *v6; 
  ScriptableStateScriptedDef *v7; 
  ScriptableStateUsableDef *v8; 

  v2 = count;
  Load_Stream(streamStart, varScriptableStateDefUnion, count << 7);
  for ( i = varScriptableStateDefUnion; v2; --v2 )
  {
    varScriptableStateDefUnion = i;
    type = varScriptableStateDef->type;
    if ( type )
    {
      switch ( type )
      {
        case Scriptable_StateType_Health:
          v6 = varScriptableStateHealthDef;
          varScriptableStateHealthDef = (ScriptableStateHealthDef *)i;
          Preload_ScriptableStateHealthDef(NotAtStart);
          varScriptableStateHealthDef = v6;
          break;
        case Scriptable_StateType_Scripted:
          v7 = varScriptableStateScriptedDef;
          varScriptableStateScriptedDef = (ScriptableStateScriptedDef *)i;
          Preload_ScriptableStateScriptedDef(NotAtStart);
          varScriptableStateScriptedDef = v7;
          break;
        case Scriptable_StateType_Usable:
          v8 = varScriptableStateUsableDef;
          varScriptableStateUsableDef = (ScriptableStateUsableDef *)i;
          Preload_ScriptableStateUsableDef(NotAtStart);
          varScriptableStateUsableDef = v8;
          break;
      }
    }
    else
    {
      v5 = varScriptableStateSimpleDef;
      varScriptableStateSimpleDef = &i->simple;
      Preload_ScriptableStateSimpleDef(NotAtStart);
      varScriptableStateSimpleDef = v5;
    }
    ++i;
  }
}

/*
==============
Preload_ScriptableStateDefUnionStream
==============
*/
void Preload_ScriptableStateDefUnionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  ScriptableStateDefUnion *pos; 
  Scriptable_StateType type; 
  ScriptableStateSimpleDef *v5; 
  ScriptableStateHealthDef *v6; 
  ScriptableStateScriptedDef *v7; 
  ScriptableStateUsableDef *v8; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 62504, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = varScriptableStateDefUnion;
    do
    {
      type = varScriptableStateDef->type;
      if ( type )
      {
        switch ( type )
        {
          case Scriptable_StateType_Health:
            v6 = varScriptableStateHealthDef;
            varScriptableStateHealthDef = (ScriptableStateHealthDef *)pos;
            Preload_ScriptableStateHealthDef(AtStart);
            varScriptableStateHealthDef = v6;
            break;
          case Scriptable_StateType_Scripted:
            v7 = varScriptableStateScriptedDef;
            varScriptableStateScriptedDef = (ScriptableStateScriptedDef *)pos;
            Preload_ScriptableStateScriptedDef(AtStart);
            varScriptableStateScriptedDef = v7;
            break;
          case Scriptable_StateType_Usable:
            v8 = varScriptableStateUsableDef;
            varScriptableStateUsableDef = (ScriptableStateUsableDef *)pos;
            Preload_ScriptableStateUsableDef(AtStart);
            varScriptableStateUsableDef = v8;
            break;
        }
      }
      else
      {
        v5 = varScriptableStateSimpleDef;
        varScriptableStateSimpleDef = &pos->simple;
        Preload_ScriptableStateSimpleDef(AtStart);
        varScriptableStateSimpleDef = v5;
      }
      pos = (ScriptableStateDefUnion *)g_streamPosGlob.pos;
      varScriptableStateDefUnion = (ScriptableStateDefUnion *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableStateHealthDef
==============
*/
void Preload_ScriptableStateHealthDef(const DBStreamStart streamStart)
{
  ScriptableStateBaseDef *base; 
  ScriptableStateBaseDef *v2; 
  weapClass_t *weaponClasses; 
  weapClass_t *v4; 
  WeaponCompleteDef **weapons; 
  WeaponCompleteDef **v6; 
  const char **v7; 
  scr_string_t *v8; 

  Load_Stream(streamStart, varScriptableStateHealthDef, 0x60ui64);
  base = varScriptableStateHealthDef->base;
  if ( varScriptableStateHealthDef->base )
  {
    if ( base == (ScriptableStateBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableStateBaseDef *)-2i64 )
    {
      goto LABEL_8;
    }
    v2 = varScriptableStateBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableStateBaseDef = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
    Preload_ScriptableStateBaseDef(AtStart);
    varScriptableStateBaseDef = v2;
    if ( base == (ScriptableStateBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  weaponClasses = varScriptableStateHealthDef->weaponClasses;
  if ( !weaponClasses )
    goto LABEL_15;
  if ( weaponClasses == (weapClass_t *)-1i64 )
  {
    DB_PushSharedData();
  }
  else if ( weaponClasses != (weapClass_t *)-2i64 )
  {
    goto LABEL_15;
  }
  v4 = varweapClass_t;
  varweapClass_t = AllocPreload_weapClass_t();
  Preload_weapClass_tArray(AtStart, varScriptableStateHealthDef->numWeaponClasses);
  varweapClass_t = v4;
  if ( weaponClasses == (weapClass_t *)-1i64 )
    DB_PopSharedData();
LABEL_15:
  weapons = varScriptableStateHealthDef->weapons;
  if ( weapons )
  {
    if ( weapons == (WeaponCompleteDef **)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( weapons != (WeaponCompleteDef **)-2i64 )
    {
      goto LABEL_22;
    }
    v6 = varWeaponCompleteDefPtr;
    varWeaponCompleteDefPtr = AllocPreload_WeaponCompleteDefPtr();
    Preload_WeaponCompleteDefPtrArray(AtStart, varScriptableStateHealthDef->numWeapons);
    varWeaponCompleteDefPtr = v6;
    if ( weapons == (WeaponCompleteDef **)-1i64 )
      DB_PopSharedData();
  }
LABEL_22:
  v7 = varXString;
  varXString = &varScriptableStateHealthDef->script_id;
  Preload_XString(NotAtStart);
  varXString = v7;
  v8 = varscr_string_t;
  varscr_string_t = &varScriptableStateHealthDef->scrScript_id;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = v8;
}

/*
==============
Preload_ScriptableStateHealthDefArray
==============
*/
void Preload_ScriptableStateHealthDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableStateHealthDef *i; 
  ScriptableStateBaseDef *base; 
  ScriptableStateBaseDef *v5; 
  weapClass_t *weaponClasses; 
  weapClass_t *v7; 
  WeaponCompleteDef **weapons; 
  WeaponCompleteDef **v9; 
  const char **v10; 
  scr_string_t *v11; 

  v2 = count;
  Load_Stream(streamStart, varScriptableStateHealthDef, 96 * count);
  for ( i = varScriptableStateHealthDef; v2; --v2 )
  {
    varScriptableStateHealthDef = i;
    Load_Stream(NotAtStart, i, 0x60ui64);
    base = varScriptableStateHealthDef->base;
    if ( !varScriptableStateHealthDef->base )
      goto LABEL_9;
    if ( base == (ScriptableStateBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableStateBaseDef *)-2i64 )
    {
      goto LABEL_9;
    }
    v5 = varScriptableStateBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableStateBaseDef = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
    Preload_ScriptableStateBaseDef(AtStart);
    varScriptableStateBaseDef = v5;
    if ( base == (ScriptableStateBaseDef *)-1i64 )
      DB_PopSharedData();
LABEL_9:
    weaponClasses = varScriptableStateHealthDef->weaponClasses;
    if ( !weaponClasses )
      goto LABEL_16;
    if ( weaponClasses == (weapClass_t *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( weaponClasses != (weapClass_t *)-2i64 )
    {
      goto LABEL_16;
    }
    v7 = varweapClass_t;
    varweapClass_t = AllocPreload_weapClass_t();
    Preload_weapClass_tArray(AtStart, varScriptableStateHealthDef->numWeaponClasses);
    varweapClass_t = v7;
    if ( weaponClasses == (weapClass_t *)-1i64 )
      DB_PopSharedData();
LABEL_16:
    weapons = varScriptableStateHealthDef->weapons;
    if ( weapons )
    {
      if ( weapons == (WeaponCompleteDef **)-1i64 )
      {
        DB_PushSharedData();
LABEL_21:
        v9 = varWeaponCompleteDefPtr;
        varWeaponCompleteDefPtr = AllocPreload_WeaponCompleteDefPtr();
        Preload_WeaponCompleteDefPtrArray(AtStart, varScriptableStateHealthDef->numWeapons);
        varWeaponCompleteDefPtr = v9;
        if ( weapons == (WeaponCompleteDef **)-1i64 )
          DB_PopSharedData();
        goto LABEL_23;
      }
      if ( weapons == (WeaponCompleteDef **)-2i64 )
        goto LABEL_21;
    }
LABEL_23:
    v10 = varXString;
    varXString = &varScriptableStateHealthDef->script_id;
    Preload_XString(NotAtStart);
    varXString = v10;
    v11 = varscr_string_t;
    varscr_string_t = &varScriptableStateHealthDef->scrScript_id;
    Preload_scr_string_t(NotAtStart);
    ++i;
    varscr_string_t = v11;
  }
}

/*
==============
Preload_ScriptableStateHealthDefStream
==============
*/
void Preload_ScriptableStateHealthDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableStateBaseDef *base; 
  ScriptableStateBaseDef *v5; 
  weapClass_t *weaponClasses; 
  weapClass_t *v7; 
  WeaponCompleteDef **weapons; 
  WeaponCompleteDef **v9; 
  const char **v10; 
  scr_string_t *v11; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 61575, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableStateHealthDef;
    do
    {
      Load_Stream(AtStart, pos, 0x60ui64);
      base = varScriptableStateHealthDef->base;
      if ( !varScriptableStateHealthDef->base )
        goto LABEL_13;
      if ( base == (ScriptableStateBaseDef *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( base != (ScriptableStateBaseDef *)-2i64 )
      {
        goto LABEL_13;
      }
      v5 = varScriptableStateBaseDef;
      DB_PatchMem_FixStreamAlignment(7ui64);
      DB_CheckCanIncStreamPos(0i64);
      varScriptableStateBaseDef = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
      Preload_ScriptableStateBaseDef(AtStart);
      varScriptableStateBaseDef = v5;
      if ( base == (ScriptableStateBaseDef *)-1i64 )
        DB_PopSharedData();
LABEL_13:
      weaponClasses = varScriptableStateHealthDef->weaponClasses;
      if ( !weaponClasses )
        goto LABEL_20;
      if ( weaponClasses == (weapClass_t *)-1i64 )
      {
        DB_PushSharedData();
      }
      else if ( weaponClasses != (weapClass_t *)-2i64 )
      {
        goto LABEL_20;
      }
      v7 = varweapClass_t;
      varweapClass_t = AllocPreload_weapClass_t();
      Preload_weapClass_tArray(AtStart, varScriptableStateHealthDef->numWeaponClasses);
      varweapClass_t = v7;
      if ( weaponClasses == (weapClass_t *)-1i64 )
        DB_PopSharedData();
LABEL_20:
      weapons = varScriptableStateHealthDef->weapons;
      if ( weapons )
      {
        if ( weapons == (WeaponCompleteDef **)-1i64 )
        {
          DB_PushSharedData();
LABEL_25:
          v9 = varWeaponCompleteDefPtr;
          varWeaponCompleteDefPtr = AllocPreload_WeaponCompleteDefPtr();
          Preload_WeaponCompleteDefPtrArray(AtStart, varScriptableStateHealthDef->numWeapons);
          varWeaponCompleteDefPtr = v9;
          if ( weapons == (WeaponCompleteDef **)-1i64 )
            DB_PopSharedData();
          goto LABEL_27;
        }
        if ( weapons == (WeaponCompleteDef **)-2i64 )
          goto LABEL_25;
      }
LABEL_27:
      v10 = varXString;
      varXString = &varScriptableStateHealthDef->script_id;
      Preload_XString(NotAtStart);
      varXString = v10;
      v11 = varscr_string_t;
      varscr_string_t = &varScriptableStateHealthDef->scrScript_id;
      Preload_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableStateHealthDef = (ScriptableStateHealthDef *)g_streamPosGlob.pos;
      varscr_string_t = v11;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableStateScriptedDef
==============
*/
void Preload_ScriptableStateScriptedDef(const DBStreamStart streamStart)
{
  ScriptableStateBaseDef *base; 
  ScriptableStateBaseDef *v2; 
  const char **v3; 
  scr_string_t *v4; 

  Load_Stream(streamStart, varScriptableStateScriptedDef, 0x18ui64);
  base = varScriptableStateScriptedDef->base;
  if ( varScriptableStateScriptedDef->base )
  {
    if ( base == (ScriptableStateBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableStateBaseDef *)-2i64 )
    {
      goto LABEL_8;
    }
    v2 = varScriptableStateBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableStateBaseDef = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
    Preload_ScriptableStateBaseDef(AtStart);
    varScriptableStateBaseDef = v2;
    if ( base == (ScriptableStateBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v3 = varXString;
  varXString = &varScriptableStateScriptedDef->script_id;
  Preload_XString(NotAtStart);
  varXString = v3;
  v4 = varscr_string_t;
  varscr_string_t = &varScriptableStateScriptedDef->scrScript_id;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = v4;
}

/*
==============
Preload_ScriptableStateScriptedDefArray
==============
*/
void Preload_ScriptableStateScriptedDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableStateScriptedDef *i; 
  ScriptableStateBaseDef *base; 
  ScriptableStateBaseDef *v5; 
  const char **v6; 
  scr_string_t *v7; 

  v2 = count;
  Load_Stream(streamStart, varScriptableStateScriptedDef, 24 * count);
  for ( i = varScriptableStateScriptedDef; v2; --v2 )
  {
    varScriptableStateScriptedDef = i;
    Load_Stream(NotAtStart, i, 0x18ui64);
    base = varScriptableStateScriptedDef->base;
    if ( varScriptableStateScriptedDef->base )
    {
      if ( base == (ScriptableStateBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v5 = varScriptableStateBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableStateBaseDef = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
        Preload_ScriptableStateBaseDef(AtStart);
        varScriptableStateBaseDef = v5;
        if ( base == (ScriptableStateBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableStateBaseDef *)-2i64 )
        goto LABEL_7;
    }
LABEL_9:
    v6 = varXString;
    varXString = &varScriptableStateScriptedDef->script_id;
    Preload_XString(NotAtStart);
    varXString = v6;
    v7 = varscr_string_t;
    varscr_string_t = &varScriptableStateScriptedDef->scrScript_id;
    Preload_scr_string_t(NotAtStart);
    ++i;
    varscr_string_t = v7;
  }
}

/*
==============
Preload_ScriptableStateScriptedDefStream
==============
*/
void Preload_ScriptableStateScriptedDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableStateBaseDef *base; 
  ScriptableStateBaseDef *v5; 
  const char **v6; 
  scr_string_t *v7; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 61726, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableStateScriptedDef;
    do
    {
      Load_Stream(AtStart, pos, 0x18ui64);
      base = varScriptableStateScriptedDef->base;
      if ( varScriptableStateScriptedDef->base )
      {
        if ( base == (ScriptableStateBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v5 = varScriptableStateBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableStateBaseDef = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
          Preload_ScriptableStateBaseDef(AtStart);
          varScriptableStateBaseDef = v5;
          if ( base == (ScriptableStateBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableStateBaseDef *)-2i64 )
          goto LABEL_11;
      }
LABEL_13:
      v6 = varXString;
      varXString = &varScriptableStateScriptedDef->script_id;
      Preload_XString(NotAtStart);
      varXString = v6;
      v7 = varscr_string_t;
      varscr_string_t = &varScriptableStateScriptedDef->scrScript_id;
      Preload_scr_string_t(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableStateScriptedDef = (ScriptableStateScriptedDef *)g_streamPosGlob.pos;
      varscr_string_t = v7;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableStateSimpleDef
==============
*/
void Preload_ScriptableStateSimpleDef(const DBStreamStart streamStart)
{
  ScriptableStateBaseDef *base; 
  ScriptableStateBaseDef *v2; 

  Load_Stream(streamStart, varScriptableStateSimpleDef, 8ui64);
  base = varScriptableStateSimpleDef->base;
  if ( varScriptableStateSimpleDef->base )
  {
    if ( base == (ScriptableStateBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableStateBaseDef *)-2i64 )
    {
      return;
    }
    v2 = varScriptableStateBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableStateBaseDef = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
    Preload_ScriptableStateBaseDef(AtStart);
    varScriptableStateBaseDef = v2;
    if ( base == (ScriptableStateBaseDef *)-1i64 )
      DB_PopSharedData();
  }
}

/*
==============
Preload_ScriptableStateSimpleDefArray
==============
*/
void Preload_ScriptableStateSimpleDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableStateSimpleDef *i; 
  ScriptableStateBaseDef *base; 
  ScriptableStateBaseDef *v5; 

  v2 = count;
  Load_Stream(streamStart, varScriptableStateSimpleDef, 8 * count);
  for ( i = varScriptableStateSimpleDef; v2; --v2 )
  {
    varScriptableStateSimpleDef = i;
    Load_Stream(NotAtStart, i, 8ui64);
    base = varScriptableStateSimpleDef->base;
    if ( varScriptableStateSimpleDef->base )
    {
      if ( base == (ScriptableStateBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v5 = varScriptableStateBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableStateBaseDef = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
        Preload_ScriptableStateBaseDef(AtStart);
        varScriptableStateBaseDef = v5;
        if ( base == (ScriptableStateBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableStateBaseDef *)-2i64 )
        goto LABEL_7;
    }
LABEL_9:
    ++i;
  }
}

/*
==============
Preload_ScriptableStateSimpleDefStream
==============
*/
void Preload_ScriptableStateSimpleDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableStateBaseDef *base; 
  ScriptableStateBaseDef *v5; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 61048, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableStateSimpleDef;
    do
    {
      Load_Stream(AtStart, pos, 8ui64);
      base = varScriptableStateSimpleDef->base;
      if ( varScriptableStateSimpleDef->base )
      {
        if ( base == (ScriptableStateBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v5 = varScriptableStateBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableStateBaseDef = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
          Preload_ScriptableStateBaseDef(AtStart);
          varScriptableStateBaseDef = v5;
          if ( base == (ScriptableStateBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableStateBaseDef *)-2i64 )
          goto LABEL_11;
      }
LABEL_13:
      pos = g_streamPosGlob.pos;
      varScriptableStateSimpleDef = (ScriptableStateSimpleDef *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_ScriptableStateUsableDef
==============
*/
void Preload_ScriptableStateUsableDef(const DBStreamStart streamStart)
{
  ScriptableStateBaseDef *base; 
  ScriptableStateBaseDef *v2; 
  const char **v3; 
  scr_string_t *v4; 
  const char **v5; 
  GfxImage **v6; 

  Load_Stream(streamStart, varScriptableStateUsableDef, 0x80ui64);
  base = varScriptableStateUsableDef->base;
  if ( varScriptableStateUsableDef->base )
  {
    if ( base == (ScriptableStateBaseDef *)-1i64 )
    {
      DB_PushSharedData();
    }
    else if ( base != (ScriptableStateBaseDef *)-2i64 )
    {
      goto LABEL_8;
    }
    v2 = varScriptableStateBaseDef;
    DB_PatchMem_FixStreamAlignment(7ui64);
    DB_CheckCanIncStreamPos(0i64);
    varScriptableStateBaseDef = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
    Preload_ScriptableStateBaseDef(AtStart);
    varScriptableStateBaseDef = v2;
    if ( base == (ScriptableStateBaseDef *)-1i64 )
      DB_PopSharedData();
  }
LABEL_8:
  v3 = varXString;
  varXString = &varScriptableStateUsableDef->script_id;
  Preload_XString(NotAtStart);
  varXString = v3;
  v4 = varscr_string_t;
  varscr_string_t = &varScriptableStateUsableDef->scrScript_id;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = &varScriptableStateUsableDef->hintTag;
  Preload_scr_string_t(NotAtStart);
  varscr_string_t = v4;
  v5 = varXString;
  varXString = &varScriptableStateUsableDef->hintString;
  Preload_XString(NotAtStart);
  varXString = &varScriptableStateUsableDef->hintStringDisabled;
  Preload_XString(NotAtStart);
  varXString = &varScriptableStateUsableDef->hintIcon;
  Preload_XString(NotAtStart);
  varXString = v5;
  v6 = varGfxImagePtr;
  varGfxImagePtr = &varScriptableStateUsableDef->hintIconImage;
  Preload_GfxImagePtr(NotAtStart);
  varGfxImagePtr = v6;
}

/*
==============
Preload_ScriptableStateUsableDefArray
==============
*/
void Preload_ScriptableStateUsableDefArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int64 v2; 
  ScriptableStateUsableDef *i; 
  ScriptableStateBaseDef *base; 
  ScriptableStateBaseDef *v5; 
  const char **v6; 
  scr_string_t *v7; 
  const char **v8; 
  GfxImage **v9; 

  v2 = count;
  Load_Stream(streamStart, varScriptableStateUsableDef, count << 7);
  for ( i = varScriptableStateUsableDef; v2; --v2 )
  {
    varScriptableStateUsableDef = i;
    Load_Stream(NotAtStart, i, 0x80ui64);
    base = varScriptableStateUsableDef->base;
    if ( varScriptableStateUsableDef->base )
    {
      if ( base == (ScriptableStateBaseDef *)-1i64 )
      {
        DB_PushSharedData();
LABEL_7:
        v5 = varScriptableStateBaseDef;
        DB_PatchMem_FixStreamAlignment(7ui64);
        DB_CheckCanIncStreamPos(0i64);
        varScriptableStateBaseDef = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
        Preload_ScriptableStateBaseDef(AtStart);
        varScriptableStateBaseDef = v5;
        if ( base == (ScriptableStateBaseDef *)-1i64 )
          DB_PopSharedData();
        goto LABEL_9;
      }
      if ( base == (ScriptableStateBaseDef *)-2i64 )
        goto LABEL_7;
    }
LABEL_9:
    v6 = varXString;
    varXString = &varScriptableStateUsableDef->script_id;
    Preload_XString(NotAtStart);
    varXString = v6;
    v7 = varscr_string_t;
    varscr_string_t = &varScriptableStateUsableDef->scrScript_id;
    Preload_scr_string_t(NotAtStart);
    varscr_string_t = &varScriptableStateUsableDef->hintTag;
    Preload_scr_string_t(NotAtStart);
    varscr_string_t = v7;
    v8 = varXString;
    varXString = &varScriptableStateUsableDef->hintString;
    Preload_XString(NotAtStart);
    varXString = &varScriptableStateUsableDef->hintStringDisabled;
    Preload_XString(NotAtStart);
    varXString = &varScriptableStateUsableDef->hintIcon;
    Preload_XString(NotAtStart);
    varXString = v8;
    v9 = varGfxImagePtr;
    varGfxImagePtr = &varScriptableStateUsableDef->hintIconImage;
    Preload_GfxImagePtr(NotAtStart);
    ++i;
    varGfxImagePtr = v9;
  }
}

/*
==============
Preload_ScriptableStateUsableDefStream
==============
*/
void Preload_ScriptableStateUsableDefStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 
  ScriptableStateBaseDef *base; 
  ScriptableStateBaseDef *v5; 
  const char **v6; 
  scr_string_t *v7; 
  const char **v8; 
  GfxImage **v9; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 62339, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptableStateUsableDef;
    do
    {
      Load_Stream(AtStart, pos, 0x80ui64);
      base = varScriptableStateUsableDef->base;
      if ( varScriptableStateUsableDef->base )
      {
        if ( base == (ScriptableStateBaseDef *)-1i64 )
        {
          DB_PushSharedData();
LABEL_11:
          v5 = varScriptableStateBaseDef;
          DB_PatchMem_FixStreamAlignment(7ui64);
          DB_CheckCanIncStreamPos(0i64);
          varScriptableStateBaseDef = (ScriptableStateBaseDef *)g_streamPosGlob.pos;
          Preload_ScriptableStateBaseDef(AtStart);
          varScriptableStateBaseDef = v5;
          if ( base == (ScriptableStateBaseDef *)-1i64 )
            DB_PopSharedData();
          goto LABEL_13;
        }
        if ( base == (ScriptableStateBaseDef *)-2i64 )
          goto LABEL_11;
      }
LABEL_13:
      v6 = varXString;
      varXString = &varScriptableStateUsableDef->script_id;
      Preload_XString(NotAtStart);
      varXString = v6;
      v7 = varscr_string_t;
      varscr_string_t = &varScriptableStateUsableDef->scrScript_id;
      Preload_scr_string_t(NotAtStart);
      varscr_string_t = &varScriptableStateUsableDef->hintTag;
      Preload_scr_string_t(NotAtStart);
      varscr_string_t = v7;
      v8 = varXString;
      varXString = &varScriptableStateUsableDef->hintString;
      Preload_XString(NotAtStart);
      varXString = &varScriptableStateUsableDef->hintStringDisabled;
      Preload_XString(NotAtStart);
      varXString = &varScriptableStateUsableDef->hintIcon;
      Preload_XString(NotAtStart);
      varXString = v8;
      v9 = varGfxImagePtr;
      varGfxImagePtr = &varScriptableStateUsableDef->hintIconImage;
      Preload_GfxImagePtr(NotAtStart);
      pos = g_streamPosGlob.pos;
      varScriptableStateUsableDef = (ScriptableStateUsableDef *)g_streamPosGlob.pos;
      varGfxImagePtr = v9;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_Scriptable_Attackers
==============
*/
void Preload_Scriptable_Attackers(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varScriptable_Attackers, 4ui64);
}

/*
==============
Preload_Scriptable_AttackersArray
==============
*/
void Preload_Scriptable_AttackersArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varScriptable_Attackers, 4 * count);
}

/*
==============
Preload_Scriptable_AttackersStream
==============
*/
void Preload_Scriptable_AttackersStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 46725, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptable_Attackers;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varScriptable_Attackers = (Scriptable_Attackers *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_Scriptable_DamageCause
==============
*/
void Preload_Scriptable_DamageCause(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varScriptable_DamageCause, 4ui64);
}

/*
==============
Preload_Scriptable_DamageCauseArray
==============
*/
void Preload_Scriptable_DamageCauseArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varScriptable_DamageCause, 4 * count);
}

/*
==============
Preload_Scriptable_DamageCauseStream
==============
*/
void Preload_Scriptable_DamageCauseStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 46671, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptable_DamageCause;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varScriptable_DamageCause = (Scriptable_DamageCause *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_Scriptable_EventSun_Data
==============
*/
void Preload_Scriptable_EventSun_Data(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varScriptable_EventSun_Data, 0x34ui64);
}

/*
==============
Preload_Scriptable_EventSun_DataArray
==============
*/
void Preload_Scriptable_EventSun_DataArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varScriptable_EventSun_Data, 52 * count);
}

/*
==============
Preload_Scriptable_EventSun_DataStream
==============
*/
void Preload_Scriptable_EventSun_DataStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 64485, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptable_EventSun_Data;
    do
    {
      Load_Stream(AtStart, pos, 0x34ui64);
      pos = g_streamPosGlob.pos;
      varScriptable_EventSun_Data = (Scriptable_EventSun_Data *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_Scriptable_EventType
==============
*/
void Preload_Scriptable_EventType(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varScriptable_EventType, 4ui64);
}

/*
==============
Preload_Scriptable_EventTypeArray
==============
*/
void Preload_Scriptable_EventTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varScriptable_EventType, 4 * count);
}

/*
==============
Preload_Scriptable_EventTypeStream
==============
*/
void Preload_Scriptable_EventTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 46347, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptable_EventType;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varScriptable_EventType = (Scriptable_EventType *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_Scriptable_ImageId
==============
*/
void Preload_Scriptable_ImageId(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varScriptable_ImageId, 4ui64);
}

/*
==============
Preload_Scriptable_ImageIdArray
==============
*/
void Preload_Scriptable_ImageIdArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varScriptable_ImageId, 4 * count);
}

/*
==============
Preload_Scriptable_ImageIdStream
==============
*/
void Preload_Scriptable_ImageIdStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 46509, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptable_ImageId;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varScriptable_ImageId = (Scriptable_ImageId *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_Scriptable_MaterialOverrideType
==============
*/
void Preload_Scriptable_MaterialOverrideType(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varScriptable_MaterialOverrideType, 4ui64);
}

/*
==============
Preload_Scriptable_MaterialOverrideTypeArray
==============
*/
void Preload_Scriptable_MaterialOverrideTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varScriptable_MaterialOverrideType, 4 * count);
}

/*
==============
Preload_Scriptable_MaterialOverrideTypeStream
==============
*/
void Preload_Scriptable_MaterialOverrideTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 51318, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptable_MaterialOverrideType;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varScriptable_MaterialOverrideType = (Scriptable_MaterialOverrideType *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_Scriptable_MayhemAction
==============
*/
void Preload_Scriptable_MayhemAction(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varScriptable_MayhemAction, 4ui64);
}

/*
==============
Preload_Scriptable_MayhemActionArray
==============
*/
void Preload_Scriptable_MayhemActionArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varScriptable_MayhemAction, 4 * count);
}

/*
==============
Preload_Scriptable_MayhemActionStream
==============
*/
void Preload_Scriptable_MayhemActionStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 46401, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptable_MayhemAction;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varScriptable_MayhemAction = (Scriptable_MayhemAction *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_Scriptable_ShaderParamType
==============
*/
void Preload_Scriptable_ShaderParamType(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varScriptable_ShaderParamType, 4ui64);
}

/*
==============
Preload_Scriptable_ShaderParamTypeArray
==============
*/
void Preload_Scriptable_ShaderParamTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varScriptable_ShaderParamType, 4 * count);
}

/*
==============
Preload_Scriptable_ShaderParamTypeStream
==============
*/
void Preload_Scriptable_ShaderParamTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 46455, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptable_ShaderParamType;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varScriptable_ShaderParamType = (Scriptable_ShaderParamType *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_Scriptable_StateType
==============
*/
void Preload_Scriptable_StateType(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varScriptable_StateType, 4ui64);
}

/*
==============
Preload_Scriptable_StateTypeArray
==============
*/
void Preload_Scriptable_StateTypeArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varScriptable_StateType, 4 * count);
}

/*
==============
Preload_Scriptable_StateTypeStream
==============
*/
void Preload_Scriptable_StateTypeStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 46617, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptable_StateType;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varScriptable_StateType = (Scriptable_StateType *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

/*
==============
Preload_Scriptable_TeamFilter
==============
*/
void Preload_Scriptable_TeamFilter(const DBStreamStart streamStart)
{
  Load_Stream(streamStart, varScriptable_TeamFilter, 4ui64);
}

/*
==============
Preload_Scriptable_TeamFilterArray
==============
*/
void Preload_Scriptable_TeamFilterArray(const DBStreamStart streamStart, const unsigned __int64 count)
{
  Load_Stream(streamStart, varScriptable_TeamFilter, 4 * count);
}

/*
==============
Preload_Scriptable_TeamFilterStream
==============
*/
void Preload_Scriptable_TeamFilterStream(const DBStreamStart streamStart, const unsigned __int64 count)
{
  unsigned __int8 *pos; 

  if ( streamStart && CoreAssert_Handler("c:\\workspace\\iw8\\code_source\\src\\db_generated\\load\\impl\\archive_impl_scriptable_db.h", 46563, ASSERT_TYPE_ASSERT, "(streamStart == DBStreamStart::AtStart)", (const char *)&queryFormat, "streamStart == DBStreamStart::AtStart") )
    __debugbreak();
  if ( count )
  {
    pos = (unsigned __int8 *)varScriptable_TeamFilter;
    do
    {
      Load_Stream(AtStart, pos, 4ui64);
      pos = g_streamPosGlob.pos;
      varScriptable_TeamFilter = (Scriptable_TeamFilter *)g_streamPosGlob.pos;
      --count;
    }
    while ( count );
  }
}

